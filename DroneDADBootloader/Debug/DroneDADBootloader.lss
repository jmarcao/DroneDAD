
DroneDADBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002744  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002744  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000004  00002748  00020004  2**2
                  ALLOC
  3 .stack        00002000  200000c8  0000280c  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000261d7  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f03  00000000  00000000  0004625c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002544  00000000  00000000  0004915f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000700  00000000  00000000  0004b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000600  00000000  00000000  0004bda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005cf9  00000000  00000000  0004c3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bd81  00000000  00000000  0005209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087c0c  00000000  00000000  0005de1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001718  00000000  00000000  000e5a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 55 1f 00 00 4d 20 00 00 4d 20 00 00     . . U...M ..M ..
	...
      2c:	4d 20 00 00 00 00 00 00 00 00 00 00 4d 20 00 00     M ..........M ..
      3c:	4d 20 00 00 4d 20 00 00 4d 20 00 00 31 1f 00 00     M ..M ..M ..1...
      4c:	4d 20 00 00 4d 20 00 00 4d 20 00 00 4d 20 00 00     M ..M ..M ..M ..
      5c:	4d 20 00 00 4d 20 00 00 89 07 00 00 a1 07 00 00     M ..M ..........
      6c:	b9 07 00 00 d1 07 00 00 e9 07 00 00 01 08 00 00     ................
      7c:	4d 20 00 00 4d 20 00 00 4d 20 00 00 4d 20 00 00     M ..M ..M ..M ..
      8c:	4d 20 00 00 4d 20 00 00 00 00 00 00 00 00 00 00     M ..M ..........
      9c:	4d 20 00 00 4d 20 00 00 4d 20 00 00 4d 20 00 00     M ..M ..M ..M ..
      ac:	4d 20 00 00 00 00 00 00                             M ......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00002744 	.word	0x00002744

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00002744 	.word	0x00002744
     10c:	00002744 	.word	0x00002744
     110:	00000000 	.word	0x00000000

00000114 <nvm_is_ready>:

	fusebits[0] &= (~FUSES_BOD33_ACTION_Msk);
	fusebits[0] |= fb->bod33_action << FUSES_BOD33_ACTION_Pos;

	fusebits[1] &= (~FUSES_BOD33_HYST_Msk);
	fusebits[1] |= fb->bod33_hysteresis << FUSES_BOD33_HYST_Pos;
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	4b07      	ldr	r3, [pc, #28]	; (138 <nvm_is_ready+0x24>)
	fusebits[1] &= (~FUSES_BODVDD_HYST_Msk);
	fusebits[1] |= fb->bodvdd_hysteresis << FUSES_BODVDD_HYST_Pos;

#endif

	fusebits[0] &= (~WDT_FUSES_ENABLE_Msk);
     11c:	607b      	str	r3, [r7, #4]
     11e:	687b      	ldr	r3, [r7, #4]
     120:	7d1b      	ldrb	r3, [r3, #20]
     122:	b2db      	uxtb	r3, r3
     124:	001a      	movs	r2, r3
     126:	2301      	movs	r3, #1
     128:	4013      	ands	r3, r2
     12a:	1e5a      	subs	r2, r3, #1
	fusebits[0] |= fb->wdt_enable << WDT_FUSES_ENABLE_Pos;
     12c:	4193      	sbcs	r3, r2
     12e:	b2db      	uxtb	r3, r3
     130:	0018      	movs	r0, r3
     132:	46bd      	mov	sp, r7
     134:	b002      	add	sp, #8
     136:	bd80      	pop	{r7, pc}
     138:	41004000 	.word	0x41004000

0000013c <system_apb_clock_set_mask>:
     13c:	b580      	push	{r7, lr}
     13e:	b082      	sub	sp, #8

	fusebits[0] &= (~WDT_FUSES_ALWAYSON_Msk);
     140:	af00      	add	r7, sp, #0
     142:	0002      	movs	r2, r0
     144:	6039      	str	r1, [r7, #0]
     146:	1dfb      	adds	r3, r7, #7
     148:	701a      	strb	r2, [r3, #0]
     14a:	1dfb      	adds	r3, r7, #7
     14c:	781b      	ldrb	r3, [r3, #0]
     14e:	2b01      	cmp	r3, #1
	fusebits[0] |= (fb->wdt_always_on) << WDT_FUSES_ALWAYSON_Pos;
     150:	d00a      	beq.n	168 <system_apb_clock_set_mask+0x2c>
     152:	2b02      	cmp	r3, #2
     154:	d00f      	beq.n	176 <system_apb_clock_set_mask+0x3a>
     156:	2b00      	cmp	r3, #0
     158:	d114      	bne.n	184 <system_apb_clock_set_mask+0x48>
     15a:	4b0e      	ldr	r3, [pc, #56]	; (194 <system_apb_clock_set_mask+0x58>)
     15c:	4a0d      	ldr	r2, [pc, #52]	; (194 <system_apb_clock_set_mask+0x58>)
     15e:	6991      	ldr	r1, [r2, #24]
     160:	683a      	ldr	r2, [r7, #0]
     162:	430a      	orrs	r2, r1

	fusebits[0] &= (~WDT_FUSES_PER_Msk);
     164:	619a      	str	r2, [r3, #24]
     166:	e00f      	b.n	188 <system_apb_clock_set_mask+0x4c>
     168:	4b0a      	ldr	r3, [pc, #40]	; (194 <system_apb_clock_set_mask+0x58>)
     16a:	4a0a      	ldr	r2, [pc, #40]	; (194 <system_apb_clock_set_mask+0x58>)
     16c:	69d1      	ldr	r1, [r2, #28]
     16e:	683a      	ldr	r2, [r7, #0]
     170:	430a      	orrs	r2, r1
     172:	61da      	str	r2, [r3, #28]
	fusebits[0] |= fb->wdt_timeout_period << WDT_FUSES_PER_Pos;
     174:	e008      	b.n	188 <system_apb_clock_set_mask+0x4c>
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <system_apb_clock_set_mask+0x58>)
     178:	4a06      	ldr	r2, [pc, #24]	; (194 <system_apb_clock_set_mask+0x58>)
     17a:	6a11      	ldr	r1, [r2, #32]
     17c:	683a      	ldr	r2, [r7, #0]
     17e:	430a      	orrs	r2, r1
     180:	621a      	str	r2, [r3, #32]
     182:	e001      	b.n	188 <system_apb_clock_set_mask+0x4c>
     184:	2317      	movs	r3, #23
     186:	e000      	b.n	18a <system_apb_clock_set_mask+0x4e>
	fusebits[1] &= (~WDT_FUSES_WINDOW_Msk);
	fusebits[1] |= fb->wdt_window_timeout << WDT_FUSES_WINDOW_Pos;
#else
   /* WDT Windows timout lay between two 32-bit words in the user row. the last one bit lays in word[0],
	   and the other bits in word[1] */
	fusebits[0] &= (~WDT_FUSES_WINDOW_0_Msk);
     188:	2300      	movs	r3, #0
     18a:	0018      	movs	r0, r3
     18c:	46bd      	mov	sp, r7
     18e:	b002      	add	sp, #8
     190:	bd80      	pop	{r7, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	40000400 	.word	0x40000400

00000198 <nvm_set_config>:
	fusebits[0] |= (fb->wdt_window_timeout & 0x1) << WDT_FUSES_WINDOW_0_Pos;
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
     1a0:	4b2f      	ldr	r3, [pc, #188]	; (260 <nvm_set_config+0xc8>)
     1a2:	60fb      	str	r3, [r7, #12]
     1a4:	2104      	movs	r1, #4
     1a6:	2001      	movs	r0, #1
     1a8:	4b2e      	ldr	r3, [pc, #184]	; (264 <nvm_set_config+0xcc>)
     1aa:	4798      	blx	r3

	fusebits[1] &= (~WDT_FUSES_WINDOW_1_Msk);
     1ac:	68fb      	ldr	r3, [r7, #12]
     1ae:	2220      	movs	r2, #32
     1b0:	32ff      	adds	r2, #255	; 0xff
     1b2:	831a      	strh	r2, [r3, #24]
     1b4:	4b2c      	ldr	r3, [pc, #176]	; (268 <nvm_set_config+0xd0>)
     1b6:	4798      	blx	r3
     1b8:	0003      	movs	r3, r0
     1ba:	001a      	movs	r2, r3
     1bc:	2301      	movs	r3, #1
	fusebits[1] |= (fb->wdt_window_timeout >> 1) << WDT_FUSES_WINDOW_1_Pos;
     1be:	4053      	eors	r3, r2
     1c0:	b2db      	uxtb	r3, r3
     1c2:	2b00      	cmp	r3, #0
     1c4:	d001      	beq.n	1ca <nvm_set_config+0x32>
     1c6:	2305      	movs	r3, #5
     1c8:	e045      	b.n	256 <nvm_set_config+0xbe>
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	021b      	lsls	r3, r3, #8
     1d0:	001a      	movs	r2, r3
     1d2:	23c0      	movs	r3, #192	; 0xc0

#endif
	fusebits[1] &= (~WDT_FUSES_EWOFFSET_Msk);
     1d4:	009b      	lsls	r3, r3, #2
     1d6:	401a      	ands	r2, r3
     1d8:	687b      	ldr	r3, [r7, #4]
     1da:	785b      	ldrb	r3, [r3, #1]
     1dc:	01db      	lsls	r3, r3, #7
     1de:	0019      	movs	r1, r3
     1e0:	23ff      	movs	r3, #255	; 0xff
     1e2:	400b      	ands	r3, r1
     1e4:	431a      	orrs	r2, r3
	fusebits[1] |= fb->wdt_early_warning_offset << WDT_FUSES_EWOFFSET_Pos;
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	789b      	ldrb	r3, [r3, #2]
     1ea:	005b      	lsls	r3, r3, #1
     1ec:	0019      	movs	r1, r3
     1ee:	231e      	movs	r3, #30
     1f0:	400b      	ands	r3, r1
     1f2:	431a      	orrs	r2, r3
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	78db      	ldrb	r3, [r3, #3]
     1f8:	049b      	lsls	r3, r3, #18

	fusebits[1] &= (~WDT_FUSES_WEN_Msk);
     1fa:	0019      	movs	r1, r3
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	02db      	lsls	r3, r3, #11
     200:	400b      	ands	r3, r1
     202:	431a      	orrs	r2, r3
     204:	687b      	ldr	r3, [r7, #4]
     206:	791b      	ldrb	r3, [r3, #4]
     208:	041b      	lsls	r3, r3, #16
     20a:	0019      	movs	r1, r3
	fusebits[1] |= fb->wdt_window_mode_enable_at_poweron << WDT_FUSES_WEN_Pos;
     20c:	23c0      	movs	r3, #192	; 0xc0
     20e:	029b      	lsls	r3, r3, #10
     210:	400b      	ands	r3, r1
     212:	431a      	orrs	r2, r3
     214:	68fb      	ldr	r3, [r7, #12]
     216:	605a      	str	r2, [r3, #4]
     218:	68fb      	ldr	r3, [r7, #12]
     21a:	689b      	ldr	r3, [r3, #8]
     21c:	035b      	lsls	r3, r3, #13
     21e:	0f5b      	lsrs	r3, r3, #29

	fusebits[1] &= (~NVMCTRL_FUSES_REGION_LOCKS_Msk);
     220:	b2db      	uxtb	r3, r3
     222:	001a      	movs	r2, r3
     224:	2308      	movs	r3, #8
     226:	4093      	lsls	r3, r2
     228:	b29a      	uxth	r2, r3
     22a:	4b10      	ldr	r3, [pc, #64]	; (26c <nvm_set_config+0xd4>)
     22c:	801a      	strh	r2, [r3, #0]
     22e:	68fb      	ldr	r3, [r7, #12]
	fusebits[1] |= fb->lockbits << NVMCTRL_FUSES_REGION_LOCKS_Pos;
     230:	689b      	ldr	r3, [r3, #8]
     232:	b29a      	uxth	r2, r3
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <nvm_set_config+0xd4>)
     236:	805a      	strh	r2, [r3, #2]
     238:	687b      	ldr	r3, [r7, #4]
     23a:	785a      	ldrb	r2, [r3, #1]
     23c:	4b0b      	ldr	r3, [pc, #44]	; (26c <nvm_set_config+0xd4>)
     23e:	711a      	strb	r2, [r3, #4]
     240:	68fb      	ldr	r3, [r7, #12]
     242:	8b1b      	ldrh	r3, [r3, #24]

	fusebits[1] &= (~FUSES_BOD12_HYST_Msk);
	fusebits[1] |= fb->bod12_hysteresis << FUSES_BOD12_HYST_Pos;
#endif

	error_code = nvm_execute_command(NVM_COMMAND_ERASE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     244:	b29b      	uxth	r3, r3
     246:	001a      	movs	r2, r3
     248:	2380      	movs	r3, #128	; 0x80
     24a:	005b      	lsls	r3, r3, #1
     24c:	4013      	ands	r3, r2
     24e:	d001      	beq.n	254 <nvm_set_config+0xbc>
     250:	2310      	movs	r3, #16
     252:	e000      	b.n	256 <nvm_set_config+0xbe>
     254:	2300      	movs	r3, #0
     256:	0018      	movs	r0, r3
	if (error_code != STATUS_OK) {
     258:	46bd      	mov	sp, r7
     25a:	b004      	add	sp, #16
     25c:	bd80      	pop	{r7, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	41004000 	.word	0x41004000
		return error_code;
     264:	0000013d 	.word	0x0000013d
     268:	00000115 	.word	0x00000115
	}

	error_code = nvm_execute_command(NVM_COMMAND_PAGE_BUFFER_CLEAR,NVMCTRL_AUX0_ADDRESS,0);
     26c:	20000020 	.word	0x20000020

00000270 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
     276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     278:	687b      	ldr	r3, [r7, #4]
     27a:	2280      	movs	r2, #128	; 0x80
     27c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2200      	movs	r2, #0
     282:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2201      	movs	r2, #1
     288:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	70da      	strb	r2, [r3, #3]
}
     290:	46c0      	nop			; (mov r8, r8)
     292:	46bd      	mov	sp, r7
     294:	b002      	add	sp, #8
     296:	bd80      	pop	{r7, pc}

00000298 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     298:	b580      	push	{r7, lr}
     29a:	b084      	sub	sp, #16
     29c:	af00      	add	r7, sp, #0
     29e:	0002      	movs	r2, r0
     2a0:	6039      	str	r1, [r7, #0]
     2a2:	1dfb      	adds	r3, r7, #7
     2a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     2a6:	230c      	movs	r3, #12
     2a8:	18fb      	adds	r3, r7, r3
     2aa:	0018      	movs	r0, r3
     2ac:	4b10      	ldr	r3, [pc, #64]	; (2f0 <port_pin_set_config+0x58>)
     2ae:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     2b0:	230c      	movs	r3, #12
     2b2:	18fb      	adds	r3, r7, r3
     2b4:	2280      	movs	r2, #128	; 0x80
     2b6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     2b8:	683b      	ldr	r3, [r7, #0]
     2ba:	781a      	ldrb	r2, [r3, #0]
     2bc:	230c      	movs	r3, #12
     2be:	18fb      	adds	r3, r7, r3
     2c0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2c2:	683b      	ldr	r3, [r7, #0]
     2c4:	785a      	ldrb	r2, [r3, #1]
     2c6:	230c      	movs	r3, #12
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2cc:	683b      	ldr	r3, [r7, #0]
     2ce:	789a      	ldrb	r2, [r3, #2]
     2d0:	230c      	movs	r3, #12
     2d2:	18fb      	adds	r3, r7, r3
     2d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2d6:	230c      	movs	r3, #12
     2d8:	18fa      	adds	r2, r7, r3
     2da:	1dfb      	adds	r3, r7, #7
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	0011      	movs	r1, r2
     2e0:	0018      	movs	r0, r3
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <port_pin_set_config+0x5c>)
     2e4:	4798      	blx	r3
}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	46bd      	mov	sp, r7
     2ea:	b004      	add	sp, #16
     2ec:	bd80      	pop	{r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00000271 	.word	0x00000271
     2f4:	00001bd1 	.word	0x00001bd1

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     2fc:	46c0      	nop			; (mov r8, r8)
     2fe:	46bd      	mov	sp, r7
     300:	bd80      	pop	{r7, pc}
	...

00000304 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     30a:	4b10      	ldr	r3, [pc, #64]	; (34c <cpu_irq_enter_critical+0x48>)
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	2b00      	cmp	r3, #0
     310:	d112      	bne.n	338 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     312:	f3ef 8310 	mrs	r3, PRIMASK
     316:	607b      	str	r3, [r7, #4]
  return(result);
     318:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     31a:	2b00      	cmp	r3, #0
     31c:	d109      	bne.n	332 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     31e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     320:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     324:	4b0a      	ldr	r3, [pc, #40]	; (350 <cpu_irq_enter_critical+0x4c>)
     326:	2200      	movs	r2, #0
     328:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     32a:	4b0a      	ldr	r3, [pc, #40]	; (354 <cpu_irq_enter_critical+0x50>)
     32c:	2201      	movs	r2, #1
     32e:	701a      	strb	r2, [r3, #0]
     330:	e002      	b.n	338 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <cpu_irq_enter_critical+0x50>)
     334:	2200      	movs	r2, #0
     336:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <cpu_irq_enter_critical+0x48>)
     33a:	681b      	ldr	r3, [r3, #0]
     33c:	1c5a      	adds	r2, r3, #1
     33e:	4b03      	ldr	r3, [pc, #12]	; (34c <cpu_irq_enter_critical+0x48>)
     340:	601a      	str	r2, [r3, #0]
}
     342:	46c0      	nop			; (mov r8, r8)
     344:	46bd      	mov	sp, r7
     346:	b002      	add	sp, #8
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	20000028 	.word	0x20000028
     350:	20000000 	.word	0x20000000
     354:	2000002c 	.word	0x2000002c

00000358 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     358:	b580      	push	{r7, lr}
     35a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <cpu_irq_leave_critical+0x34>)
     35e:	681b      	ldr	r3, [r3, #0]
     360:	1e5a      	subs	r2, r3, #1
     362:	4b0a      	ldr	r3, [pc, #40]	; (38c <cpu_irq_leave_critical+0x34>)
     364:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     366:	4b09      	ldr	r3, [pc, #36]	; (38c <cpu_irq_leave_critical+0x34>)
     368:	681b      	ldr	r3, [r3, #0]
     36a:	2b00      	cmp	r3, #0
     36c:	d10a      	bne.n	384 <cpu_irq_leave_critical+0x2c>
     36e:	4b08      	ldr	r3, [pc, #32]	; (390 <cpu_irq_leave_critical+0x38>)
     370:	781b      	ldrb	r3, [r3, #0]
     372:	b2db      	uxtb	r3, r3
     374:	2b00      	cmp	r3, #0
     376:	d005      	beq.n	384 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     378:	4b06      	ldr	r3, [pc, #24]	; (394 <cpu_irq_leave_critical+0x3c>)
     37a:	2201      	movs	r2, #1
     37c:	701a      	strb	r2, [r3, #0]
     37e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     382:	b662      	cpsie	i
	}
}
     384:	46c0      	nop			; (mov r8, r8)
     386:	46bd      	mov	sp, r7
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	20000028 	.word	0x20000028
     390:	2000002c 	.word	0x2000002c
     394:	20000000 	.word	0x20000000

00000398 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     398:	b580      	push	{r7, lr}
     39a:	b082      	sub	sp, #8
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2200      	movs	r2, #0
     3a4:	701a      	strb	r2, [r3, #0]
}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	46bd      	mov	sp, r7
     3aa:	b002      	add	sp, #8
     3ac:	bd80      	pop	{r7, pc}

000003ae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3ae:	b580      	push	{r7, lr}
     3b0:	b086      	sub	sp, #24
     3b2:	af00      	add	r7, sp, #0
     3b4:	60f8      	str	r0, [r7, #12]
     3b6:	60b9      	str	r1, [r7, #8]
     3b8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     3ba:	2316      	movs	r3, #22
     3bc:	18fb      	adds	r3, r7, r3
     3be:	2200      	movs	r2, #0
     3c0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     3c2:	68bb      	ldr	r3, [r7, #8]
     3c4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3c6:	68bb      	ldr	r3, [r7, #8]
     3c8:	085a      	lsrs	r2, r3, #1
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	429a      	cmp	r2, r3
     3ce:	d201      	bcs.n	3d4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3d0:	2340      	movs	r3, #64	; 0x40
     3d2:	e026      	b.n	422 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     3d4:	68bb      	ldr	r3, [r7, #8]
     3d6:	085b      	lsrs	r3, r3, #1
     3d8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     3da:	e00a      	b.n	3f2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     3dc:	693a      	ldr	r2, [r7, #16]
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	1ad3      	subs	r3, r2, r3
     3e2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3e4:	2316      	movs	r3, #22
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	881a      	ldrh	r2, [r3, #0]
     3ea:	2316      	movs	r3, #22
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	3201      	adds	r2, #1
     3f0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     3f2:	693a      	ldr	r2, [r7, #16]
     3f4:	68fb      	ldr	r3, [r7, #12]
     3f6:	429a      	cmp	r2, r3
     3f8:	d2f0      	bcs.n	3dc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     3fa:	2316      	movs	r3, #22
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	2216      	movs	r2, #22
     400:	18ba      	adds	r2, r7, r2
     402:	8812      	ldrh	r2, [r2, #0]
     404:	3a01      	subs	r2, #1
     406:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     408:	2316      	movs	r3, #22
     40a:	18fb      	adds	r3, r7, r3
     40c:	881b      	ldrh	r3, [r3, #0]
     40e:	2bff      	cmp	r3, #255	; 0xff
     410:	d901      	bls.n	416 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     412:	2340      	movs	r3, #64	; 0x40
     414:	e005      	b.n	422 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     416:	687b      	ldr	r3, [r7, #4]
     418:	2216      	movs	r2, #22
     41a:	18ba      	adds	r2, r7, r2
     41c:	8812      	ldrh	r2, [r2, #0]
     41e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     420:	2300      	movs	r3, #0
	}
}
     422:	0018      	movs	r0, r3
     424:	46bd      	mov	sp, r7
     426:	b006      	add	sp, #24
     428:	bd80      	pop	{r7, pc}
	...

0000042c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     42c:	b580      	push	{r7, lr}
     42e:	b084      	sub	sp, #16
     430:	af00      	add	r7, sp, #0
     432:	0002      	movs	r2, r0
     434:	1dfb      	adds	r3, r7, #7
     436:	701a      	strb	r2, [r3, #0]
     438:	1dbb      	adds	r3, r7, #6
     43a:	1c0a      	adds	r2, r1, #0
     43c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     43e:	4b1a      	ldr	r3, [pc, #104]	; (4a8 <sercom_set_gclk_generator+0x7c>)
     440:	781b      	ldrb	r3, [r3, #0]
     442:	2201      	movs	r2, #1
     444:	4053      	eors	r3, r2
     446:	b2db      	uxtb	r3, r3
     448:	2b00      	cmp	r3, #0
     44a:	d103      	bne.n	454 <sercom_set_gclk_generator+0x28>
     44c:	1dbb      	adds	r3, r7, #6
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	2b00      	cmp	r3, #0
     452:	d01b      	beq.n	48c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     454:	230c      	movs	r3, #12
     456:	18fb      	adds	r3, r7, r3
     458:	0018      	movs	r0, r3
     45a:	4b14      	ldr	r3, [pc, #80]	; (4ac <sercom_set_gclk_generator+0x80>)
     45c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     45e:	230c      	movs	r3, #12
     460:	18fb      	adds	r3, r7, r3
     462:	1dfa      	adds	r2, r7, #7
     464:	7812      	ldrb	r2, [r2, #0]
     466:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     468:	230c      	movs	r3, #12
     46a:	18fb      	adds	r3, r7, r3
     46c:	0019      	movs	r1, r3
     46e:	2013      	movs	r0, #19
     470:	4b0f      	ldr	r3, [pc, #60]	; (4b0 <sercom_set_gclk_generator+0x84>)
     472:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     474:	2013      	movs	r0, #19
     476:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <sercom_set_gclk_generator+0x88>)
     478:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     47a:	4b0b      	ldr	r3, [pc, #44]	; (4a8 <sercom_set_gclk_generator+0x7c>)
     47c:	1dfa      	adds	r2, r7, #7
     47e:	7812      	ldrb	r2, [r2, #0]
     480:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <sercom_set_gclk_generator+0x7c>)
     484:	2201      	movs	r2, #1
     486:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     488:	2300      	movs	r3, #0
     48a:	e008      	b.n	49e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     48c:	4b06      	ldr	r3, [pc, #24]	; (4a8 <sercom_set_gclk_generator+0x7c>)
     48e:	785b      	ldrb	r3, [r3, #1]
     490:	1dfa      	adds	r2, r7, #7
     492:	7812      	ldrb	r2, [r2, #0]
     494:	429a      	cmp	r2, r3
     496:	d101      	bne.n	49c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     498:	2300      	movs	r3, #0
     49a:	e000      	b.n	49e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     49c:	231d      	movs	r3, #29
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b004      	add	sp, #16
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	20000030 	.word	0x20000030
     4ac:	00000399 	.word	0x00000399
     4b0:	0000189d 	.word	0x0000189d
     4b4:	000018e1 	.word	0x000018e1

000004b8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	000a      	movs	r2, r1
     4c2:	1cfb      	adds	r3, r7, #3
     4c4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	4a4d      	ldr	r2, [pc, #308]	; (600 <_sercom_get_default_pad+0x148>)
     4ca:	4293      	cmp	r3, r2
     4cc:	d03f      	beq.n	54e <_sercom_get_default_pad+0x96>
     4ce:	4a4c      	ldr	r2, [pc, #304]	; (600 <_sercom_get_default_pad+0x148>)
     4d0:	4293      	cmp	r3, r2
     4d2:	d806      	bhi.n	4e2 <_sercom_get_default_pad+0x2a>
     4d4:	4a4b      	ldr	r2, [pc, #300]	; (604 <_sercom_get_default_pad+0x14c>)
     4d6:	4293      	cmp	r3, r2
     4d8:	d00f      	beq.n	4fa <_sercom_get_default_pad+0x42>
     4da:	4a4b      	ldr	r2, [pc, #300]	; (608 <_sercom_get_default_pad+0x150>)
     4dc:	4293      	cmp	r3, r2
     4de:	d021      	beq.n	524 <_sercom_get_default_pad+0x6c>
     4e0:	e089      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     4e2:	4a4a      	ldr	r2, [pc, #296]	; (60c <_sercom_get_default_pad+0x154>)
     4e4:	4293      	cmp	r3, r2
     4e6:	d100      	bne.n	4ea <_sercom_get_default_pad+0x32>
     4e8:	e05b      	b.n	5a2 <_sercom_get_default_pad+0xea>
     4ea:	4a49      	ldr	r2, [pc, #292]	; (610 <_sercom_get_default_pad+0x158>)
     4ec:	4293      	cmp	r3, r2
     4ee:	d100      	bne.n	4f2 <_sercom_get_default_pad+0x3a>
     4f0:	e06c      	b.n	5cc <_sercom_get_default_pad+0x114>
     4f2:	4a48      	ldr	r2, [pc, #288]	; (614 <_sercom_get_default_pad+0x15c>)
     4f4:	4293      	cmp	r3, r2
     4f6:	d03f      	beq.n	578 <_sercom_get_default_pad+0xc0>
     4f8:	e07d      	b.n	5f6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fa:	1cfb      	adds	r3, r7, #3
     4fc:	781b      	ldrb	r3, [r3, #0]
     4fe:	2b01      	cmp	r3, #1
     500:	d00a      	beq.n	518 <_sercom_get_default_pad+0x60>
     502:	dc02      	bgt.n	50a <_sercom_get_default_pad+0x52>
     504:	2b00      	cmp	r3, #0
     506:	d005      	beq.n	514 <_sercom_get_default_pad+0x5c>
     508:	e075      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     50a:	2b02      	cmp	r3, #2
     50c:	d006      	beq.n	51c <_sercom_get_default_pad+0x64>
     50e:	2b03      	cmp	r3, #3
     510:	d006      	beq.n	520 <_sercom_get_default_pad+0x68>
     512:	e070      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     514:	4b40      	ldr	r3, [pc, #256]	; (618 <_sercom_get_default_pad+0x160>)
     516:	e06f      	b.n	5f8 <_sercom_get_default_pad+0x140>
     518:	4b40      	ldr	r3, [pc, #256]	; (61c <_sercom_get_default_pad+0x164>)
     51a:	e06d      	b.n	5f8 <_sercom_get_default_pad+0x140>
     51c:	4b40      	ldr	r3, [pc, #256]	; (620 <_sercom_get_default_pad+0x168>)
     51e:	e06b      	b.n	5f8 <_sercom_get_default_pad+0x140>
     520:	4b40      	ldr	r3, [pc, #256]	; (624 <_sercom_get_default_pad+0x16c>)
     522:	e069      	b.n	5f8 <_sercom_get_default_pad+0x140>
     524:	1cfb      	adds	r3, r7, #3
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b01      	cmp	r3, #1
     52a:	d00a      	beq.n	542 <_sercom_get_default_pad+0x8a>
     52c:	dc02      	bgt.n	534 <_sercom_get_default_pad+0x7c>
     52e:	2b00      	cmp	r3, #0
     530:	d005      	beq.n	53e <_sercom_get_default_pad+0x86>
     532:	e060      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     534:	2b02      	cmp	r3, #2
     536:	d006      	beq.n	546 <_sercom_get_default_pad+0x8e>
     538:	2b03      	cmp	r3, #3
     53a:	d006      	beq.n	54a <_sercom_get_default_pad+0x92>
     53c:	e05b      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     53e:	2303      	movs	r3, #3
     540:	e05a      	b.n	5f8 <_sercom_get_default_pad+0x140>
     542:	4b39      	ldr	r3, [pc, #228]	; (628 <_sercom_get_default_pad+0x170>)
     544:	e058      	b.n	5f8 <_sercom_get_default_pad+0x140>
     546:	4b39      	ldr	r3, [pc, #228]	; (62c <_sercom_get_default_pad+0x174>)
     548:	e056      	b.n	5f8 <_sercom_get_default_pad+0x140>
     54a:	4b39      	ldr	r3, [pc, #228]	; (630 <_sercom_get_default_pad+0x178>)
     54c:	e054      	b.n	5f8 <_sercom_get_default_pad+0x140>
     54e:	1cfb      	adds	r3, r7, #3
     550:	781b      	ldrb	r3, [r3, #0]
     552:	2b01      	cmp	r3, #1
     554:	d00a      	beq.n	56c <_sercom_get_default_pad+0xb4>
     556:	dc02      	bgt.n	55e <_sercom_get_default_pad+0xa6>
     558:	2b00      	cmp	r3, #0
     55a:	d005      	beq.n	568 <_sercom_get_default_pad+0xb0>
     55c:	e04b      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     55e:	2b02      	cmp	r3, #2
     560:	d006      	beq.n	570 <_sercom_get_default_pad+0xb8>
     562:	2b03      	cmp	r3, #3
     564:	d006      	beq.n	574 <_sercom_get_default_pad+0xbc>
     566:	e046      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     568:	4b32      	ldr	r3, [pc, #200]	; (634 <_sercom_get_default_pad+0x17c>)
     56a:	e045      	b.n	5f8 <_sercom_get_default_pad+0x140>
     56c:	4b32      	ldr	r3, [pc, #200]	; (638 <_sercom_get_default_pad+0x180>)
     56e:	e043      	b.n	5f8 <_sercom_get_default_pad+0x140>
     570:	4b32      	ldr	r3, [pc, #200]	; (63c <_sercom_get_default_pad+0x184>)
     572:	e041      	b.n	5f8 <_sercom_get_default_pad+0x140>
     574:	4b32      	ldr	r3, [pc, #200]	; (640 <_sercom_get_default_pad+0x188>)
     576:	e03f      	b.n	5f8 <_sercom_get_default_pad+0x140>
     578:	1cfb      	adds	r3, r7, #3
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	2b01      	cmp	r3, #1
     57e:	d00a      	beq.n	596 <_sercom_get_default_pad+0xde>
     580:	dc02      	bgt.n	588 <_sercom_get_default_pad+0xd0>
     582:	2b00      	cmp	r3, #0
     584:	d005      	beq.n	592 <_sercom_get_default_pad+0xda>
     586:	e036      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     588:	2b02      	cmp	r3, #2
     58a:	d006      	beq.n	59a <_sercom_get_default_pad+0xe2>
     58c:	2b03      	cmp	r3, #3
     58e:	d006      	beq.n	59e <_sercom_get_default_pad+0xe6>
     590:	e031      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     592:	4b2c      	ldr	r3, [pc, #176]	; (644 <_sercom_get_default_pad+0x18c>)
     594:	e030      	b.n	5f8 <_sercom_get_default_pad+0x140>
     596:	4b2c      	ldr	r3, [pc, #176]	; (648 <_sercom_get_default_pad+0x190>)
     598:	e02e      	b.n	5f8 <_sercom_get_default_pad+0x140>
     59a:	4b2c      	ldr	r3, [pc, #176]	; (64c <_sercom_get_default_pad+0x194>)
     59c:	e02c      	b.n	5f8 <_sercom_get_default_pad+0x140>
     59e:	4b2c      	ldr	r3, [pc, #176]	; (650 <_sercom_get_default_pad+0x198>)
     5a0:	e02a      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5a2:	1cfb      	adds	r3, r7, #3
     5a4:	781b      	ldrb	r3, [r3, #0]
     5a6:	2b01      	cmp	r3, #1
     5a8:	d00a      	beq.n	5c0 <_sercom_get_default_pad+0x108>
     5aa:	dc02      	bgt.n	5b2 <_sercom_get_default_pad+0xfa>
     5ac:	2b00      	cmp	r3, #0
     5ae:	d005      	beq.n	5bc <_sercom_get_default_pad+0x104>
     5b0:	e021      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     5b2:	2b02      	cmp	r3, #2
     5b4:	d006      	beq.n	5c4 <_sercom_get_default_pad+0x10c>
     5b6:	2b03      	cmp	r3, #3
     5b8:	d006      	beq.n	5c8 <_sercom_get_default_pad+0x110>
     5ba:	e01c      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     5bc:	4b25      	ldr	r3, [pc, #148]	; (654 <_sercom_get_default_pad+0x19c>)
     5be:	e01b      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5c0:	4b25      	ldr	r3, [pc, #148]	; (658 <_sercom_get_default_pad+0x1a0>)
     5c2:	e019      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5c4:	4b25      	ldr	r3, [pc, #148]	; (65c <_sercom_get_default_pad+0x1a4>)
     5c6:	e017      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5c8:	4b25      	ldr	r3, [pc, #148]	; (660 <_sercom_get_default_pad+0x1a8>)
     5ca:	e015      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5cc:	1cfb      	adds	r3, r7, #3
     5ce:	781b      	ldrb	r3, [r3, #0]
     5d0:	2b01      	cmp	r3, #1
     5d2:	d00a      	beq.n	5ea <_sercom_get_default_pad+0x132>
     5d4:	dc02      	bgt.n	5dc <_sercom_get_default_pad+0x124>
     5d6:	2b00      	cmp	r3, #0
     5d8:	d005      	beq.n	5e6 <_sercom_get_default_pad+0x12e>
     5da:	e00c      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     5dc:	2b02      	cmp	r3, #2
     5de:	d006      	beq.n	5ee <_sercom_get_default_pad+0x136>
     5e0:	2b03      	cmp	r3, #3
     5e2:	d006      	beq.n	5f2 <_sercom_get_default_pad+0x13a>
     5e4:	e007      	b.n	5f6 <_sercom_get_default_pad+0x13e>
     5e6:	4b1f      	ldr	r3, [pc, #124]	; (664 <_sercom_get_default_pad+0x1ac>)
     5e8:	e006      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5ea:	4b1f      	ldr	r3, [pc, #124]	; (668 <_sercom_get_default_pad+0x1b0>)
     5ec:	e004      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5ee:	4b1f      	ldr	r3, [pc, #124]	; (66c <_sercom_get_default_pad+0x1b4>)
     5f0:	e002      	b.n	5f8 <_sercom_get_default_pad+0x140>
     5f2:	4b1f      	ldr	r3, [pc, #124]	; (670 <_sercom_get_default_pad+0x1b8>)
     5f4:	e000      	b.n	5f8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     5f6:	2300      	movs	r3, #0
}
     5f8:	0018      	movs	r0, r3
     5fa:	46bd      	mov	sp, r7
     5fc:	b002      	add	sp, #8
     5fe:	bd80      	pop	{r7, pc}
     600:	42001000 	.word	0x42001000
     604:	42000800 	.word	0x42000800
     608:	42000c00 	.word	0x42000c00
     60c:	42001800 	.word	0x42001800
     610:	42001c00 	.word	0x42001c00
     614:	42001400 	.word	0x42001400
     618:	00040003 	.word	0x00040003
     61c:	00050003 	.word	0x00050003
     620:	00060003 	.word	0x00060003
     624:	00070003 	.word	0x00070003
     628:	00010003 	.word	0x00010003
     62c:	001e0003 	.word	0x001e0003
     630:	001f0003 	.word	0x001f0003
     634:	00080003 	.word	0x00080003
     638:	00090003 	.word	0x00090003
     63c:	000a0003 	.word	0x000a0003
     640:	000b0003 	.word	0x000b0003
     644:	00100003 	.word	0x00100003
     648:	00110003 	.word	0x00110003
     64c:	00120003 	.word	0x00120003
     650:	00130003 	.word	0x00130003
     654:	000c0003 	.word	0x000c0003
     658:	000d0003 	.word	0x000d0003
     65c:	000e0003 	.word	0x000e0003
     660:	000f0003 	.word	0x000f0003
     664:	00160003 	.word	0x00160003
     668:	00170003 	.word	0x00170003
     66c:	00180003 	.word	0x00180003
     670:	00190003 	.word	0x00190003

00000674 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     674:	b590      	push	{r4, r7, lr}
     676:	b08b      	sub	sp, #44	; 0x2c
     678:	af00      	add	r7, sp, #0
     67a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     67c:	230c      	movs	r3, #12
     67e:	18fb      	adds	r3, r7, r3
     680:	4a0f      	ldr	r2, [pc, #60]	; (6c0 <_sercom_get_sercom_inst_index+0x4c>)
     682:	ca13      	ldmia	r2!, {r0, r1, r4}
     684:	c313      	stmia	r3!, {r0, r1, r4}
     686:	ca13      	ldmia	r2!, {r0, r1, r4}
     688:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     68a:	2300      	movs	r3, #0
     68c:	627b      	str	r3, [r7, #36]	; 0x24
     68e:	e00e      	b.n	6ae <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     690:	230c      	movs	r3, #12
     692:	18fb      	adds	r3, r7, r3
     694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     696:	0092      	lsls	r2, r2, #2
     698:	58d3      	ldr	r3, [r2, r3]
     69a:	001a      	movs	r2, r3
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	429a      	cmp	r2, r3
     6a0:	d102      	bne.n	6a8 <_sercom_get_sercom_inst_index+0x34>
			return i;
     6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6a4:	b2db      	uxtb	r3, r3
     6a6:	e006      	b.n	6b6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6aa:	3301      	adds	r3, #1
     6ac:	627b      	str	r3, [r7, #36]	; 0x24
     6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6b0:	2b05      	cmp	r3, #5
     6b2:	d9ed      	bls.n	690 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6b4:	2300      	movs	r3, #0
}
     6b6:	0018      	movs	r0, r3
     6b8:	46bd      	mov	sp, r7
     6ba:	b00b      	add	sp, #44	; 0x2c
     6bc:	bd90      	pop	{r4, r7, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	000026bc 	.word	0x000026bc

000006c4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	0002      	movs	r2, r0
     6cc:	1dfb      	adds	r3, r7, #7
     6ce:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     6d0:	46c0      	nop			; (mov r8, r8)
     6d2:	46bd      	mov	sp, r7
     6d4:	b002      	add	sp, #8
     6d6:	bd80      	pop	{r7, pc}

000006d8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     6d8:	b580      	push	{r7, lr}
     6da:	b084      	sub	sp, #16
     6dc:	af00      	add	r7, sp, #0
     6de:	0002      	movs	r2, r0
     6e0:	6039      	str	r1, [r7, #0]
     6e2:	1dfb      	adds	r3, r7, #7
     6e4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     6e6:	4b13      	ldr	r3, [pc, #76]	; (734 <_sercom_set_handler+0x5c>)
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	2201      	movs	r2, #1
     6ec:	4053      	eors	r3, r2
     6ee:	b2db      	uxtb	r3, r3
     6f0:	2b00      	cmp	r3, #0
     6f2:	d015      	beq.n	720 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6f4:	2300      	movs	r3, #0
     6f6:	60fb      	str	r3, [r7, #12]
     6f8:	e00c      	b.n	714 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     6fa:	4b0f      	ldr	r3, [pc, #60]	; (738 <_sercom_set_handler+0x60>)
     6fc:	68fa      	ldr	r2, [r7, #12]
     6fe:	0092      	lsls	r2, r2, #2
     700:	490e      	ldr	r1, [pc, #56]	; (73c <_sercom_set_handler+0x64>)
     702:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     704:	4b0e      	ldr	r3, [pc, #56]	; (740 <_sercom_set_handler+0x68>)
     706:	68fa      	ldr	r2, [r7, #12]
     708:	0092      	lsls	r2, r2, #2
     70a:	2100      	movs	r1, #0
     70c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     70e:	68fb      	ldr	r3, [r7, #12]
     710:	3301      	adds	r3, #1
     712:	60fb      	str	r3, [r7, #12]
     714:	68fb      	ldr	r3, [r7, #12]
     716:	2b05      	cmp	r3, #5
     718:	d9ef      	bls.n	6fa <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
     71a:	4b06      	ldr	r3, [pc, #24]	; (734 <_sercom_set_handler+0x5c>)
     71c:	2201      	movs	r2, #1
     71e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     720:	1dfb      	adds	r3, r7, #7
     722:	781a      	ldrb	r2, [r3, #0]
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <_sercom_set_handler+0x60>)
     726:	0092      	lsls	r2, r2, #2
     728:	6839      	ldr	r1, [r7, #0]
     72a:	50d1      	str	r1, [r2, r3]
}
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	46bd      	mov	sp, r7
     730:	b004      	add	sp, #16
     732:	bd80      	pop	{r7, pc}
     734:	20000032 	.word	0x20000032
     738:	20000034 	.word	0x20000034
     73c:	000006c5 	.word	0x000006c5
     740:	20000064 	.word	0x20000064

00000744 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     744:	b590      	push	{r4, r7, lr}
     746:	b085      	sub	sp, #20
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     74c:	2308      	movs	r3, #8
     74e:	18fb      	adds	r3, r7, r3
     750:	4a0b      	ldr	r2, [pc, #44]	; (780 <_sercom_get_interrupt_vector+0x3c>)
     752:	6811      	ldr	r1, [r2, #0]
     754:	6019      	str	r1, [r3, #0]
     756:	8892      	ldrh	r2, [r2, #4]
     758:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     75a:	230f      	movs	r3, #15
     75c:	18fc      	adds	r4, r7, r3
     75e:	687b      	ldr	r3, [r7, #4]
     760:	0018      	movs	r0, r3
     762:	4b08      	ldr	r3, [pc, #32]	; (784 <_sercom_get_interrupt_vector+0x40>)
     764:	4798      	blx	r3
     766:	0003      	movs	r3, r0
     768:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     76a:	230f      	movs	r3, #15
     76c:	18fb      	adds	r3, r7, r3
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	2208      	movs	r2, #8
     772:	18ba      	adds	r2, r7, r2
     774:	5cd3      	ldrb	r3, [r2, r3]
     776:	b25b      	sxtb	r3, r3
}
     778:	0018      	movs	r0, r3
     77a:	46bd      	mov	sp, r7
     77c:	b005      	add	sp, #20
     77e:	bd90      	pop	{r4, r7, pc}
     780:	000026d4 	.word	0x000026d4
     784:	00000675 	.word	0x00000675

00000788 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     788:	b580      	push	{r7, lr}
     78a:	af00      	add	r7, sp, #0
     78c:	4b03      	ldr	r3, [pc, #12]	; (79c <SERCOM0_Handler+0x14>)
     78e:	681b      	ldr	r3, [r3, #0]
     790:	2000      	movs	r0, #0
     792:	4798      	blx	r3
     794:	46c0      	nop			; (mov r8, r8)
     796:	46bd      	mov	sp, r7
     798:	bd80      	pop	{r7, pc}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	20000034 	.word	0x20000034

000007a0 <SERCOM1_Handler>:
     7a0:	b580      	push	{r7, lr}
     7a2:	af00      	add	r7, sp, #0
     7a4:	4b03      	ldr	r3, [pc, #12]	; (7b4 <SERCOM1_Handler+0x14>)
     7a6:	685b      	ldr	r3, [r3, #4]
     7a8:	2001      	movs	r0, #1
     7aa:	4798      	blx	r3
     7ac:	46c0      	nop			; (mov r8, r8)
     7ae:	46bd      	mov	sp, r7
     7b0:	bd80      	pop	{r7, pc}
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	20000034 	.word	0x20000034

000007b8 <SERCOM2_Handler>:
     7b8:	b580      	push	{r7, lr}
     7ba:	af00      	add	r7, sp, #0
     7bc:	4b03      	ldr	r3, [pc, #12]	; (7cc <SERCOM2_Handler+0x14>)
     7be:	689b      	ldr	r3, [r3, #8]
     7c0:	2002      	movs	r0, #2
     7c2:	4798      	blx	r3
     7c4:	46c0      	nop			; (mov r8, r8)
     7c6:	46bd      	mov	sp, r7
     7c8:	bd80      	pop	{r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	20000034 	.word	0x20000034

000007d0 <SERCOM3_Handler>:
     7d0:	b580      	push	{r7, lr}
     7d2:	af00      	add	r7, sp, #0
     7d4:	4b03      	ldr	r3, [pc, #12]	; (7e4 <SERCOM3_Handler+0x14>)
     7d6:	68db      	ldr	r3, [r3, #12]
     7d8:	2003      	movs	r0, #3
     7da:	4798      	blx	r3
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	46bd      	mov	sp, r7
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	20000034 	.word	0x20000034

000007e8 <SERCOM4_Handler>:
     7e8:	b580      	push	{r7, lr}
     7ea:	af00      	add	r7, sp, #0
     7ec:	4b03      	ldr	r3, [pc, #12]	; (7fc <SERCOM4_Handler+0x14>)
     7ee:	691b      	ldr	r3, [r3, #16]
     7f0:	2004      	movs	r0, #4
     7f2:	4798      	blx	r3
     7f4:	46c0      	nop			; (mov r8, r8)
     7f6:	46bd      	mov	sp, r7
     7f8:	bd80      	pop	{r7, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	20000034 	.word	0x20000034

00000800 <SERCOM5_Handler>:
     800:	b580      	push	{r7, lr}
     802:	af00      	add	r7, sp, #0
     804:	4b03      	ldr	r3, [pc, #12]	; (814 <SERCOM5_Handler+0x14>)
     806:	695b      	ldr	r3, [r3, #20]
     808:	2005      	movs	r0, #5
     80a:	4798      	blx	r3
     80c:	46c0      	nop			; (mov r8, r8)
     80e:	46bd      	mov	sp, r7
     810:	bd80      	pop	{r7, pc}
     812:	46c0      	nop			; (mov r8, r8)
     814:	20000034 	.word	0x20000034

00000818 <system_pinmux_get_config_defaults>:
{
     818:	b580      	push	{r7, lr}
     81a:	b082      	sub	sp, #8
     81c:	af00      	add	r7, sp, #0
     81e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     820:	687b      	ldr	r3, [r7, #4]
     822:	2280      	movs	r2, #128	; 0x80
     824:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     826:	687b      	ldr	r3, [r7, #4]
     828:	2200      	movs	r2, #0
     82a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	2201      	movs	r2, #1
     830:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     832:	687b      	ldr	r3, [r7, #4]
     834:	2200      	movs	r2, #0
     836:	70da      	strb	r2, [r3, #3]
}
     838:	46c0      	nop			; (mov r8, r8)
     83a:	46bd      	mov	sp, r7
     83c:	b002      	add	sp, #8
     83e:	bd80      	pop	{r7, pc}

00000840 <system_gclk_chan_get_config_defaults>:
{
     840:	b580      	push	{r7, lr}
     842:	b082      	sub	sp, #8
     844:	af00      	add	r7, sp, #0
     846:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     848:	687b      	ldr	r3, [r7, #4]
     84a:	2200      	movs	r2, #0
     84c:	701a      	strb	r2, [r3, #0]
}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	46bd      	mov	sp, r7
     852:	b002      	add	sp, #8
     854:	bd80      	pop	{r7, pc}
	...

00000858 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     858:	b580      	push	{r7, lr}
     85a:	b082      	sub	sp, #8
     85c:	af00      	add	r7, sp, #0
     85e:	0002      	movs	r2, r0
     860:	6039      	str	r1, [r7, #0]
     862:	1dfb      	adds	r3, r7, #7
     864:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     866:	1dfb      	adds	r3, r7, #7
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	2b01      	cmp	r3, #1
     86c:	d00a      	beq.n	884 <system_apb_clock_set_mask+0x2c>
     86e:	2b02      	cmp	r3, #2
     870:	d00f      	beq.n	892 <system_apb_clock_set_mask+0x3a>
     872:	2b00      	cmp	r3, #0
     874:	d114      	bne.n	8a0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     876:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <system_apb_clock_set_mask+0x58>)
     878:	4a0d      	ldr	r2, [pc, #52]	; (8b0 <system_apb_clock_set_mask+0x58>)
     87a:	6991      	ldr	r1, [r2, #24]
     87c:	683a      	ldr	r2, [r7, #0]
     87e:	430a      	orrs	r2, r1
     880:	619a      	str	r2, [r3, #24]
			break;
     882:	e00f      	b.n	8a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     884:	4b0a      	ldr	r3, [pc, #40]	; (8b0 <system_apb_clock_set_mask+0x58>)
     886:	4a0a      	ldr	r2, [pc, #40]	; (8b0 <system_apb_clock_set_mask+0x58>)
     888:	69d1      	ldr	r1, [r2, #28]
     88a:	683a      	ldr	r2, [r7, #0]
     88c:	430a      	orrs	r2, r1
     88e:	61da      	str	r2, [r3, #28]
			break;
     890:	e008      	b.n	8a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     892:	4b07      	ldr	r3, [pc, #28]	; (8b0 <system_apb_clock_set_mask+0x58>)
     894:	4a06      	ldr	r2, [pc, #24]	; (8b0 <system_apb_clock_set_mask+0x58>)
     896:	6a11      	ldr	r1, [r2, #32]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	430a      	orrs	r2, r1
     89c:	621a      	str	r2, [r3, #32]
			break;
     89e:	e001      	b.n	8a4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8a0:	2317      	movs	r3, #23
     8a2:	e000      	b.n	8a6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     8a4:	2300      	movs	r3, #0
}
     8a6:	0018      	movs	r0, r3
     8a8:	46bd      	mov	sp, r7
     8aa:	b002      	add	sp, #8
     8ac:	bd80      	pop	{r7, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	40000400 	.word	0x40000400

000008b4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     8b4:	b580      	push	{r7, lr}
     8b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <system_is_debugger_present+0x1c>)
     8ba:	789b      	ldrb	r3, [r3, #2]
     8bc:	b2db      	uxtb	r3, r3
     8be:	001a      	movs	r2, r3
     8c0:	2302      	movs	r3, #2
     8c2:	4013      	ands	r3, r2
     8c4:	1e5a      	subs	r2, r3, #1
     8c6:	4193      	sbcs	r3, r2
     8c8:	b2db      	uxtb	r3, r3
}
     8ca:	0018      	movs	r0, r3
     8cc:	46bd      	mov	sp, r7
     8ce:	bd80      	pop	{r7, pc}
     8d0:	41002000 	.word	0x41002000

000008d4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     8d4:	b590      	push	{r4, r7, lr}
     8d6:	b093      	sub	sp, #76	; 0x4c
     8d8:	af00      	add	r7, sp, #0
     8da:	6078      	str	r0, [r7, #4]
     8dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	681b      	ldr	r3, [r3, #0]
     8e8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     8ea:	231c      	movs	r3, #28
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	0018      	movs	r0, r3
     8f0:	4b85      	ldr	r3, [pc, #532]	; (b08 <_spi_set_config+0x234>)
     8f2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f4:	231c      	movs	r3, #28
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	2200      	movs	r2, #0
     8fa:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	2b00      	cmp	r3, #0
     902:	d103      	bne.n	90c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     904:	231c      	movs	r3, #28
     906:	18fb      	adds	r3, r7, r3
     908:	2200      	movs	r2, #0
     90a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     90c:	683b      	ldr	r3, [r7, #0]
     90e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
     910:	230c      	movs	r3, #12
     912:	18fb      	adds	r3, r7, r3
     914:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     916:	683b      	ldr	r3, [r7, #0]
     918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
     91a:	230c      	movs	r3, #12
     91c:	18fb      	adds	r3, r7, r3
     91e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
     920:	683b      	ldr	r3, [r7, #0]
     922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     924:	230c      	movs	r3, #12
     926:	18fb      	adds	r3, r7, r3
     928:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
     92a:	683b      	ldr	r3, [r7, #0]
     92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
     92e:	230c      	movs	r3, #12
     930:	18fb      	adds	r3, r7, r3
     932:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     934:	2347      	movs	r3, #71	; 0x47
     936:	18fb      	adds	r3, r7, r3
     938:	2200      	movs	r2, #0
     93a:	701a      	strb	r2, [r3, #0]
     93c:	e02c      	b.n	998 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     93e:	2347      	movs	r3, #71	; 0x47
     940:	18fb      	adds	r3, r7, r3
     942:	781a      	ldrb	r2, [r3, #0]
     944:	230c      	movs	r3, #12
     946:	18fb      	adds	r3, r7, r3
     948:	0092      	lsls	r2, r2, #2
     94a:	58d3      	ldr	r3, [r2, r3]
     94c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     950:	2b00      	cmp	r3, #0
     952:	d109      	bne.n	968 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     954:	2347      	movs	r3, #71	; 0x47
     956:	18fb      	adds	r3, r7, r3
     958:	781a      	ldrb	r2, [r3, #0]
     95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     95c:	0011      	movs	r1, r2
     95e:	0018      	movs	r0, r3
     960:	4b6a      	ldr	r3, [pc, #424]	; (b0c <_spi_set_config+0x238>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     96a:	3301      	adds	r3, #1
     96c:	d00d      	beq.n	98a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     970:	b2da      	uxtb	r2, r3
     972:	231c      	movs	r3, #28
     974:	18fb      	adds	r3, r7, r3
     976:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     97a:	0c1b      	lsrs	r3, r3, #16
     97c:	b2db      	uxtb	r3, r3
     97e:	221c      	movs	r2, #28
     980:	18ba      	adds	r2, r7, r2
     982:	0011      	movs	r1, r2
     984:	0018      	movs	r0, r3
     986:	4b62      	ldr	r3, [pc, #392]	; (b10 <_spi_set_config+0x23c>)
     988:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
     98a:	2347      	movs	r3, #71	; 0x47
     98c:	18fb      	adds	r3, r7, r3
     98e:	781a      	ldrb	r2, [r3, #0]
     990:	2347      	movs	r3, #71	; 0x47
     992:	18fb      	adds	r3, r7, r3
     994:	3201      	adds	r2, #1
     996:	701a      	strb	r2, [r3, #0]
     998:	2347      	movs	r3, #71	; 0x47
     99a:	18fb      	adds	r3, r7, r3
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	2b03      	cmp	r3, #3
     9a0:	d9cd      	bls.n	93e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
     9a2:	683b      	ldr	r3, [r7, #0]
     9a4:	781a      	ldrb	r2, [r3, #0]
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	7c1a      	ldrb	r2, [r3, #16]
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     9b2:	683b      	ldr	r3, [r7, #0]
     9b4:	7c9a      	ldrb	r2, [r3, #18]
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	7d1a      	ldrb	r2, [r3, #20]
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     9c2:	230a      	movs	r3, #10
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	2200      	movs	r2, #0
     9c8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     9ca:	2300      	movs	r3, #0
     9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     9ce:	2300      	movs	r3, #0
     9d0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b01      	cmp	r3, #1
     9d8:	d129      	bne.n	a2e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	681b      	ldr	r3, [r3, #0]
     9de:	0018      	movs	r0, r3
     9e0:	4b4c      	ldr	r3, [pc, #304]	; (b14 <_spi_set_config+0x240>)
     9e2:	4798      	blx	r3
     9e4:	0003      	movs	r3, r0
     9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9ea:	3314      	adds	r3, #20
     9ec:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
     9f0:	b2db      	uxtb	r3, r3
     9f2:	0018      	movs	r0, r3
     9f4:	4b48      	ldr	r3, [pc, #288]	; (b18 <_spi_set_config+0x244>)
     9f6:	4798      	blx	r3
     9f8:	0003      	movs	r3, r0
     9fa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     9fc:	683b      	ldr	r3, [r7, #0]
     9fe:	699b      	ldr	r3, [r3, #24]
     a00:	2223      	movs	r2, #35	; 0x23
     a02:	18bc      	adds	r4, r7, r2
     a04:	220a      	movs	r2, #10
     a06:	18ba      	adds	r2, r7, r2
     a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
     a0a:	0018      	movs	r0, r3
     a0c:	4b43      	ldr	r3, [pc, #268]	; (b1c <_spi_set_config+0x248>)
     a0e:	4798      	blx	r3
     a10:	0003      	movs	r3, r0
     a12:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     a14:	2323      	movs	r3, #35	; 0x23
     a16:	18fb      	adds	r3, r7, r3
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d001      	beq.n	a22 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a1e:	2317      	movs	r3, #23
     a20:	e06d      	b.n	afe <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     a22:	230a      	movs	r3, #10
     a24:	18fb      	adds	r3, r7, r3
     a26:	881b      	ldrh	r3, [r3, #0]
     a28:	b2da      	uxtb	r2, r3
     a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a2c:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     a2e:	683b      	ldr	r3, [r7, #0]
     a30:	781b      	ldrb	r3, [r3, #0]
     a32:	2b00      	cmp	r3, #0
     a34:	d11a      	bne.n	a6c <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     a36:	683b      	ldr	r3, [r7, #0]
     a38:	699b      	ldr	r3, [r3, #24]
     a3a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     a3c:	683b      	ldr	r3, [r7, #0]
     a3e:	8b9b      	ldrh	r3, [r3, #28]
     a40:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a46:	683a      	ldr	r2, [r7, #0]
     a48:	7f92      	ldrb	r2, [r2, #30]
     a4a:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a4c:	683a      	ldr	r2, [r7, #0]
     a4e:	7fd2      	ldrb	r2, [r2, #31]
     a50:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a52:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
     a54:	431a      	orrs	r2, r3
     a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a58:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     a5a:	683b      	ldr	r3, [r7, #0]
     a5c:	2220      	movs	r2, #32
     a5e:	5c9b      	ldrb	r3, [r3, r2]
     a60:	2b00      	cmp	r3, #0
     a62:	d003      	beq.n	a6c <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a66:	2240      	movs	r2, #64	; 0x40
     a68:	4313      	orrs	r3, r2
     a6a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     a6c:	683b      	ldr	r3, [r7, #0]
     a6e:	685b      	ldr	r3, [r3, #4]
     a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a72:	4313      	orrs	r3, r2
     a74:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a76:	683b      	ldr	r3, [r7, #0]
     a78:	689b      	ldr	r3, [r3, #8]
     a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a7c:	4313      	orrs	r3, r2
     a7e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a80:	683b      	ldr	r3, [r7, #0]
     a82:	68db      	ldr	r3, [r3, #12]
     a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     a86:	4313      	orrs	r3, r2
     a88:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a8a:	683b      	ldr	r3, [r7, #0]
     a8c:	7c1b      	ldrb	r3, [r3, #16]
     a8e:	001a      	movs	r2, r3
     a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a92:	4313      	orrs	r3, r2
     a94:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a96:	683b      	ldr	r3, [r7, #0]
     a98:	7c5b      	ldrb	r3, [r3, #17]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d103      	bne.n	aa6 <_spi_set_config+0x1d2>
     a9e:	4b20      	ldr	r3, [pc, #128]	; (b20 <_spi_set_config+0x24c>)
     aa0:	4798      	blx	r3
     aa2:	1e03      	subs	r3, r0, #0
     aa4:	d003      	beq.n	aae <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     aa8:	2280      	movs	r2, #128	; 0x80
     aaa:	4313      	orrs	r3, r2
     aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     aae:	683b      	ldr	r3, [r7, #0]
     ab0:	7c9b      	ldrb	r3, [r3, #18]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d004      	beq.n	ac0 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ab8:	2280      	movs	r2, #128	; 0x80
     aba:	0292      	lsls	r2, r2, #10
     abc:	4313      	orrs	r3, r2
     abe:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     ac0:	683b      	ldr	r3, [r7, #0]
     ac2:	7cdb      	ldrb	r3, [r3, #19]
     ac4:	2b00      	cmp	r3, #0
     ac6:	d004      	beq.n	ad2 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     aca:	2280      	movs	r2, #128	; 0x80
     acc:	0092      	lsls	r2, r2, #2
     ace:	4313      	orrs	r3, r2
     ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	7d1b      	ldrb	r3, [r3, #20]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d004      	beq.n	ae4 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     adc:	2280      	movs	r2, #128	; 0x80
     ade:	0192      	lsls	r2, r2, #6
     ae0:	4313      	orrs	r3, r2
     ae2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ae6:	681a      	ldr	r2, [r3, #0]
     ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     aea:	431a      	orrs	r2, r3
     aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     aee:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     af2:	685a      	ldr	r2, [r3, #4]
     af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     af6:	431a      	orrs	r2, r3
     af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     afa:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     afc:	2300      	movs	r3, #0
}
     afe:	0018      	movs	r0, r3
     b00:	46bd      	mov	sp, r7
     b02:	b013      	add	sp, #76	; 0x4c
     b04:	bd90      	pop	{r4, r7, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000819 	.word	0x00000819
     b0c:	000004b9 	.word	0x000004b9
     b10:	00001bd1 	.word	0x00001bd1
     b14:	00000675 	.word	0x00000675
     b18:	00001a09 	.word	0x00001a09
     b1c:	000003af 	.word	0x000003af
     b20:	000008b5 	.word	0x000008b5

00000b24 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     b24:	b590      	push	{r4, r7, lr}
     b26:	b08b      	sub	sp, #44	; 0x2c
     b28:	af00      	add	r7, sp, #0
     b2a:	60f8      	str	r0, [r7, #12]
     b2c:	60b9      	str	r1, [r7, #8]
     b2e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	68ba      	ldr	r2, [r7, #8]
     b34:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b3c:	6a3b      	ldr	r3, [r7, #32]
     b3e:	681b      	ldr	r3, [r3, #0]
     b40:	2202      	movs	r2, #2
     b42:	4013      	ands	r3, r2
     b44:	d001      	beq.n	b4a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b46:	231c      	movs	r3, #28
     b48:	e0a6      	b.n	c98 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b4a:	6a3b      	ldr	r3, [r7, #32]
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	2201      	movs	r2, #1
     b50:	4013      	ands	r3, r2
     b52:	d001      	beq.n	b58 <spi_init+0x34>
		return STATUS_BUSY;
     b54:	2305      	movs	r3, #5
     b56:	e09f      	b.n	c98 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	0018      	movs	r0, r3
     b5e:	4b50      	ldr	r3, [pc, #320]	; (ca0 <spi_init+0x17c>)
     b60:	4798      	blx	r3
     b62:	0003      	movs	r3, r0
     b64:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b66:	69fb      	ldr	r3, [r7, #28]
     b68:	3302      	adds	r3, #2
     b6a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b6c:	69fb      	ldr	r3, [r7, #28]
     b6e:	3314      	adds	r3, #20
     b70:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b72:	2201      	movs	r2, #1
     b74:	69bb      	ldr	r3, [r7, #24]
     b76:	409a      	lsls	r2, r3
     b78:	0013      	movs	r3, r2
     b7a:	0019      	movs	r1, r3
     b7c:	2002      	movs	r0, #2
     b7e:	4b49      	ldr	r3, [pc, #292]	; (ca4 <spi_init+0x180>)
     b80:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b82:	2310      	movs	r3, #16
     b84:	18fb      	adds	r3, r7, r3
     b86:	0018      	movs	r0, r3
     b88:	4b47      	ldr	r3, [pc, #284]	; (ca8 <spi_init+0x184>)
     b8a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	2224      	movs	r2, #36	; 0x24
     b90:	5c9a      	ldrb	r2, [r3, r2]
     b92:	2310      	movs	r3, #16
     b94:	18fb      	adds	r3, r7, r3
     b96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b98:	697b      	ldr	r3, [r7, #20]
     b9a:	b2db      	uxtb	r3, r3
     b9c:	2210      	movs	r2, #16
     b9e:	18ba      	adds	r2, r7, r2
     ba0:	0011      	movs	r1, r2
     ba2:	0018      	movs	r0, r3
     ba4:	4b41      	ldr	r3, [pc, #260]	; (cac <spi_init+0x188>)
     ba6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ba8:	697b      	ldr	r3, [r7, #20]
     baa:	b2db      	uxtb	r3, r3
     bac:	0018      	movs	r0, r3
     bae:	4b40      	ldr	r3, [pc, #256]	; (cb0 <spi_init+0x18c>)
     bb0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	2224      	movs	r2, #36	; 0x24
     bb6:	5c9b      	ldrb	r3, [r3, r2]
     bb8:	2100      	movs	r1, #0
     bba:	0018      	movs	r0, r3
     bbc:	4b3d      	ldr	r3, [pc, #244]	; (cb4 <spi_init+0x190>)
     bbe:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	2b01      	cmp	r3, #1
     bc6:	d105      	bne.n	bd4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     bc8:	6a3b      	ldr	r3, [r7, #32]
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	220c      	movs	r2, #12
     bce:	431a      	orrs	r2, r3
     bd0:	6a3b      	ldr	r3, [r7, #32]
     bd2:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	2b00      	cmp	r3, #0
     bda:	d105      	bne.n	be8 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     bdc:	6a3b      	ldr	r3, [r7, #32]
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	2208      	movs	r2, #8
     be2:	431a      	orrs	r2, r3
     be4:	6a3b      	ldr	r3, [r7, #32]
     be6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     be8:	2327      	movs	r3, #39	; 0x27
     bea:	18fb      	adds	r3, r7, r3
     bec:	2200      	movs	r2, #0
     bee:	701a      	strb	r2, [r3, #0]
     bf0:	e010      	b.n	c14 <spi_init+0xf0>
		module->callback[i]        = NULL;
     bf2:	2327      	movs	r3, #39	; 0x27
     bf4:	18fb      	adds	r3, r7, r3
     bf6:	781b      	ldrb	r3, [r3, #0]
     bf8:	68fa      	ldr	r2, [r7, #12]
     bfa:	3302      	adds	r3, #2
     bfc:	009b      	lsls	r3, r3, #2
     bfe:	18d3      	adds	r3, r2, r3
     c00:	3304      	adds	r3, #4
     c02:	2200      	movs	r2, #0
     c04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     c06:	2327      	movs	r3, #39	; 0x27
     c08:	18fb      	adds	r3, r7, r3
     c0a:	781a      	ldrb	r2, [r3, #0]
     c0c:	2327      	movs	r3, #39	; 0x27
     c0e:	18fb      	adds	r3, r7, r3
     c10:	3201      	adds	r2, #1
     c12:	701a      	strb	r2, [r3, #0]
     c14:	2327      	movs	r3, #39	; 0x27
     c16:	18fb      	adds	r3, r7, r3
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	2b06      	cmp	r3, #6
     c1c:	d9e9      	bls.n	bf2 <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	2200      	movs	r2, #0
     c22:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     c24:	68fb      	ldr	r3, [r7, #12]
     c26:	2200      	movs	r2, #0
     c28:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	2200      	movs	r2, #0
     c2e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	2200      	movs	r2, #0
     c34:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
     c36:	68fb      	ldr	r3, [r7, #12]
     c38:	2236      	movs	r2, #54	; 0x36
     c3a:	2100      	movs	r1, #0
     c3c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	2237      	movs	r2, #55	; 0x37
     c42:	2100      	movs	r1, #0
     c44:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	2238      	movs	r2, #56	; 0x38
     c4a:	2100      	movs	r1, #0
     c4c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	2203      	movs	r2, #3
     c52:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
     c54:	68fb      	ldr	r3, [r7, #12]
     c56:	2200      	movs	r2, #0
     c58:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     c5a:	68fb      	ldr	r3, [r7, #12]
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	2213      	movs	r2, #19
     c60:	18bc      	adds	r4, r7, r2
     c62:	0018      	movs	r0, r3
     c64:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <spi_init+0x17c>)
     c66:	4798      	blx	r3
     c68:	0003      	movs	r3, r0
     c6a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     c6c:	4a12      	ldr	r2, [pc, #72]	; (cb8 <spi_init+0x194>)
     c6e:	2313      	movs	r3, #19
     c70:	18fb      	adds	r3, r7, r3
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	0011      	movs	r1, r2
     c76:	0018      	movs	r0, r3
     c78:	4b10      	ldr	r3, [pc, #64]	; (cbc <spi_init+0x198>)
     c7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c7c:	2313      	movs	r3, #19
     c7e:	18fb      	adds	r3, r7, r3
     c80:	781a      	ldrb	r2, [r3, #0]
     c82:	4b0f      	ldr	r3, [pc, #60]	; (cc0 <spi_init+0x19c>)
     c84:	0092      	lsls	r2, r2, #2
     c86:	68f9      	ldr	r1, [r7, #12]
     c88:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     c8a:	687a      	ldr	r2, [r7, #4]
     c8c:	68fb      	ldr	r3, [r7, #12]
     c8e:	0011      	movs	r1, r2
     c90:	0018      	movs	r0, r3
     c92:	4b0c      	ldr	r3, [pc, #48]	; (cc4 <spi_init+0x1a0>)
     c94:	4798      	blx	r3
     c96:	0003      	movs	r3, r0
}
     c98:	0018      	movs	r0, r3
     c9a:	46bd      	mov	sp, r7
     c9c:	b00b      	add	sp, #44	; 0x2c
     c9e:	bd90      	pop	{r4, r7, pc}
     ca0:	00000675 	.word	0x00000675
     ca4:	00000859 	.word	0x00000859
     ca8:	00000841 	.word	0x00000841
     cac:	0000189d 	.word	0x0000189d
     cb0:	000018e1 	.word	0x000018e1
     cb4:	0000042d 	.word	0x0000042d
     cb8:	00000e21 	.word	0x00000e21
     cbc:	000006d9 	.word	0x000006d9
     cc0:	20000064 	.word	0x20000064
     cc4:	000008d5 	.word	0x000008d5

00000cc8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
     cc8:	b580      	push	{r7, lr}
     cca:	b084      	sub	sp, #16
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	b2da      	uxtb	r2, r3
     cde:	230e      	movs	r3, #14
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ce8:	1c5a      	adds	r2, r3, #1
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	799b      	ldrb	r3, [r3, #6]
     cf2:	2b01      	cmp	r3, #1
     cf4:	d113      	bne.n	d1e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	b2db      	uxtb	r3, r3
     cfe:	021b      	lsls	r3, r3, #8
     d00:	b21a      	sxth	r2, r3
     d02:	230e      	movs	r3, #14
     d04:	18fb      	adds	r3, r7, r3
     d06:	2100      	movs	r1, #0
     d08:	5e5b      	ldrsh	r3, [r3, r1]
     d0a:	4313      	orrs	r3, r2
     d0c:	b21a      	sxth	r2, r3
     d0e:	230e      	movs	r3, #14
     d10:	18fb      	adds	r3, r7, r3
     d12:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     d18:	1c5a      	adds	r2, r3, #1
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     d1e:	230e      	movs	r3, #14
     d20:	18fb      	adds	r3, r7, r3
     d22:	881b      	ldrh	r3, [r3, #0]
     d24:	05db      	lsls	r3, r3, #23
     d26:	0dda      	lsrs	r2, r3, #23
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     d30:	b29b      	uxth	r3, r3
     d32:	3b01      	subs	r3, #1
     d34:	b29a      	uxth	r2, r3
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	869a      	strh	r2, [r3, #52]	; 0x34
}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	46bd      	mov	sp, r7
     d3e:	b004      	add	sp, #16
     d40:	bd80      	pop	{r7, pc}
	...

00000d44 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
     d44:	b580      	push	{r7, lr}
     d46:	b084      	sub	sp, #16
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     d52:	4b08      	ldr	r3, [pc, #32]	; (d74 <_spi_write_dummy+0x30>)
     d54:	881b      	ldrh	r3, [r3, #0]
     d56:	001a      	movs	r2, r3
     d58:	68fb      	ldr	r3, [r7, #12]
     d5a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     d60:	b29b      	uxth	r3, r3
     d62:	3b01      	subs	r3, #1
     d64:	b29a      	uxth	r2, r3
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	865a      	strh	r2, [r3, #50]	; 0x32
}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	46bd      	mov	sp, r7
     d6e:	b004      	add	sp, #16
     d70:	bd80      	pop	{r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	2000007c 	.word	0x2000007c

00000d78 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
     d78:	b580      	push	{r7, lr}
     d7a:	b084      	sub	sp, #16
     d7c:	af00      	add	r7, sp, #0
     d7e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
     d86:	230a      	movs	r3, #10
     d88:	18fb      	adds	r3, r7, r3
     d8a:	2200      	movs	r2, #0
     d8c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     d8e:	68fb      	ldr	r3, [r7, #12]
     d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     d92:	230a      	movs	r3, #10
     d94:	18fb      	adds	r3, r7, r3
     d96:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     d9c:	b29b      	uxth	r3, r3
     d9e:	3b01      	subs	r3, #1
     da0:	b29a      	uxth	r2, r3
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	865a      	strh	r2, [r3, #50]	; 0x32
}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	46bd      	mov	sp, r7
     daa:	b004      	add	sp, #16
     dac:	bd80      	pop	{r7, pc}

00000dae <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
     dae:	b580      	push	{r7, lr}
     db0:	b084      	sub	sp, #16
     db2:	af00      	add	r7, sp, #0
     db4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     dc0:	b29a      	uxth	r2, r3
     dc2:	230a      	movs	r3, #10
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	05d2      	lsls	r2, r2, #23
     dc8:	0dd2      	lsrs	r2, r2, #23
     dca:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     dd0:	220a      	movs	r2, #10
     dd2:	18ba      	adds	r2, r7, r2
     dd4:	8812      	ldrh	r2, [r2, #0]
     dd6:	b2d2      	uxtb	r2, r2
     dd8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     dde:	1c5a      	adds	r2, r3, #1
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	799b      	ldrb	r3, [r3, #6]
     de8:	2b01      	cmp	r3, #1
     dea:	d10d      	bne.n	e08 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     df0:	220a      	movs	r2, #10
     df2:	18ba      	adds	r2, r7, r2
     df4:	8812      	ldrh	r2, [r2, #0]
     df6:	0a12      	lsrs	r2, r2, #8
     df8:	b292      	uxth	r2, r2
     dfa:	b2d2      	uxtb	r2, r2
     dfc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e02:	1c5a      	adds	r2, r3, #1
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     e0c:	b29b      	uxth	r3, r3
     e0e:	3b01      	subs	r3, #1
     e10:	b29a      	uxth	r2, r3
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	861a      	strh	r2, [r3, #48]	; 0x30
}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	46bd      	mov	sp, r7
     e1a:	b004      	add	sp, #16
     e1c:	bd80      	pop	{r7, pc}
	...

00000e20 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     e20:	b580      	push	{r7, lr}
     e22:	b086      	sub	sp, #24
     e24:	af00      	add	r7, sp, #0
     e26:	0002      	movs	r2, r0
     e28:	1dfb      	adds	r3, r7, #7
     e2a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
     e2c:	1dfb      	adds	r3, r7, #7
     e2e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
     e30:	4bb9      	ldr	r3, [pc, #740]	; (1118 <_spi_interrupt_handler+0x2f8>)
     e32:	0092      	lsls	r2, r2, #2
     e34:	58d3      	ldr	r3, [r2, r3]
     e36:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e38:	697b      	ldr	r3, [r7, #20]
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     e3e:	697b      	ldr	r3, [r7, #20]
     e40:	2237      	movs	r2, #55	; 0x37
     e42:	5c9a      	ldrb	r2, [r3, r2]
     e44:	697b      	ldr	r3, [r7, #20]
     e46:	2136      	movs	r1, #54	; 0x36
     e48:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
     e4a:	230f      	movs	r3, #15
     e4c:	18fb      	adds	r3, r7, r3
     e4e:	400a      	ands	r2, r1
     e50:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     e52:	693b      	ldr	r3, [r7, #16]
     e54:	7e1b      	ldrb	r3, [r3, #24]
     e56:	b2da      	uxtb	r2, r3
     e58:	230c      	movs	r3, #12
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
     e5e:	693b      	ldr	r3, [r7, #16]
     e60:	7d9b      	ldrb	r3, [r3, #22]
     e62:	b2db      	uxtb	r3, r3
     e64:	b29a      	uxth	r2, r3
     e66:	230c      	movs	r3, #12
     e68:	18fb      	adds	r3, r7, r3
     e6a:	210c      	movs	r1, #12
     e6c:	1879      	adds	r1, r7, r1
     e6e:	8809      	ldrh	r1, [r1, #0]
     e70:	400a      	ands	r2, r1
     e72:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     e74:	230c      	movs	r3, #12
     e76:	18fb      	adds	r3, r7, r3
     e78:	881b      	ldrh	r3, [r3, #0]
     e7a:	2201      	movs	r2, #1
     e7c:	4013      	ands	r3, r2
     e7e:	d041      	beq.n	f04 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     e80:	697b      	ldr	r3, [r7, #20]
     e82:	795b      	ldrb	r3, [r3, #5]
     e84:	2b01      	cmp	r3, #1
     e86:	d110      	bne.n	eaa <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
     e88:	697b      	ldr	r3, [r7, #20]
     e8a:	7a5b      	ldrb	r3, [r3, #9]
     e8c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
     e8e:	2b00      	cmp	r3, #0
     e90:	d10b      	bne.n	eaa <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
     e92:	697b      	ldr	r3, [r7, #20]
     e94:	0018      	movs	r0, r3
     e96:	4ba1      	ldr	r3, [pc, #644]	; (111c <_spi_interrupt_handler+0x2fc>)
     e98:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
     e9a:	697b      	ldr	r3, [r7, #20]
     e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     e9e:	b29b      	uxth	r3, r3
     ea0:	2b00      	cmp	r3, #0
     ea2:	d102      	bne.n	eaa <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     ea4:	693b      	ldr	r3, [r7, #16]
     ea6:	2201      	movs	r2, #1
     ea8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     eaa:	697b      	ldr	r3, [r7, #20]
     eac:	795b      	ldrb	r3, [r3, #5]
		if (0
     eae:	2b01      	cmp	r3, #1
     eb0:	d104      	bne.n	ebc <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
     eb2:	697b      	ldr	r3, [r7, #20]
     eb4:	7a5b      	ldrb	r3, [r3, #9]
     eb6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
     eb8:	2b00      	cmp	r3, #0
     eba:	d108      	bne.n	ece <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ebc:	697b      	ldr	r3, [r7, #20]
     ebe:	795b      	ldrb	r3, [r3, #5]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d11f      	bne.n	f04 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
     ec4:	697b      	ldr	r3, [r7, #20]
     ec6:	7a5b      	ldrb	r3, [r3, #9]
     ec8:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
     eca:	2b00      	cmp	r3, #0
     ecc:	d01a      	beq.n	f04 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
     ece:	697b      	ldr	r3, [r7, #20]
     ed0:	0018      	movs	r0, r3
     ed2:	4b93      	ldr	r3, [pc, #588]	; (1120 <_spi_interrupt_handler+0x300>)
     ed4:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
     ed6:	697b      	ldr	r3, [r7, #20]
     ed8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     eda:	b29b      	uxth	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d111      	bne.n	f04 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     ee0:	693b      	ldr	r3, [r7, #16]
     ee2:	2201      	movs	r2, #1
     ee4:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     ee6:	697b      	ldr	r3, [r7, #20]
     ee8:	7a5b      	ldrb	r3, [r3, #9]
     eea:	b2db      	uxtb	r3, r3
     eec:	2b01      	cmp	r3, #1
     eee:	d109      	bne.n	f04 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
     ef0:	697b      	ldr	r3, [r7, #20]
     ef2:	79db      	ldrb	r3, [r3, #7]
     ef4:	2201      	movs	r2, #1
     ef6:	4053      	eors	r3, r2
     ef8:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
     efa:	2b00      	cmp	r3, #0
     efc:	d002      	beq.n	f04 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     efe:	693b      	ldr	r3, [r7, #16]
     f00:	2202      	movs	r2, #2
     f02:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     f04:	230c      	movs	r3, #12
     f06:	18fb      	adds	r3, r7, r3
     f08:	881b      	ldrh	r3, [r3, #0]
     f0a:	2204      	movs	r2, #4
     f0c:	4013      	ands	r3, r2
     f0e:	d100      	bne.n	f12 <_spi_interrupt_handler+0xf2>
     f10:	e07e      	b.n	1010 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f12:	693b      	ldr	r3, [r7, #16]
     f14:	8b5b      	ldrh	r3, [r3, #26]
     f16:	b29b      	uxth	r3, r3
     f18:	001a      	movs	r2, r3
     f1a:	2304      	movs	r3, #4
     f1c:	4013      	ands	r3, r2
     f1e:	d022      	beq.n	f66 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
     f20:	697b      	ldr	r3, [r7, #20]
     f22:	7a5b      	ldrb	r3, [r3, #9]
     f24:	b2db      	uxtb	r3, r3
     f26:	2b01      	cmp	r3, #1
     f28:	d014      	beq.n	f54 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     f2a:	697b      	ldr	r3, [r7, #20]
     f2c:	2238      	movs	r2, #56	; 0x38
     f2e:	211e      	movs	r1, #30
     f30:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     f32:	697b      	ldr	r3, [r7, #20]
     f34:	2203      	movs	r2, #3
     f36:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     f38:	693b      	ldr	r3, [r7, #16]
     f3a:	2205      	movs	r2, #5
     f3c:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     f3e:	230f      	movs	r3, #15
     f40:	18fb      	adds	r3, r7, r3
     f42:	781b      	ldrb	r3, [r3, #0]
     f44:	2208      	movs	r2, #8
     f46:	4013      	ands	r3, r2
     f48:	d004      	beq.n	f54 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     f4a:	697b      	ldr	r3, [r7, #20]
     f4c:	699b      	ldr	r3, [r3, #24]
     f4e:	697a      	ldr	r2, [r7, #20]
     f50:	0010      	movs	r0, r2
     f52:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     f54:	693b      	ldr	r3, [r7, #16]
     f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f58:	230a      	movs	r3, #10
     f5a:	18fb      	adds	r3, r7, r3
     f5c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f5e:	693b      	ldr	r3, [r7, #16]
     f60:	2204      	movs	r2, #4
     f62:	835a      	strh	r2, [r3, #26]
     f64:	e054      	b.n	1010 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     f66:	697b      	ldr	r3, [r7, #20]
     f68:	7a5b      	ldrb	r3, [r3, #9]
     f6a:	b2db      	uxtb	r3, r3
     f6c:	2b01      	cmp	r3, #1
     f6e:	d11e      	bne.n	fae <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
     f70:	697b      	ldr	r3, [r7, #20]
     f72:	0018      	movs	r0, r3
     f74:	4b6b      	ldr	r3, [pc, #428]	; (1124 <_spi_interrupt_handler+0x304>)
     f76:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
     f78:	697b      	ldr	r3, [r7, #20]
     f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     f7c:	b29b      	uxth	r3, r3
     f7e:	2b00      	cmp	r3, #0
     f80:	d146      	bne.n	1010 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     f82:	693b      	ldr	r3, [r7, #16]
     f84:	2204      	movs	r2, #4
     f86:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
     f88:	697b      	ldr	r3, [r7, #20]
     f8a:	2238      	movs	r2, #56	; 0x38
     f8c:	2100      	movs	r1, #0
     f8e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
     f90:	697b      	ldr	r3, [r7, #20]
     f92:	2203      	movs	r2, #3
     f94:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     f96:	230f      	movs	r3, #15
     f98:	18fb      	adds	r3, r7, r3
     f9a:	781b      	ldrb	r3, [r3, #0]
     f9c:	2201      	movs	r2, #1
     f9e:	4013      	ands	r3, r2
     fa0:	d036      	beq.n	1010 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     fa2:	697b      	ldr	r3, [r7, #20]
     fa4:	68db      	ldr	r3, [r3, #12]
     fa6:	697a      	ldr	r2, [r7, #20]
     fa8:	0010      	movs	r0, r2
     faa:	4798      	blx	r3
     fac:	e030      	b.n	1010 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
     fae:	697b      	ldr	r3, [r7, #20]
     fb0:	0018      	movs	r0, r3
     fb2:	4b5d      	ldr	r3, [pc, #372]	; (1128 <_spi_interrupt_handler+0x308>)
     fb4:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     fb6:	697b      	ldr	r3, [r7, #20]
     fb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     fba:	b29b      	uxth	r3, r3
     fbc:	2b00      	cmp	r3, #0
     fbe:	d127      	bne.n	1010 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
     fc0:	697b      	ldr	r3, [r7, #20]
     fc2:	2238      	movs	r2, #56	; 0x38
     fc4:	2100      	movs	r1, #0
     fc6:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     fc8:	693b      	ldr	r3, [r7, #16]
     fca:	2204      	movs	r2, #4
     fcc:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     fce:	697b      	ldr	r3, [r7, #20]
     fd0:	7a5b      	ldrb	r3, [r3, #9]
     fd2:	b2db      	uxtb	r3, r3
     fd4:	2b02      	cmp	r3, #2
     fd6:	d10b      	bne.n	ff0 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     fd8:	230f      	movs	r3, #15
     fda:	18fb      	adds	r3, r7, r3
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2204      	movs	r2, #4
     fe0:	4013      	ands	r3, r2
     fe2:	d015      	beq.n	1010 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     fe4:	697b      	ldr	r3, [r7, #20]
     fe6:	695b      	ldr	r3, [r3, #20]
     fe8:	697a      	ldr	r2, [r7, #20]
     fea:	0010      	movs	r0, r2
     fec:	4798      	blx	r3
     fee:	e00f      	b.n	1010 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     ff0:	697b      	ldr	r3, [r7, #20]
     ff2:	7a5b      	ldrb	r3, [r3, #9]
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2b00      	cmp	r3, #0
     ff8:	d10a      	bne.n	1010 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     ffa:	230f      	movs	r3, #15
     ffc:	18fb      	adds	r3, r7, r3
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	2202      	movs	r2, #2
    1002:	4013      	ands	r3, r2
    1004:	d004      	beq.n	1010 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1006:	697b      	ldr	r3, [r7, #20]
    1008:	691b      	ldr	r3, [r3, #16]
    100a:	697a      	ldr	r2, [r7, #20]
    100c:	0010      	movs	r0, r2
    100e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1010:	230c      	movs	r3, #12
    1012:	18fb      	adds	r3, r7, r3
    1014:	881b      	ldrh	r3, [r3, #0]
    1016:	2202      	movs	r2, #2
    1018:	4013      	ands	r3, r2
    101a:	d046      	beq.n	10aa <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    101c:	697b      	ldr	r3, [r7, #20]
    101e:	795b      	ldrb	r3, [r3, #5]
    1020:	2b00      	cmp	r3, #0
    1022:	d11d      	bne.n	1060 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1024:	693b      	ldr	r3, [r7, #16]
    1026:	2207      	movs	r2, #7
    1028:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    102a:	693b      	ldr	r3, [r7, #16]
    102c:	2202      	movs	r2, #2
    102e:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1030:	697b      	ldr	r3, [r7, #20]
    1032:	2203      	movs	r2, #3
    1034:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1036:	697b      	ldr	r3, [r7, #20]
    1038:	2200      	movs	r2, #0
    103a:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    103c:	697b      	ldr	r3, [r7, #20]
    103e:	2200      	movs	r2, #0
    1040:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    1042:	697b      	ldr	r3, [r7, #20]
    1044:	2238      	movs	r2, #56	; 0x38
    1046:	2100      	movs	r1, #0
    1048:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    104a:	230f      	movs	r3, #15
    104c:	18fb      	adds	r3, r7, r3
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	2210      	movs	r2, #16
    1052:	4013      	ands	r3, r2
    1054:	d004      	beq.n	1060 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1056:	697b      	ldr	r3, [r7, #20]
    1058:	69db      	ldr	r3, [r3, #28]
    105a:	697a      	ldr	r2, [r7, #20]
    105c:	0010      	movs	r0, r2
    105e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1060:	697b      	ldr	r3, [r7, #20]
    1062:	795b      	ldrb	r3, [r3, #5]
    1064:	2b01      	cmp	r3, #1
    1066:	d120      	bne.n	10aa <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1068:	697b      	ldr	r3, [r7, #20]
    106a:	7a5b      	ldrb	r3, [r3, #9]
    106c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    106e:	2b01      	cmp	r3, #1
    1070:	d11b      	bne.n	10aa <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	79db      	ldrb	r3, [r3, #7]
    1076:	2201      	movs	r2, #1
    1078:	4053      	eors	r3, r2
    107a:	b2db      	uxtb	r3, r3
    107c:	2b00      	cmp	r3, #0
    107e:	d014      	beq.n	10aa <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1080:	693b      	ldr	r3, [r7, #16]
    1082:	2202      	movs	r2, #2
    1084:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1086:	697b      	ldr	r3, [r7, #20]
    1088:	2203      	movs	r2, #3
    108a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    108c:	697b      	ldr	r3, [r7, #20]
    108e:	2238      	movs	r2, #56	; 0x38
    1090:	2100      	movs	r1, #0
    1092:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1094:	230f      	movs	r3, #15
    1096:	18fb      	adds	r3, r7, r3
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	2201      	movs	r2, #1
    109c:	4013      	ands	r3, r2
    109e:	d004      	beq.n	10aa <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    10a0:	697b      	ldr	r3, [r7, #20]
    10a2:	68db      	ldr	r3, [r3, #12]
    10a4:	697a      	ldr	r2, [r7, #20]
    10a6:	0010      	movs	r0, r2
    10a8:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    10aa:	230c      	movs	r3, #12
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	881b      	ldrh	r3, [r3, #0]
    10b0:	2208      	movs	r2, #8
    10b2:	4013      	ands	r3, r2
    10b4:	d014      	beq.n	10e0 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    10b6:	697b      	ldr	r3, [r7, #20]
    10b8:	795b      	ldrb	r3, [r3, #5]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d110      	bne.n	10e0 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    10be:	693b      	ldr	r3, [r7, #16]
    10c0:	2208      	movs	r2, #8
    10c2:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    10c4:	693b      	ldr	r3, [r7, #16]
    10c6:	2208      	movs	r2, #8
    10c8:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    10ca:	230f      	movs	r3, #15
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	781b      	ldrb	r3, [r3, #0]
    10d0:	2220      	movs	r2, #32
    10d2:	4013      	ands	r3, r2
    10d4:	d004      	beq.n	10e0 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    10d6:	697b      	ldr	r3, [r7, #20]
    10d8:	6a1b      	ldr	r3, [r3, #32]
    10da:	697a      	ldr	r2, [r7, #20]
    10dc:	0010      	movs	r0, r2
    10de:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    10e0:	230c      	movs	r3, #12
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	881b      	ldrh	r3, [r3, #0]
    10e6:	2280      	movs	r2, #128	; 0x80
    10e8:	4013      	ands	r3, r2
    10ea:	d010      	beq.n	110e <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    10ec:	693b      	ldr	r3, [r7, #16]
    10ee:	2280      	movs	r2, #128	; 0x80
    10f0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    10f2:	693b      	ldr	r3, [r7, #16]
    10f4:	2280      	movs	r2, #128	; 0x80
    10f6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    10f8:	230f      	movs	r3, #15
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2240      	movs	r2, #64	; 0x40
    1100:	4013      	ands	r3, r2
    1102:	d004      	beq.n	110e <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1104:	697b      	ldr	r3, [r7, #20]
    1106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1108:	697a      	ldr	r2, [r7, #20]
    110a:	0010      	movs	r0, r2
    110c:	4798      	blx	r3
		}
	}
#  endif
}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	46bd      	mov	sp, r7
    1112:	b006      	add	sp, #24
    1114:	bd80      	pop	{r7, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	20000064 	.word	0x20000064
    111c:	00000d45 	.word	0x00000d45
    1120:	00000cc9 	.word	0x00000cc9
    1124:	00000d79 	.word	0x00000d79
    1128:	00000daf 	.word	0x00000daf

0000112c <system_gclk_gen_get_config_defaults>:
{
    112c:	b580      	push	{r7, lr}
    112e:	b082      	sub	sp, #8
    1130:	af00      	add	r7, sp, #0
    1132:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	2201      	movs	r2, #1
    1138:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	2200      	movs	r2, #0
    113e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	2206      	movs	r2, #6
    1144:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	2200      	movs	r2, #0
    114a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	2200      	movs	r2, #0
    1150:	725a      	strb	r2, [r3, #9]
}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	46bd      	mov	sp, r7
    1156:	b002      	add	sp, #8
    1158:	bd80      	pop	{r7, pc}

0000115a <system_clock_source_osc8m_get_config_defaults>:
{
    115a:	b580      	push	{r7, lr}
    115c:	b082      	sub	sp, #8
    115e:	af00      	add	r7, sp, #0
    1160:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	2203      	movs	r2, #3
    1166:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1168:	687b      	ldr	r3, [r7, #4]
    116a:	2200      	movs	r2, #0
    116c:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    116e:	687b      	ldr	r3, [r7, #4]
    1170:	2201      	movs	r2, #1
    1172:	709a      	strb	r2, [r3, #2]
}
    1174:	46c0      	nop			; (mov r8, r8)
    1176:	46bd      	mov	sp, r7
    1178:	b002      	add	sp, #8
    117a:	bd80      	pop	{r7, pc}

0000117c <system_cpu_clock_set_divider>:
{
    117c:	b580      	push	{r7, lr}
    117e:	b082      	sub	sp, #8
    1180:	af00      	add	r7, sp, #0
    1182:	0002      	movs	r2, r0
    1184:	1dfb      	adds	r3, r7, #7
    1186:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1188:	4a03      	ldr	r2, [pc, #12]	; (1198 <system_cpu_clock_set_divider+0x1c>)
    118a:	1dfb      	adds	r3, r7, #7
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	7213      	strb	r3, [r2, #8]
}
    1190:	46c0      	nop			; (mov r8, r8)
    1192:	46bd      	mov	sp, r7
    1194:	b002      	add	sp, #8
    1196:	bd80      	pop	{r7, pc}
    1198:	40000400 	.word	0x40000400

0000119c <system_apb_clock_set_divider>:
{
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	0002      	movs	r2, r0
    11a4:	1dfb      	adds	r3, r7, #7
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	1dbb      	adds	r3, r7, #6
    11aa:	1c0a      	adds	r2, r1, #0
    11ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    11ae:	1dfb      	adds	r3, r7, #7
    11b0:	781b      	ldrb	r3, [r3, #0]
    11b2:	2b01      	cmp	r3, #1
    11b4:	d008      	beq.n	11c8 <system_apb_clock_set_divider+0x2c>
    11b6:	2b02      	cmp	r3, #2
    11b8:	d00b      	beq.n	11d2 <system_apb_clock_set_divider+0x36>
    11ba:	2b00      	cmp	r3, #0
    11bc:	d10e      	bne.n	11dc <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    11be:	4a0b      	ldr	r2, [pc, #44]	; (11ec <system_apb_clock_set_divider+0x50>)
    11c0:	1dbb      	adds	r3, r7, #6
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	7253      	strb	r3, [r2, #9]
			break;
    11c6:	e00b      	b.n	11e0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    11c8:	4a08      	ldr	r2, [pc, #32]	; (11ec <system_apb_clock_set_divider+0x50>)
    11ca:	1dbb      	adds	r3, r7, #6
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	7293      	strb	r3, [r2, #10]
			break;
    11d0:	e006      	b.n	11e0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    11d2:	4a06      	ldr	r2, [pc, #24]	; (11ec <system_apb_clock_set_divider+0x50>)
    11d4:	1dbb      	adds	r3, r7, #6
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	72d3      	strb	r3, [r2, #11]
			break;
    11da:	e001      	b.n	11e0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    11dc:	2317      	movs	r3, #23
    11de:	e000      	b.n	11e2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    11e0:	2300      	movs	r3, #0
}
    11e2:	0018      	movs	r0, r3
    11e4:	46bd      	mov	sp, r7
    11e6:	b002      	add	sp, #8
    11e8:	bd80      	pop	{r7, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	40000400 	.word	0x40000400

000011f0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    11f0:	b580      	push	{r7, lr}
    11f2:	b082      	sub	sp, #8
    11f4:	af00      	add	r7, sp, #0
    11f6:	0002      	movs	r2, r0
    11f8:	1dfb      	adds	r3, r7, #7
    11fa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11fc:	4a08      	ldr	r2, [pc, #32]	; (1220 <system_flash_set_waitstates+0x30>)
    11fe:	1dfb      	adds	r3, r7, #7
    1200:	781b      	ldrb	r3, [r3, #0]
    1202:	210f      	movs	r1, #15
    1204:	400b      	ands	r3, r1
    1206:	b2d9      	uxtb	r1, r3
    1208:	6853      	ldr	r3, [r2, #4]
    120a:	200f      	movs	r0, #15
    120c:	4001      	ands	r1, r0
    120e:	0049      	lsls	r1, r1, #1
    1210:	201e      	movs	r0, #30
    1212:	4383      	bics	r3, r0
    1214:	430b      	orrs	r3, r1
    1216:	6053      	str	r3, [r2, #4]
}
    1218:	46c0      	nop			; (mov r8, r8)
    121a:	46bd      	mov	sp, r7
    121c:	b002      	add	sp, #8
    121e:	bd80      	pop	{r7, pc}
    1220:	41004000 	.word	0x41004000

00001224 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1224:	b580      	push	{r7, lr}
    1226:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1228:	46c0      	nop			; (mov r8, r8)
    122a:	4b04      	ldr	r3, [pc, #16]	; (123c <_system_dfll_wait_for_sync+0x18>)
    122c:	68db      	ldr	r3, [r3, #12]
    122e:	2210      	movs	r2, #16
    1230:	4013      	ands	r3, r2
    1232:	d0fa      	beq.n	122a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1234:	46c0      	nop			; (mov r8, r8)
    1236:	46bd      	mov	sp, r7
    1238:	bd80      	pop	{r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	40000800 	.word	0x40000800

00001240 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1240:	b580      	push	{r7, lr}
    1242:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1244:	4b0c      	ldr	r3, [pc, #48]	; (1278 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1246:	2202      	movs	r2, #2
    1248:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    124a:	4b0c      	ldr	r3, [pc, #48]	; (127c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    124c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    124e:	4a0a      	ldr	r2, [pc, #40]	; (1278 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1252:	689b      	ldr	r3, [r3, #8]
    1254:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1256:	4a08      	ldr	r2, [pc, #32]	; (1278 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1258:	4b09      	ldr	r3, [pc, #36]	; (1280 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    125a:	685b      	ldr	r3, [r3, #4]
    125c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    125e:	4b06      	ldr	r3, [pc, #24]	; (1278 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1260:	2200      	movs	r2, #0
    1262:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1264:	4b05      	ldr	r3, [pc, #20]	; (127c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1266:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1268:	4a03      	ldr	r2, [pc, #12]	; (1278 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	b29b      	uxth	r3, r3
    1270:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	46bd      	mov	sp, r7
    1276:	bd80      	pop	{r7, pc}
    1278:	40000800 	.word	0x40000800
    127c:	00001225 	.word	0x00001225
    1280:	2000004c 	.word	0x2000004c

00001284 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1284:	b580      	push	{r7, lr}
    1286:	b082      	sub	sp, #8
    1288:	af00      	add	r7, sp, #0
    128a:	0002      	movs	r2, r0
    128c:	1dfb      	adds	r3, r7, #7
    128e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1290:	1dfb      	adds	r3, r7, #7
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	2b08      	cmp	r3, #8
    1296:	d840      	bhi.n	131a <system_clock_source_get_hz+0x96>
    1298:	009a      	lsls	r2, r3, #2
    129a:	4b22      	ldr	r3, [pc, #136]	; (1324 <system_clock_source_get_hz+0xa0>)
    129c:	18d3      	adds	r3, r2, r3
    129e:	681b      	ldr	r3, [r3, #0]
    12a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    12a2:	4b21      	ldr	r3, [pc, #132]	; (1328 <system_clock_source_get_hz+0xa4>)
    12a4:	691b      	ldr	r3, [r3, #16]
    12a6:	e039      	b.n	131c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12a8:	4b20      	ldr	r3, [pc, #128]	; (132c <system_clock_source_get_hz+0xa8>)
    12aa:	6a1b      	ldr	r3, [r3, #32]
    12ac:	059b      	lsls	r3, r3, #22
    12ae:	0f9b      	lsrs	r3, r3, #30
    12b0:	b2db      	uxtb	r3, r3
    12b2:	001a      	movs	r2, r3
    12b4:	4b1e      	ldr	r3, [pc, #120]	; (1330 <system_clock_source_get_hz+0xac>)
    12b6:	40d3      	lsrs	r3, r2
    12b8:	e030      	b.n	131c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    12ba:	2380      	movs	r3, #128	; 0x80
    12bc:	021b      	lsls	r3, r3, #8
    12be:	e02d      	b.n	131c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    12c0:	2380      	movs	r3, #128	; 0x80
    12c2:	021b      	lsls	r3, r3, #8
    12c4:	e02a      	b.n	131c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    12c6:	4b18      	ldr	r3, [pc, #96]	; (1328 <system_clock_source_get_hz+0xa4>)
    12c8:	695b      	ldr	r3, [r3, #20]
    12ca:	e027      	b.n	131c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12cc:	4b16      	ldr	r3, [pc, #88]	; (1328 <system_clock_source_get_hz+0xa4>)
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	2202      	movs	r2, #2
    12d2:	4013      	ands	r3, r2
    12d4:	d101      	bne.n	12da <system_clock_source_get_hz+0x56>
			return 0;
    12d6:	2300      	movs	r3, #0
    12d8:	e020      	b.n	131c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    12da:	4b16      	ldr	r3, [pc, #88]	; (1334 <system_clock_source_get_hz+0xb0>)
    12dc:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12de:	4b12      	ldr	r3, [pc, #72]	; (1328 <system_clock_source_get_hz+0xa4>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	2204      	movs	r2, #4
    12e4:	4013      	ands	r3, r2
    12e6:	d009      	beq.n	12fc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12e8:	2000      	movs	r0, #0
    12ea:	4b13      	ldr	r3, [pc, #76]	; (1338 <system_clock_source_get_hz+0xb4>)
    12ec:	4798      	blx	r3
    12ee:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    12f0:	4b0d      	ldr	r3, [pc, #52]	; (1328 <system_clock_source_get_hz+0xa4>)
    12f2:	689b      	ldr	r3, [r3, #8]
    12f4:	041b      	lsls	r3, r3, #16
    12f6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12f8:	4353      	muls	r3, r2
    12fa:	e00f      	b.n	131c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    12fc:	4b0f      	ldr	r3, [pc, #60]	; (133c <system_clock_source_get_hz+0xb8>)
    12fe:	e00d      	b.n	131c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1300:	4a0a      	ldr	r2, [pc, #40]	; (132c <system_clock_source_get_hz+0xa8>)
    1302:	2350      	movs	r3, #80	; 0x50
    1304:	5cd3      	ldrb	r3, [r2, r3]
    1306:	b2db      	uxtb	r3, r3
    1308:	001a      	movs	r2, r3
    130a:	2304      	movs	r3, #4
    130c:	4013      	ands	r3, r2
    130e:	d101      	bne.n	1314 <system_clock_source_get_hz+0x90>
			return 0;
    1310:	2300      	movs	r3, #0
    1312:	e003      	b.n	131c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1314:	4b04      	ldr	r3, [pc, #16]	; (1328 <system_clock_source_get_hz+0xa4>)
    1316:	68db      	ldr	r3, [r3, #12]
    1318:	e000      	b.n	131c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    131a:	2300      	movs	r3, #0
	}
}
    131c:	0018      	movs	r0, r3
    131e:	46bd      	mov	sp, r7
    1320:	b002      	add	sp, #8
    1322:	bd80      	pop	{r7, pc}
    1324:	000026dc 	.word	0x000026dc
    1328:	2000004c 	.word	0x2000004c
    132c:	40000800 	.word	0x40000800
    1330:	007a1200 	.word	0x007a1200
    1334:	00001225 	.word	0x00001225
    1338:	00001a09 	.word	0x00001a09
    133c:	02dc6c00 	.word	0x02dc6c00

00001340 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1340:	b580      	push	{r7, lr}
    1342:	b084      	sub	sp, #16
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1348:	4b1a      	ldr	r3, [pc, #104]	; (13b4 <system_clock_source_osc8m_set_config+0x74>)
    134a:	6a1b      	ldr	r3, [r3, #32]
    134c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	781b      	ldrb	r3, [r3, #0]
    1352:	1c1a      	adds	r2, r3, #0
    1354:	2303      	movs	r3, #3
    1356:	4013      	ands	r3, r2
    1358:	b2da      	uxtb	r2, r3
    135a:	230d      	movs	r3, #13
    135c:	18fb      	adds	r3, r7, r3
    135e:	2103      	movs	r1, #3
    1360:	400a      	ands	r2, r1
    1362:	0010      	movs	r0, r2
    1364:	781a      	ldrb	r2, [r3, #0]
    1366:	2103      	movs	r1, #3
    1368:	438a      	bics	r2, r1
    136a:	1c11      	adds	r1, r2, #0
    136c:	1c02      	adds	r2, r0, #0
    136e:	430a      	orrs	r2, r1
    1370:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	789a      	ldrb	r2, [r3, #2]
    1376:	230c      	movs	r3, #12
    1378:	18fb      	adds	r3, r7, r3
    137a:	01d0      	lsls	r0, r2, #7
    137c:	781a      	ldrb	r2, [r3, #0]
    137e:	217f      	movs	r1, #127	; 0x7f
    1380:	400a      	ands	r2, r1
    1382:	1c11      	adds	r1, r2, #0
    1384:	1c02      	adds	r2, r0, #0
    1386:	430a      	orrs	r2, r1
    1388:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	785a      	ldrb	r2, [r3, #1]
    138e:	230c      	movs	r3, #12
    1390:	18fb      	adds	r3, r7, r3
    1392:	2101      	movs	r1, #1
    1394:	400a      	ands	r2, r1
    1396:	0190      	lsls	r0, r2, #6
    1398:	781a      	ldrb	r2, [r3, #0]
    139a:	2140      	movs	r1, #64	; 0x40
    139c:	438a      	bics	r2, r1
    139e:	1c11      	adds	r1, r2, #0
    13a0:	1c02      	adds	r2, r0, #0
    13a2:	430a      	orrs	r2, r1
    13a4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    13a6:	4b03      	ldr	r3, [pc, #12]	; (13b4 <system_clock_source_osc8m_set_config+0x74>)
    13a8:	68fa      	ldr	r2, [r7, #12]
    13aa:	621a      	str	r2, [r3, #32]
}
    13ac:	46c0      	nop			; (mov r8, r8)
    13ae:	46bd      	mov	sp, r7
    13b0:	b004      	add	sp, #16
    13b2:	bd80      	pop	{r7, pc}
    13b4:	40000800 	.word	0x40000800

000013b8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    13b8:	b580      	push	{r7, lr}
    13ba:	b082      	sub	sp, #8
    13bc:	af00      	add	r7, sp, #0
    13be:	0002      	movs	r2, r0
    13c0:	1dfb      	adds	r3, r7, #7
    13c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    13c4:	1dfb      	adds	r3, r7, #7
    13c6:	781b      	ldrb	r3, [r3, #0]
    13c8:	2b08      	cmp	r3, #8
    13ca:	d83b      	bhi.n	1444 <system_clock_source_enable+0x8c>
    13cc:	009a      	lsls	r2, r3, #2
    13ce:	4b21      	ldr	r3, [pc, #132]	; (1454 <system_clock_source_enable+0x9c>)
    13d0:	18d3      	adds	r3, r2, r3
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    13d6:	4b20      	ldr	r3, [pc, #128]	; (1458 <system_clock_source_enable+0xa0>)
    13d8:	4a1f      	ldr	r2, [pc, #124]	; (1458 <system_clock_source_enable+0xa0>)
    13da:	6a12      	ldr	r2, [r2, #32]
    13dc:	2102      	movs	r1, #2
    13de:	430a      	orrs	r2, r1
    13e0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    13e2:	2300      	movs	r3, #0
    13e4:	e031      	b.n	144a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    13e6:	4b1c      	ldr	r3, [pc, #112]	; (1458 <system_clock_source_enable+0xa0>)
    13e8:	4a1b      	ldr	r2, [pc, #108]	; (1458 <system_clock_source_enable+0xa0>)
    13ea:	6992      	ldr	r2, [r2, #24]
    13ec:	2102      	movs	r1, #2
    13ee:	430a      	orrs	r2, r1
    13f0:	619a      	str	r2, [r3, #24]
		break;
    13f2:	e029      	b.n	1448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    13f4:	4a18      	ldr	r2, [pc, #96]	; (1458 <system_clock_source_enable+0xa0>)
    13f6:	4b18      	ldr	r3, [pc, #96]	; (1458 <system_clock_source_enable+0xa0>)
    13f8:	8a1b      	ldrh	r3, [r3, #16]
    13fa:	b29b      	uxth	r3, r3
    13fc:	2102      	movs	r1, #2
    13fe:	430b      	orrs	r3, r1
    1400:	b29b      	uxth	r3, r3
    1402:	8213      	strh	r3, [r2, #16]
		break;
    1404:	e020      	b.n	1448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1406:	4a14      	ldr	r2, [pc, #80]	; (1458 <system_clock_source_enable+0xa0>)
    1408:	4b13      	ldr	r3, [pc, #76]	; (1458 <system_clock_source_enable+0xa0>)
    140a:	8a9b      	ldrh	r3, [r3, #20]
    140c:	b29b      	uxth	r3, r3
    140e:	2102      	movs	r1, #2
    1410:	430b      	orrs	r3, r1
    1412:	b29b      	uxth	r3, r3
    1414:	8293      	strh	r3, [r2, #20]
		break;
    1416:	e017      	b.n	1448 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1418:	4b10      	ldr	r3, [pc, #64]	; (145c <system_clock_source_enable+0xa4>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	2202      	movs	r2, #2
    141e:	431a      	orrs	r2, r3
    1420:	4b0e      	ldr	r3, [pc, #56]	; (145c <system_clock_source_enable+0xa4>)
    1422:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1424:	4b0e      	ldr	r3, [pc, #56]	; (1460 <system_clock_source_enable+0xa8>)
    1426:	4798      	blx	r3
		break;
    1428:	e00e      	b.n	1448 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    142a:	4a0b      	ldr	r2, [pc, #44]	; (1458 <system_clock_source_enable+0xa0>)
    142c:	490a      	ldr	r1, [pc, #40]	; (1458 <system_clock_source_enable+0xa0>)
    142e:	2344      	movs	r3, #68	; 0x44
    1430:	5ccb      	ldrb	r3, [r1, r3]
    1432:	b2db      	uxtb	r3, r3
    1434:	2102      	movs	r1, #2
    1436:	430b      	orrs	r3, r1
    1438:	b2d9      	uxtb	r1, r3
    143a:	2344      	movs	r3, #68	; 0x44
    143c:	54d1      	strb	r1, [r2, r3]
		break;
    143e:	e003      	b.n	1448 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1440:	2300      	movs	r3, #0
    1442:	e002      	b.n	144a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1444:	2317      	movs	r3, #23
    1446:	e000      	b.n	144a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1448:	2300      	movs	r3, #0
}
    144a:	0018      	movs	r0, r3
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bd80      	pop	{r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	00002700 	.word	0x00002700
    1458:	40000800 	.word	0x40000800
    145c:	2000004c 	.word	0x2000004c
    1460:	00001241 	.word	0x00001241

00001464 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1464:	b580      	push	{r7, lr}
    1466:	b082      	sub	sp, #8
    1468:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    146a:	003b      	movs	r3, r7
    146c:	2201      	movs	r2, #1
    146e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1470:	2300      	movs	r3, #0
    1472:	607b      	str	r3, [r7, #4]
    1474:	e009      	b.n	148a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	b2db      	uxtb	r3, r3
    147a:	003a      	movs	r2, r7
    147c:	0011      	movs	r1, r2
    147e:	0018      	movs	r0, r3
    1480:	4b05      	ldr	r3, [pc, #20]	; (1498 <_switch_peripheral_gclk+0x34>)
    1482:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	3301      	adds	r3, #1
    1488:	607b      	str	r3, [r7, #4]
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	2b24      	cmp	r3, #36	; 0x24
    148e:	d9f2      	bls.n	1476 <_switch_peripheral_gclk+0x12>
	}
}
    1490:	46c0      	nop			; (mov r8, r8)
    1492:	46bd      	mov	sp, r7
    1494:	b002      	add	sp, #8
    1496:	bd80      	pop	{r7, pc}
    1498:	0000189d 	.word	0x0000189d

0000149c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	b0a0      	sub	sp, #128	; 0x80
    14a0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14a2:	4b27      	ldr	r3, [pc, #156]	; (1540 <system_clock_init+0xa4>)
    14a4:	22c2      	movs	r2, #194	; 0xc2
    14a6:	00d2      	lsls	r2, r2, #3
    14a8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    14aa:	2000      	movs	r0, #0
    14ac:	4b25      	ldr	r3, [pc, #148]	; (1544 <system_clock_init+0xa8>)
    14ae:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    14b0:	4b25      	ldr	r3, [pc, #148]	; (1548 <system_clock_init+0xac>)
    14b2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    14b4:	237c      	movs	r3, #124	; 0x7c
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	0018      	movs	r0, r3
    14ba:	4b24      	ldr	r3, [pc, #144]	; (154c <system_clock_init+0xb0>)
    14bc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14be:	237c      	movs	r3, #124	; 0x7c
    14c0:	18fb      	adds	r3, r7, r3
    14c2:	2200      	movs	r2, #0
    14c4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    14c6:	237c      	movs	r3, #124	; 0x7c
    14c8:	18fb      	adds	r3, r7, r3
    14ca:	2201      	movs	r2, #1
    14cc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    14ce:	237c      	movs	r3, #124	; 0x7c
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	2200      	movs	r2, #0
    14d4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14d6:	237c      	movs	r3, #124	; 0x7c
    14d8:	18fb      	adds	r3, r7, r3
    14da:	0018      	movs	r0, r3
    14dc:	4b1c      	ldr	r3, [pc, #112]	; (1550 <system_clock_init+0xb4>)
    14de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14e0:	2006      	movs	r0, #6
    14e2:	4b1c      	ldr	r3, [pc, #112]	; (1554 <system_clock_init+0xb8>)
    14e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14e6:	4b1c      	ldr	r3, [pc, #112]	; (1558 <system_clock_init+0xbc>)
    14e8:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    14ea:	2000      	movs	r0, #0
    14ec:	4b1b      	ldr	r3, [pc, #108]	; (155c <system_clock_init+0xc0>)
    14ee:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    14f0:	2100      	movs	r1, #0
    14f2:	2000      	movs	r0, #0
    14f4:	4b1a      	ldr	r3, [pc, #104]	; (1560 <system_clock_init+0xc4>)
    14f6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    14f8:	2100      	movs	r1, #0
    14fa:	2001      	movs	r0, #1
    14fc:	4b18      	ldr	r3, [pc, #96]	; (1560 <system_clock_init+0xc4>)
    14fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1500:	2100      	movs	r1, #0
    1502:	2002      	movs	r0, #2
    1504:	4b16      	ldr	r3, [pc, #88]	; (1560 <system_clock_init+0xc4>)
    1506:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1508:	1d3b      	adds	r3, r7, #4
    150a:	0018      	movs	r0, r3
    150c:	4b15      	ldr	r3, [pc, #84]	; (1564 <system_clock_init+0xc8>)
    150e:	4798      	blx	r3
    1510:	1d3b      	adds	r3, r7, #4
    1512:	2206      	movs	r2, #6
    1514:	701a      	strb	r2, [r3, #0]
    1516:	1d3b      	adds	r3, r7, #4
    1518:	2201      	movs	r2, #1
    151a:	605a      	str	r2, [r3, #4]
    151c:	1d3b      	adds	r3, r7, #4
    151e:	2200      	movs	r2, #0
    1520:	721a      	strb	r2, [r3, #8]
    1522:	1d3b      	adds	r3, r7, #4
    1524:	2200      	movs	r2, #0
    1526:	725a      	strb	r2, [r3, #9]
    1528:	1d3b      	adds	r3, r7, #4
    152a:	0019      	movs	r1, r3
    152c:	2000      	movs	r0, #0
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <system_clock_init+0xcc>)
    1530:	4798      	blx	r3
    1532:	2000      	movs	r0, #0
    1534:	4b0d      	ldr	r3, [pc, #52]	; (156c <system_clock_init+0xd0>)
    1536:	4798      	blx	r3
#endif
}
    1538:	46c0      	nop			; (mov r8, r8)
    153a:	46bd      	mov	sp, r7
    153c:	b020      	add	sp, #128	; 0x80
    153e:	bd80      	pop	{r7, pc}
    1540:	40000800 	.word	0x40000800
    1544:	000011f1 	.word	0x000011f1
    1548:	00001465 	.word	0x00001465
    154c:	0000115b 	.word	0x0000115b
    1550:	00001341 	.word	0x00001341
    1554:	000013b9 	.word	0x000013b9
    1558:	00001615 	.word	0x00001615
    155c:	0000117d 	.word	0x0000117d
    1560:	0000119d 	.word	0x0000119d
    1564:	0000112d 	.word	0x0000112d
    1568:	00001645 	.word	0x00001645
    156c:	00001769 	.word	0x00001769

00001570 <system_apb_clock_set_mask>:
{
    1570:	b580      	push	{r7, lr}
    1572:	b082      	sub	sp, #8
    1574:	af00      	add	r7, sp, #0
    1576:	0002      	movs	r2, r0
    1578:	6039      	str	r1, [r7, #0]
    157a:	1dfb      	adds	r3, r7, #7
    157c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    157e:	1dfb      	adds	r3, r7, #7
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b01      	cmp	r3, #1
    1584:	d00a      	beq.n	159c <system_apb_clock_set_mask+0x2c>
    1586:	2b02      	cmp	r3, #2
    1588:	d00f      	beq.n	15aa <system_apb_clock_set_mask+0x3a>
    158a:	2b00      	cmp	r3, #0
    158c:	d114      	bne.n	15b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    158e:	4b0e      	ldr	r3, [pc, #56]	; (15c8 <system_apb_clock_set_mask+0x58>)
    1590:	4a0d      	ldr	r2, [pc, #52]	; (15c8 <system_apb_clock_set_mask+0x58>)
    1592:	6991      	ldr	r1, [r2, #24]
    1594:	683a      	ldr	r2, [r7, #0]
    1596:	430a      	orrs	r2, r1
    1598:	619a      	str	r2, [r3, #24]
			break;
    159a:	e00f      	b.n	15bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    159c:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <system_apb_clock_set_mask+0x58>)
    159e:	4a0a      	ldr	r2, [pc, #40]	; (15c8 <system_apb_clock_set_mask+0x58>)
    15a0:	69d1      	ldr	r1, [r2, #28]
    15a2:	683a      	ldr	r2, [r7, #0]
    15a4:	430a      	orrs	r2, r1
    15a6:	61da      	str	r2, [r3, #28]
			break;
    15a8:	e008      	b.n	15bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    15aa:	4b07      	ldr	r3, [pc, #28]	; (15c8 <system_apb_clock_set_mask+0x58>)
    15ac:	4a06      	ldr	r2, [pc, #24]	; (15c8 <system_apb_clock_set_mask+0x58>)
    15ae:	6a11      	ldr	r1, [r2, #32]
    15b0:	683a      	ldr	r2, [r7, #0]
    15b2:	430a      	orrs	r2, r1
    15b4:	621a      	str	r2, [r3, #32]
			break;
    15b6:	e001      	b.n	15bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    15b8:	2317      	movs	r3, #23
    15ba:	e000      	b.n	15be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    15bc:	2300      	movs	r3, #0
}
    15be:	0018      	movs	r0, r3
    15c0:	46bd      	mov	sp, r7
    15c2:	b002      	add	sp, #8
    15c4:	bd80      	pop	{r7, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	40000400 	.word	0x40000400

000015cc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    15cc:	b580      	push	{r7, lr}
    15ce:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    15d0:	4b02      	ldr	r3, [pc, #8]	; (15dc <system_interrupt_enter_critical_section+0x10>)
    15d2:	4798      	blx	r3
}
    15d4:	46c0      	nop			; (mov r8, r8)
    15d6:	46bd      	mov	sp, r7
    15d8:	bd80      	pop	{r7, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	00000305 	.word	0x00000305

000015e0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    15e4:	4b02      	ldr	r3, [pc, #8]	; (15f0 <system_interrupt_leave_critical_section+0x10>)
    15e6:	4798      	blx	r3
}
    15e8:	46c0      	nop			; (mov r8, r8)
    15ea:	46bd      	mov	sp, r7
    15ec:	bd80      	pop	{r7, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	00000359 	.word	0x00000359

000015f4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15f8:	4b05      	ldr	r3, [pc, #20]	; (1610 <system_gclk_is_syncing+0x1c>)
    15fa:	785b      	ldrb	r3, [r3, #1]
    15fc:	b2db      	uxtb	r3, r3
    15fe:	b25b      	sxtb	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	da01      	bge.n	1608 <system_gclk_is_syncing+0x14>
		return true;
    1604:	2301      	movs	r3, #1
    1606:	e000      	b.n	160a <system_gclk_is_syncing+0x16>
	}

	return false;
    1608:	2300      	movs	r3, #0
}
    160a:	0018      	movs	r0, r3
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}
    1610:	40000c00 	.word	0x40000c00

00001614 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1618:	2108      	movs	r1, #8
    161a:	2000      	movs	r0, #0
    161c:	4b07      	ldr	r3, [pc, #28]	; (163c <system_gclk_init+0x28>)
    161e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1620:	4b07      	ldr	r3, [pc, #28]	; (1640 <system_gclk_init+0x2c>)
    1622:	2201      	movs	r2, #1
    1624:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <system_gclk_init+0x2c>)
    162a:	781b      	ldrb	r3, [r3, #0]
    162c:	b2db      	uxtb	r3, r3
    162e:	001a      	movs	r2, r3
    1630:	2301      	movs	r3, #1
    1632:	4013      	ands	r3, r2
    1634:	d1f8      	bne.n	1628 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	46bd      	mov	sp, r7
    163a:	bd80      	pop	{r7, pc}
    163c:	00001571 	.word	0x00001571
    1640:	40000c00 	.word	0x40000c00

00001644 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1644:	b580      	push	{r7, lr}
    1646:	b086      	sub	sp, #24
    1648:	af00      	add	r7, sp, #0
    164a:	0002      	movs	r2, r0
    164c:	6039      	str	r1, [r7, #0]
    164e:	1dfb      	adds	r3, r7, #7
    1650:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1652:	1dfb      	adds	r3, r7, #7
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1658:	1dfb      	adds	r3, r7, #7
    165a:	781b      	ldrb	r3, [r3, #0]
    165c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    165e:	683b      	ldr	r3, [r7, #0]
    1660:	781b      	ldrb	r3, [r3, #0]
    1662:	021b      	lsls	r3, r3, #8
    1664:	001a      	movs	r2, r3
    1666:	697b      	ldr	r3, [r7, #20]
    1668:	4313      	orrs	r3, r2
    166a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    166c:	683b      	ldr	r3, [r7, #0]
    166e:	785b      	ldrb	r3, [r3, #1]
    1670:	2b00      	cmp	r3, #0
    1672:	d004      	beq.n	167e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1674:	697b      	ldr	r3, [r7, #20]
    1676:	2280      	movs	r2, #128	; 0x80
    1678:	02d2      	lsls	r2, r2, #11
    167a:	4313      	orrs	r3, r2
    167c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    167e:	683b      	ldr	r3, [r7, #0]
    1680:	7a5b      	ldrb	r3, [r3, #9]
    1682:	2b00      	cmp	r3, #0
    1684:	d004      	beq.n	1690 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1686:	697b      	ldr	r3, [r7, #20]
    1688:	2280      	movs	r2, #128	; 0x80
    168a:	0312      	lsls	r2, r2, #12
    168c:	4313      	orrs	r3, r2
    168e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1690:	683b      	ldr	r3, [r7, #0]
    1692:	685b      	ldr	r3, [r3, #4]
    1694:	2b01      	cmp	r3, #1
    1696:	d92c      	bls.n	16f2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1698:	683b      	ldr	r3, [r7, #0]
    169a:	685a      	ldr	r2, [r3, #4]
    169c:	683b      	ldr	r3, [r7, #0]
    169e:	685b      	ldr	r3, [r3, #4]
    16a0:	3b01      	subs	r3, #1
    16a2:	4013      	ands	r3, r2
    16a4:	d11a      	bne.n	16dc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    16a6:	2300      	movs	r3, #0
    16a8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16aa:	2302      	movs	r3, #2
    16ac:	60bb      	str	r3, [r7, #8]
    16ae:	e005      	b.n	16bc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    16b0:	68fb      	ldr	r3, [r7, #12]
    16b2:	3301      	adds	r3, #1
    16b4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    16b6:	68bb      	ldr	r3, [r7, #8]
    16b8:	005b      	lsls	r3, r3, #1
    16ba:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    16bc:	683b      	ldr	r3, [r7, #0]
    16be:	685a      	ldr	r2, [r3, #4]
    16c0:	68bb      	ldr	r3, [r7, #8]
    16c2:	429a      	cmp	r2, r3
    16c4:	d8f4      	bhi.n	16b0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16c6:	68fb      	ldr	r3, [r7, #12]
    16c8:	021b      	lsls	r3, r3, #8
    16ca:	693a      	ldr	r2, [r7, #16]
    16cc:	4313      	orrs	r3, r2
    16ce:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16d0:	697b      	ldr	r3, [r7, #20]
    16d2:	2280      	movs	r2, #128	; 0x80
    16d4:	0352      	lsls	r2, r2, #13
    16d6:	4313      	orrs	r3, r2
    16d8:	617b      	str	r3, [r7, #20]
    16da:	e00a      	b.n	16f2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    16dc:	683b      	ldr	r3, [r7, #0]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    16e2:	693a      	ldr	r2, [r7, #16]
    16e4:	4313      	orrs	r3, r2
    16e6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    16e8:	697b      	ldr	r3, [r7, #20]
    16ea:	2280      	movs	r2, #128	; 0x80
    16ec:	0292      	lsls	r2, r2, #10
    16ee:	4313      	orrs	r3, r2
    16f0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16f2:	683b      	ldr	r3, [r7, #0]
    16f4:	7a1b      	ldrb	r3, [r3, #8]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d004      	beq.n	1704 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16fa:	697b      	ldr	r3, [r7, #20]
    16fc:	2280      	movs	r2, #128	; 0x80
    16fe:	0392      	lsls	r2, r2, #14
    1700:	4313      	orrs	r3, r2
    1702:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1704:	46c0      	nop			; (mov r8, r8)
    1706:	4b13      	ldr	r3, [pc, #76]	; (1754 <system_gclk_gen_set_config+0x110>)
    1708:	4798      	blx	r3
    170a:	1e03      	subs	r3, r0, #0
    170c:	d1fb      	bne.n	1706 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    170e:	4b12      	ldr	r3, [pc, #72]	; (1758 <system_gclk_gen_set_config+0x114>)
    1710:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1712:	4a12      	ldr	r2, [pc, #72]	; (175c <system_gclk_gen_set_config+0x118>)
    1714:	1dfb      	adds	r3, r7, #7
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	4b0d      	ldr	r3, [pc, #52]	; (1754 <system_gclk_gen_set_config+0x110>)
    171e:	4798      	blx	r3
    1720:	1e03      	subs	r3, r0, #0
    1722:	d1fb      	bne.n	171c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1724:	4b0e      	ldr	r3, [pc, #56]	; (1760 <system_gclk_gen_set_config+0x11c>)
    1726:	693a      	ldr	r2, [r7, #16]
    1728:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	4b09      	ldr	r3, [pc, #36]	; (1754 <system_gclk_gen_set_config+0x110>)
    172e:	4798      	blx	r3
    1730:	1e03      	subs	r3, r0, #0
    1732:	d1fb      	bne.n	172c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <system_gclk_gen_set_config+0x11c>)
    1736:	4a0a      	ldr	r2, [pc, #40]	; (1760 <system_gclk_gen_set_config+0x11c>)
    1738:	6851      	ldr	r1, [r2, #4]
    173a:	2280      	movs	r2, #128	; 0x80
    173c:	0252      	lsls	r2, r2, #9
    173e:	4011      	ands	r1, r2
    1740:	697a      	ldr	r2, [r7, #20]
    1742:	430a      	orrs	r2, r1
    1744:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1746:	4b07      	ldr	r3, [pc, #28]	; (1764 <system_gclk_gen_set_config+0x120>)
    1748:	4798      	blx	r3
}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	46bd      	mov	sp, r7
    174e:	b006      	add	sp, #24
    1750:	bd80      	pop	{r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	000015f5 	.word	0x000015f5
    1758:	000015cd 	.word	0x000015cd
    175c:	40000c08 	.word	0x40000c08
    1760:	40000c00 	.word	0x40000c00
    1764:	000015e1 	.word	0x000015e1

00001768 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1768:	b580      	push	{r7, lr}
    176a:	b082      	sub	sp, #8
    176c:	af00      	add	r7, sp, #0
    176e:	0002      	movs	r2, r0
    1770:	1dfb      	adds	r3, r7, #7
    1772:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1774:	46c0      	nop			; (mov r8, r8)
    1776:	4b0e      	ldr	r3, [pc, #56]	; (17b0 <system_gclk_gen_enable+0x48>)
    1778:	4798      	blx	r3
    177a:	1e03      	subs	r3, r0, #0
    177c:	d1fb      	bne.n	1776 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    177e:	4b0d      	ldr	r3, [pc, #52]	; (17b4 <system_gclk_gen_enable+0x4c>)
    1780:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1782:	4a0d      	ldr	r2, [pc, #52]	; (17b8 <system_gclk_gen_enable+0x50>)
    1784:	1dfb      	adds	r3, r7, #7
    1786:	781b      	ldrb	r3, [r3, #0]
    1788:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	4b08      	ldr	r3, [pc, #32]	; (17b0 <system_gclk_gen_enable+0x48>)
    178e:	4798      	blx	r3
    1790:	1e03      	subs	r3, r0, #0
    1792:	d1fb      	bne.n	178c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1794:	4b09      	ldr	r3, [pc, #36]	; (17bc <system_gclk_gen_enable+0x54>)
    1796:	4a09      	ldr	r2, [pc, #36]	; (17bc <system_gclk_gen_enable+0x54>)
    1798:	6852      	ldr	r2, [r2, #4]
    179a:	2180      	movs	r1, #128	; 0x80
    179c:	0249      	lsls	r1, r1, #9
    179e:	430a      	orrs	r2, r1
    17a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    17a2:	4b07      	ldr	r3, [pc, #28]	; (17c0 <system_gclk_gen_enable+0x58>)
    17a4:	4798      	blx	r3
}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	46bd      	mov	sp, r7
    17aa:	b002      	add	sp, #8
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	000015f5 	.word	0x000015f5
    17b4:	000015cd 	.word	0x000015cd
    17b8:	40000c04 	.word	0x40000c04
    17bc:	40000c00 	.word	0x40000c00
    17c0:	000015e1 	.word	0x000015e1

000017c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	b086      	sub	sp, #24
    17c8:	af00      	add	r7, sp, #0
    17ca:	0002      	movs	r2, r0
    17cc:	1dfb      	adds	r3, r7, #7
    17ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    17d0:	46c0      	nop			; (mov r8, r8)
    17d2:	4b2a      	ldr	r3, [pc, #168]	; (187c <system_gclk_gen_get_hz+0xb8>)
    17d4:	4798      	blx	r3
    17d6:	1e03      	subs	r3, r0, #0
    17d8:	d1fb      	bne.n	17d2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    17da:	4b29      	ldr	r3, [pc, #164]	; (1880 <system_gclk_gen_get_hz+0xbc>)
    17dc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    17de:	4a29      	ldr	r2, [pc, #164]	; (1884 <system_gclk_gen_get_hz+0xc0>)
    17e0:	1dfb      	adds	r3, r7, #7
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	4b24      	ldr	r3, [pc, #144]	; (187c <system_gclk_gen_get_hz+0xb8>)
    17ea:	4798      	blx	r3
    17ec:	1e03      	subs	r3, r0, #0
    17ee:	d1fb      	bne.n	17e8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    17f0:	4b25      	ldr	r3, [pc, #148]	; (1888 <system_gclk_gen_get_hz+0xc4>)
    17f2:	685b      	ldr	r3, [r3, #4]
    17f4:	04db      	lsls	r3, r3, #19
    17f6:	0edb      	lsrs	r3, r3, #27
    17f8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    17fa:	0018      	movs	r0, r3
    17fc:	4b23      	ldr	r3, [pc, #140]	; (188c <system_gclk_gen_get_hz+0xc8>)
    17fe:	4798      	blx	r3
    1800:	0003      	movs	r3, r0
    1802:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1804:	4a1f      	ldr	r2, [pc, #124]	; (1884 <system_gclk_gen_get_hz+0xc0>)
    1806:	1dfb      	adds	r3, r7, #7
    1808:	781b      	ldrb	r3, [r3, #0]
    180a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    180c:	4b1e      	ldr	r3, [pc, #120]	; (1888 <system_gclk_gen_get_hz+0xc4>)
    180e:	685b      	ldr	r3, [r3, #4]
    1810:	02db      	lsls	r3, r3, #11
    1812:	0fdb      	lsrs	r3, r3, #31
    1814:	b2da      	uxtb	r2, r3
    1816:	2313      	movs	r3, #19
    1818:	18fb      	adds	r3, r7, r3
    181a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    181c:	4a1c      	ldr	r2, [pc, #112]	; (1890 <system_gclk_gen_get_hz+0xcc>)
    181e:	1dfb      	adds	r3, r7, #7
    1820:	781b      	ldrb	r3, [r3, #0]
    1822:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1824:	46c0      	nop			; (mov r8, r8)
    1826:	4b15      	ldr	r3, [pc, #84]	; (187c <system_gclk_gen_get_hz+0xb8>)
    1828:	4798      	blx	r3
    182a:	1e03      	subs	r3, r0, #0
    182c:	d1fb      	bne.n	1826 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    182e:	4b16      	ldr	r3, [pc, #88]	; (1888 <system_gclk_gen_get_hz+0xc4>)
    1830:	689b      	ldr	r3, [r3, #8]
    1832:	021b      	lsls	r3, r3, #8
    1834:	0c1b      	lsrs	r3, r3, #16
    1836:	b29b      	uxth	r3, r3
    1838:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    183a:	4b16      	ldr	r3, [pc, #88]	; (1894 <system_gclk_gen_get_hz+0xd0>)
    183c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    183e:	2313      	movs	r3, #19
    1840:	18fb      	adds	r3, r7, r3
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	2b00      	cmp	r3, #0
    1846:	d109      	bne.n	185c <system_gclk_gen_get_hz+0x98>
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	2b01      	cmp	r3, #1
    184c:	d906      	bls.n	185c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    184e:	4b12      	ldr	r3, [pc, #72]	; (1898 <system_gclk_gen_get_hz+0xd4>)
    1850:	68f9      	ldr	r1, [r7, #12]
    1852:	6978      	ldr	r0, [r7, #20]
    1854:	4798      	blx	r3
    1856:	0003      	movs	r3, r0
    1858:	617b      	str	r3, [r7, #20]
    185a:	e00a      	b.n	1872 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    185c:	2313      	movs	r3, #19
    185e:	18fb      	adds	r3, r7, r3
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d005      	beq.n	1872 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	3301      	adds	r3, #1
    186a:	697a      	ldr	r2, [r7, #20]
    186c:	40da      	lsrs	r2, r3
    186e:	0013      	movs	r3, r2
    1870:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1872:	697b      	ldr	r3, [r7, #20]
}
    1874:	0018      	movs	r0, r3
    1876:	46bd      	mov	sp, r7
    1878:	b006      	add	sp, #24
    187a:	bd80      	pop	{r7, pc}
    187c:	000015f5 	.word	0x000015f5
    1880:	000015cd 	.word	0x000015cd
    1884:	40000c04 	.word	0x40000c04
    1888:	40000c00 	.word	0x40000c00
    188c:	00001285 	.word	0x00001285
    1890:	40000c08 	.word	0x40000c08
    1894:	000015e1 	.word	0x000015e1
    1898:	0000254d 	.word	0x0000254d

0000189c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    189c:	b580      	push	{r7, lr}
    189e:	b084      	sub	sp, #16
    18a0:	af00      	add	r7, sp, #0
    18a2:	0002      	movs	r2, r0
    18a4:	6039      	str	r1, [r7, #0]
    18a6:	1dfb      	adds	r3, r7, #7
    18a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    18aa:	1dfb      	adds	r3, r7, #7
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    18b0:	683b      	ldr	r3, [r7, #0]
    18b2:	781b      	ldrb	r3, [r3, #0]
    18b4:	021b      	lsls	r3, r3, #8
    18b6:	001a      	movs	r2, r3
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	4313      	orrs	r3, r2
    18bc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    18be:	1dfb      	adds	r3, r7, #7
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	0018      	movs	r0, r3
    18c4:	4b04      	ldr	r3, [pc, #16]	; (18d8 <system_gclk_chan_set_config+0x3c>)
    18c6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <system_gclk_chan_set_config+0x40>)
    18ca:	68fa      	ldr	r2, [r7, #12]
    18cc:	b292      	uxth	r2, r2
    18ce:	805a      	strh	r2, [r3, #2]
}
    18d0:	46c0      	nop			; (mov r8, r8)
    18d2:	46bd      	mov	sp, r7
    18d4:	b004      	add	sp, #16
    18d6:	bd80      	pop	{r7, pc}
    18d8:	00001929 	.word	0x00001929
    18dc:	40000c00 	.word	0x40000c00

000018e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	0002      	movs	r2, r0
    18e8:	1dfb      	adds	r3, r7, #7
    18ea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    18ec:	4b0a      	ldr	r3, [pc, #40]	; (1918 <system_gclk_chan_enable+0x38>)
    18ee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18f0:	4a0a      	ldr	r2, [pc, #40]	; (191c <system_gclk_chan_enable+0x3c>)
    18f2:	1dfb      	adds	r3, r7, #7
    18f4:	781b      	ldrb	r3, [r3, #0]
    18f6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    18f8:	4909      	ldr	r1, [pc, #36]	; (1920 <system_gclk_chan_enable+0x40>)
    18fa:	4b09      	ldr	r3, [pc, #36]	; (1920 <system_gclk_chan_enable+0x40>)
    18fc:	885b      	ldrh	r3, [r3, #2]
    18fe:	b29b      	uxth	r3, r3
    1900:	2280      	movs	r2, #128	; 0x80
    1902:	01d2      	lsls	r2, r2, #7
    1904:	4313      	orrs	r3, r2
    1906:	b29b      	uxth	r3, r3
    1908:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    190a:	4b06      	ldr	r3, [pc, #24]	; (1924 <system_gclk_chan_enable+0x44>)
    190c:	4798      	blx	r3
}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	46bd      	mov	sp, r7
    1912:	b002      	add	sp, #8
    1914:	bd80      	pop	{r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	000015cd 	.word	0x000015cd
    191c:	40000c02 	.word	0x40000c02
    1920:	40000c00 	.word	0x40000c00
    1924:	000015e1 	.word	0x000015e1

00001928 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1928:	b580      	push	{r7, lr}
    192a:	b084      	sub	sp, #16
    192c:	af00      	add	r7, sp, #0
    192e:	0002      	movs	r2, r0
    1930:	1dfb      	adds	r3, r7, #7
    1932:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1934:	4b1c      	ldr	r3, [pc, #112]	; (19a8 <system_gclk_chan_disable+0x80>)
    1936:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1938:	4a1c      	ldr	r2, [pc, #112]	; (19ac <system_gclk_chan_disable+0x84>)
    193a:	1dfb      	adds	r3, r7, #7
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1940:	4b1b      	ldr	r3, [pc, #108]	; (19b0 <system_gclk_chan_disable+0x88>)
    1942:	885b      	ldrh	r3, [r3, #2]
    1944:	051b      	lsls	r3, r3, #20
    1946:	0f1b      	lsrs	r3, r3, #28
    1948:	b2db      	uxtb	r3, r3
    194a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    194c:	4a18      	ldr	r2, [pc, #96]	; (19b0 <system_gclk_chan_disable+0x88>)
    194e:	8853      	ldrh	r3, [r2, #2]
    1950:	4918      	ldr	r1, [pc, #96]	; (19b4 <system_gclk_chan_disable+0x8c>)
    1952:	400b      	ands	r3, r1
    1954:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1956:	4a16      	ldr	r2, [pc, #88]	; (19b0 <system_gclk_chan_disable+0x88>)
    1958:	4b15      	ldr	r3, [pc, #84]	; (19b0 <system_gclk_chan_disable+0x88>)
    195a:	885b      	ldrh	r3, [r3, #2]
    195c:	b29b      	uxth	r3, r3
    195e:	4916      	ldr	r1, [pc, #88]	; (19b8 <system_gclk_chan_disable+0x90>)
    1960:	400b      	ands	r3, r1
    1962:	b29b      	uxth	r3, r3
    1964:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	4b11      	ldr	r3, [pc, #68]	; (19b0 <system_gclk_chan_disable+0x88>)
    196a:	885b      	ldrh	r3, [r3, #2]
    196c:	b29b      	uxth	r3, r3
    196e:	001a      	movs	r2, r3
    1970:	2380      	movs	r3, #128	; 0x80
    1972:	01db      	lsls	r3, r3, #7
    1974:	4013      	ands	r3, r2
    1976:	d1f7      	bne.n	1968 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1978:	4a0d      	ldr	r2, [pc, #52]	; (19b0 <system_gclk_chan_disable+0x88>)
    197a:	68fb      	ldr	r3, [r7, #12]
    197c:	b2db      	uxtb	r3, r3
    197e:	1c19      	adds	r1, r3, #0
    1980:	230f      	movs	r3, #15
    1982:	400b      	ands	r3, r1
    1984:	b2d9      	uxtb	r1, r3
    1986:	8853      	ldrh	r3, [r2, #2]
    1988:	1c08      	adds	r0, r1, #0
    198a:	210f      	movs	r1, #15
    198c:	4001      	ands	r1, r0
    198e:	0208      	lsls	r0, r1, #8
    1990:	4908      	ldr	r1, [pc, #32]	; (19b4 <system_gclk_chan_disable+0x8c>)
    1992:	400b      	ands	r3, r1
    1994:	1c19      	adds	r1, r3, #0
    1996:	1c03      	adds	r3, r0, #0
    1998:	430b      	orrs	r3, r1
    199a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    199c:	4b07      	ldr	r3, [pc, #28]	; (19bc <system_gclk_chan_disable+0x94>)
    199e:	4798      	blx	r3
}
    19a0:	46c0      	nop			; (mov r8, r8)
    19a2:	46bd      	mov	sp, r7
    19a4:	b004      	add	sp, #16
    19a6:	bd80      	pop	{r7, pc}
    19a8:	000015cd 	.word	0x000015cd
    19ac:	40000c02 	.word	0x40000c02
    19b0:	40000c00 	.word	0x40000c00
    19b4:	fffff0ff 	.word	0xfffff0ff
    19b8:	ffffbfff 	.word	0xffffbfff
    19bc:	000015e1 	.word	0x000015e1

000019c0 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	b082      	sub	sp, #8
    19c4:	af00      	add	r7, sp, #0
    19c6:	0002      	movs	r2, r0
    19c8:	1dfb      	adds	r3, r7, #7
    19ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    19cc:	4b09      	ldr	r3, [pc, #36]	; (19f4 <system_gclk_chan_lock+0x34>)
    19ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19d0:	4a09      	ldr	r2, [pc, #36]	; (19f8 <system_gclk_chan_lock+0x38>)
    19d2:	1dfb      	adds	r3, r7, #7
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	7013      	strb	r3, [r2, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    19d8:	4a08      	ldr	r2, [pc, #32]	; (19fc <system_gclk_chan_lock+0x3c>)
    19da:	4b08      	ldr	r3, [pc, #32]	; (19fc <system_gclk_chan_lock+0x3c>)
    19dc:	885b      	ldrh	r3, [r3, #2]
    19de:	b29b      	uxth	r3, r3
    19e0:	4907      	ldr	r1, [pc, #28]	; (1a00 <system_gclk_chan_lock+0x40>)
    19e2:	430b      	orrs	r3, r1
    19e4:	b29b      	uxth	r3, r3
    19e6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    19e8:	4b06      	ldr	r3, [pc, #24]	; (1a04 <system_gclk_chan_lock+0x44>)
    19ea:	4798      	blx	r3
}
    19ec:	46c0      	nop			; (mov r8, r8)
    19ee:	46bd      	mov	sp, r7
    19f0:	b002      	add	sp, #8
    19f2:	bd80      	pop	{r7, pc}
    19f4:	000015cd 	.word	0x000015cd
    19f8:	40000c02 	.word	0x40000c02
    19fc:	40000c00 	.word	0x40000c00
    1a00:	ffffc000 	.word	0xffffc000
    1a04:	000015e1 	.word	0x000015e1

00001a08 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	b084      	sub	sp, #16
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	0002      	movs	r2, r0
    1a10:	1dfb      	adds	r3, r7, #7
    1a12:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1a14:	4b0d      	ldr	r3, [pc, #52]	; (1a4c <system_gclk_chan_get_hz+0x44>)
    1a16:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a18:	4a0d      	ldr	r2, [pc, #52]	; (1a50 <system_gclk_chan_get_hz+0x48>)
    1a1a:	1dfb      	adds	r3, r7, #7
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a20:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <system_gclk_chan_get_hz+0x4c>)
    1a22:	885b      	ldrh	r3, [r3, #2]
    1a24:	051b      	lsls	r3, r3, #20
    1a26:	0f1b      	lsrs	r3, r3, #28
    1a28:	b2da      	uxtb	r2, r3
    1a2a:	230f      	movs	r3, #15
    1a2c:	18fb      	adds	r3, r7, r3
    1a2e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1a30:	4b09      	ldr	r3, [pc, #36]	; (1a58 <system_gclk_chan_get_hz+0x50>)
    1a32:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a34:	230f      	movs	r3, #15
    1a36:	18fb      	adds	r3, r7, r3
    1a38:	781b      	ldrb	r3, [r3, #0]
    1a3a:	0018      	movs	r0, r3
    1a3c:	4b07      	ldr	r3, [pc, #28]	; (1a5c <system_gclk_chan_get_hz+0x54>)
    1a3e:	4798      	blx	r3
    1a40:	0003      	movs	r3, r0
}
    1a42:	0018      	movs	r0, r3
    1a44:	46bd      	mov	sp, r7
    1a46:	b004      	add	sp, #16
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000015cd 	.word	0x000015cd
    1a50:	40000c02 	.word	0x40000c02
    1a54:	40000c00 	.word	0x40000c00
    1a58:	000015e1 	.word	0x000015e1
    1a5c:	000017c5 	.word	0x000017c5

00001a60 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	b084      	sub	sp, #16
    1a64:	af00      	add	r7, sp, #0
    1a66:	0002      	movs	r2, r0
    1a68:	1dfb      	adds	r3, r7, #7
    1a6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1a6c:	230f      	movs	r3, #15
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	1dfa      	adds	r2, r7, #7
    1a72:	7812      	ldrb	r2, [r2, #0]
    1a74:	09d2      	lsrs	r2, r2, #7
    1a76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1a78:	230e      	movs	r3, #14
    1a7a:	18fb      	adds	r3, r7, r3
    1a7c:	1dfa      	adds	r2, r7, #7
    1a7e:	7812      	ldrb	r2, [r2, #0]
    1a80:	0952      	lsrs	r2, r2, #5
    1a82:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1a84:	4b0d      	ldr	r3, [pc, #52]	; (1abc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1a86:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1a88:	230f      	movs	r3, #15
    1a8a:	18fb      	adds	r3, r7, r3
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d10f      	bne.n	1ab2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1a92:	230f      	movs	r3, #15
    1a94:	18fb      	adds	r3, r7, r3
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	2210      	movs	r2, #16
    1a9c:	4694      	mov	ip, r2
    1a9e:	44bc      	add	ip, r7
    1aa0:	4463      	add	r3, ip
    1aa2:	3b08      	subs	r3, #8
    1aa4:	681a      	ldr	r2, [r3, #0]
    1aa6:	230e      	movs	r3, #14
    1aa8:	18fb      	adds	r3, r7, r3
    1aaa:	781b      	ldrb	r3, [r3, #0]
    1aac:	01db      	lsls	r3, r3, #7
    1aae:	18d3      	adds	r3, r2, r3
    1ab0:	e000      	b.n	1ab4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1ab2:	2300      	movs	r3, #0
	}
}
    1ab4:	0018      	movs	r0, r3
    1ab6:	46bd      	mov	sp, r7
    1ab8:	b004      	add	sp, #16
    1aba:	bd80      	pop	{r7, pc}
    1abc:	41004400 	.word	0x41004400

00001ac0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b088      	sub	sp, #32
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	60f8      	str	r0, [r7, #12]
    1ac8:	60b9      	str	r1, [r7, #8]
    1aca:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1acc:	2300      	movs	r3, #0
    1ace:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	78db      	ldrb	r3, [r3, #3]
    1ad4:	2201      	movs	r2, #1
    1ad6:	4053      	eors	r3, r2
    1ad8:	b2db      	uxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	d035      	beq.n	1b4a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	2b80      	cmp	r3, #128	; 0x80
    1ae4:	d00b      	beq.n	1afe <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1ae6:	69fb      	ldr	r3, [r7, #28]
    1ae8:	2280      	movs	r2, #128	; 0x80
    1aea:	0252      	lsls	r2, r2, #9
    1aec:	4313      	orrs	r3, r2
    1aee:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	061b      	lsls	r3, r3, #24
    1af6:	001a      	movs	r2, r3
    1af8:	69fb      	ldr	r3, [r7, #28]
    1afa:	4313      	orrs	r3, r2
    1afc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	785b      	ldrb	r3, [r3, #1]
    1b02:	2b00      	cmp	r3, #0
    1b04:	d003      	beq.n	1b0e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b0a:	2b02      	cmp	r3, #2
    1b0c:	d110      	bne.n	1b30 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b0e:	69fb      	ldr	r3, [r7, #28]
    1b10:	2280      	movs	r2, #128	; 0x80
    1b12:	0292      	lsls	r2, r2, #10
    1b14:	4313      	orrs	r3, r2
    1b16:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b18:	687b      	ldr	r3, [r7, #4]
    1b1a:	789b      	ldrb	r3, [r3, #2]
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d004      	beq.n	1b2a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b20:	69fb      	ldr	r3, [r7, #28]
    1b22:	2280      	movs	r2, #128	; 0x80
    1b24:	02d2      	lsls	r2, r2, #11
    1b26:	4313      	orrs	r3, r2
    1b28:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b2a:	68fb      	ldr	r3, [r7, #12]
    1b2c:	68ba      	ldr	r2, [r7, #8]
    1b2e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	785b      	ldrb	r3, [r3, #1]
    1b34:	2b01      	cmp	r3, #1
    1b36:	d003      	beq.n	1b40 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b3c:	2b02      	cmp	r3, #2
    1b3e:	d107      	bne.n	1b50 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b40:	69fb      	ldr	r3, [r7, #28]
    1b42:	4a22      	ldr	r2, [pc, #136]	; (1bcc <_system_pinmux_config+0x10c>)
    1b44:	4013      	ands	r3, r2
    1b46:	61fb      	str	r3, [r7, #28]
    1b48:	e002      	b.n	1b50 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	68ba      	ldr	r2, [r7, #8]
    1b4e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b50:	68bb      	ldr	r3, [r7, #8]
    1b52:	041b      	lsls	r3, r3, #16
    1b54:	0c1b      	lsrs	r3, r3, #16
    1b56:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b58:	68bb      	ldr	r3, [r7, #8]
    1b5a:	0c1b      	lsrs	r3, r3, #16
    1b5c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b5e:	69ba      	ldr	r2, [r7, #24]
    1b60:	69fb      	ldr	r3, [r7, #28]
    1b62:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b64:	22a0      	movs	r2, #160	; 0xa0
    1b66:	05d2      	lsls	r2, r2, #23
    1b68:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b6e:	697a      	ldr	r2, [r7, #20]
    1b70:	69fb      	ldr	r3, [r7, #28]
    1b72:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b74:	22d0      	movs	r2, #208	; 0xd0
    1b76:	0612      	lsls	r2, r2, #24
    1b78:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b7a:	68fb      	ldr	r3, [r7, #12]
    1b7c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	78db      	ldrb	r3, [r3, #3]
    1b82:	2201      	movs	r2, #1
    1b84:	4053      	eors	r3, r2
    1b86:	b2db      	uxtb	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d01a      	beq.n	1bc2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b8c:	69fa      	ldr	r2, [r7, #28]
    1b8e:	2380      	movs	r3, #128	; 0x80
    1b90:	02db      	lsls	r3, r3, #11
    1b92:	4013      	ands	r3, r2
    1b94:	d00a      	beq.n	1bac <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	789b      	ldrb	r3, [r3, #2]
    1b9a:	2b01      	cmp	r3, #1
    1b9c:	d103      	bne.n	1ba6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	68ba      	ldr	r2, [r7, #8]
    1ba2:	619a      	str	r2, [r3, #24]
    1ba4:	e002      	b.n	1bac <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1ba6:	68fb      	ldr	r3, [r7, #12]
    1ba8:	68ba      	ldr	r2, [r7, #8]
    1baa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bac:	687b      	ldr	r3, [r7, #4]
    1bae:	785b      	ldrb	r3, [r3, #1]
    1bb0:	2b01      	cmp	r3, #1
    1bb2:	d003      	beq.n	1bbc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bb8:	2b02      	cmp	r3, #2
    1bba:	d102      	bne.n	1bc2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	68ba      	ldr	r2, [r7, #8]
    1bc0:	609a      	str	r2, [r3, #8]
		}
	}
}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	46bd      	mov	sp, r7
    1bc6:	b008      	add	sp, #32
    1bc8:	bd80      	pop	{r7, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	fffbffff 	.word	0xfffbffff

00001bd0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b084      	sub	sp, #16
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	0002      	movs	r2, r0
    1bd8:	6039      	str	r1, [r7, #0]
    1bda:	1dfb      	adds	r3, r7, #7
    1bdc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1bde:	1dfb      	adds	r3, r7, #7
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	0018      	movs	r0, r3
    1be4:	4b0a      	ldr	r3, [pc, #40]	; (1c10 <system_pinmux_pin_set_config+0x40>)
    1be6:	4798      	blx	r3
    1be8:	0003      	movs	r3, r0
    1bea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bec:	1dfb      	adds	r3, r7, #7
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	221f      	movs	r2, #31
    1bf2:	4013      	ands	r3, r2
    1bf4:	2201      	movs	r2, #1
    1bf6:	409a      	lsls	r2, r3
    1bf8:	0013      	movs	r3, r2
    1bfa:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1bfc:	683a      	ldr	r2, [r7, #0]
    1bfe:	68b9      	ldr	r1, [r7, #8]
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	0018      	movs	r0, r3
    1c04:	4b03      	ldr	r3, [pc, #12]	; (1c14 <system_pinmux_pin_set_config+0x44>)
    1c06:	4798      	blx	r3
}
    1c08:	46c0      	nop			; (mov r8, r8)
    1c0a:	46bd      	mov	sp, r7
    1c0c:	b004      	add	sp, #16
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	00001a61 	.word	0x00001a61
    1c14:	00001ac1 	.word	0x00001ac1

00001c18 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	af00      	add	r7, sp, #0
	return;
    1c1c:	46c0      	nop			; (mov r8, r8)
}
    1c1e:	46bd      	mov	sp, r7
    1c20:	bd80      	pop	{r7, pc}
	...

00001c24 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c28:	4b06      	ldr	r3, [pc, #24]	; (1c44 <system_init+0x20>)
    1c2a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c2c:	4b06      	ldr	r3, [pc, #24]	; (1c48 <system_init+0x24>)
    1c2e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c30:	4b06      	ldr	r3, [pc, #24]	; (1c4c <system_init+0x28>)
    1c32:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c34:	4b06      	ldr	r3, [pc, #24]	; (1c50 <system_init+0x2c>)
    1c36:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <system_init+0x30>)
    1c3a:	4798      	blx	r3
}
    1c3c:	46c0      	nop			; (mov r8, r8)
    1c3e:	46bd      	mov	sp, r7
    1c40:	bd80      	pop	{r7, pc}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	0000149d 	.word	0x0000149d
    1c48:	000002f9 	.word	0x000002f9
    1c4c:	00001c19 	.word	0x00001c19
    1c50:	00001c19 	.word	0x00001c19
    1c54:	00001c19 	.word	0x00001c19

00001c58 <system_apb_clock_set_mask>:
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	b082      	sub	sp, #8
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	0002      	movs	r2, r0
    1c60:	6039      	str	r1, [r7, #0]
    1c62:	1dfb      	adds	r3, r7, #7
    1c64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1c66:	1dfb      	adds	r3, r7, #7
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b01      	cmp	r3, #1
    1c6c:	d00a      	beq.n	1c84 <system_apb_clock_set_mask+0x2c>
    1c6e:	2b02      	cmp	r3, #2
    1c70:	d00f      	beq.n	1c92 <system_apb_clock_set_mask+0x3a>
    1c72:	2b00      	cmp	r3, #0
    1c74:	d114      	bne.n	1ca0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1c76:	4b0e      	ldr	r3, [pc, #56]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c78:	4a0d      	ldr	r2, [pc, #52]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c7a:	6991      	ldr	r1, [r2, #24]
    1c7c:	683a      	ldr	r2, [r7, #0]
    1c7e:	430a      	orrs	r2, r1
    1c80:	619a      	str	r2, [r3, #24]
			break;
    1c82:	e00f      	b.n	1ca4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1c84:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c86:	4a0a      	ldr	r2, [pc, #40]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c88:	69d1      	ldr	r1, [r2, #28]
    1c8a:	683a      	ldr	r2, [r7, #0]
    1c8c:	430a      	orrs	r2, r1
    1c8e:	61da      	str	r2, [r3, #28]
			break;
    1c90:	e008      	b.n	1ca4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1c92:	4b07      	ldr	r3, [pc, #28]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c94:	4a06      	ldr	r2, [pc, #24]	; (1cb0 <system_apb_clock_set_mask+0x58>)
    1c96:	6a11      	ldr	r1, [r2, #32]
    1c98:	683a      	ldr	r2, [r7, #0]
    1c9a:	430a      	orrs	r2, r1
    1c9c:	621a      	str	r2, [r3, #32]
			break;
    1c9e:	e001      	b.n	1ca4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1ca0:	2317      	movs	r3, #23
    1ca2:	e000      	b.n	1ca6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1ca4:	2300      	movs	r3, #0
}
    1ca6:	0018      	movs	r0, r3
    1ca8:	46bd      	mov	sp, r7
    1caa:	b002      	add	sp, #8
    1cac:	bd80      	pop	{r7, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	40000400 	.word	0x40000400

00001cb4 <wdt_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool wdt_is_syncing(void)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b082      	sub	sp, #8
    1cb8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1cba:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <wdt_is_syncing+0x24>)
    1cbc:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	79db      	ldrb	r3, [r3, #7]
    1cc2:	b2db      	uxtb	r3, r3
    1cc4:	b25b      	sxtb	r3, r3
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	da01      	bge.n	1cce <wdt_is_syncing+0x1a>
#endif
		return true;
    1cca:	2301      	movs	r3, #1
    1ccc:	e000      	b.n	1cd0 <wdt_is_syncing+0x1c>
	}

	return false;
    1cce:	2300      	movs	r3, #0
}
    1cd0:	0018      	movs	r0, r3
    1cd2:	46bd      	mov	sp, r7
    1cd4:	b002      	add	sp, #8
    1cd6:	bd80      	pop	{r7, pc}
    1cd8:	40001000 	.word	0x40001000

00001cdc <wdt_is_locked>:
 *  it cannot be disabled or otherwise reconfigured.
 *
 *  \return Current Watchdog lock state.
 */
static inline bool wdt_is_locked(void)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b082      	sub	sp, #8
    1ce0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1ce2:	4b07      	ldr	r3, [pc, #28]	; (1d00 <wdt_is_locked+0x24>)
    1ce4:	607b      	str	r3, [r7, #4]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	b2db      	uxtb	r3, r3
    1cec:	001a      	movs	r2, r3
    1cee:	2380      	movs	r3, #128	; 0x80
    1cf0:	4013      	ands	r3, r2
    1cf2:	1e5a      	subs	r2, r3, #1
    1cf4:	4193      	sbcs	r3, r2
    1cf6:	b2db      	uxtb	r3, r3
#endif
}
    1cf8:	0018      	movs	r0, r3
    1cfa:	46bd      	mov	sp, r7
    1cfc:	b002      	add	sp, #8
    1cfe:	bd80      	pop	{r7, pc}
    1d00:	40001000 	.word	0x40001000

00001d04 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	b086      	sub	sp, #24
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	Wdt *const WDT_module = WDT;
    1d0c:	4b54      	ldr	r3, [pc, #336]	; (1e60 <wdt_set_config+0x15c>)
    1d0e:	613b      	str	r3, [r7, #16]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);
    1d10:	2110      	movs	r1, #16
    1d12:	2000      	movs	r0, #0
    1d14:	4b53      	ldr	r3, [pc, #332]	; (1e64 <wdt_set_config+0x160>)
    1d16:	4798      	blx	r3

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    1d18:	4b53      	ldr	r3, [pc, #332]	; (1e68 <wdt_set_config+0x164>)
    1d1a:	4798      	blx	r3
    1d1c:	1e03      	subs	r3, r0, #0
    1d1e:	d001      	beq.n	1d24 <wdt_set_config+0x20>
		return STATUS_ERR_IO;
    1d20:	2310      	movs	r3, #16
    1d22:	e098      	b.n	1e56 <wdt_set_config+0x152>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	78db      	ldrb	r3, [r3, #3]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d101      	bne.n	1d30 <wdt_set_config+0x2c>
		return STATUS_ERR_INVALID_ARG;
    1d2c:	2317      	movs	r3, #23
    1d2e:	e092      	b.n	1e56 <wdt_set_config+0x152>
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	78da      	ldrb	r2, [r3, #3]
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	791b      	ldrb	r3, [r3, #4]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d305      	bcc.n	1d48 <wdt_set_config+0x44>
			(config->timeout_period < config->early_warning_period)) {
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	78da      	ldrb	r2, [r3, #3]
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	795b      	ldrb	r3, [r3, #5]
	if ((config->timeout_period < config->window_period) ||
    1d44:	429a      	cmp	r2, r3
    1d46:	d201      	bcs.n	1d4c <wdt_set_config+0x48>
		return STATUS_ERR_INVALID_ARG;
    1d48:	2317      	movs	r3, #23
    1d4a:	e084      	b.n	1e56 <wdt_set_config+0x152>
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    1d4c:	693b      	ldr	r3, [r7, #16]
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	b2db      	uxtb	r3, r3
    1d52:	2202      	movs	r2, #2
    1d54:	4393      	bics	r3, r2
    1d56:	b2da      	uxtb	r2, r3
    1d58:	693b      	ldr	r3, [r7, #16]
    1d5a:	701a      	strb	r2, [r3, #0]

	while (wdt_is_syncing()) {
    1d5c:	46c0      	nop			; (mov r8, r8)
    1d5e:	4b43      	ldr	r3, [pc, #268]	; (1e6c <wdt_set_config+0x168>)
    1d60:	4798      	blx	r3
    1d62:	1e03      	subs	r3, r0, #0
    1d64:	d1fb      	bne.n	1d5e <wdt_set_config+0x5a>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	785b      	ldrb	r3, [r3, #1]
    1d6a:	2201      	movs	r2, #1
    1d6c:	4053      	eors	r3, r2
    1d6e:	b2db      	uxtb	r3, r3
    1d70:	2b00      	cmp	r3, #0
    1d72:	d001      	beq.n	1d78 <wdt_set_config+0x74>
		return STATUS_OK;
    1d74:	2300      	movs	r3, #0
    1d76:	e06e      	b.n	1e56 <wdt_set_config+0x152>
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	789a      	ldrb	r2, [r3, #2]
    1d7c:	230c      	movs	r3, #12
    1d7e:	18fb      	adds	r3, r7, r3
    1d80:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1d82:	230c      	movs	r3, #12
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	0019      	movs	r1, r3
    1d88:	2003      	movs	r0, #3
    1d8a:	4b39      	ldr	r3, [pc, #228]	; (1e70 <wdt_set_config+0x16c>)
    1d8c:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    1d8e:	2003      	movs	r0, #3
    1d90:	4b38      	ldr	r3, [pc, #224]	; (1e74 <wdt_set_config+0x170>)
    1d92:	4798      	blx	r3
	if (config->always_on) {
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d002      	beq.n	1da2 <wdt_set_config+0x9e>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1d9c:	2003      	movs	r0, #3
    1d9e:	4b36      	ldr	r3, [pc, #216]	; (1e78 <wdt_set_config+0x174>)
    1da0:	4798      	blx	r3
	}

	uint32_t new_config = 0;
    1da2:	2300      	movs	r3, #0
    1da4:	617b      	str	r3, [r7, #20]

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	78db      	ldrb	r3, [r3, #3]
    1daa:	3b01      	subs	r3, #1
    1dac:	001a      	movs	r2, r3
    1dae:	697b      	ldr	r3, [r7, #20]
    1db0:	4313      	orrs	r3, r2
    1db2:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	791b      	ldrb	r3, [r3, #4]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d010      	beq.n	1dde <wdt_set_config+0xda>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1dbc:	693b      	ldr	r3, [r7, #16]
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	b2db      	uxtb	r3, r3
    1dc2:	2204      	movs	r2, #4
    1dc4:	4313      	orrs	r3, r2
    1dc6:	b2da      	uxtb	r2, r3
    1dc8:	693b      	ldr	r3, [r7, #16]
    1dca:	701a      	strb	r2, [r3, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	791b      	ldrb	r3, [r3, #4]
    1dd0:	3b01      	subs	r3, #1
    1dd2:	011b      	lsls	r3, r3, #4
    1dd4:	001a      	movs	r2, r3
    1dd6:	697b      	ldr	r3, [r7, #20]
    1dd8:	4313      	orrs	r3, r2
    1dda:	617b      	str	r3, [r7, #20]
    1ddc:	e007      	b.n	1dee <wdt_set_config+0xea>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    1dde:	693b      	ldr	r3, [r7, #16]
    1de0:	781b      	ldrb	r3, [r3, #0]
    1de2:	b2db      	uxtb	r3, r3
    1de4:	2204      	movs	r2, #4
    1de6:	4393      	bics	r3, r2
    1de8:	b2da      	uxtb	r2, r3
    1dea:	693b      	ldr	r3, [r7, #16]
    1dec:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	4b1e      	ldr	r3, [pc, #120]	; (1e6c <wdt_set_config+0x168>)
    1df2:	4798      	blx	r3
    1df4:	1e03      	subs	r3, r0, #0
    1df6:	d1fb      	bne.n	1df0 <wdt_set_config+0xec>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    1df8:	697b      	ldr	r3, [r7, #20]
    1dfa:	b2da      	uxtb	r2, r3
    1dfc:	693b      	ldr	r3, [r7, #16]
    1dfe:	705a      	strb	r2, [r3, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	795b      	ldrb	r3, [r3, #5]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d00a      	beq.n	1e1e <wdt_set_config+0x11a>
		while (wdt_is_syncing()) {
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	4b18      	ldr	r3, [pc, #96]	; (1e6c <wdt_set_config+0x168>)
    1e0c:	4798      	blx	r3
    1e0e:	1e03      	subs	r3, r0, #0
    1e10:	d1fb      	bne.n	1e0a <wdt_set_config+0x106>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	795b      	ldrb	r3, [r3, #5]
    1e16:	3b01      	subs	r3, #1
    1e18:	b2da      	uxtb	r2, r3
    1e1a:	693b      	ldr	r3, [r7, #16]
    1e1c:	709a      	strb	r2, [r3, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d009      	beq.n	1e3a <wdt_set_config+0x136>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1e26:	693b      	ldr	r3, [r7, #16]
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2280      	movs	r2, #128	; 0x80
    1e2e:	4252      	negs	r2, r2
    1e30:	4313      	orrs	r3, r2
    1e32:	b2da      	uxtb	r2, r3
    1e34:	693b      	ldr	r3, [r7, #16]
    1e36:	701a      	strb	r2, [r3, #0]
    1e38:	e007      	b.n	1e4a <wdt_set_config+0x146>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    1e3a:	693b      	ldr	r3, [r7, #16]
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	b2db      	uxtb	r3, r3
    1e40:	2202      	movs	r2, #2
    1e42:	4313      	orrs	r3, r2
    1e44:	b2da      	uxtb	r2, r3
    1e46:	693b      	ldr	r3, [r7, #16]
    1e48:	701a      	strb	r2, [r3, #0]
	}

	while (wdt_is_syncing()) {
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <wdt_set_config+0x168>)
    1e4e:	4798      	blx	r3
    1e50:	1e03      	subs	r3, r0, #0
    1e52:	d1fb      	bne.n	1e4c <wdt_set_config+0x148>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    1e54:	2300      	movs	r3, #0
}
    1e56:	0018      	movs	r0, r3
    1e58:	46bd      	mov	sp, r7
    1e5a:	b006      	add	sp, #24
    1e5c:	bd80      	pop	{r7, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	40001000 	.word	0x40001000
    1e64:	00001c59 	.word	0x00001c59
    1e68:	00001cdd 	.word	0x00001cdd
    1e6c:	00001cb5 	.word	0x00001cb5
    1e70:	0000189d 	.word	0x0000189d
    1e74:	000018e1 	.word	0x000018e1
    1e78:	000019c1 	.word	0x000019c1

00001e7c <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b082      	sub	sp, #8
    1e80:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
    1e82:	4b04      	ldr	r3, [pc, #16]	; (1e94 <wdt_clear_early_warning+0x18>)
    1e84:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	2201      	movs	r2, #1
    1e8a:	719a      	strb	r2, [r3, #6]
}
    1e8c:	46c0      	nop			; (mov r8, r8)
    1e8e:	46bd      	mov	sp, r7
    1e90:	b002      	add	sp, #8
    1e92:	bd80      	pop	{r7, pc}
    1e94:	40001000 	.word	0x40001000

00001e98 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b082      	sub	sp, #8
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	0002      	movs	r2, r0
    1ea0:	1dfb      	adds	r3, r7, #7
    1ea2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <system_interrupt_enable+0x28>)
    1ea6:	1dfa      	adds	r2, r7, #7
    1ea8:	7812      	ldrb	r2, [r2, #0]
    1eaa:	0011      	movs	r1, r2
    1eac:	221f      	movs	r2, #31
    1eae:	400a      	ands	r2, r1
    1eb0:	2101      	movs	r1, #1
    1eb2:	4091      	lsls	r1, r2
    1eb4:	000a      	movs	r2, r1
    1eb6:	601a      	str	r2, [r3, #0]
}
    1eb8:	46c0      	nop			; (mov r8, r8)
    1eba:	46bd      	mov	sp, r7
    1ebc:	b002      	add	sp, #8
    1ebe:	bd80      	pop	{r7, pc}
    1ec0:	e000e100 	.word	0xe000e100

00001ec4 <wdt_register_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_register_callback(
		const wdt_callback_t callback,
		const enum wdt_callback type)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
    1ecc:	000a      	movs	r2, r1
    1ece:	1cfb      	adds	r3, r7, #3
    1ed0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
    1ed2:	1cfb      	adds	r3, r7, #3
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d104      	bne.n	1ee4 <wdt_register_callback+0x20>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
    1eda:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <wdt_register_callback+0x2c>)
    1edc:	687a      	ldr	r2, [r7, #4]
    1ede:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
    1ee0:	2300      	movs	r3, #0
    1ee2:	e000      	b.n	1ee6 <wdt_register_callback+0x22>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ee4:	2317      	movs	r3, #23
	}
}
    1ee6:	0018      	movs	r0, r3
    1ee8:	46bd      	mov	sp, r7
    1eea:	b002      	add	sp, #8
    1eec:	bd80      	pop	{r7, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	20000080 	.word	0x20000080

00001ef4 <wdt_enable_callback>:
 * \retval STATUS_OK               The callback was enabled successfully
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
    1ef4:	b580      	push	{r7, lr}
    1ef6:	b084      	sub	sp, #16
    1ef8:	af00      	add	r7, sp, #0
    1efa:	0002      	movs	r2, r0
    1efc:	1dfb      	adds	r3, r7, #7
    1efe:	701a      	strb	r2, [r3, #0]
	Wdt *const WDT_module = WDT;
    1f00:	4b09      	ldr	r3, [pc, #36]	; (1f28 <wdt_enable_callback+0x34>)
    1f02:	60fb      	str	r3, [r7, #12]

	switch (type)
    1f04:	1dfb      	adds	r3, r7, #7
    1f06:	781b      	ldrb	r3, [r3, #0]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d107      	bne.n	1f1c <wdt_enable_callback+0x28>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
    1f0c:	68fb      	ldr	r3, [r7, #12]
    1f0e:	2201      	movs	r2, #1
    1f10:	715a      	strb	r2, [r3, #5]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
    1f12:	2002      	movs	r0, #2
    1f14:	4b05      	ldr	r3, [pc, #20]	; (1f2c <wdt_enable_callback+0x38>)
    1f16:	4798      	blx	r3
		return STATUS_OK;
    1f18:	2300      	movs	r3, #0
    1f1a:	e000      	b.n	1f1e <wdt_enable_callback+0x2a>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f1c:	2317      	movs	r3, #23
	}
}
    1f1e:	0018      	movs	r0, r3
    1f20:	46bd      	mov	sp, r7
    1f22:	b004      	add	sp, #16
    1f24:	bd80      	pop	{r7, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	40001000 	.word	0x40001000
    1f2c:	00001e99 	.word	0x00001e99

00001f30 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    1f30:	b580      	push	{r7, lr}
    1f32:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <WDT_Handler+0x1c>)
    1f36:	4798      	blx	r3

	if (wdt_early_warning_callback) {
    1f38:	4b05      	ldr	r3, [pc, #20]	; (1f50 <WDT_Handler+0x20>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d002      	beq.n	1f46 <WDT_Handler+0x16>
		wdt_early_warning_callback();
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <WDT_Handler+0x20>)
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	4798      	blx	r3
	}
}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00001e7d 	.word	0x00001e7d
    1f50:	20000080 	.word	0x20000080

00001f54 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	b082      	sub	sp, #8
    1f58:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1f5a:	4b2f      	ldr	r3, [pc, #188]	; (2018 <STACK_SIZE+0x18>)
    1f5c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1f5e:	4b2f      	ldr	r3, [pc, #188]	; (201c <STACK_SIZE+0x1c>)
    1f60:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1f62:	687a      	ldr	r2, [r7, #4]
    1f64:	683b      	ldr	r3, [r7, #0]
    1f66:	429a      	cmp	r2, r3
    1f68:	d00c      	beq.n	1f84 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    1f6a:	e007      	b.n	1f7c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    1f6c:	683b      	ldr	r3, [r7, #0]
    1f6e:	1d1a      	adds	r2, r3, #4
    1f70:	603a      	str	r2, [r7, #0]
    1f72:	687a      	ldr	r2, [r7, #4]
    1f74:	1d11      	adds	r1, r2, #4
    1f76:	6079      	str	r1, [r7, #4]
    1f78:	6812      	ldr	r2, [r2, #0]
    1f7a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1f7c:	683a      	ldr	r2, [r7, #0]
    1f7e:	4b28      	ldr	r3, [pc, #160]	; (2020 <STACK_SIZE+0x20>)
    1f80:	429a      	cmp	r2, r3
    1f82:	d3f3      	bcc.n	1f6c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f84:	4b27      	ldr	r3, [pc, #156]	; (2024 <STACK_SIZE+0x24>)
    1f86:	603b      	str	r3, [r7, #0]
    1f88:	e004      	b.n	1f94 <Reset_Handler+0x40>
                *pDest++ = 0;
    1f8a:	683b      	ldr	r3, [r7, #0]
    1f8c:	1d1a      	adds	r2, r3, #4
    1f8e:	603a      	str	r2, [r7, #0]
    1f90:	2200      	movs	r2, #0
    1f92:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1f94:	683a      	ldr	r2, [r7, #0]
    1f96:	4b24      	ldr	r3, [pc, #144]	; (2028 <STACK_SIZE+0x28>)
    1f98:	429a      	cmp	r2, r3
    1f9a:	d3f6      	bcc.n	1f8a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1f9c:	4b23      	ldr	r3, [pc, #140]	; (202c <STACK_SIZE+0x2c>)
    1f9e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fa0:	4b23      	ldr	r3, [pc, #140]	; (2030 <STACK_SIZE+0x30>)
    1fa2:	687a      	ldr	r2, [r7, #4]
    1fa4:	21ff      	movs	r1, #255	; 0xff
    1fa6:	438a      	bics	r2, r1
    1fa8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1faa:	4a22      	ldr	r2, [pc, #136]	; (2034 <STACK_SIZE+0x34>)
    1fac:	2390      	movs	r3, #144	; 0x90
    1fae:	005b      	lsls	r3, r3, #1
    1fb0:	2102      	movs	r1, #2
    1fb2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1fb4:	4a20      	ldr	r2, [pc, #128]	; (2038 <STACK_SIZE+0x38>)
    1fb6:	78d3      	ldrb	r3, [r2, #3]
    1fb8:	2103      	movs	r1, #3
    1fba:	438b      	bics	r3, r1
    1fbc:	1c19      	adds	r1, r3, #0
    1fbe:	2302      	movs	r3, #2
    1fc0:	430b      	orrs	r3, r1
    1fc2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1fc4:	4a1c      	ldr	r2, [pc, #112]	; (2038 <STACK_SIZE+0x38>)
    1fc6:	78d3      	ldrb	r3, [r2, #3]
    1fc8:	210c      	movs	r1, #12
    1fca:	438b      	bics	r3, r1
    1fcc:	1c19      	adds	r1, r3, #0
    1fce:	2308      	movs	r3, #8
    1fd0:	430b      	orrs	r3, r1
    1fd2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1fd4:	4a19      	ldr	r2, [pc, #100]	; (203c <STACK_SIZE+0x3c>)
    1fd6:	7b93      	ldrb	r3, [r2, #14]
    1fd8:	2130      	movs	r1, #48	; 0x30
    1fda:	438b      	bics	r3, r1
    1fdc:	1c19      	adds	r1, r3, #0
    1fde:	2320      	movs	r3, #32
    1fe0:	430b      	orrs	r3, r1
    1fe2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1fe4:	4a15      	ldr	r2, [pc, #84]	; (203c <STACK_SIZE+0x3c>)
    1fe6:	7b93      	ldrb	r3, [r2, #14]
    1fe8:	210c      	movs	r1, #12
    1fea:	438b      	bics	r3, r1
    1fec:	1c19      	adds	r1, r3, #0
    1fee:	2308      	movs	r3, #8
    1ff0:	430b      	orrs	r3, r1
    1ff2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1ff4:	4a11      	ldr	r2, [pc, #68]	; (203c <STACK_SIZE+0x3c>)
    1ff6:	7b93      	ldrb	r3, [r2, #14]
    1ff8:	2103      	movs	r1, #3
    1ffa:	438b      	bics	r3, r1
    1ffc:	1c19      	adds	r1, r3, #0
    1ffe:	2302      	movs	r3, #2
    2000:	430b      	orrs	r3, r1
    2002:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2004:	4a0e      	ldr	r2, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2006:	6853      	ldr	r3, [r2, #4]
    2008:	2180      	movs	r1, #128	; 0x80
    200a:	430b      	orrs	r3, r1
    200c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    200e:	4b0d      	ldr	r3, [pc, #52]	; (2044 <STACK_SIZE+0x44>)
    2010:	4798      	blx	r3

        /* Branch to main function */
        main();
    2012:	4b0d      	ldr	r3, [pc, #52]	; (2048 <STACK_SIZE+0x48>)
    2014:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2016:	e7fe      	b.n	2016 <STACK_SIZE+0x16>
    2018:	00002744 	.word	0x00002744
    201c:	20000000 	.word	0x20000000
    2020:	20000004 	.word	0x20000004
    2024:	20000004 	.word	0x20000004
    2028:	200000c8 	.word	0x200000c8
    202c:	00000000 	.word	0x00000000
    2030:	e000ed00 	.word	0xe000ed00
    2034:	41007000 	.word	0x41007000
    2038:	41005000 	.word	0x41005000
    203c:	41004800 	.word	0x41004800
    2040:	41004000 	.word	0x41004000
    2044:	00002665 	.word	0x00002665
    2048:	00002515 	.word	0x00002515

0000204c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    204c:	b580      	push	{r7, lr}
    204e:	af00      	add	r7, sp, #0
        while (1) {
    2050:	e7fe      	b.n	2050 <Dummy_Handler+0x4>
	...

00002054 <system_apb_clock_set_mask>:
{
    2054:	b580      	push	{r7, lr}
    2056:	b082      	sub	sp, #8
    2058:	af00      	add	r7, sp, #0
    205a:	0002      	movs	r2, r0
    205c:	6039      	str	r1, [r7, #0]
    205e:	1dfb      	adds	r3, r7, #7
    2060:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2062:	1dfb      	adds	r3, r7, #7
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2b01      	cmp	r3, #1
    2068:	d00a      	beq.n	2080 <system_apb_clock_set_mask+0x2c>
    206a:	2b02      	cmp	r3, #2
    206c:	d00f      	beq.n	208e <system_apb_clock_set_mask+0x3a>
    206e:	2b00      	cmp	r3, #0
    2070:	d114      	bne.n	209c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2072:	4b0e      	ldr	r3, [pc, #56]	; (20ac <system_apb_clock_set_mask+0x58>)
    2074:	4a0d      	ldr	r2, [pc, #52]	; (20ac <system_apb_clock_set_mask+0x58>)
    2076:	6991      	ldr	r1, [r2, #24]
    2078:	683a      	ldr	r2, [r7, #0]
    207a:	430a      	orrs	r2, r1
    207c:	619a      	str	r2, [r3, #24]
			break;
    207e:	e00f      	b.n	20a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2080:	4b0a      	ldr	r3, [pc, #40]	; (20ac <system_apb_clock_set_mask+0x58>)
    2082:	4a0a      	ldr	r2, [pc, #40]	; (20ac <system_apb_clock_set_mask+0x58>)
    2084:	69d1      	ldr	r1, [r2, #28]
    2086:	683a      	ldr	r2, [r7, #0]
    2088:	430a      	orrs	r2, r1
    208a:	61da      	str	r2, [r3, #28]
			break;
    208c:	e008      	b.n	20a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    208e:	4b07      	ldr	r3, [pc, #28]	; (20ac <system_apb_clock_set_mask+0x58>)
    2090:	4a06      	ldr	r2, [pc, #24]	; (20ac <system_apb_clock_set_mask+0x58>)
    2092:	6a11      	ldr	r1, [r2, #32]
    2094:	683a      	ldr	r2, [r7, #0]
    2096:	430a      	orrs	r2, r1
    2098:	621a      	str	r2, [r3, #32]
			break;
    209a:	e001      	b.n	20a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    209c:	2317      	movs	r3, #23
    209e:	e000      	b.n	20a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    20a0:	2300      	movs	r3, #0
}
    20a2:	0018      	movs	r0, r3
    20a4:	46bd      	mov	sp, r7
    20a6:	b002      	add	sp, #8
    20a8:	bd80      	pop	{r7, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	40000400 	.word	0x40000400

000020b0 <system_pinmux_get_group_from_gpio_pin>:
{
    20b0:	b580      	push	{r7, lr}
    20b2:	b084      	sub	sp, #16
    20b4:	af00      	add	r7, sp, #0
    20b6:	0002      	movs	r2, r0
    20b8:	1dfb      	adds	r3, r7, #7
    20ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    20bc:	230f      	movs	r3, #15
    20be:	18fb      	adds	r3, r7, r3
    20c0:	1dfa      	adds	r2, r7, #7
    20c2:	7812      	ldrb	r2, [r2, #0]
    20c4:	09d2      	lsrs	r2, r2, #7
    20c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    20c8:	230e      	movs	r3, #14
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	1dfa      	adds	r2, r7, #7
    20ce:	7812      	ldrb	r2, [r2, #0]
    20d0:	0952      	lsrs	r2, r2, #5
    20d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    20d4:	4b0d      	ldr	r3, [pc, #52]	; (210c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    20d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    20d8:	230f      	movs	r3, #15
    20da:	18fb      	adds	r3, r7, r3
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	2b00      	cmp	r3, #0
    20e0:	d10f      	bne.n	2102 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    20e2:	230f      	movs	r3, #15
    20e4:	18fb      	adds	r3, r7, r3
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	009b      	lsls	r3, r3, #2
    20ea:	2210      	movs	r2, #16
    20ec:	4694      	mov	ip, r2
    20ee:	44bc      	add	ip, r7
    20f0:	4463      	add	r3, ip
    20f2:	3b08      	subs	r3, #8
    20f4:	681a      	ldr	r2, [r3, #0]
    20f6:	230e      	movs	r3, #14
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	781b      	ldrb	r3, [r3, #0]
    20fc:	01db      	lsls	r3, r3, #7
    20fe:	18d3      	adds	r3, r2, r3
    2100:	e000      	b.n	2104 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2102:	2300      	movs	r3, #0
}
    2104:	0018      	movs	r0, r3
    2106:	46bd      	mov	sp, r7
    2108:	b004      	add	sp, #16
    210a:	bd80      	pop	{r7, pc}
    210c:	41004400 	.word	0x41004400

00002110 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    2114:	2102      	movs	r1, #2
    2116:	2001      	movs	r0, #1
    2118:	4b02      	ldr	r3, [pc, #8]	; (2124 <dsu_crc32_init+0x14>)
    211a:	4798      	blx	r3
#endif

}
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	46bd      	mov	sp, r7
    2120:	bd80      	pop	{r7, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00002055 	.word	0x00002055

00002128 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2128:	b580      	push	{r7, lr}
    212a:	b082      	sub	sp, #8
    212c:	af00      	add	r7, sp, #0
    212e:	0002      	movs	r2, r0
    2130:	1dfb      	adds	r3, r7, #7
    2132:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2134:	1dfb      	adds	r3, r7, #7
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	0018      	movs	r0, r3
    213a:	4b03      	ldr	r3, [pc, #12]	; (2148 <port_get_group_from_gpio_pin+0x20>)
    213c:	4798      	blx	r3
    213e:	0003      	movs	r3, r0
}
    2140:	0018      	movs	r0, r3
    2142:	46bd      	mov	sp, r7
    2144:	b002      	add	sp, #8
    2146:	bd80      	pop	{r7, pc}
    2148:	000020b1 	.word	0x000020b1

0000214c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    214c:	b580      	push	{r7, lr}
    214e:	b082      	sub	sp, #8
    2150:	af00      	add	r7, sp, #0
    2152:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	2200      	movs	r2, #0
    2158:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	2201      	movs	r2, #1
    215e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2200      	movs	r2, #0
    2164:	709a      	strb	r2, [r3, #2]
}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	46bd      	mov	sp, r7
    216a:	b002      	add	sp, #8
    216c:	bd80      	pop	{r7, pc}
	...

00002170 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2170:	b580      	push	{r7, lr}
    2172:	b084      	sub	sp, #16
    2174:	af00      	add	r7, sp, #0
    2176:	0002      	movs	r2, r0
    2178:	1dfb      	adds	r3, r7, #7
    217a:	701a      	strb	r2, [r3, #0]
    217c:	1dbb      	adds	r3, r7, #6
    217e:	1c0a      	adds	r2, r1, #0
    2180:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2182:	1dfb      	adds	r3, r7, #7
    2184:	781b      	ldrb	r3, [r3, #0]
    2186:	0018      	movs	r0, r3
    2188:	4b0d      	ldr	r3, [pc, #52]	; (21c0 <port_pin_set_output_level+0x50>)
    218a:	4798      	blx	r3
    218c:	0003      	movs	r3, r0
    218e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2190:	1dfb      	adds	r3, r7, #7
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	221f      	movs	r2, #31
    2196:	4013      	ands	r3, r2
    2198:	2201      	movs	r2, #1
    219a:	409a      	lsls	r2, r3
    219c:	0013      	movs	r3, r2
    219e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    21a0:	1dbb      	adds	r3, r7, #6
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d003      	beq.n	21b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    21a8:	68fb      	ldr	r3, [r7, #12]
    21aa:	68ba      	ldr	r2, [r7, #8]
    21ac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    21ae:	e002      	b.n	21b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    21b0:	68fb      	ldr	r3, [r7, #12]
    21b2:	68ba      	ldr	r2, [r7, #8]
    21b4:	615a      	str	r2, [r3, #20]
}
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	46bd      	mov	sp, r7
    21ba:	b004      	add	sp, #16
    21bc:	bd80      	pop	{r7, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	00002129 	.word	0x00002129

000021c4 <system_interrupt_enable>:
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b082      	sub	sp, #8
    21c8:	af00      	add	r7, sp, #0
    21ca:	0002      	movs	r2, r0
    21cc:	1dfb      	adds	r3, r7, #7
    21ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21d0:	4b06      	ldr	r3, [pc, #24]	; (21ec <system_interrupt_enable+0x28>)
    21d2:	1dfa      	adds	r2, r7, #7
    21d4:	7812      	ldrb	r2, [r2, #0]
    21d6:	0011      	movs	r1, r2
    21d8:	221f      	movs	r2, #31
    21da:	400a      	ands	r2, r1
    21dc:	2101      	movs	r1, #1
    21de:	4091      	lsls	r1, r2
    21e0:	000a      	movs	r2, r1
    21e2:	601a      	str	r2, [r3, #0]
}
    21e4:	46c0      	nop			; (mov r8, r8)
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	e000e100 	.word	0xe000e100

000021f0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	69db      	ldr	r3, [r3, #28]
    2202:	1e5a      	subs	r2, r3, #1
    2204:	4193      	sbcs	r3, r2
    2206:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2208:	0018      	movs	r0, r3
    220a:	46bd      	mov	sp, r7
    220c:	b004      	add	sp, #16
    220e:	bd80      	pop	{r7, pc}

00002210 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2210:	b580      	push	{r7, lr}
    2212:	b082      	sub	sp, #8
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	2201      	movs	r2, #1
    221c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	2200      	movs	r2, #0
    2222:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	2200      	movs	r2, #0
    2228:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	22c0      	movs	r2, #192	; 0xc0
    222e:	0392      	lsls	r2, r2, #14
    2230:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2201      	movs	r2, #1
    2242:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2201      	movs	r2, #1
    2248:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2224      	movs	r2, #36	; 0x24
    2254:	2100      	movs	r1, #0
    2256:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	3318      	adds	r3, #24
    225c:	220c      	movs	r2, #12
    225e:	2100      	movs	r1, #0
    2260:	0018      	movs	r0, r3
    2262:	4b0a      	ldr	r3, [pc, #40]	; (228c <spi_get_config_defaults+0x7c>)
    2264:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	4a09      	ldr	r2, [pc, #36]	; (2290 <spi_get_config_defaults+0x80>)
    226a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	2200      	movs	r2, #0
    2270:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	2200      	movs	r2, #0
    2276:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	2200      	movs	r2, #0
    227c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	2200      	movs	r2, #0
    2282:	635a      	str	r2, [r3, #52]	; 0x34

};
    2284:	46c0      	nop			; (mov r8, r8)
    2286:	46bd      	mov	sp, r7
    2288:	b002      	add	sp, #8
    228a:	bd80      	pop	{r7, pc}
    228c:	000026ad 	.word	0x000026ad
    2290:	000186a0 	.word	0x000186a0

00002294 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2294:	b580      	push	{r7, lr}
    2296:	b084      	sub	sp, #16
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	0018      	movs	r0, r3
    22a8:	4b0b      	ldr	r3, [pc, #44]	; (22d8 <spi_enable+0x44>)
    22aa:	4798      	blx	r3
    22ac:	0003      	movs	r3, r0
    22ae:	0018      	movs	r0, r3
    22b0:	4b0a      	ldr	r3, [pc, #40]	; (22dc <spi_enable+0x48>)
    22b2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    22b4:	46c0      	nop			; (mov r8, r8)
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	0018      	movs	r0, r3
    22ba:	4b09      	ldr	r3, [pc, #36]	; (22e0 <spi_enable+0x4c>)
    22bc:	4798      	blx	r3
    22be:	1e03      	subs	r3, r0, #0
    22c0:	d1f9      	bne.n	22b6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	2202      	movs	r2, #2
    22c8:	431a      	orrs	r2, r3
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	601a      	str	r2, [r3, #0]
}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	46bd      	mov	sp, r7
    22d2:	b004      	add	sp, #16
    22d4:	bd80      	pop	{r7, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00000745 	.word	0x00000745
    22dc:	000021c5 	.word	0x000021c5
    22e0:	000021f1 	.word	0x000021f1

000022e4 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    22e4:	b580      	push	{r7, lr}
    22e6:	b086      	sub	sp, #24
    22e8:	af00      	add	r7, sp, #0
    22ea:	60f8      	str	r0, [r7, #12]
    22ec:	60b9      	str	r1, [r7, #8]
    22ee:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    22f0:	687b      	ldr	r3, [r7, #4]
    22f2:	781a      	ldrb	r2, [r3, #0]
    22f4:	68fb      	ldr	r3, [r7, #12]
    22f6:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	785a      	ldrb	r2, [r3, #1]
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    2300:	68fb      	ldr	r3, [r7, #12]
    2302:	68ba      	ldr	r2, [r7, #8]
    2304:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    2306:	2314      	movs	r3, #20
    2308:	18fb      	adds	r3, r7, r3
    230a:	0018      	movs	r0, r3
    230c:	4b0c      	ldr	r3, [pc, #48]	; (2340 <at25dfx_chip_init+0x5c>)
    230e:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    2310:	2314      	movs	r3, #20
    2312:	18fb      	adds	r3, r7, r3
    2314:	2201      	movs	r2, #1
    2316:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    2318:	68fb      	ldr	r3, [r7, #12]
    231a:	795b      	ldrb	r3, [r3, #5]
    231c:	2214      	movs	r2, #20
    231e:	18ba      	adds	r2, r7, r2
    2320:	0011      	movs	r1, r2
    2322:	0018      	movs	r0, r3
    2324:	4b07      	ldr	r3, [pc, #28]	; (2344 <at25dfx_chip_init+0x60>)
    2326:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	795b      	ldrb	r3, [r3, #5]
    232c:	2101      	movs	r1, #1
    232e:	0018      	movs	r0, r3
    2330:	4b05      	ldr	r3, [pc, #20]	; (2348 <at25dfx_chip_init+0x64>)
    2332:	4798      	blx	r3

	return STATUS_OK;
    2334:	2300      	movs	r3, #0
}
    2336:	0018      	movs	r0, r3
    2338:	46bd      	mov	sp, r7
    233a:	b006      	add	sp, #24
    233c:	bd80      	pop	{r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	0000214d 	.word	0x0000214d
    2344:	00000299 	.word	0x00000299
    2348:	00002171 	.word	0x00002171

0000234c <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    234c:	b580      	push	{r7, lr}
    234e:	b082      	sub	sp, #8
    2350:	af00      	add	r7, sp, #0
    2352:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	2201      	movs	r2, #1
    235e:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2360:	4b08      	ldr	r3, [pc, #32]	; (2384 <nvm_get_config_defaults+0x38>)
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	06db      	lsls	r3, r3, #27
    2366:	0f1b      	lsrs	r3, r3, #28
    2368:	b2db      	uxtb	r3, r3
    236a:	001a      	movs	r2, r3
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	2200      	movs	r2, #0
    2374:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	2200      	movs	r2, #0
    237a:	711a      	strb	r2, [r3, #4]
}
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	46bd      	mov	sp, r7
    2380:	b002      	add	sp, #8
    2382:	bd80      	pop	{r7, pc}
    2384:	41004000 	.word	0x41004000

00002388 <wdt_get_config_defaults>:
{
    2388:	b580      	push	{r7, lr}
    238a:	b082      	sub	sp, #8
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
	config->always_on            = false;
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	2200      	movs	r2, #0
    2394:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	2201      	movs	r2, #1
    239a:	705a      	strb	r2, [r3, #1]
	config->clock_source         = GCLK_GENERATOR_4;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	2204      	movs	r2, #4
    23a0:	709a      	strb	r2, [r3, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	220c      	movs	r2, #12
    23a6:	70da      	strb	r2, [r3, #3]
	config->window_period        = WDT_PERIOD_NONE;
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2200      	movs	r2, #0
    23ac:	711a      	strb	r2, [r3, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	2200      	movs	r2, #0
    23b2:	715a      	strb	r2, [r3, #5]
}
    23b4:	46c0      	nop			; (mov r8, r8)
    23b6:	46bd      	mov	sp, r7
    23b8:	b002      	add	sp, #8
    23ba:	bd80      	pop	{r7, pc}

000023bc <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = { 0 };
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    23bc:	b590      	push	{r4, r7, lr}
    23be:	b091      	sub	sp, #68	; 0x44
    23c0:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    23c2:	1d3b      	adds	r3, r7, #4
    23c4:	0018      	movs	r0, r3
    23c6:	4b1d      	ldr	r3, [pc, #116]	; (243c <at25dfx_init+0x80>)
    23c8:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    23ca:	1d3b      	adds	r3, r7, #4
    23cc:	4a1c      	ldr	r2, [pc, #112]	; (2440 <at25dfx_init+0x84>)
    23ce:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    23d0:	1d3b      	adds	r3, r7, #4
    23d2:	2280      	movs	r2, #128	; 0x80
    23d4:	0252      	lsls	r2, r2, #9
    23d6:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    23d8:	1d3b      	adds	r3, r7, #4
    23da:	4a1a      	ldr	r2, [pc, #104]	; (2444 <at25dfx_init+0x88>)
    23dc:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    23de:	1d3b      	adds	r3, r7, #4
    23e0:	2201      	movs	r2, #1
    23e2:	4252      	negs	r2, r2
    23e4:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    23e6:	1d3b      	adds	r3, r7, #4
    23e8:	4a17      	ldr	r2, [pc, #92]	; (2448 <at25dfx_init+0x8c>)
    23ea:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    23ec:	1d3b      	adds	r3, r7, #4
    23ee:	4a17      	ldr	r2, [pc, #92]	; (244c <at25dfx_init+0x90>)
    23f0:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    23f2:	233f      	movs	r3, #63	; 0x3f
    23f4:	18fc      	adds	r4, r7, r3
    23f6:	1d3a      	adds	r2, r7, #4
    23f8:	4915      	ldr	r1, [pc, #84]	; (2450 <at25dfx_init+0x94>)
    23fa:	4b16      	ldr	r3, [pc, #88]	; (2454 <at25dfx_init+0x98>)
    23fc:	0018      	movs	r0, r3
    23fe:	4b16      	ldr	r3, [pc, #88]	; (2458 <at25dfx_init+0x9c>)
    2400:	4798      	blx	r3
    2402:	0003      	movs	r3, r0
    2404:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    2406:	4b13      	ldr	r3, [pc, #76]	; (2454 <at25dfx_init+0x98>)
    2408:	0018      	movs	r0, r3
    240a:	4b14      	ldr	r3, [pc, #80]	; (245c <at25dfx_init+0xa0>)
    240c:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    240e:	233c      	movs	r3, #60	; 0x3c
    2410:	18fb      	adds	r3, r7, r3
    2412:	2204      	movs	r2, #4
    2414:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PIN_PA07; // AT25DFX_CS;
    2416:	233c      	movs	r3, #60	; 0x3c
    2418:	18fb      	adds	r3, r7, r3
    241a:	2207      	movs	r2, #7
    241c:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    241e:	233f      	movs	r3, #63	; 0x3f
    2420:	18fc      	adds	r4, r7, r3
    2422:	233c      	movs	r3, #60	; 0x3c
    2424:	18fa      	adds	r2, r7, r3
    2426:	490b      	ldr	r1, [pc, #44]	; (2454 <at25dfx_init+0x98>)
    2428:	4b0d      	ldr	r3, [pc, #52]	; (2460 <at25dfx_init+0xa4>)
    242a:	0018      	movs	r0, r3
    242c:	4b0d      	ldr	r3, [pc, #52]	; (2464 <at25dfx_init+0xa8>)
    242e:	4798      	blx	r3
    2430:	0003      	movs	r3, r0
    2432:	7023      	strb	r3, [r4, #0]
}
    2434:	46c0      	nop			; (mov r8, r8)
    2436:	46bd      	mov	sp, r7
    2438:	b011      	add	sp, #68	; 0x44
    243a:	bd90      	pop	{r4, r7, pc}
    243c:	00002211 	.word	0x00002211
    2440:	0001d4c0 	.word	0x0001d4c0
    2444:	00100002 	.word	0x00100002
    2448:	00120002 	.word	0x00120002
    244c:	00130002 	.word	0x00130002
    2450:	42000c00 	.word	0x42000c00
    2454:	2000008c 	.word	0x2000008c
    2458:	00000b25 	.word	0x00000b25
    245c:	00002295 	.word	0x00002295
    2460:	20000084 	.word	0x20000084
    2464:	000022e5 	.word	0x000022e5

00002468 <watchdog_early_warning_callback>:

void watchdog_early_warning_callback(void)
{
    2468:	b580      	push	{r7, lr}
    246a:	af00      	add	r7, sp, #0
    port_pin_set_output_level(PIN_PA23, false);
    246c:	2100      	movs	r1, #0
    246e:	2017      	movs	r0, #23
    2470:	4b02      	ldr	r3, [pc, #8]	; (247c <watchdog_early_warning_callback+0x14>)
    2472:	4798      	blx	r3
}
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46bd      	mov	sp, r7
    2478:	bd80      	pop	{r7, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	00002171 	.word	0x00002171

00002480 <configure_wdt>:
void configure_wdt(void)
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    /* Create a new configuration structure for the Watchdog settings and fill
     * with the default module settings. */
    struct wdt_conf config_wdt;
    wdt_get_config_defaults(&config_wdt);
    2486:	003b      	movs	r3, r7
    2488:	0018      	movs	r0, r3
    248a:	4b0b      	ldr	r3, [pc, #44]	; (24b8 <configure_wdt+0x38>)
    248c:	4798      	blx	r3
	
    /* Set the Watchdog configuration settings */
    config_wdt.always_on            = false;
    248e:	003b      	movs	r3, r7
    2490:	2200      	movs	r2, #0
    2492:	701a      	strb	r2, [r3, #0]
    config_wdt.clock_source         = GCLK_GENERATOR_4;
    2494:	003b      	movs	r3, r7
    2496:	2204      	movs	r2, #4
    2498:	709a      	strb	r2, [r3, #2]
    config_wdt.timeout_period       = WDT_PERIOD_4096CLK;
    249a:	003b      	movs	r3, r7
    249c:	220a      	movs	r2, #10
    249e:	70da      	strb	r2, [r3, #3]
    config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
    24a0:	003b      	movs	r3, r7
    24a2:	2209      	movs	r2, #9
    24a4:	715a      	strb	r2, [r3, #5]
	
    /* Initialize and enable the Watchdog with the user settings */
    wdt_set_config(&config_wdt);
    24a6:	003b      	movs	r3, r7
    24a8:	0018      	movs	r0, r3
    24aa:	4b04      	ldr	r3, [pc, #16]	; (24bc <configure_wdt+0x3c>)
    24ac:	4798      	blx	r3
}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	46bd      	mov	sp, r7
    24b2:	b002      	add	sp, #8
    24b4:	bd80      	pop	{r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00002389 	.word	0x00002389
    24bc:	00001d05 	.word	0x00001d05

000024c0 <configure_wdt_callbacks>:
void configure_wdt_callbacks(void)
{
    24c0:	b580      	push	{r7, lr}
    24c2:	af00      	add	r7, sp, #0
    wdt_register_callback(watchdog_early_warning_callback,
    24c4:	4b05      	ldr	r3, [pc, #20]	; (24dc <configure_wdt_callbacks+0x1c>)
    24c6:	2100      	movs	r1, #0
    24c8:	0018      	movs	r0, r3
    24ca:	4b05      	ldr	r3, [pc, #20]	; (24e0 <configure_wdt_callbacks+0x20>)
    24cc:	4798      	blx	r3
        WDT_CALLBACK_EARLY_WARNING);
    wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    24ce:	2000      	movs	r0, #0
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <configure_wdt_callbacks+0x24>)
    24d2:	4798      	blx	r3
}
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	46bd      	mov	sp, r7
    24d8:	bd80      	pop	{r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	00002469 	.word	0x00002469
    24e0:	00001ec5 	.word	0x00001ec5
    24e4:	00001ef5 	.word	0x00001ef5

000024e8 <nvm_init>:

void nvm_init(void)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	b082      	sub	sp, #8
    24ec:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
    24ee:	003b      	movs	r3, r7
    24f0:	0018      	movs	r0, r3
    24f2:	4b06      	ldr	r3, [pc, #24]	; (250c <nvm_init+0x24>)
    24f4:	4798      	blx	r3
	config_nvm.manual_page_write = false;
    24f6:	003b      	movs	r3, r7
    24f8:	2200      	movs	r2, #0
    24fa:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config_nvm);
    24fc:	003b      	movs	r3, r7
    24fe:	0018      	movs	r0, r3
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <nvm_init+0x28>)
    2502:	4798      	blx	r3
}
    2504:	46c0      	nop			; (mov r8, r8)
    2506:	46bd      	mov	sp, r7
    2508:	b002      	add	sp, #8
    250a:	bd80      	pop	{r7, pc}
    250c:	0000234d 	.word	0x0000234d
    2510:	00000199 	.word	0x00000199

00002514 <main>:
	ret = check_nvm_application_crc(am.crc, APPLICATION_ROW, am.data_len);
	
	return ret;
}

int main (void) {	
    2514:	b580      	push	{r7, lr}
    2516:	b084      	sub	sp, #16
    2518:	af00      	add	r7, sp, #0
	enum status_code status;
	
	// Initialize
	system_init();
    251a:	4b06      	ldr	r3, [pc, #24]	; (2534 <main+0x20>)
    251c:	4798      	blx	r3
	nvm_init();
    251e:	4b06      	ldr	r3, [pc, #24]	; (2538 <main+0x24>)
    2520:	4798      	blx	r3
	at25dfx_init();
    2522:	4b06      	ldr	r3, [pc, #24]	; (253c <main+0x28>)
    2524:	4798      	blx	r3
	dsu_crc32_init();
    2526:	4b06      	ldr	r3, [pc, #24]	; (2540 <main+0x2c>)
    2528:	4798      	blx	r3
	// Enable watchdogs, kick by calling wdt_reset_count() -- Only when ready! Already tested.
	configure_wdt();
    252a:	4b06      	ldr	r3, [pc, #24]	; (2544 <main+0x30>)
    252c:	4798      	blx	r3
	configure_wdt_callbacks();
    252e:	4b06      	ldr	r3, [pc, #24]	; (2548 <main+0x34>)
    2530:	4798      	blx	r3
	
	while(true) { }
    2532:	e7fe      	b.n	2532 <main+0x1e>
    2534:	00001c25 	.word	0x00001c25
    2538:	000024e9 	.word	0x000024e9
    253c:	000023bd 	.word	0x000023bd
    2540:	00002111 	.word	0x00002111
    2544:	00002481 	.word	0x00002481
    2548:	000024c1 	.word	0x000024c1

0000254c <__udivsi3>:
    254c:	2200      	movs	r2, #0
    254e:	0843      	lsrs	r3, r0, #1
    2550:	428b      	cmp	r3, r1
    2552:	d374      	bcc.n	263e <__udivsi3+0xf2>
    2554:	0903      	lsrs	r3, r0, #4
    2556:	428b      	cmp	r3, r1
    2558:	d35f      	bcc.n	261a <__udivsi3+0xce>
    255a:	0a03      	lsrs	r3, r0, #8
    255c:	428b      	cmp	r3, r1
    255e:	d344      	bcc.n	25ea <__udivsi3+0x9e>
    2560:	0b03      	lsrs	r3, r0, #12
    2562:	428b      	cmp	r3, r1
    2564:	d328      	bcc.n	25b8 <__udivsi3+0x6c>
    2566:	0c03      	lsrs	r3, r0, #16
    2568:	428b      	cmp	r3, r1
    256a:	d30d      	bcc.n	2588 <__udivsi3+0x3c>
    256c:	22ff      	movs	r2, #255	; 0xff
    256e:	0209      	lsls	r1, r1, #8
    2570:	ba12      	rev	r2, r2
    2572:	0c03      	lsrs	r3, r0, #16
    2574:	428b      	cmp	r3, r1
    2576:	d302      	bcc.n	257e <__udivsi3+0x32>
    2578:	1212      	asrs	r2, r2, #8
    257a:	0209      	lsls	r1, r1, #8
    257c:	d065      	beq.n	264a <__udivsi3+0xfe>
    257e:	0b03      	lsrs	r3, r0, #12
    2580:	428b      	cmp	r3, r1
    2582:	d319      	bcc.n	25b8 <__udivsi3+0x6c>
    2584:	e000      	b.n	2588 <__udivsi3+0x3c>
    2586:	0a09      	lsrs	r1, r1, #8
    2588:	0bc3      	lsrs	r3, r0, #15
    258a:	428b      	cmp	r3, r1
    258c:	d301      	bcc.n	2592 <__udivsi3+0x46>
    258e:	03cb      	lsls	r3, r1, #15
    2590:	1ac0      	subs	r0, r0, r3
    2592:	4152      	adcs	r2, r2
    2594:	0b83      	lsrs	r3, r0, #14
    2596:	428b      	cmp	r3, r1
    2598:	d301      	bcc.n	259e <__udivsi3+0x52>
    259a:	038b      	lsls	r3, r1, #14
    259c:	1ac0      	subs	r0, r0, r3
    259e:	4152      	adcs	r2, r2
    25a0:	0b43      	lsrs	r3, r0, #13
    25a2:	428b      	cmp	r3, r1
    25a4:	d301      	bcc.n	25aa <__udivsi3+0x5e>
    25a6:	034b      	lsls	r3, r1, #13
    25a8:	1ac0      	subs	r0, r0, r3
    25aa:	4152      	adcs	r2, r2
    25ac:	0b03      	lsrs	r3, r0, #12
    25ae:	428b      	cmp	r3, r1
    25b0:	d301      	bcc.n	25b6 <__udivsi3+0x6a>
    25b2:	030b      	lsls	r3, r1, #12
    25b4:	1ac0      	subs	r0, r0, r3
    25b6:	4152      	adcs	r2, r2
    25b8:	0ac3      	lsrs	r3, r0, #11
    25ba:	428b      	cmp	r3, r1
    25bc:	d301      	bcc.n	25c2 <__udivsi3+0x76>
    25be:	02cb      	lsls	r3, r1, #11
    25c0:	1ac0      	subs	r0, r0, r3
    25c2:	4152      	adcs	r2, r2
    25c4:	0a83      	lsrs	r3, r0, #10
    25c6:	428b      	cmp	r3, r1
    25c8:	d301      	bcc.n	25ce <__udivsi3+0x82>
    25ca:	028b      	lsls	r3, r1, #10
    25cc:	1ac0      	subs	r0, r0, r3
    25ce:	4152      	adcs	r2, r2
    25d0:	0a43      	lsrs	r3, r0, #9
    25d2:	428b      	cmp	r3, r1
    25d4:	d301      	bcc.n	25da <__udivsi3+0x8e>
    25d6:	024b      	lsls	r3, r1, #9
    25d8:	1ac0      	subs	r0, r0, r3
    25da:	4152      	adcs	r2, r2
    25dc:	0a03      	lsrs	r3, r0, #8
    25de:	428b      	cmp	r3, r1
    25e0:	d301      	bcc.n	25e6 <__udivsi3+0x9a>
    25e2:	020b      	lsls	r3, r1, #8
    25e4:	1ac0      	subs	r0, r0, r3
    25e6:	4152      	adcs	r2, r2
    25e8:	d2cd      	bcs.n	2586 <__udivsi3+0x3a>
    25ea:	09c3      	lsrs	r3, r0, #7
    25ec:	428b      	cmp	r3, r1
    25ee:	d301      	bcc.n	25f4 <__udivsi3+0xa8>
    25f0:	01cb      	lsls	r3, r1, #7
    25f2:	1ac0      	subs	r0, r0, r3
    25f4:	4152      	adcs	r2, r2
    25f6:	0983      	lsrs	r3, r0, #6
    25f8:	428b      	cmp	r3, r1
    25fa:	d301      	bcc.n	2600 <__udivsi3+0xb4>
    25fc:	018b      	lsls	r3, r1, #6
    25fe:	1ac0      	subs	r0, r0, r3
    2600:	4152      	adcs	r2, r2
    2602:	0943      	lsrs	r3, r0, #5
    2604:	428b      	cmp	r3, r1
    2606:	d301      	bcc.n	260c <__udivsi3+0xc0>
    2608:	014b      	lsls	r3, r1, #5
    260a:	1ac0      	subs	r0, r0, r3
    260c:	4152      	adcs	r2, r2
    260e:	0903      	lsrs	r3, r0, #4
    2610:	428b      	cmp	r3, r1
    2612:	d301      	bcc.n	2618 <__udivsi3+0xcc>
    2614:	010b      	lsls	r3, r1, #4
    2616:	1ac0      	subs	r0, r0, r3
    2618:	4152      	adcs	r2, r2
    261a:	08c3      	lsrs	r3, r0, #3
    261c:	428b      	cmp	r3, r1
    261e:	d301      	bcc.n	2624 <__udivsi3+0xd8>
    2620:	00cb      	lsls	r3, r1, #3
    2622:	1ac0      	subs	r0, r0, r3
    2624:	4152      	adcs	r2, r2
    2626:	0883      	lsrs	r3, r0, #2
    2628:	428b      	cmp	r3, r1
    262a:	d301      	bcc.n	2630 <__udivsi3+0xe4>
    262c:	008b      	lsls	r3, r1, #2
    262e:	1ac0      	subs	r0, r0, r3
    2630:	4152      	adcs	r2, r2
    2632:	0843      	lsrs	r3, r0, #1
    2634:	428b      	cmp	r3, r1
    2636:	d301      	bcc.n	263c <__udivsi3+0xf0>
    2638:	004b      	lsls	r3, r1, #1
    263a:	1ac0      	subs	r0, r0, r3
    263c:	4152      	adcs	r2, r2
    263e:	1a41      	subs	r1, r0, r1
    2640:	d200      	bcs.n	2644 <__udivsi3+0xf8>
    2642:	4601      	mov	r1, r0
    2644:	4152      	adcs	r2, r2
    2646:	4610      	mov	r0, r2
    2648:	4770      	bx	lr
    264a:	e7ff      	b.n	264c <__udivsi3+0x100>
    264c:	b501      	push	{r0, lr}
    264e:	2000      	movs	r0, #0
    2650:	f000 f806 	bl	2660 <__aeabi_idiv0>
    2654:	bd02      	pop	{r1, pc}
    2656:	46c0      	nop			; (mov r8, r8)

00002658 <__aeabi_uidivmod>:
    2658:	2900      	cmp	r1, #0
    265a:	d0f7      	beq.n	264c <__udivsi3+0x100>
    265c:	e776      	b.n	254c <__udivsi3>
    265e:	4770      	bx	lr

00002660 <__aeabi_idiv0>:
    2660:	4770      	bx	lr
    2662:	46c0      	nop			; (mov r8, r8)

00002664 <__libc_init_array>:
    2664:	b570      	push	{r4, r5, r6, lr}
    2666:	2600      	movs	r6, #0
    2668:	4d0c      	ldr	r5, [pc, #48]	; (269c <__libc_init_array+0x38>)
    266a:	4c0d      	ldr	r4, [pc, #52]	; (26a0 <__libc_init_array+0x3c>)
    266c:	1b64      	subs	r4, r4, r5
    266e:	10a4      	asrs	r4, r4, #2
    2670:	42a6      	cmp	r6, r4
    2672:	d109      	bne.n	2688 <__libc_init_array+0x24>
    2674:	2600      	movs	r6, #0
    2676:	f000 f855 	bl	2724 <_init>
    267a:	4d0a      	ldr	r5, [pc, #40]	; (26a4 <__libc_init_array+0x40>)
    267c:	4c0a      	ldr	r4, [pc, #40]	; (26a8 <__libc_init_array+0x44>)
    267e:	1b64      	subs	r4, r4, r5
    2680:	10a4      	asrs	r4, r4, #2
    2682:	42a6      	cmp	r6, r4
    2684:	d105      	bne.n	2692 <__libc_init_array+0x2e>
    2686:	bd70      	pop	{r4, r5, r6, pc}
    2688:	00b3      	lsls	r3, r6, #2
    268a:	58eb      	ldr	r3, [r5, r3]
    268c:	4798      	blx	r3
    268e:	3601      	adds	r6, #1
    2690:	e7ee      	b.n	2670 <__libc_init_array+0xc>
    2692:	00b3      	lsls	r3, r6, #2
    2694:	58eb      	ldr	r3, [r5, r3]
    2696:	4798      	blx	r3
    2698:	3601      	adds	r6, #1
    269a:	e7f2      	b.n	2682 <__libc_init_array+0x1e>
    269c:	00002730 	.word	0x00002730
    26a0:	00002730 	.word	0x00002730
    26a4:	00002730 	.word	0x00002730
    26a8:	00002734 	.word	0x00002734

000026ac <memset>:
    26ac:	0003      	movs	r3, r0
    26ae:	1882      	adds	r2, r0, r2
    26b0:	4293      	cmp	r3, r2
    26b2:	d100      	bne.n	26b6 <memset+0xa>
    26b4:	4770      	bx	lr
    26b6:	7019      	strb	r1, [r3, #0]
    26b8:	3301      	adds	r3, #1
    26ba:	e7f9      	b.n	26b0 <memset+0x4>
    26bc:	42000800 	.word	0x42000800
    26c0:	42000c00 	.word	0x42000c00
    26c4:	42001000 	.word	0x42001000
    26c8:	42001400 	.word	0x42001400
    26cc:	42001800 	.word	0x42001800
    26d0:	42001c00 	.word	0x42001c00
    26d4:	0c0b0a09 	.word	0x0c0b0a09
    26d8:	00000e0d 	.word	0x00000e0d
    26dc:	000012a2 	.word	0x000012a2
    26e0:	0000131a 	.word	0x0000131a
    26e4:	0000131a 	.word	0x0000131a
    26e8:	000012c0 	.word	0x000012c0
    26ec:	000012ba 	.word	0x000012ba
    26f0:	000012c6 	.word	0x000012c6
    26f4:	000012a8 	.word	0x000012a8
    26f8:	000012cc 	.word	0x000012cc
    26fc:	00001300 	.word	0x00001300
    2700:	000013f4 	.word	0x000013f4
    2704:	00001444 	.word	0x00001444
    2708:	00001444 	.word	0x00001444
    270c:	00001440 	.word	0x00001440
    2710:	000013e6 	.word	0x000013e6
    2714:	00001406 	.word	0x00001406
    2718:	000013d6 	.word	0x000013d6
    271c:	00001418 	.word	0x00001418
    2720:	0000142a 	.word	0x0000142a

00002724 <_init>:
    2724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	bcf8      	pop	{r3, r4, r5, r6, r7}
    272a:	bc08      	pop	{r3}
    272c:	469e      	mov	lr, r3
    272e:	4770      	bx	lr

00002730 <__init_array_start>:
    2730:	000000dd 	.word	0x000000dd

00002734 <_fini>:
    2734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	bcf8      	pop	{r3, r4, r5, r6, r7}
    273a:	bc08      	pop	{r3}
    273c:	469e      	mov	lr, r3
    273e:	4770      	bx	lr

00002740 <__fini_array_start>:
    2740:	000000b5 	.word	0x000000b5
