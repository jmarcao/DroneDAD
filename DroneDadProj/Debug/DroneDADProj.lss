
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a88c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000238  20000000  0000a88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023c  20000238  0000aac4  00020238  2**2
                  ALLOC
  3 .stack        00002004  20000474  0000ad00  00020238  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  6 .debug_info   00043b29  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b90  00000000  00000000  00063de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003e98  00000000  00000000  00068972  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  0006c80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009f8  00000000  00000000  0006d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dc76  00000000  00000000  0006dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001353e  00000000  00000000  0008ba10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ef62  00000000  00000000  0009ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000034dc  00000000  00000000  0012deb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 24 00 20 39 5a 00 00 31 5b 00 00 31 5b 00 00     x$. 9Z..1[..1[..
	...
      2c:	31 5b 00 00 00 00 00 00 00 00 00 00 31 5b 00 00     1[..........1[..
      3c:	31 5b 00 00 31 5b 00 00 31 5b 00 00 31 5b 00 00     1[..1[..1[..1[..
      4c:	31 5b 00 00 25 35 00 00 31 5b 00 00 31 5b 00 00     1[..%5..1[..1[..
      5c:	31 5b 00 00 31 5b 00 00 d5 3e 00 00 ed 3e 00 00     1[..1[...>...>..
      6c:	05 3f 00 00 1d 3f 00 00 35 3f 00 00 4d 3f 00 00     .?...?..5?..M?..
      7c:	31 5b 00 00 31 5b 00 00 31 5b 00 00 31 5b 00 00     1[..1[..1[..1[..
      8c:	31 5b 00 00 31 5b 00 00 00 00 00 00 00 00 00 00     1[..1[..........
      9c:	75 0c 00 00 31 5b 00 00 31 5b 00 00 31 5b 00 00     u...1[..1[..1[..
      ac:	31 5b 00 00 00 00 00 00                             1[......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000238 	.word	0x20000238
      d4:	00000000 	.word	0x00000000
      d8:	0000a88c 	.word	0x0000a88c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000023c 	.word	0x2000023c
     108:	0000a88c 	.word	0x0000a88c
     10c:	0000a88c 	.word	0x0000a88c
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	7e5b      	ldrb	r3, [r3, #25]
     152:	b2db      	uxtb	r3, r3
     154:	b25b      	sxtb	r3, r3
     156:	2b00      	cmp	r3, #0
     158:	da01      	bge.n	15e <adc_is_syncing+0x1e>
		return true;
     15a:	2301      	movs	r3, #1
     15c:	e000      	b.n	160 <adc_is_syncing+0x20>
	}

	return false;
     15e:	2300      	movs	r3, #0
}
     160:	0018      	movs	r0, r3
     162:	46bd      	mov	sp, r7
     164:	b004      	add	sp, #16
     166:	bd80      	pop	{r7, pc}

00000168 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
     168:	b580      	push	{r7, lr}
     16a:	b084      	sub	sp, #16
     16c:	af00      	add	r7, sp, #0
     16e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
     174:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     176:	46c0      	nop			; (mov r8, r8)
     178:	687b      	ldr	r3, [r7, #4]
     17a:	0018      	movs	r0, r3
     17c:	4b10      	ldr	r3, [pc, #64]	; (1c0 <adc_enable+0x58>)
     17e:	4798      	blx	r3
     180:	1e03      	subs	r3, r0, #0
     182:	d1f9      	bne.n	178 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
     184:	2017      	movs	r0, #23
     186:	4b0f      	ldr	r3, [pc, #60]	; (1c4 <adc_enable+0x5c>)
     188:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	220f      	movs	r2, #15
     18e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	220f      	movs	r2, #15
     194:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     196:	68fb      	ldr	r3, [r7, #12]
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	b2db      	uxtb	r3, r3
     19c:	2202      	movs	r2, #2
     19e:	4313      	orrs	r3, r2
     1a0:	b2da      	uxtb	r2, r3
     1a2:	68fb      	ldr	r3, [r7, #12]
     1a4:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	0018      	movs	r0, r3
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <adc_enable+0x58>)
     1ae:	4798      	blx	r3
     1b0:	1e03      	subs	r3, r0, #0
     1b2:	d1f9      	bne.n	1a8 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     1b4:	2300      	movs	r3, #0
}
     1b6:	0018      	movs	r0, r3
     1b8:	46bd      	mov	sp, r7
     1ba:	b004      	add	sp, #16
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00000141 	.word	0x00000141
     1c4:	00000115 	.word	0x00000115

000001c8 <configure_adc_temp>:
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/

void configure_adc_temp(void)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b08c      	sub	sp, #48	; 0x30
     1cc:	af00      	add	r7, sp, #0
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     1ce:	003b      	movs	r3, r7
     1d0:	0018      	movs	r0, r3
     1d2:	4b13      	ldr	r3, [pc, #76]	; (220 <configure_adc_temp+0x58>)
     1d4:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     1d6:	003b      	movs	r3, r7
     1d8:	2201      	movs	r2, #1
     1da:	701a      	strb	r2, [r3, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     1dc:	003b      	movs	r3, r7
     1de:	2280      	movs	r2, #128	; 0x80
     1e0:	0092      	lsls	r2, r2, #2
     1e2:	805a      	strh	r2, [r3, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
     1e4:	003b      	movs	r3, r7
     1e6:	2200      	movs	r2, #0
     1e8:	705a      	strb	r2, [r3, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
     1ea:	003b      	movs	r3, r7
     1ec:	2218      	movs	r2, #24
     1ee:	731a      	strb	r2, [r3, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     1f0:	003b      	movs	r3, r7
     1f2:	22c0      	movs	r2, #192	; 0xc0
     1f4:	0152      	lsls	r2, r2, #5
     1f6:	81da      	strh	r2, [r3, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
     1f8:	003b      	movs	r3, r7
     1fa:	2204      	movs	r2, #4
     1fc:	75da      	strb	r2, [r3, #23]
	
	adc_init(&adc_inst, ADC, &conf_adc);
     1fe:	003a      	movs	r2, r7
     200:	4908      	ldr	r1, [pc, #32]	; (224 <configure_adc_temp+0x5c>)
     202:	4b09      	ldr	r3, [pc, #36]	; (228 <configure_adc_temp+0x60>)
     204:	0018      	movs	r0, r3
     206:	4b09      	ldr	r3, [pc, #36]	; (22c <configure_adc_temp+0x64>)
     208:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
     20a:	4b06      	ldr	r3, [pc, #24]	; (224 <configure_adc_temp+0x5c>)
     20c:	2222      	movs	r2, #34	; 0x22
     20e:	709a      	strb	r2, [r3, #2]
	
	adc_enable(&adc_inst);
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <configure_adc_temp+0x60>)
     212:	0018      	movs	r0, r3
     214:	4b06      	ldr	r3, [pc, #24]	; (230 <configure_adc_temp+0x68>)
     216:	4798      	blx	r3
}
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46bd      	mov	sp, r7
     21c:	b00c      	add	sp, #48	; 0x30
     21e:	bd80      	pop	{r7, pc}
     220:	00000369 	.word	0x00000369
     224:	42004000 	.word	0x42004000
     228:	20000450 	.word	0x20000450
     22c:	000009b9 	.word	0x000009b9
     230:	00000169 	.word	0x00000169

00000234 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
int calculate_temperature(int adc_result)
{	
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	int temp = (adc_result *1000)/(4095*25);
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	22fa      	movs	r2, #250	; 0xfa
     240:	0092      	lsls	r2, r2, #2
     242:	435a      	muls	r2, r3
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <calculate_temperature+0x28>)
     246:	4906      	ldr	r1, [pc, #24]	; (260 <calculate_temperature+0x2c>)
     248:	0010      	movs	r0, r2
     24a:	4798      	blx	r3
     24c:	0003      	movs	r3, r0
     24e:	60fb      	str	r3, [r7, #12]
	return temp;
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	0018      	movs	r0, r3
     254:	46bd      	mov	sp, r7
     256:	b004      	add	sp, #16
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	00006525 	.word	0x00006525
     260:	00018fe7 	.word	0x00018fe7

00000264 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     264:	b580      	push	{r7, lr}
     266:	b082      	sub	sp, #8
     268:	af00      	add	r7, sp, #0
     26a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	2200      	movs	r2, #0
     270:	701a      	strb	r2, [r3, #0]
}
     272:	46c0      	nop			; (mov r8, r8)
     274:	46bd      	mov	sp, r7
     276:	b002      	add	sp, #8
     278:	bd80      	pop	{r7, pc}
	...

0000027c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	0002      	movs	r2, r0
     284:	6039      	str	r1, [r7, #0]
     286:	1dfb      	adds	r3, r7, #7
     288:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     28a:	1dfb      	adds	r3, r7, #7
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	2b01      	cmp	r3, #1
     290:	d00a      	beq.n	2a8 <system_apb_clock_set_mask+0x2c>
     292:	2b02      	cmp	r3, #2
     294:	d00f      	beq.n	2b6 <system_apb_clock_set_mask+0x3a>
     296:	2b00      	cmp	r3, #0
     298:	d114      	bne.n	2c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     29a:	4b0e      	ldr	r3, [pc, #56]	; (2d4 <system_apb_clock_set_mask+0x58>)
     29c:	4a0d      	ldr	r2, [pc, #52]	; (2d4 <system_apb_clock_set_mask+0x58>)
     29e:	6991      	ldr	r1, [r2, #24]
     2a0:	683a      	ldr	r2, [r7, #0]
     2a2:	430a      	orrs	r2, r1
     2a4:	619a      	str	r2, [r3, #24]
			break;
     2a6:	e00f      	b.n	2c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     2a8:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <system_apb_clock_set_mask+0x58>)
     2aa:	4a0a      	ldr	r2, [pc, #40]	; (2d4 <system_apb_clock_set_mask+0x58>)
     2ac:	69d1      	ldr	r1, [r2, #28]
     2ae:	683a      	ldr	r2, [r7, #0]
     2b0:	430a      	orrs	r2, r1
     2b2:	61da      	str	r2, [r3, #28]
			break;
     2b4:	e008      	b.n	2c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <system_apb_clock_set_mask+0x58>)
     2b8:	4a06      	ldr	r2, [pc, #24]	; (2d4 <system_apb_clock_set_mask+0x58>)
     2ba:	6a11      	ldr	r1, [r2, #32]
     2bc:	683a      	ldr	r2, [r7, #0]
     2be:	430a      	orrs	r2, r1
     2c0:	621a      	str	r2, [r3, #32]
			break;
     2c2:	e001      	b.n	2c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     2c4:	2317      	movs	r3, #23
     2c6:	e000      	b.n	2ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     2c8:	2300      	movs	r3, #0
}
     2ca:	0018      	movs	r0, r3
     2cc:	46bd      	mov	sp, r7
     2ce:	b002      	add	sp, #8
     2d0:	bd80      	pop	{r7, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	40000400 	.word	0x40000400

000002d8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     2d8:	b580      	push	{r7, lr}
     2da:	b082      	sub	sp, #8
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	2280      	movs	r2, #128	; 0x80
     2e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	2200      	movs	r2, #0
     2ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2201      	movs	r2, #1
     2f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	2200      	movs	r2, #0
     2f6:	70da      	strb	r2, [r3, #3]
}
     2f8:	46c0      	nop			; (mov r8, r8)
     2fa:	46bd      	mov	sp, r7
     2fc:	b002      	add	sp, #8
     2fe:	bd80      	pop	{r7, pc}

00000300 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     300:	b580      	push	{r7, lr}
     302:	b082      	sub	sp, #8
     304:	af00      	add	r7, sp, #0
     306:	0002      	movs	r2, r0
     308:	1dfb      	adds	r3, r7, #7
     30a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     30c:	1dfb      	adds	r3, r7, #7
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	2b00      	cmp	r3, #0
     312:	d002      	beq.n	31a <system_voltage_reference_enable+0x1a>
     314:	2b01      	cmp	r3, #1
     316:	d007      	beq.n	328 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     318:	e00d      	b.n	336 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     31a:	4b08      	ldr	r3, [pc, #32]	; (33c <system_voltage_reference_enable+0x3c>)
     31c:	4a07      	ldr	r2, [pc, #28]	; (33c <system_voltage_reference_enable+0x3c>)
     31e:	6c12      	ldr	r2, [r2, #64]	; 0x40
     320:	2102      	movs	r1, #2
     322:	430a      	orrs	r2, r1
     324:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     326:	e006      	b.n	336 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     328:	4b04      	ldr	r3, [pc, #16]	; (33c <system_voltage_reference_enable+0x3c>)
     32a:	4a04      	ldr	r2, [pc, #16]	; (33c <system_voltage_reference_enable+0x3c>)
     32c:	6c12      	ldr	r2, [r2, #64]	; 0x40
     32e:	2104      	movs	r1, #4
     330:	430a      	orrs	r2, r1
     332:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     334:	46c0      	nop			; (mov r8, r8)
	}
}
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	40000800 	.word	0x40000800

00000340 <adc_is_syncing>:
{
     340:	b580      	push	{r7, lr}
     342:	b084      	sub	sp, #16
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     348:	687b      	ldr	r3, [r7, #4]
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	68fb      	ldr	r3, [r7, #12]
     350:	7e5b      	ldrb	r3, [r3, #25]
     352:	b2db      	uxtb	r3, r3
     354:	b25b      	sxtb	r3, r3
     356:	2b00      	cmp	r3, #0
     358:	da01      	bge.n	35e <adc_is_syncing+0x1e>
		return true;
     35a:	2301      	movs	r3, #1
     35c:	e000      	b.n	360 <adc_is_syncing+0x20>
	return false;
     35e:	2300      	movs	r3, #0
}
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b004      	add	sp, #16
     366:	bd80      	pop	{r7, pc}

00000368 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     368:	b580      	push	{r7, lr}
     36a:	b082      	sub	sp, #8
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     370:	687b      	ldr	r3, [r7, #4]
     372:	2200      	movs	r2, #0
     374:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     376:	687b      	ldr	r3, [r7, #4]
     378:	2200      	movs	r2, #0
     37a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	2200      	movs	r2, #0
     380:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     382:	687b      	ldr	r3, [r7, #4]
     384:	2200      	movs	r2, #0
     386:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     388:	687b      	ldr	r3, [r7, #4]
     38a:	2200      	movs	r2, #0
     38c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     38e:	687b      	ldr	r3, [r7, #4]
     390:	2200      	movs	r2, #0
     392:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     394:	687b      	ldr	r3, [r7, #4]
     396:	2200      	movs	r2, #0
     398:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     39a:	687b      	ldr	r3, [r7, #4]
     39c:	2200      	movs	r2, #0
     39e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	2200      	movs	r2, #0
     3a4:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	22c0      	movs	r2, #192	; 0xc0
     3aa:	0152      	lsls	r2, r2, #5
     3ac:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     3ae:	687b      	ldr	r3, [r7, #4]
     3b0:	2200      	movs	r2, #0
     3b2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2200      	movs	r2, #0
     3be:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2200      	movs	r2, #0
     3c4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	2200      	movs	r2, #0
     3ca:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	222a      	movs	r2, #42	; 0x2a
     3d0:	2100      	movs	r1, #0
     3d2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	2200      	movs	r2, #0
     3d8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2200      	movs	r2, #0
     3de:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	2224      	movs	r2, #36	; 0x24
     3e4:	2100      	movs	r1, #0
     3e6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	2200      	movs	r2, #0
     3ec:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	2200      	movs	r2, #0
     3f8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     3fa:	687b      	ldr	r3, [r7, #4]
     3fc:	222b      	movs	r2, #43	; 0x2b
     3fe:	2100      	movs	r1, #0
     400:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     402:	687b      	ldr	r3, [r7, #4]
     404:	222c      	movs	r2, #44	; 0x2c
     406:	2100      	movs	r1, #0
     408:	5499      	strb	r1, [r3, r2]
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	46bd      	mov	sp, r7
     40e:	b002      	add	sp, #8
     410:	bd80      	pop	{r7, pc}
	...

00000414 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     414:	b580      	push	{r7, lr}
     416:	b098      	sub	sp, #96	; 0x60
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     41c:	230c      	movs	r3, #12
     41e:	18fa      	adds	r2, r7, r3
     420:	4b15      	ldr	r3, [pc, #84]	; (478 <_adc_configure_ain_pin+0x64>)
     422:	0010      	movs	r0, r2
     424:	0019      	movs	r1, r3
     426:	2350      	movs	r3, #80	; 0x50
     428:	001a      	movs	r2, r3
     42a:	4b14      	ldr	r3, [pc, #80]	; (47c <_adc_configure_ain_pin+0x68>)
     42c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     42e:	4b14      	ldr	r3, [pc, #80]	; (480 <_adc_configure_ain_pin+0x6c>)
     430:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     432:	687b      	ldr	r3, [r7, #4]
     434:	2b13      	cmp	r3, #19
     436:	d81a      	bhi.n	46e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     438:	230c      	movs	r3, #12
     43a:	18fb      	adds	r3, r7, r3
     43c:	687a      	ldr	r2, [r7, #4]
     43e:	0092      	lsls	r2, r2, #2
     440:	58d3      	ldr	r3, [r2, r3]
     442:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     444:	2308      	movs	r3, #8
     446:	18fb      	adds	r3, r7, r3
     448:	0018      	movs	r0, r3
     44a:	4b0e      	ldr	r3, [pc, #56]	; (484 <_adc_configure_ain_pin+0x70>)
     44c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     44e:	2308      	movs	r3, #8
     450:	18fb      	adds	r3, r7, r3
     452:	2200      	movs	r2, #0
     454:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     456:	2308      	movs	r3, #8
     458:	18fb      	adds	r3, r7, r3
     45a:	2201      	movs	r2, #1
     45c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     45e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     460:	b2db      	uxtb	r3, r3
     462:	2208      	movs	r2, #8
     464:	18ba      	adds	r2, r7, r2
     466:	0011      	movs	r1, r2
     468:	0018      	movs	r0, r3
     46a:	4b07      	ldr	r3, [pc, #28]	; (488 <_adc_configure_ain_pin+0x74>)
     46c:	4798      	blx	r3
	}
}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	46bd      	mov	sp, r7
     472:	b018      	add	sp, #96	; 0x60
     474:	bd80      	pop	{r7, pc}
     476:	46c0      	nop			; (mov r8, r8)
     478:	00009ef8 	.word	0x00009ef8
     47c:	0000806d 	.word	0x0000806d
     480:	0000ffff 	.word	0x0000ffff
     484:	000002d9 	.word	0x000002d9
     488:	000059b1 	.word	0x000059b1

0000048c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
     48e:	b089      	sub	sp, #36	; 0x24
     490:	af00      	add	r7, sp, #0
     492:	6078      	str	r0, [r7, #4]
     494:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     496:	231f      	movs	r3, #31
     498:	18fb      	adds	r3, r7, r3
     49a:	2200      	movs	r2, #0
     49c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     49e:	2310      	movs	r3, #16
     4a0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     4a2:	2317      	movs	r3, #23
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	2200      	movs	r2, #0
     4a8:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	681b      	ldr	r3, [r3, #0]
     4ae:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     4b0:	230c      	movs	r3, #12
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	0018      	movs	r0, r3
     4b6:	4bce      	ldr	r3, [pc, #824]	; (7f0 <_adc_set_config+0x364>)
     4b8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     4ba:	683b      	ldr	r3, [r7, #0]
     4bc:	781a      	ldrb	r2, [r3, #0]
     4be:	230c      	movs	r3, #12
     4c0:	18fb      	adds	r3, r7, r3
     4c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     4c4:	230c      	movs	r3, #12
     4c6:	18fb      	adds	r3, r7, r3
     4c8:	0019      	movs	r1, r3
     4ca:	201e      	movs	r0, #30
     4cc:	4bc9      	ldr	r3, [pc, #804]	; (7f4 <_adc_set_config+0x368>)
     4ce:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     4d0:	201e      	movs	r0, #30
     4d2:	4bc9      	ldr	r3, [pc, #804]	; (7f8 <_adc_set_config+0x36c>)
     4d4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	222c      	movs	r2, #44	; 0x2c
     4da:	5c9b      	ldrb	r3, [r3, r2]
     4dc:	2b00      	cmp	r3, #0
     4de:	d040      	beq.n	562 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     4e0:	2316      	movs	r3, #22
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	683a      	ldr	r2, [r7, #0]
     4e6:	212b      	movs	r1, #43	; 0x2b
     4e8:	5c52      	ldrb	r2, [r2, r1]
     4ea:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     4ec:	683b      	ldr	r3, [r7, #0]
     4ee:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     4f0:	2315      	movs	r3, #21
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	2216      	movs	r2, #22
     4f6:	18ba      	adds	r2, r7, r2
     4f8:	7812      	ldrb	r2, [r2, #0]
     4fa:	188a      	adds	r2, r1, r2
     4fc:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	222c      	movs	r2, #44	; 0x2c
     502:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     504:	230f      	movs	r3, #15
     506:	18fb      	adds	r3, r7, r3
     508:	2215      	movs	r2, #21
     50a:	18ba      	adds	r2, r7, r2
     50c:	7812      	ldrb	r2, [r2, #0]
     50e:	188a      	adds	r2, r1, r2
     510:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     512:	e018      	b.n	546 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     514:	2316      	movs	r3, #22
     516:	18fb      	adds	r3, r7, r3
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	220f      	movs	r2, #15
     51c:	4013      	ands	r3, r2
     51e:	683a      	ldr	r2, [r7, #0]
     520:	7b12      	ldrb	r2, [r2, #12]
     522:	189b      	adds	r3, r3, r2
     524:	0018      	movs	r0, r3
     526:	4bb5      	ldr	r3, [pc, #724]	; (7fc <_adc_set_config+0x370>)
     528:	4798      	blx	r3
			start_pin++;
     52a:	2315      	movs	r3, #21
     52c:	18fb      	adds	r3, r7, r3
     52e:	781a      	ldrb	r2, [r3, #0]
     530:	2315      	movs	r3, #21
     532:	18fb      	adds	r3, r7, r3
     534:	3201      	adds	r2, #1
     536:	701a      	strb	r2, [r3, #0]
			offset++;
     538:	2316      	movs	r3, #22
     53a:	18fb      	adds	r3, r7, r3
     53c:	781a      	ldrb	r2, [r3, #0]
     53e:	2316      	movs	r3, #22
     540:	18fb      	adds	r3, r7, r3
     542:	3201      	adds	r2, #1
     544:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     546:	2315      	movs	r3, #21
     548:	18fa      	adds	r2, r7, r3
     54a:	230f      	movs	r3, #15
     54c:	18fb      	adds	r3, r7, r3
     54e:	7812      	ldrb	r2, [r2, #0]
     550:	781b      	ldrb	r3, [r3, #0]
     552:	429a      	cmp	r2, r3
     554:	d3de      	bcc.n	514 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     556:	683b      	ldr	r3, [r7, #0]
     558:	89db      	ldrh	r3, [r3, #14]
     55a:	0018      	movs	r0, r3
     55c:	4ba7      	ldr	r3, [pc, #668]	; (7fc <_adc_set_config+0x370>)
     55e:	4798      	blx	r3
     560:	e009      	b.n	576 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     562:	683b      	ldr	r3, [r7, #0]
     564:	7b1b      	ldrb	r3, [r3, #12]
     566:	0018      	movs	r0, r3
     568:	4ba4      	ldr	r3, [pc, #656]	; (7fc <_adc_set_config+0x370>)
     56a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     56c:	683b      	ldr	r3, [r7, #0]
     56e:	89db      	ldrh	r3, [r3, #14]
     570:	0018      	movs	r0, r3
     572:	4ba2      	ldr	r3, [pc, #648]	; (7fc <_adc_set_config+0x370>)
     574:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     576:	683b      	ldr	r3, [r7, #0]
     578:	7d5b      	ldrb	r3, [r3, #21]
     57a:	009b      	lsls	r3, r3, #2
     57c:	b2da      	uxtb	r2, r3
     57e:	693b      	ldr	r3, [r7, #16]
     580:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     582:	683b      	ldr	r3, [r7, #0]
     584:	7d9b      	ldrb	r3, [r3, #22]
     586:	01db      	lsls	r3, r3, #7
     588:	b25a      	sxtb	r2, r3
			(config->reference);
     58a:	683b      	ldr	r3, [r7, #0]
     58c:	785b      	ldrb	r3, [r3, #1]
     58e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     590:	4313      	orrs	r3, r2
     592:	b25b      	sxtb	r3, r3
     594:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     596:	693b      	ldr	r3, [r7, #16]
     598:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	791b      	ldrb	r3, [r3, #4]
     59e:	2b34      	cmp	r3, #52	; 0x34
     5a0:	d846      	bhi.n	630 <_adc_set_config+0x1a4>
     5a2:	009a      	lsls	r2, r3, #2
     5a4:	4b96      	ldr	r3, [pc, #600]	; (800 <_adc_set_config+0x374>)
     5a6:	18d3      	adds	r3, r2, r3
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     5ac:	231f      	movs	r3, #31
     5ae:	18fb      	adds	r3, r7, r3
     5b0:	683a      	ldr	r2, [r7, #0]
     5b2:	7c52      	ldrb	r2, [r2, #17]
     5b4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     5b6:	2317      	movs	r3, #23
     5b8:	18fb      	adds	r3, r7, r3
     5ba:	683a      	ldr	r2, [r7, #0]
     5bc:	7c12      	ldrb	r2, [r2, #16]
     5be:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5c0:	2310      	movs	r3, #16
     5c2:	61bb      	str	r3, [r7, #24]
		break;
     5c4:	e036      	b.n	634 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     5c6:	231f      	movs	r3, #31
     5c8:	18fb      	adds	r3, r7, r3
     5ca:	2201      	movs	r2, #1
     5cc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     5ce:	2317      	movs	r3, #23
     5d0:	18fb      	adds	r3, r7, r3
     5d2:	2202      	movs	r2, #2
     5d4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5d6:	2310      	movs	r3, #16
     5d8:	61bb      	str	r3, [r7, #24]
		break;
     5da:	e02b      	b.n	634 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     5dc:	231f      	movs	r3, #31
     5de:	18fb      	adds	r3, r7, r3
     5e0:	2202      	movs	r2, #2
     5e2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     5e4:	2317      	movs	r3, #23
     5e6:	18fb      	adds	r3, r7, r3
     5e8:	2204      	movs	r2, #4
     5ea:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     5ec:	2310      	movs	r3, #16
     5ee:	61bb      	str	r3, [r7, #24]
		break;
     5f0:	e020      	b.n	634 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     5f2:	231f      	movs	r3, #31
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	2201      	movs	r2, #1
     5f8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     5fa:	2317      	movs	r3, #23
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	2206      	movs	r2, #6
     600:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     602:	2310      	movs	r3, #16
     604:	61bb      	str	r3, [r7, #24]
		break;
     606:	e015      	b.n	634 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     608:	231f      	movs	r3, #31
     60a:	18fb      	adds	r3, r7, r3
     60c:	2200      	movs	r2, #0
     60e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     610:	2317      	movs	r3, #23
     612:	18fb      	adds	r3, r7, r3
     614:	2208      	movs	r2, #8
     616:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     618:	2310      	movs	r3, #16
     61a:	61bb      	str	r3, [r7, #24]
		break;
     61c:	e00a      	b.n	634 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     61e:	2330      	movs	r3, #48	; 0x30
     620:	61bb      	str	r3, [r7, #24]
		break;
     622:	e007      	b.n	634 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     624:	2320      	movs	r3, #32
     626:	61bb      	str	r3, [r7, #24]
		break;
     628:	e004      	b.n	634 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     62a:	2300      	movs	r3, #0
     62c:	61bb      	str	r3, [r7, #24]
		break;
     62e:	e001      	b.n	634 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     630:	2317      	movs	r3, #23
     632:	e1ae      	b.n	992 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     634:	231f      	movs	r3, #31
     636:	18fb      	adds	r3, r7, r3
     638:	781b      	ldrb	r3, [r3, #0]
     63a:	011b      	lsls	r3, r3, #4
     63c:	b2db      	uxtb	r3, r3
     63e:	2270      	movs	r2, #112	; 0x70
     640:	4013      	ands	r3, r2
     642:	b2da      	uxtb	r2, r3
     644:	2317      	movs	r3, #23
     646:	18fb      	adds	r3, r7, r3
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	4313      	orrs	r3, r2
     64c:	b2da      	uxtb	r2, r3
     64e:	693b      	ldr	r3, [r7, #16]
     650:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     652:	683b      	ldr	r3, [r7, #0]
     654:	7ddb      	ldrb	r3, [r3, #23]
     656:	2b3f      	cmp	r3, #63	; 0x3f
     658:	d901      	bls.n	65e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     65a:	2317      	movs	r3, #23
     65c:	e199      	b.n	992 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     65e:	683b      	ldr	r3, [r7, #0]
     660:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     662:	693b      	ldr	r3, [r7, #16]
     664:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     666:	46c0      	nop			; (mov r8, r8)
     668:	687b      	ldr	r3, [r7, #4]
     66a:	0018      	movs	r0, r3
     66c:	4b65      	ldr	r3, [pc, #404]	; (804 <_adc_set_config+0x378>)
     66e:	4798      	blx	r3
     670:	1e03      	subs	r3, r0, #0
     672:	d1f9      	bne.n	668 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     674:	683b      	ldr	r3, [r7, #0]
     676:	885a      	ldrh	r2, [r3, #2]
     678:	69bb      	ldr	r3, [r7, #24]
     67a:	b29b      	uxth	r3, r3
     67c:	4313      	orrs	r3, r2
     67e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     680:	683b      	ldr	r3, [r7, #0]
     682:	2124      	movs	r1, #36	; 0x24
     684:	5c5b      	ldrb	r3, [r3, r1]
     686:	b29b      	uxth	r3, r3
     688:	00db      	lsls	r3, r3, #3
     68a:	b29b      	uxth	r3, r3
			resolution |
     68c:	4313      	orrs	r3, r2
     68e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     690:	683b      	ldr	r3, [r7, #0]
     692:	7d1b      	ldrb	r3, [r3, #20]
     694:	b29b      	uxth	r3, r3
     696:	009b      	lsls	r3, r3, #2
     698:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     69a:	4313      	orrs	r3, r2
     69c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     69e:	683b      	ldr	r3, [r7, #0]
     6a0:	7c9b      	ldrb	r3, [r3, #18]
     6a2:	b29b      	uxth	r3, r3
     6a4:	18db      	adds	r3, r3, r3
     6a6:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     6a8:	4313      	orrs	r3, r2
     6aa:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	7cdb      	ldrb	r3, [r3, #19]
     6b0:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     6b2:	4313      	orrs	r3, r2
     6b4:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     6b6:	693b      	ldr	r3, [r7, #16]
     6b8:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	7e1b      	ldrb	r3, [r3, #24]
     6be:	2b00      	cmp	r3, #0
     6c0:	d100      	bne.n	6c4 <_adc_set_config+0x238>
     6c2:	e0c4      	b.n	84e <_adc_set_config+0x3c2>
		switch (resolution) {
     6c4:	69bb      	ldr	r3, [r7, #24]
     6c6:	2b10      	cmp	r3, #16
     6c8:	d100      	bne.n	6cc <_adc_set_config+0x240>
     6ca:	e076      	b.n	7ba <_adc_set_config+0x32e>
     6cc:	d802      	bhi.n	6d4 <_adc_set_config+0x248>
     6ce:	2b00      	cmp	r3, #0
     6d0:	d04d      	beq.n	76e <_adc_set_config+0x2e2>
     6d2:	e0bc      	b.n	84e <_adc_set_config+0x3c2>
     6d4:	2b20      	cmp	r3, #32
     6d6:	d023      	beq.n	720 <_adc_set_config+0x294>
     6d8:	2b30      	cmp	r3, #48	; 0x30
     6da:	d000      	beq.n	6de <_adc_set_config+0x252>
     6dc:	e0b7      	b.n	84e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     6de:	683b      	ldr	r3, [r7, #0]
     6e0:	7cdb      	ldrb	r3, [r3, #19]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d011      	beq.n	70a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     6e6:	683b      	ldr	r3, [r7, #0]
     6e8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     6ea:	2b7f      	cmp	r3, #127	; 0x7f
     6ec:	dc0b      	bgt.n	706 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     6ee:	683b      	ldr	r3, [r7, #0]
     6f0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     6f2:	3380      	adds	r3, #128	; 0x80
     6f4:	db07      	blt.n	706 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     6f6:	683b      	ldr	r3, [r7, #0]
     6f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     6fa:	2b7f      	cmp	r3, #127	; 0x7f
     6fc:	dc03      	bgt.n	706 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     6fe:	683b      	ldr	r3, [r7, #0]
     700:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     702:	3380      	adds	r3, #128	; 0x80
     704:	da01      	bge.n	70a <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     706:	2317      	movs	r3, #23
     708:	e143      	b.n	992 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	69db      	ldr	r3, [r3, #28]
     70e:	2bff      	cmp	r3, #255	; 0xff
     710:	dc04      	bgt.n	71c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     712:	683b      	ldr	r3, [r7, #0]
     714:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     716:	2bff      	cmp	r3, #255	; 0xff
     718:	dc00      	bgt.n	71c <_adc_set_config+0x290>
     71a:	e091      	b.n	840 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     71c:	2317      	movs	r3, #23
     71e:	e138      	b.n	992 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     720:	683b      	ldr	r3, [r7, #0]
     722:	7cdb      	ldrb	r3, [r3, #19]
     724:	2b00      	cmp	r3, #0
     726:	d015      	beq.n	754 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     728:	683b      	ldr	r3, [r7, #0]
     72a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     72c:	4a36      	ldr	r2, [pc, #216]	; (808 <_adc_set_config+0x37c>)
     72e:	4293      	cmp	r3, r2
     730:	dc0e      	bgt.n	750 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     732:	683b      	ldr	r3, [r7, #0]
     734:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     736:	4a35      	ldr	r2, [pc, #212]	; (80c <_adc_set_config+0x380>)
     738:	4293      	cmp	r3, r2
     73a:	db09      	blt.n	750 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     73c:	683b      	ldr	r3, [r7, #0]
     73e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     740:	4a31      	ldr	r2, [pc, #196]	; (808 <_adc_set_config+0x37c>)
     742:	4293      	cmp	r3, r2
     744:	dc04      	bgt.n	750 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     746:	683b      	ldr	r3, [r7, #0]
     748:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     74a:	4a30      	ldr	r2, [pc, #192]	; (80c <_adc_set_config+0x380>)
     74c:	4293      	cmp	r3, r2
     74e:	da01      	bge.n	754 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     750:	2317      	movs	r3, #23
     752:	e11e      	b.n	992 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     754:	683b      	ldr	r3, [r7, #0]
     756:	69db      	ldr	r3, [r3, #28]
     758:	4a2d      	ldr	r2, [pc, #180]	; (810 <_adc_set_config+0x384>)
     75a:	4293      	cmp	r3, r2
     75c:	dc05      	bgt.n	76a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     75e:	683b      	ldr	r3, [r7, #0]
     760:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     762:	4a2b      	ldr	r2, [pc, #172]	; (810 <_adc_set_config+0x384>)
     764:	4293      	cmp	r3, r2
     766:	dc00      	bgt.n	76a <_adc_set_config+0x2de>
     768:	e06c      	b.n	844 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     76a:	2317      	movs	r3, #23
     76c:	e111      	b.n	992 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     76e:	683b      	ldr	r3, [r7, #0]
     770:	7cdb      	ldrb	r3, [r3, #19]
     772:	2b00      	cmp	r3, #0
     774:	d015      	beq.n	7a2 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     776:	683b      	ldr	r3, [r7, #0]
     778:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     77a:	4a26      	ldr	r2, [pc, #152]	; (814 <_adc_set_config+0x388>)
     77c:	4293      	cmp	r3, r2
     77e:	dc0e      	bgt.n	79e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     780:	683b      	ldr	r3, [r7, #0]
     782:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     784:	4a24      	ldr	r2, [pc, #144]	; (818 <_adc_set_config+0x38c>)
     786:	4293      	cmp	r3, r2
     788:	db09      	blt.n	79e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     78a:	683b      	ldr	r3, [r7, #0]
     78c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     78e:	4a21      	ldr	r2, [pc, #132]	; (814 <_adc_set_config+0x388>)
     790:	4293      	cmp	r3, r2
     792:	dc04      	bgt.n	79e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     794:	683b      	ldr	r3, [r7, #0]
     796:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     798:	4a1f      	ldr	r2, [pc, #124]	; (818 <_adc_set_config+0x38c>)
     79a:	4293      	cmp	r3, r2
     79c:	da01      	bge.n	7a2 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     79e:	2317      	movs	r3, #23
     7a0:	e0f7      	b.n	992 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     7a2:	683b      	ldr	r3, [r7, #0]
     7a4:	69db      	ldr	r3, [r3, #28]
     7a6:	4a1d      	ldr	r2, [pc, #116]	; (81c <_adc_set_config+0x390>)
     7a8:	4293      	cmp	r3, r2
     7aa:	dc04      	bgt.n	7b6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     7b0:	4a1a      	ldr	r2, [pc, #104]	; (81c <_adc_set_config+0x390>)
     7b2:	4293      	cmp	r3, r2
     7b4:	dd48      	ble.n	848 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7b6:	2317      	movs	r3, #23
     7b8:	e0eb      	b.n	992 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     7ba:	683b      	ldr	r3, [r7, #0]
     7bc:	7cdb      	ldrb	r3, [r3, #19]
     7be:	2b00      	cmp	r3, #0
     7c0:	d032      	beq.n	828 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     7c6:	4a16      	ldr	r2, [pc, #88]	; (820 <_adc_set_config+0x394>)
     7c8:	4293      	cmp	r3, r2
     7ca:	dc0e      	bgt.n	7ea <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     7d0:	4a14      	ldr	r2, [pc, #80]	; (824 <_adc_set_config+0x398>)
     7d2:	4293      	cmp	r3, r2
     7d4:	db09      	blt.n	7ea <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     7d6:	683b      	ldr	r3, [r7, #0]
     7d8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     7da:	4a11      	ldr	r2, [pc, #68]	; (820 <_adc_set_config+0x394>)
     7dc:	4293      	cmp	r3, r2
     7de:	dc04      	bgt.n	7ea <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     7e4:	4a0f      	ldr	r2, [pc, #60]	; (824 <_adc_set_config+0x398>)
     7e6:	4293      	cmp	r3, r2
     7e8:	da1e      	bge.n	828 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7ea:	2317      	movs	r3, #23
     7ec:	e0d1      	b.n	992 <_adc_set_config+0x506>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000265 	.word	0x00000265
     7f4:	000056c5 	.word	0x000056c5
     7f8:	00005709 	.word	0x00005709
     7fc:	00000415 	.word	0x00000415
     800:	00009f48 	.word	0x00009f48
     804:	00000341 	.word	0x00000341
     808:	000001ff 	.word	0x000001ff
     80c:	fffffe00 	.word	0xfffffe00
     810:	000003ff 	.word	0x000003ff
     814:	000007ff 	.word	0x000007ff
     818:	fffff800 	.word	0xfffff800
     81c:	00000fff 	.word	0x00000fff
     820:	00007fff 	.word	0x00007fff
     824:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     828:	683b      	ldr	r3, [r7, #0]
     82a:	69db      	ldr	r3, [r3, #28]
     82c:	4a5b      	ldr	r2, [pc, #364]	; (99c <_adc_set_config+0x510>)
     82e:	4293      	cmp	r3, r2
     830:	dc04      	bgt.n	83c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     832:	683b      	ldr	r3, [r7, #0]
     834:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     836:	4a59      	ldr	r2, [pc, #356]	; (99c <_adc_set_config+0x510>)
     838:	4293      	cmp	r3, r2
     83a:	dd07      	ble.n	84c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     83c:	2317      	movs	r3, #23
     83e:	e0a8      	b.n	992 <_adc_set_config+0x506>
			break;
     840:	46c0      	nop			; (mov r8, r8)
     842:	e004      	b.n	84e <_adc_set_config+0x3c2>
			break;
     844:	46c0      	nop			; (mov r8, r8)
     846:	e002      	b.n	84e <_adc_set_config+0x3c2>
			break;
     848:	46c0      	nop			; (mov r8, r8)
     84a:	e000      	b.n	84e <_adc_set_config+0x3c2>
			}
			break;
     84c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     84e:	46c0      	nop			; (mov r8, r8)
     850:	687b      	ldr	r3, [r7, #4]
     852:	0018      	movs	r0, r3
     854:	4b52      	ldr	r3, [pc, #328]	; (9a0 <_adc_set_config+0x514>)
     856:	4798      	blx	r3
     858:	1e03      	subs	r3, r0, #0
     85a:	d1f9      	bne.n	850 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     85c:	683b      	ldr	r3, [r7, #0]
     85e:	7e1a      	ldrb	r2, [r3, #24]
     860:	693b      	ldr	r3, [r7, #16]
     862:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     864:	46c0      	nop			; (mov r8, r8)
     866:	687b      	ldr	r3, [r7, #4]
     868:	0018      	movs	r0, r3
     86a:	4b4d      	ldr	r3, [pc, #308]	; (9a0 <_adc_set_config+0x514>)
     86c:	4798      	blx	r3
     86e:	1e03      	subs	r3, r0, #0
     870:	d1f9      	bne.n	866 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     872:	683b      	ldr	r3, [r7, #0]
     874:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     876:	b29a      	uxth	r2, r3
     878:	693b      	ldr	r3, [r7, #16]
     87a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	0018      	movs	r0, r3
     882:	4b47      	ldr	r3, [pc, #284]	; (9a0 <_adc_set_config+0x514>)
     884:	4798      	blx	r3
     886:	1e03      	subs	r3, r0, #0
     888:	d1f9      	bne.n	87e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     88a:	683b      	ldr	r3, [r7, #0]
     88c:	6a1b      	ldr	r3, [r3, #32]
     88e:	b29a      	uxth	r2, r3
     890:	693b      	ldr	r3, [r7, #16]
     892:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     894:	2314      	movs	r3, #20
     896:	18fb      	adds	r3, r7, r3
     898:	683a      	ldr	r2, [r7, #0]
     89a:	212c      	movs	r1, #44	; 0x2c
     89c:	5c52      	ldrb	r2, [r2, r1]
     89e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     8a0:	2314      	movs	r3, #20
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d006      	beq.n	8b8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     8aa:	2314      	movs	r3, #20
     8ac:	18fb      	adds	r3, r7, r3
     8ae:	781a      	ldrb	r2, [r3, #0]
     8b0:	2314      	movs	r3, #20
     8b2:	18fb      	adds	r3, r7, r3
     8b4:	3a01      	subs	r2, #1
     8b6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     8b8:	2314      	movs	r3, #20
     8ba:	18fb      	adds	r3, r7, r3
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b0f      	cmp	r3, #15
     8c0:	d804      	bhi.n	8cc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     8c2:	683b      	ldr	r3, [r7, #0]
     8c4:	222b      	movs	r2, #43	; 0x2b
     8c6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     8c8:	2b0f      	cmp	r3, #15
     8ca:	d901      	bls.n	8d0 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     8cc:	2317      	movs	r3, #23
     8ce:	e060      	b.n	992 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     8d0:	46c0      	nop			; (mov r8, r8)
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	0018      	movs	r0, r3
     8d6:	4b32      	ldr	r3, [pc, #200]	; (9a0 <_adc_set_config+0x514>)
     8d8:	4798      	blx	r3
     8da:	1e03      	subs	r3, r0, #0
     8dc:	d1f9      	bne.n	8d2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     8de:	683b      	ldr	r3, [r7, #0]
     8e0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     8e2:	683a      	ldr	r2, [r7, #0]
     8e4:	212b      	movs	r1, #43	; 0x2b
     8e6:	5c52      	ldrb	r2, [r2, r1]
     8e8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     8ea:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     8ec:	2214      	movs	r2, #20
     8ee:	18ba      	adds	r2, r7, r2
     8f0:	7812      	ldrb	r2, [r2, #0]
     8f2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     8f4:	4313      	orrs	r3, r2
			config->negative_input |
     8f6:	683a      	ldr	r2, [r7, #0]
     8f8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     8fa:	4313      	orrs	r3, r2
			config->positive_input;
     8fc:	683a      	ldr	r2, [r7, #0]
     8fe:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     900:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     902:	693b      	ldr	r3, [r7, #16]
     904:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     906:	683b      	ldr	r3, [r7, #0]
     908:	222a      	movs	r2, #42	; 0x2a
     90a:	5c9a      	ldrb	r2, [r3, r2]
     90c:	693b      	ldr	r3, [r7, #16]
     90e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     910:	693b      	ldr	r3, [r7, #16]
     912:	220f      	movs	r2, #15
     914:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     916:	683b      	ldr	r3, [r7, #0]
     918:	2224      	movs	r2, #36	; 0x24
     91a:	5c9b      	ldrb	r3, [r3, r2]
     91c:	2b00      	cmp	r3, #0
     91e:	d01e      	beq.n	95e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     920:	683b      	ldr	r3, [r7, #0]
     922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     924:	4a1f      	ldr	r2, [pc, #124]	; (9a4 <_adc_set_config+0x518>)
     926:	4293      	cmp	r3, r2
     928:	d901      	bls.n	92e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     92a:	2317      	movs	r3, #23
     92c:	e031      	b.n	992 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     92e:	683b      	ldr	r3, [r7, #0]
     930:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     932:	693b      	ldr	r3, [r7, #16]
     934:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     936:	683b      	ldr	r3, [r7, #0]
     938:	2228      	movs	r2, #40	; 0x28
     93a:	5e9b      	ldrsh	r3, [r3, r2]
     93c:	4a1a      	ldr	r2, [pc, #104]	; (9a8 <_adc_set_config+0x51c>)
     93e:	4293      	cmp	r3, r2
     940:	dc05      	bgt.n	94e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     942:	683b      	ldr	r3, [r7, #0]
     944:	2228      	movs	r2, #40	; 0x28
     946:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     948:	4a18      	ldr	r2, [pc, #96]	; (9ac <_adc_set_config+0x520>)
     94a:	4293      	cmp	r3, r2
     94c:	da01      	bge.n	952 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     94e:	2317      	movs	r3, #23
     950:	e01f      	b.n	992 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     952:	683b      	ldr	r3, [r7, #0]
     954:	2228      	movs	r2, #40	; 0x28
     956:	5e9b      	ldrsh	r3, [r3, r2]
     958:	b29a      	uxth	r2, r3
     95a:	693b      	ldr	r3, [r7, #16]
     95c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     95e:	4b14      	ldr	r3, [pc, #80]	; (9b0 <_adc_set_config+0x524>)
     960:	681b      	ldr	r3, [r3, #0]
     962:	08db      	lsrs	r3, r3, #3
     964:	b29b      	uxth	r3, r3
     966:	021b      	lsls	r3, r3, #8
     968:	b29a      	uxth	r2, r3
     96a:	23e0      	movs	r3, #224	; 0xe0
     96c:	00db      	lsls	r3, r3, #3
     96e:	4013      	ands	r3, r2
     970:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     972:	4b10      	ldr	r3, [pc, #64]	; (9b4 <_adc_set_config+0x528>)
     974:	685c      	ldr	r4, [r3, #4]
     976:	681b      	ldr	r3, [r3, #0]
     978:	0161      	lsls	r1, r4, #5
     97a:	0edd      	lsrs	r5, r3, #27
     97c:	430d      	orrs	r5, r1
     97e:	0ee6      	lsrs	r6, r4, #27
     980:	b2ab      	uxth	r3, r5
     982:	21ff      	movs	r1, #255	; 0xff
     984:	400b      	ands	r3, r1
     986:	b29b      	uxth	r3, r3
			) |
     988:	4313      	orrs	r3, r2
     98a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     98c:	693b      	ldr	r3, [r7, #16]
     98e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     990:	2300      	movs	r3, #0
}
     992:	0018      	movs	r0, r3
     994:	46bd      	mov	sp, r7
     996:	b009      	add	sp, #36	; 0x24
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	0000ffff 	.word	0x0000ffff
     9a0:	00000341 	.word	0x00000341
     9a4:	00000fff 	.word	0x00000fff
     9a8:	000007ff 	.word	0x000007ff
     9ac:	fffff800 	.word	0xfffff800
     9b0:	00806024 	.word	0x00806024
     9b4:	00806020 	.word	0x00806020

000009b8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b086      	sub	sp, #24
     9bc:	af00      	add	r7, sp, #0
     9be:	60f8      	str	r0, [r7, #12]
     9c0:	60b9      	str	r1, [r7, #8]
     9c2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	68ba      	ldr	r2, [r7, #8]
     9c8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     9ca:	2380      	movs	r3, #128	; 0x80
     9cc:	025b      	lsls	r3, r3, #9
     9ce:	0019      	movs	r1, r3
     9d0:	2002      	movs	r0, #2
     9d2:	4b32      	ldr	r3, [pc, #200]	; (a9c <adc_init+0xe4>)
     9d4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     9d6:	68bb      	ldr	r3, [r7, #8]
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	b2db      	uxtb	r3, r3
     9dc:	001a      	movs	r2, r3
     9de:	2301      	movs	r3, #1
     9e0:	4013      	ands	r3, r2
     9e2:	d001      	beq.n	9e8 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     9e4:	2305      	movs	r3, #5
     9e6:	e055      	b.n	a94 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     9e8:	68bb      	ldr	r3, [r7, #8]
     9ea:	781b      	ldrb	r3, [r3, #0]
     9ec:	b2db      	uxtb	r3, r3
     9ee:	001a      	movs	r2, r3
     9f0:	2302      	movs	r3, #2
     9f2:	4013      	ands	r3, r2
     9f4:	d001      	beq.n	9fa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     9f6:	231c      	movs	r3, #28
     9f8:	e04c      	b.n	a94 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	785a      	ldrb	r2, [r3, #1]
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	791b      	ldrb	r3, [r3, #4]
     a06:	2b00      	cmp	r3, #0
     a08:	d102      	bne.n	a10 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     a0a:	2001      	movs	r0, #1
     a0c:	4b24      	ldr	r3, [pc, #144]	; (aa0 <adc_init+0xe8>)
     a0e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     a10:	2317      	movs	r3, #23
     a12:	18fb      	adds	r3, r7, r3
     a14:	2200      	movs	r2, #0
     a16:	701a      	strb	r2, [r3, #0]
     a18:	e00e      	b.n	a38 <adc_init+0x80>
		module_inst->callback[i] = NULL;
     a1a:	2317      	movs	r3, #23
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	781a      	ldrb	r2, [r3, #0]
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	3202      	adds	r2, #2
     a24:	0092      	lsls	r2, r2, #2
     a26:	2100      	movs	r1, #0
     a28:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     a2a:	2317      	movs	r3, #23
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	781a      	ldrb	r2, [r3, #0]
     a30:	2317      	movs	r3, #23
     a32:	18fb      	adds	r3, r7, r3
     a34:	3201      	adds	r2, #1
     a36:	701a      	strb	r2, [r3, #0]
     a38:	2317      	movs	r3, #23
     a3a:	18fb      	adds	r3, r7, r3
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	2b02      	cmp	r3, #2
     a40:	d9eb      	bls.n	a1a <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	2200      	movs	r2, #0
     a46:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	2200      	movs	r2, #0
     a4c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     a4e:	68fb      	ldr	r3, [r7, #12]
     a50:	2200      	movs	r2, #0
     a52:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	2200      	movs	r2, #0
     a58:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
     a5a:	4b12      	ldr	r3, [pc, #72]	; (aa4 <adc_init+0xec>)
     a5c:	68fa      	ldr	r2, [r7, #12]
     a5e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	222a      	movs	r2, #42	; 0x2a
     a64:	5c9b      	ldrb	r3, [r3, r2]
     a66:	2b00      	cmp	r3, #0
     a68:	d10a      	bne.n	a80 <adc_init+0xc8>
			!config->freerunning) {
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	7d1b      	ldrb	r3, [r3, #20]
     a6e:	2201      	movs	r2, #1
     a70:	4053      	eors	r3, r2
     a72:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     a74:	2b00      	cmp	r3, #0
     a76:	d003      	beq.n	a80 <adc_init+0xc8>
		module_inst->software_trigger = true;
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	2201      	movs	r2, #1
     a7c:	775a      	strb	r2, [r3, #29]
     a7e:	e002      	b.n	a86 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
     a80:	68fb      	ldr	r3, [r7, #12]
     a82:	2200      	movs	r2, #0
     a84:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     a86:	687a      	ldr	r2, [r7, #4]
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	0011      	movs	r1, r2
     a8c:	0018      	movs	r0, r3
     a8e:	4b06      	ldr	r3, [pc, #24]	; (aa8 <adc_init+0xf0>)
     a90:	4798      	blx	r3
     a92:	0003      	movs	r3, r0
}
     a94:	0018      	movs	r0, r3
     a96:	46bd      	mov	sp, r7
     a98:	b006      	add	sp, #24
     a9a:	bd80      	pop	{r7, pc}
     a9c:	0000027d 	.word	0x0000027d
     aa0:	00000301 	.word	0x00000301
     aa4:	200002dc 	.word	0x200002dc
     aa8:	0000048d 	.word	0x0000048d

00000aac <adc_is_syncing>:
{
     aac:	b580      	push	{r7, lr}
     aae:	b084      	sub	sp, #16
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	681b      	ldr	r3, [r3, #0]
     ab8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     aba:	68fb      	ldr	r3, [r7, #12]
     abc:	7e5b      	ldrb	r3, [r3, #25]
     abe:	b2db      	uxtb	r3, r3
     ac0:	b25b      	sxtb	r3, r3
     ac2:	2b00      	cmp	r3, #0
     ac4:	da01      	bge.n	aca <adc_is_syncing+0x1e>
		return true;
     ac6:	2301      	movs	r3, #1
     ac8:	e000      	b.n	acc <adc_is_syncing+0x20>
	return false;
     aca:	2300      	movs	r3, #0
}
     acc:	0018      	movs	r0, r3
     ace:	46bd      	mov	sp, r7
     ad0:	b004      	add	sp, #16
     ad2:	bd80      	pop	{r7, pc}

00000ad4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b084      	sub	sp, #16
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	681b      	ldr	r3, [r3, #0]
     ae0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	0018      	movs	r0, r3
     ae8:	4b0b      	ldr	r3, [pc, #44]	; (b18 <adc_start_conversion+0x44>)
     aea:	4798      	blx	r3
     aec:	1e03      	subs	r3, r0, #0
     aee:	d1f9      	bne.n	ae4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     af0:	68fb      	ldr	r3, [r7, #12]
     af2:	7b1b      	ldrb	r3, [r3, #12]
     af4:	b2db      	uxtb	r3, r3
     af6:	2202      	movs	r2, #2
     af8:	4313      	orrs	r3, r2
     afa:	b2da      	uxtb	r2, r3
     afc:	68fb      	ldr	r3, [r7, #12]
     afe:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     b00:	46c0      	nop			; (mov r8, r8)
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	0018      	movs	r0, r3
     b06:	4b04      	ldr	r3, [pc, #16]	; (b18 <adc_start_conversion+0x44>)
     b08:	4798      	blx	r3
     b0a:	1e03      	subs	r3, r0, #0
     b0c:	d1f9      	bne.n	b02 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	46bd      	mov	sp, r7
     b12:	b004      	add	sp, #16
     b14:	bd80      	pop	{r7, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000aad 	.word	0x00000aad

00000b1c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     b1c:	b580      	push	{r7, lr}
     b1e:	b084      	sub	sp, #16
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	000a      	movs	r2, r1
     b26:	1cfb      	adds	r3, r7, #3
     b28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	681b      	ldr	r3, [r3, #0]
     b2e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     b30:	68fb      	ldr	r3, [r7, #12]
     b32:	1cfa      	adds	r2, r7, #3
     b34:	7812      	ldrb	r2, [r2, #0]
     b36:	759a      	strb	r2, [r3, #22]
}
     b38:	46c0      	nop			; (mov r8, r8)
     b3a:	46bd      	mov	sp, r7
     b3c:	b004      	add	sp, #16
     b3e:	bd80      	pop	{r7, pc}

00000b40 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     b40:	b580      	push	{r7, lr}
     b42:	b084      	sub	sp, #16
     b44:	af00      	add	r7, sp, #0
     b46:	0002      	movs	r2, r0
     b48:	1dfb      	adds	r3, r7, #7
     b4a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	781a      	ldrb	r2, [r3, #0]
     b50:	4b44      	ldr	r3, [pc, #272]	; (c64 <_adc_interrupt_handler+0x124>)
     b52:	0092      	lsls	r2, r2, #2
     b54:	58d3      	ldr	r3, [r2, r3]
     b56:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	7e1b      	ldrb	r3, [r3, #24]
     b5e:	b2db      	uxtb	r3, r3
     b60:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     b62:	68bb      	ldr	r3, [r7, #8]
     b64:	2201      	movs	r2, #1
     b66:	4013      	ands	r3, r2
     b68:	d045      	beq.n	bf6 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	7edb      	ldrb	r3, [r3, #27]
     b6e:	001a      	movs	r2, r3
     b70:	2301      	movs	r3, #1
     b72:	4013      	ands	r3, r2
     b74:	d03f      	beq.n	bf6 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	7e9b      	ldrb	r3, [r3, #26]
     b7a:	001a      	movs	r2, r3
     b7c:	2301      	movs	r3, #1
     b7e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     b80:	d039      	beq.n	bf6 <_adc_interrupt_handler+0xb6>
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	2201      	movs	r2, #1
     b88:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	0018      	movs	r0, r3
     b90:	4b35      	ldr	r3, [pc, #212]	; (c68 <_adc_interrupt_handler+0x128>)
     b92:	4798      	blx	r3
     b94:	1e03      	subs	r3, r0, #0
     b96:	d1f9      	bne.n	b8c <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	695b      	ldr	r3, [r3, #20]
     b9c:	1c99      	adds	r1, r3, #2
     b9e:	68fa      	ldr	r2, [r7, #12]
     ba0:	6151      	str	r1, [r2, #20]
     ba2:	68fa      	ldr	r2, [r7, #12]
     ba4:	6812      	ldr	r2, [r2, #0]
     ba6:	8b52      	ldrh	r2, [r2, #26]
     ba8:	b292      	uxth	r2, r2
     baa:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     bac:	68fb      	ldr	r3, [r7, #12]
     bae:	8b1b      	ldrh	r3, [r3, #24]
     bb0:	b29b      	uxth	r3, r3
     bb2:	3b01      	subs	r3, #1
     bb4:	b29b      	uxth	r3, r3
     bb6:	68fa      	ldr	r2, [r7, #12]
     bb8:	1c19      	adds	r1, r3, #0
     bba:	8311      	strh	r1, [r2, #24]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d008      	beq.n	bd2 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
     bc0:	68fb      	ldr	r3, [r7, #12]
     bc2:	7f5b      	ldrb	r3, [r3, #29]
     bc4:	2b00      	cmp	r3, #0
     bc6:	d016      	beq.n	bf6 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	0018      	movs	r0, r3
     bcc:	4b27      	ldr	r3, [pc, #156]	; (c6c <_adc_interrupt_handler+0x12c>)
     bce:	4798      	blx	r3
     bd0:	e011      	b.n	bf6 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     bd2:	68fb      	ldr	r3, [r7, #12]
     bd4:	7f1b      	ldrb	r3, [r3, #28]
     bd6:	b2db      	uxtb	r3, r3
     bd8:	2b05      	cmp	r3, #5
     bda:	d10c      	bne.n	bf6 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     bdc:	68fb      	ldr	r3, [r7, #12]
     bde:	2200      	movs	r2, #0
     be0:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     be2:	68fb      	ldr	r3, [r7, #12]
     be4:	2101      	movs	r1, #1
     be6:	0018      	movs	r0, r3
     be8:	4b21      	ldr	r3, [pc, #132]	; (c70 <_adc_interrupt_handler+0x130>)
     bea:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     bec:	68fb      	ldr	r3, [r7, #12]
     bee:	689b      	ldr	r3, [r3, #8]
     bf0:	68fa      	ldr	r2, [r7, #12]
     bf2:	0010      	movs	r0, r2
     bf4:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	2204      	movs	r2, #4
     bfa:	4013      	ands	r3, r2
     bfc:	d014      	beq.n	c28 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	681b      	ldr	r3, [r3, #0]
     c02:	2204      	movs	r2, #4
     c04:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     c06:	68fb      	ldr	r3, [r7, #12]
     c08:	7edb      	ldrb	r3, [r3, #27]
     c0a:	001a      	movs	r2, r3
     c0c:	2302      	movs	r3, #2
     c0e:	4013      	ands	r3, r2
     c10:	d00a      	beq.n	c28 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     c12:	68fb      	ldr	r3, [r7, #12]
     c14:	7e9b      	ldrb	r3, [r3, #26]
     c16:	001a      	movs	r2, r3
     c18:	2302      	movs	r3, #2
     c1a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     c1c:	d004      	beq.n	c28 <_adc_interrupt_handler+0xe8>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     c1e:	68fb      	ldr	r3, [r7, #12]
     c20:	68db      	ldr	r3, [r3, #12]
     c22:	68fa      	ldr	r2, [r7, #12]
     c24:	0010      	movs	r0, r2
     c26:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     c28:	68bb      	ldr	r3, [r7, #8]
     c2a:	2202      	movs	r2, #2
     c2c:	4013      	ands	r3, r2
     c2e:	d014      	beq.n	c5a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	2202      	movs	r2, #2
     c36:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	7edb      	ldrb	r3, [r3, #27]
     c3c:	001a      	movs	r2, r3
     c3e:	2304      	movs	r3, #4
     c40:	4013      	ands	r3, r2
     c42:	d00a      	beq.n	c5a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     c44:	68fb      	ldr	r3, [r7, #12]
     c46:	7e9b      	ldrb	r3, [r3, #26]
     c48:	001a      	movs	r2, r3
     c4a:	2304      	movs	r3, #4
     c4c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     c4e:	d004      	beq.n	c5a <_adc_interrupt_handler+0x11a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     c50:	68fb      	ldr	r3, [r7, #12]
     c52:	691b      	ldr	r3, [r3, #16]
     c54:	68fa      	ldr	r2, [r7, #12]
     c56:	0010      	movs	r0, r2
     c58:	4798      	blx	r3
		}
	}
}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	46bd      	mov	sp, r7
     c5e:	b004      	add	sp, #16
     c60:	bd80      	pop	{r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	200002dc 	.word	0x200002dc
     c68:	00000aad 	.word	0x00000aad
     c6c:	00000ad5 	.word	0x00000ad5
     c70:	00000b1d 	.word	0x00000b1d

00000c74 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     c74:	b580      	push	{r7, lr}
     c76:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     c78:	2000      	movs	r0, #0
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <ADC_Handler+0x10>)
     c7c:	4798      	blx	r3
}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	46bd      	mov	sp, r7
     c82:	bd80      	pop	{r7, pc}
     c84:	00000b41 	.word	0x00000b41

00000c88 <system_gclk_chan_get_config_defaults>:
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
     c8e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	2200      	movs	r2, #0
     c94:	701a      	strb	r2, [r3, #0]
}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	46bd      	mov	sp, r7
     c9a:	b002      	add	sp, #8
     c9c:	bd80      	pop	{r7, pc}
	...

00000ca0 <system_apb_clock_set_mask>:
{
     ca0:	b580      	push	{r7, lr}
     ca2:	b082      	sub	sp, #8
     ca4:	af00      	add	r7, sp, #0
     ca6:	0002      	movs	r2, r0
     ca8:	6039      	str	r1, [r7, #0]
     caa:	1dfb      	adds	r3, r7, #7
     cac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2b01      	cmp	r3, #1
     cb4:	d00a      	beq.n	ccc <system_apb_clock_set_mask+0x2c>
     cb6:	2b02      	cmp	r3, #2
     cb8:	d00f      	beq.n	cda <system_apb_clock_set_mask+0x3a>
     cba:	2b00      	cmp	r3, #0
     cbc:	d114      	bne.n	ce8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     cbe:	4b0e      	ldr	r3, [pc, #56]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cc0:	4a0d      	ldr	r2, [pc, #52]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cc2:	6991      	ldr	r1, [r2, #24]
     cc4:	683a      	ldr	r2, [r7, #0]
     cc6:	430a      	orrs	r2, r1
     cc8:	619a      	str	r2, [r3, #24]
			break;
     cca:	e00f      	b.n	cec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     ccc:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cce:	4a0a      	ldr	r2, [pc, #40]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cd0:	69d1      	ldr	r1, [r2, #28]
     cd2:	683a      	ldr	r2, [r7, #0]
     cd4:	430a      	orrs	r2, r1
     cd6:	61da      	str	r2, [r3, #28]
			break;
     cd8:	e008      	b.n	cec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     cda:	4b07      	ldr	r3, [pc, #28]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cdc:	4a06      	ldr	r2, [pc, #24]	; (cf8 <system_apb_clock_set_mask+0x58>)
     cde:	6a11      	ldr	r1, [r2, #32]
     ce0:	683a      	ldr	r2, [r7, #0]
     ce2:	430a      	orrs	r2, r1
     ce4:	621a      	str	r2, [r3, #32]
			break;
     ce6:	e001      	b.n	cec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     ce8:	2317      	movs	r3, #23
     cea:	e000      	b.n	cee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     cec:	2300      	movs	r3, #0
}
     cee:	0018      	movs	r0, r3
     cf0:	46bd      	mov	sp, r7
     cf2:	b002      	add	sp, #8
     cf4:	bd80      	pop	{r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	40000400 	.word	0x40000400

00000cfc <system_pinmux_get_config_defaults>:
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b082      	sub	sp, #8
     d00:	af00      	add	r7, sp, #0
     d02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	2280      	movs	r2, #128	; 0x80
     d08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	2200      	movs	r2, #0
     d0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	2201      	movs	r2, #1
     d14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	2200      	movs	r2, #0
     d1a:	70da      	strb	r2, [r3, #3]
}
     d1c:	46c0      	nop			; (mov r8, r8)
     d1e:	46bd      	mov	sp, r7
     d20:	b002      	add	sp, #8
     d22:	bd80      	pop	{r7, pc}

00000d24 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     d24:	b580      	push	{r7, lr}
     d26:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d28:	4b05      	ldr	r3, [pc, #20]	; (d40 <system_is_debugger_present+0x1c>)
     d2a:	789b      	ldrb	r3, [r3, #2]
     d2c:	b2db      	uxtb	r3, r3
     d2e:	001a      	movs	r2, r3
     d30:	2302      	movs	r3, #2
     d32:	4013      	ands	r3, r2
     d34:	1e5a      	subs	r2, r3, #1
     d36:	4193      	sbcs	r3, r2
     d38:	b2db      	uxtb	r3, r3
}
     d3a:	0018      	movs	r0, r3
     d3c:	46bd      	mov	sp, r7
     d3e:	bd80      	pop	{r7, pc}
     d40:	41002000 	.word	0x41002000

00000d44 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     d44:	b580      	push	{r7, lr}
     d46:	b084      	sub	sp, #16
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d52:	68fb      	ldr	r3, [r7, #12]
     d54:	69db      	ldr	r3, [r3, #28]
     d56:	2207      	movs	r2, #7
     d58:	4013      	ands	r3, r2
     d5a:	1e5a      	subs	r2, r3, #1
     d5c:	4193      	sbcs	r3, r2
     d5e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     d60:	0018      	movs	r0, r3
     d62:	46bd      	mov	sp, r7
     d64:	b004      	add	sp, #16
     d66:	bd80      	pop	{r7, pc}

00000d68 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     d68:	b580      	push	{r7, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	af00      	add	r7, sp, #0
     d6e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     d70:	46c0      	nop			; (mov r8, r8)
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	0018      	movs	r0, r3
     d76:	4b04      	ldr	r3, [pc, #16]	; (d88 <_i2c_master_wait_for_sync+0x20>)
     d78:	4798      	blx	r3
     d7a:	1e03      	subs	r3, r0, #0
     d7c:	d1f9      	bne.n	d72 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	46bd      	mov	sp, r7
     d82:	b002      	add	sp, #8
     d84:	bd80      	pop	{r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	00000d45 	.word	0x00000d45

00000d8c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8e:	b097      	sub	sp, #92	; 0x5c
     d90:	af00      	add	r7, sp, #0
     d92:	6178      	str	r0, [r7, #20]
     d94:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     d96:	2300      	movs	r3, #0
     d98:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     d9a:	2300      	movs	r3, #0
     d9c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     d9e:	2300      	movs	r3, #0
     da0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     da2:	233b      	movs	r3, #59	; 0x3b
     da4:	2210      	movs	r2, #16
     da6:	4694      	mov	ip, r2
     da8:	44bc      	add	ip, r7
     daa:	4463      	add	r3, ip
     dac:	2200      	movs	r2, #0
     dae:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     db0:	697b      	ldr	r3, [r7, #20]
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     db6:	697b      	ldr	r3, [r7, #20]
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     dbc:	2323      	movs	r3, #35	; 0x23
     dbe:	2210      	movs	r2, #16
     dc0:	18ba      	adds	r2, r7, r2
     dc2:	18d4      	adds	r4, r2, r3
     dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dc6:	0018      	movs	r0, r3
     dc8:	4bc0      	ldr	r3, [pc, #768]	; (10cc <_i2c_master_set_config+0x340>)
     dca:	4798      	blx	r3
     dcc:	0003      	movs	r3, r0
     dce:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     dd0:	230c      	movs	r3, #12
     dd2:	2210      	movs	r2, #16
     dd4:	4694      	mov	ip, r2
     dd6:	44bc      	add	ip, r7
     dd8:	4463      	add	r3, ip
     dda:	0018      	movs	r0, r3
     ddc:	4bbc      	ldr	r3, [pc, #752]	; (10d0 <_i2c_master_set_config+0x344>)
     dde:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     de0:	693b      	ldr	r3, [r7, #16]
     de2:	69db      	ldr	r3, [r3, #28]
     de4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     de6:	693b      	ldr	r3, [r7, #16]
     de8:	6a1b      	ldr	r3, [r3, #32]
     dea:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     dee:	2b00      	cmp	r3, #0
     df0:	d106      	bne.n	e00 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     df4:	2100      	movs	r1, #0
     df6:	0018      	movs	r0, r3
     df8:	4bb6      	ldr	r3, [pc, #728]	; (10d4 <_i2c_master_set_config+0x348>)
     dfa:	4798      	blx	r3
     dfc:	0003      	movs	r3, r0
     dfe:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e02:	b2da      	uxtb	r2, r3
     e04:	230c      	movs	r3, #12
     e06:	2110      	movs	r1, #16
     e08:	468c      	mov	ip, r1
     e0a:	44bc      	add	ip, r7
     e0c:	4463      	add	r3, ip
     e0e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e10:	230c      	movs	r3, #12
     e12:	2210      	movs	r2, #16
     e14:	4694      	mov	ip, r2
     e16:	44bc      	add	ip, r7
     e18:	4463      	add	r3, ip
     e1a:	2202      	movs	r2, #2
     e1c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e20:	0c1b      	lsrs	r3, r3, #16
     e22:	b2db      	uxtb	r3, r3
     e24:	220c      	movs	r2, #12
     e26:	2110      	movs	r1, #16
     e28:	468c      	mov	ip, r1
     e2a:	44bc      	add	ip, r7
     e2c:	4462      	add	r2, ip
     e2e:	0011      	movs	r1, r2
     e30:	0018      	movs	r0, r3
     e32:	4ba9      	ldr	r3, [pc, #676]	; (10d8 <_i2c_master_set_config+0x34c>)
     e34:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     e38:	2b00      	cmp	r3, #0
     e3a:	d106      	bne.n	e4a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e3e:	2101      	movs	r1, #1
     e40:	0018      	movs	r0, r3
     e42:	4ba4      	ldr	r3, [pc, #656]	; (10d4 <_i2c_master_set_config+0x348>)
     e44:	4798      	blx	r3
     e46:	0003      	movs	r3, r0
     e48:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     e4c:	b2da      	uxtb	r2, r3
     e4e:	230c      	movs	r3, #12
     e50:	2110      	movs	r1, #16
     e52:	468c      	mov	ip, r1
     e54:	44bc      	add	ip, r7
     e56:	4463      	add	r3, ip
     e58:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e5a:	230c      	movs	r3, #12
     e5c:	2210      	movs	r2, #16
     e5e:	4694      	mov	ip, r2
     e60:	44bc      	add	ip, r7
     e62:	4463      	add	r3, ip
     e64:	2202      	movs	r2, #2
     e66:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     e6a:	0c1b      	lsrs	r3, r3, #16
     e6c:	b2db      	uxtb	r3, r3
     e6e:	220c      	movs	r2, #12
     e70:	2110      	movs	r1, #16
     e72:	468c      	mov	ip, r1
     e74:	44bc      	add	ip, r7
     e76:	4462      	add	r2, ip
     e78:	0011      	movs	r1, r2
     e7a:	0018      	movs	r0, r3
     e7c:	4b96      	ldr	r3, [pc, #600]	; (10d8 <_i2c_master_set_config+0x34c>)
     e7e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     e80:	693b      	ldr	r3, [r7, #16]
     e82:	8a9a      	ldrh	r2, [r3, #20]
     e84:	697b      	ldr	r3, [r7, #20]
     e86:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     e88:	693b      	ldr	r3, [r7, #16]
     e8a:	8ada      	ldrh	r2, [r3, #22]
     e8c:	697b      	ldr	r3, [r7, #20]
     e8e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     e90:	693b      	ldr	r3, [r7, #16]
     e92:	7e1b      	ldrb	r3, [r3, #24]
     e94:	2b00      	cmp	r3, #0
     e96:	d103      	bne.n	ea0 <_i2c_master_set_config+0x114>
     e98:	4b90      	ldr	r3, [pc, #576]	; (10dc <_i2c_master_set_config+0x350>)
     e9a:	4798      	blx	r3
     e9c:	1e03      	subs	r3, r0, #0
     e9e:	d002      	beq.n	ea6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     ea0:	2380      	movs	r3, #128	; 0x80
     ea2:	657b      	str	r3, [r7, #84]	; 0x54
     ea4:	e001      	b.n	eaa <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     ea6:	2300      	movs	r3, #0
     ea8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     eaa:	693b      	ldr	r3, [r7, #16]
     eac:	691b      	ldr	r3, [r3, #16]
     eae:	2b00      	cmp	r3, #0
     eb0:	d004      	beq.n	ebc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     eb2:	693b      	ldr	r3, [r7, #16]
     eb4:	691b      	ldr	r3, [r3, #16]
     eb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     eb8:	4313      	orrs	r3, r2
     eba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     ebc:	693b      	ldr	r3, [r7, #16]
     ebe:	689b      	ldr	r3, [r3, #8]
     ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     ec2:	4313      	orrs	r3, r2
     ec4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     ec6:	693b      	ldr	r3, [r7, #16]
     ec8:	2224      	movs	r2, #36	; 0x24
     eca:	5c9b      	ldrb	r3, [r3, r2]
     ecc:	2b00      	cmp	r3, #0
     ece:	d004      	beq.n	eda <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     ed2:	2280      	movs	r2, #128	; 0x80
     ed4:	05d2      	lsls	r2, r2, #23
     ed6:	4313      	orrs	r3, r2
     ed8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     eda:	693b      	ldr	r3, [r7, #16]
     edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ede:	2b00      	cmp	r3, #0
     ee0:	d004      	beq.n	eec <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     ee2:	693b      	ldr	r3, [r7, #16]
     ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ee6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     ee8:	4313      	orrs	r3, r2
     eea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     eec:	693b      	ldr	r3, [r7, #16]
     eee:	222c      	movs	r2, #44	; 0x2c
     ef0:	5c9b      	ldrb	r3, [r3, r2]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d105      	bne.n	f02 <_i2c_master_set_config+0x176>
     ef6:	693b      	ldr	r3, [r7, #16]
     ef8:	689a      	ldr	r2, [r3, #8]
     efa:	2380      	movs	r3, #128	; 0x80
     efc:	049b      	lsls	r3, r3, #18
     efe:	429a      	cmp	r2, r3
     f00:	d104      	bne.n	f0c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f04:	2280      	movs	r2, #128	; 0x80
     f06:	0512      	lsls	r2, r2, #20
     f08:	4313      	orrs	r3, r2
     f0a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     f0c:	693b      	ldr	r3, [r7, #16]
     f0e:	222d      	movs	r2, #45	; 0x2d
     f10:	5c9b      	ldrb	r3, [r3, r2]
     f12:	2b00      	cmp	r3, #0
     f14:	d004      	beq.n	f20 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f18:	2280      	movs	r2, #128	; 0x80
     f1a:	0412      	lsls	r2, r2, #16
     f1c:	4313      	orrs	r3, r2
     f1e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     f20:	693b      	ldr	r3, [r7, #16]
     f22:	222e      	movs	r2, #46	; 0x2e
     f24:	5c9b      	ldrb	r3, [r3, r2]
     f26:	2b00      	cmp	r3, #0
     f28:	d004      	beq.n	f34 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f2c:	2280      	movs	r2, #128	; 0x80
     f2e:	03d2      	lsls	r2, r2, #15
     f30:	4313      	orrs	r3, r2
     f32:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f36:	681a      	ldr	r2, [r3, #0]
     f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f3a:	431a      	orrs	r2, r3
     f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f3e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f42:	2280      	movs	r2, #128	; 0x80
     f44:	0052      	lsls	r2, r2, #1
     f46:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     f48:	2323      	movs	r3, #35	; 0x23
     f4a:	2210      	movs	r2, #16
     f4c:	4694      	mov	ip, r2
     f4e:	44bc      	add	ip, r7
     f50:	4463      	add	r3, ip
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	3314      	adds	r3, #20
     f56:	b2db      	uxtb	r3, r3
     f58:	0018      	movs	r0, r3
     f5a:	4b61      	ldr	r3, [pc, #388]	; (10e0 <_i2c_master_set_config+0x354>)
     f5c:	4798      	blx	r3
     f5e:	0003      	movs	r3, r0
     f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     f62:	693b      	ldr	r3, [r7, #16]
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	22fa      	movs	r2, #250	; 0xfa
     f68:	0092      	lsls	r2, r2, #2
     f6a:	4353      	muls	r3, r2
     f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     f6e:	693b      	ldr	r3, [r7, #16]
     f70:	685b      	ldr	r3, [r3, #4]
     f72:	22fa      	movs	r2, #250	; 0xfa
     f74:	0092      	lsls	r2, r2, #2
     f76:	4353      	muls	r3, r2
     f78:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
     f7a:	693b      	ldr	r3, [r7, #16]
     f7c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
     f7e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
     f80:	4b58      	ldr	r3, [pc, #352]	; (10e4 <_i2c_master_set_config+0x358>)
     f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     f84:	4798      	blx	r3
     f86:	0005      	movs	r5, r0
     f88:	000e      	movs	r6, r1
     f8a:	4b56      	ldr	r3, [pc, #344]	; (10e4 <_i2c_master_set_config+0x358>)
     f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     f8e:	4798      	blx	r3
     f90:	60b8      	str	r0, [r7, #8]
     f92:	60f9      	str	r1, [r7, #12]
     f94:	4b53      	ldr	r3, [pc, #332]	; (10e4 <_i2c_master_set_config+0x358>)
     f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     f98:	4798      	blx	r3
     f9a:	4c53      	ldr	r4, [pc, #332]	; (10e8 <_i2c_master_set_config+0x35c>)
     f9c:	4a53      	ldr	r2, [pc, #332]	; (10ec <_i2c_master_set_config+0x360>)
     f9e:	4b54      	ldr	r3, [pc, #336]	; (10f0 <_i2c_master_set_config+0x364>)
     fa0:	47a0      	blx	r4
     fa2:	0003      	movs	r3, r0
     fa4:	000c      	movs	r4, r1
     fa6:	603b      	str	r3, [r7, #0]
     fa8:	607c      	str	r4, [r7, #4]
     faa:	4b4e      	ldr	r3, [pc, #312]	; (10e4 <_i2c_master_set_config+0x358>)
     fac:	6a38      	ldr	r0, [r7, #32]
     fae:	4798      	blx	r3
     fb0:	0002      	movs	r2, r0
     fb2:	000b      	movs	r3, r1
     fb4:	4c4c      	ldr	r4, [pc, #304]	; (10e8 <_i2c_master_set_config+0x35c>)
     fb6:	6838      	ldr	r0, [r7, #0]
     fb8:	6879      	ldr	r1, [r7, #4]
     fba:	47a0      	blx	r4
     fbc:	0003      	movs	r3, r0
     fbe:	000c      	movs	r4, r1
     fc0:	0018      	movs	r0, r3
     fc2:	0021      	movs	r1, r4
     fc4:	4c4b      	ldr	r4, [pc, #300]	; (10f4 <_i2c_master_set_config+0x368>)
     fc6:	2200      	movs	r2, #0
     fc8:	4b4b      	ldr	r3, [pc, #300]	; (10f8 <_i2c_master_set_config+0x36c>)
     fca:	47a0      	blx	r4
     fcc:	0003      	movs	r3, r0
     fce:	000c      	movs	r4, r1
     fd0:	001a      	movs	r2, r3
     fd2:	0023      	movs	r3, r4
     fd4:	4c44      	ldr	r4, [pc, #272]	; (10e8 <_i2c_master_set_config+0x35c>)
     fd6:	68b8      	ldr	r0, [r7, #8]
     fd8:	68f9      	ldr	r1, [r7, #12]
     fda:	47a0      	blx	r4
     fdc:	0003      	movs	r3, r0
     fde:	000c      	movs	r4, r1
     fe0:	001a      	movs	r2, r3
     fe2:	0023      	movs	r3, r4
     fe4:	4c45      	ldr	r4, [pc, #276]	; (10fc <_i2c_master_set_config+0x370>)
     fe6:	0028      	movs	r0, r5
     fe8:	0031      	movs	r1, r6
     fea:	47a0      	blx	r4
     fec:	0003      	movs	r3, r0
     fee:	000c      	movs	r4, r1
     ff0:	001d      	movs	r5, r3
     ff2:	0026      	movs	r6, r4
     ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ff6:	005a      	lsls	r2, r3, #1
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <_i2c_master_set_config+0x358>)
     ffa:	0010      	movs	r0, r2
     ffc:	4798      	blx	r3
     ffe:	0002      	movs	r2, r0
    1000:	000b      	movs	r3, r1
    1002:	4c3c      	ldr	r4, [pc, #240]	; (10f4 <_i2c_master_set_config+0x368>)
    1004:	0028      	movs	r0, r5
    1006:	0031      	movs	r1, r6
    1008:	47a0      	blx	r4
    100a:	0003      	movs	r3, r0
    100c:	000c      	movs	r4, r1
    100e:	0018      	movs	r0, r3
    1010:	0021      	movs	r1, r4
    1012:	4c3a      	ldr	r4, [pc, #232]	; (10fc <_i2c_master_set_config+0x370>)
    1014:	2200      	movs	r2, #0
    1016:	4b3a      	ldr	r3, [pc, #232]	; (1100 <_i2c_master_set_config+0x374>)
    1018:	47a0      	blx	r4
    101a:	0003      	movs	r3, r0
    101c:	000c      	movs	r4, r1
    101e:	001d      	movs	r5, r3
    1020:	0026      	movs	r6, r4
    1022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1024:	005a      	lsls	r2, r3, #1
    1026:	4b2f      	ldr	r3, [pc, #188]	; (10e4 <_i2c_master_set_config+0x358>)
    1028:	0010      	movs	r0, r2
    102a:	4798      	blx	r3
    102c:	0002      	movs	r2, r0
    102e:	000b      	movs	r3, r1
    1030:	4c34      	ldr	r4, [pc, #208]	; (1104 <_i2c_master_set_config+0x378>)
    1032:	0028      	movs	r0, r5
    1034:	0031      	movs	r1, r6
    1036:	47a0      	blx	r4
    1038:	0003      	movs	r3, r0
    103a:	000c      	movs	r4, r1
    103c:	0019      	movs	r1, r3
    103e:	0022      	movs	r2, r4
    1040:	4b31      	ldr	r3, [pc, #196]	; (1108 <_i2c_master_set_config+0x37c>)
    1042:	0008      	movs	r0, r1
    1044:	0011      	movs	r1, r2
    1046:	4798      	blx	r3
    1048:	0003      	movs	r3, r0
    104a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    104c:	693b      	ldr	r3, [r7, #16]
    104e:	689a      	ldr	r2, [r3, #8]
    1050:	2380      	movs	r3, #128	; 0x80
    1052:	049b      	lsls	r3, r3, #18
    1054:	429a      	cmp	r2, r3
    1056:	d16a      	bne.n	112e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1058:	4b22      	ldr	r3, [pc, #136]	; (10e4 <_i2c_master_set_config+0x358>)
    105a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    105c:	4798      	blx	r3
    105e:	4c25      	ldr	r4, [pc, #148]	; (10f4 <_i2c_master_set_config+0x368>)
    1060:	0002      	movs	r2, r0
    1062:	000b      	movs	r3, r1
    1064:	47a0      	blx	r4
    1066:	0003      	movs	r3, r0
    1068:	000c      	movs	r4, r1
    106a:	001d      	movs	r5, r3
    106c:	0026      	movs	r6, r4
    106e:	4b1d      	ldr	r3, [pc, #116]	; (10e4 <_i2c_master_set_config+0x358>)
    1070:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1072:	4798      	blx	r3
    1074:	4c1c      	ldr	r4, [pc, #112]	; (10e8 <_i2c_master_set_config+0x35c>)
    1076:	2200      	movs	r2, #0
    1078:	4b24      	ldr	r3, [pc, #144]	; (110c <_i2c_master_set_config+0x380>)
    107a:	47a0      	blx	r4
    107c:	0003      	movs	r3, r0
    107e:	000c      	movs	r4, r1
    1080:	001a      	movs	r2, r3
    1082:	0023      	movs	r3, r4
    1084:	4c1f      	ldr	r4, [pc, #124]	; (1104 <_i2c_master_set_config+0x378>)
    1086:	0028      	movs	r0, r5
    1088:	0031      	movs	r1, r6
    108a:	47a0      	blx	r4
    108c:	0003      	movs	r3, r0
    108e:	000c      	movs	r4, r1
    1090:	0018      	movs	r0, r3
    1092:	0021      	movs	r1, r4
    1094:	4c19      	ldr	r4, [pc, #100]	; (10fc <_i2c_master_set_config+0x370>)
    1096:	2200      	movs	r2, #0
    1098:	4b19      	ldr	r3, [pc, #100]	; (1100 <_i2c_master_set_config+0x374>)
    109a:	47a0      	blx	r4
    109c:	0003      	movs	r3, r0
    109e:	000c      	movs	r4, r1
    10a0:	0019      	movs	r1, r3
    10a2:	0022      	movs	r2, r4
    10a4:	4b18      	ldr	r3, [pc, #96]	; (1108 <_i2c_master_set_config+0x37c>)
    10a6:	0008      	movs	r0, r1
    10a8:	0011      	movs	r1, r2
    10aa:	4798      	blx	r3
    10ac:	0003      	movs	r3, r0
    10ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    10b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10b2:	2b00      	cmp	r3, #0
    10b4:	d02e      	beq.n	1114 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    10b6:	4b16      	ldr	r3, [pc, #88]	; (1110 <_i2c_master_set_config+0x384>)
    10b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    10ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    10bc:	4798      	blx	r3
    10be:	0003      	movs	r3, r0
    10c0:	1e9a      	subs	r2, r3, #2
    10c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    10c4:	1ad3      	subs	r3, r2, r3
    10c6:	653b      	str	r3, [r7, #80]	; 0x50
    10c8:	e031      	b.n	112e <_i2c_master_set_config+0x3a2>
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	00003dc1 	.word	0x00003dc1
    10d0:	00000cfd 	.word	0x00000cfd
    10d4:	00003c05 	.word	0x00003c05
    10d8:	000059b1 	.word	0x000059b1
    10dc:	00000d25 	.word	0x00000d25
    10e0:	000057e9 	.word	0x000057e9
    10e4:	00007f6d 	.word	0x00007f6d
    10e8:	000073d9 	.word	0x000073d9
    10ec:	e826d695 	.word	0xe826d695
    10f0:	3e112e0b 	.word	0x3e112e0b
    10f4:	00006751 	.word	0x00006751
    10f8:	40240000 	.word	0x40240000
    10fc:	000078d9 	.word	0x000078d9
    1100:	3ff00000 	.word	0x3ff00000
    1104:	00006d71 	.word	0x00006d71
    1108:	00007f05 	.word	0x00007f05
    110c:	40080000 	.word	0x40080000
    1110:	00006411 	.word	0x00006411
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1116:	005a      	lsls	r2, r3, #1
    1118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    111a:	18d3      	adds	r3, r2, r3
    111c:	1e5a      	subs	r2, r3, #1
    111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1120:	0059      	lsls	r1, r3, #1
    1122:	4b1d      	ldr	r3, [pc, #116]	; (1198 <_i2c_master_set_config+0x40c>)
    1124:	0010      	movs	r0, r2
    1126:	4798      	blx	r3
    1128:	0003      	movs	r3, r0
    112a:	3b01      	subs	r3, #1
    112c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    112e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1130:	2bff      	cmp	r3, #255	; 0xff
    1132:	dc08      	bgt.n	1146 <_i2c_master_set_config+0x3ba>
    1134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1136:	2b00      	cmp	r3, #0
    1138:	db05      	blt.n	1146 <_i2c_master_set_config+0x3ba>
    113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    113c:	2bff      	cmp	r3, #255	; 0xff
    113e:	dc02      	bgt.n	1146 <_i2c_master_set_config+0x3ba>
    1140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1142:	2b00      	cmp	r3, #0
    1144:	da06      	bge.n	1154 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1146:	233b      	movs	r3, #59	; 0x3b
    1148:	2210      	movs	r2, #16
    114a:	4694      	mov	ip, r2
    114c:	44bc      	add	ip, r7
    114e:	4463      	add	r3, ip
    1150:	2240      	movs	r2, #64	; 0x40
    1152:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1154:	233b      	movs	r3, #59	; 0x3b
    1156:	2210      	movs	r2, #16
    1158:	4694      	mov	ip, r2
    115a:	44bc      	add	ip, r7
    115c:	4463      	add	r3, ip
    115e:	781b      	ldrb	r3, [r3, #0]
    1160:	2b40      	cmp	r3, #64	; 0x40
    1162:	d00e      	beq.n	1182 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1166:	22ff      	movs	r2, #255	; 0xff
    1168:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    116c:	041b      	lsls	r3, r3, #16
    116e:	0019      	movs	r1, r3
    1170:	23ff      	movs	r3, #255	; 0xff
    1172:	041b      	lsls	r3, r3, #16
    1174:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1176:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    117a:	0612      	lsls	r2, r2, #24
    117c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1180:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1182:	233b      	movs	r3, #59	; 0x3b
    1184:	2210      	movs	r2, #16
    1186:	4694      	mov	ip, r2
    1188:	44bc      	add	ip, r7
    118a:	4463      	add	r3, ip
    118c:	781b      	ldrb	r3, [r3, #0]
}
    118e:	0018      	movs	r0, r3
    1190:	46bd      	mov	sp, r7
    1192:	b017      	add	sp, #92	; 0x5c
    1194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	00006411 	.word	0x00006411

0000119c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    119c:	b590      	push	{r4, r7, lr}
    119e:	b08b      	sub	sp, #44	; 0x2c
    11a0:	af00      	add	r7, sp, #0
    11a2:	60f8      	str	r0, [r7, #12]
    11a4:	60b9      	str	r1, [r7, #8]
    11a6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    11a8:	68fb      	ldr	r3, [r7, #12]
    11aa:	68ba      	ldr	r2, [r7, #8]
    11ac:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11ae:	68fb      	ldr	r3, [r7, #12]
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11b4:	68fb      	ldr	r3, [r7, #12]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	0018      	movs	r0, r3
    11ba:	4b3b      	ldr	r3, [pc, #236]	; (12a8 <i2c_master_init+0x10c>)
    11bc:	4798      	blx	r3
    11be:	0003      	movs	r3, r0
    11c0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11c2:	6a3b      	ldr	r3, [r7, #32]
    11c4:	3302      	adds	r3, #2
    11c6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11c8:	6a3b      	ldr	r3, [r7, #32]
    11ca:	3314      	adds	r3, #20
    11cc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11ce:	2201      	movs	r2, #1
    11d0:	69fb      	ldr	r3, [r7, #28]
    11d2:	409a      	lsls	r2, r3
    11d4:	0013      	movs	r3, r2
    11d6:	0019      	movs	r1, r3
    11d8:	2002      	movs	r0, #2
    11da:	4b34      	ldr	r3, [pc, #208]	; (12ac <i2c_master_init+0x110>)
    11dc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    11de:	2314      	movs	r3, #20
    11e0:	18fb      	adds	r3, r7, r3
    11e2:	0018      	movs	r0, r3
    11e4:	4b32      	ldr	r3, [pc, #200]	; (12b0 <i2c_master_init+0x114>)
    11e6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	7b1a      	ldrb	r2, [r3, #12]
    11ec:	2314      	movs	r3, #20
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    11f2:	69bb      	ldr	r3, [r7, #24]
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2214      	movs	r2, #20
    11f8:	18ba      	adds	r2, r7, r2
    11fa:	0011      	movs	r1, r2
    11fc:	0018      	movs	r0, r3
    11fe:	4b2d      	ldr	r3, [pc, #180]	; (12b4 <i2c_master_init+0x118>)
    1200:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1202:	69bb      	ldr	r3, [r7, #24]
    1204:	b2db      	uxtb	r3, r3
    1206:	0018      	movs	r0, r3
    1208:	4b2b      	ldr	r3, [pc, #172]	; (12b8 <i2c_master_init+0x11c>)
    120a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	7b1b      	ldrb	r3, [r3, #12]
    1210:	2100      	movs	r1, #0
    1212:	0018      	movs	r0, r3
    1214:	4b29      	ldr	r3, [pc, #164]	; (12bc <i2c_master_init+0x120>)
    1216:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    121a:	681b      	ldr	r3, [r3, #0]
    121c:	2202      	movs	r2, #2
    121e:	4013      	ands	r3, r2
    1220:	d001      	beq.n	1226 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1222:	231c      	movs	r3, #28
    1224:	e03b      	b.n	129e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	2201      	movs	r2, #1
    122c:	4013      	ands	r3, r2
    122e:	d001      	beq.n	1234 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1230:	2305      	movs	r3, #5
    1232:	e034      	b.n	129e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	2217      	movs	r2, #23
    123a:	18bc      	adds	r4, r7, r2
    123c:	0018      	movs	r0, r3
    123e:	4b1a      	ldr	r3, [pc, #104]	; (12a8 <i2c_master_init+0x10c>)
    1240:	4798      	blx	r3
    1242:	0003      	movs	r3, r0
    1244:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1246:	4a1e      	ldr	r2, [pc, #120]	; (12c0 <i2c_master_init+0x124>)
    1248:	2317      	movs	r3, #23
    124a:	18fb      	adds	r3, r7, r3
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	0011      	movs	r1, r2
    1250:	0018      	movs	r0, r3
    1252:	4b1c      	ldr	r3, [pc, #112]	; (12c4 <i2c_master_init+0x128>)
    1254:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1256:	2317      	movs	r3, #23
    1258:	18fb      	adds	r3, r7, r3
    125a:	781a      	ldrb	r2, [r3, #0]
    125c:	4b1a      	ldr	r3, [pc, #104]	; (12c8 <i2c_master_init+0x12c>)
    125e:	0092      	lsls	r2, r2, #2
    1260:	68f9      	ldr	r1, [r7, #12]
    1262:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	2200      	movs	r2, #0
    1268:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    126a:	68fb      	ldr	r3, [r7, #12]
    126c:	2200      	movs	r2, #0
    126e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	2200      	movs	r2, #0
    1274:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	2200      	movs	r2, #0
    127a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	2225      	movs	r2, #37	; 0x25
    1280:	2100      	movs	r1, #0
    1282:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    1284:	68fb      	ldr	r3, [r7, #12]
    1286:	2200      	movs	r2, #0
    1288:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    128c:	2214      	movs	r2, #20
    128e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1290:	687a      	ldr	r2, [r7, #4]
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	0011      	movs	r1, r2
    1296:	0018      	movs	r0, r3
    1298:	4b0c      	ldr	r3, [pc, #48]	; (12cc <i2c_master_init+0x130>)
    129a:	4798      	blx	r3
    129c:	0003      	movs	r3, r0
}
    129e:	0018      	movs	r0, r3
    12a0:	46bd      	mov	sp, r7
    12a2:	b00b      	add	sp, #44	; 0x2c
    12a4:	bd90      	pop	{r4, r7, pc}
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	00003dc1 	.word	0x00003dc1
    12ac:	00000ca1 	.word	0x00000ca1
    12b0:	00000c89 	.word	0x00000c89
    12b4:	000056c5 	.word	0x000056c5
    12b8:	00005709 	.word	0x00005709
    12bc:	00003b79 	.word	0x00003b79
    12c0:	00001aed 	.word	0x00001aed
    12c4:	00003e25 	.word	0x00003e25
    12c8:	200003c0 	.word	0x200003c0
    12cc:	00000d8d 	.word	0x00000d8d

000012d0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    12d0:	b580      	push	{r7, lr}
    12d2:	b084      	sub	sp, #16
    12d4:	af00      	add	r7, sp, #0
    12d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    12de:	68fb      	ldr	r3, [r7, #12]
    12e0:	7e1b      	ldrb	r3, [r3, #24]
    12e2:	b2db      	uxtb	r3, r3
    12e4:	001a      	movs	r2, r3
    12e6:	2302      	movs	r3, #2
    12e8:	4013      	ands	r3, r2
    12ea:	d00b      	beq.n	1304 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	2202      	movs	r2, #2
    12f0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    12f2:	68fb      	ldr	r3, [r7, #12]
    12f4:	8b5b      	ldrh	r3, [r3, #26]
    12f6:	b29b      	uxth	r3, r3
    12f8:	001a      	movs	r2, r3
    12fa:	2302      	movs	r3, #2
    12fc:	4013      	ands	r3, r2
    12fe:	d011      	beq.n	1324 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1300:	2341      	movs	r3, #65	; 0x41
    1302:	e010      	b.n	1326 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	8b5b      	ldrh	r3, [r3, #26]
    1308:	b29b      	uxth	r3, r3
    130a:	001a      	movs	r2, r3
    130c:	2304      	movs	r3, #4
    130e:	4013      	ands	r3, r2
    1310:	d008      	beq.n	1324 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	685b      	ldr	r3, [r3, #4]
    1316:	22c0      	movs	r2, #192	; 0xc0
    1318:	0292      	lsls	r2, r2, #10
    131a:	431a      	orrs	r2, r3
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1320:	2318      	movs	r3, #24
    1322:	e000      	b.n	1326 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1324:	2300      	movs	r3, #0
}
    1326:	0018      	movs	r0, r3
    1328:	46bd      	mov	sp, r7
    132a:	b004      	add	sp, #16
    132c:	bd80      	pop	{r7, pc}

0000132e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    132e:	b580      	push	{r7, lr}
    1330:	b084      	sub	sp, #16
    1332:	af00      	add	r7, sp, #0
    1334:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    133c:	230e      	movs	r3, #14
    133e:	18fb      	adds	r3, r7, r3
    1340:	2200      	movs	r2, #0
    1342:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1344:	e00f      	b.n	1366 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1346:	230e      	movs	r3, #14
    1348:	18fb      	adds	r3, r7, r3
    134a:	220e      	movs	r2, #14
    134c:	18ba      	adds	r2, r7, r2
    134e:	8812      	ldrh	r2, [r2, #0]
    1350:	3201      	adds	r2, #1
    1352:	801a      	strh	r2, [r3, #0]
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	891b      	ldrh	r3, [r3, #8]
    1358:	220e      	movs	r2, #14
    135a:	18ba      	adds	r2, r7, r2
    135c:	8812      	ldrh	r2, [r2, #0]
    135e:	429a      	cmp	r2, r3
    1360:	d301      	bcc.n	1366 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1362:	2312      	movs	r3, #18
    1364:	e00e      	b.n	1384 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1366:	68bb      	ldr	r3, [r7, #8]
    1368:	7e1b      	ldrb	r3, [r3, #24]
    136a:	b2db      	uxtb	r3, r3
    136c:	001a      	movs	r2, r3
    136e:	2301      	movs	r3, #1
    1370:	4013      	ands	r3, r2
    1372:	d106      	bne.n	1382 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1374:	68bb      	ldr	r3, [r7, #8]
    1376:	7e1b      	ldrb	r3, [r3, #24]
    1378:	b2db      	uxtb	r3, r3
    137a:	001a      	movs	r2, r3
    137c:	2302      	movs	r3, #2
    137e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1380:	d0e1      	beq.n	1346 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    1382:	2300      	movs	r3, #0
}
    1384:	0018      	movs	r0, r3
    1386:	46bd      	mov	sp, r7
    1388:	b004      	add	sp, #16
    138a:	bd80      	pop	{r7, pc}

0000138c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    138c:	b590      	push	{r4, r7, lr}
    138e:	b085      	sub	sp, #20
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
    1394:	000a      	movs	r2, r1
    1396:	1cfb      	adds	r3, r7, #3
    1398:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	685b      	ldr	r3, [r3, #4]
    13a4:	2280      	movs	r2, #128	; 0x80
    13a6:	02d2      	lsls	r2, r2, #11
    13a8:	431a      	orrs	r2, r3
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13ae:	1cfb      	adds	r3, r7, #3
    13b0:	781a      	ldrb	r2, [r3, #0]
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13b6:	230b      	movs	r3, #11
    13b8:	18fc      	adds	r4, r7, r3
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	0018      	movs	r0, r3
    13be:	4b07      	ldr	r3, [pc, #28]	; (13dc <_i2c_master_send_hs_master_code+0x50>)
    13c0:	4798      	blx	r3
    13c2:	0003      	movs	r3, r0
    13c4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	2201      	movs	r2, #1
    13ca:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    13cc:	230b      	movs	r3, #11
    13ce:	18fb      	adds	r3, r7, r3
    13d0:	781b      	ldrb	r3, [r3, #0]
}
    13d2:	0018      	movs	r0, r3
    13d4:	46bd      	mov	sp, r7
    13d6:	b005      	add	sp, #20
    13d8:	bd90      	pop	{r4, r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	0000132f 	.word	0x0000132f

000013e0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    13e0:	b590      	push	{r4, r7, lr}
    13e2:	b087      	sub	sp, #28
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	681b      	ldr	r3, [r3, #0]
    13ee:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    13f0:	2314      	movs	r3, #20
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	683a      	ldr	r2, [r7, #0]
    13f6:	8852      	ldrh	r2, [r2, #2]
    13f8:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    13fa:	2312      	movs	r3, #18
    13fc:	18fb      	adds	r3, r7, r3
    13fe:	2200      	movs	r2, #0
    1400:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	681b      	ldr	r3, [r3, #0]
    1406:	011b      	lsls	r3, r3, #4
    1408:	0fdb      	lsrs	r3, r3, #31
    140a:	b2db      	uxtb	r3, r3
    140c:	001a      	movs	r2, r3
    140e:	230b      	movs	r3, #11
    1410:	18fb      	adds	r3, r7, r3
    1412:	1e51      	subs	r1, r2, #1
    1414:	418a      	sbcs	r2, r1
    1416:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1418:	683b      	ldr	r3, [r7, #0]
    141a:	7a5b      	ldrb	r3, [r3, #9]
    141c:	2b00      	cmp	r3, #0
    141e:	d006      	beq.n	142e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1420:	683b      	ldr	r3, [r7, #0]
    1422:	7a9a      	ldrb	r2, [r3, #10]
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	0011      	movs	r1, r2
    1428:	0018      	movs	r0, r3
    142a:	4b85      	ldr	r3, [pc, #532]	; (1640 <_i2c_master_read_packet+0x260>)
    142c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	685b      	ldr	r3, [r3, #4]
    1432:	4a84      	ldr	r2, [pc, #528]	; (1644 <_i2c_master_read_packet+0x264>)
    1434:	401a      	ands	r2, r3
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    143a:	683b      	ldr	r3, [r7, #0]
    143c:	7a1b      	ldrb	r3, [r3, #8]
    143e:	2b00      	cmp	r3, #0
    1440:	d042      	beq.n	14c8 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1442:	683b      	ldr	r3, [r7, #0]
    1444:	881b      	ldrh	r3, [r3, #0]
    1446:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1448:	683b      	ldr	r3, [r7, #0]
    144a:	7a5b      	ldrb	r3, [r3, #9]
    144c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    144e:	4313      	orrs	r3, r2
    1450:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	021b      	lsls	r3, r3, #8
    1456:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    145c:	2317      	movs	r3, #23
    145e:	18fc      	adds	r4, r7, r3
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	0018      	movs	r0, r3
    1464:	4b78      	ldr	r3, [pc, #480]	; (1648 <_i2c_master_read_packet+0x268>)
    1466:	4798      	blx	r3
    1468:	0003      	movs	r3, r0
    146a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    146c:	68fb      	ldr	r3, [r7, #12]
    146e:	685b      	ldr	r3, [r3, #4]
    1470:	4a74      	ldr	r2, [pc, #464]	; (1644 <_i2c_master_read_packet+0x264>)
    1472:	401a      	ands	r2, r3
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1478:	2317      	movs	r3, #23
    147a:	18fb      	adds	r3, r7, r3
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	2b00      	cmp	r3, #0
    1480:	d107      	bne.n	1492 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    1482:	2317      	movs	r3, #23
    1484:	18fc      	adds	r4, r7, r3
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	0018      	movs	r0, r3
    148a:	4b70      	ldr	r3, [pc, #448]	; (164c <_i2c_master_read_packet+0x26c>)
    148c:	4798      	blx	r3
    148e:	0003      	movs	r3, r0
    1490:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1492:	2317      	movs	r3, #23
    1494:	18fb      	adds	r3, r7, r3
    1496:	781b      	ldrb	r3, [r3, #0]
    1498:	2b00      	cmp	r3, #0
    149a:	d111      	bne.n	14c0 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    149c:	683b      	ldr	r3, [r7, #0]
    149e:	881b      	ldrh	r3, [r3, #0]
    14a0:	0a1b      	lsrs	r3, r3, #8
    14a2:	b29b      	uxth	r3, r3
    14a4:	2278      	movs	r2, #120	; 0x78
    14a6:	4313      	orrs	r3, r2
    14a8:	b29b      	uxth	r3, r3
    14aa:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	7a5b      	ldrb	r3, [r3, #9]
    14b0:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14b2:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14b4:	2201      	movs	r2, #1
    14b6:	4313      	orrs	r3, r2
    14b8:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	625a      	str	r2, [r3, #36]	; 0x24
    14be:	e00f      	b.n	14e0 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    14c0:	2317      	movs	r3, #23
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	e0b6      	b.n	1636 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    14c8:	683b      	ldr	r3, [r7, #0]
    14ca:	881b      	ldrh	r3, [r3, #0]
    14cc:	005b      	lsls	r3, r3, #1
    14ce:	2201      	movs	r2, #1
    14d0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    14d2:	683b      	ldr	r3, [r7, #0]
    14d4:	7a5b      	ldrb	r3, [r3, #9]
    14d6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    14d8:	4313      	orrs	r3, r2
    14da:	001a      	movs	r2, r3
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    14e0:	2317      	movs	r3, #23
    14e2:	18fc      	adds	r4, r7, r3
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	0018      	movs	r0, r3
    14e8:	4b57      	ldr	r3, [pc, #348]	; (1648 <_i2c_master_read_packet+0x268>)
    14ea:	4798      	blx	r3
    14ec:	0003      	movs	r3, r0
    14ee:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    14f0:	230b      	movs	r3, #11
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d00b      	beq.n	1512 <_i2c_master_read_packet+0x132>
    14fa:	683b      	ldr	r3, [r7, #0]
    14fc:	885b      	ldrh	r3, [r3, #2]
    14fe:	2b01      	cmp	r3, #1
    1500:	d107      	bne.n	1512 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	685b      	ldr	r3, [r3, #4]
    1506:	2280      	movs	r2, #128	; 0x80
    1508:	02d2      	lsls	r2, r2, #11
    150a:	431a      	orrs	r2, r3
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	605a      	str	r2, [r3, #4]
    1510:	e005      	b.n	151e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	685b      	ldr	r3, [r3, #4]
    1516:	4a4b      	ldr	r2, [pc, #300]	; (1644 <_i2c_master_read_packet+0x264>)
    1518:	401a      	ands	r2, r3
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    151e:	2317      	movs	r3, #23
    1520:	18fb      	adds	r3, r7, r3
    1522:	781b      	ldrb	r3, [r3, #0]
    1524:	2b00      	cmp	r3, #0
    1526:	d107      	bne.n	1538 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1528:	2317      	movs	r3, #23
    152a:	18fc      	adds	r4, r7, r3
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	0018      	movs	r0, r3
    1530:	4b46      	ldr	r3, [pc, #280]	; (164c <_i2c_master_read_packet+0x26c>)
    1532:	4798      	blx	r3
    1534:	0003      	movs	r3, r0
    1536:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1538:	2317      	movs	r3, #23
    153a:	18fb      	adds	r3, r7, r3
    153c:	781b      	ldrb	r3, [r3, #0]
    153e:	2b00      	cmp	r3, #0
    1540:	d000      	beq.n	1544 <_i2c_master_read_packet+0x164>
    1542:	e075      	b.n	1630 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1544:	e04b      	b.n	15de <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	8b5b      	ldrh	r3, [r3, #26]
    154a:	b29b      	uxth	r3, r3
    154c:	001a      	movs	r2, r3
    154e:	2320      	movs	r3, #32
    1550:	4013      	ands	r3, r2
    1552:	d101      	bne.n	1558 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1554:	2341      	movs	r3, #65	; 0x41
    1556:	e06e      	b.n	1636 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1558:	687b      	ldr	r3, [r7, #4]
    155a:	7adb      	ldrb	r3, [r3, #11]
    155c:	2b00      	cmp	r3, #0
    155e:	d01e      	beq.n	159e <_i2c_master_read_packet+0x1be>
    1560:	230b      	movs	r3, #11
    1562:	18fb      	adds	r3, r7, r3
    1564:	781b      	ldrb	r3, [r3, #0]
    1566:	2201      	movs	r2, #1
    1568:	4053      	eors	r3, r2
    156a:	b2db      	uxtb	r3, r3
    156c:	2b00      	cmp	r3, #0
    156e:	d004      	beq.n	157a <_i2c_master_read_packet+0x19a>
    1570:	2314      	movs	r3, #20
    1572:	18fb      	adds	r3, r7, r3
    1574:	881b      	ldrh	r3, [r3, #0]
    1576:	2b00      	cmp	r3, #0
    1578:	d009      	beq.n	158e <_i2c_master_read_packet+0x1ae>
    157a:	230b      	movs	r3, #11
    157c:	18fb      	adds	r3, r7, r3
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	2b00      	cmp	r3, #0
    1582:	d00c      	beq.n	159e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1584:	2314      	movs	r3, #20
    1586:	18fb      	adds	r3, r7, r3
    1588:	881b      	ldrh	r3, [r3, #0]
    158a:	2b01      	cmp	r3, #1
    158c:	d107      	bne.n	159e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	685b      	ldr	r3, [r3, #4]
    1592:	2280      	movs	r2, #128	; 0x80
    1594:	02d2      	lsls	r2, r2, #11
    1596:	431a      	orrs	r2, r3
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	605a      	str	r2, [r3, #4]
    159c:	e01a      	b.n	15d4 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	0018      	movs	r0, r3
    15a2:	4b2b      	ldr	r3, [pc, #172]	; (1650 <_i2c_master_read_packet+0x270>)
    15a4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    15a6:	683b      	ldr	r3, [r7, #0]
    15a8:	685a      	ldr	r2, [r3, #4]
    15aa:	2312      	movs	r3, #18
    15ac:	18fb      	adds	r3, r7, r3
    15ae:	881b      	ldrh	r3, [r3, #0]
    15b0:	2112      	movs	r1, #18
    15b2:	1879      	adds	r1, r7, r1
    15b4:	1c58      	adds	r0, r3, #1
    15b6:	8008      	strh	r0, [r1, #0]
    15b8:	18d3      	adds	r3, r2, r3
    15ba:	68fa      	ldr	r2, [r7, #12]
    15bc:	2128      	movs	r1, #40	; 0x28
    15be:	5c52      	ldrb	r2, [r2, r1]
    15c0:	b2d2      	uxtb	r2, r2
    15c2:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    15c4:	2317      	movs	r3, #23
    15c6:	18fc      	adds	r4, r7, r3
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	0018      	movs	r0, r3
    15cc:	4b1e      	ldr	r3, [pc, #120]	; (1648 <_i2c_master_read_packet+0x268>)
    15ce:	4798      	blx	r3
    15d0:	0003      	movs	r3, r0
    15d2:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    15d4:	2317      	movs	r3, #23
    15d6:	18fb      	adds	r3, r7, r3
    15d8:	781b      	ldrb	r3, [r3, #0]
    15da:	2b00      	cmp	r3, #0
    15dc:	d109      	bne.n	15f2 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    15de:	2314      	movs	r3, #20
    15e0:	18fb      	adds	r3, r7, r3
    15e2:	881b      	ldrh	r3, [r3, #0]
    15e4:	2214      	movs	r2, #20
    15e6:	18ba      	adds	r2, r7, r2
    15e8:	1e59      	subs	r1, r3, #1
    15ea:	8011      	strh	r1, [r2, #0]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d1aa      	bne.n	1546 <_i2c_master_read_packet+0x166>
    15f0:	e000      	b.n	15f4 <_i2c_master_read_packet+0x214>
				break;
    15f2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	7a9b      	ldrb	r3, [r3, #10]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d00a      	beq.n	1612 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	0018      	movs	r0, r3
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <_i2c_master_read_packet+0x270>)
    1602:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	685b      	ldr	r3, [r3, #4]
    1608:	22c0      	movs	r2, #192	; 0xc0
    160a:	0292      	lsls	r2, r2, #10
    160c:	431a      	orrs	r2, r3
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	0018      	movs	r0, r3
    1616:	4b0e      	ldr	r3, [pc, #56]	; (1650 <_i2c_master_read_packet+0x270>)
    1618:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    161a:	683b      	ldr	r3, [r7, #0]
    161c:	685a      	ldr	r2, [r3, #4]
    161e:	2312      	movs	r3, #18
    1620:	18fb      	adds	r3, r7, r3
    1622:	881b      	ldrh	r3, [r3, #0]
    1624:	18d3      	adds	r3, r2, r3
    1626:	68fa      	ldr	r2, [r7, #12]
    1628:	2128      	movs	r1, #40	; 0x28
    162a:	5c52      	ldrb	r2, [r2, r1]
    162c:	b2d2      	uxtb	r2, r2
    162e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1630:	2317      	movs	r3, #23
    1632:	18fb      	adds	r3, r7, r3
    1634:	781b      	ldrb	r3, [r3, #0]
}
    1636:	0018      	movs	r0, r3
    1638:	46bd      	mov	sp, r7
    163a:	b007      	add	sp, #28
    163c:	bd90      	pop	{r4, r7, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	0000138d 	.word	0x0000138d
    1644:	fffbffff 	.word	0xfffbffff
    1648:	0000132f 	.word	0x0000132f
    164c:	000012d1 	.word	0x000012d1
    1650:	00000d69 	.word	0x00000d69

00001654 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1654:	b580      	push	{r7, lr}
    1656:	b082      	sub	sp, #8
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
    165c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	8b9b      	ldrh	r3, [r3, #28]
    1662:	b29b      	uxth	r3, r3
    1664:	2b00      	cmp	r3, #0
    1666:	d001      	beq.n	166c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1668:	2305      	movs	r3, #5
    166a:	e00c      	b.n	1686 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	2201      	movs	r2, #1
    1670:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	2201      	movs	r2, #1
    1676:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1678:	683a      	ldr	r2, [r7, #0]
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	0011      	movs	r1, r2
    167e:	0018      	movs	r0, r3
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <i2c_master_read_packet_wait+0x3c>)
    1682:	4798      	blx	r3
    1684:	0003      	movs	r3, r0
}
    1686:	0018      	movs	r0, r3
    1688:	46bd      	mov	sp, r7
    168a:	b002      	add	sp, #8
    168c:	bd80      	pop	{r7, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	000013e1 	.word	0x000013e1

00001694 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1694:	b590      	push	{r4, r7, lr}
    1696:	b087      	sub	sp, #28
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    16a4:	2314      	movs	r3, #20
    16a6:	18fb      	adds	r3, r7, r3
    16a8:	683a      	ldr	r2, [r7, #0]
    16aa:	8852      	ldrh	r2, [r2, #2]
    16ac:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	0018      	movs	r0, r3
    16b2:	4b51      	ldr	r3, [pc, #324]	; (17f8 <_i2c_master_write_packet+0x164>)
    16b4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    16b6:	683b      	ldr	r3, [r7, #0]
    16b8:	7a5b      	ldrb	r3, [r3, #9]
    16ba:	2b00      	cmp	r3, #0
    16bc:	d006      	beq.n	16cc <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    16be:	683b      	ldr	r3, [r7, #0]
    16c0:	7a9a      	ldrb	r2, [r3, #10]
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	0011      	movs	r1, r2
    16c6:	0018      	movs	r0, r3
    16c8:	4b4c      	ldr	r3, [pc, #304]	; (17fc <_i2c_master_write_packet+0x168>)
    16ca:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16cc:	68fb      	ldr	r3, [r7, #12]
    16ce:	685b      	ldr	r3, [r3, #4]
    16d0:	4a4b      	ldr	r2, [pc, #300]	; (1800 <_i2c_master_write_packet+0x16c>)
    16d2:	401a      	ands	r2, r3
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    16d8:	683b      	ldr	r3, [r7, #0]
    16da:	7a1b      	ldrb	r3, [r3, #8]
    16dc:	2b00      	cmp	r3, #0
    16de:	d00d      	beq.n	16fc <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16e0:	683b      	ldr	r3, [r7, #0]
    16e2:	881b      	ldrh	r3, [r3, #0]
    16e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16e6:	683b      	ldr	r3, [r7, #0]
    16e8:	7a5b      	ldrb	r3, [r3, #9]
    16ea:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16ec:	4313      	orrs	r3, r2
    16ee:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16f0:	2380      	movs	r3, #128	; 0x80
    16f2:	021b      	lsls	r3, r3, #8
    16f4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	625a      	str	r2, [r3, #36]	; 0x24
    16fa:	e009      	b.n	1710 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    16fc:	683b      	ldr	r3, [r7, #0]
    16fe:	881b      	ldrh	r3, [r3, #0]
    1700:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	7a5b      	ldrb	r3, [r3, #9]
    1706:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1708:	4313      	orrs	r3, r2
    170a:	001a      	movs	r2, r3
    170c:	68fb      	ldr	r3, [r7, #12]
    170e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1710:	2317      	movs	r3, #23
    1712:	18fc      	adds	r4, r7, r3
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	0018      	movs	r0, r3
    1718:	4b3a      	ldr	r3, [pc, #232]	; (1804 <_i2c_master_write_packet+0x170>)
    171a:	4798      	blx	r3
    171c:	0003      	movs	r3, r0
    171e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1720:	2317      	movs	r3, #23
    1722:	18fb      	adds	r3, r7, r3
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	2b00      	cmp	r3, #0
    1728:	d107      	bne.n	173a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    172a:	2317      	movs	r3, #23
    172c:	18fc      	adds	r4, r7, r3
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	0018      	movs	r0, r3
    1732:	4b35      	ldr	r3, [pc, #212]	; (1808 <_i2c_master_write_packet+0x174>)
    1734:	4798      	blx	r3
    1736:	0003      	movs	r3, r0
    1738:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    173a:	2317      	movs	r3, #23
    173c:	18fb      	adds	r3, r7, r3
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	2b00      	cmp	r3, #0
    1742:	d152      	bne.n	17ea <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1744:	2312      	movs	r3, #18
    1746:	18fb      	adds	r3, r7, r3
    1748:	2200      	movs	r2, #0
    174a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    174c:	e033      	b.n	17b6 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    174e:	68fb      	ldr	r3, [r7, #12]
    1750:	8b5b      	ldrh	r3, [r3, #26]
    1752:	b29b      	uxth	r3, r3
    1754:	001a      	movs	r2, r3
    1756:	2320      	movs	r3, #32
    1758:	4013      	ands	r3, r2
    175a:	d101      	bne.n	1760 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    175c:	2341      	movs	r3, #65	; 0x41
    175e:	e047      	b.n	17f0 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	0018      	movs	r0, r3
    1764:	4b24      	ldr	r3, [pc, #144]	; (17f8 <_i2c_master_write_packet+0x164>)
    1766:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1768:	683b      	ldr	r3, [r7, #0]
    176a:	685a      	ldr	r2, [r3, #4]
    176c:	2312      	movs	r3, #18
    176e:	18fb      	adds	r3, r7, r3
    1770:	881b      	ldrh	r3, [r3, #0]
    1772:	2112      	movs	r1, #18
    1774:	1879      	adds	r1, r7, r1
    1776:	1c58      	adds	r0, r3, #1
    1778:	8008      	strh	r0, [r1, #0]
    177a:	18d3      	adds	r3, r2, r3
    177c:	7819      	ldrb	r1, [r3, #0]
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	2228      	movs	r2, #40	; 0x28
    1782:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1784:	2317      	movs	r3, #23
    1786:	18fc      	adds	r4, r7, r3
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	0018      	movs	r0, r3
    178c:	4b1d      	ldr	r3, [pc, #116]	; (1804 <_i2c_master_write_packet+0x170>)
    178e:	4798      	blx	r3
    1790:	0003      	movs	r3, r0
    1792:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1794:	2317      	movs	r3, #23
    1796:	18fb      	adds	r3, r7, r3
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	2b00      	cmp	r3, #0
    179c:	d115      	bne.n	17ca <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    179e:	68fb      	ldr	r3, [r7, #12]
    17a0:	8b5b      	ldrh	r3, [r3, #26]
    17a2:	b29b      	uxth	r3, r3
    17a4:	001a      	movs	r2, r3
    17a6:	2304      	movs	r3, #4
    17a8:	4013      	ands	r3, r2
    17aa:	d004      	beq.n	17b6 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    17ac:	2317      	movs	r3, #23
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	221e      	movs	r2, #30
    17b2:	701a      	strb	r2, [r3, #0]
				break;
    17b4:	e00a      	b.n	17cc <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    17b6:	2314      	movs	r3, #20
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	881b      	ldrh	r3, [r3, #0]
    17bc:	2214      	movs	r2, #20
    17be:	18ba      	adds	r2, r7, r2
    17c0:	1e59      	subs	r1, r3, #1
    17c2:	8011      	strh	r1, [r2, #0]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d1c2      	bne.n	174e <_i2c_master_write_packet+0xba>
    17c8:	e000      	b.n	17cc <_i2c_master_write_packet+0x138>
				break;
    17ca:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	7a9b      	ldrb	r3, [r3, #10]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d00a      	beq.n	17ea <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	0018      	movs	r0, r3
    17d8:	4b07      	ldr	r3, [pc, #28]	; (17f8 <_i2c_master_write_packet+0x164>)
    17da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	685b      	ldr	r3, [r3, #4]
    17e0:	22c0      	movs	r2, #192	; 0xc0
    17e2:	0292      	lsls	r2, r2, #10
    17e4:	431a      	orrs	r2, r3
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    17ea:	2317      	movs	r3, #23
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	781b      	ldrb	r3, [r3, #0]
}
    17f0:	0018      	movs	r0, r3
    17f2:	46bd      	mov	sp, r7
    17f4:	b007      	add	sp, #28
    17f6:	bd90      	pop	{r4, r7, pc}
    17f8:	00000d69 	.word	0x00000d69
    17fc:	0000138d 	.word	0x0000138d
    1800:	fffbffff 	.word	0xfffbffff
    1804:	0000132f 	.word	0x0000132f
    1808:	000012d1 	.word	0x000012d1

0000180c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    180c:	b580      	push	{r7, lr}
    180e:	b082      	sub	sp, #8
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
    1814:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	8b9b      	ldrh	r3, [r3, #28]
    181a:	b29b      	uxth	r3, r3
    181c:	2b00      	cmp	r3, #0
    181e:	d001      	beq.n	1824 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    1820:	2305      	movs	r3, #5
    1822:	e00c      	b.n	183e <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	2200      	movs	r2, #0
    1828:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	2201      	movs	r2, #1
    182e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1830:	683a      	ldr	r2, [r7, #0]
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	0011      	movs	r1, r2
    1836:	0018      	movs	r0, r3
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <i2c_master_write_packet_wait_no_stop+0x3c>)
    183a:	4798      	blx	r3
    183c:	0003      	movs	r3, r0
}
    183e:	0018      	movs	r0, r3
    1840:	46bd      	mov	sp, r7
    1842:	b002      	add	sp, #8
    1844:	bd80      	pop	{r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	00001695 	.word	0x00001695

0000184c <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	0018      	movs	r0, r3
    185e:	4b06      	ldr	r3, [pc, #24]	; (1878 <i2c_master_send_stop+0x2c>)
    1860:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	685b      	ldr	r3, [r3, #4]
    1866:	22c0      	movs	r2, #192	; 0xc0
    1868:	0292      	lsls	r2, r2, #10
    186a:	431a      	orrs	r2, r3
    186c:	68fb      	ldr	r3, [r7, #12]
    186e:	605a      	str	r2, [r3, #4]
}
    1870:	46c0      	nop			; (mov r8, r8)
    1872:	46bd      	mov	sp, r7
    1874:	b004      	add	sp, #16
    1876:	bd80      	pop	{r7, pc}
    1878:	00000d69 	.word	0x00000d69

0000187c <i2c_master_is_syncing>:
{
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	69db      	ldr	r3, [r3, #28]
    188e:	2207      	movs	r2, #7
    1890:	4013      	ands	r3, r2
    1892:	1e5a      	subs	r2, r3, #1
    1894:	4193      	sbcs	r3, r2
    1896:	b2db      	uxtb	r3, r3
}
    1898:	0018      	movs	r0, r3
    189a:	46bd      	mov	sp, r7
    189c:	b004      	add	sp, #16
    189e:	bd80      	pop	{r7, pc}

000018a0 <_i2c_master_wait_for_sync>:
{
    18a0:	b580      	push	{r7, lr}
    18a2:	b082      	sub	sp, #8
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    18a8:	46c0      	nop			; (mov r8, r8)
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	0018      	movs	r0, r3
    18ae:	4b04      	ldr	r3, [pc, #16]	; (18c0 <_i2c_master_wait_for_sync+0x20>)
    18b0:	4798      	blx	r3
    18b2:	1e03      	subs	r3, r0, #0
    18b4:	d1f9      	bne.n	18aa <_i2c_master_wait_for_sync+0xa>
}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	46bd      	mov	sp, r7
    18ba:	b002      	add	sp, #8
    18bc:	bd80      	pop	{r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	0000187d 	.word	0x0000187d

000018c4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b084      	sub	sp, #16
    18c8:	af00      	add	r7, sp, #0
    18ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    18d2:	68fb      	ldr	r3, [r7, #12]
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	011b      	lsls	r3, r3, #4
    18d8:	0fdb      	lsrs	r3, r3, #31
    18da:	b2db      	uxtb	r3, r3
    18dc:	001a      	movs	r2, r3
    18de:	230b      	movs	r3, #11
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	1e51      	subs	r1, r2, #1
    18e4:	418a      	sbcs	r2, r1
    18e6:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    18e8:	2308      	movs	r3, #8
    18ea:	18fb      	adds	r3, r7, r3
    18ec:	687a      	ldr	r2, [r7, #4]
    18ee:	8b52      	ldrh	r2, [r2, #26]
    18f0:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	8b9b      	ldrh	r3, [r3, #28]
    18f6:	b29a      	uxth	r2, r3
    18f8:	2308      	movs	r3, #8
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	2108      	movs	r1, #8
    18fe:	1879      	adds	r1, r7, r1
    1900:	8809      	ldrh	r1, [r1, #0]
    1902:	1a8a      	subs	r2, r1, r2
    1904:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	8b9b      	ldrh	r3, [r3, #28]
    190a:	b29b      	uxth	r3, r3
    190c:	3b01      	subs	r3, #1
    190e:	b29a      	uxth	r2, r3
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1914:	230b      	movs	r3, #11
    1916:	18fb      	adds	r3, r7, r3
    1918:	781b      	ldrb	r3, [r3, #0]
    191a:	2b00      	cmp	r3, #0
    191c:	d010      	beq.n	1940 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	7adb      	ldrb	r3, [r3, #11]
    1922:	2b00      	cmp	r3, #0
    1924:	d01c      	beq.n	1960 <_i2c_master_read+0x9c>
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	8b9b      	ldrh	r3, [r3, #28]
    192a:	b29b      	uxth	r3, r3
    192c:	2b01      	cmp	r3, #1
    192e:	d117      	bne.n	1960 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1930:	68fb      	ldr	r3, [r7, #12]
    1932:	685b      	ldr	r3, [r3, #4]
    1934:	2280      	movs	r2, #128	; 0x80
    1936:	02d2      	lsls	r2, r2, #11
    1938:	431a      	orrs	r2, r3
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	605a      	str	r2, [r3, #4]
    193e:	e00f      	b.n	1960 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	7adb      	ldrb	r3, [r3, #11]
    1944:	2b00      	cmp	r3, #0
    1946:	d00b      	beq.n	1960 <_i2c_master_read+0x9c>
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	8b9b      	ldrh	r3, [r3, #28]
    194c:	b29b      	uxth	r3, r3
    194e:	2b00      	cmp	r3, #0
    1950:	d106      	bne.n	1960 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	685b      	ldr	r3, [r3, #4]
    1956:	2280      	movs	r2, #128	; 0x80
    1958:	02d2      	lsls	r2, r2, #11
    195a:	431a      	orrs	r2, r3
    195c:	68fb      	ldr	r3, [r7, #12]
    195e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	8b9b      	ldrh	r3, [r3, #28]
    1964:	b29b      	uxth	r3, r3
    1966:	2b00      	cmp	r3, #0
    1968:	d10e      	bne.n	1988 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	7a9b      	ldrb	r3, [r3, #10]
    196e:	2b00      	cmp	r3, #0
    1970:	d00a      	beq.n	1988 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	0018      	movs	r0, r3
    1976:	4b0e      	ldr	r3, [pc, #56]	; (19b0 <_i2c_master_read+0xec>)
    1978:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    197a:	68fb      	ldr	r3, [r7, #12]
    197c:	685b      	ldr	r3, [r3, #4]
    197e:	22c0      	movs	r2, #192	; 0xc0
    1980:	0292      	lsls	r2, r2, #10
    1982:	431a      	orrs	r2, r3
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	0018      	movs	r0, r3
    198c:	4b08      	ldr	r3, [pc, #32]	; (19b0 <_i2c_master_read+0xec>)
    198e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	6a1a      	ldr	r2, [r3, #32]
    1994:	2308      	movs	r3, #8
    1996:	18fb      	adds	r3, r7, r3
    1998:	881b      	ldrh	r3, [r3, #0]
    199a:	18d3      	adds	r3, r2, r3
    199c:	68fa      	ldr	r2, [r7, #12]
    199e:	2128      	movs	r1, #40	; 0x28
    19a0:	5c52      	ldrb	r2, [r2, r1]
    19a2:	b2d2      	uxtb	r2, r2
    19a4:	701a      	strb	r2, [r3, #0]
}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	46bd      	mov	sp, r7
    19aa:	b004      	add	sp, #16
    19ac:	bd80      	pop	{r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	000018a1 	.word	0x000018a1

000019b4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    19c2:	68fb      	ldr	r3, [r7, #12]
    19c4:	8b5b      	ldrh	r3, [r3, #26]
    19c6:	b29b      	uxth	r3, r3
    19c8:	001a      	movs	r2, r3
    19ca:	2304      	movs	r3, #4
    19cc:	4013      	ands	r3, r2
    19ce:	d004      	beq.n	19da <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	2225      	movs	r2, #37	; 0x25
    19d4:	211e      	movs	r1, #30
    19d6:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    19d8:	e024      	b.n	1a24 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    19da:	230a      	movs	r3, #10
    19dc:	18fb      	adds	r3, r7, r3
    19de:	687a      	ldr	r2, [r7, #4]
    19e0:	8b52      	ldrh	r2, [r2, #26]
    19e2:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	8b9b      	ldrh	r3, [r3, #28]
    19e8:	b29a      	uxth	r2, r3
    19ea:	230a      	movs	r3, #10
    19ec:	18fb      	adds	r3, r7, r3
    19ee:	210a      	movs	r1, #10
    19f0:	1879      	adds	r1, r7, r1
    19f2:	8809      	ldrh	r1, [r1, #0]
    19f4:	1a8a      	subs	r2, r1, r2
    19f6:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	8b9b      	ldrh	r3, [r3, #28]
    19fc:	b29b      	uxth	r3, r3
    19fe:	3b01      	subs	r3, #1
    1a00:	b29a      	uxth	r2, r3
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	0018      	movs	r0, r3
    1a0a:	4b08      	ldr	r3, [pc, #32]	; (1a2c <_i2c_master_write+0x78>)
    1a0c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	6a1a      	ldr	r2, [r3, #32]
    1a12:	230a      	movs	r3, #10
    1a14:	18fb      	adds	r3, r7, r3
    1a16:	881b      	ldrh	r3, [r3, #0]
    1a18:	18d3      	adds	r3, r2, r3
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	b2d9      	uxtb	r1, r3
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	2228      	movs	r2, #40	; 0x28
    1a22:	5499      	strb	r1, [r3, r2]
}
    1a24:	46bd      	mov	sp, r7
    1a26:	b004      	add	sp, #16
    1a28:	bd80      	pop	{r7, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	000018a1 	.word	0x000018a1

00001a30 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	b084      	sub	sp, #16
    1a34:	af00      	add	r7, sp, #0
    1a36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	7e1b      	ldrb	r3, [r3, #24]
    1a42:	b2db      	uxtb	r3, r3
    1a44:	001a      	movs	r2, r3
    1a46:	2301      	movs	r3, #1
    1a48:	4013      	ands	r3, r2
    1a4a:	d02b      	beq.n	1aa4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1a4c:	68fb      	ldr	r3, [r7, #12]
    1a4e:	2201      	movs	r2, #1
    1a50:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1a52:	68fb      	ldr	r3, [r7, #12]
    1a54:	8b5b      	ldrh	r3, [r3, #26]
    1a56:	b29b      	uxth	r3, r3
    1a58:	001a      	movs	r2, r3
    1a5a:	2302      	movs	r3, #2
    1a5c:	4013      	ands	r3, r2
    1a5e:	d004      	beq.n	1a6a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	2225      	movs	r2, #37	; 0x25
    1a64:	2141      	movs	r1, #65	; 0x41
    1a66:	5499      	strb	r1, [r3, r2]
    1a68:	e01c      	b.n	1aa4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a6a:	68fb      	ldr	r3, [r7, #12]
    1a6c:	8b5b      	ldrh	r3, [r3, #26]
    1a6e:	b29b      	uxth	r3, r3
    1a70:	001a      	movs	r2, r3
    1a72:	2304      	movs	r3, #4
    1a74:	4013      	ands	r3, r2
    1a76:	d015      	beq.n	1aa4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	2225      	movs	r2, #37	; 0x25
    1a7c:	2118      	movs	r1, #24
    1a7e:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	2200      	movs	r2, #0
    1a84:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	7a9b      	ldrb	r3, [r3, #10]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d00a      	beq.n	1aa4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	0018      	movs	r0, r3
    1a92:	4b13      	ldr	r3, [pc, #76]	; (1ae0 <_i2c_master_async_address_response+0xb0>)
    1a94:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a96:	68fb      	ldr	r3, [r7, #12]
    1a98:	685b      	ldr	r3, [r3, #4]
    1a9a:	22c0      	movs	r2, #192	; 0xc0
    1a9c:	0292      	lsls	r2, r2, #10
    1a9e:	431a      	orrs	r2, r3
    1aa0:	68fb      	ldr	r3, [r7, #12]
    1aa2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	8b9b      	ldrh	r3, [r3, #28]
    1aa8:	b29a      	uxth	r2, r3
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	2225      	movs	r2, #37	; 0x25
    1ab2:	5c9b      	ldrb	r3, [r3, r2]
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	2b05      	cmp	r3, #5
    1ab8:	d10e      	bne.n	1ad8 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	2224      	movs	r2, #36	; 0x24
    1abe:	5c9b      	ldrb	r3, [r3, r2]
    1ac0:	b2db      	uxtb	r3, r3
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d104      	bne.n	1ad0 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	0018      	movs	r0, r3
    1aca:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <_i2c_master_async_address_response+0xb4>)
    1acc:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1ace:	e003      	b.n	1ad8 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <_i2c_master_async_address_response+0xb8>)
    1ad6:	4798      	blx	r3
}
    1ad8:	46c0      	nop			; (mov r8, r8)
    1ada:	46bd      	mov	sp, r7
    1adc:	b004      	add	sp, #16
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	000018a1 	.word	0x000018a1
    1ae4:	000019b5 	.word	0x000019b5
    1ae8:	000018c5 	.word	0x000018c5

00001aec <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b086      	sub	sp, #24
    1af0:	af00      	add	r7, sp, #0
    1af2:	0002      	movs	r2, r0
    1af4:	1dfb      	adds	r3, r7, #7
    1af6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1af8:	1dfb      	adds	r3, r7, #7
    1afa:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1afc:	4b93      	ldr	r3, [pc, #588]	; (1d4c <_i2c_master_interrupt_handler+0x260>)
    1afe:	0092      	lsls	r2, r2, #2
    1b00:	58d3      	ldr	r3, [r2, r3]
    1b02:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b04:	697b      	ldr	r3, [r7, #20]
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b0a:	693b      	ldr	r3, [r7, #16]
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	011b      	lsls	r3, r3, #4
    1b10:	0fdb      	lsrs	r3, r3, #31
    1b12:	b2db      	uxtb	r3, r3
    1b14:	001a      	movs	r2, r3
    1b16:	230f      	movs	r3, #15
    1b18:	18fb      	adds	r3, r7, r3
    1b1a:	1e51      	subs	r1, r2, #1
    1b1c:	418a      	sbcs	r2, r1
    1b1e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1b20:	230e      	movs	r3, #14
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	697a      	ldr	r2, [r7, #20]
    1b26:	7e52      	ldrb	r2, [r2, #25]
    1b28:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1b2a:	697b      	ldr	r3, [r7, #20]
    1b2c:	7e1b      	ldrb	r3, [r3, #24]
    1b2e:	b2da      	uxtb	r2, r3
    1b30:	230e      	movs	r3, #14
    1b32:	18fb      	adds	r3, r7, r3
    1b34:	210e      	movs	r1, #14
    1b36:	1879      	adds	r1, r7, r1
    1b38:	7809      	ldrb	r1, [r1, #0]
    1b3a:	400a      	ands	r2, r1
    1b3c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1b3e:	697b      	ldr	r3, [r7, #20]
    1b40:	8b5b      	ldrh	r3, [r3, #26]
    1b42:	b29b      	uxth	r3, r3
    1b44:	2b00      	cmp	r3, #0
    1b46:	d109      	bne.n	1b5c <_i2c_master_interrupt_handler+0x70>
    1b48:	697b      	ldr	r3, [r7, #20]
    1b4a:	8b9b      	ldrh	r3, [r3, #28]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d004      	beq.n	1b5c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1b52:	697b      	ldr	r3, [r7, #20]
    1b54:	0018      	movs	r0, r3
    1b56:	4b7e      	ldr	r3, [pc, #504]	; (1d50 <_i2c_master_interrupt_handler+0x264>)
    1b58:	4798      	blx	r3
    1b5a:	e070      	b.n	1c3e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b5c:	697b      	ldr	r3, [r7, #20]
    1b5e:	8b5b      	ldrh	r3, [r3, #26]
    1b60:	b29b      	uxth	r3, r3
    1b62:	2b00      	cmp	r3, #0
    1b64:	d039      	beq.n	1bda <_i2c_master_interrupt_handler+0xee>
    1b66:	697b      	ldr	r3, [r7, #20]
    1b68:	8b9b      	ldrh	r3, [r3, #28]
    1b6a:	b29b      	uxth	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d134      	bne.n	1bda <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1b70:	697b      	ldr	r3, [r7, #20]
    1b72:	2225      	movs	r2, #37	; 0x25
    1b74:	5c9b      	ldrb	r3, [r3, r2]
    1b76:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b78:	2b05      	cmp	r3, #5
    1b7a:	d12e      	bne.n	1bda <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1b7c:	697b      	ldr	r3, [r7, #20]
    1b7e:	2224      	movs	r2, #36	; 0x24
    1b80:	5c9b      	ldrb	r3, [r3, r2]
    1b82:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1b84:	2b00      	cmp	r3, #0
    1b86:	d128      	bne.n	1bda <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1b88:	693b      	ldr	r3, [r7, #16]
    1b8a:	2203      	movs	r2, #3
    1b8c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1b8e:	697b      	ldr	r3, [r7, #20]
    1b90:	2200      	movs	r2, #0
    1b92:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1b94:	697b      	ldr	r3, [r7, #20]
    1b96:	2225      	movs	r2, #37	; 0x25
    1b98:	2100      	movs	r1, #0
    1b9a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1b9c:	697b      	ldr	r3, [r7, #20]
    1b9e:	7a9b      	ldrb	r3, [r3, #10]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d00b      	beq.n	1bbc <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1ba4:	697b      	ldr	r3, [r7, #20]
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b6a      	ldr	r3, [pc, #424]	; (1d54 <_i2c_master_interrupt_handler+0x268>)
    1baa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1bac:	693b      	ldr	r3, [r7, #16]
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	22c0      	movs	r2, #192	; 0xc0
    1bb2:	0292      	lsls	r2, r2, #10
    1bb4:	431a      	orrs	r2, r3
    1bb6:	693b      	ldr	r3, [r7, #16]
    1bb8:	605a      	str	r2, [r3, #4]
    1bba:	e002      	b.n	1bc2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1bbc:	693b      	ldr	r3, [r7, #16]
    1bbe:	2201      	movs	r2, #1
    1bc0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1bc2:	230e      	movs	r3, #14
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	781b      	ldrb	r3, [r3, #0]
    1bc8:	2201      	movs	r2, #1
    1bca:	4013      	ands	r3, r2
    1bcc:	d037      	beq.n	1c3e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1bce:	697b      	ldr	r3, [r7, #20]
    1bd0:	68db      	ldr	r3, [r3, #12]
    1bd2:	697a      	ldr	r2, [r7, #20]
    1bd4:	0010      	movs	r0, r2
    1bd6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1bd8:	e031      	b.n	1c3e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1bda:	697b      	ldr	r3, [r7, #20]
    1bdc:	8b5b      	ldrh	r3, [r3, #26]
    1bde:	b29b      	uxth	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	d02c      	beq.n	1c3e <_i2c_master_interrupt_handler+0x152>
    1be4:	697b      	ldr	r3, [r7, #20]
    1be6:	8b9b      	ldrh	r3, [r3, #28]
    1be8:	b29b      	uxth	r3, r3
    1bea:	2b00      	cmp	r3, #0
    1bec:	d027      	beq.n	1c3e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1bee:	693b      	ldr	r3, [r7, #16]
    1bf0:	8b5b      	ldrh	r3, [r3, #26]
    1bf2:	b29b      	uxth	r3, r3
    1bf4:	001a      	movs	r2, r3
    1bf6:	2320      	movs	r3, #32
    1bf8:	4013      	ands	r3, r2
    1bfa:	d111      	bne.n	1c20 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1bfc:	230f      	movs	r3, #15
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	2201      	movs	r2, #1
    1c04:	4053      	eors	r3, r2
    1c06:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d104      	bne.n	1c16 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1c0c:	697b      	ldr	r3, [r7, #20]
    1c0e:	8b9b      	ldrh	r3, [r3, #28]
    1c10:	b29b      	uxth	r3, r3
    1c12:	2b01      	cmp	r3, #1
    1c14:	d004      	beq.n	1c20 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1c16:	697b      	ldr	r3, [r7, #20]
    1c18:	2225      	movs	r2, #37	; 0x25
    1c1a:	2141      	movs	r1, #65	; 0x41
    1c1c:	5499      	strb	r1, [r3, r2]
    1c1e:	e00e      	b.n	1c3e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1c20:	697b      	ldr	r3, [r7, #20]
    1c22:	2224      	movs	r2, #36	; 0x24
    1c24:	5c9b      	ldrb	r3, [r3, r2]
    1c26:	b2db      	uxtb	r3, r3
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d104      	bne.n	1c36 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1c2c:	697b      	ldr	r3, [r7, #20]
    1c2e:	0018      	movs	r0, r3
    1c30:	4b49      	ldr	r3, [pc, #292]	; (1d58 <_i2c_master_interrupt_handler+0x26c>)
    1c32:	4798      	blx	r3
    1c34:	e003      	b.n	1c3e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1c36:	697b      	ldr	r3, [r7, #20]
    1c38:	0018      	movs	r0, r3
    1c3a:	4b48      	ldr	r3, [pc, #288]	; (1d5c <_i2c_master_interrupt_handler+0x270>)
    1c3c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	8b5b      	ldrh	r3, [r3, #26]
    1c42:	b29b      	uxth	r3, r3
    1c44:	2b00      	cmp	r3, #0
    1c46:	d047      	beq.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	8b9b      	ldrh	r3, [r3, #28]
    1c4c:	b29b      	uxth	r3, r3
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d142      	bne.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1c52:	697b      	ldr	r3, [r7, #20]
    1c54:	2225      	movs	r2, #37	; 0x25
    1c56:	5c9b      	ldrb	r3, [r3, r2]
    1c58:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c5a:	2b05      	cmp	r3, #5
    1c5c:	d13c      	bne.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1c5e:	697b      	ldr	r3, [r7, #20]
    1c60:	2224      	movs	r2, #36	; 0x24
    1c62:	5c9b      	ldrb	r3, [r3, r2]
    1c64:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1c66:	2b01      	cmp	r3, #1
    1c68:	d136      	bne.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1c6a:	693b      	ldr	r3, [r7, #16]
    1c6c:	7e1b      	ldrb	r3, [r3, #24]
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	001a      	movs	r2, r3
    1c72:	2302      	movs	r3, #2
    1c74:	4013      	ands	r3, r2
    1c76:	d002      	beq.n	1c7e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1c78:	693b      	ldr	r3, [r7, #16]
    1c7a:	2202      	movs	r2, #2
    1c7c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1c7e:	693b      	ldr	r3, [r7, #16]
    1c80:	2203      	movs	r2, #3
    1c82:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1c84:	697b      	ldr	r3, [r7, #20]
    1c86:	2200      	movs	r2, #0
    1c88:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1c8a:	697b      	ldr	r3, [r7, #20]
    1c8c:	2225      	movs	r2, #37	; 0x25
    1c8e:	2100      	movs	r1, #0
    1c90:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1c92:	230e      	movs	r3, #14
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	2202      	movs	r2, #2
    1c9a:	4013      	ands	r3, r2
    1c9c:	d00b      	beq.n	1cb6 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	2224      	movs	r2, #36	; 0x24
    1ca2:	5c9b      	ldrb	r3, [r3, r2]
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	2b01      	cmp	r3, #1
    1ca8:	d105      	bne.n	1cb6 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1caa:	697b      	ldr	r3, [r7, #20]
    1cac:	691b      	ldr	r3, [r3, #16]
    1cae:	697a      	ldr	r2, [r7, #20]
    1cb0:	0010      	movs	r0, r2
    1cb2:	4798      	blx	r3
    1cb4:	e010      	b.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1cb6:	230e      	movs	r3, #14
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	2201      	movs	r2, #1
    1cbe:	4013      	ands	r3, r2
    1cc0:	d00a      	beq.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1cc2:	697b      	ldr	r3, [r7, #20]
    1cc4:	2224      	movs	r2, #36	; 0x24
    1cc6:	5c9b      	ldrb	r3, [r3, r2]
    1cc8:	b2db      	uxtb	r3, r3
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d104      	bne.n	1cd8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1cce:	697b      	ldr	r3, [r7, #20]
    1cd0:	68db      	ldr	r3, [r3, #12]
    1cd2:	697a      	ldr	r2, [r7, #20]
    1cd4:	0010      	movs	r0, r2
    1cd6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1cd8:	697b      	ldr	r3, [r7, #20]
    1cda:	2225      	movs	r2, #37	; 0x25
    1cdc:	5c9b      	ldrb	r3, [r3, r2]
    1cde:	b2db      	uxtb	r3, r3
    1ce0:	2b05      	cmp	r3, #5
    1ce2:	d02e      	beq.n	1d42 <_i2c_master_interrupt_handler+0x256>
    1ce4:	697b      	ldr	r3, [r7, #20]
    1ce6:	2225      	movs	r2, #37	; 0x25
    1ce8:	5c9b      	ldrb	r3, [r3, r2]
    1cea:	b2db      	uxtb	r3, r3
    1cec:	2b00      	cmp	r3, #0
    1cee:	d028      	beq.n	1d42 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1cf0:	693b      	ldr	r3, [r7, #16]
    1cf2:	2203      	movs	r2, #3
    1cf4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1cf6:	697b      	ldr	r3, [r7, #20]
    1cf8:	2200      	movs	r2, #0
    1cfa:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1cfc:	697b      	ldr	r3, [r7, #20]
    1cfe:	2200      	movs	r2, #0
    1d00:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1d02:	697b      	ldr	r3, [r7, #20]
    1d04:	2225      	movs	r2, #37	; 0x25
    1d06:	5c9b      	ldrb	r3, [r3, r2]
    1d08:	b2db      	uxtb	r3, r3
    1d0a:	2b41      	cmp	r3, #65	; 0x41
    1d0c:	d00e      	beq.n	1d2c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1d0e:	697b      	ldr	r3, [r7, #20]
    1d10:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1d12:	2b00      	cmp	r3, #0
    1d14:	d00a      	beq.n	1d2c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1d16:	697b      	ldr	r3, [r7, #20]
    1d18:	0018      	movs	r0, r3
    1d1a:	4b0e      	ldr	r3, [pc, #56]	; (1d54 <_i2c_master_interrupt_handler+0x268>)
    1d1c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1d1e:	693b      	ldr	r3, [r7, #16]
    1d20:	685b      	ldr	r3, [r3, #4]
    1d22:	22e0      	movs	r2, #224	; 0xe0
    1d24:	02d2      	lsls	r2, r2, #11
    1d26:	431a      	orrs	r2, r3
    1d28:	693b      	ldr	r3, [r7, #16]
    1d2a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1d2c:	230e      	movs	r3, #14
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	2204      	movs	r2, #4
    1d34:	4013      	ands	r3, r2
    1d36:	d004      	beq.n	1d42 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1d38:	697b      	ldr	r3, [r7, #20]
    1d3a:	695b      	ldr	r3, [r3, #20]
    1d3c:	697a      	ldr	r2, [r7, #20]
    1d3e:	0010      	movs	r0, r2
    1d40:	4798      	blx	r3
		}
	}
}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	46bd      	mov	sp, r7
    1d46:	b006      	add	sp, #24
    1d48:	bd80      	pop	{r7, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	200003c0 	.word	0x200003c0
    1d50:	00001a31 	.word	0x00001a31
    1d54:	000018a1 	.word	0x000018a1
    1d58:	000019b5 	.word	0x000019b5
    1d5c:	000018c5 	.word	0x000018c5

00001d60 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b084      	sub	sp, #16
    1d64:	af00      	add	r7, sp, #0
    1d66:	0002      	movs	r2, r0
    1d68:	1dfb      	adds	r3, r7, #7
    1d6a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d6c:	230f      	movs	r3, #15
    1d6e:	18fb      	adds	r3, r7, r3
    1d70:	1dfa      	adds	r2, r7, #7
    1d72:	7812      	ldrb	r2, [r2, #0]
    1d74:	09d2      	lsrs	r2, r2, #7
    1d76:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d78:	230e      	movs	r3, #14
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	1dfa      	adds	r2, r7, #7
    1d7e:	7812      	ldrb	r2, [r2, #0]
    1d80:	0952      	lsrs	r2, r2, #5
    1d82:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d84:	4b0d      	ldr	r3, [pc, #52]	; (1dbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d86:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1d88:	230f      	movs	r3, #15
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d10f      	bne.n	1db2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d92:	230f      	movs	r3, #15
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	009b      	lsls	r3, r3, #2
    1d9a:	2210      	movs	r2, #16
    1d9c:	4694      	mov	ip, r2
    1d9e:	44bc      	add	ip, r7
    1da0:	4463      	add	r3, ip
    1da2:	3b08      	subs	r3, #8
    1da4:	681a      	ldr	r2, [r3, #0]
    1da6:	230e      	movs	r3, #14
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	781b      	ldrb	r3, [r3, #0]
    1dac:	01db      	lsls	r3, r3, #7
    1dae:	18d3      	adds	r3, r2, r3
    1db0:	e000      	b.n	1db4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1db2:	2300      	movs	r3, #0
	}
}
    1db4:	0018      	movs	r0, r3
    1db6:	46bd      	mov	sp, r7
    1db8:	b004      	add	sp, #16
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	41004400 	.word	0x41004400

00001dc0 <system_voltage_reference_enable>:
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b082      	sub	sp, #8
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	0002      	movs	r2, r0
    1dc8:	1dfb      	adds	r3, r7, #7
    1dca:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    1dcc:	1dfb      	adds	r3, r7, #7
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d002      	beq.n	1dda <system_voltage_reference_enable+0x1a>
    1dd4:	2b01      	cmp	r3, #1
    1dd6:	d007      	beq.n	1de8 <system_voltage_reference_enable+0x28>
			return;
    1dd8:	e00d      	b.n	1df6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    1dda:	4b08      	ldr	r3, [pc, #32]	; (1dfc <system_voltage_reference_enable+0x3c>)
    1ddc:	4a07      	ldr	r2, [pc, #28]	; (1dfc <system_voltage_reference_enable+0x3c>)
    1dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1de0:	2102      	movs	r1, #2
    1de2:	430a      	orrs	r2, r1
    1de4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    1de6:	e006      	b.n	1df6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1de8:	4b04      	ldr	r3, [pc, #16]	; (1dfc <system_voltage_reference_enable+0x3c>)
    1dea:	4a04      	ldr	r2, [pc, #16]	; (1dfc <system_voltage_reference_enable+0x3c>)
    1dec:	6c12      	ldr	r2, [r2, #64]	; 0x40
    1dee:	2104      	movs	r1, #4
    1df0:	430a      	orrs	r2, r1
    1df2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    1df4:	46c0      	nop			; (mov r8, r8)
}
    1df6:	46bd      	mov	sp, r7
    1df8:	b002      	add	sp, #8
    1dfa:	bd80      	pop	{r7, pc}
    1dfc:	40000800 	.word	0x40000800

00001e00 <system_interrupt_enable>:
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b082      	sub	sp, #8
    1e04:	af00      	add	r7, sp, #0
    1e06:	0002      	movs	r2, r0
    1e08:	1dfb      	adds	r3, r7, #7
    1e0a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <system_interrupt_enable+0x28>)
    1e0e:	1dfa      	adds	r2, r7, #7
    1e10:	7812      	ldrb	r2, [r2, #0]
    1e12:	0011      	movs	r1, r2
    1e14:	221f      	movs	r2, #31
    1e16:	400a      	ands	r2, r1
    1e18:	2101      	movs	r1, #1
    1e1a:	4091      	lsls	r1, r2
    1e1c:	000a      	movs	r2, r1
    1e1e:	601a      	str	r2, [r3, #0]
}
    1e20:	46c0      	nop			; (mov r8, r8)
    1e22:	46bd      	mov	sp, r7
    1e24:	b002      	add	sp, #8
    1e26:	bd80      	pop	{r7, pc}
    1e28:	e000e100 	.word	0xe000e100

00001e2c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	0002      	movs	r2, r0
    1e34:	1dfb      	adds	r3, r7, #7
    1e36:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e38:	4a07      	ldr	r2, [pc, #28]	; (1e58 <system_interrupt_disable+0x2c>)
    1e3a:	1dfb      	adds	r3, r7, #7
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	0019      	movs	r1, r3
    1e40:	231f      	movs	r3, #31
    1e42:	400b      	ands	r3, r1
    1e44:	2101      	movs	r1, #1
    1e46:	4099      	lsls	r1, r3
    1e48:	000b      	movs	r3, r1
    1e4a:	0019      	movs	r1, r3
    1e4c:	2380      	movs	r3, #128	; 0x80
    1e4e:	50d1      	str	r1, [r2, r3]
}
    1e50:	46c0      	nop			; (mov r8, r8)
    1e52:	46bd      	mov	sp, r7
    1e54:	b002      	add	sp, #8
    1e56:	bd80      	pop	{r7, pc}
    1e58:	e000e100 	.word	0xe000e100

00001e5c <adc_is_syncing>:
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b084      	sub	sp, #16
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e6a:	68fb      	ldr	r3, [r7, #12]
    1e6c:	7e5b      	ldrb	r3, [r3, #25]
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	b25b      	sxtb	r3, r3
    1e72:	2b00      	cmp	r3, #0
    1e74:	da01      	bge.n	1e7a <adc_is_syncing+0x1e>
		return true;
    1e76:	2301      	movs	r3, #1
    1e78:	e000      	b.n	1e7c <adc_is_syncing+0x20>
	return false;
    1e7a:	2300      	movs	r3, #0
}
    1e7c:	0018      	movs	r0, r3
    1e7e:	46bd      	mov	sp, r7
    1e80:	b004      	add	sp, #16
    1e82:	bd80      	pop	{r7, pc}

00001e84 <adc_get_status>:
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b086      	sub	sp, #24
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1e92:	693b      	ldr	r3, [r7, #16]
    1e94:	7e1b      	ldrb	r3, [r3, #24]
    1e96:	b2db      	uxtb	r3, r3
    1e98:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
    1e9a:	2300      	movs	r3, #0
    1e9c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1e9e:	68fb      	ldr	r3, [r7, #12]
    1ea0:	2201      	movs	r2, #1
    1ea2:	4013      	ands	r3, r2
    1ea4:	d003      	beq.n	1eae <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    1ea6:	697b      	ldr	r3, [r7, #20]
    1ea8:	2201      	movs	r2, #1
    1eaa:	4313      	orrs	r3, r2
    1eac:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	2204      	movs	r2, #4
    1eb2:	4013      	ands	r3, r2
    1eb4:	d003      	beq.n	1ebe <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    1eb6:	697b      	ldr	r3, [r7, #20]
    1eb8:	2202      	movs	r2, #2
    1eba:	4313      	orrs	r3, r2
    1ebc:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	2202      	movs	r2, #2
    1ec2:	4013      	ands	r3, r2
    1ec4:	d003      	beq.n	1ece <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	2204      	movs	r2, #4
    1eca:	4313      	orrs	r3, r2
    1ecc:	617b      	str	r3, [r7, #20]
	return status_flags;
    1ece:	697b      	ldr	r3, [r7, #20]
}
    1ed0:	0018      	movs	r0, r3
    1ed2:	46bd      	mov	sp, r7
    1ed4:	b006      	add	sp, #24
    1ed6:	bd80      	pop	{r7, pc}

00001ed8 <adc_clear_status>:
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b084      	sub	sp, #16
    1edc:	af00      	add	r7, sp, #0
    1ede:	6078      	str	r0, [r7, #4]
    1ee0:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	681b      	ldr	r3, [r3, #0]
    1ee6:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
    1ee8:	2300      	movs	r3, #0
    1eea:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
    1eec:	683b      	ldr	r3, [r7, #0]
    1eee:	2201      	movs	r2, #1
    1ef0:	4013      	ands	r3, r2
    1ef2:	d003      	beq.n	1efc <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	2201      	movs	r2, #1
    1ef8:	4313      	orrs	r3, r2
    1efa:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
    1efc:	683b      	ldr	r3, [r7, #0]
    1efe:	2202      	movs	r2, #2
    1f00:	4013      	ands	r3, r2
    1f02:	d003      	beq.n	1f0c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	2204      	movs	r2, #4
    1f08:	4313      	orrs	r3, r2
    1f0a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
    1f0c:	683b      	ldr	r3, [r7, #0]
    1f0e:	2204      	movs	r2, #4
    1f10:	4013      	ands	r3, r2
    1f12:	d003      	beq.n	1f1c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	2202      	movs	r2, #2
    1f18:	4313      	orrs	r3, r2
    1f1a:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	b2da      	uxtb	r2, r3
    1f20:	68bb      	ldr	r3, [r7, #8]
    1f22:	761a      	strb	r2, [r3, #24]
}
    1f24:	46c0      	nop			; (mov r8, r8)
    1f26:	46bd      	mov	sp, r7
    1f28:	b004      	add	sp, #16
    1f2a:	bd80      	pop	{r7, pc}

00001f2c <adc_enable>:
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b084      	sub	sp, #16
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	681b      	ldr	r3, [r3, #0]
    1f38:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	0018      	movs	r0, r3
    1f40:	4b10      	ldr	r3, [pc, #64]	; (1f84 <adc_enable+0x58>)
    1f42:	4798      	blx	r3
    1f44:	1e03      	subs	r3, r0, #0
    1f46:	d1f9      	bne.n	1f3c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    1f48:	2017      	movs	r0, #23
    1f4a:	4b0f      	ldr	r3, [pc, #60]	; (1f88 <adc_enable+0x5c>)
    1f4c:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1f4e:	68fb      	ldr	r3, [r7, #12]
    1f50:	220f      	movs	r2, #15
    1f52:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	220f      	movs	r2, #15
    1f58:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1f5a:	68fb      	ldr	r3, [r7, #12]
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	2202      	movs	r2, #2
    1f62:	4313      	orrs	r3, r2
    1f64:	b2da      	uxtb	r2, r3
    1f66:	68fb      	ldr	r3, [r7, #12]
    1f68:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	0018      	movs	r0, r3
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <adc_enable+0x58>)
    1f72:	4798      	blx	r3
    1f74:	1e03      	subs	r3, r0, #0
    1f76:	d1f9      	bne.n	1f6c <adc_enable+0x40>
	return STATUS_OK;
    1f78:	2300      	movs	r3, #0
}
    1f7a:	0018      	movs	r0, r3
    1f7c:	46bd      	mov	sp, r7
    1f7e:	b004      	add	sp, #16
    1f80:	bd80      	pop	{r7, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	00001e5d 	.word	0x00001e5d
    1f88:	00001e01 	.word	0x00001e01

00001f8c <adc_disable>:
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b084      	sub	sp, #16
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    1f9a:	2017      	movs	r0, #23
    1f9c:	4b11      	ldr	r3, [pc, #68]	; (1fe4 <adc_disable+0x58>)
    1f9e:	4798      	blx	r3
	while (adc_is_syncing(module_inst)) {
    1fa0:	46c0      	nop			; (mov r8, r8)
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	0018      	movs	r0, r3
    1fa6:	4b10      	ldr	r3, [pc, #64]	; (1fe8 <adc_disable+0x5c>)
    1fa8:	4798      	blx	r3
    1faa:	1e03      	subs	r3, r0, #0
    1fac:	d1f9      	bne.n	1fa2 <adc_disable+0x16>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1fae:	68fb      	ldr	r3, [r7, #12]
    1fb0:	220f      	movs	r2, #15
    1fb2:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1fb4:	68fb      	ldr	r3, [r7, #12]
    1fb6:	220f      	movs	r2, #15
    1fb8:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1fba:	68fb      	ldr	r3, [r7, #12]
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	b2db      	uxtb	r3, r3
    1fc0:	2202      	movs	r2, #2
    1fc2:	4393      	bics	r3, r2
    1fc4:	b2da      	uxtb	r2, r3
    1fc6:	68fb      	ldr	r3, [r7, #12]
    1fc8:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	0018      	movs	r0, r3
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <adc_disable+0x5c>)
    1fd2:	4798      	blx	r3
    1fd4:	1e03      	subs	r3, r0, #0
    1fd6:	d1f9      	bne.n	1fcc <adc_disable+0x40>
	return STATUS_OK;
    1fd8:	2300      	movs	r3, #0
}
    1fda:	0018      	movs	r0, r3
    1fdc:	46bd      	mov	sp, r7
    1fde:	b004      	add	sp, #16
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	00001e2d 	.word	0x00001e2d
    1fe8:	00001e5d 	.word	0x00001e5d

00001fec <adc_start_conversion>:
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	687b      	ldr	r3, [r7, #4]
    1ffe:	0018      	movs	r0, r3
    2000:	4b0b      	ldr	r3, [pc, #44]	; (2030 <STACK_SIZE+0x30>)
    2002:	4798      	blx	r3
    2004:	1e03      	subs	r3, r0, #0
    2006:	d1f9      	bne.n	1ffc <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	7b1b      	ldrb	r3, [r3, #12]
    200c:	b2db      	uxtb	r3, r3
    200e:	2202      	movs	r2, #2
    2010:	4313      	orrs	r3, r2
    2012:	b2da      	uxtb	r2, r3
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
    2018:	46c0      	nop			; (mov r8, r8)
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	0018      	movs	r0, r3
    201e:	4b04      	ldr	r3, [pc, #16]	; (2030 <STACK_SIZE+0x30>)
    2020:	4798      	blx	r3
    2022:	1e03      	subs	r3, r0, #0
    2024:	d1f9      	bne.n	201a <STACK_SIZE+0x1a>
}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	46bd      	mov	sp, r7
    202a:	b004      	add	sp, #16
    202c:	bd80      	pop	{r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00001e5d 	.word	0x00001e5d

00002034 <adc_read>:
{
    2034:	b580      	push	{r7, lr}
    2036:	b084      	sub	sp, #16
    2038:	af00      	add	r7, sp, #0
    203a:	6078      	str	r0, [r7, #4]
    203c:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	0018      	movs	r0, r3
    2042:	4b18      	ldr	r3, [pc, #96]	; (20a4 <adc_read+0x70>)
    2044:	4798      	blx	r3
    2046:	0002      	movs	r2, r0
    2048:	2301      	movs	r3, #1
    204a:	4013      	ands	r3, r2
    204c:	d101      	bne.n	2052 <adc_read+0x1e>
		return STATUS_BUSY;
    204e:	2305      	movs	r3, #5
    2050:	e023      	b.n	209a <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	681b      	ldr	r3, [r3, #0]
    2056:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2058:	46c0      	nop			; (mov r8, r8)
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	0018      	movs	r0, r3
    205e:	4b12      	ldr	r3, [pc, #72]	; (20a8 <adc_read+0x74>)
    2060:	4798      	blx	r3
    2062:	1e03      	subs	r3, r0, #0
    2064:	d1f9      	bne.n	205a <adc_read+0x26>
	*result = adc_module->RESULT.reg;
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	8b5b      	ldrh	r3, [r3, #26]
    206a:	b29a      	uxth	r2, r3
    206c:	683b      	ldr	r3, [r7, #0]
    206e:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    2070:	687b      	ldr	r3, [r7, #4]
    2072:	2101      	movs	r1, #1
    2074:	0018      	movs	r0, r3
    2076:	4b0d      	ldr	r3, [pc, #52]	; (20ac <adc_read+0x78>)
    2078:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	0018      	movs	r0, r3
    207e:	4b09      	ldr	r3, [pc, #36]	; (20a4 <adc_read+0x70>)
    2080:	4798      	blx	r3
    2082:	0002      	movs	r2, r0
    2084:	2304      	movs	r3, #4
    2086:	4013      	ands	r3, r2
    2088:	d006      	beq.n	2098 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	2104      	movs	r1, #4
    208e:	0018      	movs	r0, r3
    2090:	4b06      	ldr	r3, [pc, #24]	; (20ac <adc_read+0x78>)
    2092:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    2094:	231e      	movs	r3, #30
    2096:	e000      	b.n	209a <adc_read+0x66>
	return STATUS_OK;
    2098:	2300      	movs	r3, #0
}
    209a:	0018      	movs	r0, r3
    209c:	46bd      	mov	sp, r7
    209e:	b004      	add	sp, #16
    20a0:	bd80      	pop	{r7, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	00001e85 	.word	0x00001e85
    20a8:	00001e5d 	.word	0x00001e5d
    20ac:	00001ed9 	.word	0x00001ed9

000020b0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
    20b6:	0002      	movs	r2, r0
    20b8:	1dfb      	adds	r3, r7, #7
    20ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    20bc:	1dfb      	adds	r3, r7, #7
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	0018      	movs	r0, r3
    20c2:	4b03      	ldr	r3, [pc, #12]	; (20d0 <port_get_group_from_gpio_pin+0x20>)
    20c4:	4798      	blx	r3
    20c6:	0003      	movs	r3, r0
}
    20c8:	0018      	movs	r0, r3
    20ca:	46bd      	mov	sp, r7
    20cc:	b002      	add	sp, #8
    20ce:	bd80      	pop	{r7, pc}
    20d0:	00001d61 	.word	0x00001d61

000020d4 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b084      	sub	sp, #16
    20d8:	af00      	add	r7, sp, #0
    20da:	0002      	movs	r2, r0
    20dc:	1dfb      	adds	r3, r7, #7
    20de:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20e0:	1dfb      	adds	r3, r7, #7
    20e2:	781b      	ldrb	r3, [r3, #0]
    20e4:	0018      	movs	r0, r3
    20e6:	4b0b      	ldr	r3, [pc, #44]	; (2114 <port_pin_get_output_level+0x40>)
    20e8:	4798      	blx	r3
    20ea:	0003      	movs	r3, r0
    20ec:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20ee:	1dfb      	adds	r3, r7, #7
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	221f      	movs	r2, #31
    20f4:	4013      	ands	r3, r2
    20f6:	2201      	movs	r2, #1
    20f8:	409a      	lsls	r2, r3
    20fa:	0013      	movs	r3, r2
    20fc:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    20fe:	68fb      	ldr	r3, [r7, #12]
    2100:	691b      	ldr	r3, [r3, #16]
    2102:	68ba      	ldr	r2, [r7, #8]
    2104:	4013      	ands	r3, r2
    2106:	1e5a      	subs	r2, r3, #1
    2108:	4193      	sbcs	r3, r2
    210a:	b2db      	uxtb	r3, r3
}
    210c:	0018      	movs	r0, r3
    210e:	46bd      	mov	sp, r7
    2110:	b004      	add	sp, #16
    2112:	bd80      	pop	{r7, pc}
    2114:	000020b1 	.word	0x000020b1

00002118 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2118:	b580      	push	{r7, lr}
    211a:	b084      	sub	sp, #16
    211c:	af00      	add	r7, sp, #0
    211e:	0002      	movs	r2, r0
    2120:	1dfb      	adds	r3, r7, #7
    2122:	701a      	strb	r2, [r3, #0]
    2124:	1dbb      	adds	r3, r7, #6
    2126:	1c0a      	adds	r2, r1, #0
    2128:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    212a:	1dfb      	adds	r3, r7, #7
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	0018      	movs	r0, r3
    2130:	4b0d      	ldr	r3, [pc, #52]	; (2168 <port_pin_set_output_level+0x50>)
    2132:	4798      	blx	r3
    2134:	0003      	movs	r3, r0
    2136:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2138:	1dfb      	adds	r3, r7, #7
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	221f      	movs	r2, #31
    213e:	4013      	ands	r3, r2
    2140:	2201      	movs	r2, #1
    2142:	409a      	lsls	r2, r3
    2144:	0013      	movs	r3, r2
    2146:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2148:	1dbb      	adds	r3, r7, #6
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	2b00      	cmp	r3, #0
    214e:	d003      	beq.n	2158 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	68ba      	ldr	r2, [r7, #8]
    2154:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2156:	e002      	b.n	215e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	68ba      	ldr	r2, [r7, #8]
    215c:	615a      	str	r2, [r3, #20]
}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	46bd      	mov	sp, r7
    2162:	b004      	add	sp, #16
    2164:	bd80      	pop	{r7, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	000020b1 	.word	0x000020b1

0000216c <init_cmd_list>:
const char* CMD_I2C_SCAN = "i2c_scan";

extern struct adc_module adc_inst;
extern struct i2c_master_module i2c_master_instance;

void init_cmd_list() {
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	46de      	mov	lr, fp
    2170:	4657      	mov	r7, sl
    2172:	464e      	mov	r6, r9
    2174:	4645      	mov	r5, r8
    2176:	b5e0      	push	{r5, r6, r7, lr}
    2178:	b083      	sub	sp, #12
    217a:	af00      	add	r7, sp, #0
	cmd_list = (struct option_list) {
    217c:	4b4f      	ldr	r3, [pc, #316]	; (22bc <init_cmd_list+0x150>)
    217e:	681a      	ldr	r2, [r3, #0]
    2180:	4b4f      	ldr	r3, [pc, #316]	; (22c0 <init_cmd_list+0x154>)
    2182:	6819      	ldr	r1, [r3, #0]
    2184:	4b4f      	ldr	r3, [pc, #316]	; (22c4 <init_cmd_list+0x158>)
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	607b      	str	r3, [r7, #4]
    218a:	4b4f      	ldr	r3, [pc, #316]	; (22c8 <init_cmd_list+0x15c>)
    218c:	6818      	ldr	r0, [r3, #0]
    218e:	6038      	str	r0, [r7, #0]
    2190:	4b4e      	ldr	r3, [pc, #312]	; (22cc <init_cmd_list+0x160>)
    2192:	681c      	ldr	r4, [r3, #0]
    2194:	46a3      	mov	fp, r4
    2196:	4b4e      	ldr	r3, [pc, #312]	; (22d0 <init_cmd_list+0x164>)
    2198:	681c      	ldr	r4, [r3, #0]
    219a:	46a2      	mov	sl, r4
    219c:	4b4d      	ldr	r3, [pc, #308]	; (22d4 <init_cmd_list+0x168>)
    219e:	681c      	ldr	r4, [r3, #0]
    21a0:	46a1      	mov	r9, r4
    21a2:	4b4d      	ldr	r3, [pc, #308]	; (22d8 <init_cmd_list+0x16c>)
    21a4:	681c      	ldr	r4, [r3, #0]
    21a6:	46a0      	mov	r8, r4
    21a8:	4b4c      	ldr	r3, [pc, #304]	; (22dc <init_cmd_list+0x170>)
    21aa:	681c      	ldr	r4, [r3, #0]
    21ac:	46a4      	mov	ip, r4
    21ae:	4b4c      	ldr	r3, [pc, #304]	; (22e0 <init_cmd_list+0x174>)
    21b0:	681e      	ldr	r6, [r3, #0]
    21b2:	4b4c      	ldr	r3, [pc, #304]	; (22e4 <init_cmd_list+0x178>)
    21b4:	681d      	ldr	r5, [r3, #0]
    21b6:	4b4c      	ldr	r3, [pc, #304]	; (22e8 <init_cmd_list+0x17c>)
    21b8:	681c      	ldr	r4, [r3, #0]
    21ba:	4b4c      	ldr	r3, [pc, #304]	; (22ec <init_cmd_list+0x180>)
    21bc:	6818      	ldr	r0, [r3, #0]
    21be:	4b4c      	ldr	r3, [pc, #304]	; (22f0 <init_cmd_list+0x184>)
    21c0:	601a      	str	r2, [r3, #0]
    21c2:	4a4b      	ldr	r2, [pc, #300]	; (22f0 <init_cmd_list+0x184>)
    21c4:	4b4b      	ldr	r3, [pc, #300]	; (22f4 <init_cmd_list+0x188>)
    21c6:	6053      	str	r3, [r2, #4]
    21c8:	4a49      	ldr	r2, [pc, #292]	; (22f0 <init_cmd_list+0x184>)
    21ca:	4b4b      	ldr	r3, [pc, #300]	; (22f8 <init_cmd_list+0x18c>)
    21cc:	6093      	str	r3, [r2, #8]
    21ce:	4b48      	ldr	r3, [pc, #288]	; (22f0 <init_cmd_list+0x184>)
    21d0:	60d9      	str	r1, [r3, #12]
    21d2:	4b47      	ldr	r3, [pc, #284]	; (22f0 <init_cmd_list+0x184>)
    21d4:	4a47      	ldr	r2, [pc, #284]	; (22f4 <init_cmd_list+0x188>)
    21d6:	611a      	str	r2, [r3, #16]
    21d8:	4b45      	ldr	r3, [pc, #276]	; (22f0 <init_cmd_list+0x184>)
    21da:	4a48      	ldr	r2, [pc, #288]	; (22fc <init_cmd_list+0x190>)
    21dc:	615a      	str	r2, [r3, #20]
    21de:	4b44      	ldr	r3, [pc, #272]	; (22f0 <init_cmd_list+0x184>)
    21e0:	687a      	ldr	r2, [r7, #4]
    21e2:	619a      	str	r2, [r3, #24]
    21e4:	4b42      	ldr	r3, [pc, #264]	; (22f0 <init_cmd_list+0x184>)
    21e6:	4a43      	ldr	r2, [pc, #268]	; (22f4 <init_cmd_list+0x188>)
    21e8:	61da      	str	r2, [r3, #28]
    21ea:	4b41      	ldr	r3, [pc, #260]	; (22f0 <init_cmd_list+0x184>)
    21ec:	4a44      	ldr	r2, [pc, #272]	; (2300 <init_cmd_list+0x194>)
    21ee:	621a      	str	r2, [r3, #32]
    21f0:	4b3f      	ldr	r3, [pc, #252]	; (22f0 <init_cmd_list+0x184>)
    21f2:	683a      	ldr	r2, [r7, #0]
    21f4:	625a      	str	r2, [r3, #36]	; 0x24
    21f6:	4b3e      	ldr	r3, [pc, #248]	; (22f0 <init_cmd_list+0x184>)
    21f8:	4a42      	ldr	r2, [pc, #264]	; (2304 <init_cmd_list+0x198>)
    21fa:	629a      	str	r2, [r3, #40]	; 0x28
    21fc:	4b3c      	ldr	r3, [pc, #240]	; (22f0 <init_cmd_list+0x184>)
    21fe:	4a42      	ldr	r2, [pc, #264]	; (2308 <init_cmd_list+0x19c>)
    2200:	62da      	str	r2, [r3, #44]	; 0x2c
    2202:	4b3b      	ldr	r3, [pc, #236]	; (22f0 <init_cmd_list+0x184>)
    2204:	465a      	mov	r2, fp
    2206:	631a      	str	r2, [r3, #48]	; 0x30
    2208:	4b39      	ldr	r3, [pc, #228]	; (22f0 <init_cmd_list+0x184>)
    220a:	4a3e      	ldr	r2, [pc, #248]	; (2304 <init_cmd_list+0x198>)
    220c:	635a      	str	r2, [r3, #52]	; 0x34
    220e:	4b38      	ldr	r3, [pc, #224]	; (22f0 <init_cmd_list+0x184>)
    2210:	4a3e      	ldr	r2, [pc, #248]	; (230c <init_cmd_list+0x1a0>)
    2212:	639a      	str	r2, [r3, #56]	; 0x38
    2214:	4b36      	ldr	r3, [pc, #216]	; (22f0 <init_cmd_list+0x184>)
    2216:	4652      	mov	r2, sl
    2218:	63da      	str	r2, [r3, #60]	; 0x3c
    221a:	4b35      	ldr	r3, [pc, #212]	; (22f0 <init_cmd_list+0x184>)
    221c:	4a39      	ldr	r2, [pc, #228]	; (2304 <init_cmd_list+0x198>)
    221e:	641a      	str	r2, [r3, #64]	; 0x40
    2220:	4b33      	ldr	r3, [pc, #204]	; (22f0 <init_cmd_list+0x184>)
    2222:	4a3b      	ldr	r2, [pc, #236]	; (2310 <init_cmd_list+0x1a4>)
    2224:	645a      	str	r2, [r3, #68]	; 0x44
    2226:	4b32      	ldr	r3, [pc, #200]	; (22f0 <init_cmd_list+0x184>)
    2228:	464a      	mov	r2, r9
    222a:	649a      	str	r2, [r3, #72]	; 0x48
    222c:	4b30      	ldr	r3, [pc, #192]	; (22f0 <init_cmd_list+0x184>)
    222e:	4a31      	ldr	r2, [pc, #196]	; (22f4 <init_cmd_list+0x188>)
    2230:	64da      	str	r2, [r3, #76]	; 0x4c
    2232:	4b2f      	ldr	r3, [pc, #188]	; (22f0 <init_cmd_list+0x184>)
    2234:	4a37      	ldr	r2, [pc, #220]	; (2314 <init_cmd_list+0x1a8>)
    2236:	651a      	str	r2, [r3, #80]	; 0x50
    2238:	4b2d      	ldr	r3, [pc, #180]	; (22f0 <init_cmd_list+0x184>)
    223a:	4642      	mov	r2, r8
    223c:	655a      	str	r2, [r3, #84]	; 0x54
    223e:	4b2c      	ldr	r3, [pc, #176]	; (22f0 <init_cmd_list+0x184>)
    2240:	4a2c      	ldr	r2, [pc, #176]	; (22f4 <init_cmd_list+0x188>)
    2242:	659a      	str	r2, [r3, #88]	; 0x58
    2244:	4b2a      	ldr	r3, [pc, #168]	; (22f0 <init_cmd_list+0x184>)
    2246:	4a34      	ldr	r2, [pc, #208]	; (2318 <init_cmd_list+0x1ac>)
    2248:	65da      	str	r2, [r3, #92]	; 0x5c
    224a:	4b29      	ldr	r3, [pc, #164]	; (22f0 <init_cmd_list+0x184>)
    224c:	4662      	mov	r2, ip
    224e:	661a      	str	r2, [r3, #96]	; 0x60
    2250:	4b27      	ldr	r3, [pc, #156]	; (22f0 <init_cmd_list+0x184>)
    2252:	4a32      	ldr	r2, [pc, #200]	; (231c <init_cmd_list+0x1b0>)
    2254:	665a      	str	r2, [r3, #100]	; 0x64
    2256:	4b26      	ldr	r3, [pc, #152]	; (22f0 <init_cmd_list+0x184>)
    2258:	4a31      	ldr	r2, [pc, #196]	; (2320 <init_cmd_list+0x1b4>)
    225a:	669a      	str	r2, [r3, #104]	; 0x68
    225c:	4b24      	ldr	r3, [pc, #144]	; (22f0 <init_cmd_list+0x184>)
    225e:	66de      	str	r6, [r3, #108]	; 0x6c
    2260:	4b23      	ldr	r3, [pc, #140]	; (22f0 <init_cmd_list+0x184>)
    2262:	4a24      	ldr	r2, [pc, #144]	; (22f4 <init_cmd_list+0x188>)
    2264:	671a      	str	r2, [r3, #112]	; 0x70
    2266:	4b22      	ldr	r3, [pc, #136]	; (22f0 <init_cmd_list+0x184>)
    2268:	4a2e      	ldr	r2, [pc, #184]	; (2324 <init_cmd_list+0x1b8>)
    226a:	675a      	str	r2, [r3, #116]	; 0x74
    226c:	4b20      	ldr	r3, [pc, #128]	; (22f0 <init_cmd_list+0x184>)
    226e:	679d      	str	r5, [r3, #120]	; 0x78
    2270:	4b1f      	ldr	r3, [pc, #124]	; (22f0 <init_cmd_list+0x184>)
    2272:	4a20      	ldr	r2, [pc, #128]	; (22f4 <init_cmd_list+0x188>)
    2274:	67da      	str	r2, [r3, #124]	; 0x7c
    2276:	4b1e      	ldr	r3, [pc, #120]	; (22f0 <init_cmd_list+0x184>)
    2278:	2180      	movs	r1, #128	; 0x80
    227a:	4a2b      	ldr	r2, [pc, #172]	; (2328 <init_cmd_list+0x1bc>)
    227c:	505a      	str	r2, [r3, r1]
    227e:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <init_cmd_list+0x184>)
    2280:	2284      	movs	r2, #132	; 0x84
    2282:	509c      	str	r4, [r3, r2]
    2284:	4b1a      	ldr	r3, [pc, #104]	; (22f0 <init_cmd_list+0x184>)
    2286:	2188      	movs	r1, #136	; 0x88
    2288:	4a1e      	ldr	r2, [pc, #120]	; (2304 <init_cmd_list+0x198>)
    228a:	505a      	str	r2, [r3, r1]
    228c:	4b18      	ldr	r3, [pc, #96]	; (22f0 <init_cmd_list+0x184>)
    228e:	218c      	movs	r1, #140	; 0x8c
    2290:	4a26      	ldr	r2, [pc, #152]	; (232c <init_cmd_list+0x1c0>)
    2292:	505a      	str	r2, [r3, r1]
    2294:	4b16      	ldr	r3, [pc, #88]	; (22f0 <init_cmd_list+0x184>)
    2296:	2290      	movs	r2, #144	; 0x90
    2298:	5098      	str	r0, [r3, r2]
    229a:	4b15      	ldr	r3, [pc, #84]	; (22f0 <init_cmd_list+0x184>)
    229c:	2194      	movs	r1, #148	; 0x94
    229e:	4a15      	ldr	r2, [pc, #84]	; (22f4 <init_cmd_list+0x188>)
    22a0:	505a      	str	r2, [r3, r1]
    22a2:	4b13      	ldr	r3, [pc, #76]	; (22f0 <init_cmd_list+0x184>)
    22a4:	2198      	movs	r1, #152	; 0x98
    22a6:	4a22      	ldr	r2, [pc, #136]	; (2330 <init_cmd_list+0x1c4>)
    22a8:	505a      	str	r2, [r3, r1]
		{ CMD_CLEAR_ACT, "", "Turn the actuator (LED) off." } ,
		{ CMD_ADC_GET, "[port] [pin_num]", "Get the ADC value of an input pin." } ,
		{ CMD_MCU_TEMP, "", "Print the temperature reading of the on-board MCU temperature sensor." } ,
		{ CMD_I2C_SCAN, "", "Print out list of addresses of I2C devices on bus." }}
	};
}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	46bd      	mov	sp, r7
    22ae:	b003      	add	sp, #12
    22b0:	bc3c      	pop	{r2, r3, r4, r5}
    22b2:	4690      	mov	r8, r2
    22b4:	4699      	mov	r9, r3
    22b6:	46a2      	mov	sl, r4
    22b8:	46ab      	mov	fp, r5
    22ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22bc:	20000000 	.word	0x20000000
    22c0:	20000004 	.word	0x20000004
    22c4:	20000008 	.word	0x20000008
    22c8:	2000000c 	.word	0x2000000c
    22cc:	20000010 	.word	0x20000010
    22d0:	20000014 	.word	0x20000014
    22d4:	20000018 	.word	0x20000018
    22d8:	2000001c 	.word	0x2000001c
    22dc:	20000020 	.word	0x20000020
    22e0:	20000028 	.word	0x20000028
    22e4:	2000002c 	.word	0x2000002c
    22e8:	20000030 	.word	0x20000030
    22ec:	20000034 	.word	0x20000034
    22f0:	200002e0 	.word	0x200002e0
    22f4:	0000a0ac 	.word	0x0000a0ac
    22f8:	0000a0b0 	.word	0x0000a0b0
    22fc:	0000a0c8 	.word	0x0000a0c8
    2300:	0000a0f0 	.word	0x0000a0f0
    2304:	0000a118 	.word	0x0000a118
    2308:	0000a12c 	.word	0x0000a12c
    230c:	0000a150 	.word	0x0000a150
    2310:	0000a174 	.word	0x0000a174
    2314:	0000a1a0 	.word	0x0000a1a0
    2318:	0000a1b8 	.word	0x0000a1b8
    231c:	0000a1d0 	.word	0x0000a1d0
    2320:	0000a1f4 	.word	0x0000a1f4
    2324:	0000a214 	.word	0x0000a214
    2328:	0000a230 	.word	0x0000a230
    232c:	0000a250 	.word	0x0000a250
    2330:	0000a274 	.word	0x0000a274

00002334 <disable_adc>:
	.ten_bit_address  = false,
	.high_speed       = false,
	.hs_master_code   = 0x00,
};

static void disable_adc(void) {
    2334:	b580      	push	{r7, lr}
    2336:	af00      	add	r7, sp, #0
	adc_disable(&adc_inst);
    2338:	4b03      	ldr	r3, [pc, #12]	; (2348 <disable_adc+0x14>)
    233a:	0018      	movs	r0, r3
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <disable_adc+0x18>)
    233e:	4798      	blx	r3
}
    2340:	46c0      	nop			; (mov r8, r8)
    2342:	46bd      	mov	sp, r7
    2344:	bd80      	pop	{r7, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	20000450 	.word	0x20000450
    234c:	00001f8d 	.word	0x00001f8d

00002350 <configure_adc>:

static void configure_adc(void) {
    2350:	b580      	push	{r7, lr}
    2352:	b08c      	sub	sp, #48	; 0x30
    2354:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    2356:	003b      	movs	r3, r7
    2358:	0018      	movs	r0, r3
    235a:	4b0e      	ldr	r3, [pc, #56]	; (2394 <configure_adc+0x44>)
    235c:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    235e:	003b      	movs	r3, r7
    2360:	2201      	movs	r2, #1
    2362:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    2364:	003b      	movs	r3, r7
    2366:	2202      	movs	r2, #2
    2368:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    236a:	003b      	movs	r3, r7
    236c:	2280      	movs	r2, #128	; 0x80
    236e:	0092      	lsls	r2, r2, #2
    2370:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    2372:	003b      	movs	r3, r7
    2374:	2200      	movs	r2, #0
    2376:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    2378:	003a      	movs	r2, r7
    237a:	4907      	ldr	r1, [pc, #28]	; (2398 <configure_adc+0x48>)
    237c:	4b07      	ldr	r3, [pc, #28]	; (239c <configure_adc+0x4c>)
    237e:	0018      	movs	r0, r3
    2380:	4b07      	ldr	r3, [pc, #28]	; (23a0 <configure_adc+0x50>)
    2382:	4798      	blx	r3
	adc_enable(&adc_inst);
    2384:	4b05      	ldr	r3, [pc, #20]	; (239c <configure_adc+0x4c>)
    2386:	0018      	movs	r0, r3
    2388:	4b06      	ldr	r3, [pc, #24]	; (23a4 <configure_adc+0x54>)
    238a:	4798      	blx	r3
}
    238c:	46c0      	nop			; (mov r8, r8)
    238e:	46bd      	mov	sp, r7
    2390:	b00c      	add	sp, #48	; 0x30
    2392:	bd80      	pop	{r7, pc}
    2394:	00000369 	.word	0x00000369
    2398:	42004000 	.word	0x42004000
    239c:	20000450 	.word	0x20000450
    23a0:	000009b9 	.word	0x000009b9
    23a4:	00001f2d 	.word	0x00001f2d

000023a8 <handle_user_input>:

// TODO: If arg1 or arg2 are non-digit, we need to throw an error.
void handle_user_input(char* input) {
    23a8:	b580      	push	{r7, lr}
    23aa:	b09c      	sub	sp, #112	; 0x70
    23ac:	af00      	add	r7, sp, #0
    23ae:	6078      	str	r0, [r7, #4]
	char* cmd = strtok(input, " ");
    23b0:	4ac5      	ldr	r2, [pc, #788]	; (26c8 <handle_user_input+0x320>)
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	0011      	movs	r1, r2
    23b6:	0018      	movs	r0, r3
    23b8:	4bc4      	ldr	r3, [pc, #784]	; (26cc <handle_user_input+0x324>)
    23ba:	4798      	blx	r3
    23bc:	0003      	movs	r3, r0
    23be:	66fb      	str	r3, [r7, #108]	; 0x6c

	if(strcmp(CMD_HELP, cmd) == 0) { 
    23c0:	4bc3      	ldr	r3, [pc, #780]	; (26d0 <handle_user_input+0x328>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    23c6:	0011      	movs	r1, r2
    23c8:	0018      	movs	r0, r3
    23ca:	4bc2      	ldr	r3, [pc, #776]	; (26d4 <handle_user_input+0x32c>)
    23cc:	4798      	blx	r3
    23ce:	1e03      	subs	r3, r0, #0
    23d0:	d102      	bne.n	23d8 <handle_user_input+0x30>
		handle_help(); 
    23d2:	4bc1      	ldr	r3, [pc, #772]	; (26d8 <handle_user_input+0x330>)
    23d4:	4798      	blx	r3
    23d6:	e24c      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
    23d8:	4bc0      	ldr	r3, [pc, #768]	; (26dc <handle_user_input+0x334>)
    23da:	681b      	ldr	r3, [r3, #0]
    23dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    23de:	0011      	movs	r1, r2
    23e0:	0018      	movs	r0, r3
    23e2:	4bbc      	ldr	r3, [pc, #752]	; (26d4 <handle_user_input+0x32c>)
    23e4:	4798      	blx	r3
    23e6:	1e03      	subs	r3, r0, #0
    23e8:	d102      	bne.n	23f0 <handle_user_input+0x48>
		handle_ver_bl(); 
    23ea:	4bbd      	ldr	r3, [pc, #756]	; (26e0 <handle_user_input+0x338>)
    23ec:	4798      	blx	r3
    23ee:	e240      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
    23f0:	4bbc      	ldr	r3, [pc, #752]	; (26e4 <handle_user_input+0x33c>)
    23f2:	681b      	ldr	r3, [r3, #0]
    23f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    23f6:	0011      	movs	r1, r2
    23f8:	0018      	movs	r0, r3
    23fa:	4bb6      	ldr	r3, [pc, #728]	; (26d4 <handle_user_input+0x32c>)
    23fc:	4798      	blx	r3
    23fe:	1e03      	subs	r3, r0, #0
    2400:	d102      	bne.n	2408 <handle_user_input+0x60>
		handle_ver_app();
    2402:	4bb9      	ldr	r3, [pc, #740]	; (26e8 <handle_user_input+0x340>)
    2404:	4798      	blx	r3
    2406:	e234      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
    2408:	4bb8      	ldr	r3, [pc, #736]	; (26ec <handle_user_input+0x344>)
    240a:	681b      	ldr	r3, [r3, #0]
    240c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    240e:	0011      	movs	r1, r2
    2410:	0018      	movs	r0, r3
    2412:	4bb0      	ldr	r3, [pc, #704]	; (26d4 <handle_user_input+0x32c>)
    2414:	4798      	blx	r3
    2416:	1e03      	subs	r3, r0, #0
    2418:	d146      	bne.n	24a8 <handle_user_input+0x100>
		char* arg1 = strtok(NULL, " ");
    241a:	4bab      	ldr	r3, [pc, #684]	; (26c8 <handle_user_input+0x320>)
    241c:	0019      	movs	r1, r3
    241e:	2000      	movs	r0, #0
    2420:	4baa      	ldr	r3, [pc, #680]	; (26cc <handle_user_input+0x324>)
    2422:	4798      	blx	r3
    2424:	0003      	movs	r3, r0
    2426:	66bb      	str	r3, [r7, #104]	; 0x68
		char* arg2 = strtok(NULL, " ");
    2428:	4ba7      	ldr	r3, [pc, #668]	; (26c8 <handle_user_input+0x320>)
    242a:	0019      	movs	r1, r3
    242c:	2000      	movs	r0, #0
    242e:	4ba7      	ldr	r3, [pc, #668]	; (26cc <handle_user_input+0x324>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	667b      	str	r3, [r7, #100]	; 0x64
		
		if(arg1 == 0 || arg2 == 0) {
    2436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2438:	2b00      	cmp	r3, #0
    243a:	d002      	beq.n	2442 <handle_user_input+0x9a>
    243c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    243e:	2b00      	cmp	r3, #0
    2440:	d104      	bne.n	244c <handle_user_input+0xa4>
			printf("Not enough arguments! Try \"help\".\r\n");
    2442:	4bab      	ldr	r3, [pc, #684]	; (26f0 <handle_user_input+0x348>)
    2444:	0018      	movs	r0, r3
    2446:	4bab      	ldr	r3, [pc, #684]	; (26f4 <handle_user_input+0x34c>)
    2448:	4798      	blx	r3
			return;
    244a:	e212      	b.n	2872 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    244c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    244e:	663b      	str	r3, [r7, #96]	; 0x60
		int pin_num = atoi(arg2);
    2450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2452:	0018      	movs	r0, r3
    2454:	4ba8      	ldr	r3, [pc, #672]	; (26f8 <handle_user_input+0x350>)
    2456:	4798      	blx	r3
    2458:	0003      	movs	r3, r0
    245a:	65fb      	str	r3, [r7, #92]	; 0x5c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    245c:	4aa7      	ldr	r2, [pc, #668]	; (26fc <handle_user_input+0x354>)
    245e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2460:	0011      	movs	r1, r2
    2462:	0018      	movs	r0, r3
    2464:	4b9b      	ldr	r3, [pc, #620]	; (26d4 <handle_user_input+0x32c>)
    2466:	4798      	blx	r3
    2468:	1e03      	subs	r3, r0, #0
    246a:	d00b      	beq.n	2484 <handle_user_input+0xdc>
    246c:	4aa4      	ldr	r2, [pc, #656]	; (2700 <handle_user_input+0x358>)
    246e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2470:	0011      	movs	r1, r2
    2472:	0018      	movs	r0, r3
    2474:	4b97      	ldr	r3, [pc, #604]	; (26d4 <handle_user_input+0x32c>)
    2476:	4798      	blx	r3
    2478:	1e03      	subs	r3, r0, #0
    247a:	d003      	beq.n	2484 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    247c:	4ba1      	ldr	r3, [pc, #644]	; (2704 <handle_user_input+0x35c>)
    247e:	0018      	movs	r0, r3
    2480:	4b9c      	ldr	r3, [pc, #624]	; (26f4 <handle_user_input+0x34c>)
    2482:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    2484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2486:	2b00      	cmp	r3, #0
    2488:	dc06      	bgt.n	2498 <handle_user_input+0xf0>
    248a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    248c:	2b20      	cmp	r3, #32
    248e:	dd03      	ble.n	2498 <handle_user_input+0xf0>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    2490:	4b9d      	ldr	r3, [pc, #628]	; (2708 <handle_user_input+0x360>)
    2492:	0018      	movs	r0, r3
    2494:	4b97      	ldr	r3, [pc, #604]	; (26f4 <handle_user_input+0x34c>)
    2496:	4798      	blx	r3
		}
		
		handle_gpio_set(*port, pin_num);
    2498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    249e:	0011      	movs	r1, r2
    24a0:	0018      	movs	r0, r3
    24a2:	4b9a      	ldr	r3, [pc, #616]	; (270c <handle_user_input+0x364>)
    24a4:	4798      	blx	r3
    24a6:	e1e4      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
    24a8:	4b99      	ldr	r3, [pc, #612]	; (2710 <handle_user_input+0x368>)
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    24ae:	0011      	movs	r1, r2
    24b0:	0018      	movs	r0, r3
    24b2:	4b88      	ldr	r3, [pc, #544]	; (26d4 <handle_user_input+0x32c>)
    24b4:	4798      	blx	r3
    24b6:	1e03      	subs	r3, r0, #0
    24b8:	d146      	bne.n	2548 <handle_user_input+0x1a0>
		char* arg1 = strtok(NULL, " ");
    24ba:	4b83      	ldr	r3, [pc, #524]	; (26c8 <handle_user_input+0x320>)
    24bc:	0019      	movs	r1, r3
    24be:	2000      	movs	r0, #0
    24c0:	4b82      	ldr	r3, [pc, #520]	; (26cc <handle_user_input+0x324>)
    24c2:	4798      	blx	r3
    24c4:	0003      	movs	r3, r0
    24c6:	65bb      	str	r3, [r7, #88]	; 0x58
		char* arg2 = strtok(NULL, " ");
    24c8:	4b7f      	ldr	r3, [pc, #508]	; (26c8 <handle_user_input+0x320>)
    24ca:	0019      	movs	r1, r3
    24cc:	2000      	movs	r0, #0
    24ce:	4b7f      	ldr	r3, [pc, #508]	; (26cc <handle_user_input+0x324>)
    24d0:	4798      	blx	r3
    24d2:	0003      	movs	r3, r0
    24d4:	657b      	str	r3, [r7, #84]	; 0x54
		
		if(arg1 == 0 || arg2 == 0) {
    24d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    24d8:	2b00      	cmp	r3, #0
    24da:	d002      	beq.n	24e2 <handle_user_input+0x13a>
    24dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24de:	2b00      	cmp	r3, #0
    24e0:	d104      	bne.n	24ec <handle_user_input+0x144>
			printf("Not enough arguments! Try \"help\".\r\n");
    24e2:	4b83      	ldr	r3, [pc, #524]	; (26f0 <handle_user_input+0x348>)
    24e4:	0018      	movs	r0, r3
    24e6:	4b83      	ldr	r3, [pc, #524]	; (26f4 <handle_user_input+0x34c>)
    24e8:	4798      	blx	r3
			return;
    24ea:	e1c2      	b.n	2872 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    24ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    24ee:	653b      	str	r3, [r7, #80]	; 0x50
		int pin_num = atoi(arg2);
    24f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24f2:	0018      	movs	r0, r3
    24f4:	4b80      	ldr	r3, [pc, #512]	; (26f8 <handle_user_input+0x350>)
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
    24fa:	64fb      	str	r3, [r7, #76]	; 0x4c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    24fc:	4a7f      	ldr	r2, [pc, #508]	; (26fc <handle_user_input+0x354>)
    24fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2500:	0011      	movs	r1, r2
    2502:	0018      	movs	r0, r3
    2504:	4b73      	ldr	r3, [pc, #460]	; (26d4 <handle_user_input+0x32c>)
    2506:	4798      	blx	r3
    2508:	1e03      	subs	r3, r0, #0
    250a:	d00b      	beq.n	2524 <handle_user_input+0x17c>
    250c:	4a7c      	ldr	r2, [pc, #496]	; (2700 <handle_user_input+0x358>)
    250e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2510:	0011      	movs	r1, r2
    2512:	0018      	movs	r0, r3
    2514:	4b6f      	ldr	r3, [pc, #444]	; (26d4 <handle_user_input+0x32c>)
    2516:	4798      	blx	r3
    2518:	1e03      	subs	r3, r0, #0
    251a:	d003      	beq.n	2524 <handle_user_input+0x17c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    251c:	4b79      	ldr	r3, [pc, #484]	; (2704 <handle_user_input+0x35c>)
    251e:	0018      	movs	r0, r3
    2520:	4b74      	ldr	r3, [pc, #464]	; (26f4 <handle_user_input+0x34c>)
    2522:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    2524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2526:	2b00      	cmp	r3, #0
    2528:	dc06      	bgt.n	2538 <handle_user_input+0x190>
    252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    252c:	2b20      	cmp	r3, #32
    252e:	dd03      	ble.n	2538 <handle_user_input+0x190>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    2530:	4b75      	ldr	r3, [pc, #468]	; (2708 <handle_user_input+0x360>)
    2532:	0018      	movs	r0, r3
    2534:	4b6f      	ldr	r3, [pc, #444]	; (26f4 <handle_user_input+0x34c>)
    2536:	4798      	blx	r3
		}
		
		handle_gpio_clear(*port, pin_num); 
    2538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    253e:	0011      	movs	r1, r2
    2540:	0018      	movs	r0, r3
    2542:	4b74      	ldr	r3, [pc, #464]	; (2714 <handle_user_input+0x36c>)
    2544:	4798      	blx	r3
    2546:	e194      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
    2548:	4b73      	ldr	r3, [pc, #460]	; (2718 <handle_user_input+0x370>)
    254a:	681b      	ldr	r3, [r3, #0]
    254c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    254e:	0011      	movs	r1, r2
    2550:	0018      	movs	r0, r3
    2552:	4b60      	ldr	r3, [pc, #384]	; (26d4 <handle_user_input+0x32c>)
    2554:	4798      	blx	r3
    2556:	1e03      	subs	r3, r0, #0
    2558:	d146      	bne.n	25e8 <handle_user_input+0x240>
		char* arg1 = strtok(NULL, " ");
    255a:	4b5b      	ldr	r3, [pc, #364]	; (26c8 <handle_user_input+0x320>)
    255c:	0019      	movs	r1, r3
    255e:	2000      	movs	r0, #0
    2560:	4b5a      	ldr	r3, [pc, #360]	; (26cc <handle_user_input+0x324>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
    2566:	64bb      	str	r3, [r7, #72]	; 0x48
		char* arg2 = strtok(NULL, " ");
    2568:	4b57      	ldr	r3, [pc, #348]	; (26c8 <handle_user_input+0x320>)
    256a:	0019      	movs	r1, r3
    256c:	2000      	movs	r0, #0
    256e:	4b57      	ldr	r3, [pc, #348]	; (26cc <handle_user_input+0x324>)
    2570:	4798      	blx	r3
    2572:	0003      	movs	r3, r0
    2574:	647b      	str	r3, [r7, #68]	; 0x44
		
		if(arg1 == 0 || arg2 == 0) {
    2576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2578:	2b00      	cmp	r3, #0
    257a:	d002      	beq.n	2582 <handle_user_input+0x1da>
    257c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    257e:	2b00      	cmp	r3, #0
    2580:	d104      	bne.n	258c <handle_user_input+0x1e4>
			printf("Not enough arguments! Try \"help\".\r\n");
    2582:	4b5b      	ldr	r3, [pc, #364]	; (26f0 <handle_user_input+0x348>)
    2584:	0018      	movs	r0, r3
    2586:	4b5b      	ldr	r3, [pc, #364]	; (26f4 <handle_user_input+0x34c>)
    2588:	4798      	blx	r3
			return;
    258a:	e172      	b.n	2872 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    258e:	643b      	str	r3, [r7, #64]	; 0x40
		int pin_num = atoi(arg2);
    2590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2592:	0018      	movs	r0, r3
    2594:	4b58      	ldr	r3, [pc, #352]	; (26f8 <handle_user_input+0x350>)
    2596:	4798      	blx	r3
    2598:	0003      	movs	r3, r0
    259a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    259c:	4a57      	ldr	r2, [pc, #348]	; (26fc <handle_user_input+0x354>)
    259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    25a0:	0011      	movs	r1, r2
    25a2:	0018      	movs	r0, r3
    25a4:	4b4b      	ldr	r3, [pc, #300]	; (26d4 <handle_user_input+0x32c>)
    25a6:	4798      	blx	r3
    25a8:	1e03      	subs	r3, r0, #0
    25aa:	d00b      	beq.n	25c4 <handle_user_input+0x21c>
    25ac:	4a54      	ldr	r2, [pc, #336]	; (2700 <handle_user_input+0x358>)
    25ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    25b0:	0011      	movs	r1, r2
    25b2:	0018      	movs	r0, r3
    25b4:	4b47      	ldr	r3, [pc, #284]	; (26d4 <handle_user_input+0x32c>)
    25b6:	4798      	blx	r3
    25b8:	1e03      	subs	r3, r0, #0
    25ba:	d003      	beq.n	25c4 <handle_user_input+0x21c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    25bc:	4b51      	ldr	r3, [pc, #324]	; (2704 <handle_user_input+0x35c>)
    25be:	0018      	movs	r0, r3
    25c0:	4b4c      	ldr	r3, [pc, #304]	; (26f4 <handle_user_input+0x34c>)
    25c2:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    25c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    25c6:	2b00      	cmp	r3, #0
    25c8:	dc06      	bgt.n	25d8 <handle_user_input+0x230>
    25ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    25cc:	2b20      	cmp	r3, #32
    25ce:	dd03      	ble.n	25d8 <handle_user_input+0x230>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    25d0:	4b4d      	ldr	r3, [pc, #308]	; (2708 <handle_user_input+0x360>)
    25d2:	0018      	movs	r0, r3
    25d4:	4b47      	ldr	r3, [pc, #284]	; (26f4 <handle_user_input+0x34c>)
    25d6:	4798      	blx	r3
		}

		handle_gpio_get(*port, pin_num);
    25d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    25de:	0011      	movs	r1, r2
    25e0:	0018      	movs	r0, r3
    25e2:	4b4e      	ldr	r3, [pc, #312]	; (271c <handle_user_input+0x374>)
    25e4:	4798      	blx	r3
    25e6:	e144      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MAC, cmd) == 0) { 
    25e8:	4b4d      	ldr	r3, [pc, #308]	; (2720 <handle_user_input+0x378>)
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    25ee:	0011      	movs	r1, r2
    25f0:	0018      	movs	r0, r3
    25f2:	4b38      	ldr	r3, [pc, #224]	; (26d4 <handle_user_input+0x32c>)
    25f4:	4798      	blx	r3
    25f6:	1e03      	subs	r3, r0, #0
    25f8:	d102      	bne.n	2600 <handle_user_input+0x258>
		handle_mac(); 
    25fa:	4b4a      	ldr	r3, [pc, #296]	; (2724 <handle_user_input+0x37c>)
    25fc:	4798      	blx	r3
    25fe:	e138      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_IP, cmd) == 0) { 
    2600:	4b49      	ldr	r3, [pc, #292]	; (2728 <handle_user_input+0x380>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2606:	0011      	movs	r1, r2
    2608:	0018      	movs	r0, r3
    260a:	4b32      	ldr	r3, [pc, #200]	; (26d4 <handle_user_input+0x32c>)
    260c:	4798      	blx	r3
    260e:	1e03      	subs	r3, r0, #0
    2610:	d102      	bne.n	2618 <handle_user_input+0x270>
		handle_ip(); 
    2612:	4b46      	ldr	r3, [pc, #280]	; (272c <handle_user_input+0x384>)
    2614:	4798      	blx	r3
    2616:	e12c      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
    2618:	4b45      	ldr	r3, [pc, #276]	; (2730 <handle_user_input+0x388>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    261e:	0011      	movs	r1, r2
    2620:	0018      	movs	r0, r3
    2622:	4b2c      	ldr	r3, [pc, #176]	; (26d4 <handle_user_input+0x32c>)
    2624:	4798      	blx	r3
    2626:	1e03      	subs	r3, r0, #0
    2628:	d12b      	bne.n	2682 <handle_user_input+0x2da>
		char* arg1 = strtok(NULL, " ");
    262a:	4b27      	ldr	r3, [pc, #156]	; (26c8 <handle_user_input+0x320>)
    262c:	0019      	movs	r1, r3
    262e:	2000      	movs	r0, #0
    2630:	4b26      	ldr	r3, [pc, #152]	; (26cc <handle_user_input+0x324>)
    2632:	4798      	blx	r3
    2634:	0003      	movs	r3, r0
    2636:	63bb      	str	r3, [r7, #56]	; 0x38
		char* arg2 = strtok(NULL, " ");
    2638:	4b23      	ldr	r3, [pc, #140]	; (26c8 <handle_user_input+0x320>)
    263a:	0019      	movs	r1, r3
    263c:	2000      	movs	r0, #0
    263e:	4b23      	ldr	r3, [pc, #140]	; (26cc <handle_user_input+0x324>)
    2640:	4798      	blx	r3
    2642:	0003      	movs	r3, r0
    2644:	637b      	str	r3, [r7, #52]	; 0x34
		
		if(arg1 == 0 || arg2 == 0) {
    2646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2648:	2b00      	cmp	r3, #0
    264a:	d002      	beq.n	2652 <handle_user_input+0x2aa>
    264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    264e:	2b00      	cmp	r3, #0
    2650:	d104      	bne.n	265c <handle_user_input+0x2b4>
			printf("Not enough arguments! Try \"help\".\r\n");
    2652:	4b27      	ldr	r3, [pc, #156]	; (26f0 <handle_user_input+0x348>)
    2654:	0018      	movs	r0, r3
    2656:	4b27      	ldr	r3, [pc, #156]	; (26f4 <handle_user_input+0x34c>)
    2658:	4798      	blx	r3
			return;
    265a:	e10a      	b.n	2872 <handle_user_input+0x4ca>
		}
				
		int num_readings = atoi(arg1);
    265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    265e:	0018      	movs	r0, r3
    2660:	4b25      	ldr	r3, [pc, #148]	; (26f8 <handle_user_input+0x350>)
    2662:	4798      	blx	r3
    2664:	0003      	movs	r3, r0
    2666:	633b      	str	r3, [r7, #48]	; 0x30
		int interval_ms = atoi(arg2);
    2668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    266a:	0018      	movs	r0, r3
    266c:	4b22      	ldr	r3, [pc, #136]	; (26f8 <handle_user_input+0x350>)
    266e:	4798      	blx	r3
    2670:	0003      	movs	r3, r0
    2672:	62fb      	str	r3, [r7, #44]	; 0x2c
		
		handle_read_gyro(num_readings, interval_ms); 
    2674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2678:	0011      	movs	r1, r2
    267a:	0018      	movs	r0, r3
    267c:	4b2d      	ldr	r3, [pc, #180]	; (2734 <handle_user_input+0x38c>)
    267e:	4798      	blx	r3
    2680:	e0f7      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    2682:	4b2d      	ldr	r3, [pc, #180]	; (2738 <handle_user_input+0x390>)
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2688:	0011      	movs	r1, r2
    268a:	0018      	movs	r0, r3
    268c:	4b11      	ldr	r3, [pc, #68]	; (26d4 <handle_user_input+0x32c>)
    268e:	4798      	blx	r3
    2690:	1e03      	subs	r3, r0, #0
    2692:	d166      	bne.n	2762 <handle_user_input+0x3ba>
		char* arg1 = strtok(NULL, " ");
    2694:	4b0c      	ldr	r3, [pc, #48]	; (26c8 <handle_user_input+0x320>)
    2696:	0019      	movs	r1, r3
    2698:	2000      	movs	r0, #0
    269a:	4b0c      	ldr	r3, [pc, #48]	; (26cc <handle_user_input+0x324>)
    269c:	4798      	blx	r3
    269e:	0003      	movs	r3, r0
    26a0:	62bb      	str	r3, [r7, #40]	; 0x28
		char* arg2 = strtok(NULL, " ");
    26a2:	4b09      	ldr	r3, [pc, #36]	; (26c8 <handle_user_input+0x320>)
    26a4:	0019      	movs	r1, r3
    26a6:	2000      	movs	r0, #0
    26a8:	4b08      	ldr	r3, [pc, #32]	; (26cc <handle_user_input+0x324>)
    26aa:	4798      	blx	r3
    26ac:	0003      	movs	r3, r0
    26ae:	627b      	str	r3, [r7, #36]	; 0x24
		
		if(arg1 == 0 || arg2 == 0) {
    26b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    26b2:	2b00      	cmp	r3, #0
    26b4:	d002      	beq.n	26bc <handle_user_input+0x314>
    26b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26b8:	2b00      	cmp	r3, #0
    26ba:	d13f      	bne.n	273c <handle_user_input+0x394>
			printf("Not enough arguments! Try \"help\".\r\n");
    26bc:	4b0c      	ldr	r3, [pc, #48]	; (26f0 <handle_user_input+0x348>)
    26be:	0018      	movs	r0, r3
    26c0:	4b0c      	ldr	r3, [pc, #48]	; (26f4 <handle_user_input+0x34c>)
    26c2:	4798      	blx	r3
			return;
    26c4:	e0d5      	b.n	2872 <handle_user_input+0x4ca>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	0000a2bc 	.word	0x0000a2bc
    26cc:	0000834d 	.word	0x0000834d
    26d0:	20000000 	.word	0x20000000
    26d4:	00008339 	.word	0x00008339
    26d8:	000028d1 	.word	0x000028d1
    26dc:	20000004 	.word	0x20000004
    26e0:	00002949 	.word	0x00002949
    26e4:	20000008 	.word	0x20000008
    26e8:	0000296d 	.word	0x0000296d
    26ec:	2000000c 	.word	0x2000000c
    26f0:	0000a2c0 	.word	0x0000a2c0
    26f4:	00008185 	.word	0x00008185
    26f8:	00008019 	.word	0x00008019
    26fc:	0000a2e4 	.word	0x0000a2e4
    2700:	0000a2e8 	.word	0x0000a2e8
    2704:	0000a2ec 	.word	0x0000a2ec
    2708:	0000a310 	.word	0x0000a310
    270c:	00002991 	.word	0x00002991
    2710:	20000010 	.word	0x20000010
    2714:	000029d1 	.word	0x000029d1
    2718:	20000014 	.word	0x20000014
    271c:	00002a11 	.word	0x00002a11
    2720:	20000018 	.word	0x20000018
    2724:	00002aa5 	.word	0x00002aa5
    2728:	2000001c 	.word	0x2000001c
    272c:	00002ad1 	.word	0x00002ad1
    2730:	20000020 	.word	0x20000020
    2734:	00002afd 	.word	0x00002afd
    2738:	20000024 	.word	0x20000024
		}
				
		int num_readings = atoi(arg1);
    273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    273e:	0018      	movs	r0, r3
    2740:	4b4d      	ldr	r3, [pc, #308]	; (2878 <handle_user_input+0x4d0>)
    2742:	4798      	blx	r3
    2744:	0003      	movs	r3, r0
    2746:	623b      	str	r3, [r7, #32]
		int interval_ms = atoi(arg2);
    2748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    274a:	0018      	movs	r0, r3
    274c:	4b4a      	ldr	r3, [pc, #296]	; (2878 <handle_user_input+0x4d0>)
    274e:	4798      	blx	r3
    2750:	0003      	movs	r3, r0
    2752:	61fb      	str	r3, [r7, #28]
		
		handle_read_accel(num_readings, interval_ms); 
    2754:	69fa      	ldr	r2, [r7, #28]
    2756:	6a3b      	ldr	r3, [r7, #32]
    2758:	0011      	movs	r1, r2
    275a:	0018      	movs	r0, r3
    275c:	4b47      	ldr	r3, [pc, #284]	; (287c <handle_user_input+0x4d4>)
    275e:	4798      	blx	r3
    2760:	e087      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    2762:	4b47      	ldr	r3, [pc, #284]	; (2880 <handle_user_input+0x4d8>)
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2768:	0011      	movs	r1, r2
    276a:	0018      	movs	r0, r3
    276c:	4b45      	ldr	r3, [pc, #276]	; (2884 <handle_user_input+0x4dc>)
    276e:	4798      	blx	r3
    2770:	1e03      	subs	r3, r0, #0
    2772:	d146      	bne.n	2802 <handle_user_input+0x45a>
		char* arg1 = strtok(NULL, " ");
    2774:	4b44      	ldr	r3, [pc, #272]	; (2888 <handle_user_input+0x4e0>)
    2776:	0019      	movs	r1, r3
    2778:	2000      	movs	r0, #0
    277a:	4b44      	ldr	r3, [pc, #272]	; (288c <handle_user_input+0x4e4>)
    277c:	4798      	blx	r3
    277e:	0003      	movs	r3, r0
    2780:	61bb      	str	r3, [r7, #24]
		char* arg2 = strtok(NULL, " ");
    2782:	4b41      	ldr	r3, [pc, #260]	; (2888 <handle_user_input+0x4e0>)
    2784:	0019      	movs	r1, r3
    2786:	2000      	movs	r0, #0
    2788:	4b40      	ldr	r3, [pc, #256]	; (288c <handle_user_input+0x4e4>)
    278a:	4798      	blx	r3
    278c:	0003      	movs	r3, r0
    278e:	617b      	str	r3, [r7, #20]
		
		if(arg1 == 0 || arg2 == 0) {
    2790:	69bb      	ldr	r3, [r7, #24]
    2792:	2b00      	cmp	r3, #0
    2794:	d002      	beq.n	279c <handle_user_input+0x3f4>
    2796:	697b      	ldr	r3, [r7, #20]
    2798:	2b00      	cmp	r3, #0
    279a:	d104      	bne.n	27a6 <handle_user_input+0x3fe>
			printf("Not enough arguments! Try \"help\".\r\n");
    279c:	4b3c      	ldr	r3, [pc, #240]	; (2890 <handle_user_input+0x4e8>)
    279e:	0018      	movs	r0, r3
    27a0:	4b3c      	ldr	r3, [pc, #240]	; (2894 <handle_user_input+0x4ec>)
    27a2:	4798      	blx	r3
			return;
    27a4:	e065      	b.n	2872 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    27a6:	69bb      	ldr	r3, [r7, #24]
    27a8:	613b      	str	r3, [r7, #16]
		int pin_num = atoi(arg2);
    27aa:	697b      	ldr	r3, [r7, #20]
    27ac:	0018      	movs	r0, r3
    27ae:	4b32      	ldr	r3, [pc, #200]	; (2878 <handle_user_input+0x4d0>)
    27b0:	4798      	blx	r3
    27b2:	0003      	movs	r3, r0
    27b4:	60fb      	str	r3, [r7, #12]

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    27b6:	4a38      	ldr	r2, [pc, #224]	; (2898 <handle_user_input+0x4f0>)
    27b8:	693b      	ldr	r3, [r7, #16]
    27ba:	0011      	movs	r1, r2
    27bc:	0018      	movs	r0, r3
    27be:	4b31      	ldr	r3, [pc, #196]	; (2884 <handle_user_input+0x4dc>)
    27c0:	4798      	blx	r3
    27c2:	1e03      	subs	r3, r0, #0
    27c4:	d00b      	beq.n	27de <handle_user_input+0x436>
    27c6:	4a35      	ldr	r2, [pc, #212]	; (289c <handle_user_input+0x4f4>)
    27c8:	693b      	ldr	r3, [r7, #16]
    27ca:	0011      	movs	r1, r2
    27cc:	0018      	movs	r0, r3
    27ce:	4b2d      	ldr	r3, [pc, #180]	; (2884 <handle_user_input+0x4dc>)
    27d0:	4798      	blx	r3
    27d2:	1e03      	subs	r3, r0, #0
    27d4:	d003      	beq.n	27de <handle_user_input+0x436>
			printf("Enter a valid Port! Try \"help\".\r\n");
    27d6:	4b32      	ldr	r3, [pc, #200]	; (28a0 <handle_user_input+0x4f8>)
    27d8:	0018      	movs	r0, r3
    27da:	4b2e      	ldr	r3, [pc, #184]	; (2894 <handle_user_input+0x4ec>)
    27dc:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	2b00      	cmp	r3, #0
    27e2:	dc06      	bgt.n	27f2 <handle_user_input+0x44a>
    27e4:	68fb      	ldr	r3, [r7, #12]
    27e6:	2b20      	cmp	r3, #32
    27e8:	dd03      	ble.n	27f2 <handle_user_input+0x44a>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    27ea:	4b2e      	ldr	r3, [pc, #184]	; (28a4 <handle_user_input+0x4fc>)
    27ec:	0018      	movs	r0, r3
    27ee:	4b29      	ldr	r3, [pc, #164]	; (2894 <handle_user_input+0x4ec>)
    27f0:	4798      	blx	r3
		}
		
		handle_adc_get(port, pin_num); 
    27f2:	693b      	ldr	r3, [r7, #16]
    27f4:	b2db      	uxtb	r3, r3
    27f6:	68fa      	ldr	r2, [r7, #12]
    27f8:	0011      	movs	r1, r2
    27fa:	0018      	movs	r0, r3
    27fc:	4b2a      	ldr	r3, [pc, #168]	; (28a8 <handle_user_input+0x500>)
    27fe:	4798      	blx	r3
    2800:	e037      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    2802:	4b2a      	ldr	r3, [pc, #168]	; (28ac <handle_user_input+0x504>)
    2804:	681b      	ldr	r3, [r3, #0]
    2806:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2808:	0011      	movs	r1, r2
    280a:	0018      	movs	r0, r3
    280c:	4b1d      	ldr	r3, [pc, #116]	; (2884 <handle_user_input+0x4dc>)
    280e:	4798      	blx	r3
    2810:	1e03      	subs	r3, r0, #0
    2812:	d102      	bne.n	281a <handle_user_input+0x472>
		handle_mcu_temp(); 
    2814:	4b26      	ldr	r3, [pc, #152]	; (28b0 <handle_user_input+0x508>)
    2816:	4798      	blx	r3
    2818:	e02b      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    281a:	4b26      	ldr	r3, [pc, #152]	; (28b4 <handle_user_input+0x50c>)
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2820:	0011      	movs	r1, r2
    2822:	0018      	movs	r0, r3
    2824:	4b17      	ldr	r3, [pc, #92]	; (2884 <handle_user_input+0x4dc>)
    2826:	4798      	blx	r3
    2828:	1e03      	subs	r3, r0, #0
    282a:	d102      	bne.n	2832 <handle_user_input+0x48a>
		handle_i2c_scan(); 
    282c:	4b22      	ldr	r3, [pc, #136]	; (28b8 <handle_user_input+0x510>)
    282e:	4798      	blx	r3
    2830:	e01f      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_SET_ACT, cmd) == 0) {
    2832:	4b22      	ldr	r3, [pc, #136]	; (28bc <handle_user_input+0x514>)
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2838:	0011      	movs	r1, r2
    283a:	0018      	movs	r0, r3
    283c:	4b11      	ldr	r3, [pc, #68]	; (2884 <handle_user_input+0x4dc>)
    283e:	4798      	blx	r3
    2840:	1e03      	subs	r3, r0, #0
    2842:	d104      	bne.n	284e <handle_user_input+0x4a6>
		// Just a GPIO.
		handle_gpio_set('B', PIN_PB02);	
    2844:	2122      	movs	r1, #34	; 0x22
    2846:	2042      	movs	r0, #66	; 0x42
    2848:	4b1d      	ldr	r3, [pc, #116]	; (28c0 <handle_user_input+0x518>)
    284a:	4798      	blx	r3
    284c:	e011      	b.n	2872 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_CLEAR_ACT, cmd) == 0) {
    284e:	4b1d      	ldr	r3, [pc, #116]	; (28c4 <handle_user_input+0x51c>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2854:	0011      	movs	r1, r2
    2856:	0018      	movs	r0, r3
    2858:	4b0a      	ldr	r3, [pc, #40]	; (2884 <handle_user_input+0x4dc>)
    285a:	4798      	blx	r3
    285c:	1e03      	subs	r3, r0, #0
    285e:	d104      	bne.n	286a <handle_user_input+0x4c2>
		// Just a GPIO.		
		handle_gpio_clear('B', PIN_PB02);	
    2860:	2122      	movs	r1, #34	; 0x22
    2862:	2042      	movs	r0, #66	; 0x42
    2864:	4b18      	ldr	r3, [pc, #96]	; (28c8 <handle_user_input+0x520>)
    2866:	4798      	blx	r3
    2868:	e003      	b.n	2872 <handle_user_input+0x4ca>
	}
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    286a:	4b18      	ldr	r3, [pc, #96]	; (28cc <handle_user_input+0x524>)
    286c:	0018      	movs	r0, r3
    286e:	4b09      	ldr	r3, [pc, #36]	; (2894 <handle_user_input+0x4ec>)
    2870:	4798      	blx	r3
	}
}
    2872:	46bd      	mov	sp, r7
    2874:	b01c      	add	sp, #112	; 0x70
    2876:	bd80      	pop	{r7, pc}
    2878:	00008019 	.word	0x00008019
    287c:	00002dc1 	.word	0x00002dc1
    2880:	20000030 	.word	0x20000030
    2884:	00008339 	.word	0x00008339
    2888:	0000a2bc 	.word	0x0000a2bc
    288c:	0000834d 	.word	0x0000834d
    2890:	0000a2c0 	.word	0x0000a2c0
    2894:	00008185 	.word	0x00008185
    2898:	0000a2e4 	.word	0x0000a2e4
    289c:	0000a2e8 	.word	0x0000a2e8
    28a0:	0000a2ec 	.word	0x0000a2ec
    28a4:	0000a310 	.word	0x0000a310
    28a8:	00002de5 	.word	0x00002de5
    28ac:	20000034 	.word	0x20000034
    28b0:	00002e4d 	.word	0x00002e4d
    28b4:	20000038 	.word	0x20000038
    28b8:	00002ec1 	.word	0x00002ec1
    28bc:	20000028 	.word	0x20000028
    28c0:	00002991 	.word	0x00002991
    28c4:	2000002c 	.word	0x2000002c
    28c8:	000029d1 	.word	0x000029d1
    28cc:	0000a338 	.word	0x0000a338

000028d0 <handle_help>:

void handle_help() {
    28d0:	b5b0      	push	{r4, r5, r7, lr}
    28d2:	b082      	sub	sp, #8
    28d4:	af00      	add	r7, sp, #0
	printf("Command List:\r\n");
    28d6:	4b17      	ldr	r3, [pc, #92]	; (2934 <handle_help+0x64>)
    28d8:	0018      	movs	r0, r3
    28da:	4b17      	ldr	r3, [pc, #92]	; (2938 <handle_help+0x68>)
    28dc:	4798      	blx	r3
	for(int i = 0; i < OPTION_COUNT; i++) {
    28de:	2300      	movs	r3, #0
    28e0:	607b      	str	r3, [r7, #4]
    28e2:	e020      	b.n	2926 <handle_help+0x56>
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
    28e4:	4915      	ldr	r1, [pc, #84]	; (293c <handle_help+0x6c>)
    28e6:	687a      	ldr	r2, [r7, #4]
    28e8:	0013      	movs	r3, r2
    28ea:	005b      	lsls	r3, r3, #1
    28ec:	189b      	adds	r3, r3, r2
    28ee:	009b      	lsls	r3, r3, #2
    28f0:	585c      	ldr	r4, [r3, r1]
    28f2:	4912      	ldr	r1, [pc, #72]	; (293c <handle_help+0x6c>)
    28f4:	687a      	ldr	r2, [r7, #4]
    28f6:	0013      	movs	r3, r2
    28f8:	005b      	lsls	r3, r3, #1
    28fa:	189b      	adds	r3, r3, r2
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	18cb      	adds	r3, r1, r3
    2900:	3304      	adds	r3, #4
    2902:	681d      	ldr	r5, [r3, #0]
    2904:	490d      	ldr	r1, [pc, #52]	; (293c <handle_help+0x6c>)
    2906:	687a      	ldr	r2, [r7, #4]
    2908:	0013      	movs	r3, r2
    290a:	005b      	lsls	r3, r3, #1
    290c:	189b      	adds	r3, r3, r2
    290e:	009b      	lsls	r3, r3, #2
    2910:	18cb      	adds	r3, r1, r3
    2912:	3308      	adds	r3, #8
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	480a      	ldr	r0, [pc, #40]	; (2940 <handle_help+0x70>)
    2918:	002a      	movs	r2, r5
    291a:	0021      	movs	r1, r4
    291c:	4c09      	ldr	r4, [pc, #36]	; (2944 <handle_help+0x74>)
    291e:	47a0      	blx	r4
	for(int i = 0; i < OPTION_COUNT; i++) {
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	3301      	adds	r3, #1
    2924:	607b      	str	r3, [r7, #4]
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	2b0c      	cmp	r3, #12
    292a:	dddb      	ble.n	28e4 <handle_help+0x14>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
    292c:	46c0      	nop			; (mov r8, r8)
    292e:	46bd      	mov	sp, r7
    2930:	b002      	add	sp, #8
    2932:	bdb0      	pop	{r4, r5, r7, pc}
    2934:	0000a378 	.word	0x0000a378
    2938:	00008185 	.word	0x00008185
    293c:	200002e0 	.word	0x200002e0
    2940:	0000a388 	.word	0x0000a388
    2944:	00008091 	.word	0x00008091

00002948 <handle_ver_bl>:


void handle_ver_bl() {
    2948:	b580      	push	{r7, lr}
    294a:	af00      	add	r7, sp, #0
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
    294c:	4a04      	ldr	r2, [pc, #16]	; (2960 <handle_ver_bl+0x18>)
    294e:	4b05      	ldr	r3, [pc, #20]	; (2964 <handle_ver_bl+0x1c>)
    2950:	0011      	movs	r1, r2
    2952:	0018      	movs	r0, r3
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <handle_ver_bl+0x20>)
    2956:	4798      	blx	r3
}
    2958:	46c0      	nop			; (mov r8, r8)
    295a:	46bd      	mov	sp, r7
    295c:	bd80      	pop	{r7, pc}
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	0000a398 	.word	0x0000a398
    2964:	0000a3a0 	.word	0x0000a3a0
    2968:	00008091 	.word	0x00008091

0000296c <handle_ver_app>:

void handle_ver_app() {
    296c:	b580      	push	{r7, lr}
    296e:	af00      	add	r7, sp, #0
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
    2970:	4a04      	ldr	r2, [pc, #16]	; (2984 <handle_ver_app+0x18>)
    2972:	4b05      	ldr	r3, [pc, #20]	; (2988 <handle_ver_app+0x1c>)
    2974:	0011      	movs	r1, r2
    2976:	0018      	movs	r0, r3
    2978:	4b04      	ldr	r3, [pc, #16]	; (298c <handle_ver_app+0x20>)
    297a:	4798      	blx	r3
}
    297c:	46c0      	nop			; (mov r8, r8)
    297e:	46bd      	mov	sp, r7
    2980:	bd80      	pop	{r7, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	0000a398 	.word	0x0000a398
    2988:	0000a3bc 	.word	0x0000a3bc
    298c:	00008091 	.word	0x00008091

00002990 <handle_gpio_set>:

void handle_gpio_set(char port, int pin_num) {
    2990:	b580      	push	{r7, lr}
    2992:	b084      	sub	sp, #16
    2994:	af00      	add	r7, sp, #0
    2996:	0002      	movs	r2, r0
    2998:	6039      	str	r1, [r7, #0]
    299a:	1dfb      	adds	r3, r7, #7
    299c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    299e:	230f      	movs	r3, #15
    29a0:	18fb      	adds	r3, r7, r3
    29a2:	2222      	movs	r2, #34	; 0x22
    29a4:	701a      	strb	r2, [r3, #0]
	bool level = HIGH;
    29a6:	230e      	movs	r3, #14
    29a8:	18fb      	adds	r3, r7, r3
    29aa:	2201      	movs	r2, #1
    29ac:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    29ae:	230e      	movs	r3, #14
    29b0:	18fb      	adds	r3, r7, r3
    29b2:	781a      	ldrb	r2, [r3, #0]
    29b4:	230f      	movs	r3, #15
    29b6:	18fb      	adds	r3, r7, r3
    29b8:	781b      	ldrb	r3, [r3, #0]
    29ba:	0011      	movs	r1, r2
    29bc:	0018      	movs	r0, r3
    29be:	4b03      	ldr	r3, [pc, #12]	; (29cc <handle_gpio_set+0x3c>)
    29c0:	4798      	blx	r3
	
	//printf("Not implemented yet!\r\n");
}
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	46bd      	mov	sp, r7
    29c6:	b004      	add	sp, #16
    29c8:	bd80      	pop	{r7, pc}
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	00002119 	.word	0x00002119

000029d0 <handle_gpio_clear>:

void handle_gpio_clear(char port, int pin_num) {
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	0002      	movs	r2, r0
    29d8:	6039      	str	r1, [r7, #0]
    29da:	1dfb      	adds	r3, r7, #7
    29dc:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    29de:	230f      	movs	r3, #15
    29e0:	18fb      	adds	r3, r7, r3
    29e2:	2222      	movs	r2, #34	; 0x22
    29e4:	701a      	strb	r2, [r3, #0]
	bool level = LOW;
    29e6:	230e      	movs	r3, #14
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	2200      	movs	r2, #0
    29ec:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    29ee:	230e      	movs	r3, #14
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	781a      	ldrb	r2, [r3, #0]
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	0011      	movs	r1, r2
    29fc:	0018      	movs	r0, r3
    29fe:	4b03      	ldr	r3, [pc, #12]	; (2a0c <handle_gpio_clear+0x3c>)
    2a00:	4798      	blx	r3
		
	//printf("Not implemented yet!\r\n");
}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	46bd      	mov	sp, r7
    2a06:	b004      	add	sp, #16
    2a08:	bd80      	pop	{r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	00002119 	.word	0x00002119

00002a10 <handle_gpio_get>:

void handle_gpio_get(char port, int pin_num) {
    2a10:	b590      	push	{r4, r7, lr}
    2a12:	b085      	sub	sp, #20
    2a14:	af00      	add	r7, sp, #0
    2a16:	0002      	movs	r2, r0
    2a18:	6039      	str	r1, [r7, #0]
    2a1a:	1dfb      	adds	r3, r7, #7
    2a1c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
		uint8_t pin = PIN_PB02;
    2a1e:	230e      	movs	r3, #14
    2a20:	18fb      	adds	r3, r7, r3
    2a22:	2222      	movs	r2, #34	; 0x22
    2a24:	701a      	strb	r2, [r3, #0]
		bool level;

	// Hard-coded testing
	if (port == "B" && pin_num == 2){
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	001a      	movs	r2, r3
    2a2c:	4b19      	ldr	r3, [pc, #100]	; (2a94 <handle_gpio_get+0x84>)
    2a2e:	429a      	cmp	r2, r3
    2a30:	d10d      	bne.n	2a4e <handle_gpio_get+0x3e>
    2a32:	683b      	ldr	r3, [r7, #0]
    2a34:	2b02      	cmp	r3, #2
    2a36:	d10a      	bne.n	2a4e <handle_gpio_get+0x3e>
		level = port_pin_get_output_level(pin);
    2a38:	230f      	movs	r3, #15
    2a3a:	18fc      	adds	r4, r7, r3
    2a3c:	230e      	movs	r3, #14
    2a3e:	18fb      	adds	r3, r7, r3
    2a40:	781b      	ldrb	r3, [r3, #0]
    2a42:	0018      	movs	r0, r3
    2a44:	4b14      	ldr	r3, [pc, #80]	; (2a98 <handle_gpio_get+0x88>)
    2a46:	4798      	blx	r3
    2a48:	0003      	movs	r3, r0
    2a4a:	7023      	strb	r3, [r4, #0]
    2a4c:	e016      	b.n	2a7c <handle_gpio_get+0x6c>
	}

	else if (port == "B" && pin_num == 3){
    2a4e:	1dfb      	adds	r3, r7, #7
    2a50:	781b      	ldrb	r3, [r3, #0]
    2a52:	001a      	movs	r2, r3
    2a54:	4b0f      	ldr	r3, [pc, #60]	; (2a94 <handle_gpio_get+0x84>)
    2a56:	429a      	cmp	r2, r3
    2a58:	d110      	bne.n	2a7c <handle_gpio_get+0x6c>
    2a5a:	683b      	ldr	r3, [r7, #0]
    2a5c:	2b03      	cmp	r3, #3
    2a5e:	d10d      	bne.n	2a7c <handle_gpio_get+0x6c>
		uint8_t pin = PIN_PB03;
    2a60:	230d      	movs	r3, #13
    2a62:	18fb      	adds	r3, r7, r3
    2a64:	2223      	movs	r2, #35	; 0x23
    2a66:	701a      	strb	r2, [r3, #0]
		level = port_pin_get_output_level(pin);
    2a68:	230f      	movs	r3, #15
    2a6a:	18fc      	adds	r4, r7, r3
    2a6c:	230d      	movs	r3, #13
    2a6e:	18fb      	adds	r3, r7, r3
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	0018      	movs	r0, r3
    2a74:	4b08      	ldr	r3, [pc, #32]	; (2a98 <handle_gpio_get+0x88>)
    2a76:	4798      	blx	r3
    2a78:	0003      	movs	r3, r0
    2a7a:	7023      	strb	r3, [r4, #0]
	}
	
	printf("The level set is %d\r\n", level);
    2a7c:	230f      	movs	r3, #15
    2a7e:	18fb      	adds	r3, r7, r3
    2a80:	781a      	ldrb	r2, [r3, #0]
    2a82:	4b06      	ldr	r3, [pc, #24]	; (2a9c <handle_gpio_get+0x8c>)
    2a84:	0011      	movs	r1, r2
    2a86:	0018      	movs	r0, r3
    2a88:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <handle_gpio_get+0x90>)
    2a8a:	4798      	blx	r3

}
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	46bd      	mov	sp, r7
    2a90:	b005      	add	sp, #20
    2a92:	bd90      	pop	{r4, r7, pc}
    2a94:	0000a2e8 	.word	0x0000a2e8
    2a98:	000020d5 	.word	0x000020d5
    2a9c:	0000a3d8 	.word	0x0000a3d8
    2aa0:	00008091 	.word	0x00008091

00002aa4 <handle_mac>:

void handle_mac() {
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b082      	sub	sp, #8
    2aa8:	af00      	add	r7, sp, #0
	char* dummy_mac = "01:23:45:67:89:ab";
    2aaa:	4b06      	ldr	r3, [pc, #24]	; (2ac4 <handle_mac+0x20>)
    2aac:	607b      	str	r3, [r7, #4]
	printf("MAC Address: %s\r\n", dummy_mac);
    2aae:	687a      	ldr	r2, [r7, #4]
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <handle_mac+0x24>)
    2ab2:	0011      	movs	r1, r2
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b05      	ldr	r3, [pc, #20]	; (2acc <handle_mac+0x28>)
    2ab8:	4798      	blx	r3
}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	46bd      	mov	sp, r7
    2abe:	b002      	add	sp, #8
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	0000a3f0 	.word	0x0000a3f0
    2ac8:	0000a404 	.word	0x0000a404
    2acc:	00008091 	.word	0x00008091

00002ad0 <handle_ip>:

void handle_ip() {
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b082      	sub	sp, #8
    2ad4:	af00      	add	r7, sp, #0
	char* dummy_ip = "255.255.255.255";
    2ad6:	4b06      	ldr	r3, [pc, #24]	; (2af0 <handle_ip+0x20>)
    2ad8:	607b      	str	r3, [r7, #4]
	printf("IP Address: %s\r\n", dummy_ip);
    2ada:	687a      	ldr	r2, [r7, #4]
    2adc:	4b05      	ldr	r3, [pc, #20]	; (2af4 <handle_ip+0x24>)
    2ade:	0011      	movs	r1, r2
    2ae0:	0018      	movs	r0, r3
    2ae2:	4b05      	ldr	r3, [pc, #20]	; (2af8 <handle_ip+0x28>)
    2ae4:	4798      	blx	r3
}
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	46bd      	mov	sp, r7
    2aea:	b002      	add	sp, #8
    2aec:	bd80      	pop	{r7, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	0000a418 	.word	0x0000a418
    2af4:	0000a428 	.word	0x0000a428
    2af8:	00008091 	.word	0x00008091

00002afc <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afe:	b08d      	sub	sp, #52	; 0x34
    2b00:	af04      	add	r7, sp, #16
    2b02:	6078      	str	r0, [r7, #4]
    2b04:	6039      	str	r1, [r7, #0]
	enum status_code i2c_status;
	
	for(int i = 0; i < num_readings; i++) {
    2b06:	2300      	movs	r3, #0
    2b08:	61fb      	str	r3, [r7, #28]
    2b0a:	e137      	b.n	2d7c <handle_read_gyro+0x280>
		// Wake up the device
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2b0c:	4ba0      	ldr	r3, [pc, #640]	; (2d90 <handle_read_gyro+0x294>)
    2b0e:	2268      	movs	r2, #104	; 0x68
    2b10:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2b12:	4b9f      	ldr	r3, [pc, #636]	; (2d90 <handle_read_gyro+0x294>)
    2b14:	2201      	movs	r2, #1
    2b16:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2b18:	4b9e      	ldr	r3, [pc, #632]	; (2d94 <handle_read_gyro+0x298>)
    2b1a:	226b      	movs	r2, #107	; 0x6b
    2b1c:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2b1e:	4b9c      	ldr	r3, [pc, #624]	; (2d90 <handle_read_gyro+0x294>)
    2b20:	4a9c      	ldr	r2, [pc, #624]	; (2d94 <handle_read_gyro+0x298>)
    2b22:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2b24:	4b9c      	ldr	r3, [pc, #624]	; (2d98 <handle_read_gyro+0x29c>)
    2b26:	2268      	movs	r2, #104	; 0x68
    2b28:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2b2a:	231b      	movs	r3, #27
    2b2c:	18fc      	adds	r4, r7, r3
    2b2e:	4a98      	ldr	r2, [pc, #608]	; (2d90 <handle_read_gyro+0x294>)
    2b30:	4b9a      	ldr	r3, [pc, #616]	; (2d9c <handle_read_gyro+0x2a0>)
    2b32:	0011      	movs	r1, r2
    2b34:	0018      	movs	r0, r3
    2b36:	4b9a      	ldr	r3, [pc, #616]	; (2da0 <handle_read_gyro+0x2a4>)
    2b38:	4798      	blx	r3
    2b3a:	0003      	movs	r3, r0
    2b3c:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2b3e:	231b      	movs	r3, #27
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	781b      	ldrb	r3, [r3, #0]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d109      	bne.n	2b5c <handle_read_gyro+0x60>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2b48:	231b      	movs	r3, #27
    2b4a:	18fc      	adds	r4, r7, r3
    2b4c:	4a92      	ldr	r2, [pc, #584]	; (2d98 <handle_read_gyro+0x29c>)
    2b4e:	4b93      	ldr	r3, [pc, #588]	; (2d9c <handle_read_gyro+0x2a0>)
    2b50:	0011      	movs	r1, r2
    2b52:	0018      	movs	r0, r3
    2b54:	4b93      	ldr	r3, [pc, #588]	; (2da4 <handle_read_gyro+0x2a8>)
    2b56:	4798      	blx	r3
    2b58:	0003      	movs	r3, r0
    2b5a:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    2b5c:	4b8f      	ldr	r3, [pc, #572]	; (2d9c <handle_read_gyro+0x2a0>)
    2b5e:	0018      	movs	r0, r3
    2b60:	4b91      	ldr	r3, [pc, #580]	; (2da8 <handle_read_gyro+0x2ac>)
    2b62:	4798      	blx	r3
	
		rd_packet.data[0] = rd_packet.data[0] & (0 << 6);
    2b64:	4b8c      	ldr	r3, [pc, #560]	; (2d98 <handle_read_gyro+0x29c>)
    2b66:	685b      	ldr	r3, [r3, #4]
    2b68:	2200      	movs	r2, #0
    2b6a:	701a      	strb	r2, [r3, #0]
	
		// Write new sleep bit (off)
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2b6c:	4b88      	ldr	r3, [pc, #544]	; (2d90 <handle_read_gyro+0x294>)
    2b6e:	2268      	movs	r2, #104	; 0x68
    2b70:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    2b72:	4b87      	ldr	r3, [pc, #540]	; (2d90 <handle_read_gyro+0x294>)
    2b74:	2202      	movs	r2, #2
    2b76:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2b78:	4b86      	ldr	r3, [pc, #536]	; (2d94 <handle_read_gyro+0x298>)
    2b7a:	226b      	movs	r2, #107	; 0x6b
    2b7c:	701a      	strb	r2, [r3, #0]
		wr_buffer[1]          = rd_packet.data[0];
    2b7e:	4b86      	ldr	r3, [pc, #536]	; (2d98 <handle_read_gyro+0x29c>)
    2b80:	685b      	ldr	r3, [r3, #4]
    2b82:	781a      	ldrb	r2, [r3, #0]
    2b84:	4b83      	ldr	r3, [pc, #524]	; (2d94 <handle_read_gyro+0x298>)
    2b86:	705a      	strb	r2, [r3, #1]
		wr_packet.data        = wr_buffer;
    2b88:	4b81      	ldr	r3, [pc, #516]	; (2d90 <handle_read_gyro+0x294>)
    2b8a:	4a82      	ldr	r2, [pc, #520]	; (2d94 <handle_read_gyro+0x298>)
    2b8c:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2b8e:	4b82      	ldr	r3, [pc, #520]	; (2d98 <handle_read_gyro+0x29c>)
    2b90:	2268      	movs	r2, #104	; 0x68
    2b92:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2b94:	231b      	movs	r3, #27
    2b96:	18fc      	adds	r4, r7, r3
    2b98:	4a7d      	ldr	r2, [pc, #500]	; (2d90 <handle_read_gyro+0x294>)
    2b9a:	4b80      	ldr	r3, [pc, #512]	; (2d9c <handle_read_gyro+0x2a0>)
    2b9c:	0011      	movs	r1, r2
    2b9e:	0018      	movs	r0, r3
    2ba0:	4b7f      	ldr	r3, [pc, #508]	; (2da0 <handle_read_gyro+0x2a4>)
    2ba2:	4798      	blx	r3
    2ba4:	0003      	movs	r3, r0
    2ba6:	7023      	strb	r3, [r4, #0]
		i2c_master_send_stop(&i2c_master_instance);
    2ba8:	4b7c      	ldr	r3, [pc, #496]	; (2d9c <handle_read_gyro+0x2a0>)
    2baa:	0018      	movs	r0, r3
    2bac:	4b7e      	ldr	r3, [pc, #504]	; (2da8 <handle_read_gyro+0x2ac>)
    2bae:	4798      	blx	r3
	
		// Read back the Power management Register 
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2bb0:	4b77      	ldr	r3, [pc, #476]	; (2d90 <handle_read_gyro+0x294>)
    2bb2:	2268      	movs	r2, #104	; 0x68
    2bb4:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2bb6:	4b76      	ldr	r3, [pc, #472]	; (2d90 <handle_read_gyro+0x294>)
    2bb8:	2201      	movs	r2, #1
    2bba:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2bbc:	4b75      	ldr	r3, [pc, #468]	; (2d94 <handle_read_gyro+0x298>)
    2bbe:	226b      	movs	r2, #107	; 0x6b
    2bc0:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2bc2:	4b73      	ldr	r3, [pc, #460]	; (2d90 <handle_read_gyro+0x294>)
    2bc4:	4a73      	ldr	r2, [pc, #460]	; (2d94 <handle_read_gyro+0x298>)
    2bc6:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2bc8:	4b73      	ldr	r3, [pc, #460]	; (2d98 <handle_read_gyro+0x29c>)
    2bca:	2268      	movs	r2, #104	; 0x68
    2bcc:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2bce:	231b      	movs	r3, #27
    2bd0:	18fc      	adds	r4, r7, r3
    2bd2:	4a6f      	ldr	r2, [pc, #444]	; (2d90 <handle_read_gyro+0x294>)
    2bd4:	4b71      	ldr	r3, [pc, #452]	; (2d9c <handle_read_gyro+0x2a0>)
    2bd6:	0011      	movs	r1, r2
    2bd8:	0018      	movs	r0, r3
    2bda:	4b71      	ldr	r3, [pc, #452]	; (2da0 <handle_read_gyro+0x2a4>)
    2bdc:	4798      	blx	r3
    2bde:	0003      	movs	r3, r0
    2be0:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2be2:	231b      	movs	r3, #27
    2be4:	18fb      	adds	r3, r7, r3
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d109      	bne.n	2c00 <handle_read_gyro+0x104>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2bec:	231b      	movs	r3, #27
    2bee:	18fc      	adds	r4, r7, r3
    2bf0:	4a69      	ldr	r2, [pc, #420]	; (2d98 <handle_read_gyro+0x29c>)
    2bf2:	4b6a      	ldr	r3, [pc, #424]	; (2d9c <handle_read_gyro+0x2a0>)
    2bf4:	0011      	movs	r1, r2
    2bf6:	0018      	movs	r0, r3
    2bf8:	4b6a      	ldr	r3, [pc, #424]	; (2da4 <handle_read_gyro+0x2a8>)
    2bfa:	4798      	blx	r3
    2bfc:	0003      	movs	r3, r0
    2bfe:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    2c00:	4b66      	ldr	r3, [pc, #408]	; (2d9c <handle_read_gyro+0x2a0>)
    2c02:	0018      	movs	r0, r3
    2c04:	4b68      	ldr	r3, [pc, #416]	; (2da8 <handle_read_gyro+0x2ac>)
    2c06:	4798      	blx	r3
		
		// Get the data.
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2c08:	4b61      	ldr	r3, [pc, #388]	; (2d90 <handle_read_gyro+0x294>)
    2c0a:	2268      	movs	r2, #104	; 0x68
    2c0c:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2c0e:	4b60      	ldr	r3, [pc, #384]	; (2d90 <handle_read_gyro+0x294>)
    2c10:	2201      	movs	r2, #1
    2c12:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x3B; //MPU6050_RA_ACCEL_XOUT_H;
    2c14:	4b5f      	ldr	r3, [pc, #380]	; (2d94 <handle_read_gyro+0x298>)
    2c16:	223b      	movs	r2, #59	; 0x3b
    2c18:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2c1a:	4b5d      	ldr	r3, [pc, #372]	; (2d90 <handle_read_gyro+0x294>)
    2c1c:	4a5d      	ldr	r2, [pc, #372]	; (2d94 <handle_read_gyro+0x298>)
    2c1e:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2c20:	4b5d      	ldr	r3, [pc, #372]	; (2d98 <handle_read_gyro+0x29c>)
    2c22:	2268      	movs	r2, #104	; 0x68
    2c24:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2c26:	231b      	movs	r3, #27
    2c28:	18fc      	adds	r4, r7, r3
    2c2a:	4a59      	ldr	r2, [pc, #356]	; (2d90 <handle_read_gyro+0x294>)
    2c2c:	4b5b      	ldr	r3, [pc, #364]	; (2d9c <handle_read_gyro+0x2a0>)
    2c2e:	0011      	movs	r1, r2
    2c30:	0018      	movs	r0, r3
    2c32:	4b5b      	ldr	r3, [pc, #364]	; (2da0 <handle_read_gyro+0x2a4>)
    2c34:	4798      	blx	r3
    2c36:	0003      	movs	r3, r0
    2c38:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2c3a:	231b      	movs	r3, #27
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	781b      	ldrb	r3, [r3, #0]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d109      	bne.n	2c58 <handle_read_gyro+0x15c>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2c44:	231b      	movs	r3, #27
    2c46:	18fc      	adds	r4, r7, r3
    2c48:	4a53      	ldr	r2, [pc, #332]	; (2d98 <handle_read_gyro+0x29c>)
    2c4a:	4b54      	ldr	r3, [pc, #336]	; (2d9c <handle_read_gyro+0x2a0>)
    2c4c:	0011      	movs	r1, r2
    2c4e:	0018      	movs	r0, r3
    2c50:	4b54      	ldr	r3, [pc, #336]	; (2da4 <handle_read_gyro+0x2a8>)
    2c52:	4798      	blx	r3
    2c54:	0003      	movs	r3, r0
    2c56:	7023      	strb	r3, [r4, #0]
		}
	
		int16_t ax, ay, az, gx, gy, gz;
		ax = (((int16_t)rd_packet.data[0]) << 8) | rd_packet.data[1];
    2c58:	4b4f      	ldr	r3, [pc, #316]	; (2d98 <handle_read_gyro+0x29c>)
    2c5a:	685b      	ldr	r3, [r3, #4]
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	021b      	lsls	r3, r3, #8
    2c60:	b219      	sxth	r1, r3
    2c62:	4b4d      	ldr	r3, [pc, #308]	; (2d98 <handle_read_gyro+0x29c>)
    2c64:	685b      	ldr	r3, [r3, #4]
    2c66:	3301      	adds	r3, #1
    2c68:	781b      	ldrb	r3, [r3, #0]
    2c6a:	b21a      	sxth	r2, r3
    2c6c:	2318      	movs	r3, #24
    2c6e:	18fb      	adds	r3, r7, r3
    2c70:	430a      	orrs	r2, r1
    2c72:	801a      	strh	r2, [r3, #0]
		ay = (((int16_t)rd_packet.data[2]) << 8) | rd_packet.data[3];
    2c74:	4b48      	ldr	r3, [pc, #288]	; (2d98 <handle_read_gyro+0x29c>)
    2c76:	685b      	ldr	r3, [r3, #4]
    2c78:	3302      	adds	r3, #2
    2c7a:	781b      	ldrb	r3, [r3, #0]
    2c7c:	021b      	lsls	r3, r3, #8
    2c7e:	b219      	sxth	r1, r3
    2c80:	4b45      	ldr	r3, [pc, #276]	; (2d98 <handle_read_gyro+0x29c>)
    2c82:	685b      	ldr	r3, [r3, #4]
    2c84:	3303      	adds	r3, #3
    2c86:	781b      	ldrb	r3, [r3, #0]
    2c88:	b21a      	sxth	r2, r3
    2c8a:	2316      	movs	r3, #22
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	430a      	orrs	r2, r1
    2c90:	801a      	strh	r2, [r3, #0]
		az = (((int16_t)rd_packet.data[4]) << 8) | rd_packet.data[5];
    2c92:	4b41      	ldr	r3, [pc, #260]	; (2d98 <handle_read_gyro+0x29c>)
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	3304      	adds	r3, #4
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	021b      	lsls	r3, r3, #8
    2c9c:	b219      	sxth	r1, r3
    2c9e:	4b3e      	ldr	r3, [pc, #248]	; (2d98 <handle_read_gyro+0x29c>)
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	3305      	adds	r3, #5
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	b21a      	sxth	r2, r3
    2ca8:	2314      	movs	r3, #20
    2caa:	18fb      	adds	r3, r7, r3
    2cac:	430a      	orrs	r2, r1
    2cae:	801a      	strh	r2, [r3, #0]
		gx = (((int16_t)rd_packet.data[8]) << 8) | rd_packet.data[9];
    2cb0:	4b39      	ldr	r3, [pc, #228]	; (2d98 <handle_read_gyro+0x29c>)
    2cb2:	685b      	ldr	r3, [r3, #4]
    2cb4:	3308      	adds	r3, #8
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	021b      	lsls	r3, r3, #8
    2cba:	b219      	sxth	r1, r3
    2cbc:	4b36      	ldr	r3, [pc, #216]	; (2d98 <handle_read_gyro+0x29c>)
    2cbe:	685b      	ldr	r3, [r3, #4]
    2cc0:	3309      	adds	r3, #9
    2cc2:	781b      	ldrb	r3, [r3, #0]
    2cc4:	b21a      	sxth	r2, r3
    2cc6:	2312      	movs	r3, #18
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	430a      	orrs	r2, r1
    2ccc:	801a      	strh	r2, [r3, #0]
		gy = (((int16_t)rd_packet.data[10]) << 8) | rd_packet.data[11];
    2cce:	4b32      	ldr	r3, [pc, #200]	; (2d98 <handle_read_gyro+0x29c>)
    2cd0:	685b      	ldr	r3, [r3, #4]
    2cd2:	330a      	adds	r3, #10
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	021b      	lsls	r3, r3, #8
    2cd8:	b219      	sxth	r1, r3
    2cda:	4b2f      	ldr	r3, [pc, #188]	; (2d98 <handle_read_gyro+0x29c>)
    2cdc:	685b      	ldr	r3, [r3, #4]
    2cde:	330b      	adds	r3, #11
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	b21a      	sxth	r2, r3
    2ce4:	2310      	movs	r3, #16
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	430a      	orrs	r2, r1
    2cea:	801a      	strh	r2, [r3, #0]
		gz = (((int16_t)rd_packet.data[12]) << 8) | rd_packet.data[13];
    2cec:	4b2a      	ldr	r3, [pc, #168]	; (2d98 <handle_read_gyro+0x29c>)
    2cee:	685b      	ldr	r3, [r3, #4]
    2cf0:	330c      	adds	r3, #12
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	021b      	lsls	r3, r3, #8
    2cf6:	b219      	sxth	r1, r3
    2cf8:	4b27      	ldr	r3, [pc, #156]	; (2d98 <handle_read_gyro+0x29c>)
    2cfa:	685b      	ldr	r3, [r3, #4]
    2cfc:	330d      	adds	r3, #13
    2cfe:	781b      	ldrb	r3, [r3, #0]
    2d00:	b21a      	sxth	r2, r3
    2d02:	230e      	movs	r3, #14
    2d04:	18fb      	adds	r3, r7, r3
    2d06:	430a      	orrs	r2, r1
    2d08:	801a      	strh	r2, [r3, #0]
	
		printf("===Reading %d===\r\n", i);
    2d0a:	69fa      	ldr	r2, [r7, #28]
    2d0c:	4b27      	ldr	r3, [pc, #156]	; (2dac <handle_read_gyro+0x2b0>)
    2d0e:	0011      	movs	r1, r2
    2d10:	0018      	movs	r0, r3
    2d12:	4b27      	ldr	r3, [pc, #156]	; (2db0 <handle_read_gyro+0x2b4>)
    2d14:	4798      	blx	r3
		printf("Ax = %d\r\nAy = %d\r\nAz = %d\r\nGx = %d\r\nGy = %d\r\nGz = %d\r\n", ax, ay, az, gx, gy, gz);
    2d16:	2318      	movs	r3, #24
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	2400      	movs	r4, #0
    2d1c:	5f1c      	ldrsh	r4, [r3, r4]
    2d1e:	2316      	movs	r3, #22
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	2500      	movs	r5, #0
    2d24:	5f5d      	ldrsh	r5, [r3, r5]
    2d26:	2314      	movs	r3, #20
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	2600      	movs	r6, #0
    2d2c:	5f9e      	ldrsh	r6, [r3, r6]
    2d2e:	2312      	movs	r3, #18
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	2200      	movs	r2, #0
    2d34:	5e9b      	ldrsh	r3, [r3, r2]
    2d36:	2210      	movs	r2, #16
    2d38:	18ba      	adds	r2, r7, r2
    2d3a:	2100      	movs	r1, #0
    2d3c:	5e52      	ldrsh	r2, [r2, r1]
    2d3e:	210e      	movs	r1, #14
    2d40:	1879      	adds	r1, r7, r1
    2d42:	2000      	movs	r0, #0
    2d44:	5e09      	ldrsh	r1, [r1, r0]
    2d46:	481b      	ldr	r0, [pc, #108]	; (2db4 <handle_read_gyro+0x2b8>)
    2d48:	9102      	str	r1, [sp, #8]
    2d4a:	9201      	str	r2, [sp, #4]
    2d4c:	9300      	str	r3, [sp, #0]
    2d4e:	0033      	movs	r3, r6
    2d50:	002a      	movs	r2, r5
    2d52:	0021      	movs	r1, r4
    2d54:	4c16      	ldr	r4, [pc, #88]	; (2db0 <handle_read_gyro+0x2b4>)
    2d56:	47a0      	blx	r4
		i2c_master_send_stop(&i2c_master_instance);
    2d58:	4b10      	ldr	r3, [pc, #64]	; (2d9c <handle_read_gyro+0x2a0>)
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b12      	ldr	r3, [pc, #72]	; (2da8 <handle_read_gyro+0x2ac>)
    2d5e:	4798      	blx	r3
		delay_ms(interval_ms);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d004      	beq.n	2d70 <handle_read_gyro+0x274>
    2d66:	683b      	ldr	r3, [r7, #0]
    2d68:	0018      	movs	r0, r3
    2d6a:	4b13      	ldr	r3, [pc, #76]	; (2db8 <handle_read_gyro+0x2bc>)
    2d6c:	4798      	blx	r3
    2d6e:	e002      	b.n	2d76 <handle_read_gyro+0x27a>
    2d70:	2001      	movs	r0, #1
    2d72:	4b12      	ldr	r3, [pc, #72]	; (2dbc <handle_read_gyro+0x2c0>)
    2d74:	4798      	blx	r3
	for(int i = 0; i < num_readings; i++) {
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	3301      	adds	r3, #1
    2d7a:	61fb      	str	r3, [r7, #28]
    2d7c:	69fa      	ldr	r2, [r7, #28]
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	429a      	cmp	r2, r3
    2d82:	da00      	bge.n	2d86 <handle_read_gyro+0x28a>
    2d84:	e6c2      	b.n	2b0c <handle_read_gyro+0x10>
	}
}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	46bd      	mov	sp, r7
    2d8a:	b009      	add	sp, #36	; 0x24
    2d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	20000044 	.word	0x20000044
    2d94:	2000003c 	.word	0x2000003c
    2d98:	20000050 	.word	0x20000050
    2d9c:	200003ec 	.word	0x200003ec
    2da0:	0000180d 	.word	0x0000180d
    2da4:	00001655 	.word	0x00001655
    2da8:	0000184d 	.word	0x0000184d
    2dac:	0000a43c 	.word	0x0000a43c
    2db0:	00008091 	.word	0x00008091
    2db4:	0000a450 	.word	0x0000a450
    2db8:	00003021 	.word	0x00003021
    2dbc:	00002ff1 	.word	0x00002ff1

00002dc0 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b082      	sub	sp, #8
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
	printf("Use read_gyro!\r\n");
    2dca:	4b04      	ldr	r3, [pc, #16]	; (2ddc <handle_read_accel+0x1c>)
    2dcc:	0018      	movs	r0, r3
    2dce:	4b04      	ldr	r3, [pc, #16]	; (2de0 <handle_read_accel+0x20>)
    2dd0:	4798      	blx	r3
}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	46bd      	mov	sp, r7
    2dd6:	b002      	add	sp, #8
    2dd8:	bd80      	pop	{r7, pc}
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	0000a488 	.word	0x0000a488
    2de0:	00008185 	.word	0x00008185

00002de4 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	0002      	movs	r2, r0
    2dec:	6039      	str	r1, [r7, #0]
    2dee:	1dfb      	adds	r3, r7, #7
    2df0:	701a      	strb	r2, [r3, #0]
	disable_adc();
    2df2:	4b0f      	ldr	r3, [pc, #60]	; (2e30 <handle_adc_get+0x4c>)
    2df4:	4798      	blx	r3
	configure_adc();
    2df6:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <handle_adc_get+0x50>)
    2df8:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    2dfa:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <handle_adc_get+0x54>)
    2dfc:	0018      	movs	r0, r3
    2dfe:	4b0f      	ldr	r3, [pc, #60]	; (2e3c <handle_adc_get+0x58>)
    2e00:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    2e02:	230e      	movs	r3, #14
    2e04:	18fa      	adds	r2, r7, r3
    2e06:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <handle_adc_get+0x54>)
    2e08:	0011      	movs	r1, r2
    2e0a:	0018      	movs	r0, r3
    2e0c:	4b0c      	ldr	r3, [pc, #48]	; (2e40 <handle_adc_get+0x5c>)
    2e0e:	4798      	blx	r3
    2e10:	0003      	movs	r3, r0
    2e12:	2b05      	cmp	r3, #5
    2e14:	d0f5      	beq.n	2e02 <handle_adc_get+0x1e>
	
	printf("ADC Result: %d\r\n", result);
    2e16:	230e      	movs	r3, #14
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	881b      	ldrh	r3, [r3, #0]
    2e1c:	001a      	movs	r2, r3
    2e1e:	4b09      	ldr	r3, [pc, #36]	; (2e44 <handle_adc_get+0x60>)
    2e20:	0011      	movs	r1, r2
    2e22:	0018      	movs	r0, r3
    2e24:	4b08      	ldr	r3, [pc, #32]	; (2e48 <handle_adc_get+0x64>)
    2e26:	4798      	blx	r3
}
    2e28:	46c0      	nop			; (mov r8, r8)
    2e2a:	46bd      	mov	sp, r7
    2e2c:	b004      	add	sp, #16
    2e2e:	bd80      	pop	{r7, pc}
    2e30:	00002335 	.word	0x00002335
    2e34:	00002351 	.word	0x00002351
    2e38:	20000450 	.word	0x20000450
    2e3c:	00001fed 	.word	0x00001fed
    2e40:	00002035 	.word	0x00002035
    2e44:	0000a498 	.word	0x0000a498
    2e48:	00008091 	.word	0x00008091

00002e4c <handle_mcu_temp>:

void handle_mcu_temp() {
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b082      	sub	sp, #8
    2e50:	af00      	add	r7, sp, #0
	disable_adc();
    2e52:	4b12      	ldr	r3, [pc, #72]	; (2e9c <handle_mcu_temp+0x50>)
    2e54:	4798      	blx	r3
	
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
    2e56:	2000      	movs	r0, #0
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <handle_mcu_temp+0x54>)
    2e5a:	4798      	blx	r3
	
	configure_adc_temp();
    2e5c:	4b11      	ldr	r3, [pc, #68]	; (2ea4 <handle_mcu_temp+0x58>)
    2e5e:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    2e60:	4b11      	ldr	r3, [pc, #68]	; (2ea8 <handle_mcu_temp+0x5c>)
    2e62:	0018      	movs	r0, r3
    2e64:	4b11      	ldr	r3, [pc, #68]	; (2eac <handle_mcu_temp+0x60>)
    2e66:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    2e68:	1cba      	adds	r2, r7, #2
    2e6a:	4b0f      	ldr	r3, [pc, #60]	; (2ea8 <handle_mcu_temp+0x5c>)
    2e6c:	0011      	movs	r1, r2
    2e6e:	0018      	movs	r0, r3
    2e70:	4b0f      	ldr	r3, [pc, #60]	; (2eb0 <handle_mcu_temp+0x64>)
    2e72:	4798      	blx	r3
    2e74:	0003      	movs	r3, r0
    2e76:	2b05      	cmp	r3, #5
    2e78:	d0f6      	beq.n	2e68 <handle_mcu_temp+0x1c>
	
	int temp = calculate_temperature(result);
    2e7a:	1cbb      	adds	r3, r7, #2
    2e7c:	881b      	ldrh	r3, [r3, #0]
    2e7e:	0018      	movs	r0, r3
    2e80:	4b0c      	ldr	r3, [pc, #48]	; (2eb4 <handle_mcu_temp+0x68>)
    2e82:	4798      	blx	r3
    2e84:	0003      	movs	r3, r0
    2e86:	607b      	str	r3, [r7, #4]
	
	printf("Temperature Result: %d \r\n", temp);
    2e88:	687a      	ldr	r2, [r7, #4]
    2e8a:	4b0b      	ldr	r3, [pc, #44]	; (2eb8 <handle_mcu_temp+0x6c>)
    2e8c:	0011      	movs	r1, r2
    2e8e:	0018      	movs	r0, r3
    2e90:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <handle_mcu_temp+0x70>)
    2e92:	4798      	blx	r3
}
    2e94:	46c0      	nop			; (mov r8, r8)
    2e96:	46bd      	mov	sp, r7
    2e98:	b002      	add	sp, #8
    2e9a:	bd80      	pop	{r7, pc}
    2e9c:	00002335 	.word	0x00002335
    2ea0:	00001dc1 	.word	0x00001dc1
    2ea4:	000001c9 	.word	0x000001c9
    2ea8:	20000450 	.word	0x20000450
    2eac:	00001fed 	.word	0x00001fed
    2eb0:	00002035 	.word	0x00002035
    2eb4:	00000235 	.word	0x00000235
    2eb8:	0000a4ac 	.word	0x0000a4ac
    2ebc:	00008091 	.word	0x00008091

00002ec0 <handle_i2c_scan>:

void handle_i2c_scan() {
    2ec0:	b590      	push	{r4, r7, lr}
    2ec2:	b083      	sub	sp, #12
    2ec4:	af00      	add	r7, sp, #0
	
	  for(char slave_address = 1; slave_address <= 127; slave_address++) {
    2ec6:	1dfb      	adds	r3, r7, #7
    2ec8:	2201      	movs	r2, #1
    2eca:	701a      	strb	r2, [r3, #0]
    2ecc:	e031      	b.n	2f32 <handle_i2c_scan+0x72>
		  enum status_code i2c_status;
		  wr_packet.address     = slave_address;
    2ece:	1dfb      	adds	r3, r7, #7
    2ed0:	781b      	ldrb	r3, [r3, #0]
    2ed2:	b29a      	uxth	r2, r3
    2ed4:	4b1b      	ldr	r3, [pc, #108]	; (2f44 <handle_i2c_scan+0x84>)
    2ed6:	801a      	strh	r2, [r3, #0]
		  wr_packet.data_length = 1;
    2ed8:	4b1a      	ldr	r3, [pc, #104]	; (2f44 <handle_i2c_scan+0x84>)
    2eda:	2201      	movs	r2, #1
    2edc:	805a      	strh	r2, [r3, #2]
		  wr_buffer[0]          = 0x00;
    2ede:	4b1a      	ldr	r3, [pc, #104]	; (2f48 <handle_i2c_scan+0x88>)
    2ee0:	2200      	movs	r2, #0
    2ee2:	701a      	strb	r2, [r3, #0]
		  wr_packet.data        = wr_buffer;
    2ee4:	4b17      	ldr	r3, [pc, #92]	; (2f44 <handle_i2c_scan+0x84>)
    2ee6:	4a18      	ldr	r2, [pc, #96]	; (2f48 <handle_i2c_scan+0x88>)
    2ee8:	605a      	str	r2, [r3, #4]
		  i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2eea:	1dbc      	adds	r4, r7, #6
    2eec:	4a15      	ldr	r2, [pc, #84]	; (2f44 <handle_i2c_scan+0x84>)
    2eee:	4b17      	ldr	r3, [pc, #92]	; (2f4c <handle_i2c_scan+0x8c>)
    2ef0:	0011      	movs	r1, r2
    2ef2:	0018      	movs	r0, r3
    2ef4:	4b16      	ldr	r3, [pc, #88]	; (2f50 <handle_i2c_scan+0x90>)
    2ef6:	4798      	blx	r3
    2ef8:	0003      	movs	r3, r0
    2efa:	7023      	strb	r3, [r4, #0]
		  printf("Addr is %d \r\n", slave_address);
    2efc:	1dfb      	adds	r3, r7, #7
    2efe:	781a      	ldrb	r2, [r3, #0]
    2f00:	4b14      	ldr	r3, [pc, #80]	; (2f54 <handle_i2c_scan+0x94>)
    2f02:	0011      	movs	r1, r2
    2f04:	0018      	movs	r0, r3
    2f06:	4b14      	ldr	r3, [pc, #80]	; (2f58 <handle_i2c_scan+0x98>)
    2f08:	4798      	blx	r3
		  if( i2c_status == STATUS_OK ) {
    2f0a:	1dbb      	adds	r3, r7, #6
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d106      	bne.n	2f20 <handle_i2c_scan+0x60>
			  //i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
			 printf("The slave address is %.2x \r\n", slave_address);
    2f12:	1dfb      	adds	r3, r7, #7
    2f14:	781a      	ldrb	r2, [r3, #0]
    2f16:	4b11      	ldr	r3, [pc, #68]	; (2f5c <handle_i2c_scan+0x9c>)
    2f18:	0011      	movs	r1, r2
    2f1a:	0018      	movs	r0, r3
    2f1c:	4b0e      	ldr	r3, [pc, #56]	; (2f58 <handle_i2c_scan+0x98>)
    2f1e:	4798      	blx	r3
		  }
		  i2c_master_send_stop(&i2c_master_instance);
    2f20:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <handle_i2c_scan+0x8c>)
    2f22:	0018      	movs	r0, r3
    2f24:	4b0e      	ldr	r3, [pc, #56]	; (2f60 <handle_i2c_scan+0xa0>)
    2f26:	4798      	blx	r3
	  for(char slave_address = 1; slave_address <= 127; slave_address++) {
    2f28:	1dfb      	adds	r3, r7, #7
    2f2a:	781a      	ldrb	r2, [r3, #0]
    2f2c:	1dfb      	adds	r3, r7, #7
    2f2e:	3201      	adds	r2, #1
    2f30:	701a      	strb	r2, [r3, #0]
    2f32:	1dfb      	adds	r3, r7, #7
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	b25b      	sxtb	r3, r3
    2f38:	2b00      	cmp	r3, #0
    2f3a:	dac8      	bge.n	2ece <handle_i2c_scan+0xe>
	 }
	
}
    2f3c:	46c0      	nop			; (mov r8, r8)
    2f3e:	46bd      	mov	sp, r7
    2f40:	b003      	add	sp, #12
    2f42:	bd90      	pop	{r4, r7, pc}
    2f44:	20000044 	.word	0x20000044
    2f48:	2000003c 	.word	0x2000003c
    2f4c:	200003ec 	.word	0x200003ec
    2f50:	0000180d 	.word	0x0000180d
    2f54:	0000a4c8 	.word	0x0000a4c8
    2f58:	00008091 	.word	0x00008091
    2f5c:	0000a4d8 	.word	0x0000a4d8
    2f60:	0000184d 	.word	0x0000184d

00002f64 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b082      	sub	sp, #8
    2f68:	af00      	add	r7, sp, #0
    2f6a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d00c      	beq.n	2f8c <delay_cycles+0x28>
		SysTick->LOAD = n;
    2f72:	4b08      	ldr	r3, [pc, #32]	; (2f94 <delay_cycles+0x30>)
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    2f78:	4b06      	ldr	r3, [pc, #24]	; (2f94 <delay_cycles+0x30>)
    2f7a:	2200      	movs	r2, #0
    2f7c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	4b04      	ldr	r3, [pc, #16]	; (2f94 <delay_cycles+0x30>)
    2f82:	681a      	ldr	r2, [r3, #0]
    2f84:	2380      	movs	r3, #128	; 0x80
    2f86:	025b      	lsls	r3, r3, #9
    2f88:	4013      	ands	r3, r2
    2f8a:	d0f9      	beq.n	2f80 <delay_cycles+0x1c>
		};
	}
}
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46bd      	mov	sp, r7
    2f90:	b002      	add	sp, #8
    2f92:	bd80      	pop	{r7, pc}
    2f94:	e000e010 	.word	0xe000e010

00002f98 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2f9c:	2000      	movs	r0, #0
    2f9e:	4b0f      	ldr	r3, [pc, #60]	; (2fdc <delay_init+0x44>)
    2fa0:	4798      	blx	r3
    2fa2:	0002      	movs	r2, r0
    2fa4:	4b0e      	ldr	r3, [pc, #56]	; (2fe0 <delay_init+0x48>)
    2fa6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    2fa8:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <delay_init+0x48>)
    2faa:	6818      	ldr	r0, [r3, #0]
    2fac:	4b0d      	ldr	r3, [pc, #52]	; (2fe4 <delay_init+0x4c>)
    2fae:	22fa      	movs	r2, #250	; 0xfa
    2fb0:	0091      	lsls	r1, r2, #2
    2fb2:	4798      	blx	r3
    2fb4:	0003      	movs	r3, r0
    2fb6:	001a      	movs	r2, r3
    2fb8:	4b09      	ldr	r3, [pc, #36]	; (2fe0 <delay_init+0x48>)
    2fba:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2fbc:	4b08      	ldr	r3, [pc, #32]	; (2fe0 <delay_init+0x48>)
    2fbe:	6818      	ldr	r0, [r3, #0]
    2fc0:	4b08      	ldr	r3, [pc, #32]	; (2fe4 <delay_init+0x4c>)
    2fc2:	22fa      	movs	r2, #250	; 0xfa
    2fc4:	0091      	lsls	r1, r2, #2
    2fc6:	4798      	blx	r3
    2fc8:	0003      	movs	r3, r0
    2fca:	001a      	movs	r2, r3
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <delay_init+0x50>)
    2fce:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2fd0:	4b06      	ldr	r3, [pc, #24]	; (2fec <delay_init+0x54>)
    2fd2:	2205      	movs	r2, #5
    2fd4:	601a      	str	r2, [r3, #0]
}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	46bd      	mov	sp, r7
    2fda:	bd80      	pop	{r7, pc}
    2fdc:	000055ed 	.word	0x000055ed
    2fe0:	2000005c 	.word	0x2000005c
    2fe4:	00006411 	.word	0x00006411
    2fe8:	20000060 	.word	0x20000060
    2fec:	e000e010 	.word	0xe000e010

00002ff0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
	while (n--) {
    2ff8:	e004      	b.n	3004 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    2ffa:	4b07      	ldr	r3, [pc, #28]	; (3018 <delay_cycles_us+0x28>)
    2ffc:	681b      	ldr	r3, [r3, #0]
    2ffe:	0018      	movs	r0, r3
    3000:	4b06      	ldr	r3, [pc, #24]	; (301c <delay_cycles_us+0x2c>)
    3002:	4798      	blx	r3
	while (n--) {
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	1e5a      	subs	r2, r3, #1
    3008:	607a      	str	r2, [r7, #4]
    300a:	2b00      	cmp	r3, #0
    300c:	d1f5      	bne.n	2ffa <delay_cycles_us+0xa>
	}
}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46bd      	mov	sp, r7
    3012:	b002      	add	sp, #8
    3014:	bd80      	pop	{r7, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	20000060 	.word	0x20000060
    301c:	00002f65 	.word	0x00002f65

00003020 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3020:	b580      	push	{r7, lr}
    3022:	b082      	sub	sp, #8
    3024:	af00      	add	r7, sp, #0
    3026:	6078      	str	r0, [r7, #4]
	while (n--) {
    3028:	e004      	b.n	3034 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    302a:	4b07      	ldr	r3, [pc, #28]	; (3048 <delay_cycles_ms+0x28>)
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	0018      	movs	r0, r3
    3030:	4b06      	ldr	r3, [pc, #24]	; (304c <delay_cycles_ms+0x2c>)
    3032:	4798      	blx	r3
	while (n--) {
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	1e5a      	subs	r2, r3, #1
    3038:	607a      	str	r2, [r7, #4]
    303a:	2b00      	cmp	r3, #0
    303c:	d1f5      	bne.n	302a <delay_cycles_ms+0xa>
	}
}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	46bd      	mov	sp, r7
    3042:	b002      	add	sp, #8
    3044:	bd80      	pop	{r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	2000005c 	.word	0x2000005c
    304c:	00002f65 	.word	0x00002f65

00003050 <system_pinmux_get_group_from_gpio_pin>:
{
    3050:	b580      	push	{r7, lr}
    3052:	b084      	sub	sp, #16
    3054:	af00      	add	r7, sp, #0
    3056:	0002      	movs	r2, r0
    3058:	1dfb      	adds	r3, r7, #7
    305a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    305c:	230f      	movs	r3, #15
    305e:	18fb      	adds	r3, r7, r3
    3060:	1dfa      	adds	r2, r7, #7
    3062:	7812      	ldrb	r2, [r2, #0]
    3064:	09d2      	lsrs	r2, r2, #7
    3066:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3068:	230e      	movs	r3, #14
    306a:	18fb      	adds	r3, r7, r3
    306c:	1dfa      	adds	r2, r7, #7
    306e:	7812      	ldrb	r2, [r2, #0]
    3070:	0952      	lsrs	r2, r2, #5
    3072:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3074:	4b0d      	ldr	r3, [pc, #52]	; (30ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3076:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3078:	230f      	movs	r3, #15
    307a:	18fb      	adds	r3, r7, r3
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d10f      	bne.n	30a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3082:	230f      	movs	r3, #15
    3084:	18fb      	adds	r3, r7, r3
    3086:	781b      	ldrb	r3, [r3, #0]
    3088:	009b      	lsls	r3, r3, #2
    308a:	2210      	movs	r2, #16
    308c:	4694      	mov	ip, r2
    308e:	44bc      	add	ip, r7
    3090:	4463      	add	r3, ip
    3092:	3b08      	subs	r3, #8
    3094:	681a      	ldr	r2, [r3, #0]
    3096:	230e      	movs	r3, #14
    3098:	18fb      	adds	r3, r7, r3
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	01db      	lsls	r3, r3, #7
    309e:	18d3      	adds	r3, r2, r3
    30a0:	e000      	b.n	30a4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    30a2:	2300      	movs	r3, #0
}
    30a4:	0018      	movs	r0, r3
    30a6:	46bd      	mov	sp, r7
    30a8:	b004      	add	sp, #16
    30aa:	bd80      	pop	{r7, pc}
    30ac:	41004400 	.word	0x41004400

000030b0 <system_interrupt_enable_global>:
{
    30b0:	b580      	push	{r7, lr}
    30b2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    30b4:	4b04      	ldr	r3, [pc, #16]	; (30c8 <system_interrupt_enable_global+0x18>)
    30b6:	2201      	movs	r2, #1
    30b8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    30ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    30be:	b662      	cpsie	i
}
    30c0:	46c0      	nop			; (mov r8, r8)
    30c2:	46bd      	mov	sp, r7
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	20000064 	.word	0x20000064

000030cc <port_get_group_from_gpio_pin>:
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b082      	sub	sp, #8
    30d0:	af00      	add	r7, sp, #0
    30d2:	0002      	movs	r2, r0
    30d4:	1dfb      	adds	r3, r7, #7
    30d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    30d8:	1dfb      	adds	r3, r7, #7
    30da:	781b      	ldrb	r3, [r3, #0]
    30dc:	0018      	movs	r0, r3
    30de:	4b03      	ldr	r3, [pc, #12]	; (30ec <port_get_group_from_gpio_pin+0x20>)
    30e0:	4798      	blx	r3
    30e2:	0003      	movs	r3, r0
}
    30e4:	0018      	movs	r0, r3
    30e6:	46bd      	mov	sp, r7
    30e8:	b002      	add	sp, #8
    30ea:	bd80      	pop	{r7, pc}
    30ec:	00003051 	.word	0x00003051

000030f0 <port_get_config_defaults>:
{
    30f0:	b580      	push	{r7, lr}
    30f2:	b082      	sub	sp, #8
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	2200      	movs	r2, #0
    30fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	2201      	movs	r2, #1
    3102:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	2200      	movs	r2, #0
    3108:	709a      	strb	r2, [r3, #2]
}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	46bd      	mov	sp, r7
    310e:	b002      	add	sp, #8
    3110:	bd80      	pop	{r7, pc}
	...

00003114 <port_pin_set_output_level>:
{
    3114:	b580      	push	{r7, lr}
    3116:	b084      	sub	sp, #16
    3118:	af00      	add	r7, sp, #0
    311a:	0002      	movs	r2, r0
    311c:	1dfb      	adds	r3, r7, #7
    311e:	701a      	strb	r2, [r3, #0]
    3120:	1dbb      	adds	r3, r7, #6
    3122:	1c0a      	adds	r2, r1, #0
    3124:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3126:	1dfb      	adds	r3, r7, #7
    3128:	781b      	ldrb	r3, [r3, #0]
    312a:	0018      	movs	r0, r3
    312c:	4b0d      	ldr	r3, [pc, #52]	; (3164 <port_pin_set_output_level+0x50>)
    312e:	4798      	blx	r3
    3130:	0003      	movs	r3, r0
    3132:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3134:	1dfb      	adds	r3, r7, #7
    3136:	781b      	ldrb	r3, [r3, #0]
    3138:	221f      	movs	r2, #31
    313a:	4013      	ands	r3, r2
    313c:	2201      	movs	r2, #1
    313e:	409a      	lsls	r2, r3
    3140:	0013      	movs	r3, r2
    3142:	60bb      	str	r3, [r7, #8]
	if (level) {
    3144:	1dbb      	adds	r3, r7, #6
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	2b00      	cmp	r3, #0
    314a:	d003      	beq.n	3154 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    314c:	68fb      	ldr	r3, [r7, #12]
    314e:	68ba      	ldr	r2, [r7, #8]
    3150:	619a      	str	r2, [r3, #24]
}
    3152:	e002      	b.n	315a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3154:	68fb      	ldr	r3, [r7, #12]
    3156:	68ba      	ldr	r2, [r7, #8]
    3158:	615a      	str	r2, [r3, #20]
}
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	46bd      	mov	sp, r7
    315e:	b004      	add	sp, #16
    3160:	bd80      	pop	{r7, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	000030cd 	.word	0x000030cd

00003168 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    3168:	b580      	push	{r7, lr}
    316a:	b082      	sub	sp, #8
    316c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    316e:	1d3b      	adds	r3, r7, #4
    3170:	0018      	movs	r0, r3
    3172:	4b10      	ldr	r3, [pc, #64]	; (31b4 <init_chip_pins+0x4c>)
    3174:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3176:	1d3b      	adds	r3, r7, #4
    3178:	2201      	movs	r2, #1
    317a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    317c:	1d3b      	adds	r3, r7, #4
    317e:	0019      	movs	r1, r3
    3180:	201b      	movs	r0, #27
    3182:	4b0d      	ldr	r3, [pc, #52]	; (31b8 <init_chip_pins+0x50>)
    3184:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    3186:	1d3b      	adds	r3, r7, #4
    3188:	0019      	movs	r1, r3
    318a:	201c      	movs	r0, #28
    318c:	4b0a      	ldr	r3, [pc, #40]	; (31b8 <init_chip_pins+0x50>)
    318e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    3190:	1d3b      	adds	r3, r7, #4
    3192:	0019      	movs	r1, r3
    3194:	2028      	movs	r0, #40	; 0x28
    3196:	4b08      	ldr	r3, [pc, #32]	; (31b8 <init_chip_pins+0x50>)
    3198:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    319a:	2100      	movs	r1, #0
    319c:	201c      	movs	r0, #28
    319e:	4b07      	ldr	r3, [pc, #28]	; (31bc <init_chip_pins+0x54>)
    31a0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    31a2:	2100      	movs	r1, #0
    31a4:	201b      	movs	r0, #27
    31a6:	4b05      	ldr	r3, [pc, #20]	; (31bc <init_chip_pins+0x54>)
    31a8:	4798      	blx	r3
}
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	46bd      	mov	sp, r7
    31ae:	b002      	add	sp, #8
    31b0:	bd80      	pop	{r7, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	000030f1 	.word	0x000030f1
    31b8:	000037e5 	.word	0x000037e5
    31bc:	00003115 	.word	0x00003115

000031c0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    31c4:	4b0c      	ldr	r3, [pc, #48]	; (31f8 <nm_bsp_init+0x38>)
    31c6:	2200      	movs	r2, #0
    31c8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    31ca:	4b0c      	ldr	r3, [pc, #48]	; (31fc <nm_bsp_init+0x3c>)
    31cc:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    31ce:	4b0c      	ldr	r3, [pc, #48]	; (3200 <nm_bsp_init+0x40>)
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	2201      	movs	r2, #1
    31d4:	4013      	ands	r3, r2
    31d6:	d004      	beq.n	31e2 <nm_bsp_init+0x22>
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <nm_bsp_init+0x40>)
    31da:	681b      	ldr	r3, [r3, #0]
    31dc:	2202      	movs	r2, #2
    31de:	4013      	ands	r3, r2
    31e0:	d101      	bne.n	31e6 <nm_bsp_init+0x26>
	    delay_init();
    31e2:	4b08      	ldr	r3, [pc, #32]	; (3204 <nm_bsp_init+0x44>)
    31e4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    31e6:	4b08      	ldr	r3, [pc, #32]	; (3208 <nm_bsp_init+0x48>)
    31e8:	4798      	blx	r3

	system_interrupt_enable_global();
    31ea:	4b08      	ldr	r3, [pc, #32]	; (320c <nm_bsp_init+0x4c>)
    31ec:	4798      	blx	r3

	return M2M_SUCCESS;
    31ee:	2300      	movs	r3, #0
}
    31f0:	0018      	movs	r0, r3
    31f2:	46bd      	mov	sp, r7
    31f4:	bd80      	pop	{r7, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	2000025c 	.word	0x2000025c
    31fc:	00003169 	.word	0x00003169
    3200:	e000e010 	.word	0xe000e010
    3204:	00002f99 	.word	0x00002f99
    3208:	00003211 	.word	0x00003211
    320c:	000030b1 	.word	0x000030b1

00003210 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3210:	b580      	push	{r7, lr}
    3212:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3214:	2100      	movs	r1, #0
    3216:	201c      	movs	r0, #28
    3218:	4b0b      	ldr	r3, [pc, #44]	; (3248 <nm_bsp_reset+0x38>)
    321a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    321c:	2100      	movs	r1, #0
    321e:	201b      	movs	r0, #27
    3220:	4b09      	ldr	r3, [pc, #36]	; (3248 <nm_bsp_reset+0x38>)
    3222:	4798      	blx	r3
	nm_bsp_sleep(1);
    3224:	2001      	movs	r0, #1
    3226:	4b09      	ldr	r3, [pc, #36]	; (324c <nm_bsp_reset+0x3c>)
    3228:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    322a:	2101      	movs	r1, #1
    322c:	201c      	movs	r0, #28
    322e:	4b06      	ldr	r3, [pc, #24]	; (3248 <nm_bsp_reset+0x38>)
    3230:	4798      	blx	r3
	nm_bsp_sleep(10);
    3232:	200a      	movs	r0, #10
    3234:	4b05      	ldr	r3, [pc, #20]	; (324c <nm_bsp_reset+0x3c>)
    3236:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    3238:	2101      	movs	r1, #1
    323a:	201b      	movs	r0, #27
    323c:	4b02      	ldr	r3, [pc, #8]	; (3248 <nm_bsp_reset+0x38>)
    323e:	4798      	blx	r3
}
    3240:	46c0      	nop			; (mov r8, r8)
    3242:	46bd      	mov	sp, r7
    3244:	bd80      	pop	{r7, pc}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	00003115 	.word	0x00003115
    324c:	00003251 	.word	0x00003251

00003250 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    3250:	b580      	push	{r7, lr}
    3252:	b082      	sub	sp, #8
    3254:	af00      	add	r7, sp, #0
    3256:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    3258:	e002      	b.n	3260 <nm_bsp_sleep+0x10>
		delay_ms(1);
    325a:	2001      	movs	r0, #1
    325c:	4b05      	ldr	r3, [pc, #20]	; (3274 <nm_bsp_sleep+0x24>)
    325e:	4798      	blx	r3
	while (u32TimeMsec--) {
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	1e5a      	subs	r2, r3, #1
    3264:	607a      	str	r2, [r7, #4]
    3266:	2b00      	cmp	r3, #0
    3268:	d1f7      	bne.n	325a <nm_bsp_sleep+0xa>
	}
}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	46bd      	mov	sp, r7
    326e:	b002      	add	sp, #8
    3270:	bd80      	pop	{r7, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	00003021 	.word	0x00003021

00003278 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    327e:	4b10      	ldr	r3, [pc, #64]	; (32c0 <cpu_irq_enter_critical+0x48>)
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	2b00      	cmp	r3, #0
    3284:	d112      	bne.n	32ac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3286:	f3ef 8310 	mrs	r3, PRIMASK
    328a:	607b      	str	r3, [r7, #4]
  return(result);
    328c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    328e:	2b00      	cmp	r3, #0
    3290:	d109      	bne.n	32a6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    3292:	b672      	cpsid	i
    3294:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3298:	4b0a      	ldr	r3, [pc, #40]	; (32c4 <cpu_irq_enter_critical+0x4c>)
    329a:	2200      	movs	r2, #0
    329c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    329e:	4b0a      	ldr	r3, [pc, #40]	; (32c8 <cpu_irq_enter_critical+0x50>)
    32a0:	2201      	movs	r2, #1
    32a2:	701a      	strb	r2, [r3, #0]
    32a4:	e002      	b.n	32ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    32a6:	4b08      	ldr	r3, [pc, #32]	; (32c8 <cpu_irq_enter_critical+0x50>)
    32a8:	2200      	movs	r2, #0
    32aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    32ac:	4b04      	ldr	r3, [pc, #16]	; (32c0 <cpu_irq_enter_critical+0x48>)
    32ae:	681b      	ldr	r3, [r3, #0]
    32b0:	1c5a      	adds	r2, r3, #1
    32b2:	4b03      	ldr	r3, [pc, #12]	; (32c0 <cpu_irq_enter_critical+0x48>)
    32b4:	601a      	str	r2, [r3, #0]
}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	46bd      	mov	sp, r7
    32ba:	b002      	add	sp, #8
    32bc:	bd80      	pop	{r7, pc}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	20000260 	.word	0x20000260
    32c4:	20000064 	.word	0x20000064
    32c8:	20000264 	.word	0x20000264

000032cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    32d0:	4b0b      	ldr	r3, [pc, #44]	; (3300 <cpu_irq_leave_critical+0x34>)
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	1e5a      	subs	r2, r3, #1
    32d6:	4b0a      	ldr	r3, [pc, #40]	; (3300 <cpu_irq_leave_critical+0x34>)
    32d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    32da:	4b09      	ldr	r3, [pc, #36]	; (3300 <cpu_irq_leave_critical+0x34>)
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	2b00      	cmp	r3, #0
    32e0:	d10a      	bne.n	32f8 <cpu_irq_leave_critical+0x2c>
    32e2:	4b08      	ldr	r3, [pc, #32]	; (3304 <cpu_irq_leave_critical+0x38>)
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	b2db      	uxtb	r3, r3
    32e8:	2b00      	cmp	r3, #0
    32ea:	d005      	beq.n	32f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    32ec:	4b06      	ldr	r3, [pc, #24]	; (3308 <cpu_irq_leave_critical+0x3c>)
    32ee:	2201      	movs	r2, #1
    32f0:	701a      	strb	r2, [r3, #0]
    32f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32f6:	b662      	cpsie	i
	}
}
    32f8:	46c0      	nop			; (mov r8, r8)
    32fa:	46bd      	mov	sp, r7
    32fc:	bd80      	pop	{r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	20000260 	.word	0x20000260
    3304:	20000264 	.word	0x20000264
    3308:	20000064 	.word	0x20000064

0000330c <system_pinmux_get_group_from_gpio_pin>:
{
    330c:	b580      	push	{r7, lr}
    330e:	b084      	sub	sp, #16
    3310:	af00      	add	r7, sp, #0
    3312:	0002      	movs	r2, r0
    3314:	1dfb      	adds	r3, r7, #7
    3316:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3318:	230f      	movs	r3, #15
    331a:	18fb      	adds	r3, r7, r3
    331c:	1dfa      	adds	r2, r7, #7
    331e:	7812      	ldrb	r2, [r2, #0]
    3320:	09d2      	lsrs	r2, r2, #7
    3322:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3324:	230e      	movs	r3, #14
    3326:	18fb      	adds	r3, r7, r3
    3328:	1dfa      	adds	r2, r7, #7
    332a:	7812      	ldrb	r2, [r2, #0]
    332c:	0952      	lsrs	r2, r2, #5
    332e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3330:	4b0d      	ldr	r3, [pc, #52]	; (3368 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3332:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3334:	230f      	movs	r3, #15
    3336:	18fb      	adds	r3, r7, r3
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	2b00      	cmp	r3, #0
    333c:	d10f      	bne.n	335e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    333e:	230f      	movs	r3, #15
    3340:	18fb      	adds	r3, r7, r3
    3342:	781b      	ldrb	r3, [r3, #0]
    3344:	009b      	lsls	r3, r3, #2
    3346:	2210      	movs	r2, #16
    3348:	4694      	mov	ip, r2
    334a:	44bc      	add	ip, r7
    334c:	4463      	add	r3, ip
    334e:	3b08      	subs	r3, #8
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	230e      	movs	r3, #14
    3354:	18fb      	adds	r3, r7, r3
    3356:	781b      	ldrb	r3, [r3, #0]
    3358:	01db      	lsls	r3, r3, #7
    335a:	18d3      	adds	r3, r2, r3
    335c:	e000      	b.n	3360 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    335e:	2300      	movs	r3, #0
}
    3360:	0018      	movs	r0, r3
    3362:	46bd      	mov	sp, r7
    3364:	b004      	add	sp, #16
    3366:	bd80      	pop	{r7, pc}
    3368:	41004400 	.word	0x41004400

0000336c <port_get_group_from_gpio_pin>:
{
    336c:	b580      	push	{r7, lr}
    336e:	b082      	sub	sp, #8
    3370:	af00      	add	r7, sp, #0
    3372:	0002      	movs	r2, r0
    3374:	1dfb      	adds	r3, r7, #7
    3376:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3378:	1dfb      	adds	r3, r7, #7
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	0018      	movs	r0, r3
    337e:	4b03      	ldr	r3, [pc, #12]	; (338c <port_get_group_from_gpio_pin+0x20>)
    3380:	4798      	blx	r3
    3382:	0003      	movs	r3, r0
}
    3384:	0018      	movs	r0, r3
    3386:	46bd      	mov	sp, r7
    3388:	b002      	add	sp, #8
    338a:	bd80      	pop	{r7, pc}
    338c:	0000330d 	.word	0x0000330d

00003390 <port_get_config_defaults>:
{
    3390:	b580      	push	{r7, lr}
    3392:	b082      	sub	sp, #8
    3394:	af00      	add	r7, sp, #0
    3396:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3398:	687b      	ldr	r3, [r7, #4]
    339a:	2200      	movs	r2, #0
    339c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	2201      	movs	r2, #1
    33a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	2200      	movs	r2, #0
    33a8:	709a      	strb	r2, [r3, #2]
}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	46bd      	mov	sp, r7
    33ae:	b002      	add	sp, #8
    33b0:	bd80      	pop	{r7, pc}
	...

000033b4 <port_pin_set_output_level>:
{
    33b4:	b580      	push	{r7, lr}
    33b6:	b084      	sub	sp, #16
    33b8:	af00      	add	r7, sp, #0
    33ba:	0002      	movs	r2, r0
    33bc:	1dfb      	adds	r3, r7, #7
    33be:	701a      	strb	r2, [r3, #0]
    33c0:	1dbb      	adds	r3, r7, #6
    33c2:	1c0a      	adds	r2, r1, #0
    33c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    33c6:	1dfb      	adds	r3, r7, #7
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	0018      	movs	r0, r3
    33cc:	4b0d      	ldr	r3, [pc, #52]	; (3404 <port_pin_set_output_level+0x50>)
    33ce:	4798      	blx	r3
    33d0:	0003      	movs	r3, r0
    33d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    33d4:	1dfb      	adds	r3, r7, #7
    33d6:	781b      	ldrb	r3, [r3, #0]
    33d8:	221f      	movs	r2, #31
    33da:	4013      	ands	r3, r2
    33dc:	2201      	movs	r2, #1
    33de:	409a      	lsls	r2, r3
    33e0:	0013      	movs	r3, r2
    33e2:	60bb      	str	r3, [r7, #8]
	if (level) {
    33e4:	1dbb      	adds	r3, r7, #6
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d003      	beq.n	33f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    33ec:	68fb      	ldr	r3, [r7, #12]
    33ee:	68ba      	ldr	r2, [r7, #8]
    33f0:	619a      	str	r2, [r3, #24]
}
    33f2:	e002      	b.n	33fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    33f4:	68fb      	ldr	r3, [r7, #12]
    33f6:	68ba      	ldr	r2, [r7, #8]
    33f8:	615a      	str	r2, [r3, #20]
}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	46bd      	mov	sp, r7
    33fe:	b004      	add	sp, #16
    3400:	bd80      	pop	{r7, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	0000336d 	.word	0x0000336d

00003408 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    340e:	1d3b      	adds	r3, r7, #4
    3410:	0018      	movs	r0, r3
    3412:	4b0e      	ldr	r3, [pc, #56]	; (344c <system_board_init+0x44>)
    3414:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3416:	1d3b      	adds	r3, r7, #4
    3418:	2201      	movs	r2, #1
    341a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    341c:	1d3b      	adds	r3, r7, #4
    341e:	0019      	movs	r1, r3
    3420:	2017      	movs	r0, #23
    3422:	4b0b      	ldr	r3, [pc, #44]	; (3450 <system_board_init+0x48>)
    3424:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3426:	2101      	movs	r1, #1
    3428:	2017      	movs	r0, #23
    342a:	4b0a      	ldr	r3, [pc, #40]	; (3454 <system_board_init+0x4c>)
    342c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    342e:	1d3b      	adds	r3, r7, #4
    3430:	2200      	movs	r2, #0
    3432:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3434:	1d3b      	adds	r3, r7, #4
    3436:	2201      	movs	r2, #1
    3438:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    343a:	1d3b      	adds	r3, r7, #4
    343c:	0019      	movs	r1, r3
    343e:	2037      	movs	r0, #55	; 0x37
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <system_board_init+0x48>)
    3442:	4798      	blx	r3
}
    3444:	46c0      	nop			; (mov r8, r8)
    3446:	46bd      	mov	sp, r7
    3448:	b002      	add	sp, #8
    344a:	bd80      	pop	{r7, pc}
    344c:	00003391 	.word	0x00003391
    3450:	000037e5 	.word	0x000037e5
    3454:	000033b5 	.word	0x000033b5

00003458 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3458:	b580      	push	{r7, lr}
    345a:	b084      	sub	sp, #16
    345c:	af00      	add	r7, sp, #0
    345e:	0002      	movs	r2, r0
    3460:	1dfb      	adds	r3, r7, #7
    3462:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3464:	230f      	movs	r3, #15
    3466:	18fb      	adds	r3, r7, r3
    3468:	1dfa      	adds	r2, r7, #7
    346a:	7812      	ldrb	r2, [r2, #0]
    346c:	0952      	lsrs	r2, r2, #5
    346e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3470:	230f      	movs	r3, #15
    3472:	18fb      	adds	r3, r7, r3
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	2b00      	cmp	r3, #0
    3478:	d10c      	bne.n	3494 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    347a:	4b09      	ldr	r3, [pc, #36]	; (34a0 <_extint_get_eic_from_channel+0x48>)
    347c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    347e:	230f      	movs	r3, #15
    3480:	18fb      	adds	r3, r7, r3
    3482:	781b      	ldrb	r3, [r3, #0]
    3484:	009b      	lsls	r3, r3, #2
    3486:	2210      	movs	r2, #16
    3488:	4694      	mov	ip, r2
    348a:	44bc      	add	ip, r7
    348c:	4463      	add	r3, ip
    348e:	3b08      	subs	r3, #8
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	e000      	b.n	3496 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3494:	2300      	movs	r3, #0
	}
}
    3496:	0018      	movs	r0, r3
    3498:	46bd      	mov	sp, r7
    349a:	b004      	add	sp, #16
    349c:	bd80      	pop	{r7, pc}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	40001800 	.word	0x40001800

000034a4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b084      	sub	sp, #16
    34a8:	af00      	add	r7, sp, #0
    34aa:	0002      	movs	r2, r0
    34ac:	1dfb      	adds	r3, r7, #7
    34ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    34b0:	1dfb      	adds	r3, r7, #7
    34b2:	781b      	ldrb	r3, [r3, #0]
    34b4:	0018      	movs	r0, r3
    34b6:	4b0b      	ldr	r3, [pc, #44]	; (34e4 <extint_chan_is_detected+0x40>)
    34b8:	4798      	blx	r3
    34ba:	0003      	movs	r3, r0
    34bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    34be:	1dfb      	adds	r3, r7, #7
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	221f      	movs	r2, #31
    34c4:	4013      	ands	r3, r2
    34c6:	2201      	movs	r2, #1
    34c8:	409a      	lsls	r2, r3
    34ca:	0013      	movs	r3, r2
    34cc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    34ce:	68fb      	ldr	r3, [r7, #12]
    34d0:	691b      	ldr	r3, [r3, #16]
    34d2:	68ba      	ldr	r2, [r7, #8]
    34d4:	4013      	ands	r3, r2
    34d6:	1e5a      	subs	r2, r3, #1
    34d8:	4193      	sbcs	r3, r2
    34da:	b2db      	uxtb	r3, r3
}
    34dc:	0018      	movs	r0, r3
    34de:	46bd      	mov	sp, r7
    34e0:	b004      	add	sp, #16
    34e2:	bd80      	pop	{r7, pc}
    34e4:	00003459 	.word	0x00003459

000034e8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b084      	sub	sp, #16
    34ec:	af00      	add	r7, sp, #0
    34ee:	0002      	movs	r2, r0
    34f0:	1dfb      	adds	r3, r7, #7
    34f2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    34f4:	1dfb      	adds	r3, r7, #7
    34f6:	781b      	ldrb	r3, [r3, #0]
    34f8:	0018      	movs	r0, r3
    34fa:	4b09      	ldr	r3, [pc, #36]	; (3520 <extint_chan_clear_detected+0x38>)
    34fc:	4798      	blx	r3
    34fe:	0003      	movs	r3, r0
    3500:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3502:	1dfb      	adds	r3, r7, #7
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	221f      	movs	r2, #31
    3508:	4013      	ands	r3, r2
    350a:	2201      	movs	r2, #1
    350c:	409a      	lsls	r2, r3
    350e:	0013      	movs	r3, r2
    3510:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3512:	68fb      	ldr	r3, [r7, #12]
    3514:	68ba      	ldr	r2, [r7, #8]
    3516:	611a      	str	r2, [r3, #16]
}
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46bd      	mov	sp, r7
    351c:	b004      	add	sp, #16
    351e:	bd80      	pop	{r7, pc}
    3520:	00003459 	.word	0x00003459

00003524 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3524:	b580      	push	{r7, lr}
    3526:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3528:	4b15      	ldr	r3, [pc, #84]	; (3580 <EIC_Handler+0x5c>)
    352a:	2200      	movs	r2, #0
    352c:	701a      	strb	r2, [r3, #0]
    352e:	e020      	b.n	3572 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    3530:	4b13      	ldr	r3, [pc, #76]	; (3580 <EIC_Handler+0x5c>)
    3532:	781b      	ldrb	r3, [r3, #0]
    3534:	0018      	movs	r0, r3
    3536:	4b13      	ldr	r3, [pc, #76]	; (3584 <EIC_Handler+0x60>)
    3538:	4798      	blx	r3
    353a:	1e03      	subs	r3, r0, #0
    353c:	d013      	beq.n	3566 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <EIC_Handler+0x5c>)
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	0018      	movs	r0, r3
    3544:	4b10      	ldr	r3, [pc, #64]	; (3588 <EIC_Handler+0x64>)
    3546:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3548:	4b0d      	ldr	r3, [pc, #52]	; (3580 <EIC_Handler+0x5c>)
    354a:	781b      	ldrb	r3, [r3, #0]
    354c:	001a      	movs	r2, r3
    354e:	4b0f      	ldr	r3, [pc, #60]	; (358c <EIC_Handler+0x68>)
    3550:	0092      	lsls	r2, r2, #2
    3552:	58d3      	ldr	r3, [r2, r3]
    3554:	2b00      	cmp	r3, #0
    3556:	d006      	beq.n	3566 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3558:	4b09      	ldr	r3, [pc, #36]	; (3580 <EIC_Handler+0x5c>)
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	001a      	movs	r2, r3
    355e:	4b0b      	ldr	r3, [pc, #44]	; (358c <EIC_Handler+0x68>)
    3560:	0092      	lsls	r2, r2, #2
    3562:	58d3      	ldr	r3, [r2, r3]
    3564:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3566:	4b06      	ldr	r3, [pc, #24]	; (3580 <EIC_Handler+0x5c>)
    3568:	781b      	ldrb	r3, [r3, #0]
    356a:	3301      	adds	r3, #1
    356c:	b2da      	uxtb	r2, r3
    356e:	4b04      	ldr	r3, [pc, #16]	; (3580 <EIC_Handler+0x5c>)
    3570:	701a      	strb	r2, [r3, #0]
    3572:	4b03      	ldr	r3, [pc, #12]	; (3580 <EIC_Handler+0x5c>)
    3574:	781b      	ldrb	r3, [r3, #0]
    3576:	2b0f      	cmp	r3, #15
    3578:	d9da      	bls.n	3530 <EIC_Handler+0xc>
			}
		}
	}
}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	46bd      	mov	sp, r7
    357e:	bd80      	pop	{r7, pc}
    3580:	2000037c 	.word	0x2000037c
    3584:	000034a5 	.word	0x000034a5
    3588:	000034e9 	.word	0x000034e9
    358c:	20000380 	.word	0x20000380

00003590 <system_gclk_chan_get_config_defaults>:
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    3596:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	2200      	movs	r2, #0
    359c:	701a      	strb	r2, [r3, #0]
}
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	46bd      	mov	sp, r7
    35a2:	b002      	add	sp, #8
    35a4:	bd80      	pop	{r7, pc}
	...

000035a8 <system_apb_clock_set_mask>:
{
    35a8:	b580      	push	{r7, lr}
    35aa:	b082      	sub	sp, #8
    35ac:	af00      	add	r7, sp, #0
    35ae:	0002      	movs	r2, r0
    35b0:	6039      	str	r1, [r7, #0]
    35b2:	1dfb      	adds	r3, r7, #7
    35b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    35b6:	1dfb      	adds	r3, r7, #7
    35b8:	781b      	ldrb	r3, [r3, #0]
    35ba:	2b01      	cmp	r3, #1
    35bc:	d00a      	beq.n	35d4 <system_apb_clock_set_mask+0x2c>
    35be:	2b02      	cmp	r3, #2
    35c0:	d00f      	beq.n	35e2 <system_apb_clock_set_mask+0x3a>
    35c2:	2b00      	cmp	r3, #0
    35c4:	d114      	bne.n	35f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    35c6:	4b0e      	ldr	r3, [pc, #56]	; (3600 <system_apb_clock_set_mask+0x58>)
    35c8:	4a0d      	ldr	r2, [pc, #52]	; (3600 <system_apb_clock_set_mask+0x58>)
    35ca:	6991      	ldr	r1, [r2, #24]
    35cc:	683a      	ldr	r2, [r7, #0]
    35ce:	430a      	orrs	r2, r1
    35d0:	619a      	str	r2, [r3, #24]
			break;
    35d2:	e00f      	b.n	35f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <system_apb_clock_set_mask+0x58>)
    35d6:	4a0a      	ldr	r2, [pc, #40]	; (3600 <system_apb_clock_set_mask+0x58>)
    35d8:	69d1      	ldr	r1, [r2, #28]
    35da:	683a      	ldr	r2, [r7, #0]
    35dc:	430a      	orrs	r2, r1
    35de:	61da      	str	r2, [r3, #28]
			break;
    35e0:	e008      	b.n	35f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    35e2:	4b07      	ldr	r3, [pc, #28]	; (3600 <system_apb_clock_set_mask+0x58>)
    35e4:	4a06      	ldr	r2, [pc, #24]	; (3600 <system_apb_clock_set_mask+0x58>)
    35e6:	6a11      	ldr	r1, [r2, #32]
    35e8:	683a      	ldr	r2, [r7, #0]
    35ea:	430a      	orrs	r2, r1
    35ec:	621a      	str	r2, [r3, #32]
			break;
    35ee:	e001      	b.n	35f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    35f0:	2317      	movs	r3, #23
    35f2:	e000      	b.n	35f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    35f4:	2300      	movs	r3, #0
}
    35f6:	0018      	movs	r0, r3
    35f8:	46bd      	mov	sp, r7
    35fa:	b002      	add	sp, #8
    35fc:	bd80      	pop	{r7, pc}
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	40000400 	.word	0x40000400

00003604 <system_interrupt_enable>:
{
    3604:	b580      	push	{r7, lr}
    3606:	b082      	sub	sp, #8
    3608:	af00      	add	r7, sp, #0
    360a:	0002      	movs	r2, r0
    360c:	1dfb      	adds	r3, r7, #7
    360e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3610:	4b06      	ldr	r3, [pc, #24]	; (362c <system_interrupt_enable+0x28>)
    3612:	1dfa      	adds	r2, r7, #7
    3614:	7812      	ldrb	r2, [r2, #0]
    3616:	0011      	movs	r1, r2
    3618:	221f      	movs	r2, #31
    361a:	400a      	ands	r2, r1
    361c:	2101      	movs	r1, #1
    361e:	4091      	lsls	r1, r2
    3620:	000a      	movs	r2, r1
    3622:	601a      	str	r2, [r3, #0]
}
    3624:	46c0      	nop			; (mov r8, r8)
    3626:	46bd      	mov	sp, r7
    3628:	b002      	add	sp, #8
    362a:	bd80      	pop	{r7, pc}
    362c:	e000e100 	.word	0xe000e100

00003630 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    3630:	b580      	push	{r7, lr}
    3632:	b082      	sub	sp, #8
    3634:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3636:	4b0f      	ldr	r3, [pc, #60]	; (3674 <extint_is_syncing+0x44>)
    3638:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    363a:	2300      	movs	r3, #0
    363c:	607b      	str	r3, [r7, #4]
    363e:	e011      	b.n	3664 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	009b      	lsls	r3, r3, #2
    3644:	2208      	movs	r2, #8
    3646:	4694      	mov	ip, r2
    3648:	44bc      	add	ip, r7
    364a:	4463      	add	r3, ip
    364c:	3b08      	subs	r3, #8
    364e:	681b      	ldr	r3, [r3, #0]
    3650:	785b      	ldrb	r3, [r3, #1]
    3652:	b2db      	uxtb	r3, r3
    3654:	b25b      	sxtb	r3, r3
    3656:	2b00      	cmp	r3, #0
    3658:	da01      	bge.n	365e <extint_is_syncing+0x2e>
			return true;
    365a:	2301      	movs	r3, #1
    365c:	e006      	b.n	366c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	3301      	adds	r3, #1
    3662:	607b      	str	r3, [r7, #4]
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	2b00      	cmp	r3, #0
    3668:	d0ea      	beq.n	3640 <extint_is_syncing+0x10>
		}
	}
	return false;
    366a:	2300      	movs	r3, #0
}
    366c:	0018      	movs	r0, r3
    366e:	46bd      	mov	sp, r7
    3670:	b002      	add	sp, #8
    3672:	bd80      	pop	{r7, pc}
    3674:	40001800 	.word	0x40001800

00003678 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3678:	b580      	push	{r7, lr}
    367a:	b084      	sub	sp, #16
    367c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    367e:	4b2d      	ldr	r3, [pc, #180]	; (3734 <_system_extint_init+0xbc>)
    3680:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3682:	2140      	movs	r1, #64	; 0x40
    3684:	2000      	movs	r0, #0
    3686:	4b2c      	ldr	r3, [pc, #176]	; (3738 <_system_extint_init+0xc0>)
    3688:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    368a:	003b      	movs	r3, r7
    368c:	0018      	movs	r0, r3
    368e:	4b2b      	ldr	r3, [pc, #172]	; (373c <_system_extint_init+0xc4>)
    3690:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3692:	003b      	movs	r3, r7
    3694:	2200      	movs	r2, #0
    3696:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3698:	003b      	movs	r3, r7
    369a:	0019      	movs	r1, r3
    369c:	2005      	movs	r0, #5
    369e:	4b28      	ldr	r3, [pc, #160]	; (3740 <_system_extint_init+0xc8>)
    36a0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    36a2:	2005      	movs	r0, #5
    36a4:	4b27      	ldr	r3, [pc, #156]	; (3744 <_system_extint_init+0xcc>)
    36a6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    36a8:	2300      	movs	r3, #0
    36aa:	60fb      	str	r3, [r7, #12]
    36ac:	e018      	b.n	36e0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    36ae:	68fb      	ldr	r3, [r7, #12]
    36b0:	009b      	lsls	r3, r3, #2
    36b2:	2210      	movs	r2, #16
    36b4:	4694      	mov	ip, r2
    36b6:	44bc      	add	ip, r7
    36b8:	4463      	add	r3, ip
    36ba:	3b0c      	subs	r3, #12
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	68fb      	ldr	r3, [r7, #12]
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	2110      	movs	r1, #16
    36c4:	468c      	mov	ip, r1
    36c6:	44bc      	add	ip, r7
    36c8:	4463      	add	r3, ip
    36ca:	3b0c      	subs	r3, #12
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	b2db      	uxtb	r3, r3
    36d2:	2101      	movs	r1, #1
    36d4:	430b      	orrs	r3, r1
    36d6:	b2db      	uxtb	r3, r3
    36d8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    36da:	68fb      	ldr	r3, [r7, #12]
    36dc:	3301      	adds	r3, #1
    36de:	60fb      	str	r3, [r7, #12]
    36e0:	68fb      	ldr	r3, [r7, #12]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d0e3      	beq.n	36ae <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	4b17      	ldr	r3, [pc, #92]	; (3748 <_system_extint_init+0xd0>)
    36ea:	4798      	blx	r3
    36ec:	1e03      	subs	r3, r0, #0
    36ee:	d1fb      	bne.n	36e8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    36f0:	230b      	movs	r3, #11
    36f2:	18fb      	adds	r3, r7, r3
    36f4:	2200      	movs	r2, #0
    36f6:	701a      	strb	r2, [r3, #0]
    36f8:	e00d      	b.n	3716 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    36fa:	230b      	movs	r3, #11
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	781a      	ldrb	r2, [r3, #0]
    3700:	4b12      	ldr	r3, [pc, #72]	; (374c <_system_extint_init+0xd4>)
    3702:	0092      	lsls	r2, r2, #2
    3704:	2100      	movs	r1, #0
    3706:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3708:	230b      	movs	r3, #11
    370a:	18fb      	adds	r3, r7, r3
    370c:	781a      	ldrb	r2, [r3, #0]
    370e:	230b      	movs	r3, #11
    3710:	18fb      	adds	r3, r7, r3
    3712:	3201      	adds	r2, #1
    3714:	701a      	strb	r2, [r3, #0]
    3716:	230b      	movs	r3, #11
    3718:	18fb      	adds	r3, r7, r3
    371a:	781b      	ldrb	r3, [r3, #0]
    371c:	2b0f      	cmp	r3, #15
    371e:	d9ec      	bls.n	36fa <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3720:	2004      	movs	r0, #4
    3722:	4b0b      	ldr	r3, [pc, #44]	; (3750 <_system_extint_init+0xd8>)
    3724:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3726:	4b0b      	ldr	r3, [pc, #44]	; (3754 <_system_extint_init+0xdc>)
    3728:	4798      	blx	r3
}
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	46bd      	mov	sp, r7
    372e:	b004      	add	sp, #16
    3730:	bd80      	pop	{r7, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	40001800 	.word	0x40001800
    3738:	000035a9 	.word	0x000035a9
    373c:	00003591 	.word	0x00003591
    3740:	000056c5 	.word	0x000056c5
    3744:	00005709 	.word	0x00005709
    3748:	00003631 	.word	0x00003631
    374c:	20000380 	.word	0x20000380
    3750:	00003605 	.word	0x00003605
    3754:	00003759 	.word	0x00003759

00003758 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3758:	b580      	push	{r7, lr}
    375a:	b082      	sub	sp, #8
    375c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    375e:	4b15      	ldr	r3, [pc, #84]	; (37b4 <_extint_enable+0x5c>)
    3760:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3762:	2300      	movs	r3, #0
    3764:	607b      	str	r3, [r7, #4]
    3766:	e018      	b.n	379a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	009b      	lsls	r3, r3, #2
    376c:	2208      	movs	r2, #8
    376e:	4694      	mov	ip, r2
    3770:	44bc      	add	ip, r7
    3772:	4463      	add	r3, ip
    3774:	3b08      	subs	r3, #8
    3776:	681a      	ldr	r2, [r3, #0]
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	009b      	lsls	r3, r3, #2
    377c:	2108      	movs	r1, #8
    377e:	468c      	mov	ip, r1
    3780:	44bc      	add	ip, r7
    3782:	4463      	add	r3, ip
    3784:	3b08      	subs	r3, #8
    3786:	681b      	ldr	r3, [r3, #0]
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	b2db      	uxtb	r3, r3
    378c:	2102      	movs	r1, #2
    378e:	430b      	orrs	r3, r1
    3790:	b2db      	uxtb	r3, r3
    3792:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3794:	687b      	ldr	r3, [r7, #4]
    3796:	3301      	adds	r3, #1
    3798:	607b      	str	r3, [r7, #4]
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	2b00      	cmp	r3, #0
    379e:	d0e3      	beq.n	3768 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    37a0:	46c0      	nop			; (mov r8, r8)
    37a2:	4b05      	ldr	r3, [pc, #20]	; (37b8 <_extint_enable+0x60>)
    37a4:	4798      	blx	r3
    37a6:	1e03      	subs	r3, r0, #0
    37a8:	d1fb      	bne.n	37a2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	46bd      	mov	sp, r7
    37ae:	b002      	add	sp, #8
    37b0:	bd80      	pop	{r7, pc}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	40001800 	.word	0x40001800
    37b8:	00003631 	.word	0x00003631

000037bc <system_pinmux_get_config_defaults>:
{
    37bc:	b580      	push	{r7, lr}
    37be:	b082      	sub	sp, #8
    37c0:	af00      	add	r7, sp, #0
    37c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    37c4:	687b      	ldr	r3, [r7, #4]
    37c6:	2280      	movs	r2, #128	; 0x80
    37c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	2200      	movs	r2, #0
    37ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	2201      	movs	r2, #1
    37d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	2200      	movs	r2, #0
    37da:	70da      	strb	r2, [r3, #3]
}
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	46bd      	mov	sp, r7
    37e0:	b002      	add	sp, #8
    37e2:	bd80      	pop	{r7, pc}

000037e4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    37e4:	b580      	push	{r7, lr}
    37e6:	b084      	sub	sp, #16
    37e8:	af00      	add	r7, sp, #0
    37ea:	0002      	movs	r2, r0
    37ec:	6039      	str	r1, [r7, #0]
    37ee:	1dfb      	adds	r3, r7, #7
    37f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    37f2:	230c      	movs	r3, #12
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	0018      	movs	r0, r3
    37f8:	4b10      	ldr	r3, [pc, #64]	; (383c <port_pin_set_config+0x58>)
    37fa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    37fc:	230c      	movs	r3, #12
    37fe:	18fb      	adds	r3, r7, r3
    3800:	2280      	movs	r2, #128	; 0x80
    3802:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3804:	683b      	ldr	r3, [r7, #0]
    3806:	781a      	ldrb	r2, [r3, #0]
    3808:	230c      	movs	r3, #12
    380a:	18fb      	adds	r3, r7, r3
    380c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    380e:	683b      	ldr	r3, [r7, #0]
    3810:	785a      	ldrb	r2, [r3, #1]
    3812:	230c      	movs	r3, #12
    3814:	18fb      	adds	r3, r7, r3
    3816:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3818:	683b      	ldr	r3, [r7, #0]
    381a:	789a      	ldrb	r2, [r3, #2]
    381c:	230c      	movs	r3, #12
    381e:	18fb      	adds	r3, r7, r3
    3820:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3822:	230c      	movs	r3, #12
    3824:	18fa      	adds	r2, r7, r3
    3826:	1dfb      	adds	r3, r7, #7
    3828:	781b      	ldrb	r3, [r3, #0]
    382a:	0011      	movs	r1, r2
    382c:	0018      	movs	r0, r3
    382e:	4b04      	ldr	r3, [pc, #16]	; (3840 <port_pin_set_config+0x5c>)
    3830:	4798      	blx	r3
}
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	46bd      	mov	sp, r7
    3836:	b004      	add	sp, #16
    3838:	bd80      	pop	{r7, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	000037bd 	.word	0x000037bd
    3840:	000059b1 	.word	0x000059b1

00003844 <system_gclk_chan_get_config_defaults>:
{
    3844:	b580      	push	{r7, lr}
    3846:	b082      	sub	sp, #8
    3848:	af00      	add	r7, sp, #0
    384a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    384c:	687b      	ldr	r3, [r7, #4]
    384e:	2200      	movs	r2, #0
    3850:	701a      	strb	r2, [r3, #0]
}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	46bd      	mov	sp, r7
    3856:	b002      	add	sp, #8
    3858:	bd80      	pop	{r7, pc}

0000385a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    385a:	b5f0      	push	{r4, r5, r6, r7, lr}
    385c:	b08d      	sub	sp, #52	; 0x34
    385e:	af00      	add	r7, sp, #0
    3860:	60b8      	str	r0, [r7, #8]
    3862:	60f9      	str	r1, [r7, #12]
    3864:	603a      	str	r2, [r7, #0]
    3866:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3868:	2300      	movs	r3, #0
    386a:	2400      	movs	r4, #0
    386c:	623b      	str	r3, [r7, #32]
    386e:	627c      	str	r4, [r7, #36]	; 0x24
    3870:	2300      	movs	r3, #0
    3872:	2400      	movs	r4, #0
    3874:	61bb      	str	r3, [r7, #24]
    3876:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3878:	233f      	movs	r3, #63	; 0x3f
    387a:	62fb      	str	r3, [r7, #44]	; 0x2c
    387c:	e053      	b.n	3926 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3880:	3b20      	subs	r3, #32
    3882:	2b00      	cmp	r3, #0
    3884:	db04      	blt.n	3890 <long_division+0x36>
    3886:	2201      	movs	r2, #1
    3888:	409a      	lsls	r2, r3
    388a:	0013      	movs	r3, r2
    388c:	617b      	str	r3, [r7, #20]
    388e:	e00b      	b.n	38a8 <long_division+0x4e>
    3890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3892:	2220      	movs	r2, #32
    3894:	1ad3      	subs	r3, r2, r3
    3896:	2201      	movs	r2, #1
    3898:	40da      	lsrs	r2, r3
    389a:	0013      	movs	r3, r2
    389c:	2100      	movs	r1, #0
    389e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    38a0:	4091      	lsls	r1, r2
    38a2:	000a      	movs	r2, r1
    38a4:	4313      	orrs	r3, r2
    38a6:	617b      	str	r3, [r7, #20]
    38a8:	2201      	movs	r2, #1
    38aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ac:	409a      	lsls	r2, r3
    38ae:	0013      	movs	r3, r2
    38b0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    38b2:	69bb      	ldr	r3, [r7, #24]
    38b4:	69fc      	ldr	r4, [r7, #28]
    38b6:	18db      	adds	r3, r3, r3
    38b8:	4164      	adcs	r4, r4
    38ba:	61bb      	str	r3, [r7, #24]
    38bc:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    38be:	68bb      	ldr	r3, [r7, #8]
    38c0:	693a      	ldr	r2, [r7, #16]
    38c2:	401a      	ands	r2, r3
    38c4:	0015      	movs	r5, r2
    38c6:	68fb      	ldr	r3, [r7, #12]
    38c8:	697a      	ldr	r2, [r7, #20]
    38ca:	401a      	ands	r2, r3
    38cc:	0016      	movs	r6, r2
    38ce:	002b      	movs	r3, r5
    38d0:	4333      	orrs	r3, r6
    38d2:	d007      	beq.n	38e4 <long_division+0x8a>
			r |= 0x01;
    38d4:	69bb      	ldr	r3, [r7, #24]
    38d6:	2201      	movs	r2, #1
    38d8:	4313      	orrs	r3, r2
    38da:	61bb      	str	r3, [r7, #24]
    38dc:	69fb      	ldr	r3, [r7, #28]
    38de:	2200      	movs	r2, #0
    38e0:	4313      	orrs	r3, r2
    38e2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    38e4:	687a      	ldr	r2, [r7, #4]
    38e6:	69fb      	ldr	r3, [r7, #28]
    38e8:	429a      	cmp	r2, r3
    38ea:	d819      	bhi.n	3920 <long_division+0xc6>
    38ec:	687a      	ldr	r2, [r7, #4]
    38ee:	69fb      	ldr	r3, [r7, #28]
    38f0:	429a      	cmp	r2, r3
    38f2:	d103      	bne.n	38fc <long_division+0xa2>
    38f4:	683a      	ldr	r2, [r7, #0]
    38f6:	69bb      	ldr	r3, [r7, #24]
    38f8:	429a      	cmp	r2, r3
    38fa:	d811      	bhi.n	3920 <long_division+0xc6>
			r = r - d;
    38fc:	69b9      	ldr	r1, [r7, #24]
    38fe:	69fa      	ldr	r2, [r7, #28]
    3900:	683b      	ldr	r3, [r7, #0]
    3902:	687c      	ldr	r4, [r7, #4]
    3904:	1ac9      	subs	r1, r1, r3
    3906:	41a2      	sbcs	r2, r4
    3908:	000b      	movs	r3, r1
    390a:	0014      	movs	r4, r2
    390c:	61bb      	str	r3, [r7, #24]
    390e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3910:	6a3a      	ldr	r2, [r7, #32]
    3912:	693b      	ldr	r3, [r7, #16]
    3914:	4313      	orrs	r3, r2
    3916:	623b      	str	r3, [r7, #32]
    3918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    391a:	697b      	ldr	r3, [r7, #20]
    391c:	4313      	orrs	r3, r2
    391e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3922:	3b01      	subs	r3, #1
    3924:	62fb      	str	r3, [r7, #44]	; 0x2c
    3926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3928:	2b00      	cmp	r3, #0
    392a:	daa8      	bge.n	387e <long_division+0x24>
		}
	}

	return q;
    392c:	6a3b      	ldr	r3, [r7, #32]
    392e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3930:	0018      	movs	r0, r3
    3932:	0021      	movs	r1, r4
    3934:	46bd      	mov	sp, r7
    3936:	b00d      	add	sp, #52	; 0x34
    3938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000393a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    393a:	b580      	push	{r7, lr}
    393c:	b086      	sub	sp, #24
    393e:	af00      	add	r7, sp, #0
    3940:	60f8      	str	r0, [r7, #12]
    3942:	60b9      	str	r1, [r7, #8]
    3944:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3946:	2316      	movs	r3, #22
    3948:	18fb      	adds	r3, r7, r3
    394a:	2200      	movs	r2, #0
    394c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    394e:	68bb      	ldr	r3, [r7, #8]
    3950:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3952:	68bb      	ldr	r3, [r7, #8]
    3954:	085a      	lsrs	r2, r3, #1
    3956:	68fb      	ldr	r3, [r7, #12]
    3958:	429a      	cmp	r2, r3
    395a:	d201      	bcs.n	3960 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    395c:	2340      	movs	r3, #64	; 0x40
    395e:	e026      	b.n	39ae <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3960:	68bb      	ldr	r3, [r7, #8]
    3962:	085b      	lsrs	r3, r3, #1
    3964:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3966:	e00a      	b.n	397e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3968:	693a      	ldr	r2, [r7, #16]
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	1ad3      	subs	r3, r2, r3
    396e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3970:	2316      	movs	r3, #22
    3972:	18fb      	adds	r3, r7, r3
    3974:	881a      	ldrh	r2, [r3, #0]
    3976:	2316      	movs	r3, #22
    3978:	18fb      	adds	r3, r7, r3
    397a:	3201      	adds	r2, #1
    397c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    397e:	693a      	ldr	r2, [r7, #16]
    3980:	68fb      	ldr	r3, [r7, #12]
    3982:	429a      	cmp	r2, r3
    3984:	d2f0      	bcs.n	3968 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3986:	2316      	movs	r3, #22
    3988:	18fb      	adds	r3, r7, r3
    398a:	2216      	movs	r2, #22
    398c:	18ba      	adds	r2, r7, r2
    398e:	8812      	ldrh	r2, [r2, #0]
    3990:	3a01      	subs	r2, #1
    3992:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3994:	2316      	movs	r3, #22
    3996:	18fb      	adds	r3, r7, r3
    3998:	881b      	ldrh	r3, [r3, #0]
    399a:	2bff      	cmp	r3, #255	; 0xff
    399c:	d901      	bls.n	39a2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    399e:	2340      	movs	r3, #64	; 0x40
    39a0:	e005      	b.n	39ae <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	2216      	movs	r2, #22
    39a6:	18ba      	adds	r2, r7, r2
    39a8:	8812      	ldrh	r2, [r2, #0]
    39aa:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    39ac:	2300      	movs	r3, #0
	}
}
    39ae:	0018      	movs	r0, r3
    39b0:	46bd      	mov	sp, r7
    39b2:	b006      	add	sp, #24
    39b4:	bd80      	pop	{r7, pc}
	...

000039b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    39b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ba:	b0a1      	sub	sp, #132	; 0x84
    39bc:	af00      	add	r7, sp, #0
    39be:	64f8      	str	r0, [r7, #76]	; 0x4c
    39c0:	64b9      	str	r1, [r7, #72]	; 0x48
    39c2:	647a      	str	r2, [r7, #68]	; 0x44
    39c4:	2243      	movs	r2, #67	; 0x43
    39c6:	18ba      	adds	r2, r7, r2
    39c8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    39ca:	2300      	movs	r3, #0
    39cc:	2400      	movs	r4, #0
    39ce:	673b      	str	r3, [r7, #112]	; 0x70
    39d0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    39d2:	2300      	movs	r3, #0
    39d4:	2400      	movs	r4, #0
    39d6:	66bb      	str	r3, [r7, #104]	; 0x68
    39d8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    39da:	2300      	movs	r3, #0
    39dc:	2400      	movs	r4, #0
    39de:	67bb      	str	r3, [r7, #120]	; 0x78
    39e0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    39e2:	2300      	movs	r3, #0
    39e4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    39e6:	2358      	movs	r3, #88	; 0x58
    39e8:	2240      	movs	r2, #64	; 0x40
    39ea:	4694      	mov	ip, r2
    39ec:	44bc      	add	ip, r7
    39ee:	4463      	add	r3, ip
    39f0:	781a      	ldrb	r2, [r3, #0]
    39f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    39f4:	435a      	muls	r2, r3
    39f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39f8:	429a      	cmp	r2, r3
    39fa:	d901      	bls.n	3a00 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39fc:	2340      	movs	r3, #64	; 0x40
    39fe:	e0b3      	b.n	3b68 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3a00:	2343      	movs	r3, #67	; 0x43
    3a02:	18fb      	adds	r3, r7, r3
    3a04:	781b      	ldrb	r3, [r3, #0]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d13d      	bne.n	3a86 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3a0a:	2358      	movs	r3, #88	; 0x58
    3a0c:	2240      	movs	r2, #64	; 0x40
    3a0e:	4694      	mov	ip, r2
    3a10:	44bc      	add	ip, r7
    3a12:	4463      	add	r3, ip
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	b2db      	uxtb	r3, r3
    3a18:	613b      	str	r3, [r7, #16]
    3a1a:	2300      	movs	r3, #0
    3a1c:	617b      	str	r3, [r7, #20]
    3a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a20:	60bb      	str	r3, [r7, #8]
    3a22:	2300      	movs	r3, #0
    3a24:	60fb      	str	r3, [r7, #12]
    3a26:	4c52      	ldr	r4, [pc, #328]	; (3b70 <_sercom_get_async_baud_val+0x1b8>)
    3a28:	68ba      	ldr	r2, [r7, #8]
    3a2a:	68fb      	ldr	r3, [r7, #12]
    3a2c:	6938      	ldr	r0, [r7, #16]
    3a2e:	6979      	ldr	r1, [r7, #20]
    3a30:	47a0      	blx	r4
    3a32:	0003      	movs	r3, r0
    3a34:	000c      	movs	r4, r1
    3a36:	001b      	movs	r3, r3
    3a38:	65fb      	str	r3, [r7, #92]	; 0x5c
    3a3a:	2300      	movs	r3, #0
    3a3c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a40:	603b      	str	r3, [r7, #0]
    3a42:	2300      	movs	r3, #0
    3a44:	607b      	str	r3, [r7, #4]
    3a46:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3a48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3a4a:	683a      	ldr	r2, [r7, #0]
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	4c49      	ldr	r4, [pc, #292]	; (3b74 <_sercom_get_async_baud_val+0x1bc>)
    3a50:	47a0      	blx	r4
    3a52:	0003      	movs	r3, r0
    3a54:	000c      	movs	r4, r1
    3a56:	673b      	str	r3, [r7, #112]	; 0x70
    3a58:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3a5a:	2100      	movs	r1, #0
    3a5c:	2201      	movs	r2, #1
    3a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3a60:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3a62:	1ac9      	subs	r1, r1, r3
    3a64:	41a2      	sbcs	r2, r4
    3a66:	000b      	movs	r3, r1
    3a68:	0014      	movs	r4, r2
    3a6a:	66bb      	str	r3, [r7, #104]	; 0x68
    3a6c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a70:	0c1b      	lsrs	r3, r3, #16
    3a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3a74:	0416      	lsls	r6, r2, #16
    3a76:	431e      	orrs	r6, r3
    3a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3a7a:	041d      	lsls	r5, r3, #16
    3a7c:	0033      	movs	r3, r6
    3a7e:	67bb      	str	r3, [r7, #120]	; 0x78
    3a80:	2300      	movs	r3, #0
    3a82:	67fb      	str	r3, [r7, #124]	; 0x7c
    3a84:	e06a      	b.n	3b5c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3a86:	2343      	movs	r3, #67	; 0x43
    3a88:	18fb      	adds	r3, r7, r3
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	2b01      	cmp	r3, #1
    3a8e:	d165      	bne.n	3b5c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a92:	633b      	str	r3, [r7, #48]	; 0x30
    3a94:	2300      	movs	r3, #0
    3a96:	637b      	str	r3, [r7, #52]	; 0x34
    3a98:	2358      	movs	r3, #88	; 0x58
    3a9a:	2240      	movs	r2, #64	; 0x40
    3a9c:	4694      	mov	ip, r2
    3a9e:	44bc      	add	ip, r7
    3aa0:	4463      	add	r3, ip
    3aa2:	781b      	ldrb	r3, [r3, #0]
    3aa4:	b2db      	uxtb	r3, r3
    3aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    3aa8:	2300      	movs	r3, #0
    3aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    3aac:	4c30      	ldr	r4, [pc, #192]	; (3b70 <_sercom_get_async_baud_val+0x1b8>)
    3aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3ab4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3ab6:	47a0      	blx	r4
    3ab8:	0003      	movs	r3, r0
    3aba:	000c      	movs	r4, r1
    3abc:	65bb      	str	r3, [r7, #88]	; 0x58
    3abe:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ac2:	623b      	str	r3, [r7, #32]
    3ac4:	2300      	movs	r3, #0
    3ac6:	627b      	str	r3, [r7, #36]	; 0x24
    3ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3aca:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3acc:	001a      	movs	r2, r3
    3ace:	0023      	movs	r3, r4
    3ad0:	6a38      	ldr	r0, [r7, #32]
    3ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3ad4:	4c27      	ldr	r4, [pc, #156]	; (3b74 <_sercom_get_async_baud_val+0x1bc>)
    3ad6:	47a0      	blx	r4
    3ad8:	0003      	movs	r3, r0
    3ada:	000c      	movs	r4, r1
    3adc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3ae0:	2380      	movs	r3, #128	; 0x80
    3ae2:	019b      	lsls	r3, r3, #6
    3ae4:	429a      	cmp	r2, r3
    3ae6:	d901      	bls.n	3aec <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3ae8:	2340      	movs	r3, #64	; 0x40
    3aea:	e03d      	b.n	3b68 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3aee:	61bb      	str	r3, [r7, #24]
    3af0:	2300      	movs	r3, #0
    3af2:	61fb      	str	r3, [r7, #28]
    3af4:	69b9      	ldr	r1, [r7, #24]
    3af6:	69fa      	ldr	r2, [r7, #28]
    3af8:	000b      	movs	r3, r1
    3afa:	0f5b      	lsrs	r3, r3, #29
    3afc:	0010      	movs	r0, r2
    3afe:	00c0      	lsls	r0, r0, #3
    3b00:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3b04:	4318      	orrs	r0, r3
    3b06:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b08:	000b      	movs	r3, r1
    3b0a:	00db      	lsls	r3, r3, #3
    3b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    3b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b10:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b12:	001a      	movs	r2, r3
    3b14:	0023      	movs	r3, r4
    3b16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b1a:	4c16      	ldr	r4, [pc, #88]	; (3b74 <_sercom_get_async_baud_val+0x1bc>)
    3b1c:	47a0      	blx	r4
    3b1e:	0003      	movs	r3, r0
    3b20:	000c      	movs	r4, r1
    3b22:	65bb      	str	r3, [r7, #88]	; 0x58
    3b24:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b28:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b2a:	b2d9      	uxtb	r1, r3
    3b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b2e:	b2db      	uxtb	r3, r3
    3b30:	00db      	lsls	r3, r3, #3
    3b32:	b2da      	uxtb	r2, r3
    3b34:	2317      	movs	r3, #23
    3b36:	2040      	movs	r0, #64	; 0x40
    3b38:	4684      	mov	ip, r0
    3b3a:	44bc      	add	ip, r7
    3b3c:	4463      	add	r3, ip
    3b3e:	1a8a      	subs	r2, r1, r2
    3b40:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3b42:	2317      	movs	r3, #23
    3b44:	2240      	movs	r2, #64	; 0x40
    3b46:	4694      	mov	ip, r2
    3b48:	44bc      	add	ip, r7
    3b4a:	4463      	add	r3, ip
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	035b      	lsls	r3, r3, #13
    3b50:	001a      	movs	r2, r3
    3b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b54:	4313      	orrs	r3, r2
    3b56:	67bb      	str	r3, [r7, #120]	; 0x78
    3b58:	2300      	movs	r3, #0
    3b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3b5e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3b60:	b29a      	uxth	r2, r3
    3b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b64:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3b66:	2300      	movs	r3, #0
}
    3b68:	0018      	movs	r0, r3
    3b6a:	46bd      	mov	sp, r7
    3b6c:	b021      	add	sp, #132	; 0x84
    3b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b70:	000066fd 	.word	0x000066fd
    3b74:	0000385b 	.word	0x0000385b

00003b78 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b084      	sub	sp, #16
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	0002      	movs	r2, r0
    3b80:	1dfb      	adds	r3, r7, #7
    3b82:	701a      	strb	r2, [r3, #0]
    3b84:	1dbb      	adds	r3, r7, #6
    3b86:	1c0a      	adds	r2, r1, #0
    3b88:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3b8a:	4b1a      	ldr	r3, [pc, #104]	; (3bf4 <sercom_set_gclk_generator+0x7c>)
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	2201      	movs	r2, #1
    3b90:	4053      	eors	r3, r2
    3b92:	b2db      	uxtb	r3, r3
    3b94:	2b00      	cmp	r3, #0
    3b96:	d103      	bne.n	3ba0 <sercom_set_gclk_generator+0x28>
    3b98:	1dbb      	adds	r3, r7, #6
    3b9a:	781b      	ldrb	r3, [r3, #0]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d01b      	beq.n	3bd8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3ba0:	230c      	movs	r3, #12
    3ba2:	18fb      	adds	r3, r7, r3
    3ba4:	0018      	movs	r0, r3
    3ba6:	4b14      	ldr	r3, [pc, #80]	; (3bf8 <sercom_set_gclk_generator+0x80>)
    3ba8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3baa:	230c      	movs	r3, #12
    3bac:	18fb      	adds	r3, r7, r3
    3bae:	1dfa      	adds	r2, r7, #7
    3bb0:	7812      	ldrb	r2, [r2, #0]
    3bb2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3bb4:	230c      	movs	r3, #12
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	0019      	movs	r1, r3
    3bba:	2013      	movs	r0, #19
    3bbc:	4b0f      	ldr	r3, [pc, #60]	; (3bfc <sercom_set_gclk_generator+0x84>)
    3bbe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3bc0:	2013      	movs	r0, #19
    3bc2:	4b0f      	ldr	r3, [pc, #60]	; (3c00 <sercom_set_gclk_generator+0x88>)
    3bc4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3bc6:	4b0b      	ldr	r3, [pc, #44]	; (3bf4 <sercom_set_gclk_generator+0x7c>)
    3bc8:	1dfa      	adds	r2, r7, #7
    3bca:	7812      	ldrb	r2, [r2, #0]
    3bcc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3bce:	4b09      	ldr	r3, [pc, #36]	; (3bf4 <sercom_set_gclk_generator+0x7c>)
    3bd0:	2201      	movs	r2, #1
    3bd2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3bd4:	2300      	movs	r3, #0
    3bd6:	e008      	b.n	3bea <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3bd8:	4b06      	ldr	r3, [pc, #24]	; (3bf4 <sercom_set_gclk_generator+0x7c>)
    3bda:	785b      	ldrb	r3, [r3, #1]
    3bdc:	1dfa      	adds	r2, r7, #7
    3bde:	7812      	ldrb	r2, [r2, #0]
    3be0:	429a      	cmp	r2, r3
    3be2:	d101      	bne.n	3be8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3be4:	2300      	movs	r3, #0
    3be6:	e000      	b.n	3bea <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3be8:	231d      	movs	r3, #29
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b004      	add	sp, #16
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	20000268 	.word	0x20000268
    3bf8:	00003845 	.word	0x00003845
    3bfc:	000056c5 	.word	0x000056c5
    3c00:	00005709 	.word	0x00005709

00003c04 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
    3c0c:	000a      	movs	r2, r1
    3c0e:	1cfb      	adds	r3, r7, #3
    3c10:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	4a4d      	ldr	r2, [pc, #308]	; (3d4c <_sercom_get_default_pad+0x148>)
    3c16:	4293      	cmp	r3, r2
    3c18:	d03f      	beq.n	3c9a <_sercom_get_default_pad+0x96>
    3c1a:	4a4c      	ldr	r2, [pc, #304]	; (3d4c <_sercom_get_default_pad+0x148>)
    3c1c:	4293      	cmp	r3, r2
    3c1e:	d806      	bhi.n	3c2e <_sercom_get_default_pad+0x2a>
    3c20:	4a4b      	ldr	r2, [pc, #300]	; (3d50 <_sercom_get_default_pad+0x14c>)
    3c22:	4293      	cmp	r3, r2
    3c24:	d00f      	beq.n	3c46 <_sercom_get_default_pad+0x42>
    3c26:	4a4b      	ldr	r2, [pc, #300]	; (3d54 <_sercom_get_default_pad+0x150>)
    3c28:	4293      	cmp	r3, r2
    3c2a:	d021      	beq.n	3c70 <_sercom_get_default_pad+0x6c>
    3c2c:	e089      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3c2e:	4a4a      	ldr	r2, [pc, #296]	; (3d58 <_sercom_get_default_pad+0x154>)
    3c30:	4293      	cmp	r3, r2
    3c32:	d100      	bne.n	3c36 <_sercom_get_default_pad+0x32>
    3c34:	e05b      	b.n	3cee <_sercom_get_default_pad+0xea>
    3c36:	4a49      	ldr	r2, [pc, #292]	; (3d5c <_sercom_get_default_pad+0x158>)
    3c38:	4293      	cmp	r3, r2
    3c3a:	d100      	bne.n	3c3e <_sercom_get_default_pad+0x3a>
    3c3c:	e06c      	b.n	3d18 <_sercom_get_default_pad+0x114>
    3c3e:	4a48      	ldr	r2, [pc, #288]	; (3d60 <_sercom_get_default_pad+0x15c>)
    3c40:	4293      	cmp	r3, r2
    3c42:	d03f      	beq.n	3cc4 <_sercom_get_default_pad+0xc0>
    3c44:	e07d      	b.n	3d42 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c46:	1cfb      	adds	r3, r7, #3
    3c48:	781b      	ldrb	r3, [r3, #0]
    3c4a:	2b01      	cmp	r3, #1
    3c4c:	d00a      	beq.n	3c64 <_sercom_get_default_pad+0x60>
    3c4e:	dc02      	bgt.n	3c56 <_sercom_get_default_pad+0x52>
    3c50:	2b00      	cmp	r3, #0
    3c52:	d005      	beq.n	3c60 <_sercom_get_default_pad+0x5c>
    3c54:	e075      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3c56:	2b02      	cmp	r3, #2
    3c58:	d006      	beq.n	3c68 <_sercom_get_default_pad+0x64>
    3c5a:	2b03      	cmp	r3, #3
    3c5c:	d006      	beq.n	3c6c <_sercom_get_default_pad+0x68>
    3c5e:	e070      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3c60:	4b40      	ldr	r3, [pc, #256]	; (3d64 <_sercom_get_default_pad+0x160>)
    3c62:	e06f      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c64:	4b40      	ldr	r3, [pc, #256]	; (3d68 <_sercom_get_default_pad+0x164>)
    3c66:	e06d      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c68:	4b40      	ldr	r3, [pc, #256]	; (3d6c <_sercom_get_default_pad+0x168>)
    3c6a:	e06b      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c6c:	4b40      	ldr	r3, [pc, #256]	; (3d70 <_sercom_get_default_pad+0x16c>)
    3c6e:	e069      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c70:	1cfb      	adds	r3, r7, #3
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	2b01      	cmp	r3, #1
    3c76:	d00a      	beq.n	3c8e <_sercom_get_default_pad+0x8a>
    3c78:	dc02      	bgt.n	3c80 <_sercom_get_default_pad+0x7c>
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d005      	beq.n	3c8a <_sercom_get_default_pad+0x86>
    3c7e:	e060      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3c80:	2b02      	cmp	r3, #2
    3c82:	d006      	beq.n	3c92 <_sercom_get_default_pad+0x8e>
    3c84:	2b03      	cmp	r3, #3
    3c86:	d006      	beq.n	3c96 <_sercom_get_default_pad+0x92>
    3c88:	e05b      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3c8a:	2303      	movs	r3, #3
    3c8c:	e05a      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c8e:	4b39      	ldr	r3, [pc, #228]	; (3d74 <_sercom_get_default_pad+0x170>)
    3c90:	e058      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c92:	4b39      	ldr	r3, [pc, #228]	; (3d78 <_sercom_get_default_pad+0x174>)
    3c94:	e056      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c96:	4b39      	ldr	r3, [pc, #228]	; (3d7c <_sercom_get_default_pad+0x178>)
    3c98:	e054      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3c9a:	1cfb      	adds	r3, r7, #3
    3c9c:	781b      	ldrb	r3, [r3, #0]
    3c9e:	2b01      	cmp	r3, #1
    3ca0:	d00a      	beq.n	3cb8 <_sercom_get_default_pad+0xb4>
    3ca2:	dc02      	bgt.n	3caa <_sercom_get_default_pad+0xa6>
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d005      	beq.n	3cb4 <_sercom_get_default_pad+0xb0>
    3ca8:	e04b      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3caa:	2b02      	cmp	r3, #2
    3cac:	d006      	beq.n	3cbc <_sercom_get_default_pad+0xb8>
    3cae:	2b03      	cmp	r3, #3
    3cb0:	d006      	beq.n	3cc0 <_sercom_get_default_pad+0xbc>
    3cb2:	e046      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3cb4:	4b32      	ldr	r3, [pc, #200]	; (3d80 <_sercom_get_default_pad+0x17c>)
    3cb6:	e045      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cb8:	4b32      	ldr	r3, [pc, #200]	; (3d84 <_sercom_get_default_pad+0x180>)
    3cba:	e043      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cbc:	4b32      	ldr	r3, [pc, #200]	; (3d88 <_sercom_get_default_pad+0x184>)
    3cbe:	e041      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cc0:	4b32      	ldr	r3, [pc, #200]	; (3d8c <_sercom_get_default_pad+0x188>)
    3cc2:	e03f      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cc4:	1cfb      	adds	r3, r7, #3
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	2b01      	cmp	r3, #1
    3cca:	d00a      	beq.n	3ce2 <_sercom_get_default_pad+0xde>
    3ccc:	dc02      	bgt.n	3cd4 <_sercom_get_default_pad+0xd0>
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d005      	beq.n	3cde <_sercom_get_default_pad+0xda>
    3cd2:	e036      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3cd4:	2b02      	cmp	r3, #2
    3cd6:	d006      	beq.n	3ce6 <_sercom_get_default_pad+0xe2>
    3cd8:	2b03      	cmp	r3, #3
    3cda:	d006      	beq.n	3cea <_sercom_get_default_pad+0xe6>
    3cdc:	e031      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3cde:	4b2c      	ldr	r3, [pc, #176]	; (3d90 <_sercom_get_default_pad+0x18c>)
    3ce0:	e030      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3ce2:	4b2c      	ldr	r3, [pc, #176]	; (3d94 <_sercom_get_default_pad+0x190>)
    3ce4:	e02e      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3ce6:	4b2c      	ldr	r3, [pc, #176]	; (3d98 <_sercom_get_default_pad+0x194>)
    3ce8:	e02c      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cea:	4b2c      	ldr	r3, [pc, #176]	; (3d9c <_sercom_get_default_pad+0x198>)
    3cec:	e02a      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3cee:	1cfb      	adds	r3, r7, #3
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	2b01      	cmp	r3, #1
    3cf4:	d00a      	beq.n	3d0c <_sercom_get_default_pad+0x108>
    3cf6:	dc02      	bgt.n	3cfe <_sercom_get_default_pad+0xfa>
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d005      	beq.n	3d08 <_sercom_get_default_pad+0x104>
    3cfc:	e021      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3cfe:	2b02      	cmp	r3, #2
    3d00:	d006      	beq.n	3d10 <_sercom_get_default_pad+0x10c>
    3d02:	2b03      	cmp	r3, #3
    3d04:	d006      	beq.n	3d14 <_sercom_get_default_pad+0x110>
    3d06:	e01c      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3d08:	4b25      	ldr	r3, [pc, #148]	; (3da0 <_sercom_get_default_pad+0x19c>)
    3d0a:	e01b      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d0c:	4b25      	ldr	r3, [pc, #148]	; (3da4 <_sercom_get_default_pad+0x1a0>)
    3d0e:	e019      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d10:	4b25      	ldr	r3, [pc, #148]	; (3da8 <_sercom_get_default_pad+0x1a4>)
    3d12:	e017      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d14:	4b25      	ldr	r3, [pc, #148]	; (3dac <_sercom_get_default_pad+0x1a8>)
    3d16:	e015      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d18:	1cfb      	adds	r3, r7, #3
    3d1a:	781b      	ldrb	r3, [r3, #0]
    3d1c:	2b01      	cmp	r3, #1
    3d1e:	d00a      	beq.n	3d36 <_sercom_get_default_pad+0x132>
    3d20:	dc02      	bgt.n	3d28 <_sercom_get_default_pad+0x124>
    3d22:	2b00      	cmp	r3, #0
    3d24:	d005      	beq.n	3d32 <_sercom_get_default_pad+0x12e>
    3d26:	e00c      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3d28:	2b02      	cmp	r3, #2
    3d2a:	d006      	beq.n	3d3a <_sercom_get_default_pad+0x136>
    3d2c:	2b03      	cmp	r3, #3
    3d2e:	d006      	beq.n	3d3e <_sercom_get_default_pad+0x13a>
    3d30:	e007      	b.n	3d42 <_sercom_get_default_pad+0x13e>
    3d32:	4b1f      	ldr	r3, [pc, #124]	; (3db0 <_sercom_get_default_pad+0x1ac>)
    3d34:	e006      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d36:	4b1f      	ldr	r3, [pc, #124]	; (3db4 <_sercom_get_default_pad+0x1b0>)
    3d38:	e004      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d3a:	4b1f      	ldr	r3, [pc, #124]	; (3db8 <_sercom_get_default_pad+0x1b4>)
    3d3c:	e002      	b.n	3d44 <_sercom_get_default_pad+0x140>
    3d3e:	4b1f      	ldr	r3, [pc, #124]	; (3dbc <_sercom_get_default_pad+0x1b8>)
    3d40:	e000      	b.n	3d44 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3d42:	2300      	movs	r3, #0
}
    3d44:	0018      	movs	r0, r3
    3d46:	46bd      	mov	sp, r7
    3d48:	b002      	add	sp, #8
    3d4a:	bd80      	pop	{r7, pc}
    3d4c:	42001000 	.word	0x42001000
    3d50:	42000800 	.word	0x42000800
    3d54:	42000c00 	.word	0x42000c00
    3d58:	42001800 	.word	0x42001800
    3d5c:	42001c00 	.word	0x42001c00
    3d60:	42001400 	.word	0x42001400
    3d64:	00040003 	.word	0x00040003
    3d68:	00050003 	.word	0x00050003
    3d6c:	00060003 	.word	0x00060003
    3d70:	00070003 	.word	0x00070003
    3d74:	00010003 	.word	0x00010003
    3d78:	001e0003 	.word	0x001e0003
    3d7c:	001f0003 	.word	0x001f0003
    3d80:	00080003 	.word	0x00080003
    3d84:	00090003 	.word	0x00090003
    3d88:	000a0003 	.word	0x000a0003
    3d8c:	000b0003 	.word	0x000b0003
    3d90:	00100003 	.word	0x00100003
    3d94:	00110003 	.word	0x00110003
    3d98:	00120003 	.word	0x00120003
    3d9c:	00130003 	.word	0x00130003
    3da0:	000c0003 	.word	0x000c0003
    3da4:	000d0003 	.word	0x000d0003
    3da8:	000e0003 	.word	0x000e0003
    3dac:	000f0003 	.word	0x000f0003
    3db0:	00160003 	.word	0x00160003
    3db4:	00170003 	.word	0x00170003
    3db8:	00180003 	.word	0x00180003
    3dbc:	00190003 	.word	0x00190003

00003dc0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3dc0:	b590      	push	{r4, r7, lr}
    3dc2:	b08b      	sub	sp, #44	; 0x2c
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3dc8:	230c      	movs	r3, #12
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	4a0f      	ldr	r2, [pc, #60]	; (3e0c <_sercom_get_sercom_inst_index+0x4c>)
    3dce:	ca13      	ldmia	r2!, {r0, r1, r4}
    3dd0:	c313      	stmia	r3!, {r0, r1, r4}
    3dd2:	ca13      	ldmia	r2!, {r0, r1, r4}
    3dd4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3dd6:	2300      	movs	r3, #0
    3dd8:	627b      	str	r3, [r7, #36]	; 0x24
    3dda:	e00e      	b.n	3dfa <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3ddc:	230c      	movs	r3, #12
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3de2:	0092      	lsls	r2, r2, #2
    3de4:	58d3      	ldr	r3, [r2, r3]
    3de6:	001a      	movs	r2, r3
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	429a      	cmp	r2, r3
    3dec:	d102      	bne.n	3df4 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3df0:	b2db      	uxtb	r3, r3
    3df2:	e006      	b.n	3e02 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3df6:	3301      	adds	r3, #1
    3df8:	627b      	str	r3, [r7, #36]	; 0x24
    3dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3dfc:	2b05      	cmp	r3, #5
    3dfe:	d9ed      	bls.n	3ddc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e00:	2300      	movs	r3, #0
}
    3e02:	0018      	movs	r0, r3
    3e04:	46bd      	mov	sp, r7
    3e06:	b00b      	add	sp, #44	; 0x2c
    3e08:	bd90      	pop	{r4, r7, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	0000a4f8 	.word	0x0000a4f8

00003e10 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b082      	sub	sp, #8
    3e14:	af00      	add	r7, sp, #0
    3e16:	0002      	movs	r2, r0
    3e18:	1dfb      	adds	r3, r7, #7
    3e1a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3e1c:	46c0      	nop			; (mov r8, r8)
    3e1e:	46bd      	mov	sp, r7
    3e20:	b002      	add	sp, #8
    3e22:	bd80      	pop	{r7, pc}

00003e24 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b084      	sub	sp, #16
    3e28:	af00      	add	r7, sp, #0
    3e2a:	0002      	movs	r2, r0
    3e2c:	6039      	str	r1, [r7, #0]
    3e2e:	1dfb      	adds	r3, r7, #7
    3e30:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3e32:	4b13      	ldr	r3, [pc, #76]	; (3e80 <_sercom_set_handler+0x5c>)
    3e34:	781b      	ldrb	r3, [r3, #0]
    3e36:	2201      	movs	r2, #1
    3e38:	4053      	eors	r3, r2
    3e3a:	b2db      	uxtb	r3, r3
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d015      	beq.n	3e6c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e40:	2300      	movs	r3, #0
    3e42:	60fb      	str	r3, [r7, #12]
    3e44:	e00c      	b.n	3e60 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3e46:	4b0f      	ldr	r3, [pc, #60]	; (3e84 <_sercom_set_handler+0x60>)
    3e48:	68fa      	ldr	r2, [r7, #12]
    3e4a:	0092      	lsls	r2, r2, #2
    3e4c:	490e      	ldr	r1, [pc, #56]	; (3e88 <_sercom_set_handler+0x64>)
    3e4e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3e50:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <_sercom_set_handler+0x68>)
    3e52:	68fa      	ldr	r2, [r7, #12]
    3e54:	0092      	lsls	r2, r2, #2
    3e56:	2100      	movs	r1, #0
    3e58:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e5a:	68fb      	ldr	r3, [r7, #12]
    3e5c:	3301      	adds	r3, #1
    3e5e:	60fb      	str	r3, [r7, #12]
    3e60:	68fb      	ldr	r3, [r7, #12]
    3e62:	2b05      	cmp	r3, #5
    3e64:	d9ef      	bls.n	3e46 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3e66:	4b06      	ldr	r3, [pc, #24]	; (3e80 <_sercom_set_handler+0x5c>)
    3e68:	2201      	movs	r2, #1
    3e6a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3e6c:	1dfb      	adds	r3, r7, #7
    3e6e:	781a      	ldrb	r2, [r3, #0]
    3e70:	4b04      	ldr	r3, [pc, #16]	; (3e84 <_sercom_set_handler+0x60>)
    3e72:	0092      	lsls	r2, r2, #2
    3e74:	6839      	ldr	r1, [r7, #0]
    3e76:	50d1      	str	r1, [r2, r3]
}
    3e78:	46c0      	nop			; (mov r8, r8)
    3e7a:	46bd      	mov	sp, r7
    3e7c:	b004      	add	sp, #16
    3e7e:	bd80      	pop	{r7, pc}
    3e80:	2000026a 	.word	0x2000026a
    3e84:	2000026c 	.word	0x2000026c
    3e88:	00003e11 	.word	0x00003e11
    3e8c:	200003c0 	.word	0x200003c0

00003e90 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3e90:	b590      	push	{r4, r7, lr}
    3e92:	b085      	sub	sp, #20
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3e98:	2308      	movs	r3, #8
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	4a0b      	ldr	r2, [pc, #44]	; (3ecc <_sercom_get_interrupt_vector+0x3c>)
    3e9e:	6811      	ldr	r1, [r2, #0]
    3ea0:	6019      	str	r1, [r3, #0]
    3ea2:	8892      	ldrh	r2, [r2, #4]
    3ea4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3ea6:	230f      	movs	r3, #15
    3ea8:	18fc      	adds	r4, r7, r3
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	0018      	movs	r0, r3
    3eae:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <_sercom_get_interrupt_vector+0x40>)
    3eb0:	4798      	blx	r3
    3eb2:	0003      	movs	r3, r0
    3eb4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3eb6:	230f      	movs	r3, #15
    3eb8:	18fb      	adds	r3, r7, r3
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	2208      	movs	r2, #8
    3ebe:	18ba      	adds	r2, r7, r2
    3ec0:	5cd3      	ldrb	r3, [r2, r3]
    3ec2:	b25b      	sxtb	r3, r3
}
    3ec4:	0018      	movs	r0, r3
    3ec6:	46bd      	mov	sp, r7
    3ec8:	b005      	add	sp, #20
    3eca:	bd90      	pop	{r4, r7, pc}
    3ecc:	0000a510 	.word	0x0000a510
    3ed0:	00003dc1 	.word	0x00003dc1

00003ed4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3ed4:	b580      	push	{r7, lr}
    3ed6:	af00      	add	r7, sp, #0
    3ed8:	4b03      	ldr	r3, [pc, #12]	; (3ee8 <SERCOM0_Handler+0x14>)
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	2000      	movs	r0, #0
    3ede:	4798      	blx	r3
    3ee0:	46c0      	nop			; (mov r8, r8)
    3ee2:	46bd      	mov	sp, r7
    3ee4:	bd80      	pop	{r7, pc}
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	2000026c 	.word	0x2000026c

00003eec <SERCOM1_Handler>:
    3eec:	b580      	push	{r7, lr}
    3eee:	af00      	add	r7, sp, #0
    3ef0:	4b03      	ldr	r3, [pc, #12]	; (3f00 <SERCOM1_Handler+0x14>)
    3ef2:	685b      	ldr	r3, [r3, #4]
    3ef4:	2001      	movs	r0, #1
    3ef6:	4798      	blx	r3
    3ef8:	46c0      	nop			; (mov r8, r8)
    3efa:	46bd      	mov	sp, r7
    3efc:	bd80      	pop	{r7, pc}
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	2000026c 	.word	0x2000026c

00003f04 <SERCOM2_Handler>:
    3f04:	b580      	push	{r7, lr}
    3f06:	af00      	add	r7, sp, #0
    3f08:	4b03      	ldr	r3, [pc, #12]	; (3f18 <SERCOM2_Handler+0x14>)
    3f0a:	689b      	ldr	r3, [r3, #8]
    3f0c:	2002      	movs	r0, #2
    3f0e:	4798      	blx	r3
    3f10:	46c0      	nop			; (mov r8, r8)
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	2000026c 	.word	0x2000026c

00003f1c <SERCOM3_Handler>:
    3f1c:	b580      	push	{r7, lr}
    3f1e:	af00      	add	r7, sp, #0
    3f20:	4b03      	ldr	r3, [pc, #12]	; (3f30 <SERCOM3_Handler+0x14>)
    3f22:	68db      	ldr	r3, [r3, #12]
    3f24:	2003      	movs	r0, #3
    3f26:	4798      	blx	r3
    3f28:	46c0      	nop			; (mov r8, r8)
    3f2a:	46bd      	mov	sp, r7
    3f2c:	bd80      	pop	{r7, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	2000026c 	.word	0x2000026c

00003f34 <SERCOM4_Handler>:
    3f34:	b580      	push	{r7, lr}
    3f36:	af00      	add	r7, sp, #0
    3f38:	4b03      	ldr	r3, [pc, #12]	; (3f48 <SERCOM4_Handler+0x14>)
    3f3a:	691b      	ldr	r3, [r3, #16]
    3f3c:	2004      	movs	r0, #4
    3f3e:	4798      	blx	r3
    3f40:	46c0      	nop			; (mov r8, r8)
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	2000026c 	.word	0x2000026c

00003f4c <SERCOM5_Handler>:
    3f4c:	b580      	push	{r7, lr}
    3f4e:	af00      	add	r7, sp, #0
    3f50:	4b03      	ldr	r3, [pc, #12]	; (3f60 <SERCOM5_Handler+0x14>)
    3f52:	695b      	ldr	r3, [r3, #20]
    3f54:	2005      	movs	r0, #5
    3f56:	4798      	blx	r3
    3f58:	46c0      	nop			; (mov r8, r8)
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	2000026c 	.word	0x2000026c

00003f64 <system_gclk_chan_get_config_defaults>:
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b082      	sub	sp, #8
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	2200      	movs	r2, #0
    3f70:	701a      	strb	r2, [r3, #0]
}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}
	...

00003f7c <system_apb_clock_set_mask>:
{
    3f7c:	b580      	push	{r7, lr}
    3f7e:	b082      	sub	sp, #8
    3f80:	af00      	add	r7, sp, #0
    3f82:	0002      	movs	r2, r0
    3f84:	6039      	str	r1, [r7, #0]
    3f86:	1dfb      	adds	r3, r7, #7
    3f88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3f8a:	1dfb      	adds	r3, r7, #7
    3f8c:	781b      	ldrb	r3, [r3, #0]
    3f8e:	2b01      	cmp	r3, #1
    3f90:	d00a      	beq.n	3fa8 <system_apb_clock_set_mask+0x2c>
    3f92:	2b02      	cmp	r3, #2
    3f94:	d00f      	beq.n	3fb6 <system_apb_clock_set_mask+0x3a>
    3f96:	2b00      	cmp	r3, #0
    3f98:	d114      	bne.n	3fc4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3f9a:	4b0e      	ldr	r3, [pc, #56]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3f9c:	4a0d      	ldr	r2, [pc, #52]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3f9e:	6991      	ldr	r1, [r2, #24]
    3fa0:	683a      	ldr	r2, [r7, #0]
    3fa2:	430a      	orrs	r2, r1
    3fa4:	619a      	str	r2, [r3, #24]
			break;
    3fa6:	e00f      	b.n	3fc8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3fa8:	4b0a      	ldr	r3, [pc, #40]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3faa:	4a0a      	ldr	r2, [pc, #40]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3fac:	69d1      	ldr	r1, [r2, #28]
    3fae:	683a      	ldr	r2, [r7, #0]
    3fb0:	430a      	orrs	r2, r1
    3fb2:	61da      	str	r2, [r3, #28]
			break;
    3fb4:	e008      	b.n	3fc8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3fb6:	4b07      	ldr	r3, [pc, #28]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3fb8:	4a06      	ldr	r2, [pc, #24]	; (3fd4 <system_apb_clock_set_mask+0x58>)
    3fba:	6a11      	ldr	r1, [r2, #32]
    3fbc:	683a      	ldr	r2, [r7, #0]
    3fbe:	430a      	orrs	r2, r1
    3fc0:	621a      	str	r2, [r3, #32]
			break;
    3fc2:	e001      	b.n	3fc8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3fc4:	2317      	movs	r3, #23
    3fc6:	e000      	b.n	3fca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3fc8:	2300      	movs	r3, #0
}
    3fca:	0018      	movs	r0, r3
    3fcc:	46bd      	mov	sp, r7
    3fce:	b002      	add	sp, #8
    3fd0:	bd80      	pop	{r7, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	40000400 	.word	0x40000400

00003fd8 <system_pinmux_get_config_defaults>:
{
    3fd8:	b580      	push	{r7, lr}
    3fda:	b082      	sub	sp, #8
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3fe0:	687b      	ldr	r3, [r7, #4]
    3fe2:	2280      	movs	r2, #128	; 0x80
    3fe4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	2200      	movs	r2, #0
    3fea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	2201      	movs	r2, #1
    3ff0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	2200      	movs	r2, #0
    3ff6:	70da      	strb	r2, [r3, #3]
}
    3ff8:	46c0      	nop			; (mov r8, r8)
    3ffa:	46bd      	mov	sp, r7
    3ffc:	b002      	add	sp, #8
    3ffe:	bd80      	pop	{r7, pc}

00004000 <system_is_debugger_present>:
{
    4000:	b580      	push	{r7, lr}
    4002:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4004:	4b05      	ldr	r3, [pc, #20]	; (401c <system_is_debugger_present+0x1c>)
    4006:	789b      	ldrb	r3, [r3, #2]
    4008:	b2db      	uxtb	r3, r3
    400a:	001a      	movs	r2, r3
    400c:	2302      	movs	r3, #2
    400e:	4013      	ands	r3, r2
    4010:	1e5a      	subs	r2, r3, #1
    4012:	4193      	sbcs	r3, r2
    4014:	b2db      	uxtb	r3, r3
}
    4016:	0018      	movs	r0, r3
    4018:	46bd      	mov	sp, r7
    401a:	bd80      	pop	{r7, pc}
    401c:	41002000 	.word	0x41002000

00004020 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4020:	b580      	push	{r7, lr}
    4022:	b084      	sub	sp, #16
    4024:	af00      	add	r7, sp, #0
    4026:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    402e:	68fb      	ldr	r3, [r7, #12]
    4030:	69db      	ldr	r3, [r3, #28]
    4032:	1e5a      	subs	r2, r3, #1
    4034:	4193      	sbcs	r3, r2
    4036:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4038:	0018      	movs	r0, r3
    403a:	46bd      	mov	sp, r7
    403c:	b004      	add	sp, #16
    403e:	bd80      	pop	{r7, pc}

00004040 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4040:	b580      	push	{r7, lr}
    4042:	b082      	sub	sp, #8
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4048:	46c0      	nop			; (mov r8, r8)
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	0018      	movs	r0, r3
    404e:	4b04      	ldr	r3, [pc, #16]	; (4060 <_usart_wait_for_sync+0x20>)
    4050:	4798      	blx	r3
    4052:	1e03      	subs	r3, r0, #0
    4054:	d1f9      	bne.n	404a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	46bd      	mov	sp, r7
    405a:	b002      	add	sp, #8
    405c:	bd80      	pop	{r7, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	00004021 	.word	0x00004021

00004064 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4064:	b5b0      	push	{r4, r5, r7, lr}
    4066:	b08c      	sub	sp, #48	; 0x30
    4068:	af02      	add	r7, sp, #8
    406a:	6078      	str	r0, [r7, #4]
    406c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	681b      	ldr	r3, [r3, #0]
    4072:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	0018      	movs	r0, r3
    407a:	4bab      	ldr	r3, [pc, #684]	; (4328 <_usart_set_config+0x2c4>)
    407c:	4798      	blx	r3
    407e:	0003      	movs	r3, r0
    4080:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4082:	697b      	ldr	r3, [r7, #20]
    4084:	3314      	adds	r3, #20
    4086:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4088:	2300      	movs	r3, #0
    408a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    408c:	2300      	movs	r3, #0
    408e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4090:	230a      	movs	r3, #10
    4092:	18fb      	adds	r3, r7, r3
    4094:	2200      	movs	r2, #0
    4096:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4098:	231f      	movs	r3, #31
    409a:	18fb      	adds	r3, r7, r3
    409c:	2200      	movs	r2, #0
    409e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    40a0:	231e      	movs	r3, #30
    40a2:	18fb      	adds	r3, r7, r3
    40a4:	2210      	movs	r2, #16
    40a6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    40a8:	683b      	ldr	r3, [r7, #0]
    40aa:	8a1b      	ldrh	r3, [r3, #16]
    40ac:	2280      	movs	r2, #128	; 0x80
    40ae:	01d2      	lsls	r2, r2, #7
    40b0:	4293      	cmp	r3, r2
    40b2:	d01c      	beq.n	40ee <_usart_set_config+0x8a>
    40b4:	2280      	movs	r2, #128	; 0x80
    40b6:	01d2      	lsls	r2, r2, #7
    40b8:	4293      	cmp	r3, r2
    40ba:	dc06      	bgt.n	40ca <_usart_set_config+0x66>
    40bc:	2b00      	cmp	r3, #0
    40be:	d00d      	beq.n	40dc <_usart_set_config+0x78>
    40c0:	2280      	movs	r2, #128	; 0x80
    40c2:	0192      	lsls	r2, r2, #6
    40c4:	4293      	cmp	r3, r2
    40c6:	d024      	beq.n	4112 <_usart_set_config+0xae>
    40c8:	e035      	b.n	4136 <_usart_set_config+0xd2>
    40ca:	22c0      	movs	r2, #192	; 0xc0
    40cc:	01d2      	lsls	r2, r2, #7
    40ce:	4293      	cmp	r3, r2
    40d0:	d028      	beq.n	4124 <_usart_set_config+0xc0>
    40d2:	2280      	movs	r2, #128	; 0x80
    40d4:	0212      	lsls	r2, r2, #8
    40d6:	4293      	cmp	r3, r2
    40d8:	d012      	beq.n	4100 <_usart_set_config+0x9c>
    40da:	e02c      	b.n	4136 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40dc:	231f      	movs	r3, #31
    40de:	18fb      	adds	r3, r7, r3
    40e0:	2200      	movs	r2, #0
    40e2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    40e4:	231e      	movs	r3, #30
    40e6:	18fb      	adds	r3, r7, r3
    40e8:	2210      	movs	r2, #16
    40ea:	701a      	strb	r2, [r3, #0]
			break;
    40ec:	e023      	b.n	4136 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40ee:	231f      	movs	r3, #31
    40f0:	18fb      	adds	r3, r7, r3
    40f2:	2200      	movs	r2, #0
    40f4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40f6:	231e      	movs	r3, #30
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	2208      	movs	r2, #8
    40fc:	701a      	strb	r2, [r3, #0]
			break;
    40fe:	e01a      	b.n	4136 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4100:	231f      	movs	r3, #31
    4102:	18fb      	adds	r3, r7, r3
    4104:	2200      	movs	r2, #0
    4106:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4108:	231e      	movs	r3, #30
    410a:	18fb      	adds	r3, r7, r3
    410c:	2203      	movs	r2, #3
    410e:	701a      	strb	r2, [r3, #0]
			break;
    4110:	e011      	b.n	4136 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4112:	231f      	movs	r3, #31
    4114:	18fb      	adds	r3, r7, r3
    4116:	2201      	movs	r2, #1
    4118:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    411a:	231e      	movs	r3, #30
    411c:	18fb      	adds	r3, r7, r3
    411e:	2210      	movs	r2, #16
    4120:	701a      	strb	r2, [r3, #0]
			break;
    4122:	e008      	b.n	4136 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4124:	231f      	movs	r3, #31
    4126:	18fb      	adds	r3, r7, r3
    4128:	2201      	movs	r2, #1
    412a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    412c:	231e      	movs	r3, #30
    412e:	18fb      	adds	r3, r7, r3
    4130:	2208      	movs	r2, #8
    4132:	701a      	strb	r2, [r3, #0]
			break;
    4134:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4136:	683b      	ldr	r3, [r7, #0]
    4138:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    413a:	683b      	ldr	r3, [r7, #0]
    413c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    413e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4140:	683b      	ldr	r3, [r7, #0]
    4142:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4144:	4313      	orrs	r3, r2
		config->sample_rate |
    4146:	683a      	ldr	r2, [r7, #0]
    4148:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    414a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    414c:	683a      	ldr	r2, [r7, #0]
    414e:	7e12      	ldrb	r2, [r2, #24]
    4150:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4152:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4154:	683a      	ldr	r2, [r7, #0]
    4156:	2126      	movs	r1, #38	; 0x26
    4158:	5c52      	ldrb	r2, [r2, r1]
    415a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    415c:	4313      	orrs	r3, r2
    415e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4160:	231d      	movs	r3, #29
    4162:	18fb      	adds	r3, r7, r3
    4164:	2200      	movs	r2, #0
    4166:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	685b      	ldr	r3, [r3, #4]
    416c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	2b00      	cmp	r3, #0
    4172:	d01e      	beq.n	41b2 <_usart_set_config+0x14e>
    4174:	2280      	movs	r2, #128	; 0x80
    4176:	0552      	lsls	r2, r2, #21
    4178:	4293      	cmp	r3, r2
    417a:	d14f      	bne.n	421c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    417c:	683b      	ldr	r3, [r7, #0]
    417e:	2227      	movs	r2, #39	; 0x27
    4180:	5c9b      	ldrb	r3, [r3, r2]
    4182:	2201      	movs	r2, #1
    4184:	4053      	eors	r3, r2
    4186:	b2db      	uxtb	r3, r3
    4188:	2b00      	cmp	r3, #0
    418a:	d046      	beq.n	421a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    418c:	683b      	ldr	r3, [r7, #0]
    418e:	6a1d      	ldr	r5, [r3, #32]
    4190:	693b      	ldr	r3, [r7, #16]
    4192:	b2db      	uxtb	r3, r3
    4194:	0018      	movs	r0, r3
    4196:	4b65      	ldr	r3, [pc, #404]	; (432c <_usart_set_config+0x2c8>)
    4198:	4798      	blx	r3
    419a:	0001      	movs	r1, r0
    419c:	231d      	movs	r3, #29
    419e:	18fc      	adds	r4, r7, r3
    41a0:	230a      	movs	r3, #10
    41a2:	18fb      	adds	r3, r7, r3
    41a4:	001a      	movs	r2, r3
    41a6:	0028      	movs	r0, r5
    41a8:	4b61      	ldr	r3, [pc, #388]	; (4330 <_usart_set_config+0x2cc>)
    41aa:	4798      	blx	r3
    41ac:	0003      	movs	r3, r0
    41ae:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    41b0:	e033      	b.n	421a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	2227      	movs	r2, #39	; 0x27
    41b6:	5c9b      	ldrb	r3, [r3, r2]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d014      	beq.n	41e6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    41bc:	683b      	ldr	r3, [r7, #0]
    41be:	6a18      	ldr	r0, [r3, #32]
    41c0:	683b      	ldr	r3, [r7, #0]
    41c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    41c4:	231d      	movs	r3, #29
    41c6:	18fc      	adds	r4, r7, r3
    41c8:	231f      	movs	r3, #31
    41ca:	18fb      	adds	r3, r7, r3
    41cc:	781d      	ldrb	r5, [r3, #0]
    41ce:	230a      	movs	r3, #10
    41d0:	18fa      	adds	r2, r7, r3
    41d2:	231e      	movs	r3, #30
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	9300      	str	r3, [sp, #0]
    41da:	002b      	movs	r3, r5
    41dc:	4d55      	ldr	r5, [pc, #340]	; (4334 <_usart_set_config+0x2d0>)
    41de:	47a8      	blx	r5
    41e0:	0003      	movs	r3, r0
    41e2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    41e4:	e01a      	b.n	421c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    41e6:	683b      	ldr	r3, [r7, #0]
    41e8:	6a1d      	ldr	r5, [r3, #32]
    41ea:	693b      	ldr	r3, [r7, #16]
    41ec:	b2db      	uxtb	r3, r3
    41ee:	0018      	movs	r0, r3
    41f0:	4b4e      	ldr	r3, [pc, #312]	; (432c <_usart_set_config+0x2c8>)
    41f2:	4798      	blx	r3
				status_code =
    41f4:	231d      	movs	r3, #29
    41f6:	18fc      	adds	r4, r7, r3
    41f8:	231f      	movs	r3, #31
    41fa:	18fb      	adds	r3, r7, r3
    41fc:	7819      	ldrb	r1, [r3, #0]
    41fe:	230a      	movs	r3, #10
    4200:	18fa      	adds	r2, r7, r3
    4202:	231e      	movs	r3, #30
    4204:	18fb      	adds	r3, r7, r3
    4206:	781b      	ldrb	r3, [r3, #0]
    4208:	9300      	str	r3, [sp, #0]
    420a:	000b      	movs	r3, r1
    420c:	0001      	movs	r1, r0
    420e:	0028      	movs	r0, r5
    4210:	4d48      	ldr	r5, [pc, #288]	; (4334 <_usart_set_config+0x2d0>)
    4212:	47a8      	blx	r5
    4214:	0003      	movs	r3, r0
    4216:	7023      	strb	r3, [r4, #0]
			break;
    4218:	e000      	b.n	421c <_usart_set_config+0x1b8>
			break;
    421a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    421c:	231d      	movs	r3, #29
    421e:	18fb      	adds	r3, r7, r3
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	2b00      	cmp	r3, #0
    4224:	d003      	beq.n	422e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4226:	231d      	movs	r3, #29
    4228:	18fb      	adds	r3, r7, r3
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	e077      	b.n	431e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	7e5b      	ldrb	r3, [r3, #25]
    4232:	2b00      	cmp	r3, #0
    4234:	d003      	beq.n	423e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	7e9a      	ldrb	r2, [r3, #26]
    423a:	69bb      	ldr	r3, [r7, #24]
    423c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	0018      	movs	r0, r3
    4242:	4b3d      	ldr	r3, [pc, #244]	; (4338 <_usart_set_config+0x2d4>)
    4244:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4246:	230a      	movs	r3, #10
    4248:	18fb      	adds	r3, r7, r3
    424a:	881a      	ldrh	r2, [r3, #0]
    424c:	69bb      	ldr	r3, [r7, #24]
    424e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4252:	68fb      	ldr	r3, [r7, #12]
    4254:	4313      	orrs	r3, r2
    4256:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4258:	683b      	ldr	r3, [r7, #0]
    425a:	2227      	movs	r2, #39	; 0x27
    425c:	5c9b      	ldrb	r3, [r3, r2]
    425e:	2201      	movs	r2, #1
    4260:	4053      	eors	r3, r2
    4262:	b2db      	uxtb	r3, r3
    4264:	2b00      	cmp	r3, #0
    4266:	d003      	beq.n	4270 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    426a:	2204      	movs	r2, #4
    426c:	4313      	orrs	r3, r2
    426e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4270:	683b      	ldr	r3, [r7, #0]
    4272:	7e5b      	ldrb	r3, [r3, #25]
    4274:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4276:	683b      	ldr	r3, [r7, #0]
    4278:	7f1b      	ldrb	r3, [r3, #28]
    427a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    427c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	7f5b      	ldrb	r3, [r3, #29]
    4282:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4284:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	2124      	movs	r1, #36	; 0x24
    428a:	5c5b      	ldrb	r3, [r3, r1]
    428c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    428e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4290:	683b      	ldr	r3, [r7, #0]
    4292:	2125      	movs	r1, #37	; 0x25
    4294:	5c5b      	ldrb	r3, [r3, r1]
    4296:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4298:	4313      	orrs	r3, r2
	ctrlb =  
    429a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    429c:	683b      	ldr	r3, [r7, #0]
    429e:	7a9b      	ldrb	r3, [r3, #10]
    42a0:	001a      	movs	r2, r3
    42a2:	6a3b      	ldr	r3, [r7, #32]
    42a4:	4313      	orrs	r3, r2
    42a6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	7adb      	ldrb	r3, [r3, #11]
    42ac:	001a      	movs	r2, r3
    42ae:	6a3b      	ldr	r3, [r7, #32]
    42b0:	4313      	orrs	r3, r2
    42b2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    42b4:	683b      	ldr	r3, [r7, #0]
    42b6:	891b      	ldrh	r3, [r3, #8]
    42b8:	2bff      	cmp	r3, #255	; 0xff
    42ba:	d00b      	beq.n	42d4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    42bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42be:	2280      	movs	r2, #128	; 0x80
    42c0:	0452      	lsls	r2, r2, #17
    42c2:	4313      	orrs	r3, r2
    42c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    42c6:	683b      	ldr	r3, [r7, #0]
    42c8:	891b      	ldrh	r3, [r3, #8]
    42ca:	001a      	movs	r2, r3
    42cc:	6a3b      	ldr	r3, [r7, #32]
    42ce:	4313      	orrs	r3, r2
    42d0:	623b      	str	r3, [r7, #32]
    42d2:	e008      	b.n	42e6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    42d4:	683b      	ldr	r3, [r7, #0]
    42d6:	7edb      	ldrb	r3, [r3, #27]
    42d8:	2b00      	cmp	r3, #0
    42da:	d004      	beq.n	42e6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    42dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42de:	2280      	movs	r2, #128	; 0x80
    42e0:	04d2      	lsls	r2, r2, #19
    42e2:	4313      	orrs	r3, r2
    42e4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    42e6:	683b      	ldr	r3, [r7, #0]
    42e8:	222c      	movs	r2, #44	; 0x2c
    42ea:	5c9b      	ldrb	r3, [r3, r2]
    42ec:	2b00      	cmp	r3, #0
    42ee:	d103      	bne.n	42f8 <_usart_set_config+0x294>
    42f0:	4b12      	ldr	r3, [pc, #72]	; (433c <_usart_set_config+0x2d8>)
    42f2:	4798      	blx	r3
    42f4:	1e03      	subs	r3, r0, #0
    42f6:	d003      	beq.n	4300 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    42f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42fa:	2280      	movs	r2, #128	; 0x80
    42fc:	4313      	orrs	r3, r2
    42fe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	0018      	movs	r0, r3
    4304:	4b0c      	ldr	r3, [pc, #48]	; (4338 <_usart_set_config+0x2d4>)
    4306:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4308:	69bb      	ldr	r3, [r7, #24]
    430a:	6a3a      	ldr	r2, [r7, #32]
    430c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	0018      	movs	r0, r3
    4312:	4b09      	ldr	r3, [pc, #36]	; (4338 <_usart_set_config+0x2d4>)
    4314:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4316:	69bb      	ldr	r3, [r7, #24]
    4318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    431a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    431c:	2300      	movs	r3, #0
}
    431e:	0018      	movs	r0, r3
    4320:	46bd      	mov	sp, r7
    4322:	b00a      	add	sp, #40	; 0x28
    4324:	bdb0      	pop	{r4, r5, r7, pc}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	00003dc1 	.word	0x00003dc1
    432c:	000057e9 	.word	0x000057e9
    4330:	0000393b 	.word	0x0000393b
    4334:	000039b9 	.word	0x000039b9
    4338:	00004041 	.word	0x00004041
    433c:	00004001 	.word	0x00004001

00004340 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4340:	b590      	push	{r4, r7, lr}
    4342:	b093      	sub	sp, #76	; 0x4c
    4344:	af00      	add	r7, sp, #0
    4346:	60f8      	str	r0, [r7, #12]
    4348:	60b9      	str	r1, [r7, #8]
    434a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    434c:	233b      	movs	r3, #59	; 0x3b
    434e:	18fb      	adds	r3, r7, r3
    4350:	2200      	movs	r2, #0
    4352:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	68ba      	ldr	r2, [r7, #8]
    4358:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	0018      	movs	r0, r3
    4366:	4b86      	ldr	r3, [pc, #536]	; (4580 <usart_init+0x240>)
    4368:	4798      	blx	r3
    436a:	0003      	movs	r3, r0
    436c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4370:	3302      	adds	r3, #2
    4372:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4376:	3314      	adds	r3, #20
    4378:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	2201      	movs	r2, #1
    4380:	4013      	ands	r3, r2
    4382:	d001      	beq.n	4388 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4384:	2305      	movs	r3, #5
    4386:	e0f6      	b.n	4576 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    438a:	681b      	ldr	r3, [r3, #0]
    438c:	2202      	movs	r2, #2
    438e:	4013      	ands	r3, r2
    4390:	d001      	beq.n	4396 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4392:	231c      	movs	r3, #28
    4394:	e0ef      	b.n	4576 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4396:	2201      	movs	r2, #1
    4398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    439a:	409a      	lsls	r2, r3
    439c:	0013      	movs	r3, r2
    439e:	0019      	movs	r1, r3
    43a0:	2002      	movs	r0, #2
    43a2:	4b78      	ldr	r3, [pc, #480]	; (4584 <usart_init+0x244>)
    43a4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    43a6:	2324      	movs	r3, #36	; 0x24
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	0018      	movs	r0, r3
    43ac:	4b76      	ldr	r3, [pc, #472]	; (4588 <usart_init+0x248>)
    43ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	222d      	movs	r2, #45	; 0x2d
    43b4:	5c9a      	ldrb	r2, [r3, r2]
    43b6:	2324      	movs	r3, #36	; 0x24
    43b8:	18fb      	adds	r3, r7, r3
    43ba:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    43bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43be:	b2db      	uxtb	r3, r3
    43c0:	2224      	movs	r2, #36	; 0x24
    43c2:	18ba      	adds	r2, r7, r2
    43c4:	0011      	movs	r1, r2
    43c6:	0018      	movs	r0, r3
    43c8:	4b70      	ldr	r3, [pc, #448]	; (458c <usart_init+0x24c>)
    43ca:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    43cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43ce:	b2db      	uxtb	r3, r3
    43d0:	0018      	movs	r0, r3
    43d2:	4b6f      	ldr	r3, [pc, #444]	; (4590 <usart_init+0x250>)
    43d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	222d      	movs	r2, #45	; 0x2d
    43da:	5c9b      	ldrb	r3, [r3, r2]
    43dc:	2100      	movs	r1, #0
    43de:	0018      	movs	r0, r3
    43e0:	4b6c      	ldr	r3, [pc, #432]	; (4594 <usart_init+0x254>)
    43e2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	7ada      	ldrb	r2, [r3, #11]
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	2224      	movs	r2, #36	; 0x24
    43f0:	5c9a      	ldrb	r2, [r3, r2]
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	2225      	movs	r2, #37	; 0x25
    43fa:	5c9a      	ldrb	r2, [r3, r2]
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	7eda      	ldrb	r2, [r3, #27]
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	7f1a      	ldrb	r2, [r3, #28]
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4410:	233b      	movs	r3, #59	; 0x3b
    4412:	18fc      	adds	r4, r7, r3
    4414:	687a      	ldr	r2, [r7, #4]
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	0011      	movs	r1, r2
    441a:	0018      	movs	r0, r3
    441c:	4b5e      	ldr	r3, [pc, #376]	; (4598 <usart_init+0x258>)
    441e:	4798      	blx	r3
    4420:	0003      	movs	r3, r0
    4422:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4424:	233b      	movs	r3, #59	; 0x3b
    4426:	18fb      	adds	r3, r7, r3
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	2b00      	cmp	r3, #0
    442c:	d003      	beq.n	4436 <usart_init+0xf6>
		return status_code;
    442e:	233b      	movs	r3, #59	; 0x3b
    4430:	18fb      	adds	r3, r7, r3
    4432:	781b      	ldrb	r3, [r3, #0]
    4434:	e09f      	b.n	4576 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4436:	2320      	movs	r3, #32
    4438:	18fb      	adds	r3, r7, r3
    443a:	0018      	movs	r0, r3
    443c:	4b57      	ldr	r3, [pc, #348]	; (459c <usart_init+0x25c>)
    443e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4440:	2320      	movs	r3, #32
    4442:	18fb      	adds	r3, r7, r3
    4444:	2200      	movs	r2, #0
    4446:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4448:	2320      	movs	r3, #32
    444a:	18fb      	adds	r3, r7, r3
    444c:	2200      	movs	r2, #0
    444e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4454:	2310      	movs	r3, #16
    4456:	18fb      	adds	r3, r7, r3
    4458:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    445e:	2310      	movs	r3, #16
    4460:	18fb      	adds	r3, r7, r3
    4462:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    4468:	2310      	movs	r3, #16
    446a:	18fb      	adds	r3, r7, r3
    446c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    4472:	2310      	movs	r3, #16
    4474:	18fb      	adds	r3, r7, r3
    4476:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4478:	2347      	movs	r3, #71	; 0x47
    447a:	18fb      	adds	r3, r7, r3
    447c:	2200      	movs	r2, #0
    447e:	701a      	strb	r2, [r3, #0]
    4480:	e02c      	b.n	44dc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4482:	2347      	movs	r3, #71	; 0x47
    4484:	18fb      	adds	r3, r7, r3
    4486:	781a      	ldrb	r2, [r3, #0]
    4488:	2310      	movs	r3, #16
    448a:	18fb      	adds	r3, r7, r3
    448c:	0092      	lsls	r2, r2, #2
    448e:	58d3      	ldr	r3, [r2, r3]
    4490:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4494:	2b00      	cmp	r3, #0
    4496:	d109      	bne.n	44ac <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4498:	2347      	movs	r3, #71	; 0x47
    449a:	18fb      	adds	r3, r7, r3
    449c:	781a      	ldrb	r2, [r3, #0]
    449e:	68bb      	ldr	r3, [r7, #8]
    44a0:	0011      	movs	r1, r2
    44a2:	0018      	movs	r0, r3
    44a4:	4b3e      	ldr	r3, [pc, #248]	; (45a0 <usart_init+0x260>)
    44a6:	4798      	blx	r3
    44a8:	0003      	movs	r3, r0
    44aa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    44ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    44ae:	3301      	adds	r3, #1
    44b0:	d00d      	beq.n	44ce <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    44b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    44b4:	b2da      	uxtb	r2, r3
    44b6:	2320      	movs	r3, #32
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    44bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    44be:	0c1b      	lsrs	r3, r3, #16
    44c0:	b2db      	uxtb	r3, r3
    44c2:	2220      	movs	r2, #32
    44c4:	18ba      	adds	r2, r7, r2
    44c6:	0011      	movs	r1, r2
    44c8:	0018      	movs	r0, r3
    44ca:	4b36      	ldr	r3, [pc, #216]	; (45a4 <usart_init+0x264>)
    44cc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    44ce:	2347      	movs	r3, #71	; 0x47
    44d0:	18fb      	adds	r3, r7, r3
    44d2:	781a      	ldrb	r2, [r3, #0]
    44d4:	2347      	movs	r3, #71	; 0x47
    44d6:	18fb      	adds	r3, r7, r3
    44d8:	3201      	adds	r2, #1
    44da:	701a      	strb	r2, [r3, #0]
    44dc:	2347      	movs	r3, #71	; 0x47
    44de:	18fb      	adds	r3, r7, r3
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b03      	cmp	r3, #3
    44e4:	d9cd      	bls.n	4482 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    44e6:	2300      	movs	r3, #0
    44e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    44ea:	e00a      	b.n	4502 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    44ec:	68fa      	ldr	r2, [r7, #12]
    44ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    44f0:	3302      	adds	r3, #2
    44f2:	009b      	lsls	r3, r3, #2
    44f4:	18d3      	adds	r3, r2, r3
    44f6:	3304      	adds	r3, #4
    44f8:	2200      	movs	r2, #0
    44fa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    44fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    44fe:	3301      	adds	r3, #1
    4500:	63fb      	str	r3, [r7, #60]	; 0x3c
    4502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4504:	2b05      	cmp	r3, #5
    4506:	d9f1      	bls.n	44ec <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	2200      	movs	r2, #0
    450c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    450e:	68fb      	ldr	r3, [r7, #12]
    4510:	2200      	movs	r2, #0
    4512:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	2200      	movs	r2, #0
    4518:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	2200      	movs	r2, #0
    451e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	2230      	movs	r2, #48	; 0x30
    4524:	2100      	movs	r1, #0
    4526:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	2231      	movs	r2, #49	; 0x31
    452c:	2100      	movs	r1, #0
    452e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    4530:	68fb      	ldr	r3, [r7, #12]
    4532:	2232      	movs	r2, #50	; 0x32
    4534:	2100      	movs	r1, #0
    4536:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    4538:	68fb      	ldr	r3, [r7, #12]
    453a:	2233      	movs	r2, #51	; 0x33
    453c:	2100      	movs	r1, #0
    453e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	2227      	movs	r2, #39	; 0x27
    4546:	18bc      	adds	r4, r7, r2
    4548:	0018      	movs	r0, r3
    454a:	4b0d      	ldr	r3, [pc, #52]	; (4580 <usart_init+0x240>)
    454c:	4798      	blx	r3
    454e:	0003      	movs	r3, r0
    4550:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4552:	4a15      	ldr	r2, [pc, #84]	; (45a8 <usart_init+0x268>)
    4554:	2327      	movs	r3, #39	; 0x27
    4556:	18fb      	adds	r3, r7, r3
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	0011      	movs	r1, r2
    455c:	0018      	movs	r0, r3
    455e:	4b13      	ldr	r3, [pc, #76]	; (45ac <usart_init+0x26c>)
    4560:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4562:	2327      	movs	r3, #39	; 0x27
    4564:	18fb      	adds	r3, r7, r3
    4566:	781a      	ldrb	r2, [r3, #0]
    4568:	4b11      	ldr	r3, [pc, #68]	; (45b0 <usart_init+0x270>)
    456a:	0092      	lsls	r2, r2, #2
    456c:	68f9      	ldr	r1, [r7, #12]
    456e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4570:	233b      	movs	r3, #59	; 0x3b
    4572:	18fb      	adds	r3, r7, r3
    4574:	781b      	ldrb	r3, [r3, #0]
}
    4576:	0018      	movs	r0, r3
    4578:	46bd      	mov	sp, r7
    457a:	b013      	add	sp, #76	; 0x4c
    457c:	bd90      	pop	{r4, r7, pc}
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	00003dc1 	.word	0x00003dc1
    4584:	00003f7d 	.word	0x00003f7d
    4588:	00003f65 	.word	0x00003f65
    458c:	000056c5 	.word	0x000056c5
    4590:	00005709 	.word	0x00005709
    4594:	00003b79 	.word	0x00003b79
    4598:	00004065 	.word	0x00004065
    459c:	00003fd9 	.word	0x00003fd9
    45a0:	00003c05 	.word	0x00003c05
    45a4:	000059b1 	.word	0x000059b1
    45a8:	00004749 	.word	0x00004749
    45ac:	00003e25 	.word	0x00003e25
    45b0:	200003c0 	.word	0x200003c0

000045b4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    45b4:	b580      	push	{r7, lr}
    45b6:	b084      	sub	sp, #16
    45b8:	af00      	add	r7, sp, #0
    45ba:	6078      	str	r0, [r7, #4]
    45bc:	000a      	movs	r2, r1
    45be:	1cbb      	adds	r3, r7, #2
    45c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	79db      	ldrb	r3, [r3, #7]
    45cc:	2201      	movs	r2, #1
    45ce:	4053      	eors	r3, r2
    45d0:	b2db      	uxtb	r3, r3
    45d2:	2b00      	cmp	r3, #0
    45d4:	d001      	beq.n	45da <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    45d6:	231c      	movs	r3, #28
    45d8:	e017      	b.n	460a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    45de:	b29b      	uxth	r3, r3
    45e0:	2b00      	cmp	r3, #0
    45e2:	d001      	beq.n	45e8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    45e4:	2305      	movs	r3, #5
    45e6:	e010      	b.n	460a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	0018      	movs	r0, r3
    45ec:	4b09      	ldr	r3, [pc, #36]	; (4614 <usart_write_wait+0x60>)
    45ee:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    45f0:	68fb      	ldr	r3, [r7, #12]
    45f2:	1cba      	adds	r2, r7, #2
    45f4:	8812      	ldrh	r2, [r2, #0]
    45f6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    45f8:	46c0      	nop			; (mov r8, r8)
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	7e1b      	ldrb	r3, [r3, #24]
    45fe:	b2db      	uxtb	r3, r3
    4600:	001a      	movs	r2, r3
    4602:	2302      	movs	r3, #2
    4604:	4013      	ands	r3, r2
    4606:	d0f8      	beq.n	45fa <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4608:	2300      	movs	r3, #0
}
    460a:	0018      	movs	r0, r3
    460c:	46bd      	mov	sp, r7
    460e:	b004      	add	sp, #16
    4610:	bd80      	pop	{r7, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	00004041 	.word	0x00004041

00004618 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4618:	b580      	push	{r7, lr}
    461a:	b084      	sub	sp, #16
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
    4620:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	799b      	ldrb	r3, [r3, #6]
    462c:	2201      	movs	r2, #1
    462e:	4053      	eors	r3, r2
    4630:	b2db      	uxtb	r3, r3
    4632:	2b00      	cmp	r3, #0
    4634:	d001      	beq.n	463a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    4636:	231c      	movs	r3, #28
    4638:	e05e      	b.n	46f8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    463e:	b29b      	uxth	r3, r3
    4640:	2b00      	cmp	r3, #0
    4642:	d001      	beq.n	4648 <usart_read_wait+0x30>
		return STATUS_BUSY;
    4644:	2305      	movs	r3, #5
    4646:	e057      	b.n	46f8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	7e1b      	ldrb	r3, [r3, #24]
    464c:	b2db      	uxtb	r3, r3
    464e:	001a      	movs	r2, r3
    4650:	2304      	movs	r3, #4
    4652:	4013      	ands	r3, r2
    4654:	d101      	bne.n	465a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    4656:	2305      	movs	r3, #5
    4658:	e04e      	b.n	46f8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	0018      	movs	r0, r3
    465e:	4b28      	ldr	r3, [pc, #160]	; (4700 <usart_read_wait+0xe8>)
    4660:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	8b5b      	ldrh	r3, [r3, #26]
    4666:	b29b      	uxth	r3, r3
    4668:	b2da      	uxtb	r2, r3
    466a:	230b      	movs	r3, #11
    466c:	18fb      	adds	r3, r7, r3
    466e:	213f      	movs	r1, #63	; 0x3f
    4670:	400a      	ands	r2, r1
    4672:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4674:	230b      	movs	r3, #11
    4676:	18fb      	adds	r3, r7, r3
    4678:	781b      	ldrb	r3, [r3, #0]
    467a:	2b00      	cmp	r3, #0
    467c:	d036      	beq.n	46ec <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    467e:	230b      	movs	r3, #11
    4680:	18fb      	adds	r3, r7, r3
    4682:	781b      	ldrb	r3, [r3, #0]
    4684:	2202      	movs	r2, #2
    4686:	4013      	ands	r3, r2
    4688:	d004      	beq.n	4694 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    468a:	68fb      	ldr	r3, [r7, #12]
    468c:	2202      	movs	r2, #2
    468e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    4690:	231a      	movs	r3, #26
    4692:	e031      	b.n	46f8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4694:	230b      	movs	r3, #11
    4696:	18fb      	adds	r3, r7, r3
    4698:	781b      	ldrb	r3, [r3, #0]
    469a:	2204      	movs	r2, #4
    469c:	4013      	ands	r3, r2
    469e:	d004      	beq.n	46aa <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    46a0:	68fb      	ldr	r3, [r7, #12]
    46a2:	2204      	movs	r2, #4
    46a4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    46a6:	231e      	movs	r3, #30
    46a8:	e026      	b.n	46f8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    46aa:	230b      	movs	r3, #11
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	781b      	ldrb	r3, [r3, #0]
    46b0:	2201      	movs	r2, #1
    46b2:	4013      	ands	r3, r2
    46b4:	d004      	beq.n	46c0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	2201      	movs	r2, #1
    46ba:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    46bc:	2313      	movs	r3, #19
    46be:	e01b      	b.n	46f8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    46c0:	230b      	movs	r3, #11
    46c2:	18fb      	adds	r3, r7, r3
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	2210      	movs	r2, #16
    46c8:	4013      	ands	r3, r2
    46ca:	d004      	beq.n	46d6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	2210      	movs	r2, #16
    46d0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    46d2:	2342      	movs	r3, #66	; 0x42
    46d4:	e010      	b.n	46f8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    46d6:	230b      	movs	r3, #11
    46d8:	18fb      	adds	r3, r7, r3
    46da:	781b      	ldrb	r3, [r3, #0]
    46dc:	2220      	movs	r2, #32
    46de:	4013      	ands	r3, r2
    46e0:	d004      	beq.n	46ec <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    46e2:	68fb      	ldr	r3, [r7, #12]
    46e4:	2220      	movs	r2, #32
    46e6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    46e8:	2341      	movs	r3, #65	; 0x41
    46ea:	e005      	b.n	46f8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46f0:	b29a      	uxth	r2, r3
    46f2:	683b      	ldr	r3, [r7, #0]
    46f4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    46f6:	2300      	movs	r3, #0
}
    46f8:	0018      	movs	r0, r3
    46fa:	46bd      	mov	sp, r7
    46fc:	b004      	add	sp, #16
    46fe:	bd80      	pop	{r7, pc}
    4700:	00004041 	.word	0x00004041

00004704 <usart_is_syncing>:
{
    4704:	b580      	push	{r7, lr}
    4706:	b084      	sub	sp, #16
    4708:	af00      	add	r7, sp, #0
    470a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	681b      	ldr	r3, [r3, #0]
    4710:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4712:	68fb      	ldr	r3, [r7, #12]
    4714:	69db      	ldr	r3, [r3, #28]
    4716:	1e5a      	subs	r2, r3, #1
    4718:	4193      	sbcs	r3, r2
    471a:	b2db      	uxtb	r3, r3
}
    471c:	0018      	movs	r0, r3
    471e:	46bd      	mov	sp, r7
    4720:	b004      	add	sp, #16
    4722:	bd80      	pop	{r7, pc}

00004724 <_usart_wait_for_sync>:
{
    4724:	b580      	push	{r7, lr}
    4726:	b082      	sub	sp, #8
    4728:	af00      	add	r7, sp, #0
    472a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    472c:	46c0      	nop			; (mov r8, r8)
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	0018      	movs	r0, r3
    4732:	4b04      	ldr	r3, [pc, #16]	; (4744 <_usart_wait_for_sync+0x20>)
    4734:	4798      	blx	r3
    4736:	1e03      	subs	r3, r0, #0
    4738:	d1f9      	bne.n	472e <_usart_wait_for_sync+0xa>
}
    473a:	46c0      	nop			; (mov r8, r8)
    473c:	46bd      	mov	sp, r7
    473e:	b002      	add	sp, #8
    4740:	bd80      	pop	{r7, pc}
    4742:	46c0      	nop			; (mov r8, r8)
    4744:	00004705 	.word	0x00004705

00004748 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4748:	b580      	push	{r7, lr}
    474a:	b088      	sub	sp, #32
    474c:	af00      	add	r7, sp, #0
    474e:	0002      	movs	r2, r0
    4750:	1dfb      	adds	r3, r7, #7
    4752:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    4754:	1dfb      	adds	r3, r7, #7
    4756:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    4758:	4ba3      	ldr	r3, [pc, #652]	; (49e8 <_usart_interrupt_handler+0x2a0>)
    475a:	0092      	lsls	r2, r2, #2
    475c:	58d3      	ldr	r3, [r2, r3]
    475e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4760:	69bb      	ldr	r3, [r7, #24]
    4762:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    4764:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4766:	69bb      	ldr	r3, [r7, #24]
    4768:	0018      	movs	r0, r3
    476a:	4ba0      	ldr	r3, [pc, #640]	; (49ec <_usart_interrupt_handler+0x2a4>)
    476c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    476e:	697b      	ldr	r3, [r7, #20]
    4770:	7e1b      	ldrb	r3, [r3, #24]
    4772:	b2da      	uxtb	r2, r3
    4774:	2312      	movs	r3, #18
    4776:	18fb      	adds	r3, r7, r3
    4778:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    477a:	697b      	ldr	r3, [r7, #20]
    477c:	7d9b      	ldrb	r3, [r3, #22]
    477e:	b2db      	uxtb	r3, r3
    4780:	b29a      	uxth	r2, r3
    4782:	2312      	movs	r3, #18
    4784:	18fb      	adds	r3, r7, r3
    4786:	2112      	movs	r1, #18
    4788:	1879      	adds	r1, r7, r1
    478a:	8809      	ldrh	r1, [r1, #0]
    478c:	400a      	ands	r2, r1
    478e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4790:	69bb      	ldr	r3, [r7, #24]
    4792:	2230      	movs	r2, #48	; 0x30
    4794:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    4796:	69ba      	ldr	r2, [r7, #24]
    4798:	2131      	movs	r1, #49	; 0x31
    479a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    479c:	4013      	ands	r3, r2
    479e:	b2da      	uxtb	r2, r3
    47a0:	2310      	movs	r3, #16
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    47a6:	2312      	movs	r3, #18
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	881b      	ldrh	r3, [r3, #0]
    47ac:	2201      	movs	r2, #1
    47ae:	4013      	ands	r3, r2
    47b0:	d044      	beq.n	483c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    47b2:	69bb      	ldr	r3, [r7, #24]
    47b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    47b6:	b29b      	uxth	r3, r3
    47b8:	2b00      	cmp	r3, #0
    47ba:	d03c      	beq.n	4836 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    47bc:	69bb      	ldr	r3, [r7, #24]
    47be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	b2da      	uxtb	r2, r3
    47c4:	231c      	movs	r3, #28
    47c6:	18fb      	adds	r3, r7, r3
    47c8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    47ca:	69bb      	ldr	r3, [r7, #24]
    47cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47ce:	1c5a      	adds	r2, r3, #1
    47d0:	69bb      	ldr	r3, [r7, #24]
    47d2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    47d4:	69bb      	ldr	r3, [r7, #24]
    47d6:	795b      	ldrb	r3, [r3, #5]
    47d8:	2b01      	cmp	r3, #1
    47da:	d113      	bne.n	4804 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    47dc:	69bb      	ldr	r3, [r7, #24]
    47de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	b2db      	uxtb	r3, r3
    47e4:	021b      	lsls	r3, r3, #8
    47e6:	b21a      	sxth	r2, r3
    47e8:	231c      	movs	r3, #28
    47ea:	18fb      	adds	r3, r7, r3
    47ec:	2100      	movs	r1, #0
    47ee:	5e5b      	ldrsh	r3, [r3, r1]
    47f0:	4313      	orrs	r3, r2
    47f2:	b21a      	sxth	r2, r3
    47f4:	231c      	movs	r3, #28
    47f6:	18fb      	adds	r3, r7, r3
    47f8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    47fa:	69bb      	ldr	r3, [r7, #24]
    47fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47fe:	1c5a      	adds	r2, r3, #1
    4800:	69bb      	ldr	r3, [r7, #24]
    4802:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4804:	231c      	movs	r3, #28
    4806:	18fb      	adds	r3, r7, r3
    4808:	881b      	ldrh	r3, [r3, #0]
    480a:	05db      	lsls	r3, r3, #23
    480c:	0ddb      	lsrs	r3, r3, #23
    480e:	b29a      	uxth	r2, r3
    4810:	697b      	ldr	r3, [r7, #20]
    4812:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4814:	69bb      	ldr	r3, [r7, #24]
    4816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4818:	b29b      	uxth	r3, r3
    481a:	3b01      	subs	r3, #1
    481c:	b29b      	uxth	r3, r3
    481e:	69ba      	ldr	r2, [r7, #24]
    4820:	1c19      	adds	r1, r3, #0
    4822:	85d1      	strh	r1, [r2, #46]	; 0x2e
    4824:	2b00      	cmp	r3, #0
    4826:	d109      	bne.n	483c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4828:	697b      	ldr	r3, [r7, #20]
    482a:	2201      	movs	r2, #1
    482c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    482e:	697b      	ldr	r3, [r7, #20]
    4830:	2202      	movs	r2, #2
    4832:	759a      	strb	r2, [r3, #22]
    4834:	e002      	b.n	483c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4836:	697b      	ldr	r3, [r7, #20]
    4838:	2201      	movs	r2, #1
    483a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    483c:	2312      	movs	r3, #18
    483e:	18fb      	adds	r3, r7, r3
    4840:	881b      	ldrh	r3, [r3, #0]
    4842:	2202      	movs	r2, #2
    4844:	4013      	ands	r3, r2
    4846:	d011      	beq.n	486c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4848:	697b      	ldr	r3, [r7, #20]
    484a:	2202      	movs	r2, #2
    484c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    484e:	69bb      	ldr	r3, [r7, #24]
    4850:	2233      	movs	r2, #51	; 0x33
    4852:	2100      	movs	r1, #0
    4854:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4856:	2310      	movs	r3, #16
    4858:	18fb      	adds	r3, r7, r3
    485a:	881b      	ldrh	r3, [r3, #0]
    485c:	2201      	movs	r2, #1
    485e:	4013      	ands	r3, r2
    4860:	d004      	beq.n	486c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4862:	69bb      	ldr	r3, [r7, #24]
    4864:	68db      	ldr	r3, [r3, #12]
    4866:	69ba      	ldr	r2, [r7, #24]
    4868:	0010      	movs	r0, r2
    486a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    486c:	2312      	movs	r3, #18
    486e:	18fb      	adds	r3, r7, r3
    4870:	881b      	ldrh	r3, [r3, #0]
    4872:	2204      	movs	r2, #4
    4874:	4013      	ands	r3, r2
    4876:	d100      	bne.n	487a <_usart_interrupt_handler+0x132>
    4878:	e0bd      	b.n	49f6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    487a:	69bb      	ldr	r3, [r7, #24]
    487c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    487e:	b29b      	uxth	r3, r3
    4880:	2b00      	cmp	r3, #0
    4882:	d100      	bne.n	4886 <_usart_interrupt_handler+0x13e>
    4884:	e0b4      	b.n	49f0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4886:	697b      	ldr	r3, [r7, #20]
    4888:	8b5b      	ldrh	r3, [r3, #26]
    488a:	b29b      	uxth	r3, r3
    488c:	b2da      	uxtb	r2, r3
    488e:	231f      	movs	r3, #31
    4890:	18fb      	adds	r3, r7, r3
    4892:	213f      	movs	r1, #63	; 0x3f
    4894:	400a      	ands	r2, r1
    4896:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4898:	231f      	movs	r3, #31
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2208      	movs	r2, #8
    48a0:	4013      	ands	r3, r2
    48a2:	d007      	beq.n	48b4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    48a4:	231f      	movs	r3, #31
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	221f      	movs	r2, #31
    48aa:	18ba      	adds	r2, r7, r2
    48ac:	7812      	ldrb	r2, [r2, #0]
    48ae:	2108      	movs	r1, #8
    48b0:	438a      	bics	r2, r1
    48b2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    48b4:	231f      	movs	r3, #31
    48b6:	18fb      	adds	r3, r7, r3
    48b8:	781b      	ldrb	r3, [r3, #0]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d050      	beq.n	4960 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    48be:	231f      	movs	r3, #31
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	781b      	ldrb	r3, [r3, #0]
    48c4:	2202      	movs	r2, #2
    48c6:	4013      	ands	r3, r2
    48c8:	d007      	beq.n	48da <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    48ca:	69bb      	ldr	r3, [r7, #24]
    48cc:	2232      	movs	r2, #50	; 0x32
    48ce:	211a      	movs	r1, #26
    48d0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    48d2:	697b      	ldr	r3, [r7, #20]
    48d4:	2202      	movs	r2, #2
    48d6:	835a      	strh	r2, [r3, #26]
    48d8:	e036      	b.n	4948 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    48da:	231f      	movs	r3, #31
    48dc:	18fb      	adds	r3, r7, r3
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	2204      	movs	r2, #4
    48e2:	4013      	ands	r3, r2
    48e4:	d007      	beq.n	48f6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    48e6:	69bb      	ldr	r3, [r7, #24]
    48e8:	2232      	movs	r2, #50	; 0x32
    48ea:	211e      	movs	r1, #30
    48ec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    48ee:	697b      	ldr	r3, [r7, #20]
    48f0:	2204      	movs	r2, #4
    48f2:	835a      	strh	r2, [r3, #26]
    48f4:	e028      	b.n	4948 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    48f6:	231f      	movs	r3, #31
    48f8:	18fb      	adds	r3, r7, r3
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	2201      	movs	r2, #1
    48fe:	4013      	ands	r3, r2
    4900:	d007      	beq.n	4912 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4902:	69bb      	ldr	r3, [r7, #24]
    4904:	2232      	movs	r2, #50	; 0x32
    4906:	2113      	movs	r1, #19
    4908:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    490a:	697b      	ldr	r3, [r7, #20]
    490c:	2201      	movs	r2, #1
    490e:	835a      	strh	r2, [r3, #26]
    4910:	e01a      	b.n	4948 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4912:	231f      	movs	r3, #31
    4914:	18fb      	adds	r3, r7, r3
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	2210      	movs	r2, #16
    491a:	4013      	ands	r3, r2
    491c:	d007      	beq.n	492e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    491e:	69bb      	ldr	r3, [r7, #24]
    4920:	2232      	movs	r2, #50	; 0x32
    4922:	2142      	movs	r1, #66	; 0x42
    4924:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4926:	697b      	ldr	r3, [r7, #20]
    4928:	2210      	movs	r2, #16
    492a:	835a      	strh	r2, [r3, #26]
    492c:	e00c      	b.n	4948 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    492e:	231f      	movs	r3, #31
    4930:	18fb      	adds	r3, r7, r3
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	2220      	movs	r2, #32
    4936:	4013      	ands	r3, r2
    4938:	d006      	beq.n	4948 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    493a:	69bb      	ldr	r3, [r7, #24]
    493c:	2232      	movs	r2, #50	; 0x32
    493e:	2141      	movs	r1, #65	; 0x41
    4940:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4942:	697b      	ldr	r3, [r7, #20]
    4944:	2220      	movs	r2, #32
    4946:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    4948:	2310      	movs	r3, #16
    494a:	18fb      	adds	r3, r7, r3
    494c:	881b      	ldrh	r3, [r3, #0]
    494e:	2204      	movs	r2, #4
    4950:	4013      	ands	r3, r2
				if (callback_status
    4952:	d050      	beq.n	49f6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4954:	69bb      	ldr	r3, [r7, #24]
    4956:	695b      	ldr	r3, [r3, #20]
    4958:	69ba      	ldr	r2, [r7, #24]
    495a:	0010      	movs	r0, r2
    495c:	4798      	blx	r3
    495e:	e04a      	b.n	49f6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4960:	697b      	ldr	r3, [r7, #20]
    4962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4964:	b29a      	uxth	r2, r3
    4966:	230e      	movs	r3, #14
    4968:	18fb      	adds	r3, r7, r3
    496a:	05d2      	lsls	r2, r2, #23
    496c:	0dd2      	lsrs	r2, r2, #23
    496e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4970:	69bb      	ldr	r3, [r7, #24]
    4972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4974:	220e      	movs	r2, #14
    4976:	18ba      	adds	r2, r7, r2
    4978:	8812      	ldrh	r2, [r2, #0]
    497a:	b2d2      	uxtb	r2, r2
    497c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    497e:	69bb      	ldr	r3, [r7, #24]
    4980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4982:	1c5a      	adds	r2, r3, #1
    4984:	69bb      	ldr	r3, [r7, #24]
    4986:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4988:	69bb      	ldr	r3, [r7, #24]
    498a:	795b      	ldrb	r3, [r3, #5]
    498c:	2b01      	cmp	r3, #1
    498e:	d10d      	bne.n	49ac <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4990:	69bb      	ldr	r3, [r7, #24]
    4992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4994:	220e      	movs	r2, #14
    4996:	18ba      	adds	r2, r7, r2
    4998:	8812      	ldrh	r2, [r2, #0]
    499a:	0a12      	lsrs	r2, r2, #8
    499c:	b292      	uxth	r2, r2
    499e:	b2d2      	uxtb	r2, r2
    49a0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    49a2:	69bb      	ldr	r3, [r7, #24]
    49a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49a6:	1c5a      	adds	r2, r3, #1
    49a8:	69bb      	ldr	r3, [r7, #24]
    49aa:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    49ac:	69bb      	ldr	r3, [r7, #24]
    49ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    49b0:	b29b      	uxth	r3, r3
    49b2:	3b01      	subs	r3, #1
    49b4:	b29b      	uxth	r3, r3
    49b6:	69ba      	ldr	r2, [r7, #24]
    49b8:	1c19      	adds	r1, r3, #0
    49ba:	8591      	strh	r1, [r2, #44]	; 0x2c
    49bc:	2b00      	cmp	r3, #0
    49be:	d11a      	bne.n	49f6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    49c0:	697b      	ldr	r3, [r7, #20]
    49c2:	2204      	movs	r2, #4
    49c4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    49c6:	69bb      	ldr	r3, [r7, #24]
    49c8:	2232      	movs	r2, #50	; 0x32
    49ca:	2100      	movs	r1, #0
    49cc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    49ce:	2310      	movs	r3, #16
    49d0:	18fb      	adds	r3, r7, r3
    49d2:	881b      	ldrh	r3, [r3, #0]
    49d4:	2202      	movs	r2, #2
    49d6:	4013      	ands	r3, r2
					if (callback_status
    49d8:	d00d      	beq.n	49f6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    49da:	69bb      	ldr	r3, [r7, #24]
    49dc:	691b      	ldr	r3, [r3, #16]
    49de:	69ba      	ldr	r2, [r7, #24]
    49e0:	0010      	movs	r0, r2
    49e2:	4798      	blx	r3
    49e4:	e007      	b.n	49f6 <_usart_interrupt_handler+0x2ae>
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	200003c0 	.word	0x200003c0
    49ec:	00004725 	.word	0x00004725
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    49f0:	697b      	ldr	r3, [r7, #20]
    49f2:	2204      	movs	r2, #4
    49f4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    49f6:	2312      	movs	r3, #18
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	881b      	ldrh	r3, [r3, #0]
    49fc:	2210      	movs	r2, #16
    49fe:	4013      	ands	r3, r2
    4a00:	d010      	beq.n	4a24 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4a02:	697b      	ldr	r3, [r7, #20]
    4a04:	2210      	movs	r2, #16
    4a06:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4a08:	697b      	ldr	r3, [r7, #20]
    4a0a:	2210      	movs	r2, #16
    4a0c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4a0e:	2310      	movs	r3, #16
    4a10:	18fb      	adds	r3, r7, r3
    4a12:	881b      	ldrh	r3, [r3, #0]
    4a14:	2210      	movs	r2, #16
    4a16:	4013      	ands	r3, r2
    4a18:	d004      	beq.n	4a24 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4a1a:	69bb      	ldr	r3, [r7, #24]
    4a1c:	69db      	ldr	r3, [r3, #28]
    4a1e:	69ba      	ldr	r2, [r7, #24]
    4a20:	0010      	movs	r0, r2
    4a22:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4a24:	2312      	movs	r3, #18
    4a26:	18fb      	adds	r3, r7, r3
    4a28:	881b      	ldrh	r3, [r3, #0]
    4a2a:	2220      	movs	r2, #32
    4a2c:	4013      	ands	r3, r2
    4a2e:	d010      	beq.n	4a52 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4a30:	697b      	ldr	r3, [r7, #20]
    4a32:	2220      	movs	r2, #32
    4a34:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4a36:	697b      	ldr	r3, [r7, #20]
    4a38:	2220      	movs	r2, #32
    4a3a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4a3c:	2310      	movs	r3, #16
    4a3e:	18fb      	adds	r3, r7, r3
    4a40:	881b      	ldrh	r3, [r3, #0]
    4a42:	2208      	movs	r2, #8
    4a44:	4013      	ands	r3, r2
    4a46:	d004      	beq.n	4a52 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4a48:	69bb      	ldr	r3, [r7, #24]
    4a4a:	699b      	ldr	r3, [r3, #24]
    4a4c:	69ba      	ldr	r2, [r7, #24]
    4a4e:	0010      	movs	r0, r2
    4a50:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4a52:	2312      	movs	r3, #18
    4a54:	18fb      	adds	r3, r7, r3
    4a56:	881b      	ldrh	r3, [r3, #0]
    4a58:	2208      	movs	r2, #8
    4a5a:	4013      	ands	r3, r2
    4a5c:	d010      	beq.n	4a80 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2208      	movs	r2, #8
    4a62:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4a64:	697b      	ldr	r3, [r7, #20]
    4a66:	2208      	movs	r2, #8
    4a68:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4a6a:	2310      	movs	r3, #16
    4a6c:	18fb      	adds	r3, r7, r3
    4a6e:	881b      	ldrh	r3, [r3, #0]
    4a70:	2220      	movs	r2, #32
    4a72:	4013      	ands	r3, r2
    4a74:	d004      	beq.n	4a80 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4a76:	69bb      	ldr	r3, [r7, #24]
    4a78:	6a1b      	ldr	r3, [r3, #32]
    4a7a:	69ba      	ldr	r2, [r7, #24]
    4a7c:	0010      	movs	r0, r2
    4a7e:	4798      	blx	r3
		}
	}
#endif
}
    4a80:	46c0      	nop			; (mov r8, r8)
    4a82:	46bd      	mov	sp, r7
    4a84:	b008      	add	sp, #32
    4a86:	bd80      	pop	{r7, pc}

00004a88 <system_gclk_gen_get_config_defaults>:
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	2201      	movs	r2, #1
    4a94:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	2200      	movs	r2, #0
    4a9a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	2206      	movs	r2, #6
    4aa0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	2200      	movs	r2, #0
    4aa6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	2200      	movs	r2, #0
    4aac:	725a      	strb	r2, [r3, #9]
}
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	46bd      	mov	sp, r7
    4ab2:	b002      	add	sp, #8
    4ab4:	bd80      	pop	{r7, pc}

00004ab6 <system_gclk_chan_get_config_defaults>:
{
    4ab6:	b580      	push	{r7, lr}
    4ab8:	b082      	sub	sp, #8
    4aba:	af00      	add	r7, sp, #0
    4abc:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	2200      	movs	r2, #0
    4ac2:	701a      	strb	r2, [r3, #0]
}
    4ac4:	46c0      	nop			; (mov r8, r8)
    4ac6:	46bd      	mov	sp, r7
    4ac8:	b002      	add	sp, #8
    4aca:	bd80      	pop	{r7, pc}

00004acc <system_clock_source_xosc32k_get_config_defaults>:
{
    4acc:	b580      	push	{r7, lr}
    4ace:	b082      	sub	sp, #8
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	2200      	movs	r2, #0
    4ad8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	2204      	movs	r2, #4
    4ade:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	2200      	movs	r2, #0
    4ae4:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	2280      	movs	r2, #128	; 0x80
    4aea:	0212      	lsls	r2, r2, #8
    4aec:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	2200      	movs	r2, #0
    4af2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	2201      	movs	r2, #1
    4af8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	2200      	movs	r2, #0
    4afe:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	2201      	movs	r2, #1
    4b04:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    4b06:	687b      	ldr	r3, [r7, #4]
    4b08:	2200      	movs	r2, #0
    4b0a:	739a      	strb	r2, [r3, #14]
}
    4b0c:	46c0      	nop			; (mov r8, r8)
    4b0e:	46bd      	mov	sp, r7
    4b10:	b002      	add	sp, #8
    4b12:	bd80      	pop	{r7, pc}

00004b14 <system_clock_source_osc8m_get_config_defaults>:
{
    4b14:	b580      	push	{r7, lr}
    4b16:	b082      	sub	sp, #8
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	2203      	movs	r2, #3
    4b20:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	2200      	movs	r2, #0
    4b26:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	2201      	movs	r2, #1
    4b2c:	709a      	strb	r2, [r3, #2]
}
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	46bd      	mov	sp, r7
    4b32:	b002      	add	sp, #8
    4b34:	bd80      	pop	{r7, pc}

00004b36 <system_clock_source_dfll_get_config_defaults>:
{
    4b36:	b580      	push	{r7, lr}
    4b38:	b082      	sub	sp, #8
    4b3a:	af00      	add	r7, sp, #0
    4b3c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	2200      	movs	r2, #0
    4b42:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4b44:	687b      	ldr	r3, [r7, #4]
    4b46:	2200      	movs	r2, #0
    4b48:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4b4a:	687b      	ldr	r3, [r7, #4]
    4b4c:	2200      	movs	r2, #0
    4b4e:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	2200      	movs	r2, #0
    4b54:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4b56:	687b      	ldr	r3, [r7, #4]
    4b58:	2200      	movs	r2, #0
    4b5a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	2201      	movs	r2, #1
    4b60:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	2207      	movs	r2, #7
    4b66:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	223f      	movs	r2, #63	; 0x3f
    4b6c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	2201      	movs	r2, #1
    4b72:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	2201      	movs	r2, #1
    4b78:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	2206      	movs	r2, #6
    4b7e:	821a      	strh	r2, [r3, #16]
}
    4b80:	46c0      	nop			; (mov r8, r8)
    4b82:	46bd      	mov	sp, r7
    4b84:	b002      	add	sp, #8
    4b86:	bd80      	pop	{r7, pc}

00004b88 <system_cpu_clock_set_divider>:
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	b082      	sub	sp, #8
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	0002      	movs	r2, r0
    4b90:	1dfb      	adds	r3, r7, #7
    4b92:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    4b94:	4a03      	ldr	r2, [pc, #12]	; (4ba4 <system_cpu_clock_set_divider+0x1c>)
    4b96:	1dfb      	adds	r3, r7, #7
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	7213      	strb	r3, [r2, #8]
}
    4b9c:	46c0      	nop			; (mov r8, r8)
    4b9e:	46bd      	mov	sp, r7
    4ba0:	b002      	add	sp, #8
    4ba2:	bd80      	pop	{r7, pc}
    4ba4:	40000400 	.word	0x40000400

00004ba8 <system_apb_clock_set_divider>:
{
    4ba8:	b580      	push	{r7, lr}
    4baa:	b082      	sub	sp, #8
    4bac:	af00      	add	r7, sp, #0
    4bae:	0002      	movs	r2, r0
    4bb0:	1dfb      	adds	r3, r7, #7
    4bb2:	701a      	strb	r2, [r3, #0]
    4bb4:	1dbb      	adds	r3, r7, #6
    4bb6:	1c0a      	adds	r2, r1, #0
    4bb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4bba:	1dfb      	adds	r3, r7, #7
    4bbc:	781b      	ldrb	r3, [r3, #0]
    4bbe:	2b01      	cmp	r3, #1
    4bc0:	d008      	beq.n	4bd4 <system_apb_clock_set_divider+0x2c>
    4bc2:	2b02      	cmp	r3, #2
    4bc4:	d00b      	beq.n	4bde <system_apb_clock_set_divider+0x36>
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d10e      	bne.n	4be8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    4bca:	4a0b      	ldr	r2, [pc, #44]	; (4bf8 <system_apb_clock_set_divider+0x50>)
    4bcc:	1dbb      	adds	r3, r7, #6
    4bce:	781b      	ldrb	r3, [r3, #0]
    4bd0:	7253      	strb	r3, [r2, #9]
			break;
    4bd2:	e00b      	b.n	4bec <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    4bd4:	4a08      	ldr	r2, [pc, #32]	; (4bf8 <system_apb_clock_set_divider+0x50>)
    4bd6:	1dbb      	adds	r3, r7, #6
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	7293      	strb	r3, [r2, #10]
			break;
    4bdc:	e006      	b.n	4bec <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    4bde:	4a06      	ldr	r2, [pc, #24]	; (4bf8 <system_apb_clock_set_divider+0x50>)
    4be0:	1dbb      	adds	r3, r7, #6
    4be2:	781b      	ldrb	r3, [r3, #0]
    4be4:	72d3      	strb	r3, [r2, #11]
			break;
    4be6:	e001      	b.n	4bec <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    4be8:	2317      	movs	r3, #23
    4bea:	e000      	b.n	4bee <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    4bec:	2300      	movs	r3, #0
}
    4bee:	0018      	movs	r0, r3
    4bf0:	46bd      	mov	sp, r7
    4bf2:	b002      	add	sp, #8
    4bf4:	bd80      	pop	{r7, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	40000400 	.word	0x40000400

00004bfc <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b082      	sub	sp, #8
    4c00:	af00      	add	r7, sp, #0
    4c02:	0002      	movs	r2, r0
    4c04:	1dfb      	adds	r3, r7, #7
    4c06:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c08:	4a08      	ldr	r2, [pc, #32]	; (4c2c <system_flash_set_waitstates+0x30>)
    4c0a:	1dfb      	adds	r3, r7, #7
    4c0c:	781b      	ldrb	r3, [r3, #0]
    4c0e:	210f      	movs	r1, #15
    4c10:	400b      	ands	r3, r1
    4c12:	b2d9      	uxtb	r1, r3
    4c14:	6853      	ldr	r3, [r2, #4]
    4c16:	200f      	movs	r0, #15
    4c18:	4001      	ands	r1, r0
    4c1a:	0049      	lsls	r1, r1, #1
    4c1c:	201e      	movs	r0, #30
    4c1e:	4383      	bics	r3, r0
    4c20:	430b      	orrs	r3, r1
    4c22:	6053      	str	r3, [r2, #4]
}
    4c24:	46c0      	nop			; (mov r8, r8)
    4c26:	46bd      	mov	sp, r7
    4c28:	b002      	add	sp, #8
    4c2a:	bd80      	pop	{r7, pc}
    4c2c:	41004000 	.word	0x41004000

00004c30 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4c30:	b580      	push	{r7, lr}
    4c32:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4c34:	46c0      	nop			; (mov r8, r8)
    4c36:	4b04      	ldr	r3, [pc, #16]	; (4c48 <_system_dfll_wait_for_sync+0x18>)
    4c38:	68db      	ldr	r3, [r3, #12]
    4c3a:	2210      	movs	r2, #16
    4c3c:	4013      	ands	r3, r2
    4c3e:	d0fa      	beq.n	4c36 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4c40:	46c0      	nop			; (mov r8, r8)
    4c42:	46bd      	mov	sp, r7
    4c44:	bd80      	pop	{r7, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	40000800 	.word	0x40000800

00004c4c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4c4c:	b580      	push	{r7, lr}
    4c4e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4c50:	4b0c      	ldr	r3, [pc, #48]	; (4c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c52:	2202      	movs	r2, #2
    4c54:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4c56:	4b0c      	ldr	r3, [pc, #48]	; (4c88 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4c58:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4c5a:	4a0a      	ldr	r2, [pc, #40]	; (4c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c5c:	4b0b      	ldr	r3, [pc, #44]	; (4c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4c5e:	689b      	ldr	r3, [r3, #8]
    4c60:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4c62:	4a08      	ldr	r2, [pc, #32]	; (4c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c64:	4b09      	ldr	r3, [pc, #36]	; (4c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4c66:	685b      	ldr	r3, [r3, #4]
    4c68:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4c6a:	4b06      	ldr	r3, [pc, #24]	; (4c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c6c:	2200      	movs	r2, #0
    4c6e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4c70:	4b05      	ldr	r3, [pc, #20]	; (4c88 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4c72:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4c74:	4a03      	ldr	r2, [pc, #12]	; (4c84 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4c76:	4b05      	ldr	r3, [pc, #20]	; (4c8c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	b29b      	uxth	r3, r3
    4c7c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	40000800 	.word	0x40000800
    4c88:	00004c31 	.word	0x00004c31
    4c8c:	20000284 	.word	0x20000284

00004c90 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4c90:	b580      	push	{r7, lr}
    4c92:	b082      	sub	sp, #8
    4c94:	af00      	add	r7, sp, #0
    4c96:	0002      	movs	r2, r0
    4c98:	1dfb      	adds	r3, r7, #7
    4c9a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4c9c:	1dfb      	adds	r3, r7, #7
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	2b08      	cmp	r3, #8
    4ca2:	d840      	bhi.n	4d26 <system_clock_source_get_hz+0x96>
    4ca4:	009a      	lsls	r2, r3, #2
    4ca6:	4b22      	ldr	r3, [pc, #136]	; (4d30 <system_clock_source_get_hz+0xa0>)
    4ca8:	18d3      	adds	r3, r2, r3
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4cae:	4b21      	ldr	r3, [pc, #132]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4cb0:	691b      	ldr	r3, [r3, #16]
    4cb2:	e039      	b.n	4d28 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4cb4:	4b20      	ldr	r3, [pc, #128]	; (4d38 <system_clock_source_get_hz+0xa8>)
    4cb6:	6a1b      	ldr	r3, [r3, #32]
    4cb8:	059b      	lsls	r3, r3, #22
    4cba:	0f9b      	lsrs	r3, r3, #30
    4cbc:	b2db      	uxtb	r3, r3
    4cbe:	001a      	movs	r2, r3
    4cc0:	4b1e      	ldr	r3, [pc, #120]	; (4d3c <system_clock_source_get_hz+0xac>)
    4cc2:	40d3      	lsrs	r3, r2
    4cc4:	e030      	b.n	4d28 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4cc6:	2380      	movs	r3, #128	; 0x80
    4cc8:	021b      	lsls	r3, r3, #8
    4cca:	e02d      	b.n	4d28 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4ccc:	2380      	movs	r3, #128	; 0x80
    4cce:	021b      	lsls	r3, r3, #8
    4cd0:	e02a      	b.n	4d28 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4cd2:	4b18      	ldr	r3, [pc, #96]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4cd4:	695b      	ldr	r3, [r3, #20]
    4cd6:	e027      	b.n	4d28 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4cd8:	4b16      	ldr	r3, [pc, #88]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4cda:	681b      	ldr	r3, [r3, #0]
    4cdc:	2202      	movs	r2, #2
    4cde:	4013      	ands	r3, r2
    4ce0:	d101      	bne.n	4ce6 <system_clock_source_get_hz+0x56>
			return 0;
    4ce2:	2300      	movs	r3, #0
    4ce4:	e020      	b.n	4d28 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4ce6:	4b16      	ldr	r3, [pc, #88]	; (4d40 <system_clock_source_get_hz+0xb0>)
    4ce8:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4cea:	4b12      	ldr	r3, [pc, #72]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	2204      	movs	r2, #4
    4cf0:	4013      	ands	r3, r2
    4cf2:	d009      	beq.n	4d08 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4cf4:	2000      	movs	r0, #0
    4cf6:	4b13      	ldr	r3, [pc, #76]	; (4d44 <system_clock_source_get_hz+0xb4>)
    4cf8:	4798      	blx	r3
    4cfa:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4cfc:	4b0d      	ldr	r3, [pc, #52]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4cfe:	689b      	ldr	r3, [r3, #8]
    4d00:	041b      	lsls	r3, r3, #16
    4d02:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d04:	4353      	muls	r3, r2
    4d06:	e00f      	b.n	4d28 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    4d08:	4b0f      	ldr	r3, [pc, #60]	; (4d48 <system_clock_source_get_hz+0xb8>)
    4d0a:	e00d      	b.n	4d28 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d0c:	4a0a      	ldr	r2, [pc, #40]	; (4d38 <system_clock_source_get_hz+0xa8>)
    4d0e:	2350      	movs	r3, #80	; 0x50
    4d10:	5cd3      	ldrb	r3, [r2, r3]
    4d12:	b2db      	uxtb	r3, r3
    4d14:	001a      	movs	r2, r3
    4d16:	2304      	movs	r3, #4
    4d18:	4013      	ands	r3, r2
    4d1a:	d101      	bne.n	4d20 <system_clock_source_get_hz+0x90>
			return 0;
    4d1c:	2300      	movs	r3, #0
    4d1e:	e003      	b.n	4d28 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    4d20:	4b04      	ldr	r3, [pc, #16]	; (4d34 <system_clock_source_get_hz+0xa4>)
    4d22:	68db      	ldr	r3, [r3, #12]
    4d24:	e000      	b.n	4d28 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    4d26:	2300      	movs	r3, #0
	}
}
    4d28:	0018      	movs	r0, r3
    4d2a:	46bd      	mov	sp, r7
    4d2c:	b002      	add	sp, #8
    4d2e:	bd80      	pop	{r7, pc}
    4d30:	0000a518 	.word	0x0000a518
    4d34:	20000284 	.word	0x20000284
    4d38:	40000800 	.word	0x40000800
    4d3c:	007a1200 	.word	0x007a1200
    4d40:	00004c31 	.word	0x00004c31
    4d44:	000057e9 	.word	0x000057e9
    4d48:	02dc6c00 	.word	0x02dc6c00

00004d4c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b084      	sub	sp, #16
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4d54:	4b1a      	ldr	r3, [pc, #104]	; (4dc0 <system_clock_source_osc8m_set_config+0x74>)
    4d56:	6a1b      	ldr	r3, [r3, #32]
    4d58:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	1c1a      	adds	r2, r3, #0
    4d60:	2303      	movs	r3, #3
    4d62:	4013      	ands	r3, r2
    4d64:	b2da      	uxtb	r2, r3
    4d66:	230d      	movs	r3, #13
    4d68:	18fb      	adds	r3, r7, r3
    4d6a:	2103      	movs	r1, #3
    4d6c:	400a      	ands	r2, r1
    4d6e:	0010      	movs	r0, r2
    4d70:	781a      	ldrb	r2, [r3, #0]
    4d72:	2103      	movs	r1, #3
    4d74:	438a      	bics	r2, r1
    4d76:	1c11      	adds	r1, r2, #0
    4d78:	1c02      	adds	r2, r0, #0
    4d7a:	430a      	orrs	r2, r1
    4d7c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	789a      	ldrb	r2, [r3, #2]
    4d82:	230c      	movs	r3, #12
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	01d0      	lsls	r0, r2, #7
    4d88:	781a      	ldrb	r2, [r3, #0]
    4d8a:	217f      	movs	r1, #127	; 0x7f
    4d8c:	400a      	ands	r2, r1
    4d8e:	1c11      	adds	r1, r2, #0
    4d90:	1c02      	adds	r2, r0, #0
    4d92:	430a      	orrs	r2, r1
    4d94:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	785a      	ldrb	r2, [r3, #1]
    4d9a:	230c      	movs	r3, #12
    4d9c:	18fb      	adds	r3, r7, r3
    4d9e:	2101      	movs	r1, #1
    4da0:	400a      	ands	r2, r1
    4da2:	0190      	lsls	r0, r2, #6
    4da4:	781a      	ldrb	r2, [r3, #0]
    4da6:	2140      	movs	r1, #64	; 0x40
    4da8:	438a      	bics	r2, r1
    4daa:	1c11      	adds	r1, r2, #0
    4dac:	1c02      	adds	r2, r0, #0
    4dae:	430a      	orrs	r2, r1
    4db0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4db2:	4b03      	ldr	r3, [pc, #12]	; (4dc0 <system_clock_source_osc8m_set_config+0x74>)
    4db4:	68fa      	ldr	r2, [r7, #12]
    4db6:	621a      	str	r2, [r3, #32]
}
    4db8:	46c0      	nop			; (mov r8, r8)
    4dba:	46bd      	mov	sp, r7
    4dbc:	b004      	add	sp, #16
    4dbe:	bd80      	pop	{r7, pc}
    4dc0:	40000800 	.word	0x40000800

00004dc4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4dc4:	b580      	push	{r7, lr}
    4dc6:	b084      	sub	sp, #16
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4dcc:	4a43      	ldr	r2, [pc, #268]	; (4edc <system_clock_source_xosc32k_set_config+0x118>)
    4dce:	230c      	movs	r3, #12
    4dd0:	18fb      	adds	r3, r7, r3
    4dd2:	8a92      	ldrh	r2, [r2, #20]
    4dd4:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	785b      	ldrb	r3, [r3, #1]
    4dda:	1c1a      	adds	r2, r3, #0
    4ddc:	2307      	movs	r3, #7
    4dde:	4013      	ands	r3, r2
    4de0:	b2da      	uxtb	r2, r3
    4de2:	230c      	movs	r3, #12
    4de4:	18fb      	adds	r3, r7, r3
    4de6:	2107      	movs	r1, #7
    4de8:	400a      	ands	r2, r1
    4dea:	0010      	movs	r0, r2
    4dec:	785a      	ldrb	r2, [r3, #1]
    4dee:	2107      	movs	r1, #7
    4df0:	438a      	bics	r2, r1
    4df2:	1c11      	adds	r1, r2, #0
    4df4:	1c02      	adds	r2, r0, #0
    4df6:	430a      	orrs	r2, r1
    4df8:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d106      	bne.n	4e10 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    4e02:	230c      	movs	r3, #12
    4e04:	18fb      	adds	r3, r7, r3
    4e06:	781a      	ldrb	r2, [r3, #0]
    4e08:	2104      	movs	r1, #4
    4e0a:	430a      	orrs	r2, r1
    4e0c:	701a      	strb	r2, [r3, #0]
    4e0e:	e005      	b.n	4e1c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    4e10:	230c      	movs	r3, #12
    4e12:	18fb      	adds	r3, r7, r3
    4e14:	781a      	ldrb	r2, [r3, #0]
    4e16:	2104      	movs	r1, #4
    4e18:	438a      	bics	r2, r1
    4e1a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4e1c:	687b      	ldr	r3, [r7, #4]
    4e1e:	789a      	ldrb	r2, [r3, #2]
    4e20:	230c      	movs	r3, #12
    4e22:	18fb      	adds	r3, r7, r3
    4e24:	2101      	movs	r1, #1
    4e26:	400a      	ands	r2, r1
    4e28:	0150      	lsls	r0, r2, #5
    4e2a:	781a      	ldrb	r2, [r3, #0]
    4e2c:	2120      	movs	r1, #32
    4e2e:	438a      	bics	r2, r1
    4e30:	1c11      	adds	r1, r2, #0
    4e32:	1c02      	adds	r2, r0, #0
    4e34:	430a      	orrs	r2, r1
    4e36:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	78da      	ldrb	r2, [r3, #3]
    4e3c:	230c      	movs	r3, #12
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	2101      	movs	r1, #1
    4e42:	400a      	ands	r2, r1
    4e44:	0110      	lsls	r0, r2, #4
    4e46:	781a      	ldrb	r2, [r3, #0]
    4e48:	2110      	movs	r1, #16
    4e4a:	438a      	bics	r2, r1
    4e4c:	1c11      	adds	r1, r2, #0
    4e4e:	1c02      	adds	r2, r0, #0
    4e50:	430a      	orrs	r2, r1
    4e52:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	791a      	ldrb	r2, [r3, #4]
    4e58:	230c      	movs	r3, #12
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	2101      	movs	r1, #1
    4e5e:	400a      	ands	r2, r1
    4e60:	00d0      	lsls	r0, r2, #3
    4e62:	781a      	ldrb	r2, [r3, #0]
    4e64:	2108      	movs	r1, #8
    4e66:	438a      	bics	r2, r1
    4e68:	1c11      	adds	r1, r2, #0
    4e6a:	1c02      	adds	r2, r0, #0
    4e6c:	430a      	orrs	r2, r1
    4e6e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	7b5a      	ldrb	r2, [r3, #13]
    4e74:	230c      	movs	r3, #12
    4e76:	18fb      	adds	r3, r7, r3
    4e78:	01d0      	lsls	r0, r2, #7
    4e7a:	781a      	ldrb	r2, [r3, #0]
    4e7c:	217f      	movs	r1, #127	; 0x7f
    4e7e:	400a      	ands	r2, r1
    4e80:	1c11      	adds	r1, r2, #0
    4e82:	1c02      	adds	r2, r0, #0
    4e84:	430a      	orrs	r2, r1
    4e86:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	7b1a      	ldrb	r2, [r3, #12]
    4e8c:	230c      	movs	r3, #12
    4e8e:	18fb      	adds	r3, r7, r3
    4e90:	2101      	movs	r1, #1
    4e92:	400a      	ands	r2, r1
    4e94:	0190      	lsls	r0, r2, #6
    4e96:	781a      	ldrb	r2, [r3, #0]
    4e98:	2140      	movs	r1, #64	; 0x40
    4e9a:	438a      	bics	r2, r1
    4e9c:	1c11      	adds	r1, r2, #0
    4e9e:	1c02      	adds	r2, r0, #0
    4ea0:	430a      	orrs	r2, r1
    4ea2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	7b9a      	ldrb	r2, [r3, #14]
    4ea8:	230c      	movs	r3, #12
    4eaa:	18fb      	adds	r3, r7, r3
    4eac:	2101      	movs	r1, #1
    4eae:	400a      	ands	r2, r1
    4eb0:	0110      	lsls	r0, r2, #4
    4eb2:	785a      	ldrb	r2, [r3, #1]
    4eb4:	2110      	movs	r1, #16
    4eb6:	438a      	bics	r2, r1
    4eb8:	1c11      	adds	r1, r2, #0
    4eba:	1c02      	adds	r2, r0, #0
    4ebc:	430a      	orrs	r2, r1
    4ebe:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	689a      	ldr	r2, [r3, #8]
    4ec4:	4b06      	ldr	r3, [pc, #24]	; (4ee0 <system_clock_source_xosc32k_set_config+0x11c>)
    4ec6:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    4ec8:	4a04      	ldr	r2, [pc, #16]	; (4edc <system_clock_source_xosc32k_set_config+0x118>)
    4eca:	230c      	movs	r3, #12
    4ecc:	18fb      	adds	r3, r7, r3
    4ece:	881b      	ldrh	r3, [r3, #0]
    4ed0:	8293      	strh	r3, [r2, #20]
}
    4ed2:	46c0      	nop			; (mov r8, r8)
    4ed4:	46bd      	mov	sp, r7
    4ed6:	b004      	add	sp, #16
    4ed8:	bd80      	pop	{r7, pc}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	40000800 	.word	0x40000800
    4ee0:	20000284 	.word	0x20000284

00004ee4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b082      	sub	sp, #8
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	7a1b      	ldrb	r3, [r3, #8]
    4ef0:	029b      	lsls	r3, r3, #10
    4ef2:	041b      	lsls	r3, r3, #16
    4ef4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	895b      	ldrh	r3, [r3, #10]
    4efa:	059b      	lsls	r3, r3, #22
    4efc:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4efe:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    4f00:	4b2a      	ldr	r3, [pc, #168]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f02:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    4f0c:	4313      	orrs	r3, r2
    4f0e:	b2db      	uxtb	r3, r3
    4f10:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    4f16:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    4f18:	687a      	ldr	r2, [r7, #4]
    4f1a:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    4f1c:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	785b      	ldrb	r3, [r3, #1]
    4f22:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    4f24:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    4f26:	4b21      	ldr	r3, [pc, #132]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f28:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4f2a:	687b      	ldr	r3, [r7, #4]
    4f2c:	781b      	ldrb	r3, [r3, #0]
    4f2e:	2b04      	cmp	r3, #4
    4f30:	d116      	bne.n	4f60 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	7b1b      	ldrb	r3, [r3, #12]
    4f36:	069b      	lsls	r3, r3, #26
    4f38:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4f3a:	687b      	ldr	r3, [r7, #4]
    4f3c:	89db      	ldrh	r3, [r3, #14]
    4f3e:	041b      	lsls	r3, r3, #16
    4f40:	0019      	movs	r1, r3
    4f42:	4b1b      	ldr	r3, [pc, #108]	; (4fb0 <system_clock_source_dfll_set_config+0xcc>)
    4f44:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4f46:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4f48:	687a      	ldr	r2, [r7, #4]
    4f4a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4f4c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    4f4e:	4b17      	ldr	r3, [pc, #92]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f50:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4f52:	4b16      	ldr	r3, [pc, #88]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	687a      	ldr	r2, [r7, #4]
    4f58:	7812      	ldrb	r2, [r2, #0]
    4f5a:	431a      	orrs	r2, r3
    4f5c:	4b13      	ldr	r3, [pc, #76]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f5e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	781b      	ldrb	r3, [r3, #0]
    4f64:	2b20      	cmp	r3, #32
    4f66:	d11c      	bne.n	4fa2 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	7b1b      	ldrb	r3, [r3, #12]
    4f6c:	069b      	lsls	r3, r3, #26
    4f6e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4f70:	687b      	ldr	r3, [r7, #4]
    4f72:	89db      	ldrh	r3, [r3, #14]
    4f74:	041b      	lsls	r3, r3, #16
    4f76:	0019      	movs	r1, r3
    4f78:	4b0d      	ldr	r3, [pc, #52]	; (4fb0 <system_clock_source_dfll_set_config+0xcc>)
    4f7a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4f7c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4f7e:	687a      	ldr	r2, [r7, #4]
    4f80:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4f82:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    4f84:	4b09      	ldr	r3, [pc, #36]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f86:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4f88:	4b08      	ldr	r3, [pc, #32]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	687a      	ldr	r2, [r7, #4]
    4f8e:	7812      	ldrb	r2, [r2, #0]
    4f90:	2104      	movs	r1, #4
    4f92:	430a      	orrs	r2, r1
    4f94:	b2d2      	uxtb	r2, r2
    4f96:	4313      	orrs	r3, r2
    4f98:	2280      	movs	r2, #128	; 0x80
    4f9a:	00d2      	lsls	r2, r2, #3
    4f9c:	431a      	orrs	r2, r3
    4f9e:	4b03      	ldr	r3, [pc, #12]	; (4fac <system_clock_source_dfll_set_config+0xc8>)
    4fa0:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	46bd      	mov	sp, r7
    4fa6:	b002      	add	sp, #8
    4fa8:	bd80      	pop	{r7, pc}
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	20000284 	.word	0x20000284
    4fb0:	03ff0000 	.word	0x03ff0000

00004fb4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b082      	sub	sp, #8
    4fb8:	af00      	add	r7, sp, #0
    4fba:	0002      	movs	r2, r0
    4fbc:	1dfb      	adds	r3, r7, #7
    4fbe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4fc0:	1dfb      	adds	r3, r7, #7
    4fc2:	781b      	ldrb	r3, [r3, #0]
    4fc4:	2b08      	cmp	r3, #8
    4fc6:	d83b      	bhi.n	5040 <system_clock_source_enable+0x8c>
    4fc8:	009a      	lsls	r2, r3, #2
    4fca:	4b21      	ldr	r3, [pc, #132]	; (5050 <system_clock_source_enable+0x9c>)
    4fcc:	18d3      	adds	r3, r2, r3
    4fce:	681b      	ldr	r3, [r3, #0]
    4fd0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4fd2:	4b20      	ldr	r3, [pc, #128]	; (5054 <system_clock_source_enable+0xa0>)
    4fd4:	4a1f      	ldr	r2, [pc, #124]	; (5054 <system_clock_source_enable+0xa0>)
    4fd6:	6a12      	ldr	r2, [r2, #32]
    4fd8:	2102      	movs	r1, #2
    4fda:	430a      	orrs	r2, r1
    4fdc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4fde:	2300      	movs	r3, #0
    4fe0:	e031      	b.n	5046 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4fe2:	4b1c      	ldr	r3, [pc, #112]	; (5054 <system_clock_source_enable+0xa0>)
    4fe4:	4a1b      	ldr	r2, [pc, #108]	; (5054 <system_clock_source_enable+0xa0>)
    4fe6:	6992      	ldr	r2, [r2, #24]
    4fe8:	2102      	movs	r1, #2
    4fea:	430a      	orrs	r2, r1
    4fec:	619a      	str	r2, [r3, #24]
		break;
    4fee:	e029      	b.n	5044 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4ff0:	4a18      	ldr	r2, [pc, #96]	; (5054 <system_clock_source_enable+0xa0>)
    4ff2:	4b18      	ldr	r3, [pc, #96]	; (5054 <system_clock_source_enable+0xa0>)
    4ff4:	8a1b      	ldrh	r3, [r3, #16]
    4ff6:	b29b      	uxth	r3, r3
    4ff8:	2102      	movs	r1, #2
    4ffa:	430b      	orrs	r3, r1
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	8213      	strh	r3, [r2, #16]
		break;
    5000:	e020      	b.n	5044 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5002:	4a14      	ldr	r2, [pc, #80]	; (5054 <system_clock_source_enable+0xa0>)
    5004:	4b13      	ldr	r3, [pc, #76]	; (5054 <system_clock_source_enable+0xa0>)
    5006:	8a9b      	ldrh	r3, [r3, #20]
    5008:	b29b      	uxth	r3, r3
    500a:	2102      	movs	r1, #2
    500c:	430b      	orrs	r3, r1
    500e:	b29b      	uxth	r3, r3
    5010:	8293      	strh	r3, [r2, #20]
		break;
    5012:	e017      	b.n	5044 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5014:	4b10      	ldr	r3, [pc, #64]	; (5058 <system_clock_source_enable+0xa4>)
    5016:	681b      	ldr	r3, [r3, #0]
    5018:	2202      	movs	r2, #2
    501a:	431a      	orrs	r2, r3
    501c:	4b0e      	ldr	r3, [pc, #56]	; (5058 <system_clock_source_enable+0xa4>)
    501e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5020:	4b0e      	ldr	r3, [pc, #56]	; (505c <system_clock_source_enable+0xa8>)
    5022:	4798      	blx	r3
		break;
    5024:	e00e      	b.n	5044 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5026:	4a0b      	ldr	r2, [pc, #44]	; (5054 <system_clock_source_enable+0xa0>)
    5028:	490a      	ldr	r1, [pc, #40]	; (5054 <system_clock_source_enable+0xa0>)
    502a:	2344      	movs	r3, #68	; 0x44
    502c:	5ccb      	ldrb	r3, [r1, r3]
    502e:	b2db      	uxtb	r3, r3
    5030:	2102      	movs	r1, #2
    5032:	430b      	orrs	r3, r1
    5034:	b2d9      	uxtb	r1, r3
    5036:	2344      	movs	r3, #68	; 0x44
    5038:	54d1      	strb	r1, [r2, r3]
		break;
    503a:	e003      	b.n	5044 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    503c:	2300      	movs	r3, #0
    503e:	e002      	b.n	5046 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5040:	2317      	movs	r3, #23
    5042:	e000      	b.n	5046 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5044:	2300      	movs	r3, #0
}
    5046:	0018      	movs	r0, r3
    5048:	46bd      	mov	sp, r7
    504a:	b002      	add	sp, #8
    504c:	bd80      	pop	{r7, pc}
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	0000a53c 	.word	0x0000a53c
    5054:	40000800 	.word	0x40000800
    5058:	20000284 	.word	0x20000284
    505c:	00004c4d 	.word	0x00004c4d

00005060 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5060:	b580      	push	{r7, lr}
    5062:	b084      	sub	sp, #16
    5064:	af00      	add	r7, sp, #0
    5066:	0002      	movs	r2, r0
    5068:	1dfb      	adds	r3, r7, #7
    506a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    506c:	2300      	movs	r3, #0
    506e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5070:	1dfb      	adds	r3, r7, #7
    5072:	781b      	ldrb	r3, [r3, #0]
    5074:	2b08      	cmp	r3, #8
    5076:	d821      	bhi.n	50bc <system_clock_source_is_ready+0x5c>
    5078:	009a      	lsls	r2, r3, #2
    507a:	4b18      	ldr	r3, [pc, #96]	; (50dc <system_clock_source_is_ready+0x7c>)
    507c:	18d3      	adds	r3, r2, r3
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5082:	2308      	movs	r3, #8
    5084:	60fb      	str	r3, [r7, #12]
		break;
    5086:	e01b      	b.n	50c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5088:	2304      	movs	r3, #4
    508a:	60fb      	str	r3, [r7, #12]
		break;
    508c:	e018      	b.n	50c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    508e:	2301      	movs	r3, #1
    5090:	60fb      	str	r3, [r7, #12]
		break;
    5092:	e015      	b.n	50c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5094:	2302      	movs	r3, #2
    5096:	60fb      	str	r3, [r7, #12]
		break;
    5098:	e012      	b.n	50c0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    509a:	23d0      	movs	r3, #208	; 0xd0
    509c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    509e:	e00f      	b.n	50c0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    50a0:	4a0f      	ldr	r2, [pc, #60]	; (50e0 <system_clock_source_is_ready+0x80>)
    50a2:	2350      	movs	r3, #80	; 0x50
    50a4:	5cd3      	ldrb	r3, [r2, r3]
    50a6:	b2db      	uxtb	r3, r3
    50a8:	001a      	movs	r2, r3
    50aa:	2303      	movs	r3, #3
    50ac:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    50ae:	3b03      	subs	r3, #3
    50b0:	425a      	negs	r2, r3
    50b2:	4153      	adcs	r3, r2
    50b4:	b2db      	uxtb	r3, r3
    50b6:	e00c      	b.n	50d2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    50b8:	2301      	movs	r3, #1
    50ba:	e00a      	b.n	50d2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    50bc:	2300      	movs	r3, #0
    50be:	e008      	b.n	50d2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    50c0:	4b07      	ldr	r3, [pc, #28]	; (50e0 <system_clock_source_is_ready+0x80>)
    50c2:	68db      	ldr	r3, [r3, #12]
    50c4:	68fa      	ldr	r2, [r7, #12]
    50c6:	401a      	ands	r2, r3
    50c8:	68fb      	ldr	r3, [r7, #12]
    50ca:	1ad3      	subs	r3, r2, r3
    50cc:	425a      	negs	r2, r3
    50ce:	4153      	adcs	r3, r2
    50d0:	b2db      	uxtb	r3, r3
}
    50d2:	0018      	movs	r0, r3
    50d4:	46bd      	mov	sp, r7
    50d6:	b004      	add	sp, #16
    50d8:	bd80      	pop	{r7, pc}
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	0000a560 	.word	0x0000a560
    50e0:	40000800 	.word	0x40000800

000050e4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b082      	sub	sp, #8
    50e8:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    50ea:	003b      	movs	r3, r7
    50ec:	2202      	movs	r2, #2
    50ee:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    50f0:	2300      	movs	r3, #0
    50f2:	607b      	str	r3, [r7, #4]
    50f4:	e009      	b.n	510a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    50f6:	687b      	ldr	r3, [r7, #4]
    50f8:	b2db      	uxtb	r3, r3
    50fa:	003a      	movs	r2, r7
    50fc:	0011      	movs	r1, r2
    50fe:	0018      	movs	r0, r3
    5100:	4b05      	ldr	r3, [pc, #20]	; (5118 <_switch_peripheral_gclk+0x34>)
    5102:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5104:	687b      	ldr	r3, [r7, #4]
    5106:	3301      	adds	r3, #1
    5108:	607b      	str	r3, [r7, #4]
    510a:	687b      	ldr	r3, [r7, #4]
    510c:	2b24      	cmp	r3, #36	; 0x24
    510e:	d9f2      	bls.n	50f6 <_switch_peripheral_gclk+0x12>
	}
}
    5110:	46c0      	nop			; (mov r8, r8)
    5112:	46bd      	mov	sp, r7
    5114:	b002      	add	sp, #8
    5116:	bd80      	pop	{r7, pc}
    5118:	000056c5 	.word	0x000056c5

0000511c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    511c:	b580      	push	{r7, lr}
    511e:	b0aa      	sub	sp, #168	; 0xa8
    5120:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5122:	4b87      	ldr	r3, [pc, #540]	; (5340 <system_clock_init+0x224>)
    5124:	22c2      	movs	r2, #194	; 0xc2
    5126:	00d2      	lsls	r2, r2, #3
    5128:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    512a:	2002      	movs	r0, #2
    512c:	4b85      	ldr	r3, [pc, #532]	; (5344 <system_clock_init+0x228>)
    512e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5130:	4b85      	ldr	r3, [pc, #532]	; (5348 <system_clock_init+0x22c>)
    5132:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    5134:	2394      	movs	r3, #148	; 0x94
    5136:	18fb      	adds	r3, r7, r3
    5138:	0018      	movs	r0, r3
    513a:	4b84      	ldr	r3, [pc, #528]	; (534c <system_clock_init+0x230>)
    513c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    513e:	2394      	movs	r3, #148	; 0x94
    5140:	18fb      	adds	r3, r7, r3
    5142:	2280      	movs	r2, #128	; 0x80
    5144:	0212      	lsls	r2, r2, #8
    5146:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    5148:	2394      	movs	r3, #148	; 0x94
    514a:	18fb      	adds	r3, r7, r3
    514c:	2200      	movs	r2, #0
    514e:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5150:	2394      	movs	r3, #148	; 0x94
    5152:	18fb      	adds	r3, r7, r3
    5154:	2203      	movs	r2, #3
    5156:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    5158:	2394      	movs	r3, #148	; 0x94
    515a:	18fb      	adds	r3, r7, r3
    515c:	2200      	movs	r2, #0
    515e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    5160:	2394      	movs	r3, #148	; 0x94
    5162:	18fb      	adds	r3, r7, r3
    5164:	2200      	movs	r2, #0
    5166:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    5168:	2394      	movs	r3, #148	; 0x94
    516a:	18fb      	adds	r3, r7, r3
    516c:	2201      	movs	r2, #1
    516e:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    5170:	2394      	movs	r3, #148	; 0x94
    5172:	18fb      	adds	r3, r7, r3
    5174:	2200      	movs	r2, #0
    5176:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    5178:	2394      	movs	r3, #148	; 0x94
    517a:	18fb      	adds	r3, r7, r3
    517c:	2200      	movs	r2, #0
    517e:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5180:	2394      	movs	r3, #148	; 0x94
    5182:	18fb      	adds	r3, r7, r3
    5184:	0018      	movs	r0, r3
    5186:	4b72      	ldr	r3, [pc, #456]	; (5350 <system_clock_init+0x234>)
    5188:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    518a:	2005      	movs	r0, #5
    518c:	4b71      	ldr	r3, [pc, #452]	; (5354 <system_clock_init+0x238>)
    518e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5190:	46c0      	nop			; (mov r8, r8)
    5192:	2005      	movs	r0, #5
    5194:	4b70      	ldr	r3, [pc, #448]	; (5358 <system_clock_init+0x23c>)
    5196:	4798      	blx	r3
    5198:	0003      	movs	r3, r0
    519a:	001a      	movs	r2, r3
    519c:	2301      	movs	r3, #1
    519e:	4053      	eors	r3, r2
    51a0:	b2db      	uxtb	r3, r3
    51a2:	2b00      	cmp	r3, #0
    51a4:	d1f5      	bne.n	5192 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    51a6:	4a66      	ldr	r2, [pc, #408]	; (5340 <system_clock_init+0x224>)
    51a8:	8a93      	ldrh	r3, [r2, #20]
    51aa:	2180      	movs	r1, #128	; 0x80
    51ac:	430b      	orrs	r3, r1
    51ae:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    51b0:	2380      	movs	r3, #128	; 0x80
    51b2:	18fb      	adds	r3, r7, r3
    51b4:	0018      	movs	r0, r3
    51b6:	4b69      	ldr	r3, [pc, #420]	; (535c <system_clock_init+0x240>)
    51b8:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    51ba:	2380      	movs	r3, #128	; 0x80
    51bc:	18fb      	adds	r3, r7, r3
    51be:	2204      	movs	r2, #4
    51c0:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    51c2:	2380      	movs	r3, #128	; 0x80
    51c4:	18fb      	adds	r3, r7, r3
    51c6:	2200      	movs	r2, #0
    51c8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    51ca:	4b65      	ldr	r3, [pc, #404]	; (5360 <system_clock_init+0x244>)
    51cc:	681b      	ldr	r3, [r3, #0]
    51ce:	0e9b      	lsrs	r3, r3, #26
    51d0:	22a4      	movs	r2, #164	; 0xa4
    51d2:	18ba      	adds	r2, r7, r2
    51d4:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    51d6:	23a4      	movs	r3, #164	; 0xa4
    51d8:	18fb      	adds	r3, r7, r3
    51da:	681b      	ldr	r3, [r3, #0]
    51dc:	2b3f      	cmp	r3, #63	; 0x3f
    51de:	d103      	bne.n	51e8 <system_clock_init+0xcc>
		coarse = 0x1f;
    51e0:	231f      	movs	r3, #31
    51e2:	22a4      	movs	r2, #164	; 0xa4
    51e4:	18ba      	adds	r2, r7, r2
    51e6:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    51e8:	23a4      	movs	r3, #164	; 0xa4
    51ea:	18fb      	adds	r3, r7, r3
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	b2da      	uxtb	r2, r3
    51f0:	2380      	movs	r3, #128	; 0x80
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    51f6:	2380      	movs	r3, #128	; 0x80
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	2200      	movs	r2, #0
    51fc:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    51fe:	2380      	movs	r3, #128	; 0x80
    5200:	18fb      	adds	r3, r7, r3
    5202:	2200      	movs	r2, #0
    5204:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5206:	2380      	movs	r3, #128	; 0x80
    5208:	18fb      	adds	r3, r7, r3
    520a:	2200      	movs	r2, #0
    520c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    520e:	2380      	movs	r3, #128	; 0x80
    5210:	18fb      	adds	r3, r7, r3
    5212:	2200      	movs	r2, #0
    5214:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5216:	2380      	movs	r3, #128	; 0x80
    5218:	18fb      	adds	r3, r7, r3
    521a:	4a52      	ldr	r2, [pc, #328]	; (5364 <system_clock_init+0x248>)
    521c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    521e:	2380      	movs	r3, #128	; 0x80
    5220:	18fb      	adds	r3, r7, r3
    5222:	2207      	movs	r2, #7
    5224:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5226:	2380      	movs	r3, #128	; 0x80
    5228:	18fb      	adds	r3, r7, r3
    522a:	223f      	movs	r2, #63	; 0x3f
    522c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    522e:	2380      	movs	r3, #128	; 0x80
    5230:	18fb      	adds	r3, r7, r3
    5232:	0018      	movs	r0, r3
    5234:	4b4c      	ldr	r3, [pc, #304]	; (5368 <system_clock_init+0x24c>)
    5236:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5238:	237c      	movs	r3, #124	; 0x7c
    523a:	18fb      	adds	r3, r7, r3
    523c:	0018      	movs	r0, r3
    523e:	4b4b      	ldr	r3, [pc, #300]	; (536c <system_clock_init+0x250>)
    5240:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5242:	237c      	movs	r3, #124	; 0x7c
    5244:	18fb      	adds	r3, r7, r3
    5246:	2200      	movs	r2, #0
    5248:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    524a:	237c      	movs	r3, #124	; 0x7c
    524c:	18fb      	adds	r3, r7, r3
    524e:	2201      	movs	r2, #1
    5250:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5252:	237c      	movs	r3, #124	; 0x7c
    5254:	18fb      	adds	r3, r7, r3
    5256:	2200      	movs	r2, #0
    5258:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    525a:	237c      	movs	r3, #124	; 0x7c
    525c:	18fb      	adds	r3, r7, r3
    525e:	0018      	movs	r0, r3
    5260:	4b43      	ldr	r3, [pc, #268]	; (5370 <system_clock_init+0x254>)
    5262:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5264:	2006      	movs	r0, #6
    5266:	4b3b      	ldr	r3, [pc, #236]	; (5354 <system_clock_init+0x238>)
    5268:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    526a:	4b42      	ldr	r3, [pc, #264]	; (5374 <system_clock_init+0x258>)
    526c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    526e:	2364      	movs	r3, #100	; 0x64
    5270:	18fb      	adds	r3, r7, r3
    5272:	0018      	movs	r0, r3
    5274:	4b40      	ldr	r3, [pc, #256]	; (5378 <system_clock_init+0x25c>)
    5276:	4798      	blx	r3
    5278:	2364      	movs	r3, #100	; 0x64
    527a:	18fb      	adds	r3, r7, r3
    527c:	2205      	movs	r2, #5
    527e:	701a      	strb	r2, [r3, #0]
    5280:	2364      	movs	r3, #100	; 0x64
    5282:	18fb      	adds	r3, r7, r3
    5284:	2201      	movs	r2, #1
    5286:	605a      	str	r2, [r3, #4]
    5288:	2364      	movs	r3, #100	; 0x64
    528a:	18fb      	adds	r3, r7, r3
    528c:	2200      	movs	r2, #0
    528e:	721a      	strb	r2, [r3, #8]
    5290:	2364      	movs	r3, #100	; 0x64
    5292:	18fb      	adds	r3, r7, r3
    5294:	2200      	movs	r2, #0
    5296:	725a      	strb	r2, [r3, #9]
    5298:	2364      	movs	r3, #100	; 0x64
    529a:	18fb      	adds	r3, r7, r3
    529c:	0019      	movs	r1, r3
    529e:	2001      	movs	r0, #1
    52a0:	4b36      	ldr	r3, [pc, #216]	; (537c <system_clock_init+0x260>)
    52a2:	4798      	blx	r3
    52a4:	2001      	movs	r0, #1
    52a6:	4b36      	ldr	r3, [pc, #216]	; (5380 <system_clock_init+0x264>)
    52a8:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    52aa:	230c      	movs	r3, #12
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	0018      	movs	r0, r3
    52b0:	4b34      	ldr	r3, [pc, #208]	; (5384 <system_clock_init+0x268>)
    52b2:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    52b4:	230c      	movs	r3, #12
    52b6:	18fb      	adds	r3, r7, r3
    52b8:	2201      	movs	r2, #1
    52ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    52bc:	230c      	movs	r3, #12
    52be:	18fb      	adds	r3, r7, r3
    52c0:	0019      	movs	r1, r3
    52c2:	2000      	movs	r0, #0
    52c4:	4b30      	ldr	r3, [pc, #192]	; (5388 <system_clock_init+0x26c>)
    52c6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    52c8:	2000      	movs	r0, #0
    52ca:	4b30      	ldr	r3, [pc, #192]	; (538c <system_clock_init+0x270>)
    52cc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    52ce:	2007      	movs	r0, #7
    52d0:	4b20      	ldr	r3, [pc, #128]	; (5354 <system_clock_init+0x238>)
    52d2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    52d4:	46c0      	nop			; (mov r8, r8)
    52d6:	2007      	movs	r0, #7
    52d8:	4b1f      	ldr	r3, [pc, #124]	; (5358 <system_clock_init+0x23c>)
    52da:	4798      	blx	r3
    52dc:	0003      	movs	r3, r0
    52de:	001a      	movs	r2, r3
    52e0:	2301      	movs	r3, #1
    52e2:	4053      	eors	r3, r2
    52e4:	b2db      	uxtb	r3, r3
    52e6:	2b00      	cmp	r3, #0
    52e8:	d1f5      	bne.n	52d6 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    52ea:	2000      	movs	r0, #0
    52ec:	4b28      	ldr	r3, [pc, #160]	; (5390 <system_clock_init+0x274>)
    52ee:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    52f0:	2100      	movs	r1, #0
    52f2:	2000      	movs	r0, #0
    52f4:	4b27      	ldr	r3, [pc, #156]	; (5394 <system_clock_init+0x278>)
    52f6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    52f8:	2100      	movs	r1, #0
    52fa:	2001      	movs	r0, #1
    52fc:	4b25      	ldr	r3, [pc, #148]	; (5394 <system_clock_init+0x278>)
    52fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5300:	2100      	movs	r1, #0
    5302:	2002      	movs	r0, #2
    5304:	4b23      	ldr	r3, [pc, #140]	; (5394 <system_clock_init+0x278>)
    5306:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5308:	003b      	movs	r3, r7
    530a:	0018      	movs	r0, r3
    530c:	4b1a      	ldr	r3, [pc, #104]	; (5378 <system_clock_init+0x25c>)
    530e:	4798      	blx	r3
    5310:	003b      	movs	r3, r7
    5312:	2207      	movs	r2, #7
    5314:	701a      	strb	r2, [r3, #0]
    5316:	003b      	movs	r3, r7
    5318:	2201      	movs	r2, #1
    531a:	605a      	str	r2, [r3, #4]
    531c:	003b      	movs	r3, r7
    531e:	2200      	movs	r2, #0
    5320:	721a      	strb	r2, [r3, #8]
    5322:	003b      	movs	r3, r7
    5324:	2200      	movs	r2, #0
    5326:	725a      	strb	r2, [r3, #9]
    5328:	003b      	movs	r3, r7
    532a:	0019      	movs	r1, r3
    532c:	2000      	movs	r0, #0
    532e:	4b13      	ldr	r3, [pc, #76]	; (537c <system_clock_init+0x260>)
    5330:	4798      	blx	r3
    5332:	2000      	movs	r0, #0
    5334:	4b12      	ldr	r3, [pc, #72]	; (5380 <system_clock_init+0x264>)
    5336:	4798      	blx	r3
#endif
}
    5338:	46c0      	nop			; (mov r8, r8)
    533a:	46bd      	mov	sp, r7
    533c:	b02a      	add	sp, #168	; 0xa8
    533e:	bd80      	pop	{r7, pc}
    5340:	40000800 	.word	0x40000800
    5344:	00004bfd 	.word	0x00004bfd
    5348:	000050e5 	.word	0x000050e5
    534c:	00004acd 	.word	0x00004acd
    5350:	00004dc5 	.word	0x00004dc5
    5354:	00004fb5 	.word	0x00004fb5
    5358:	00005061 	.word	0x00005061
    535c:	00004b37 	.word	0x00004b37
    5360:	00806024 	.word	0x00806024
    5364:	000005b9 	.word	0x000005b9
    5368:	00004ee5 	.word	0x00004ee5
    536c:	00004b15 	.word	0x00004b15
    5370:	00004d4d 	.word	0x00004d4d
    5374:	0000543d 	.word	0x0000543d
    5378:	00004a89 	.word	0x00004a89
    537c:	0000546d 	.word	0x0000546d
    5380:	00005591 	.word	0x00005591
    5384:	00004ab7 	.word	0x00004ab7
    5388:	000056c5 	.word	0x000056c5
    538c:	00005709 	.word	0x00005709
    5390:	00004b89 	.word	0x00004b89
    5394:	00004ba9 	.word	0x00004ba9

00005398 <system_apb_clock_set_mask>:
{
    5398:	b580      	push	{r7, lr}
    539a:	b082      	sub	sp, #8
    539c:	af00      	add	r7, sp, #0
    539e:	0002      	movs	r2, r0
    53a0:	6039      	str	r1, [r7, #0]
    53a2:	1dfb      	adds	r3, r7, #7
    53a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    53a6:	1dfb      	adds	r3, r7, #7
    53a8:	781b      	ldrb	r3, [r3, #0]
    53aa:	2b01      	cmp	r3, #1
    53ac:	d00a      	beq.n	53c4 <system_apb_clock_set_mask+0x2c>
    53ae:	2b02      	cmp	r3, #2
    53b0:	d00f      	beq.n	53d2 <system_apb_clock_set_mask+0x3a>
    53b2:	2b00      	cmp	r3, #0
    53b4:	d114      	bne.n	53e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    53b6:	4b0e      	ldr	r3, [pc, #56]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53b8:	4a0d      	ldr	r2, [pc, #52]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53ba:	6991      	ldr	r1, [r2, #24]
    53bc:	683a      	ldr	r2, [r7, #0]
    53be:	430a      	orrs	r2, r1
    53c0:	619a      	str	r2, [r3, #24]
			break;
    53c2:	e00f      	b.n	53e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    53c4:	4b0a      	ldr	r3, [pc, #40]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53c6:	4a0a      	ldr	r2, [pc, #40]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53c8:	69d1      	ldr	r1, [r2, #28]
    53ca:	683a      	ldr	r2, [r7, #0]
    53cc:	430a      	orrs	r2, r1
    53ce:	61da      	str	r2, [r3, #28]
			break;
    53d0:	e008      	b.n	53e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    53d2:	4b07      	ldr	r3, [pc, #28]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53d4:	4a06      	ldr	r2, [pc, #24]	; (53f0 <system_apb_clock_set_mask+0x58>)
    53d6:	6a11      	ldr	r1, [r2, #32]
    53d8:	683a      	ldr	r2, [r7, #0]
    53da:	430a      	orrs	r2, r1
    53dc:	621a      	str	r2, [r3, #32]
			break;
    53de:	e001      	b.n	53e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    53e0:	2317      	movs	r3, #23
    53e2:	e000      	b.n	53e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    53e4:	2300      	movs	r3, #0
}
    53e6:	0018      	movs	r0, r3
    53e8:	46bd      	mov	sp, r7
    53ea:	b002      	add	sp, #8
    53ec:	bd80      	pop	{r7, pc}
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	40000400 	.word	0x40000400

000053f4 <system_interrupt_enter_critical_section>:
{
    53f4:	b580      	push	{r7, lr}
    53f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    53f8:	4b02      	ldr	r3, [pc, #8]	; (5404 <system_interrupt_enter_critical_section+0x10>)
    53fa:	4798      	blx	r3
}
    53fc:	46c0      	nop			; (mov r8, r8)
    53fe:	46bd      	mov	sp, r7
    5400:	bd80      	pop	{r7, pc}
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	00003279 	.word	0x00003279

00005408 <system_interrupt_leave_critical_section>:
{
    5408:	b580      	push	{r7, lr}
    540a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    540c:	4b02      	ldr	r3, [pc, #8]	; (5418 <system_interrupt_leave_critical_section+0x10>)
    540e:	4798      	blx	r3
}
    5410:	46c0      	nop			; (mov r8, r8)
    5412:	46bd      	mov	sp, r7
    5414:	bd80      	pop	{r7, pc}
    5416:	46c0      	nop			; (mov r8, r8)
    5418:	000032cd 	.word	0x000032cd

0000541c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    541c:	b580      	push	{r7, lr}
    541e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5420:	4b05      	ldr	r3, [pc, #20]	; (5438 <system_gclk_is_syncing+0x1c>)
    5422:	785b      	ldrb	r3, [r3, #1]
    5424:	b2db      	uxtb	r3, r3
    5426:	b25b      	sxtb	r3, r3
    5428:	2b00      	cmp	r3, #0
    542a:	da01      	bge.n	5430 <system_gclk_is_syncing+0x14>
		return true;
    542c:	2301      	movs	r3, #1
    542e:	e000      	b.n	5432 <system_gclk_is_syncing+0x16>
	}

	return false;
    5430:	2300      	movs	r3, #0
}
    5432:	0018      	movs	r0, r3
    5434:	46bd      	mov	sp, r7
    5436:	bd80      	pop	{r7, pc}
    5438:	40000c00 	.word	0x40000c00

0000543c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    543c:	b580      	push	{r7, lr}
    543e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5440:	2108      	movs	r1, #8
    5442:	2000      	movs	r0, #0
    5444:	4b07      	ldr	r3, [pc, #28]	; (5464 <system_gclk_init+0x28>)
    5446:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5448:	4b07      	ldr	r3, [pc, #28]	; (5468 <system_gclk_init+0x2c>)
    544a:	2201      	movs	r2, #1
    544c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	4b05      	ldr	r3, [pc, #20]	; (5468 <system_gclk_init+0x2c>)
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	b2db      	uxtb	r3, r3
    5456:	001a      	movs	r2, r3
    5458:	2301      	movs	r3, #1
    545a:	4013      	ands	r3, r2
    545c:	d1f8      	bne.n	5450 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    545e:	46c0      	nop			; (mov r8, r8)
    5460:	46bd      	mov	sp, r7
    5462:	bd80      	pop	{r7, pc}
    5464:	00005399 	.word	0x00005399
    5468:	40000c00 	.word	0x40000c00

0000546c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    546c:	b580      	push	{r7, lr}
    546e:	b086      	sub	sp, #24
    5470:	af00      	add	r7, sp, #0
    5472:	0002      	movs	r2, r0
    5474:	6039      	str	r1, [r7, #0]
    5476:	1dfb      	adds	r3, r7, #7
    5478:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    547a:	1dfb      	adds	r3, r7, #7
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5480:	1dfb      	adds	r3, r7, #7
    5482:	781b      	ldrb	r3, [r3, #0]
    5484:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5486:	683b      	ldr	r3, [r7, #0]
    5488:	781b      	ldrb	r3, [r3, #0]
    548a:	021b      	lsls	r3, r3, #8
    548c:	001a      	movs	r2, r3
    548e:	697b      	ldr	r3, [r7, #20]
    5490:	4313      	orrs	r3, r2
    5492:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5494:	683b      	ldr	r3, [r7, #0]
    5496:	785b      	ldrb	r3, [r3, #1]
    5498:	2b00      	cmp	r3, #0
    549a:	d004      	beq.n	54a6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    549c:	697b      	ldr	r3, [r7, #20]
    549e:	2280      	movs	r2, #128	; 0x80
    54a0:	02d2      	lsls	r2, r2, #11
    54a2:	4313      	orrs	r3, r2
    54a4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    54a6:	683b      	ldr	r3, [r7, #0]
    54a8:	7a5b      	ldrb	r3, [r3, #9]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d004      	beq.n	54b8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    54ae:	697b      	ldr	r3, [r7, #20]
    54b0:	2280      	movs	r2, #128	; 0x80
    54b2:	0312      	lsls	r2, r2, #12
    54b4:	4313      	orrs	r3, r2
    54b6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    54b8:	683b      	ldr	r3, [r7, #0]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	2b01      	cmp	r3, #1
    54be:	d92c      	bls.n	551a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    54c0:	683b      	ldr	r3, [r7, #0]
    54c2:	685a      	ldr	r2, [r3, #4]
    54c4:	683b      	ldr	r3, [r7, #0]
    54c6:	685b      	ldr	r3, [r3, #4]
    54c8:	3b01      	subs	r3, #1
    54ca:	4013      	ands	r3, r2
    54cc:	d11a      	bne.n	5504 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    54ce:	2300      	movs	r3, #0
    54d0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    54d2:	2302      	movs	r3, #2
    54d4:	60bb      	str	r3, [r7, #8]
    54d6:	e005      	b.n	54e4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    54d8:	68fb      	ldr	r3, [r7, #12]
    54da:	3301      	adds	r3, #1
    54dc:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    54de:	68bb      	ldr	r3, [r7, #8]
    54e0:	005b      	lsls	r3, r3, #1
    54e2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	685a      	ldr	r2, [r3, #4]
    54e8:	68bb      	ldr	r3, [r7, #8]
    54ea:	429a      	cmp	r2, r3
    54ec:	d8f4      	bhi.n	54d8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    54ee:	68fb      	ldr	r3, [r7, #12]
    54f0:	021b      	lsls	r3, r3, #8
    54f2:	693a      	ldr	r2, [r7, #16]
    54f4:	4313      	orrs	r3, r2
    54f6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    54f8:	697b      	ldr	r3, [r7, #20]
    54fa:	2280      	movs	r2, #128	; 0x80
    54fc:	0352      	lsls	r2, r2, #13
    54fe:	4313      	orrs	r3, r2
    5500:	617b      	str	r3, [r7, #20]
    5502:	e00a      	b.n	551a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5504:	683b      	ldr	r3, [r7, #0]
    5506:	685b      	ldr	r3, [r3, #4]
    5508:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    550a:	693a      	ldr	r2, [r7, #16]
    550c:	4313      	orrs	r3, r2
    550e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5510:	697b      	ldr	r3, [r7, #20]
    5512:	2280      	movs	r2, #128	; 0x80
    5514:	0292      	lsls	r2, r2, #10
    5516:	4313      	orrs	r3, r2
    5518:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    551a:	683b      	ldr	r3, [r7, #0]
    551c:	7a1b      	ldrb	r3, [r3, #8]
    551e:	2b00      	cmp	r3, #0
    5520:	d004      	beq.n	552c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5522:	697b      	ldr	r3, [r7, #20]
    5524:	2280      	movs	r2, #128	; 0x80
    5526:	0392      	lsls	r2, r2, #14
    5528:	4313      	orrs	r3, r2
    552a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    552c:	46c0      	nop			; (mov r8, r8)
    552e:	4b13      	ldr	r3, [pc, #76]	; (557c <system_gclk_gen_set_config+0x110>)
    5530:	4798      	blx	r3
    5532:	1e03      	subs	r3, r0, #0
    5534:	d1fb      	bne.n	552e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5536:	4b12      	ldr	r3, [pc, #72]	; (5580 <system_gclk_gen_set_config+0x114>)
    5538:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    553a:	4a12      	ldr	r2, [pc, #72]	; (5584 <system_gclk_gen_set_config+0x118>)
    553c:	1dfb      	adds	r3, r7, #7
    553e:	781b      	ldrb	r3, [r3, #0]
    5540:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5542:	46c0      	nop			; (mov r8, r8)
    5544:	4b0d      	ldr	r3, [pc, #52]	; (557c <system_gclk_gen_set_config+0x110>)
    5546:	4798      	blx	r3
    5548:	1e03      	subs	r3, r0, #0
    554a:	d1fb      	bne.n	5544 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    554c:	4b0e      	ldr	r3, [pc, #56]	; (5588 <system_gclk_gen_set_config+0x11c>)
    554e:	693a      	ldr	r2, [r7, #16]
    5550:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5552:	46c0      	nop			; (mov r8, r8)
    5554:	4b09      	ldr	r3, [pc, #36]	; (557c <system_gclk_gen_set_config+0x110>)
    5556:	4798      	blx	r3
    5558:	1e03      	subs	r3, r0, #0
    555a:	d1fb      	bne.n	5554 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    555c:	4b0a      	ldr	r3, [pc, #40]	; (5588 <system_gclk_gen_set_config+0x11c>)
    555e:	4a0a      	ldr	r2, [pc, #40]	; (5588 <system_gclk_gen_set_config+0x11c>)
    5560:	6851      	ldr	r1, [r2, #4]
    5562:	2280      	movs	r2, #128	; 0x80
    5564:	0252      	lsls	r2, r2, #9
    5566:	4011      	ands	r1, r2
    5568:	697a      	ldr	r2, [r7, #20]
    556a:	430a      	orrs	r2, r1
    556c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    556e:	4b07      	ldr	r3, [pc, #28]	; (558c <system_gclk_gen_set_config+0x120>)
    5570:	4798      	blx	r3
}
    5572:	46c0      	nop			; (mov r8, r8)
    5574:	46bd      	mov	sp, r7
    5576:	b006      	add	sp, #24
    5578:	bd80      	pop	{r7, pc}
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	0000541d 	.word	0x0000541d
    5580:	000053f5 	.word	0x000053f5
    5584:	40000c08 	.word	0x40000c08
    5588:	40000c00 	.word	0x40000c00
    558c:	00005409 	.word	0x00005409

00005590 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5590:	b580      	push	{r7, lr}
    5592:	b082      	sub	sp, #8
    5594:	af00      	add	r7, sp, #0
    5596:	0002      	movs	r2, r0
    5598:	1dfb      	adds	r3, r7, #7
    559a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    559c:	46c0      	nop			; (mov r8, r8)
    559e:	4b0e      	ldr	r3, [pc, #56]	; (55d8 <system_gclk_gen_enable+0x48>)
    55a0:	4798      	blx	r3
    55a2:	1e03      	subs	r3, r0, #0
    55a4:	d1fb      	bne.n	559e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    55a6:	4b0d      	ldr	r3, [pc, #52]	; (55dc <system_gclk_gen_enable+0x4c>)
    55a8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    55aa:	4a0d      	ldr	r2, [pc, #52]	; (55e0 <system_gclk_gen_enable+0x50>)
    55ac:	1dfb      	adds	r3, r7, #7
    55ae:	781b      	ldrb	r3, [r3, #0]
    55b0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	4b08      	ldr	r3, [pc, #32]	; (55d8 <system_gclk_gen_enable+0x48>)
    55b6:	4798      	blx	r3
    55b8:	1e03      	subs	r3, r0, #0
    55ba:	d1fb      	bne.n	55b4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    55bc:	4b09      	ldr	r3, [pc, #36]	; (55e4 <system_gclk_gen_enable+0x54>)
    55be:	4a09      	ldr	r2, [pc, #36]	; (55e4 <system_gclk_gen_enable+0x54>)
    55c0:	6852      	ldr	r2, [r2, #4]
    55c2:	2180      	movs	r1, #128	; 0x80
    55c4:	0249      	lsls	r1, r1, #9
    55c6:	430a      	orrs	r2, r1
    55c8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    55ca:	4b07      	ldr	r3, [pc, #28]	; (55e8 <system_gclk_gen_enable+0x58>)
    55cc:	4798      	blx	r3
}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	46bd      	mov	sp, r7
    55d2:	b002      	add	sp, #8
    55d4:	bd80      	pop	{r7, pc}
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	0000541d 	.word	0x0000541d
    55dc:	000053f5 	.word	0x000053f5
    55e0:	40000c04 	.word	0x40000c04
    55e4:	40000c00 	.word	0x40000c00
    55e8:	00005409 	.word	0x00005409

000055ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    55ec:	b580      	push	{r7, lr}
    55ee:	b086      	sub	sp, #24
    55f0:	af00      	add	r7, sp, #0
    55f2:	0002      	movs	r2, r0
    55f4:	1dfb      	adds	r3, r7, #7
    55f6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	4b2a      	ldr	r3, [pc, #168]	; (56a4 <system_gclk_gen_get_hz+0xb8>)
    55fc:	4798      	blx	r3
    55fe:	1e03      	subs	r3, r0, #0
    5600:	d1fb      	bne.n	55fa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5602:	4b29      	ldr	r3, [pc, #164]	; (56a8 <system_gclk_gen_get_hz+0xbc>)
    5604:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5606:	4a29      	ldr	r2, [pc, #164]	; (56ac <system_gclk_gen_get_hz+0xc0>)
    5608:	1dfb      	adds	r3, r7, #7
    560a:	781b      	ldrb	r3, [r3, #0]
    560c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	4b24      	ldr	r3, [pc, #144]	; (56a4 <system_gclk_gen_get_hz+0xb8>)
    5612:	4798      	blx	r3
    5614:	1e03      	subs	r3, r0, #0
    5616:	d1fb      	bne.n	5610 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5618:	4b25      	ldr	r3, [pc, #148]	; (56b0 <system_gclk_gen_get_hz+0xc4>)
    561a:	685b      	ldr	r3, [r3, #4]
    561c:	04db      	lsls	r3, r3, #19
    561e:	0edb      	lsrs	r3, r3, #27
    5620:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5622:	0018      	movs	r0, r3
    5624:	4b23      	ldr	r3, [pc, #140]	; (56b4 <system_gclk_gen_get_hz+0xc8>)
    5626:	4798      	blx	r3
    5628:	0003      	movs	r3, r0
    562a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    562c:	4a1f      	ldr	r2, [pc, #124]	; (56ac <system_gclk_gen_get_hz+0xc0>)
    562e:	1dfb      	adds	r3, r7, #7
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5634:	4b1e      	ldr	r3, [pc, #120]	; (56b0 <system_gclk_gen_get_hz+0xc4>)
    5636:	685b      	ldr	r3, [r3, #4]
    5638:	02db      	lsls	r3, r3, #11
    563a:	0fdb      	lsrs	r3, r3, #31
    563c:	b2da      	uxtb	r2, r3
    563e:	2313      	movs	r3, #19
    5640:	18fb      	adds	r3, r7, r3
    5642:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5644:	4a1c      	ldr	r2, [pc, #112]	; (56b8 <system_gclk_gen_get_hz+0xcc>)
    5646:	1dfb      	adds	r3, r7, #7
    5648:	781b      	ldrb	r3, [r3, #0]
    564a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    564c:	46c0      	nop			; (mov r8, r8)
    564e:	4b15      	ldr	r3, [pc, #84]	; (56a4 <system_gclk_gen_get_hz+0xb8>)
    5650:	4798      	blx	r3
    5652:	1e03      	subs	r3, r0, #0
    5654:	d1fb      	bne.n	564e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5656:	4b16      	ldr	r3, [pc, #88]	; (56b0 <system_gclk_gen_get_hz+0xc4>)
    5658:	689b      	ldr	r3, [r3, #8]
    565a:	021b      	lsls	r3, r3, #8
    565c:	0c1b      	lsrs	r3, r3, #16
    565e:	b29b      	uxth	r3, r3
    5660:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5662:	4b16      	ldr	r3, [pc, #88]	; (56bc <system_gclk_gen_get_hz+0xd0>)
    5664:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5666:	2313      	movs	r3, #19
    5668:	18fb      	adds	r3, r7, r3
    566a:	781b      	ldrb	r3, [r3, #0]
    566c:	2b00      	cmp	r3, #0
    566e:	d109      	bne.n	5684 <system_gclk_gen_get_hz+0x98>
    5670:	68fb      	ldr	r3, [r7, #12]
    5672:	2b01      	cmp	r3, #1
    5674:	d906      	bls.n	5684 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5676:	4b12      	ldr	r3, [pc, #72]	; (56c0 <system_gclk_gen_get_hz+0xd4>)
    5678:	68f9      	ldr	r1, [r7, #12]
    567a:	6978      	ldr	r0, [r7, #20]
    567c:	4798      	blx	r3
    567e:	0003      	movs	r3, r0
    5680:	617b      	str	r3, [r7, #20]
    5682:	e00a      	b.n	569a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5684:	2313      	movs	r3, #19
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	2b00      	cmp	r3, #0
    568c:	d005      	beq.n	569a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	3301      	adds	r3, #1
    5692:	697a      	ldr	r2, [r7, #20]
    5694:	40da      	lsrs	r2, r3
    5696:	0013      	movs	r3, r2
    5698:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    569a:	697b      	ldr	r3, [r7, #20]
}
    569c:	0018      	movs	r0, r3
    569e:	46bd      	mov	sp, r7
    56a0:	b006      	add	sp, #24
    56a2:	bd80      	pop	{r7, pc}
    56a4:	0000541d 	.word	0x0000541d
    56a8:	000053f5 	.word	0x000053f5
    56ac:	40000c04 	.word	0x40000c04
    56b0:	40000c00 	.word	0x40000c00
    56b4:	00004c91 	.word	0x00004c91
    56b8:	40000c08 	.word	0x40000c08
    56bc:	00005409 	.word	0x00005409
    56c0:	00006411 	.word	0x00006411

000056c4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    56c4:	b580      	push	{r7, lr}
    56c6:	b084      	sub	sp, #16
    56c8:	af00      	add	r7, sp, #0
    56ca:	0002      	movs	r2, r0
    56cc:	6039      	str	r1, [r7, #0]
    56ce:	1dfb      	adds	r3, r7, #7
    56d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    56d2:	1dfb      	adds	r3, r7, #7
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    56d8:	683b      	ldr	r3, [r7, #0]
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	021b      	lsls	r3, r3, #8
    56de:	001a      	movs	r2, r3
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	4313      	orrs	r3, r2
    56e4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    56e6:	1dfb      	adds	r3, r7, #7
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	0018      	movs	r0, r3
    56ec:	4b04      	ldr	r3, [pc, #16]	; (5700 <system_gclk_chan_set_config+0x3c>)
    56ee:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    56f0:	4b04      	ldr	r3, [pc, #16]	; (5704 <system_gclk_chan_set_config+0x40>)
    56f2:	68fa      	ldr	r2, [r7, #12]
    56f4:	b292      	uxth	r2, r2
    56f6:	805a      	strh	r2, [r3, #2]
}
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	46bd      	mov	sp, r7
    56fc:	b004      	add	sp, #16
    56fe:	bd80      	pop	{r7, pc}
    5700:	00005751 	.word	0x00005751
    5704:	40000c00 	.word	0x40000c00

00005708 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5708:	b580      	push	{r7, lr}
    570a:	b082      	sub	sp, #8
    570c:	af00      	add	r7, sp, #0
    570e:	0002      	movs	r2, r0
    5710:	1dfb      	adds	r3, r7, #7
    5712:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5714:	4b0a      	ldr	r3, [pc, #40]	; (5740 <system_gclk_chan_enable+0x38>)
    5716:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5718:	4a0a      	ldr	r2, [pc, #40]	; (5744 <system_gclk_chan_enable+0x3c>)
    571a:	1dfb      	adds	r3, r7, #7
    571c:	781b      	ldrb	r3, [r3, #0]
    571e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5720:	4909      	ldr	r1, [pc, #36]	; (5748 <system_gclk_chan_enable+0x40>)
    5722:	4b09      	ldr	r3, [pc, #36]	; (5748 <system_gclk_chan_enable+0x40>)
    5724:	885b      	ldrh	r3, [r3, #2]
    5726:	b29b      	uxth	r3, r3
    5728:	2280      	movs	r2, #128	; 0x80
    572a:	01d2      	lsls	r2, r2, #7
    572c:	4313      	orrs	r3, r2
    572e:	b29b      	uxth	r3, r3
    5730:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    5732:	4b06      	ldr	r3, [pc, #24]	; (574c <system_gclk_chan_enable+0x44>)
    5734:	4798      	blx	r3
}
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	46bd      	mov	sp, r7
    573a:	b002      	add	sp, #8
    573c:	bd80      	pop	{r7, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	000053f5 	.word	0x000053f5
    5744:	40000c02 	.word	0x40000c02
    5748:	40000c00 	.word	0x40000c00
    574c:	00005409 	.word	0x00005409

00005750 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5750:	b580      	push	{r7, lr}
    5752:	b084      	sub	sp, #16
    5754:	af00      	add	r7, sp, #0
    5756:	0002      	movs	r2, r0
    5758:	1dfb      	adds	r3, r7, #7
    575a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    575c:	4b1c      	ldr	r3, [pc, #112]	; (57d0 <system_gclk_chan_disable+0x80>)
    575e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5760:	4a1c      	ldr	r2, [pc, #112]	; (57d4 <system_gclk_chan_disable+0x84>)
    5762:	1dfb      	adds	r3, r7, #7
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5768:	4b1b      	ldr	r3, [pc, #108]	; (57d8 <system_gclk_chan_disable+0x88>)
    576a:	885b      	ldrh	r3, [r3, #2]
    576c:	051b      	lsls	r3, r3, #20
    576e:	0f1b      	lsrs	r3, r3, #28
    5770:	b2db      	uxtb	r3, r3
    5772:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    5774:	4a18      	ldr	r2, [pc, #96]	; (57d8 <system_gclk_chan_disable+0x88>)
    5776:	8853      	ldrh	r3, [r2, #2]
    5778:	4918      	ldr	r1, [pc, #96]	; (57dc <system_gclk_chan_disable+0x8c>)
    577a:	400b      	ands	r3, r1
    577c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    577e:	4a16      	ldr	r2, [pc, #88]	; (57d8 <system_gclk_chan_disable+0x88>)
    5780:	4b15      	ldr	r3, [pc, #84]	; (57d8 <system_gclk_chan_disable+0x88>)
    5782:	885b      	ldrh	r3, [r3, #2]
    5784:	b29b      	uxth	r3, r3
    5786:	4916      	ldr	r1, [pc, #88]	; (57e0 <system_gclk_chan_disable+0x90>)
    5788:	400b      	ands	r3, r1
    578a:	b29b      	uxth	r3, r3
    578c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	4b11      	ldr	r3, [pc, #68]	; (57d8 <system_gclk_chan_disable+0x88>)
    5792:	885b      	ldrh	r3, [r3, #2]
    5794:	b29b      	uxth	r3, r3
    5796:	001a      	movs	r2, r3
    5798:	2380      	movs	r3, #128	; 0x80
    579a:	01db      	lsls	r3, r3, #7
    579c:	4013      	ands	r3, r2
    579e:	d1f7      	bne.n	5790 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    57a0:	4a0d      	ldr	r2, [pc, #52]	; (57d8 <system_gclk_chan_disable+0x88>)
    57a2:	68fb      	ldr	r3, [r7, #12]
    57a4:	b2db      	uxtb	r3, r3
    57a6:	1c19      	adds	r1, r3, #0
    57a8:	230f      	movs	r3, #15
    57aa:	400b      	ands	r3, r1
    57ac:	b2d9      	uxtb	r1, r3
    57ae:	8853      	ldrh	r3, [r2, #2]
    57b0:	1c08      	adds	r0, r1, #0
    57b2:	210f      	movs	r1, #15
    57b4:	4001      	ands	r1, r0
    57b6:	0208      	lsls	r0, r1, #8
    57b8:	4908      	ldr	r1, [pc, #32]	; (57dc <system_gclk_chan_disable+0x8c>)
    57ba:	400b      	ands	r3, r1
    57bc:	1c19      	adds	r1, r3, #0
    57be:	1c03      	adds	r3, r0, #0
    57c0:	430b      	orrs	r3, r1
    57c2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    57c4:	4b07      	ldr	r3, [pc, #28]	; (57e4 <system_gclk_chan_disable+0x94>)
    57c6:	4798      	blx	r3
}
    57c8:	46c0      	nop			; (mov r8, r8)
    57ca:	46bd      	mov	sp, r7
    57cc:	b004      	add	sp, #16
    57ce:	bd80      	pop	{r7, pc}
    57d0:	000053f5 	.word	0x000053f5
    57d4:	40000c02 	.word	0x40000c02
    57d8:	40000c00 	.word	0x40000c00
    57dc:	fffff0ff 	.word	0xfffff0ff
    57e0:	ffffbfff 	.word	0xffffbfff
    57e4:	00005409 	.word	0x00005409

000057e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b084      	sub	sp, #16
    57ec:	af00      	add	r7, sp, #0
    57ee:	0002      	movs	r2, r0
    57f0:	1dfb      	adds	r3, r7, #7
    57f2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    57f4:	4b0d      	ldr	r3, [pc, #52]	; (582c <system_gclk_chan_get_hz+0x44>)
    57f6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    57f8:	4a0d      	ldr	r2, [pc, #52]	; (5830 <system_gclk_chan_get_hz+0x48>)
    57fa:	1dfb      	adds	r3, r7, #7
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5800:	4b0c      	ldr	r3, [pc, #48]	; (5834 <system_gclk_chan_get_hz+0x4c>)
    5802:	885b      	ldrh	r3, [r3, #2]
    5804:	051b      	lsls	r3, r3, #20
    5806:	0f1b      	lsrs	r3, r3, #28
    5808:	b2da      	uxtb	r2, r3
    580a:	230f      	movs	r3, #15
    580c:	18fb      	adds	r3, r7, r3
    580e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    5810:	4b09      	ldr	r3, [pc, #36]	; (5838 <system_gclk_chan_get_hz+0x50>)
    5812:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5814:	230f      	movs	r3, #15
    5816:	18fb      	adds	r3, r7, r3
    5818:	781b      	ldrb	r3, [r3, #0]
    581a:	0018      	movs	r0, r3
    581c:	4b07      	ldr	r3, [pc, #28]	; (583c <system_gclk_chan_get_hz+0x54>)
    581e:	4798      	blx	r3
    5820:	0003      	movs	r3, r0
}
    5822:	0018      	movs	r0, r3
    5824:	46bd      	mov	sp, r7
    5826:	b004      	add	sp, #16
    5828:	bd80      	pop	{r7, pc}
    582a:	46c0      	nop			; (mov r8, r8)
    582c:	000053f5 	.word	0x000053f5
    5830:	40000c02 	.word	0x40000c02
    5834:	40000c00 	.word	0x40000c00
    5838:	00005409 	.word	0x00005409
    583c:	000055ed 	.word	0x000055ed

00005840 <system_pinmux_get_group_from_gpio_pin>:
{
    5840:	b580      	push	{r7, lr}
    5842:	b084      	sub	sp, #16
    5844:	af00      	add	r7, sp, #0
    5846:	0002      	movs	r2, r0
    5848:	1dfb      	adds	r3, r7, #7
    584a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    584c:	230f      	movs	r3, #15
    584e:	18fb      	adds	r3, r7, r3
    5850:	1dfa      	adds	r2, r7, #7
    5852:	7812      	ldrb	r2, [r2, #0]
    5854:	09d2      	lsrs	r2, r2, #7
    5856:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5858:	230e      	movs	r3, #14
    585a:	18fb      	adds	r3, r7, r3
    585c:	1dfa      	adds	r2, r7, #7
    585e:	7812      	ldrb	r2, [r2, #0]
    5860:	0952      	lsrs	r2, r2, #5
    5862:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5864:	4b0d      	ldr	r3, [pc, #52]	; (589c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5866:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5868:	230f      	movs	r3, #15
    586a:	18fb      	adds	r3, r7, r3
    586c:	781b      	ldrb	r3, [r3, #0]
    586e:	2b00      	cmp	r3, #0
    5870:	d10f      	bne.n	5892 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5872:	230f      	movs	r3, #15
    5874:	18fb      	adds	r3, r7, r3
    5876:	781b      	ldrb	r3, [r3, #0]
    5878:	009b      	lsls	r3, r3, #2
    587a:	2210      	movs	r2, #16
    587c:	4694      	mov	ip, r2
    587e:	44bc      	add	ip, r7
    5880:	4463      	add	r3, ip
    5882:	3b08      	subs	r3, #8
    5884:	681a      	ldr	r2, [r3, #0]
    5886:	230e      	movs	r3, #14
    5888:	18fb      	adds	r3, r7, r3
    588a:	781b      	ldrb	r3, [r3, #0]
    588c:	01db      	lsls	r3, r3, #7
    588e:	18d3      	adds	r3, r2, r3
    5890:	e000      	b.n	5894 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5892:	2300      	movs	r3, #0
}
    5894:	0018      	movs	r0, r3
    5896:	46bd      	mov	sp, r7
    5898:	b004      	add	sp, #16
    589a:	bd80      	pop	{r7, pc}
    589c:	41004400 	.word	0x41004400

000058a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b088      	sub	sp, #32
    58a4:	af00      	add	r7, sp, #0
    58a6:	60f8      	str	r0, [r7, #12]
    58a8:	60b9      	str	r1, [r7, #8]
    58aa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    58ac:	2300      	movs	r3, #0
    58ae:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	78db      	ldrb	r3, [r3, #3]
    58b4:	2201      	movs	r2, #1
    58b6:	4053      	eors	r3, r2
    58b8:	b2db      	uxtb	r3, r3
    58ba:	2b00      	cmp	r3, #0
    58bc:	d035      	beq.n	592a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    58be:	687b      	ldr	r3, [r7, #4]
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	2b80      	cmp	r3, #128	; 0x80
    58c4:	d00b      	beq.n	58de <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    58c6:	69fb      	ldr	r3, [r7, #28]
    58c8:	2280      	movs	r2, #128	; 0x80
    58ca:	0252      	lsls	r2, r2, #9
    58cc:	4313      	orrs	r3, r2
    58ce:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	781b      	ldrb	r3, [r3, #0]
    58d4:	061b      	lsls	r3, r3, #24
    58d6:	001a      	movs	r2, r3
    58d8:	69fb      	ldr	r3, [r7, #28]
    58da:	4313      	orrs	r3, r2
    58dc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    58de:	687b      	ldr	r3, [r7, #4]
    58e0:	785b      	ldrb	r3, [r3, #1]
    58e2:	2b00      	cmp	r3, #0
    58e4:	d003      	beq.n	58ee <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    58ea:	2b02      	cmp	r3, #2
    58ec:	d110      	bne.n	5910 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    58ee:	69fb      	ldr	r3, [r7, #28]
    58f0:	2280      	movs	r2, #128	; 0x80
    58f2:	0292      	lsls	r2, r2, #10
    58f4:	4313      	orrs	r3, r2
    58f6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	789b      	ldrb	r3, [r3, #2]
    58fc:	2b00      	cmp	r3, #0
    58fe:	d004      	beq.n	590a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5900:	69fb      	ldr	r3, [r7, #28]
    5902:	2280      	movs	r2, #128	; 0x80
    5904:	02d2      	lsls	r2, r2, #11
    5906:	4313      	orrs	r3, r2
    5908:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    590a:	68fb      	ldr	r3, [r7, #12]
    590c:	68ba      	ldr	r2, [r7, #8]
    590e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	785b      	ldrb	r3, [r3, #1]
    5914:	2b01      	cmp	r3, #1
    5916:	d003      	beq.n	5920 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    591c:	2b02      	cmp	r3, #2
    591e:	d107      	bne.n	5930 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5920:	69fb      	ldr	r3, [r7, #28]
    5922:	4a22      	ldr	r2, [pc, #136]	; (59ac <_system_pinmux_config+0x10c>)
    5924:	4013      	ands	r3, r2
    5926:	61fb      	str	r3, [r7, #28]
    5928:	e002      	b.n	5930 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	68ba      	ldr	r2, [r7, #8]
    592e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5930:	68bb      	ldr	r3, [r7, #8]
    5932:	041b      	lsls	r3, r3, #16
    5934:	0c1b      	lsrs	r3, r3, #16
    5936:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5938:	68bb      	ldr	r3, [r7, #8]
    593a:	0c1b      	lsrs	r3, r3, #16
    593c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    593e:	69ba      	ldr	r2, [r7, #24]
    5940:	69fb      	ldr	r3, [r7, #28]
    5942:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5944:	22a0      	movs	r2, #160	; 0xa0
    5946:	05d2      	lsls	r2, r2, #23
    5948:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    594a:	68fb      	ldr	r3, [r7, #12]
    594c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    594e:	697a      	ldr	r2, [r7, #20]
    5950:	69fb      	ldr	r3, [r7, #28]
    5952:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5954:	22d0      	movs	r2, #208	; 0xd0
    5956:	0612      	lsls	r2, r2, #24
    5958:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    595a:	68fb      	ldr	r3, [r7, #12]
    595c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	78db      	ldrb	r3, [r3, #3]
    5962:	2201      	movs	r2, #1
    5964:	4053      	eors	r3, r2
    5966:	b2db      	uxtb	r3, r3
    5968:	2b00      	cmp	r3, #0
    596a:	d01a      	beq.n	59a2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    596c:	69fa      	ldr	r2, [r7, #28]
    596e:	2380      	movs	r3, #128	; 0x80
    5970:	02db      	lsls	r3, r3, #11
    5972:	4013      	ands	r3, r2
    5974:	d00a      	beq.n	598c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	789b      	ldrb	r3, [r3, #2]
    597a:	2b01      	cmp	r3, #1
    597c:	d103      	bne.n	5986 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    597e:	68fb      	ldr	r3, [r7, #12]
    5980:	68ba      	ldr	r2, [r7, #8]
    5982:	619a      	str	r2, [r3, #24]
    5984:	e002      	b.n	598c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5986:	68fb      	ldr	r3, [r7, #12]
    5988:	68ba      	ldr	r2, [r7, #8]
    598a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	785b      	ldrb	r3, [r3, #1]
    5990:	2b01      	cmp	r3, #1
    5992:	d003      	beq.n	599c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5998:	2b02      	cmp	r3, #2
    599a:	d102      	bne.n	59a2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    599c:	68fb      	ldr	r3, [r7, #12]
    599e:	68ba      	ldr	r2, [r7, #8]
    59a0:	609a      	str	r2, [r3, #8]
		}
	}
}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	46bd      	mov	sp, r7
    59a6:	b008      	add	sp, #32
    59a8:	bd80      	pop	{r7, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	fffbffff 	.word	0xfffbffff

000059b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    59b0:	b580      	push	{r7, lr}
    59b2:	b084      	sub	sp, #16
    59b4:	af00      	add	r7, sp, #0
    59b6:	0002      	movs	r2, r0
    59b8:	6039      	str	r1, [r7, #0]
    59ba:	1dfb      	adds	r3, r7, #7
    59bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    59be:	1dfb      	adds	r3, r7, #7
    59c0:	781b      	ldrb	r3, [r3, #0]
    59c2:	0018      	movs	r0, r3
    59c4:	4b0a      	ldr	r3, [pc, #40]	; (59f0 <system_pinmux_pin_set_config+0x40>)
    59c6:	4798      	blx	r3
    59c8:	0003      	movs	r3, r0
    59ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    59cc:	1dfb      	adds	r3, r7, #7
    59ce:	781b      	ldrb	r3, [r3, #0]
    59d0:	221f      	movs	r2, #31
    59d2:	4013      	ands	r3, r2
    59d4:	2201      	movs	r2, #1
    59d6:	409a      	lsls	r2, r3
    59d8:	0013      	movs	r3, r2
    59da:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    59dc:	683a      	ldr	r2, [r7, #0]
    59de:	68b9      	ldr	r1, [r7, #8]
    59e0:	68fb      	ldr	r3, [r7, #12]
    59e2:	0018      	movs	r0, r3
    59e4:	4b03      	ldr	r3, [pc, #12]	; (59f4 <system_pinmux_pin_set_config+0x44>)
    59e6:	4798      	blx	r3
}
    59e8:	46c0      	nop			; (mov r8, r8)
    59ea:	46bd      	mov	sp, r7
    59ec:	b004      	add	sp, #16
    59ee:	bd80      	pop	{r7, pc}
    59f0:	00005841 	.word	0x00005841
    59f4:	000058a1 	.word	0x000058a1

000059f8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	af00      	add	r7, sp, #0
	return;
    59fc:	46c0      	nop			; (mov r8, r8)
}
    59fe:	46bd      	mov	sp, r7
    5a00:	bd80      	pop	{r7, pc}
	...

00005a04 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5a04:	b580      	push	{r7, lr}
    5a06:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5a08:	4b06      	ldr	r3, [pc, #24]	; (5a24 <system_init+0x20>)
    5a0a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5a0c:	4b06      	ldr	r3, [pc, #24]	; (5a28 <system_init+0x24>)
    5a0e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5a10:	4b06      	ldr	r3, [pc, #24]	; (5a2c <system_init+0x28>)
    5a12:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5a14:	4b06      	ldr	r3, [pc, #24]	; (5a30 <system_init+0x2c>)
    5a16:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5a18:	4b06      	ldr	r3, [pc, #24]	; (5a34 <system_init+0x30>)
    5a1a:	4798      	blx	r3
}
    5a1c:	46c0      	nop			; (mov r8, r8)
    5a1e:	46bd      	mov	sp, r7
    5a20:	bd80      	pop	{r7, pc}
    5a22:	46c0      	nop			; (mov r8, r8)
    5a24:	0000511d 	.word	0x0000511d
    5a28:	00003409 	.word	0x00003409
    5a2c:	000059f9 	.word	0x000059f9
    5a30:	00003679 	.word	0x00003679
    5a34:	000059f9 	.word	0x000059f9

00005a38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    5a3e:	4b2f      	ldr	r3, [pc, #188]	; (5afc <Reset_Handler+0xc4>)
    5a40:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    5a42:	4b2f      	ldr	r3, [pc, #188]	; (5b00 <Reset_Handler+0xc8>)
    5a44:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    5a46:	687a      	ldr	r2, [r7, #4]
    5a48:	683b      	ldr	r3, [r7, #0]
    5a4a:	429a      	cmp	r2, r3
    5a4c:	d00c      	beq.n	5a68 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5a4e:	e007      	b.n	5a60 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5a50:	683b      	ldr	r3, [r7, #0]
    5a52:	1d1a      	adds	r2, r3, #4
    5a54:	603a      	str	r2, [r7, #0]
    5a56:	687a      	ldr	r2, [r7, #4]
    5a58:	1d11      	adds	r1, r2, #4
    5a5a:	6079      	str	r1, [r7, #4]
    5a5c:	6812      	ldr	r2, [r2, #0]
    5a5e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    5a60:	683a      	ldr	r2, [r7, #0]
    5a62:	4b28      	ldr	r3, [pc, #160]	; (5b04 <Reset_Handler+0xcc>)
    5a64:	429a      	cmp	r2, r3
    5a66:	d3f3      	bcc.n	5a50 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5a68:	4b27      	ldr	r3, [pc, #156]	; (5b08 <Reset_Handler+0xd0>)
    5a6a:	603b      	str	r3, [r7, #0]
    5a6c:	e004      	b.n	5a78 <Reset_Handler+0x40>
                *pDest++ = 0;
    5a6e:	683b      	ldr	r3, [r7, #0]
    5a70:	1d1a      	adds	r2, r3, #4
    5a72:	603a      	str	r2, [r7, #0]
    5a74:	2200      	movs	r2, #0
    5a76:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    5a78:	683a      	ldr	r2, [r7, #0]
    5a7a:	4b24      	ldr	r3, [pc, #144]	; (5b0c <Reset_Handler+0xd4>)
    5a7c:	429a      	cmp	r2, r3
    5a7e:	d3f6      	bcc.n	5a6e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5a80:	4b23      	ldr	r3, [pc, #140]	; (5b10 <Reset_Handler+0xd8>)
    5a82:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5a84:	4b23      	ldr	r3, [pc, #140]	; (5b14 <Reset_Handler+0xdc>)
    5a86:	687a      	ldr	r2, [r7, #4]
    5a88:	21ff      	movs	r1, #255	; 0xff
    5a8a:	438a      	bics	r2, r1
    5a8c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5a8e:	4a22      	ldr	r2, [pc, #136]	; (5b18 <Reset_Handler+0xe0>)
    5a90:	2390      	movs	r3, #144	; 0x90
    5a92:	005b      	lsls	r3, r3, #1
    5a94:	2102      	movs	r1, #2
    5a96:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5a98:	4a20      	ldr	r2, [pc, #128]	; (5b1c <Reset_Handler+0xe4>)
    5a9a:	78d3      	ldrb	r3, [r2, #3]
    5a9c:	2103      	movs	r1, #3
    5a9e:	438b      	bics	r3, r1
    5aa0:	1c19      	adds	r1, r3, #0
    5aa2:	2302      	movs	r3, #2
    5aa4:	430b      	orrs	r3, r1
    5aa6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5aa8:	4a1c      	ldr	r2, [pc, #112]	; (5b1c <Reset_Handler+0xe4>)
    5aaa:	78d3      	ldrb	r3, [r2, #3]
    5aac:	210c      	movs	r1, #12
    5aae:	438b      	bics	r3, r1
    5ab0:	1c19      	adds	r1, r3, #0
    5ab2:	2308      	movs	r3, #8
    5ab4:	430b      	orrs	r3, r1
    5ab6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5ab8:	4a19      	ldr	r2, [pc, #100]	; (5b20 <Reset_Handler+0xe8>)
    5aba:	7b93      	ldrb	r3, [r2, #14]
    5abc:	2130      	movs	r1, #48	; 0x30
    5abe:	438b      	bics	r3, r1
    5ac0:	1c19      	adds	r1, r3, #0
    5ac2:	2320      	movs	r3, #32
    5ac4:	430b      	orrs	r3, r1
    5ac6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5ac8:	4a15      	ldr	r2, [pc, #84]	; (5b20 <Reset_Handler+0xe8>)
    5aca:	7b93      	ldrb	r3, [r2, #14]
    5acc:	210c      	movs	r1, #12
    5ace:	438b      	bics	r3, r1
    5ad0:	1c19      	adds	r1, r3, #0
    5ad2:	2308      	movs	r3, #8
    5ad4:	430b      	orrs	r3, r1
    5ad6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5ad8:	4a11      	ldr	r2, [pc, #68]	; (5b20 <Reset_Handler+0xe8>)
    5ada:	7b93      	ldrb	r3, [r2, #14]
    5adc:	2103      	movs	r1, #3
    5ade:	438b      	bics	r3, r1
    5ae0:	1c19      	adds	r1, r3, #0
    5ae2:	2302      	movs	r3, #2
    5ae4:	430b      	orrs	r3, r1
    5ae6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5ae8:	4a0e      	ldr	r2, [pc, #56]	; (5b24 <Reset_Handler+0xec>)
    5aea:	6853      	ldr	r3, [r2, #4]
    5aec:	2180      	movs	r1, #128	; 0x80
    5aee:	430b      	orrs	r3, r1
    5af0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5af2:	4b0d      	ldr	r3, [pc, #52]	; (5b28 <Reset_Handler+0xf0>)
    5af4:	4798      	blx	r3

        /* Branch to main function */
        main();
    5af6:	4b0d      	ldr	r3, [pc, #52]	; (5b2c <Reset_Handler+0xf4>)
    5af8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5afa:	e7fe      	b.n	5afa <Reset_Handler+0xc2>
    5afc:	0000a88c 	.word	0x0000a88c
    5b00:	20000000 	.word	0x20000000
    5b04:	20000238 	.word	0x20000238
    5b08:	20000238 	.word	0x20000238
    5b0c:	20000474 	.word	0x20000474
    5b10:	00000000 	.word	0x00000000
    5b14:	e000ed00 	.word	0xe000ed00
    5b18:	41007000 	.word	0x41007000
    5b1c:	41005000 	.word	0x41005000
    5b20:	41004800 	.word	0x41004800
    5b24:	41004000 	.word	0x41004000
    5b28:	00008025 	.word	0x00008025
    5b2c:	0000637d 	.word	0x0000637d

00005b30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	af00      	add	r7, sp, #0
        while (1) {
    5b34:	e7fe      	b.n	5b34 <Dummy_Handler+0x4>
	...

00005b38 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b086      	sub	sp, #24
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	60f8      	str	r0, [r7, #12]
    5b40:	60b9      	str	r1, [r7, #8]
    5b42:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    5b44:	2300      	movs	r3, #0
    5b46:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    5b48:	68fb      	ldr	r3, [r7, #12]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d012      	beq.n	5b74 <_read+0x3c>
		return -1;
    5b4e:	2301      	movs	r3, #1
    5b50:	425b      	negs	r3, r3
    5b52:	e013      	b.n	5b7c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    5b54:	4b0b      	ldr	r3, [pc, #44]	; (5b84 <_read+0x4c>)
    5b56:	681a      	ldr	r2, [r3, #0]
    5b58:	4b0b      	ldr	r3, [pc, #44]	; (5b88 <_read+0x50>)
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	68b9      	ldr	r1, [r7, #8]
    5b5e:	0018      	movs	r0, r3
    5b60:	4790      	blx	r2
		ptr++;
    5b62:	68bb      	ldr	r3, [r7, #8]
    5b64:	3301      	adds	r3, #1
    5b66:	60bb      	str	r3, [r7, #8]
		nChars++;
    5b68:	697b      	ldr	r3, [r7, #20]
    5b6a:	3301      	adds	r3, #1
    5b6c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    5b6e:	687b      	ldr	r3, [r7, #4]
    5b70:	3b01      	subs	r3, #1
    5b72:	607b      	str	r3, [r7, #4]
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	2b00      	cmp	r3, #0
    5b78:	dcec      	bgt.n	5b54 <_read+0x1c>
	}
	return nChars;
    5b7a:	697b      	ldr	r3, [r7, #20]
}
    5b7c:	0018      	movs	r0, r3
    5b7e:	46bd      	mov	sp, r7
    5b80:	b006      	add	sp, #24
    5b82:	bd80      	pop	{r7, pc}
    5b84:	200003d8 	.word	0x200003d8
    5b88:	200003e0 	.word	0x200003e0

00005b8c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b086      	sub	sp, #24
    5b90:	af00      	add	r7, sp, #0
    5b92:	60f8      	str	r0, [r7, #12]
    5b94:	60b9      	str	r1, [r7, #8]
    5b96:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    5b98:	2300      	movs	r3, #0
    5b9a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    5b9c:	68fb      	ldr	r3, [r7, #12]
    5b9e:	2b01      	cmp	r3, #1
    5ba0:	d01d      	beq.n	5bde <_write+0x52>
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	2b02      	cmp	r3, #2
    5ba6:	d01a      	beq.n	5bde <_write+0x52>
    5ba8:	68fb      	ldr	r3, [r7, #12]
    5baa:	2b03      	cmp	r3, #3
    5bac:	d017      	beq.n	5bde <_write+0x52>
		return -1;
    5bae:	2301      	movs	r3, #1
    5bb0:	425b      	negs	r3, r3
    5bb2:	e018      	b.n	5be6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5bb4:	4b0e      	ldr	r3, [pc, #56]	; (5bf0 <_write+0x64>)
    5bb6:	681a      	ldr	r2, [r3, #0]
    5bb8:	4b0e      	ldr	r3, [pc, #56]	; (5bf4 <_write+0x68>)
    5bba:	6818      	ldr	r0, [r3, #0]
    5bbc:	68bb      	ldr	r3, [r7, #8]
    5bbe:	1c59      	adds	r1, r3, #1
    5bc0:	60b9      	str	r1, [r7, #8]
    5bc2:	781b      	ldrb	r3, [r3, #0]
    5bc4:	0019      	movs	r1, r3
    5bc6:	4790      	blx	r2
    5bc8:	1e03      	subs	r3, r0, #0
    5bca:	da02      	bge.n	5bd2 <_write+0x46>
			return -1;
    5bcc:	2301      	movs	r3, #1
    5bce:	425b      	negs	r3, r3
    5bd0:	e009      	b.n	5be6 <_write+0x5a>
		}
		++nChars;
    5bd2:	697b      	ldr	r3, [r7, #20]
    5bd4:	3301      	adds	r3, #1
    5bd6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	3b01      	subs	r3, #1
    5bdc:	607b      	str	r3, [r7, #4]
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	2b00      	cmp	r3, #0
    5be2:	d1e7      	bne.n	5bb4 <_write+0x28>
	}
	return nChars;
    5be4:	697b      	ldr	r3, [r7, #20]
}
    5be6:	0018      	movs	r0, r3
    5be8:	46bd      	mov	sp, r7
    5bea:	b006      	add	sp, #24
    5bec:	bd80      	pop	{r7, pc}
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	200003dc 	.word	0x200003dc
    5bf4:	200003e0 	.word	0x200003e0

00005bf8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5bf8:	b580      	push	{r7, lr}
    5bfa:	b084      	sub	sp, #16
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5c00:	4b0a      	ldr	r3, [pc, #40]	; (5c2c <_sbrk+0x34>)
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	2b00      	cmp	r3, #0
    5c06:	d102      	bne.n	5c0e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    5c08:	4b08      	ldr	r3, [pc, #32]	; (5c2c <_sbrk+0x34>)
    5c0a:	4a09      	ldr	r2, [pc, #36]	; (5c30 <_sbrk+0x38>)
    5c0c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    5c0e:	4b07      	ldr	r3, [pc, #28]	; (5c2c <_sbrk+0x34>)
    5c10:	681b      	ldr	r3, [r3, #0]
    5c12:	60fb      	str	r3, [r7, #12]

	heap += incr;
    5c14:	4b05      	ldr	r3, [pc, #20]	; (5c2c <_sbrk+0x34>)
    5c16:	681a      	ldr	r2, [r3, #0]
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	18d2      	adds	r2, r2, r3
    5c1c:	4b03      	ldr	r3, [pc, #12]	; (5c2c <_sbrk+0x34>)
    5c1e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    5c20:	68fb      	ldr	r3, [r7, #12]
}
    5c22:	0018      	movs	r0, r3
    5c24:	46bd      	mov	sp, r7
    5c26:	b004      	add	sp, #16
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	46c0      	nop			; (mov r8, r8)
    5c2c:	2000029c 	.word	0x2000029c
    5c30:	20002478 	.word	0x20002478

00005c34 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    5c34:	b580      	push	{r7, lr}
    5c36:	b082      	sub	sp, #8
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
	return -1;
    5c3c:	2301      	movs	r3, #1
    5c3e:	425b      	negs	r3, r3
}
    5c40:	0018      	movs	r0, r3
    5c42:	46bd      	mov	sp, r7
    5c44:	b002      	add	sp, #8
    5c46:	bd80      	pop	{r7, pc}

00005c48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    5c48:	b580      	push	{r7, lr}
    5c4a:	b082      	sub	sp, #8
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	6078      	str	r0, [r7, #4]
    5c50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    5c52:	683b      	ldr	r3, [r7, #0]
    5c54:	2280      	movs	r2, #128	; 0x80
    5c56:	0192      	lsls	r2, r2, #6
    5c58:	605a      	str	r2, [r3, #4]

	return 0;
    5c5a:	2300      	movs	r3, #0
}
    5c5c:	0018      	movs	r0, r3
    5c5e:	46bd      	mov	sp, r7
    5c60:	b002      	add	sp, #8
    5c62:	bd80      	pop	{r7, pc}

00005c64 <_isatty>:

extern int _isatty(int file)
{
    5c64:	b580      	push	{r7, lr}
    5c66:	b082      	sub	sp, #8
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
	return 1;
    5c6c:	2301      	movs	r3, #1
}
    5c6e:	0018      	movs	r0, r3
    5c70:	46bd      	mov	sp, r7
    5c72:	b002      	add	sp, #8
    5c74:	bd80      	pop	{r7, pc}

00005c76 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    5c76:	b580      	push	{r7, lr}
    5c78:	b084      	sub	sp, #16
    5c7a:	af00      	add	r7, sp, #0
    5c7c:	60f8      	str	r0, [r7, #12]
    5c7e:	60b9      	str	r1, [r7, #8]
    5c80:	607a      	str	r2, [r7, #4]
	return 0;
    5c82:	2300      	movs	r3, #0
}
    5c84:	0018      	movs	r0, r3
    5c86:	46bd      	mov	sp, r7
    5c88:	b004      	add	sp, #16
    5c8a:	bd80      	pop	{r7, pc}

00005c8c <system_pinmux_get_group_from_gpio_pin>:
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b084      	sub	sp, #16
    5c90:	af00      	add	r7, sp, #0
    5c92:	0002      	movs	r2, r0
    5c94:	1dfb      	adds	r3, r7, #7
    5c96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5c98:	230f      	movs	r3, #15
    5c9a:	18fb      	adds	r3, r7, r3
    5c9c:	1dfa      	adds	r2, r7, #7
    5c9e:	7812      	ldrb	r2, [r2, #0]
    5ca0:	09d2      	lsrs	r2, r2, #7
    5ca2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5ca4:	230e      	movs	r3, #14
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	1dfa      	adds	r2, r7, #7
    5caa:	7812      	ldrb	r2, [r2, #0]
    5cac:	0952      	lsrs	r2, r2, #5
    5cae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5cb0:	4b0d      	ldr	r3, [pc, #52]	; (5ce8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5cb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5cb4:	230f      	movs	r3, #15
    5cb6:	18fb      	adds	r3, r7, r3
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d10f      	bne.n	5cde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5cbe:	230f      	movs	r3, #15
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	009b      	lsls	r3, r3, #2
    5cc6:	2210      	movs	r2, #16
    5cc8:	4694      	mov	ip, r2
    5cca:	44bc      	add	ip, r7
    5ccc:	4463      	add	r3, ip
    5cce:	3b08      	subs	r3, #8
    5cd0:	681a      	ldr	r2, [r3, #0]
    5cd2:	230e      	movs	r3, #14
    5cd4:	18fb      	adds	r3, r7, r3
    5cd6:	781b      	ldrb	r3, [r3, #0]
    5cd8:	01db      	lsls	r3, r3, #7
    5cda:	18d3      	adds	r3, r2, r3
    5cdc:	e000      	b.n	5ce0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5cde:	2300      	movs	r3, #0
}
    5ce0:	0018      	movs	r0, r3
    5ce2:	46bd      	mov	sp, r7
    5ce4:	b004      	add	sp, #16
    5ce6:	bd80      	pop	{r7, pc}
    5ce8:	41004400 	.word	0x41004400

00005cec <system_interrupt_enable>:
{
    5cec:	b580      	push	{r7, lr}
    5cee:	b082      	sub	sp, #8
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	0002      	movs	r2, r0
    5cf4:	1dfb      	adds	r3, r7, #7
    5cf6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5cf8:	4b06      	ldr	r3, [pc, #24]	; (5d14 <system_interrupt_enable+0x28>)
    5cfa:	1dfa      	adds	r2, r7, #7
    5cfc:	7812      	ldrb	r2, [r2, #0]
    5cfe:	0011      	movs	r1, r2
    5d00:	221f      	movs	r2, #31
    5d02:	400a      	ands	r2, r1
    5d04:	2101      	movs	r1, #1
    5d06:	4091      	lsls	r1, r2
    5d08:	000a      	movs	r2, r1
    5d0a:	601a      	str	r2, [r3, #0]
}
    5d0c:	46c0      	nop			; (mov r8, r8)
    5d0e:	46bd      	mov	sp, r7
    5d10:	b002      	add	sp, #8
    5d12:	bd80      	pop	{r7, pc}
    5d14:	e000e100 	.word	0xe000e100

00005d18 <adc_is_syncing>:
{
    5d18:	b580      	push	{r7, lr}
    5d1a:	b084      	sub	sp, #16
    5d1c:	af00      	add	r7, sp, #0
    5d1e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	7e5b      	ldrb	r3, [r3, #25]
    5d2a:	b2db      	uxtb	r3, r3
    5d2c:	b25b      	sxtb	r3, r3
    5d2e:	2b00      	cmp	r3, #0
    5d30:	da01      	bge.n	5d36 <adc_is_syncing+0x1e>
		return true;
    5d32:	2301      	movs	r3, #1
    5d34:	e000      	b.n	5d38 <adc_is_syncing+0x20>
	return false;
    5d36:	2300      	movs	r3, #0
}
    5d38:	0018      	movs	r0, r3
    5d3a:	46bd      	mov	sp, r7
    5d3c:	b004      	add	sp, #16
    5d3e:	bd80      	pop	{r7, pc}

00005d40 <adc_enable>:
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b084      	sub	sp, #16
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	0018      	movs	r0, r3
    5d54:	4b10      	ldr	r3, [pc, #64]	; (5d98 <adc_enable+0x58>)
    5d56:	4798      	blx	r3
    5d58:	1e03      	subs	r3, r0, #0
    5d5a:	d1f9      	bne.n	5d50 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    5d5c:	2017      	movs	r0, #23
    5d5e:	4b0f      	ldr	r3, [pc, #60]	; (5d9c <adc_enable+0x5c>)
    5d60:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    5d62:	68fb      	ldr	r3, [r7, #12]
    5d64:	220f      	movs	r2, #15
    5d66:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    5d68:	68fb      	ldr	r3, [r7, #12]
    5d6a:	220f      	movs	r2, #15
    5d6c:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5d6e:	68fb      	ldr	r3, [r7, #12]
    5d70:	781b      	ldrb	r3, [r3, #0]
    5d72:	b2db      	uxtb	r3, r3
    5d74:	2202      	movs	r2, #2
    5d76:	4313      	orrs	r3, r2
    5d78:	b2da      	uxtb	r2, r3
    5d7a:	68fb      	ldr	r3, [r7, #12]
    5d7c:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	0018      	movs	r0, r3
    5d84:	4b04      	ldr	r3, [pc, #16]	; (5d98 <adc_enable+0x58>)
    5d86:	4798      	blx	r3
    5d88:	1e03      	subs	r3, r0, #0
    5d8a:	d1f9      	bne.n	5d80 <adc_enable+0x40>
	return STATUS_OK;
    5d8c:	2300      	movs	r3, #0
}
    5d8e:	0018      	movs	r0, r3
    5d90:	46bd      	mov	sp, r7
    5d92:	b004      	add	sp, #16
    5d94:	bd80      	pop	{r7, pc}
    5d96:	46c0      	nop			; (mov r8, r8)
    5d98:	00005d19 	.word	0x00005d19
    5d9c:	00005ced 	.word	0x00005ced

00005da0 <i2c_master_is_syncing>:
{
    5da0:	b580      	push	{r7, lr}
    5da2:	b084      	sub	sp, #16
    5da4:	af00      	add	r7, sp, #0
    5da6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	681b      	ldr	r3, [r3, #0]
    5dac:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5dae:	68fb      	ldr	r3, [r7, #12]
    5db0:	69db      	ldr	r3, [r3, #28]
    5db2:	2207      	movs	r2, #7
    5db4:	4013      	ands	r3, r2
    5db6:	1e5a      	subs	r2, r3, #1
    5db8:	4193      	sbcs	r3, r2
    5dba:	b2db      	uxtb	r3, r3
}
    5dbc:	0018      	movs	r0, r3
    5dbe:	46bd      	mov	sp, r7
    5dc0:	b004      	add	sp, #16
    5dc2:	bd80      	pop	{r7, pc}

00005dc4 <_i2c_master_wait_for_sync>:
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b082      	sub	sp, #8
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    5dcc:	46c0      	nop			; (mov r8, r8)
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	0018      	movs	r0, r3
    5dd2:	4b04      	ldr	r3, [pc, #16]	; (5de4 <_i2c_master_wait_for_sync+0x20>)
    5dd4:	4798      	blx	r3
    5dd6:	1e03      	subs	r3, r0, #0
    5dd8:	d1f9      	bne.n	5dce <_i2c_master_wait_for_sync+0xa>
}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	46bd      	mov	sp, r7
    5dde:	b002      	add	sp, #8
    5de0:	bd80      	pop	{r7, pc}
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	00005da1 	.word	0x00005da1

00005de8 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	2264      	movs	r2, #100	; 0x64
    5df4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	4a1b      	ldr	r2, [pc, #108]	; (5e68 <i2c_master_get_config_defaults+0x80>)
    5dfa:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	2200      	movs	r2, #0
    5e00:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	2200      	movs	r2, #0
    5e06:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	2200      	movs	r2, #0
    5e0c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	2280      	movs	r2, #128	; 0x80
    5e12:	0392      	lsls	r2, r2, #14
    5e14:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	2201      	movs	r2, #1
    5e1a:	4252      	negs	r2, r2
    5e1c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	2201      	movs	r2, #1
    5e22:	4252      	negs	r2, r2
    5e24:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	2200      	movs	r2, #0
    5e2a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	2200      	movs	r2, #0
    5e30:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    5e32:	687b      	ldr	r3, [r7, #4]
    5e34:	2224      	movs	r2, #36	; 0x24
    5e36:	2100      	movs	r1, #0
    5e38:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5e3a:	687b      	ldr	r3, [r7, #4]
    5e3c:	2200      	movs	r2, #0
    5e3e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	222c      	movs	r2, #44	; 0x2c
    5e44:	2100      	movs	r1, #0
    5e46:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	222d      	movs	r2, #45	; 0x2d
    5e4c:	2100      	movs	r1, #0
    5e4e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	222e      	movs	r2, #46	; 0x2e
    5e54:	2100      	movs	r1, #0
    5e56:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	22d7      	movs	r2, #215	; 0xd7
    5e5c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	46bd      	mov	sp, r7
    5e62:	b002      	add	sp, #8
    5e64:	bd80      	pop	{r7, pc}
    5e66:	46c0      	nop			; (mov r8, r8)
    5e68:	00000d48 	.word	0x00000d48

00005e6c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    5e6c:	b580      	push	{r7, lr}
    5e6e:	b084      	sub	sp, #16
    5e70:	af00      	add	r7, sp, #0
    5e72:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	681b      	ldr	r3, [r3, #0]
    5e78:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    5e7a:	2300      	movs	r3, #0
    5e7c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	0018      	movs	r0, r3
    5e82:	4b14      	ldr	r3, [pc, #80]	; (5ed4 <i2c_master_enable+0x68>)
    5e84:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5e86:	68bb      	ldr	r3, [r7, #8]
    5e88:	681b      	ldr	r3, [r3, #0]
    5e8a:	2202      	movs	r2, #2
    5e8c:	431a      	orrs	r2, r3
    5e8e:	68bb      	ldr	r3, [r7, #8]
    5e90:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5e92:	687b      	ldr	r3, [r7, #4]
    5e94:	681b      	ldr	r3, [r3, #0]
    5e96:	0018      	movs	r0, r3
    5e98:	4b0f      	ldr	r3, [pc, #60]	; (5ed8 <i2c_master_enable+0x6c>)
    5e9a:	4798      	blx	r3
    5e9c:	0003      	movs	r3, r0
    5e9e:	0018      	movs	r0, r3
    5ea0:	4b0e      	ldr	r3, [pc, #56]	; (5edc <i2c_master_enable+0x70>)
    5ea2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5ea4:	e00c      	b.n	5ec0 <i2c_master_enable+0x54>
		timeout_counter++;
    5ea6:	68fb      	ldr	r3, [r7, #12]
    5ea8:	3301      	adds	r3, #1
    5eaa:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	88db      	ldrh	r3, [r3, #6]
    5eb0:	001a      	movs	r2, r3
    5eb2:	68fb      	ldr	r3, [r7, #12]
    5eb4:	429a      	cmp	r2, r3
    5eb6:	d803      	bhi.n	5ec0 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5eb8:	68bb      	ldr	r3, [r7, #8]
    5eba:	2210      	movs	r2, #16
    5ebc:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    5ebe:	e006      	b.n	5ece <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    5ec0:	68bb      	ldr	r3, [r7, #8]
    5ec2:	8b5b      	ldrh	r3, [r3, #26]
    5ec4:	b29b      	uxth	r3, r3
    5ec6:	001a      	movs	r2, r3
    5ec8:	2310      	movs	r3, #16
    5eca:	4013      	ands	r3, r2
    5ecc:	d0eb      	beq.n	5ea6 <i2c_master_enable+0x3a>
		}
	}
}
    5ece:	46bd      	mov	sp, r7
    5ed0:	b004      	add	sp, #16
    5ed2:	bd80      	pop	{r7, pc}
    5ed4:	00005dc5 	.word	0x00005dc5
    5ed8:	00003e91 	.word	0x00003e91
    5edc:	00005ced 	.word	0x00005ced

00005ee0 <port_get_group_from_gpio_pin>:
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b082      	sub	sp, #8
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	0002      	movs	r2, r0
    5ee8:	1dfb      	adds	r3, r7, #7
    5eea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5eec:	1dfb      	adds	r3, r7, #7
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	0018      	movs	r0, r3
    5ef2:	4b03      	ldr	r3, [pc, #12]	; (5f00 <port_get_group_from_gpio_pin+0x20>)
    5ef4:	4798      	blx	r3
    5ef6:	0003      	movs	r3, r0
}
    5ef8:	0018      	movs	r0, r3
    5efa:	46bd      	mov	sp, r7
    5efc:	b002      	add	sp, #8
    5efe:	bd80      	pop	{r7, pc}
    5f00:	00005c8d 	.word	0x00005c8d

00005f04 <port_get_config_defaults>:
{
    5f04:	b580      	push	{r7, lr}
    5f06:	b082      	sub	sp, #8
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	2200      	movs	r2, #0
    5f10:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	2201      	movs	r2, #1
    5f16:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    5f18:	687b      	ldr	r3, [r7, #4]
    5f1a:	2200      	movs	r2, #0
    5f1c:	709a      	strb	r2, [r3, #2]
}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	46bd      	mov	sp, r7
    5f22:	b002      	add	sp, #8
    5f24:	bd80      	pop	{r7, pc}
	...

00005f28 <port_pin_set_output_level>:
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b084      	sub	sp, #16
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	0002      	movs	r2, r0
    5f30:	1dfb      	adds	r3, r7, #7
    5f32:	701a      	strb	r2, [r3, #0]
    5f34:	1dbb      	adds	r3, r7, #6
    5f36:	1c0a      	adds	r2, r1, #0
    5f38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5f3a:	1dfb      	adds	r3, r7, #7
    5f3c:	781b      	ldrb	r3, [r3, #0]
    5f3e:	0018      	movs	r0, r3
    5f40:	4b0d      	ldr	r3, [pc, #52]	; (5f78 <port_pin_set_output_level+0x50>)
    5f42:	4798      	blx	r3
    5f44:	0003      	movs	r3, r0
    5f46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5f48:	1dfb      	adds	r3, r7, #7
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	221f      	movs	r2, #31
    5f4e:	4013      	ands	r3, r2
    5f50:	2201      	movs	r2, #1
    5f52:	409a      	lsls	r2, r3
    5f54:	0013      	movs	r3, r2
    5f56:	60bb      	str	r3, [r7, #8]
	if (level) {
    5f58:	1dbb      	adds	r3, r7, #6
    5f5a:	781b      	ldrb	r3, [r3, #0]
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	d003      	beq.n	5f68 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5f60:	68fb      	ldr	r3, [r7, #12]
    5f62:	68ba      	ldr	r2, [r7, #8]
    5f64:	619a      	str	r2, [r3, #24]
}
    5f66:	e002      	b.n	5f6e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5f68:	68fb      	ldr	r3, [r7, #12]
    5f6a:	68ba      	ldr	r2, [r7, #8]
    5f6c:	615a      	str	r2, [r3, #20]
}
    5f6e:	46c0      	nop			; (mov r8, r8)
    5f70:	46bd      	mov	sp, r7
    5f72:	b004      	add	sp, #16
    5f74:	bd80      	pop	{r7, pc}
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	00005ee1 	.word	0x00005ee1

00005f7c <usart_is_syncing>:
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	b084      	sub	sp, #16
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	681b      	ldr	r3, [r3, #0]
    5f88:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    5f8a:	68fb      	ldr	r3, [r7, #12]
    5f8c:	69db      	ldr	r3, [r3, #28]
    5f8e:	1e5a      	subs	r2, r3, #1
    5f90:	4193      	sbcs	r3, r2
    5f92:	b2db      	uxtb	r3, r3
}
    5f94:	0018      	movs	r0, r3
    5f96:	46bd      	mov	sp, r7
    5f98:	b004      	add	sp, #16
    5f9a:	bd80      	pop	{r7, pc}

00005f9c <_usart_wait_for_sync>:
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b082      	sub	sp, #8
    5fa0:	af00      	add	r7, sp, #0
    5fa2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5fa4:	46c0      	nop			; (mov r8, r8)
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	0018      	movs	r0, r3
    5faa:	4b04      	ldr	r3, [pc, #16]	; (5fbc <_usart_wait_for_sync+0x20>)
    5fac:	4798      	blx	r3
    5fae:	1e03      	subs	r3, r0, #0
    5fb0:	d1f9      	bne.n	5fa6 <_usart_wait_for_sync+0xa>
}
    5fb2:	46c0      	nop			; (mov r8, r8)
    5fb4:	46bd      	mov	sp, r7
    5fb6:	b002      	add	sp, #8
    5fb8:	bd80      	pop	{r7, pc}
    5fba:	46c0      	nop			; (mov r8, r8)
    5fbc:	00005f7d 	.word	0x00005f7d

00005fc0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	2280      	movs	r2, #128	; 0x80
    5fcc:	05d2      	lsls	r2, r2, #23
    5fce:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	2200      	movs	r2, #0
    5fd4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	22ff      	movs	r2, #255	; 0xff
    5fda:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	2200      	movs	r2, #0
    5fe0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	2200      	movs	r2, #0
    5fe6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	2296      	movs	r2, #150	; 0x96
    5fec:	0192      	lsls	r2, r2, #6
    5fee:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	2224      	movs	r2, #36	; 0x24
    5ff4:	2101      	movs	r1, #1
    5ff6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	2225      	movs	r2, #37	; 0x25
    5ffc:	2101      	movs	r1, #1
    5ffe:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	2226      	movs	r2, #38	; 0x26
    6004:	2100      	movs	r1, #0
    6006:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	2100      	movs	r1, #0
    600e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	2200      	movs	r2, #0
    6014:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	2288      	movs	r2, #136	; 0x88
    601a:	0352      	lsls	r2, r2, #13
    601c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	222c      	movs	r2, #44	; 0x2c
    6022:	2100      	movs	r1, #0
    6024:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	222d      	movs	r2, #45	; 0x2d
    602a:	2100      	movs	r1, #0
    602c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	2200      	movs	r2, #0
    6032:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	2200      	movs	r2, #0
    6038:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	2200      	movs	r2, #0
    603e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	2200      	movs	r2, #0
    6044:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6046:	687b      	ldr	r3, [r7, #4]
    6048:	2200      	movs	r2, #0
    604a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	2200      	movs	r2, #0
    6050:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	2200      	movs	r2, #0
    6056:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	2200      	movs	r2, #0
    605c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	2200      	movs	r2, #0
    6062:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	2200      	movs	r2, #0
    6068:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	2213      	movs	r2, #19
    606e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	2200      	movs	r2, #0
    6074:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    6076:	46c0      	nop			; (mov r8, r8)
    6078:	46bd      	mov	sp, r7
    607a:	b002      	add	sp, #8
    607c:	bd80      	pop	{r7, pc}
	...

00006080 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    6080:	b580      	push	{r7, lr}
    6082:	b084      	sub	sp, #16
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	681b      	ldr	r3, [r3, #0]
    608c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	681b      	ldr	r3, [r3, #0]
    6092:	0018      	movs	r0, r3
    6094:	4b09      	ldr	r3, [pc, #36]	; (60bc <usart_enable+0x3c>)
    6096:	4798      	blx	r3
    6098:	0003      	movs	r3, r0
    609a:	0018      	movs	r0, r3
    609c:	4b08      	ldr	r3, [pc, #32]	; (60c0 <usart_enable+0x40>)
    609e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	0018      	movs	r0, r3
    60a4:	4b07      	ldr	r3, [pc, #28]	; (60c4 <usart_enable+0x44>)
    60a6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    60a8:	68fb      	ldr	r3, [r7, #12]
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	2202      	movs	r2, #2
    60ae:	431a      	orrs	r2, r3
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	601a      	str	r2, [r3, #0]
}
    60b4:	46c0      	nop			; (mov r8, r8)
    60b6:	46bd      	mov	sp, r7
    60b8:	b004      	add	sp, #16
    60ba:	bd80      	pop	{r7, pc}
    60bc:	00003e91 	.word	0x00003e91
    60c0:	00005ced 	.word	0x00005ced
    60c4:	00005f9d 	.word	0x00005f9d

000060c8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    60c8:	b580      	push	{r7, lr}
    60ca:	b084      	sub	sp, #16
    60cc:	af00      	add	r7, sp, #0
    60ce:	60f8      	str	r0, [r7, #12]
    60d0:	60b9      	str	r1, [r7, #8]
    60d2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    60d4:	687a      	ldr	r2, [r7, #4]
    60d6:	68b9      	ldr	r1, [r7, #8]
    60d8:	68fb      	ldr	r3, [r7, #12]
    60da:	0018      	movs	r0, r3
    60dc:	4b05      	ldr	r3, [pc, #20]	; (60f4 <usart_serial_init+0x2c>)
    60de:	4798      	blx	r3
    60e0:	1e03      	subs	r3, r0, #0
    60e2:	d101      	bne.n	60e8 <usart_serial_init+0x20>
		return true;
    60e4:	2301      	movs	r3, #1
    60e6:	e000      	b.n	60ea <usart_serial_init+0x22>
	}
	else {
		return false;
    60e8:	2300      	movs	r3, #0
	}
}
    60ea:	0018      	movs	r0, r3
    60ec:	46bd      	mov	sp, r7
    60ee:	b004      	add	sp, #16
    60f0:	bd80      	pop	{r7, pc}
    60f2:	46c0      	nop			; (mov r8, r8)
    60f4:	00004341 	.word	0x00004341

000060f8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    60f8:	b580      	push	{r7, lr}
    60fa:	b082      	sub	sp, #8
    60fc:	af00      	add	r7, sp, #0
    60fe:	6078      	str	r0, [r7, #4]
    6100:	000a      	movs	r2, r1
    6102:	1cfb      	adds	r3, r7, #3
    6104:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    6106:	46c0      	nop			; (mov r8, r8)
    6108:	1cfb      	adds	r3, r7, #3
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	b29a      	uxth	r2, r3
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	0011      	movs	r1, r2
    6112:	0018      	movs	r0, r3
    6114:	4b04      	ldr	r3, [pc, #16]	; (6128 <usart_serial_putchar+0x30>)
    6116:	4798      	blx	r3
    6118:	1e03      	subs	r3, r0, #0
    611a:	d1f5      	bne.n	6108 <usart_serial_putchar+0x10>

	return STATUS_OK;
    611c:	2300      	movs	r3, #0
}
    611e:	0018      	movs	r0, r3
    6120:	46bd      	mov	sp, r7
    6122:	b002      	add	sp, #8
    6124:	bd80      	pop	{r7, pc}
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	000045b5 	.word	0x000045b5

0000612c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    612c:	b580      	push	{r7, lr}
    612e:	b084      	sub	sp, #16
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
    6134:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    6136:	230e      	movs	r3, #14
    6138:	18fb      	adds	r3, r7, r3
    613a:	2200      	movs	r2, #0
    613c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    613e:	46c0      	nop			; (mov r8, r8)
    6140:	230e      	movs	r3, #14
    6142:	18fa      	adds	r2, r7, r3
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	0011      	movs	r1, r2
    6148:	0018      	movs	r0, r3
    614a:	4b07      	ldr	r3, [pc, #28]	; (6168 <usart_serial_getchar+0x3c>)
    614c:	4798      	blx	r3
    614e:	1e03      	subs	r3, r0, #0
    6150:	d1f6      	bne.n	6140 <usart_serial_getchar+0x14>

	*c = temp;
    6152:	230e      	movs	r3, #14
    6154:	18fb      	adds	r3, r7, r3
    6156:	881b      	ldrh	r3, [r3, #0]
    6158:	b2da      	uxtb	r2, r3
    615a:	683b      	ldr	r3, [r7, #0]
    615c:	701a      	strb	r2, [r3, #0]
}
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	46bd      	mov	sp, r7
    6162:	b004      	add	sp, #16
    6164:	bd80      	pop	{r7, pc}
    6166:	46c0      	nop			; (mov r8, r8)
    6168:	00004619 	.word	0x00004619

0000616c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    616c:	b580      	push	{r7, lr}
    616e:	b084      	sub	sp, #16
    6170:	af00      	add	r7, sp, #0
    6172:	60f8      	str	r0, [r7, #12]
    6174:	60b9      	str	r1, [r7, #8]
    6176:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    6178:	4b10      	ldr	r3, [pc, #64]	; (61bc <stdio_serial_init+0x50>)
    617a:	68fa      	ldr	r2, [r7, #12]
    617c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    617e:	4b10      	ldr	r3, [pc, #64]	; (61c0 <stdio_serial_init+0x54>)
    6180:	4a10      	ldr	r2, [pc, #64]	; (61c4 <stdio_serial_init+0x58>)
    6182:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6184:	4b10      	ldr	r3, [pc, #64]	; (61c8 <stdio_serial_init+0x5c>)
    6186:	4a11      	ldr	r2, [pc, #68]	; (61cc <stdio_serial_init+0x60>)
    6188:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    618a:	687a      	ldr	r2, [r7, #4]
    618c:	68b9      	ldr	r1, [r7, #8]
    618e:	68fb      	ldr	r3, [r7, #12]
    6190:	0018      	movs	r0, r3
    6192:	4b0f      	ldr	r3, [pc, #60]	; (61d0 <stdio_serial_init+0x64>)
    6194:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6196:	4b0f      	ldr	r3, [pc, #60]	; (61d4 <stdio_serial_init+0x68>)
    6198:	681b      	ldr	r3, [r3, #0]
    619a:	689b      	ldr	r3, [r3, #8]
    619c:	2100      	movs	r1, #0
    619e:	0018      	movs	r0, r3
    61a0:	4b0d      	ldr	r3, [pc, #52]	; (61d8 <stdio_serial_init+0x6c>)
    61a2:	4798      	blx	r3
	setbuf(stdin, NULL);
    61a4:	4b0b      	ldr	r3, [pc, #44]	; (61d4 <stdio_serial_init+0x68>)
    61a6:	681b      	ldr	r3, [r3, #0]
    61a8:	685b      	ldr	r3, [r3, #4]
    61aa:	2100      	movs	r1, #0
    61ac:	0018      	movs	r0, r3
    61ae:	4b0a      	ldr	r3, [pc, #40]	; (61d8 <stdio_serial_init+0x6c>)
    61b0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    61b2:	46c0      	nop			; (mov r8, r8)
    61b4:	46bd      	mov	sp, r7
    61b6:	b004      	add	sp, #16
    61b8:	bd80      	pop	{r7, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	200003e0 	.word	0x200003e0
    61c0:	200003dc 	.word	0x200003dc
    61c4:	000060f9 	.word	0x000060f9
    61c8:	200003d8 	.word	0x200003d8
    61cc:	0000612d 	.word	0x0000612d
    61d0:	000060c9 	.word	0x000060c9
    61d4:	20000068 	.word	0x20000068
    61d8:	000081cd 	.word	0x000081cd

000061dc <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    61dc:	b580      	push	{r7, lr}
    61de:	b090      	sub	sp, #64	; 0x40
    61e0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    61e2:	003b      	movs	r3, r7
    61e4:	0018      	movs	r0, r3
    61e6:	4b13      	ldr	r3, [pc, #76]	; (6234 <configure_console+0x58>)
    61e8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    61ea:	003b      	movs	r3, r7
    61ec:	22c4      	movs	r2, #196	; 0xc4
    61ee:	0392      	lsls	r2, r2, #14
    61f0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    61f2:	003b      	movs	r3, r7
    61f4:	2201      	movs	r2, #1
    61f6:	4252      	negs	r2, r2
    61f8:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    61fa:	003b      	movs	r3, r7
    61fc:	2201      	movs	r2, #1
    61fe:	4252      	negs	r2, r2
    6200:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6202:	003b      	movs	r3, r7
    6204:	4a0c      	ldr	r2, [pc, #48]	; (6238 <configure_console+0x5c>)
    6206:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6208:	003b      	movs	r3, r7
    620a:	4a0c      	ldr	r2, [pc, #48]	; (623c <configure_console+0x60>)
    620c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    620e:	003b      	movs	r3, r7
    6210:	22e1      	movs	r2, #225	; 0xe1
    6212:	0252      	lsls	r2, r2, #9
    6214:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    6216:	003a      	movs	r2, r7
    6218:	4909      	ldr	r1, [pc, #36]	; (6240 <configure_console+0x64>)
    621a:	4b0a      	ldr	r3, [pc, #40]	; (6244 <configure_console+0x68>)
    621c:	0018      	movs	r0, r3
    621e:	4b0a      	ldr	r3, [pc, #40]	; (6248 <configure_console+0x6c>)
    6220:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    6222:	4b08      	ldr	r3, [pc, #32]	; (6244 <configure_console+0x68>)
    6224:	0018      	movs	r0, r3
    6226:	4b09      	ldr	r3, [pc, #36]	; (624c <configure_console+0x70>)
    6228:	4798      	blx	r3
}
    622a:	46c0      	nop			; (mov r8, r8)
    622c:	46bd      	mov	sp, r7
    622e:	b010      	add	sp, #64	; 0x40
    6230:	bd80      	pop	{r7, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	00005fc1 	.word	0x00005fc1
    6238:	002a0003 	.word	0x002a0003
    623c:	002b0003 	.word	0x002b0003
    6240:	42001800 	.word	0x42001800
    6244:	200002a0 	.word	0x200002a0
    6248:	0000616d 	.word	0x0000616d
    624c:	00006081 	.word	0x00006081

00006250 <configure_gpio>:

static void configure_gpio(void)
{
    6250:	b580      	push	{r7, lr}
    6252:	b082      	sub	sp, #8
    6254:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    6256:	1d3b      	adds	r3, r7, #4
    6258:	0018      	movs	r0, r3
    625a:	4b07      	ldr	r3, [pc, #28]	; (6278 <configure_gpio+0x28>)
    625c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    625e:	1d3b      	adds	r3, r7, #4
    6260:	2201      	movs	r2, #1
    6262:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    6264:	1d3b      	adds	r3, r7, #4
    6266:	0019      	movs	r1, r3
    6268:	2022      	movs	r0, #34	; 0x22
    626a:	4b04      	ldr	r3, [pc, #16]	; (627c <configure_gpio+0x2c>)
    626c:	4798      	blx	r3
}
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	46bd      	mov	sp, r7
    6272:	b002      	add	sp, #8
    6274:	bd80      	pop	{r7, pc}
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	00005f05 	.word	0x00005f05
    627c:	000037e5 	.word	0x000037e5

00006280 <configure_ftdi_reset>:

static void configure_ftdi_reset(void)
{
    6280:	b580      	push	{r7, lr}
    6282:	b082      	sub	sp, #8
    6284:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    6286:	1d3b      	adds	r3, r7, #4
    6288:	0018      	movs	r0, r3
    628a:	4b09      	ldr	r3, [pc, #36]	; (62b0 <configure_ftdi_reset+0x30>)
    628c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    628e:	1d3b      	adds	r3, r7, #4
    6290:	2201      	movs	r2, #1
    6292:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB22, &config_port_pin);
    6294:	1d3b      	adds	r3, r7, #4
    6296:	0019      	movs	r1, r3
    6298:	2036      	movs	r0, #54	; 0x36
    629a:	4b06      	ldr	r3, [pc, #24]	; (62b4 <configure_ftdi_reset+0x34>)
    629c:	4798      	blx	r3
	
	port_pin_set_output_level(PIN_PB22, true);
    629e:	2101      	movs	r1, #1
    62a0:	2036      	movs	r0, #54	; 0x36
    62a2:	4b05      	ldr	r3, [pc, #20]	; (62b8 <configure_ftdi_reset+0x38>)
    62a4:	4798      	blx	r3
}
    62a6:	46c0      	nop			; (mov r8, r8)
    62a8:	46bd      	mov	sp, r7
    62aa:	b002      	add	sp, #8
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	00005f05 	.word	0x00005f05
    62b4:	000037e5 	.word	0x000037e5
    62b8:	00005f29 	.word	0x00005f29

000062bc <configure_i2c>:

static void configure_i2c(void)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b08e      	sub	sp, #56	; 0x38
    62c0:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    62c2:	1d3b      	adds	r3, r7, #4
    62c4:	0018      	movs	r0, r3
    62c6:	4b10      	ldr	r3, [pc, #64]	; (6308 <configure_i2c+0x4c>)
    62c8:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
    62ca:	1d3b      	adds	r3, r7, #4
    62cc:	2201      	movs	r2, #1
    62ce:	4252      	negs	r2, r2
    62d0:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0       = PINMUX_PA22D_SERCOM5_PAD0;
    62d2:	1d3b      	adds	r3, r7, #4
    62d4:	4a0d      	ldr	r2, [pc, #52]	; (630c <configure_i2c+0x50>)
    62d6:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1       = PINMUX_PA23D_SERCOM5_PAD1;
    62d8:	1d3b      	adds	r3, r7, #4
    62da:	4a0d      	ldr	r2, [pc, #52]	; (6310 <configure_i2c+0x54>)
    62dc:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
    62de:	1d3b      	adds	r3, r7, #4
    62e0:	2200      	movs	r2, #0
    62e2:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM5, &config_i2c_master) != STATUS_OK);
    62e4:	46c0      	nop			; (mov r8, r8)
    62e6:	1d3a      	adds	r2, r7, #4
    62e8:	490a      	ldr	r1, [pc, #40]	; (6314 <configure_i2c+0x58>)
    62ea:	4b0b      	ldr	r3, [pc, #44]	; (6318 <configure_i2c+0x5c>)
    62ec:	0018      	movs	r0, r3
    62ee:	4b0b      	ldr	r3, [pc, #44]	; (631c <configure_i2c+0x60>)
    62f0:	4798      	blx	r3
    62f2:	1e03      	subs	r3, r0, #0
    62f4:	d1f7      	bne.n	62e6 <configure_i2c+0x2a>
	i2c_master_enable(&i2c_master_instance);
    62f6:	4b08      	ldr	r3, [pc, #32]	; (6318 <configure_i2c+0x5c>)
    62f8:	0018      	movs	r0, r3
    62fa:	4b09      	ldr	r3, [pc, #36]	; (6320 <configure_i2c+0x64>)
    62fc:	4798      	blx	r3
}
    62fe:	46c0      	nop			; (mov r8, r8)
    6300:	46bd      	mov	sp, r7
    6302:	b00e      	add	sp, #56	; 0x38
    6304:	bd80      	pop	{r7, pc}
    6306:	46c0      	nop			; (mov r8, r8)
    6308:	00005de9 	.word	0x00005de9
    630c:	00160003 	.word	0x00160003
    6310:	00170003 	.word	0x00170003
    6314:	42001c00 	.word	0x42001c00
    6318:	200003ec 	.word	0x200003ec
    631c:	0000119d 	.word	0x0000119d
    6320:	00005e6d 	.word	0x00005e6d

00006324 <configure_adc>:

static void configure_adc(void)
{
    6324:	b580      	push	{r7, lr}
    6326:	b08c      	sub	sp, #48	; 0x30
    6328:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    632a:	003b      	movs	r3, r7
    632c:	0018      	movs	r0, r3
    632e:	4b0e      	ldr	r3, [pc, #56]	; (6368 <configure_adc+0x44>)
    6330:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    6332:	003b      	movs	r3, r7
    6334:	2201      	movs	r2, #1
    6336:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    6338:	003b      	movs	r3, r7
    633a:	2202      	movs	r2, #2
    633c:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    633e:	003b      	movs	r3, r7
    6340:	2280      	movs	r2, #128	; 0x80
    6342:	0092      	lsls	r2, r2, #2
    6344:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    6346:	003b      	movs	r3, r7
    6348:	2200      	movs	r2, #0
    634a:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    634c:	003a      	movs	r2, r7
    634e:	4907      	ldr	r1, [pc, #28]	; (636c <configure_adc+0x48>)
    6350:	4b07      	ldr	r3, [pc, #28]	; (6370 <configure_adc+0x4c>)
    6352:	0018      	movs	r0, r3
    6354:	4b07      	ldr	r3, [pc, #28]	; (6374 <configure_adc+0x50>)
    6356:	4798      	blx	r3
	adc_enable(&adc_inst);
    6358:	4b05      	ldr	r3, [pc, #20]	; (6370 <configure_adc+0x4c>)
    635a:	0018      	movs	r0, r3
    635c:	4b06      	ldr	r3, [pc, #24]	; (6378 <configure_adc+0x54>)
    635e:	4798      	blx	r3
}
    6360:	46c0      	nop			; (mov r8, r8)
    6362:	46bd      	mov	sp, r7
    6364:	b00c      	add	sp, #48	; 0x30
    6366:	bd80      	pop	{r7, pc}
    6368:	00000369 	.word	0x00000369
    636c:	42004000 	.word	0x42004000
    6370:	20000450 	.word	0x20000450
    6374:	000009b9 	.word	0x000009b9
    6378:	00005d41 	.word	0x00005d41

0000637c <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    637c:	b580      	push	{r7, lr}
    637e:	b0c6      	sub	sp, #280	; 0x118
    6380:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    6382:	4b13      	ldr	r3, [pc, #76]	; (63d0 <main+0x54>)
    6384:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    6386:	4b13      	ldr	r3, [pc, #76]	; (63d4 <main+0x58>)
    6388:	4798      	blx	r3
	printf(STRING_HEADER);
    638a:	4b13      	ldr	r3, [pc, #76]	; (63d8 <main+0x5c>)
    638c:	0018      	movs	r0, r3
    638e:	4b13      	ldr	r3, [pc, #76]	; (63dc <main+0x60>)
    6390:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    6392:	4b13      	ldr	r3, [pc, #76]	; (63e0 <main+0x64>)
    6394:	4798      	blx	r3
	
	/* Init the GPIO & ADC */
	configure_gpio();
    6396:	4b13      	ldr	r3, [pc, #76]	; (63e4 <main+0x68>)
    6398:	4798      	blx	r3
	configure_adc();
    639a:	4b13      	ldr	r3, [pc, #76]	; (63e8 <main+0x6c>)
    639c:	4798      	blx	r3
	configure_i2c();
    639e:	4b13      	ldr	r3, [pc, #76]	; (63ec <main+0x70>)
    63a0:	4798      	blx	r3
	
	configure_ftdi_reset();
    63a2:	4b13      	ldr	r3, [pc, #76]	; (63f0 <main+0x74>)
    63a4:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);
	
	
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    63a6:	4b13      	ldr	r3, [pc, #76]	; (63f4 <main+0x78>)
    63a8:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    63aa:	4b13      	ldr	r3, [pc, #76]	; (63f8 <main+0x7c>)
    63ac:	0018      	movs	r0, r3
    63ae:	4b0b      	ldr	r3, [pc, #44]	; (63dc <main+0x60>)
    63b0:	4798      	blx	r3
	while (1) {
		printf("> ");
    63b2:	4b12      	ldr	r3, [pc, #72]	; (63fc <main+0x80>)
    63b4:	0018      	movs	r0, r3
    63b6:	4b12      	ldr	r3, [pc, #72]	; (6400 <main+0x84>)
    63b8:	4798      	blx	r3
		scanf("%[^\r\n]%*c", input);
    63ba:	003a      	movs	r2, r7
    63bc:	4b11      	ldr	r3, [pc, #68]	; (6404 <main+0x88>)
    63be:	0011      	movs	r1, r2
    63c0:	0018      	movs	r0, r3
    63c2:	4b11      	ldr	r3, [pc, #68]	; (6408 <main+0x8c>)
    63c4:	4798      	blx	r3
		handle_user_input(input);
    63c6:	003b      	movs	r3, r7
    63c8:	0018      	movs	r0, r3
    63ca:	4b10      	ldr	r3, [pc, #64]	; (640c <main+0x90>)
    63cc:	4798      	blx	r3
		printf("> ");
    63ce:	e7f0      	b.n	63b2 <main+0x36>
    63d0:	00005a05 	.word	0x00005a05
    63d4:	000061dd 	.word	0x000061dd
    63d8:	0000a584 	.word	0x0000a584
    63dc:	00008185 	.word	0x00008185
    63e0:	000031c1 	.word	0x000031c1
    63e4:	00006251 	.word	0x00006251
    63e8:	00006325 	.word	0x00006325
    63ec:	000062bd 	.word	0x000062bd
    63f0:	00006281 	.word	0x00006281
    63f4:	0000216d 	.word	0x0000216d
    63f8:	0000a5f0 	.word	0x0000a5f0
    63fc:	0000a610 	.word	0x0000a610
    6400:	00008091 	.word	0x00008091
    6404:	0000a614 	.word	0x0000a614
    6408:	00008199 	.word	0x00008199
    640c:	000023a9 	.word	0x000023a9

00006410 <__udivsi3>:
    6410:	2200      	movs	r2, #0
    6412:	0843      	lsrs	r3, r0, #1
    6414:	428b      	cmp	r3, r1
    6416:	d374      	bcc.n	6502 <__udivsi3+0xf2>
    6418:	0903      	lsrs	r3, r0, #4
    641a:	428b      	cmp	r3, r1
    641c:	d35f      	bcc.n	64de <__udivsi3+0xce>
    641e:	0a03      	lsrs	r3, r0, #8
    6420:	428b      	cmp	r3, r1
    6422:	d344      	bcc.n	64ae <__udivsi3+0x9e>
    6424:	0b03      	lsrs	r3, r0, #12
    6426:	428b      	cmp	r3, r1
    6428:	d328      	bcc.n	647c <__udivsi3+0x6c>
    642a:	0c03      	lsrs	r3, r0, #16
    642c:	428b      	cmp	r3, r1
    642e:	d30d      	bcc.n	644c <__udivsi3+0x3c>
    6430:	22ff      	movs	r2, #255	; 0xff
    6432:	0209      	lsls	r1, r1, #8
    6434:	ba12      	rev	r2, r2
    6436:	0c03      	lsrs	r3, r0, #16
    6438:	428b      	cmp	r3, r1
    643a:	d302      	bcc.n	6442 <__udivsi3+0x32>
    643c:	1212      	asrs	r2, r2, #8
    643e:	0209      	lsls	r1, r1, #8
    6440:	d065      	beq.n	650e <__udivsi3+0xfe>
    6442:	0b03      	lsrs	r3, r0, #12
    6444:	428b      	cmp	r3, r1
    6446:	d319      	bcc.n	647c <__udivsi3+0x6c>
    6448:	e000      	b.n	644c <__udivsi3+0x3c>
    644a:	0a09      	lsrs	r1, r1, #8
    644c:	0bc3      	lsrs	r3, r0, #15
    644e:	428b      	cmp	r3, r1
    6450:	d301      	bcc.n	6456 <__udivsi3+0x46>
    6452:	03cb      	lsls	r3, r1, #15
    6454:	1ac0      	subs	r0, r0, r3
    6456:	4152      	adcs	r2, r2
    6458:	0b83      	lsrs	r3, r0, #14
    645a:	428b      	cmp	r3, r1
    645c:	d301      	bcc.n	6462 <__udivsi3+0x52>
    645e:	038b      	lsls	r3, r1, #14
    6460:	1ac0      	subs	r0, r0, r3
    6462:	4152      	adcs	r2, r2
    6464:	0b43      	lsrs	r3, r0, #13
    6466:	428b      	cmp	r3, r1
    6468:	d301      	bcc.n	646e <__udivsi3+0x5e>
    646a:	034b      	lsls	r3, r1, #13
    646c:	1ac0      	subs	r0, r0, r3
    646e:	4152      	adcs	r2, r2
    6470:	0b03      	lsrs	r3, r0, #12
    6472:	428b      	cmp	r3, r1
    6474:	d301      	bcc.n	647a <__udivsi3+0x6a>
    6476:	030b      	lsls	r3, r1, #12
    6478:	1ac0      	subs	r0, r0, r3
    647a:	4152      	adcs	r2, r2
    647c:	0ac3      	lsrs	r3, r0, #11
    647e:	428b      	cmp	r3, r1
    6480:	d301      	bcc.n	6486 <__udivsi3+0x76>
    6482:	02cb      	lsls	r3, r1, #11
    6484:	1ac0      	subs	r0, r0, r3
    6486:	4152      	adcs	r2, r2
    6488:	0a83      	lsrs	r3, r0, #10
    648a:	428b      	cmp	r3, r1
    648c:	d301      	bcc.n	6492 <__udivsi3+0x82>
    648e:	028b      	lsls	r3, r1, #10
    6490:	1ac0      	subs	r0, r0, r3
    6492:	4152      	adcs	r2, r2
    6494:	0a43      	lsrs	r3, r0, #9
    6496:	428b      	cmp	r3, r1
    6498:	d301      	bcc.n	649e <__udivsi3+0x8e>
    649a:	024b      	lsls	r3, r1, #9
    649c:	1ac0      	subs	r0, r0, r3
    649e:	4152      	adcs	r2, r2
    64a0:	0a03      	lsrs	r3, r0, #8
    64a2:	428b      	cmp	r3, r1
    64a4:	d301      	bcc.n	64aa <__udivsi3+0x9a>
    64a6:	020b      	lsls	r3, r1, #8
    64a8:	1ac0      	subs	r0, r0, r3
    64aa:	4152      	adcs	r2, r2
    64ac:	d2cd      	bcs.n	644a <__udivsi3+0x3a>
    64ae:	09c3      	lsrs	r3, r0, #7
    64b0:	428b      	cmp	r3, r1
    64b2:	d301      	bcc.n	64b8 <__udivsi3+0xa8>
    64b4:	01cb      	lsls	r3, r1, #7
    64b6:	1ac0      	subs	r0, r0, r3
    64b8:	4152      	adcs	r2, r2
    64ba:	0983      	lsrs	r3, r0, #6
    64bc:	428b      	cmp	r3, r1
    64be:	d301      	bcc.n	64c4 <__udivsi3+0xb4>
    64c0:	018b      	lsls	r3, r1, #6
    64c2:	1ac0      	subs	r0, r0, r3
    64c4:	4152      	adcs	r2, r2
    64c6:	0943      	lsrs	r3, r0, #5
    64c8:	428b      	cmp	r3, r1
    64ca:	d301      	bcc.n	64d0 <__udivsi3+0xc0>
    64cc:	014b      	lsls	r3, r1, #5
    64ce:	1ac0      	subs	r0, r0, r3
    64d0:	4152      	adcs	r2, r2
    64d2:	0903      	lsrs	r3, r0, #4
    64d4:	428b      	cmp	r3, r1
    64d6:	d301      	bcc.n	64dc <__udivsi3+0xcc>
    64d8:	010b      	lsls	r3, r1, #4
    64da:	1ac0      	subs	r0, r0, r3
    64dc:	4152      	adcs	r2, r2
    64de:	08c3      	lsrs	r3, r0, #3
    64e0:	428b      	cmp	r3, r1
    64e2:	d301      	bcc.n	64e8 <__udivsi3+0xd8>
    64e4:	00cb      	lsls	r3, r1, #3
    64e6:	1ac0      	subs	r0, r0, r3
    64e8:	4152      	adcs	r2, r2
    64ea:	0883      	lsrs	r3, r0, #2
    64ec:	428b      	cmp	r3, r1
    64ee:	d301      	bcc.n	64f4 <__udivsi3+0xe4>
    64f0:	008b      	lsls	r3, r1, #2
    64f2:	1ac0      	subs	r0, r0, r3
    64f4:	4152      	adcs	r2, r2
    64f6:	0843      	lsrs	r3, r0, #1
    64f8:	428b      	cmp	r3, r1
    64fa:	d301      	bcc.n	6500 <__udivsi3+0xf0>
    64fc:	004b      	lsls	r3, r1, #1
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	4152      	adcs	r2, r2
    6502:	1a41      	subs	r1, r0, r1
    6504:	d200      	bcs.n	6508 <__udivsi3+0xf8>
    6506:	4601      	mov	r1, r0
    6508:	4152      	adcs	r2, r2
    650a:	4610      	mov	r0, r2
    650c:	4770      	bx	lr
    650e:	e7ff      	b.n	6510 <__udivsi3+0x100>
    6510:	b501      	push	{r0, lr}
    6512:	2000      	movs	r0, #0
    6514:	f000 f8f0 	bl	66f8 <__aeabi_idiv0>
    6518:	bd02      	pop	{r1, pc}
    651a:	46c0      	nop			; (mov r8, r8)

0000651c <__aeabi_uidivmod>:
    651c:	2900      	cmp	r1, #0
    651e:	d0f7      	beq.n	6510 <__udivsi3+0x100>
    6520:	e776      	b.n	6410 <__udivsi3>
    6522:	4770      	bx	lr

00006524 <__divsi3>:
    6524:	4603      	mov	r3, r0
    6526:	430b      	orrs	r3, r1
    6528:	d47f      	bmi.n	662a <__divsi3+0x106>
    652a:	2200      	movs	r2, #0
    652c:	0843      	lsrs	r3, r0, #1
    652e:	428b      	cmp	r3, r1
    6530:	d374      	bcc.n	661c <__divsi3+0xf8>
    6532:	0903      	lsrs	r3, r0, #4
    6534:	428b      	cmp	r3, r1
    6536:	d35f      	bcc.n	65f8 <__divsi3+0xd4>
    6538:	0a03      	lsrs	r3, r0, #8
    653a:	428b      	cmp	r3, r1
    653c:	d344      	bcc.n	65c8 <__divsi3+0xa4>
    653e:	0b03      	lsrs	r3, r0, #12
    6540:	428b      	cmp	r3, r1
    6542:	d328      	bcc.n	6596 <__divsi3+0x72>
    6544:	0c03      	lsrs	r3, r0, #16
    6546:	428b      	cmp	r3, r1
    6548:	d30d      	bcc.n	6566 <__divsi3+0x42>
    654a:	22ff      	movs	r2, #255	; 0xff
    654c:	0209      	lsls	r1, r1, #8
    654e:	ba12      	rev	r2, r2
    6550:	0c03      	lsrs	r3, r0, #16
    6552:	428b      	cmp	r3, r1
    6554:	d302      	bcc.n	655c <__divsi3+0x38>
    6556:	1212      	asrs	r2, r2, #8
    6558:	0209      	lsls	r1, r1, #8
    655a:	d065      	beq.n	6628 <__divsi3+0x104>
    655c:	0b03      	lsrs	r3, r0, #12
    655e:	428b      	cmp	r3, r1
    6560:	d319      	bcc.n	6596 <__divsi3+0x72>
    6562:	e000      	b.n	6566 <__divsi3+0x42>
    6564:	0a09      	lsrs	r1, r1, #8
    6566:	0bc3      	lsrs	r3, r0, #15
    6568:	428b      	cmp	r3, r1
    656a:	d301      	bcc.n	6570 <__divsi3+0x4c>
    656c:	03cb      	lsls	r3, r1, #15
    656e:	1ac0      	subs	r0, r0, r3
    6570:	4152      	adcs	r2, r2
    6572:	0b83      	lsrs	r3, r0, #14
    6574:	428b      	cmp	r3, r1
    6576:	d301      	bcc.n	657c <__divsi3+0x58>
    6578:	038b      	lsls	r3, r1, #14
    657a:	1ac0      	subs	r0, r0, r3
    657c:	4152      	adcs	r2, r2
    657e:	0b43      	lsrs	r3, r0, #13
    6580:	428b      	cmp	r3, r1
    6582:	d301      	bcc.n	6588 <__divsi3+0x64>
    6584:	034b      	lsls	r3, r1, #13
    6586:	1ac0      	subs	r0, r0, r3
    6588:	4152      	adcs	r2, r2
    658a:	0b03      	lsrs	r3, r0, #12
    658c:	428b      	cmp	r3, r1
    658e:	d301      	bcc.n	6594 <__divsi3+0x70>
    6590:	030b      	lsls	r3, r1, #12
    6592:	1ac0      	subs	r0, r0, r3
    6594:	4152      	adcs	r2, r2
    6596:	0ac3      	lsrs	r3, r0, #11
    6598:	428b      	cmp	r3, r1
    659a:	d301      	bcc.n	65a0 <__divsi3+0x7c>
    659c:	02cb      	lsls	r3, r1, #11
    659e:	1ac0      	subs	r0, r0, r3
    65a0:	4152      	adcs	r2, r2
    65a2:	0a83      	lsrs	r3, r0, #10
    65a4:	428b      	cmp	r3, r1
    65a6:	d301      	bcc.n	65ac <__divsi3+0x88>
    65a8:	028b      	lsls	r3, r1, #10
    65aa:	1ac0      	subs	r0, r0, r3
    65ac:	4152      	adcs	r2, r2
    65ae:	0a43      	lsrs	r3, r0, #9
    65b0:	428b      	cmp	r3, r1
    65b2:	d301      	bcc.n	65b8 <__divsi3+0x94>
    65b4:	024b      	lsls	r3, r1, #9
    65b6:	1ac0      	subs	r0, r0, r3
    65b8:	4152      	adcs	r2, r2
    65ba:	0a03      	lsrs	r3, r0, #8
    65bc:	428b      	cmp	r3, r1
    65be:	d301      	bcc.n	65c4 <__divsi3+0xa0>
    65c0:	020b      	lsls	r3, r1, #8
    65c2:	1ac0      	subs	r0, r0, r3
    65c4:	4152      	adcs	r2, r2
    65c6:	d2cd      	bcs.n	6564 <__divsi3+0x40>
    65c8:	09c3      	lsrs	r3, r0, #7
    65ca:	428b      	cmp	r3, r1
    65cc:	d301      	bcc.n	65d2 <__divsi3+0xae>
    65ce:	01cb      	lsls	r3, r1, #7
    65d0:	1ac0      	subs	r0, r0, r3
    65d2:	4152      	adcs	r2, r2
    65d4:	0983      	lsrs	r3, r0, #6
    65d6:	428b      	cmp	r3, r1
    65d8:	d301      	bcc.n	65de <__divsi3+0xba>
    65da:	018b      	lsls	r3, r1, #6
    65dc:	1ac0      	subs	r0, r0, r3
    65de:	4152      	adcs	r2, r2
    65e0:	0943      	lsrs	r3, r0, #5
    65e2:	428b      	cmp	r3, r1
    65e4:	d301      	bcc.n	65ea <__divsi3+0xc6>
    65e6:	014b      	lsls	r3, r1, #5
    65e8:	1ac0      	subs	r0, r0, r3
    65ea:	4152      	adcs	r2, r2
    65ec:	0903      	lsrs	r3, r0, #4
    65ee:	428b      	cmp	r3, r1
    65f0:	d301      	bcc.n	65f6 <__divsi3+0xd2>
    65f2:	010b      	lsls	r3, r1, #4
    65f4:	1ac0      	subs	r0, r0, r3
    65f6:	4152      	adcs	r2, r2
    65f8:	08c3      	lsrs	r3, r0, #3
    65fa:	428b      	cmp	r3, r1
    65fc:	d301      	bcc.n	6602 <__divsi3+0xde>
    65fe:	00cb      	lsls	r3, r1, #3
    6600:	1ac0      	subs	r0, r0, r3
    6602:	4152      	adcs	r2, r2
    6604:	0883      	lsrs	r3, r0, #2
    6606:	428b      	cmp	r3, r1
    6608:	d301      	bcc.n	660e <__divsi3+0xea>
    660a:	008b      	lsls	r3, r1, #2
    660c:	1ac0      	subs	r0, r0, r3
    660e:	4152      	adcs	r2, r2
    6610:	0843      	lsrs	r3, r0, #1
    6612:	428b      	cmp	r3, r1
    6614:	d301      	bcc.n	661a <__divsi3+0xf6>
    6616:	004b      	lsls	r3, r1, #1
    6618:	1ac0      	subs	r0, r0, r3
    661a:	4152      	adcs	r2, r2
    661c:	1a41      	subs	r1, r0, r1
    661e:	d200      	bcs.n	6622 <__divsi3+0xfe>
    6620:	4601      	mov	r1, r0
    6622:	4152      	adcs	r2, r2
    6624:	4610      	mov	r0, r2
    6626:	4770      	bx	lr
    6628:	e05d      	b.n	66e6 <__divsi3+0x1c2>
    662a:	0fca      	lsrs	r2, r1, #31
    662c:	d000      	beq.n	6630 <__divsi3+0x10c>
    662e:	4249      	negs	r1, r1
    6630:	1003      	asrs	r3, r0, #32
    6632:	d300      	bcc.n	6636 <__divsi3+0x112>
    6634:	4240      	negs	r0, r0
    6636:	4053      	eors	r3, r2
    6638:	2200      	movs	r2, #0
    663a:	469c      	mov	ip, r3
    663c:	0903      	lsrs	r3, r0, #4
    663e:	428b      	cmp	r3, r1
    6640:	d32d      	bcc.n	669e <__divsi3+0x17a>
    6642:	0a03      	lsrs	r3, r0, #8
    6644:	428b      	cmp	r3, r1
    6646:	d312      	bcc.n	666e <__divsi3+0x14a>
    6648:	22fc      	movs	r2, #252	; 0xfc
    664a:	0189      	lsls	r1, r1, #6
    664c:	ba12      	rev	r2, r2
    664e:	0a03      	lsrs	r3, r0, #8
    6650:	428b      	cmp	r3, r1
    6652:	d30c      	bcc.n	666e <__divsi3+0x14a>
    6654:	0189      	lsls	r1, r1, #6
    6656:	1192      	asrs	r2, r2, #6
    6658:	428b      	cmp	r3, r1
    665a:	d308      	bcc.n	666e <__divsi3+0x14a>
    665c:	0189      	lsls	r1, r1, #6
    665e:	1192      	asrs	r2, r2, #6
    6660:	428b      	cmp	r3, r1
    6662:	d304      	bcc.n	666e <__divsi3+0x14a>
    6664:	0189      	lsls	r1, r1, #6
    6666:	d03a      	beq.n	66de <__divsi3+0x1ba>
    6668:	1192      	asrs	r2, r2, #6
    666a:	e000      	b.n	666e <__divsi3+0x14a>
    666c:	0989      	lsrs	r1, r1, #6
    666e:	09c3      	lsrs	r3, r0, #7
    6670:	428b      	cmp	r3, r1
    6672:	d301      	bcc.n	6678 <__divsi3+0x154>
    6674:	01cb      	lsls	r3, r1, #7
    6676:	1ac0      	subs	r0, r0, r3
    6678:	4152      	adcs	r2, r2
    667a:	0983      	lsrs	r3, r0, #6
    667c:	428b      	cmp	r3, r1
    667e:	d301      	bcc.n	6684 <__divsi3+0x160>
    6680:	018b      	lsls	r3, r1, #6
    6682:	1ac0      	subs	r0, r0, r3
    6684:	4152      	adcs	r2, r2
    6686:	0943      	lsrs	r3, r0, #5
    6688:	428b      	cmp	r3, r1
    668a:	d301      	bcc.n	6690 <__divsi3+0x16c>
    668c:	014b      	lsls	r3, r1, #5
    668e:	1ac0      	subs	r0, r0, r3
    6690:	4152      	adcs	r2, r2
    6692:	0903      	lsrs	r3, r0, #4
    6694:	428b      	cmp	r3, r1
    6696:	d301      	bcc.n	669c <__divsi3+0x178>
    6698:	010b      	lsls	r3, r1, #4
    669a:	1ac0      	subs	r0, r0, r3
    669c:	4152      	adcs	r2, r2
    669e:	08c3      	lsrs	r3, r0, #3
    66a0:	428b      	cmp	r3, r1
    66a2:	d301      	bcc.n	66a8 <__divsi3+0x184>
    66a4:	00cb      	lsls	r3, r1, #3
    66a6:	1ac0      	subs	r0, r0, r3
    66a8:	4152      	adcs	r2, r2
    66aa:	0883      	lsrs	r3, r0, #2
    66ac:	428b      	cmp	r3, r1
    66ae:	d301      	bcc.n	66b4 <__divsi3+0x190>
    66b0:	008b      	lsls	r3, r1, #2
    66b2:	1ac0      	subs	r0, r0, r3
    66b4:	4152      	adcs	r2, r2
    66b6:	d2d9      	bcs.n	666c <__divsi3+0x148>
    66b8:	0843      	lsrs	r3, r0, #1
    66ba:	428b      	cmp	r3, r1
    66bc:	d301      	bcc.n	66c2 <__divsi3+0x19e>
    66be:	004b      	lsls	r3, r1, #1
    66c0:	1ac0      	subs	r0, r0, r3
    66c2:	4152      	adcs	r2, r2
    66c4:	1a41      	subs	r1, r0, r1
    66c6:	d200      	bcs.n	66ca <__divsi3+0x1a6>
    66c8:	4601      	mov	r1, r0
    66ca:	4663      	mov	r3, ip
    66cc:	4152      	adcs	r2, r2
    66ce:	105b      	asrs	r3, r3, #1
    66d0:	4610      	mov	r0, r2
    66d2:	d301      	bcc.n	66d8 <__divsi3+0x1b4>
    66d4:	4240      	negs	r0, r0
    66d6:	2b00      	cmp	r3, #0
    66d8:	d500      	bpl.n	66dc <__divsi3+0x1b8>
    66da:	4249      	negs	r1, r1
    66dc:	4770      	bx	lr
    66de:	4663      	mov	r3, ip
    66e0:	105b      	asrs	r3, r3, #1
    66e2:	d300      	bcc.n	66e6 <__divsi3+0x1c2>
    66e4:	4240      	negs	r0, r0
    66e6:	b501      	push	{r0, lr}
    66e8:	2000      	movs	r0, #0
    66ea:	f000 f805 	bl	66f8 <__aeabi_idiv0>
    66ee:	bd02      	pop	{r1, pc}

000066f0 <__aeabi_idivmod>:
    66f0:	2900      	cmp	r1, #0
    66f2:	d0f8      	beq.n	66e6 <__divsi3+0x1c2>
    66f4:	e716      	b.n	6524 <__divsi3>
    66f6:	4770      	bx	lr

000066f8 <__aeabi_idiv0>:
    66f8:	4770      	bx	lr
    66fa:	46c0      	nop			; (mov r8, r8)

000066fc <__aeabi_lmul>:
    66fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    66fe:	46ce      	mov	lr, r9
    6700:	4647      	mov	r7, r8
    6702:	0415      	lsls	r5, r2, #16
    6704:	0c2d      	lsrs	r5, r5, #16
    6706:	002e      	movs	r6, r5
    6708:	b580      	push	{r7, lr}
    670a:	0407      	lsls	r7, r0, #16
    670c:	0c14      	lsrs	r4, r2, #16
    670e:	0c3f      	lsrs	r7, r7, #16
    6710:	4699      	mov	r9, r3
    6712:	0c03      	lsrs	r3, r0, #16
    6714:	437e      	muls	r6, r7
    6716:	435d      	muls	r5, r3
    6718:	4367      	muls	r7, r4
    671a:	4363      	muls	r3, r4
    671c:	197f      	adds	r7, r7, r5
    671e:	0c34      	lsrs	r4, r6, #16
    6720:	19e4      	adds	r4, r4, r7
    6722:	469c      	mov	ip, r3
    6724:	42a5      	cmp	r5, r4
    6726:	d903      	bls.n	6730 <__aeabi_lmul+0x34>
    6728:	2380      	movs	r3, #128	; 0x80
    672a:	025b      	lsls	r3, r3, #9
    672c:	4698      	mov	r8, r3
    672e:	44c4      	add	ip, r8
    6730:	464b      	mov	r3, r9
    6732:	4351      	muls	r1, r2
    6734:	4343      	muls	r3, r0
    6736:	0436      	lsls	r6, r6, #16
    6738:	0c36      	lsrs	r6, r6, #16
    673a:	0c25      	lsrs	r5, r4, #16
    673c:	0424      	lsls	r4, r4, #16
    673e:	4465      	add	r5, ip
    6740:	19a4      	adds	r4, r4, r6
    6742:	1859      	adds	r1, r3, r1
    6744:	1949      	adds	r1, r1, r5
    6746:	0020      	movs	r0, r4
    6748:	bc0c      	pop	{r2, r3}
    674a:	4690      	mov	r8, r2
    674c:	4699      	mov	r9, r3
    674e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006750 <__aeabi_dadd>:
    6750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6752:	4645      	mov	r5, r8
    6754:	46de      	mov	lr, fp
    6756:	4657      	mov	r7, sl
    6758:	464e      	mov	r6, r9
    675a:	030c      	lsls	r4, r1, #12
    675c:	b5e0      	push	{r5, r6, r7, lr}
    675e:	004e      	lsls	r6, r1, #1
    6760:	0fc9      	lsrs	r1, r1, #31
    6762:	4688      	mov	r8, r1
    6764:	000d      	movs	r5, r1
    6766:	0a61      	lsrs	r1, r4, #9
    6768:	0f44      	lsrs	r4, r0, #29
    676a:	430c      	orrs	r4, r1
    676c:	00c7      	lsls	r7, r0, #3
    676e:	0319      	lsls	r1, r3, #12
    6770:	0058      	lsls	r0, r3, #1
    6772:	0fdb      	lsrs	r3, r3, #31
    6774:	469b      	mov	fp, r3
    6776:	0a4b      	lsrs	r3, r1, #9
    6778:	0f51      	lsrs	r1, r2, #29
    677a:	430b      	orrs	r3, r1
    677c:	0d76      	lsrs	r6, r6, #21
    677e:	0d40      	lsrs	r0, r0, #21
    6780:	0019      	movs	r1, r3
    6782:	00d2      	lsls	r2, r2, #3
    6784:	45d8      	cmp	r8, fp
    6786:	d100      	bne.n	678a <__aeabi_dadd+0x3a>
    6788:	e0ae      	b.n	68e8 <__aeabi_dadd+0x198>
    678a:	1a35      	subs	r5, r6, r0
    678c:	2d00      	cmp	r5, #0
    678e:	dc00      	bgt.n	6792 <__aeabi_dadd+0x42>
    6790:	e0f6      	b.n	6980 <__aeabi_dadd+0x230>
    6792:	2800      	cmp	r0, #0
    6794:	d10f      	bne.n	67b6 <__aeabi_dadd+0x66>
    6796:	4313      	orrs	r3, r2
    6798:	d100      	bne.n	679c <__aeabi_dadd+0x4c>
    679a:	e0db      	b.n	6954 <__aeabi_dadd+0x204>
    679c:	1e6b      	subs	r3, r5, #1
    679e:	2b00      	cmp	r3, #0
    67a0:	d000      	beq.n	67a4 <__aeabi_dadd+0x54>
    67a2:	e137      	b.n	6a14 <__aeabi_dadd+0x2c4>
    67a4:	1aba      	subs	r2, r7, r2
    67a6:	4297      	cmp	r7, r2
    67a8:	41bf      	sbcs	r7, r7
    67aa:	1a64      	subs	r4, r4, r1
    67ac:	427f      	negs	r7, r7
    67ae:	1be4      	subs	r4, r4, r7
    67b0:	2601      	movs	r6, #1
    67b2:	0017      	movs	r7, r2
    67b4:	e024      	b.n	6800 <__aeabi_dadd+0xb0>
    67b6:	4bc6      	ldr	r3, [pc, #792]	; (6ad0 <__aeabi_dadd+0x380>)
    67b8:	429e      	cmp	r6, r3
    67ba:	d04d      	beq.n	6858 <__aeabi_dadd+0x108>
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	041b      	lsls	r3, r3, #16
    67c0:	4319      	orrs	r1, r3
    67c2:	2d38      	cmp	r5, #56	; 0x38
    67c4:	dd00      	ble.n	67c8 <__aeabi_dadd+0x78>
    67c6:	e107      	b.n	69d8 <__aeabi_dadd+0x288>
    67c8:	2d1f      	cmp	r5, #31
    67ca:	dd00      	ble.n	67ce <__aeabi_dadd+0x7e>
    67cc:	e138      	b.n	6a40 <__aeabi_dadd+0x2f0>
    67ce:	2020      	movs	r0, #32
    67d0:	1b43      	subs	r3, r0, r5
    67d2:	469a      	mov	sl, r3
    67d4:	000b      	movs	r3, r1
    67d6:	4650      	mov	r0, sl
    67d8:	4083      	lsls	r3, r0
    67da:	4699      	mov	r9, r3
    67dc:	0013      	movs	r3, r2
    67de:	4648      	mov	r0, r9
    67e0:	40eb      	lsrs	r3, r5
    67e2:	4318      	orrs	r0, r3
    67e4:	0003      	movs	r3, r0
    67e6:	4650      	mov	r0, sl
    67e8:	4082      	lsls	r2, r0
    67ea:	1e50      	subs	r0, r2, #1
    67ec:	4182      	sbcs	r2, r0
    67ee:	40e9      	lsrs	r1, r5
    67f0:	431a      	orrs	r2, r3
    67f2:	1aba      	subs	r2, r7, r2
    67f4:	1a61      	subs	r1, r4, r1
    67f6:	4297      	cmp	r7, r2
    67f8:	41a4      	sbcs	r4, r4
    67fa:	0017      	movs	r7, r2
    67fc:	4264      	negs	r4, r4
    67fe:	1b0c      	subs	r4, r1, r4
    6800:	0223      	lsls	r3, r4, #8
    6802:	d562      	bpl.n	68ca <__aeabi_dadd+0x17a>
    6804:	0264      	lsls	r4, r4, #9
    6806:	0a65      	lsrs	r5, r4, #9
    6808:	2d00      	cmp	r5, #0
    680a:	d100      	bne.n	680e <__aeabi_dadd+0xbe>
    680c:	e0df      	b.n	69ce <__aeabi_dadd+0x27e>
    680e:	0028      	movs	r0, r5
    6810:	f001 fbe4 	bl	7fdc <__clzsi2>
    6814:	0003      	movs	r3, r0
    6816:	3b08      	subs	r3, #8
    6818:	2b1f      	cmp	r3, #31
    681a:	dd00      	ble.n	681e <__aeabi_dadd+0xce>
    681c:	e0d2      	b.n	69c4 <__aeabi_dadd+0x274>
    681e:	2220      	movs	r2, #32
    6820:	003c      	movs	r4, r7
    6822:	1ad2      	subs	r2, r2, r3
    6824:	409d      	lsls	r5, r3
    6826:	40d4      	lsrs	r4, r2
    6828:	409f      	lsls	r7, r3
    682a:	4325      	orrs	r5, r4
    682c:	429e      	cmp	r6, r3
    682e:	dd00      	ble.n	6832 <__aeabi_dadd+0xe2>
    6830:	e0c4      	b.n	69bc <__aeabi_dadd+0x26c>
    6832:	1b9e      	subs	r6, r3, r6
    6834:	1c73      	adds	r3, r6, #1
    6836:	2b1f      	cmp	r3, #31
    6838:	dd00      	ble.n	683c <__aeabi_dadd+0xec>
    683a:	e0f1      	b.n	6a20 <__aeabi_dadd+0x2d0>
    683c:	2220      	movs	r2, #32
    683e:	0038      	movs	r0, r7
    6840:	0029      	movs	r1, r5
    6842:	1ad2      	subs	r2, r2, r3
    6844:	40d8      	lsrs	r0, r3
    6846:	4091      	lsls	r1, r2
    6848:	4097      	lsls	r7, r2
    684a:	002c      	movs	r4, r5
    684c:	4301      	orrs	r1, r0
    684e:	1e78      	subs	r0, r7, #1
    6850:	4187      	sbcs	r7, r0
    6852:	40dc      	lsrs	r4, r3
    6854:	2600      	movs	r6, #0
    6856:	430f      	orrs	r7, r1
    6858:	077b      	lsls	r3, r7, #29
    685a:	d009      	beq.n	6870 <__aeabi_dadd+0x120>
    685c:	230f      	movs	r3, #15
    685e:	403b      	ands	r3, r7
    6860:	2b04      	cmp	r3, #4
    6862:	d005      	beq.n	6870 <__aeabi_dadd+0x120>
    6864:	1d3b      	adds	r3, r7, #4
    6866:	42bb      	cmp	r3, r7
    6868:	41bf      	sbcs	r7, r7
    686a:	427f      	negs	r7, r7
    686c:	19e4      	adds	r4, r4, r7
    686e:	001f      	movs	r7, r3
    6870:	0223      	lsls	r3, r4, #8
    6872:	d52c      	bpl.n	68ce <__aeabi_dadd+0x17e>
    6874:	4b96      	ldr	r3, [pc, #600]	; (6ad0 <__aeabi_dadd+0x380>)
    6876:	3601      	adds	r6, #1
    6878:	429e      	cmp	r6, r3
    687a:	d100      	bne.n	687e <__aeabi_dadd+0x12e>
    687c:	e09a      	b.n	69b4 <__aeabi_dadd+0x264>
    687e:	4645      	mov	r5, r8
    6880:	4b94      	ldr	r3, [pc, #592]	; (6ad4 <__aeabi_dadd+0x384>)
    6882:	08ff      	lsrs	r7, r7, #3
    6884:	401c      	ands	r4, r3
    6886:	0760      	lsls	r0, r4, #29
    6888:	0576      	lsls	r6, r6, #21
    688a:	0264      	lsls	r4, r4, #9
    688c:	4307      	orrs	r7, r0
    688e:	0b24      	lsrs	r4, r4, #12
    6890:	0d76      	lsrs	r6, r6, #21
    6892:	2100      	movs	r1, #0
    6894:	0324      	lsls	r4, r4, #12
    6896:	0b23      	lsrs	r3, r4, #12
    6898:	0d0c      	lsrs	r4, r1, #20
    689a:	4a8f      	ldr	r2, [pc, #572]	; (6ad8 <__aeabi_dadd+0x388>)
    689c:	0524      	lsls	r4, r4, #20
    689e:	431c      	orrs	r4, r3
    68a0:	4014      	ands	r4, r2
    68a2:	0533      	lsls	r3, r6, #20
    68a4:	4323      	orrs	r3, r4
    68a6:	005b      	lsls	r3, r3, #1
    68a8:	07ed      	lsls	r5, r5, #31
    68aa:	085b      	lsrs	r3, r3, #1
    68ac:	432b      	orrs	r3, r5
    68ae:	0038      	movs	r0, r7
    68b0:	0019      	movs	r1, r3
    68b2:	bc3c      	pop	{r2, r3, r4, r5}
    68b4:	4690      	mov	r8, r2
    68b6:	4699      	mov	r9, r3
    68b8:	46a2      	mov	sl, r4
    68ba:	46ab      	mov	fp, r5
    68bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68be:	4664      	mov	r4, ip
    68c0:	4304      	orrs	r4, r0
    68c2:	d100      	bne.n	68c6 <__aeabi_dadd+0x176>
    68c4:	e211      	b.n	6cea <__aeabi_dadd+0x59a>
    68c6:	0004      	movs	r4, r0
    68c8:	4667      	mov	r7, ip
    68ca:	077b      	lsls	r3, r7, #29
    68cc:	d1c6      	bne.n	685c <__aeabi_dadd+0x10c>
    68ce:	4645      	mov	r5, r8
    68d0:	0760      	lsls	r0, r4, #29
    68d2:	08ff      	lsrs	r7, r7, #3
    68d4:	4307      	orrs	r7, r0
    68d6:	08e4      	lsrs	r4, r4, #3
    68d8:	4b7d      	ldr	r3, [pc, #500]	; (6ad0 <__aeabi_dadd+0x380>)
    68da:	429e      	cmp	r6, r3
    68dc:	d030      	beq.n	6940 <__aeabi_dadd+0x1f0>
    68de:	0324      	lsls	r4, r4, #12
    68e0:	0576      	lsls	r6, r6, #21
    68e2:	0b24      	lsrs	r4, r4, #12
    68e4:	0d76      	lsrs	r6, r6, #21
    68e6:	e7d4      	b.n	6892 <__aeabi_dadd+0x142>
    68e8:	1a33      	subs	r3, r6, r0
    68ea:	469a      	mov	sl, r3
    68ec:	2b00      	cmp	r3, #0
    68ee:	dd78      	ble.n	69e2 <__aeabi_dadd+0x292>
    68f0:	2800      	cmp	r0, #0
    68f2:	d031      	beq.n	6958 <__aeabi_dadd+0x208>
    68f4:	4876      	ldr	r0, [pc, #472]	; (6ad0 <__aeabi_dadd+0x380>)
    68f6:	4286      	cmp	r6, r0
    68f8:	d0ae      	beq.n	6858 <__aeabi_dadd+0x108>
    68fa:	2080      	movs	r0, #128	; 0x80
    68fc:	0400      	lsls	r0, r0, #16
    68fe:	4301      	orrs	r1, r0
    6900:	4653      	mov	r3, sl
    6902:	2b38      	cmp	r3, #56	; 0x38
    6904:	dc00      	bgt.n	6908 <__aeabi_dadd+0x1b8>
    6906:	e0e9      	b.n	6adc <__aeabi_dadd+0x38c>
    6908:	430a      	orrs	r2, r1
    690a:	1e51      	subs	r1, r2, #1
    690c:	418a      	sbcs	r2, r1
    690e:	2100      	movs	r1, #0
    6910:	19d2      	adds	r2, r2, r7
    6912:	42ba      	cmp	r2, r7
    6914:	41bf      	sbcs	r7, r7
    6916:	1909      	adds	r1, r1, r4
    6918:	427c      	negs	r4, r7
    691a:	0017      	movs	r7, r2
    691c:	190c      	adds	r4, r1, r4
    691e:	0223      	lsls	r3, r4, #8
    6920:	d5d3      	bpl.n	68ca <__aeabi_dadd+0x17a>
    6922:	4b6b      	ldr	r3, [pc, #428]	; (6ad0 <__aeabi_dadd+0x380>)
    6924:	3601      	adds	r6, #1
    6926:	429e      	cmp	r6, r3
    6928:	d100      	bne.n	692c <__aeabi_dadd+0x1dc>
    692a:	e13a      	b.n	6ba2 <__aeabi_dadd+0x452>
    692c:	2001      	movs	r0, #1
    692e:	4b69      	ldr	r3, [pc, #420]	; (6ad4 <__aeabi_dadd+0x384>)
    6930:	401c      	ands	r4, r3
    6932:	087b      	lsrs	r3, r7, #1
    6934:	4007      	ands	r7, r0
    6936:	431f      	orrs	r7, r3
    6938:	07e0      	lsls	r0, r4, #31
    693a:	4307      	orrs	r7, r0
    693c:	0864      	lsrs	r4, r4, #1
    693e:	e78b      	b.n	6858 <__aeabi_dadd+0x108>
    6940:	0023      	movs	r3, r4
    6942:	433b      	orrs	r3, r7
    6944:	d100      	bne.n	6948 <__aeabi_dadd+0x1f8>
    6946:	e1cb      	b.n	6ce0 <__aeabi_dadd+0x590>
    6948:	2280      	movs	r2, #128	; 0x80
    694a:	0312      	lsls	r2, r2, #12
    694c:	4314      	orrs	r4, r2
    694e:	0324      	lsls	r4, r4, #12
    6950:	0b24      	lsrs	r4, r4, #12
    6952:	e79e      	b.n	6892 <__aeabi_dadd+0x142>
    6954:	002e      	movs	r6, r5
    6956:	e77f      	b.n	6858 <__aeabi_dadd+0x108>
    6958:	0008      	movs	r0, r1
    695a:	4310      	orrs	r0, r2
    695c:	d100      	bne.n	6960 <__aeabi_dadd+0x210>
    695e:	e0b4      	b.n	6aca <__aeabi_dadd+0x37a>
    6960:	1e58      	subs	r0, r3, #1
    6962:	2800      	cmp	r0, #0
    6964:	d000      	beq.n	6968 <__aeabi_dadd+0x218>
    6966:	e0de      	b.n	6b26 <__aeabi_dadd+0x3d6>
    6968:	18ba      	adds	r2, r7, r2
    696a:	42ba      	cmp	r2, r7
    696c:	419b      	sbcs	r3, r3
    696e:	1864      	adds	r4, r4, r1
    6970:	425b      	negs	r3, r3
    6972:	18e4      	adds	r4, r4, r3
    6974:	0017      	movs	r7, r2
    6976:	2601      	movs	r6, #1
    6978:	0223      	lsls	r3, r4, #8
    697a:	d5a6      	bpl.n	68ca <__aeabi_dadd+0x17a>
    697c:	2602      	movs	r6, #2
    697e:	e7d5      	b.n	692c <__aeabi_dadd+0x1dc>
    6980:	2d00      	cmp	r5, #0
    6982:	d16e      	bne.n	6a62 <__aeabi_dadd+0x312>
    6984:	1c70      	adds	r0, r6, #1
    6986:	0540      	lsls	r0, r0, #21
    6988:	0d40      	lsrs	r0, r0, #21
    698a:	2801      	cmp	r0, #1
    698c:	dc00      	bgt.n	6990 <__aeabi_dadd+0x240>
    698e:	e0f9      	b.n	6b84 <__aeabi_dadd+0x434>
    6990:	1ab8      	subs	r0, r7, r2
    6992:	4684      	mov	ip, r0
    6994:	4287      	cmp	r7, r0
    6996:	4180      	sbcs	r0, r0
    6998:	1ae5      	subs	r5, r4, r3
    699a:	4240      	negs	r0, r0
    699c:	1a2d      	subs	r5, r5, r0
    699e:	0228      	lsls	r0, r5, #8
    69a0:	d400      	bmi.n	69a4 <__aeabi_dadd+0x254>
    69a2:	e089      	b.n	6ab8 <__aeabi_dadd+0x368>
    69a4:	1bd7      	subs	r7, r2, r7
    69a6:	42ba      	cmp	r2, r7
    69a8:	4192      	sbcs	r2, r2
    69aa:	1b1c      	subs	r4, r3, r4
    69ac:	4252      	negs	r2, r2
    69ae:	1aa5      	subs	r5, r4, r2
    69b0:	46d8      	mov	r8, fp
    69b2:	e729      	b.n	6808 <__aeabi_dadd+0xb8>
    69b4:	4645      	mov	r5, r8
    69b6:	2400      	movs	r4, #0
    69b8:	2700      	movs	r7, #0
    69ba:	e76a      	b.n	6892 <__aeabi_dadd+0x142>
    69bc:	4c45      	ldr	r4, [pc, #276]	; (6ad4 <__aeabi_dadd+0x384>)
    69be:	1af6      	subs	r6, r6, r3
    69c0:	402c      	ands	r4, r5
    69c2:	e749      	b.n	6858 <__aeabi_dadd+0x108>
    69c4:	003d      	movs	r5, r7
    69c6:	3828      	subs	r0, #40	; 0x28
    69c8:	4085      	lsls	r5, r0
    69ca:	2700      	movs	r7, #0
    69cc:	e72e      	b.n	682c <__aeabi_dadd+0xdc>
    69ce:	0038      	movs	r0, r7
    69d0:	f001 fb04 	bl	7fdc <__clzsi2>
    69d4:	3020      	adds	r0, #32
    69d6:	e71d      	b.n	6814 <__aeabi_dadd+0xc4>
    69d8:	430a      	orrs	r2, r1
    69da:	1e51      	subs	r1, r2, #1
    69dc:	418a      	sbcs	r2, r1
    69de:	2100      	movs	r1, #0
    69e0:	e707      	b.n	67f2 <__aeabi_dadd+0xa2>
    69e2:	2b00      	cmp	r3, #0
    69e4:	d000      	beq.n	69e8 <__aeabi_dadd+0x298>
    69e6:	e0f3      	b.n	6bd0 <__aeabi_dadd+0x480>
    69e8:	1c70      	adds	r0, r6, #1
    69ea:	0543      	lsls	r3, r0, #21
    69ec:	0d5b      	lsrs	r3, r3, #21
    69ee:	2b01      	cmp	r3, #1
    69f0:	dc00      	bgt.n	69f4 <__aeabi_dadd+0x2a4>
    69f2:	e0ad      	b.n	6b50 <__aeabi_dadd+0x400>
    69f4:	4b36      	ldr	r3, [pc, #216]	; (6ad0 <__aeabi_dadd+0x380>)
    69f6:	4298      	cmp	r0, r3
    69f8:	d100      	bne.n	69fc <__aeabi_dadd+0x2ac>
    69fa:	e0d1      	b.n	6ba0 <__aeabi_dadd+0x450>
    69fc:	18ba      	adds	r2, r7, r2
    69fe:	42ba      	cmp	r2, r7
    6a00:	41bf      	sbcs	r7, r7
    6a02:	1864      	adds	r4, r4, r1
    6a04:	427f      	negs	r7, r7
    6a06:	19e4      	adds	r4, r4, r7
    6a08:	07e7      	lsls	r7, r4, #31
    6a0a:	0852      	lsrs	r2, r2, #1
    6a0c:	4317      	orrs	r7, r2
    6a0e:	0864      	lsrs	r4, r4, #1
    6a10:	0006      	movs	r6, r0
    6a12:	e721      	b.n	6858 <__aeabi_dadd+0x108>
    6a14:	482e      	ldr	r0, [pc, #184]	; (6ad0 <__aeabi_dadd+0x380>)
    6a16:	4285      	cmp	r5, r0
    6a18:	d100      	bne.n	6a1c <__aeabi_dadd+0x2cc>
    6a1a:	e093      	b.n	6b44 <__aeabi_dadd+0x3f4>
    6a1c:	001d      	movs	r5, r3
    6a1e:	e6d0      	b.n	67c2 <__aeabi_dadd+0x72>
    6a20:	0029      	movs	r1, r5
    6a22:	3e1f      	subs	r6, #31
    6a24:	40f1      	lsrs	r1, r6
    6a26:	2b20      	cmp	r3, #32
    6a28:	d100      	bne.n	6a2c <__aeabi_dadd+0x2dc>
    6a2a:	e08d      	b.n	6b48 <__aeabi_dadd+0x3f8>
    6a2c:	2240      	movs	r2, #64	; 0x40
    6a2e:	1ad3      	subs	r3, r2, r3
    6a30:	409d      	lsls	r5, r3
    6a32:	432f      	orrs	r7, r5
    6a34:	1e7d      	subs	r5, r7, #1
    6a36:	41af      	sbcs	r7, r5
    6a38:	2400      	movs	r4, #0
    6a3a:	430f      	orrs	r7, r1
    6a3c:	2600      	movs	r6, #0
    6a3e:	e744      	b.n	68ca <__aeabi_dadd+0x17a>
    6a40:	002b      	movs	r3, r5
    6a42:	0008      	movs	r0, r1
    6a44:	3b20      	subs	r3, #32
    6a46:	40d8      	lsrs	r0, r3
    6a48:	0003      	movs	r3, r0
    6a4a:	2d20      	cmp	r5, #32
    6a4c:	d100      	bne.n	6a50 <__aeabi_dadd+0x300>
    6a4e:	e07d      	b.n	6b4c <__aeabi_dadd+0x3fc>
    6a50:	2040      	movs	r0, #64	; 0x40
    6a52:	1b45      	subs	r5, r0, r5
    6a54:	40a9      	lsls	r1, r5
    6a56:	430a      	orrs	r2, r1
    6a58:	1e51      	subs	r1, r2, #1
    6a5a:	418a      	sbcs	r2, r1
    6a5c:	2100      	movs	r1, #0
    6a5e:	431a      	orrs	r2, r3
    6a60:	e6c7      	b.n	67f2 <__aeabi_dadd+0xa2>
    6a62:	2e00      	cmp	r6, #0
    6a64:	d050      	beq.n	6b08 <__aeabi_dadd+0x3b8>
    6a66:	4e1a      	ldr	r6, [pc, #104]	; (6ad0 <__aeabi_dadd+0x380>)
    6a68:	42b0      	cmp	r0, r6
    6a6a:	d057      	beq.n	6b1c <__aeabi_dadd+0x3cc>
    6a6c:	2680      	movs	r6, #128	; 0x80
    6a6e:	426b      	negs	r3, r5
    6a70:	4699      	mov	r9, r3
    6a72:	0436      	lsls	r6, r6, #16
    6a74:	4334      	orrs	r4, r6
    6a76:	464b      	mov	r3, r9
    6a78:	2b38      	cmp	r3, #56	; 0x38
    6a7a:	dd00      	ble.n	6a7e <__aeabi_dadd+0x32e>
    6a7c:	e0d6      	b.n	6c2c <__aeabi_dadd+0x4dc>
    6a7e:	2b1f      	cmp	r3, #31
    6a80:	dd00      	ble.n	6a84 <__aeabi_dadd+0x334>
    6a82:	e135      	b.n	6cf0 <__aeabi_dadd+0x5a0>
    6a84:	2620      	movs	r6, #32
    6a86:	1af5      	subs	r5, r6, r3
    6a88:	0026      	movs	r6, r4
    6a8a:	40ae      	lsls	r6, r5
    6a8c:	46b2      	mov	sl, r6
    6a8e:	003e      	movs	r6, r7
    6a90:	40de      	lsrs	r6, r3
    6a92:	46ac      	mov	ip, r5
    6a94:	0035      	movs	r5, r6
    6a96:	4656      	mov	r6, sl
    6a98:	432e      	orrs	r6, r5
    6a9a:	4665      	mov	r5, ip
    6a9c:	40af      	lsls	r7, r5
    6a9e:	1e7d      	subs	r5, r7, #1
    6aa0:	41af      	sbcs	r7, r5
    6aa2:	40dc      	lsrs	r4, r3
    6aa4:	4337      	orrs	r7, r6
    6aa6:	1bd7      	subs	r7, r2, r7
    6aa8:	42ba      	cmp	r2, r7
    6aaa:	4192      	sbcs	r2, r2
    6aac:	1b0c      	subs	r4, r1, r4
    6aae:	4252      	negs	r2, r2
    6ab0:	1aa4      	subs	r4, r4, r2
    6ab2:	0006      	movs	r6, r0
    6ab4:	46d8      	mov	r8, fp
    6ab6:	e6a3      	b.n	6800 <__aeabi_dadd+0xb0>
    6ab8:	4664      	mov	r4, ip
    6aba:	4667      	mov	r7, ip
    6abc:	432c      	orrs	r4, r5
    6abe:	d000      	beq.n	6ac2 <__aeabi_dadd+0x372>
    6ac0:	e6a2      	b.n	6808 <__aeabi_dadd+0xb8>
    6ac2:	2500      	movs	r5, #0
    6ac4:	2600      	movs	r6, #0
    6ac6:	2700      	movs	r7, #0
    6ac8:	e706      	b.n	68d8 <__aeabi_dadd+0x188>
    6aca:	001e      	movs	r6, r3
    6acc:	e6c4      	b.n	6858 <__aeabi_dadd+0x108>
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	000007ff 	.word	0x000007ff
    6ad4:	ff7fffff 	.word	0xff7fffff
    6ad8:	800fffff 	.word	0x800fffff
    6adc:	2b1f      	cmp	r3, #31
    6ade:	dc63      	bgt.n	6ba8 <__aeabi_dadd+0x458>
    6ae0:	2020      	movs	r0, #32
    6ae2:	1ac3      	subs	r3, r0, r3
    6ae4:	0008      	movs	r0, r1
    6ae6:	4098      	lsls	r0, r3
    6ae8:	469c      	mov	ip, r3
    6aea:	4683      	mov	fp, r0
    6aec:	4653      	mov	r3, sl
    6aee:	0010      	movs	r0, r2
    6af0:	40d8      	lsrs	r0, r3
    6af2:	0003      	movs	r3, r0
    6af4:	4658      	mov	r0, fp
    6af6:	4318      	orrs	r0, r3
    6af8:	4663      	mov	r3, ip
    6afa:	409a      	lsls	r2, r3
    6afc:	1e53      	subs	r3, r2, #1
    6afe:	419a      	sbcs	r2, r3
    6b00:	4653      	mov	r3, sl
    6b02:	4302      	orrs	r2, r0
    6b04:	40d9      	lsrs	r1, r3
    6b06:	e703      	b.n	6910 <__aeabi_dadd+0x1c0>
    6b08:	0026      	movs	r6, r4
    6b0a:	433e      	orrs	r6, r7
    6b0c:	d006      	beq.n	6b1c <__aeabi_dadd+0x3cc>
    6b0e:	43eb      	mvns	r3, r5
    6b10:	4699      	mov	r9, r3
    6b12:	2b00      	cmp	r3, #0
    6b14:	d0c7      	beq.n	6aa6 <__aeabi_dadd+0x356>
    6b16:	4e94      	ldr	r6, [pc, #592]	; (6d68 <__aeabi_dadd+0x618>)
    6b18:	42b0      	cmp	r0, r6
    6b1a:	d1ac      	bne.n	6a76 <__aeabi_dadd+0x326>
    6b1c:	000c      	movs	r4, r1
    6b1e:	0017      	movs	r7, r2
    6b20:	0006      	movs	r6, r0
    6b22:	46d8      	mov	r8, fp
    6b24:	e698      	b.n	6858 <__aeabi_dadd+0x108>
    6b26:	4b90      	ldr	r3, [pc, #576]	; (6d68 <__aeabi_dadd+0x618>)
    6b28:	459a      	cmp	sl, r3
    6b2a:	d00b      	beq.n	6b44 <__aeabi_dadd+0x3f4>
    6b2c:	4682      	mov	sl, r0
    6b2e:	e6e7      	b.n	6900 <__aeabi_dadd+0x1b0>
    6b30:	2800      	cmp	r0, #0
    6b32:	d000      	beq.n	6b36 <__aeabi_dadd+0x3e6>
    6b34:	e09e      	b.n	6c74 <__aeabi_dadd+0x524>
    6b36:	0018      	movs	r0, r3
    6b38:	4310      	orrs	r0, r2
    6b3a:	d100      	bne.n	6b3e <__aeabi_dadd+0x3ee>
    6b3c:	e0e9      	b.n	6d12 <__aeabi_dadd+0x5c2>
    6b3e:	001c      	movs	r4, r3
    6b40:	0017      	movs	r7, r2
    6b42:	46d8      	mov	r8, fp
    6b44:	4e88      	ldr	r6, [pc, #544]	; (6d68 <__aeabi_dadd+0x618>)
    6b46:	e687      	b.n	6858 <__aeabi_dadd+0x108>
    6b48:	2500      	movs	r5, #0
    6b4a:	e772      	b.n	6a32 <__aeabi_dadd+0x2e2>
    6b4c:	2100      	movs	r1, #0
    6b4e:	e782      	b.n	6a56 <__aeabi_dadd+0x306>
    6b50:	0023      	movs	r3, r4
    6b52:	433b      	orrs	r3, r7
    6b54:	2e00      	cmp	r6, #0
    6b56:	d000      	beq.n	6b5a <__aeabi_dadd+0x40a>
    6b58:	e0ab      	b.n	6cb2 <__aeabi_dadd+0x562>
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d100      	bne.n	6b60 <__aeabi_dadd+0x410>
    6b5e:	e0e7      	b.n	6d30 <__aeabi_dadd+0x5e0>
    6b60:	000b      	movs	r3, r1
    6b62:	4313      	orrs	r3, r2
    6b64:	d100      	bne.n	6b68 <__aeabi_dadd+0x418>
    6b66:	e677      	b.n	6858 <__aeabi_dadd+0x108>
    6b68:	18ba      	adds	r2, r7, r2
    6b6a:	42ba      	cmp	r2, r7
    6b6c:	41bf      	sbcs	r7, r7
    6b6e:	1864      	adds	r4, r4, r1
    6b70:	427f      	negs	r7, r7
    6b72:	19e4      	adds	r4, r4, r7
    6b74:	0223      	lsls	r3, r4, #8
    6b76:	d400      	bmi.n	6b7a <__aeabi_dadd+0x42a>
    6b78:	e0f2      	b.n	6d60 <__aeabi_dadd+0x610>
    6b7a:	4b7c      	ldr	r3, [pc, #496]	; (6d6c <__aeabi_dadd+0x61c>)
    6b7c:	0017      	movs	r7, r2
    6b7e:	401c      	ands	r4, r3
    6b80:	0006      	movs	r6, r0
    6b82:	e669      	b.n	6858 <__aeabi_dadd+0x108>
    6b84:	0020      	movs	r0, r4
    6b86:	4338      	orrs	r0, r7
    6b88:	2e00      	cmp	r6, #0
    6b8a:	d1d1      	bne.n	6b30 <__aeabi_dadd+0x3e0>
    6b8c:	2800      	cmp	r0, #0
    6b8e:	d15b      	bne.n	6c48 <__aeabi_dadd+0x4f8>
    6b90:	001c      	movs	r4, r3
    6b92:	4314      	orrs	r4, r2
    6b94:	d100      	bne.n	6b98 <__aeabi_dadd+0x448>
    6b96:	e0a8      	b.n	6cea <__aeabi_dadd+0x59a>
    6b98:	001c      	movs	r4, r3
    6b9a:	0017      	movs	r7, r2
    6b9c:	46d8      	mov	r8, fp
    6b9e:	e65b      	b.n	6858 <__aeabi_dadd+0x108>
    6ba0:	0006      	movs	r6, r0
    6ba2:	2400      	movs	r4, #0
    6ba4:	2700      	movs	r7, #0
    6ba6:	e697      	b.n	68d8 <__aeabi_dadd+0x188>
    6ba8:	4650      	mov	r0, sl
    6baa:	000b      	movs	r3, r1
    6bac:	3820      	subs	r0, #32
    6bae:	40c3      	lsrs	r3, r0
    6bb0:	4699      	mov	r9, r3
    6bb2:	4653      	mov	r3, sl
    6bb4:	2b20      	cmp	r3, #32
    6bb6:	d100      	bne.n	6bba <__aeabi_dadd+0x46a>
    6bb8:	e095      	b.n	6ce6 <__aeabi_dadd+0x596>
    6bba:	2340      	movs	r3, #64	; 0x40
    6bbc:	4650      	mov	r0, sl
    6bbe:	1a1b      	subs	r3, r3, r0
    6bc0:	4099      	lsls	r1, r3
    6bc2:	430a      	orrs	r2, r1
    6bc4:	1e51      	subs	r1, r2, #1
    6bc6:	418a      	sbcs	r2, r1
    6bc8:	464b      	mov	r3, r9
    6bca:	2100      	movs	r1, #0
    6bcc:	431a      	orrs	r2, r3
    6bce:	e69f      	b.n	6910 <__aeabi_dadd+0x1c0>
    6bd0:	2e00      	cmp	r6, #0
    6bd2:	d130      	bne.n	6c36 <__aeabi_dadd+0x4e6>
    6bd4:	0026      	movs	r6, r4
    6bd6:	433e      	orrs	r6, r7
    6bd8:	d067      	beq.n	6caa <__aeabi_dadd+0x55a>
    6bda:	43db      	mvns	r3, r3
    6bdc:	469a      	mov	sl, r3
    6bde:	2b00      	cmp	r3, #0
    6be0:	d01c      	beq.n	6c1c <__aeabi_dadd+0x4cc>
    6be2:	4e61      	ldr	r6, [pc, #388]	; (6d68 <__aeabi_dadd+0x618>)
    6be4:	42b0      	cmp	r0, r6
    6be6:	d060      	beq.n	6caa <__aeabi_dadd+0x55a>
    6be8:	4653      	mov	r3, sl
    6bea:	2b38      	cmp	r3, #56	; 0x38
    6bec:	dd00      	ble.n	6bf0 <__aeabi_dadd+0x4a0>
    6bee:	e096      	b.n	6d1e <__aeabi_dadd+0x5ce>
    6bf0:	2b1f      	cmp	r3, #31
    6bf2:	dd00      	ble.n	6bf6 <__aeabi_dadd+0x4a6>
    6bf4:	e09f      	b.n	6d36 <__aeabi_dadd+0x5e6>
    6bf6:	2620      	movs	r6, #32
    6bf8:	1af3      	subs	r3, r6, r3
    6bfa:	0026      	movs	r6, r4
    6bfc:	409e      	lsls	r6, r3
    6bfe:	469c      	mov	ip, r3
    6c00:	46b3      	mov	fp, r6
    6c02:	4653      	mov	r3, sl
    6c04:	003e      	movs	r6, r7
    6c06:	40de      	lsrs	r6, r3
    6c08:	0033      	movs	r3, r6
    6c0a:	465e      	mov	r6, fp
    6c0c:	431e      	orrs	r6, r3
    6c0e:	4663      	mov	r3, ip
    6c10:	409f      	lsls	r7, r3
    6c12:	1e7b      	subs	r3, r7, #1
    6c14:	419f      	sbcs	r7, r3
    6c16:	4653      	mov	r3, sl
    6c18:	40dc      	lsrs	r4, r3
    6c1a:	4337      	orrs	r7, r6
    6c1c:	18bf      	adds	r7, r7, r2
    6c1e:	4297      	cmp	r7, r2
    6c20:	4192      	sbcs	r2, r2
    6c22:	1864      	adds	r4, r4, r1
    6c24:	4252      	negs	r2, r2
    6c26:	18a4      	adds	r4, r4, r2
    6c28:	0006      	movs	r6, r0
    6c2a:	e678      	b.n	691e <__aeabi_dadd+0x1ce>
    6c2c:	4327      	orrs	r7, r4
    6c2e:	1e7c      	subs	r4, r7, #1
    6c30:	41a7      	sbcs	r7, r4
    6c32:	2400      	movs	r4, #0
    6c34:	e737      	b.n	6aa6 <__aeabi_dadd+0x356>
    6c36:	4e4c      	ldr	r6, [pc, #304]	; (6d68 <__aeabi_dadd+0x618>)
    6c38:	42b0      	cmp	r0, r6
    6c3a:	d036      	beq.n	6caa <__aeabi_dadd+0x55a>
    6c3c:	2680      	movs	r6, #128	; 0x80
    6c3e:	425b      	negs	r3, r3
    6c40:	0436      	lsls	r6, r6, #16
    6c42:	469a      	mov	sl, r3
    6c44:	4334      	orrs	r4, r6
    6c46:	e7cf      	b.n	6be8 <__aeabi_dadd+0x498>
    6c48:	0018      	movs	r0, r3
    6c4a:	4310      	orrs	r0, r2
    6c4c:	d100      	bne.n	6c50 <__aeabi_dadd+0x500>
    6c4e:	e603      	b.n	6858 <__aeabi_dadd+0x108>
    6c50:	1ab8      	subs	r0, r7, r2
    6c52:	4684      	mov	ip, r0
    6c54:	4567      	cmp	r7, ip
    6c56:	41ad      	sbcs	r5, r5
    6c58:	1ae0      	subs	r0, r4, r3
    6c5a:	426d      	negs	r5, r5
    6c5c:	1b40      	subs	r0, r0, r5
    6c5e:	0205      	lsls	r5, r0, #8
    6c60:	d400      	bmi.n	6c64 <__aeabi_dadd+0x514>
    6c62:	e62c      	b.n	68be <__aeabi_dadd+0x16e>
    6c64:	1bd7      	subs	r7, r2, r7
    6c66:	42ba      	cmp	r2, r7
    6c68:	4192      	sbcs	r2, r2
    6c6a:	1b1c      	subs	r4, r3, r4
    6c6c:	4252      	negs	r2, r2
    6c6e:	1aa4      	subs	r4, r4, r2
    6c70:	46d8      	mov	r8, fp
    6c72:	e5f1      	b.n	6858 <__aeabi_dadd+0x108>
    6c74:	0018      	movs	r0, r3
    6c76:	4310      	orrs	r0, r2
    6c78:	d100      	bne.n	6c7c <__aeabi_dadd+0x52c>
    6c7a:	e763      	b.n	6b44 <__aeabi_dadd+0x3f4>
    6c7c:	08f8      	lsrs	r0, r7, #3
    6c7e:	0767      	lsls	r7, r4, #29
    6c80:	4307      	orrs	r7, r0
    6c82:	2080      	movs	r0, #128	; 0x80
    6c84:	08e4      	lsrs	r4, r4, #3
    6c86:	0300      	lsls	r0, r0, #12
    6c88:	4204      	tst	r4, r0
    6c8a:	d008      	beq.n	6c9e <__aeabi_dadd+0x54e>
    6c8c:	08dd      	lsrs	r5, r3, #3
    6c8e:	4205      	tst	r5, r0
    6c90:	d105      	bne.n	6c9e <__aeabi_dadd+0x54e>
    6c92:	08d2      	lsrs	r2, r2, #3
    6c94:	0759      	lsls	r1, r3, #29
    6c96:	4311      	orrs	r1, r2
    6c98:	000f      	movs	r7, r1
    6c9a:	002c      	movs	r4, r5
    6c9c:	46d8      	mov	r8, fp
    6c9e:	0f7b      	lsrs	r3, r7, #29
    6ca0:	00e4      	lsls	r4, r4, #3
    6ca2:	431c      	orrs	r4, r3
    6ca4:	00ff      	lsls	r7, r7, #3
    6ca6:	4e30      	ldr	r6, [pc, #192]	; (6d68 <__aeabi_dadd+0x618>)
    6ca8:	e5d6      	b.n	6858 <__aeabi_dadd+0x108>
    6caa:	000c      	movs	r4, r1
    6cac:	0017      	movs	r7, r2
    6cae:	0006      	movs	r6, r0
    6cb0:	e5d2      	b.n	6858 <__aeabi_dadd+0x108>
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d038      	beq.n	6d28 <__aeabi_dadd+0x5d8>
    6cb6:	000b      	movs	r3, r1
    6cb8:	4313      	orrs	r3, r2
    6cba:	d100      	bne.n	6cbe <__aeabi_dadd+0x56e>
    6cbc:	e742      	b.n	6b44 <__aeabi_dadd+0x3f4>
    6cbe:	08f8      	lsrs	r0, r7, #3
    6cc0:	0767      	lsls	r7, r4, #29
    6cc2:	4307      	orrs	r7, r0
    6cc4:	2080      	movs	r0, #128	; 0x80
    6cc6:	08e4      	lsrs	r4, r4, #3
    6cc8:	0300      	lsls	r0, r0, #12
    6cca:	4204      	tst	r4, r0
    6ccc:	d0e7      	beq.n	6c9e <__aeabi_dadd+0x54e>
    6cce:	08cb      	lsrs	r3, r1, #3
    6cd0:	4203      	tst	r3, r0
    6cd2:	d1e4      	bne.n	6c9e <__aeabi_dadd+0x54e>
    6cd4:	08d2      	lsrs	r2, r2, #3
    6cd6:	0749      	lsls	r1, r1, #29
    6cd8:	4311      	orrs	r1, r2
    6cda:	000f      	movs	r7, r1
    6cdc:	001c      	movs	r4, r3
    6cde:	e7de      	b.n	6c9e <__aeabi_dadd+0x54e>
    6ce0:	2700      	movs	r7, #0
    6ce2:	2400      	movs	r4, #0
    6ce4:	e5d5      	b.n	6892 <__aeabi_dadd+0x142>
    6ce6:	2100      	movs	r1, #0
    6ce8:	e76b      	b.n	6bc2 <__aeabi_dadd+0x472>
    6cea:	2500      	movs	r5, #0
    6cec:	2700      	movs	r7, #0
    6cee:	e5f3      	b.n	68d8 <__aeabi_dadd+0x188>
    6cf0:	464e      	mov	r6, r9
    6cf2:	0025      	movs	r5, r4
    6cf4:	3e20      	subs	r6, #32
    6cf6:	40f5      	lsrs	r5, r6
    6cf8:	464b      	mov	r3, r9
    6cfa:	002e      	movs	r6, r5
    6cfc:	2b20      	cmp	r3, #32
    6cfe:	d02d      	beq.n	6d5c <__aeabi_dadd+0x60c>
    6d00:	2540      	movs	r5, #64	; 0x40
    6d02:	1aed      	subs	r5, r5, r3
    6d04:	40ac      	lsls	r4, r5
    6d06:	4327      	orrs	r7, r4
    6d08:	1e7c      	subs	r4, r7, #1
    6d0a:	41a7      	sbcs	r7, r4
    6d0c:	2400      	movs	r4, #0
    6d0e:	4337      	orrs	r7, r6
    6d10:	e6c9      	b.n	6aa6 <__aeabi_dadd+0x356>
    6d12:	2480      	movs	r4, #128	; 0x80
    6d14:	2500      	movs	r5, #0
    6d16:	0324      	lsls	r4, r4, #12
    6d18:	4e13      	ldr	r6, [pc, #76]	; (6d68 <__aeabi_dadd+0x618>)
    6d1a:	2700      	movs	r7, #0
    6d1c:	e5dc      	b.n	68d8 <__aeabi_dadd+0x188>
    6d1e:	4327      	orrs	r7, r4
    6d20:	1e7c      	subs	r4, r7, #1
    6d22:	41a7      	sbcs	r7, r4
    6d24:	2400      	movs	r4, #0
    6d26:	e779      	b.n	6c1c <__aeabi_dadd+0x4cc>
    6d28:	000c      	movs	r4, r1
    6d2a:	0017      	movs	r7, r2
    6d2c:	4e0e      	ldr	r6, [pc, #56]	; (6d68 <__aeabi_dadd+0x618>)
    6d2e:	e593      	b.n	6858 <__aeabi_dadd+0x108>
    6d30:	000c      	movs	r4, r1
    6d32:	0017      	movs	r7, r2
    6d34:	e590      	b.n	6858 <__aeabi_dadd+0x108>
    6d36:	4656      	mov	r6, sl
    6d38:	0023      	movs	r3, r4
    6d3a:	3e20      	subs	r6, #32
    6d3c:	40f3      	lsrs	r3, r6
    6d3e:	4699      	mov	r9, r3
    6d40:	4653      	mov	r3, sl
    6d42:	2b20      	cmp	r3, #32
    6d44:	d00e      	beq.n	6d64 <__aeabi_dadd+0x614>
    6d46:	2340      	movs	r3, #64	; 0x40
    6d48:	4656      	mov	r6, sl
    6d4a:	1b9b      	subs	r3, r3, r6
    6d4c:	409c      	lsls	r4, r3
    6d4e:	4327      	orrs	r7, r4
    6d50:	1e7c      	subs	r4, r7, #1
    6d52:	41a7      	sbcs	r7, r4
    6d54:	464b      	mov	r3, r9
    6d56:	2400      	movs	r4, #0
    6d58:	431f      	orrs	r7, r3
    6d5a:	e75f      	b.n	6c1c <__aeabi_dadd+0x4cc>
    6d5c:	2400      	movs	r4, #0
    6d5e:	e7d2      	b.n	6d06 <__aeabi_dadd+0x5b6>
    6d60:	0017      	movs	r7, r2
    6d62:	e5b2      	b.n	68ca <__aeabi_dadd+0x17a>
    6d64:	2400      	movs	r4, #0
    6d66:	e7f2      	b.n	6d4e <__aeabi_dadd+0x5fe>
    6d68:	000007ff 	.word	0x000007ff
    6d6c:	ff7fffff 	.word	0xff7fffff

00006d70 <__aeabi_ddiv>:
    6d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d72:	4657      	mov	r7, sl
    6d74:	4645      	mov	r5, r8
    6d76:	46de      	mov	lr, fp
    6d78:	464e      	mov	r6, r9
    6d7a:	b5e0      	push	{r5, r6, r7, lr}
    6d7c:	004c      	lsls	r4, r1, #1
    6d7e:	030e      	lsls	r6, r1, #12
    6d80:	b087      	sub	sp, #28
    6d82:	4683      	mov	fp, r0
    6d84:	4692      	mov	sl, r2
    6d86:	001d      	movs	r5, r3
    6d88:	4680      	mov	r8, r0
    6d8a:	0b36      	lsrs	r6, r6, #12
    6d8c:	0d64      	lsrs	r4, r4, #21
    6d8e:	0fcf      	lsrs	r7, r1, #31
    6d90:	2c00      	cmp	r4, #0
    6d92:	d04f      	beq.n	6e34 <__aeabi_ddiv+0xc4>
    6d94:	4b6f      	ldr	r3, [pc, #444]	; (6f54 <__aeabi_ddiv+0x1e4>)
    6d96:	429c      	cmp	r4, r3
    6d98:	d035      	beq.n	6e06 <__aeabi_ddiv+0x96>
    6d9a:	2380      	movs	r3, #128	; 0x80
    6d9c:	0f42      	lsrs	r2, r0, #29
    6d9e:	041b      	lsls	r3, r3, #16
    6da0:	00f6      	lsls	r6, r6, #3
    6da2:	4313      	orrs	r3, r2
    6da4:	4333      	orrs	r3, r6
    6da6:	4699      	mov	r9, r3
    6da8:	00c3      	lsls	r3, r0, #3
    6daa:	4698      	mov	r8, r3
    6dac:	4b6a      	ldr	r3, [pc, #424]	; (6f58 <__aeabi_ddiv+0x1e8>)
    6dae:	2600      	movs	r6, #0
    6db0:	469c      	mov	ip, r3
    6db2:	2300      	movs	r3, #0
    6db4:	4464      	add	r4, ip
    6db6:	9303      	str	r3, [sp, #12]
    6db8:	032b      	lsls	r3, r5, #12
    6dba:	0b1b      	lsrs	r3, r3, #12
    6dbc:	469b      	mov	fp, r3
    6dbe:	006b      	lsls	r3, r5, #1
    6dc0:	0fed      	lsrs	r5, r5, #31
    6dc2:	4650      	mov	r0, sl
    6dc4:	0d5b      	lsrs	r3, r3, #21
    6dc6:	9501      	str	r5, [sp, #4]
    6dc8:	d05e      	beq.n	6e88 <__aeabi_ddiv+0x118>
    6dca:	4a62      	ldr	r2, [pc, #392]	; (6f54 <__aeabi_ddiv+0x1e4>)
    6dcc:	4293      	cmp	r3, r2
    6dce:	d053      	beq.n	6e78 <__aeabi_ddiv+0x108>
    6dd0:	465a      	mov	r2, fp
    6dd2:	00d1      	lsls	r1, r2, #3
    6dd4:	2280      	movs	r2, #128	; 0x80
    6dd6:	0f40      	lsrs	r0, r0, #29
    6dd8:	0412      	lsls	r2, r2, #16
    6dda:	4302      	orrs	r2, r0
    6ddc:	430a      	orrs	r2, r1
    6dde:	4693      	mov	fp, r2
    6de0:	4652      	mov	r2, sl
    6de2:	00d1      	lsls	r1, r2, #3
    6de4:	4a5c      	ldr	r2, [pc, #368]	; (6f58 <__aeabi_ddiv+0x1e8>)
    6de6:	4694      	mov	ip, r2
    6de8:	2200      	movs	r2, #0
    6dea:	4463      	add	r3, ip
    6dec:	0038      	movs	r0, r7
    6dee:	4068      	eors	r0, r5
    6df0:	4684      	mov	ip, r0
    6df2:	9002      	str	r0, [sp, #8]
    6df4:	1ae4      	subs	r4, r4, r3
    6df6:	4316      	orrs	r6, r2
    6df8:	2e0f      	cmp	r6, #15
    6dfa:	d900      	bls.n	6dfe <__aeabi_ddiv+0x8e>
    6dfc:	e0b4      	b.n	6f68 <__aeabi_ddiv+0x1f8>
    6dfe:	4b57      	ldr	r3, [pc, #348]	; (6f5c <__aeabi_ddiv+0x1ec>)
    6e00:	00b6      	lsls	r6, r6, #2
    6e02:	599b      	ldr	r3, [r3, r6]
    6e04:	469f      	mov	pc, r3
    6e06:	0003      	movs	r3, r0
    6e08:	4333      	orrs	r3, r6
    6e0a:	4699      	mov	r9, r3
    6e0c:	d16c      	bne.n	6ee8 <__aeabi_ddiv+0x178>
    6e0e:	2300      	movs	r3, #0
    6e10:	4698      	mov	r8, r3
    6e12:	3302      	adds	r3, #2
    6e14:	2608      	movs	r6, #8
    6e16:	9303      	str	r3, [sp, #12]
    6e18:	e7ce      	b.n	6db8 <__aeabi_ddiv+0x48>
    6e1a:	46cb      	mov	fp, r9
    6e1c:	4641      	mov	r1, r8
    6e1e:	9a03      	ldr	r2, [sp, #12]
    6e20:	9701      	str	r7, [sp, #4]
    6e22:	2a02      	cmp	r2, #2
    6e24:	d165      	bne.n	6ef2 <__aeabi_ddiv+0x182>
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	4c4a      	ldr	r4, [pc, #296]	; (6f54 <__aeabi_ddiv+0x1e4>)
    6e2a:	469c      	mov	ip, r3
    6e2c:	2300      	movs	r3, #0
    6e2e:	2200      	movs	r2, #0
    6e30:	4698      	mov	r8, r3
    6e32:	e06b      	b.n	6f0c <__aeabi_ddiv+0x19c>
    6e34:	0003      	movs	r3, r0
    6e36:	4333      	orrs	r3, r6
    6e38:	4699      	mov	r9, r3
    6e3a:	d04e      	beq.n	6eda <__aeabi_ddiv+0x16a>
    6e3c:	2e00      	cmp	r6, #0
    6e3e:	d100      	bne.n	6e42 <__aeabi_ddiv+0xd2>
    6e40:	e1bc      	b.n	71bc <__aeabi_ddiv+0x44c>
    6e42:	0030      	movs	r0, r6
    6e44:	f001 f8ca 	bl	7fdc <__clzsi2>
    6e48:	0003      	movs	r3, r0
    6e4a:	3b0b      	subs	r3, #11
    6e4c:	2b1c      	cmp	r3, #28
    6e4e:	dd00      	ble.n	6e52 <__aeabi_ddiv+0xe2>
    6e50:	e1ac      	b.n	71ac <__aeabi_ddiv+0x43c>
    6e52:	221d      	movs	r2, #29
    6e54:	1ad3      	subs	r3, r2, r3
    6e56:	465a      	mov	r2, fp
    6e58:	0001      	movs	r1, r0
    6e5a:	40da      	lsrs	r2, r3
    6e5c:	3908      	subs	r1, #8
    6e5e:	408e      	lsls	r6, r1
    6e60:	0013      	movs	r3, r2
    6e62:	4333      	orrs	r3, r6
    6e64:	4699      	mov	r9, r3
    6e66:	465b      	mov	r3, fp
    6e68:	408b      	lsls	r3, r1
    6e6a:	4698      	mov	r8, r3
    6e6c:	2300      	movs	r3, #0
    6e6e:	4c3c      	ldr	r4, [pc, #240]	; (6f60 <__aeabi_ddiv+0x1f0>)
    6e70:	2600      	movs	r6, #0
    6e72:	1a24      	subs	r4, r4, r0
    6e74:	9303      	str	r3, [sp, #12]
    6e76:	e79f      	b.n	6db8 <__aeabi_ddiv+0x48>
    6e78:	4651      	mov	r1, sl
    6e7a:	465a      	mov	r2, fp
    6e7c:	4311      	orrs	r1, r2
    6e7e:	d129      	bne.n	6ed4 <__aeabi_ddiv+0x164>
    6e80:	2200      	movs	r2, #0
    6e82:	4693      	mov	fp, r2
    6e84:	3202      	adds	r2, #2
    6e86:	e7b1      	b.n	6dec <__aeabi_ddiv+0x7c>
    6e88:	4659      	mov	r1, fp
    6e8a:	4301      	orrs	r1, r0
    6e8c:	d01e      	beq.n	6ecc <__aeabi_ddiv+0x15c>
    6e8e:	465b      	mov	r3, fp
    6e90:	2b00      	cmp	r3, #0
    6e92:	d100      	bne.n	6e96 <__aeabi_ddiv+0x126>
    6e94:	e19e      	b.n	71d4 <__aeabi_ddiv+0x464>
    6e96:	4658      	mov	r0, fp
    6e98:	f001 f8a0 	bl	7fdc <__clzsi2>
    6e9c:	0003      	movs	r3, r0
    6e9e:	3b0b      	subs	r3, #11
    6ea0:	2b1c      	cmp	r3, #28
    6ea2:	dd00      	ble.n	6ea6 <__aeabi_ddiv+0x136>
    6ea4:	e18f      	b.n	71c6 <__aeabi_ddiv+0x456>
    6ea6:	0002      	movs	r2, r0
    6ea8:	4659      	mov	r1, fp
    6eaa:	3a08      	subs	r2, #8
    6eac:	4091      	lsls	r1, r2
    6eae:	468b      	mov	fp, r1
    6eb0:	211d      	movs	r1, #29
    6eb2:	1acb      	subs	r3, r1, r3
    6eb4:	4651      	mov	r1, sl
    6eb6:	40d9      	lsrs	r1, r3
    6eb8:	000b      	movs	r3, r1
    6eba:	4659      	mov	r1, fp
    6ebc:	430b      	orrs	r3, r1
    6ebe:	4651      	mov	r1, sl
    6ec0:	469b      	mov	fp, r3
    6ec2:	4091      	lsls	r1, r2
    6ec4:	4b26      	ldr	r3, [pc, #152]	; (6f60 <__aeabi_ddiv+0x1f0>)
    6ec6:	2200      	movs	r2, #0
    6ec8:	1a1b      	subs	r3, r3, r0
    6eca:	e78f      	b.n	6dec <__aeabi_ddiv+0x7c>
    6ecc:	2300      	movs	r3, #0
    6ece:	2201      	movs	r2, #1
    6ed0:	469b      	mov	fp, r3
    6ed2:	e78b      	b.n	6dec <__aeabi_ddiv+0x7c>
    6ed4:	4651      	mov	r1, sl
    6ed6:	2203      	movs	r2, #3
    6ed8:	e788      	b.n	6dec <__aeabi_ddiv+0x7c>
    6eda:	2300      	movs	r3, #0
    6edc:	4698      	mov	r8, r3
    6ede:	3301      	adds	r3, #1
    6ee0:	2604      	movs	r6, #4
    6ee2:	2400      	movs	r4, #0
    6ee4:	9303      	str	r3, [sp, #12]
    6ee6:	e767      	b.n	6db8 <__aeabi_ddiv+0x48>
    6ee8:	2303      	movs	r3, #3
    6eea:	46b1      	mov	r9, r6
    6eec:	9303      	str	r3, [sp, #12]
    6eee:	260c      	movs	r6, #12
    6ef0:	e762      	b.n	6db8 <__aeabi_ddiv+0x48>
    6ef2:	2a03      	cmp	r2, #3
    6ef4:	d100      	bne.n	6ef8 <__aeabi_ddiv+0x188>
    6ef6:	e25c      	b.n	73b2 <__aeabi_ddiv+0x642>
    6ef8:	9b01      	ldr	r3, [sp, #4]
    6efa:	2a01      	cmp	r2, #1
    6efc:	d000      	beq.n	6f00 <__aeabi_ddiv+0x190>
    6efe:	e1e4      	b.n	72ca <__aeabi_ddiv+0x55a>
    6f00:	4013      	ands	r3, r2
    6f02:	469c      	mov	ip, r3
    6f04:	2300      	movs	r3, #0
    6f06:	2400      	movs	r4, #0
    6f08:	2200      	movs	r2, #0
    6f0a:	4698      	mov	r8, r3
    6f0c:	2100      	movs	r1, #0
    6f0e:	0312      	lsls	r2, r2, #12
    6f10:	0b13      	lsrs	r3, r2, #12
    6f12:	0d0a      	lsrs	r2, r1, #20
    6f14:	0512      	lsls	r2, r2, #20
    6f16:	431a      	orrs	r2, r3
    6f18:	0523      	lsls	r3, r4, #20
    6f1a:	4c12      	ldr	r4, [pc, #72]	; (6f64 <__aeabi_ddiv+0x1f4>)
    6f1c:	4640      	mov	r0, r8
    6f1e:	4022      	ands	r2, r4
    6f20:	4313      	orrs	r3, r2
    6f22:	4662      	mov	r2, ip
    6f24:	005b      	lsls	r3, r3, #1
    6f26:	07d2      	lsls	r2, r2, #31
    6f28:	085b      	lsrs	r3, r3, #1
    6f2a:	4313      	orrs	r3, r2
    6f2c:	0019      	movs	r1, r3
    6f2e:	b007      	add	sp, #28
    6f30:	bc3c      	pop	{r2, r3, r4, r5}
    6f32:	4690      	mov	r8, r2
    6f34:	4699      	mov	r9, r3
    6f36:	46a2      	mov	sl, r4
    6f38:	46ab      	mov	fp, r5
    6f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f3c:	2300      	movs	r3, #0
    6f3e:	2280      	movs	r2, #128	; 0x80
    6f40:	469c      	mov	ip, r3
    6f42:	0312      	lsls	r2, r2, #12
    6f44:	4698      	mov	r8, r3
    6f46:	4c03      	ldr	r4, [pc, #12]	; (6f54 <__aeabi_ddiv+0x1e4>)
    6f48:	e7e0      	b.n	6f0c <__aeabi_ddiv+0x19c>
    6f4a:	2300      	movs	r3, #0
    6f4c:	4c01      	ldr	r4, [pc, #4]	; (6f54 <__aeabi_ddiv+0x1e4>)
    6f4e:	2200      	movs	r2, #0
    6f50:	4698      	mov	r8, r3
    6f52:	e7db      	b.n	6f0c <__aeabi_ddiv+0x19c>
    6f54:	000007ff 	.word	0x000007ff
    6f58:	fffffc01 	.word	0xfffffc01
    6f5c:	0000a620 	.word	0x0000a620
    6f60:	fffffc0d 	.word	0xfffffc0d
    6f64:	800fffff 	.word	0x800fffff
    6f68:	45d9      	cmp	r9, fp
    6f6a:	d900      	bls.n	6f6e <__aeabi_ddiv+0x1fe>
    6f6c:	e139      	b.n	71e2 <__aeabi_ddiv+0x472>
    6f6e:	d100      	bne.n	6f72 <__aeabi_ddiv+0x202>
    6f70:	e134      	b.n	71dc <__aeabi_ddiv+0x46c>
    6f72:	2300      	movs	r3, #0
    6f74:	4646      	mov	r6, r8
    6f76:	464d      	mov	r5, r9
    6f78:	469a      	mov	sl, r3
    6f7a:	3c01      	subs	r4, #1
    6f7c:	465b      	mov	r3, fp
    6f7e:	0e0a      	lsrs	r2, r1, #24
    6f80:	021b      	lsls	r3, r3, #8
    6f82:	431a      	orrs	r2, r3
    6f84:	020b      	lsls	r3, r1, #8
    6f86:	0c17      	lsrs	r7, r2, #16
    6f88:	9303      	str	r3, [sp, #12]
    6f8a:	0413      	lsls	r3, r2, #16
    6f8c:	0c1b      	lsrs	r3, r3, #16
    6f8e:	0039      	movs	r1, r7
    6f90:	0028      	movs	r0, r5
    6f92:	4690      	mov	r8, r2
    6f94:	9301      	str	r3, [sp, #4]
    6f96:	f7ff fa3b 	bl	6410 <__udivsi3>
    6f9a:	0002      	movs	r2, r0
    6f9c:	9b01      	ldr	r3, [sp, #4]
    6f9e:	4683      	mov	fp, r0
    6fa0:	435a      	muls	r2, r3
    6fa2:	0028      	movs	r0, r5
    6fa4:	0039      	movs	r1, r7
    6fa6:	4691      	mov	r9, r2
    6fa8:	f7ff fab8 	bl	651c <__aeabi_uidivmod>
    6fac:	0c35      	lsrs	r5, r6, #16
    6fae:	0409      	lsls	r1, r1, #16
    6fb0:	430d      	orrs	r5, r1
    6fb2:	45a9      	cmp	r9, r5
    6fb4:	d90d      	bls.n	6fd2 <__aeabi_ddiv+0x262>
    6fb6:	465b      	mov	r3, fp
    6fb8:	4445      	add	r5, r8
    6fba:	3b01      	subs	r3, #1
    6fbc:	45a8      	cmp	r8, r5
    6fbe:	d900      	bls.n	6fc2 <__aeabi_ddiv+0x252>
    6fc0:	e13a      	b.n	7238 <__aeabi_ddiv+0x4c8>
    6fc2:	45a9      	cmp	r9, r5
    6fc4:	d800      	bhi.n	6fc8 <__aeabi_ddiv+0x258>
    6fc6:	e137      	b.n	7238 <__aeabi_ddiv+0x4c8>
    6fc8:	2302      	movs	r3, #2
    6fca:	425b      	negs	r3, r3
    6fcc:	469c      	mov	ip, r3
    6fce:	4445      	add	r5, r8
    6fd0:	44e3      	add	fp, ip
    6fd2:	464b      	mov	r3, r9
    6fd4:	1aeb      	subs	r3, r5, r3
    6fd6:	0039      	movs	r1, r7
    6fd8:	0018      	movs	r0, r3
    6fda:	9304      	str	r3, [sp, #16]
    6fdc:	f7ff fa18 	bl	6410 <__udivsi3>
    6fe0:	9b01      	ldr	r3, [sp, #4]
    6fe2:	0005      	movs	r5, r0
    6fe4:	4343      	muls	r3, r0
    6fe6:	0039      	movs	r1, r7
    6fe8:	9804      	ldr	r0, [sp, #16]
    6fea:	4699      	mov	r9, r3
    6fec:	f7ff fa96 	bl	651c <__aeabi_uidivmod>
    6ff0:	0433      	lsls	r3, r6, #16
    6ff2:	0409      	lsls	r1, r1, #16
    6ff4:	0c1b      	lsrs	r3, r3, #16
    6ff6:	430b      	orrs	r3, r1
    6ff8:	4599      	cmp	r9, r3
    6ffa:	d909      	bls.n	7010 <__aeabi_ddiv+0x2a0>
    6ffc:	4443      	add	r3, r8
    6ffe:	1e6a      	subs	r2, r5, #1
    7000:	4598      	cmp	r8, r3
    7002:	d900      	bls.n	7006 <__aeabi_ddiv+0x296>
    7004:	e11a      	b.n	723c <__aeabi_ddiv+0x4cc>
    7006:	4599      	cmp	r9, r3
    7008:	d800      	bhi.n	700c <__aeabi_ddiv+0x29c>
    700a:	e117      	b.n	723c <__aeabi_ddiv+0x4cc>
    700c:	3d02      	subs	r5, #2
    700e:	4443      	add	r3, r8
    7010:	464a      	mov	r2, r9
    7012:	1a9b      	subs	r3, r3, r2
    7014:	465a      	mov	r2, fp
    7016:	0412      	lsls	r2, r2, #16
    7018:	432a      	orrs	r2, r5
    701a:	9903      	ldr	r1, [sp, #12]
    701c:	4693      	mov	fp, r2
    701e:	0c10      	lsrs	r0, r2, #16
    7020:	0c0a      	lsrs	r2, r1, #16
    7022:	4691      	mov	r9, r2
    7024:	0409      	lsls	r1, r1, #16
    7026:	465a      	mov	r2, fp
    7028:	0c09      	lsrs	r1, r1, #16
    702a:	464e      	mov	r6, r9
    702c:	000d      	movs	r5, r1
    702e:	0412      	lsls	r2, r2, #16
    7030:	0c12      	lsrs	r2, r2, #16
    7032:	4345      	muls	r5, r0
    7034:	9105      	str	r1, [sp, #20]
    7036:	4351      	muls	r1, r2
    7038:	4372      	muls	r2, r6
    703a:	4370      	muls	r0, r6
    703c:	1952      	adds	r2, r2, r5
    703e:	0c0e      	lsrs	r6, r1, #16
    7040:	18b2      	adds	r2, r6, r2
    7042:	4295      	cmp	r5, r2
    7044:	d903      	bls.n	704e <__aeabi_ddiv+0x2de>
    7046:	2580      	movs	r5, #128	; 0x80
    7048:	026d      	lsls	r5, r5, #9
    704a:	46ac      	mov	ip, r5
    704c:	4460      	add	r0, ip
    704e:	0c15      	lsrs	r5, r2, #16
    7050:	0409      	lsls	r1, r1, #16
    7052:	0412      	lsls	r2, r2, #16
    7054:	0c09      	lsrs	r1, r1, #16
    7056:	1828      	adds	r0, r5, r0
    7058:	1852      	adds	r2, r2, r1
    705a:	4283      	cmp	r3, r0
    705c:	d200      	bcs.n	7060 <__aeabi_ddiv+0x2f0>
    705e:	e0ce      	b.n	71fe <__aeabi_ddiv+0x48e>
    7060:	d100      	bne.n	7064 <__aeabi_ddiv+0x2f4>
    7062:	e0c8      	b.n	71f6 <__aeabi_ddiv+0x486>
    7064:	1a1d      	subs	r5, r3, r0
    7066:	4653      	mov	r3, sl
    7068:	1a9e      	subs	r6, r3, r2
    706a:	45b2      	cmp	sl, r6
    706c:	4192      	sbcs	r2, r2
    706e:	4252      	negs	r2, r2
    7070:	1aab      	subs	r3, r5, r2
    7072:	469a      	mov	sl, r3
    7074:	4598      	cmp	r8, r3
    7076:	d100      	bne.n	707a <__aeabi_ddiv+0x30a>
    7078:	e117      	b.n	72aa <__aeabi_ddiv+0x53a>
    707a:	0039      	movs	r1, r7
    707c:	0018      	movs	r0, r3
    707e:	f7ff f9c7 	bl	6410 <__udivsi3>
    7082:	9b01      	ldr	r3, [sp, #4]
    7084:	0005      	movs	r5, r0
    7086:	4343      	muls	r3, r0
    7088:	0039      	movs	r1, r7
    708a:	4650      	mov	r0, sl
    708c:	9304      	str	r3, [sp, #16]
    708e:	f7ff fa45 	bl	651c <__aeabi_uidivmod>
    7092:	9804      	ldr	r0, [sp, #16]
    7094:	040b      	lsls	r3, r1, #16
    7096:	0c31      	lsrs	r1, r6, #16
    7098:	4319      	orrs	r1, r3
    709a:	4288      	cmp	r0, r1
    709c:	d909      	bls.n	70b2 <__aeabi_ddiv+0x342>
    709e:	4441      	add	r1, r8
    70a0:	1e6b      	subs	r3, r5, #1
    70a2:	4588      	cmp	r8, r1
    70a4:	d900      	bls.n	70a8 <__aeabi_ddiv+0x338>
    70a6:	e107      	b.n	72b8 <__aeabi_ddiv+0x548>
    70a8:	4288      	cmp	r0, r1
    70aa:	d800      	bhi.n	70ae <__aeabi_ddiv+0x33e>
    70ac:	e104      	b.n	72b8 <__aeabi_ddiv+0x548>
    70ae:	3d02      	subs	r5, #2
    70b0:	4441      	add	r1, r8
    70b2:	9b04      	ldr	r3, [sp, #16]
    70b4:	1acb      	subs	r3, r1, r3
    70b6:	0018      	movs	r0, r3
    70b8:	0039      	movs	r1, r7
    70ba:	9304      	str	r3, [sp, #16]
    70bc:	f7ff f9a8 	bl	6410 <__udivsi3>
    70c0:	9b01      	ldr	r3, [sp, #4]
    70c2:	4682      	mov	sl, r0
    70c4:	4343      	muls	r3, r0
    70c6:	0039      	movs	r1, r7
    70c8:	9804      	ldr	r0, [sp, #16]
    70ca:	9301      	str	r3, [sp, #4]
    70cc:	f7ff fa26 	bl	651c <__aeabi_uidivmod>
    70d0:	9801      	ldr	r0, [sp, #4]
    70d2:	040b      	lsls	r3, r1, #16
    70d4:	0431      	lsls	r1, r6, #16
    70d6:	0c09      	lsrs	r1, r1, #16
    70d8:	4319      	orrs	r1, r3
    70da:	4288      	cmp	r0, r1
    70dc:	d90d      	bls.n	70fa <__aeabi_ddiv+0x38a>
    70de:	4653      	mov	r3, sl
    70e0:	4441      	add	r1, r8
    70e2:	3b01      	subs	r3, #1
    70e4:	4588      	cmp	r8, r1
    70e6:	d900      	bls.n	70ea <__aeabi_ddiv+0x37a>
    70e8:	e0e8      	b.n	72bc <__aeabi_ddiv+0x54c>
    70ea:	4288      	cmp	r0, r1
    70ec:	d800      	bhi.n	70f0 <__aeabi_ddiv+0x380>
    70ee:	e0e5      	b.n	72bc <__aeabi_ddiv+0x54c>
    70f0:	2302      	movs	r3, #2
    70f2:	425b      	negs	r3, r3
    70f4:	469c      	mov	ip, r3
    70f6:	4441      	add	r1, r8
    70f8:	44e2      	add	sl, ip
    70fa:	9b01      	ldr	r3, [sp, #4]
    70fc:	042d      	lsls	r5, r5, #16
    70fe:	1ace      	subs	r6, r1, r3
    7100:	4651      	mov	r1, sl
    7102:	4329      	orrs	r1, r5
    7104:	9d05      	ldr	r5, [sp, #20]
    7106:	464f      	mov	r7, r9
    7108:	002a      	movs	r2, r5
    710a:	040b      	lsls	r3, r1, #16
    710c:	0c08      	lsrs	r0, r1, #16
    710e:	0c1b      	lsrs	r3, r3, #16
    7110:	435a      	muls	r2, r3
    7112:	4345      	muls	r5, r0
    7114:	437b      	muls	r3, r7
    7116:	4378      	muls	r0, r7
    7118:	195b      	adds	r3, r3, r5
    711a:	0c17      	lsrs	r7, r2, #16
    711c:	18fb      	adds	r3, r7, r3
    711e:	429d      	cmp	r5, r3
    7120:	d903      	bls.n	712a <__aeabi_ddiv+0x3ba>
    7122:	2580      	movs	r5, #128	; 0x80
    7124:	026d      	lsls	r5, r5, #9
    7126:	46ac      	mov	ip, r5
    7128:	4460      	add	r0, ip
    712a:	0c1d      	lsrs	r5, r3, #16
    712c:	0412      	lsls	r2, r2, #16
    712e:	041b      	lsls	r3, r3, #16
    7130:	0c12      	lsrs	r2, r2, #16
    7132:	1828      	adds	r0, r5, r0
    7134:	189b      	adds	r3, r3, r2
    7136:	4286      	cmp	r6, r0
    7138:	d200      	bcs.n	713c <__aeabi_ddiv+0x3cc>
    713a:	e093      	b.n	7264 <__aeabi_ddiv+0x4f4>
    713c:	d100      	bne.n	7140 <__aeabi_ddiv+0x3d0>
    713e:	e08e      	b.n	725e <__aeabi_ddiv+0x4ee>
    7140:	2301      	movs	r3, #1
    7142:	4319      	orrs	r1, r3
    7144:	4ba0      	ldr	r3, [pc, #640]	; (73c8 <__aeabi_ddiv+0x658>)
    7146:	18e3      	adds	r3, r4, r3
    7148:	2b00      	cmp	r3, #0
    714a:	dc00      	bgt.n	714e <__aeabi_ddiv+0x3de>
    714c:	e099      	b.n	7282 <__aeabi_ddiv+0x512>
    714e:	074a      	lsls	r2, r1, #29
    7150:	d000      	beq.n	7154 <__aeabi_ddiv+0x3e4>
    7152:	e09e      	b.n	7292 <__aeabi_ddiv+0x522>
    7154:	465a      	mov	r2, fp
    7156:	01d2      	lsls	r2, r2, #7
    7158:	d506      	bpl.n	7168 <__aeabi_ddiv+0x3f8>
    715a:	465a      	mov	r2, fp
    715c:	4b9b      	ldr	r3, [pc, #620]	; (73cc <__aeabi_ddiv+0x65c>)
    715e:	401a      	ands	r2, r3
    7160:	2380      	movs	r3, #128	; 0x80
    7162:	4693      	mov	fp, r2
    7164:	00db      	lsls	r3, r3, #3
    7166:	18e3      	adds	r3, r4, r3
    7168:	4a99      	ldr	r2, [pc, #612]	; (73d0 <__aeabi_ddiv+0x660>)
    716a:	4293      	cmp	r3, r2
    716c:	dd68      	ble.n	7240 <__aeabi_ddiv+0x4d0>
    716e:	2301      	movs	r3, #1
    7170:	9a02      	ldr	r2, [sp, #8]
    7172:	4c98      	ldr	r4, [pc, #608]	; (73d4 <__aeabi_ddiv+0x664>)
    7174:	401a      	ands	r2, r3
    7176:	2300      	movs	r3, #0
    7178:	4694      	mov	ip, r2
    717a:	4698      	mov	r8, r3
    717c:	2200      	movs	r2, #0
    717e:	e6c5      	b.n	6f0c <__aeabi_ddiv+0x19c>
    7180:	2280      	movs	r2, #128	; 0x80
    7182:	464b      	mov	r3, r9
    7184:	0312      	lsls	r2, r2, #12
    7186:	4213      	tst	r3, r2
    7188:	d00a      	beq.n	71a0 <__aeabi_ddiv+0x430>
    718a:	465b      	mov	r3, fp
    718c:	4213      	tst	r3, r2
    718e:	d106      	bne.n	719e <__aeabi_ddiv+0x42e>
    7190:	431a      	orrs	r2, r3
    7192:	0312      	lsls	r2, r2, #12
    7194:	0b12      	lsrs	r2, r2, #12
    7196:	46ac      	mov	ip, r5
    7198:	4688      	mov	r8, r1
    719a:	4c8e      	ldr	r4, [pc, #568]	; (73d4 <__aeabi_ddiv+0x664>)
    719c:	e6b6      	b.n	6f0c <__aeabi_ddiv+0x19c>
    719e:	464b      	mov	r3, r9
    71a0:	431a      	orrs	r2, r3
    71a2:	0312      	lsls	r2, r2, #12
    71a4:	0b12      	lsrs	r2, r2, #12
    71a6:	46bc      	mov	ip, r7
    71a8:	4c8a      	ldr	r4, [pc, #552]	; (73d4 <__aeabi_ddiv+0x664>)
    71aa:	e6af      	b.n	6f0c <__aeabi_ddiv+0x19c>
    71ac:	0003      	movs	r3, r0
    71ae:	465a      	mov	r2, fp
    71b0:	3b28      	subs	r3, #40	; 0x28
    71b2:	409a      	lsls	r2, r3
    71b4:	2300      	movs	r3, #0
    71b6:	4691      	mov	r9, r2
    71b8:	4698      	mov	r8, r3
    71ba:	e657      	b.n	6e6c <__aeabi_ddiv+0xfc>
    71bc:	4658      	mov	r0, fp
    71be:	f000 ff0d 	bl	7fdc <__clzsi2>
    71c2:	3020      	adds	r0, #32
    71c4:	e640      	b.n	6e48 <__aeabi_ddiv+0xd8>
    71c6:	0003      	movs	r3, r0
    71c8:	4652      	mov	r2, sl
    71ca:	3b28      	subs	r3, #40	; 0x28
    71cc:	409a      	lsls	r2, r3
    71ce:	2100      	movs	r1, #0
    71d0:	4693      	mov	fp, r2
    71d2:	e677      	b.n	6ec4 <__aeabi_ddiv+0x154>
    71d4:	f000 ff02 	bl	7fdc <__clzsi2>
    71d8:	3020      	adds	r0, #32
    71da:	e65f      	b.n	6e9c <__aeabi_ddiv+0x12c>
    71dc:	4588      	cmp	r8, r1
    71de:	d200      	bcs.n	71e2 <__aeabi_ddiv+0x472>
    71e0:	e6c7      	b.n	6f72 <__aeabi_ddiv+0x202>
    71e2:	464b      	mov	r3, r9
    71e4:	07de      	lsls	r6, r3, #31
    71e6:	085d      	lsrs	r5, r3, #1
    71e8:	4643      	mov	r3, r8
    71ea:	085b      	lsrs	r3, r3, #1
    71ec:	431e      	orrs	r6, r3
    71ee:	4643      	mov	r3, r8
    71f0:	07db      	lsls	r3, r3, #31
    71f2:	469a      	mov	sl, r3
    71f4:	e6c2      	b.n	6f7c <__aeabi_ddiv+0x20c>
    71f6:	2500      	movs	r5, #0
    71f8:	4592      	cmp	sl, r2
    71fa:	d300      	bcc.n	71fe <__aeabi_ddiv+0x48e>
    71fc:	e733      	b.n	7066 <__aeabi_ddiv+0x2f6>
    71fe:	9e03      	ldr	r6, [sp, #12]
    7200:	4659      	mov	r1, fp
    7202:	46b4      	mov	ip, r6
    7204:	44e2      	add	sl, ip
    7206:	45b2      	cmp	sl, r6
    7208:	41ad      	sbcs	r5, r5
    720a:	426d      	negs	r5, r5
    720c:	4445      	add	r5, r8
    720e:	18eb      	adds	r3, r5, r3
    7210:	3901      	subs	r1, #1
    7212:	4598      	cmp	r8, r3
    7214:	d207      	bcs.n	7226 <__aeabi_ddiv+0x4b6>
    7216:	4298      	cmp	r0, r3
    7218:	d900      	bls.n	721c <__aeabi_ddiv+0x4ac>
    721a:	e07f      	b.n	731c <__aeabi_ddiv+0x5ac>
    721c:	d100      	bne.n	7220 <__aeabi_ddiv+0x4b0>
    721e:	e0bc      	b.n	739a <__aeabi_ddiv+0x62a>
    7220:	1a1d      	subs	r5, r3, r0
    7222:	468b      	mov	fp, r1
    7224:	e71f      	b.n	7066 <__aeabi_ddiv+0x2f6>
    7226:	4598      	cmp	r8, r3
    7228:	d1fa      	bne.n	7220 <__aeabi_ddiv+0x4b0>
    722a:	9d03      	ldr	r5, [sp, #12]
    722c:	4555      	cmp	r5, sl
    722e:	d9f2      	bls.n	7216 <__aeabi_ddiv+0x4a6>
    7230:	4643      	mov	r3, r8
    7232:	468b      	mov	fp, r1
    7234:	1a1d      	subs	r5, r3, r0
    7236:	e716      	b.n	7066 <__aeabi_ddiv+0x2f6>
    7238:	469b      	mov	fp, r3
    723a:	e6ca      	b.n	6fd2 <__aeabi_ddiv+0x262>
    723c:	0015      	movs	r5, r2
    723e:	e6e7      	b.n	7010 <__aeabi_ddiv+0x2a0>
    7240:	465a      	mov	r2, fp
    7242:	08c9      	lsrs	r1, r1, #3
    7244:	0752      	lsls	r2, r2, #29
    7246:	430a      	orrs	r2, r1
    7248:	055b      	lsls	r3, r3, #21
    724a:	4690      	mov	r8, r2
    724c:	0d5c      	lsrs	r4, r3, #21
    724e:	465a      	mov	r2, fp
    7250:	2301      	movs	r3, #1
    7252:	9902      	ldr	r1, [sp, #8]
    7254:	0252      	lsls	r2, r2, #9
    7256:	4019      	ands	r1, r3
    7258:	0b12      	lsrs	r2, r2, #12
    725a:	468c      	mov	ip, r1
    725c:	e656      	b.n	6f0c <__aeabi_ddiv+0x19c>
    725e:	2b00      	cmp	r3, #0
    7260:	d100      	bne.n	7264 <__aeabi_ddiv+0x4f4>
    7262:	e76f      	b.n	7144 <__aeabi_ddiv+0x3d4>
    7264:	4446      	add	r6, r8
    7266:	1e4a      	subs	r2, r1, #1
    7268:	45b0      	cmp	r8, r6
    726a:	d929      	bls.n	72c0 <__aeabi_ddiv+0x550>
    726c:	0011      	movs	r1, r2
    726e:	4286      	cmp	r6, r0
    7270:	d000      	beq.n	7274 <__aeabi_ddiv+0x504>
    7272:	e765      	b.n	7140 <__aeabi_ddiv+0x3d0>
    7274:	9a03      	ldr	r2, [sp, #12]
    7276:	4293      	cmp	r3, r2
    7278:	d000      	beq.n	727c <__aeabi_ddiv+0x50c>
    727a:	e761      	b.n	7140 <__aeabi_ddiv+0x3d0>
    727c:	e762      	b.n	7144 <__aeabi_ddiv+0x3d4>
    727e:	2101      	movs	r1, #1
    7280:	4249      	negs	r1, r1
    7282:	2001      	movs	r0, #1
    7284:	1ac2      	subs	r2, r0, r3
    7286:	2a38      	cmp	r2, #56	; 0x38
    7288:	dd21      	ble.n	72ce <__aeabi_ddiv+0x55e>
    728a:	9b02      	ldr	r3, [sp, #8]
    728c:	4003      	ands	r3, r0
    728e:	469c      	mov	ip, r3
    7290:	e638      	b.n	6f04 <__aeabi_ddiv+0x194>
    7292:	220f      	movs	r2, #15
    7294:	400a      	ands	r2, r1
    7296:	2a04      	cmp	r2, #4
    7298:	d100      	bne.n	729c <__aeabi_ddiv+0x52c>
    729a:	e75b      	b.n	7154 <__aeabi_ddiv+0x3e4>
    729c:	000a      	movs	r2, r1
    729e:	1d11      	adds	r1, r2, #4
    72a0:	4291      	cmp	r1, r2
    72a2:	4192      	sbcs	r2, r2
    72a4:	4252      	negs	r2, r2
    72a6:	4493      	add	fp, r2
    72a8:	e754      	b.n	7154 <__aeabi_ddiv+0x3e4>
    72aa:	4b47      	ldr	r3, [pc, #284]	; (73c8 <__aeabi_ddiv+0x658>)
    72ac:	18e3      	adds	r3, r4, r3
    72ae:	2b00      	cmp	r3, #0
    72b0:	dde5      	ble.n	727e <__aeabi_ddiv+0x50e>
    72b2:	2201      	movs	r2, #1
    72b4:	4252      	negs	r2, r2
    72b6:	e7f2      	b.n	729e <__aeabi_ddiv+0x52e>
    72b8:	001d      	movs	r5, r3
    72ba:	e6fa      	b.n	70b2 <__aeabi_ddiv+0x342>
    72bc:	469a      	mov	sl, r3
    72be:	e71c      	b.n	70fa <__aeabi_ddiv+0x38a>
    72c0:	42b0      	cmp	r0, r6
    72c2:	d839      	bhi.n	7338 <__aeabi_ddiv+0x5c8>
    72c4:	d06e      	beq.n	73a4 <__aeabi_ddiv+0x634>
    72c6:	0011      	movs	r1, r2
    72c8:	e73a      	b.n	7140 <__aeabi_ddiv+0x3d0>
    72ca:	9302      	str	r3, [sp, #8]
    72cc:	e73a      	b.n	7144 <__aeabi_ddiv+0x3d4>
    72ce:	2a1f      	cmp	r2, #31
    72d0:	dc3c      	bgt.n	734c <__aeabi_ddiv+0x5dc>
    72d2:	2320      	movs	r3, #32
    72d4:	1a9b      	subs	r3, r3, r2
    72d6:	000c      	movs	r4, r1
    72d8:	4658      	mov	r0, fp
    72da:	4099      	lsls	r1, r3
    72dc:	4098      	lsls	r0, r3
    72de:	1e4b      	subs	r3, r1, #1
    72e0:	4199      	sbcs	r1, r3
    72e2:	465b      	mov	r3, fp
    72e4:	40d4      	lsrs	r4, r2
    72e6:	40d3      	lsrs	r3, r2
    72e8:	4320      	orrs	r0, r4
    72ea:	4308      	orrs	r0, r1
    72ec:	001a      	movs	r2, r3
    72ee:	0743      	lsls	r3, r0, #29
    72f0:	d009      	beq.n	7306 <__aeabi_ddiv+0x596>
    72f2:	230f      	movs	r3, #15
    72f4:	4003      	ands	r3, r0
    72f6:	2b04      	cmp	r3, #4
    72f8:	d005      	beq.n	7306 <__aeabi_ddiv+0x596>
    72fa:	0001      	movs	r1, r0
    72fc:	1d08      	adds	r0, r1, #4
    72fe:	4288      	cmp	r0, r1
    7300:	419b      	sbcs	r3, r3
    7302:	425b      	negs	r3, r3
    7304:	18d2      	adds	r2, r2, r3
    7306:	0213      	lsls	r3, r2, #8
    7308:	d53a      	bpl.n	7380 <__aeabi_ddiv+0x610>
    730a:	2301      	movs	r3, #1
    730c:	9a02      	ldr	r2, [sp, #8]
    730e:	2401      	movs	r4, #1
    7310:	401a      	ands	r2, r3
    7312:	2300      	movs	r3, #0
    7314:	4694      	mov	ip, r2
    7316:	4698      	mov	r8, r3
    7318:	2200      	movs	r2, #0
    731a:	e5f7      	b.n	6f0c <__aeabi_ddiv+0x19c>
    731c:	2102      	movs	r1, #2
    731e:	4249      	negs	r1, r1
    7320:	468c      	mov	ip, r1
    7322:	9d03      	ldr	r5, [sp, #12]
    7324:	44e3      	add	fp, ip
    7326:	46ac      	mov	ip, r5
    7328:	44e2      	add	sl, ip
    732a:	45aa      	cmp	sl, r5
    732c:	41ad      	sbcs	r5, r5
    732e:	426d      	negs	r5, r5
    7330:	4445      	add	r5, r8
    7332:	18ed      	adds	r5, r5, r3
    7334:	1a2d      	subs	r5, r5, r0
    7336:	e696      	b.n	7066 <__aeabi_ddiv+0x2f6>
    7338:	1e8a      	subs	r2, r1, #2
    733a:	9903      	ldr	r1, [sp, #12]
    733c:	004d      	lsls	r5, r1, #1
    733e:	428d      	cmp	r5, r1
    7340:	4189      	sbcs	r1, r1
    7342:	4249      	negs	r1, r1
    7344:	4441      	add	r1, r8
    7346:	1876      	adds	r6, r6, r1
    7348:	9503      	str	r5, [sp, #12]
    734a:	e78f      	b.n	726c <__aeabi_ddiv+0x4fc>
    734c:	201f      	movs	r0, #31
    734e:	4240      	negs	r0, r0
    7350:	1ac3      	subs	r3, r0, r3
    7352:	4658      	mov	r0, fp
    7354:	40d8      	lsrs	r0, r3
    7356:	0003      	movs	r3, r0
    7358:	2a20      	cmp	r2, #32
    735a:	d028      	beq.n	73ae <__aeabi_ddiv+0x63e>
    735c:	2040      	movs	r0, #64	; 0x40
    735e:	465d      	mov	r5, fp
    7360:	1a82      	subs	r2, r0, r2
    7362:	4095      	lsls	r5, r2
    7364:	4329      	orrs	r1, r5
    7366:	1e4a      	subs	r2, r1, #1
    7368:	4191      	sbcs	r1, r2
    736a:	4319      	orrs	r1, r3
    736c:	2307      	movs	r3, #7
    736e:	2200      	movs	r2, #0
    7370:	400b      	ands	r3, r1
    7372:	d009      	beq.n	7388 <__aeabi_ddiv+0x618>
    7374:	230f      	movs	r3, #15
    7376:	2200      	movs	r2, #0
    7378:	400b      	ands	r3, r1
    737a:	0008      	movs	r0, r1
    737c:	2b04      	cmp	r3, #4
    737e:	d1bd      	bne.n	72fc <__aeabi_ddiv+0x58c>
    7380:	0001      	movs	r1, r0
    7382:	0753      	lsls	r3, r2, #29
    7384:	0252      	lsls	r2, r2, #9
    7386:	0b12      	lsrs	r2, r2, #12
    7388:	08c9      	lsrs	r1, r1, #3
    738a:	4319      	orrs	r1, r3
    738c:	2301      	movs	r3, #1
    738e:	4688      	mov	r8, r1
    7390:	9902      	ldr	r1, [sp, #8]
    7392:	2400      	movs	r4, #0
    7394:	4019      	ands	r1, r3
    7396:	468c      	mov	ip, r1
    7398:	e5b8      	b.n	6f0c <__aeabi_ddiv+0x19c>
    739a:	4552      	cmp	r2, sl
    739c:	d8be      	bhi.n	731c <__aeabi_ddiv+0x5ac>
    739e:	468b      	mov	fp, r1
    73a0:	2500      	movs	r5, #0
    73a2:	e660      	b.n	7066 <__aeabi_ddiv+0x2f6>
    73a4:	9d03      	ldr	r5, [sp, #12]
    73a6:	429d      	cmp	r5, r3
    73a8:	d3c6      	bcc.n	7338 <__aeabi_ddiv+0x5c8>
    73aa:	0011      	movs	r1, r2
    73ac:	e762      	b.n	7274 <__aeabi_ddiv+0x504>
    73ae:	2500      	movs	r5, #0
    73b0:	e7d8      	b.n	7364 <__aeabi_ddiv+0x5f4>
    73b2:	2280      	movs	r2, #128	; 0x80
    73b4:	465b      	mov	r3, fp
    73b6:	0312      	lsls	r2, r2, #12
    73b8:	431a      	orrs	r2, r3
    73ba:	9b01      	ldr	r3, [sp, #4]
    73bc:	0312      	lsls	r2, r2, #12
    73be:	0b12      	lsrs	r2, r2, #12
    73c0:	469c      	mov	ip, r3
    73c2:	4688      	mov	r8, r1
    73c4:	4c03      	ldr	r4, [pc, #12]	; (73d4 <__aeabi_ddiv+0x664>)
    73c6:	e5a1      	b.n	6f0c <__aeabi_ddiv+0x19c>
    73c8:	000003ff 	.word	0x000003ff
    73cc:	feffffff 	.word	0xfeffffff
    73d0:	000007fe 	.word	0x000007fe
    73d4:	000007ff 	.word	0x000007ff

000073d8 <__aeabi_dmul>:
    73d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    73da:	4657      	mov	r7, sl
    73dc:	4645      	mov	r5, r8
    73de:	46de      	mov	lr, fp
    73e0:	464e      	mov	r6, r9
    73e2:	b5e0      	push	{r5, r6, r7, lr}
    73e4:	030c      	lsls	r4, r1, #12
    73e6:	4698      	mov	r8, r3
    73e8:	004e      	lsls	r6, r1, #1
    73ea:	0b23      	lsrs	r3, r4, #12
    73ec:	b087      	sub	sp, #28
    73ee:	0007      	movs	r7, r0
    73f0:	4692      	mov	sl, r2
    73f2:	469b      	mov	fp, r3
    73f4:	0d76      	lsrs	r6, r6, #21
    73f6:	0fcd      	lsrs	r5, r1, #31
    73f8:	2e00      	cmp	r6, #0
    73fa:	d06b      	beq.n	74d4 <__aeabi_dmul+0xfc>
    73fc:	4b6d      	ldr	r3, [pc, #436]	; (75b4 <__aeabi_dmul+0x1dc>)
    73fe:	429e      	cmp	r6, r3
    7400:	d035      	beq.n	746e <__aeabi_dmul+0x96>
    7402:	2480      	movs	r4, #128	; 0x80
    7404:	465b      	mov	r3, fp
    7406:	0f42      	lsrs	r2, r0, #29
    7408:	0424      	lsls	r4, r4, #16
    740a:	00db      	lsls	r3, r3, #3
    740c:	4314      	orrs	r4, r2
    740e:	431c      	orrs	r4, r3
    7410:	00c3      	lsls	r3, r0, #3
    7412:	4699      	mov	r9, r3
    7414:	4b68      	ldr	r3, [pc, #416]	; (75b8 <__aeabi_dmul+0x1e0>)
    7416:	46a3      	mov	fp, r4
    7418:	469c      	mov	ip, r3
    741a:	2300      	movs	r3, #0
    741c:	2700      	movs	r7, #0
    741e:	4466      	add	r6, ip
    7420:	9302      	str	r3, [sp, #8]
    7422:	4643      	mov	r3, r8
    7424:	031c      	lsls	r4, r3, #12
    7426:	005a      	lsls	r2, r3, #1
    7428:	0fdb      	lsrs	r3, r3, #31
    742a:	4650      	mov	r0, sl
    742c:	0b24      	lsrs	r4, r4, #12
    742e:	0d52      	lsrs	r2, r2, #21
    7430:	4698      	mov	r8, r3
    7432:	d100      	bne.n	7436 <__aeabi_dmul+0x5e>
    7434:	e076      	b.n	7524 <__aeabi_dmul+0x14c>
    7436:	4b5f      	ldr	r3, [pc, #380]	; (75b4 <__aeabi_dmul+0x1dc>)
    7438:	429a      	cmp	r2, r3
    743a:	d06d      	beq.n	7518 <__aeabi_dmul+0x140>
    743c:	2380      	movs	r3, #128	; 0x80
    743e:	0f41      	lsrs	r1, r0, #29
    7440:	041b      	lsls	r3, r3, #16
    7442:	430b      	orrs	r3, r1
    7444:	495c      	ldr	r1, [pc, #368]	; (75b8 <__aeabi_dmul+0x1e0>)
    7446:	00e4      	lsls	r4, r4, #3
    7448:	468c      	mov	ip, r1
    744a:	431c      	orrs	r4, r3
    744c:	00c3      	lsls	r3, r0, #3
    744e:	2000      	movs	r0, #0
    7450:	4462      	add	r2, ip
    7452:	4641      	mov	r1, r8
    7454:	18b6      	adds	r6, r6, r2
    7456:	4069      	eors	r1, r5
    7458:	1c72      	adds	r2, r6, #1
    745a:	9101      	str	r1, [sp, #4]
    745c:	4694      	mov	ip, r2
    745e:	4307      	orrs	r7, r0
    7460:	2f0f      	cmp	r7, #15
    7462:	d900      	bls.n	7466 <__aeabi_dmul+0x8e>
    7464:	e0b0      	b.n	75c8 <__aeabi_dmul+0x1f0>
    7466:	4a55      	ldr	r2, [pc, #340]	; (75bc <__aeabi_dmul+0x1e4>)
    7468:	00bf      	lsls	r7, r7, #2
    746a:	59d2      	ldr	r2, [r2, r7]
    746c:	4697      	mov	pc, r2
    746e:	465b      	mov	r3, fp
    7470:	4303      	orrs	r3, r0
    7472:	4699      	mov	r9, r3
    7474:	d000      	beq.n	7478 <__aeabi_dmul+0xa0>
    7476:	e087      	b.n	7588 <__aeabi_dmul+0x1b0>
    7478:	2300      	movs	r3, #0
    747a:	469b      	mov	fp, r3
    747c:	3302      	adds	r3, #2
    747e:	2708      	movs	r7, #8
    7480:	9302      	str	r3, [sp, #8]
    7482:	e7ce      	b.n	7422 <__aeabi_dmul+0x4a>
    7484:	4642      	mov	r2, r8
    7486:	9201      	str	r2, [sp, #4]
    7488:	2802      	cmp	r0, #2
    748a:	d067      	beq.n	755c <__aeabi_dmul+0x184>
    748c:	2803      	cmp	r0, #3
    748e:	d100      	bne.n	7492 <__aeabi_dmul+0xba>
    7490:	e20e      	b.n	78b0 <__aeabi_dmul+0x4d8>
    7492:	2801      	cmp	r0, #1
    7494:	d000      	beq.n	7498 <__aeabi_dmul+0xc0>
    7496:	e162      	b.n	775e <__aeabi_dmul+0x386>
    7498:	2300      	movs	r3, #0
    749a:	2400      	movs	r4, #0
    749c:	2200      	movs	r2, #0
    749e:	4699      	mov	r9, r3
    74a0:	9901      	ldr	r1, [sp, #4]
    74a2:	4001      	ands	r1, r0
    74a4:	b2cd      	uxtb	r5, r1
    74a6:	2100      	movs	r1, #0
    74a8:	0312      	lsls	r2, r2, #12
    74aa:	0d0b      	lsrs	r3, r1, #20
    74ac:	0b12      	lsrs	r2, r2, #12
    74ae:	051b      	lsls	r3, r3, #20
    74b0:	4313      	orrs	r3, r2
    74b2:	4a43      	ldr	r2, [pc, #268]	; (75c0 <__aeabi_dmul+0x1e8>)
    74b4:	0524      	lsls	r4, r4, #20
    74b6:	4013      	ands	r3, r2
    74b8:	431c      	orrs	r4, r3
    74ba:	0064      	lsls	r4, r4, #1
    74bc:	07ed      	lsls	r5, r5, #31
    74be:	0864      	lsrs	r4, r4, #1
    74c0:	432c      	orrs	r4, r5
    74c2:	4648      	mov	r0, r9
    74c4:	0021      	movs	r1, r4
    74c6:	b007      	add	sp, #28
    74c8:	bc3c      	pop	{r2, r3, r4, r5}
    74ca:	4690      	mov	r8, r2
    74cc:	4699      	mov	r9, r3
    74ce:	46a2      	mov	sl, r4
    74d0:	46ab      	mov	fp, r5
    74d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74d4:	4303      	orrs	r3, r0
    74d6:	4699      	mov	r9, r3
    74d8:	d04f      	beq.n	757a <__aeabi_dmul+0x1a2>
    74da:	465b      	mov	r3, fp
    74dc:	2b00      	cmp	r3, #0
    74de:	d100      	bne.n	74e2 <__aeabi_dmul+0x10a>
    74e0:	e189      	b.n	77f6 <__aeabi_dmul+0x41e>
    74e2:	4658      	mov	r0, fp
    74e4:	f000 fd7a 	bl	7fdc <__clzsi2>
    74e8:	0003      	movs	r3, r0
    74ea:	3b0b      	subs	r3, #11
    74ec:	2b1c      	cmp	r3, #28
    74ee:	dd00      	ble.n	74f2 <__aeabi_dmul+0x11a>
    74f0:	e17a      	b.n	77e8 <__aeabi_dmul+0x410>
    74f2:	221d      	movs	r2, #29
    74f4:	1ad3      	subs	r3, r2, r3
    74f6:	003a      	movs	r2, r7
    74f8:	0001      	movs	r1, r0
    74fa:	465c      	mov	r4, fp
    74fc:	40da      	lsrs	r2, r3
    74fe:	3908      	subs	r1, #8
    7500:	408c      	lsls	r4, r1
    7502:	0013      	movs	r3, r2
    7504:	408f      	lsls	r7, r1
    7506:	4323      	orrs	r3, r4
    7508:	469b      	mov	fp, r3
    750a:	46b9      	mov	r9, r7
    750c:	2300      	movs	r3, #0
    750e:	4e2d      	ldr	r6, [pc, #180]	; (75c4 <__aeabi_dmul+0x1ec>)
    7510:	2700      	movs	r7, #0
    7512:	1a36      	subs	r6, r6, r0
    7514:	9302      	str	r3, [sp, #8]
    7516:	e784      	b.n	7422 <__aeabi_dmul+0x4a>
    7518:	4653      	mov	r3, sl
    751a:	4323      	orrs	r3, r4
    751c:	d12a      	bne.n	7574 <__aeabi_dmul+0x19c>
    751e:	2400      	movs	r4, #0
    7520:	2002      	movs	r0, #2
    7522:	e796      	b.n	7452 <__aeabi_dmul+0x7a>
    7524:	4653      	mov	r3, sl
    7526:	4323      	orrs	r3, r4
    7528:	d020      	beq.n	756c <__aeabi_dmul+0x194>
    752a:	2c00      	cmp	r4, #0
    752c:	d100      	bne.n	7530 <__aeabi_dmul+0x158>
    752e:	e157      	b.n	77e0 <__aeabi_dmul+0x408>
    7530:	0020      	movs	r0, r4
    7532:	f000 fd53 	bl	7fdc <__clzsi2>
    7536:	0003      	movs	r3, r0
    7538:	3b0b      	subs	r3, #11
    753a:	2b1c      	cmp	r3, #28
    753c:	dd00      	ble.n	7540 <__aeabi_dmul+0x168>
    753e:	e149      	b.n	77d4 <__aeabi_dmul+0x3fc>
    7540:	211d      	movs	r1, #29
    7542:	1acb      	subs	r3, r1, r3
    7544:	4651      	mov	r1, sl
    7546:	0002      	movs	r2, r0
    7548:	40d9      	lsrs	r1, r3
    754a:	4653      	mov	r3, sl
    754c:	3a08      	subs	r2, #8
    754e:	4094      	lsls	r4, r2
    7550:	4093      	lsls	r3, r2
    7552:	430c      	orrs	r4, r1
    7554:	4a1b      	ldr	r2, [pc, #108]	; (75c4 <__aeabi_dmul+0x1ec>)
    7556:	1a12      	subs	r2, r2, r0
    7558:	2000      	movs	r0, #0
    755a:	e77a      	b.n	7452 <__aeabi_dmul+0x7a>
    755c:	2501      	movs	r5, #1
    755e:	9b01      	ldr	r3, [sp, #4]
    7560:	4c14      	ldr	r4, [pc, #80]	; (75b4 <__aeabi_dmul+0x1dc>)
    7562:	401d      	ands	r5, r3
    7564:	2300      	movs	r3, #0
    7566:	2200      	movs	r2, #0
    7568:	4699      	mov	r9, r3
    756a:	e79c      	b.n	74a6 <__aeabi_dmul+0xce>
    756c:	2400      	movs	r4, #0
    756e:	2200      	movs	r2, #0
    7570:	2001      	movs	r0, #1
    7572:	e76e      	b.n	7452 <__aeabi_dmul+0x7a>
    7574:	4653      	mov	r3, sl
    7576:	2003      	movs	r0, #3
    7578:	e76b      	b.n	7452 <__aeabi_dmul+0x7a>
    757a:	2300      	movs	r3, #0
    757c:	469b      	mov	fp, r3
    757e:	3301      	adds	r3, #1
    7580:	2704      	movs	r7, #4
    7582:	2600      	movs	r6, #0
    7584:	9302      	str	r3, [sp, #8]
    7586:	e74c      	b.n	7422 <__aeabi_dmul+0x4a>
    7588:	2303      	movs	r3, #3
    758a:	4681      	mov	r9, r0
    758c:	270c      	movs	r7, #12
    758e:	9302      	str	r3, [sp, #8]
    7590:	e747      	b.n	7422 <__aeabi_dmul+0x4a>
    7592:	2280      	movs	r2, #128	; 0x80
    7594:	2300      	movs	r3, #0
    7596:	2500      	movs	r5, #0
    7598:	0312      	lsls	r2, r2, #12
    759a:	4699      	mov	r9, r3
    759c:	4c05      	ldr	r4, [pc, #20]	; (75b4 <__aeabi_dmul+0x1dc>)
    759e:	e782      	b.n	74a6 <__aeabi_dmul+0xce>
    75a0:	465c      	mov	r4, fp
    75a2:	464b      	mov	r3, r9
    75a4:	9802      	ldr	r0, [sp, #8]
    75a6:	e76f      	b.n	7488 <__aeabi_dmul+0xb0>
    75a8:	465c      	mov	r4, fp
    75aa:	464b      	mov	r3, r9
    75ac:	9501      	str	r5, [sp, #4]
    75ae:	9802      	ldr	r0, [sp, #8]
    75b0:	e76a      	b.n	7488 <__aeabi_dmul+0xb0>
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	000007ff 	.word	0x000007ff
    75b8:	fffffc01 	.word	0xfffffc01
    75bc:	0000a660 	.word	0x0000a660
    75c0:	800fffff 	.word	0x800fffff
    75c4:	fffffc0d 	.word	0xfffffc0d
    75c8:	464a      	mov	r2, r9
    75ca:	4649      	mov	r1, r9
    75cc:	0c17      	lsrs	r7, r2, #16
    75ce:	0c1a      	lsrs	r2, r3, #16
    75d0:	041b      	lsls	r3, r3, #16
    75d2:	0c1b      	lsrs	r3, r3, #16
    75d4:	0408      	lsls	r0, r1, #16
    75d6:	0019      	movs	r1, r3
    75d8:	0c00      	lsrs	r0, r0, #16
    75da:	4341      	muls	r1, r0
    75dc:	0015      	movs	r5, r2
    75de:	4688      	mov	r8, r1
    75e0:	0019      	movs	r1, r3
    75e2:	437d      	muls	r5, r7
    75e4:	4379      	muls	r1, r7
    75e6:	9503      	str	r5, [sp, #12]
    75e8:	4689      	mov	r9, r1
    75ea:	0029      	movs	r1, r5
    75ec:	0015      	movs	r5, r2
    75ee:	4345      	muls	r5, r0
    75f0:	444d      	add	r5, r9
    75f2:	9502      	str	r5, [sp, #8]
    75f4:	4645      	mov	r5, r8
    75f6:	0c2d      	lsrs	r5, r5, #16
    75f8:	46aa      	mov	sl, r5
    75fa:	9d02      	ldr	r5, [sp, #8]
    75fc:	4455      	add	r5, sl
    75fe:	45a9      	cmp	r9, r5
    7600:	d906      	bls.n	7610 <__aeabi_dmul+0x238>
    7602:	468a      	mov	sl, r1
    7604:	2180      	movs	r1, #128	; 0x80
    7606:	0249      	lsls	r1, r1, #9
    7608:	4689      	mov	r9, r1
    760a:	44ca      	add	sl, r9
    760c:	4651      	mov	r1, sl
    760e:	9103      	str	r1, [sp, #12]
    7610:	0c29      	lsrs	r1, r5, #16
    7612:	9104      	str	r1, [sp, #16]
    7614:	4641      	mov	r1, r8
    7616:	0409      	lsls	r1, r1, #16
    7618:	042d      	lsls	r5, r5, #16
    761a:	0c09      	lsrs	r1, r1, #16
    761c:	4688      	mov	r8, r1
    761e:	0029      	movs	r1, r5
    7620:	0c25      	lsrs	r5, r4, #16
    7622:	0424      	lsls	r4, r4, #16
    7624:	4441      	add	r1, r8
    7626:	0c24      	lsrs	r4, r4, #16
    7628:	9105      	str	r1, [sp, #20]
    762a:	0021      	movs	r1, r4
    762c:	4341      	muls	r1, r0
    762e:	4688      	mov	r8, r1
    7630:	0021      	movs	r1, r4
    7632:	4379      	muls	r1, r7
    7634:	468a      	mov	sl, r1
    7636:	4368      	muls	r0, r5
    7638:	4641      	mov	r1, r8
    763a:	4450      	add	r0, sl
    763c:	4681      	mov	r9, r0
    763e:	0c08      	lsrs	r0, r1, #16
    7640:	4448      	add	r0, r9
    7642:	436f      	muls	r7, r5
    7644:	4582      	cmp	sl, r0
    7646:	d903      	bls.n	7650 <__aeabi_dmul+0x278>
    7648:	2180      	movs	r1, #128	; 0x80
    764a:	0249      	lsls	r1, r1, #9
    764c:	4689      	mov	r9, r1
    764e:	444f      	add	r7, r9
    7650:	0c01      	lsrs	r1, r0, #16
    7652:	4689      	mov	r9, r1
    7654:	0039      	movs	r1, r7
    7656:	4449      	add	r1, r9
    7658:	9102      	str	r1, [sp, #8]
    765a:	4641      	mov	r1, r8
    765c:	040f      	lsls	r7, r1, #16
    765e:	9904      	ldr	r1, [sp, #16]
    7660:	0c3f      	lsrs	r7, r7, #16
    7662:	4688      	mov	r8, r1
    7664:	0400      	lsls	r0, r0, #16
    7666:	19c0      	adds	r0, r0, r7
    7668:	4480      	add	r8, r0
    766a:	4641      	mov	r1, r8
    766c:	9104      	str	r1, [sp, #16]
    766e:	4659      	mov	r1, fp
    7670:	0c0f      	lsrs	r7, r1, #16
    7672:	0409      	lsls	r1, r1, #16
    7674:	0c09      	lsrs	r1, r1, #16
    7676:	4688      	mov	r8, r1
    7678:	4359      	muls	r1, r3
    767a:	468a      	mov	sl, r1
    767c:	0039      	movs	r1, r7
    767e:	4351      	muls	r1, r2
    7680:	4689      	mov	r9, r1
    7682:	4641      	mov	r1, r8
    7684:	434a      	muls	r2, r1
    7686:	4651      	mov	r1, sl
    7688:	0c09      	lsrs	r1, r1, #16
    768a:	468b      	mov	fp, r1
    768c:	437b      	muls	r3, r7
    768e:	18d2      	adds	r2, r2, r3
    7690:	445a      	add	r2, fp
    7692:	4293      	cmp	r3, r2
    7694:	d903      	bls.n	769e <__aeabi_dmul+0x2c6>
    7696:	2380      	movs	r3, #128	; 0x80
    7698:	025b      	lsls	r3, r3, #9
    769a:	469b      	mov	fp, r3
    769c:	44d9      	add	r9, fp
    769e:	4651      	mov	r1, sl
    76a0:	0409      	lsls	r1, r1, #16
    76a2:	0c09      	lsrs	r1, r1, #16
    76a4:	468a      	mov	sl, r1
    76a6:	4641      	mov	r1, r8
    76a8:	4361      	muls	r1, r4
    76aa:	437c      	muls	r4, r7
    76ac:	0c13      	lsrs	r3, r2, #16
    76ae:	0412      	lsls	r2, r2, #16
    76b0:	444b      	add	r3, r9
    76b2:	4452      	add	r2, sl
    76b4:	46a1      	mov	r9, r4
    76b6:	468a      	mov	sl, r1
    76b8:	003c      	movs	r4, r7
    76ba:	4641      	mov	r1, r8
    76bc:	436c      	muls	r4, r5
    76be:	434d      	muls	r5, r1
    76c0:	4651      	mov	r1, sl
    76c2:	444d      	add	r5, r9
    76c4:	0c0f      	lsrs	r7, r1, #16
    76c6:	197d      	adds	r5, r7, r5
    76c8:	45a9      	cmp	r9, r5
    76ca:	d903      	bls.n	76d4 <__aeabi_dmul+0x2fc>
    76cc:	2180      	movs	r1, #128	; 0x80
    76ce:	0249      	lsls	r1, r1, #9
    76d0:	4688      	mov	r8, r1
    76d2:	4444      	add	r4, r8
    76d4:	9f04      	ldr	r7, [sp, #16]
    76d6:	9903      	ldr	r1, [sp, #12]
    76d8:	46b8      	mov	r8, r7
    76da:	4441      	add	r1, r8
    76dc:	468b      	mov	fp, r1
    76de:	4583      	cmp	fp, r0
    76e0:	4180      	sbcs	r0, r0
    76e2:	4241      	negs	r1, r0
    76e4:	4688      	mov	r8, r1
    76e6:	4651      	mov	r1, sl
    76e8:	0408      	lsls	r0, r1, #16
    76ea:	042f      	lsls	r7, r5, #16
    76ec:	0c00      	lsrs	r0, r0, #16
    76ee:	183f      	adds	r7, r7, r0
    76f0:	4658      	mov	r0, fp
    76f2:	9902      	ldr	r1, [sp, #8]
    76f4:	1810      	adds	r0, r2, r0
    76f6:	4689      	mov	r9, r1
    76f8:	4290      	cmp	r0, r2
    76fa:	4192      	sbcs	r2, r2
    76fc:	444f      	add	r7, r9
    76fe:	46ba      	mov	sl, r7
    7700:	4252      	negs	r2, r2
    7702:	4699      	mov	r9, r3
    7704:	4693      	mov	fp, r2
    7706:	44c2      	add	sl, r8
    7708:	44d1      	add	r9, sl
    770a:	44cb      	add	fp, r9
    770c:	428f      	cmp	r7, r1
    770e:	41bf      	sbcs	r7, r7
    7710:	45c2      	cmp	sl, r8
    7712:	4189      	sbcs	r1, r1
    7714:	4599      	cmp	r9, r3
    7716:	419b      	sbcs	r3, r3
    7718:	4593      	cmp	fp, r2
    771a:	4192      	sbcs	r2, r2
    771c:	427f      	negs	r7, r7
    771e:	4249      	negs	r1, r1
    7720:	0c2d      	lsrs	r5, r5, #16
    7722:	4252      	negs	r2, r2
    7724:	430f      	orrs	r7, r1
    7726:	425b      	negs	r3, r3
    7728:	4313      	orrs	r3, r2
    772a:	197f      	adds	r7, r7, r5
    772c:	18ff      	adds	r7, r7, r3
    772e:	465b      	mov	r3, fp
    7730:	193c      	adds	r4, r7, r4
    7732:	0ddb      	lsrs	r3, r3, #23
    7734:	9a05      	ldr	r2, [sp, #20]
    7736:	0264      	lsls	r4, r4, #9
    7738:	431c      	orrs	r4, r3
    773a:	0243      	lsls	r3, r0, #9
    773c:	4313      	orrs	r3, r2
    773e:	1e5d      	subs	r5, r3, #1
    7740:	41ab      	sbcs	r3, r5
    7742:	465a      	mov	r2, fp
    7744:	0dc0      	lsrs	r0, r0, #23
    7746:	4303      	orrs	r3, r0
    7748:	0252      	lsls	r2, r2, #9
    774a:	4313      	orrs	r3, r2
    774c:	01e2      	lsls	r2, r4, #7
    774e:	d556      	bpl.n	77fe <__aeabi_dmul+0x426>
    7750:	2001      	movs	r0, #1
    7752:	085a      	lsrs	r2, r3, #1
    7754:	4003      	ands	r3, r0
    7756:	4313      	orrs	r3, r2
    7758:	07e2      	lsls	r2, r4, #31
    775a:	4313      	orrs	r3, r2
    775c:	0864      	lsrs	r4, r4, #1
    775e:	485a      	ldr	r0, [pc, #360]	; (78c8 <__aeabi_dmul+0x4f0>)
    7760:	4460      	add	r0, ip
    7762:	2800      	cmp	r0, #0
    7764:	dd4d      	ble.n	7802 <__aeabi_dmul+0x42a>
    7766:	075a      	lsls	r2, r3, #29
    7768:	d009      	beq.n	777e <__aeabi_dmul+0x3a6>
    776a:	220f      	movs	r2, #15
    776c:	401a      	ands	r2, r3
    776e:	2a04      	cmp	r2, #4
    7770:	d005      	beq.n	777e <__aeabi_dmul+0x3a6>
    7772:	1d1a      	adds	r2, r3, #4
    7774:	429a      	cmp	r2, r3
    7776:	419b      	sbcs	r3, r3
    7778:	425b      	negs	r3, r3
    777a:	18e4      	adds	r4, r4, r3
    777c:	0013      	movs	r3, r2
    777e:	01e2      	lsls	r2, r4, #7
    7780:	d504      	bpl.n	778c <__aeabi_dmul+0x3b4>
    7782:	2080      	movs	r0, #128	; 0x80
    7784:	4a51      	ldr	r2, [pc, #324]	; (78cc <__aeabi_dmul+0x4f4>)
    7786:	00c0      	lsls	r0, r0, #3
    7788:	4014      	ands	r4, r2
    778a:	4460      	add	r0, ip
    778c:	4a50      	ldr	r2, [pc, #320]	; (78d0 <__aeabi_dmul+0x4f8>)
    778e:	4290      	cmp	r0, r2
    7790:	dd00      	ble.n	7794 <__aeabi_dmul+0x3bc>
    7792:	e6e3      	b.n	755c <__aeabi_dmul+0x184>
    7794:	2501      	movs	r5, #1
    7796:	08db      	lsrs	r3, r3, #3
    7798:	0762      	lsls	r2, r4, #29
    779a:	431a      	orrs	r2, r3
    779c:	0264      	lsls	r4, r4, #9
    779e:	9b01      	ldr	r3, [sp, #4]
    77a0:	4691      	mov	r9, r2
    77a2:	0b22      	lsrs	r2, r4, #12
    77a4:	0544      	lsls	r4, r0, #21
    77a6:	0d64      	lsrs	r4, r4, #21
    77a8:	401d      	ands	r5, r3
    77aa:	e67c      	b.n	74a6 <__aeabi_dmul+0xce>
    77ac:	2280      	movs	r2, #128	; 0x80
    77ae:	4659      	mov	r1, fp
    77b0:	0312      	lsls	r2, r2, #12
    77b2:	4211      	tst	r1, r2
    77b4:	d008      	beq.n	77c8 <__aeabi_dmul+0x3f0>
    77b6:	4214      	tst	r4, r2
    77b8:	d106      	bne.n	77c8 <__aeabi_dmul+0x3f0>
    77ba:	4322      	orrs	r2, r4
    77bc:	0312      	lsls	r2, r2, #12
    77be:	0b12      	lsrs	r2, r2, #12
    77c0:	4645      	mov	r5, r8
    77c2:	4699      	mov	r9, r3
    77c4:	4c43      	ldr	r4, [pc, #268]	; (78d4 <__aeabi_dmul+0x4fc>)
    77c6:	e66e      	b.n	74a6 <__aeabi_dmul+0xce>
    77c8:	465b      	mov	r3, fp
    77ca:	431a      	orrs	r2, r3
    77cc:	0312      	lsls	r2, r2, #12
    77ce:	0b12      	lsrs	r2, r2, #12
    77d0:	4c40      	ldr	r4, [pc, #256]	; (78d4 <__aeabi_dmul+0x4fc>)
    77d2:	e668      	b.n	74a6 <__aeabi_dmul+0xce>
    77d4:	0003      	movs	r3, r0
    77d6:	4654      	mov	r4, sl
    77d8:	3b28      	subs	r3, #40	; 0x28
    77da:	409c      	lsls	r4, r3
    77dc:	2300      	movs	r3, #0
    77de:	e6b9      	b.n	7554 <__aeabi_dmul+0x17c>
    77e0:	f000 fbfc 	bl	7fdc <__clzsi2>
    77e4:	3020      	adds	r0, #32
    77e6:	e6a6      	b.n	7536 <__aeabi_dmul+0x15e>
    77e8:	0003      	movs	r3, r0
    77ea:	3b28      	subs	r3, #40	; 0x28
    77ec:	409f      	lsls	r7, r3
    77ee:	2300      	movs	r3, #0
    77f0:	46bb      	mov	fp, r7
    77f2:	4699      	mov	r9, r3
    77f4:	e68a      	b.n	750c <__aeabi_dmul+0x134>
    77f6:	f000 fbf1 	bl	7fdc <__clzsi2>
    77fa:	3020      	adds	r0, #32
    77fc:	e674      	b.n	74e8 <__aeabi_dmul+0x110>
    77fe:	46b4      	mov	ip, r6
    7800:	e7ad      	b.n	775e <__aeabi_dmul+0x386>
    7802:	2501      	movs	r5, #1
    7804:	1a2a      	subs	r2, r5, r0
    7806:	2a38      	cmp	r2, #56	; 0x38
    7808:	dd06      	ble.n	7818 <__aeabi_dmul+0x440>
    780a:	9b01      	ldr	r3, [sp, #4]
    780c:	2400      	movs	r4, #0
    780e:	401d      	ands	r5, r3
    7810:	2300      	movs	r3, #0
    7812:	2200      	movs	r2, #0
    7814:	4699      	mov	r9, r3
    7816:	e646      	b.n	74a6 <__aeabi_dmul+0xce>
    7818:	2a1f      	cmp	r2, #31
    781a:	dc21      	bgt.n	7860 <__aeabi_dmul+0x488>
    781c:	2520      	movs	r5, #32
    781e:	0020      	movs	r0, r4
    7820:	1aad      	subs	r5, r5, r2
    7822:	001e      	movs	r6, r3
    7824:	40ab      	lsls	r3, r5
    7826:	40a8      	lsls	r0, r5
    7828:	40d6      	lsrs	r6, r2
    782a:	1e5d      	subs	r5, r3, #1
    782c:	41ab      	sbcs	r3, r5
    782e:	4330      	orrs	r0, r6
    7830:	4318      	orrs	r0, r3
    7832:	40d4      	lsrs	r4, r2
    7834:	0743      	lsls	r3, r0, #29
    7836:	d009      	beq.n	784c <__aeabi_dmul+0x474>
    7838:	230f      	movs	r3, #15
    783a:	4003      	ands	r3, r0
    783c:	2b04      	cmp	r3, #4
    783e:	d005      	beq.n	784c <__aeabi_dmul+0x474>
    7840:	0003      	movs	r3, r0
    7842:	1d18      	adds	r0, r3, #4
    7844:	4298      	cmp	r0, r3
    7846:	419b      	sbcs	r3, r3
    7848:	425b      	negs	r3, r3
    784a:	18e4      	adds	r4, r4, r3
    784c:	0223      	lsls	r3, r4, #8
    784e:	d521      	bpl.n	7894 <__aeabi_dmul+0x4bc>
    7850:	2501      	movs	r5, #1
    7852:	9b01      	ldr	r3, [sp, #4]
    7854:	2401      	movs	r4, #1
    7856:	401d      	ands	r5, r3
    7858:	2300      	movs	r3, #0
    785a:	2200      	movs	r2, #0
    785c:	4699      	mov	r9, r3
    785e:	e622      	b.n	74a6 <__aeabi_dmul+0xce>
    7860:	251f      	movs	r5, #31
    7862:	0021      	movs	r1, r4
    7864:	426d      	negs	r5, r5
    7866:	1a28      	subs	r0, r5, r0
    7868:	40c1      	lsrs	r1, r0
    786a:	0008      	movs	r0, r1
    786c:	2a20      	cmp	r2, #32
    786e:	d01d      	beq.n	78ac <__aeabi_dmul+0x4d4>
    7870:	355f      	adds	r5, #95	; 0x5f
    7872:	1aaa      	subs	r2, r5, r2
    7874:	4094      	lsls	r4, r2
    7876:	4323      	orrs	r3, r4
    7878:	1e5c      	subs	r4, r3, #1
    787a:	41a3      	sbcs	r3, r4
    787c:	2507      	movs	r5, #7
    787e:	4303      	orrs	r3, r0
    7880:	401d      	ands	r5, r3
    7882:	2200      	movs	r2, #0
    7884:	2d00      	cmp	r5, #0
    7886:	d009      	beq.n	789c <__aeabi_dmul+0x4c4>
    7888:	220f      	movs	r2, #15
    788a:	2400      	movs	r4, #0
    788c:	401a      	ands	r2, r3
    788e:	0018      	movs	r0, r3
    7890:	2a04      	cmp	r2, #4
    7892:	d1d6      	bne.n	7842 <__aeabi_dmul+0x46a>
    7894:	0003      	movs	r3, r0
    7896:	0765      	lsls	r5, r4, #29
    7898:	0264      	lsls	r4, r4, #9
    789a:	0b22      	lsrs	r2, r4, #12
    789c:	08db      	lsrs	r3, r3, #3
    789e:	432b      	orrs	r3, r5
    78a0:	2501      	movs	r5, #1
    78a2:	4699      	mov	r9, r3
    78a4:	9b01      	ldr	r3, [sp, #4]
    78a6:	2400      	movs	r4, #0
    78a8:	401d      	ands	r5, r3
    78aa:	e5fc      	b.n	74a6 <__aeabi_dmul+0xce>
    78ac:	2400      	movs	r4, #0
    78ae:	e7e2      	b.n	7876 <__aeabi_dmul+0x49e>
    78b0:	2280      	movs	r2, #128	; 0x80
    78b2:	2501      	movs	r5, #1
    78b4:	0312      	lsls	r2, r2, #12
    78b6:	4322      	orrs	r2, r4
    78b8:	9901      	ldr	r1, [sp, #4]
    78ba:	0312      	lsls	r2, r2, #12
    78bc:	0b12      	lsrs	r2, r2, #12
    78be:	400d      	ands	r5, r1
    78c0:	4699      	mov	r9, r3
    78c2:	4c04      	ldr	r4, [pc, #16]	; (78d4 <__aeabi_dmul+0x4fc>)
    78c4:	e5ef      	b.n	74a6 <__aeabi_dmul+0xce>
    78c6:	46c0      	nop			; (mov r8, r8)
    78c8:	000003ff 	.word	0x000003ff
    78cc:	feffffff 	.word	0xfeffffff
    78d0:	000007fe 	.word	0x000007fe
    78d4:	000007ff 	.word	0x000007ff

000078d8 <__aeabi_dsub>:
    78d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78da:	4646      	mov	r6, r8
    78dc:	46d6      	mov	lr, sl
    78de:	464f      	mov	r7, r9
    78e0:	030c      	lsls	r4, r1, #12
    78e2:	b5c0      	push	{r6, r7, lr}
    78e4:	0fcd      	lsrs	r5, r1, #31
    78e6:	004e      	lsls	r6, r1, #1
    78e8:	0a61      	lsrs	r1, r4, #9
    78ea:	0f44      	lsrs	r4, r0, #29
    78ec:	430c      	orrs	r4, r1
    78ee:	00c1      	lsls	r1, r0, #3
    78f0:	0058      	lsls	r0, r3, #1
    78f2:	0d40      	lsrs	r0, r0, #21
    78f4:	4684      	mov	ip, r0
    78f6:	468a      	mov	sl, r1
    78f8:	000f      	movs	r7, r1
    78fa:	0319      	lsls	r1, r3, #12
    78fc:	0f50      	lsrs	r0, r2, #29
    78fe:	0a49      	lsrs	r1, r1, #9
    7900:	4301      	orrs	r1, r0
    7902:	48c6      	ldr	r0, [pc, #792]	; (7c1c <__aeabi_dsub+0x344>)
    7904:	0d76      	lsrs	r6, r6, #21
    7906:	46a8      	mov	r8, r5
    7908:	0fdb      	lsrs	r3, r3, #31
    790a:	00d2      	lsls	r2, r2, #3
    790c:	4584      	cmp	ip, r0
    790e:	d100      	bne.n	7912 <__aeabi_dsub+0x3a>
    7910:	e0d8      	b.n	7ac4 <__aeabi_dsub+0x1ec>
    7912:	2001      	movs	r0, #1
    7914:	4043      	eors	r3, r0
    7916:	42ab      	cmp	r3, r5
    7918:	d100      	bne.n	791c <__aeabi_dsub+0x44>
    791a:	e0a6      	b.n	7a6a <__aeabi_dsub+0x192>
    791c:	4660      	mov	r0, ip
    791e:	1a35      	subs	r5, r6, r0
    7920:	2d00      	cmp	r5, #0
    7922:	dc00      	bgt.n	7926 <__aeabi_dsub+0x4e>
    7924:	e105      	b.n	7b32 <__aeabi_dsub+0x25a>
    7926:	2800      	cmp	r0, #0
    7928:	d110      	bne.n	794c <__aeabi_dsub+0x74>
    792a:	000b      	movs	r3, r1
    792c:	4313      	orrs	r3, r2
    792e:	d100      	bne.n	7932 <__aeabi_dsub+0x5a>
    7930:	e0d7      	b.n	7ae2 <__aeabi_dsub+0x20a>
    7932:	1e6b      	subs	r3, r5, #1
    7934:	2b00      	cmp	r3, #0
    7936:	d000      	beq.n	793a <__aeabi_dsub+0x62>
    7938:	e14b      	b.n	7bd2 <__aeabi_dsub+0x2fa>
    793a:	4653      	mov	r3, sl
    793c:	1a9f      	subs	r7, r3, r2
    793e:	45ba      	cmp	sl, r7
    7940:	4180      	sbcs	r0, r0
    7942:	1a64      	subs	r4, r4, r1
    7944:	4240      	negs	r0, r0
    7946:	1a24      	subs	r4, r4, r0
    7948:	2601      	movs	r6, #1
    794a:	e01e      	b.n	798a <__aeabi_dsub+0xb2>
    794c:	4bb3      	ldr	r3, [pc, #716]	; (7c1c <__aeabi_dsub+0x344>)
    794e:	429e      	cmp	r6, r3
    7950:	d048      	beq.n	79e4 <__aeabi_dsub+0x10c>
    7952:	2380      	movs	r3, #128	; 0x80
    7954:	041b      	lsls	r3, r3, #16
    7956:	4319      	orrs	r1, r3
    7958:	2d38      	cmp	r5, #56	; 0x38
    795a:	dd00      	ble.n	795e <__aeabi_dsub+0x86>
    795c:	e119      	b.n	7b92 <__aeabi_dsub+0x2ba>
    795e:	2d1f      	cmp	r5, #31
    7960:	dd00      	ble.n	7964 <__aeabi_dsub+0x8c>
    7962:	e14c      	b.n	7bfe <__aeabi_dsub+0x326>
    7964:	2320      	movs	r3, #32
    7966:	000f      	movs	r7, r1
    7968:	1b5b      	subs	r3, r3, r5
    796a:	0010      	movs	r0, r2
    796c:	409a      	lsls	r2, r3
    796e:	409f      	lsls	r7, r3
    7970:	40e8      	lsrs	r0, r5
    7972:	1e53      	subs	r3, r2, #1
    7974:	419a      	sbcs	r2, r3
    7976:	40e9      	lsrs	r1, r5
    7978:	4307      	orrs	r7, r0
    797a:	4317      	orrs	r7, r2
    797c:	4653      	mov	r3, sl
    797e:	1bdf      	subs	r7, r3, r7
    7980:	1a61      	subs	r1, r4, r1
    7982:	45ba      	cmp	sl, r7
    7984:	41a4      	sbcs	r4, r4
    7986:	4264      	negs	r4, r4
    7988:	1b0c      	subs	r4, r1, r4
    798a:	0223      	lsls	r3, r4, #8
    798c:	d400      	bmi.n	7990 <__aeabi_dsub+0xb8>
    798e:	e0c5      	b.n	7b1c <__aeabi_dsub+0x244>
    7990:	0264      	lsls	r4, r4, #9
    7992:	0a65      	lsrs	r5, r4, #9
    7994:	2d00      	cmp	r5, #0
    7996:	d100      	bne.n	799a <__aeabi_dsub+0xc2>
    7998:	e0f6      	b.n	7b88 <__aeabi_dsub+0x2b0>
    799a:	0028      	movs	r0, r5
    799c:	f000 fb1e 	bl	7fdc <__clzsi2>
    79a0:	0003      	movs	r3, r0
    79a2:	3b08      	subs	r3, #8
    79a4:	2b1f      	cmp	r3, #31
    79a6:	dd00      	ble.n	79aa <__aeabi_dsub+0xd2>
    79a8:	e0e9      	b.n	7b7e <__aeabi_dsub+0x2a6>
    79aa:	2220      	movs	r2, #32
    79ac:	003c      	movs	r4, r7
    79ae:	1ad2      	subs	r2, r2, r3
    79b0:	409d      	lsls	r5, r3
    79b2:	40d4      	lsrs	r4, r2
    79b4:	409f      	lsls	r7, r3
    79b6:	4325      	orrs	r5, r4
    79b8:	429e      	cmp	r6, r3
    79ba:	dd00      	ble.n	79be <__aeabi_dsub+0xe6>
    79bc:	e0db      	b.n	7b76 <__aeabi_dsub+0x29e>
    79be:	1b9e      	subs	r6, r3, r6
    79c0:	1c73      	adds	r3, r6, #1
    79c2:	2b1f      	cmp	r3, #31
    79c4:	dd00      	ble.n	79c8 <__aeabi_dsub+0xf0>
    79c6:	e10a      	b.n	7bde <__aeabi_dsub+0x306>
    79c8:	2220      	movs	r2, #32
    79ca:	0038      	movs	r0, r7
    79cc:	1ad2      	subs	r2, r2, r3
    79ce:	0029      	movs	r1, r5
    79d0:	4097      	lsls	r7, r2
    79d2:	002c      	movs	r4, r5
    79d4:	4091      	lsls	r1, r2
    79d6:	40d8      	lsrs	r0, r3
    79d8:	1e7a      	subs	r2, r7, #1
    79da:	4197      	sbcs	r7, r2
    79dc:	40dc      	lsrs	r4, r3
    79de:	2600      	movs	r6, #0
    79e0:	4301      	orrs	r1, r0
    79e2:	430f      	orrs	r7, r1
    79e4:	077b      	lsls	r3, r7, #29
    79e6:	d009      	beq.n	79fc <__aeabi_dsub+0x124>
    79e8:	230f      	movs	r3, #15
    79ea:	403b      	ands	r3, r7
    79ec:	2b04      	cmp	r3, #4
    79ee:	d005      	beq.n	79fc <__aeabi_dsub+0x124>
    79f0:	1d3b      	adds	r3, r7, #4
    79f2:	42bb      	cmp	r3, r7
    79f4:	41bf      	sbcs	r7, r7
    79f6:	427f      	negs	r7, r7
    79f8:	19e4      	adds	r4, r4, r7
    79fa:	001f      	movs	r7, r3
    79fc:	0223      	lsls	r3, r4, #8
    79fe:	d525      	bpl.n	7a4c <__aeabi_dsub+0x174>
    7a00:	4b86      	ldr	r3, [pc, #536]	; (7c1c <__aeabi_dsub+0x344>)
    7a02:	3601      	adds	r6, #1
    7a04:	429e      	cmp	r6, r3
    7a06:	d100      	bne.n	7a0a <__aeabi_dsub+0x132>
    7a08:	e0af      	b.n	7b6a <__aeabi_dsub+0x292>
    7a0a:	4b85      	ldr	r3, [pc, #532]	; (7c20 <__aeabi_dsub+0x348>)
    7a0c:	2501      	movs	r5, #1
    7a0e:	401c      	ands	r4, r3
    7a10:	4643      	mov	r3, r8
    7a12:	0762      	lsls	r2, r4, #29
    7a14:	08ff      	lsrs	r7, r7, #3
    7a16:	0264      	lsls	r4, r4, #9
    7a18:	0576      	lsls	r6, r6, #21
    7a1a:	4317      	orrs	r7, r2
    7a1c:	0b24      	lsrs	r4, r4, #12
    7a1e:	0d76      	lsrs	r6, r6, #21
    7a20:	401d      	ands	r5, r3
    7a22:	2100      	movs	r1, #0
    7a24:	0324      	lsls	r4, r4, #12
    7a26:	0b23      	lsrs	r3, r4, #12
    7a28:	0d0c      	lsrs	r4, r1, #20
    7a2a:	4a7e      	ldr	r2, [pc, #504]	; (7c24 <__aeabi_dsub+0x34c>)
    7a2c:	0524      	lsls	r4, r4, #20
    7a2e:	431c      	orrs	r4, r3
    7a30:	4014      	ands	r4, r2
    7a32:	0533      	lsls	r3, r6, #20
    7a34:	4323      	orrs	r3, r4
    7a36:	005b      	lsls	r3, r3, #1
    7a38:	07ed      	lsls	r5, r5, #31
    7a3a:	085b      	lsrs	r3, r3, #1
    7a3c:	432b      	orrs	r3, r5
    7a3e:	0038      	movs	r0, r7
    7a40:	0019      	movs	r1, r3
    7a42:	bc1c      	pop	{r2, r3, r4}
    7a44:	4690      	mov	r8, r2
    7a46:	4699      	mov	r9, r3
    7a48:	46a2      	mov	sl, r4
    7a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a4c:	2501      	movs	r5, #1
    7a4e:	4643      	mov	r3, r8
    7a50:	0762      	lsls	r2, r4, #29
    7a52:	08ff      	lsrs	r7, r7, #3
    7a54:	4317      	orrs	r7, r2
    7a56:	08e4      	lsrs	r4, r4, #3
    7a58:	401d      	ands	r5, r3
    7a5a:	4b70      	ldr	r3, [pc, #448]	; (7c1c <__aeabi_dsub+0x344>)
    7a5c:	429e      	cmp	r6, r3
    7a5e:	d036      	beq.n	7ace <__aeabi_dsub+0x1f6>
    7a60:	0324      	lsls	r4, r4, #12
    7a62:	0576      	lsls	r6, r6, #21
    7a64:	0b24      	lsrs	r4, r4, #12
    7a66:	0d76      	lsrs	r6, r6, #21
    7a68:	e7db      	b.n	7a22 <__aeabi_dsub+0x14a>
    7a6a:	4663      	mov	r3, ip
    7a6c:	1af3      	subs	r3, r6, r3
    7a6e:	2b00      	cmp	r3, #0
    7a70:	dc00      	bgt.n	7a74 <__aeabi_dsub+0x19c>
    7a72:	e094      	b.n	7b9e <__aeabi_dsub+0x2c6>
    7a74:	4660      	mov	r0, ip
    7a76:	2800      	cmp	r0, #0
    7a78:	d035      	beq.n	7ae6 <__aeabi_dsub+0x20e>
    7a7a:	4868      	ldr	r0, [pc, #416]	; (7c1c <__aeabi_dsub+0x344>)
    7a7c:	4286      	cmp	r6, r0
    7a7e:	d0b1      	beq.n	79e4 <__aeabi_dsub+0x10c>
    7a80:	2780      	movs	r7, #128	; 0x80
    7a82:	043f      	lsls	r7, r7, #16
    7a84:	4339      	orrs	r1, r7
    7a86:	2b38      	cmp	r3, #56	; 0x38
    7a88:	dc00      	bgt.n	7a8c <__aeabi_dsub+0x1b4>
    7a8a:	e0fd      	b.n	7c88 <__aeabi_dsub+0x3b0>
    7a8c:	430a      	orrs	r2, r1
    7a8e:	0017      	movs	r7, r2
    7a90:	2100      	movs	r1, #0
    7a92:	1e7a      	subs	r2, r7, #1
    7a94:	4197      	sbcs	r7, r2
    7a96:	4457      	add	r7, sl
    7a98:	4557      	cmp	r7, sl
    7a9a:	4180      	sbcs	r0, r0
    7a9c:	1909      	adds	r1, r1, r4
    7a9e:	4244      	negs	r4, r0
    7aa0:	190c      	adds	r4, r1, r4
    7aa2:	0223      	lsls	r3, r4, #8
    7aa4:	d53a      	bpl.n	7b1c <__aeabi_dsub+0x244>
    7aa6:	4b5d      	ldr	r3, [pc, #372]	; (7c1c <__aeabi_dsub+0x344>)
    7aa8:	3601      	adds	r6, #1
    7aaa:	429e      	cmp	r6, r3
    7aac:	d100      	bne.n	7ab0 <__aeabi_dsub+0x1d8>
    7aae:	e14b      	b.n	7d48 <__aeabi_dsub+0x470>
    7ab0:	2201      	movs	r2, #1
    7ab2:	4b5b      	ldr	r3, [pc, #364]	; (7c20 <__aeabi_dsub+0x348>)
    7ab4:	401c      	ands	r4, r3
    7ab6:	087b      	lsrs	r3, r7, #1
    7ab8:	4017      	ands	r7, r2
    7aba:	431f      	orrs	r7, r3
    7abc:	07e2      	lsls	r2, r4, #31
    7abe:	4317      	orrs	r7, r2
    7ac0:	0864      	lsrs	r4, r4, #1
    7ac2:	e78f      	b.n	79e4 <__aeabi_dsub+0x10c>
    7ac4:	0008      	movs	r0, r1
    7ac6:	4310      	orrs	r0, r2
    7ac8:	d000      	beq.n	7acc <__aeabi_dsub+0x1f4>
    7aca:	e724      	b.n	7916 <__aeabi_dsub+0x3e>
    7acc:	e721      	b.n	7912 <__aeabi_dsub+0x3a>
    7ace:	0023      	movs	r3, r4
    7ad0:	433b      	orrs	r3, r7
    7ad2:	d100      	bne.n	7ad6 <__aeabi_dsub+0x1fe>
    7ad4:	e1b9      	b.n	7e4a <__aeabi_dsub+0x572>
    7ad6:	2280      	movs	r2, #128	; 0x80
    7ad8:	0312      	lsls	r2, r2, #12
    7ada:	4314      	orrs	r4, r2
    7adc:	0324      	lsls	r4, r4, #12
    7ade:	0b24      	lsrs	r4, r4, #12
    7ae0:	e79f      	b.n	7a22 <__aeabi_dsub+0x14a>
    7ae2:	002e      	movs	r6, r5
    7ae4:	e77e      	b.n	79e4 <__aeabi_dsub+0x10c>
    7ae6:	0008      	movs	r0, r1
    7ae8:	4310      	orrs	r0, r2
    7aea:	d100      	bne.n	7aee <__aeabi_dsub+0x216>
    7aec:	e0ca      	b.n	7c84 <__aeabi_dsub+0x3ac>
    7aee:	1e58      	subs	r0, r3, #1
    7af0:	4684      	mov	ip, r0
    7af2:	2800      	cmp	r0, #0
    7af4:	d000      	beq.n	7af8 <__aeabi_dsub+0x220>
    7af6:	e0e7      	b.n	7cc8 <__aeabi_dsub+0x3f0>
    7af8:	4452      	add	r2, sl
    7afa:	4552      	cmp	r2, sl
    7afc:	4180      	sbcs	r0, r0
    7afe:	1864      	adds	r4, r4, r1
    7b00:	4240      	negs	r0, r0
    7b02:	1824      	adds	r4, r4, r0
    7b04:	0017      	movs	r7, r2
    7b06:	2601      	movs	r6, #1
    7b08:	0223      	lsls	r3, r4, #8
    7b0a:	d507      	bpl.n	7b1c <__aeabi_dsub+0x244>
    7b0c:	2602      	movs	r6, #2
    7b0e:	e7cf      	b.n	7ab0 <__aeabi_dsub+0x1d8>
    7b10:	4664      	mov	r4, ip
    7b12:	432c      	orrs	r4, r5
    7b14:	d100      	bne.n	7b18 <__aeabi_dsub+0x240>
    7b16:	e1b3      	b.n	7e80 <__aeabi_dsub+0x5a8>
    7b18:	002c      	movs	r4, r5
    7b1a:	4667      	mov	r7, ip
    7b1c:	077b      	lsls	r3, r7, #29
    7b1e:	d000      	beq.n	7b22 <__aeabi_dsub+0x24a>
    7b20:	e762      	b.n	79e8 <__aeabi_dsub+0x110>
    7b22:	0763      	lsls	r3, r4, #29
    7b24:	08ff      	lsrs	r7, r7, #3
    7b26:	431f      	orrs	r7, r3
    7b28:	2501      	movs	r5, #1
    7b2a:	4643      	mov	r3, r8
    7b2c:	08e4      	lsrs	r4, r4, #3
    7b2e:	401d      	ands	r5, r3
    7b30:	e793      	b.n	7a5a <__aeabi_dsub+0x182>
    7b32:	2d00      	cmp	r5, #0
    7b34:	d178      	bne.n	7c28 <__aeabi_dsub+0x350>
    7b36:	1c75      	adds	r5, r6, #1
    7b38:	056d      	lsls	r5, r5, #21
    7b3a:	0d6d      	lsrs	r5, r5, #21
    7b3c:	2d01      	cmp	r5, #1
    7b3e:	dc00      	bgt.n	7b42 <__aeabi_dsub+0x26a>
    7b40:	e0f2      	b.n	7d28 <__aeabi_dsub+0x450>
    7b42:	4650      	mov	r0, sl
    7b44:	1a80      	subs	r0, r0, r2
    7b46:	4582      	cmp	sl, r0
    7b48:	41bf      	sbcs	r7, r7
    7b4a:	1a65      	subs	r5, r4, r1
    7b4c:	427f      	negs	r7, r7
    7b4e:	1bed      	subs	r5, r5, r7
    7b50:	4684      	mov	ip, r0
    7b52:	0228      	lsls	r0, r5, #8
    7b54:	d400      	bmi.n	7b58 <__aeabi_dsub+0x280>
    7b56:	e08c      	b.n	7c72 <__aeabi_dsub+0x39a>
    7b58:	4650      	mov	r0, sl
    7b5a:	1a17      	subs	r7, r2, r0
    7b5c:	42ba      	cmp	r2, r7
    7b5e:	4192      	sbcs	r2, r2
    7b60:	1b0c      	subs	r4, r1, r4
    7b62:	4255      	negs	r5, r2
    7b64:	1b65      	subs	r5, r4, r5
    7b66:	4698      	mov	r8, r3
    7b68:	e714      	b.n	7994 <__aeabi_dsub+0xbc>
    7b6a:	2501      	movs	r5, #1
    7b6c:	4643      	mov	r3, r8
    7b6e:	2400      	movs	r4, #0
    7b70:	401d      	ands	r5, r3
    7b72:	2700      	movs	r7, #0
    7b74:	e755      	b.n	7a22 <__aeabi_dsub+0x14a>
    7b76:	4c2a      	ldr	r4, [pc, #168]	; (7c20 <__aeabi_dsub+0x348>)
    7b78:	1af6      	subs	r6, r6, r3
    7b7a:	402c      	ands	r4, r5
    7b7c:	e732      	b.n	79e4 <__aeabi_dsub+0x10c>
    7b7e:	003d      	movs	r5, r7
    7b80:	3828      	subs	r0, #40	; 0x28
    7b82:	4085      	lsls	r5, r0
    7b84:	2700      	movs	r7, #0
    7b86:	e717      	b.n	79b8 <__aeabi_dsub+0xe0>
    7b88:	0038      	movs	r0, r7
    7b8a:	f000 fa27 	bl	7fdc <__clzsi2>
    7b8e:	3020      	adds	r0, #32
    7b90:	e706      	b.n	79a0 <__aeabi_dsub+0xc8>
    7b92:	430a      	orrs	r2, r1
    7b94:	0017      	movs	r7, r2
    7b96:	2100      	movs	r1, #0
    7b98:	1e7a      	subs	r2, r7, #1
    7b9a:	4197      	sbcs	r7, r2
    7b9c:	e6ee      	b.n	797c <__aeabi_dsub+0xa4>
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	d000      	beq.n	7ba4 <__aeabi_dsub+0x2cc>
    7ba2:	e0e5      	b.n	7d70 <__aeabi_dsub+0x498>
    7ba4:	1c73      	adds	r3, r6, #1
    7ba6:	469c      	mov	ip, r3
    7ba8:	055b      	lsls	r3, r3, #21
    7baa:	0d5b      	lsrs	r3, r3, #21
    7bac:	2b01      	cmp	r3, #1
    7bae:	dc00      	bgt.n	7bb2 <__aeabi_dsub+0x2da>
    7bb0:	e09f      	b.n	7cf2 <__aeabi_dsub+0x41a>
    7bb2:	4b1a      	ldr	r3, [pc, #104]	; (7c1c <__aeabi_dsub+0x344>)
    7bb4:	459c      	cmp	ip, r3
    7bb6:	d100      	bne.n	7bba <__aeabi_dsub+0x2e2>
    7bb8:	e0c5      	b.n	7d46 <__aeabi_dsub+0x46e>
    7bba:	4452      	add	r2, sl
    7bbc:	4552      	cmp	r2, sl
    7bbe:	4180      	sbcs	r0, r0
    7bc0:	1864      	adds	r4, r4, r1
    7bc2:	4240      	negs	r0, r0
    7bc4:	1824      	adds	r4, r4, r0
    7bc6:	07e7      	lsls	r7, r4, #31
    7bc8:	0852      	lsrs	r2, r2, #1
    7bca:	4317      	orrs	r7, r2
    7bcc:	0864      	lsrs	r4, r4, #1
    7bce:	4666      	mov	r6, ip
    7bd0:	e708      	b.n	79e4 <__aeabi_dsub+0x10c>
    7bd2:	4812      	ldr	r0, [pc, #72]	; (7c1c <__aeabi_dsub+0x344>)
    7bd4:	4285      	cmp	r5, r0
    7bd6:	d100      	bne.n	7bda <__aeabi_dsub+0x302>
    7bd8:	e085      	b.n	7ce6 <__aeabi_dsub+0x40e>
    7bda:	001d      	movs	r5, r3
    7bdc:	e6bc      	b.n	7958 <__aeabi_dsub+0x80>
    7bde:	0029      	movs	r1, r5
    7be0:	3e1f      	subs	r6, #31
    7be2:	40f1      	lsrs	r1, r6
    7be4:	2b20      	cmp	r3, #32
    7be6:	d100      	bne.n	7bea <__aeabi_dsub+0x312>
    7be8:	e07f      	b.n	7cea <__aeabi_dsub+0x412>
    7bea:	2240      	movs	r2, #64	; 0x40
    7bec:	1ad3      	subs	r3, r2, r3
    7bee:	409d      	lsls	r5, r3
    7bf0:	432f      	orrs	r7, r5
    7bf2:	1e7d      	subs	r5, r7, #1
    7bf4:	41af      	sbcs	r7, r5
    7bf6:	2400      	movs	r4, #0
    7bf8:	430f      	orrs	r7, r1
    7bfa:	2600      	movs	r6, #0
    7bfc:	e78e      	b.n	7b1c <__aeabi_dsub+0x244>
    7bfe:	002b      	movs	r3, r5
    7c00:	000f      	movs	r7, r1
    7c02:	3b20      	subs	r3, #32
    7c04:	40df      	lsrs	r7, r3
    7c06:	2d20      	cmp	r5, #32
    7c08:	d071      	beq.n	7cee <__aeabi_dsub+0x416>
    7c0a:	2340      	movs	r3, #64	; 0x40
    7c0c:	1b5d      	subs	r5, r3, r5
    7c0e:	40a9      	lsls	r1, r5
    7c10:	430a      	orrs	r2, r1
    7c12:	1e51      	subs	r1, r2, #1
    7c14:	418a      	sbcs	r2, r1
    7c16:	2100      	movs	r1, #0
    7c18:	4317      	orrs	r7, r2
    7c1a:	e6af      	b.n	797c <__aeabi_dsub+0xa4>
    7c1c:	000007ff 	.word	0x000007ff
    7c20:	ff7fffff 	.word	0xff7fffff
    7c24:	800fffff 	.word	0x800fffff
    7c28:	2e00      	cmp	r6, #0
    7c2a:	d03e      	beq.n	7caa <__aeabi_dsub+0x3d2>
    7c2c:	4eb3      	ldr	r6, [pc, #716]	; (7efc <__aeabi_dsub+0x624>)
    7c2e:	45b4      	cmp	ip, r6
    7c30:	d045      	beq.n	7cbe <__aeabi_dsub+0x3e6>
    7c32:	2680      	movs	r6, #128	; 0x80
    7c34:	0436      	lsls	r6, r6, #16
    7c36:	426d      	negs	r5, r5
    7c38:	4334      	orrs	r4, r6
    7c3a:	2d38      	cmp	r5, #56	; 0x38
    7c3c:	dd00      	ble.n	7c40 <__aeabi_dsub+0x368>
    7c3e:	e0a8      	b.n	7d92 <__aeabi_dsub+0x4ba>
    7c40:	2d1f      	cmp	r5, #31
    7c42:	dd00      	ble.n	7c46 <__aeabi_dsub+0x36e>
    7c44:	e11f      	b.n	7e86 <__aeabi_dsub+0x5ae>
    7c46:	2620      	movs	r6, #32
    7c48:	0027      	movs	r7, r4
    7c4a:	4650      	mov	r0, sl
    7c4c:	1b76      	subs	r6, r6, r5
    7c4e:	40b7      	lsls	r7, r6
    7c50:	40e8      	lsrs	r0, r5
    7c52:	4307      	orrs	r7, r0
    7c54:	4650      	mov	r0, sl
    7c56:	40b0      	lsls	r0, r6
    7c58:	1e46      	subs	r6, r0, #1
    7c5a:	41b0      	sbcs	r0, r6
    7c5c:	40ec      	lsrs	r4, r5
    7c5e:	4338      	orrs	r0, r7
    7c60:	1a17      	subs	r7, r2, r0
    7c62:	42ba      	cmp	r2, r7
    7c64:	4192      	sbcs	r2, r2
    7c66:	1b0c      	subs	r4, r1, r4
    7c68:	4252      	negs	r2, r2
    7c6a:	1aa4      	subs	r4, r4, r2
    7c6c:	4666      	mov	r6, ip
    7c6e:	4698      	mov	r8, r3
    7c70:	e68b      	b.n	798a <__aeabi_dsub+0xb2>
    7c72:	4664      	mov	r4, ip
    7c74:	4667      	mov	r7, ip
    7c76:	432c      	orrs	r4, r5
    7c78:	d000      	beq.n	7c7c <__aeabi_dsub+0x3a4>
    7c7a:	e68b      	b.n	7994 <__aeabi_dsub+0xbc>
    7c7c:	2500      	movs	r5, #0
    7c7e:	2600      	movs	r6, #0
    7c80:	2700      	movs	r7, #0
    7c82:	e6ea      	b.n	7a5a <__aeabi_dsub+0x182>
    7c84:	001e      	movs	r6, r3
    7c86:	e6ad      	b.n	79e4 <__aeabi_dsub+0x10c>
    7c88:	2b1f      	cmp	r3, #31
    7c8a:	dc60      	bgt.n	7d4e <__aeabi_dsub+0x476>
    7c8c:	2720      	movs	r7, #32
    7c8e:	1af8      	subs	r0, r7, r3
    7c90:	000f      	movs	r7, r1
    7c92:	4684      	mov	ip, r0
    7c94:	4087      	lsls	r7, r0
    7c96:	0010      	movs	r0, r2
    7c98:	40d8      	lsrs	r0, r3
    7c9a:	4307      	orrs	r7, r0
    7c9c:	4660      	mov	r0, ip
    7c9e:	4082      	lsls	r2, r0
    7ca0:	1e50      	subs	r0, r2, #1
    7ca2:	4182      	sbcs	r2, r0
    7ca4:	40d9      	lsrs	r1, r3
    7ca6:	4317      	orrs	r7, r2
    7ca8:	e6f5      	b.n	7a96 <__aeabi_dsub+0x1be>
    7caa:	0026      	movs	r6, r4
    7cac:	4650      	mov	r0, sl
    7cae:	4306      	orrs	r6, r0
    7cb0:	d005      	beq.n	7cbe <__aeabi_dsub+0x3e6>
    7cb2:	43ed      	mvns	r5, r5
    7cb4:	2d00      	cmp	r5, #0
    7cb6:	d0d3      	beq.n	7c60 <__aeabi_dsub+0x388>
    7cb8:	4e90      	ldr	r6, [pc, #576]	; (7efc <__aeabi_dsub+0x624>)
    7cba:	45b4      	cmp	ip, r6
    7cbc:	d1bd      	bne.n	7c3a <__aeabi_dsub+0x362>
    7cbe:	000c      	movs	r4, r1
    7cc0:	0017      	movs	r7, r2
    7cc2:	4666      	mov	r6, ip
    7cc4:	4698      	mov	r8, r3
    7cc6:	e68d      	b.n	79e4 <__aeabi_dsub+0x10c>
    7cc8:	488c      	ldr	r0, [pc, #560]	; (7efc <__aeabi_dsub+0x624>)
    7cca:	4283      	cmp	r3, r0
    7ccc:	d00b      	beq.n	7ce6 <__aeabi_dsub+0x40e>
    7cce:	4663      	mov	r3, ip
    7cd0:	e6d9      	b.n	7a86 <__aeabi_dsub+0x1ae>
    7cd2:	2d00      	cmp	r5, #0
    7cd4:	d000      	beq.n	7cd8 <__aeabi_dsub+0x400>
    7cd6:	e096      	b.n	7e06 <__aeabi_dsub+0x52e>
    7cd8:	0008      	movs	r0, r1
    7cda:	4310      	orrs	r0, r2
    7cdc:	d100      	bne.n	7ce0 <__aeabi_dsub+0x408>
    7cde:	e0e2      	b.n	7ea6 <__aeabi_dsub+0x5ce>
    7ce0:	000c      	movs	r4, r1
    7ce2:	0017      	movs	r7, r2
    7ce4:	4698      	mov	r8, r3
    7ce6:	4e85      	ldr	r6, [pc, #532]	; (7efc <__aeabi_dsub+0x624>)
    7ce8:	e67c      	b.n	79e4 <__aeabi_dsub+0x10c>
    7cea:	2500      	movs	r5, #0
    7cec:	e780      	b.n	7bf0 <__aeabi_dsub+0x318>
    7cee:	2100      	movs	r1, #0
    7cf0:	e78e      	b.n	7c10 <__aeabi_dsub+0x338>
    7cf2:	0023      	movs	r3, r4
    7cf4:	4650      	mov	r0, sl
    7cf6:	4303      	orrs	r3, r0
    7cf8:	2e00      	cmp	r6, #0
    7cfa:	d000      	beq.n	7cfe <__aeabi_dsub+0x426>
    7cfc:	e0a8      	b.n	7e50 <__aeabi_dsub+0x578>
    7cfe:	2b00      	cmp	r3, #0
    7d00:	d100      	bne.n	7d04 <__aeabi_dsub+0x42c>
    7d02:	e0de      	b.n	7ec2 <__aeabi_dsub+0x5ea>
    7d04:	000b      	movs	r3, r1
    7d06:	4313      	orrs	r3, r2
    7d08:	d100      	bne.n	7d0c <__aeabi_dsub+0x434>
    7d0a:	e66b      	b.n	79e4 <__aeabi_dsub+0x10c>
    7d0c:	4452      	add	r2, sl
    7d0e:	4552      	cmp	r2, sl
    7d10:	4180      	sbcs	r0, r0
    7d12:	1864      	adds	r4, r4, r1
    7d14:	4240      	negs	r0, r0
    7d16:	1824      	adds	r4, r4, r0
    7d18:	0017      	movs	r7, r2
    7d1a:	0223      	lsls	r3, r4, #8
    7d1c:	d400      	bmi.n	7d20 <__aeabi_dsub+0x448>
    7d1e:	e6fd      	b.n	7b1c <__aeabi_dsub+0x244>
    7d20:	4b77      	ldr	r3, [pc, #476]	; (7f00 <__aeabi_dsub+0x628>)
    7d22:	4666      	mov	r6, ip
    7d24:	401c      	ands	r4, r3
    7d26:	e65d      	b.n	79e4 <__aeabi_dsub+0x10c>
    7d28:	0025      	movs	r5, r4
    7d2a:	4650      	mov	r0, sl
    7d2c:	4305      	orrs	r5, r0
    7d2e:	2e00      	cmp	r6, #0
    7d30:	d1cf      	bne.n	7cd2 <__aeabi_dsub+0x3fa>
    7d32:	2d00      	cmp	r5, #0
    7d34:	d14f      	bne.n	7dd6 <__aeabi_dsub+0x4fe>
    7d36:	000c      	movs	r4, r1
    7d38:	4314      	orrs	r4, r2
    7d3a:	d100      	bne.n	7d3e <__aeabi_dsub+0x466>
    7d3c:	e0a0      	b.n	7e80 <__aeabi_dsub+0x5a8>
    7d3e:	000c      	movs	r4, r1
    7d40:	0017      	movs	r7, r2
    7d42:	4698      	mov	r8, r3
    7d44:	e64e      	b.n	79e4 <__aeabi_dsub+0x10c>
    7d46:	4666      	mov	r6, ip
    7d48:	2400      	movs	r4, #0
    7d4a:	2700      	movs	r7, #0
    7d4c:	e685      	b.n	7a5a <__aeabi_dsub+0x182>
    7d4e:	001f      	movs	r7, r3
    7d50:	0008      	movs	r0, r1
    7d52:	3f20      	subs	r7, #32
    7d54:	40f8      	lsrs	r0, r7
    7d56:	0007      	movs	r7, r0
    7d58:	2b20      	cmp	r3, #32
    7d5a:	d100      	bne.n	7d5e <__aeabi_dsub+0x486>
    7d5c:	e08e      	b.n	7e7c <__aeabi_dsub+0x5a4>
    7d5e:	2040      	movs	r0, #64	; 0x40
    7d60:	1ac3      	subs	r3, r0, r3
    7d62:	4099      	lsls	r1, r3
    7d64:	430a      	orrs	r2, r1
    7d66:	1e51      	subs	r1, r2, #1
    7d68:	418a      	sbcs	r2, r1
    7d6a:	2100      	movs	r1, #0
    7d6c:	4317      	orrs	r7, r2
    7d6e:	e692      	b.n	7a96 <__aeabi_dsub+0x1be>
    7d70:	2e00      	cmp	r6, #0
    7d72:	d114      	bne.n	7d9e <__aeabi_dsub+0x4c6>
    7d74:	0026      	movs	r6, r4
    7d76:	4650      	mov	r0, sl
    7d78:	4306      	orrs	r6, r0
    7d7a:	d062      	beq.n	7e42 <__aeabi_dsub+0x56a>
    7d7c:	43db      	mvns	r3, r3
    7d7e:	2b00      	cmp	r3, #0
    7d80:	d15c      	bne.n	7e3c <__aeabi_dsub+0x564>
    7d82:	1887      	adds	r7, r0, r2
    7d84:	4297      	cmp	r7, r2
    7d86:	4192      	sbcs	r2, r2
    7d88:	1864      	adds	r4, r4, r1
    7d8a:	4252      	negs	r2, r2
    7d8c:	18a4      	adds	r4, r4, r2
    7d8e:	4666      	mov	r6, ip
    7d90:	e687      	b.n	7aa2 <__aeabi_dsub+0x1ca>
    7d92:	4650      	mov	r0, sl
    7d94:	4320      	orrs	r0, r4
    7d96:	1e44      	subs	r4, r0, #1
    7d98:	41a0      	sbcs	r0, r4
    7d9a:	2400      	movs	r4, #0
    7d9c:	e760      	b.n	7c60 <__aeabi_dsub+0x388>
    7d9e:	4e57      	ldr	r6, [pc, #348]	; (7efc <__aeabi_dsub+0x624>)
    7da0:	45b4      	cmp	ip, r6
    7da2:	d04e      	beq.n	7e42 <__aeabi_dsub+0x56a>
    7da4:	2680      	movs	r6, #128	; 0x80
    7da6:	0436      	lsls	r6, r6, #16
    7da8:	425b      	negs	r3, r3
    7daa:	4334      	orrs	r4, r6
    7dac:	2b38      	cmp	r3, #56	; 0x38
    7dae:	dd00      	ble.n	7db2 <__aeabi_dsub+0x4da>
    7db0:	e07f      	b.n	7eb2 <__aeabi_dsub+0x5da>
    7db2:	2b1f      	cmp	r3, #31
    7db4:	dd00      	ble.n	7db8 <__aeabi_dsub+0x4e0>
    7db6:	e08b      	b.n	7ed0 <__aeabi_dsub+0x5f8>
    7db8:	2620      	movs	r6, #32
    7dba:	0027      	movs	r7, r4
    7dbc:	4650      	mov	r0, sl
    7dbe:	1af6      	subs	r6, r6, r3
    7dc0:	40b7      	lsls	r7, r6
    7dc2:	40d8      	lsrs	r0, r3
    7dc4:	4307      	orrs	r7, r0
    7dc6:	4650      	mov	r0, sl
    7dc8:	40b0      	lsls	r0, r6
    7dca:	1e46      	subs	r6, r0, #1
    7dcc:	41b0      	sbcs	r0, r6
    7dce:	4307      	orrs	r7, r0
    7dd0:	40dc      	lsrs	r4, r3
    7dd2:	18bf      	adds	r7, r7, r2
    7dd4:	e7d6      	b.n	7d84 <__aeabi_dsub+0x4ac>
    7dd6:	000d      	movs	r5, r1
    7dd8:	4315      	orrs	r5, r2
    7dda:	d100      	bne.n	7dde <__aeabi_dsub+0x506>
    7ddc:	e602      	b.n	79e4 <__aeabi_dsub+0x10c>
    7dde:	4650      	mov	r0, sl
    7de0:	1a80      	subs	r0, r0, r2
    7de2:	4582      	cmp	sl, r0
    7de4:	41bf      	sbcs	r7, r7
    7de6:	1a65      	subs	r5, r4, r1
    7de8:	427f      	negs	r7, r7
    7dea:	1bed      	subs	r5, r5, r7
    7dec:	4684      	mov	ip, r0
    7dee:	0228      	lsls	r0, r5, #8
    7df0:	d400      	bmi.n	7df4 <__aeabi_dsub+0x51c>
    7df2:	e68d      	b.n	7b10 <__aeabi_dsub+0x238>
    7df4:	4650      	mov	r0, sl
    7df6:	1a17      	subs	r7, r2, r0
    7df8:	42ba      	cmp	r2, r7
    7dfa:	4192      	sbcs	r2, r2
    7dfc:	1b0c      	subs	r4, r1, r4
    7dfe:	4252      	negs	r2, r2
    7e00:	1aa4      	subs	r4, r4, r2
    7e02:	4698      	mov	r8, r3
    7e04:	e5ee      	b.n	79e4 <__aeabi_dsub+0x10c>
    7e06:	000d      	movs	r5, r1
    7e08:	4315      	orrs	r5, r2
    7e0a:	d100      	bne.n	7e0e <__aeabi_dsub+0x536>
    7e0c:	e76b      	b.n	7ce6 <__aeabi_dsub+0x40e>
    7e0e:	4650      	mov	r0, sl
    7e10:	0767      	lsls	r7, r4, #29
    7e12:	08c0      	lsrs	r0, r0, #3
    7e14:	4307      	orrs	r7, r0
    7e16:	2080      	movs	r0, #128	; 0x80
    7e18:	08e4      	lsrs	r4, r4, #3
    7e1a:	0300      	lsls	r0, r0, #12
    7e1c:	4204      	tst	r4, r0
    7e1e:	d007      	beq.n	7e30 <__aeabi_dsub+0x558>
    7e20:	08cd      	lsrs	r5, r1, #3
    7e22:	4205      	tst	r5, r0
    7e24:	d104      	bne.n	7e30 <__aeabi_dsub+0x558>
    7e26:	002c      	movs	r4, r5
    7e28:	4698      	mov	r8, r3
    7e2a:	08d7      	lsrs	r7, r2, #3
    7e2c:	0749      	lsls	r1, r1, #29
    7e2e:	430f      	orrs	r7, r1
    7e30:	0f7b      	lsrs	r3, r7, #29
    7e32:	00e4      	lsls	r4, r4, #3
    7e34:	431c      	orrs	r4, r3
    7e36:	00ff      	lsls	r7, r7, #3
    7e38:	4e30      	ldr	r6, [pc, #192]	; (7efc <__aeabi_dsub+0x624>)
    7e3a:	e5d3      	b.n	79e4 <__aeabi_dsub+0x10c>
    7e3c:	4e2f      	ldr	r6, [pc, #188]	; (7efc <__aeabi_dsub+0x624>)
    7e3e:	45b4      	cmp	ip, r6
    7e40:	d1b4      	bne.n	7dac <__aeabi_dsub+0x4d4>
    7e42:	000c      	movs	r4, r1
    7e44:	0017      	movs	r7, r2
    7e46:	4666      	mov	r6, ip
    7e48:	e5cc      	b.n	79e4 <__aeabi_dsub+0x10c>
    7e4a:	2700      	movs	r7, #0
    7e4c:	2400      	movs	r4, #0
    7e4e:	e5e8      	b.n	7a22 <__aeabi_dsub+0x14a>
    7e50:	2b00      	cmp	r3, #0
    7e52:	d039      	beq.n	7ec8 <__aeabi_dsub+0x5f0>
    7e54:	000b      	movs	r3, r1
    7e56:	4313      	orrs	r3, r2
    7e58:	d100      	bne.n	7e5c <__aeabi_dsub+0x584>
    7e5a:	e744      	b.n	7ce6 <__aeabi_dsub+0x40e>
    7e5c:	08c0      	lsrs	r0, r0, #3
    7e5e:	0767      	lsls	r7, r4, #29
    7e60:	4307      	orrs	r7, r0
    7e62:	2080      	movs	r0, #128	; 0x80
    7e64:	08e4      	lsrs	r4, r4, #3
    7e66:	0300      	lsls	r0, r0, #12
    7e68:	4204      	tst	r4, r0
    7e6a:	d0e1      	beq.n	7e30 <__aeabi_dsub+0x558>
    7e6c:	08cb      	lsrs	r3, r1, #3
    7e6e:	4203      	tst	r3, r0
    7e70:	d1de      	bne.n	7e30 <__aeabi_dsub+0x558>
    7e72:	08d7      	lsrs	r7, r2, #3
    7e74:	0749      	lsls	r1, r1, #29
    7e76:	430f      	orrs	r7, r1
    7e78:	001c      	movs	r4, r3
    7e7a:	e7d9      	b.n	7e30 <__aeabi_dsub+0x558>
    7e7c:	2100      	movs	r1, #0
    7e7e:	e771      	b.n	7d64 <__aeabi_dsub+0x48c>
    7e80:	2500      	movs	r5, #0
    7e82:	2700      	movs	r7, #0
    7e84:	e5e9      	b.n	7a5a <__aeabi_dsub+0x182>
    7e86:	002e      	movs	r6, r5
    7e88:	0027      	movs	r7, r4
    7e8a:	3e20      	subs	r6, #32
    7e8c:	40f7      	lsrs	r7, r6
    7e8e:	2d20      	cmp	r5, #32
    7e90:	d02f      	beq.n	7ef2 <__aeabi_dsub+0x61a>
    7e92:	2640      	movs	r6, #64	; 0x40
    7e94:	1b75      	subs	r5, r6, r5
    7e96:	40ac      	lsls	r4, r5
    7e98:	4650      	mov	r0, sl
    7e9a:	4320      	orrs	r0, r4
    7e9c:	1e44      	subs	r4, r0, #1
    7e9e:	41a0      	sbcs	r0, r4
    7ea0:	2400      	movs	r4, #0
    7ea2:	4338      	orrs	r0, r7
    7ea4:	e6dc      	b.n	7c60 <__aeabi_dsub+0x388>
    7ea6:	2480      	movs	r4, #128	; 0x80
    7ea8:	2500      	movs	r5, #0
    7eaa:	0324      	lsls	r4, r4, #12
    7eac:	4e13      	ldr	r6, [pc, #76]	; (7efc <__aeabi_dsub+0x624>)
    7eae:	2700      	movs	r7, #0
    7eb0:	e5d3      	b.n	7a5a <__aeabi_dsub+0x182>
    7eb2:	4650      	mov	r0, sl
    7eb4:	4320      	orrs	r0, r4
    7eb6:	0007      	movs	r7, r0
    7eb8:	1e78      	subs	r0, r7, #1
    7eba:	4187      	sbcs	r7, r0
    7ebc:	2400      	movs	r4, #0
    7ebe:	18bf      	adds	r7, r7, r2
    7ec0:	e760      	b.n	7d84 <__aeabi_dsub+0x4ac>
    7ec2:	000c      	movs	r4, r1
    7ec4:	0017      	movs	r7, r2
    7ec6:	e58d      	b.n	79e4 <__aeabi_dsub+0x10c>
    7ec8:	000c      	movs	r4, r1
    7eca:	0017      	movs	r7, r2
    7ecc:	4e0b      	ldr	r6, [pc, #44]	; (7efc <__aeabi_dsub+0x624>)
    7ece:	e589      	b.n	79e4 <__aeabi_dsub+0x10c>
    7ed0:	001e      	movs	r6, r3
    7ed2:	0027      	movs	r7, r4
    7ed4:	3e20      	subs	r6, #32
    7ed6:	40f7      	lsrs	r7, r6
    7ed8:	2b20      	cmp	r3, #32
    7eda:	d00c      	beq.n	7ef6 <__aeabi_dsub+0x61e>
    7edc:	2640      	movs	r6, #64	; 0x40
    7ede:	1af3      	subs	r3, r6, r3
    7ee0:	409c      	lsls	r4, r3
    7ee2:	4650      	mov	r0, sl
    7ee4:	4320      	orrs	r0, r4
    7ee6:	1e44      	subs	r4, r0, #1
    7ee8:	41a0      	sbcs	r0, r4
    7eea:	4307      	orrs	r7, r0
    7eec:	2400      	movs	r4, #0
    7eee:	18bf      	adds	r7, r7, r2
    7ef0:	e748      	b.n	7d84 <__aeabi_dsub+0x4ac>
    7ef2:	2400      	movs	r4, #0
    7ef4:	e7d0      	b.n	7e98 <__aeabi_dsub+0x5c0>
    7ef6:	2400      	movs	r4, #0
    7ef8:	e7f3      	b.n	7ee2 <__aeabi_dsub+0x60a>
    7efa:	46c0      	nop			; (mov r8, r8)
    7efc:	000007ff 	.word	0x000007ff
    7f00:	ff7fffff 	.word	0xff7fffff

00007f04 <__aeabi_d2iz>:
    7f04:	b530      	push	{r4, r5, lr}
    7f06:	4d13      	ldr	r5, [pc, #76]	; (7f54 <__aeabi_d2iz+0x50>)
    7f08:	030a      	lsls	r2, r1, #12
    7f0a:	004b      	lsls	r3, r1, #1
    7f0c:	0b12      	lsrs	r2, r2, #12
    7f0e:	0d5b      	lsrs	r3, r3, #21
    7f10:	0fc9      	lsrs	r1, r1, #31
    7f12:	2400      	movs	r4, #0
    7f14:	42ab      	cmp	r3, r5
    7f16:	dd10      	ble.n	7f3a <__aeabi_d2iz+0x36>
    7f18:	4c0f      	ldr	r4, [pc, #60]	; (7f58 <__aeabi_d2iz+0x54>)
    7f1a:	42a3      	cmp	r3, r4
    7f1c:	dc0f      	bgt.n	7f3e <__aeabi_d2iz+0x3a>
    7f1e:	2480      	movs	r4, #128	; 0x80
    7f20:	4d0e      	ldr	r5, [pc, #56]	; (7f5c <__aeabi_d2iz+0x58>)
    7f22:	0364      	lsls	r4, r4, #13
    7f24:	4322      	orrs	r2, r4
    7f26:	1aed      	subs	r5, r5, r3
    7f28:	2d1f      	cmp	r5, #31
    7f2a:	dd0b      	ble.n	7f44 <__aeabi_d2iz+0x40>
    7f2c:	480c      	ldr	r0, [pc, #48]	; (7f60 <__aeabi_d2iz+0x5c>)
    7f2e:	1ac3      	subs	r3, r0, r3
    7f30:	40da      	lsrs	r2, r3
    7f32:	4254      	negs	r4, r2
    7f34:	2900      	cmp	r1, #0
    7f36:	d100      	bne.n	7f3a <__aeabi_d2iz+0x36>
    7f38:	0014      	movs	r4, r2
    7f3a:	0020      	movs	r0, r4
    7f3c:	bd30      	pop	{r4, r5, pc}
    7f3e:	4b09      	ldr	r3, [pc, #36]	; (7f64 <__aeabi_d2iz+0x60>)
    7f40:	18cc      	adds	r4, r1, r3
    7f42:	e7fa      	b.n	7f3a <__aeabi_d2iz+0x36>
    7f44:	4c08      	ldr	r4, [pc, #32]	; (7f68 <__aeabi_d2iz+0x64>)
    7f46:	40e8      	lsrs	r0, r5
    7f48:	46a4      	mov	ip, r4
    7f4a:	4463      	add	r3, ip
    7f4c:	409a      	lsls	r2, r3
    7f4e:	4302      	orrs	r2, r0
    7f50:	e7ef      	b.n	7f32 <__aeabi_d2iz+0x2e>
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	000003fe 	.word	0x000003fe
    7f58:	0000041d 	.word	0x0000041d
    7f5c:	00000433 	.word	0x00000433
    7f60:	00000413 	.word	0x00000413
    7f64:	7fffffff 	.word	0x7fffffff
    7f68:	fffffbed 	.word	0xfffffbed

00007f6c <__aeabi_ui2d>:
    7f6c:	b510      	push	{r4, lr}
    7f6e:	1e04      	subs	r4, r0, #0
    7f70:	d028      	beq.n	7fc4 <__aeabi_ui2d+0x58>
    7f72:	f000 f833 	bl	7fdc <__clzsi2>
    7f76:	4b15      	ldr	r3, [pc, #84]	; (7fcc <__aeabi_ui2d+0x60>)
    7f78:	4a15      	ldr	r2, [pc, #84]	; (7fd0 <__aeabi_ui2d+0x64>)
    7f7a:	1a1b      	subs	r3, r3, r0
    7f7c:	1ad2      	subs	r2, r2, r3
    7f7e:	2a1f      	cmp	r2, #31
    7f80:	dd15      	ble.n	7fae <__aeabi_ui2d+0x42>
    7f82:	4a14      	ldr	r2, [pc, #80]	; (7fd4 <__aeabi_ui2d+0x68>)
    7f84:	1ad2      	subs	r2, r2, r3
    7f86:	4094      	lsls	r4, r2
    7f88:	2200      	movs	r2, #0
    7f8a:	0324      	lsls	r4, r4, #12
    7f8c:	055b      	lsls	r3, r3, #21
    7f8e:	0b24      	lsrs	r4, r4, #12
    7f90:	0d5b      	lsrs	r3, r3, #21
    7f92:	2100      	movs	r1, #0
    7f94:	0010      	movs	r0, r2
    7f96:	0324      	lsls	r4, r4, #12
    7f98:	0d0a      	lsrs	r2, r1, #20
    7f9a:	0b24      	lsrs	r4, r4, #12
    7f9c:	0512      	lsls	r2, r2, #20
    7f9e:	4322      	orrs	r2, r4
    7fa0:	4c0d      	ldr	r4, [pc, #52]	; (7fd8 <__aeabi_ui2d+0x6c>)
    7fa2:	051b      	lsls	r3, r3, #20
    7fa4:	4022      	ands	r2, r4
    7fa6:	4313      	orrs	r3, r2
    7fa8:	005b      	lsls	r3, r3, #1
    7faa:	0859      	lsrs	r1, r3, #1
    7fac:	bd10      	pop	{r4, pc}
    7fae:	0021      	movs	r1, r4
    7fb0:	4091      	lsls	r1, r2
    7fb2:	000a      	movs	r2, r1
    7fb4:	210b      	movs	r1, #11
    7fb6:	1a08      	subs	r0, r1, r0
    7fb8:	40c4      	lsrs	r4, r0
    7fba:	055b      	lsls	r3, r3, #21
    7fbc:	0324      	lsls	r4, r4, #12
    7fbe:	0b24      	lsrs	r4, r4, #12
    7fc0:	0d5b      	lsrs	r3, r3, #21
    7fc2:	e7e6      	b.n	7f92 <__aeabi_ui2d+0x26>
    7fc4:	2300      	movs	r3, #0
    7fc6:	2400      	movs	r4, #0
    7fc8:	2200      	movs	r2, #0
    7fca:	e7e2      	b.n	7f92 <__aeabi_ui2d+0x26>
    7fcc:	0000041e 	.word	0x0000041e
    7fd0:	00000433 	.word	0x00000433
    7fd4:	00000413 	.word	0x00000413
    7fd8:	800fffff 	.word	0x800fffff

00007fdc <__clzsi2>:
    7fdc:	211c      	movs	r1, #28
    7fde:	2301      	movs	r3, #1
    7fe0:	041b      	lsls	r3, r3, #16
    7fe2:	4298      	cmp	r0, r3
    7fe4:	d301      	bcc.n	7fea <__clzsi2+0xe>
    7fe6:	0c00      	lsrs	r0, r0, #16
    7fe8:	3910      	subs	r1, #16
    7fea:	0a1b      	lsrs	r3, r3, #8
    7fec:	4298      	cmp	r0, r3
    7fee:	d301      	bcc.n	7ff4 <__clzsi2+0x18>
    7ff0:	0a00      	lsrs	r0, r0, #8
    7ff2:	3908      	subs	r1, #8
    7ff4:	091b      	lsrs	r3, r3, #4
    7ff6:	4298      	cmp	r0, r3
    7ff8:	d301      	bcc.n	7ffe <__clzsi2+0x22>
    7ffa:	0900      	lsrs	r0, r0, #4
    7ffc:	3904      	subs	r1, #4
    7ffe:	a202      	add	r2, pc, #8	; (adr r2, 8008 <__clzsi2+0x2c>)
    8000:	5c10      	ldrb	r0, [r2, r0]
    8002:	1840      	adds	r0, r0, r1
    8004:	4770      	bx	lr
    8006:	46c0      	nop			; (mov r8, r8)
    8008:	02020304 	.word	0x02020304
    800c:	01010101 	.word	0x01010101
	...

00008018 <atoi>:
    8018:	b510      	push	{r4, lr}
    801a:	220a      	movs	r2, #10
    801c:	2100      	movs	r1, #0
    801e:	f000 fa81 	bl	8524 <strtol>
    8022:	bd10      	pop	{r4, pc}

00008024 <__libc_init_array>:
    8024:	b570      	push	{r4, r5, r6, lr}
    8026:	2600      	movs	r6, #0
    8028:	4d0c      	ldr	r5, [pc, #48]	; (805c <__libc_init_array+0x38>)
    802a:	4c0d      	ldr	r4, [pc, #52]	; (8060 <__libc_init_array+0x3c>)
    802c:	1b64      	subs	r4, r4, r5
    802e:	10a4      	asrs	r4, r4, #2
    8030:	42a6      	cmp	r6, r4
    8032:	d109      	bne.n	8048 <__libc_init_array+0x24>
    8034:	2600      	movs	r6, #0
    8036:	f002 fc19 	bl	a86c <_init>
    803a:	4d0a      	ldr	r5, [pc, #40]	; (8064 <__libc_init_array+0x40>)
    803c:	4c0a      	ldr	r4, [pc, #40]	; (8068 <__libc_init_array+0x44>)
    803e:	1b64      	subs	r4, r4, r5
    8040:	10a4      	asrs	r4, r4, #2
    8042:	42a6      	cmp	r6, r4
    8044:	d105      	bne.n	8052 <__libc_init_array+0x2e>
    8046:	bd70      	pop	{r4, r5, r6, pc}
    8048:	00b3      	lsls	r3, r6, #2
    804a:	58eb      	ldr	r3, [r5, r3]
    804c:	4798      	blx	r3
    804e:	3601      	adds	r6, #1
    8050:	e7ee      	b.n	8030 <__libc_init_array+0xc>
    8052:	00b3      	lsls	r3, r6, #2
    8054:	58eb      	ldr	r3, [r5, r3]
    8056:	4798      	blx	r3
    8058:	3601      	adds	r6, #1
    805a:	e7f2      	b.n	8042 <__libc_init_array+0x1e>
    805c:	0000a878 	.word	0x0000a878
    8060:	0000a878 	.word	0x0000a878
    8064:	0000a878 	.word	0x0000a878
    8068:	0000a87c 	.word	0x0000a87c

0000806c <memcpy>:
    806c:	2300      	movs	r3, #0
    806e:	b510      	push	{r4, lr}
    8070:	429a      	cmp	r2, r3
    8072:	d100      	bne.n	8076 <memcpy+0xa>
    8074:	bd10      	pop	{r4, pc}
    8076:	5ccc      	ldrb	r4, [r1, r3]
    8078:	54c4      	strb	r4, [r0, r3]
    807a:	3301      	adds	r3, #1
    807c:	e7f8      	b.n	8070 <memcpy+0x4>

0000807e <memset>:
    807e:	0003      	movs	r3, r0
    8080:	1882      	adds	r2, r0, r2
    8082:	4293      	cmp	r3, r2
    8084:	d100      	bne.n	8088 <memset+0xa>
    8086:	4770      	bx	lr
    8088:	7019      	strb	r1, [r3, #0]
    808a:	3301      	adds	r3, #1
    808c:	e7f9      	b.n	8082 <memset+0x4>
	...

00008090 <iprintf>:
    8090:	b40f      	push	{r0, r1, r2, r3}
    8092:	4b0b      	ldr	r3, [pc, #44]	; (80c0 <iprintf+0x30>)
    8094:	b513      	push	{r0, r1, r4, lr}
    8096:	681c      	ldr	r4, [r3, #0]
    8098:	2c00      	cmp	r4, #0
    809a:	d005      	beq.n	80a8 <iprintf+0x18>
    809c:	69a3      	ldr	r3, [r4, #24]
    809e:	2b00      	cmp	r3, #0
    80a0:	d102      	bne.n	80a8 <iprintf+0x18>
    80a2:	0020      	movs	r0, r4
    80a4:	f000 fc2a 	bl	88fc <__sinit>
    80a8:	ab05      	add	r3, sp, #20
    80aa:	9a04      	ldr	r2, [sp, #16]
    80ac:	68a1      	ldr	r1, [r4, #8]
    80ae:	0020      	movs	r0, r4
    80b0:	9301      	str	r3, [sp, #4]
    80b2:	f000 fe3d 	bl	8d30 <_vfiprintf_r>
    80b6:	bc16      	pop	{r1, r2, r4}
    80b8:	bc08      	pop	{r3}
    80ba:	b004      	add	sp, #16
    80bc:	4718      	bx	r3
    80be:	46c0      	nop			; (mov r8, r8)
    80c0:	20000068 	.word	0x20000068

000080c4 <_puts_r>:
    80c4:	b570      	push	{r4, r5, r6, lr}
    80c6:	0005      	movs	r5, r0
    80c8:	000e      	movs	r6, r1
    80ca:	2800      	cmp	r0, #0
    80cc:	d004      	beq.n	80d8 <_puts_r+0x14>
    80ce:	6983      	ldr	r3, [r0, #24]
    80d0:	2b00      	cmp	r3, #0
    80d2:	d101      	bne.n	80d8 <_puts_r+0x14>
    80d4:	f000 fc12 	bl	88fc <__sinit>
    80d8:	69ab      	ldr	r3, [r5, #24]
    80da:	68ac      	ldr	r4, [r5, #8]
    80dc:	2b00      	cmp	r3, #0
    80de:	d102      	bne.n	80e6 <_puts_r+0x22>
    80e0:	0028      	movs	r0, r5
    80e2:	f000 fc0b 	bl	88fc <__sinit>
    80e6:	4b24      	ldr	r3, [pc, #144]	; (8178 <_puts_r+0xb4>)
    80e8:	429c      	cmp	r4, r3
    80ea:	d10f      	bne.n	810c <_puts_r+0x48>
    80ec:	686c      	ldr	r4, [r5, #4]
    80ee:	89a3      	ldrh	r3, [r4, #12]
    80f0:	071b      	lsls	r3, r3, #28
    80f2:	d502      	bpl.n	80fa <_puts_r+0x36>
    80f4:	6923      	ldr	r3, [r4, #16]
    80f6:	2b00      	cmp	r3, #0
    80f8:	d120      	bne.n	813c <_puts_r+0x78>
    80fa:	0021      	movs	r1, r4
    80fc:	0028      	movs	r0, r5
    80fe:	f000 fa7b 	bl	85f8 <__swsetup_r>
    8102:	2800      	cmp	r0, #0
    8104:	d01a      	beq.n	813c <_puts_r+0x78>
    8106:	2001      	movs	r0, #1
    8108:	4240      	negs	r0, r0
    810a:	bd70      	pop	{r4, r5, r6, pc}
    810c:	4b1b      	ldr	r3, [pc, #108]	; (817c <_puts_r+0xb8>)
    810e:	429c      	cmp	r4, r3
    8110:	d101      	bne.n	8116 <_puts_r+0x52>
    8112:	68ac      	ldr	r4, [r5, #8]
    8114:	e7eb      	b.n	80ee <_puts_r+0x2a>
    8116:	4b1a      	ldr	r3, [pc, #104]	; (8180 <_puts_r+0xbc>)
    8118:	429c      	cmp	r4, r3
    811a:	d1e8      	bne.n	80ee <_puts_r+0x2a>
    811c:	68ec      	ldr	r4, [r5, #12]
    811e:	e7e6      	b.n	80ee <_puts_r+0x2a>
    8120:	3b01      	subs	r3, #1
    8122:	3601      	adds	r6, #1
    8124:	60a3      	str	r3, [r4, #8]
    8126:	2b00      	cmp	r3, #0
    8128:	da04      	bge.n	8134 <_puts_r+0x70>
    812a:	69a2      	ldr	r2, [r4, #24]
    812c:	4293      	cmp	r3, r2
    812e:	db16      	blt.n	815e <_puts_r+0x9a>
    8130:	290a      	cmp	r1, #10
    8132:	d014      	beq.n	815e <_puts_r+0x9a>
    8134:	6823      	ldr	r3, [r4, #0]
    8136:	1c5a      	adds	r2, r3, #1
    8138:	6022      	str	r2, [r4, #0]
    813a:	7019      	strb	r1, [r3, #0]
    813c:	7831      	ldrb	r1, [r6, #0]
    813e:	68a3      	ldr	r3, [r4, #8]
    8140:	2900      	cmp	r1, #0
    8142:	d1ed      	bne.n	8120 <_puts_r+0x5c>
    8144:	3b01      	subs	r3, #1
    8146:	60a3      	str	r3, [r4, #8]
    8148:	2b00      	cmp	r3, #0
    814a:	da0f      	bge.n	816c <_puts_r+0xa8>
    814c:	0022      	movs	r2, r4
    814e:	310a      	adds	r1, #10
    8150:	0028      	movs	r0, r5
    8152:	f000 f9fb 	bl	854c <__swbuf_r>
    8156:	1c43      	adds	r3, r0, #1
    8158:	d0d5      	beq.n	8106 <_puts_r+0x42>
    815a:	200a      	movs	r0, #10
    815c:	e7d5      	b.n	810a <_puts_r+0x46>
    815e:	0022      	movs	r2, r4
    8160:	0028      	movs	r0, r5
    8162:	f000 f9f3 	bl	854c <__swbuf_r>
    8166:	1c43      	adds	r3, r0, #1
    8168:	d1e8      	bne.n	813c <_puts_r+0x78>
    816a:	e7cc      	b.n	8106 <_puts_r+0x42>
    816c:	200a      	movs	r0, #10
    816e:	6823      	ldr	r3, [r4, #0]
    8170:	1c5a      	adds	r2, r3, #1
    8172:	6022      	str	r2, [r4, #0]
    8174:	7018      	strb	r0, [r3, #0]
    8176:	e7c8      	b.n	810a <_puts_r+0x46>
    8178:	0000a6c4 	.word	0x0000a6c4
    817c:	0000a6e4 	.word	0x0000a6e4
    8180:	0000a6a4 	.word	0x0000a6a4

00008184 <puts>:
    8184:	b510      	push	{r4, lr}
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <puts+0x10>)
    8188:	0001      	movs	r1, r0
    818a:	6818      	ldr	r0, [r3, #0]
    818c:	f7ff ff9a 	bl	80c4 <_puts_r>
    8190:	bd10      	pop	{r4, pc}
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	20000068 	.word	0x20000068

00008198 <iscanf>:
    8198:	b40f      	push	{r0, r1, r2, r3}
    819a:	4b0b      	ldr	r3, [pc, #44]	; (81c8 <iscanf+0x30>)
    819c:	b513      	push	{r0, r1, r4, lr}
    819e:	681c      	ldr	r4, [r3, #0]
    81a0:	2c00      	cmp	r4, #0
    81a2:	d005      	beq.n	81b0 <iscanf+0x18>
    81a4:	69a3      	ldr	r3, [r4, #24]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d102      	bne.n	81b0 <iscanf+0x18>
    81aa:	0020      	movs	r0, r4
    81ac:	f000 fba6 	bl	88fc <__sinit>
    81b0:	ab05      	add	r3, sp, #20
    81b2:	9a04      	ldr	r2, [sp, #16]
    81b4:	6861      	ldr	r1, [r4, #4]
    81b6:	0020      	movs	r0, r4
    81b8:	9301      	str	r3, [sp, #4]
    81ba:	f001 f9e3 	bl	9584 <_vfiscanf_r>
    81be:	bc16      	pop	{r1, r2, r4}
    81c0:	bc08      	pop	{r3}
    81c2:	b004      	add	sp, #16
    81c4:	4718      	bx	r3
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	20000068 	.word	0x20000068

000081cc <setbuf>:
    81cc:	424a      	negs	r2, r1
    81ce:	414a      	adcs	r2, r1
    81d0:	2380      	movs	r3, #128	; 0x80
    81d2:	b510      	push	{r4, lr}
    81d4:	0052      	lsls	r2, r2, #1
    81d6:	00db      	lsls	r3, r3, #3
    81d8:	f000 f802 	bl	81e0 <setvbuf>
    81dc:	bd10      	pop	{r4, pc}
	...

000081e0 <setvbuf>:
    81e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81e2:	001d      	movs	r5, r3
    81e4:	4b4f      	ldr	r3, [pc, #316]	; (8324 <setvbuf+0x144>)
    81e6:	b085      	sub	sp, #20
    81e8:	681e      	ldr	r6, [r3, #0]
    81ea:	0004      	movs	r4, r0
    81ec:	000f      	movs	r7, r1
    81ee:	9200      	str	r2, [sp, #0]
    81f0:	2e00      	cmp	r6, #0
    81f2:	d005      	beq.n	8200 <setvbuf+0x20>
    81f4:	69b3      	ldr	r3, [r6, #24]
    81f6:	2b00      	cmp	r3, #0
    81f8:	d102      	bne.n	8200 <setvbuf+0x20>
    81fa:	0030      	movs	r0, r6
    81fc:	f000 fb7e 	bl	88fc <__sinit>
    8200:	4b49      	ldr	r3, [pc, #292]	; (8328 <setvbuf+0x148>)
    8202:	429c      	cmp	r4, r3
    8204:	d150      	bne.n	82a8 <setvbuf+0xc8>
    8206:	6874      	ldr	r4, [r6, #4]
    8208:	9b00      	ldr	r3, [sp, #0]
    820a:	2b02      	cmp	r3, #2
    820c:	d005      	beq.n	821a <setvbuf+0x3a>
    820e:	2b01      	cmp	r3, #1
    8210:	d900      	bls.n	8214 <setvbuf+0x34>
    8212:	e084      	b.n	831e <setvbuf+0x13e>
    8214:	2d00      	cmp	r5, #0
    8216:	da00      	bge.n	821a <setvbuf+0x3a>
    8218:	e081      	b.n	831e <setvbuf+0x13e>
    821a:	0021      	movs	r1, r4
    821c:	0030      	movs	r0, r6
    821e:	f000 faeb 	bl	87f8 <_fflush_r>
    8222:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8224:	2900      	cmp	r1, #0
    8226:	d008      	beq.n	823a <setvbuf+0x5a>
    8228:	0023      	movs	r3, r4
    822a:	3344      	adds	r3, #68	; 0x44
    822c:	4299      	cmp	r1, r3
    822e:	d002      	beq.n	8236 <setvbuf+0x56>
    8230:	0030      	movs	r0, r6
    8232:	f000 fcad 	bl	8b90 <_free_r>
    8236:	2300      	movs	r3, #0
    8238:	6363      	str	r3, [r4, #52]	; 0x34
    823a:	2300      	movs	r3, #0
    823c:	61a3      	str	r3, [r4, #24]
    823e:	6063      	str	r3, [r4, #4]
    8240:	89a3      	ldrh	r3, [r4, #12]
    8242:	061b      	lsls	r3, r3, #24
    8244:	d503      	bpl.n	824e <setvbuf+0x6e>
    8246:	6921      	ldr	r1, [r4, #16]
    8248:	0030      	movs	r0, r6
    824a:	f000 fca1 	bl	8b90 <_free_r>
    824e:	89a3      	ldrh	r3, [r4, #12]
    8250:	4a36      	ldr	r2, [pc, #216]	; (832c <setvbuf+0x14c>)
    8252:	4013      	ands	r3, r2
    8254:	81a3      	strh	r3, [r4, #12]
    8256:	9b00      	ldr	r3, [sp, #0]
    8258:	2b02      	cmp	r3, #2
    825a:	d05a      	beq.n	8312 <setvbuf+0x132>
    825c:	ab03      	add	r3, sp, #12
    825e:	aa02      	add	r2, sp, #8
    8260:	0021      	movs	r1, r4
    8262:	0030      	movs	r0, r6
    8264:	f000 fc0c 	bl	8a80 <__swhatbuf_r>
    8268:	89a3      	ldrh	r3, [r4, #12]
    826a:	4318      	orrs	r0, r3
    826c:	81a0      	strh	r0, [r4, #12]
    826e:	2d00      	cmp	r5, #0
    8270:	d124      	bne.n	82bc <setvbuf+0xdc>
    8272:	9d02      	ldr	r5, [sp, #8]
    8274:	0028      	movs	r0, r5
    8276:	f000 fc6f 	bl	8b58 <malloc>
    827a:	9501      	str	r5, [sp, #4]
    827c:	1e07      	subs	r7, r0, #0
    827e:	d142      	bne.n	8306 <setvbuf+0x126>
    8280:	9b02      	ldr	r3, [sp, #8]
    8282:	9301      	str	r3, [sp, #4]
    8284:	42ab      	cmp	r3, r5
    8286:	d139      	bne.n	82fc <setvbuf+0x11c>
    8288:	2001      	movs	r0, #1
    828a:	4240      	negs	r0, r0
    828c:	2302      	movs	r3, #2
    828e:	89a2      	ldrh	r2, [r4, #12]
    8290:	4313      	orrs	r3, r2
    8292:	81a3      	strh	r3, [r4, #12]
    8294:	2300      	movs	r3, #0
    8296:	60a3      	str	r3, [r4, #8]
    8298:	0023      	movs	r3, r4
    829a:	3347      	adds	r3, #71	; 0x47
    829c:	6023      	str	r3, [r4, #0]
    829e:	6123      	str	r3, [r4, #16]
    82a0:	2301      	movs	r3, #1
    82a2:	6163      	str	r3, [r4, #20]
    82a4:	b005      	add	sp, #20
    82a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82a8:	4b21      	ldr	r3, [pc, #132]	; (8330 <setvbuf+0x150>)
    82aa:	429c      	cmp	r4, r3
    82ac:	d101      	bne.n	82b2 <setvbuf+0xd2>
    82ae:	68b4      	ldr	r4, [r6, #8]
    82b0:	e7aa      	b.n	8208 <setvbuf+0x28>
    82b2:	4b20      	ldr	r3, [pc, #128]	; (8334 <setvbuf+0x154>)
    82b4:	429c      	cmp	r4, r3
    82b6:	d1a7      	bne.n	8208 <setvbuf+0x28>
    82b8:	68f4      	ldr	r4, [r6, #12]
    82ba:	e7a5      	b.n	8208 <setvbuf+0x28>
    82bc:	2f00      	cmp	r7, #0
    82be:	d0d9      	beq.n	8274 <setvbuf+0x94>
    82c0:	69b3      	ldr	r3, [r6, #24]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d102      	bne.n	82cc <setvbuf+0xec>
    82c6:	0030      	movs	r0, r6
    82c8:	f000 fb18 	bl	88fc <__sinit>
    82cc:	9b00      	ldr	r3, [sp, #0]
    82ce:	2b01      	cmp	r3, #1
    82d0:	d103      	bne.n	82da <setvbuf+0xfa>
    82d2:	89a3      	ldrh	r3, [r4, #12]
    82d4:	9a00      	ldr	r2, [sp, #0]
    82d6:	431a      	orrs	r2, r3
    82d8:	81a2      	strh	r2, [r4, #12]
    82da:	2008      	movs	r0, #8
    82dc:	89a3      	ldrh	r3, [r4, #12]
    82de:	6027      	str	r7, [r4, #0]
    82e0:	6127      	str	r7, [r4, #16]
    82e2:	6165      	str	r5, [r4, #20]
    82e4:	4018      	ands	r0, r3
    82e6:	d018      	beq.n	831a <setvbuf+0x13a>
    82e8:	2001      	movs	r0, #1
    82ea:	4018      	ands	r0, r3
    82ec:	2300      	movs	r3, #0
    82ee:	4298      	cmp	r0, r3
    82f0:	d011      	beq.n	8316 <setvbuf+0x136>
    82f2:	426d      	negs	r5, r5
    82f4:	60a3      	str	r3, [r4, #8]
    82f6:	61a5      	str	r5, [r4, #24]
    82f8:	0018      	movs	r0, r3
    82fa:	e7d3      	b.n	82a4 <setvbuf+0xc4>
    82fc:	9801      	ldr	r0, [sp, #4]
    82fe:	f000 fc2b 	bl	8b58 <malloc>
    8302:	1e07      	subs	r7, r0, #0
    8304:	d0c0      	beq.n	8288 <setvbuf+0xa8>
    8306:	2380      	movs	r3, #128	; 0x80
    8308:	89a2      	ldrh	r2, [r4, #12]
    830a:	9d01      	ldr	r5, [sp, #4]
    830c:	4313      	orrs	r3, r2
    830e:	81a3      	strh	r3, [r4, #12]
    8310:	e7d6      	b.n	82c0 <setvbuf+0xe0>
    8312:	2000      	movs	r0, #0
    8314:	e7ba      	b.n	828c <setvbuf+0xac>
    8316:	60a5      	str	r5, [r4, #8]
    8318:	e7c4      	b.n	82a4 <setvbuf+0xc4>
    831a:	60a0      	str	r0, [r4, #8]
    831c:	e7c2      	b.n	82a4 <setvbuf+0xc4>
    831e:	2001      	movs	r0, #1
    8320:	4240      	negs	r0, r0
    8322:	e7bf      	b.n	82a4 <setvbuf+0xc4>
    8324:	20000068 	.word	0x20000068
    8328:	0000a6c4 	.word	0x0000a6c4
    832c:	fffff35c 	.word	0xfffff35c
    8330:	0000a6e4 	.word	0x0000a6e4
    8334:	0000a6a4 	.word	0x0000a6a4

00008338 <strcmp>:
    8338:	7802      	ldrb	r2, [r0, #0]
    833a:	780b      	ldrb	r3, [r1, #0]
    833c:	2a00      	cmp	r2, #0
    833e:	d003      	beq.n	8348 <strcmp+0x10>
    8340:	3001      	adds	r0, #1
    8342:	3101      	adds	r1, #1
    8344:	429a      	cmp	r2, r3
    8346:	d0f7      	beq.n	8338 <strcmp>
    8348:	1ad0      	subs	r0, r2, r3
    834a:	4770      	bx	lr

0000834c <strtok>:
    834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    834e:	4b12      	ldr	r3, [pc, #72]	; (8398 <strtok+0x4c>)
    8350:	0006      	movs	r6, r0
    8352:	681d      	ldr	r5, [r3, #0]
    8354:	000f      	movs	r7, r1
    8356:	6dac      	ldr	r4, [r5, #88]	; 0x58
    8358:	2c00      	cmp	r4, #0
    835a:	d116      	bne.n	838a <strtok+0x3e>
    835c:	2050      	movs	r0, #80	; 0x50
    835e:	f000 fbfb 	bl	8b58 <malloc>
    8362:	65a8      	str	r0, [r5, #88]	; 0x58
    8364:	6004      	str	r4, [r0, #0]
    8366:	6044      	str	r4, [r0, #4]
    8368:	6084      	str	r4, [r0, #8]
    836a:	60c4      	str	r4, [r0, #12]
    836c:	6104      	str	r4, [r0, #16]
    836e:	6144      	str	r4, [r0, #20]
    8370:	6184      	str	r4, [r0, #24]
    8372:	6284      	str	r4, [r0, #40]	; 0x28
    8374:	62c4      	str	r4, [r0, #44]	; 0x2c
    8376:	6304      	str	r4, [r0, #48]	; 0x30
    8378:	6344      	str	r4, [r0, #52]	; 0x34
    837a:	6384      	str	r4, [r0, #56]	; 0x38
    837c:	63c4      	str	r4, [r0, #60]	; 0x3c
    837e:	6404      	str	r4, [r0, #64]	; 0x40
    8380:	6444      	str	r4, [r0, #68]	; 0x44
    8382:	6484      	str	r4, [r0, #72]	; 0x48
    8384:	64c4      	str	r4, [r0, #76]	; 0x4c
    8386:	7704      	strb	r4, [r0, #28]
    8388:	6244      	str	r4, [r0, #36]	; 0x24
    838a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    838c:	0039      	movs	r1, r7
    838e:	0030      	movs	r0, r6
    8390:	2301      	movs	r3, #1
    8392:	f000 f803 	bl	839c <__strtok_r>
    8396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8398:	20000068 	.word	0x20000068

0000839c <__strtok_r>:
    839c:	b5f0      	push	{r4, r5, r6, r7, lr}
    839e:	2800      	cmp	r0, #0
    83a0:	d104      	bne.n	83ac <__strtok_r+0x10>
    83a2:	6810      	ldr	r0, [r2, #0]
    83a4:	2800      	cmp	r0, #0
    83a6:	d101      	bne.n	83ac <__strtok_r+0x10>
    83a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83aa:	0020      	movs	r0, r4
    83ac:	000e      	movs	r6, r1
    83ae:	7805      	ldrb	r5, [r0, #0]
    83b0:	1c44      	adds	r4, r0, #1
    83b2:	7837      	ldrb	r7, [r6, #0]
    83b4:	2f00      	cmp	r7, #0
    83b6:	d104      	bne.n	83c2 <__strtok_r+0x26>
    83b8:	2d00      	cmp	r5, #0
    83ba:	d110      	bne.n	83de <__strtok_r+0x42>
    83bc:	6015      	str	r5, [r2, #0]
    83be:	0028      	movs	r0, r5
    83c0:	e7f2      	b.n	83a8 <__strtok_r+0xc>
    83c2:	3601      	adds	r6, #1
    83c4:	42bd      	cmp	r5, r7
    83c6:	d1f4      	bne.n	83b2 <__strtok_r+0x16>
    83c8:	2b00      	cmp	r3, #0
    83ca:	d1ee      	bne.n	83aa <__strtok_r+0xe>
    83cc:	6014      	str	r4, [r2, #0]
    83ce:	7003      	strb	r3, [r0, #0]
    83d0:	e7ea      	b.n	83a8 <__strtok_r+0xc>
    83d2:	0033      	movs	r3, r6
    83d4:	e00e      	b.n	83f4 <__strtok_r+0x58>
    83d6:	3501      	adds	r5, #1
    83d8:	001c      	movs	r4, r3
    83da:	2f00      	cmp	r7, #0
    83dc:	d102      	bne.n	83e4 <__strtok_r+0x48>
    83de:	000d      	movs	r5, r1
    83e0:	7826      	ldrb	r6, [r4, #0]
    83e2:	1c63      	adds	r3, r4, #1
    83e4:	782f      	ldrb	r7, [r5, #0]
    83e6:	42be      	cmp	r6, r7
    83e8:	d1f5      	bne.n	83d6 <__strtok_r+0x3a>
    83ea:	2e00      	cmp	r6, #0
    83ec:	d0f1      	beq.n	83d2 <__strtok_r+0x36>
    83ee:	2400      	movs	r4, #0
    83f0:	1e59      	subs	r1, r3, #1
    83f2:	700c      	strb	r4, [r1, #0]
    83f4:	6013      	str	r3, [r2, #0]
    83f6:	e7d7      	b.n	83a8 <__strtok_r+0xc>

000083f8 <_strtol_l.isra.0>:
    83f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    83fa:	001f      	movs	r7, r3
    83fc:	000e      	movs	r6, r1
    83fe:	b087      	sub	sp, #28
    8400:	9005      	str	r0, [sp, #20]
    8402:	9103      	str	r1, [sp, #12]
    8404:	9202      	str	r2, [sp, #8]
    8406:	980c      	ldr	r0, [sp, #48]	; 0x30
    8408:	7834      	ldrb	r4, [r6, #0]
    840a:	f000 fb28 	bl	8a5e <__locale_ctype_ptr_l>
    840e:	2208      	movs	r2, #8
    8410:	1900      	adds	r0, r0, r4
    8412:	7843      	ldrb	r3, [r0, #1]
    8414:	1c75      	adds	r5, r6, #1
    8416:	4013      	ands	r3, r2
    8418:	d10c      	bne.n	8434 <_strtol_l.isra.0+0x3c>
    841a:	2c2d      	cmp	r4, #45	; 0x2d
    841c:	d10c      	bne.n	8438 <_strtol_l.isra.0+0x40>
    841e:	3301      	adds	r3, #1
    8420:	782c      	ldrb	r4, [r5, #0]
    8422:	9301      	str	r3, [sp, #4]
    8424:	1cb5      	adds	r5, r6, #2
    8426:	2f00      	cmp	r7, #0
    8428:	d00c      	beq.n	8444 <_strtol_l.isra.0+0x4c>
    842a:	2f10      	cmp	r7, #16
    842c:	d114      	bne.n	8458 <_strtol_l.isra.0+0x60>
    842e:	2c30      	cmp	r4, #48	; 0x30
    8430:	d00a      	beq.n	8448 <_strtol_l.isra.0+0x50>
    8432:	e011      	b.n	8458 <_strtol_l.isra.0+0x60>
    8434:	002e      	movs	r6, r5
    8436:	e7e6      	b.n	8406 <_strtol_l.isra.0+0xe>
    8438:	9301      	str	r3, [sp, #4]
    843a:	2c2b      	cmp	r4, #43	; 0x2b
    843c:	d1f3      	bne.n	8426 <_strtol_l.isra.0+0x2e>
    843e:	782c      	ldrb	r4, [r5, #0]
    8440:	1cb5      	adds	r5, r6, #2
    8442:	e7f0      	b.n	8426 <_strtol_l.isra.0+0x2e>
    8444:	2c30      	cmp	r4, #48	; 0x30
    8446:	d12f      	bne.n	84a8 <_strtol_l.isra.0+0xb0>
    8448:	2220      	movs	r2, #32
    844a:	782b      	ldrb	r3, [r5, #0]
    844c:	4393      	bics	r3, r2
    844e:	2b58      	cmp	r3, #88	; 0x58
    8450:	d151      	bne.n	84f6 <_strtol_l.isra.0+0xfe>
    8452:	2710      	movs	r7, #16
    8454:	786c      	ldrb	r4, [r5, #1]
    8456:	3502      	adds	r5, #2
    8458:	9b01      	ldr	r3, [sp, #4]
    845a:	4a29      	ldr	r2, [pc, #164]	; (8500 <_strtol_l.isra.0+0x108>)
    845c:	0039      	movs	r1, r7
    845e:	189e      	adds	r6, r3, r2
    8460:	0030      	movs	r0, r6
    8462:	f7fe f85b 	bl	651c <__aeabi_uidivmod>
    8466:	0030      	movs	r0, r6
    8468:	9104      	str	r1, [sp, #16]
    846a:	0039      	movs	r1, r7
    846c:	f7fd ffd0 	bl	6410 <__udivsi3>
    8470:	2101      	movs	r1, #1
    8472:	2300      	movs	r3, #0
    8474:	4249      	negs	r1, r1
    8476:	0002      	movs	r2, r0
    8478:	468c      	mov	ip, r1
    847a:	0018      	movs	r0, r3
    847c:	0021      	movs	r1, r4
    847e:	3930      	subs	r1, #48	; 0x30
    8480:	2909      	cmp	r1, #9
    8482:	d813      	bhi.n	84ac <_strtol_l.isra.0+0xb4>
    8484:	000c      	movs	r4, r1
    8486:	42a7      	cmp	r7, r4
    8488:	dd1c      	ble.n	84c4 <_strtol_l.isra.0+0xcc>
    848a:	1c59      	adds	r1, r3, #1
    848c:	d009      	beq.n	84a2 <_strtol_l.isra.0+0xaa>
    848e:	4663      	mov	r3, ip
    8490:	4282      	cmp	r2, r0
    8492:	d306      	bcc.n	84a2 <_strtol_l.isra.0+0xaa>
    8494:	d102      	bne.n	849c <_strtol_l.isra.0+0xa4>
    8496:	9904      	ldr	r1, [sp, #16]
    8498:	42a1      	cmp	r1, r4
    849a:	db02      	blt.n	84a2 <_strtol_l.isra.0+0xaa>
    849c:	2301      	movs	r3, #1
    849e:	4378      	muls	r0, r7
    84a0:	1820      	adds	r0, r4, r0
    84a2:	782c      	ldrb	r4, [r5, #0]
    84a4:	3501      	adds	r5, #1
    84a6:	e7e9      	b.n	847c <_strtol_l.isra.0+0x84>
    84a8:	270a      	movs	r7, #10
    84aa:	e7d5      	b.n	8458 <_strtol_l.isra.0+0x60>
    84ac:	0021      	movs	r1, r4
    84ae:	3941      	subs	r1, #65	; 0x41
    84b0:	2919      	cmp	r1, #25
    84b2:	d801      	bhi.n	84b8 <_strtol_l.isra.0+0xc0>
    84b4:	3c37      	subs	r4, #55	; 0x37
    84b6:	e7e6      	b.n	8486 <_strtol_l.isra.0+0x8e>
    84b8:	0021      	movs	r1, r4
    84ba:	3961      	subs	r1, #97	; 0x61
    84bc:	2919      	cmp	r1, #25
    84be:	d801      	bhi.n	84c4 <_strtol_l.isra.0+0xcc>
    84c0:	3c57      	subs	r4, #87	; 0x57
    84c2:	e7e0      	b.n	8486 <_strtol_l.isra.0+0x8e>
    84c4:	1c5a      	adds	r2, r3, #1
    84c6:	d108      	bne.n	84da <_strtol_l.isra.0+0xe2>
    84c8:	9a05      	ldr	r2, [sp, #20]
    84ca:	3323      	adds	r3, #35	; 0x23
    84cc:	6013      	str	r3, [r2, #0]
    84ce:	9b02      	ldr	r3, [sp, #8]
    84d0:	0030      	movs	r0, r6
    84d2:	2b00      	cmp	r3, #0
    84d4:	d10b      	bne.n	84ee <_strtol_l.isra.0+0xf6>
    84d6:	b007      	add	sp, #28
    84d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84da:	9a01      	ldr	r2, [sp, #4]
    84dc:	2a00      	cmp	r2, #0
    84de:	d000      	beq.n	84e2 <_strtol_l.isra.0+0xea>
    84e0:	4240      	negs	r0, r0
    84e2:	9a02      	ldr	r2, [sp, #8]
    84e4:	2a00      	cmp	r2, #0
    84e6:	d0f6      	beq.n	84d6 <_strtol_l.isra.0+0xde>
    84e8:	9a03      	ldr	r2, [sp, #12]
    84ea:	2b00      	cmp	r3, #0
    84ec:	d000      	beq.n	84f0 <_strtol_l.isra.0+0xf8>
    84ee:	1e6a      	subs	r2, r5, #1
    84f0:	9b02      	ldr	r3, [sp, #8]
    84f2:	601a      	str	r2, [r3, #0]
    84f4:	e7ef      	b.n	84d6 <_strtol_l.isra.0+0xde>
    84f6:	2430      	movs	r4, #48	; 0x30
    84f8:	2f00      	cmp	r7, #0
    84fa:	d1ad      	bne.n	8458 <_strtol_l.isra.0+0x60>
    84fc:	3708      	adds	r7, #8
    84fe:	e7ab      	b.n	8458 <_strtol_l.isra.0+0x60>
    8500:	7fffffff 	.word	0x7fffffff

00008504 <_strtol_r>:
    8504:	b513      	push	{r0, r1, r4, lr}
    8506:	4c05      	ldr	r4, [pc, #20]	; (851c <_strtol_r+0x18>)
    8508:	6824      	ldr	r4, [r4, #0]
    850a:	6a24      	ldr	r4, [r4, #32]
    850c:	2c00      	cmp	r4, #0
    850e:	d100      	bne.n	8512 <_strtol_r+0xe>
    8510:	4c03      	ldr	r4, [pc, #12]	; (8520 <_strtol_r+0x1c>)
    8512:	9400      	str	r4, [sp, #0]
    8514:	f7ff ff70 	bl	83f8 <_strtol_l.isra.0>
    8518:	bd16      	pop	{r1, r2, r4, pc}
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	20000068 	.word	0x20000068
    8520:	200000cc 	.word	0x200000cc

00008524 <strtol>:
    8524:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8526:	0013      	movs	r3, r2
    8528:	4a06      	ldr	r2, [pc, #24]	; (8544 <strtol+0x20>)
    852a:	0005      	movs	r5, r0
    852c:	6810      	ldr	r0, [r2, #0]
    852e:	6a04      	ldr	r4, [r0, #32]
    8530:	2c00      	cmp	r4, #0
    8532:	d100      	bne.n	8536 <strtol+0x12>
    8534:	4c04      	ldr	r4, [pc, #16]	; (8548 <strtol+0x24>)
    8536:	000a      	movs	r2, r1
    8538:	9400      	str	r4, [sp, #0]
    853a:	0029      	movs	r1, r5
    853c:	f7ff ff5c 	bl	83f8 <_strtol_l.isra.0>
    8540:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    8542:	46c0      	nop			; (mov r8, r8)
    8544:	20000068 	.word	0x20000068
    8548:	200000cc 	.word	0x200000cc

0000854c <__swbuf_r>:
    854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    854e:	0005      	movs	r5, r0
    8550:	000e      	movs	r6, r1
    8552:	0014      	movs	r4, r2
    8554:	2800      	cmp	r0, #0
    8556:	d004      	beq.n	8562 <__swbuf_r+0x16>
    8558:	6983      	ldr	r3, [r0, #24]
    855a:	2b00      	cmp	r3, #0
    855c:	d101      	bne.n	8562 <__swbuf_r+0x16>
    855e:	f000 f9cd 	bl	88fc <__sinit>
    8562:	4b22      	ldr	r3, [pc, #136]	; (85ec <__swbuf_r+0xa0>)
    8564:	429c      	cmp	r4, r3
    8566:	d12d      	bne.n	85c4 <__swbuf_r+0x78>
    8568:	686c      	ldr	r4, [r5, #4]
    856a:	69a3      	ldr	r3, [r4, #24]
    856c:	60a3      	str	r3, [r4, #8]
    856e:	89a3      	ldrh	r3, [r4, #12]
    8570:	071b      	lsls	r3, r3, #28
    8572:	d531      	bpl.n	85d8 <__swbuf_r+0x8c>
    8574:	6923      	ldr	r3, [r4, #16]
    8576:	2b00      	cmp	r3, #0
    8578:	d02e      	beq.n	85d8 <__swbuf_r+0x8c>
    857a:	6823      	ldr	r3, [r4, #0]
    857c:	6922      	ldr	r2, [r4, #16]
    857e:	b2f7      	uxtb	r7, r6
    8580:	1a98      	subs	r0, r3, r2
    8582:	6963      	ldr	r3, [r4, #20]
    8584:	b2f6      	uxtb	r6, r6
    8586:	4298      	cmp	r0, r3
    8588:	db05      	blt.n	8596 <__swbuf_r+0x4a>
    858a:	0021      	movs	r1, r4
    858c:	0028      	movs	r0, r5
    858e:	f000 f933 	bl	87f8 <_fflush_r>
    8592:	2800      	cmp	r0, #0
    8594:	d126      	bne.n	85e4 <__swbuf_r+0x98>
    8596:	68a3      	ldr	r3, [r4, #8]
    8598:	3001      	adds	r0, #1
    859a:	3b01      	subs	r3, #1
    859c:	60a3      	str	r3, [r4, #8]
    859e:	6823      	ldr	r3, [r4, #0]
    85a0:	1c5a      	adds	r2, r3, #1
    85a2:	6022      	str	r2, [r4, #0]
    85a4:	701f      	strb	r7, [r3, #0]
    85a6:	6963      	ldr	r3, [r4, #20]
    85a8:	4298      	cmp	r0, r3
    85aa:	d004      	beq.n	85b6 <__swbuf_r+0x6a>
    85ac:	89a3      	ldrh	r3, [r4, #12]
    85ae:	07db      	lsls	r3, r3, #31
    85b0:	d51a      	bpl.n	85e8 <__swbuf_r+0x9c>
    85b2:	2e0a      	cmp	r6, #10
    85b4:	d118      	bne.n	85e8 <__swbuf_r+0x9c>
    85b6:	0021      	movs	r1, r4
    85b8:	0028      	movs	r0, r5
    85ba:	f000 f91d 	bl	87f8 <_fflush_r>
    85be:	2800      	cmp	r0, #0
    85c0:	d012      	beq.n	85e8 <__swbuf_r+0x9c>
    85c2:	e00f      	b.n	85e4 <__swbuf_r+0x98>
    85c4:	4b0a      	ldr	r3, [pc, #40]	; (85f0 <__swbuf_r+0xa4>)
    85c6:	429c      	cmp	r4, r3
    85c8:	d101      	bne.n	85ce <__swbuf_r+0x82>
    85ca:	68ac      	ldr	r4, [r5, #8]
    85cc:	e7cd      	b.n	856a <__swbuf_r+0x1e>
    85ce:	4b09      	ldr	r3, [pc, #36]	; (85f4 <__swbuf_r+0xa8>)
    85d0:	429c      	cmp	r4, r3
    85d2:	d1ca      	bne.n	856a <__swbuf_r+0x1e>
    85d4:	68ec      	ldr	r4, [r5, #12]
    85d6:	e7c8      	b.n	856a <__swbuf_r+0x1e>
    85d8:	0021      	movs	r1, r4
    85da:	0028      	movs	r0, r5
    85dc:	f000 f80c 	bl	85f8 <__swsetup_r>
    85e0:	2800      	cmp	r0, #0
    85e2:	d0ca      	beq.n	857a <__swbuf_r+0x2e>
    85e4:	2601      	movs	r6, #1
    85e6:	4276      	negs	r6, r6
    85e8:	0030      	movs	r0, r6
    85ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85ec:	0000a6c4 	.word	0x0000a6c4
    85f0:	0000a6e4 	.word	0x0000a6e4
    85f4:	0000a6a4 	.word	0x0000a6a4

000085f8 <__swsetup_r>:
    85f8:	4b36      	ldr	r3, [pc, #216]	; (86d4 <__swsetup_r+0xdc>)
    85fa:	b570      	push	{r4, r5, r6, lr}
    85fc:	681d      	ldr	r5, [r3, #0]
    85fe:	0006      	movs	r6, r0
    8600:	000c      	movs	r4, r1
    8602:	2d00      	cmp	r5, #0
    8604:	d005      	beq.n	8612 <__swsetup_r+0x1a>
    8606:	69ab      	ldr	r3, [r5, #24]
    8608:	2b00      	cmp	r3, #0
    860a:	d102      	bne.n	8612 <__swsetup_r+0x1a>
    860c:	0028      	movs	r0, r5
    860e:	f000 f975 	bl	88fc <__sinit>
    8612:	4b31      	ldr	r3, [pc, #196]	; (86d8 <__swsetup_r+0xe0>)
    8614:	429c      	cmp	r4, r3
    8616:	d10f      	bne.n	8638 <__swsetup_r+0x40>
    8618:	686c      	ldr	r4, [r5, #4]
    861a:	230c      	movs	r3, #12
    861c:	5ee2      	ldrsh	r2, [r4, r3]
    861e:	b293      	uxth	r3, r2
    8620:	0719      	lsls	r1, r3, #28
    8622:	d42d      	bmi.n	8680 <__swsetup_r+0x88>
    8624:	06d9      	lsls	r1, r3, #27
    8626:	d411      	bmi.n	864c <__swsetup_r+0x54>
    8628:	2309      	movs	r3, #9
    862a:	2001      	movs	r0, #1
    862c:	6033      	str	r3, [r6, #0]
    862e:	3337      	adds	r3, #55	; 0x37
    8630:	4313      	orrs	r3, r2
    8632:	81a3      	strh	r3, [r4, #12]
    8634:	4240      	negs	r0, r0
    8636:	bd70      	pop	{r4, r5, r6, pc}
    8638:	4b28      	ldr	r3, [pc, #160]	; (86dc <__swsetup_r+0xe4>)
    863a:	429c      	cmp	r4, r3
    863c:	d101      	bne.n	8642 <__swsetup_r+0x4a>
    863e:	68ac      	ldr	r4, [r5, #8]
    8640:	e7eb      	b.n	861a <__swsetup_r+0x22>
    8642:	4b27      	ldr	r3, [pc, #156]	; (86e0 <__swsetup_r+0xe8>)
    8644:	429c      	cmp	r4, r3
    8646:	d1e8      	bne.n	861a <__swsetup_r+0x22>
    8648:	68ec      	ldr	r4, [r5, #12]
    864a:	e7e6      	b.n	861a <__swsetup_r+0x22>
    864c:	075b      	lsls	r3, r3, #29
    864e:	d513      	bpl.n	8678 <__swsetup_r+0x80>
    8650:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8652:	2900      	cmp	r1, #0
    8654:	d008      	beq.n	8668 <__swsetup_r+0x70>
    8656:	0023      	movs	r3, r4
    8658:	3344      	adds	r3, #68	; 0x44
    865a:	4299      	cmp	r1, r3
    865c:	d002      	beq.n	8664 <__swsetup_r+0x6c>
    865e:	0030      	movs	r0, r6
    8660:	f000 fa96 	bl	8b90 <_free_r>
    8664:	2300      	movs	r3, #0
    8666:	6363      	str	r3, [r4, #52]	; 0x34
    8668:	2224      	movs	r2, #36	; 0x24
    866a:	89a3      	ldrh	r3, [r4, #12]
    866c:	4393      	bics	r3, r2
    866e:	81a3      	strh	r3, [r4, #12]
    8670:	2300      	movs	r3, #0
    8672:	6063      	str	r3, [r4, #4]
    8674:	6923      	ldr	r3, [r4, #16]
    8676:	6023      	str	r3, [r4, #0]
    8678:	2308      	movs	r3, #8
    867a:	89a2      	ldrh	r2, [r4, #12]
    867c:	4313      	orrs	r3, r2
    867e:	81a3      	strh	r3, [r4, #12]
    8680:	6923      	ldr	r3, [r4, #16]
    8682:	2b00      	cmp	r3, #0
    8684:	d10b      	bne.n	869e <__swsetup_r+0xa6>
    8686:	21a0      	movs	r1, #160	; 0xa0
    8688:	2280      	movs	r2, #128	; 0x80
    868a:	89a3      	ldrh	r3, [r4, #12]
    868c:	0089      	lsls	r1, r1, #2
    868e:	0092      	lsls	r2, r2, #2
    8690:	400b      	ands	r3, r1
    8692:	4293      	cmp	r3, r2
    8694:	d003      	beq.n	869e <__swsetup_r+0xa6>
    8696:	0021      	movs	r1, r4
    8698:	0030      	movs	r0, r6
    869a:	f000 fa19 	bl	8ad0 <__smakebuf_r>
    869e:	2301      	movs	r3, #1
    86a0:	89a2      	ldrh	r2, [r4, #12]
    86a2:	4013      	ands	r3, r2
    86a4:	d011      	beq.n	86ca <__swsetup_r+0xd2>
    86a6:	2300      	movs	r3, #0
    86a8:	60a3      	str	r3, [r4, #8]
    86aa:	6963      	ldr	r3, [r4, #20]
    86ac:	425b      	negs	r3, r3
    86ae:	61a3      	str	r3, [r4, #24]
    86b0:	2000      	movs	r0, #0
    86b2:	6923      	ldr	r3, [r4, #16]
    86b4:	4283      	cmp	r3, r0
    86b6:	d1be      	bne.n	8636 <__swsetup_r+0x3e>
    86b8:	230c      	movs	r3, #12
    86ba:	5ee2      	ldrsh	r2, [r4, r3]
    86bc:	0613      	lsls	r3, r2, #24
    86be:	d5ba      	bpl.n	8636 <__swsetup_r+0x3e>
    86c0:	2340      	movs	r3, #64	; 0x40
    86c2:	4313      	orrs	r3, r2
    86c4:	81a3      	strh	r3, [r4, #12]
    86c6:	3801      	subs	r0, #1
    86c8:	e7b5      	b.n	8636 <__swsetup_r+0x3e>
    86ca:	0792      	lsls	r2, r2, #30
    86cc:	d400      	bmi.n	86d0 <__swsetup_r+0xd8>
    86ce:	6963      	ldr	r3, [r4, #20]
    86d0:	60a3      	str	r3, [r4, #8]
    86d2:	e7ed      	b.n	86b0 <__swsetup_r+0xb8>
    86d4:	20000068 	.word	0x20000068
    86d8:	0000a6c4 	.word	0x0000a6c4
    86dc:	0000a6e4 	.word	0x0000a6e4
    86e0:	0000a6a4 	.word	0x0000a6a4

000086e4 <__sflush_r>:
    86e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    86e6:	898a      	ldrh	r2, [r1, #12]
    86e8:	0005      	movs	r5, r0
    86ea:	000c      	movs	r4, r1
    86ec:	0713      	lsls	r3, r2, #28
    86ee:	d460      	bmi.n	87b2 <__sflush_r+0xce>
    86f0:	684b      	ldr	r3, [r1, #4]
    86f2:	2b00      	cmp	r3, #0
    86f4:	dc04      	bgt.n	8700 <__sflush_r+0x1c>
    86f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    86f8:	2b00      	cmp	r3, #0
    86fa:	dc01      	bgt.n	8700 <__sflush_r+0x1c>
    86fc:	2000      	movs	r0, #0
    86fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8700:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8702:	2f00      	cmp	r7, #0
    8704:	d0fa      	beq.n	86fc <__sflush_r+0x18>
    8706:	2300      	movs	r3, #0
    8708:	682e      	ldr	r6, [r5, #0]
    870a:	602b      	str	r3, [r5, #0]
    870c:	2380      	movs	r3, #128	; 0x80
    870e:	015b      	lsls	r3, r3, #5
    8710:	401a      	ands	r2, r3
    8712:	d034      	beq.n	877e <__sflush_r+0x9a>
    8714:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8716:	89a3      	ldrh	r3, [r4, #12]
    8718:	075b      	lsls	r3, r3, #29
    871a:	d506      	bpl.n	872a <__sflush_r+0x46>
    871c:	6863      	ldr	r3, [r4, #4]
    871e:	1ac0      	subs	r0, r0, r3
    8720:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8722:	2b00      	cmp	r3, #0
    8724:	d001      	beq.n	872a <__sflush_r+0x46>
    8726:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8728:	1ac0      	subs	r0, r0, r3
    872a:	0002      	movs	r2, r0
    872c:	6a21      	ldr	r1, [r4, #32]
    872e:	2300      	movs	r3, #0
    8730:	0028      	movs	r0, r5
    8732:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8734:	47b8      	blx	r7
    8736:	89a1      	ldrh	r1, [r4, #12]
    8738:	1c43      	adds	r3, r0, #1
    873a:	d106      	bne.n	874a <__sflush_r+0x66>
    873c:	682b      	ldr	r3, [r5, #0]
    873e:	2b1d      	cmp	r3, #29
    8740:	d831      	bhi.n	87a6 <__sflush_r+0xc2>
    8742:	4a2c      	ldr	r2, [pc, #176]	; (87f4 <__sflush_r+0x110>)
    8744:	40da      	lsrs	r2, r3
    8746:	07d3      	lsls	r3, r2, #31
    8748:	d52d      	bpl.n	87a6 <__sflush_r+0xc2>
    874a:	2300      	movs	r3, #0
    874c:	6063      	str	r3, [r4, #4]
    874e:	6923      	ldr	r3, [r4, #16]
    8750:	6023      	str	r3, [r4, #0]
    8752:	04cb      	lsls	r3, r1, #19
    8754:	d505      	bpl.n	8762 <__sflush_r+0x7e>
    8756:	1c43      	adds	r3, r0, #1
    8758:	d102      	bne.n	8760 <__sflush_r+0x7c>
    875a:	682b      	ldr	r3, [r5, #0]
    875c:	2b00      	cmp	r3, #0
    875e:	d100      	bne.n	8762 <__sflush_r+0x7e>
    8760:	6560      	str	r0, [r4, #84]	; 0x54
    8762:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8764:	602e      	str	r6, [r5, #0]
    8766:	2900      	cmp	r1, #0
    8768:	d0c8      	beq.n	86fc <__sflush_r+0x18>
    876a:	0023      	movs	r3, r4
    876c:	3344      	adds	r3, #68	; 0x44
    876e:	4299      	cmp	r1, r3
    8770:	d002      	beq.n	8778 <__sflush_r+0x94>
    8772:	0028      	movs	r0, r5
    8774:	f000 fa0c 	bl	8b90 <_free_r>
    8778:	2000      	movs	r0, #0
    877a:	6360      	str	r0, [r4, #52]	; 0x34
    877c:	e7bf      	b.n	86fe <__sflush_r+0x1a>
    877e:	2301      	movs	r3, #1
    8780:	6a21      	ldr	r1, [r4, #32]
    8782:	0028      	movs	r0, r5
    8784:	47b8      	blx	r7
    8786:	1c43      	adds	r3, r0, #1
    8788:	d1c5      	bne.n	8716 <__sflush_r+0x32>
    878a:	682b      	ldr	r3, [r5, #0]
    878c:	2b00      	cmp	r3, #0
    878e:	d0c2      	beq.n	8716 <__sflush_r+0x32>
    8790:	2b1d      	cmp	r3, #29
    8792:	d001      	beq.n	8798 <__sflush_r+0xb4>
    8794:	2b16      	cmp	r3, #22
    8796:	d101      	bne.n	879c <__sflush_r+0xb8>
    8798:	602e      	str	r6, [r5, #0]
    879a:	e7af      	b.n	86fc <__sflush_r+0x18>
    879c:	2340      	movs	r3, #64	; 0x40
    879e:	89a2      	ldrh	r2, [r4, #12]
    87a0:	4313      	orrs	r3, r2
    87a2:	81a3      	strh	r3, [r4, #12]
    87a4:	e7ab      	b.n	86fe <__sflush_r+0x1a>
    87a6:	2340      	movs	r3, #64	; 0x40
    87a8:	430b      	orrs	r3, r1
    87aa:	2001      	movs	r0, #1
    87ac:	81a3      	strh	r3, [r4, #12]
    87ae:	4240      	negs	r0, r0
    87b0:	e7a5      	b.n	86fe <__sflush_r+0x1a>
    87b2:	690f      	ldr	r7, [r1, #16]
    87b4:	2f00      	cmp	r7, #0
    87b6:	d0a1      	beq.n	86fc <__sflush_r+0x18>
    87b8:	680b      	ldr	r3, [r1, #0]
    87ba:	600f      	str	r7, [r1, #0]
    87bc:	1bdb      	subs	r3, r3, r7
    87be:	9301      	str	r3, [sp, #4]
    87c0:	2300      	movs	r3, #0
    87c2:	0792      	lsls	r2, r2, #30
    87c4:	d100      	bne.n	87c8 <__sflush_r+0xe4>
    87c6:	694b      	ldr	r3, [r1, #20]
    87c8:	60a3      	str	r3, [r4, #8]
    87ca:	9b01      	ldr	r3, [sp, #4]
    87cc:	2b00      	cmp	r3, #0
    87ce:	dc00      	bgt.n	87d2 <__sflush_r+0xee>
    87d0:	e794      	b.n	86fc <__sflush_r+0x18>
    87d2:	9b01      	ldr	r3, [sp, #4]
    87d4:	003a      	movs	r2, r7
    87d6:	6a21      	ldr	r1, [r4, #32]
    87d8:	0028      	movs	r0, r5
    87da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    87dc:	47b0      	blx	r6
    87de:	2800      	cmp	r0, #0
    87e0:	dc03      	bgt.n	87ea <__sflush_r+0x106>
    87e2:	2340      	movs	r3, #64	; 0x40
    87e4:	89a2      	ldrh	r2, [r4, #12]
    87e6:	4313      	orrs	r3, r2
    87e8:	e7df      	b.n	87aa <__sflush_r+0xc6>
    87ea:	9b01      	ldr	r3, [sp, #4]
    87ec:	183f      	adds	r7, r7, r0
    87ee:	1a1b      	subs	r3, r3, r0
    87f0:	9301      	str	r3, [sp, #4]
    87f2:	e7ea      	b.n	87ca <__sflush_r+0xe6>
    87f4:	20400001 	.word	0x20400001

000087f8 <_fflush_r>:
    87f8:	690b      	ldr	r3, [r1, #16]
    87fa:	b570      	push	{r4, r5, r6, lr}
    87fc:	0005      	movs	r5, r0
    87fe:	000c      	movs	r4, r1
    8800:	2b00      	cmp	r3, #0
    8802:	d101      	bne.n	8808 <_fflush_r+0x10>
    8804:	2000      	movs	r0, #0
    8806:	bd70      	pop	{r4, r5, r6, pc}
    8808:	2800      	cmp	r0, #0
    880a:	d004      	beq.n	8816 <_fflush_r+0x1e>
    880c:	6983      	ldr	r3, [r0, #24]
    880e:	2b00      	cmp	r3, #0
    8810:	d101      	bne.n	8816 <_fflush_r+0x1e>
    8812:	f000 f873 	bl	88fc <__sinit>
    8816:	4b0b      	ldr	r3, [pc, #44]	; (8844 <_fflush_r+0x4c>)
    8818:	429c      	cmp	r4, r3
    881a:	d109      	bne.n	8830 <_fflush_r+0x38>
    881c:	686c      	ldr	r4, [r5, #4]
    881e:	220c      	movs	r2, #12
    8820:	5ea3      	ldrsh	r3, [r4, r2]
    8822:	2b00      	cmp	r3, #0
    8824:	d0ee      	beq.n	8804 <_fflush_r+0xc>
    8826:	0021      	movs	r1, r4
    8828:	0028      	movs	r0, r5
    882a:	f7ff ff5b 	bl	86e4 <__sflush_r>
    882e:	e7ea      	b.n	8806 <_fflush_r+0xe>
    8830:	4b05      	ldr	r3, [pc, #20]	; (8848 <_fflush_r+0x50>)
    8832:	429c      	cmp	r4, r3
    8834:	d101      	bne.n	883a <_fflush_r+0x42>
    8836:	68ac      	ldr	r4, [r5, #8]
    8838:	e7f1      	b.n	881e <_fflush_r+0x26>
    883a:	4b04      	ldr	r3, [pc, #16]	; (884c <_fflush_r+0x54>)
    883c:	429c      	cmp	r4, r3
    883e:	d1ee      	bne.n	881e <_fflush_r+0x26>
    8840:	68ec      	ldr	r4, [r5, #12]
    8842:	e7ec      	b.n	881e <_fflush_r+0x26>
    8844:	0000a6c4 	.word	0x0000a6c4
    8848:	0000a6e4 	.word	0x0000a6e4
    884c:	0000a6a4 	.word	0x0000a6a4

00008850 <fflush>:
    8850:	b510      	push	{r4, lr}
    8852:	1e01      	subs	r1, r0, #0
    8854:	d105      	bne.n	8862 <fflush+0x12>
    8856:	4b05      	ldr	r3, [pc, #20]	; (886c <fflush+0x1c>)
    8858:	4905      	ldr	r1, [pc, #20]	; (8870 <fflush+0x20>)
    885a:	6818      	ldr	r0, [r3, #0]
    885c:	f000 f8de 	bl	8a1c <_fwalk_reent>
    8860:	bd10      	pop	{r4, pc}
    8862:	4b04      	ldr	r3, [pc, #16]	; (8874 <fflush+0x24>)
    8864:	6818      	ldr	r0, [r3, #0]
    8866:	f7ff ffc7 	bl	87f8 <_fflush_r>
    886a:	e7f9      	b.n	8860 <fflush+0x10>
    886c:	0000a6a0 	.word	0x0000a6a0
    8870:	000087f9 	.word	0x000087f9
    8874:	20000068 	.word	0x20000068

00008878 <_cleanup_r>:
    8878:	b510      	push	{r4, lr}
    887a:	4902      	ldr	r1, [pc, #8]	; (8884 <_cleanup_r+0xc>)
    887c:	f000 f8ce 	bl	8a1c <_fwalk_reent>
    8880:	bd10      	pop	{r4, pc}
    8882:	46c0      	nop			; (mov r8, r8)
    8884:	000087f9 	.word	0x000087f9

00008888 <std.isra.0>:
    8888:	2300      	movs	r3, #0
    888a:	b510      	push	{r4, lr}
    888c:	0004      	movs	r4, r0
    888e:	6003      	str	r3, [r0, #0]
    8890:	6043      	str	r3, [r0, #4]
    8892:	6083      	str	r3, [r0, #8]
    8894:	8181      	strh	r1, [r0, #12]
    8896:	6643      	str	r3, [r0, #100]	; 0x64
    8898:	81c2      	strh	r2, [r0, #14]
    889a:	6103      	str	r3, [r0, #16]
    889c:	6143      	str	r3, [r0, #20]
    889e:	6183      	str	r3, [r0, #24]
    88a0:	0019      	movs	r1, r3
    88a2:	2208      	movs	r2, #8
    88a4:	305c      	adds	r0, #92	; 0x5c
    88a6:	f7ff fbea 	bl	807e <memset>
    88aa:	4b05      	ldr	r3, [pc, #20]	; (88c0 <std.isra.0+0x38>)
    88ac:	6224      	str	r4, [r4, #32]
    88ae:	6263      	str	r3, [r4, #36]	; 0x24
    88b0:	4b04      	ldr	r3, [pc, #16]	; (88c4 <std.isra.0+0x3c>)
    88b2:	62a3      	str	r3, [r4, #40]	; 0x28
    88b4:	4b04      	ldr	r3, [pc, #16]	; (88c8 <std.isra.0+0x40>)
    88b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    88b8:	4b04      	ldr	r3, [pc, #16]	; (88cc <std.isra.0+0x44>)
    88ba:	6323      	str	r3, [r4, #48]	; 0x30
    88bc:	bd10      	pop	{r4, pc}
    88be:	46c0      	nop			; (mov r8, r8)
    88c0:	00009a5d 	.word	0x00009a5d
    88c4:	00009a85 	.word	0x00009a85
    88c8:	00009abd 	.word	0x00009abd
    88cc:	00009ae9 	.word	0x00009ae9

000088d0 <__sfmoreglue>:
    88d0:	b570      	push	{r4, r5, r6, lr}
    88d2:	2568      	movs	r5, #104	; 0x68
    88d4:	1e4a      	subs	r2, r1, #1
    88d6:	4355      	muls	r5, r2
    88d8:	000e      	movs	r6, r1
    88da:	0029      	movs	r1, r5
    88dc:	3174      	adds	r1, #116	; 0x74
    88de:	f000 f9a1 	bl	8c24 <_malloc_r>
    88e2:	1e04      	subs	r4, r0, #0
    88e4:	d008      	beq.n	88f8 <__sfmoreglue+0x28>
    88e6:	2100      	movs	r1, #0
    88e8:	002a      	movs	r2, r5
    88ea:	6001      	str	r1, [r0, #0]
    88ec:	6046      	str	r6, [r0, #4]
    88ee:	300c      	adds	r0, #12
    88f0:	60a0      	str	r0, [r4, #8]
    88f2:	3268      	adds	r2, #104	; 0x68
    88f4:	f7ff fbc3 	bl	807e <memset>
    88f8:	0020      	movs	r0, r4
    88fa:	bd70      	pop	{r4, r5, r6, pc}

000088fc <__sinit>:
    88fc:	6983      	ldr	r3, [r0, #24]
    88fe:	b513      	push	{r0, r1, r4, lr}
    8900:	0004      	movs	r4, r0
    8902:	2b00      	cmp	r3, #0
    8904:	d128      	bne.n	8958 <__sinit+0x5c>
    8906:	6483      	str	r3, [r0, #72]	; 0x48
    8908:	64c3      	str	r3, [r0, #76]	; 0x4c
    890a:	6503      	str	r3, [r0, #80]	; 0x50
    890c:	4b13      	ldr	r3, [pc, #76]	; (895c <__sinit+0x60>)
    890e:	4a14      	ldr	r2, [pc, #80]	; (8960 <__sinit+0x64>)
    8910:	681b      	ldr	r3, [r3, #0]
    8912:	6282      	str	r2, [r0, #40]	; 0x28
    8914:	9301      	str	r3, [sp, #4]
    8916:	4298      	cmp	r0, r3
    8918:	d101      	bne.n	891e <__sinit+0x22>
    891a:	2301      	movs	r3, #1
    891c:	6183      	str	r3, [r0, #24]
    891e:	0020      	movs	r0, r4
    8920:	f000 f820 	bl	8964 <__sfp>
    8924:	6060      	str	r0, [r4, #4]
    8926:	0020      	movs	r0, r4
    8928:	f000 f81c 	bl	8964 <__sfp>
    892c:	60a0      	str	r0, [r4, #8]
    892e:	0020      	movs	r0, r4
    8930:	f000 f818 	bl	8964 <__sfp>
    8934:	2200      	movs	r2, #0
    8936:	60e0      	str	r0, [r4, #12]
    8938:	2104      	movs	r1, #4
    893a:	6860      	ldr	r0, [r4, #4]
    893c:	f7ff ffa4 	bl	8888 <std.isra.0>
    8940:	2201      	movs	r2, #1
    8942:	2109      	movs	r1, #9
    8944:	68a0      	ldr	r0, [r4, #8]
    8946:	f7ff ff9f 	bl	8888 <std.isra.0>
    894a:	2202      	movs	r2, #2
    894c:	2112      	movs	r1, #18
    894e:	68e0      	ldr	r0, [r4, #12]
    8950:	f7ff ff9a 	bl	8888 <std.isra.0>
    8954:	2301      	movs	r3, #1
    8956:	61a3      	str	r3, [r4, #24]
    8958:	bd13      	pop	{r0, r1, r4, pc}
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	0000a6a0 	.word	0x0000a6a0
    8960:	00008879 	.word	0x00008879

00008964 <__sfp>:
    8964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8966:	4b1e      	ldr	r3, [pc, #120]	; (89e0 <__sfp+0x7c>)
    8968:	0007      	movs	r7, r0
    896a:	681e      	ldr	r6, [r3, #0]
    896c:	69b3      	ldr	r3, [r6, #24]
    896e:	2b00      	cmp	r3, #0
    8970:	d102      	bne.n	8978 <__sfp+0x14>
    8972:	0030      	movs	r0, r6
    8974:	f7ff ffc2 	bl	88fc <__sinit>
    8978:	3648      	adds	r6, #72	; 0x48
    897a:	68b4      	ldr	r4, [r6, #8]
    897c:	6873      	ldr	r3, [r6, #4]
    897e:	3b01      	subs	r3, #1
    8980:	d504      	bpl.n	898c <__sfp+0x28>
    8982:	6833      	ldr	r3, [r6, #0]
    8984:	2b00      	cmp	r3, #0
    8986:	d007      	beq.n	8998 <__sfp+0x34>
    8988:	6836      	ldr	r6, [r6, #0]
    898a:	e7f6      	b.n	897a <__sfp+0x16>
    898c:	220c      	movs	r2, #12
    898e:	5ea5      	ldrsh	r5, [r4, r2]
    8990:	2d00      	cmp	r5, #0
    8992:	d00d      	beq.n	89b0 <__sfp+0x4c>
    8994:	3468      	adds	r4, #104	; 0x68
    8996:	e7f2      	b.n	897e <__sfp+0x1a>
    8998:	2104      	movs	r1, #4
    899a:	0038      	movs	r0, r7
    899c:	f7ff ff98 	bl	88d0 <__sfmoreglue>
    89a0:	6030      	str	r0, [r6, #0]
    89a2:	2800      	cmp	r0, #0
    89a4:	d1f0      	bne.n	8988 <__sfp+0x24>
    89a6:	230c      	movs	r3, #12
    89a8:	0004      	movs	r4, r0
    89aa:	603b      	str	r3, [r7, #0]
    89ac:	0020      	movs	r0, r4
    89ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89b0:	2301      	movs	r3, #1
    89b2:	0020      	movs	r0, r4
    89b4:	425b      	negs	r3, r3
    89b6:	81e3      	strh	r3, [r4, #14]
    89b8:	3302      	adds	r3, #2
    89ba:	81a3      	strh	r3, [r4, #12]
    89bc:	6665      	str	r5, [r4, #100]	; 0x64
    89be:	6025      	str	r5, [r4, #0]
    89c0:	60a5      	str	r5, [r4, #8]
    89c2:	6065      	str	r5, [r4, #4]
    89c4:	6125      	str	r5, [r4, #16]
    89c6:	6165      	str	r5, [r4, #20]
    89c8:	61a5      	str	r5, [r4, #24]
    89ca:	2208      	movs	r2, #8
    89cc:	0029      	movs	r1, r5
    89ce:	305c      	adds	r0, #92	; 0x5c
    89d0:	f7ff fb55 	bl	807e <memset>
    89d4:	6365      	str	r5, [r4, #52]	; 0x34
    89d6:	63a5      	str	r5, [r4, #56]	; 0x38
    89d8:	64a5      	str	r5, [r4, #72]	; 0x48
    89da:	64e5      	str	r5, [r4, #76]	; 0x4c
    89dc:	e7e6      	b.n	89ac <__sfp+0x48>
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	0000a6a0 	.word	0x0000a6a0

000089e4 <_fwalk>:
    89e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    89e6:	3048      	adds	r0, #72	; 0x48
    89e8:	0004      	movs	r4, r0
    89ea:	2600      	movs	r6, #0
    89ec:	9101      	str	r1, [sp, #4]
    89ee:	2c00      	cmp	r4, #0
    89f0:	d101      	bne.n	89f6 <_fwalk+0x12>
    89f2:	0030      	movs	r0, r6
    89f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    89f6:	68a5      	ldr	r5, [r4, #8]
    89f8:	6867      	ldr	r7, [r4, #4]
    89fa:	3f01      	subs	r7, #1
    89fc:	d501      	bpl.n	8a02 <_fwalk+0x1e>
    89fe:	6824      	ldr	r4, [r4, #0]
    8a00:	e7f5      	b.n	89ee <_fwalk+0xa>
    8a02:	89ab      	ldrh	r3, [r5, #12]
    8a04:	2b01      	cmp	r3, #1
    8a06:	d907      	bls.n	8a18 <_fwalk+0x34>
    8a08:	220e      	movs	r2, #14
    8a0a:	5eab      	ldrsh	r3, [r5, r2]
    8a0c:	3301      	adds	r3, #1
    8a0e:	d003      	beq.n	8a18 <_fwalk+0x34>
    8a10:	0028      	movs	r0, r5
    8a12:	9b01      	ldr	r3, [sp, #4]
    8a14:	4798      	blx	r3
    8a16:	4306      	orrs	r6, r0
    8a18:	3568      	adds	r5, #104	; 0x68
    8a1a:	e7ee      	b.n	89fa <_fwalk+0x16>

00008a1c <_fwalk_reent>:
    8a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a1e:	0004      	movs	r4, r0
    8a20:	0007      	movs	r7, r0
    8a22:	2600      	movs	r6, #0
    8a24:	9101      	str	r1, [sp, #4]
    8a26:	3448      	adds	r4, #72	; 0x48
    8a28:	2c00      	cmp	r4, #0
    8a2a:	d101      	bne.n	8a30 <_fwalk_reent+0x14>
    8a2c:	0030      	movs	r0, r6
    8a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8a30:	6863      	ldr	r3, [r4, #4]
    8a32:	68a5      	ldr	r5, [r4, #8]
    8a34:	9300      	str	r3, [sp, #0]
    8a36:	9b00      	ldr	r3, [sp, #0]
    8a38:	3b01      	subs	r3, #1
    8a3a:	9300      	str	r3, [sp, #0]
    8a3c:	d501      	bpl.n	8a42 <_fwalk_reent+0x26>
    8a3e:	6824      	ldr	r4, [r4, #0]
    8a40:	e7f2      	b.n	8a28 <_fwalk_reent+0xc>
    8a42:	89ab      	ldrh	r3, [r5, #12]
    8a44:	2b01      	cmp	r3, #1
    8a46:	d908      	bls.n	8a5a <_fwalk_reent+0x3e>
    8a48:	220e      	movs	r2, #14
    8a4a:	5eab      	ldrsh	r3, [r5, r2]
    8a4c:	3301      	adds	r3, #1
    8a4e:	d004      	beq.n	8a5a <_fwalk_reent+0x3e>
    8a50:	0029      	movs	r1, r5
    8a52:	0038      	movs	r0, r7
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	4798      	blx	r3
    8a58:	4306      	orrs	r6, r0
    8a5a:	3568      	adds	r5, #104	; 0x68
    8a5c:	e7eb      	b.n	8a36 <_fwalk_reent+0x1a>

00008a5e <__locale_ctype_ptr_l>:
    8a5e:	30ec      	adds	r0, #236	; 0xec
    8a60:	6800      	ldr	r0, [r0, #0]
    8a62:	4770      	bx	lr

00008a64 <__locale_ctype_ptr>:
    8a64:	4b04      	ldr	r3, [pc, #16]	; (8a78 <__locale_ctype_ptr+0x14>)
    8a66:	681b      	ldr	r3, [r3, #0]
    8a68:	6a1b      	ldr	r3, [r3, #32]
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d100      	bne.n	8a70 <__locale_ctype_ptr+0xc>
    8a6e:	4b03      	ldr	r3, [pc, #12]	; (8a7c <__locale_ctype_ptr+0x18>)
    8a70:	33ec      	adds	r3, #236	; 0xec
    8a72:	6818      	ldr	r0, [r3, #0]
    8a74:	4770      	bx	lr
    8a76:	46c0      	nop			; (mov r8, r8)
    8a78:	20000068 	.word	0x20000068
    8a7c:	200000cc 	.word	0x200000cc

00008a80 <__swhatbuf_r>:
    8a80:	b570      	push	{r4, r5, r6, lr}
    8a82:	000e      	movs	r6, r1
    8a84:	001d      	movs	r5, r3
    8a86:	230e      	movs	r3, #14
    8a88:	5ec9      	ldrsh	r1, [r1, r3]
    8a8a:	b090      	sub	sp, #64	; 0x40
    8a8c:	0014      	movs	r4, r2
    8a8e:	2900      	cmp	r1, #0
    8a90:	da07      	bge.n	8aa2 <__swhatbuf_r+0x22>
    8a92:	2300      	movs	r3, #0
    8a94:	602b      	str	r3, [r5, #0]
    8a96:	89b3      	ldrh	r3, [r6, #12]
    8a98:	061b      	lsls	r3, r3, #24
    8a9a:	d411      	bmi.n	8ac0 <__swhatbuf_r+0x40>
    8a9c:	2380      	movs	r3, #128	; 0x80
    8a9e:	00db      	lsls	r3, r3, #3
    8aa0:	e00f      	b.n	8ac2 <__swhatbuf_r+0x42>
    8aa2:	aa01      	add	r2, sp, #4
    8aa4:	f001 f9a0 	bl	9de8 <_fstat_r>
    8aa8:	2800      	cmp	r0, #0
    8aaa:	dbf2      	blt.n	8a92 <__swhatbuf_r+0x12>
    8aac:	22f0      	movs	r2, #240	; 0xf0
    8aae:	9b02      	ldr	r3, [sp, #8]
    8ab0:	0212      	lsls	r2, r2, #8
    8ab2:	4013      	ands	r3, r2
    8ab4:	4a05      	ldr	r2, [pc, #20]	; (8acc <__swhatbuf_r+0x4c>)
    8ab6:	189b      	adds	r3, r3, r2
    8ab8:	425a      	negs	r2, r3
    8aba:	4153      	adcs	r3, r2
    8abc:	602b      	str	r3, [r5, #0]
    8abe:	e7ed      	b.n	8a9c <__swhatbuf_r+0x1c>
    8ac0:	2340      	movs	r3, #64	; 0x40
    8ac2:	2000      	movs	r0, #0
    8ac4:	6023      	str	r3, [r4, #0]
    8ac6:	b010      	add	sp, #64	; 0x40
    8ac8:	bd70      	pop	{r4, r5, r6, pc}
    8aca:	46c0      	nop			; (mov r8, r8)
    8acc:	ffffe000 	.word	0xffffe000

00008ad0 <__smakebuf_r>:
    8ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ad2:	2602      	movs	r6, #2
    8ad4:	898b      	ldrh	r3, [r1, #12]
    8ad6:	0005      	movs	r5, r0
    8ad8:	000c      	movs	r4, r1
    8ada:	4233      	tst	r3, r6
    8adc:	d006      	beq.n	8aec <__smakebuf_r+0x1c>
    8ade:	0023      	movs	r3, r4
    8ae0:	3347      	adds	r3, #71	; 0x47
    8ae2:	6023      	str	r3, [r4, #0]
    8ae4:	6123      	str	r3, [r4, #16]
    8ae6:	2301      	movs	r3, #1
    8ae8:	6163      	str	r3, [r4, #20]
    8aea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8aec:	ab01      	add	r3, sp, #4
    8aee:	466a      	mov	r2, sp
    8af0:	f7ff ffc6 	bl	8a80 <__swhatbuf_r>
    8af4:	9900      	ldr	r1, [sp, #0]
    8af6:	0007      	movs	r7, r0
    8af8:	0028      	movs	r0, r5
    8afa:	f000 f893 	bl	8c24 <_malloc_r>
    8afe:	2800      	cmp	r0, #0
    8b00:	d108      	bne.n	8b14 <__smakebuf_r+0x44>
    8b02:	220c      	movs	r2, #12
    8b04:	5ea3      	ldrsh	r3, [r4, r2]
    8b06:	059a      	lsls	r2, r3, #22
    8b08:	d4ef      	bmi.n	8aea <__smakebuf_r+0x1a>
    8b0a:	2203      	movs	r2, #3
    8b0c:	4393      	bics	r3, r2
    8b0e:	431e      	orrs	r6, r3
    8b10:	81a6      	strh	r6, [r4, #12]
    8b12:	e7e4      	b.n	8ade <__smakebuf_r+0xe>
    8b14:	4b0f      	ldr	r3, [pc, #60]	; (8b54 <__smakebuf_r+0x84>)
    8b16:	62ab      	str	r3, [r5, #40]	; 0x28
    8b18:	2380      	movs	r3, #128	; 0x80
    8b1a:	89a2      	ldrh	r2, [r4, #12]
    8b1c:	6020      	str	r0, [r4, #0]
    8b1e:	4313      	orrs	r3, r2
    8b20:	81a3      	strh	r3, [r4, #12]
    8b22:	9b00      	ldr	r3, [sp, #0]
    8b24:	6120      	str	r0, [r4, #16]
    8b26:	6163      	str	r3, [r4, #20]
    8b28:	9b01      	ldr	r3, [sp, #4]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d00d      	beq.n	8b4a <__smakebuf_r+0x7a>
    8b2e:	230e      	movs	r3, #14
    8b30:	5ee1      	ldrsh	r1, [r4, r3]
    8b32:	0028      	movs	r0, r5
    8b34:	f001 f96a 	bl	9e0c <_isatty_r>
    8b38:	2800      	cmp	r0, #0
    8b3a:	d006      	beq.n	8b4a <__smakebuf_r+0x7a>
    8b3c:	2203      	movs	r2, #3
    8b3e:	89a3      	ldrh	r3, [r4, #12]
    8b40:	4393      	bics	r3, r2
    8b42:	001a      	movs	r2, r3
    8b44:	2301      	movs	r3, #1
    8b46:	4313      	orrs	r3, r2
    8b48:	81a3      	strh	r3, [r4, #12]
    8b4a:	89a0      	ldrh	r0, [r4, #12]
    8b4c:	4338      	orrs	r0, r7
    8b4e:	81a0      	strh	r0, [r4, #12]
    8b50:	e7cb      	b.n	8aea <__smakebuf_r+0x1a>
    8b52:	46c0      	nop			; (mov r8, r8)
    8b54:	00008879 	.word	0x00008879

00008b58 <malloc>:
    8b58:	b510      	push	{r4, lr}
    8b5a:	4b03      	ldr	r3, [pc, #12]	; (8b68 <malloc+0x10>)
    8b5c:	0001      	movs	r1, r0
    8b5e:	6818      	ldr	r0, [r3, #0]
    8b60:	f000 f860 	bl	8c24 <_malloc_r>
    8b64:	bd10      	pop	{r4, pc}
    8b66:	46c0      	nop			; (mov r8, r8)
    8b68:	20000068 	.word	0x20000068

00008b6c <__ascii_mbtowc>:
    8b6c:	b082      	sub	sp, #8
    8b6e:	2900      	cmp	r1, #0
    8b70:	d100      	bne.n	8b74 <__ascii_mbtowc+0x8>
    8b72:	a901      	add	r1, sp, #4
    8b74:	1e10      	subs	r0, r2, #0
    8b76:	d006      	beq.n	8b86 <__ascii_mbtowc+0x1a>
    8b78:	2b00      	cmp	r3, #0
    8b7a:	d006      	beq.n	8b8a <__ascii_mbtowc+0x1e>
    8b7c:	7813      	ldrb	r3, [r2, #0]
    8b7e:	600b      	str	r3, [r1, #0]
    8b80:	7810      	ldrb	r0, [r2, #0]
    8b82:	1e43      	subs	r3, r0, #1
    8b84:	4198      	sbcs	r0, r3
    8b86:	b002      	add	sp, #8
    8b88:	4770      	bx	lr
    8b8a:	2002      	movs	r0, #2
    8b8c:	4240      	negs	r0, r0
    8b8e:	e7fa      	b.n	8b86 <__ascii_mbtowc+0x1a>

00008b90 <_free_r>:
    8b90:	b570      	push	{r4, r5, r6, lr}
    8b92:	0005      	movs	r5, r0
    8b94:	2900      	cmp	r1, #0
    8b96:	d010      	beq.n	8bba <_free_r+0x2a>
    8b98:	1f0c      	subs	r4, r1, #4
    8b9a:	6823      	ldr	r3, [r4, #0]
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	da00      	bge.n	8ba2 <_free_r+0x12>
    8ba0:	18e4      	adds	r4, r4, r3
    8ba2:	0028      	movs	r0, r5
    8ba4:	f001 f963 	bl	9e6e <__malloc_lock>
    8ba8:	4a1d      	ldr	r2, [pc, #116]	; (8c20 <_free_r+0x90>)
    8baa:	6813      	ldr	r3, [r2, #0]
    8bac:	2b00      	cmp	r3, #0
    8bae:	d105      	bne.n	8bbc <_free_r+0x2c>
    8bb0:	6063      	str	r3, [r4, #4]
    8bb2:	6014      	str	r4, [r2, #0]
    8bb4:	0028      	movs	r0, r5
    8bb6:	f001 f95b 	bl	9e70 <__malloc_unlock>
    8bba:	bd70      	pop	{r4, r5, r6, pc}
    8bbc:	42a3      	cmp	r3, r4
    8bbe:	d909      	bls.n	8bd4 <_free_r+0x44>
    8bc0:	6821      	ldr	r1, [r4, #0]
    8bc2:	1860      	adds	r0, r4, r1
    8bc4:	4283      	cmp	r3, r0
    8bc6:	d1f3      	bne.n	8bb0 <_free_r+0x20>
    8bc8:	6818      	ldr	r0, [r3, #0]
    8bca:	685b      	ldr	r3, [r3, #4]
    8bcc:	1841      	adds	r1, r0, r1
    8bce:	6021      	str	r1, [r4, #0]
    8bd0:	e7ee      	b.n	8bb0 <_free_r+0x20>
    8bd2:	0013      	movs	r3, r2
    8bd4:	685a      	ldr	r2, [r3, #4]
    8bd6:	2a00      	cmp	r2, #0
    8bd8:	d001      	beq.n	8bde <_free_r+0x4e>
    8bda:	42a2      	cmp	r2, r4
    8bdc:	d9f9      	bls.n	8bd2 <_free_r+0x42>
    8bde:	6819      	ldr	r1, [r3, #0]
    8be0:	1858      	adds	r0, r3, r1
    8be2:	42a0      	cmp	r0, r4
    8be4:	d10b      	bne.n	8bfe <_free_r+0x6e>
    8be6:	6820      	ldr	r0, [r4, #0]
    8be8:	1809      	adds	r1, r1, r0
    8bea:	1858      	adds	r0, r3, r1
    8bec:	6019      	str	r1, [r3, #0]
    8bee:	4282      	cmp	r2, r0
    8bf0:	d1e0      	bne.n	8bb4 <_free_r+0x24>
    8bf2:	6810      	ldr	r0, [r2, #0]
    8bf4:	6852      	ldr	r2, [r2, #4]
    8bf6:	1841      	adds	r1, r0, r1
    8bf8:	6019      	str	r1, [r3, #0]
    8bfa:	605a      	str	r2, [r3, #4]
    8bfc:	e7da      	b.n	8bb4 <_free_r+0x24>
    8bfe:	42a0      	cmp	r0, r4
    8c00:	d902      	bls.n	8c08 <_free_r+0x78>
    8c02:	230c      	movs	r3, #12
    8c04:	602b      	str	r3, [r5, #0]
    8c06:	e7d5      	b.n	8bb4 <_free_r+0x24>
    8c08:	6821      	ldr	r1, [r4, #0]
    8c0a:	1860      	adds	r0, r4, r1
    8c0c:	4282      	cmp	r2, r0
    8c0e:	d103      	bne.n	8c18 <_free_r+0x88>
    8c10:	6810      	ldr	r0, [r2, #0]
    8c12:	6852      	ldr	r2, [r2, #4]
    8c14:	1841      	adds	r1, r0, r1
    8c16:	6021      	str	r1, [r4, #0]
    8c18:	6062      	str	r2, [r4, #4]
    8c1a:	605c      	str	r4, [r3, #4]
    8c1c:	e7ca      	b.n	8bb4 <_free_r+0x24>
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	200002d4 	.word	0x200002d4

00008c24 <_malloc_r>:
    8c24:	2303      	movs	r3, #3
    8c26:	b570      	push	{r4, r5, r6, lr}
    8c28:	1ccd      	adds	r5, r1, #3
    8c2a:	439d      	bics	r5, r3
    8c2c:	3508      	adds	r5, #8
    8c2e:	0006      	movs	r6, r0
    8c30:	2d0c      	cmp	r5, #12
    8c32:	d21e      	bcs.n	8c72 <_malloc_r+0x4e>
    8c34:	250c      	movs	r5, #12
    8c36:	42a9      	cmp	r1, r5
    8c38:	d81d      	bhi.n	8c76 <_malloc_r+0x52>
    8c3a:	0030      	movs	r0, r6
    8c3c:	f001 f917 	bl	9e6e <__malloc_lock>
    8c40:	4a25      	ldr	r2, [pc, #148]	; (8cd8 <_malloc_r+0xb4>)
    8c42:	6814      	ldr	r4, [r2, #0]
    8c44:	0021      	movs	r1, r4
    8c46:	2900      	cmp	r1, #0
    8c48:	d119      	bne.n	8c7e <_malloc_r+0x5a>
    8c4a:	4c24      	ldr	r4, [pc, #144]	; (8cdc <_malloc_r+0xb8>)
    8c4c:	6823      	ldr	r3, [r4, #0]
    8c4e:	2b00      	cmp	r3, #0
    8c50:	d103      	bne.n	8c5a <_malloc_r+0x36>
    8c52:	0030      	movs	r0, r6
    8c54:	f000 febe 	bl	99d4 <_sbrk_r>
    8c58:	6020      	str	r0, [r4, #0]
    8c5a:	0029      	movs	r1, r5
    8c5c:	0030      	movs	r0, r6
    8c5e:	f000 feb9 	bl	99d4 <_sbrk_r>
    8c62:	1c43      	adds	r3, r0, #1
    8c64:	d12c      	bne.n	8cc0 <_malloc_r+0x9c>
    8c66:	230c      	movs	r3, #12
    8c68:	0030      	movs	r0, r6
    8c6a:	6033      	str	r3, [r6, #0]
    8c6c:	f001 f900 	bl	9e70 <__malloc_unlock>
    8c70:	e003      	b.n	8c7a <_malloc_r+0x56>
    8c72:	2d00      	cmp	r5, #0
    8c74:	dadf      	bge.n	8c36 <_malloc_r+0x12>
    8c76:	230c      	movs	r3, #12
    8c78:	6033      	str	r3, [r6, #0]
    8c7a:	2000      	movs	r0, #0
    8c7c:	bd70      	pop	{r4, r5, r6, pc}
    8c7e:	680b      	ldr	r3, [r1, #0]
    8c80:	1b5b      	subs	r3, r3, r5
    8c82:	d41a      	bmi.n	8cba <_malloc_r+0x96>
    8c84:	2b0b      	cmp	r3, #11
    8c86:	d903      	bls.n	8c90 <_malloc_r+0x6c>
    8c88:	600b      	str	r3, [r1, #0]
    8c8a:	18cc      	adds	r4, r1, r3
    8c8c:	6025      	str	r5, [r4, #0]
    8c8e:	e003      	b.n	8c98 <_malloc_r+0x74>
    8c90:	428c      	cmp	r4, r1
    8c92:	d10e      	bne.n	8cb2 <_malloc_r+0x8e>
    8c94:	6863      	ldr	r3, [r4, #4]
    8c96:	6013      	str	r3, [r2, #0]
    8c98:	0030      	movs	r0, r6
    8c9a:	f001 f8e9 	bl	9e70 <__malloc_unlock>
    8c9e:	0020      	movs	r0, r4
    8ca0:	2207      	movs	r2, #7
    8ca2:	300b      	adds	r0, #11
    8ca4:	1d23      	adds	r3, r4, #4
    8ca6:	4390      	bics	r0, r2
    8ca8:	1ac3      	subs	r3, r0, r3
    8caa:	d0e7      	beq.n	8c7c <_malloc_r+0x58>
    8cac:	425a      	negs	r2, r3
    8cae:	50e2      	str	r2, [r4, r3]
    8cb0:	e7e4      	b.n	8c7c <_malloc_r+0x58>
    8cb2:	684b      	ldr	r3, [r1, #4]
    8cb4:	6063      	str	r3, [r4, #4]
    8cb6:	000c      	movs	r4, r1
    8cb8:	e7ee      	b.n	8c98 <_malloc_r+0x74>
    8cba:	000c      	movs	r4, r1
    8cbc:	6849      	ldr	r1, [r1, #4]
    8cbe:	e7c2      	b.n	8c46 <_malloc_r+0x22>
    8cc0:	2303      	movs	r3, #3
    8cc2:	1cc4      	adds	r4, r0, #3
    8cc4:	439c      	bics	r4, r3
    8cc6:	42a0      	cmp	r0, r4
    8cc8:	d0e0      	beq.n	8c8c <_malloc_r+0x68>
    8cca:	1a21      	subs	r1, r4, r0
    8ccc:	0030      	movs	r0, r6
    8cce:	f000 fe81 	bl	99d4 <_sbrk_r>
    8cd2:	1c43      	adds	r3, r0, #1
    8cd4:	d1da      	bne.n	8c8c <_malloc_r+0x68>
    8cd6:	e7c6      	b.n	8c66 <_malloc_r+0x42>
    8cd8:	200002d4 	.word	0x200002d4
    8cdc:	200002d8 	.word	0x200002d8

00008ce0 <__sfputc_r>:
    8ce0:	6893      	ldr	r3, [r2, #8]
    8ce2:	b510      	push	{r4, lr}
    8ce4:	3b01      	subs	r3, #1
    8ce6:	6093      	str	r3, [r2, #8]
    8ce8:	2b00      	cmp	r3, #0
    8cea:	da05      	bge.n	8cf8 <__sfputc_r+0x18>
    8cec:	6994      	ldr	r4, [r2, #24]
    8cee:	42a3      	cmp	r3, r4
    8cf0:	db08      	blt.n	8d04 <__sfputc_r+0x24>
    8cf2:	b2cb      	uxtb	r3, r1
    8cf4:	2b0a      	cmp	r3, #10
    8cf6:	d005      	beq.n	8d04 <__sfputc_r+0x24>
    8cf8:	6813      	ldr	r3, [r2, #0]
    8cfa:	1c58      	adds	r0, r3, #1
    8cfc:	6010      	str	r0, [r2, #0]
    8cfe:	7019      	strb	r1, [r3, #0]
    8d00:	b2c8      	uxtb	r0, r1
    8d02:	bd10      	pop	{r4, pc}
    8d04:	f7ff fc22 	bl	854c <__swbuf_r>
    8d08:	e7fb      	b.n	8d02 <__sfputc_r+0x22>

00008d0a <__sfputs_r>:
    8d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d0c:	0006      	movs	r6, r0
    8d0e:	000f      	movs	r7, r1
    8d10:	0014      	movs	r4, r2
    8d12:	18d5      	adds	r5, r2, r3
    8d14:	42ac      	cmp	r4, r5
    8d16:	d101      	bne.n	8d1c <__sfputs_r+0x12>
    8d18:	2000      	movs	r0, #0
    8d1a:	e007      	b.n	8d2c <__sfputs_r+0x22>
    8d1c:	7821      	ldrb	r1, [r4, #0]
    8d1e:	003a      	movs	r2, r7
    8d20:	0030      	movs	r0, r6
    8d22:	f7ff ffdd 	bl	8ce0 <__sfputc_r>
    8d26:	3401      	adds	r4, #1
    8d28:	1c43      	adds	r3, r0, #1
    8d2a:	d1f3      	bne.n	8d14 <__sfputs_r+0xa>
    8d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008d30 <_vfiprintf_r>:
    8d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d32:	b09f      	sub	sp, #124	; 0x7c
    8d34:	0006      	movs	r6, r0
    8d36:	000f      	movs	r7, r1
    8d38:	0014      	movs	r4, r2
    8d3a:	9305      	str	r3, [sp, #20]
    8d3c:	2800      	cmp	r0, #0
    8d3e:	d004      	beq.n	8d4a <_vfiprintf_r+0x1a>
    8d40:	6983      	ldr	r3, [r0, #24]
    8d42:	2b00      	cmp	r3, #0
    8d44:	d101      	bne.n	8d4a <_vfiprintf_r+0x1a>
    8d46:	f7ff fdd9 	bl	88fc <__sinit>
    8d4a:	4b7f      	ldr	r3, [pc, #508]	; (8f48 <_vfiprintf_r+0x218>)
    8d4c:	429f      	cmp	r7, r3
    8d4e:	d15c      	bne.n	8e0a <_vfiprintf_r+0xda>
    8d50:	6877      	ldr	r7, [r6, #4]
    8d52:	89bb      	ldrh	r3, [r7, #12]
    8d54:	071b      	lsls	r3, r3, #28
    8d56:	d562      	bpl.n	8e1e <_vfiprintf_r+0xee>
    8d58:	693b      	ldr	r3, [r7, #16]
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d05f      	beq.n	8e1e <_vfiprintf_r+0xee>
    8d5e:	2300      	movs	r3, #0
    8d60:	ad06      	add	r5, sp, #24
    8d62:	616b      	str	r3, [r5, #20]
    8d64:	3320      	adds	r3, #32
    8d66:	766b      	strb	r3, [r5, #25]
    8d68:	3310      	adds	r3, #16
    8d6a:	76ab      	strb	r3, [r5, #26]
    8d6c:	9402      	str	r4, [sp, #8]
    8d6e:	9c02      	ldr	r4, [sp, #8]
    8d70:	7823      	ldrb	r3, [r4, #0]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d15d      	bne.n	8e32 <_vfiprintf_r+0x102>
    8d76:	9b02      	ldr	r3, [sp, #8]
    8d78:	1ae3      	subs	r3, r4, r3
    8d7a:	9304      	str	r3, [sp, #16]
    8d7c:	d00d      	beq.n	8d9a <_vfiprintf_r+0x6a>
    8d7e:	9b04      	ldr	r3, [sp, #16]
    8d80:	9a02      	ldr	r2, [sp, #8]
    8d82:	0039      	movs	r1, r7
    8d84:	0030      	movs	r0, r6
    8d86:	f7ff ffc0 	bl	8d0a <__sfputs_r>
    8d8a:	1c43      	adds	r3, r0, #1
    8d8c:	d100      	bne.n	8d90 <_vfiprintf_r+0x60>
    8d8e:	e0cc      	b.n	8f2a <_vfiprintf_r+0x1fa>
    8d90:	696a      	ldr	r2, [r5, #20]
    8d92:	9b04      	ldr	r3, [sp, #16]
    8d94:	4694      	mov	ip, r2
    8d96:	4463      	add	r3, ip
    8d98:	616b      	str	r3, [r5, #20]
    8d9a:	7823      	ldrb	r3, [r4, #0]
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	d100      	bne.n	8da2 <_vfiprintf_r+0x72>
    8da0:	e0c3      	b.n	8f2a <_vfiprintf_r+0x1fa>
    8da2:	2201      	movs	r2, #1
    8da4:	2300      	movs	r3, #0
    8da6:	4252      	negs	r2, r2
    8da8:	606a      	str	r2, [r5, #4]
    8daa:	a902      	add	r1, sp, #8
    8dac:	3254      	adds	r2, #84	; 0x54
    8dae:	1852      	adds	r2, r2, r1
    8db0:	3401      	adds	r4, #1
    8db2:	602b      	str	r3, [r5, #0]
    8db4:	60eb      	str	r3, [r5, #12]
    8db6:	60ab      	str	r3, [r5, #8]
    8db8:	7013      	strb	r3, [r2, #0]
    8dba:	65ab      	str	r3, [r5, #88]	; 0x58
    8dbc:	7821      	ldrb	r1, [r4, #0]
    8dbe:	2205      	movs	r2, #5
    8dc0:	4862      	ldr	r0, [pc, #392]	; (8f4c <_vfiprintf_r+0x21c>)
    8dc2:	f001 f849 	bl	9e58 <memchr>
    8dc6:	1c63      	adds	r3, r4, #1
    8dc8:	469c      	mov	ip, r3
    8dca:	2800      	cmp	r0, #0
    8dcc:	d135      	bne.n	8e3a <_vfiprintf_r+0x10a>
    8dce:	6829      	ldr	r1, [r5, #0]
    8dd0:	06cb      	lsls	r3, r1, #27
    8dd2:	d504      	bpl.n	8dde <_vfiprintf_r+0xae>
    8dd4:	2353      	movs	r3, #83	; 0x53
    8dd6:	aa02      	add	r2, sp, #8
    8dd8:	3020      	adds	r0, #32
    8dda:	189b      	adds	r3, r3, r2
    8ddc:	7018      	strb	r0, [r3, #0]
    8dde:	070b      	lsls	r3, r1, #28
    8de0:	d504      	bpl.n	8dec <_vfiprintf_r+0xbc>
    8de2:	2353      	movs	r3, #83	; 0x53
    8de4:	202b      	movs	r0, #43	; 0x2b
    8de6:	aa02      	add	r2, sp, #8
    8de8:	189b      	adds	r3, r3, r2
    8dea:	7018      	strb	r0, [r3, #0]
    8dec:	7823      	ldrb	r3, [r4, #0]
    8dee:	2b2a      	cmp	r3, #42	; 0x2a
    8df0:	d02c      	beq.n	8e4c <_vfiprintf_r+0x11c>
    8df2:	2000      	movs	r0, #0
    8df4:	210a      	movs	r1, #10
    8df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8df8:	7822      	ldrb	r2, [r4, #0]
    8dfa:	3a30      	subs	r2, #48	; 0x30
    8dfc:	2a09      	cmp	r2, #9
    8dfe:	d800      	bhi.n	8e02 <_vfiprintf_r+0xd2>
    8e00:	e06b      	b.n	8eda <_vfiprintf_r+0x1aa>
    8e02:	2800      	cmp	r0, #0
    8e04:	d02a      	beq.n	8e5c <_vfiprintf_r+0x12c>
    8e06:	9309      	str	r3, [sp, #36]	; 0x24
    8e08:	e028      	b.n	8e5c <_vfiprintf_r+0x12c>
    8e0a:	4b51      	ldr	r3, [pc, #324]	; (8f50 <_vfiprintf_r+0x220>)
    8e0c:	429f      	cmp	r7, r3
    8e0e:	d101      	bne.n	8e14 <_vfiprintf_r+0xe4>
    8e10:	68b7      	ldr	r7, [r6, #8]
    8e12:	e79e      	b.n	8d52 <_vfiprintf_r+0x22>
    8e14:	4b4f      	ldr	r3, [pc, #316]	; (8f54 <_vfiprintf_r+0x224>)
    8e16:	429f      	cmp	r7, r3
    8e18:	d19b      	bne.n	8d52 <_vfiprintf_r+0x22>
    8e1a:	68f7      	ldr	r7, [r6, #12]
    8e1c:	e799      	b.n	8d52 <_vfiprintf_r+0x22>
    8e1e:	0039      	movs	r1, r7
    8e20:	0030      	movs	r0, r6
    8e22:	f7ff fbe9 	bl	85f8 <__swsetup_r>
    8e26:	2800      	cmp	r0, #0
    8e28:	d099      	beq.n	8d5e <_vfiprintf_r+0x2e>
    8e2a:	2001      	movs	r0, #1
    8e2c:	4240      	negs	r0, r0
    8e2e:	b01f      	add	sp, #124	; 0x7c
    8e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e32:	2b25      	cmp	r3, #37	; 0x25
    8e34:	d09f      	beq.n	8d76 <_vfiprintf_r+0x46>
    8e36:	3401      	adds	r4, #1
    8e38:	e79a      	b.n	8d70 <_vfiprintf_r+0x40>
    8e3a:	4b44      	ldr	r3, [pc, #272]	; (8f4c <_vfiprintf_r+0x21c>)
    8e3c:	6829      	ldr	r1, [r5, #0]
    8e3e:	1ac0      	subs	r0, r0, r3
    8e40:	2301      	movs	r3, #1
    8e42:	4083      	lsls	r3, r0
    8e44:	430b      	orrs	r3, r1
    8e46:	602b      	str	r3, [r5, #0]
    8e48:	4664      	mov	r4, ip
    8e4a:	e7b7      	b.n	8dbc <_vfiprintf_r+0x8c>
    8e4c:	9b05      	ldr	r3, [sp, #20]
    8e4e:	1d18      	adds	r0, r3, #4
    8e50:	681b      	ldr	r3, [r3, #0]
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	2b00      	cmp	r3, #0
    8e56:	db3a      	blt.n	8ece <_vfiprintf_r+0x19e>
    8e58:	9309      	str	r3, [sp, #36]	; 0x24
    8e5a:	4664      	mov	r4, ip
    8e5c:	7823      	ldrb	r3, [r4, #0]
    8e5e:	2b2e      	cmp	r3, #46	; 0x2e
    8e60:	d10b      	bne.n	8e7a <_vfiprintf_r+0x14a>
    8e62:	7863      	ldrb	r3, [r4, #1]
    8e64:	1c62      	adds	r2, r4, #1
    8e66:	2b2a      	cmp	r3, #42	; 0x2a
    8e68:	d13f      	bne.n	8eea <_vfiprintf_r+0x1ba>
    8e6a:	9b05      	ldr	r3, [sp, #20]
    8e6c:	3402      	adds	r4, #2
    8e6e:	1d1a      	adds	r2, r3, #4
    8e70:	681b      	ldr	r3, [r3, #0]
    8e72:	9205      	str	r2, [sp, #20]
    8e74:	2b00      	cmp	r3, #0
    8e76:	db35      	blt.n	8ee4 <_vfiprintf_r+0x1b4>
    8e78:	9307      	str	r3, [sp, #28]
    8e7a:	7821      	ldrb	r1, [r4, #0]
    8e7c:	2203      	movs	r2, #3
    8e7e:	4836      	ldr	r0, [pc, #216]	; (8f58 <_vfiprintf_r+0x228>)
    8e80:	f000 ffea 	bl	9e58 <memchr>
    8e84:	2800      	cmp	r0, #0
    8e86:	d007      	beq.n	8e98 <_vfiprintf_r+0x168>
    8e88:	4b33      	ldr	r3, [pc, #204]	; (8f58 <_vfiprintf_r+0x228>)
    8e8a:	682a      	ldr	r2, [r5, #0]
    8e8c:	1ac0      	subs	r0, r0, r3
    8e8e:	2340      	movs	r3, #64	; 0x40
    8e90:	4083      	lsls	r3, r0
    8e92:	4313      	orrs	r3, r2
    8e94:	602b      	str	r3, [r5, #0]
    8e96:	3401      	adds	r4, #1
    8e98:	7821      	ldrb	r1, [r4, #0]
    8e9a:	1c63      	adds	r3, r4, #1
    8e9c:	2206      	movs	r2, #6
    8e9e:	482f      	ldr	r0, [pc, #188]	; (8f5c <_vfiprintf_r+0x22c>)
    8ea0:	9302      	str	r3, [sp, #8]
    8ea2:	7629      	strb	r1, [r5, #24]
    8ea4:	f000 ffd8 	bl	9e58 <memchr>
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d044      	beq.n	8f36 <_vfiprintf_r+0x206>
    8eac:	4b2c      	ldr	r3, [pc, #176]	; (8f60 <_vfiprintf_r+0x230>)
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d12f      	bne.n	8f12 <_vfiprintf_r+0x1e2>
    8eb2:	6829      	ldr	r1, [r5, #0]
    8eb4:	9b05      	ldr	r3, [sp, #20]
    8eb6:	2207      	movs	r2, #7
    8eb8:	05c9      	lsls	r1, r1, #23
    8eba:	d528      	bpl.n	8f0e <_vfiprintf_r+0x1de>
    8ebc:	189b      	adds	r3, r3, r2
    8ebe:	4393      	bics	r3, r2
    8ec0:	3308      	adds	r3, #8
    8ec2:	9305      	str	r3, [sp, #20]
    8ec4:	696b      	ldr	r3, [r5, #20]
    8ec6:	9a03      	ldr	r2, [sp, #12]
    8ec8:	189b      	adds	r3, r3, r2
    8eca:	616b      	str	r3, [r5, #20]
    8ecc:	e74f      	b.n	8d6e <_vfiprintf_r+0x3e>
    8ece:	425b      	negs	r3, r3
    8ed0:	60eb      	str	r3, [r5, #12]
    8ed2:	2302      	movs	r3, #2
    8ed4:	430b      	orrs	r3, r1
    8ed6:	602b      	str	r3, [r5, #0]
    8ed8:	e7bf      	b.n	8e5a <_vfiprintf_r+0x12a>
    8eda:	434b      	muls	r3, r1
    8edc:	3401      	adds	r4, #1
    8ede:	189b      	adds	r3, r3, r2
    8ee0:	2001      	movs	r0, #1
    8ee2:	e789      	b.n	8df8 <_vfiprintf_r+0xc8>
    8ee4:	2301      	movs	r3, #1
    8ee6:	425b      	negs	r3, r3
    8ee8:	e7c6      	b.n	8e78 <_vfiprintf_r+0x148>
    8eea:	2300      	movs	r3, #0
    8eec:	0014      	movs	r4, r2
    8eee:	200a      	movs	r0, #10
    8ef0:	001a      	movs	r2, r3
    8ef2:	606b      	str	r3, [r5, #4]
    8ef4:	7821      	ldrb	r1, [r4, #0]
    8ef6:	3930      	subs	r1, #48	; 0x30
    8ef8:	2909      	cmp	r1, #9
    8efa:	d903      	bls.n	8f04 <_vfiprintf_r+0x1d4>
    8efc:	2b00      	cmp	r3, #0
    8efe:	d0bc      	beq.n	8e7a <_vfiprintf_r+0x14a>
    8f00:	9207      	str	r2, [sp, #28]
    8f02:	e7ba      	b.n	8e7a <_vfiprintf_r+0x14a>
    8f04:	4342      	muls	r2, r0
    8f06:	3401      	adds	r4, #1
    8f08:	1852      	adds	r2, r2, r1
    8f0a:	2301      	movs	r3, #1
    8f0c:	e7f2      	b.n	8ef4 <_vfiprintf_r+0x1c4>
    8f0e:	3307      	adds	r3, #7
    8f10:	e7d5      	b.n	8ebe <_vfiprintf_r+0x18e>
    8f12:	ab05      	add	r3, sp, #20
    8f14:	9300      	str	r3, [sp, #0]
    8f16:	003a      	movs	r2, r7
    8f18:	4b12      	ldr	r3, [pc, #72]	; (8f64 <_vfiprintf_r+0x234>)
    8f1a:	0029      	movs	r1, r5
    8f1c:	0030      	movs	r0, r6
    8f1e:	e000      	b.n	8f22 <_vfiprintf_r+0x1f2>
    8f20:	bf00      	nop
    8f22:	9003      	str	r0, [sp, #12]
    8f24:	9b03      	ldr	r3, [sp, #12]
    8f26:	3301      	adds	r3, #1
    8f28:	d1cc      	bne.n	8ec4 <_vfiprintf_r+0x194>
    8f2a:	89bb      	ldrh	r3, [r7, #12]
    8f2c:	065b      	lsls	r3, r3, #25
    8f2e:	d500      	bpl.n	8f32 <_vfiprintf_r+0x202>
    8f30:	e77b      	b.n	8e2a <_vfiprintf_r+0xfa>
    8f32:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f34:	e77b      	b.n	8e2e <_vfiprintf_r+0xfe>
    8f36:	ab05      	add	r3, sp, #20
    8f38:	9300      	str	r3, [sp, #0]
    8f3a:	003a      	movs	r2, r7
    8f3c:	4b09      	ldr	r3, [pc, #36]	; (8f64 <_vfiprintf_r+0x234>)
    8f3e:	0029      	movs	r1, r5
    8f40:	0030      	movs	r0, r6
    8f42:	f000 f87f 	bl	9044 <_printf_i>
    8f46:	e7ec      	b.n	8f22 <_vfiprintf_r+0x1f2>
    8f48:	0000a6c4 	.word	0x0000a6c4
    8f4c:	0000a70e 	.word	0x0000a70e
    8f50:	0000a6e4 	.word	0x0000a6e4
    8f54:	0000a6a4 	.word	0x0000a6a4
    8f58:	0000a714 	.word	0x0000a714
    8f5c:	0000a718 	.word	0x0000a718
    8f60:	00000000 	.word	0x00000000
    8f64:	00008d0b 	.word	0x00008d0b

00008f68 <_printf_common>:
    8f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f6a:	0015      	movs	r5, r2
    8f6c:	9301      	str	r3, [sp, #4]
    8f6e:	688a      	ldr	r2, [r1, #8]
    8f70:	690b      	ldr	r3, [r1, #16]
    8f72:	9000      	str	r0, [sp, #0]
    8f74:	000c      	movs	r4, r1
    8f76:	4293      	cmp	r3, r2
    8f78:	da00      	bge.n	8f7c <_printf_common+0x14>
    8f7a:	0013      	movs	r3, r2
    8f7c:	0022      	movs	r2, r4
    8f7e:	602b      	str	r3, [r5, #0]
    8f80:	3243      	adds	r2, #67	; 0x43
    8f82:	7812      	ldrb	r2, [r2, #0]
    8f84:	2a00      	cmp	r2, #0
    8f86:	d001      	beq.n	8f8c <_printf_common+0x24>
    8f88:	3301      	adds	r3, #1
    8f8a:	602b      	str	r3, [r5, #0]
    8f8c:	6823      	ldr	r3, [r4, #0]
    8f8e:	069b      	lsls	r3, r3, #26
    8f90:	d502      	bpl.n	8f98 <_printf_common+0x30>
    8f92:	682b      	ldr	r3, [r5, #0]
    8f94:	3302      	adds	r3, #2
    8f96:	602b      	str	r3, [r5, #0]
    8f98:	2706      	movs	r7, #6
    8f9a:	6823      	ldr	r3, [r4, #0]
    8f9c:	401f      	ands	r7, r3
    8f9e:	d027      	beq.n	8ff0 <_printf_common+0x88>
    8fa0:	0023      	movs	r3, r4
    8fa2:	3343      	adds	r3, #67	; 0x43
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	1e5a      	subs	r2, r3, #1
    8fa8:	4193      	sbcs	r3, r2
    8faa:	6822      	ldr	r2, [r4, #0]
    8fac:	0692      	lsls	r2, r2, #26
    8fae:	d430      	bmi.n	9012 <_printf_common+0xaa>
    8fb0:	0022      	movs	r2, r4
    8fb2:	9901      	ldr	r1, [sp, #4]
    8fb4:	3243      	adds	r2, #67	; 0x43
    8fb6:	9800      	ldr	r0, [sp, #0]
    8fb8:	9e08      	ldr	r6, [sp, #32]
    8fba:	47b0      	blx	r6
    8fbc:	1c43      	adds	r3, r0, #1
    8fbe:	d025      	beq.n	900c <_printf_common+0xa4>
    8fc0:	2306      	movs	r3, #6
    8fc2:	6820      	ldr	r0, [r4, #0]
    8fc4:	682a      	ldr	r2, [r5, #0]
    8fc6:	68e1      	ldr	r1, [r4, #12]
    8fc8:	4003      	ands	r3, r0
    8fca:	2500      	movs	r5, #0
    8fcc:	2b04      	cmp	r3, #4
    8fce:	d103      	bne.n	8fd8 <_printf_common+0x70>
    8fd0:	1a8d      	subs	r5, r1, r2
    8fd2:	43eb      	mvns	r3, r5
    8fd4:	17db      	asrs	r3, r3, #31
    8fd6:	401d      	ands	r5, r3
    8fd8:	68a3      	ldr	r3, [r4, #8]
    8fda:	6922      	ldr	r2, [r4, #16]
    8fdc:	4293      	cmp	r3, r2
    8fde:	dd01      	ble.n	8fe4 <_printf_common+0x7c>
    8fe0:	1a9b      	subs	r3, r3, r2
    8fe2:	18ed      	adds	r5, r5, r3
    8fe4:	2700      	movs	r7, #0
    8fe6:	42bd      	cmp	r5, r7
    8fe8:	d120      	bne.n	902c <_printf_common+0xc4>
    8fea:	2000      	movs	r0, #0
    8fec:	e010      	b.n	9010 <_printf_common+0xa8>
    8fee:	3701      	adds	r7, #1
    8ff0:	68e3      	ldr	r3, [r4, #12]
    8ff2:	682a      	ldr	r2, [r5, #0]
    8ff4:	1a9b      	subs	r3, r3, r2
    8ff6:	429f      	cmp	r7, r3
    8ff8:	dad2      	bge.n	8fa0 <_printf_common+0x38>
    8ffa:	0022      	movs	r2, r4
    8ffc:	2301      	movs	r3, #1
    8ffe:	3219      	adds	r2, #25
    9000:	9901      	ldr	r1, [sp, #4]
    9002:	9800      	ldr	r0, [sp, #0]
    9004:	9e08      	ldr	r6, [sp, #32]
    9006:	47b0      	blx	r6
    9008:	1c43      	adds	r3, r0, #1
    900a:	d1f0      	bne.n	8fee <_printf_common+0x86>
    900c:	2001      	movs	r0, #1
    900e:	4240      	negs	r0, r0
    9010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9012:	2030      	movs	r0, #48	; 0x30
    9014:	18e1      	adds	r1, r4, r3
    9016:	3143      	adds	r1, #67	; 0x43
    9018:	7008      	strb	r0, [r1, #0]
    901a:	0021      	movs	r1, r4
    901c:	1c5a      	adds	r2, r3, #1
    901e:	3145      	adds	r1, #69	; 0x45
    9020:	7809      	ldrb	r1, [r1, #0]
    9022:	18a2      	adds	r2, r4, r2
    9024:	3243      	adds	r2, #67	; 0x43
    9026:	3302      	adds	r3, #2
    9028:	7011      	strb	r1, [r2, #0]
    902a:	e7c1      	b.n	8fb0 <_printf_common+0x48>
    902c:	0022      	movs	r2, r4
    902e:	2301      	movs	r3, #1
    9030:	321a      	adds	r2, #26
    9032:	9901      	ldr	r1, [sp, #4]
    9034:	9800      	ldr	r0, [sp, #0]
    9036:	9e08      	ldr	r6, [sp, #32]
    9038:	47b0      	blx	r6
    903a:	1c43      	adds	r3, r0, #1
    903c:	d0e6      	beq.n	900c <_printf_common+0xa4>
    903e:	3701      	adds	r7, #1
    9040:	e7d1      	b.n	8fe6 <_printf_common+0x7e>
	...

00009044 <_printf_i>:
    9044:	b5f0      	push	{r4, r5, r6, r7, lr}
    9046:	b08b      	sub	sp, #44	; 0x2c
    9048:	9206      	str	r2, [sp, #24]
    904a:	000a      	movs	r2, r1
    904c:	3243      	adds	r2, #67	; 0x43
    904e:	9307      	str	r3, [sp, #28]
    9050:	9005      	str	r0, [sp, #20]
    9052:	9204      	str	r2, [sp, #16]
    9054:	7e0a      	ldrb	r2, [r1, #24]
    9056:	000c      	movs	r4, r1
    9058:	9b10      	ldr	r3, [sp, #64]	; 0x40
    905a:	2a6e      	cmp	r2, #110	; 0x6e
    905c:	d100      	bne.n	9060 <_printf_i+0x1c>
    905e:	e08f      	b.n	9180 <_printf_i+0x13c>
    9060:	d817      	bhi.n	9092 <_printf_i+0x4e>
    9062:	2a63      	cmp	r2, #99	; 0x63
    9064:	d02c      	beq.n	90c0 <_printf_i+0x7c>
    9066:	d808      	bhi.n	907a <_printf_i+0x36>
    9068:	2a00      	cmp	r2, #0
    906a:	d100      	bne.n	906e <_printf_i+0x2a>
    906c:	e099      	b.n	91a2 <_printf_i+0x15e>
    906e:	2a58      	cmp	r2, #88	; 0x58
    9070:	d054      	beq.n	911c <_printf_i+0xd8>
    9072:	0026      	movs	r6, r4
    9074:	3642      	adds	r6, #66	; 0x42
    9076:	7032      	strb	r2, [r6, #0]
    9078:	e029      	b.n	90ce <_printf_i+0x8a>
    907a:	2a64      	cmp	r2, #100	; 0x64
    907c:	d001      	beq.n	9082 <_printf_i+0x3e>
    907e:	2a69      	cmp	r2, #105	; 0x69
    9080:	d1f7      	bne.n	9072 <_printf_i+0x2e>
    9082:	6821      	ldr	r1, [r4, #0]
    9084:	681a      	ldr	r2, [r3, #0]
    9086:	0608      	lsls	r0, r1, #24
    9088:	d523      	bpl.n	90d2 <_printf_i+0x8e>
    908a:	1d11      	adds	r1, r2, #4
    908c:	6019      	str	r1, [r3, #0]
    908e:	6815      	ldr	r5, [r2, #0]
    9090:	e025      	b.n	90de <_printf_i+0x9a>
    9092:	2a73      	cmp	r2, #115	; 0x73
    9094:	d100      	bne.n	9098 <_printf_i+0x54>
    9096:	e088      	b.n	91aa <_printf_i+0x166>
    9098:	d808      	bhi.n	90ac <_printf_i+0x68>
    909a:	2a6f      	cmp	r2, #111	; 0x6f
    909c:	d029      	beq.n	90f2 <_printf_i+0xae>
    909e:	2a70      	cmp	r2, #112	; 0x70
    90a0:	d1e7      	bne.n	9072 <_printf_i+0x2e>
    90a2:	2220      	movs	r2, #32
    90a4:	6809      	ldr	r1, [r1, #0]
    90a6:	430a      	orrs	r2, r1
    90a8:	6022      	str	r2, [r4, #0]
    90aa:	e003      	b.n	90b4 <_printf_i+0x70>
    90ac:	2a75      	cmp	r2, #117	; 0x75
    90ae:	d020      	beq.n	90f2 <_printf_i+0xae>
    90b0:	2a78      	cmp	r2, #120	; 0x78
    90b2:	d1de      	bne.n	9072 <_printf_i+0x2e>
    90b4:	0022      	movs	r2, r4
    90b6:	2178      	movs	r1, #120	; 0x78
    90b8:	3245      	adds	r2, #69	; 0x45
    90ba:	7011      	strb	r1, [r2, #0]
    90bc:	4a6c      	ldr	r2, [pc, #432]	; (9270 <_printf_i+0x22c>)
    90be:	e030      	b.n	9122 <_printf_i+0xde>
    90c0:	000e      	movs	r6, r1
    90c2:	681a      	ldr	r2, [r3, #0]
    90c4:	3642      	adds	r6, #66	; 0x42
    90c6:	1d11      	adds	r1, r2, #4
    90c8:	6019      	str	r1, [r3, #0]
    90ca:	6813      	ldr	r3, [r2, #0]
    90cc:	7033      	strb	r3, [r6, #0]
    90ce:	2301      	movs	r3, #1
    90d0:	e079      	b.n	91c6 <_printf_i+0x182>
    90d2:	0649      	lsls	r1, r1, #25
    90d4:	d5d9      	bpl.n	908a <_printf_i+0x46>
    90d6:	1d11      	adds	r1, r2, #4
    90d8:	6019      	str	r1, [r3, #0]
    90da:	2300      	movs	r3, #0
    90dc:	5ed5      	ldrsh	r5, [r2, r3]
    90de:	2d00      	cmp	r5, #0
    90e0:	da03      	bge.n	90ea <_printf_i+0xa6>
    90e2:	232d      	movs	r3, #45	; 0x2d
    90e4:	9a04      	ldr	r2, [sp, #16]
    90e6:	426d      	negs	r5, r5
    90e8:	7013      	strb	r3, [r2, #0]
    90ea:	4b62      	ldr	r3, [pc, #392]	; (9274 <_printf_i+0x230>)
    90ec:	270a      	movs	r7, #10
    90ee:	9303      	str	r3, [sp, #12]
    90f0:	e02f      	b.n	9152 <_printf_i+0x10e>
    90f2:	6820      	ldr	r0, [r4, #0]
    90f4:	6819      	ldr	r1, [r3, #0]
    90f6:	0605      	lsls	r5, r0, #24
    90f8:	d503      	bpl.n	9102 <_printf_i+0xbe>
    90fa:	1d08      	adds	r0, r1, #4
    90fc:	6018      	str	r0, [r3, #0]
    90fe:	680d      	ldr	r5, [r1, #0]
    9100:	e005      	b.n	910e <_printf_i+0xca>
    9102:	0640      	lsls	r0, r0, #25
    9104:	d5f9      	bpl.n	90fa <_printf_i+0xb6>
    9106:	680d      	ldr	r5, [r1, #0]
    9108:	1d08      	adds	r0, r1, #4
    910a:	6018      	str	r0, [r3, #0]
    910c:	b2ad      	uxth	r5, r5
    910e:	4b59      	ldr	r3, [pc, #356]	; (9274 <_printf_i+0x230>)
    9110:	2708      	movs	r7, #8
    9112:	9303      	str	r3, [sp, #12]
    9114:	2a6f      	cmp	r2, #111	; 0x6f
    9116:	d018      	beq.n	914a <_printf_i+0x106>
    9118:	270a      	movs	r7, #10
    911a:	e016      	b.n	914a <_printf_i+0x106>
    911c:	3145      	adds	r1, #69	; 0x45
    911e:	700a      	strb	r2, [r1, #0]
    9120:	4a54      	ldr	r2, [pc, #336]	; (9274 <_printf_i+0x230>)
    9122:	9203      	str	r2, [sp, #12]
    9124:	681a      	ldr	r2, [r3, #0]
    9126:	6821      	ldr	r1, [r4, #0]
    9128:	1d10      	adds	r0, r2, #4
    912a:	6018      	str	r0, [r3, #0]
    912c:	6815      	ldr	r5, [r2, #0]
    912e:	0608      	lsls	r0, r1, #24
    9130:	d522      	bpl.n	9178 <_printf_i+0x134>
    9132:	07cb      	lsls	r3, r1, #31
    9134:	d502      	bpl.n	913c <_printf_i+0xf8>
    9136:	2320      	movs	r3, #32
    9138:	4319      	orrs	r1, r3
    913a:	6021      	str	r1, [r4, #0]
    913c:	2710      	movs	r7, #16
    913e:	2d00      	cmp	r5, #0
    9140:	d103      	bne.n	914a <_printf_i+0x106>
    9142:	2320      	movs	r3, #32
    9144:	6822      	ldr	r2, [r4, #0]
    9146:	439a      	bics	r2, r3
    9148:	6022      	str	r2, [r4, #0]
    914a:	0023      	movs	r3, r4
    914c:	2200      	movs	r2, #0
    914e:	3343      	adds	r3, #67	; 0x43
    9150:	701a      	strb	r2, [r3, #0]
    9152:	6863      	ldr	r3, [r4, #4]
    9154:	60a3      	str	r3, [r4, #8]
    9156:	2b00      	cmp	r3, #0
    9158:	db5c      	blt.n	9214 <_printf_i+0x1d0>
    915a:	2204      	movs	r2, #4
    915c:	6821      	ldr	r1, [r4, #0]
    915e:	4391      	bics	r1, r2
    9160:	6021      	str	r1, [r4, #0]
    9162:	2d00      	cmp	r5, #0
    9164:	d158      	bne.n	9218 <_printf_i+0x1d4>
    9166:	9e04      	ldr	r6, [sp, #16]
    9168:	2b00      	cmp	r3, #0
    916a:	d064      	beq.n	9236 <_printf_i+0x1f2>
    916c:	0026      	movs	r6, r4
    916e:	9b03      	ldr	r3, [sp, #12]
    9170:	3642      	adds	r6, #66	; 0x42
    9172:	781b      	ldrb	r3, [r3, #0]
    9174:	7033      	strb	r3, [r6, #0]
    9176:	e05e      	b.n	9236 <_printf_i+0x1f2>
    9178:	0648      	lsls	r0, r1, #25
    917a:	d5da      	bpl.n	9132 <_printf_i+0xee>
    917c:	b2ad      	uxth	r5, r5
    917e:	e7d8      	b.n	9132 <_printf_i+0xee>
    9180:	6809      	ldr	r1, [r1, #0]
    9182:	681a      	ldr	r2, [r3, #0]
    9184:	0608      	lsls	r0, r1, #24
    9186:	d505      	bpl.n	9194 <_printf_i+0x150>
    9188:	1d11      	adds	r1, r2, #4
    918a:	6019      	str	r1, [r3, #0]
    918c:	6813      	ldr	r3, [r2, #0]
    918e:	6962      	ldr	r2, [r4, #20]
    9190:	601a      	str	r2, [r3, #0]
    9192:	e006      	b.n	91a2 <_printf_i+0x15e>
    9194:	0649      	lsls	r1, r1, #25
    9196:	d5f7      	bpl.n	9188 <_printf_i+0x144>
    9198:	1d11      	adds	r1, r2, #4
    919a:	6019      	str	r1, [r3, #0]
    919c:	6813      	ldr	r3, [r2, #0]
    919e:	8aa2      	ldrh	r2, [r4, #20]
    91a0:	801a      	strh	r2, [r3, #0]
    91a2:	2300      	movs	r3, #0
    91a4:	9e04      	ldr	r6, [sp, #16]
    91a6:	6123      	str	r3, [r4, #16]
    91a8:	e054      	b.n	9254 <_printf_i+0x210>
    91aa:	681a      	ldr	r2, [r3, #0]
    91ac:	1d11      	adds	r1, r2, #4
    91ae:	6019      	str	r1, [r3, #0]
    91b0:	6816      	ldr	r6, [r2, #0]
    91b2:	2100      	movs	r1, #0
    91b4:	6862      	ldr	r2, [r4, #4]
    91b6:	0030      	movs	r0, r6
    91b8:	f000 fe4e 	bl	9e58 <memchr>
    91bc:	2800      	cmp	r0, #0
    91be:	d001      	beq.n	91c4 <_printf_i+0x180>
    91c0:	1b80      	subs	r0, r0, r6
    91c2:	6060      	str	r0, [r4, #4]
    91c4:	6863      	ldr	r3, [r4, #4]
    91c6:	6123      	str	r3, [r4, #16]
    91c8:	2300      	movs	r3, #0
    91ca:	9a04      	ldr	r2, [sp, #16]
    91cc:	7013      	strb	r3, [r2, #0]
    91ce:	e041      	b.n	9254 <_printf_i+0x210>
    91d0:	6923      	ldr	r3, [r4, #16]
    91d2:	0032      	movs	r2, r6
    91d4:	9906      	ldr	r1, [sp, #24]
    91d6:	9805      	ldr	r0, [sp, #20]
    91d8:	9d07      	ldr	r5, [sp, #28]
    91da:	47a8      	blx	r5
    91dc:	1c43      	adds	r3, r0, #1
    91de:	d043      	beq.n	9268 <_printf_i+0x224>
    91e0:	6823      	ldr	r3, [r4, #0]
    91e2:	2500      	movs	r5, #0
    91e4:	079b      	lsls	r3, r3, #30
    91e6:	d40f      	bmi.n	9208 <_printf_i+0x1c4>
    91e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91ea:	68e0      	ldr	r0, [r4, #12]
    91ec:	4298      	cmp	r0, r3
    91ee:	da3d      	bge.n	926c <_printf_i+0x228>
    91f0:	0018      	movs	r0, r3
    91f2:	e03b      	b.n	926c <_printf_i+0x228>
    91f4:	0022      	movs	r2, r4
    91f6:	2301      	movs	r3, #1
    91f8:	3219      	adds	r2, #25
    91fa:	9906      	ldr	r1, [sp, #24]
    91fc:	9805      	ldr	r0, [sp, #20]
    91fe:	9e07      	ldr	r6, [sp, #28]
    9200:	47b0      	blx	r6
    9202:	1c43      	adds	r3, r0, #1
    9204:	d030      	beq.n	9268 <_printf_i+0x224>
    9206:	3501      	adds	r5, #1
    9208:	68e3      	ldr	r3, [r4, #12]
    920a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    920c:	1a9b      	subs	r3, r3, r2
    920e:	429d      	cmp	r5, r3
    9210:	dbf0      	blt.n	91f4 <_printf_i+0x1b0>
    9212:	e7e9      	b.n	91e8 <_printf_i+0x1a4>
    9214:	2d00      	cmp	r5, #0
    9216:	d0a9      	beq.n	916c <_printf_i+0x128>
    9218:	9e04      	ldr	r6, [sp, #16]
    921a:	0028      	movs	r0, r5
    921c:	0039      	movs	r1, r7
    921e:	f7fd f97d 	bl	651c <__aeabi_uidivmod>
    9222:	9b03      	ldr	r3, [sp, #12]
    9224:	3e01      	subs	r6, #1
    9226:	5c5b      	ldrb	r3, [r3, r1]
    9228:	0028      	movs	r0, r5
    922a:	7033      	strb	r3, [r6, #0]
    922c:	0039      	movs	r1, r7
    922e:	f7fd f8ef 	bl	6410 <__udivsi3>
    9232:	1e05      	subs	r5, r0, #0
    9234:	d1f1      	bne.n	921a <_printf_i+0x1d6>
    9236:	2f08      	cmp	r7, #8
    9238:	d109      	bne.n	924e <_printf_i+0x20a>
    923a:	6823      	ldr	r3, [r4, #0]
    923c:	07db      	lsls	r3, r3, #31
    923e:	d506      	bpl.n	924e <_printf_i+0x20a>
    9240:	6863      	ldr	r3, [r4, #4]
    9242:	6922      	ldr	r2, [r4, #16]
    9244:	4293      	cmp	r3, r2
    9246:	dc02      	bgt.n	924e <_printf_i+0x20a>
    9248:	2330      	movs	r3, #48	; 0x30
    924a:	3e01      	subs	r6, #1
    924c:	7033      	strb	r3, [r6, #0]
    924e:	9b04      	ldr	r3, [sp, #16]
    9250:	1b9b      	subs	r3, r3, r6
    9252:	6123      	str	r3, [r4, #16]
    9254:	9b07      	ldr	r3, [sp, #28]
    9256:	aa09      	add	r2, sp, #36	; 0x24
    9258:	9300      	str	r3, [sp, #0]
    925a:	0021      	movs	r1, r4
    925c:	9b06      	ldr	r3, [sp, #24]
    925e:	9805      	ldr	r0, [sp, #20]
    9260:	f7ff fe82 	bl	8f68 <_printf_common>
    9264:	1c43      	adds	r3, r0, #1
    9266:	d1b3      	bne.n	91d0 <_printf_i+0x18c>
    9268:	2001      	movs	r0, #1
    926a:	4240      	negs	r0, r0
    926c:	b00b      	add	sp, #44	; 0x2c
    926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9270:	0000a730 	.word	0x0000a730
    9274:	0000a71f 	.word	0x0000a71f

00009278 <__svfiscanf_r>:
    9278:	b5f0      	push	{r4, r5, r6, r7, lr}
    927a:	4cbd      	ldr	r4, [pc, #756]	; (9570 <__svfiscanf_r+0x2f8>)
    927c:	2586      	movs	r5, #134	; 0x86
    927e:	44a5      	add	sp, r4
    9280:	9303      	str	r3, [sp, #12]
    9282:	2300      	movs	r3, #0
    9284:	9348      	str	r3, [sp, #288]	; 0x120
    9286:	9349      	str	r3, [sp, #292]	; 0x124
    9288:	ab05      	add	r3, sp, #20
    928a:	934a      	str	r3, [sp, #296]	; 0x128
    928c:	23be      	movs	r3, #190	; 0xbe
    928e:	006d      	lsls	r5, r5, #1
    9290:	9000      	str	r0, [sp, #0]
    9292:	000c      	movs	r4, r1
    9294:	a802      	add	r0, sp, #8
    9296:	49b7      	ldr	r1, [pc, #732]	; (9574 <__svfiscanf_r+0x2fc>)
    9298:	005b      	lsls	r3, r3, #1
    929a:	1940      	adds	r0, r0, r5
    929c:	27c0      	movs	r7, #192	; 0xc0
    929e:	50c1      	str	r1, [r0, r3]
    92a0:	ab02      	add	r3, sp, #8
    92a2:	195b      	adds	r3, r3, r5
    92a4:	0015      	movs	r5, r2
    92a6:	49b4      	ldr	r1, [pc, #720]	; (9578 <__svfiscanf_r+0x300>)
    92a8:	007f      	lsls	r7, r7, #1
    92aa:	51d9      	str	r1, [r3, r7]
    92ac:	782b      	ldrb	r3, [r5, #0]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d100      	bne.n	92b4 <__svfiscanf_r+0x3c>
    92b2:	e15b      	b.n	956c <__svfiscanf_r+0x2f4>
    92b4:	f7ff fbd6 	bl	8a64 <__locale_ctype_ptr>
    92b8:	2208      	movs	r2, #8
    92ba:	782b      	ldrb	r3, [r5, #0]
    92bc:	18c0      	adds	r0, r0, r3
    92be:	9301      	str	r3, [sp, #4]
    92c0:	7843      	ldrb	r3, [r0, #1]
    92c2:	4013      	ands	r3, r2
    92c4:	d141      	bne.n	934a <__svfiscanf_r+0xd2>
    92c6:	9a01      	ldr	r2, [sp, #4]
    92c8:	1c6e      	adds	r6, r5, #1
    92ca:	2a25      	cmp	r2, #37	; 0x25
    92cc:	d000      	beq.n	92d0 <__svfiscanf_r+0x58>
    92ce:	e0a8      	b.n	9422 <__svfiscanf_r+0x1aa>
    92d0:	9347      	str	r3, [sp, #284]	; 0x11c
    92d2:	9345      	str	r3, [sp, #276]	; 0x114
    92d4:	786b      	ldrb	r3, [r5, #1]
    92d6:	2b2a      	cmp	r3, #42	; 0x2a
    92d8:	d102      	bne.n	92e0 <__svfiscanf_r+0x68>
    92da:	3b1a      	subs	r3, #26
    92dc:	9345      	str	r3, [sp, #276]	; 0x114
    92de:	1cae      	adds	r6, r5, #2
    92e0:	0035      	movs	r5, r6
    92e2:	220a      	movs	r2, #10
    92e4:	7829      	ldrb	r1, [r5, #0]
    92e6:	000b      	movs	r3, r1
    92e8:	3b30      	subs	r3, #48	; 0x30
    92ea:	2b09      	cmp	r3, #9
    92ec:	d948      	bls.n	9380 <__svfiscanf_r+0x108>
    92ee:	4ea3      	ldr	r6, [pc, #652]	; (957c <__svfiscanf_r+0x304>)
    92f0:	2203      	movs	r2, #3
    92f2:	0030      	movs	r0, r6
    92f4:	f000 fdb0 	bl	9e58 <memchr>
    92f8:	2800      	cmp	r0, #0
    92fa:	d007      	beq.n	930c <__svfiscanf_r+0x94>
    92fc:	2301      	movs	r3, #1
    92fe:	1b80      	subs	r0, r0, r6
    9300:	4083      	lsls	r3, r0
    9302:	9a45      	ldr	r2, [sp, #276]	; 0x114
    9304:	3501      	adds	r5, #1
    9306:	4313      	orrs	r3, r2
    9308:	9202      	str	r2, [sp, #8]
    930a:	9345      	str	r3, [sp, #276]	; 0x114
    930c:	782b      	ldrb	r3, [r5, #0]
    930e:	1c6e      	adds	r6, r5, #1
    9310:	2b67      	cmp	r3, #103	; 0x67
    9312:	d858      	bhi.n	93c6 <__svfiscanf_r+0x14e>
    9314:	2b65      	cmp	r3, #101	; 0x65
    9316:	d300      	bcc.n	931a <__svfiscanf_r+0xa2>
    9318:	e0dd      	b.n	94d6 <__svfiscanf_r+0x25e>
    931a:	2b47      	cmp	r3, #71	; 0x47
    931c:	d838      	bhi.n	9390 <__svfiscanf_r+0x118>
    931e:	2b45      	cmp	r3, #69	; 0x45
    9320:	d300      	bcc.n	9324 <__svfiscanf_r+0xac>
    9322:	e0d8      	b.n	94d6 <__svfiscanf_r+0x25e>
    9324:	2b00      	cmp	r3, #0
    9326:	d100      	bne.n	932a <__svfiscanf_r+0xb2>
    9328:	e11d      	b.n	9566 <__svfiscanf_r+0x2ee>
    932a:	2b25      	cmp	r3, #37	; 0x25
    932c:	d079      	beq.n	9422 <__svfiscanf_r+0x1aa>
    932e:	2303      	movs	r3, #3
    9330:	934b      	str	r3, [sp, #300]	; 0x12c
    9332:	3307      	adds	r3, #7
    9334:	9346      	str	r3, [sp, #280]	; 0x118
    9336:	e053      	b.n	93e0 <__svfiscanf_r+0x168>
    9338:	9a49      	ldr	r2, [sp, #292]	; 0x124
    933a:	3301      	adds	r3, #1
    933c:	9201      	str	r2, [sp, #4]
    933e:	3201      	adds	r2, #1
    9340:	9249      	str	r2, [sp, #292]	; 0x124
    9342:	6862      	ldr	r2, [r4, #4]
    9344:	6023      	str	r3, [r4, #0]
    9346:	3a01      	subs	r2, #1
    9348:	6062      	str	r2, [r4, #4]
    934a:	6863      	ldr	r3, [r4, #4]
    934c:	2b00      	cmp	r3, #0
    934e:	dd0b      	ble.n	9368 <__svfiscanf_r+0xf0>
    9350:	f7ff fb88 	bl	8a64 <__locale_ctype_ptr>
    9354:	2108      	movs	r1, #8
    9356:	6823      	ldr	r3, [r4, #0]
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	1880      	adds	r0, r0, r2
    935c:	7842      	ldrb	r2, [r0, #1]
    935e:	420a      	tst	r2, r1
    9360:	d1ea      	bne.n	9338 <__svfiscanf_r+0xc0>
    9362:	1c6e      	adds	r6, r5, #1
    9364:	0035      	movs	r5, r6
    9366:	e7a1      	b.n	92ac <__svfiscanf_r+0x34>
    9368:	2286      	movs	r2, #134	; 0x86
    936a:	ab02      	add	r3, sp, #8
    936c:	0052      	lsls	r2, r2, #1
    936e:	189b      	adds	r3, r3, r2
    9370:	59db      	ldr	r3, [r3, r7]
    9372:	0021      	movs	r1, r4
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9301      	str	r3, [sp, #4]
    9378:	4798      	blx	r3
    937a:	2800      	cmp	r0, #0
    937c:	d0e8      	beq.n	9350 <__svfiscanf_r+0xd8>
    937e:	e7f0      	b.n	9362 <__svfiscanf_r+0xea>
    9380:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    9382:	3501      	adds	r5, #1
    9384:	9302      	str	r3, [sp, #8]
    9386:	4353      	muls	r3, r2
    9388:	3b30      	subs	r3, #48	; 0x30
    938a:	1859      	adds	r1, r3, r1
    938c:	9147      	str	r1, [sp, #284]	; 0x11c
    938e:	e7a9      	b.n	92e4 <__svfiscanf_r+0x6c>
    9390:	2b5b      	cmp	r3, #91	; 0x5b
    9392:	d100      	bne.n	9396 <__svfiscanf_r+0x11e>
    9394:	e077      	b.n	9486 <__svfiscanf_r+0x20e>
    9396:	d80f      	bhi.n	93b8 <__svfiscanf_r+0x140>
    9398:	2b58      	cmp	r3, #88	; 0x58
    939a:	d1c8      	bne.n	932e <__svfiscanf_r+0xb6>
    939c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    939e:	9201      	str	r2, [sp, #4]
    93a0:	2280      	movs	r2, #128	; 0x80
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	0092      	lsls	r2, r2, #2
    93a6:	430a      	orrs	r2, r1
    93a8:	9245      	str	r2, [sp, #276]	; 0x114
    93aa:	2210      	movs	r2, #16
    93ac:	9246      	str	r2, [sp, #280]	; 0x118
    93ae:	2203      	movs	r2, #3
    93b0:	2b6e      	cmp	r3, #110	; 0x6e
    93b2:	dd14      	ble.n	93de <__svfiscanf_r+0x166>
    93b4:	3201      	adds	r2, #1
    93b6:	e012      	b.n	93de <__svfiscanf_r+0x166>
    93b8:	2b63      	cmp	r3, #99	; 0x63
    93ba:	d100      	bne.n	93be <__svfiscanf_r+0x146>
    93bc:	e071      	b.n	94a2 <__svfiscanf_r+0x22a>
    93be:	2b64      	cmp	r3, #100	; 0x64
    93c0:	d1b5      	bne.n	932e <__svfiscanf_r+0xb6>
    93c2:	220a      	movs	r2, #10
    93c4:	e7f2      	b.n	93ac <__svfiscanf_r+0x134>
    93c6:	2b70      	cmp	r3, #112	; 0x70
    93c8:	d052      	beq.n	9470 <__svfiscanf_r+0x1f8>
    93ca:	d822      	bhi.n	9412 <__svfiscanf_r+0x19a>
    93cc:	2b6e      	cmp	r3, #110	; 0x6e
    93ce:	d100      	bne.n	93d2 <__svfiscanf_r+0x15a>
    93d0:	e06f      	b.n	94b2 <__svfiscanf_r+0x23a>
    93d2:	d854      	bhi.n	947e <__svfiscanf_r+0x206>
    93d4:	2b69      	cmp	r3, #105	; 0x69
    93d6:	d1aa      	bne.n	932e <__svfiscanf_r+0xb6>
    93d8:	2300      	movs	r3, #0
    93da:	2203      	movs	r2, #3
    93dc:	9346      	str	r3, [sp, #280]	; 0x118
    93de:	924b      	str	r2, [sp, #300]	; 0x12c
    93e0:	6863      	ldr	r3, [r4, #4]
    93e2:	2b00      	cmp	r3, #0
    93e4:	dc00      	bgt.n	93e8 <__svfiscanf_r+0x170>
    93e6:	e078      	b.n	94da <__svfiscanf_r+0x262>
    93e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    93ea:	9301      	str	r3, [sp, #4]
    93ec:	065b      	lsls	r3, r3, #25
    93ee:	d400      	bmi.n	93f2 <__svfiscanf_r+0x17a>
    93f0:	e08b      	b.n	950a <__svfiscanf_r+0x292>
    93f2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    93f4:	2b02      	cmp	r3, #2
    93f6:	dd00      	ble.n	93fa <__svfiscanf_r+0x182>
    93f8:	e09d      	b.n	9536 <__svfiscanf_r+0x2be>
    93fa:	ab03      	add	r3, sp, #12
    93fc:	0022      	movs	r2, r4
    93fe:	a945      	add	r1, sp, #276	; 0x114
    9400:	9800      	ldr	r0, [sp, #0]
    9402:	f000 f8e7 	bl	95d4 <_scanf_chars>
    9406:	2801      	cmp	r0, #1
    9408:	d100      	bne.n	940c <__svfiscanf_r+0x194>
    940a:	e0af      	b.n	956c <__svfiscanf_r+0x2f4>
    940c:	2802      	cmp	r0, #2
    940e:	d1a9      	bne.n	9364 <__svfiscanf_r+0xec>
    9410:	e025      	b.n	945e <__svfiscanf_r+0x1e6>
    9412:	2b75      	cmp	r3, #117	; 0x75
    9414:	d0d5      	beq.n	93c2 <__svfiscanf_r+0x14a>
    9416:	2b78      	cmp	r3, #120	; 0x78
    9418:	d0c0      	beq.n	939c <__svfiscanf_r+0x124>
    941a:	2b73      	cmp	r3, #115	; 0x73
    941c:	d187      	bne.n	932e <__svfiscanf_r+0xb6>
    941e:	2302      	movs	r3, #2
    9420:	e03d      	b.n	949e <__svfiscanf_r+0x226>
    9422:	6863      	ldr	r3, [r4, #4]
    9424:	2b00      	cmp	r3, #0
    9426:	dd0f      	ble.n	9448 <__svfiscanf_r+0x1d0>
    9428:	6823      	ldr	r3, [r4, #0]
    942a:	9901      	ldr	r1, [sp, #4]
    942c:	781a      	ldrb	r2, [r3, #0]
    942e:	4291      	cmp	r1, r2
    9430:	d000      	beq.n	9434 <__svfiscanf_r+0x1bc>
    9432:	e09b      	b.n	956c <__svfiscanf_r+0x2f4>
    9434:	3301      	adds	r3, #1
    9436:	6862      	ldr	r2, [r4, #4]
    9438:	6023      	str	r3, [r4, #0]
    943a:	9b49      	ldr	r3, [sp, #292]	; 0x124
    943c:	3a01      	subs	r2, #1
    943e:	9301      	str	r3, [sp, #4]
    9440:	3301      	adds	r3, #1
    9442:	6062      	str	r2, [r4, #4]
    9444:	9349      	str	r3, [sp, #292]	; 0x124
    9446:	e78d      	b.n	9364 <__svfiscanf_r+0xec>
    9448:	2286      	movs	r2, #134	; 0x86
    944a:	ab02      	add	r3, sp, #8
    944c:	0052      	lsls	r2, r2, #1
    944e:	189b      	adds	r3, r3, r2
    9450:	59db      	ldr	r3, [r3, r7]
    9452:	0021      	movs	r1, r4
    9454:	9800      	ldr	r0, [sp, #0]
    9456:	9302      	str	r3, [sp, #8]
    9458:	4798      	blx	r3
    945a:	2800      	cmp	r0, #0
    945c:	d0e4      	beq.n	9428 <__svfiscanf_r+0x1b0>
    945e:	9848      	ldr	r0, [sp, #288]	; 0x120
    9460:	2800      	cmp	r0, #0
    9462:	d000      	beq.n	9466 <__svfiscanf_r+0x1ee>
    9464:	e07b      	b.n	955e <__svfiscanf_r+0x2e6>
    9466:	3801      	subs	r0, #1
    9468:	23a7      	movs	r3, #167	; 0xa7
    946a:	009b      	lsls	r3, r3, #2
    946c:	449d      	add	sp, r3
    946e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9470:	9a45      	ldr	r2, [sp, #276]	; 0x114
    9472:	9201      	str	r2, [sp, #4]
    9474:	2220      	movs	r2, #32
    9476:	9901      	ldr	r1, [sp, #4]
    9478:	430a      	orrs	r2, r1
    947a:	9245      	str	r2, [sp, #276]	; 0x114
    947c:	e78e      	b.n	939c <__svfiscanf_r+0x124>
    947e:	2308      	movs	r3, #8
    9480:	2204      	movs	r2, #4
    9482:	9346      	str	r3, [sp, #280]	; 0x118
    9484:	e7ab      	b.n	93de <__svfiscanf_r+0x166>
    9486:	0031      	movs	r1, r6
    9488:	a805      	add	r0, sp, #20
    948a:	f000 fab5 	bl	99f8 <__sccl>
    948e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    9490:	0006      	movs	r6, r0
    9492:	9301      	str	r3, [sp, #4]
    9494:	2340      	movs	r3, #64	; 0x40
    9496:	9a01      	ldr	r2, [sp, #4]
    9498:	4313      	orrs	r3, r2
    949a:	9345      	str	r3, [sp, #276]	; 0x114
    949c:	2301      	movs	r3, #1
    949e:	934b      	str	r3, [sp, #300]	; 0x12c
    94a0:	e79e      	b.n	93e0 <__svfiscanf_r+0x168>
    94a2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    94a4:	9301      	str	r3, [sp, #4]
    94a6:	2340      	movs	r3, #64	; 0x40
    94a8:	9a01      	ldr	r2, [sp, #4]
    94aa:	4313      	orrs	r3, r2
    94ac:	9345      	str	r3, [sp, #276]	; 0x114
    94ae:	2300      	movs	r3, #0
    94b0:	e7f5      	b.n	949e <__svfiscanf_r+0x226>
    94b2:	9945      	ldr	r1, [sp, #276]	; 0x114
    94b4:	06cb      	lsls	r3, r1, #27
    94b6:	d500      	bpl.n	94ba <__svfiscanf_r+0x242>
    94b8:	e754      	b.n	9364 <__svfiscanf_r+0xec>
    94ba:	9b03      	ldr	r3, [sp, #12]
    94bc:	9a49      	ldr	r2, [sp, #292]	; 0x124
    94be:	07c8      	lsls	r0, r1, #31
    94c0:	d504      	bpl.n	94cc <__svfiscanf_r+0x254>
    94c2:	1d19      	adds	r1, r3, #4
    94c4:	9103      	str	r1, [sp, #12]
    94c6:	681b      	ldr	r3, [r3, #0]
    94c8:	801a      	strh	r2, [r3, #0]
    94ca:	e74b      	b.n	9364 <__svfiscanf_r+0xec>
    94cc:	1d19      	adds	r1, r3, #4
    94ce:	9103      	str	r1, [sp, #12]
    94d0:	681b      	ldr	r3, [r3, #0]
    94d2:	601a      	str	r2, [r3, #0]
    94d4:	e746      	b.n	9364 <__svfiscanf_r+0xec>
    94d6:	2305      	movs	r3, #5
    94d8:	e7e1      	b.n	949e <__svfiscanf_r+0x226>
    94da:	2286      	movs	r2, #134	; 0x86
    94dc:	ab02      	add	r3, sp, #8
    94de:	0052      	lsls	r2, r2, #1
    94e0:	189b      	adds	r3, r3, r2
    94e2:	59db      	ldr	r3, [r3, r7]
    94e4:	0021      	movs	r1, r4
    94e6:	9800      	ldr	r0, [sp, #0]
    94e8:	9301      	str	r3, [sp, #4]
    94ea:	4798      	blx	r3
    94ec:	2800      	cmp	r0, #0
    94ee:	d100      	bne.n	94f2 <__svfiscanf_r+0x27a>
    94f0:	e77a      	b.n	93e8 <__svfiscanf_r+0x170>
    94f2:	e7b4      	b.n	945e <__svfiscanf_r+0x1e6>
    94f4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    94f6:	9201      	str	r2, [sp, #4]
    94f8:	3201      	adds	r2, #1
    94fa:	9249      	str	r2, [sp, #292]	; 0x124
    94fc:	6862      	ldr	r2, [r4, #4]
    94fe:	3a01      	subs	r2, #1
    9500:	6062      	str	r2, [r4, #4]
    9502:	2a00      	cmp	r2, #0
    9504:	dd0b      	ble.n	951e <__svfiscanf_r+0x2a6>
    9506:	3301      	adds	r3, #1
    9508:	6023      	str	r3, [r4, #0]
    950a:	f7ff faab 	bl	8a64 <__locale_ctype_ptr>
    950e:	2108      	movs	r1, #8
    9510:	6823      	ldr	r3, [r4, #0]
    9512:	781a      	ldrb	r2, [r3, #0]
    9514:	1880      	adds	r0, r0, r2
    9516:	7842      	ldrb	r2, [r0, #1]
    9518:	420a      	tst	r2, r1
    951a:	d1eb      	bne.n	94f4 <__svfiscanf_r+0x27c>
    951c:	e769      	b.n	93f2 <__svfiscanf_r+0x17a>
    951e:	2286      	movs	r2, #134	; 0x86
    9520:	ab02      	add	r3, sp, #8
    9522:	0052      	lsls	r2, r2, #1
    9524:	189b      	adds	r3, r3, r2
    9526:	59db      	ldr	r3, [r3, r7]
    9528:	0021      	movs	r1, r4
    952a:	9800      	ldr	r0, [sp, #0]
    952c:	9301      	str	r3, [sp, #4]
    952e:	4798      	blx	r3
    9530:	2800      	cmp	r0, #0
    9532:	d0ea      	beq.n	950a <__svfiscanf_r+0x292>
    9534:	e793      	b.n	945e <__svfiscanf_r+0x1e6>
    9536:	2b04      	cmp	r3, #4
    9538:	dc06      	bgt.n	9548 <__svfiscanf_r+0x2d0>
    953a:	ab03      	add	r3, sp, #12
    953c:	0022      	movs	r2, r4
    953e:	a945      	add	r1, sp, #276	; 0x114
    9540:	9800      	ldr	r0, [sp, #0]
    9542:	f000 f8ab 	bl	969c <_scanf_i>
    9546:	e75e      	b.n	9406 <__svfiscanf_r+0x18e>
    9548:	4b0d      	ldr	r3, [pc, #52]	; (9580 <__svfiscanf_r+0x308>)
    954a:	2b00      	cmp	r3, #0
    954c:	d100      	bne.n	9550 <__svfiscanf_r+0x2d8>
    954e:	e709      	b.n	9364 <__svfiscanf_r+0xec>
    9550:	ab03      	add	r3, sp, #12
    9552:	0022      	movs	r2, r4
    9554:	a945      	add	r1, sp, #276	; 0x114
    9556:	9800      	ldr	r0, [sp, #0]
    9558:	e000      	b.n	955c <__svfiscanf_r+0x2e4>
    955a:	bf00      	nop
    955c:	e753      	b.n	9406 <__svfiscanf_r+0x18e>
    955e:	89a3      	ldrh	r3, [r4, #12]
    9560:	065b      	lsls	r3, r3, #25
    9562:	d400      	bmi.n	9566 <__svfiscanf_r+0x2ee>
    9564:	e780      	b.n	9468 <__svfiscanf_r+0x1f0>
    9566:	2001      	movs	r0, #1
    9568:	4240      	negs	r0, r0
    956a:	e77d      	b.n	9468 <__svfiscanf_r+0x1f0>
    956c:	9848      	ldr	r0, [sp, #288]	; 0x120
    956e:	e77b      	b.n	9468 <__svfiscanf_r+0x1f0>
    9570:	fffffd64 	.word	0xfffffd64
    9574:	00009ca1 	.word	0x00009ca1
    9578:	000098b5 	.word	0x000098b5
    957c:	0000a714 	.word	0x0000a714
    9580:	00000000 	.word	0x00000000

00009584 <_vfiscanf_r>:
    9584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9586:	0004      	movs	r4, r0
    9588:	000d      	movs	r5, r1
    958a:	0016      	movs	r6, r2
    958c:	001f      	movs	r7, r3
    958e:	2800      	cmp	r0, #0
    9590:	d004      	beq.n	959c <_vfiscanf_r+0x18>
    9592:	6983      	ldr	r3, [r0, #24]
    9594:	2b00      	cmp	r3, #0
    9596:	d101      	bne.n	959c <_vfiscanf_r+0x18>
    9598:	f7ff f9b0 	bl	88fc <__sinit>
    959c:	4b0a      	ldr	r3, [pc, #40]	; (95c8 <_vfiscanf_r+0x44>)
    959e:	429d      	cmp	r5, r3
    95a0:	d107      	bne.n	95b2 <_vfiscanf_r+0x2e>
    95a2:	6865      	ldr	r5, [r4, #4]
    95a4:	003b      	movs	r3, r7
    95a6:	0032      	movs	r2, r6
    95a8:	0029      	movs	r1, r5
    95aa:	0020      	movs	r0, r4
    95ac:	f7ff fe64 	bl	9278 <__svfiscanf_r>
    95b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95b2:	4b06      	ldr	r3, [pc, #24]	; (95cc <_vfiscanf_r+0x48>)
    95b4:	429d      	cmp	r5, r3
    95b6:	d101      	bne.n	95bc <_vfiscanf_r+0x38>
    95b8:	68a5      	ldr	r5, [r4, #8]
    95ba:	e7f3      	b.n	95a4 <_vfiscanf_r+0x20>
    95bc:	4b04      	ldr	r3, [pc, #16]	; (95d0 <_vfiscanf_r+0x4c>)
    95be:	429d      	cmp	r5, r3
    95c0:	d1f0      	bne.n	95a4 <_vfiscanf_r+0x20>
    95c2:	68e5      	ldr	r5, [r4, #12]
    95c4:	e7ee      	b.n	95a4 <_vfiscanf_r+0x20>
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	0000a6c4 	.word	0x0000a6c4
    95cc:	0000a6e4 	.word	0x0000a6e4
    95d0:	0000a6a4 	.word	0x0000a6a4

000095d4 <_scanf_chars>:
    95d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95d6:	0015      	movs	r5, r2
    95d8:	688a      	ldr	r2, [r1, #8]
    95da:	9001      	str	r0, [sp, #4]
    95dc:	000c      	movs	r4, r1
    95de:	2a00      	cmp	r2, #0
    95e0:	d106      	bne.n	95f0 <_scanf_chars+0x1c>
    95e2:	698a      	ldr	r2, [r1, #24]
    95e4:	1e51      	subs	r1, r2, #1
    95e6:	418a      	sbcs	r2, r1
    95e8:	2101      	movs	r1, #1
    95ea:	4252      	negs	r2, r2
    95ec:	430a      	orrs	r2, r1
    95ee:	60a2      	str	r2, [r4, #8]
    95f0:	6822      	ldr	r2, [r4, #0]
    95f2:	06d2      	lsls	r2, r2, #27
    95f4:	d403      	bmi.n	95fe <_scanf_chars+0x2a>
    95f6:	681a      	ldr	r2, [r3, #0]
    95f8:	1d11      	adds	r1, r2, #4
    95fa:	6019      	str	r1, [r3, #0]
    95fc:	6817      	ldr	r7, [r2, #0]
    95fe:	2600      	movs	r6, #0
    9600:	69a3      	ldr	r3, [r4, #24]
    9602:	2b00      	cmp	r3, #0
    9604:	d01c      	beq.n	9640 <_scanf_chars+0x6c>
    9606:	2b01      	cmp	r3, #1
    9608:	d108      	bne.n	961c <_scanf_chars+0x48>
    960a:	682b      	ldr	r3, [r5, #0]
    960c:	6962      	ldr	r2, [r4, #20]
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	5cd3      	ldrb	r3, [r2, r3]
    9612:	2b00      	cmp	r3, #0
    9614:	d114      	bne.n	9640 <_scanf_chars+0x6c>
    9616:	2e00      	cmp	r6, #0
    9618:	d130      	bne.n	967c <_scanf_chars+0xa8>
    961a:	e006      	b.n	962a <_scanf_chars+0x56>
    961c:	2b02      	cmp	r3, #2
    961e:	d006      	beq.n	962e <_scanf_chars+0x5a>
    9620:	2e00      	cmp	r6, #0
    9622:	d12b      	bne.n	967c <_scanf_chars+0xa8>
    9624:	69a3      	ldr	r3, [r4, #24]
    9626:	2b01      	cmp	r3, #1
    9628:	d128      	bne.n	967c <_scanf_chars+0xa8>
    962a:	2001      	movs	r0, #1
    962c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    962e:	f7ff fa19 	bl	8a64 <__locale_ctype_ptr>
    9632:	2208      	movs	r2, #8
    9634:	682b      	ldr	r3, [r5, #0]
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	18c0      	adds	r0, r0, r3
    963a:	7843      	ldrb	r3, [r0, #1]
    963c:	4213      	tst	r3, r2
    963e:	d1ef      	bne.n	9620 <_scanf_chars+0x4c>
    9640:	2210      	movs	r2, #16
    9642:	6823      	ldr	r3, [r4, #0]
    9644:	3601      	adds	r6, #1
    9646:	4213      	tst	r3, r2
    9648:	d103      	bne.n	9652 <_scanf_chars+0x7e>
    964a:	682b      	ldr	r3, [r5, #0]
    964c:	781b      	ldrb	r3, [r3, #0]
    964e:	703b      	strb	r3, [r7, #0]
    9650:	3701      	adds	r7, #1
    9652:	682a      	ldr	r2, [r5, #0]
    9654:	686b      	ldr	r3, [r5, #4]
    9656:	3201      	adds	r2, #1
    9658:	602a      	str	r2, [r5, #0]
    965a:	68a2      	ldr	r2, [r4, #8]
    965c:	3b01      	subs	r3, #1
    965e:	3a01      	subs	r2, #1
    9660:	606b      	str	r3, [r5, #4]
    9662:	60a2      	str	r2, [r4, #8]
    9664:	2a00      	cmp	r2, #0
    9666:	d009      	beq.n	967c <_scanf_chars+0xa8>
    9668:	2b00      	cmp	r3, #0
    966a:	dcc9      	bgt.n	9600 <_scanf_chars+0x2c>
    966c:	23c0      	movs	r3, #192	; 0xc0
    966e:	005b      	lsls	r3, r3, #1
    9670:	58e3      	ldr	r3, [r4, r3]
    9672:	0029      	movs	r1, r5
    9674:	9801      	ldr	r0, [sp, #4]
    9676:	4798      	blx	r3
    9678:	2800      	cmp	r0, #0
    967a:	d0c1      	beq.n	9600 <_scanf_chars+0x2c>
    967c:	2310      	movs	r3, #16
    967e:	6822      	ldr	r2, [r4, #0]
    9680:	4013      	ands	r3, r2
    9682:	d106      	bne.n	9692 <_scanf_chars+0xbe>
    9684:	68e2      	ldr	r2, [r4, #12]
    9686:	3201      	adds	r2, #1
    9688:	60e2      	str	r2, [r4, #12]
    968a:	69a2      	ldr	r2, [r4, #24]
    968c:	2a00      	cmp	r2, #0
    968e:	d000      	beq.n	9692 <_scanf_chars+0xbe>
    9690:	703b      	strb	r3, [r7, #0]
    9692:	6923      	ldr	r3, [r4, #16]
    9694:	2000      	movs	r0, #0
    9696:	199e      	adds	r6, r3, r6
    9698:	6126      	str	r6, [r4, #16]
    969a:	e7c7      	b.n	962c <_scanf_chars+0x58>

0000969c <_scanf_i>:
    969c:	b5f0      	push	{r4, r5, r6, r7, lr}
    969e:	000c      	movs	r4, r1
    96a0:	b08d      	sub	sp, #52	; 0x34
    96a2:	9302      	str	r3, [sp, #8]
    96a4:	4b77      	ldr	r3, [pc, #476]	; (9884 <_scanf_i+0x1e8>)
    96a6:	9005      	str	r0, [sp, #20]
    96a8:	0016      	movs	r6, r2
    96aa:	aa09      	add	r2, sp, #36	; 0x24
    96ac:	cb23      	ldmia	r3!, {r0, r1, r5}
    96ae:	c223      	stmia	r2!, {r0, r1, r5}
    96b0:	4b75      	ldr	r3, [pc, #468]	; (9888 <_scanf_i+0x1ec>)
    96b2:	9306      	str	r3, [sp, #24]
    96b4:	69a3      	ldr	r3, [r4, #24]
    96b6:	2b03      	cmp	r3, #3
    96b8:	d001      	beq.n	96be <_scanf_i+0x22>
    96ba:	4b74      	ldr	r3, [pc, #464]	; (988c <_scanf_i+0x1f0>)
    96bc:	9306      	str	r3, [sp, #24]
    96be:	22ae      	movs	r2, #174	; 0xae
    96c0:	2000      	movs	r0, #0
    96c2:	68a3      	ldr	r3, [r4, #8]
    96c4:	0052      	lsls	r2, r2, #1
    96c6:	1e59      	subs	r1, r3, #1
    96c8:	9004      	str	r0, [sp, #16]
    96ca:	4291      	cmp	r1, r2
    96cc:	d905      	bls.n	96da <_scanf_i+0x3e>
    96ce:	3b5e      	subs	r3, #94	; 0x5e
    96d0:	3bff      	subs	r3, #255	; 0xff
    96d2:	9304      	str	r3, [sp, #16]
    96d4:	235e      	movs	r3, #94	; 0x5e
    96d6:	33ff      	adds	r3, #255	; 0xff
    96d8:	60a3      	str	r3, [r4, #8]
    96da:	0023      	movs	r3, r4
    96dc:	331c      	adds	r3, #28
    96de:	9301      	str	r3, [sp, #4]
    96e0:	23d0      	movs	r3, #208	; 0xd0
    96e2:	2700      	movs	r7, #0
    96e4:	6822      	ldr	r2, [r4, #0]
    96e6:	011b      	lsls	r3, r3, #4
    96e8:	4313      	orrs	r3, r2
    96ea:	6023      	str	r3, [r4, #0]
    96ec:	9b01      	ldr	r3, [sp, #4]
    96ee:	9303      	str	r3, [sp, #12]
    96f0:	6833      	ldr	r3, [r6, #0]
    96f2:	a809      	add	r0, sp, #36	; 0x24
    96f4:	7819      	ldrb	r1, [r3, #0]
    96f6:	00bb      	lsls	r3, r7, #2
    96f8:	2202      	movs	r2, #2
    96fa:	5818      	ldr	r0, [r3, r0]
    96fc:	f000 fbac 	bl	9e58 <memchr>
    9700:	2800      	cmp	r0, #0
    9702:	d02b      	beq.n	975c <_scanf_i+0xc0>
    9704:	2f01      	cmp	r7, #1
    9706:	d15f      	bne.n	97c8 <_scanf_i+0x12c>
    9708:	6863      	ldr	r3, [r4, #4]
    970a:	2b00      	cmp	r3, #0
    970c:	d106      	bne.n	971c <_scanf_i+0x80>
    970e:	3308      	adds	r3, #8
    9710:	6822      	ldr	r2, [r4, #0]
    9712:	6063      	str	r3, [r4, #4]
    9714:	33f9      	adds	r3, #249	; 0xf9
    9716:	33ff      	adds	r3, #255	; 0xff
    9718:	4313      	orrs	r3, r2
    971a:	6023      	str	r3, [r4, #0]
    971c:	4b5c      	ldr	r3, [pc, #368]	; (9890 <_scanf_i+0x1f4>)
    971e:	6822      	ldr	r2, [r4, #0]
    9720:	4013      	ands	r3, r2
    9722:	6023      	str	r3, [r4, #0]
    9724:	68a3      	ldr	r3, [r4, #8]
    9726:	1e5a      	subs	r2, r3, #1
    9728:	60a2      	str	r2, [r4, #8]
    972a:	2b00      	cmp	r3, #0
    972c:	d016      	beq.n	975c <_scanf_i+0xc0>
    972e:	9b03      	ldr	r3, [sp, #12]
    9730:	1c5d      	adds	r5, r3, #1
    9732:	6833      	ldr	r3, [r6, #0]
    9734:	1c5a      	adds	r2, r3, #1
    9736:	6032      	str	r2, [r6, #0]
    9738:	781b      	ldrb	r3, [r3, #0]
    973a:	9a03      	ldr	r2, [sp, #12]
    973c:	9503      	str	r5, [sp, #12]
    973e:	7013      	strb	r3, [r2, #0]
    9740:	6873      	ldr	r3, [r6, #4]
    9742:	3b01      	subs	r3, #1
    9744:	6073      	str	r3, [r6, #4]
    9746:	2b00      	cmp	r3, #0
    9748:	dc08      	bgt.n	975c <_scanf_i+0xc0>
    974a:	23c0      	movs	r3, #192	; 0xc0
    974c:	005b      	lsls	r3, r3, #1
    974e:	58e3      	ldr	r3, [r4, r3]
    9750:	0031      	movs	r1, r6
    9752:	9805      	ldr	r0, [sp, #20]
    9754:	9307      	str	r3, [sp, #28]
    9756:	4798      	blx	r3
    9758:	2800      	cmp	r0, #0
    975a:	d17d      	bne.n	9858 <_scanf_i+0x1bc>
    975c:	3701      	adds	r7, #1
    975e:	2f03      	cmp	r7, #3
    9760:	d1c6      	bne.n	96f0 <_scanf_i+0x54>
    9762:	6863      	ldr	r3, [r4, #4]
    9764:	2b00      	cmp	r3, #0
    9766:	d101      	bne.n	976c <_scanf_i+0xd0>
    9768:	330a      	adds	r3, #10
    976a:	6063      	str	r3, [r4, #4]
    976c:	2110      	movs	r1, #16
    976e:	2700      	movs	r7, #0
    9770:	6863      	ldr	r3, [r4, #4]
    9772:	6960      	ldr	r0, [r4, #20]
    9774:	1ac9      	subs	r1, r1, r3
    9776:	4b47      	ldr	r3, [pc, #284]	; (9894 <_scanf_i+0x1f8>)
    9778:	18c9      	adds	r1, r1, r3
    977a:	f000 f93d 	bl	99f8 <__sccl>
    977e:	9d03      	ldr	r5, [sp, #12]
    9780:	68a3      	ldr	r3, [r4, #8]
    9782:	2b00      	cmp	r3, #0
    9784:	d041      	beq.n	980a <_scanf_i+0x16e>
    9786:	6832      	ldr	r2, [r6, #0]
    9788:	6960      	ldr	r0, [r4, #20]
    978a:	7811      	ldrb	r1, [r2, #0]
    978c:	5c40      	ldrb	r0, [r0, r1]
    978e:	2800      	cmp	r0, #0
    9790:	d03b      	beq.n	980a <_scanf_i+0x16e>
    9792:	2930      	cmp	r1, #48	; 0x30
    9794:	d128      	bne.n	97e8 <_scanf_i+0x14c>
    9796:	2080      	movs	r0, #128	; 0x80
    9798:	6821      	ldr	r1, [r4, #0]
    979a:	0100      	lsls	r0, r0, #4
    979c:	4201      	tst	r1, r0
    979e:	d023      	beq.n	97e8 <_scanf_i+0x14c>
    97a0:	9a04      	ldr	r2, [sp, #16]
    97a2:	3701      	adds	r7, #1
    97a4:	2a00      	cmp	r2, #0
    97a6:	d003      	beq.n	97b0 <_scanf_i+0x114>
    97a8:	3a01      	subs	r2, #1
    97aa:	3301      	adds	r3, #1
    97ac:	9204      	str	r2, [sp, #16]
    97ae:	60a3      	str	r3, [r4, #8]
    97b0:	6873      	ldr	r3, [r6, #4]
    97b2:	3b01      	subs	r3, #1
    97b4:	6073      	str	r3, [r6, #4]
    97b6:	2b00      	cmp	r3, #0
    97b8:	dd1e      	ble.n	97f8 <_scanf_i+0x15c>
    97ba:	6833      	ldr	r3, [r6, #0]
    97bc:	3301      	adds	r3, #1
    97be:	6033      	str	r3, [r6, #0]
    97c0:	68a3      	ldr	r3, [r4, #8]
    97c2:	3b01      	subs	r3, #1
    97c4:	60a3      	str	r3, [r4, #8]
    97c6:	e7db      	b.n	9780 <_scanf_i+0xe4>
    97c8:	2f02      	cmp	r7, #2
    97ca:	d1ab      	bne.n	9724 <_scanf_i+0x88>
    97cc:	21c0      	movs	r1, #192	; 0xc0
    97ce:	2380      	movs	r3, #128	; 0x80
    97d0:	6822      	ldr	r2, [r4, #0]
    97d2:	00c9      	lsls	r1, r1, #3
    97d4:	4011      	ands	r1, r2
    97d6:	009b      	lsls	r3, r3, #2
    97d8:	4299      	cmp	r1, r3
    97da:	d1c2      	bne.n	9762 <_scanf_i+0xc6>
    97dc:	3bf1      	subs	r3, #241	; 0xf1
    97de:	3bff      	subs	r3, #255	; 0xff
    97e0:	6063      	str	r3, [r4, #4]
    97e2:	33f0      	adds	r3, #240	; 0xf0
    97e4:	4313      	orrs	r3, r2
    97e6:	e79c      	b.n	9722 <_scanf_i+0x86>
    97e8:	6821      	ldr	r1, [r4, #0]
    97ea:	4b2b      	ldr	r3, [pc, #172]	; (9898 <_scanf_i+0x1fc>)
    97ec:	400b      	ands	r3, r1
    97ee:	6023      	str	r3, [r4, #0]
    97f0:	7813      	ldrb	r3, [r2, #0]
    97f2:	702b      	strb	r3, [r5, #0]
    97f4:	3501      	adds	r5, #1
    97f6:	e7db      	b.n	97b0 <_scanf_i+0x114>
    97f8:	23c0      	movs	r3, #192	; 0xc0
    97fa:	005b      	lsls	r3, r3, #1
    97fc:	58e3      	ldr	r3, [r4, r3]
    97fe:	0031      	movs	r1, r6
    9800:	9805      	ldr	r0, [sp, #20]
    9802:	9303      	str	r3, [sp, #12]
    9804:	4798      	blx	r3
    9806:	2800      	cmp	r0, #0
    9808:	d0da      	beq.n	97c0 <_scanf_i+0x124>
    980a:	6823      	ldr	r3, [r4, #0]
    980c:	05db      	lsls	r3, r3, #23
    980e:	d50e      	bpl.n	982e <_scanf_i+0x192>
    9810:	9b01      	ldr	r3, [sp, #4]
    9812:	429d      	cmp	r5, r3
    9814:	d907      	bls.n	9826 <_scanf_i+0x18a>
    9816:	23be      	movs	r3, #190	; 0xbe
    9818:	3d01      	subs	r5, #1
    981a:	005b      	lsls	r3, r3, #1
    981c:	7829      	ldrb	r1, [r5, #0]
    981e:	58e3      	ldr	r3, [r4, r3]
    9820:	0032      	movs	r2, r6
    9822:	9805      	ldr	r0, [sp, #20]
    9824:	4798      	blx	r3
    9826:	9b01      	ldr	r3, [sp, #4]
    9828:	2001      	movs	r0, #1
    982a:	429d      	cmp	r5, r3
    982c:	d027      	beq.n	987e <_scanf_i+0x1e2>
    982e:	2210      	movs	r2, #16
    9830:	6823      	ldr	r3, [r4, #0]
    9832:	401a      	ands	r2, r3
    9834:	d11c      	bne.n	9870 <_scanf_i+0x1d4>
    9836:	702a      	strb	r2, [r5, #0]
    9838:	6863      	ldr	r3, [r4, #4]
    983a:	9901      	ldr	r1, [sp, #4]
    983c:	9805      	ldr	r0, [sp, #20]
    983e:	9e06      	ldr	r6, [sp, #24]
    9840:	47b0      	blx	r6
    9842:	9b02      	ldr	r3, [sp, #8]
    9844:	6822      	ldr	r2, [r4, #0]
    9846:	681b      	ldr	r3, [r3, #0]
    9848:	0691      	lsls	r1, r2, #26
    984a:	d507      	bpl.n	985c <_scanf_i+0x1c0>
    984c:	9902      	ldr	r1, [sp, #8]
    984e:	1d1a      	adds	r2, r3, #4
    9850:	600a      	str	r2, [r1, #0]
    9852:	681b      	ldr	r3, [r3, #0]
    9854:	6018      	str	r0, [r3, #0]
    9856:	e008      	b.n	986a <_scanf_i+0x1ce>
    9858:	2700      	movs	r7, #0
    985a:	e7d6      	b.n	980a <_scanf_i+0x16e>
    985c:	07d1      	lsls	r1, r2, #31
    985e:	d5f5      	bpl.n	984c <_scanf_i+0x1b0>
    9860:	9902      	ldr	r1, [sp, #8]
    9862:	1d1a      	adds	r2, r3, #4
    9864:	600a      	str	r2, [r1, #0]
    9866:	681b      	ldr	r3, [r3, #0]
    9868:	8018      	strh	r0, [r3, #0]
    986a:	68e3      	ldr	r3, [r4, #12]
    986c:	3301      	adds	r3, #1
    986e:	60e3      	str	r3, [r4, #12]
    9870:	2000      	movs	r0, #0
    9872:	9b01      	ldr	r3, [sp, #4]
    9874:	1aed      	subs	r5, r5, r3
    9876:	6923      	ldr	r3, [r4, #16]
    9878:	19ef      	adds	r7, r5, r7
    987a:	19df      	adds	r7, r3, r7
    987c:	6127      	str	r7, [r4, #16]
    987e:	b00d      	add	sp, #52	; 0x34
    9880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9882:	46c0      	nop			; (mov r8, r8)
    9884:	0000a744 	.word	0x0000a744
    9888:	00008505 	.word	0x00008505
    988c:	00009c05 	.word	0x00009c05
    9890:	fffffaff 	.word	0xfffffaff
    9894:	0000a750 	.word	0x0000a750
    9898:	fffff6ff 	.word	0xfffff6ff

0000989c <lflush>:
    989c:	2209      	movs	r2, #9
    989e:	b510      	push	{r4, lr}
    98a0:	8983      	ldrh	r3, [r0, #12]
    98a2:	4013      	ands	r3, r2
    98a4:	2200      	movs	r2, #0
    98a6:	2b09      	cmp	r3, #9
    98a8:	d102      	bne.n	98b0 <lflush+0x14>
    98aa:	f7fe ffd1 	bl	8850 <fflush>
    98ae:	0002      	movs	r2, r0
    98b0:	0010      	movs	r0, r2
    98b2:	bd10      	pop	{r4, pc}

000098b4 <__srefill_r>:
    98b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98b6:	0005      	movs	r5, r0
    98b8:	000c      	movs	r4, r1
    98ba:	2800      	cmp	r0, #0
    98bc:	d004      	beq.n	98c8 <__srefill_r+0x14>
    98be:	6983      	ldr	r3, [r0, #24]
    98c0:	2b00      	cmp	r3, #0
    98c2:	d101      	bne.n	98c8 <__srefill_r+0x14>
    98c4:	f7ff f81a 	bl	88fc <__sinit>
    98c8:	4b3d      	ldr	r3, [pc, #244]	; (99c0 <__srefill_r+0x10c>)
    98ca:	429c      	cmp	r4, r3
    98cc:	d10a      	bne.n	98e4 <__srefill_r+0x30>
    98ce:	686c      	ldr	r4, [r5, #4]
    98d0:	2300      	movs	r3, #0
    98d2:	6063      	str	r3, [r4, #4]
    98d4:	230c      	movs	r3, #12
    98d6:	5ee2      	ldrsh	r2, [r4, r3]
    98d8:	b293      	uxth	r3, r2
    98da:	0699      	lsls	r1, r3, #26
    98dc:	d50c      	bpl.n	98f8 <__srefill_r+0x44>
    98de:	2001      	movs	r0, #1
    98e0:	4240      	negs	r0, r0
    98e2:	e068      	b.n	99b6 <__srefill_r+0x102>
    98e4:	4b37      	ldr	r3, [pc, #220]	; (99c4 <__srefill_r+0x110>)
    98e6:	429c      	cmp	r4, r3
    98e8:	d101      	bne.n	98ee <__srefill_r+0x3a>
    98ea:	68ac      	ldr	r4, [r5, #8]
    98ec:	e7f0      	b.n	98d0 <__srefill_r+0x1c>
    98ee:	4b36      	ldr	r3, [pc, #216]	; (99c8 <__srefill_r+0x114>)
    98f0:	429c      	cmp	r4, r3
    98f2:	d1ed      	bne.n	98d0 <__srefill_r+0x1c>
    98f4:	68ec      	ldr	r4, [r5, #12]
    98f6:	e7eb      	b.n	98d0 <__srefill_r+0x1c>
    98f8:	0759      	lsls	r1, r3, #29
    98fa:	d44a      	bmi.n	9992 <__srefill_r+0xde>
    98fc:	06d9      	lsls	r1, r3, #27
    98fe:	d405      	bmi.n	990c <__srefill_r+0x58>
    9900:	2309      	movs	r3, #9
    9902:	602b      	str	r3, [r5, #0]
    9904:	3337      	adds	r3, #55	; 0x37
    9906:	4313      	orrs	r3, r2
    9908:	81a3      	strh	r3, [r4, #12]
    990a:	e7e8      	b.n	98de <__srefill_r+0x2a>
    990c:	2608      	movs	r6, #8
    990e:	4233      	tst	r3, r6
    9910:	d00a      	beq.n	9928 <__srefill_r+0x74>
    9912:	0021      	movs	r1, r4
    9914:	0028      	movs	r0, r5
    9916:	f7fe ff6f 	bl	87f8 <_fflush_r>
    991a:	2800      	cmp	r0, #0
    991c:	d1df      	bne.n	98de <__srefill_r+0x2a>
    991e:	89a3      	ldrh	r3, [r4, #12]
    9920:	60a0      	str	r0, [r4, #8]
    9922:	43b3      	bics	r3, r6
    9924:	81a3      	strh	r3, [r4, #12]
    9926:	61a0      	str	r0, [r4, #24]
    9928:	2304      	movs	r3, #4
    992a:	89a2      	ldrh	r2, [r4, #12]
    992c:	4313      	orrs	r3, r2
    992e:	81a3      	strh	r3, [r4, #12]
    9930:	6923      	ldr	r3, [r4, #16]
    9932:	2b00      	cmp	r3, #0
    9934:	d103      	bne.n	993e <__srefill_r+0x8a>
    9936:	0021      	movs	r1, r4
    9938:	0028      	movs	r0, r5
    993a:	f7ff f8c9 	bl	8ad0 <__smakebuf_r>
    993e:	230c      	movs	r3, #12
    9940:	5ee7      	ldrsh	r7, [r4, r3]
    9942:	b2be      	uxth	r6, r7
    9944:	07b3      	lsls	r3, r6, #30
    9946:	d00f      	beq.n	9968 <__srefill_r+0xb4>
    9948:	2301      	movs	r3, #1
    994a:	81a3      	strh	r3, [r4, #12]
    994c:	4b1f      	ldr	r3, [pc, #124]	; (99cc <__srefill_r+0x118>)
    994e:	4920      	ldr	r1, [pc, #128]	; (99d0 <__srefill_r+0x11c>)
    9950:	6818      	ldr	r0, [r3, #0]
    9952:	f7ff f847 	bl	89e4 <_fwalk>
    9956:	2309      	movs	r3, #9
    9958:	81a7      	strh	r7, [r4, #12]
    995a:	401e      	ands	r6, r3
    995c:	429e      	cmp	r6, r3
    995e:	d103      	bne.n	9968 <__srefill_r+0xb4>
    9960:	0021      	movs	r1, r4
    9962:	0028      	movs	r0, r5
    9964:	f7fe febe 	bl	86e4 <__sflush_r>
    9968:	6923      	ldr	r3, [r4, #16]
    996a:	6922      	ldr	r2, [r4, #16]
    996c:	6023      	str	r3, [r4, #0]
    996e:	0028      	movs	r0, r5
    9970:	6963      	ldr	r3, [r4, #20]
    9972:	6a21      	ldr	r1, [r4, #32]
    9974:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9976:	47a8      	blx	r5
    9978:	0002      	movs	r2, r0
    997a:	6060      	str	r0, [r4, #4]
    997c:	2000      	movs	r0, #0
    997e:	4282      	cmp	r2, r0
    9980:	dc19      	bgt.n	99b6 <__srefill_r+0x102>
    9982:	89a1      	ldrh	r1, [r4, #12]
    9984:	4282      	cmp	r2, r0
    9986:	d117      	bne.n	99b8 <__srefill_r+0x104>
    9988:	2320      	movs	r3, #32
    998a:	430b      	orrs	r3, r1
    998c:	81a3      	strh	r3, [r4, #12]
    998e:	3801      	subs	r0, #1
    9990:	e011      	b.n	99b6 <__srefill_r+0x102>
    9992:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9994:	2900      	cmp	r1, #0
    9996:	d0cb      	beq.n	9930 <__srefill_r+0x7c>
    9998:	0023      	movs	r3, r4
    999a:	3344      	adds	r3, #68	; 0x44
    999c:	4299      	cmp	r1, r3
    999e:	d002      	beq.n	99a6 <__srefill_r+0xf2>
    99a0:	0028      	movs	r0, r5
    99a2:	f7ff f8f5 	bl	8b90 <_free_r>
    99a6:	2000      	movs	r0, #0
    99a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    99aa:	6360      	str	r0, [r4, #52]	; 0x34
    99ac:	6063      	str	r3, [r4, #4]
    99ae:	4283      	cmp	r3, r0
    99b0:	d0be      	beq.n	9930 <__srefill_r+0x7c>
    99b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    99b4:	6023      	str	r3, [r4, #0]
    99b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99b8:	2340      	movs	r3, #64	; 0x40
    99ba:	6060      	str	r0, [r4, #4]
    99bc:	430b      	orrs	r3, r1
    99be:	e7a3      	b.n	9908 <__srefill_r+0x54>
    99c0:	0000a6c4 	.word	0x0000a6c4
    99c4:	0000a6e4 	.word	0x0000a6e4
    99c8:	0000a6a4 	.word	0x0000a6a4
    99cc:	0000a6a0 	.word	0x0000a6a0
    99d0:	0000989d 	.word	0x0000989d

000099d4 <_sbrk_r>:
    99d4:	2300      	movs	r3, #0
    99d6:	b570      	push	{r4, r5, r6, lr}
    99d8:	4c06      	ldr	r4, [pc, #24]	; (99f4 <_sbrk_r+0x20>)
    99da:	0005      	movs	r5, r0
    99dc:	0008      	movs	r0, r1
    99de:	6023      	str	r3, [r4, #0]
    99e0:	f7fc f90a 	bl	5bf8 <_sbrk>
    99e4:	1c43      	adds	r3, r0, #1
    99e6:	d103      	bne.n	99f0 <_sbrk_r+0x1c>
    99e8:	6823      	ldr	r3, [r4, #0]
    99ea:	2b00      	cmp	r3, #0
    99ec:	d000      	beq.n	99f0 <_sbrk_r+0x1c>
    99ee:	602b      	str	r3, [r5, #0]
    99f0:	bd70      	pop	{r4, r5, r6, pc}
    99f2:	46c0      	nop			; (mov r8, r8)
    99f4:	20000470 	.word	0x20000470

000099f8 <__sccl>:
    99f8:	b570      	push	{r4, r5, r6, lr}
    99fa:	780b      	ldrb	r3, [r1, #0]
    99fc:	2b5e      	cmp	r3, #94	; 0x5e
    99fe:	d00d      	beq.n	9a1c <__sccl+0x24>
    9a00:	1c4a      	adds	r2, r1, #1
    9a02:	2100      	movs	r1, #0
    9a04:	0004      	movs	r4, r0
    9a06:	1c45      	adds	r5, r0, #1
    9a08:	35ff      	adds	r5, #255	; 0xff
    9a0a:	7021      	strb	r1, [r4, #0]
    9a0c:	3401      	adds	r4, #1
    9a0e:	42a5      	cmp	r5, r4
    9a10:	d1fb      	bne.n	9a0a <__sccl+0x12>
    9a12:	2b00      	cmp	r3, #0
    9a14:	d106      	bne.n	9a24 <__sccl+0x2c>
    9a16:	3a01      	subs	r2, #1
    9a18:	0010      	movs	r0, r2
    9a1a:	bd70      	pop	{r4, r5, r6, pc}
    9a1c:	1c8a      	adds	r2, r1, #2
    9a1e:	784b      	ldrb	r3, [r1, #1]
    9a20:	2101      	movs	r1, #1
    9a22:	e7ef      	b.n	9a04 <__sccl+0xc>
    9a24:	2401      	movs	r4, #1
    9a26:	404c      	eors	r4, r1
    9a28:	0011      	movs	r1, r2
    9a2a:	54c4      	strb	r4, [r0, r3]
    9a2c:	780d      	ldrb	r5, [r1, #0]
    9a2e:	1c4a      	adds	r2, r1, #1
    9a30:	2d2d      	cmp	r5, #45	; 0x2d
    9a32:	d007      	beq.n	9a44 <__sccl+0x4c>
    9a34:	2d5d      	cmp	r5, #93	; 0x5d
    9a36:	d0ef      	beq.n	9a18 <__sccl+0x20>
    9a38:	2d00      	cmp	r5, #0
    9a3a:	d101      	bne.n	9a40 <__sccl+0x48>
    9a3c:	000a      	movs	r2, r1
    9a3e:	e7eb      	b.n	9a18 <__sccl+0x20>
    9a40:	002b      	movs	r3, r5
    9a42:	e7f1      	b.n	9a28 <__sccl+0x30>
    9a44:	784e      	ldrb	r6, [r1, #1]
    9a46:	2e5d      	cmp	r6, #93	; 0x5d
    9a48:	d0fa      	beq.n	9a40 <__sccl+0x48>
    9a4a:	42b3      	cmp	r3, r6
    9a4c:	dcf8      	bgt.n	9a40 <__sccl+0x48>
    9a4e:	3102      	adds	r1, #2
    9a50:	3301      	adds	r3, #1
    9a52:	54c4      	strb	r4, [r0, r3]
    9a54:	429e      	cmp	r6, r3
    9a56:	dcfb      	bgt.n	9a50 <__sccl+0x58>
    9a58:	e7e8      	b.n	9a2c <__sccl+0x34>
	...

00009a5c <__sread>:
    9a5c:	b570      	push	{r4, r5, r6, lr}
    9a5e:	000c      	movs	r4, r1
    9a60:	250e      	movs	r5, #14
    9a62:	5f49      	ldrsh	r1, [r1, r5]
    9a64:	f000 fa2c 	bl	9ec0 <_read_r>
    9a68:	2800      	cmp	r0, #0
    9a6a:	db03      	blt.n	9a74 <__sread+0x18>
    9a6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9a6e:	181b      	adds	r3, r3, r0
    9a70:	6563      	str	r3, [r4, #84]	; 0x54
    9a72:	bd70      	pop	{r4, r5, r6, pc}
    9a74:	89a3      	ldrh	r3, [r4, #12]
    9a76:	4a02      	ldr	r2, [pc, #8]	; (9a80 <__sread+0x24>)
    9a78:	4013      	ands	r3, r2
    9a7a:	81a3      	strh	r3, [r4, #12]
    9a7c:	e7f9      	b.n	9a72 <__sread+0x16>
    9a7e:	46c0      	nop			; (mov r8, r8)
    9a80:	ffffefff 	.word	0xffffefff

00009a84 <__swrite>:
    9a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a86:	001f      	movs	r7, r3
    9a88:	898b      	ldrh	r3, [r1, #12]
    9a8a:	0005      	movs	r5, r0
    9a8c:	000c      	movs	r4, r1
    9a8e:	0016      	movs	r6, r2
    9a90:	05db      	lsls	r3, r3, #23
    9a92:	d505      	bpl.n	9aa0 <__swrite+0x1c>
    9a94:	230e      	movs	r3, #14
    9a96:	5ec9      	ldrsh	r1, [r1, r3]
    9a98:	2200      	movs	r2, #0
    9a9a:	2302      	movs	r3, #2
    9a9c:	f000 f9c8 	bl	9e30 <_lseek_r>
    9aa0:	89a3      	ldrh	r3, [r4, #12]
    9aa2:	4a05      	ldr	r2, [pc, #20]	; (9ab8 <__swrite+0x34>)
    9aa4:	0028      	movs	r0, r5
    9aa6:	4013      	ands	r3, r2
    9aa8:	81a3      	strh	r3, [r4, #12]
    9aaa:	0032      	movs	r2, r6
    9aac:	230e      	movs	r3, #14
    9aae:	5ee1      	ldrsh	r1, [r4, r3]
    9ab0:	003b      	movs	r3, r7
    9ab2:	f000 f973 	bl	9d9c <_write_r>
    9ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ab8:	ffffefff 	.word	0xffffefff

00009abc <__sseek>:
    9abc:	b570      	push	{r4, r5, r6, lr}
    9abe:	000c      	movs	r4, r1
    9ac0:	250e      	movs	r5, #14
    9ac2:	5f49      	ldrsh	r1, [r1, r5]
    9ac4:	f000 f9b4 	bl	9e30 <_lseek_r>
    9ac8:	89a3      	ldrh	r3, [r4, #12]
    9aca:	1c42      	adds	r2, r0, #1
    9acc:	d103      	bne.n	9ad6 <__sseek+0x1a>
    9ace:	4a05      	ldr	r2, [pc, #20]	; (9ae4 <__sseek+0x28>)
    9ad0:	4013      	ands	r3, r2
    9ad2:	81a3      	strh	r3, [r4, #12]
    9ad4:	bd70      	pop	{r4, r5, r6, pc}
    9ad6:	2280      	movs	r2, #128	; 0x80
    9ad8:	0152      	lsls	r2, r2, #5
    9ada:	4313      	orrs	r3, r2
    9adc:	81a3      	strh	r3, [r4, #12]
    9ade:	6560      	str	r0, [r4, #84]	; 0x54
    9ae0:	e7f8      	b.n	9ad4 <__sseek+0x18>
    9ae2:	46c0      	nop			; (mov r8, r8)
    9ae4:	ffffefff 	.word	0xffffefff

00009ae8 <__sclose>:
    9ae8:	b510      	push	{r4, lr}
    9aea:	230e      	movs	r3, #14
    9aec:	5ec9      	ldrsh	r1, [r1, r3]
    9aee:	f000 f969 	bl	9dc4 <_close_r>
    9af2:	bd10      	pop	{r4, pc}

00009af4 <_strtoul_l.isra.0>:
    9af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9af6:	001f      	movs	r7, r3
    9af8:	000e      	movs	r6, r1
    9afa:	b087      	sub	sp, #28
    9afc:	9005      	str	r0, [sp, #20]
    9afe:	9103      	str	r1, [sp, #12]
    9b00:	9201      	str	r2, [sp, #4]
    9b02:	980c      	ldr	r0, [sp, #48]	; 0x30
    9b04:	7834      	ldrb	r4, [r6, #0]
    9b06:	f7fe ffaa 	bl	8a5e <__locale_ctype_ptr_l>
    9b0a:	2208      	movs	r2, #8
    9b0c:	1900      	adds	r0, r0, r4
    9b0e:	7843      	ldrb	r3, [r0, #1]
    9b10:	1c75      	adds	r5, r6, #1
    9b12:	4013      	ands	r3, r2
    9b14:	d10c      	bne.n	9b30 <_strtoul_l.isra.0+0x3c>
    9b16:	2c2d      	cmp	r4, #45	; 0x2d
    9b18:	d10c      	bne.n	9b34 <_strtoul_l.isra.0+0x40>
    9b1a:	3301      	adds	r3, #1
    9b1c:	782c      	ldrb	r4, [r5, #0]
    9b1e:	9302      	str	r3, [sp, #8]
    9b20:	1cb5      	adds	r5, r6, #2
    9b22:	2f00      	cmp	r7, #0
    9b24:	d00c      	beq.n	9b40 <_strtoul_l.isra.0+0x4c>
    9b26:	2f10      	cmp	r7, #16
    9b28:	d114      	bne.n	9b54 <_strtoul_l.isra.0+0x60>
    9b2a:	2c30      	cmp	r4, #48	; 0x30
    9b2c:	d00a      	beq.n	9b44 <_strtoul_l.isra.0+0x50>
    9b2e:	e011      	b.n	9b54 <_strtoul_l.isra.0+0x60>
    9b30:	002e      	movs	r6, r5
    9b32:	e7e6      	b.n	9b02 <_strtoul_l.isra.0+0xe>
    9b34:	9302      	str	r3, [sp, #8]
    9b36:	2c2b      	cmp	r4, #43	; 0x2b
    9b38:	d1f3      	bne.n	9b22 <_strtoul_l.isra.0+0x2e>
    9b3a:	782c      	ldrb	r4, [r5, #0]
    9b3c:	1cb5      	adds	r5, r6, #2
    9b3e:	e7f0      	b.n	9b22 <_strtoul_l.isra.0+0x2e>
    9b40:	2c30      	cmp	r4, #48	; 0x30
    9b42:	d12f      	bne.n	9ba4 <_strtoul_l.isra.0+0xb0>
    9b44:	2220      	movs	r2, #32
    9b46:	782b      	ldrb	r3, [r5, #0]
    9b48:	4393      	bics	r3, r2
    9b4a:	2b58      	cmp	r3, #88	; 0x58
    9b4c:	d154      	bne.n	9bf8 <_strtoul_l.isra.0+0x104>
    9b4e:	2710      	movs	r7, #16
    9b50:	786c      	ldrb	r4, [r5, #1]
    9b52:	3502      	adds	r5, #2
    9b54:	2001      	movs	r0, #1
    9b56:	0039      	movs	r1, r7
    9b58:	4240      	negs	r0, r0
    9b5a:	f7fc fc59 	bl	6410 <__udivsi3>
    9b5e:	0006      	movs	r6, r0
    9b60:	2001      	movs	r0, #1
    9b62:	0039      	movs	r1, r7
    9b64:	4240      	negs	r0, r0
    9b66:	f7fc fcd9 	bl	651c <__aeabi_uidivmod>
    9b6a:	2300      	movs	r3, #0
    9b6c:	9104      	str	r1, [sp, #16]
    9b6e:	2101      	movs	r1, #1
    9b70:	2201      	movs	r2, #1
    9b72:	0018      	movs	r0, r3
    9b74:	468c      	mov	ip, r1
    9b76:	4252      	negs	r2, r2
    9b78:	0021      	movs	r1, r4
    9b7a:	3930      	subs	r1, #48	; 0x30
    9b7c:	2909      	cmp	r1, #9
    9b7e:	d813      	bhi.n	9ba8 <_strtoul_l.isra.0+0xb4>
    9b80:	000c      	movs	r4, r1
    9b82:	42a7      	cmp	r7, r4
    9b84:	dd1e      	ble.n	9bc4 <_strtoul_l.isra.0+0xd0>
    9b86:	2b00      	cmp	r3, #0
    9b88:	db1a      	blt.n	9bc0 <_strtoul_l.isra.0+0xcc>
    9b8a:	0013      	movs	r3, r2
    9b8c:	4286      	cmp	r6, r0
    9b8e:	d306      	bcc.n	9b9e <_strtoul_l.isra.0+0xaa>
    9b90:	d102      	bne.n	9b98 <_strtoul_l.isra.0+0xa4>
    9b92:	9904      	ldr	r1, [sp, #16]
    9b94:	42a1      	cmp	r1, r4
    9b96:	db02      	blt.n	9b9e <_strtoul_l.isra.0+0xaa>
    9b98:	4663      	mov	r3, ip
    9b9a:	4378      	muls	r0, r7
    9b9c:	1820      	adds	r0, r4, r0
    9b9e:	782c      	ldrb	r4, [r5, #0]
    9ba0:	3501      	adds	r5, #1
    9ba2:	e7e9      	b.n	9b78 <_strtoul_l.isra.0+0x84>
    9ba4:	270a      	movs	r7, #10
    9ba6:	e7d5      	b.n	9b54 <_strtoul_l.isra.0+0x60>
    9ba8:	0021      	movs	r1, r4
    9baa:	3941      	subs	r1, #65	; 0x41
    9bac:	2919      	cmp	r1, #25
    9bae:	d801      	bhi.n	9bb4 <_strtoul_l.isra.0+0xc0>
    9bb0:	3c37      	subs	r4, #55	; 0x37
    9bb2:	e7e6      	b.n	9b82 <_strtoul_l.isra.0+0x8e>
    9bb4:	0021      	movs	r1, r4
    9bb6:	3961      	subs	r1, #97	; 0x61
    9bb8:	2919      	cmp	r1, #25
    9bba:	d803      	bhi.n	9bc4 <_strtoul_l.isra.0+0xd0>
    9bbc:	3c57      	subs	r4, #87	; 0x57
    9bbe:	e7e0      	b.n	9b82 <_strtoul_l.isra.0+0x8e>
    9bc0:	0013      	movs	r3, r2
    9bc2:	e7ec      	b.n	9b9e <_strtoul_l.isra.0+0xaa>
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	da09      	bge.n	9bdc <_strtoul_l.isra.0+0xe8>
    9bc8:	2322      	movs	r3, #34	; 0x22
    9bca:	2001      	movs	r0, #1
    9bcc:	9a05      	ldr	r2, [sp, #20]
    9bce:	4240      	negs	r0, r0
    9bd0:	6013      	str	r3, [r2, #0]
    9bd2:	9b01      	ldr	r3, [sp, #4]
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d10b      	bne.n	9bf0 <_strtoul_l.isra.0+0xfc>
    9bd8:	b007      	add	sp, #28
    9bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bdc:	9a02      	ldr	r2, [sp, #8]
    9bde:	2a00      	cmp	r2, #0
    9be0:	d000      	beq.n	9be4 <_strtoul_l.isra.0+0xf0>
    9be2:	4240      	negs	r0, r0
    9be4:	9a01      	ldr	r2, [sp, #4]
    9be6:	2a00      	cmp	r2, #0
    9be8:	d0f6      	beq.n	9bd8 <_strtoul_l.isra.0+0xe4>
    9bea:	9a03      	ldr	r2, [sp, #12]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d000      	beq.n	9bf2 <_strtoul_l.isra.0+0xfe>
    9bf0:	1e6a      	subs	r2, r5, #1
    9bf2:	9b01      	ldr	r3, [sp, #4]
    9bf4:	601a      	str	r2, [r3, #0]
    9bf6:	e7ef      	b.n	9bd8 <_strtoul_l.isra.0+0xe4>
    9bf8:	2430      	movs	r4, #48	; 0x30
    9bfa:	2f00      	cmp	r7, #0
    9bfc:	d1aa      	bne.n	9b54 <_strtoul_l.isra.0+0x60>
    9bfe:	3708      	adds	r7, #8
    9c00:	e7a8      	b.n	9b54 <_strtoul_l.isra.0+0x60>
	...

00009c04 <_strtoul_r>:
    9c04:	b513      	push	{r0, r1, r4, lr}
    9c06:	4c05      	ldr	r4, [pc, #20]	; (9c1c <_strtoul_r+0x18>)
    9c08:	6824      	ldr	r4, [r4, #0]
    9c0a:	6a24      	ldr	r4, [r4, #32]
    9c0c:	2c00      	cmp	r4, #0
    9c0e:	d100      	bne.n	9c12 <_strtoul_r+0xe>
    9c10:	4c03      	ldr	r4, [pc, #12]	; (9c20 <_strtoul_r+0x1c>)
    9c12:	9400      	str	r4, [sp, #0]
    9c14:	f7ff ff6e 	bl	9af4 <_strtoul_l.isra.0>
    9c18:	bd16      	pop	{r1, r2, r4, pc}
    9c1a:	46c0      	nop			; (mov r8, r8)
    9c1c:	20000068 	.word	0x20000068
    9c20:	200000cc 	.word	0x200000cc

00009c24 <__submore>:
    9c24:	000b      	movs	r3, r1
    9c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c28:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    9c2a:	3344      	adds	r3, #68	; 0x44
    9c2c:	000c      	movs	r4, r1
    9c2e:	429d      	cmp	r5, r3
    9c30:	d11c      	bne.n	9c6c <__submore+0x48>
    9c32:	2680      	movs	r6, #128	; 0x80
    9c34:	00f6      	lsls	r6, r6, #3
    9c36:	0031      	movs	r1, r6
    9c38:	f7fe fff4 	bl	8c24 <_malloc_r>
    9c3c:	2800      	cmp	r0, #0
    9c3e:	d102      	bne.n	9c46 <__submore+0x22>
    9c40:	2001      	movs	r0, #1
    9c42:	4240      	negs	r0, r0
    9c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9c46:	0023      	movs	r3, r4
    9c48:	6360      	str	r0, [r4, #52]	; 0x34
    9c4a:	63a6      	str	r6, [r4, #56]	; 0x38
    9c4c:	3346      	adds	r3, #70	; 0x46
    9c4e:	781a      	ldrb	r2, [r3, #0]
    9c50:	4b10      	ldr	r3, [pc, #64]	; (9c94 <__submore+0x70>)
    9c52:	54c2      	strb	r2, [r0, r3]
    9c54:	0023      	movs	r3, r4
    9c56:	3345      	adds	r3, #69	; 0x45
    9c58:	781a      	ldrb	r2, [r3, #0]
    9c5a:	4b0f      	ldr	r3, [pc, #60]	; (9c98 <__submore+0x74>)
    9c5c:	54c2      	strb	r2, [r0, r3]
    9c5e:	782a      	ldrb	r2, [r5, #0]
    9c60:	4b0e      	ldr	r3, [pc, #56]	; (9c9c <__submore+0x78>)
    9c62:	54c2      	strb	r2, [r0, r3]
    9c64:	18c0      	adds	r0, r0, r3
    9c66:	6020      	str	r0, [r4, #0]
    9c68:	2000      	movs	r0, #0
    9c6a:	e7eb      	b.n	9c44 <__submore+0x20>
    9c6c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    9c6e:	0029      	movs	r1, r5
    9c70:	0073      	lsls	r3, r6, #1
    9c72:	001a      	movs	r2, r3
    9c74:	9301      	str	r3, [sp, #4]
    9c76:	f000 f8fc 	bl	9e72 <_realloc_r>
    9c7a:	1e05      	subs	r5, r0, #0
    9c7c:	d0e0      	beq.n	9c40 <__submore+0x1c>
    9c7e:	1987      	adds	r7, r0, r6
    9c80:	0001      	movs	r1, r0
    9c82:	0032      	movs	r2, r6
    9c84:	0038      	movs	r0, r7
    9c86:	f7fe f9f1 	bl	806c <memcpy>
    9c8a:	9b01      	ldr	r3, [sp, #4]
    9c8c:	6027      	str	r7, [r4, #0]
    9c8e:	6365      	str	r5, [r4, #52]	; 0x34
    9c90:	63a3      	str	r3, [r4, #56]	; 0x38
    9c92:	e7e9      	b.n	9c68 <__submore+0x44>
    9c94:	000003ff 	.word	0x000003ff
    9c98:	000003fe 	.word	0x000003fe
    9c9c:	000003fd 	.word	0x000003fd

00009ca0 <_ungetc_r>:
    9ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ca2:	0005      	movs	r5, r0
    9ca4:	000e      	movs	r6, r1
    9ca6:	0014      	movs	r4, r2
    9ca8:	1c4b      	adds	r3, r1, #1
    9caa:	d103      	bne.n	9cb4 <_ungetc_r+0x14>
    9cac:	2601      	movs	r6, #1
    9cae:	4276      	negs	r6, r6
    9cb0:	0030      	movs	r0, r6
    9cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cb4:	2800      	cmp	r0, #0
    9cb6:	d004      	beq.n	9cc2 <_ungetc_r+0x22>
    9cb8:	6983      	ldr	r3, [r0, #24]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d101      	bne.n	9cc2 <_ungetc_r+0x22>
    9cbe:	f7fe fe1d 	bl	88fc <__sinit>
    9cc2:	4b2d      	ldr	r3, [pc, #180]	; (9d78 <_ungetc_r+0xd8>)
    9cc4:	429c      	cmp	r4, r3
    9cc6:	d12d      	bne.n	9d24 <_ungetc_r+0x84>
    9cc8:	686c      	ldr	r4, [r5, #4]
    9cca:	2220      	movs	r2, #32
    9ccc:	89a3      	ldrh	r3, [r4, #12]
    9cce:	4393      	bics	r3, r2
    9cd0:	b21b      	sxth	r3, r3
    9cd2:	81a3      	strh	r3, [r4, #12]
    9cd4:	b29b      	uxth	r3, r3
    9cd6:	075a      	lsls	r2, r3, #29
    9cd8:	d413      	bmi.n	9d02 <_ungetc_r+0x62>
    9cda:	06da      	lsls	r2, r3, #27
    9cdc:	d5e6      	bpl.n	9cac <_ungetc_r+0xc>
    9cde:	2708      	movs	r7, #8
    9ce0:	423b      	tst	r3, r7
    9ce2:	d00a      	beq.n	9cfa <_ungetc_r+0x5a>
    9ce4:	0021      	movs	r1, r4
    9ce6:	0028      	movs	r0, r5
    9ce8:	f7fe fd86 	bl	87f8 <_fflush_r>
    9cec:	2800      	cmp	r0, #0
    9cee:	d1dd      	bne.n	9cac <_ungetc_r+0xc>
    9cf0:	89a3      	ldrh	r3, [r4, #12]
    9cf2:	60a0      	str	r0, [r4, #8]
    9cf4:	43bb      	bics	r3, r7
    9cf6:	81a3      	strh	r3, [r4, #12]
    9cf8:	61a0      	str	r0, [r4, #24]
    9cfa:	2304      	movs	r3, #4
    9cfc:	89a2      	ldrh	r2, [r4, #12]
    9cfe:	4313      	orrs	r3, r2
    9d00:	81a3      	strh	r3, [r4, #12]
    9d02:	6b62      	ldr	r2, [r4, #52]	; 0x34
    9d04:	b2f7      	uxtb	r7, r6
    9d06:	6863      	ldr	r3, [r4, #4]
    9d08:	b2f6      	uxtb	r6, r6
    9d0a:	2a00      	cmp	r2, #0
    9d0c:	d01b      	beq.n	9d46 <_ungetc_r+0xa6>
    9d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9d10:	4293      	cmp	r3, r2
    9d12:	da11      	bge.n	9d38 <_ungetc_r+0x98>
    9d14:	6823      	ldr	r3, [r4, #0]
    9d16:	3b01      	subs	r3, #1
    9d18:	6023      	str	r3, [r4, #0]
    9d1a:	701f      	strb	r7, [r3, #0]
    9d1c:	6863      	ldr	r3, [r4, #4]
    9d1e:	3301      	adds	r3, #1
    9d20:	6063      	str	r3, [r4, #4]
    9d22:	e7c5      	b.n	9cb0 <_ungetc_r+0x10>
    9d24:	4b15      	ldr	r3, [pc, #84]	; (9d7c <_ungetc_r+0xdc>)
    9d26:	429c      	cmp	r4, r3
    9d28:	d101      	bne.n	9d2e <_ungetc_r+0x8e>
    9d2a:	68ac      	ldr	r4, [r5, #8]
    9d2c:	e7cd      	b.n	9cca <_ungetc_r+0x2a>
    9d2e:	4b14      	ldr	r3, [pc, #80]	; (9d80 <_ungetc_r+0xe0>)
    9d30:	429c      	cmp	r4, r3
    9d32:	d1ca      	bne.n	9cca <_ungetc_r+0x2a>
    9d34:	68ec      	ldr	r4, [r5, #12]
    9d36:	e7c8      	b.n	9cca <_ungetc_r+0x2a>
    9d38:	0021      	movs	r1, r4
    9d3a:	0028      	movs	r0, r5
    9d3c:	f7ff ff72 	bl	9c24 <__submore>
    9d40:	2800      	cmp	r0, #0
    9d42:	d0e7      	beq.n	9d14 <_ungetc_r+0x74>
    9d44:	e7b2      	b.n	9cac <_ungetc_r+0xc>
    9d46:	6921      	ldr	r1, [r4, #16]
    9d48:	6822      	ldr	r2, [r4, #0]
    9d4a:	2900      	cmp	r1, #0
    9d4c:	d007      	beq.n	9d5e <_ungetc_r+0xbe>
    9d4e:	4291      	cmp	r1, r2
    9d50:	d205      	bcs.n	9d5e <_ungetc_r+0xbe>
    9d52:	1e51      	subs	r1, r2, #1
    9d54:	7808      	ldrb	r0, [r1, #0]
    9d56:	4286      	cmp	r6, r0
    9d58:	d101      	bne.n	9d5e <_ungetc_r+0xbe>
    9d5a:	6021      	str	r1, [r4, #0]
    9d5c:	e7df      	b.n	9d1e <_ungetc_r+0x7e>
    9d5e:	6423      	str	r3, [r4, #64]	; 0x40
    9d60:	0023      	movs	r3, r4
    9d62:	3344      	adds	r3, #68	; 0x44
    9d64:	6363      	str	r3, [r4, #52]	; 0x34
    9d66:	2303      	movs	r3, #3
    9d68:	63a3      	str	r3, [r4, #56]	; 0x38
    9d6a:	0023      	movs	r3, r4
    9d6c:	3346      	adds	r3, #70	; 0x46
    9d6e:	63e2      	str	r2, [r4, #60]	; 0x3c
    9d70:	701f      	strb	r7, [r3, #0]
    9d72:	6023      	str	r3, [r4, #0]
    9d74:	2301      	movs	r3, #1
    9d76:	e7d3      	b.n	9d20 <_ungetc_r+0x80>
    9d78:	0000a6c4 	.word	0x0000a6c4
    9d7c:	0000a6e4 	.word	0x0000a6e4
    9d80:	0000a6a4 	.word	0x0000a6a4

00009d84 <__ascii_wctomb>:
    9d84:	1e0b      	subs	r3, r1, #0
    9d86:	d004      	beq.n	9d92 <__ascii_wctomb+0xe>
    9d88:	2aff      	cmp	r2, #255	; 0xff
    9d8a:	d904      	bls.n	9d96 <__ascii_wctomb+0x12>
    9d8c:	238a      	movs	r3, #138	; 0x8a
    9d8e:	6003      	str	r3, [r0, #0]
    9d90:	3b8b      	subs	r3, #139	; 0x8b
    9d92:	0018      	movs	r0, r3
    9d94:	4770      	bx	lr
    9d96:	700a      	strb	r2, [r1, #0]
    9d98:	2301      	movs	r3, #1
    9d9a:	e7fa      	b.n	9d92 <__ascii_wctomb+0xe>

00009d9c <_write_r>:
    9d9c:	b570      	push	{r4, r5, r6, lr}
    9d9e:	0005      	movs	r5, r0
    9da0:	0008      	movs	r0, r1
    9da2:	0011      	movs	r1, r2
    9da4:	2200      	movs	r2, #0
    9da6:	4c06      	ldr	r4, [pc, #24]	; (9dc0 <_write_r+0x24>)
    9da8:	6022      	str	r2, [r4, #0]
    9daa:	001a      	movs	r2, r3
    9dac:	f7fb feee 	bl	5b8c <_write>
    9db0:	1c43      	adds	r3, r0, #1
    9db2:	d103      	bne.n	9dbc <_write_r+0x20>
    9db4:	6823      	ldr	r3, [r4, #0]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d000      	beq.n	9dbc <_write_r+0x20>
    9dba:	602b      	str	r3, [r5, #0]
    9dbc:	bd70      	pop	{r4, r5, r6, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	20000470 	.word	0x20000470

00009dc4 <_close_r>:
    9dc4:	2300      	movs	r3, #0
    9dc6:	b570      	push	{r4, r5, r6, lr}
    9dc8:	4c06      	ldr	r4, [pc, #24]	; (9de4 <_close_r+0x20>)
    9dca:	0005      	movs	r5, r0
    9dcc:	0008      	movs	r0, r1
    9dce:	6023      	str	r3, [r4, #0]
    9dd0:	f7fb ff30 	bl	5c34 <_close>
    9dd4:	1c43      	adds	r3, r0, #1
    9dd6:	d103      	bne.n	9de0 <_close_r+0x1c>
    9dd8:	6823      	ldr	r3, [r4, #0]
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d000      	beq.n	9de0 <_close_r+0x1c>
    9dde:	602b      	str	r3, [r5, #0]
    9de0:	bd70      	pop	{r4, r5, r6, pc}
    9de2:	46c0      	nop			; (mov r8, r8)
    9de4:	20000470 	.word	0x20000470

00009de8 <_fstat_r>:
    9de8:	2300      	movs	r3, #0
    9dea:	b570      	push	{r4, r5, r6, lr}
    9dec:	4c06      	ldr	r4, [pc, #24]	; (9e08 <_fstat_r+0x20>)
    9dee:	0005      	movs	r5, r0
    9df0:	0008      	movs	r0, r1
    9df2:	0011      	movs	r1, r2
    9df4:	6023      	str	r3, [r4, #0]
    9df6:	f7fb ff27 	bl	5c48 <_fstat>
    9dfa:	1c43      	adds	r3, r0, #1
    9dfc:	d103      	bne.n	9e06 <_fstat_r+0x1e>
    9dfe:	6823      	ldr	r3, [r4, #0]
    9e00:	2b00      	cmp	r3, #0
    9e02:	d000      	beq.n	9e06 <_fstat_r+0x1e>
    9e04:	602b      	str	r3, [r5, #0]
    9e06:	bd70      	pop	{r4, r5, r6, pc}
    9e08:	20000470 	.word	0x20000470

00009e0c <_isatty_r>:
    9e0c:	2300      	movs	r3, #0
    9e0e:	b570      	push	{r4, r5, r6, lr}
    9e10:	4c06      	ldr	r4, [pc, #24]	; (9e2c <_isatty_r+0x20>)
    9e12:	0005      	movs	r5, r0
    9e14:	0008      	movs	r0, r1
    9e16:	6023      	str	r3, [r4, #0]
    9e18:	f7fb ff24 	bl	5c64 <_isatty>
    9e1c:	1c43      	adds	r3, r0, #1
    9e1e:	d103      	bne.n	9e28 <_isatty_r+0x1c>
    9e20:	6823      	ldr	r3, [r4, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d000      	beq.n	9e28 <_isatty_r+0x1c>
    9e26:	602b      	str	r3, [r5, #0]
    9e28:	bd70      	pop	{r4, r5, r6, pc}
    9e2a:	46c0      	nop			; (mov r8, r8)
    9e2c:	20000470 	.word	0x20000470

00009e30 <_lseek_r>:
    9e30:	b570      	push	{r4, r5, r6, lr}
    9e32:	0005      	movs	r5, r0
    9e34:	0008      	movs	r0, r1
    9e36:	0011      	movs	r1, r2
    9e38:	2200      	movs	r2, #0
    9e3a:	4c06      	ldr	r4, [pc, #24]	; (9e54 <_lseek_r+0x24>)
    9e3c:	6022      	str	r2, [r4, #0]
    9e3e:	001a      	movs	r2, r3
    9e40:	f7fb ff19 	bl	5c76 <_lseek>
    9e44:	1c43      	adds	r3, r0, #1
    9e46:	d103      	bne.n	9e50 <_lseek_r+0x20>
    9e48:	6823      	ldr	r3, [r4, #0]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d000      	beq.n	9e50 <_lseek_r+0x20>
    9e4e:	602b      	str	r3, [r5, #0]
    9e50:	bd70      	pop	{r4, r5, r6, pc}
    9e52:	46c0      	nop			; (mov r8, r8)
    9e54:	20000470 	.word	0x20000470

00009e58 <memchr>:
    9e58:	b2c9      	uxtb	r1, r1
    9e5a:	1882      	adds	r2, r0, r2
    9e5c:	4290      	cmp	r0, r2
    9e5e:	d101      	bne.n	9e64 <memchr+0xc>
    9e60:	2000      	movs	r0, #0
    9e62:	4770      	bx	lr
    9e64:	7803      	ldrb	r3, [r0, #0]
    9e66:	428b      	cmp	r3, r1
    9e68:	d0fb      	beq.n	9e62 <memchr+0xa>
    9e6a:	3001      	adds	r0, #1
    9e6c:	e7f6      	b.n	9e5c <memchr+0x4>

00009e6e <__malloc_lock>:
    9e6e:	4770      	bx	lr

00009e70 <__malloc_unlock>:
    9e70:	4770      	bx	lr

00009e72 <_realloc_r>:
    9e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e74:	0007      	movs	r7, r0
    9e76:	000d      	movs	r5, r1
    9e78:	0016      	movs	r6, r2
    9e7a:	2900      	cmp	r1, #0
    9e7c:	d105      	bne.n	9e8a <_realloc_r+0x18>
    9e7e:	0011      	movs	r1, r2
    9e80:	f7fe fed0 	bl	8c24 <_malloc_r>
    9e84:	0004      	movs	r4, r0
    9e86:	0020      	movs	r0, r4
    9e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e8a:	2a00      	cmp	r2, #0
    9e8c:	d103      	bne.n	9e96 <_realloc_r+0x24>
    9e8e:	f7fe fe7f 	bl	8b90 <_free_r>
    9e92:	0034      	movs	r4, r6
    9e94:	e7f7      	b.n	9e86 <_realloc_r+0x14>
    9e96:	f000 f827 	bl	9ee8 <_malloc_usable_size_r>
    9e9a:	002c      	movs	r4, r5
    9e9c:	4286      	cmp	r6, r0
    9e9e:	d9f2      	bls.n	9e86 <_realloc_r+0x14>
    9ea0:	0031      	movs	r1, r6
    9ea2:	0038      	movs	r0, r7
    9ea4:	f7fe febe 	bl	8c24 <_malloc_r>
    9ea8:	1e04      	subs	r4, r0, #0
    9eaa:	d0ec      	beq.n	9e86 <_realloc_r+0x14>
    9eac:	0029      	movs	r1, r5
    9eae:	0032      	movs	r2, r6
    9eb0:	f7fe f8dc 	bl	806c <memcpy>
    9eb4:	0029      	movs	r1, r5
    9eb6:	0038      	movs	r0, r7
    9eb8:	f7fe fe6a 	bl	8b90 <_free_r>
    9ebc:	e7e3      	b.n	9e86 <_realloc_r+0x14>
	...

00009ec0 <_read_r>:
    9ec0:	b570      	push	{r4, r5, r6, lr}
    9ec2:	0005      	movs	r5, r0
    9ec4:	0008      	movs	r0, r1
    9ec6:	0011      	movs	r1, r2
    9ec8:	2200      	movs	r2, #0
    9eca:	4c06      	ldr	r4, [pc, #24]	; (9ee4 <_read_r+0x24>)
    9ecc:	6022      	str	r2, [r4, #0]
    9ece:	001a      	movs	r2, r3
    9ed0:	f7fb fe32 	bl	5b38 <_read>
    9ed4:	1c43      	adds	r3, r0, #1
    9ed6:	d103      	bne.n	9ee0 <_read_r+0x20>
    9ed8:	6823      	ldr	r3, [r4, #0]
    9eda:	2b00      	cmp	r3, #0
    9edc:	d000      	beq.n	9ee0 <_read_r+0x20>
    9ede:	602b      	str	r3, [r5, #0]
    9ee0:	bd70      	pop	{r4, r5, r6, pc}
    9ee2:	46c0      	nop			; (mov r8, r8)
    9ee4:	20000470 	.word	0x20000470

00009ee8 <_malloc_usable_size_r>:
    9ee8:	1f0b      	subs	r3, r1, #4
    9eea:	681b      	ldr	r3, [r3, #0]
    9eec:	1f18      	subs	r0, r3, #4
    9eee:	2b00      	cmp	r3, #0
    9ef0:	da01      	bge.n	9ef6 <_malloc_usable_size_r+0xe>
    9ef2:	580b      	ldr	r3, [r1, r0]
    9ef4:	18c0      	adds	r0, r0, r3
    9ef6:	4770      	bx	lr
    9ef8:	00000002 	.word	0x00000002
    9efc:	00000003 	.word	0x00000003
    9f00:	00000028 	.word	0x00000028
    9f04:	00000029 	.word	0x00000029
    9f08:	00000004 	.word	0x00000004
    9f0c:	00000005 	.word	0x00000005
    9f10:	00000006 	.word	0x00000006
    9f14:	00000007 	.word	0x00000007
    9f18:	0000ffff 	.word	0x0000ffff
    9f1c:	0000ffff 	.word	0x0000ffff
    9f20:	00000022 	.word	0x00000022
    9f24:	00000023 	.word	0x00000023
    9f28:	0000ffff 	.word	0x0000ffff
    9f2c:	0000ffff 	.word	0x0000ffff
    9f30:	0000ffff 	.word	0x0000ffff
    9f34:	0000ffff 	.word	0x0000ffff
    9f38:	00000008 	.word	0x00000008
    9f3c:	00000009 	.word	0x00000009
    9f40:	0000000a 	.word	0x0000000a
    9f44:	0000000b 	.word	0x0000000b
    9f48:	0000062a 	.word	0x0000062a
    9f4c:	00000630 	.word	0x00000630
    9f50:	00000630 	.word	0x00000630
    9f54:	00000630 	.word	0x00000630
    9f58:	00000630 	.word	0x00000630
    9f5c:	00000630 	.word	0x00000630
    9f60:	00000630 	.word	0x00000630
    9f64:	00000630 	.word	0x00000630
    9f68:	00000630 	.word	0x00000630
    9f6c:	00000630 	.word	0x00000630
    9f70:	00000630 	.word	0x00000630
    9f74:	00000630 	.word	0x00000630
    9f78:	00000630 	.word	0x00000630
    9f7c:	00000630 	.word	0x00000630
    9f80:	00000630 	.word	0x00000630
    9f84:	00000630 	.word	0x00000630
    9f88:	00000608 	.word	0x00000608
    9f8c:	00000630 	.word	0x00000630
    9f90:	00000630 	.word	0x00000630
    9f94:	00000630 	.word	0x00000630
    9f98:	00000630 	.word	0x00000630
    9f9c:	00000630 	.word	0x00000630
    9fa0:	00000630 	.word	0x00000630
    9fa4:	00000630 	.word	0x00000630
    9fa8:	00000630 	.word	0x00000630
    9fac:	00000630 	.word	0x00000630
    9fb0:	00000630 	.word	0x00000630
    9fb4:	00000630 	.word	0x00000630
    9fb8:	00000630 	.word	0x00000630
    9fbc:	00000630 	.word	0x00000630
    9fc0:	00000630 	.word	0x00000630
    9fc4:	00000630 	.word	0x00000630
    9fc8:	00000624 	.word	0x00000624
    9fcc:	00000630 	.word	0x00000630
    9fd0:	00000630 	.word	0x00000630
    9fd4:	00000630 	.word	0x00000630
    9fd8:	00000630 	.word	0x00000630
    9fdc:	00000630 	.word	0x00000630
    9fe0:	00000630 	.word	0x00000630
    9fe4:	00000630 	.word	0x00000630
    9fe8:	00000630 	.word	0x00000630
    9fec:	00000630 	.word	0x00000630
    9ff0:	00000630 	.word	0x00000630
    9ff4:	00000630 	.word	0x00000630
    9ff8:	00000630 	.word	0x00000630
    9ffc:	00000630 	.word	0x00000630
    a000:	00000630 	.word	0x00000630
    a004:	00000630 	.word	0x00000630
    a008:	0000061e 	.word	0x0000061e
    a00c:	000005c6 	.word	0x000005c6
    a010:	000005dc 	.word	0x000005dc
    a014:	000005f2 	.word	0x000005f2
    a018:	000005ac 	.word	0x000005ac
    a01c:	706c6568 	.word	0x706c6568
    a020:	00000000 	.word	0x00000000
    a024:	5f726576 	.word	0x5f726576
    a028:	00006c62 	.word	0x00006c62
    a02c:	5f726576 	.word	0x5f726576
    a030:	00707061 	.word	0x00707061
    a034:	6f697067 	.word	0x6f697067
    a038:	7465735f 	.word	0x7465735f
    a03c:	00000000 	.word	0x00000000
    a040:	6f697067 	.word	0x6f697067
    a044:	656c635f 	.word	0x656c635f
    a048:	00007261 	.word	0x00007261
    a04c:	6f697067 	.word	0x6f697067
    a050:	7465675f 	.word	0x7465675f
    a054:	00000000 	.word	0x00000000
    a058:	0063616d 	.word	0x0063616d
    a05c:	00007069 	.word	0x00007069
    a060:	64616572 	.word	0x64616572
    a064:	7279675f 	.word	0x7279675f
    a068:	0000006f 	.word	0x0000006f
    a06c:	64616572 	.word	0x64616572
    a070:	6363615f 	.word	0x6363615f
    a074:	00006c65 	.word	0x00006c65
    a078:	5f746573 	.word	0x5f746573
    a07c:	00746361 	.word	0x00746361
    a080:	61656c63 	.word	0x61656c63
    a084:	63615f72 	.word	0x63615f72
    a088:	00000074 	.word	0x00000074
    a08c:	5f636461 	.word	0x5f636461
    a090:	00746567 	.word	0x00746567
    a094:	5f75636d 	.word	0x5f75636d
    a098:	706d6574 	.word	0x706d6574
    a09c:	00000000 	.word	0x00000000
    a0a0:	5f633269 	.word	0x5f633269
    a0a4:	6e616373 	.word	0x6e616373
	...
    a0b0:	70736944 	.word	0x70736944
    a0b4:	2079616c 	.word	0x2079616c
    a0b8:	206c6c61 	.word	0x206c6c61
    a0bc:	6d6d6f63 	.word	0x6d6d6f63
    a0c0:	73646e61 	.word	0x73646e61
    a0c4:	00000000 	.word	0x00000000
    a0c8:	6e697250 	.word	0x6e697250
    a0cc:	6f622074 	.word	0x6f622074
    a0d0:	6f6c746f 	.word	0x6f6c746f
    a0d4:	72656461 	.word	0x72656461
    a0d8:	72696620 	.word	0x72696620
    a0dc:	7261776d 	.word	0x7261776d
    a0e0:	6e692065 	.word	0x6e692065
    a0e4:	6d726f66 	.word	0x6d726f66
    a0e8:	6f697461 	.word	0x6f697461
    a0ec:	00002e6e 	.word	0x00002e6e
    a0f0:	6e697250 	.word	0x6e697250
    a0f4:	70612074 	.word	0x70612074
    a0f8:	63696c70 	.word	0x63696c70
    a0fc:	6f697461 	.word	0x6f697461
    a100:	6576206e 	.word	0x6576206e
    a104:	6f697372 	.word	0x6f697372
    a108:	6e69206e 	.word	0x6e69206e
    a10c:	6d726f66 	.word	0x6d726f66
    a110:	6f697461 	.word	0x6f697461
    a114:	00002e6e 	.word	0x00002e6e
    a118:	726f705b 	.word	0x726f705b
    a11c:	5b205d74 	.word	0x5b205d74
    a120:	5f6e6970 	.word	0x5f6e6970
    a124:	5d6d756e 	.word	0x5d6d756e
    a128:	00000000 	.word	0x00000000
    a12c:	20746553 	.word	0x20746553
    a130:	4f495047 	.word	0x4f495047
    a134:	6e697020 	.word	0x6e697020
    a138:	20746120 	.word	0x20746120
    a13c:	69672061 	.word	0x69672061
    a140:	206e6576 	.word	0x206e6576
    a144:	74726f70 	.word	0x74726f70
    a148:	67696820 	.word	0x67696820
    a14c:	00002e68 	.word	0x00002e68
    a150:	20746553 	.word	0x20746553
    a154:	4f495047 	.word	0x4f495047
    a158:	6e697020 	.word	0x6e697020
    a15c:	20746120 	.word	0x20746120
    a160:	69672061 	.word	0x69672061
    a164:	206e6576 	.word	0x206e6576
    a168:	74726f70 	.word	0x74726f70
    a16c:	776f6c20 	.word	0x776f6c20
    a170:	0000002e 	.word	0x0000002e
    a174:	20746547 	.word	0x20746547
    a178:	74617473 	.word	0x74617473
    a17c:	666f2065 	.word	0x666f2065
    a180:	47206120 	.word	0x47206120
    a184:	204f4950 	.word	0x204f4950
    a188:	2e6e6970 	.word	0x2e6e6970
    a18c:	746e4528 	.word	0x746e4528
    a190:	42207265 	.word	0x42207265
    a194:	6f203220 	.word	0x6f203220
    a198:	20422072 	.word	0x20422072
    a19c:	00002933 	.word	0x00002933
    a1a0:	6e697250 	.word	0x6e697250
    a1a4:	68742074 	.word	0x68742074
    a1a8:	414d2065 	.word	0x414d2065
    a1ac:	64612043 	.word	0x64612043
    a1b0:	73657264 	.word	0x73657264
    a1b4:	00002e73 	.word	0x00002e73
    a1b8:	6e697250 	.word	0x6e697250
    a1bc:	68742074 	.word	0x68742074
    a1c0:	50492065 	.word	0x50492065
    a1c4:	64644120 	.word	0x64644120
    a1c8:	73736572 	.word	0x73736572
    a1cc:	0000002e 	.word	0x0000002e
    a1d0:	6165725b 	.word	0x6165725b
    a1d4:	676e6964 	.word	0x676e6964
    a1d8:	756f6320 	.word	0x756f6320
    a1dc:	205d746e 	.word	0x205d746e
    a1e0:	746e695b 	.word	0x746e695b
    a1e4:	61767265 	.word	0x61767265
    a1e8:	6e69206c 	.word	0x6e69206c
    a1ec:	5d736d20 	.word	0x5d736d20
    a1f0:	00000000 	.word	0x00000000
    a1f4:	64616552 	.word	0x64616552
    a1f8:	6f726620 	.word	0x6f726620
    a1fc:	6874206d 	.word	0x6874206d
    a200:	79472065 	.word	0x79472065
    a204:	63736f72 	.word	0x63736f72
    a208:	2065706f 	.word	0x2065706f
    a20c:	736e6573 	.word	0x736e6573
    a210:	002e726f 	.word	0x002e726f
    a214:	6e727554 	.word	0x6e727554
    a218:	65687420 	.word	0x65687420
    a21c:	74636120 	.word	0x74636120
    a220:	6f746175 	.word	0x6f746175
    a224:	4c282072 	.word	0x4c282072
    a228:	20294445 	.word	0x20294445
    a22c:	002e6e6f 	.word	0x002e6e6f
    a230:	6e727554 	.word	0x6e727554
    a234:	65687420 	.word	0x65687420
    a238:	74636120 	.word	0x74636120
    a23c:	6f746175 	.word	0x6f746175
    a240:	4c282072 	.word	0x4c282072
    a244:	20294445 	.word	0x20294445
    a248:	2e66666f 	.word	0x2e66666f
    a24c:	00000000 	.word	0x00000000
    a250:	20746547 	.word	0x20746547
    a254:	20656874 	.word	0x20656874
    a258:	20434441 	.word	0x20434441
    a25c:	756c6176 	.word	0x756c6176
    a260:	666f2065 	.word	0x666f2065
    a264:	206e6120 	.word	0x206e6120
    a268:	75706e69 	.word	0x75706e69
    a26c:	69702074 	.word	0x69702074
    a270:	00002e6e 	.word	0x00002e6e
    a274:	6e697250 	.word	0x6e697250
    a278:	68742074 	.word	0x68742074
    a27c:	65742065 	.word	0x65742065
    a280:	7265706d 	.word	0x7265706d
    a284:	72757461 	.word	0x72757461
    a288:	65722065 	.word	0x65722065
    a28c:	6e696461 	.word	0x6e696461
    a290:	666f2067 	.word	0x666f2067
    a294:	65687420 	.word	0x65687420
    a298:	2d6e6f20 	.word	0x2d6e6f20
    a29c:	72616f62 	.word	0x72616f62
    a2a0:	434d2064 	.word	0x434d2064
    a2a4:	65742055 	.word	0x65742055
    a2a8:	7265706d 	.word	0x7265706d
    a2ac:	72757461 	.word	0x72757461
    a2b0:	65732065 	.word	0x65732065
    a2b4:	726f736e 	.word	0x726f736e
    a2b8:	0000002e 	.word	0x0000002e
    a2bc:	00000020 	.word	0x00000020
    a2c0:	20746f4e 	.word	0x20746f4e
    a2c4:	756f6e65 	.word	0x756f6e65
    a2c8:	61206867 	.word	0x61206867
    a2cc:	6d756772 	.word	0x6d756772
    a2d0:	73746e65 	.word	0x73746e65
    a2d4:	72542021 	.word	0x72542021
    a2d8:	68222079 	.word	0x68222079
    a2dc:	22706c65 	.word	0x22706c65
    a2e0:	00000d2e 	.word	0x00000d2e
    a2e4:	00000041 	.word	0x00000041
    a2e8:	00000042 	.word	0x00000042
    a2ec:	65746e45 	.word	0x65746e45
    a2f0:	20612072 	.word	0x20612072
    a2f4:	696c6176 	.word	0x696c6176
    a2f8:	6f502064 	.word	0x6f502064
    a2fc:	20217472 	.word	0x20217472
    a300:	20797254 	.word	0x20797254
    a304:	6c656822 	.word	0x6c656822
    a308:	0d2e2270 	.word	0x0d2e2270
    a30c:	00000000 	.word	0x00000000
    a310:	65746e45 	.word	0x65746e45
    a314:	20612072 	.word	0x20612072
    a318:	696c6176 	.word	0x696c6176
    a31c:	69502064 	.word	0x69502064
    a320:	754e206e 	.word	0x754e206e
    a324:	7265626d 	.word	0x7265626d
    a328:	72542021 	.word	0x72542021
    a32c:	68222079 	.word	0x68222079
    a330:	22706c65 	.word	0x22706c65
    a334:	00000d2e 	.word	0x00000d2e
    a338:	61766e49 	.word	0x61766e49
    a33c:	2064696c 	.word	0x2064696c
    a340:	6d6d6f63 	.word	0x6d6d6f63
    a344:	21646e61 	.word	0x21646e61
    a348:	70795420 	.word	0x70795420
    a34c:	68222065 	.word	0x68222065
    a350:	22706c65 	.word	0x22706c65
    a354:	726f6620 	.word	0x726f6620
    a358:	6c206120 	.word	0x6c206120
    a35c:	20747369 	.word	0x20747369
    a360:	6120666f 	.word	0x6120666f
    a364:	6c696176 	.word	0x6c696176
    a368:	656c6261 	.word	0x656c6261
    a36c:	6d6f6320 	.word	0x6d6f6320
    a370:	646e616d 	.word	0x646e616d
    a374:	000d2e73 	.word	0x000d2e73
    a378:	6d6d6f43 	.word	0x6d6d6f43
    a37c:	20646e61 	.word	0x20646e61
    a380:	7473694c 	.word	0x7473694c
    a384:	00000d3a 	.word	0x00000d3a
    a388:	20732509 	.word	0x20732509
    a38c:	0a0d7325 	.word	0x0a0d7325
    a390:	73250909 	.word	0x73250909
    a394:	00000a0d 	.word	0x00000a0d
    a398:	2e312e30 	.word	0x2e312e30
    a39c:	00000030 	.word	0x00000030
    a3a0:	746f6f42 	.word	0x746f6f42
    a3a4:	64616f6c 	.word	0x64616f6c
    a3a8:	56207265 	.word	0x56207265
    a3ac:	69737265 	.word	0x69737265
    a3b0:	203a6e6f 	.word	0x203a6e6f
    a3b4:	0a0d7325 	.word	0x0a0d7325
    a3b8:	00000000 	.word	0x00000000
    a3bc:	6c707041 	.word	0x6c707041
    a3c0:	74616369 	.word	0x74616369
    a3c4:	206e6f69 	.word	0x206e6f69
    a3c8:	73726556 	.word	0x73726556
    a3cc:	3a6e6f69 	.word	0x3a6e6f69
    a3d0:	0d732520 	.word	0x0d732520
    a3d4:	0000000a 	.word	0x0000000a
    a3d8:	20656854 	.word	0x20656854
    a3dc:	6576656c 	.word	0x6576656c
    a3e0:	6573206c 	.word	0x6573206c
    a3e4:	73692074 	.word	0x73692074
    a3e8:	0d642520 	.word	0x0d642520
    a3ec:	0000000a 	.word	0x0000000a
    a3f0:	323a3130 	.word	0x323a3130
    a3f4:	35343a33 	.word	0x35343a33
    a3f8:	3a37363a 	.word	0x3a37363a
    a3fc:	613a3938 	.word	0x613a3938
    a400:	00000062 	.word	0x00000062
    a404:	2043414d 	.word	0x2043414d
    a408:	72646441 	.word	0x72646441
    a40c:	3a737365 	.word	0x3a737365
    a410:	0d732520 	.word	0x0d732520
    a414:	0000000a 	.word	0x0000000a
    a418:	2e353532 	.word	0x2e353532
    a41c:	2e353532 	.word	0x2e353532
    a420:	2e353532 	.word	0x2e353532
    a424:	00353532 	.word	0x00353532
    a428:	41205049 	.word	0x41205049
    a42c:	65726464 	.word	0x65726464
    a430:	203a7373 	.word	0x203a7373
    a434:	0a0d7325 	.word	0x0a0d7325
    a438:	00000000 	.word	0x00000000
    a43c:	523d3d3d 	.word	0x523d3d3d
    a440:	69646165 	.word	0x69646165
    a444:	2520676e 	.word	0x2520676e
    a448:	3d3d3d64 	.word	0x3d3d3d64
    a44c:	00000a0d 	.word	0x00000a0d
    a450:	3d207841 	.word	0x3d207841
    a454:	0d642520 	.word	0x0d642520
    a458:	2079410a 	.word	0x2079410a
    a45c:	6425203d 	.word	0x6425203d
    a460:	7a410a0d 	.word	0x7a410a0d
    a464:	25203d20 	.word	0x25203d20
    a468:	470a0d64 	.word	0x470a0d64
    a46c:	203d2078 	.word	0x203d2078
    a470:	0a0d6425 	.word	0x0a0d6425
    a474:	3d207947 	.word	0x3d207947
    a478:	0d642520 	.word	0x0d642520
    a47c:	207a470a 	.word	0x207a470a
    a480:	6425203d 	.word	0x6425203d
    a484:	00000a0d 	.word	0x00000a0d
    a488:	20657355 	.word	0x20657355
    a48c:	64616572 	.word	0x64616572
    a490:	7279675f 	.word	0x7279675f
    a494:	000d216f 	.word	0x000d216f
    a498:	20434441 	.word	0x20434441
    a49c:	75736552 	.word	0x75736552
    a4a0:	203a746c 	.word	0x203a746c
    a4a4:	0a0d6425 	.word	0x0a0d6425
    a4a8:	00000000 	.word	0x00000000
    a4ac:	706d6554 	.word	0x706d6554
    a4b0:	74617265 	.word	0x74617265
    a4b4:	20657275 	.word	0x20657275
    a4b8:	75736552 	.word	0x75736552
    a4bc:	203a746c 	.word	0x203a746c
    a4c0:	0d206425 	.word	0x0d206425
    a4c4:	0000000a 	.word	0x0000000a
    a4c8:	72646441 	.word	0x72646441
    a4cc:	20736920 	.word	0x20736920
    a4d0:	0d206425 	.word	0x0d206425
    a4d4:	0000000a 	.word	0x0000000a
    a4d8:	20656854 	.word	0x20656854
    a4dc:	76616c73 	.word	0x76616c73
    a4e0:	64612065 	.word	0x64612065
    a4e4:	73657264 	.word	0x73657264
    a4e8:	73692073 	.word	0x73692073
    a4ec:	322e2520 	.word	0x322e2520
    a4f0:	0a0d2078 	.word	0x0a0d2078
    a4f4:	00000000 	.word	0x00000000
    a4f8:	42000800 	.word	0x42000800
    a4fc:	42000c00 	.word	0x42000c00
    a500:	42001000 	.word	0x42001000
    a504:	42001400 	.word	0x42001400
    a508:	42001800 	.word	0x42001800
    a50c:	42001c00 	.word	0x42001c00
    a510:	0c0b0a09 	.word	0x0c0b0a09
    a514:	00000e0d 	.word	0x00000e0d
    a518:	00004cae 	.word	0x00004cae
    a51c:	00004d26 	.word	0x00004d26
    a520:	00004d26 	.word	0x00004d26
    a524:	00004ccc 	.word	0x00004ccc
    a528:	00004cc6 	.word	0x00004cc6
    a52c:	00004cd2 	.word	0x00004cd2
    a530:	00004cb4 	.word	0x00004cb4
    a534:	00004cd8 	.word	0x00004cd8
    a538:	00004d0c 	.word	0x00004d0c
    a53c:	00004ff0 	.word	0x00004ff0
    a540:	00005040 	.word	0x00005040
    a544:	00005040 	.word	0x00005040
    a548:	0000503c 	.word	0x0000503c
    a54c:	00004fe2 	.word	0x00004fe2
    a550:	00005002 	.word	0x00005002
    a554:	00004fd2 	.word	0x00004fd2
    a558:	00005014 	.word	0x00005014
    a55c:	00005026 	.word	0x00005026
    a560:	0000508e 	.word	0x0000508e
    a564:	000050bc 	.word	0x000050bc
    a568:	000050bc 	.word	0x000050bc
    a56c:	000050b8 	.word	0x000050b8
    a570:	00005088 	.word	0x00005088
    a574:	00005094 	.word	0x00005094
    a578:	00005082 	.word	0x00005082
    a57c:	0000509a 	.word	0x0000509a
    a580:	000050a0 	.word	0x000050a0
    a584:	57202d2d 	.word	0x57202d2d
    a588:	31434e49 	.word	0x31434e49
    a58c:	20303035 	.word	0x20303035
    a590:	70696863 	.word	0x70696863
    a594:	666e6920 	.word	0x666e6920
    a598:	616d726f 	.word	0x616d726f
    a59c:	6e6f6974 	.word	0x6e6f6974
    a5a0:	61786520 	.word	0x61786520
    a5a4:	656c706d 	.word	0x656c706d
    a5a8:	0d2d2d20 	.word	0x0d2d2d20
    a5ac:	202d2d0a 	.word	0x202d2d0a
    a5b0:	574d4153 	.word	0x574d4153
    a5b4:	585f3532 	.word	0x585f3532
    a5b8:	49414c50 	.word	0x49414c50
    a5bc:	5f44454e 	.word	0x5f44454e
    a5c0:	204f5250 	.word	0x204f5250
    a5c4:	0a0d2d2d 	.word	0x0a0d2d2d
    a5c8:	43202d2d 	.word	0x43202d2d
    a5cc:	69706d6f 	.word	0x69706d6f
    a5d0:	3a64656c 	.word	0x3a64656c
    a5d4:	72704120 	.word	0x72704120
    a5d8:	20382020 	.word	0x20382020
    a5dc:	38313032 	.word	0x38313032
    a5e0:	3a303220 	.word	0x3a303220
    a5e4:	313a3334 	.word	0x313a3334
    a5e8:	2d2d2030 	.word	0x2d2d2030
    a5ec:	0000000d 	.word	0x0000000d
    a5f0:	203d3d3d 	.word	0x203d3d3d
    a5f4:	6e6f7244 	.word	0x6e6f7244
    a5f8:	44414465 	.word	0x44414465
    a5fc:	494c4320 	.word	0x494c4320
    a600:	746e4920 	.word	0x746e4920
    a604:	61667265 	.word	0x61667265
    a608:	3d206563 	.word	0x3d206563
    a60c:	000d3d3d 	.word	0x000d3d3d
    a610:	0000203e 	.word	0x0000203e
    a614:	0d5e5b25 	.word	0x0d5e5b25
    a618:	2a255d0a 	.word	0x2a255d0a
    a61c:	00000063 	.word	0x00000063
    a620:	00006f68 	.word	0x00006f68
    a624:	00006f4a 	.word	0x00006f4a
    a628:	00006f04 	.word	0x00006f04
    a62c:	00006e22 	.word	0x00006e22
    a630:	00006f04 	.word	0x00006f04
    a634:	00006f3c 	.word	0x00006f3c
    a638:	00006f04 	.word	0x00006f04
    a63c:	00006e22 	.word	0x00006e22
    a640:	00006f4a 	.word	0x00006f4a
    a644:	00006f4a 	.word	0x00006f4a
    a648:	00006f3c 	.word	0x00006f3c
    a64c:	00006e22 	.word	0x00006e22
    a650:	00006e1a 	.word	0x00006e1a
    a654:	00006e1a 	.word	0x00006e1a
    a658:	00006e1a 	.word	0x00006e1a
    a65c:	00007180 	.word	0x00007180
    a660:	000075c8 	.word	0x000075c8
    a664:	00007488 	.word	0x00007488
    a668:	00007488 	.word	0x00007488
    a66c:	00007484 	.word	0x00007484
    a670:	000075a0 	.word	0x000075a0
    a674:	000075a0 	.word	0x000075a0
    a678:	00007592 	.word	0x00007592
    a67c:	00007484 	.word	0x00007484
    a680:	000075a0 	.word	0x000075a0
    a684:	00007592 	.word	0x00007592
    a688:	000075a0 	.word	0x000075a0
    a68c:	00007484 	.word	0x00007484
    a690:	000075a8 	.word	0x000075a8
    a694:	000075a8 	.word	0x000075a8
    a698:	000075a8 	.word	0x000075a8
    a69c:	000077ac 	.word	0x000077ac

0000a6a0 <_global_impure_ptr>:
    a6a0:	2000006c                                l.. 

0000a6a4 <__sf_fake_stderr>:
	...

0000a6c4 <__sf_fake_stdin>:
	...

0000a6e4 <__sf_fake_stdout>:
	...
    a704:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    a714:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    a724:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    a734:	37363534 62613938 66656463 00000000     456789abcdef....
    a744:	0000a762 0000a765 0000a768 61462d41     b...e...h...A-Fa
    a754:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    a764:	00303000 00005878                                .00.xX.

0000a76b <_ctype_>:
    a76b:	20202000 20202020 28282020 20282828     .         ((((( 
    a77b:	20202020 20202020 20202020 20202020                     
    a78b:	10108820 10101010 10101010 10101010      ...............
    a79b:	04040410 04040404 10040404 10101010     ................
    a7ab:	41411010 41414141 01010101 01010101     ..AAAAAA........
    a7bb:	01010101 01010101 01010101 10101010     ................
    a7cb:	42421010 42424242 02020202 02020202     ..BBBBBB........
    a7db:	02020202 02020202 02020202 10101010     ................
    a7eb:	00000020 00000000 00000000 00000000      ...............
	...

0000a86c <_init>:
    a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a872:	bc08      	pop	{r3}
    a874:	469e      	mov	lr, r3
    a876:	4770      	bx	lr

0000a878 <__init_array_start>:
    a878:	000000dd 	.word	0x000000dd

0000a87c <_fini>:
    a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a87e:	46c0      	nop			; (mov r8, r8)
    a880:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a882:	bc08      	pop	{r3}
    a884:	469e      	mov	lr, r3
    a886:	4770      	bx	lr

0000a888 <__fini_array_start>:
    a888:	000000b5 	.word	0x000000b5
