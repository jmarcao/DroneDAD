
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  00006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f0  20000210  00006f6c  00020210  2**2
                  ALLOC
  3 .stack        00002000  20000400  0000715c  00020210  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ceca  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005569  00000000  00000000  0005d15b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007add  00000000  00000000  000626c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  0006a1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008f0  00000000  00000000  0006a921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000943c  00000000  00000000  0006b211  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011cd7  00000000  00000000  0007464d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e7a7  00000000  00000000  00086324  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020b0  00000000  00000000  00114acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 24 00 20 01 27 00 00 fd 26 00 00 fd 26 00 00     .$. .'...&...&..
	...
      2c:	fd 26 00 00 00 00 00 00 00 00 00 00 fd 26 00 00     .&...........&..
      3c:	fd 26 00 00 fd 26 00 00 fd 26 00 00 fd 26 00 00     .&...&...&...&..
      4c:	fd 26 00 00 ad 14 00 00 fd 26 00 00 fd 26 00 00     .&.......&...&..
      5c:	fd 26 00 00 fd 26 00 00 8d 19 00 00 9d 19 00 00     .&...&..........
      6c:	ad 19 00 00 bd 19 00 00 cd 19 00 00 dd 19 00 00     ................
      7c:	fd 26 00 00 fd 26 00 00 fd 26 00 00 fd 26 00 00     .&...&...&...&..
      8c:	fd 26 00 00 fd 26 00 00 00 00 00 00 00 00 00 00     .&...&..........
      9c:	85 05 00 00 fd 26 00 00 fd 26 00 00 fd 26 00 00     .....&...&...&..
      ac:	fd 26 00 00 00 00 00 00                             .&......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000210 	.word	0x20000210
      d4:	00000000 	.word	0x00000000
      d8:	00006d5c 	.word	0x00006d5c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000214 	.word	0x20000214
     108:	00006d5c 	.word	0x00006d5c
     10c:	00006d5c 	.word	0x00006d5c
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	200002ac 	.word	0x200002ac
     494:	000025a5 	.word	0x000025a5
     498:	00002519 	.word	0x00002519
     49c:	00004601 	.word	0x00004601
     4a0:	00006560 	.word	0x00006560
     4a4:	0000269d 	.word	0x0000269d
     4a8:	0000648c 	.word	0x0000648c
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2e      	ldr	r3, [pc, #184]	; (640 <ADC_Handler+0xbc>)
     588:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     58a:	6823      	ldr	r3, [r4, #0]
     58c:	7e1d      	ldrb	r5, [r3, #24]
     58e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     590:	07ea      	lsls	r2, r5, #31
     592:	d505      	bpl.n	5a0 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     594:	7ee2      	ldrb	r2, [r4, #27]
     596:	07d2      	lsls	r2, r2, #31
     598:	d502      	bpl.n	5a0 <ADC_Handler+0x1c>
     59a:	7ea2      	ldrb	r2, [r4, #26]
     59c:	07d2      	lsls	r2, r2, #31
     59e:	d416      	bmi.n	5ce <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     5a0:	076b      	lsls	r3, r5, #29
     5a2:	d508      	bpl.n	5b6 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5a4:	2304      	movs	r3, #4
     5a6:	6822      	ldr	r2, [r4, #0]
     5a8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5aa:	7ee3      	ldrb	r3, [r4, #27]
     5ac:	079b      	lsls	r3, r3, #30
     5ae:	d502      	bpl.n	5b6 <ADC_Handler+0x32>
     5b0:	7ea3      	ldrb	r3, [r4, #26]
     5b2:	079b      	lsls	r3, r3, #30
     5b4:	d43c      	bmi.n	630 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5b6:	07ab      	lsls	r3, r5, #30
     5b8:	d508      	bpl.n	5cc <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5ba:	2302      	movs	r3, #2
     5bc:	6822      	ldr	r2, [r4, #0]
     5be:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5c0:	7ee3      	ldrb	r3, [r4, #27]
     5c2:	075b      	lsls	r3, r3, #29
     5c4:	d502      	bpl.n	5cc <ADC_Handler+0x48>
     5c6:	7ea3      	ldrb	r3, [r4, #26]
     5c8:	075b      	lsls	r3, r3, #29
     5ca:	d435      	bmi.n	638 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     5cc:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5ce:	2201      	movs	r2, #1
     5d0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5d2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5d4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     5d6:	b25b      	sxtb	r3, r3
     5d8:	2b00      	cmp	r3, #0
     5da:	dbfb      	blt.n	5d4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     5dc:	6961      	ldr	r1, [r4, #20]
     5de:	1c8b      	adds	r3, r1, #2
     5e0:	6163      	str	r3, [r4, #20]
     5e2:	8b53      	ldrh	r3, [r2, #26]
     5e4:	b29b      	uxth	r3, r3
     5e6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     5e8:	8b23      	ldrh	r3, [r4, #24]
     5ea:	3b01      	subs	r3, #1
     5ec:	b29b      	uxth	r3, r3
     5ee:	8323      	strh	r3, [r4, #24]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d011      	beq.n	618 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     5f4:	7f63      	ldrb	r3, [r4, #29]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d0d2      	beq.n	5a0 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5fa:	6822      	ldr	r2, [r4, #0]
     5fc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5fe:	b25b      	sxtb	r3, r3
     600:	2b00      	cmp	r3, #0
     602:	dbfb      	blt.n	5fc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     604:	7b13      	ldrb	r3, [r2, #12]
     606:	2102      	movs	r1, #2
     608:	430b      	orrs	r3, r1
     60a:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     60c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     60e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     610:	b25b      	sxtb	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	dbfb      	blt.n	60e <ADC_Handler+0x8a>
     616:	e7c3      	b.n	5a0 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     618:	7f23      	ldrb	r3, [r4, #28]
     61a:	2b05      	cmp	r3, #5
     61c:	d1c0      	bne.n	5a0 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     61e:	2300      	movs	r3, #0
     620:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     622:	3301      	adds	r3, #1
     624:	6822      	ldr	r2, [r4, #0]
     626:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     628:	0020      	movs	r0, r4
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	4798      	blx	r3
     62e:	e7b7      	b.n	5a0 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     630:	0020      	movs	r0, r4
     632:	68e3      	ldr	r3, [r4, #12]
     634:	4798      	blx	r3
     636:	e7be      	b.n	5b6 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     638:	6923      	ldr	r3, [r4, #16]
     63a:	0020      	movs	r0, r4
     63c:	4798      	blx	r3
}
     63e:	e7c5      	b.n	5cc <ADC_Handler+0x48>
     640:	200002ac 	.word	0x200002ac

00000644 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     644:	b5f0      	push	{r4, r5, r6, r7, lr}
     646:	46d6      	mov	lr, sl
     648:	464f      	mov	r7, r9
     64a:	4646      	mov	r6, r8
     64c:	b5c0      	push	{r6, r7, lr}
     64e:	b08a      	sub	sp, #40	; 0x28
     650:	0006      	movs	r6, r0
     652:	000f      	movs	r7, r1
     654:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     656:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     658:	0008      	movs	r0, r1
     65a:	4ba0      	ldr	r3, [pc, #640]	; (8dc <i2c_master_init+0x298>)
     65c:	4798      	blx	r3
     65e:	4aa0      	ldr	r2, [pc, #640]	; (8e0 <i2c_master_init+0x29c>)
     660:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     662:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     664:	2301      	movs	r3, #1
     666:	40ab      	lsls	r3, r5
     668:	430b      	orrs	r3, r1
     66a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     66c:	a909      	add	r1, sp, #36	; 0x24
     66e:	7b23      	ldrb	r3, [r4, #12]
     670:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     672:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     674:	b2c5      	uxtb	r5, r0
     676:	0028      	movs	r0, r5
     678:	4b9a      	ldr	r3, [pc, #616]	; (8e4 <i2c_master_init+0x2a0>)
     67a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     67c:	0028      	movs	r0, r5
     67e:	4b9a      	ldr	r3, [pc, #616]	; (8e8 <i2c_master_init+0x2a4>)
     680:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     682:	7b20      	ldrb	r0, [r4, #12]
     684:	2100      	movs	r1, #0
     686:	4b99      	ldr	r3, [pc, #612]	; (8ec <i2c_master_init+0x2a8>)
     688:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     68a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     68c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     68e:	079b      	lsls	r3, r3, #30
     690:	d505      	bpl.n	69e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     692:	b00a      	add	sp, #40	; 0x28
     694:	bc1c      	pop	{r2, r3, r4}
     696:	4690      	mov	r8, r2
     698:	4699      	mov	r9, r3
     69a:	46a2      	mov	sl, r4
     69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     69e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     6a0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     6a2:	07db      	lsls	r3, r3, #31
     6a4:	d4f5      	bmi.n	692 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     6a6:	6830      	ldr	r0, [r6, #0]
     6a8:	4b8c      	ldr	r3, [pc, #560]	; (8dc <i2c_master_init+0x298>)
     6aa:	4699      	mov	r9, r3
     6ac:	4798      	blx	r3
     6ae:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     6b0:	498f      	ldr	r1, [pc, #572]	; (8f0 <i2c_master_init+0x2ac>)
     6b2:	4b90      	ldr	r3, [pc, #576]	; (8f4 <i2c_master_init+0x2b0>)
     6b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     6b6:	00ad      	lsls	r5, r5, #2
     6b8:	4b8f      	ldr	r3, [pc, #572]	; (8f8 <i2c_master_init+0x2b4>)
     6ba:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     6bc:	2300      	movs	r3, #0
     6be:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     6c0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     6c2:	2500      	movs	r5, #0
     6c4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     6c6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     6c8:	2225      	movs	r2, #37	; 0x25
     6ca:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     6cc:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     6ce:	3314      	adds	r3, #20
     6d0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6d2:	6833      	ldr	r3, [r6, #0]
     6d4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     6d6:	0018      	movs	r0, r3
     6d8:	47c8      	blx	r9
     6da:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6dc:	2380      	movs	r3, #128	; 0x80
     6de:	aa08      	add	r2, sp, #32
     6e0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6e2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6e4:	2301      	movs	r3, #1
     6e6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     6e8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     6ea:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     6ec:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     6ee:	2800      	cmp	r0, #0
     6f0:	d100      	bne.n	6f4 <i2c_master_init+0xb0>
     6f2:	e0af      	b.n	854 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     6f4:	ab08      	add	r3, sp, #32
     6f6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6f8:	2302      	movs	r3, #2
     6fa:	aa08      	add	r2, sp, #32
     6fc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     6fe:	0c00      	lsrs	r0, r0, #16
     700:	b2c0      	uxtb	r0, r0
     702:	0011      	movs	r1, r2
     704:	4b7d      	ldr	r3, [pc, #500]	; (8fc <i2c_master_init+0x2b8>)
     706:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     708:	2f00      	cmp	r7, #0
     70a:	d100      	bne.n	70e <i2c_master_init+0xca>
     70c:	e0a7      	b.n	85e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     70e:	ab08      	add	r3, sp, #32
     710:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     712:	2302      	movs	r3, #2
     714:	aa08      	add	r2, sp, #32
     716:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     718:	0c3f      	lsrs	r7, r7, #16
     71a:	b2f8      	uxtb	r0, r7
     71c:	0011      	movs	r1, r2
     71e:	4b77      	ldr	r3, [pc, #476]	; (8fc <i2c_master_init+0x2b8>)
     720:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     722:	8aa3      	ldrh	r3, [r4, #20]
     724:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     726:	8ae3      	ldrh	r3, [r4, #22]
     728:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     72a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     72c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     72e:	2b00      	cmp	r3, #0
     730:	d104      	bne.n	73c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     732:	4b73      	ldr	r3, [pc, #460]	; (900 <i2c_master_init+0x2bc>)
     734:	789b      	ldrb	r3, [r3, #2]
     736:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     738:	0fdb      	lsrs	r3, r3, #31
     73a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     73c:	68a1      	ldr	r1, [r4, #8]
     73e:	6923      	ldr	r3, [r4, #16]
     740:	430b      	orrs	r3, r1
     742:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     744:	2224      	movs	r2, #36	; 0x24
     746:	5ca2      	ldrb	r2, [r4, r2]
     748:	2a00      	cmp	r2, #0
     74a:	d002      	beq.n	752 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     74c:	2280      	movs	r2, #128	; 0x80
     74e:	05d2      	lsls	r2, r2, #23
     750:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     752:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     754:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     756:	222c      	movs	r2, #44	; 0x2c
     758:	5ca2      	ldrb	r2, [r4, r2]
     75a:	2a00      	cmp	r2, #0
     75c:	d103      	bne.n	766 <i2c_master_init+0x122>
     75e:	2280      	movs	r2, #128	; 0x80
     760:	0492      	lsls	r2, r2, #18
     762:	4291      	cmp	r1, r2
     764:	d102      	bne.n	76c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     766:	2280      	movs	r2, #128	; 0x80
     768:	0512      	lsls	r2, r2, #20
     76a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     76c:	222d      	movs	r2, #45	; 0x2d
     76e:	5ca2      	ldrb	r2, [r4, r2]
     770:	2a00      	cmp	r2, #0
     772:	d002      	beq.n	77a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     774:	2280      	movs	r2, #128	; 0x80
     776:	0412      	lsls	r2, r2, #16
     778:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     77a:	222e      	movs	r2, #46	; 0x2e
     77c:	5ca2      	ldrb	r2, [r4, r2]
     77e:	2a00      	cmp	r2, #0
     780:	d002      	beq.n	788 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     782:	2280      	movs	r2, #128	; 0x80
     784:	03d2      	lsls	r2, r2, #15
     786:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     788:	4642      	mov	r2, r8
     78a:	6812      	ldr	r2, [r2, #0]
     78c:	4313      	orrs	r3, r2
     78e:	4642      	mov	r2, r8
     790:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     792:	2380      	movs	r3, #128	; 0x80
     794:	005b      	lsls	r3, r3, #1
     796:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     798:	4648      	mov	r0, r9
     79a:	3014      	adds	r0, #20
     79c:	b2c0      	uxtb	r0, r0
     79e:	4b59      	ldr	r3, [pc, #356]	; (904 <i2c_master_init+0x2c0>)
     7a0:	4798      	blx	r3
     7a2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     7a4:	23fa      	movs	r3, #250	; 0xfa
     7a6:	009b      	lsls	r3, r3, #2
     7a8:	6822      	ldr	r2, [r4, #0]
     7aa:	435a      	muls	r2, r3
     7ac:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     7ae:	6863      	ldr	r3, [r4, #4]
     7b0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     7b2:	4d55      	ldr	r5, [pc, #340]	; (908 <i2c_master_init+0x2c4>)
     7b4:	47a8      	blx	r5
     7b6:	9000      	str	r0, [sp, #0]
     7b8:	9101      	str	r1, [sp, #4]
     7ba:	464b      	mov	r3, r9
     7bc:	0058      	lsls	r0, r3, #1
     7be:	47a8      	blx	r5
     7c0:	9002      	str	r0, [sp, #8]
     7c2:	9103      	str	r1, [sp, #12]
     7c4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     7c6:	47a8      	blx	r5
     7c8:	9004      	str	r0, [sp, #16]
     7ca:	9105      	str	r1, [sp, #20]
     7cc:	4f4f      	ldr	r7, [pc, #316]	; (90c <i2c_master_init+0x2c8>)
     7ce:	4a50      	ldr	r2, [pc, #320]	; (910 <i2c_master_init+0x2cc>)
     7d0:	4b50      	ldr	r3, [pc, #320]	; (914 <i2c_master_init+0x2d0>)
     7d2:	9800      	ldr	r0, [sp, #0]
     7d4:	9901      	ldr	r1, [sp, #4]
     7d6:	47b8      	blx	r7
     7d8:	0002      	movs	r2, r0
     7da:	000b      	movs	r3, r1
     7dc:	9804      	ldr	r0, [sp, #16]
     7de:	9905      	ldr	r1, [sp, #20]
     7e0:	47b8      	blx	r7
     7e2:	4e4d      	ldr	r6, [pc, #308]	; (918 <i2c_master_init+0x2d4>)
     7e4:	2200      	movs	r2, #0
     7e6:	4b4d      	ldr	r3, [pc, #308]	; (91c <i2c_master_init+0x2d8>)
     7e8:	47b0      	blx	r6
     7ea:	9004      	str	r0, [sp, #16]
     7ec:	9105      	str	r1, [sp, #20]
     7ee:	4648      	mov	r0, r9
     7f0:	47a8      	blx	r5
     7f2:	0002      	movs	r2, r0
     7f4:	000b      	movs	r3, r1
     7f6:	9804      	ldr	r0, [sp, #16]
     7f8:	9905      	ldr	r1, [sp, #20]
     7fa:	47b8      	blx	r7
     7fc:	0002      	movs	r2, r0
     7fe:	000b      	movs	r3, r1
     800:	4d47      	ldr	r5, [pc, #284]	; (920 <i2c_master_init+0x2dc>)
     802:	9800      	ldr	r0, [sp, #0]
     804:	9901      	ldr	r1, [sp, #4]
     806:	47a8      	blx	r5
     808:	9a02      	ldr	r2, [sp, #8]
     80a:	9b03      	ldr	r3, [sp, #12]
     80c:	47b0      	blx	r6
     80e:	2200      	movs	r2, #0
     810:	4b44      	ldr	r3, [pc, #272]	; (924 <i2c_master_init+0x2e0>)
     812:	47a8      	blx	r5
     814:	9a02      	ldr	r2, [sp, #8]
     816:	9b03      	ldr	r3, [sp, #12]
     818:	4d43      	ldr	r5, [pc, #268]	; (928 <i2c_master_init+0x2e4>)
     81a:	47a8      	blx	r5
     81c:	4b43      	ldr	r3, [pc, #268]	; (92c <i2c_master_init+0x2e8>)
     81e:	4798      	blx	r3
     820:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     822:	2380      	movs	r3, #128	; 0x80
     824:	049b      	lsls	r3, r3, #18
     826:	68a2      	ldr	r2, [r4, #8]
     828:	429a      	cmp	r2, r3
     82a:	d01e      	beq.n	86a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     82c:	0003      	movs	r3, r0
     82e:	2040      	movs	r0, #64	; 0x40
     830:	2dff      	cmp	r5, #255	; 0xff
     832:	d900      	bls.n	836 <i2c_master_init+0x1f2>
     834:	e72d      	b.n	692 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     836:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     838:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     83a:	25ff      	movs	r5, #255	; 0xff
     83c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     83e:	0624      	lsls	r4, r4, #24
     840:	4325      	orrs	r5, r4
     842:	0400      	lsls	r0, r0, #16
     844:	23ff      	movs	r3, #255	; 0xff
     846:	041b      	lsls	r3, r3, #16
     848:	4018      	ands	r0, r3
     84a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     84c:	4643      	mov	r3, r8
     84e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     850:	2000      	movs	r0, #0
     852:	e71e      	b.n	692 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     854:	2100      	movs	r1, #0
     856:	4640      	mov	r0, r8
     858:	4b35      	ldr	r3, [pc, #212]	; (930 <i2c_master_init+0x2ec>)
     85a:	4798      	blx	r3
     85c:	e74a      	b.n	6f4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     85e:	2101      	movs	r1, #1
     860:	4640      	mov	r0, r8
     862:	4b33      	ldr	r3, [pc, #204]	; (930 <i2c_master_init+0x2ec>)
     864:	4798      	blx	r3
     866:	0007      	movs	r7, r0
     868:	e751      	b.n	70e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     86a:	26fa      	movs	r6, #250	; 0xfa
     86c:	00b6      	lsls	r6, r6, #2
     86e:	4653      	mov	r3, sl
     870:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     872:	9800      	ldr	r0, [sp, #0]
     874:	9901      	ldr	r1, [sp, #4]
     876:	0002      	movs	r2, r0
     878:	000b      	movs	r3, r1
     87a:	4c27      	ldr	r4, [pc, #156]	; (918 <i2c_master_init+0x2d4>)
     87c:	47a0      	blx	r4
     87e:	9000      	str	r0, [sp, #0]
     880:	9101      	str	r1, [sp, #4]
     882:	0030      	movs	r0, r6
     884:	4b20      	ldr	r3, [pc, #128]	; (908 <i2c_master_init+0x2c4>)
     886:	4798      	blx	r3
     888:	2200      	movs	r2, #0
     88a:	4b2a      	ldr	r3, [pc, #168]	; (934 <i2c_master_init+0x2f0>)
     88c:	47b8      	blx	r7
     88e:	0002      	movs	r2, r0
     890:	000b      	movs	r3, r1
     892:	9800      	ldr	r0, [sp, #0]
     894:	9901      	ldr	r1, [sp, #4]
     896:	4c24      	ldr	r4, [pc, #144]	; (928 <i2c_master_init+0x2e4>)
     898:	47a0      	blx	r4
     89a:	2200      	movs	r2, #0
     89c:	4b21      	ldr	r3, [pc, #132]	; (924 <i2c_master_init+0x2e0>)
     89e:	4c20      	ldr	r4, [pc, #128]	; (920 <i2c_master_init+0x2dc>)
     8a0:	47a0      	blx	r4
     8a2:	4b22      	ldr	r3, [pc, #136]	; (92c <i2c_master_init+0x2e8>)
     8a4:	4798      	blx	r3
     8a6:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     8a8:	d00c      	beq.n	8c4 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     8aa:	0031      	movs	r1, r6
     8ac:	9807      	ldr	r0, [sp, #28]
     8ae:	4b22      	ldr	r3, [pc, #136]	; (938 <i2c_master_init+0x2f4>)
     8b0:	4798      	blx	r3
     8b2:	3802      	subs	r0, #2
     8b4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8b6:	002b      	movs	r3, r5
     8b8:	2dff      	cmp	r5, #255	; 0xff
     8ba:	d80c      	bhi.n	8d6 <i2c_master_init+0x292>
     8bc:	28ff      	cmp	r0, #255	; 0xff
     8be:	d9bc      	bls.n	83a <i2c_master_init+0x1f6>
     8c0:	2040      	movs	r0, #64	; 0x40
     8c2:	e6e6      	b.n	692 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     8c4:	0071      	lsls	r1, r6, #1
     8c6:	1e48      	subs	r0, r1, #1
     8c8:	9b07      	ldr	r3, [sp, #28]
     8ca:	469c      	mov	ip, r3
     8cc:	4460      	add	r0, ip
     8ce:	4b1a      	ldr	r3, [pc, #104]	; (938 <i2c_master_init+0x2f4>)
     8d0:	4798      	blx	r3
     8d2:	3801      	subs	r0, #1
     8d4:	e7ef      	b.n	8b6 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8d6:	2040      	movs	r0, #64	; 0x40
     8d8:	e6db      	b.n	692 <i2c_master_init+0x4e>
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	000018e5 	.word	0x000018e5
     8e0:	40000400 	.word	0x40000400
     8e4:	000025a5 	.word	0x000025a5
     8e8:	00002519 	.word	0x00002519
     8ec:	00001721 	.word	0x00001721
     8f0:	00000a0d 	.word	0x00000a0d
     8f4:	00001921 	.word	0x00001921
     8f8:	200003b8 	.word	0x200003b8
     8fc:	0000269d 	.word	0x0000269d
     900:	41002000 	.word	0x41002000
     904:	000025c1 	.word	0x000025c1
     908:	00004501 	.word	0x00004501
     90c:	0000396d 	.word	0x0000396d
     910:	e826d695 	.word	0xe826d695
     914:	3e112e0b 	.word	0x3e112e0b
     918:	00002ce5 	.word	0x00002ce5
     91c:	40240000 	.word	0x40240000
     920:	00003e6d 	.word	0x00003e6d
     924:	3ff00000 	.word	0x3ff00000
     928:	00003305 	.word	0x00003305
     92c:	00004499 	.word	0x00004499
     930:	0000176d 	.word	0x0000176d
     934:	40080000 	.word	0x40080000
     938:	00002b79 	.word	0x00002b79

0000093c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     93c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     93e:	2207      	movs	r2, #7
     940:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     942:	421a      	tst	r2, r3
     944:	d1fc      	bne.n	940 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     946:	4770      	bx	lr

00000948 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     94c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     94e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     950:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     952:	8b83      	ldrh	r3, [r0, #28]
     954:	1aed      	subs	r5, r5, r3
     956:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     958:	8b83      	ldrh	r3, [r0, #28]
     95a:	3b01      	subs	r3, #1
     95c:	b29b      	uxth	r3, r3
     95e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     960:	0113      	lsls	r3, r2, #4
     962:	d51d      	bpl.n	9a0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     964:	7ac3      	ldrb	r3, [r0, #11]
     966:	2b00      	cmp	r3, #0
     968:	d003      	beq.n	972 <_i2c_master_read+0x2a>
     96a:	8b83      	ldrh	r3, [r0, #28]
     96c:	b29b      	uxth	r3, r3
     96e:	2b01      	cmp	r3, #1
     970:	d010      	beq.n	994 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     972:	8ba3      	ldrh	r3, [r4, #28]
     974:	b29b      	uxth	r3, r3
     976:	2b00      	cmp	r3, #0
     978:	d102      	bne.n	980 <_i2c_master_read+0x38>
		if (module->send_stop) {
     97a:	7aa3      	ldrb	r3, [r4, #10]
     97c:	2b00      	cmp	r3, #0
     97e:	d11c      	bne.n	9ba <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     980:	0020      	movs	r0, r4
     982:	4b12      	ldr	r3, [pc, #72]	; (9cc <_i2c_master_read+0x84>)
     984:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     986:	6a23      	ldr	r3, [r4, #32]
     988:	195d      	adds	r5, r3, r5
     98a:	2328      	movs	r3, #40	; 0x28
     98c:	5cf3      	ldrb	r3, [r6, r3]
     98e:	b2db      	uxtb	r3, r3
     990:	702b      	strb	r3, [r5, #0]
}
     992:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     994:	6872      	ldr	r2, [r6, #4]
     996:	2380      	movs	r3, #128	; 0x80
     998:	02db      	lsls	r3, r3, #11
     99a:	4313      	orrs	r3, r2
     99c:	6073      	str	r3, [r6, #4]
     99e:	e7e8      	b.n	972 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     9a0:	7ac3      	ldrb	r3, [r0, #11]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d0e5      	beq.n	972 <_i2c_master_read+0x2a>
     9a6:	8b83      	ldrh	r3, [r0, #28]
     9a8:	b29b      	uxth	r3, r3
     9aa:	2b00      	cmp	r3, #0
     9ac:	d1e1      	bne.n	972 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9ae:	6872      	ldr	r2, [r6, #4]
     9b0:	2380      	movs	r3, #128	; 0x80
     9b2:	02db      	lsls	r3, r3, #11
     9b4:	4313      	orrs	r3, r2
     9b6:	6073      	str	r3, [r6, #4]
     9b8:	e7db      	b.n	972 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     9ba:	0020      	movs	r0, r4
     9bc:	4b03      	ldr	r3, [pc, #12]	; (9cc <_i2c_master_read+0x84>)
     9be:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9c0:	6872      	ldr	r2, [r6, #4]
     9c2:	23c0      	movs	r3, #192	; 0xc0
     9c4:	029b      	lsls	r3, r3, #10
     9c6:	4313      	orrs	r3, r2
     9c8:	6073      	str	r3, [r6, #4]
     9ca:	e7d9      	b.n	980 <_i2c_master_read+0x38>
     9cc:	0000093d 	.word	0x0000093d

000009d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     9d0:	b570      	push	{r4, r5, r6, lr}
     9d2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9d4:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     9d6:	8b6b      	ldrh	r3, [r5, #26]
     9d8:	075b      	lsls	r3, r3, #29
     9da:	d503      	bpl.n	9e4 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     9dc:	221e      	movs	r2, #30
     9de:	2325      	movs	r3, #37	; 0x25
     9e0:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     9e4:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     9e6:	8b83      	ldrh	r3, [r0, #28]
     9e8:	1af6      	subs	r6, r6, r3
     9ea:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     9ec:	8b83      	ldrh	r3, [r0, #28]
     9ee:	3b01      	subs	r3, #1
     9f0:	b29b      	uxth	r3, r3
     9f2:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <_i2c_master_write+0x38>)
     9f6:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     9f8:	6a23      	ldr	r3, [r4, #32]
     9fa:	199e      	adds	r6, r3, r6
     9fc:	7833      	ldrb	r3, [r6, #0]
     9fe:	b2db      	uxtb	r3, r3
     a00:	2228      	movs	r2, #40	; 0x28
     a02:	54ab      	strb	r3, [r5, r2]
     a04:	e7ed      	b.n	9e2 <_i2c_master_write+0x12>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	0000093d 	.word	0x0000093d

00000a0c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     a0c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     a0e:	0080      	lsls	r0, r0, #2
     a10:	4b75      	ldr	r3, [pc, #468]	; (be8 <_i2c_master_interrupt_handler+0x1dc>)
     a12:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a14:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     a16:	682b      	ldr	r3, [r5, #0]
     a18:	011b      	lsls	r3, r3, #4
     a1a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     a1c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     a1e:	7e26      	ldrb	r6, [r4, #24]
     a20:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     a22:	8b63      	ldrh	r3, [r4, #26]
     a24:	b29b      	uxth	r3, r3
     a26:	2b00      	cmp	r3, #0
     a28:	d103      	bne.n	a32 <_i2c_master_interrupt_handler+0x26>
     a2a:	8ba3      	ldrh	r3, [r4, #28]
     a2c:	b29b      	uxth	r3, r3
     a2e:	2b00      	cmp	r3, #0
     a30:	d123      	bne.n	a7a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a32:	8b63      	ldrh	r3, [r4, #26]
     a34:	b29b      	uxth	r3, r3
     a36:	2b00      	cmp	r3, #0
     a38:	d008      	beq.n	a4c <_i2c_master_interrupt_handler+0x40>
     a3a:	8ba3      	ldrh	r3, [r4, #28]
     a3c:	b29b      	uxth	r3, r3
     a3e:	2b00      	cmp	r3, #0
     a40:	d104      	bne.n	a4c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     a42:	3325      	adds	r3, #37	; 0x25
     a44:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a46:	2b05      	cmp	r3, #5
     a48:	d100      	bne.n	a4c <_i2c_master_interrupt_handler+0x40>
     a4a:	e06d      	b.n	b28 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     a4c:	8b63      	ldrh	r3, [r4, #26]
     a4e:	b29b      	uxth	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d024      	beq.n	a9e <_i2c_master_interrupt_handler+0x92>
     a54:	8ba3      	ldrh	r3, [r4, #28]
     a56:	b29b      	uxth	r3, r3
     a58:	2b00      	cmp	r3, #0
     a5a:	d020      	beq.n	a9e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     a5c:	8b6b      	ldrh	r3, [r5, #26]
     a5e:	069b      	lsls	r3, r3, #26
     a60:	d500      	bpl.n	a64 <_i2c_master_interrupt_handler+0x58>
     a62:	e081      	b.n	b68 <_i2c_master_interrupt_handler+0x15c>
     a64:	2a00      	cmp	r2, #0
     a66:	d004      	beq.n	a72 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     a68:	8ba3      	ldrh	r3, [r4, #28]
     a6a:	b29b      	uxth	r3, r3
     a6c:	2b01      	cmp	r3, #1
     a6e:	d100      	bne.n	a72 <_i2c_master_interrupt_handler+0x66>
     a70:	e07a      	b.n	b68 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     a72:	2241      	movs	r2, #65	; 0x41
     a74:	2325      	movs	r3, #37	; 0x25
     a76:	54e2      	strb	r2, [r4, r3]
     a78:	e011      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     a7a:	7e2b      	ldrb	r3, [r5, #24]
     a7c:	07db      	lsls	r3, r3, #31
     a7e:	d507      	bpl.n	a90 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     a80:	2301      	movs	r3, #1
     a82:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     a84:	8b6b      	ldrh	r3, [r5, #26]
     a86:	079b      	lsls	r3, r3, #30
     a88:	d52e      	bpl.n	ae8 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     a8a:	2241      	movs	r2, #65	; 0x41
     a8c:	2325      	movs	r3, #37	; 0x25
     a8e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     a90:	8ba3      	ldrh	r3, [r4, #28]
     a92:	b29b      	uxth	r3, r3
     a94:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     a96:	2325      	movs	r3, #37	; 0x25
     a98:	5ce3      	ldrb	r3, [r4, r3]
     a9a:	2b05      	cmp	r3, #5
     a9c:	d038      	beq.n	b10 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a9e:	8b63      	ldrh	r3, [r4, #26]
     aa0:	b29b      	uxth	r3, r3
     aa2:	2b00      	cmp	r3, #0
     aa4:	d007      	beq.n	ab6 <_i2c_master_interrupt_handler+0xaa>
     aa6:	8ba3      	ldrh	r3, [r4, #28]
     aa8:	b29b      	uxth	r3, r3
     aaa:	2b00      	cmp	r3, #0
     aac:	d103      	bne.n	ab6 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     aae:	3325      	adds	r3, #37	; 0x25
     ab0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ab2:	2b05      	cmp	r3, #5
     ab4:	d064      	beq.n	b80 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     ab6:	2325      	movs	r3, #37	; 0x25
     ab8:	5ce3      	ldrb	r3, [r4, r3]
     aba:	2b05      	cmp	r3, #5
     abc:	d013      	beq.n	ae6 <_i2c_master_interrupt_handler+0xda>
     abe:	2325      	movs	r3, #37	; 0x25
     ac0:	5ce3      	ldrb	r3, [r4, r3]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d00f      	beq.n	ae6 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     ac6:	2303      	movs	r3, #3
     ac8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     aca:	2300      	movs	r3, #0
     acc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     ace:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     ad0:	3325      	adds	r3, #37	; 0x25
     ad2:	5ce3      	ldrb	r3, [r4, r3]
     ad4:	2b41      	cmp	r3, #65	; 0x41
     ad6:	d003      	beq.n	ae0 <_i2c_master_interrupt_handler+0xd4>
     ad8:	7aa3      	ldrb	r3, [r4, #10]
     ada:	2b00      	cmp	r3, #0
     adc:	d000      	beq.n	ae0 <_i2c_master_interrupt_handler+0xd4>
     ade:	e075      	b.n	bcc <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     ae0:	0773      	lsls	r3, r6, #29
     ae2:	d500      	bpl.n	ae6 <_i2c_master_interrupt_handler+0xda>
     ae4:	e07b      	b.n	bde <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     ae6:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     ae8:	8b6b      	ldrh	r3, [r5, #26]
     aea:	075b      	lsls	r3, r3, #29
     aec:	d5d0      	bpl.n	a90 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     aee:	2218      	movs	r2, #24
     af0:	2325      	movs	r3, #37	; 0x25
     af2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     af4:	2300      	movs	r3, #0
     af6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     af8:	7aa3      	ldrb	r3, [r4, #10]
     afa:	2b00      	cmp	r3, #0
     afc:	d0c8      	beq.n	a90 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     afe:	0020      	movs	r0, r4
     b00:	4b3a      	ldr	r3, [pc, #232]	; (bec <_i2c_master_interrupt_handler+0x1e0>)
     b02:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b04:	686a      	ldr	r2, [r5, #4]
     b06:	23c0      	movs	r3, #192	; 0xc0
     b08:	029b      	lsls	r3, r3, #10
     b0a:	4313      	orrs	r3, r2
     b0c:	606b      	str	r3, [r5, #4]
     b0e:	e7bf      	b.n	a90 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     b10:	331f      	adds	r3, #31
     b12:	5ce3      	ldrb	r3, [r4, r3]
     b14:	2b00      	cmp	r3, #0
     b16:	d003      	beq.n	b20 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     b18:	0020      	movs	r0, r4
     b1a:	4b35      	ldr	r3, [pc, #212]	; (bf0 <_i2c_master_interrupt_handler+0x1e4>)
     b1c:	4798      	blx	r3
     b1e:	e7be      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     b20:	0020      	movs	r0, r4
     b22:	4b34      	ldr	r3, [pc, #208]	; (bf4 <_i2c_master_interrupt_handler+0x1e8>)
     b24:	4798      	blx	r3
     b26:	e7ba      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     b28:	331f      	adds	r3, #31
     b2a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     b2c:	2b00      	cmp	r3, #0
     b2e:	d000      	beq.n	b32 <_i2c_master_interrupt_handler+0x126>
     b30:	e78c      	b.n	a4c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     b32:	3303      	adds	r3, #3
     b34:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     b36:	2300      	movs	r3, #0
     b38:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     b3a:	3325      	adds	r3, #37	; 0x25
     b3c:	2200      	movs	r2, #0
     b3e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     b40:	7aa3      	ldrb	r3, [r4, #10]
     b42:	2b00      	cmp	r3, #0
     b44:	d107      	bne.n	b56 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     b46:	2301      	movs	r3, #1
     b48:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     b4a:	07f3      	lsls	r3, r6, #31
     b4c:	d5a7      	bpl.n	a9e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     b4e:	68e3      	ldr	r3, [r4, #12]
     b50:	0020      	movs	r0, r4
     b52:	4798      	blx	r3
     b54:	e7a3      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     b56:	0020      	movs	r0, r4
     b58:	4b24      	ldr	r3, [pc, #144]	; (bec <_i2c_master_interrupt_handler+0x1e0>)
     b5a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b5c:	686a      	ldr	r2, [r5, #4]
     b5e:	23c0      	movs	r3, #192	; 0xc0
     b60:	029b      	lsls	r3, r3, #10
     b62:	4313      	orrs	r3, r2
     b64:	606b      	str	r3, [r5, #4]
     b66:	e7f0      	b.n	b4a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     b68:	2324      	movs	r3, #36	; 0x24
     b6a:	5ce3      	ldrb	r3, [r4, r3]
     b6c:	2b00      	cmp	r3, #0
     b6e:	d103      	bne.n	b78 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     b70:	0020      	movs	r0, r4
     b72:	4b20      	ldr	r3, [pc, #128]	; (bf4 <_i2c_master_interrupt_handler+0x1e8>)
     b74:	4798      	blx	r3
     b76:	e792      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     b78:	0020      	movs	r0, r4
     b7a:	4b1d      	ldr	r3, [pc, #116]	; (bf0 <_i2c_master_interrupt_handler+0x1e4>)
     b7c:	4798      	blx	r3
     b7e:	e78e      	b.n	a9e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     b80:	331f      	adds	r3, #31
     b82:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     b84:	2b01      	cmp	r3, #1
     b86:	d196      	bne.n	ab6 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b88:	7e2b      	ldrb	r3, [r5, #24]
     b8a:	079b      	lsls	r3, r3, #30
     b8c:	d501      	bpl.n	b92 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b8e:	2302      	movs	r3, #2
     b90:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     b92:	2303      	movs	r3, #3
     b94:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     b96:	2300      	movs	r3, #0
     b98:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     b9a:	3325      	adds	r3, #37	; 0x25
     b9c:	2200      	movs	r2, #0
     b9e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ba0:	07b3      	lsls	r3, r6, #30
     ba2:	d503      	bpl.n	bac <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ba4:	2324      	movs	r3, #36	; 0x24
     ba6:	5ce3      	ldrb	r3, [r4, r3]
     ba8:	2b01      	cmp	r3, #1
     baa:	d00b      	beq.n	bc4 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     bac:	07f3      	lsls	r3, r6, #31
     bae:	d400      	bmi.n	bb2 <_i2c_master_interrupt_handler+0x1a6>
     bb0:	e781      	b.n	ab6 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     bb2:	2324      	movs	r3, #36	; 0x24
     bb4:	5ce3      	ldrb	r3, [r4, r3]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d000      	beq.n	bbc <_i2c_master_interrupt_handler+0x1b0>
     bba:	e77c      	b.n	ab6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     bbc:	68e3      	ldr	r3, [r4, #12]
     bbe:	0020      	movs	r0, r4
     bc0:	4798      	blx	r3
     bc2:	e778      	b.n	ab6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     bc4:	6923      	ldr	r3, [r4, #16]
     bc6:	0020      	movs	r0, r4
     bc8:	4798      	blx	r3
     bca:	e774      	b.n	ab6 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     bcc:	0020      	movs	r0, r4
     bce:	4b07      	ldr	r3, [pc, #28]	; (bec <_i2c_master_interrupt_handler+0x1e0>)
     bd0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     bd2:	686a      	ldr	r2, [r5, #4]
     bd4:	23e0      	movs	r3, #224	; 0xe0
     bd6:	02db      	lsls	r3, r3, #11
     bd8:	4313      	orrs	r3, r2
     bda:	606b      	str	r3, [r5, #4]
     bdc:	e780      	b.n	ae0 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     bde:	6963      	ldr	r3, [r4, #20]
     be0:	0020      	movs	r0, r4
     be2:	4798      	blx	r3
}
     be4:	e77f      	b.n	ae6 <_i2c_master_interrupt_handler+0xda>
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	200003b8 	.word	0x200003b8
     bec:	0000093d 	.word	0x0000093d
     bf0:	00000949 	.word	0x00000949
     bf4:	000009d1 	.word	0x000009d1

00000bf8 <init_cmd_list>:
const char* CMD_I2C_SCAN = "i2c_scan";

extern struct adc_module adc_inst;
extern struct i2c_master_module i2c_master_instance;

void init_cmd_list() {
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	46de      	mov	lr, fp
     bfc:	4657      	mov	r7, sl
     bfe:	464e      	mov	r6, r9
     c00:	4645      	mov	r5, r8
     c02:	b5e0      	push	{r5, r6, r7, lr}
     c04:	b085      	sub	sp, #20
	cmd_list = (struct option_list) {
     c06:	4b37      	ldr	r3, [pc, #220]	; (ce4 <init_cmd_list+0xec>)
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	469a      	mov	sl, r3
     c0c:	4b36      	ldr	r3, [pc, #216]	; (ce8 <init_cmd_list+0xf0>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	4699      	mov	r9, r3
     c12:	4b36      	ldr	r3, [pc, #216]	; (cec <init_cmd_list+0xf4>)
     c14:	6819      	ldr	r1, [r3, #0]
     c16:	4b36      	ldr	r3, [pc, #216]	; (cf0 <init_cmd_list+0xf8>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	469c      	mov	ip, r3
     c1c:	4b35      	ldr	r3, [pc, #212]	; (cf4 <init_cmd_list+0xfc>)
     c1e:	681f      	ldr	r7, [r3, #0]
     c20:	4b35      	ldr	r3, [pc, #212]	; (cf8 <init_cmd_list+0x100>)
     c22:	681e      	ldr	r6, [r3, #0]
     c24:	4b35      	ldr	r3, [pc, #212]	; (cfc <init_cmd_list+0x104>)
     c26:	681d      	ldr	r5, [r3, #0]
     c28:	4b35      	ldr	r3, [pc, #212]	; (d00 <init_cmd_list+0x108>)
     c2a:	681c      	ldr	r4, [r3, #0]
     c2c:	9401      	str	r4, [sp, #4]
     c2e:	4b35      	ldr	r3, [pc, #212]	; (d04 <init_cmd_list+0x10c>)
     c30:	6818      	ldr	r0, [r3, #0]
     c32:	4b35      	ldr	r3, [pc, #212]	; (d08 <init_cmd_list+0x110>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	4698      	mov	r8, r3
     c38:	4b34      	ldr	r3, [pc, #208]	; (d0c <init_cmd_list+0x114>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	9302      	str	r3, [sp, #8]
     c3e:	4b34      	ldr	r3, [pc, #208]	; (d10 <init_cmd_list+0x118>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	9203      	str	r2, [sp, #12]
     c44:	4b33      	ldr	r3, [pc, #204]	; (d14 <init_cmd_list+0x11c>)
     c46:	4a34      	ldr	r2, [pc, #208]	; (d18 <init_cmd_list+0x120>)
     c48:	6812      	ldr	r2, [r2, #0]
     c4a:	601a      	str	r2, [r3, #0]
     c4c:	4a33      	ldr	r2, [pc, #204]	; (d1c <init_cmd_list+0x124>)
     c4e:	605a      	str	r2, [r3, #4]
     c50:	4c33      	ldr	r4, [pc, #204]	; (d20 <init_cmd_list+0x128>)
     c52:	609c      	str	r4, [r3, #8]
     c54:	4654      	mov	r4, sl
     c56:	60dc      	str	r4, [r3, #12]
     c58:	611a      	str	r2, [r3, #16]
     c5a:	4c32      	ldr	r4, [pc, #200]	; (d24 <init_cmd_list+0x12c>)
     c5c:	615c      	str	r4, [r3, #20]
     c5e:	464c      	mov	r4, r9
     c60:	619c      	str	r4, [r3, #24]
     c62:	61da      	str	r2, [r3, #28]
     c64:	4c30      	ldr	r4, [pc, #192]	; (d28 <init_cmd_list+0x130>)
     c66:	621c      	str	r4, [r3, #32]
     c68:	6259      	str	r1, [r3, #36]	; 0x24
     c6a:	4930      	ldr	r1, [pc, #192]	; (d2c <init_cmd_list+0x134>)
     c6c:	6299      	str	r1, [r3, #40]	; 0x28
     c6e:	4c30      	ldr	r4, [pc, #192]	; (d30 <init_cmd_list+0x138>)
     c70:	62dc      	str	r4, [r3, #44]	; 0x2c
     c72:	4664      	mov	r4, ip
     c74:	631c      	str	r4, [r3, #48]	; 0x30
     c76:	6359      	str	r1, [r3, #52]	; 0x34
     c78:	4c2e      	ldr	r4, [pc, #184]	; (d34 <init_cmd_list+0x13c>)
     c7a:	639c      	str	r4, [r3, #56]	; 0x38
     c7c:	63df      	str	r7, [r3, #60]	; 0x3c
     c7e:	6419      	str	r1, [r3, #64]	; 0x40
     c80:	4f2d      	ldr	r7, [pc, #180]	; (d38 <init_cmd_list+0x140>)
     c82:	645f      	str	r7, [r3, #68]	; 0x44
     c84:	649e      	str	r6, [r3, #72]	; 0x48
     c86:	64da      	str	r2, [r3, #76]	; 0x4c
     c88:	4e2c      	ldr	r6, [pc, #176]	; (d3c <init_cmd_list+0x144>)
     c8a:	651e      	str	r6, [r3, #80]	; 0x50
     c8c:	655d      	str	r5, [r3, #84]	; 0x54
     c8e:	659a      	str	r2, [r3, #88]	; 0x58
     c90:	4d2b      	ldr	r5, [pc, #172]	; (d40 <init_cmd_list+0x148>)
     c92:	65dd      	str	r5, [r3, #92]	; 0x5c
     c94:	9c01      	ldr	r4, [sp, #4]
     c96:	661c      	str	r4, [r3, #96]	; 0x60
     c98:	4c2a      	ldr	r4, [pc, #168]	; (d44 <init_cmd_list+0x14c>)
     c9a:	665c      	str	r4, [r3, #100]	; 0x64
     c9c:	4d2a      	ldr	r5, [pc, #168]	; (d48 <init_cmd_list+0x150>)
     c9e:	669d      	str	r5, [r3, #104]	; 0x68
     ca0:	66d8      	str	r0, [r3, #108]	; 0x6c
     ca2:	671c      	str	r4, [r3, #112]	; 0x70
     ca4:	4829      	ldr	r0, [pc, #164]	; (d4c <init_cmd_list+0x154>)
     ca6:	6758      	str	r0, [r3, #116]	; 0x74
     ca8:	4644      	mov	r4, r8
     caa:	679c      	str	r4, [r3, #120]	; 0x78
     cac:	67d9      	str	r1, [r3, #124]	; 0x7c
     cae:	4828      	ldr	r0, [pc, #160]	; (d50 <init_cmd_list+0x158>)
     cb0:	2180      	movs	r1, #128	; 0x80
     cb2:	5058      	str	r0, [r3, r1]
     cb4:	3104      	adds	r1, #4
     cb6:	9802      	ldr	r0, [sp, #8]
     cb8:	5058      	str	r0, [r3, r1]
     cba:	3104      	adds	r1, #4
     cbc:	505a      	str	r2, [r3, r1]
     cbe:	4825      	ldr	r0, [pc, #148]	; (d54 <init_cmd_list+0x15c>)
     cc0:	3104      	adds	r1, #4
     cc2:	5058      	str	r0, [r3, r1]
     cc4:	3104      	adds	r1, #4
     cc6:	9803      	ldr	r0, [sp, #12]
     cc8:	5058      	str	r0, [r3, r1]
     cca:	3104      	adds	r1, #4
     ccc:	505a      	str	r2, [r3, r1]
     cce:	4922      	ldr	r1, [pc, #136]	; (d58 <init_cmd_list+0x160>)
     cd0:	2298      	movs	r2, #152	; 0x98
     cd2:	5099      	str	r1, [r3, r2]
		{ CMD_READ_ACCEL, "[reading count] [interval in ms]", "Read from the Accelerometer sensor." } ,
		{ CMD_ADC_GET, "[port] [pin_num]", "Get the ADC value of an input pin." } ,
		{ CMD_MCU_TEMP, "", "Print the temperature reading of the on-board MCU temperature sensor." } ,
		{ CMD_I2C_SCAN, "", "Print out list of addresses of I2C devices on bus." }}
	};
}
     cd4:	b005      	add	sp, #20
     cd6:	bc3c      	pop	{r2, r3, r4, r5}
     cd8:	4690      	mov	r8, r2
     cda:	4699      	mov	r9, r3
     cdc:	46a2      	mov	sl, r4
     cde:	46ab      	mov	fp, r5
     ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	20000030 	.word	0x20000030
     ce8:	2000002c 	.word	0x2000002c
     cec:	2000000c 	.word	0x2000000c
     cf0:	20000004 	.word	0x20000004
     cf4:	20000008 	.word	0x20000008
     cf8:	2000001c 	.word	0x2000001c
     cfc:	20000018 	.word	0x20000018
     d00:	20000028 	.word	0x20000028
     d04:	20000024 	.word	0x20000024
     d08:	20000000 	.word	0x20000000
     d0c:	20000020 	.word	0x20000020
     d10:	20000014 	.word	0x20000014
     d14:	200002d8 	.word	0x200002d8
     d18:	20000010 	.word	0x20000010
     d1c:	000065c4 	.word	0x000065c4
     d20:	00006760 	.word	0x00006760
     d24:	00006778 	.word	0x00006778
     d28:	000067a0 	.word	0x000067a0
     d2c:	000067c8 	.word	0x000067c8
     d30:	000067dc 	.word	0x000067dc
     d34:	00006800 	.word	0x00006800
     d38:	00006824 	.word	0x00006824
     d3c:	00006840 	.word	0x00006840
     d40:	00006858 	.word	0x00006858
     d44:	00006870 	.word	0x00006870
     d48:	00006894 	.word	0x00006894
     d4c:	000068b4 	.word	0x000068b4
     d50:	000068d8 	.word	0x000068d8
     d54:	000068fc 	.word	0x000068fc
     d58:	00006944 	.word	0x00006944

00000d5c <handle_help>:
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
	}
}

void handle_help() {
     d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Command List:\r\n");
     d5e:	4808      	ldr	r0, [pc, #32]	; (d80 <handle_help+0x24>)
     d60:	4b08      	ldr	r3, [pc, #32]	; (d84 <handle_help+0x28>)
     d62:	4798      	blx	r3
     d64:	4c08      	ldr	r4, [pc, #32]	; (d88 <handle_help+0x2c>)
     d66:	0027      	movs	r7, r4
     d68:	379c      	adds	r7, #156	; 0x9c
	for(int i = 0; i < OPTION_COUNT; i++) {
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
     d6a:	4e08      	ldr	r6, [pc, #32]	; (d8c <handle_help+0x30>)
     d6c:	4d08      	ldr	r5, [pc, #32]	; (d90 <handle_help+0x34>)
     d6e:	68a3      	ldr	r3, [r4, #8]
     d70:	6862      	ldr	r2, [r4, #4]
     d72:	6821      	ldr	r1, [r4, #0]
     d74:	0030      	movs	r0, r6
     d76:	47a8      	blx	r5
     d78:	340c      	adds	r4, #12
	for(int i = 0; i < OPTION_COUNT; i++) {
     d7a:	42bc      	cmp	r4, r7
     d7c:	d1f7      	bne.n	d6e <handle_help+0x12>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
     d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d80:	000065e0 	.word	0x000065e0
     d84:	00004719 	.word	0x00004719
     d88:	200002d8 	.word	0x200002d8
     d8c:	000065f0 	.word	0x000065f0
     d90:	00004625 	.word	0x00004625

00000d94 <handle_ver_bl>:


void handle_ver_bl() {
     d94:	b510      	push	{r4, lr}
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
     d96:	4902      	ldr	r1, [pc, #8]	; (da0 <handle_ver_bl+0xc>)
     d98:	4802      	ldr	r0, [pc, #8]	; (da4 <handle_ver_bl+0x10>)
     d9a:	4b03      	ldr	r3, [pc, #12]	; (da8 <handle_ver_bl+0x14>)
     d9c:	4798      	blx	r3
}
     d9e:	bd10      	pop	{r4, pc}
     da0:	0000673c 	.word	0x0000673c
     da4:	00006744 	.word	0x00006744
     da8:	00004625 	.word	0x00004625

00000dac <handle_ver_app>:

void handle_ver_app() {
     dac:	b510      	push	{r4, lr}
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
     dae:	4902      	ldr	r1, [pc, #8]	; (db8 <handle_ver_app+0xc>)
     db0:	4802      	ldr	r0, [pc, #8]	; (dbc <handle_ver_app+0x10>)
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <handle_ver_app+0x14>)
     db4:	4798      	blx	r3
}
     db6:	bd10      	pop	{r4, pc}
     db8:	0000673c 	.word	0x0000673c
     dbc:	00006720 	.word	0x00006720
     dc0:	00004625 	.word	0x00004625

00000dc4 <handle_gpio_get>:
	port_pin_set_output_level(pin, level);
		
	printf("Not implemented yet!\r\n");
}

void handle_gpio_get(char port, int pin_num) {
     dc4:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->OUT.reg & pin_mask);
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <handle_gpio_get+0x18>)
     dc8:	6919      	ldr	r1, [r3, #16]
     dca:	0749      	lsls	r1, r1, #29
     dcc:	0fc9      	lsrs	r1, r1, #31
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
	bool level;
	level = port_pin_get_output_level(pin);
	
	printf("%d\r\n", level);
     dce:	4804      	ldr	r0, [pc, #16]	; (de0 <handle_gpio_get+0x1c>)
     dd0:	4b04      	ldr	r3, [pc, #16]	; (de4 <handle_gpio_get+0x20>)
     dd2:	4798      	blx	r3
		
	printf("Not implemented yet!\r\n");
     dd4:	4804      	ldr	r0, [pc, #16]	; (de8 <handle_gpio_get+0x24>)
     dd6:	4b05      	ldr	r3, [pc, #20]	; (dec <handle_gpio_get+0x28>)
     dd8:	4798      	blx	r3
}
     dda:	bd10      	pop	{r4, pc}
     ddc:	41004480 	.word	0x41004480
     de0:	000065c0 	.word	0x000065c0
     de4:	00004625 	.word	0x00004625
     de8:	000065c8 	.word	0x000065c8
     dec:	00004719 	.word	0x00004719

00000df0 <handle_mac>:

void handle_mac() {
     df0:	b510      	push	{r4, lr}
	char* dummy_mac = "01:23:45:67:89:ab";
	printf("MAC Address: %s\r\n", dummy_mac);
     df2:	4902      	ldr	r1, [pc, #8]	; (dfc <handle_mac+0xc>)
     df4:	4802      	ldr	r0, [pc, #8]	; (e00 <handle_mac+0x10>)
     df6:	4b03      	ldr	r3, [pc, #12]	; (e04 <handle_mac+0x14>)
     df8:	4798      	blx	r3
}
     dfa:	bd10      	pop	{r4, pc}
     dfc:	00006624 	.word	0x00006624
     e00:	00006638 	.word	0x00006638
     e04:	00004625 	.word	0x00004625

00000e08 <handle_ip>:

void handle_ip() {
     e08:	b510      	push	{r4, lr}
	char* dummy_ip = "255.255.255.255";
	printf("IP Address: %s\r\n", dummy_ip);
     e0a:	4902      	ldr	r1, [pc, #8]	; (e14 <handle_ip+0xc>)
     e0c:	4802      	ldr	r0, [pc, #8]	; (e18 <handle_ip+0x10>)
     e0e:	4b03      	ldr	r3, [pc, #12]	; (e1c <handle_ip+0x14>)
     e10:	4798      	blx	r3
}
     e12:	bd10      	pop	{r4, pc}
     e14:	00006600 	.word	0x00006600
     e18:	00006610 	.word	0x00006610
     e1c:	00004625 	.word	0x00004625

00000e20 <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
     e20:	b5f0      	push	{r4, r5, r6, r7, lr}
     e22:	46c6      	mov	lr, r8
     e24:	b500      	push	{lr}
     e26:	0006      	movs	r6, r0
     e28:	000d      	movs	r5, r1
	printf("Reading from Gyro...\r\n");
     e2a:	480f      	ldr	r0, [pc, #60]	; (e68 <handle_read_gyro+0x48>)
     e2c:	4b0f      	ldr	r3, [pc, #60]	; (e6c <handle_read_gyro+0x4c>)
     e2e:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
     e30:	2e00      	cmp	r6, #0
     e32:	dd12      	ble.n	e5a <handle_read_gyro+0x3a>
     e34:	2400      	movs	r4, #0
		printf("%d\r\n", 9);
     e36:	4f0e      	ldr	r7, [pc, #56]	; (e70 <handle_read_gyro+0x50>)
		delay_ms(interval_ms);
     e38:	4b0e      	ldr	r3, [pc, #56]	; (e74 <handle_read_gyro+0x54>)
     e3a:	4698      	mov	r8, r3
     e3c:	e004      	b.n	e48 <handle_read_gyro+0x28>
     e3e:	2001      	movs	r0, #1
     e40:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
     e42:	3401      	adds	r4, #1
     e44:	42a6      	cmp	r6, r4
     e46:	d008      	beq.n	e5a <handle_read_gyro+0x3a>
		printf("%d\r\n", 9);
     e48:	2109      	movs	r1, #9
     e4a:	480b      	ldr	r0, [pc, #44]	; (e78 <handle_read_gyro+0x58>)
     e4c:	47b8      	blx	r7
		delay_ms(interval_ms);
     e4e:	2d00      	cmp	r5, #0
     e50:	d0f5      	beq.n	e3e <handle_read_gyro+0x1e>
     e52:	0028      	movs	r0, r5
     e54:	4b09      	ldr	r3, [pc, #36]	; (e7c <handle_read_gyro+0x5c>)
     e56:	4798      	blx	r3
     e58:	e7f3      	b.n	e42 <handle_read_gyro+0x22>
	}
	printf("Done!\r\n");
     e5a:	4809      	ldr	r0, [pc, #36]	; (e80 <handle_read_gyro+0x60>)
     e5c:	4b03      	ldr	r3, [pc, #12]	; (e6c <handle_read_gyro+0x4c>)
     e5e:	4798      	blx	r3
}
     e60:	bc04      	pop	{r2}
     e62:	4690      	mov	r8, r2
     e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	0000666c 	.word	0x0000666c
     e6c:	00004719 	.word	0x00004719
     e70:	00004625 	.word	0x00004625
     e74:	000012f1 	.word	0x000012f1
     e78:	000065c0 	.word	0x000065c0
     e7c:	0000131d 	.word	0x0000131d
     e80:	00006684 	.word	0x00006684

00000e84 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
     e84:	b5f0      	push	{r4, r5, r6, r7, lr}
     e86:	46c6      	mov	lr, r8
     e88:	b500      	push	{lr}
     e8a:	0006      	movs	r6, r0
     e8c:	000d      	movs	r5, r1
	printf("Reading from Accelerometer...\r\n");
     e8e:	480f      	ldr	r0, [pc, #60]	; (ecc <handle_read_accel+0x48>)
     e90:	4b0f      	ldr	r3, [pc, #60]	; (ed0 <handle_read_accel+0x4c>)
     e92:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
     e94:	2e00      	cmp	r6, #0
     e96:	dd12      	ble.n	ebe <handle_read_accel+0x3a>
     e98:	2400      	movs	r4, #0
		printf("%d\r\n", 8);
     e9a:	4f0e      	ldr	r7, [pc, #56]	; (ed4 <handle_read_accel+0x50>)
		delay_ms(interval_ms);
     e9c:	4b0e      	ldr	r3, [pc, #56]	; (ed8 <handle_read_accel+0x54>)
     e9e:	4698      	mov	r8, r3
     ea0:	e004      	b.n	eac <handle_read_accel+0x28>
     ea2:	2001      	movs	r0, #1
     ea4:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
     ea6:	3401      	adds	r4, #1
     ea8:	42a6      	cmp	r6, r4
     eaa:	d008      	beq.n	ebe <handle_read_accel+0x3a>
		printf("%d\r\n", 8);
     eac:	2108      	movs	r1, #8
     eae:	480b      	ldr	r0, [pc, #44]	; (edc <handle_read_accel+0x58>)
     eb0:	47b8      	blx	r7
		delay_ms(interval_ms);
     eb2:	2d00      	cmp	r5, #0
     eb4:	d0f5      	beq.n	ea2 <handle_read_accel+0x1e>
     eb6:	0028      	movs	r0, r5
     eb8:	4b09      	ldr	r3, [pc, #36]	; (ee0 <handle_read_accel+0x5c>)
     eba:	4798      	blx	r3
     ebc:	e7f3      	b.n	ea6 <handle_read_accel+0x22>
	}
	printf("Done!\r\n");
     ebe:	4809      	ldr	r0, [pc, #36]	; (ee4 <handle_read_accel+0x60>)
     ec0:	4b03      	ldr	r3, [pc, #12]	; (ed0 <handle_read_accel+0x4c>)
     ec2:	4798      	blx	r3
}
     ec4:	bc04      	pop	{r2}
     ec6:	4690      	mov	r8, r2
     ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	0000664c 	.word	0x0000664c
     ed0:	00004719 	.word	0x00004719
     ed4:	00004625 	.word	0x00004625
     ed8:	000012f1 	.word	0x000012f1
     edc:	000065c0 	.word	0x000065c0
     ee0:	0000131d 	.word	0x0000131d
     ee4:	00006684 	.word	0x00006684

00000ee8 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
     ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Adc *const adc_module = module_inst->hw;
     eea:	4f1b      	ldr	r7, [pc, #108]	; (f58 <handle_adc_get+0x70>)
	if (int_flags & ADC_INTFLAG_RESRDY) {
     eec:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     eee:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     ef0:	2602      	movs	r6, #2
     ef2:	e023      	b.n	f3c <handle_adc_get+0x54>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     ef4:	4214      	tst	r4, r2
     ef6:	d10a      	bne.n	f0e <handle_adc_get+0x26>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     ef8:	7e03      	ldrb	r3, [r0, #24]
     efa:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     efc:	0022      	movs	r2, r4
     efe:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     f00:	421d      	tst	r5, r3
     f02:	d000      	beq.n	f06 <handle_adc_get+0x1e>
		status_flags |= ADC_STATUS_WINDOW;
     f04:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     f06:	421e      	tst	r6, r3
     f08:	d0f4      	beq.n	ef4 <handle_adc_get+0xc>
		status_flags |= ADC_STATUS_OVERRUN;
     f0a:	432a      	orrs	r2, r5
     f0c:	e7f2      	b.n	ef4 <handle_adc_get+0xc>
     f0e:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     f10:	b25b      	sxtb	r3, r3
     f12:	2b00      	cmp	r3, #0
     f14:	dbfb      	blt.n	f0e <handle_adc_get+0x26>
	*result = adc_module->RESULT.reg;
     f16:	8b41      	ldrh	r1, [r0, #26]
     f18:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
     f1a:	7604      	strb	r4, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     f1c:	7e03      	ldrb	r3, [r0, #24]
     f1e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     f20:	0022      	movs	r2, r4
     f22:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     f24:	421d      	tst	r5, r3
     f26:	d000      	beq.n	f2a <handle_adc_get+0x42>
		status_flags |= ADC_STATUS_WINDOW;
     f28:	4332      	orrs	r2, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     f2a:	421e      	tst	r6, r3
     f2c:	d000      	beq.n	f30 <handle_adc_get+0x48>
		status_flags |= ADC_STATUS_OVERRUN;
     f2e:	432a      	orrs	r2, r5
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     f30:	4215      	tst	r5, r2
     f32:	d000      	beq.n	f36 <handle_adc_get+0x4e>
	adc_module->INTFLAG.reg = int_flags;
     f34:	7606      	strb	r6, [r0, #24]
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
	
	printf("ADC Result: %d\r", result);
     f36:	4809      	ldr	r0, [pc, #36]	; (f5c <handle_adc_get+0x74>)
     f38:	4b09      	ldr	r3, [pc, #36]	; (f60 <handle_adc_get+0x78>)
     f3a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
     f3c:	6838      	ldr	r0, [r7, #0]
     f3e:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     f40:	b25b      	sxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	dbfb      	blt.n	f3e <handle_adc_get+0x56>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     f46:	7b03      	ldrb	r3, [r0, #12]
     f48:	2202      	movs	r2, #2
     f4a:	4313      	orrs	r3, r2
     f4c:	7303      	strb	r3, [r0, #12]
     f4e:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     f50:	b25b      	sxtb	r3, r3
     f52:	2b00      	cmp	r3, #0
     f54:	dbfb      	blt.n	f4e <handle_adc_get+0x66>
     f56:	e7cf      	b.n	ef8 <handle_adc_get+0x10>
     f58:	200003dc 	.word	0x200003dc
     f5c:	000065b0 	.word	0x000065b0
     f60:	00004625 	.word	0x00004625

00000f64 <handle_mcu_temp>:
	}
}

void handle_mcu_temp() {
     f64:	b510      	push	{r4, lr}
	printf("Not implemented yet!\r\n");
     f66:	4802      	ldr	r0, [pc, #8]	; (f70 <handle_mcu_temp+0xc>)
     f68:	4b02      	ldr	r3, [pc, #8]	; (f74 <handle_mcu_temp+0x10>)
     f6a:	4798      	blx	r3
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	000065c8 	.word	0x000065c8
     f74:	00004719 	.word	0x00004719

00000f78 <handle_user_input>:
void handle_user_input(char* input) {
     f78:	b570      	push	{r4, r5, r6, lr}
	char* cmd = strtok(input, " ");
     f7a:	49aa      	ldr	r1, [pc, #680]	; (1224 <handle_user_input+0x2ac>)
     f7c:	4baa      	ldr	r3, [pc, #680]	; (1228 <handle_user_input+0x2b0>)
     f7e:	4798      	blx	r3
     f80:	0004      	movs	r4, r0
	if(strcmp(CMD_HELP, cmd) == 0) { 
     f82:	4baa      	ldr	r3, [pc, #680]	; (122c <handle_user_input+0x2b4>)
     f84:	6818      	ldr	r0, [r3, #0]
     f86:	0021      	movs	r1, r4
     f88:	4ba9      	ldr	r3, [pc, #676]	; (1230 <handle_user_input+0x2b8>)
     f8a:	4798      	blx	r3
     f8c:	2800      	cmp	r0, #0
     f8e:	d05f      	beq.n	1050 <handle_user_input+0xd8>
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
     f90:	4ba8      	ldr	r3, [pc, #672]	; (1234 <handle_user_input+0x2bc>)
     f92:	6818      	ldr	r0, [r3, #0]
     f94:	0021      	movs	r1, r4
     f96:	4ba6      	ldr	r3, [pc, #664]	; (1230 <handle_user_input+0x2b8>)
     f98:	4798      	blx	r3
     f9a:	2800      	cmp	r0, #0
     f9c:	d05b      	beq.n	1056 <handle_user_input+0xde>
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
     f9e:	4ba6      	ldr	r3, [pc, #664]	; (1238 <handle_user_input+0x2c0>)
     fa0:	6818      	ldr	r0, [r3, #0]
     fa2:	0021      	movs	r1, r4
     fa4:	4ba2      	ldr	r3, [pc, #648]	; (1230 <handle_user_input+0x2b8>)
     fa6:	4798      	blx	r3
     fa8:	2800      	cmp	r0, #0
     faa:	d057      	beq.n	105c <handle_user_input+0xe4>
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
     fac:	4ba3      	ldr	r3, [pc, #652]	; (123c <handle_user_input+0x2c4>)
     fae:	6818      	ldr	r0, [r3, #0]
     fb0:	0021      	movs	r1, r4
     fb2:	4b9f      	ldr	r3, [pc, #636]	; (1230 <handle_user_input+0x2b8>)
     fb4:	4798      	blx	r3
     fb6:	2800      	cmp	r0, #0
     fb8:	d053      	beq.n	1062 <handle_user_input+0xea>
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
     fba:	4ba1      	ldr	r3, [pc, #644]	; (1240 <handle_user_input+0x2c8>)
     fbc:	6818      	ldr	r0, [r3, #0]
     fbe:	0021      	movs	r1, r4
     fc0:	4b9b      	ldr	r3, [pc, #620]	; (1230 <handle_user_input+0x2b8>)
     fc2:	4798      	blx	r3
     fc4:	2800      	cmp	r0, #0
     fc6:	d100      	bne.n	fca <handle_user_input+0x52>
     fc8:	e074      	b.n	10b4 <handle_user_input+0x13c>
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
     fca:	4b9e      	ldr	r3, [pc, #632]	; (1244 <handle_user_input+0x2cc>)
     fcc:	6818      	ldr	r0, [r3, #0]
     fce:	0021      	movs	r1, r4
     fd0:	4b97      	ldr	r3, [pc, #604]	; (1230 <handle_user_input+0x2b8>)
     fd2:	4798      	blx	r3
     fd4:	2800      	cmp	r0, #0
     fd6:	d100      	bne.n	fda <handle_user_input+0x62>
     fd8:	e095      	b.n	1106 <handle_user_input+0x18e>
	else if(strcmp(CMD_MAC, cmd) == 0) { 
     fda:	4b9b      	ldr	r3, [pc, #620]	; (1248 <handle_user_input+0x2d0>)
     fdc:	6818      	ldr	r0, [r3, #0]
     fde:	0021      	movs	r1, r4
     fe0:	4b93      	ldr	r3, [pc, #588]	; (1230 <handle_user_input+0x2b8>)
     fe2:	4798      	blx	r3
     fe4:	2800      	cmp	r0, #0
     fe6:	d100      	bne.n	fea <handle_user_input+0x72>
     fe8:	e0b5      	b.n	1156 <handle_user_input+0x1de>
	else if(strcmp(CMD_IP, cmd) == 0) { 
     fea:	4b98      	ldr	r3, [pc, #608]	; (124c <handle_user_input+0x2d4>)
     fec:	6818      	ldr	r0, [r3, #0]
     fee:	0021      	movs	r1, r4
     ff0:	4b8f      	ldr	r3, [pc, #572]	; (1230 <handle_user_input+0x2b8>)
     ff2:	4798      	blx	r3
     ff4:	2800      	cmp	r0, #0
     ff6:	d100      	bne.n	ffa <handle_user_input+0x82>
     ff8:	e0b0      	b.n	115c <handle_user_input+0x1e4>
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
     ffa:	4b95      	ldr	r3, [pc, #596]	; (1250 <handle_user_input+0x2d8>)
     ffc:	6818      	ldr	r0, [r3, #0]
     ffe:	0021      	movs	r1, r4
    1000:	4b8b      	ldr	r3, [pc, #556]	; (1230 <handle_user_input+0x2b8>)
    1002:	4798      	blx	r3
    1004:	2800      	cmp	r0, #0
    1006:	d100      	bne.n	100a <handle_user_input+0x92>
    1008:	e0ab      	b.n	1162 <handle_user_input+0x1ea>
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    100a:	4b92      	ldr	r3, [pc, #584]	; (1254 <handle_user_input+0x2dc>)
    100c:	6818      	ldr	r0, [r3, #0]
    100e:	0021      	movs	r1, r4
    1010:	4b87      	ldr	r3, [pc, #540]	; (1230 <handle_user_input+0x2b8>)
    1012:	4798      	blx	r3
    1014:	2800      	cmp	r0, #0
    1016:	d100      	bne.n	101a <handle_user_input+0xa2>
    1018:	e0bf      	b.n	119a <handle_user_input+0x222>
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    101a:	4b8f      	ldr	r3, [pc, #572]	; (1258 <handle_user_input+0x2e0>)
    101c:	6818      	ldr	r0, [r3, #0]
    101e:	0021      	movs	r1, r4
    1020:	4b83      	ldr	r3, [pc, #524]	; (1230 <handle_user_input+0x2b8>)
    1022:	4798      	blx	r3
    1024:	2800      	cmp	r0, #0
    1026:	d100      	bne.n	102a <handle_user_input+0xb2>
    1028:	e0d3      	b.n	11d2 <handle_user_input+0x25a>
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    102a:	4b8c      	ldr	r3, [pc, #560]	; (125c <handle_user_input+0x2e4>)
    102c:	6818      	ldr	r0, [r3, #0]
    102e:	0021      	movs	r1, r4
    1030:	4b7f      	ldr	r3, [pc, #508]	; (1230 <handle_user_input+0x2b8>)
    1032:	4798      	blx	r3
    1034:	2800      	cmp	r0, #0
    1036:	d100      	bne.n	103a <handle_user_input+0xc2>
    1038:	e0f1      	b.n	121e <handle_user_input+0x2a6>
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    103a:	4b89      	ldr	r3, [pc, #548]	; (1260 <handle_user_input+0x2e8>)
    103c:	6818      	ldr	r0, [r3, #0]
    103e:	0021      	movs	r1, r4
    1040:	4b7b      	ldr	r3, [pc, #492]	; (1230 <handle_user_input+0x2b8>)
    1042:	4798      	blx	r3
    1044:	2800      	cmp	r0, #0
    1046:	d005      	beq.n	1054 <handle_user_input+0xdc>
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    1048:	4886      	ldr	r0, [pc, #536]	; (1264 <handle_user_input+0x2ec>)
    104a:	4b87      	ldr	r3, [pc, #540]	; (1268 <handle_user_input+0x2f0>)
    104c:	4798      	blx	r3
    104e:	e001      	b.n	1054 <handle_user_input+0xdc>
		handle_help(); 
    1050:	4b86      	ldr	r3, [pc, #536]	; (126c <handle_user_input+0x2f4>)
    1052:	4798      	blx	r3
}
    1054:	bd70      	pop	{r4, r5, r6, pc}
		handle_ver_bl(); 
    1056:	4b86      	ldr	r3, [pc, #536]	; (1270 <handle_user_input+0x2f8>)
    1058:	4798      	blx	r3
    105a:	e7fb      	b.n	1054 <handle_user_input+0xdc>
		handle_ver_app();
    105c:	4b85      	ldr	r3, [pc, #532]	; (1274 <handle_user_input+0x2fc>)
    105e:	4798      	blx	r3
    1060:	e7f8      	b.n	1054 <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    1062:	4e70      	ldr	r6, [pc, #448]	; (1224 <handle_user_input+0x2ac>)
    1064:	0031      	movs	r1, r6
    1066:	4d70      	ldr	r5, [pc, #448]	; (1228 <handle_user_input+0x2b0>)
    1068:	47a8      	blx	r5
    106a:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    106c:	0031      	movs	r1, r6
    106e:	2000      	movs	r0, #0
    1070:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    1072:	2c00      	cmp	r4, #0
    1074:	d016      	beq.n	10a4 <handle_user_input+0x12c>
    1076:	2800      	cmp	r0, #0
    1078:	d014      	beq.n	10a4 <handle_user_input+0x12c>
		int pin_num = atoi(arg2);
    107a:	4b7f      	ldr	r3, [pc, #508]	; (1278 <handle_user_input+0x300>)
    107c:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    107e:	497f      	ldr	r1, [pc, #508]	; (127c <handle_user_input+0x304>)
    1080:	0020      	movs	r0, r4
    1082:	4b6b      	ldr	r3, [pc, #428]	; (1230 <handle_user_input+0x2b8>)
    1084:	4798      	blx	r3
    1086:	2800      	cmp	r0, #0
    1088:	d005      	beq.n	1096 <handle_user_input+0x11e>
    108a:	497d      	ldr	r1, [pc, #500]	; (1280 <handle_user_input+0x308>)
    108c:	0020      	movs	r0, r4
    108e:	4b68      	ldr	r3, [pc, #416]	; (1230 <handle_user_input+0x2b8>)
    1090:	4798      	blx	r3
    1092:	2800      	cmp	r0, #0
    1094:	d10a      	bne.n	10ac <handle_user_input+0x134>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1096:	2204      	movs	r2, #4
    1098:	4b7a      	ldr	r3, [pc, #488]	; (1284 <handle_user_input+0x30c>)
    109a:	619a      	str	r2, [r3, #24]
	printf("Not implemented yet!\r\n");
    109c:	487a      	ldr	r0, [pc, #488]	; (1288 <handle_user_input+0x310>)
    109e:	4b72      	ldr	r3, [pc, #456]	; (1268 <handle_user_input+0x2f0>)
    10a0:	4798      	blx	r3
    10a2:	e7d7      	b.n	1054 <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    10a4:	4879      	ldr	r0, [pc, #484]	; (128c <handle_user_input+0x314>)
    10a6:	4b70      	ldr	r3, [pc, #448]	; (1268 <handle_user_input+0x2f0>)
    10a8:	4798      	blx	r3
			return;
    10aa:	e7d3      	b.n	1054 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    10ac:	4878      	ldr	r0, [pc, #480]	; (1290 <handle_user_input+0x318>)
    10ae:	4b6e      	ldr	r3, [pc, #440]	; (1268 <handle_user_input+0x2f0>)
    10b0:	4798      	blx	r3
    10b2:	e7f0      	b.n	1096 <handle_user_input+0x11e>
		char* arg1 = strtok(NULL, " ");
    10b4:	4e5b      	ldr	r6, [pc, #364]	; (1224 <handle_user_input+0x2ac>)
    10b6:	0031      	movs	r1, r6
    10b8:	4d5b      	ldr	r5, [pc, #364]	; (1228 <handle_user_input+0x2b0>)
    10ba:	47a8      	blx	r5
    10bc:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    10be:	0031      	movs	r1, r6
    10c0:	2000      	movs	r0, #0
    10c2:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    10c4:	2c00      	cmp	r4, #0
    10c6:	d016      	beq.n	10f6 <handle_user_input+0x17e>
    10c8:	2800      	cmp	r0, #0
    10ca:	d014      	beq.n	10f6 <handle_user_input+0x17e>
		int pin_num = atoi(arg2);
    10cc:	4b6a      	ldr	r3, [pc, #424]	; (1278 <handle_user_input+0x300>)
    10ce:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    10d0:	496a      	ldr	r1, [pc, #424]	; (127c <handle_user_input+0x304>)
    10d2:	0020      	movs	r0, r4
    10d4:	4b56      	ldr	r3, [pc, #344]	; (1230 <handle_user_input+0x2b8>)
    10d6:	4798      	blx	r3
    10d8:	2800      	cmp	r0, #0
    10da:	d005      	beq.n	10e8 <handle_user_input+0x170>
    10dc:	4968      	ldr	r1, [pc, #416]	; (1280 <handle_user_input+0x308>)
    10de:	0020      	movs	r0, r4
    10e0:	4b53      	ldr	r3, [pc, #332]	; (1230 <handle_user_input+0x2b8>)
    10e2:	4798      	blx	r3
    10e4:	2800      	cmp	r0, #0
    10e6:	d10a      	bne.n	10fe <handle_user_input+0x186>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10e8:	2204      	movs	r2, #4
    10ea:	4b66      	ldr	r3, [pc, #408]	; (1284 <handle_user_input+0x30c>)
    10ec:	615a      	str	r2, [r3, #20]
	printf("Not implemented yet!\r\n");
    10ee:	4866      	ldr	r0, [pc, #408]	; (1288 <handle_user_input+0x310>)
    10f0:	4b5d      	ldr	r3, [pc, #372]	; (1268 <handle_user_input+0x2f0>)
    10f2:	4798      	blx	r3
    10f4:	e7ae      	b.n	1054 <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    10f6:	4865      	ldr	r0, [pc, #404]	; (128c <handle_user_input+0x314>)
    10f8:	4b5b      	ldr	r3, [pc, #364]	; (1268 <handle_user_input+0x2f0>)
    10fa:	4798      	blx	r3
			return;
    10fc:	e7aa      	b.n	1054 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    10fe:	4864      	ldr	r0, [pc, #400]	; (1290 <handle_user_input+0x318>)
    1100:	4b59      	ldr	r3, [pc, #356]	; (1268 <handle_user_input+0x2f0>)
    1102:	4798      	blx	r3
    1104:	e7f0      	b.n	10e8 <handle_user_input+0x170>
		char* arg1 = strtok(NULL, " ");
    1106:	4e47      	ldr	r6, [pc, #284]	; (1224 <handle_user_input+0x2ac>)
    1108:	0031      	movs	r1, r6
    110a:	4d47      	ldr	r5, [pc, #284]	; (1228 <handle_user_input+0x2b0>)
    110c:	47a8      	blx	r5
    110e:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    1110:	0031      	movs	r1, r6
    1112:	2000      	movs	r0, #0
    1114:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    1116:	2c00      	cmp	r4, #0
    1118:	d015      	beq.n	1146 <handle_user_input+0x1ce>
    111a:	2800      	cmp	r0, #0
    111c:	d013      	beq.n	1146 <handle_user_input+0x1ce>
		int pin_num = atoi(arg2);
    111e:	4b56      	ldr	r3, [pc, #344]	; (1278 <handle_user_input+0x300>)
    1120:	4798      	blx	r3
    1122:	0005      	movs	r5, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    1124:	4955      	ldr	r1, [pc, #340]	; (127c <handle_user_input+0x304>)
    1126:	0020      	movs	r0, r4
    1128:	4b41      	ldr	r3, [pc, #260]	; (1230 <handle_user_input+0x2b8>)
    112a:	4798      	blx	r3
    112c:	2800      	cmp	r0, #0
    112e:	d005      	beq.n	113c <handle_user_input+0x1c4>
    1130:	4953      	ldr	r1, [pc, #332]	; (1280 <handle_user_input+0x308>)
    1132:	0020      	movs	r0, r4
    1134:	4b3e      	ldr	r3, [pc, #248]	; (1230 <handle_user_input+0x2b8>)
    1136:	4798      	blx	r3
    1138:	2800      	cmp	r0, #0
    113a:	d108      	bne.n	114e <handle_user_input+0x1d6>
		handle_gpio_get(*port, pin_num);
    113c:	7820      	ldrb	r0, [r4, #0]
    113e:	0029      	movs	r1, r5
    1140:	4b54      	ldr	r3, [pc, #336]	; (1294 <handle_user_input+0x31c>)
    1142:	4798      	blx	r3
    1144:	e786      	b.n	1054 <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    1146:	4851      	ldr	r0, [pc, #324]	; (128c <handle_user_input+0x314>)
    1148:	4b47      	ldr	r3, [pc, #284]	; (1268 <handle_user_input+0x2f0>)
    114a:	4798      	blx	r3
			return;
    114c:	e782      	b.n	1054 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    114e:	4850      	ldr	r0, [pc, #320]	; (1290 <handle_user_input+0x318>)
    1150:	4b45      	ldr	r3, [pc, #276]	; (1268 <handle_user_input+0x2f0>)
    1152:	4798      	blx	r3
    1154:	e7f2      	b.n	113c <handle_user_input+0x1c4>
		handle_mac(); 
    1156:	4b50      	ldr	r3, [pc, #320]	; (1298 <handle_user_input+0x320>)
    1158:	4798      	blx	r3
    115a:	e77b      	b.n	1054 <handle_user_input+0xdc>
		handle_ip(); 
    115c:	4b4f      	ldr	r3, [pc, #316]	; (129c <handle_user_input+0x324>)
    115e:	4798      	blx	r3
    1160:	e778      	b.n	1054 <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    1162:	4d30      	ldr	r5, [pc, #192]	; (1224 <handle_user_input+0x2ac>)
    1164:	0029      	movs	r1, r5
    1166:	4c30      	ldr	r4, [pc, #192]	; (1228 <handle_user_input+0x2b0>)
    1168:	47a0      	blx	r4
    116a:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    116c:	0029      	movs	r1, r5
    116e:	2000      	movs	r0, #0
    1170:	47a0      	blx	r4
    1172:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    1174:	2e00      	cmp	r6, #0
    1176:	d00c      	beq.n	1192 <handle_user_input+0x21a>
    1178:	2800      	cmp	r0, #0
    117a:	d00a      	beq.n	1192 <handle_user_input+0x21a>
		int num_readings = atoi(arg1);
    117c:	0030      	movs	r0, r6
    117e:	4d3e      	ldr	r5, [pc, #248]	; (1278 <handle_user_input+0x300>)
    1180:	47a8      	blx	r5
    1182:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    1184:	0020      	movs	r0, r4
    1186:	47a8      	blx	r5
    1188:	0001      	movs	r1, r0
		handle_read_gyro(num_readings, interval_ms); 
    118a:	0030      	movs	r0, r6
    118c:	4b44      	ldr	r3, [pc, #272]	; (12a0 <handle_user_input+0x328>)
    118e:	4798      	blx	r3
    1190:	e760      	b.n	1054 <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    1192:	483e      	ldr	r0, [pc, #248]	; (128c <handle_user_input+0x314>)
    1194:	4b34      	ldr	r3, [pc, #208]	; (1268 <handle_user_input+0x2f0>)
    1196:	4798      	blx	r3
			return;
    1198:	e75c      	b.n	1054 <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    119a:	4d22      	ldr	r5, [pc, #136]	; (1224 <handle_user_input+0x2ac>)
    119c:	0029      	movs	r1, r5
    119e:	4c22      	ldr	r4, [pc, #136]	; (1228 <handle_user_input+0x2b0>)
    11a0:	47a0      	blx	r4
    11a2:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    11a4:	0029      	movs	r1, r5
    11a6:	2000      	movs	r0, #0
    11a8:	47a0      	blx	r4
    11aa:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    11ac:	2e00      	cmp	r6, #0
    11ae:	d00c      	beq.n	11ca <handle_user_input+0x252>
    11b0:	2800      	cmp	r0, #0
    11b2:	d00a      	beq.n	11ca <handle_user_input+0x252>
		int num_readings = atoi(arg1);
    11b4:	0030      	movs	r0, r6
    11b6:	4d30      	ldr	r5, [pc, #192]	; (1278 <handle_user_input+0x300>)
    11b8:	47a8      	blx	r5
    11ba:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    11bc:	0020      	movs	r0, r4
    11be:	47a8      	blx	r5
    11c0:	0001      	movs	r1, r0
		handle_read_accel(num_readings, interval_ms); 
    11c2:	0030      	movs	r0, r6
    11c4:	4b37      	ldr	r3, [pc, #220]	; (12a4 <handle_user_input+0x32c>)
    11c6:	4798      	blx	r3
    11c8:	e744      	b.n	1054 <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    11ca:	4830      	ldr	r0, [pc, #192]	; (128c <handle_user_input+0x314>)
    11cc:	4b26      	ldr	r3, [pc, #152]	; (1268 <handle_user_input+0x2f0>)
    11ce:	4798      	blx	r3
			return;
    11d0:	e740      	b.n	1054 <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    11d2:	4d14      	ldr	r5, [pc, #80]	; (1224 <handle_user_input+0x2ac>)
    11d4:	0029      	movs	r1, r5
    11d6:	4c14      	ldr	r4, [pc, #80]	; (1228 <handle_user_input+0x2b0>)
    11d8:	47a0      	blx	r4
    11da:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    11dc:	0029      	movs	r1, r5
    11de:	2000      	movs	r0, #0
    11e0:	47a0      	blx	r4
		if(arg1 == 0 || arg2 == 0) {
    11e2:	2e00      	cmp	r6, #0
    11e4:	d001      	beq.n	11ea <handle_user_input+0x272>
    11e6:	2800      	cmp	r0, #0
    11e8:	d103      	bne.n	11f2 <handle_user_input+0x27a>
			printf("Not enough arguments! Try \"help\".\r\n");
    11ea:	4828      	ldr	r0, [pc, #160]	; (128c <handle_user_input+0x314>)
    11ec:	4b1e      	ldr	r3, [pc, #120]	; (1268 <handle_user_input+0x2f0>)
    11ee:	4798      	blx	r3
			return;
    11f0:	e730      	b.n	1054 <handle_user_input+0xdc>
		int pin_num = atoi(arg2);
    11f2:	4b21      	ldr	r3, [pc, #132]	; (1278 <handle_user_input+0x300>)
    11f4:	4798      	blx	r3
    11f6:	0004      	movs	r4, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    11f8:	4920      	ldr	r1, [pc, #128]	; (127c <handle_user_input+0x304>)
    11fa:	0030      	movs	r0, r6
    11fc:	4b0c      	ldr	r3, [pc, #48]	; (1230 <handle_user_input+0x2b8>)
    11fe:	4798      	blx	r3
    1200:	2800      	cmp	r0, #0
    1202:	d008      	beq.n	1216 <handle_user_input+0x29e>
    1204:	491e      	ldr	r1, [pc, #120]	; (1280 <handle_user_input+0x308>)
    1206:	0030      	movs	r0, r6
    1208:	4b09      	ldr	r3, [pc, #36]	; (1230 <handle_user_input+0x2b8>)
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	d002      	beq.n	1216 <handle_user_input+0x29e>
			printf("Enter a valid Port! Try \"help\".\r\n");
    1210:	481f      	ldr	r0, [pc, #124]	; (1290 <handle_user_input+0x318>)
    1212:	4b15      	ldr	r3, [pc, #84]	; (1268 <handle_user_input+0x2f0>)
    1214:	4798      	blx	r3
		handle_adc_get(port, pin_num); 
    1216:	b2f0      	uxtb	r0, r6
    1218:	0021      	movs	r1, r4
    121a:	4b23      	ldr	r3, [pc, #140]	; (12a8 <handle_user_input+0x330>)
    121c:	4798      	blx	r3
		handle_mcu_temp(); 
    121e:	4b23      	ldr	r3, [pc, #140]	; (12ac <handle_user_input+0x334>)
    1220:	4798      	blx	r3
    1222:	e717      	b.n	1054 <handle_user_input+0xdc>
    1224:	0000668c 	.word	0x0000668c
    1228:	000048e1 	.word	0x000048e1
    122c:	20000010 	.word	0x20000010
    1230:	000048cd 	.word	0x000048cd
    1234:	20000030 	.word	0x20000030
    1238:	2000002c 	.word	0x2000002c
    123c:	2000000c 	.word	0x2000000c
    1240:	20000004 	.word	0x20000004
    1244:	20000008 	.word	0x20000008
    1248:	2000001c 	.word	0x2000001c
    124c:	20000018 	.word	0x20000018
    1250:	20000028 	.word	0x20000028
    1254:	20000024 	.word	0x20000024
    1258:	20000000 	.word	0x20000000
    125c:	20000020 	.word	0x20000020
    1260:	20000014 	.word	0x20000014
    1264:	000066e0 	.word	0x000066e0
    1268:	00004719 	.word	0x00004719
    126c:	00000d5d 	.word	0x00000d5d
    1270:	00000d95 	.word	0x00000d95
    1274:	00000dad 	.word	0x00000dad
    1278:	000045ad 	.word	0x000045ad
    127c:	000066b4 	.word	0x000066b4
    1280:	000066b8 	.word	0x000066b8
    1284:	41004480 	.word	0x41004480
    1288:	000065c8 	.word	0x000065c8
    128c:	00006690 	.word	0x00006690
    1290:	000066bc 	.word	0x000066bc
    1294:	00000dc5 	.word	0x00000dc5
    1298:	00000df1 	.word	0x00000df1
    129c:	00000e09 	.word	0x00000e09
    12a0:	00000e21 	.word	0x00000e21
    12a4:	00000e85 	.word	0x00000e85
    12a8:	00000ee9 	.word	0x00000ee9
    12ac:	00000f65 	.word	0x00000f65

000012b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12b0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12b2:	2000      	movs	r0, #0
    12b4:	4b08      	ldr	r3, [pc, #32]	; (12d8 <delay_init+0x28>)
    12b6:	4798      	blx	r3
    12b8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    12ba:	4c08      	ldr	r4, [pc, #32]	; (12dc <delay_init+0x2c>)
    12bc:	21fa      	movs	r1, #250	; 0xfa
    12be:	0089      	lsls	r1, r1, #2
    12c0:	47a0      	blx	r4
    12c2:	4b07      	ldr	r3, [pc, #28]	; (12e0 <delay_init+0x30>)
    12c4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    12c6:	4907      	ldr	r1, [pc, #28]	; (12e4 <delay_init+0x34>)
    12c8:	0028      	movs	r0, r5
    12ca:	47a0      	blx	r4
    12cc:	4b06      	ldr	r3, [pc, #24]	; (12e8 <delay_init+0x38>)
    12ce:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    12d0:	2205      	movs	r2, #5
    12d2:	4b06      	ldr	r3, [pc, #24]	; (12ec <delay_init+0x3c>)
    12d4:	601a      	str	r2, [r3, #0]
}
    12d6:	bd70      	pop	{r4, r5, r6, pc}
    12d8:	0000248d 	.word	0x0000248d
    12dc:	00002b79 	.word	0x00002b79
    12e0:	20000034 	.word	0x20000034
    12e4:	000f4240 	.word	0x000f4240
    12e8:	20000038 	.word	0x20000038
    12ec:	e000e010 	.word	0xe000e010

000012f0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    12f0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    12f2:	4b08      	ldr	r3, [pc, #32]	; (1314 <delay_cycles_us+0x24>)
    12f4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    12f6:	4a08      	ldr	r2, [pc, #32]	; (1318 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    12f8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12fa:	2180      	movs	r1, #128	; 0x80
    12fc:	0249      	lsls	r1, r1, #9
	while (n--) {
    12fe:	3801      	subs	r0, #1
    1300:	d307      	bcc.n	1312 <delay_cycles_us+0x22>
	if (n > 0) {
    1302:	2c00      	cmp	r4, #0
    1304:	d0fb      	beq.n	12fe <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1306:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1308:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    130a:	6813      	ldr	r3, [r2, #0]
    130c:	420b      	tst	r3, r1
    130e:	d0fc      	beq.n	130a <delay_cycles_us+0x1a>
    1310:	e7f5      	b.n	12fe <delay_cycles_us+0xe>
	}
}
    1312:	bd30      	pop	{r4, r5, pc}
    1314:	20000038 	.word	0x20000038
    1318:	e000e010 	.word	0xe000e010

0000131c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    131c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    131e:	4b08      	ldr	r3, [pc, #32]	; (1340 <delay_cycles_ms+0x24>)
    1320:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    1322:	4a08      	ldr	r2, [pc, #32]	; (1344 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1324:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1326:	2180      	movs	r1, #128	; 0x80
    1328:	0249      	lsls	r1, r1, #9
	while (n--) {
    132a:	3801      	subs	r0, #1
    132c:	d307      	bcc.n	133e <delay_cycles_ms+0x22>
	if (n > 0) {
    132e:	2c00      	cmp	r4, #0
    1330:	d0fb      	beq.n	132a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1332:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1334:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1336:	6813      	ldr	r3, [r2, #0]
    1338:	420b      	tst	r3, r1
    133a:	d0fc      	beq.n	1336 <delay_cycles_ms+0x1a>
    133c:	e7f5      	b.n	132a <delay_cycles_ms+0xe>
	}
}
    133e:	bd30      	pop	{r4, r5, pc}
    1340:	20000034 	.word	0x20000034
    1344:	e000e010 	.word	0xe000e010

00001348 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1348:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    134a:	1e44      	subs	r4, r0, #1
    134c:	2800      	cmp	r0, #0
    134e:	d004      	beq.n	135a <nm_bsp_sleep+0x12>
		delay_ms(1);
    1350:	4d02      	ldr	r5, [pc, #8]	; (135c <nm_bsp_sleep+0x14>)
    1352:	2001      	movs	r0, #1
    1354:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1356:	3c01      	subs	r4, #1
    1358:	d2fb      	bcs.n	1352 <nm_bsp_sleep+0xa>
	}
}
    135a:	bd70      	pop	{r4, r5, r6, pc}
    135c:	0000131d 	.word	0x0000131d

00001360 <nm_bsp_reset>:
{
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	4c07      	ldr	r4, [pc, #28]	; (1380 <nm_bsp_reset+0x20>)
    1364:	2780      	movs	r7, #128	; 0x80
    1366:	057f      	lsls	r7, r7, #21
    1368:	6167      	str	r7, [r4, #20]
    136a:	2580      	movs	r5, #128	; 0x80
    136c:	052d      	lsls	r5, r5, #20
    136e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    1370:	2001      	movs	r0, #1
    1372:	4e04      	ldr	r6, [pc, #16]	; (1384 <nm_bsp_reset+0x24>)
    1374:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1376:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    1378:	200a      	movs	r0, #10
    137a:	47b0      	blx	r6
    137c:	61a5      	str	r5, [r4, #24]
}
    137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1380:	41004400 	.word	0x41004400
    1384:	00001349 	.word	0x00001349

00001388 <nm_bsp_init>:
{
    1388:	b570      	push	{r4, r5, r6, lr}
    138a:	b082      	sub	sp, #8
	gpfIsr = NULL;
    138c:	2300      	movs	r3, #0
    138e:	4a16      	ldr	r2, [pc, #88]	; (13e8 <nm_bsp_init+0x60>)
    1390:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1392:	ac01      	add	r4, sp, #4
    1394:	2501      	movs	r5, #1
    1396:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1398:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    139a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    139c:	0021      	movs	r1, r4
    139e:	201b      	movs	r0, #27
    13a0:	4e12      	ldr	r6, [pc, #72]	; (13ec <nm_bsp_init+0x64>)
    13a2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    13a4:	0021      	movs	r1, r4
    13a6:	201c      	movs	r0, #28
    13a8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    13aa:	0021      	movs	r1, r4
    13ac:	2028      	movs	r0, #40	; 0x28
    13ae:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    13b0:	4b0f      	ldr	r3, [pc, #60]	; (13f0 <nm_bsp_init+0x68>)
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	0552      	lsls	r2, r2, #21
    13b6:	615a      	str	r2, [r3, #20]
    13b8:	2280      	movs	r2, #128	; 0x80
    13ba:	0512      	lsls	r2, r2, #20
    13bc:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    13be:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <nm_bsp_init+0x6c>)
    13c0:	681b      	ldr	r3, [r3, #0]
    13c2:	421d      	tst	r5, r3
    13c4:	d003      	beq.n	13ce <nm_bsp_init+0x46>
    13c6:	4b0b      	ldr	r3, [pc, #44]	; (13f4 <nm_bsp_init+0x6c>)
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	079b      	lsls	r3, r3, #30
    13cc:	d401      	bmi.n	13d2 <nm_bsp_init+0x4a>
	    delay_init();
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <nm_bsp_init+0x70>)
    13d0:	4798      	blx	r3
	nm_bsp_reset();
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <nm_bsp_init+0x74>)
    13d4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    13d6:	2201      	movs	r2, #1
    13d8:	4b09      	ldr	r3, [pc, #36]	; (1400 <nm_bsp_init+0x78>)
    13da:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    13dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    13e0:	b662      	cpsie	i
}
    13e2:	2000      	movs	r0, #0
    13e4:	b002      	add	sp, #8
    13e6:	bd70      	pop	{r4, r5, r6, pc}
    13e8:	2000022c 	.word	0x2000022c
    13ec:	00001585 	.word	0x00001585
    13f0:	41004400 	.word	0x41004400
    13f4:	e000e010 	.word	0xe000e010
    13f8:	000012b1 	.word	0x000012b1
    13fc:	00001361 	.word	0x00001361
    1400:	2000003c 	.word	0x2000003c

00001404 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1404:	4b0c      	ldr	r3, [pc, #48]	; (1438 <cpu_irq_enter_critical+0x34>)
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	2b00      	cmp	r3, #0
    140a:	d106      	bne.n	141a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    140c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1410:	2b00      	cmp	r3, #0
    1412:	d007      	beq.n	1424 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1414:	2200      	movs	r2, #0
    1416:	4b09      	ldr	r3, [pc, #36]	; (143c <cpu_irq_enter_critical+0x38>)
    1418:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    141a:	4a07      	ldr	r2, [pc, #28]	; (1438 <cpu_irq_enter_critical+0x34>)
    141c:	6813      	ldr	r3, [r2, #0]
    141e:	3301      	adds	r3, #1
    1420:	6013      	str	r3, [r2, #0]
}
    1422:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1424:	b672      	cpsid	i
    1426:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    142a:	2200      	movs	r2, #0
    142c:	4b04      	ldr	r3, [pc, #16]	; (1440 <cpu_irq_enter_critical+0x3c>)
    142e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1430:	3201      	adds	r2, #1
    1432:	4b02      	ldr	r3, [pc, #8]	; (143c <cpu_irq_enter_critical+0x38>)
    1434:	701a      	strb	r2, [r3, #0]
    1436:	e7f0      	b.n	141a <cpu_irq_enter_critical+0x16>
    1438:	20000230 	.word	0x20000230
    143c:	20000234 	.word	0x20000234
    1440:	2000003c 	.word	0x2000003c

00001444 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1444:	4b08      	ldr	r3, [pc, #32]	; (1468 <cpu_irq_leave_critical+0x24>)
    1446:	681a      	ldr	r2, [r3, #0]
    1448:	3a01      	subs	r2, #1
    144a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	2b00      	cmp	r3, #0
    1450:	d109      	bne.n	1466 <cpu_irq_leave_critical+0x22>
    1452:	4b06      	ldr	r3, [pc, #24]	; (146c <cpu_irq_leave_critical+0x28>)
    1454:	781b      	ldrb	r3, [r3, #0]
    1456:	2b00      	cmp	r3, #0
    1458:	d005      	beq.n	1466 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    145a:	2201      	movs	r2, #1
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <cpu_irq_leave_critical+0x2c>)
    145e:	701a      	strb	r2, [r3, #0]
    1460:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1464:	b662      	cpsie	i
	}
}
    1466:	4770      	bx	lr
    1468:	20000230 	.word	0x20000230
    146c:	20000234 	.word	0x20000234
    1470:	2000003c 	.word	0x2000003c

00001474 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1474:	b5f0      	push	{r4, r5, r6, r7, lr}
    1476:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1478:	ac01      	add	r4, sp, #4
    147a:	2501      	movs	r5, #1
    147c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    147e:	2700      	movs	r7, #0
    1480:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1482:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1484:	0021      	movs	r1, r4
    1486:	2017      	movs	r0, #23
    1488:	4e06      	ldr	r6, [pc, #24]	; (14a4 <system_board_init+0x30>)
    148a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    148c:	2280      	movs	r2, #128	; 0x80
    148e:	0412      	lsls	r2, r2, #16
    1490:	4b05      	ldr	r3, [pc, #20]	; (14a8 <system_board_init+0x34>)
    1492:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1494:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1496:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1498:	0021      	movs	r1, r4
    149a:	2037      	movs	r0, #55	; 0x37
    149c:	47b0      	blx	r6
}
    149e:	b003      	add	sp, #12
    14a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	00001585 	.word	0x00001585
    14a8:	41004400 	.word	0x41004400

000014ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    14ac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14ae:	2200      	movs	r2, #0
    14b0:	4b10      	ldr	r3, [pc, #64]	; (14f4 <EIC_Handler+0x48>)
    14b2:	701a      	strb	r2, [r3, #0]
    14b4:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    14b6:	4910      	ldr	r1, [pc, #64]	; (14f8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    14b8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    14ba:	4e10      	ldr	r6, [pc, #64]	; (14fc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14bc:	4c0d      	ldr	r4, [pc, #52]	; (14f4 <EIC_Handler+0x48>)
    14be:	e00a      	b.n	14d6 <EIC_Handler+0x2a>
		return eics[eic_index];
    14c0:	490d      	ldr	r1, [pc, #52]	; (14f8 <EIC_Handler+0x4c>)
    14c2:	e008      	b.n	14d6 <EIC_Handler+0x2a>
    14c4:	7823      	ldrb	r3, [r4, #0]
    14c6:	3301      	adds	r3, #1
    14c8:	b2db      	uxtb	r3, r3
    14ca:	7023      	strb	r3, [r4, #0]
    14cc:	2b0f      	cmp	r3, #15
    14ce:	d810      	bhi.n	14f2 <EIC_Handler+0x46>
		return NULL;
    14d0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    14d2:	2b1f      	cmp	r3, #31
    14d4:	d9f4      	bls.n	14c0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    14d6:	0028      	movs	r0, r5
    14d8:	4018      	ands	r0, r3
    14da:	2201      	movs	r2, #1
    14dc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    14de:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    14e0:	4210      	tst	r0, r2
    14e2:	d0ef      	beq.n	14c4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    14e4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    14e6:	009b      	lsls	r3, r3, #2
    14e8:	599b      	ldr	r3, [r3, r6]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d0ea      	beq.n	14c4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    14ee:	4798      	blx	r3
    14f0:	e7e8      	b.n	14c4 <EIC_Handler+0x18>
			}
		}
	}
}
    14f2:	bd70      	pop	{r4, r5, r6, pc}
    14f4:	20000374 	.word	0x20000374
    14f8:	40001800 	.word	0x40001800
    14fc:	20000378 	.word	0x20000378

00001500 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1500:	4a04      	ldr	r2, [pc, #16]	; (1514 <_extint_enable+0x14>)
    1502:	7813      	ldrb	r3, [r2, #0]
    1504:	2102      	movs	r1, #2
    1506:	430b      	orrs	r3, r1
    1508:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    150a:	7853      	ldrb	r3, [r2, #1]
    150c:	b25b      	sxtb	r3, r3
    150e:	2b00      	cmp	r3, #0
    1510:	dbfb      	blt.n	150a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1512:	4770      	bx	lr
    1514:	40001800 	.word	0x40001800

00001518 <_system_extint_init>:
{
    1518:	b500      	push	{lr}
    151a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    151c:	4a12      	ldr	r2, [pc, #72]	; (1568 <_system_extint_init+0x50>)
    151e:	6993      	ldr	r3, [r2, #24]
    1520:	2140      	movs	r1, #64	; 0x40
    1522:	430b      	orrs	r3, r1
    1524:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1526:	a901      	add	r1, sp, #4
    1528:	2300      	movs	r3, #0
    152a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    152c:	2005      	movs	r0, #5
    152e:	4b0f      	ldr	r3, [pc, #60]	; (156c <_system_extint_init+0x54>)
    1530:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1532:	2005      	movs	r0, #5
    1534:	4b0e      	ldr	r3, [pc, #56]	; (1570 <_system_extint_init+0x58>)
    1536:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1538:	4a0e      	ldr	r2, [pc, #56]	; (1574 <_system_extint_init+0x5c>)
    153a:	7813      	ldrb	r3, [r2, #0]
    153c:	2101      	movs	r1, #1
    153e:	430b      	orrs	r3, r1
    1540:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1542:	7853      	ldrb	r3, [r2, #1]
    1544:	b25b      	sxtb	r3, r3
    1546:	2b00      	cmp	r3, #0
    1548:	dbfb      	blt.n	1542 <_system_extint_init+0x2a>
    154a:	4b0b      	ldr	r3, [pc, #44]	; (1578 <_system_extint_init+0x60>)
    154c:	0019      	movs	r1, r3
    154e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1550:	2200      	movs	r2, #0
    1552:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1554:	4299      	cmp	r1, r3
    1556:	d1fc      	bne.n	1552 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1558:	2210      	movs	r2, #16
    155a:	4b08      	ldr	r3, [pc, #32]	; (157c <_system_extint_init+0x64>)
    155c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    155e:	4b08      	ldr	r3, [pc, #32]	; (1580 <_system_extint_init+0x68>)
    1560:	4798      	blx	r3
}
    1562:	b003      	add	sp, #12
    1564:	bd00      	pop	{pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	40000400 	.word	0x40000400
    156c:	000025a5 	.word	0x000025a5
    1570:	00002519 	.word	0x00002519
    1574:	40001800 	.word	0x40001800
    1578:	20000378 	.word	0x20000378
    157c:	e000e100 	.word	0xe000e100
    1580:	00001501 	.word	0x00001501

00001584 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1584:	b500      	push	{lr}
    1586:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1588:	ab01      	add	r3, sp, #4
    158a:	2280      	movs	r2, #128	; 0x80
    158c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    158e:	780a      	ldrb	r2, [r1, #0]
    1590:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1592:	784a      	ldrb	r2, [r1, #1]
    1594:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1596:	788a      	ldrb	r2, [r1, #2]
    1598:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    159a:	0019      	movs	r1, r3
    159c:	4b01      	ldr	r3, [pc, #4]	; (15a4 <port_pin_set_config+0x20>)
    159e:	4798      	blx	r3
}
    15a0:	b003      	add	sp, #12
    15a2:	bd00      	pop	{pc}
    15a4:	0000269d 	.word	0x0000269d

000015a8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	46de      	mov	lr, fp
    15ac:	4657      	mov	r7, sl
    15ae:	464e      	mov	r6, r9
    15b0:	4645      	mov	r5, r8
    15b2:	b5e0      	push	{r5, r6, r7, lr}
    15b4:	b087      	sub	sp, #28
    15b6:	4680      	mov	r8, r0
    15b8:	9104      	str	r1, [sp, #16]
    15ba:	0016      	movs	r6, r2
    15bc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    15be:	2200      	movs	r2, #0
    15c0:	2300      	movs	r3, #0
    15c2:	2100      	movs	r1, #0
    15c4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    15c6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    15c8:	2001      	movs	r0, #1
    15ca:	0021      	movs	r1, r4
    15cc:	9600      	str	r6, [sp, #0]
    15ce:	9701      	str	r7, [sp, #4]
    15d0:	465c      	mov	r4, fp
    15d2:	9403      	str	r4, [sp, #12]
    15d4:	4644      	mov	r4, r8
    15d6:	9405      	str	r4, [sp, #20]
    15d8:	e013      	b.n	1602 <long_division+0x5a>
    15da:	2420      	movs	r4, #32
    15dc:	1a64      	subs	r4, r4, r1
    15de:	0005      	movs	r5, r0
    15e0:	40e5      	lsrs	r5, r4
    15e2:	46a8      	mov	r8, r5
    15e4:	e014      	b.n	1610 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    15e6:	9c00      	ldr	r4, [sp, #0]
    15e8:	9d01      	ldr	r5, [sp, #4]
    15ea:	1b12      	subs	r2, r2, r4
    15ec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    15ee:	465c      	mov	r4, fp
    15f0:	464d      	mov	r5, r9
    15f2:	432c      	orrs	r4, r5
    15f4:	46a3      	mov	fp, r4
    15f6:	9c03      	ldr	r4, [sp, #12]
    15f8:	4645      	mov	r5, r8
    15fa:	432c      	orrs	r4, r5
    15fc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    15fe:	3901      	subs	r1, #1
    1600:	d325      	bcc.n	164e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1602:	2420      	movs	r4, #32
    1604:	4264      	negs	r4, r4
    1606:	190c      	adds	r4, r1, r4
    1608:	d4e7      	bmi.n	15da <long_division+0x32>
    160a:	0005      	movs	r5, r0
    160c:	40a5      	lsls	r5, r4
    160e:	46a8      	mov	r8, r5
    1610:	0004      	movs	r4, r0
    1612:	408c      	lsls	r4, r1
    1614:	46a1      	mov	r9, r4
		r = r << 1;
    1616:	1892      	adds	r2, r2, r2
    1618:	415b      	adcs	r3, r3
    161a:	0014      	movs	r4, r2
    161c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    161e:	9e05      	ldr	r6, [sp, #20]
    1620:	464f      	mov	r7, r9
    1622:	403e      	ands	r6, r7
    1624:	46b4      	mov	ip, r6
    1626:	9e04      	ldr	r6, [sp, #16]
    1628:	4647      	mov	r7, r8
    162a:	403e      	ands	r6, r7
    162c:	46b2      	mov	sl, r6
    162e:	4666      	mov	r6, ip
    1630:	4657      	mov	r7, sl
    1632:	433e      	orrs	r6, r7
    1634:	d003      	beq.n	163e <long_division+0x96>
			r |= 0x01;
    1636:	0006      	movs	r6, r0
    1638:	4326      	orrs	r6, r4
    163a:	0032      	movs	r2, r6
    163c:	002b      	movs	r3, r5
		if (r >= d) {
    163e:	9c00      	ldr	r4, [sp, #0]
    1640:	9d01      	ldr	r5, [sp, #4]
    1642:	429d      	cmp	r5, r3
    1644:	d8db      	bhi.n	15fe <long_division+0x56>
    1646:	d1ce      	bne.n	15e6 <long_division+0x3e>
    1648:	4294      	cmp	r4, r2
    164a:	d8d8      	bhi.n	15fe <long_division+0x56>
    164c:	e7cb      	b.n	15e6 <long_division+0x3e>
    164e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1650:	4658      	mov	r0, fp
    1652:	0019      	movs	r1, r3
    1654:	b007      	add	sp, #28
    1656:	bc3c      	pop	{r2, r3, r4, r5}
    1658:	4690      	mov	r8, r2
    165a:	4699      	mov	r9, r3
    165c:	46a2      	mov	sl, r4
    165e:	46ab      	mov	fp, r5
    1660:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001662 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1662:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1664:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1666:	2340      	movs	r3, #64	; 0x40
    1668:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    166a:	4281      	cmp	r1, r0
    166c:	d202      	bcs.n	1674 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    166e:	0018      	movs	r0, r3
    1670:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1672:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1674:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1676:	1c63      	adds	r3, r4, #1
    1678:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    167a:	4288      	cmp	r0, r1
    167c:	d9f9      	bls.n	1672 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    167e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1680:	2cff      	cmp	r4, #255	; 0xff
    1682:	d8f4      	bhi.n	166e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1684:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1686:	2300      	movs	r3, #0
    1688:	e7f1      	b.n	166e <_sercom_get_sync_baud_val+0xc>
	...

0000168c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    168c:	b5f0      	push	{r4, r5, r6, r7, lr}
    168e:	b083      	sub	sp, #12
    1690:	000f      	movs	r7, r1
    1692:	0016      	movs	r6, r2
    1694:	aa08      	add	r2, sp, #32
    1696:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1698:	0004      	movs	r4, r0
    169a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    169c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    169e:	42bc      	cmp	r4, r7
    16a0:	d902      	bls.n	16a8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    16a2:	0010      	movs	r0, r2
    16a4:	b003      	add	sp, #12
    16a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    16a8:	2b00      	cmp	r3, #0
    16aa:	d114      	bne.n	16d6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    16ac:	0002      	movs	r2, r0
    16ae:	0008      	movs	r0, r1
    16b0:	2100      	movs	r1, #0
    16b2:	4c19      	ldr	r4, [pc, #100]	; (1718 <_sercom_get_async_baud_val+0x8c>)
    16b4:	47a0      	blx	r4
    16b6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    16b8:	003a      	movs	r2, r7
    16ba:	2300      	movs	r3, #0
    16bc:	2000      	movs	r0, #0
    16be:	4c17      	ldr	r4, [pc, #92]	; (171c <_sercom_get_async_baud_val+0x90>)
    16c0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    16c2:	2200      	movs	r2, #0
    16c4:	2301      	movs	r3, #1
    16c6:	1a12      	subs	r2, r2, r0
    16c8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    16ca:	0c12      	lsrs	r2, r2, #16
    16cc:	041b      	lsls	r3, r3, #16
    16ce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    16d0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    16d2:	2200      	movs	r2, #0
    16d4:	e7e5      	b.n	16a2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    16d6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    16d8:	2b01      	cmp	r3, #1
    16da:	d1f9      	bne.n	16d0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    16dc:	000a      	movs	r2, r1
    16de:	2300      	movs	r3, #0
    16e0:	2100      	movs	r1, #0
    16e2:	4c0d      	ldr	r4, [pc, #52]	; (1718 <_sercom_get_async_baud_val+0x8c>)
    16e4:	47a0      	blx	r4
    16e6:	0002      	movs	r2, r0
    16e8:	000b      	movs	r3, r1
    16ea:	9200      	str	r2, [sp, #0]
    16ec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    16ee:	0038      	movs	r0, r7
    16f0:	2100      	movs	r1, #0
    16f2:	4c0a      	ldr	r4, [pc, #40]	; (171c <_sercom_get_async_baud_val+0x90>)
    16f4:	47a0      	blx	r4
    16f6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    16f8:	2380      	movs	r3, #128	; 0x80
    16fa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16fc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    16fe:	4298      	cmp	r0, r3
    1700:	d8cf      	bhi.n	16a2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1702:	0f79      	lsrs	r1, r7, #29
    1704:	00f8      	lsls	r0, r7, #3
    1706:	9a00      	ldr	r2, [sp, #0]
    1708:	9b01      	ldr	r3, [sp, #4]
    170a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    170c:	00ea      	lsls	r2, r5, #3
    170e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1710:	b2d2      	uxtb	r2, r2
    1712:	0352      	lsls	r2, r2, #13
    1714:	432a      	orrs	r2, r5
    1716:	e7db      	b.n	16d0 <_sercom_get_async_baud_val+0x44>
    1718:	00002c91 	.word	0x00002c91
    171c:	000015a9 	.word	0x000015a9

00001720 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1720:	b510      	push	{r4, lr}
    1722:	b082      	sub	sp, #8
    1724:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1726:	4b0e      	ldr	r3, [pc, #56]	; (1760 <sercom_set_gclk_generator+0x40>)
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	2b00      	cmp	r3, #0
    172c:	d007      	beq.n	173e <sercom_set_gclk_generator+0x1e>
    172e:	2900      	cmp	r1, #0
    1730:	d105      	bne.n	173e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1732:	4b0b      	ldr	r3, [pc, #44]	; (1760 <sercom_set_gclk_generator+0x40>)
    1734:	785b      	ldrb	r3, [r3, #1]
    1736:	4283      	cmp	r3, r0
    1738:	d010      	beq.n	175c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    173a:	201d      	movs	r0, #29
    173c:	e00c      	b.n	1758 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    173e:	a901      	add	r1, sp, #4
    1740:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1742:	2013      	movs	r0, #19
    1744:	4b07      	ldr	r3, [pc, #28]	; (1764 <sercom_set_gclk_generator+0x44>)
    1746:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1748:	2013      	movs	r0, #19
    174a:	4b07      	ldr	r3, [pc, #28]	; (1768 <sercom_set_gclk_generator+0x48>)
    174c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    174e:	4b04      	ldr	r3, [pc, #16]	; (1760 <sercom_set_gclk_generator+0x40>)
    1750:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1752:	2201      	movs	r2, #1
    1754:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1756:	2000      	movs	r0, #0
}
    1758:	b002      	add	sp, #8
    175a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    175c:	2000      	movs	r0, #0
    175e:	e7fb      	b.n	1758 <sercom_set_gclk_generator+0x38>
    1760:	20000238 	.word	0x20000238
    1764:	000025a5 	.word	0x000025a5
    1768:	00002519 	.word	0x00002519

0000176c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    176c:	4b40      	ldr	r3, [pc, #256]	; (1870 <_sercom_get_default_pad+0x104>)
    176e:	4298      	cmp	r0, r3
    1770:	d031      	beq.n	17d6 <_sercom_get_default_pad+0x6a>
    1772:	d90a      	bls.n	178a <_sercom_get_default_pad+0x1e>
    1774:	4b3f      	ldr	r3, [pc, #252]	; (1874 <_sercom_get_default_pad+0x108>)
    1776:	4298      	cmp	r0, r3
    1778:	d04d      	beq.n	1816 <_sercom_get_default_pad+0xaa>
    177a:	4b3f      	ldr	r3, [pc, #252]	; (1878 <_sercom_get_default_pad+0x10c>)
    177c:	4298      	cmp	r0, r3
    177e:	d05a      	beq.n	1836 <_sercom_get_default_pad+0xca>
    1780:	4b3e      	ldr	r3, [pc, #248]	; (187c <_sercom_get_default_pad+0x110>)
    1782:	4298      	cmp	r0, r3
    1784:	d037      	beq.n	17f6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1786:	2000      	movs	r0, #0
}
    1788:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    178a:	4b3d      	ldr	r3, [pc, #244]	; (1880 <_sercom_get_default_pad+0x114>)
    178c:	4298      	cmp	r0, r3
    178e:	d00c      	beq.n	17aa <_sercom_get_default_pad+0x3e>
    1790:	4b3c      	ldr	r3, [pc, #240]	; (1884 <_sercom_get_default_pad+0x118>)
    1792:	4298      	cmp	r0, r3
    1794:	d1f7      	bne.n	1786 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1796:	2901      	cmp	r1, #1
    1798:	d017      	beq.n	17ca <_sercom_get_default_pad+0x5e>
    179a:	2900      	cmp	r1, #0
    179c:	d05d      	beq.n	185a <_sercom_get_default_pad+0xee>
    179e:	2902      	cmp	r1, #2
    17a0:	d015      	beq.n	17ce <_sercom_get_default_pad+0x62>
    17a2:	2903      	cmp	r1, #3
    17a4:	d015      	beq.n	17d2 <_sercom_get_default_pad+0x66>
	return 0;
    17a6:	2000      	movs	r0, #0
    17a8:	e7ee      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17aa:	2901      	cmp	r1, #1
    17ac:	d007      	beq.n	17be <_sercom_get_default_pad+0x52>
    17ae:	2900      	cmp	r1, #0
    17b0:	d051      	beq.n	1856 <_sercom_get_default_pad+0xea>
    17b2:	2902      	cmp	r1, #2
    17b4:	d005      	beq.n	17c2 <_sercom_get_default_pad+0x56>
    17b6:	2903      	cmp	r1, #3
    17b8:	d005      	beq.n	17c6 <_sercom_get_default_pad+0x5a>
	return 0;
    17ba:	2000      	movs	r0, #0
    17bc:	e7e4      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17be:	4832      	ldr	r0, [pc, #200]	; (1888 <_sercom_get_default_pad+0x11c>)
    17c0:	e7e2      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17c2:	4832      	ldr	r0, [pc, #200]	; (188c <_sercom_get_default_pad+0x120>)
    17c4:	e7e0      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17c6:	4832      	ldr	r0, [pc, #200]	; (1890 <_sercom_get_default_pad+0x124>)
    17c8:	e7de      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17ca:	4832      	ldr	r0, [pc, #200]	; (1894 <_sercom_get_default_pad+0x128>)
    17cc:	e7dc      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17ce:	4832      	ldr	r0, [pc, #200]	; (1898 <_sercom_get_default_pad+0x12c>)
    17d0:	e7da      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17d2:	4832      	ldr	r0, [pc, #200]	; (189c <_sercom_get_default_pad+0x130>)
    17d4:	e7d8      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17d6:	2901      	cmp	r1, #1
    17d8:	d007      	beq.n	17ea <_sercom_get_default_pad+0x7e>
    17da:	2900      	cmp	r1, #0
    17dc:	d03f      	beq.n	185e <_sercom_get_default_pad+0xf2>
    17de:	2902      	cmp	r1, #2
    17e0:	d005      	beq.n	17ee <_sercom_get_default_pad+0x82>
    17e2:	2903      	cmp	r1, #3
    17e4:	d005      	beq.n	17f2 <_sercom_get_default_pad+0x86>
	return 0;
    17e6:	2000      	movs	r0, #0
    17e8:	e7ce      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17ea:	482d      	ldr	r0, [pc, #180]	; (18a0 <_sercom_get_default_pad+0x134>)
    17ec:	e7cc      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17ee:	482d      	ldr	r0, [pc, #180]	; (18a4 <_sercom_get_default_pad+0x138>)
    17f0:	e7ca      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17f2:	482d      	ldr	r0, [pc, #180]	; (18a8 <_sercom_get_default_pad+0x13c>)
    17f4:	e7c8      	b.n	1788 <_sercom_get_default_pad+0x1c>
    17f6:	2901      	cmp	r1, #1
    17f8:	d007      	beq.n	180a <_sercom_get_default_pad+0x9e>
    17fa:	2900      	cmp	r1, #0
    17fc:	d031      	beq.n	1862 <_sercom_get_default_pad+0xf6>
    17fe:	2902      	cmp	r1, #2
    1800:	d005      	beq.n	180e <_sercom_get_default_pad+0xa2>
    1802:	2903      	cmp	r1, #3
    1804:	d005      	beq.n	1812 <_sercom_get_default_pad+0xa6>
	return 0;
    1806:	2000      	movs	r0, #0
    1808:	e7be      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    180a:	4828      	ldr	r0, [pc, #160]	; (18ac <_sercom_get_default_pad+0x140>)
    180c:	e7bc      	b.n	1788 <_sercom_get_default_pad+0x1c>
    180e:	4828      	ldr	r0, [pc, #160]	; (18b0 <_sercom_get_default_pad+0x144>)
    1810:	e7ba      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1812:	4828      	ldr	r0, [pc, #160]	; (18b4 <_sercom_get_default_pad+0x148>)
    1814:	e7b8      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1816:	2901      	cmp	r1, #1
    1818:	d007      	beq.n	182a <_sercom_get_default_pad+0xbe>
    181a:	2900      	cmp	r1, #0
    181c:	d023      	beq.n	1866 <_sercom_get_default_pad+0xfa>
    181e:	2902      	cmp	r1, #2
    1820:	d005      	beq.n	182e <_sercom_get_default_pad+0xc2>
    1822:	2903      	cmp	r1, #3
    1824:	d005      	beq.n	1832 <_sercom_get_default_pad+0xc6>
	return 0;
    1826:	2000      	movs	r0, #0
    1828:	e7ae      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    182a:	4823      	ldr	r0, [pc, #140]	; (18b8 <_sercom_get_default_pad+0x14c>)
    182c:	e7ac      	b.n	1788 <_sercom_get_default_pad+0x1c>
    182e:	4823      	ldr	r0, [pc, #140]	; (18bc <_sercom_get_default_pad+0x150>)
    1830:	e7aa      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1832:	4823      	ldr	r0, [pc, #140]	; (18c0 <_sercom_get_default_pad+0x154>)
    1834:	e7a8      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1836:	2901      	cmp	r1, #1
    1838:	d007      	beq.n	184a <_sercom_get_default_pad+0xde>
    183a:	2900      	cmp	r1, #0
    183c:	d015      	beq.n	186a <_sercom_get_default_pad+0xfe>
    183e:	2902      	cmp	r1, #2
    1840:	d005      	beq.n	184e <_sercom_get_default_pad+0xe2>
    1842:	2903      	cmp	r1, #3
    1844:	d005      	beq.n	1852 <_sercom_get_default_pad+0xe6>
	return 0;
    1846:	2000      	movs	r0, #0
    1848:	e79e      	b.n	1788 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    184a:	481e      	ldr	r0, [pc, #120]	; (18c4 <_sercom_get_default_pad+0x158>)
    184c:	e79c      	b.n	1788 <_sercom_get_default_pad+0x1c>
    184e:	481e      	ldr	r0, [pc, #120]	; (18c8 <_sercom_get_default_pad+0x15c>)
    1850:	e79a      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1852:	481e      	ldr	r0, [pc, #120]	; (18cc <_sercom_get_default_pad+0x160>)
    1854:	e798      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1856:	481e      	ldr	r0, [pc, #120]	; (18d0 <_sercom_get_default_pad+0x164>)
    1858:	e796      	b.n	1788 <_sercom_get_default_pad+0x1c>
    185a:	2003      	movs	r0, #3
    185c:	e794      	b.n	1788 <_sercom_get_default_pad+0x1c>
    185e:	481d      	ldr	r0, [pc, #116]	; (18d4 <_sercom_get_default_pad+0x168>)
    1860:	e792      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1862:	481d      	ldr	r0, [pc, #116]	; (18d8 <_sercom_get_default_pad+0x16c>)
    1864:	e790      	b.n	1788 <_sercom_get_default_pad+0x1c>
    1866:	481d      	ldr	r0, [pc, #116]	; (18dc <_sercom_get_default_pad+0x170>)
    1868:	e78e      	b.n	1788 <_sercom_get_default_pad+0x1c>
    186a:	481d      	ldr	r0, [pc, #116]	; (18e0 <_sercom_get_default_pad+0x174>)
    186c:	e78c      	b.n	1788 <_sercom_get_default_pad+0x1c>
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	42001000 	.word	0x42001000
    1874:	42001800 	.word	0x42001800
    1878:	42001c00 	.word	0x42001c00
    187c:	42001400 	.word	0x42001400
    1880:	42000800 	.word	0x42000800
    1884:	42000c00 	.word	0x42000c00
    1888:	00050003 	.word	0x00050003
    188c:	00060003 	.word	0x00060003
    1890:	00070003 	.word	0x00070003
    1894:	00010003 	.word	0x00010003
    1898:	001e0003 	.word	0x001e0003
    189c:	001f0003 	.word	0x001f0003
    18a0:	00090003 	.word	0x00090003
    18a4:	000a0003 	.word	0x000a0003
    18a8:	000b0003 	.word	0x000b0003
    18ac:	00110003 	.word	0x00110003
    18b0:	00120003 	.word	0x00120003
    18b4:	00130003 	.word	0x00130003
    18b8:	000d0003 	.word	0x000d0003
    18bc:	000e0003 	.word	0x000e0003
    18c0:	000f0003 	.word	0x000f0003
    18c4:	00170003 	.word	0x00170003
    18c8:	00180003 	.word	0x00180003
    18cc:	00190003 	.word	0x00190003
    18d0:	00040003 	.word	0x00040003
    18d4:	00080003 	.word	0x00080003
    18d8:	00100003 	.word	0x00100003
    18dc:	000c0003 	.word	0x000c0003
    18e0:	00160003 	.word	0x00160003

000018e4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    18e4:	b530      	push	{r4, r5, lr}
    18e6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18e8:	4b0b      	ldr	r3, [pc, #44]	; (1918 <_sercom_get_sercom_inst_index+0x34>)
    18ea:	466a      	mov	r2, sp
    18ec:	cb32      	ldmia	r3!, {r1, r4, r5}
    18ee:	c232      	stmia	r2!, {r1, r4, r5}
    18f0:	cb32      	ldmia	r3!, {r1, r4, r5}
    18f2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18f4:	9b00      	ldr	r3, [sp, #0]
    18f6:	4283      	cmp	r3, r0
    18f8:	d00b      	beq.n	1912 <_sercom_get_sercom_inst_index+0x2e>
    18fa:	2301      	movs	r3, #1
    18fc:	009a      	lsls	r2, r3, #2
    18fe:	4669      	mov	r1, sp
    1900:	5852      	ldr	r2, [r2, r1]
    1902:	4282      	cmp	r2, r0
    1904:	d006      	beq.n	1914 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1906:	3301      	adds	r3, #1
    1908:	2b06      	cmp	r3, #6
    190a:	d1f7      	bne.n	18fc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    190c:	2000      	movs	r0, #0
}
    190e:	b007      	add	sp, #28
    1910:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1912:	2300      	movs	r3, #0
			return i;
    1914:	b2d8      	uxtb	r0, r3
    1916:	e7fa      	b.n	190e <_sercom_get_sercom_inst_index+0x2a>
    1918:	000069f4 	.word	0x000069f4

0000191c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    191c:	4770      	bx	lr
	...

00001920 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1920:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1922:	4b0a      	ldr	r3, [pc, #40]	; (194c <_sercom_set_handler+0x2c>)
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	2b00      	cmp	r3, #0
    1928:	d10c      	bne.n	1944 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    192a:	4f09      	ldr	r7, [pc, #36]	; (1950 <_sercom_set_handler+0x30>)
    192c:	4e09      	ldr	r6, [pc, #36]	; (1954 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    192e:	4d0a      	ldr	r5, [pc, #40]	; (1958 <_sercom_set_handler+0x38>)
    1930:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1932:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1934:	195a      	adds	r2, r3, r5
    1936:	6014      	str	r4, [r2, #0]
    1938:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    193a:	2b18      	cmp	r3, #24
    193c:	d1f9      	bne.n	1932 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    193e:	2201      	movs	r2, #1
    1940:	4b02      	ldr	r3, [pc, #8]	; (194c <_sercom_set_handler+0x2c>)
    1942:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1944:	0080      	lsls	r0, r0, #2
    1946:	4b02      	ldr	r3, [pc, #8]	; (1950 <_sercom_set_handler+0x30>)
    1948:	50c1      	str	r1, [r0, r3]
}
    194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    194c:	2000023a 	.word	0x2000023a
    1950:	2000023c 	.word	0x2000023c
    1954:	0000191d 	.word	0x0000191d
    1958:	200003b8 	.word	0x200003b8

0000195c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    195c:	b500      	push	{lr}
    195e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1960:	2309      	movs	r3, #9
    1962:	466a      	mov	r2, sp
    1964:	7013      	strb	r3, [r2, #0]
    1966:	3301      	adds	r3, #1
    1968:	7053      	strb	r3, [r2, #1]
    196a:	3301      	adds	r3, #1
    196c:	7093      	strb	r3, [r2, #2]
    196e:	3301      	adds	r3, #1
    1970:	70d3      	strb	r3, [r2, #3]
    1972:	3301      	adds	r3, #1
    1974:	7113      	strb	r3, [r2, #4]
    1976:	3301      	adds	r3, #1
    1978:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    197a:	4b03      	ldr	r3, [pc, #12]	; (1988 <_sercom_get_interrupt_vector+0x2c>)
    197c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    197e:	466b      	mov	r3, sp
    1980:	5618      	ldrsb	r0, [r3, r0]
}
    1982:	b003      	add	sp, #12
    1984:	bd00      	pop	{pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000018e5 	.word	0x000018e5

0000198c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    198c:	b510      	push	{r4, lr}
    198e:	4b02      	ldr	r3, [pc, #8]	; (1998 <SERCOM0_Handler+0xc>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	2000      	movs	r0, #0
    1994:	4798      	blx	r3
    1996:	bd10      	pop	{r4, pc}
    1998:	2000023c 	.word	0x2000023c

0000199c <SERCOM1_Handler>:
    199c:	b510      	push	{r4, lr}
    199e:	4b02      	ldr	r3, [pc, #8]	; (19a8 <SERCOM1_Handler+0xc>)
    19a0:	685b      	ldr	r3, [r3, #4]
    19a2:	2001      	movs	r0, #1
    19a4:	4798      	blx	r3
    19a6:	bd10      	pop	{r4, pc}
    19a8:	2000023c 	.word	0x2000023c

000019ac <SERCOM2_Handler>:
    19ac:	b510      	push	{r4, lr}
    19ae:	4b02      	ldr	r3, [pc, #8]	; (19b8 <SERCOM2_Handler+0xc>)
    19b0:	689b      	ldr	r3, [r3, #8]
    19b2:	2002      	movs	r0, #2
    19b4:	4798      	blx	r3
    19b6:	bd10      	pop	{r4, pc}
    19b8:	2000023c 	.word	0x2000023c

000019bc <SERCOM3_Handler>:
    19bc:	b510      	push	{r4, lr}
    19be:	4b02      	ldr	r3, [pc, #8]	; (19c8 <SERCOM3_Handler+0xc>)
    19c0:	68db      	ldr	r3, [r3, #12]
    19c2:	2003      	movs	r0, #3
    19c4:	4798      	blx	r3
    19c6:	bd10      	pop	{r4, pc}
    19c8:	2000023c 	.word	0x2000023c

000019cc <SERCOM4_Handler>:
    19cc:	b510      	push	{r4, lr}
    19ce:	4b02      	ldr	r3, [pc, #8]	; (19d8 <SERCOM4_Handler+0xc>)
    19d0:	691b      	ldr	r3, [r3, #16]
    19d2:	2004      	movs	r0, #4
    19d4:	4798      	blx	r3
    19d6:	bd10      	pop	{r4, pc}
    19d8:	2000023c 	.word	0x2000023c

000019dc <SERCOM5_Handler>:
    19dc:	b510      	push	{r4, lr}
    19de:	4b02      	ldr	r3, [pc, #8]	; (19e8 <SERCOM5_Handler+0xc>)
    19e0:	695b      	ldr	r3, [r3, #20]
    19e2:	2005      	movs	r0, #5
    19e4:	4798      	blx	r3
    19e6:	bd10      	pop	{r4, pc}
    19e8:	2000023c 	.word	0x2000023c

000019ec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    19ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ee:	46de      	mov	lr, fp
    19f0:	4657      	mov	r7, sl
    19f2:	464e      	mov	r6, r9
    19f4:	4645      	mov	r5, r8
    19f6:	b5e0      	push	{r5, r6, r7, lr}
    19f8:	b091      	sub	sp, #68	; 0x44
    19fa:	0005      	movs	r5, r0
    19fc:	000c      	movs	r4, r1
    19fe:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a00:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a02:	0008      	movs	r0, r1
    1a04:	4bbc      	ldr	r3, [pc, #752]	; (1cf8 <usart_init+0x30c>)
    1a06:	4798      	blx	r3
    1a08:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a0a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a0c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a0e:	07db      	lsls	r3, r3, #31
    1a10:	d506      	bpl.n	1a20 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1a12:	b011      	add	sp, #68	; 0x44
    1a14:	bc3c      	pop	{r2, r3, r4, r5}
    1a16:	4690      	mov	r8, r2
    1a18:	4699      	mov	r9, r3
    1a1a:	46a2      	mov	sl, r4
    1a1c:	46ab      	mov	fp, r5
    1a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a20:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1a22:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a24:	079b      	lsls	r3, r3, #30
    1a26:	d4f4      	bmi.n	1a12 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1a28:	49b4      	ldr	r1, [pc, #720]	; (1cfc <usart_init+0x310>)
    1a2a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1a2c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1a2e:	2301      	movs	r3, #1
    1a30:	40bb      	lsls	r3, r7
    1a32:	4303      	orrs	r3, r0
    1a34:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1a36:	a90f      	add	r1, sp, #60	; 0x3c
    1a38:	272d      	movs	r7, #45	; 0x2d
    1a3a:	5df3      	ldrb	r3, [r6, r7]
    1a3c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a3e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a40:	b2d3      	uxtb	r3, r2
    1a42:	9302      	str	r3, [sp, #8]
    1a44:	0018      	movs	r0, r3
    1a46:	4bae      	ldr	r3, [pc, #696]	; (1d00 <usart_init+0x314>)
    1a48:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1a4a:	9802      	ldr	r0, [sp, #8]
    1a4c:	4bad      	ldr	r3, [pc, #692]	; (1d04 <usart_init+0x318>)
    1a4e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1a50:	5df0      	ldrb	r0, [r6, r7]
    1a52:	2100      	movs	r1, #0
    1a54:	4bac      	ldr	r3, [pc, #688]	; (1d08 <usart_init+0x31c>)
    1a56:	4798      	blx	r3
	module->character_size = config->character_size;
    1a58:	7af3      	ldrb	r3, [r6, #11]
    1a5a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1a5c:	2324      	movs	r3, #36	; 0x24
    1a5e:	5cf3      	ldrb	r3, [r6, r3]
    1a60:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1a62:	2325      	movs	r3, #37	; 0x25
    1a64:	5cf3      	ldrb	r3, [r6, r3]
    1a66:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1a68:	7ef3      	ldrb	r3, [r6, #27]
    1a6a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a6c:	7f33      	ldrb	r3, [r6, #28]
    1a6e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a70:	682b      	ldr	r3, [r5, #0]
    1a72:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a74:	0018      	movs	r0, r3
    1a76:	4ba0      	ldr	r3, [pc, #640]	; (1cf8 <usart_init+0x30c>)
    1a78:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a7a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1a7c:	2200      	movs	r2, #0
    1a7e:	230e      	movs	r3, #14
    1a80:	a906      	add	r1, sp, #24
    1a82:	468c      	mov	ip, r1
    1a84:	4463      	add	r3, ip
    1a86:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1a88:	8a32      	ldrh	r2, [r6, #16]
    1a8a:	9202      	str	r2, [sp, #8]
    1a8c:	2380      	movs	r3, #128	; 0x80
    1a8e:	01db      	lsls	r3, r3, #7
    1a90:	429a      	cmp	r2, r3
    1a92:	d100      	bne.n	1a96 <usart_init+0xaa>
    1a94:	e09e      	b.n	1bd4 <usart_init+0x1e8>
    1a96:	d90f      	bls.n	1ab8 <usart_init+0xcc>
    1a98:	23c0      	movs	r3, #192	; 0xc0
    1a9a:	01db      	lsls	r3, r3, #7
    1a9c:	9a02      	ldr	r2, [sp, #8]
    1a9e:	429a      	cmp	r2, r3
    1aa0:	d100      	bne.n	1aa4 <usart_init+0xb8>
    1aa2:	e092      	b.n	1bca <usart_init+0x1de>
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	021b      	lsls	r3, r3, #8
    1aa8:	429a      	cmp	r2, r3
    1aaa:	d000      	beq.n	1aae <usart_init+0xc2>
    1aac:	e11f      	b.n	1cee <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1aae:	2303      	movs	r3, #3
    1ab0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1ab2:	2300      	movs	r3, #0
    1ab4:	9307      	str	r3, [sp, #28]
    1ab6:	e008      	b.n	1aca <usart_init+0xde>
	switch (config->sample_rate) {
    1ab8:	2380      	movs	r3, #128	; 0x80
    1aba:	019b      	lsls	r3, r3, #6
    1abc:	429a      	cmp	r2, r3
    1abe:	d000      	beq.n	1ac2 <usart_init+0xd6>
    1ac0:	e115      	b.n	1cee <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ac2:	2310      	movs	r3, #16
    1ac4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1ac6:	3b0f      	subs	r3, #15
    1ac8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1aca:	6833      	ldr	r3, [r6, #0]
    1acc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1ace:	68f3      	ldr	r3, [r6, #12]
    1ad0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1ad2:	6973      	ldr	r3, [r6, #20]
    1ad4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ad6:	7e33      	ldrb	r3, [r6, #24]
    1ad8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ada:	2326      	movs	r3, #38	; 0x26
    1adc:	5cf3      	ldrb	r3, [r6, r3]
    1ade:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1ae0:	6873      	ldr	r3, [r6, #4]
    1ae2:	4699      	mov	r9, r3
	switch (transfer_mode)
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d100      	bne.n	1aea <usart_init+0xfe>
    1ae8:	e0a0      	b.n	1c2c <usart_init+0x240>
    1aea:	2380      	movs	r3, #128	; 0x80
    1aec:	055b      	lsls	r3, r3, #21
    1aee:	4599      	cmp	r9, r3
    1af0:	d100      	bne.n	1af4 <usart_init+0x108>
    1af2:	e084      	b.n	1bfe <usart_init+0x212>
	if(config->encoding_format_enable) {
    1af4:	7e73      	ldrb	r3, [r6, #25]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d002      	beq.n	1b00 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1afa:	7eb3      	ldrb	r3, [r6, #26]
    1afc:	4642      	mov	r2, r8
    1afe:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b00:	682a      	ldr	r2, [r5, #0]
    1b02:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b04:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b06:	2b00      	cmp	r3, #0
    1b08:	d1fc      	bne.n	1b04 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1b0a:	330e      	adds	r3, #14
    1b0c:	aa06      	add	r2, sp, #24
    1b0e:	4694      	mov	ip, r2
    1b10:	4463      	add	r3, ip
    1b12:	881b      	ldrh	r3, [r3, #0]
    1b14:	4642      	mov	r2, r8
    1b16:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1b18:	9b05      	ldr	r3, [sp, #20]
    1b1a:	9a03      	ldr	r2, [sp, #12]
    1b1c:	4313      	orrs	r3, r2
    1b1e:	9a04      	ldr	r2, [sp, #16]
    1b20:	4313      	orrs	r3, r2
    1b22:	464a      	mov	r2, r9
    1b24:	4313      	orrs	r3, r2
    1b26:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b28:	465b      	mov	r3, fp
    1b2a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1b2c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b2e:	4653      	mov	r3, sl
    1b30:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1b32:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1b34:	2327      	movs	r3, #39	; 0x27
    1b36:	5cf3      	ldrb	r3, [r6, r3]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d101      	bne.n	1b40 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1b3c:	3304      	adds	r3, #4
    1b3e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b40:	7e73      	ldrb	r3, [r6, #25]
    1b42:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b44:	7f32      	ldrb	r2, [r6, #28]
    1b46:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b48:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b4a:	7f72      	ldrb	r2, [r6, #29]
    1b4c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b4e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b50:	2224      	movs	r2, #36	; 0x24
    1b52:	5cb2      	ldrb	r2, [r6, r2]
    1b54:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b56:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1b58:	2225      	movs	r2, #37	; 0x25
    1b5a:	5cb2      	ldrb	r2, [r6, r2]
    1b5c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b5e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1b60:	7ab1      	ldrb	r1, [r6, #10]
    1b62:	7af2      	ldrb	r2, [r6, #11]
    1b64:	4311      	orrs	r1, r2
    1b66:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1b68:	8933      	ldrh	r3, [r6, #8]
    1b6a:	2bff      	cmp	r3, #255	; 0xff
    1b6c:	d100      	bne.n	1b70 <usart_init+0x184>
    1b6e:	e081      	b.n	1c74 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1b70:	2280      	movs	r2, #128	; 0x80
    1b72:	0452      	lsls	r2, r2, #17
    1b74:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1b76:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1b78:	232c      	movs	r3, #44	; 0x2c
    1b7a:	5cf3      	ldrb	r3, [r6, r3]
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d103      	bne.n	1b88 <usart_init+0x19c>
    1b80:	4b62      	ldr	r3, [pc, #392]	; (1d0c <usart_init+0x320>)
    1b82:	789b      	ldrb	r3, [r3, #2]
    1b84:	079b      	lsls	r3, r3, #30
    1b86:	d501      	bpl.n	1b8c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1b88:	2380      	movs	r3, #128	; 0x80
    1b8a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b8e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b90:	2b00      	cmp	r3, #0
    1b92:	d1fc      	bne.n	1b8e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1b94:	4643      	mov	r3, r8
    1b96:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b98:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b9a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d1fc      	bne.n	1b9a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1ba0:	4643      	mov	r3, r8
    1ba2:	601f      	str	r7, [r3, #0]
    1ba4:	ab0e      	add	r3, sp, #56	; 0x38
    1ba6:	2280      	movs	r2, #128	; 0x80
    1ba8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1baa:	2200      	movs	r2, #0
    1bac:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1bae:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1bb0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1bb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1bb4:	930a      	str	r3, [sp, #40]	; 0x28
    1bb6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1bb8:	930b      	str	r3, [sp, #44]	; 0x2c
    1bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1bbc:	930c      	str	r3, [sp, #48]	; 0x30
    1bbe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1bc0:	9302      	str	r3, [sp, #8]
    1bc2:	930d      	str	r3, [sp, #52]	; 0x34
    1bc4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1bc6:	ae0a      	add	r6, sp, #40	; 0x28
    1bc8:	e063      	b.n	1c92 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1bca:	2308      	movs	r3, #8
    1bcc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1bce:	3b07      	subs	r3, #7
    1bd0:	9307      	str	r3, [sp, #28]
    1bd2:	e77a      	b.n	1aca <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1bd4:	6833      	ldr	r3, [r6, #0]
    1bd6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1bd8:	68f3      	ldr	r3, [r6, #12]
    1bda:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1bdc:	6973      	ldr	r3, [r6, #20]
    1bde:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1be0:	7e33      	ldrb	r3, [r6, #24]
    1be2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1be4:	2326      	movs	r3, #38	; 0x26
    1be6:	5cf3      	ldrb	r3, [r6, r3]
    1be8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1bea:	6873      	ldr	r3, [r6, #4]
    1bec:	4699      	mov	r9, r3
	switch (transfer_mode)
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d018      	beq.n	1c24 <usart_init+0x238>
    1bf2:	2380      	movs	r3, #128	; 0x80
    1bf4:	055b      	lsls	r3, r3, #21
    1bf6:	4599      	cmp	r9, r3
    1bf8:	d001      	beq.n	1bfe <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1bfa:	2000      	movs	r0, #0
    1bfc:	e025      	b.n	1c4a <usart_init+0x25e>
			if (!config->use_external_clock) {
    1bfe:	2327      	movs	r3, #39	; 0x27
    1c00:	5cf3      	ldrb	r3, [r6, r3]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d000      	beq.n	1c08 <usart_init+0x21c>
    1c06:	e775      	b.n	1af4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c08:	6a33      	ldr	r3, [r6, #32]
    1c0a:	001f      	movs	r7, r3
    1c0c:	b2c0      	uxtb	r0, r0
    1c0e:	4b40      	ldr	r3, [pc, #256]	; (1d10 <usart_init+0x324>)
    1c10:	4798      	blx	r3
    1c12:	0001      	movs	r1, r0
    1c14:	220e      	movs	r2, #14
    1c16:	ab06      	add	r3, sp, #24
    1c18:	469c      	mov	ip, r3
    1c1a:	4462      	add	r2, ip
    1c1c:	0038      	movs	r0, r7
    1c1e:	4b3d      	ldr	r3, [pc, #244]	; (1d14 <usart_init+0x328>)
    1c20:	4798      	blx	r3
    1c22:	e012      	b.n	1c4a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c24:	2308      	movs	r3, #8
    1c26:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c28:	2300      	movs	r3, #0
    1c2a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1c2c:	2327      	movs	r3, #39	; 0x27
    1c2e:	5cf3      	ldrb	r3, [r6, r3]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d00e      	beq.n	1c52 <usart_init+0x266>
				status_code =
    1c34:	9b06      	ldr	r3, [sp, #24]
    1c36:	9300      	str	r3, [sp, #0]
    1c38:	9b07      	ldr	r3, [sp, #28]
    1c3a:	220e      	movs	r2, #14
    1c3c:	a906      	add	r1, sp, #24
    1c3e:	468c      	mov	ip, r1
    1c40:	4462      	add	r2, ip
    1c42:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1c44:	6a30      	ldr	r0, [r6, #32]
    1c46:	4f34      	ldr	r7, [pc, #208]	; (1d18 <usart_init+0x32c>)
    1c48:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d000      	beq.n	1c50 <usart_init+0x264>
    1c4e:	e6e0      	b.n	1a12 <usart_init+0x26>
    1c50:	e750      	b.n	1af4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1c52:	6a33      	ldr	r3, [r6, #32]
    1c54:	001f      	movs	r7, r3
    1c56:	b2c0      	uxtb	r0, r0
    1c58:	4b2d      	ldr	r3, [pc, #180]	; (1d10 <usart_init+0x324>)
    1c5a:	4798      	blx	r3
    1c5c:	0001      	movs	r1, r0
				status_code =
    1c5e:	9b06      	ldr	r3, [sp, #24]
    1c60:	9300      	str	r3, [sp, #0]
    1c62:	9b07      	ldr	r3, [sp, #28]
    1c64:	220e      	movs	r2, #14
    1c66:	a806      	add	r0, sp, #24
    1c68:	4684      	mov	ip, r0
    1c6a:	4462      	add	r2, ip
    1c6c:	0038      	movs	r0, r7
    1c6e:	4f2a      	ldr	r7, [pc, #168]	; (1d18 <usart_init+0x32c>)
    1c70:	47b8      	blx	r7
    1c72:	e7ea      	b.n	1c4a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1c74:	7ef3      	ldrb	r3, [r6, #27]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d100      	bne.n	1c7c <usart_init+0x290>
    1c7a:	e77d      	b.n	1b78 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1c7c:	2380      	movs	r3, #128	; 0x80
    1c7e:	04db      	lsls	r3, r3, #19
    1c80:	431f      	orrs	r7, r3
    1c82:	e779      	b.n	1b78 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c84:	0020      	movs	r0, r4
    1c86:	4b25      	ldr	r3, [pc, #148]	; (1d1c <usart_init+0x330>)
    1c88:	4798      	blx	r3
    1c8a:	e007      	b.n	1c9c <usart_init+0x2b0>
    1c8c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c8e:	2f04      	cmp	r7, #4
    1c90:	d00d      	beq.n	1cae <usart_init+0x2c2>
    1c92:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c94:	00bb      	lsls	r3, r7, #2
    1c96:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1c98:	2800      	cmp	r0, #0
    1c9a:	d0f3      	beq.n	1c84 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1c9c:	1c43      	adds	r3, r0, #1
    1c9e:	d0f5      	beq.n	1c8c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1ca0:	a90e      	add	r1, sp, #56	; 0x38
    1ca2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1ca4:	0c00      	lsrs	r0, r0, #16
    1ca6:	b2c0      	uxtb	r0, r0
    1ca8:	4b1d      	ldr	r3, [pc, #116]	; (1d20 <usart_init+0x334>)
    1caa:	4798      	blx	r3
    1cac:	e7ee      	b.n	1c8c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1cae:	2300      	movs	r3, #0
    1cb0:	60eb      	str	r3, [r5, #12]
    1cb2:	612b      	str	r3, [r5, #16]
    1cb4:	616b      	str	r3, [r5, #20]
    1cb6:	61ab      	str	r3, [r5, #24]
    1cb8:	61eb      	str	r3, [r5, #28]
    1cba:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1cbc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1cbe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1cc0:	2200      	movs	r2, #0
    1cc2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1cc4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1cc6:	3330      	adds	r3, #48	; 0x30
    1cc8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1cca:	3301      	adds	r3, #1
    1ccc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1cce:	3301      	adds	r3, #1
    1cd0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1cd2:	3301      	adds	r3, #1
    1cd4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cd6:	6828      	ldr	r0, [r5, #0]
    1cd8:	4b07      	ldr	r3, [pc, #28]	; (1cf8 <usart_init+0x30c>)
    1cda:	4798      	blx	r3
    1cdc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1cde:	4911      	ldr	r1, [pc, #68]	; (1d24 <usart_init+0x338>)
    1ce0:	4b11      	ldr	r3, [pc, #68]	; (1d28 <usart_init+0x33c>)
    1ce2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1ce4:	00a4      	lsls	r4, r4, #2
    1ce6:	4b11      	ldr	r3, [pc, #68]	; (1d2c <usart_init+0x340>)
    1ce8:	50e5      	str	r5, [r4, r3]
	return status_code;
    1cea:	2000      	movs	r0, #0
    1cec:	e691      	b.n	1a12 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1cee:	2310      	movs	r3, #16
    1cf0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1cf2:	2300      	movs	r3, #0
    1cf4:	9307      	str	r3, [sp, #28]
    1cf6:	e6e8      	b.n	1aca <usart_init+0xde>
    1cf8:	000018e5 	.word	0x000018e5
    1cfc:	40000400 	.word	0x40000400
    1d00:	000025a5 	.word	0x000025a5
    1d04:	00002519 	.word	0x00002519
    1d08:	00001721 	.word	0x00001721
    1d0c:	41002000 	.word	0x41002000
    1d10:	000025c1 	.word	0x000025c1
    1d14:	00001663 	.word	0x00001663
    1d18:	0000168d 	.word	0x0000168d
    1d1c:	0000176d 	.word	0x0000176d
    1d20:	0000269d 	.word	0x0000269d
    1d24:	00001dcd 	.word	0x00001dcd
    1d28:	00001921 	.word	0x00001921
    1d2c:	200003b8 	.word	0x200003b8

00001d30 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d30:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1d32:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1d34:	2a00      	cmp	r2, #0
    1d36:	d101      	bne.n	1d3c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1d38:	0018      	movs	r0, r3
    1d3a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1d3c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1d3e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d40:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1d42:	2a00      	cmp	r2, #0
    1d44:	d1f8      	bne.n	1d38 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d46:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d48:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d4a:	2a00      	cmp	r2, #0
    1d4c:	d1fc      	bne.n	1d48 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1d4e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d50:	2102      	movs	r1, #2
    1d52:	7e1a      	ldrb	r2, [r3, #24]
    1d54:	420a      	tst	r2, r1
    1d56:	d0fc      	beq.n	1d52 <usart_write_wait+0x22>
	return STATUS_OK;
    1d58:	2300      	movs	r3, #0
    1d5a:	e7ed      	b.n	1d38 <usart_write_wait+0x8>

00001d5c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1d5c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1d5e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1d60:	2a00      	cmp	r2, #0
    1d62:	d101      	bne.n	1d68 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1d64:	0018      	movs	r0, r3
    1d66:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1d68:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1d6a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d6c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1d6e:	2a00      	cmp	r2, #0
    1d70:	d1f8      	bne.n	1d64 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d72:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1d74:	7e10      	ldrb	r0, [r2, #24]
    1d76:	0740      	lsls	r0, r0, #29
    1d78:	d5f4      	bpl.n	1d64 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1d7a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d1fc      	bne.n	1d7a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d80:	8b53      	ldrh	r3, [r2, #26]
    1d82:	b2db      	uxtb	r3, r3
	if (error_code) {
    1d84:	0698      	lsls	r0, r3, #26
    1d86:	d01d      	beq.n	1dc4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1d88:	0798      	lsls	r0, r3, #30
    1d8a:	d503      	bpl.n	1d94 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d8c:	2302      	movs	r3, #2
    1d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1d90:	3318      	adds	r3, #24
    1d92:	e7e7      	b.n	1d64 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d94:	0758      	lsls	r0, r3, #29
    1d96:	d503      	bpl.n	1da0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d98:	2304      	movs	r3, #4
    1d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1d9c:	331a      	adds	r3, #26
    1d9e:	e7e1      	b.n	1d64 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1da0:	07d8      	lsls	r0, r3, #31
    1da2:	d503      	bpl.n	1dac <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1da4:	2301      	movs	r3, #1
    1da6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1da8:	3312      	adds	r3, #18
    1daa:	e7db      	b.n	1d64 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1dac:	06d8      	lsls	r0, r3, #27
    1dae:	d503      	bpl.n	1db8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1db0:	2310      	movs	r3, #16
    1db2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1db4:	3332      	adds	r3, #50	; 0x32
    1db6:	e7d5      	b.n	1d64 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1db8:	069b      	lsls	r3, r3, #26
    1dba:	d503      	bpl.n	1dc4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1dbc:	2320      	movs	r3, #32
    1dbe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1dc0:	3321      	adds	r3, #33	; 0x21
    1dc2:	e7cf      	b.n	1d64 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1dc4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1dc6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1dc8:	2300      	movs	r3, #0
    1dca:	e7cb      	b.n	1d64 <usart_read_wait+0x8>

00001dcc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1dce:	0080      	lsls	r0, r0, #2
    1dd0:	4b62      	ldr	r3, [pc, #392]	; (1f5c <_usart_interrupt_handler+0x190>)
    1dd2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1dd4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1dd6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d1fc      	bne.n	1dd6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1ddc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1dde:	7da6      	ldrb	r6, [r4, #22]
    1de0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1de2:	2330      	movs	r3, #48	; 0x30
    1de4:	5ceb      	ldrb	r3, [r5, r3]
    1de6:	2231      	movs	r2, #49	; 0x31
    1de8:	5caf      	ldrb	r7, [r5, r2]
    1dea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1dec:	07f3      	lsls	r3, r6, #31
    1dee:	d522      	bpl.n	1e36 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1df0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1df2:	b29b      	uxth	r3, r3
    1df4:	2b00      	cmp	r3, #0
    1df6:	d01c      	beq.n	1e32 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1df8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1dfa:	7813      	ldrb	r3, [r2, #0]
    1dfc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1dfe:	1c51      	adds	r1, r2, #1
    1e00:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e02:	7969      	ldrb	r1, [r5, #5]
    1e04:	2901      	cmp	r1, #1
    1e06:	d00e      	beq.n	1e26 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e08:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1e0a:	05db      	lsls	r3, r3, #23
    1e0c:	0ddb      	lsrs	r3, r3, #23
    1e0e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e12:	3b01      	subs	r3, #1
    1e14:	b29b      	uxth	r3, r3
    1e16:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d10c      	bne.n	1e36 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e1c:	3301      	adds	r3, #1
    1e1e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e20:	3301      	adds	r3, #1
    1e22:	75a3      	strb	r3, [r4, #22]
    1e24:	e007      	b.n	1e36 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e26:	7851      	ldrb	r1, [r2, #1]
    1e28:	0209      	lsls	r1, r1, #8
    1e2a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1e2c:	3202      	adds	r2, #2
    1e2e:	62aa      	str	r2, [r5, #40]	; 0x28
    1e30:	e7eb      	b.n	1e0a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e32:	2301      	movs	r3, #1
    1e34:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e36:	07b3      	lsls	r3, r6, #30
    1e38:	d506      	bpl.n	1e48 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1e3a:	2302      	movs	r3, #2
    1e3c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1e3e:	2200      	movs	r2, #0
    1e40:	3331      	adds	r3, #49	; 0x31
    1e42:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1e44:	07fb      	lsls	r3, r7, #31
    1e46:	d41a      	bmi.n	1e7e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1e48:	0773      	lsls	r3, r6, #29
    1e4a:	d565      	bpl.n	1f18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1e4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1e4e:	b29b      	uxth	r3, r3
    1e50:	2b00      	cmp	r3, #0
    1e52:	d05f      	beq.n	1f14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e54:	8b63      	ldrh	r3, [r4, #26]
    1e56:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1e58:	071a      	lsls	r2, r3, #28
    1e5a:	d414      	bmi.n	1e86 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e5c:	223f      	movs	r2, #63	; 0x3f
    1e5e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1e60:	2b00      	cmp	r3, #0
    1e62:	d034      	beq.n	1ece <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1e64:	079a      	lsls	r2, r3, #30
    1e66:	d511      	bpl.n	1e8c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1e68:	221a      	movs	r2, #26
    1e6a:	2332      	movs	r3, #50	; 0x32
    1e6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1e6e:	3b30      	subs	r3, #48	; 0x30
    1e70:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1e72:	077b      	lsls	r3, r7, #29
    1e74:	d550      	bpl.n	1f18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1e76:	0028      	movs	r0, r5
    1e78:	696b      	ldr	r3, [r5, #20]
    1e7a:	4798      	blx	r3
    1e7c:	e04c      	b.n	1f18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1e7e:	0028      	movs	r0, r5
    1e80:	68eb      	ldr	r3, [r5, #12]
    1e82:	4798      	blx	r3
    1e84:	e7e0      	b.n	1e48 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1e86:	2237      	movs	r2, #55	; 0x37
    1e88:	4013      	ands	r3, r2
    1e8a:	e7e9      	b.n	1e60 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1e8c:	075a      	lsls	r2, r3, #29
    1e8e:	d505      	bpl.n	1e9c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1e90:	221e      	movs	r2, #30
    1e92:	2332      	movs	r3, #50	; 0x32
    1e94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1e96:	3b2e      	subs	r3, #46	; 0x2e
    1e98:	8363      	strh	r3, [r4, #26]
    1e9a:	e7ea      	b.n	1e72 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e9c:	07da      	lsls	r2, r3, #31
    1e9e:	d505      	bpl.n	1eac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ea0:	2213      	movs	r2, #19
    1ea2:	2332      	movs	r3, #50	; 0x32
    1ea4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ea6:	3b31      	subs	r3, #49	; 0x31
    1ea8:	8363      	strh	r3, [r4, #26]
    1eaa:	e7e2      	b.n	1e72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1eac:	06da      	lsls	r2, r3, #27
    1eae:	d505      	bpl.n	1ebc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1eb0:	2242      	movs	r2, #66	; 0x42
    1eb2:	2332      	movs	r3, #50	; 0x32
    1eb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1eb6:	3b22      	subs	r3, #34	; 0x22
    1eb8:	8363      	strh	r3, [r4, #26]
    1eba:	e7da      	b.n	1e72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1ebc:	2220      	movs	r2, #32
    1ebe:	421a      	tst	r2, r3
    1ec0:	d0d7      	beq.n	1e72 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1ec2:	3221      	adds	r2, #33	; 0x21
    1ec4:	2332      	movs	r3, #50	; 0x32
    1ec6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1ec8:	3b12      	subs	r3, #18
    1eca:	8363      	strh	r3, [r4, #26]
    1ecc:	e7d1      	b.n	1e72 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1ece:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1ed0:	05db      	lsls	r3, r3, #23
    1ed2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1ed4:	b2da      	uxtb	r2, r3
    1ed6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1ed8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1eda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1edc:	1c51      	adds	r1, r2, #1
    1ede:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ee0:	7969      	ldrb	r1, [r5, #5]
    1ee2:	2901      	cmp	r1, #1
    1ee4:	d010      	beq.n	1f08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1ee6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ee8:	3b01      	subs	r3, #1
    1eea:	b29b      	uxth	r3, r3
    1eec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d112      	bne.n	1f18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ef2:	3304      	adds	r3, #4
    1ef4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1ef6:	2200      	movs	r2, #0
    1ef8:	332e      	adds	r3, #46	; 0x2e
    1efa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1efc:	07bb      	lsls	r3, r7, #30
    1efe:	d50b      	bpl.n	1f18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1f00:	0028      	movs	r0, r5
    1f02:	692b      	ldr	r3, [r5, #16]
    1f04:	4798      	blx	r3
    1f06:	e007      	b.n	1f18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1f08:	0a1b      	lsrs	r3, r3, #8
    1f0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1f0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f0e:	3301      	adds	r3, #1
    1f10:	626b      	str	r3, [r5, #36]	; 0x24
    1f12:	e7e8      	b.n	1ee6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f14:	2304      	movs	r3, #4
    1f16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f18:	06f3      	lsls	r3, r6, #27
    1f1a:	d504      	bpl.n	1f26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f1c:	2310      	movs	r3, #16
    1f1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f22:	06fb      	lsls	r3, r7, #27
    1f24:	d40e      	bmi.n	1f44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f26:	06b3      	lsls	r3, r6, #26
    1f28:	d504      	bpl.n	1f34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f2a:	2320      	movs	r3, #32
    1f2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1f30:	073b      	lsls	r3, r7, #28
    1f32:	d40b      	bmi.n	1f4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1f34:	0733      	lsls	r3, r6, #28
    1f36:	d504      	bpl.n	1f42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1f38:	2308      	movs	r3, #8
    1f3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1f3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1f3e:	06bb      	lsls	r3, r7, #26
    1f40:	d408      	bmi.n	1f54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f44:	0028      	movs	r0, r5
    1f46:	69eb      	ldr	r3, [r5, #28]
    1f48:	4798      	blx	r3
    1f4a:	e7ec      	b.n	1f26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1f4c:	0028      	movs	r0, r5
    1f4e:	69ab      	ldr	r3, [r5, #24]
    1f50:	4798      	blx	r3
    1f52:	e7ef      	b.n	1f34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1f54:	6a2b      	ldr	r3, [r5, #32]
    1f56:	0028      	movs	r0, r5
    1f58:	4798      	blx	r3
}
    1f5a:	e7f2      	b.n	1f42 <_usart_interrupt_handler+0x176>
    1f5c:	200003b8 	.word	0x200003b8

00001f60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1f60:	b510      	push	{r4, lr}
	switch (clock_source) {
    1f62:	2808      	cmp	r0, #8
    1f64:	d803      	bhi.n	1f6e <system_clock_source_get_hz+0xe>
    1f66:	0080      	lsls	r0, r0, #2
    1f68:	4b1b      	ldr	r3, [pc, #108]	; (1fd8 <system_clock_source_get_hz+0x78>)
    1f6a:	581b      	ldr	r3, [r3, r0]
    1f6c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1f6e:	2000      	movs	r0, #0
    1f70:	e030      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1f72:	4b1a      	ldr	r3, [pc, #104]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1f74:	6918      	ldr	r0, [r3, #16]
    1f76:	e02d      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1f78:	4b19      	ldr	r3, [pc, #100]	; (1fe0 <system_clock_source_get_hz+0x80>)
    1f7a:	6a1b      	ldr	r3, [r3, #32]
    1f7c:	059b      	lsls	r3, r3, #22
    1f7e:	0f9b      	lsrs	r3, r3, #30
    1f80:	4818      	ldr	r0, [pc, #96]	; (1fe4 <system_clock_source_get_hz+0x84>)
    1f82:	40d8      	lsrs	r0, r3
    1f84:	e026      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1f86:	4b15      	ldr	r3, [pc, #84]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1f88:	6958      	ldr	r0, [r3, #20]
    1f8a:	e023      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1f8c:	4b13      	ldr	r3, [pc, #76]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1f8e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1f90:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1f92:	079b      	lsls	r3, r3, #30
    1f94:	d51e      	bpl.n	1fd4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f96:	4912      	ldr	r1, [pc, #72]	; (1fe0 <system_clock_source_get_hz+0x80>)
    1f98:	2210      	movs	r2, #16
    1f9a:	68cb      	ldr	r3, [r1, #12]
    1f9c:	421a      	tst	r2, r3
    1f9e:	d0fc      	beq.n	1f9a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1fa0:	4b0e      	ldr	r3, [pc, #56]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	075b      	lsls	r3, r3, #29
    1fa6:	d401      	bmi.n	1fac <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1fa8:	480f      	ldr	r0, [pc, #60]	; (1fe8 <system_clock_source_get_hz+0x88>)
    1faa:	e013      	b.n	1fd4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1fac:	2000      	movs	r0, #0
    1fae:	4b0f      	ldr	r3, [pc, #60]	; (1fec <system_clock_source_get_hz+0x8c>)
    1fb0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1fb4:	689b      	ldr	r3, [r3, #8]
    1fb6:	041b      	lsls	r3, r3, #16
    1fb8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1fba:	4358      	muls	r0, r3
    1fbc:	e00a      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1fbe:	2350      	movs	r3, #80	; 0x50
    1fc0:	4a07      	ldr	r2, [pc, #28]	; (1fe0 <system_clock_source_get_hz+0x80>)
    1fc2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1fc4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1fc6:	075b      	lsls	r3, r3, #29
    1fc8:	d504      	bpl.n	1fd4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <system_clock_source_get_hz+0x7c>)
    1fcc:	68d8      	ldr	r0, [r3, #12]
    1fce:	e001      	b.n	1fd4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1fd0:	2080      	movs	r0, #128	; 0x80
    1fd2:	0200      	lsls	r0, r0, #8
	}
}
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00006a0c 	.word	0x00006a0c
    1fdc:	20000254 	.word	0x20000254
    1fe0:	40000800 	.word	0x40000800
    1fe4:	007a1200 	.word	0x007a1200
    1fe8:	02dc6c00 	.word	0x02dc6c00
    1fec:	000025c1 	.word	0x000025c1

00001ff0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1ff0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1ff2:	490c      	ldr	r1, [pc, #48]	; (2024 <STACK_SIZE+0x24>)
    1ff4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1ff6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ff8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ffa:	7840      	ldrb	r0, [r0, #1]
    1ffc:	2201      	movs	r2, #1
    1ffe:	4010      	ands	r0, r2
    2000:	0180      	lsls	r0, r0, #6
    2002:	2640      	movs	r6, #64	; 0x40
    2004:	43b3      	bics	r3, r6
    2006:	4303      	orrs	r3, r0
    2008:	402a      	ands	r2, r5
    200a:	01d2      	lsls	r2, r2, #7
    200c:	2080      	movs	r0, #128	; 0x80
    200e:	4383      	bics	r3, r0
    2010:	4313      	orrs	r3, r2
    2012:	2203      	movs	r2, #3
    2014:	4022      	ands	r2, r4
    2016:	0212      	lsls	r2, r2, #8
    2018:	4803      	ldr	r0, [pc, #12]	; (2028 <STACK_SIZE+0x28>)
    201a:	4003      	ands	r3, r0
    201c:	4313      	orrs	r3, r2
    201e:	620b      	str	r3, [r1, #32]
}
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	40000800 	.word	0x40000800
    2028:	fffffcff 	.word	0xfffffcff

0000202c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
    202e:	46de      	mov	lr, fp
    2030:	4657      	mov	r7, sl
    2032:	464e      	mov	r6, r9
    2034:	4645      	mov	r5, r8
    2036:	b5e0      	push	{r5, r6, r7, lr}
    2038:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    203a:	4b26      	ldr	r3, [pc, #152]	; (20d4 <system_clock_source_xosc32k_set_config+0xa8>)
    203c:	469b      	mov	fp, r3
    203e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2040:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2042:	7800      	ldrb	r0, [r0, #0]
    2044:	4242      	negs	r2, r0
    2046:	4142      	adcs	r2, r0
    2048:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    204a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    204c:	78ca      	ldrb	r2, [r1, #3]
    204e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2050:	790a      	ldrb	r2, [r1, #4]
    2052:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2054:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2056:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2058:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    205a:	688a      	ldr	r2, [r1, #8]
    205c:	491e      	ldr	r1, [pc, #120]	; (20d8 <system_clock_source_xosc32k_set_config+0xac>)
    205e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2060:	2101      	movs	r1, #1
    2062:	464a      	mov	r2, r9
    2064:	0092      	lsls	r2, r2, #2
    2066:	4691      	mov	r9, r2
    2068:	2204      	movs	r2, #4
    206a:	4393      	bics	r3, r2
    206c:	464a      	mov	r2, r9
    206e:	4313      	orrs	r3, r2
    2070:	4642      	mov	r2, r8
    2072:	400a      	ands	r2, r1
    2074:	00d2      	lsls	r2, r2, #3
    2076:	4690      	mov	r8, r2
    2078:	2208      	movs	r2, #8
    207a:	4393      	bics	r3, r2
    207c:	4642      	mov	r2, r8
    207e:	4313      	orrs	r3, r2
    2080:	4662      	mov	r2, ip
    2082:	400a      	ands	r2, r1
    2084:	0112      	lsls	r2, r2, #4
    2086:	4694      	mov	ip, r2
    2088:	2210      	movs	r2, #16
    208a:	4393      	bics	r3, r2
    208c:	4662      	mov	r2, ip
    208e:	4313      	orrs	r3, r2
    2090:	4008      	ands	r0, r1
    2092:	0140      	lsls	r0, r0, #5
    2094:	2220      	movs	r2, #32
    2096:	4393      	bics	r3, r2
    2098:	4303      	orrs	r3, r0
    209a:	400f      	ands	r7, r1
    209c:	01bf      	lsls	r7, r7, #6
    209e:	2040      	movs	r0, #64	; 0x40
    20a0:	4383      	bics	r3, r0
    20a2:	433b      	orrs	r3, r7
    20a4:	400e      	ands	r6, r1
    20a6:	01f6      	lsls	r6, r6, #7
    20a8:	3040      	adds	r0, #64	; 0x40
    20aa:	4383      	bics	r3, r0
    20ac:	4333      	orrs	r3, r6
    20ae:	3879      	subs	r0, #121	; 0x79
    20b0:	4005      	ands	r5, r0
    20b2:	022d      	lsls	r5, r5, #8
    20b4:	4809      	ldr	r0, [pc, #36]	; (20dc <system_clock_source_xosc32k_set_config+0xb0>)
    20b6:	4003      	ands	r3, r0
    20b8:	432b      	orrs	r3, r5
    20ba:	4021      	ands	r1, r4
    20bc:	0309      	lsls	r1, r1, #12
    20be:	4808      	ldr	r0, [pc, #32]	; (20e0 <system_clock_source_xosc32k_set_config+0xb4>)
    20c0:	4003      	ands	r3, r0
    20c2:	430b      	orrs	r3, r1
    20c4:	465a      	mov	r2, fp
    20c6:	8293      	strh	r3, [r2, #20]
}
    20c8:	bc3c      	pop	{r2, r3, r4, r5}
    20ca:	4690      	mov	r8, r2
    20cc:	4699      	mov	r9, r3
    20ce:	46a2      	mov	sl, r4
    20d0:	46ab      	mov	fp, r5
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d4:	40000800 	.word	0x40000800
    20d8:	20000254 	.word	0x20000254
    20dc:	fffff8ff 	.word	0xfffff8ff
    20e0:	ffffefff 	.word	0xffffefff

000020e4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    20e4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    20e6:	7a03      	ldrb	r3, [r0, #8]
    20e8:	069b      	lsls	r3, r3, #26
    20ea:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    20ec:	8942      	ldrh	r2, [r0, #10]
    20ee:	0592      	lsls	r2, r2, #22
    20f0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    20f2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    20f4:	4918      	ldr	r1, [pc, #96]	; (2158 <system_clock_source_dfll_set_config+0x74>)
    20f6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    20f8:	7983      	ldrb	r3, [r0, #6]
    20fa:	79c2      	ldrb	r2, [r0, #7]
    20fc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    20fe:	8842      	ldrh	r2, [r0, #2]
    2100:	8884      	ldrh	r4, [r0, #4]
    2102:	4322      	orrs	r2, r4
    2104:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2106:	7842      	ldrb	r2, [r0, #1]
    2108:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    210a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    210c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    210e:	7803      	ldrb	r3, [r0, #0]
    2110:	2b04      	cmp	r3, #4
    2112:	d011      	beq.n	2138 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2114:	2b20      	cmp	r3, #32
    2116:	d10e      	bne.n	2136 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2118:	7b03      	ldrb	r3, [r0, #12]
    211a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    211c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    211e:	4313      	orrs	r3, r2
    2120:	89c2      	ldrh	r2, [r0, #14]
    2122:	0412      	lsls	r2, r2, #16
    2124:	490d      	ldr	r1, [pc, #52]	; (215c <system_clock_source_dfll_set_config+0x78>)
    2126:	400a      	ands	r2, r1
    2128:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    212a:	4a0b      	ldr	r2, [pc, #44]	; (2158 <system_clock_source_dfll_set_config+0x74>)
    212c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    212e:	6811      	ldr	r1, [r2, #0]
    2130:	4b0b      	ldr	r3, [pc, #44]	; (2160 <system_clock_source_dfll_set_config+0x7c>)
    2132:	430b      	orrs	r3, r1
    2134:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2136:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2138:	7b03      	ldrb	r3, [r0, #12]
    213a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    213c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    213e:	4313      	orrs	r3, r2
    2140:	89c2      	ldrh	r2, [r0, #14]
    2142:	0412      	lsls	r2, r2, #16
    2144:	4905      	ldr	r1, [pc, #20]	; (215c <system_clock_source_dfll_set_config+0x78>)
    2146:	400a      	ands	r2, r1
    2148:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    214a:	4a03      	ldr	r2, [pc, #12]	; (2158 <system_clock_source_dfll_set_config+0x74>)
    214c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    214e:	6813      	ldr	r3, [r2, #0]
    2150:	2104      	movs	r1, #4
    2152:	430b      	orrs	r3, r1
    2154:	6013      	str	r3, [r2, #0]
    2156:	e7ee      	b.n	2136 <system_clock_source_dfll_set_config+0x52>
    2158:	20000254 	.word	0x20000254
    215c:	03ff0000 	.word	0x03ff0000
    2160:	00000424 	.word	0x00000424

00002164 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2164:	2808      	cmp	r0, #8
    2166:	d803      	bhi.n	2170 <system_clock_source_enable+0xc>
    2168:	0080      	lsls	r0, r0, #2
    216a:	4b25      	ldr	r3, [pc, #148]	; (2200 <system_clock_source_enable+0x9c>)
    216c:	581b      	ldr	r3, [r3, r0]
    216e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2170:	2017      	movs	r0, #23
    2172:	e044      	b.n	21fe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2174:	4a23      	ldr	r2, [pc, #140]	; (2204 <system_clock_source_enable+0xa0>)
    2176:	6a13      	ldr	r3, [r2, #32]
    2178:	2102      	movs	r1, #2
    217a:	430b      	orrs	r3, r1
    217c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    217e:	2000      	movs	r0, #0
    2180:	e03d      	b.n	21fe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2182:	4a20      	ldr	r2, [pc, #128]	; (2204 <system_clock_source_enable+0xa0>)
    2184:	6993      	ldr	r3, [r2, #24]
    2186:	2102      	movs	r1, #2
    2188:	430b      	orrs	r3, r1
    218a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    218c:	2000      	movs	r0, #0
		break;
    218e:	e036      	b.n	21fe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2190:	4a1c      	ldr	r2, [pc, #112]	; (2204 <system_clock_source_enable+0xa0>)
    2192:	8a13      	ldrh	r3, [r2, #16]
    2194:	2102      	movs	r1, #2
    2196:	430b      	orrs	r3, r1
    2198:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    219a:	2000      	movs	r0, #0
		break;
    219c:	e02f      	b.n	21fe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    219e:	4a19      	ldr	r2, [pc, #100]	; (2204 <system_clock_source_enable+0xa0>)
    21a0:	8a93      	ldrh	r3, [r2, #20]
    21a2:	2102      	movs	r1, #2
    21a4:	430b      	orrs	r3, r1
    21a6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    21a8:	2000      	movs	r0, #0
		break;
    21aa:	e028      	b.n	21fe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    21ac:	4916      	ldr	r1, [pc, #88]	; (2208 <system_clock_source_enable+0xa4>)
    21ae:	680b      	ldr	r3, [r1, #0]
    21b0:	2202      	movs	r2, #2
    21b2:	4313      	orrs	r3, r2
    21b4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    21b6:	4b13      	ldr	r3, [pc, #76]	; (2204 <system_clock_source_enable+0xa0>)
    21b8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21ba:	0019      	movs	r1, r3
    21bc:	320e      	adds	r2, #14
    21be:	68cb      	ldr	r3, [r1, #12]
    21c0:	421a      	tst	r2, r3
    21c2:	d0fc      	beq.n	21be <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    21c4:	4a10      	ldr	r2, [pc, #64]	; (2208 <system_clock_source_enable+0xa4>)
    21c6:	6891      	ldr	r1, [r2, #8]
    21c8:	4b0e      	ldr	r3, [pc, #56]	; (2204 <system_clock_source_enable+0xa0>)
    21ca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    21cc:	6852      	ldr	r2, [r2, #4]
    21ce:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    21d0:	2200      	movs	r2, #0
    21d2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21d4:	0019      	movs	r1, r3
    21d6:	3210      	adds	r2, #16
    21d8:	68cb      	ldr	r3, [r1, #12]
    21da:	421a      	tst	r2, r3
    21dc:	d0fc      	beq.n	21d8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    21de:	4b0a      	ldr	r3, [pc, #40]	; (2208 <system_clock_source_enable+0xa4>)
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	b29b      	uxth	r3, r3
    21e4:	4a07      	ldr	r2, [pc, #28]	; (2204 <system_clock_source_enable+0xa0>)
    21e6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    21e8:	2000      	movs	r0, #0
    21ea:	e008      	b.n	21fe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    21ec:	4905      	ldr	r1, [pc, #20]	; (2204 <system_clock_source_enable+0xa0>)
    21ee:	2244      	movs	r2, #68	; 0x44
    21f0:	5c8b      	ldrb	r3, [r1, r2]
    21f2:	2002      	movs	r0, #2
    21f4:	4303      	orrs	r3, r0
    21f6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    21f8:	2000      	movs	r0, #0
		break;
    21fa:	e000      	b.n	21fe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    21fc:	2000      	movs	r0, #0
}
    21fe:	4770      	bx	lr
    2200:	00006a30 	.word	0x00006a30
    2204:	40000800 	.word	0x40000800
    2208:	20000254 	.word	0x20000254

0000220c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    220c:	b5f0      	push	{r4, r5, r6, r7, lr}
    220e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2210:	22c2      	movs	r2, #194	; 0xc2
    2212:	00d2      	lsls	r2, r2, #3
    2214:	4b47      	ldr	r3, [pc, #284]	; (2334 <system_clock_init+0x128>)
    2216:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2218:	4a47      	ldr	r2, [pc, #284]	; (2338 <system_clock_init+0x12c>)
    221a:	6853      	ldr	r3, [r2, #4]
    221c:	211e      	movs	r1, #30
    221e:	438b      	bics	r3, r1
    2220:	391a      	subs	r1, #26
    2222:	430b      	orrs	r3, r1
    2224:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2226:	2202      	movs	r2, #2
    2228:	ab01      	add	r3, sp, #4
    222a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    222c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    222e:	4d43      	ldr	r5, [pc, #268]	; (233c <system_clock_init+0x130>)
    2230:	b2e0      	uxtb	r0, r4
    2232:	a901      	add	r1, sp, #4
    2234:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2236:	3401      	adds	r4, #1
    2238:	2c25      	cmp	r4, #37	; 0x25
    223a:	d1f9      	bne.n	2230 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    223c:	a80a      	add	r0, sp, #40	; 0x28
    223e:	2300      	movs	r3, #0
    2240:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2242:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2244:	2280      	movs	r2, #128	; 0x80
    2246:	0212      	lsls	r2, r2, #8
    2248:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    224a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    224c:	2201      	movs	r2, #1
    224e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2250:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2252:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2254:	3202      	adds	r2, #2
    2256:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2258:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    225a:	4b39      	ldr	r3, [pc, #228]	; (2340 <system_clock_init+0x134>)
    225c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    225e:	2005      	movs	r0, #5
    2260:	4b38      	ldr	r3, [pc, #224]	; (2344 <system_clock_init+0x138>)
    2262:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2264:	4933      	ldr	r1, [pc, #204]	; (2334 <system_clock_init+0x128>)
    2266:	2202      	movs	r2, #2
    2268:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    226a:	421a      	tst	r2, r3
    226c:	d0fc      	beq.n	2268 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    226e:	4a31      	ldr	r2, [pc, #196]	; (2334 <system_clock_init+0x128>)
    2270:	8a93      	ldrh	r3, [r2, #20]
    2272:	2180      	movs	r1, #128	; 0x80
    2274:	430b      	orrs	r3, r1
    2276:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2278:	ab05      	add	r3, sp, #20
    227a:	2100      	movs	r1, #0
    227c:	2200      	movs	r2, #0
    227e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2280:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2282:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2284:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2286:	313f      	adds	r1, #63	; 0x3f
    2288:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    228a:	393b      	subs	r1, #59	; 0x3b
    228c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    228e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2290:	4b2d      	ldr	r3, [pc, #180]	; (2348 <system_clock_init+0x13c>)
    2292:	681b      	ldr	r3, [r3, #0]
    2294:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2296:	2b3f      	cmp	r3, #63	; 0x3f
    2298:	d04a      	beq.n	2330 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    229a:	a805      	add	r0, sp, #20
    229c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    229e:	4b2b      	ldr	r3, [pc, #172]	; (234c <system_clock_init+0x140>)
    22a0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    22a2:	2307      	movs	r3, #7
    22a4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    22a6:	3338      	adds	r3, #56	; 0x38
    22a8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    22aa:	4b29      	ldr	r3, [pc, #164]	; (2350 <system_clock_init+0x144>)
    22ac:	4798      	blx	r3
	config->run_in_standby  = false;
    22ae:	a804      	add	r0, sp, #16
    22b0:	2500      	movs	r5, #0
    22b2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    22b4:	2601      	movs	r6, #1
    22b6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    22b8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    22ba:	4b26      	ldr	r3, [pc, #152]	; (2354 <system_clock_init+0x148>)
    22bc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    22be:	2006      	movs	r0, #6
    22c0:	4f20      	ldr	r7, [pc, #128]	; (2344 <system_clock_init+0x138>)
    22c2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    22c4:	4b24      	ldr	r3, [pc, #144]	; (2358 <system_clock_init+0x14c>)
    22c6:	4798      	blx	r3
	config->division_factor    = 1;
    22c8:	ac01      	add	r4, sp, #4
    22ca:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    22cc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    22ce:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    22d0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    22d2:	2305      	movs	r3, #5
    22d4:	7023      	strb	r3, [r4, #0]
    22d6:	0021      	movs	r1, r4
    22d8:	2001      	movs	r0, #1
    22da:	4b20      	ldr	r3, [pc, #128]	; (235c <system_clock_init+0x150>)
    22dc:	4798      	blx	r3
    22de:	2001      	movs	r0, #1
    22e0:	4b1f      	ldr	r3, [pc, #124]	; (2360 <system_clock_init+0x154>)
    22e2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    22e4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    22e6:	0021      	movs	r1, r4
    22e8:	2000      	movs	r0, #0
    22ea:	4b14      	ldr	r3, [pc, #80]	; (233c <system_clock_init+0x130>)
    22ec:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    22ee:	2000      	movs	r0, #0
    22f0:	4b1c      	ldr	r3, [pc, #112]	; (2364 <system_clock_init+0x158>)
    22f2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    22f4:	2007      	movs	r0, #7
    22f6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    22f8:	490e      	ldr	r1, [pc, #56]	; (2334 <system_clock_init+0x128>)
    22fa:	22d0      	movs	r2, #208	; 0xd0
    22fc:	68cb      	ldr	r3, [r1, #12]
    22fe:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2300:	2bd0      	cmp	r3, #208	; 0xd0
    2302:	d1fb      	bne.n	22fc <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2304:	4a18      	ldr	r2, [pc, #96]	; (2368 <system_clock_init+0x15c>)
    2306:	2300      	movs	r3, #0
    2308:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    230a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    230c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    230e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2310:	a901      	add	r1, sp, #4
    2312:	2201      	movs	r2, #1
    2314:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2316:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2318:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    231a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    231c:	3307      	adds	r3, #7
    231e:	700b      	strb	r3, [r1, #0]
    2320:	2000      	movs	r0, #0
    2322:	4b0e      	ldr	r3, [pc, #56]	; (235c <system_clock_init+0x150>)
    2324:	4798      	blx	r3
    2326:	2000      	movs	r0, #0
    2328:	4b0d      	ldr	r3, [pc, #52]	; (2360 <system_clock_init+0x154>)
    232a:	4798      	blx	r3
#endif
}
    232c:	b00f      	add	sp, #60	; 0x3c
    232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2330:	3b20      	subs	r3, #32
    2332:	e7b2      	b.n	229a <system_clock_init+0x8e>
    2334:	40000800 	.word	0x40000800
    2338:	41004000 	.word	0x41004000
    233c:	000025a5 	.word	0x000025a5
    2340:	0000202d 	.word	0x0000202d
    2344:	00002165 	.word	0x00002165
    2348:	00806024 	.word	0x00806024
    234c:	000005b9 	.word	0x000005b9
    2350:	000020e5 	.word	0x000020e5
    2354:	00001ff1 	.word	0x00001ff1
    2358:	0000236d 	.word	0x0000236d
    235c:	00002391 	.word	0x00002391
    2360:	00002449 	.word	0x00002449
    2364:	00002519 	.word	0x00002519
    2368:	40000400 	.word	0x40000400

0000236c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    236c:	4a06      	ldr	r2, [pc, #24]	; (2388 <system_gclk_init+0x1c>)
    236e:	6993      	ldr	r3, [r2, #24]
    2370:	2108      	movs	r1, #8
    2372:	430b      	orrs	r3, r1
    2374:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2376:	2201      	movs	r2, #1
    2378:	4b04      	ldr	r3, [pc, #16]	; (238c <system_gclk_init+0x20>)
    237a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    237c:	0019      	movs	r1, r3
    237e:	780b      	ldrb	r3, [r1, #0]
    2380:	4213      	tst	r3, r2
    2382:	d1fc      	bne.n	237e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2384:	4770      	bx	lr
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	40000400 	.word	0x40000400
    238c:	40000c00 	.word	0x40000c00

00002390 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2394:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2396:	780d      	ldrb	r5, [r1, #0]
    2398:	022d      	lsls	r5, r5, #8
    239a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    239c:	784b      	ldrb	r3, [r1, #1]
    239e:	2b00      	cmp	r3, #0
    23a0:	d002      	beq.n	23a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    23a2:	2380      	movs	r3, #128	; 0x80
    23a4:	02db      	lsls	r3, r3, #11
    23a6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    23a8:	7a4b      	ldrb	r3, [r1, #9]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d002      	beq.n	23b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    23ae:	2380      	movs	r3, #128	; 0x80
    23b0:	031b      	lsls	r3, r3, #12
    23b2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    23b4:	6848      	ldr	r0, [r1, #4]
    23b6:	2801      	cmp	r0, #1
    23b8:	d910      	bls.n	23dc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    23ba:	1e43      	subs	r3, r0, #1
    23bc:	4218      	tst	r0, r3
    23be:	d134      	bne.n	242a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    23c0:	2802      	cmp	r0, #2
    23c2:	d930      	bls.n	2426 <system_gclk_gen_set_config+0x96>
    23c4:	2302      	movs	r3, #2
    23c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    23c8:	3201      	adds	r2, #1
						mask <<= 1) {
    23ca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    23cc:	4298      	cmp	r0, r3
    23ce:	d8fb      	bhi.n	23c8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    23d0:	0212      	lsls	r2, r2, #8
    23d2:	4332      	orrs	r2, r6
    23d4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    23d6:	2380      	movs	r3, #128	; 0x80
    23d8:	035b      	lsls	r3, r3, #13
    23da:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    23dc:	7a0b      	ldrb	r3, [r1, #8]
    23de:	2b00      	cmp	r3, #0
    23e0:	d002      	beq.n	23e8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    23e2:	2380      	movs	r3, #128	; 0x80
    23e4:	039b      	lsls	r3, r3, #14
    23e6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23e8:	4a13      	ldr	r2, [pc, #76]	; (2438 <system_gclk_gen_set_config+0xa8>)
    23ea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    23ec:	b25b      	sxtb	r3, r3
    23ee:	2b00      	cmp	r3, #0
    23f0:	dbfb      	blt.n	23ea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    23f2:	4b12      	ldr	r3, [pc, #72]	; (243c <system_gclk_gen_set_config+0xac>)
    23f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    23f6:	4b12      	ldr	r3, [pc, #72]	; (2440 <system_gclk_gen_set_config+0xb0>)
    23f8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23fa:	4a0f      	ldr	r2, [pc, #60]	; (2438 <system_gclk_gen_set_config+0xa8>)
    23fc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    23fe:	b25b      	sxtb	r3, r3
    2400:	2b00      	cmp	r3, #0
    2402:	dbfb      	blt.n	23fc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2404:	4b0c      	ldr	r3, [pc, #48]	; (2438 <system_gclk_gen_set_config+0xa8>)
    2406:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2408:	001a      	movs	r2, r3
    240a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    240c:	b25b      	sxtb	r3, r3
    240e:	2b00      	cmp	r3, #0
    2410:	dbfb      	blt.n	240a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2412:	4a09      	ldr	r2, [pc, #36]	; (2438 <system_gclk_gen_set_config+0xa8>)
    2414:	6853      	ldr	r3, [r2, #4]
    2416:	2180      	movs	r1, #128	; 0x80
    2418:	0249      	lsls	r1, r1, #9
    241a:	400b      	ands	r3, r1
    241c:	431d      	orrs	r5, r3
    241e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2420:	4b08      	ldr	r3, [pc, #32]	; (2444 <system_gclk_gen_set_config+0xb4>)
    2422:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2424:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2426:	2200      	movs	r2, #0
    2428:	e7d2      	b.n	23d0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    242a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    242c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    242e:	2380      	movs	r3, #128	; 0x80
    2430:	029b      	lsls	r3, r3, #10
    2432:	431d      	orrs	r5, r3
    2434:	e7d2      	b.n	23dc <system_gclk_gen_set_config+0x4c>
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	40000c00 	.word	0x40000c00
    243c:	00001405 	.word	0x00001405
    2440:	40000c08 	.word	0x40000c08
    2444:	00001445 	.word	0x00001445

00002448 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2448:	b510      	push	{r4, lr}
    244a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    244c:	4a0b      	ldr	r2, [pc, #44]	; (247c <system_gclk_gen_enable+0x34>)
    244e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2450:	b25b      	sxtb	r3, r3
    2452:	2b00      	cmp	r3, #0
    2454:	dbfb      	blt.n	244e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2456:	4b0a      	ldr	r3, [pc, #40]	; (2480 <system_gclk_gen_enable+0x38>)
    2458:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    245a:	4b0a      	ldr	r3, [pc, #40]	; (2484 <system_gclk_gen_enable+0x3c>)
    245c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    245e:	4a07      	ldr	r2, [pc, #28]	; (247c <system_gclk_gen_enable+0x34>)
    2460:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2462:	b25b      	sxtb	r3, r3
    2464:	2b00      	cmp	r3, #0
    2466:	dbfb      	blt.n	2460 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2468:	4a04      	ldr	r2, [pc, #16]	; (247c <system_gclk_gen_enable+0x34>)
    246a:	6851      	ldr	r1, [r2, #4]
    246c:	2380      	movs	r3, #128	; 0x80
    246e:	025b      	lsls	r3, r3, #9
    2470:	430b      	orrs	r3, r1
    2472:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2474:	4b04      	ldr	r3, [pc, #16]	; (2488 <system_gclk_gen_enable+0x40>)
    2476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2478:	bd10      	pop	{r4, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	40000c00 	.word	0x40000c00
    2480:	00001405 	.word	0x00001405
    2484:	40000c04 	.word	0x40000c04
    2488:	00001445 	.word	0x00001445

0000248c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    248c:	b570      	push	{r4, r5, r6, lr}
    248e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2490:	4a1a      	ldr	r2, [pc, #104]	; (24fc <system_gclk_gen_get_hz+0x70>)
    2492:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2494:	b25b      	sxtb	r3, r3
    2496:	2b00      	cmp	r3, #0
    2498:	dbfb      	blt.n	2492 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    249a:	4b19      	ldr	r3, [pc, #100]	; (2500 <system_gclk_gen_get_hz+0x74>)
    249c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    249e:	4b19      	ldr	r3, [pc, #100]	; (2504 <system_gclk_gen_get_hz+0x78>)
    24a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    24a2:	4a16      	ldr	r2, [pc, #88]	; (24fc <system_gclk_gen_get_hz+0x70>)
    24a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    24a6:	b25b      	sxtb	r3, r3
    24a8:	2b00      	cmp	r3, #0
    24aa:	dbfb      	blt.n	24a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    24ac:	4e13      	ldr	r6, [pc, #76]	; (24fc <system_gclk_gen_get_hz+0x70>)
    24ae:	6870      	ldr	r0, [r6, #4]
    24b0:	04c0      	lsls	r0, r0, #19
    24b2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    24b4:	4b14      	ldr	r3, [pc, #80]	; (2508 <system_gclk_gen_get_hz+0x7c>)
    24b6:	4798      	blx	r3
    24b8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    24ba:	4b12      	ldr	r3, [pc, #72]	; (2504 <system_gclk_gen_get_hz+0x78>)
    24bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    24be:	6876      	ldr	r6, [r6, #4]
    24c0:	02f6      	lsls	r6, r6, #11
    24c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    24c4:	4b11      	ldr	r3, [pc, #68]	; (250c <system_gclk_gen_get_hz+0x80>)
    24c6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    24c8:	4a0c      	ldr	r2, [pc, #48]	; (24fc <system_gclk_gen_get_hz+0x70>)
    24ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    24cc:	b25b      	sxtb	r3, r3
    24ce:	2b00      	cmp	r3, #0
    24d0:	dbfb      	blt.n	24ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    24d2:	4b0a      	ldr	r3, [pc, #40]	; (24fc <system_gclk_gen_get_hz+0x70>)
    24d4:	689c      	ldr	r4, [r3, #8]
    24d6:	0224      	lsls	r4, r4, #8
    24d8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    24da:	4b0d      	ldr	r3, [pc, #52]	; (2510 <system_gclk_gen_get_hz+0x84>)
    24dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    24de:	2e00      	cmp	r6, #0
    24e0:	d107      	bne.n	24f2 <system_gclk_gen_get_hz+0x66>
    24e2:	2c01      	cmp	r4, #1
    24e4:	d907      	bls.n	24f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    24e6:	0021      	movs	r1, r4
    24e8:	0028      	movs	r0, r5
    24ea:	4b0a      	ldr	r3, [pc, #40]	; (2514 <system_gclk_gen_get_hz+0x88>)
    24ec:	4798      	blx	r3
    24ee:	0005      	movs	r5, r0
    24f0:	e001      	b.n	24f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    24f2:	3401      	adds	r4, #1
    24f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    24f6:	0028      	movs	r0, r5
    24f8:	bd70      	pop	{r4, r5, r6, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	40000c00 	.word	0x40000c00
    2500:	00001405 	.word	0x00001405
    2504:	40000c04 	.word	0x40000c04
    2508:	00001f61 	.word	0x00001f61
    250c:	40000c08 	.word	0x40000c08
    2510:	00001445 	.word	0x00001445
    2514:	00002b79 	.word	0x00002b79

00002518 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2518:	b510      	push	{r4, lr}
    251a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    251c:	4b06      	ldr	r3, [pc, #24]	; (2538 <system_gclk_chan_enable+0x20>)
    251e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2520:	4b06      	ldr	r3, [pc, #24]	; (253c <system_gclk_chan_enable+0x24>)
    2522:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2524:	4a06      	ldr	r2, [pc, #24]	; (2540 <system_gclk_chan_enable+0x28>)
    2526:	8853      	ldrh	r3, [r2, #2]
    2528:	2180      	movs	r1, #128	; 0x80
    252a:	01c9      	lsls	r1, r1, #7
    252c:	430b      	orrs	r3, r1
    252e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2530:	4b04      	ldr	r3, [pc, #16]	; (2544 <system_gclk_chan_enable+0x2c>)
    2532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2534:	bd10      	pop	{r4, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	00001405 	.word	0x00001405
    253c:	40000c02 	.word	0x40000c02
    2540:	40000c00 	.word	0x40000c00
    2544:	00001445 	.word	0x00001445

00002548 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2548:	b510      	push	{r4, lr}
    254a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    254c:	4b0f      	ldr	r3, [pc, #60]	; (258c <system_gclk_chan_disable+0x44>)
    254e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2550:	4b0f      	ldr	r3, [pc, #60]	; (2590 <system_gclk_chan_disable+0x48>)
    2552:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2554:	4a0f      	ldr	r2, [pc, #60]	; (2594 <system_gclk_chan_disable+0x4c>)
    2556:	8853      	ldrh	r3, [r2, #2]
    2558:	051b      	lsls	r3, r3, #20
    255a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    255c:	8853      	ldrh	r3, [r2, #2]
    255e:	490e      	ldr	r1, [pc, #56]	; (2598 <system_gclk_chan_disable+0x50>)
    2560:	400b      	ands	r3, r1
    2562:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2564:	8853      	ldrh	r3, [r2, #2]
    2566:	490d      	ldr	r1, [pc, #52]	; (259c <system_gclk_chan_disable+0x54>)
    2568:	400b      	ands	r3, r1
    256a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    256c:	0011      	movs	r1, r2
    256e:	2280      	movs	r2, #128	; 0x80
    2570:	01d2      	lsls	r2, r2, #7
    2572:	884b      	ldrh	r3, [r1, #2]
    2574:	4213      	tst	r3, r2
    2576:	d1fc      	bne.n	2572 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2578:	4906      	ldr	r1, [pc, #24]	; (2594 <system_gclk_chan_disable+0x4c>)
    257a:	884a      	ldrh	r2, [r1, #2]
    257c:	0203      	lsls	r3, r0, #8
    257e:	4806      	ldr	r0, [pc, #24]	; (2598 <system_gclk_chan_disable+0x50>)
    2580:	4002      	ands	r2, r0
    2582:	4313      	orrs	r3, r2
    2584:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2586:	4b06      	ldr	r3, [pc, #24]	; (25a0 <system_gclk_chan_disable+0x58>)
    2588:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    258a:	bd10      	pop	{r4, pc}
    258c:	00001405 	.word	0x00001405
    2590:	40000c02 	.word	0x40000c02
    2594:	40000c00 	.word	0x40000c00
    2598:	fffff0ff 	.word	0xfffff0ff
    259c:	ffffbfff 	.word	0xffffbfff
    25a0:	00001445 	.word	0x00001445

000025a4 <system_gclk_chan_set_config>:
{
    25a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    25a6:	780c      	ldrb	r4, [r1, #0]
    25a8:	0224      	lsls	r4, r4, #8
    25aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    25ac:	4b02      	ldr	r3, [pc, #8]	; (25b8 <system_gclk_chan_set_config+0x14>)
    25ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    25b0:	b2a4      	uxth	r4, r4
    25b2:	4b02      	ldr	r3, [pc, #8]	; (25bc <system_gclk_chan_set_config+0x18>)
    25b4:	805c      	strh	r4, [r3, #2]
}
    25b6:	bd10      	pop	{r4, pc}
    25b8:	00002549 	.word	0x00002549
    25bc:	40000c00 	.word	0x40000c00

000025c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    25c0:	b510      	push	{r4, lr}
    25c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    25c4:	4b06      	ldr	r3, [pc, #24]	; (25e0 <system_gclk_chan_get_hz+0x20>)
    25c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    25c8:	4b06      	ldr	r3, [pc, #24]	; (25e4 <system_gclk_chan_get_hz+0x24>)
    25ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    25cc:	4b06      	ldr	r3, [pc, #24]	; (25e8 <system_gclk_chan_get_hz+0x28>)
    25ce:	885c      	ldrh	r4, [r3, #2]
    25d0:	0524      	lsls	r4, r4, #20
    25d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    25d4:	4b05      	ldr	r3, [pc, #20]	; (25ec <system_gclk_chan_get_hz+0x2c>)
    25d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    25d8:	0020      	movs	r0, r4
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <system_gclk_chan_get_hz+0x30>)
    25dc:	4798      	blx	r3
}
    25de:	bd10      	pop	{r4, pc}
    25e0:	00001405 	.word	0x00001405
    25e4:	40000c02 	.word	0x40000c02
    25e8:	40000c00 	.word	0x40000c00
    25ec:	00001445 	.word	0x00001445
    25f0:	0000248d 	.word	0x0000248d

000025f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    25f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    25f6:	78d3      	ldrb	r3, [r2, #3]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d135      	bne.n	2668 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    25fc:	7813      	ldrb	r3, [r2, #0]
    25fe:	2b80      	cmp	r3, #128	; 0x80
    2600:	d029      	beq.n	2656 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2602:	061b      	lsls	r3, r3, #24
    2604:	2480      	movs	r4, #128	; 0x80
    2606:	0264      	lsls	r4, r4, #9
    2608:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    260a:	7854      	ldrb	r4, [r2, #1]
    260c:	2502      	movs	r5, #2
    260e:	43ac      	bics	r4, r5
    2610:	d106      	bne.n	2620 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2612:	7894      	ldrb	r4, [r2, #2]
    2614:	2c00      	cmp	r4, #0
    2616:	d120      	bne.n	265a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2618:	2480      	movs	r4, #128	; 0x80
    261a:	02a4      	lsls	r4, r4, #10
    261c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    261e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2620:	7854      	ldrb	r4, [r2, #1]
    2622:	3c01      	subs	r4, #1
    2624:	2c01      	cmp	r4, #1
    2626:	d91c      	bls.n	2662 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2628:	040d      	lsls	r5, r1, #16
    262a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    262c:	24a0      	movs	r4, #160	; 0xa0
    262e:	05e4      	lsls	r4, r4, #23
    2630:	432c      	orrs	r4, r5
    2632:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2634:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2636:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2638:	24d0      	movs	r4, #208	; 0xd0
    263a:	0624      	lsls	r4, r4, #24
    263c:	432c      	orrs	r4, r5
    263e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2640:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2642:	78d4      	ldrb	r4, [r2, #3]
    2644:	2c00      	cmp	r4, #0
    2646:	d122      	bne.n	268e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2648:	035b      	lsls	r3, r3, #13
    264a:	d51c      	bpl.n	2686 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    264c:	7893      	ldrb	r3, [r2, #2]
    264e:	2b01      	cmp	r3, #1
    2650:	d01e      	beq.n	2690 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2652:	6141      	str	r1, [r0, #20]
    2654:	e017      	b.n	2686 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2656:	2300      	movs	r3, #0
    2658:	e7d7      	b.n	260a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    265a:	24c0      	movs	r4, #192	; 0xc0
    265c:	02e4      	lsls	r4, r4, #11
    265e:	4323      	orrs	r3, r4
    2660:	e7dd      	b.n	261e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2662:	4c0d      	ldr	r4, [pc, #52]	; (2698 <_system_pinmux_config+0xa4>)
    2664:	4023      	ands	r3, r4
    2666:	e7df      	b.n	2628 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2668:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    266a:	040c      	lsls	r4, r1, #16
    266c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    266e:	23a0      	movs	r3, #160	; 0xa0
    2670:	05db      	lsls	r3, r3, #23
    2672:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2674:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2676:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2678:	23d0      	movs	r3, #208	; 0xd0
    267a:	061b      	lsls	r3, r3, #24
    267c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    267e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2680:	78d3      	ldrb	r3, [r2, #3]
    2682:	2b00      	cmp	r3, #0
    2684:	d103      	bne.n	268e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2686:	7853      	ldrb	r3, [r2, #1]
    2688:	3b01      	subs	r3, #1
    268a:	2b01      	cmp	r3, #1
    268c:	d902      	bls.n	2694 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    268e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2690:	6181      	str	r1, [r0, #24]
    2692:	e7f8      	b.n	2686 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2694:	6081      	str	r1, [r0, #8]
}
    2696:	e7fa      	b.n	268e <_system_pinmux_config+0x9a>
    2698:	fffbffff 	.word	0xfffbffff

0000269c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    269c:	b510      	push	{r4, lr}
    269e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    26a0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    26a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    26a4:	2900      	cmp	r1, #0
    26a6:	d104      	bne.n	26b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    26a8:	0943      	lsrs	r3, r0, #5
    26aa:	01db      	lsls	r3, r3, #7
    26ac:	4905      	ldr	r1, [pc, #20]	; (26c4 <system_pinmux_pin_set_config+0x28>)
    26ae:	468c      	mov	ip, r1
    26b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    26b2:	241f      	movs	r4, #31
    26b4:	4020      	ands	r0, r4
    26b6:	2101      	movs	r1, #1
    26b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    26ba:	0018      	movs	r0, r3
    26bc:	4b02      	ldr	r3, [pc, #8]	; (26c8 <system_pinmux_pin_set_config+0x2c>)
    26be:	4798      	blx	r3
}
    26c0:	bd10      	pop	{r4, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	41004400 	.word	0x41004400
    26c8:	000025f5 	.word	0x000025f5

000026cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    26cc:	4770      	bx	lr
	...

000026d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    26d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    26d2:	4b05      	ldr	r3, [pc, #20]	; (26e8 <system_init+0x18>)
    26d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    26d6:	4b05      	ldr	r3, [pc, #20]	; (26ec <system_init+0x1c>)
    26d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    26da:	4b05      	ldr	r3, [pc, #20]	; (26f0 <system_init+0x20>)
    26dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    26de:	4b05      	ldr	r3, [pc, #20]	; (26f4 <system_init+0x24>)
    26e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    26e2:	4b05      	ldr	r3, [pc, #20]	; (26f8 <system_init+0x28>)
    26e4:	4798      	blx	r3
}
    26e6:	bd10      	pop	{r4, pc}
    26e8:	0000220d 	.word	0x0000220d
    26ec:	00001475 	.word	0x00001475
    26f0:	000026cd 	.word	0x000026cd
    26f4:	00001519 	.word	0x00001519
    26f8:	000026cd 	.word	0x000026cd

000026fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26fc:	e7fe      	b.n	26fc <Dummy_Handler>
	...

00002700 <Reset_Handler>:
{
    2700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2702:	4a2a      	ldr	r2, [pc, #168]	; (27ac <Reset_Handler+0xac>)
    2704:	4b2a      	ldr	r3, [pc, #168]	; (27b0 <Reset_Handler+0xb0>)
    2706:	429a      	cmp	r2, r3
    2708:	d011      	beq.n	272e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    270a:	001a      	movs	r2, r3
    270c:	4b29      	ldr	r3, [pc, #164]	; (27b4 <Reset_Handler+0xb4>)
    270e:	429a      	cmp	r2, r3
    2710:	d20d      	bcs.n	272e <Reset_Handler+0x2e>
    2712:	4a29      	ldr	r2, [pc, #164]	; (27b8 <Reset_Handler+0xb8>)
    2714:	3303      	adds	r3, #3
    2716:	1a9b      	subs	r3, r3, r2
    2718:	089b      	lsrs	r3, r3, #2
    271a:	3301      	adds	r3, #1
    271c:	009b      	lsls	r3, r3, #2
    271e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2720:	4823      	ldr	r0, [pc, #140]	; (27b0 <Reset_Handler+0xb0>)
    2722:	4922      	ldr	r1, [pc, #136]	; (27ac <Reset_Handler+0xac>)
    2724:	588c      	ldr	r4, [r1, r2]
    2726:	5084      	str	r4, [r0, r2]
    2728:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    272a:	429a      	cmp	r2, r3
    272c:	d1fa      	bne.n	2724 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    272e:	4a23      	ldr	r2, [pc, #140]	; (27bc <Reset_Handler+0xbc>)
    2730:	4b23      	ldr	r3, [pc, #140]	; (27c0 <Reset_Handler+0xc0>)
    2732:	429a      	cmp	r2, r3
    2734:	d20a      	bcs.n	274c <Reset_Handler+0x4c>
    2736:	43d3      	mvns	r3, r2
    2738:	4921      	ldr	r1, [pc, #132]	; (27c0 <Reset_Handler+0xc0>)
    273a:	185b      	adds	r3, r3, r1
    273c:	2103      	movs	r1, #3
    273e:	438b      	bics	r3, r1
    2740:	3304      	adds	r3, #4
    2742:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2744:	2100      	movs	r1, #0
    2746:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2748:	4293      	cmp	r3, r2
    274a:	d1fc      	bne.n	2746 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    274c:	4a1d      	ldr	r2, [pc, #116]	; (27c4 <Reset_Handler+0xc4>)
    274e:	21ff      	movs	r1, #255	; 0xff
    2750:	4b1d      	ldr	r3, [pc, #116]	; (27c8 <Reset_Handler+0xc8>)
    2752:	438b      	bics	r3, r1
    2754:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2756:	39fd      	subs	r1, #253	; 0xfd
    2758:	2390      	movs	r3, #144	; 0x90
    275a:	005b      	lsls	r3, r3, #1
    275c:	4a1b      	ldr	r2, [pc, #108]	; (27cc <Reset_Handler+0xcc>)
    275e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2760:	4a1b      	ldr	r2, [pc, #108]	; (27d0 <Reset_Handler+0xd0>)
    2762:	78d3      	ldrb	r3, [r2, #3]
    2764:	2503      	movs	r5, #3
    2766:	43ab      	bics	r3, r5
    2768:	2402      	movs	r4, #2
    276a:	4323      	orrs	r3, r4
    276c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    276e:	78d3      	ldrb	r3, [r2, #3]
    2770:	270c      	movs	r7, #12
    2772:	43bb      	bics	r3, r7
    2774:	2608      	movs	r6, #8
    2776:	4333      	orrs	r3, r6
    2778:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    277a:	4b16      	ldr	r3, [pc, #88]	; (27d4 <Reset_Handler+0xd4>)
    277c:	7b98      	ldrb	r0, [r3, #14]
    277e:	2230      	movs	r2, #48	; 0x30
    2780:	4390      	bics	r0, r2
    2782:	2220      	movs	r2, #32
    2784:	4310      	orrs	r0, r2
    2786:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2788:	7b99      	ldrb	r1, [r3, #14]
    278a:	43b9      	bics	r1, r7
    278c:	4331      	orrs	r1, r6
    278e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2790:	7b9a      	ldrb	r2, [r3, #14]
    2792:	43aa      	bics	r2, r5
    2794:	4322      	orrs	r2, r4
    2796:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2798:	4a0f      	ldr	r2, [pc, #60]	; (27d8 <Reset_Handler+0xd8>)
    279a:	6853      	ldr	r3, [r2, #4]
    279c:	2180      	movs	r1, #128	; 0x80
    279e:	430b      	orrs	r3, r1
    27a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27a2:	4b0e      	ldr	r3, [pc, #56]	; (27dc <Reset_Handler+0xdc>)
    27a4:	4798      	blx	r3
        main();
    27a6:	4b0e      	ldr	r3, [pc, #56]	; (27e0 <Reset_Handler+0xe0>)
    27a8:	4798      	blx	r3
    27aa:	e7fe      	b.n	27aa <Reset_Handler+0xaa>
    27ac:	00006d5c 	.word	0x00006d5c
    27b0:	20000000 	.word	0x20000000
    27b4:	20000210 	.word	0x20000210
    27b8:	20000004 	.word	0x20000004
    27bc:	20000210 	.word	0x20000210
    27c0:	20000400 	.word	0x20000400
    27c4:	e000ed00 	.word	0xe000ed00
    27c8:	00000000 	.word	0x00000000
    27cc:	41007000 	.word	0x41007000
    27d0:	41005000 	.word	0x41005000
    27d4:	41004800 	.word	0x41004800
    27d8:	41004000 	.word	0x41004000
    27dc:	000045b9 	.word	0x000045b9
    27e0:	000029ad 	.word	0x000029ad

000027e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    27e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27e6:	46c6      	mov	lr, r8
    27e8:	b500      	push	{lr}
    27ea:	000c      	movs	r4, r1
    27ec:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    27ee:	2800      	cmp	r0, #0
    27f0:	d10f      	bne.n	2812 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    27f2:	2a00      	cmp	r2, #0
    27f4:	dd11      	ble.n	281a <_read+0x36>
    27f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    27f8:	4e09      	ldr	r6, [pc, #36]	; (2820 <_read+0x3c>)
    27fa:	4d0a      	ldr	r5, [pc, #40]	; (2824 <_read+0x40>)
    27fc:	6830      	ldr	r0, [r6, #0]
    27fe:	0021      	movs	r1, r4
    2800:	682b      	ldr	r3, [r5, #0]
    2802:	4798      	blx	r3
		ptr++;
    2804:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2806:	42bc      	cmp	r4, r7
    2808:	d1f8      	bne.n	27fc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    280a:	4640      	mov	r0, r8
    280c:	bc04      	pop	{r2}
    280e:	4690      	mov	r8, r2
    2810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2812:	2301      	movs	r3, #1
    2814:	425b      	negs	r3, r3
    2816:	4698      	mov	r8, r3
    2818:	e7f7      	b.n	280a <_read+0x26>
	for (; len > 0; --len) {
    281a:	4680      	mov	r8, r0
    281c:	e7f5      	b.n	280a <_read+0x26>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	200003d8 	.word	0x200003d8
    2824:	200003d0 	.word	0x200003d0

00002828 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
    282a:	46c6      	mov	lr, r8
    282c:	b500      	push	{lr}
    282e:	000e      	movs	r6, r1
    2830:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2832:	3801      	subs	r0, #1
    2834:	2802      	cmp	r0, #2
    2836:	d810      	bhi.n	285a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2838:	2a00      	cmp	r2, #0
    283a:	d011      	beq.n	2860 <_write+0x38>
    283c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    283e:	4b0c      	ldr	r3, [pc, #48]	; (2870 <_write+0x48>)
    2840:	4698      	mov	r8, r3
    2842:	4f0c      	ldr	r7, [pc, #48]	; (2874 <_write+0x4c>)
    2844:	4643      	mov	r3, r8
    2846:	6818      	ldr	r0, [r3, #0]
    2848:	5d31      	ldrb	r1, [r6, r4]
    284a:	683b      	ldr	r3, [r7, #0]
    284c:	4798      	blx	r3
    284e:	2800      	cmp	r0, #0
    2850:	db08      	blt.n	2864 <_write+0x3c>
			return -1;
		}
		++nChars;
    2852:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2854:	42a5      	cmp	r5, r4
    2856:	d1f5      	bne.n	2844 <_write+0x1c>
    2858:	e006      	b.n	2868 <_write+0x40>
		return -1;
    285a:	2401      	movs	r4, #1
    285c:	4264      	negs	r4, r4
    285e:	e003      	b.n	2868 <_write+0x40>
	for (; len != 0; --len) {
    2860:	0014      	movs	r4, r2
    2862:	e001      	b.n	2868 <_write+0x40>
			return -1;
    2864:	2401      	movs	r4, #1
    2866:	4264      	negs	r4, r4
	}
	return nChars;
}
    2868:	0020      	movs	r0, r4
    286a:	bc04      	pop	{r2}
    286c:	4690      	mov	r8, r2
    286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2870:	200003d8 	.word	0x200003d8
    2874:	200003d4 	.word	0x200003d4

00002878 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2878:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    287a:	4a06      	ldr	r2, [pc, #24]	; (2894 <_sbrk+0x1c>)
    287c:	6812      	ldr	r2, [r2, #0]
    287e:	2a00      	cmp	r2, #0
    2880:	d004      	beq.n	288c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2882:	4a04      	ldr	r2, [pc, #16]	; (2894 <_sbrk+0x1c>)
    2884:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2886:	18c3      	adds	r3, r0, r3
    2888:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    288a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    288c:	4902      	ldr	r1, [pc, #8]	; (2898 <_sbrk+0x20>)
    288e:	4a01      	ldr	r2, [pc, #4]	; (2894 <_sbrk+0x1c>)
    2890:	6011      	str	r1, [r2, #0]
    2892:	e7f6      	b.n	2882 <_sbrk+0xa>
    2894:	2000026c 	.word	0x2000026c
    2898:	20002400 	.word	0x20002400

0000289c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    289c:	2001      	movs	r0, #1
    289e:	4240      	negs	r0, r0
    28a0:	4770      	bx	lr

000028a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28a2:	2380      	movs	r3, #128	; 0x80
    28a4:	019b      	lsls	r3, r3, #6
    28a6:	604b      	str	r3, [r1, #4]

	return 0;
}
    28a8:	2000      	movs	r0, #0
    28aa:	4770      	bx	lr

000028ac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28ac:	2001      	movs	r0, #1
    28ae:	4770      	bx	lr

000028b0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28b0:	2000      	movs	r0, #0
    28b2:	4770      	bx	lr

000028b4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    28b4:	b570      	push	{r4, r5, r6, lr}
    28b6:	b082      	sub	sp, #8
    28b8:	0005      	movs	r5, r0
    28ba:	000e      	movs	r6, r1
	uint16_t temp = 0;
    28bc:	2200      	movs	r2, #0
    28be:	466b      	mov	r3, sp
    28c0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    28c2:	4c06      	ldr	r4, [pc, #24]	; (28dc <usart_serial_getchar+0x28>)
    28c4:	466b      	mov	r3, sp
    28c6:	1d99      	adds	r1, r3, #6
    28c8:	0028      	movs	r0, r5
    28ca:	47a0      	blx	r4
    28cc:	2800      	cmp	r0, #0
    28ce:	d1f9      	bne.n	28c4 <usart_serial_getchar+0x10>

	*c = temp;
    28d0:	466b      	mov	r3, sp
    28d2:	3306      	adds	r3, #6
    28d4:	881b      	ldrh	r3, [r3, #0]
    28d6:	7033      	strb	r3, [r6, #0]
}
    28d8:	b002      	add	sp, #8
    28da:	bd70      	pop	{r4, r5, r6, pc}
    28dc:	00001d5d 	.word	0x00001d5d

000028e0 <usart_serial_putchar>:
{
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    28e4:	b28c      	uxth	r4, r1
    28e6:	4e03      	ldr	r6, [pc, #12]	; (28f4 <usart_serial_putchar+0x14>)
    28e8:	0021      	movs	r1, r4
    28ea:	0028      	movs	r0, r5
    28ec:	47b0      	blx	r6
    28ee:	2800      	cmp	r0, #0
    28f0:	d1fa      	bne.n	28e8 <usart_serial_putchar+0x8>
}
    28f2:	bd70      	pop	{r4, r5, r6, pc}
    28f4:	00001d31 	.word	0x00001d31

000028f8 <configure_i2c>:
	adc_init(&adc_inst, ADC, &config);
	adc_enable(&adc_inst);
}

void configure_i2c(void)
{
    28f8:	b530      	push	{r4, r5, lr}
    28fa:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    28fc:	ab01      	add	r3, sp, #4
    28fe:	2264      	movs	r2, #100	; 0x64
    2900:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2902:	4a22      	ldr	r2, [pc, #136]	; (298c <configure_i2c+0x94>)
    2904:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2906:	2200      	movs	r2, #0
    2908:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    290a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    290c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    290e:	2180      	movs	r1, #128	; 0x80
    2910:	0389      	lsls	r1, r1, #14
    2912:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    2914:	2101      	movs	r1, #1
    2916:	4249      	negs	r1, r1
    2918:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    291a:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    291c:	3125      	adds	r1, #37	; 0x25
    291e:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2920:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2922:	3108      	adds	r1, #8
    2924:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2926:	3101      	adds	r1, #1
    2928:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    292a:	3101      	adds	r1, #1
    292c:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    292e:	32d7      	adds	r2, #215	; 0xd7
    2930:	861a      	strh	r2, [r3, #48]	; 0x30
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
	config_i2c_master.pinmux_pad0       = PINMUX_PA08D_SERCOM2_PAD0;
    2932:	4a17      	ldr	r2, [pc, #92]	; (2990 <configure_i2c+0x98>)
    2934:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09D_SERCOM2_PAD1;
    2936:	4a17      	ldr	r2, [pc, #92]	; (2994 <configure_i2c+0x9c>)
    2938:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master) != STATUS_OK);
    293a:	4d17      	ldr	r5, [pc, #92]	; (2998 <configure_i2c+0xa0>)
    293c:	4c17      	ldr	r4, [pc, #92]	; (299c <configure_i2c+0xa4>)
    293e:	aa01      	add	r2, sp, #4
    2940:	4917      	ldr	r1, [pc, #92]	; (29a0 <configure_i2c+0xa8>)
    2942:	0028      	movs	r0, r5
    2944:	47a0      	blx	r4
    2946:	2800      	cmp	r0, #0
    2948:	d1f9      	bne.n	293e <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    294a:	4b13      	ldr	r3, [pc, #76]	; (2998 <configure_i2c+0xa0>)
    294c:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    294e:	2207      	movs	r2, #7
    2950:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2952:	421a      	tst	r2, r3
    2954:	d1fc      	bne.n	2950 <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2956:	6823      	ldr	r3, [r4, #0]
    2958:	2202      	movs	r2, #2
    295a:	4313      	orrs	r3, r2
    295c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    295e:	4d0e      	ldr	r5, [pc, #56]	; (2998 <configure_i2c+0xa0>)
    2960:	6828      	ldr	r0, [r5, #0]
    2962:	4b10      	ldr	r3, [pc, #64]	; (29a4 <configure_i2c+0xac>)
    2964:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2966:	231f      	movs	r3, #31
    2968:	4018      	ands	r0, r3
    296a:	3b1e      	subs	r3, #30
    296c:	4083      	lsls	r3, r0
    296e:	4a0e      	ldr	r2, [pc, #56]	; (29a8 <configure_i2c+0xb0>)
    2970:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2972:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2974:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2976:	2110      	movs	r1, #16
    2978:	8b62      	ldrh	r2, [r4, #26]
    297a:	420a      	tst	r2, r1
    297c:	d104      	bne.n	2988 <configure_i2c+0x90>
		timeout_counter++;
    297e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2980:	4283      	cmp	r3, r0
    2982:	d3f9      	bcc.n	2978 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2984:	2310      	movs	r3, #16
    2986:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    2988:	b00f      	add	sp, #60	; 0x3c
    298a:	bd30      	pop	{r4, r5, pc}
    298c:	00000d48 	.word	0x00000d48
    2990:	00080003 	.word	0x00080003
    2994:	00090003 	.word	0x00090003
    2998:	200002b0 	.word	0x200002b0
    299c:	00000645 	.word	0x00000645
    29a0:	42001000 	.word	0x42001000
    29a4:	0000195d 	.word	0x0000195d
    29a8:	e000e100 	.word	0xe000e100

000029ac <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    29ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ae:	b0d1      	sub	sp, #324	; 0x144
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    29b0:	4b52      	ldr	r3, [pc, #328]	; (2afc <main+0x150>)
    29b2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    29b4:	2380      	movs	r3, #128	; 0x80
    29b6:	05db      	lsls	r3, r3, #23
    29b8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    29ba:	2300      	movs	r3, #0
    29bc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    29be:	22ff      	movs	r2, #255	; 0xff
    29c0:	4669      	mov	r1, sp
    29c2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    29c4:	2200      	movs	r2, #0
    29c6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    29c8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    29ca:	2401      	movs	r4, #1
    29cc:	2124      	movs	r1, #36	; 0x24
    29ce:	4668      	mov	r0, sp
    29d0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    29d2:	3101      	adds	r1, #1
    29d4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    29d6:	3101      	adds	r1, #1
    29d8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    29da:	3101      	adds	r1, #1
    29dc:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    29de:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    29e0:	3105      	adds	r1, #5
    29e2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    29e4:	3101      	adds	r1, #1
    29e6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    29e8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    29ea:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    29ec:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    29ee:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    29f0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    29f2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    29f4:	2313      	movs	r3, #19
    29f6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    29f8:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    29fa:	23c4      	movs	r3, #196	; 0xc4
    29fc:	039b      	lsls	r3, r3, #14
    29fe:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2a00:	2301      	movs	r3, #1
    2a02:	425b      	negs	r3, r3
    2a04:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2a06:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2a08:	4b3d      	ldr	r3, [pc, #244]	; (2b00 <main+0x154>)
    2a0a:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2a0c:	4b3d      	ldr	r3, [pc, #244]	; (2b04 <main+0x158>)
    2a0e:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2a10:	23e1      	movs	r3, #225	; 0xe1
    2a12:	025b      	lsls	r3, r3, #9
    2a14:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2a16:	4d3c      	ldr	r5, [pc, #240]	; (2b08 <main+0x15c>)
    2a18:	4b3c      	ldr	r3, [pc, #240]	; (2b0c <main+0x160>)
    2a1a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2a1c:	4a3c      	ldr	r2, [pc, #240]	; (2b10 <main+0x164>)
    2a1e:	4b3d      	ldr	r3, [pc, #244]	; (2b14 <main+0x168>)
    2a20:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2a22:	4a3d      	ldr	r2, [pc, #244]	; (2b18 <main+0x16c>)
    2a24:	4b3d      	ldr	r3, [pc, #244]	; (2b1c <main+0x170>)
    2a26:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2a28:	466a      	mov	r2, sp
    2a2a:	493d      	ldr	r1, [pc, #244]	; (2b20 <main+0x174>)
    2a2c:	0028      	movs	r0, r5
    2a2e:	4b3d      	ldr	r3, [pc, #244]	; (2b24 <main+0x178>)
    2a30:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2a32:	4f3d      	ldr	r7, [pc, #244]	; (2b28 <main+0x17c>)
    2a34:	683b      	ldr	r3, [r7, #0]
    2a36:	6898      	ldr	r0, [r3, #8]
    2a38:	2100      	movs	r1, #0
    2a3a:	4e3c      	ldr	r6, [pc, #240]	; (2b2c <main+0x180>)
    2a3c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	6858      	ldr	r0, [r3, #4]
    2a42:	2100      	movs	r1, #0
    2a44:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a46:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a48:	0030      	movs	r0, r6
    2a4a:	4b39      	ldr	r3, [pc, #228]	; (2b30 <main+0x184>)
    2a4c:	4798      	blx	r3
    2a4e:	231f      	movs	r3, #31
    2a50:	4018      	ands	r0, r3
    2a52:	4084      	lsls	r4, r0
    2a54:	4b37      	ldr	r3, [pc, #220]	; (2b34 <main+0x188>)
    2a56:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a58:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a5a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2a5c:	2a00      	cmp	r2, #0
    2a5e:	d1fc      	bne.n	2a5a <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2a60:	6833      	ldr	r3, [r6, #0]
    2a62:	2702      	movs	r7, #2
    2a64:	433b      	orrs	r3, r7
    2a66:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    2a68:	4833      	ldr	r0, [pc, #204]	; (2b38 <main+0x18c>)
    2a6a:	4b34      	ldr	r3, [pc, #208]	; (2b3c <main+0x190>)
    2a6c:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    2a6e:	4b34      	ldr	r3, [pc, #208]	; (2b40 <main+0x194>)
    2a70:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    2a72:	2401      	movs	r4, #1
    2a74:	466b      	mov	r3, sp
    2a76:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    2a78:	2500      	movs	r5, #0
    2a7a:	709d      	strb	r5, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2a7c:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    2a7e:	4669      	mov	r1, sp
    2a80:	2022      	movs	r0, #34	; 0x22
    2a82:	4b30      	ldr	r3, [pc, #192]	; (2b44 <main+0x198>)
    2a84:	4798      	blx	r3
	adc_get_config_defaults(&config);
    2a86:	4668      	mov	r0, sp
    2a88:	4b2f      	ldr	r3, [pc, #188]	; (2b48 <main+0x19c>)
    2a8a:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    2a8c:	466b      	mov	r3, sp
    2a8e:	701c      	strb	r4, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    2a90:	705f      	strb	r7, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    2a92:	2380      	movs	r3, #128	; 0x80
    2a94:	009b      	lsls	r3, r3, #2
    2a96:	466a      	mov	r2, sp
    2a98:	8053      	strh	r3, [r2, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    2a9a:	7115      	strb	r5, [r2, #4]
	adc_init(&adc_inst, ADC, &config);
    2a9c:	4c2b      	ldr	r4, [pc, #172]	; (2b4c <main+0x1a0>)
    2a9e:	492c      	ldr	r1, [pc, #176]	; (2b50 <main+0x1a4>)
    2aa0:	0020      	movs	r0, r4
    2aa2:	4b2c      	ldr	r3, [pc, #176]	; (2b54 <main+0x1a8>)
    2aa4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2aa6:	6823      	ldr	r3, [r4, #0]
    2aa8:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2aaa:	b252      	sxtb	r2, r2
    2aac:	2a00      	cmp	r2, #0
    2aae:	dbfb      	blt.n	2aa8 <main+0xfc>
    2ab0:	2180      	movs	r1, #128	; 0x80
    2ab2:	0409      	lsls	r1, r1, #16
    2ab4:	4a1f      	ldr	r2, [pc, #124]	; (2b34 <main+0x188>)
    2ab6:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2ab8:	220f      	movs	r2, #15
    2aba:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2abc:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2abe:	781a      	ldrb	r2, [r3, #0]
    2ac0:	2102      	movs	r1, #2
    2ac2:	430a      	orrs	r2, r1
    2ac4:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2ac6:	4b21      	ldr	r3, [pc, #132]	; (2b4c <main+0x1a0>)
    2ac8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2aca:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2acc:	b25b      	sxtb	r3, r3
    2ace:	2b00      	cmp	r3, #0
    2ad0:	dbfb      	blt.n	2aca <main+0x11e>
	
	/* Init the GPIO & ADC */
	configure_gpio();
	configure_adc();
	configure_i2c();
    2ad2:	4b21      	ldr	r3, [pc, #132]	; (2b58 <main+0x1ac>)
    2ad4:	4798      	blx	r3
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    2ad6:	4b21      	ldr	r3, [pc, #132]	; (2b5c <main+0x1b0>)
    2ad8:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    2ada:	4821      	ldr	r0, [pc, #132]	; (2b60 <main+0x1b4>)
    2adc:	4b17      	ldr	r3, [pc, #92]	; (2b3c <main+0x190>)
    2ade:	4798      	blx	r3
	while (1) {
		printf("> ");
    2ae0:	4d20      	ldr	r5, [pc, #128]	; (2b64 <main+0x1b8>)
    2ae2:	4e21      	ldr	r6, [pc, #132]	; (2b68 <main+0x1bc>)
		scanf("%[^\r\n]%*c", input);
    2ae4:	4c21      	ldr	r4, [pc, #132]	; (2b6c <main+0x1c0>)
		printf("> ");
    2ae6:	0028      	movs	r0, r5
    2ae8:	47b0      	blx	r6
		scanf("%[^\r\n]%*c", input);
    2aea:	a910      	add	r1, sp, #64	; 0x40
    2aec:	0020      	movs	r0, r4
    2aee:	4b20      	ldr	r3, [pc, #128]	; (2b70 <main+0x1c4>)
    2af0:	4798      	blx	r3
		handle_user_input(input);
    2af2:	a810      	add	r0, sp, #64	; 0x40
    2af4:	4b1f      	ldr	r3, [pc, #124]	; (2b74 <main+0x1c8>)
    2af6:	4798      	blx	r3
    2af8:	e7f5      	b.n	2ae6 <main+0x13a>
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	000026d1 	.word	0x000026d1
    2b00:	002a0003 	.word	0x002a0003
    2b04:	002b0003 	.word	0x002b0003
    2b08:	20000270 	.word	0x20000270
    2b0c:	200003d8 	.word	0x200003d8
    2b10:	000028e1 	.word	0x000028e1
    2b14:	200003d4 	.word	0x200003d4
    2b18:	000028b5 	.word	0x000028b5
    2b1c:	200003d0 	.word	0x200003d0
    2b20:	42001800 	.word	0x42001800
    2b24:	000019ed 	.word	0x000019ed
    2b28:	20000040 	.word	0x20000040
    2b2c:	00004761 	.word	0x00004761
    2b30:	0000195d 	.word	0x0000195d
    2b34:	e000e100 	.word	0xe000e100
    2b38:	00006a54 	.word	0x00006a54
    2b3c:	00004719 	.word	0x00004719
    2b40:	00001389 	.word	0x00001389
    2b44:	00001585 	.word	0x00001585
    2b48:	00000115 	.word	0x00000115
    2b4c:	200003dc 	.word	0x200003dc
    2b50:	42004000 	.word	0x42004000
    2b54:	0000015d 	.word	0x0000015d
    2b58:	000028f9 	.word	0x000028f9
    2b5c:	00000bf9 	.word	0x00000bf9
    2b60:	00006ac0 	.word	0x00006ac0
    2b64:	00006ae0 	.word	0x00006ae0
    2b68:	00004625 	.word	0x00004625
    2b6c:	00006ae4 	.word	0x00006ae4
    2b70:	0000472d 	.word	0x0000472d
    2b74:	00000f79 	.word	0x00000f79

00002b78 <__udivsi3>:
    2b78:	2200      	movs	r2, #0
    2b7a:	0843      	lsrs	r3, r0, #1
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d374      	bcc.n	2c6a <__udivsi3+0xf2>
    2b80:	0903      	lsrs	r3, r0, #4
    2b82:	428b      	cmp	r3, r1
    2b84:	d35f      	bcc.n	2c46 <__udivsi3+0xce>
    2b86:	0a03      	lsrs	r3, r0, #8
    2b88:	428b      	cmp	r3, r1
    2b8a:	d344      	bcc.n	2c16 <__udivsi3+0x9e>
    2b8c:	0b03      	lsrs	r3, r0, #12
    2b8e:	428b      	cmp	r3, r1
    2b90:	d328      	bcc.n	2be4 <__udivsi3+0x6c>
    2b92:	0c03      	lsrs	r3, r0, #16
    2b94:	428b      	cmp	r3, r1
    2b96:	d30d      	bcc.n	2bb4 <__udivsi3+0x3c>
    2b98:	22ff      	movs	r2, #255	; 0xff
    2b9a:	0209      	lsls	r1, r1, #8
    2b9c:	ba12      	rev	r2, r2
    2b9e:	0c03      	lsrs	r3, r0, #16
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d302      	bcc.n	2baa <__udivsi3+0x32>
    2ba4:	1212      	asrs	r2, r2, #8
    2ba6:	0209      	lsls	r1, r1, #8
    2ba8:	d065      	beq.n	2c76 <__udivsi3+0xfe>
    2baa:	0b03      	lsrs	r3, r0, #12
    2bac:	428b      	cmp	r3, r1
    2bae:	d319      	bcc.n	2be4 <__udivsi3+0x6c>
    2bb0:	e000      	b.n	2bb4 <__udivsi3+0x3c>
    2bb2:	0a09      	lsrs	r1, r1, #8
    2bb4:	0bc3      	lsrs	r3, r0, #15
    2bb6:	428b      	cmp	r3, r1
    2bb8:	d301      	bcc.n	2bbe <__udivsi3+0x46>
    2bba:	03cb      	lsls	r3, r1, #15
    2bbc:	1ac0      	subs	r0, r0, r3
    2bbe:	4152      	adcs	r2, r2
    2bc0:	0b83      	lsrs	r3, r0, #14
    2bc2:	428b      	cmp	r3, r1
    2bc4:	d301      	bcc.n	2bca <__udivsi3+0x52>
    2bc6:	038b      	lsls	r3, r1, #14
    2bc8:	1ac0      	subs	r0, r0, r3
    2bca:	4152      	adcs	r2, r2
    2bcc:	0b43      	lsrs	r3, r0, #13
    2bce:	428b      	cmp	r3, r1
    2bd0:	d301      	bcc.n	2bd6 <__udivsi3+0x5e>
    2bd2:	034b      	lsls	r3, r1, #13
    2bd4:	1ac0      	subs	r0, r0, r3
    2bd6:	4152      	adcs	r2, r2
    2bd8:	0b03      	lsrs	r3, r0, #12
    2bda:	428b      	cmp	r3, r1
    2bdc:	d301      	bcc.n	2be2 <__udivsi3+0x6a>
    2bde:	030b      	lsls	r3, r1, #12
    2be0:	1ac0      	subs	r0, r0, r3
    2be2:	4152      	adcs	r2, r2
    2be4:	0ac3      	lsrs	r3, r0, #11
    2be6:	428b      	cmp	r3, r1
    2be8:	d301      	bcc.n	2bee <__udivsi3+0x76>
    2bea:	02cb      	lsls	r3, r1, #11
    2bec:	1ac0      	subs	r0, r0, r3
    2bee:	4152      	adcs	r2, r2
    2bf0:	0a83      	lsrs	r3, r0, #10
    2bf2:	428b      	cmp	r3, r1
    2bf4:	d301      	bcc.n	2bfa <__udivsi3+0x82>
    2bf6:	028b      	lsls	r3, r1, #10
    2bf8:	1ac0      	subs	r0, r0, r3
    2bfa:	4152      	adcs	r2, r2
    2bfc:	0a43      	lsrs	r3, r0, #9
    2bfe:	428b      	cmp	r3, r1
    2c00:	d301      	bcc.n	2c06 <__udivsi3+0x8e>
    2c02:	024b      	lsls	r3, r1, #9
    2c04:	1ac0      	subs	r0, r0, r3
    2c06:	4152      	adcs	r2, r2
    2c08:	0a03      	lsrs	r3, r0, #8
    2c0a:	428b      	cmp	r3, r1
    2c0c:	d301      	bcc.n	2c12 <__udivsi3+0x9a>
    2c0e:	020b      	lsls	r3, r1, #8
    2c10:	1ac0      	subs	r0, r0, r3
    2c12:	4152      	adcs	r2, r2
    2c14:	d2cd      	bcs.n	2bb2 <__udivsi3+0x3a>
    2c16:	09c3      	lsrs	r3, r0, #7
    2c18:	428b      	cmp	r3, r1
    2c1a:	d301      	bcc.n	2c20 <__udivsi3+0xa8>
    2c1c:	01cb      	lsls	r3, r1, #7
    2c1e:	1ac0      	subs	r0, r0, r3
    2c20:	4152      	adcs	r2, r2
    2c22:	0983      	lsrs	r3, r0, #6
    2c24:	428b      	cmp	r3, r1
    2c26:	d301      	bcc.n	2c2c <__udivsi3+0xb4>
    2c28:	018b      	lsls	r3, r1, #6
    2c2a:	1ac0      	subs	r0, r0, r3
    2c2c:	4152      	adcs	r2, r2
    2c2e:	0943      	lsrs	r3, r0, #5
    2c30:	428b      	cmp	r3, r1
    2c32:	d301      	bcc.n	2c38 <__udivsi3+0xc0>
    2c34:	014b      	lsls	r3, r1, #5
    2c36:	1ac0      	subs	r0, r0, r3
    2c38:	4152      	adcs	r2, r2
    2c3a:	0903      	lsrs	r3, r0, #4
    2c3c:	428b      	cmp	r3, r1
    2c3e:	d301      	bcc.n	2c44 <__udivsi3+0xcc>
    2c40:	010b      	lsls	r3, r1, #4
    2c42:	1ac0      	subs	r0, r0, r3
    2c44:	4152      	adcs	r2, r2
    2c46:	08c3      	lsrs	r3, r0, #3
    2c48:	428b      	cmp	r3, r1
    2c4a:	d301      	bcc.n	2c50 <__udivsi3+0xd8>
    2c4c:	00cb      	lsls	r3, r1, #3
    2c4e:	1ac0      	subs	r0, r0, r3
    2c50:	4152      	adcs	r2, r2
    2c52:	0883      	lsrs	r3, r0, #2
    2c54:	428b      	cmp	r3, r1
    2c56:	d301      	bcc.n	2c5c <__udivsi3+0xe4>
    2c58:	008b      	lsls	r3, r1, #2
    2c5a:	1ac0      	subs	r0, r0, r3
    2c5c:	4152      	adcs	r2, r2
    2c5e:	0843      	lsrs	r3, r0, #1
    2c60:	428b      	cmp	r3, r1
    2c62:	d301      	bcc.n	2c68 <__udivsi3+0xf0>
    2c64:	004b      	lsls	r3, r1, #1
    2c66:	1ac0      	subs	r0, r0, r3
    2c68:	4152      	adcs	r2, r2
    2c6a:	1a41      	subs	r1, r0, r1
    2c6c:	d200      	bcs.n	2c70 <__udivsi3+0xf8>
    2c6e:	4601      	mov	r1, r0
    2c70:	4152      	adcs	r2, r2
    2c72:	4610      	mov	r0, r2
    2c74:	4770      	bx	lr
    2c76:	e7ff      	b.n	2c78 <__udivsi3+0x100>
    2c78:	b501      	push	{r0, lr}
    2c7a:	2000      	movs	r0, #0
    2c7c:	f000 f806 	bl	2c8c <__aeabi_idiv0>
    2c80:	bd02      	pop	{r1, pc}
    2c82:	46c0      	nop			; (mov r8, r8)

00002c84 <__aeabi_uidivmod>:
    2c84:	2900      	cmp	r1, #0
    2c86:	d0f7      	beq.n	2c78 <__udivsi3+0x100>
    2c88:	e776      	b.n	2b78 <__udivsi3>
    2c8a:	4770      	bx	lr

00002c8c <__aeabi_idiv0>:
    2c8c:	4770      	bx	lr
    2c8e:	46c0      	nop			; (mov r8, r8)

00002c90 <__aeabi_lmul>:
    2c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c92:	46ce      	mov	lr, r9
    2c94:	4647      	mov	r7, r8
    2c96:	0415      	lsls	r5, r2, #16
    2c98:	0c2d      	lsrs	r5, r5, #16
    2c9a:	002e      	movs	r6, r5
    2c9c:	b580      	push	{r7, lr}
    2c9e:	0407      	lsls	r7, r0, #16
    2ca0:	0c14      	lsrs	r4, r2, #16
    2ca2:	0c3f      	lsrs	r7, r7, #16
    2ca4:	4699      	mov	r9, r3
    2ca6:	0c03      	lsrs	r3, r0, #16
    2ca8:	437e      	muls	r6, r7
    2caa:	435d      	muls	r5, r3
    2cac:	4367      	muls	r7, r4
    2cae:	4363      	muls	r3, r4
    2cb0:	197f      	adds	r7, r7, r5
    2cb2:	0c34      	lsrs	r4, r6, #16
    2cb4:	19e4      	adds	r4, r4, r7
    2cb6:	469c      	mov	ip, r3
    2cb8:	42a5      	cmp	r5, r4
    2cba:	d903      	bls.n	2cc4 <__aeabi_lmul+0x34>
    2cbc:	2380      	movs	r3, #128	; 0x80
    2cbe:	025b      	lsls	r3, r3, #9
    2cc0:	4698      	mov	r8, r3
    2cc2:	44c4      	add	ip, r8
    2cc4:	464b      	mov	r3, r9
    2cc6:	4351      	muls	r1, r2
    2cc8:	4343      	muls	r3, r0
    2cca:	0436      	lsls	r6, r6, #16
    2ccc:	0c36      	lsrs	r6, r6, #16
    2cce:	0c25      	lsrs	r5, r4, #16
    2cd0:	0424      	lsls	r4, r4, #16
    2cd2:	4465      	add	r5, ip
    2cd4:	19a4      	adds	r4, r4, r6
    2cd6:	1859      	adds	r1, r3, r1
    2cd8:	1949      	adds	r1, r1, r5
    2cda:	0020      	movs	r0, r4
    2cdc:	bc0c      	pop	{r2, r3}
    2cde:	4690      	mov	r8, r2
    2ce0:	4699      	mov	r9, r3
    2ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ce4 <__aeabi_dadd>:
    2ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ce6:	4645      	mov	r5, r8
    2ce8:	46de      	mov	lr, fp
    2cea:	4657      	mov	r7, sl
    2cec:	464e      	mov	r6, r9
    2cee:	030c      	lsls	r4, r1, #12
    2cf0:	b5e0      	push	{r5, r6, r7, lr}
    2cf2:	004e      	lsls	r6, r1, #1
    2cf4:	0fc9      	lsrs	r1, r1, #31
    2cf6:	4688      	mov	r8, r1
    2cf8:	000d      	movs	r5, r1
    2cfa:	0a61      	lsrs	r1, r4, #9
    2cfc:	0f44      	lsrs	r4, r0, #29
    2cfe:	430c      	orrs	r4, r1
    2d00:	00c7      	lsls	r7, r0, #3
    2d02:	0319      	lsls	r1, r3, #12
    2d04:	0058      	lsls	r0, r3, #1
    2d06:	0fdb      	lsrs	r3, r3, #31
    2d08:	469b      	mov	fp, r3
    2d0a:	0a4b      	lsrs	r3, r1, #9
    2d0c:	0f51      	lsrs	r1, r2, #29
    2d0e:	430b      	orrs	r3, r1
    2d10:	0d76      	lsrs	r6, r6, #21
    2d12:	0d40      	lsrs	r0, r0, #21
    2d14:	0019      	movs	r1, r3
    2d16:	00d2      	lsls	r2, r2, #3
    2d18:	45d8      	cmp	r8, fp
    2d1a:	d100      	bne.n	2d1e <__aeabi_dadd+0x3a>
    2d1c:	e0ae      	b.n	2e7c <__aeabi_dadd+0x198>
    2d1e:	1a35      	subs	r5, r6, r0
    2d20:	2d00      	cmp	r5, #0
    2d22:	dc00      	bgt.n	2d26 <__aeabi_dadd+0x42>
    2d24:	e0f6      	b.n	2f14 <__aeabi_dadd+0x230>
    2d26:	2800      	cmp	r0, #0
    2d28:	d10f      	bne.n	2d4a <__aeabi_dadd+0x66>
    2d2a:	4313      	orrs	r3, r2
    2d2c:	d100      	bne.n	2d30 <__aeabi_dadd+0x4c>
    2d2e:	e0db      	b.n	2ee8 <__aeabi_dadd+0x204>
    2d30:	1e6b      	subs	r3, r5, #1
    2d32:	2b00      	cmp	r3, #0
    2d34:	d000      	beq.n	2d38 <__aeabi_dadd+0x54>
    2d36:	e137      	b.n	2fa8 <__aeabi_dadd+0x2c4>
    2d38:	1aba      	subs	r2, r7, r2
    2d3a:	4297      	cmp	r7, r2
    2d3c:	41bf      	sbcs	r7, r7
    2d3e:	1a64      	subs	r4, r4, r1
    2d40:	427f      	negs	r7, r7
    2d42:	1be4      	subs	r4, r4, r7
    2d44:	2601      	movs	r6, #1
    2d46:	0017      	movs	r7, r2
    2d48:	e024      	b.n	2d94 <__aeabi_dadd+0xb0>
    2d4a:	4bc6      	ldr	r3, [pc, #792]	; (3064 <__aeabi_dadd+0x380>)
    2d4c:	429e      	cmp	r6, r3
    2d4e:	d04d      	beq.n	2dec <__aeabi_dadd+0x108>
    2d50:	2380      	movs	r3, #128	; 0x80
    2d52:	041b      	lsls	r3, r3, #16
    2d54:	4319      	orrs	r1, r3
    2d56:	2d38      	cmp	r5, #56	; 0x38
    2d58:	dd00      	ble.n	2d5c <__aeabi_dadd+0x78>
    2d5a:	e107      	b.n	2f6c <__aeabi_dadd+0x288>
    2d5c:	2d1f      	cmp	r5, #31
    2d5e:	dd00      	ble.n	2d62 <__aeabi_dadd+0x7e>
    2d60:	e138      	b.n	2fd4 <__aeabi_dadd+0x2f0>
    2d62:	2020      	movs	r0, #32
    2d64:	1b43      	subs	r3, r0, r5
    2d66:	469a      	mov	sl, r3
    2d68:	000b      	movs	r3, r1
    2d6a:	4650      	mov	r0, sl
    2d6c:	4083      	lsls	r3, r0
    2d6e:	4699      	mov	r9, r3
    2d70:	0013      	movs	r3, r2
    2d72:	4648      	mov	r0, r9
    2d74:	40eb      	lsrs	r3, r5
    2d76:	4318      	orrs	r0, r3
    2d78:	0003      	movs	r3, r0
    2d7a:	4650      	mov	r0, sl
    2d7c:	4082      	lsls	r2, r0
    2d7e:	1e50      	subs	r0, r2, #1
    2d80:	4182      	sbcs	r2, r0
    2d82:	40e9      	lsrs	r1, r5
    2d84:	431a      	orrs	r2, r3
    2d86:	1aba      	subs	r2, r7, r2
    2d88:	1a61      	subs	r1, r4, r1
    2d8a:	4297      	cmp	r7, r2
    2d8c:	41a4      	sbcs	r4, r4
    2d8e:	0017      	movs	r7, r2
    2d90:	4264      	negs	r4, r4
    2d92:	1b0c      	subs	r4, r1, r4
    2d94:	0223      	lsls	r3, r4, #8
    2d96:	d562      	bpl.n	2e5e <__aeabi_dadd+0x17a>
    2d98:	0264      	lsls	r4, r4, #9
    2d9a:	0a65      	lsrs	r5, r4, #9
    2d9c:	2d00      	cmp	r5, #0
    2d9e:	d100      	bne.n	2da2 <__aeabi_dadd+0xbe>
    2da0:	e0df      	b.n	2f62 <__aeabi_dadd+0x27e>
    2da2:	0028      	movs	r0, r5
    2da4:	f001 fbe4 	bl	4570 <__clzsi2>
    2da8:	0003      	movs	r3, r0
    2daa:	3b08      	subs	r3, #8
    2dac:	2b1f      	cmp	r3, #31
    2dae:	dd00      	ble.n	2db2 <__aeabi_dadd+0xce>
    2db0:	e0d2      	b.n	2f58 <__aeabi_dadd+0x274>
    2db2:	2220      	movs	r2, #32
    2db4:	003c      	movs	r4, r7
    2db6:	1ad2      	subs	r2, r2, r3
    2db8:	409d      	lsls	r5, r3
    2dba:	40d4      	lsrs	r4, r2
    2dbc:	409f      	lsls	r7, r3
    2dbe:	4325      	orrs	r5, r4
    2dc0:	429e      	cmp	r6, r3
    2dc2:	dd00      	ble.n	2dc6 <__aeabi_dadd+0xe2>
    2dc4:	e0c4      	b.n	2f50 <__aeabi_dadd+0x26c>
    2dc6:	1b9e      	subs	r6, r3, r6
    2dc8:	1c73      	adds	r3, r6, #1
    2dca:	2b1f      	cmp	r3, #31
    2dcc:	dd00      	ble.n	2dd0 <__aeabi_dadd+0xec>
    2dce:	e0f1      	b.n	2fb4 <__aeabi_dadd+0x2d0>
    2dd0:	2220      	movs	r2, #32
    2dd2:	0038      	movs	r0, r7
    2dd4:	0029      	movs	r1, r5
    2dd6:	1ad2      	subs	r2, r2, r3
    2dd8:	40d8      	lsrs	r0, r3
    2dda:	4091      	lsls	r1, r2
    2ddc:	4097      	lsls	r7, r2
    2dde:	002c      	movs	r4, r5
    2de0:	4301      	orrs	r1, r0
    2de2:	1e78      	subs	r0, r7, #1
    2de4:	4187      	sbcs	r7, r0
    2de6:	40dc      	lsrs	r4, r3
    2de8:	2600      	movs	r6, #0
    2dea:	430f      	orrs	r7, r1
    2dec:	077b      	lsls	r3, r7, #29
    2dee:	d009      	beq.n	2e04 <__aeabi_dadd+0x120>
    2df0:	230f      	movs	r3, #15
    2df2:	403b      	ands	r3, r7
    2df4:	2b04      	cmp	r3, #4
    2df6:	d005      	beq.n	2e04 <__aeabi_dadd+0x120>
    2df8:	1d3b      	adds	r3, r7, #4
    2dfa:	42bb      	cmp	r3, r7
    2dfc:	41bf      	sbcs	r7, r7
    2dfe:	427f      	negs	r7, r7
    2e00:	19e4      	adds	r4, r4, r7
    2e02:	001f      	movs	r7, r3
    2e04:	0223      	lsls	r3, r4, #8
    2e06:	d52c      	bpl.n	2e62 <__aeabi_dadd+0x17e>
    2e08:	4b96      	ldr	r3, [pc, #600]	; (3064 <__aeabi_dadd+0x380>)
    2e0a:	3601      	adds	r6, #1
    2e0c:	429e      	cmp	r6, r3
    2e0e:	d100      	bne.n	2e12 <__aeabi_dadd+0x12e>
    2e10:	e09a      	b.n	2f48 <__aeabi_dadd+0x264>
    2e12:	4645      	mov	r5, r8
    2e14:	4b94      	ldr	r3, [pc, #592]	; (3068 <__aeabi_dadd+0x384>)
    2e16:	08ff      	lsrs	r7, r7, #3
    2e18:	401c      	ands	r4, r3
    2e1a:	0760      	lsls	r0, r4, #29
    2e1c:	0576      	lsls	r6, r6, #21
    2e1e:	0264      	lsls	r4, r4, #9
    2e20:	4307      	orrs	r7, r0
    2e22:	0b24      	lsrs	r4, r4, #12
    2e24:	0d76      	lsrs	r6, r6, #21
    2e26:	2100      	movs	r1, #0
    2e28:	0324      	lsls	r4, r4, #12
    2e2a:	0b23      	lsrs	r3, r4, #12
    2e2c:	0d0c      	lsrs	r4, r1, #20
    2e2e:	4a8f      	ldr	r2, [pc, #572]	; (306c <__aeabi_dadd+0x388>)
    2e30:	0524      	lsls	r4, r4, #20
    2e32:	431c      	orrs	r4, r3
    2e34:	4014      	ands	r4, r2
    2e36:	0533      	lsls	r3, r6, #20
    2e38:	4323      	orrs	r3, r4
    2e3a:	005b      	lsls	r3, r3, #1
    2e3c:	07ed      	lsls	r5, r5, #31
    2e3e:	085b      	lsrs	r3, r3, #1
    2e40:	432b      	orrs	r3, r5
    2e42:	0038      	movs	r0, r7
    2e44:	0019      	movs	r1, r3
    2e46:	bc3c      	pop	{r2, r3, r4, r5}
    2e48:	4690      	mov	r8, r2
    2e4a:	4699      	mov	r9, r3
    2e4c:	46a2      	mov	sl, r4
    2e4e:	46ab      	mov	fp, r5
    2e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e52:	4664      	mov	r4, ip
    2e54:	4304      	orrs	r4, r0
    2e56:	d100      	bne.n	2e5a <__aeabi_dadd+0x176>
    2e58:	e211      	b.n	327e <__aeabi_dadd+0x59a>
    2e5a:	0004      	movs	r4, r0
    2e5c:	4667      	mov	r7, ip
    2e5e:	077b      	lsls	r3, r7, #29
    2e60:	d1c6      	bne.n	2df0 <__aeabi_dadd+0x10c>
    2e62:	4645      	mov	r5, r8
    2e64:	0760      	lsls	r0, r4, #29
    2e66:	08ff      	lsrs	r7, r7, #3
    2e68:	4307      	orrs	r7, r0
    2e6a:	08e4      	lsrs	r4, r4, #3
    2e6c:	4b7d      	ldr	r3, [pc, #500]	; (3064 <__aeabi_dadd+0x380>)
    2e6e:	429e      	cmp	r6, r3
    2e70:	d030      	beq.n	2ed4 <__aeabi_dadd+0x1f0>
    2e72:	0324      	lsls	r4, r4, #12
    2e74:	0576      	lsls	r6, r6, #21
    2e76:	0b24      	lsrs	r4, r4, #12
    2e78:	0d76      	lsrs	r6, r6, #21
    2e7a:	e7d4      	b.n	2e26 <__aeabi_dadd+0x142>
    2e7c:	1a33      	subs	r3, r6, r0
    2e7e:	469a      	mov	sl, r3
    2e80:	2b00      	cmp	r3, #0
    2e82:	dd78      	ble.n	2f76 <__aeabi_dadd+0x292>
    2e84:	2800      	cmp	r0, #0
    2e86:	d031      	beq.n	2eec <__aeabi_dadd+0x208>
    2e88:	4876      	ldr	r0, [pc, #472]	; (3064 <__aeabi_dadd+0x380>)
    2e8a:	4286      	cmp	r6, r0
    2e8c:	d0ae      	beq.n	2dec <__aeabi_dadd+0x108>
    2e8e:	2080      	movs	r0, #128	; 0x80
    2e90:	0400      	lsls	r0, r0, #16
    2e92:	4301      	orrs	r1, r0
    2e94:	4653      	mov	r3, sl
    2e96:	2b38      	cmp	r3, #56	; 0x38
    2e98:	dc00      	bgt.n	2e9c <__aeabi_dadd+0x1b8>
    2e9a:	e0e9      	b.n	3070 <__aeabi_dadd+0x38c>
    2e9c:	430a      	orrs	r2, r1
    2e9e:	1e51      	subs	r1, r2, #1
    2ea0:	418a      	sbcs	r2, r1
    2ea2:	2100      	movs	r1, #0
    2ea4:	19d2      	adds	r2, r2, r7
    2ea6:	42ba      	cmp	r2, r7
    2ea8:	41bf      	sbcs	r7, r7
    2eaa:	1909      	adds	r1, r1, r4
    2eac:	427c      	negs	r4, r7
    2eae:	0017      	movs	r7, r2
    2eb0:	190c      	adds	r4, r1, r4
    2eb2:	0223      	lsls	r3, r4, #8
    2eb4:	d5d3      	bpl.n	2e5e <__aeabi_dadd+0x17a>
    2eb6:	4b6b      	ldr	r3, [pc, #428]	; (3064 <__aeabi_dadd+0x380>)
    2eb8:	3601      	adds	r6, #1
    2eba:	429e      	cmp	r6, r3
    2ebc:	d100      	bne.n	2ec0 <__aeabi_dadd+0x1dc>
    2ebe:	e13a      	b.n	3136 <__aeabi_dadd+0x452>
    2ec0:	2001      	movs	r0, #1
    2ec2:	4b69      	ldr	r3, [pc, #420]	; (3068 <__aeabi_dadd+0x384>)
    2ec4:	401c      	ands	r4, r3
    2ec6:	087b      	lsrs	r3, r7, #1
    2ec8:	4007      	ands	r7, r0
    2eca:	431f      	orrs	r7, r3
    2ecc:	07e0      	lsls	r0, r4, #31
    2ece:	4307      	orrs	r7, r0
    2ed0:	0864      	lsrs	r4, r4, #1
    2ed2:	e78b      	b.n	2dec <__aeabi_dadd+0x108>
    2ed4:	0023      	movs	r3, r4
    2ed6:	433b      	orrs	r3, r7
    2ed8:	d100      	bne.n	2edc <__aeabi_dadd+0x1f8>
    2eda:	e1cb      	b.n	3274 <__aeabi_dadd+0x590>
    2edc:	2280      	movs	r2, #128	; 0x80
    2ede:	0312      	lsls	r2, r2, #12
    2ee0:	4314      	orrs	r4, r2
    2ee2:	0324      	lsls	r4, r4, #12
    2ee4:	0b24      	lsrs	r4, r4, #12
    2ee6:	e79e      	b.n	2e26 <__aeabi_dadd+0x142>
    2ee8:	002e      	movs	r6, r5
    2eea:	e77f      	b.n	2dec <__aeabi_dadd+0x108>
    2eec:	0008      	movs	r0, r1
    2eee:	4310      	orrs	r0, r2
    2ef0:	d100      	bne.n	2ef4 <__aeabi_dadd+0x210>
    2ef2:	e0b4      	b.n	305e <__aeabi_dadd+0x37a>
    2ef4:	1e58      	subs	r0, r3, #1
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d000      	beq.n	2efc <__aeabi_dadd+0x218>
    2efa:	e0de      	b.n	30ba <__aeabi_dadd+0x3d6>
    2efc:	18ba      	adds	r2, r7, r2
    2efe:	42ba      	cmp	r2, r7
    2f00:	419b      	sbcs	r3, r3
    2f02:	1864      	adds	r4, r4, r1
    2f04:	425b      	negs	r3, r3
    2f06:	18e4      	adds	r4, r4, r3
    2f08:	0017      	movs	r7, r2
    2f0a:	2601      	movs	r6, #1
    2f0c:	0223      	lsls	r3, r4, #8
    2f0e:	d5a6      	bpl.n	2e5e <__aeabi_dadd+0x17a>
    2f10:	2602      	movs	r6, #2
    2f12:	e7d5      	b.n	2ec0 <__aeabi_dadd+0x1dc>
    2f14:	2d00      	cmp	r5, #0
    2f16:	d16e      	bne.n	2ff6 <__aeabi_dadd+0x312>
    2f18:	1c70      	adds	r0, r6, #1
    2f1a:	0540      	lsls	r0, r0, #21
    2f1c:	0d40      	lsrs	r0, r0, #21
    2f1e:	2801      	cmp	r0, #1
    2f20:	dc00      	bgt.n	2f24 <__aeabi_dadd+0x240>
    2f22:	e0f9      	b.n	3118 <__aeabi_dadd+0x434>
    2f24:	1ab8      	subs	r0, r7, r2
    2f26:	4684      	mov	ip, r0
    2f28:	4287      	cmp	r7, r0
    2f2a:	4180      	sbcs	r0, r0
    2f2c:	1ae5      	subs	r5, r4, r3
    2f2e:	4240      	negs	r0, r0
    2f30:	1a2d      	subs	r5, r5, r0
    2f32:	0228      	lsls	r0, r5, #8
    2f34:	d400      	bmi.n	2f38 <__aeabi_dadd+0x254>
    2f36:	e089      	b.n	304c <__aeabi_dadd+0x368>
    2f38:	1bd7      	subs	r7, r2, r7
    2f3a:	42ba      	cmp	r2, r7
    2f3c:	4192      	sbcs	r2, r2
    2f3e:	1b1c      	subs	r4, r3, r4
    2f40:	4252      	negs	r2, r2
    2f42:	1aa5      	subs	r5, r4, r2
    2f44:	46d8      	mov	r8, fp
    2f46:	e729      	b.n	2d9c <__aeabi_dadd+0xb8>
    2f48:	4645      	mov	r5, r8
    2f4a:	2400      	movs	r4, #0
    2f4c:	2700      	movs	r7, #0
    2f4e:	e76a      	b.n	2e26 <__aeabi_dadd+0x142>
    2f50:	4c45      	ldr	r4, [pc, #276]	; (3068 <__aeabi_dadd+0x384>)
    2f52:	1af6      	subs	r6, r6, r3
    2f54:	402c      	ands	r4, r5
    2f56:	e749      	b.n	2dec <__aeabi_dadd+0x108>
    2f58:	003d      	movs	r5, r7
    2f5a:	3828      	subs	r0, #40	; 0x28
    2f5c:	4085      	lsls	r5, r0
    2f5e:	2700      	movs	r7, #0
    2f60:	e72e      	b.n	2dc0 <__aeabi_dadd+0xdc>
    2f62:	0038      	movs	r0, r7
    2f64:	f001 fb04 	bl	4570 <__clzsi2>
    2f68:	3020      	adds	r0, #32
    2f6a:	e71d      	b.n	2da8 <__aeabi_dadd+0xc4>
    2f6c:	430a      	orrs	r2, r1
    2f6e:	1e51      	subs	r1, r2, #1
    2f70:	418a      	sbcs	r2, r1
    2f72:	2100      	movs	r1, #0
    2f74:	e707      	b.n	2d86 <__aeabi_dadd+0xa2>
    2f76:	2b00      	cmp	r3, #0
    2f78:	d000      	beq.n	2f7c <__aeabi_dadd+0x298>
    2f7a:	e0f3      	b.n	3164 <__aeabi_dadd+0x480>
    2f7c:	1c70      	adds	r0, r6, #1
    2f7e:	0543      	lsls	r3, r0, #21
    2f80:	0d5b      	lsrs	r3, r3, #21
    2f82:	2b01      	cmp	r3, #1
    2f84:	dc00      	bgt.n	2f88 <__aeabi_dadd+0x2a4>
    2f86:	e0ad      	b.n	30e4 <__aeabi_dadd+0x400>
    2f88:	4b36      	ldr	r3, [pc, #216]	; (3064 <__aeabi_dadd+0x380>)
    2f8a:	4298      	cmp	r0, r3
    2f8c:	d100      	bne.n	2f90 <__aeabi_dadd+0x2ac>
    2f8e:	e0d1      	b.n	3134 <__aeabi_dadd+0x450>
    2f90:	18ba      	adds	r2, r7, r2
    2f92:	42ba      	cmp	r2, r7
    2f94:	41bf      	sbcs	r7, r7
    2f96:	1864      	adds	r4, r4, r1
    2f98:	427f      	negs	r7, r7
    2f9a:	19e4      	adds	r4, r4, r7
    2f9c:	07e7      	lsls	r7, r4, #31
    2f9e:	0852      	lsrs	r2, r2, #1
    2fa0:	4317      	orrs	r7, r2
    2fa2:	0864      	lsrs	r4, r4, #1
    2fa4:	0006      	movs	r6, r0
    2fa6:	e721      	b.n	2dec <__aeabi_dadd+0x108>
    2fa8:	482e      	ldr	r0, [pc, #184]	; (3064 <__aeabi_dadd+0x380>)
    2faa:	4285      	cmp	r5, r0
    2fac:	d100      	bne.n	2fb0 <__aeabi_dadd+0x2cc>
    2fae:	e093      	b.n	30d8 <__aeabi_dadd+0x3f4>
    2fb0:	001d      	movs	r5, r3
    2fb2:	e6d0      	b.n	2d56 <__aeabi_dadd+0x72>
    2fb4:	0029      	movs	r1, r5
    2fb6:	3e1f      	subs	r6, #31
    2fb8:	40f1      	lsrs	r1, r6
    2fba:	2b20      	cmp	r3, #32
    2fbc:	d100      	bne.n	2fc0 <__aeabi_dadd+0x2dc>
    2fbe:	e08d      	b.n	30dc <__aeabi_dadd+0x3f8>
    2fc0:	2240      	movs	r2, #64	; 0x40
    2fc2:	1ad3      	subs	r3, r2, r3
    2fc4:	409d      	lsls	r5, r3
    2fc6:	432f      	orrs	r7, r5
    2fc8:	1e7d      	subs	r5, r7, #1
    2fca:	41af      	sbcs	r7, r5
    2fcc:	2400      	movs	r4, #0
    2fce:	430f      	orrs	r7, r1
    2fd0:	2600      	movs	r6, #0
    2fd2:	e744      	b.n	2e5e <__aeabi_dadd+0x17a>
    2fd4:	002b      	movs	r3, r5
    2fd6:	0008      	movs	r0, r1
    2fd8:	3b20      	subs	r3, #32
    2fda:	40d8      	lsrs	r0, r3
    2fdc:	0003      	movs	r3, r0
    2fde:	2d20      	cmp	r5, #32
    2fe0:	d100      	bne.n	2fe4 <__aeabi_dadd+0x300>
    2fe2:	e07d      	b.n	30e0 <__aeabi_dadd+0x3fc>
    2fe4:	2040      	movs	r0, #64	; 0x40
    2fe6:	1b45      	subs	r5, r0, r5
    2fe8:	40a9      	lsls	r1, r5
    2fea:	430a      	orrs	r2, r1
    2fec:	1e51      	subs	r1, r2, #1
    2fee:	418a      	sbcs	r2, r1
    2ff0:	2100      	movs	r1, #0
    2ff2:	431a      	orrs	r2, r3
    2ff4:	e6c7      	b.n	2d86 <__aeabi_dadd+0xa2>
    2ff6:	2e00      	cmp	r6, #0
    2ff8:	d050      	beq.n	309c <__aeabi_dadd+0x3b8>
    2ffa:	4e1a      	ldr	r6, [pc, #104]	; (3064 <__aeabi_dadd+0x380>)
    2ffc:	42b0      	cmp	r0, r6
    2ffe:	d057      	beq.n	30b0 <__aeabi_dadd+0x3cc>
    3000:	2680      	movs	r6, #128	; 0x80
    3002:	426b      	negs	r3, r5
    3004:	4699      	mov	r9, r3
    3006:	0436      	lsls	r6, r6, #16
    3008:	4334      	orrs	r4, r6
    300a:	464b      	mov	r3, r9
    300c:	2b38      	cmp	r3, #56	; 0x38
    300e:	dd00      	ble.n	3012 <__aeabi_dadd+0x32e>
    3010:	e0d6      	b.n	31c0 <__aeabi_dadd+0x4dc>
    3012:	2b1f      	cmp	r3, #31
    3014:	dd00      	ble.n	3018 <__aeabi_dadd+0x334>
    3016:	e135      	b.n	3284 <__aeabi_dadd+0x5a0>
    3018:	2620      	movs	r6, #32
    301a:	1af5      	subs	r5, r6, r3
    301c:	0026      	movs	r6, r4
    301e:	40ae      	lsls	r6, r5
    3020:	46b2      	mov	sl, r6
    3022:	003e      	movs	r6, r7
    3024:	40de      	lsrs	r6, r3
    3026:	46ac      	mov	ip, r5
    3028:	0035      	movs	r5, r6
    302a:	4656      	mov	r6, sl
    302c:	432e      	orrs	r6, r5
    302e:	4665      	mov	r5, ip
    3030:	40af      	lsls	r7, r5
    3032:	1e7d      	subs	r5, r7, #1
    3034:	41af      	sbcs	r7, r5
    3036:	40dc      	lsrs	r4, r3
    3038:	4337      	orrs	r7, r6
    303a:	1bd7      	subs	r7, r2, r7
    303c:	42ba      	cmp	r2, r7
    303e:	4192      	sbcs	r2, r2
    3040:	1b0c      	subs	r4, r1, r4
    3042:	4252      	negs	r2, r2
    3044:	1aa4      	subs	r4, r4, r2
    3046:	0006      	movs	r6, r0
    3048:	46d8      	mov	r8, fp
    304a:	e6a3      	b.n	2d94 <__aeabi_dadd+0xb0>
    304c:	4664      	mov	r4, ip
    304e:	4667      	mov	r7, ip
    3050:	432c      	orrs	r4, r5
    3052:	d000      	beq.n	3056 <__aeabi_dadd+0x372>
    3054:	e6a2      	b.n	2d9c <__aeabi_dadd+0xb8>
    3056:	2500      	movs	r5, #0
    3058:	2600      	movs	r6, #0
    305a:	2700      	movs	r7, #0
    305c:	e706      	b.n	2e6c <__aeabi_dadd+0x188>
    305e:	001e      	movs	r6, r3
    3060:	e6c4      	b.n	2dec <__aeabi_dadd+0x108>
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	000007ff 	.word	0x000007ff
    3068:	ff7fffff 	.word	0xff7fffff
    306c:	800fffff 	.word	0x800fffff
    3070:	2b1f      	cmp	r3, #31
    3072:	dc63      	bgt.n	313c <__aeabi_dadd+0x458>
    3074:	2020      	movs	r0, #32
    3076:	1ac3      	subs	r3, r0, r3
    3078:	0008      	movs	r0, r1
    307a:	4098      	lsls	r0, r3
    307c:	469c      	mov	ip, r3
    307e:	4683      	mov	fp, r0
    3080:	4653      	mov	r3, sl
    3082:	0010      	movs	r0, r2
    3084:	40d8      	lsrs	r0, r3
    3086:	0003      	movs	r3, r0
    3088:	4658      	mov	r0, fp
    308a:	4318      	orrs	r0, r3
    308c:	4663      	mov	r3, ip
    308e:	409a      	lsls	r2, r3
    3090:	1e53      	subs	r3, r2, #1
    3092:	419a      	sbcs	r2, r3
    3094:	4653      	mov	r3, sl
    3096:	4302      	orrs	r2, r0
    3098:	40d9      	lsrs	r1, r3
    309a:	e703      	b.n	2ea4 <__aeabi_dadd+0x1c0>
    309c:	0026      	movs	r6, r4
    309e:	433e      	orrs	r6, r7
    30a0:	d006      	beq.n	30b0 <__aeabi_dadd+0x3cc>
    30a2:	43eb      	mvns	r3, r5
    30a4:	4699      	mov	r9, r3
    30a6:	2b00      	cmp	r3, #0
    30a8:	d0c7      	beq.n	303a <__aeabi_dadd+0x356>
    30aa:	4e94      	ldr	r6, [pc, #592]	; (32fc <__aeabi_dadd+0x618>)
    30ac:	42b0      	cmp	r0, r6
    30ae:	d1ac      	bne.n	300a <__aeabi_dadd+0x326>
    30b0:	000c      	movs	r4, r1
    30b2:	0017      	movs	r7, r2
    30b4:	0006      	movs	r6, r0
    30b6:	46d8      	mov	r8, fp
    30b8:	e698      	b.n	2dec <__aeabi_dadd+0x108>
    30ba:	4b90      	ldr	r3, [pc, #576]	; (32fc <__aeabi_dadd+0x618>)
    30bc:	459a      	cmp	sl, r3
    30be:	d00b      	beq.n	30d8 <__aeabi_dadd+0x3f4>
    30c0:	4682      	mov	sl, r0
    30c2:	e6e7      	b.n	2e94 <__aeabi_dadd+0x1b0>
    30c4:	2800      	cmp	r0, #0
    30c6:	d000      	beq.n	30ca <__aeabi_dadd+0x3e6>
    30c8:	e09e      	b.n	3208 <__aeabi_dadd+0x524>
    30ca:	0018      	movs	r0, r3
    30cc:	4310      	orrs	r0, r2
    30ce:	d100      	bne.n	30d2 <__aeabi_dadd+0x3ee>
    30d0:	e0e9      	b.n	32a6 <__aeabi_dadd+0x5c2>
    30d2:	001c      	movs	r4, r3
    30d4:	0017      	movs	r7, r2
    30d6:	46d8      	mov	r8, fp
    30d8:	4e88      	ldr	r6, [pc, #544]	; (32fc <__aeabi_dadd+0x618>)
    30da:	e687      	b.n	2dec <__aeabi_dadd+0x108>
    30dc:	2500      	movs	r5, #0
    30de:	e772      	b.n	2fc6 <__aeabi_dadd+0x2e2>
    30e0:	2100      	movs	r1, #0
    30e2:	e782      	b.n	2fea <__aeabi_dadd+0x306>
    30e4:	0023      	movs	r3, r4
    30e6:	433b      	orrs	r3, r7
    30e8:	2e00      	cmp	r6, #0
    30ea:	d000      	beq.n	30ee <__aeabi_dadd+0x40a>
    30ec:	e0ab      	b.n	3246 <__aeabi_dadd+0x562>
    30ee:	2b00      	cmp	r3, #0
    30f0:	d100      	bne.n	30f4 <__aeabi_dadd+0x410>
    30f2:	e0e7      	b.n	32c4 <__aeabi_dadd+0x5e0>
    30f4:	000b      	movs	r3, r1
    30f6:	4313      	orrs	r3, r2
    30f8:	d100      	bne.n	30fc <__aeabi_dadd+0x418>
    30fa:	e677      	b.n	2dec <__aeabi_dadd+0x108>
    30fc:	18ba      	adds	r2, r7, r2
    30fe:	42ba      	cmp	r2, r7
    3100:	41bf      	sbcs	r7, r7
    3102:	1864      	adds	r4, r4, r1
    3104:	427f      	negs	r7, r7
    3106:	19e4      	adds	r4, r4, r7
    3108:	0223      	lsls	r3, r4, #8
    310a:	d400      	bmi.n	310e <__aeabi_dadd+0x42a>
    310c:	e0f2      	b.n	32f4 <__aeabi_dadd+0x610>
    310e:	4b7c      	ldr	r3, [pc, #496]	; (3300 <__aeabi_dadd+0x61c>)
    3110:	0017      	movs	r7, r2
    3112:	401c      	ands	r4, r3
    3114:	0006      	movs	r6, r0
    3116:	e669      	b.n	2dec <__aeabi_dadd+0x108>
    3118:	0020      	movs	r0, r4
    311a:	4338      	orrs	r0, r7
    311c:	2e00      	cmp	r6, #0
    311e:	d1d1      	bne.n	30c4 <__aeabi_dadd+0x3e0>
    3120:	2800      	cmp	r0, #0
    3122:	d15b      	bne.n	31dc <__aeabi_dadd+0x4f8>
    3124:	001c      	movs	r4, r3
    3126:	4314      	orrs	r4, r2
    3128:	d100      	bne.n	312c <__aeabi_dadd+0x448>
    312a:	e0a8      	b.n	327e <__aeabi_dadd+0x59a>
    312c:	001c      	movs	r4, r3
    312e:	0017      	movs	r7, r2
    3130:	46d8      	mov	r8, fp
    3132:	e65b      	b.n	2dec <__aeabi_dadd+0x108>
    3134:	0006      	movs	r6, r0
    3136:	2400      	movs	r4, #0
    3138:	2700      	movs	r7, #0
    313a:	e697      	b.n	2e6c <__aeabi_dadd+0x188>
    313c:	4650      	mov	r0, sl
    313e:	000b      	movs	r3, r1
    3140:	3820      	subs	r0, #32
    3142:	40c3      	lsrs	r3, r0
    3144:	4699      	mov	r9, r3
    3146:	4653      	mov	r3, sl
    3148:	2b20      	cmp	r3, #32
    314a:	d100      	bne.n	314e <__aeabi_dadd+0x46a>
    314c:	e095      	b.n	327a <__aeabi_dadd+0x596>
    314e:	2340      	movs	r3, #64	; 0x40
    3150:	4650      	mov	r0, sl
    3152:	1a1b      	subs	r3, r3, r0
    3154:	4099      	lsls	r1, r3
    3156:	430a      	orrs	r2, r1
    3158:	1e51      	subs	r1, r2, #1
    315a:	418a      	sbcs	r2, r1
    315c:	464b      	mov	r3, r9
    315e:	2100      	movs	r1, #0
    3160:	431a      	orrs	r2, r3
    3162:	e69f      	b.n	2ea4 <__aeabi_dadd+0x1c0>
    3164:	2e00      	cmp	r6, #0
    3166:	d130      	bne.n	31ca <__aeabi_dadd+0x4e6>
    3168:	0026      	movs	r6, r4
    316a:	433e      	orrs	r6, r7
    316c:	d067      	beq.n	323e <__aeabi_dadd+0x55a>
    316e:	43db      	mvns	r3, r3
    3170:	469a      	mov	sl, r3
    3172:	2b00      	cmp	r3, #0
    3174:	d01c      	beq.n	31b0 <__aeabi_dadd+0x4cc>
    3176:	4e61      	ldr	r6, [pc, #388]	; (32fc <__aeabi_dadd+0x618>)
    3178:	42b0      	cmp	r0, r6
    317a:	d060      	beq.n	323e <__aeabi_dadd+0x55a>
    317c:	4653      	mov	r3, sl
    317e:	2b38      	cmp	r3, #56	; 0x38
    3180:	dd00      	ble.n	3184 <__aeabi_dadd+0x4a0>
    3182:	e096      	b.n	32b2 <__aeabi_dadd+0x5ce>
    3184:	2b1f      	cmp	r3, #31
    3186:	dd00      	ble.n	318a <__aeabi_dadd+0x4a6>
    3188:	e09f      	b.n	32ca <__aeabi_dadd+0x5e6>
    318a:	2620      	movs	r6, #32
    318c:	1af3      	subs	r3, r6, r3
    318e:	0026      	movs	r6, r4
    3190:	409e      	lsls	r6, r3
    3192:	469c      	mov	ip, r3
    3194:	46b3      	mov	fp, r6
    3196:	4653      	mov	r3, sl
    3198:	003e      	movs	r6, r7
    319a:	40de      	lsrs	r6, r3
    319c:	0033      	movs	r3, r6
    319e:	465e      	mov	r6, fp
    31a0:	431e      	orrs	r6, r3
    31a2:	4663      	mov	r3, ip
    31a4:	409f      	lsls	r7, r3
    31a6:	1e7b      	subs	r3, r7, #1
    31a8:	419f      	sbcs	r7, r3
    31aa:	4653      	mov	r3, sl
    31ac:	40dc      	lsrs	r4, r3
    31ae:	4337      	orrs	r7, r6
    31b0:	18bf      	adds	r7, r7, r2
    31b2:	4297      	cmp	r7, r2
    31b4:	4192      	sbcs	r2, r2
    31b6:	1864      	adds	r4, r4, r1
    31b8:	4252      	negs	r2, r2
    31ba:	18a4      	adds	r4, r4, r2
    31bc:	0006      	movs	r6, r0
    31be:	e678      	b.n	2eb2 <__aeabi_dadd+0x1ce>
    31c0:	4327      	orrs	r7, r4
    31c2:	1e7c      	subs	r4, r7, #1
    31c4:	41a7      	sbcs	r7, r4
    31c6:	2400      	movs	r4, #0
    31c8:	e737      	b.n	303a <__aeabi_dadd+0x356>
    31ca:	4e4c      	ldr	r6, [pc, #304]	; (32fc <__aeabi_dadd+0x618>)
    31cc:	42b0      	cmp	r0, r6
    31ce:	d036      	beq.n	323e <__aeabi_dadd+0x55a>
    31d0:	2680      	movs	r6, #128	; 0x80
    31d2:	425b      	negs	r3, r3
    31d4:	0436      	lsls	r6, r6, #16
    31d6:	469a      	mov	sl, r3
    31d8:	4334      	orrs	r4, r6
    31da:	e7cf      	b.n	317c <__aeabi_dadd+0x498>
    31dc:	0018      	movs	r0, r3
    31de:	4310      	orrs	r0, r2
    31e0:	d100      	bne.n	31e4 <__aeabi_dadd+0x500>
    31e2:	e603      	b.n	2dec <__aeabi_dadd+0x108>
    31e4:	1ab8      	subs	r0, r7, r2
    31e6:	4684      	mov	ip, r0
    31e8:	4567      	cmp	r7, ip
    31ea:	41ad      	sbcs	r5, r5
    31ec:	1ae0      	subs	r0, r4, r3
    31ee:	426d      	negs	r5, r5
    31f0:	1b40      	subs	r0, r0, r5
    31f2:	0205      	lsls	r5, r0, #8
    31f4:	d400      	bmi.n	31f8 <__aeabi_dadd+0x514>
    31f6:	e62c      	b.n	2e52 <__aeabi_dadd+0x16e>
    31f8:	1bd7      	subs	r7, r2, r7
    31fa:	42ba      	cmp	r2, r7
    31fc:	4192      	sbcs	r2, r2
    31fe:	1b1c      	subs	r4, r3, r4
    3200:	4252      	negs	r2, r2
    3202:	1aa4      	subs	r4, r4, r2
    3204:	46d8      	mov	r8, fp
    3206:	e5f1      	b.n	2dec <__aeabi_dadd+0x108>
    3208:	0018      	movs	r0, r3
    320a:	4310      	orrs	r0, r2
    320c:	d100      	bne.n	3210 <__aeabi_dadd+0x52c>
    320e:	e763      	b.n	30d8 <__aeabi_dadd+0x3f4>
    3210:	08f8      	lsrs	r0, r7, #3
    3212:	0767      	lsls	r7, r4, #29
    3214:	4307      	orrs	r7, r0
    3216:	2080      	movs	r0, #128	; 0x80
    3218:	08e4      	lsrs	r4, r4, #3
    321a:	0300      	lsls	r0, r0, #12
    321c:	4204      	tst	r4, r0
    321e:	d008      	beq.n	3232 <__aeabi_dadd+0x54e>
    3220:	08dd      	lsrs	r5, r3, #3
    3222:	4205      	tst	r5, r0
    3224:	d105      	bne.n	3232 <__aeabi_dadd+0x54e>
    3226:	08d2      	lsrs	r2, r2, #3
    3228:	0759      	lsls	r1, r3, #29
    322a:	4311      	orrs	r1, r2
    322c:	000f      	movs	r7, r1
    322e:	002c      	movs	r4, r5
    3230:	46d8      	mov	r8, fp
    3232:	0f7b      	lsrs	r3, r7, #29
    3234:	00e4      	lsls	r4, r4, #3
    3236:	431c      	orrs	r4, r3
    3238:	00ff      	lsls	r7, r7, #3
    323a:	4e30      	ldr	r6, [pc, #192]	; (32fc <__aeabi_dadd+0x618>)
    323c:	e5d6      	b.n	2dec <__aeabi_dadd+0x108>
    323e:	000c      	movs	r4, r1
    3240:	0017      	movs	r7, r2
    3242:	0006      	movs	r6, r0
    3244:	e5d2      	b.n	2dec <__aeabi_dadd+0x108>
    3246:	2b00      	cmp	r3, #0
    3248:	d038      	beq.n	32bc <__aeabi_dadd+0x5d8>
    324a:	000b      	movs	r3, r1
    324c:	4313      	orrs	r3, r2
    324e:	d100      	bne.n	3252 <__aeabi_dadd+0x56e>
    3250:	e742      	b.n	30d8 <__aeabi_dadd+0x3f4>
    3252:	08f8      	lsrs	r0, r7, #3
    3254:	0767      	lsls	r7, r4, #29
    3256:	4307      	orrs	r7, r0
    3258:	2080      	movs	r0, #128	; 0x80
    325a:	08e4      	lsrs	r4, r4, #3
    325c:	0300      	lsls	r0, r0, #12
    325e:	4204      	tst	r4, r0
    3260:	d0e7      	beq.n	3232 <__aeabi_dadd+0x54e>
    3262:	08cb      	lsrs	r3, r1, #3
    3264:	4203      	tst	r3, r0
    3266:	d1e4      	bne.n	3232 <__aeabi_dadd+0x54e>
    3268:	08d2      	lsrs	r2, r2, #3
    326a:	0749      	lsls	r1, r1, #29
    326c:	4311      	orrs	r1, r2
    326e:	000f      	movs	r7, r1
    3270:	001c      	movs	r4, r3
    3272:	e7de      	b.n	3232 <__aeabi_dadd+0x54e>
    3274:	2700      	movs	r7, #0
    3276:	2400      	movs	r4, #0
    3278:	e5d5      	b.n	2e26 <__aeabi_dadd+0x142>
    327a:	2100      	movs	r1, #0
    327c:	e76b      	b.n	3156 <__aeabi_dadd+0x472>
    327e:	2500      	movs	r5, #0
    3280:	2700      	movs	r7, #0
    3282:	e5f3      	b.n	2e6c <__aeabi_dadd+0x188>
    3284:	464e      	mov	r6, r9
    3286:	0025      	movs	r5, r4
    3288:	3e20      	subs	r6, #32
    328a:	40f5      	lsrs	r5, r6
    328c:	464b      	mov	r3, r9
    328e:	002e      	movs	r6, r5
    3290:	2b20      	cmp	r3, #32
    3292:	d02d      	beq.n	32f0 <__aeabi_dadd+0x60c>
    3294:	2540      	movs	r5, #64	; 0x40
    3296:	1aed      	subs	r5, r5, r3
    3298:	40ac      	lsls	r4, r5
    329a:	4327      	orrs	r7, r4
    329c:	1e7c      	subs	r4, r7, #1
    329e:	41a7      	sbcs	r7, r4
    32a0:	2400      	movs	r4, #0
    32a2:	4337      	orrs	r7, r6
    32a4:	e6c9      	b.n	303a <__aeabi_dadd+0x356>
    32a6:	2480      	movs	r4, #128	; 0x80
    32a8:	2500      	movs	r5, #0
    32aa:	0324      	lsls	r4, r4, #12
    32ac:	4e13      	ldr	r6, [pc, #76]	; (32fc <__aeabi_dadd+0x618>)
    32ae:	2700      	movs	r7, #0
    32b0:	e5dc      	b.n	2e6c <__aeabi_dadd+0x188>
    32b2:	4327      	orrs	r7, r4
    32b4:	1e7c      	subs	r4, r7, #1
    32b6:	41a7      	sbcs	r7, r4
    32b8:	2400      	movs	r4, #0
    32ba:	e779      	b.n	31b0 <__aeabi_dadd+0x4cc>
    32bc:	000c      	movs	r4, r1
    32be:	0017      	movs	r7, r2
    32c0:	4e0e      	ldr	r6, [pc, #56]	; (32fc <__aeabi_dadd+0x618>)
    32c2:	e593      	b.n	2dec <__aeabi_dadd+0x108>
    32c4:	000c      	movs	r4, r1
    32c6:	0017      	movs	r7, r2
    32c8:	e590      	b.n	2dec <__aeabi_dadd+0x108>
    32ca:	4656      	mov	r6, sl
    32cc:	0023      	movs	r3, r4
    32ce:	3e20      	subs	r6, #32
    32d0:	40f3      	lsrs	r3, r6
    32d2:	4699      	mov	r9, r3
    32d4:	4653      	mov	r3, sl
    32d6:	2b20      	cmp	r3, #32
    32d8:	d00e      	beq.n	32f8 <__aeabi_dadd+0x614>
    32da:	2340      	movs	r3, #64	; 0x40
    32dc:	4656      	mov	r6, sl
    32de:	1b9b      	subs	r3, r3, r6
    32e0:	409c      	lsls	r4, r3
    32e2:	4327      	orrs	r7, r4
    32e4:	1e7c      	subs	r4, r7, #1
    32e6:	41a7      	sbcs	r7, r4
    32e8:	464b      	mov	r3, r9
    32ea:	2400      	movs	r4, #0
    32ec:	431f      	orrs	r7, r3
    32ee:	e75f      	b.n	31b0 <__aeabi_dadd+0x4cc>
    32f0:	2400      	movs	r4, #0
    32f2:	e7d2      	b.n	329a <__aeabi_dadd+0x5b6>
    32f4:	0017      	movs	r7, r2
    32f6:	e5b2      	b.n	2e5e <__aeabi_dadd+0x17a>
    32f8:	2400      	movs	r4, #0
    32fa:	e7f2      	b.n	32e2 <__aeabi_dadd+0x5fe>
    32fc:	000007ff 	.word	0x000007ff
    3300:	ff7fffff 	.word	0xff7fffff

00003304 <__aeabi_ddiv>:
    3304:	b5f0      	push	{r4, r5, r6, r7, lr}
    3306:	4657      	mov	r7, sl
    3308:	4645      	mov	r5, r8
    330a:	46de      	mov	lr, fp
    330c:	464e      	mov	r6, r9
    330e:	b5e0      	push	{r5, r6, r7, lr}
    3310:	004c      	lsls	r4, r1, #1
    3312:	030e      	lsls	r6, r1, #12
    3314:	b087      	sub	sp, #28
    3316:	4683      	mov	fp, r0
    3318:	4692      	mov	sl, r2
    331a:	001d      	movs	r5, r3
    331c:	4680      	mov	r8, r0
    331e:	0b36      	lsrs	r6, r6, #12
    3320:	0d64      	lsrs	r4, r4, #21
    3322:	0fcf      	lsrs	r7, r1, #31
    3324:	2c00      	cmp	r4, #0
    3326:	d04f      	beq.n	33c8 <__aeabi_ddiv+0xc4>
    3328:	4b6f      	ldr	r3, [pc, #444]	; (34e8 <__aeabi_ddiv+0x1e4>)
    332a:	429c      	cmp	r4, r3
    332c:	d035      	beq.n	339a <__aeabi_ddiv+0x96>
    332e:	2380      	movs	r3, #128	; 0x80
    3330:	0f42      	lsrs	r2, r0, #29
    3332:	041b      	lsls	r3, r3, #16
    3334:	00f6      	lsls	r6, r6, #3
    3336:	4313      	orrs	r3, r2
    3338:	4333      	orrs	r3, r6
    333a:	4699      	mov	r9, r3
    333c:	00c3      	lsls	r3, r0, #3
    333e:	4698      	mov	r8, r3
    3340:	4b6a      	ldr	r3, [pc, #424]	; (34ec <__aeabi_ddiv+0x1e8>)
    3342:	2600      	movs	r6, #0
    3344:	469c      	mov	ip, r3
    3346:	2300      	movs	r3, #0
    3348:	4464      	add	r4, ip
    334a:	9303      	str	r3, [sp, #12]
    334c:	032b      	lsls	r3, r5, #12
    334e:	0b1b      	lsrs	r3, r3, #12
    3350:	469b      	mov	fp, r3
    3352:	006b      	lsls	r3, r5, #1
    3354:	0fed      	lsrs	r5, r5, #31
    3356:	4650      	mov	r0, sl
    3358:	0d5b      	lsrs	r3, r3, #21
    335a:	9501      	str	r5, [sp, #4]
    335c:	d05e      	beq.n	341c <__aeabi_ddiv+0x118>
    335e:	4a62      	ldr	r2, [pc, #392]	; (34e8 <__aeabi_ddiv+0x1e4>)
    3360:	4293      	cmp	r3, r2
    3362:	d053      	beq.n	340c <__aeabi_ddiv+0x108>
    3364:	465a      	mov	r2, fp
    3366:	00d1      	lsls	r1, r2, #3
    3368:	2280      	movs	r2, #128	; 0x80
    336a:	0f40      	lsrs	r0, r0, #29
    336c:	0412      	lsls	r2, r2, #16
    336e:	4302      	orrs	r2, r0
    3370:	430a      	orrs	r2, r1
    3372:	4693      	mov	fp, r2
    3374:	4652      	mov	r2, sl
    3376:	00d1      	lsls	r1, r2, #3
    3378:	4a5c      	ldr	r2, [pc, #368]	; (34ec <__aeabi_ddiv+0x1e8>)
    337a:	4694      	mov	ip, r2
    337c:	2200      	movs	r2, #0
    337e:	4463      	add	r3, ip
    3380:	0038      	movs	r0, r7
    3382:	4068      	eors	r0, r5
    3384:	4684      	mov	ip, r0
    3386:	9002      	str	r0, [sp, #8]
    3388:	1ae4      	subs	r4, r4, r3
    338a:	4316      	orrs	r6, r2
    338c:	2e0f      	cmp	r6, #15
    338e:	d900      	bls.n	3392 <__aeabi_ddiv+0x8e>
    3390:	e0b4      	b.n	34fc <__aeabi_ddiv+0x1f8>
    3392:	4b57      	ldr	r3, [pc, #348]	; (34f0 <__aeabi_ddiv+0x1ec>)
    3394:	00b6      	lsls	r6, r6, #2
    3396:	599b      	ldr	r3, [r3, r6]
    3398:	469f      	mov	pc, r3
    339a:	0003      	movs	r3, r0
    339c:	4333      	orrs	r3, r6
    339e:	4699      	mov	r9, r3
    33a0:	d16c      	bne.n	347c <__aeabi_ddiv+0x178>
    33a2:	2300      	movs	r3, #0
    33a4:	4698      	mov	r8, r3
    33a6:	3302      	adds	r3, #2
    33a8:	2608      	movs	r6, #8
    33aa:	9303      	str	r3, [sp, #12]
    33ac:	e7ce      	b.n	334c <__aeabi_ddiv+0x48>
    33ae:	46cb      	mov	fp, r9
    33b0:	4641      	mov	r1, r8
    33b2:	9a03      	ldr	r2, [sp, #12]
    33b4:	9701      	str	r7, [sp, #4]
    33b6:	2a02      	cmp	r2, #2
    33b8:	d165      	bne.n	3486 <__aeabi_ddiv+0x182>
    33ba:	9b01      	ldr	r3, [sp, #4]
    33bc:	4c4a      	ldr	r4, [pc, #296]	; (34e8 <__aeabi_ddiv+0x1e4>)
    33be:	469c      	mov	ip, r3
    33c0:	2300      	movs	r3, #0
    33c2:	2200      	movs	r2, #0
    33c4:	4698      	mov	r8, r3
    33c6:	e06b      	b.n	34a0 <__aeabi_ddiv+0x19c>
    33c8:	0003      	movs	r3, r0
    33ca:	4333      	orrs	r3, r6
    33cc:	4699      	mov	r9, r3
    33ce:	d04e      	beq.n	346e <__aeabi_ddiv+0x16a>
    33d0:	2e00      	cmp	r6, #0
    33d2:	d100      	bne.n	33d6 <__aeabi_ddiv+0xd2>
    33d4:	e1bc      	b.n	3750 <__aeabi_ddiv+0x44c>
    33d6:	0030      	movs	r0, r6
    33d8:	f001 f8ca 	bl	4570 <__clzsi2>
    33dc:	0003      	movs	r3, r0
    33de:	3b0b      	subs	r3, #11
    33e0:	2b1c      	cmp	r3, #28
    33e2:	dd00      	ble.n	33e6 <__aeabi_ddiv+0xe2>
    33e4:	e1ac      	b.n	3740 <__aeabi_ddiv+0x43c>
    33e6:	221d      	movs	r2, #29
    33e8:	1ad3      	subs	r3, r2, r3
    33ea:	465a      	mov	r2, fp
    33ec:	0001      	movs	r1, r0
    33ee:	40da      	lsrs	r2, r3
    33f0:	3908      	subs	r1, #8
    33f2:	408e      	lsls	r6, r1
    33f4:	0013      	movs	r3, r2
    33f6:	4333      	orrs	r3, r6
    33f8:	4699      	mov	r9, r3
    33fa:	465b      	mov	r3, fp
    33fc:	408b      	lsls	r3, r1
    33fe:	4698      	mov	r8, r3
    3400:	2300      	movs	r3, #0
    3402:	4c3c      	ldr	r4, [pc, #240]	; (34f4 <__aeabi_ddiv+0x1f0>)
    3404:	2600      	movs	r6, #0
    3406:	1a24      	subs	r4, r4, r0
    3408:	9303      	str	r3, [sp, #12]
    340a:	e79f      	b.n	334c <__aeabi_ddiv+0x48>
    340c:	4651      	mov	r1, sl
    340e:	465a      	mov	r2, fp
    3410:	4311      	orrs	r1, r2
    3412:	d129      	bne.n	3468 <__aeabi_ddiv+0x164>
    3414:	2200      	movs	r2, #0
    3416:	4693      	mov	fp, r2
    3418:	3202      	adds	r2, #2
    341a:	e7b1      	b.n	3380 <__aeabi_ddiv+0x7c>
    341c:	4659      	mov	r1, fp
    341e:	4301      	orrs	r1, r0
    3420:	d01e      	beq.n	3460 <__aeabi_ddiv+0x15c>
    3422:	465b      	mov	r3, fp
    3424:	2b00      	cmp	r3, #0
    3426:	d100      	bne.n	342a <__aeabi_ddiv+0x126>
    3428:	e19e      	b.n	3768 <__aeabi_ddiv+0x464>
    342a:	4658      	mov	r0, fp
    342c:	f001 f8a0 	bl	4570 <__clzsi2>
    3430:	0003      	movs	r3, r0
    3432:	3b0b      	subs	r3, #11
    3434:	2b1c      	cmp	r3, #28
    3436:	dd00      	ble.n	343a <__aeabi_ddiv+0x136>
    3438:	e18f      	b.n	375a <__aeabi_ddiv+0x456>
    343a:	0002      	movs	r2, r0
    343c:	4659      	mov	r1, fp
    343e:	3a08      	subs	r2, #8
    3440:	4091      	lsls	r1, r2
    3442:	468b      	mov	fp, r1
    3444:	211d      	movs	r1, #29
    3446:	1acb      	subs	r3, r1, r3
    3448:	4651      	mov	r1, sl
    344a:	40d9      	lsrs	r1, r3
    344c:	000b      	movs	r3, r1
    344e:	4659      	mov	r1, fp
    3450:	430b      	orrs	r3, r1
    3452:	4651      	mov	r1, sl
    3454:	469b      	mov	fp, r3
    3456:	4091      	lsls	r1, r2
    3458:	4b26      	ldr	r3, [pc, #152]	; (34f4 <__aeabi_ddiv+0x1f0>)
    345a:	2200      	movs	r2, #0
    345c:	1a1b      	subs	r3, r3, r0
    345e:	e78f      	b.n	3380 <__aeabi_ddiv+0x7c>
    3460:	2300      	movs	r3, #0
    3462:	2201      	movs	r2, #1
    3464:	469b      	mov	fp, r3
    3466:	e78b      	b.n	3380 <__aeabi_ddiv+0x7c>
    3468:	4651      	mov	r1, sl
    346a:	2203      	movs	r2, #3
    346c:	e788      	b.n	3380 <__aeabi_ddiv+0x7c>
    346e:	2300      	movs	r3, #0
    3470:	4698      	mov	r8, r3
    3472:	3301      	adds	r3, #1
    3474:	2604      	movs	r6, #4
    3476:	2400      	movs	r4, #0
    3478:	9303      	str	r3, [sp, #12]
    347a:	e767      	b.n	334c <__aeabi_ddiv+0x48>
    347c:	2303      	movs	r3, #3
    347e:	46b1      	mov	r9, r6
    3480:	9303      	str	r3, [sp, #12]
    3482:	260c      	movs	r6, #12
    3484:	e762      	b.n	334c <__aeabi_ddiv+0x48>
    3486:	2a03      	cmp	r2, #3
    3488:	d100      	bne.n	348c <__aeabi_ddiv+0x188>
    348a:	e25c      	b.n	3946 <__aeabi_ddiv+0x642>
    348c:	9b01      	ldr	r3, [sp, #4]
    348e:	2a01      	cmp	r2, #1
    3490:	d000      	beq.n	3494 <__aeabi_ddiv+0x190>
    3492:	e1e4      	b.n	385e <__aeabi_ddiv+0x55a>
    3494:	4013      	ands	r3, r2
    3496:	469c      	mov	ip, r3
    3498:	2300      	movs	r3, #0
    349a:	2400      	movs	r4, #0
    349c:	2200      	movs	r2, #0
    349e:	4698      	mov	r8, r3
    34a0:	2100      	movs	r1, #0
    34a2:	0312      	lsls	r2, r2, #12
    34a4:	0b13      	lsrs	r3, r2, #12
    34a6:	0d0a      	lsrs	r2, r1, #20
    34a8:	0512      	lsls	r2, r2, #20
    34aa:	431a      	orrs	r2, r3
    34ac:	0523      	lsls	r3, r4, #20
    34ae:	4c12      	ldr	r4, [pc, #72]	; (34f8 <__aeabi_ddiv+0x1f4>)
    34b0:	4640      	mov	r0, r8
    34b2:	4022      	ands	r2, r4
    34b4:	4313      	orrs	r3, r2
    34b6:	4662      	mov	r2, ip
    34b8:	005b      	lsls	r3, r3, #1
    34ba:	07d2      	lsls	r2, r2, #31
    34bc:	085b      	lsrs	r3, r3, #1
    34be:	4313      	orrs	r3, r2
    34c0:	0019      	movs	r1, r3
    34c2:	b007      	add	sp, #28
    34c4:	bc3c      	pop	{r2, r3, r4, r5}
    34c6:	4690      	mov	r8, r2
    34c8:	4699      	mov	r9, r3
    34ca:	46a2      	mov	sl, r4
    34cc:	46ab      	mov	fp, r5
    34ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34d0:	2300      	movs	r3, #0
    34d2:	2280      	movs	r2, #128	; 0x80
    34d4:	469c      	mov	ip, r3
    34d6:	0312      	lsls	r2, r2, #12
    34d8:	4698      	mov	r8, r3
    34da:	4c03      	ldr	r4, [pc, #12]	; (34e8 <__aeabi_ddiv+0x1e4>)
    34dc:	e7e0      	b.n	34a0 <__aeabi_ddiv+0x19c>
    34de:	2300      	movs	r3, #0
    34e0:	4c01      	ldr	r4, [pc, #4]	; (34e8 <__aeabi_ddiv+0x1e4>)
    34e2:	2200      	movs	r2, #0
    34e4:	4698      	mov	r8, r3
    34e6:	e7db      	b.n	34a0 <__aeabi_ddiv+0x19c>
    34e8:	000007ff 	.word	0x000007ff
    34ec:	fffffc01 	.word	0xfffffc01
    34f0:	00006af0 	.word	0x00006af0
    34f4:	fffffc0d 	.word	0xfffffc0d
    34f8:	800fffff 	.word	0x800fffff
    34fc:	45d9      	cmp	r9, fp
    34fe:	d900      	bls.n	3502 <__aeabi_ddiv+0x1fe>
    3500:	e139      	b.n	3776 <__aeabi_ddiv+0x472>
    3502:	d100      	bne.n	3506 <__aeabi_ddiv+0x202>
    3504:	e134      	b.n	3770 <__aeabi_ddiv+0x46c>
    3506:	2300      	movs	r3, #0
    3508:	4646      	mov	r6, r8
    350a:	464d      	mov	r5, r9
    350c:	469a      	mov	sl, r3
    350e:	3c01      	subs	r4, #1
    3510:	465b      	mov	r3, fp
    3512:	0e0a      	lsrs	r2, r1, #24
    3514:	021b      	lsls	r3, r3, #8
    3516:	431a      	orrs	r2, r3
    3518:	020b      	lsls	r3, r1, #8
    351a:	0c17      	lsrs	r7, r2, #16
    351c:	9303      	str	r3, [sp, #12]
    351e:	0413      	lsls	r3, r2, #16
    3520:	0c1b      	lsrs	r3, r3, #16
    3522:	0039      	movs	r1, r7
    3524:	0028      	movs	r0, r5
    3526:	4690      	mov	r8, r2
    3528:	9301      	str	r3, [sp, #4]
    352a:	f7ff fb25 	bl	2b78 <__udivsi3>
    352e:	0002      	movs	r2, r0
    3530:	9b01      	ldr	r3, [sp, #4]
    3532:	4683      	mov	fp, r0
    3534:	435a      	muls	r2, r3
    3536:	0028      	movs	r0, r5
    3538:	0039      	movs	r1, r7
    353a:	4691      	mov	r9, r2
    353c:	f7ff fba2 	bl	2c84 <__aeabi_uidivmod>
    3540:	0c35      	lsrs	r5, r6, #16
    3542:	0409      	lsls	r1, r1, #16
    3544:	430d      	orrs	r5, r1
    3546:	45a9      	cmp	r9, r5
    3548:	d90d      	bls.n	3566 <__aeabi_ddiv+0x262>
    354a:	465b      	mov	r3, fp
    354c:	4445      	add	r5, r8
    354e:	3b01      	subs	r3, #1
    3550:	45a8      	cmp	r8, r5
    3552:	d900      	bls.n	3556 <__aeabi_ddiv+0x252>
    3554:	e13a      	b.n	37cc <__aeabi_ddiv+0x4c8>
    3556:	45a9      	cmp	r9, r5
    3558:	d800      	bhi.n	355c <__aeabi_ddiv+0x258>
    355a:	e137      	b.n	37cc <__aeabi_ddiv+0x4c8>
    355c:	2302      	movs	r3, #2
    355e:	425b      	negs	r3, r3
    3560:	469c      	mov	ip, r3
    3562:	4445      	add	r5, r8
    3564:	44e3      	add	fp, ip
    3566:	464b      	mov	r3, r9
    3568:	1aeb      	subs	r3, r5, r3
    356a:	0039      	movs	r1, r7
    356c:	0018      	movs	r0, r3
    356e:	9304      	str	r3, [sp, #16]
    3570:	f7ff fb02 	bl	2b78 <__udivsi3>
    3574:	9b01      	ldr	r3, [sp, #4]
    3576:	0005      	movs	r5, r0
    3578:	4343      	muls	r3, r0
    357a:	0039      	movs	r1, r7
    357c:	9804      	ldr	r0, [sp, #16]
    357e:	4699      	mov	r9, r3
    3580:	f7ff fb80 	bl	2c84 <__aeabi_uidivmod>
    3584:	0433      	lsls	r3, r6, #16
    3586:	0409      	lsls	r1, r1, #16
    3588:	0c1b      	lsrs	r3, r3, #16
    358a:	430b      	orrs	r3, r1
    358c:	4599      	cmp	r9, r3
    358e:	d909      	bls.n	35a4 <__aeabi_ddiv+0x2a0>
    3590:	4443      	add	r3, r8
    3592:	1e6a      	subs	r2, r5, #1
    3594:	4598      	cmp	r8, r3
    3596:	d900      	bls.n	359a <__aeabi_ddiv+0x296>
    3598:	e11a      	b.n	37d0 <__aeabi_ddiv+0x4cc>
    359a:	4599      	cmp	r9, r3
    359c:	d800      	bhi.n	35a0 <__aeabi_ddiv+0x29c>
    359e:	e117      	b.n	37d0 <__aeabi_ddiv+0x4cc>
    35a0:	3d02      	subs	r5, #2
    35a2:	4443      	add	r3, r8
    35a4:	464a      	mov	r2, r9
    35a6:	1a9b      	subs	r3, r3, r2
    35a8:	465a      	mov	r2, fp
    35aa:	0412      	lsls	r2, r2, #16
    35ac:	432a      	orrs	r2, r5
    35ae:	9903      	ldr	r1, [sp, #12]
    35b0:	4693      	mov	fp, r2
    35b2:	0c10      	lsrs	r0, r2, #16
    35b4:	0c0a      	lsrs	r2, r1, #16
    35b6:	4691      	mov	r9, r2
    35b8:	0409      	lsls	r1, r1, #16
    35ba:	465a      	mov	r2, fp
    35bc:	0c09      	lsrs	r1, r1, #16
    35be:	464e      	mov	r6, r9
    35c0:	000d      	movs	r5, r1
    35c2:	0412      	lsls	r2, r2, #16
    35c4:	0c12      	lsrs	r2, r2, #16
    35c6:	4345      	muls	r5, r0
    35c8:	9105      	str	r1, [sp, #20]
    35ca:	4351      	muls	r1, r2
    35cc:	4372      	muls	r2, r6
    35ce:	4370      	muls	r0, r6
    35d0:	1952      	adds	r2, r2, r5
    35d2:	0c0e      	lsrs	r6, r1, #16
    35d4:	18b2      	adds	r2, r6, r2
    35d6:	4295      	cmp	r5, r2
    35d8:	d903      	bls.n	35e2 <__aeabi_ddiv+0x2de>
    35da:	2580      	movs	r5, #128	; 0x80
    35dc:	026d      	lsls	r5, r5, #9
    35de:	46ac      	mov	ip, r5
    35e0:	4460      	add	r0, ip
    35e2:	0c15      	lsrs	r5, r2, #16
    35e4:	0409      	lsls	r1, r1, #16
    35e6:	0412      	lsls	r2, r2, #16
    35e8:	0c09      	lsrs	r1, r1, #16
    35ea:	1828      	adds	r0, r5, r0
    35ec:	1852      	adds	r2, r2, r1
    35ee:	4283      	cmp	r3, r0
    35f0:	d200      	bcs.n	35f4 <__aeabi_ddiv+0x2f0>
    35f2:	e0ce      	b.n	3792 <__aeabi_ddiv+0x48e>
    35f4:	d100      	bne.n	35f8 <__aeabi_ddiv+0x2f4>
    35f6:	e0c8      	b.n	378a <__aeabi_ddiv+0x486>
    35f8:	1a1d      	subs	r5, r3, r0
    35fa:	4653      	mov	r3, sl
    35fc:	1a9e      	subs	r6, r3, r2
    35fe:	45b2      	cmp	sl, r6
    3600:	4192      	sbcs	r2, r2
    3602:	4252      	negs	r2, r2
    3604:	1aab      	subs	r3, r5, r2
    3606:	469a      	mov	sl, r3
    3608:	4598      	cmp	r8, r3
    360a:	d100      	bne.n	360e <__aeabi_ddiv+0x30a>
    360c:	e117      	b.n	383e <__aeabi_ddiv+0x53a>
    360e:	0039      	movs	r1, r7
    3610:	0018      	movs	r0, r3
    3612:	f7ff fab1 	bl	2b78 <__udivsi3>
    3616:	9b01      	ldr	r3, [sp, #4]
    3618:	0005      	movs	r5, r0
    361a:	4343      	muls	r3, r0
    361c:	0039      	movs	r1, r7
    361e:	4650      	mov	r0, sl
    3620:	9304      	str	r3, [sp, #16]
    3622:	f7ff fb2f 	bl	2c84 <__aeabi_uidivmod>
    3626:	9804      	ldr	r0, [sp, #16]
    3628:	040b      	lsls	r3, r1, #16
    362a:	0c31      	lsrs	r1, r6, #16
    362c:	4319      	orrs	r1, r3
    362e:	4288      	cmp	r0, r1
    3630:	d909      	bls.n	3646 <__aeabi_ddiv+0x342>
    3632:	4441      	add	r1, r8
    3634:	1e6b      	subs	r3, r5, #1
    3636:	4588      	cmp	r8, r1
    3638:	d900      	bls.n	363c <__aeabi_ddiv+0x338>
    363a:	e107      	b.n	384c <__aeabi_ddiv+0x548>
    363c:	4288      	cmp	r0, r1
    363e:	d800      	bhi.n	3642 <__aeabi_ddiv+0x33e>
    3640:	e104      	b.n	384c <__aeabi_ddiv+0x548>
    3642:	3d02      	subs	r5, #2
    3644:	4441      	add	r1, r8
    3646:	9b04      	ldr	r3, [sp, #16]
    3648:	1acb      	subs	r3, r1, r3
    364a:	0018      	movs	r0, r3
    364c:	0039      	movs	r1, r7
    364e:	9304      	str	r3, [sp, #16]
    3650:	f7ff fa92 	bl	2b78 <__udivsi3>
    3654:	9b01      	ldr	r3, [sp, #4]
    3656:	4682      	mov	sl, r0
    3658:	4343      	muls	r3, r0
    365a:	0039      	movs	r1, r7
    365c:	9804      	ldr	r0, [sp, #16]
    365e:	9301      	str	r3, [sp, #4]
    3660:	f7ff fb10 	bl	2c84 <__aeabi_uidivmod>
    3664:	9801      	ldr	r0, [sp, #4]
    3666:	040b      	lsls	r3, r1, #16
    3668:	0431      	lsls	r1, r6, #16
    366a:	0c09      	lsrs	r1, r1, #16
    366c:	4319      	orrs	r1, r3
    366e:	4288      	cmp	r0, r1
    3670:	d90d      	bls.n	368e <__aeabi_ddiv+0x38a>
    3672:	4653      	mov	r3, sl
    3674:	4441      	add	r1, r8
    3676:	3b01      	subs	r3, #1
    3678:	4588      	cmp	r8, r1
    367a:	d900      	bls.n	367e <__aeabi_ddiv+0x37a>
    367c:	e0e8      	b.n	3850 <__aeabi_ddiv+0x54c>
    367e:	4288      	cmp	r0, r1
    3680:	d800      	bhi.n	3684 <__aeabi_ddiv+0x380>
    3682:	e0e5      	b.n	3850 <__aeabi_ddiv+0x54c>
    3684:	2302      	movs	r3, #2
    3686:	425b      	negs	r3, r3
    3688:	469c      	mov	ip, r3
    368a:	4441      	add	r1, r8
    368c:	44e2      	add	sl, ip
    368e:	9b01      	ldr	r3, [sp, #4]
    3690:	042d      	lsls	r5, r5, #16
    3692:	1ace      	subs	r6, r1, r3
    3694:	4651      	mov	r1, sl
    3696:	4329      	orrs	r1, r5
    3698:	9d05      	ldr	r5, [sp, #20]
    369a:	464f      	mov	r7, r9
    369c:	002a      	movs	r2, r5
    369e:	040b      	lsls	r3, r1, #16
    36a0:	0c08      	lsrs	r0, r1, #16
    36a2:	0c1b      	lsrs	r3, r3, #16
    36a4:	435a      	muls	r2, r3
    36a6:	4345      	muls	r5, r0
    36a8:	437b      	muls	r3, r7
    36aa:	4378      	muls	r0, r7
    36ac:	195b      	adds	r3, r3, r5
    36ae:	0c17      	lsrs	r7, r2, #16
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	429d      	cmp	r5, r3
    36b4:	d903      	bls.n	36be <__aeabi_ddiv+0x3ba>
    36b6:	2580      	movs	r5, #128	; 0x80
    36b8:	026d      	lsls	r5, r5, #9
    36ba:	46ac      	mov	ip, r5
    36bc:	4460      	add	r0, ip
    36be:	0c1d      	lsrs	r5, r3, #16
    36c0:	0412      	lsls	r2, r2, #16
    36c2:	041b      	lsls	r3, r3, #16
    36c4:	0c12      	lsrs	r2, r2, #16
    36c6:	1828      	adds	r0, r5, r0
    36c8:	189b      	adds	r3, r3, r2
    36ca:	4286      	cmp	r6, r0
    36cc:	d200      	bcs.n	36d0 <__aeabi_ddiv+0x3cc>
    36ce:	e093      	b.n	37f8 <__aeabi_ddiv+0x4f4>
    36d0:	d100      	bne.n	36d4 <__aeabi_ddiv+0x3d0>
    36d2:	e08e      	b.n	37f2 <__aeabi_ddiv+0x4ee>
    36d4:	2301      	movs	r3, #1
    36d6:	4319      	orrs	r1, r3
    36d8:	4ba0      	ldr	r3, [pc, #640]	; (395c <__aeabi_ddiv+0x658>)
    36da:	18e3      	adds	r3, r4, r3
    36dc:	2b00      	cmp	r3, #0
    36de:	dc00      	bgt.n	36e2 <__aeabi_ddiv+0x3de>
    36e0:	e099      	b.n	3816 <__aeabi_ddiv+0x512>
    36e2:	074a      	lsls	r2, r1, #29
    36e4:	d000      	beq.n	36e8 <__aeabi_ddiv+0x3e4>
    36e6:	e09e      	b.n	3826 <__aeabi_ddiv+0x522>
    36e8:	465a      	mov	r2, fp
    36ea:	01d2      	lsls	r2, r2, #7
    36ec:	d506      	bpl.n	36fc <__aeabi_ddiv+0x3f8>
    36ee:	465a      	mov	r2, fp
    36f0:	4b9b      	ldr	r3, [pc, #620]	; (3960 <__aeabi_ddiv+0x65c>)
    36f2:	401a      	ands	r2, r3
    36f4:	2380      	movs	r3, #128	; 0x80
    36f6:	4693      	mov	fp, r2
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	18e3      	adds	r3, r4, r3
    36fc:	4a99      	ldr	r2, [pc, #612]	; (3964 <__aeabi_ddiv+0x660>)
    36fe:	4293      	cmp	r3, r2
    3700:	dd68      	ble.n	37d4 <__aeabi_ddiv+0x4d0>
    3702:	2301      	movs	r3, #1
    3704:	9a02      	ldr	r2, [sp, #8]
    3706:	4c98      	ldr	r4, [pc, #608]	; (3968 <__aeabi_ddiv+0x664>)
    3708:	401a      	ands	r2, r3
    370a:	2300      	movs	r3, #0
    370c:	4694      	mov	ip, r2
    370e:	4698      	mov	r8, r3
    3710:	2200      	movs	r2, #0
    3712:	e6c5      	b.n	34a0 <__aeabi_ddiv+0x19c>
    3714:	2280      	movs	r2, #128	; 0x80
    3716:	464b      	mov	r3, r9
    3718:	0312      	lsls	r2, r2, #12
    371a:	4213      	tst	r3, r2
    371c:	d00a      	beq.n	3734 <__aeabi_ddiv+0x430>
    371e:	465b      	mov	r3, fp
    3720:	4213      	tst	r3, r2
    3722:	d106      	bne.n	3732 <__aeabi_ddiv+0x42e>
    3724:	431a      	orrs	r2, r3
    3726:	0312      	lsls	r2, r2, #12
    3728:	0b12      	lsrs	r2, r2, #12
    372a:	46ac      	mov	ip, r5
    372c:	4688      	mov	r8, r1
    372e:	4c8e      	ldr	r4, [pc, #568]	; (3968 <__aeabi_ddiv+0x664>)
    3730:	e6b6      	b.n	34a0 <__aeabi_ddiv+0x19c>
    3732:	464b      	mov	r3, r9
    3734:	431a      	orrs	r2, r3
    3736:	0312      	lsls	r2, r2, #12
    3738:	0b12      	lsrs	r2, r2, #12
    373a:	46bc      	mov	ip, r7
    373c:	4c8a      	ldr	r4, [pc, #552]	; (3968 <__aeabi_ddiv+0x664>)
    373e:	e6af      	b.n	34a0 <__aeabi_ddiv+0x19c>
    3740:	0003      	movs	r3, r0
    3742:	465a      	mov	r2, fp
    3744:	3b28      	subs	r3, #40	; 0x28
    3746:	409a      	lsls	r2, r3
    3748:	2300      	movs	r3, #0
    374a:	4691      	mov	r9, r2
    374c:	4698      	mov	r8, r3
    374e:	e657      	b.n	3400 <__aeabi_ddiv+0xfc>
    3750:	4658      	mov	r0, fp
    3752:	f000 ff0d 	bl	4570 <__clzsi2>
    3756:	3020      	adds	r0, #32
    3758:	e640      	b.n	33dc <__aeabi_ddiv+0xd8>
    375a:	0003      	movs	r3, r0
    375c:	4652      	mov	r2, sl
    375e:	3b28      	subs	r3, #40	; 0x28
    3760:	409a      	lsls	r2, r3
    3762:	2100      	movs	r1, #0
    3764:	4693      	mov	fp, r2
    3766:	e677      	b.n	3458 <__aeabi_ddiv+0x154>
    3768:	f000 ff02 	bl	4570 <__clzsi2>
    376c:	3020      	adds	r0, #32
    376e:	e65f      	b.n	3430 <__aeabi_ddiv+0x12c>
    3770:	4588      	cmp	r8, r1
    3772:	d200      	bcs.n	3776 <__aeabi_ddiv+0x472>
    3774:	e6c7      	b.n	3506 <__aeabi_ddiv+0x202>
    3776:	464b      	mov	r3, r9
    3778:	07de      	lsls	r6, r3, #31
    377a:	085d      	lsrs	r5, r3, #1
    377c:	4643      	mov	r3, r8
    377e:	085b      	lsrs	r3, r3, #1
    3780:	431e      	orrs	r6, r3
    3782:	4643      	mov	r3, r8
    3784:	07db      	lsls	r3, r3, #31
    3786:	469a      	mov	sl, r3
    3788:	e6c2      	b.n	3510 <__aeabi_ddiv+0x20c>
    378a:	2500      	movs	r5, #0
    378c:	4592      	cmp	sl, r2
    378e:	d300      	bcc.n	3792 <__aeabi_ddiv+0x48e>
    3790:	e733      	b.n	35fa <__aeabi_ddiv+0x2f6>
    3792:	9e03      	ldr	r6, [sp, #12]
    3794:	4659      	mov	r1, fp
    3796:	46b4      	mov	ip, r6
    3798:	44e2      	add	sl, ip
    379a:	45b2      	cmp	sl, r6
    379c:	41ad      	sbcs	r5, r5
    379e:	426d      	negs	r5, r5
    37a0:	4445      	add	r5, r8
    37a2:	18eb      	adds	r3, r5, r3
    37a4:	3901      	subs	r1, #1
    37a6:	4598      	cmp	r8, r3
    37a8:	d207      	bcs.n	37ba <__aeabi_ddiv+0x4b6>
    37aa:	4298      	cmp	r0, r3
    37ac:	d900      	bls.n	37b0 <__aeabi_ddiv+0x4ac>
    37ae:	e07f      	b.n	38b0 <__aeabi_ddiv+0x5ac>
    37b0:	d100      	bne.n	37b4 <__aeabi_ddiv+0x4b0>
    37b2:	e0bc      	b.n	392e <__aeabi_ddiv+0x62a>
    37b4:	1a1d      	subs	r5, r3, r0
    37b6:	468b      	mov	fp, r1
    37b8:	e71f      	b.n	35fa <__aeabi_ddiv+0x2f6>
    37ba:	4598      	cmp	r8, r3
    37bc:	d1fa      	bne.n	37b4 <__aeabi_ddiv+0x4b0>
    37be:	9d03      	ldr	r5, [sp, #12]
    37c0:	4555      	cmp	r5, sl
    37c2:	d9f2      	bls.n	37aa <__aeabi_ddiv+0x4a6>
    37c4:	4643      	mov	r3, r8
    37c6:	468b      	mov	fp, r1
    37c8:	1a1d      	subs	r5, r3, r0
    37ca:	e716      	b.n	35fa <__aeabi_ddiv+0x2f6>
    37cc:	469b      	mov	fp, r3
    37ce:	e6ca      	b.n	3566 <__aeabi_ddiv+0x262>
    37d0:	0015      	movs	r5, r2
    37d2:	e6e7      	b.n	35a4 <__aeabi_ddiv+0x2a0>
    37d4:	465a      	mov	r2, fp
    37d6:	08c9      	lsrs	r1, r1, #3
    37d8:	0752      	lsls	r2, r2, #29
    37da:	430a      	orrs	r2, r1
    37dc:	055b      	lsls	r3, r3, #21
    37de:	4690      	mov	r8, r2
    37e0:	0d5c      	lsrs	r4, r3, #21
    37e2:	465a      	mov	r2, fp
    37e4:	2301      	movs	r3, #1
    37e6:	9902      	ldr	r1, [sp, #8]
    37e8:	0252      	lsls	r2, r2, #9
    37ea:	4019      	ands	r1, r3
    37ec:	0b12      	lsrs	r2, r2, #12
    37ee:	468c      	mov	ip, r1
    37f0:	e656      	b.n	34a0 <__aeabi_ddiv+0x19c>
    37f2:	2b00      	cmp	r3, #0
    37f4:	d100      	bne.n	37f8 <__aeabi_ddiv+0x4f4>
    37f6:	e76f      	b.n	36d8 <__aeabi_ddiv+0x3d4>
    37f8:	4446      	add	r6, r8
    37fa:	1e4a      	subs	r2, r1, #1
    37fc:	45b0      	cmp	r8, r6
    37fe:	d929      	bls.n	3854 <__aeabi_ddiv+0x550>
    3800:	0011      	movs	r1, r2
    3802:	4286      	cmp	r6, r0
    3804:	d000      	beq.n	3808 <__aeabi_ddiv+0x504>
    3806:	e765      	b.n	36d4 <__aeabi_ddiv+0x3d0>
    3808:	9a03      	ldr	r2, [sp, #12]
    380a:	4293      	cmp	r3, r2
    380c:	d000      	beq.n	3810 <__aeabi_ddiv+0x50c>
    380e:	e761      	b.n	36d4 <__aeabi_ddiv+0x3d0>
    3810:	e762      	b.n	36d8 <__aeabi_ddiv+0x3d4>
    3812:	2101      	movs	r1, #1
    3814:	4249      	negs	r1, r1
    3816:	2001      	movs	r0, #1
    3818:	1ac2      	subs	r2, r0, r3
    381a:	2a38      	cmp	r2, #56	; 0x38
    381c:	dd21      	ble.n	3862 <__aeabi_ddiv+0x55e>
    381e:	9b02      	ldr	r3, [sp, #8]
    3820:	4003      	ands	r3, r0
    3822:	469c      	mov	ip, r3
    3824:	e638      	b.n	3498 <__aeabi_ddiv+0x194>
    3826:	220f      	movs	r2, #15
    3828:	400a      	ands	r2, r1
    382a:	2a04      	cmp	r2, #4
    382c:	d100      	bne.n	3830 <__aeabi_ddiv+0x52c>
    382e:	e75b      	b.n	36e8 <__aeabi_ddiv+0x3e4>
    3830:	000a      	movs	r2, r1
    3832:	1d11      	adds	r1, r2, #4
    3834:	4291      	cmp	r1, r2
    3836:	4192      	sbcs	r2, r2
    3838:	4252      	negs	r2, r2
    383a:	4493      	add	fp, r2
    383c:	e754      	b.n	36e8 <__aeabi_ddiv+0x3e4>
    383e:	4b47      	ldr	r3, [pc, #284]	; (395c <__aeabi_ddiv+0x658>)
    3840:	18e3      	adds	r3, r4, r3
    3842:	2b00      	cmp	r3, #0
    3844:	dde5      	ble.n	3812 <__aeabi_ddiv+0x50e>
    3846:	2201      	movs	r2, #1
    3848:	4252      	negs	r2, r2
    384a:	e7f2      	b.n	3832 <__aeabi_ddiv+0x52e>
    384c:	001d      	movs	r5, r3
    384e:	e6fa      	b.n	3646 <__aeabi_ddiv+0x342>
    3850:	469a      	mov	sl, r3
    3852:	e71c      	b.n	368e <__aeabi_ddiv+0x38a>
    3854:	42b0      	cmp	r0, r6
    3856:	d839      	bhi.n	38cc <__aeabi_ddiv+0x5c8>
    3858:	d06e      	beq.n	3938 <__aeabi_ddiv+0x634>
    385a:	0011      	movs	r1, r2
    385c:	e73a      	b.n	36d4 <__aeabi_ddiv+0x3d0>
    385e:	9302      	str	r3, [sp, #8]
    3860:	e73a      	b.n	36d8 <__aeabi_ddiv+0x3d4>
    3862:	2a1f      	cmp	r2, #31
    3864:	dc3c      	bgt.n	38e0 <__aeabi_ddiv+0x5dc>
    3866:	2320      	movs	r3, #32
    3868:	1a9b      	subs	r3, r3, r2
    386a:	000c      	movs	r4, r1
    386c:	4658      	mov	r0, fp
    386e:	4099      	lsls	r1, r3
    3870:	4098      	lsls	r0, r3
    3872:	1e4b      	subs	r3, r1, #1
    3874:	4199      	sbcs	r1, r3
    3876:	465b      	mov	r3, fp
    3878:	40d4      	lsrs	r4, r2
    387a:	40d3      	lsrs	r3, r2
    387c:	4320      	orrs	r0, r4
    387e:	4308      	orrs	r0, r1
    3880:	001a      	movs	r2, r3
    3882:	0743      	lsls	r3, r0, #29
    3884:	d009      	beq.n	389a <__aeabi_ddiv+0x596>
    3886:	230f      	movs	r3, #15
    3888:	4003      	ands	r3, r0
    388a:	2b04      	cmp	r3, #4
    388c:	d005      	beq.n	389a <__aeabi_ddiv+0x596>
    388e:	0001      	movs	r1, r0
    3890:	1d08      	adds	r0, r1, #4
    3892:	4288      	cmp	r0, r1
    3894:	419b      	sbcs	r3, r3
    3896:	425b      	negs	r3, r3
    3898:	18d2      	adds	r2, r2, r3
    389a:	0213      	lsls	r3, r2, #8
    389c:	d53a      	bpl.n	3914 <__aeabi_ddiv+0x610>
    389e:	2301      	movs	r3, #1
    38a0:	9a02      	ldr	r2, [sp, #8]
    38a2:	2401      	movs	r4, #1
    38a4:	401a      	ands	r2, r3
    38a6:	2300      	movs	r3, #0
    38a8:	4694      	mov	ip, r2
    38aa:	4698      	mov	r8, r3
    38ac:	2200      	movs	r2, #0
    38ae:	e5f7      	b.n	34a0 <__aeabi_ddiv+0x19c>
    38b0:	2102      	movs	r1, #2
    38b2:	4249      	negs	r1, r1
    38b4:	468c      	mov	ip, r1
    38b6:	9d03      	ldr	r5, [sp, #12]
    38b8:	44e3      	add	fp, ip
    38ba:	46ac      	mov	ip, r5
    38bc:	44e2      	add	sl, ip
    38be:	45aa      	cmp	sl, r5
    38c0:	41ad      	sbcs	r5, r5
    38c2:	426d      	negs	r5, r5
    38c4:	4445      	add	r5, r8
    38c6:	18ed      	adds	r5, r5, r3
    38c8:	1a2d      	subs	r5, r5, r0
    38ca:	e696      	b.n	35fa <__aeabi_ddiv+0x2f6>
    38cc:	1e8a      	subs	r2, r1, #2
    38ce:	9903      	ldr	r1, [sp, #12]
    38d0:	004d      	lsls	r5, r1, #1
    38d2:	428d      	cmp	r5, r1
    38d4:	4189      	sbcs	r1, r1
    38d6:	4249      	negs	r1, r1
    38d8:	4441      	add	r1, r8
    38da:	1876      	adds	r6, r6, r1
    38dc:	9503      	str	r5, [sp, #12]
    38de:	e78f      	b.n	3800 <__aeabi_ddiv+0x4fc>
    38e0:	201f      	movs	r0, #31
    38e2:	4240      	negs	r0, r0
    38e4:	1ac3      	subs	r3, r0, r3
    38e6:	4658      	mov	r0, fp
    38e8:	40d8      	lsrs	r0, r3
    38ea:	0003      	movs	r3, r0
    38ec:	2a20      	cmp	r2, #32
    38ee:	d028      	beq.n	3942 <__aeabi_ddiv+0x63e>
    38f0:	2040      	movs	r0, #64	; 0x40
    38f2:	465d      	mov	r5, fp
    38f4:	1a82      	subs	r2, r0, r2
    38f6:	4095      	lsls	r5, r2
    38f8:	4329      	orrs	r1, r5
    38fa:	1e4a      	subs	r2, r1, #1
    38fc:	4191      	sbcs	r1, r2
    38fe:	4319      	orrs	r1, r3
    3900:	2307      	movs	r3, #7
    3902:	2200      	movs	r2, #0
    3904:	400b      	ands	r3, r1
    3906:	d009      	beq.n	391c <__aeabi_ddiv+0x618>
    3908:	230f      	movs	r3, #15
    390a:	2200      	movs	r2, #0
    390c:	400b      	ands	r3, r1
    390e:	0008      	movs	r0, r1
    3910:	2b04      	cmp	r3, #4
    3912:	d1bd      	bne.n	3890 <__aeabi_ddiv+0x58c>
    3914:	0001      	movs	r1, r0
    3916:	0753      	lsls	r3, r2, #29
    3918:	0252      	lsls	r2, r2, #9
    391a:	0b12      	lsrs	r2, r2, #12
    391c:	08c9      	lsrs	r1, r1, #3
    391e:	4319      	orrs	r1, r3
    3920:	2301      	movs	r3, #1
    3922:	4688      	mov	r8, r1
    3924:	9902      	ldr	r1, [sp, #8]
    3926:	2400      	movs	r4, #0
    3928:	4019      	ands	r1, r3
    392a:	468c      	mov	ip, r1
    392c:	e5b8      	b.n	34a0 <__aeabi_ddiv+0x19c>
    392e:	4552      	cmp	r2, sl
    3930:	d8be      	bhi.n	38b0 <__aeabi_ddiv+0x5ac>
    3932:	468b      	mov	fp, r1
    3934:	2500      	movs	r5, #0
    3936:	e660      	b.n	35fa <__aeabi_ddiv+0x2f6>
    3938:	9d03      	ldr	r5, [sp, #12]
    393a:	429d      	cmp	r5, r3
    393c:	d3c6      	bcc.n	38cc <__aeabi_ddiv+0x5c8>
    393e:	0011      	movs	r1, r2
    3940:	e762      	b.n	3808 <__aeabi_ddiv+0x504>
    3942:	2500      	movs	r5, #0
    3944:	e7d8      	b.n	38f8 <__aeabi_ddiv+0x5f4>
    3946:	2280      	movs	r2, #128	; 0x80
    3948:	465b      	mov	r3, fp
    394a:	0312      	lsls	r2, r2, #12
    394c:	431a      	orrs	r2, r3
    394e:	9b01      	ldr	r3, [sp, #4]
    3950:	0312      	lsls	r2, r2, #12
    3952:	0b12      	lsrs	r2, r2, #12
    3954:	469c      	mov	ip, r3
    3956:	4688      	mov	r8, r1
    3958:	4c03      	ldr	r4, [pc, #12]	; (3968 <__aeabi_ddiv+0x664>)
    395a:	e5a1      	b.n	34a0 <__aeabi_ddiv+0x19c>
    395c:	000003ff 	.word	0x000003ff
    3960:	feffffff 	.word	0xfeffffff
    3964:	000007fe 	.word	0x000007fe
    3968:	000007ff 	.word	0x000007ff

0000396c <__aeabi_dmul>:
    396c:	b5f0      	push	{r4, r5, r6, r7, lr}
    396e:	4657      	mov	r7, sl
    3970:	4645      	mov	r5, r8
    3972:	46de      	mov	lr, fp
    3974:	464e      	mov	r6, r9
    3976:	b5e0      	push	{r5, r6, r7, lr}
    3978:	030c      	lsls	r4, r1, #12
    397a:	4698      	mov	r8, r3
    397c:	004e      	lsls	r6, r1, #1
    397e:	0b23      	lsrs	r3, r4, #12
    3980:	b087      	sub	sp, #28
    3982:	0007      	movs	r7, r0
    3984:	4692      	mov	sl, r2
    3986:	469b      	mov	fp, r3
    3988:	0d76      	lsrs	r6, r6, #21
    398a:	0fcd      	lsrs	r5, r1, #31
    398c:	2e00      	cmp	r6, #0
    398e:	d06b      	beq.n	3a68 <__aeabi_dmul+0xfc>
    3990:	4b6d      	ldr	r3, [pc, #436]	; (3b48 <__aeabi_dmul+0x1dc>)
    3992:	429e      	cmp	r6, r3
    3994:	d035      	beq.n	3a02 <__aeabi_dmul+0x96>
    3996:	2480      	movs	r4, #128	; 0x80
    3998:	465b      	mov	r3, fp
    399a:	0f42      	lsrs	r2, r0, #29
    399c:	0424      	lsls	r4, r4, #16
    399e:	00db      	lsls	r3, r3, #3
    39a0:	4314      	orrs	r4, r2
    39a2:	431c      	orrs	r4, r3
    39a4:	00c3      	lsls	r3, r0, #3
    39a6:	4699      	mov	r9, r3
    39a8:	4b68      	ldr	r3, [pc, #416]	; (3b4c <__aeabi_dmul+0x1e0>)
    39aa:	46a3      	mov	fp, r4
    39ac:	469c      	mov	ip, r3
    39ae:	2300      	movs	r3, #0
    39b0:	2700      	movs	r7, #0
    39b2:	4466      	add	r6, ip
    39b4:	9302      	str	r3, [sp, #8]
    39b6:	4643      	mov	r3, r8
    39b8:	031c      	lsls	r4, r3, #12
    39ba:	005a      	lsls	r2, r3, #1
    39bc:	0fdb      	lsrs	r3, r3, #31
    39be:	4650      	mov	r0, sl
    39c0:	0b24      	lsrs	r4, r4, #12
    39c2:	0d52      	lsrs	r2, r2, #21
    39c4:	4698      	mov	r8, r3
    39c6:	d100      	bne.n	39ca <__aeabi_dmul+0x5e>
    39c8:	e076      	b.n	3ab8 <__aeabi_dmul+0x14c>
    39ca:	4b5f      	ldr	r3, [pc, #380]	; (3b48 <__aeabi_dmul+0x1dc>)
    39cc:	429a      	cmp	r2, r3
    39ce:	d06d      	beq.n	3aac <__aeabi_dmul+0x140>
    39d0:	2380      	movs	r3, #128	; 0x80
    39d2:	0f41      	lsrs	r1, r0, #29
    39d4:	041b      	lsls	r3, r3, #16
    39d6:	430b      	orrs	r3, r1
    39d8:	495c      	ldr	r1, [pc, #368]	; (3b4c <__aeabi_dmul+0x1e0>)
    39da:	00e4      	lsls	r4, r4, #3
    39dc:	468c      	mov	ip, r1
    39de:	431c      	orrs	r4, r3
    39e0:	00c3      	lsls	r3, r0, #3
    39e2:	2000      	movs	r0, #0
    39e4:	4462      	add	r2, ip
    39e6:	4641      	mov	r1, r8
    39e8:	18b6      	adds	r6, r6, r2
    39ea:	4069      	eors	r1, r5
    39ec:	1c72      	adds	r2, r6, #1
    39ee:	9101      	str	r1, [sp, #4]
    39f0:	4694      	mov	ip, r2
    39f2:	4307      	orrs	r7, r0
    39f4:	2f0f      	cmp	r7, #15
    39f6:	d900      	bls.n	39fa <__aeabi_dmul+0x8e>
    39f8:	e0b0      	b.n	3b5c <__aeabi_dmul+0x1f0>
    39fa:	4a55      	ldr	r2, [pc, #340]	; (3b50 <__aeabi_dmul+0x1e4>)
    39fc:	00bf      	lsls	r7, r7, #2
    39fe:	59d2      	ldr	r2, [r2, r7]
    3a00:	4697      	mov	pc, r2
    3a02:	465b      	mov	r3, fp
    3a04:	4303      	orrs	r3, r0
    3a06:	4699      	mov	r9, r3
    3a08:	d000      	beq.n	3a0c <__aeabi_dmul+0xa0>
    3a0a:	e087      	b.n	3b1c <__aeabi_dmul+0x1b0>
    3a0c:	2300      	movs	r3, #0
    3a0e:	469b      	mov	fp, r3
    3a10:	3302      	adds	r3, #2
    3a12:	2708      	movs	r7, #8
    3a14:	9302      	str	r3, [sp, #8]
    3a16:	e7ce      	b.n	39b6 <__aeabi_dmul+0x4a>
    3a18:	4642      	mov	r2, r8
    3a1a:	9201      	str	r2, [sp, #4]
    3a1c:	2802      	cmp	r0, #2
    3a1e:	d067      	beq.n	3af0 <__aeabi_dmul+0x184>
    3a20:	2803      	cmp	r0, #3
    3a22:	d100      	bne.n	3a26 <__aeabi_dmul+0xba>
    3a24:	e20e      	b.n	3e44 <__aeabi_dmul+0x4d8>
    3a26:	2801      	cmp	r0, #1
    3a28:	d000      	beq.n	3a2c <__aeabi_dmul+0xc0>
    3a2a:	e162      	b.n	3cf2 <__aeabi_dmul+0x386>
    3a2c:	2300      	movs	r3, #0
    3a2e:	2400      	movs	r4, #0
    3a30:	2200      	movs	r2, #0
    3a32:	4699      	mov	r9, r3
    3a34:	9901      	ldr	r1, [sp, #4]
    3a36:	4001      	ands	r1, r0
    3a38:	b2cd      	uxtb	r5, r1
    3a3a:	2100      	movs	r1, #0
    3a3c:	0312      	lsls	r2, r2, #12
    3a3e:	0d0b      	lsrs	r3, r1, #20
    3a40:	0b12      	lsrs	r2, r2, #12
    3a42:	051b      	lsls	r3, r3, #20
    3a44:	4313      	orrs	r3, r2
    3a46:	4a43      	ldr	r2, [pc, #268]	; (3b54 <__aeabi_dmul+0x1e8>)
    3a48:	0524      	lsls	r4, r4, #20
    3a4a:	4013      	ands	r3, r2
    3a4c:	431c      	orrs	r4, r3
    3a4e:	0064      	lsls	r4, r4, #1
    3a50:	07ed      	lsls	r5, r5, #31
    3a52:	0864      	lsrs	r4, r4, #1
    3a54:	432c      	orrs	r4, r5
    3a56:	4648      	mov	r0, r9
    3a58:	0021      	movs	r1, r4
    3a5a:	b007      	add	sp, #28
    3a5c:	bc3c      	pop	{r2, r3, r4, r5}
    3a5e:	4690      	mov	r8, r2
    3a60:	4699      	mov	r9, r3
    3a62:	46a2      	mov	sl, r4
    3a64:	46ab      	mov	fp, r5
    3a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a68:	4303      	orrs	r3, r0
    3a6a:	4699      	mov	r9, r3
    3a6c:	d04f      	beq.n	3b0e <__aeabi_dmul+0x1a2>
    3a6e:	465b      	mov	r3, fp
    3a70:	2b00      	cmp	r3, #0
    3a72:	d100      	bne.n	3a76 <__aeabi_dmul+0x10a>
    3a74:	e189      	b.n	3d8a <__aeabi_dmul+0x41e>
    3a76:	4658      	mov	r0, fp
    3a78:	f000 fd7a 	bl	4570 <__clzsi2>
    3a7c:	0003      	movs	r3, r0
    3a7e:	3b0b      	subs	r3, #11
    3a80:	2b1c      	cmp	r3, #28
    3a82:	dd00      	ble.n	3a86 <__aeabi_dmul+0x11a>
    3a84:	e17a      	b.n	3d7c <__aeabi_dmul+0x410>
    3a86:	221d      	movs	r2, #29
    3a88:	1ad3      	subs	r3, r2, r3
    3a8a:	003a      	movs	r2, r7
    3a8c:	0001      	movs	r1, r0
    3a8e:	465c      	mov	r4, fp
    3a90:	40da      	lsrs	r2, r3
    3a92:	3908      	subs	r1, #8
    3a94:	408c      	lsls	r4, r1
    3a96:	0013      	movs	r3, r2
    3a98:	408f      	lsls	r7, r1
    3a9a:	4323      	orrs	r3, r4
    3a9c:	469b      	mov	fp, r3
    3a9e:	46b9      	mov	r9, r7
    3aa0:	2300      	movs	r3, #0
    3aa2:	4e2d      	ldr	r6, [pc, #180]	; (3b58 <__aeabi_dmul+0x1ec>)
    3aa4:	2700      	movs	r7, #0
    3aa6:	1a36      	subs	r6, r6, r0
    3aa8:	9302      	str	r3, [sp, #8]
    3aaa:	e784      	b.n	39b6 <__aeabi_dmul+0x4a>
    3aac:	4653      	mov	r3, sl
    3aae:	4323      	orrs	r3, r4
    3ab0:	d12a      	bne.n	3b08 <__aeabi_dmul+0x19c>
    3ab2:	2400      	movs	r4, #0
    3ab4:	2002      	movs	r0, #2
    3ab6:	e796      	b.n	39e6 <__aeabi_dmul+0x7a>
    3ab8:	4653      	mov	r3, sl
    3aba:	4323      	orrs	r3, r4
    3abc:	d020      	beq.n	3b00 <__aeabi_dmul+0x194>
    3abe:	2c00      	cmp	r4, #0
    3ac0:	d100      	bne.n	3ac4 <__aeabi_dmul+0x158>
    3ac2:	e157      	b.n	3d74 <__aeabi_dmul+0x408>
    3ac4:	0020      	movs	r0, r4
    3ac6:	f000 fd53 	bl	4570 <__clzsi2>
    3aca:	0003      	movs	r3, r0
    3acc:	3b0b      	subs	r3, #11
    3ace:	2b1c      	cmp	r3, #28
    3ad0:	dd00      	ble.n	3ad4 <__aeabi_dmul+0x168>
    3ad2:	e149      	b.n	3d68 <__aeabi_dmul+0x3fc>
    3ad4:	211d      	movs	r1, #29
    3ad6:	1acb      	subs	r3, r1, r3
    3ad8:	4651      	mov	r1, sl
    3ada:	0002      	movs	r2, r0
    3adc:	40d9      	lsrs	r1, r3
    3ade:	4653      	mov	r3, sl
    3ae0:	3a08      	subs	r2, #8
    3ae2:	4094      	lsls	r4, r2
    3ae4:	4093      	lsls	r3, r2
    3ae6:	430c      	orrs	r4, r1
    3ae8:	4a1b      	ldr	r2, [pc, #108]	; (3b58 <__aeabi_dmul+0x1ec>)
    3aea:	1a12      	subs	r2, r2, r0
    3aec:	2000      	movs	r0, #0
    3aee:	e77a      	b.n	39e6 <__aeabi_dmul+0x7a>
    3af0:	2501      	movs	r5, #1
    3af2:	9b01      	ldr	r3, [sp, #4]
    3af4:	4c14      	ldr	r4, [pc, #80]	; (3b48 <__aeabi_dmul+0x1dc>)
    3af6:	401d      	ands	r5, r3
    3af8:	2300      	movs	r3, #0
    3afa:	2200      	movs	r2, #0
    3afc:	4699      	mov	r9, r3
    3afe:	e79c      	b.n	3a3a <__aeabi_dmul+0xce>
    3b00:	2400      	movs	r4, #0
    3b02:	2200      	movs	r2, #0
    3b04:	2001      	movs	r0, #1
    3b06:	e76e      	b.n	39e6 <__aeabi_dmul+0x7a>
    3b08:	4653      	mov	r3, sl
    3b0a:	2003      	movs	r0, #3
    3b0c:	e76b      	b.n	39e6 <__aeabi_dmul+0x7a>
    3b0e:	2300      	movs	r3, #0
    3b10:	469b      	mov	fp, r3
    3b12:	3301      	adds	r3, #1
    3b14:	2704      	movs	r7, #4
    3b16:	2600      	movs	r6, #0
    3b18:	9302      	str	r3, [sp, #8]
    3b1a:	e74c      	b.n	39b6 <__aeabi_dmul+0x4a>
    3b1c:	2303      	movs	r3, #3
    3b1e:	4681      	mov	r9, r0
    3b20:	270c      	movs	r7, #12
    3b22:	9302      	str	r3, [sp, #8]
    3b24:	e747      	b.n	39b6 <__aeabi_dmul+0x4a>
    3b26:	2280      	movs	r2, #128	; 0x80
    3b28:	2300      	movs	r3, #0
    3b2a:	2500      	movs	r5, #0
    3b2c:	0312      	lsls	r2, r2, #12
    3b2e:	4699      	mov	r9, r3
    3b30:	4c05      	ldr	r4, [pc, #20]	; (3b48 <__aeabi_dmul+0x1dc>)
    3b32:	e782      	b.n	3a3a <__aeabi_dmul+0xce>
    3b34:	465c      	mov	r4, fp
    3b36:	464b      	mov	r3, r9
    3b38:	9802      	ldr	r0, [sp, #8]
    3b3a:	e76f      	b.n	3a1c <__aeabi_dmul+0xb0>
    3b3c:	465c      	mov	r4, fp
    3b3e:	464b      	mov	r3, r9
    3b40:	9501      	str	r5, [sp, #4]
    3b42:	9802      	ldr	r0, [sp, #8]
    3b44:	e76a      	b.n	3a1c <__aeabi_dmul+0xb0>
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	000007ff 	.word	0x000007ff
    3b4c:	fffffc01 	.word	0xfffffc01
    3b50:	00006b30 	.word	0x00006b30
    3b54:	800fffff 	.word	0x800fffff
    3b58:	fffffc0d 	.word	0xfffffc0d
    3b5c:	464a      	mov	r2, r9
    3b5e:	4649      	mov	r1, r9
    3b60:	0c17      	lsrs	r7, r2, #16
    3b62:	0c1a      	lsrs	r2, r3, #16
    3b64:	041b      	lsls	r3, r3, #16
    3b66:	0c1b      	lsrs	r3, r3, #16
    3b68:	0408      	lsls	r0, r1, #16
    3b6a:	0019      	movs	r1, r3
    3b6c:	0c00      	lsrs	r0, r0, #16
    3b6e:	4341      	muls	r1, r0
    3b70:	0015      	movs	r5, r2
    3b72:	4688      	mov	r8, r1
    3b74:	0019      	movs	r1, r3
    3b76:	437d      	muls	r5, r7
    3b78:	4379      	muls	r1, r7
    3b7a:	9503      	str	r5, [sp, #12]
    3b7c:	4689      	mov	r9, r1
    3b7e:	0029      	movs	r1, r5
    3b80:	0015      	movs	r5, r2
    3b82:	4345      	muls	r5, r0
    3b84:	444d      	add	r5, r9
    3b86:	9502      	str	r5, [sp, #8]
    3b88:	4645      	mov	r5, r8
    3b8a:	0c2d      	lsrs	r5, r5, #16
    3b8c:	46aa      	mov	sl, r5
    3b8e:	9d02      	ldr	r5, [sp, #8]
    3b90:	4455      	add	r5, sl
    3b92:	45a9      	cmp	r9, r5
    3b94:	d906      	bls.n	3ba4 <__aeabi_dmul+0x238>
    3b96:	468a      	mov	sl, r1
    3b98:	2180      	movs	r1, #128	; 0x80
    3b9a:	0249      	lsls	r1, r1, #9
    3b9c:	4689      	mov	r9, r1
    3b9e:	44ca      	add	sl, r9
    3ba0:	4651      	mov	r1, sl
    3ba2:	9103      	str	r1, [sp, #12]
    3ba4:	0c29      	lsrs	r1, r5, #16
    3ba6:	9104      	str	r1, [sp, #16]
    3ba8:	4641      	mov	r1, r8
    3baa:	0409      	lsls	r1, r1, #16
    3bac:	042d      	lsls	r5, r5, #16
    3bae:	0c09      	lsrs	r1, r1, #16
    3bb0:	4688      	mov	r8, r1
    3bb2:	0029      	movs	r1, r5
    3bb4:	0c25      	lsrs	r5, r4, #16
    3bb6:	0424      	lsls	r4, r4, #16
    3bb8:	4441      	add	r1, r8
    3bba:	0c24      	lsrs	r4, r4, #16
    3bbc:	9105      	str	r1, [sp, #20]
    3bbe:	0021      	movs	r1, r4
    3bc0:	4341      	muls	r1, r0
    3bc2:	4688      	mov	r8, r1
    3bc4:	0021      	movs	r1, r4
    3bc6:	4379      	muls	r1, r7
    3bc8:	468a      	mov	sl, r1
    3bca:	4368      	muls	r0, r5
    3bcc:	4641      	mov	r1, r8
    3bce:	4450      	add	r0, sl
    3bd0:	4681      	mov	r9, r0
    3bd2:	0c08      	lsrs	r0, r1, #16
    3bd4:	4448      	add	r0, r9
    3bd6:	436f      	muls	r7, r5
    3bd8:	4582      	cmp	sl, r0
    3bda:	d903      	bls.n	3be4 <__aeabi_dmul+0x278>
    3bdc:	2180      	movs	r1, #128	; 0x80
    3bde:	0249      	lsls	r1, r1, #9
    3be0:	4689      	mov	r9, r1
    3be2:	444f      	add	r7, r9
    3be4:	0c01      	lsrs	r1, r0, #16
    3be6:	4689      	mov	r9, r1
    3be8:	0039      	movs	r1, r7
    3bea:	4449      	add	r1, r9
    3bec:	9102      	str	r1, [sp, #8]
    3bee:	4641      	mov	r1, r8
    3bf0:	040f      	lsls	r7, r1, #16
    3bf2:	9904      	ldr	r1, [sp, #16]
    3bf4:	0c3f      	lsrs	r7, r7, #16
    3bf6:	4688      	mov	r8, r1
    3bf8:	0400      	lsls	r0, r0, #16
    3bfa:	19c0      	adds	r0, r0, r7
    3bfc:	4480      	add	r8, r0
    3bfe:	4641      	mov	r1, r8
    3c00:	9104      	str	r1, [sp, #16]
    3c02:	4659      	mov	r1, fp
    3c04:	0c0f      	lsrs	r7, r1, #16
    3c06:	0409      	lsls	r1, r1, #16
    3c08:	0c09      	lsrs	r1, r1, #16
    3c0a:	4688      	mov	r8, r1
    3c0c:	4359      	muls	r1, r3
    3c0e:	468a      	mov	sl, r1
    3c10:	0039      	movs	r1, r7
    3c12:	4351      	muls	r1, r2
    3c14:	4689      	mov	r9, r1
    3c16:	4641      	mov	r1, r8
    3c18:	434a      	muls	r2, r1
    3c1a:	4651      	mov	r1, sl
    3c1c:	0c09      	lsrs	r1, r1, #16
    3c1e:	468b      	mov	fp, r1
    3c20:	437b      	muls	r3, r7
    3c22:	18d2      	adds	r2, r2, r3
    3c24:	445a      	add	r2, fp
    3c26:	4293      	cmp	r3, r2
    3c28:	d903      	bls.n	3c32 <__aeabi_dmul+0x2c6>
    3c2a:	2380      	movs	r3, #128	; 0x80
    3c2c:	025b      	lsls	r3, r3, #9
    3c2e:	469b      	mov	fp, r3
    3c30:	44d9      	add	r9, fp
    3c32:	4651      	mov	r1, sl
    3c34:	0409      	lsls	r1, r1, #16
    3c36:	0c09      	lsrs	r1, r1, #16
    3c38:	468a      	mov	sl, r1
    3c3a:	4641      	mov	r1, r8
    3c3c:	4361      	muls	r1, r4
    3c3e:	437c      	muls	r4, r7
    3c40:	0c13      	lsrs	r3, r2, #16
    3c42:	0412      	lsls	r2, r2, #16
    3c44:	444b      	add	r3, r9
    3c46:	4452      	add	r2, sl
    3c48:	46a1      	mov	r9, r4
    3c4a:	468a      	mov	sl, r1
    3c4c:	003c      	movs	r4, r7
    3c4e:	4641      	mov	r1, r8
    3c50:	436c      	muls	r4, r5
    3c52:	434d      	muls	r5, r1
    3c54:	4651      	mov	r1, sl
    3c56:	444d      	add	r5, r9
    3c58:	0c0f      	lsrs	r7, r1, #16
    3c5a:	197d      	adds	r5, r7, r5
    3c5c:	45a9      	cmp	r9, r5
    3c5e:	d903      	bls.n	3c68 <__aeabi_dmul+0x2fc>
    3c60:	2180      	movs	r1, #128	; 0x80
    3c62:	0249      	lsls	r1, r1, #9
    3c64:	4688      	mov	r8, r1
    3c66:	4444      	add	r4, r8
    3c68:	9f04      	ldr	r7, [sp, #16]
    3c6a:	9903      	ldr	r1, [sp, #12]
    3c6c:	46b8      	mov	r8, r7
    3c6e:	4441      	add	r1, r8
    3c70:	468b      	mov	fp, r1
    3c72:	4583      	cmp	fp, r0
    3c74:	4180      	sbcs	r0, r0
    3c76:	4241      	negs	r1, r0
    3c78:	4688      	mov	r8, r1
    3c7a:	4651      	mov	r1, sl
    3c7c:	0408      	lsls	r0, r1, #16
    3c7e:	042f      	lsls	r7, r5, #16
    3c80:	0c00      	lsrs	r0, r0, #16
    3c82:	183f      	adds	r7, r7, r0
    3c84:	4658      	mov	r0, fp
    3c86:	9902      	ldr	r1, [sp, #8]
    3c88:	1810      	adds	r0, r2, r0
    3c8a:	4689      	mov	r9, r1
    3c8c:	4290      	cmp	r0, r2
    3c8e:	4192      	sbcs	r2, r2
    3c90:	444f      	add	r7, r9
    3c92:	46ba      	mov	sl, r7
    3c94:	4252      	negs	r2, r2
    3c96:	4699      	mov	r9, r3
    3c98:	4693      	mov	fp, r2
    3c9a:	44c2      	add	sl, r8
    3c9c:	44d1      	add	r9, sl
    3c9e:	44cb      	add	fp, r9
    3ca0:	428f      	cmp	r7, r1
    3ca2:	41bf      	sbcs	r7, r7
    3ca4:	45c2      	cmp	sl, r8
    3ca6:	4189      	sbcs	r1, r1
    3ca8:	4599      	cmp	r9, r3
    3caa:	419b      	sbcs	r3, r3
    3cac:	4593      	cmp	fp, r2
    3cae:	4192      	sbcs	r2, r2
    3cb0:	427f      	negs	r7, r7
    3cb2:	4249      	negs	r1, r1
    3cb4:	0c2d      	lsrs	r5, r5, #16
    3cb6:	4252      	negs	r2, r2
    3cb8:	430f      	orrs	r7, r1
    3cba:	425b      	negs	r3, r3
    3cbc:	4313      	orrs	r3, r2
    3cbe:	197f      	adds	r7, r7, r5
    3cc0:	18ff      	adds	r7, r7, r3
    3cc2:	465b      	mov	r3, fp
    3cc4:	193c      	adds	r4, r7, r4
    3cc6:	0ddb      	lsrs	r3, r3, #23
    3cc8:	9a05      	ldr	r2, [sp, #20]
    3cca:	0264      	lsls	r4, r4, #9
    3ccc:	431c      	orrs	r4, r3
    3cce:	0243      	lsls	r3, r0, #9
    3cd0:	4313      	orrs	r3, r2
    3cd2:	1e5d      	subs	r5, r3, #1
    3cd4:	41ab      	sbcs	r3, r5
    3cd6:	465a      	mov	r2, fp
    3cd8:	0dc0      	lsrs	r0, r0, #23
    3cda:	4303      	orrs	r3, r0
    3cdc:	0252      	lsls	r2, r2, #9
    3cde:	4313      	orrs	r3, r2
    3ce0:	01e2      	lsls	r2, r4, #7
    3ce2:	d556      	bpl.n	3d92 <__aeabi_dmul+0x426>
    3ce4:	2001      	movs	r0, #1
    3ce6:	085a      	lsrs	r2, r3, #1
    3ce8:	4003      	ands	r3, r0
    3cea:	4313      	orrs	r3, r2
    3cec:	07e2      	lsls	r2, r4, #31
    3cee:	4313      	orrs	r3, r2
    3cf0:	0864      	lsrs	r4, r4, #1
    3cf2:	485a      	ldr	r0, [pc, #360]	; (3e5c <__aeabi_dmul+0x4f0>)
    3cf4:	4460      	add	r0, ip
    3cf6:	2800      	cmp	r0, #0
    3cf8:	dd4d      	ble.n	3d96 <__aeabi_dmul+0x42a>
    3cfa:	075a      	lsls	r2, r3, #29
    3cfc:	d009      	beq.n	3d12 <__aeabi_dmul+0x3a6>
    3cfe:	220f      	movs	r2, #15
    3d00:	401a      	ands	r2, r3
    3d02:	2a04      	cmp	r2, #4
    3d04:	d005      	beq.n	3d12 <__aeabi_dmul+0x3a6>
    3d06:	1d1a      	adds	r2, r3, #4
    3d08:	429a      	cmp	r2, r3
    3d0a:	419b      	sbcs	r3, r3
    3d0c:	425b      	negs	r3, r3
    3d0e:	18e4      	adds	r4, r4, r3
    3d10:	0013      	movs	r3, r2
    3d12:	01e2      	lsls	r2, r4, #7
    3d14:	d504      	bpl.n	3d20 <__aeabi_dmul+0x3b4>
    3d16:	2080      	movs	r0, #128	; 0x80
    3d18:	4a51      	ldr	r2, [pc, #324]	; (3e60 <__aeabi_dmul+0x4f4>)
    3d1a:	00c0      	lsls	r0, r0, #3
    3d1c:	4014      	ands	r4, r2
    3d1e:	4460      	add	r0, ip
    3d20:	4a50      	ldr	r2, [pc, #320]	; (3e64 <__aeabi_dmul+0x4f8>)
    3d22:	4290      	cmp	r0, r2
    3d24:	dd00      	ble.n	3d28 <__aeabi_dmul+0x3bc>
    3d26:	e6e3      	b.n	3af0 <__aeabi_dmul+0x184>
    3d28:	2501      	movs	r5, #1
    3d2a:	08db      	lsrs	r3, r3, #3
    3d2c:	0762      	lsls	r2, r4, #29
    3d2e:	431a      	orrs	r2, r3
    3d30:	0264      	lsls	r4, r4, #9
    3d32:	9b01      	ldr	r3, [sp, #4]
    3d34:	4691      	mov	r9, r2
    3d36:	0b22      	lsrs	r2, r4, #12
    3d38:	0544      	lsls	r4, r0, #21
    3d3a:	0d64      	lsrs	r4, r4, #21
    3d3c:	401d      	ands	r5, r3
    3d3e:	e67c      	b.n	3a3a <__aeabi_dmul+0xce>
    3d40:	2280      	movs	r2, #128	; 0x80
    3d42:	4659      	mov	r1, fp
    3d44:	0312      	lsls	r2, r2, #12
    3d46:	4211      	tst	r1, r2
    3d48:	d008      	beq.n	3d5c <__aeabi_dmul+0x3f0>
    3d4a:	4214      	tst	r4, r2
    3d4c:	d106      	bne.n	3d5c <__aeabi_dmul+0x3f0>
    3d4e:	4322      	orrs	r2, r4
    3d50:	0312      	lsls	r2, r2, #12
    3d52:	0b12      	lsrs	r2, r2, #12
    3d54:	4645      	mov	r5, r8
    3d56:	4699      	mov	r9, r3
    3d58:	4c43      	ldr	r4, [pc, #268]	; (3e68 <__aeabi_dmul+0x4fc>)
    3d5a:	e66e      	b.n	3a3a <__aeabi_dmul+0xce>
    3d5c:	465b      	mov	r3, fp
    3d5e:	431a      	orrs	r2, r3
    3d60:	0312      	lsls	r2, r2, #12
    3d62:	0b12      	lsrs	r2, r2, #12
    3d64:	4c40      	ldr	r4, [pc, #256]	; (3e68 <__aeabi_dmul+0x4fc>)
    3d66:	e668      	b.n	3a3a <__aeabi_dmul+0xce>
    3d68:	0003      	movs	r3, r0
    3d6a:	4654      	mov	r4, sl
    3d6c:	3b28      	subs	r3, #40	; 0x28
    3d6e:	409c      	lsls	r4, r3
    3d70:	2300      	movs	r3, #0
    3d72:	e6b9      	b.n	3ae8 <__aeabi_dmul+0x17c>
    3d74:	f000 fbfc 	bl	4570 <__clzsi2>
    3d78:	3020      	adds	r0, #32
    3d7a:	e6a6      	b.n	3aca <__aeabi_dmul+0x15e>
    3d7c:	0003      	movs	r3, r0
    3d7e:	3b28      	subs	r3, #40	; 0x28
    3d80:	409f      	lsls	r7, r3
    3d82:	2300      	movs	r3, #0
    3d84:	46bb      	mov	fp, r7
    3d86:	4699      	mov	r9, r3
    3d88:	e68a      	b.n	3aa0 <__aeabi_dmul+0x134>
    3d8a:	f000 fbf1 	bl	4570 <__clzsi2>
    3d8e:	3020      	adds	r0, #32
    3d90:	e674      	b.n	3a7c <__aeabi_dmul+0x110>
    3d92:	46b4      	mov	ip, r6
    3d94:	e7ad      	b.n	3cf2 <__aeabi_dmul+0x386>
    3d96:	2501      	movs	r5, #1
    3d98:	1a2a      	subs	r2, r5, r0
    3d9a:	2a38      	cmp	r2, #56	; 0x38
    3d9c:	dd06      	ble.n	3dac <__aeabi_dmul+0x440>
    3d9e:	9b01      	ldr	r3, [sp, #4]
    3da0:	2400      	movs	r4, #0
    3da2:	401d      	ands	r5, r3
    3da4:	2300      	movs	r3, #0
    3da6:	2200      	movs	r2, #0
    3da8:	4699      	mov	r9, r3
    3daa:	e646      	b.n	3a3a <__aeabi_dmul+0xce>
    3dac:	2a1f      	cmp	r2, #31
    3dae:	dc21      	bgt.n	3df4 <__aeabi_dmul+0x488>
    3db0:	2520      	movs	r5, #32
    3db2:	0020      	movs	r0, r4
    3db4:	1aad      	subs	r5, r5, r2
    3db6:	001e      	movs	r6, r3
    3db8:	40ab      	lsls	r3, r5
    3dba:	40a8      	lsls	r0, r5
    3dbc:	40d6      	lsrs	r6, r2
    3dbe:	1e5d      	subs	r5, r3, #1
    3dc0:	41ab      	sbcs	r3, r5
    3dc2:	4330      	orrs	r0, r6
    3dc4:	4318      	orrs	r0, r3
    3dc6:	40d4      	lsrs	r4, r2
    3dc8:	0743      	lsls	r3, r0, #29
    3dca:	d009      	beq.n	3de0 <__aeabi_dmul+0x474>
    3dcc:	230f      	movs	r3, #15
    3dce:	4003      	ands	r3, r0
    3dd0:	2b04      	cmp	r3, #4
    3dd2:	d005      	beq.n	3de0 <__aeabi_dmul+0x474>
    3dd4:	0003      	movs	r3, r0
    3dd6:	1d18      	adds	r0, r3, #4
    3dd8:	4298      	cmp	r0, r3
    3dda:	419b      	sbcs	r3, r3
    3ddc:	425b      	negs	r3, r3
    3dde:	18e4      	adds	r4, r4, r3
    3de0:	0223      	lsls	r3, r4, #8
    3de2:	d521      	bpl.n	3e28 <__aeabi_dmul+0x4bc>
    3de4:	2501      	movs	r5, #1
    3de6:	9b01      	ldr	r3, [sp, #4]
    3de8:	2401      	movs	r4, #1
    3dea:	401d      	ands	r5, r3
    3dec:	2300      	movs	r3, #0
    3dee:	2200      	movs	r2, #0
    3df0:	4699      	mov	r9, r3
    3df2:	e622      	b.n	3a3a <__aeabi_dmul+0xce>
    3df4:	251f      	movs	r5, #31
    3df6:	0021      	movs	r1, r4
    3df8:	426d      	negs	r5, r5
    3dfa:	1a28      	subs	r0, r5, r0
    3dfc:	40c1      	lsrs	r1, r0
    3dfe:	0008      	movs	r0, r1
    3e00:	2a20      	cmp	r2, #32
    3e02:	d01d      	beq.n	3e40 <__aeabi_dmul+0x4d4>
    3e04:	355f      	adds	r5, #95	; 0x5f
    3e06:	1aaa      	subs	r2, r5, r2
    3e08:	4094      	lsls	r4, r2
    3e0a:	4323      	orrs	r3, r4
    3e0c:	1e5c      	subs	r4, r3, #1
    3e0e:	41a3      	sbcs	r3, r4
    3e10:	2507      	movs	r5, #7
    3e12:	4303      	orrs	r3, r0
    3e14:	401d      	ands	r5, r3
    3e16:	2200      	movs	r2, #0
    3e18:	2d00      	cmp	r5, #0
    3e1a:	d009      	beq.n	3e30 <__aeabi_dmul+0x4c4>
    3e1c:	220f      	movs	r2, #15
    3e1e:	2400      	movs	r4, #0
    3e20:	401a      	ands	r2, r3
    3e22:	0018      	movs	r0, r3
    3e24:	2a04      	cmp	r2, #4
    3e26:	d1d6      	bne.n	3dd6 <__aeabi_dmul+0x46a>
    3e28:	0003      	movs	r3, r0
    3e2a:	0765      	lsls	r5, r4, #29
    3e2c:	0264      	lsls	r4, r4, #9
    3e2e:	0b22      	lsrs	r2, r4, #12
    3e30:	08db      	lsrs	r3, r3, #3
    3e32:	432b      	orrs	r3, r5
    3e34:	2501      	movs	r5, #1
    3e36:	4699      	mov	r9, r3
    3e38:	9b01      	ldr	r3, [sp, #4]
    3e3a:	2400      	movs	r4, #0
    3e3c:	401d      	ands	r5, r3
    3e3e:	e5fc      	b.n	3a3a <__aeabi_dmul+0xce>
    3e40:	2400      	movs	r4, #0
    3e42:	e7e2      	b.n	3e0a <__aeabi_dmul+0x49e>
    3e44:	2280      	movs	r2, #128	; 0x80
    3e46:	2501      	movs	r5, #1
    3e48:	0312      	lsls	r2, r2, #12
    3e4a:	4322      	orrs	r2, r4
    3e4c:	9901      	ldr	r1, [sp, #4]
    3e4e:	0312      	lsls	r2, r2, #12
    3e50:	0b12      	lsrs	r2, r2, #12
    3e52:	400d      	ands	r5, r1
    3e54:	4699      	mov	r9, r3
    3e56:	4c04      	ldr	r4, [pc, #16]	; (3e68 <__aeabi_dmul+0x4fc>)
    3e58:	e5ef      	b.n	3a3a <__aeabi_dmul+0xce>
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	000003ff 	.word	0x000003ff
    3e60:	feffffff 	.word	0xfeffffff
    3e64:	000007fe 	.word	0x000007fe
    3e68:	000007ff 	.word	0x000007ff

00003e6c <__aeabi_dsub>:
    3e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e6e:	4646      	mov	r6, r8
    3e70:	46d6      	mov	lr, sl
    3e72:	464f      	mov	r7, r9
    3e74:	030c      	lsls	r4, r1, #12
    3e76:	b5c0      	push	{r6, r7, lr}
    3e78:	0fcd      	lsrs	r5, r1, #31
    3e7a:	004e      	lsls	r6, r1, #1
    3e7c:	0a61      	lsrs	r1, r4, #9
    3e7e:	0f44      	lsrs	r4, r0, #29
    3e80:	430c      	orrs	r4, r1
    3e82:	00c1      	lsls	r1, r0, #3
    3e84:	0058      	lsls	r0, r3, #1
    3e86:	0d40      	lsrs	r0, r0, #21
    3e88:	4684      	mov	ip, r0
    3e8a:	468a      	mov	sl, r1
    3e8c:	000f      	movs	r7, r1
    3e8e:	0319      	lsls	r1, r3, #12
    3e90:	0f50      	lsrs	r0, r2, #29
    3e92:	0a49      	lsrs	r1, r1, #9
    3e94:	4301      	orrs	r1, r0
    3e96:	48c6      	ldr	r0, [pc, #792]	; (41b0 <__aeabi_dsub+0x344>)
    3e98:	0d76      	lsrs	r6, r6, #21
    3e9a:	46a8      	mov	r8, r5
    3e9c:	0fdb      	lsrs	r3, r3, #31
    3e9e:	00d2      	lsls	r2, r2, #3
    3ea0:	4584      	cmp	ip, r0
    3ea2:	d100      	bne.n	3ea6 <__aeabi_dsub+0x3a>
    3ea4:	e0d8      	b.n	4058 <__aeabi_dsub+0x1ec>
    3ea6:	2001      	movs	r0, #1
    3ea8:	4043      	eors	r3, r0
    3eaa:	42ab      	cmp	r3, r5
    3eac:	d100      	bne.n	3eb0 <__aeabi_dsub+0x44>
    3eae:	e0a6      	b.n	3ffe <__aeabi_dsub+0x192>
    3eb0:	4660      	mov	r0, ip
    3eb2:	1a35      	subs	r5, r6, r0
    3eb4:	2d00      	cmp	r5, #0
    3eb6:	dc00      	bgt.n	3eba <__aeabi_dsub+0x4e>
    3eb8:	e105      	b.n	40c6 <__aeabi_dsub+0x25a>
    3eba:	2800      	cmp	r0, #0
    3ebc:	d110      	bne.n	3ee0 <__aeabi_dsub+0x74>
    3ebe:	000b      	movs	r3, r1
    3ec0:	4313      	orrs	r3, r2
    3ec2:	d100      	bne.n	3ec6 <__aeabi_dsub+0x5a>
    3ec4:	e0d7      	b.n	4076 <__aeabi_dsub+0x20a>
    3ec6:	1e6b      	subs	r3, r5, #1
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d000      	beq.n	3ece <__aeabi_dsub+0x62>
    3ecc:	e14b      	b.n	4166 <__aeabi_dsub+0x2fa>
    3ece:	4653      	mov	r3, sl
    3ed0:	1a9f      	subs	r7, r3, r2
    3ed2:	45ba      	cmp	sl, r7
    3ed4:	4180      	sbcs	r0, r0
    3ed6:	1a64      	subs	r4, r4, r1
    3ed8:	4240      	negs	r0, r0
    3eda:	1a24      	subs	r4, r4, r0
    3edc:	2601      	movs	r6, #1
    3ede:	e01e      	b.n	3f1e <__aeabi_dsub+0xb2>
    3ee0:	4bb3      	ldr	r3, [pc, #716]	; (41b0 <__aeabi_dsub+0x344>)
    3ee2:	429e      	cmp	r6, r3
    3ee4:	d048      	beq.n	3f78 <__aeabi_dsub+0x10c>
    3ee6:	2380      	movs	r3, #128	; 0x80
    3ee8:	041b      	lsls	r3, r3, #16
    3eea:	4319      	orrs	r1, r3
    3eec:	2d38      	cmp	r5, #56	; 0x38
    3eee:	dd00      	ble.n	3ef2 <__aeabi_dsub+0x86>
    3ef0:	e119      	b.n	4126 <__aeabi_dsub+0x2ba>
    3ef2:	2d1f      	cmp	r5, #31
    3ef4:	dd00      	ble.n	3ef8 <__aeabi_dsub+0x8c>
    3ef6:	e14c      	b.n	4192 <__aeabi_dsub+0x326>
    3ef8:	2320      	movs	r3, #32
    3efa:	000f      	movs	r7, r1
    3efc:	1b5b      	subs	r3, r3, r5
    3efe:	0010      	movs	r0, r2
    3f00:	409a      	lsls	r2, r3
    3f02:	409f      	lsls	r7, r3
    3f04:	40e8      	lsrs	r0, r5
    3f06:	1e53      	subs	r3, r2, #1
    3f08:	419a      	sbcs	r2, r3
    3f0a:	40e9      	lsrs	r1, r5
    3f0c:	4307      	orrs	r7, r0
    3f0e:	4317      	orrs	r7, r2
    3f10:	4653      	mov	r3, sl
    3f12:	1bdf      	subs	r7, r3, r7
    3f14:	1a61      	subs	r1, r4, r1
    3f16:	45ba      	cmp	sl, r7
    3f18:	41a4      	sbcs	r4, r4
    3f1a:	4264      	negs	r4, r4
    3f1c:	1b0c      	subs	r4, r1, r4
    3f1e:	0223      	lsls	r3, r4, #8
    3f20:	d400      	bmi.n	3f24 <__aeabi_dsub+0xb8>
    3f22:	e0c5      	b.n	40b0 <__aeabi_dsub+0x244>
    3f24:	0264      	lsls	r4, r4, #9
    3f26:	0a65      	lsrs	r5, r4, #9
    3f28:	2d00      	cmp	r5, #0
    3f2a:	d100      	bne.n	3f2e <__aeabi_dsub+0xc2>
    3f2c:	e0f6      	b.n	411c <__aeabi_dsub+0x2b0>
    3f2e:	0028      	movs	r0, r5
    3f30:	f000 fb1e 	bl	4570 <__clzsi2>
    3f34:	0003      	movs	r3, r0
    3f36:	3b08      	subs	r3, #8
    3f38:	2b1f      	cmp	r3, #31
    3f3a:	dd00      	ble.n	3f3e <__aeabi_dsub+0xd2>
    3f3c:	e0e9      	b.n	4112 <__aeabi_dsub+0x2a6>
    3f3e:	2220      	movs	r2, #32
    3f40:	003c      	movs	r4, r7
    3f42:	1ad2      	subs	r2, r2, r3
    3f44:	409d      	lsls	r5, r3
    3f46:	40d4      	lsrs	r4, r2
    3f48:	409f      	lsls	r7, r3
    3f4a:	4325      	orrs	r5, r4
    3f4c:	429e      	cmp	r6, r3
    3f4e:	dd00      	ble.n	3f52 <__aeabi_dsub+0xe6>
    3f50:	e0db      	b.n	410a <__aeabi_dsub+0x29e>
    3f52:	1b9e      	subs	r6, r3, r6
    3f54:	1c73      	adds	r3, r6, #1
    3f56:	2b1f      	cmp	r3, #31
    3f58:	dd00      	ble.n	3f5c <__aeabi_dsub+0xf0>
    3f5a:	e10a      	b.n	4172 <__aeabi_dsub+0x306>
    3f5c:	2220      	movs	r2, #32
    3f5e:	0038      	movs	r0, r7
    3f60:	1ad2      	subs	r2, r2, r3
    3f62:	0029      	movs	r1, r5
    3f64:	4097      	lsls	r7, r2
    3f66:	002c      	movs	r4, r5
    3f68:	4091      	lsls	r1, r2
    3f6a:	40d8      	lsrs	r0, r3
    3f6c:	1e7a      	subs	r2, r7, #1
    3f6e:	4197      	sbcs	r7, r2
    3f70:	40dc      	lsrs	r4, r3
    3f72:	2600      	movs	r6, #0
    3f74:	4301      	orrs	r1, r0
    3f76:	430f      	orrs	r7, r1
    3f78:	077b      	lsls	r3, r7, #29
    3f7a:	d009      	beq.n	3f90 <__aeabi_dsub+0x124>
    3f7c:	230f      	movs	r3, #15
    3f7e:	403b      	ands	r3, r7
    3f80:	2b04      	cmp	r3, #4
    3f82:	d005      	beq.n	3f90 <__aeabi_dsub+0x124>
    3f84:	1d3b      	adds	r3, r7, #4
    3f86:	42bb      	cmp	r3, r7
    3f88:	41bf      	sbcs	r7, r7
    3f8a:	427f      	negs	r7, r7
    3f8c:	19e4      	adds	r4, r4, r7
    3f8e:	001f      	movs	r7, r3
    3f90:	0223      	lsls	r3, r4, #8
    3f92:	d525      	bpl.n	3fe0 <__aeabi_dsub+0x174>
    3f94:	4b86      	ldr	r3, [pc, #536]	; (41b0 <__aeabi_dsub+0x344>)
    3f96:	3601      	adds	r6, #1
    3f98:	429e      	cmp	r6, r3
    3f9a:	d100      	bne.n	3f9e <__aeabi_dsub+0x132>
    3f9c:	e0af      	b.n	40fe <__aeabi_dsub+0x292>
    3f9e:	4b85      	ldr	r3, [pc, #532]	; (41b4 <__aeabi_dsub+0x348>)
    3fa0:	2501      	movs	r5, #1
    3fa2:	401c      	ands	r4, r3
    3fa4:	4643      	mov	r3, r8
    3fa6:	0762      	lsls	r2, r4, #29
    3fa8:	08ff      	lsrs	r7, r7, #3
    3faa:	0264      	lsls	r4, r4, #9
    3fac:	0576      	lsls	r6, r6, #21
    3fae:	4317      	orrs	r7, r2
    3fb0:	0b24      	lsrs	r4, r4, #12
    3fb2:	0d76      	lsrs	r6, r6, #21
    3fb4:	401d      	ands	r5, r3
    3fb6:	2100      	movs	r1, #0
    3fb8:	0324      	lsls	r4, r4, #12
    3fba:	0b23      	lsrs	r3, r4, #12
    3fbc:	0d0c      	lsrs	r4, r1, #20
    3fbe:	4a7e      	ldr	r2, [pc, #504]	; (41b8 <__aeabi_dsub+0x34c>)
    3fc0:	0524      	lsls	r4, r4, #20
    3fc2:	431c      	orrs	r4, r3
    3fc4:	4014      	ands	r4, r2
    3fc6:	0533      	lsls	r3, r6, #20
    3fc8:	4323      	orrs	r3, r4
    3fca:	005b      	lsls	r3, r3, #1
    3fcc:	07ed      	lsls	r5, r5, #31
    3fce:	085b      	lsrs	r3, r3, #1
    3fd0:	432b      	orrs	r3, r5
    3fd2:	0038      	movs	r0, r7
    3fd4:	0019      	movs	r1, r3
    3fd6:	bc1c      	pop	{r2, r3, r4}
    3fd8:	4690      	mov	r8, r2
    3fda:	4699      	mov	r9, r3
    3fdc:	46a2      	mov	sl, r4
    3fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fe0:	2501      	movs	r5, #1
    3fe2:	4643      	mov	r3, r8
    3fe4:	0762      	lsls	r2, r4, #29
    3fe6:	08ff      	lsrs	r7, r7, #3
    3fe8:	4317      	orrs	r7, r2
    3fea:	08e4      	lsrs	r4, r4, #3
    3fec:	401d      	ands	r5, r3
    3fee:	4b70      	ldr	r3, [pc, #448]	; (41b0 <__aeabi_dsub+0x344>)
    3ff0:	429e      	cmp	r6, r3
    3ff2:	d036      	beq.n	4062 <__aeabi_dsub+0x1f6>
    3ff4:	0324      	lsls	r4, r4, #12
    3ff6:	0576      	lsls	r6, r6, #21
    3ff8:	0b24      	lsrs	r4, r4, #12
    3ffa:	0d76      	lsrs	r6, r6, #21
    3ffc:	e7db      	b.n	3fb6 <__aeabi_dsub+0x14a>
    3ffe:	4663      	mov	r3, ip
    4000:	1af3      	subs	r3, r6, r3
    4002:	2b00      	cmp	r3, #0
    4004:	dc00      	bgt.n	4008 <__aeabi_dsub+0x19c>
    4006:	e094      	b.n	4132 <__aeabi_dsub+0x2c6>
    4008:	4660      	mov	r0, ip
    400a:	2800      	cmp	r0, #0
    400c:	d035      	beq.n	407a <__aeabi_dsub+0x20e>
    400e:	4868      	ldr	r0, [pc, #416]	; (41b0 <__aeabi_dsub+0x344>)
    4010:	4286      	cmp	r6, r0
    4012:	d0b1      	beq.n	3f78 <__aeabi_dsub+0x10c>
    4014:	2780      	movs	r7, #128	; 0x80
    4016:	043f      	lsls	r7, r7, #16
    4018:	4339      	orrs	r1, r7
    401a:	2b38      	cmp	r3, #56	; 0x38
    401c:	dc00      	bgt.n	4020 <__aeabi_dsub+0x1b4>
    401e:	e0fd      	b.n	421c <__aeabi_dsub+0x3b0>
    4020:	430a      	orrs	r2, r1
    4022:	0017      	movs	r7, r2
    4024:	2100      	movs	r1, #0
    4026:	1e7a      	subs	r2, r7, #1
    4028:	4197      	sbcs	r7, r2
    402a:	4457      	add	r7, sl
    402c:	4557      	cmp	r7, sl
    402e:	4180      	sbcs	r0, r0
    4030:	1909      	adds	r1, r1, r4
    4032:	4244      	negs	r4, r0
    4034:	190c      	adds	r4, r1, r4
    4036:	0223      	lsls	r3, r4, #8
    4038:	d53a      	bpl.n	40b0 <__aeabi_dsub+0x244>
    403a:	4b5d      	ldr	r3, [pc, #372]	; (41b0 <__aeabi_dsub+0x344>)
    403c:	3601      	adds	r6, #1
    403e:	429e      	cmp	r6, r3
    4040:	d100      	bne.n	4044 <__aeabi_dsub+0x1d8>
    4042:	e14b      	b.n	42dc <__aeabi_dsub+0x470>
    4044:	2201      	movs	r2, #1
    4046:	4b5b      	ldr	r3, [pc, #364]	; (41b4 <__aeabi_dsub+0x348>)
    4048:	401c      	ands	r4, r3
    404a:	087b      	lsrs	r3, r7, #1
    404c:	4017      	ands	r7, r2
    404e:	431f      	orrs	r7, r3
    4050:	07e2      	lsls	r2, r4, #31
    4052:	4317      	orrs	r7, r2
    4054:	0864      	lsrs	r4, r4, #1
    4056:	e78f      	b.n	3f78 <__aeabi_dsub+0x10c>
    4058:	0008      	movs	r0, r1
    405a:	4310      	orrs	r0, r2
    405c:	d000      	beq.n	4060 <__aeabi_dsub+0x1f4>
    405e:	e724      	b.n	3eaa <__aeabi_dsub+0x3e>
    4060:	e721      	b.n	3ea6 <__aeabi_dsub+0x3a>
    4062:	0023      	movs	r3, r4
    4064:	433b      	orrs	r3, r7
    4066:	d100      	bne.n	406a <__aeabi_dsub+0x1fe>
    4068:	e1b9      	b.n	43de <__aeabi_dsub+0x572>
    406a:	2280      	movs	r2, #128	; 0x80
    406c:	0312      	lsls	r2, r2, #12
    406e:	4314      	orrs	r4, r2
    4070:	0324      	lsls	r4, r4, #12
    4072:	0b24      	lsrs	r4, r4, #12
    4074:	e79f      	b.n	3fb6 <__aeabi_dsub+0x14a>
    4076:	002e      	movs	r6, r5
    4078:	e77e      	b.n	3f78 <__aeabi_dsub+0x10c>
    407a:	0008      	movs	r0, r1
    407c:	4310      	orrs	r0, r2
    407e:	d100      	bne.n	4082 <__aeabi_dsub+0x216>
    4080:	e0ca      	b.n	4218 <__aeabi_dsub+0x3ac>
    4082:	1e58      	subs	r0, r3, #1
    4084:	4684      	mov	ip, r0
    4086:	2800      	cmp	r0, #0
    4088:	d000      	beq.n	408c <__aeabi_dsub+0x220>
    408a:	e0e7      	b.n	425c <__aeabi_dsub+0x3f0>
    408c:	4452      	add	r2, sl
    408e:	4552      	cmp	r2, sl
    4090:	4180      	sbcs	r0, r0
    4092:	1864      	adds	r4, r4, r1
    4094:	4240      	negs	r0, r0
    4096:	1824      	adds	r4, r4, r0
    4098:	0017      	movs	r7, r2
    409a:	2601      	movs	r6, #1
    409c:	0223      	lsls	r3, r4, #8
    409e:	d507      	bpl.n	40b0 <__aeabi_dsub+0x244>
    40a0:	2602      	movs	r6, #2
    40a2:	e7cf      	b.n	4044 <__aeabi_dsub+0x1d8>
    40a4:	4664      	mov	r4, ip
    40a6:	432c      	orrs	r4, r5
    40a8:	d100      	bne.n	40ac <__aeabi_dsub+0x240>
    40aa:	e1b3      	b.n	4414 <__aeabi_dsub+0x5a8>
    40ac:	002c      	movs	r4, r5
    40ae:	4667      	mov	r7, ip
    40b0:	077b      	lsls	r3, r7, #29
    40b2:	d000      	beq.n	40b6 <__aeabi_dsub+0x24a>
    40b4:	e762      	b.n	3f7c <__aeabi_dsub+0x110>
    40b6:	0763      	lsls	r3, r4, #29
    40b8:	08ff      	lsrs	r7, r7, #3
    40ba:	431f      	orrs	r7, r3
    40bc:	2501      	movs	r5, #1
    40be:	4643      	mov	r3, r8
    40c0:	08e4      	lsrs	r4, r4, #3
    40c2:	401d      	ands	r5, r3
    40c4:	e793      	b.n	3fee <__aeabi_dsub+0x182>
    40c6:	2d00      	cmp	r5, #0
    40c8:	d178      	bne.n	41bc <__aeabi_dsub+0x350>
    40ca:	1c75      	adds	r5, r6, #1
    40cc:	056d      	lsls	r5, r5, #21
    40ce:	0d6d      	lsrs	r5, r5, #21
    40d0:	2d01      	cmp	r5, #1
    40d2:	dc00      	bgt.n	40d6 <__aeabi_dsub+0x26a>
    40d4:	e0f2      	b.n	42bc <__aeabi_dsub+0x450>
    40d6:	4650      	mov	r0, sl
    40d8:	1a80      	subs	r0, r0, r2
    40da:	4582      	cmp	sl, r0
    40dc:	41bf      	sbcs	r7, r7
    40de:	1a65      	subs	r5, r4, r1
    40e0:	427f      	negs	r7, r7
    40e2:	1bed      	subs	r5, r5, r7
    40e4:	4684      	mov	ip, r0
    40e6:	0228      	lsls	r0, r5, #8
    40e8:	d400      	bmi.n	40ec <__aeabi_dsub+0x280>
    40ea:	e08c      	b.n	4206 <__aeabi_dsub+0x39a>
    40ec:	4650      	mov	r0, sl
    40ee:	1a17      	subs	r7, r2, r0
    40f0:	42ba      	cmp	r2, r7
    40f2:	4192      	sbcs	r2, r2
    40f4:	1b0c      	subs	r4, r1, r4
    40f6:	4255      	negs	r5, r2
    40f8:	1b65      	subs	r5, r4, r5
    40fa:	4698      	mov	r8, r3
    40fc:	e714      	b.n	3f28 <__aeabi_dsub+0xbc>
    40fe:	2501      	movs	r5, #1
    4100:	4643      	mov	r3, r8
    4102:	2400      	movs	r4, #0
    4104:	401d      	ands	r5, r3
    4106:	2700      	movs	r7, #0
    4108:	e755      	b.n	3fb6 <__aeabi_dsub+0x14a>
    410a:	4c2a      	ldr	r4, [pc, #168]	; (41b4 <__aeabi_dsub+0x348>)
    410c:	1af6      	subs	r6, r6, r3
    410e:	402c      	ands	r4, r5
    4110:	e732      	b.n	3f78 <__aeabi_dsub+0x10c>
    4112:	003d      	movs	r5, r7
    4114:	3828      	subs	r0, #40	; 0x28
    4116:	4085      	lsls	r5, r0
    4118:	2700      	movs	r7, #0
    411a:	e717      	b.n	3f4c <__aeabi_dsub+0xe0>
    411c:	0038      	movs	r0, r7
    411e:	f000 fa27 	bl	4570 <__clzsi2>
    4122:	3020      	adds	r0, #32
    4124:	e706      	b.n	3f34 <__aeabi_dsub+0xc8>
    4126:	430a      	orrs	r2, r1
    4128:	0017      	movs	r7, r2
    412a:	2100      	movs	r1, #0
    412c:	1e7a      	subs	r2, r7, #1
    412e:	4197      	sbcs	r7, r2
    4130:	e6ee      	b.n	3f10 <__aeabi_dsub+0xa4>
    4132:	2b00      	cmp	r3, #0
    4134:	d000      	beq.n	4138 <__aeabi_dsub+0x2cc>
    4136:	e0e5      	b.n	4304 <__aeabi_dsub+0x498>
    4138:	1c73      	adds	r3, r6, #1
    413a:	469c      	mov	ip, r3
    413c:	055b      	lsls	r3, r3, #21
    413e:	0d5b      	lsrs	r3, r3, #21
    4140:	2b01      	cmp	r3, #1
    4142:	dc00      	bgt.n	4146 <__aeabi_dsub+0x2da>
    4144:	e09f      	b.n	4286 <__aeabi_dsub+0x41a>
    4146:	4b1a      	ldr	r3, [pc, #104]	; (41b0 <__aeabi_dsub+0x344>)
    4148:	459c      	cmp	ip, r3
    414a:	d100      	bne.n	414e <__aeabi_dsub+0x2e2>
    414c:	e0c5      	b.n	42da <__aeabi_dsub+0x46e>
    414e:	4452      	add	r2, sl
    4150:	4552      	cmp	r2, sl
    4152:	4180      	sbcs	r0, r0
    4154:	1864      	adds	r4, r4, r1
    4156:	4240      	negs	r0, r0
    4158:	1824      	adds	r4, r4, r0
    415a:	07e7      	lsls	r7, r4, #31
    415c:	0852      	lsrs	r2, r2, #1
    415e:	4317      	orrs	r7, r2
    4160:	0864      	lsrs	r4, r4, #1
    4162:	4666      	mov	r6, ip
    4164:	e708      	b.n	3f78 <__aeabi_dsub+0x10c>
    4166:	4812      	ldr	r0, [pc, #72]	; (41b0 <__aeabi_dsub+0x344>)
    4168:	4285      	cmp	r5, r0
    416a:	d100      	bne.n	416e <__aeabi_dsub+0x302>
    416c:	e085      	b.n	427a <__aeabi_dsub+0x40e>
    416e:	001d      	movs	r5, r3
    4170:	e6bc      	b.n	3eec <__aeabi_dsub+0x80>
    4172:	0029      	movs	r1, r5
    4174:	3e1f      	subs	r6, #31
    4176:	40f1      	lsrs	r1, r6
    4178:	2b20      	cmp	r3, #32
    417a:	d100      	bne.n	417e <__aeabi_dsub+0x312>
    417c:	e07f      	b.n	427e <__aeabi_dsub+0x412>
    417e:	2240      	movs	r2, #64	; 0x40
    4180:	1ad3      	subs	r3, r2, r3
    4182:	409d      	lsls	r5, r3
    4184:	432f      	orrs	r7, r5
    4186:	1e7d      	subs	r5, r7, #1
    4188:	41af      	sbcs	r7, r5
    418a:	2400      	movs	r4, #0
    418c:	430f      	orrs	r7, r1
    418e:	2600      	movs	r6, #0
    4190:	e78e      	b.n	40b0 <__aeabi_dsub+0x244>
    4192:	002b      	movs	r3, r5
    4194:	000f      	movs	r7, r1
    4196:	3b20      	subs	r3, #32
    4198:	40df      	lsrs	r7, r3
    419a:	2d20      	cmp	r5, #32
    419c:	d071      	beq.n	4282 <__aeabi_dsub+0x416>
    419e:	2340      	movs	r3, #64	; 0x40
    41a0:	1b5d      	subs	r5, r3, r5
    41a2:	40a9      	lsls	r1, r5
    41a4:	430a      	orrs	r2, r1
    41a6:	1e51      	subs	r1, r2, #1
    41a8:	418a      	sbcs	r2, r1
    41aa:	2100      	movs	r1, #0
    41ac:	4317      	orrs	r7, r2
    41ae:	e6af      	b.n	3f10 <__aeabi_dsub+0xa4>
    41b0:	000007ff 	.word	0x000007ff
    41b4:	ff7fffff 	.word	0xff7fffff
    41b8:	800fffff 	.word	0x800fffff
    41bc:	2e00      	cmp	r6, #0
    41be:	d03e      	beq.n	423e <__aeabi_dsub+0x3d2>
    41c0:	4eb3      	ldr	r6, [pc, #716]	; (4490 <__aeabi_dsub+0x624>)
    41c2:	45b4      	cmp	ip, r6
    41c4:	d045      	beq.n	4252 <__aeabi_dsub+0x3e6>
    41c6:	2680      	movs	r6, #128	; 0x80
    41c8:	0436      	lsls	r6, r6, #16
    41ca:	426d      	negs	r5, r5
    41cc:	4334      	orrs	r4, r6
    41ce:	2d38      	cmp	r5, #56	; 0x38
    41d0:	dd00      	ble.n	41d4 <__aeabi_dsub+0x368>
    41d2:	e0a8      	b.n	4326 <__aeabi_dsub+0x4ba>
    41d4:	2d1f      	cmp	r5, #31
    41d6:	dd00      	ble.n	41da <__aeabi_dsub+0x36e>
    41d8:	e11f      	b.n	441a <__aeabi_dsub+0x5ae>
    41da:	2620      	movs	r6, #32
    41dc:	0027      	movs	r7, r4
    41de:	4650      	mov	r0, sl
    41e0:	1b76      	subs	r6, r6, r5
    41e2:	40b7      	lsls	r7, r6
    41e4:	40e8      	lsrs	r0, r5
    41e6:	4307      	orrs	r7, r0
    41e8:	4650      	mov	r0, sl
    41ea:	40b0      	lsls	r0, r6
    41ec:	1e46      	subs	r6, r0, #1
    41ee:	41b0      	sbcs	r0, r6
    41f0:	40ec      	lsrs	r4, r5
    41f2:	4338      	orrs	r0, r7
    41f4:	1a17      	subs	r7, r2, r0
    41f6:	42ba      	cmp	r2, r7
    41f8:	4192      	sbcs	r2, r2
    41fa:	1b0c      	subs	r4, r1, r4
    41fc:	4252      	negs	r2, r2
    41fe:	1aa4      	subs	r4, r4, r2
    4200:	4666      	mov	r6, ip
    4202:	4698      	mov	r8, r3
    4204:	e68b      	b.n	3f1e <__aeabi_dsub+0xb2>
    4206:	4664      	mov	r4, ip
    4208:	4667      	mov	r7, ip
    420a:	432c      	orrs	r4, r5
    420c:	d000      	beq.n	4210 <__aeabi_dsub+0x3a4>
    420e:	e68b      	b.n	3f28 <__aeabi_dsub+0xbc>
    4210:	2500      	movs	r5, #0
    4212:	2600      	movs	r6, #0
    4214:	2700      	movs	r7, #0
    4216:	e6ea      	b.n	3fee <__aeabi_dsub+0x182>
    4218:	001e      	movs	r6, r3
    421a:	e6ad      	b.n	3f78 <__aeabi_dsub+0x10c>
    421c:	2b1f      	cmp	r3, #31
    421e:	dc60      	bgt.n	42e2 <__aeabi_dsub+0x476>
    4220:	2720      	movs	r7, #32
    4222:	1af8      	subs	r0, r7, r3
    4224:	000f      	movs	r7, r1
    4226:	4684      	mov	ip, r0
    4228:	4087      	lsls	r7, r0
    422a:	0010      	movs	r0, r2
    422c:	40d8      	lsrs	r0, r3
    422e:	4307      	orrs	r7, r0
    4230:	4660      	mov	r0, ip
    4232:	4082      	lsls	r2, r0
    4234:	1e50      	subs	r0, r2, #1
    4236:	4182      	sbcs	r2, r0
    4238:	40d9      	lsrs	r1, r3
    423a:	4317      	orrs	r7, r2
    423c:	e6f5      	b.n	402a <__aeabi_dsub+0x1be>
    423e:	0026      	movs	r6, r4
    4240:	4650      	mov	r0, sl
    4242:	4306      	orrs	r6, r0
    4244:	d005      	beq.n	4252 <__aeabi_dsub+0x3e6>
    4246:	43ed      	mvns	r5, r5
    4248:	2d00      	cmp	r5, #0
    424a:	d0d3      	beq.n	41f4 <__aeabi_dsub+0x388>
    424c:	4e90      	ldr	r6, [pc, #576]	; (4490 <__aeabi_dsub+0x624>)
    424e:	45b4      	cmp	ip, r6
    4250:	d1bd      	bne.n	41ce <__aeabi_dsub+0x362>
    4252:	000c      	movs	r4, r1
    4254:	0017      	movs	r7, r2
    4256:	4666      	mov	r6, ip
    4258:	4698      	mov	r8, r3
    425a:	e68d      	b.n	3f78 <__aeabi_dsub+0x10c>
    425c:	488c      	ldr	r0, [pc, #560]	; (4490 <__aeabi_dsub+0x624>)
    425e:	4283      	cmp	r3, r0
    4260:	d00b      	beq.n	427a <__aeabi_dsub+0x40e>
    4262:	4663      	mov	r3, ip
    4264:	e6d9      	b.n	401a <__aeabi_dsub+0x1ae>
    4266:	2d00      	cmp	r5, #0
    4268:	d000      	beq.n	426c <__aeabi_dsub+0x400>
    426a:	e096      	b.n	439a <__aeabi_dsub+0x52e>
    426c:	0008      	movs	r0, r1
    426e:	4310      	orrs	r0, r2
    4270:	d100      	bne.n	4274 <__aeabi_dsub+0x408>
    4272:	e0e2      	b.n	443a <__aeabi_dsub+0x5ce>
    4274:	000c      	movs	r4, r1
    4276:	0017      	movs	r7, r2
    4278:	4698      	mov	r8, r3
    427a:	4e85      	ldr	r6, [pc, #532]	; (4490 <__aeabi_dsub+0x624>)
    427c:	e67c      	b.n	3f78 <__aeabi_dsub+0x10c>
    427e:	2500      	movs	r5, #0
    4280:	e780      	b.n	4184 <__aeabi_dsub+0x318>
    4282:	2100      	movs	r1, #0
    4284:	e78e      	b.n	41a4 <__aeabi_dsub+0x338>
    4286:	0023      	movs	r3, r4
    4288:	4650      	mov	r0, sl
    428a:	4303      	orrs	r3, r0
    428c:	2e00      	cmp	r6, #0
    428e:	d000      	beq.n	4292 <__aeabi_dsub+0x426>
    4290:	e0a8      	b.n	43e4 <__aeabi_dsub+0x578>
    4292:	2b00      	cmp	r3, #0
    4294:	d100      	bne.n	4298 <__aeabi_dsub+0x42c>
    4296:	e0de      	b.n	4456 <__aeabi_dsub+0x5ea>
    4298:	000b      	movs	r3, r1
    429a:	4313      	orrs	r3, r2
    429c:	d100      	bne.n	42a0 <__aeabi_dsub+0x434>
    429e:	e66b      	b.n	3f78 <__aeabi_dsub+0x10c>
    42a0:	4452      	add	r2, sl
    42a2:	4552      	cmp	r2, sl
    42a4:	4180      	sbcs	r0, r0
    42a6:	1864      	adds	r4, r4, r1
    42a8:	4240      	negs	r0, r0
    42aa:	1824      	adds	r4, r4, r0
    42ac:	0017      	movs	r7, r2
    42ae:	0223      	lsls	r3, r4, #8
    42b0:	d400      	bmi.n	42b4 <__aeabi_dsub+0x448>
    42b2:	e6fd      	b.n	40b0 <__aeabi_dsub+0x244>
    42b4:	4b77      	ldr	r3, [pc, #476]	; (4494 <__aeabi_dsub+0x628>)
    42b6:	4666      	mov	r6, ip
    42b8:	401c      	ands	r4, r3
    42ba:	e65d      	b.n	3f78 <__aeabi_dsub+0x10c>
    42bc:	0025      	movs	r5, r4
    42be:	4650      	mov	r0, sl
    42c0:	4305      	orrs	r5, r0
    42c2:	2e00      	cmp	r6, #0
    42c4:	d1cf      	bne.n	4266 <__aeabi_dsub+0x3fa>
    42c6:	2d00      	cmp	r5, #0
    42c8:	d14f      	bne.n	436a <__aeabi_dsub+0x4fe>
    42ca:	000c      	movs	r4, r1
    42cc:	4314      	orrs	r4, r2
    42ce:	d100      	bne.n	42d2 <__aeabi_dsub+0x466>
    42d0:	e0a0      	b.n	4414 <__aeabi_dsub+0x5a8>
    42d2:	000c      	movs	r4, r1
    42d4:	0017      	movs	r7, r2
    42d6:	4698      	mov	r8, r3
    42d8:	e64e      	b.n	3f78 <__aeabi_dsub+0x10c>
    42da:	4666      	mov	r6, ip
    42dc:	2400      	movs	r4, #0
    42de:	2700      	movs	r7, #0
    42e0:	e685      	b.n	3fee <__aeabi_dsub+0x182>
    42e2:	001f      	movs	r7, r3
    42e4:	0008      	movs	r0, r1
    42e6:	3f20      	subs	r7, #32
    42e8:	40f8      	lsrs	r0, r7
    42ea:	0007      	movs	r7, r0
    42ec:	2b20      	cmp	r3, #32
    42ee:	d100      	bne.n	42f2 <__aeabi_dsub+0x486>
    42f0:	e08e      	b.n	4410 <__aeabi_dsub+0x5a4>
    42f2:	2040      	movs	r0, #64	; 0x40
    42f4:	1ac3      	subs	r3, r0, r3
    42f6:	4099      	lsls	r1, r3
    42f8:	430a      	orrs	r2, r1
    42fa:	1e51      	subs	r1, r2, #1
    42fc:	418a      	sbcs	r2, r1
    42fe:	2100      	movs	r1, #0
    4300:	4317      	orrs	r7, r2
    4302:	e692      	b.n	402a <__aeabi_dsub+0x1be>
    4304:	2e00      	cmp	r6, #0
    4306:	d114      	bne.n	4332 <__aeabi_dsub+0x4c6>
    4308:	0026      	movs	r6, r4
    430a:	4650      	mov	r0, sl
    430c:	4306      	orrs	r6, r0
    430e:	d062      	beq.n	43d6 <__aeabi_dsub+0x56a>
    4310:	43db      	mvns	r3, r3
    4312:	2b00      	cmp	r3, #0
    4314:	d15c      	bne.n	43d0 <__aeabi_dsub+0x564>
    4316:	1887      	adds	r7, r0, r2
    4318:	4297      	cmp	r7, r2
    431a:	4192      	sbcs	r2, r2
    431c:	1864      	adds	r4, r4, r1
    431e:	4252      	negs	r2, r2
    4320:	18a4      	adds	r4, r4, r2
    4322:	4666      	mov	r6, ip
    4324:	e687      	b.n	4036 <__aeabi_dsub+0x1ca>
    4326:	4650      	mov	r0, sl
    4328:	4320      	orrs	r0, r4
    432a:	1e44      	subs	r4, r0, #1
    432c:	41a0      	sbcs	r0, r4
    432e:	2400      	movs	r4, #0
    4330:	e760      	b.n	41f4 <__aeabi_dsub+0x388>
    4332:	4e57      	ldr	r6, [pc, #348]	; (4490 <__aeabi_dsub+0x624>)
    4334:	45b4      	cmp	ip, r6
    4336:	d04e      	beq.n	43d6 <__aeabi_dsub+0x56a>
    4338:	2680      	movs	r6, #128	; 0x80
    433a:	0436      	lsls	r6, r6, #16
    433c:	425b      	negs	r3, r3
    433e:	4334      	orrs	r4, r6
    4340:	2b38      	cmp	r3, #56	; 0x38
    4342:	dd00      	ble.n	4346 <__aeabi_dsub+0x4da>
    4344:	e07f      	b.n	4446 <__aeabi_dsub+0x5da>
    4346:	2b1f      	cmp	r3, #31
    4348:	dd00      	ble.n	434c <__aeabi_dsub+0x4e0>
    434a:	e08b      	b.n	4464 <__aeabi_dsub+0x5f8>
    434c:	2620      	movs	r6, #32
    434e:	0027      	movs	r7, r4
    4350:	4650      	mov	r0, sl
    4352:	1af6      	subs	r6, r6, r3
    4354:	40b7      	lsls	r7, r6
    4356:	40d8      	lsrs	r0, r3
    4358:	4307      	orrs	r7, r0
    435a:	4650      	mov	r0, sl
    435c:	40b0      	lsls	r0, r6
    435e:	1e46      	subs	r6, r0, #1
    4360:	41b0      	sbcs	r0, r6
    4362:	4307      	orrs	r7, r0
    4364:	40dc      	lsrs	r4, r3
    4366:	18bf      	adds	r7, r7, r2
    4368:	e7d6      	b.n	4318 <__aeabi_dsub+0x4ac>
    436a:	000d      	movs	r5, r1
    436c:	4315      	orrs	r5, r2
    436e:	d100      	bne.n	4372 <__aeabi_dsub+0x506>
    4370:	e602      	b.n	3f78 <__aeabi_dsub+0x10c>
    4372:	4650      	mov	r0, sl
    4374:	1a80      	subs	r0, r0, r2
    4376:	4582      	cmp	sl, r0
    4378:	41bf      	sbcs	r7, r7
    437a:	1a65      	subs	r5, r4, r1
    437c:	427f      	negs	r7, r7
    437e:	1bed      	subs	r5, r5, r7
    4380:	4684      	mov	ip, r0
    4382:	0228      	lsls	r0, r5, #8
    4384:	d400      	bmi.n	4388 <__aeabi_dsub+0x51c>
    4386:	e68d      	b.n	40a4 <__aeabi_dsub+0x238>
    4388:	4650      	mov	r0, sl
    438a:	1a17      	subs	r7, r2, r0
    438c:	42ba      	cmp	r2, r7
    438e:	4192      	sbcs	r2, r2
    4390:	1b0c      	subs	r4, r1, r4
    4392:	4252      	negs	r2, r2
    4394:	1aa4      	subs	r4, r4, r2
    4396:	4698      	mov	r8, r3
    4398:	e5ee      	b.n	3f78 <__aeabi_dsub+0x10c>
    439a:	000d      	movs	r5, r1
    439c:	4315      	orrs	r5, r2
    439e:	d100      	bne.n	43a2 <__aeabi_dsub+0x536>
    43a0:	e76b      	b.n	427a <__aeabi_dsub+0x40e>
    43a2:	4650      	mov	r0, sl
    43a4:	0767      	lsls	r7, r4, #29
    43a6:	08c0      	lsrs	r0, r0, #3
    43a8:	4307      	orrs	r7, r0
    43aa:	2080      	movs	r0, #128	; 0x80
    43ac:	08e4      	lsrs	r4, r4, #3
    43ae:	0300      	lsls	r0, r0, #12
    43b0:	4204      	tst	r4, r0
    43b2:	d007      	beq.n	43c4 <__aeabi_dsub+0x558>
    43b4:	08cd      	lsrs	r5, r1, #3
    43b6:	4205      	tst	r5, r0
    43b8:	d104      	bne.n	43c4 <__aeabi_dsub+0x558>
    43ba:	002c      	movs	r4, r5
    43bc:	4698      	mov	r8, r3
    43be:	08d7      	lsrs	r7, r2, #3
    43c0:	0749      	lsls	r1, r1, #29
    43c2:	430f      	orrs	r7, r1
    43c4:	0f7b      	lsrs	r3, r7, #29
    43c6:	00e4      	lsls	r4, r4, #3
    43c8:	431c      	orrs	r4, r3
    43ca:	00ff      	lsls	r7, r7, #3
    43cc:	4e30      	ldr	r6, [pc, #192]	; (4490 <__aeabi_dsub+0x624>)
    43ce:	e5d3      	b.n	3f78 <__aeabi_dsub+0x10c>
    43d0:	4e2f      	ldr	r6, [pc, #188]	; (4490 <__aeabi_dsub+0x624>)
    43d2:	45b4      	cmp	ip, r6
    43d4:	d1b4      	bne.n	4340 <__aeabi_dsub+0x4d4>
    43d6:	000c      	movs	r4, r1
    43d8:	0017      	movs	r7, r2
    43da:	4666      	mov	r6, ip
    43dc:	e5cc      	b.n	3f78 <__aeabi_dsub+0x10c>
    43de:	2700      	movs	r7, #0
    43e0:	2400      	movs	r4, #0
    43e2:	e5e8      	b.n	3fb6 <__aeabi_dsub+0x14a>
    43e4:	2b00      	cmp	r3, #0
    43e6:	d039      	beq.n	445c <__aeabi_dsub+0x5f0>
    43e8:	000b      	movs	r3, r1
    43ea:	4313      	orrs	r3, r2
    43ec:	d100      	bne.n	43f0 <__aeabi_dsub+0x584>
    43ee:	e744      	b.n	427a <__aeabi_dsub+0x40e>
    43f0:	08c0      	lsrs	r0, r0, #3
    43f2:	0767      	lsls	r7, r4, #29
    43f4:	4307      	orrs	r7, r0
    43f6:	2080      	movs	r0, #128	; 0x80
    43f8:	08e4      	lsrs	r4, r4, #3
    43fa:	0300      	lsls	r0, r0, #12
    43fc:	4204      	tst	r4, r0
    43fe:	d0e1      	beq.n	43c4 <__aeabi_dsub+0x558>
    4400:	08cb      	lsrs	r3, r1, #3
    4402:	4203      	tst	r3, r0
    4404:	d1de      	bne.n	43c4 <__aeabi_dsub+0x558>
    4406:	08d7      	lsrs	r7, r2, #3
    4408:	0749      	lsls	r1, r1, #29
    440a:	430f      	orrs	r7, r1
    440c:	001c      	movs	r4, r3
    440e:	e7d9      	b.n	43c4 <__aeabi_dsub+0x558>
    4410:	2100      	movs	r1, #0
    4412:	e771      	b.n	42f8 <__aeabi_dsub+0x48c>
    4414:	2500      	movs	r5, #0
    4416:	2700      	movs	r7, #0
    4418:	e5e9      	b.n	3fee <__aeabi_dsub+0x182>
    441a:	002e      	movs	r6, r5
    441c:	0027      	movs	r7, r4
    441e:	3e20      	subs	r6, #32
    4420:	40f7      	lsrs	r7, r6
    4422:	2d20      	cmp	r5, #32
    4424:	d02f      	beq.n	4486 <__aeabi_dsub+0x61a>
    4426:	2640      	movs	r6, #64	; 0x40
    4428:	1b75      	subs	r5, r6, r5
    442a:	40ac      	lsls	r4, r5
    442c:	4650      	mov	r0, sl
    442e:	4320      	orrs	r0, r4
    4430:	1e44      	subs	r4, r0, #1
    4432:	41a0      	sbcs	r0, r4
    4434:	2400      	movs	r4, #0
    4436:	4338      	orrs	r0, r7
    4438:	e6dc      	b.n	41f4 <__aeabi_dsub+0x388>
    443a:	2480      	movs	r4, #128	; 0x80
    443c:	2500      	movs	r5, #0
    443e:	0324      	lsls	r4, r4, #12
    4440:	4e13      	ldr	r6, [pc, #76]	; (4490 <__aeabi_dsub+0x624>)
    4442:	2700      	movs	r7, #0
    4444:	e5d3      	b.n	3fee <__aeabi_dsub+0x182>
    4446:	4650      	mov	r0, sl
    4448:	4320      	orrs	r0, r4
    444a:	0007      	movs	r7, r0
    444c:	1e78      	subs	r0, r7, #1
    444e:	4187      	sbcs	r7, r0
    4450:	2400      	movs	r4, #0
    4452:	18bf      	adds	r7, r7, r2
    4454:	e760      	b.n	4318 <__aeabi_dsub+0x4ac>
    4456:	000c      	movs	r4, r1
    4458:	0017      	movs	r7, r2
    445a:	e58d      	b.n	3f78 <__aeabi_dsub+0x10c>
    445c:	000c      	movs	r4, r1
    445e:	0017      	movs	r7, r2
    4460:	4e0b      	ldr	r6, [pc, #44]	; (4490 <__aeabi_dsub+0x624>)
    4462:	e589      	b.n	3f78 <__aeabi_dsub+0x10c>
    4464:	001e      	movs	r6, r3
    4466:	0027      	movs	r7, r4
    4468:	3e20      	subs	r6, #32
    446a:	40f7      	lsrs	r7, r6
    446c:	2b20      	cmp	r3, #32
    446e:	d00c      	beq.n	448a <__aeabi_dsub+0x61e>
    4470:	2640      	movs	r6, #64	; 0x40
    4472:	1af3      	subs	r3, r6, r3
    4474:	409c      	lsls	r4, r3
    4476:	4650      	mov	r0, sl
    4478:	4320      	orrs	r0, r4
    447a:	1e44      	subs	r4, r0, #1
    447c:	41a0      	sbcs	r0, r4
    447e:	4307      	orrs	r7, r0
    4480:	2400      	movs	r4, #0
    4482:	18bf      	adds	r7, r7, r2
    4484:	e748      	b.n	4318 <__aeabi_dsub+0x4ac>
    4486:	2400      	movs	r4, #0
    4488:	e7d0      	b.n	442c <__aeabi_dsub+0x5c0>
    448a:	2400      	movs	r4, #0
    448c:	e7f3      	b.n	4476 <__aeabi_dsub+0x60a>
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	000007ff 	.word	0x000007ff
    4494:	ff7fffff 	.word	0xff7fffff

00004498 <__aeabi_d2iz>:
    4498:	b530      	push	{r4, r5, lr}
    449a:	4d13      	ldr	r5, [pc, #76]	; (44e8 <__aeabi_d2iz+0x50>)
    449c:	030a      	lsls	r2, r1, #12
    449e:	004b      	lsls	r3, r1, #1
    44a0:	0b12      	lsrs	r2, r2, #12
    44a2:	0d5b      	lsrs	r3, r3, #21
    44a4:	0fc9      	lsrs	r1, r1, #31
    44a6:	2400      	movs	r4, #0
    44a8:	42ab      	cmp	r3, r5
    44aa:	dd10      	ble.n	44ce <__aeabi_d2iz+0x36>
    44ac:	4c0f      	ldr	r4, [pc, #60]	; (44ec <__aeabi_d2iz+0x54>)
    44ae:	42a3      	cmp	r3, r4
    44b0:	dc0f      	bgt.n	44d2 <__aeabi_d2iz+0x3a>
    44b2:	2480      	movs	r4, #128	; 0x80
    44b4:	4d0e      	ldr	r5, [pc, #56]	; (44f0 <__aeabi_d2iz+0x58>)
    44b6:	0364      	lsls	r4, r4, #13
    44b8:	4322      	orrs	r2, r4
    44ba:	1aed      	subs	r5, r5, r3
    44bc:	2d1f      	cmp	r5, #31
    44be:	dd0b      	ble.n	44d8 <__aeabi_d2iz+0x40>
    44c0:	480c      	ldr	r0, [pc, #48]	; (44f4 <__aeabi_d2iz+0x5c>)
    44c2:	1ac3      	subs	r3, r0, r3
    44c4:	40da      	lsrs	r2, r3
    44c6:	4254      	negs	r4, r2
    44c8:	2900      	cmp	r1, #0
    44ca:	d100      	bne.n	44ce <__aeabi_d2iz+0x36>
    44cc:	0014      	movs	r4, r2
    44ce:	0020      	movs	r0, r4
    44d0:	bd30      	pop	{r4, r5, pc}
    44d2:	4b09      	ldr	r3, [pc, #36]	; (44f8 <__aeabi_d2iz+0x60>)
    44d4:	18cc      	adds	r4, r1, r3
    44d6:	e7fa      	b.n	44ce <__aeabi_d2iz+0x36>
    44d8:	4c08      	ldr	r4, [pc, #32]	; (44fc <__aeabi_d2iz+0x64>)
    44da:	40e8      	lsrs	r0, r5
    44dc:	46a4      	mov	ip, r4
    44de:	4463      	add	r3, ip
    44e0:	409a      	lsls	r2, r3
    44e2:	4302      	orrs	r2, r0
    44e4:	e7ef      	b.n	44c6 <__aeabi_d2iz+0x2e>
    44e6:	46c0      	nop			; (mov r8, r8)
    44e8:	000003fe 	.word	0x000003fe
    44ec:	0000041d 	.word	0x0000041d
    44f0:	00000433 	.word	0x00000433
    44f4:	00000413 	.word	0x00000413
    44f8:	7fffffff 	.word	0x7fffffff
    44fc:	fffffbed 	.word	0xfffffbed

00004500 <__aeabi_ui2d>:
    4500:	b510      	push	{r4, lr}
    4502:	1e04      	subs	r4, r0, #0
    4504:	d028      	beq.n	4558 <__aeabi_ui2d+0x58>
    4506:	f000 f833 	bl	4570 <__clzsi2>
    450a:	4b15      	ldr	r3, [pc, #84]	; (4560 <__aeabi_ui2d+0x60>)
    450c:	4a15      	ldr	r2, [pc, #84]	; (4564 <__aeabi_ui2d+0x64>)
    450e:	1a1b      	subs	r3, r3, r0
    4510:	1ad2      	subs	r2, r2, r3
    4512:	2a1f      	cmp	r2, #31
    4514:	dd15      	ble.n	4542 <__aeabi_ui2d+0x42>
    4516:	4a14      	ldr	r2, [pc, #80]	; (4568 <__aeabi_ui2d+0x68>)
    4518:	1ad2      	subs	r2, r2, r3
    451a:	4094      	lsls	r4, r2
    451c:	2200      	movs	r2, #0
    451e:	0324      	lsls	r4, r4, #12
    4520:	055b      	lsls	r3, r3, #21
    4522:	0b24      	lsrs	r4, r4, #12
    4524:	0d5b      	lsrs	r3, r3, #21
    4526:	2100      	movs	r1, #0
    4528:	0010      	movs	r0, r2
    452a:	0324      	lsls	r4, r4, #12
    452c:	0d0a      	lsrs	r2, r1, #20
    452e:	0b24      	lsrs	r4, r4, #12
    4530:	0512      	lsls	r2, r2, #20
    4532:	4322      	orrs	r2, r4
    4534:	4c0d      	ldr	r4, [pc, #52]	; (456c <__aeabi_ui2d+0x6c>)
    4536:	051b      	lsls	r3, r3, #20
    4538:	4022      	ands	r2, r4
    453a:	4313      	orrs	r3, r2
    453c:	005b      	lsls	r3, r3, #1
    453e:	0859      	lsrs	r1, r3, #1
    4540:	bd10      	pop	{r4, pc}
    4542:	0021      	movs	r1, r4
    4544:	4091      	lsls	r1, r2
    4546:	000a      	movs	r2, r1
    4548:	210b      	movs	r1, #11
    454a:	1a08      	subs	r0, r1, r0
    454c:	40c4      	lsrs	r4, r0
    454e:	055b      	lsls	r3, r3, #21
    4550:	0324      	lsls	r4, r4, #12
    4552:	0b24      	lsrs	r4, r4, #12
    4554:	0d5b      	lsrs	r3, r3, #21
    4556:	e7e6      	b.n	4526 <__aeabi_ui2d+0x26>
    4558:	2300      	movs	r3, #0
    455a:	2400      	movs	r4, #0
    455c:	2200      	movs	r2, #0
    455e:	e7e2      	b.n	4526 <__aeabi_ui2d+0x26>
    4560:	0000041e 	.word	0x0000041e
    4564:	00000433 	.word	0x00000433
    4568:	00000413 	.word	0x00000413
    456c:	800fffff 	.word	0x800fffff

00004570 <__clzsi2>:
    4570:	211c      	movs	r1, #28
    4572:	2301      	movs	r3, #1
    4574:	041b      	lsls	r3, r3, #16
    4576:	4298      	cmp	r0, r3
    4578:	d301      	bcc.n	457e <__clzsi2+0xe>
    457a:	0c00      	lsrs	r0, r0, #16
    457c:	3910      	subs	r1, #16
    457e:	0a1b      	lsrs	r3, r3, #8
    4580:	4298      	cmp	r0, r3
    4582:	d301      	bcc.n	4588 <__clzsi2+0x18>
    4584:	0a00      	lsrs	r0, r0, #8
    4586:	3908      	subs	r1, #8
    4588:	091b      	lsrs	r3, r3, #4
    458a:	4298      	cmp	r0, r3
    458c:	d301      	bcc.n	4592 <__clzsi2+0x22>
    458e:	0900      	lsrs	r0, r0, #4
    4590:	3904      	subs	r1, #4
    4592:	a202      	add	r2, pc, #8	; (adr r2, 459c <__clzsi2+0x2c>)
    4594:	5c10      	ldrb	r0, [r2, r0]
    4596:	1840      	adds	r0, r0, r1
    4598:	4770      	bx	lr
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	02020304 	.word	0x02020304
    45a0:	01010101 	.word	0x01010101
	...

000045ac <atoi>:
    45ac:	b510      	push	{r4, lr}
    45ae:	220a      	movs	r2, #10
    45b0:	2100      	movs	r1, #0
    45b2:	f000 fa81 	bl	4ab8 <strtol>
    45b6:	bd10      	pop	{r4, pc}

000045b8 <__libc_init_array>:
    45b8:	b570      	push	{r4, r5, r6, lr}
    45ba:	2600      	movs	r6, #0
    45bc:	4d0c      	ldr	r5, [pc, #48]	; (45f0 <__libc_init_array+0x38>)
    45be:	4c0d      	ldr	r4, [pc, #52]	; (45f4 <__libc_init_array+0x3c>)
    45c0:	1b64      	subs	r4, r4, r5
    45c2:	10a4      	asrs	r4, r4, #2
    45c4:	42a6      	cmp	r6, r4
    45c6:	d109      	bne.n	45dc <__libc_init_array+0x24>
    45c8:	2600      	movs	r6, #0
    45ca:	f002 fbb7 	bl	6d3c <_init>
    45ce:	4d0a      	ldr	r5, [pc, #40]	; (45f8 <__libc_init_array+0x40>)
    45d0:	4c0a      	ldr	r4, [pc, #40]	; (45fc <__libc_init_array+0x44>)
    45d2:	1b64      	subs	r4, r4, r5
    45d4:	10a4      	asrs	r4, r4, #2
    45d6:	42a6      	cmp	r6, r4
    45d8:	d105      	bne.n	45e6 <__libc_init_array+0x2e>
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	00b3      	lsls	r3, r6, #2
    45de:	58eb      	ldr	r3, [r5, r3]
    45e0:	4798      	blx	r3
    45e2:	3601      	adds	r6, #1
    45e4:	e7ee      	b.n	45c4 <__libc_init_array+0xc>
    45e6:	00b3      	lsls	r3, r6, #2
    45e8:	58eb      	ldr	r3, [r5, r3]
    45ea:	4798      	blx	r3
    45ec:	3601      	adds	r6, #1
    45ee:	e7f2      	b.n	45d6 <__libc_init_array+0x1e>
    45f0:	00006d48 	.word	0x00006d48
    45f4:	00006d48 	.word	0x00006d48
    45f8:	00006d48 	.word	0x00006d48
    45fc:	00006d4c 	.word	0x00006d4c

00004600 <memcpy>:
    4600:	2300      	movs	r3, #0
    4602:	b510      	push	{r4, lr}
    4604:	429a      	cmp	r2, r3
    4606:	d100      	bne.n	460a <memcpy+0xa>
    4608:	bd10      	pop	{r4, pc}
    460a:	5ccc      	ldrb	r4, [r1, r3]
    460c:	54c4      	strb	r4, [r0, r3]
    460e:	3301      	adds	r3, #1
    4610:	e7f8      	b.n	4604 <memcpy+0x4>

00004612 <memset>:
    4612:	0003      	movs	r3, r0
    4614:	1882      	adds	r2, r0, r2
    4616:	4293      	cmp	r3, r2
    4618:	d100      	bne.n	461c <memset+0xa>
    461a:	4770      	bx	lr
    461c:	7019      	strb	r1, [r3, #0]
    461e:	3301      	adds	r3, #1
    4620:	e7f9      	b.n	4616 <memset+0x4>
	...

00004624 <iprintf>:
    4624:	b40f      	push	{r0, r1, r2, r3}
    4626:	4b0b      	ldr	r3, [pc, #44]	; (4654 <iprintf+0x30>)
    4628:	b513      	push	{r0, r1, r4, lr}
    462a:	681c      	ldr	r4, [r3, #0]
    462c:	2c00      	cmp	r4, #0
    462e:	d005      	beq.n	463c <iprintf+0x18>
    4630:	69a3      	ldr	r3, [r4, #24]
    4632:	2b00      	cmp	r3, #0
    4634:	d102      	bne.n	463c <iprintf+0x18>
    4636:	0020      	movs	r0, r4
    4638:	f000 fc2a 	bl	4e90 <__sinit>
    463c:	ab05      	add	r3, sp, #20
    463e:	9a04      	ldr	r2, [sp, #16]
    4640:	68a1      	ldr	r1, [r4, #8]
    4642:	0020      	movs	r0, r4
    4644:	9301      	str	r3, [sp, #4]
    4646:	f000 fe3d 	bl	52c4 <_vfiprintf_r>
    464a:	bc16      	pop	{r1, r2, r4}
    464c:	bc08      	pop	{r3}
    464e:	b004      	add	sp, #16
    4650:	4718      	bx	r3
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	20000040 	.word	0x20000040

00004658 <_puts_r>:
    4658:	b570      	push	{r4, r5, r6, lr}
    465a:	0005      	movs	r5, r0
    465c:	000e      	movs	r6, r1
    465e:	2800      	cmp	r0, #0
    4660:	d004      	beq.n	466c <_puts_r+0x14>
    4662:	6983      	ldr	r3, [r0, #24]
    4664:	2b00      	cmp	r3, #0
    4666:	d101      	bne.n	466c <_puts_r+0x14>
    4668:	f000 fc12 	bl	4e90 <__sinit>
    466c:	69ab      	ldr	r3, [r5, #24]
    466e:	68ac      	ldr	r4, [r5, #8]
    4670:	2b00      	cmp	r3, #0
    4672:	d102      	bne.n	467a <_puts_r+0x22>
    4674:	0028      	movs	r0, r5
    4676:	f000 fc0b 	bl	4e90 <__sinit>
    467a:	4b24      	ldr	r3, [pc, #144]	; (470c <_puts_r+0xb4>)
    467c:	429c      	cmp	r4, r3
    467e:	d10f      	bne.n	46a0 <_puts_r+0x48>
    4680:	686c      	ldr	r4, [r5, #4]
    4682:	89a3      	ldrh	r3, [r4, #12]
    4684:	071b      	lsls	r3, r3, #28
    4686:	d502      	bpl.n	468e <_puts_r+0x36>
    4688:	6923      	ldr	r3, [r4, #16]
    468a:	2b00      	cmp	r3, #0
    468c:	d120      	bne.n	46d0 <_puts_r+0x78>
    468e:	0021      	movs	r1, r4
    4690:	0028      	movs	r0, r5
    4692:	f000 fa7b 	bl	4b8c <__swsetup_r>
    4696:	2800      	cmp	r0, #0
    4698:	d01a      	beq.n	46d0 <_puts_r+0x78>
    469a:	2001      	movs	r0, #1
    469c:	4240      	negs	r0, r0
    469e:	bd70      	pop	{r4, r5, r6, pc}
    46a0:	4b1b      	ldr	r3, [pc, #108]	; (4710 <_puts_r+0xb8>)
    46a2:	429c      	cmp	r4, r3
    46a4:	d101      	bne.n	46aa <_puts_r+0x52>
    46a6:	68ac      	ldr	r4, [r5, #8]
    46a8:	e7eb      	b.n	4682 <_puts_r+0x2a>
    46aa:	4b1a      	ldr	r3, [pc, #104]	; (4714 <_puts_r+0xbc>)
    46ac:	429c      	cmp	r4, r3
    46ae:	d1e8      	bne.n	4682 <_puts_r+0x2a>
    46b0:	68ec      	ldr	r4, [r5, #12]
    46b2:	e7e6      	b.n	4682 <_puts_r+0x2a>
    46b4:	3b01      	subs	r3, #1
    46b6:	3601      	adds	r6, #1
    46b8:	60a3      	str	r3, [r4, #8]
    46ba:	2b00      	cmp	r3, #0
    46bc:	da04      	bge.n	46c8 <_puts_r+0x70>
    46be:	69a2      	ldr	r2, [r4, #24]
    46c0:	4293      	cmp	r3, r2
    46c2:	db16      	blt.n	46f2 <_puts_r+0x9a>
    46c4:	290a      	cmp	r1, #10
    46c6:	d014      	beq.n	46f2 <_puts_r+0x9a>
    46c8:	6823      	ldr	r3, [r4, #0]
    46ca:	1c5a      	adds	r2, r3, #1
    46cc:	6022      	str	r2, [r4, #0]
    46ce:	7019      	strb	r1, [r3, #0]
    46d0:	7831      	ldrb	r1, [r6, #0]
    46d2:	68a3      	ldr	r3, [r4, #8]
    46d4:	2900      	cmp	r1, #0
    46d6:	d1ed      	bne.n	46b4 <_puts_r+0x5c>
    46d8:	3b01      	subs	r3, #1
    46da:	60a3      	str	r3, [r4, #8]
    46dc:	2b00      	cmp	r3, #0
    46de:	da0f      	bge.n	4700 <_puts_r+0xa8>
    46e0:	0022      	movs	r2, r4
    46e2:	310a      	adds	r1, #10
    46e4:	0028      	movs	r0, r5
    46e6:	f000 f9fb 	bl	4ae0 <__swbuf_r>
    46ea:	1c43      	adds	r3, r0, #1
    46ec:	d0d5      	beq.n	469a <_puts_r+0x42>
    46ee:	200a      	movs	r0, #10
    46f0:	e7d5      	b.n	469e <_puts_r+0x46>
    46f2:	0022      	movs	r2, r4
    46f4:	0028      	movs	r0, r5
    46f6:	f000 f9f3 	bl	4ae0 <__swbuf_r>
    46fa:	1c43      	adds	r3, r0, #1
    46fc:	d1e8      	bne.n	46d0 <_puts_r+0x78>
    46fe:	e7cc      	b.n	469a <_puts_r+0x42>
    4700:	200a      	movs	r0, #10
    4702:	6823      	ldr	r3, [r4, #0]
    4704:	1c5a      	adds	r2, r3, #1
    4706:	6022      	str	r2, [r4, #0]
    4708:	7018      	strb	r0, [r3, #0]
    470a:	e7c8      	b.n	469e <_puts_r+0x46>
    470c:	00006b94 	.word	0x00006b94
    4710:	00006bb4 	.word	0x00006bb4
    4714:	00006b74 	.word	0x00006b74

00004718 <puts>:
    4718:	b510      	push	{r4, lr}
    471a:	4b03      	ldr	r3, [pc, #12]	; (4728 <puts+0x10>)
    471c:	0001      	movs	r1, r0
    471e:	6818      	ldr	r0, [r3, #0]
    4720:	f7ff ff9a 	bl	4658 <_puts_r>
    4724:	bd10      	pop	{r4, pc}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	20000040 	.word	0x20000040

0000472c <iscanf>:
    472c:	b40f      	push	{r0, r1, r2, r3}
    472e:	4b0b      	ldr	r3, [pc, #44]	; (475c <iscanf+0x30>)
    4730:	b513      	push	{r0, r1, r4, lr}
    4732:	681c      	ldr	r4, [r3, #0]
    4734:	2c00      	cmp	r4, #0
    4736:	d005      	beq.n	4744 <iscanf+0x18>
    4738:	69a3      	ldr	r3, [r4, #24]
    473a:	2b00      	cmp	r3, #0
    473c:	d102      	bne.n	4744 <iscanf+0x18>
    473e:	0020      	movs	r0, r4
    4740:	f000 fba6 	bl	4e90 <__sinit>
    4744:	ab05      	add	r3, sp, #20
    4746:	9a04      	ldr	r2, [sp, #16]
    4748:	6861      	ldr	r1, [r4, #4]
    474a:	0020      	movs	r0, r4
    474c:	9301      	str	r3, [sp, #4]
    474e:	f001 f9e3 	bl	5b18 <_vfiscanf_r>
    4752:	bc16      	pop	{r1, r2, r4}
    4754:	bc08      	pop	{r3}
    4756:	b004      	add	sp, #16
    4758:	4718      	bx	r3
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	20000040 	.word	0x20000040

00004760 <setbuf>:
    4760:	424a      	negs	r2, r1
    4762:	414a      	adcs	r2, r1
    4764:	2380      	movs	r3, #128	; 0x80
    4766:	b510      	push	{r4, lr}
    4768:	0052      	lsls	r2, r2, #1
    476a:	00db      	lsls	r3, r3, #3
    476c:	f000 f802 	bl	4774 <setvbuf>
    4770:	bd10      	pop	{r4, pc}
	...

00004774 <setvbuf>:
    4774:	b5f0      	push	{r4, r5, r6, r7, lr}
    4776:	001d      	movs	r5, r3
    4778:	4b4f      	ldr	r3, [pc, #316]	; (48b8 <setvbuf+0x144>)
    477a:	b085      	sub	sp, #20
    477c:	681e      	ldr	r6, [r3, #0]
    477e:	0004      	movs	r4, r0
    4780:	000f      	movs	r7, r1
    4782:	9200      	str	r2, [sp, #0]
    4784:	2e00      	cmp	r6, #0
    4786:	d005      	beq.n	4794 <setvbuf+0x20>
    4788:	69b3      	ldr	r3, [r6, #24]
    478a:	2b00      	cmp	r3, #0
    478c:	d102      	bne.n	4794 <setvbuf+0x20>
    478e:	0030      	movs	r0, r6
    4790:	f000 fb7e 	bl	4e90 <__sinit>
    4794:	4b49      	ldr	r3, [pc, #292]	; (48bc <setvbuf+0x148>)
    4796:	429c      	cmp	r4, r3
    4798:	d150      	bne.n	483c <setvbuf+0xc8>
    479a:	6874      	ldr	r4, [r6, #4]
    479c:	9b00      	ldr	r3, [sp, #0]
    479e:	2b02      	cmp	r3, #2
    47a0:	d005      	beq.n	47ae <setvbuf+0x3a>
    47a2:	2b01      	cmp	r3, #1
    47a4:	d900      	bls.n	47a8 <setvbuf+0x34>
    47a6:	e084      	b.n	48b2 <setvbuf+0x13e>
    47a8:	2d00      	cmp	r5, #0
    47aa:	da00      	bge.n	47ae <setvbuf+0x3a>
    47ac:	e081      	b.n	48b2 <setvbuf+0x13e>
    47ae:	0021      	movs	r1, r4
    47b0:	0030      	movs	r0, r6
    47b2:	f000 faeb 	bl	4d8c <_fflush_r>
    47b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    47b8:	2900      	cmp	r1, #0
    47ba:	d008      	beq.n	47ce <setvbuf+0x5a>
    47bc:	0023      	movs	r3, r4
    47be:	3344      	adds	r3, #68	; 0x44
    47c0:	4299      	cmp	r1, r3
    47c2:	d002      	beq.n	47ca <setvbuf+0x56>
    47c4:	0030      	movs	r0, r6
    47c6:	f000 fcad 	bl	5124 <_free_r>
    47ca:	2300      	movs	r3, #0
    47cc:	6363      	str	r3, [r4, #52]	; 0x34
    47ce:	2300      	movs	r3, #0
    47d0:	61a3      	str	r3, [r4, #24]
    47d2:	6063      	str	r3, [r4, #4]
    47d4:	89a3      	ldrh	r3, [r4, #12]
    47d6:	061b      	lsls	r3, r3, #24
    47d8:	d503      	bpl.n	47e2 <setvbuf+0x6e>
    47da:	6921      	ldr	r1, [r4, #16]
    47dc:	0030      	movs	r0, r6
    47de:	f000 fca1 	bl	5124 <_free_r>
    47e2:	89a3      	ldrh	r3, [r4, #12]
    47e4:	4a36      	ldr	r2, [pc, #216]	; (48c0 <setvbuf+0x14c>)
    47e6:	4013      	ands	r3, r2
    47e8:	81a3      	strh	r3, [r4, #12]
    47ea:	9b00      	ldr	r3, [sp, #0]
    47ec:	2b02      	cmp	r3, #2
    47ee:	d05a      	beq.n	48a6 <setvbuf+0x132>
    47f0:	ab03      	add	r3, sp, #12
    47f2:	aa02      	add	r2, sp, #8
    47f4:	0021      	movs	r1, r4
    47f6:	0030      	movs	r0, r6
    47f8:	f000 fc0c 	bl	5014 <__swhatbuf_r>
    47fc:	89a3      	ldrh	r3, [r4, #12]
    47fe:	4318      	orrs	r0, r3
    4800:	81a0      	strh	r0, [r4, #12]
    4802:	2d00      	cmp	r5, #0
    4804:	d124      	bne.n	4850 <setvbuf+0xdc>
    4806:	9d02      	ldr	r5, [sp, #8]
    4808:	0028      	movs	r0, r5
    480a:	f000 fc6f 	bl	50ec <malloc>
    480e:	9501      	str	r5, [sp, #4]
    4810:	1e07      	subs	r7, r0, #0
    4812:	d142      	bne.n	489a <setvbuf+0x126>
    4814:	9b02      	ldr	r3, [sp, #8]
    4816:	9301      	str	r3, [sp, #4]
    4818:	42ab      	cmp	r3, r5
    481a:	d139      	bne.n	4890 <setvbuf+0x11c>
    481c:	2001      	movs	r0, #1
    481e:	4240      	negs	r0, r0
    4820:	2302      	movs	r3, #2
    4822:	89a2      	ldrh	r2, [r4, #12]
    4824:	4313      	orrs	r3, r2
    4826:	81a3      	strh	r3, [r4, #12]
    4828:	2300      	movs	r3, #0
    482a:	60a3      	str	r3, [r4, #8]
    482c:	0023      	movs	r3, r4
    482e:	3347      	adds	r3, #71	; 0x47
    4830:	6023      	str	r3, [r4, #0]
    4832:	6123      	str	r3, [r4, #16]
    4834:	2301      	movs	r3, #1
    4836:	6163      	str	r3, [r4, #20]
    4838:	b005      	add	sp, #20
    483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    483c:	4b21      	ldr	r3, [pc, #132]	; (48c4 <setvbuf+0x150>)
    483e:	429c      	cmp	r4, r3
    4840:	d101      	bne.n	4846 <setvbuf+0xd2>
    4842:	68b4      	ldr	r4, [r6, #8]
    4844:	e7aa      	b.n	479c <setvbuf+0x28>
    4846:	4b20      	ldr	r3, [pc, #128]	; (48c8 <setvbuf+0x154>)
    4848:	429c      	cmp	r4, r3
    484a:	d1a7      	bne.n	479c <setvbuf+0x28>
    484c:	68f4      	ldr	r4, [r6, #12]
    484e:	e7a5      	b.n	479c <setvbuf+0x28>
    4850:	2f00      	cmp	r7, #0
    4852:	d0d9      	beq.n	4808 <setvbuf+0x94>
    4854:	69b3      	ldr	r3, [r6, #24]
    4856:	2b00      	cmp	r3, #0
    4858:	d102      	bne.n	4860 <setvbuf+0xec>
    485a:	0030      	movs	r0, r6
    485c:	f000 fb18 	bl	4e90 <__sinit>
    4860:	9b00      	ldr	r3, [sp, #0]
    4862:	2b01      	cmp	r3, #1
    4864:	d103      	bne.n	486e <setvbuf+0xfa>
    4866:	89a3      	ldrh	r3, [r4, #12]
    4868:	9a00      	ldr	r2, [sp, #0]
    486a:	431a      	orrs	r2, r3
    486c:	81a2      	strh	r2, [r4, #12]
    486e:	2008      	movs	r0, #8
    4870:	89a3      	ldrh	r3, [r4, #12]
    4872:	6027      	str	r7, [r4, #0]
    4874:	6127      	str	r7, [r4, #16]
    4876:	6165      	str	r5, [r4, #20]
    4878:	4018      	ands	r0, r3
    487a:	d018      	beq.n	48ae <setvbuf+0x13a>
    487c:	2001      	movs	r0, #1
    487e:	4018      	ands	r0, r3
    4880:	2300      	movs	r3, #0
    4882:	4298      	cmp	r0, r3
    4884:	d011      	beq.n	48aa <setvbuf+0x136>
    4886:	426d      	negs	r5, r5
    4888:	60a3      	str	r3, [r4, #8]
    488a:	61a5      	str	r5, [r4, #24]
    488c:	0018      	movs	r0, r3
    488e:	e7d3      	b.n	4838 <setvbuf+0xc4>
    4890:	9801      	ldr	r0, [sp, #4]
    4892:	f000 fc2b 	bl	50ec <malloc>
    4896:	1e07      	subs	r7, r0, #0
    4898:	d0c0      	beq.n	481c <setvbuf+0xa8>
    489a:	2380      	movs	r3, #128	; 0x80
    489c:	89a2      	ldrh	r2, [r4, #12]
    489e:	9d01      	ldr	r5, [sp, #4]
    48a0:	4313      	orrs	r3, r2
    48a2:	81a3      	strh	r3, [r4, #12]
    48a4:	e7d6      	b.n	4854 <setvbuf+0xe0>
    48a6:	2000      	movs	r0, #0
    48a8:	e7ba      	b.n	4820 <setvbuf+0xac>
    48aa:	60a5      	str	r5, [r4, #8]
    48ac:	e7c4      	b.n	4838 <setvbuf+0xc4>
    48ae:	60a0      	str	r0, [r4, #8]
    48b0:	e7c2      	b.n	4838 <setvbuf+0xc4>
    48b2:	2001      	movs	r0, #1
    48b4:	4240      	negs	r0, r0
    48b6:	e7bf      	b.n	4838 <setvbuf+0xc4>
    48b8:	20000040 	.word	0x20000040
    48bc:	00006b94 	.word	0x00006b94
    48c0:	fffff35c 	.word	0xfffff35c
    48c4:	00006bb4 	.word	0x00006bb4
    48c8:	00006b74 	.word	0x00006b74

000048cc <strcmp>:
    48cc:	7802      	ldrb	r2, [r0, #0]
    48ce:	780b      	ldrb	r3, [r1, #0]
    48d0:	2a00      	cmp	r2, #0
    48d2:	d003      	beq.n	48dc <strcmp+0x10>
    48d4:	3001      	adds	r0, #1
    48d6:	3101      	adds	r1, #1
    48d8:	429a      	cmp	r2, r3
    48da:	d0f7      	beq.n	48cc <strcmp>
    48dc:	1ad0      	subs	r0, r2, r3
    48de:	4770      	bx	lr

000048e0 <strtok>:
    48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e2:	4b12      	ldr	r3, [pc, #72]	; (492c <strtok+0x4c>)
    48e4:	0006      	movs	r6, r0
    48e6:	681d      	ldr	r5, [r3, #0]
    48e8:	000f      	movs	r7, r1
    48ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
    48ec:	2c00      	cmp	r4, #0
    48ee:	d116      	bne.n	491e <strtok+0x3e>
    48f0:	2050      	movs	r0, #80	; 0x50
    48f2:	f000 fbfb 	bl	50ec <malloc>
    48f6:	65a8      	str	r0, [r5, #88]	; 0x58
    48f8:	6004      	str	r4, [r0, #0]
    48fa:	6044      	str	r4, [r0, #4]
    48fc:	6084      	str	r4, [r0, #8]
    48fe:	60c4      	str	r4, [r0, #12]
    4900:	6104      	str	r4, [r0, #16]
    4902:	6144      	str	r4, [r0, #20]
    4904:	6184      	str	r4, [r0, #24]
    4906:	6284      	str	r4, [r0, #40]	; 0x28
    4908:	62c4      	str	r4, [r0, #44]	; 0x2c
    490a:	6304      	str	r4, [r0, #48]	; 0x30
    490c:	6344      	str	r4, [r0, #52]	; 0x34
    490e:	6384      	str	r4, [r0, #56]	; 0x38
    4910:	63c4      	str	r4, [r0, #60]	; 0x3c
    4912:	6404      	str	r4, [r0, #64]	; 0x40
    4914:	6444      	str	r4, [r0, #68]	; 0x44
    4916:	6484      	str	r4, [r0, #72]	; 0x48
    4918:	64c4      	str	r4, [r0, #76]	; 0x4c
    491a:	7704      	strb	r4, [r0, #28]
    491c:	6244      	str	r4, [r0, #36]	; 0x24
    491e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    4920:	0039      	movs	r1, r7
    4922:	0030      	movs	r0, r6
    4924:	2301      	movs	r3, #1
    4926:	f000 f803 	bl	4930 <__strtok_r>
    492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    492c:	20000040 	.word	0x20000040

00004930 <__strtok_r>:
    4930:	b5f0      	push	{r4, r5, r6, r7, lr}
    4932:	2800      	cmp	r0, #0
    4934:	d104      	bne.n	4940 <__strtok_r+0x10>
    4936:	6810      	ldr	r0, [r2, #0]
    4938:	2800      	cmp	r0, #0
    493a:	d101      	bne.n	4940 <__strtok_r+0x10>
    493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    493e:	0020      	movs	r0, r4
    4940:	000e      	movs	r6, r1
    4942:	7805      	ldrb	r5, [r0, #0]
    4944:	1c44      	adds	r4, r0, #1
    4946:	7837      	ldrb	r7, [r6, #0]
    4948:	2f00      	cmp	r7, #0
    494a:	d104      	bne.n	4956 <__strtok_r+0x26>
    494c:	2d00      	cmp	r5, #0
    494e:	d110      	bne.n	4972 <__strtok_r+0x42>
    4950:	6015      	str	r5, [r2, #0]
    4952:	0028      	movs	r0, r5
    4954:	e7f2      	b.n	493c <__strtok_r+0xc>
    4956:	3601      	adds	r6, #1
    4958:	42bd      	cmp	r5, r7
    495a:	d1f4      	bne.n	4946 <__strtok_r+0x16>
    495c:	2b00      	cmp	r3, #0
    495e:	d1ee      	bne.n	493e <__strtok_r+0xe>
    4960:	6014      	str	r4, [r2, #0]
    4962:	7003      	strb	r3, [r0, #0]
    4964:	e7ea      	b.n	493c <__strtok_r+0xc>
    4966:	0033      	movs	r3, r6
    4968:	e00e      	b.n	4988 <__strtok_r+0x58>
    496a:	3501      	adds	r5, #1
    496c:	001c      	movs	r4, r3
    496e:	2f00      	cmp	r7, #0
    4970:	d102      	bne.n	4978 <__strtok_r+0x48>
    4972:	000d      	movs	r5, r1
    4974:	7826      	ldrb	r6, [r4, #0]
    4976:	1c63      	adds	r3, r4, #1
    4978:	782f      	ldrb	r7, [r5, #0]
    497a:	42be      	cmp	r6, r7
    497c:	d1f5      	bne.n	496a <__strtok_r+0x3a>
    497e:	2e00      	cmp	r6, #0
    4980:	d0f1      	beq.n	4966 <__strtok_r+0x36>
    4982:	2400      	movs	r4, #0
    4984:	1e59      	subs	r1, r3, #1
    4986:	700c      	strb	r4, [r1, #0]
    4988:	6013      	str	r3, [r2, #0]
    498a:	e7d7      	b.n	493c <__strtok_r+0xc>

0000498c <_strtol_l.isra.0>:
    498c:	b5f0      	push	{r4, r5, r6, r7, lr}
    498e:	001f      	movs	r7, r3
    4990:	000e      	movs	r6, r1
    4992:	b087      	sub	sp, #28
    4994:	9005      	str	r0, [sp, #20]
    4996:	9103      	str	r1, [sp, #12]
    4998:	9202      	str	r2, [sp, #8]
    499a:	980c      	ldr	r0, [sp, #48]	; 0x30
    499c:	7834      	ldrb	r4, [r6, #0]
    499e:	f000 fb28 	bl	4ff2 <__locale_ctype_ptr_l>
    49a2:	2208      	movs	r2, #8
    49a4:	1900      	adds	r0, r0, r4
    49a6:	7843      	ldrb	r3, [r0, #1]
    49a8:	1c75      	adds	r5, r6, #1
    49aa:	4013      	ands	r3, r2
    49ac:	d10c      	bne.n	49c8 <_strtol_l.isra.0+0x3c>
    49ae:	2c2d      	cmp	r4, #45	; 0x2d
    49b0:	d10c      	bne.n	49cc <_strtol_l.isra.0+0x40>
    49b2:	3301      	adds	r3, #1
    49b4:	782c      	ldrb	r4, [r5, #0]
    49b6:	9301      	str	r3, [sp, #4]
    49b8:	1cb5      	adds	r5, r6, #2
    49ba:	2f00      	cmp	r7, #0
    49bc:	d00c      	beq.n	49d8 <_strtol_l.isra.0+0x4c>
    49be:	2f10      	cmp	r7, #16
    49c0:	d114      	bne.n	49ec <_strtol_l.isra.0+0x60>
    49c2:	2c30      	cmp	r4, #48	; 0x30
    49c4:	d00a      	beq.n	49dc <_strtol_l.isra.0+0x50>
    49c6:	e011      	b.n	49ec <_strtol_l.isra.0+0x60>
    49c8:	002e      	movs	r6, r5
    49ca:	e7e6      	b.n	499a <_strtol_l.isra.0+0xe>
    49cc:	9301      	str	r3, [sp, #4]
    49ce:	2c2b      	cmp	r4, #43	; 0x2b
    49d0:	d1f3      	bne.n	49ba <_strtol_l.isra.0+0x2e>
    49d2:	782c      	ldrb	r4, [r5, #0]
    49d4:	1cb5      	adds	r5, r6, #2
    49d6:	e7f0      	b.n	49ba <_strtol_l.isra.0+0x2e>
    49d8:	2c30      	cmp	r4, #48	; 0x30
    49da:	d12f      	bne.n	4a3c <_strtol_l.isra.0+0xb0>
    49dc:	2220      	movs	r2, #32
    49de:	782b      	ldrb	r3, [r5, #0]
    49e0:	4393      	bics	r3, r2
    49e2:	2b58      	cmp	r3, #88	; 0x58
    49e4:	d151      	bne.n	4a8a <_strtol_l.isra.0+0xfe>
    49e6:	2710      	movs	r7, #16
    49e8:	786c      	ldrb	r4, [r5, #1]
    49ea:	3502      	adds	r5, #2
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	4a29      	ldr	r2, [pc, #164]	; (4a94 <_strtol_l.isra.0+0x108>)
    49f0:	0039      	movs	r1, r7
    49f2:	189e      	adds	r6, r3, r2
    49f4:	0030      	movs	r0, r6
    49f6:	f7fe f945 	bl	2c84 <__aeabi_uidivmod>
    49fa:	0030      	movs	r0, r6
    49fc:	9104      	str	r1, [sp, #16]
    49fe:	0039      	movs	r1, r7
    4a00:	f7fe f8ba 	bl	2b78 <__udivsi3>
    4a04:	2101      	movs	r1, #1
    4a06:	2300      	movs	r3, #0
    4a08:	4249      	negs	r1, r1
    4a0a:	0002      	movs	r2, r0
    4a0c:	468c      	mov	ip, r1
    4a0e:	0018      	movs	r0, r3
    4a10:	0021      	movs	r1, r4
    4a12:	3930      	subs	r1, #48	; 0x30
    4a14:	2909      	cmp	r1, #9
    4a16:	d813      	bhi.n	4a40 <_strtol_l.isra.0+0xb4>
    4a18:	000c      	movs	r4, r1
    4a1a:	42a7      	cmp	r7, r4
    4a1c:	dd1c      	ble.n	4a58 <_strtol_l.isra.0+0xcc>
    4a1e:	1c59      	adds	r1, r3, #1
    4a20:	d009      	beq.n	4a36 <_strtol_l.isra.0+0xaa>
    4a22:	4663      	mov	r3, ip
    4a24:	4282      	cmp	r2, r0
    4a26:	d306      	bcc.n	4a36 <_strtol_l.isra.0+0xaa>
    4a28:	d102      	bne.n	4a30 <_strtol_l.isra.0+0xa4>
    4a2a:	9904      	ldr	r1, [sp, #16]
    4a2c:	42a1      	cmp	r1, r4
    4a2e:	db02      	blt.n	4a36 <_strtol_l.isra.0+0xaa>
    4a30:	2301      	movs	r3, #1
    4a32:	4378      	muls	r0, r7
    4a34:	1820      	adds	r0, r4, r0
    4a36:	782c      	ldrb	r4, [r5, #0]
    4a38:	3501      	adds	r5, #1
    4a3a:	e7e9      	b.n	4a10 <_strtol_l.isra.0+0x84>
    4a3c:	270a      	movs	r7, #10
    4a3e:	e7d5      	b.n	49ec <_strtol_l.isra.0+0x60>
    4a40:	0021      	movs	r1, r4
    4a42:	3941      	subs	r1, #65	; 0x41
    4a44:	2919      	cmp	r1, #25
    4a46:	d801      	bhi.n	4a4c <_strtol_l.isra.0+0xc0>
    4a48:	3c37      	subs	r4, #55	; 0x37
    4a4a:	e7e6      	b.n	4a1a <_strtol_l.isra.0+0x8e>
    4a4c:	0021      	movs	r1, r4
    4a4e:	3961      	subs	r1, #97	; 0x61
    4a50:	2919      	cmp	r1, #25
    4a52:	d801      	bhi.n	4a58 <_strtol_l.isra.0+0xcc>
    4a54:	3c57      	subs	r4, #87	; 0x57
    4a56:	e7e0      	b.n	4a1a <_strtol_l.isra.0+0x8e>
    4a58:	1c5a      	adds	r2, r3, #1
    4a5a:	d108      	bne.n	4a6e <_strtol_l.isra.0+0xe2>
    4a5c:	9a05      	ldr	r2, [sp, #20]
    4a5e:	3323      	adds	r3, #35	; 0x23
    4a60:	6013      	str	r3, [r2, #0]
    4a62:	9b02      	ldr	r3, [sp, #8]
    4a64:	0030      	movs	r0, r6
    4a66:	2b00      	cmp	r3, #0
    4a68:	d10b      	bne.n	4a82 <_strtol_l.isra.0+0xf6>
    4a6a:	b007      	add	sp, #28
    4a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a6e:	9a01      	ldr	r2, [sp, #4]
    4a70:	2a00      	cmp	r2, #0
    4a72:	d000      	beq.n	4a76 <_strtol_l.isra.0+0xea>
    4a74:	4240      	negs	r0, r0
    4a76:	9a02      	ldr	r2, [sp, #8]
    4a78:	2a00      	cmp	r2, #0
    4a7a:	d0f6      	beq.n	4a6a <_strtol_l.isra.0+0xde>
    4a7c:	9a03      	ldr	r2, [sp, #12]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d000      	beq.n	4a84 <_strtol_l.isra.0+0xf8>
    4a82:	1e6a      	subs	r2, r5, #1
    4a84:	9b02      	ldr	r3, [sp, #8]
    4a86:	601a      	str	r2, [r3, #0]
    4a88:	e7ef      	b.n	4a6a <_strtol_l.isra.0+0xde>
    4a8a:	2430      	movs	r4, #48	; 0x30
    4a8c:	2f00      	cmp	r7, #0
    4a8e:	d1ad      	bne.n	49ec <_strtol_l.isra.0+0x60>
    4a90:	3708      	adds	r7, #8
    4a92:	e7ab      	b.n	49ec <_strtol_l.isra.0+0x60>
    4a94:	7fffffff 	.word	0x7fffffff

00004a98 <_strtol_r>:
    4a98:	b513      	push	{r0, r1, r4, lr}
    4a9a:	4c05      	ldr	r4, [pc, #20]	; (4ab0 <_strtol_r+0x18>)
    4a9c:	6824      	ldr	r4, [r4, #0]
    4a9e:	6a24      	ldr	r4, [r4, #32]
    4aa0:	2c00      	cmp	r4, #0
    4aa2:	d100      	bne.n	4aa6 <_strtol_r+0xe>
    4aa4:	4c03      	ldr	r4, [pc, #12]	; (4ab4 <_strtol_r+0x1c>)
    4aa6:	9400      	str	r4, [sp, #0]
    4aa8:	f7ff ff70 	bl	498c <_strtol_l.isra.0>
    4aac:	bd16      	pop	{r1, r2, r4, pc}
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	20000040 	.word	0x20000040
    4ab4:	200000a4 	.word	0x200000a4

00004ab8 <strtol>:
    4ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4aba:	0013      	movs	r3, r2
    4abc:	4a06      	ldr	r2, [pc, #24]	; (4ad8 <strtol+0x20>)
    4abe:	0005      	movs	r5, r0
    4ac0:	6810      	ldr	r0, [r2, #0]
    4ac2:	6a04      	ldr	r4, [r0, #32]
    4ac4:	2c00      	cmp	r4, #0
    4ac6:	d100      	bne.n	4aca <strtol+0x12>
    4ac8:	4c04      	ldr	r4, [pc, #16]	; (4adc <strtol+0x24>)
    4aca:	000a      	movs	r2, r1
    4acc:	9400      	str	r4, [sp, #0]
    4ace:	0029      	movs	r1, r5
    4ad0:	f7ff ff5c 	bl	498c <_strtol_l.isra.0>
    4ad4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4ad6:	46c0      	nop			; (mov r8, r8)
    4ad8:	20000040 	.word	0x20000040
    4adc:	200000a4 	.word	0x200000a4

00004ae0 <__swbuf_r>:
    4ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ae2:	0005      	movs	r5, r0
    4ae4:	000e      	movs	r6, r1
    4ae6:	0014      	movs	r4, r2
    4ae8:	2800      	cmp	r0, #0
    4aea:	d004      	beq.n	4af6 <__swbuf_r+0x16>
    4aec:	6983      	ldr	r3, [r0, #24]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d101      	bne.n	4af6 <__swbuf_r+0x16>
    4af2:	f000 f9cd 	bl	4e90 <__sinit>
    4af6:	4b22      	ldr	r3, [pc, #136]	; (4b80 <__swbuf_r+0xa0>)
    4af8:	429c      	cmp	r4, r3
    4afa:	d12d      	bne.n	4b58 <__swbuf_r+0x78>
    4afc:	686c      	ldr	r4, [r5, #4]
    4afe:	69a3      	ldr	r3, [r4, #24]
    4b00:	60a3      	str	r3, [r4, #8]
    4b02:	89a3      	ldrh	r3, [r4, #12]
    4b04:	071b      	lsls	r3, r3, #28
    4b06:	d531      	bpl.n	4b6c <__swbuf_r+0x8c>
    4b08:	6923      	ldr	r3, [r4, #16]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d02e      	beq.n	4b6c <__swbuf_r+0x8c>
    4b0e:	6823      	ldr	r3, [r4, #0]
    4b10:	6922      	ldr	r2, [r4, #16]
    4b12:	b2f7      	uxtb	r7, r6
    4b14:	1a98      	subs	r0, r3, r2
    4b16:	6963      	ldr	r3, [r4, #20]
    4b18:	b2f6      	uxtb	r6, r6
    4b1a:	4298      	cmp	r0, r3
    4b1c:	db05      	blt.n	4b2a <__swbuf_r+0x4a>
    4b1e:	0021      	movs	r1, r4
    4b20:	0028      	movs	r0, r5
    4b22:	f000 f933 	bl	4d8c <_fflush_r>
    4b26:	2800      	cmp	r0, #0
    4b28:	d126      	bne.n	4b78 <__swbuf_r+0x98>
    4b2a:	68a3      	ldr	r3, [r4, #8]
    4b2c:	3001      	adds	r0, #1
    4b2e:	3b01      	subs	r3, #1
    4b30:	60a3      	str	r3, [r4, #8]
    4b32:	6823      	ldr	r3, [r4, #0]
    4b34:	1c5a      	adds	r2, r3, #1
    4b36:	6022      	str	r2, [r4, #0]
    4b38:	701f      	strb	r7, [r3, #0]
    4b3a:	6963      	ldr	r3, [r4, #20]
    4b3c:	4298      	cmp	r0, r3
    4b3e:	d004      	beq.n	4b4a <__swbuf_r+0x6a>
    4b40:	89a3      	ldrh	r3, [r4, #12]
    4b42:	07db      	lsls	r3, r3, #31
    4b44:	d51a      	bpl.n	4b7c <__swbuf_r+0x9c>
    4b46:	2e0a      	cmp	r6, #10
    4b48:	d118      	bne.n	4b7c <__swbuf_r+0x9c>
    4b4a:	0021      	movs	r1, r4
    4b4c:	0028      	movs	r0, r5
    4b4e:	f000 f91d 	bl	4d8c <_fflush_r>
    4b52:	2800      	cmp	r0, #0
    4b54:	d012      	beq.n	4b7c <__swbuf_r+0x9c>
    4b56:	e00f      	b.n	4b78 <__swbuf_r+0x98>
    4b58:	4b0a      	ldr	r3, [pc, #40]	; (4b84 <__swbuf_r+0xa4>)
    4b5a:	429c      	cmp	r4, r3
    4b5c:	d101      	bne.n	4b62 <__swbuf_r+0x82>
    4b5e:	68ac      	ldr	r4, [r5, #8]
    4b60:	e7cd      	b.n	4afe <__swbuf_r+0x1e>
    4b62:	4b09      	ldr	r3, [pc, #36]	; (4b88 <__swbuf_r+0xa8>)
    4b64:	429c      	cmp	r4, r3
    4b66:	d1ca      	bne.n	4afe <__swbuf_r+0x1e>
    4b68:	68ec      	ldr	r4, [r5, #12]
    4b6a:	e7c8      	b.n	4afe <__swbuf_r+0x1e>
    4b6c:	0021      	movs	r1, r4
    4b6e:	0028      	movs	r0, r5
    4b70:	f000 f80c 	bl	4b8c <__swsetup_r>
    4b74:	2800      	cmp	r0, #0
    4b76:	d0ca      	beq.n	4b0e <__swbuf_r+0x2e>
    4b78:	2601      	movs	r6, #1
    4b7a:	4276      	negs	r6, r6
    4b7c:	0030      	movs	r0, r6
    4b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b80:	00006b94 	.word	0x00006b94
    4b84:	00006bb4 	.word	0x00006bb4
    4b88:	00006b74 	.word	0x00006b74

00004b8c <__swsetup_r>:
    4b8c:	4b36      	ldr	r3, [pc, #216]	; (4c68 <__swsetup_r+0xdc>)
    4b8e:	b570      	push	{r4, r5, r6, lr}
    4b90:	681d      	ldr	r5, [r3, #0]
    4b92:	0006      	movs	r6, r0
    4b94:	000c      	movs	r4, r1
    4b96:	2d00      	cmp	r5, #0
    4b98:	d005      	beq.n	4ba6 <__swsetup_r+0x1a>
    4b9a:	69ab      	ldr	r3, [r5, #24]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d102      	bne.n	4ba6 <__swsetup_r+0x1a>
    4ba0:	0028      	movs	r0, r5
    4ba2:	f000 f975 	bl	4e90 <__sinit>
    4ba6:	4b31      	ldr	r3, [pc, #196]	; (4c6c <__swsetup_r+0xe0>)
    4ba8:	429c      	cmp	r4, r3
    4baa:	d10f      	bne.n	4bcc <__swsetup_r+0x40>
    4bac:	686c      	ldr	r4, [r5, #4]
    4bae:	230c      	movs	r3, #12
    4bb0:	5ee2      	ldrsh	r2, [r4, r3]
    4bb2:	b293      	uxth	r3, r2
    4bb4:	0719      	lsls	r1, r3, #28
    4bb6:	d42d      	bmi.n	4c14 <__swsetup_r+0x88>
    4bb8:	06d9      	lsls	r1, r3, #27
    4bba:	d411      	bmi.n	4be0 <__swsetup_r+0x54>
    4bbc:	2309      	movs	r3, #9
    4bbe:	2001      	movs	r0, #1
    4bc0:	6033      	str	r3, [r6, #0]
    4bc2:	3337      	adds	r3, #55	; 0x37
    4bc4:	4313      	orrs	r3, r2
    4bc6:	81a3      	strh	r3, [r4, #12]
    4bc8:	4240      	negs	r0, r0
    4bca:	bd70      	pop	{r4, r5, r6, pc}
    4bcc:	4b28      	ldr	r3, [pc, #160]	; (4c70 <__swsetup_r+0xe4>)
    4bce:	429c      	cmp	r4, r3
    4bd0:	d101      	bne.n	4bd6 <__swsetup_r+0x4a>
    4bd2:	68ac      	ldr	r4, [r5, #8]
    4bd4:	e7eb      	b.n	4bae <__swsetup_r+0x22>
    4bd6:	4b27      	ldr	r3, [pc, #156]	; (4c74 <__swsetup_r+0xe8>)
    4bd8:	429c      	cmp	r4, r3
    4bda:	d1e8      	bne.n	4bae <__swsetup_r+0x22>
    4bdc:	68ec      	ldr	r4, [r5, #12]
    4bde:	e7e6      	b.n	4bae <__swsetup_r+0x22>
    4be0:	075b      	lsls	r3, r3, #29
    4be2:	d513      	bpl.n	4c0c <__swsetup_r+0x80>
    4be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4be6:	2900      	cmp	r1, #0
    4be8:	d008      	beq.n	4bfc <__swsetup_r+0x70>
    4bea:	0023      	movs	r3, r4
    4bec:	3344      	adds	r3, #68	; 0x44
    4bee:	4299      	cmp	r1, r3
    4bf0:	d002      	beq.n	4bf8 <__swsetup_r+0x6c>
    4bf2:	0030      	movs	r0, r6
    4bf4:	f000 fa96 	bl	5124 <_free_r>
    4bf8:	2300      	movs	r3, #0
    4bfa:	6363      	str	r3, [r4, #52]	; 0x34
    4bfc:	2224      	movs	r2, #36	; 0x24
    4bfe:	89a3      	ldrh	r3, [r4, #12]
    4c00:	4393      	bics	r3, r2
    4c02:	81a3      	strh	r3, [r4, #12]
    4c04:	2300      	movs	r3, #0
    4c06:	6063      	str	r3, [r4, #4]
    4c08:	6923      	ldr	r3, [r4, #16]
    4c0a:	6023      	str	r3, [r4, #0]
    4c0c:	2308      	movs	r3, #8
    4c0e:	89a2      	ldrh	r2, [r4, #12]
    4c10:	4313      	orrs	r3, r2
    4c12:	81a3      	strh	r3, [r4, #12]
    4c14:	6923      	ldr	r3, [r4, #16]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d10b      	bne.n	4c32 <__swsetup_r+0xa6>
    4c1a:	21a0      	movs	r1, #160	; 0xa0
    4c1c:	2280      	movs	r2, #128	; 0x80
    4c1e:	89a3      	ldrh	r3, [r4, #12]
    4c20:	0089      	lsls	r1, r1, #2
    4c22:	0092      	lsls	r2, r2, #2
    4c24:	400b      	ands	r3, r1
    4c26:	4293      	cmp	r3, r2
    4c28:	d003      	beq.n	4c32 <__swsetup_r+0xa6>
    4c2a:	0021      	movs	r1, r4
    4c2c:	0030      	movs	r0, r6
    4c2e:	f000 fa19 	bl	5064 <__smakebuf_r>
    4c32:	2301      	movs	r3, #1
    4c34:	89a2      	ldrh	r2, [r4, #12]
    4c36:	4013      	ands	r3, r2
    4c38:	d011      	beq.n	4c5e <__swsetup_r+0xd2>
    4c3a:	2300      	movs	r3, #0
    4c3c:	60a3      	str	r3, [r4, #8]
    4c3e:	6963      	ldr	r3, [r4, #20]
    4c40:	425b      	negs	r3, r3
    4c42:	61a3      	str	r3, [r4, #24]
    4c44:	2000      	movs	r0, #0
    4c46:	6923      	ldr	r3, [r4, #16]
    4c48:	4283      	cmp	r3, r0
    4c4a:	d1be      	bne.n	4bca <__swsetup_r+0x3e>
    4c4c:	230c      	movs	r3, #12
    4c4e:	5ee2      	ldrsh	r2, [r4, r3]
    4c50:	0613      	lsls	r3, r2, #24
    4c52:	d5ba      	bpl.n	4bca <__swsetup_r+0x3e>
    4c54:	2340      	movs	r3, #64	; 0x40
    4c56:	4313      	orrs	r3, r2
    4c58:	81a3      	strh	r3, [r4, #12]
    4c5a:	3801      	subs	r0, #1
    4c5c:	e7b5      	b.n	4bca <__swsetup_r+0x3e>
    4c5e:	0792      	lsls	r2, r2, #30
    4c60:	d400      	bmi.n	4c64 <__swsetup_r+0xd8>
    4c62:	6963      	ldr	r3, [r4, #20]
    4c64:	60a3      	str	r3, [r4, #8]
    4c66:	e7ed      	b.n	4c44 <__swsetup_r+0xb8>
    4c68:	20000040 	.word	0x20000040
    4c6c:	00006b94 	.word	0x00006b94
    4c70:	00006bb4 	.word	0x00006bb4
    4c74:	00006b74 	.word	0x00006b74

00004c78 <__sflush_r>:
    4c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c7a:	898a      	ldrh	r2, [r1, #12]
    4c7c:	0005      	movs	r5, r0
    4c7e:	000c      	movs	r4, r1
    4c80:	0713      	lsls	r3, r2, #28
    4c82:	d460      	bmi.n	4d46 <__sflush_r+0xce>
    4c84:	684b      	ldr	r3, [r1, #4]
    4c86:	2b00      	cmp	r3, #0
    4c88:	dc04      	bgt.n	4c94 <__sflush_r+0x1c>
    4c8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	dc01      	bgt.n	4c94 <__sflush_r+0x1c>
    4c90:	2000      	movs	r0, #0
    4c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4c94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4c96:	2f00      	cmp	r7, #0
    4c98:	d0fa      	beq.n	4c90 <__sflush_r+0x18>
    4c9a:	2300      	movs	r3, #0
    4c9c:	682e      	ldr	r6, [r5, #0]
    4c9e:	602b      	str	r3, [r5, #0]
    4ca0:	2380      	movs	r3, #128	; 0x80
    4ca2:	015b      	lsls	r3, r3, #5
    4ca4:	401a      	ands	r2, r3
    4ca6:	d034      	beq.n	4d12 <__sflush_r+0x9a>
    4ca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4caa:	89a3      	ldrh	r3, [r4, #12]
    4cac:	075b      	lsls	r3, r3, #29
    4cae:	d506      	bpl.n	4cbe <__sflush_r+0x46>
    4cb0:	6863      	ldr	r3, [r4, #4]
    4cb2:	1ac0      	subs	r0, r0, r3
    4cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d001      	beq.n	4cbe <__sflush_r+0x46>
    4cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4cbc:	1ac0      	subs	r0, r0, r3
    4cbe:	0002      	movs	r2, r0
    4cc0:	6a21      	ldr	r1, [r4, #32]
    4cc2:	2300      	movs	r3, #0
    4cc4:	0028      	movs	r0, r5
    4cc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4cc8:	47b8      	blx	r7
    4cca:	89a1      	ldrh	r1, [r4, #12]
    4ccc:	1c43      	adds	r3, r0, #1
    4cce:	d106      	bne.n	4cde <__sflush_r+0x66>
    4cd0:	682b      	ldr	r3, [r5, #0]
    4cd2:	2b1d      	cmp	r3, #29
    4cd4:	d831      	bhi.n	4d3a <__sflush_r+0xc2>
    4cd6:	4a2c      	ldr	r2, [pc, #176]	; (4d88 <__sflush_r+0x110>)
    4cd8:	40da      	lsrs	r2, r3
    4cda:	07d3      	lsls	r3, r2, #31
    4cdc:	d52d      	bpl.n	4d3a <__sflush_r+0xc2>
    4cde:	2300      	movs	r3, #0
    4ce0:	6063      	str	r3, [r4, #4]
    4ce2:	6923      	ldr	r3, [r4, #16]
    4ce4:	6023      	str	r3, [r4, #0]
    4ce6:	04cb      	lsls	r3, r1, #19
    4ce8:	d505      	bpl.n	4cf6 <__sflush_r+0x7e>
    4cea:	1c43      	adds	r3, r0, #1
    4cec:	d102      	bne.n	4cf4 <__sflush_r+0x7c>
    4cee:	682b      	ldr	r3, [r5, #0]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d100      	bne.n	4cf6 <__sflush_r+0x7e>
    4cf4:	6560      	str	r0, [r4, #84]	; 0x54
    4cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4cf8:	602e      	str	r6, [r5, #0]
    4cfa:	2900      	cmp	r1, #0
    4cfc:	d0c8      	beq.n	4c90 <__sflush_r+0x18>
    4cfe:	0023      	movs	r3, r4
    4d00:	3344      	adds	r3, #68	; 0x44
    4d02:	4299      	cmp	r1, r3
    4d04:	d002      	beq.n	4d0c <__sflush_r+0x94>
    4d06:	0028      	movs	r0, r5
    4d08:	f000 fa0c 	bl	5124 <_free_r>
    4d0c:	2000      	movs	r0, #0
    4d0e:	6360      	str	r0, [r4, #52]	; 0x34
    4d10:	e7bf      	b.n	4c92 <__sflush_r+0x1a>
    4d12:	2301      	movs	r3, #1
    4d14:	6a21      	ldr	r1, [r4, #32]
    4d16:	0028      	movs	r0, r5
    4d18:	47b8      	blx	r7
    4d1a:	1c43      	adds	r3, r0, #1
    4d1c:	d1c5      	bne.n	4caa <__sflush_r+0x32>
    4d1e:	682b      	ldr	r3, [r5, #0]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d0c2      	beq.n	4caa <__sflush_r+0x32>
    4d24:	2b1d      	cmp	r3, #29
    4d26:	d001      	beq.n	4d2c <__sflush_r+0xb4>
    4d28:	2b16      	cmp	r3, #22
    4d2a:	d101      	bne.n	4d30 <__sflush_r+0xb8>
    4d2c:	602e      	str	r6, [r5, #0]
    4d2e:	e7af      	b.n	4c90 <__sflush_r+0x18>
    4d30:	2340      	movs	r3, #64	; 0x40
    4d32:	89a2      	ldrh	r2, [r4, #12]
    4d34:	4313      	orrs	r3, r2
    4d36:	81a3      	strh	r3, [r4, #12]
    4d38:	e7ab      	b.n	4c92 <__sflush_r+0x1a>
    4d3a:	2340      	movs	r3, #64	; 0x40
    4d3c:	430b      	orrs	r3, r1
    4d3e:	2001      	movs	r0, #1
    4d40:	81a3      	strh	r3, [r4, #12]
    4d42:	4240      	negs	r0, r0
    4d44:	e7a5      	b.n	4c92 <__sflush_r+0x1a>
    4d46:	690f      	ldr	r7, [r1, #16]
    4d48:	2f00      	cmp	r7, #0
    4d4a:	d0a1      	beq.n	4c90 <__sflush_r+0x18>
    4d4c:	680b      	ldr	r3, [r1, #0]
    4d4e:	600f      	str	r7, [r1, #0]
    4d50:	1bdb      	subs	r3, r3, r7
    4d52:	9301      	str	r3, [sp, #4]
    4d54:	2300      	movs	r3, #0
    4d56:	0792      	lsls	r2, r2, #30
    4d58:	d100      	bne.n	4d5c <__sflush_r+0xe4>
    4d5a:	694b      	ldr	r3, [r1, #20]
    4d5c:	60a3      	str	r3, [r4, #8]
    4d5e:	9b01      	ldr	r3, [sp, #4]
    4d60:	2b00      	cmp	r3, #0
    4d62:	dc00      	bgt.n	4d66 <__sflush_r+0xee>
    4d64:	e794      	b.n	4c90 <__sflush_r+0x18>
    4d66:	9b01      	ldr	r3, [sp, #4]
    4d68:	003a      	movs	r2, r7
    4d6a:	6a21      	ldr	r1, [r4, #32]
    4d6c:	0028      	movs	r0, r5
    4d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4d70:	47b0      	blx	r6
    4d72:	2800      	cmp	r0, #0
    4d74:	dc03      	bgt.n	4d7e <__sflush_r+0x106>
    4d76:	2340      	movs	r3, #64	; 0x40
    4d78:	89a2      	ldrh	r2, [r4, #12]
    4d7a:	4313      	orrs	r3, r2
    4d7c:	e7df      	b.n	4d3e <__sflush_r+0xc6>
    4d7e:	9b01      	ldr	r3, [sp, #4]
    4d80:	183f      	adds	r7, r7, r0
    4d82:	1a1b      	subs	r3, r3, r0
    4d84:	9301      	str	r3, [sp, #4]
    4d86:	e7ea      	b.n	4d5e <__sflush_r+0xe6>
    4d88:	20400001 	.word	0x20400001

00004d8c <_fflush_r>:
    4d8c:	690b      	ldr	r3, [r1, #16]
    4d8e:	b570      	push	{r4, r5, r6, lr}
    4d90:	0005      	movs	r5, r0
    4d92:	000c      	movs	r4, r1
    4d94:	2b00      	cmp	r3, #0
    4d96:	d101      	bne.n	4d9c <_fflush_r+0x10>
    4d98:	2000      	movs	r0, #0
    4d9a:	bd70      	pop	{r4, r5, r6, pc}
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d004      	beq.n	4daa <_fflush_r+0x1e>
    4da0:	6983      	ldr	r3, [r0, #24]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d101      	bne.n	4daa <_fflush_r+0x1e>
    4da6:	f000 f873 	bl	4e90 <__sinit>
    4daa:	4b0b      	ldr	r3, [pc, #44]	; (4dd8 <_fflush_r+0x4c>)
    4dac:	429c      	cmp	r4, r3
    4dae:	d109      	bne.n	4dc4 <_fflush_r+0x38>
    4db0:	686c      	ldr	r4, [r5, #4]
    4db2:	220c      	movs	r2, #12
    4db4:	5ea3      	ldrsh	r3, [r4, r2]
    4db6:	2b00      	cmp	r3, #0
    4db8:	d0ee      	beq.n	4d98 <_fflush_r+0xc>
    4dba:	0021      	movs	r1, r4
    4dbc:	0028      	movs	r0, r5
    4dbe:	f7ff ff5b 	bl	4c78 <__sflush_r>
    4dc2:	e7ea      	b.n	4d9a <_fflush_r+0xe>
    4dc4:	4b05      	ldr	r3, [pc, #20]	; (4ddc <_fflush_r+0x50>)
    4dc6:	429c      	cmp	r4, r3
    4dc8:	d101      	bne.n	4dce <_fflush_r+0x42>
    4dca:	68ac      	ldr	r4, [r5, #8]
    4dcc:	e7f1      	b.n	4db2 <_fflush_r+0x26>
    4dce:	4b04      	ldr	r3, [pc, #16]	; (4de0 <_fflush_r+0x54>)
    4dd0:	429c      	cmp	r4, r3
    4dd2:	d1ee      	bne.n	4db2 <_fflush_r+0x26>
    4dd4:	68ec      	ldr	r4, [r5, #12]
    4dd6:	e7ec      	b.n	4db2 <_fflush_r+0x26>
    4dd8:	00006b94 	.word	0x00006b94
    4ddc:	00006bb4 	.word	0x00006bb4
    4de0:	00006b74 	.word	0x00006b74

00004de4 <fflush>:
    4de4:	b510      	push	{r4, lr}
    4de6:	1e01      	subs	r1, r0, #0
    4de8:	d105      	bne.n	4df6 <fflush+0x12>
    4dea:	4b05      	ldr	r3, [pc, #20]	; (4e00 <fflush+0x1c>)
    4dec:	4905      	ldr	r1, [pc, #20]	; (4e04 <fflush+0x20>)
    4dee:	6818      	ldr	r0, [r3, #0]
    4df0:	f000 f8de 	bl	4fb0 <_fwalk_reent>
    4df4:	bd10      	pop	{r4, pc}
    4df6:	4b04      	ldr	r3, [pc, #16]	; (4e08 <fflush+0x24>)
    4df8:	6818      	ldr	r0, [r3, #0]
    4dfa:	f7ff ffc7 	bl	4d8c <_fflush_r>
    4dfe:	e7f9      	b.n	4df4 <fflush+0x10>
    4e00:	00006b70 	.word	0x00006b70
    4e04:	00004d8d 	.word	0x00004d8d
    4e08:	20000040 	.word	0x20000040

00004e0c <_cleanup_r>:
    4e0c:	b510      	push	{r4, lr}
    4e0e:	4902      	ldr	r1, [pc, #8]	; (4e18 <_cleanup_r+0xc>)
    4e10:	f000 f8ce 	bl	4fb0 <_fwalk_reent>
    4e14:	bd10      	pop	{r4, pc}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	00004d8d 	.word	0x00004d8d

00004e1c <std.isra.0>:
    4e1c:	2300      	movs	r3, #0
    4e1e:	b510      	push	{r4, lr}
    4e20:	0004      	movs	r4, r0
    4e22:	6003      	str	r3, [r0, #0]
    4e24:	6043      	str	r3, [r0, #4]
    4e26:	6083      	str	r3, [r0, #8]
    4e28:	8181      	strh	r1, [r0, #12]
    4e2a:	6643      	str	r3, [r0, #100]	; 0x64
    4e2c:	81c2      	strh	r2, [r0, #14]
    4e2e:	6103      	str	r3, [r0, #16]
    4e30:	6143      	str	r3, [r0, #20]
    4e32:	6183      	str	r3, [r0, #24]
    4e34:	0019      	movs	r1, r3
    4e36:	2208      	movs	r2, #8
    4e38:	305c      	adds	r0, #92	; 0x5c
    4e3a:	f7ff fbea 	bl	4612 <memset>
    4e3e:	4b05      	ldr	r3, [pc, #20]	; (4e54 <std.isra.0+0x38>)
    4e40:	6224      	str	r4, [r4, #32]
    4e42:	6263      	str	r3, [r4, #36]	; 0x24
    4e44:	4b04      	ldr	r3, [pc, #16]	; (4e58 <std.isra.0+0x3c>)
    4e46:	62a3      	str	r3, [r4, #40]	; 0x28
    4e48:	4b04      	ldr	r3, [pc, #16]	; (4e5c <std.isra.0+0x40>)
    4e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    4e4c:	4b04      	ldr	r3, [pc, #16]	; (4e60 <std.isra.0+0x44>)
    4e4e:	6323      	str	r3, [r4, #48]	; 0x30
    4e50:	bd10      	pop	{r4, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	00005ff1 	.word	0x00005ff1
    4e58:	00006019 	.word	0x00006019
    4e5c:	00006051 	.word	0x00006051
    4e60:	0000607d 	.word	0x0000607d

00004e64 <__sfmoreglue>:
    4e64:	b570      	push	{r4, r5, r6, lr}
    4e66:	2568      	movs	r5, #104	; 0x68
    4e68:	1e4a      	subs	r2, r1, #1
    4e6a:	4355      	muls	r5, r2
    4e6c:	000e      	movs	r6, r1
    4e6e:	0029      	movs	r1, r5
    4e70:	3174      	adds	r1, #116	; 0x74
    4e72:	f000 f9a1 	bl	51b8 <_malloc_r>
    4e76:	1e04      	subs	r4, r0, #0
    4e78:	d008      	beq.n	4e8c <__sfmoreglue+0x28>
    4e7a:	2100      	movs	r1, #0
    4e7c:	002a      	movs	r2, r5
    4e7e:	6001      	str	r1, [r0, #0]
    4e80:	6046      	str	r6, [r0, #4]
    4e82:	300c      	adds	r0, #12
    4e84:	60a0      	str	r0, [r4, #8]
    4e86:	3268      	adds	r2, #104	; 0x68
    4e88:	f7ff fbc3 	bl	4612 <memset>
    4e8c:	0020      	movs	r0, r4
    4e8e:	bd70      	pop	{r4, r5, r6, pc}

00004e90 <__sinit>:
    4e90:	6983      	ldr	r3, [r0, #24]
    4e92:	b513      	push	{r0, r1, r4, lr}
    4e94:	0004      	movs	r4, r0
    4e96:	2b00      	cmp	r3, #0
    4e98:	d128      	bne.n	4eec <__sinit+0x5c>
    4e9a:	6483      	str	r3, [r0, #72]	; 0x48
    4e9c:	64c3      	str	r3, [r0, #76]	; 0x4c
    4e9e:	6503      	str	r3, [r0, #80]	; 0x50
    4ea0:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <__sinit+0x60>)
    4ea2:	4a14      	ldr	r2, [pc, #80]	; (4ef4 <__sinit+0x64>)
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	6282      	str	r2, [r0, #40]	; 0x28
    4ea8:	9301      	str	r3, [sp, #4]
    4eaa:	4298      	cmp	r0, r3
    4eac:	d101      	bne.n	4eb2 <__sinit+0x22>
    4eae:	2301      	movs	r3, #1
    4eb0:	6183      	str	r3, [r0, #24]
    4eb2:	0020      	movs	r0, r4
    4eb4:	f000 f820 	bl	4ef8 <__sfp>
    4eb8:	6060      	str	r0, [r4, #4]
    4eba:	0020      	movs	r0, r4
    4ebc:	f000 f81c 	bl	4ef8 <__sfp>
    4ec0:	60a0      	str	r0, [r4, #8]
    4ec2:	0020      	movs	r0, r4
    4ec4:	f000 f818 	bl	4ef8 <__sfp>
    4ec8:	2200      	movs	r2, #0
    4eca:	60e0      	str	r0, [r4, #12]
    4ecc:	2104      	movs	r1, #4
    4ece:	6860      	ldr	r0, [r4, #4]
    4ed0:	f7ff ffa4 	bl	4e1c <std.isra.0>
    4ed4:	2201      	movs	r2, #1
    4ed6:	2109      	movs	r1, #9
    4ed8:	68a0      	ldr	r0, [r4, #8]
    4eda:	f7ff ff9f 	bl	4e1c <std.isra.0>
    4ede:	2202      	movs	r2, #2
    4ee0:	2112      	movs	r1, #18
    4ee2:	68e0      	ldr	r0, [r4, #12]
    4ee4:	f7ff ff9a 	bl	4e1c <std.isra.0>
    4ee8:	2301      	movs	r3, #1
    4eea:	61a3      	str	r3, [r4, #24]
    4eec:	bd13      	pop	{r0, r1, r4, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00006b70 	.word	0x00006b70
    4ef4:	00004e0d 	.word	0x00004e0d

00004ef8 <__sfp>:
    4ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efa:	4b1e      	ldr	r3, [pc, #120]	; (4f74 <__sfp+0x7c>)
    4efc:	0007      	movs	r7, r0
    4efe:	681e      	ldr	r6, [r3, #0]
    4f00:	69b3      	ldr	r3, [r6, #24]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d102      	bne.n	4f0c <__sfp+0x14>
    4f06:	0030      	movs	r0, r6
    4f08:	f7ff ffc2 	bl	4e90 <__sinit>
    4f0c:	3648      	adds	r6, #72	; 0x48
    4f0e:	68b4      	ldr	r4, [r6, #8]
    4f10:	6873      	ldr	r3, [r6, #4]
    4f12:	3b01      	subs	r3, #1
    4f14:	d504      	bpl.n	4f20 <__sfp+0x28>
    4f16:	6833      	ldr	r3, [r6, #0]
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d007      	beq.n	4f2c <__sfp+0x34>
    4f1c:	6836      	ldr	r6, [r6, #0]
    4f1e:	e7f6      	b.n	4f0e <__sfp+0x16>
    4f20:	220c      	movs	r2, #12
    4f22:	5ea5      	ldrsh	r5, [r4, r2]
    4f24:	2d00      	cmp	r5, #0
    4f26:	d00d      	beq.n	4f44 <__sfp+0x4c>
    4f28:	3468      	adds	r4, #104	; 0x68
    4f2a:	e7f2      	b.n	4f12 <__sfp+0x1a>
    4f2c:	2104      	movs	r1, #4
    4f2e:	0038      	movs	r0, r7
    4f30:	f7ff ff98 	bl	4e64 <__sfmoreglue>
    4f34:	6030      	str	r0, [r6, #0]
    4f36:	2800      	cmp	r0, #0
    4f38:	d1f0      	bne.n	4f1c <__sfp+0x24>
    4f3a:	230c      	movs	r3, #12
    4f3c:	0004      	movs	r4, r0
    4f3e:	603b      	str	r3, [r7, #0]
    4f40:	0020      	movs	r0, r4
    4f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f44:	2301      	movs	r3, #1
    4f46:	0020      	movs	r0, r4
    4f48:	425b      	negs	r3, r3
    4f4a:	81e3      	strh	r3, [r4, #14]
    4f4c:	3302      	adds	r3, #2
    4f4e:	81a3      	strh	r3, [r4, #12]
    4f50:	6665      	str	r5, [r4, #100]	; 0x64
    4f52:	6025      	str	r5, [r4, #0]
    4f54:	60a5      	str	r5, [r4, #8]
    4f56:	6065      	str	r5, [r4, #4]
    4f58:	6125      	str	r5, [r4, #16]
    4f5a:	6165      	str	r5, [r4, #20]
    4f5c:	61a5      	str	r5, [r4, #24]
    4f5e:	2208      	movs	r2, #8
    4f60:	0029      	movs	r1, r5
    4f62:	305c      	adds	r0, #92	; 0x5c
    4f64:	f7ff fb55 	bl	4612 <memset>
    4f68:	6365      	str	r5, [r4, #52]	; 0x34
    4f6a:	63a5      	str	r5, [r4, #56]	; 0x38
    4f6c:	64a5      	str	r5, [r4, #72]	; 0x48
    4f6e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4f70:	e7e6      	b.n	4f40 <__sfp+0x48>
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	00006b70 	.word	0x00006b70

00004f78 <_fwalk>:
    4f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f7a:	3048      	adds	r0, #72	; 0x48
    4f7c:	0004      	movs	r4, r0
    4f7e:	2600      	movs	r6, #0
    4f80:	9101      	str	r1, [sp, #4]
    4f82:	2c00      	cmp	r4, #0
    4f84:	d101      	bne.n	4f8a <_fwalk+0x12>
    4f86:	0030      	movs	r0, r6
    4f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f8a:	68a5      	ldr	r5, [r4, #8]
    4f8c:	6867      	ldr	r7, [r4, #4]
    4f8e:	3f01      	subs	r7, #1
    4f90:	d501      	bpl.n	4f96 <_fwalk+0x1e>
    4f92:	6824      	ldr	r4, [r4, #0]
    4f94:	e7f5      	b.n	4f82 <_fwalk+0xa>
    4f96:	89ab      	ldrh	r3, [r5, #12]
    4f98:	2b01      	cmp	r3, #1
    4f9a:	d907      	bls.n	4fac <_fwalk+0x34>
    4f9c:	220e      	movs	r2, #14
    4f9e:	5eab      	ldrsh	r3, [r5, r2]
    4fa0:	3301      	adds	r3, #1
    4fa2:	d003      	beq.n	4fac <_fwalk+0x34>
    4fa4:	0028      	movs	r0, r5
    4fa6:	9b01      	ldr	r3, [sp, #4]
    4fa8:	4798      	blx	r3
    4faa:	4306      	orrs	r6, r0
    4fac:	3568      	adds	r5, #104	; 0x68
    4fae:	e7ee      	b.n	4f8e <_fwalk+0x16>

00004fb0 <_fwalk_reent>:
    4fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fb2:	0004      	movs	r4, r0
    4fb4:	0007      	movs	r7, r0
    4fb6:	2600      	movs	r6, #0
    4fb8:	9101      	str	r1, [sp, #4]
    4fba:	3448      	adds	r4, #72	; 0x48
    4fbc:	2c00      	cmp	r4, #0
    4fbe:	d101      	bne.n	4fc4 <_fwalk_reent+0x14>
    4fc0:	0030      	movs	r0, r6
    4fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fc4:	6863      	ldr	r3, [r4, #4]
    4fc6:	68a5      	ldr	r5, [r4, #8]
    4fc8:	9300      	str	r3, [sp, #0]
    4fca:	9b00      	ldr	r3, [sp, #0]
    4fcc:	3b01      	subs	r3, #1
    4fce:	9300      	str	r3, [sp, #0]
    4fd0:	d501      	bpl.n	4fd6 <_fwalk_reent+0x26>
    4fd2:	6824      	ldr	r4, [r4, #0]
    4fd4:	e7f2      	b.n	4fbc <_fwalk_reent+0xc>
    4fd6:	89ab      	ldrh	r3, [r5, #12]
    4fd8:	2b01      	cmp	r3, #1
    4fda:	d908      	bls.n	4fee <_fwalk_reent+0x3e>
    4fdc:	220e      	movs	r2, #14
    4fde:	5eab      	ldrsh	r3, [r5, r2]
    4fe0:	3301      	adds	r3, #1
    4fe2:	d004      	beq.n	4fee <_fwalk_reent+0x3e>
    4fe4:	0029      	movs	r1, r5
    4fe6:	0038      	movs	r0, r7
    4fe8:	9b01      	ldr	r3, [sp, #4]
    4fea:	4798      	blx	r3
    4fec:	4306      	orrs	r6, r0
    4fee:	3568      	adds	r5, #104	; 0x68
    4ff0:	e7eb      	b.n	4fca <_fwalk_reent+0x1a>

00004ff2 <__locale_ctype_ptr_l>:
    4ff2:	30ec      	adds	r0, #236	; 0xec
    4ff4:	6800      	ldr	r0, [r0, #0]
    4ff6:	4770      	bx	lr

00004ff8 <__locale_ctype_ptr>:
    4ff8:	4b04      	ldr	r3, [pc, #16]	; (500c <__locale_ctype_ptr+0x14>)
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	6a1b      	ldr	r3, [r3, #32]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d100      	bne.n	5004 <__locale_ctype_ptr+0xc>
    5002:	4b03      	ldr	r3, [pc, #12]	; (5010 <__locale_ctype_ptr+0x18>)
    5004:	33ec      	adds	r3, #236	; 0xec
    5006:	6818      	ldr	r0, [r3, #0]
    5008:	4770      	bx	lr
    500a:	46c0      	nop			; (mov r8, r8)
    500c:	20000040 	.word	0x20000040
    5010:	200000a4 	.word	0x200000a4

00005014 <__swhatbuf_r>:
    5014:	b570      	push	{r4, r5, r6, lr}
    5016:	000e      	movs	r6, r1
    5018:	001d      	movs	r5, r3
    501a:	230e      	movs	r3, #14
    501c:	5ec9      	ldrsh	r1, [r1, r3]
    501e:	b090      	sub	sp, #64	; 0x40
    5020:	0014      	movs	r4, r2
    5022:	2900      	cmp	r1, #0
    5024:	da07      	bge.n	5036 <__swhatbuf_r+0x22>
    5026:	2300      	movs	r3, #0
    5028:	602b      	str	r3, [r5, #0]
    502a:	89b3      	ldrh	r3, [r6, #12]
    502c:	061b      	lsls	r3, r3, #24
    502e:	d411      	bmi.n	5054 <__swhatbuf_r+0x40>
    5030:	2380      	movs	r3, #128	; 0x80
    5032:	00db      	lsls	r3, r3, #3
    5034:	e00f      	b.n	5056 <__swhatbuf_r+0x42>
    5036:	aa01      	add	r2, sp, #4
    5038:	f001 f9a0 	bl	637c <_fstat_r>
    503c:	2800      	cmp	r0, #0
    503e:	dbf2      	blt.n	5026 <__swhatbuf_r+0x12>
    5040:	22f0      	movs	r2, #240	; 0xf0
    5042:	9b02      	ldr	r3, [sp, #8]
    5044:	0212      	lsls	r2, r2, #8
    5046:	4013      	ands	r3, r2
    5048:	4a05      	ldr	r2, [pc, #20]	; (5060 <__swhatbuf_r+0x4c>)
    504a:	189b      	adds	r3, r3, r2
    504c:	425a      	negs	r2, r3
    504e:	4153      	adcs	r3, r2
    5050:	602b      	str	r3, [r5, #0]
    5052:	e7ed      	b.n	5030 <__swhatbuf_r+0x1c>
    5054:	2340      	movs	r3, #64	; 0x40
    5056:	2000      	movs	r0, #0
    5058:	6023      	str	r3, [r4, #0]
    505a:	b010      	add	sp, #64	; 0x40
    505c:	bd70      	pop	{r4, r5, r6, pc}
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	ffffe000 	.word	0xffffe000

00005064 <__smakebuf_r>:
    5064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5066:	2602      	movs	r6, #2
    5068:	898b      	ldrh	r3, [r1, #12]
    506a:	0005      	movs	r5, r0
    506c:	000c      	movs	r4, r1
    506e:	4233      	tst	r3, r6
    5070:	d006      	beq.n	5080 <__smakebuf_r+0x1c>
    5072:	0023      	movs	r3, r4
    5074:	3347      	adds	r3, #71	; 0x47
    5076:	6023      	str	r3, [r4, #0]
    5078:	6123      	str	r3, [r4, #16]
    507a:	2301      	movs	r3, #1
    507c:	6163      	str	r3, [r4, #20]
    507e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5080:	ab01      	add	r3, sp, #4
    5082:	466a      	mov	r2, sp
    5084:	f7ff ffc6 	bl	5014 <__swhatbuf_r>
    5088:	9900      	ldr	r1, [sp, #0]
    508a:	0007      	movs	r7, r0
    508c:	0028      	movs	r0, r5
    508e:	f000 f893 	bl	51b8 <_malloc_r>
    5092:	2800      	cmp	r0, #0
    5094:	d108      	bne.n	50a8 <__smakebuf_r+0x44>
    5096:	220c      	movs	r2, #12
    5098:	5ea3      	ldrsh	r3, [r4, r2]
    509a:	059a      	lsls	r2, r3, #22
    509c:	d4ef      	bmi.n	507e <__smakebuf_r+0x1a>
    509e:	2203      	movs	r2, #3
    50a0:	4393      	bics	r3, r2
    50a2:	431e      	orrs	r6, r3
    50a4:	81a6      	strh	r6, [r4, #12]
    50a6:	e7e4      	b.n	5072 <__smakebuf_r+0xe>
    50a8:	4b0f      	ldr	r3, [pc, #60]	; (50e8 <__smakebuf_r+0x84>)
    50aa:	62ab      	str	r3, [r5, #40]	; 0x28
    50ac:	2380      	movs	r3, #128	; 0x80
    50ae:	89a2      	ldrh	r2, [r4, #12]
    50b0:	6020      	str	r0, [r4, #0]
    50b2:	4313      	orrs	r3, r2
    50b4:	81a3      	strh	r3, [r4, #12]
    50b6:	9b00      	ldr	r3, [sp, #0]
    50b8:	6120      	str	r0, [r4, #16]
    50ba:	6163      	str	r3, [r4, #20]
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	2b00      	cmp	r3, #0
    50c0:	d00d      	beq.n	50de <__smakebuf_r+0x7a>
    50c2:	230e      	movs	r3, #14
    50c4:	5ee1      	ldrsh	r1, [r4, r3]
    50c6:	0028      	movs	r0, r5
    50c8:	f001 f96a 	bl	63a0 <_isatty_r>
    50cc:	2800      	cmp	r0, #0
    50ce:	d006      	beq.n	50de <__smakebuf_r+0x7a>
    50d0:	2203      	movs	r2, #3
    50d2:	89a3      	ldrh	r3, [r4, #12]
    50d4:	4393      	bics	r3, r2
    50d6:	001a      	movs	r2, r3
    50d8:	2301      	movs	r3, #1
    50da:	4313      	orrs	r3, r2
    50dc:	81a3      	strh	r3, [r4, #12]
    50de:	89a0      	ldrh	r0, [r4, #12]
    50e0:	4338      	orrs	r0, r7
    50e2:	81a0      	strh	r0, [r4, #12]
    50e4:	e7cb      	b.n	507e <__smakebuf_r+0x1a>
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	00004e0d 	.word	0x00004e0d

000050ec <malloc>:
    50ec:	b510      	push	{r4, lr}
    50ee:	4b03      	ldr	r3, [pc, #12]	; (50fc <malloc+0x10>)
    50f0:	0001      	movs	r1, r0
    50f2:	6818      	ldr	r0, [r3, #0]
    50f4:	f000 f860 	bl	51b8 <_malloc_r>
    50f8:	bd10      	pop	{r4, pc}
    50fa:	46c0      	nop			; (mov r8, r8)
    50fc:	20000040 	.word	0x20000040

00005100 <__ascii_mbtowc>:
    5100:	b082      	sub	sp, #8
    5102:	2900      	cmp	r1, #0
    5104:	d100      	bne.n	5108 <__ascii_mbtowc+0x8>
    5106:	a901      	add	r1, sp, #4
    5108:	1e10      	subs	r0, r2, #0
    510a:	d006      	beq.n	511a <__ascii_mbtowc+0x1a>
    510c:	2b00      	cmp	r3, #0
    510e:	d006      	beq.n	511e <__ascii_mbtowc+0x1e>
    5110:	7813      	ldrb	r3, [r2, #0]
    5112:	600b      	str	r3, [r1, #0]
    5114:	7810      	ldrb	r0, [r2, #0]
    5116:	1e43      	subs	r3, r0, #1
    5118:	4198      	sbcs	r0, r3
    511a:	b002      	add	sp, #8
    511c:	4770      	bx	lr
    511e:	2002      	movs	r0, #2
    5120:	4240      	negs	r0, r0
    5122:	e7fa      	b.n	511a <__ascii_mbtowc+0x1a>

00005124 <_free_r>:
    5124:	b570      	push	{r4, r5, r6, lr}
    5126:	0005      	movs	r5, r0
    5128:	2900      	cmp	r1, #0
    512a:	d010      	beq.n	514e <_free_r+0x2a>
    512c:	1f0c      	subs	r4, r1, #4
    512e:	6823      	ldr	r3, [r4, #0]
    5130:	2b00      	cmp	r3, #0
    5132:	da00      	bge.n	5136 <_free_r+0x12>
    5134:	18e4      	adds	r4, r4, r3
    5136:	0028      	movs	r0, r5
    5138:	f001 f963 	bl	6402 <__malloc_lock>
    513c:	4a1d      	ldr	r2, [pc, #116]	; (51b4 <_free_r+0x90>)
    513e:	6813      	ldr	r3, [r2, #0]
    5140:	2b00      	cmp	r3, #0
    5142:	d105      	bne.n	5150 <_free_r+0x2c>
    5144:	6063      	str	r3, [r4, #4]
    5146:	6014      	str	r4, [r2, #0]
    5148:	0028      	movs	r0, r5
    514a:	f001 f95b 	bl	6404 <__malloc_unlock>
    514e:	bd70      	pop	{r4, r5, r6, pc}
    5150:	42a3      	cmp	r3, r4
    5152:	d909      	bls.n	5168 <_free_r+0x44>
    5154:	6821      	ldr	r1, [r4, #0]
    5156:	1860      	adds	r0, r4, r1
    5158:	4283      	cmp	r3, r0
    515a:	d1f3      	bne.n	5144 <_free_r+0x20>
    515c:	6818      	ldr	r0, [r3, #0]
    515e:	685b      	ldr	r3, [r3, #4]
    5160:	1841      	adds	r1, r0, r1
    5162:	6021      	str	r1, [r4, #0]
    5164:	e7ee      	b.n	5144 <_free_r+0x20>
    5166:	0013      	movs	r3, r2
    5168:	685a      	ldr	r2, [r3, #4]
    516a:	2a00      	cmp	r2, #0
    516c:	d001      	beq.n	5172 <_free_r+0x4e>
    516e:	42a2      	cmp	r2, r4
    5170:	d9f9      	bls.n	5166 <_free_r+0x42>
    5172:	6819      	ldr	r1, [r3, #0]
    5174:	1858      	adds	r0, r3, r1
    5176:	42a0      	cmp	r0, r4
    5178:	d10b      	bne.n	5192 <_free_r+0x6e>
    517a:	6820      	ldr	r0, [r4, #0]
    517c:	1809      	adds	r1, r1, r0
    517e:	1858      	adds	r0, r3, r1
    5180:	6019      	str	r1, [r3, #0]
    5182:	4282      	cmp	r2, r0
    5184:	d1e0      	bne.n	5148 <_free_r+0x24>
    5186:	6810      	ldr	r0, [r2, #0]
    5188:	6852      	ldr	r2, [r2, #4]
    518a:	1841      	adds	r1, r0, r1
    518c:	6019      	str	r1, [r3, #0]
    518e:	605a      	str	r2, [r3, #4]
    5190:	e7da      	b.n	5148 <_free_r+0x24>
    5192:	42a0      	cmp	r0, r4
    5194:	d902      	bls.n	519c <_free_r+0x78>
    5196:	230c      	movs	r3, #12
    5198:	602b      	str	r3, [r5, #0]
    519a:	e7d5      	b.n	5148 <_free_r+0x24>
    519c:	6821      	ldr	r1, [r4, #0]
    519e:	1860      	adds	r0, r4, r1
    51a0:	4282      	cmp	r2, r0
    51a2:	d103      	bne.n	51ac <_free_r+0x88>
    51a4:	6810      	ldr	r0, [r2, #0]
    51a6:	6852      	ldr	r2, [r2, #4]
    51a8:	1841      	adds	r1, r0, r1
    51aa:	6021      	str	r1, [r4, #0]
    51ac:	6062      	str	r2, [r4, #4]
    51ae:	605c      	str	r4, [r3, #4]
    51b0:	e7ca      	b.n	5148 <_free_r+0x24>
    51b2:	46c0      	nop			; (mov r8, r8)
    51b4:	200002a4 	.word	0x200002a4

000051b8 <_malloc_r>:
    51b8:	2303      	movs	r3, #3
    51ba:	b570      	push	{r4, r5, r6, lr}
    51bc:	1ccd      	adds	r5, r1, #3
    51be:	439d      	bics	r5, r3
    51c0:	3508      	adds	r5, #8
    51c2:	0006      	movs	r6, r0
    51c4:	2d0c      	cmp	r5, #12
    51c6:	d21e      	bcs.n	5206 <_malloc_r+0x4e>
    51c8:	250c      	movs	r5, #12
    51ca:	42a9      	cmp	r1, r5
    51cc:	d81d      	bhi.n	520a <_malloc_r+0x52>
    51ce:	0030      	movs	r0, r6
    51d0:	f001 f917 	bl	6402 <__malloc_lock>
    51d4:	4a25      	ldr	r2, [pc, #148]	; (526c <_malloc_r+0xb4>)
    51d6:	6814      	ldr	r4, [r2, #0]
    51d8:	0021      	movs	r1, r4
    51da:	2900      	cmp	r1, #0
    51dc:	d119      	bne.n	5212 <_malloc_r+0x5a>
    51de:	4c24      	ldr	r4, [pc, #144]	; (5270 <_malloc_r+0xb8>)
    51e0:	6823      	ldr	r3, [r4, #0]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d103      	bne.n	51ee <_malloc_r+0x36>
    51e6:	0030      	movs	r0, r6
    51e8:	f000 febe 	bl	5f68 <_sbrk_r>
    51ec:	6020      	str	r0, [r4, #0]
    51ee:	0029      	movs	r1, r5
    51f0:	0030      	movs	r0, r6
    51f2:	f000 feb9 	bl	5f68 <_sbrk_r>
    51f6:	1c43      	adds	r3, r0, #1
    51f8:	d12c      	bne.n	5254 <_malloc_r+0x9c>
    51fa:	230c      	movs	r3, #12
    51fc:	0030      	movs	r0, r6
    51fe:	6033      	str	r3, [r6, #0]
    5200:	f001 f900 	bl	6404 <__malloc_unlock>
    5204:	e003      	b.n	520e <_malloc_r+0x56>
    5206:	2d00      	cmp	r5, #0
    5208:	dadf      	bge.n	51ca <_malloc_r+0x12>
    520a:	230c      	movs	r3, #12
    520c:	6033      	str	r3, [r6, #0]
    520e:	2000      	movs	r0, #0
    5210:	bd70      	pop	{r4, r5, r6, pc}
    5212:	680b      	ldr	r3, [r1, #0]
    5214:	1b5b      	subs	r3, r3, r5
    5216:	d41a      	bmi.n	524e <_malloc_r+0x96>
    5218:	2b0b      	cmp	r3, #11
    521a:	d903      	bls.n	5224 <_malloc_r+0x6c>
    521c:	600b      	str	r3, [r1, #0]
    521e:	18cc      	adds	r4, r1, r3
    5220:	6025      	str	r5, [r4, #0]
    5222:	e003      	b.n	522c <_malloc_r+0x74>
    5224:	428c      	cmp	r4, r1
    5226:	d10e      	bne.n	5246 <_malloc_r+0x8e>
    5228:	6863      	ldr	r3, [r4, #4]
    522a:	6013      	str	r3, [r2, #0]
    522c:	0030      	movs	r0, r6
    522e:	f001 f8e9 	bl	6404 <__malloc_unlock>
    5232:	0020      	movs	r0, r4
    5234:	2207      	movs	r2, #7
    5236:	300b      	adds	r0, #11
    5238:	1d23      	adds	r3, r4, #4
    523a:	4390      	bics	r0, r2
    523c:	1ac3      	subs	r3, r0, r3
    523e:	d0e7      	beq.n	5210 <_malloc_r+0x58>
    5240:	425a      	negs	r2, r3
    5242:	50e2      	str	r2, [r4, r3]
    5244:	e7e4      	b.n	5210 <_malloc_r+0x58>
    5246:	684b      	ldr	r3, [r1, #4]
    5248:	6063      	str	r3, [r4, #4]
    524a:	000c      	movs	r4, r1
    524c:	e7ee      	b.n	522c <_malloc_r+0x74>
    524e:	000c      	movs	r4, r1
    5250:	6849      	ldr	r1, [r1, #4]
    5252:	e7c2      	b.n	51da <_malloc_r+0x22>
    5254:	2303      	movs	r3, #3
    5256:	1cc4      	adds	r4, r0, #3
    5258:	439c      	bics	r4, r3
    525a:	42a0      	cmp	r0, r4
    525c:	d0e0      	beq.n	5220 <_malloc_r+0x68>
    525e:	1a21      	subs	r1, r4, r0
    5260:	0030      	movs	r0, r6
    5262:	f000 fe81 	bl	5f68 <_sbrk_r>
    5266:	1c43      	adds	r3, r0, #1
    5268:	d1da      	bne.n	5220 <_malloc_r+0x68>
    526a:	e7c6      	b.n	51fa <_malloc_r+0x42>
    526c:	200002a4 	.word	0x200002a4
    5270:	200002a8 	.word	0x200002a8

00005274 <__sfputc_r>:
    5274:	6893      	ldr	r3, [r2, #8]
    5276:	b510      	push	{r4, lr}
    5278:	3b01      	subs	r3, #1
    527a:	6093      	str	r3, [r2, #8]
    527c:	2b00      	cmp	r3, #0
    527e:	da05      	bge.n	528c <__sfputc_r+0x18>
    5280:	6994      	ldr	r4, [r2, #24]
    5282:	42a3      	cmp	r3, r4
    5284:	db08      	blt.n	5298 <__sfputc_r+0x24>
    5286:	b2cb      	uxtb	r3, r1
    5288:	2b0a      	cmp	r3, #10
    528a:	d005      	beq.n	5298 <__sfputc_r+0x24>
    528c:	6813      	ldr	r3, [r2, #0]
    528e:	1c58      	adds	r0, r3, #1
    5290:	6010      	str	r0, [r2, #0]
    5292:	7019      	strb	r1, [r3, #0]
    5294:	b2c8      	uxtb	r0, r1
    5296:	bd10      	pop	{r4, pc}
    5298:	f7ff fc22 	bl	4ae0 <__swbuf_r>
    529c:	e7fb      	b.n	5296 <__sfputc_r+0x22>

0000529e <__sfputs_r>:
    529e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52a0:	0006      	movs	r6, r0
    52a2:	000f      	movs	r7, r1
    52a4:	0014      	movs	r4, r2
    52a6:	18d5      	adds	r5, r2, r3
    52a8:	42ac      	cmp	r4, r5
    52aa:	d101      	bne.n	52b0 <__sfputs_r+0x12>
    52ac:	2000      	movs	r0, #0
    52ae:	e007      	b.n	52c0 <__sfputs_r+0x22>
    52b0:	7821      	ldrb	r1, [r4, #0]
    52b2:	003a      	movs	r2, r7
    52b4:	0030      	movs	r0, r6
    52b6:	f7ff ffdd 	bl	5274 <__sfputc_r>
    52ba:	3401      	adds	r4, #1
    52bc:	1c43      	adds	r3, r0, #1
    52be:	d1f3      	bne.n	52a8 <__sfputs_r+0xa>
    52c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000052c4 <_vfiprintf_r>:
    52c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52c6:	b09f      	sub	sp, #124	; 0x7c
    52c8:	0006      	movs	r6, r0
    52ca:	000f      	movs	r7, r1
    52cc:	0014      	movs	r4, r2
    52ce:	9305      	str	r3, [sp, #20]
    52d0:	2800      	cmp	r0, #0
    52d2:	d004      	beq.n	52de <_vfiprintf_r+0x1a>
    52d4:	6983      	ldr	r3, [r0, #24]
    52d6:	2b00      	cmp	r3, #0
    52d8:	d101      	bne.n	52de <_vfiprintf_r+0x1a>
    52da:	f7ff fdd9 	bl	4e90 <__sinit>
    52de:	4b7f      	ldr	r3, [pc, #508]	; (54dc <_vfiprintf_r+0x218>)
    52e0:	429f      	cmp	r7, r3
    52e2:	d15c      	bne.n	539e <_vfiprintf_r+0xda>
    52e4:	6877      	ldr	r7, [r6, #4]
    52e6:	89bb      	ldrh	r3, [r7, #12]
    52e8:	071b      	lsls	r3, r3, #28
    52ea:	d562      	bpl.n	53b2 <_vfiprintf_r+0xee>
    52ec:	693b      	ldr	r3, [r7, #16]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d05f      	beq.n	53b2 <_vfiprintf_r+0xee>
    52f2:	2300      	movs	r3, #0
    52f4:	ad06      	add	r5, sp, #24
    52f6:	616b      	str	r3, [r5, #20]
    52f8:	3320      	adds	r3, #32
    52fa:	766b      	strb	r3, [r5, #25]
    52fc:	3310      	adds	r3, #16
    52fe:	76ab      	strb	r3, [r5, #26]
    5300:	9402      	str	r4, [sp, #8]
    5302:	9c02      	ldr	r4, [sp, #8]
    5304:	7823      	ldrb	r3, [r4, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d15d      	bne.n	53c6 <_vfiprintf_r+0x102>
    530a:	9b02      	ldr	r3, [sp, #8]
    530c:	1ae3      	subs	r3, r4, r3
    530e:	9304      	str	r3, [sp, #16]
    5310:	d00d      	beq.n	532e <_vfiprintf_r+0x6a>
    5312:	9b04      	ldr	r3, [sp, #16]
    5314:	9a02      	ldr	r2, [sp, #8]
    5316:	0039      	movs	r1, r7
    5318:	0030      	movs	r0, r6
    531a:	f7ff ffc0 	bl	529e <__sfputs_r>
    531e:	1c43      	adds	r3, r0, #1
    5320:	d100      	bne.n	5324 <_vfiprintf_r+0x60>
    5322:	e0cc      	b.n	54be <_vfiprintf_r+0x1fa>
    5324:	696a      	ldr	r2, [r5, #20]
    5326:	9b04      	ldr	r3, [sp, #16]
    5328:	4694      	mov	ip, r2
    532a:	4463      	add	r3, ip
    532c:	616b      	str	r3, [r5, #20]
    532e:	7823      	ldrb	r3, [r4, #0]
    5330:	2b00      	cmp	r3, #0
    5332:	d100      	bne.n	5336 <_vfiprintf_r+0x72>
    5334:	e0c3      	b.n	54be <_vfiprintf_r+0x1fa>
    5336:	2201      	movs	r2, #1
    5338:	2300      	movs	r3, #0
    533a:	4252      	negs	r2, r2
    533c:	606a      	str	r2, [r5, #4]
    533e:	a902      	add	r1, sp, #8
    5340:	3254      	adds	r2, #84	; 0x54
    5342:	1852      	adds	r2, r2, r1
    5344:	3401      	adds	r4, #1
    5346:	602b      	str	r3, [r5, #0]
    5348:	60eb      	str	r3, [r5, #12]
    534a:	60ab      	str	r3, [r5, #8]
    534c:	7013      	strb	r3, [r2, #0]
    534e:	65ab      	str	r3, [r5, #88]	; 0x58
    5350:	7821      	ldrb	r1, [r4, #0]
    5352:	2205      	movs	r2, #5
    5354:	4862      	ldr	r0, [pc, #392]	; (54e0 <_vfiprintf_r+0x21c>)
    5356:	f001 f849 	bl	63ec <memchr>
    535a:	1c63      	adds	r3, r4, #1
    535c:	469c      	mov	ip, r3
    535e:	2800      	cmp	r0, #0
    5360:	d135      	bne.n	53ce <_vfiprintf_r+0x10a>
    5362:	6829      	ldr	r1, [r5, #0]
    5364:	06cb      	lsls	r3, r1, #27
    5366:	d504      	bpl.n	5372 <_vfiprintf_r+0xae>
    5368:	2353      	movs	r3, #83	; 0x53
    536a:	aa02      	add	r2, sp, #8
    536c:	3020      	adds	r0, #32
    536e:	189b      	adds	r3, r3, r2
    5370:	7018      	strb	r0, [r3, #0]
    5372:	070b      	lsls	r3, r1, #28
    5374:	d504      	bpl.n	5380 <_vfiprintf_r+0xbc>
    5376:	2353      	movs	r3, #83	; 0x53
    5378:	202b      	movs	r0, #43	; 0x2b
    537a:	aa02      	add	r2, sp, #8
    537c:	189b      	adds	r3, r3, r2
    537e:	7018      	strb	r0, [r3, #0]
    5380:	7823      	ldrb	r3, [r4, #0]
    5382:	2b2a      	cmp	r3, #42	; 0x2a
    5384:	d02c      	beq.n	53e0 <_vfiprintf_r+0x11c>
    5386:	2000      	movs	r0, #0
    5388:	210a      	movs	r1, #10
    538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    538c:	7822      	ldrb	r2, [r4, #0]
    538e:	3a30      	subs	r2, #48	; 0x30
    5390:	2a09      	cmp	r2, #9
    5392:	d800      	bhi.n	5396 <_vfiprintf_r+0xd2>
    5394:	e06b      	b.n	546e <_vfiprintf_r+0x1aa>
    5396:	2800      	cmp	r0, #0
    5398:	d02a      	beq.n	53f0 <_vfiprintf_r+0x12c>
    539a:	9309      	str	r3, [sp, #36]	; 0x24
    539c:	e028      	b.n	53f0 <_vfiprintf_r+0x12c>
    539e:	4b51      	ldr	r3, [pc, #324]	; (54e4 <_vfiprintf_r+0x220>)
    53a0:	429f      	cmp	r7, r3
    53a2:	d101      	bne.n	53a8 <_vfiprintf_r+0xe4>
    53a4:	68b7      	ldr	r7, [r6, #8]
    53a6:	e79e      	b.n	52e6 <_vfiprintf_r+0x22>
    53a8:	4b4f      	ldr	r3, [pc, #316]	; (54e8 <_vfiprintf_r+0x224>)
    53aa:	429f      	cmp	r7, r3
    53ac:	d19b      	bne.n	52e6 <_vfiprintf_r+0x22>
    53ae:	68f7      	ldr	r7, [r6, #12]
    53b0:	e799      	b.n	52e6 <_vfiprintf_r+0x22>
    53b2:	0039      	movs	r1, r7
    53b4:	0030      	movs	r0, r6
    53b6:	f7ff fbe9 	bl	4b8c <__swsetup_r>
    53ba:	2800      	cmp	r0, #0
    53bc:	d099      	beq.n	52f2 <_vfiprintf_r+0x2e>
    53be:	2001      	movs	r0, #1
    53c0:	4240      	negs	r0, r0
    53c2:	b01f      	add	sp, #124	; 0x7c
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c6:	2b25      	cmp	r3, #37	; 0x25
    53c8:	d09f      	beq.n	530a <_vfiprintf_r+0x46>
    53ca:	3401      	adds	r4, #1
    53cc:	e79a      	b.n	5304 <_vfiprintf_r+0x40>
    53ce:	4b44      	ldr	r3, [pc, #272]	; (54e0 <_vfiprintf_r+0x21c>)
    53d0:	6829      	ldr	r1, [r5, #0]
    53d2:	1ac0      	subs	r0, r0, r3
    53d4:	2301      	movs	r3, #1
    53d6:	4083      	lsls	r3, r0
    53d8:	430b      	orrs	r3, r1
    53da:	602b      	str	r3, [r5, #0]
    53dc:	4664      	mov	r4, ip
    53de:	e7b7      	b.n	5350 <_vfiprintf_r+0x8c>
    53e0:	9b05      	ldr	r3, [sp, #20]
    53e2:	1d18      	adds	r0, r3, #4
    53e4:	681b      	ldr	r3, [r3, #0]
    53e6:	9005      	str	r0, [sp, #20]
    53e8:	2b00      	cmp	r3, #0
    53ea:	db3a      	blt.n	5462 <_vfiprintf_r+0x19e>
    53ec:	9309      	str	r3, [sp, #36]	; 0x24
    53ee:	4664      	mov	r4, ip
    53f0:	7823      	ldrb	r3, [r4, #0]
    53f2:	2b2e      	cmp	r3, #46	; 0x2e
    53f4:	d10b      	bne.n	540e <_vfiprintf_r+0x14a>
    53f6:	7863      	ldrb	r3, [r4, #1]
    53f8:	1c62      	adds	r2, r4, #1
    53fa:	2b2a      	cmp	r3, #42	; 0x2a
    53fc:	d13f      	bne.n	547e <_vfiprintf_r+0x1ba>
    53fe:	9b05      	ldr	r3, [sp, #20]
    5400:	3402      	adds	r4, #2
    5402:	1d1a      	adds	r2, r3, #4
    5404:	681b      	ldr	r3, [r3, #0]
    5406:	9205      	str	r2, [sp, #20]
    5408:	2b00      	cmp	r3, #0
    540a:	db35      	blt.n	5478 <_vfiprintf_r+0x1b4>
    540c:	9307      	str	r3, [sp, #28]
    540e:	7821      	ldrb	r1, [r4, #0]
    5410:	2203      	movs	r2, #3
    5412:	4836      	ldr	r0, [pc, #216]	; (54ec <_vfiprintf_r+0x228>)
    5414:	f000 ffea 	bl	63ec <memchr>
    5418:	2800      	cmp	r0, #0
    541a:	d007      	beq.n	542c <_vfiprintf_r+0x168>
    541c:	4b33      	ldr	r3, [pc, #204]	; (54ec <_vfiprintf_r+0x228>)
    541e:	682a      	ldr	r2, [r5, #0]
    5420:	1ac0      	subs	r0, r0, r3
    5422:	2340      	movs	r3, #64	; 0x40
    5424:	4083      	lsls	r3, r0
    5426:	4313      	orrs	r3, r2
    5428:	602b      	str	r3, [r5, #0]
    542a:	3401      	adds	r4, #1
    542c:	7821      	ldrb	r1, [r4, #0]
    542e:	1c63      	adds	r3, r4, #1
    5430:	2206      	movs	r2, #6
    5432:	482f      	ldr	r0, [pc, #188]	; (54f0 <_vfiprintf_r+0x22c>)
    5434:	9302      	str	r3, [sp, #8]
    5436:	7629      	strb	r1, [r5, #24]
    5438:	f000 ffd8 	bl	63ec <memchr>
    543c:	2800      	cmp	r0, #0
    543e:	d044      	beq.n	54ca <_vfiprintf_r+0x206>
    5440:	4b2c      	ldr	r3, [pc, #176]	; (54f4 <_vfiprintf_r+0x230>)
    5442:	2b00      	cmp	r3, #0
    5444:	d12f      	bne.n	54a6 <_vfiprintf_r+0x1e2>
    5446:	6829      	ldr	r1, [r5, #0]
    5448:	9b05      	ldr	r3, [sp, #20]
    544a:	2207      	movs	r2, #7
    544c:	05c9      	lsls	r1, r1, #23
    544e:	d528      	bpl.n	54a2 <_vfiprintf_r+0x1de>
    5450:	189b      	adds	r3, r3, r2
    5452:	4393      	bics	r3, r2
    5454:	3308      	adds	r3, #8
    5456:	9305      	str	r3, [sp, #20]
    5458:	696b      	ldr	r3, [r5, #20]
    545a:	9a03      	ldr	r2, [sp, #12]
    545c:	189b      	adds	r3, r3, r2
    545e:	616b      	str	r3, [r5, #20]
    5460:	e74f      	b.n	5302 <_vfiprintf_r+0x3e>
    5462:	425b      	negs	r3, r3
    5464:	60eb      	str	r3, [r5, #12]
    5466:	2302      	movs	r3, #2
    5468:	430b      	orrs	r3, r1
    546a:	602b      	str	r3, [r5, #0]
    546c:	e7bf      	b.n	53ee <_vfiprintf_r+0x12a>
    546e:	434b      	muls	r3, r1
    5470:	3401      	adds	r4, #1
    5472:	189b      	adds	r3, r3, r2
    5474:	2001      	movs	r0, #1
    5476:	e789      	b.n	538c <_vfiprintf_r+0xc8>
    5478:	2301      	movs	r3, #1
    547a:	425b      	negs	r3, r3
    547c:	e7c6      	b.n	540c <_vfiprintf_r+0x148>
    547e:	2300      	movs	r3, #0
    5480:	0014      	movs	r4, r2
    5482:	200a      	movs	r0, #10
    5484:	001a      	movs	r2, r3
    5486:	606b      	str	r3, [r5, #4]
    5488:	7821      	ldrb	r1, [r4, #0]
    548a:	3930      	subs	r1, #48	; 0x30
    548c:	2909      	cmp	r1, #9
    548e:	d903      	bls.n	5498 <_vfiprintf_r+0x1d4>
    5490:	2b00      	cmp	r3, #0
    5492:	d0bc      	beq.n	540e <_vfiprintf_r+0x14a>
    5494:	9207      	str	r2, [sp, #28]
    5496:	e7ba      	b.n	540e <_vfiprintf_r+0x14a>
    5498:	4342      	muls	r2, r0
    549a:	3401      	adds	r4, #1
    549c:	1852      	adds	r2, r2, r1
    549e:	2301      	movs	r3, #1
    54a0:	e7f2      	b.n	5488 <_vfiprintf_r+0x1c4>
    54a2:	3307      	adds	r3, #7
    54a4:	e7d5      	b.n	5452 <_vfiprintf_r+0x18e>
    54a6:	ab05      	add	r3, sp, #20
    54a8:	9300      	str	r3, [sp, #0]
    54aa:	003a      	movs	r2, r7
    54ac:	4b12      	ldr	r3, [pc, #72]	; (54f8 <_vfiprintf_r+0x234>)
    54ae:	0029      	movs	r1, r5
    54b0:	0030      	movs	r0, r6
    54b2:	e000      	b.n	54b6 <_vfiprintf_r+0x1f2>
    54b4:	bf00      	nop
    54b6:	9003      	str	r0, [sp, #12]
    54b8:	9b03      	ldr	r3, [sp, #12]
    54ba:	3301      	adds	r3, #1
    54bc:	d1cc      	bne.n	5458 <_vfiprintf_r+0x194>
    54be:	89bb      	ldrh	r3, [r7, #12]
    54c0:	065b      	lsls	r3, r3, #25
    54c2:	d500      	bpl.n	54c6 <_vfiprintf_r+0x202>
    54c4:	e77b      	b.n	53be <_vfiprintf_r+0xfa>
    54c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    54c8:	e77b      	b.n	53c2 <_vfiprintf_r+0xfe>
    54ca:	ab05      	add	r3, sp, #20
    54cc:	9300      	str	r3, [sp, #0]
    54ce:	003a      	movs	r2, r7
    54d0:	4b09      	ldr	r3, [pc, #36]	; (54f8 <_vfiprintf_r+0x234>)
    54d2:	0029      	movs	r1, r5
    54d4:	0030      	movs	r0, r6
    54d6:	f000 f87f 	bl	55d8 <_printf_i>
    54da:	e7ec      	b.n	54b6 <_vfiprintf_r+0x1f2>
    54dc:	00006b94 	.word	0x00006b94
    54e0:	00006bde 	.word	0x00006bde
    54e4:	00006bb4 	.word	0x00006bb4
    54e8:	00006b74 	.word	0x00006b74
    54ec:	00006be4 	.word	0x00006be4
    54f0:	00006be8 	.word	0x00006be8
    54f4:	00000000 	.word	0x00000000
    54f8:	0000529f 	.word	0x0000529f

000054fc <_printf_common>:
    54fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54fe:	0015      	movs	r5, r2
    5500:	9301      	str	r3, [sp, #4]
    5502:	688a      	ldr	r2, [r1, #8]
    5504:	690b      	ldr	r3, [r1, #16]
    5506:	9000      	str	r0, [sp, #0]
    5508:	000c      	movs	r4, r1
    550a:	4293      	cmp	r3, r2
    550c:	da00      	bge.n	5510 <_printf_common+0x14>
    550e:	0013      	movs	r3, r2
    5510:	0022      	movs	r2, r4
    5512:	602b      	str	r3, [r5, #0]
    5514:	3243      	adds	r2, #67	; 0x43
    5516:	7812      	ldrb	r2, [r2, #0]
    5518:	2a00      	cmp	r2, #0
    551a:	d001      	beq.n	5520 <_printf_common+0x24>
    551c:	3301      	adds	r3, #1
    551e:	602b      	str	r3, [r5, #0]
    5520:	6823      	ldr	r3, [r4, #0]
    5522:	069b      	lsls	r3, r3, #26
    5524:	d502      	bpl.n	552c <_printf_common+0x30>
    5526:	682b      	ldr	r3, [r5, #0]
    5528:	3302      	adds	r3, #2
    552a:	602b      	str	r3, [r5, #0]
    552c:	2706      	movs	r7, #6
    552e:	6823      	ldr	r3, [r4, #0]
    5530:	401f      	ands	r7, r3
    5532:	d027      	beq.n	5584 <_printf_common+0x88>
    5534:	0023      	movs	r3, r4
    5536:	3343      	adds	r3, #67	; 0x43
    5538:	781b      	ldrb	r3, [r3, #0]
    553a:	1e5a      	subs	r2, r3, #1
    553c:	4193      	sbcs	r3, r2
    553e:	6822      	ldr	r2, [r4, #0]
    5540:	0692      	lsls	r2, r2, #26
    5542:	d430      	bmi.n	55a6 <_printf_common+0xaa>
    5544:	0022      	movs	r2, r4
    5546:	9901      	ldr	r1, [sp, #4]
    5548:	3243      	adds	r2, #67	; 0x43
    554a:	9800      	ldr	r0, [sp, #0]
    554c:	9e08      	ldr	r6, [sp, #32]
    554e:	47b0      	blx	r6
    5550:	1c43      	adds	r3, r0, #1
    5552:	d025      	beq.n	55a0 <_printf_common+0xa4>
    5554:	2306      	movs	r3, #6
    5556:	6820      	ldr	r0, [r4, #0]
    5558:	682a      	ldr	r2, [r5, #0]
    555a:	68e1      	ldr	r1, [r4, #12]
    555c:	4003      	ands	r3, r0
    555e:	2500      	movs	r5, #0
    5560:	2b04      	cmp	r3, #4
    5562:	d103      	bne.n	556c <_printf_common+0x70>
    5564:	1a8d      	subs	r5, r1, r2
    5566:	43eb      	mvns	r3, r5
    5568:	17db      	asrs	r3, r3, #31
    556a:	401d      	ands	r5, r3
    556c:	68a3      	ldr	r3, [r4, #8]
    556e:	6922      	ldr	r2, [r4, #16]
    5570:	4293      	cmp	r3, r2
    5572:	dd01      	ble.n	5578 <_printf_common+0x7c>
    5574:	1a9b      	subs	r3, r3, r2
    5576:	18ed      	adds	r5, r5, r3
    5578:	2700      	movs	r7, #0
    557a:	42bd      	cmp	r5, r7
    557c:	d120      	bne.n	55c0 <_printf_common+0xc4>
    557e:	2000      	movs	r0, #0
    5580:	e010      	b.n	55a4 <_printf_common+0xa8>
    5582:	3701      	adds	r7, #1
    5584:	68e3      	ldr	r3, [r4, #12]
    5586:	682a      	ldr	r2, [r5, #0]
    5588:	1a9b      	subs	r3, r3, r2
    558a:	429f      	cmp	r7, r3
    558c:	dad2      	bge.n	5534 <_printf_common+0x38>
    558e:	0022      	movs	r2, r4
    5590:	2301      	movs	r3, #1
    5592:	3219      	adds	r2, #25
    5594:	9901      	ldr	r1, [sp, #4]
    5596:	9800      	ldr	r0, [sp, #0]
    5598:	9e08      	ldr	r6, [sp, #32]
    559a:	47b0      	blx	r6
    559c:	1c43      	adds	r3, r0, #1
    559e:	d1f0      	bne.n	5582 <_printf_common+0x86>
    55a0:	2001      	movs	r0, #1
    55a2:	4240      	negs	r0, r0
    55a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55a6:	2030      	movs	r0, #48	; 0x30
    55a8:	18e1      	adds	r1, r4, r3
    55aa:	3143      	adds	r1, #67	; 0x43
    55ac:	7008      	strb	r0, [r1, #0]
    55ae:	0021      	movs	r1, r4
    55b0:	1c5a      	adds	r2, r3, #1
    55b2:	3145      	adds	r1, #69	; 0x45
    55b4:	7809      	ldrb	r1, [r1, #0]
    55b6:	18a2      	adds	r2, r4, r2
    55b8:	3243      	adds	r2, #67	; 0x43
    55ba:	3302      	adds	r3, #2
    55bc:	7011      	strb	r1, [r2, #0]
    55be:	e7c1      	b.n	5544 <_printf_common+0x48>
    55c0:	0022      	movs	r2, r4
    55c2:	2301      	movs	r3, #1
    55c4:	321a      	adds	r2, #26
    55c6:	9901      	ldr	r1, [sp, #4]
    55c8:	9800      	ldr	r0, [sp, #0]
    55ca:	9e08      	ldr	r6, [sp, #32]
    55cc:	47b0      	blx	r6
    55ce:	1c43      	adds	r3, r0, #1
    55d0:	d0e6      	beq.n	55a0 <_printf_common+0xa4>
    55d2:	3701      	adds	r7, #1
    55d4:	e7d1      	b.n	557a <_printf_common+0x7e>
	...

000055d8 <_printf_i>:
    55d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55da:	b08b      	sub	sp, #44	; 0x2c
    55dc:	9206      	str	r2, [sp, #24]
    55de:	000a      	movs	r2, r1
    55e0:	3243      	adds	r2, #67	; 0x43
    55e2:	9307      	str	r3, [sp, #28]
    55e4:	9005      	str	r0, [sp, #20]
    55e6:	9204      	str	r2, [sp, #16]
    55e8:	7e0a      	ldrb	r2, [r1, #24]
    55ea:	000c      	movs	r4, r1
    55ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    55ee:	2a6e      	cmp	r2, #110	; 0x6e
    55f0:	d100      	bne.n	55f4 <_printf_i+0x1c>
    55f2:	e08f      	b.n	5714 <_printf_i+0x13c>
    55f4:	d817      	bhi.n	5626 <_printf_i+0x4e>
    55f6:	2a63      	cmp	r2, #99	; 0x63
    55f8:	d02c      	beq.n	5654 <_printf_i+0x7c>
    55fa:	d808      	bhi.n	560e <_printf_i+0x36>
    55fc:	2a00      	cmp	r2, #0
    55fe:	d100      	bne.n	5602 <_printf_i+0x2a>
    5600:	e099      	b.n	5736 <_printf_i+0x15e>
    5602:	2a58      	cmp	r2, #88	; 0x58
    5604:	d054      	beq.n	56b0 <_printf_i+0xd8>
    5606:	0026      	movs	r6, r4
    5608:	3642      	adds	r6, #66	; 0x42
    560a:	7032      	strb	r2, [r6, #0]
    560c:	e029      	b.n	5662 <_printf_i+0x8a>
    560e:	2a64      	cmp	r2, #100	; 0x64
    5610:	d001      	beq.n	5616 <_printf_i+0x3e>
    5612:	2a69      	cmp	r2, #105	; 0x69
    5614:	d1f7      	bne.n	5606 <_printf_i+0x2e>
    5616:	6821      	ldr	r1, [r4, #0]
    5618:	681a      	ldr	r2, [r3, #0]
    561a:	0608      	lsls	r0, r1, #24
    561c:	d523      	bpl.n	5666 <_printf_i+0x8e>
    561e:	1d11      	adds	r1, r2, #4
    5620:	6019      	str	r1, [r3, #0]
    5622:	6815      	ldr	r5, [r2, #0]
    5624:	e025      	b.n	5672 <_printf_i+0x9a>
    5626:	2a73      	cmp	r2, #115	; 0x73
    5628:	d100      	bne.n	562c <_printf_i+0x54>
    562a:	e088      	b.n	573e <_printf_i+0x166>
    562c:	d808      	bhi.n	5640 <_printf_i+0x68>
    562e:	2a6f      	cmp	r2, #111	; 0x6f
    5630:	d029      	beq.n	5686 <_printf_i+0xae>
    5632:	2a70      	cmp	r2, #112	; 0x70
    5634:	d1e7      	bne.n	5606 <_printf_i+0x2e>
    5636:	2220      	movs	r2, #32
    5638:	6809      	ldr	r1, [r1, #0]
    563a:	430a      	orrs	r2, r1
    563c:	6022      	str	r2, [r4, #0]
    563e:	e003      	b.n	5648 <_printf_i+0x70>
    5640:	2a75      	cmp	r2, #117	; 0x75
    5642:	d020      	beq.n	5686 <_printf_i+0xae>
    5644:	2a78      	cmp	r2, #120	; 0x78
    5646:	d1de      	bne.n	5606 <_printf_i+0x2e>
    5648:	0022      	movs	r2, r4
    564a:	2178      	movs	r1, #120	; 0x78
    564c:	3245      	adds	r2, #69	; 0x45
    564e:	7011      	strb	r1, [r2, #0]
    5650:	4a6c      	ldr	r2, [pc, #432]	; (5804 <_printf_i+0x22c>)
    5652:	e030      	b.n	56b6 <_printf_i+0xde>
    5654:	000e      	movs	r6, r1
    5656:	681a      	ldr	r2, [r3, #0]
    5658:	3642      	adds	r6, #66	; 0x42
    565a:	1d11      	adds	r1, r2, #4
    565c:	6019      	str	r1, [r3, #0]
    565e:	6813      	ldr	r3, [r2, #0]
    5660:	7033      	strb	r3, [r6, #0]
    5662:	2301      	movs	r3, #1
    5664:	e079      	b.n	575a <_printf_i+0x182>
    5666:	0649      	lsls	r1, r1, #25
    5668:	d5d9      	bpl.n	561e <_printf_i+0x46>
    566a:	1d11      	adds	r1, r2, #4
    566c:	6019      	str	r1, [r3, #0]
    566e:	2300      	movs	r3, #0
    5670:	5ed5      	ldrsh	r5, [r2, r3]
    5672:	2d00      	cmp	r5, #0
    5674:	da03      	bge.n	567e <_printf_i+0xa6>
    5676:	232d      	movs	r3, #45	; 0x2d
    5678:	9a04      	ldr	r2, [sp, #16]
    567a:	426d      	negs	r5, r5
    567c:	7013      	strb	r3, [r2, #0]
    567e:	4b62      	ldr	r3, [pc, #392]	; (5808 <_printf_i+0x230>)
    5680:	270a      	movs	r7, #10
    5682:	9303      	str	r3, [sp, #12]
    5684:	e02f      	b.n	56e6 <_printf_i+0x10e>
    5686:	6820      	ldr	r0, [r4, #0]
    5688:	6819      	ldr	r1, [r3, #0]
    568a:	0605      	lsls	r5, r0, #24
    568c:	d503      	bpl.n	5696 <_printf_i+0xbe>
    568e:	1d08      	adds	r0, r1, #4
    5690:	6018      	str	r0, [r3, #0]
    5692:	680d      	ldr	r5, [r1, #0]
    5694:	e005      	b.n	56a2 <_printf_i+0xca>
    5696:	0640      	lsls	r0, r0, #25
    5698:	d5f9      	bpl.n	568e <_printf_i+0xb6>
    569a:	680d      	ldr	r5, [r1, #0]
    569c:	1d08      	adds	r0, r1, #4
    569e:	6018      	str	r0, [r3, #0]
    56a0:	b2ad      	uxth	r5, r5
    56a2:	4b59      	ldr	r3, [pc, #356]	; (5808 <_printf_i+0x230>)
    56a4:	2708      	movs	r7, #8
    56a6:	9303      	str	r3, [sp, #12]
    56a8:	2a6f      	cmp	r2, #111	; 0x6f
    56aa:	d018      	beq.n	56de <_printf_i+0x106>
    56ac:	270a      	movs	r7, #10
    56ae:	e016      	b.n	56de <_printf_i+0x106>
    56b0:	3145      	adds	r1, #69	; 0x45
    56b2:	700a      	strb	r2, [r1, #0]
    56b4:	4a54      	ldr	r2, [pc, #336]	; (5808 <_printf_i+0x230>)
    56b6:	9203      	str	r2, [sp, #12]
    56b8:	681a      	ldr	r2, [r3, #0]
    56ba:	6821      	ldr	r1, [r4, #0]
    56bc:	1d10      	adds	r0, r2, #4
    56be:	6018      	str	r0, [r3, #0]
    56c0:	6815      	ldr	r5, [r2, #0]
    56c2:	0608      	lsls	r0, r1, #24
    56c4:	d522      	bpl.n	570c <_printf_i+0x134>
    56c6:	07cb      	lsls	r3, r1, #31
    56c8:	d502      	bpl.n	56d0 <_printf_i+0xf8>
    56ca:	2320      	movs	r3, #32
    56cc:	4319      	orrs	r1, r3
    56ce:	6021      	str	r1, [r4, #0]
    56d0:	2710      	movs	r7, #16
    56d2:	2d00      	cmp	r5, #0
    56d4:	d103      	bne.n	56de <_printf_i+0x106>
    56d6:	2320      	movs	r3, #32
    56d8:	6822      	ldr	r2, [r4, #0]
    56da:	439a      	bics	r2, r3
    56dc:	6022      	str	r2, [r4, #0]
    56de:	0023      	movs	r3, r4
    56e0:	2200      	movs	r2, #0
    56e2:	3343      	adds	r3, #67	; 0x43
    56e4:	701a      	strb	r2, [r3, #0]
    56e6:	6863      	ldr	r3, [r4, #4]
    56e8:	60a3      	str	r3, [r4, #8]
    56ea:	2b00      	cmp	r3, #0
    56ec:	db5c      	blt.n	57a8 <_printf_i+0x1d0>
    56ee:	2204      	movs	r2, #4
    56f0:	6821      	ldr	r1, [r4, #0]
    56f2:	4391      	bics	r1, r2
    56f4:	6021      	str	r1, [r4, #0]
    56f6:	2d00      	cmp	r5, #0
    56f8:	d158      	bne.n	57ac <_printf_i+0x1d4>
    56fa:	9e04      	ldr	r6, [sp, #16]
    56fc:	2b00      	cmp	r3, #0
    56fe:	d064      	beq.n	57ca <_printf_i+0x1f2>
    5700:	0026      	movs	r6, r4
    5702:	9b03      	ldr	r3, [sp, #12]
    5704:	3642      	adds	r6, #66	; 0x42
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	7033      	strb	r3, [r6, #0]
    570a:	e05e      	b.n	57ca <_printf_i+0x1f2>
    570c:	0648      	lsls	r0, r1, #25
    570e:	d5da      	bpl.n	56c6 <_printf_i+0xee>
    5710:	b2ad      	uxth	r5, r5
    5712:	e7d8      	b.n	56c6 <_printf_i+0xee>
    5714:	6809      	ldr	r1, [r1, #0]
    5716:	681a      	ldr	r2, [r3, #0]
    5718:	0608      	lsls	r0, r1, #24
    571a:	d505      	bpl.n	5728 <_printf_i+0x150>
    571c:	1d11      	adds	r1, r2, #4
    571e:	6019      	str	r1, [r3, #0]
    5720:	6813      	ldr	r3, [r2, #0]
    5722:	6962      	ldr	r2, [r4, #20]
    5724:	601a      	str	r2, [r3, #0]
    5726:	e006      	b.n	5736 <_printf_i+0x15e>
    5728:	0649      	lsls	r1, r1, #25
    572a:	d5f7      	bpl.n	571c <_printf_i+0x144>
    572c:	1d11      	adds	r1, r2, #4
    572e:	6019      	str	r1, [r3, #0]
    5730:	6813      	ldr	r3, [r2, #0]
    5732:	8aa2      	ldrh	r2, [r4, #20]
    5734:	801a      	strh	r2, [r3, #0]
    5736:	2300      	movs	r3, #0
    5738:	9e04      	ldr	r6, [sp, #16]
    573a:	6123      	str	r3, [r4, #16]
    573c:	e054      	b.n	57e8 <_printf_i+0x210>
    573e:	681a      	ldr	r2, [r3, #0]
    5740:	1d11      	adds	r1, r2, #4
    5742:	6019      	str	r1, [r3, #0]
    5744:	6816      	ldr	r6, [r2, #0]
    5746:	2100      	movs	r1, #0
    5748:	6862      	ldr	r2, [r4, #4]
    574a:	0030      	movs	r0, r6
    574c:	f000 fe4e 	bl	63ec <memchr>
    5750:	2800      	cmp	r0, #0
    5752:	d001      	beq.n	5758 <_printf_i+0x180>
    5754:	1b80      	subs	r0, r0, r6
    5756:	6060      	str	r0, [r4, #4]
    5758:	6863      	ldr	r3, [r4, #4]
    575a:	6123      	str	r3, [r4, #16]
    575c:	2300      	movs	r3, #0
    575e:	9a04      	ldr	r2, [sp, #16]
    5760:	7013      	strb	r3, [r2, #0]
    5762:	e041      	b.n	57e8 <_printf_i+0x210>
    5764:	6923      	ldr	r3, [r4, #16]
    5766:	0032      	movs	r2, r6
    5768:	9906      	ldr	r1, [sp, #24]
    576a:	9805      	ldr	r0, [sp, #20]
    576c:	9d07      	ldr	r5, [sp, #28]
    576e:	47a8      	blx	r5
    5770:	1c43      	adds	r3, r0, #1
    5772:	d043      	beq.n	57fc <_printf_i+0x224>
    5774:	6823      	ldr	r3, [r4, #0]
    5776:	2500      	movs	r5, #0
    5778:	079b      	lsls	r3, r3, #30
    577a:	d40f      	bmi.n	579c <_printf_i+0x1c4>
    577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    577e:	68e0      	ldr	r0, [r4, #12]
    5780:	4298      	cmp	r0, r3
    5782:	da3d      	bge.n	5800 <_printf_i+0x228>
    5784:	0018      	movs	r0, r3
    5786:	e03b      	b.n	5800 <_printf_i+0x228>
    5788:	0022      	movs	r2, r4
    578a:	2301      	movs	r3, #1
    578c:	3219      	adds	r2, #25
    578e:	9906      	ldr	r1, [sp, #24]
    5790:	9805      	ldr	r0, [sp, #20]
    5792:	9e07      	ldr	r6, [sp, #28]
    5794:	47b0      	blx	r6
    5796:	1c43      	adds	r3, r0, #1
    5798:	d030      	beq.n	57fc <_printf_i+0x224>
    579a:	3501      	adds	r5, #1
    579c:	68e3      	ldr	r3, [r4, #12]
    579e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    57a0:	1a9b      	subs	r3, r3, r2
    57a2:	429d      	cmp	r5, r3
    57a4:	dbf0      	blt.n	5788 <_printf_i+0x1b0>
    57a6:	e7e9      	b.n	577c <_printf_i+0x1a4>
    57a8:	2d00      	cmp	r5, #0
    57aa:	d0a9      	beq.n	5700 <_printf_i+0x128>
    57ac:	9e04      	ldr	r6, [sp, #16]
    57ae:	0028      	movs	r0, r5
    57b0:	0039      	movs	r1, r7
    57b2:	f7fd fa67 	bl	2c84 <__aeabi_uidivmod>
    57b6:	9b03      	ldr	r3, [sp, #12]
    57b8:	3e01      	subs	r6, #1
    57ba:	5c5b      	ldrb	r3, [r3, r1]
    57bc:	0028      	movs	r0, r5
    57be:	7033      	strb	r3, [r6, #0]
    57c0:	0039      	movs	r1, r7
    57c2:	f7fd f9d9 	bl	2b78 <__udivsi3>
    57c6:	1e05      	subs	r5, r0, #0
    57c8:	d1f1      	bne.n	57ae <_printf_i+0x1d6>
    57ca:	2f08      	cmp	r7, #8
    57cc:	d109      	bne.n	57e2 <_printf_i+0x20a>
    57ce:	6823      	ldr	r3, [r4, #0]
    57d0:	07db      	lsls	r3, r3, #31
    57d2:	d506      	bpl.n	57e2 <_printf_i+0x20a>
    57d4:	6863      	ldr	r3, [r4, #4]
    57d6:	6922      	ldr	r2, [r4, #16]
    57d8:	4293      	cmp	r3, r2
    57da:	dc02      	bgt.n	57e2 <_printf_i+0x20a>
    57dc:	2330      	movs	r3, #48	; 0x30
    57de:	3e01      	subs	r6, #1
    57e0:	7033      	strb	r3, [r6, #0]
    57e2:	9b04      	ldr	r3, [sp, #16]
    57e4:	1b9b      	subs	r3, r3, r6
    57e6:	6123      	str	r3, [r4, #16]
    57e8:	9b07      	ldr	r3, [sp, #28]
    57ea:	aa09      	add	r2, sp, #36	; 0x24
    57ec:	9300      	str	r3, [sp, #0]
    57ee:	0021      	movs	r1, r4
    57f0:	9b06      	ldr	r3, [sp, #24]
    57f2:	9805      	ldr	r0, [sp, #20]
    57f4:	f7ff fe82 	bl	54fc <_printf_common>
    57f8:	1c43      	adds	r3, r0, #1
    57fa:	d1b3      	bne.n	5764 <_printf_i+0x18c>
    57fc:	2001      	movs	r0, #1
    57fe:	4240      	negs	r0, r0
    5800:	b00b      	add	sp, #44	; 0x2c
    5802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5804:	00006c00 	.word	0x00006c00
    5808:	00006bef 	.word	0x00006bef

0000580c <__svfiscanf_r>:
    580c:	b5f0      	push	{r4, r5, r6, r7, lr}
    580e:	4cbd      	ldr	r4, [pc, #756]	; (5b04 <__svfiscanf_r+0x2f8>)
    5810:	2586      	movs	r5, #134	; 0x86
    5812:	44a5      	add	sp, r4
    5814:	9303      	str	r3, [sp, #12]
    5816:	2300      	movs	r3, #0
    5818:	9348      	str	r3, [sp, #288]	; 0x120
    581a:	9349      	str	r3, [sp, #292]	; 0x124
    581c:	ab05      	add	r3, sp, #20
    581e:	934a      	str	r3, [sp, #296]	; 0x128
    5820:	23be      	movs	r3, #190	; 0xbe
    5822:	006d      	lsls	r5, r5, #1
    5824:	9000      	str	r0, [sp, #0]
    5826:	000c      	movs	r4, r1
    5828:	a802      	add	r0, sp, #8
    582a:	49b7      	ldr	r1, [pc, #732]	; (5b08 <__svfiscanf_r+0x2fc>)
    582c:	005b      	lsls	r3, r3, #1
    582e:	1940      	adds	r0, r0, r5
    5830:	27c0      	movs	r7, #192	; 0xc0
    5832:	50c1      	str	r1, [r0, r3]
    5834:	ab02      	add	r3, sp, #8
    5836:	195b      	adds	r3, r3, r5
    5838:	0015      	movs	r5, r2
    583a:	49b4      	ldr	r1, [pc, #720]	; (5b0c <__svfiscanf_r+0x300>)
    583c:	007f      	lsls	r7, r7, #1
    583e:	51d9      	str	r1, [r3, r7]
    5840:	782b      	ldrb	r3, [r5, #0]
    5842:	2b00      	cmp	r3, #0
    5844:	d100      	bne.n	5848 <__svfiscanf_r+0x3c>
    5846:	e15b      	b.n	5b00 <__svfiscanf_r+0x2f4>
    5848:	f7ff fbd6 	bl	4ff8 <__locale_ctype_ptr>
    584c:	2208      	movs	r2, #8
    584e:	782b      	ldrb	r3, [r5, #0]
    5850:	18c0      	adds	r0, r0, r3
    5852:	9301      	str	r3, [sp, #4]
    5854:	7843      	ldrb	r3, [r0, #1]
    5856:	4013      	ands	r3, r2
    5858:	d141      	bne.n	58de <__svfiscanf_r+0xd2>
    585a:	9a01      	ldr	r2, [sp, #4]
    585c:	1c6e      	adds	r6, r5, #1
    585e:	2a25      	cmp	r2, #37	; 0x25
    5860:	d000      	beq.n	5864 <__svfiscanf_r+0x58>
    5862:	e0a8      	b.n	59b6 <__svfiscanf_r+0x1aa>
    5864:	9347      	str	r3, [sp, #284]	; 0x11c
    5866:	9345      	str	r3, [sp, #276]	; 0x114
    5868:	786b      	ldrb	r3, [r5, #1]
    586a:	2b2a      	cmp	r3, #42	; 0x2a
    586c:	d102      	bne.n	5874 <__svfiscanf_r+0x68>
    586e:	3b1a      	subs	r3, #26
    5870:	9345      	str	r3, [sp, #276]	; 0x114
    5872:	1cae      	adds	r6, r5, #2
    5874:	0035      	movs	r5, r6
    5876:	220a      	movs	r2, #10
    5878:	7829      	ldrb	r1, [r5, #0]
    587a:	000b      	movs	r3, r1
    587c:	3b30      	subs	r3, #48	; 0x30
    587e:	2b09      	cmp	r3, #9
    5880:	d948      	bls.n	5914 <__svfiscanf_r+0x108>
    5882:	4ea3      	ldr	r6, [pc, #652]	; (5b10 <__svfiscanf_r+0x304>)
    5884:	2203      	movs	r2, #3
    5886:	0030      	movs	r0, r6
    5888:	f000 fdb0 	bl	63ec <memchr>
    588c:	2800      	cmp	r0, #0
    588e:	d007      	beq.n	58a0 <__svfiscanf_r+0x94>
    5890:	2301      	movs	r3, #1
    5892:	1b80      	subs	r0, r0, r6
    5894:	4083      	lsls	r3, r0
    5896:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5898:	3501      	adds	r5, #1
    589a:	4313      	orrs	r3, r2
    589c:	9202      	str	r2, [sp, #8]
    589e:	9345      	str	r3, [sp, #276]	; 0x114
    58a0:	782b      	ldrb	r3, [r5, #0]
    58a2:	1c6e      	adds	r6, r5, #1
    58a4:	2b67      	cmp	r3, #103	; 0x67
    58a6:	d858      	bhi.n	595a <__svfiscanf_r+0x14e>
    58a8:	2b65      	cmp	r3, #101	; 0x65
    58aa:	d300      	bcc.n	58ae <__svfiscanf_r+0xa2>
    58ac:	e0dd      	b.n	5a6a <__svfiscanf_r+0x25e>
    58ae:	2b47      	cmp	r3, #71	; 0x47
    58b0:	d838      	bhi.n	5924 <__svfiscanf_r+0x118>
    58b2:	2b45      	cmp	r3, #69	; 0x45
    58b4:	d300      	bcc.n	58b8 <__svfiscanf_r+0xac>
    58b6:	e0d8      	b.n	5a6a <__svfiscanf_r+0x25e>
    58b8:	2b00      	cmp	r3, #0
    58ba:	d100      	bne.n	58be <__svfiscanf_r+0xb2>
    58bc:	e11d      	b.n	5afa <__svfiscanf_r+0x2ee>
    58be:	2b25      	cmp	r3, #37	; 0x25
    58c0:	d079      	beq.n	59b6 <__svfiscanf_r+0x1aa>
    58c2:	2303      	movs	r3, #3
    58c4:	934b      	str	r3, [sp, #300]	; 0x12c
    58c6:	3307      	adds	r3, #7
    58c8:	9346      	str	r3, [sp, #280]	; 0x118
    58ca:	e053      	b.n	5974 <__svfiscanf_r+0x168>
    58cc:	9a49      	ldr	r2, [sp, #292]	; 0x124
    58ce:	3301      	adds	r3, #1
    58d0:	9201      	str	r2, [sp, #4]
    58d2:	3201      	adds	r2, #1
    58d4:	9249      	str	r2, [sp, #292]	; 0x124
    58d6:	6862      	ldr	r2, [r4, #4]
    58d8:	6023      	str	r3, [r4, #0]
    58da:	3a01      	subs	r2, #1
    58dc:	6062      	str	r2, [r4, #4]
    58de:	6863      	ldr	r3, [r4, #4]
    58e0:	2b00      	cmp	r3, #0
    58e2:	dd0b      	ble.n	58fc <__svfiscanf_r+0xf0>
    58e4:	f7ff fb88 	bl	4ff8 <__locale_ctype_ptr>
    58e8:	2108      	movs	r1, #8
    58ea:	6823      	ldr	r3, [r4, #0]
    58ec:	781a      	ldrb	r2, [r3, #0]
    58ee:	1880      	adds	r0, r0, r2
    58f0:	7842      	ldrb	r2, [r0, #1]
    58f2:	420a      	tst	r2, r1
    58f4:	d1ea      	bne.n	58cc <__svfiscanf_r+0xc0>
    58f6:	1c6e      	adds	r6, r5, #1
    58f8:	0035      	movs	r5, r6
    58fa:	e7a1      	b.n	5840 <__svfiscanf_r+0x34>
    58fc:	2286      	movs	r2, #134	; 0x86
    58fe:	ab02      	add	r3, sp, #8
    5900:	0052      	lsls	r2, r2, #1
    5902:	189b      	adds	r3, r3, r2
    5904:	59db      	ldr	r3, [r3, r7]
    5906:	0021      	movs	r1, r4
    5908:	9800      	ldr	r0, [sp, #0]
    590a:	9301      	str	r3, [sp, #4]
    590c:	4798      	blx	r3
    590e:	2800      	cmp	r0, #0
    5910:	d0e8      	beq.n	58e4 <__svfiscanf_r+0xd8>
    5912:	e7f0      	b.n	58f6 <__svfiscanf_r+0xea>
    5914:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5916:	3501      	adds	r5, #1
    5918:	9302      	str	r3, [sp, #8]
    591a:	4353      	muls	r3, r2
    591c:	3b30      	subs	r3, #48	; 0x30
    591e:	1859      	adds	r1, r3, r1
    5920:	9147      	str	r1, [sp, #284]	; 0x11c
    5922:	e7a9      	b.n	5878 <__svfiscanf_r+0x6c>
    5924:	2b5b      	cmp	r3, #91	; 0x5b
    5926:	d100      	bne.n	592a <__svfiscanf_r+0x11e>
    5928:	e077      	b.n	5a1a <__svfiscanf_r+0x20e>
    592a:	d80f      	bhi.n	594c <__svfiscanf_r+0x140>
    592c:	2b58      	cmp	r3, #88	; 0x58
    592e:	d1c8      	bne.n	58c2 <__svfiscanf_r+0xb6>
    5930:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5932:	9201      	str	r2, [sp, #4]
    5934:	2280      	movs	r2, #128	; 0x80
    5936:	9901      	ldr	r1, [sp, #4]
    5938:	0092      	lsls	r2, r2, #2
    593a:	430a      	orrs	r2, r1
    593c:	9245      	str	r2, [sp, #276]	; 0x114
    593e:	2210      	movs	r2, #16
    5940:	9246      	str	r2, [sp, #280]	; 0x118
    5942:	2203      	movs	r2, #3
    5944:	2b6e      	cmp	r3, #110	; 0x6e
    5946:	dd14      	ble.n	5972 <__svfiscanf_r+0x166>
    5948:	3201      	adds	r2, #1
    594a:	e012      	b.n	5972 <__svfiscanf_r+0x166>
    594c:	2b63      	cmp	r3, #99	; 0x63
    594e:	d100      	bne.n	5952 <__svfiscanf_r+0x146>
    5950:	e071      	b.n	5a36 <__svfiscanf_r+0x22a>
    5952:	2b64      	cmp	r3, #100	; 0x64
    5954:	d1b5      	bne.n	58c2 <__svfiscanf_r+0xb6>
    5956:	220a      	movs	r2, #10
    5958:	e7f2      	b.n	5940 <__svfiscanf_r+0x134>
    595a:	2b70      	cmp	r3, #112	; 0x70
    595c:	d052      	beq.n	5a04 <__svfiscanf_r+0x1f8>
    595e:	d822      	bhi.n	59a6 <__svfiscanf_r+0x19a>
    5960:	2b6e      	cmp	r3, #110	; 0x6e
    5962:	d100      	bne.n	5966 <__svfiscanf_r+0x15a>
    5964:	e06f      	b.n	5a46 <__svfiscanf_r+0x23a>
    5966:	d854      	bhi.n	5a12 <__svfiscanf_r+0x206>
    5968:	2b69      	cmp	r3, #105	; 0x69
    596a:	d1aa      	bne.n	58c2 <__svfiscanf_r+0xb6>
    596c:	2300      	movs	r3, #0
    596e:	2203      	movs	r2, #3
    5970:	9346      	str	r3, [sp, #280]	; 0x118
    5972:	924b      	str	r2, [sp, #300]	; 0x12c
    5974:	6863      	ldr	r3, [r4, #4]
    5976:	2b00      	cmp	r3, #0
    5978:	dc00      	bgt.n	597c <__svfiscanf_r+0x170>
    597a:	e078      	b.n	5a6e <__svfiscanf_r+0x262>
    597c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    597e:	9301      	str	r3, [sp, #4]
    5980:	065b      	lsls	r3, r3, #25
    5982:	d400      	bmi.n	5986 <__svfiscanf_r+0x17a>
    5984:	e08b      	b.n	5a9e <__svfiscanf_r+0x292>
    5986:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5988:	2b02      	cmp	r3, #2
    598a:	dd00      	ble.n	598e <__svfiscanf_r+0x182>
    598c:	e09d      	b.n	5aca <__svfiscanf_r+0x2be>
    598e:	ab03      	add	r3, sp, #12
    5990:	0022      	movs	r2, r4
    5992:	a945      	add	r1, sp, #276	; 0x114
    5994:	9800      	ldr	r0, [sp, #0]
    5996:	f000 f8e7 	bl	5b68 <_scanf_chars>
    599a:	2801      	cmp	r0, #1
    599c:	d100      	bne.n	59a0 <__svfiscanf_r+0x194>
    599e:	e0af      	b.n	5b00 <__svfiscanf_r+0x2f4>
    59a0:	2802      	cmp	r0, #2
    59a2:	d1a9      	bne.n	58f8 <__svfiscanf_r+0xec>
    59a4:	e025      	b.n	59f2 <__svfiscanf_r+0x1e6>
    59a6:	2b75      	cmp	r3, #117	; 0x75
    59a8:	d0d5      	beq.n	5956 <__svfiscanf_r+0x14a>
    59aa:	2b78      	cmp	r3, #120	; 0x78
    59ac:	d0c0      	beq.n	5930 <__svfiscanf_r+0x124>
    59ae:	2b73      	cmp	r3, #115	; 0x73
    59b0:	d187      	bne.n	58c2 <__svfiscanf_r+0xb6>
    59b2:	2302      	movs	r3, #2
    59b4:	e03d      	b.n	5a32 <__svfiscanf_r+0x226>
    59b6:	6863      	ldr	r3, [r4, #4]
    59b8:	2b00      	cmp	r3, #0
    59ba:	dd0f      	ble.n	59dc <__svfiscanf_r+0x1d0>
    59bc:	6823      	ldr	r3, [r4, #0]
    59be:	9901      	ldr	r1, [sp, #4]
    59c0:	781a      	ldrb	r2, [r3, #0]
    59c2:	4291      	cmp	r1, r2
    59c4:	d000      	beq.n	59c8 <__svfiscanf_r+0x1bc>
    59c6:	e09b      	b.n	5b00 <__svfiscanf_r+0x2f4>
    59c8:	3301      	adds	r3, #1
    59ca:	6862      	ldr	r2, [r4, #4]
    59cc:	6023      	str	r3, [r4, #0]
    59ce:	9b49      	ldr	r3, [sp, #292]	; 0x124
    59d0:	3a01      	subs	r2, #1
    59d2:	9301      	str	r3, [sp, #4]
    59d4:	3301      	adds	r3, #1
    59d6:	6062      	str	r2, [r4, #4]
    59d8:	9349      	str	r3, [sp, #292]	; 0x124
    59da:	e78d      	b.n	58f8 <__svfiscanf_r+0xec>
    59dc:	2286      	movs	r2, #134	; 0x86
    59de:	ab02      	add	r3, sp, #8
    59e0:	0052      	lsls	r2, r2, #1
    59e2:	189b      	adds	r3, r3, r2
    59e4:	59db      	ldr	r3, [r3, r7]
    59e6:	0021      	movs	r1, r4
    59e8:	9800      	ldr	r0, [sp, #0]
    59ea:	9302      	str	r3, [sp, #8]
    59ec:	4798      	blx	r3
    59ee:	2800      	cmp	r0, #0
    59f0:	d0e4      	beq.n	59bc <__svfiscanf_r+0x1b0>
    59f2:	9848      	ldr	r0, [sp, #288]	; 0x120
    59f4:	2800      	cmp	r0, #0
    59f6:	d000      	beq.n	59fa <__svfiscanf_r+0x1ee>
    59f8:	e07b      	b.n	5af2 <__svfiscanf_r+0x2e6>
    59fa:	3801      	subs	r0, #1
    59fc:	23a7      	movs	r3, #167	; 0xa7
    59fe:	009b      	lsls	r3, r3, #2
    5a00:	449d      	add	sp, r3
    5a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a04:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5a06:	9201      	str	r2, [sp, #4]
    5a08:	2220      	movs	r2, #32
    5a0a:	9901      	ldr	r1, [sp, #4]
    5a0c:	430a      	orrs	r2, r1
    5a0e:	9245      	str	r2, [sp, #276]	; 0x114
    5a10:	e78e      	b.n	5930 <__svfiscanf_r+0x124>
    5a12:	2308      	movs	r3, #8
    5a14:	2204      	movs	r2, #4
    5a16:	9346      	str	r3, [sp, #280]	; 0x118
    5a18:	e7ab      	b.n	5972 <__svfiscanf_r+0x166>
    5a1a:	0031      	movs	r1, r6
    5a1c:	a805      	add	r0, sp, #20
    5a1e:	f000 fab5 	bl	5f8c <__sccl>
    5a22:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5a24:	0006      	movs	r6, r0
    5a26:	9301      	str	r3, [sp, #4]
    5a28:	2340      	movs	r3, #64	; 0x40
    5a2a:	9a01      	ldr	r2, [sp, #4]
    5a2c:	4313      	orrs	r3, r2
    5a2e:	9345      	str	r3, [sp, #276]	; 0x114
    5a30:	2301      	movs	r3, #1
    5a32:	934b      	str	r3, [sp, #300]	; 0x12c
    5a34:	e79e      	b.n	5974 <__svfiscanf_r+0x168>
    5a36:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5a38:	9301      	str	r3, [sp, #4]
    5a3a:	2340      	movs	r3, #64	; 0x40
    5a3c:	9a01      	ldr	r2, [sp, #4]
    5a3e:	4313      	orrs	r3, r2
    5a40:	9345      	str	r3, [sp, #276]	; 0x114
    5a42:	2300      	movs	r3, #0
    5a44:	e7f5      	b.n	5a32 <__svfiscanf_r+0x226>
    5a46:	9945      	ldr	r1, [sp, #276]	; 0x114
    5a48:	06cb      	lsls	r3, r1, #27
    5a4a:	d500      	bpl.n	5a4e <__svfiscanf_r+0x242>
    5a4c:	e754      	b.n	58f8 <__svfiscanf_r+0xec>
    5a4e:	9b03      	ldr	r3, [sp, #12]
    5a50:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5a52:	07c8      	lsls	r0, r1, #31
    5a54:	d504      	bpl.n	5a60 <__svfiscanf_r+0x254>
    5a56:	1d19      	adds	r1, r3, #4
    5a58:	9103      	str	r1, [sp, #12]
    5a5a:	681b      	ldr	r3, [r3, #0]
    5a5c:	801a      	strh	r2, [r3, #0]
    5a5e:	e74b      	b.n	58f8 <__svfiscanf_r+0xec>
    5a60:	1d19      	adds	r1, r3, #4
    5a62:	9103      	str	r1, [sp, #12]
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	601a      	str	r2, [r3, #0]
    5a68:	e746      	b.n	58f8 <__svfiscanf_r+0xec>
    5a6a:	2305      	movs	r3, #5
    5a6c:	e7e1      	b.n	5a32 <__svfiscanf_r+0x226>
    5a6e:	2286      	movs	r2, #134	; 0x86
    5a70:	ab02      	add	r3, sp, #8
    5a72:	0052      	lsls	r2, r2, #1
    5a74:	189b      	adds	r3, r3, r2
    5a76:	59db      	ldr	r3, [r3, r7]
    5a78:	0021      	movs	r1, r4
    5a7a:	9800      	ldr	r0, [sp, #0]
    5a7c:	9301      	str	r3, [sp, #4]
    5a7e:	4798      	blx	r3
    5a80:	2800      	cmp	r0, #0
    5a82:	d100      	bne.n	5a86 <__svfiscanf_r+0x27a>
    5a84:	e77a      	b.n	597c <__svfiscanf_r+0x170>
    5a86:	e7b4      	b.n	59f2 <__svfiscanf_r+0x1e6>
    5a88:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5a8a:	9201      	str	r2, [sp, #4]
    5a8c:	3201      	adds	r2, #1
    5a8e:	9249      	str	r2, [sp, #292]	; 0x124
    5a90:	6862      	ldr	r2, [r4, #4]
    5a92:	3a01      	subs	r2, #1
    5a94:	6062      	str	r2, [r4, #4]
    5a96:	2a00      	cmp	r2, #0
    5a98:	dd0b      	ble.n	5ab2 <__svfiscanf_r+0x2a6>
    5a9a:	3301      	adds	r3, #1
    5a9c:	6023      	str	r3, [r4, #0]
    5a9e:	f7ff faab 	bl	4ff8 <__locale_ctype_ptr>
    5aa2:	2108      	movs	r1, #8
    5aa4:	6823      	ldr	r3, [r4, #0]
    5aa6:	781a      	ldrb	r2, [r3, #0]
    5aa8:	1880      	adds	r0, r0, r2
    5aaa:	7842      	ldrb	r2, [r0, #1]
    5aac:	420a      	tst	r2, r1
    5aae:	d1eb      	bne.n	5a88 <__svfiscanf_r+0x27c>
    5ab0:	e769      	b.n	5986 <__svfiscanf_r+0x17a>
    5ab2:	2286      	movs	r2, #134	; 0x86
    5ab4:	ab02      	add	r3, sp, #8
    5ab6:	0052      	lsls	r2, r2, #1
    5ab8:	189b      	adds	r3, r3, r2
    5aba:	59db      	ldr	r3, [r3, r7]
    5abc:	0021      	movs	r1, r4
    5abe:	9800      	ldr	r0, [sp, #0]
    5ac0:	9301      	str	r3, [sp, #4]
    5ac2:	4798      	blx	r3
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d0ea      	beq.n	5a9e <__svfiscanf_r+0x292>
    5ac8:	e793      	b.n	59f2 <__svfiscanf_r+0x1e6>
    5aca:	2b04      	cmp	r3, #4
    5acc:	dc06      	bgt.n	5adc <__svfiscanf_r+0x2d0>
    5ace:	ab03      	add	r3, sp, #12
    5ad0:	0022      	movs	r2, r4
    5ad2:	a945      	add	r1, sp, #276	; 0x114
    5ad4:	9800      	ldr	r0, [sp, #0]
    5ad6:	f000 f8ab 	bl	5c30 <_scanf_i>
    5ada:	e75e      	b.n	599a <__svfiscanf_r+0x18e>
    5adc:	4b0d      	ldr	r3, [pc, #52]	; (5b14 <__svfiscanf_r+0x308>)
    5ade:	2b00      	cmp	r3, #0
    5ae0:	d100      	bne.n	5ae4 <__svfiscanf_r+0x2d8>
    5ae2:	e709      	b.n	58f8 <__svfiscanf_r+0xec>
    5ae4:	ab03      	add	r3, sp, #12
    5ae6:	0022      	movs	r2, r4
    5ae8:	a945      	add	r1, sp, #276	; 0x114
    5aea:	9800      	ldr	r0, [sp, #0]
    5aec:	e000      	b.n	5af0 <__svfiscanf_r+0x2e4>
    5aee:	bf00      	nop
    5af0:	e753      	b.n	599a <__svfiscanf_r+0x18e>
    5af2:	89a3      	ldrh	r3, [r4, #12]
    5af4:	065b      	lsls	r3, r3, #25
    5af6:	d400      	bmi.n	5afa <__svfiscanf_r+0x2ee>
    5af8:	e780      	b.n	59fc <__svfiscanf_r+0x1f0>
    5afa:	2001      	movs	r0, #1
    5afc:	4240      	negs	r0, r0
    5afe:	e77d      	b.n	59fc <__svfiscanf_r+0x1f0>
    5b00:	9848      	ldr	r0, [sp, #288]	; 0x120
    5b02:	e77b      	b.n	59fc <__svfiscanf_r+0x1f0>
    5b04:	fffffd64 	.word	0xfffffd64
    5b08:	00006235 	.word	0x00006235
    5b0c:	00005e49 	.word	0x00005e49
    5b10:	00006be4 	.word	0x00006be4
    5b14:	00000000 	.word	0x00000000

00005b18 <_vfiscanf_r>:
    5b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b1a:	0004      	movs	r4, r0
    5b1c:	000d      	movs	r5, r1
    5b1e:	0016      	movs	r6, r2
    5b20:	001f      	movs	r7, r3
    5b22:	2800      	cmp	r0, #0
    5b24:	d004      	beq.n	5b30 <_vfiscanf_r+0x18>
    5b26:	6983      	ldr	r3, [r0, #24]
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d101      	bne.n	5b30 <_vfiscanf_r+0x18>
    5b2c:	f7ff f9b0 	bl	4e90 <__sinit>
    5b30:	4b0a      	ldr	r3, [pc, #40]	; (5b5c <_vfiscanf_r+0x44>)
    5b32:	429d      	cmp	r5, r3
    5b34:	d107      	bne.n	5b46 <_vfiscanf_r+0x2e>
    5b36:	6865      	ldr	r5, [r4, #4]
    5b38:	003b      	movs	r3, r7
    5b3a:	0032      	movs	r2, r6
    5b3c:	0029      	movs	r1, r5
    5b3e:	0020      	movs	r0, r4
    5b40:	f7ff fe64 	bl	580c <__svfiscanf_r>
    5b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b46:	4b06      	ldr	r3, [pc, #24]	; (5b60 <_vfiscanf_r+0x48>)
    5b48:	429d      	cmp	r5, r3
    5b4a:	d101      	bne.n	5b50 <_vfiscanf_r+0x38>
    5b4c:	68a5      	ldr	r5, [r4, #8]
    5b4e:	e7f3      	b.n	5b38 <_vfiscanf_r+0x20>
    5b50:	4b04      	ldr	r3, [pc, #16]	; (5b64 <_vfiscanf_r+0x4c>)
    5b52:	429d      	cmp	r5, r3
    5b54:	d1f0      	bne.n	5b38 <_vfiscanf_r+0x20>
    5b56:	68e5      	ldr	r5, [r4, #12]
    5b58:	e7ee      	b.n	5b38 <_vfiscanf_r+0x20>
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	00006b94 	.word	0x00006b94
    5b60:	00006bb4 	.word	0x00006bb4
    5b64:	00006b74 	.word	0x00006b74

00005b68 <_scanf_chars>:
    5b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b6a:	0015      	movs	r5, r2
    5b6c:	688a      	ldr	r2, [r1, #8]
    5b6e:	9001      	str	r0, [sp, #4]
    5b70:	000c      	movs	r4, r1
    5b72:	2a00      	cmp	r2, #0
    5b74:	d106      	bne.n	5b84 <_scanf_chars+0x1c>
    5b76:	698a      	ldr	r2, [r1, #24]
    5b78:	1e51      	subs	r1, r2, #1
    5b7a:	418a      	sbcs	r2, r1
    5b7c:	2101      	movs	r1, #1
    5b7e:	4252      	negs	r2, r2
    5b80:	430a      	orrs	r2, r1
    5b82:	60a2      	str	r2, [r4, #8]
    5b84:	6822      	ldr	r2, [r4, #0]
    5b86:	06d2      	lsls	r2, r2, #27
    5b88:	d403      	bmi.n	5b92 <_scanf_chars+0x2a>
    5b8a:	681a      	ldr	r2, [r3, #0]
    5b8c:	1d11      	adds	r1, r2, #4
    5b8e:	6019      	str	r1, [r3, #0]
    5b90:	6817      	ldr	r7, [r2, #0]
    5b92:	2600      	movs	r6, #0
    5b94:	69a3      	ldr	r3, [r4, #24]
    5b96:	2b00      	cmp	r3, #0
    5b98:	d01c      	beq.n	5bd4 <_scanf_chars+0x6c>
    5b9a:	2b01      	cmp	r3, #1
    5b9c:	d108      	bne.n	5bb0 <_scanf_chars+0x48>
    5b9e:	682b      	ldr	r3, [r5, #0]
    5ba0:	6962      	ldr	r2, [r4, #20]
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	5cd3      	ldrb	r3, [r2, r3]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d114      	bne.n	5bd4 <_scanf_chars+0x6c>
    5baa:	2e00      	cmp	r6, #0
    5bac:	d130      	bne.n	5c10 <_scanf_chars+0xa8>
    5bae:	e006      	b.n	5bbe <_scanf_chars+0x56>
    5bb0:	2b02      	cmp	r3, #2
    5bb2:	d006      	beq.n	5bc2 <_scanf_chars+0x5a>
    5bb4:	2e00      	cmp	r6, #0
    5bb6:	d12b      	bne.n	5c10 <_scanf_chars+0xa8>
    5bb8:	69a3      	ldr	r3, [r4, #24]
    5bba:	2b01      	cmp	r3, #1
    5bbc:	d128      	bne.n	5c10 <_scanf_chars+0xa8>
    5bbe:	2001      	movs	r0, #1
    5bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5bc2:	f7ff fa19 	bl	4ff8 <__locale_ctype_ptr>
    5bc6:	2208      	movs	r2, #8
    5bc8:	682b      	ldr	r3, [r5, #0]
    5bca:	781b      	ldrb	r3, [r3, #0]
    5bcc:	18c0      	adds	r0, r0, r3
    5bce:	7843      	ldrb	r3, [r0, #1]
    5bd0:	4213      	tst	r3, r2
    5bd2:	d1ef      	bne.n	5bb4 <_scanf_chars+0x4c>
    5bd4:	2210      	movs	r2, #16
    5bd6:	6823      	ldr	r3, [r4, #0]
    5bd8:	3601      	adds	r6, #1
    5bda:	4213      	tst	r3, r2
    5bdc:	d103      	bne.n	5be6 <_scanf_chars+0x7e>
    5bde:	682b      	ldr	r3, [r5, #0]
    5be0:	781b      	ldrb	r3, [r3, #0]
    5be2:	703b      	strb	r3, [r7, #0]
    5be4:	3701      	adds	r7, #1
    5be6:	682a      	ldr	r2, [r5, #0]
    5be8:	686b      	ldr	r3, [r5, #4]
    5bea:	3201      	adds	r2, #1
    5bec:	602a      	str	r2, [r5, #0]
    5bee:	68a2      	ldr	r2, [r4, #8]
    5bf0:	3b01      	subs	r3, #1
    5bf2:	3a01      	subs	r2, #1
    5bf4:	606b      	str	r3, [r5, #4]
    5bf6:	60a2      	str	r2, [r4, #8]
    5bf8:	2a00      	cmp	r2, #0
    5bfa:	d009      	beq.n	5c10 <_scanf_chars+0xa8>
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	dcc9      	bgt.n	5b94 <_scanf_chars+0x2c>
    5c00:	23c0      	movs	r3, #192	; 0xc0
    5c02:	005b      	lsls	r3, r3, #1
    5c04:	58e3      	ldr	r3, [r4, r3]
    5c06:	0029      	movs	r1, r5
    5c08:	9801      	ldr	r0, [sp, #4]
    5c0a:	4798      	blx	r3
    5c0c:	2800      	cmp	r0, #0
    5c0e:	d0c1      	beq.n	5b94 <_scanf_chars+0x2c>
    5c10:	2310      	movs	r3, #16
    5c12:	6822      	ldr	r2, [r4, #0]
    5c14:	4013      	ands	r3, r2
    5c16:	d106      	bne.n	5c26 <_scanf_chars+0xbe>
    5c18:	68e2      	ldr	r2, [r4, #12]
    5c1a:	3201      	adds	r2, #1
    5c1c:	60e2      	str	r2, [r4, #12]
    5c1e:	69a2      	ldr	r2, [r4, #24]
    5c20:	2a00      	cmp	r2, #0
    5c22:	d000      	beq.n	5c26 <_scanf_chars+0xbe>
    5c24:	703b      	strb	r3, [r7, #0]
    5c26:	6923      	ldr	r3, [r4, #16]
    5c28:	2000      	movs	r0, #0
    5c2a:	199e      	adds	r6, r3, r6
    5c2c:	6126      	str	r6, [r4, #16]
    5c2e:	e7c7      	b.n	5bc0 <_scanf_chars+0x58>

00005c30 <_scanf_i>:
    5c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c32:	000c      	movs	r4, r1
    5c34:	b08d      	sub	sp, #52	; 0x34
    5c36:	9302      	str	r3, [sp, #8]
    5c38:	4b77      	ldr	r3, [pc, #476]	; (5e18 <_scanf_i+0x1e8>)
    5c3a:	9005      	str	r0, [sp, #20]
    5c3c:	0016      	movs	r6, r2
    5c3e:	aa09      	add	r2, sp, #36	; 0x24
    5c40:	cb23      	ldmia	r3!, {r0, r1, r5}
    5c42:	c223      	stmia	r2!, {r0, r1, r5}
    5c44:	4b75      	ldr	r3, [pc, #468]	; (5e1c <_scanf_i+0x1ec>)
    5c46:	9306      	str	r3, [sp, #24]
    5c48:	69a3      	ldr	r3, [r4, #24]
    5c4a:	2b03      	cmp	r3, #3
    5c4c:	d001      	beq.n	5c52 <_scanf_i+0x22>
    5c4e:	4b74      	ldr	r3, [pc, #464]	; (5e20 <_scanf_i+0x1f0>)
    5c50:	9306      	str	r3, [sp, #24]
    5c52:	22ae      	movs	r2, #174	; 0xae
    5c54:	2000      	movs	r0, #0
    5c56:	68a3      	ldr	r3, [r4, #8]
    5c58:	0052      	lsls	r2, r2, #1
    5c5a:	1e59      	subs	r1, r3, #1
    5c5c:	9004      	str	r0, [sp, #16]
    5c5e:	4291      	cmp	r1, r2
    5c60:	d905      	bls.n	5c6e <_scanf_i+0x3e>
    5c62:	3b5e      	subs	r3, #94	; 0x5e
    5c64:	3bff      	subs	r3, #255	; 0xff
    5c66:	9304      	str	r3, [sp, #16]
    5c68:	235e      	movs	r3, #94	; 0x5e
    5c6a:	33ff      	adds	r3, #255	; 0xff
    5c6c:	60a3      	str	r3, [r4, #8]
    5c6e:	0023      	movs	r3, r4
    5c70:	331c      	adds	r3, #28
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	23d0      	movs	r3, #208	; 0xd0
    5c76:	2700      	movs	r7, #0
    5c78:	6822      	ldr	r2, [r4, #0]
    5c7a:	011b      	lsls	r3, r3, #4
    5c7c:	4313      	orrs	r3, r2
    5c7e:	6023      	str	r3, [r4, #0]
    5c80:	9b01      	ldr	r3, [sp, #4]
    5c82:	9303      	str	r3, [sp, #12]
    5c84:	6833      	ldr	r3, [r6, #0]
    5c86:	a809      	add	r0, sp, #36	; 0x24
    5c88:	7819      	ldrb	r1, [r3, #0]
    5c8a:	00bb      	lsls	r3, r7, #2
    5c8c:	2202      	movs	r2, #2
    5c8e:	5818      	ldr	r0, [r3, r0]
    5c90:	f000 fbac 	bl	63ec <memchr>
    5c94:	2800      	cmp	r0, #0
    5c96:	d02b      	beq.n	5cf0 <_scanf_i+0xc0>
    5c98:	2f01      	cmp	r7, #1
    5c9a:	d15f      	bne.n	5d5c <_scanf_i+0x12c>
    5c9c:	6863      	ldr	r3, [r4, #4]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d106      	bne.n	5cb0 <_scanf_i+0x80>
    5ca2:	3308      	adds	r3, #8
    5ca4:	6822      	ldr	r2, [r4, #0]
    5ca6:	6063      	str	r3, [r4, #4]
    5ca8:	33f9      	adds	r3, #249	; 0xf9
    5caa:	33ff      	adds	r3, #255	; 0xff
    5cac:	4313      	orrs	r3, r2
    5cae:	6023      	str	r3, [r4, #0]
    5cb0:	4b5c      	ldr	r3, [pc, #368]	; (5e24 <_scanf_i+0x1f4>)
    5cb2:	6822      	ldr	r2, [r4, #0]
    5cb4:	4013      	ands	r3, r2
    5cb6:	6023      	str	r3, [r4, #0]
    5cb8:	68a3      	ldr	r3, [r4, #8]
    5cba:	1e5a      	subs	r2, r3, #1
    5cbc:	60a2      	str	r2, [r4, #8]
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d016      	beq.n	5cf0 <_scanf_i+0xc0>
    5cc2:	9b03      	ldr	r3, [sp, #12]
    5cc4:	1c5d      	adds	r5, r3, #1
    5cc6:	6833      	ldr	r3, [r6, #0]
    5cc8:	1c5a      	adds	r2, r3, #1
    5cca:	6032      	str	r2, [r6, #0]
    5ccc:	781b      	ldrb	r3, [r3, #0]
    5cce:	9a03      	ldr	r2, [sp, #12]
    5cd0:	9503      	str	r5, [sp, #12]
    5cd2:	7013      	strb	r3, [r2, #0]
    5cd4:	6873      	ldr	r3, [r6, #4]
    5cd6:	3b01      	subs	r3, #1
    5cd8:	6073      	str	r3, [r6, #4]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	dc08      	bgt.n	5cf0 <_scanf_i+0xc0>
    5cde:	23c0      	movs	r3, #192	; 0xc0
    5ce0:	005b      	lsls	r3, r3, #1
    5ce2:	58e3      	ldr	r3, [r4, r3]
    5ce4:	0031      	movs	r1, r6
    5ce6:	9805      	ldr	r0, [sp, #20]
    5ce8:	9307      	str	r3, [sp, #28]
    5cea:	4798      	blx	r3
    5cec:	2800      	cmp	r0, #0
    5cee:	d17d      	bne.n	5dec <_scanf_i+0x1bc>
    5cf0:	3701      	adds	r7, #1
    5cf2:	2f03      	cmp	r7, #3
    5cf4:	d1c6      	bne.n	5c84 <_scanf_i+0x54>
    5cf6:	6863      	ldr	r3, [r4, #4]
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d101      	bne.n	5d00 <_scanf_i+0xd0>
    5cfc:	330a      	adds	r3, #10
    5cfe:	6063      	str	r3, [r4, #4]
    5d00:	2110      	movs	r1, #16
    5d02:	2700      	movs	r7, #0
    5d04:	6863      	ldr	r3, [r4, #4]
    5d06:	6960      	ldr	r0, [r4, #20]
    5d08:	1ac9      	subs	r1, r1, r3
    5d0a:	4b47      	ldr	r3, [pc, #284]	; (5e28 <_scanf_i+0x1f8>)
    5d0c:	18c9      	adds	r1, r1, r3
    5d0e:	f000 f93d 	bl	5f8c <__sccl>
    5d12:	9d03      	ldr	r5, [sp, #12]
    5d14:	68a3      	ldr	r3, [r4, #8]
    5d16:	2b00      	cmp	r3, #0
    5d18:	d041      	beq.n	5d9e <_scanf_i+0x16e>
    5d1a:	6832      	ldr	r2, [r6, #0]
    5d1c:	6960      	ldr	r0, [r4, #20]
    5d1e:	7811      	ldrb	r1, [r2, #0]
    5d20:	5c40      	ldrb	r0, [r0, r1]
    5d22:	2800      	cmp	r0, #0
    5d24:	d03b      	beq.n	5d9e <_scanf_i+0x16e>
    5d26:	2930      	cmp	r1, #48	; 0x30
    5d28:	d128      	bne.n	5d7c <_scanf_i+0x14c>
    5d2a:	2080      	movs	r0, #128	; 0x80
    5d2c:	6821      	ldr	r1, [r4, #0]
    5d2e:	0100      	lsls	r0, r0, #4
    5d30:	4201      	tst	r1, r0
    5d32:	d023      	beq.n	5d7c <_scanf_i+0x14c>
    5d34:	9a04      	ldr	r2, [sp, #16]
    5d36:	3701      	adds	r7, #1
    5d38:	2a00      	cmp	r2, #0
    5d3a:	d003      	beq.n	5d44 <_scanf_i+0x114>
    5d3c:	3a01      	subs	r2, #1
    5d3e:	3301      	adds	r3, #1
    5d40:	9204      	str	r2, [sp, #16]
    5d42:	60a3      	str	r3, [r4, #8]
    5d44:	6873      	ldr	r3, [r6, #4]
    5d46:	3b01      	subs	r3, #1
    5d48:	6073      	str	r3, [r6, #4]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	dd1e      	ble.n	5d8c <_scanf_i+0x15c>
    5d4e:	6833      	ldr	r3, [r6, #0]
    5d50:	3301      	adds	r3, #1
    5d52:	6033      	str	r3, [r6, #0]
    5d54:	68a3      	ldr	r3, [r4, #8]
    5d56:	3b01      	subs	r3, #1
    5d58:	60a3      	str	r3, [r4, #8]
    5d5a:	e7db      	b.n	5d14 <_scanf_i+0xe4>
    5d5c:	2f02      	cmp	r7, #2
    5d5e:	d1ab      	bne.n	5cb8 <_scanf_i+0x88>
    5d60:	21c0      	movs	r1, #192	; 0xc0
    5d62:	2380      	movs	r3, #128	; 0x80
    5d64:	6822      	ldr	r2, [r4, #0]
    5d66:	00c9      	lsls	r1, r1, #3
    5d68:	4011      	ands	r1, r2
    5d6a:	009b      	lsls	r3, r3, #2
    5d6c:	4299      	cmp	r1, r3
    5d6e:	d1c2      	bne.n	5cf6 <_scanf_i+0xc6>
    5d70:	3bf1      	subs	r3, #241	; 0xf1
    5d72:	3bff      	subs	r3, #255	; 0xff
    5d74:	6063      	str	r3, [r4, #4]
    5d76:	33f0      	adds	r3, #240	; 0xf0
    5d78:	4313      	orrs	r3, r2
    5d7a:	e79c      	b.n	5cb6 <_scanf_i+0x86>
    5d7c:	6821      	ldr	r1, [r4, #0]
    5d7e:	4b2b      	ldr	r3, [pc, #172]	; (5e2c <_scanf_i+0x1fc>)
    5d80:	400b      	ands	r3, r1
    5d82:	6023      	str	r3, [r4, #0]
    5d84:	7813      	ldrb	r3, [r2, #0]
    5d86:	702b      	strb	r3, [r5, #0]
    5d88:	3501      	adds	r5, #1
    5d8a:	e7db      	b.n	5d44 <_scanf_i+0x114>
    5d8c:	23c0      	movs	r3, #192	; 0xc0
    5d8e:	005b      	lsls	r3, r3, #1
    5d90:	58e3      	ldr	r3, [r4, r3]
    5d92:	0031      	movs	r1, r6
    5d94:	9805      	ldr	r0, [sp, #20]
    5d96:	9303      	str	r3, [sp, #12]
    5d98:	4798      	blx	r3
    5d9a:	2800      	cmp	r0, #0
    5d9c:	d0da      	beq.n	5d54 <_scanf_i+0x124>
    5d9e:	6823      	ldr	r3, [r4, #0]
    5da0:	05db      	lsls	r3, r3, #23
    5da2:	d50e      	bpl.n	5dc2 <_scanf_i+0x192>
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	429d      	cmp	r5, r3
    5da8:	d907      	bls.n	5dba <_scanf_i+0x18a>
    5daa:	23be      	movs	r3, #190	; 0xbe
    5dac:	3d01      	subs	r5, #1
    5dae:	005b      	lsls	r3, r3, #1
    5db0:	7829      	ldrb	r1, [r5, #0]
    5db2:	58e3      	ldr	r3, [r4, r3]
    5db4:	0032      	movs	r2, r6
    5db6:	9805      	ldr	r0, [sp, #20]
    5db8:	4798      	blx	r3
    5dba:	9b01      	ldr	r3, [sp, #4]
    5dbc:	2001      	movs	r0, #1
    5dbe:	429d      	cmp	r5, r3
    5dc0:	d027      	beq.n	5e12 <_scanf_i+0x1e2>
    5dc2:	2210      	movs	r2, #16
    5dc4:	6823      	ldr	r3, [r4, #0]
    5dc6:	401a      	ands	r2, r3
    5dc8:	d11c      	bne.n	5e04 <_scanf_i+0x1d4>
    5dca:	702a      	strb	r2, [r5, #0]
    5dcc:	6863      	ldr	r3, [r4, #4]
    5dce:	9901      	ldr	r1, [sp, #4]
    5dd0:	9805      	ldr	r0, [sp, #20]
    5dd2:	9e06      	ldr	r6, [sp, #24]
    5dd4:	47b0      	blx	r6
    5dd6:	9b02      	ldr	r3, [sp, #8]
    5dd8:	6822      	ldr	r2, [r4, #0]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	0691      	lsls	r1, r2, #26
    5dde:	d507      	bpl.n	5df0 <_scanf_i+0x1c0>
    5de0:	9902      	ldr	r1, [sp, #8]
    5de2:	1d1a      	adds	r2, r3, #4
    5de4:	600a      	str	r2, [r1, #0]
    5de6:	681b      	ldr	r3, [r3, #0]
    5de8:	6018      	str	r0, [r3, #0]
    5dea:	e008      	b.n	5dfe <_scanf_i+0x1ce>
    5dec:	2700      	movs	r7, #0
    5dee:	e7d6      	b.n	5d9e <_scanf_i+0x16e>
    5df0:	07d1      	lsls	r1, r2, #31
    5df2:	d5f5      	bpl.n	5de0 <_scanf_i+0x1b0>
    5df4:	9902      	ldr	r1, [sp, #8]
    5df6:	1d1a      	adds	r2, r3, #4
    5df8:	600a      	str	r2, [r1, #0]
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	8018      	strh	r0, [r3, #0]
    5dfe:	68e3      	ldr	r3, [r4, #12]
    5e00:	3301      	adds	r3, #1
    5e02:	60e3      	str	r3, [r4, #12]
    5e04:	2000      	movs	r0, #0
    5e06:	9b01      	ldr	r3, [sp, #4]
    5e08:	1aed      	subs	r5, r5, r3
    5e0a:	6923      	ldr	r3, [r4, #16]
    5e0c:	19ef      	adds	r7, r5, r7
    5e0e:	19df      	adds	r7, r3, r7
    5e10:	6127      	str	r7, [r4, #16]
    5e12:	b00d      	add	sp, #52	; 0x34
    5e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	00006c14 	.word	0x00006c14
    5e1c:	00004a99 	.word	0x00004a99
    5e20:	00006199 	.word	0x00006199
    5e24:	fffffaff 	.word	0xfffffaff
    5e28:	00006c20 	.word	0x00006c20
    5e2c:	fffff6ff 	.word	0xfffff6ff

00005e30 <lflush>:
    5e30:	2209      	movs	r2, #9
    5e32:	b510      	push	{r4, lr}
    5e34:	8983      	ldrh	r3, [r0, #12]
    5e36:	4013      	ands	r3, r2
    5e38:	2200      	movs	r2, #0
    5e3a:	2b09      	cmp	r3, #9
    5e3c:	d102      	bne.n	5e44 <lflush+0x14>
    5e3e:	f7fe ffd1 	bl	4de4 <fflush>
    5e42:	0002      	movs	r2, r0
    5e44:	0010      	movs	r0, r2
    5e46:	bd10      	pop	{r4, pc}

00005e48 <__srefill_r>:
    5e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e4a:	0005      	movs	r5, r0
    5e4c:	000c      	movs	r4, r1
    5e4e:	2800      	cmp	r0, #0
    5e50:	d004      	beq.n	5e5c <__srefill_r+0x14>
    5e52:	6983      	ldr	r3, [r0, #24]
    5e54:	2b00      	cmp	r3, #0
    5e56:	d101      	bne.n	5e5c <__srefill_r+0x14>
    5e58:	f7ff f81a 	bl	4e90 <__sinit>
    5e5c:	4b3d      	ldr	r3, [pc, #244]	; (5f54 <__srefill_r+0x10c>)
    5e5e:	429c      	cmp	r4, r3
    5e60:	d10a      	bne.n	5e78 <__srefill_r+0x30>
    5e62:	686c      	ldr	r4, [r5, #4]
    5e64:	2300      	movs	r3, #0
    5e66:	6063      	str	r3, [r4, #4]
    5e68:	230c      	movs	r3, #12
    5e6a:	5ee2      	ldrsh	r2, [r4, r3]
    5e6c:	b293      	uxth	r3, r2
    5e6e:	0699      	lsls	r1, r3, #26
    5e70:	d50c      	bpl.n	5e8c <__srefill_r+0x44>
    5e72:	2001      	movs	r0, #1
    5e74:	4240      	negs	r0, r0
    5e76:	e068      	b.n	5f4a <__srefill_r+0x102>
    5e78:	4b37      	ldr	r3, [pc, #220]	; (5f58 <__srefill_r+0x110>)
    5e7a:	429c      	cmp	r4, r3
    5e7c:	d101      	bne.n	5e82 <__srefill_r+0x3a>
    5e7e:	68ac      	ldr	r4, [r5, #8]
    5e80:	e7f0      	b.n	5e64 <__srefill_r+0x1c>
    5e82:	4b36      	ldr	r3, [pc, #216]	; (5f5c <__srefill_r+0x114>)
    5e84:	429c      	cmp	r4, r3
    5e86:	d1ed      	bne.n	5e64 <__srefill_r+0x1c>
    5e88:	68ec      	ldr	r4, [r5, #12]
    5e8a:	e7eb      	b.n	5e64 <__srefill_r+0x1c>
    5e8c:	0759      	lsls	r1, r3, #29
    5e8e:	d44a      	bmi.n	5f26 <__srefill_r+0xde>
    5e90:	06d9      	lsls	r1, r3, #27
    5e92:	d405      	bmi.n	5ea0 <__srefill_r+0x58>
    5e94:	2309      	movs	r3, #9
    5e96:	602b      	str	r3, [r5, #0]
    5e98:	3337      	adds	r3, #55	; 0x37
    5e9a:	4313      	orrs	r3, r2
    5e9c:	81a3      	strh	r3, [r4, #12]
    5e9e:	e7e8      	b.n	5e72 <__srefill_r+0x2a>
    5ea0:	2608      	movs	r6, #8
    5ea2:	4233      	tst	r3, r6
    5ea4:	d00a      	beq.n	5ebc <__srefill_r+0x74>
    5ea6:	0021      	movs	r1, r4
    5ea8:	0028      	movs	r0, r5
    5eaa:	f7fe ff6f 	bl	4d8c <_fflush_r>
    5eae:	2800      	cmp	r0, #0
    5eb0:	d1df      	bne.n	5e72 <__srefill_r+0x2a>
    5eb2:	89a3      	ldrh	r3, [r4, #12]
    5eb4:	60a0      	str	r0, [r4, #8]
    5eb6:	43b3      	bics	r3, r6
    5eb8:	81a3      	strh	r3, [r4, #12]
    5eba:	61a0      	str	r0, [r4, #24]
    5ebc:	2304      	movs	r3, #4
    5ebe:	89a2      	ldrh	r2, [r4, #12]
    5ec0:	4313      	orrs	r3, r2
    5ec2:	81a3      	strh	r3, [r4, #12]
    5ec4:	6923      	ldr	r3, [r4, #16]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d103      	bne.n	5ed2 <__srefill_r+0x8a>
    5eca:	0021      	movs	r1, r4
    5ecc:	0028      	movs	r0, r5
    5ece:	f7ff f8c9 	bl	5064 <__smakebuf_r>
    5ed2:	230c      	movs	r3, #12
    5ed4:	5ee7      	ldrsh	r7, [r4, r3]
    5ed6:	b2be      	uxth	r6, r7
    5ed8:	07b3      	lsls	r3, r6, #30
    5eda:	d00f      	beq.n	5efc <__srefill_r+0xb4>
    5edc:	2301      	movs	r3, #1
    5ede:	81a3      	strh	r3, [r4, #12]
    5ee0:	4b1f      	ldr	r3, [pc, #124]	; (5f60 <__srefill_r+0x118>)
    5ee2:	4920      	ldr	r1, [pc, #128]	; (5f64 <__srefill_r+0x11c>)
    5ee4:	6818      	ldr	r0, [r3, #0]
    5ee6:	f7ff f847 	bl	4f78 <_fwalk>
    5eea:	2309      	movs	r3, #9
    5eec:	81a7      	strh	r7, [r4, #12]
    5eee:	401e      	ands	r6, r3
    5ef0:	429e      	cmp	r6, r3
    5ef2:	d103      	bne.n	5efc <__srefill_r+0xb4>
    5ef4:	0021      	movs	r1, r4
    5ef6:	0028      	movs	r0, r5
    5ef8:	f7fe febe 	bl	4c78 <__sflush_r>
    5efc:	6923      	ldr	r3, [r4, #16]
    5efe:	6922      	ldr	r2, [r4, #16]
    5f00:	6023      	str	r3, [r4, #0]
    5f02:	0028      	movs	r0, r5
    5f04:	6963      	ldr	r3, [r4, #20]
    5f06:	6a21      	ldr	r1, [r4, #32]
    5f08:	6a65      	ldr	r5, [r4, #36]	; 0x24
    5f0a:	47a8      	blx	r5
    5f0c:	0002      	movs	r2, r0
    5f0e:	6060      	str	r0, [r4, #4]
    5f10:	2000      	movs	r0, #0
    5f12:	4282      	cmp	r2, r0
    5f14:	dc19      	bgt.n	5f4a <__srefill_r+0x102>
    5f16:	89a1      	ldrh	r1, [r4, #12]
    5f18:	4282      	cmp	r2, r0
    5f1a:	d117      	bne.n	5f4c <__srefill_r+0x104>
    5f1c:	2320      	movs	r3, #32
    5f1e:	430b      	orrs	r3, r1
    5f20:	81a3      	strh	r3, [r4, #12]
    5f22:	3801      	subs	r0, #1
    5f24:	e011      	b.n	5f4a <__srefill_r+0x102>
    5f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f28:	2900      	cmp	r1, #0
    5f2a:	d0cb      	beq.n	5ec4 <__srefill_r+0x7c>
    5f2c:	0023      	movs	r3, r4
    5f2e:	3344      	adds	r3, #68	; 0x44
    5f30:	4299      	cmp	r1, r3
    5f32:	d002      	beq.n	5f3a <__srefill_r+0xf2>
    5f34:	0028      	movs	r0, r5
    5f36:	f7ff f8f5 	bl	5124 <_free_r>
    5f3a:	2000      	movs	r0, #0
    5f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5f3e:	6360      	str	r0, [r4, #52]	; 0x34
    5f40:	6063      	str	r3, [r4, #4]
    5f42:	4283      	cmp	r3, r0
    5f44:	d0be      	beq.n	5ec4 <__srefill_r+0x7c>
    5f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5f48:	6023      	str	r3, [r4, #0]
    5f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f4c:	2340      	movs	r3, #64	; 0x40
    5f4e:	6060      	str	r0, [r4, #4]
    5f50:	430b      	orrs	r3, r1
    5f52:	e7a3      	b.n	5e9c <__srefill_r+0x54>
    5f54:	00006b94 	.word	0x00006b94
    5f58:	00006bb4 	.word	0x00006bb4
    5f5c:	00006b74 	.word	0x00006b74
    5f60:	00006b70 	.word	0x00006b70
    5f64:	00005e31 	.word	0x00005e31

00005f68 <_sbrk_r>:
    5f68:	2300      	movs	r3, #0
    5f6a:	b570      	push	{r4, r5, r6, lr}
    5f6c:	4c06      	ldr	r4, [pc, #24]	; (5f88 <_sbrk_r+0x20>)
    5f6e:	0005      	movs	r5, r0
    5f70:	0008      	movs	r0, r1
    5f72:	6023      	str	r3, [r4, #0]
    5f74:	f7fc fc80 	bl	2878 <_sbrk>
    5f78:	1c43      	adds	r3, r0, #1
    5f7a:	d103      	bne.n	5f84 <_sbrk_r+0x1c>
    5f7c:	6823      	ldr	r3, [r4, #0]
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d000      	beq.n	5f84 <_sbrk_r+0x1c>
    5f82:	602b      	str	r3, [r5, #0]
    5f84:	bd70      	pop	{r4, r5, r6, pc}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	200003fc 	.word	0x200003fc

00005f8c <__sccl>:
    5f8c:	b570      	push	{r4, r5, r6, lr}
    5f8e:	780b      	ldrb	r3, [r1, #0]
    5f90:	2b5e      	cmp	r3, #94	; 0x5e
    5f92:	d00d      	beq.n	5fb0 <__sccl+0x24>
    5f94:	1c4a      	adds	r2, r1, #1
    5f96:	2100      	movs	r1, #0
    5f98:	0004      	movs	r4, r0
    5f9a:	1c45      	adds	r5, r0, #1
    5f9c:	35ff      	adds	r5, #255	; 0xff
    5f9e:	7021      	strb	r1, [r4, #0]
    5fa0:	3401      	adds	r4, #1
    5fa2:	42a5      	cmp	r5, r4
    5fa4:	d1fb      	bne.n	5f9e <__sccl+0x12>
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d106      	bne.n	5fb8 <__sccl+0x2c>
    5faa:	3a01      	subs	r2, #1
    5fac:	0010      	movs	r0, r2
    5fae:	bd70      	pop	{r4, r5, r6, pc}
    5fb0:	1c8a      	adds	r2, r1, #2
    5fb2:	784b      	ldrb	r3, [r1, #1]
    5fb4:	2101      	movs	r1, #1
    5fb6:	e7ef      	b.n	5f98 <__sccl+0xc>
    5fb8:	2401      	movs	r4, #1
    5fba:	404c      	eors	r4, r1
    5fbc:	0011      	movs	r1, r2
    5fbe:	54c4      	strb	r4, [r0, r3]
    5fc0:	780d      	ldrb	r5, [r1, #0]
    5fc2:	1c4a      	adds	r2, r1, #1
    5fc4:	2d2d      	cmp	r5, #45	; 0x2d
    5fc6:	d007      	beq.n	5fd8 <__sccl+0x4c>
    5fc8:	2d5d      	cmp	r5, #93	; 0x5d
    5fca:	d0ef      	beq.n	5fac <__sccl+0x20>
    5fcc:	2d00      	cmp	r5, #0
    5fce:	d101      	bne.n	5fd4 <__sccl+0x48>
    5fd0:	000a      	movs	r2, r1
    5fd2:	e7eb      	b.n	5fac <__sccl+0x20>
    5fd4:	002b      	movs	r3, r5
    5fd6:	e7f1      	b.n	5fbc <__sccl+0x30>
    5fd8:	784e      	ldrb	r6, [r1, #1]
    5fda:	2e5d      	cmp	r6, #93	; 0x5d
    5fdc:	d0fa      	beq.n	5fd4 <__sccl+0x48>
    5fde:	42b3      	cmp	r3, r6
    5fe0:	dcf8      	bgt.n	5fd4 <__sccl+0x48>
    5fe2:	3102      	adds	r1, #2
    5fe4:	3301      	adds	r3, #1
    5fe6:	54c4      	strb	r4, [r0, r3]
    5fe8:	429e      	cmp	r6, r3
    5fea:	dcfb      	bgt.n	5fe4 <__sccl+0x58>
    5fec:	e7e8      	b.n	5fc0 <__sccl+0x34>
	...

00005ff0 <__sread>:
    5ff0:	b570      	push	{r4, r5, r6, lr}
    5ff2:	000c      	movs	r4, r1
    5ff4:	250e      	movs	r5, #14
    5ff6:	5f49      	ldrsh	r1, [r1, r5]
    5ff8:	f000 fa2c 	bl	6454 <_read_r>
    5ffc:	2800      	cmp	r0, #0
    5ffe:	db03      	blt.n	6008 <__sread+0x18>
    6000:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6002:	181b      	adds	r3, r3, r0
    6004:	6563      	str	r3, [r4, #84]	; 0x54
    6006:	bd70      	pop	{r4, r5, r6, pc}
    6008:	89a3      	ldrh	r3, [r4, #12]
    600a:	4a02      	ldr	r2, [pc, #8]	; (6014 <__sread+0x24>)
    600c:	4013      	ands	r3, r2
    600e:	81a3      	strh	r3, [r4, #12]
    6010:	e7f9      	b.n	6006 <__sread+0x16>
    6012:	46c0      	nop			; (mov r8, r8)
    6014:	ffffefff 	.word	0xffffefff

00006018 <__swrite>:
    6018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    601a:	001f      	movs	r7, r3
    601c:	898b      	ldrh	r3, [r1, #12]
    601e:	0005      	movs	r5, r0
    6020:	000c      	movs	r4, r1
    6022:	0016      	movs	r6, r2
    6024:	05db      	lsls	r3, r3, #23
    6026:	d505      	bpl.n	6034 <__swrite+0x1c>
    6028:	230e      	movs	r3, #14
    602a:	5ec9      	ldrsh	r1, [r1, r3]
    602c:	2200      	movs	r2, #0
    602e:	2302      	movs	r3, #2
    6030:	f000 f9c8 	bl	63c4 <_lseek_r>
    6034:	89a3      	ldrh	r3, [r4, #12]
    6036:	4a05      	ldr	r2, [pc, #20]	; (604c <__swrite+0x34>)
    6038:	0028      	movs	r0, r5
    603a:	4013      	ands	r3, r2
    603c:	81a3      	strh	r3, [r4, #12]
    603e:	0032      	movs	r2, r6
    6040:	230e      	movs	r3, #14
    6042:	5ee1      	ldrsh	r1, [r4, r3]
    6044:	003b      	movs	r3, r7
    6046:	f000 f973 	bl	6330 <_write_r>
    604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    604c:	ffffefff 	.word	0xffffefff

00006050 <__sseek>:
    6050:	b570      	push	{r4, r5, r6, lr}
    6052:	000c      	movs	r4, r1
    6054:	250e      	movs	r5, #14
    6056:	5f49      	ldrsh	r1, [r1, r5]
    6058:	f000 f9b4 	bl	63c4 <_lseek_r>
    605c:	89a3      	ldrh	r3, [r4, #12]
    605e:	1c42      	adds	r2, r0, #1
    6060:	d103      	bne.n	606a <__sseek+0x1a>
    6062:	4a05      	ldr	r2, [pc, #20]	; (6078 <__sseek+0x28>)
    6064:	4013      	ands	r3, r2
    6066:	81a3      	strh	r3, [r4, #12]
    6068:	bd70      	pop	{r4, r5, r6, pc}
    606a:	2280      	movs	r2, #128	; 0x80
    606c:	0152      	lsls	r2, r2, #5
    606e:	4313      	orrs	r3, r2
    6070:	81a3      	strh	r3, [r4, #12]
    6072:	6560      	str	r0, [r4, #84]	; 0x54
    6074:	e7f8      	b.n	6068 <__sseek+0x18>
    6076:	46c0      	nop			; (mov r8, r8)
    6078:	ffffefff 	.word	0xffffefff

0000607c <__sclose>:
    607c:	b510      	push	{r4, lr}
    607e:	230e      	movs	r3, #14
    6080:	5ec9      	ldrsh	r1, [r1, r3]
    6082:	f000 f969 	bl	6358 <_close_r>
    6086:	bd10      	pop	{r4, pc}

00006088 <_strtoul_l.isra.0>:
    6088:	b5f0      	push	{r4, r5, r6, r7, lr}
    608a:	001f      	movs	r7, r3
    608c:	000e      	movs	r6, r1
    608e:	b087      	sub	sp, #28
    6090:	9005      	str	r0, [sp, #20]
    6092:	9103      	str	r1, [sp, #12]
    6094:	9201      	str	r2, [sp, #4]
    6096:	980c      	ldr	r0, [sp, #48]	; 0x30
    6098:	7834      	ldrb	r4, [r6, #0]
    609a:	f7fe ffaa 	bl	4ff2 <__locale_ctype_ptr_l>
    609e:	2208      	movs	r2, #8
    60a0:	1900      	adds	r0, r0, r4
    60a2:	7843      	ldrb	r3, [r0, #1]
    60a4:	1c75      	adds	r5, r6, #1
    60a6:	4013      	ands	r3, r2
    60a8:	d10c      	bne.n	60c4 <_strtoul_l.isra.0+0x3c>
    60aa:	2c2d      	cmp	r4, #45	; 0x2d
    60ac:	d10c      	bne.n	60c8 <_strtoul_l.isra.0+0x40>
    60ae:	3301      	adds	r3, #1
    60b0:	782c      	ldrb	r4, [r5, #0]
    60b2:	9302      	str	r3, [sp, #8]
    60b4:	1cb5      	adds	r5, r6, #2
    60b6:	2f00      	cmp	r7, #0
    60b8:	d00c      	beq.n	60d4 <_strtoul_l.isra.0+0x4c>
    60ba:	2f10      	cmp	r7, #16
    60bc:	d114      	bne.n	60e8 <_strtoul_l.isra.0+0x60>
    60be:	2c30      	cmp	r4, #48	; 0x30
    60c0:	d00a      	beq.n	60d8 <_strtoul_l.isra.0+0x50>
    60c2:	e011      	b.n	60e8 <_strtoul_l.isra.0+0x60>
    60c4:	002e      	movs	r6, r5
    60c6:	e7e6      	b.n	6096 <_strtoul_l.isra.0+0xe>
    60c8:	9302      	str	r3, [sp, #8]
    60ca:	2c2b      	cmp	r4, #43	; 0x2b
    60cc:	d1f3      	bne.n	60b6 <_strtoul_l.isra.0+0x2e>
    60ce:	782c      	ldrb	r4, [r5, #0]
    60d0:	1cb5      	adds	r5, r6, #2
    60d2:	e7f0      	b.n	60b6 <_strtoul_l.isra.0+0x2e>
    60d4:	2c30      	cmp	r4, #48	; 0x30
    60d6:	d12f      	bne.n	6138 <_strtoul_l.isra.0+0xb0>
    60d8:	2220      	movs	r2, #32
    60da:	782b      	ldrb	r3, [r5, #0]
    60dc:	4393      	bics	r3, r2
    60de:	2b58      	cmp	r3, #88	; 0x58
    60e0:	d154      	bne.n	618c <_strtoul_l.isra.0+0x104>
    60e2:	2710      	movs	r7, #16
    60e4:	786c      	ldrb	r4, [r5, #1]
    60e6:	3502      	adds	r5, #2
    60e8:	2001      	movs	r0, #1
    60ea:	0039      	movs	r1, r7
    60ec:	4240      	negs	r0, r0
    60ee:	f7fc fd43 	bl	2b78 <__udivsi3>
    60f2:	0006      	movs	r6, r0
    60f4:	2001      	movs	r0, #1
    60f6:	0039      	movs	r1, r7
    60f8:	4240      	negs	r0, r0
    60fa:	f7fc fdc3 	bl	2c84 <__aeabi_uidivmod>
    60fe:	2300      	movs	r3, #0
    6100:	9104      	str	r1, [sp, #16]
    6102:	2101      	movs	r1, #1
    6104:	2201      	movs	r2, #1
    6106:	0018      	movs	r0, r3
    6108:	468c      	mov	ip, r1
    610a:	4252      	negs	r2, r2
    610c:	0021      	movs	r1, r4
    610e:	3930      	subs	r1, #48	; 0x30
    6110:	2909      	cmp	r1, #9
    6112:	d813      	bhi.n	613c <_strtoul_l.isra.0+0xb4>
    6114:	000c      	movs	r4, r1
    6116:	42a7      	cmp	r7, r4
    6118:	dd1e      	ble.n	6158 <_strtoul_l.isra.0+0xd0>
    611a:	2b00      	cmp	r3, #0
    611c:	db1a      	blt.n	6154 <_strtoul_l.isra.0+0xcc>
    611e:	0013      	movs	r3, r2
    6120:	4286      	cmp	r6, r0
    6122:	d306      	bcc.n	6132 <_strtoul_l.isra.0+0xaa>
    6124:	d102      	bne.n	612c <_strtoul_l.isra.0+0xa4>
    6126:	9904      	ldr	r1, [sp, #16]
    6128:	42a1      	cmp	r1, r4
    612a:	db02      	blt.n	6132 <_strtoul_l.isra.0+0xaa>
    612c:	4663      	mov	r3, ip
    612e:	4378      	muls	r0, r7
    6130:	1820      	adds	r0, r4, r0
    6132:	782c      	ldrb	r4, [r5, #0]
    6134:	3501      	adds	r5, #1
    6136:	e7e9      	b.n	610c <_strtoul_l.isra.0+0x84>
    6138:	270a      	movs	r7, #10
    613a:	e7d5      	b.n	60e8 <_strtoul_l.isra.0+0x60>
    613c:	0021      	movs	r1, r4
    613e:	3941      	subs	r1, #65	; 0x41
    6140:	2919      	cmp	r1, #25
    6142:	d801      	bhi.n	6148 <_strtoul_l.isra.0+0xc0>
    6144:	3c37      	subs	r4, #55	; 0x37
    6146:	e7e6      	b.n	6116 <_strtoul_l.isra.0+0x8e>
    6148:	0021      	movs	r1, r4
    614a:	3961      	subs	r1, #97	; 0x61
    614c:	2919      	cmp	r1, #25
    614e:	d803      	bhi.n	6158 <_strtoul_l.isra.0+0xd0>
    6150:	3c57      	subs	r4, #87	; 0x57
    6152:	e7e0      	b.n	6116 <_strtoul_l.isra.0+0x8e>
    6154:	0013      	movs	r3, r2
    6156:	e7ec      	b.n	6132 <_strtoul_l.isra.0+0xaa>
    6158:	2b00      	cmp	r3, #0
    615a:	da09      	bge.n	6170 <_strtoul_l.isra.0+0xe8>
    615c:	2322      	movs	r3, #34	; 0x22
    615e:	2001      	movs	r0, #1
    6160:	9a05      	ldr	r2, [sp, #20]
    6162:	4240      	negs	r0, r0
    6164:	6013      	str	r3, [r2, #0]
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	2b00      	cmp	r3, #0
    616a:	d10b      	bne.n	6184 <_strtoul_l.isra.0+0xfc>
    616c:	b007      	add	sp, #28
    616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6170:	9a02      	ldr	r2, [sp, #8]
    6172:	2a00      	cmp	r2, #0
    6174:	d000      	beq.n	6178 <_strtoul_l.isra.0+0xf0>
    6176:	4240      	negs	r0, r0
    6178:	9a01      	ldr	r2, [sp, #4]
    617a:	2a00      	cmp	r2, #0
    617c:	d0f6      	beq.n	616c <_strtoul_l.isra.0+0xe4>
    617e:	9a03      	ldr	r2, [sp, #12]
    6180:	2b00      	cmp	r3, #0
    6182:	d000      	beq.n	6186 <_strtoul_l.isra.0+0xfe>
    6184:	1e6a      	subs	r2, r5, #1
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	601a      	str	r2, [r3, #0]
    618a:	e7ef      	b.n	616c <_strtoul_l.isra.0+0xe4>
    618c:	2430      	movs	r4, #48	; 0x30
    618e:	2f00      	cmp	r7, #0
    6190:	d1aa      	bne.n	60e8 <_strtoul_l.isra.0+0x60>
    6192:	3708      	adds	r7, #8
    6194:	e7a8      	b.n	60e8 <_strtoul_l.isra.0+0x60>
	...

00006198 <_strtoul_r>:
    6198:	b513      	push	{r0, r1, r4, lr}
    619a:	4c05      	ldr	r4, [pc, #20]	; (61b0 <_strtoul_r+0x18>)
    619c:	6824      	ldr	r4, [r4, #0]
    619e:	6a24      	ldr	r4, [r4, #32]
    61a0:	2c00      	cmp	r4, #0
    61a2:	d100      	bne.n	61a6 <_strtoul_r+0xe>
    61a4:	4c03      	ldr	r4, [pc, #12]	; (61b4 <_strtoul_r+0x1c>)
    61a6:	9400      	str	r4, [sp, #0]
    61a8:	f7ff ff6e 	bl	6088 <_strtoul_l.isra.0>
    61ac:	bd16      	pop	{r1, r2, r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)
    61b0:	20000040 	.word	0x20000040
    61b4:	200000a4 	.word	0x200000a4

000061b8 <__submore>:
    61b8:	000b      	movs	r3, r1
    61ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61bc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    61be:	3344      	adds	r3, #68	; 0x44
    61c0:	000c      	movs	r4, r1
    61c2:	429d      	cmp	r5, r3
    61c4:	d11c      	bne.n	6200 <__submore+0x48>
    61c6:	2680      	movs	r6, #128	; 0x80
    61c8:	00f6      	lsls	r6, r6, #3
    61ca:	0031      	movs	r1, r6
    61cc:	f7fe fff4 	bl	51b8 <_malloc_r>
    61d0:	2800      	cmp	r0, #0
    61d2:	d102      	bne.n	61da <__submore+0x22>
    61d4:	2001      	movs	r0, #1
    61d6:	4240      	negs	r0, r0
    61d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61da:	0023      	movs	r3, r4
    61dc:	6360      	str	r0, [r4, #52]	; 0x34
    61de:	63a6      	str	r6, [r4, #56]	; 0x38
    61e0:	3346      	adds	r3, #70	; 0x46
    61e2:	781a      	ldrb	r2, [r3, #0]
    61e4:	4b10      	ldr	r3, [pc, #64]	; (6228 <__submore+0x70>)
    61e6:	54c2      	strb	r2, [r0, r3]
    61e8:	0023      	movs	r3, r4
    61ea:	3345      	adds	r3, #69	; 0x45
    61ec:	781a      	ldrb	r2, [r3, #0]
    61ee:	4b0f      	ldr	r3, [pc, #60]	; (622c <__submore+0x74>)
    61f0:	54c2      	strb	r2, [r0, r3]
    61f2:	782a      	ldrb	r2, [r5, #0]
    61f4:	4b0e      	ldr	r3, [pc, #56]	; (6230 <__submore+0x78>)
    61f6:	54c2      	strb	r2, [r0, r3]
    61f8:	18c0      	adds	r0, r0, r3
    61fa:	6020      	str	r0, [r4, #0]
    61fc:	2000      	movs	r0, #0
    61fe:	e7eb      	b.n	61d8 <__submore+0x20>
    6200:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    6202:	0029      	movs	r1, r5
    6204:	0073      	lsls	r3, r6, #1
    6206:	001a      	movs	r2, r3
    6208:	9301      	str	r3, [sp, #4]
    620a:	f000 f8fc 	bl	6406 <_realloc_r>
    620e:	1e05      	subs	r5, r0, #0
    6210:	d0e0      	beq.n	61d4 <__submore+0x1c>
    6212:	1987      	adds	r7, r0, r6
    6214:	0001      	movs	r1, r0
    6216:	0032      	movs	r2, r6
    6218:	0038      	movs	r0, r7
    621a:	f7fe f9f1 	bl	4600 <memcpy>
    621e:	9b01      	ldr	r3, [sp, #4]
    6220:	6027      	str	r7, [r4, #0]
    6222:	6365      	str	r5, [r4, #52]	; 0x34
    6224:	63a3      	str	r3, [r4, #56]	; 0x38
    6226:	e7e9      	b.n	61fc <__submore+0x44>
    6228:	000003ff 	.word	0x000003ff
    622c:	000003fe 	.word	0x000003fe
    6230:	000003fd 	.word	0x000003fd

00006234 <_ungetc_r>:
    6234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6236:	0005      	movs	r5, r0
    6238:	000e      	movs	r6, r1
    623a:	0014      	movs	r4, r2
    623c:	1c4b      	adds	r3, r1, #1
    623e:	d103      	bne.n	6248 <_ungetc_r+0x14>
    6240:	2601      	movs	r6, #1
    6242:	4276      	negs	r6, r6
    6244:	0030      	movs	r0, r6
    6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6248:	2800      	cmp	r0, #0
    624a:	d004      	beq.n	6256 <_ungetc_r+0x22>
    624c:	6983      	ldr	r3, [r0, #24]
    624e:	2b00      	cmp	r3, #0
    6250:	d101      	bne.n	6256 <_ungetc_r+0x22>
    6252:	f7fe fe1d 	bl	4e90 <__sinit>
    6256:	4b2d      	ldr	r3, [pc, #180]	; (630c <_ungetc_r+0xd8>)
    6258:	429c      	cmp	r4, r3
    625a:	d12d      	bne.n	62b8 <_ungetc_r+0x84>
    625c:	686c      	ldr	r4, [r5, #4]
    625e:	2220      	movs	r2, #32
    6260:	89a3      	ldrh	r3, [r4, #12]
    6262:	4393      	bics	r3, r2
    6264:	b21b      	sxth	r3, r3
    6266:	81a3      	strh	r3, [r4, #12]
    6268:	b29b      	uxth	r3, r3
    626a:	075a      	lsls	r2, r3, #29
    626c:	d413      	bmi.n	6296 <_ungetc_r+0x62>
    626e:	06da      	lsls	r2, r3, #27
    6270:	d5e6      	bpl.n	6240 <_ungetc_r+0xc>
    6272:	2708      	movs	r7, #8
    6274:	423b      	tst	r3, r7
    6276:	d00a      	beq.n	628e <_ungetc_r+0x5a>
    6278:	0021      	movs	r1, r4
    627a:	0028      	movs	r0, r5
    627c:	f7fe fd86 	bl	4d8c <_fflush_r>
    6280:	2800      	cmp	r0, #0
    6282:	d1dd      	bne.n	6240 <_ungetc_r+0xc>
    6284:	89a3      	ldrh	r3, [r4, #12]
    6286:	60a0      	str	r0, [r4, #8]
    6288:	43bb      	bics	r3, r7
    628a:	81a3      	strh	r3, [r4, #12]
    628c:	61a0      	str	r0, [r4, #24]
    628e:	2304      	movs	r3, #4
    6290:	89a2      	ldrh	r2, [r4, #12]
    6292:	4313      	orrs	r3, r2
    6294:	81a3      	strh	r3, [r4, #12]
    6296:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6298:	b2f7      	uxtb	r7, r6
    629a:	6863      	ldr	r3, [r4, #4]
    629c:	b2f6      	uxtb	r6, r6
    629e:	2a00      	cmp	r2, #0
    62a0:	d01b      	beq.n	62da <_ungetc_r+0xa6>
    62a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    62a4:	4293      	cmp	r3, r2
    62a6:	da11      	bge.n	62cc <_ungetc_r+0x98>
    62a8:	6823      	ldr	r3, [r4, #0]
    62aa:	3b01      	subs	r3, #1
    62ac:	6023      	str	r3, [r4, #0]
    62ae:	701f      	strb	r7, [r3, #0]
    62b0:	6863      	ldr	r3, [r4, #4]
    62b2:	3301      	adds	r3, #1
    62b4:	6063      	str	r3, [r4, #4]
    62b6:	e7c5      	b.n	6244 <_ungetc_r+0x10>
    62b8:	4b15      	ldr	r3, [pc, #84]	; (6310 <_ungetc_r+0xdc>)
    62ba:	429c      	cmp	r4, r3
    62bc:	d101      	bne.n	62c2 <_ungetc_r+0x8e>
    62be:	68ac      	ldr	r4, [r5, #8]
    62c0:	e7cd      	b.n	625e <_ungetc_r+0x2a>
    62c2:	4b14      	ldr	r3, [pc, #80]	; (6314 <_ungetc_r+0xe0>)
    62c4:	429c      	cmp	r4, r3
    62c6:	d1ca      	bne.n	625e <_ungetc_r+0x2a>
    62c8:	68ec      	ldr	r4, [r5, #12]
    62ca:	e7c8      	b.n	625e <_ungetc_r+0x2a>
    62cc:	0021      	movs	r1, r4
    62ce:	0028      	movs	r0, r5
    62d0:	f7ff ff72 	bl	61b8 <__submore>
    62d4:	2800      	cmp	r0, #0
    62d6:	d0e7      	beq.n	62a8 <_ungetc_r+0x74>
    62d8:	e7b2      	b.n	6240 <_ungetc_r+0xc>
    62da:	6921      	ldr	r1, [r4, #16]
    62dc:	6822      	ldr	r2, [r4, #0]
    62de:	2900      	cmp	r1, #0
    62e0:	d007      	beq.n	62f2 <_ungetc_r+0xbe>
    62e2:	4291      	cmp	r1, r2
    62e4:	d205      	bcs.n	62f2 <_ungetc_r+0xbe>
    62e6:	1e51      	subs	r1, r2, #1
    62e8:	7808      	ldrb	r0, [r1, #0]
    62ea:	4286      	cmp	r6, r0
    62ec:	d101      	bne.n	62f2 <_ungetc_r+0xbe>
    62ee:	6021      	str	r1, [r4, #0]
    62f0:	e7df      	b.n	62b2 <_ungetc_r+0x7e>
    62f2:	6423      	str	r3, [r4, #64]	; 0x40
    62f4:	0023      	movs	r3, r4
    62f6:	3344      	adds	r3, #68	; 0x44
    62f8:	6363      	str	r3, [r4, #52]	; 0x34
    62fa:	2303      	movs	r3, #3
    62fc:	63a3      	str	r3, [r4, #56]	; 0x38
    62fe:	0023      	movs	r3, r4
    6300:	3346      	adds	r3, #70	; 0x46
    6302:	63e2      	str	r2, [r4, #60]	; 0x3c
    6304:	701f      	strb	r7, [r3, #0]
    6306:	6023      	str	r3, [r4, #0]
    6308:	2301      	movs	r3, #1
    630a:	e7d3      	b.n	62b4 <_ungetc_r+0x80>
    630c:	00006b94 	.word	0x00006b94
    6310:	00006bb4 	.word	0x00006bb4
    6314:	00006b74 	.word	0x00006b74

00006318 <__ascii_wctomb>:
    6318:	1e0b      	subs	r3, r1, #0
    631a:	d004      	beq.n	6326 <__ascii_wctomb+0xe>
    631c:	2aff      	cmp	r2, #255	; 0xff
    631e:	d904      	bls.n	632a <__ascii_wctomb+0x12>
    6320:	238a      	movs	r3, #138	; 0x8a
    6322:	6003      	str	r3, [r0, #0]
    6324:	3b8b      	subs	r3, #139	; 0x8b
    6326:	0018      	movs	r0, r3
    6328:	4770      	bx	lr
    632a:	700a      	strb	r2, [r1, #0]
    632c:	2301      	movs	r3, #1
    632e:	e7fa      	b.n	6326 <__ascii_wctomb+0xe>

00006330 <_write_r>:
    6330:	b570      	push	{r4, r5, r6, lr}
    6332:	0005      	movs	r5, r0
    6334:	0008      	movs	r0, r1
    6336:	0011      	movs	r1, r2
    6338:	2200      	movs	r2, #0
    633a:	4c06      	ldr	r4, [pc, #24]	; (6354 <_write_r+0x24>)
    633c:	6022      	str	r2, [r4, #0]
    633e:	001a      	movs	r2, r3
    6340:	f7fc fa72 	bl	2828 <_write>
    6344:	1c43      	adds	r3, r0, #1
    6346:	d103      	bne.n	6350 <_write_r+0x20>
    6348:	6823      	ldr	r3, [r4, #0]
    634a:	2b00      	cmp	r3, #0
    634c:	d000      	beq.n	6350 <_write_r+0x20>
    634e:	602b      	str	r3, [r5, #0]
    6350:	bd70      	pop	{r4, r5, r6, pc}
    6352:	46c0      	nop			; (mov r8, r8)
    6354:	200003fc 	.word	0x200003fc

00006358 <_close_r>:
    6358:	2300      	movs	r3, #0
    635a:	b570      	push	{r4, r5, r6, lr}
    635c:	4c06      	ldr	r4, [pc, #24]	; (6378 <_close_r+0x20>)
    635e:	0005      	movs	r5, r0
    6360:	0008      	movs	r0, r1
    6362:	6023      	str	r3, [r4, #0]
    6364:	f7fc fa9a 	bl	289c <_close>
    6368:	1c43      	adds	r3, r0, #1
    636a:	d103      	bne.n	6374 <_close_r+0x1c>
    636c:	6823      	ldr	r3, [r4, #0]
    636e:	2b00      	cmp	r3, #0
    6370:	d000      	beq.n	6374 <_close_r+0x1c>
    6372:	602b      	str	r3, [r5, #0]
    6374:	bd70      	pop	{r4, r5, r6, pc}
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	200003fc 	.word	0x200003fc

0000637c <_fstat_r>:
    637c:	2300      	movs	r3, #0
    637e:	b570      	push	{r4, r5, r6, lr}
    6380:	4c06      	ldr	r4, [pc, #24]	; (639c <_fstat_r+0x20>)
    6382:	0005      	movs	r5, r0
    6384:	0008      	movs	r0, r1
    6386:	0011      	movs	r1, r2
    6388:	6023      	str	r3, [r4, #0]
    638a:	f7fc fa8a 	bl	28a2 <_fstat>
    638e:	1c43      	adds	r3, r0, #1
    6390:	d103      	bne.n	639a <_fstat_r+0x1e>
    6392:	6823      	ldr	r3, [r4, #0]
    6394:	2b00      	cmp	r3, #0
    6396:	d000      	beq.n	639a <_fstat_r+0x1e>
    6398:	602b      	str	r3, [r5, #0]
    639a:	bd70      	pop	{r4, r5, r6, pc}
    639c:	200003fc 	.word	0x200003fc

000063a0 <_isatty_r>:
    63a0:	2300      	movs	r3, #0
    63a2:	b570      	push	{r4, r5, r6, lr}
    63a4:	4c06      	ldr	r4, [pc, #24]	; (63c0 <_isatty_r+0x20>)
    63a6:	0005      	movs	r5, r0
    63a8:	0008      	movs	r0, r1
    63aa:	6023      	str	r3, [r4, #0]
    63ac:	f7fc fa7e 	bl	28ac <_isatty>
    63b0:	1c43      	adds	r3, r0, #1
    63b2:	d103      	bne.n	63bc <_isatty_r+0x1c>
    63b4:	6823      	ldr	r3, [r4, #0]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d000      	beq.n	63bc <_isatty_r+0x1c>
    63ba:	602b      	str	r3, [r5, #0]
    63bc:	bd70      	pop	{r4, r5, r6, pc}
    63be:	46c0      	nop			; (mov r8, r8)
    63c0:	200003fc 	.word	0x200003fc

000063c4 <_lseek_r>:
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	0005      	movs	r5, r0
    63c8:	0008      	movs	r0, r1
    63ca:	0011      	movs	r1, r2
    63cc:	2200      	movs	r2, #0
    63ce:	4c06      	ldr	r4, [pc, #24]	; (63e8 <_lseek_r+0x24>)
    63d0:	6022      	str	r2, [r4, #0]
    63d2:	001a      	movs	r2, r3
    63d4:	f7fc fa6c 	bl	28b0 <_lseek>
    63d8:	1c43      	adds	r3, r0, #1
    63da:	d103      	bne.n	63e4 <_lseek_r+0x20>
    63dc:	6823      	ldr	r3, [r4, #0]
    63de:	2b00      	cmp	r3, #0
    63e0:	d000      	beq.n	63e4 <_lseek_r+0x20>
    63e2:	602b      	str	r3, [r5, #0]
    63e4:	bd70      	pop	{r4, r5, r6, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	200003fc 	.word	0x200003fc

000063ec <memchr>:
    63ec:	b2c9      	uxtb	r1, r1
    63ee:	1882      	adds	r2, r0, r2
    63f0:	4290      	cmp	r0, r2
    63f2:	d101      	bne.n	63f8 <memchr+0xc>
    63f4:	2000      	movs	r0, #0
    63f6:	4770      	bx	lr
    63f8:	7803      	ldrb	r3, [r0, #0]
    63fa:	428b      	cmp	r3, r1
    63fc:	d0fb      	beq.n	63f6 <memchr+0xa>
    63fe:	3001      	adds	r0, #1
    6400:	e7f6      	b.n	63f0 <memchr+0x4>

00006402 <__malloc_lock>:
    6402:	4770      	bx	lr

00006404 <__malloc_unlock>:
    6404:	4770      	bx	lr

00006406 <_realloc_r>:
    6406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6408:	0007      	movs	r7, r0
    640a:	000d      	movs	r5, r1
    640c:	0016      	movs	r6, r2
    640e:	2900      	cmp	r1, #0
    6410:	d105      	bne.n	641e <_realloc_r+0x18>
    6412:	0011      	movs	r1, r2
    6414:	f7fe fed0 	bl	51b8 <_malloc_r>
    6418:	0004      	movs	r4, r0
    641a:	0020      	movs	r0, r4
    641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    641e:	2a00      	cmp	r2, #0
    6420:	d103      	bne.n	642a <_realloc_r+0x24>
    6422:	f7fe fe7f 	bl	5124 <_free_r>
    6426:	0034      	movs	r4, r6
    6428:	e7f7      	b.n	641a <_realloc_r+0x14>
    642a:	f000 f827 	bl	647c <_malloc_usable_size_r>
    642e:	002c      	movs	r4, r5
    6430:	4286      	cmp	r6, r0
    6432:	d9f2      	bls.n	641a <_realloc_r+0x14>
    6434:	0031      	movs	r1, r6
    6436:	0038      	movs	r0, r7
    6438:	f7fe febe 	bl	51b8 <_malloc_r>
    643c:	1e04      	subs	r4, r0, #0
    643e:	d0ec      	beq.n	641a <_realloc_r+0x14>
    6440:	0029      	movs	r1, r5
    6442:	0032      	movs	r2, r6
    6444:	f7fe f8dc 	bl	4600 <memcpy>
    6448:	0029      	movs	r1, r5
    644a:	0038      	movs	r0, r7
    644c:	f7fe fe6a 	bl	5124 <_free_r>
    6450:	e7e3      	b.n	641a <_realloc_r+0x14>
	...

00006454 <_read_r>:
    6454:	b570      	push	{r4, r5, r6, lr}
    6456:	0005      	movs	r5, r0
    6458:	0008      	movs	r0, r1
    645a:	0011      	movs	r1, r2
    645c:	2200      	movs	r2, #0
    645e:	4c06      	ldr	r4, [pc, #24]	; (6478 <_read_r+0x24>)
    6460:	6022      	str	r2, [r4, #0]
    6462:	001a      	movs	r2, r3
    6464:	f7fc f9be 	bl	27e4 <_read>
    6468:	1c43      	adds	r3, r0, #1
    646a:	d103      	bne.n	6474 <_read_r+0x20>
    646c:	6823      	ldr	r3, [r4, #0]
    646e:	2b00      	cmp	r3, #0
    6470:	d000      	beq.n	6474 <_read_r+0x20>
    6472:	602b      	str	r3, [r5, #0]
    6474:	bd70      	pop	{r4, r5, r6, pc}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	200003fc 	.word	0x200003fc

0000647c <_malloc_usable_size_r>:
    647c:	1f0b      	subs	r3, r1, #4
    647e:	681b      	ldr	r3, [r3, #0]
    6480:	1f18      	subs	r0, r3, #4
    6482:	2b00      	cmp	r3, #0
    6484:	da01      	bge.n	648a <_malloc_usable_size_r+0xe>
    6486:	580b      	ldr	r3, [r1, r0]
    6488:	18c0      	adds	r0, r0, r3
    648a:	4770      	bx	lr
    648c:	00000326 	.word	0x00000326
    6490:	00000572 	.word	0x00000572
    6494:	00000572 	.word	0x00000572
    6498:	00000572 	.word	0x00000572
    649c:	00000572 	.word	0x00000572
    64a0:	00000572 	.word	0x00000572
    64a4:	00000572 	.word	0x00000572
    64a8:	00000572 	.word	0x00000572
    64ac:	00000572 	.word	0x00000572
    64b0:	00000572 	.word	0x00000572
    64b4:	00000572 	.word	0x00000572
    64b8:	00000572 	.word	0x00000572
    64bc:	00000572 	.word	0x00000572
    64c0:	00000572 	.word	0x00000572
    64c4:	00000572 	.word	0x00000572
    64c8:	00000572 	.word	0x00000572
    64cc:	0000030e 	.word	0x0000030e
    64d0:	00000572 	.word	0x00000572
    64d4:	00000572 	.word	0x00000572
    64d8:	00000572 	.word	0x00000572
    64dc:	00000572 	.word	0x00000572
    64e0:	00000572 	.word	0x00000572
    64e4:	00000572 	.word	0x00000572
    64e8:	00000572 	.word	0x00000572
    64ec:	00000572 	.word	0x00000572
    64f0:	00000572 	.word	0x00000572
    64f4:	00000572 	.word	0x00000572
    64f8:	00000572 	.word	0x00000572
    64fc:	00000572 	.word	0x00000572
    6500:	00000572 	.word	0x00000572
    6504:	00000572 	.word	0x00000572
    6508:	00000572 	.word	0x00000572
    650c:	0000031e 	.word	0x0000031e
    6510:	00000572 	.word	0x00000572
    6514:	00000572 	.word	0x00000572
    6518:	00000572 	.word	0x00000572
    651c:	00000572 	.word	0x00000572
    6520:	00000572 	.word	0x00000572
    6524:	00000572 	.word	0x00000572
    6528:	00000572 	.word	0x00000572
    652c:	00000572 	.word	0x00000572
    6530:	00000572 	.word	0x00000572
    6534:	00000572 	.word	0x00000572
    6538:	00000572 	.word	0x00000572
    653c:	00000572 	.word	0x00000572
    6540:	00000572 	.word	0x00000572
    6544:	00000572 	.word	0x00000572
    6548:	00000572 	.word	0x00000572
    654c:	00000316 	.word	0x00000316
    6550:	0000032e 	.word	0x0000032e
    6554:	000002f6 	.word	0x000002f6
    6558:	00000306 	.word	0x00000306
    655c:	000002fe 	.word	0x000002fe
    6560:	00000002 	.word	0x00000002
    6564:	00000003 	.word	0x00000003
    6568:	00000028 	.word	0x00000028
    656c:	00000029 	.word	0x00000029
    6570:	00000004 	.word	0x00000004
    6574:	00000005 	.word	0x00000005
    6578:	00000006 	.word	0x00000006
    657c:	00000007 	.word	0x00000007
    6580:	0000ffff 	.word	0x0000ffff
    6584:	0000ffff 	.word	0x0000ffff
    6588:	00000022 	.word	0x00000022
    658c:	00000023 	.word	0x00000023
    6590:	0000ffff 	.word	0x0000ffff
    6594:	0000ffff 	.word	0x0000ffff
    6598:	0000ffff 	.word	0x0000ffff
    659c:	0000ffff 	.word	0x0000ffff
    65a0:	00000008 	.word	0x00000008
    65a4:	00000009 	.word	0x00000009
    65a8:	0000000a 	.word	0x0000000a
    65ac:	0000000b 	.word	0x0000000b
    65b0:	20434441 	.word	0x20434441
    65b4:	75736552 	.word	0x75736552
    65b8:	203a746c 	.word	0x203a746c
    65bc:	000d6425 	.word	0x000d6425
    65c0:	0a0d6425 	.word	0x0a0d6425
    65c4:	00000000 	.word	0x00000000
    65c8:	20746f4e 	.word	0x20746f4e
    65cc:	6c706d69 	.word	0x6c706d69
    65d0:	6e656d65 	.word	0x6e656d65
    65d4:	20646574 	.word	0x20646574
    65d8:	21746579 	.word	0x21746579
    65dc:	0000000d 	.word	0x0000000d
    65e0:	6d6d6f43 	.word	0x6d6d6f43
    65e4:	20646e61 	.word	0x20646e61
    65e8:	7473694c 	.word	0x7473694c
    65ec:	00000d3a 	.word	0x00000d3a
    65f0:	20732509 	.word	0x20732509
    65f4:	0a0d7325 	.word	0x0a0d7325
    65f8:	73250909 	.word	0x73250909
    65fc:	00000a0d 	.word	0x00000a0d
    6600:	2e353532 	.word	0x2e353532
    6604:	2e353532 	.word	0x2e353532
    6608:	2e353532 	.word	0x2e353532
    660c:	00353532 	.word	0x00353532
    6610:	41205049 	.word	0x41205049
    6614:	65726464 	.word	0x65726464
    6618:	203a7373 	.word	0x203a7373
    661c:	0a0d7325 	.word	0x0a0d7325
    6620:	00000000 	.word	0x00000000
    6624:	323a3130 	.word	0x323a3130
    6628:	35343a33 	.word	0x35343a33
    662c:	3a37363a 	.word	0x3a37363a
    6630:	613a3938 	.word	0x613a3938
    6634:	00000062 	.word	0x00000062
    6638:	2043414d 	.word	0x2043414d
    663c:	72646441 	.word	0x72646441
    6640:	3a737365 	.word	0x3a737365
    6644:	0d732520 	.word	0x0d732520
    6648:	0000000a 	.word	0x0000000a
    664c:	64616552 	.word	0x64616552
    6650:	20676e69 	.word	0x20676e69
    6654:	6d6f7266 	.word	0x6d6f7266
    6658:	63634120 	.word	0x63634120
    665c:	72656c65 	.word	0x72656c65
    6660:	74656d6f 	.word	0x74656d6f
    6664:	2e2e7265 	.word	0x2e2e7265
    6668:	00000d2e 	.word	0x00000d2e
    666c:	64616552 	.word	0x64616552
    6670:	20676e69 	.word	0x20676e69
    6674:	6d6f7266 	.word	0x6d6f7266
    6678:	72794720 	.word	0x72794720
    667c:	2e2e2e6f 	.word	0x2e2e2e6f
    6680:	0000000d 	.word	0x0000000d
    6684:	656e6f44 	.word	0x656e6f44
    6688:	00000d21 	.word	0x00000d21
    668c:	00000020 	.word	0x00000020
    6690:	20746f4e 	.word	0x20746f4e
    6694:	756f6e65 	.word	0x756f6e65
    6698:	61206867 	.word	0x61206867
    669c:	6d756772 	.word	0x6d756772
    66a0:	73746e65 	.word	0x73746e65
    66a4:	72542021 	.word	0x72542021
    66a8:	68222079 	.word	0x68222079
    66ac:	22706c65 	.word	0x22706c65
    66b0:	00000d2e 	.word	0x00000d2e
    66b4:	00000041 	.word	0x00000041
    66b8:	00000042 	.word	0x00000042
    66bc:	65746e45 	.word	0x65746e45
    66c0:	20612072 	.word	0x20612072
    66c4:	696c6176 	.word	0x696c6176
    66c8:	6f502064 	.word	0x6f502064
    66cc:	20217472 	.word	0x20217472
    66d0:	20797254 	.word	0x20797254
    66d4:	6c656822 	.word	0x6c656822
    66d8:	0d2e2270 	.word	0x0d2e2270
    66dc:	00000000 	.word	0x00000000
    66e0:	61766e49 	.word	0x61766e49
    66e4:	2064696c 	.word	0x2064696c
    66e8:	6d6d6f63 	.word	0x6d6d6f63
    66ec:	21646e61 	.word	0x21646e61
    66f0:	70795420 	.word	0x70795420
    66f4:	68222065 	.word	0x68222065
    66f8:	22706c65 	.word	0x22706c65
    66fc:	726f6620 	.word	0x726f6620
    6700:	6c206120 	.word	0x6c206120
    6704:	20747369 	.word	0x20747369
    6708:	6120666f 	.word	0x6120666f
    670c:	6c696176 	.word	0x6c696176
    6710:	656c6261 	.word	0x656c6261
    6714:	6d6f6320 	.word	0x6d6f6320
    6718:	646e616d 	.word	0x646e616d
    671c:	000d2e73 	.word	0x000d2e73
    6720:	6c707041 	.word	0x6c707041
    6724:	74616369 	.word	0x74616369
    6728:	206e6f69 	.word	0x206e6f69
    672c:	73726556 	.word	0x73726556
    6730:	3a6e6f69 	.word	0x3a6e6f69
    6734:	0d732520 	.word	0x0d732520
    6738:	0000000a 	.word	0x0000000a
    673c:	2e312e30 	.word	0x2e312e30
    6740:	00000030 	.word	0x00000030
    6744:	746f6f42 	.word	0x746f6f42
    6748:	64616f6c 	.word	0x64616f6c
    674c:	56207265 	.word	0x56207265
    6750:	69737265 	.word	0x69737265
    6754:	203a6e6f 	.word	0x203a6e6f
    6758:	0a0d7325 	.word	0x0a0d7325
    675c:	00000000 	.word	0x00000000
    6760:	70736944 	.word	0x70736944
    6764:	2079616c 	.word	0x2079616c
    6768:	206c6c61 	.word	0x206c6c61
    676c:	6d6d6f63 	.word	0x6d6d6f63
    6770:	73646e61 	.word	0x73646e61
    6774:	00000000 	.word	0x00000000
    6778:	6e697250 	.word	0x6e697250
    677c:	6f622074 	.word	0x6f622074
    6780:	6f6c746f 	.word	0x6f6c746f
    6784:	72656461 	.word	0x72656461
    6788:	72696620 	.word	0x72696620
    678c:	7261776d 	.word	0x7261776d
    6790:	6e692065 	.word	0x6e692065
    6794:	6d726f66 	.word	0x6d726f66
    6798:	6f697461 	.word	0x6f697461
    679c:	00002e6e 	.word	0x00002e6e
    67a0:	6e697250 	.word	0x6e697250
    67a4:	70612074 	.word	0x70612074
    67a8:	63696c70 	.word	0x63696c70
    67ac:	6f697461 	.word	0x6f697461
    67b0:	6576206e 	.word	0x6576206e
    67b4:	6f697372 	.word	0x6f697372
    67b8:	6e69206e 	.word	0x6e69206e
    67bc:	6d726f66 	.word	0x6d726f66
    67c0:	6f697461 	.word	0x6f697461
    67c4:	00002e6e 	.word	0x00002e6e
    67c8:	726f705b 	.word	0x726f705b
    67cc:	5b205d74 	.word	0x5b205d74
    67d0:	5f6e6970 	.word	0x5f6e6970
    67d4:	5d6d756e 	.word	0x5d6d756e
    67d8:	00000000 	.word	0x00000000
    67dc:	20746553 	.word	0x20746553
    67e0:	4f495047 	.word	0x4f495047
    67e4:	6e697020 	.word	0x6e697020
    67e8:	20746120 	.word	0x20746120
    67ec:	69672061 	.word	0x69672061
    67f0:	206e6576 	.word	0x206e6576
    67f4:	74726f70 	.word	0x74726f70
    67f8:	67696820 	.word	0x67696820
    67fc:	00002e68 	.word	0x00002e68
    6800:	20746553 	.word	0x20746553
    6804:	4f495047 	.word	0x4f495047
    6808:	6e697020 	.word	0x6e697020
    680c:	20746120 	.word	0x20746120
    6810:	69672061 	.word	0x69672061
    6814:	206e6576 	.word	0x206e6576
    6818:	74726f70 	.word	0x74726f70
    681c:	776f6c20 	.word	0x776f6c20
    6820:	0000002e 	.word	0x0000002e
    6824:	20746547 	.word	0x20746547
    6828:	74617473 	.word	0x74617473
    682c:	666f2065 	.word	0x666f2065
    6830:	47206120 	.word	0x47206120
    6834:	204f4950 	.word	0x204f4950
    6838:	2e6e6970 	.word	0x2e6e6970
    683c:	00000000 	.word	0x00000000
    6840:	6e697250 	.word	0x6e697250
    6844:	68742074 	.word	0x68742074
    6848:	414d2065 	.word	0x414d2065
    684c:	64612043 	.word	0x64612043
    6850:	73657264 	.word	0x73657264
    6854:	00002e73 	.word	0x00002e73
    6858:	6e697250 	.word	0x6e697250
    685c:	68742074 	.word	0x68742074
    6860:	50492065 	.word	0x50492065
    6864:	64644120 	.word	0x64644120
    6868:	73736572 	.word	0x73736572
    686c:	0000002e 	.word	0x0000002e
    6870:	6165725b 	.word	0x6165725b
    6874:	676e6964 	.word	0x676e6964
    6878:	756f6320 	.word	0x756f6320
    687c:	205d746e 	.word	0x205d746e
    6880:	746e695b 	.word	0x746e695b
    6884:	61767265 	.word	0x61767265
    6888:	6e69206c 	.word	0x6e69206c
    688c:	5d736d20 	.word	0x5d736d20
    6890:	00000000 	.word	0x00000000
    6894:	64616552 	.word	0x64616552
    6898:	6f726620 	.word	0x6f726620
    689c:	6874206d 	.word	0x6874206d
    68a0:	79472065 	.word	0x79472065
    68a4:	63736f72 	.word	0x63736f72
    68a8:	2065706f 	.word	0x2065706f
    68ac:	736e6573 	.word	0x736e6573
    68b0:	002e726f 	.word	0x002e726f
    68b4:	64616552 	.word	0x64616552
    68b8:	6f726620 	.word	0x6f726620
    68bc:	6874206d 	.word	0x6874206d
    68c0:	63412065 	.word	0x63412065
    68c4:	656c6563 	.word	0x656c6563
    68c8:	656d6f72 	.word	0x656d6f72
    68cc:	20726574 	.word	0x20726574
    68d0:	736e6573 	.word	0x736e6573
    68d4:	002e726f 	.word	0x002e726f
    68d8:	20746547 	.word	0x20746547
    68dc:	20656874 	.word	0x20656874
    68e0:	20434441 	.word	0x20434441
    68e4:	756c6176 	.word	0x756c6176
    68e8:	666f2065 	.word	0x666f2065
    68ec:	206e6120 	.word	0x206e6120
    68f0:	75706e69 	.word	0x75706e69
    68f4:	69702074 	.word	0x69702074
    68f8:	00002e6e 	.word	0x00002e6e
    68fc:	6e697250 	.word	0x6e697250
    6900:	68742074 	.word	0x68742074
    6904:	65742065 	.word	0x65742065
    6908:	7265706d 	.word	0x7265706d
    690c:	72757461 	.word	0x72757461
    6910:	65722065 	.word	0x65722065
    6914:	6e696461 	.word	0x6e696461
    6918:	666f2067 	.word	0x666f2067
    691c:	65687420 	.word	0x65687420
    6920:	2d6e6f20 	.word	0x2d6e6f20
    6924:	72616f62 	.word	0x72616f62
    6928:	434d2064 	.word	0x434d2064
    692c:	65742055 	.word	0x65742055
    6930:	7265706d 	.word	0x7265706d
    6934:	72757461 	.word	0x72757461
    6938:	65732065 	.word	0x65732065
    693c:	726f736e 	.word	0x726f736e
    6940:	0000002e 	.word	0x0000002e
    6944:	6e697250 	.word	0x6e697250
    6948:	756f2074 	.word	0x756f2074
    694c:	696c2074 	.word	0x696c2074
    6950:	6f207473 	.word	0x6f207473
    6954:	64612066 	.word	0x64612066
    6958:	73657264 	.word	0x73657264
    695c:	20736573 	.word	0x20736573
    6960:	4920666f 	.word	0x4920666f
    6964:	64204332 	.word	0x64204332
    6968:	63697665 	.word	0x63697665
    696c:	6f207365 	.word	0x6f207365
    6970:	7562206e 	.word	0x7562206e
    6974:	00002e73 	.word	0x00002e73
    6978:	5f633269 	.word	0x5f633269
    697c:	6e616373 	.word	0x6e616373
    6980:	00000000 	.word	0x00000000
    6984:	5f75636d 	.word	0x5f75636d
    6988:	706d6574 	.word	0x706d6574
    698c:	00000000 	.word	0x00000000
    6990:	5f636461 	.word	0x5f636461
    6994:	00746567 	.word	0x00746567
    6998:	64616572 	.word	0x64616572
    699c:	6363615f 	.word	0x6363615f
    69a0:	00006c65 	.word	0x00006c65
    69a4:	64616572 	.word	0x64616572
    69a8:	7279675f 	.word	0x7279675f
    69ac:	0000006f 	.word	0x0000006f
    69b0:	00007069 	.word	0x00007069
    69b4:	0063616d 	.word	0x0063616d
    69b8:	6f697067 	.word	0x6f697067
    69bc:	7465675f 	.word	0x7465675f
    69c0:	00000000 	.word	0x00000000
    69c4:	6f697067 	.word	0x6f697067
    69c8:	656c635f 	.word	0x656c635f
    69cc:	00007261 	.word	0x00007261
    69d0:	6f697067 	.word	0x6f697067
    69d4:	7465735f 	.word	0x7465735f
    69d8:	00000000 	.word	0x00000000
    69dc:	5f726576 	.word	0x5f726576
    69e0:	00707061 	.word	0x00707061
    69e4:	5f726576 	.word	0x5f726576
    69e8:	00006c62 	.word	0x00006c62
    69ec:	706c6568 	.word	0x706c6568
    69f0:	00000000 	.word	0x00000000
    69f4:	42000800 	.word	0x42000800
    69f8:	42000c00 	.word	0x42000c00
    69fc:	42001000 	.word	0x42001000
    6a00:	42001400 	.word	0x42001400
    6a04:	42001800 	.word	0x42001800
    6a08:	42001c00 	.word	0x42001c00
    6a0c:	00001f72 	.word	0x00001f72
    6a10:	00001f6e 	.word	0x00001f6e
    6a14:	00001f6e 	.word	0x00001f6e
    6a18:	00001fd0 	.word	0x00001fd0
    6a1c:	00001fd0 	.word	0x00001fd0
    6a20:	00001f86 	.word	0x00001f86
    6a24:	00001f78 	.word	0x00001f78
    6a28:	00001f8c 	.word	0x00001f8c
    6a2c:	00001fbe 	.word	0x00001fbe
    6a30:	00002190 	.word	0x00002190
    6a34:	00002170 	.word	0x00002170
    6a38:	00002170 	.word	0x00002170
    6a3c:	000021fc 	.word	0x000021fc
    6a40:	00002182 	.word	0x00002182
    6a44:	0000219e 	.word	0x0000219e
    6a48:	00002174 	.word	0x00002174
    6a4c:	000021ac 	.word	0x000021ac
    6a50:	000021ec 	.word	0x000021ec
    6a54:	57202d2d 	.word	0x57202d2d
    6a58:	31434e49 	.word	0x31434e49
    6a5c:	20303035 	.word	0x20303035
    6a60:	70696863 	.word	0x70696863
    6a64:	666e6920 	.word	0x666e6920
    6a68:	616d726f 	.word	0x616d726f
    6a6c:	6e6f6974 	.word	0x6e6f6974
    6a70:	61786520 	.word	0x61786520
    6a74:	656c706d 	.word	0x656c706d
    6a78:	0d2d2d20 	.word	0x0d2d2d20
    6a7c:	202d2d0a 	.word	0x202d2d0a
    6a80:	574d4153 	.word	0x574d4153
    6a84:	585f3532 	.word	0x585f3532
    6a88:	49414c50 	.word	0x49414c50
    6a8c:	5f44454e 	.word	0x5f44454e
    6a90:	204f5250 	.word	0x204f5250
    6a94:	0a0d2d2d 	.word	0x0a0d2d2d
    6a98:	43202d2d 	.word	0x43202d2d
    6a9c:	69706d6f 	.word	0x69706d6f
    6aa0:	3a64656c 	.word	0x3a64656c
    6aa4:	6e614a20 	.word	0x6e614a20
    6aa8:	20373220 	.word	0x20373220
    6aac:	38313032 	.word	0x38313032
    6ab0:	3a353120 	.word	0x3a353120
    6ab4:	333a3533 	.word	0x333a3533
    6ab8:	2d2d2035 	.word	0x2d2d2035
    6abc:	0000000d 	.word	0x0000000d
    6ac0:	203d3d3d 	.word	0x203d3d3d
    6ac4:	6e6f7244 	.word	0x6e6f7244
    6ac8:	44414465 	.word	0x44414465
    6acc:	494c4320 	.word	0x494c4320
    6ad0:	746e4920 	.word	0x746e4920
    6ad4:	61667265 	.word	0x61667265
    6ad8:	3d206563 	.word	0x3d206563
    6adc:	000d3d3d 	.word	0x000d3d3d
    6ae0:	0000203e 	.word	0x0000203e
    6ae4:	0d5e5b25 	.word	0x0d5e5b25
    6ae8:	2a255d0a 	.word	0x2a255d0a
    6aec:	00000063 	.word	0x00000063
    6af0:	000034fc 	.word	0x000034fc
    6af4:	000034de 	.word	0x000034de
    6af8:	00003498 	.word	0x00003498
    6afc:	000033b6 	.word	0x000033b6
    6b00:	00003498 	.word	0x00003498
    6b04:	000034d0 	.word	0x000034d0
    6b08:	00003498 	.word	0x00003498
    6b0c:	000033b6 	.word	0x000033b6
    6b10:	000034de 	.word	0x000034de
    6b14:	000034de 	.word	0x000034de
    6b18:	000034d0 	.word	0x000034d0
    6b1c:	000033b6 	.word	0x000033b6
    6b20:	000033ae 	.word	0x000033ae
    6b24:	000033ae 	.word	0x000033ae
    6b28:	000033ae 	.word	0x000033ae
    6b2c:	00003714 	.word	0x00003714
    6b30:	00003b5c 	.word	0x00003b5c
    6b34:	00003a1c 	.word	0x00003a1c
    6b38:	00003a1c 	.word	0x00003a1c
    6b3c:	00003a18 	.word	0x00003a18
    6b40:	00003b34 	.word	0x00003b34
    6b44:	00003b34 	.word	0x00003b34
    6b48:	00003b26 	.word	0x00003b26
    6b4c:	00003a18 	.word	0x00003a18
    6b50:	00003b34 	.word	0x00003b34
    6b54:	00003b26 	.word	0x00003b26
    6b58:	00003b34 	.word	0x00003b34
    6b5c:	00003a18 	.word	0x00003a18
    6b60:	00003b3c 	.word	0x00003b3c
    6b64:	00003b3c 	.word	0x00003b3c
    6b68:	00003b3c 	.word	0x00003b3c
    6b6c:	00003d40 	.word	0x00003d40

00006b70 <_global_impure_ptr>:
    6b70:	20000044                                D.. 

00006b74 <__sf_fake_stderr>:
	...

00006b94 <__sf_fake_stdin>:
	...

00006bb4 <__sf_fake_stdout>:
	...
    6bd4:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    6be4:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    6bf4:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    6c04:	37363534 62613938 66656463 00000000     456789abcdef....
    6c14:	00006c32 00006c35 00006c38 61462d41     2l..5l..8l..A-Fa
    6c24:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    6c34:	00303000 00005878                                .00.xX.

00006c3b <_ctype_>:
    6c3b:	20202000 20202020 28282020 20282828     .         ((((( 
    6c4b:	20202020 20202020 20202020 20202020                     
    6c5b:	10108820 10101010 10101010 10101010      ...............
    6c6b:	04040410 04040404 10040404 10101010     ................
    6c7b:	41411010 41414141 01010101 01010101     ..AAAAAA........
    6c8b:	01010101 01010101 01010101 10101010     ................
    6c9b:	42421010 42424242 02020202 02020202     ..BBBBBB........
    6cab:	02020202 02020202 02020202 10101010     ................
    6cbb:	00000020 00000000 00000000 00000000      ...............
	...

00006d3c <_init>:
    6d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d42:	bc08      	pop	{r3}
    6d44:	469e      	mov	lr, r3
    6d46:	4770      	bx	lr

00006d48 <__init_array_start>:
    6d48:	000000dd 	.word	0x000000dd

00006d4c <_fini>:
    6d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d4e:	46c0      	nop			; (mov r8, r8)
    6d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d52:	bc08      	pop	{r3}
    6d54:	469e      	mov	lr, r3
    6d56:	4770      	bx	lr

00006d58 <__fini_array_start>:
    6d58:	000000b5 	.word	0x000000b5
