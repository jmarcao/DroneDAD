
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007398  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000224  20000000  00007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f0  20000224  000075bc  00020224  2**2
                  ALLOC
  3 .stack        00002004  20000414  000077ac  00020224  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00040d82  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000593a  00000000  00000000  00061027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007ebd  00000000  00000000  00066961  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b0  00000000  00000000  0006e81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000940  00000000  00000000  0006efce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dc19  00000000  00000000  0006f90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012cfa  00000000  00000000  0008d527  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e94b  00000000  00000000  000a0221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002134  00000000  00000000  0012eb6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 24 00 20 0d 2b 00 00 09 2b 00 00 09 2b 00 00     .$. .+...+...+..
	...
      2c:	09 2b 00 00 00 00 00 00 00 00 00 00 09 2b 00 00     .+...........+..
      3c:	09 2b 00 00 09 2b 00 00 09 2b 00 00 09 2b 00 00     .+...+...+...+..
      4c:	09 2b 00 00 b9 18 00 00 09 2b 00 00 09 2b 00 00     .+.......+...+..
      5c:	09 2b 00 00 09 2b 00 00 99 1d 00 00 a9 1d 00 00     .+...+..........
      6c:	b9 1d 00 00 c9 1d 00 00 d9 1d 00 00 e9 1d 00 00     ................
      7c:	09 2b 00 00 09 2b 00 00 09 2b 00 00 09 2b 00 00     .+...+...+...+..
      8c:	09 2b 00 00 09 2b 00 00 00 00 00 00 00 00 00 00     .+...+..........
      9c:	19 06 00 00 09 2b 00 00 09 2b 00 00 09 2b 00 00     .....+...+...+..
      ac:	09 2b 00 00 00 00 00 00                             .+......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000224 	.word	0x20000224
      d4:	00000000 	.word	0x00000000
      d8:	00007398 	.word	0x00007398

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000228 	.word	0x20000228
     108:	00007398 	.word	0x00007398
     10c:	00007398 	.word	0x00007398
     110:	00000000 	.word	0x00000000

00000114 <configure_adc_temp>:
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/

void configure_adc_temp(void)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     118:	4668      	mov	r0, sp
     11a:	4b18      	ldr	r3, [pc, #96]	; (17c <configure_adc_temp+0x68>)
     11c:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     11e:	2301      	movs	r3, #1
     120:	466a      	mov	r2, sp
     122:	7013      	strb	r3, [r2, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     124:	2380      	movs	r3, #128	; 0x80
     126:	009b      	lsls	r3, r3, #2
     128:	8053      	strh	r3, [r2, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
     12a:	2300      	movs	r3, #0
     12c:	7053      	strb	r3, [r2, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
     12e:	3318      	adds	r3, #24
     130:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     132:	23c0      	movs	r3, #192	; 0xc0
     134:	015b      	lsls	r3, r3, #5
     136:	81d3      	strh	r3, [r2, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
     138:	2304      	movs	r3, #4
     13a:	75d3      	strb	r3, [r2, #23]
	
	adc_init(&adc_inst, ADC, &conf_adc);
     13c:	4d10      	ldr	r5, [pc, #64]	; (180 <configure_adc_temp+0x6c>)
     13e:	4c11      	ldr	r4, [pc, #68]	; (184 <configure_adc_temp+0x70>)
     140:	0029      	movs	r1, r5
     142:	0020      	movs	r0, r4
     144:	4b10      	ldr	r3, [pc, #64]	; (188 <configure_adc_temp+0x74>)
     146:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
     148:	2322      	movs	r3, #34	; 0x22
     14a:	70ab      	strb	r3, [r5, #2]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14c:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     150:	b25b      	sxtb	r3, r3
     152:	2b00      	cmp	r3, #0
     154:	dbfb      	blt.n	14e <configure_adc_temp+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     156:	2180      	movs	r1, #128	; 0x80
     158:	0409      	lsls	r1, r1, #16
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <configure_adc_temp+0x78>)
     15c:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     15e:	230f      	movs	r3, #15
     160:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     162:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     164:	7813      	ldrb	r3, [r2, #0]
     166:	2102      	movs	r1, #2
     168:	430b      	orrs	r3, r1
     16a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     16c:	4b05      	ldr	r3, [pc, #20]	; (184 <configure_adc_temp+0x70>)
     16e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     170:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     172:	b25b      	sxtb	r3, r3
     174:	2b00      	cmp	r3, #0
     176:	dbfb      	blt.n	170 <configure_adc_temp+0x5c>
	
	adc_enable(&adc_inst);
}
     178:	b00d      	add	sp, #52	; 0x34
     17a:	bd30      	pop	{r4, r5, pc}
     17c:	000001a9 	.word	0x000001a9
     180:	42004000 	.word	0x42004000
     184:	200003f0 	.word	0x200003f0
     188:	000001f1 	.word	0x000001f1
     18c:	e000e100 	.word	0xe000e100

00000190 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
int calculate_temperature(int adc_result)
{	
     190:	b510      	push	{r4, lr}
	int temp = (adc_result *1000)/(4095*25);
     192:	23fa      	movs	r3, #250	; 0xfa
     194:	009b      	lsls	r3, r3, #2
     196:	4358      	muls	r0, r3
     198:	4901      	ldr	r1, [pc, #4]	; (1a0 <calculate_temperature+0x10>)
     19a:	4b02      	ldr	r3, [pc, #8]	; (1a4 <calculate_temperature+0x14>)
     19c:	4798      	blx	r3
	return temp;
}
     19e:	bd10      	pop	{r4, pc}
     1a0:	00018fe7 	.word	0x00018fe7
     1a4:	00003099 	.word	0x00003099

000001a8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1a8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1aa:	2200      	movs	r2, #0
     1ac:	2300      	movs	r3, #0
     1ae:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1b0:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1b2:	2100      	movs	r1, #0
     1b4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1b6:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1b8:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ba:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1bc:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1be:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1c0:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1c2:	24c0      	movs	r4, #192	; 0xc0
     1c4:	0164      	lsls	r4, r4, #5
     1c6:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1c8:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1ca:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1cc:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1ce:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1d0:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1d2:	242a      	movs	r4, #42	; 0x2a
     1d4:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1d6:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1d8:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1da:	3c06      	subs	r4, #6
     1dc:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1de:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1e0:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1e2:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1e4:	232b      	movs	r3, #43	; 0x2b
     1e6:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1e8:	3301      	adds	r3, #1
     1ea:	54c1      	strb	r1, [r0, r3]
}
     1ec:	bd10      	pop	{r4, pc}
	...

000001f0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	46d6      	mov	lr, sl
     1f4:	464f      	mov	r7, r9
     1f6:	4646      	mov	r6, r8
     1f8:	b5c0      	push	{r6, r7, lr}
     1fa:	b096      	sub	sp, #88	; 0x58
     1fc:	0007      	movs	r7, r0
     1fe:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     200:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     202:	4ac6      	ldr	r2, [pc, #792]	; (51c <adc_init+0x32c>)
     204:	6a10      	ldr	r0, [r2, #32]
     206:	2380      	movs	r3, #128	; 0x80
     208:	025b      	lsls	r3, r3, #9
     20a:	4303      	orrs	r3, r0
     20c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     20e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     210:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     212:	07db      	lsls	r3, r3, #31
     214:	d505      	bpl.n	222 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     216:	b016      	add	sp, #88	; 0x58
     218:	bc1c      	pop	{r2, r3, r4}
     21a:	4690      	mov	r8, r2
     21c:	4699      	mov	r9, r3
     21e:	46a2      	mov	sl, r4
     220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     222:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     224:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     226:	079b      	lsls	r3, r3, #30
     228:	d4f5      	bmi.n	216 <adc_init+0x26>
	module_inst->reference = config->reference;
     22a:	7873      	ldrb	r3, [r6, #1]
     22c:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     22e:	2b00      	cmp	r3, #0
     230:	d104      	bne.n	23c <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     232:	4abb      	ldr	r2, [pc, #748]	; (520 <adc_init+0x330>)
     234:	6c13      	ldr	r3, [r2, #64]	; 0x40
     236:	2104      	movs	r1, #4
     238:	430b      	orrs	r3, r1
     23a:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     23c:	2300      	movs	r3, #0
     23e:	60bb      	str	r3, [r7, #8]
     240:	60fb      	str	r3, [r7, #12]
     242:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     244:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     246:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     248:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     24a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     24c:	4bb5      	ldr	r3, [pc, #724]	; (524 <adc_init+0x334>)
     24e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     250:	232a      	movs	r3, #42	; 0x2a
     252:	5cf3      	ldrb	r3, [r6, r3]
     254:	2b00      	cmp	r3, #0
     256:	d105      	bne.n	264 <adc_init+0x74>
     258:	7d33      	ldrb	r3, [r6, #20]
     25a:	2b00      	cmp	r3, #0
     25c:	d102      	bne.n	264 <adc_init+0x74>
		module_inst->software_trigger = true;
     25e:	3301      	adds	r3, #1
     260:	777b      	strb	r3, [r7, #29]
     262:	e001      	b.n	268 <adc_init+0x78>
		module_inst->software_trigger = false;
     264:	2300      	movs	r3, #0
     266:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     268:	683b      	ldr	r3, [r7, #0]
     26a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     26c:	7833      	ldrb	r3, [r6, #0]
     26e:	466a      	mov	r2, sp
     270:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     272:	4669      	mov	r1, sp
     274:	201e      	movs	r0, #30
     276:	4bac      	ldr	r3, [pc, #688]	; (528 <adc_init+0x338>)
     278:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     27a:	201e      	movs	r0, #30
     27c:	4bab      	ldr	r3, [pc, #684]	; (52c <adc_init+0x33c>)
     27e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     280:	232c      	movs	r3, #44	; 0x2c
     282:	5cf2      	ldrb	r2, [r6, r3]
     284:	2a00      	cmp	r2, #0
     286:	d054      	beq.n	332 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     288:	3b01      	subs	r3, #1
     28a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     28c:	7b33      	ldrb	r3, [r6, #12]
     28e:	18eb      	adds	r3, r5, r3
     290:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     292:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     294:	b2c9      	uxtb	r1, r1
     296:	428b      	cmp	r3, r1
     298:	d221      	bcs.n	2de <adc_init+0xee>
     29a:	1952      	adds	r2, r2, r5
     29c:	b2d3      	uxtb	r3, r2
     29e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     2a0:	4ba3      	ldr	r3, [pc, #652]	; (530 <adc_init+0x340>)
     2a2:	469a      	mov	sl, r3
     2a4:	e003      	b.n	2ae <adc_init+0xbe>
			offset++;
     2a6:	3501      	adds	r5, #1
     2a8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     2aa:	454d      	cmp	r5, r9
     2ac:	d017      	beq.n	2de <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2ae:	240f      	movs	r4, #15
     2b0:	402c      	ands	r4, r5
     2b2:	7b33      	ldrb	r3, [r6, #12]
     2b4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     2b6:	2250      	movs	r2, #80	; 0x50
     2b8:	499e      	ldr	r1, [pc, #632]	; (534 <adc_init+0x344>)
     2ba:	a802      	add	r0, sp, #8
     2bc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2be:	2c13      	cmp	r4, #19
     2c0:	d8f1      	bhi.n	2a6 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c2:	00a4      	lsls	r4, r4, #2
     2c4:	ab02      	add	r3, sp, #8
     2c6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c8:	a901      	add	r1, sp, #4
     2ca:	2300      	movs	r3, #0
     2cc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2ce:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d2:	3301      	adds	r3, #1
     2d4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d6:	b2c0      	uxtb	r0, r0
     2d8:	4b97      	ldr	r3, [pc, #604]	; (538 <adc_init+0x348>)
     2da:	4798      	blx	r3
     2dc:	e7e3      	b.n	2a6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     2de:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2e0:	2250      	movs	r2, #80	; 0x50
     2e2:	4994      	ldr	r1, [pc, #592]	; (534 <adc_init+0x344>)
     2e4:	a802      	add	r0, sp, #8
     2e6:	4b92      	ldr	r3, [pc, #584]	; (530 <adc_init+0x340>)
     2e8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ea:	2c13      	cmp	r4, #19
     2ec:	d913      	bls.n	316 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2ee:	7d73      	ldrb	r3, [r6, #21]
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	b2db      	uxtb	r3, r3
     2f4:	4642      	mov	r2, r8
     2f6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2f8:	7db3      	ldrb	r3, [r6, #22]
     2fa:	01db      	lsls	r3, r3, #7
     2fc:	7872      	ldrb	r2, [r6, #1]
     2fe:	4313      	orrs	r3, r2
     300:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     302:	4642      	mov	r2, r8
     304:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     306:	7933      	ldrb	r3, [r6, #4]
     308:	2b34      	cmp	r3, #52	; 0x34
     30a:	d900      	bls.n	30e <adc_init+0x11e>
     30c:	e17b      	b.n	606 <adc_init+0x416>
     30e:	009b      	lsls	r3, r3, #2
     310:	4a8a      	ldr	r2, [pc, #552]	; (53c <adc_init+0x34c>)
     312:	58d3      	ldr	r3, [r2, r3]
     314:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     316:	00a4      	lsls	r4, r4, #2
     318:	ab02      	add	r3, sp, #8
     31a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     31c:	a901      	add	r1, sp, #4
     31e:	2300      	movs	r3, #0
     320:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     322:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     324:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     326:	3301      	adds	r3, #1
     328:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     32a:	b2c0      	uxtb	r0, r0
     32c:	4b82      	ldr	r3, [pc, #520]	; (538 <adc_init+0x348>)
     32e:	4798      	blx	r3
     330:	e7dd      	b.n	2ee <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     332:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     334:	2250      	movs	r2, #80	; 0x50
     336:	497f      	ldr	r1, [pc, #508]	; (534 <adc_init+0x344>)
     338:	a802      	add	r0, sp, #8
     33a:	4b7d      	ldr	r3, [pc, #500]	; (530 <adc_init+0x340>)
     33c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     33e:	2c13      	cmp	r4, #19
     340:	d915      	bls.n	36e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     342:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     344:	2250      	movs	r2, #80	; 0x50
     346:	497b      	ldr	r1, [pc, #492]	; (534 <adc_init+0x344>)
     348:	a802      	add	r0, sp, #8
     34a:	4b79      	ldr	r3, [pc, #484]	; (530 <adc_init+0x340>)
     34c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     34e:	2c13      	cmp	r4, #19
     350:	d8cd      	bhi.n	2ee <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     352:	00a4      	lsls	r4, r4, #2
     354:	ab02      	add	r3, sp, #8
     356:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     358:	a901      	add	r1, sp, #4
     35a:	2300      	movs	r3, #0
     35c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     35e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     360:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     362:	3301      	adds	r3, #1
     364:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     366:	b2c0      	uxtb	r0, r0
     368:	4b73      	ldr	r3, [pc, #460]	; (538 <adc_init+0x348>)
     36a:	4798      	blx	r3
     36c:	e7bf      	b.n	2ee <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     36e:	00a4      	lsls	r4, r4, #2
     370:	ab02      	add	r3, sp, #8
     372:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     374:	a901      	add	r1, sp, #4
     376:	2300      	movs	r3, #0
     378:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     37a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     37c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     37e:	3301      	adds	r3, #1
     380:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     382:	b2c0      	uxtb	r0, r0
     384:	4b6c      	ldr	r3, [pc, #432]	; (538 <adc_init+0x348>)
     386:	4798      	blx	r3
     388:	e7db      	b.n	342 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     38a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     38c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     38e:	2102      	movs	r1, #2
     390:	e01a      	b.n	3c8 <adc_init+0x1d8>
		adjres = config->divide_result;
     392:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     394:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     396:	2410      	movs	r4, #16
     398:	e016      	b.n	3c8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     39a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     39c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     39e:	2101      	movs	r1, #1
     3a0:	e012      	b.n	3c8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3a2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     3a4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3a6:	2100      	movs	r1, #0
     3a8:	e00e      	b.n	3c8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3aa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     3ac:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3ae:	2100      	movs	r1, #0
     3b0:	e00a      	b.n	3c8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3b2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3b4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3b6:	2100      	movs	r1, #0
     3b8:	e006      	b.n	3c8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ba:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3bc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3be:	2100      	movs	r1, #0
     3c0:	e002      	b.n	3c8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3c2:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3c4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3c6:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3c8:	0109      	lsls	r1, r1, #4
     3ca:	2270      	movs	r2, #112	; 0x70
     3cc:	400a      	ands	r2, r1
     3ce:	4313      	orrs	r3, r2
     3d0:	4642      	mov	r2, r8
     3d2:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3d4:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3d6:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3d8:	2b3f      	cmp	r3, #63	; 0x3f
     3da:	d900      	bls.n	3de <adc_init+0x1ee>
     3dc:	e71b      	b.n	216 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3de:	70d3      	strb	r3, [r2, #3]
	Adc *const adc_module = module_inst->hw;
     3e0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3e2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e4:	b25b      	sxtb	r3, r3
     3e6:	2b00      	cmp	r3, #0
     3e8:	dbfb      	blt.n	3e2 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3ea:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ec:	8872      	ldrh	r2, [r6, #2]
     3ee:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3f0:	2224      	movs	r2, #36	; 0x24
     3f2:	5cb2      	ldrb	r2, [r6, r2]
     3f4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3f6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3f8:	7d32      	ldrb	r2, [r6, #20]
     3fa:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3fc:	4313      	orrs	r3, r2
     3fe:	7cb2      	ldrb	r2, [r6, #18]
     400:	0052      	lsls	r2, r2, #1
     402:	4313      	orrs	r3, r2
     404:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     406:	4642      	mov	r2, r8
     408:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     40a:	7e33      	ldrb	r3, [r6, #24]
     40c:	2b00      	cmp	r3, #0
     40e:	d020      	beq.n	452 <adc_init+0x262>
		switch (resolution) {
     410:	2c10      	cmp	r4, #16
     412:	d100      	bne.n	416 <adc_init+0x226>
     414:	e0d9      	b.n	5ca <adc_init+0x3da>
     416:	d800      	bhi.n	41a <adc_init+0x22a>
     418:	e098      	b.n	54c <adc_init+0x35c>
     41a:	2c20      	cmp	r4, #32
     41c:	d100      	bne.n	420 <adc_init+0x230>
     41e:	e0b6      	b.n	58e <adc_init+0x39e>
     420:	2c30      	cmp	r4, #48	; 0x30
     422:	d116      	bne.n	452 <adc_init+0x262>
			if (config->differential_mode &&
     424:	7cf2      	ldrb	r2, [r6, #19]
     426:	2a00      	cmp	r2, #0
     428:	d00a      	beq.n	440 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     42a:	69f2      	ldr	r2, [r6, #28]
     42c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     42e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     430:	2aff      	cmp	r2, #255	; 0xff
     432:	d900      	bls.n	436 <adc_init+0x246>
     434:	e6ef      	b.n	216 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     436:	6a32      	ldr	r2, [r6, #32]
     438:	3280      	adds	r2, #128	; 0x80
     43a:	2aff      	cmp	r2, #255	; 0xff
     43c:	d900      	bls.n	440 <adc_init+0x250>
     43e:	e6ea      	b.n	216 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     440:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     442:	69f2      	ldr	r2, [r6, #28]
     444:	2aff      	cmp	r2, #255	; 0xff
     446:	dd00      	ble.n	44a <adc_init+0x25a>
     448:	e6e5      	b.n	216 <adc_init+0x26>
     44a:	6a32      	ldr	r2, [r6, #32]
     44c:	2aff      	cmp	r2, #255	; 0xff
     44e:	dd00      	ble.n	452 <adc_init+0x262>
     450:	e6e1      	b.n	216 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     452:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     454:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     456:	b252      	sxtb	r2, r2
     458:	2a00      	cmp	r2, #0
     45a:	dbfb      	blt.n	454 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     45c:	4642      	mov	r2, r8
     45e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     460:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     462:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     464:	b25b      	sxtb	r3, r3
     466:	2b00      	cmp	r3, #0
     468:	dbfb      	blt.n	462 <adc_init+0x272>
	adc_module->WINLT.reg =
     46a:	8bb3      	ldrh	r3, [r6, #28]
     46c:	4642      	mov	r2, r8
     46e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     470:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     472:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     474:	b25b      	sxtb	r3, r3
     476:	2b00      	cmp	r3, #0
     478:	dbfb      	blt.n	472 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     47a:	8c33      	ldrh	r3, [r6, #32]
     47c:	4642      	mov	r2, r8
     47e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     480:	232c      	movs	r3, #44	; 0x2c
     482:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     484:	2b00      	cmp	r3, #0
     486:	d005      	beq.n	494 <adc_init+0x2a4>
		inputs_to_scan--;
     488:	3b01      	subs	r3, #1
     48a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     48c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     48e:	2b0f      	cmp	r3, #15
     490:	d900      	bls.n	494 <adc_init+0x2a4>
     492:	e6c0      	b.n	216 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     494:	222b      	movs	r2, #43	; 0x2b
     496:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     498:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     49a:	290f      	cmp	r1, #15
     49c:	d900      	bls.n	4a0 <adc_init+0x2b0>
     49e:	e6ba      	b.n	216 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4a0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4a2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     4a4:	b252      	sxtb	r2, r2
     4a6:	2a00      	cmp	r2, #0
     4a8:	dbfb      	blt.n	4a2 <adc_init+0x2b2>
			config->negative_input |
     4aa:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     4ac:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4ae:	4302      	orrs	r2, r0
     4b0:	68b0      	ldr	r0, [r6, #8]
     4b2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4b4:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4b6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4b8:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4ba:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4bc:	4642      	mov	r2, r8
     4be:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4c0:	232a      	movs	r3, #42	; 0x2a
     4c2:	5cf3      	ldrb	r3, [r6, r3]
     4c4:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4c6:	230f      	movs	r3, #15
     4c8:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4ca:	3315      	adds	r3, #21
     4cc:	5cf3      	ldrb	r3, [r6, r3]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d012      	beq.n	4f8 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4d2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4d4:	4a1a      	ldr	r2, [pc, #104]	; (540 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     4d6:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4d8:	4293      	cmp	r3, r2
     4da:	d900      	bls.n	4de <adc_init+0x2ee>
     4dc:	e69b      	b.n	216 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4de:	4642      	mov	r2, r8
     4e0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4e2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4e4:	2380      	movs	r3, #128	; 0x80
     4e6:	011b      	lsls	r3, r3, #4
     4e8:	18d3      	adds	r3, r2, r3
     4ea:	4915      	ldr	r1, [pc, #84]	; (540 <adc_init+0x350>)
     4ec:	b29b      	uxth	r3, r3
     4ee:	428b      	cmp	r3, r1
     4f0:	d900      	bls.n	4f4 <adc_init+0x304>
     4f2:	e690      	b.n	216 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4f4:	4643      	mov	r3, r8
     4f6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4f8:	4b12      	ldr	r3, [pc, #72]	; (544 <adc_init+0x354>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	015b      	lsls	r3, r3, #5
     4fe:	22e0      	movs	r2, #224	; 0xe0
     500:	00d2      	lsls	r2, r2, #3
     502:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     504:	4a10      	ldr	r2, [pc, #64]	; (548 <adc_init+0x358>)
     506:	6851      	ldr	r1, [r2, #4]
     508:	0149      	lsls	r1, r1, #5
     50a:	6812      	ldr	r2, [r2, #0]
     50c:	0ed2      	lsrs	r2, r2, #27
     50e:	430a      	orrs	r2, r1
     510:	b2d2      	uxtb	r2, r2
			) |
     512:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     514:	4642      	mov	r2, r8
     516:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     518:	2000      	movs	r0, #0
     51a:	e67c      	b.n	216 <adc_init+0x26>
     51c:	40000400 	.word	0x40000400
     520:	40000800 	.word	0x40000800
     524:	200002c0 	.word	0x200002c0
     528:	000029b1 	.word	0x000029b1
     52c:	00002925 	.word	0x00002925
     530:	00004be1 	.word	0x00004be1
     534:	00006b40 	.word	0x00006b40
     538:	00002aa9 	.word	0x00002aa9
     53c:	00006a6c 	.word	0x00006a6c
     540:	00000fff 	.word	0x00000fff
     544:	00806024 	.word	0x00806024
     548:	00806020 	.word	0x00806020
		switch (resolution) {
     54c:	2c00      	cmp	r4, #0
     54e:	d000      	beq.n	552 <adc_init+0x362>
     550:	e77f      	b.n	452 <adc_init+0x262>
			if (config->differential_mode &&
     552:	7cf2      	ldrb	r2, [r6, #19]
     554:	2a00      	cmp	r2, #0
     556:	d00f      	beq.n	578 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     558:	69f2      	ldr	r2, [r6, #28]
     55a:	2180      	movs	r1, #128	; 0x80
     55c:	0109      	lsls	r1, r1, #4
     55e:	468c      	mov	ip, r1
     560:	4462      	add	r2, ip
			if (config->differential_mode &&
     562:	492a      	ldr	r1, [pc, #168]	; (60c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     564:	2017      	movs	r0, #23
			if (config->differential_mode &&
     566:	428a      	cmp	r2, r1
     568:	d900      	bls.n	56c <adc_init+0x37c>
     56a:	e654      	b.n	216 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     56c:	6a32      	ldr	r2, [r6, #32]
     56e:	4462      	add	r2, ip
     570:	4926      	ldr	r1, [pc, #152]	; (60c <adc_init+0x41c>)
     572:	428a      	cmp	r2, r1
     574:	d900      	bls.n	578 <adc_init+0x388>
     576:	e64e      	b.n	216 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     578:	4a24      	ldr	r2, [pc, #144]	; (60c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     57a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     57c:	69f1      	ldr	r1, [r6, #28]
     57e:	4291      	cmp	r1, r2
     580:	dd00      	ble.n	584 <adc_init+0x394>
     582:	e648      	b.n	216 <adc_init+0x26>
     584:	6a31      	ldr	r1, [r6, #32]
     586:	4291      	cmp	r1, r2
     588:	dd00      	ble.n	58c <adc_init+0x39c>
     58a:	e644      	b.n	216 <adc_init+0x26>
     58c:	e761      	b.n	452 <adc_init+0x262>
			if (config->differential_mode &&
     58e:	7cf2      	ldrb	r2, [r6, #19]
     590:	2a00      	cmp	r2, #0
     592:	d00f      	beq.n	5b4 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     594:	69f2      	ldr	r2, [r6, #28]
     596:	2180      	movs	r1, #128	; 0x80
     598:	0089      	lsls	r1, r1, #2
     59a:	468c      	mov	ip, r1
     59c:	4462      	add	r2, ip
			if (config->differential_mode &&
     59e:	491c      	ldr	r1, [pc, #112]	; (610 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     5a0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5a2:	428a      	cmp	r2, r1
     5a4:	d900      	bls.n	5a8 <adc_init+0x3b8>
     5a6:	e636      	b.n	216 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     5a8:	6a32      	ldr	r2, [r6, #32]
     5aa:	4462      	add	r2, ip
     5ac:	4918      	ldr	r1, [pc, #96]	; (610 <adc_init+0x420>)
     5ae:	428a      	cmp	r2, r1
     5b0:	d900      	bls.n	5b4 <adc_init+0x3c4>
     5b2:	e630      	b.n	216 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     5b4:	4a16      	ldr	r2, [pc, #88]	; (610 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     5b6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5b8:	69f1      	ldr	r1, [r6, #28]
     5ba:	4291      	cmp	r1, r2
     5bc:	dd00      	ble.n	5c0 <adc_init+0x3d0>
     5be:	e62a      	b.n	216 <adc_init+0x26>
     5c0:	6a31      	ldr	r1, [r6, #32]
     5c2:	4291      	cmp	r1, r2
     5c4:	dd00      	ble.n	5c8 <adc_init+0x3d8>
     5c6:	e626      	b.n	216 <adc_init+0x26>
     5c8:	e743      	b.n	452 <adc_init+0x262>
			if (config->differential_mode &&
     5ca:	7cf2      	ldrb	r2, [r6, #19]
     5cc:	2a00      	cmp	r2, #0
     5ce:	d00f      	beq.n	5f0 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     5d0:	69f2      	ldr	r2, [r6, #28]
     5d2:	2180      	movs	r1, #128	; 0x80
     5d4:	0209      	lsls	r1, r1, #8
     5d6:	468c      	mov	ip, r1
     5d8:	4462      	add	r2, ip
			if (config->differential_mode &&
     5da:	490e      	ldr	r1, [pc, #56]	; (614 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     5dc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5de:	428a      	cmp	r2, r1
     5e0:	d900      	bls.n	5e4 <adc_init+0x3f4>
     5e2:	e618      	b.n	216 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5e4:	6a32      	ldr	r2, [r6, #32]
     5e6:	4462      	add	r2, ip
     5e8:	490a      	ldr	r1, [pc, #40]	; (614 <adc_init+0x424>)
     5ea:	428a      	cmp	r2, r1
     5ec:	d900      	bls.n	5f0 <adc_init+0x400>
     5ee:	e612      	b.n	216 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5f0:	4a08      	ldr	r2, [pc, #32]	; (614 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     5f2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5f4:	69f1      	ldr	r1, [r6, #28]
     5f6:	4291      	cmp	r1, r2
     5f8:	dd00      	ble.n	5fc <adc_init+0x40c>
     5fa:	e60c      	b.n	216 <adc_init+0x26>
     5fc:	6a31      	ldr	r1, [r6, #32]
     5fe:	4291      	cmp	r1, r2
     600:	dd00      	ble.n	604 <adc_init+0x414>
     602:	e608      	b.n	216 <adc_init+0x26>
     604:	e725      	b.n	452 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     606:	2017      	movs	r0, #23
     608:	e605      	b.n	216 <adc_init+0x26>
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	00000fff 	.word	0x00000fff
     610:	000003ff 	.word	0x000003ff
     614:	0000ffff 	.word	0x0000ffff

00000618 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     618:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     61a:	4b2e      	ldr	r3, [pc, #184]	; (6d4 <ADC_Handler+0xbc>)
     61c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     61e:	6823      	ldr	r3, [r4, #0]
     620:	7e1d      	ldrb	r5, [r3, #24]
     622:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     624:	07ea      	lsls	r2, r5, #31
     626:	d505      	bpl.n	634 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     628:	7ee2      	ldrb	r2, [r4, #27]
     62a:	07d2      	lsls	r2, r2, #31
     62c:	d502      	bpl.n	634 <ADC_Handler+0x1c>
     62e:	7ea2      	ldrb	r2, [r4, #26]
     630:	07d2      	lsls	r2, r2, #31
     632:	d416      	bmi.n	662 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     634:	076b      	lsls	r3, r5, #29
     636:	d508      	bpl.n	64a <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     638:	2304      	movs	r3, #4
     63a:	6822      	ldr	r2, [r4, #0]
     63c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     63e:	7ee3      	ldrb	r3, [r4, #27]
     640:	079b      	lsls	r3, r3, #30
     642:	d502      	bpl.n	64a <ADC_Handler+0x32>
     644:	7ea3      	ldrb	r3, [r4, #26]
     646:	079b      	lsls	r3, r3, #30
     648:	d43c      	bmi.n	6c4 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     64a:	07ab      	lsls	r3, r5, #30
     64c:	d508      	bpl.n	660 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     64e:	2302      	movs	r3, #2
     650:	6822      	ldr	r2, [r4, #0]
     652:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     654:	7ee3      	ldrb	r3, [r4, #27]
     656:	075b      	lsls	r3, r3, #29
     658:	d502      	bpl.n	660 <ADC_Handler+0x48>
     65a:	7ea3      	ldrb	r3, [r4, #26]
     65c:	075b      	lsls	r3, r3, #29
     65e:	d435      	bmi.n	6cc <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     660:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     662:	2201      	movs	r2, #1
     664:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     666:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     668:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     66a:	b25b      	sxtb	r3, r3
     66c:	2b00      	cmp	r3, #0
     66e:	dbfb      	blt.n	668 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     670:	6961      	ldr	r1, [r4, #20]
     672:	1c8b      	adds	r3, r1, #2
     674:	6163      	str	r3, [r4, #20]
     676:	8b53      	ldrh	r3, [r2, #26]
     678:	b29b      	uxth	r3, r3
     67a:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     67c:	8b23      	ldrh	r3, [r4, #24]
     67e:	3b01      	subs	r3, #1
     680:	b29b      	uxth	r3, r3
     682:	8323      	strh	r3, [r4, #24]
     684:	2b00      	cmp	r3, #0
     686:	d011      	beq.n	6ac <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     688:	7f63      	ldrb	r3, [r4, #29]
     68a:	2b00      	cmp	r3, #0
     68c:	d0d2      	beq.n	634 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     68e:	6822      	ldr	r2, [r4, #0]
     690:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     692:	b25b      	sxtb	r3, r3
     694:	2b00      	cmp	r3, #0
     696:	dbfb      	blt.n	690 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     698:	7b13      	ldrb	r3, [r2, #12]
     69a:	2102      	movs	r1, #2
     69c:	430b      	orrs	r3, r1
     69e:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     6a0:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6a2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6a4:	b25b      	sxtb	r3, r3
     6a6:	2b00      	cmp	r3, #0
     6a8:	dbfb      	blt.n	6a2 <ADC_Handler+0x8a>
     6aa:	e7c3      	b.n	634 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     6ac:	7f23      	ldrb	r3, [r4, #28]
     6ae:	2b05      	cmp	r3, #5
     6b0:	d1c0      	bne.n	634 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     6b2:	2300      	movs	r3, #0
     6b4:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6b6:	3301      	adds	r3, #1
     6b8:	6822      	ldr	r2, [r4, #0]
     6ba:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     6bc:	0020      	movs	r0, r4
     6be:	68a3      	ldr	r3, [r4, #8]
     6c0:	4798      	blx	r3
     6c2:	e7b7      	b.n	634 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     6c4:	0020      	movs	r0, r4
     6c6:	68e3      	ldr	r3, [r4, #12]
     6c8:	4798      	blx	r3
     6ca:	e7be      	b.n	64a <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     6cc:	6923      	ldr	r3, [r4, #16]
     6ce:	0020      	movs	r0, r4
     6d0:	4798      	blx	r3
}
     6d2:	e7c5      	b.n	660 <ADC_Handler+0x48>
     6d4:	200002c0 	.word	0x200002c0

000006d8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     6d8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     6da:	2207      	movs	r2, #7
     6dc:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     6de:	421a      	tst	r2, r3
     6e0:	d1fc      	bne.n	6dc <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     6e2:	4770      	bx	lr

000006e4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e6:	46d6      	mov	lr, sl
     6e8:	464f      	mov	r7, r9
     6ea:	4646      	mov	r6, r8
     6ec:	b5c0      	push	{r6, r7, lr}
     6ee:	b08a      	sub	sp, #40	; 0x28
     6f0:	0006      	movs	r6, r0
     6f2:	000f      	movs	r7, r1
     6f4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     6f6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f8:	0008      	movs	r0, r1
     6fa:	4ba0      	ldr	r3, [pc, #640]	; (97c <i2c_master_init+0x298>)
     6fc:	4798      	blx	r3
     6fe:	4aa0      	ldr	r2, [pc, #640]	; (980 <i2c_master_init+0x29c>)
     700:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     702:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     704:	2301      	movs	r3, #1
     706:	40ab      	lsls	r3, r5
     708:	430b      	orrs	r3, r1
     70a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     70c:	a909      	add	r1, sp, #36	; 0x24
     70e:	7b23      	ldrb	r3, [r4, #12]
     710:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     712:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     714:	b2c5      	uxtb	r5, r0
     716:	0028      	movs	r0, r5
     718:	4b9a      	ldr	r3, [pc, #616]	; (984 <i2c_master_init+0x2a0>)
     71a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     71c:	0028      	movs	r0, r5
     71e:	4b9a      	ldr	r3, [pc, #616]	; (988 <i2c_master_init+0x2a4>)
     720:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     722:	7b20      	ldrb	r0, [r4, #12]
     724:	2100      	movs	r1, #0
     726:	4b99      	ldr	r3, [pc, #612]	; (98c <i2c_master_init+0x2a8>)
     728:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     72a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     72c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     72e:	079b      	lsls	r3, r3, #30
     730:	d505      	bpl.n	73e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     732:	b00a      	add	sp, #40	; 0x28
     734:	bc1c      	pop	{r2, r3, r4}
     736:	4690      	mov	r8, r2
     738:	4699      	mov	r9, r3
     73a:	46a2      	mov	sl, r4
     73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     73e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     740:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     742:	07db      	lsls	r3, r3, #31
     744:	d4f5      	bmi.n	732 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     746:	6830      	ldr	r0, [r6, #0]
     748:	4b8c      	ldr	r3, [pc, #560]	; (97c <i2c_master_init+0x298>)
     74a:	4699      	mov	r9, r3
     74c:	4798      	blx	r3
     74e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     750:	498f      	ldr	r1, [pc, #572]	; (990 <i2c_master_init+0x2ac>)
     752:	4b90      	ldr	r3, [pc, #576]	; (994 <i2c_master_init+0x2b0>)
     754:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     756:	00ad      	lsls	r5, r5, #2
     758:	4b8f      	ldr	r3, [pc, #572]	; (998 <i2c_master_init+0x2b4>)
     75a:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     75c:	2300      	movs	r3, #0
     75e:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     760:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     762:	2500      	movs	r5, #0
     764:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     766:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     768:	2225      	movs	r2, #37	; 0x25
     76a:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     76c:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     76e:	3314      	adds	r3, #20
     770:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     772:	6833      	ldr	r3, [r6, #0]
     774:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     776:	0018      	movs	r0, r3
     778:	47c8      	blx	r9
     77a:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     77c:	2380      	movs	r3, #128	; 0x80
     77e:	aa08      	add	r2, sp, #32
     780:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     782:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     784:	2301      	movs	r3, #1
     786:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     788:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     78a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     78c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     78e:	2800      	cmp	r0, #0
     790:	d100      	bne.n	794 <i2c_master_init+0xb0>
     792:	e0af      	b.n	8f4 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     794:	ab08      	add	r3, sp, #32
     796:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     798:	2302      	movs	r3, #2
     79a:	aa08      	add	r2, sp, #32
     79c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     79e:	0c00      	lsrs	r0, r0, #16
     7a0:	b2c0      	uxtb	r0, r0
     7a2:	0011      	movs	r1, r2
     7a4:	4b7d      	ldr	r3, [pc, #500]	; (99c <i2c_master_init+0x2b8>)
     7a6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     7a8:	2f00      	cmp	r7, #0
     7aa:	d100      	bne.n	7ae <i2c_master_init+0xca>
     7ac:	e0a7      	b.n	8fe <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     7ae:	ab08      	add	r3, sp, #32
     7b0:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     7b2:	2302      	movs	r3, #2
     7b4:	aa08      	add	r2, sp, #32
     7b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     7b8:	0c3f      	lsrs	r7, r7, #16
     7ba:	b2f8      	uxtb	r0, r7
     7bc:	0011      	movs	r1, r2
     7be:	4b77      	ldr	r3, [pc, #476]	; (99c <i2c_master_init+0x2b8>)
     7c0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     7c2:	8aa3      	ldrh	r3, [r4, #20]
     7c4:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     7c6:	8ae3      	ldrh	r3, [r4, #22]
     7c8:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     7ca:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     7cc:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     7ce:	2b00      	cmp	r3, #0
     7d0:	d104      	bne.n	7dc <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7d2:	4b73      	ldr	r3, [pc, #460]	; (9a0 <i2c_master_init+0x2bc>)
     7d4:	789b      	ldrb	r3, [r3, #2]
     7d6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     7d8:	0fdb      	lsrs	r3, r3, #31
     7da:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     7dc:	68a1      	ldr	r1, [r4, #8]
     7de:	6923      	ldr	r3, [r4, #16]
     7e0:	430b      	orrs	r3, r1
     7e2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     7e4:	2224      	movs	r2, #36	; 0x24
     7e6:	5ca2      	ldrb	r2, [r4, r2]
     7e8:	2a00      	cmp	r2, #0
     7ea:	d002      	beq.n	7f2 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     7ec:	2280      	movs	r2, #128	; 0x80
     7ee:	05d2      	lsls	r2, r2, #23
     7f0:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     7f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     7f4:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     7f6:	222c      	movs	r2, #44	; 0x2c
     7f8:	5ca2      	ldrb	r2, [r4, r2]
     7fa:	2a00      	cmp	r2, #0
     7fc:	d103      	bne.n	806 <i2c_master_init+0x122>
     7fe:	2280      	movs	r2, #128	; 0x80
     800:	0492      	lsls	r2, r2, #18
     802:	4291      	cmp	r1, r2
     804:	d102      	bne.n	80c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     806:	2280      	movs	r2, #128	; 0x80
     808:	0512      	lsls	r2, r2, #20
     80a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     80c:	222d      	movs	r2, #45	; 0x2d
     80e:	5ca2      	ldrb	r2, [r4, r2]
     810:	2a00      	cmp	r2, #0
     812:	d002      	beq.n	81a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     814:	2280      	movs	r2, #128	; 0x80
     816:	0412      	lsls	r2, r2, #16
     818:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     81a:	222e      	movs	r2, #46	; 0x2e
     81c:	5ca2      	ldrb	r2, [r4, r2]
     81e:	2a00      	cmp	r2, #0
     820:	d002      	beq.n	828 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     822:	2280      	movs	r2, #128	; 0x80
     824:	03d2      	lsls	r2, r2, #15
     826:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     828:	4642      	mov	r2, r8
     82a:	6812      	ldr	r2, [r2, #0]
     82c:	4313      	orrs	r3, r2
     82e:	4642      	mov	r2, r8
     830:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     832:	2380      	movs	r3, #128	; 0x80
     834:	005b      	lsls	r3, r3, #1
     836:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     838:	4648      	mov	r0, r9
     83a:	3014      	adds	r0, #20
     83c:	b2c0      	uxtb	r0, r0
     83e:	4b59      	ldr	r3, [pc, #356]	; (9a4 <i2c_master_init+0x2c0>)
     840:	4798      	blx	r3
     842:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     844:	23fa      	movs	r3, #250	; 0xfa
     846:	009b      	lsls	r3, r3, #2
     848:	6822      	ldr	r2, [r4, #0]
     84a:	435a      	muls	r2, r3
     84c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     84e:	6863      	ldr	r3, [r4, #4]
     850:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     852:	4d55      	ldr	r5, [pc, #340]	; (9a8 <i2c_master_init+0x2c4>)
     854:	47a8      	blx	r5
     856:	9000      	str	r0, [sp, #0]
     858:	9101      	str	r1, [sp, #4]
     85a:	464b      	mov	r3, r9
     85c:	0058      	lsls	r0, r3, #1
     85e:	47a8      	blx	r5
     860:	9002      	str	r0, [sp, #8]
     862:	9103      	str	r1, [sp, #12]
     864:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     866:	47a8      	blx	r5
     868:	9004      	str	r0, [sp, #16]
     86a:	9105      	str	r1, [sp, #20]
     86c:	4f4f      	ldr	r7, [pc, #316]	; (9ac <i2c_master_init+0x2c8>)
     86e:	4a50      	ldr	r2, [pc, #320]	; (9b0 <i2c_master_init+0x2cc>)
     870:	4b50      	ldr	r3, [pc, #320]	; (9b4 <i2c_master_init+0x2d0>)
     872:	9800      	ldr	r0, [sp, #0]
     874:	9901      	ldr	r1, [sp, #4]
     876:	47b8      	blx	r7
     878:	0002      	movs	r2, r0
     87a:	000b      	movs	r3, r1
     87c:	9804      	ldr	r0, [sp, #16]
     87e:	9905      	ldr	r1, [sp, #20]
     880:	47b8      	blx	r7
     882:	4e4d      	ldr	r6, [pc, #308]	; (9b8 <i2c_master_init+0x2d4>)
     884:	2200      	movs	r2, #0
     886:	4b4d      	ldr	r3, [pc, #308]	; (9bc <i2c_master_init+0x2d8>)
     888:	47b0      	blx	r6
     88a:	9004      	str	r0, [sp, #16]
     88c:	9105      	str	r1, [sp, #20]
     88e:	4648      	mov	r0, r9
     890:	47a8      	blx	r5
     892:	0002      	movs	r2, r0
     894:	000b      	movs	r3, r1
     896:	9804      	ldr	r0, [sp, #16]
     898:	9905      	ldr	r1, [sp, #20]
     89a:	47b8      	blx	r7
     89c:	0002      	movs	r2, r0
     89e:	000b      	movs	r3, r1
     8a0:	4d47      	ldr	r5, [pc, #284]	; (9c0 <i2c_master_init+0x2dc>)
     8a2:	9800      	ldr	r0, [sp, #0]
     8a4:	9901      	ldr	r1, [sp, #4]
     8a6:	47a8      	blx	r5
     8a8:	9a02      	ldr	r2, [sp, #8]
     8aa:	9b03      	ldr	r3, [sp, #12]
     8ac:	47b0      	blx	r6
     8ae:	2200      	movs	r2, #0
     8b0:	4b44      	ldr	r3, [pc, #272]	; (9c4 <i2c_master_init+0x2e0>)
     8b2:	47a8      	blx	r5
     8b4:	9a02      	ldr	r2, [sp, #8]
     8b6:	9b03      	ldr	r3, [sp, #12]
     8b8:	4d43      	ldr	r5, [pc, #268]	; (9c8 <i2c_master_init+0x2e4>)
     8ba:	47a8      	blx	r5
     8bc:	4b43      	ldr	r3, [pc, #268]	; (9cc <i2c_master_init+0x2e8>)
     8be:	4798      	blx	r3
     8c0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     8c2:	2380      	movs	r3, #128	; 0x80
     8c4:	049b      	lsls	r3, r3, #18
     8c6:	68a2      	ldr	r2, [r4, #8]
     8c8:	429a      	cmp	r2, r3
     8ca:	d01e      	beq.n	90a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8cc:	0003      	movs	r3, r0
     8ce:	2040      	movs	r0, #64	; 0x40
     8d0:	2dff      	cmp	r5, #255	; 0xff
     8d2:	d900      	bls.n	8d6 <i2c_master_init+0x1f2>
     8d4:	e72d      	b.n	732 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     8d6:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     8d8:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8da:	25ff      	movs	r5, #255	; 0xff
     8dc:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     8de:	0624      	lsls	r4, r4, #24
     8e0:	4325      	orrs	r5, r4
     8e2:	0400      	lsls	r0, r0, #16
     8e4:	23ff      	movs	r3, #255	; 0xff
     8e6:	041b      	lsls	r3, r3, #16
     8e8:	4018      	ands	r0, r3
     8ea:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     8ec:	4643      	mov	r3, r8
     8ee:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     8f0:	2000      	movs	r0, #0
     8f2:	e71e      	b.n	732 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     8f4:	2100      	movs	r1, #0
     8f6:	4640      	mov	r0, r8
     8f8:	4b35      	ldr	r3, [pc, #212]	; (9d0 <i2c_master_init+0x2ec>)
     8fa:	4798      	blx	r3
     8fc:	e74a      	b.n	794 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     8fe:	2101      	movs	r1, #1
     900:	4640      	mov	r0, r8
     902:	4b33      	ldr	r3, [pc, #204]	; (9d0 <i2c_master_init+0x2ec>)
     904:	4798      	blx	r3
     906:	0007      	movs	r7, r0
     908:	e751      	b.n	7ae <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     90a:	26fa      	movs	r6, #250	; 0xfa
     90c:	00b6      	lsls	r6, r6, #2
     90e:	4653      	mov	r3, sl
     910:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     912:	9800      	ldr	r0, [sp, #0]
     914:	9901      	ldr	r1, [sp, #4]
     916:	0002      	movs	r2, r0
     918:	000b      	movs	r3, r1
     91a:	4c27      	ldr	r4, [pc, #156]	; (9b8 <i2c_master_init+0x2d4>)
     91c:	47a0      	blx	r4
     91e:	9000      	str	r0, [sp, #0]
     920:	9101      	str	r1, [sp, #4]
     922:	0030      	movs	r0, r6
     924:	4b20      	ldr	r3, [pc, #128]	; (9a8 <i2c_master_init+0x2c4>)
     926:	4798      	blx	r3
     928:	2200      	movs	r2, #0
     92a:	4b2a      	ldr	r3, [pc, #168]	; (9d4 <i2c_master_init+0x2f0>)
     92c:	47b8      	blx	r7
     92e:	0002      	movs	r2, r0
     930:	000b      	movs	r3, r1
     932:	9800      	ldr	r0, [sp, #0]
     934:	9901      	ldr	r1, [sp, #4]
     936:	4c24      	ldr	r4, [pc, #144]	; (9c8 <i2c_master_init+0x2e4>)
     938:	47a0      	blx	r4
     93a:	2200      	movs	r2, #0
     93c:	4b21      	ldr	r3, [pc, #132]	; (9c4 <i2c_master_init+0x2e0>)
     93e:	4c20      	ldr	r4, [pc, #128]	; (9c0 <i2c_master_init+0x2dc>)
     940:	47a0      	blx	r4
     942:	4b22      	ldr	r3, [pc, #136]	; (9cc <i2c_master_init+0x2e8>)
     944:	4798      	blx	r3
     946:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     948:	d00c      	beq.n	964 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     94a:	0031      	movs	r1, r6
     94c:	9807      	ldr	r0, [sp, #28]
     94e:	4b22      	ldr	r3, [pc, #136]	; (9d8 <i2c_master_init+0x2f4>)
     950:	4798      	blx	r3
     952:	3802      	subs	r0, #2
     954:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     956:	002b      	movs	r3, r5
     958:	2dff      	cmp	r5, #255	; 0xff
     95a:	d80c      	bhi.n	976 <i2c_master_init+0x292>
     95c:	28ff      	cmp	r0, #255	; 0xff
     95e:	d9bc      	bls.n	8da <i2c_master_init+0x1f6>
     960:	2040      	movs	r0, #64	; 0x40
     962:	e6e6      	b.n	732 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     964:	0071      	lsls	r1, r6, #1
     966:	1e48      	subs	r0, r1, #1
     968:	9b07      	ldr	r3, [sp, #28]
     96a:	469c      	mov	ip, r3
     96c:	4460      	add	r0, ip
     96e:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <i2c_master_init+0x2f4>)
     970:	4798      	blx	r3
     972:	3801      	subs	r0, #1
     974:	e7ef      	b.n	956 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     976:	2040      	movs	r0, #64	; 0x40
     978:	e6db      	b.n	732 <i2c_master_init+0x4e>
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	00001cf1 	.word	0x00001cf1
     980:	40000400 	.word	0x40000400
     984:	000029b1 	.word	0x000029b1
     988:	00002925 	.word	0x00002925
     98c:	00001b2d 	.word	0x00001b2d
     990:	00000c59 	.word	0x00000c59
     994:	00001d2d 	.word	0x00001d2d
     998:	200003cc 	.word	0x200003cc
     99c:	00002aa9 	.word	0x00002aa9
     9a0:	41002000 	.word	0x41002000
     9a4:	000029cd 	.word	0x000029cd
     9a8:	00004ae1 	.word	0x00004ae1
     9ac:	00003f4d 	.word	0x00003f4d
     9b0:	e826d695 	.word	0xe826d695
     9b4:	3e112e0b 	.word	0x3e112e0b
     9b8:	000032c5 	.word	0x000032c5
     9bc:	40240000 	.word	0x40240000
     9c0:	0000444d 	.word	0x0000444d
     9c4:	3ff00000 	.word	0x3ff00000
     9c8:	000038e5 	.word	0x000038e5
     9cc:	00004a79 	.word	0x00004a79
     9d0:	00001b79 	.word	0x00001b79
     9d4:	40080000 	.word	0x40080000
     9d8:	00002f85 	.word	0x00002f85

000009dc <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9dc:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     9de:	7e1a      	ldrb	r2, [r3, #24]
     9e0:	0792      	lsls	r2, r2, #30
     9e2:	d507      	bpl.n	9f4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     9e4:	2202      	movs	r2, #2
     9e6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     9e8:	8b5b      	ldrh	r3, [r3, #26]
     9ea:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     9ec:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     9ee:	17db      	asrs	r3, r3, #31
     9f0:	4018      	ands	r0, r3
}
     9f2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     9f4:	8b5a      	ldrh	r2, [r3, #26]
     9f6:	0752      	lsls	r2, r2, #29
     9f8:	d506      	bpl.n	a08 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9fa:	6859      	ldr	r1, [r3, #4]
     9fc:	22c0      	movs	r2, #192	; 0xc0
     9fe:	0292      	lsls	r2, r2, #10
     a00:	430a      	orrs	r2, r1
     a02:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     a04:	2018      	movs	r0, #24
     a06:	e7f4      	b.n	9f2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     a08:	2000      	movs	r0, #0
     a0a:	e7f2      	b.n	9f2 <_i2c_master_address_response+0x16>

00000a0c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     a0c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a0e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     a10:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a12:	2401      	movs	r4, #1
     a14:	2502      	movs	r5, #2
     a16:	7e11      	ldrb	r1, [r2, #24]
     a18:	4221      	tst	r1, r4
     a1a:	d10b      	bne.n	a34 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     a1c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     a1e:	4229      	tst	r1, r5
     a20:	d106      	bne.n	a30 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     a22:	3301      	adds	r3, #1
     a24:	b29b      	uxth	r3, r3
     a26:	8901      	ldrh	r1, [r0, #8]
     a28:	4299      	cmp	r1, r3
     a2a:	d8f4      	bhi.n	a16 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     a2c:	2012      	movs	r0, #18
     a2e:	e002      	b.n	a36 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     a30:	2000      	movs	r0, #0
     a32:	e000      	b.n	a36 <_i2c_master_wait_for_bus+0x2a>
     a34:	2000      	movs	r0, #0
}
     a36:	bd30      	pop	{r4, r5, pc}

00000a38 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     a38:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a3a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a3c:	6862      	ldr	r2, [r4, #4]
     a3e:	2380      	movs	r3, #128	; 0x80
     a40:	02db      	lsls	r3, r3, #11
     a42:	4313      	orrs	r3, r2
     a44:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     a46:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a48:	4b02      	ldr	r3, [pc, #8]	; (a54 <_i2c_master_send_hs_master_code+0x1c>)
     a4a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     a4c:	2301      	movs	r3, #1
     a4e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     a50:	bd10      	pop	{r4, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	00000a0d 	.word	0x00000a0d

00000a58 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	46de      	mov	lr, fp
     a5c:	4657      	mov	r7, sl
     a5e:	464e      	mov	r6, r9
     a60:	4645      	mov	r5, r8
     a62:	b5e0      	push	{r5, r6, r7, lr}
     a64:	b083      	sub	sp, #12
     a66:	0006      	movs	r6, r0
     a68:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a6a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     a6c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     a6e:	4b32      	ldr	r3, [pc, #200]	; (b38 <_i2c_master_write_packet+0xe0>)
     a70:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     a72:	7a7b      	ldrb	r3, [r7, #9]
     a74:	2b00      	cmp	r3, #0
     a76:	d11d      	bne.n	ab4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a78:	686b      	ldr	r3, [r5, #4]
     a7a:	4a30      	ldr	r2, [pc, #192]	; (b3c <_i2c_master_write_packet+0xe4>)
     a7c:	4013      	ands	r3, r2
     a7e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     a80:	7a3b      	ldrb	r3, [r7, #8]
     a82:	2b00      	cmp	r3, #0
     a84:	d01b      	beq.n	abe <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     a86:	883b      	ldrh	r3, [r7, #0]
     a88:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a8a:	7a7a      	ldrb	r2, [r7, #9]
     a8c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     a8e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a90:	2280      	movs	r2, #128	; 0x80
     a92:	0212      	lsls	r2, r2, #8
     a94:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     a96:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a98:	0030      	movs	r0, r6
     a9a:	4b29      	ldr	r3, [pc, #164]	; (b40 <_i2c_master_write_packet+0xe8>)
     a9c:	4798      	blx	r3
     a9e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     aa0:	2800      	cmp	r0, #0
     aa2:	d013      	beq.n	acc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     aa4:	9801      	ldr	r0, [sp, #4]
     aa6:	b003      	add	sp, #12
     aa8:	bc3c      	pop	{r2, r3, r4, r5}
     aaa:	4690      	mov	r8, r2
     aac:	4699      	mov	r9, r3
     aae:	46a2      	mov	sl, r4
     ab0:	46ab      	mov	fp, r5
     ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     ab4:	7ab9      	ldrb	r1, [r7, #10]
     ab6:	0030      	movs	r0, r6
     ab8:	4b22      	ldr	r3, [pc, #136]	; (b44 <_i2c_master_write_packet+0xec>)
     aba:	4798      	blx	r3
     abc:	e7dc      	b.n	a78 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     abe:	883b      	ldrh	r3, [r7, #0]
     ac0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ac2:	7a7a      	ldrb	r2, [r7, #9]
     ac4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ac6:	4313      	orrs	r3, r2
     ac8:	626b      	str	r3, [r5, #36]	; 0x24
     aca:	e7e5      	b.n	a98 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     acc:	0030      	movs	r0, r6
     ace:	4b1e      	ldr	r3, [pc, #120]	; (b48 <_i2c_master_write_packet+0xf0>)
     ad0:	4798      	blx	r3
     ad2:	1e03      	subs	r3, r0, #0
     ad4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     ad6:	d1e5      	bne.n	aa4 <_i2c_master_write_packet+0x4c>
     ad8:	46a0      	mov	r8, r4
     ada:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     adc:	3320      	adds	r3, #32
     ade:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     ae0:	4b15      	ldr	r3, [pc, #84]	; (b38 <_i2c_master_write_packet+0xe0>)
     ae2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     ae4:	4b16      	ldr	r3, [pc, #88]	; (b40 <_i2c_master_write_packet+0xe8>)
     ae6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     ae8:	4544      	cmp	r4, r8
     aea:	d015      	beq.n	b18 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     aec:	8b6b      	ldrh	r3, [r5, #26]
     aee:	464a      	mov	r2, r9
     af0:	4213      	tst	r3, r2
     af2:	d01d      	beq.n	b30 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     af4:	0030      	movs	r0, r6
     af6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	5d1a      	ldrb	r2, [r3, r4]
     afc:	2328      	movs	r3, #40	; 0x28
     afe:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     b00:	0030      	movs	r0, r6
     b02:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     b04:	2800      	cmp	r0, #0
     b06:	d106      	bne.n	b16 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b08:	8b6b      	ldrh	r3, [r5, #26]
     b0a:	3401      	adds	r4, #1
     b0c:	075b      	lsls	r3, r3, #29
     b0e:	d5eb      	bpl.n	ae8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     b10:	231e      	movs	r3, #30
     b12:	9301      	str	r3, [sp, #4]
     b14:	e000      	b.n	b18 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     b16:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     b18:	7ab3      	ldrb	r3, [r6, #10]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d0c2      	beq.n	aa4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     b1e:	0030      	movs	r0, r6
     b20:	4b05      	ldr	r3, [pc, #20]	; (b38 <_i2c_master_write_packet+0xe0>)
     b22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b24:	686a      	ldr	r2, [r5, #4]
     b26:	23c0      	movs	r3, #192	; 0xc0
     b28:	029b      	lsls	r3, r3, #10
     b2a:	4313      	orrs	r3, r2
     b2c:	606b      	str	r3, [r5, #4]
     b2e:	e7b9      	b.n	aa4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     b30:	2341      	movs	r3, #65	; 0x41
     b32:	9301      	str	r3, [sp, #4]
     b34:	e7b6      	b.n	aa4 <_i2c_master_write_packet+0x4c>
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	000006d9 	.word	0x000006d9
     b3c:	fffbffff 	.word	0xfffbffff
     b40:	00000a0d 	.word	0x00000a0d
     b44:	00000a39 	.word	0x00000a39
     b48:	000009dd 	.word	0x000009dd

00000b4c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b4c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     b4e:	8b83      	ldrh	r3, [r0, #28]
     b50:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     b52:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     b54:	2b00      	cmp	r3, #0
     b56:	d001      	beq.n	b5c <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     b58:	0010      	movs	r0, r2
     b5a:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     b5c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     b5e:	3301      	adds	r3, #1
     b60:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     b62:	4b02      	ldr	r3, [pc, #8]	; (b6c <i2c_master_write_packet_wait_no_stop+0x20>)
     b64:	4798      	blx	r3
     b66:	0002      	movs	r2, r0
     b68:	e7f6      	b.n	b58 <i2c_master_write_packet_wait_no_stop+0xc>
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	00000a59 	.word	0x00000a59

00000b70 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
     b70:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b72:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
     b74:	4b03      	ldr	r3, [pc, #12]	; (b84 <i2c_master_send_stop+0x14>)
     b76:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b78:	6862      	ldr	r2, [r4, #4]
     b7a:	23c0      	movs	r3, #192	; 0xc0
     b7c:	029b      	lsls	r3, r3, #10
     b7e:	4313      	orrs	r3, r2
     b80:	6063      	str	r3, [r4, #4]
}
     b82:	bd10      	pop	{r4, pc}
     b84:	000006d9 	.word	0x000006d9

00000b88 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     b88:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     b8a:	2207      	movs	r2, #7
     b8c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     b8e:	421a      	tst	r2, r3
     b90:	d1fc      	bne.n	b8c <_i2c_master_wait_for_sync+0x4>
}
     b92:	4770      	bx	lr

00000b94 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     b94:	b570      	push	{r4, r5, r6, lr}
     b96:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b98:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     b9a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     b9c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     b9e:	8b83      	ldrh	r3, [r0, #28]
     ba0:	1aed      	subs	r5, r5, r3
     ba2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     ba4:	8b83      	ldrh	r3, [r0, #28]
     ba6:	3b01      	subs	r3, #1
     ba8:	b29b      	uxth	r3, r3
     baa:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     bac:	0113      	lsls	r3, r2, #4
     bae:	d51d      	bpl.n	bec <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     bb0:	7ac3      	ldrb	r3, [r0, #11]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d003      	beq.n	bbe <_i2c_master_read+0x2a>
     bb6:	8b83      	ldrh	r3, [r0, #28]
     bb8:	b29b      	uxth	r3, r3
     bba:	2b01      	cmp	r3, #1
     bbc:	d010      	beq.n	be0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     bbe:	8ba3      	ldrh	r3, [r4, #28]
     bc0:	b29b      	uxth	r3, r3
     bc2:	2b00      	cmp	r3, #0
     bc4:	d102      	bne.n	bcc <_i2c_master_read+0x38>
		if (module->send_stop) {
     bc6:	7aa3      	ldrb	r3, [r4, #10]
     bc8:	2b00      	cmp	r3, #0
     bca:	d11c      	bne.n	c06 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     bcc:	0020      	movs	r0, r4
     bce:	4b12      	ldr	r3, [pc, #72]	; (c18 <_i2c_master_read+0x84>)
     bd0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     bd2:	6a23      	ldr	r3, [r4, #32]
     bd4:	195d      	adds	r5, r3, r5
     bd6:	2328      	movs	r3, #40	; 0x28
     bd8:	5cf3      	ldrb	r3, [r6, r3]
     bda:	b2db      	uxtb	r3, r3
     bdc:	702b      	strb	r3, [r5, #0]
}
     bde:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     be0:	6872      	ldr	r2, [r6, #4]
     be2:	2380      	movs	r3, #128	; 0x80
     be4:	02db      	lsls	r3, r3, #11
     be6:	4313      	orrs	r3, r2
     be8:	6073      	str	r3, [r6, #4]
     bea:	e7e8      	b.n	bbe <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     bec:	7ac3      	ldrb	r3, [r0, #11]
     bee:	2b00      	cmp	r3, #0
     bf0:	d0e5      	beq.n	bbe <_i2c_master_read+0x2a>
     bf2:	8b83      	ldrh	r3, [r0, #28]
     bf4:	b29b      	uxth	r3, r3
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1e1      	bne.n	bbe <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bfa:	6872      	ldr	r2, [r6, #4]
     bfc:	2380      	movs	r3, #128	; 0x80
     bfe:	02db      	lsls	r3, r3, #11
     c00:	4313      	orrs	r3, r2
     c02:	6073      	str	r3, [r6, #4]
     c04:	e7db      	b.n	bbe <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     c06:	0020      	movs	r0, r4
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <_i2c_master_read+0x84>)
     c0a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c0c:	6872      	ldr	r2, [r6, #4]
     c0e:	23c0      	movs	r3, #192	; 0xc0
     c10:	029b      	lsls	r3, r3, #10
     c12:	4313      	orrs	r3, r2
     c14:	6073      	str	r3, [r6, #4]
     c16:	e7d9      	b.n	bcc <_i2c_master_read+0x38>
     c18:	00000b89 	.word	0x00000b89

00000c1c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c1c:	b570      	push	{r4, r5, r6, lr}
     c1e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c20:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c22:	8b6b      	ldrh	r3, [r5, #26]
     c24:	075b      	lsls	r3, r3, #29
     c26:	d503      	bpl.n	c30 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     c28:	221e      	movs	r2, #30
     c2a:	2325      	movs	r3, #37	; 0x25
     c2c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     c2e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     c30:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c32:	8b83      	ldrh	r3, [r0, #28]
     c34:	1af6      	subs	r6, r6, r3
     c36:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     c38:	8b83      	ldrh	r3, [r0, #28]
     c3a:	3b01      	subs	r3, #1
     c3c:	b29b      	uxth	r3, r3
     c3e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <_i2c_master_write+0x38>)
     c42:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     c44:	6a23      	ldr	r3, [r4, #32]
     c46:	199e      	adds	r6, r3, r6
     c48:	7833      	ldrb	r3, [r6, #0]
     c4a:	b2db      	uxtb	r3, r3
     c4c:	2228      	movs	r2, #40	; 0x28
     c4e:	54ab      	strb	r3, [r5, r2]
     c50:	e7ed      	b.n	c2e <_i2c_master_write+0x12>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00000b89 	.word	0x00000b89

00000c58 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     c58:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     c5a:	0080      	lsls	r0, r0, #2
     c5c:	4b75      	ldr	r3, [pc, #468]	; (e34 <_i2c_master_interrupt_handler+0x1dc>)
     c5e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c60:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c62:	682b      	ldr	r3, [r5, #0]
     c64:	011b      	lsls	r3, r3, #4
     c66:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     c68:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     c6a:	7e26      	ldrb	r6, [r4, #24]
     c6c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     c6e:	8b63      	ldrh	r3, [r4, #26]
     c70:	b29b      	uxth	r3, r3
     c72:	2b00      	cmp	r3, #0
     c74:	d103      	bne.n	c7e <_i2c_master_interrupt_handler+0x26>
     c76:	8ba3      	ldrh	r3, [r4, #28]
     c78:	b29b      	uxth	r3, r3
     c7a:	2b00      	cmp	r3, #0
     c7c:	d123      	bne.n	cc6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c7e:	8b63      	ldrh	r3, [r4, #26]
     c80:	b29b      	uxth	r3, r3
     c82:	2b00      	cmp	r3, #0
     c84:	d008      	beq.n	c98 <_i2c_master_interrupt_handler+0x40>
     c86:	8ba3      	ldrh	r3, [r4, #28]
     c88:	b29b      	uxth	r3, r3
     c8a:	2b00      	cmp	r3, #0
     c8c:	d104      	bne.n	c98 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     c8e:	3325      	adds	r3, #37	; 0x25
     c90:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c92:	2b05      	cmp	r3, #5
     c94:	d100      	bne.n	c98 <_i2c_master_interrupt_handler+0x40>
     c96:	e06d      	b.n	d74 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     c98:	8b63      	ldrh	r3, [r4, #26]
     c9a:	b29b      	uxth	r3, r3
     c9c:	2b00      	cmp	r3, #0
     c9e:	d024      	beq.n	cea <_i2c_master_interrupt_handler+0x92>
     ca0:	8ba3      	ldrh	r3, [r4, #28]
     ca2:	b29b      	uxth	r3, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	d020      	beq.n	cea <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     ca8:	8b6b      	ldrh	r3, [r5, #26]
     caa:	069b      	lsls	r3, r3, #26
     cac:	d500      	bpl.n	cb0 <_i2c_master_interrupt_handler+0x58>
     cae:	e081      	b.n	db4 <_i2c_master_interrupt_handler+0x15c>
     cb0:	2a00      	cmp	r2, #0
     cb2:	d004      	beq.n	cbe <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     cb4:	8ba3      	ldrh	r3, [r4, #28]
     cb6:	b29b      	uxth	r3, r3
     cb8:	2b01      	cmp	r3, #1
     cba:	d100      	bne.n	cbe <_i2c_master_interrupt_handler+0x66>
     cbc:	e07a      	b.n	db4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     cbe:	2241      	movs	r2, #65	; 0x41
     cc0:	2325      	movs	r3, #37	; 0x25
     cc2:	54e2      	strb	r2, [r4, r3]
     cc4:	e011      	b.n	cea <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     cc6:	7e2b      	ldrb	r3, [r5, #24]
     cc8:	07db      	lsls	r3, r3, #31
     cca:	d507      	bpl.n	cdc <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     ccc:	2301      	movs	r3, #1
     cce:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     cd0:	8b6b      	ldrh	r3, [r5, #26]
     cd2:	079b      	lsls	r3, r3, #30
     cd4:	d52e      	bpl.n	d34 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     cd6:	2241      	movs	r2, #65	; 0x41
     cd8:	2325      	movs	r3, #37	; 0x25
     cda:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     cdc:	8ba3      	ldrh	r3, [r4, #28]
     cde:	b29b      	uxth	r3, r3
     ce0:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     ce2:	2325      	movs	r3, #37	; 0x25
     ce4:	5ce3      	ldrb	r3, [r4, r3]
     ce6:	2b05      	cmp	r3, #5
     ce8:	d038      	beq.n	d5c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     cea:	8b63      	ldrh	r3, [r4, #26]
     cec:	b29b      	uxth	r3, r3
     cee:	2b00      	cmp	r3, #0
     cf0:	d007      	beq.n	d02 <_i2c_master_interrupt_handler+0xaa>
     cf2:	8ba3      	ldrh	r3, [r4, #28]
     cf4:	b29b      	uxth	r3, r3
     cf6:	2b00      	cmp	r3, #0
     cf8:	d103      	bne.n	d02 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     cfa:	3325      	adds	r3, #37	; 0x25
     cfc:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     cfe:	2b05      	cmp	r3, #5
     d00:	d064      	beq.n	dcc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     d02:	2325      	movs	r3, #37	; 0x25
     d04:	5ce3      	ldrb	r3, [r4, r3]
     d06:	2b05      	cmp	r3, #5
     d08:	d013      	beq.n	d32 <_i2c_master_interrupt_handler+0xda>
     d0a:	2325      	movs	r3, #37	; 0x25
     d0c:	5ce3      	ldrb	r3, [r4, r3]
     d0e:	2b00      	cmp	r3, #0
     d10:	d00f      	beq.n	d32 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     d12:	2303      	movs	r3, #3
     d14:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     d16:	2300      	movs	r3, #0
     d18:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     d1a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     d1c:	3325      	adds	r3, #37	; 0x25
     d1e:	5ce3      	ldrb	r3, [r4, r3]
     d20:	2b41      	cmp	r3, #65	; 0x41
     d22:	d003      	beq.n	d2c <_i2c_master_interrupt_handler+0xd4>
     d24:	7aa3      	ldrb	r3, [r4, #10]
     d26:	2b00      	cmp	r3, #0
     d28:	d000      	beq.n	d2c <_i2c_master_interrupt_handler+0xd4>
     d2a:	e075      	b.n	e18 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     d2c:	0773      	lsls	r3, r6, #29
     d2e:	d500      	bpl.n	d32 <_i2c_master_interrupt_handler+0xda>
     d30:	e07b      	b.n	e2a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     d32:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     d34:	8b6b      	ldrh	r3, [r5, #26]
     d36:	075b      	lsls	r3, r3, #29
     d38:	d5d0      	bpl.n	cdc <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     d3a:	2218      	movs	r2, #24
     d3c:	2325      	movs	r3, #37	; 0x25
     d3e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     d40:	2300      	movs	r3, #0
     d42:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     d44:	7aa3      	ldrb	r3, [r4, #10]
     d46:	2b00      	cmp	r3, #0
     d48:	d0c8      	beq.n	cdc <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     d4a:	0020      	movs	r0, r4
     d4c:	4b3a      	ldr	r3, [pc, #232]	; (e38 <_i2c_master_interrupt_handler+0x1e0>)
     d4e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d50:	686a      	ldr	r2, [r5, #4]
     d52:	23c0      	movs	r3, #192	; 0xc0
     d54:	029b      	lsls	r3, r3, #10
     d56:	4313      	orrs	r3, r2
     d58:	606b      	str	r3, [r5, #4]
     d5a:	e7bf      	b.n	cdc <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d5c:	331f      	adds	r3, #31
     d5e:	5ce3      	ldrb	r3, [r4, r3]
     d60:	2b00      	cmp	r3, #0
     d62:	d003      	beq.n	d6c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     d64:	0020      	movs	r0, r4
     d66:	4b35      	ldr	r3, [pc, #212]	; (e3c <_i2c_master_interrupt_handler+0x1e4>)
     d68:	4798      	blx	r3
     d6a:	e7be      	b.n	cea <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     d6c:	0020      	movs	r0, r4
     d6e:	4b34      	ldr	r3, [pc, #208]	; (e40 <_i2c_master_interrupt_handler+0x1e8>)
     d70:	4798      	blx	r3
     d72:	e7ba      	b.n	cea <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     d74:	331f      	adds	r3, #31
     d76:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     d78:	2b00      	cmp	r3, #0
     d7a:	d000      	beq.n	d7e <_i2c_master_interrupt_handler+0x126>
     d7c:	e78c      	b.n	c98 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     d7e:	3303      	adds	r3, #3
     d80:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     d82:	2300      	movs	r3, #0
     d84:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     d86:	3325      	adds	r3, #37	; 0x25
     d88:	2200      	movs	r2, #0
     d8a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     d8c:	7aa3      	ldrb	r3, [r4, #10]
     d8e:	2b00      	cmp	r3, #0
     d90:	d107      	bne.n	da2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     d92:	2301      	movs	r3, #1
     d94:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     d96:	07f3      	lsls	r3, r6, #31
     d98:	d5a7      	bpl.n	cea <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     d9a:	68e3      	ldr	r3, [r4, #12]
     d9c:	0020      	movs	r0, r4
     d9e:	4798      	blx	r3
     da0:	e7a3      	b.n	cea <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     da2:	0020      	movs	r0, r4
     da4:	4b24      	ldr	r3, [pc, #144]	; (e38 <_i2c_master_interrupt_handler+0x1e0>)
     da6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     da8:	686a      	ldr	r2, [r5, #4]
     daa:	23c0      	movs	r3, #192	; 0xc0
     dac:	029b      	lsls	r3, r3, #10
     dae:	4313      	orrs	r3, r2
     db0:	606b      	str	r3, [r5, #4]
     db2:	e7f0      	b.n	d96 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     db4:	2324      	movs	r3, #36	; 0x24
     db6:	5ce3      	ldrb	r3, [r4, r3]
     db8:	2b00      	cmp	r3, #0
     dba:	d103      	bne.n	dc4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     dbc:	0020      	movs	r0, r4
     dbe:	4b20      	ldr	r3, [pc, #128]	; (e40 <_i2c_master_interrupt_handler+0x1e8>)
     dc0:	4798      	blx	r3
     dc2:	e792      	b.n	cea <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     dc4:	0020      	movs	r0, r4
     dc6:	4b1d      	ldr	r3, [pc, #116]	; (e3c <_i2c_master_interrupt_handler+0x1e4>)
     dc8:	4798      	blx	r3
     dca:	e78e      	b.n	cea <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     dcc:	331f      	adds	r3, #31
     dce:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     dd0:	2b01      	cmp	r3, #1
     dd2:	d196      	bne.n	d02 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     dd4:	7e2b      	ldrb	r3, [r5, #24]
     dd6:	079b      	lsls	r3, r3, #30
     dd8:	d501      	bpl.n	dde <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     dda:	2302      	movs	r3, #2
     ddc:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     dde:	2303      	movs	r3, #3
     de0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     de2:	2300      	movs	r3, #0
     de4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     de6:	3325      	adds	r3, #37	; 0x25
     de8:	2200      	movs	r2, #0
     dea:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     dec:	07b3      	lsls	r3, r6, #30
     dee:	d503      	bpl.n	df8 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     df0:	2324      	movs	r3, #36	; 0x24
     df2:	5ce3      	ldrb	r3, [r4, r3]
     df4:	2b01      	cmp	r3, #1
     df6:	d00b      	beq.n	e10 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     df8:	07f3      	lsls	r3, r6, #31
     dfa:	d400      	bmi.n	dfe <_i2c_master_interrupt_handler+0x1a6>
     dfc:	e781      	b.n	d02 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     dfe:	2324      	movs	r3, #36	; 0x24
     e00:	5ce3      	ldrb	r3, [r4, r3]
     e02:	2b00      	cmp	r3, #0
     e04:	d000      	beq.n	e08 <_i2c_master_interrupt_handler+0x1b0>
     e06:	e77c      	b.n	d02 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e08:	68e3      	ldr	r3, [r4, #12]
     e0a:	0020      	movs	r0, r4
     e0c:	4798      	blx	r3
     e0e:	e778      	b.n	d02 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     e10:	6923      	ldr	r3, [r4, #16]
     e12:	0020      	movs	r0, r4
     e14:	4798      	blx	r3
     e16:	e774      	b.n	d02 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     e18:	0020      	movs	r0, r4
     e1a:	4b07      	ldr	r3, [pc, #28]	; (e38 <_i2c_master_interrupt_handler+0x1e0>)
     e1c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     e1e:	686a      	ldr	r2, [r5, #4]
     e20:	23e0      	movs	r3, #224	; 0xe0
     e22:	02db      	lsls	r3, r3, #11
     e24:	4313      	orrs	r3, r2
     e26:	606b      	str	r3, [r5, #4]
     e28:	e780      	b.n	d2c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     e2a:	6963      	ldr	r3, [r4, #20]
     e2c:	0020      	movs	r0, r4
     e2e:	4798      	blx	r3
}
     e30:	e77f      	b.n	d32 <_i2c_master_interrupt_handler+0xda>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	200003cc 	.word	0x200003cc
     e38:	00000b89 	.word	0x00000b89
     e3c:	00000b95 	.word	0x00000b95
     e40:	00000c1d 	.word	0x00000c1d

00000e44 <disable_adc>:
	Adc *const adc_module = module_inst->hw;
     e44:	4b0c      	ldr	r3, [pc, #48]	; (e78 <disable_adc+0x34>)
     e46:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e48:	2080      	movs	r0, #128	; 0x80
     e4a:	0400      	lsls	r0, r0, #16
     e4c:	2380      	movs	r3, #128	; 0x80
     e4e:	490b      	ldr	r1, [pc, #44]	; (e7c <disable_adc+0x38>)
     e50:	50c8      	str	r0, [r1, r3]
     e52:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     e54:	b25b      	sxtb	r3, r3
     e56:	2b00      	cmp	r3, #0
     e58:	dbfb      	blt.n	e52 <disable_adc+0xe>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     e5a:	230f      	movs	r3, #15
     e5c:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     e5e:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     e60:	7813      	ldrb	r3, [r2, #0]
     e62:	2102      	movs	r1, #2
     e64:	438b      	bics	r3, r1
     e66:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     e68:	4b03      	ldr	r3, [pc, #12]	; (e78 <disable_adc+0x34>)
     e6a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e6c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     e6e:	b25b      	sxtb	r3, r3
     e70:	2b00      	cmp	r3, #0
     e72:	dbfb      	blt.n	e6c <disable_adc+0x28>
	};
}

static void disable_adc(void) {
	adc_disable(&adc_inst);
}
     e74:	4770      	bx	lr
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	200003f0 	.word	0x200003f0
     e7c:	e000e100 	.word	0xe000e100

00000e80 <init_cmd_list>:
void init_cmd_list() {
     e80:	b5f0      	push	{r4, r5, r6, r7, lr}
     e82:	46de      	mov	lr, fp
     e84:	4657      	mov	r7, sl
     e86:	464e      	mov	r6, r9
     e88:	4645      	mov	r5, r8
     e8a:	b5e0      	push	{r5, r6, r7, lr}
     e8c:	b085      	sub	sp, #20
	cmd_list = (struct option_list) {
     e8e:	4b37      	ldr	r3, [pc, #220]	; (f6c <init_cmd_list+0xec>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	469a      	mov	sl, r3
     e94:	4b36      	ldr	r3, [pc, #216]	; (f70 <init_cmd_list+0xf0>)
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	4699      	mov	r9, r3
     e9a:	4b36      	ldr	r3, [pc, #216]	; (f74 <init_cmd_list+0xf4>)
     e9c:	6819      	ldr	r1, [r3, #0]
     e9e:	4b36      	ldr	r3, [pc, #216]	; (f78 <init_cmd_list+0xf8>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	469c      	mov	ip, r3
     ea4:	4b35      	ldr	r3, [pc, #212]	; (f7c <init_cmd_list+0xfc>)
     ea6:	681f      	ldr	r7, [r3, #0]
     ea8:	4b35      	ldr	r3, [pc, #212]	; (f80 <init_cmd_list+0x100>)
     eaa:	681e      	ldr	r6, [r3, #0]
     eac:	4b35      	ldr	r3, [pc, #212]	; (f84 <init_cmd_list+0x104>)
     eae:	681d      	ldr	r5, [r3, #0]
     eb0:	4b35      	ldr	r3, [pc, #212]	; (f88 <init_cmd_list+0x108>)
     eb2:	681c      	ldr	r4, [r3, #0]
     eb4:	9401      	str	r4, [sp, #4]
     eb6:	4b35      	ldr	r3, [pc, #212]	; (f8c <init_cmd_list+0x10c>)
     eb8:	6818      	ldr	r0, [r3, #0]
     eba:	4b35      	ldr	r3, [pc, #212]	; (f90 <init_cmd_list+0x110>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	4698      	mov	r8, r3
     ec0:	4b34      	ldr	r3, [pc, #208]	; (f94 <init_cmd_list+0x114>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	9302      	str	r3, [sp, #8]
     ec6:	4b34      	ldr	r3, [pc, #208]	; (f98 <init_cmd_list+0x118>)
     ec8:	681a      	ldr	r2, [r3, #0]
     eca:	9203      	str	r2, [sp, #12]
     ecc:	4b33      	ldr	r3, [pc, #204]	; (f9c <init_cmd_list+0x11c>)
     ece:	4a34      	ldr	r2, [pc, #208]	; (fa0 <init_cmd_list+0x120>)
     ed0:	6812      	ldr	r2, [r2, #0]
     ed2:	601a      	str	r2, [r3, #0]
     ed4:	4a33      	ldr	r2, [pc, #204]	; (fa4 <init_cmd_list+0x124>)
     ed6:	605a      	str	r2, [r3, #4]
     ed8:	4c33      	ldr	r4, [pc, #204]	; (fa8 <init_cmd_list+0x128>)
     eda:	609c      	str	r4, [r3, #8]
     edc:	4654      	mov	r4, sl
     ede:	60dc      	str	r4, [r3, #12]
     ee0:	611a      	str	r2, [r3, #16]
     ee2:	4c32      	ldr	r4, [pc, #200]	; (fac <init_cmd_list+0x12c>)
     ee4:	615c      	str	r4, [r3, #20]
     ee6:	464c      	mov	r4, r9
     ee8:	619c      	str	r4, [r3, #24]
     eea:	61da      	str	r2, [r3, #28]
     eec:	4c30      	ldr	r4, [pc, #192]	; (fb0 <init_cmd_list+0x130>)
     eee:	621c      	str	r4, [r3, #32]
     ef0:	6259      	str	r1, [r3, #36]	; 0x24
     ef2:	4930      	ldr	r1, [pc, #192]	; (fb4 <init_cmd_list+0x134>)
     ef4:	6299      	str	r1, [r3, #40]	; 0x28
     ef6:	4c30      	ldr	r4, [pc, #192]	; (fb8 <init_cmd_list+0x138>)
     ef8:	62dc      	str	r4, [r3, #44]	; 0x2c
     efa:	4664      	mov	r4, ip
     efc:	631c      	str	r4, [r3, #48]	; 0x30
     efe:	6359      	str	r1, [r3, #52]	; 0x34
     f00:	4c2e      	ldr	r4, [pc, #184]	; (fbc <init_cmd_list+0x13c>)
     f02:	639c      	str	r4, [r3, #56]	; 0x38
     f04:	63df      	str	r7, [r3, #60]	; 0x3c
     f06:	6419      	str	r1, [r3, #64]	; 0x40
     f08:	4f2d      	ldr	r7, [pc, #180]	; (fc0 <init_cmd_list+0x140>)
     f0a:	645f      	str	r7, [r3, #68]	; 0x44
     f0c:	649e      	str	r6, [r3, #72]	; 0x48
     f0e:	64da      	str	r2, [r3, #76]	; 0x4c
     f10:	4e2c      	ldr	r6, [pc, #176]	; (fc4 <init_cmd_list+0x144>)
     f12:	651e      	str	r6, [r3, #80]	; 0x50
     f14:	655d      	str	r5, [r3, #84]	; 0x54
     f16:	659a      	str	r2, [r3, #88]	; 0x58
     f18:	4d2b      	ldr	r5, [pc, #172]	; (fc8 <init_cmd_list+0x148>)
     f1a:	65dd      	str	r5, [r3, #92]	; 0x5c
     f1c:	9c01      	ldr	r4, [sp, #4]
     f1e:	661c      	str	r4, [r3, #96]	; 0x60
     f20:	4c2a      	ldr	r4, [pc, #168]	; (fcc <init_cmd_list+0x14c>)
     f22:	665c      	str	r4, [r3, #100]	; 0x64
     f24:	4d2a      	ldr	r5, [pc, #168]	; (fd0 <init_cmd_list+0x150>)
     f26:	669d      	str	r5, [r3, #104]	; 0x68
     f28:	66d8      	str	r0, [r3, #108]	; 0x6c
     f2a:	671c      	str	r4, [r3, #112]	; 0x70
     f2c:	4829      	ldr	r0, [pc, #164]	; (fd4 <init_cmd_list+0x154>)
     f2e:	6758      	str	r0, [r3, #116]	; 0x74
     f30:	4644      	mov	r4, r8
     f32:	679c      	str	r4, [r3, #120]	; 0x78
     f34:	67d9      	str	r1, [r3, #124]	; 0x7c
     f36:	4828      	ldr	r0, [pc, #160]	; (fd8 <init_cmd_list+0x158>)
     f38:	2180      	movs	r1, #128	; 0x80
     f3a:	5058      	str	r0, [r3, r1]
     f3c:	3104      	adds	r1, #4
     f3e:	9802      	ldr	r0, [sp, #8]
     f40:	5058      	str	r0, [r3, r1]
     f42:	3104      	adds	r1, #4
     f44:	505a      	str	r2, [r3, r1]
     f46:	4825      	ldr	r0, [pc, #148]	; (fdc <init_cmd_list+0x15c>)
     f48:	3104      	adds	r1, #4
     f4a:	5058      	str	r0, [r3, r1]
     f4c:	3104      	adds	r1, #4
     f4e:	9803      	ldr	r0, [sp, #12]
     f50:	5058      	str	r0, [r3, r1]
     f52:	3104      	adds	r1, #4
     f54:	505a      	str	r2, [r3, r1]
     f56:	4922      	ldr	r1, [pc, #136]	; (fe0 <init_cmd_list+0x160>)
     f58:	2298      	movs	r2, #152	; 0x98
     f5a:	5099      	str	r1, [r3, r2]
}
     f5c:	b005      	add	sp, #20
     f5e:	bc3c      	pop	{r2, r3, r4, r5}
     f60:	4690      	mov	r8, r2
     f62:	4699      	mov	r9, r3
     f64:	46a2      	mov	sl, r4
     f66:	46ab      	mov	fp, r5
     f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	20000030 	.word	0x20000030
     f70:	2000002c 	.word	0x2000002c
     f74:	2000000c 	.word	0x2000000c
     f78:	20000004 	.word	0x20000004
     f7c:	20000008 	.word	0x20000008
     f80:	2000001c 	.word	0x2000001c
     f84:	20000018 	.word	0x20000018
     f88:	20000028 	.word	0x20000028
     f8c:	20000024 	.word	0x20000024
     f90:	20000000 	.word	0x20000000
     f94:	20000020 	.word	0x20000020
     f98:	20000014 	.word	0x20000014
     f9c:	200002ec 	.word	0x200002ec
     fa0:	20000010 	.word	0x20000010
     fa4:	00006ba0 	.word	0x00006ba0
     fa8:	00006d8c 	.word	0x00006d8c
     fac:	00006da4 	.word	0x00006da4
     fb0:	00006dcc 	.word	0x00006dcc
     fb4:	00006df4 	.word	0x00006df4
     fb8:	00006e08 	.word	0x00006e08
     fbc:	00006e2c 	.word	0x00006e2c
     fc0:	00006e50 	.word	0x00006e50
     fc4:	00006e7c 	.word	0x00006e7c
     fc8:	00006e94 	.word	0x00006e94
     fcc:	00006eac 	.word	0x00006eac
     fd0:	00006ed0 	.word	0x00006ed0
     fd4:	00006ef0 	.word	0x00006ef0
     fd8:	00006f14 	.word	0x00006f14
     fdc:	00006f38 	.word	0x00006f38
     fe0:	00006f80 	.word	0x00006f80

00000fe4 <handle_help>:
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
	}
}

void handle_help() {
     fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Command List:\r\n");
     fe6:	4808      	ldr	r0, [pc, #32]	; (1008 <handle_help+0x24>)
     fe8:	4b08      	ldr	r3, [pc, #32]	; (100c <handle_help+0x28>)
     fea:	4798      	blx	r3
     fec:	4c08      	ldr	r4, [pc, #32]	; (1010 <handle_help+0x2c>)
     fee:	0027      	movs	r7, r4
     ff0:	379c      	adds	r7, #156	; 0x9c
	for(int i = 0; i < OPTION_COUNT; i++) {
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
     ff2:	4e08      	ldr	r6, [pc, #32]	; (1014 <handle_help+0x30>)
     ff4:	4d08      	ldr	r5, [pc, #32]	; (1018 <handle_help+0x34>)
     ff6:	68a3      	ldr	r3, [r4, #8]
     ff8:	6862      	ldr	r2, [r4, #4]
     ffa:	6821      	ldr	r1, [r4, #0]
     ffc:	0030      	movs	r0, r6
     ffe:	47a8      	blx	r5
    1000:	340c      	adds	r4, #12
	for(int i = 0; i < OPTION_COUNT; i++) {
    1002:	42bc      	cmp	r4, r7
    1004:	d1f7      	bne.n	ff6 <handle_help+0x12>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
    1006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1008:	00006bd8 	.word	0x00006bd8
    100c:	00004cf9 	.word	0x00004cf9
    1010:	200002ec 	.word	0x200002ec
    1014:	00006be8 	.word	0x00006be8
    1018:	00004c05 	.word	0x00004c05

0000101c <handle_ver_bl>:


void handle_ver_bl() {
    101c:	b510      	push	{r4, lr}
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
    101e:	4902      	ldr	r1, [pc, #8]	; (1028 <handle_ver_bl+0xc>)
    1020:	4802      	ldr	r0, [pc, #8]	; (102c <handle_ver_bl+0x10>)
    1022:	4b03      	ldr	r3, [pc, #12]	; (1030 <handle_ver_bl+0x14>)
    1024:	4798      	blx	r3
}
    1026:	bd10      	pop	{r4, pc}
    1028:	00006d68 	.word	0x00006d68
    102c:	00006d70 	.word	0x00006d70
    1030:	00004c05 	.word	0x00004c05

00001034 <handle_ver_app>:

void handle_ver_app() {
    1034:	b510      	push	{r4, lr}
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
    1036:	4902      	ldr	r1, [pc, #8]	; (1040 <handle_ver_app+0xc>)
    1038:	4802      	ldr	r0, [pc, #8]	; (1044 <handle_ver_app+0x10>)
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <handle_ver_app+0x14>)
    103c:	4798      	blx	r3
}
    103e:	bd10      	pop	{r4, pc}
    1040:	00006d68 	.word	0x00006d68
    1044:	00006d4c 	.word	0x00006d4c
    1048:	00004c05 	.word	0x00004c05

0000104c <handle_gpio_get>:
	port_pin_set_output_level(pin, level);
		
	printf("Not implemented yet!\r\n");
}

void handle_gpio_get(char port, int pin_num) {
    104c:	b510      	push	{r4, lr}
	// TODO: Must implement this feature for at least two pins.
		uint8_t pin = PIN_PB02;
		bool level;

	// Hard-coded testing
	if (port == "B" && pin_num == 2){
    104e:	4b0b      	ldr	r3, [pc, #44]	; (107c <handle_gpio_get+0x30>)
    1050:	4298      	cmp	r0, r3
    1052:	d004      	beq.n	105e <handle_gpio_get+0x12>
	else if (port == "B" && pin_num == 3){
		uint8_t pin = PIN_PB03;
		level = port_pin_get_output_level(pin);
	}
	
	printf("The level set is %d\r\n", level);
    1054:	0011      	movs	r1, r2
    1056:	480a      	ldr	r0, [pc, #40]	; (1080 <handle_gpio_get+0x34>)
    1058:	4b0a      	ldr	r3, [pc, #40]	; (1084 <handle_gpio_get+0x38>)
    105a:	4798      	blx	r3

}
    105c:	bd10      	pop	{r4, pc}
	if (port == "B" && pin_num == 2){
    105e:	2902      	cmp	r1, #2
    1060:	d006      	beq.n	1070 <handle_gpio_get+0x24>
	else if (port == "B" && pin_num == 3){
    1062:	2903      	cmp	r1, #3
    1064:	d1f6      	bne.n	1054 <handle_gpio_get+0x8>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->OUT.reg & pin_mask);
    1066:	4b08      	ldr	r3, [pc, #32]	; (1088 <handle_gpio_get+0x3c>)
    1068:	691a      	ldr	r2, [r3, #16]
    106a:	0712      	lsls	r2, r2, #28
    106c:	0fd2      	lsrs	r2, r2, #31
    106e:	e7f1      	b.n	1054 <handle_gpio_get+0x8>
    1070:	4b05      	ldr	r3, [pc, #20]	; (1088 <handle_gpio_get+0x3c>)
    1072:	691a      	ldr	r2, [r3, #16]
    1074:	0752      	lsls	r2, r2, #29
    1076:	0fd2      	lsrs	r2, r2, #31
		level = port_pin_get_output_level(pin);
    1078:	e7ec      	b.n	1054 <handle_gpio_get+0x8>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	00006ba4 	.word	0x00006ba4
    1080:	00006ba8 	.word	0x00006ba8
    1084:	00004c05 	.word	0x00004c05
    1088:	41004480 	.word	0x41004480

0000108c <handle_mac>:

void handle_mac() {
    108c:	b510      	push	{r4, lr}
	char* dummy_mac = "01:23:45:67:89:ab";
	printf("MAC Address: %s\r\n", dummy_mac);
    108e:	4902      	ldr	r1, [pc, #8]	; (1098 <handle_mac+0xc>)
    1090:	4802      	ldr	r0, [pc, #8]	; (109c <handle_mac+0x10>)
    1092:	4b03      	ldr	r3, [pc, #12]	; (10a0 <handle_mac+0x14>)
    1094:	4798      	blx	r3
}
    1096:	bd10      	pop	{r4, pc}
    1098:	00006c38 	.word	0x00006c38
    109c:	00006c4c 	.word	0x00006c4c
    10a0:	00004c05 	.word	0x00004c05

000010a4 <handle_ip>:

void handle_ip() {
    10a4:	b510      	push	{r4, lr}
	char* dummy_ip = "255.255.255.255";
	printf("IP Address: %s\r\n", dummy_ip);
    10a6:	4902      	ldr	r1, [pc, #8]	; (10b0 <handle_ip+0xc>)
    10a8:	4802      	ldr	r0, [pc, #8]	; (10b4 <handle_ip+0x10>)
    10aa:	4b03      	ldr	r3, [pc, #12]	; (10b8 <handle_ip+0x14>)
    10ac:	4798      	blx	r3
}
    10ae:	bd10      	pop	{r4, pc}
    10b0:	00006c14 	.word	0x00006c14
    10b4:	00006c24 	.word	0x00006c24
    10b8:	00004c05 	.word	0x00004c05

000010bc <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10be:	46c6      	mov	lr, r8
    10c0:	b500      	push	{lr}
    10c2:	0006      	movs	r6, r0
    10c4:	000d      	movs	r5, r1
	printf("Reading from Gyro...\r\n");
    10c6:	480f      	ldr	r0, [pc, #60]	; (1104 <handle_read_gyro+0x48>)
    10c8:	4b0f      	ldr	r3, [pc, #60]	; (1108 <handle_read_gyro+0x4c>)
    10ca:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
    10cc:	2e00      	cmp	r6, #0
    10ce:	dd12      	ble.n	10f6 <handle_read_gyro+0x3a>
    10d0:	2400      	movs	r4, #0
		printf("%d\r\n", 9);
    10d2:	4f0e      	ldr	r7, [pc, #56]	; (110c <handle_read_gyro+0x50>)
		delay_ms(interval_ms);
    10d4:	4b0e      	ldr	r3, [pc, #56]	; (1110 <handle_read_gyro+0x54>)
    10d6:	4698      	mov	r8, r3
    10d8:	e004      	b.n	10e4 <handle_read_gyro+0x28>
    10da:	2001      	movs	r0, #1
    10dc:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
    10de:	3401      	adds	r4, #1
    10e0:	42a6      	cmp	r6, r4
    10e2:	d008      	beq.n	10f6 <handle_read_gyro+0x3a>
		printf("%d\r\n", 9);
    10e4:	2109      	movs	r1, #9
    10e6:	480b      	ldr	r0, [pc, #44]	; (1114 <handle_read_gyro+0x58>)
    10e8:	47b8      	blx	r7
		delay_ms(interval_ms);
    10ea:	2d00      	cmp	r5, #0
    10ec:	d0f5      	beq.n	10da <handle_read_gyro+0x1e>
    10ee:	0028      	movs	r0, r5
    10f0:	4b09      	ldr	r3, [pc, #36]	; (1118 <handle_read_gyro+0x5c>)
    10f2:	4798      	blx	r3
    10f4:	e7f3      	b.n	10de <handle_read_gyro+0x22>
	}
	printf("Done!\r\n");
    10f6:	4809      	ldr	r0, [pc, #36]	; (111c <handle_read_gyro+0x60>)
    10f8:	4b03      	ldr	r3, [pc, #12]	; (1108 <handle_read_gyro+0x4c>)
    10fa:	4798      	blx	r3
}
    10fc:	bc04      	pop	{r2}
    10fe:	4690      	mov	r8, r2
    1100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00006c9c 	.word	0x00006c9c
    1108:	00004cf9 	.word	0x00004cf9
    110c:	00004c05 	.word	0x00004c05
    1110:	000016fd 	.word	0x000016fd
    1114:	00006b9c 	.word	0x00006b9c
    1118:	00001729 	.word	0x00001729
    111c:	00006cb4 	.word	0x00006cb4

00001120 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
    1120:	b5f0      	push	{r4, r5, r6, r7, lr}
    1122:	46c6      	mov	lr, r8
    1124:	b500      	push	{lr}
    1126:	0006      	movs	r6, r0
    1128:	000d      	movs	r5, r1
	printf("Reading from Accelerometer...\r\n");
    112a:	480f      	ldr	r0, [pc, #60]	; (1168 <handle_read_accel+0x48>)
    112c:	4b0f      	ldr	r3, [pc, #60]	; (116c <handle_read_accel+0x4c>)
    112e:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
    1130:	2e00      	cmp	r6, #0
    1132:	dd12      	ble.n	115a <handle_read_accel+0x3a>
    1134:	2400      	movs	r4, #0
		printf("%d\r\n", 8);
    1136:	4f0e      	ldr	r7, [pc, #56]	; (1170 <handle_read_accel+0x50>)
		delay_ms(interval_ms);
    1138:	4b0e      	ldr	r3, [pc, #56]	; (1174 <handle_read_accel+0x54>)
    113a:	4698      	mov	r8, r3
    113c:	e004      	b.n	1148 <handle_read_accel+0x28>
    113e:	2001      	movs	r0, #1
    1140:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
    1142:	3401      	adds	r4, #1
    1144:	42a6      	cmp	r6, r4
    1146:	d008      	beq.n	115a <handle_read_accel+0x3a>
		printf("%d\r\n", 8);
    1148:	2108      	movs	r1, #8
    114a:	480b      	ldr	r0, [pc, #44]	; (1178 <handle_read_accel+0x58>)
    114c:	47b8      	blx	r7
		delay_ms(interval_ms);
    114e:	2d00      	cmp	r5, #0
    1150:	d0f5      	beq.n	113e <handle_read_accel+0x1e>
    1152:	0028      	movs	r0, r5
    1154:	4b09      	ldr	r3, [pc, #36]	; (117c <handle_read_accel+0x5c>)
    1156:	4798      	blx	r3
    1158:	e7f3      	b.n	1142 <handle_read_accel+0x22>
	}
	printf("Done!\r\n");
    115a:	4809      	ldr	r0, [pc, #36]	; (1180 <handle_read_accel+0x60>)
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <handle_read_accel+0x4c>)
    115e:	4798      	blx	r3
}
    1160:	bc04      	pop	{r2}
    1162:	4690      	mov	r8, r2
    1164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	00006c7c 	.word	0x00006c7c
    116c:	00004cf9 	.word	0x00004cf9
    1170:	00004c05 	.word	0x00004c05
    1174:	000016fd 	.word	0x000016fd
    1178:	00006b9c 	.word	0x00006b9c
    117c:	00001729 	.word	0x00001729
    1180:	00006cb4 	.word	0x00006cb4

00001184 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
    1184:	b530      	push	{r4, r5, lr}
    1186:	b08d      	sub	sp, #52	; 0x34
	disable_adc();
    1188:	4b31      	ldr	r3, [pc, #196]	; (1250 <handle_adc_get+0xcc>)
    118a:	4798      	blx	r3
	adc_get_config_defaults(&config);
    118c:	4668      	mov	r0, sp
    118e:	4b31      	ldr	r3, [pc, #196]	; (1254 <handle_adc_get+0xd0>)
    1190:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    1192:	2301      	movs	r3, #1
    1194:	466a      	mov	r2, sp
    1196:	7013      	strb	r3, [r2, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    1198:	3301      	adds	r3, #1
    119a:	7053      	strb	r3, [r2, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    119c:	33ff      	adds	r3, #255	; 0xff
    119e:	33ff      	adds	r3, #255	; 0xff
    11a0:	8053      	strh	r3, [r2, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    11a2:	2300      	movs	r3, #0
    11a4:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_inst, ADC, &config);
    11a6:	4c2c      	ldr	r4, [pc, #176]	; (1258 <handle_adc_get+0xd4>)
    11a8:	492c      	ldr	r1, [pc, #176]	; (125c <handle_adc_get+0xd8>)
    11aa:	0020      	movs	r0, r4
    11ac:	4b2c      	ldr	r3, [pc, #176]	; (1260 <handle_adc_get+0xdc>)
    11ae:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    11b0:	6822      	ldr	r2, [r4, #0]
    11b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    11b4:	b25b      	sxtb	r3, r3
    11b6:	2b00      	cmp	r3, #0
    11b8:	dbfb      	blt.n	11b2 <handle_adc_get+0x2e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11ba:	2180      	movs	r1, #128	; 0x80
    11bc:	0409      	lsls	r1, r1, #16
    11be:	4b29      	ldr	r3, [pc, #164]	; (1264 <handle_adc_get+0xe0>)
    11c0:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    11c2:	230f      	movs	r3, #15
    11c4:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    11c6:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    11c8:	7813      	ldrb	r3, [r2, #0]
    11ca:	2102      	movs	r1, #2
    11cc:	430b      	orrs	r3, r1
    11ce:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    11d0:	4b21      	ldr	r3, [pc, #132]	; (1258 <handle_adc_get+0xd4>)
    11d2:	6818      	ldr	r0, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    11d4:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    11d6:	b25b      	sxtb	r3, r3
    11d8:	2b00      	cmp	r3, #0
    11da:	dbfb      	blt.n	11d4 <handle_adc_get+0x50>
    11dc:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    11de:	b25b      	sxtb	r3, r3
    11e0:	2b00      	cmp	r3, #0
    11e2:	dbfb      	blt.n	11dc <handle_adc_get+0x58>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    11e4:	7b03      	ldrb	r3, [r0, #12]
    11e6:	2202      	movs	r2, #2
    11e8:	4313      	orrs	r3, r2
    11ea:	7303      	strb	r3, [r0, #12]
    11ec:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    11ee:	b25b      	sxtb	r3, r3
    11f0:	2b00      	cmp	r3, #0
    11f2:	dbfb      	blt.n	11ec <handle_adc_get+0x68>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    11f4:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    11f6:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    11f8:	2402      	movs	r4, #2
    11fa:	e001      	b.n	1200 <handle_adc_get+0x7c>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    11fc:	4211      	tst	r1, r2
    11fe:	d10a      	bne.n	1216 <handle_adc_get+0x92>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1200:	7e03      	ldrb	r3, [r0, #24]
    1202:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1204:	000a      	movs	r2, r1
    1206:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1208:	421d      	tst	r5, r3
    120a:	d000      	beq.n	120e <handle_adc_get+0x8a>
		status_flags |= ADC_STATUS_WINDOW;
    120c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    120e:	421c      	tst	r4, r3
    1210:	d0f4      	beq.n	11fc <handle_adc_get+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    1212:	432a      	orrs	r2, r5
    1214:	e7f2      	b.n	11fc <handle_adc_get+0x78>
    1216:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1218:	b25b      	sxtb	r3, r3
    121a:	2b00      	cmp	r3, #0
    121c:	dbfb      	blt.n	1216 <handle_adc_get+0x92>
	*result = adc_module->RESULT.reg;
    121e:	8b41      	ldrh	r1, [r0, #26]
    1220:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
    1222:	2301      	movs	r3, #1
    1224:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1226:	7e02      	ldrb	r2, [r0, #24]
    1228:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    122a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    122c:	0754      	lsls	r4, r2, #29
    122e:	d501      	bpl.n	1234 <handle_adc_get+0xb0>
		status_flags |= ADC_STATUS_WINDOW;
    1230:	2402      	movs	r4, #2
    1232:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1234:	0792      	lsls	r2, r2, #30
    1236:	d501      	bpl.n	123c <handle_adc_get+0xb8>
		status_flags |= ADC_STATUS_OVERRUN;
    1238:	2204      	movs	r2, #4
    123a:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    123c:	075b      	lsls	r3, r3, #29
    123e:	d501      	bpl.n	1244 <handle_adc_get+0xc0>
	adc_module->INTFLAG.reg = int_flags;
    1240:	2302      	movs	r3, #2
    1242:	7603      	strb	r3, [r0, #24]
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
	
	printf("ADC Result: %d\r\n", result);
    1244:	4808      	ldr	r0, [pc, #32]	; (1268 <handle_adc_get+0xe4>)
    1246:	4b09      	ldr	r3, [pc, #36]	; (126c <handle_adc_get+0xe8>)
    1248:	4798      	blx	r3
}
    124a:	b00d      	add	sp, #52	; 0x34
    124c:	bd30      	pop	{r4, r5, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00000e45 	.word	0x00000e45
    1254:	000001a9 	.word	0x000001a9
    1258:	200003f0 	.word	0x200003f0
    125c:	42004000 	.word	0x42004000
    1260:	000001f1 	.word	0x000001f1
    1264:	e000e100 	.word	0xe000e100
    1268:	00006b90 	.word	0x00006b90
    126c:	00004c05 	.word	0x00004c05

00001270 <handle_mcu_temp>:

void handle_mcu_temp() {
    1270:	b570      	push	{r4, r5, r6, lr}
	disable_adc();
    1272:	4b23      	ldr	r3, [pc, #140]	; (1300 <handle_mcu_temp+0x90>)
    1274:	4798      	blx	r3
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    1276:	4a23      	ldr	r2, [pc, #140]	; (1304 <handle_mcu_temp+0x94>)
    1278:	6c13      	ldr	r3, [r2, #64]	; 0x40
    127a:	2102      	movs	r1, #2
    127c:	430b      	orrs	r3, r1
    127e:	6413      	str	r3, [r2, #64]	; 0x40
	
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
	
	configure_adc_temp();
    1280:	4b21      	ldr	r3, [pc, #132]	; (1308 <handle_mcu_temp+0x98>)
    1282:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1284:	4b21      	ldr	r3, [pc, #132]	; (130c <handle_mcu_temp+0x9c>)
    1286:	6819      	ldr	r1, [r3, #0]
    1288:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    128a:	b25b      	sxtb	r3, r3
    128c:	2b00      	cmp	r3, #0
    128e:	dbfb      	blt.n	1288 <handle_mcu_temp+0x18>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1290:	7b0b      	ldrb	r3, [r1, #12]
    1292:	2202      	movs	r2, #2
    1294:	4313      	orrs	r3, r2
    1296:	730b      	strb	r3, [r1, #12]
    1298:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    129a:	b25b      	sxtb	r3, r3
    129c:	2b00      	cmp	r3, #0
    129e:	dbfb      	blt.n	1298 <handle_mcu_temp+0x28>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    12a0:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    12a2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    12a4:	2402      	movs	r4, #2
    12a6:	e001      	b.n	12ac <handle_mcu_temp+0x3c>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    12a8:	4210      	tst	r0, r2
    12aa:	d10a      	bne.n	12c2 <handle_mcu_temp+0x52>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    12ac:	7e0b      	ldrb	r3, [r1, #24]
    12ae:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    12b0:	0002      	movs	r2, r0
    12b2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    12b4:	421d      	tst	r5, r3
    12b6:	d000      	beq.n	12ba <handle_mcu_temp+0x4a>
		status_flags |= ADC_STATUS_WINDOW;
    12b8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    12ba:	421c      	tst	r4, r3
    12bc:	d0f4      	beq.n	12a8 <handle_mcu_temp+0x38>
		status_flags |= ADC_STATUS_OVERRUN;
    12be:	432a      	orrs	r2, r5
    12c0:	e7f2      	b.n	12a8 <handle_mcu_temp+0x38>
    12c2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    12c4:	b25b      	sxtb	r3, r3
    12c6:	2b00      	cmp	r3, #0
    12c8:	dbfb      	blt.n	12c2 <handle_mcu_temp+0x52>
	*result = adc_module->RESULT.reg;
    12ca:	8b48      	ldrh	r0, [r1, #26]
    12cc:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    12ce:	2301      	movs	r3, #1
    12d0:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    12d2:	7e0a      	ldrb	r2, [r1, #24]
    12d4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    12d6:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    12d8:	0754      	lsls	r4, r2, #29
    12da:	d501      	bpl.n	12e0 <handle_mcu_temp+0x70>
		status_flags |= ADC_STATUS_WINDOW;
    12dc:	2402      	movs	r4, #2
    12de:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    12e0:	0792      	lsls	r2, r2, #30
    12e2:	d501      	bpl.n	12e8 <handle_mcu_temp+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    12e4:	2204      	movs	r2, #4
    12e6:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    12e8:	075b      	lsls	r3, r3, #29
    12ea:	d501      	bpl.n	12f0 <handle_mcu_temp+0x80>
	adc_module->INTFLAG.reg = int_flags;
    12ec:	2302      	movs	r3, #2
    12ee:	760b      	strb	r3, [r1, #24]
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
	
	int temp = calculate_temperature(result);
    12f0:	4b07      	ldr	r3, [pc, #28]	; (1310 <handle_mcu_temp+0xa0>)
    12f2:	4798      	blx	r3
    12f4:	0001      	movs	r1, r0
	
	printf("Temperature Result: %d \r\n", temp);
    12f6:	4807      	ldr	r0, [pc, #28]	; (1314 <handle_mcu_temp+0xa4>)
    12f8:	4b07      	ldr	r3, [pc, #28]	; (1318 <handle_mcu_temp+0xa8>)
    12fa:	4798      	blx	r3
}
    12fc:	bd70      	pop	{r4, r5, r6, pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00000e45 	.word	0x00000e45
    1304:	40000800 	.word	0x40000800
    1308:	00000115 	.word	0x00000115
    130c:	200003f0 	.word	0x200003f0
    1310:	00000191 	.word	0x00000191
    1314:	00006c60 	.word	0x00006c60
    1318:	00004c05 	.word	0x00004c05

0000131c <handle_i2c_scan>:
	.ten_bit_address  = false,
	.high_speed       = false,
	.hs_master_code   = 0x00,
};

void handle_i2c_scan() {
    131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    131e:	2400      	movs	r4, #0
	
	  for(char slave_address = 0; slave_address <= 127; slave_address++) {
		  enum status_code i2c_status;
		  wr_packet.address     = slave_address;
    1320:	4d0d      	ldr	r5, [pc, #52]	; (1358 <handle_i2c_scan+0x3c>)
		  wr_packet.data_length = 1;
		  wr_buffer[0]          = 0x00;
    1322:	4e0e      	ldr	r6, [pc, #56]	; (135c <handle_i2c_scan+0x40>)
		  wr_packet.data        = wr_buffer;
    1324:	0037      	movs	r7, r6
    1326:	e005      	b.n	1334 <handle_i2c_scan+0x18>
		  i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
		  if( i2c_status == STATUS_OK ) {
			  //i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
			 printf("The slave address is %d \r\n", slave_address); 
		  }
		  i2c_master_send_stop(&i2c_master_instance);
    1328:	480d      	ldr	r0, [pc, #52]	; (1360 <handle_i2c_scan+0x44>)
    132a:	4b0e      	ldr	r3, [pc, #56]	; (1364 <handle_i2c_scan+0x48>)
    132c:	4798      	blx	r3
    132e:	3401      	adds	r4, #1
	  for(char slave_address = 0; slave_address <= 127; slave_address++) {
    1330:	2c80      	cmp	r4, #128	; 0x80
    1332:	d010      	beq.n	1356 <handle_i2c_scan+0x3a>
		  wr_packet.address     = slave_address;
    1334:	802c      	strh	r4, [r5, #0]
		  wr_packet.data_length = 1;
    1336:	2301      	movs	r3, #1
    1338:	806b      	strh	r3, [r5, #2]
		  wr_buffer[0]          = 0x00;
    133a:	2300      	movs	r3, #0
    133c:	7033      	strb	r3, [r6, #0]
		  wr_packet.data        = wr_buffer;
    133e:	606f      	str	r7, [r5, #4]
		  i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    1340:	0029      	movs	r1, r5
    1342:	4807      	ldr	r0, [pc, #28]	; (1360 <handle_i2c_scan+0x44>)
    1344:	4b08      	ldr	r3, [pc, #32]	; (1368 <handle_i2c_scan+0x4c>)
    1346:	4798      	blx	r3
		  if( i2c_status == STATUS_OK ) {
    1348:	2800      	cmp	r0, #0
    134a:	d1ed      	bne.n	1328 <handle_i2c_scan+0xc>
			 printf("The slave address is %d \r\n", slave_address); 
    134c:	0021      	movs	r1, r4
    134e:	4807      	ldr	r0, [pc, #28]	; (136c <handle_i2c_scan+0x50>)
    1350:	4b07      	ldr	r3, [pc, #28]	; (1370 <handle_i2c_scan+0x54>)
    1352:	4798      	blx	r3
    1354:	e7e8      	b.n	1328 <handle_i2c_scan+0xc>
	 }
	
}
    1356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1358:	2000003c 	.word	0x2000003c
    135c:	20000034 	.word	0x20000034
    1360:	200002c4 	.word	0x200002c4
    1364:	00000b71 	.word	0x00000b71
    1368:	00000b4d 	.word	0x00000b4d
    136c:	00006bf8 	.word	0x00006bf8
    1370:	00004c05 	.word	0x00004c05

00001374 <handle_user_input>:
void handle_user_input(char* input) {
    1374:	b570      	push	{r4, r5, r6, lr}
	char* cmd = strtok(input, " ");
    1376:	49ad      	ldr	r1, [pc, #692]	; (162c <handle_user_input+0x2b8>)
    1378:	4bad      	ldr	r3, [pc, #692]	; (1630 <handle_user_input+0x2bc>)
    137a:	4798      	blx	r3
    137c:	0004      	movs	r4, r0
	if(strcmp(CMD_HELP, cmd) == 0) { 
    137e:	4bad      	ldr	r3, [pc, #692]	; (1634 <handle_user_input+0x2c0>)
    1380:	6818      	ldr	r0, [r3, #0]
    1382:	0021      	movs	r1, r4
    1384:	4bac      	ldr	r3, [pc, #688]	; (1638 <handle_user_input+0x2c4>)
    1386:	4798      	blx	r3
    1388:	2800      	cmp	r0, #0
    138a:	d060      	beq.n	144e <handle_user_input+0xda>
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
    138c:	4bab      	ldr	r3, [pc, #684]	; (163c <handle_user_input+0x2c8>)
    138e:	6818      	ldr	r0, [r3, #0]
    1390:	0021      	movs	r1, r4
    1392:	4ba9      	ldr	r3, [pc, #676]	; (1638 <handle_user_input+0x2c4>)
    1394:	4798      	blx	r3
    1396:	2800      	cmp	r0, #0
    1398:	d05c      	beq.n	1454 <handle_user_input+0xe0>
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
    139a:	4ba9      	ldr	r3, [pc, #676]	; (1640 <handle_user_input+0x2cc>)
    139c:	6818      	ldr	r0, [r3, #0]
    139e:	0021      	movs	r1, r4
    13a0:	4ba5      	ldr	r3, [pc, #660]	; (1638 <handle_user_input+0x2c4>)
    13a2:	4798      	blx	r3
    13a4:	2800      	cmp	r0, #0
    13a6:	d058      	beq.n	145a <handle_user_input+0xe6>
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
    13a8:	4ba6      	ldr	r3, [pc, #664]	; (1644 <handle_user_input+0x2d0>)
    13aa:	6818      	ldr	r0, [r3, #0]
    13ac:	0021      	movs	r1, r4
    13ae:	4ba2      	ldr	r3, [pc, #648]	; (1638 <handle_user_input+0x2c4>)
    13b0:	4798      	blx	r3
    13b2:	2800      	cmp	r0, #0
    13b4:	d054      	beq.n	1460 <handle_user_input+0xec>
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
    13b6:	4ba4      	ldr	r3, [pc, #656]	; (1648 <handle_user_input+0x2d4>)
    13b8:	6818      	ldr	r0, [r3, #0]
    13ba:	0021      	movs	r1, r4
    13bc:	4b9e      	ldr	r3, [pc, #632]	; (1638 <handle_user_input+0x2c4>)
    13be:	4798      	blx	r3
    13c0:	2800      	cmp	r0, #0
    13c2:	d100      	bne.n	13c6 <handle_user_input+0x52>
    13c4:	e075      	b.n	14b2 <handle_user_input+0x13e>
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
    13c6:	4ba1      	ldr	r3, [pc, #644]	; (164c <handle_user_input+0x2d8>)
    13c8:	6818      	ldr	r0, [r3, #0]
    13ca:	0021      	movs	r1, r4
    13cc:	4b9a      	ldr	r3, [pc, #616]	; (1638 <handle_user_input+0x2c4>)
    13ce:	4798      	blx	r3
    13d0:	2800      	cmp	r0, #0
    13d2:	d100      	bne.n	13d6 <handle_user_input+0x62>
    13d4:	e096      	b.n	1504 <handle_user_input+0x190>
	else if(strcmp(CMD_MAC, cmd) == 0) { 
    13d6:	4b9e      	ldr	r3, [pc, #632]	; (1650 <handle_user_input+0x2dc>)
    13d8:	6818      	ldr	r0, [r3, #0]
    13da:	0021      	movs	r1, r4
    13dc:	4b96      	ldr	r3, [pc, #600]	; (1638 <handle_user_input+0x2c4>)
    13de:	4798      	blx	r3
    13e0:	2800      	cmp	r0, #0
    13e2:	d100      	bne.n	13e6 <handle_user_input+0x72>
    13e4:	e0b6      	b.n	1554 <handle_user_input+0x1e0>
	else if(strcmp(CMD_IP, cmd) == 0) { 
    13e6:	4b9b      	ldr	r3, [pc, #620]	; (1654 <handle_user_input+0x2e0>)
    13e8:	6818      	ldr	r0, [r3, #0]
    13ea:	0021      	movs	r1, r4
    13ec:	4b92      	ldr	r3, [pc, #584]	; (1638 <handle_user_input+0x2c4>)
    13ee:	4798      	blx	r3
    13f0:	2800      	cmp	r0, #0
    13f2:	d100      	bne.n	13f6 <handle_user_input+0x82>
    13f4:	e0b1      	b.n	155a <handle_user_input+0x1e6>
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
    13f6:	4b98      	ldr	r3, [pc, #608]	; (1658 <handle_user_input+0x2e4>)
    13f8:	6818      	ldr	r0, [r3, #0]
    13fa:	0021      	movs	r1, r4
    13fc:	4b8e      	ldr	r3, [pc, #568]	; (1638 <handle_user_input+0x2c4>)
    13fe:	4798      	blx	r3
    1400:	2800      	cmp	r0, #0
    1402:	d100      	bne.n	1406 <handle_user_input+0x92>
    1404:	e0ac      	b.n	1560 <handle_user_input+0x1ec>
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    1406:	4b95      	ldr	r3, [pc, #596]	; (165c <handle_user_input+0x2e8>)
    1408:	6818      	ldr	r0, [r3, #0]
    140a:	0021      	movs	r1, r4
    140c:	4b8a      	ldr	r3, [pc, #552]	; (1638 <handle_user_input+0x2c4>)
    140e:	4798      	blx	r3
    1410:	2800      	cmp	r0, #0
    1412:	d100      	bne.n	1416 <handle_user_input+0xa2>
    1414:	e0c0      	b.n	1598 <handle_user_input+0x224>
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    1416:	4b92      	ldr	r3, [pc, #584]	; (1660 <handle_user_input+0x2ec>)
    1418:	6818      	ldr	r0, [r3, #0]
    141a:	0021      	movs	r1, r4
    141c:	4b86      	ldr	r3, [pc, #536]	; (1638 <handle_user_input+0x2c4>)
    141e:	4798      	blx	r3
    1420:	2800      	cmp	r0, #0
    1422:	d100      	bne.n	1426 <handle_user_input+0xb2>
    1424:	e0d4      	b.n	15d0 <handle_user_input+0x25c>
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    1426:	4b8f      	ldr	r3, [pc, #572]	; (1664 <handle_user_input+0x2f0>)
    1428:	6818      	ldr	r0, [r3, #0]
    142a:	0021      	movs	r1, r4
    142c:	4b82      	ldr	r3, [pc, #520]	; (1638 <handle_user_input+0x2c4>)
    142e:	4798      	blx	r3
    1430:	2800      	cmp	r0, #0
    1432:	d100      	bne.n	1436 <handle_user_input+0xc2>
    1434:	e0f4      	b.n	1620 <handle_user_input+0x2ac>
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    1436:	4b8c      	ldr	r3, [pc, #560]	; (1668 <handle_user_input+0x2f4>)
    1438:	6818      	ldr	r0, [r3, #0]
    143a:	0021      	movs	r1, r4
    143c:	4b7e      	ldr	r3, [pc, #504]	; (1638 <handle_user_input+0x2c4>)
    143e:	4798      	blx	r3
    1440:	2800      	cmp	r0, #0
    1442:	d100      	bne.n	1446 <handle_user_input+0xd2>
    1444:	e0ef      	b.n	1626 <handle_user_input+0x2b2>
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    1446:	4889      	ldr	r0, [pc, #548]	; (166c <handle_user_input+0x2f8>)
    1448:	4b89      	ldr	r3, [pc, #548]	; (1670 <handle_user_input+0x2fc>)
    144a:	4798      	blx	r3
    144c:	e001      	b.n	1452 <handle_user_input+0xde>
		handle_help(); 
    144e:	4b89      	ldr	r3, [pc, #548]	; (1674 <handle_user_input+0x300>)
    1450:	4798      	blx	r3
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
		handle_ver_bl(); 
    1454:	4b88      	ldr	r3, [pc, #544]	; (1678 <handle_user_input+0x304>)
    1456:	4798      	blx	r3
    1458:	e7fb      	b.n	1452 <handle_user_input+0xde>
		handle_ver_app();
    145a:	4b88      	ldr	r3, [pc, #544]	; (167c <handle_user_input+0x308>)
    145c:	4798      	blx	r3
    145e:	e7f8      	b.n	1452 <handle_user_input+0xde>
		char* arg1 = strtok(NULL, " ");
    1460:	4e72      	ldr	r6, [pc, #456]	; (162c <handle_user_input+0x2b8>)
    1462:	0031      	movs	r1, r6
    1464:	4d72      	ldr	r5, [pc, #456]	; (1630 <handle_user_input+0x2bc>)
    1466:	47a8      	blx	r5
    1468:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    146a:	0031      	movs	r1, r6
    146c:	2000      	movs	r0, #0
    146e:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    1470:	2c00      	cmp	r4, #0
    1472:	d016      	beq.n	14a2 <handle_user_input+0x12e>
    1474:	2800      	cmp	r0, #0
    1476:	d014      	beq.n	14a2 <handle_user_input+0x12e>
		int pin_num = atoi(arg2);
    1478:	4b81      	ldr	r3, [pc, #516]	; (1680 <handle_user_input+0x30c>)
    147a:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    147c:	4981      	ldr	r1, [pc, #516]	; (1684 <handle_user_input+0x310>)
    147e:	0020      	movs	r0, r4
    1480:	4b6d      	ldr	r3, [pc, #436]	; (1638 <handle_user_input+0x2c4>)
    1482:	4798      	blx	r3
    1484:	2800      	cmp	r0, #0
    1486:	d005      	beq.n	1494 <handle_user_input+0x120>
    1488:	497f      	ldr	r1, [pc, #508]	; (1688 <handle_user_input+0x314>)
    148a:	0020      	movs	r0, r4
    148c:	4b6a      	ldr	r3, [pc, #424]	; (1638 <handle_user_input+0x2c4>)
    148e:	4798      	blx	r3
    1490:	2800      	cmp	r0, #0
    1492:	d10a      	bne.n	14aa <handle_user_input+0x136>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1494:	2204      	movs	r2, #4
    1496:	4b7d      	ldr	r3, [pc, #500]	; (168c <handle_user_input+0x318>)
    1498:	619a      	str	r2, [r3, #24]
	printf("Not implemented yet!\r\n");
    149a:	487d      	ldr	r0, [pc, #500]	; (1690 <handle_user_input+0x31c>)
    149c:	4b74      	ldr	r3, [pc, #464]	; (1670 <handle_user_input+0x2fc>)
    149e:	4798      	blx	r3
    14a0:	e7d7      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    14a2:	487c      	ldr	r0, [pc, #496]	; (1694 <handle_user_input+0x320>)
    14a4:	4b72      	ldr	r3, [pc, #456]	; (1670 <handle_user_input+0x2fc>)
    14a6:	4798      	blx	r3
			return;
    14a8:	e7d3      	b.n	1452 <handle_user_input+0xde>
			printf("Enter a valid Port! Try \"help\".\r\n");
    14aa:	487b      	ldr	r0, [pc, #492]	; (1698 <handle_user_input+0x324>)
    14ac:	4b70      	ldr	r3, [pc, #448]	; (1670 <handle_user_input+0x2fc>)
    14ae:	4798      	blx	r3
    14b0:	e7f0      	b.n	1494 <handle_user_input+0x120>
		char* arg1 = strtok(NULL, " ");
    14b2:	4e5e      	ldr	r6, [pc, #376]	; (162c <handle_user_input+0x2b8>)
    14b4:	0031      	movs	r1, r6
    14b6:	4d5e      	ldr	r5, [pc, #376]	; (1630 <handle_user_input+0x2bc>)
    14b8:	47a8      	blx	r5
    14ba:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    14bc:	0031      	movs	r1, r6
    14be:	2000      	movs	r0, #0
    14c0:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    14c2:	2c00      	cmp	r4, #0
    14c4:	d016      	beq.n	14f4 <handle_user_input+0x180>
    14c6:	2800      	cmp	r0, #0
    14c8:	d014      	beq.n	14f4 <handle_user_input+0x180>
		int pin_num = atoi(arg2);
    14ca:	4b6d      	ldr	r3, [pc, #436]	; (1680 <handle_user_input+0x30c>)
    14cc:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    14ce:	496d      	ldr	r1, [pc, #436]	; (1684 <handle_user_input+0x310>)
    14d0:	0020      	movs	r0, r4
    14d2:	4b59      	ldr	r3, [pc, #356]	; (1638 <handle_user_input+0x2c4>)
    14d4:	4798      	blx	r3
    14d6:	2800      	cmp	r0, #0
    14d8:	d005      	beq.n	14e6 <handle_user_input+0x172>
    14da:	496b      	ldr	r1, [pc, #428]	; (1688 <handle_user_input+0x314>)
    14dc:	0020      	movs	r0, r4
    14de:	4b56      	ldr	r3, [pc, #344]	; (1638 <handle_user_input+0x2c4>)
    14e0:	4798      	blx	r3
    14e2:	2800      	cmp	r0, #0
    14e4:	d10a      	bne.n	14fc <handle_user_input+0x188>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14e6:	2204      	movs	r2, #4
    14e8:	4b68      	ldr	r3, [pc, #416]	; (168c <handle_user_input+0x318>)
    14ea:	615a      	str	r2, [r3, #20]
	printf("Not implemented yet!\r\n");
    14ec:	4868      	ldr	r0, [pc, #416]	; (1690 <handle_user_input+0x31c>)
    14ee:	4b60      	ldr	r3, [pc, #384]	; (1670 <handle_user_input+0x2fc>)
    14f0:	4798      	blx	r3
    14f2:	e7ae      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    14f4:	4867      	ldr	r0, [pc, #412]	; (1694 <handle_user_input+0x320>)
    14f6:	4b5e      	ldr	r3, [pc, #376]	; (1670 <handle_user_input+0x2fc>)
    14f8:	4798      	blx	r3
			return;
    14fa:	e7aa      	b.n	1452 <handle_user_input+0xde>
			printf("Enter a valid Port! Try \"help\".\r\n");
    14fc:	4866      	ldr	r0, [pc, #408]	; (1698 <handle_user_input+0x324>)
    14fe:	4b5c      	ldr	r3, [pc, #368]	; (1670 <handle_user_input+0x2fc>)
    1500:	4798      	blx	r3
    1502:	e7f0      	b.n	14e6 <handle_user_input+0x172>
		char* arg1 = strtok(NULL, " ");
    1504:	4e49      	ldr	r6, [pc, #292]	; (162c <handle_user_input+0x2b8>)
    1506:	0031      	movs	r1, r6
    1508:	4d49      	ldr	r5, [pc, #292]	; (1630 <handle_user_input+0x2bc>)
    150a:	47a8      	blx	r5
    150c:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    150e:	0031      	movs	r1, r6
    1510:	2000      	movs	r0, #0
    1512:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    1514:	2c00      	cmp	r4, #0
    1516:	d015      	beq.n	1544 <handle_user_input+0x1d0>
    1518:	2800      	cmp	r0, #0
    151a:	d013      	beq.n	1544 <handle_user_input+0x1d0>
		int pin_num = atoi(arg2);
    151c:	4b58      	ldr	r3, [pc, #352]	; (1680 <handle_user_input+0x30c>)
    151e:	4798      	blx	r3
    1520:	0005      	movs	r5, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    1522:	4958      	ldr	r1, [pc, #352]	; (1684 <handle_user_input+0x310>)
    1524:	0020      	movs	r0, r4
    1526:	4b44      	ldr	r3, [pc, #272]	; (1638 <handle_user_input+0x2c4>)
    1528:	4798      	blx	r3
    152a:	2800      	cmp	r0, #0
    152c:	d005      	beq.n	153a <handle_user_input+0x1c6>
    152e:	4956      	ldr	r1, [pc, #344]	; (1688 <handle_user_input+0x314>)
    1530:	0020      	movs	r0, r4
    1532:	4b41      	ldr	r3, [pc, #260]	; (1638 <handle_user_input+0x2c4>)
    1534:	4798      	blx	r3
    1536:	2800      	cmp	r0, #0
    1538:	d108      	bne.n	154c <handle_user_input+0x1d8>
		handle_gpio_get(*port, pin_num);
    153a:	7820      	ldrb	r0, [r4, #0]
    153c:	0029      	movs	r1, r5
    153e:	4b57      	ldr	r3, [pc, #348]	; (169c <handle_user_input+0x328>)
    1540:	4798      	blx	r3
    1542:	e786      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    1544:	4853      	ldr	r0, [pc, #332]	; (1694 <handle_user_input+0x320>)
    1546:	4b4a      	ldr	r3, [pc, #296]	; (1670 <handle_user_input+0x2fc>)
    1548:	4798      	blx	r3
			return;
    154a:	e782      	b.n	1452 <handle_user_input+0xde>
			printf("Enter a valid Port! Try \"help\".\r\n");
    154c:	4852      	ldr	r0, [pc, #328]	; (1698 <handle_user_input+0x324>)
    154e:	4b48      	ldr	r3, [pc, #288]	; (1670 <handle_user_input+0x2fc>)
    1550:	4798      	blx	r3
    1552:	e7f2      	b.n	153a <handle_user_input+0x1c6>
		handle_mac(); 
    1554:	4b52      	ldr	r3, [pc, #328]	; (16a0 <handle_user_input+0x32c>)
    1556:	4798      	blx	r3
    1558:	e77b      	b.n	1452 <handle_user_input+0xde>
		handle_ip(); 
    155a:	4b52      	ldr	r3, [pc, #328]	; (16a4 <handle_user_input+0x330>)
    155c:	4798      	blx	r3
    155e:	e778      	b.n	1452 <handle_user_input+0xde>
		char* arg1 = strtok(NULL, " ");
    1560:	4d32      	ldr	r5, [pc, #200]	; (162c <handle_user_input+0x2b8>)
    1562:	0029      	movs	r1, r5
    1564:	4c32      	ldr	r4, [pc, #200]	; (1630 <handle_user_input+0x2bc>)
    1566:	47a0      	blx	r4
    1568:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    156a:	0029      	movs	r1, r5
    156c:	2000      	movs	r0, #0
    156e:	47a0      	blx	r4
    1570:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    1572:	2e00      	cmp	r6, #0
    1574:	d00c      	beq.n	1590 <handle_user_input+0x21c>
    1576:	2800      	cmp	r0, #0
    1578:	d00a      	beq.n	1590 <handle_user_input+0x21c>
		int num_readings = atoi(arg1);
    157a:	0030      	movs	r0, r6
    157c:	4d40      	ldr	r5, [pc, #256]	; (1680 <handle_user_input+0x30c>)
    157e:	47a8      	blx	r5
    1580:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    1582:	0020      	movs	r0, r4
    1584:	47a8      	blx	r5
    1586:	0001      	movs	r1, r0
		handle_read_gyro(num_readings, interval_ms); 
    1588:	0030      	movs	r0, r6
    158a:	4b47      	ldr	r3, [pc, #284]	; (16a8 <handle_user_input+0x334>)
    158c:	4798      	blx	r3
    158e:	e760      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    1590:	4840      	ldr	r0, [pc, #256]	; (1694 <handle_user_input+0x320>)
    1592:	4b37      	ldr	r3, [pc, #220]	; (1670 <handle_user_input+0x2fc>)
    1594:	4798      	blx	r3
			return;
    1596:	e75c      	b.n	1452 <handle_user_input+0xde>
		char* arg1 = strtok(NULL, " ");
    1598:	4d24      	ldr	r5, [pc, #144]	; (162c <handle_user_input+0x2b8>)
    159a:	0029      	movs	r1, r5
    159c:	4c24      	ldr	r4, [pc, #144]	; (1630 <handle_user_input+0x2bc>)
    159e:	47a0      	blx	r4
    15a0:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    15a2:	0029      	movs	r1, r5
    15a4:	2000      	movs	r0, #0
    15a6:	47a0      	blx	r4
    15a8:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    15aa:	2e00      	cmp	r6, #0
    15ac:	d00c      	beq.n	15c8 <handle_user_input+0x254>
    15ae:	2800      	cmp	r0, #0
    15b0:	d00a      	beq.n	15c8 <handle_user_input+0x254>
		int num_readings = atoi(arg1);
    15b2:	0030      	movs	r0, r6
    15b4:	4d32      	ldr	r5, [pc, #200]	; (1680 <handle_user_input+0x30c>)
    15b6:	47a8      	blx	r5
    15b8:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    15ba:	0020      	movs	r0, r4
    15bc:	47a8      	blx	r5
    15be:	0001      	movs	r1, r0
		handle_read_accel(num_readings, interval_ms); 
    15c0:	0030      	movs	r0, r6
    15c2:	4b3a      	ldr	r3, [pc, #232]	; (16ac <handle_user_input+0x338>)
    15c4:	4798      	blx	r3
    15c6:	e744      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    15c8:	4832      	ldr	r0, [pc, #200]	; (1694 <handle_user_input+0x320>)
    15ca:	4b29      	ldr	r3, [pc, #164]	; (1670 <handle_user_input+0x2fc>)
    15cc:	4798      	blx	r3
			return;
    15ce:	e740      	b.n	1452 <handle_user_input+0xde>
		char* arg1 = strtok(NULL, " ");
    15d0:	4e16      	ldr	r6, [pc, #88]	; (162c <handle_user_input+0x2b8>)
    15d2:	0031      	movs	r1, r6
    15d4:	4d16      	ldr	r5, [pc, #88]	; (1630 <handle_user_input+0x2bc>)
    15d6:	47a8      	blx	r5
    15d8:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    15da:	0031      	movs	r1, r6
    15dc:	2000      	movs	r0, #0
    15de:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    15e0:	2c00      	cmp	r4, #0
    15e2:	d015      	beq.n	1610 <handle_user_input+0x29c>
    15e4:	2800      	cmp	r0, #0
    15e6:	d013      	beq.n	1610 <handle_user_input+0x29c>
		int pin_num = atoi(arg2);
    15e8:	4b25      	ldr	r3, [pc, #148]	; (1680 <handle_user_input+0x30c>)
    15ea:	4798      	blx	r3
    15ec:	0005      	movs	r5, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    15ee:	4925      	ldr	r1, [pc, #148]	; (1684 <handle_user_input+0x310>)
    15f0:	0020      	movs	r0, r4
    15f2:	4b11      	ldr	r3, [pc, #68]	; (1638 <handle_user_input+0x2c4>)
    15f4:	4798      	blx	r3
    15f6:	2800      	cmp	r0, #0
    15f8:	d005      	beq.n	1606 <handle_user_input+0x292>
    15fa:	4923      	ldr	r1, [pc, #140]	; (1688 <handle_user_input+0x314>)
    15fc:	0020      	movs	r0, r4
    15fe:	4b0e      	ldr	r3, [pc, #56]	; (1638 <handle_user_input+0x2c4>)
    1600:	4798      	blx	r3
    1602:	2800      	cmp	r0, #0
    1604:	d108      	bne.n	1618 <handle_user_input+0x2a4>
		handle_adc_get(port, pin_num); 
    1606:	b2e0      	uxtb	r0, r4
    1608:	0029      	movs	r1, r5
    160a:	4b29      	ldr	r3, [pc, #164]	; (16b0 <handle_user_input+0x33c>)
    160c:	4798      	blx	r3
    160e:	e720      	b.n	1452 <handle_user_input+0xde>
			printf("Not enough arguments! Try \"help\".\r\n");
    1610:	4820      	ldr	r0, [pc, #128]	; (1694 <handle_user_input+0x320>)
    1612:	4b17      	ldr	r3, [pc, #92]	; (1670 <handle_user_input+0x2fc>)
    1614:	4798      	blx	r3
			return;
    1616:	e71c      	b.n	1452 <handle_user_input+0xde>
			printf("Enter a valid Port! Try \"help\".\r\n");
    1618:	481f      	ldr	r0, [pc, #124]	; (1698 <handle_user_input+0x324>)
    161a:	4b15      	ldr	r3, [pc, #84]	; (1670 <handle_user_input+0x2fc>)
    161c:	4798      	blx	r3
    161e:	e7f2      	b.n	1606 <handle_user_input+0x292>
		handle_mcu_temp(); 
    1620:	4b24      	ldr	r3, [pc, #144]	; (16b4 <handle_user_input+0x340>)
    1622:	4798      	blx	r3
    1624:	e715      	b.n	1452 <handle_user_input+0xde>
		handle_i2c_scan(); 
    1626:	4b24      	ldr	r3, [pc, #144]	; (16b8 <handle_user_input+0x344>)
    1628:	4798      	blx	r3
    162a:	e712      	b.n	1452 <handle_user_input+0xde>
    162c:	00006cbc 	.word	0x00006cbc
    1630:	00004ec1 	.word	0x00004ec1
    1634:	20000010 	.word	0x20000010
    1638:	00004ead 	.word	0x00004ead
    163c:	20000030 	.word	0x20000030
    1640:	2000002c 	.word	0x2000002c
    1644:	2000000c 	.word	0x2000000c
    1648:	20000004 	.word	0x20000004
    164c:	20000008 	.word	0x20000008
    1650:	2000001c 	.word	0x2000001c
    1654:	20000018 	.word	0x20000018
    1658:	20000028 	.word	0x20000028
    165c:	20000024 	.word	0x20000024
    1660:	20000000 	.word	0x20000000
    1664:	20000020 	.word	0x20000020
    1668:	20000014 	.word	0x20000014
    166c:	00006d0c 	.word	0x00006d0c
    1670:	00004cf9 	.word	0x00004cf9
    1674:	00000fe5 	.word	0x00000fe5
    1678:	0000101d 	.word	0x0000101d
    167c:	00001035 	.word	0x00001035
    1680:	00004b8d 	.word	0x00004b8d
    1684:	00006ce4 	.word	0x00006ce4
    1688:	00006ba4 	.word	0x00006ba4
    168c:	41004480 	.word	0x41004480
    1690:	00006bc0 	.word	0x00006bc0
    1694:	00006cc0 	.word	0x00006cc0
    1698:	00006ce8 	.word	0x00006ce8
    169c:	0000104d 	.word	0x0000104d
    16a0:	0000108d 	.word	0x0000108d
    16a4:	000010a5 	.word	0x000010a5
    16a8:	000010bd 	.word	0x000010bd
    16ac:	00001121 	.word	0x00001121
    16b0:	00001185 	.word	0x00001185
    16b4:	00001271 	.word	0x00001271
    16b8:	0000131d 	.word	0x0000131d

000016bc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    16bc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    16be:	2000      	movs	r0, #0
    16c0:	4b08      	ldr	r3, [pc, #32]	; (16e4 <delay_init+0x28>)
    16c2:	4798      	blx	r3
    16c4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    16c6:	4c08      	ldr	r4, [pc, #32]	; (16e8 <delay_init+0x2c>)
    16c8:	21fa      	movs	r1, #250	; 0xfa
    16ca:	0089      	lsls	r1, r1, #2
    16cc:	47a0      	blx	r4
    16ce:	4b07      	ldr	r3, [pc, #28]	; (16ec <delay_init+0x30>)
    16d0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    16d2:	4907      	ldr	r1, [pc, #28]	; (16f0 <delay_init+0x34>)
    16d4:	0028      	movs	r0, r5
    16d6:	47a0      	blx	r4
    16d8:	4b06      	ldr	r3, [pc, #24]	; (16f4 <delay_init+0x38>)
    16da:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    16dc:	2205      	movs	r2, #5
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <delay_init+0x3c>)
    16e0:	601a      	str	r2, [r3, #0]
}
    16e2:	bd70      	pop	{r4, r5, r6, pc}
    16e4:	00002899 	.word	0x00002899
    16e8:	00002f85 	.word	0x00002f85
    16ec:	20000048 	.word	0x20000048
    16f0:	000f4240 	.word	0x000f4240
    16f4:	2000004c 	.word	0x2000004c
    16f8:	e000e010 	.word	0xe000e010

000016fc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    16fc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    16fe:	4b08      	ldr	r3, [pc, #32]	; (1720 <delay_cycles_us+0x24>)
    1700:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1702:	4a08      	ldr	r2, [pc, #32]	; (1724 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1704:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1706:	2180      	movs	r1, #128	; 0x80
    1708:	0249      	lsls	r1, r1, #9
	while (n--) {
    170a:	3801      	subs	r0, #1
    170c:	d307      	bcc.n	171e <delay_cycles_us+0x22>
	if (n > 0) {
    170e:	2c00      	cmp	r4, #0
    1710:	d0fb      	beq.n	170a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1712:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1714:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1716:	6813      	ldr	r3, [r2, #0]
    1718:	420b      	tst	r3, r1
    171a:	d0fc      	beq.n	1716 <delay_cycles_us+0x1a>
    171c:	e7f5      	b.n	170a <delay_cycles_us+0xe>
	}
}
    171e:	bd30      	pop	{r4, r5, pc}
    1720:	2000004c 	.word	0x2000004c
    1724:	e000e010 	.word	0xe000e010

00001728 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1728:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    172a:	4b08      	ldr	r3, [pc, #32]	; (174c <delay_cycles_ms+0x24>)
    172c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    172e:	4a08      	ldr	r2, [pc, #32]	; (1750 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1730:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1732:	2180      	movs	r1, #128	; 0x80
    1734:	0249      	lsls	r1, r1, #9
	while (n--) {
    1736:	3801      	subs	r0, #1
    1738:	d307      	bcc.n	174a <delay_cycles_ms+0x22>
	if (n > 0) {
    173a:	2c00      	cmp	r4, #0
    173c:	d0fb      	beq.n	1736 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    173e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1740:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1742:	6813      	ldr	r3, [r2, #0]
    1744:	420b      	tst	r3, r1
    1746:	d0fc      	beq.n	1742 <delay_cycles_ms+0x1a>
    1748:	e7f5      	b.n	1736 <delay_cycles_ms+0xe>
	}
}
    174a:	bd30      	pop	{r4, r5, pc}
    174c:	20000048 	.word	0x20000048
    1750:	e000e010 	.word	0xe000e010

00001754 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1754:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    1756:	1e44      	subs	r4, r0, #1
    1758:	2800      	cmp	r0, #0
    175a:	d004      	beq.n	1766 <nm_bsp_sleep+0x12>
		delay_ms(1);
    175c:	4d02      	ldr	r5, [pc, #8]	; (1768 <nm_bsp_sleep+0x14>)
    175e:	2001      	movs	r0, #1
    1760:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1762:	3c01      	subs	r4, #1
    1764:	d2fb      	bcs.n	175e <nm_bsp_sleep+0xa>
	}
}
    1766:	bd70      	pop	{r4, r5, r6, pc}
    1768:	00001729 	.word	0x00001729

0000176c <nm_bsp_reset>:
{
    176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176e:	4c07      	ldr	r4, [pc, #28]	; (178c <nm_bsp_reset+0x20>)
    1770:	2780      	movs	r7, #128	; 0x80
    1772:	057f      	lsls	r7, r7, #21
    1774:	6167      	str	r7, [r4, #20]
    1776:	2580      	movs	r5, #128	; 0x80
    1778:	052d      	lsls	r5, r5, #20
    177a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    177c:	2001      	movs	r0, #1
    177e:	4e04      	ldr	r6, [pc, #16]	; (1790 <nm_bsp_reset+0x24>)
    1780:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1782:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    1784:	200a      	movs	r0, #10
    1786:	47b0      	blx	r6
    1788:	61a5      	str	r5, [r4, #24]
}
    178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    178c:	41004400 	.word	0x41004400
    1790:	00001755 	.word	0x00001755

00001794 <nm_bsp_init>:
{
    1794:	b570      	push	{r4, r5, r6, lr}
    1796:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1798:	2300      	movs	r3, #0
    179a:	4a16      	ldr	r2, [pc, #88]	; (17f4 <nm_bsp_init+0x60>)
    179c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    179e:	ac01      	add	r4, sp, #4
    17a0:	2501      	movs	r5, #1
    17a2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    17a4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    17a6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    17a8:	0021      	movs	r1, r4
    17aa:	201b      	movs	r0, #27
    17ac:	4e12      	ldr	r6, [pc, #72]	; (17f8 <nm_bsp_init+0x64>)
    17ae:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    17b0:	0021      	movs	r1, r4
    17b2:	201c      	movs	r0, #28
    17b4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    17b6:	0021      	movs	r1, r4
    17b8:	2028      	movs	r0, #40	; 0x28
    17ba:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    17bc:	4b0f      	ldr	r3, [pc, #60]	; (17fc <nm_bsp_init+0x68>)
    17be:	2280      	movs	r2, #128	; 0x80
    17c0:	0552      	lsls	r2, r2, #21
    17c2:	615a      	str	r2, [r3, #20]
    17c4:	2280      	movs	r2, #128	; 0x80
    17c6:	0512      	lsls	r2, r2, #20
    17c8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    17ca:	4b0d      	ldr	r3, [pc, #52]	; (1800 <nm_bsp_init+0x6c>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	421d      	tst	r5, r3
    17d0:	d003      	beq.n	17da <nm_bsp_init+0x46>
    17d2:	4b0b      	ldr	r3, [pc, #44]	; (1800 <nm_bsp_init+0x6c>)
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	079b      	lsls	r3, r3, #30
    17d8:	d401      	bmi.n	17de <nm_bsp_init+0x4a>
	    delay_init();
    17da:	4b0a      	ldr	r3, [pc, #40]	; (1804 <nm_bsp_init+0x70>)
    17dc:	4798      	blx	r3
	nm_bsp_reset();
    17de:	4b0a      	ldr	r3, [pc, #40]	; (1808 <nm_bsp_init+0x74>)
    17e0:	4798      	blx	r3
	cpu_irq_enable();
    17e2:	2201      	movs	r2, #1
    17e4:	4b09      	ldr	r3, [pc, #36]	; (180c <nm_bsp_init+0x78>)
    17e6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17ec:	b662      	cpsie	i
}
    17ee:	2000      	movs	r0, #0
    17f0:	b002      	add	sp, #8
    17f2:	bd70      	pop	{r4, r5, r6, pc}
    17f4:	20000240 	.word	0x20000240
    17f8:	00001991 	.word	0x00001991
    17fc:	41004400 	.word	0x41004400
    1800:	e000e010 	.word	0xe000e010
    1804:	000016bd 	.word	0x000016bd
    1808:	0000176d 	.word	0x0000176d
    180c:	20000050 	.word	0x20000050

00001810 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1810:	4b0c      	ldr	r3, [pc, #48]	; (1844 <cpu_irq_enter_critical+0x34>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	2b00      	cmp	r3, #0
    1816:	d106      	bne.n	1826 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1818:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    181c:	2b00      	cmp	r3, #0
    181e:	d007      	beq.n	1830 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1820:	2200      	movs	r2, #0
    1822:	4b09      	ldr	r3, [pc, #36]	; (1848 <cpu_irq_enter_critical+0x38>)
    1824:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1826:	4a07      	ldr	r2, [pc, #28]	; (1844 <cpu_irq_enter_critical+0x34>)
    1828:	6813      	ldr	r3, [r2, #0]
    182a:	3301      	adds	r3, #1
    182c:	6013      	str	r3, [r2, #0]
}
    182e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1830:	b672      	cpsid	i
    1832:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1836:	2200      	movs	r2, #0
    1838:	4b04      	ldr	r3, [pc, #16]	; (184c <cpu_irq_enter_critical+0x3c>)
    183a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    183c:	3201      	adds	r2, #1
    183e:	4b02      	ldr	r3, [pc, #8]	; (1848 <cpu_irq_enter_critical+0x38>)
    1840:	701a      	strb	r2, [r3, #0]
    1842:	e7f0      	b.n	1826 <cpu_irq_enter_critical+0x16>
    1844:	20000244 	.word	0x20000244
    1848:	20000248 	.word	0x20000248
    184c:	20000050 	.word	0x20000050

00001850 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <cpu_irq_leave_critical+0x24>)
    1852:	681a      	ldr	r2, [r3, #0]
    1854:	3a01      	subs	r2, #1
    1856:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2b00      	cmp	r3, #0
    185c:	d109      	bne.n	1872 <cpu_irq_leave_critical+0x22>
    185e:	4b06      	ldr	r3, [pc, #24]	; (1878 <cpu_irq_leave_critical+0x28>)
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d005      	beq.n	1872 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1866:	2201      	movs	r2, #1
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <cpu_irq_leave_critical+0x2c>)
    186a:	701a      	strb	r2, [r3, #0]
    186c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1870:	b662      	cpsie	i
	}
}
    1872:	4770      	bx	lr
    1874:	20000244 	.word	0x20000244
    1878:	20000248 	.word	0x20000248
    187c:	20000050 	.word	0x20000050

00001880 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1884:	ac01      	add	r4, sp, #4
    1886:	2501      	movs	r5, #1
    1888:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    188a:	2700      	movs	r7, #0
    188c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    188e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1890:	0021      	movs	r1, r4
    1892:	2017      	movs	r0, #23
    1894:	4e06      	ldr	r6, [pc, #24]	; (18b0 <system_board_init+0x30>)
    1896:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1898:	2280      	movs	r2, #128	; 0x80
    189a:	0412      	lsls	r2, r2, #16
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_board_init+0x34>)
    189e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    18a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    18a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    18a4:	0021      	movs	r1, r4
    18a6:	2037      	movs	r0, #55	; 0x37
    18a8:	47b0      	blx	r6
}
    18aa:	b003      	add	sp, #12
    18ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00001991 	.word	0x00001991
    18b4:	41004400 	.word	0x41004400

000018b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    18b8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18ba:	2200      	movs	r2, #0
    18bc:	4b10      	ldr	r3, [pc, #64]	; (1900 <EIC_Handler+0x48>)
    18be:	701a      	strb	r2, [r3, #0]
    18c0:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    18c2:	4910      	ldr	r1, [pc, #64]	; (1904 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    18c4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18c6:	4e10      	ldr	r6, [pc, #64]	; (1908 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18c8:	4c0d      	ldr	r4, [pc, #52]	; (1900 <EIC_Handler+0x48>)
    18ca:	e00a      	b.n	18e2 <EIC_Handler+0x2a>
		return eics[eic_index];
    18cc:	490d      	ldr	r1, [pc, #52]	; (1904 <EIC_Handler+0x4c>)
    18ce:	e008      	b.n	18e2 <EIC_Handler+0x2a>
    18d0:	7823      	ldrb	r3, [r4, #0]
    18d2:	3301      	adds	r3, #1
    18d4:	b2db      	uxtb	r3, r3
    18d6:	7023      	strb	r3, [r4, #0]
    18d8:	2b0f      	cmp	r3, #15
    18da:	d810      	bhi.n	18fe <EIC_Handler+0x46>
		return NULL;
    18dc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    18de:	2b1f      	cmp	r3, #31
    18e0:	d9f4      	bls.n	18cc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    18e2:	0028      	movs	r0, r5
    18e4:	4018      	ands	r0, r3
    18e6:	2201      	movs	r2, #1
    18e8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    18ea:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    18ec:	4210      	tst	r0, r2
    18ee:	d0ef      	beq.n	18d0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    18f0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    18f2:	009b      	lsls	r3, r3, #2
    18f4:	599b      	ldr	r3, [r3, r6]
    18f6:	2b00      	cmp	r3, #0
    18f8:	d0ea      	beq.n	18d0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    18fa:	4798      	blx	r3
    18fc:	e7e8      	b.n	18d0 <EIC_Handler+0x18>
			}
		}
	}
}
    18fe:	bd70      	pop	{r4, r5, r6, pc}
    1900:	20000388 	.word	0x20000388
    1904:	40001800 	.word	0x40001800
    1908:	2000038c 	.word	0x2000038c

0000190c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    190c:	4a04      	ldr	r2, [pc, #16]	; (1920 <_extint_enable+0x14>)
    190e:	7813      	ldrb	r3, [r2, #0]
    1910:	2102      	movs	r1, #2
    1912:	430b      	orrs	r3, r1
    1914:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1916:	7853      	ldrb	r3, [r2, #1]
    1918:	b25b      	sxtb	r3, r3
    191a:	2b00      	cmp	r3, #0
    191c:	dbfb      	blt.n	1916 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    191e:	4770      	bx	lr
    1920:	40001800 	.word	0x40001800

00001924 <_system_extint_init>:
{
    1924:	b500      	push	{lr}
    1926:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1928:	4a12      	ldr	r2, [pc, #72]	; (1974 <_system_extint_init+0x50>)
    192a:	6993      	ldr	r3, [r2, #24]
    192c:	2140      	movs	r1, #64	; 0x40
    192e:	430b      	orrs	r3, r1
    1930:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1932:	a901      	add	r1, sp, #4
    1934:	2300      	movs	r3, #0
    1936:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1938:	2005      	movs	r0, #5
    193a:	4b0f      	ldr	r3, [pc, #60]	; (1978 <_system_extint_init+0x54>)
    193c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    193e:	2005      	movs	r0, #5
    1940:	4b0e      	ldr	r3, [pc, #56]	; (197c <_system_extint_init+0x58>)
    1942:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1944:	4a0e      	ldr	r2, [pc, #56]	; (1980 <_system_extint_init+0x5c>)
    1946:	7813      	ldrb	r3, [r2, #0]
    1948:	2101      	movs	r1, #1
    194a:	430b      	orrs	r3, r1
    194c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    194e:	7853      	ldrb	r3, [r2, #1]
    1950:	b25b      	sxtb	r3, r3
    1952:	2b00      	cmp	r3, #0
    1954:	dbfb      	blt.n	194e <_system_extint_init+0x2a>
    1956:	4b0b      	ldr	r3, [pc, #44]	; (1984 <_system_extint_init+0x60>)
    1958:	0019      	movs	r1, r3
    195a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    195c:	2200      	movs	r2, #0
    195e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1960:	4299      	cmp	r1, r3
    1962:	d1fc      	bne.n	195e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1964:	2210      	movs	r2, #16
    1966:	4b08      	ldr	r3, [pc, #32]	; (1988 <_system_extint_init+0x64>)
    1968:	601a      	str	r2, [r3, #0]
	_extint_enable();
    196a:	4b08      	ldr	r3, [pc, #32]	; (198c <_system_extint_init+0x68>)
    196c:	4798      	blx	r3
}
    196e:	b003      	add	sp, #12
    1970:	bd00      	pop	{pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	40000400 	.word	0x40000400
    1978:	000029b1 	.word	0x000029b1
    197c:	00002925 	.word	0x00002925
    1980:	40001800 	.word	0x40001800
    1984:	2000038c 	.word	0x2000038c
    1988:	e000e100 	.word	0xe000e100
    198c:	0000190d 	.word	0x0000190d

00001990 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1990:	b500      	push	{lr}
    1992:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1994:	ab01      	add	r3, sp, #4
    1996:	2280      	movs	r2, #128	; 0x80
    1998:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    199a:	780a      	ldrb	r2, [r1, #0]
    199c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    199e:	784a      	ldrb	r2, [r1, #1]
    19a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19a2:	788a      	ldrb	r2, [r1, #2]
    19a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19a6:	0019      	movs	r1, r3
    19a8:	4b01      	ldr	r3, [pc, #4]	; (19b0 <port_pin_set_config+0x20>)
    19aa:	4798      	blx	r3
}
    19ac:	b003      	add	sp, #12
    19ae:	bd00      	pop	{pc}
    19b0:	00002aa9 	.word	0x00002aa9

000019b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    19b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b6:	46de      	mov	lr, fp
    19b8:	4657      	mov	r7, sl
    19ba:	464e      	mov	r6, r9
    19bc:	4645      	mov	r5, r8
    19be:	b5e0      	push	{r5, r6, r7, lr}
    19c0:	b087      	sub	sp, #28
    19c2:	4680      	mov	r8, r0
    19c4:	9104      	str	r1, [sp, #16]
    19c6:	0016      	movs	r6, r2
    19c8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    19ca:	2200      	movs	r2, #0
    19cc:	2300      	movs	r3, #0
    19ce:	2100      	movs	r1, #0
    19d0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    19d2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    19d4:	2001      	movs	r0, #1
    19d6:	0021      	movs	r1, r4
    19d8:	9600      	str	r6, [sp, #0]
    19da:	9701      	str	r7, [sp, #4]
    19dc:	465c      	mov	r4, fp
    19de:	9403      	str	r4, [sp, #12]
    19e0:	4644      	mov	r4, r8
    19e2:	9405      	str	r4, [sp, #20]
    19e4:	e013      	b.n	1a0e <long_division+0x5a>
    19e6:	2420      	movs	r4, #32
    19e8:	1a64      	subs	r4, r4, r1
    19ea:	0005      	movs	r5, r0
    19ec:	40e5      	lsrs	r5, r4
    19ee:	46a8      	mov	r8, r5
    19f0:	e014      	b.n	1a1c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    19f2:	9c00      	ldr	r4, [sp, #0]
    19f4:	9d01      	ldr	r5, [sp, #4]
    19f6:	1b12      	subs	r2, r2, r4
    19f8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    19fa:	465c      	mov	r4, fp
    19fc:	464d      	mov	r5, r9
    19fe:	432c      	orrs	r4, r5
    1a00:	46a3      	mov	fp, r4
    1a02:	9c03      	ldr	r4, [sp, #12]
    1a04:	4645      	mov	r5, r8
    1a06:	432c      	orrs	r4, r5
    1a08:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1a0a:	3901      	subs	r1, #1
    1a0c:	d325      	bcc.n	1a5a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1a0e:	2420      	movs	r4, #32
    1a10:	4264      	negs	r4, r4
    1a12:	190c      	adds	r4, r1, r4
    1a14:	d4e7      	bmi.n	19e6 <long_division+0x32>
    1a16:	0005      	movs	r5, r0
    1a18:	40a5      	lsls	r5, r4
    1a1a:	46a8      	mov	r8, r5
    1a1c:	0004      	movs	r4, r0
    1a1e:	408c      	lsls	r4, r1
    1a20:	46a1      	mov	r9, r4
		r = r << 1;
    1a22:	1892      	adds	r2, r2, r2
    1a24:	415b      	adcs	r3, r3
    1a26:	0014      	movs	r4, r2
    1a28:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1a2a:	9e05      	ldr	r6, [sp, #20]
    1a2c:	464f      	mov	r7, r9
    1a2e:	403e      	ands	r6, r7
    1a30:	46b4      	mov	ip, r6
    1a32:	9e04      	ldr	r6, [sp, #16]
    1a34:	4647      	mov	r7, r8
    1a36:	403e      	ands	r6, r7
    1a38:	46b2      	mov	sl, r6
    1a3a:	4666      	mov	r6, ip
    1a3c:	4657      	mov	r7, sl
    1a3e:	433e      	orrs	r6, r7
    1a40:	d003      	beq.n	1a4a <long_division+0x96>
			r |= 0x01;
    1a42:	0006      	movs	r6, r0
    1a44:	4326      	orrs	r6, r4
    1a46:	0032      	movs	r2, r6
    1a48:	002b      	movs	r3, r5
		if (r >= d) {
    1a4a:	9c00      	ldr	r4, [sp, #0]
    1a4c:	9d01      	ldr	r5, [sp, #4]
    1a4e:	429d      	cmp	r5, r3
    1a50:	d8db      	bhi.n	1a0a <long_division+0x56>
    1a52:	d1ce      	bne.n	19f2 <long_division+0x3e>
    1a54:	4294      	cmp	r4, r2
    1a56:	d8d8      	bhi.n	1a0a <long_division+0x56>
    1a58:	e7cb      	b.n	19f2 <long_division+0x3e>
    1a5a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1a5c:	4658      	mov	r0, fp
    1a5e:	0019      	movs	r1, r3
    1a60:	b007      	add	sp, #28
    1a62:	bc3c      	pop	{r2, r3, r4, r5}
    1a64:	4690      	mov	r8, r2
    1a66:	4699      	mov	r9, r3
    1a68:	46a2      	mov	sl, r4
    1a6a:	46ab      	mov	fp, r5
    1a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a6e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1a6e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1a70:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a72:	2340      	movs	r3, #64	; 0x40
    1a74:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1a76:	4281      	cmp	r1, r0
    1a78:	d202      	bcs.n	1a80 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1a7a:	0018      	movs	r0, r3
    1a7c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1a7e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1a80:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1a82:	1c63      	adds	r3, r4, #1
    1a84:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1a86:	4288      	cmp	r0, r1
    1a88:	d9f9      	bls.n	1a7e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a8a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1a8c:	2cff      	cmp	r4, #255	; 0xff
    1a8e:	d8f4      	bhi.n	1a7a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1a90:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1a92:	2300      	movs	r3, #0
    1a94:	e7f1      	b.n	1a7a <_sercom_get_sync_baud_val+0xc>
	...

00001a98 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	b083      	sub	sp, #12
    1a9c:	000f      	movs	r7, r1
    1a9e:	0016      	movs	r6, r2
    1aa0:	aa08      	add	r2, sp, #32
    1aa2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1aa4:	0004      	movs	r4, r0
    1aa6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1aa8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1aaa:	42bc      	cmp	r4, r7
    1aac:	d902      	bls.n	1ab4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1aae:	0010      	movs	r0, r2
    1ab0:	b003      	add	sp, #12
    1ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d114      	bne.n	1ae2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1ab8:	0002      	movs	r2, r0
    1aba:	0008      	movs	r0, r1
    1abc:	2100      	movs	r1, #0
    1abe:	4c19      	ldr	r4, [pc, #100]	; (1b24 <_sercom_get_async_baud_val+0x8c>)
    1ac0:	47a0      	blx	r4
    1ac2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1ac4:	003a      	movs	r2, r7
    1ac6:	2300      	movs	r3, #0
    1ac8:	2000      	movs	r0, #0
    1aca:	4c17      	ldr	r4, [pc, #92]	; (1b28 <_sercom_get_async_baud_val+0x90>)
    1acc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1ace:	2200      	movs	r2, #0
    1ad0:	2301      	movs	r3, #1
    1ad2:	1a12      	subs	r2, r2, r0
    1ad4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1ad6:	0c12      	lsrs	r2, r2, #16
    1ad8:	041b      	lsls	r3, r3, #16
    1ada:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1adc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1ade:	2200      	movs	r2, #0
    1ae0:	e7e5      	b.n	1aae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1ae2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1ae4:	2b01      	cmp	r3, #1
    1ae6:	d1f9      	bne.n	1adc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ae8:	000a      	movs	r2, r1
    1aea:	2300      	movs	r3, #0
    1aec:	2100      	movs	r1, #0
    1aee:	4c0d      	ldr	r4, [pc, #52]	; (1b24 <_sercom_get_async_baud_val+0x8c>)
    1af0:	47a0      	blx	r4
    1af2:	0002      	movs	r2, r0
    1af4:	000b      	movs	r3, r1
    1af6:	9200      	str	r2, [sp, #0]
    1af8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1afa:	0038      	movs	r0, r7
    1afc:	2100      	movs	r1, #0
    1afe:	4c0a      	ldr	r4, [pc, #40]	; (1b28 <_sercom_get_async_baud_val+0x90>)
    1b00:	47a0      	blx	r4
    1b02:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1b04:	2380      	movs	r3, #128	; 0x80
    1b06:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b08:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1b0a:	4298      	cmp	r0, r3
    1b0c:	d8cf      	bhi.n	1aae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1b0e:	0f79      	lsrs	r1, r7, #29
    1b10:	00f8      	lsls	r0, r7, #3
    1b12:	9a00      	ldr	r2, [sp, #0]
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1b18:	00ea      	lsls	r2, r5, #3
    1b1a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1b1c:	b2d2      	uxtb	r2, r2
    1b1e:	0352      	lsls	r2, r2, #13
    1b20:	432a      	orrs	r2, r5
    1b22:	e7db      	b.n	1adc <_sercom_get_async_baud_val+0x44>
    1b24:	00003271 	.word	0x00003271
    1b28:	000019b5 	.word	0x000019b5

00001b2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1b2c:	b510      	push	{r4, lr}
    1b2e:	b082      	sub	sp, #8
    1b30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1b32:	4b0e      	ldr	r3, [pc, #56]	; (1b6c <sercom_set_gclk_generator+0x40>)
    1b34:	781b      	ldrb	r3, [r3, #0]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d007      	beq.n	1b4a <sercom_set_gclk_generator+0x1e>
    1b3a:	2900      	cmp	r1, #0
    1b3c:	d105      	bne.n	1b4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1b3e:	4b0b      	ldr	r3, [pc, #44]	; (1b6c <sercom_set_gclk_generator+0x40>)
    1b40:	785b      	ldrb	r3, [r3, #1]
    1b42:	4283      	cmp	r3, r0
    1b44:	d010      	beq.n	1b68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1b46:	201d      	movs	r0, #29
    1b48:	e00c      	b.n	1b64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1b4a:	a901      	add	r1, sp, #4
    1b4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1b4e:	2013      	movs	r0, #19
    1b50:	4b07      	ldr	r3, [pc, #28]	; (1b70 <sercom_set_gclk_generator+0x44>)
    1b52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1b54:	2013      	movs	r0, #19
    1b56:	4b07      	ldr	r3, [pc, #28]	; (1b74 <sercom_set_gclk_generator+0x48>)
    1b58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1b5a:	4b04      	ldr	r3, [pc, #16]	; (1b6c <sercom_set_gclk_generator+0x40>)
    1b5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1b5e:	2201      	movs	r2, #1
    1b60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1b62:	2000      	movs	r0, #0
}
    1b64:	b002      	add	sp, #8
    1b66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1b68:	2000      	movs	r0, #0
    1b6a:	e7fb      	b.n	1b64 <sercom_set_gclk_generator+0x38>
    1b6c:	2000024c 	.word	0x2000024c
    1b70:	000029b1 	.word	0x000029b1
    1b74:	00002925 	.word	0x00002925

00001b78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1b78:	4b40      	ldr	r3, [pc, #256]	; (1c7c <_sercom_get_default_pad+0x104>)
    1b7a:	4298      	cmp	r0, r3
    1b7c:	d031      	beq.n	1be2 <_sercom_get_default_pad+0x6a>
    1b7e:	d90a      	bls.n	1b96 <_sercom_get_default_pad+0x1e>
    1b80:	4b3f      	ldr	r3, [pc, #252]	; (1c80 <_sercom_get_default_pad+0x108>)
    1b82:	4298      	cmp	r0, r3
    1b84:	d04d      	beq.n	1c22 <_sercom_get_default_pad+0xaa>
    1b86:	4b3f      	ldr	r3, [pc, #252]	; (1c84 <_sercom_get_default_pad+0x10c>)
    1b88:	4298      	cmp	r0, r3
    1b8a:	d05a      	beq.n	1c42 <_sercom_get_default_pad+0xca>
    1b8c:	4b3e      	ldr	r3, [pc, #248]	; (1c88 <_sercom_get_default_pad+0x110>)
    1b8e:	4298      	cmp	r0, r3
    1b90:	d037      	beq.n	1c02 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1b92:	2000      	movs	r0, #0
}
    1b94:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1b96:	4b3d      	ldr	r3, [pc, #244]	; (1c8c <_sercom_get_default_pad+0x114>)
    1b98:	4298      	cmp	r0, r3
    1b9a:	d00c      	beq.n	1bb6 <_sercom_get_default_pad+0x3e>
    1b9c:	4b3c      	ldr	r3, [pc, #240]	; (1c90 <_sercom_get_default_pad+0x118>)
    1b9e:	4298      	cmp	r0, r3
    1ba0:	d1f7      	bne.n	1b92 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ba2:	2901      	cmp	r1, #1
    1ba4:	d017      	beq.n	1bd6 <_sercom_get_default_pad+0x5e>
    1ba6:	2900      	cmp	r1, #0
    1ba8:	d05d      	beq.n	1c66 <_sercom_get_default_pad+0xee>
    1baa:	2902      	cmp	r1, #2
    1bac:	d015      	beq.n	1bda <_sercom_get_default_pad+0x62>
    1bae:	2903      	cmp	r1, #3
    1bb0:	d015      	beq.n	1bde <_sercom_get_default_pad+0x66>
	return 0;
    1bb2:	2000      	movs	r0, #0
    1bb4:	e7ee      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bb6:	2901      	cmp	r1, #1
    1bb8:	d007      	beq.n	1bca <_sercom_get_default_pad+0x52>
    1bba:	2900      	cmp	r1, #0
    1bbc:	d051      	beq.n	1c62 <_sercom_get_default_pad+0xea>
    1bbe:	2902      	cmp	r1, #2
    1bc0:	d005      	beq.n	1bce <_sercom_get_default_pad+0x56>
    1bc2:	2903      	cmp	r1, #3
    1bc4:	d005      	beq.n	1bd2 <_sercom_get_default_pad+0x5a>
	return 0;
    1bc6:	2000      	movs	r0, #0
    1bc8:	e7e4      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bca:	4832      	ldr	r0, [pc, #200]	; (1c94 <_sercom_get_default_pad+0x11c>)
    1bcc:	e7e2      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bce:	4832      	ldr	r0, [pc, #200]	; (1c98 <_sercom_get_default_pad+0x120>)
    1bd0:	e7e0      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bd2:	4832      	ldr	r0, [pc, #200]	; (1c9c <_sercom_get_default_pad+0x124>)
    1bd4:	e7de      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bd6:	4832      	ldr	r0, [pc, #200]	; (1ca0 <_sercom_get_default_pad+0x128>)
    1bd8:	e7dc      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bda:	4832      	ldr	r0, [pc, #200]	; (1ca4 <_sercom_get_default_pad+0x12c>)
    1bdc:	e7da      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bde:	4832      	ldr	r0, [pc, #200]	; (1ca8 <_sercom_get_default_pad+0x130>)
    1be0:	e7d8      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1be2:	2901      	cmp	r1, #1
    1be4:	d007      	beq.n	1bf6 <_sercom_get_default_pad+0x7e>
    1be6:	2900      	cmp	r1, #0
    1be8:	d03f      	beq.n	1c6a <_sercom_get_default_pad+0xf2>
    1bea:	2902      	cmp	r1, #2
    1bec:	d005      	beq.n	1bfa <_sercom_get_default_pad+0x82>
    1bee:	2903      	cmp	r1, #3
    1bf0:	d005      	beq.n	1bfe <_sercom_get_default_pad+0x86>
	return 0;
    1bf2:	2000      	movs	r0, #0
    1bf4:	e7ce      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bf6:	482d      	ldr	r0, [pc, #180]	; (1cac <_sercom_get_default_pad+0x134>)
    1bf8:	e7cc      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bfa:	482d      	ldr	r0, [pc, #180]	; (1cb0 <_sercom_get_default_pad+0x138>)
    1bfc:	e7ca      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1bfe:	482d      	ldr	r0, [pc, #180]	; (1cb4 <_sercom_get_default_pad+0x13c>)
    1c00:	e7c8      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c02:	2901      	cmp	r1, #1
    1c04:	d007      	beq.n	1c16 <_sercom_get_default_pad+0x9e>
    1c06:	2900      	cmp	r1, #0
    1c08:	d031      	beq.n	1c6e <_sercom_get_default_pad+0xf6>
    1c0a:	2902      	cmp	r1, #2
    1c0c:	d005      	beq.n	1c1a <_sercom_get_default_pad+0xa2>
    1c0e:	2903      	cmp	r1, #3
    1c10:	d005      	beq.n	1c1e <_sercom_get_default_pad+0xa6>
	return 0;
    1c12:	2000      	movs	r0, #0
    1c14:	e7be      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c16:	4828      	ldr	r0, [pc, #160]	; (1cb8 <_sercom_get_default_pad+0x140>)
    1c18:	e7bc      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c1a:	4828      	ldr	r0, [pc, #160]	; (1cbc <_sercom_get_default_pad+0x144>)
    1c1c:	e7ba      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c1e:	4828      	ldr	r0, [pc, #160]	; (1cc0 <_sercom_get_default_pad+0x148>)
    1c20:	e7b8      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c22:	2901      	cmp	r1, #1
    1c24:	d007      	beq.n	1c36 <_sercom_get_default_pad+0xbe>
    1c26:	2900      	cmp	r1, #0
    1c28:	d023      	beq.n	1c72 <_sercom_get_default_pad+0xfa>
    1c2a:	2902      	cmp	r1, #2
    1c2c:	d005      	beq.n	1c3a <_sercom_get_default_pad+0xc2>
    1c2e:	2903      	cmp	r1, #3
    1c30:	d005      	beq.n	1c3e <_sercom_get_default_pad+0xc6>
	return 0;
    1c32:	2000      	movs	r0, #0
    1c34:	e7ae      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c36:	4823      	ldr	r0, [pc, #140]	; (1cc4 <_sercom_get_default_pad+0x14c>)
    1c38:	e7ac      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c3a:	4823      	ldr	r0, [pc, #140]	; (1cc8 <_sercom_get_default_pad+0x150>)
    1c3c:	e7aa      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c3e:	4823      	ldr	r0, [pc, #140]	; (1ccc <_sercom_get_default_pad+0x154>)
    1c40:	e7a8      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c42:	2901      	cmp	r1, #1
    1c44:	d007      	beq.n	1c56 <_sercom_get_default_pad+0xde>
    1c46:	2900      	cmp	r1, #0
    1c48:	d015      	beq.n	1c76 <_sercom_get_default_pad+0xfe>
    1c4a:	2902      	cmp	r1, #2
    1c4c:	d005      	beq.n	1c5a <_sercom_get_default_pad+0xe2>
    1c4e:	2903      	cmp	r1, #3
    1c50:	d005      	beq.n	1c5e <_sercom_get_default_pad+0xe6>
	return 0;
    1c52:	2000      	movs	r0, #0
    1c54:	e79e      	b.n	1b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c56:	481e      	ldr	r0, [pc, #120]	; (1cd0 <_sercom_get_default_pad+0x158>)
    1c58:	e79c      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c5a:	481e      	ldr	r0, [pc, #120]	; (1cd4 <_sercom_get_default_pad+0x15c>)
    1c5c:	e79a      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c5e:	481e      	ldr	r0, [pc, #120]	; (1cd8 <_sercom_get_default_pad+0x160>)
    1c60:	e798      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c62:	481e      	ldr	r0, [pc, #120]	; (1cdc <_sercom_get_default_pad+0x164>)
    1c64:	e796      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c66:	2003      	movs	r0, #3
    1c68:	e794      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c6a:	481d      	ldr	r0, [pc, #116]	; (1ce0 <_sercom_get_default_pad+0x168>)
    1c6c:	e792      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c6e:	481d      	ldr	r0, [pc, #116]	; (1ce4 <_sercom_get_default_pad+0x16c>)
    1c70:	e790      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c72:	481d      	ldr	r0, [pc, #116]	; (1ce8 <_sercom_get_default_pad+0x170>)
    1c74:	e78e      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c76:	481d      	ldr	r0, [pc, #116]	; (1cec <_sercom_get_default_pad+0x174>)
    1c78:	e78c      	b.n	1b94 <_sercom_get_default_pad+0x1c>
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	42001000 	.word	0x42001000
    1c80:	42001800 	.word	0x42001800
    1c84:	42001c00 	.word	0x42001c00
    1c88:	42001400 	.word	0x42001400
    1c8c:	42000800 	.word	0x42000800
    1c90:	42000c00 	.word	0x42000c00
    1c94:	00050003 	.word	0x00050003
    1c98:	00060003 	.word	0x00060003
    1c9c:	00070003 	.word	0x00070003
    1ca0:	00010003 	.word	0x00010003
    1ca4:	001e0003 	.word	0x001e0003
    1ca8:	001f0003 	.word	0x001f0003
    1cac:	00090003 	.word	0x00090003
    1cb0:	000a0003 	.word	0x000a0003
    1cb4:	000b0003 	.word	0x000b0003
    1cb8:	00110003 	.word	0x00110003
    1cbc:	00120003 	.word	0x00120003
    1cc0:	00130003 	.word	0x00130003
    1cc4:	000d0003 	.word	0x000d0003
    1cc8:	000e0003 	.word	0x000e0003
    1ccc:	000f0003 	.word	0x000f0003
    1cd0:	00170003 	.word	0x00170003
    1cd4:	00180003 	.word	0x00180003
    1cd8:	00190003 	.word	0x00190003
    1cdc:	00040003 	.word	0x00040003
    1ce0:	00080003 	.word	0x00080003
    1ce4:	00100003 	.word	0x00100003
    1ce8:	000c0003 	.word	0x000c0003
    1cec:	00160003 	.word	0x00160003

00001cf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1cf0:	b530      	push	{r4, r5, lr}
    1cf2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1cf4:	4b0b      	ldr	r3, [pc, #44]	; (1d24 <_sercom_get_sercom_inst_index+0x34>)
    1cf6:	466a      	mov	r2, sp
    1cf8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1cfa:	c232      	stmia	r2!, {r1, r4, r5}
    1cfc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1cfe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1d00:	9b00      	ldr	r3, [sp, #0]
    1d02:	4283      	cmp	r3, r0
    1d04:	d00b      	beq.n	1d1e <_sercom_get_sercom_inst_index+0x2e>
    1d06:	2301      	movs	r3, #1
    1d08:	009a      	lsls	r2, r3, #2
    1d0a:	4669      	mov	r1, sp
    1d0c:	5852      	ldr	r2, [r2, r1]
    1d0e:	4282      	cmp	r2, r0
    1d10:	d006      	beq.n	1d20 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d12:	3301      	adds	r3, #1
    1d14:	2b06      	cmp	r3, #6
    1d16:	d1f7      	bne.n	1d08 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d18:	2000      	movs	r0, #0
}
    1d1a:	b007      	add	sp, #28
    1d1c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d1e:	2300      	movs	r3, #0
			return i;
    1d20:	b2d8      	uxtb	r0, r3
    1d22:	e7fa      	b.n	1d1a <_sercom_get_sercom_inst_index+0x2a>
    1d24:	00007030 	.word	0x00007030

00001d28 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1d28:	4770      	bx	lr
	...

00001d2c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1d2e:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <_sercom_set_handler+0x2c>)
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d10c      	bne.n	1d50 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d36:	4f09      	ldr	r7, [pc, #36]	; (1d5c <_sercom_set_handler+0x30>)
    1d38:	4e09      	ldr	r6, [pc, #36]	; (1d60 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1d3a:	4d0a      	ldr	r5, [pc, #40]	; (1d64 <_sercom_set_handler+0x38>)
    1d3c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d3e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1d40:	195a      	adds	r2, r3, r5
    1d42:	6014      	str	r4, [r2, #0]
    1d44:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d46:	2b18      	cmp	r3, #24
    1d48:	d1f9      	bne.n	1d3e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1d4a:	2201      	movs	r2, #1
    1d4c:	4b02      	ldr	r3, [pc, #8]	; (1d58 <_sercom_set_handler+0x2c>)
    1d4e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1d50:	0080      	lsls	r0, r0, #2
    1d52:	4b02      	ldr	r3, [pc, #8]	; (1d5c <_sercom_set_handler+0x30>)
    1d54:	50c1      	str	r1, [r0, r3]
}
    1d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d58:	2000024e 	.word	0x2000024e
    1d5c:	20000250 	.word	0x20000250
    1d60:	00001d29 	.word	0x00001d29
    1d64:	200003cc 	.word	0x200003cc

00001d68 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1d68:	b500      	push	{lr}
    1d6a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1d6c:	2309      	movs	r3, #9
    1d6e:	466a      	mov	r2, sp
    1d70:	7013      	strb	r3, [r2, #0]
    1d72:	3301      	adds	r3, #1
    1d74:	7053      	strb	r3, [r2, #1]
    1d76:	3301      	adds	r3, #1
    1d78:	7093      	strb	r3, [r2, #2]
    1d7a:	3301      	adds	r3, #1
    1d7c:	70d3      	strb	r3, [r2, #3]
    1d7e:	3301      	adds	r3, #1
    1d80:	7113      	strb	r3, [r2, #4]
    1d82:	3301      	adds	r3, #1
    1d84:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1d86:	4b03      	ldr	r3, [pc, #12]	; (1d94 <_sercom_get_interrupt_vector+0x2c>)
    1d88:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1d8a:	466b      	mov	r3, sp
    1d8c:	5618      	ldrsb	r0, [r3, r0]
}
    1d8e:	b003      	add	sp, #12
    1d90:	bd00      	pop	{pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00001cf1 	.word	0x00001cf1

00001d98 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1d98:	b510      	push	{r4, lr}
    1d9a:	4b02      	ldr	r3, [pc, #8]	; (1da4 <SERCOM0_Handler+0xc>)
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	2000      	movs	r0, #0
    1da0:	4798      	blx	r3
    1da2:	bd10      	pop	{r4, pc}
    1da4:	20000250 	.word	0x20000250

00001da8 <SERCOM1_Handler>:
    1da8:	b510      	push	{r4, lr}
    1daa:	4b02      	ldr	r3, [pc, #8]	; (1db4 <SERCOM1_Handler+0xc>)
    1dac:	685b      	ldr	r3, [r3, #4]
    1dae:	2001      	movs	r0, #1
    1db0:	4798      	blx	r3
    1db2:	bd10      	pop	{r4, pc}
    1db4:	20000250 	.word	0x20000250

00001db8 <SERCOM2_Handler>:
    1db8:	b510      	push	{r4, lr}
    1dba:	4b02      	ldr	r3, [pc, #8]	; (1dc4 <SERCOM2_Handler+0xc>)
    1dbc:	689b      	ldr	r3, [r3, #8]
    1dbe:	2002      	movs	r0, #2
    1dc0:	4798      	blx	r3
    1dc2:	bd10      	pop	{r4, pc}
    1dc4:	20000250 	.word	0x20000250

00001dc8 <SERCOM3_Handler>:
    1dc8:	b510      	push	{r4, lr}
    1dca:	4b02      	ldr	r3, [pc, #8]	; (1dd4 <SERCOM3_Handler+0xc>)
    1dcc:	68db      	ldr	r3, [r3, #12]
    1dce:	2003      	movs	r0, #3
    1dd0:	4798      	blx	r3
    1dd2:	bd10      	pop	{r4, pc}
    1dd4:	20000250 	.word	0x20000250

00001dd8 <SERCOM4_Handler>:
    1dd8:	b510      	push	{r4, lr}
    1dda:	4b02      	ldr	r3, [pc, #8]	; (1de4 <SERCOM4_Handler+0xc>)
    1ddc:	691b      	ldr	r3, [r3, #16]
    1dde:	2004      	movs	r0, #4
    1de0:	4798      	blx	r3
    1de2:	bd10      	pop	{r4, pc}
    1de4:	20000250 	.word	0x20000250

00001de8 <SERCOM5_Handler>:
    1de8:	b510      	push	{r4, lr}
    1dea:	4b02      	ldr	r3, [pc, #8]	; (1df4 <SERCOM5_Handler+0xc>)
    1dec:	695b      	ldr	r3, [r3, #20]
    1dee:	2005      	movs	r0, #5
    1df0:	4798      	blx	r3
    1df2:	bd10      	pop	{r4, pc}
    1df4:	20000250 	.word	0x20000250

00001df8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfa:	46de      	mov	lr, fp
    1dfc:	4657      	mov	r7, sl
    1dfe:	464e      	mov	r6, r9
    1e00:	4645      	mov	r5, r8
    1e02:	b5e0      	push	{r5, r6, r7, lr}
    1e04:	b091      	sub	sp, #68	; 0x44
    1e06:	0005      	movs	r5, r0
    1e08:	000c      	movs	r4, r1
    1e0a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1e0c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e0e:	0008      	movs	r0, r1
    1e10:	4bbc      	ldr	r3, [pc, #752]	; (2104 <STACK_SIZE+0x104>)
    1e12:	4798      	blx	r3
    1e14:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e16:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1e18:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e1a:	07db      	lsls	r3, r3, #31
    1e1c:	d506      	bpl.n	1e2c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1e1e:	b011      	add	sp, #68	; 0x44
    1e20:	bc3c      	pop	{r2, r3, r4, r5}
    1e22:	4690      	mov	r8, r2
    1e24:	4699      	mov	r9, r3
    1e26:	46a2      	mov	sl, r4
    1e28:	46ab      	mov	fp, r5
    1e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1e2c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1e2e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1e30:	079b      	lsls	r3, r3, #30
    1e32:	d4f4      	bmi.n	1e1e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1e34:	49b4      	ldr	r1, [pc, #720]	; (2108 <STACK_SIZE+0x108>)
    1e36:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1e38:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e3a:	2301      	movs	r3, #1
    1e3c:	40bb      	lsls	r3, r7
    1e3e:	4303      	orrs	r3, r0
    1e40:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1e42:	a90f      	add	r1, sp, #60	; 0x3c
    1e44:	272d      	movs	r7, #45	; 0x2d
    1e46:	5df3      	ldrb	r3, [r6, r7]
    1e48:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e4a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1e4c:	b2d3      	uxtb	r3, r2
    1e4e:	9302      	str	r3, [sp, #8]
    1e50:	0018      	movs	r0, r3
    1e52:	4bae      	ldr	r3, [pc, #696]	; (210c <STACK_SIZE+0x10c>)
    1e54:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1e56:	9802      	ldr	r0, [sp, #8]
    1e58:	4bad      	ldr	r3, [pc, #692]	; (2110 <STACK_SIZE+0x110>)
    1e5a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1e5c:	5df0      	ldrb	r0, [r6, r7]
    1e5e:	2100      	movs	r1, #0
    1e60:	4bac      	ldr	r3, [pc, #688]	; (2114 <STACK_SIZE+0x114>)
    1e62:	4798      	blx	r3
	module->character_size = config->character_size;
    1e64:	7af3      	ldrb	r3, [r6, #11]
    1e66:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1e68:	2324      	movs	r3, #36	; 0x24
    1e6a:	5cf3      	ldrb	r3, [r6, r3]
    1e6c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1e6e:	2325      	movs	r3, #37	; 0x25
    1e70:	5cf3      	ldrb	r3, [r6, r3]
    1e72:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1e74:	7ef3      	ldrb	r3, [r6, #27]
    1e76:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1e78:	7f33      	ldrb	r3, [r6, #28]
    1e7a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e7c:	682b      	ldr	r3, [r5, #0]
    1e7e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e80:	0018      	movs	r0, r3
    1e82:	4ba0      	ldr	r3, [pc, #640]	; (2104 <STACK_SIZE+0x104>)
    1e84:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e86:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1e88:	2200      	movs	r2, #0
    1e8a:	230e      	movs	r3, #14
    1e8c:	a906      	add	r1, sp, #24
    1e8e:	468c      	mov	ip, r1
    1e90:	4463      	add	r3, ip
    1e92:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1e94:	8a32      	ldrh	r2, [r6, #16]
    1e96:	9202      	str	r2, [sp, #8]
    1e98:	2380      	movs	r3, #128	; 0x80
    1e9a:	01db      	lsls	r3, r3, #7
    1e9c:	429a      	cmp	r2, r3
    1e9e:	d100      	bne.n	1ea2 <usart_init+0xaa>
    1ea0:	e09e      	b.n	1fe0 <usart_init+0x1e8>
    1ea2:	d90f      	bls.n	1ec4 <usart_init+0xcc>
    1ea4:	23c0      	movs	r3, #192	; 0xc0
    1ea6:	01db      	lsls	r3, r3, #7
    1ea8:	9a02      	ldr	r2, [sp, #8]
    1eaa:	429a      	cmp	r2, r3
    1eac:	d100      	bne.n	1eb0 <usart_init+0xb8>
    1eae:	e092      	b.n	1fd6 <usart_init+0x1de>
    1eb0:	2380      	movs	r3, #128	; 0x80
    1eb2:	021b      	lsls	r3, r3, #8
    1eb4:	429a      	cmp	r2, r3
    1eb6:	d000      	beq.n	1eba <usart_init+0xc2>
    1eb8:	e11f      	b.n	20fa <STACK_SIZE+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1eba:	2303      	movs	r3, #3
    1ebc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1ebe:	2300      	movs	r3, #0
    1ec0:	9307      	str	r3, [sp, #28]
    1ec2:	e008      	b.n	1ed6 <usart_init+0xde>
	switch (config->sample_rate) {
    1ec4:	2380      	movs	r3, #128	; 0x80
    1ec6:	019b      	lsls	r3, r3, #6
    1ec8:	429a      	cmp	r2, r3
    1eca:	d000      	beq.n	1ece <usart_init+0xd6>
    1ecc:	e115      	b.n	20fa <STACK_SIZE+0xfa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ece:	2310      	movs	r3, #16
    1ed0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1ed2:	3b0f      	subs	r3, #15
    1ed4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1ed6:	6833      	ldr	r3, [r6, #0]
    1ed8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1eda:	68f3      	ldr	r3, [r6, #12]
    1edc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1ede:	6973      	ldr	r3, [r6, #20]
    1ee0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ee2:	7e33      	ldrb	r3, [r6, #24]
    1ee4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ee6:	2326      	movs	r3, #38	; 0x26
    1ee8:	5cf3      	ldrb	r3, [r6, r3]
    1eea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1eec:	6873      	ldr	r3, [r6, #4]
    1eee:	4699      	mov	r9, r3
	switch (transfer_mode)
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d100      	bne.n	1ef6 <usart_init+0xfe>
    1ef4:	e0a0      	b.n	2038 <STACK_SIZE+0x38>
    1ef6:	2380      	movs	r3, #128	; 0x80
    1ef8:	055b      	lsls	r3, r3, #21
    1efa:	4599      	cmp	r9, r3
    1efc:	d100      	bne.n	1f00 <usart_init+0x108>
    1efe:	e084      	b.n	200a <STACK_SIZE+0xa>
	if(config->encoding_format_enable) {
    1f00:	7e73      	ldrb	r3, [r6, #25]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d002      	beq.n	1f0c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1f06:	7eb3      	ldrb	r3, [r6, #26]
    1f08:	4642      	mov	r2, r8
    1f0a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1f0c:	682a      	ldr	r2, [r5, #0]
    1f0e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1f10:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1f12:	2b00      	cmp	r3, #0
    1f14:	d1fc      	bne.n	1f10 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1f16:	330e      	adds	r3, #14
    1f18:	aa06      	add	r2, sp, #24
    1f1a:	4694      	mov	ip, r2
    1f1c:	4463      	add	r3, ip
    1f1e:	881b      	ldrh	r3, [r3, #0]
    1f20:	4642      	mov	r2, r8
    1f22:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1f24:	9b05      	ldr	r3, [sp, #20]
    1f26:	9a03      	ldr	r2, [sp, #12]
    1f28:	4313      	orrs	r3, r2
    1f2a:	9a04      	ldr	r2, [sp, #16]
    1f2c:	4313      	orrs	r3, r2
    1f2e:	464a      	mov	r2, r9
    1f30:	4313      	orrs	r3, r2
    1f32:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f34:	465b      	mov	r3, fp
    1f36:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1f38:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f3a:	4653      	mov	r3, sl
    1f3c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1f3e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1f40:	2327      	movs	r3, #39	; 0x27
    1f42:	5cf3      	ldrb	r3, [r6, r3]
    1f44:	2b00      	cmp	r3, #0
    1f46:	d101      	bne.n	1f4c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1f48:	3304      	adds	r3, #4
    1f4a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1f4c:	7e73      	ldrb	r3, [r6, #25]
    1f4e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1f50:	7f32      	ldrb	r2, [r6, #28]
    1f52:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1f54:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1f56:	7f72      	ldrb	r2, [r6, #29]
    1f58:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1f5a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1f5c:	2224      	movs	r2, #36	; 0x24
    1f5e:	5cb2      	ldrb	r2, [r6, r2]
    1f60:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1f62:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1f64:	2225      	movs	r2, #37	; 0x25
    1f66:	5cb2      	ldrb	r2, [r6, r2]
    1f68:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1f6a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1f6c:	7ab1      	ldrb	r1, [r6, #10]
    1f6e:	7af2      	ldrb	r2, [r6, #11]
    1f70:	4311      	orrs	r1, r2
    1f72:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1f74:	8933      	ldrh	r3, [r6, #8]
    1f76:	2bff      	cmp	r3, #255	; 0xff
    1f78:	d100      	bne.n	1f7c <usart_init+0x184>
    1f7a:	e081      	b.n	2080 <STACK_SIZE+0x80>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1f7c:	2280      	movs	r2, #128	; 0x80
    1f7e:	0452      	lsls	r2, r2, #17
    1f80:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1f82:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1f84:	232c      	movs	r3, #44	; 0x2c
    1f86:	5cf3      	ldrb	r3, [r6, r3]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d103      	bne.n	1f94 <usart_init+0x19c>
    1f8c:	4b62      	ldr	r3, [pc, #392]	; (2118 <STACK_SIZE+0x118>)
    1f8e:	789b      	ldrb	r3, [r3, #2]
    1f90:	079b      	lsls	r3, r3, #30
    1f92:	d501      	bpl.n	1f98 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1f94:	2380      	movs	r3, #128	; 0x80
    1f96:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f98:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f9a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d1fc      	bne.n	1f9a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1fa0:	4643      	mov	r3, r8
    1fa2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fa4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1fa6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d1fc      	bne.n	1fa6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1fac:	4643      	mov	r3, r8
    1fae:	601f      	str	r7, [r3, #0]
    1fb0:	ab0e      	add	r3, sp, #56	; 0x38
    1fb2:	2280      	movs	r2, #128	; 0x80
    1fb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fb6:	2200      	movs	r2, #0
    1fb8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1fba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fbc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1fbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1fc0:	930a      	str	r3, [sp, #40]	; 0x28
    1fc2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1fc4:	930b      	str	r3, [sp, #44]	; 0x2c
    1fc6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1fc8:	930c      	str	r3, [sp, #48]	; 0x30
    1fca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1fcc:	9302      	str	r3, [sp, #8]
    1fce:	930d      	str	r3, [sp, #52]	; 0x34
    1fd0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1fd2:	ae0a      	add	r6, sp, #40	; 0x28
    1fd4:	e063      	b.n	209e <STACK_SIZE+0x9e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1fd6:	2308      	movs	r3, #8
    1fd8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1fda:	3b07      	subs	r3, #7
    1fdc:	9307      	str	r3, [sp, #28]
    1fde:	e77a      	b.n	1ed6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1fe0:	6833      	ldr	r3, [r6, #0]
    1fe2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1fe4:	68f3      	ldr	r3, [r6, #12]
    1fe6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1fe8:	6973      	ldr	r3, [r6, #20]
    1fea:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1fec:	7e33      	ldrb	r3, [r6, #24]
    1fee:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ff0:	2326      	movs	r3, #38	; 0x26
    1ff2:	5cf3      	ldrb	r3, [r6, r3]
    1ff4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1ff6:	6873      	ldr	r3, [r6, #4]
    1ff8:	4699      	mov	r9, r3
	switch (transfer_mode)
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d018      	beq.n	2030 <STACK_SIZE+0x30>
    1ffe:	2380      	movs	r3, #128	; 0x80
    2000:	055b      	lsls	r3, r3, #21
    2002:	4599      	cmp	r9, r3
    2004:	d001      	beq.n	200a <STACK_SIZE+0xa>
	enum status_code status_code = STATUS_OK;
    2006:	2000      	movs	r0, #0
    2008:	e025      	b.n	2056 <STACK_SIZE+0x56>
			if (!config->use_external_clock) {
    200a:	2327      	movs	r3, #39	; 0x27
    200c:	5cf3      	ldrb	r3, [r6, r3]
    200e:	2b00      	cmp	r3, #0
    2010:	d000      	beq.n	2014 <STACK_SIZE+0x14>
    2012:	e775      	b.n	1f00 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2014:	6a33      	ldr	r3, [r6, #32]
    2016:	001f      	movs	r7, r3
    2018:	b2c0      	uxtb	r0, r0
    201a:	4b40      	ldr	r3, [pc, #256]	; (211c <STACK_SIZE+0x11c>)
    201c:	4798      	blx	r3
    201e:	0001      	movs	r1, r0
    2020:	220e      	movs	r2, #14
    2022:	ab06      	add	r3, sp, #24
    2024:	469c      	mov	ip, r3
    2026:	4462      	add	r2, ip
    2028:	0038      	movs	r0, r7
    202a:	4b3d      	ldr	r3, [pc, #244]	; (2120 <STACK_SIZE+0x120>)
    202c:	4798      	blx	r3
    202e:	e012      	b.n	2056 <STACK_SIZE+0x56>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2030:	2308      	movs	r3, #8
    2032:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2034:	2300      	movs	r3, #0
    2036:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2038:	2327      	movs	r3, #39	; 0x27
    203a:	5cf3      	ldrb	r3, [r6, r3]
    203c:	2b00      	cmp	r3, #0
    203e:	d00e      	beq.n	205e <STACK_SIZE+0x5e>
				status_code =
    2040:	9b06      	ldr	r3, [sp, #24]
    2042:	9300      	str	r3, [sp, #0]
    2044:	9b07      	ldr	r3, [sp, #28]
    2046:	220e      	movs	r2, #14
    2048:	a906      	add	r1, sp, #24
    204a:	468c      	mov	ip, r1
    204c:	4462      	add	r2, ip
    204e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2050:	6a30      	ldr	r0, [r6, #32]
    2052:	4f34      	ldr	r7, [pc, #208]	; (2124 <STACK_SIZE+0x124>)
    2054:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2056:	2800      	cmp	r0, #0
    2058:	d000      	beq.n	205c <STACK_SIZE+0x5c>
    205a:	e6e0      	b.n	1e1e <usart_init+0x26>
    205c:	e750      	b.n	1f00 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    205e:	6a33      	ldr	r3, [r6, #32]
    2060:	001f      	movs	r7, r3
    2062:	b2c0      	uxtb	r0, r0
    2064:	4b2d      	ldr	r3, [pc, #180]	; (211c <STACK_SIZE+0x11c>)
    2066:	4798      	blx	r3
    2068:	0001      	movs	r1, r0
				status_code =
    206a:	9b06      	ldr	r3, [sp, #24]
    206c:	9300      	str	r3, [sp, #0]
    206e:	9b07      	ldr	r3, [sp, #28]
    2070:	220e      	movs	r2, #14
    2072:	a806      	add	r0, sp, #24
    2074:	4684      	mov	ip, r0
    2076:	4462      	add	r2, ip
    2078:	0038      	movs	r0, r7
    207a:	4f2a      	ldr	r7, [pc, #168]	; (2124 <STACK_SIZE+0x124>)
    207c:	47b8      	blx	r7
    207e:	e7ea      	b.n	2056 <STACK_SIZE+0x56>
		if(config->lin_slave_enable) {
    2080:	7ef3      	ldrb	r3, [r6, #27]
    2082:	2b00      	cmp	r3, #0
    2084:	d100      	bne.n	2088 <STACK_SIZE+0x88>
    2086:	e77d      	b.n	1f84 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2088:	2380      	movs	r3, #128	; 0x80
    208a:	04db      	lsls	r3, r3, #19
    208c:	431f      	orrs	r7, r3
    208e:	e779      	b.n	1f84 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2090:	0020      	movs	r0, r4
    2092:	4b25      	ldr	r3, [pc, #148]	; (2128 <STACK_SIZE+0x128>)
    2094:	4798      	blx	r3
    2096:	e007      	b.n	20a8 <STACK_SIZE+0xa8>
    2098:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    209a:	2f04      	cmp	r7, #4
    209c:	d00d      	beq.n	20ba <STACK_SIZE+0xba>
    209e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    20a0:	00bb      	lsls	r3, r7, #2
    20a2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    20a4:	2800      	cmp	r0, #0
    20a6:	d0f3      	beq.n	2090 <STACK_SIZE+0x90>
		if (current_pinmux != PINMUX_UNUSED) {
    20a8:	1c43      	adds	r3, r0, #1
    20aa:	d0f5      	beq.n	2098 <STACK_SIZE+0x98>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    20ac:	a90e      	add	r1, sp, #56	; 0x38
    20ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    20b0:	0c00      	lsrs	r0, r0, #16
    20b2:	b2c0      	uxtb	r0, r0
    20b4:	4b1d      	ldr	r3, [pc, #116]	; (212c <STACK_SIZE+0x12c>)
    20b6:	4798      	blx	r3
    20b8:	e7ee      	b.n	2098 <STACK_SIZE+0x98>
		module->callback[i]            = NULL;
    20ba:	2300      	movs	r3, #0
    20bc:	60eb      	str	r3, [r5, #12]
    20be:	612b      	str	r3, [r5, #16]
    20c0:	616b      	str	r3, [r5, #20]
    20c2:	61ab      	str	r3, [r5, #24]
    20c4:	61eb      	str	r3, [r5, #28]
    20c6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    20c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    20ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    20cc:	2200      	movs	r2, #0
    20ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    20d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    20d2:	3330      	adds	r3, #48	; 0x30
    20d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    20d6:	3301      	adds	r3, #1
    20d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    20da:	3301      	adds	r3, #1
    20dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    20de:	3301      	adds	r3, #1
    20e0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    20e2:	6828      	ldr	r0, [r5, #0]
    20e4:	4b07      	ldr	r3, [pc, #28]	; (2104 <STACK_SIZE+0x104>)
    20e6:	4798      	blx	r3
    20e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    20ea:	4911      	ldr	r1, [pc, #68]	; (2130 <STACK_SIZE+0x130>)
    20ec:	4b11      	ldr	r3, [pc, #68]	; (2134 <STACK_SIZE+0x134>)
    20ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    20f0:	00a4      	lsls	r4, r4, #2
    20f2:	4b11      	ldr	r3, [pc, #68]	; (2138 <STACK_SIZE+0x138>)
    20f4:	50e5      	str	r5, [r4, r3]
	return status_code;
    20f6:	2000      	movs	r0, #0
    20f8:	e691      	b.n	1e1e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    20fa:	2310      	movs	r3, #16
    20fc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    20fe:	2300      	movs	r3, #0
    2100:	9307      	str	r3, [sp, #28]
    2102:	e6e8      	b.n	1ed6 <usart_init+0xde>
    2104:	00001cf1 	.word	0x00001cf1
    2108:	40000400 	.word	0x40000400
    210c:	000029b1 	.word	0x000029b1
    2110:	00002925 	.word	0x00002925
    2114:	00001b2d 	.word	0x00001b2d
    2118:	41002000 	.word	0x41002000
    211c:	000029cd 	.word	0x000029cd
    2120:	00001a6f 	.word	0x00001a6f
    2124:	00001a99 	.word	0x00001a99
    2128:	00001b79 	.word	0x00001b79
    212c:	00002aa9 	.word	0x00002aa9
    2130:	000021d9 	.word	0x000021d9
    2134:	00001d2d 	.word	0x00001d2d
    2138:	200003cc 	.word	0x200003cc

0000213c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    213c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    213e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2140:	2a00      	cmp	r2, #0
    2142:	d101      	bne.n	2148 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2144:	0018      	movs	r0, r3
    2146:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2148:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    214a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    214c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    214e:	2a00      	cmp	r2, #0
    2150:	d1f8      	bne.n	2144 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2152:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2154:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2156:	2a00      	cmp	r2, #0
    2158:	d1fc      	bne.n	2154 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    215a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    215c:	2102      	movs	r1, #2
    215e:	7e1a      	ldrb	r2, [r3, #24]
    2160:	420a      	tst	r2, r1
    2162:	d0fc      	beq.n	215e <usart_write_wait+0x22>
	return STATUS_OK;
    2164:	2300      	movs	r3, #0
    2166:	e7ed      	b.n	2144 <usart_write_wait+0x8>

00002168 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2168:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    216a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    216c:	2a00      	cmp	r2, #0
    216e:	d101      	bne.n	2174 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2170:	0018      	movs	r0, r3
    2172:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2174:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2176:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2178:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    217a:	2a00      	cmp	r2, #0
    217c:	d1f8      	bne.n	2170 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    217e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2180:	7e10      	ldrb	r0, [r2, #24]
    2182:	0740      	lsls	r0, r0, #29
    2184:	d5f4      	bpl.n	2170 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2186:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2188:	2b00      	cmp	r3, #0
    218a:	d1fc      	bne.n	2186 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    218c:	8b53      	ldrh	r3, [r2, #26]
    218e:	b2db      	uxtb	r3, r3
	if (error_code) {
    2190:	0698      	lsls	r0, r3, #26
    2192:	d01d      	beq.n	21d0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2194:	0798      	lsls	r0, r3, #30
    2196:	d503      	bpl.n	21a0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2198:	2302      	movs	r3, #2
    219a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    219c:	3318      	adds	r3, #24
    219e:	e7e7      	b.n	2170 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    21a0:	0758      	lsls	r0, r3, #29
    21a2:	d503      	bpl.n	21ac <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    21a4:	2304      	movs	r3, #4
    21a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    21a8:	331a      	adds	r3, #26
    21aa:	e7e1      	b.n	2170 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    21ac:	07d8      	lsls	r0, r3, #31
    21ae:	d503      	bpl.n	21b8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    21b0:	2301      	movs	r3, #1
    21b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    21b4:	3312      	adds	r3, #18
    21b6:	e7db      	b.n	2170 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    21b8:	06d8      	lsls	r0, r3, #27
    21ba:	d503      	bpl.n	21c4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    21bc:	2310      	movs	r3, #16
    21be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    21c0:	3332      	adds	r3, #50	; 0x32
    21c2:	e7d5      	b.n	2170 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    21c4:	069b      	lsls	r3, r3, #26
    21c6:	d503      	bpl.n	21d0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    21c8:	2320      	movs	r3, #32
    21ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    21cc:	3321      	adds	r3, #33	; 0x21
    21ce:	e7cf      	b.n	2170 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    21d0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    21d2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    21d4:	2300      	movs	r3, #0
    21d6:	e7cb      	b.n	2170 <usart_read_wait+0x8>

000021d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    21da:	0080      	lsls	r0, r0, #2
    21dc:	4b62      	ldr	r3, [pc, #392]	; (2368 <_usart_interrupt_handler+0x190>)
    21de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    21e0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    21e2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    21e4:	2b00      	cmp	r3, #0
    21e6:	d1fc      	bne.n	21e2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    21e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    21ea:	7da6      	ldrb	r6, [r4, #22]
    21ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    21ee:	2330      	movs	r3, #48	; 0x30
    21f0:	5ceb      	ldrb	r3, [r5, r3]
    21f2:	2231      	movs	r2, #49	; 0x31
    21f4:	5caf      	ldrb	r7, [r5, r2]
    21f6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    21f8:	07f3      	lsls	r3, r6, #31
    21fa:	d522      	bpl.n	2242 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    21fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    21fe:	b29b      	uxth	r3, r3
    2200:	2b00      	cmp	r3, #0
    2202:	d01c      	beq.n	223e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2204:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2206:	7813      	ldrb	r3, [r2, #0]
    2208:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    220a:	1c51      	adds	r1, r2, #1
    220c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    220e:	7969      	ldrb	r1, [r5, #5]
    2210:	2901      	cmp	r1, #1
    2212:	d00e      	beq.n	2232 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2214:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2216:	05db      	lsls	r3, r3, #23
    2218:	0ddb      	lsrs	r3, r3, #23
    221a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    221c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    221e:	3b01      	subs	r3, #1
    2220:	b29b      	uxth	r3, r3
    2222:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2224:	2b00      	cmp	r3, #0
    2226:	d10c      	bne.n	2242 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2228:	3301      	adds	r3, #1
    222a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    222c:	3301      	adds	r3, #1
    222e:	75a3      	strb	r3, [r4, #22]
    2230:	e007      	b.n	2242 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2232:	7851      	ldrb	r1, [r2, #1]
    2234:	0209      	lsls	r1, r1, #8
    2236:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2238:	3202      	adds	r2, #2
    223a:	62aa      	str	r2, [r5, #40]	; 0x28
    223c:	e7eb      	b.n	2216 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    223e:	2301      	movs	r3, #1
    2240:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2242:	07b3      	lsls	r3, r6, #30
    2244:	d506      	bpl.n	2254 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2246:	2302      	movs	r3, #2
    2248:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    224a:	2200      	movs	r2, #0
    224c:	3331      	adds	r3, #49	; 0x31
    224e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2250:	07fb      	lsls	r3, r7, #31
    2252:	d41a      	bmi.n	228a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2254:	0773      	lsls	r3, r6, #29
    2256:	d565      	bpl.n	2324 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2258:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    225a:	b29b      	uxth	r3, r3
    225c:	2b00      	cmp	r3, #0
    225e:	d05f      	beq.n	2320 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2260:	8b63      	ldrh	r3, [r4, #26]
    2262:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2264:	071a      	lsls	r2, r3, #28
    2266:	d414      	bmi.n	2292 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2268:	223f      	movs	r2, #63	; 0x3f
    226a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    226c:	2b00      	cmp	r3, #0
    226e:	d034      	beq.n	22da <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2270:	079a      	lsls	r2, r3, #30
    2272:	d511      	bpl.n	2298 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2274:	221a      	movs	r2, #26
    2276:	2332      	movs	r3, #50	; 0x32
    2278:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    227a:	3b30      	subs	r3, #48	; 0x30
    227c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    227e:	077b      	lsls	r3, r7, #29
    2280:	d550      	bpl.n	2324 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2282:	0028      	movs	r0, r5
    2284:	696b      	ldr	r3, [r5, #20]
    2286:	4798      	blx	r3
    2288:	e04c      	b.n	2324 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    228a:	0028      	movs	r0, r5
    228c:	68eb      	ldr	r3, [r5, #12]
    228e:	4798      	blx	r3
    2290:	e7e0      	b.n	2254 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2292:	2237      	movs	r2, #55	; 0x37
    2294:	4013      	ands	r3, r2
    2296:	e7e9      	b.n	226c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2298:	075a      	lsls	r2, r3, #29
    229a:	d505      	bpl.n	22a8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    229c:	221e      	movs	r2, #30
    229e:	2332      	movs	r3, #50	; 0x32
    22a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    22a2:	3b2e      	subs	r3, #46	; 0x2e
    22a4:	8363      	strh	r3, [r4, #26]
    22a6:	e7ea      	b.n	227e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    22a8:	07da      	lsls	r2, r3, #31
    22aa:	d505      	bpl.n	22b8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    22ac:	2213      	movs	r2, #19
    22ae:	2332      	movs	r3, #50	; 0x32
    22b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    22b2:	3b31      	subs	r3, #49	; 0x31
    22b4:	8363      	strh	r3, [r4, #26]
    22b6:	e7e2      	b.n	227e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    22b8:	06da      	lsls	r2, r3, #27
    22ba:	d505      	bpl.n	22c8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    22bc:	2242      	movs	r2, #66	; 0x42
    22be:	2332      	movs	r3, #50	; 0x32
    22c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    22c2:	3b22      	subs	r3, #34	; 0x22
    22c4:	8363      	strh	r3, [r4, #26]
    22c6:	e7da      	b.n	227e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    22c8:	2220      	movs	r2, #32
    22ca:	421a      	tst	r2, r3
    22cc:	d0d7      	beq.n	227e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    22ce:	3221      	adds	r2, #33	; 0x21
    22d0:	2332      	movs	r3, #50	; 0x32
    22d2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    22d4:	3b12      	subs	r3, #18
    22d6:	8363      	strh	r3, [r4, #26]
    22d8:	e7d1      	b.n	227e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    22da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    22dc:	05db      	lsls	r3, r3, #23
    22de:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    22e0:	b2da      	uxtb	r2, r3
    22e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    22e4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    22e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    22e8:	1c51      	adds	r1, r2, #1
    22ea:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    22ec:	7969      	ldrb	r1, [r5, #5]
    22ee:	2901      	cmp	r1, #1
    22f0:	d010      	beq.n	2314 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    22f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    22f4:	3b01      	subs	r3, #1
    22f6:	b29b      	uxth	r3, r3
    22f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    22fa:	2b00      	cmp	r3, #0
    22fc:	d112      	bne.n	2324 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    22fe:	3304      	adds	r3, #4
    2300:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2302:	2200      	movs	r2, #0
    2304:	332e      	adds	r3, #46	; 0x2e
    2306:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2308:	07bb      	lsls	r3, r7, #30
    230a:	d50b      	bpl.n	2324 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    230c:	0028      	movs	r0, r5
    230e:	692b      	ldr	r3, [r5, #16]
    2310:	4798      	blx	r3
    2312:	e007      	b.n	2324 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2314:	0a1b      	lsrs	r3, r3, #8
    2316:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2318:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    231a:	3301      	adds	r3, #1
    231c:	626b      	str	r3, [r5, #36]	; 0x24
    231e:	e7e8      	b.n	22f2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2320:	2304      	movs	r3, #4
    2322:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2324:	06f3      	lsls	r3, r6, #27
    2326:	d504      	bpl.n	2332 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2328:	2310      	movs	r3, #16
    232a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    232c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    232e:	06fb      	lsls	r3, r7, #27
    2330:	d40e      	bmi.n	2350 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2332:	06b3      	lsls	r3, r6, #26
    2334:	d504      	bpl.n	2340 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2336:	2320      	movs	r3, #32
    2338:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    233a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    233c:	073b      	lsls	r3, r7, #28
    233e:	d40b      	bmi.n	2358 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2340:	0733      	lsls	r3, r6, #28
    2342:	d504      	bpl.n	234e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2344:	2308      	movs	r3, #8
    2346:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2348:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    234a:	06bb      	lsls	r3, r7, #26
    234c:	d408      	bmi.n	2360 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2350:	0028      	movs	r0, r5
    2352:	69eb      	ldr	r3, [r5, #28]
    2354:	4798      	blx	r3
    2356:	e7ec      	b.n	2332 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2358:	0028      	movs	r0, r5
    235a:	69ab      	ldr	r3, [r5, #24]
    235c:	4798      	blx	r3
    235e:	e7ef      	b.n	2340 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2360:	6a2b      	ldr	r3, [r5, #32]
    2362:	0028      	movs	r0, r5
    2364:	4798      	blx	r3
}
    2366:	e7f2      	b.n	234e <_usart_interrupt_handler+0x176>
    2368:	200003cc 	.word	0x200003cc

0000236c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    236c:	b510      	push	{r4, lr}
	switch (clock_source) {
    236e:	2808      	cmp	r0, #8
    2370:	d803      	bhi.n	237a <system_clock_source_get_hz+0xe>
    2372:	0080      	lsls	r0, r0, #2
    2374:	4b1b      	ldr	r3, [pc, #108]	; (23e4 <system_clock_source_get_hz+0x78>)
    2376:	581b      	ldr	r3, [r3, r0]
    2378:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    237a:	2000      	movs	r0, #0
    237c:	e030      	b.n	23e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    237e:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <system_clock_source_get_hz+0x7c>)
    2380:	6918      	ldr	r0, [r3, #16]
    2382:	e02d      	b.n	23e0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2384:	4b19      	ldr	r3, [pc, #100]	; (23ec <system_clock_source_get_hz+0x80>)
    2386:	6a1b      	ldr	r3, [r3, #32]
    2388:	059b      	lsls	r3, r3, #22
    238a:	0f9b      	lsrs	r3, r3, #30
    238c:	4818      	ldr	r0, [pc, #96]	; (23f0 <system_clock_source_get_hz+0x84>)
    238e:	40d8      	lsrs	r0, r3
    2390:	e026      	b.n	23e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2392:	4b15      	ldr	r3, [pc, #84]	; (23e8 <system_clock_source_get_hz+0x7c>)
    2394:	6958      	ldr	r0, [r3, #20]
    2396:	e023      	b.n	23e0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2398:	4b13      	ldr	r3, [pc, #76]	; (23e8 <system_clock_source_get_hz+0x7c>)
    239a:	681b      	ldr	r3, [r3, #0]
			return 0;
    239c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    239e:	079b      	lsls	r3, r3, #30
    23a0:	d51e      	bpl.n	23e0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23a2:	4912      	ldr	r1, [pc, #72]	; (23ec <system_clock_source_get_hz+0x80>)
    23a4:	2210      	movs	r2, #16
    23a6:	68cb      	ldr	r3, [r1, #12]
    23a8:	421a      	tst	r2, r3
    23aa:	d0fc      	beq.n	23a6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    23ac:	4b0e      	ldr	r3, [pc, #56]	; (23e8 <system_clock_source_get_hz+0x7c>)
    23ae:	681b      	ldr	r3, [r3, #0]
    23b0:	075b      	lsls	r3, r3, #29
    23b2:	d401      	bmi.n	23b8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    23b4:	480f      	ldr	r0, [pc, #60]	; (23f4 <system_clock_source_get_hz+0x88>)
    23b6:	e013      	b.n	23e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23b8:	2000      	movs	r0, #0
    23ba:	4b0f      	ldr	r3, [pc, #60]	; (23f8 <system_clock_source_get_hz+0x8c>)
    23bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    23be:	4b0a      	ldr	r3, [pc, #40]	; (23e8 <system_clock_source_get_hz+0x7c>)
    23c0:	689b      	ldr	r3, [r3, #8]
    23c2:	041b      	lsls	r3, r3, #16
    23c4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23c6:	4358      	muls	r0, r3
    23c8:	e00a      	b.n	23e0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    23ca:	2350      	movs	r3, #80	; 0x50
    23cc:	4a07      	ldr	r2, [pc, #28]	; (23ec <system_clock_source_get_hz+0x80>)
    23ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    23d0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    23d2:	075b      	lsls	r3, r3, #29
    23d4:	d504      	bpl.n	23e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    23d6:	4b04      	ldr	r3, [pc, #16]	; (23e8 <system_clock_source_get_hz+0x7c>)
    23d8:	68d8      	ldr	r0, [r3, #12]
    23da:	e001      	b.n	23e0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    23dc:	2080      	movs	r0, #128	; 0x80
    23de:	0200      	lsls	r0, r0, #8
	}
}
    23e0:	bd10      	pop	{r4, pc}
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	00007048 	.word	0x00007048
    23e8:	20000268 	.word	0x20000268
    23ec:	40000800 	.word	0x40000800
    23f0:	007a1200 	.word	0x007a1200
    23f4:	02dc6c00 	.word	0x02dc6c00
    23f8:	000029cd 	.word	0x000029cd

000023fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    23fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    23fe:	490c      	ldr	r1, [pc, #48]	; (2430 <system_clock_source_osc8m_set_config+0x34>)
    2400:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2402:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2404:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2406:	7840      	ldrb	r0, [r0, #1]
    2408:	2201      	movs	r2, #1
    240a:	4010      	ands	r0, r2
    240c:	0180      	lsls	r0, r0, #6
    240e:	2640      	movs	r6, #64	; 0x40
    2410:	43b3      	bics	r3, r6
    2412:	4303      	orrs	r3, r0
    2414:	402a      	ands	r2, r5
    2416:	01d2      	lsls	r2, r2, #7
    2418:	2080      	movs	r0, #128	; 0x80
    241a:	4383      	bics	r3, r0
    241c:	4313      	orrs	r3, r2
    241e:	2203      	movs	r2, #3
    2420:	4022      	ands	r2, r4
    2422:	0212      	lsls	r2, r2, #8
    2424:	4803      	ldr	r0, [pc, #12]	; (2434 <system_clock_source_osc8m_set_config+0x38>)
    2426:	4003      	ands	r3, r0
    2428:	4313      	orrs	r3, r2
    242a:	620b      	str	r3, [r1, #32]
}
    242c:	bd70      	pop	{r4, r5, r6, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	40000800 	.word	0x40000800
    2434:	fffffcff 	.word	0xfffffcff

00002438 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2438:	b5f0      	push	{r4, r5, r6, r7, lr}
    243a:	46de      	mov	lr, fp
    243c:	4657      	mov	r7, sl
    243e:	464e      	mov	r6, r9
    2440:	4645      	mov	r5, r8
    2442:	b5e0      	push	{r5, r6, r7, lr}
    2444:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2446:	4b26      	ldr	r3, [pc, #152]	; (24e0 <system_clock_source_xosc32k_set_config+0xa8>)
    2448:	469b      	mov	fp, r3
    244a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    244c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    244e:	7800      	ldrb	r0, [r0, #0]
    2450:	4242      	negs	r2, r0
    2452:	4142      	adcs	r2, r0
    2454:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2456:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2458:	78ca      	ldrb	r2, [r1, #3]
    245a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    245c:	790a      	ldrb	r2, [r1, #4]
    245e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2460:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2462:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2464:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2466:	688a      	ldr	r2, [r1, #8]
    2468:	491e      	ldr	r1, [pc, #120]	; (24e4 <system_clock_source_xosc32k_set_config+0xac>)
    246a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    246c:	2101      	movs	r1, #1
    246e:	464a      	mov	r2, r9
    2470:	0092      	lsls	r2, r2, #2
    2472:	4691      	mov	r9, r2
    2474:	2204      	movs	r2, #4
    2476:	4393      	bics	r3, r2
    2478:	464a      	mov	r2, r9
    247a:	4313      	orrs	r3, r2
    247c:	4642      	mov	r2, r8
    247e:	400a      	ands	r2, r1
    2480:	00d2      	lsls	r2, r2, #3
    2482:	4690      	mov	r8, r2
    2484:	2208      	movs	r2, #8
    2486:	4393      	bics	r3, r2
    2488:	4642      	mov	r2, r8
    248a:	4313      	orrs	r3, r2
    248c:	4662      	mov	r2, ip
    248e:	400a      	ands	r2, r1
    2490:	0112      	lsls	r2, r2, #4
    2492:	4694      	mov	ip, r2
    2494:	2210      	movs	r2, #16
    2496:	4393      	bics	r3, r2
    2498:	4662      	mov	r2, ip
    249a:	4313      	orrs	r3, r2
    249c:	4008      	ands	r0, r1
    249e:	0140      	lsls	r0, r0, #5
    24a0:	2220      	movs	r2, #32
    24a2:	4393      	bics	r3, r2
    24a4:	4303      	orrs	r3, r0
    24a6:	400f      	ands	r7, r1
    24a8:	01bf      	lsls	r7, r7, #6
    24aa:	2040      	movs	r0, #64	; 0x40
    24ac:	4383      	bics	r3, r0
    24ae:	433b      	orrs	r3, r7
    24b0:	400e      	ands	r6, r1
    24b2:	01f6      	lsls	r6, r6, #7
    24b4:	3040      	adds	r0, #64	; 0x40
    24b6:	4383      	bics	r3, r0
    24b8:	4333      	orrs	r3, r6
    24ba:	3879      	subs	r0, #121	; 0x79
    24bc:	4005      	ands	r5, r0
    24be:	022d      	lsls	r5, r5, #8
    24c0:	4809      	ldr	r0, [pc, #36]	; (24e8 <system_clock_source_xosc32k_set_config+0xb0>)
    24c2:	4003      	ands	r3, r0
    24c4:	432b      	orrs	r3, r5
    24c6:	4021      	ands	r1, r4
    24c8:	0309      	lsls	r1, r1, #12
    24ca:	4808      	ldr	r0, [pc, #32]	; (24ec <system_clock_source_xosc32k_set_config+0xb4>)
    24cc:	4003      	ands	r3, r0
    24ce:	430b      	orrs	r3, r1
    24d0:	465a      	mov	r2, fp
    24d2:	8293      	strh	r3, [r2, #20]
}
    24d4:	bc3c      	pop	{r2, r3, r4, r5}
    24d6:	4690      	mov	r8, r2
    24d8:	4699      	mov	r9, r3
    24da:	46a2      	mov	sl, r4
    24dc:	46ab      	mov	fp, r5
    24de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24e0:	40000800 	.word	0x40000800
    24e4:	20000268 	.word	0x20000268
    24e8:	fffff8ff 	.word	0xfffff8ff
    24ec:	ffffefff 	.word	0xffffefff

000024f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    24f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    24f2:	7a03      	ldrb	r3, [r0, #8]
    24f4:	069b      	lsls	r3, r3, #26
    24f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    24f8:	8942      	ldrh	r2, [r0, #10]
    24fa:	0592      	lsls	r2, r2, #22
    24fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    24fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2500:	4918      	ldr	r1, [pc, #96]	; (2564 <system_clock_source_dfll_set_config+0x74>)
    2502:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2504:	7983      	ldrb	r3, [r0, #6]
    2506:	79c2      	ldrb	r2, [r0, #7]
    2508:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    250a:	8842      	ldrh	r2, [r0, #2]
    250c:	8884      	ldrh	r4, [r0, #4]
    250e:	4322      	orrs	r2, r4
    2510:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2512:	7842      	ldrb	r2, [r0, #1]
    2514:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2516:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2518:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    251a:	7803      	ldrb	r3, [r0, #0]
    251c:	2b04      	cmp	r3, #4
    251e:	d011      	beq.n	2544 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2520:	2b20      	cmp	r3, #32
    2522:	d10e      	bne.n	2542 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2524:	7b03      	ldrb	r3, [r0, #12]
    2526:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2528:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    252a:	4313      	orrs	r3, r2
    252c:	89c2      	ldrh	r2, [r0, #14]
    252e:	0412      	lsls	r2, r2, #16
    2530:	490d      	ldr	r1, [pc, #52]	; (2568 <system_clock_source_dfll_set_config+0x78>)
    2532:	400a      	ands	r2, r1
    2534:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2536:	4a0b      	ldr	r2, [pc, #44]	; (2564 <system_clock_source_dfll_set_config+0x74>)
    2538:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    253a:	6811      	ldr	r1, [r2, #0]
    253c:	4b0b      	ldr	r3, [pc, #44]	; (256c <system_clock_source_dfll_set_config+0x7c>)
    253e:	430b      	orrs	r3, r1
    2540:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2542:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2544:	7b03      	ldrb	r3, [r0, #12]
    2546:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2548:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    254a:	4313      	orrs	r3, r2
    254c:	89c2      	ldrh	r2, [r0, #14]
    254e:	0412      	lsls	r2, r2, #16
    2550:	4905      	ldr	r1, [pc, #20]	; (2568 <system_clock_source_dfll_set_config+0x78>)
    2552:	400a      	ands	r2, r1
    2554:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2556:	4a03      	ldr	r2, [pc, #12]	; (2564 <system_clock_source_dfll_set_config+0x74>)
    2558:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    255a:	6813      	ldr	r3, [r2, #0]
    255c:	2104      	movs	r1, #4
    255e:	430b      	orrs	r3, r1
    2560:	6013      	str	r3, [r2, #0]
    2562:	e7ee      	b.n	2542 <system_clock_source_dfll_set_config+0x52>
    2564:	20000268 	.word	0x20000268
    2568:	03ff0000 	.word	0x03ff0000
    256c:	00000424 	.word	0x00000424

00002570 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2570:	2808      	cmp	r0, #8
    2572:	d803      	bhi.n	257c <system_clock_source_enable+0xc>
    2574:	0080      	lsls	r0, r0, #2
    2576:	4b25      	ldr	r3, [pc, #148]	; (260c <system_clock_source_enable+0x9c>)
    2578:	581b      	ldr	r3, [r3, r0]
    257a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    257c:	2017      	movs	r0, #23
    257e:	e044      	b.n	260a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2580:	4a23      	ldr	r2, [pc, #140]	; (2610 <system_clock_source_enable+0xa0>)
    2582:	6a13      	ldr	r3, [r2, #32]
    2584:	2102      	movs	r1, #2
    2586:	430b      	orrs	r3, r1
    2588:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    258a:	2000      	movs	r0, #0
    258c:	e03d      	b.n	260a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    258e:	4a20      	ldr	r2, [pc, #128]	; (2610 <system_clock_source_enable+0xa0>)
    2590:	6993      	ldr	r3, [r2, #24]
    2592:	2102      	movs	r1, #2
    2594:	430b      	orrs	r3, r1
    2596:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2598:	2000      	movs	r0, #0
		break;
    259a:	e036      	b.n	260a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    259c:	4a1c      	ldr	r2, [pc, #112]	; (2610 <system_clock_source_enable+0xa0>)
    259e:	8a13      	ldrh	r3, [r2, #16]
    25a0:	2102      	movs	r1, #2
    25a2:	430b      	orrs	r3, r1
    25a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    25a6:	2000      	movs	r0, #0
		break;
    25a8:	e02f      	b.n	260a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    25aa:	4a19      	ldr	r2, [pc, #100]	; (2610 <system_clock_source_enable+0xa0>)
    25ac:	8a93      	ldrh	r3, [r2, #20]
    25ae:	2102      	movs	r1, #2
    25b0:	430b      	orrs	r3, r1
    25b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    25b4:	2000      	movs	r0, #0
		break;
    25b6:	e028      	b.n	260a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    25b8:	4916      	ldr	r1, [pc, #88]	; (2614 <system_clock_source_enable+0xa4>)
    25ba:	680b      	ldr	r3, [r1, #0]
    25bc:	2202      	movs	r2, #2
    25be:	4313      	orrs	r3, r2
    25c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    25c2:	4b13      	ldr	r3, [pc, #76]	; (2610 <system_clock_source_enable+0xa0>)
    25c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25c6:	0019      	movs	r1, r3
    25c8:	320e      	adds	r2, #14
    25ca:	68cb      	ldr	r3, [r1, #12]
    25cc:	421a      	tst	r2, r3
    25ce:	d0fc      	beq.n	25ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    25d0:	4a10      	ldr	r2, [pc, #64]	; (2614 <system_clock_source_enable+0xa4>)
    25d2:	6891      	ldr	r1, [r2, #8]
    25d4:	4b0e      	ldr	r3, [pc, #56]	; (2610 <system_clock_source_enable+0xa0>)
    25d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    25d8:	6852      	ldr	r2, [r2, #4]
    25da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    25dc:	2200      	movs	r2, #0
    25de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25e0:	0019      	movs	r1, r3
    25e2:	3210      	adds	r2, #16
    25e4:	68cb      	ldr	r3, [r1, #12]
    25e6:	421a      	tst	r2, r3
    25e8:	d0fc      	beq.n	25e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    25ea:	4b0a      	ldr	r3, [pc, #40]	; (2614 <system_clock_source_enable+0xa4>)
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	b29b      	uxth	r3, r3
    25f0:	4a07      	ldr	r2, [pc, #28]	; (2610 <system_clock_source_enable+0xa0>)
    25f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    25f4:	2000      	movs	r0, #0
    25f6:	e008      	b.n	260a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    25f8:	4905      	ldr	r1, [pc, #20]	; (2610 <system_clock_source_enable+0xa0>)
    25fa:	2244      	movs	r2, #68	; 0x44
    25fc:	5c8b      	ldrb	r3, [r1, r2]
    25fe:	2002      	movs	r0, #2
    2600:	4303      	orrs	r3, r0
    2602:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2604:	2000      	movs	r0, #0
		break;
    2606:	e000      	b.n	260a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2608:	2000      	movs	r0, #0
}
    260a:	4770      	bx	lr
    260c:	0000706c 	.word	0x0000706c
    2610:	40000800 	.word	0x40000800
    2614:	20000268 	.word	0x20000268

00002618 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2618:	b5f0      	push	{r4, r5, r6, r7, lr}
    261a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    261c:	22c2      	movs	r2, #194	; 0xc2
    261e:	00d2      	lsls	r2, r2, #3
    2620:	4b47      	ldr	r3, [pc, #284]	; (2740 <system_clock_init+0x128>)
    2622:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2624:	4a47      	ldr	r2, [pc, #284]	; (2744 <system_clock_init+0x12c>)
    2626:	6853      	ldr	r3, [r2, #4]
    2628:	211e      	movs	r1, #30
    262a:	438b      	bics	r3, r1
    262c:	391a      	subs	r1, #26
    262e:	430b      	orrs	r3, r1
    2630:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2632:	2202      	movs	r2, #2
    2634:	ab01      	add	r3, sp, #4
    2636:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2638:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    263a:	4d43      	ldr	r5, [pc, #268]	; (2748 <system_clock_init+0x130>)
    263c:	b2e0      	uxtb	r0, r4
    263e:	a901      	add	r1, sp, #4
    2640:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2642:	3401      	adds	r4, #1
    2644:	2c25      	cmp	r4, #37	; 0x25
    2646:	d1f9      	bne.n	263c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2648:	a80a      	add	r0, sp, #40	; 0x28
    264a:	2300      	movs	r3, #0
    264c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    264e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2650:	2280      	movs	r2, #128	; 0x80
    2652:	0212      	lsls	r2, r2, #8
    2654:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2656:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2658:	2201      	movs	r2, #1
    265a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    265c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    265e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2660:	3202      	adds	r2, #2
    2662:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2664:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2666:	4b39      	ldr	r3, [pc, #228]	; (274c <system_clock_init+0x134>)
    2668:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    266a:	2005      	movs	r0, #5
    266c:	4b38      	ldr	r3, [pc, #224]	; (2750 <system_clock_init+0x138>)
    266e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2670:	4933      	ldr	r1, [pc, #204]	; (2740 <system_clock_init+0x128>)
    2672:	2202      	movs	r2, #2
    2674:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2676:	421a      	tst	r2, r3
    2678:	d0fc      	beq.n	2674 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    267a:	4a31      	ldr	r2, [pc, #196]	; (2740 <system_clock_init+0x128>)
    267c:	8a93      	ldrh	r3, [r2, #20]
    267e:	2180      	movs	r1, #128	; 0x80
    2680:	430b      	orrs	r3, r1
    2682:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2684:	ab05      	add	r3, sp, #20
    2686:	2100      	movs	r1, #0
    2688:	2200      	movs	r2, #0
    268a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    268c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    268e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2690:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2692:	313f      	adds	r1, #63	; 0x3f
    2694:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2696:	393b      	subs	r1, #59	; 0x3b
    2698:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    269a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    269c:	4b2d      	ldr	r3, [pc, #180]	; (2754 <system_clock_init+0x13c>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    26a2:	2b3f      	cmp	r3, #63	; 0x3f
    26a4:	d04a      	beq.n	273c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    26a6:	a805      	add	r0, sp, #20
    26a8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    26aa:	4b2b      	ldr	r3, [pc, #172]	; (2758 <system_clock_init+0x140>)
    26ac:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    26ae:	2307      	movs	r3, #7
    26b0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    26b2:	3338      	adds	r3, #56	; 0x38
    26b4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    26b6:	4b29      	ldr	r3, [pc, #164]	; (275c <system_clock_init+0x144>)
    26b8:	4798      	blx	r3
	config->run_in_standby  = false;
    26ba:	a804      	add	r0, sp, #16
    26bc:	2500      	movs	r5, #0
    26be:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    26c0:	2601      	movs	r6, #1
    26c2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    26c4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    26c6:	4b26      	ldr	r3, [pc, #152]	; (2760 <system_clock_init+0x148>)
    26c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    26ca:	2006      	movs	r0, #6
    26cc:	4f20      	ldr	r7, [pc, #128]	; (2750 <system_clock_init+0x138>)
    26ce:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    26d0:	4b24      	ldr	r3, [pc, #144]	; (2764 <system_clock_init+0x14c>)
    26d2:	4798      	blx	r3
	config->division_factor    = 1;
    26d4:	ac01      	add	r4, sp, #4
    26d6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    26d8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    26da:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    26dc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    26de:	2305      	movs	r3, #5
    26e0:	7023      	strb	r3, [r4, #0]
    26e2:	0021      	movs	r1, r4
    26e4:	2001      	movs	r0, #1
    26e6:	4b20      	ldr	r3, [pc, #128]	; (2768 <system_clock_init+0x150>)
    26e8:	4798      	blx	r3
    26ea:	2001      	movs	r0, #1
    26ec:	4b1f      	ldr	r3, [pc, #124]	; (276c <system_clock_init+0x154>)
    26ee:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    26f0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    26f2:	0021      	movs	r1, r4
    26f4:	2000      	movs	r0, #0
    26f6:	4b14      	ldr	r3, [pc, #80]	; (2748 <system_clock_init+0x130>)
    26f8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    26fa:	2000      	movs	r0, #0
    26fc:	4b1c      	ldr	r3, [pc, #112]	; (2770 <system_clock_init+0x158>)
    26fe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2700:	2007      	movs	r0, #7
    2702:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2704:	490e      	ldr	r1, [pc, #56]	; (2740 <system_clock_init+0x128>)
    2706:	22d0      	movs	r2, #208	; 0xd0
    2708:	68cb      	ldr	r3, [r1, #12]
    270a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    270c:	2bd0      	cmp	r3, #208	; 0xd0
    270e:	d1fb      	bne.n	2708 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2710:	4a18      	ldr	r2, [pc, #96]	; (2774 <system_clock_init+0x15c>)
    2712:	2300      	movs	r3, #0
    2714:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2716:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2718:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    271a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    271c:	a901      	add	r1, sp, #4
    271e:	2201      	movs	r2, #1
    2720:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2722:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2724:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2726:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2728:	3307      	adds	r3, #7
    272a:	700b      	strb	r3, [r1, #0]
    272c:	2000      	movs	r0, #0
    272e:	4b0e      	ldr	r3, [pc, #56]	; (2768 <system_clock_init+0x150>)
    2730:	4798      	blx	r3
    2732:	2000      	movs	r0, #0
    2734:	4b0d      	ldr	r3, [pc, #52]	; (276c <system_clock_init+0x154>)
    2736:	4798      	blx	r3
#endif
}
    2738:	b00f      	add	sp, #60	; 0x3c
    273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    273c:	3b20      	subs	r3, #32
    273e:	e7b2      	b.n	26a6 <system_clock_init+0x8e>
    2740:	40000800 	.word	0x40000800
    2744:	41004000 	.word	0x41004000
    2748:	000029b1 	.word	0x000029b1
    274c:	00002439 	.word	0x00002439
    2750:	00002571 	.word	0x00002571
    2754:	00806024 	.word	0x00806024
    2758:	000005b9 	.word	0x000005b9
    275c:	000024f1 	.word	0x000024f1
    2760:	000023fd 	.word	0x000023fd
    2764:	00002779 	.word	0x00002779
    2768:	0000279d 	.word	0x0000279d
    276c:	00002855 	.word	0x00002855
    2770:	00002925 	.word	0x00002925
    2774:	40000400 	.word	0x40000400

00002778 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2778:	4a06      	ldr	r2, [pc, #24]	; (2794 <system_gclk_init+0x1c>)
    277a:	6993      	ldr	r3, [r2, #24]
    277c:	2108      	movs	r1, #8
    277e:	430b      	orrs	r3, r1
    2780:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2782:	2201      	movs	r2, #1
    2784:	4b04      	ldr	r3, [pc, #16]	; (2798 <system_gclk_init+0x20>)
    2786:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2788:	0019      	movs	r1, r3
    278a:	780b      	ldrb	r3, [r1, #0]
    278c:	4213      	tst	r3, r2
    278e:	d1fc      	bne.n	278a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2790:	4770      	bx	lr
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	40000400 	.word	0x40000400
    2798:	40000c00 	.word	0x40000c00

0000279c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    279c:	b570      	push	{r4, r5, r6, lr}
    279e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    27a0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    27a2:	780d      	ldrb	r5, [r1, #0]
    27a4:	022d      	lsls	r5, r5, #8
    27a6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    27a8:	784b      	ldrb	r3, [r1, #1]
    27aa:	2b00      	cmp	r3, #0
    27ac:	d002      	beq.n	27b4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    27ae:	2380      	movs	r3, #128	; 0x80
    27b0:	02db      	lsls	r3, r3, #11
    27b2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    27b4:	7a4b      	ldrb	r3, [r1, #9]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d002      	beq.n	27c0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    27ba:	2380      	movs	r3, #128	; 0x80
    27bc:	031b      	lsls	r3, r3, #12
    27be:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    27c0:	6848      	ldr	r0, [r1, #4]
    27c2:	2801      	cmp	r0, #1
    27c4:	d910      	bls.n	27e8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    27c6:	1e43      	subs	r3, r0, #1
    27c8:	4218      	tst	r0, r3
    27ca:	d134      	bne.n	2836 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    27cc:	2802      	cmp	r0, #2
    27ce:	d930      	bls.n	2832 <system_gclk_gen_set_config+0x96>
    27d0:	2302      	movs	r3, #2
    27d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    27d4:	3201      	adds	r2, #1
						mask <<= 1) {
    27d6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    27d8:	4298      	cmp	r0, r3
    27da:	d8fb      	bhi.n	27d4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    27dc:	0212      	lsls	r2, r2, #8
    27de:	4332      	orrs	r2, r6
    27e0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    27e2:	2380      	movs	r3, #128	; 0x80
    27e4:	035b      	lsls	r3, r3, #13
    27e6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    27e8:	7a0b      	ldrb	r3, [r1, #8]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d002      	beq.n	27f4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	039b      	lsls	r3, r3, #14
    27f2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27f4:	4a13      	ldr	r2, [pc, #76]	; (2844 <system_gclk_gen_set_config+0xa8>)
    27f6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    27f8:	b25b      	sxtb	r3, r3
    27fa:	2b00      	cmp	r3, #0
    27fc:	dbfb      	blt.n	27f6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    27fe:	4b12      	ldr	r3, [pc, #72]	; (2848 <system_gclk_gen_set_config+0xac>)
    2800:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2802:	4b12      	ldr	r3, [pc, #72]	; (284c <system_gclk_gen_set_config+0xb0>)
    2804:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2806:	4a0f      	ldr	r2, [pc, #60]	; (2844 <system_gclk_gen_set_config+0xa8>)
    2808:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    280a:	b25b      	sxtb	r3, r3
    280c:	2b00      	cmp	r3, #0
    280e:	dbfb      	blt.n	2808 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2810:	4b0c      	ldr	r3, [pc, #48]	; (2844 <system_gclk_gen_set_config+0xa8>)
    2812:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2814:	001a      	movs	r2, r3
    2816:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2818:	b25b      	sxtb	r3, r3
    281a:	2b00      	cmp	r3, #0
    281c:	dbfb      	blt.n	2816 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    281e:	4a09      	ldr	r2, [pc, #36]	; (2844 <system_gclk_gen_set_config+0xa8>)
    2820:	6853      	ldr	r3, [r2, #4]
    2822:	2180      	movs	r1, #128	; 0x80
    2824:	0249      	lsls	r1, r1, #9
    2826:	400b      	ands	r3, r1
    2828:	431d      	orrs	r5, r3
    282a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    282c:	4b08      	ldr	r3, [pc, #32]	; (2850 <system_gclk_gen_set_config+0xb4>)
    282e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2830:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2832:	2200      	movs	r2, #0
    2834:	e7d2      	b.n	27dc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2836:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2838:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    283a:	2380      	movs	r3, #128	; 0x80
    283c:	029b      	lsls	r3, r3, #10
    283e:	431d      	orrs	r5, r3
    2840:	e7d2      	b.n	27e8 <system_gclk_gen_set_config+0x4c>
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	40000c00 	.word	0x40000c00
    2848:	00001811 	.word	0x00001811
    284c:	40000c08 	.word	0x40000c08
    2850:	00001851 	.word	0x00001851

00002854 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2854:	b510      	push	{r4, lr}
    2856:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2858:	4a0b      	ldr	r2, [pc, #44]	; (2888 <system_gclk_gen_enable+0x34>)
    285a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    285c:	b25b      	sxtb	r3, r3
    285e:	2b00      	cmp	r3, #0
    2860:	dbfb      	blt.n	285a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2862:	4b0a      	ldr	r3, [pc, #40]	; (288c <system_gclk_gen_enable+0x38>)
    2864:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2866:	4b0a      	ldr	r3, [pc, #40]	; (2890 <system_gclk_gen_enable+0x3c>)
    2868:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    286a:	4a07      	ldr	r2, [pc, #28]	; (2888 <system_gclk_gen_enable+0x34>)
    286c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    286e:	b25b      	sxtb	r3, r3
    2870:	2b00      	cmp	r3, #0
    2872:	dbfb      	blt.n	286c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2874:	4a04      	ldr	r2, [pc, #16]	; (2888 <system_gclk_gen_enable+0x34>)
    2876:	6851      	ldr	r1, [r2, #4]
    2878:	2380      	movs	r3, #128	; 0x80
    287a:	025b      	lsls	r3, r3, #9
    287c:	430b      	orrs	r3, r1
    287e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2880:	4b04      	ldr	r3, [pc, #16]	; (2894 <system_gclk_gen_enable+0x40>)
    2882:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2884:	bd10      	pop	{r4, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	40000c00 	.word	0x40000c00
    288c:	00001811 	.word	0x00001811
    2890:	40000c04 	.word	0x40000c04
    2894:	00001851 	.word	0x00001851

00002898 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2898:	b570      	push	{r4, r5, r6, lr}
    289a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    289c:	4a1a      	ldr	r2, [pc, #104]	; (2908 <system_gclk_gen_get_hz+0x70>)
    289e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28a0:	b25b      	sxtb	r3, r3
    28a2:	2b00      	cmp	r3, #0
    28a4:	dbfb      	blt.n	289e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    28a6:	4b19      	ldr	r3, [pc, #100]	; (290c <system_gclk_gen_get_hz+0x74>)
    28a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    28aa:	4b19      	ldr	r3, [pc, #100]	; (2910 <system_gclk_gen_get_hz+0x78>)
    28ac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28ae:	4a16      	ldr	r2, [pc, #88]	; (2908 <system_gclk_gen_get_hz+0x70>)
    28b0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28b2:	b25b      	sxtb	r3, r3
    28b4:	2b00      	cmp	r3, #0
    28b6:	dbfb      	blt.n	28b0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    28b8:	4e13      	ldr	r6, [pc, #76]	; (2908 <system_gclk_gen_get_hz+0x70>)
    28ba:	6870      	ldr	r0, [r6, #4]
    28bc:	04c0      	lsls	r0, r0, #19
    28be:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    28c0:	4b14      	ldr	r3, [pc, #80]	; (2914 <system_gclk_gen_get_hz+0x7c>)
    28c2:	4798      	blx	r3
    28c4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    28c6:	4b12      	ldr	r3, [pc, #72]	; (2910 <system_gclk_gen_get_hz+0x78>)
    28c8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    28ca:	6876      	ldr	r6, [r6, #4]
    28cc:	02f6      	lsls	r6, r6, #11
    28ce:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    28d0:	4b11      	ldr	r3, [pc, #68]	; (2918 <system_gclk_gen_get_hz+0x80>)
    28d2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28d4:	4a0c      	ldr	r2, [pc, #48]	; (2908 <system_gclk_gen_get_hz+0x70>)
    28d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28d8:	b25b      	sxtb	r3, r3
    28da:	2b00      	cmp	r3, #0
    28dc:	dbfb      	blt.n	28d6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    28de:	4b0a      	ldr	r3, [pc, #40]	; (2908 <system_gclk_gen_get_hz+0x70>)
    28e0:	689c      	ldr	r4, [r3, #8]
    28e2:	0224      	lsls	r4, r4, #8
    28e4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    28e6:	4b0d      	ldr	r3, [pc, #52]	; (291c <system_gclk_gen_get_hz+0x84>)
    28e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    28ea:	2e00      	cmp	r6, #0
    28ec:	d107      	bne.n	28fe <system_gclk_gen_get_hz+0x66>
    28ee:	2c01      	cmp	r4, #1
    28f0:	d907      	bls.n	2902 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    28f2:	0021      	movs	r1, r4
    28f4:	0028      	movs	r0, r5
    28f6:	4b0a      	ldr	r3, [pc, #40]	; (2920 <system_gclk_gen_get_hz+0x88>)
    28f8:	4798      	blx	r3
    28fa:	0005      	movs	r5, r0
    28fc:	e001      	b.n	2902 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    28fe:	3401      	adds	r4, #1
    2900:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2902:	0028      	movs	r0, r5
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	40000c00 	.word	0x40000c00
    290c:	00001811 	.word	0x00001811
    2910:	40000c04 	.word	0x40000c04
    2914:	0000236d 	.word	0x0000236d
    2918:	40000c08 	.word	0x40000c08
    291c:	00001851 	.word	0x00001851
    2920:	00002f85 	.word	0x00002f85

00002924 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2924:	b510      	push	{r4, lr}
    2926:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2928:	4b06      	ldr	r3, [pc, #24]	; (2944 <system_gclk_chan_enable+0x20>)
    292a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    292c:	4b06      	ldr	r3, [pc, #24]	; (2948 <system_gclk_chan_enable+0x24>)
    292e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2930:	4a06      	ldr	r2, [pc, #24]	; (294c <system_gclk_chan_enable+0x28>)
    2932:	8853      	ldrh	r3, [r2, #2]
    2934:	2180      	movs	r1, #128	; 0x80
    2936:	01c9      	lsls	r1, r1, #7
    2938:	430b      	orrs	r3, r1
    293a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    293c:	4b04      	ldr	r3, [pc, #16]	; (2950 <system_gclk_chan_enable+0x2c>)
    293e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2940:	bd10      	pop	{r4, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	00001811 	.word	0x00001811
    2948:	40000c02 	.word	0x40000c02
    294c:	40000c00 	.word	0x40000c00
    2950:	00001851 	.word	0x00001851

00002954 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2954:	b510      	push	{r4, lr}
    2956:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2958:	4b0f      	ldr	r3, [pc, #60]	; (2998 <system_gclk_chan_disable+0x44>)
    295a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    295c:	4b0f      	ldr	r3, [pc, #60]	; (299c <system_gclk_chan_disable+0x48>)
    295e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2960:	4a0f      	ldr	r2, [pc, #60]	; (29a0 <system_gclk_chan_disable+0x4c>)
    2962:	8853      	ldrh	r3, [r2, #2]
    2964:	051b      	lsls	r3, r3, #20
    2966:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2968:	8853      	ldrh	r3, [r2, #2]
    296a:	490e      	ldr	r1, [pc, #56]	; (29a4 <system_gclk_chan_disable+0x50>)
    296c:	400b      	ands	r3, r1
    296e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2970:	8853      	ldrh	r3, [r2, #2]
    2972:	490d      	ldr	r1, [pc, #52]	; (29a8 <system_gclk_chan_disable+0x54>)
    2974:	400b      	ands	r3, r1
    2976:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2978:	0011      	movs	r1, r2
    297a:	2280      	movs	r2, #128	; 0x80
    297c:	01d2      	lsls	r2, r2, #7
    297e:	884b      	ldrh	r3, [r1, #2]
    2980:	4213      	tst	r3, r2
    2982:	d1fc      	bne.n	297e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2984:	4906      	ldr	r1, [pc, #24]	; (29a0 <system_gclk_chan_disable+0x4c>)
    2986:	884a      	ldrh	r2, [r1, #2]
    2988:	0203      	lsls	r3, r0, #8
    298a:	4806      	ldr	r0, [pc, #24]	; (29a4 <system_gclk_chan_disable+0x50>)
    298c:	4002      	ands	r2, r0
    298e:	4313      	orrs	r3, r2
    2990:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2992:	4b06      	ldr	r3, [pc, #24]	; (29ac <system_gclk_chan_disable+0x58>)
    2994:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2996:	bd10      	pop	{r4, pc}
    2998:	00001811 	.word	0x00001811
    299c:	40000c02 	.word	0x40000c02
    29a0:	40000c00 	.word	0x40000c00
    29a4:	fffff0ff 	.word	0xfffff0ff
    29a8:	ffffbfff 	.word	0xffffbfff
    29ac:	00001851 	.word	0x00001851

000029b0 <system_gclk_chan_set_config>:
{
    29b0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    29b2:	780c      	ldrb	r4, [r1, #0]
    29b4:	0224      	lsls	r4, r4, #8
    29b6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    29b8:	4b02      	ldr	r3, [pc, #8]	; (29c4 <system_gclk_chan_set_config+0x14>)
    29ba:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    29bc:	b2a4      	uxth	r4, r4
    29be:	4b02      	ldr	r3, [pc, #8]	; (29c8 <system_gclk_chan_set_config+0x18>)
    29c0:	805c      	strh	r4, [r3, #2]
}
    29c2:	bd10      	pop	{r4, pc}
    29c4:	00002955 	.word	0x00002955
    29c8:	40000c00 	.word	0x40000c00

000029cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    29cc:	b510      	push	{r4, lr}
    29ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    29d0:	4b06      	ldr	r3, [pc, #24]	; (29ec <system_gclk_chan_get_hz+0x20>)
    29d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    29d4:	4b06      	ldr	r3, [pc, #24]	; (29f0 <system_gclk_chan_get_hz+0x24>)
    29d6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    29d8:	4b06      	ldr	r3, [pc, #24]	; (29f4 <system_gclk_chan_get_hz+0x28>)
    29da:	885c      	ldrh	r4, [r3, #2]
    29dc:	0524      	lsls	r4, r4, #20
    29de:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    29e0:	4b05      	ldr	r3, [pc, #20]	; (29f8 <system_gclk_chan_get_hz+0x2c>)
    29e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    29e4:	0020      	movs	r0, r4
    29e6:	4b05      	ldr	r3, [pc, #20]	; (29fc <system_gclk_chan_get_hz+0x30>)
    29e8:	4798      	blx	r3
}
    29ea:	bd10      	pop	{r4, pc}
    29ec:	00001811 	.word	0x00001811
    29f0:	40000c02 	.word	0x40000c02
    29f4:	40000c00 	.word	0x40000c00
    29f8:	00001851 	.word	0x00001851
    29fc:	00002899 	.word	0x00002899

00002a00 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2a00:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2a02:	78d3      	ldrb	r3, [r2, #3]
    2a04:	2b00      	cmp	r3, #0
    2a06:	d135      	bne.n	2a74 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2a08:	7813      	ldrb	r3, [r2, #0]
    2a0a:	2b80      	cmp	r3, #128	; 0x80
    2a0c:	d029      	beq.n	2a62 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2a0e:	061b      	lsls	r3, r3, #24
    2a10:	2480      	movs	r4, #128	; 0x80
    2a12:	0264      	lsls	r4, r4, #9
    2a14:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2a16:	7854      	ldrb	r4, [r2, #1]
    2a18:	2502      	movs	r5, #2
    2a1a:	43ac      	bics	r4, r5
    2a1c:	d106      	bne.n	2a2c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2a1e:	7894      	ldrb	r4, [r2, #2]
    2a20:	2c00      	cmp	r4, #0
    2a22:	d120      	bne.n	2a66 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2a24:	2480      	movs	r4, #128	; 0x80
    2a26:	02a4      	lsls	r4, r4, #10
    2a28:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2a2a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a2c:	7854      	ldrb	r4, [r2, #1]
    2a2e:	3c01      	subs	r4, #1
    2a30:	2c01      	cmp	r4, #1
    2a32:	d91c      	bls.n	2a6e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a34:	040d      	lsls	r5, r1, #16
    2a36:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a38:	24a0      	movs	r4, #160	; 0xa0
    2a3a:	05e4      	lsls	r4, r4, #23
    2a3c:	432c      	orrs	r4, r5
    2a3e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a40:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a42:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a44:	24d0      	movs	r4, #208	; 0xd0
    2a46:	0624      	lsls	r4, r4, #24
    2a48:	432c      	orrs	r4, r5
    2a4a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a4c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2a4e:	78d4      	ldrb	r4, [r2, #3]
    2a50:	2c00      	cmp	r4, #0
    2a52:	d122      	bne.n	2a9a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2a54:	035b      	lsls	r3, r3, #13
    2a56:	d51c      	bpl.n	2a92 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2a58:	7893      	ldrb	r3, [r2, #2]
    2a5a:	2b01      	cmp	r3, #1
    2a5c:	d01e      	beq.n	2a9c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2a5e:	6141      	str	r1, [r0, #20]
    2a60:	e017      	b.n	2a92 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2a62:	2300      	movs	r3, #0
    2a64:	e7d7      	b.n	2a16 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2a66:	24c0      	movs	r4, #192	; 0xc0
    2a68:	02e4      	lsls	r4, r4, #11
    2a6a:	4323      	orrs	r3, r4
    2a6c:	e7dd      	b.n	2a2a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2a6e:	4c0d      	ldr	r4, [pc, #52]	; (2aa4 <_system_pinmux_config+0xa4>)
    2a70:	4023      	ands	r3, r4
    2a72:	e7df      	b.n	2a34 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2a74:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a76:	040c      	lsls	r4, r1, #16
    2a78:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a7a:	23a0      	movs	r3, #160	; 0xa0
    2a7c:	05db      	lsls	r3, r3, #23
    2a7e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a80:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a82:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a84:	23d0      	movs	r3, #208	; 0xd0
    2a86:	061b      	lsls	r3, r3, #24
    2a88:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a8a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2a8c:	78d3      	ldrb	r3, [r2, #3]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d103      	bne.n	2a9a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a92:	7853      	ldrb	r3, [r2, #1]
    2a94:	3b01      	subs	r3, #1
    2a96:	2b01      	cmp	r3, #1
    2a98:	d902      	bls.n	2aa0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2a9a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2a9c:	6181      	str	r1, [r0, #24]
    2a9e:	e7f8      	b.n	2a92 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2aa0:	6081      	str	r1, [r0, #8]
}
    2aa2:	e7fa      	b.n	2a9a <_system_pinmux_config+0x9a>
    2aa4:	fffbffff 	.word	0xfffbffff

00002aa8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2aa8:	b510      	push	{r4, lr}
    2aaa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2aac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2aae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2ab0:	2900      	cmp	r1, #0
    2ab2:	d104      	bne.n	2abe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2ab4:	0943      	lsrs	r3, r0, #5
    2ab6:	01db      	lsls	r3, r3, #7
    2ab8:	4905      	ldr	r1, [pc, #20]	; (2ad0 <system_pinmux_pin_set_config+0x28>)
    2aba:	468c      	mov	ip, r1
    2abc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2abe:	241f      	movs	r4, #31
    2ac0:	4020      	ands	r0, r4
    2ac2:	2101      	movs	r1, #1
    2ac4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2ac6:	0018      	movs	r0, r3
    2ac8:	4b02      	ldr	r3, [pc, #8]	; (2ad4 <system_pinmux_pin_set_config+0x2c>)
    2aca:	4798      	blx	r3
}
    2acc:	bd10      	pop	{r4, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	41004400 	.word	0x41004400
    2ad4:	00002a01 	.word	0x00002a01

00002ad8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2ad8:	4770      	bx	lr
	...

00002adc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2adc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2ade:	4b05      	ldr	r3, [pc, #20]	; (2af4 <system_init+0x18>)
    2ae0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2ae2:	4b05      	ldr	r3, [pc, #20]	; (2af8 <system_init+0x1c>)
    2ae4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2ae6:	4b05      	ldr	r3, [pc, #20]	; (2afc <system_init+0x20>)
    2ae8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2aea:	4b05      	ldr	r3, [pc, #20]	; (2b00 <system_init+0x24>)
    2aec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2aee:	4b05      	ldr	r3, [pc, #20]	; (2b04 <system_init+0x28>)
    2af0:	4798      	blx	r3
}
    2af2:	bd10      	pop	{r4, pc}
    2af4:	00002619 	.word	0x00002619
    2af8:	00001881 	.word	0x00001881
    2afc:	00002ad9 	.word	0x00002ad9
    2b00:	00001925 	.word	0x00001925
    2b04:	00002ad9 	.word	0x00002ad9

00002b08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2b08:	e7fe      	b.n	2b08 <Dummy_Handler>
	...

00002b0c <Reset_Handler>:
{
    2b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2b0e:	4a2a      	ldr	r2, [pc, #168]	; (2bb8 <Reset_Handler+0xac>)
    2b10:	4b2a      	ldr	r3, [pc, #168]	; (2bbc <Reset_Handler+0xb0>)
    2b12:	429a      	cmp	r2, r3
    2b14:	d011      	beq.n	2b3a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2b16:	001a      	movs	r2, r3
    2b18:	4b29      	ldr	r3, [pc, #164]	; (2bc0 <Reset_Handler+0xb4>)
    2b1a:	429a      	cmp	r2, r3
    2b1c:	d20d      	bcs.n	2b3a <Reset_Handler+0x2e>
    2b1e:	4a29      	ldr	r2, [pc, #164]	; (2bc4 <Reset_Handler+0xb8>)
    2b20:	3303      	adds	r3, #3
    2b22:	1a9b      	subs	r3, r3, r2
    2b24:	089b      	lsrs	r3, r3, #2
    2b26:	3301      	adds	r3, #1
    2b28:	009b      	lsls	r3, r3, #2
    2b2a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2b2c:	4823      	ldr	r0, [pc, #140]	; (2bbc <Reset_Handler+0xb0>)
    2b2e:	4922      	ldr	r1, [pc, #136]	; (2bb8 <Reset_Handler+0xac>)
    2b30:	588c      	ldr	r4, [r1, r2]
    2b32:	5084      	str	r4, [r0, r2]
    2b34:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2b36:	429a      	cmp	r2, r3
    2b38:	d1fa      	bne.n	2b30 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2b3a:	4a23      	ldr	r2, [pc, #140]	; (2bc8 <Reset_Handler+0xbc>)
    2b3c:	4b23      	ldr	r3, [pc, #140]	; (2bcc <Reset_Handler+0xc0>)
    2b3e:	429a      	cmp	r2, r3
    2b40:	d20a      	bcs.n	2b58 <Reset_Handler+0x4c>
    2b42:	43d3      	mvns	r3, r2
    2b44:	4921      	ldr	r1, [pc, #132]	; (2bcc <Reset_Handler+0xc0>)
    2b46:	185b      	adds	r3, r3, r1
    2b48:	2103      	movs	r1, #3
    2b4a:	438b      	bics	r3, r1
    2b4c:	3304      	adds	r3, #4
    2b4e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2b50:	2100      	movs	r1, #0
    2b52:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2b54:	4293      	cmp	r3, r2
    2b56:	d1fc      	bne.n	2b52 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2b58:	4a1d      	ldr	r2, [pc, #116]	; (2bd0 <Reset_Handler+0xc4>)
    2b5a:	21ff      	movs	r1, #255	; 0xff
    2b5c:	4b1d      	ldr	r3, [pc, #116]	; (2bd4 <Reset_Handler+0xc8>)
    2b5e:	438b      	bics	r3, r1
    2b60:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2b62:	39fd      	subs	r1, #253	; 0xfd
    2b64:	2390      	movs	r3, #144	; 0x90
    2b66:	005b      	lsls	r3, r3, #1
    2b68:	4a1b      	ldr	r2, [pc, #108]	; (2bd8 <Reset_Handler+0xcc>)
    2b6a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2b6c:	4a1b      	ldr	r2, [pc, #108]	; (2bdc <Reset_Handler+0xd0>)
    2b6e:	78d3      	ldrb	r3, [r2, #3]
    2b70:	2503      	movs	r5, #3
    2b72:	43ab      	bics	r3, r5
    2b74:	2402      	movs	r4, #2
    2b76:	4323      	orrs	r3, r4
    2b78:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2b7a:	78d3      	ldrb	r3, [r2, #3]
    2b7c:	270c      	movs	r7, #12
    2b7e:	43bb      	bics	r3, r7
    2b80:	2608      	movs	r6, #8
    2b82:	4333      	orrs	r3, r6
    2b84:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2b86:	4b16      	ldr	r3, [pc, #88]	; (2be0 <Reset_Handler+0xd4>)
    2b88:	7b98      	ldrb	r0, [r3, #14]
    2b8a:	2230      	movs	r2, #48	; 0x30
    2b8c:	4390      	bics	r0, r2
    2b8e:	2220      	movs	r2, #32
    2b90:	4310      	orrs	r0, r2
    2b92:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2b94:	7b99      	ldrb	r1, [r3, #14]
    2b96:	43b9      	bics	r1, r7
    2b98:	4331      	orrs	r1, r6
    2b9a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2b9c:	7b9a      	ldrb	r2, [r3, #14]
    2b9e:	43aa      	bics	r2, r5
    2ba0:	4322      	orrs	r2, r4
    2ba2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2ba4:	4a0f      	ldr	r2, [pc, #60]	; (2be4 <Reset_Handler+0xd8>)
    2ba6:	6853      	ldr	r3, [r2, #4]
    2ba8:	2180      	movs	r1, #128	; 0x80
    2baa:	430b      	orrs	r3, r1
    2bac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2bae:	4b0e      	ldr	r3, [pc, #56]	; (2be8 <Reset_Handler+0xdc>)
    2bb0:	4798      	blx	r3
        main();
    2bb2:	4b0e      	ldr	r3, [pc, #56]	; (2bec <Reset_Handler+0xe0>)
    2bb4:	4798      	blx	r3
    2bb6:	e7fe      	b.n	2bb6 <Reset_Handler+0xaa>
    2bb8:	00007398 	.word	0x00007398
    2bbc:	20000000 	.word	0x20000000
    2bc0:	20000224 	.word	0x20000224
    2bc4:	20000004 	.word	0x20000004
    2bc8:	20000224 	.word	0x20000224
    2bcc:	20000414 	.word	0x20000414
    2bd0:	e000ed00 	.word	0xe000ed00
    2bd4:	00000000 	.word	0x00000000
    2bd8:	41007000 	.word	0x41007000
    2bdc:	41005000 	.word	0x41005000
    2be0:	41004800 	.word	0x41004800
    2be4:	41004000 	.word	0x41004000
    2be8:	00004b99 	.word	0x00004b99
    2bec:	00002db9 	.word	0x00002db9

00002bf0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf2:	46c6      	mov	lr, r8
    2bf4:	b500      	push	{lr}
    2bf6:	000c      	movs	r4, r1
    2bf8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d10f      	bne.n	2c1e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2bfe:	2a00      	cmp	r2, #0
    2c00:	dd11      	ble.n	2c26 <_read+0x36>
    2c02:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2c04:	4e09      	ldr	r6, [pc, #36]	; (2c2c <_read+0x3c>)
    2c06:	4d0a      	ldr	r5, [pc, #40]	; (2c30 <_read+0x40>)
    2c08:	6830      	ldr	r0, [r6, #0]
    2c0a:	0021      	movs	r1, r4
    2c0c:	682b      	ldr	r3, [r5, #0]
    2c0e:	4798      	blx	r3
		ptr++;
    2c10:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2c12:	42bc      	cmp	r4, r7
    2c14:	d1f8      	bne.n	2c08 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2c16:	4640      	mov	r0, r8
    2c18:	bc04      	pop	{r2}
    2c1a:	4690      	mov	r8, r2
    2c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2c1e:	2301      	movs	r3, #1
    2c20:	425b      	negs	r3, r3
    2c22:	4698      	mov	r8, r3
    2c24:	e7f7      	b.n	2c16 <_read+0x26>
	for (; len > 0; --len) {
    2c26:	4680      	mov	r8, r0
    2c28:	e7f5      	b.n	2c16 <_read+0x26>
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	200003ec 	.word	0x200003ec
    2c30:	200003e4 	.word	0x200003e4

00002c34 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c36:	46c6      	mov	lr, r8
    2c38:	b500      	push	{lr}
    2c3a:	000e      	movs	r6, r1
    2c3c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2c3e:	3801      	subs	r0, #1
    2c40:	2802      	cmp	r0, #2
    2c42:	d810      	bhi.n	2c66 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2c44:	2a00      	cmp	r2, #0
    2c46:	d011      	beq.n	2c6c <_write+0x38>
    2c48:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2c4a:	4b0c      	ldr	r3, [pc, #48]	; (2c7c <_write+0x48>)
    2c4c:	4698      	mov	r8, r3
    2c4e:	4f0c      	ldr	r7, [pc, #48]	; (2c80 <_write+0x4c>)
    2c50:	4643      	mov	r3, r8
    2c52:	6818      	ldr	r0, [r3, #0]
    2c54:	5d31      	ldrb	r1, [r6, r4]
    2c56:	683b      	ldr	r3, [r7, #0]
    2c58:	4798      	blx	r3
    2c5a:	2800      	cmp	r0, #0
    2c5c:	db08      	blt.n	2c70 <_write+0x3c>
			return -1;
		}
		++nChars;
    2c5e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2c60:	42a5      	cmp	r5, r4
    2c62:	d1f5      	bne.n	2c50 <_write+0x1c>
    2c64:	e006      	b.n	2c74 <_write+0x40>
		return -1;
    2c66:	2401      	movs	r4, #1
    2c68:	4264      	negs	r4, r4
    2c6a:	e003      	b.n	2c74 <_write+0x40>
	for (; len != 0; --len) {
    2c6c:	0014      	movs	r4, r2
    2c6e:	e001      	b.n	2c74 <_write+0x40>
			return -1;
    2c70:	2401      	movs	r4, #1
    2c72:	4264      	negs	r4, r4
	}
	return nChars;
}
    2c74:	0020      	movs	r0, r4
    2c76:	bc04      	pop	{r2}
    2c78:	4690      	mov	r8, r2
    2c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c7c:	200003ec 	.word	0x200003ec
    2c80:	200003e8 	.word	0x200003e8

00002c84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2c84:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2c86:	4a06      	ldr	r2, [pc, #24]	; (2ca0 <_sbrk+0x1c>)
    2c88:	6812      	ldr	r2, [r2, #0]
    2c8a:	2a00      	cmp	r2, #0
    2c8c:	d004      	beq.n	2c98 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2c8e:	4a04      	ldr	r2, [pc, #16]	; (2ca0 <_sbrk+0x1c>)
    2c90:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2c92:	18c3      	adds	r3, r0, r3
    2c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2c96:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2c98:	4902      	ldr	r1, [pc, #8]	; (2ca4 <_sbrk+0x20>)
    2c9a:	4a01      	ldr	r2, [pc, #4]	; (2ca0 <_sbrk+0x1c>)
    2c9c:	6011      	str	r1, [r2, #0]
    2c9e:	e7f6      	b.n	2c8e <_sbrk+0xa>
    2ca0:	20000280 	.word	0x20000280
    2ca4:	20002418 	.word	0x20002418

00002ca8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2ca8:	2001      	movs	r0, #1
    2caa:	4240      	negs	r0, r0
    2cac:	4770      	bx	lr

00002cae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2cae:	2380      	movs	r3, #128	; 0x80
    2cb0:	019b      	lsls	r3, r3, #6
    2cb2:	604b      	str	r3, [r1, #4]

	return 0;
}
    2cb4:	2000      	movs	r0, #0
    2cb6:	4770      	bx	lr

00002cb8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2cb8:	2001      	movs	r0, #1
    2cba:	4770      	bx	lr

00002cbc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2cbc:	2000      	movs	r0, #0
    2cbe:	4770      	bx	lr

00002cc0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2cc0:	b570      	push	{r4, r5, r6, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	0005      	movs	r5, r0
    2cc6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2cc8:	2200      	movs	r2, #0
    2cca:	466b      	mov	r3, sp
    2ccc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2cce:	4c06      	ldr	r4, [pc, #24]	; (2ce8 <usart_serial_getchar+0x28>)
    2cd0:	466b      	mov	r3, sp
    2cd2:	1d99      	adds	r1, r3, #6
    2cd4:	0028      	movs	r0, r5
    2cd6:	47a0      	blx	r4
    2cd8:	2800      	cmp	r0, #0
    2cda:	d1f9      	bne.n	2cd0 <usart_serial_getchar+0x10>

	*c = temp;
    2cdc:	466b      	mov	r3, sp
    2cde:	3306      	adds	r3, #6
    2ce0:	881b      	ldrh	r3, [r3, #0]
    2ce2:	7033      	strb	r3, [r6, #0]
}
    2ce4:	b002      	add	sp, #8
    2ce6:	bd70      	pop	{r4, r5, r6, pc}
    2ce8:	00002169 	.word	0x00002169

00002cec <usart_serial_putchar>:
{
    2cec:	b570      	push	{r4, r5, r6, lr}
    2cee:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2cf0:	b28c      	uxth	r4, r1
    2cf2:	4e03      	ldr	r6, [pc, #12]	; (2d00 <usart_serial_putchar+0x14>)
    2cf4:	0021      	movs	r1, r4
    2cf6:	0028      	movs	r0, r5
    2cf8:	47b0      	blx	r6
    2cfa:	2800      	cmp	r0, #0
    2cfc:	d1fa      	bne.n	2cf4 <usart_serial_putchar+0x8>
}
    2cfe:	bd70      	pop	{r4, r5, r6, pc}
    2d00:	0000213d 	.word	0x0000213d

00002d04 <configure_i2c>:
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PB02, &config_port_pin);
}

void configure_i2c(void)
{
    2d04:	b530      	push	{r4, r5, lr}
    2d06:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2d08:	ab01      	add	r3, sp, #4
    2d0a:	2264      	movs	r2, #100	; 0x64
    2d0c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2d0e:	4a22      	ldr	r2, [pc, #136]	; (2d98 <configure_i2c+0x94>)
    2d10:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2d12:	2200      	movs	r2, #0
    2d14:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2d16:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2d18:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2d1a:	2180      	movs	r1, #128	; 0x80
    2d1c:	0389      	lsls	r1, r1, #14
    2d1e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    2d20:	2101      	movs	r1, #1
    2d22:	4249      	negs	r1, r1
    2d24:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2d26:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2d28:	3125      	adds	r1, #37	; 0x25
    2d2a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d2c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d2e:	3108      	adds	r1, #8
    2d30:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d32:	3101      	adds	r1, #1
    2d34:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2d36:	3101      	adds	r1, #1
    2d38:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d3a:	32d7      	adds	r2, #215	; 0xd7
    2d3c:	861a      	strh	r2, [r3, #48]	; 0x30
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
	config_i2c_master.pinmux_pad0       = PINMUX_PA08D_SERCOM2_PAD0;
    2d3e:	4a17      	ldr	r2, [pc, #92]	; (2d9c <configure_i2c+0x98>)
    2d40:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09D_SERCOM2_PAD1;
    2d42:	4a17      	ldr	r2, [pc, #92]	; (2da0 <configure_i2c+0x9c>)
    2d44:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master) != STATUS_OK);
    2d46:	4d17      	ldr	r5, [pc, #92]	; (2da4 <configure_i2c+0xa0>)
    2d48:	4c17      	ldr	r4, [pc, #92]	; (2da8 <configure_i2c+0xa4>)
    2d4a:	aa01      	add	r2, sp, #4
    2d4c:	4917      	ldr	r1, [pc, #92]	; (2dac <configure_i2c+0xa8>)
    2d4e:	0028      	movs	r0, r5
    2d50:	47a0      	blx	r4
    2d52:	2800      	cmp	r0, #0
    2d54:	d1f9      	bne.n	2d4a <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d56:	4b13      	ldr	r3, [pc, #76]	; (2da4 <configure_i2c+0xa0>)
    2d58:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2d5a:	2207      	movs	r2, #7
    2d5c:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2d5e:	421a      	tst	r2, r3
    2d60:	d1fc      	bne.n	2d5c <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2d62:	6823      	ldr	r3, [r4, #0]
    2d64:	2202      	movs	r2, #2
    2d66:	4313      	orrs	r3, r2
    2d68:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2d6a:	4d0e      	ldr	r5, [pc, #56]	; (2da4 <configure_i2c+0xa0>)
    2d6c:	6828      	ldr	r0, [r5, #0]
    2d6e:	4b10      	ldr	r3, [pc, #64]	; (2db0 <configure_i2c+0xac>)
    2d70:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d72:	231f      	movs	r3, #31
    2d74:	4018      	ands	r0, r3
    2d76:	3b1e      	subs	r3, #30
    2d78:	4083      	lsls	r3, r0
    2d7a:	4a0e      	ldr	r2, [pc, #56]	; (2db4 <configure_i2c+0xb0>)
    2d7c:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2d7e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2d80:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2d82:	2110      	movs	r1, #16
    2d84:	8b62      	ldrh	r2, [r4, #26]
    2d86:	420a      	tst	r2, r1
    2d88:	d104      	bne.n	2d94 <configure_i2c+0x90>
		timeout_counter++;
    2d8a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2d8c:	4283      	cmp	r3, r0
    2d8e:	d3f9      	bcc.n	2d84 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2d90:	2310      	movs	r3, #16
    2d92:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    2d94:	b00f      	add	sp, #60	; 0x3c
    2d96:	bd30      	pop	{r4, r5, pc}
    2d98:	00000d48 	.word	0x00000d48
    2d9c:	00080003 	.word	0x00080003
    2da0:	00090003 	.word	0x00090003
    2da4:	200002c4 	.word	0x200002c4
    2da8:	000006e5 	.word	0x000006e5
    2dac:	42001000 	.word	0x42001000
    2db0:	00001d69 	.word	0x00001d69
    2db4:	e000e100 	.word	0xe000e100

00002db8 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    2db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dba:	b0d1      	sub	sp, #324	; 0x144
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    2dbc:	4b52      	ldr	r3, [pc, #328]	; (2f08 <main+0x150>)
    2dbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2dc0:	2380      	movs	r3, #128	; 0x80
    2dc2:	05db      	lsls	r3, r3, #23
    2dc4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2dc6:	2300      	movs	r3, #0
    2dc8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2dca:	22ff      	movs	r2, #255	; 0xff
    2dcc:	4669      	mov	r1, sp
    2dce:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2dd0:	2200      	movs	r2, #0
    2dd2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2dd4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2dd6:	2401      	movs	r4, #1
    2dd8:	2124      	movs	r1, #36	; 0x24
    2dda:	4668      	mov	r0, sp
    2ddc:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2dde:	3101      	adds	r1, #1
    2de0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2de2:	3101      	adds	r1, #1
    2de4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2de6:	3101      	adds	r1, #1
    2de8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2dea:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2dec:	3105      	adds	r1, #5
    2dee:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2df0:	3101      	adds	r1, #1
    2df2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2df4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2df6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2df8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2dfa:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2dfc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2dfe:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2e00:	2313      	movs	r3, #19
    2e02:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2e04:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2e06:	23c4      	movs	r3, #196	; 0xc4
    2e08:	039b      	lsls	r3, r3, #14
    2e0a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2e0c:	2301      	movs	r3, #1
    2e0e:	425b      	negs	r3, r3
    2e10:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2e12:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2e14:	4b3d      	ldr	r3, [pc, #244]	; (2f0c <main+0x154>)
    2e16:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2e18:	4b3d      	ldr	r3, [pc, #244]	; (2f10 <main+0x158>)
    2e1a:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2e1c:	23e1      	movs	r3, #225	; 0xe1
    2e1e:	025b      	lsls	r3, r3, #9
    2e20:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2e22:	4d3c      	ldr	r5, [pc, #240]	; (2f14 <main+0x15c>)
    2e24:	4b3c      	ldr	r3, [pc, #240]	; (2f18 <main+0x160>)
    2e26:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2e28:	4a3c      	ldr	r2, [pc, #240]	; (2f1c <main+0x164>)
    2e2a:	4b3d      	ldr	r3, [pc, #244]	; (2f20 <main+0x168>)
    2e2c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2e2e:	4a3d      	ldr	r2, [pc, #244]	; (2f24 <main+0x16c>)
    2e30:	4b3d      	ldr	r3, [pc, #244]	; (2f28 <main+0x170>)
    2e32:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2e34:	466a      	mov	r2, sp
    2e36:	493d      	ldr	r1, [pc, #244]	; (2f2c <main+0x174>)
    2e38:	0028      	movs	r0, r5
    2e3a:	4b3d      	ldr	r3, [pc, #244]	; (2f30 <main+0x178>)
    2e3c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2e3e:	4f3d      	ldr	r7, [pc, #244]	; (2f34 <main+0x17c>)
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	6898      	ldr	r0, [r3, #8]
    2e44:	2100      	movs	r1, #0
    2e46:	4e3c      	ldr	r6, [pc, #240]	; (2f38 <main+0x180>)
    2e48:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2e4a:	683b      	ldr	r3, [r7, #0]
    2e4c:	6858      	ldr	r0, [r3, #4]
    2e4e:	2100      	movs	r1, #0
    2e50:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e52:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e54:	0030      	movs	r0, r6
    2e56:	4b39      	ldr	r3, [pc, #228]	; (2f3c <main+0x184>)
    2e58:	4798      	blx	r3
    2e5a:	231f      	movs	r3, #31
    2e5c:	4018      	ands	r0, r3
    2e5e:	4084      	lsls	r4, r0
    2e60:	4b37      	ldr	r3, [pc, #220]	; (2f40 <main+0x188>)
    2e62:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e64:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e66:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2e68:	2a00      	cmp	r2, #0
    2e6a:	d1fc      	bne.n	2e66 <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2e6c:	6833      	ldr	r3, [r6, #0]
    2e6e:	2702      	movs	r7, #2
    2e70:	433b      	orrs	r3, r7
    2e72:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    2e74:	4833      	ldr	r0, [pc, #204]	; (2f44 <main+0x18c>)
    2e76:	4b34      	ldr	r3, [pc, #208]	; (2f48 <main+0x190>)
    2e78:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    2e7a:	4b34      	ldr	r3, [pc, #208]	; (2f4c <main+0x194>)
    2e7c:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    2e7e:	2401      	movs	r4, #1
    2e80:	466b      	mov	r3, sp
    2e82:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    2e84:	2500      	movs	r5, #0
    2e86:	709d      	strb	r5, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2e88:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    2e8a:	4669      	mov	r1, sp
    2e8c:	2022      	movs	r0, #34	; 0x22
    2e8e:	4b30      	ldr	r3, [pc, #192]	; (2f50 <main+0x198>)
    2e90:	4798      	blx	r3
	adc_get_config_defaults(&config);
    2e92:	4668      	mov	r0, sp
    2e94:	4b2f      	ldr	r3, [pc, #188]	; (2f54 <main+0x19c>)
    2e96:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    2e98:	466b      	mov	r3, sp
    2e9a:	701c      	strb	r4, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    2e9c:	705f      	strb	r7, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    2e9e:	2380      	movs	r3, #128	; 0x80
    2ea0:	009b      	lsls	r3, r3, #2
    2ea2:	466a      	mov	r2, sp
    2ea4:	8053      	strh	r3, [r2, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    2ea6:	7115      	strb	r5, [r2, #4]
	adc_init(&adc_inst, ADC, &config);
    2ea8:	4c2b      	ldr	r4, [pc, #172]	; (2f58 <main+0x1a0>)
    2eaa:	492c      	ldr	r1, [pc, #176]	; (2f5c <main+0x1a4>)
    2eac:	0020      	movs	r0, r4
    2eae:	4b2c      	ldr	r3, [pc, #176]	; (2f60 <main+0x1a8>)
    2eb0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2eb2:	6823      	ldr	r3, [r4, #0]
    2eb4:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2eb6:	b252      	sxtb	r2, r2
    2eb8:	2a00      	cmp	r2, #0
    2eba:	dbfb      	blt.n	2eb4 <main+0xfc>
    2ebc:	2180      	movs	r1, #128	; 0x80
    2ebe:	0409      	lsls	r1, r1, #16
    2ec0:	4a1f      	ldr	r2, [pc, #124]	; (2f40 <main+0x188>)
    2ec2:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2ec4:	220f      	movs	r2, #15
    2ec6:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2ec8:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2eca:	781a      	ldrb	r2, [r3, #0]
    2ecc:	2102      	movs	r1, #2
    2ece:	430a      	orrs	r2, r1
    2ed0:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2ed2:	4b21      	ldr	r3, [pc, #132]	; (2f58 <main+0x1a0>)
    2ed4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2ed6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2ed8:	b25b      	sxtb	r3, r3
    2eda:	2b00      	cmp	r3, #0
    2edc:	dbfb      	blt.n	2ed6 <main+0x11e>
	
	/* Init the GPIO & ADC */
	configure_gpio();
	configure_adc();
	configure_i2c();
    2ede:	4b21      	ldr	r3, [pc, #132]	; (2f64 <main+0x1ac>)
    2ee0:	4798      	blx	r3
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    2ee2:	4b21      	ldr	r3, [pc, #132]	; (2f68 <main+0x1b0>)
    2ee4:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    2ee6:	4821      	ldr	r0, [pc, #132]	; (2f6c <main+0x1b4>)
    2ee8:	4b17      	ldr	r3, [pc, #92]	; (2f48 <main+0x190>)
    2eea:	4798      	blx	r3
	while (1) {
		printf("> ");
    2eec:	4d20      	ldr	r5, [pc, #128]	; (2f70 <main+0x1b8>)
    2eee:	4e21      	ldr	r6, [pc, #132]	; (2f74 <main+0x1bc>)
		scanf("%[^\r\n]%*c", input);
    2ef0:	4c21      	ldr	r4, [pc, #132]	; (2f78 <main+0x1c0>)
		printf("> ");
    2ef2:	0028      	movs	r0, r5
    2ef4:	47b0      	blx	r6
		scanf("%[^\r\n]%*c", input);
    2ef6:	a910      	add	r1, sp, #64	; 0x40
    2ef8:	0020      	movs	r0, r4
    2efa:	4b20      	ldr	r3, [pc, #128]	; (2f7c <main+0x1c4>)
    2efc:	4798      	blx	r3
		handle_user_input(input);
    2efe:	a810      	add	r0, sp, #64	; 0x40
    2f00:	4b1f      	ldr	r3, [pc, #124]	; (2f80 <main+0x1c8>)
    2f02:	4798      	blx	r3
    2f04:	e7f5      	b.n	2ef2 <main+0x13a>
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	00002add 	.word	0x00002add
    2f0c:	002a0003 	.word	0x002a0003
    2f10:	002b0003 	.word	0x002b0003
    2f14:	20000284 	.word	0x20000284
    2f18:	200003ec 	.word	0x200003ec
    2f1c:	00002ced 	.word	0x00002ced
    2f20:	200003e8 	.word	0x200003e8
    2f24:	00002cc1 	.word	0x00002cc1
    2f28:	200003e4 	.word	0x200003e4
    2f2c:	42001800 	.word	0x42001800
    2f30:	00001df9 	.word	0x00001df9
    2f34:	20000054 	.word	0x20000054
    2f38:	00004d41 	.word	0x00004d41
    2f3c:	00001d69 	.word	0x00001d69
    2f40:	e000e100 	.word	0xe000e100
    2f44:	00007090 	.word	0x00007090
    2f48:	00004cf9 	.word	0x00004cf9
    2f4c:	00001795 	.word	0x00001795
    2f50:	00001991 	.word	0x00001991
    2f54:	000001a9 	.word	0x000001a9
    2f58:	200003f0 	.word	0x200003f0
    2f5c:	42004000 	.word	0x42004000
    2f60:	000001f1 	.word	0x000001f1
    2f64:	00002d05 	.word	0x00002d05
    2f68:	00000e81 	.word	0x00000e81
    2f6c:	000070fc 	.word	0x000070fc
    2f70:	0000711c 	.word	0x0000711c
    2f74:	00004c05 	.word	0x00004c05
    2f78:	00007120 	.word	0x00007120
    2f7c:	00004d0d 	.word	0x00004d0d
    2f80:	00001375 	.word	0x00001375

00002f84 <__udivsi3>:
    2f84:	2200      	movs	r2, #0
    2f86:	0843      	lsrs	r3, r0, #1
    2f88:	428b      	cmp	r3, r1
    2f8a:	d374      	bcc.n	3076 <__udivsi3+0xf2>
    2f8c:	0903      	lsrs	r3, r0, #4
    2f8e:	428b      	cmp	r3, r1
    2f90:	d35f      	bcc.n	3052 <__udivsi3+0xce>
    2f92:	0a03      	lsrs	r3, r0, #8
    2f94:	428b      	cmp	r3, r1
    2f96:	d344      	bcc.n	3022 <__udivsi3+0x9e>
    2f98:	0b03      	lsrs	r3, r0, #12
    2f9a:	428b      	cmp	r3, r1
    2f9c:	d328      	bcc.n	2ff0 <__udivsi3+0x6c>
    2f9e:	0c03      	lsrs	r3, r0, #16
    2fa0:	428b      	cmp	r3, r1
    2fa2:	d30d      	bcc.n	2fc0 <__udivsi3+0x3c>
    2fa4:	22ff      	movs	r2, #255	; 0xff
    2fa6:	0209      	lsls	r1, r1, #8
    2fa8:	ba12      	rev	r2, r2
    2faa:	0c03      	lsrs	r3, r0, #16
    2fac:	428b      	cmp	r3, r1
    2fae:	d302      	bcc.n	2fb6 <__udivsi3+0x32>
    2fb0:	1212      	asrs	r2, r2, #8
    2fb2:	0209      	lsls	r1, r1, #8
    2fb4:	d065      	beq.n	3082 <__udivsi3+0xfe>
    2fb6:	0b03      	lsrs	r3, r0, #12
    2fb8:	428b      	cmp	r3, r1
    2fba:	d319      	bcc.n	2ff0 <__udivsi3+0x6c>
    2fbc:	e000      	b.n	2fc0 <__udivsi3+0x3c>
    2fbe:	0a09      	lsrs	r1, r1, #8
    2fc0:	0bc3      	lsrs	r3, r0, #15
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d301      	bcc.n	2fca <__udivsi3+0x46>
    2fc6:	03cb      	lsls	r3, r1, #15
    2fc8:	1ac0      	subs	r0, r0, r3
    2fca:	4152      	adcs	r2, r2
    2fcc:	0b83      	lsrs	r3, r0, #14
    2fce:	428b      	cmp	r3, r1
    2fd0:	d301      	bcc.n	2fd6 <__udivsi3+0x52>
    2fd2:	038b      	lsls	r3, r1, #14
    2fd4:	1ac0      	subs	r0, r0, r3
    2fd6:	4152      	adcs	r2, r2
    2fd8:	0b43      	lsrs	r3, r0, #13
    2fda:	428b      	cmp	r3, r1
    2fdc:	d301      	bcc.n	2fe2 <__udivsi3+0x5e>
    2fde:	034b      	lsls	r3, r1, #13
    2fe0:	1ac0      	subs	r0, r0, r3
    2fe2:	4152      	adcs	r2, r2
    2fe4:	0b03      	lsrs	r3, r0, #12
    2fe6:	428b      	cmp	r3, r1
    2fe8:	d301      	bcc.n	2fee <__udivsi3+0x6a>
    2fea:	030b      	lsls	r3, r1, #12
    2fec:	1ac0      	subs	r0, r0, r3
    2fee:	4152      	adcs	r2, r2
    2ff0:	0ac3      	lsrs	r3, r0, #11
    2ff2:	428b      	cmp	r3, r1
    2ff4:	d301      	bcc.n	2ffa <__udivsi3+0x76>
    2ff6:	02cb      	lsls	r3, r1, #11
    2ff8:	1ac0      	subs	r0, r0, r3
    2ffa:	4152      	adcs	r2, r2
    2ffc:	0a83      	lsrs	r3, r0, #10
    2ffe:	428b      	cmp	r3, r1
    3000:	d301      	bcc.n	3006 <__udivsi3+0x82>
    3002:	028b      	lsls	r3, r1, #10
    3004:	1ac0      	subs	r0, r0, r3
    3006:	4152      	adcs	r2, r2
    3008:	0a43      	lsrs	r3, r0, #9
    300a:	428b      	cmp	r3, r1
    300c:	d301      	bcc.n	3012 <__udivsi3+0x8e>
    300e:	024b      	lsls	r3, r1, #9
    3010:	1ac0      	subs	r0, r0, r3
    3012:	4152      	adcs	r2, r2
    3014:	0a03      	lsrs	r3, r0, #8
    3016:	428b      	cmp	r3, r1
    3018:	d301      	bcc.n	301e <__udivsi3+0x9a>
    301a:	020b      	lsls	r3, r1, #8
    301c:	1ac0      	subs	r0, r0, r3
    301e:	4152      	adcs	r2, r2
    3020:	d2cd      	bcs.n	2fbe <__udivsi3+0x3a>
    3022:	09c3      	lsrs	r3, r0, #7
    3024:	428b      	cmp	r3, r1
    3026:	d301      	bcc.n	302c <__udivsi3+0xa8>
    3028:	01cb      	lsls	r3, r1, #7
    302a:	1ac0      	subs	r0, r0, r3
    302c:	4152      	adcs	r2, r2
    302e:	0983      	lsrs	r3, r0, #6
    3030:	428b      	cmp	r3, r1
    3032:	d301      	bcc.n	3038 <__udivsi3+0xb4>
    3034:	018b      	lsls	r3, r1, #6
    3036:	1ac0      	subs	r0, r0, r3
    3038:	4152      	adcs	r2, r2
    303a:	0943      	lsrs	r3, r0, #5
    303c:	428b      	cmp	r3, r1
    303e:	d301      	bcc.n	3044 <__udivsi3+0xc0>
    3040:	014b      	lsls	r3, r1, #5
    3042:	1ac0      	subs	r0, r0, r3
    3044:	4152      	adcs	r2, r2
    3046:	0903      	lsrs	r3, r0, #4
    3048:	428b      	cmp	r3, r1
    304a:	d301      	bcc.n	3050 <__udivsi3+0xcc>
    304c:	010b      	lsls	r3, r1, #4
    304e:	1ac0      	subs	r0, r0, r3
    3050:	4152      	adcs	r2, r2
    3052:	08c3      	lsrs	r3, r0, #3
    3054:	428b      	cmp	r3, r1
    3056:	d301      	bcc.n	305c <__udivsi3+0xd8>
    3058:	00cb      	lsls	r3, r1, #3
    305a:	1ac0      	subs	r0, r0, r3
    305c:	4152      	adcs	r2, r2
    305e:	0883      	lsrs	r3, r0, #2
    3060:	428b      	cmp	r3, r1
    3062:	d301      	bcc.n	3068 <__udivsi3+0xe4>
    3064:	008b      	lsls	r3, r1, #2
    3066:	1ac0      	subs	r0, r0, r3
    3068:	4152      	adcs	r2, r2
    306a:	0843      	lsrs	r3, r0, #1
    306c:	428b      	cmp	r3, r1
    306e:	d301      	bcc.n	3074 <__udivsi3+0xf0>
    3070:	004b      	lsls	r3, r1, #1
    3072:	1ac0      	subs	r0, r0, r3
    3074:	4152      	adcs	r2, r2
    3076:	1a41      	subs	r1, r0, r1
    3078:	d200      	bcs.n	307c <__udivsi3+0xf8>
    307a:	4601      	mov	r1, r0
    307c:	4152      	adcs	r2, r2
    307e:	4610      	mov	r0, r2
    3080:	4770      	bx	lr
    3082:	e7ff      	b.n	3084 <__udivsi3+0x100>
    3084:	b501      	push	{r0, lr}
    3086:	2000      	movs	r0, #0
    3088:	f000 f8f0 	bl	326c <__aeabi_idiv0>
    308c:	bd02      	pop	{r1, pc}
    308e:	46c0      	nop			; (mov r8, r8)

00003090 <__aeabi_uidivmod>:
    3090:	2900      	cmp	r1, #0
    3092:	d0f7      	beq.n	3084 <__udivsi3+0x100>
    3094:	e776      	b.n	2f84 <__udivsi3>
    3096:	4770      	bx	lr

00003098 <__divsi3>:
    3098:	4603      	mov	r3, r0
    309a:	430b      	orrs	r3, r1
    309c:	d47f      	bmi.n	319e <__divsi3+0x106>
    309e:	2200      	movs	r2, #0
    30a0:	0843      	lsrs	r3, r0, #1
    30a2:	428b      	cmp	r3, r1
    30a4:	d374      	bcc.n	3190 <__divsi3+0xf8>
    30a6:	0903      	lsrs	r3, r0, #4
    30a8:	428b      	cmp	r3, r1
    30aa:	d35f      	bcc.n	316c <__divsi3+0xd4>
    30ac:	0a03      	lsrs	r3, r0, #8
    30ae:	428b      	cmp	r3, r1
    30b0:	d344      	bcc.n	313c <__divsi3+0xa4>
    30b2:	0b03      	lsrs	r3, r0, #12
    30b4:	428b      	cmp	r3, r1
    30b6:	d328      	bcc.n	310a <__divsi3+0x72>
    30b8:	0c03      	lsrs	r3, r0, #16
    30ba:	428b      	cmp	r3, r1
    30bc:	d30d      	bcc.n	30da <__divsi3+0x42>
    30be:	22ff      	movs	r2, #255	; 0xff
    30c0:	0209      	lsls	r1, r1, #8
    30c2:	ba12      	rev	r2, r2
    30c4:	0c03      	lsrs	r3, r0, #16
    30c6:	428b      	cmp	r3, r1
    30c8:	d302      	bcc.n	30d0 <__divsi3+0x38>
    30ca:	1212      	asrs	r2, r2, #8
    30cc:	0209      	lsls	r1, r1, #8
    30ce:	d065      	beq.n	319c <__divsi3+0x104>
    30d0:	0b03      	lsrs	r3, r0, #12
    30d2:	428b      	cmp	r3, r1
    30d4:	d319      	bcc.n	310a <__divsi3+0x72>
    30d6:	e000      	b.n	30da <__divsi3+0x42>
    30d8:	0a09      	lsrs	r1, r1, #8
    30da:	0bc3      	lsrs	r3, r0, #15
    30dc:	428b      	cmp	r3, r1
    30de:	d301      	bcc.n	30e4 <__divsi3+0x4c>
    30e0:	03cb      	lsls	r3, r1, #15
    30e2:	1ac0      	subs	r0, r0, r3
    30e4:	4152      	adcs	r2, r2
    30e6:	0b83      	lsrs	r3, r0, #14
    30e8:	428b      	cmp	r3, r1
    30ea:	d301      	bcc.n	30f0 <__divsi3+0x58>
    30ec:	038b      	lsls	r3, r1, #14
    30ee:	1ac0      	subs	r0, r0, r3
    30f0:	4152      	adcs	r2, r2
    30f2:	0b43      	lsrs	r3, r0, #13
    30f4:	428b      	cmp	r3, r1
    30f6:	d301      	bcc.n	30fc <__divsi3+0x64>
    30f8:	034b      	lsls	r3, r1, #13
    30fa:	1ac0      	subs	r0, r0, r3
    30fc:	4152      	adcs	r2, r2
    30fe:	0b03      	lsrs	r3, r0, #12
    3100:	428b      	cmp	r3, r1
    3102:	d301      	bcc.n	3108 <__divsi3+0x70>
    3104:	030b      	lsls	r3, r1, #12
    3106:	1ac0      	subs	r0, r0, r3
    3108:	4152      	adcs	r2, r2
    310a:	0ac3      	lsrs	r3, r0, #11
    310c:	428b      	cmp	r3, r1
    310e:	d301      	bcc.n	3114 <__divsi3+0x7c>
    3110:	02cb      	lsls	r3, r1, #11
    3112:	1ac0      	subs	r0, r0, r3
    3114:	4152      	adcs	r2, r2
    3116:	0a83      	lsrs	r3, r0, #10
    3118:	428b      	cmp	r3, r1
    311a:	d301      	bcc.n	3120 <__divsi3+0x88>
    311c:	028b      	lsls	r3, r1, #10
    311e:	1ac0      	subs	r0, r0, r3
    3120:	4152      	adcs	r2, r2
    3122:	0a43      	lsrs	r3, r0, #9
    3124:	428b      	cmp	r3, r1
    3126:	d301      	bcc.n	312c <__divsi3+0x94>
    3128:	024b      	lsls	r3, r1, #9
    312a:	1ac0      	subs	r0, r0, r3
    312c:	4152      	adcs	r2, r2
    312e:	0a03      	lsrs	r3, r0, #8
    3130:	428b      	cmp	r3, r1
    3132:	d301      	bcc.n	3138 <__divsi3+0xa0>
    3134:	020b      	lsls	r3, r1, #8
    3136:	1ac0      	subs	r0, r0, r3
    3138:	4152      	adcs	r2, r2
    313a:	d2cd      	bcs.n	30d8 <__divsi3+0x40>
    313c:	09c3      	lsrs	r3, r0, #7
    313e:	428b      	cmp	r3, r1
    3140:	d301      	bcc.n	3146 <__divsi3+0xae>
    3142:	01cb      	lsls	r3, r1, #7
    3144:	1ac0      	subs	r0, r0, r3
    3146:	4152      	adcs	r2, r2
    3148:	0983      	lsrs	r3, r0, #6
    314a:	428b      	cmp	r3, r1
    314c:	d301      	bcc.n	3152 <__divsi3+0xba>
    314e:	018b      	lsls	r3, r1, #6
    3150:	1ac0      	subs	r0, r0, r3
    3152:	4152      	adcs	r2, r2
    3154:	0943      	lsrs	r3, r0, #5
    3156:	428b      	cmp	r3, r1
    3158:	d301      	bcc.n	315e <__divsi3+0xc6>
    315a:	014b      	lsls	r3, r1, #5
    315c:	1ac0      	subs	r0, r0, r3
    315e:	4152      	adcs	r2, r2
    3160:	0903      	lsrs	r3, r0, #4
    3162:	428b      	cmp	r3, r1
    3164:	d301      	bcc.n	316a <__divsi3+0xd2>
    3166:	010b      	lsls	r3, r1, #4
    3168:	1ac0      	subs	r0, r0, r3
    316a:	4152      	adcs	r2, r2
    316c:	08c3      	lsrs	r3, r0, #3
    316e:	428b      	cmp	r3, r1
    3170:	d301      	bcc.n	3176 <__divsi3+0xde>
    3172:	00cb      	lsls	r3, r1, #3
    3174:	1ac0      	subs	r0, r0, r3
    3176:	4152      	adcs	r2, r2
    3178:	0883      	lsrs	r3, r0, #2
    317a:	428b      	cmp	r3, r1
    317c:	d301      	bcc.n	3182 <__divsi3+0xea>
    317e:	008b      	lsls	r3, r1, #2
    3180:	1ac0      	subs	r0, r0, r3
    3182:	4152      	adcs	r2, r2
    3184:	0843      	lsrs	r3, r0, #1
    3186:	428b      	cmp	r3, r1
    3188:	d301      	bcc.n	318e <__divsi3+0xf6>
    318a:	004b      	lsls	r3, r1, #1
    318c:	1ac0      	subs	r0, r0, r3
    318e:	4152      	adcs	r2, r2
    3190:	1a41      	subs	r1, r0, r1
    3192:	d200      	bcs.n	3196 <__divsi3+0xfe>
    3194:	4601      	mov	r1, r0
    3196:	4152      	adcs	r2, r2
    3198:	4610      	mov	r0, r2
    319a:	4770      	bx	lr
    319c:	e05d      	b.n	325a <__divsi3+0x1c2>
    319e:	0fca      	lsrs	r2, r1, #31
    31a0:	d000      	beq.n	31a4 <__divsi3+0x10c>
    31a2:	4249      	negs	r1, r1
    31a4:	1003      	asrs	r3, r0, #32
    31a6:	d300      	bcc.n	31aa <__divsi3+0x112>
    31a8:	4240      	negs	r0, r0
    31aa:	4053      	eors	r3, r2
    31ac:	2200      	movs	r2, #0
    31ae:	469c      	mov	ip, r3
    31b0:	0903      	lsrs	r3, r0, #4
    31b2:	428b      	cmp	r3, r1
    31b4:	d32d      	bcc.n	3212 <__divsi3+0x17a>
    31b6:	0a03      	lsrs	r3, r0, #8
    31b8:	428b      	cmp	r3, r1
    31ba:	d312      	bcc.n	31e2 <__divsi3+0x14a>
    31bc:	22fc      	movs	r2, #252	; 0xfc
    31be:	0189      	lsls	r1, r1, #6
    31c0:	ba12      	rev	r2, r2
    31c2:	0a03      	lsrs	r3, r0, #8
    31c4:	428b      	cmp	r3, r1
    31c6:	d30c      	bcc.n	31e2 <__divsi3+0x14a>
    31c8:	0189      	lsls	r1, r1, #6
    31ca:	1192      	asrs	r2, r2, #6
    31cc:	428b      	cmp	r3, r1
    31ce:	d308      	bcc.n	31e2 <__divsi3+0x14a>
    31d0:	0189      	lsls	r1, r1, #6
    31d2:	1192      	asrs	r2, r2, #6
    31d4:	428b      	cmp	r3, r1
    31d6:	d304      	bcc.n	31e2 <__divsi3+0x14a>
    31d8:	0189      	lsls	r1, r1, #6
    31da:	d03a      	beq.n	3252 <__divsi3+0x1ba>
    31dc:	1192      	asrs	r2, r2, #6
    31de:	e000      	b.n	31e2 <__divsi3+0x14a>
    31e0:	0989      	lsrs	r1, r1, #6
    31e2:	09c3      	lsrs	r3, r0, #7
    31e4:	428b      	cmp	r3, r1
    31e6:	d301      	bcc.n	31ec <__divsi3+0x154>
    31e8:	01cb      	lsls	r3, r1, #7
    31ea:	1ac0      	subs	r0, r0, r3
    31ec:	4152      	adcs	r2, r2
    31ee:	0983      	lsrs	r3, r0, #6
    31f0:	428b      	cmp	r3, r1
    31f2:	d301      	bcc.n	31f8 <__divsi3+0x160>
    31f4:	018b      	lsls	r3, r1, #6
    31f6:	1ac0      	subs	r0, r0, r3
    31f8:	4152      	adcs	r2, r2
    31fa:	0943      	lsrs	r3, r0, #5
    31fc:	428b      	cmp	r3, r1
    31fe:	d301      	bcc.n	3204 <__divsi3+0x16c>
    3200:	014b      	lsls	r3, r1, #5
    3202:	1ac0      	subs	r0, r0, r3
    3204:	4152      	adcs	r2, r2
    3206:	0903      	lsrs	r3, r0, #4
    3208:	428b      	cmp	r3, r1
    320a:	d301      	bcc.n	3210 <__divsi3+0x178>
    320c:	010b      	lsls	r3, r1, #4
    320e:	1ac0      	subs	r0, r0, r3
    3210:	4152      	adcs	r2, r2
    3212:	08c3      	lsrs	r3, r0, #3
    3214:	428b      	cmp	r3, r1
    3216:	d301      	bcc.n	321c <__divsi3+0x184>
    3218:	00cb      	lsls	r3, r1, #3
    321a:	1ac0      	subs	r0, r0, r3
    321c:	4152      	adcs	r2, r2
    321e:	0883      	lsrs	r3, r0, #2
    3220:	428b      	cmp	r3, r1
    3222:	d301      	bcc.n	3228 <__divsi3+0x190>
    3224:	008b      	lsls	r3, r1, #2
    3226:	1ac0      	subs	r0, r0, r3
    3228:	4152      	adcs	r2, r2
    322a:	d2d9      	bcs.n	31e0 <__divsi3+0x148>
    322c:	0843      	lsrs	r3, r0, #1
    322e:	428b      	cmp	r3, r1
    3230:	d301      	bcc.n	3236 <__divsi3+0x19e>
    3232:	004b      	lsls	r3, r1, #1
    3234:	1ac0      	subs	r0, r0, r3
    3236:	4152      	adcs	r2, r2
    3238:	1a41      	subs	r1, r0, r1
    323a:	d200      	bcs.n	323e <__divsi3+0x1a6>
    323c:	4601      	mov	r1, r0
    323e:	4663      	mov	r3, ip
    3240:	4152      	adcs	r2, r2
    3242:	105b      	asrs	r3, r3, #1
    3244:	4610      	mov	r0, r2
    3246:	d301      	bcc.n	324c <__divsi3+0x1b4>
    3248:	4240      	negs	r0, r0
    324a:	2b00      	cmp	r3, #0
    324c:	d500      	bpl.n	3250 <__divsi3+0x1b8>
    324e:	4249      	negs	r1, r1
    3250:	4770      	bx	lr
    3252:	4663      	mov	r3, ip
    3254:	105b      	asrs	r3, r3, #1
    3256:	d300      	bcc.n	325a <__divsi3+0x1c2>
    3258:	4240      	negs	r0, r0
    325a:	b501      	push	{r0, lr}
    325c:	2000      	movs	r0, #0
    325e:	f000 f805 	bl	326c <__aeabi_idiv0>
    3262:	bd02      	pop	{r1, pc}

00003264 <__aeabi_idivmod>:
    3264:	2900      	cmp	r1, #0
    3266:	d0f8      	beq.n	325a <__divsi3+0x1c2>
    3268:	e716      	b.n	3098 <__divsi3>
    326a:	4770      	bx	lr

0000326c <__aeabi_idiv0>:
    326c:	4770      	bx	lr
    326e:	46c0      	nop			; (mov r8, r8)

00003270 <__aeabi_lmul>:
    3270:	b5f0      	push	{r4, r5, r6, r7, lr}
    3272:	46ce      	mov	lr, r9
    3274:	4647      	mov	r7, r8
    3276:	0415      	lsls	r5, r2, #16
    3278:	0c2d      	lsrs	r5, r5, #16
    327a:	002e      	movs	r6, r5
    327c:	b580      	push	{r7, lr}
    327e:	0407      	lsls	r7, r0, #16
    3280:	0c14      	lsrs	r4, r2, #16
    3282:	0c3f      	lsrs	r7, r7, #16
    3284:	4699      	mov	r9, r3
    3286:	0c03      	lsrs	r3, r0, #16
    3288:	437e      	muls	r6, r7
    328a:	435d      	muls	r5, r3
    328c:	4367      	muls	r7, r4
    328e:	4363      	muls	r3, r4
    3290:	197f      	adds	r7, r7, r5
    3292:	0c34      	lsrs	r4, r6, #16
    3294:	19e4      	adds	r4, r4, r7
    3296:	469c      	mov	ip, r3
    3298:	42a5      	cmp	r5, r4
    329a:	d903      	bls.n	32a4 <__aeabi_lmul+0x34>
    329c:	2380      	movs	r3, #128	; 0x80
    329e:	025b      	lsls	r3, r3, #9
    32a0:	4698      	mov	r8, r3
    32a2:	44c4      	add	ip, r8
    32a4:	464b      	mov	r3, r9
    32a6:	4351      	muls	r1, r2
    32a8:	4343      	muls	r3, r0
    32aa:	0436      	lsls	r6, r6, #16
    32ac:	0c36      	lsrs	r6, r6, #16
    32ae:	0c25      	lsrs	r5, r4, #16
    32b0:	0424      	lsls	r4, r4, #16
    32b2:	4465      	add	r5, ip
    32b4:	19a4      	adds	r4, r4, r6
    32b6:	1859      	adds	r1, r3, r1
    32b8:	1949      	adds	r1, r1, r5
    32ba:	0020      	movs	r0, r4
    32bc:	bc0c      	pop	{r2, r3}
    32be:	4690      	mov	r8, r2
    32c0:	4699      	mov	r9, r3
    32c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032c4 <__aeabi_dadd>:
    32c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32c6:	4645      	mov	r5, r8
    32c8:	46de      	mov	lr, fp
    32ca:	4657      	mov	r7, sl
    32cc:	464e      	mov	r6, r9
    32ce:	030c      	lsls	r4, r1, #12
    32d0:	b5e0      	push	{r5, r6, r7, lr}
    32d2:	004e      	lsls	r6, r1, #1
    32d4:	0fc9      	lsrs	r1, r1, #31
    32d6:	4688      	mov	r8, r1
    32d8:	000d      	movs	r5, r1
    32da:	0a61      	lsrs	r1, r4, #9
    32dc:	0f44      	lsrs	r4, r0, #29
    32de:	430c      	orrs	r4, r1
    32e0:	00c7      	lsls	r7, r0, #3
    32e2:	0319      	lsls	r1, r3, #12
    32e4:	0058      	lsls	r0, r3, #1
    32e6:	0fdb      	lsrs	r3, r3, #31
    32e8:	469b      	mov	fp, r3
    32ea:	0a4b      	lsrs	r3, r1, #9
    32ec:	0f51      	lsrs	r1, r2, #29
    32ee:	430b      	orrs	r3, r1
    32f0:	0d76      	lsrs	r6, r6, #21
    32f2:	0d40      	lsrs	r0, r0, #21
    32f4:	0019      	movs	r1, r3
    32f6:	00d2      	lsls	r2, r2, #3
    32f8:	45d8      	cmp	r8, fp
    32fa:	d100      	bne.n	32fe <__aeabi_dadd+0x3a>
    32fc:	e0ae      	b.n	345c <__aeabi_dadd+0x198>
    32fe:	1a35      	subs	r5, r6, r0
    3300:	2d00      	cmp	r5, #0
    3302:	dc00      	bgt.n	3306 <__aeabi_dadd+0x42>
    3304:	e0f6      	b.n	34f4 <__aeabi_dadd+0x230>
    3306:	2800      	cmp	r0, #0
    3308:	d10f      	bne.n	332a <__aeabi_dadd+0x66>
    330a:	4313      	orrs	r3, r2
    330c:	d100      	bne.n	3310 <__aeabi_dadd+0x4c>
    330e:	e0db      	b.n	34c8 <__aeabi_dadd+0x204>
    3310:	1e6b      	subs	r3, r5, #1
    3312:	2b00      	cmp	r3, #0
    3314:	d000      	beq.n	3318 <__aeabi_dadd+0x54>
    3316:	e137      	b.n	3588 <__aeabi_dadd+0x2c4>
    3318:	1aba      	subs	r2, r7, r2
    331a:	4297      	cmp	r7, r2
    331c:	41bf      	sbcs	r7, r7
    331e:	1a64      	subs	r4, r4, r1
    3320:	427f      	negs	r7, r7
    3322:	1be4      	subs	r4, r4, r7
    3324:	2601      	movs	r6, #1
    3326:	0017      	movs	r7, r2
    3328:	e024      	b.n	3374 <__aeabi_dadd+0xb0>
    332a:	4bc6      	ldr	r3, [pc, #792]	; (3644 <__aeabi_dadd+0x380>)
    332c:	429e      	cmp	r6, r3
    332e:	d04d      	beq.n	33cc <__aeabi_dadd+0x108>
    3330:	2380      	movs	r3, #128	; 0x80
    3332:	041b      	lsls	r3, r3, #16
    3334:	4319      	orrs	r1, r3
    3336:	2d38      	cmp	r5, #56	; 0x38
    3338:	dd00      	ble.n	333c <__aeabi_dadd+0x78>
    333a:	e107      	b.n	354c <__aeabi_dadd+0x288>
    333c:	2d1f      	cmp	r5, #31
    333e:	dd00      	ble.n	3342 <__aeabi_dadd+0x7e>
    3340:	e138      	b.n	35b4 <__aeabi_dadd+0x2f0>
    3342:	2020      	movs	r0, #32
    3344:	1b43      	subs	r3, r0, r5
    3346:	469a      	mov	sl, r3
    3348:	000b      	movs	r3, r1
    334a:	4650      	mov	r0, sl
    334c:	4083      	lsls	r3, r0
    334e:	4699      	mov	r9, r3
    3350:	0013      	movs	r3, r2
    3352:	4648      	mov	r0, r9
    3354:	40eb      	lsrs	r3, r5
    3356:	4318      	orrs	r0, r3
    3358:	0003      	movs	r3, r0
    335a:	4650      	mov	r0, sl
    335c:	4082      	lsls	r2, r0
    335e:	1e50      	subs	r0, r2, #1
    3360:	4182      	sbcs	r2, r0
    3362:	40e9      	lsrs	r1, r5
    3364:	431a      	orrs	r2, r3
    3366:	1aba      	subs	r2, r7, r2
    3368:	1a61      	subs	r1, r4, r1
    336a:	4297      	cmp	r7, r2
    336c:	41a4      	sbcs	r4, r4
    336e:	0017      	movs	r7, r2
    3370:	4264      	negs	r4, r4
    3372:	1b0c      	subs	r4, r1, r4
    3374:	0223      	lsls	r3, r4, #8
    3376:	d562      	bpl.n	343e <__aeabi_dadd+0x17a>
    3378:	0264      	lsls	r4, r4, #9
    337a:	0a65      	lsrs	r5, r4, #9
    337c:	2d00      	cmp	r5, #0
    337e:	d100      	bne.n	3382 <__aeabi_dadd+0xbe>
    3380:	e0df      	b.n	3542 <__aeabi_dadd+0x27e>
    3382:	0028      	movs	r0, r5
    3384:	f001 fbe4 	bl	4b50 <__clzsi2>
    3388:	0003      	movs	r3, r0
    338a:	3b08      	subs	r3, #8
    338c:	2b1f      	cmp	r3, #31
    338e:	dd00      	ble.n	3392 <__aeabi_dadd+0xce>
    3390:	e0d2      	b.n	3538 <__aeabi_dadd+0x274>
    3392:	2220      	movs	r2, #32
    3394:	003c      	movs	r4, r7
    3396:	1ad2      	subs	r2, r2, r3
    3398:	409d      	lsls	r5, r3
    339a:	40d4      	lsrs	r4, r2
    339c:	409f      	lsls	r7, r3
    339e:	4325      	orrs	r5, r4
    33a0:	429e      	cmp	r6, r3
    33a2:	dd00      	ble.n	33a6 <__aeabi_dadd+0xe2>
    33a4:	e0c4      	b.n	3530 <__aeabi_dadd+0x26c>
    33a6:	1b9e      	subs	r6, r3, r6
    33a8:	1c73      	adds	r3, r6, #1
    33aa:	2b1f      	cmp	r3, #31
    33ac:	dd00      	ble.n	33b0 <__aeabi_dadd+0xec>
    33ae:	e0f1      	b.n	3594 <__aeabi_dadd+0x2d0>
    33b0:	2220      	movs	r2, #32
    33b2:	0038      	movs	r0, r7
    33b4:	0029      	movs	r1, r5
    33b6:	1ad2      	subs	r2, r2, r3
    33b8:	40d8      	lsrs	r0, r3
    33ba:	4091      	lsls	r1, r2
    33bc:	4097      	lsls	r7, r2
    33be:	002c      	movs	r4, r5
    33c0:	4301      	orrs	r1, r0
    33c2:	1e78      	subs	r0, r7, #1
    33c4:	4187      	sbcs	r7, r0
    33c6:	40dc      	lsrs	r4, r3
    33c8:	2600      	movs	r6, #0
    33ca:	430f      	orrs	r7, r1
    33cc:	077b      	lsls	r3, r7, #29
    33ce:	d009      	beq.n	33e4 <__aeabi_dadd+0x120>
    33d0:	230f      	movs	r3, #15
    33d2:	403b      	ands	r3, r7
    33d4:	2b04      	cmp	r3, #4
    33d6:	d005      	beq.n	33e4 <__aeabi_dadd+0x120>
    33d8:	1d3b      	adds	r3, r7, #4
    33da:	42bb      	cmp	r3, r7
    33dc:	41bf      	sbcs	r7, r7
    33de:	427f      	negs	r7, r7
    33e0:	19e4      	adds	r4, r4, r7
    33e2:	001f      	movs	r7, r3
    33e4:	0223      	lsls	r3, r4, #8
    33e6:	d52c      	bpl.n	3442 <__aeabi_dadd+0x17e>
    33e8:	4b96      	ldr	r3, [pc, #600]	; (3644 <__aeabi_dadd+0x380>)
    33ea:	3601      	adds	r6, #1
    33ec:	429e      	cmp	r6, r3
    33ee:	d100      	bne.n	33f2 <__aeabi_dadd+0x12e>
    33f0:	e09a      	b.n	3528 <__aeabi_dadd+0x264>
    33f2:	4645      	mov	r5, r8
    33f4:	4b94      	ldr	r3, [pc, #592]	; (3648 <__aeabi_dadd+0x384>)
    33f6:	08ff      	lsrs	r7, r7, #3
    33f8:	401c      	ands	r4, r3
    33fa:	0760      	lsls	r0, r4, #29
    33fc:	0576      	lsls	r6, r6, #21
    33fe:	0264      	lsls	r4, r4, #9
    3400:	4307      	orrs	r7, r0
    3402:	0b24      	lsrs	r4, r4, #12
    3404:	0d76      	lsrs	r6, r6, #21
    3406:	2100      	movs	r1, #0
    3408:	0324      	lsls	r4, r4, #12
    340a:	0b23      	lsrs	r3, r4, #12
    340c:	0d0c      	lsrs	r4, r1, #20
    340e:	4a8f      	ldr	r2, [pc, #572]	; (364c <__aeabi_dadd+0x388>)
    3410:	0524      	lsls	r4, r4, #20
    3412:	431c      	orrs	r4, r3
    3414:	4014      	ands	r4, r2
    3416:	0533      	lsls	r3, r6, #20
    3418:	4323      	orrs	r3, r4
    341a:	005b      	lsls	r3, r3, #1
    341c:	07ed      	lsls	r5, r5, #31
    341e:	085b      	lsrs	r3, r3, #1
    3420:	432b      	orrs	r3, r5
    3422:	0038      	movs	r0, r7
    3424:	0019      	movs	r1, r3
    3426:	bc3c      	pop	{r2, r3, r4, r5}
    3428:	4690      	mov	r8, r2
    342a:	4699      	mov	r9, r3
    342c:	46a2      	mov	sl, r4
    342e:	46ab      	mov	fp, r5
    3430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3432:	4664      	mov	r4, ip
    3434:	4304      	orrs	r4, r0
    3436:	d100      	bne.n	343a <__aeabi_dadd+0x176>
    3438:	e211      	b.n	385e <__aeabi_dadd+0x59a>
    343a:	0004      	movs	r4, r0
    343c:	4667      	mov	r7, ip
    343e:	077b      	lsls	r3, r7, #29
    3440:	d1c6      	bne.n	33d0 <__aeabi_dadd+0x10c>
    3442:	4645      	mov	r5, r8
    3444:	0760      	lsls	r0, r4, #29
    3446:	08ff      	lsrs	r7, r7, #3
    3448:	4307      	orrs	r7, r0
    344a:	08e4      	lsrs	r4, r4, #3
    344c:	4b7d      	ldr	r3, [pc, #500]	; (3644 <__aeabi_dadd+0x380>)
    344e:	429e      	cmp	r6, r3
    3450:	d030      	beq.n	34b4 <__aeabi_dadd+0x1f0>
    3452:	0324      	lsls	r4, r4, #12
    3454:	0576      	lsls	r6, r6, #21
    3456:	0b24      	lsrs	r4, r4, #12
    3458:	0d76      	lsrs	r6, r6, #21
    345a:	e7d4      	b.n	3406 <__aeabi_dadd+0x142>
    345c:	1a33      	subs	r3, r6, r0
    345e:	469a      	mov	sl, r3
    3460:	2b00      	cmp	r3, #0
    3462:	dd78      	ble.n	3556 <__aeabi_dadd+0x292>
    3464:	2800      	cmp	r0, #0
    3466:	d031      	beq.n	34cc <__aeabi_dadd+0x208>
    3468:	4876      	ldr	r0, [pc, #472]	; (3644 <__aeabi_dadd+0x380>)
    346a:	4286      	cmp	r6, r0
    346c:	d0ae      	beq.n	33cc <__aeabi_dadd+0x108>
    346e:	2080      	movs	r0, #128	; 0x80
    3470:	0400      	lsls	r0, r0, #16
    3472:	4301      	orrs	r1, r0
    3474:	4653      	mov	r3, sl
    3476:	2b38      	cmp	r3, #56	; 0x38
    3478:	dc00      	bgt.n	347c <__aeabi_dadd+0x1b8>
    347a:	e0e9      	b.n	3650 <__aeabi_dadd+0x38c>
    347c:	430a      	orrs	r2, r1
    347e:	1e51      	subs	r1, r2, #1
    3480:	418a      	sbcs	r2, r1
    3482:	2100      	movs	r1, #0
    3484:	19d2      	adds	r2, r2, r7
    3486:	42ba      	cmp	r2, r7
    3488:	41bf      	sbcs	r7, r7
    348a:	1909      	adds	r1, r1, r4
    348c:	427c      	negs	r4, r7
    348e:	0017      	movs	r7, r2
    3490:	190c      	adds	r4, r1, r4
    3492:	0223      	lsls	r3, r4, #8
    3494:	d5d3      	bpl.n	343e <__aeabi_dadd+0x17a>
    3496:	4b6b      	ldr	r3, [pc, #428]	; (3644 <__aeabi_dadd+0x380>)
    3498:	3601      	adds	r6, #1
    349a:	429e      	cmp	r6, r3
    349c:	d100      	bne.n	34a0 <__aeabi_dadd+0x1dc>
    349e:	e13a      	b.n	3716 <__aeabi_dadd+0x452>
    34a0:	2001      	movs	r0, #1
    34a2:	4b69      	ldr	r3, [pc, #420]	; (3648 <__aeabi_dadd+0x384>)
    34a4:	401c      	ands	r4, r3
    34a6:	087b      	lsrs	r3, r7, #1
    34a8:	4007      	ands	r7, r0
    34aa:	431f      	orrs	r7, r3
    34ac:	07e0      	lsls	r0, r4, #31
    34ae:	4307      	orrs	r7, r0
    34b0:	0864      	lsrs	r4, r4, #1
    34b2:	e78b      	b.n	33cc <__aeabi_dadd+0x108>
    34b4:	0023      	movs	r3, r4
    34b6:	433b      	orrs	r3, r7
    34b8:	d100      	bne.n	34bc <__aeabi_dadd+0x1f8>
    34ba:	e1cb      	b.n	3854 <__aeabi_dadd+0x590>
    34bc:	2280      	movs	r2, #128	; 0x80
    34be:	0312      	lsls	r2, r2, #12
    34c0:	4314      	orrs	r4, r2
    34c2:	0324      	lsls	r4, r4, #12
    34c4:	0b24      	lsrs	r4, r4, #12
    34c6:	e79e      	b.n	3406 <__aeabi_dadd+0x142>
    34c8:	002e      	movs	r6, r5
    34ca:	e77f      	b.n	33cc <__aeabi_dadd+0x108>
    34cc:	0008      	movs	r0, r1
    34ce:	4310      	orrs	r0, r2
    34d0:	d100      	bne.n	34d4 <__aeabi_dadd+0x210>
    34d2:	e0b4      	b.n	363e <__aeabi_dadd+0x37a>
    34d4:	1e58      	subs	r0, r3, #1
    34d6:	2800      	cmp	r0, #0
    34d8:	d000      	beq.n	34dc <__aeabi_dadd+0x218>
    34da:	e0de      	b.n	369a <__aeabi_dadd+0x3d6>
    34dc:	18ba      	adds	r2, r7, r2
    34de:	42ba      	cmp	r2, r7
    34e0:	419b      	sbcs	r3, r3
    34e2:	1864      	adds	r4, r4, r1
    34e4:	425b      	negs	r3, r3
    34e6:	18e4      	adds	r4, r4, r3
    34e8:	0017      	movs	r7, r2
    34ea:	2601      	movs	r6, #1
    34ec:	0223      	lsls	r3, r4, #8
    34ee:	d5a6      	bpl.n	343e <__aeabi_dadd+0x17a>
    34f0:	2602      	movs	r6, #2
    34f2:	e7d5      	b.n	34a0 <__aeabi_dadd+0x1dc>
    34f4:	2d00      	cmp	r5, #0
    34f6:	d16e      	bne.n	35d6 <__aeabi_dadd+0x312>
    34f8:	1c70      	adds	r0, r6, #1
    34fa:	0540      	lsls	r0, r0, #21
    34fc:	0d40      	lsrs	r0, r0, #21
    34fe:	2801      	cmp	r0, #1
    3500:	dc00      	bgt.n	3504 <__aeabi_dadd+0x240>
    3502:	e0f9      	b.n	36f8 <__aeabi_dadd+0x434>
    3504:	1ab8      	subs	r0, r7, r2
    3506:	4684      	mov	ip, r0
    3508:	4287      	cmp	r7, r0
    350a:	4180      	sbcs	r0, r0
    350c:	1ae5      	subs	r5, r4, r3
    350e:	4240      	negs	r0, r0
    3510:	1a2d      	subs	r5, r5, r0
    3512:	0228      	lsls	r0, r5, #8
    3514:	d400      	bmi.n	3518 <__aeabi_dadd+0x254>
    3516:	e089      	b.n	362c <__aeabi_dadd+0x368>
    3518:	1bd7      	subs	r7, r2, r7
    351a:	42ba      	cmp	r2, r7
    351c:	4192      	sbcs	r2, r2
    351e:	1b1c      	subs	r4, r3, r4
    3520:	4252      	negs	r2, r2
    3522:	1aa5      	subs	r5, r4, r2
    3524:	46d8      	mov	r8, fp
    3526:	e729      	b.n	337c <__aeabi_dadd+0xb8>
    3528:	4645      	mov	r5, r8
    352a:	2400      	movs	r4, #0
    352c:	2700      	movs	r7, #0
    352e:	e76a      	b.n	3406 <__aeabi_dadd+0x142>
    3530:	4c45      	ldr	r4, [pc, #276]	; (3648 <__aeabi_dadd+0x384>)
    3532:	1af6      	subs	r6, r6, r3
    3534:	402c      	ands	r4, r5
    3536:	e749      	b.n	33cc <__aeabi_dadd+0x108>
    3538:	003d      	movs	r5, r7
    353a:	3828      	subs	r0, #40	; 0x28
    353c:	4085      	lsls	r5, r0
    353e:	2700      	movs	r7, #0
    3540:	e72e      	b.n	33a0 <__aeabi_dadd+0xdc>
    3542:	0038      	movs	r0, r7
    3544:	f001 fb04 	bl	4b50 <__clzsi2>
    3548:	3020      	adds	r0, #32
    354a:	e71d      	b.n	3388 <__aeabi_dadd+0xc4>
    354c:	430a      	orrs	r2, r1
    354e:	1e51      	subs	r1, r2, #1
    3550:	418a      	sbcs	r2, r1
    3552:	2100      	movs	r1, #0
    3554:	e707      	b.n	3366 <__aeabi_dadd+0xa2>
    3556:	2b00      	cmp	r3, #0
    3558:	d000      	beq.n	355c <__aeabi_dadd+0x298>
    355a:	e0f3      	b.n	3744 <__aeabi_dadd+0x480>
    355c:	1c70      	adds	r0, r6, #1
    355e:	0543      	lsls	r3, r0, #21
    3560:	0d5b      	lsrs	r3, r3, #21
    3562:	2b01      	cmp	r3, #1
    3564:	dc00      	bgt.n	3568 <__aeabi_dadd+0x2a4>
    3566:	e0ad      	b.n	36c4 <__aeabi_dadd+0x400>
    3568:	4b36      	ldr	r3, [pc, #216]	; (3644 <__aeabi_dadd+0x380>)
    356a:	4298      	cmp	r0, r3
    356c:	d100      	bne.n	3570 <__aeabi_dadd+0x2ac>
    356e:	e0d1      	b.n	3714 <__aeabi_dadd+0x450>
    3570:	18ba      	adds	r2, r7, r2
    3572:	42ba      	cmp	r2, r7
    3574:	41bf      	sbcs	r7, r7
    3576:	1864      	adds	r4, r4, r1
    3578:	427f      	negs	r7, r7
    357a:	19e4      	adds	r4, r4, r7
    357c:	07e7      	lsls	r7, r4, #31
    357e:	0852      	lsrs	r2, r2, #1
    3580:	4317      	orrs	r7, r2
    3582:	0864      	lsrs	r4, r4, #1
    3584:	0006      	movs	r6, r0
    3586:	e721      	b.n	33cc <__aeabi_dadd+0x108>
    3588:	482e      	ldr	r0, [pc, #184]	; (3644 <__aeabi_dadd+0x380>)
    358a:	4285      	cmp	r5, r0
    358c:	d100      	bne.n	3590 <__aeabi_dadd+0x2cc>
    358e:	e093      	b.n	36b8 <__aeabi_dadd+0x3f4>
    3590:	001d      	movs	r5, r3
    3592:	e6d0      	b.n	3336 <__aeabi_dadd+0x72>
    3594:	0029      	movs	r1, r5
    3596:	3e1f      	subs	r6, #31
    3598:	40f1      	lsrs	r1, r6
    359a:	2b20      	cmp	r3, #32
    359c:	d100      	bne.n	35a0 <__aeabi_dadd+0x2dc>
    359e:	e08d      	b.n	36bc <__aeabi_dadd+0x3f8>
    35a0:	2240      	movs	r2, #64	; 0x40
    35a2:	1ad3      	subs	r3, r2, r3
    35a4:	409d      	lsls	r5, r3
    35a6:	432f      	orrs	r7, r5
    35a8:	1e7d      	subs	r5, r7, #1
    35aa:	41af      	sbcs	r7, r5
    35ac:	2400      	movs	r4, #0
    35ae:	430f      	orrs	r7, r1
    35b0:	2600      	movs	r6, #0
    35b2:	e744      	b.n	343e <__aeabi_dadd+0x17a>
    35b4:	002b      	movs	r3, r5
    35b6:	0008      	movs	r0, r1
    35b8:	3b20      	subs	r3, #32
    35ba:	40d8      	lsrs	r0, r3
    35bc:	0003      	movs	r3, r0
    35be:	2d20      	cmp	r5, #32
    35c0:	d100      	bne.n	35c4 <__aeabi_dadd+0x300>
    35c2:	e07d      	b.n	36c0 <__aeabi_dadd+0x3fc>
    35c4:	2040      	movs	r0, #64	; 0x40
    35c6:	1b45      	subs	r5, r0, r5
    35c8:	40a9      	lsls	r1, r5
    35ca:	430a      	orrs	r2, r1
    35cc:	1e51      	subs	r1, r2, #1
    35ce:	418a      	sbcs	r2, r1
    35d0:	2100      	movs	r1, #0
    35d2:	431a      	orrs	r2, r3
    35d4:	e6c7      	b.n	3366 <__aeabi_dadd+0xa2>
    35d6:	2e00      	cmp	r6, #0
    35d8:	d050      	beq.n	367c <__aeabi_dadd+0x3b8>
    35da:	4e1a      	ldr	r6, [pc, #104]	; (3644 <__aeabi_dadd+0x380>)
    35dc:	42b0      	cmp	r0, r6
    35de:	d057      	beq.n	3690 <__aeabi_dadd+0x3cc>
    35e0:	2680      	movs	r6, #128	; 0x80
    35e2:	426b      	negs	r3, r5
    35e4:	4699      	mov	r9, r3
    35e6:	0436      	lsls	r6, r6, #16
    35e8:	4334      	orrs	r4, r6
    35ea:	464b      	mov	r3, r9
    35ec:	2b38      	cmp	r3, #56	; 0x38
    35ee:	dd00      	ble.n	35f2 <__aeabi_dadd+0x32e>
    35f0:	e0d6      	b.n	37a0 <__aeabi_dadd+0x4dc>
    35f2:	2b1f      	cmp	r3, #31
    35f4:	dd00      	ble.n	35f8 <__aeabi_dadd+0x334>
    35f6:	e135      	b.n	3864 <__aeabi_dadd+0x5a0>
    35f8:	2620      	movs	r6, #32
    35fa:	1af5      	subs	r5, r6, r3
    35fc:	0026      	movs	r6, r4
    35fe:	40ae      	lsls	r6, r5
    3600:	46b2      	mov	sl, r6
    3602:	003e      	movs	r6, r7
    3604:	40de      	lsrs	r6, r3
    3606:	46ac      	mov	ip, r5
    3608:	0035      	movs	r5, r6
    360a:	4656      	mov	r6, sl
    360c:	432e      	orrs	r6, r5
    360e:	4665      	mov	r5, ip
    3610:	40af      	lsls	r7, r5
    3612:	1e7d      	subs	r5, r7, #1
    3614:	41af      	sbcs	r7, r5
    3616:	40dc      	lsrs	r4, r3
    3618:	4337      	orrs	r7, r6
    361a:	1bd7      	subs	r7, r2, r7
    361c:	42ba      	cmp	r2, r7
    361e:	4192      	sbcs	r2, r2
    3620:	1b0c      	subs	r4, r1, r4
    3622:	4252      	negs	r2, r2
    3624:	1aa4      	subs	r4, r4, r2
    3626:	0006      	movs	r6, r0
    3628:	46d8      	mov	r8, fp
    362a:	e6a3      	b.n	3374 <__aeabi_dadd+0xb0>
    362c:	4664      	mov	r4, ip
    362e:	4667      	mov	r7, ip
    3630:	432c      	orrs	r4, r5
    3632:	d000      	beq.n	3636 <__aeabi_dadd+0x372>
    3634:	e6a2      	b.n	337c <__aeabi_dadd+0xb8>
    3636:	2500      	movs	r5, #0
    3638:	2600      	movs	r6, #0
    363a:	2700      	movs	r7, #0
    363c:	e706      	b.n	344c <__aeabi_dadd+0x188>
    363e:	001e      	movs	r6, r3
    3640:	e6c4      	b.n	33cc <__aeabi_dadd+0x108>
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	000007ff 	.word	0x000007ff
    3648:	ff7fffff 	.word	0xff7fffff
    364c:	800fffff 	.word	0x800fffff
    3650:	2b1f      	cmp	r3, #31
    3652:	dc63      	bgt.n	371c <__aeabi_dadd+0x458>
    3654:	2020      	movs	r0, #32
    3656:	1ac3      	subs	r3, r0, r3
    3658:	0008      	movs	r0, r1
    365a:	4098      	lsls	r0, r3
    365c:	469c      	mov	ip, r3
    365e:	4683      	mov	fp, r0
    3660:	4653      	mov	r3, sl
    3662:	0010      	movs	r0, r2
    3664:	40d8      	lsrs	r0, r3
    3666:	0003      	movs	r3, r0
    3668:	4658      	mov	r0, fp
    366a:	4318      	orrs	r0, r3
    366c:	4663      	mov	r3, ip
    366e:	409a      	lsls	r2, r3
    3670:	1e53      	subs	r3, r2, #1
    3672:	419a      	sbcs	r2, r3
    3674:	4653      	mov	r3, sl
    3676:	4302      	orrs	r2, r0
    3678:	40d9      	lsrs	r1, r3
    367a:	e703      	b.n	3484 <__aeabi_dadd+0x1c0>
    367c:	0026      	movs	r6, r4
    367e:	433e      	orrs	r6, r7
    3680:	d006      	beq.n	3690 <__aeabi_dadd+0x3cc>
    3682:	43eb      	mvns	r3, r5
    3684:	4699      	mov	r9, r3
    3686:	2b00      	cmp	r3, #0
    3688:	d0c7      	beq.n	361a <__aeabi_dadd+0x356>
    368a:	4e94      	ldr	r6, [pc, #592]	; (38dc <__aeabi_dadd+0x618>)
    368c:	42b0      	cmp	r0, r6
    368e:	d1ac      	bne.n	35ea <__aeabi_dadd+0x326>
    3690:	000c      	movs	r4, r1
    3692:	0017      	movs	r7, r2
    3694:	0006      	movs	r6, r0
    3696:	46d8      	mov	r8, fp
    3698:	e698      	b.n	33cc <__aeabi_dadd+0x108>
    369a:	4b90      	ldr	r3, [pc, #576]	; (38dc <__aeabi_dadd+0x618>)
    369c:	459a      	cmp	sl, r3
    369e:	d00b      	beq.n	36b8 <__aeabi_dadd+0x3f4>
    36a0:	4682      	mov	sl, r0
    36a2:	e6e7      	b.n	3474 <__aeabi_dadd+0x1b0>
    36a4:	2800      	cmp	r0, #0
    36a6:	d000      	beq.n	36aa <__aeabi_dadd+0x3e6>
    36a8:	e09e      	b.n	37e8 <__aeabi_dadd+0x524>
    36aa:	0018      	movs	r0, r3
    36ac:	4310      	orrs	r0, r2
    36ae:	d100      	bne.n	36b2 <__aeabi_dadd+0x3ee>
    36b0:	e0e9      	b.n	3886 <__aeabi_dadd+0x5c2>
    36b2:	001c      	movs	r4, r3
    36b4:	0017      	movs	r7, r2
    36b6:	46d8      	mov	r8, fp
    36b8:	4e88      	ldr	r6, [pc, #544]	; (38dc <__aeabi_dadd+0x618>)
    36ba:	e687      	b.n	33cc <__aeabi_dadd+0x108>
    36bc:	2500      	movs	r5, #0
    36be:	e772      	b.n	35a6 <__aeabi_dadd+0x2e2>
    36c0:	2100      	movs	r1, #0
    36c2:	e782      	b.n	35ca <__aeabi_dadd+0x306>
    36c4:	0023      	movs	r3, r4
    36c6:	433b      	orrs	r3, r7
    36c8:	2e00      	cmp	r6, #0
    36ca:	d000      	beq.n	36ce <__aeabi_dadd+0x40a>
    36cc:	e0ab      	b.n	3826 <__aeabi_dadd+0x562>
    36ce:	2b00      	cmp	r3, #0
    36d0:	d100      	bne.n	36d4 <__aeabi_dadd+0x410>
    36d2:	e0e7      	b.n	38a4 <__aeabi_dadd+0x5e0>
    36d4:	000b      	movs	r3, r1
    36d6:	4313      	orrs	r3, r2
    36d8:	d100      	bne.n	36dc <__aeabi_dadd+0x418>
    36da:	e677      	b.n	33cc <__aeabi_dadd+0x108>
    36dc:	18ba      	adds	r2, r7, r2
    36de:	42ba      	cmp	r2, r7
    36e0:	41bf      	sbcs	r7, r7
    36e2:	1864      	adds	r4, r4, r1
    36e4:	427f      	negs	r7, r7
    36e6:	19e4      	adds	r4, r4, r7
    36e8:	0223      	lsls	r3, r4, #8
    36ea:	d400      	bmi.n	36ee <__aeabi_dadd+0x42a>
    36ec:	e0f2      	b.n	38d4 <__aeabi_dadd+0x610>
    36ee:	4b7c      	ldr	r3, [pc, #496]	; (38e0 <__aeabi_dadd+0x61c>)
    36f0:	0017      	movs	r7, r2
    36f2:	401c      	ands	r4, r3
    36f4:	0006      	movs	r6, r0
    36f6:	e669      	b.n	33cc <__aeabi_dadd+0x108>
    36f8:	0020      	movs	r0, r4
    36fa:	4338      	orrs	r0, r7
    36fc:	2e00      	cmp	r6, #0
    36fe:	d1d1      	bne.n	36a4 <__aeabi_dadd+0x3e0>
    3700:	2800      	cmp	r0, #0
    3702:	d15b      	bne.n	37bc <__aeabi_dadd+0x4f8>
    3704:	001c      	movs	r4, r3
    3706:	4314      	orrs	r4, r2
    3708:	d100      	bne.n	370c <__aeabi_dadd+0x448>
    370a:	e0a8      	b.n	385e <__aeabi_dadd+0x59a>
    370c:	001c      	movs	r4, r3
    370e:	0017      	movs	r7, r2
    3710:	46d8      	mov	r8, fp
    3712:	e65b      	b.n	33cc <__aeabi_dadd+0x108>
    3714:	0006      	movs	r6, r0
    3716:	2400      	movs	r4, #0
    3718:	2700      	movs	r7, #0
    371a:	e697      	b.n	344c <__aeabi_dadd+0x188>
    371c:	4650      	mov	r0, sl
    371e:	000b      	movs	r3, r1
    3720:	3820      	subs	r0, #32
    3722:	40c3      	lsrs	r3, r0
    3724:	4699      	mov	r9, r3
    3726:	4653      	mov	r3, sl
    3728:	2b20      	cmp	r3, #32
    372a:	d100      	bne.n	372e <__aeabi_dadd+0x46a>
    372c:	e095      	b.n	385a <__aeabi_dadd+0x596>
    372e:	2340      	movs	r3, #64	; 0x40
    3730:	4650      	mov	r0, sl
    3732:	1a1b      	subs	r3, r3, r0
    3734:	4099      	lsls	r1, r3
    3736:	430a      	orrs	r2, r1
    3738:	1e51      	subs	r1, r2, #1
    373a:	418a      	sbcs	r2, r1
    373c:	464b      	mov	r3, r9
    373e:	2100      	movs	r1, #0
    3740:	431a      	orrs	r2, r3
    3742:	e69f      	b.n	3484 <__aeabi_dadd+0x1c0>
    3744:	2e00      	cmp	r6, #0
    3746:	d130      	bne.n	37aa <__aeabi_dadd+0x4e6>
    3748:	0026      	movs	r6, r4
    374a:	433e      	orrs	r6, r7
    374c:	d067      	beq.n	381e <__aeabi_dadd+0x55a>
    374e:	43db      	mvns	r3, r3
    3750:	469a      	mov	sl, r3
    3752:	2b00      	cmp	r3, #0
    3754:	d01c      	beq.n	3790 <__aeabi_dadd+0x4cc>
    3756:	4e61      	ldr	r6, [pc, #388]	; (38dc <__aeabi_dadd+0x618>)
    3758:	42b0      	cmp	r0, r6
    375a:	d060      	beq.n	381e <__aeabi_dadd+0x55a>
    375c:	4653      	mov	r3, sl
    375e:	2b38      	cmp	r3, #56	; 0x38
    3760:	dd00      	ble.n	3764 <__aeabi_dadd+0x4a0>
    3762:	e096      	b.n	3892 <__aeabi_dadd+0x5ce>
    3764:	2b1f      	cmp	r3, #31
    3766:	dd00      	ble.n	376a <__aeabi_dadd+0x4a6>
    3768:	e09f      	b.n	38aa <__aeabi_dadd+0x5e6>
    376a:	2620      	movs	r6, #32
    376c:	1af3      	subs	r3, r6, r3
    376e:	0026      	movs	r6, r4
    3770:	409e      	lsls	r6, r3
    3772:	469c      	mov	ip, r3
    3774:	46b3      	mov	fp, r6
    3776:	4653      	mov	r3, sl
    3778:	003e      	movs	r6, r7
    377a:	40de      	lsrs	r6, r3
    377c:	0033      	movs	r3, r6
    377e:	465e      	mov	r6, fp
    3780:	431e      	orrs	r6, r3
    3782:	4663      	mov	r3, ip
    3784:	409f      	lsls	r7, r3
    3786:	1e7b      	subs	r3, r7, #1
    3788:	419f      	sbcs	r7, r3
    378a:	4653      	mov	r3, sl
    378c:	40dc      	lsrs	r4, r3
    378e:	4337      	orrs	r7, r6
    3790:	18bf      	adds	r7, r7, r2
    3792:	4297      	cmp	r7, r2
    3794:	4192      	sbcs	r2, r2
    3796:	1864      	adds	r4, r4, r1
    3798:	4252      	negs	r2, r2
    379a:	18a4      	adds	r4, r4, r2
    379c:	0006      	movs	r6, r0
    379e:	e678      	b.n	3492 <__aeabi_dadd+0x1ce>
    37a0:	4327      	orrs	r7, r4
    37a2:	1e7c      	subs	r4, r7, #1
    37a4:	41a7      	sbcs	r7, r4
    37a6:	2400      	movs	r4, #0
    37a8:	e737      	b.n	361a <__aeabi_dadd+0x356>
    37aa:	4e4c      	ldr	r6, [pc, #304]	; (38dc <__aeabi_dadd+0x618>)
    37ac:	42b0      	cmp	r0, r6
    37ae:	d036      	beq.n	381e <__aeabi_dadd+0x55a>
    37b0:	2680      	movs	r6, #128	; 0x80
    37b2:	425b      	negs	r3, r3
    37b4:	0436      	lsls	r6, r6, #16
    37b6:	469a      	mov	sl, r3
    37b8:	4334      	orrs	r4, r6
    37ba:	e7cf      	b.n	375c <__aeabi_dadd+0x498>
    37bc:	0018      	movs	r0, r3
    37be:	4310      	orrs	r0, r2
    37c0:	d100      	bne.n	37c4 <__aeabi_dadd+0x500>
    37c2:	e603      	b.n	33cc <__aeabi_dadd+0x108>
    37c4:	1ab8      	subs	r0, r7, r2
    37c6:	4684      	mov	ip, r0
    37c8:	4567      	cmp	r7, ip
    37ca:	41ad      	sbcs	r5, r5
    37cc:	1ae0      	subs	r0, r4, r3
    37ce:	426d      	negs	r5, r5
    37d0:	1b40      	subs	r0, r0, r5
    37d2:	0205      	lsls	r5, r0, #8
    37d4:	d400      	bmi.n	37d8 <__aeabi_dadd+0x514>
    37d6:	e62c      	b.n	3432 <__aeabi_dadd+0x16e>
    37d8:	1bd7      	subs	r7, r2, r7
    37da:	42ba      	cmp	r2, r7
    37dc:	4192      	sbcs	r2, r2
    37de:	1b1c      	subs	r4, r3, r4
    37e0:	4252      	negs	r2, r2
    37e2:	1aa4      	subs	r4, r4, r2
    37e4:	46d8      	mov	r8, fp
    37e6:	e5f1      	b.n	33cc <__aeabi_dadd+0x108>
    37e8:	0018      	movs	r0, r3
    37ea:	4310      	orrs	r0, r2
    37ec:	d100      	bne.n	37f0 <__aeabi_dadd+0x52c>
    37ee:	e763      	b.n	36b8 <__aeabi_dadd+0x3f4>
    37f0:	08f8      	lsrs	r0, r7, #3
    37f2:	0767      	lsls	r7, r4, #29
    37f4:	4307      	orrs	r7, r0
    37f6:	2080      	movs	r0, #128	; 0x80
    37f8:	08e4      	lsrs	r4, r4, #3
    37fa:	0300      	lsls	r0, r0, #12
    37fc:	4204      	tst	r4, r0
    37fe:	d008      	beq.n	3812 <__aeabi_dadd+0x54e>
    3800:	08dd      	lsrs	r5, r3, #3
    3802:	4205      	tst	r5, r0
    3804:	d105      	bne.n	3812 <__aeabi_dadd+0x54e>
    3806:	08d2      	lsrs	r2, r2, #3
    3808:	0759      	lsls	r1, r3, #29
    380a:	4311      	orrs	r1, r2
    380c:	000f      	movs	r7, r1
    380e:	002c      	movs	r4, r5
    3810:	46d8      	mov	r8, fp
    3812:	0f7b      	lsrs	r3, r7, #29
    3814:	00e4      	lsls	r4, r4, #3
    3816:	431c      	orrs	r4, r3
    3818:	00ff      	lsls	r7, r7, #3
    381a:	4e30      	ldr	r6, [pc, #192]	; (38dc <__aeabi_dadd+0x618>)
    381c:	e5d6      	b.n	33cc <__aeabi_dadd+0x108>
    381e:	000c      	movs	r4, r1
    3820:	0017      	movs	r7, r2
    3822:	0006      	movs	r6, r0
    3824:	e5d2      	b.n	33cc <__aeabi_dadd+0x108>
    3826:	2b00      	cmp	r3, #0
    3828:	d038      	beq.n	389c <__aeabi_dadd+0x5d8>
    382a:	000b      	movs	r3, r1
    382c:	4313      	orrs	r3, r2
    382e:	d100      	bne.n	3832 <__aeabi_dadd+0x56e>
    3830:	e742      	b.n	36b8 <__aeabi_dadd+0x3f4>
    3832:	08f8      	lsrs	r0, r7, #3
    3834:	0767      	lsls	r7, r4, #29
    3836:	4307      	orrs	r7, r0
    3838:	2080      	movs	r0, #128	; 0x80
    383a:	08e4      	lsrs	r4, r4, #3
    383c:	0300      	lsls	r0, r0, #12
    383e:	4204      	tst	r4, r0
    3840:	d0e7      	beq.n	3812 <__aeabi_dadd+0x54e>
    3842:	08cb      	lsrs	r3, r1, #3
    3844:	4203      	tst	r3, r0
    3846:	d1e4      	bne.n	3812 <__aeabi_dadd+0x54e>
    3848:	08d2      	lsrs	r2, r2, #3
    384a:	0749      	lsls	r1, r1, #29
    384c:	4311      	orrs	r1, r2
    384e:	000f      	movs	r7, r1
    3850:	001c      	movs	r4, r3
    3852:	e7de      	b.n	3812 <__aeabi_dadd+0x54e>
    3854:	2700      	movs	r7, #0
    3856:	2400      	movs	r4, #0
    3858:	e5d5      	b.n	3406 <__aeabi_dadd+0x142>
    385a:	2100      	movs	r1, #0
    385c:	e76b      	b.n	3736 <__aeabi_dadd+0x472>
    385e:	2500      	movs	r5, #0
    3860:	2700      	movs	r7, #0
    3862:	e5f3      	b.n	344c <__aeabi_dadd+0x188>
    3864:	464e      	mov	r6, r9
    3866:	0025      	movs	r5, r4
    3868:	3e20      	subs	r6, #32
    386a:	40f5      	lsrs	r5, r6
    386c:	464b      	mov	r3, r9
    386e:	002e      	movs	r6, r5
    3870:	2b20      	cmp	r3, #32
    3872:	d02d      	beq.n	38d0 <__aeabi_dadd+0x60c>
    3874:	2540      	movs	r5, #64	; 0x40
    3876:	1aed      	subs	r5, r5, r3
    3878:	40ac      	lsls	r4, r5
    387a:	4327      	orrs	r7, r4
    387c:	1e7c      	subs	r4, r7, #1
    387e:	41a7      	sbcs	r7, r4
    3880:	2400      	movs	r4, #0
    3882:	4337      	orrs	r7, r6
    3884:	e6c9      	b.n	361a <__aeabi_dadd+0x356>
    3886:	2480      	movs	r4, #128	; 0x80
    3888:	2500      	movs	r5, #0
    388a:	0324      	lsls	r4, r4, #12
    388c:	4e13      	ldr	r6, [pc, #76]	; (38dc <__aeabi_dadd+0x618>)
    388e:	2700      	movs	r7, #0
    3890:	e5dc      	b.n	344c <__aeabi_dadd+0x188>
    3892:	4327      	orrs	r7, r4
    3894:	1e7c      	subs	r4, r7, #1
    3896:	41a7      	sbcs	r7, r4
    3898:	2400      	movs	r4, #0
    389a:	e779      	b.n	3790 <__aeabi_dadd+0x4cc>
    389c:	000c      	movs	r4, r1
    389e:	0017      	movs	r7, r2
    38a0:	4e0e      	ldr	r6, [pc, #56]	; (38dc <__aeabi_dadd+0x618>)
    38a2:	e593      	b.n	33cc <__aeabi_dadd+0x108>
    38a4:	000c      	movs	r4, r1
    38a6:	0017      	movs	r7, r2
    38a8:	e590      	b.n	33cc <__aeabi_dadd+0x108>
    38aa:	4656      	mov	r6, sl
    38ac:	0023      	movs	r3, r4
    38ae:	3e20      	subs	r6, #32
    38b0:	40f3      	lsrs	r3, r6
    38b2:	4699      	mov	r9, r3
    38b4:	4653      	mov	r3, sl
    38b6:	2b20      	cmp	r3, #32
    38b8:	d00e      	beq.n	38d8 <__aeabi_dadd+0x614>
    38ba:	2340      	movs	r3, #64	; 0x40
    38bc:	4656      	mov	r6, sl
    38be:	1b9b      	subs	r3, r3, r6
    38c0:	409c      	lsls	r4, r3
    38c2:	4327      	orrs	r7, r4
    38c4:	1e7c      	subs	r4, r7, #1
    38c6:	41a7      	sbcs	r7, r4
    38c8:	464b      	mov	r3, r9
    38ca:	2400      	movs	r4, #0
    38cc:	431f      	orrs	r7, r3
    38ce:	e75f      	b.n	3790 <__aeabi_dadd+0x4cc>
    38d0:	2400      	movs	r4, #0
    38d2:	e7d2      	b.n	387a <__aeabi_dadd+0x5b6>
    38d4:	0017      	movs	r7, r2
    38d6:	e5b2      	b.n	343e <__aeabi_dadd+0x17a>
    38d8:	2400      	movs	r4, #0
    38da:	e7f2      	b.n	38c2 <__aeabi_dadd+0x5fe>
    38dc:	000007ff 	.word	0x000007ff
    38e0:	ff7fffff 	.word	0xff7fffff

000038e4 <__aeabi_ddiv>:
    38e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38e6:	4657      	mov	r7, sl
    38e8:	4645      	mov	r5, r8
    38ea:	46de      	mov	lr, fp
    38ec:	464e      	mov	r6, r9
    38ee:	b5e0      	push	{r5, r6, r7, lr}
    38f0:	004c      	lsls	r4, r1, #1
    38f2:	030e      	lsls	r6, r1, #12
    38f4:	b087      	sub	sp, #28
    38f6:	4683      	mov	fp, r0
    38f8:	4692      	mov	sl, r2
    38fa:	001d      	movs	r5, r3
    38fc:	4680      	mov	r8, r0
    38fe:	0b36      	lsrs	r6, r6, #12
    3900:	0d64      	lsrs	r4, r4, #21
    3902:	0fcf      	lsrs	r7, r1, #31
    3904:	2c00      	cmp	r4, #0
    3906:	d04f      	beq.n	39a8 <__aeabi_ddiv+0xc4>
    3908:	4b6f      	ldr	r3, [pc, #444]	; (3ac8 <__aeabi_ddiv+0x1e4>)
    390a:	429c      	cmp	r4, r3
    390c:	d035      	beq.n	397a <__aeabi_ddiv+0x96>
    390e:	2380      	movs	r3, #128	; 0x80
    3910:	0f42      	lsrs	r2, r0, #29
    3912:	041b      	lsls	r3, r3, #16
    3914:	00f6      	lsls	r6, r6, #3
    3916:	4313      	orrs	r3, r2
    3918:	4333      	orrs	r3, r6
    391a:	4699      	mov	r9, r3
    391c:	00c3      	lsls	r3, r0, #3
    391e:	4698      	mov	r8, r3
    3920:	4b6a      	ldr	r3, [pc, #424]	; (3acc <__aeabi_ddiv+0x1e8>)
    3922:	2600      	movs	r6, #0
    3924:	469c      	mov	ip, r3
    3926:	2300      	movs	r3, #0
    3928:	4464      	add	r4, ip
    392a:	9303      	str	r3, [sp, #12]
    392c:	032b      	lsls	r3, r5, #12
    392e:	0b1b      	lsrs	r3, r3, #12
    3930:	469b      	mov	fp, r3
    3932:	006b      	lsls	r3, r5, #1
    3934:	0fed      	lsrs	r5, r5, #31
    3936:	4650      	mov	r0, sl
    3938:	0d5b      	lsrs	r3, r3, #21
    393a:	9501      	str	r5, [sp, #4]
    393c:	d05e      	beq.n	39fc <__aeabi_ddiv+0x118>
    393e:	4a62      	ldr	r2, [pc, #392]	; (3ac8 <__aeabi_ddiv+0x1e4>)
    3940:	4293      	cmp	r3, r2
    3942:	d053      	beq.n	39ec <__aeabi_ddiv+0x108>
    3944:	465a      	mov	r2, fp
    3946:	00d1      	lsls	r1, r2, #3
    3948:	2280      	movs	r2, #128	; 0x80
    394a:	0f40      	lsrs	r0, r0, #29
    394c:	0412      	lsls	r2, r2, #16
    394e:	4302      	orrs	r2, r0
    3950:	430a      	orrs	r2, r1
    3952:	4693      	mov	fp, r2
    3954:	4652      	mov	r2, sl
    3956:	00d1      	lsls	r1, r2, #3
    3958:	4a5c      	ldr	r2, [pc, #368]	; (3acc <__aeabi_ddiv+0x1e8>)
    395a:	4694      	mov	ip, r2
    395c:	2200      	movs	r2, #0
    395e:	4463      	add	r3, ip
    3960:	0038      	movs	r0, r7
    3962:	4068      	eors	r0, r5
    3964:	4684      	mov	ip, r0
    3966:	9002      	str	r0, [sp, #8]
    3968:	1ae4      	subs	r4, r4, r3
    396a:	4316      	orrs	r6, r2
    396c:	2e0f      	cmp	r6, #15
    396e:	d900      	bls.n	3972 <__aeabi_ddiv+0x8e>
    3970:	e0b4      	b.n	3adc <__aeabi_ddiv+0x1f8>
    3972:	4b57      	ldr	r3, [pc, #348]	; (3ad0 <__aeabi_ddiv+0x1ec>)
    3974:	00b6      	lsls	r6, r6, #2
    3976:	599b      	ldr	r3, [r3, r6]
    3978:	469f      	mov	pc, r3
    397a:	0003      	movs	r3, r0
    397c:	4333      	orrs	r3, r6
    397e:	4699      	mov	r9, r3
    3980:	d16c      	bne.n	3a5c <__aeabi_ddiv+0x178>
    3982:	2300      	movs	r3, #0
    3984:	4698      	mov	r8, r3
    3986:	3302      	adds	r3, #2
    3988:	2608      	movs	r6, #8
    398a:	9303      	str	r3, [sp, #12]
    398c:	e7ce      	b.n	392c <__aeabi_ddiv+0x48>
    398e:	46cb      	mov	fp, r9
    3990:	4641      	mov	r1, r8
    3992:	9a03      	ldr	r2, [sp, #12]
    3994:	9701      	str	r7, [sp, #4]
    3996:	2a02      	cmp	r2, #2
    3998:	d165      	bne.n	3a66 <__aeabi_ddiv+0x182>
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	4c4a      	ldr	r4, [pc, #296]	; (3ac8 <__aeabi_ddiv+0x1e4>)
    399e:	469c      	mov	ip, r3
    39a0:	2300      	movs	r3, #0
    39a2:	2200      	movs	r2, #0
    39a4:	4698      	mov	r8, r3
    39a6:	e06b      	b.n	3a80 <__aeabi_ddiv+0x19c>
    39a8:	0003      	movs	r3, r0
    39aa:	4333      	orrs	r3, r6
    39ac:	4699      	mov	r9, r3
    39ae:	d04e      	beq.n	3a4e <__aeabi_ddiv+0x16a>
    39b0:	2e00      	cmp	r6, #0
    39b2:	d100      	bne.n	39b6 <__aeabi_ddiv+0xd2>
    39b4:	e1bc      	b.n	3d30 <__aeabi_ddiv+0x44c>
    39b6:	0030      	movs	r0, r6
    39b8:	f001 f8ca 	bl	4b50 <__clzsi2>
    39bc:	0003      	movs	r3, r0
    39be:	3b0b      	subs	r3, #11
    39c0:	2b1c      	cmp	r3, #28
    39c2:	dd00      	ble.n	39c6 <__aeabi_ddiv+0xe2>
    39c4:	e1ac      	b.n	3d20 <__aeabi_ddiv+0x43c>
    39c6:	221d      	movs	r2, #29
    39c8:	1ad3      	subs	r3, r2, r3
    39ca:	465a      	mov	r2, fp
    39cc:	0001      	movs	r1, r0
    39ce:	40da      	lsrs	r2, r3
    39d0:	3908      	subs	r1, #8
    39d2:	408e      	lsls	r6, r1
    39d4:	0013      	movs	r3, r2
    39d6:	4333      	orrs	r3, r6
    39d8:	4699      	mov	r9, r3
    39da:	465b      	mov	r3, fp
    39dc:	408b      	lsls	r3, r1
    39de:	4698      	mov	r8, r3
    39e0:	2300      	movs	r3, #0
    39e2:	4c3c      	ldr	r4, [pc, #240]	; (3ad4 <__aeabi_ddiv+0x1f0>)
    39e4:	2600      	movs	r6, #0
    39e6:	1a24      	subs	r4, r4, r0
    39e8:	9303      	str	r3, [sp, #12]
    39ea:	e79f      	b.n	392c <__aeabi_ddiv+0x48>
    39ec:	4651      	mov	r1, sl
    39ee:	465a      	mov	r2, fp
    39f0:	4311      	orrs	r1, r2
    39f2:	d129      	bne.n	3a48 <__aeabi_ddiv+0x164>
    39f4:	2200      	movs	r2, #0
    39f6:	4693      	mov	fp, r2
    39f8:	3202      	adds	r2, #2
    39fa:	e7b1      	b.n	3960 <__aeabi_ddiv+0x7c>
    39fc:	4659      	mov	r1, fp
    39fe:	4301      	orrs	r1, r0
    3a00:	d01e      	beq.n	3a40 <__aeabi_ddiv+0x15c>
    3a02:	465b      	mov	r3, fp
    3a04:	2b00      	cmp	r3, #0
    3a06:	d100      	bne.n	3a0a <__aeabi_ddiv+0x126>
    3a08:	e19e      	b.n	3d48 <__aeabi_ddiv+0x464>
    3a0a:	4658      	mov	r0, fp
    3a0c:	f001 f8a0 	bl	4b50 <__clzsi2>
    3a10:	0003      	movs	r3, r0
    3a12:	3b0b      	subs	r3, #11
    3a14:	2b1c      	cmp	r3, #28
    3a16:	dd00      	ble.n	3a1a <__aeabi_ddiv+0x136>
    3a18:	e18f      	b.n	3d3a <__aeabi_ddiv+0x456>
    3a1a:	0002      	movs	r2, r0
    3a1c:	4659      	mov	r1, fp
    3a1e:	3a08      	subs	r2, #8
    3a20:	4091      	lsls	r1, r2
    3a22:	468b      	mov	fp, r1
    3a24:	211d      	movs	r1, #29
    3a26:	1acb      	subs	r3, r1, r3
    3a28:	4651      	mov	r1, sl
    3a2a:	40d9      	lsrs	r1, r3
    3a2c:	000b      	movs	r3, r1
    3a2e:	4659      	mov	r1, fp
    3a30:	430b      	orrs	r3, r1
    3a32:	4651      	mov	r1, sl
    3a34:	469b      	mov	fp, r3
    3a36:	4091      	lsls	r1, r2
    3a38:	4b26      	ldr	r3, [pc, #152]	; (3ad4 <__aeabi_ddiv+0x1f0>)
    3a3a:	2200      	movs	r2, #0
    3a3c:	1a1b      	subs	r3, r3, r0
    3a3e:	e78f      	b.n	3960 <__aeabi_ddiv+0x7c>
    3a40:	2300      	movs	r3, #0
    3a42:	2201      	movs	r2, #1
    3a44:	469b      	mov	fp, r3
    3a46:	e78b      	b.n	3960 <__aeabi_ddiv+0x7c>
    3a48:	4651      	mov	r1, sl
    3a4a:	2203      	movs	r2, #3
    3a4c:	e788      	b.n	3960 <__aeabi_ddiv+0x7c>
    3a4e:	2300      	movs	r3, #0
    3a50:	4698      	mov	r8, r3
    3a52:	3301      	adds	r3, #1
    3a54:	2604      	movs	r6, #4
    3a56:	2400      	movs	r4, #0
    3a58:	9303      	str	r3, [sp, #12]
    3a5a:	e767      	b.n	392c <__aeabi_ddiv+0x48>
    3a5c:	2303      	movs	r3, #3
    3a5e:	46b1      	mov	r9, r6
    3a60:	9303      	str	r3, [sp, #12]
    3a62:	260c      	movs	r6, #12
    3a64:	e762      	b.n	392c <__aeabi_ddiv+0x48>
    3a66:	2a03      	cmp	r2, #3
    3a68:	d100      	bne.n	3a6c <__aeabi_ddiv+0x188>
    3a6a:	e25c      	b.n	3f26 <__aeabi_ddiv+0x642>
    3a6c:	9b01      	ldr	r3, [sp, #4]
    3a6e:	2a01      	cmp	r2, #1
    3a70:	d000      	beq.n	3a74 <__aeabi_ddiv+0x190>
    3a72:	e1e4      	b.n	3e3e <__aeabi_ddiv+0x55a>
    3a74:	4013      	ands	r3, r2
    3a76:	469c      	mov	ip, r3
    3a78:	2300      	movs	r3, #0
    3a7a:	2400      	movs	r4, #0
    3a7c:	2200      	movs	r2, #0
    3a7e:	4698      	mov	r8, r3
    3a80:	2100      	movs	r1, #0
    3a82:	0312      	lsls	r2, r2, #12
    3a84:	0b13      	lsrs	r3, r2, #12
    3a86:	0d0a      	lsrs	r2, r1, #20
    3a88:	0512      	lsls	r2, r2, #20
    3a8a:	431a      	orrs	r2, r3
    3a8c:	0523      	lsls	r3, r4, #20
    3a8e:	4c12      	ldr	r4, [pc, #72]	; (3ad8 <__aeabi_ddiv+0x1f4>)
    3a90:	4640      	mov	r0, r8
    3a92:	4022      	ands	r2, r4
    3a94:	4313      	orrs	r3, r2
    3a96:	4662      	mov	r2, ip
    3a98:	005b      	lsls	r3, r3, #1
    3a9a:	07d2      	lsls	r2, r2, #31
    3a9c:	085b      	lsrs	r3, r3, #1
    3a9e:	4313      	orrs	r3, r2
    3aa0:	0019      	movs	r1, r3
    3aa2:	b007      	add	sp, #28
    3aa4:	bc3c      	pop	{r2, r3, r4, r5}
    3aa6:	4690      	mov	r8, r2
    3aa8:	4699      	mov	r9, r3
    3aaa:	46a2      	mov	sl, r4
    3aac:	46ab      	mov	fp, r5
    3aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab0:	2300      	movs	r3, #0
    3ab2:	2280      	movs	r2, #128	; 0x80
    3ab4:	469c      	mov	ip, r3
    3ab6:	0312      	lsls	r2, r2, #12
    3ab8:	4698      	mov	r8, r3
    3aba:	4c03      	ldr	r4, [pc, #12]	; (3ac8 <__aeabi_ddiv+0x1e4>)
    3abc:	e7e0      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3abe:	2300      	movs	r3, #0
    3ac0:	4c01      	ldr	r4, [pc, #4]	; (3ac8 <__aeabi_ddiv+0x1e4>)
    3ac2:	2200      	movs	r2, #0
    3ac4:	4698      	mov	r8, r3
    3ac6:	e7db      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3ac8:	000007ff 	.word	0x000007ff
    3acc:	fffffc01 	.word	0xfffffc01
    3ad0:	0000712c 	.word	0x0000712c
    3ad4:	fffffc0d 	.word	0xfffffc0d
    3ad8:	800fffff 	.word	0x800fffff
    3adc:	45d9      	cmp	r9, fp
    3ade:	d900      	bls.n	3ae2 <__aeabi_ddiv+0x1fe>
    3ae0:	e139      	b.n	3d56 <__aeabi_ddiv+0x472>
    3ae2:	d100      	bne.n	3ae6 <__aeabi_ddiv+0x202>
    3ae4:	e134      	b.n	3d50 <__aeabi_ddiv+0x46c>
    3ae6:	2300      	movs	r3, #0
    3ae8:	4646      	mov	r6, r8
    3aea:	464d      	mov	r5, r9
    3aec:	469a      	mov	sl, r3
    3aee:	3c01      	subs	r4, #1
    3af0:	465b      	mov	r3, fp
    3af2:	0e0a      	lsrs	r2, r1, #24
    3af4:	021b      	lsls	r3, r3, #8
    3af6:	431a      	orrs	r2, r3
    3af8:	020b      	lsls	r3, r1, #8
    3afa:	0c17      	lsrs	r7, r2, #16
    3afc:	9303      	str	r3, [sp, #12]
    3afe:	0413      	lsls	r3, r2, #16
    3b00:	0c1b      	lsrs	r3, r3, #16
    3b02:	0039      	movs	r1, r7
    3b04:	0028      	movs	r0, r5
    3b06:	4690      	mov	r8, r2
    3b08:	9301      	str	r3, [sp, #4]
    3b0a:	f7ff fa3b 	bl	2f84 <__udivsi3>
    3b0e:	0002      	movs	r2, r0
    3b10:	9b01      	ldr	r3, [sp, #4]
    3b12:	4683      	mov	fp, r0
    3b14:	435a      	muls	r2, r3
    3b16:	0028      	movs	r0, r5
    3b18:	0039      	movs	r1, r7
    3b1a:	4691      	mov	r9, r2
    3b1c:	f7ff fab8 	bl	3090 <__aeabi_uidivmod>
    3b20:	0c35      	lsrs	r5, r6, #16
    3b22:	0409      	lsls	r1, r1, #16
    3b24:	430d      	orrs	r5, r1
    3b26:	45a9      	cmp	r9, r5
    3b28:	d90d      	bls.n	3b46 <__aeabi_ddiv+0x262>
    3b2a:	465b      	mov	r3, fp
    3b2c:	4445      	add	r5, r8
    3b2e:	3b01      	subs	r3, #1
    3b30:	45a8      	cmp	r8, r5
    3b32:	d900      	bls.n	3b36 <__aeabi_ddiv+0x252>
    3b34:	e13a      	b.n	3dac <__aeabi_ddiv+0x4c8>
    3b36:	45a9      	cmp	r9, r5
    3b38:	d800      	bhi.n	3b3c <__aeabi_ddiv+0x258>
    3b3a:	e137      	b.n	3dac <__aeabi_ddiv+0x4c8>
    3b3c:	2302      	movs	r3, #2
    3b3e:	425b      	negs	r3, r3
    3b40:	469c      	mov	ip, r3
    3b42:	4445      	add	r5, r8
    3b44:	44e3      	add	fp, ip
    3b46:	464b      	mov	r3, r9
    3b48:	1aeb      	subs	r3, r5, r3
    3b4a:	0039      	movs	r1, r7
    3b4c:	0018      	movs	r0, r3
    3b4e:	9304      	str	r3, [sp, #16]
    3b50:	f7ff fa18 	bl	2f84 <__udivsi3>
    3b54:	9b01      	ldr	r3, [sp, #4]
    3b56:	0005      	movs	r5, r0
    3b58:	4343      	muls	r3, r0
    3b5a:	0039      	movs	r1, r7
    3b5c:	9804      	ldr	r0, [sp, #16]
    3b5e:	4699      	mov	r9, r3
    3b60:	f7ff fa96 	bl	3090 <__aeabi_uidivmod>
    3b64:	0433      	lsls	r3, r6, #16
    3b66:	0409      	lsls	r1, r1, #16
    3b68:	0c1b      	lsrs	r3, r3, #16
    3b6a:	430b      	orrs	r3, r1
    3b6c:	4599      	cmp	r9, r3
    3b6e:	d909      	bls.n	3b84 <__aeabi_ddiv+0x2a0>
    3b70:	4443      	add	r3, r8
    3b72:	1e6a      	subs	r2, r5, #1
    3b74:	4598      	cmp	r8, r3
    3b76:	d900      	bls.n	3b7a <__aeabi_ddiv+0x296>
    3b78:	e11a      	b.n	3db0 <__aeabi_ddiv+0x4cc>
    3b7a:	4599      	cmp	r9, r3
    3b7c:	d800      	bhi.n	3b80 <__aeabi_ddiv+0x29c>
    3b7e:	e117      	b.n	3db0 <__aeabi_ddiv+0x4cc>
    3b80:	3d02      	subs	r5, #2
    3b82:	4443      	add	r3, r8
    3b84:	464a      	mov	r2, r9
    3b86:	1a9b      	subs	r3, r3, r2
    3b88:	465a      	mov	r2, fp
    3b8a:	0412      	lsls	r2, r2, #16
    3b8c:	432a      	orrs	r2, r5
    3b8e:	9903      	ldr	r1, [sp, #12]
    3b90:	4693      	mov	fp, r2
    3b92:	0c10      	lsrs	r0, r2, #16
    3b94:	0c0a      	lsrs	r2, r1, #16
    3b96:	4691      	mov	r9, r2
    3b98:	0409      	lsls	r1, r1, #16
    3b9a:	465a      	mov	r2, fp
    3b9c:	0c09      	lsrs	r1, r1, #16
    3b9e:	464e      	mov	r6, r9
    3ba0:	000d      	movs	r5, r1
    3ba2:	0412      	lsls	r2, r2, #16
    3ba4:	0c12      	lsrs	r2, r2, #16
    3ba6:	4345      	muls	r5, r0
    3ba8:	9105      	str	r1, [sp, #20]
    3baa:	4351      	muls	r1, r2
    3bac:	4372      	muls	r2, r6
    3bae:	4370      	muls	r0, r6
    3bb0:	1952      	adds	r2, r2, r5
    3bb2:	0c0e      	lsrs	r6, r1, #16
    3bb4:	18b2      	adds	r2, r6, r2
    3bb6:	4295      	cmp	r5, r2
    3bb8:	d903      	bls.n	3bc2 <__aeabi_ddiv+0x2de>
    3bba:	2580      	movs	r5, #128	; 0x80
    3bbc:	026d      	lsls	r5, r5, #9
    3bbe:	46ac      	mov	ip, r5
    3bc0:	4460      	add	r0, ip
    3bc2:	0c15      	lsrs	r5, r2, #16
    3bc4:	0409      	lsls	r1, r1, #16
    3bc6:	0412      	lsls	r2, r2, #16
    3bc8:	0c09      	lsrs	r1, r1, #16
    3bca:	1828      	adds	r0, r5, r0
    3bcc:	1852      	adds	r2, r2, r1
    3bce:	4283      	cmp	r3, r0
    3bd0:	d200      	bcs.n	3bd4 <__aeabi_ddiv+0x2f0>
    3bd2:	e0ce      	b.n	3d72 <__aeabi_ddiv+0x48e>
    3bd4:	d100      	bne.n	3bd8 <__aeabi_ddiv+0x2f4>
    3bd6:	e0c8      	b.n	3d6a <__aeabi_ddiv+0x486>
    3bd8:	1a1d      	subs	r5, r3, r0
    3bda:	4653      	mov	r3, sl
    3bdc:	1a9e      	subs	r6, r3, r2
    3bde:	45b2      	cmp	sl, r6
    3be0:	4192      	sbcs	r2, r2
    3be2:	4252      	negs	r2, r2
    3be4:	1aab      	subs	r3, r5, r2
    3be6:	469a      	mov	sl, r3
    3be8:	4598      	cmp	r8, r3
    3bea:	d100      	bne.n	3bee <__aeabi_ddiv+0x30a>
    3bec:	e117      	b.n	3e1e <__aeabi_ddiv+0x53a>
    3bee:	0039      	movs	r1, r7
    3bf0:	0018      	movs	r0, r3
    3bf2:	f7ff f9c7 	bl	2f84 <__udivsi3>
    3bf6:	9b01      	ldr	r3, [sp, #4]
    3bf8:	0005      	movs	r5, r0
    3bfa:	4343      	muls	r3, r0
    3bfc:	0039      	movs	r1, r7
    3bfe:	4650      	mov	r0, sl
    3c00:	9304      	str	r3, [sp, #16]
    3c02:	f7ff fa45 	bl	3090 <__aeabi_uidivmod>
    3c06:	9804      	ldr	r0, [sp, #16]
    3c08:	040b      	lsls	r3, r1, #16
    3c0a:	0c31      	lsrs	r1, r6, #16
    3c0c:	4319      	orrs	r1, r3
    3c0e:	4288      	cmp	r0, r1
    3c10:	d909      	bls.n	3c26 <__aeabi_ddiv+0x342>
    3c12:	4441      	add	r1, r8
    3c14:	1e6b      	subs	r3, r5, #1
    3c16:	4588      	cmp	r8, r1
    3c18:	d900      	bls.n	3c1c <__aeabi_ddiv+0x338>
    3c1a:	e107      	b.n	3e2c <__aeabi_ddiv+0x548>
    3c1c:	4288      	cmp	r0, r1
    3c1e:	d800      	bhi.n	3c22 <__aeabi_ddiv+0x33e>
    3c20:	e104      	b.n	3e2c <__aeabi_ddiv+0x548>
    3c22:	3d02      	subs	r5, #2
    3c24:	4441      	add	r1, r8
    3c26:	9b04      	ldr	r3, [sp, #16]
    3c28:	1acb      	subs	r3, r1, r3
    3c2a:	0018      	movs	r0, r3
    3c2c:	0039      	movs	r1, r7
    3c2e:	9304      	str	r3, [sp, #16]
    3c30:	f7ff f9a8 	bl	2f84 <__udivsi3>
    3c34:	9b01      	ldr	r3, [sp, #4]
    3c36:	4682      	mov	sl, r0
    3c38:	4343      	muls	r3, r0
    3c3a:	0039      	movs	r1, r7
    3c3c:	9804      	ldr	r0, [sp, #16]
    3c3e:	9301      	str	r3, [sp, #4]
    3c40:	f7ff fa26 	bl	3090 <__aeabi_uidivmod>
    3c44:	9801      	ldr	r0, [sp, #4]
    3c46:	040b      	lsls	r3, r1, #16
    3c48:	0431      	lsls	r1, r6, #16
    3c4a:	0c09      	lsrs	r1, r1, #16
    3c4c:	4319      	orrs	r1, r3
    3c4e:	4288      	cmp	r0, r1
    3c50:	d90d      	bls.n	3c6e <__aeabi_ddiv+0x38a>
    3c52:	4653      	mov	r3, sl
    3c54:	4441      	add	r1, r8
    3c56:	3b01      	subs	r3, #1
    3c58:	4588      	cmp	r8, r1
    3c5a:	d900      	bls.n	3c5e <__aeabi_ddiv+0x37a>
    3c5c:	e0e8      	b.n	3e30 <__aeabi_ddiv+0x54c>
    3c5e:	4288      	cmp	r0, r1
    3c60:	d800      	bhi.n	3c64 <__aeabi_ddiv+0x380>
    3c62:	e0e5      	b.n	3e30 <__aeabi_ddiv+0x54c>
    3c64:	2302      	movs	r3, #2
    3c66:	425b      	negs	r3, r3
    3c68:	469c      	mov	ip, r3
    3c6a:	4441      	add	r1, r8
    3c6c:	44e2      	add	sl, ip
    3c6e:	9b01      	ldr	r3, [sp, #4]
    3c70:	042d      	lsls	r5, r5, #16
    3c72:	1ace      	subs	r6, r1, r3
    3c74:	4651      	mov	r1, sl
    3c76:	4329      	orrs	r1, r5
    3c78:	9d05      	ldr	r5, [sp, #20]
    3c7a:	464f      	mov	r7, r9
    3c7c:	002a      	movs	r2, r5
    3c7e:	040b      	lsls	r3, r1, #16
    3c80:	0c08      	lsrs	r0, r1, #16
    3c82:	0c1b      	lsrs	r3, r3, #16
    3c84:	435a      	muls	r2, r3
    3c86:	4345      	muls	r5, r0
    3c88:	437b      	muls	r3, r7
    3c8a:	4378      	muls	r0, r7
    3c8c:	195b      	adds	r3, r3, r5
    3c8e:	0c17      	lsrs	r7, r2, #16
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	429d      	cmp	r5, r3
    3c94:	d903      	bls.n	3c9e <__aeabi_ddiv+0x3ba>
    3c96:	2580      	movs	r5, #128	; 0x80
    3c98:	026d      	lsls	r5, r5, #9
    3c9a:	46ac      	mov	ip, r5
    3c9c:	4460      	add	r0, ip
    3c9e:	0c1d      	lsrs	r5, r3, #16
    3ca0:	0412      	lsls	r2, r2, #16
    3ca2:	041b      	lsls	r3, r3, #16
    3ca4:	0c12      	lsrs	r2, r2, #16
    3ca6:	1828      	adds	r0, r5, r0
    3ca8:	189b      	adds	r3, r3, r2
    3caa:	4286      	cmp	r6, r0
    3cac:	d200      	bcs.n	3cb0 <__aeabi_ddiv+0x3cc>
    3cae:	e093      	b.n	3dd8 <__aeabi_ddiv+0x4f4>
    3cb0:	d100      	bne.n	3cb4 <__aeabi_ddiv+0x3d0>
    3cb2:	e08e      	b.n	3dd2 <__aeabi_ddiv+0x4ee>
    3cb4:	2301      	movs	r3, #1
    3cb6:	4319      	orrs	r1, r3
    3cb8:	4ba0      	ldr	r3, [pc, #640]	; (3f3c <__aeabi_ddiv+0x658>)
    3cba:	18e3      	adds	r3, r4, r3
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	dc00      	bgt.n	3cc2 <__aeabi_ddiv+0x3de>
    3cc0:	e099      	b.n	3df6 <__aeabi_ddiv+0x512>
    3cc2:	074a      	lsls	r2, r1, #29
    3cc4:	d000      	beq.n	3cc8 <__aeabi_ddiv+0x3e4>
    3cc6:	e09e      	b.n	3e06 <__aeabi_ddiv+0x522>
    3cc8:	465a      	mov	r2, fp
    3cca:	01d2      	lsls	r2, r2, #7
    3ccc:	d506      	bpl.n	3cdc <__aeabi_ddiv+0x3f8>
    3cce:	465a      	mov	r2, fp
    3cd0:	4b9b      	ldr	r3, [pc, #620]	; (3f40 <__aeabi_ddiv+0x65c>)
    3cd2:	401a      	ands	r2, r3
    3cd4:	2380      	movs	r3, #128	; 0x80
    3cd6:	4693      	mov	fp, r2
    3cd8:	00db      	lsls	r3, r3, #3
    3cda:	18e3      	adds	r3, r4, r3
    3cdc:	4a99      	ldr	r2, [pc, #612]	; (3f44 <__aeabi_ddiv+0x660>)
    3cde:	4293      	cmp	r3, r2
    3ce0:	dd68      	ble.n	3db4 <__aeabi_ddiv+0x4d0>
    3ce2:	2301      	movs	r3, #1
    3ce4:	9a02      	ldr	r2, [sp, #8]
    3ce6:	4c98      	ldr	r4, [pc, #608]	; (3f48 <__aeabi_ddiv+0x664>)
    3ce8:	401a      	ands	r2, r3
    3cea:	2300      	movs	r3, #0
    3cec:	4694      	mov	ip, r2
    3cee:	4698      	mov	r8, r3
    3cf0:	2200      	movs	r2, #0
    3cf2:	e6c5      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3cf4:	2280      	movs	r2, #128	; 0x80
    3cf6:	464b      	mov	r3, r9
    3cf8:	0312      	lsls	r2, r2, #12
    3cfa:	4213      	tst	r3, r2
    3cfc:	d00a      	beq.n	3d14 <__aeabi_ddiv+0x430>
    3cfe:	465b      	mov	r3, fp
    3d00:	4213      	tst	r3, r2
    3d02:	d106      	bne.n	3d12 <__aeabi_ddiv+0x42e>
    3d04:	431a      	orrs	r2, r3
    3d06:	0312      	lsls	r2, r2, #12
    3d08:	0b12      	lsrs	r2, r2, #12
    3d0a:	46ac      	mov	ip, r5
    3d0c:	4688      	mov	r8, r1
    3d0e:	4c8e      	ldr	r4, [pc, #568]	; (3f48 <__aeabi_ddiv+0x664>)
    3d10:	e6b6      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3d12:	464b      	mov	r3, r9
    3d14:	431a      	orrs	r2, r3
    3d16:	0312      	lsls	r2, r2, #12
    3d18:	0b12      	lsrs	r2, r2, #12
    3d1a:	46bc      	mov	ip, r7
    3d1c:	4c8a      	ldr	r4, [pc, #552]	; (3f48 <__aeabi_ddiv+0x664>)
    3d1e:	e6af      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3d20:	0003      	movs	r3, r0
    3d22:	465a      	mov	r2, fp
    3d24:	3b28      	subs	r3, #40	; 0x28
    3d26:	409a      	lsls	r2, r3
    3d28:	2300      	movs	r3, #0
    3d2a:	4691      	mov	r9, r2
    3d2c:	4698      	mov	r8, r3
    3d2e:	e657      	b.n	39e0 <__aeabi_ddiv+0xfc>
    3d30:	4658      	mov	r0, fp
    3d32:	f000 ff0d 	bl	4b50 <__clzsi2>
    3d36:	3020      	adds	r0, #32
    3d38:	e640      	b.n	39bc <__aeabi_ddiv+0xd8>
    3d3a:	0003      	movs	r3, r0
    3d3c:	4652      	mov	r2, sl
    3d3e:	3b28      	subs	r3, #40	; 0x28
    3d40:	409a      	lsls	r2, r3
    3d42:	2100      	movs	r1, #0
    3d44:	4693      	mov	fp, r2
    3d46:	e677      	b.n	3a38 <__aeabi_ddiv+0x154>
    3d48:	f000 ff02 	bl	4b50 <__clzsi2>
    3d4c:	3020      	adds	r0, #32
    3d4e:	e65f      	b.n	3a10 <__aeabi_ddiv+0x12c>
    3d50:	4588      	cmp	r8, r1
    3d52:	d200      	bcs.n	3d56 <__aeabi_ddiv+0x472>
    3d54:	e6c7      	b.n	3ae6 <__aeabi_ddiv+0x202>
    3d56:	464b      	mov	r3, r9
    3d58:	07de      	lsls	r6, r3, #31
    3d5a:	085d      	lsrs	r5, r3, #1
    3d5c:	4643      	mov	r3, r8
    3d5e:	085b      	lsrs	r3, r3, #1
    3d60:	431e      	orrs	r6, r3
    3d62:	4643      	mov	r3, r8
    3d64:	07db      	lsls	r3, r3, #31
    3d66:	469a      	mov	sl, r3
    3d68:	e6c2      	b.n	3af0 <__aeabi_ddiv+0x20c>
    3d6a:	2500      	movs	r5, #0
    3d6c:	4592      	cmp	sl, r2
    3d6e:	d300      	bcc.n	3d72 <__aeabi_ddiv+0x48e>
    3d70:	e733      	b.n	3bda <__aeabi_ddiv+0x2f6>
    3d72:	9e03      	ldr	r6, [sp, #12]
    3d74:	4659      	mov	r1, fp
    3d76:	46b4      	mov	ip, r6
    3d78:	44e2      	add	sl, ip
    3d7a:	45b2      	cmp	sl, r6
    3d7c:	41ad      	sbcs	r5, r5
    3d7e:	426d      	negs	r5, r5
    3d80:	4445      	add	r5, r8
    3d82:	18eb      	adds	r3, r5, r3
    3d84:	3901      	subs	r1, #1
    3d86:	4598      	cmp	r8, r3
    3d88:	d207      	bcs.n	3d9a <__aeabi_ddiv+0x4b6>
    3d8a:	4298      	cmp	r0, r3
    3d8c:	d900      	bls.n	3d90 <__aeabi_ddiv+0x4ac>
    3d8e:	e07f      	b.n	3e90 <__aeabi_ddiv+0x5ac>
    3d90:	d100      	bne.n	3d94 <__aeabi_ddiv+0x4b0>
    3d92:	e0bc      	b.n	3f0e <__aeabi_ddiv+0x62a>
    3d94:	1a1d      	subs	r5, r3, r0
    3d96:	468b      	mov	fp, r1
    3d98:	e71f      	b.n	3bda <__aeabi_ddiv+0x2f6>
    3d9a:	4598      	cmp	r8, r3
    3d9c:	d1fa      	bne.n	3d94 <__aeabi_ddiv+0x4b0>
    3d9e:	9d03      	ldr	r5, [sp, #12]
    3da0:	4555      	cmp	r5, sl
    3da2:	d9f2      	bls.n	3d8a <__aeabi_ddiv+0x4a6>
    3da4:	4643      	mov	r3, r8
    3da6:	468b      	mov	fp, r1
    3da8:	1a1d      	subs	r5, r3, r0
    3daa:	e716      	b.n	3bda <__aeabi_ddiv+0x2f6>
    3dac:	469b      	mov	fp, r3
    3dae:	e6ca      	b.n	3b46 <__aeabi_ddiv+0x262>
    3db0:	0015      	movs	r5, r2
    3db2:	e6e7      	b.n	3b84 <__aeabi_ddiv+0x2a0>
    3db4:	465a      	mov	r2, fp
    3db6:	08c9      	lsrs	r1, r1, #3
    3db8:	0752      	lsls	r2, r2, #29
    3dba:	430a      	orrs	r2, r1
    3dbc:	055b      	lsls	r3, r3, #21
    3dbe:	4690      	mov	r8, r2
    3dc0:	0d5c      	lsrs	r4, r3, #21
    3dc2:	465a      	mov	r2, fp
    3dc4:	2301      	movs	r3, #1
    3dc6:	9902      	ldr	r1, [sp, #8]
    3dc8:	0252      	lsls	r2, r2, #9
    3dca:	4019      	ands	r1, r3
    3dcc:	0b12      	lsrs	r2, r2, #12
    3dce:	468c      	mov	ip, r1
    3dd0:	e656      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d100      	bne.n	3dd8 <__aeabi_ddiv+0x4f4>
    3dd6:	e76f      	b.n	3cb8 <__aeabi_ddiv+0x3d4>
    3dd8:	4446      	add	r6, r8
    3dda:	1e4a      	subs	r2, r1, #1
    3ddc:	45b0      	cmp	r8, r6
    3dde:	d929      	bls.n	3e34 <__aeabi_ddiv+0x550>
    3de0:	0011      	movs	r1, r2
    3de2:	4286      	cmp	r6, r0
    3de4:	d000      	beq.n	3de8 <__aeabi_ddiv+0x504>
    3de6:	e765      	b.n	3cb4 <__aeabi_ddiv+0x3d0>
    3de8:	9a03      	ldr	r2, [sp, #12]
    3dea:	4293      	cmp	r3, r2
    3dec:	d000      	beq.n	3df0 <__aeabi_ddiv+0x50c>
    3dee:	e761      	b.n	3cb4 <__aeabi_ddiv+0x3d0>
    3df0:	e762      	b.n	3cb8 <__aeabi_ddiv+0x3d4>
    3df2:	2101      	movs	r1, #1
    3df4:	4249      	negs	r1, r1
    3df6:	2001      	movs	r0, #1
    3df8:	1ac2      	subs	r2, r0, r3
    3dfa:	2a38      	cmp	r2, #56	; 0x38
    3dfc:	dd21      	ble.n	3e42 <__aeabi_ddiv+0x55e>
    3dfe:	9b02      	ldr	r3, [sp, #8]
    3e00:	4003      	ands	r3, r0
    3e02:	469c      	mov	ip, r3
    3e04:	e638      	b.n	3a78 <__aeabi_ddiv+0x194>
    3e06:	220f      	movs	r2, #15
    3e08:	400a      	ands	r2, r1
    3e0a:	2a04      	cmp	r2, #4
    3e0c:	d100      	bne.n	3e10 <__aeabi_ddiv+0x52c>
    3e0e:	e75b      	b.n	3cc8 <__aeabi_ddiv+0x3e4>
    3e10:	000a      	movs	r2, r1
    3e12:	1d11      	adds	r1, r2, #4
    3e14:	4291      	cmp	r1, r2
    3e16:	4192      	sbcs	r2, r2
    3e18:	4252      	negs	r2, r2
    3e1a:	4493      	add	fp, r2
    3e1c:	e754      	b.n	3cc8 <__aeabi_ddiv+0x3e4>
    3e1e:	4b47      	ldr	r3, [pc, #284]	; (3f3c <__aeabi_ddiv+0x658>)
    3e20:	18e3      	adds	r3, r4, r3
    3e22:	2b00      	cmp	r3, #0
    3e24:	dde5      	ble.n	3df2 <__aeabi_ddiv+0x50e>
    3e26:	2201      	movs	r2, #1
    3e28:	4252      	negs	r2, r2
    3e2a:	e7f2      	b.n	3e12 <__aeabi_ddiv+0x52e>
    3e2c:	001d      	movs	r5, r3
    3e2e:	e6fa      	b.n	3c26 <__aeabi_ddiv+0x342>
    3e30:	469a      	mov	sl, r3
    3e32:	e71c      	b.n	3c6e <__aeabi_ddiv+0x38a>
    3e34:	42b0      	cmp	r0, r6
    3e36:	d839      	bhi.n	3eac <__aeabi_ddiv+0x5c8>
    3e38:	d06e      	beq.n	3f18 <__aeabi_ddiv+0x634>
    3e3a:	0011      	movs	r1, r2
    3e3c:	e73a      	b.n	3cb4 <__aeabi_ddiv+0x3d0>
    3e3e:	9302      	str	r3, [sp, #8]
    3e40:	e73a      	b.n	3cb8 <__aeabi_ddiv+0x3d4>
    3e42:	2a1f      	cmp	r2, #31
    3e44:	dc3c      	bgt.n	3ec0 <__aeabi_ddiv+0x5dc>
    3e46:	2320      	movs	r3, #32
    3e48:	1a9b      	subs	r3, r3, r2
    3e4a:	000c      	movs	r4, r1
    3e4c:	4658      	mov	r0, fp
    3e4e:	4099      	lsls	r1, r3
    3e50:	4098      	lsls	r0, r3
    3e52:	1e4b      	subs	r3, r1, #1
    3e54:	4199      	sbcs	r1, r3
    3e56:	465b      	mov	r3, fp
    3e58:	40d4      	lsrs	r4, r2
    3e5a:	40d3      	lsrs	r3, r2
    3e5c:	4320      	orrs	r0, r4
    3e5e:	4308      	orrs	r0, r1
    3e60:	001a      	movs	r2, r3
    3e62:	0743      	lsls	r3, r0, #29
    3e64:	d009      	beq.n	3e7a <__aeabi_ddiv+0x596>
    3e66:	230f      	movs	r3, #15
    3e68:	4003      	ands	r3, r0
    3e6a:	2b04      	cmp	r3, #4
    3e6c:	d005      	beq.n	3e7a <__aeabi_ddiv+0x596>
    3e6e:	0001      	movs	r1, r0
    3e70:	1d08      	adds	r0, r1, #4
    3e72:	4288      	cmp	r0, r1
    3e74:	419b      	sbcs	r3, r3
    3e76:	425b      	negs	r3, r3
    3e78:	18d2      	adds	r2, r2, r3
    3e7a:	0213      	lsls	r3, r2, #8
    3e7c:	d53a      	bpl.n	3ef4 <__aeabi_ddiv+0x610>
    3e7e:	2301      	movs	r3, #1
    3e80:	9a02      	ldr	r2, [sp, #8]
    3e82:	2401      	movs	r4, #1
    3e84:	401a      	ands	r2, r3
    3e86:	2300      	movs	r3, #0
    3e88:	4694      	mov	ip, r2
    3e8a:	4698      	mov	r8, r3
    3e8c:	2200      	movs	r2, #0
    3e8e:	e5f7      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3e90:	2102      	movs	r1, #2
    3e92:	4249      	negs	r1, r1
    3e94:	468c      	mov	ip, r1
    3e96:	9d03      	ldr	r5, [sp, #12]
    3e98:	44e3      	add	fp, ip
    3e9a:	46ac      	mov	ip, r5
    3e9c:	44e2      	add	sl, ip
    3e9e:	45aa      	cmp	sl, r5
    3ea0:	41ad      	sbcs	r5, r5
    3ea2:	426d      	negs	r5, r5
    3ea4:	4445      	add	r5, r8
    3ea6:	18ed      	adds	r5, r5, r3
    3ea8:	1a2d      	subs	r5, r5, r0
    3eaa:	e696      	b.n	3bda <__aeabi_ddiv+0x2f6>
    3eac:	1e8a      	subs	r2, r1, #2
    3eae:	9903      	ldr	r1, [sp, #12]
    3eb0:	004d      	lsls	r5, r1, #1
    3eb2:	428d      	cmp	r5, r1
    3eb4:	4189      	sbcs	r1, r1
    3eb6:	4249      	negs	r1, r1
    3eb8:	4441      	add	r1, r8
    3eba:	1876      	adds	r6, r6, r1
    3ebc:	9503      	str	r5, [sp, #12]
    3ebe:	e78f      	b.n	3de0 <__aeabi_ddiv+0x4fc>
    3ec0:	201f      	movs	r0, #31
    3ec2:	4240      	negs	r0, r0
    3ec4:	1ac3      	subs	r3, r0, r3
    3ec6:	4658      	mov	r0, fp
    3ec8:	40d8      	lsrs	r0, r3
    3eca:	0003      	movs	r3, r0
    3ecc:	2a20      	cmp	r2, #32
    3ece:	d028      	beq.n	3f22 <__aeabi_ddiv+0x63e>
    3ed0:	2040      	movs	r0, #64	; 0x40
    3ed2:	465d      	mov	r5, fp
    3ed4:	1a82      	subs	r2, r0, r2
    3ed6:	4095      	lsls	r5, r2
    3ed8:	4329      	orrs	r1, r5
    3eda:	1e4a      	subs	r2, r1, #1
    3edc:	4191      	sbcs	r1, r2
    3ede:	4319      	orrs	r1, r3
    3ee0:	2307      	movs	r3, #7
    3ee2:	2200      	movs	r2, #0
    3ee4:	400b      	ands	r3, r1
    3ee6:	d009      	beq.n	3efc <__aeabi_ddiv+0x618>
    3ee8:	230f      	movs	r3, #15
    3eea:	2200      	movs	r2, #0
    3eec:	400b      	ands	r3, r1
    3eee:	0008      	movs	r0, r1
    3ef0:	2b04      	cmp	r3, #4
    3ef2:	d1bd      	bne.n	3e70 <__aeabi_ddiv+0x58c>
    3ef4:	0001      	movs	r1, r0
    3ef6:	0753      	lsls	r3, r2, #29
    3ef8:	0252      	lsls	r2, r2, #9
    3efa:	0b12      	lsrs	r2, r2, #12
    3efc:	08c9      	lsrs	r1, r1, #3
    3efe:	4319      	orrs	r1, r3
    3f00:	2301      	movs	r3, #1
    3f02:	4688      	mov	r8, r1
    3f04:	9902      	ldr	r1, [sp, #8]
    3f06:	2400      	movs	r4, #0
    3f08:	4019      	ands	r1, r3
    3f0a:	468c      	mov	ip, r1
    3f0c:	e5b8      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3f0e:	4552      	cmp	r2, sl
    3f10:	d8be      	bhi.n	3e90 <__aeabi_ddiv+0x5ac>
    3f12:	468b      	mov	fp, r1
    3f14:	2500      	movs	r5, #0
    3f16:	e660      	b.n	3bda <__aeabi_ddiv+0x2f6>
    3f18:	9d03      	ldr	r5, [sp, #12]
    3f1a:	429d      	cmp	r5, r3
    3f1c:	d3c6      	bcc.n	3eac <__aeabi_ddiv+0x5c8>
    3f1e:	0011      	movs	r1, r2
    3f20:	e762      	b.n	3de8 <__aeabi_ddiv+0x504>
    3f22:	2500      	movs	r5, #0
    3f24:	e7d8      	b.n	3ed8 <__aeabi_ddiv+0x5f4>
    3f26:	2280      	movs	r2, #128	; 0x80
    3f28:	465b      	mov	r3, fp
    3f2a:	0312      	lsls	r2, r2, #12
    3f2c:	431a      	orrs	r2, r3
    3f2e:	9b01      	ldr	r3, [sp, #4]
    3f30:	0312      	lsls	r2, r2, #12
    3f32:	0b12      	lsrs	r2, r2, #12
    3f34:	469c      	mov	ip, r3
    3f36:	4688      	mov	r8, r1
    3f38:	4c03      	ldr	r4, [pc, #12]	; (3f48 <__aeabi_ddiv+0x664>)
    3f3a:	e5a1      	b.n	3a80 <__aeabi_ddiv+0x19c>
    3f3c:	000003ff 	.word	0x000003ff
    3f40:	feffffff 	.word	0xfeffffff
    3f44:	000007fe 	.word	0x000007fe
    3f48:	000007ff 	.word	0x000007ff

00003f4c <__aeabi_dmul>:
    3f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f4e:	4657      	mov	r7, sl
    3f50:	4645      	mov	r5, r8
    3f52:	46de      	mov	lr, fp
    3f54:	464e      	mov	r6, r9
    3f56:	b5e0      	push	{r5, r6, r7, lr}
    3f58:	030c      	lsls	r4, r1, #12
    3f5a:	4698      	mov	r8, r3
    3f5c:	004e      	lsls	r6, r1, #1
    3f5e:	0b23      	lsrs	r3, r4, #12
    3f60:	b087      	sub	sp, #28
    3f62:	0007      	movs	r7, r0
    3f64:	4692      	mov	sl, r2
    3f66:	469b      	mov	fp, r3
    3f68:	0d76      	lsrs	r6, r6, #21
    3f6a:	0fcd      	lsrs	r5, r1, #31
    3f6c:	2e00      	cmp	r6, #0
    3f6e:	d06b      	beq.n	4048 <__aeabi_dmul+0xfc>
    3f70:	4b6d      	ldr	r3, [pc, #436]	; (4128 <__aeabi_dmul+0x1dc>)
    3f72:	429e      	cmp	r6, r3
    3f74:	d035      	beq.n	3fe2 <__aeabi_dmul+0x96>
    3f76:	2480      	movs	r4, #128	; 0x80
    3f78:	465b      	mov	r3, fp
    3f7a:	0f42      	lsrs	r2, r0, #29
    3f7c:	0424      	lsls	r4, r4, #16
    3f7e:	00db      	lsls	r3, r3, #3
    3f80:	4314      	orrs	r4, r2
    3f82:	431c      	orrs	r4, r3
    3f84:	00c3      	lsls	r3, r0, #3
    3f86:	4699      	mov	r9, r3
    3f88:	4b68      	ldr	r3, [pc, #416]	; (412c <__aeabi_dmul+0x1e0>)
    3f8a:	46a3      	mov	fp, r4
    3f8c:	469c      	mov	ip, r3
    3f8e:	2300      	movs	r3, #0
    3f90:	2700      	movs	r7, #0
    3f92:	4466      	add	r6, ip
    3f94:	9302      	str	r3, [sp, #8]
    3f96:	4643      	mov	r3, r8
    3f98:	031c      	lsls	r4, r3, #12
    3f9a:	005a      	lsls	r2, r3, #1
    3f9c:	0fdb      	lsrs	r3, r3, #31
    3f9e:	4650      	mov	r0, sl
    3fa0:	0b24      	lsrs	r4, r4, #12
    3fa2:	0d52      	lsrs	r2, r2, #21
    3fa4:	4698      	mov	r8, r3
    3fa6:	d100      	bne.n	3faa <__aeabi_dmul+0x5e>
    3fa8:	e076      	b.n	4098 <__aeabi_dmul+0x14c>
    3faa:	4b5f      	ldr	r3, [pc, #380]	; (4128 <__aeabi_dmul+0x1dc>)
    3fac:	429a      	cmp	r2, r3
    3fae:	d06d      	beq.n	408c <__aeabi_dmul+0x140>
    3fb0:	2380      	movs	r3, #128	; 0x80
    3fb2:	0f41      	lsrs	r1, r0, #29
    3fb4:	041b      	lsls	r3, r3, #16
    3fb6:	430b      	orrs	r3, r1
    3fb8:	495c      	ldr	r1, [pc, #368]	; (412c <__aeabi_dmul+0x1e0>)
    3fba:	00e4      	lsls	r4, r4, #3
    3fbc:	468c      	mov	ip, r1
    3fbe:	431c      	orrs	r4, r3
    3fc0:	00c3      	lsls	r3, r0, #3
    3fc2:	2000      	movs	r0, #0
    3fc4:	4462      	add	r2, ip
    3fc6:	4641      	mov	r1, r8
    3fc8:	18b6      	adds	r6, r6, r2
    3fca:	4069      	eors	r1, r5
    3fcc:	1c72      	adds	r2, r6, #1
    3fce:	9101      	str	r1, [sp, #4]
    3fd0:	4694      	mov	ip, r2
    3fd2:	4307      	orrs	r7, r0
    3fd4:	2f0f      	cmp	r7, #15
    3fd6:	d900      	bls.n	3fda <__aeabi_dmul+0x8e>
    3fd8:	e0b0      	b.n	413c <__aeabi_dmul+0x1f0>
    3fda:	4a55      	ldr	r2, [pc, #340]	; (4130 <__aeabi_dmul+0x1e4>)
    3fdc:	00bf      	lsls	r7, r7, #2
    3fde:	59d2      	ldr	r2, [r2, r7]
    3fe0:	4697      	mov	pc, r2
    3fe2:	465b      	mov	r3, fp
    3fe4:	4303      	orrs	r3, r0
    3fe6:	4699      	mov	r9, r3
    3fe8:	d000      	beq.n	3fec <__aeabi_dmul+0xa0>
    3fea:	e087      	b.n	40fc <__aeabi_dmul+0x1b0>
    3fec:	2300      	movs	r3, #0
    3fee:	469b      	mov	fp, r3
    3ff0:	3302      	adds	r3, #2
    3ff2:	2708      	movs	r7, #8
    3ff4:	9302      	str	r3, [sp, #8]
    3ff6:	e7ce      	b.n	3f96 <__aeabi_dmul+0x4a>
    3ff8:	4642      	mov	r2, r8
    3ffa:	9201      	str	r2, [sp, #4]
    3ffc:	2802      	cmp	r0, #2
    3ffe:	d067      	beq.n	40d0 <__aeabi_dmul+0x184>
    4000:	2803      	cmp	r0, #3
    4002:	d100      	bne.n	4006 <__aeabi_dmul+0xba>
    4004:	e20e      	b.n	4424 <__aeabi_dmul+0x4d8>
    4006:	2801      	cmp	r0, #1
    4008:	d000      	beq.n	400c <__aeabi_dmul+0xc0>
    400a:	e162      	b.n	42d2 <__aeabi_dmul+0x386>
    400c:	2300      	movs	r3, #0
    400e:	2400      	movs	r4, #0
    4010:	2200      	movs	r2, #0
    4012:	4699      	mov	r9, r3
    4014:	9901      	ldr	r1, [sp, #4]
    4016:	4001      	ands	r1, r0
    4018:	b2cd      	uxtb	r5, r1
    401a:	2100      	movs	r1, #0
    401c:	0312      	lsls	r2, r2, #12
    401e:	0d0b      	lsrs	r3, r1, #20
    4020:	0b12      	lsrs	r2, r2, #12
    4022:	051b      	lsls	r3, r3, #20
    4024:	4313      	orrs	r3, r2
    4026:	4a43      	ldr	r2, [pc, #268]	; (4134 <__aeabi_dmul+0x1e8>)
    4028:	0524      	lsls	r4, r4, #20
    402a:	4013      	ands	r3, r2
    402c:	431c      	orrs	r4, r3
    402e:	0064      	lsls	r4, r4, #1
    4030:	07ed      	lsls	r5, r5, #31
    4032:	0864      	lsrs	r4, r4, #1
    4034:	432c      	orrs	r4, r5
    4036:	4648      	mov	r0, r9
    4038:	0021      	movs	r1, r4
    403a:	b007      	add	sp, #28
    403c:	bc3c      	pop	{r2, r3, r4, r5}
    403e:	4690      	mov	r8, r2
    4040:	4699      	mov	r9, r3
    4042:	46a2      	mov	sl, r4
    4044:	46ab      	mov	fp, r5
    4046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4048:	4303      	orrs	r3, r0
    404a:	4699      	mov	r9, r3
    404c:	d04f      	beq.n	40ee <__aeabi_dmul+0x1a2>
    404e:	465b      	mov	r3, fp
    4050:	2b00      	cmp	r3, #0
    4052:	d100      	bne.n	4056 <__aeabi_dmul+0x10a>
    4054:	e189      	b.n	436a <__aeabi_dmul+0x41e>
    4056:	4658      	mov	r0, fp
    4058:	f000 fd7a 	bl	4b50 <__clzsi2>
    405c:	0003      	movs	r3, r0
    405e:	3b0b      	subs	r3, #11
    4060:	2b1c      	cmp	r3, #28
    4062:	dd00      	ble.n	4066 <__aeabi_dmul+0x11a>
    4064:	e17a      	b.n	435c <__aeabi_dmul+0x410>
    4066:	221d      	movs	r2, #29
    4068:	1ad3      	subs	r3, r2, r3
    406a:	003a      	movs	r2, r7
    406c:	0001      	movs	r1, r0
    406e:	465c      	mov	r4, fp
    4070:	40da      	lsrs	r2, r3
    4072:	3908      	subs	r1, #8
    4074:	408c      	lsls	r4, r1
    4076:	0013      	movs	r3, r2
    4078:	408f      	lsls	r7, r1
    407a:	4323      	orrs	r3, r4
    407c:	469b      	mov	fp, r3
    407e:	46b9      	mov	r9, r7
    4080:	2300      	movs	r3, #0
    4082:	4e2d      	ldr	r6, [pc, #180]	; (4138 <__aeabi_dmul+0x1ec>)
    4084:	2700      	movs	r7, #0
    4086:	1a36      	subs	r6, r6, r0
    4088:	9302      	str	r3, [sp, #8]
    408a:	e784      	b.n	3f96 <__aeabi_dmul+0x4a>
    408c:	4653      	mov	r3, sl
    408e:	4323      	orrs	r3, r4
    4090:	d12a      	bne.n	40e8 <__aeabi_dmul+0x19c>
    4092:	2400      	movs	r4, #0
    4094:	2002      	movs	r0, #2
    4096:	e796      	b.n	3fc6 <__aeabi_dmul+0x7a>
    4098:	4653      	mov	r3, sl
    409a:	4323      	orrs	r3, r4
    409c:	d020      	beq.n	40e0 <__aeabi_dmul+0x194>
    409e:	2c00      	cmp	r4, #0
    40a0:	d100      	bne.n	40a4 <__aeabi_dmul+0x158>
    40a2:	e157      	b.n	4354 <__aeabi_dmul+0x408>
    40a4:	0020      	movs	r0, r4
    40a6:	f000 fd53 	bl	4b50 <__clzsi2>
    40aa:	0003      	movs	r3, r0
    40ac:	3b0b      	subs	r3, #11
    40ae:	2b1c      	cmp	r3, #28
    40b0:	dd00      	ble.n	40b4 <__aeabi_dmul+0x168>
    40b2:	e149      	b.n	4348 <__aeabi_dmul+0x3fc>
    40b4:	211d      	movs	r1, #29
    40b6:	1acb      	subs	r3, r1, r3
    40b8:	4651      	mov	r1, sl
    40ba:	0002      	movs	r2, r0
    40bc:	40d9      	lsrs	r1, r3
    40be:	4653      	mov	r3, sl
    40c0:	3a08      	subs	r2, #8
    40c2:	4094      	lsls	r4, r2
    40c4:	4093      	lsls	r3, r2
    40c6:	430c      	orrs	r4, r1
    40c8:	4a1b      	ldr	r2, [pc, #108]	; (4138 <__aeabi_dmul+0x1ec>)
    40ca:	1a12      	subs	r2, r2, r0
    40cc:	2000      	movs	r0, #0
    40ce:	e77a      	b.n	3fc6 <__aeabi_dmul+0x7a>
    40d0:	2501      	movs	r5, #1
    40d2:	9b01      	ldr	r3, [sp, #4]
    40d4:	4c14      	ldr	r4, [pc, #80]	; (4128 <__aeabi_dmul+0x1dc>)
    40d6:	401d      	ands	r5, r3
    40d8:	2300      	movs	r3, #0
    40da:	2200      	movs	r2, #0
    40dc:	4699      	mov	r9, r3
    40de:	e79c      	b.n	401a <__aeabi_dmul+0xce>
    40e0:	2400      	movs	r4, #0
    40e2:	2200      	movs	r2, #0
    40e4:	2001      	movs	r0, #1
    40e6:	e76e      	b.n	3fc6 <__aeabi_dmul+0x7a>
    40e8:	4653      	mov	r3, sl
    40ea:	2003      	movs	r0, #3
    40ec:	e76b      	b.n	3fc6 <__aeabi_dmul+0x7a>
    40ee:	2300      	movs	r3, #0
    40f0:	469b      	mov	fp, r3
    40f2:	3301      	adds	r3, #1
    40f4:	2704      	movs	r7, #4
    40f6:	2600      	movs	r6, #0
    40f8:	9302      	str	r3, [sp, #8]
    40fa:	e74c      	b.n	3f96 <__aeabi_dmul+0x4a>
    40fc:	2303      	movs	r3, #3
    40fe:	4681      	mov	r9, r0
    4100:	270c      	movs	r7, #12
    4102:	9302      	str	r3, [sp, #8]
    4104:	e747      	b.n	3f96 <__aeabi_dmul+0x4a>
    4106:	2280      	movs	r2, #128	; 0x80
    4108:	2300      	movs	r3, #0
    410a:	2500      	movs	r5, #0
    410c:	0312      	lsls	r2, r2, #12
    410e:	4699      	mov	r9, r3
    4110:	4c05      	ldr	r4, [pc, #20]	; (4128 <__aeabi_dmul+0x1dc>)
    4112:	e782      	b.n	401a <__aeabi_dmul+0xce>
    4114:	465c      	mov	r4, fp
    4116:	464b      	mov	r3, r9
    4118:	9802      	ldr	r0, [sp, #8]
    411a:	e76f      	b.n	3ffc <__aeabi_dmul+0xb0>
    411c:	465c      	mov	r4, fp
    411e:	464b      	mov	r3, r9
    4120:	9501      	str	r5, [sp, #4]
    4122:	9802      	ldr	r0, [sp, #8]
    4124:	e76a      	b.n	3ffc <__aeabi_dmul+0xb0>
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	000007ff 	.word	0x000007ff
    412c:	fffffc01 	.word	0xfffffc01
    4130:	0000716c 	.word	0x0000716c
    4134:	800fffff 	.word	0x800fffff
    4138:	fffffc0d 	.word	0xfffffc0d
    413c:	464a      	mov	r2, r9
    413e:	4649      	mov	r1, r9
    4140:	0c17      	lsrs	r7, r2, #16
    4142:	0c1a      	lsrs	r2, r3, #16
    4144:	041b      	lsls	r3, r3, #16
    4146:	0c1b      	lsrs	r3, r3, #16
    4148:	0408      	lsls	r0, r1, #16
    414a:	0019      	movs	r1, r3
    414c:	0c00      	lsrs	r0, r0, #16
    414e:	4341      	muls	r1, r0
    4150:	0015      	movs	r5, r2
    4152:	4688      	mov	r8, r1
    4154:	0019      	movs	r1, r3
    4156:	437d      	muls	r5, r7
    4158:	4379      	muls	r1, r7
    415a:	9503      	str	r5, [sp, #12]
    415c:	4689      	mov	r9, r1
    415e:	0029      	movs	r1, r5
    4160:	0015      	movs	r5, r2
    4162:	4345      	muls	r5, r0
    4164:	444d      	add	r5, r9
    4166:	9502      	str	r5, [sp, #8]
    4168:	4645      	mov	r5, r8
    416a:	0c2d      	lsrs	r5, r5, #16
    416c:	46aa      	mov	sl, r5
    416e:	9d02      	ldr	r5, [sp, #8]
    4170:	4455      	add	r5, sl
    4172:	45a9      	cmp	r9, r5
    4174:	d906      	bls.n	4184 <__aeabi_dmul+0x238>
    4176:	468a      	mov	sl, r1
    4178:	2180      	movs	r1, #128	; 0x80
    417a:	0249      	lsls	r1, r1, #9
    417c:	4689      	mov	r9, r1
    417e:	44ca      	add	sl, r9
    4180:	4651      	mov	r1, sl
    4182:	9103      	str	r1, [sp, #12]
    4184:	0c29      	lsrs	r1, r5, #16
    4186:	9104      	str	r1, [sp, #16]
    4188:	4641      	mov	r1, r8
    418a:	0409      	lsls	r1, r1, #16
    418c:	042d      	lsls	r5, r5, #16
    418e:	0c09      	lsrs	r1, r1, #16
    4190:	4688      	mov	r8, r1
    4192:	0029      	movs	r1, r5
    4194:	0c25      	lsrs	r5, r4, #16
    4196:	0424      	lsls	r4, r4, #16
    4198:	4441      	add	r1, r8
    419a:	0c24      	lsrs	r4, r4, #16
    419c:	9105      	str	r1, [sp, #20]
    419e:	0021      	movs	r1, r4
    41a0:	4341      	muls	r1, r0
    41a2:	4688      	mov	r8, r1
    41a4:	0021      	movs	r1, r4
    41a6:	4379      	muls	r1, r7
    41a8:	468a      	mov	sl, r1
    41aa:	4368      	muls	r0, r5
    41ac:	4641      	mov	r1, r8
    41ae:	4450      	add	r0, sl
    41b0:	4681      	mov	r9, r0
    41b2:	0c08      	lsrs	r0, r1, #16
    41b4:	4448      	add	r0, r9
    41b6:	436f      	muls	r7, r5
    41b8:	4582      	cmp	sl, r0
    41ba:	d903      	bls.n	41c4 <__aeabi_dmul+0x278>
    41bc:	2180      	movs	r1, #128	; 0x80
    41be:	0249      	lsls	r1, r1, #9
    41c0:	4689      	mov	r9, r1
    41c2:	444f      	add	r7, r9
    41c4:	0c01      	lsrs	r1, r0, #16
    41c6:	4689      	mov	r9, r1
    41c8:	0039      	movs	r1, r7
    41ca:	4449      	add	r1, r9
    41cc:	9102      	str	r1, [sp, #8]
    41ce:	4641      	mov	r1, r8
    41d0:	040f      	lsls	r7, r1, #16
    41d2:	9904      	ldr	r1, [sp, #16]
    41d4:	0c3f      	lsrs	r7, r7, #16
    41d6:	4688      	mov	r8, r1
    41d8:	0400      	lsls	r0, r0, #16
    41da:	19c0      	adds	r0, r0, r7
    41dc:	4480      	add	r8, r0
    41de:	4641      	mov	r1, r8
    41e0:	9104      	str	r1, [sp, #16]
    41e2:	4659      	mov	r1, fp
    41e4:	0c0f      	lsrs	r7, r1, #16
    41e6:	0409      	lsls	r1, r1, #16
    41e8:	0c09      	lsrs	r1, r1, #16
    41ea:	4688      	mov	r8, r1
    41ec:	4359      	muls	r1, r3
    41ee:	468a      	mov	sl, r1
    41f0:	0039      	movs	r1, r7
    41f2:	4351      	muls	r1, r2
    41f4:	4689      	mov	r9, r1
    41f6:	4641      	mov	r1, r8
    41f8:	434a      	muls	r2, r1
    41fa:	4651      	mov	r1, sl
    41fc:	0c09      	lsrs	r1, r1, #16
    41fe:	468b      	mov	fp, r1
    4200:	437b      	muls	r3, r7
    4202:	18d2      	adds	r2, r2, r3
    4204:	445a      	add	r2, fp
    4206:	4293      	cmp	r3, r2
    4208:	d903      	bls.n	4212 <__aeabi_dmul+0x2c6>
    420a:	2380      	movs	r3, #128	; 0x80
    420c:	025b      	lsls	r3, r3, #9
    420e:	469b      	mov	fp, r3
    4210:	44d9      	add	r9, fp
    4212:	4651      	mov	r1, sl
    4214:	0409      	lsls	r1, r1, #16
    4216:	0c09      	lsrs	r1, r1, #16
    4218:	468a      	mov	sl, r1
    421a:	4641      	mov	r1, r8
    421c:	4361      	muls	r1, r4
    421e:	437c      	muls	r4, r7
    4220:	0c13      	lsrs	r3, r2, #16
    4222:	0412      	lsls	r2, r2, #16
    4224:	444b      	add	r3, r9
    4226:	4452      	add	r2, sl
    4228:	46a1      	mov	r9, r4
    422a:	468a      	mov	sl, r1
    422c:	003c      	movs	r4, r7
    422e:	4641      	mov	r1, r8
    4230:	436c      	muls	r4, r5
    4232:	434d      	muls	r5, r1
    4234:	4651      	mov	r1, sl
    4236:	444d      	add	r5, r9
    4238:	0c0f      	lsrs	r7, r1, #16
    423a:	197d      	adds	r5, r7, r5
    423c:	45a9      	cmp	r9, r5
    423e:	d903      	bls.n	4248 <__aeabi_dmul+0x2fc>
    4240:	2180      	movs	r1, #128	; 0x80
    4242:	0249      	lsls	r1, r1, #9
    4244:	4688      	mov	r8, r1
    4246:	4444      	add	r4, r8
    4248:	9f04      	ldr	r7, [sp, #16]
    424a:	9903      	ldr	r1, [sp, #12]
    424c:	46b8      	mov	r8, r7
    424e:	4441      	add	r1, r8
    4250:	468b      	mov	fp, r1
    4252:	4583      	cmp	fp, r0
    4254:	4180      	sbcs	r0, r0
    4256:	4241      	negs	r1, r0
    4258:	4688      	mov	r8, r1
    425a:	4651      	mov	r1, sl
    425c:	0408      	lsls	r0, r1, #16
    425e:	042f      	lsls	r7, r5, #16
    4260:	0c00      	lsrs	r0, r0, #16
    4262:	183f      	adds	r7, r7, r0
    4264:	4658      	mov	r0, fp
    4266:	9902      	ldr	r1, [sp, #8]
    4268:	1810      	adds	r0, r2, r0
    426a:	4689      	mov	r9, r1
    426c:	4290      	cmp	r0, r2
    426e:	4192      	sbcs	r2, r2
    4270:	444f      	add	r7, r9
    4272:	46ba      	mov	sl, r7
    4274:	4252      	negs	r2, r2
    4276:	4699      	mov	r9, r3
    4278:	4693      	mov	fp, r2
    427a:	44c2      	add	sl, r8
    427c:	44d1      	add	r9, sl
    427e:	44cb      	add	fp, r9
    4280:	428f      	cmp	r7, r1
    4282:	41bf      	sbcs	r7, r7
    4284:	45c2      	cmp	sl, r8
    4286:	4189      	sbcs	r1, r1
    4288:	4599      	cmp	r9, r3
    428a:	419b      	sbcs	r3, r3
    428c:	4593      	cmp	fp, r2
    428e:	4192      	sbcs	r2, r2
    4290:	427f      	negs	r7, r7
    4292:	4249      	negs	r1, r1
    4294:	0c2d      	lsrs	r5, r5, #16
    4296:	4252      	negs	r2, r2
    4298:	430f      	orrs	r7, r1
    429a:	425b      	negs	r3, r3
    429c:	4313      	orrs	r3, r2
    429e:	197f      	adds	r7, r7, r5
    42a0:	18ff      	adds	r7, r7, r3
    42a2:	465b      	mov	r3, fp
    42a4:	193c      	adds	r4, r7, r4
    42a6:	0ddb      	lsrs	r3, r3, #23
    42a8:	9a05      	ldr	r2, [sp, #20]
    42aa:	0264      	lsls	r4, r4, #9
    42ac:	431c      	orrs	r4, r3
    42ae:	0243      	lsls	r3, r0, #9
    42b0:	4313      	orrs	r3, r2
    42b2:	1e5d      	subs	r5, r3, #1
    42b4:	41ab      	sbcs	r3, r5
    42b6:	465a      	mov	r2, fp
    42b8:	0dc0      	lsrs	r0, r0, #23
    42ba:	4303      	orrs	r3, r0
    42bc:	0252      	lsls	r2, r2, #9
    42be:	4313      	orrs	r3, r2
    42c0:	01e2      	lsls	r2, r4, #7
    42c2:	d556      	bpl.n	4372 <__aeabi_dmul+0x426>
    42c4:	2001      	movs	r0, #1
    42c6:	085a      	lsrs	r2, r3, #1
    42c8:	4003      	ands	r3, r0
    42ca:	4313      	orrs	r3, r2
    42cc:	07e2      	lsls	r2, r4, #31
    42ce:	4313      	orrs	r3, r2
    42d0:	0864      	lsrs	r4, r4, #1
    42d2:	485a      	ldr	r0, [pc, #360]	; (443c <__aeabi_dmul+0x4f0>)
    42d4:	4460      	add	r0, ip
    42d6:	2800      	cmp	r0, #0
    42d8:	dd4d      	ble.n	4376 <__aeabi_dmul+0x42a>
    42da:	075a      	lsls	r2, r3, #29
    42dc:	d009      	beq.n	42f2 <__aeabi_dmul+0x3a6>
    42de:	220f      	movs	r2, #15
    42e0:	401a      	ands	r2, r3
    42e2:	2a04      	cmp	r2, #4
    42e4:	d005      	beq.n	42f2 <__aeabi_dmul+0x3a6>
    42e6:	1d1a      	adds	r2, r3, #4
    42e8:	429a      	cmp	r2, r3
    42ea:	419b      	sbcs	r3, r3
    42ec:	425b      	negs	r3, r3
    42ee:	18e4      	adds	r4, r4, r3
    42f0:	0013      	movs	r3, r2
    42f2:	01e2      	lsls	r2, r4, #7
    42f4:	d504      	bpl.n	4300 <__aeabi_dmul+0x3b4>
    42f6:	2080      	movs	r0, #128	; 0x80
    42f8:	4a51      	ldr	r2, [pc, #324]	; (4440 <__aeabi_dmul+0x4f4>)
    42fa:	00c0      	lsls	r0, r0, #3
    42fc:	4014      	ands	r4, r2
    42fe:	4460      	add	r0, ip
    4300:	4a50      	ldr	r2, [pc, #320]	; (4444 <__aeabi_dmul+0x4f8>)
    4302:	4290      	cmp	r0, r2
    4304:	dd00      	ble.n	4308 <__aeabi_dmul+0x3bc>
    4306:	e6e3      	b.n	40d0 <__aeabi_dmul+0x184>
    4308:	2501      	movs	r5, #1
    430a:	08db      	lsrs	r3, r3, #3
    430c:	0762      	lsls	r2, r4, #29
    430e:	431a      	orrs	r2, r3
    4310:	0264      	lsls	r4, r4, #9
    4312:	9b01      	ldr	r3, [sp, #4]
    4314:	4691      	mov	r9, r2
    4316:	0b22      	lsrs	r2, r4, #12
    4318:	0544      	lsls	r4, r0, #21
    431a:	0d64      	lsrs	r4, r4, #21
    431c:	401d      	ands	r5, r3
    431e:	e67c      	b.n	401a <__aeabi_dmul+0xce>
    4320:	2280      	movs	r2, #128	; 0x80
    4322:	4659      	mov	r1, fp
    4324:	0312      	lsls	r2, r2, #12
    4326:	4211      	tst	r1, r2
    4328:	d008      	beq.n	433c <__aeabi_dmul+0x3f0>
    432a:	4214      	tst	r4, r2
    432c:	d106      	bne.n	433c <__aeabi_dmul+0x3f0>
    432e:	4322      	orrs	r2, r4
    4330:	0312      	lsls	r2, r2, #12
    4332:	0b12      	lsrs	r2, r2, #12
    4334:	4645      	mov	r5, r8
    4336:	4699      	mov	r9, r3
    4338:	4c43      	ldr	r4, [pc, #268]	; (4448 <__aeabi_dmul+0x4fc>)
    433a:	e66e      	b.n	401a <__aeabi_dmul+0xce>
    433c:	465b      	mov	r3, fp
    433e:	431a      	orrs	r2, r3
    4340:	0312      	lsls	r2, r2, #12
    4342:	0b12      	lsrs	r2, r2, #12
    4344:	4c40      	ldr	r4, [pc, #256]	; (4448 <__aeabi_dmul+0x4fc>)
    4346:	e668      	b.n	401a <__aeabi_dmul+0xce>
    4348:	0003      	movs	r3, r0
    434a:	4654      	mov	r4, sl
    434c:	3b28      	subs	r3, #40	; 0x28
    434e:	409c      	lsls	r4, r3
    4350:	2300      	movs	r3, #0
    4352:	e6b9      	b.n	40c8 <__aeabi_dmul+0x17c>
    4354:	f000 fbfc 	bl	4b50 <__clzsi2>
    4358:	3020      	adds	r0, #32
    435a:	e6a6      	b.n	40aa <__aeabi_dmul+0x15e>
    435c:	0003      	movs	r3, r0
    435e:	3b28      	subs	r3, #40	; 0x28
    4360:	409f      	lsls	r7, r3
    4362:	2300      	movs	r3, #0
    4364:	46bb      	mov	fp, r7
    4366:	4699      	mov	r9, r3
    4368:	e68a      	b.n	4080 <__aeabi_dmul+0x134>
    436a:	f000 fbf1 	bl	4b50 <__clzsi2>
    436e:	3020      	adds	r0, #32
    4370:	e674      	b.n	405c <__aeabi_dmul+0x110>
    4372:	46b4      	mov	ip, r6
    4374:	e7ad      	b.n	42d2 <__aeabi_dmul+0x386>
    4376:	2501      	movs	r5, #1
    4378:	1a2a      	subs	r2, r5, r0
    437a:	2a38      	cmp	r2, #56	; 0x38
    437c:	dd06      	ble.n	438c <__aeabi_dmul+0x440>
    437e:	9b01      	ldr	r3, [sp, #4]
    4380:	2400      	movs	r4, #0
    4382:	401d      	ands	r5, r3
    4384:	2300      	movs	r3, #0
    4386:	2200      	movs	r2, #0
    4388:	4699      	mov	r9, r3
    438a:	e646      	b.n	401a <__aeabi_dmul+0xce>
    438c:	2a1f      	cmp	r2, #31
    438e:	dc21      	bgt.n	43d4 <__aeabi_dmul+0x488>
    4390:	2520      	movs	r5, #32
    4392:	0020      	movs	r0, r4
    4394:	1aad      	subs	r5, r5, r2
    4396:	001e      	movs	r6, r3
    4398:	40ab      	lsls	r3, r5
    439a:	40a8      	lsls	r0, r5
    439c:	40d6      	lsrs	r6, r2
    439e:	1e5d      	subs	r5, r3, #1
    43a0:	41ab      	sbcs	r3, r5
    43a2:	4330      	orrs	r0, r6
    43a4:	4318      	orrs	r0, r3
    43a6:	40d4      	lsrs	r4, r2
    43a8:	0743      	lsls	r3, r0, #29
    43aa:	d009      	beq.n	43c0 <__aeabi_dmul+0x474>
    43ac:	230f      	movs	r3, #15
    43ae:	4003      	ands	r3, r0
    43b0:	2b04      	cmp	r3, #4
    43b2:	d005      	beq.n	43c0 <__aeabi_dmul+0x474>
    43b4:	0003      	movs	r3, r0
    43b6:	1d18      	adds	r0, r3, #4
    43b8:	4298      	cmp	r0, r3
    43ba:	419b      	sbcs	r3, r3
    43bc:	425b      	negs	r3, r3
    43be:	18e4      	adds	r4, r4, r3
    43c0:	0223      	lsls	r3, r4, #8
    43c2:	d521      	bpl.n	4408 <__aeabi_dmul+0x4bc>
    43c4:	2501      	movs	r5, #1
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	2401      	movs	r4, #1
    43ca:	401d      	ands	r5, r3
    43cc:	2300      	movs	r3, #0
    43ce:	2200      	movs	r2, #0
    43d0:	4699      	mov	r9, r3
    43d2:	e622      	b.n	401a <__aeabi_dmul+0xce>
    43d4:	251f      	movs	r5, #31
    43d6:	0021      	movs	r1, r4
    43d8:	426d      	negs	r5, r5
    43da:	1a28      	subs	r0, r5, r0
    43dc:	40c1      	lsrs	r1, r0
    43de:	0008      	movs	r0, r1
    43e0:	2a20      	cmp	r2, #32
    43e2:	d01d      	beq.n	4420 <__aeabi_dmul+0x4d4>
    43e4:	355f      	adds	r5, #95	; 0x5f
    43e6:	1aaa      	subs	r2, r5, r2
    43e8:	4094      	lsls	r4, r2
    43ea:	4323      	orrs	r3, r4
    43ec:	1e5c      	subs	r4, r3, #1
    43ee:	41a3      	sbcs	r3, r4
    43f0:	2507      	movs	r5, #7
    43f2:	4303      	orrs	r3, r0
    43f4:	401d      	ands	r5, r3
    43f6:	2200      	movs	r2, #0
    43f8:	2d00      	cmp	r5, #0
    43fa:	d009      	beq.n	4410 <__aeabi_dmul+0x4c4>
    43fc:	220f      	movs	r2, #15
    43fe:	2400      	movs	r4, #0
    4400:	401a      	ands	r2, r3
    4402:	0018      	movs	r0, r3
    4404:	2a04      	cmp	r2, #4
    4406:	d1d6      	bne.n	43b6 <__aeabi_dmul+0x46a>
    4408:	0003      	movs	r3, r0
    440a:	0765      	lsls	r5, r4, #29
    440c:	0264      	lsls	r4, r4, #9
    440e:	0b22      	lsrs	r2, r4, #12
    4410:	08db      	lsrs	r3, r3, #3
    4412:	432b      	orrs	r3, r5
    4414:	2501      	movs	r5, #1
    4416:	4699      	mov	r9, r3
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	2400      	movs	r4, #0
    441c:	401d      	ands	r5, r3
    441e:	e5fc      	b.n	401a <__aeabi_dmul+0xce>
    4420:	2400      	movs	r4, #0
    4422:	e7e2      	b.n	43ea <__aeabi_dmul+0x49e>
    4424:	2280      	movs	r2, #128	; 0x80
    4426:	2501      	movs	r5, #1
    4428:	0312      	lsls	r2, r2, #12
    442a:	4322      	orrs	r2, r4
    442c:	9901      	ldr	r1, [sp, #4]
    442e:	0312      	lsls	r2, r2, #12
    4430:	0b12      	lsrs	r2, r2, #12
    4432:	400d      	ands	r5, r1
    4434:	4699      	mov	r9, r3
    4436:	4c04      	ldr	r4, [pc, #16]	; (4448 <__aeabi_dmul+0x4fc>)
    4438:	e5ef      	b.n	401a <__aeabi_dmul+0xce>
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	000003ff 	.word	0x000003ff
    4440:	feffffff 	.word	0xfeffffff
    4444:	000007fe 	.word	0x000007fe
    4448:	000007ff 	.word	0x000007ff

0000444c <__aeabi_dsub>:
    444c:	b5f0      	push	{r4, r5, r6, r7, lr}
    444e:	4646      	mov	r6, r8
    4450:	46d6      	mov	lr, sl
    4452:	464f      	mov	r7, r9
    4454:	030c      	lsls	r4, r1, #12
    4456:	b5c0      	push	{r6, r7, lr}
    4458:	0fcd      	lsrs	r5, r1, #31
    445a:	004e      	lsls	r6, r1, #1
    445c:	0a61      	lsrs	r1, r4, #9
    445e:	0f44      	lsrs	r4, r0, #29
    4460:	430c      	orrs	r4, r1
    4462:	00c1      	lsls	r1, r0, #3
    4464:	0058      	lsls	r0, r3, #1
    4466:	0d40      	lsrs	r0, r0, #21
    4468:	4684      	mov	ip, r0
    446a:	468a      	mov	sl, r1
    446c:	000f      	movs	r7, r1
    446e:	0319      	lsls	r1, r3, #12
    4470:	0f50      	lsrs	r0, r2, #29
    4472:	0a49      	lsrs	r1, r1, #9
    4474:	4301      	orrs	r1, r0
    4476:	48c6      	ldr	r0, [pc, #792]	; (4790 <__aeabi_dsub+0x344>)
    4478:	0d76      	lsrs	r6, r6, #21
    447a:	46a8      	mov	r8, r5
    447c:	0fdb      	lsrs	r3, r3, #31
    447e:	00d2      	lsls	r2, r2, #3
    4480:	4584      	cmp	ip, r0
    4482:	d100      	bne.n	4486 <__aeabi_dsub+0x3a>
    4484:	e0d8      	b.n	4638 <__aeabi_dsub+0x1ec>
    4486:	2001      	movs	r0, #1
    4488:	4043      	eors	r3, r0
    448a:	42ab      	cmp	r3, r5
    448c:	d100      	bne.n	4490 <__aeabi_dsub+0x44>
    448e:	e0a6      	b.n	45de <__aeabi_dsub+0x192>
    4490:	4660      	mov	r0, ip
    4492:	1a35      	subs	r5, r6, r0
    4494:	2d00      	cmp	r5, #0
    4496:	dc00      	bgt.n	449a <__aeabi_dsub+0x4e>
    4498:	e105      	b.n	46a6 <__aeabi_dsub+0x25a>
    449a:	2800      	cmp	r0, #0
    449c:	d110      	bne.n	44c0 <__aeabi_dsub+0x74>
    449e:	000b      	movs	r3, r1
    44a0:	4313      	orrs	r3, r2
    44a2:	d100      	bne.n	44a6 <__aeabi_dsub+0x5a>
    44a4:	e0d7      	b.n	4656 <__aeabi_dsub+0x20a>
    44a6:	1e6b      	subs	r3, r5, #1
    44a8:	2b00      	cmp	r3, #0
    44aa:	d000      	beq.n	44ae <__aeabi_dsub+0x62>
    44ac:	e14b      	b.n	4746 <__aeabi_dsub+0x2fa>
    44ae:	4653      	mov	r3, sl
    44b0:	1a9f      	subs	r7, r3, r2
    44b2:	45ba      	cmp	sl, r7
    44b4:	4180      	sbcs	r0, r0
    44b6:	1a64      	subs	r4, r4, r1
    44b8:	4240      	negs	r0, r0
    44ba:	1a24      	subs	r4, r4, r0
    44bc:	2601      	movs	r6, #1
    44be:	e01e      	b.n	44fe <__aeabi_dsub+0xb2>
    44c0:	4bb3      	ldr	r3, [pc, #716]	; (4790 <__aeabi_dsub+0x344>)
    44c2:	429e      	cmp	r6, r3
    44c4:	d048      	beq.n	4558 <__aeabi_dsub+0x10c>
    44c6:	2380      	movs	r3, #128	; 0x80
    44c8:	041b      	lsls	r3, r3, #16
    44ca:	4319      	orrs	r1, r3
    44cc:	2d38      	cmp	r5, #56	; 0x38
    44ce:	dd00      	ble.n	44d2 <__aeabi_dsub+0x86>
    44d0:	e119      	b.n	4706 <__aeabi_dsub+0x2ba>
    44d2:	2d1f      	cmp	r5, #31
    44d4:	dd00      	ble.n	44d8 <__aeabi_dsub+0x8c>
    44d6:	e14c      	b.n	4772 <__aeabi_dsub+0x326>
    44d8:	2320      	movs	r3, #32
    44da:	000f      	movs	r7, r1
    44dc:	1b5b      	subs	r3, r3, r5
    44de:	0010      	movs	r0, r2
    44e0:	409a      	lsls	r2, r3
    44e2:	409f      	lsls	r7, r3
    44e4:	40e8      	lsrs	r0, r5
    44e6:	1e53      	subs	r3, r2, #1
    44e8:	419a      	sbcs	r2, r3
    44ea:	40e9      	lsrs	r1, r5
    44ec:	4307      	orrs	r7, r0
    44ee:	4317      	orrs	r7, r2
    44f0:	4653      	mov	r3, sl
    44f2:	1bdf      	subs	r7, r3, r7
    44f4:	1a61      	subs	r1, r4, r1
    44f6:	45ba      	cmp	sl, r7
    44f8:	41a4      	sbcs	r4, r4
    44fa:	4264      	negs	r4, r4
    44fc:	1b0c      	subs	r4, r1, r4
    44fe:	0223      	lsls	r3, r4, #8
    4500:	d400      	bmi.n	4504 <__aeabi_dsub+0xb8>
    4502:	e0c5      	b.n	4690 <__aeabi_dsub+0x244>
    4504:	0264      	lsls	r4, r4, #9
    4506:	0a65      	lsrs	r5, r4, #9
    4508:	2d00      	cmp	r5, #0
    450a:	d100      	bne.n	450e <__aeabi_dsub+0xc2>
    450c:	e0f6      	b.n	46fc <__aeabi_dsub+0x2b0>
    450e:	0028      	movs	r0, r5
    4510:	f000 fb1e 	bl	4b50 <__clzsi2>
    4514:	0003      	movs	r3, r0
    4516:	3b08      	subs	r3, #8
    4518:	2b1f      	cmp	r3, #31
    451a:	dd00      	ble.n	451e <__aeabi_dsub+0xd2>
    451c:	e0e9      	b.n	46f2 <__aeabi_dsub+0x2a6>
    451e:	2220      	movs	r2, #32
    4520:	003c      	movs	r4, r7
    4522:	1ad2      	subs	r2, r2, r3
    4524:	409d      	lsls	r5, r3
    4526:	40d4      	lsrs	r4, r2
    4528:	409f      	lsls	r7, r3
    452a:	4325      	orrs	r5, r4
    452c:	429e      	cmp	r6, r3
    452e:	dd00      	ble.n	4532 <__aeabi_dsub+0xe6>
    4530:	e0db      	b.n	46ea <__aeabi_dsub+0x29e>
    4532:	1b9e      	subs	r6, r3, r6
    4534:	1c73      	adds	r3, r6, #1
    4536:	2b1f      	cmp	r3, #31
    4538:	dd00      	ble.n	453c <__aeabi_dsub+0xf0>
    453a:	e10a      	b.n	4752 <__aeabi_dsub+0x306>
    453c:	2220      	movs	r2, #32
    453e:	0038      	movs	r0, r7
    4540:	1ad2      	subs	r2, r2, r3
    4542:	0029      	movs	r1, r5
    4544:	4097      	lsls	r7, r2
    4546:	002c      	movs	r4, r5
    4548:	4091      	lsls	r1, r2
    454a:	40d8      	lsrs	r0, r3
    454c:	1e7a      	subs	r2, r7, #1
    454e:	4197      	sbcs	r7, r2
    4550:	40dc      	lsrs	r4, r3
    4552:	2600      	movs	r6, #0
    4554:	4301      	orrs	r1, r0
    4556:	430f      	orrs	r7, r1
    4558:	077b      	lsls	r3, r7, #29
    455a:	d009      	beq.n	4570 <__aeabi_dsub+0x124>
    455c:	230f      	movs	r3, #15
    455e:	403b      	ands	r3, r7
    4560:	2b04      	cmp	r3, #4
    4562:	d005      	beq.n	4570 <__aeabi_dsub+0x124>
    4564:	1d3b      	adds	r3, r7, #4
    4566:	42bb      	cmp	r3, r7
    4568:	41bf      	sbcs	r7, r7
    456a:	427f      	negs	r7, r7
    456c:	19e4      	adds	r4, r4, r7
    456e:	001f      	movs	r7, r3
    4570:	0223      	lsls	r3, r4, #8
    4572:	d525      	bpl.n	45c0 <__aeabi_dsub+0x174>
    4574:	4b86      	ldr	r3, [pc, #536]	; (4790 <__aeabi_dsub+0x344>)
    4576:	3601      	adds	r6, #1
    4578:	429e      	cmp	r6, r3
    457a:	d100      	bne.n	457e <__aeabi_dsub+0x132>
    457c:	e0af      	b.n	46de <__aeabi_dsub+0x292>
    457e:	4b85      	ldr	r3, [pc, #532]	; (4794 <__aeabi_dsub+0x348>)
    4580:	2501      	movs	r5, #1
    4582:	401c      	ands	r4, r3
    4584:	4643      	mov	r3, r8
    4586:	0762      	lsls	r2, r4, #29
    4588:	08ff      	lsrs	r7, r7, #3
    458a:	0264      	lsls	r4, r4, #9
    458c:	0576      	lsls	r6, r6, #21
    458e:	4317      	orrs	r7, r2
    4590:	0b24      	lsrs	r4, r4, #12
    4592:	0d76      	lsrs	r6, r6, #21
    4594:	401d      	ands	r5, r3
    4596:	2100      	movs	r1, #0
    4598:	0324      	lsls	r4, r4, #12
    459a:	0b23      	lsrs	r3, r4, #12
    459c:	0d0c      	lsrs	r4, r1, #20
    459e:	4a7e      	ldr	r2, [pc, #504]	; (4798 <__aeabi_dsub+0x34c>)
    45a0:	0524      	lsls	r4, r4, #20
    45a2:	431c      	orrs	r4, r3
    45a4:	4014      	ands	r4, r2
    45a6:	0533      	lsls	r3, r6, #20
    45a8:	4323      	orrs	r3, r4
    45aa:	005b      	lsls	r3, r3, #1
    45ac:	07ed      	lsls	r5, r5, #31
    45ae:	085b      	lsrs	r3, r3, #1
    45b0:	432b      	orrs	r3, r5
    45b2:	0038      	movs	r0, r7
    45b4:	0019      	movs	r1, r3
    45b6:	bc1c      	pop	{r2, r3, r4}
    45b8:	4690      	mov	r8, r2
    45ba:	4699      	mov	r9, r3
    45bc:	46a2      	mov	sl, r4
    45be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45c0:	2501      	movs	r5, #1
    45c2:	4643      	mov	r3, r8
    45c4:	0762      	lsls	r2, r4, #29
    45c6:	08ff      	lsrs	r7, r7, #3
    45c8:	4317      	orrs	r7, r2
    45ca:	08e4      	lsrs	r4, r4, #3
    45cc:	401d      	ands	r5, r3
    45ce:	4b70      	ldr	r3, [pc, #448]	; (4790 <__aeabi_dsub+0x344>)
    45d0:	429e      	cmp	r6, r3
    45d2:	d036      	beq.n	4642 <__aeabi_dsub+0x1f6>
    45d4:	0324      	lsls	r4, r4, #12
    45d6:	0576      	lsls	r6, r6, #21
    45d8:	0b24      	lsrs	r4, r4, #12
    45da:	0d76      	lsrs	r6, r6, #21
    45dc:	e7db      	b.n	4596 <__aeabi_dsub+0x14a>
    45de:	4663      	mov	r3, ip
    45e0:	1af3      	subs	r3, r6, r3
    45e2:	2b00      	cmp	r3, #0
    45e4:	dc00      	bgt.n	45e8 <__aeabi_dsub+0x19c>
    45e6:	e094      	b.n	4712 <__aeabi_dsub+0x2c6>
    45e8:	4660      	mov	r0, ip
    45ea:	2800      	cmp	r0, #0
    45ec:	d035      	beq.n	465a <__aeabi_dsub+0x20e>
    45ee:	4868      	ldr	r0, [pc, #416]	; (4790 <__aeabi_dsub+0x344>)
    45f0:	4286      	cmp	r6, r0
    45f2:	d0b1      	beq.n	4558 <__aeabi_dsub+0x10c>
    45f4:	2780      	movs	r7, #128	; 0x80
    45f6:	043f      	lsls	r7, r7, #16
    45f8:	4339      	orrs	r1, r7
    45fa:	2b38      	cmp	r3, #56	; 0x38
    45fc:	dc00      	bgt.n	4600 <__aeabi_dsub+0x1b4>
    45fe:	e0fd      	b.n	47fc <__aeabi_dsub+0x3b0>
    4600:	430a      	orrs	r2, r1
    4602:	0017      	movs	r7, r2
    4604:	2100      	movs	r1, #0
    4606:	1e7a      	subs	r2, r7, #1
    4608:	4197      	sbcs	r7, r2
    460a:	4457      	add	r7, sl
    460c:	4557      	cmp	r7, sl
    460e:	4180      	sbcs	r0, r0
    4610:	1909      	adds	r1, r1, r4
    4612:	4244      	negs	r4, r0
    4614:	190c      	adds	r4, r1, r4
    4616:	0223      	lsls	r3, r4, #8
    4618:	d53a      	bpl.n	4690 <__aeabi_dsub+0x244>
    461a:	4b5d      	ldr	r3, [pc, #372]	; (4790 <__aeabi_dsub+0x344>)
    461c:	3601      	adds	r6, #1
    461e:	429e      	cmp	r6, r3
    4620:	d100      	bne.n	4624 <__aeabi_dsub+0x1d8>
    4622:	e14b      	b.n	48bc <__aeabi_dsub+0x470>
    4624:	2201      	movs	r2, #1
    4626:	4b5b      	ldr	r3, [pc, #364]	; (4794 <__aeabi_dsub+0x348>)
    4628:	401c      	ands	r4, r3
    462a:	087b      	lsrs	r3, r7, #1
    462c:	4017      	ands	r7, r2
    462e:	431f      	orrs	r7, r3
    4630:	07e2      	lsls	r2, r4, #31
    4632:	4317      	orrs	r7, r2
    4634:	0864      	lsrs	r4, r4, #1
    4636:	e78f      	b.n	4558 <__aeabi_dsub+0x10c>
    4638:	0008      	movs	r0, r1
    463a:	4310      	orrs	r0, r2
    463c:	d000      	beq.n	4640 <__aeabi_dsub+0x1f4>
    463e:	e724      	b.n	448a <__aeabi_dsub+0x3e>
    4640:	e721      	b.n	4486 <__aeabi_dsub+0x3a>
    4642:	0023      	movs	r3, r4
    4644:	433b      	orrs	r3, r7
    4646:	d100      	bne.n	464a <__aeabi_dsub+0x1fe>
    4648:	e1b9      	b.n	49be <__aeabi_dsub+0x572>
    464a:	2280      	movs	r2, #128	; 0x80
    464c:	0312      	lsls	r2, r2, #12
    464e:	4314      	orrs	r4, r2
    4650:	0324      	lsls	r4, r4, #12
    4652:	0b24      	lsrs	r4, r4, #12
    4654:	e79f      	b.n	4596 <__aeabi_dsub+0x14a>
    4656:	002e      	movs	r6, r5
    4658:	e77e      	b.n	4558 <__aeabi_dsub+0x10c>
    465a:	0008      	movs	r0, r1
    465c:	4310      	orrs	r0, r2
    465e:	d100      	bne.n	4662 <__aeabi_dsub+0x216>
    4660:	e0ca      	b.n	47f8 <__aeabi_dsub+0x3ac>
    4662:	1e58      	subs	r0, r3, #1
    4664:	4684      	mov	ip, r0
    4666:	2800      	cmp	r0, #0
    4668:	d000      	beq.n	466c <__aeabi_dsub+0x220>
    466a:	e0e7      	b.n	483c <__aeabi_dsub+0x3f0>
    466c:	4452      	add	r2, sl
    466e:	4552      	cmp	r2, sl
    4670:	4180      	sbcs	r0, r0
    4672:	1864      	adds	r4, r4, r1
    4674:	4240      	negs	r0, r0
    4676:	1824      	adds	r4, r4, r0
    4678:	0017      	movs	r7, r2
    467a:	2601      	movs	r6, #1
    467c:	0223      	lsls	r3, r4, #8
    467e:	d507      	bpl.n	4690 <__aeabi_dsub+0x244>
    4680:	2602      	movs	r6, #2
    4682:	e7cf      	b.n	4624 <__aeabi_dsub+0x1d8>
    4684:	4664      	mov	r4, ip
    4686:	432c      	orrs	r4, r5
    4688:	d100      	bne.n	468c <__aeabi_dsub+0x240>
    468a:	e1b3      	b.n	49f4 <__aeabi_dsub+0x5a8>
    468c:	002c      	movs	r4, r5
    468e:	4667      	mov	r7, ip
    4690:	077b      	lsls	r3, r7, #29
    4692:	d000      	beq.n	4696 <__aeabi_dsub+0x24a>
    4694:	e762      	b.n	455c <__aeabi_dsub+0x110>
    4696:	0763      	lsls	r3, r4, #29
    4698:	08ff      	lsrs	r7, r7, #3
    469a:	431f      	orrs	r7, r3
    469c:	2501      	movs	r5, #1
    469e:	4643      	mov	r3, r8
    46a0:	08e4      	lsrs	r4, r4, #3
    46a2:	401d      	ands	r5, r3
    46a4:	e793      	b.n	45ce <__aeabi_dsub+0x182>
    46a6:	2d00      	cmp	r5, #0
    46a8:	d178      	bne.n	479c <__aeabi_dsub+0x350>
    46aa:	1c75      	adds	r5, r6, #1
    46ac:	056d      	lsls	r5, r5, #21
    46ae:	0d6d      	lsrs	r5, r5, #21
    46b0:	2d01      	cmp	r5, #1
    46b2:	dc00      	bgt.n	46b6 <__aeabi_dsub+0x26a>
    46b4:	e0f2      	b.n	489c <__aeabi_dsub+0x450>
    46b6:	4650      	mov	r0, sl
    46b8:	1a80      	subs	r0, r0, r2
    46ba:	4582      	cmp	sl, r0
    46bc:	41bf      	sbcs	r7, r7
    46be:	1a65      	subs	r5, r4, r1
    46c0:	427f      	negs	r7, r7
    46c2:	1bed      	subs	r5, r5, r7
    46c4:	4684      	mov	ip, r0
    46c6:	0228      	lsls	r0, r5, #8
    46c8:	d400      	bmi.n	46cc <__aeabi_dsub+0x280>
    46ca:	e08c      	b.n	47e6 <__aeabi_dsub+0x39a>
    46cc:	4650      	mov	r0, sl
    46ce:	1a17      	subs	r7, r2, r0
    46d0:	42ba      	cmp	r2, r7
    46d2:	4192      	sbcs	r2, r2
    46d4:	1b0c      	subs	r4, r1, r4
    46d6:	4255      	negs	r5, r2
    46d8:	1b65      	subs	r5, r4, r5
    46da:	4698      	mov	r8, r3
    46dc:	e714      	b.n	4508 <__aeabi_dsub+0xbc>
    46de:	2501      	movs	r5, #1
    46e0:	4643      	mov	r3, r8
    46e2:	2400      	movs	r4, #0
    46e4:	401d      	ands	r5, r3
    46e6:	2700      	movs	r7, #0
    46e8:	e755      	b.n	4596 <__aeabi_dsub+0x14a>
    46ea:	4c2a      	ldr	r4, [pc, #168]	; (4794 <__aeabi_dsub+0x348>)
    46ec:	1af6      	subs	r6, r6, r3
    46ee:	402c      	ands	r4, r5
    46f0:	e732      	b.n	4558 <__aeabi_dsub+0x10c>
    46f2:	003d      	movs	r5, r7
    46f4:	3828      	subs	r0, #40	; 0x28
    46f6:	4085      	lsls	r5, r0
    46f8:	2700      	movs	r7, #0
    46fa:	e717      	b.n	452c <__aeabi_dsub+0xe0>
    46fc:	0038      	movs	r0, r7
    46fe:	f000 fa27 	bl	4b50 <__clzsi2>
    4702:	3020      	adds	r0, #32
    4704:	e706      	b.n	4514 <__aeabi_dsub+0xc8>
    4706:	430a      	orrs	r2, r1
    4708:	0017      	movs	r7, r2
    470a:	2100      	movs	r1, #0
    470c:	1e7a      	subs	r2, r7, #1
    470e:	4197      	sbcs	r7, r2
    4710:	e6ee      	b.n	44f0 <__aeabi_dsub+0xa4>
    4712:	2b00      	cmp	r3, #0
    4714:	d000      	beq.n	4718 <__aeabi_dsub+0x2cc>
    4716:	e0e5      	b.n	48e4 <__aeabi_dsub+0x498>
    4718:	1c73      	adds	r3, r6, #1
    471a:	469c      	mov	ip, r3
    471c:	055b      	lsls	r3, r3, #21
    471e:	0d5b      	lsrs	r3, r3, #21
    4720:	2b01      	cmp	r3, #1
    4722:	dc00      	bgt.n	4726 <__aeabi_dsub+0x2da>
    4724:	e09f      	b.n	4866 <__aeabi_dsub+0x41a>
    4726:	4b1a      	ldr	r3, [pc, #104]	; (4790 <__aeabi_dsub+0x344>)
    4728:	459c      	cmp	ip, r3
    472a:	d100      	bne.n	472e <__aeabi_dsub+0x2e2>
    472c:	e0c5      	b.n	48ba <__aeabi_dsub+0x46e>
    472e:	4452      	add	r2, sl
    4730:	4552      	cmp	r2, sl
    4732:	4180      	sbcs	r0, r0
    4734:	1864      	adds	r4, r4, r1
    4736:	4240      	negs	r0, r0
    4738:	1824      	adds	r4, r4, r0
    473a:	07e7      	lsls	r7, r4, #31
    473c:	0852      	lsrs	r2, r2, #1
    473e:	4317      	orrs	r7, r2
    4740:	0864      	lsrs	r4, r4, #1
    4742:	4666      	mov	r6, ip
    4744:	e708      	b.n	4558 <__aeabi_dsub+0x10c>
    4746:	4812      	ldr	r0, [pc, #72]	; (4790 <__aeabi_dsub+0x344>)
    4748:	4285      	cmp	r5, r0
    474a:	d100      	bne.n	474e <__aeabi_dsub+0x302>
    474c:	e085      	b.n	485a <__aeabi_dsub+0x40e>
    474e:	001d      	movs	r5, r3
    4750:	e6bc      	b.n	44cc <__aeabi_dsub+0x80>
    4752:	0029      	movs	r1, r5
    4754:	3e1f      	subs	r6, #31
    4756:	40f1      	lsrs	r1, r6
    4758:	2b20      	cmp	r3, #32
    475a:	d100      	bne.n	475e <__aeabi_dsub+0x312>
    475c:	e07f      	b.n	485e <__aeabi_dsub+0x412>
    475e:	2240      	movs	r2, #64	; 0x40
    4760:	1ad3      	subs	r3, r2, r3
    4762:	409d      	lsls	r5, r3
    4764:	432f      	orrs	r7, r5
    4766:	1e7d      	subs	r5, r7, #1
    4768:	41af      	sbcs	r7, r5
    476a:	2400      	movs	r4, #0
    476c:	430f      	orrs	r7, r1
    476e:	2600      	movs	r6, #0
    4770:	e78e      	b.n	4690 <__aeabi_dsub+0x244>
    4772:	002b      	movs	r3, r5
    4774:	000f      	movs	r7, r1
    4776:	3b20      	subs	r3, #32
    4778:	40df      	lsrs	r7, r3
    477a:	2d20      	cmp	r5, #32
    477c:	d071      	beq.n	4862 <__aeabi_dsub+0x416>
    477e:	2340      	movs	r3, #64	; 0x40
    4780:	1b5d      	subs	r5, r3, r5
    4782:	40a9      	lsls	r1, r5
    4784:	430a      	orrs	r2, r1
    4786:	1e51      	subs	r1, r2, #1
    4788:	418a      	sbcs	r2, r1
    478a:	2100      	movs	r1, #0
    478c:	4317      	orrs	r7, r2
    478e:	e6af      	b.n	44f0 <__aeabi_dsub+0xa4>
    4790:	000007ff 	.word	0x000007ff
    4794:	ff7fffff 	.word	0xff7fffff
    4798:	800fffff 	.word	0x800fffff
    479c:	2e00      	cmp	r6, #0
    479e:	d03e      	beq.n	481e <__aeabi_dsub+0x3d2>
    47a0:	4eb3      	ldr	r6, [pc, #716]	; (4a70 <__aeabi_dsub+0x624>)
    47a2:	45b4      	cmp	ip, r6
    47a4:	d045      	beq.n	4832 <__aeabi_dsub+0x3e6>
    47a6:	2680      	movs	r6, #128	; 0x80
    47a8:	0436      	lsls	r6, r6, #16
    47aa:	426d      	negs	r5, r5
    47ac:	4334      	orrs	r4, r6
    47ae:	2d38      	cmp	r5, #56	; 0x38
    47b0:	dd00      	ble.n	47b4 <__aeabi_dsub+0x368>
    47b2:	e0a8      	b.n	4906 <__aeabi_dsub+0x4ba>
    47b4:	2d1f      	cmp	r5, #31
    47b6:	dd00      	ble.n	47ba <__aeabi_dsub+0x36e>
    47b8:	e11f      	b.n	49fa <__aeabi_dsub+0x5ae>
    47ba:	2620      	movs	r6, #32
    47bc:	0027      	movs	r7, r4
    47be:	4650      	mov	r0, sl
    47c0:	1b76      	subs	r6, r6, r5
    47c2:	40b7      	lsls	r7, r6
    47c4:	40e8      	lsrs	r0, r5
    47c6:	4307      	orrs	r7, r0
    47c8:	4650      	mov	r0, sl
    47ca:	40b0      	lsls	r0, r6
    47cc:	1e46      	subs	r6, r0, #1
    47ce:	41b0      	sbcs	r0, r6
    47d0:	40ec      	lsrs	r4, r5
    47d2:	4338      	orrs	r0, r7
    47d4:	1a17      	subs	r7, r2, r0
    47d6:	42ba      	cmp	r2, r7
    47d8:	4192      	sbcs	r2, r2
    47da:	1b0c      	subs	r4, r1, r4
    47dc:	4252      	negs	r2, r2
    47de:	1aa4      	subs	r4, r4, r2
    47e0:	4666      	mov	r6, ip
    47e2:	4698      	mov	r8, r3
    47e4:	e68b      	b.n	44fe <__aeabi_dsub+0xb2>
    47e6:	4664      	mov	r4, ip
    47e8:	4667      	mov	r7, ip
    47ea:	432c      	orrs	r4, r5
    47ec:	d000      	beq.n	47f0 <__aeabi_dsub+0x3a4>
    47ee:	e68b      	b.n	4508 <__aeabi_dsub+0xbc>
    47f0:	2500      	movs	r5, #0
    47f2:	2600      	movs	r6, #0
    47f4:	2700      	movs	r7, #0
    47f6:	e6ea      	b.n	45ce <__aeabi_dsub+0x182>
    47f8:	001e      	movs	r6, r3
    47fa:	e6ad      	b.n	4558 <__aeabi_dsub+0x10c>
    47fc:	2b1f      	cmp	r3, #31
    47fe:	dc60      	bgt.n	48c2 <__aeabi_dsub+0x476>
    4800:	2720      	movs	r7, #32
    4802:	1af8      	subs	r0, r7, r3
    4804:	000f      	movs	r7, r1
    4806:	4684      	mov	ip, r0
    4808:	4087      	lsls	r7, r0
    480a:	0010      	movs	r0, r2
    480c:	40d8      	lsrs	r0, r3
    480e:	4307      	orrs	r7, r0
    4810:	4660      	mov	r0, ip
    4812:	4082      	lsls	r2, r0
    4814:	1e50      	subs	r0, r2, #1
    4816:	4182      	sbcs	r2, r0
    4818:	40d9      	lsrs	r1, r3
    481a:	4317      	orrs	r7, r2
    481c:	e6f5      	b.n	460a <__aeabi_dsub+0x1be>
    481e:	0026      	movs	r6, r4
    4820:	4650      	mov	r0, sl
    4822:	4306      	orrs	r6, r0
    4824:	d005      	beq.n	4832 <__aeabi_dsub+0x3e6>
    4826:	43ed      	mvns	r5, r5
    4828:	2d00      	cmp	r5, #0
    482a:	d0d3      	beq.n	47d4 <__aeabi_dsub+0x388>
    482c:	4e90      	ldr	r6, [pc, #576]	; (4a70 <__aeabi_dsub+0x624>)
    482e:	45b4      	cmp	ip, r6
    4830:	d1bd      	bne.n	47ae <__aeabi_dsub+0x362>
    4832:	000c      	movs	r4, r1
    4834:	0017      	movs	r7, r2
    4836:	4666      	mov	r6, ip
    4838:	4698      	mov	r8, r3
    483a:	e68d      	b.n	4558 <__aeabi_dsub+0x10c>
    483c:	488c      	ldr	r0, [pc, #560]	; (4a70 <__aeabi_dsub+0x624>)
    483e:	4283      	cmp	r3, r0
    4840:	d00b      	beq.n	485a <__aeabi_dsub+0x40e>
    4842:	4663      	mov	r3, ip
    4844:	e6d9      	b.n	45fa <__aeabi_dsub+0x1ae>
    4846:	2d00      	cmp	r5, #0
    4848:	d000      	beq.n	484c <__aeabi_dsub+0x400>
    484a:	e096      	b.n	497a <__aeabi_dsub+0x52e>
    484c:	0008      	movs	r0, r1
    484e:	4310      	orrs	r0, r2
    4850:	d100      	bne.n	4854 <__aeabi_dsub+0x408>
    4852:	e0e2      	b.n	4a1a <__aeabi_dsub+0x5ce>
    4854:	000c      	movs	r4, r1
    4856:	0017      	movs	r7, r2
    4858:	4698      	mov	r8, r3
    485a:	4e85      	ldr	r6, [pc, #532]	; (4a70 <__aeabi_dsub+0x624>)
    485c:	e67c      	b.n	4558 <__aeabi_dsub+0x10c>
    485e:	2500      	movs	r5, #0
    4860:	e780      	b.n	4764 <__aeabi_dsub+0x318>
    4862:	2100      	movs	r1, #0
    4864:	e78e      	b.n	4784 <__aeabi_dsub+0x338>
    4866:	0023      	movs	r3, r4
    4868:	4650      	mov	r0, sl
    486a:	4303      	orrs	r3, r0
    486c:	2e00      	cmp	r6, #0
    486e:	d000      	beq.n	4872 <__aeabi_dsub+0x426>
    4870:	e0a8      	b.n	49c4 <__aeabi_dsub+0x578>
    4872:	2b00      	cmp	r3, #0
    4874:	d100      	bne.n	4878 <__aeabi_dsub+0x42c>
    4876:	e0de      	b.n	4a36 <__aeabi_dsub+0x5ea>
    4878:	000b      	movs	r3, r1
    487a:	4313      	orrs	r3, r2
    487c:	d100      	bne.n	4880 <__aeabi_dsub+0x434>
    487e:	e66b      	b.n	4558 <__aeabi_dsub+0x10c>
    4880:	4452      	add	r2, sl
    4882:	4552      	cmp	r2, sl
    4884:	4180      	sbcs	r0, r0
    4886:	1864      	adds	r4, r4, r1
    4888:	4240      	negs	r0, r0
    488a:	1824      	adds	r4, r4, r0
    488c:	0017      	movs	r7, r2
    488e:	0223      	lsls	r3, r4, #8
    4890:	d400      	bmi.n	4894 <__aeabi_dsub+0x448>
    4892:	e6fd      	b.n	4690 <__aeabi_dsub+0x244>
    4894:	4b77      	ldr	r3, [pc, #476]	; (4a74 <__aeabi_dsub+0x628>)
    4896:	4666      	mov	r6, ip
    4898:	401c      	ands	r4, r3
    489a:	e65d      	b.n	4558 <__aeabi_dsub+0x10c>
    489c:	0025      	movs	r5, r4
    489e:	4650      	mov	r0, sl
    48a0:	4305      	orrs	r5, r0
    48a2:	2e00      	cmp	r6, #0
    48a4:	d1cf      	bne.n	4846 <__aeabi_dsub+0x3fa>
    48a6:	2d00      	cmp	r5, #0
    48a8:	d14f      	bne.n	494a <__aeabi_dsub+0x4fe>
    48aa:	000c      	movs	r4, r1
    48ac:	4314      	orrs	r4, r2
    48ae:	d100      	bne.n	48b2 <__aeabi_dsub+0x466>
    48b0:	e0a0      	b.n	49f4 <__aeabi_dsub+0x5a8>
    48b2:	000c      	movs	r4, r1
    48b4:	0017      	movs	r7, r2
    48b6:	4698      	mov	r8, r3
    48b8:	e64e      	b.n	4558 <__aeabi_dsub+0x10c>
    48ba:	4666      	mov	r6, ip
    48bc:	2400      	movs	r4, #0
    48be:	2700      	movs	r7, #0
    48c0:	e685      	b.n	45ce <__aeabi_dsub+0x182>
    48c2:	001f      	movs	r7, r3
    48c4:	0008      	movs	r0, r1
    48c6:	3f20      	subs	r7, #32
    48c8:	40f8      	lsrs	r0, r7
    48ca:	0007      	movs	r7, r0
    48cc:	2b20      	cmp	r3, #32
    48ce:	d100      	bne.n	48d2 <__aeabi_dsub+0x486>
    48d0:	e08e      	b.n	49f0 <__aeabi_dsub+0x5a4>
    48d2:	2040      	movs	r0, #64	; 0x40
    48d4:	1ac3      	subs	r3, r0, r3
    48d6:	4099      	lsls	r1, r3
    48d8:	430a      	orrs	r2, r1
    48da:	1e51      	subs	r1, r2, #1
    48dc:	418a      	sbcs	r2, r1
    48de:	2100      	movs	r1, #0
    48e0:	4317      	orrs	r7, r2
    48e2:	e692      	b.n	460a <__aeabi_dsub+0x1be>
    48e4:	2e00      	cmp	r6, #0
    48e6:	d114      	bne.n	4912 <__aeabi_dsub+0x4c6>
    48e8:	0026      	movs	r6, r4
    48ea:	4650      	mov	r0, sl
    48ec:	4306      	orrs	r6, r0
    48ee:	d062      	beq.n	49b6 <__aeabi_dsub+0x56a>
    48f0:	43db      	mvns	r3, r3
    48f2:	2b00      	cmp	r3, #0
    48f4:	d15c      	bne.n	49b0 <__aeabi_dsub+0x564>
    48f6:	1887      	adds	r7, r0, r2
    48f8:	4297      	cmp	r7, r2
    48fa:	4192      	sbcs	r2, r2
    48fc:	1864      	adds	r4, r4, r1
    48fe:	4252      	negs	r2, r2
    4900:	18a4      	adds	r4, r4, r2
    4902:	4666      	mov	r6, ip
    4904:	e687      	b.n	4616 <__aeabi_dsub+0x1ca>
    4906:	4650      	mov	r0, sl
    4908:	4320      	orrs	r0, r4
    490a:	1e44      	subs	r4, r0, #1
    490c:	41a0      	sbcs	r0, r4
    490e:	2400      	movs	r4, #0
    4910:	e760      	b.n	47d4 <__aeabi_dsub+0x388>
    4912:	4e57      	ldr	r6, [pc, #348]	; (4a70 <__aeabi_dsub+0x624>)
    4914:	45b4      	cmp	ip, r6
    4916:	d04e      	beq.n	49b6 <__aeabi_dsub+0x56a>
    4918:	2680      	movs	r6, #128	; 0x80
    491a:	0436      	lsls	r6, r6, #16
    491c:	425b      	negs	r3, r3
    491e:	4334      	orrs	r4, r6
    4920:	2b38      	cmp	r3, #56	; 0x38
    4922:	dd00      	ble.n	4926 <__aeabi_dsub+0x4da>
    4924:	e07f      	b.n	4a26 <__aeabi_dsub+0x5da>
    4926:	2b1f      	cmp	r3, #31
    4928:	dd00      	ble.n	492c <__aeabi_dsub+0x4e0>
    492a:	e08b      	b.n	4a44 <__aeabi_dsub+0x5f8>
    492c:	2620      	movs	r6, #32
    492e:	0027      	movs	r7, r4
    4930:	4650      	mov	r0, sl
    4932:	1af6      	subs	r6, r6, r3
    4934:	40b7      	lsls	r7, r6
    4936:	40d8      	lsrs	r0, r3
    4938:	4307      	orrs	r7, r0
    493a:	4650      	mov	r0, sl
    493c:	40b0      	lsls	r0, r6
    493e:	1e46      	subs	r6, r0, #1
    4940:	41b0      	sbcs	r0, r6
    4942:	4307      	orrs	r7, r0
    4944:	40dc      	lsrs	r4, r3
    4946:	18bf      	adds	r7, r7, r2
    4948:	e7d6      	b.n	48f8 <__aeabi_dsub+0x4ac>
    494a:	000d      	movs	r5, r1
    494c:	4315      	orrs	r5, r2
    494e:	d100      	bne.n	4952 <__aeabi_dsub+0x506>
    4950:	e602      	b.n	4558 <__aeabi_dsub+0x10c>
    4952:	4650      	mov	r0, sl
    4954:	1a80      	subs	r0, r0, r2
    4956:	4582      	cmp	sl, r0
    4958:	41bf      	sbcs	r7, r7
    495a:	1a65      	subs	r5, r4, r1
    495c:	427f      	negs	r7, r7
    495e:	1bed      	subs	r5, r5, r7
    4960:	4684      	mov	ip, r0
    4962:	0228      	lsls	r0, r5, #8
    4964:	d400      	bmi.n	4968 <__aeabi_dsub+0x51c>
    4966:	e68d      	b.n	4684 <__aeabi_dsub+0x238>
    4968:	4650      	mov	r0, sl
    496a:	1a17      	subs	r7, r2, r0
    496c:	42ba      	cmp	r2, r7
    496e:	4192      	sbcs	r2, r2
    4970:	1b0c      	subs	r4, r1, r4
    4972:	4252      	negs	r2, r2
    4974:	1aa4      	subs	r4, r4, r2
    4976:	4698      	mov	r8, r3
    4978:	e5ee      	b.n	4558 <__aeabi_dsub+0x10c>
    497a:	000d      	movs	r5, r1
    497c:	4315      	orrs	r5, r2
    497e:	d100      	bne.n	4982 <__aeabi_dsub+0x536>
    4980:	e76b      	b.n	485a <__aeabi_dsub+0x40e>
    4982:	4650      	mov	r0, sl
    4984:	0767      	lsls	r7, r4, #29
    4986:	08c0      	lsrs	r0, r0, #3
    4988:	4307      	orrs	r7, r0
    498a:	2080      	movs	r0, #128	; 0x80
    498c:	08e4      	lsrs	r4, r4, #3
    498e:	0300      	lsls	r0, r0, #12
    4990:	4204      	tst	r4, r0
    4992:	d007      	beq.n	49a4 <__aeabi_dsub+0x558>
    4994:	08cd      	lsrs	r5, r1, #3
    4996:	4205      	tst	r5, r0
    4998:	d104      	bne.n	49a4 <__aeabi_dsub+0x558>
    499a:	002c      	movs	r4, r5
    499c:	4698      	mov	r8, r3
    499e:	08d7      	lsrs	r7, r2, #3
    49a0:	0749      	lsls	r1, r1, #29
    49a2:	430f      	orrs	r7, r1
    49a4:	0f7b      	lsrs	r3, r7, #29
    49a6:	00e4      	lsls	r4, r4, #3
    49a8:	431c      	orrs	r4, r3
    49aa:	00ff      	lsls	r7, r7, #3
    49ac:	4e30      	ldr	r6, [pc, #192]	; (4a70 <__aeabi_dsub+0x624>)
    49ae:	e5d3      	b.n	4558 <__aeabi_dsub+0x10c>
    49b0:	4e2f      	ldr	r6, [pc, #188]	; (4a70 <__aeabi_dsub+0x624>)
    49b2:	45b4      	cmp	ip, r6
    49b4:	d1b4      	bne.n	4920 <__aeabi_dsub+0x4d4>
    49b6:	000c      	movs	r4, r1
    49b8:	0017      	movs	r7, r2
    49ba:	4666      	mov	r6, ip
    49bc:	e5cc      	b.n	4558 <__aeabi_dsub+0x10c>
    49be:	2700      	movs	r7, #0
    49c0:	2400      	movs	r4, #0
    49c2:	e5e8      	b.n	4596 <__aeabi_dsub+0x14a>
    49c4:	2b00      	cmp	r3, #0
    49c6:	d039      	beq.n	4a3c <__aeabi_dsub+0x5f0>
    49c8:	000b      	movs	r3, r1
    49ca:	4313      	orrs	r3, r2
    49cc:	d100      	bne.n	49d0 <__aeabi_dsub+0x584>
    49ce:	e744      	b.n	485a <__aeabi_dsub+0x40e>
    49d0:	08c0      	lsrs	r0, r0, #3
    49d2:	0767      	lsls	r7, r4, #29
    49d4:	4307      	orrs	r7, r0
    49d6:	2080      	movs	r0, #128	; 0x80
    49d8:	08e4      	lsrs	r4, r4, #3
    49da:	0300      	lsls	r0, r0, #12
    49dc:	4204      	tst	r4, r0
    49de:	d0e1      	beq.n	49a4 <__aeabi_dsub+0x558>
    49e0:	08cb      	lsrs	r3, r1, #3
    49e2:	4203      	tst	r3, r0
    49e4:	d1de      	bne.n	49a4 <__aeabi_dsub+0x558>
    49e6:	08d7      	lsrs	r7, r2, #3
    49e8:	0749      	lsls	r1, r1, #29
    49ea:	430f      	orrs	r7, r1
    49ec:	001c      	movs	r4, r3
    49ee:	e7d9      	b.n	49a4 <__aeabi_dsub+0x558>
    49f0:	2100      	movs	r1, #0
    49f2:	e771      	b.n	48d8 <__aeabi_dsub+0x48c>
    49f4:	2500      	movs	r5, #0
    49f6:	2700      	movs	r7, #0
    49f8:	e5e9      	b.n	45ce <__aeabi_dsub+0x182>
    49fa:	002e      	movs	r6, r5
    49fc:	0027      	movs	r7, r4
    49fe:	3e20      	subs	r6, #32
    4a00:	40f7      	lsrs	r7, r6
    4a02:	2d20      	cmp	r5, #32
    4a04:	d02f      	beq.n	4a66 <__aeabi_dsub+0x61a>
    4a06:	2640      	movs	r6, #64	; 0x40
    4a08:	1b75      	subs	r5, r6, r5
    4a0a:	40ac      	lsls	r4, r5
    4a0c:	4650      	mov	r0, sl
    4a0e:	4320      	orrs	r0, r4
    4a10:	1e44      	subs	r4, r0, #1
    4a12:	41a0      	sbcs	r0, r4
    4a14:	2400      	movs	r4, #0
    4a16:	4338      	orrs	r0, r7
    4a18:	e6dc      	b.n	47d4 <__aeabi_dsub+0x388>
    4a1a:	2480      	movs	r4, #128	; 0x80
    4a1c:	2500      	movs	r5, #0
    4a1e:	0324      	lsls	r4, r4, #12
    4a20:	4e13      	ldr	r6, [pc, #76]	; (4a70 <__aeabi_dsub+0x624>)
    4a22:	2700      	movs	r7, #0
    4a24:	e5d3      	b.n	45ce <__aeabi_dsub+0x182>
    4a26:	4650      	mov	r0, sl
    4a28:	4320      	orrs	r0, r4
    4a2a:	0007      	movs	r7, r0
    4a2c:	1e78      	subs	r0, r7, #1
    4a2e:	4187      	sbcs	r7, r0
    4a30:	2400      	movs	r4, #0
    4a32:	18bf      	adds	r7, r7, r2
    4a34:	e760      	b.n	48f8 <__aeabi_dsub+0x4ac>
    4a36:	000c      	movs	r4, r1
    4a38:	0017      	movs	r7, r2
    4a3a:	e58d      	b.n	4558 <__aeabi_dsub+0x10c>
    4a3c:	000c      	movs	r4, r1
    4a3e:	0017      	movs	r7, r2
    4a40:	4e0b      	ldr	r6, [pc, #44]	; (4a70 <__aeabi_dsub+0x624>)
    4a42:	e589      	b.n	4558 <__aeabi_dsub+0x10c>
    4a44:	001e      	movs	r6, r3
    4a46:	0027      	movs	r7, r4
    4a48:	3e20      	subs	r6, #32
    4a4a:	40f7      	lsrs	r7, r6
    4a4c:	2b20      	cmp	r3, #32
    4a4e:	d00c      	beq.n	4a6a <__aeabi_dsub+0x61e>
    4a50:	2640      	movs	r6, #64	; 0x40
    4a52:	1af3      	subs	r3, r6, r3
    4a54:	409c      	lsls	r4, r3
    4a56:	4650      	mov	r0, sl
    4a58:	4320      	orrs	r0, r4
    4a5a:	1e44      	subs	r4, r0, #1
    4a5c:	41a0      	sbcs	r0, r4
    4a5e:	4307      	orrs	r7, r0
    4a60:	2400      	movs	r4, #0
    4a62:	18bf      	adds	r7, r7, r2
    4a64:	e748      	b.n	48f8 <__aeabi_dsub+0x4ac>
    4a66:	2400      	movs	r4, #0
    4a68:	e7d0      	b.n	4a0c <__aeabi_dsub+0x5c0>
    4a6a:	2400      	movs	r4, #0
    4a6c:	e7f3      	b.n	4a56 <__aeabi_dsub+0x60a>
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	000007ff 	.word	0x000007ff
    4a74:	ff7fffff 	.word	0xff7fffff

00004a78 <__aeabi_d2iz>:
    4a78:	b530      	push	{r4, r5, lr}
    4a7a:	4d13      	ldr	r5, [pc, #76]	; (4ac8 <__aeabi_d2iz+0x50>)
    4a7c:	030a      	lsls	r2, r1, #12
    4a7e:	004b      	lsls	r3, r1, #1
    4a80:	0b12      	lsrs	r2, r2, #12
    4a82:	0d5b      	lsrs	r3, r3, #21
    4a84:	0fc9      	lsrs	r1, r1, #31
    4a86:	2400      	movs	r4, #0
    4a88:	42ab      	cmp	r3, r5
    4a8a:	dd10      	ble.n	4aae <__aeabi_d2iz+0x36>
    4a8c:	4c0f      	ldr	r4, [pc, #60]	; (4acc <__aeabi_d2iz+0x54>)
    4a8e:	42a3      	cmp	r3, r4
    4a90:	dc0f      	bgt.n	4ab2 <__aeabi_d2iz+0x3a>
    4a92:	2480      	movs	r4, #128	; 0x80
    4a94:	4d0e      	ldr	r5, [pc, #56]	; (4ad0 <__aeabi_d2iz+0x58>)
    4a96:	0364      	lsls	r4, r4, #13
    4a98:	4322      	orrs	r2, r4
    4a9a:	1aed      	subs	r5, r5, r3
    4a9c:	2d1f      	cmp	r5, #31
    4a9e:	dd0b      	ble.n	4ab8 <__aeabi_d2iz+0x40>
    4aa0:	480c      	ldr	r0, [pc, #48]	; (4ad4 <__aeabi_d2iz+0x5c>)
    4aa2:	1ac3      	subs	r3, r0, r3
    4aa4:	40da      	lsrs	r2, r3
    4aa6:	4254      	negs	r4, r2
    4aa8:	2900      	cmp	r1, #0
    4aaa:	d100      	bne.n	4aae <__aeabi_d2iz+0x36>
    4aac:	0014      	movs	r4, r2
    4aae:	0020      	movs	r0, r4
    4ab0:	bd30      	pop	{r4, r5, pc}
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <__aeabi_d2iz+0x60>)
    4ab4:	18cc      	adds	r4, r1, r3
    4ab6:	e7fa      	b.n	4aae <__aeabi_d2iz+0x36>
    4ab8:	4c08      	ldr	r4, [pc, #32]	; (4adc <__aeabi_d2iz+0x64>)
    4aba:	40e8      	lsrs	r0, r5
    4abc:	46a4      	mov	ip, r4
    4abe:	4463      	add	r3, ip
    4ac0:	409a      	lsls	r2, r3
    4ac2:	4302      	orrs	r2, r0
    4ac4:	e7ef      	b.n	4aa6 <__aeabi_d2iz+0x2e>
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	000003fe 	.word	0x000003fe
    4acc:	0000041d 	.word	0x0000041d
    4ad0:	00000433 	.word	0x00000433
    4ad4:	00000413 	.word	0x00000413
    4ad8:	7fffffff 	.word	0x7fffffff
    4adc:	fffffbed 	.word	0xfffffbed

00004ae0 <__aeabi_ui2d>:
    4ae0:	b510      	push	{r4, lr}
    4ae2:	1e04      	subs	r4, r0, #0
    4ae4:	d028      	beq.n	4b38 <__aeabi_ui2d+0x58>
    4ae6:	f000 f833 	bl	4b50 <__clzsi2>
    4aea:	4b15      	ldr	r3, [pc, #84]	; (4b40 <__aeabi_ui2d+0x60>)
    4aec:	4a15      	ldr	r2, [pc, #84]	; (4b44 <__aeabi_ui2d+0x64>)
    4aee:	1a1b      	subs	r3, r3, r0
    4af0:	1ad2      	subs	r2, r2, r3
    4af2:	2a1f      	cmp	r2, #31
    4af4:	dd15      	ble.n	4b22 <__aeabi_ui2d+0x42>
    4af6:	4a14      	ldr	r2, [pc, #80]	; (4b48 <__aeabi_ui2d+0x68>)
    4af8:	1ad2      	subs	r2, r2, r3
    4afa:	4094      	lsls	r4, r2
    4afc:	2200      	movs	r2, #0
    4afe:	0324      	lsls	r4, r4, #12
    4b00:	055b      	lsls	r3, r3, #21
    4b02:	0b24      	lsrs	r4, r4, #12
    4b04:	0d5b      	lsrs	r3, r3, #21
    4b06:	2100      	movs	r1, #0
    4b08:	0010      	movs	r0, r2
    4b0a:	0324      	lsls	r4, r4, #12
    4b0c:	0d0a      	lsrs	r2, r1, #20
    4b0e:	0b24      	lsrs	r4, r4, #12
    4b10:	0512      	lsls	r2, r2, #20
    4b12:	4322      	orrs	r2, r4
    4b14:	4c0d      	ldr	r4, [pc, #52]	; (4b4c <__aeabi_ui2d+0x6c>)
    4b16:	051b      	lsls	r3, r3, #20
    4b18:	4022      	ands	r2, r4
    4b1a:	4313      	orrs	r3, r2
    4b1c:	005b      	lsls	r3, r3, #1
    4b1e:	0859      	lsrs	r1, r3, #1
    4b20:	bd10      	pop	{r4, pc}
    4b22:	0021      	movs	r1, r4
    4b24:	4091      	lsls	r1, r2
    4b26:	000a      	movs	r2, r1
    4b28:	210b      	movs	r1, #11
    4b2a:	1a08      	subs	r0, r1, r0
    4b2c:	40c4      	lsrs	r4, r0
    4b2e:	055b      	lsls	r3, r3, #21
    4b30:	0324      	lsls	r4, r4, #12
    4b32:	0b24      	lsrs	r4, r4, #12
    4b34:	0d5b      	lsrs	r3, r3, #21
    4b36:	e7e6      	b.n	4b06 <__aeabi_ui2d+0x26>
    4b38:	2300      	movs	r3, #0
    4b3a:	2400      	movs	r4, #0
    4b3c:	2200      	movs	r2, #0
    4b3e:	e7e2      	b.n	4b06 <__aeabi_ui2d+0x26>
    4b40:	0000041e 	.word	0x0000041e
    4b44:	00000433 	.word	0x00000433
    4b48:	00000413 	.word	0x00000413
    4b4c:	800fffff 	.word	0x800fffff

00004b50 <__clzsi2>:
    4b50:	211c      	movs	r1, #28
    4b52:	2301      	movs	r3, #1
    4b54:	041b      	lsls	r3, r3, #16
    4b56:	4298      	cmp	r0, r3
    4b58:	d301      	bcc.n	4b5e <__clzsi2+0xe>
    4b5a:	0c00      	lsrs	r0, r0, #16
    4b5c:	3910      	subs	r1, #16
    4b5e:	0a1b      	lsrs	r3, r3, #8
    4b60:	4298      	cmp	r0, r3
    4b62:	d301      	bcc.n	4b68 <__clzsi2+0x18>
    4b64:	0a00      	lsrs	r0, r0, #8
    4b66:	3908      	subs	r1, #8
    4b68:	091b      	lsrs	r3, r3, #4
    4b6a:	4298      	cmp	r0, r3
    4b6c:	d301      	bcc.n	4b72 <__clzsi2+0x22>
    4b6e:	0900      	lsrs	r0, r0, #4
    4b70:	3904      	subs	r1, #4
    4b72:	a202      	add	r2, pc, #8	; (adr r2, 4b7c <__clzsi2+0x2c>)
    4b74:	5c10      	ldrb	r0, [r2, r0]
    4b76:	1840      	adds	r0, r0, r1
    4b78:	4770      	bx	lr
    4b7a:	46c0      	nop			; (mov r8, r8)
    4b7c:	02020304 	.word	0x02020304
    4b80:	01010101 	.word	0x01010101
	...

00004b8c <atoi>:
    4b8c:	b510      	push	{r4, lr}
    4b8e:	220a      	movs	r2, #10
    4b90:	2100      	movs	r1, #0
    4b92:	f000 fa81 	bl	5098 <strtol>
    4b96:	bd10      	pop	{r4, pc}

00004b98 <__libc_init_array>:
    4b98:	b570      	push	{r4, r5, r6, lr}
    4b9a:	2600      	movs	r6, #0
    4b9c:	4d0c      	ldr	r5, [pc, #48]	; (4bd0 <__libc_init_array+0x38>)
    4b9e:	4c0d      	ldr	r4, [pc, #52]	; (4bd4 <__libc_init_array+0x3c>)
    4ba0:	1b64      	subs	r4, r4, r5
    4ba2:	10a4      	asrs	r4, r4, #2
    4ba4:	42a6      	cmp	r6, r4
    4ba6:	d109      	bne.n	4bbc <__libc_init_array+0x24>
    4ba8:	2600      	movs	r6, #0
    4baa:	f002 fbe5 	bl	7378 <_init>
    4bae:	4d0a      	ldr	r5, [pc, #40]	; (4bd8 <__libc_init_array+0x40>)
    4bb0:	4c0a      	ldr	r4, [pc, #40]	; (4bdc <__libc_init_array+0x44>)
    4bb2:	1b64      	subs	r4, r4, r5
    4bb4:	10a4      	asrs	r4, r4, #2
    4bb6:	42a6      	cmp	r6, r4
    4bb8:	d105      	bne.n	4bc6 <__libc_init_array+0x2e>
    4bba:	bd70      	pop	{r4, r5, r6, pc}
    4bbc:	00b3      	lsls	r3, r6, #2
    4bbe:	58eb      	ldr	r3, [r5, r3]
    4bc0:	4798      	blx	r3
    4bc2:	3601      	adds	r6, #1
    4bc4:	e7ee      	b.n	4ba4 <__libc_init_array+0xc>
    4bc6:	00b3      	lsls	r3, r6, #2
    4bc8:	58eb      	ldr	r3, [r5, r3]
    4bca:	4798      	blx	r3
    4bcc:	3601      	adds	r6, #1
    4bce:	e7f2      	b.n	4bb6 <__libc_init_array+0x1e>
    4bd0:	00007384 	.word	0x00007384
    4bd4:	00007384 	.word	0x00007384
    4bd8:	00007384 	.word	0x00007384
    4bdc:	00007388 	.word	0x00007388

00004be0 <memcpy>:
    4be0:	2300      	movs	r3, #0
    4be2:	b510      	push	{r4, lr}
    4be4:	429a      	cmp	r2, r3
    4be6:	d100      	bne.n	4bea <memcpy+0xa>
    4be8:	bd10      	pop	{r4, pc}
    4bea:	5ccc      	ldrb	r4, [r1, r3]
    4bec:	54c4      	strb	r4, [r0, r3]
    4bee:	3301      	adds	r3, #1
    4bf0:	e7f8      	b.n	4be4 <memcpy+0x4>

00004bf2 <memset>:
    4bf2:	0003      	movs	r3, r0
    4bf4:	1882      	adds	r2, r0, r2
    4bf6:	4293      	cmp	r3, r2
    4bf8:	d100      	bne.n	4bfc <memset+0xa>
    4bfa:	4770      	bx	lr
    4bfc:	7019      	strb	r1, [r3, #0]
    4bfe:	3301      	adds	r3, #1
    4c00:	e7f9      	b.n	4bf6 <memset+0x4>
	...

00004c04 <iprintf>:
    4c04:	b40f      	push	{r0, r1, r2, r3}
    4c06:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <iprintf+0x30>)
    4c08:	b513      	push	{r0, r1, r4, lr}
    4c0a:	681c      	ldr	r4, [r3, #0]
    4c0c:	2c00      	cmp	r4, #0
    4c0e:	d005      	beq.n	4c1c <iprintf+0x18>
    4c10:	69a3      	ldr	r3, [r4, #24]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d102      	bne.n	4c1c <iprintf+0x18>
    4c16:	0020      	movs	r0, r4
    4c18:	f000 fc2a 	bl	5470 <__sinit>
    4c1c:	ab05      	add	r3, sp, #20
    4c1e:	9a04      	ldr	r2, [sp, #16]
    4c20:	68a1      	ldr	r1, [r4, #8]
    4c22:	0020      	movs	r0, r4
    4c24:	9301      	str	r3, [sp, #4]
    4c26:	f000 fe3d 	bl	58a4 <_vfiprintf_r>
    4c2a:	bc16      	pop	{r1, r2, r4}
    4c2c:	bc08      	pop	{r3}
    4c2e:	b004      	add	sp, #16
    4c30:	4718      	bx	r3
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	20000054 	.word	0x20000054

00004c38 <_puts_r>:
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	0005      	movs	r5, r0
    4c3c:	000e      	movs	r6, r1
    4c3e:	2800      	cmp	r0, #0
    4c40:	d004      	beq.n	4c4c <_puts_r+0x14>
    4c42:	6983      	ldr	r3, [r0, #24]
    4c44:	2b00      	cmp	r3, #0
    4c46:	d101      	bne.n	4c4c <_puts_r+0x14>
    4c48:	f000 fc12 	bl	5470 <__sinit>
    4c4c:	69ab      	ldr	r3, [r5, #24]
    4c4e:	68ac      	ldr	r4, [r5, #8]
    4c50:	2b00      	cmp	r3, #0
    4c52:	d102      	bne.n	4c5a <_puts_r+0x22>
    4c54:	0028      	movs	r0, r5
    4c56:	f000 fc0b 	bl	5470 <__sinit>
    4c5a:	4b24      	ldr	r3, [pc, #144]	; (4cec <_puts_r+0xb4>)
    4c5c:	429c      	cmp	r4, r3
    4c5e:	d10f      	bne.n	4c80 <_puts_r+0x48>
    4c60:	686c      	ldr	r4, [r5, #4]
    4c62:	89a3      	ldrh	r3, [r4, #12]
    4c64:	071b      	lsls	r3, r3, #28
    4c66:	d502      	bpl.n	4c6e <_puts_r+0x36>
    4c68:	6923      	ldr	r3, [r4, #16]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d120      	bne.n	4cb0 <_puts_r+0x78>
    4c6e:	0021      	movs	r1, r4
    4c70:	0028      	movs	r0, r5
    4c72:	f000 fa7b 	bl	516c <__swsetup_r>
    4c76:	2800      	cmp	r0, #0
    4c78:	d01a      	beq.n	4cb0 <_puts_r+0x78>
    4c7a:	2001      	movs	r0, #1
    4c7c:	4240      	negs	r0, r0
    4c7e:	bd70      	pop	{r4, r5, r6, pc}
    4c80:	4b1b      	ldr	r3, [pc, #108]	; (4cf0 <_puts_r+0xb8>)
    4c82:	429c      	cmp	r4, r3
    4c84:	d101      	bne.n	4c8a <_puts_r+0x52>
    4c86:	68ac      	ldr	r4, [r5, #8]
    4c88:	e7eb      	b.n	4c62 <_puts_r+0x2a>
    4c8a:	4b1a      	ldr	r3, [pc, #104]	; (4cf4 <_puts_r+0xbc>)
    4c8c:	429c      	cmp	r4, r3
    4c8e:	d1e8      	bne.n	4c62 <_puts_r+0x2a>
    4c90:	68ec      	ldr	r4, [r5, #12]
    4c92:	e7e6      	b.n	4c62 <_puts_r+0x2a>
    4c94:	3b01      	subs	r3, #1
    4c96:	3601      	adds	r6, #1
    4c98:	60a3      	str	r3, [r4, #8]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	da04      	bge.n	4ca8 <_puts_r+0x70>
    4c9e:	69a2      	ldr	r2, [r4, #24]
    4ca0:	4293      	cmp	r3, r2
    4ca2:	db16      	blt.n	4cd2 <_puts_r+0x9a>
    4ca4:	290a      	cmp	r1, #10
    4ca6:	d014      	beq.n	4cd2 <_puts_r+0x9a>
    4ca8:	6823      	ldr	r3, [r4, #0]
    4caa:	1c5a      	adds	r2, r3, #1
    4cac:	6022      	str	r2, [r4, #0]
    4cae:	7019      	strb	r1, [r3, #0]
    4cb0:	7831      	ldrb	r1, [r6, #0]
    4cb2:	68a3      	ldr	r3, [r4, #8]
    4cb4:	2900      	cmp	r1, #0
    4cb6:	d1ed      	bne.n	4c94 <_puts_r+0x5c>
    4cb8:	3b01      	subs	r3, #1
    4cba:	60a3      	str	r3, [r4, #8]
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	da0f      	bge.n	4ce0 <_puts_r+0xa8>
    4cc0:	0022      	movs	r2, r4
    4cc2:	310a      	adds	r1, #10
    4cc4:	0028      	movs	r0, r5
    4cc6:	f000 f9fb 	bl	50c0 <__swbuf_r>
    4cca:	1c43      	adds	r3, r0, #1
    4ccc:	d0d5      	beq.n	4c7a <_puts_r+0x42>
    4cce:	200a      	movs	r0, #10
    4cd0:	e7d5      	b.n	4c7e <_puts_r+0x46>
    4cd2:	0022      	movs	r2, r4
    4cd4:	0028      	movs	r0, r5
    4cd6:	f000 f9f3 	bl	50c0 <__swbuf_r>
    4cda:	1c43      	adds	r3, r0, #1
    4cdc:	d1e8      	bne.n	4cb0 <_puts_r+0x78>
    4cde:	e7cc      	b.n	4c7a <_puts_r+0x42>
    4ce0:	200a      	movs	r0, #10
    4ce2:	6823      	ldr	r3, [r4, #0]
    4ce4:	1c5a      	adds	r2, r3, #1
    4ce6:	6022      	str	r2, [r4, #0]
    4ce8:	7018      	strb	r0, [r3, #0]
    4cea:	e7c8      	b.n	4c7e <_puts_r+0x46>
    4cec:	000071d0 	.word	0x000071d0
    4cf0:	000071f0 	.word	0x000071f0
    4cf4:	000071b0 	.word	0x000071b0

00004cf8 <puts>:
    4cf8:	b510      	push	{r4, lr}
    4cfa:	4b03      	ldr	r3, [pc, #12]	; (4d08 <puts+0x10>)
    4cfc:	0001      	movs	r1, r0
    4cfe:	6818      	ldr	r0, [r3, #0]
    4d00:	f7ff ff9a 	bl	4c38 <_puts_r>
    4d04:	bd10      	pop	{r4, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	20000054 	.word	0x20000054

00004d0c <iscanf>:
    4d0c:	b40f      	push	{r0, r1, r2, r3}
    4d0e:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <iscanf+0x30>)
    4d10:	b513      	push	{r0, r1, r4, lr}
    4d12:	681c      	ldr	r4, [r3, #0]
    4d14:	2c00      	cmp	r4, #0
    4d16:	d005      	beq.n	4d24 <iscanf+0x18>
    4d18:	69a3      	ldr	r3, [r4, #24]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d102      	bne.n	4d24 <iscanf+0x18>
    4d1e:	0020      	movs	r0, r4
    4d20:	f000 fba6 	bl	5470 <__sinit>
    4d24:	ab05      	add	r3, sp, #20
    4d26:	9a04      	ldr	r2, [sp, #16]
    4d28:	6861      	ldr	r1, [r4, #4]
    4d2a:	0020      	movs	r0, r4
    4d2c:	9301      	str	r3, [sp, #4]
    4d2e:	f001 f9e3 	bl	60f8 <_vfiscanf_r>
    4d32:	bc16      	pop	{r1, r2, r4}
    4d34:	bc08      	pop	{r3}
    4d36:	b004      	add	sp, #16
    4d38:	4718      	bx	r3
    4d3a:	46c0      	nop			; (mov r8, r8)
    4d3c:	20000054 	.word	0x20000054

00004d40 <setbuf>:
    4d40:	424a      	negs	r2, r1
    4d42:	414a      	adcs	r2, r1
    4d44:	2380      	movs	r3, #128	; 0x80
    4d46:	b510      	push	{r4, lr}
    4d48:	0052      	lsls	r2, r2, #1
    4d4a:	00db      	lsls	r3, r3, #3
    4d4c:	f000 f802 	bl	4d54 <setvbuf>
    4d50:	bd10      	pop	{r4, pc}
	...

00004d54 <setvbuf>:
    4d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d56:	001d      	movs	r5, r3
    4d58:	4b4f      	ldr	r3, [pc, #316]	; (4e98 <setvbuf+0x144>)
    4d5a:	b085      	sub	sp, #20
    4d5c:	681e      	ldr	r6, [r3, #0]
    4d5e:	0004      	movs	r4, r0
    4d60:	000f      	movs	r7, r1
    4d62:	9200      	str	r2, [sp, #0]
    4d64:	2e00      	cmp	r6, #0
    4d66:	d005      	beq.n	4d74 <setvbuf+0x20>
    4d68:	69b3      	ldr	r3, [r6, #24]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d102      	bne.n	4d74 <setvbuf+0x20>
    4d6e:	0030      	movs	r0, r6
    4d70:	f000 fb7e 	bl	5470 <__sinit>
    4d74:	4b49      	ldr	r3, [pc, #292]	; (4e9c <setvbuf+0x148>)
    4d76:	429c      	cmp	r4, r3
    4d78:	d150      	bne.n	4e1c <setvbuf+0xc8>
    4d7a:	6874      	ldr	r4, [r6, #4]
    4d7c:	9b00      	ldr	r3, [sp, #0]
    4d7e:	2b02      	cmp	r3, #2
    4d80:	d005      	beq.n	4d8e <setvbuf+0x3a>
    4d82:	2b01      	cmp	r3, #1
    4d84:	d900      	bls.n	4d88 <setvbuf+0x34>
    4d86:	e084      	b.n	4e92 <setvbuf+0x13e>
    4d88:	2d00      	cmp	r5, #0
    4d8a:	da00      	bge.n	4d8e <setvbuf+0x3a>
    4d8c:	e081      	b.n	4e92 <setvbuf+0x13e>
    4d8e:	0021      	movs	r1, r4
    4d90:	0030      	movs	r0, r6
    4d92:	f000 faeb 	bl	536c <_fflush_r>
    4d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d98:	2900      	cmp	r1, #0
    4d9a:	d008      	beq.n	4dae <setvbuf+0x5a>
    4d9c:	0023      	movs	r3, r4
    4d9e:	3344      	adds	r3, #68	; 0x44
    4da0:	4299      	cmp	r1, r3
    4da2:	d002      	beq.n	4daa <setvbuf+0x56>
    4da4:	0030      	movs	r0, r6
    4da6:	f000 fcad 	bl	5704 <_free_r>
    4daa:	2300      	movs	r3, #0
    4dac:	6363      	str	r3, [r4, #52]	; 0x34
    4dae:	2300      	movs	r3, #0
    4db0:	61a3      	str	r3, [r4, #24]
    4db2:	6063      	str	r3, [r4, #4]
    4db4:	89a3      	ldrh	r3, [r4, #12]
    4db6:	061b      	lsls	r3, r3, #24
    4db8:	d503      	bpl.n	4dc2 <setvbuf+0x6e>
    4dba:	6921      	ldr	r1, [r4, #16]
    4dbc:	0030      	movs	r0, r6
    4dbe:	f000 fca1 	bl	5704 <_free_r>
    4dc2:	89a3      	ldrh	r3, [r4, #12]
    4dc4:	4a36      	ldr	r2, [pc, #216]	; (4ea0 <setvbuf+0x14c>)
    4dc6:	4013      	ands	r3, r2
    4dc8:	81a3      	strh	r3, [r4, #12]
    4dca:	9b00      	ldr	r3, [sp, #0]
    4dcc:	2b02      	cmp	r3, #2
    4dce:	d05a      	beq.n	4e86 <setvbuf+0x132>
    4dd0:	ab03      	add	r3, sp, #12
    4dd2:	aa02      	add	r2, sp, #8
    4dd4:	0021      	movs	r1, r4
    4dd6:	0030      	movs	r0, r6
    4dd8:	f000 fc0c 	bl	55f4 <__swhatbuf_r>
    4ddc:	89a3      	ldrh	r3, [r4, #12]
    4dde:	4318      	orrs	r0, r3
    4de0:	81a0      	strh	r0, [r4, #12]
    4de2:	2d00      	cmp	r5, #0
    4de4:	d124      	bne.n	4e30 <setvbuf+0xdc>
    4de6:	9d02      	ldr	r5, [sp, #8]
    4de8:	0028      	movs	r0, r5
    4dea:	f000 fc6f 	bl	56cc <malloc>
    4dee:	9501      	str	r5, [sp, #4]
    4df0:	1e07      	subs	r7, r0, #0
    4df2:	d142      	bne.n	4e7a <setvbuf+0x126>
    4df4:	9b02      	ldr	r3, [sp, #8]
    4df6:	9301      	str	r3, [sp, #4]
    4df8:	42ab      	cmp	r3, r5
    4dfa:	d139      	bne.n	4e70 <setvbuf+0x11c>
    4dfc:	2001      	movs	r0, #1
    4dfe:	4240      	negs	r0, r0
    4e00:	2302      	movs	r3, #2
    4e02:	89a2      	ldrh	r2, [r4, #12]
    4e04:	4313      	orrs	r3, r2
    4e06:	81a3      	strh	r3, [r4, #12]
    4e08:	2300      	movs	r3, #0
    4e0a:	60a3      	str	r3, [r4, #8]
    4e0c:	0023      	movs	r3, r4
    4e0e:	3347      	adds	r3, #71	; 0x47
    4e10:	6023      	str	r3, [r4, #0]
    4e12:	6123      	str	r3, [r4, #16]
    4e14:	2301      	movs	r3, #1
    4e16:	6163      	str	r3, [r4, #20]
    4e18:	b005      	add	sp, #20
    4e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e1c:	4b21      	ldr	r3, [pc, #132]	; (4ea4 <setvbuf+0x150>)
    4e1e:	429c      	cmp	r4, r3
    4e20:	d101      	bne.n	4e26 <setvbuf+0xd2>
    4e22:	68b4      	ldr	r4, [r6, #8]
    4e24:	e7aa      	b.n	4d7c <setvbuf+0x28>
    4e26:	4b20      	ldr	r3, [pc, #128]	; (4ea8 <setvbuf+0x154>)
    4e28:	429c      	cmp	r4, r3
    4e2a:	d1a7      	bne.n	4d7c <setvbuf+0x28>
    4e2c:	68f4      	ldr	r4, [r6, #12]
    4e2e:	e7a5      	b.n	4d7c <setvbuf+0x28>
    4e30:	2f00      	cmp	r7, #0
    4e32:	d0d9      	beq.n	4de8 <setvbuf+0x94>
    4e34:	69b3      	ldr	r3, [r6, #24]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d102      	bne.n	4e40 <setvbuf+0xec>
    4e3a:	0030      	movs	r0, r6
    4e3c:	f000 fb18 	bl	5470 <__sinit>
    4e40:	9b00      	ldr	r3, [sp, #0]
    4e42:	2b01      	cmp	r3, #1
    4e44:	d103      	bne.n	4e4e <setvbuf+0xfa>
    4e46:	89a3      	ldrh	r3, [r4, #12]
    4e48:	9a00      	ldr	r2, [sp, #0]
    4e4a:	431a      	orrs	r2, r3
    4e4c:	81a2      	strh	r2, [r4, #12]
    4e4e:	2008      	movs	r0, #8
    4e50:	89a3      	ldrh	r3, [r4, #12]
    4e52:	6027      	str	r7, [r4, #0]
    4e54:	6127      	str	r7, [r4, #16]
    4e56:	6165      	str	r5, [r4, #20]
    4e58:	4018      	ands	r0, r3
    4e5a:	d018      	beq.n	4e8e <setvbuf+0x13a>
    4e5c:	2001      	movs	r0, #1
    4e5e:	4018      	ands	r0, r3
    4e60:	2300      	movs	r3, #0
    4e62:	4298      	cmp	r0, r3
    4e64:	d011      	beq.n	4e8a <setvbuf+0x136>
    4e66:	426d      	negs	r5, r5
    4e68:	60a3      	str	r3, [r4, #8]
    4e6a:	61a5      	str	r5, [r4, #24]
    4e6c:	0018      	movs	r0, r3
    4e6e:	e7d3      	b.n	4e18 <setvbuf+0xc4>
    4e70:	9801      	ldr	r0, [sp, #4]
    4e72:	f000 fc2b 	bl	56cc <malloc>
    4e76:	1e07      	subs	r7, r0, #0
    4e78:	d0c0      	beq.n	4dfc <setvbuf+0xa8>
    4e7a:	2380      	movs	r3, #128	; 0x80
    4e7c:	89a2      	ldrh	r2, [r4, #12]
    4e7e:	9d01      	ldr	r5, [sp, #4]
    4e80:	4313      	orrs	r3, r2
    4e82:	81a3      	strh	r3, [r4, #12]
    4e84:	e7d6      	b.n	4e34 <setvbuf+0xe0>
    4e86:	2000      	movs	r0, #0
    4e88:	e7ba      	b.n	4e00 <setvbuf+0xac>
    4e8a:	60a5      	str	r5, [r4, #8]
    4e8c:	e7c4      	b.n	4e18 <setvbuf+0xc4>
    4e8e:	60a0      	str	r0, [r4, #8]
    4e90:	e7c2      	b.n	4e18 <setvbuf+0xc4>
    4e92:	2001      	movs	r0, #1
    4e94:	4240      	negs	r0, r0
    4e96:	e7bf      	b.n	4e18 <setvbuf+0xc4>
    4e98:	20000054 	.word	0x20000054
    4e9c:	000071d0 	.word	0x000071d0
    4ea0:	fffff35c 	.word	0xfffff35c
    4ea4:	000071f0 	.word	0x000071f0
    4ea8:	000071b0 	.word	0x000071b0

00004eac <strcmp>:
    4eac:	7802      	ldrb	r2, [r0, #0]
    4eae:	780b      	ldrb	r3, [r1, #0]
    4eb0:	2a00      	cmp	r2, #0
    4eb2:	d003      	beq.n	4ebc <strcmp+0x10>
    4eb4:	3001      	adds	r0, #1
    4eb6:	3101      	adds	r1, #1
    4eb8:	429a      	cmp	r2, r3
    4eba:	d0f7      	beq.n	4eac <strcmp>
    4ebc:	1ad0      	subs	r0, r2, r3
    4ebe:	4770      	bx	lr

00004ec0 <strtok>:
    4ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ec2:	4b12      	ldr	r3, [pc, #72]	; (4f0c <strtok+0x4c>)
    4ec4:	0006      	movs	r6, r0
    4ec6:	681d      	ldr	r5, [r3, #0]
    4ec8:	000f      	movs	r7, r1
    4eca:	6dac      	ldr	r4, [r5, #88]	; 0x58
    4ecc:	2c00      	cmp	r4, #0
    4ece:	d116      	bne.n	4efe <strtok+0x3e>
    4ed0:	2050      	movs	r0, #80	; 0x50
    4ed2:	f000 fbfb 	bl	56cc <malloc>
    4ed6:	65a8      	str	r0, [r5, #88]	; 0x58
    4ed8:	6004      	str	r4, [r0, #0]
    4eda:	6044      	str	r4, [r0, #4]
    4edc:	6084      	str	r4, [r0, #8]
    4ede:	60c4      	str	r4, [r0, #12]
    4ee0:	6104      	str	r4, [r0, #16]
    4ee2:	6144      	str	r4, [r0, #20]
    4ee4:	6184      	str	r4, [r0, #24]
    4ee6:	6284      	str	r4, [r0, #40]	; 0x28
    4ee8:	62c4      	str	r4, [r0, #44]	; 0x2c
    4eea:	6304      	str	r4, [r0, #48]	; 0x30
    4eec:	6344      	str	r4, [r0, #52]	; 0x34
    4eee:	6384      	str	r4, [r0, #56]	; 0x38
    4ef0:	63c4      	str	r4, [r0, #60]	; 0x3c
    4ef2:	6404      	str	r4, [r0, #64]	; 0x40
    4ef4:	6444      	str	r4, [r0, #68]	; 0x44
    4ef6:	6484      	str	r4, [r0, #72]	; 0x48
    4ef8:	64c4      	str	r4, [r0, #76]	; 0x4c
    4efa:	7704      	strb	r4, [r0, #28]
    4efc:	6244      	str	r4, [r0, #36]	; 0x24
    4efe:	6daa      	ldr	r2, [r5, #88]	; 0x58
    4f00:	0039      	movs	r1, r7
    4f02:	0030      	movs	r0, r6
    4f04:	2301      	movs	r3, #1
    4f06:	f000 f803 	bl	4f10 <__strtok_r>
    4f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f0c:	20000054 	.word	0x20000054

00004f10 <__strtok_r>:
    4f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f12:	2800      	cmp	r0, #0
    4f14:	d104      	bne.n	4f20 <__strtok_r+0x10>
    4f16:	6810      	ldr	r0, [r2, #0]
    4f18:	2800      	cmp	r0, #0
    4f1a:	d101      	bne.n	4f20 <__strtok_r+0x10>
    4f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f1e:	0020      	movs	r0, r4
    4f20:	000e      	movs	r6, r1
    4f22:	7805      	ldrb	r5, [r0, #0]
    4f24:	1c44      	adds	r4, r0, #1
    4f26:	7837      	ldrb	r7, [r6, #0]
    4f28:	2f00      	cmp	r7, #0
    4f2a:	d104      	bne.n	4f36 <__strtok_r+0x26>
    4f2c:	2d00      	cmp	r5, #0
    4f2e:	d110      	bne.n	4f52 <__strtok_r+0x42>
    4f30:	6015      	str	r5, [r2, #0]
    4f32:	0028      	movs	r0, r5
    4f34:	e7f2      	b.n	4f1c <__strtok_r+0xc>
    4f36:	3601      	adds	r6, #1
    4f38:	42bd      	cmp	r5, r7
    4f3a:	d1f4      	bne.n	4f26 <__strtok_r+0x16>
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d1ee      	bne.n	4f1e <__strtok_r+0xe>
    4f40:	6014      	str	r4, [r2, #0]
    4f42:	7003      	strb	r3, [r0, #0]
    4f44:	e7ea      	b.n	4f1c <__strtok_r+0xc>
    4f46:	0033      	movs	r3, r6
    4f48:	e00e      	b.n	4f68 <__strtok_r+0x58>
    4f4a:	3501      	adds	r5, #1
    4f4c:	001c      	movs	r4, r3
    4f4e:	2f00      	cmp	r7, #0
    4f50:	d102      	bne.n	4f58 <__strtok_r+0x48>
    4f52:	000d      	movs	r5, r1
    4f54:	7826      	ldrb	r6, [r4, #0]
    4f56:	1c63      	adds	r3, r4, #1
    4f58:	782f      	ldrb	r7, [r5, #0]
    4f5a:	42be      	cmp	r6, r7
    4f5c:	d1f5      	bne.n	4f4a <__strtok_r+0x3a>
    4f5e:	2e00      	cmp	r6, #0
    4f60:	d0f1      	beq.n	4f46 <__strtok_r+0x36>
    4f62:	2400      	movs	r4, #0
    4f64:	1e59      	subs	r1, r3, #1
    4f66:	700c      	strb	r4, [r1, #0]
    4f68:	6013      	str	r3, [r2, #0]
    4f6a:	e7d7      	b.n	4f1c <__strtok_r+0xc>

00004f6c <_strtol_l.isra.0>:
    4f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6e:	001f      	movs	r7, r3
    4f70:	000e      	movs	r6, r1
    4f72:	b087      	sub	sp, #28
    4f74:	9005      	str	r0, [sp, #20]
    4f76:	9103      	str	r1, [sp, #12]
    4f78:	9202      	str	r2, [sp, #8]
    4f7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    4f7c:	7834      	ldrb	r4, [r6, #0]
    4f7e:	f000 fb28 	bl	55d2 <__locale_ctype_ptr_l>
    4f82:	2208      	movs	r2, #8
    4f84:	1900      	adds	r0, r0, r4
    4f86:	7843      	ldrb	r3, [r0, #1]
    4f88:	1c75      	adds	r5, r6, #1
    4f8a:	4013      	ands	r3, r2
    4f8c:	d10c      	bne.n	4fa8 <_strtol_l.isra.0+0x3c>
    4f8e:	2c2d      	cmp	r4, #45	; 0x2d
    4f90:	d10c      	bne.n	4fac <_strtol_l.isra.0+0x40>
    4f92:	3301      	adds	r3, #1
    4f94:	782c      	ldrb	r4, [r5, #0]
    4f96:	9301      	str	r3, [sp, #4]
    4f98:	1cb5      	adds	r5, r6, #2
    4f9a:	2f00      	cmp	r7, #0
    4f9c:	d00c      	beq.n	4fb8 <_strtol_l.isra.0+0x4c>
    4f9e:	2f10      	cmp	r7, #16
    4fa0:	d114      	bne.n	4fcc <_strtol_l.isra.0+0x60>
    4fa2:	2c30      	cmp	r4, #48	; 0x30
    4fa4:	d00a      	beq.n	4fbc <_strtol_l.isra.0+0x50>
    4fa6:	e011      	b.n	4fcc <_strtol_l.isra.0+0x60>
    4fa8:	002e      	movs	r6, r5
    4faa:	e7e6      	b.n	4f7a <_strtol_l.isra.0+0xe>
    4fac:	9301      	str	r3, [sp, #4]
    4fae:	2c2b      	cmp	r4, #43	; 0x2b
    4fb0:	d1f3      	bne.n	4f9a <_strtol_l.isra.0+0x2e>
    4fb2:	782c      	ldrb	r4, [r5, #0]
    4fb4:	1cb5      	adds	r5, r6, #2
    4fb6:	e7f0      	b.n	4f9a <_strtol_l.isra.0+0x2e>
    4fb8:	2c30      	cmp	r4, #48	; 0x30
    4fba:	d12f      	bne.n	501c <_strtol_l.isra.0+0xb0>
    4fbc:	2220      	movs	r2, #32
    4fbe:	782b      	ldrb	r3, [r5, #0]
    4fc0:	4393      	bics	r3, r2
    4fc2:	2b58      	cmp	r3, #88	; 0x58
    4fc4:	d151      	bne.n	506a <_strtol_l.isra.0+0xfe>
    4fc6:	2710      	movs	r7, #16
    4fc8:	786c      	ldrb	r4, [r5, #1]
    4fca:	3502      	adds	r5, #2
    4fcc:	9b01      	ldr	r3, [sp, #4]
    4fce:	4a29      	ldr	r2, [pc, #164]	; (5074 <_strtol_l.isra.0+0x108>)
    4fd0:	0039      	movs	r1, r7
    4fd2:	189e      	adds	r6, r3, r2
    4fd4:	0030      	movs	r0, r6
    4fd6:	f7fe f85b 	bl	3090 <__aeabi_uidivmod>
    4fda:	0030      	movs	r0, r6
    4fdc:	9104      	str	r1, [sp, #16]
    4fde:	0039      	movs	r1, r7
    4fe0:	f7fd ffd0 	bl	2f84 <__udivsi3>
    4fe4:	2101      	movs	r1, #1
    4fe6:	2300      	movs	r3, #0
    4fe8:	4249      	negs	r1, r1
    4fea:	0002      	movs	r2, r0
    4fec:	468c      	mov	ip, r1
    4fee:	0018      	movs	r0, r3
    4ff0:	0021      	movs	r1, r4
    4ff2:	3930      	subs	r1, #48	; 0x30
    4ff4:	2909      	cmp	r1, #9
    4ff6:	d813      	bhi.n	5020 <_strtol_l.isra.0+0xb4>
    4ff8:	000c      	movs	r4, r1
    4ffa:	42a7      	cmp	r7, r4
    4ffc:	dd1c      	ble.n	5038 <_strtol_l.isra.0+0xcc>
    4ffe:	1c59      	adds	r1, r3, #1
    5000:	d009      	beq.n	5016 <_strtol_l.isra.0+0xaa>
    5002:	4663      	mov	r3, ip
    5004:	4282      	cmp	r2, r0
    5006:	d306      	bcc.n	5016 <_strtol_l.isra.0+0xaa>
    5008:	d102      	bne.n	5010 <_strtol_l.isra.0+0xa4>
    500a:	9904      	ldr	r1, [sp, #16]
    500c:	42a1      	cmp	r1, r4
    500e:	db02      	blt.n	5016 <_strtol_l.isra.0+0xaa>
    5010:	2301      	movs	r3, #1
    5012:	4378      	muls	r0, r7
    5014:	1820      	adds	r0, r4, r0
    5016:	782c      	ldrb	r4, [r5, #0]
    5018:	3501      	adds	r5, #1
    501a:	e7e9      	b.n	4ff0 <_strtol_l.isra.0+0x84>
    501c:	270a      	movs	r7, #10
    501e:	e7d5      	b.n	4fcc <_strtol_l.isra.0+0x60>
    5020:	0021      	movs	r1, r4
    5022:	3941      	subs	r1, #65	; 0x41
    5024:	2919      	cmp	r1, #25
    5026:	d801      	bhi.n	502c <_strtol_l.isra.0+0xc0>
    5028:	3c37      	subs	r4, #55	; 0x37
    502a:	e7e6      	b.n	4ffa <_strtol_l.isra.0+0x8e>
    502c:	0021      	movs	r1, r4
    502e:	3961      	subs	r1, #97	; 0x61
    5030:	2919      	cmp	r1, #25
    5032:	d801      	bhi.n	5038 <_strtol_l.isra.0+0xcc>
    5034:	3c57      	subs	r4, #87	; 0x57
    5036:	e7e0      	b.n	4ffa <_strtol_l.isra.0+0x8e>
    5038:	1c5a      	adds	r2, r3, #1
    503a:	d108      	bne.n	504e <_strtol_l.isra.0+0xe2>
    503c:	9a05      	ldr	r2, [sp, #20]
    503e:	3323      	adds	r3, #35	; 0x23
    5040:	6013      	str	r3, [r2, #0]
    5042:	9b02      	ldr	r3, [sp, #8]
    5044:	0030      	movs	r0, r6
    5046:	2b00      	cmp	r3, #0
    5048:	d10b      	bne.n	5062 <_strtol_l.isra.0+0xf6>
    504a:	b007      	add	sp, #28
    504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    504e:	9a01      	ldr	r2, [sp, #4]
    5050:	2a00      	cmp	r2, #0
    5052:	d000      	beq.n	5056 <_strtol_l.isra.0+0xea>
    5054:	4240      	negs	r0, r0
    5056:	9a02      	ldr	r2, [sp, #8]
    5058:	2a00      	cmp	r2, #0
    505a:	d0f6      	beq.n	504a <_strtol_l.isra.0+0xde>
    505c:	9a03      	ldr	r2, [sp, #12]
    505e:	2b00      	cmp	r3, #0
    5060:	d000      	beq.n	5064 <_strtol_l.isra.0+0xf8>
    5062:	1e6a      	subs	r2, r5, #1
    5064:	9b02      	ldr	r3, [sp, #8]
    5066:	601a      	str	r2, [r3, #0]
    5068:	e7ef      	b.n	504a <_strtol_l.isra.0+0xde>
    506a:	2430      	movs	r4, #48	; 0x30
    506c:	2f00      	cmp	r7, #0
    506e:	d1ad      	bne.n	4fcc <_strtol_l.isra.0+0x60>
    5070:	3708      	adds	r7, #8
    5072:	e7ab      	b.n	4fcc <_strtol_l.isra.0+0x60>
    5074:	7fffffff 	.word	0x7fffffff

00005078 <_strtol_r>:
    5078:	b513      	push	{r0, r1, r4, lr}
    507a:	4c05      	ldr	r4, [pc, #20]	; (5090 <_strtol_r+0x18>)
    507c:	6824      	ldr	r4, [r4, #0]
    507e:	6a24      	ldr	r4, [r4, #32]
    5080:	2c00      	cmp	r4, #0
    5082:	d100      	bne.n	5086 <_strtol_r+0xe>
    5084:	4c03      	ldr	r4, [pc, #12]	; (5094 <_strtol_r+0x1c>)
    5086:	9400      	str	r4, [sp, #0]
    5088:	f7ff ff70 	bl	4f6c <_strtol_l.isra.0>
    508c:	bd16      	pop	{r1, r2, r4, pc}
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	20000054 	.word	0x20000054
    5094:	200000b8 	.word	0x200000b8

00005098 <strtol>:
    5098:	b537      	push	{r0, r1, r2, r4, r5, lr}
    509a:	0013      	movs	r3, r2
    509c:	4a06      	ldr	r2, [pc, #24]	; (50b8 <strtol+0x20>)
    509e:	0005      	movs	r5, r0
    50a0:	6810      	ldr	r0, [r2, #0]
    50a2:	6a04      	ldr	r4, [r0, #32]
    50a4:	2c00      	cmp	r4, #0
    50a6:	d100      	bne.n	50aa <strtol+0x12>
    50a8:	4c04      	ldr	r4, [pc, #16]	; (50bc <strtol+0x24>)
    50aa:	000a      	movs	r2, r1
    50ac:	9400      	str	r4, [sp, #0]
    50ae:	0029      	movs	r1, r5
    50b0:	f7ff ff5c 	bl	4f6c <_strtol_l.isra.0>
    50b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	20000054 	.word	0x20000054
    50bc:	200000b8 	.word	0x200000b8

000050c0 <__swbuf_r>:
    50c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50c2:	0005      	movs	r5, r0
    50c4:	000e      	movs	r6, r1
    50c6:	0014      	movs	r4, r2
    50c8:	2800      	cmp	r0, #0
    50ca:	d004      	beq.n	50d6 <__swbuf_r+0x16>
    50cc:	6983      	ldr	r3, [r0, #24]
    50ce:	2b00      	cmp	r3, #0
    50d0:	d101      	bne.n	50d6 <__swbuf_r+0x16>
    50d2:	f000 f9cd 	bl	5470 <__sinit>
    50d6:	4b22      	ldr	r3, [pc, #136]	; (5160 <__swbuf_r+0xa0>)
    50d8:	429c      	cmp	r4, r3
    50da:	d12d      	bne.n	5138 <__swbuf_r+0x78>
    50dc:	686c      	ldr	r4, [r5, #4]
    50de:	69a3      	ldr	r3, [r4, #24]
    50e0:	60a3      	str	r3, [r4, #8]
    50e2:	89a3      	ldrh	r3, [r4, #12]
    50e4:	071b      	lsls	r3, r3, #28
    50e6:	d531      	bpl.n	514c <__swbuf_r+0x8c>
    50e8:	6923      	ldr	r3, [r4, #16]
    50ea:	2b00      	cmp	r3, #0
    50ec:	d02e      	beq.n	514c <__swbuf_r+0x8c>
    50ee:	6823      	ldr	r3, [r4, #0]
    50f0:	6922      	ldr	r2, [r4, #16]
    50f2:	b2f7      	uxtb	r7, r6
    50f4:	1a98      	subs	r0, r3, r2
    50f6:	6963      	ldr	r3, [r4, #20]
    50f8:	b2f6      	uxtb	r6, r6
    50fa:	4298      	cmp	r0, r3
    50fc:	db05      	blt.n	510a <__swbuf_r+0x4a>
    50fe:	0021      	movs	r1, r4
    5100:	0028      	movs	r0, r5
    5102:	f000 f933 	bl	536c <_fflush_r>
    5106:	2800      	cmp	r0, #0
    5108:	d126      	bne.n	5158 <__swbuf_r+0x98>
    510a:	68a3      	ldr	r3, [r4, #8]
    510c:	3001      	adds	r0, #1
    510e:	3b01      	subs	r3, #1
    5110:	60a3      	str	r3, [r4, #8]
    5112:	6823      	ldr	r3, [r4, #0]
    5114:	1c5a      	adds	r2, r3, #1
    5116:	6022      	str	r2, [r4, #0]
    5118:	701f      	strb	r7, [r3, #0]
    511a:	6963      	ldr	r3, [r4, #20]
    511c:	4298      	cmp	r0, r3
    511e:	d004      	beq.n	512a <__swbuf_r+0x6a>
    5120:	89a3      	ldrh	r3, [r4, #12]
    5122:	07db      	lsls	r3, r3, #31
    5124:	d51a      	bpl.n	515c <__swbuf_r+0x9c>
    5126:	2e0a      	cmp	r6, #10
    5128:	d118      	bne.n	515c <__swbuf_r+0x9c>
    512a:	0021      	movs	r1, r4
    512c:	0028      	movs	r0, r5
    512e:	f000 f91d 	bl	536c <_fflush_r>
    5132:	2800      	cmp	r0, #0
    5134:	d012      	beq.n	515c <__swbuf_r+0x9c>
    5136:	e00f      	b.n	5158 <__swbuf_r+0x98>
    5138:	4b0a      	ldr	r3, [pc, #40]	; (5164 <__swbuf_r+0xa4>)
    513a:	429c      	cmp	r4, r3
    513c:	d101      	bne.n	5142 <__swbuf_r+0x82>
    513e:	68ac      	ldr	r4, [r5, #8]
    5140:	e7cd      	b.n	50de <__swbuf_r+0x1e>
    5142:	4b09      	ldr	r3, [pc, #36]	; (5168 <__swbuf_r+0xa8>)
    5144:	429c      	cmp	r4, r3
    5146:	d1ca      	bne.n	50de <__swbuf_r+0x1e>
    5148:	68ec      	ldr	r4, [r5, #12]
    514a:	e7c8      	b.n	50de <__swbuf_r+0x1e>
    514c:	0021      	movs	r1, r4
    514e:	0028      	movs	r0, r5
    5150:	f000 f80c 	bl	516c <__swsetup_r>
    5154:	2800      	cmp	r0, #0
    5156:	d0ca      	beq.n	50ee <__swbuf_r+0x2e>
    5158:	2601      	movs	r6, #1
    515a:	4276      	negs	r6, r6
    515c:	0030      	movs	r0, r6
    515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5160:	000071d0 	.word	0x000071d0
    5164:	000071f0 	.word	0x000071f0
    5168:	000071b0 	.word	0x000071b0

0000516c <__swsetup_r>:
    516c:	4b36      	ldr	r3, [pc, #216]	; (5248 <__swsetup_r+0xdc>)
    516e:	b570      	push	{r4, r5, r6, lr}
    5170:	681d      	ldr	r5, [r3, #0]
    5172:	0006      	movs	r6, r0
    5174:	000c      	movs	r4, r1
    5176:	2d00      	cmp	r5, #0
    5178:	d005      	beq.n	5186 <__swsetup_r+0x1a>
    517a:	69ab      	ldr	r3, [r5, #24]
    517c:	2b00      	cmp	r3, #0
    517e:	d102      	bne.n	5186 <__swsetup_r+0x1a>
    5180:	0028      	movs	r0, r5
    5182:	f000 f975 	bl	5470 <__sinit>
    5186:	4b31      	ldr	r3, [pc, #196]	; (524c <__swsetup_r+0xe0>)
    5188:	429c      	cmp	r4, r3
    518a:	d10f      	bne.n	51ac <__swsetup_r+0x40>
    518c:	686c      	ldr	r4, [r5, #4]
    518e:	230c      	movs	r3, #12
    5190:	5ee2      	ldrsh	r2, [r4, r3]
    5192:	b293      	uxth	r3, r2
    5194:	0719      	lsls	r1, r3, #28
    5196:	d42d      	bmi.n	51f4 <__swsetup_r+0x88>
    5198:	06d9      	lsls	r1, r3, #27
    519a:	d411      	bmi.n	51c0 <__swsetup_r+0x54>
    519c:	2309      	movs	r3, #9
    519e:	2001      	movs	r0, #1
    51a0:	6033      	str	r3, [r6, #0]
    51a2:	3337      	adds	r3, #55	; 0x37
    51a4:	4313      	orrs	r3, r2
    51a6:	81a3      	strh	r3, [r4, #12]
    51a8:	4240      	negs	r0, r0
    51aa:	bd70      	pop	{r4, r5, r6, pc}
    51ac:	4b28      	ldr	r3, [pc, #160]	; (5250 <__swsetup_r+0xe4>)
    51ae:	429c      	cmp	r4, r3
    51b0:	d101      	bne.n	51b6 <__swsetup_r+0x4a>
    51b2:	68ac      	ldr	r4, [r5, #8]
    51b4:	e7eb      	b.n	518e <__swsetup_r+0x22>
    51b6:	4b27      	ldr	r3, [pc, #156]	; (5254 <__swsetup_r+0xe8>)
    51b8:	429c      	cmp	r4, r3
    51ba:	d1e8      	bne.n	518e <__swsetup_r+0x22>
    51bc:	68ec      	ldr	r4, [r5, #12]
    51be:	e7e6      	b.n	518e <__swsetup_r+0x22>
    51c0:	075b      	lsls	r3, r3, #29
    51c2:	d513      	bpl.n	51ec <__swsetup_r+0x80>
    51c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51c6:	2900      	cmp	r1, #0
    51c8:	d008      	beq.n	51dc <__swsetup_r+0x70>
    51ca:	0023      	movs	r3, r4
    51cc:	3344      	adds	r3, #68	; 0x44
    51ce:	4299      	cmp	r1, r3
    51d0:	d002      	beq.n	51d8 <__swsetup_r+0x6c>
    51d2:	0030      	movs	r0, r6
    51d4:	f000 fa96 	bl	5704 <_free_r>
    51d8:	2300      	movs	r3, #0
    51da:	6363      	str	r3, [r4, #52]	; 0x34
    51dc:	2224      	movs	r2, #36	; 0x24
    51de:	89a3      	ldrh	r3, [r4, #12]
    51e0:	4393      	bics	r3, r2
    51e2:	81a3      	strh	r3, [r4, #12]
    51e4:	2300      	movs	r3, #0
    51e6:	6063      	str	r3, [r4, #4]
    51e8:	6923      	ldr	r3, [r4, #16]
    51ea:	6023      	str	r3, [r4, #0]
    51ec:	2308      	movs	r3, #8
    51ee:	89a2      	ldrh	r2, [r4, #12]
    51f0:	4313      	orrs	r3, r2
    51f2:	81a3      	strh	r3, [r4, #12]
    51f4:	6923      	ldr	r3, [r4, #16]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d10b      	bne.n	5212 <__swsetup_r+0xa6>
    51fa:	21a0      	movs	r1, #160	; 0xa0
    51fc:	2280      	movs	r2, #128	; 0x80
    51fe:	89a3      	ldrh	r3, [r4, #12]
    5200:	0089      	lsls	r1, r1, #2
    5202:	0092      	lsls	r2, r2, #2
    5204:	400b      	ands	r3, r1
    5206:	4293      	cmp	r3, r2
    5208:	d003      	beq.n	5212 <__swsetup_r+0xa6>
    520a:	0021      	movs	r1, r4
    520c:	0030      	movs	r0, r6
    520e:	f000 fa19 	bl	5644 <__smakebuf_r>
    5212:	2301      	movs	r3, #1
    5214:	89a2      	ldrh	r2, [r4, #12]
    5216:	4013      	ands	r3, r2
    5218:	d011      	beq.n	523e <__swsetup_r+0xd2>
    521a:	2300      	movs	r3, #0
    521c:	60a3      	str	r3, [r4, #8]
    521e:	6963      	ldr	r3, [r4, #20]
    5220:	425b      	negs	r3, r3
    5222:	61a3      	str	r3, [r4, #24]
    5224:	2000      	movs	r0, #0
    5226:	6923      	ldr	r3, [r4, #16]
    5228:	4283      	cmp	r3, r0
    522a:	d1be      	bne.n	51aa <__swsetup_r+0x3e>
    522c:	230c      	movs	r3, #12
    522e:	5ee2      	ldrsh	r2, [r4, r3]
    5230:	0613      	lsls	r3, r2, #24
    5232:	d5ba      	bpl.n	51aa <__swsetup_r+0x3e>
    5234:	2340      	movs	r3, #64	; 0x40
    5236:	4313      	orrs	r3, r2
    5238:	81a3      	strh	r3, [r4, #12]
    523a:	3801      	subs	r0, #1
    523c:	e7b5      	b.n	51aa <__swsetup_r+0x3e>
    523e:	0792      	lsls	r2, r2, #30
    5240:	d400      	bmi.n	5244 <__swsetup_r+0xd8>
    5242:	6963      	ldr	r3, [r4, #20]
    5244:	60a3      	str	r3, [r4, #8]
    5246:	e7ed      	b.n	5224 <__swsetup_r+0xb8>
    5248:	20000054 	.word	0x20000054
    524c:	000071d0 	.word	0x000071d0
    5250:	000071f0 	.word	0x000071f0
    5254:	000071b0 	.word	0x000071b0

00005258 <__sflush_r>:
    5258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    525a:	898a      	ldrh	r2, [r1, #12]
    525c:	0005      	movs	r5, r0
    525e:	000c      	movs	r4, r1
    5260:	0713      	lsls	r3, r2, #28
    5262:	d460      	bmi.n	5326 <__sflush_r+0xce>
    5264:	684b      	ldr	r3, [r1, #4]
    5266:	2b00      	cmp	r3, #0
    5268:	dc04      	bgt.n	5274 <__sflush_r+0x1c>
    526a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    526c:	2b00      	cmp	r3, #0
    526e:	dc01      	bgt.n	5274 <__sflush_r+0x1c>
    5270:	2000      	movs	r0, #0
    5272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5274:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5276:	2f00      	cmp	r7, #0
    5278:	d0fa      	beq.n	5270 <__sflush_r+0x18>
    527a:	2300      	movs	r3, #0
    527c:	682e      	ldr	r6, [r5, #0]
    527e:	602b      	str	r3, [r5, #0]
    5280:	2380      	movs	r3, #128	; 0x80
    5282:	015b      	lsls	r3, r3, #5
    5284:	401a      	ands	r2, r3
    5286:	d034      	beq.n	52f2 <__sflush_r+0x9a>
    5288:	6d60      	ldr	r0, [r4, #84]	; 0x54
    528a:	89a3      	ldrh	r3, [r4, #12]
    528c:	075b      	lsls	r3, r3, #29
    528e:	d506      	bpl.n	529e <__sflush_r+0x46>
    5290:	6863      	ldr	r3, [r4, #4]
    5292:	1ac0      	subs	r0, r0, r3
    5294:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5296:	2b00      	cmp	r3, #0
    5298:	d001      	beq.n	529e <__sflush_r+0x46>
    529a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    529c:	1ac0      	subs	r0, r0, r3
    529e:	0002      	movs	r2, r0
    52a0:	6a21      	ldr	r1, [r4, #32]
    52a2:	2300      	movs	r3, #0
    52a4:	0028      	movs	r0, r5
    52a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    52a8:	47b8      	blx	r7
    52aa:	89a1      	ldrh	r1, [r4, #12]
    52ac:	1c43      	adds	r3, r0, #1
    52ae:	d106      	bne.n	52be <__sflush_r+0x66>
    52b0:	682b      	ldr	r3, [r5, #0]
    52b2:	2b1d      	cmp	r3, #29
    52b4:	d831      	bhi.n	531a <__sflush_r+0xc2>
    52b6:	4a2c      	ldr	r2, [pc, #176]	; (5368 <__sflush_r+0x110>)
    52b8:	40da      	lsrs	r2, r3
    52ba:	07d3      	lsls	r3, r2, #31
    52bc:	d52d      	bpl.n	531a <__sflush_r+0xc2>
    52be:	2300      	movs	r3, #0
    52c0:	6063      	str	r3, [r4, #4]
    52c2:	6923      	ldr	r3, [r4, #16]
    52c4:	6023      	str	r3, [r4, #0]
    52c6:	04cb      	lsls	r3, r1, #19
    52c8:	d505      	bpl.n	52d6 <__sflush_r+0x7e>
    52ca:	1c43      	adds	r3, r0, #1
    52cc:	d102      	bne.n	52d4 <__sflush_r+0x7c>
    52ce:	682b      	ldr	r3, [r5, #0]
    52d0:	2b00      	cmp	r3, #0
    52d2:	d100      	bne.n	52d6 <__sflush_r+0x7e>
    52d4:	6560      	str	r0, [r4, #84]	; 0x54
    52d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    52d8:	602e      	str	r6, [r5, #0]
    52da:	2900      	cmp	r1, #0
    52dc:	d0c8      	beq.n	5270 <__sflush_r+0x18>
    52de:	0023      	movs	r3, r4
    52e0:	3344      	adds	r3, #68	; 0x44
    52e2:	4299      	cmp	r1, r3
    52e4:	d002      	beq.n	52ec <__sflush_r+0x94>
    52e6:	0028      	movs	r0, r5
    52e8:	f000 fa0c 	bl	5704 <_free_r>
    52ec:	2000      	movs	r0, #0
    52ee:	6360      	str	r0, [r4, #52]	; 0x34
    52f0:	e7bf      	b.n	5272 <__sflush_r+0x1a>
    52f2:	2301      	movs	r3, #1
    52f4:	6a21      	ldr	r1, [r4, #32]
    52f6:	0028      	movs	r0, r5
    52f8:	47b8      	blx	r7
    52fa:	1c43      	adds	r3, r0, #1
    52fc:	d1c5      	bne.n	528a <__sflush_r+0x32>
    52fe:	682b      	ldr	r3, [r5, #0]
    5300:	2b00      	cmp	r3, #0
    5302:	d0c2      	beq.n	528a <__sflush_r+0x32>
    5304:	2b1d      	cmp	r3, #29
    5306:	d001      	beq.n	530c <__sflush_r+0xb4>
    5308:	2b16      	cmp	r3, #22
    530a:	d101      	bne.n	5310 <__sflush_r+0xb8>
    530c:	602e      	str	r6, [r5, #0]
    530e:	e7af      	b.n	5270 <__sflush_r+0x18>
    5310:	2340      	movs	r3, #64	; 0x40
    5312:	89a2      	ldrh	r2, [r4, #12]
    5314:	4313      	orrs	r3, r2
    5316:	81a3      	strh	r3, [r4, #12]
    5318:	e7ab      	b.n	5272 <__sflush_r+0x1a>
    531a:	2340      	movs	r3, #64	; 0x40
    531c:	430b      	orrs	r3, r1
    531e:	2001      	movs	r0, #1
    5320:	81a3      	strh	r3, [r4, #12]
    5322:	4240      	negs	r0, r0
    5324:	e7a5      	b.n	5272 <__sflush_r+0x1a>
    5326:	690f      	ldr	r7, [r1, #16]
    5328:	2f00      	cmp	r7, #0
    532a:	d0a1      	beq.n	5270 <__sflush_r+0x18>
    532c:	680b      	ldr	r3, [r1, #0]
    532e:	600f      	str	r7, [r1, #0]
    5330:	1bdb      	subs	r3, r3, r7
    5332:	9301      	str	r3, [sp, #4]
    5334:	2300      	movs	r3, #0
    5336:	0792      	lsls	r2, r2, #30
    5338:	d100      	bne.n	533c <__sflush_r+0xe4>
    533a:	694b      	ldr	r3, [r1, #20]
    533c:	60a3      	str	r3, [r4, #8]
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	2b00      	cmp	r3, #0
    5342:	dc00      	bgt.n	5346 <__sflush_r+0xee>
    5344:	e794      	b.n	5270 <__sflush_r+0x18>
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	003a      	movs	r2, r7
    534a:	6a21      	ldr	r1, [r4, #32]
    534c:	0028      	movs	r0, r5
    534e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5350:	47b0      	blx	r6
    5352:	2800      	cmp	r0, #0
    5354:	dc03      	bgt.n	535e <__sflush_r+0x106>
    5356:	2340      	movs	r3, #64	; 0x40
    5358:	89a2      	ldrh	r2, [r4, #12]
    535a:	4313      	orrs	r3, r2
    535c:	e7df      	b.n	531e <__sflush_r+0xc6>
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	183f      	adds	r7, r7, r0
    5362:	1a1b      	subs	r3, r3, r0
    5364:	9301      	str	r3, [sp, #4]
    5366:	e7ea      	b.n	533e <__sflush_r+0xe6>
    5368:	20400001 	.word	0x20400001

0000536c <_fflush_r>:
    536c:	690b      	ldr	r3, [r1, #16]
    536e:	b570      	push	{r4, r5, r6, lr}
    5370:	0005      	movs	r5, r0
    5372:	000c      	movs	r4, r1
    5374:	2b00      	cmp	r3, #0
    5376:	d101      	bne.n	537c <_fflush_r+0x10>
    5378:	2000      	movs	r0, #0
    537a:	bd70      	pop	{r4, r5, r6, pc}
    537c:	2800      	cmp	r0, #0
    537e:	d004      	beq.n	538a <_fflush_r+0x1e>
    5380:	6983      	ldr	r3, [r0, #24]
    5382:	2b00      	cmp	r3, #0
    5384:	d101      	bne.n	538a <_fflush_r+0x1e>
    5386:	f000 f873 	bl	5470 <__sinit>
    538a:	4b0b      	ldr	r3, [pc, #44]	; (53b8 <_fflush_r+0x4c>)
    538c:	429c      	cmp	r4, r3
    538e:	d109      	bne.n	53a4 <_fflush_r+0x38>
    5390:	686c      	ldr	r4, [r5, #4]
    5392:	220c      	movs	r2, #12
    5394:	5ea3      	ldrsh	r3, [r4, r2]
    5396:	2b00      	cmp	r3, #0
    5398:	d0ee      	beq.n	5378 <_fflush_r+0xc>
    539a:	0021      	movs	r1, r4
    539c:	0028      	movs	r0, r5
    539e:	f7ff ff5b 	bl	5258 <__sflush_r>
    53a2:	e7ea      	b.n	537a <_fflush_r+0xe>
    53a4:	4b05      	ldr	r3, [pc, #20]	; (53bc <_fflush_r+0x50>)
    53a6:	429c      	cmp	r4, r3
    53a8:	d101      	bne.n	53ae <_fflush_r+0x42>
    53aa:	68ac      	ldr	r4, [r5, #8]
    53ac:	e7f1      	b.n	5392 <_fflush_r+0x26>
    53ae:	4b04      	ldr	r3, [pc, #16]	; (53c0 <_fflush_r+0x54>)
    53b0:	429c      	cmp	r4, r3
    53b2:	d1ee      	bne.n	5392 <_fflush_r+0x26>
    53b4:	68ec      	ldr	r4, [r5, #12]
    53b6:	e7ec      	b.n	5392 <_fflush_r+0x26>
    53b8:	000071d0 	.word	0x000071d0
    53bc:	000071f0 	.word	0x000071f0
    53c0:	000071b0 	.word	0x000071b0

000053c4 <fflush>:
    53c4:	b510      	push	{r4, lr}
    53c6:	1e01      	subs	r1, r0, #0
    53c8:	d105      	bne.n	53d6 <fflush+0x12>
    53ca:	4b05      	ldr	r3, [pc, #20]	; (53e0 <fflush+0x1c>)
    53cc:	4905      	ldr	r1, [pc, #20]	; (53e4 <fflush+0x20>)
    53ce:	6818      	ldr	r0, [r3, #0]
    53d0:	f000 f8de 	bl	5590 <_fwalk_reent>
    53d4:	bd10      	pop	{r4, pc}
    53d6:	4b04      	ldr	r3, [pc, #16]	; (53e8 <fflush+0x24>)
    53d8:	6818      	ldr	r0, [r3, #0]
    53da:	f7ff ffc7 	bl	536c <_fflush_r>
    53de:	e7f9      	b.n	53d4 <fflush+0x10>
    53e0:	000071ac 	.word	0x000071ac
    53e4:	0000536d 	.word	0x0000536d
    53e8:	20000054 	.word	0x20000054

000053ec <_cleanup_r>:
    53ec:	b510      	push	{r4, lr}
    53ee:	4902      	ldr	r1, [pc, #8]	; (53f8 <_cleanup_r+0xc>)
    53f0:	f000 f8ce 	bl	5590 <_fwalk_reent>
    53f4:	bd10      	pop	{r4, pc}
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	0000536d 	.word	0x0000536d

000053fc <std.isra.0>:
    53fc:	2300      	movs	r3, #0
    53fe:	b510      	push	{r4, lr}
    5400:	0004      	movs	r4, r0
    5402:	6003      	str	r3, [r0, #0]
    5404:	6043      	str	r3, [r0, #4]
    5406:	6083      	str	r3, [r0, #8]
    5408:	8181      	strh	r1, [r0, #12]
    540a:	6643      	str	r3, [r0, #100]	; 0x64
    540c:	81c2      	strh	r2, [r0, #14]
    540e:	6103      	str	r3, [r0, #16]
    5410:	6143      	str	r3, [r0, #20]
    5412:	6183      	str	r3, [r0, #24]
    5414:	0019      	movs	r1, r3
    5416:	2208      	movs	r2, #8
    5418:	305c      	adds	r0, #92	; 0x5c
    541a:	f7ff fbea 	bl	4bf2 <memset>
    541e:	4b05      	ldr	r3, [pc, #20]	; (5434 <std.isra.0+0x38>)
    5420:	6224      	str	r4, [r4, #32]
    5422:	6263      	str	r3, [r4, #36]	; 0x24
    5424:	4b04      	ldr	r3, [pc, #16]	; (5438 <std.isra.0+0x3c>)
    5426:	62a3      	str	r3, [r4, #40]	; 0x28
    5428:	4b04      	ldr	r3, [pc, #16]	; (543c <std.isra.0+0x40>)
    542a:	62e3      	str	r3, [r4, #44]	; 0x2c
    542c:	4b04      	ldr	r3, [pc, #16]	; (5440 <std.isra.0+0x44>)
    542e:	6323      	str	r3, [r4, #48]	; 0x30
    5430:	bd10      	pop	{r4, pc}
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	000065d1 	.word	0x000065d1
    5438:	000065f9 	.word	0x000065f9
    543c:	00006631 	.word	0x00006631
    5440:	0000665d 	.word	0x0000665d

00005444 <__sfmoreglue>:
    5444:	b570      	push	{r4, r5, r6, lr}
    5446:	2568      	movs	r5, #104	; 0x68
    5448:	1e4a      	subs	r2, r1, #1
    544a:	4355      	muls	r5, r2
    544c:	000e      	movs	r6, r1
    544e:	0029      	movs	r1, r5
    5450:	3174      	adds	r1, #116	; 0x74
    5452:	f000 f9a1 	bl	5798 <_malloc_r>
    5456:	1e04      	subs	r4, r0, #0
    5458:	d008      	beq.n	546c <__sfmoreglue+0x28>
    545a:	2100      	movs	r1, #0
    545c:	002a      	movs	r2, r5
    545e:	6001      	str	r1, [r0, #0]
    5460:	6046      	str	r6, [r0, #4]
    5462:	300c      	adds	r0, #12
    5464:	60a0      	str	r0, [r4, #8]
    5466:	3268      	adds	r2, #104	; 0x68
    5468:	f7ff fbc3 	bl	4bf2 <memset>
    546c:	0020      	movs	r0, r4
    546e:	bd70      	pop	{r4, r5, r6, pc}

00005470 <__sinit>:
    5470:	6983      	ldr	r3, [r0, #24]
    5472:	b513      	push	{r0, r1, r4, lr}
    5474:	0004      	movs	r4, r0
    5476:	2b00      	cmp	r3, #0
    5478:	d128      	bne.n	54cc <__sinit+0x5c>
    547a:	6483      	str	r3, [r0, #72]	; 0x48
    547c:	64c3      	str	r3, [r0, #76]	; 0x4c
    547e:	6503      	str	r3, [r0, #80]	; 0x50
    5480:	4b13      	ldr	r3, [pc, #76]	; (54d0 <__sinit+0x60>)
    5482:	4a14      	ldr	r2, [pc, #80]	; (54d4 <__sinit+0x64>)
    5484:	681b      	ldr	r3, [r3, #0]
    5486:	6282      	str	r2, [r0, #40]	; 0x28
    5488:	9301      	str	r3, [sp, #4]
    548a:	4298      	cmp	r0, r3
    548c:	d101      	bne.n	5492 <__sinit+0x22>
    548e:	2301      	movs	r3, #1
    5490:	6183      	str	r3, [r0, #24]
    5492:	0020      	movs	r0, r4
    5494:	f000 f820 	bl	54d8 <__sfp>
    5498:	6060      	str	r0, [r4, #4]
    549a:	0020      	movs	r0, r4
    549c:	f000 f81c 	bl	54d8 <__sfp>
    54a0:	60a0      	str	r0, [r4, #8]
    54a2:	0020      	movs	r0, r4
    54a4:	f000 f818 	bl	54d8 <__sfp>
    54a8:	2200      	movs	r2, #0
    54aa:	60e0      	str	r0, [r4, #12]
    54ac:	2104      	movs	r1, #4
    54ae:	6860      	ldr	r0, [r4, #4]
    54b0:	f7ff ffa4 	bl	53fc <std.isra.0>
    54b4:	2201      	movs	r2, #1
    54b6:	2109      	movs	r1, #9
    54b8:	68a0      	ldr	r0, [r4, #8]
    54ba:	f7ff ff9f 	bl	53fc <std.isra.0>
    54be:	2202      	movs	r2, #2
    54c0:	2112      	movs	r1, #18
    54c2:	68e0      	ldr	r0, [r4, #12]
    54c4:	f7ff ff9a 	bl	53fc <std.isra.0>
    54c8:	2301      	movs	r3, #1
    54ca:	61a3      	str	r3, [r4, #24]
    54cc:	bd13      	pop	{r0, r1, r4, pc}
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	000071ac 	.word	0x000071ac
    54d4:	000053ed 	.word	0x000053ed

000054d8 <__sfp>:
    54d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54da:	4b1e      	ldr	r3, [pc, #120]	; (5554 <__sfp+0x7c>)
    54dc:	0007      	movs	r7, r0
    54de:	681e      	ldr	r6, [r3, #0]
    54e0:	69b3      	ldr	r3, [r6, #24]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d102      	bne.n	54ec <__sfp+0x14>
    54e6:	0030      	movs	r0, r6
    54e8:	f7ff ffc2 	bl	5470 <__sinit>
    54ec:	3648      	adds	r6, #72	; 0x48
    54ee:	68b4      	ldr	r4, [r6, #8]
    54f0:	6873      	ldr	r3, [r6, #4]
    54f2:	3b01      	subs	r3, #1
    54f4:	d504      	bpl.n	5500 <__sfp+0x28>
    54f6:	6833      	ldr	r3, [r6, #0]
    54f8:	2b00      	cmp	r3, #0
    54fa:	d007      	beq.n	550c <__sfp+0x34>
    54fc:	6836      	ldr	r6, [r6, #0]
    54fe:	e7f6      	b.n	54ee <__sfp+0x16>
    5500:	220c      	movs	r2, #12
    5502:	5ea5      	ldrsh	r5, [r4, r2]
    5504:	2d00      	cmp	r5, #0
    5506:	d00d      	beq.n	5524 <__sfp+0x4c>
    5508:	3468      	adds	r4, #104	; 0x68
    550a:	e7f2      	b.n	54f2 <__sfp+0x1a>
    550c:	2104      	movs	r1, #4
    550e:	0038      	movs	r0, r7
    5510:	f7ff ff98 	bl	5444 <__sfmoreglue>
    5514:	6030      	str	r0, [r6, #0]
    5516:	2800      	cmp	r0, #0
    5518:	d1f0      	bne.n	54fc <__sfp+0x24>
    551a:	230c      	movs	r3, #12
    551c:	0004      	movs	r4, r0
    551e:	603b      	str	r3, [r7, #0]
    5520:	0020      	movs	r0, r4
    5522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5524:	2301      	movs	r3, #1
    5526:	0020      	movs	r0, r4
    5528:	425b      	negs	r3, r3
    552a:	81e3      	strh	r3, [r4, #14]
    552c:	3302      	adds	r3, #2
    552e:	81a3      	strh	r3, [r4, #12]
    5530:	6665      	str	r5, [r4, #100]	; 0x64
    5532:	6025      	str	r5, [r4, #0]
    5534:	60a5      	str	r5, [r4, #8]
    5536:	6065      	str	r5, [r4, #4]
    5538:	6125      	str	r5, [r4, #16]
    553a:	6165      	str	r5, [r4, #20]
    553c:	61a5      	str	r5, [r4, #24]
    553e:	2208      	movs	r2, #8
    5540:	0029      	movs	r1, r5
    5542:	305c      	adds	r0, #92	; 0x5c
    5544:	f7ff fb55 	bl	4bf2 <memset>
    5548:	6365      	str	r5, [r4, #52]	; 0x34
    554a:	63a5      	str	r5, [r4, #56]	; 0x38
    554c:	64a5      	str	r5, [r4, #72]	; 0x48
    554e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5550:	e7e6      	b.n	5520 <__sfp+0x48>
    5552:	46c0      	nop			; (mov r8, r8)
    5554:	000071ac 	.word	0x000071ac

00005558 <_fwalk>:
    5558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    555a:	3048      	adds	r0, #72	; 0x48
    555c:	0004      	movs	r4, r0
    555e:	2600      	movs	r6, #0
    5560:	9101      	str	r1, [sp, #4]
    5562:	2c00      	cmp	r4, #0
    5564:	d101      	bne.n	556a <_fwalk+0x12>
    5566:	0030      	movs	r0, r6
    5568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    556a:	68a5      	ldr	r5, [r4, #8]
    556c:	6867      	ldr	r7, [r4, #4]
    556e:	3f01      	subs	r7, #1
    5570:	d501      	bpl.n	5576 <_fwalk+0x1e>
    5572:	6824      	ldr	r4, [r4, #0]
    5574:	e7f5      	b.n	5562 <_fwalk+0xa>
    5576:	89ab      	ldrh	r3, [r5, #12]
    5578:	2b01      	cmp	r3, #1
    557a:	d907      	bls.n	558c <_fwalk+0x34>
    557c:	220e      	movs	r2, #14
    557e:	5eab      	ldrsh	r3, [r5, r2]
    5580:	3301      	adds	r3, #1
    5582:	d003      	beq.n	558c <_fwalk+0x34>
    5584:	0028      	movs	r0, r5
    5586:	9b01      	ldr	r3, [sp, #4]
    5588:	4798      	blx	r3
    558a:	4306      	orrs	r6, r0
    558c:	3568      	adds	r5, #104	; 0x68
    558e:	e7ee      	b.n	556e <_fwalk+0x16>

00005590 <_fwalk_reent>:
    5590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5592:	0004      	movs	r4, r0
    5594:	0007      	movs	r7, r0
    5596:	2600      	movs	r6, #0
    5598:	9101      	str	r1, [sp, #4]
    559a:	3448      	adds	r4, #72	; 0x48
    559c:	2c00      	cmp	r4, #0
    559e:	d101      	bne.n	55a4 <_fwalk_reent+0x14>
    55a0:	0030      	movs	r0, r6
    55a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55a4:	6863      	ldr	r3, [r4, #4]
    55a6:	68a5      	ldr	r5, [r4, #8]
    55a8:	9300      	str	r3, [sp, #0]
    55aa:	9b00      	ldr	r3, [sp, #0]
    55ac:	3b01      	subs	r3, #1
    55ae:	9300      	str	r3, [sp, #0]
    55b0:	d501      	bpl.n	55b6 <_fwalk_reent+0x26>
    55b2:	6824      	ldr	r4, [r4, #0]
    55b4:	e7f2      	b.n	559c <_fwalk_reent+0xc>
    55b6:	89ab      	ldrh	r3, [r5, #12]
    55b8:	2b01      	cmp	r3, #1
    55ba:	d908      	bls.n	55ce <_fwalk_reent+0x3e>
    55bc:	220e      	movs	r2, #14
    55be:	5eab      	ldrsh	r3, [r5, r2]
    55c0:	3301      	adds	r3, #1
    55c2:	d004      	beq.n	55ce <_fwalk_reent+0x3e>
    55c4:	0029      	movs	r1, r5
    55c6:	0038      	movs	r0, r7
    55c8:	9b01      	ldr	r3, [sp, #4]
    55ca:	4798      	blx	r3
    55cc:	4306      	orrs	r6, r0
    55ce:	3568      	adds	r5, #104	; 0x68
    55d0:	e7eb      	b.n	55aa <_fwalk_reent+0x1a>

000055d2 <__locale_ctype_ptr_l>:
    55d2:	30ec      	adds	r0, #236	; 0xec
    55d4:	6800      	ldr	r0, [r0, #0]
    55d6:	4770      	bx	lr

000055d8 <__locale_ctype_ptr>:
    55d8:	4b04      	ldr	r3, [pc, #16]	; (55ec <__locale_ctype_ptr+0x14>)
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	6a1b      	ldr	r3, [r3, #32]
    55de:	2b00      	cmp	r3, #0
    55e0:	d100      	bne.n	55e4 <__locale_ctype_ptr+0xc>
    55e2:	4b03      	ldr	r3, [pc, #12]	; (55f0 <__locale_ctype_ptr+0x18>)
    55e4:	33ec      	adds	r3, #236	; 0xec
    55e6:	6818      	ldr	r0, [r3, #0]
    55e8:	4770      	bx	lr
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	20000054 	.word	0x20000054
    55f0:	200000b8 	.word	0x200000b8

000055f4 <__swhatbuf_r>:
    55f4:	b570      	push	{r4, r5, r6, lr}
    55f6:	000e      	movs	r6, r1
    55f8:	001d      	movs	r5, r3
    55fa:	230e      	movs	r3, #14
    55fc:	5ec9      	ldrsh	r1, [r1, r3]
    55fe:	b090      	sub	sp, #64	; 0x40
    5600:	0014      	movs	r4, r2
    5602:	2900      	cmp	r1, #0
    5604:	da07      	bge.n	5616 <__swhatbuf_r+0x22>
    5606:	2300      	movs	r3, #0
    5608:	602b      	str	r3, [r5, #0]
    560a:	89b3      	ldrh	r3, [r6, #12]
    560c:	061b      	lsls	r3, r3, #24
    560e:	d411      	bmi.n	5634 <__swhatbuf_r+0x40>
    5610:	2380      	movs	r3, #128	; 0x80
    5612:	00db      	lsls	r3, r3, #3
    5614:	e00f      	b.n	5636 <__swhatbuf_r+0x42>
    5616:	aa01      	add	r2, sp, #4
    5618:	f001 f9a0 	bl	695c <_fstat_r>
    561c:	2800      	cmp	r0, #0
    561e:	dbf2      	blt.n	5606 <__swhatbuf_r+0x12>
    5620:	22f0      	movs	r2, #240	; 0xf0
    5622:	9b02      	ldr	r3, [sp, #8]
    5624:	0212      	lsls	r2, r2, #8
    5626:	4013      	ands	r3, r2
    5628:	4a05      	ldr	r2, [pc, #20]	; (5640 <__swhatbuf_r+0x4c>)
    562a:	189b      	adds	r3, r3, r2
    562c:	425a      	negs	r2, r3
    562e:	4153      	adcs	r3, r2
    5630:	602b      	str	r3, [r5, #0]
    5632:	e7ed      	b.n	5610 <__swhatbuf_r+0x1c>
    5634:	2340      	movs	r3, #64	; 0x40
    5636:	2000      	movs	r0, #0
    5638:	6023      	str	r3, [r4, #0]
    563a:	b010      	add	sp, #64	; 0x40
    563c:	bd70      	pop	{r4, r5, r6, pc}
    563e:	46c0      	nop			; (mov r8, r8)
    5640:	ffffe000 	.word	0xffffe000

00005644 <__smakebuf_r>:
    5644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5646:	2602      	movs	r6, #2
    5648:	898b      	ldrh	r3, [r1, #12]
    564a:	0005      	movs	r5, r0
    564c:	000c      	movs	r4, r1
    564e:	4233      	tst	r3, r6
    5650:	d006      	beq.n	5660 <__smakebuf_r+0x1c>
    5652:	0023      	movs	r3, r4
    5654:	3347      	adds	r3, #71	; 0x47
    5656:	6023      	str	r3, [r4, #0]
    5658:	6123      	str	r3, [r4, #16]
    565a:	2301      	movs	r3, #1
    565c:	6163      	str	r3, [r4, #20]
    565e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5660:	ab01      	add	r3, sp, #4
    5662:	466a      	mov	r2, sp
    5664:	f7ff ffc6 	bl	55f4 <__swhatbuf_r>
    5668:	9900      	ldr	r1, [sp, #0]
    566a:	0007      	movs	r7, r0
    566c:	0028      	movs	r0, r5
    566e:	f000 f893 	bl	5798 <_malloc_r>
    5672:	2800      	cmp	r0, #0
    5674:	d108      	bne.n	5688 <__smakebuf_r+0x44>
    5676:	220c      	movs	r2, #12
    5678:	5ea3      	ldrsh	r3, [r4, r2]
    567a:	059a      	lsls	r2, r3, #22
    567c:	d4ef      	bmi.n	565e <__smakebuf_r+0x1a>
    567e:	2203      	movs	r2, #3
    5680:	4393      	bics	r3, r2
    5682:	431e      	orrs	r6, r3
    5684:	81a6      	strh	r6, [r4, #12]
    5686:	e7e4      	b.n	5652 <__smakebuf_r+0xe>
    5688:	4b0f      	ldr	r3, [pc, #60]	; (56c8 <__smakebuf_r+0x84>)
    568a:	62ab      	str	r3, [r5, #40]	; 0x28
    568c:	2380      	movs	r3, #128	; 0x80
    568e:	89a2      	ldrh	r2, [r4, #12]
    5690:	6020      	str	r0, [r4, #0]
    5692:	4313      	orrs	r3, r2
    5694:	81a3      	strh	r3, [r4, #12]
    5696:	9b00      	ldr	r3, [sp, #0]
    5698:	6120      	str	r0, [r4, #16]
    569a:	6163      	str	r3, [r4, #20]
    569c:	9b01      	ldr	r3, [sp, #4]
    569e:	2b00      	cmp	r3, #0
    56a0:	d00d      	beq.n	56be <__smakebuf_r+0x7a>
    56a2:	230e      	movs	r3, #14
    56a4:	5ee1      	ldrsh	r1, [r4, r3]
    56a6:	0028      	movs	r0, r5
    56a8:	f001 f96a 	bl	6980 <_isatty_r>
    56ac:	2800      	cmp	r0, #0
    56ae:	d006      	beq.n	56be <__smakebuf_r+0x7a>
    56b0:	2203      	movs	r2, #3
    56b2:	89a3      	ldrh	r3, [r4, #12]
    56b4:	4393      	bics	r3, r2
    56b6:	001a      	movs	r2, r3
    56b8:	2301      	movs	r3, #1
    56ba:	4313      	orrs	r3, r2
    56bc:	81a3      	strh	r3, [r4, #12]
    56be:	89a0      	ldrh	r0, [r4, #12]
    56c0:	4338      	orrs	r0, r7
    56c2:	81a0      	strh	r0, [r4, #12]
    56c4:	e7cb      	b.n	565e <__smakebuf_r+0x1a>
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	000053ed 	.word	0x000053ed

000056cc <malloc>:
    56cc:	b510      	push	{r4, lr}
    56ce:	4b03      	ldr	r3, [pc, #12]	; (56dc <malloc+0x10>)
    56d0:	0001      	movs	r1, r0
    56d2:	6818      	ldr	r0, [r3, #0]
    56d4:	f000 f860 	bl	5798 <_malloc_r>
    56d8:	bd10      	pop	{r4, pc}
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	20000054 	.word	0x20000054

000056e0 <__ascii_mbtowc>:
    56e0:	b082      	sub	sp, #8
    56e2:	2900      	cmp	r1, #0
    56e4:	d100      	bne.n	56e8 <__ascii_mbtowc+0x8>
    56e6:	a901      	add	r1, sp, #4
    56e8:	1e10      	subs	r0, r2, #0
    56ea:	d006      	beq.n	56fa <__ascii_mbtowc+0x1a>
    56ec:	2b00      	cmp	r3, #0
    56ee:	d006      	beq.n	56fe <__ascii_mbtowc+0x1e>
    56f0:	7813      	ldrb	r3, [r2, #0]
    56f2:	600b      	str	r3, [r1, #0]
    56f4:	7810      	ldrb	r0, [r2, #0]
    56f6:	1e43      	subs	r3, r0, #1
    56f8:	4198      	sbcs	r0, r3
    56fa:	b002      	add	sp, #8
    56fc:	4770      	bx	lr
    56fe:	2002      	movs	r0, #2
    5700:	4240      	negs	r0, r0
    5702:	e7fa      	b.n	56fa <__ascii_mbtowc+0x1a>

00005704 <_free_r>:
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	0005      	movs	r5, r0
    5708:	2900      	cmp	r1, #0
    570a:	d010      	beq.n	572e <_free_r+0x2a>
    570c:	1f0c      	subs	r4, r1, #4
    570e:	6823      	ldr	r3, [r4, #0]
    5710:	2b00      	cmp	r3, #0
    5712:	da00      	bge.n	5716 <_free_r+0x12>
    5714:	18e4      	adds	r4, r4, r3
    5716:	0028      	movs	r0, r5
    5718:	f001 f963 	bl	69e2 <__malloc_lock>
    571c:	4a1d      	ldr	r2, [pc, #116]	; (5794 <_free_r+0x90>)
    571e:	6813      	ldr	r3, [r2, #0]
    5720:	2b00      	cmp	r3, #0
    5722:	d105      	bne.n	5730 <_free_r+0x2c>
    5724:	6063      	str	r3, [r4, #4]
    5726:	6014      	str	r4, [r2, #0]
    5728:	0028      	movs	r0, r5
    572a:	f001 f95b 	bl	69e4 <__malloc_unlock>
    572e:	bd70      	pop	{r4, r5, r6, pc}
    5730:	42a3      	cmp	r3, r4
    5732:	d909      	bls.n	5748 <_free_r+0x44>
    5734:	6821      	ldr	r1, [r4, #0]
    5736:	1860      	adds	r0, r4, r1
    5738:	4283      	cmp	r3, r0
    573a:	d1f3      	bne.n	5724 <_free_r+0x20>
    573c:	6818      	ldr	r0, [r3, #0]
    573e:	685b      	ldr	r3, [r3, #4]
    5740:	1841      	adds	r1, r0, r1
    5742:	6021      	str	r1, [r4, #0]
    5744:	e7ee      	b.n	5724 <_free_r+0x20>
    5746:	0013      	movs	r3, r2
    5748:	685a      	ldr	r2, [r3, #4]
    574a:	2a00      	cmp	r2, #0
    574c:	d001      	beq.n	5752 <_free_r+0x4e>
    574e:	42a2      	cmp	r2, r4
    5750:	d9f9      	bls.n	5746 <_free_r+0x42>
    5752:	6819      	ldr	r1, [r3, #0]
    5754:	1858      	adds	r0, r3, r1
    5756:	42a0      	cmp	r0, r4
    5758:	d10b      	bne.n	5772 <_free_r+0x6e>
    575a:	6820      	ldr	r0, [r4, #0]
    575c:	1809      	adds	r1, r1, r0
    575e:	1858      	adds	r0, r3, r1
    5760:	6019      	str	r1, [r3, #0]
    5762:	4282      	cmp	r2, r0
    5764:	d1e0      	bne.n	5728 <_free_r+0x24>
    5766:	6810      	ldr	r0, [r2, #0]
    5768:	6852      	ldr	r2, [r2, #4]
    576a:	1841      	adds	r1, r0, r1
    576c:	6019      	str	r1, [r3, #0]
    576e:	605a      	str	r2, [r3, #4]
    5770:	e7da      	b.n	5728 <_free_r+0x24>
    5772:	42a0      	cmp	r0, r4
    5774:	d902      	bls.n	577c <_free_r+0x78>
    5776:	230c      	movs	r3, #12
    5778:	602b      	str	r3, [r5, #0]
    577a:	e7d5      	b.n	5728 <_free_r+0x24>
    577c:	6821      	ldr	r1, [r4, #0]
    577e:	1860      	adds	r0, r4, r1
    5780:	4282      	cmp	r2, r0
    5782:	d103      	bne.n	578c <_free_r+0x88>
    5784:	6810      	ldr	r0, [r2, #0]
    5786:	6852      	ldr	r2, [r2, #4]
    5788:	1841      	adds	r1, r0, r1
    578a:	6021      	str	r1, [r4, #0]
    578c:	6062      	str	r2, [r4, #4]
    578e:	605c      	str	r4, [r3, #4]
    5790:	e7ca      	b.n	5728 <_free_r+0x24>
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	200002b8 	.word	0x200002b8

00005798 <_malloc_r>:
    5798:	2303      	movs	r3, #3
    579a:	b570      	push	{r4, r5, r6, lr}
    579c:	1ccd      	adds	r5, r1, #3
    579e:	439d      	bics	r5, r3
    57a0:	3508      	adds	r5, #8
    57a2:	0006      	movs	r6, r0
    57a4:	2d0c      	cmp	r5, #12
    57a6:	d21e      	bcs.n	57e6 <_malloc_r+0x4e>
    57a8:	250c      	movs	r5, #12
    57aa:	42a9      	cmp	r1, r5
    57ac:	d81d      	bhi.n	57ea <_malloc_r+0x52>
    57ae:	0030      	movs	r0, r6
    57b0:	f001 f917 	bl	69e2 <__malloc_lock>
    57b4:	4a25      	ldr	r2, [pc, #148]	; (584c <_malloc_r+0xb4>)
    57b6:	6814      	ldr	r4, [r2, #0]
    57b8:	0021      	movs	r1, r4
    57ba:	2900      	cmp	r1, #0
    57bc:	d119      	bne.n	57f2 <_malloc_r+0x5a>
    57be:	4c24      	ldr	r4, [pc, #144]	; (5850 <_malloc_r+0xb8>)
    57c0:	6823      	ldr	r3, [r4, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d103      	bne.n	57ce <_malloc_r+0x36>
    57c6:	0030      	movs	r0, r6
    57c8:	f000 febe 	bl	6548 <_sbrk_r>
    57cc:	6020      	str	r0, [r4, #0]
    57ce:	0029      	movs	r1, r5
    57d0:	0030      	movs	r0, r6
    57d2:	f000 feb9 	bl	6548 <_sbrk_r>
    57d6:	1c43      	adds	r3, r0, #1
    57d8:	d12c      	bne.n	5834 <_malloc_r+0x9c>
    57da:	230c      	movs	r3, #12
    57dc:	0030      	movs	r0, r6
    57de:	6033      	str	r3, [r6, #0]
    57e0:	f001 f900 	bl	69e4 <__malloc_unlock>
    57e4:	e003      	b.n	57ee <_malloc_r+0x56>
    57e6:	2d00      	cmp	r5, #0
    57e8:	dadf      	bge.n	57aa <_malloc_r+0x12>
    57ea:	230c      	movs	r3, #12
    57ec:	6033      	str	r3, [r6, #0]
    57ee:	2000      	movs	r0, #0
    57f0:	bd70      	pop	{r4, r5, r6, pc}
    57f2:	680b      	ldr	r3, [r1, #0]
    57f4:	1b5b      	subs	r3, r3, r5
    57f6:	d41a      	bmi.n	582e <_malloc_r+0x96>
    57f8:	2b0b      	cmp	r3, #11
    57fa:	d903      	bls.n	5804 <_malloc_r+0x6c>
    57fc:	600b      	str	r3, [r1, #0]
    57fe:	18cc      	adds	r4, r1, r3
    5800:	6025      	str	r5, [r4, #0]
    5802:	e003      	b.n	580c <_malloc_r+0x74>
    5804:	428c      	cmp	r4, r1
    5806:	d10e      	bne.n	5826 <_malloc_r+0x8e>
    5808:	6863      	ldr	r3, [r4, #4]
    580a:	6013      	str	r3, [r2, #0]
    580c:	0030      	movs	r0, r6
    580e:	f001 f8e9 	bl	69e4 <__malloc_unlock>
    5812:	0020      	movs	r0, r4
    5814:	2207      	movs	r2, #7
    5816:	300b      	adds	r0, #11
    5818:	1d23      	adds	r3, r4, #4
    581a:	4390      	bics	r0, r2
    581c:	1ac3      	subs	r3, r0, r3
    581e:	d0e7      	beq.n	57f0 <_malloc_r+0x58>
    5820:	425a      	negs	r2, r3
    5822:	50e2      	str	r2, [r4, r3]
    5824:	e7e4      	b.n	57f0 <_malloc_r+0x58>
    5826:	684b      	ldr	r3, [r1, #4]
    5828:	6063      	str	r3, [r4, #4]
    582a:	000c      	movs	r4, r1
    582c:	e7ee      	b.n	580c <_malloc_r+0x74>
    582e:	000c      	movs	r4, r1
    5830:	6849      	ldr	r1, [r1, #4]
    5832:	e7c2      	b.n	57ba <_malloc_r+0x22>
    5834:	2303      	movs	r3, #3
    5836:	1cc4      	adds	r4, r0, #3
    5838:	439c      	bics	r4, r3
    583a:	42a0      	cmp	r0, r4
    583c:	d0e0      	beq.n	5800 <_malloc_r+0x68>
    583e:	1a21      	subs	r1, r4, r0
    5840:	0030      	movs	r0, r6
    5842:	f000 fe81 	bl	6548 <_sbrk_r>
    5846:	1c43      	adds	r3, r0, #1
    5848:	d1da      	bne.n	5800 <_malloc_r+0x68>
    584a:	e7c6      	b.n	57da <_malloc_r+0x42>
    584c:	200002b8 	.word	0x200002b8
    5850:	200002bc 	.word	0x200002bc

00005854 <__sfputc_r>:
    5854:	6893      	ldr	r3, [r2, #8]
    5856:	b510      	push	{r4, lr}
    5858:	3b01      	subs	r3, #1
    585a:	6093      	str	r3, [r2, #8]
    585c:	2b00      	cmp	r3, #0
    585e:	da05      	bge.n	586c <__sfputc_r+0x18>
    5860:	6994      	ldr	r4, [r2, #24]
    5862:	42a3      	cmp	r3, r4
    5864:	db08      	blt.n	5878 <__sfputc_r+0x24>
    5866:	b2cb      	uxtb	r3, r1
    5868:	2b0a      	cmp	r3, #10
    586a:	d005      	beq.n	5878 <__sfputc_r+0x24>
    586c:	6813      	ldr	r3, [r2, #0]
    586e:	1c58      	adds	r0, r3, #1
    5870:	6010      	str	r0, [r2, #0]
    5872:	7019      	strb	r1, [r3, #0]
    5874:	b2c8      	uxtb	r0, r1
    5876:	bd10      	pop	{r4, pc}
    5878:	f7ff fc22 	bl	50c0 <__swbuf_r>
    587c:	e7fb      	b.n	5876 <__sfputc_r+0x22>

0000587e <__sfputs_r>:
    587e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5880:	0006      	movs	r6, r0
    5882:	000f      	movs	r7, r1
    5884:	0014      	movs	r4, r2
    5886:	18d5      	adds	r5, r2, r3
    5888:	42ac      	cmp	r4, r5
    588a:	d101      	bne.n	5890 <__sfputs_r+0x12>
    588c:	2000      	movs	r0, #0
    588e:	e007      	b.n	58a0 <__sfputs_r+0x22>
    5890:	7821      	ldrb	r1, [r4, #0]
    5892:	003a      	movs	r2, r7
    5894:	0030      	movs	r0, r6
    5896:	f7ff ffdd 	bl	5854 <__sfputc_r>
    589a:	3401      	adds	r4, #1
    589c:	1c43      	adds	r3, r0, #1
    589e:	d1f3      	bne.n	5888 <__sfputs_r+0xa>
    58a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000058a4 <_vfiprintf_r>:
    58a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58a6:	b09f      	sub	sp, #124	; 0x7c
    58a8:	0006      	movs	r6, r0
    58aa:	000f      	movs	r7, r1
    58ac:	0014      	movs	r4, r2
    58ae:	9305      	str	r3, [sp, #20]
    58b0:	2800      	cmp	r0, #0
    58b2:	d004      	beq.n	58be <_vfiprintf_r+0x1a>
    58b4:	6983      	ldr	r3, [r0, #24]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d101      	bne.n	58be <_vfiprintf_r+0x1a>
    58ba:	f7ff fdd9 	bl	5470 <__sinit>
    58be:	4b7f      	ldr	r3, [pc, #508]	; (5abc <_vfiprintf_r+0x218>)
    58c0:	429f      	cmp	r7, r3
    58c2:	d15c      	bne.n	597e <_vfiprintf_r+0xda>
    58c4:	6877      	ldr	r7, [r6, #4]
    58c6:	89bb      	ldrh	r3, [r7, #12]
    58c8:	071b      	lsls	r3, r3, #28
    58ca:	d562      	bpl.n	5992 <_vfiprintf_r+0xee>
    58cc:	693b      	ldr	r3, [r7, #16]
    58ce:	2b00      	cmp	r3, #0
    58d0:	d05f      	beq.n	5992 <_vfiprintf_r+0xee>
    58d2:	2300      	movs	r3, #0
    58d4:	ad06      	add	r5, sp, #24
    58d6:	616b      	str	r3, [r5, #20]
    58d8:	3320      	adds	r3, #32
    58da:	766b      	strb	r3, [r5, #25]
    58dc:	3310      	adds	r3, #16
    58de:	76ab      	strb	r3, [r5, #26]
    58e0:	9402      	str	r4, [sp, #8]
    58e2:	9c02      	ldr	r4, [sp, #8]
    58e4:	7823      	ldrb	r3, [r4, #0]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d15d      	bne.n	59a6 <_vfiprintf_r+0x102>
    58ea:	9b02      	ldr	r3, [sp, #8]
    58ec:	1ae3      	subs	r3, r4, r3
    58ee:	9304      	str	r3, [sp, #16]
    58f0:	d00d      	beq.n	590e <_vfiprintf_r+0x6a>
    58f2:	9b04      	ldr	r3, [sp, #16]
    58f4:	9a02      	ldr	r2, [sp, #8]
    58f6:	0039      	movs	r1, r7
    58f8:	0030      	movs	r0, r6
    58fa:	f7ff ffc0 	bl	587e <__sfputs_r>
    58fe:	1c43      	adds	r3, r0, #1
    5900:	d100      	bne.n	5904 <_vfiprintf_r+0x60>
    5902:	e0cc      	b.n	5a9e <_vfiprintf_r+0x1fa>
    5904:	696a      	ldr	r2, [r5, #20]
    5906:	9b04      	ldr	r3, [sp, #16]
    5908:	4694      	mov	ip, r2
    590a:	4463      	add	r3, ip
    590c:	616b      	str	r3, [r5, #20]
    590e:	7823      	ldrb	r3, [r4, #0]
    5910:	2b00      	cmp	r3, #0
    5912:	d100      	bne.n	5916 <_vfiprintf_r+0x72>
    5914:	e0c3      	b.n	5a9e <_vfiprintf_r+0x1fa>
    5916:	2201      	movs	r2, #1
    5918:	2300      	movs	r3, #0
    591a:	4252      	negs	r2, r2
    591c:	606a      	str	r2, [r5, #4]
    591e:	a902      	add	r1, sp, #8
    5920:	3254      	adds	r2, #84	; 0x54
    5922:	1852      	adds	r2, r2, r1
    5924:	3401      	adds	r4, #1
    5926:	602b      	str	r3, [r5, #0]
    5928:	60eb      	str	r3, [r5, #12]
    592a:	60ab      	str	r3, [r5, #8]
    592c:	7013      	strb	r3, [r2, #0]
    592e:	65ab      	str	r3, [r5, #88]	; 0x58
    5930:	7821      	ldrb	r1, [r4, #0]
    5932:	2205      	movs	r2, #5
    5934:	4862      	ldr	r0, [pc, #392]	; (5ac0 <_vfiprintf_r+0x21c>)
    5936:	f001 f849 	bl	69cc <memchr>
    593a:	1c63      	adds	r3, r4, #1
    593c:	469c      	mov	ip, r3
    593e:	2800      	cmp	r0, #0
    5940:	d135      	bne.n	59ae <_vfiprintf_r+0x10a>
    5942:	6829      	ldr	r1, [r5, #0]
    5944:	06cb      	lsls	r3, r1, #27
    5946:	d504      	bpl.n	5952 <_vfiprintf_r+0xae>
    5948:	2353      	movs	r3, #83	; 0x53
    594a:	aa02      	add	r2, sp, #8
    594c:	3020      	adds	r0, #32
    594e:	189b      	adds	r3, r3, r2
    5950:	7018      	strb	r0, [r3, #0]
    5952:	070b      	lsls	r3, r1, #28
    5954:	d504      	bpl.n	5960 <_vfiprintf_r+0xbc>
    5956:	2353      	movs	r3, #83	; 0x53
    5958:	202b      	movs	r0, #43	; 0x2b
    595a:	aa02      	add	r2, sp, #8
    595c:	189b      	adds	r3, r3, r2
    595e:	7018      	strb	r0, [r3, #0]
    5960:	7823      	ldrb	r3, [r4, #0]
    5962:	2b2a      	cmp	r3, #42	; 0x2a
    5964:	d02c      	beq.n	59c0 <_vfiprintf_r+0x11c>
    5966:	2000      	movs	r0, #0
    5968:	210a      	movs	r1, #10
    596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    596c:	7822      	ldrb	r2, [r4, #0]
    596e:	3a30      	subs	r2, #48	; 0x30
    5970:	2a09      	cmp	r2, #9
    5972:	d800      	bhi.n	5976 <_vfiprintf_r+0xd2>
    5974:	e06b      	b.n	5a4e <_vfiprintf_r+0x1aa>
    5976:	2800      	cmp	r0, #0
    5978:	d02a      	beq.n	59d0 <_vfiprintf_r+0x12c>
    597a:	9309      	str	r3, [sp, #36]	; 0x24
    597c:	e028      	b.n	59d0 <_vfiprintf_r+0x12c>
    597e:	4b51      	ldr	r3, [pc, #324]	; (5ac4 <_vfiprintf_r+0x220>)
    5980:	429f      	cmp	r7, r3
    5982:	d101      	bne.n	5988 <_vfiprintf_r+0xe4>
    5984:	68b7      	ldr	r7, [r6, #8]
    5986:	e79e      	b.n	58c6 <_vfiprintf_r+0x22>
    5988:	4b4f      	ldr	r3, [pc, #316]	; (5ac8 <_vfiprintf_r+0x224>)
    598a:	429f      	cmp	r7, r3
    598c:	d19b      	bne.n	58c6 <_vfiprintf_r+0x22>
    598e:	68f7      	ldr	r7, [r6, #12]
    5990:	e799      	b.n	58c6 <_vfiprintf_r+0x22>
    5992:	0039      	movs	r1, r7
    5994:	0030      	movs	r0, r6
    5996:	f7ff fbe9 	bl	516c <__swsetup_r>
    599a:	2800      	cmp	r0, #0
    599c:	d099      	beq.n	58d2 <_vfiprintf_r+0x2e>
    599e:	2001      	movs	r0, #1
    59a0:	4240      	negs	r0, r0
    59a2:	b01f      	add	sp, #124	; 0x7c
    59a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59a6:	2b25      	cmp	r3, #37	; 0x25
    59a8:	d09f      	beq.n	58ea <_vfiprintf_r+0x46>
    59aa:	3401      	adds	r4, #1
    59ac:	e79a      	b.n	58e4 <_vfiprintf_r+0x40>
    59ae:	4b44      	ldr	r3, [pc, #272]	; (5ac0 <_vfiprintf_r+0x21c>)
    59b0:	6829      	ldr	r1, [r5, #0]
    59b2:	1ac0      	subs	r0, r0, r3
    59b4:	2301      	movs	r3, #1
    59b6:	4083      	lsls	r3, r0
    59b8:	430b      	orrs	r3, r1
    59ba:	602b      	str	r3, [r5, #0]
    59bc:	4664      	mov	r4, ip
    59be:	e7b7      	b.n	5930 <_vfiprintf_r+0x8c>
    59c0:	9b05      	ldr	r3, [sp, #20]
    59c2:	1d18      	adds	r0, r3, #4
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	9005      	str	r0, [sp, #20]
    59c8:	2b00      	cmp	r3, #0
    59ca:	db3a      	blt.n	5a42 <_vfiprintf_r+0x19e>
    59cc:	9309      	str	r3, [sp, #36]	; 0x24
    59ce:	4664      	mov	r4, ip
    59d0:	7823      	ldrb	r3, [r4, #0]
    59d2:	2b2e      	cmp	r3, #46	; 0x2e
    59d4:	d10b      	bne.n	59ee <_vfiprintf_r+0x14a>
    59d6:	7863      	ldrb	r3, [r4, #1]
    59d8:	1c62      	adds	r2, r4, #1
    59da:	2b2a      	cmp	r3, #42	; 0x2a
    59dc:	d13f      	bne.n	5a5e <_vfiprintf_r+0x1ba>
    59de:	9b05      	ldr	r3, [sp, #20]
    59e0:	3402      	adds	r4, #2
    59e2:	1d1a      	adds	r2, r3, #4
    59e4:	681b      	ldr	r3, [r3, #0]
    59e6:	9205      	str	r2, [sp, #20]
    59e8:	2b00      	cmp	r3, #0
    59ea:	db35      	blt.n	5a58 <_vfiprintf_r+0x1b4>
    59ec:	9307      	str	r3, [sp, #28]
    59ee:	7821      	ldrb	r1, [r4, #0]
    59f0:	2203      	movs	r2, #3
    59f2:	4836      	ldr	r0, [pc, #216]	; (5acc <_vfiprintf_r+0x228>)
    59f4:	f000 ffea 	bl	69cc <memchr>
    59f8:	2800      	cmp	r0, #0
    59fa:	d007      	beq.n	5a0c <_vfiprintf_r+0x168>
    59fc:	4b33      	ldr	r3, [pc, #204]	; (5acc <_vfiprintf_r+0x228>)
    59fe:	682a      	ldr	r2, [r5, #0]
    5a00:	1ac0      	subs	r0, r0, r3
    5a02:	2340      	movs	r3, #64	; 0x40
    5a04:	4083      	lsls	r3, r0
    5a06:	4313      	orrs	r3, r2
    5a08:	602b      	str	r3, [r5, #0]
    5a0a:	3401      	adds	r4, #1
    5a0c:	7821      	ldrb	r1, [r4, #0]
    5a0e:	1c63      	adds	r3, r4, #1
    5a10:	2206      	movs	r2, #6
    5a12:	482f      	ldr	r0, [pc, #188]	; (5ad0 <_vfiprintf_r+0x22c>)
    5a14:	9302      	str	r3, [sp, #8]
    5a16:	7629      	strb	r1, [r5, #24]
    5a18:	f000 ffd8 	bl	69cc <memchr>
    5a1c:	2800      	cmp	r0, #0
    5a1e:	d044      	beq.n	5aaa <_vfiprintf_r+0x206>
    5a20:	4b2c      	ldr	r3, [pc, #176]	; (5ad4 <_vfiprintf_r+0x230>)
    5a22:	2b00      	cmp	r3, #0
    5a24:	d12f      	bne.n	5a86 <_vfiprintf_r+0x1e2>
    5a26:	6829      	ldr	r1, [r5, #0]
    5a28:	9b05      	ldr	r3, [sp, #20]
    5a2a:	2207      	movs	r2, #7
    5a2c:	05c9      	lsls	r1, r1, #23
    5a2e:	d528      	bpl.n	5a82 <_vfiprintf_r+0x1de>
    5a30:	189b      	adds	r3, r3, r2
    5a32:	4393      	bics	r3, r2
    5a34:	3308      	adds	r3, #8
    5a36:	9305      	str	r3, [sp, #20]
    5a38:	696b      	ldr	r3, [r5, #20]
    5a3a:	9a03      	ldr	r2, [sp, #12]
    5a3c:	189b      	adds	r3, r3, r2
    5a3e:	616b      	str	r3, [r5, #20]
    5a40:	e74f      	b.n	58e2 <_vfiprintf_r+0x3e>
    5a42:	425b      	negs	r3, r3
    5a44:	60eb      	str	r3, [r5, #12]
    5a46:	2302      	movs	r3, #2
    5a48:	430b      	orrs	r3, r1
    5a4a:	602b      	str	r3, [r5, #0]
    5a4c:	e7bf      	b.n	59ce <_vfiprintf_r+0x12a>
    5a4e:	434b      	muls	r3, r1
    5a50:	3401      	adds	r4, #1
    5a52:	189b      	adds	r3, r3, r2
    5a54:	2001      	movs	r0, #1
    5a56:	e789      	b.n	596c <_vfiprintf_r+0xc8>
    5a58:	2301      	movs	r3, #1
    5a5a:	425b      	negs	r3, r3
    5a5c:	e7c6      	b.n	59ec <_vfiprintf_r+0x148>
    5a5e:	2300      	movs	r3, #0
    5a60:	0014      	movs	r4, r2
    5a62:	200a      	movs	r0, #10
    5a64:	001a      	movs	r2, r3
    5a66:	606b      	str	r3, [r5, #4]
    5a68:	7821      	ldrb	r1, [r4, #0]
    5a6a:	3930      	subs	r1, #48	; 0x30
    5a6c:	2909      	cmp	r1, #9
    5a6e:	d903      	bls.n	5a78 <_vfiprintf_r+0x1d4>
    5a70:	2b00      	cmp	r3, #0
    5a72:	d0bc      	beq.n	59ee <_vfiprintf_r+0x14a>
    5a74:	9207      	str	r2, [sp, #28]
    5a76:	e7ba      	b.n	59ee <_vfiprintf_r+0x14a>
    5a78:	4342      	muls	r2, r0
    5a7a:	3401      	adds	r4, #1
    5a7c:	1852      	adds	r2, r2, r1
    5a7e:	2301      	movs	r3, #1
    5a80:	e7f2      	b.n	5a68 <_vfiprintf_r+0x1c4>
    5a82:	3307      	adds	r3, #7
    5a84:	e7d5      	b.n	5a32 <_vfiprintf_r+0x18e>
    5a86:	ab05      	add	r3, sp, #20
    5a88:	9300      	str	r3, [sp, #0]
    5a8a:	003a      	movs	r2, r7
    5a8c:	4b12      	ldr	r3, [pc, #72]	; (5ad8 <_vfiprintf_r+0x234>)
    5a8e:	0029      	movs	r1, r5
    5a90:	0030      	movs	r0, r6
    5a92:	e000      	b.n	5a96 <_vfiprintf_r+0x1f2>
    5a94:	bf00      	nop
    5a96:	9003      	str	r0, [sp, #12]
    5a98:	9b03      	ldr	r3, [sp, #12]
    5a9a:	3301      	adds	r3, #1
    5a9c:	d1cc      	bne.n	5a38 <_vfiprintf_r+0x194>
    5a9e:	89bb      	ldrh	r3, [r7, #12]
    5aa0:	065b      	lsls	r3, r3, #25
    5aa2:	d500      	bpl.n	5aa6 <_vfiprintf_r+0x202>
    5aa4:	e77b      	b.n	599e <_vfiprintf_r+0xfa>
    5aa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5aa8:	e77b      	b.n	59a2 <_vfiprintf_r+0xfe>
    5aaa:	ab05      	add	r3, sp, #20
    5aac:	9300      	str	r3, [sp, #0]
    5aae:	003a      	movs	r2, r7
    5ab0:	4b09      	ldr	r3, [pc, #36]	; (5ad8 <_vfiprintf_r+0x234>)
    5ab2:	0029      	movs	r1, r5
    5ab4:	0030      	movs	r0, r6
    5ab6:	f000 f87f 	bl	5bb8 <_printf_i>
    5aba:	e7ec      	b.n	5a96 <_vfiprintf_r+0x1f2>
    5abc:	000071d0 	.word	0x000071d0
    5ac0:	0000721a 	.word	0x0000721a
    5ac4:	000071f0 	.word	0x000071f0
    5ac8:	000071b0 	.word	0x000071b0
    5acc:	00007220 	.word	0x00007220
    5ad0:	00007224 	.word	0x00007224
    5ad4:	00000000 	.word	0x00000000
    5ad8:	0000587f 	.word	0x0000587f

00005adc <_printf_common>:
    5adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ade:	0015      	movs	r5, r2
    5ae0:	9301      	str	r3, [sp, #4]
    5ae2:	688a      	ldr	r2, [r1, #8]
    5ae4:	690b      	ldr	r3, [r1, #16]
    5ae6:	9000      	str	r0, [sp, #0]
    5ae8:	000c      	movs	r4, r1
    5aea:	4293      	cmp	r3, r2
    5aec:	da00      	bge.n	5af0 <_printf_common+0x14>
    5aee:	0013      	movs	r3, r2
    5af0:	0022      	movs	r2, r4
    5af2:	602b      	str	r3, [r5, #0]
    5af4:	3243      	adds	r2, #67	; 0x43
    5af6:	7812      	ldrb	r2, [r2, #0]
    5af8:	2a00      	cmp	r2, #0
    5afa:	d001      	beq.n	5b00 <_printf_common+0x24>
    5afc:	3301      	adds	r3, #1
    5afe:	602b      	str	r3, [r5, #0]
    5b00:	6823      	ldr	r3, [r4, #0]
    5b02:	069b      	lsls	r3, r3, #26
    5b04:	d502      	bpl.n	5b0c <_printf_common+0x30>
    5b06:	682b      	ldr	r3, [r5, #0]
    5b08:	3302      	adds	r3, #2
    5b0a:	602b      	str	r3, [r5, #0]
    5b0c:	2706      	movs	r7, #6
    5b0e:	6823      	ldr	r3, [r4, #0]
    5b10:	401f      	ands	r7, r3
    5b12:	d027      	beq.n	5b64 <_printf_common+0x88>
    5b14:	0023      	movs	r3, r4
    5b16:	3343      	adds	r3, #67	; 0x43
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	1e5a      	subs	r2, r3, #1
    5b1c:	4193      	sbcs	r3, r2
    5b1e:	6822      	ldr	r2, [r4, #0]
    5b20:	0692      	lsls	r2, r2, #26
    5b22:	d430      	bmi.n	5b86 <_printf_common+0xaa>
    5b24:	0022      	movs	r2, r4
    5b26:	9901      	ldr	r1, [sp, #4]
    5b28:	3243      	adds	r2, #67	; 0x43
    5b2a:	9800      	ldr	r0, [sp, #0]
    5b2c:	9e08      	ldr	r6, [sp, #32]
    5b2e:	47b0      	blx	r6
    5b30:	1c43      	adds	r3, r0, #1
    5b32:	d025      	beq.n	5b80 <_printf_common+0xa4>
    5b34:	2306      	movs	r3, #6
    5b36:	6820      	ldr	r0, [r4, #0]
    5b38:	682a      	ldr	r2, [r5, #0]
    5b3a:	68e1      	ldr	r1, [r4, #12]
    5b3c:	4003      	ands	r3, r0
    5b3e:	2500      	movs	r5, #0
    5b40:	2b04      	cmp	r3, #4
    5b42:	d103      	bne.n	5b4c <_printf_common+0x70>
    5b44:	1a8d      	subs	r5, r1, r2
    5b46:	43eb      	mvns	r3, r5
    5b48:	17db      	asrs	r3, r3, #31
    5b4a:	401d      	ands	r5, r3
    5b4c:	68a3      	ldr	r3, [r4, #8]
    5b4e:	6922      	ldr	r2, [r4, #16]
    5b50:	4293      	cmp	r3, r2
    5b52:	dd01      	ble.n	5b58 <_printf_common+0x7c>
    5b54:	1a9b      	subs	r3, r3, r2
    5b56:	18ed      	adds	r5, r5, r3
    5b58:	2700      	movs	r7, #0
    5b5a:	42bd      	cmp	r5, r7
    5b5c:	d120      	bne.n	5ba0 <_printf_common+0xc4>
    5b5e:	2000      	movs	r0, #0
    5b60:	e010      	b.n	5b84 <_printf_common+0xa8>
    5b62:	3701      	adds	r7, #1
    5b64:	68e3      	ldr	r3, [r4, #12]
    5b66:	682a      	ldr	r2, [r5, #0]
    5b68:	1a9b      	subs	r3, r3, r2
    5b6a:	429f      	cmp	r7, r3
    5b6c:	dad2      	bge.n	5b14 <_printf_common+0x38>
    5b6e:	0022      	movs	r2, r4
    5b70:	2301      	movs	r3, #1
    5b72:	3219      	adds	r2, #25
    5b74:	9901      	ldr	r1, [sp, #4]
    5b76:	9800      	ldr	r0, [sp, #0]
    5b78:	9e08      	ldr	r6, [sp, #32]
    5b7a:	47b0      	blx	r6
    5b7c:	1c43      	adds	r3, r0, #1
    5b7e:	d1f0      	bne.n	5b62 <_printf_common+0x86>
    5b80:	2001      	movs	r0, #1
    5b82:	4240      	negs	r0, r0
    5b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5b86:	2030      	movs	r0, #48	; 0x30
    5b88:	18e1      	adds	r1, r4, r3
    5b8a:	3143      	adds	r1, #67	; 0x43
    5b8c:	7008      	strb	r0, [r1, #0]
    5b8e:	0021      	movs	r1, r4
    5b90:	1c5a      	adds	r2, r3, #1
    5b92:	3145      	adds	r1, #69	; 0x45
    5b94:	7809      	ldrb	r1, [r1, #0]
    5b96:	18a2      	adds	r2, r4, r2
    5b98:	3243      	adds	r2, #67	; 0x43
    5b9a:	3302      	adds	r3, #2
    5b9c:	7011      	strb	r1, [r2, #0]
    5b9e:	e7c1      	b.n	5b24 <_printf_common+0x48>
    5ba0:	0022      	movs	r2, r4
    5ba2:	2301      	movs	r3, #1
    5ba4:	321a      	adds	r2, #26
    5ba6:	9901      	ldr	r1, [sp, #4]
    5ba8:	9800      	ldr	r0, [sp, #0]
    5baa:	9e08      	ldr	r6, [sp, #32]
    5bac:	47b0      	blx	r6
    5bae:	1c43      	adds	r3, r0, #1
    5bb0:	d0e6      	beq.n	5b80 <_printf_common+0xa4>
    5bb2:	3701      	adds	r7, #1
    5bb4:	e7d1      	b.n	5b5a <_printf_common+0x7e>
	...

00005bb8 <_printf_i>:
    5bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bba:	b08b      	sub	sp, #44	; 0x2c
    5bbc:	9206      	str	r2, [sp, #24]
    5bbe:	000a      	movs	r2, r1
    5bc0:	3243      	adds	r2, #67	; 0x43
    5bc2:	9307      	str	r3, [sp, #28]
    5bc4:	9005      	str	r0, [sp, #20]
    5bc6:	9204      	str	r2, [sp, #16]
    5bc8:	7e0a      	ldrb	r2, [r1, #24]
    5bca:	000c      	movs	r4, r1
    5bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5bce:	2a6e      	cmp	r2, #110	; 0x6e
    5bd0:	d100      	bne.n	5bd4 <_printf_i+0x1c>
    5bd2:	e08f      	b.n	5cf4 <_printf_i+0x13c>
    5bd4:	d817      	bhi.n	5c06 <_printf_i+0x4e>
    5bd6:	2a63      	cmp	r2, #99	; 0x63
    5bd8:	d02c      	beq.n	5c34 <_printf_i+0x7c>
    5bda:	d808      	bhi.n	5bee <_printf_i+0x36>
    5bdc:	2a00      	cmp	r2, #0
    5bde:	d100      	bne.n	5be2 <_printf_i+0x2a>
    5be0:	e099      	b.n	5d16 <_printf_i+0x15e>
    5be2:	2a58      	cmp	r2, #88	; 0x58
    5be4:	d054      	beq.n	5c90 <_printf_i+0xd8>
    5be6:	0026      	movs	r6, r4
    5be8:	3642      	adds	r6, #66	; 0x42
    5bea:	7032      	strb	r2, [r6, #0]
    5bec:	e029      	b.n	5c42 <_printf_i+0x8a>
    5bee:	2a64      	cmp	r2, #100	; 0x64
    5bf0:	d001      	beq.n	5bf6 <_printf_i+0x3e>
    5bf2:	2a69      	cmp	r2, #105	; 0x69
    5bf4:	d1f7      	bne.n	5be6 <_printf_i+0x2e>
    5bf6:	6821      	ldr	r1, [r4, #0]
    5bf8:	681a      	ldr	r2, [r3, #0]
    5bfa:	0608      	lsls	r0, r1, #24
    5bfc:	d523      	bpl.n	5c46 <_printf_i+0x8e>
    5bfe:	1d11      	adds	r1, r2, #4
    5c00:	6019      	str	r1, [r3, #0]
    5c02:	6815      	ldr	r5, [r2, #0]
    5c04:	e025      	b.n	5c52 <_printf_i+0x9a>
    5c06:	2a73      	cmp	r2, #115	; 0x73
    5c08:	d100      	bne.n	5c0c <_printf_i+0x54>
    5c0a:	e088      	b.n	5d1e <_printf_i+0x166>
    5c0c:	d808      	bhi.n	5c20 <_printf_i+0x68>
    5c0e:	2a6f      	cmp	r2, #111	; 0x6f
    5c10:	d029      	beq.n	5c66 <_printf_i+0xae>
    5c12:	2a70      	cmp	r2, #112	; 0x70
    5c14:	d1e7      	bne.n	5be6 <_printf_i+0x2e>
    5c16:	2220      	movs	r2, #32
    5c18:	6809      	ldr	r1, [r1, #0]
    5c1a:	430a      	orrs	r2, r1
    5c1c:	6022      	str	r2, [r4, #0]
    5c1e:	e003      	b.n	5c28 <_printf_i+0x70>
    5c20:	2a75      	cmp	r2, #117	; 0x75
    5c22:	d020      	beq.n	5c66 <_printf_i+0xae>
    5c24:	2a78      	cmp	r2, #120	; 0x78
    5c26:	d1de      	bne.n	5be6 <_printf_i+0x2e>
    5c28:	0022      	movs	r2, r4
    5c2a:	2178      	movs	r1, #120	; 0x78
    5c2c:	3245      	adds	r2, #69	; 0x45
    5c2e:	7011      	strb	r1, [r2, #0]
    5c30:	4a6c      	ldr	r2, [pc, #432]	; (5de4 <_printf_i+0x22c>)
    5c32:	e030      	b.n	5c96 <_printf_i+0xde>
    5c34:	000e      	movs	r6, r1
    5c36:	681a      	ldr	r2, [r3, #0]
    5c38:	3642      	adds	r6, #66	; 0x42
    5c3a:	1d11      	adds	r1, r2, #4
    5c3c:	6019      	str	r1, [r3, #0]
    5c3e:	6813      	ldr	r3, [r2, #0]
    5c40:	7033      	strb	r3, [r6, #0]
    5c42:	2301      	movs	r3, #1
    5c44:	e079      	b.n	5d3a <_printf_i+0x182>
    5c46:	0649      	lsls	r1, r1, #25
    5c48:	d5d9      	bpl.n	5bfe <_printf_i+0x46>
    5c4a:	1d11      	adds	r1, r2, #4
    5c4c:	6019      	str	r1, [r3, #0]
    5c4e:	2300      	movs	r3, #0
    5c50:	5ed5      	ldrsh	r5, [r2, r3]
    5c52:	2d00      	cmp	r5, #0
    5c54:	da03      	bge.n	5c5e <_printf_i+0xa6>
    5c56:	232d      	movs	r3, #45	; 0x2d
    5c58:	9a04      	ldr	r2, [sp, #16]
    5c5a:	426d      	negs	r5, r5
    5c5c:	7013      	strb	r3, [r2, #0]
    5c5e:	4b62      	ldr	r3, [pc, #392]	; (5de8 <_printf_i+0x230>)
    5c60:	270a      	movs	r7, #10
    5c62:	9303      	str	r3, [sp, #12]
    5c64:	e02f      	b.n	5cc6 <_printf_i+0x10e>
    5c66:	6820      	ldr	r0, [r4, #0]
    5c68:	6819      	ldr	r1, [r3, #0]
    5c6a:	0605      	lsls	r5, r0, #24
    5c6c:	d503      	bpl.n	5c76 <_printf_i+0xbe>
    5c6e:	1d08      	adds	r0, r1, #4
    5c70:	6018      	str	r0, [r3, #0]
    5c72:	680d      	ldr	r5, [r1, #0]
    5c74:	e005      	b.n	5c82 <_printf_i+0xca>
    5c76:	0640      	lsls	r0, r0, #25
    5c78:	d5f9      	bpl.n	5c6e <_printf_i+0xb6>
    5c7a:	680d      	ldr	r5, [r1, #0]
    5c7c:	1d08      	adds	r0, r1, #4
    5c7e:	6018      	str	r0, [r3, #0]
    5c80:	b2ad      	uxth	r5, r5
    5c82:	4b59      	ldr	r3, [pc, #356]	; (5de8 <_printf_i+0x230>)
    5c84:	2708      	movs	r7, #8
    5c86:	9303      	str	r3, [sp, #12]
    5c88:	2a6f      	cmp	r2, #111	; 0x6f
    5c8a:	d018      	beq.n	5cbe <_printf_i+0x106>
    5c8c:	270a      	movs	r7, #10
    5c8e:	e016      	b.n	5cbe <_printf_i+0x106>
    5c90:	3145      	adds	r1, #69	; 0x45
    5c92:	700a      	strb	r2, [r1, #0]
    5c94:	4a54      	ldr	r2, [pc, #336]	; (5de8 <_printf_i+0x230>)
    5c96:	9203      	str	r2, [sp, #12]
    5c98:	681a      	ldr	r2, [r3, #0]
    5c9a:	6821      	ldr	r1, [r4, #0]
    5c9c:	1d10      	adds	r0, r2, #4
    5c9e:	6018      	str	r0, [r3, #0]
    5ca0:	6815      	ldr	r5, [r2, #0]
    5ca2:	0608      	lsls	r0, r1, #24
    5ca4:	d522      	bpl.n	5cec <_printf_i+0x134>
    5ca6:	07cb      	lsls	r3, r1, #31
    5ca8:	d502      	bpl.n	5cb0 <_printf_i+0xf8>
    5caa:	2320      	movs	r3, #32
    5cac:	4319      	orrs	r1, r3
    5cae:	6021      	str	r1, [r4, #0]
    5cb0:	2710      	movs	r7, #16
    5cb2:	2d00      	cmp	r5, #0
    5cb4:	d103      	bne.n	5cbe <_printf_i+0x106>
    5cb6:	2320      	movs	r3, #32
    5cb8:	6822      	ldr	r2, [r4, #0]
    5cba:	439a      	bics	r2, r3
    5cbc:	6022      	str	r2, [r4, #0]
    5cbe:	0023      	movs	r3, r4
    5cc0:	2200      	movs	r2, #0
    5cc2:	3343      	adds	r3, #67	; 0x43
    5cc4:	701a      	strb	r2, [r3, #0]
    5cc6:	6863      	ldr	r3, [r4, #4]
    5cc8:	60a3      	str	r3, [r4, #8]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	db5c      	blt.n	5d88 <_printf_i+0x1d0>
    5cce:	2204      	movs	r2, #4
    5cd0:	6821      	ldr	r1, [r4, #0]
    5cd2:	4391      	bics	r1, r2
    5cd4:	6021      	str	r1, [r4, #0]
    5cd6:	2d00      	cmp	r5, #0
    5cd8:	d158      	bne.n	5d8c <_printf_i+0x1d4>
    5cda:	9e04      	ldr	r6, [sp, #16]
    5cdc:	2b00      	cmp	r3, #0
    5cde:	d064      	beq.n	5daa <_printf_i+0x1f2>
    5ce0:	0026      	movs	r6, r4
    5ce2:	9b03      	ldr	r3, [sp, #12]
    5ce4:	3642      	adds	r6, #66	; 0x42
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	7033      	strb	r3, [r6, #0]
    5cea:	e05e      	b.n	5daa <_printf_i+0x1f2>
    5cec:	0648      	lsls	r0, r1, #25
    5cee:	d5da      	bpl.n	5ca6 <_printf_i+0xee>
    5cf0:	b2ad      	uxth	r5, r5
    5cf2:	e7d8      	b.n	5ca6 <_printf_i+0xee>
    5cf4:	6809      	ldr	r1, [r1, #0]
    5cf6:	681a      	ldr	r2, [r3, #0]
    5cf8:	0608      	lsls	r0, r1, #24
    5cfa:	d505      	bpl.n	5d08 <_printf_i+0x150>
    5cfc:	1d11      	adds	r1, r2, #4
    5cfe:	6019      	str	r1, [r3, #0]
    5d00:	6813      	ldr	r3, [r2, #0]
    5d02:	6962      	ldr	r2, [r4, #20]
    5d04:	601a      	str	r2, [r3, #0]
    5d06:	e006      	b.n	5d16 <_printf_i+0x15e>
    5d08:	0649      	lsls	r1, r1, #25
    5d0a:	d5f7      	bpl.n	5cfc <_printf_i+0x144>
    5d0c:	1d11      	adds	r1, r2, #4
    5d0e:	6019      	str	r1, [r3, #0]
    5d10:	6813      	ldr	r3, [r2, #0]
    5d12:	8aa2      	ldrh	r2, [r4, #20]
    5d14:	801a      	strh	r2, [r3, #0]
    5d16:	2300      	movs	r3, #0
    5d18:	9e04      	ldr	r6, [sp, #16]
    5d1a:	6123      	str	r3, [r4, #16]
    5d1c:	e054      	b.n	5dc8 <_printf_i+0x210>
    5d1e:	681a      	ldr	r2, [r3, #0]
    5d20:	1d11      	adds	r1, r2, #4
    5d22:	6019      	str	r1, [r3, #0]
    5d24:	6816      	ldr	r6, [r2, #0]
    5d26:	2100      	movs	r1, #0
    5d28:	6862      	ldr	r2, [r4, #4]
    5d2a:	0030      	movs	r0, r6
    5d2c:	f000 fe4e 	bl	69cc <memchr>
    5d30:	2800      	cmp	r0, #0
    5d32:	d001      	beq.n	5d38 <_printf_i+0x180>
    5d34:	1b80      	subs	r0, r0, r6
    5d36:	6060      	str	r0, [r4, #4]
    5d38:	6863      	ldr	r3, [r4, #4]
    5d3a:	6123      	str	r3, [r4, #16]
    5d3c:	2300      	movs	r3, #0
    5d3e:	9a04      	ldr	r2, [sp, #16]
    5d40:	7013      	strb	r3, [r2, #0]
    5d42:	e041      	b.n	5dc8 <_printf_i+0x210>
    5d44:	6923      	ldr	r3, [r4, #16]
    5d46:	0032      	movs	r2, r6
    5d48:	9906      	ldr	r1, [sp, #24]
    5d4a:	9805      	ldr	r0, [sp, #20]
    5d4c:	9d07      	ldr	r5, [sp, #28]
    5d4e:	47a8      	blx	r5
    5d50:	1c43      	adds	r3, r0, #1
    5d52:	d043      	beq.n	5ddc <_printf_i+0x224>
    5d54:	6823      	ldr	r3, [r4, #0]
    5d56:	2500      	movs	r5, #0
    5d58:	079b      	lsls	r3, r3, #30
    5d5a:	d40f      	bmi.n	5d7c <_printf_i+0x1c4>
    5d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d5e:	68e0      	ldr	r0, [r4, #12]
    5d60:	4298      	cmp	r0, r3
    5d62:	da3d      	bge.n	5de0 <_printf_i+0x228>
    5d64:	0018      	movs	r0, r3
    5d66:	e03b      	b.n	5de0 <_printf_i+0x228>
    5d68:	0022      	movs	r2, r4
    5d6a:	2301      	movs	r3, #1
    5d6c:	3219      	adds	r2, #25
    5d6e:	9906      	ldr	r1, [sp, #24]
    5d70:	9805      	ldr	r0, [sp, #20]
    5d72:	9e07      	ldr	r6, [sp, #28]
    5d74:	47b0      	blx	r6
    5d76:	1c43      	adds	r3, r0, #1
    5d78:	d030      	beq.n	5ddc <_printf_i+0x224>
    5d7a:	3501      	adds	r5, #1
    5d7c:	68e3      	ldr	r3, [r4, #12]
    5d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5d80:	1a9b      	subs	r3, r3, r2
    5d82:	429d      	cmp	r5, r3
    5d84:	dbf0      	blt.n	5d68 <_printf_i+0x1b0>
    5d86:	e7e9      	b.n	5d5c <_printf_i+0x1a4>
    5d88:	2d00      	cmp	r5, #0
    5d8a:	d0a9      	beq.n	5ce0 <_printf_i+0x128>
    5d8c:	9e04      	ldr	r6, [sp, #16]
    5d8e:	0028      	movs	r0, r5
    5d90:	0039      	movs	r1, r7
    5d92:	f7fd f97d 	bl	3090 <__aeabi_uidivmod>
    5d96:	9b03      	ldr	r3, [sp, #12]
    5d98:	3e01      	subs	r6, #1
    5d9a:	5c5b      	ldrb	r3, [r3, r1]
    5d9c:	0028      	movs	r0, r5
    5d9e:	7033      	strb	r3, [r6, #0]
    5da0:	0039      	movs	r1, r7
    5da2:	f7fd f8ef 	bl	2f84 <__udivsi3>
    5da6:	1e05      	subs	r5, r0, #0
    5da8:	d1f1      	bne.n	5d8e <_printf_i+0x1d6>
    5daa:	2f08      	cmp	r7, #8
    5dac:	d109      	bne.n	5dc2 <_printf_i+0x20a>
    5dae:	6823      	ldr	r3, [r4, #0]
    5db0:	07db      	lsls	r3, r3, #31
    5db2:	d506      	bpl.n	5dc2 <_printf_i+0x20a>
    5db4:	6863      	ldr	r3, [r4, #4]
    5db6:	6922      	ldr	r2, [r4, #16]
    5db8:	4293      	cmp	r3, r2
    5dba:	dc02      	bgt.n	5dc2 <_printf_i+0x20a>
    5dbc:	2330      	movs	r3, #48	; 0x30
    5dbe:	3e01      	subs	r6, #1
    5dc0:	7033      	strb	r3, [r6, #0]
    5dc2:	9b04      	ldr	r3, [sp, #16]
    5dc4:	1b9b      	subs	r3, r3, r6
    5dc6:	6123      	str	r3, [r4, #16]
    5dc8:	9b07      	ldr	r3, [sp, #28]
    5dca:	aa09      	add	r2, sp, #36	; 0x24
    5dcc:	9300      	str	r3, [sp, #0]
    5dce:	0021      	movs	r1, r4
    5dd0:	9b06      	ldr	r3, [sp, #24]
    5dd2:	9805      	ldr	r0, [sp, #20]
    5dd4:	f7ff fe82 	bl	5adc <_printf_common>
    5dd8:	1c43      	adds	r3, r0, #1
    5dda:	d1b3      	bne.n	5d44 <_printf_i+0x18c>
    5ddc:	2001      	movs	r0, #1
    5dde:	4240      	negs	r0, r0
    5de0:	b00b      	add	sp, #44	; 0x2c
    5de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5de4:	0000723c 	.word	0x0000723c
    5de8:	0000722b 	.word	0x0000722b

00005dec <__svfiscanf_r>:
    5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dee:	4cbd      	ldr	r4, [pc, #756]	; (60e4 <__svfiscanf_r+0x2f8>)
    5df0:	2586      	movs	r5, #134	; 0x86
    5df2:	44a5      	add	sp, r4
    5df4:	9303      	str	r3, [sp, #12]
    5df6:	2300      	movs	r3, #0
    5df8:	9348      	str	r3, [sp, #288]	; 0x120
    5dfa:	9349      	str	r3, [sp, #292]	; 0x124
    5dfc:	ab05      	add	r3, sp, #20
    5dfe:	934a      	str	r3, [sp, #296]	; 0x128
    5e00:	23be      	movs	r3, #190	; 0xbe
    5e02:	006d      	lsls	r5, r5, #1
    5e04:	9000      	str	r0, [sp, #0]
    5e06:	000c      	movs	r4, r1
    5e08:	a802      	add	r0, sp, #8
    5e0a:	49b7      	ldr	r1, [pc, #732]	; (60e8 <__svfiscanf_r+0x2fc>)
    5e0c:	005b      	lsls	r3, r3, #1
    5e0e:	1940      	adds	r0, r0, r5
    5e10:	27c0      	movs	r7, #192	; 0xc0
    5e12:	50c1      	str	r1, [r0, r3]
    5e14:	ab02      	add	r3, sp, #8
    5e16:	195b      	adds	r3, r3, r5
    5e18:	0015      	movs	r5, r2
    5e1a:	49b4      	ldr	r1, [pc, #720]	; (60ec <__svfiscanf_r+0x300>)
    5e1c:	007f      	lsls	r7, r7, #1
    5e1e:	51d9      	str	r1, [r3, r7]
    5e20:	782b      	ldrb	r3, [r5, #0]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d100      	bne.n	5e28 <__svfiscanf_r+0x3c>
    5e26:	e15b      	b.n	60e0 <__svfiscanf_r+0x2f4>
    5e28:	f7ff fbd6 	bl	55d8 <__locale_ctype_ptr>
    5e2c:	2208      	movs	r2, #8
    5e2e:	782b      	ldrb	r3, [r5, #0]
    5e30:	18c0      	adds	r0, r0, r3
    5e32:	9301      	str	r3, [sp, #4]
    5e34:	7843      	ldrb	r3, [r0, #1]
    5e36:	4013      	ands	r3, r2
    5e38:	d141      	bne.n	5ebe <__svfiscanf_r+0xd2>
    5e3a:	9a01      	ldr	r2, [sp, #4]
    5e3c:	1c6e      	adds	r6, r5, #1
    5e3e:	2a25      	cmp	r2, #37	; 0x25
    5e40:	d000      	beq.n	5e44 <__svfiscanf_r+0x58>
    5e42:	e0a8      	b.n	5f96 <__svfiscanf_r+0x1aa>
    5e44:	9347      	str	r3, [sp, #284]	; 0x11c
    5e46:	9345      	str	r3, [sp, #276]	; 0x114
    5e48:	786b      	ldrb	r3, [r5, #1]
    5e4a:	2b2a      	cmp	r3, #42	; 0x2a
    5e4c:	d102      	bne.n	5e54 <__svfiscanf_r+0x68>
    5e4e:	3b1a      	subs	r3, #26
    5e50:	9345      	str	r3, [sp, #276]	; 0x114
    5e52:	1cae      	adds	r6, r5, #2
    5e54:	0035      	movs	r5, r6
    5e56:	220a      	movs	r2, #10
    5e58:	7829      	ldrb	r1, [r5, #0]
    5e5a:	000b      	movs	r3, r1
    5e5c:	3b30      	subs	r3, #48	; 0x30
    5e5e:	2b09      	cmp	r3, #9
    5e60:	d948      	bls.n	5ef4 <__svfiscanf_r+0x108>
    5e62:	4ea3      	ldr	r6, [pc, #652]	; (60f0 <__svfiscanf_r+0x304>)
    5e64:	2203      	movs	r2, #3
    5e66:	0030      	movs	r0, r6
    5e68:	f000 fdb0 	bl	69cc <memchr>
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d007      	beq.n	5e80 <__svfiscanf_r+0x94>
    5e70:	2301      	movs	r3, #1
    5e72:	1b80      	subs	r0, r0, r6
    5e74:	4083      	lsls	r3, r0
    5e76:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5e78:	3501      	adds	r5, #1
    5e7a:	4313      	orrs	r3, r2
    5e7c:	9202      	str	r2, [sp, #8]
    5e7e:	9345      	str	r3, [sp, #276]	; 0x114
    5e80:	782b      	ldrb	r3, [r5, #0]
    5e82:	1c6e      	adds	r6, r5, #1
    5e84:	2b67      	cmp	r3, #103	; 0x67
    5e86:	d858      	bhi.n	5f3a <__svfiscanf_r+0x14e>
    5e88:	2b65      	cmp	r3, #101	; 0x65
    5e8a:	d300      	bcc.n	5e8e <__svfiscanf_r+0xa2>
    5e8c:	e0dd      	b.n	604a <__svfiscanf_r+0x25e>
    5e8e:	2b47      	cmp	r3, #71	; 0x47
    5e90:	d838      	bhi.n	5f04 <__svfiscanf_r+0x118>
    5e92:	2b45      	cmp	r3, #69	; 0x45
    5e94:	d300      	bcc.n	5e98 <__svfiscanf_r+0xac>
    5e96:	e0d8      	b.n	604a <__svfiscanf_r+0x25e>
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d100      	bne.n	5e9e <__svfiscanf_r+0xb2>
    5e9c:	e11d      	b.n	60da <__svfiscanf_r+0x2ee>
    5e9e:	2b25      	cmp	r3, #37	; 0x25
    5ea0:	d079      	beq.n	5f96 <__svfiscanf_r+0x1aa>
    5ea2:	2303      	movs	r3, #3
    5ea4:	934b      	str	r3, [sp, #300]	; 0x12c
    5ea6:	3307      	adds	r3, #7
    5ea8:	9346      	str	r3, [sp, #280]	; 0x118
    5eaa:	e053      	b.n	5f54 <__svfiscanf_r+0x168>
    5eac:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5eae:	3301      	adds	r3, #1
    5eb0:	9201      	str	r2, [sp, #4]
    5eb2:	3201      	adds	r2, #1
    5eb4:	9249      	str	r2, [sp, #292]	; 0x124
    5eb6:	6862      	ldr	r2, [r4, #4]
    5eb8:	6023      	str	r3, [r4, #0]
    5eba:	3a01      	subs	r2, #1
    5ebc:	6062      	str	r2, [r4, #4]
    5ebe:	6863      	ldr	r3, [r4, #4]
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	dd0b      	ble.n	5edc <__svfiscanf_r+0xf0>
    5ec4:	f7ff fb88 	bl	55d8 <__locale_ctype_ptr>
    5ec8:	2108      	movs	r1, #8
    5eca:	6823      	ldr	r3, [r4, #0]
    5ecc:	781a      	ldrb	r2, [r3, #0]
    5ece:	1880      	adds	r0, r0, r2
    5ed0:	7842      	ldrb	r2, [r0, #1]
    5ed2:	420a      	tst	r2, r1
    5ed4:	d1ea      	bne.n	5eac <__svfiscanf_r+0xc0>
    5ed6:	1c6e      	adds	r6, r5, #1
    5ed8:	0035      	movs	r5, r6
    5eda:	e7a1      	b.n	5e20 <__svfiscanf_r+0x34>
    5edc:	2286      	movs	r2, #134	; 0x86
    5ede:	ab02      	add	r3, sp, #8
    5ee0:	0052      	lsls	r2, r2, #1
    5ee2:	189b      	adds	r3, r3, r2
    5ee4:	59db      	ldr	r3, [r3, r7]
    5ee6:	0021      	movs	r1, r4
    5ee8:	9800      	ldr	r0, [sp, #0]
    5eea:	9301      	str	r3, [sp, #4]
    5eec:	4798      	blx	r3
    5eee:	2800      	cmp	r0, #0
    5ef0:	d0e8      	beq.n	5ec4 <__svfiscanf_r+0xd8>
    5ef2:	e7f0      	b.n	5ed6 <__svfiscanf_r+0xea>
    5ef4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5ef6:	3501      	adds	r5, #1
    5ef8:	9302      	str	r3, [sp, #8]
    5efa:	4353      	muls	r3, r2
    5efc:	3b30      	subs	r3, #48	; 0x30
    5efe:	1859      	adds	r1, r3, r1
    5f00:	9147      	str	r1, [sp, #284]	; 0x11c
    5f02:	e7a9      	b.n	5e58 <__svfiscanf_r+0x6c>
    5f04:	2b5b      	cmp	r3, #91	; 0x5b
    5f06:	d100      	bne.n	5f0a <__svfiscanf_r+0x11e>
    5f08:	e077      	b.n	5ffa <__svfiscanf_r+0x20e>
    5f0a:	d80f      	bhi.n	5f2c <__svfiscanf_r+0x140>
    5f0c:	2b58      	cmp	r3, #88	; 0x58
    5f0e:	d1c8      	bne.n	5ea2 <__svfiscanf_r+0xb6>
    5f10:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5f12:	9201      	str	r2, [sp, #4]
    5f14:	2280      	movs	r2, #128	; 0x80
    5f16:	9901      	ldr	r1, [sp, #4]
    5f18:	0092      	lsls	r2, r2, #2
    5f1a:	430a      	orrs	r2, r1
    5f1c:	9245      	str	r2, [sp, #276]	; 0x114
    5f1e:	2210      	movs	r2, #16
    5f20:	9246      	str	r2, [sp, #280]	; 0x118
    5f22:	2203      	movs	r2, #3
    5f24:	2b6e      	cmp	r3, #110	; 0x6e
    5f26:	dd14      	ble.n	5f52 <__svfiscanf_r+0x166>
    5f28:	3201      	adds	r2, #1
    5f2a:	e012      	b.n	5f52 <__svfiscanf_r+0x166>
    5f2c:	2b63      	cmp	r3, #99	; 0x63
    5f2e:	d100      	bne.n	5f32 <__svfiscanf_r+0x146>
    5f30:	e071      	b.n	6016 <__svfiscanf_r+0x22a>
    5f32:	2b64      	cmp	r3, #100	; 0x64
    5f34:	d1b5      	bne.n	5ea2 <__svfiscanf_r+0xb6>
    5f36:	220a      	movs	r2, #10
    5f38:	e7f2      	b.n	5f20 <__svfiscanf_r+0x134>
    5f3a:	2b70      	cmp	r3, #112	; 0x70
    5f3c:	d052      	beq.n	5fe4 <__svfiscanf_r+0x1f8>
    5f3e:	d822      	bhi.n	5f86 <__svfiscanf_r+0x19a>
    5f40:	2b6e      	cmp	r3, #110	; 0x6e
    5f42:	d100      	bne.n	5f46 <__svfiscanf_r+0x15a>
    5f44:	e06f      	b.n	6026 <__svfiscanf_r+0x23a>
    5f46:	d854      	bhi.n	5ff2 <__svfiscanf_r+0x206>
    5f48:	2b69      	cmp	r3, #105	; 0x69
    5f4a:	d1aa      	bne.n	5ea2 <__svfiscanf_r+0xb6>
    5f4c:	2300      	movs	r3, #0
    5f4e:	2203      	movs	r2, #3
    5f50:	9346      	str	r3, [sp, #280]	; 0x118
    5f52:	924b      	str	r2, [sp, #300]	; 0x12c
    5f54:	6863      	ldr	r3, [r4, #4]
    5f56:	2b00      	cmp	r3, #0
    5f58:	dc00      	bgt.n	5f5c <__svfiscanf_r+0x170>
    5f5a:	e078      	b.n	604e <__svfiscanf_r+0x262>
    5f5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5f5e:	9301      	str	r3, [sp, #4]
    5f60:	065b      	lsls	r3, r3, #25
    5f62:	d400      	bmi.n	5f66 <__svfiscanf_r+0x17a>
    5f64:	e08b      	b.n	607e <__svfiscanf_r+0x292>
    5f66:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5f68:	2b02      	cmp	r3, #2
    5f6a:	dd00      	ble.n	5f6e <__svfiscanf_r+0x182>
    5f6c:	e09d      	b.n	60aa <__svfiscanf_r+0x2be>
    5f6e:	ab03      	add	r3, sp, #12
    5f70:	0022      	movs	r2, r4
    5f72:	a945      	add	r1, sp, #276	; 0x114
    5f74:	9800      	ldr	r0, [sp, #0]
    5f76:	f000 f8e7 	bl	6148 <_scanf_chars>
    5f7a:	2801      	cmp	r0, #1
    5f7c:	d100      	bne.n	5f80 <__svfiscanf_r+0x194>
    5f7e:	e0af      	b.n	60e0 <__svfiscanf_r+0x2f4>
    5f80:	2802      	cmp	r0, #2
    5f82:	d1a9      	bne.n	5ed8 <__svfiscanf_r+0xec>
    5f84:	e025      	b.n	5fd2 <__svfiscanf_r+0x1e6>
    5f86:	2b75      	cmp	r3, #117	; 0x75
    5f88:	d0d5      	beq.n	5f36 <__svfiscanf_r+0x14a>
    5f8a:	2b78      	cmp	r3, #120	; 0x78
    5f8c:	d0c0      	beq.n	5f10 <__svfiscanf_r+0x124>
    5f8e:	2b73      	cmp	r3, #115	; 0x73
    5f90:	d187      	bne.n	5ea2 <__svfiscanf_r+0xb6>
    5f92:	2302      	movs	r3, #2
    5f94:	e03d      	b.n	6012 <__svfiscanf_r+0x226>
    5f96:	6863      	ldr	r3, [r4, #4]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	dd0f      	ble.n	5fbc <__svfiscanf_r+0x1d0>
    5f9c:	6823      	ldr	r3, [r4, #0]
    5f9e:	9901      	ldr	r1, [sp, #4]
    5fa0:	781a      	ldrb	r2, [r3, #0]
    5fa2:	4291      	cmp	r1, r2
    5fa4:	d000      	beq.n	5fa8 <__svfiscanf_r+0x1bc>
    5fa6:	e09b      	b.n	60e0 <__svfiscanf_r+0x2f4>
    5fa8:	3301      	adds	r3, #1
    5faa:	6862      	ldr	r2, [r4, #4]
    5fac:	6023      	str	r3, [r4, #0]
    5fae:	9b49      	ldr	r3, [sp, #292]	; 0x124
    5fb0:	3a01      	subs	r2, #1
    5fb2:	9301      	str	r3, [sp, #4]
    5fb4:	3301      	adds	r3, #1
    5fb6:	6062      	str	r2, [r4, #4]
    5fb8:	9349      	str	r3, [sp, #292]	; 0x124
    5fba:	e78d      	b.n	5ed8 <__svfiscanf_r+0xec>
    5fbc:	2286      	movs	r2, #134	; 0x86
    5fbe:	ab02      	add	r3, sp, #8
    5fc0:	0052      	lsls	r2, r2, #1
    5fc2:	189b      	adds	r3, r3, r2
    5fc4:	59db      	ldr	r3, [r3, r7]
    5fc6:	0021      	movs	r1, r4
    5fc8:	9800      	ldr	r0, [sp, #0]
    5fca:	9302      	str	r3, [sp, #8]
    5fcc:	4798      	blx	r3
    5fce:	2800      	cmp	r0, #0
    5fd0:	d0e4      	beq.n	5f9c <__svfiscanf_r+0x1b0>
    5fd2:	9848      	ldr	r0, [sp, #288]	; 0x120
    5fd4:	2800      	cmp	r0, #0
    5fd6:	d000      	beq.n	5fda <__svfiscanf_r+0x1ee>
    5fd8:	e07b      	b.n	60d2 <__svfiscanf_r+0x2e6>
    5fda:	3801      	subs	r0, #1
    5fdc:	23a7      	movs	r3, #167	; 0xa7
    5fde:	009b      	lsls	r3, r3, #2
    5fe0:	449d      	add	sp, r3
    5fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5fe6:	9201      	str	r2, [sp, #4]
    5fe8:	2220      	movs	r2, #32
    5fea:	9901      	ldr	r1, [sp, #4]
    5fec:	430a      	orrs	r2, r1
    5fee:	9245      	str	r2, [sp, #276]	; 0x114
    5ff0:	e78e      	b.n	5f10 <__svfiscanf_r+0x124>
    5ff2:	2308      	movs	r3, #8
    5ff4:	2204      	movs	r2, #4
    5ff6:	9346      	str	r3, [sp, #280]	; 0x118
    5ff8:	e7ab      	b.n	5f52 <__svfiscanf_r+0x166>
    5ffa:	0031      	movs	r1, r6
    5ffc:	a805      	add	r0, sp, #20
    5ffe:	f000 fab5 	bl	656c <__sccl>
    6002:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6004:	0006      	movs	r6, r0
    6006:	9301      	str	r3, [sp, #4]
    6008:	2340      	movs	r3, #64	; 0x40
    600a:	9a01      	ldr	r2, [sp, #4]
    600c:	4313      	orrs	r3, r2
    600e:	9345      	str	r3, [sp, #276]	; 0x114
    6010:	2301      	movs	r3, #1
    6012:	934b      	str	r3, [sp, #300]	; 0x12c
    6014:	e79e      	b.n	5f54 <__svfiscanf_r+0x168>
    6016:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6018:	9301      	str	r3, [sp, #4]
    601a:	2340      	movs	r3, #64	; 0x40
    601c:	9a01      	ldr	r2, [sp, #4]
    601e:	4313      	orrs	r3, r2
    6020:	9345      	str	r3, [sp, #276]	; 0x114
    6022:	2300      	movs	r3, #0
    6024:	e7f5      	b.n	6012 <__svfiscanf_r+0x226>
    6026:	9945      	ldr	r1, [sp, #276]	; 0x114
    6028:	06cb      	lsls	r3, r1, #27
    602a:	d500      	bpl.n	602e <__svfiscanf_r+0x242>
    602c:	e754      	b.n	5ed8 <__svfiscanf_r+0xec>
    602e:	9b03      	ldr	r3, [sp, #12]
    6030:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6032:	07c8      	lsls	r0, r1, #31
    6034:	d504      	bpl.n	6040 <__svfiscanf_r+0x254>
    6036:	1d19      	adds	r1, r3, #4
    6038:	9103      	str	r1, [sp, #12]
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	801a      	strh	r2, [r3, #0]
    603e:	e74b      	b.n	5ed8 <__svfiscanf_r+0xec>
    6040:	1d19      	adds	r1, r3, #4
    6042:	9103      	str	r1, [sp, #12]
    6044:	681b      	ldr	r3, [r3, #0]
    6046:	601a      	str	r2, [r3, #0]
    6048:	e746      	b.n	5ed8 <__svfiscanf_r+0xec>
    604a:	2305      	movs	r3, #5
    604c:	e7e1      	b.n	6012 <__svfiscanf_r+0x226>
    604e:	2286      	movs	r2, #134	; 0x86
    6050:	ab02      	add	r3, sp, #8
    6052:	0052      	lsls	r2, r2, #1
    6054:	189b      	adds	r3, r3, r2
    6056:	59db      	ldr	r3, [r3, r7]
    6058:	0021      	movs	r1, r4
    605a:	9800      	ldr	r0, [sp, #0]
    605c:	9301      	str	r3, [sp, #4]
    605e:	4798      	blx	r3
    6060:	2800      	cmp	r0, #0
    6062:	d100      	bne.n	6066 <__svfiscanf_r+0x27a>
    6064:	e77a      	b.n	5f5c <__svfiscanf_r+0x170>
    6066:	e7b4      	b.n	5fd2 <__svfiscanf_r+0x1e6>
    6068:	9a49      	ldr	r2, [sp, #292]	; 0x124
    606a:	9201      	str	r2, [sp, #4]
    606c:	3201      	adds	r2, #1
    606e:	9249      	str	r2, [sp, #292]	; 0x124
    6070:	6862      	ldr	r2, [r4, #4]
    6072:	3a01      	subs	r2, #1
    6074:	6062      	str	r2, [r4, #4]
    6076:	2a00      	cmp	r2, #0
    6078:	dd0b      	ble.n	6092 <__svfiscanf_r+0x2a6>
    607a:	3301      	adds	r3, #1
    607c:	6023      	str	r3, [r4, #0]
    607e:	f7ff faab 	bl	55d8 <__locale_ctype_ptr>
    6082:	2108      	movs	r1, #8
    6084:	6823      	ldr	r3, [r4, #0]
    6086:	781a      	ldrb	r2, [r3, #0]
    6088:	1880      	adds	r0, r0, r2
    608a:	7842      	ldrb	r2, [r0, #1]
    608c:	420a      	tst	r2, r1
    608e:	d1eb      	bne.n	6068 <__svfiscanf_r+0x27c>
    6090:	e769      	b.n	5f66 <__svfiscanf_r+0x17a>
    6092:	2286      	movs	r2, #134	; 0x86
    6094:	ab02      	add	r3, sp, #8
    6096:	0052      	lsls	r2, r2, #1
    6098:	189b      	adds	r3, r3, r2
    609a:	59db      	ldr	r3, [r3, r7]
    609c:	0021      	movs	r1, r4
    609e:	9800      	ldr	r0, [sp, #0]
    60a0:	9301      	str	r3, [sp, #4]
    60a2:	4798      	blx	r3
    60a4:	2800      	cmp	r0, #0
    60a6:	d0ea      	beq.n	607e <__svfiscanf_r+0x292>
    60a8:	e793      	b.n	5fd2 <__svfiscanf_r+0x1e6>
    60aa:	2b04      	cmp	r3, #4
    60ac:	dc06      	bgt.n	60bc <__svfiscanf_r+0x2d0>
    60ae:	ab03      	add	r3, sp, #12
    60b0:	0022      	movs	r2, r4
    60b2:	a945      	add	r1, sp, #276	; 0x114
    60b4:	9800      	ldr	r0, [sp, #0]
    60b6:	f000 f8ab 	bl	6210 <_scanf_i>
    60ba:	e75e      	b.n	5f7a <__svfiscanf_r+0x18e>
    60bc:	4b0d      	ldr	r3, [pc, #52]	; (60f4 <__svfiscanf_r+0x308>)
    60be:	2b00      	cmp	r3, #0
    60c0:	d100      	bne.n	60c4 <__svfiscanf_r+0x2d8>
    60c2:	e709      	b.n	5ed8 <__svfiscanf_r+0xec>
    60c4:	ab03      	add	r3, sp, #12
    60c6:	0022      	movs	r2, r4
    60c8:	a945      	add	r1, sp, #276	; 0x114
    60ca:	9800      	ldr	r0, [sp, #0]
    60cc:	e000      	b.n	60d0 <__svfiscanf_r+0x2e4>
    60ce:	bf00      	nop
    60d0:	e753      	b.n	5f7a <__svfiscanf_r+0x18e>
    60d2:	89a3      	ldrh	r3, [r4, #12]
    60d4:	065b      	lsls	r3, r3, #25
    60d6:	d400      	bmi.n	60da <__svfiscanf_r+0x2ee>
    60d8:	e780      	b.n	5fdc <__svfiscanf_r+0x1f0>
    60da:	2001      	movs	r0, #1
    60dc:	4240      	negs	r0, r0
    60de:	e77d      	b.n	5fdc <__svfiscanf_r+0x1f0>
    60e0:	9848      	ldr	r0, [sp, #288]	; 0x120
    60e2:	e77b      	b.n	5fdc <__svfiscanf_r+0x1f0>
    60e4:	fffffd64 	.word	0xfffffd64
    60e8:	00006815 	.word	0x00006815
    60ec:	00006429 	.word	0x00006429
    60f0:	00007220 	.word	0x00007220
    60f4:	00000000 	.word	0x00000000

000060f8 <_vfiscanf_r>:
    60f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60fa:	0004      	movs	r4, r0
    60fc:	000d      	movs	r5, r1
    60fe:	0016      	movs	r6, r2
    6100:	001f      	movs	r7, r3
    6102:	2800      	cmp	r0, #0
    6104:	d004      	beq.n	6110 <_vfiscanf_r+0x18>
    6106:	6983      	ldr	r3, [r0, #24]
    6108:	2b00      	cmp	r3, #0
    610a:	d101      	bne.n	6110 <_vfiscanf_r+0x18>
    610c:	f7ff f9b0 	bl	5470 <__sinit>
    6110:	4b0a      	ldr	r3, [pc, #40]	; (613c <_vfiscanf_r+0x44>)
    6112:	429d      	cmp	r5, r3
    6114:	d107      	bne.n	6126 <_vfiscanf_r+0x2e>
    6116:	6865      	ldr	r5, [r4, #4]
    6118:	003b      	movs	r3, r7
    611a:	0032      	movs	r2, r6
    611c:	0029      	movs	r1, r5
    611e:	0020      	movs	r0, r4
    6120:	f7ff fe64 	bl	5dec <__svfiscanf_r>
    6124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6126:	4b06      	ldr	r3, [pc, #24]	; (6140 <_vfiscanf_r+0x48>)
    6128:	429d      	cmp	r5, r3
    612a:	d101      	bne.n	6130 <_vfiscanf_r+0x38>
    612c:	68a5      	ldr	r5, [r4, #8]
    612e:	e7f3      	b.n	6118 <_vfiscanf_r+0x20>
    6130:	4b04      	ldr	r3, [pc, #16]	; (6144 <_vfiscanf_r+0x4c>)
    6132:	429d      	cmp	r5, r3
    6134:	d1f0      	bne.n	6118 <_vfiscanf_r+0x20>
    6136:	68e5      	ldr	r5, [r4, #12]
    6138:	e7ee      	b.n	6118 <_vfiscanf_r+0x20>
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	000071d0 	.word	0x000071d0
    6140:	000071f0 	.word	0x000071f0
    6144:	000071b0 	.word	0x000071b0

00006148 <_scanf_chars>:
    6148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    614a:	0015      	movs	r5, r2
    614c:	688a      	ldr	r2, [r1, #8]
    614e:	9001      	str	r0, [sp, #4]
    6150:	000c      	movs	r4, r1
    6152:	2a00      	cmp	r2, #0
    6154:	d106      	bne.n	6164 <_scanf_chars+0x1c>
    6156:	698a      	ldr	r2, [r1, #24]
    6158:	1e51      	subs	r1, r2, #1
    615a:	418a      	sbcs	r2, r1
    615c:	2101      	movs	r1, #1
    615e:	4252      	negs	r2, r2
    6160:	430a      	orrs	r2, r1
    6162:	60a2      	str	r2, [r4, #8]
    6164:	6822      	ldr	r2, [r4, #0]
    6166:	06d2      	lsls	r2, r2, #27
    6168:	d403      	bmi.n	6172 <_scanf_chars+0x2a>
    616a:	681a      	ldr	r2, [r3, #0]
    616c:	1d11      	adds	r1, r2, #4
    616e:	6019      	str	r1, [r3, #0]
    6170:	6817      	ldr	r7, [r2, #0]
    6172:	2600      	movs	r6, #0
    6174:	69a3      	ldr	r3, [r4, #24]
    6176:	2b00      	cmp	r3, #0
    6178:	d01c      	beq.n	61b4 <_scanf_chars+0x6c>
    617a:	2b01      	cmp	r3, #1
    617c:	d108      	bne.n	6190 <_scanf_chars+0x48>
    617e:	682b      	ldr	r3, [r5, #0]
    6180:	6962      	ldr	r2, [r4, #20]
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	5cd3      	ldrb	r3, [r2, r3]
    6186:	2b00      	cmp	r3, #0
    6188:	d114      	bne.n	61b4 <_scanf_chars+0x6c>
    618a:	2e00      	cmp	r6, #0
    618c:	d130      	bne.n	61f0 <_scanf_chars+0xa8>
    618e:	e006      	b.n	619e <_scanf_chars+0x56>
    6190:	2b02      	cmp	r3, #2
    6192:	d006      	beq.n	61a2 <_scanf_chars+0x5a>
    6194:	2e00      	cmp	r6, #0
    6196:	d12b      	bne.n	61f0 <_scanf_chars+0xa8>
    6198:	69a3      	ldr	r3, [r4, #24]
    619a:	2b01      	cmp	r3, #1
    619c:	d128      	bne.n	61f0 <_scanf_chars+0xa8>
    619e:	2001      	movs	r0, #1
    61a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61a2:	f7ff fa19 	bl	55d8 <__locale_ctype_ptr>
    61a6:	2208      	movs	r2, #8
    61a8:	682b      	ldr	r3, [r5, #0]
    61aa:	781b      	ldrb	r3, [r3, #0]
    61ac:	18c0      	adds	r0, r0, r3
    61ae:	7843      	ldrb	r3, [r0, #1]
    61b0:	4213      	tst	r3, r2
    61b2:	d1ef      	bne.n	6194 <_scanf_chars+0x4c>
    61b4:	2210      	movs	r2, #16
    61b6:	6823      	ldr	r3, [r4, #0]
    61b8:	3601      	adds	r6, #1
    61ba:	4213      	tst	r3, r2
    61bc:	d103      	bne.n	61c6 <_scanf_chars+0x7e>
    61be:	682b      	ldr	r3, [r5, #0]
    61c0:	781b      	ldrb	r3, [r3, #0]
    61c2:	703b      	strb	r3, [r7, #0]
    61c4:	3701      	adds	r7, #1
    61c6:	682a      	ldr	r2, [r5, #0]
    61c8:	686b      	ldr	r3, [r5, #4]
    61ca:	3201      	adds	r2, #1
    61cc:	602a      	str	r2, [r5, #0]
    61ce:	68a2      	ldr	r2, [r4, #8]
    61d0:	3b01      	subs	r3, #1
    61d2:	3a01      	subs	r2, #1
    61d4:	606b      	str	r3, [r5, #4]
    61d6:	60a2      	str	r2, [r4, #8]
    61d8:	2a00      	cmp	r2, #0
    61da:	d009      	beq.n	61f0 <_scanf_chars+0xa8>
    61dc:	2b00      	cmp	r3, #0
    61de:	dcc9      	bgt.n	6174 <_scanf_chars+0x2c>
    61e0:	23c0      	movs	r3, #192	; 0xc0
    61e2:	005b      	lsls	r3, r3, #1
    61e4:	58e3      	ldr	r3, [r4, r3]
    61e6:	0029      	movs	r1, r5
    61e8:	9801      	ldr	r0, [sp, #4]
    61ea:	4798      	blx	r3
    61ec:	2800      	cmp	r0, #0
    61ee:	d0c1      	beq.n	6174 <_scanf_chars+0x2c>
    61f0:	2310      	movs	r3, #16
    61f2:	6822      	ldr	r2, [r4, #0]
    61f4:	4013      	ands	r3, r2
    61f6:	d106      	bne.n	6206 <_scanf_chars+0xbe>
    61f8:	68e2      	ldr	r2, [r4, #12]
    61fa:	3201      	adds	r2, #1
    61fc:	60e2      	str	r2, [r4, #12]
    61fe:	69a2      	ldr	r2, [r4, #24]
    6200:	2a00      	cmp	r2, #0
    6202:	d000      	beq.n	6206 <_scanf_chars+0xbe>
    6204:	703b      	strb	r3, [r7, #0]
    6206:	6923      	ldr	r3, [r4, #16]
    6208:	2000      	movs	r0, #0
    620a:	199e      	adds	r6, r3, r6
    620c:	6126      	str	r6, [r4, #16]
    620e:	e7c7      	b.n	61a0 <_scanf_chars+0x58>

00006210 <_scanf_i>:
    6210:	b5f0      	push	{r4, r5, r6, r7, lr}
    6212:	000c      	movs	r4, r1
    6214:	b08d      	sub	sp, #52	; 0x34
    6216:	9302      	str	r3, [sp, #8]
    6218:	4b77      	ldr	r3, [pc, #476]	; (63f8 <_scanf_i+0x1e8>)
    621a:	9005      	str	r0, [sp, #20]
    621c:	0016      	movs	r6, r2
    621e:	aa09      	add	r2, sp, #36	; 0x24
    6220:	cb23      	ldmia	r3!, {r0, r1, r5}
    6222:	c223      	stmia	r2!, {r0, r1, r5}
    6224:	4b75      	ldr	r3, [pc, #468]	; (63fc <_scanf_i+0x1ec>)
    6226:	9306      	str	r3, [sp, #24]
    6228:	69a3      	ldr	r3, [r4, #24]
    622a:	2b03      	cmp	r3, #3
    622c:	d001      	beq.n	6232 <_scanf_i+0x22>
    622e:	4b74      	ldr	r3, [pc, #464]	; (6400 <_scanf_i+0x1f0>)
    6230:	9306      	str	r3, [sp, #24]
    6232:	22ae      	movs	r2, #174	; 0xae
    6234:	2000      	movs	r0, #0
    6236:	68a3      	ldr	r3, [r4, #8]
    6238:	0052      	lsls	r2, r2, #1
    623a:	1e59      	subs	r1, r3, #1
    623c:	9004      	str	r0, [sp, #16]
    623e:	4291      	cmp	r1, r2
    6240:	d905      	bls.n	624e <_scanf_i+0x3e>
    6242:	3b5e      	subs	r3, #94	; 0x5e
    6244:	3bff      	subs	r3, #255	; 0xff
    6246:	9304      	str	r3, [sp, #16]
    6248:	235e      	movs	r3, #94	; 0x5e
    624a:	33ff      	adds	r3, #255	; 0xff
    624c:	60a3      	str	r3, [r4, #8]
    624e:	0023      	movs	r3, r4
    6250:	331c      	adds	r3, #28
    6252:	9301      	str	r3, [sp, #4]
    6254:	23d0      	movs	r3, #208	; 0xd0
    6256:	2700      	movs	r7, #0
    6258:	6822      	ldr	r2, [r4, #0]
    625a:	011b      	lsls	r3, r3, #4
    625c:	4313      	orrs	r3, r2
    625e:	6023      	str	r3, [r4, #0]
    6260:	9b01      	ldr	r3, [sp, #4]
    6262:	9303      	str	r3, [sp, #12]
    6264:	6833      	ldr	r3, [r6, #0]
    6266:	a809      	add	r0, sp, #36	; 0x24
    6268:	7819      	ldrb	r1, [r3, #0]
    626a:	00bb      	lsls	r3, r7, #2
    626c:	2202      	movs	r2, #2
    626e:	5818      	ldr	r0, [r3, r0]
    6270:	f000 fbac 	bl	69cc <memchr>
    6274:	2800      	cmp	r0, #0
    6276:	d02b      	beq.n	62d0 <_scanf_i+0xc0>
    6278:	2f01      	cmp	r7, #1
    627a:	d15f      	bne.n	633c <_scanf_i+0x12c>
    627c:	6863      	ldr	r3, [r4, #4]
    627e:	2b00      	cmp	r3, #0
    6280:	d106      	bne.n	6290 <_scanf_i+0x80>
    6282:	3308      	adds	r3, #8
    6284:	6822      	ldr	r2, [r4, #0]
    6286:	6063      	str	r3, [r4, #4]
    6288:	33f9      	adds	r3, #249	; 0xf9
    628a:	33ff      	adds	r3, #255	; 0xff
    628c:	4313      	orrs	r3, r2
    628e:	6023      	str	r3, [r4, #0]
    6290:	4b5c      	ldr	r3, [pc, #368]	; (6404 <_scanf_i+0x1f4>)
    6292:	6822      	ldr	r2, [r4, #0]
    6294:	4013      	ands	r3, r2
    6296:	6023      	str	r3, [r4, #0]
    6298:	68a3      	ldr	r3, [r4, #8]
    629a:	1e5a      	subs	r2, r3, #1
    629c:	60a2      	str	r2, [r4, #8]
    629e:	2b00      	cmp	r3, #0
    62a0:	d016      	beq.n	62d0 <_scanf_i+0xc0>
    62a2:	9b03      	ldr	r3, [sp, #12]
    62a4:	1c5d      	adds	r5, r3, #1
    62a6:	6833      	ldr	r3, [r6, #0]
    62a8:	1c5a      	adds	r2, r3, #1
    62aa:	6032      	str	r2, [r6, #0]
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	9a03      	ldr	r2, [sp, #12]
    62b0:	9503      	str	r5, [sp, #12]
    62b2:	7013      	strb	r3, [r2, #0]
    62b4:	6873      	ldr	r3, [r6, #4]
    62b6:	3b01      	subs	r3, #1
    62b8:	6073      	str	r3, [r6, #4]
    62ba:	2b00      	cmp	r3, #0
    62bc:	dc08      	bgt.n	62d0 <_scanf_i+0xc0>
    62be:	23c0      	movs	r3, #192	; 0xc0
    62c0:	005b      	lsls	r3, r3, #1
    62c2:	58e3      	ldr	r3, [r4, r3]
    62c4:	0031      	movs	r1, r6
    62c6:	9805      	ldr	r0, [sp, #20]
    62c8:	9307      	str	r3, [sp, #28]
    62ca:	4798      	blx	r3
    62cc:	2800      	cmp	r0, #0
    62ce:	d17d      	bne.n	63cc <_scanf_i+0x1bc>
    62d0:	3701      	adds	r7, #1
    62d2:	2f03      	cmp	r7, #3
    62d4:	d1c6      	bne.n	6264 <_scanf_i+0x54>
    62d6:	6863      	ldr	r3, [r4, #4]
    62d8:	2b00      	cmp	r3, #0
    62da:	d101      	bne.n	62e0 <_scanf_i+0xd0>
    62dc:	330a      	adds	r3, #10
    62de:	6063      	str	r3, [r4, #4]
    62e0:	2110      	movs	r1, #16
    62e2:	2700      	movs	r7, #0
    62e4:	6863      	ldr	r3, [r4, #4]
    62e6:	6960      	ldr	r0, [r4, #20]
    62e8:	1ac9      	subs	r1, r1, r3
    62ea:	4b47      	ldr	r3, [pc, #284]	; (6408 <_scanf_i+0x1f8>)
    62ec:	18c9      	adds	r1, r1, r3
    62ee:	f000 f93d 	bl	656c <__sccl>
    62f2:	9d03      	ldr	r5, [sp, #12]
    62f4:	68a3      	ldr	r3, [r4, #8]
    62f6:	2b00      	cmp	r3, #0
    62f8:	d041      	beq.n	637e <_scanf_i+0x16e>
    62fa:	6832      	ldr	r2, [r6, #0]
    62fc:	6960      	ldr	r0, [r4, #20]
    62fe:	7811      	ldrb	r1, [r2, #0]
    6300:	5c40      	ldrb	r0, [r0, r1]
    6302:	2800      	cmp	r0, #0
    6304:	d03b      	beq.n	637e <_scanf_i+0x16e>
    6306:	2930      	cmp	r1, #48	; 0x30
    6308:	d128      	bne.n	635c <_scanf_i+0x14c>
    630a:	2080      	movs	r0, #128	; 0x80
    630c:	6821      	ldr	r1, [r4, #0]
    630e:	0100      	lsls	r0, r0, #4
    6310:	4201      	tst	r1, r0
    6312:	d023      	beq.n	635c <_scanf_i+0x14c>
    6314:	9a04      	ldr	r2, [sp, #16]
    6316:	3701      	adds	r7, #1
    6318:	2a00      	cmp	r2, #0
    631a:	d003      	beq.n	6324 <_scanf_i+0x114>
    631c:	3a01      	subs	r2, #1
    631e:	3301      	adds	r3, #1
    6320:	9204      	str	r2, [sp, #16]
    6322:	60a3      	str	r3, [r4, #8]
    6324:	6873      	ldr	r3, [r6, #4]
    6326:	3b01      	subs	r3, #1
    6328:	6073      	str	r3, [r6, #4]
    632a:	2b00      	cmp	r3, #0
    632c:	dd1e      	ble.n	636c <_scanf_i+0x15c>
    632e:	6833      	ldr	r3, [r6, #0]
    6330:	3301      	adds	r3, #1
    6332:	6033      	str	r3, [r6, #0]
    6334:	68a3      	ldr	r3, [r4, #8]
    6336:	3b01      	subs	r3, #1
    6338:	60a3      	str	r3, [r4, #8]
    633a:	e7db      	b.n	62f4 <_scanf_i+0xe4>
    633c:	2f02      	cmp	r7, #2
    633e:	d1ab      	bne.n	6298 <_scanf_i+0x88>
    6340:	21c0      	movs	r1, #192	; 0xc0
    6342:	2380      	movs	r3, #128	; 0x80
    6344:	6822      	ldr	r2, [r4, #0]
    6346:	00c9      	lsls	r1, r1, #3
    6348:	4011      	ands	r1, r2
    634a:	009b      	lsls	r3, r3, #2
    634c:	4299      	cmp	r1, r3
    634e:	d1c2      	bne.n	62d6 <_scanf_i+0xc6>
    6350:	3bf1      	subs	r3, #241	; 0xf1
    6352:	3bff      	subs	r3, #255	; 0xff
    6354:	6063      	str	r3, [r4, #4]
    6356:	33f0      	adds	r3, #240	; 0xf0
    6358:	4313      	orrs	r3, r2
    635a:	e79c      	b.n	6296 <_scanf_i+0x86>
    635c:	6821      	ldr	r1, [r4, #0]
    635e:	4b2b      	ldr	r3, [pc, #172]	; (640c <_scanf_i+0x1fc>)
    6360:	400b      	ands	r3, r1
    6362:	6023      	str	r3, [r4, #0]
    6364:	7813      	ldrb	r3, [r2, #0]
    6366:	702b      	strb	r3, [r5, #0]
    6368:	3501      	adds	r5, #1
    636a:	e7db      	b.n	6324 <_scanf_i+0x114>
    636c:	23c0      	movs	r3, #192	; 0xc0
    636e:	005b      	lsls	r3, r3, #1
    6370:	58e3      	ldr	r3, [r4, r3]
    6372:	0031      	movs	r1, r6
    6374:	9805      	ldr	r0, [sp, #20]
    6376:	9303      	str	r3, [sp, #12]
    6378:	4798      	blx	r3
    637a:	2800      	cmp	r0, #0
    637c:	d0da      	beq.n	6334 <_scanf_i+0x124>
    637e:	6823      	ldr	r3, [r4, #0]
    6380:	05db      	lsls	r3, r3, #23
    6382:	d50e      	bpl.n	63a2 <_scanf_i+0x192>
    6384:	9b01      	ldr	r3, [sp, #4]
    6386:	429d      	cmp	r5, r3
    6388:	d907      	bls.n	639a <_scanf_i+0x18a>
    638a:	23be      	movs	r3, #190	; 0xbe
    638c:	3d01      	subs	r5, #1
    638e:	005b      	lsls	r3, r3, #1
    6390:	7829      	ldrb	r1, [r5, #0]
    6392:	58e3      	ldr	r3, [r4, r3]
    6394:	0032      	movs	r2, r6
    6396:	9805      	ldr	r0, [sp, #20]
    6398:	4798      	blx	r3
    639a:	9b01      	ldr	r3, [sp, #4]
    639c:	2001      	movs	r0, #1
    639e:	429d      	cmp	r5, r3
    63a0:	d027      	beq.n	63f2 <_scanf_i+0x1e2>
    63a2:	2210      	movs	r2, #16
    63a4:	6823      	ldr	r3, [r4, #0]
    63a6:	401a      	ands	r2, r3
    63a8:	d11c      	bne.n	63e4 <_scanf_i+0x1d4>
    63aa:	702a      	strb	r2, [r5, #0]
    63ac:	6863      	ldr	r3, [r4, #4]
    63ae:	9901      	ldr	r1, [sp, #4]
    63b0:	9805      	ldr	r0, [sp, #20]
    63b2:	9e06      	ldr	r6, [sp, #24]
    63b4:	47b0      	blx	r6
    63b6:	9b02      	ldr	r3, [sp, #8]
    63b8:	6822      	ldr	r2, [r4, #0]
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	0691      	lsls	r1, r2, #26
    63be:	d507      	bpl.n	63d0 <_scanf_i+0x1c0>
    63c0:	9902      	ldr	r1, [sp, #8]
    63c2:	1d1a      	adds	r2, r3, #4
    63c4:	600a      	str	r2, [r1, #0]
    63c6:	681b      	ldr	r3, [r3, #0]
    63c8:	6018      	str	r0, [r3, #0]
    63ca:	e008      	b.n	63de <_scanf_i+0x1ce>
    63cc:	2700      	movs	r7, #0
    63ce:	e7d6      	b.n	637e <_scanf_i+0x16e>
    63d0:	07d1      	lsls	r1, r2, #31
    63d2:	d5f5      	bpl.n	63c0 <_scanf_i+0x1b0>
    63d4:	9902      	ldr	r1, [sp, #8]
    63d6:	1d1a      	adds	r2, r3, #4
    63d8:	600a      	str	r2, [r1, #0]
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	8018      	strh	r0, [r3, #0]
    63de:	68e3      	ldr	r3, [r4, #12]
    63e0:	3301      	adds	r3, #1
    63e2:	60e3      	str	r3, [r4, #12]
    63e4:	2000      	movs	r0, #0
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	1aed      	subs	r5, r5, r3
    63ea:	6923      	ldr	r3, [r4, #16]
    63ec:	19ef      	adds	r7, r5, r7
    63ee:	19df      	adds	r7, r3, r7
    63f0:	6127      	str	r7, [r4, #16]
    63f2:	b00d      	add	sp, #52	; 0x34
    63f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	00007250 	.word	0x00007250
    63fc:	00005079 	.word	0x00005079
    6400:	00006779 	.word	0x00006779
    6404:	fffffaff 	.word	0xfffffaff
    6408:	0000725c 	.word	0x0000725c
    640c:	fffff6ff 	.word	0xfffff6ff

00006410 <lflush>:
    6410:	2209      	movs	r2, #9
    6412:	b510      	push	{r4, lr}
    6414:	8983      	ldrh	r3, [r0, #12]
    6416:	4013      	ands	r3, r2
    6418:	2200      	movs	r2, #0
    641a:	2b09      	cmp	r3, #9
    641c:	d102      	bne.n	6424 <lflush+0x14>
    641e:	f7fe ffd1 	bl	53c4 <fflush>
    6422:	0002      	movs	r2, r0
    6424:	0010      	movs	r0, r2
    6426:	bd10      	pop	{r4, pc}

00006428 <__srefill_r>:
    6428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    642a:	0005      	movs	r5, r0
    642c:	000c      	movs	r4, r1
    642e:	2800      	cmp	r0, #0
    6430:	d004      	beq.n	643c <__srefill_r+0x14>
    6432:	6983      	ldr	r3, [r0, #24]
    6434:	2b00      	cmp	r3, #0
    6436:	d101      	bne.n	643c <__srefill_r+0x14>
    6438:	f7ff f81a 	bl	5470 <__sinit>
    643c:	4b3d      	ldr	r3, [pc, #244]	; (6534 <__srefill_r+0x10c>)
    643e:	429c      	cmp	r4, r3
    6440:	d10a      	bne.n	6458 <__srefill_r+0x30>
    6442:	686c      	ldr	r4, [r5, #4]
    6444:	2300      	movs	r3, #0
    6446:	6063      	str	r3, [r4, #4]
    6448:	230c      	movs	r3, #12
    644a:	5ee2      	ldrsh	r2, [r4, r3]
    644c:	b293      	uxth	r3, r2
    644e:	0699      	lsls	r1, r3, #26
    6450:	d50c      	bpl.n	646c <__srefill_r+0x44>
    6452:	2001      	movs	r0, #1
    6454:	4240      	negs	r0, r0
    6456:	e068      	b.n	652a <__srefill_r+0x102>
    6458:	4b37      	ldr	r3, [pc, #220]	; (6538 <__srefill_r+0x110>)
    645a:	429c      	cmp	r4, r3
    645c:	d101      	bne.n	6462 <__srefill_r+0x3a>
    645e:	68ac      	ldr	r4, [r5, #8]
    6460:	e7f0      	b.n	6444 <__srefill_r+0x1c>
    6462:	4b36      	ldr	r3, [pc, #216]	; (653c <__srefill_r+0x114>)
    6464:	429c      	cmp	r4, r3
    6466:	d1ed      	bne.n	6444 <__srefill_r+0x1c>
    6468:	68ec      	ldr	r4, [r5, #12]
    646a:	e7eb      	b.n	6444 <__srefill_r+0x1c>
    646c:	0759      	lsls	r1, r3, #29
    646e:	d44a      	bmi.n	6506 <__srefill_r+0xde>
    6470:	06d9      	lsls	r1, r3, #27
    6472:	d405      	bmi.n	6480 <__srefill_r+0x58>
    6474:	2309      	movs	r3, #9
    6476:	602b      	str	r3, [r5, #0]
    6478:	3337      	adds	r3, #55	; 0x37
    647a:	4313      	orrs	r3, r2
    647c:	81a3      	strh	r3, [r4, #12]
    647e:	e7e8      	b.n	6452 <__srefill_r+0x2a>
    6480:	2608      	movs	r6, #8
    6482:	4233      	tst	r3, r6
    6484:	d00a      	beq.n	649c <__srefill_r+0x74>
    6486:	0021      	movs	r1, r4
    6488:	0028      	movs	r0, r5
    648a:	f7fe ff6f 	bl	536c <_fflush_r>
    648e:	2800      	cmp	r0, #0
    6490:	d1df      	bne.n	6452 <__srefill_r+0x2a>
    6492:	89a3      	ldrh	r3, [r4, #12]
    6494:	60a0      	str	r0, [r4, #8]
    6496:	43b3      	bics	r3, r6
    6498:	81a3      	strh	r3, [r4, #12]
    649a:	61a0      	str	r0, [r4, #24]
    649c:	2304      	movs	r3, #4
    649e:	89a2      	ldrh	r2, [r4, #12]
    64a0:	4313      	orrs	r3, r2
    64a2:	81a3      	strh	r3, [r4, #12]
    64a4:	6923      	ldr	r3, [r4, #16]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d103      	bne.n	64b2 <__srefill_r+0x8a>
    64aa:	0021      	movs	r1, r4
    64ac:	0028      	movs	r0, r5
    64ae:	f7ff f8c9 	bl	5644 <__smakebuf_r>
    64b2:	230c      	movs	r3, #12
    64b4:	5ee7      	ldrsh	r7, [r4, r3]
    64b6:	b2be      	uxth	r6, r7
    64b8:	07b3      	lsls	r3, r6, #30
    64ba:	d00f      	beq.n	64dc <__srefill_r+0xb4>
    64bc:	2301      	movs	r3, #1
    64be:	81a3      	strh	r3, [r4, #12]
    64c0:	4b1f      	ldr	r3, [pc, #124]	; (6540 <__srefill_r+0x118>)
    64c2:	4920      	ldr	r1, [pc, #128]	; (6544 <__srefill_r+0x11c>)
    64c4:	6818      	ldr	r0, [r3, #0]
    64c6:	f7ff f847 	bl	5558 <_fwalk>
    64ca:	2309      	movs	r3, #9
    64cc:	81a7      	strh	r7, [r4, #12]
    64ce:	401e      	ands	r6, r3
    64d0:	429e      	cmp	r6, r3
    64d2:	d103      	bne.n	64dc <__srefill_r+0xb4>
    64d4:	0021      	movs	r1, r4
    64d6:	0028      	movs	r0, r5
    64d8:	f7fe febe 	bl	5258 <__sflush_r>
    64dc:	6923      	ldr	r3, [r4, #16]
    64de:	6922      	ldr	r2, [r4, #16]
    64e0:	6023      	str	r3, [r4, #0]
    64e2:	0028      	movs	r0, r5
    64e4:	6963      	ldr	r3, [r4, #20]
    64e6:	6a21      	ldr	r1, [r4, #32]
    64e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    64ea:	47a8      	blx	r5
    64ec:	0002      	movs	r2, r0
    64ee:	6060      	str	r0, [r4, #4]
    64f0:	2000      	movs	r0, #0
    64f2:	4282      	cmp	r2, r0
    64f4:	dc19      	bgt.n	652a <__srefill_r+0x102>
    64f6:	89a1      	ldrh	r1, [r4, #12]
    64f8:	4282      	cmp	r2, r0
    64fa:	d117      	bne.n	652c <__srefill_r+0x104>
    64fc:	2320      	movs	r3, #32
    64fe:	430b      	orrs	r3, r1
    6500:	81a3      	strh	r3, [r4, #12]
    6502:	3801      	subs	r0, #1
    6504:	e011      	b.n	652a <__srefill_r+0x102>
    6506:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6508:	2900      	cmp	r1, #0
    650a:	d0cb      	beq.n	64a4 <__srefill_r+0x7c>
    650c:	0023      	movs	r3, r4
    650e:	3344      	adds	r3, #68	; 0x44
    6510:	4299      	cmp	r1, r3
    6512:	d002      	beq.n	651a <__srefill_r+0xf2>
    6514:	0028      	movs	r0, r5
    6516:	f7ff f8f5 	bl	5704 <_free_r>
    651a:	2000      	movs	r0, #0
    651c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    651e:	6360      	str	r0, [r4, #52]	; 0x34
    6520:	6063      	str	r3, [r4, #4]
    6522:	4283      	cmp	r3, r0
    6524:	d0be      	beq.n	64a4 <__srefill_r+0x7c>
    6526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6528:	6023      	str	r3, [r4, #0]
    652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    652c:	2340      	movs	r3, #64	; 0x40
    652e:	6060      	str	r0, [r4, #4]
    6530:	430b      	orrs	r3, r1
    6532:	e7a3      	b.n	647c <__srefill_r+0x54>
    6534:	000071d0 	.word	0x000071d0
    6538:	000071f0 	.word	0x000071f0
    653c:	000071b0 	.word	0x000071b0
    6540:	000071ac 	.word	0x000071ac
    6544:	00006411 	.word	0x00006411

00006548 <_sbrk_r>:
    6548:	2300      	movs	r3, #0
    654a:	b570      	push	{r4, r5, r6, lr}
    654c:	4c06      	ldr	r4, [pc, #24]	; (6568 <_sbrk_r+0x20>)
    654e:	0005      	movs	r5, r0
    6550:	0008      	movs	r0, r1
    6552:	6023      	str	r3, [r4, #0]
    6554:	f7fc fb96 	bl	2c84 <_sbrk>
    6558:	1c43      	adds	r3, r0, #1
    655a:	d103      	bne.n	6564 <_sbrk_r+0x1c>
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	2b00      	cmp	r3, #0
    6560:	d000      	beq.n	6564 <_sbrk_r+0x1c>
    6562:	602b      	str	r3, [r5, #0]
    6564:	bd70      	pop	{r4, r5, r6, pc}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	20000410 	.word	0x20000410

0000656c <__sccl>:
    656c:	b570      	push	{r4, r5, r6, lr}
    656e:	780b      	ldrb	r3, [r1, #0]
    6570:	2b5e      	cmp	r3, #94	; 0x5e
    6572:	d00d      	beq.n	6590 <__sccl+0x24>
    6574:	1c4a      	adds	r2, r1, #1
    6576:	2100      	movs	r1, #0
    6578:	0004      	movs	r4, r0
    657a:	1c45      	adds	r5, r0, #1
    657c:	35ff      	adds	r5, #255	; 0xff
    657e:	7021      	strb	r1, [r4, #0]
    6580:	3401      	adds	r4, #1
    6582:	42a5      	cmp	r5, r4
    6584:	d1fb      	bne.n	657e <__sccl+0x12>
    6586:	2b00      	cmp	r3, #0
    6588:	d106      	bne.n	6598 <__sccl+0x2c>
    658a:	3a01      	subs	r2, #1
    658c:	0010      	movs	r0, r2
    658e:	bd70      	pop	{r4, r5, r6, pc}
    6590:	1c8a      	adds	r2, r1, #2
    6592:	784b      	ldrb	r3, [r1, #1]
    6594:	2101      	movs	r1, #1
    6596:	e7ef      	b.n	6578 <__sccl+0xc>
    6598:	2401      	movs	r4, #1
    659a:	404c      	eors	r4, r1
    659c:	0011      	movs	r1, r2
    659e:	54c4      	strb	r4, [r0, r3]
    65a0:	780d      	ldrb	r5, [r1, #0]
    65a2:	1c4a      	adds	r2, r1, #1
    65a4:	2d2d      	cmp	r5, #45	; 0x2d
    65a6:	d007      	beq.n	65b8 <__sccl+0x4c>
    65a8:	2d5d      	cmp	r5, #93	; 0x5d
    65aa:	d0ef      	beq.n	658c <__sccl+0x20>
    65ac:	2d00      	cmp	r5, #0
    65ae:	d101      	bne.n	65b4 <__sccl+0x48>
    65b0:	000a      	movs	r2, r1
    65b2:	e7eb      	b.n	658c <__sccl+0x20>
    65b4:	002b      	movs	r3, r5
    65b6:	e7f1      	b.n	659c <__sccl+0x30>
    65b8:	784e      	ldrb	r6, [r1, #1]
    65ba:	2e5d      	cmp	r6, #93	; 0x5d
    65bc:	d0fa      	beq.n	65b4 <__sccl+0x48>
    65be:	42b3      	cmp	r3, r6
    65c0:	dcf8      	bgt.n	65b4 <__sccl+0x48>
    65c2:	3102      	adds	r1, #2
    65c4:	3301      	adds	r3, #1
    65c6:	54c4      	strb	r4, [r0, r3]
    65c8:	429e      	cmp	r6, r3
    65ca:	dcfb      	bgt.n	65c4 <__sccl+0x58>
    65cc:	e7e8      	b.n	65a0 <__sccl+0x34>
	...

000065d0 <__sread>:
    65d0:	b570      	push	{r4, r5, r6, lr}
    65d2:	000c      	movs	r4, r1
    65d4:	250e      	movs	r5, #14
    65d6:	5f49      	ldrsh	r1, [r1, r5]
    65d8:	f000 fa2c 	bl	6a34 <_read_r>
    65dc:	2800      	cmp	r0, #0
    65de:	db03      	blt.n	65e8 <__sread+0x18>
    65e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    65e2:	181b      	adds	r3, r3, r0
    65e4:	6563      	str	r3, [r4, #84]	; 0x54
    65e6:	bd70      	pop	{r4, r5, r6, pc}
    65e8:	89a3      	ldrh	r3, [r4, #12]
    65ea:	4a02      	ldr	r2, [pc, #8]	; (65f4 <__sread+0x24>)
    65ec:	4013      	ands	r3, r2
    65ee:	81a3      	strh	r3, [r4, #12]
    65f0:	e7f9      	b.n	65e6 <__sread+0x16>
    65f2:	46c0      	nop			; (mov r8, r8)
    65f4:	ffffefff 	.word	0xffffefff

000065f8 <__swrite>:
    65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65fa:	001f      	movs	r7, r3
    65fc:	898b      	ldrh	r3, [r1, #12]
    65fe:	0005      	movs	r5, r0
    6600:	000c      	movs	r4, r1
    6602:	0016      	movs	r6, r2
    6604:	05db      	lsls	r3, r3, #23
    6606:	d505      	bpl.n	6614 <__swrite+0x1c>
    6608:	230e      	movs	r3, #14
    660a:	5ec9      	ldrsh	r1, [r1, r3]
    660c:	2200      	movs	r2, #0
    660e:	2302      	movs	r3, #2
    6610:	f000 f9c8 	bl	69a4 <_lseek_r>
    6614:	89a3      	ldrh	r3, [r4, #12]
    6616:	4a05      	ldr	r2, [pc, #20]	; (662c <__swrite+0x34>)
    6618:	0028      	movs	r0, r5
    661a:	4013      	ands	r3, r2
    661c:	81a3      	strh	r3, [r4, #12]
    661e:	0032      	movs	r2, r6
    6620:	230e      	movs	r3, #14
    6622:	5ee1      	ldrsh	r1, [r4, r3]
    6624:	003b      	movs	r3, r7
    6626:	f000 f973 	bl	6910 <_write_r>
    662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    662c:	ffffefff 	.word	0xffffefff

00006630 <__sseek>:
    6630:	b570      	push	{r4, r5, r6, lr}
    6632:	000c      	movs	r4, r1
    6634:	250e      	movs	r5, #14
    6636:	5f49      	ldrsh	r1, [r1, r5]
    6638:	f000 f9b4 	bl	69a4 <_lseek_r>
    663c:	89a3      	ldrh	r3, [r4, #12]
    663e:	1c42      	adds	r2, r0, #1
    6640:	d103      	bne.n	664a <__sseek+0x1a>
    6642:	4a05      	ldr	r2, [pc, #20]	; (6658 <__sseek+0x28>)
    6644:	4013      	ands	r3, r2
    6646:	81a3      	strh	r3, [r4, #12]
    6648:	bd70      	pop	{r4, r5, r6, pc}
    664a:	2280      	movs	r2, #128	; 0x80
    664c:	0152      	lsls	r2, r2, #5
    664e:	4313      	orrs	r3, r2
    6650:	81a3      	strh	r3, [r4, #12]
    6652:	6560      	str	r0, [r4, #84]	; 0x54
    6654:	e7f8      	b.n	6648 <__sseek+0x18>
    6656:	46c0      	nop			; (mov r8, r8)
    6658:	ffffefff 	.word	0xffffefff

0000665c <__sclose>:
    665c:	b510      	push	{r4, lr}
    665e:	230e      	movs	r3, #14
    6660:	5ec9      	ldrsh	r1, [r1, r3]
    6662:	f000 f969 	bl	6938 <_close_r>
    6666:	bd10      	pop	{r4, pc}

00006668 <_strtoul_l.isra.0>:
    6668:	b5f0      	push	{r4, r5, r6, r7, lr}
    666a:	001f      	movs	r7, r3
    666c:	000e      	movs	r6, r1
    666e:	b087      	sub	sp, #28
    6670:	9005      	str	r0, [sp, #20]
    6672:	9103      	str	r1, [sp, #12]
    6674:	9201      	str	r2, [sp, #4]
    6676:	980c      	ldr	r0, [sp, #48]	; 0x30
    6678:	7834      	ldrb	r4, [r6, #0]
    667a:	f7fe ffaa 	bl	55d2 <__locale_ctype_ptr_l>
    667e:	2208      	movs	r2, #8
    6680:	1900      	adds	r0, r0, r4
    6682:	7843      	ldrb	r3, [r0, #1]
    6684:	1c75      	adds	r5, r6, #1
    6686:	4013      	ands	r3, r2
    6688:	d10c      	bne.n	66a4 <_strtoul_l.isra.0+0x3c>
    668a:	2c2d      	cmp	r4, #45	; 0x2d
    668c:	d10c      	bne.n	66a8 <_strtoul_l.isra.0+0x40>
    668e:	3301      	adds	r3, #1
    6690:	782c      	ldrb	r4, [r5, #0]
    6692:	9302      	str	r3, [sp, #8]
    6694:	1cb5      	adds	r5, r6, #2
    6696:	2f00      	cmp	r7, #0
    6698:	d00c      	beq.n	66b4 <_strtoul_l.isra.0+0x4c>
    669a:	2f10      	cmp	r7, #16
    669c:	d114      	bne.n	66c8 <_strtoul_l.isra.0+0x60>
    669e:	2c30      	cmp	r4, #48	; 0x30
    66a0:	d00a      	beq.n	66b8 <_strtoul_l.isra.0+0x50>
    66a2:	e011      	b.n	66c8 <_strtoul_l.isra.0+0x60>
    66a4:	002e      	movs	r6, r5
    66a6:	e7e6      	b.n	6676 <_strtoul_l.isra.0+0xe>
    66a8:	9302      	str	r3, [sp, #8]
    66aa:	2c2b      	cmp	r4, #43	; 0x2b
    66ac:	d1f3      	bne.n	6696 <_strtoul_l.isra.0+0x2e>
    66ae:	782c      	ldrb	r4, [r5, #0]
    66b0:	1cb5      	adds	r5, r6, #2
    66b2:	e7f0      	b.n	6696 <_strtoul_l.isra.0+0x2e>
    66b4:	2c30      	cmp	r4, #48	; 0x30
    66b6:	d12f      	bne.n	6718 <_strtoul_l.isra.0+0xb0>
    66b8:	2220      	movs	r2, #32
    66ba:	782b      	ldrb	r3, [r5, #0]
    66bc:	4393      	bics	r3, r2
    66be:	2b58      	cmp	r3, #88	; 0x58
    66c0:	d154      	bne.n	676c <_strtoul_l.isra.0+0x104>
    66c2:	2710      	movs	r7, #16
    66c4:	786c      	ldrb	r4, [r5, #1]
    66c6:	3502      	adds	r5, #2
    66c8:	2001      	movs	r0, #1
    66ca:	0039      	movs	r1, r7
    66cc:	4240      	negs	r0, r0
    66ce:	f7fc fc59 	bl	2f84 <__udivsi3>
    66d2:	0006      	movs	r6, r0
    66d4:	2001      	movs	r0, #1
    66d6:	0039      	movs	r1, r7
    66d8:	4240      	negs	r0, r0
    66da:	f7fc fcd9 	bl	3090 <__aeabi_uidivmod>
    66de:	2300      	movs	r3, #0
    66e0:	9104      	str	r1, [sp, #16]
    66e2:	2101      	movs	r1, #1
    66e4:	2201      	movs	r2, #1
    66e6:	0018      	movs	r0, r3
    66e8:	468c      	mov	ip, r1
    66ea:	4252      	negs	r2, r2
    66ec:	0021      	movs	r1, r4
    66ee:	3930      	subs	r1, #48	; 0x30
    66f0:	2909      	cmp	r1, #9
    66f2:	d813      	bhi.n	671c <_strtoul_l.isra.0+0xb4>
    66f4:	000c      	movs	r4, r1
    66f6:	42a7      	cmp	r7, r4
    66f8:	dd1e      	ble.n	6738 <_strtoul_l.isra.0+0xd0>
    66fa:	2b00      	cmp	r3, #0
    66fc:	db1a      	blt.n	6734 <_strtoul_l.isra.0+0xcc>
    66fe:	0013      	movs	r3, r2
    6700:	4286      	cmp	r6, r0
    6702:	d306      	bcc.n	6712 <_strtoul_l.isra.0+0xaa>
    6704:	d102      	bne.n	670c <_strtoul_l.isra.0+0xa4>
    6706:	9904      	ldr	r1, [sp, #16]
    6708:	42a1      	cmp	r1, r4
    670a:	db02      	blt.n	6712 <_strtoul_l.isra.0+0xaa>
    670c:	4663      	mov	r3, ip
    670e:	4378      	muls	r0, r7
    6710:	1820      	adds	r0, r4, r0
    6712:	782c      	ldrb	r4, [r5, #0]
    6714:	3501      	adds	r5, #1
    6716:	e7e9      	b.n	66ec <_strtoul_l.isra.0+0x84>
    6718:	270a      	movs	r7, #10
    671a:	e7d5      	b.n	66c8 <_strtoul_l.isra.0+0x60>
    671c:	0021      	movs	r1, r4
    671e:	3941      	subs	r1, #65	; 0x41
    6720:	2919      	cmp	r1, #25
    6722:	d801      	bhi.n	6728 <_strtoul_l.isra.0+0xc0>
    6724:	3c37      	subs	r4, #55	; 0x37
    6726:	e7e6      	b.n	66f6 <_strtoul_l.isra.0+0x8e>
    6728:	0021      	movs	r1, r4
    672a:	3961      	subs	r1, #97	; 0x61
    672c:	2919      	cmp	r1, #25
    672e:	d803      	bhi.n	6738 <_strtoul_l.isra.0+0xd0>
    6730:	3c57      	subs	r4, #87	; 0x57
    6732:	e7e0      	b.n	66f6 <_strtoul_l.isra.0+0x8e>
    6734:	0013      	movs	r3, r2
    6736:	e7ec      	b.n	6712 <_strtoul_l.isra.0+0xaa>
    6738:	2b00      	cmp	r3, #0
    673a:	da09      	bge.n	6750 <_strtoul_l.isra.0+0xe8>
    673c:	2322      	movs	r3, #34	; 0x22
    673e:	2001      	movs	r0, #1
    6740:	9a05      	ldr	r2, [sp, #20]
    6742:	4240      	negs	r0, r0
    6744:	6013      	str	r3, [r2, #0]
    6746:	9b01      	ldr	r3, [sp, #4]
    6748:	2b00      	cmp	r3, #0
    674a:	d10b      	bne.n	6764 <_strtoul_l.isra.0+0xfc>
    674c:	b007      	add	sp, #28
    674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6750:	9a02      	ldr	r2, [sp, #8]
    6752:	2a00      	cmp	r2, #0
    6754:	d000      	beq.n	6758 <_strtoul_l.isra.0+0xf0>
    6756:	4240      	negs	r0, r0
    6758:	9a01      	ldr	r2, [sp, #4]
    675a:	2a00      	cmp	r2, #0
    675c:	d0f6      	beq.n	674c <_strtoul_l.isra.0+0xe4>
    675e:	9a03      	ldr	r2, [sp, #12]
    6760:	2b00      	cmp	r3, #0
    6762:	d000      	beq.n	6766 <_strtoul_l.isra.0+0xfe>
    6764:	1e6a      	subs	r2, r5, #1
    6766:	9b01      	ldr	r3, [sp, #4]
    6768:	601a      	str	r2, [r3, #0]
    676a:	e7ef      	b.n	674c <_strtoul_l.isra.0+0xe4>
    676c:	2430      	movs	r4, #48	; 0x30
    676e:	2f00      	cmp	r7, #0
    6770:	d1aa      	bne.n	66c8 <_strtoul_l.isra.0+0x60>
    6772:	3708      	adds	r7, #8
    6774:	e7a8      	b.n	66c8 <_strtoul_l.isra.0+0x60>
	...

00006778 <_strtoul_r>:
    6778:	b513      	push	{r0, r1, r4, lr}
    677a:	4c05      	ldr	r4, [pc, #20]	; (6790 <_strtoul_r+0x18>)
    677c:	6824      	ldr	r4, [r4, #0]
    677e:	6a24      	ldr	r4, [r4, #32]
    6780:	2c00      	cmp	r4, #0
    6782:	d100      	bne.n	6786 <_strtoul_r+0xe>
    6784:	4c03      	ldr	r4, [pc, #12]	; (6794 <_strtoul_r+0x1c>)
    6786:	9400      	str	r4, [sp, #0]
    6788:	f7ff ff6e 	bl	6668 <_strtoul_l.isra.0>
    678c:	bd16      	pop	{r1, r2, r4, pc}
    678e:	46c0      	nop			; (mov r8, r8)
    6790:	20000054 	.word	0x20000054
    6794:	200000b8 	.word	0x200000b8

00006798 <__submore>:
    6798:	000b      	movs	r3, r1
    679a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    679c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    679e:	3344      	adds	r3, #68	; 0x44
    67a0:	000c      	movs	r4, r1
    67a2:	429d      	cmp	r5, r3
    67a4:	d11c      	bne.n	67e0 <__submore+0x48>
    67a6:	2680      	movs	r6, #128	; 0x80
    67a8:	00f6      	lsls	r6, r6, #3
    67aa:	0031      	movs	r1, r6
    67ac:	f7fe fff4 	bl	5798 <_malloc_r>
    67b0:	2800      	cmp	r0, #0
    67b2:	d102      	bne.n	67ba <__submore+0x22>
    67b4:	2001      	movs	r0, #1
    67b6:	4240      	negs	r0, r0
    67b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    67ba:	0023      	movs	r3, r4
    67bc:	6360      	str	r0, [r4, #52]	; 0x34
    67be:	63a6      	str	r6, [r4, #56]	; 0x38
    67c0:	3346      	adds	r3, #70	; 0x46
    67c2:	781a      	ldrb	r2, [r3, #0]
    67c4:	4b10      	ldr	r3, [pc, #64]	; (6808 <__submore+0x70>)
    67c6:	54c2      	strb	r2, [r0, r3]
    67c8:	0023      	movs	r3, r4
    67ca:	3345      	adds	r3, #69	; 0x45
    67cc:	781a      	ldrb	r2, [r3, #0]
    67ce:	4b0f      	ldr	r3, [pc, #60]	; (680c <__submore+0x74>)
    67d0:	54c2      	strb	r2, [r0, r3]
    67d2:	782a      	ldrb	r2, [r5, #0]
    67d4:	4b0e      	ldr	r3, [pc, #56]	; (6810 <__submore+0x78>)
    67d6:	54c2      	strb	r2, [r0, r3]
    67d8:	18c0      	adds	r0, r0, r3
    67da:	6020      	str	r0, [r4, #0]
    67dc:	2000      	movs	r0, #0
    67de:	e7eb      	b.n	67b8 <__submore+0x20>
    67e0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    67e2:	0029      	movs	r1, r5
    67e4:	0073      	lsls	r3, r6, #1
    67e6:	001a      	movs	r2, r3
    67e8:	9301      	str	r3, [sp, #4]
    67ea:	f000 f8fc 	bl	69e6 <_realloc_r>
    67ee:	1e05      	subs	r5, r0, #0
    67f0:	d0e0      	beq.n	67b4 <__submore+0x1c>
    67f2:	1987      	adds	r7, r0, r6
    67f4:	0001      	movs	r1, r0
    67f6:	0032      	movs	r2, r6
    67f8:	0038      	movs	r0, r7
    67fa:	f7fe f9f1 	bl	4be0 <memcpy>
    67fe:	9b01      	ldr	r3, [sp, #4]
    6800:	6027      	str	r7, [r4, #0]
    6802:	6365      	str	r5, [r4, #52]	; 0x34
    6804:	63a3      	str	r3, [r4, #56]	; 0x38
    6806:	e7e9      	b.n	67dc <__submore+0x44>
    6808:	000003ff 	.word	0x000003ff
    680c:	000003fe 	.word	0x000003fe
    6810:	000003fd 	.word	0x000003fd

00006814 <_ungetc_r>:
    6814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6816:	0005      	movs	r5, r0
    6818:	000e      	movs	r6, r1
    681a:	0014      	movs	r4, r2
    681c:	1c4b      	adds	r3, r1, #1
    681e:	d103      	bne.n	6828 <_ungetc_r+0x14>
    6820:	2601      	movs	r6, #1
    6822:	4276      	negs	r6, r6
    6824:	0030      	movs	r0, r6
    6826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6828:	2800      	cmp	r0, #0
    682a:	d004      	beq.n	6836 <_ungetc_r+0x22>
    682c:	6983      	ldr	r3, [r0, #24]
    682e:	2b00      	cmp	r3, #0
    6830:	d101      	bne.n	6836 <_ungetc_r+0x22>
    6832:	f7fe fe1d 	bl	5470 <__sinit>
    6836:	4b2d      	ldr	r3, [pc, #180]	; (68ec <_ungetc_r+0xd8>)
    6838:	429c      	cmp	r4, r3
    683a:	d12d      	bne.n	6898 <_ungetc_r+0x84>
    683c:	686c      	ldr	r4, [r5, #4]
    683e:	2220      	movs	r2, #32
    6840:	89a3      	ldrh	r3, [r4, #12]
    6842:	4393      	bics	r3, r2
    6844:	b21b      	sxth	r3, r3
    6846:	81a3      	strh	r3, [r4, #12]
    6848:	b29b      	uxth	r3, r3
    684a:	075a      	lsls	r2, r3, #29
    684c:	d413      	bmi.n	6876 <_ungetc_r+0x62>
    684e:	06da      	lsls	r2, r3, #27
    6850:	d5e6      	bpl.n	6820 <_ungetc_r+0xc>
    6852:	2708      	movs	r7, #8
    6854:	423b      	tst	r3, r7
    6856:	d00a      	beq.n	686e <_ungetc_r+0x5a>
    6858:	0021      	movs	r1, r4
    685a:	0028      	movs	r0, r5
    685c:	f7fe fd86 	bl	536c <_fflush_r>
    6860:	2800      	cmp	r0, #0
    6862:	d1dd      	bne.n	6820 <_ungetc_r+0xc>
    6864:	89a3      	ldrh	r3, [r4, #12]
    6866:	60a0      	str	r0, [r4, #8]
    6868:	43bb      	bics	r3, r7
    686a:	81a3      	strh	r3, [r4, #12]
    686c:	61a0      	str	r0, [r4, #24]
    686e:	2304      	movs	r3, #4
    6870:	89a2      	ldrh	r2, [r4, #12]
    6872:	4313      	orrs	r3, r2
    6874:	81a3      	strh	r3, [r4, #12]
    6876:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6878:	b2f7      	uxtb	r7, r6
    687a:	6863      	ldr	r3, [r4, #4]
    687c:	b2f6      	uxtb	r6, r6
    687e:	2a00      	cmp	r2, #0
    6880:	d01b      	beq.n	68ba <_ungetc_r+0xa6>
    6882:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    6884:	4293      	cmp	r3, r2
    6886:	da11      	bge.n	68ac <_ungetc_r+0x98>
    6888:	6823      	ldr	r3, [r4, #0]
    688a:	3b01      	subs	r3, #1
    688c:	6023      	str	r3, [r4, #0]
    688e:	701f      	strb	r7, [r3, #0]
    6890:	6863      	ldr	r3, [r4, #4]
    6892:	3301      	adds	r3, #1
    6894:	6063      	str	r3, [r4, #4]
    6896:	e7c5      	b.n	6824 <_ungetc_r+0x10>
    6898:	4b15      	ldr	r3, [pc, #84]	; (68f0 <_ungetc_r+0xdc>)
    689a:	429c      	cmp	r4, r3
    689c:	d101      	bne.n	68a2 <_ungetc_r+0x8e>
    689e:	68ac      	ldr	r4, [r5, #8]
    68a0:	e7cd      	b.n	683e <_ungetc_r+0x2a>
    68a2:	4b14      	ldr	r3, [pc, #80]	; (68f4 <_ungetc_r+0xe0>)
    68a4:	429c      	cmp	r4, r3
    68a6:	d1ca      	bne.n	683e <_ungetc_r+0x2a>
    68a8:	68ec      	ldr	r4, [r5, #12]
    68aa:	e7c8      	b.n	683e <_ungetc_r+0x2a>
    68ac:	0021      	movs	r1, r4
    68ae:	0028      	movs	r0, r5
    68b0:	f7ff ff72 	bl	6798 <__submore>
    68b4:	2800      	cmp	r0, #0
    68b6:	d0e7      	beq.n	6888 <_ungetc_r+0x74>
    68b8:	e7b2      	b.n	6820 <_ungetc_r+0xc>
    68ba:	6921      	ldr	r1, [r4, #16]
    68bc:	6822      	ldr	r2, [r4, #0]
    68be:	2900      	cmp	r1, #0
    68c0:	d007      	beq.n	68d2 <_ungetc_r+0xbe>
    68c2:	4291      	cmp	r1, r2
    68c4:	d205      	bcs.n	68d2 <_ungetc_r+0xbe>
    68c6:	1e51      	subs	r1, r2, #1
    68c8:	7808      	ldrb	r0, [r1, #0]
    68ca:	4286      	cmp	r6, r0
    68cc:	d101      	bne.n	68d2 <_ungetc_r+0xbe>
    68ce:	6021      	str	r1, [r4, #0]
    68d0:	e7df      	b.n	6892 <_ungetc_r+0x7e>
    68d2:	6423      	str	r3, [r4, #64]	; 0x40
    68d4:	0023      	movs	r3, r4
    68d6:	3344      	adds	r3, #68	; 0x44
    68d8:	6363      	str	r3, [r4, #52]	; 0x34
    68da:	2303      	movs	r3, #3
    68dc:	63a3      	str	r3, [r4, #56]	; 0x38
    68de:	0023      	movs	r3, r4
    68e0:	3346      	adds	r3, #70	; 0x46
    68e2:	63e2      	str	r2, [r4, #60]	; 0x3c
    68e4:	701f      	strb	r7, [r3, #0]
    68e6:	6023      	str	r3, [r4, #0]
    68e8:	2301      	movs	r3, #1
    68ea:	e7d3      	b.n	6894 <_ungetc_r+0x80>
    68ec:	000071d0 	.word	0x000071d0
    68f0:	000071f0 	.word	0x000071f0
    68f4:	000071b0 	.word	0x000071b0

000068f8 <__ascii_wctomb>:
    68f8:	1e0b      	subs	r3, r1, #0
    68fa:	d004      	beq.n	6906 <__ascii_wctomb+0xe>
    68fc:	2aff      	cmp	r2, #255	; 0xff
    68fe:	d904      	bls.n	690a <__ascii_wctomb+0x12>
    6900:	238a      	movs	r3, #138	; 0x8a
    6902:	6003      	str	r3, [r0, #0]
    6904:	3b8b      	subs	r3, #139	; 0x8b
    6906:	0018      	movs	r0, r3
    6908:	4770      	bx	lr
    690a:	700a      	strb	r2, [r1, #0]
    690c:	2301      	movs	r3, #1
    690e:	e7fa      	b.n	6906 <__ascii_wctomb+0xe>

00006910 <_write_r>:
    6910:	b570      	push	{r4, r5, r6, lr}
    6912:	0005      	movs	r5, r0
    6914:	0008      	movs	r0, r1
    6916:	0011      	movs	r1, r2
    6918:	2200      	movs	r2, #0
    691a:	4c06      	ldr	r4, [pc, #24]	; (6934 <_write_r+0x24>)
    691c:	6022      	str	r2, [r4, #0]
    691e:	001a      	movs	r2, r3
    6920:	f7fc f988 	bl	2c34 <_write>
    6924:	1c43      	adds	r3, r0, #1
    6926:	d103      	bne.n	6930 <_write_r+0x20>
    6928:	6823      	ldr	r3, [r4, #0]
    692a:	2b00      	cmp	r3, #0
    692c:	d000      	beq.n	6930 <_write_r+0x20>
    692e:	602b      	str	r3, [r5, #0]
    6930:	bd70      	pop	{r4, r5, r6, pc}
    6932:	46c0      	nop			; (mov r8, r8)
    6934:	20000410 	.word	0x20000410

00006938 <_close_r>:
    6938:	2300      	movs	r3, #0
    693a:	b570      	push	{r4, r5, r6, lr}
    693c:	4c06      	ldr	r4, [pc, #24]	; (6958 <_close_r+0x20>)
    693e:	0005      	movs	r5, r0
    6940:	0008      	movs	r0, r1
    6942:	6023      	str	r3, [r4, #0]
    6944:	f7fc f9b0 	bl	2ca8 <_close>
    6948:	1c43      	adds	r3, r0, #1
    694a:	d103      	bne.n	6954 <_close_r+0x1c>
    694c:	6823      	ldr	r3, [r4, #0]
    694e:	2b00      	cmp	r3, #0
    6950:	d000      	beq.n	6954 <_close_r+0x1c>
    6952:	602b      	str	r3, [r5, #0]
    6954:	bd70      	pop	{r4, r5, r6, pc}
    6956:	46c0      	nop			; (mov r8, r8)
    6958:	20000410 	.word	0x20000410

0000695c <_fstat_r>:
    695c:	2300      	movs	r3, #0
    695e:	b570      	push	{r4, r5, r6, lr}
    6960:	4c06      	ldr	r4, [pc, #24]	; (697c <_fstat_r+0x20>)
    6962:	0005      	movs	r5, r0
    6964:	0008      	movs	r0, r1
    6966:	0011      	movs	r1, r2
    6968:	6023      	str	r3, [r4, #0]
    696a:	f7fc f9a0 	bl	2cae <_fstat>
    696e:	1c43      	adds	r3, r0, #1
    6970:	d103      	bne.n	697a <_fstat_r+0x1e>
    6972:	6823      	ldr	r3, [r4, #0]
    6974:	2b00      	cmp	r3, #0
    6976:	d000      	beq.n	697a <_fstat_r+0x1e>
    6978:	602b      	str	r3, [r5, #0]
    697a:	bd70      	pop	{r4, r5, r6, pc}
    697c:	20000410 	.word	0x20000410

00006980 <_isatty_r>:
    6980:	2300      	movs	r3, #0
    6982:	b570      	push	{r4, r5, r6, lr}
    6984:	4c06      	ldr	r4, [pc, #24]	; (69a0 <_isatty_r+0x20>)
    6986:	0005      	movs	r5, r0
    6988:	0008      	movs	r0, r1
    698a:	6023      	str	r3, [r4, #0]
    698c:	f7fc f994 	bl	2cb8 <_isatty>
    6990:	1c43      	adds	r3, r0, #1
    6992:	d103      	bne.n	699c <_isatty_r+0x1c>
    6994:	6823      	ldr	r3, [r4, #0]
    6996:	2b00      	cmp	r3, #0
    6998:	d000      	beq.n	699c <_isatty_r+0x1c>
    699a:	602b      	str	r3, [r5, #0]
    699c:	bd70      	pop	{r4, r5, r6, pc}
    699e:	46c0      	nop			; (mov r8, r8)
    69a0:	20000410 	.word	0x20000410

000069a4 <_lseek_r>:
    69a4:	b570      	push	{r4, r5, r6, lr}
    69a6:	0005      	movs	r5, r0
    69a8:	0008      	movs	r0, r1
    69aa:	0011      	movs	r1, r2
    69ac:	2200      	movs	r2, #0
    69ae:	4c06      	ldr	r4, [pc, #24]	; (69c8 <_lseek_r+0x24>)
    69b0:	6022      	str	r2, [r4, #0]
    69b2:	001a      	movs	r2, r3
    69b4:	f7fc f982 	bl	2cbc <_lseek>
    69b8:	1c43      	adds	r3, r0, #1
    69ba:	d103      	bne.n	69c4 <_lseek_r+0x20>
    69bc:	6823      	ldr	r3, [r4, #0]
    69be:	2b00      	cmp	r3, #0
    69c0:	d000      	beq.n	69c4 <_lseek_r+0x20>
    69c2:	602b      	str	r3, [r5, #0]
    69c4:	bd70      	pop	{r4, r5, r6, pc}
    69c6:	46c0      	nop			; (mov r8, r8)
    69c8:	20000410 	.word	0x20000410

000069cc <memchr>:
    69cc:	b2c9      	uxtb	r1, r1
    69ce:	1882      	adds	r2, r0, r2
    69d0:	4290      	cmp	r0, r2
    69d2:	d101      	bne.n	69d8 <memchr+0xc>
    69d4:	2000      	movs	r0, #0
    69d6:	4770      	bx	lr
    69d8:	7803      	ldrb	r3, [r0, #0]
    69da:	428b      	cmp	r3, r1
    69dc:	d0fb      	beq.n	69d6 <memchr+0xa>
    69de:	3001      	adds	r0, #1
    69e0:	e7f6      	b.n	69d0 <memchr+0x4>

000069e2 <__malloc_lock>:
    69e2:	4770      	bx	lr

000069e4 <__malloc_unlock>:
    69e4:	4770      	bx	lr

000069e6 <_realloc_r>:
    69e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69e8:	0007      	movs	r7, r0
    69ea:	000d      	movs	r5, r1
    69ec:	0016      	movs	r6, r2
    69ee:	2900      	cmp	r1, #0
    69f0:	d105      	bne.n	69fe <_realloc_r+0x18>
    69f2:	0011      	movs	r1, r2
    69f4:	f7fe fed0 	bl	5798 <_malloc_r>
    69f8:	0004      	movs	r4, r0
    69fa:	0020      	movs	r0, r4
    69fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69fe:	2a00      	cmp	r2, #0
    6a00:	d103      	bne.n	6a0a <_realloc_r+0x24>
    6a02:	f7fe fe7f 	bl	5704 <_free_r>
    6a06:	0034      	movs	r4, r6
    6a08:	e7f7      	b.n	69fa <_realloc_r+0x14>
    6a0a:	f000 f827 	bl	6a5c <_malloc_usable_size_r>
    6a0e:	002c      	movs	r4, r5
    6a10:	4286      	cmp	r6, r0
    6a12:	d9f2      	bls.n	69fa <_realloc_r+0x14>
    6a14:	0031      	movs	r1, r6
    6a16:	0038      	movs	r0, r7
    6a18:	f7fe febe 	bl	5798 <_malloc_r>
    6a1c:	1e04      	subs	r4, r0, #0
    6a1e:	d0ec      	beq.n	69fa <_realloc_r+0x14>
    6a20:	0029      	movs	r1, r5
    6a22:	0032      	movs	r2, r6
    6a24:	f7fe f8dc 	bl	4be0 <memcpy>
    6a28:	0029      	movs	r1, r5
    6a2a:	0038      	movs	r0, r7
    6a2c:	f7fe fe6a 	bl	5704 <_free_r>
    6a30:	e7e3      	b.n	69fa <_realloc_r+0x14>
	...

00006a34 <_read_r>:
    6a34:	b570      	push	{r4, r5, r6, lr}
    6a36:	0005      	movs	r5, r0
    6a38:	0008      	movs	r0, r1
    6a3a:	0011      	movs	r1, r2
    6a3c:	2200      	movs	r2, #0
    6a3e:	4c06      	ldr	r4, [pc, #24]	; (6a58 <_read_r+0x24>)
    6a40:	6022      	str	r2, [r4, #0]
    6a42:	001a      	movs	r2, r3
    6a44:	f7fc f8d4 	bl	2bf0 <_read>
    6a48:	1c43      	adds	r3, r0, #1
    6a4a:	d103      	bne.n	6a54 <_read_r+0x20>
    6a4c:	6823      	ldr	r3, [r4, #0]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d000      	beq.n	6a54 <_read_r+0x20>
    6a52:	602b      	str	r3, [r5, #0]
    6a54:	bd70      	pop	{r4, r5, r6, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	20000410 	.word	0x20000410

00006a5c <_malloc_usable_size_r>:
    6a5c:	1f0b      	subs	r3, r1, #4
    6a5e:	681b      	ldr	r3, [r3, #0]
    6a60:	1f18      	subs	r0, r3, #4
    6a62:	2b00      	cmp	r3, #0
    6a64:	da01      	bge.n	6a6a <_malloc_usable_size_r+0xe>
    6a66:	580b      	ldr	r3, [r1, r0]
    6a68:	18c0      	adds	r0, r0, r3
    6a6a:	4770      	bx	lr
    6a6c:	000003ba 	.word	0x000003ba
    6a70:	00000606 	.word	0x00000606
    6a74:	00000606 	.word	0x00000606
    6a78:	00000606 	.word	0x00000606
    6a7c:	00000606 	.word	0x00000606
    6a80:	00000606 	.word	0x00000606
    6a84:	00000606 	.word	0x00000606
    6a88:	00000606 	.word	0x00000606
    6a8c:	00000606 	.word	0x00000606
    6a90:	00000606 	.word	0x00000606
    6a94:	00000606 	.word	0x00000606
    6a98:	00000606 	.word	0x00000606
    6a9c:	00000606 	.word	0x00000606
    6aa0:	00000606 	.word	0x00000606
    6aa4:	00000606 	.word	0x00000606
    6aa8:	00000606 	.word	0x00000606
    6aac:	000003a2 	.word	0x000003a2
    6ab0:	00000606 	.word	0x00000606
    6ab4:	00000606 	.word	0x00000606
    6ab8:	00000606 	.word	0x00000606
    6abc:	00000606 	.word	0x00000606
    6ac0:	00000606 	.word	0x00000606
    6ac4:	00000606 	.word	0x00000606
    6ac8:	00000606 	.word	0x00000606
    6acc:	00000606 	.word	0x00000606
    6ad0:	00000606 	.word	0x00000606
    6ad4:	00000606 	.word	0x00000606
    6ad8:	00000606 	.word	0x00000606
    6adc:	00000606 	.word	0x00000606
    6ae0:	00000606 	.word	0x00000606
    6ae4:	00000606 	.word	0x00000606
    6ae8:	00000606 	.word	0x00000606
    6aec:	000003b2 	.word	0x000003b2
    6af0:	00000606 	.word	0x00000606
    6af4:	00000606 	.word	0x00000606
    6af8:	00000606 	.word	0x00000606
    6afc:	00000606 	.word	0x00000606
    6b00:	00000606 	.word	0x00000606
    6b04:	00000606 	.word	0x00000606
    6b08:	00000606 	.word	0x00000606
    6b0c:	00000606 	.word	0x00000606
    6b10:	00000606 	.word	0x00000606
    6b14:	00000606 	.word	0x00000606
    6b18:	00000606 	.word	0x00000606
    6b1c:	00000606 	.word	0x00000606
    6b20:	00000606 	.word	0x00000606
    6b24:	00000606 	.word	0x00000606
    6b28:	00000606 	.word	0x00000606
    6b2c:	000003aa 	.word	0x000003aa
    6b30:	000003c2 	.word	0x000003c2
    6b34:	0000038a 	.word	0x0000038a
    6b38:	0000039a 	.word	0x0000039a
    6b3c:	00000392 	.word	0x00000392
    6b40:	00000002 	.word	0x00000002
    6b44:	00000003 	.word	0x00000003
    6b48:	00000028 	.word	0x00000028
    6b4c:	00000029 	.word	0x00000029
    6b50:	00000004 	.word	0x00000004
    6b54:	00000005 	.word	0x00000005
    6b58:	00000006 	.word	0x00000006
    6b5c:	00000007 	.word	0x00000007
    6b60:	0000ffff 	.word	0x0000ffff
    6b64:	0000ffff 	.word	0x0000ffff
    6b68:	00000022 	.word	0x00000022
    6b6c:	00000023 	.word	0x00000023
    6b70:	0000ffff 	.word	0x0000ffff
    6b74:	0000ffff 	.word	0x0000ffff
    6b78:	0000ffff 	.word	0x0000ffff
    6b7c:	0000ffff 	.word	0x0000ffff
    6b80:	00000008 	.word	0x00000008
    6b84:	00000009 	.word	0x00000009
    6b88:	0000000a 	.word	0x0000000a
    6b8c:	0000000b 	.word	0x0000000b
    6b90:	20434441 	.word	0x20434441
    6b94:	75736552 	.word	0x75736552
    6b98:	203a746c 	.word	0x203a746c
    6b9c:	0a0d6425 	.word	0x0a0d6425
    6ba0:	00000000 	.word	0x00000000
    6ba4:	00000042 	.word	0x00000042
    6ba8:	20656854 	.word	0x20656854
    6bac:	6576656c 	.word	0x6576656c
    6bb0:	6573206c 	.word	0x6573206c
    6bb4:	73692074 	.word	0x73692074
    6bb8:	0d642520 	.word	0x0d642520
    6bbc:	0000000a 	.word	0x0000000a
    6bc0:	20746f4e 	.word	0x20746f4e
    6bc4:	6c706d69 	.word	0x6c706d69
    6bc8:	6e656d65 	.word	0x6e656d65
    6bcc:	20646574 	.word	0x20646574
    6bd0:	21746579 	.word	0x21746579
    6bd4:	0000000d 	.word	0x0000000d
    6bd8:	6d6d6f43 	.word	0x6d6d6f43
    6bdc:	20646e61 	.word	0x20646e61
    6be0:	7473694c 	.word	0x7473694c
    6be4:	00000d3a 	.word	0x00000d3a
    6be8:	20732509 	.word	0x20732509
    6bec:	0a0d7325 	.word	0x0a0d7325
    6bf0:	73250909 	.word	0x73250909
    6bf4:	00000a0d 	.word	0x00000a0d
    6bf8:	20656854 	.word	0x20656854
    6bfc:	76616c73 	.word	0x76616c73
    6c00:	64612065 	.word	0x64612065
    6c04:	73657264 	.word	0x73657264
    6c08:	73692073 	.word	0x73692073
    6c0c:	20642520 	.word	0x20642520
    6c10:	00000a0d 	.word	0x00000a0d
    6c14:	2e353532 	.word	0x2e353532
    6c18:	2e353532 	.word	0x2e353532
    6c1c:	2e353532 	.word	0x2e353532
    6c20:	00353532 	.word	0x00353532
    6c24:	41205049 	.word	0x41205049
    6c28:	65726464 	.word	0x65726464
    6c2c:	203a7373 	.word	0x203a7373
    6c30:	0a0d7325 	.word	0x0a0d7325
    6c34:	00000000 	.word	0x00000000
    6c38:	323a3130 	.word	0x323a3130
    6c3c:	35343a33 	.word	0x35343a33
    6c40:	3a37363a 	.word	0x3a37363a
    6c44:	613a3938 	.word	0x613a3938
    6c48:	00000062 	.word	0x00000062
    6c4c:	2043414d 	.word	0x2043414d
    6c50:	72646441 	.word	0x72646441
    6c54:	3a737365 	.word	0x3a737365
    6c58:	0d732520 	.word	0x0d732520
    6c5c:	0000000a 	.word	0x0000000a
    6c60:	706d6554 	.word	0x706d6554
    6c64:	74617265 	.word	0x74617265
    6c68:	20657275 	.word	0x20657275
    6c6c:	75736552 	.word	0x75736552
    6c70:	203a746c 	.word	0x203a746c
    6c74:	0d206425 	.word	0x0d206425
    6c78:	0000000a 	.word	0x0000000a
    6c7c:	64616552 	.word	0x64616552
    6c80:	20676e69 	.word	0x20676e69
    6c84:	6d6f7266 	.word	0x6d6f7266
    6c88:	63634120 	.word	0x63634120
    6c8c:	72656c65 	.word	0x72656c65
    6c90:	74656d6f 	.word	0x74656d6f
    6c94:	2e2e7265 	.word	0x2e2e7265
    6c98:	00000d2e 	.word	0x00000d2e
    6c9c:	64616552 	.word	0x64616552
    6ca0:	20676e69 	.word	0x20676e69
    6ca4:	6d6f7266 	.word	0x6d6f7266
    6ca8:	72794720 	.word	0x72794720
    6cac:	2e2e2e6f 	.word	0x2e2e2e6f
    6cb0:	0000000d 	.word	0x0000000d
    6cb4:	656e6f44 	.word	0x656e6f44
    6cb8:	00000d21 	.word	0x00000d21
    6cbc:	00000020 	.word	0x00000020
    6cc0:	20746f4e 	.word	0x20746f4e
    6cc4:	756f6e65 	.word	0x756f6e65
    6cc8:	61206867 	.word	0x61206867
    6ccc:	6d756772 	.word	0x6d756772
    6cd0:	73746e65 	.word	0x73746e65
    6cd4:	72542021 	.word	0x72542021
    6cd8:	68222079 	.word	0x68222079
    6cdc:	22706c65 	.word	0x22706c65
    6ce0:	00000d2e 	.word	0x00000d2e
    6ce4:	00000041 	.word	0x00000041
    6ce8:	65746e45 	.word	0x65746e45
    6cec:	20612072 	.word	0x20612072
    6cf0:	696c6176 	.word	0x696c6176
    6cf4:	6f502064 	.word	0x6f502064
    6cf8:	20217472 	.word	0x20217472
    6cfc:	20797254 	.word	0x20797254
    6d00:	6c656822 	.word	0x6c656822
    6d04:	0d2e2270 	.word	0x0d2e2270
    6d08:	00000000 	.word	0x00000000
    6d0c:	61766e49 	.word	0x61766e49
    6d10:	2064696c 	.word	0x2064696c
    6d14:	6d6d6f63 	.word	0x6d6d6f63
    6d18:	21646e61 	.word	0x21646e61
    6d1c:	70795420 	.word	0x70795420
    6d20:	68222065 	.word	0x68222065
    6d24:	22706c65 	.word	0x22706c65
    6d28:	726f6620 	.word	0x726f6620
    6d2c:	6c206120 	.word	0x6c206120
    6d30:	20747369 	.word	0x20747369
    6d34:	6120666f 	.word	0x6120666f
    6d38:	6c696176 	.word	0x6c696176
    6d3c:	656c6261 	.word	0x656c6261
    6d40:	6d6f6320 	.word	0x6d6f6320
    6d44:	646e616d 	.word	0x646e616d
    6d48:	000d2e73 	.word	0x000d2e73
    6d4c:	6c707041 	.word	0x6c707041
    6d50:	74616369 	.word	0x74616369
    6d54:	206e6f69 	.word	0x206e6f69
    6d58:	73726556 	.word	0x73726556
    6d5c:	3a6e6f69 	.word	0x3a6e6f69
    6d60:	0d732520 	.word	0x0d732520
    6d64:	0000000a 	.word	0x0000000a
    6d68:	2e312e30 	.word	0x2e312e30
    6d6c:	00000030 	.word	0x00000030
    6d70:	746f6f42 	.word	0x746f6f42
    6d74:	64616f6c 	.word	0x64616f6c
    6d78:	56207265 	.word	0x56207265
    6d7c:	69737265 	.word	0x69737265
    6d80:	203a6e6f 	.word	0x203a6e6f
    6d84:	0a0d7325 	.word	0x0a0d7325
    6d88:	00000000 	.word	0x00000000
    6d8c:	70736944 	.word	0x70736944
    6d90:	2079616c 	.word	0x2079616c
    6d94:	206c6c61 	.word	0x206c6c61
    6d98:	6d6d6f63 	.word	0x6d6d6f63
    6d9c:	73646e61 	.word	0x73646e61
    6da0:	00000000 	.word	0x00000000
    6da4:	6e697250 	.word	0x6e697250
    6da8:	6f622074 	.word	0x6f622074
    6dac:	6f6c746f 	.word	0x6f6c746f
    6db0:	72656461 	.word	0x72656461
    6db4:	72696620 	.word	0x72696620
    6db8:	7261776d 	.word	0x7261776d
    6dbc:	6e692065 	.word	0x6e692065
    6dc0:	6d726f66 	.word	0x6d726f66
    6dc4:	6f697461 	.word	0x6f697461
    6dc8:	00002e6e 	.word	0x00002e6e
    6dcc:	6e697250 	.word	0x6e697250
    6dd0:	70612074 	.word	0x70612074
    6dd4:	63696c70 	.word	0x63696c70
    6dd8:	6f697461 	.word	0x6f697461
    6ddc:	6576206e 	.word	0x6576206e
    6de0:	6f697372 	.word	0x6f697372
    6de4:	6e69206e 	.word	0x6e69206e
    6de8:	6d726f66 	.word	0x6d726f66
    6dec:	6f697461 	.word	0x6f697461
    6df0:	00002e6e 	.word	0x00002e6e
    6df4:	726f705b 	.word	0x726f705b
    6df8:	5b205d74 	.word	0x5b205d74
    6dfc:	5f6e6970 	.word	0x5f6e6970
    6e00:	5d6d756e 	.word	0x5d6d756e
    6e04:	00000000 	.word	0x00000000
    6e08:	20746553 	.word	0x20746553
    6e0c:	4f495047 	.word	0x4f495047
    6e10:	6e697020 	.word	0x6e697020
    6e14:	20746120 	.word	0x20746120
    6e18:	69672061 	.word	0x69672061
    6e1c:	206e6576 	.word	0x206e6576
    6e20:	74726f70 	.word	0x74726f70
    6e24:	67696820 	.word	0x67696820
    6e28:	00002e68 	.word	0x00002e68
    6e2c:	20746553 	.word	0x20746553
    6e30:	4f495047 	.word	0x4f495047
    6e34:	6e697020 	.word	0x6e697020
    6e38:	20746120 	.word	0x20746120
    6e3c:	69672061 	.word	0x69672061
    6e40:	206e6576 	.word	0x206e6576
    6e44:	74726f70 	.word	0x74726f70
    6e48:	776f6c20 	.word	0x776f6c20
    6e4c:	0000002e 	.word	0x0000002e
    6e50:	20746547 	.word	0x20746547
    6e54:	74617473 	.word	0x74617473
    6e58:	666f2065 	.word	0x666f2065
    6e5c:	47206120 	.word	0x47206120
    6e60:	204f4950 	.word	0x204f4950
    6e64:	2e6e6970 	.word	0x2e6e6970
    6e68:	746e4528 	.word	0x746e4528
    6e6c:	42207265 	.word	0x42207265
    6e70:	6f203220 	.word	0x6f203220
    6e74:	20422072 	.word	0x20422072
    6e78:	00002933 	.word	0x00002933
    6e7c:	6e697250 	.word	0x6e697250
    6e80:	68742074 	.word	0x68742074
    6e84:	414d2065 	.word	0x414d2065
    6e88:	64612043 	.word	0x64612043
    6e8c:	73657264 	.word	0x73657264
    6e90:	00002e73 	.word	0x00002e73
    6e94:	6e697250 	.word	0x6e697250
    6e98:	68742074 	.word	0x68742074
    6e9c:	50492065 	.word	0x50492065
    6ea0:	64644120 	.word	0x64644120
    6ea4:	73736572 	.word	0x73736572
    6ea8:	0000002e 	.word	0x0000002e
    6eac:	6165725b 	.word	0x6165725b
    6eb0:	676e6964 	.word	0x676e6964
    6eb4:	756f6320 	.word	0x756f6320
    6eb8:	205d746e 	.word	0x205d746e
    6ebc:	746e695b 	.word	0x746e695b
    6ec0:	61767265 	.word	0x61767265
    6ec4:	6e69206c 	.word	0x6e69206c
    6ec8:	5d736d20 	.word	0x5d736d20
    6ecc:	00000000 	.word	0x00000000
    6ed0:	64616552 	.word	0x64616552
    6ed4:	6f726620 	.word	0x6f726620
    6ed8:	6874206d 	.word	0x6874206d
    6edc:	79472065 	.word	0x79472065
    6ee0:	63736f72 	.word	0x63736f72
    6ee4:	2065706f 	.word	0x2065706f
    6ee8:	736e6573 	.word	0x736e6573
    6eec:	002e726f 	.word	0x002e726f
    6ef0:	64616552 	.word	0x64616552
    6ef4:	6f726620 	.word	0x6f726620
    6ef8:	6874206d 	.word	0x6874206d
    6efc:	63412065 	.word	0x63412065
    6f00:	656c6563 	.word	0x656c6563
    6f04:	656d6f72 	.word	0x656d6f72
    6f08:	20726574 	.word	0x20726574
    6f0c:	736e6573 	.word	0x736e6573
    6f10:	002e726f 	.word	0x002e726f
    6f14:	20746547 	.word	0x20746547
    6f18:	20656874 	.word	0x20656874
    6f1c:	20434441 	.word	0x20434441
    6f20:	756c6176 	.word	0x756c6176
    6f24:	666f2065 	.word	0x666f2065
    6f28:	206e6120 	.word	0x206e6120
    6f2c:	75706e69 	.word	0x75706e69
    6f30:	69702074 	.word	0x69702074
    6f34:	00002e6e 	.word	0x00002e6e
    6f38:	6e697250 	.word	0x6e697250
    6f3c:	68742074 	.word	0x68742074
    6f40:	65742065 	.word	0x65742065
    6f44:	7265706d 	.word	0x7265706d
    6f48:	72757461 	.word	0x72757461
    6f4c:	65722065 	.word	0x65722065
    6f50:	6e696461 	.word	0x6e696461
    6f54:	666f2067 	.word	0x666f2067
    6f58:	65687420 	.word	0x65687420
    6f5c:	2d6e6f20 	.word	0x2d6e6f20
    6f60:	72616f62 	.word	0x72616f62
    6f64:	434d2064 	.word	0x434d2064
    6f68:	65742055 	.word	0x65742055
    6f6c:	7265706d 	.word	0x7265706d
    6f70:	72757461 	.word	0x72757461
    6f74:	65732065 	.word	0x65732065
    6f78:	726f736e 	.word	0x726f736e
    6f7c:	0000002e 	.word	0x0000002e
    6f80:	6e697250 	.word	0x6e697250
    6f84:	756f2074 	.word	0x756f2074
    6f88:	696c2074 	.word	0x696c2074
    6f8c:	6f207473 	.word	0x6f207473
    6f90:	64612066 	.word	0x64612066
    6f94:	73657264 	.word	0x73657264
    6f98:	20736573 	.word	0x20736573
    6f9c:	4920666f 	.word	0x4920666f
    6fa0:	64204332 	.word	0x64204332
    6fa4:	63697665 	.word	0x63697665
    6fa8:	6f207365 	.word	0x6f207365
    6fac:	7562206e 	.word	0x7562206e
    6fb0:	00002e73 	.word	0x00002e73
    6fb4:	5f633269 	.word	0x5f633269
    6fb8:	6e616373 	.word	0x6e616373
    6fbc:	00000000 	.word	0x00000000
    6fc0:	5f75636d 	.word	0x5f75636d
    6fc4:	706d6574 	.word	0x706d6574
    6fc8:	00000000 	.word	0x00000000
    6fcc:	5f636461 	.word	0x5f636461
    6fd0:	00746567 	.word	0x00746567
    6fd4:	64616572 	.word	0x64616572
    6fd8:	6363615f 	.word	0x6363615f
    6fdc:	00006c65 	.word	0x00006c65
    6fe0:	64616572 	.word	0x64616572
    6fe4:	7279675f 	.word	0x7279675f
    6fe8:	0000006f 	.word	0x0000006f
    6fec:	00007069 	.word	0x00007069
    6ff0:	0063616d 	.word	0x0063616d
    6ff4:	6f697067 	.word	0x6f697067
    6ff8:	7465675f 	.word	0x7465675f
    6ffc:	00000000 	.word	0x00000000
    7000:	6f697067 	.word	0x6f697067
    7004:	656c635f 	.word	0x656c635f
    7008:	00007261 	.word	0x00007261
    700c:	6f697067 	.word	0x6f697067
    7010:	7465735f 	.word	0x7465735f
    7014:	00000000 	.word	0x00000000
    7018:	5f726576 	.word	0x5f726576
    701c:	00707061 	.word	0x00707061
    7020:	5f726576 	.word	0x5f726576
    7024:	00006c62 	.word	0x00006c62
    7028:	706c6568 	.word	0x706c6568
    702c:	00000000 	.word	0x00000000
    7030:	42000800 	.word	0x42000800
    7034:	42000c00 	.word	0x42000c00
    7038:	42001000 	.word	0x42001000
    703c:	42001400 	.word	0x42001400
    7040:	42001800 	.word	0x42001800
    7044:	42001c00 	.word	0x42001c00
    7048:	0000237e 	.word	0x0000237e
    704c:	0000237a 	.word	0x0000237a
    7050:	0000237a 	.word	0x0000237a
    7054:	000023dc 	.word	0x000023dc
    7058:	000023dc 	.word	0x000023dc
    705c:	00002392 	.word	0x00002392
    7060:	00002384 	.word	0x00002384
    7064:	00002398 	.word	0x00002398
    7068:	000023ca 	.word	0x000023ca
    706c:	0000259c 	.word	0x0000259c
    7070:	0000257c 	.word	0x0000257c
    7074:	0000257c 	.word	0x0000257c
    7078:	00002608 	.word	0x00002608
    707c:	0000258e 	.word	0x0000258e
    7080:	000025aa 	.word	0x000025aa
    7084:	00002580 	.word	0x00002580
    7088:	000025b8 	.word	0x000025b8
    708c:	000025f8 	.word	0x000025f8
    7090:	57202d2d 	.word	0x57202d2d
    7094:	31434e49 	.word	0x31434e49
    7098:	20303035 	.word	0x20303035
    709c:	70696863 	.word	0x70696863
    70a0:	666e6920 	.word	0x666e6920
    70a4:	616d726f 	.word	0x616d726f
    70a8:	6e6f6974 	.word	0x6e6f6974
    70ac:	61786520 	.word	0x61786520
    70b0:	656c706d 	.word	0x656c706d
    70b4:	0d2d2d20 	.word	0x0d2d2d20
    70b8:	202d2d0a 	.word	0x202d2d0a
    70bc:	574d4153 	.word	0x574d4153
    70c0:	585f3532 	.word	0x585f3532
    70c4:	49414c50 	.word	0x49414c50
    70c8:	5f44454e 	.word	0x5f44454e
    70cc:	204f5250 	.word	0x204f5250
    70d0:	0a0d2d2d 	.word	0x0a0d2d2d
    70d4:	43202d2d 	.word	0x43202d2d
    70d8:	69706d6f 	.word	0x69706d6f
    70dc:	3a64656c 	.word	0x3a64656c
    70e0:	6e614a20 	.word	0x6e614a20
    70e4:	20383220 	.word	0x20383220
    70e8:	38313032 	.word	0x38313032
    70ec:	3a393120 	.word	0x3a393120
    70f0:	313a3630 	.word	0x313a3630
    70f4:	2d2d2037 	.word	0x2d2d2037
    70f8:	0000000d 	.word	0x0000000d
    70fc:	203d3d3d 	.word	0x203d3d3d
    7100:	6e6f7244 	.word	0x6e6f7244
    7104:	44414465 	.word	0x44414465
    7108:	494c4320 	.word	0x494c4320
    710c:	746e4920 	.word	0x746e4920
    7110:	61667265 	.word	0x61667265
    7114:	3d206563 	.word	0x3d206563
    7118:	000d3d3d 	.word	0x000d3d3d
    711c:	0000203e 	.word	0x0000203e
    7120:	0d5e5b25 	.word	0x0d5e5b25
    7124:	2a255d0a 	.word	0x2a255d0a
    7128:	00000063 	.word	0x00000063
    712c:	00003adc 	.word	0x00003adc
    7130:	00003abe 	.word	0x00003abe
    7134:	00003a78 	.word	0x00003a78
    7138:	00003996 	.word	0x00003996
    713c:	00003a78 	.word	0x00003a78
    7140:	00003ab0 	.word	0x00003ab0
    7144:	00003a78 	.word	0x00003a78
    7148:	00003996 	.word	0x00003996
    714c:	00003abe 	.word	0x00003abe
    7150:	00003abe 	.word	0x00003abe
    7154:	00003ab0 	.word	0x00003ab0
    7158:	00003996 	.word	0x00003996
    715c:	0000398e 	.word	0x0000398e
    7160:	0000398e 	.word	0x0000398e
    7164:	0000398e 	.word	0x0000398e
    7168:	00003cf4 	.word	0x00003cf4
    716c:	0000413c 	.word	0x0000413c
    7170:	00003ffc 	.word	0x00003ffc
    7174:	00003ffc 	.word	0x00003ffc
    7178:	00003ff8 	.word	0x00003ff8
    717c:	00004114 	.word	0x00004114
    7180:	00004114 	.word	0x00004114
    7184:	00004106 	.word	0x00004106
    7188:	00003ff8 	.word	0x00003ff8
    718c:	00004114 	.word	0x00004114
    7190:	00004106 	.word	0x00004106
    7194:	00004114 	.word	0x00004114
    7198:	00003ff8 	.word	0x00003ff8
    719c:	0000411c 	.word	0x0000411c
    71a0:	0000411c 	.word	0x0000411c
    71a4:	0000411c 	.word	0x0000411c
    71a8:	00004320 	.word	0x00004320

000071ac <_global_impure_ptr>:
    71ac:	20000058                                X.. 

000071b0 <__sf_fake_stderr>:
	...

000071d0 <__sf_fake_stdin>:
	...

000071f0 <__sf_fake_stdout>:
	...
    7210:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    7220:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    7230:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    7240:	37363534 62613938 66656463 00000000     456789abcdef....
    7250:	0000726e 00007271 00007274 61462d41     nr..qr..tr..A-Fa
    7260:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    7270:	00303000 00005878                                .00.xX.

00007277 <_ctype_>:
    7277:	20202000 20202020 28282020 20282828     .         ((((( 
    7287:	20202020 20202020 20202020 20202020                     
    7297:	10108820 10101010 10101010 10101010      ...............
    72a7:	04040410 04040404 10040404 10101010     ................
    72b7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    72c7:	01010101 01010101 01010101 10101010     ................
    72d7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    72e7:	02020202 02020202 02020202 10101010     ................
    72f7:	00000020 00000000 00000000 00000000      ...............
	...

00007378 <_init>:
    7378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    737a:	46c0      	nop			; (mov r8, r8)
    737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    737e:	bc08      	pop	{r3}
    7380:	469e      	mov	lr, r3
    7382:	4770      	bx	lr

00007384 <__init_array_start>:
    7384:	000000dd 	.word	0x000000dd

00007388 <_fini>:
    7388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    738e:	bc08      	pop	{r3}
    7390:	469e      	mov	lr, r3
    7392:	4770      	bx	lr

00007394 <__fini_array_start>:
    7394:	000000b5 	.word	0x000000b5
