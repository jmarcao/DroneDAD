
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b8b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000238  20000000  0000b8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000240  20000238  0000bae8  00020238  2**2
                  ALLOC
  3 .stack        00002000  20000478  0000bd28  00020238  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ffbc  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055df  00000000  00000000  00070275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004dab  00000000  00000000  00075854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e08  00000000  00000000  0007a5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c38  00000000  00000000  0007b407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee77  00000000  00000000  0007c03f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016137  00000000  00000000  0009aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f877  00000000  00000000  000b0fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003da8  00000000  00000000  00140864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 24 00 20 35 68 00 00 2d 69 00 00 2d 69 00 00     x$. 5h..-i..-i..
	...
      2c:	2d 69 00 00 00 00 00 00 00 00 00 00 2d 69 00 00     -i..........-i..
      3c:	2d 69 00 00 2d 69 00 00 2d 69 00 00 2d 69 00 00     -i..-i..-i..-i..
      4c:	2d 69 00 00 59 38 00 00 2d 69 00 00 2d 69 00 00     -i..Y8..-i..-i..
      5c:	2d 69 00 00 2d 69 00 00 09 42 00 00 21 42 00 00     -i..-i...B..!B..
      6c:	39 42 00 00 51 42 00 00 69 42 00 00 81 42 00 00     9B..QB..iB...B..
      7c:	2d 69 00 00 2d 69 00 00 2d 69 00 00 2d 69 00 00     -i..-i..-i..-i..
      8c:	2d 69 00 00 2d 69 00 00 00 00 00 00 00 00 00 00     -i..-i..........
      9c:	a5 0f 00 00 2d 69 00 00 2d 69 00 00 2d 69 00 00     ....-i..-i..-i..
      ac:	2d 69 00 00 00 00 00 00                             -i......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000238 	.word	0x20000238
      d4:	00000000 	.word	0x00000000
      d8:	0000b8b0 	.word	0x0000b8b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000023c 	.word	0x2000023c
     108:	0000b8b0 	.word	0x0000b8b0
     10c:	0000b8b0 	.word	0x0000b8b0
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	7e5b      	ldrb	r3, [r3, #25]
     152:	b2db      	uxtb	r3, r3
     154:	b25b      	sxtb	r3, r3
     156:	2b00      	cmp	r3, #0
     158:	da01      	bge.n	15e <adc_is_syncing+0x1e>
		return true;
     15a:	2301      	movs	r3, #1
     15c:	e000      	b.n	160 <adc_is_syncing+0x20>
	}

	return false;
     15e:	2300      	movs	r3, #0
}
     160:	0018      	movs	r0, r3
     162:	46bd      	mov	sp, r7
     164:	b004      	add	sp, #16
     166:	bd80      	pop	{r7, pc}

00000168 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
     168:	b580      	push	{r7, lr}
     16a:	b084      	sub	sp, #16
     16c:	af00      	add	r7, sp, #0
     16e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
     174:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     176:	46c0      	nop			; (mov r8, r8)
     178:	687b      	ldr	r3, [r7, #4]
     17a:	0018      	movs	r0, r3
     17c:	4b10      	ldr	r3, [pc, #64]	; (1c0 <adc_enable+0x58>)
     17e:	4798      	blx	r3
     180:	1e03      	subs	r3, r0, #0
     182:	d1f9      	bne.n	178 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
     184:	2017      	movs	r0, #23
     186:	4b0f      	ldr	r3, [pc, #60]	; (1c4 <adc_enable+0x5c>)
     188:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	220f      	movs	r2, #15
     18e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	220f      	movs	r2, #15
     194:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     196:	68fb      	ldr	r3, [r7, #12]
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	b2db      	uxtb	r3, r3
     19c:	2202      	movs	r2, #2
     19e:	4313      	orrs	r3, r2
     1a0:	b2da      	uxtb	r2, r3
     1a2:	68fb      	ldr	r3, [r7, #12]
     1a4:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	0018      	movs	r0, r3
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <adc_enable+0x58>)
     1ae:	4798      	blx	r3
     1b0:	1e03      	subs	r3, r0, #0
     1b2:	d1f9      	bne.n	1a8 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     1b4:	2300      	movs	r3, #0
}
     1b6:	0018      	movs	r0, r3
     1b8:	46bd      	mov	sp, r7
     1ba:	b004      	add	sp, #16
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00000141 	.word	0x00000141
     1c4:	00000115 	.word	0x00000115

000001c8 <configure_adc_temp>:
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/

void configure_adc_temp(void)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b08c      	sub	sp, #48	; 0x30
     1cc:	af00      	add	r7, sp, #0
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     1ce:	003b      	movs	r3, r7
     1d0:	0018      	movs	r0, r3
     1d2:	4b13      	ldr	r3, [pc, #76]	; (220 <configure_adc_temp+0x58>)
     1d4:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     1d6:	003b      	movs	r3, r7
     1d8:	2201      	movs	r2, #1
     1da:	701a      	strb	r2, [r3, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     1dc:	003b      	movs	r3, r7
     1de:	2280      	movs	r2, #128	; 0x80
     1e0:	0092      	lsls	r2, r2, #2
     1e2:	805a      	strh	r2, [r3, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
     1e4:	003b      	movs	r3, r7
     1e6:	2200      	movs	r2, #0
     1e8:	705a      	strb	r2, [r3, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
     1ea:	003b      	movs	r3, r7
     1ec:	2218      	movs	r2, #24
     1ee:	731a      	strb	r2, [r3, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     1f0:	003b      	movs	r3, r7
     1f2:	22c0      	movs	r2, #192	; 0xc0
     1f4:	0152      	lsls	r2, r2, #5
     1f6:	81da      	strh	r2, [r3, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
     1f8:	003b      	movs	r3, r7
     1fa:	2204      	movs	r2, #4
     1fc:	75da      	strb	r2, [r3, #23]
	
	adc_init(&adc_inst, ADC, &conf_adc);
     1fe:	003a      	movs	r2, r7
     200:	4908      	ldr	r1, [pc, #32]	; (224 <configure_adc_temp+0x5c>)
     202:	4b09      	ldr	r3, [pc, #36]	; (228 <configure_adc_temp+0x60>)
     204:	0018      	movs	r0, r3
     206:	4b09      	ldr	r3, [pc, #36]	; (22c <configure_adc_temp+0x64>)
     208:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
     20a:	4b06      	ldr	r3, [pc, #24]	; (224 <configure_adc_temp+0x5c>)
     20c:	2222      	movs	r2, #34	; 0x22
     20e:	709a      	strb	r2, [r3, #2]
	
	adc_enable(&adc_inst);
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <configure_adc_temp+0x60>)
     212:	0018      	movs	r0, r3
     214:	4b06      	ldr	r3, [pc, #24]	; (230 <configure_adc_temp+0x68>)
     216:	4798      	blx	r3
}
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46bd      	mov	sp, r7
     21c:	b00c      	add	sp, #48	; 0x30
     21e:	bd80      	pop	{r7, pc}
     220:	00000699 	.word	0x00000699
     224:	42004000 	.word	0x42004000
     228:	20000454 	.word	0x20000454
     22c:	00000ce9 	.word	0x00000ce9
     230:	00000169 	.word	0x00000169

00000234 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
int calculate_temperature(int adc_result)
{	
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	int temp = (adc_result *1000)/(4095*25);
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	22fa      	movs	r2, #250	; 0xfa
     240:	0092      	lsls	r2, r2, #2
     242:	435a      	muls	r2, r3
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <calculate_temperature+0x28>)
     246:	4906      	ldr	r1, [pc, #24]	; (260 <calculate_temperature+0x2c>)
     248:	0010      	movs	r0, r2
     24a:	4798      	blx	r3
     24c:	0003      	movs	r3, r0
     24e:	60fb      	str	r3, [r7, #12]
	return temp;
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	0018      	movs	r0, r3
     254:	46bd      	mov	sp, r7
     256:	b004      	add	sp, #16
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	00007549 	.word	0x00007549
     260:	00018fe7 	.word	0x00018fe7

00000264 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	0002      	movs	r2, r0
     26c:	1dfb      	adds	r3, r7, #7
     26e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     270:	230f      	movs	r3, #15
     272:	18fb      	adds	r3, r7, r3
     274:	1dfa      	adds	r2, r7, #7
     276:	7812      	ldrb	r2, [r2, #0]
     278:	09d2      	lsrs	r2, r2, #7
     27a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     27c:	230e      	movs	r3, #14
     27e:	18fb      	adds	r3, r7, r3
     280:	1dfa      	adds	r2, r7, #7
     282:	7812      	ldrb	r2, [r2, #0]
     284:	0952      	lsrs	r2, r2, #5
     286:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     288:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     28a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     28c:	230f      	movs	r3, #15
     28e:	18fb      	adds	r3, r7, r3
     290:	781b      	ldrb	r3, [r3, #0]
     292:	2b00      	cmp	r3, #0
     294:	d10f      	bne.n	2b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     296:	230f      	movs	r3, #15
     298:	18fb      	adds	r3, r7, r3
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	009b      	lsls	r3, r3, #2
     29e:	2210      	movs	r2, #16
     2a0:	4694      	mov	ip, r2
     2a2:	44bc      	add	ip, r7
     2a4:	4463      	add	r3, ip
     2a6:	3b08      	subs	r3, #8
     2a8:	681a      	ldr	r2, [r3, #0]
     2aa:	230e      	movs	r3, #14
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	18d3      	adds	r3, r2, r3
     2b4:	e000      	b.n	2b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2b6:	2300      	movs	r3, #0
	}
}
     2b8:	0018      	movs	r0, r3
     2ba:	46bd      	mov	sp, r7
     2bc:	b004      	add	sp, #16
     2be:	bd80      	pop	{r7, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b082      	sub	sp, #8
     2c8:	af00      	add	r7, sp, #0
     2ca:	0002      	movs	r2, r0
     2cc:	1dfb      	adds	r3, r7, #7
     2ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     2d0:	1dfb      	adds	r3, r7, #7
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	0018      	movs	r0, r3
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <port_get_group_from_gpio_pin+0x20>)
     2d8:	4798      	blx	r3
     2da:	0003      	movs	r3, r0
}
     2dc:	0018      	movs	r0, r3
     2de:	46bd      	mov	sp, r7
     2e0:	b002      	add	sp, #8
     2e2:	bd80      	pop	{r7, pc}
     2e4:	00000265 	.word	0x00000265

000002e8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b084      	sub	sp, #16
     2ec:	af00      	add	r7, sp, #0
     2ee:	0002      	movs	r2, r0
     2f0:	1dfb      	adds	r3, r7, #7
     2f2:	701a      	strb	r2, [r3, #0]
     2f4:	1dbb      	adds	r3, r7, #6
     2f6:	1c0a      	adds	r2, r1, #0
     2f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2fa:	1dfb      	adds	r3, r7, #7
     2fc:	781b      	ldrb	r3, [r3, #0]
     2fe:	0018      	movs	r0, r3
     300:	4b0d      	ldr	r3, [pc, #52]	; (338 <port_pin_set_output_level+0x50>)
     302:	4798      	blx	r3
     304:	0003      	movs	r3, r0
     306:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     308:	1dfb      	adds	r3, r7, #7
     30a:	781b      	ldrb	r3, [r3, #0]
     30c:	221f      	movs	r2, #31
     30e:	4013      	ands	r3, r2
     310:	2201      	movs	r2, #1
     312:	409a      	lsls	r2, r3
     314:	0013      	movs	r3, r2
     316:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     318:	1dbb      	adds	r3, r7, #6
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	2b00      	cmp	r3, #0
     31e:	d003      	beq.n	328 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     320:	68fb      	ldr	r3, [r7, #12]
     322:	68ba      	ldr	r2, [r7, #8]
     324:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     326:	e002      	b.n	32e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     328:	68fb      	ldr	r3, [r7, #12]
     32a:	68ba      	ldr	r2, [r7, #8]
     32c:	615a      	str	r2, [r3, #20]
}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	46bd      	mov	sp, r7
     332:	b004      	add	sp, #16
     334:	bd80      	pop	{r7, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	000002c5 	.word	0x000002c5

0000033c <system_interrupt_enter_critical_section>:
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     340:	4b02      	ldr	r3, [pc, #8]	; (34c <system_interrupt_enter_critical_section+0x10>)
     342:	4798      	blx	r3
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	000035ad 	.word	0x000035ad

00000350 <system_interrupt_leave_critical_section>:
{
     350:	b580      	push	{r7, lr}
     352:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     354:	4b02      	ldr	r3, [pc, #8]	; (360 <system_interrupt_leave_critical_section+0x10>)
     356:	4798      	blx	r3
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00003601 	.word	0x00003601

00000364 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     364:	b580      	push	{r7, lr}
     366:	b084      	sub	sp, #16
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     36c:	4b0d      	ldr	r3, [pc, #52]	; (3a4 <spi_lock+0x40>)
     36e:	4798      	blx	r3

	if (module->locked) {
     370:	687b      	ldr	r3, [r7, #4]
     372:	791b      	ldrb	r3, [r3, #4]
     374:	b2db      	uxtb	r3, r3
     376:	2b00      	cmp	r3, #0
     378:	d004      	beq.n	384 <spi_lock+0x20>
		status = STATUS_BUSY;
     37a:	230f      	movs	r3, #15
     37c:	18fb      	adds	r3, r7, r3
     37e:	2205      	movs	r2, #5
     380:	701a      	strb	r2, [r3, #0]
     382:	e006      	b.n	392 <spi_lock+0x2e>
	} else {
		module->locked = true;
     384:	687b      	ldr	r3, [r7, #4]
     386:	2201      	movs	r2, #1
     388:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     38a:	230f      	movs	r3, #15
     38c:	18fb      	adds	r3, r7, r3
     38e:	2200      	movs	r2, #0
     390:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     392:	4b05      	ldr	r3, [pc, #20]	; (3a8 <spi_lock+0x44>)
     394:	4798      	blx	r3

	return status;
     396:	230f      	movs	r3, #15
     398:	18fb      	adds	r3, r7, r3
     39a:	781b      	ldrb	r3, [r3, #0]
}
     39c:	0018      	movs	r0, r3
     39e:	46bd      	mov	sp, r7
     3a0:	b004      	add	sp, #16
     3a2:	bd80      	pop	{r7, pc}
     3a4:	0000033d 	.word	0x0000033d
     3a8:	00000351 	.word	0x00000351

000003ac <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	module->locked = false;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	711a      	strb	r2, [r3, #4]
}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	46bd      	mov	sp, r7
     3be:	b002      	add	sp, #8
     3c0:	bd80      	pop	{r7, pc}
	...

000003c4 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	795b      	ldrb	r3, [r3, #5]
     3d0:	2100      	movs	r1, #0
     3d2:	0018      	movs	r0, r3
     3d4:	4b02      	ldr	r3, [pc, #8]	; (3e0 <_at25dfx_chip_select+0x1c>)
     3d6:	4798      	blx	r3
}
     3d8:	46c0      	nop			; (mov r8, r8)
     3da:	46bd      	mov	sp, r7
     3dc:	b002      	add	sp, #8
     3de:	bd80      	pop	{r7, pc}
     3e0:	000002e9 	.word	0x000002e9

000003e4 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	795b      	ldrb	r3, [r3, #5]
     3f0:	2101      	movs	r1, #1
     3f2:	0018      	movs	r0, r3
     3f4:	4b02      	ldr	r3, [pc, #8]	; (400 <_at25dfx_chip_deselect+0x1c>)
     3f6:	4798      	blx	r3
}
     3f8:	46c0      	nop			; (mov r8, r8)
     3fa:	46bd      	mov	sp, r7
     3fc:	b002      	add	sp, #8
     3fe:	bd80      	pop	{r7, pc}
     400:	000002e9 	.word	0x000002e9

00000404 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     404:	b084      	sub	sp, #16
     406:	b590      	push	{r4, r7, lr}
     408:	b085      	sub	sp, #20
     40a:	af00      	add	r7, sp, #0
     40c:	6078      	str	r0, [r7, #4]
     40e:	2004      	movs	r0, #4
     410:	2420      	movs	r4, #32
     412:	46a4      	mov	ip, r4
     414:	44bc      	add	ip, r7
     416:	4460      	add	r0, ip
     418:	6001      	str	r1, [r0, #0]
     41a:	6042      	str	r2, [r0, #4]
     41c:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     41e:	2304      	movs	r3, #4
     420:	2220      	movs	r2, #32
     422:	4694      	mov	ip, r2
     424:	44bc      	add	ip, r7
     426:	4463      	add	r3, ip
     428:	781a      	ldrb	r2, [r3, #0]
     42a:	2308      	movs	r3, #8
     42c:	18fb      	adds	r3, r7, r3
     42e:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     430:	2304      	movs	r3, #4
     432:	2220      	movs	r2, #32
     434:	4694      	mov	ip, r2
     436:	44bc      	add	ip, r7
     438:	4463      	add	r3, ip
     43a:	785b      	ldrb	r3, [r3, #1]
     43c:	2b01      	cmp	r3, #1
     43e:	d91f      	bls.n	480 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     440:	2304      	movs	r3, #4
     442:	2220      	movs	r2, #32
     444:	4694      	mov	ip, r2
     446:	44bc      	add	ip, r7
     448:	4463      	add	r3, ip
     44a:	685b      	ldr	r3, [r3, #4]
     44c:	b2da      	uxtb	r2, r3
     44e:	2308      	movs	r3, #8
     450:	18fb      	adds	r3, r7, r3
     452:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     454:	2304      	movs	r3, #4
     456:	2220      	movs	r2, #32
     458:	4694      	mov	ip, r2
     45a:	44bc      	add	ip, r7
     45c:	4463      	add	r3, ip
     45e:	685b      	ldr	r3, [r3, #4]
     460:	0a1b      	lsrs	r3, r3, #8
     462:	b2da      	uxtb	r2, r3
     464:	2308      	movs	r3, #8
     466:	18fb      	adds	r3, r7, r3
     468:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     46a:	2304      	movs	r3, #4
     46c:	2220      	movs	r2, #32
     46e:	4694      	mov	ip, r2
     470:	44bc      	add	ip, r7
     472:	4463      	add	r3, ip
     474:	685b      	ldr	r3, [r3, #4]
     476:	0c1b      	lsrs	r3, r3, #16
     478:	b2da      	uxtb	r2, r3
     47a:	2308      	movs	r3, #8
     47c:	18fb      	adds	r3, r7, r3
     47e:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     480:	687b      	ldr	r3, [r7, #4]
     482:	0018      	movs	r0, r3
     484:	4b1d      	ldr	r3, [pc, #116]	; (4fc <_at25dfx_chip_issue_write_command_wait+0xf8>)
     486:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     488:	687b      	ldr	r3, [r7, #4]
     48a:	6818      	ldr	r0, [r3, #0]
     48c:	2304      	movs	r3, #4
     48e:	2220      	movs	r2, #32
     490:	4694      	mov	ip, r2
     492:	44bc      	add	ip, r7
     494:	4463      	add	r3, ip
     496:	785b      	ldrb	r3, [r3, #1]
     498:	b29a      	uxth	r2, r3
     49a:	230f      	movs	r3, #15
     49c:	18fc      	adds	r4, r7, r3
     49e:	2308      	movs	r3, #8
     4a0:	18fb      	adds	r3, r7, r3
     4a2:	0019      	movs	r1, r3
     4a4:	4b16      	ldr	r3, [pc, #88]	; (500 <_at25dfx_chip_issue_write_command_wait+0xfc>)
     4a6:	4798      	blx	r3
     4a8:	0003      	movs	r3, r0
     4aa:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     4ac:	2304      	movs	r3, #4
     4ae:	2220      	movs	r2, #32
     4b0:	4694      	mov	ip, r2
     4b2:	44bc      	add	ip, r7
     4b4:	4463      	add	r3, ip
     4b6:	899b      	ldrh	r3, [r3, #12]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d014      	beq.n	4e6 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4bc:	687b      	ldr	r3, [r7, #4]
     4be:	6818      	ldr	r0, [r3, #0]
     4c0:	2304      	movs	r3, #4
     4c2:	2220      	movs	r2, #32
     4c4:	4694      	mov	ip, r2
     4c6:	44bc      	add	ip, r7
     4c8:	4463      	add	r3, ip
     4ca:	6899      	ldr	r1, [r3, #8]
     4cc:	2304      	movs	r3, #4
     4ce:	2220      	movs	r2, #32
     4d0:	4694      	mov	ip, r2
     4d2:	44bc      	add	ip, r7
     4d4:	4463      	add	r3, ip
     4d6:	899b      	ldrh	r3, [r3, #12]
     4d8:	220f      	movs	r2, #15
     4da:	18bc      	adds	r4, r7, r2
     4dc:	001a      	movs	r2, r3
     4de:	4b08      	ldr	r3, [pc, #32]	; (500 <_at25dfx_chip_issue_write_command_wait+0xfc>)
     4e0:	4798      	blx	r3
     4e2:	0003      	movs	r3, r0
     4e4:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	0018      	movs	r0, r3
     4ea:	4b06      	ldr	r3, [pc, #24]	; (504 <_at25dfx_chip_issue_write_command_wait+0x100>)
     4ec:	4798      	blx	r3
}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	46bd      	mov	sp, r7
     4f2:	b005      	add	sp, #20
     4f4:	bc90      	pop	{r4, r7}
     4f6:	bc08      	pop	{r3}
     4f8:	b004      	add	sp, #16
     4fa:	4718      	bx	r3
     4fc:	000003c5 	.word	0x000003c5
     500:	0000483d 	.word	0x0000483d
     504:	000003e5 	.word	0x000003e5

00000508 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     508:	b590      	push	{r4, r7, lr}
     50a:	b08b      	sub	sp, #44	; 0x2c
     50c:	af02      	add	r7, sp, #8
     50e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     510:	687b      	ldr	r3, [r7, #4]
     512:	681b      	ldr	r3, [r3, #0]
     514:	221f      	movs	r2, #31
     516:	18bc      	adds	r4, r7, r2
     518:	0018      	movs	r0, r3
     51a:	4b1b      	ldr	r3, [pc, #108]	; (588 <at25dfx_chip_wake+0x80>)
     51c:	4798      	blx	r3
     51e:	0003      	movs	r3, r0
     520:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     522:	231f      	movs	r3, #31
     524:	18fb      	adds	r3, r7, r3
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b05      	cmp	r3, #5
     52a:	d103      	bne.n	534 <at25dfx_chip_wake+0x2c>
		return status;
     52c:	231f      	movs	r3, #31
     52e:	18fb      	adds	r3, r7, r3
     530:	781b      	ldrb	r3, [r3, #0]
     532:	e024      	b.n	57e <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     534:	230c      	movs	r3, #12
     536:	18fb      	adds	r3, r7, r3
     538:	22ab      	movs	r2, #171	; 0xab
     53a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     53c:	230c      	movs	r3, #12
     53e:	18fb      	adds	r3, r7, r3
     540:	2201      	movs	r2, #1
     542:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     544:	230c      	movs	r3, #12
     546:	18fb      	adds	r3, r7, r3
     548:	2200      	movs	r2, #0
     54a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     54c:	230c      	movs	r3, #12
     54e:	18fb      	adds	r3, r7, r3
     550:	2200      	movs	r2, #0
     552:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     554:	230c      	movs	r3, #12
     556:	18fb      	adds	r3, r7, r3
     558:	2200      	movs	r2, #0
     55a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     55c:	230c      	movs	r3, #12
     55e:	18fb      	adds	r3, r7, r3
     560:	6878      	ldr	r0, [r7, #4]
     562:	466a      	mov	r2, sp
     564:	68d9      	ldr	r1, [r3, #12]
     566:	6011      	str	r1, [r2, #0]
     568:	6819      	ldr	r1, [r3, #0]
     56a:	685a      	ldr	r2, [r3, #4]
     56c:	689b      	ldr	r3, [r3, #8]
     56e:	4c07      	ldr	r4, [pc, #28]	; (58c <at25dfx_chip_wake+0x84>)
     570:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     572:	687b      	ldr	r3, [r7, #4]
     574:	681b      	ldr	r3, [r3, #0]
     576:	0018      	movs	r0, r3
     578:	4b05      	ldr	r3, [pc, #20]	; (590 <at25dfx_chip_wake+0x88>)
     57a:	4798      	blx	r3

	return STATUS_OK;
     57c:	2300      	movs	r3, #0
     57e:	0018      	movs	r0, r3
     580:	46bd      	mov	sp, r7
     582:	b009      	add	sp, #36	; 0x24
     584:	bd90      	pop	{r4, r7, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	00000365 	.word	0x00000365
     58c:	00000405 	.word	0x00000405
     590:	000003ad 	.word	0x000003ad

00000594 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	2200      	movs	r2, #0
     5a0:	701a      	strb	r2, [r3, #0]
}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	46bd      	mov	sp, r7
     5a6:	b002      	add	sp, #8
     5a8:	bd80      	pop	{r7, pc}
	...

000005ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     5ac:	b580      	push	{r7, lr}
     5ae:	b082      	sub	sp, #8
     5b0:	af00      	add	r7, sp, #0
     5b2:	0002      	movs	r2, r0
     5b4:	6039      	str	r1, [r7, #0]
     5b6:	1dfb      	adds	r3, r7, #7
     5b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5ba:	1dfb      	adds	r3, r7, #7
     5bc:	781b      	ldrb	r3, [r3, #0]
     5be:	2b01      	cmp	r3, #1
     5c0:	d00a      	beq.n	5d8 <system_apb_clock_set_mask+0x2c>
     5c2:	2b02      	cmp	r3, #2
     5c4:	d00f      	beq.n	5e6 <system_apb_clock_set_mask+0x3a>
     5c6:	2b00      	cmp	r3, #0
     5c8:	d114      	bne.n	5f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5ca:	4b0e      	ldr	r3, [pc, #56]	; (604 <system_apb_clock_set_mask+0x58>)
     5cc:	4a0d      	ldr	r2, [pc, #52]	; (604 <system_apb_clock_set_mask+0x58>)
     5ce:	6991      	ldr	r1, [r2, #24]
     5d0:	683a      	ldr	r2, [r7, #0]
     5d2:	430a      	orrs	r2, r1
     5d4:	619a      	str	r2, [r3, #24]
			break;
     5d6:	e00f      	b.n	5f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     5d8:	4b0a      	ldr	r3, [pc, #40]	; (604 <system_apb_clock_set_mask+0x58>)
     5da:	4a0a      	ldr	r2, [pc, #40]	; (604 <system_apb_clock_set_mask+0x58>)
     5dc:	69d1      	ldr	r1, [r2, #28]
     5de:	683a      	ldr	r2, [r7, #0]
     5e0:	430a      	orrs	r2, r1
     5e2:	61da      	str	r2, [r3, #28]
			break;
     5e4:	e008      	b.n	5f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <system_apb_clock_set_mask+0x58>)
     5e8:	4a06      	ldr	r2, [pc, #24]	; (604 <system_apb_clock_set_mask+0x58>)
     5ea:	6a11      	ldr	r1, [r2, #32]
     5ec:	683a      	ldr	r2, [r7, #0]
     5ee:	430a      	orrs	r2, r1
     5f0:	621a      	str	r2, [r3, #32]
			break;
     5f2:	e001      	b.n	5f8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     5f4:	2317      	movs	r3, #23
     5f6:	e000      	b.n	5fa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     5f8:	2300      	movs	r3, #0
}
     5fa:	0018      	movs	r0, r3
     5fc:	46bd      	mov	sp, r7
     5fe:	b002      	add	sp, #8
     600:	bd80      	pop	{r7, pc}
     602:	46c0      	nop			; (mov r8, r8)
     604:	40000400 	.word	0x40000400

00000608 <system_pinmux_get_config_defaults>:
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     610:	687b      	ldr	r3, [r7, #4]
     612:	2280      	movs	r2, #128	; 0x80
     614:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     616:	687b      	ldr	r3, [r7, #4]
     618:	2200      	movs	r2, #0
     61a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	2201      	movs	r2, #1
     620:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     622:	687b      	ldr	r3, [r7, #4]
     624:	2200      	movs	r2, #0
     626:	70da      	strb	r2, [r3, #3]
}
     628:	46c0      	nop			; (mov r8, r8)
     62a:	46bd      	mov	sp, r7
     62c:	b002      	add	sp, #8
     62e:	bd80      	pop	{r7, pc}

00000630 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     630:	b580      	push	{r7, lr}
     632:	b082      	sub	sp, #8
     634:	af00      	add	r7, sp, #0
     636:	0002      	movs	r2, r0
     638:	1dfb      	adds	r3, r7, #7
     63a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     63c:	1dfb      	adds	r3, r7, #7
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	2b00      	cmp	r3, #0
     642:	d002      	beq.n	64a <system_voltage_reference_enable+0x1a>
     644:	2b01      	cmp	r3, #1
     646:	d007      	beq.n	658 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     648:	e00d      	b.n	666 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     64a:	4b08      	ldr	r3, [pc, #32]	; (66c <system_voltage_reference_enable+0x3c>)
     64c:	4a07      	ldr	r2, [pc, #28]	; (66c <system_voltage_reference_enable+0x3c>)
     64e:	6c12      	ldr	r2, [r2, #64]	; 0x40
     650:	2102      	movs	r1, #2
     652:	430a      	orrs	r2, r1
     654:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     656:	e006      	b.n	666 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     658:	4b04      	ldr	r3, [pc, #16]	; (66c <system_voltage_reference_enable+0x3c>)
     65a:	4a04      	ldr	r2, [pc, #16]	; (66c <system_voltage_reference_enable+0x3c>)
     65c:	6c12      	ldr	r2, [r2, #64]	; 0x40
     65e:	2104      	movs	r1, #4
     660:	430a      	orrs	r2, r1
     662:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     664:	46c0      	nop			; (mov r8, r8)
	}
}
     666:	46bd      	mov	sp, r7
     668:	b002      	add	sp, #8
     66a:	bd80      	pop	{r7, pc}
     66c:	40000800 	.word	0x40000800

00000670 <adc_is_syncing>:
{
     670:	b580      	push	{r7, lr}
     672:	b084      	sub	sp, #16
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	681b      	ldr	r3, [r3, #0]
     67c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     67e:	68fb      	ldr	r3, [r7, #12]
     680:	7e5b      	ldrb	r3, [r3, #25]
     682:	b2db      	uxtb	r3, r3
     684:	b25b      	sxtb	r3, r3
     686:	2b00      	cmp	r3, #0
     688:	da01      	bge.n	68e <adc_is_syncing+0x1e>
		return true;
     68a:	2301      	movs	r3, #1
     68c:	e000      	b.n	690 <adc_is_syncing+0x20>
	return false;
     68e:	2300      	movs	r3, #0
}
     690:	0018      	movs	r0, r3
     692:	46bd      	mov	sp, r7
     694:	b004      	add	sp, #16
     696:	bd80      	pop	{r7, pc}

00000698 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     698:	b580      	push	{r7, lr}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	2200      	movs	r2, #0
     6a4:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	2200      	movs	r2, #0
     6aa:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	2200      	movs	r2, #0
     6b0:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	2200      	movs	r2, #0
     6b6:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	2200      	movs	r2, #0
     6bc:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	2200      	movs	r2, #0
     6c2:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	2200      	movs	r2, #0
     6c8:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	2200      	movs	r2, #0
     6ce:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	2200      	movs	r2, #0
     6d4:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	22c0      	movs	r2, #192	; 0xc0
     6da:	0152      	lsls	r2, r2, #5
     6dc:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	2200      	movs	r2, #0
     6e2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	2200      	movs	r2, #0
     6e8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	2200      	movs	r2, #0
     6ee:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	2200      	movs	r2, #0
     6f4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	2200      	movs	r2, #0
     6fa:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	222a      	movs	r2, #42	; 0x2a
     700:	2100      	movs	r1, #0
     702:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     704:	687b      	ldr	r3, [r7, #4]
     706:	2200      	movs	r2, #0
     708:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	2200      	movs	r2, #0
     70e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     710:	687b      	ldr	r3, [r7, #4]
     712:	2224      	movs	r2, #36	; 0x24
     714:	2100      	movs	r1, #0
     716:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     718:	687b      	ldr	r3, [r7, #4]
     71a:	2200      	movs	r2, #0
     71c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     71e:	687b      	ldr	r3, [r7, #4]
     720:	2200      	movs	r2, #0
     722:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     724:	687b      	ldr	r3, [r7, #4]
     726:	2200      	movs	r2, #0
     728:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	222b      	movs	r2, #43	; 0x2b
     72e:	2100      	movs	r1, #0
     730:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     732:	687b      	ldr	r3, [r7, #4]
     734:	222c      	movs	r2, #44	; 0x2c
     736:	2100      	movs	r1, #0
     738:	5499      	strb	r1, [r3, r2]
}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	46bd      	mov	sp, r7
     73e:	b002      	add	sp, #8
     740:	bd80      	pop	{r7, pc}
	...

00000744 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     744:	b580      	push	{r7, lr}
     746:	b098      	sub	sp, #96	; 0x60
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     74c:	230c      	movs	r3, #12
     74e:	18fa      	adds	r2, r7, r3
     750:	4b15      	ldr	r3, [pc, #84]	; (7a8 <_adc_configure_ain_pin+0x64>)
     752:	0010      	movs	r0, r2
     754:	0019      	movs	r1, r3
     756:	2350      	movs	r3, #80	; 0x50
     758:	001a      	movs	r2, r3
     75a:	4b14      	ldr	r3, [pc, #80]	; (7ac <_adc_configure_ain_pin+0x68>)
     75c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     75e:	4b14      	ldr	r3, [pc, #80]	; (7b0 <_adc_configure_ain_pin+0x6c>)
     760:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     762:	687b      	ldr	r3, [r7, #4]
     764:	2b13      	cmp	r3, #19
     766:	d81a      	bhi.n	79e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     768:	230c      	movs	r3, #12
     76a:	18fb      	adds	r3, r7, r3
     76c:	687a      	ldr	r2, [r7, #4]
     76e:	0092      	lsls	r2, r2, #2
     770:	58d3      	ldr	r3, [r2, r3]
     772:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     774:	2308      	movs	r3, #8
     776:	18fb      	adds	r3, r7, r3
     778:	0018      	movs	r0, r3
     77a:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <_adc_configure_ain_pin+0x70>)
     77c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     77e:	2308      	movs	r3, #8
     780:	18fb      	adds	r3, r7, r3
     782:	2200      	movs	r2, #0
     784:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     786:	2308      	movs	r3, #8
     788:	18fb      	adds	r3, r7, r3
     78a:	2201      	movs	r2, #1
     78c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     78e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     790:	b2db      	uxtb	r3, r3
     792:	2208      	movs	r2, #8
     794:	18ba      	adds	r2, r7, r2
     796:	0011      	movs	r1, r2
     798:	0018      	movs	r0, r3
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <_adc_configure_ain_pin+0x74>)
     79c:	4798      	blx	r3
	}
}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	46bd      	mov	sp, r7
     7a2:	b018      	add	sp, #96	; 0x60
     7a4:	bd80      	pop	{r7, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	0000af1c 	.word	0x0000af1c
     7ac:	00009091 	.word	0x00009091
     7b0:	0000ffff 	.word	0x0000ffff
     7b4:	00000609 	.word	0x00000609
     7b8:	000067ad 	.word	0x000067ad

000007bc <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	b089      	sub	sp, #36	; 0x24
     7c0:	af00      	add	r7, sp, #0
     7c2:	6078      	str	r0, [r7, #4]
     7c4:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     7c6:	231f      	movs	r3, #31
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	2200      	movs	r2, #0
     7cc:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     7ce:	2310      	movs	r3, #16
     7d0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     7d2:	2317      	movs	r3, #23
     7d4:	18fb      	adds	r3, r7, r3
     7d6:	2200      	movs	r2, #0
     7d8:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	681b      	ldr	r3, [r3, #0]
     7de:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7e0:	230c      	movs	r3, #12
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	0018      	movs	r0, r3
     7e6:	4bce      	ldr	r3, [pc, #824]	; (b20 <_adc_set_config+0x364>)
     7e8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	781a      	ldrb	r2, [r3, #0]
     7ee:	230c      	movs	r3, #12
     7f0:	18fb      	adds	r3, r7, r3
     7f2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     7f4:	230c      	movs	r3, #12
     7f6:	18fb      	adds	r3, r7, r3
     7f8:	0019      	movs	r1, r3
     7fa:	201e      	movs	r0, #30
     7fc:	4bc9      	ldr	r3, [pc, #804]	; (b24 <_adc_set_config+0x368>)
     7fe:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     800:	201e      	movs	r0, #30
     802:	4bc9      	ldr	r3, [pc, #804]	; (b28 <_adc_set_config+0x36c>)
     804:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     806:	683b      	ldr	r3, [r7, #0]
     808:	222c      	movs	r2, #44	; 0x2c
     80a:	5c9b      	ldrb	r3, [r3, r2]
     80c:	2b00      	cmp	r3, #0
     80e:	d040      	beq.n	892 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     810:	2316      	movs	r3, #22
     812:	18fb      	adds	r3, r7, r3
     814:	683a      	ldr	r2, [r7, #0]
     816:	212b      	movs	r1, #43	; 0x2b
     818:	5c52      	ldrb	r2, [r2, r1]
     81a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     81c:	683b      	ldr	r3, [r7, #0]
     81e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     820:	2315      	movs	r3, #21
     822:	18fb      	adds	r3, r7, r3
     824:	2216      	movs	r2, #22
     826:	18ba      	adds	r2, r7, r2
     828:	7812      	ldrb	r2, [r2, #0]
     82a:	188a      	adds	r2, r1, r2
     82c:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     82e:	683b      	ldr	r3, [r7, #0]
     830:	222c      	movs	r2, #44	; 0x2c
     832:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     834:	230f      	movs	r3, #15
     836:	18fb      	adds	r3, r7, r3
     838:	2215      	movs	r2, #21
     83a:	18ba      	adds	r2, r7, r2
     83c:	7812      	ldrb	r2, [r2, #0]
     83e:	188a      	adds	r2, r1, r2
     840:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     842:	e018      	b.n	876 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     844:	2316      	movs	r3, #22
     846:	18fb      	adds	r3, r7, r3
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	220f      	movs	r2, #15
     84c:	4013      	ands	r3, r2
     84e:	683a      	ldr	r2, [r7, #0]
     850:	7b12      	ldrb	r2, [r2, #12]
     852:	189b      	adds	r3, r3, r2
     854:	0018      	movs	r0, r3
     856:	4bb5      	ldr	r3, [pc, #724]	; (b2c <_adc_set_config+0x370>)
     858:	4798      	blx	r3
			start_pin++;
     85a:	2315      	movs	r3, #21
     85c:	18fb      	adds	r3, r7, r3
     85e:	781a      	ldrb	r2, [r3, #0]
     860:	2315      	movs	r3, #21
     862:	18fb      	adds	r3, r7, r3
     864:	3201      	adds	r2, #1
     866:	701a      	strb	r2, [r3, #0]
			offset++;
     868:	2316      	movs	r3, #22
     86a:	18fb      	adds	r3, r7, r3
     86c:	781a      	ldrb	r2, [r3, #0]
     86e:	2316      	movs	r3, #22
     870:	18fb      	adds	r3, r7, r3
     872:	3201      	adds	r2, #1
     874:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     876:	2315      	movs	r3, #21
     878:	18fa      	adds	r2, r7, r3
     87a:	230f      	movs	r3, #15
     87c:	18fb      	adds	r3, r7, r3
     87e:	7812      	ldrb	r2, [r2, #0]
     880:	781b      	ldrb	r3, [r3, #0]
     882:	429a      	cmp	r2, r3
     884:	d3de      	bcc.n	844 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     886:	683b      	ldr	r3, [r7, #0]
     888:	89db      	ldrh	r3, [r3, #14]
     88a:	0018      	movs	r0, r3
     88c:	4ba7      	ldr	r3, [pc, #668]	; (b2c <_adc_set_config+0x370>)
     88e:	4798      	blx	r3
     890:	e009      	b.n	8a6 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     892:	683b      	ldr	r3, [r7, #0]
     894:	7b1b      	ldrb	r3, [r3, #12]
     896:	0018      	movs	r0, r3
     898:	4ba4      	ldr	r3, [pc, #656]	; (b2c <_adc_set_config+0x370>)
     89a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	89db      	ldrh	r3, [r3, #14]
     8a0:	0018      	movs	r0, r3
     8a2:	4ba2      	ldr	r3, [pc, #648]	; (b2c <_adc_set_config+0x370>)
     8a4:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	7d5b      	ldrb	r3, [r3, #21]
     8aa:	009b      	lsls	r3, r3, #2
     8ac:	b2da      	uxtb	r2, r3
     8ae:	693b      	ldr	r3, [r7, #16]
     8b0:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	7d9b      	ldrb	r3, [r3, #22]
     8b6:	01db      	lsls	r3, r3, #7
     8b8:	b25a      	sxtb	r2, r3
			(config->reference);
     8ba:	683b      	ldr	r3, [r7, #0]
     8bc:	785b      	ldrb	r3, [r3, #1]
     8be:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     8c0:	4313      	orrs	r3, r2
     8c2:	b25b      	sxtb	r3, r3
     8c4:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     8c6:	693b      	ldr	r3, [r7, #16]
     8c8:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	791b      	ldrb	r3, [r3, #4]
     8ce:	2b34      	cmp	r3, #52	; 0x34
     8d0:	d846      	bhi.n	960 <_adc_set_config+0x1a4>
     8d2:	009a      	lsls	r2, r3, #2
     8d4:	4b96      	ldr	r3, [pc, #600]	; (b30 <_adc_set_config+0x374>)
     8d6:	18d3      	adds	r3, r2, r3
     8d8:	681b      	ldr	r3, [r3, #0]
     8da:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     8dc:	231f      	movs	r3, #31
     8de:	18fb      	adds	r3, r7, r3
     8e0:	683a      	ldr	r2, [r7, #0]
     8e2:	7c52      	ldrb	r2, [r2, #17]
     8e4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     8e6:	2317      	movs	r3, #23
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	683a      	ldr	r2, [r7, #0]
     8ec:	7c12      	ldrb	r2, [r2, #16]
     8ee:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     8f0:	2310      	movs	r3, #16
     8f2:	61bb      	str	r3, [r7, #24]
		break;
     8f4:	e036      	b.n	964 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     8f6:	231f      	movs	r3, #31
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	2201      	movs	r2, #1
     8fc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     8fe:	2317      	movs	r3, #23
     900:	18fb      	adds	r3, r7, r3
     902:	2202      	movs	r2, #2
     904:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     906:	2310      	movs	r3, #16
     908:	61bb      	str	r3, [r7, #24]
		break;
     90a:	e02b      	b.n	964 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     90c:	231f      	movs	r3, #31
     90e:	18fb      	adds	r3, r7, r3
     910:	2202      	movs	r2, #2
     912:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     914:	2317      	movs	r3, #23
     916:	18fb      	adds	r3, r7, r3
     918:	2204      	movs	r2, #4
     91a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     91c:	2310      	movs	r3, #16
     91e:	61bb      	str	r3, [r7, #24]
		break;
     920:	e020      	b.n	964 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     922:	231f      	movs	r3, #31
     924:	18fb      	adds	r3, r7, r3
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     92a:	2317      	movs	r3, #23
     92c:	18fb      	adds	r3, r7, r3
     92e:	2206      	movs	r2, #6
     930:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     932:	2310      	movs	r3, #16
     934:	61bb      	str	r3, [r7, #24]
		break;
     936:	e015      	b.n	964 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     938:	231f      	movs	r3, #31
     93a:	18fb      	adds	r3, r7, r3
     93c:	2200      	movs	r2, #0
     93e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     940:	2317      	movs	r3, #23
     942:	18fb      	adds	r3, r7, r3
     944:	2208      	movs	r2, #8
     946:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     948:	2310      	movs	r3, #16
     94a:	61bb      	str	r3, [r7, #24]
		break;
     94c:	e00a      	b.n	964 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     94e:	2330      	movs	r3, #48	; 0x30
     950:	61bb      	str	r3, [r7, #24]
		break;
     952:	e007      	b.n	964 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     954:	2320      	movs	r3, #32
     956:	61bb      	str	r3, [r7, #24]
		break;
     958:	e004      	b.n	964 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     95a:	2300      	movs	r3, #0
     95c:	61bb      	str	r3, [r7, #24]
		break;
     95e:	e001      	b.n	964 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     960:	2317      	movs	r3, #23
     962:	e1ae      	b.n	cc2 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     964:	231f      	movs	r3, #31
     966:	18fb      	adds	r3, r7, r3
     968:	781b      	ldrb	r3, [r3, #0]
     96a:	011b      	lsls	r3, r3, #4
     96c:	b2db      	uxtb	r3, r3
     96e:	2270      	movs	r2, #112	; 0x70
     970:	4013      	ands	r3, r2
     972:	b2da      	uxtb	r2, r3
     974:	2317      	movs	r3, #23
     976:	18fb      	adds	r3, r7, r3
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	4313      	orrs	r3, r2
     97c:	b2da      	uxtb	r2, r3
     97e:	693b      	ldr	r3, [r7, #16]
     980:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     982:	683b      	ldr	r3, [r7, #0]
     984:	7ddb      	ldrb	r3, [r3, #23]
     986:	2b3f      	cmp	r3, #63	; 0x3f
     988:	d901      	bls.n	98e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     98a:	2317      	movs	r3, #23
     98c:	e199      	b.n	cc2 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     98e:	683b      	ldr	r3, [r7, #0]
     990:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     992:	693b      	ldr	r3, [r7, #16]
     994:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     996:	46c0      	nop			; (mov r8, r8)
     998:	687b      	ldr	r3, [r7, #4]
     99a:	0018      	movs	r0, r3
     99c:	4b65      	ldr	r3, [pc, #404]	; (b34 <_adc_set_config+0x378>)
     99e:	4798      	blx	r3
     9a0:	1e03      	subs	r3, r0, #0
     9a2:	d1f9      	bne.n	998 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     9a4:	683b      	ldr	r3, [r7, #0]
     9a6:	885a      	ldrh	r2, [r3, #2]
     9a8:	69bb      	ldr	r3, [r7, #24]
     9aa:	b29b      	uxth	r3, r3
     9ac:	4313      	orrs	r3, r2
     9ae:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     9b0:	683b      	ldr	r3, [r7, #0]
     9b2:	2124      	movs	r1, #36	; 0x24
     9b4:	5c5b      	ldrb	r3, [r3, r1]
     9b6:	b29b      	uxth	r3, r3
     9b8:	00db      	lsls	r3, r3, #3
     9ba:	b29b      	uxth	r3, r3
			resolution |
     9bc:	4313      	orrs	r3, r2
     9be:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     9c0:	683b      	ldr	r3, [r7, #0]
     9c2:	7d1b      	ldrb	r3, [r3, #20]
     9c4:	b29b      	uxth	r3, r3
     9c6:	009b      	lsls	r3, r3, #2
     9c8:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     9ca:	4313      	orrs	r3, r2
     9cc:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     9ce:	683b      	ldr	r3, [r7, #0]
     9d0:	7c9b      	ldrb	r3, [r3, #18]
     9d2:	b29b      	uxth	r3, r3
     9d4:	18db      	adds	r3, r3, r3
     9d6:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     9d8:	4313      	orrs	r3, r2
     9da:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	7cdb      	ldrb	r3, [r3, #19]
     9e0:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     9e2:	4313      	orrs	r3, r2
     9e4:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     9e6:	693b      	ldr	r3, [r7, #16]
     9e8:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     9ea:	683b      	ldr	r3, [r7, #0]
     9ec:	7e1b      	ldrb	r3, [r3, #24]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d100      	bne.n	9f4 <_adc_set_config+0x238>
     9f2:	e0c4      	b.n	b7e <_adc_set_config+0x3c2>
		switch (resolution) {
     9f4:	69bb      	ldr	r3, [r7, #24]
     9f6:	2b10      	cmp	r3, #16
     9f8:	d100      	bne.n	9fc <_adc_set_config+0x240>
     9fa:	e076      	b.n	aea <_adc_set_config+0x32e>
     9fc:	d802      	bhi.n	a04 <_adc_set_config+0x248>
     9fe:	2b00      	cmp	r3, #0
     a00:	d04d      	beq.n	a9e <_adc_set_config+0x2e2>
     a02:	e0bc      	b.n	b7e <_adc_set_config+0x3c2>
     a04:	2b20      	cmp	r3, #32
     a06:	d023      	beq.n	a50 <_adc_set_config+0x294>
     a08:	2b30      	cmp	r3, #48	; 0x30
     a0a:	d000      	beq.n	a0e <_adc_set_config+0x252>
     a0c:	e0b7      	b.n	b7e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     a0e:	683b      	ldr	r3, [r7, #0]
     a10:	7cdb      	ldrb	r3, [r3, #19]
     a12:	2b00      	cmp	r3, #0
     a14:	d011      	beq.n	a3a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     a16:	683b      	ldr	r3, [r7, #0]
     a18:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a1a:	2b7f      	cmp	r3, #127	; 0x7f
     a1c:	dc0b      	bgt.n	a36 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     a1e:	683b      	ldr	r3, [r7, #0]
     a20:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     a22:	3380      	adds	r3, #128	; 0x80
     a24:	db07      	blt.n	a36 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     a26:	683b      	ldr	r3, [r7, #0]
     a28:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     a2a:	2b7f      	cmp	r3, #127	; 0x7f
     a2c:	dc03      	bgt.n	a36 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     a2e:	683b      	ldr	r3, [r7, #0]
     a30:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     a32:	3380      	adds	r3, #128	; 0x80
     a34:	da01      	bge.n	a3a <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a36:	2317      	movs	r3, #23
     a38:	e143      	b.n	cc2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     a3a:	683b      	ldr	r3, [r7, #0]
     a3c:	69db      	ldr	r3, [r3, #28]
     a3e:	2bff      	cmp	r3, #255	; 0xff
     a40:	dc04      	bgt.n	a4c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     a42:	683b      	ldr	r3, [r7, #0]
     a44:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     a46:	2bff      	cmp	r3, #255	; 0xff
     a48:	dc00      	bgt.n	a4c <_adc_set_config+0x290>
     a4a:	e091      	b.n	b70 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a4c:	2317      	movs	r3, #23
     a4e:	e138      	b.n	cc2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     a50:	683b      	ldr	r3, [r7, #0]
     a52:	7cdb      	ldrb	r3, [r3, #19]
     a54:	2b00      	cmp	r3, #0
     a56:	d015      	beq.n	a84 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     a58:	683b      	ldr	r3, [r7, #0]
     a5a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a5c:	4a36      	ldr	r2, [pc, #216]	; (b38 <_adc_set_config+0x37c>)
     a5e:	4293      	cmp	r3, r2
     a60:	dc0e      	bgt.n	a80 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     a62:	683b      	ldr	r3, [r7, #0]
     a64:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     a66:	4a35      	ldr	r2, [pc, #212]	; (b3c <_adc_set_config+0x380>)
     a68:	4293      	cmp	r3, r2
     a6a:	db09      	blt.n	a80 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     a6c:	683b      	ldr	r3, [r7, #0]
     a6e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     a70:	4a31      	ldr	r2, [pc, #196]	; (b38 <_adc_set_config+0x37c>)
     a72:	4293      	cmp	r3, r2
     a74:	dc04      	bgt.n	a80 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     a76:	683b      	ldr	r3, [r7, #0]
     a78:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     a7a:	4a30      	ldr	r2, [pc, #192]	; (b3c <_adc_set_config+0x380>)
     a7c:	4293      	cmp	r3, r2
     a7e:	da01      	bge.n	a84 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a80:	2317      	movs	r3, #23
     a82:	e11e      	b.n	cc2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	69db      	ldr	r3, [r3, #28]
     a88:	4a2d      	ldr	r2, [pc, #180]	; (b40 <_adc_set_config+0x384>)
     a8a:	4293      	cmp	r3, r2
     a8c:	dc05      	bgt.n	a9a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     a92:	4a2b      	ldr	r2, [pc, #172]	; (b40 <_adc_set_config+0x384>)
     a94:	4293      	cmp	r3, r2
     a96:	dc00      	bgt.n	a9a <_adc_set_config+0x2de>
     a98:	e06c      	b.n	b74 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a9a:	2317      	movs	r3, #23
     a9c:	e111      	b.n	cc2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     a9e:	683b      	ldr	r3, [r7, #0]
     aa0:	7cdb      	ldrb	r3, [r3, #19]
     aa2:	2b00      	cmp	r3, #0
     aa4:	d015      	beq.n	ad2 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     aa6:	683b      	ldr	r3, [r7, #0]
     aa8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     aaa:	4a26      	ldr	r2, [pc, #152]	; (b44 <_adc_set_config+0x388>)
     aac:	4293      	cmp	r3, r2
     aae:	dc0e      	bgt.n	ace <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     ab0:	683b      	ldr	r3, [r7, #0]
     ab2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     ab4:	4a24      	ldr	r2, [pc, #144]	; (b48 <_adc_set_config+0x38c>)
     ab6:	4293      	cmp	r3, r2
     ab8:	db09      	blt.n	ace <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     aba:	683b      	ldr	r3, [r7, #0]
     abc:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     abe:	4a21      	ldr	r2, [pc, #132]	; (b44 <_adc_set_config+0x388>)
     ac0:	4293      	cmp	r3, r2
     ac2:	dc04      	bgt.n	ace <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     ac4:	683b      	ldr	r3, [r7, #0]
     ac6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     ac8:	4a1f      	ldr	r2, [pc, #124]	; (b48 <_adc_set_config+0x38c>)
     aca:	4293      	cmp	r3, r2
     acc:	da01      	bge.n	ad2 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ace:	2317      	movs	r3, #23
     ad0:	e0f7      	b.n	cc2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     ad2:	683b      	ldr	r3, [r7, #0]
     ad4:	69db      	ldr	r3, [r3, #28]
     ad6:	4a1d      	ldr	r2, [pc, #116]	; (b4c <_adc_set_config+0x390>)
     ad8:	4293      	cmp	r3, r2
     ada:	dc04      	bgt.n	ae6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     adc:	683b      	ldr	r3, [r7, #0]
     ade:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     ae0:	4a1a      	ldr	r2, [pc, #104]	; (b4c <_adc_set_config+0x390>)
     ae2:	4293      	cmp	r3, r2
     ae4:	dd48      	ble.n	b78 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ae6:	2317      	movs	r3, #23
     ae8:	e0eb      	b.n	cc2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     aea:	683b      	ldr	r3, [r7, #0]
     aec:	7cdb      	ldrb	r3, [r3, #19]
     aee:	2b00      	cmp	r3, #0
     af0:	d032      	beq.n	b58 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     af2:	683b      	ldr	r3, [r7, #0]
     af4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     af6:	4a16      	ldr	r2, [pc, #88]	; (b50 <_adc_set_config+0x394>)
     af8:	4293      	cmp	r3, r2
     afa:	dc0e      	bgt.n	b1a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     afc:	683b      	ldr	r3, [r7, #0]
     afe:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     b00:	4a14      	ldr	r2, [pc, #80]	; (b54 <_adc_set_config+0x398>)
     b02:	4293      	cmp	r3, r2
     b04:	db09      	blt.n	b1a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     b06:	683b      	ldr	r3, [r7, #0]
     b08:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     b0a:	4a11      	ldr	r2, [pc, #68]	; (b50 <_adc_set_config+0x394>)
     b0c:	4293      	cmp	r3, r2
     b0e:	dc04      	bgt.n	b1a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     b14:	4a0f      	ldr	r2, [pc, #60]	; (b54 <_adc_set_config+0x398>)
     b16:	4293      	cmp	r3, r2
     b18:	da1e      	bge.n	b58 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     b1a:	2317      	movs	r3, #23
     b1c:	e0d1      	b.n	cc2 <_adc_set_config+0x506>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000595 	.word	0x00000595
     b24:	000064c1 	.word	0x000064c1
     b28:	00006505 	.word	0x00006505
     b2c:	00000745 	.word	0x00000745
     b30:	0000af6c 	.word	0x0000af6c
     b34:	00000671 	.word	0x00000671
     b38:	000001ff 	.word	0x000001ff
     b3c:	fffffe00 	.word	0xfffffe00
     b40:	000003ff 	.word	0x000003ff
     b44:	000007ff 	.word	0x000007ff
     b48:	fffff800 	.word	0xfffff800
     b4c:	00000fff 	.word	0x00000fff
     b50:	00007fff 	.word	0x00007fff
     b54:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	69db      	ldr	r3, [r3, #28]
     b5c:	4a5b      	ldr	r2, [pc, #364]	; (ccc <_adc_set_config+0x510>)
     b5e:	4293      	cmp	r3, r2
     b60:	dc04      	bgt.n	b6c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     b62:	683b      	ldr	r3, [r7, #0]
     b64:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     b66:	4a59      	ldr	r2, [pc, #356]	; (ccc <_adc_set_config+0x510>)
     b68:	4293      	cmp	r3, r2
     b6a:	dd07      	ble.n	b7c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     b6c:	2317      	movs	r3, #23
     b6e:	e0a8      	b.n	cc2 <_adc_set_config+0x506>
			break;
     b70:	46c0      	nop			; (mov r8, r8)
     b72:	e004      	b.n	b7e <_adc_set_config+0x3c2>
			break;
     b74:	46c0      	nop			; (mov r8, r8)
     b76:	e002      	b.n	b7e <_adc_set_config+0x3c2>
			break;
     b78:	46c0      	nop			; (mov r8, r8)
     b7a:	e000      	b.n	b7e <_adc_set_config+0x3c2>
			}
			break;
     b7c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	0018      	movs	r0, r3
     b84:	4b52      	ldr	r3, [pc, #328]	; (cd0 <_adc_set_config+0x514>)
     b86:	4798      	blx	r3
     b88:	1e03      	subs	r3, r0, #0
     b8a:	d1f9      	bne.n	b80 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     b8c:	683b      	ldr	r3, [r7, #0]
     b8e:	7e1a      	ldrb	r2, [r3, #24]
     b90:	693b      	ldr	r3, [r7, #16]
     b92:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     b94:	46c0      	nop			; (mov r8, r8)
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	0018      	movs	r0, r3
     b9a:	4b4d      	ldr	r3, [pc, #308]	; (cd0 <_adc_set_config+0x514>)
     b9c:	4798      	blx	r3
     b9e:	1e03      	subs	r3, r0, #0
     ba0:	d1f9      	bne.n	b96 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     ba2:	683b      	ldr	r3, [r7, #0]
     ba4:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     ba6:	b29a      	uxth	r2, r3
     ba8:	693b      	ldr	r3, [r7, #16]
     baa:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     bac:	46c0      	nop			; (mov r8, r8)
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	0018      	movs	r0, r3
     bb2:	4b47      	ldr	r3, [pc, #284]	; (cd0 <_adc_set_config+0x514>)
     bb4:	4798      	blx	r3
     bb6:	1e03      	subs	r3, r0, #0
     bb8:	d1f9      	bne.n	bae <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     bba:	683b      	ldr	r3, [r7, #0]
     bbc:	6a1b      	ldr	r3, [r3, #32]
     bbe:	b29a      	uxth	r2, r3
     bc0:	693b      	ldr	r3, [r7, #16]
     bc2:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     bc4:	2314      	movs	r3, #20
     bc6:	18fb      	adds	r3, r7, r3
     bc8:	683a      	ldr	r2, [r7, #0]
     bca:	212c      	movs	r1, #44	; 0x2c
     bcc:	5c52      	ldrb	r2, [r2, r1]
     bce:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     bd0:	2314      	movs	r3, #20
     bd2:	18fb      	adds	r3, r7, r3
     bd4:	781b      	ldrb	r3, [r3, #0]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d006      	beq.n	be8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     bda:	2314      	movs	r3, #20
     bdc:	18fb      	adds	r3, r7, r3
     bde:	781a      	ldrb	r2, [r3, #0]
     be0:	2314      	movs	r3, #20
     be2:	18fb      	adds	r3, r7, r3
     be4:	3a01      	subs	r2, #1
     be6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     be8:	2314      	movs	r3, #20
     bea:	18fb      	adds	r3, r7, r3
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b0f      	cmp	r3, #15
     bf0:	d804      	bhi.n	bfc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     bf2:	683b      	ldr	r3, [r7, #0]
     bf4:	222b      	movs	r2, #43	; 0x2b
     bf6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bf8:	2b0f      	cmp	r3, #15
     bfa:	d901      	bls.n	c00 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     bfc:	2317      	movs	r3, #23
     bfe:	e060      	b.n	cc2 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     c00:	46c0      	nop			; (mov r8, r8)
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	0018      	movs	r0, r3
     c06:	4b32      	ldr	r3, [pc, #200]	; (cd0 <_adc_set_config+0x514>)
     c08:	4798      	blx	r3
     c0a:	1e03      	subs	r3, r0, #0
     c0c:	d1f9      	bne.n	c02 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     c0e:	683b      	ldr	r3, [r7, #0]
     c10:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     c12:	683a      	ldr	r2, [r7, #0]
     c14:	212b      	movs	r1, #43	; 0x2b
     c16:	5c52      	ldrb	r2, [r2, r1]
     c18:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     c1a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     c1c:	2214      	movs	r2, #20
     c1e:	18ba      	adds	r2, r7, r2
     c20:	7812      	ldrb	r2, [r2, #0]
     c22:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     c24:	4313      	orrs	r3, r2
			config->negative_input |
     c26:	683a      	ldr	r2, [r7, #0]
     c28:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     c2a:	4313      	orrs	r3, r2
			config->positive_input;
     c2c:	683a      	ldr	r2, [r7, #0]
     c2e:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     c30:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     c32:	693b      	ldr	r3, [r7, #16]
     c34:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     c36:	683b      	ldr	r3, [r7, #0]
     c38:	222a      	movs	r2, #42	; 0x2a
     c3a:	5c9a      	ldrb	r2, [r3, r2]
     c3c:	693b      	ldr	r3, [r7, #16]
     c3e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     c40:	693b      	ldr	r3, [r7, #16]
     c42:	220f      	movs	r2, #15
     c44:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	2224      	movs	r2, #36	; 0x24
     c4a:	5c9b      	ldrb	r3, [r3, r2]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d01e      	beq.n	c8e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     c50:	683b      	ldr	r3, [r7, #0]
     c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     c54:	4a1f      	ldr	r2, [pc, #124]	; (cd4 <_adc_set_config+0x518>)
     c56:	4293      	cmp	r3, r2
     c58:	d901      	bls.n	c5e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     c5a:	2317      	movs	r3, #23
     c5c:	e031      	b.n	cc2 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     c5e:	683b      	ldr	r3, [r7, #0]
     c60:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     c62:	693b      	ldr	r3, [r7, #16]
     c64:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     c66:	683b      	ldr	r3, [r7, #0]
     c68:	2228      	movs	r2, #40	; 0x28
     c6a:	5e9b      	ldrsh	r3, [r3, r2]
     c6c:	4a1a      	ldr	r2, [pc, #104]	; (cd8 <_adc_set_config+0x51c>)
     c6e:	4293      	cmp	r3, r2
     c70:	dc05      	bgt.n	c7e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	2228      	movs	r2, #40	; 0x28
     c76:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     c78:	4a18      	ldr	r2, [pc, #96]	; (cdc <_adc_set_config+0x520>)
     c7a:	4293      	cmp	r3, r2
     c7c:	da01      	bge.n	c82 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     c7e:	2317      	movs	r3, #23
     c80:	e01f      	b.n	cc2 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     c82:	683b      	ldr	r3, [r7, #0]
     c84:	2228      	movs	r2, #40	; 0x28
     c86:	5e9b      	ldrsh	r3, [r3, r2]
     c88:	b29a      	uxth	r2, r3
     c8a:	693b      	ldr	r3, [r7, #16]
     c8c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     c8e:	4b14      	ldr	r3, [pc, #80]	; (ce0 <_adc_set_config+0x524>)
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	08db      	lsrs	r3, r3, #3
     c94:	b29b      	uxth	r3, r3
     c96:	021b      	lsls	r3, r3, #8
     c98:	b29a      	uxth	r2, r3
     c9a:	23e0      	movs	r3, #224	; 0xe0
     c9c:	00db      	lsls	r3, r3, #3
     c9e:	4013      	ands	r3, r2
     ca0:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     ca2:	4b10      	ldr	r3, [pc, #64]	; (ce4 <_adc_set_config+0x528>)
     ca4:	685c      	ldr	r4, [r3, #4]
     ca6:	681b      	ldr	r3, [r3, #0]
     ca8:	0161      	lsls	r1, r4, #5
     caa:	0edd      	lsrs	r5, r3, #27
     cac:	430d      	orrs	r5, r1
     cae:	0ee6      	lsrs	r6, r4, #27
     cb0:	b2ab      	uxth	r3, r5
     cb2:	21ff      	movs	r1, #255	; 0xff
     cb4:	400b      	ands	r3, r1
     cb6:	b29b      	uxth	r3, r3
			) |
     cb8:	4313      	orrs	r3, r2
     cba:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     cbc:	693b      	ldr	r3, [r7, #16]
     cbe:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     cc0:	2300      	movs	r3, #0
}
     cc2:	0018      	movs	r0, r3
     cc4:	46bd      	mov	sp, r7
     cc6:	b009      	add	sp, #36	; 0x24
     cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	0000ffff 	.word	0x0000ffff
     cd0:	00000671 	.word	0x00000671
     cd4:	00000fff 	.word	0x00000fff
     cd8:	000007ff 	.word	0x000007ff
     cdc:	fffff800 	.word	0xfffff800
     ce0:	00806024 	.word	0x00806024
     ce4:	00806020 	.word	0x00806020

00000ce8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b086      	sub	sp, #24
     cec:	af00      	add	r7, sp, #0
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     cf4:	68fb      	ldr	r3, [r7, #12]
     cf6:	68ba      	ldr	r2, [r7, #8]
     cf8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     cfa:	2380      	movs	r3, #128	; 0x80
     cfc:	025b      	lsls	r3, r3, #9
     cfe:	0019      	movs	r1, r3
     d00:	2002      	movs	r0, #2
     d02:	4b32      	ldr	r3, [pc, #200]	; (dcc <adc_init+0xe4>)
     d04:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     d06:	68bb      	ldr	r3, [r7, #8]
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	b2db      	uxtb	r3, r3
     d0c:	001a      	movs	r2, r3
     d0e:	2301      	movs	r3, #1
     d10:	4013      	ands	r3, r2
     d12:	d001      	beq.n	d18 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     d14:	2305      	movs	r3, #5
     d16:	e055      	b.n	dc4 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	b2db      	uxtb	r3, r3
     d1e:	001a      	movs	r2, r3
     d20:	2302      	movs	r3, #2
     d22:	4013      	ands	r3, r2
     d24:	d001      	beq.n	d2a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     d26:	231c      	movs	r3, #28
     d28:	e04c      	b.n	dc4 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	785a      	ldrb	r2, [r3, #1]
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	791b      	ldrb	r3, [r3, #4]
     d36:	2b00      	cmp	r3, #0
     d38:	d102      	bne.n	d40 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     d3a:	2001      	movs	r0, #1
     d3c:	4b24      	ldr	r3, [pc, #144]	; (dd0 <adc_init+0xe8>)
     d3e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     d40:	2317      	movs	r3, #23
     d42:	18fb      	adds	r3, r7, r3
     d44:	2200      	movs	r2, #0
     d46:	701a      	strb	r2, [r3, #0]
     d48:	e00e      	b.n	d68 <adc_init+0x80>
		module_inst->callback[i] = NULL;
     d4a:	2317      	movs	r3, #23
     d4c:	18fb      	adds	r3, r7, r3
     d4e:	781a      	ldrb	r2, [r3, #0]
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	3202      	adds	r2, #2
     d54:	0092      	lsls	r2, r2, #2
     d56:	2100      	movs	r1, #0
     d58:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     d5a:	2317      	movs	r3, #23
     d5c:	18fb      	adds	r3, r7, r3
     d5e:	781a      	ldrb	r2, [r3, #0]
     d60:	2317      	movs	r3, #23
     d62:	18fb      	adds	r3, r7, r3
     d64:	3201      	adds	r2, #1
     d66:	701a      	strb	r2, [r3, #0]
     d68:	2317      	movs	r3, #23
     d6a:	18fb      	adds	r3, r7, r3
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	2b02      	cmp	r3, #2
     d70:	d9eb      	bls.n	d4a <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	2200      	movs	r2, #0
     d76:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	2200      	movs	r2, #0
     d7c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     d7e:	68fb      	ldr	r3, [r7, #12]
     d80:	2200      	movs	r2, #0
     d82:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     d84:	68fb      	ldr	r3, [r7, #12]
     d86:	2200      	movs	r2, #0
     d88:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
     d8a:	4b12      	ldr	r3, [pc, #72]	; (dd4 <adc_init+0xec>)
     d8c:	68fa      	ldr	r2, [r7, #12]
     d8e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	222a      	movs	r2, #42	; 0x2a
     d94:	5c9b      	ldrb	r3, [r3, r2]
     d96:	2b00      	cmp	r3, #0
     d98:	d10a      	bne.n	db0 <adc_init+0xc8>
			!config->freerunning) {
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	7d1b      	ldrb	r3, [r3, #20]
     d9e:	2201      	movs	r2, #1
     da0:	4053      	eors	r3, r2
     da2:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     da4:	2b00      	cmp	r3, #0
     da6:	d003      	beq.n	db0 <adc_init+0xc8>
		module_inst->software_trigger = true;
     da8:	68fb      	ldr	r3, [r7, #12]
     daa:	2201      	movs	r2, #1
     dac:	775a      	strb	r2, [r3, #29]
     dae:	e002      	b.n	db6 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	2200      	movs	r2, #0
     db4:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	0011      	movs	r1, r2
     dbc:	0018      	movs	r0, r3
     dbe:	4b06      	ldr	r3, [pc, #24]	; (dd8 <adc_init+0xf0>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
}
     dc4:	0018      	movs	r0, r3
     dc6:	46bd      	mov	sp, r7
     dc8:	b006      	add	sp, #24
     dca:	bd80      	pop	{r7, pc}
     dcc:	000005ad 	.word	0x000005ad
     dd0:	00000631 	.word	0x00000631
     dd4:	200002dc 	.word	0x200002dc
     dd8:	000007bd 	.word	0x000007bd

00000ddc <adc_is_syncing>:
{
     ddc:	b580      	push	{r7, lr}
     dde:	b084      	sub	sp, #16
     de0:	af00      	add	r7, sp, #0
     de2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	7e5b      	ldrb	r3, [r3, #25]
     dee:	b2db      	uxtb	r3, r3
     df0:	b25b      	sxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	da01      	bge.n	dfa <adc_is_syncing+0x1e>
		return true;
     df6:	2301      	movs	r3, #1
     df8:	e000      	b.n	dfc <adc_is_syncing+0x20>
	return false;
     dfa:	2300      	movs	r3, #0
}
     dfc:	0018      	movs	r0, r3
     dfe:	46bd      	mov	sp, r7
     e00:	b004      	add	sp, #16
     e02:	bd80      	pop	{r7, pc}

00000e04 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	0018      	movs	r0, r3
     e18:	4b0b      	ldr	r3, [pc, #44]	; (e48 <adc_start_conversion+0x44>)
     e1a:	4798      	blx	r3
     e1c:	1e03      	subs	r3, r0, #0
     e1e:	d1f9      	bne.n	e14 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	7b1b      	ldrb	r3, [r3, #12]
     e24:	b2db      	uxtb	r3, r3
     e26:	2202      	movs	r2, #2
     e28:	4313      	orrs	r3, r2
     e2a:	b2da      	uxtb	r2, r3
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     e30:	46c0      	nop			; (mov r8, r8)
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	0018      	movs	r0, r3
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <adc_start_conversion+0x44>)
     e38:	4798      	blx	r3
     e3a:	1e03      	subs	r3, r0, #0
     e3c:	d1f9      	bne.n	e32 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	46bd      	mov	sp, r7
     e42:	b004      	add	sp, #16
     e44:	bd80      	pop	{r7, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00000ddd 	.word	0x00000ddd

00000e4c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     e4c:	b580      	push	{r7, lr}
     e4e:	b084      	sub	sp, #16
     e50:	af00      	add	r7, sp, #0
     e52:	6078      	str	r0, [r7, #4]
     e54:	000a      	movs	r2, r1
     e56:	1cfb      	adds	r3, r7, #3
     e58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	1cfa      	adds	r2, r7, #3
     e64:	7812      	ldrb	r2, [r2, #0]
     e66:	759a      	strb	r2, [r3, #22]
}
     e68:	46c0      	nop			; (mov r8, r8)
     e6a:	46bd      	mov	sp, r7
     e6c:	b004      	add	sp, #16
     e6e:	bd80      	pop	{r7, pc}

00000e70 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	0002      	movs	r2, r0
     e78:	1dfb      	adds	r3, r7, #7
     e7a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     e7c:	1dfb      	adds	r3, r7, #7
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	4b44      	ldr	r3, [pc, #272]	; (f94 <_adc_interrupt_handler+0x124>)
     e82:	0092      	lsls	r2, r2, #2
     e84:	58d3      	ldr	r3, [r2, r3]
     e86:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	681b      	ldr	r3, [r3, #0]
     e8c:	7e1b      	ldrb	r3, [r3, #24]
     e8e:	b2db      	uxtb	r3, r3
     e90:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     e92:	68bb      	ldr	r3, [r7, #8]
     e94:	2201      	movs	r2, #1
     e96:	4013      	ands	r3, r2
     e98:	d045      	beq.n	f26 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     e9a:	68fb      	ldr	r3, [r7, #12]
     e9c:	7edb      	ldrb	r3, [r3, #27]
     e9e:	001a      	movs	r2, r3
     ea0:	2301      	movs	r3, #1
     ea2:	4013      	ands	r3, r2
     ea4:	d03f      	beq.n	f26 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     ea6:	68fb      	ldr	r3, [r7, #12]
     ea8:	7e9b      	ldrb	r3, [r3, #26]
     eaa:	001a      	movs	r2, r3
     eac:	2301      	movs	r3, #1
     eae:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     eb0:	d039      	beq.n	f26 <_adc_interrupt_handler+0xb6>
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     eb2:	68fb      	ldr	r3, [r7, #12]
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	2201      	movs	r2, #1
     eb8:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	0018      	movs	r0, r3
     ec0:	4b35      	ldr	r3, [pc, #212]	; (f98 <_adc_interrupt_handler+0x128>)
     ec2:	4798      	blx	r3
     ec4:	1e03      	subs	r3, r0, #0
     ec6:	d1f9      	bne.n	ebc <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	695b      	ldr	r3, [r3, #20]
     ecc:	1c99      	adds	r1, r3, #2
     ece:	68fa      	ldr	r2, [r7, #12]
     ed0:	6151      	str	r1, [r2, #20]
     ed2:	68fa      	ldr	r2, [r7, #12]
     ed4:	6812      	ldr	r2, [r2, #0]
     ed6:	8b52      	ldrh	r2, [r2, #26]
     ed8:	b292      	uxth	r2, r2
     eda:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	8b1b      	ldrh	r3, [r3, #24]
     ee0:	b29b      	uxth	r3, r3
     ee2:	3b01      	subs	r3, #1
     ee4:	b29b      	uxth	r3, r3
     ee6:	68fa      	ldr	r2, [r7, #12]
     ee8:	1c19      	adds	r1, r3, #0
     eea:	8311      	strh	r1, [r2, #24]
     eec:	2b00      	cmp	r3, #0
     eee:	d008      	beq.n	f02 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	7f5b      	ldrb	r3, [r3, #29]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d016      	beq.n	f26 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
     ef8:	68fb      	ldr	r3, [r7, #12]
     efa:	0018      	movs	r0, r3
     efc:	4b27      	ldr	r3, [pc, #156]	; (f9c <_adc_interrupt_handler+0x12c>)
     efe:	4798      	blx	r3
     f00:	e011      	b.n	f26 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	7f1b      	ldrb	r3, [r3, #28]
     f06:	b2db      	uxtb	r3, r3
     f08:	2b05      	cmp	r3, #5
     f0a:	d10c      	bne.n	f26 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	2200      	movs	r2, #0
     f10:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	2101      	movs	r1, #1
     f16:	0018      	movs	r0, r3
     f18:	4b21      	ldr	r3, [pc, #132]	; (fa0 <_adc_interrupt_handler+0x130>)
     f1a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	689b      	ldr	r3, [r3, #8]
     f20:	68fa      	ldr	r2, [r7, #12]
     f22:	0010      	movs	r0, r2
     f24:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     f26:	68bb      	ldr	r3, [r7, #8]
     f28:	2204      	movs	r2, #4
     f2a:	4013      	ands	r3, r2
     f2c:	d014      	beq.n	f58 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	2204      	movs	r2, #4
     f34:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     f36:	68fb      	ldr	r3, [r7, #12]
     f38:	7edb      	ldrb	r3, [r3, #27]
     f3a:	001a      	movs	r2, r3
     f3c:	2302      	movs	r3, #2
     f3e:	4013      	ands	r3, r2
     f40:	d00a      	beq.n	f58 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     f42:	68fb      	ldr	r3, [r7, #12]
     f44:	7e9b      	ldrb	r3, [r3, #26]
     f46:	001a      	movs	r2, r3
     f48:	2302      	movs	r3, #2
     f4a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     f4c:	d004      	beq.n	f58 <_adc_interrupt_handler+0xe8>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	68db      	ldr	r3, [r3, #12]
     f52:	68fa      	ldr	r2, [r7, #12]
     f54:	0010      	movs	r0, r2
     f56:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     f58:	68bb      	ldr	r3, [r7, #8]
     f5a:	2202      	movs	r2, #2
     f5c:	4013      	ands	r3, r2
     f5e:	d014      	beq.n	f8a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	2202      	movs	r2, #2
     f66:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f68:	68fb      	ldr	r3, [r7, #12]
     f6a:	7edb      	ldrb	r3, [r3, #27]
     f6c:	001a      	movs	r2, r3
     f6e:	2304      	movs	r3, #4
     f70:	4013      	ands	r3, r2
     f72:	d00a      	beq.n	f8a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	7e9b      	ldrb	r3, [r3, #26]
     f78:	001a      	movs	r2, r3
     f7a:	2304      	movs	r3, #4
     f7c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f7e:	d004      	beq.n	f8a <_adc_interrupt_handler+0x11a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	691b      	ldr	r3, [r3, #16]
     f84:	68fa      	ldr	r2, [r7, #12]
     f86:	0010      	movs	r0, r2
     f88:	4798      	blx	r3
		}
	}
}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	46bd      	mov	sp, r7
     f8e:	b004      	add	sp, #16
     f90:	bd80      	pop	{r7, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	200002dc 	.word	0x200002dc
     f98:	00000ddd 	.word	0x00000ddd
     f9c:	00000e05 	.word	0x00000e05
     fa0:	00000e4d 	.word	0x00000e4d

00000fa4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     fa4:	b580      	push	{r7, lr}
     fa6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     fa8:	2000      	movs	r0, #0
     faa:	4b02      	ldr	r3, [pc, #8]	; (fb4 <ADC_Handler+0x10>)
     fac:	4798      	blx	r3
}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	46bd      	mov	sp, r7
     fb2:	bd80      	pop	{r7, pc}
     fb4:	00000e71 	.word	0x00000e71

00000fb8 <system_gclk_chan_get_config_defaults>:
{
     fb8:	b580      	push	{r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	2200      	movs	r2, #0
     fc4:	701a      	strb	r2, [r3, #0]
}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	46bd      	mov	sp, r7
     fca:	b002      	add	sp, #8
     fcc:	bd80      	pop	{r7, pc}
	...

00000fd0 <system_apb_clock_set_mask>:
{
     fd0:	b580      	push	{r7, lr}
     fd2:	b082      	sub	sp, #8
     fd4:	af00      	add	r7, sp, #0
     fd6:	0002      	movs	r2, r0
     fd8:	6039      	str	r1, [r7, #0]
     fda:	1dfb      	adds	r3, r7, #7
     fdc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     fde:	1dfb      	adds	r3, r7, #7
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	2b01      	cmp	r3, #1
     fe4:	d00a      	beq.n	ffc <system_apb_clock_set_mask+0x2c>
     fe6:	2b02      	cmp	r3, #2
     fe8:	d00f      	beq.n	100a <system_apb_clock_set_mask+0x3a>
     fea:	2b00      	cmp	r3, #0
     fec:	d114      	bne.n	1018 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     fee:	4b0e      	ldr	r3, [pc, #56]	; (1028 <system_apb_clock_set_mask+0x58>)
     ff0:	4a0d      	ldr	r2, [pc, #52]	; (1028 <system_apb_clock_set_mask+0x58>)
     ff2:	6991      	ldr	r1, [r2, #24]
     ff4:	683a      	ldr	r2, [r7, #0]
     ff6:	430a      	orrs	r2, r1
     ff8:	619a      	str	r2, [r3, #24]
			break;
     ffa:	e00f      	b.n	101c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     ffc:	4b0a      	ldr	r3, [pc, #40]	; (1028 <system_apb_clock_set_mask+0x58>)
     ffe:	4a0a      	ldr	r2, [pc, #40]	; (1028 <system_apb_clock_set_mask+0x58>)
    1000:	69d1      	ldr	r1, [r2, #28]
    1002:	683a      	ldr	r2, [r7, #0]
    1004:	430a      	orrs	r2, r1
    1006:	61da      	str	r2, [r3, #28]
			break;
    1008:	e008      	b.n	101c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    100a:	4b07      	ldr	r3, [pc, #28]	; (1028 <system_apb_clock_set_mask+0x58>)
    100c:	4a06      	ldr	r2, [pc, #24]	; (1028 <system_apb_clock_set_mask+0x58>)
    100e:	6a11      	ldr	r1, [r2, #32]
    1010:	683a      	ldr	r2, [r7, #0]
    1012:	430a      	orrs	r2, r1
    1014:	621a      	str	r2, [r3, #32]
			break;
    1016:	e001      	b.n	101c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1018:	2317      	movs	r3, #23
    101a:	e000      	b.n	101e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    101c:	2300      	movs	r3, #0
}
    101e:	0018      	movs	r0, r3
    1020:	46bd      	mov	sp, r7
    1022:	b002      	add	sp, #8
    1024:	bd80      	pop	{r7, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	40000400 	.word	0x40000400

0000102c <system_pinmux_get_config_defaults>:
{
    102c:	b580      	push	{r7, lr}
    102e:	b082      	sub	sp, #8
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	2280      	movs	r2, #128	; 0x80
    1038:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	2200      	movs	r2, #0
    103e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	2201      	movs	r2, #1
    1044:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	2200      	movs	r2, #0
    104a:	70da      	strb	r2, [r3, #3]
}
    104c:	46c0      	nop			; (mov r8, r8)
    104e:	46bd      	mov	sp, r7
    1050:	b002      	add	sp, #8
    1052:	bd80      	pop	{r7, pc}

00001054 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1054:	b580      	push	{r7, lr}
    1056:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1058:	4b05      	ldr	r3, [pc, #20]	; (1070 <system_is_debugger_present+0x1c>)
    105a:	789b      	ldrb	r3, [r3, #2]
    105c:	b2db      	uxtb	r3, r3
    105e:	001a      	movs	r2, r3
    1060:	2302      	movs	r3, #2
    1062:	4013      	ands	r3, r2
    1064:	1e5a      	subs	r2, r3, #1
    1066:	4193      	sbcs	r3, r2
    1068:	b2db      	uxtb	r3, r3
}
    106a:	0018      	movs	r0, r3
    106c:	46bd      	mov	sp, r7
    106e:	bd80      	pop	{r7, pc}
    1070:	41002000 	.word	0x41002000

00001074 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1074:	b580      	push	{r7, lr}
    1076:	b084      	sub	sp, #16
    1078:	af00      	add	r7, sp, #0
    107a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	681b      	ldr	r3, [r3, #0]
    1080:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	69db      	ldr	r3, [r3, #28]
    1086:	2207      	movs	r2, #7
    1088:	4013      	ands	r3, r2
    108a:	1e5a      	subs	r2, r3, #1
    108c:	4193      	sbcs	r3, r2
    108e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1090:	0018      	movs	r0, r3
    1092:	46bd      	mov	sp, r7
    1094:	b004      	add	sp, #16
    1096:	bd80      	pop	{r7, pc}

00001098 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1098:	b580      	push	{r7, lr}
    109a:	b082      	sub	sp, #8
    109c:	af00      	add	r7, sp, #0
    109e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    10a0:	46c0      	nop			; (mov r8, r8)
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	0018      	movs	r0, r3
    10a6:	4b04      	ldr	r3, [pc, #16]	; (10b8 <_i2c_master_wait_for_sync+0x20>)
    10a8:	4798      	blx	r3
    10aa:	1e03      	subs	r3, r0, #0
    10ac:	d1f9      	bne.n	10a2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	46bd      	mov	sp, r7
    10b2:	b002      	add	sp, #8
    10b4:	bd80      	pop	{r7, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	00001075 	.word	0x00001075

000010bc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10be:	b097      	sub	sp, #92	; 0x5c
    10c0:	af00      	add	r7, sp, #0
    10c2:	6178      	str	r0, [r7, #20]
    10c4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    10c6:	2300      	movs	r3, #0
    10c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    10ca:	2300      	movs	r3, #0
    10cc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    10ce:	2300      	movs	r3, #0
    10d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    10d2:	233b      	movs	r3, #59	; 0x3b
    10d4:	2210      	movs	r2, #16
    10d6:	4694      	mov	ip, r2
    10d8:	44bc      	add	ip, r7
    10da:	4463      	add	r3, ip
    10dc:	2200      	movs	r2, #0
    10de:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10e0:	697b      	ldr	r3, [r7, #20]
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    10e6:	697b      	ldr	r3, [r7, #20]
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    10ec:	2323      	movs	r3, #35	; 0x23
    10ee:	2210      	movs	r2, #16
    10f0:	18ba      	adds	r2, r7, r2
    10f2:	18d4      	adds	r4, r2, r3
    10f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10f6:	0018      	movs	r0, r3
    10f8:	4bc0      	ldr	r3, [pc, #768]	; (13fc <_i2c_master_set_config+0x340>)
    10fa:	4798      	blx	r3
    10fc:	0003      	movs	r3, r0
    10fe:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1100:	230c      	movs	r3, #12
    1102:	2210      	movs	r2, #16
    1104:	4694      	mov	ip, r2
    1106:	44bc      	add	ip, r7
    1108:	4463      	add	r3, ip
    110a:	0018      	movs	r0, r3
    110c:	4bbc      	ldr	r3, [pc, #752]	; (1400 <_i2c_master_set_config+0x344>)
    110e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	69db      	ldr	r3, [r3, #28]
    1114:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    1116:	693b      	ldr	r3, [r7, #16]
    1118:	6a1b      	ldr	r3, [r3, #32]
    111a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    111c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    111e:	2b00      	cmp	r3, #0
    1120:	d106      	bne.n	1130 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1124:	2100      	movs	r1, #0
    1126:	0018      	movs	r0, r3
    1128:	4bb6      	ldr	r3, [pc, #728]	; (1404 <_i2c_master_set_config+0x348>)
    112a:	4798      	blx	r3
    112c:	0003      	movs	r3, r0
    112e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1132:	b2da      	uxtb	r2, r3
    1134:	230c      	movs	r3, #12
    1136:	2110      	movs	r1, #16
    1138:	468c      	mov	ip, r1
    113a:	44bc      	add	ip, r7
    113c:	4463      	add	r3, ip
    113e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1140:	230c      	movs	r3, #12
    1142:	2210      	movs	r2, #16
    1144:	4694      	mov	ip, r2
    1146:	44bc      	add	ip, r7
    1148:	4463      	add	r3, ip
    114a:	2202      	movs	r2, #2
    114c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    114e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1150:	0c1b      	lsrs	r3, r3, #16
    1152:	b2db      	uxtb	r3, r3
    1154:	220c      	movs	r2, #12
    1156:	2110      	movs	r1, #16
    1158:	468c      	mov	ip, r1
    115a:	44bc      	add	ip, r7
    115c:	4462      	add	r2, ip
    115e:	0011      	movs	r1, r2
    1160:	0018      	movs	r0, r3
    1162:	4ba9      	ldr	r3, [pc, #676]	; (1408 <_i2c_master_set_config+0x34c>)
    1164:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1168:	2b00      	cmp	r3, #0
    116a:	d106      	bne.n	117a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    116e:	2101      	movs	r1, #1
    1170:	0018      	movs	r0, r3
    1172:	4ba4      	ldr	r3, [pc, #656]	; (1404 <_i2c_master_set_config+0x348>)
    1174:	4798      	blx	r3
    1176:	0003      	movs	r3, r0
    1178:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    117a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    117c:	b2da      	uxtb	r2, r3
    117e:	230c      	movs	r3, #12
    1180:	2110      	movs	r1, #16
    1182:	468c      	mov	ip, r1
    1184:	44bc      	add	ip, r7
    1186:	4463      	add	r3, ip
    1188:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    118a:	230c      	movs	r3, #12
    118c:	2210      	movs	r2, #16
    118e:	4694      	mov	ip, r2
    1190:	44bc      	add	ip, r7
    1192:	4463      	add	r3, ip
    1194:	2202      	movs	r2, #2
    1196:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    119a:	0c1b      	lsrs	r3, r3, #16
    119c:	b2db      	uxtb	r3, r3
    119e:	220c      	movs	r2, #12
    11a0:	2110      	movs	r1, #16
    11a2:	468c      	mov	ip, r1
    11a4:	44bc      	add	ip, r7
    11a6:	4462      	add	r2, ip
    11a8:	0011      	movs	r1, r2
    11aa:	0018      	movs	r0, r3
    11ac:	4b96      	ldr	r3, [pc, #600]	; (1408 <_i2c_master_set_config+0x34c>)
    11ae:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    11b0:	693b      	ldr	r3, [r7, #16]
    11b2:	8a9a      	ldrh	r2, [r3, #20]
    11b4:	697b      	ldr	r3, [r7, #20]
    11b6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    11b8:	693b      	ldr	r3, [r7, #16]
    11ba:	8ada      	ldrh	r2, [r3, #22]
    11bc:	697b      	ldr	r3, [r7, #20]
    11be:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    11c0:	693b      	ldr	r3, [r7, #16]
    11c2:	7e1b      	ldrb	r3, [r3, #24]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d103      	bne.n	11d0 <_i2c_master_set_config+0x114>
    11c8:	4b90      	ldr	r3, [pc, #576]	; (140c <_i2c_master_set_config+0x350>)
    11ca:	4798      	blx	r3
    11cc:	1e03      	subs	r3, r0, #0
    11ce:	d002      	beq.n	11d6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    11d0:	2380      	movs	r3, #128	; 0x80
    11d2:	657b      	str	r3, [r7, #84]	; 0x54
    11d4:	e001      	b.n	11da <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    11d6:	2300      	movs	r3, #0
    11d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    11da:	693b      	ldr	r3, [r7, #16]
    11dc:	691b      	ldr	r3, [r3, #16]
    11de:	2b00      	cmp	r3, #0
    11e0:	d004      	beq.n	11ec <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    11e2:	693b      	ldr	r3, [r7, #16]
    11e4:	691b      	ldr	r3, [r3, #16]
    11e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    11e8:	4313      	orrs	r3, r2
    11ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    11ec:	693b      	ldr	r3, [r7, #16]
    11ee:	689b      	ldr	r3, [r3, #8]
    11f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    11f2:	4313      	orrs	r3, r2
    11f4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    11f6:	693b      	ldr	r3, [r7, #16]
    11f8:	2224      	movs	r2, #36	; 0x24
    11fa:	5c9b      	ldrb	r3, [r3, r2]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d004      	beq.n	120a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1202:	2280      	movs	r2, #128	; 0x80
    1204:	05d2      	lsls	r2, r2, #23
    1206:	4313      	orrs	r3, r2
    1208:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    120a:	693b      	ldr	r3, [r7, #16]
    120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    120e:	2b00      	cmp	r3, #0
    1210:	d004      	beq.n	121c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1212:	693b      	ldr	r3, [r7, #16]
    1214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1218:	4313      	orrs	r3, r2
    121a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    121c:	693b      	ldr	r3, [r7, #16]
    121e:	222c      	movs	r2, #44	; 0x2c
    1220:	5c9b      	ldrb	r3, [r3, r2]
    1222:	2b00      	cmp	r3, #0
    1224:	d105      	bne.n	1232 <_i2c_master_set_config+0x176>
    1226:	693b      	ldr	r3, [r7, #16]
    1228:	689a      	ldr	r2, [r3, #8]
    122a:	2380      	movs	r3, #128	; 0x80
    122c:	049b      	lsls	r3, r3, #18
    122e:	429a      	cmp	r2, r3
    1230:	d104      	bne.n	123c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1234:	2280      	movs	r2, #128	; 0x80
    1236:	0512      	lsls	r2, r2, #20
    1238:	4313      	orrs	r3, r2
    123a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    123c:	693b      	ldr	r3, [r7, #16]
    123e:	222d      	movs	r2, #45	; 0x2d
    1240:	5c9b      	ldrb	r3, [r3, r2]
    1242:	2b00      	cmp	r3, #0
    1244:	d004      	beq.n	1250 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	0412      	lsls	r2, r2, #16
    124c:	4313      	orrs	r3, r2
    124e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1250:	693b      	ldr	r3, [r7, #16]
    1252:	222e      	movs	r2, #46	; 0x2e
    1254:	5c9b      	ldrb	r3, [r3, r2]
    1256:	2b00      	cmp	r3, #0
    1258:	d004      	beq.n	1264 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    125a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    125c:	2280      	movs	r2, #128	; 0x80
    125e:	03d2      	lsls	r2, r2, #15
    1260:	4313      	orrs	r3, r2
    1262:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1266:	681a      	ldr	r2, [r3, #0]
    1268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    126a:	431a      	orrs	r2, r3
    126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    126e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1272:	2280      	movs	r2, #128	; 0x80
    1274:	0052      	lsls	r2, r2, #1
    1276:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1278:	2323      	movs	r3, #35	; 0x23
    127a:	2210      	movs	r2, #16
    127c:	4694      	mov	ip, r2
    127e:	44bc      	add	ip, r7
    1280:	4463      	add	r3, ip
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	3314      	adds	r3, #20
    1286:	b2db      	uxtb	r3, r3
    1288:	0018      	movs	r0, r3
    128a:	4b61      	ldr	r3, [pc, #388]	; (1410 <_i2c_master_set_config+0x354>)
    128c:	4798      	blx	r3
    128e:	0003      	movs	r3, r0
    1290:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    1292:	693b      	ldr	r3, [r7, #16]
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	22fa      	movs	r2, #250	; 0xfa
    1298:	0092      	lsls	r2, r2, #2
    129a:	4353      	muls	r3, r2
    129c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    129e:	693b      	ldr	r3, [r7, #16]
    12a0:	685b      	ldr	r3, [r3, #4]
    12a2:	22fa      	movs	r2, #250	; 0xfa
    12a4:	0092      	lsls	r2, r2, #2
    12a6:	4353      	muls	r3, r2
    12a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    12aa:	693b      	ldr	r3, [r7, #16]
    12ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    12ae:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    12b0:	4b58      	ldr	r3, [pc, #352]	; (1414 <_i2c_master_set_config+0x358>)
    12b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    12b4:	4798      	blx	r3
    12b6:	0005      	movs	r5, r0
    12b8:	000e      	movs	r6, r1
    12ba:	4b56      	ldr	r3, [pc, #344]	; (1414 <_i2c_master_set_config+0x358>)
    12bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    12be:	4798      	blx	r3
    12c0:	60b8      	str	r0, [r7, #8]
    12c2:	60f9      	str	r1, [r7, #12]
    12c4:	4b53      	ldr	r3, [pc, #332]	; (1414 <_i2c_master_set_config+0x358>)
    12c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    12c8:	4798      	blx	r3
    12ca:	4c53      	ldr	r4, [pc, #332]	; (1418 <_i2c_master_set_config+0x35c>)
    12cc:	4a53      	ldr	r2, [pc, #332]	; (141c <_i2c_master_set_config+0x360>)
    12ce:	4b54      	ldr	r3, [pc, #336]	; (1420 <_i2c_master_set_config+0x364>)
    12d0:	47a0      	blx	r4
    12d2:	0003      	movs	r3, r0
    12d4:	000c      	movs	r4, r1
    12d6:	603b      	str	r3, [r7, #0]
    12d8:	607c      	str	r4, [r7, #4]
    12da:	4b4e      	ldr	r3, [pc, #312]	; (1414 <_i2c_master_set_config+0x358>)
    12dc:	6a38      	ldr	r0, [r7, #32]
    12de:	4798      	blx	r3
    12e0:	0002      	movs	r2, r0
    12e2:	000b      	movs	r3, r1
    12e4:	4c4c      	ldr	r4, [pc, #304]	; (1418 <_i2c_master_set_config+0x35c>)
    12e6:	6838      	ldr	r0, [r7, #0]
    12e8:	6879      	ldr	r1, [r7, #4]
    12ea:	47a0      	blx	r4
    12ec:	0003      	movs	r3, r0
    12ee:	000c      	movs	r4, r1
    12f0:	0018      	movs	r0, r3
    12f2:	0021      	movs	r1, r4
    12f4:	4c4b      	ldr	r4, [pc, #300]	; (1424 <_i2c_master_set_config+0x368>)
    12f6:	2200      	movs	r2, #0
    12f8:	4b4b      	ldr	r3, [pc, #300]	; (1428 <_i2c_master_set_config+0x36c>)
    12fa:	47a0      	blx	r4
    12fc:	0003      	movs	r3, r0
    12fe:	000c      	movs	r4, r1
    1300:	001a      	movs	r2, r3
    1302:	0023      	movs	r3, r4
    1304:	4c44      	ldr	r4, [pc, #272]	; (1418 <_i2c_master_set_config+0x35c>)
    1306:	68b8      	ldr	r0, [r7, #8]
    1308:	68f9      	ldr	r1, [r7, #12]
    130a:	47a0      	blx	r4
    130c:	0003      	movs	r3, r0
    130e:	000c      	movs	r4, r1
    1310:	001a      	movs	r2, r3
    1312:	0023      	movs	r3, r4
    1314:	4c45      	ldr	r4, [pc, #276]	; (142c <_i2c_master_set_config+0x370>)
    1316:	0028      	movs	r0, r5
    1318:	0031      	movs	r1, r6
    131a:	47a0      	blx	r4
    131c:	0003      	movs	r3, r0
    131e:	000c      	movs	r4, r1
    1320:	001d      	movs	r5, r3
    1322:	0026      	movs	r6, r4
    1324:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1326:	005a      	lsls	r2, r3, #1
    1328:	4b3a      	ldr	r3, [pc, #232]	; (1414 <_i2c_master_set_config+0x358>)
    132a:	0010      	movs	r0, r2
    132c:	4798      	blx	r3
    132e:	0002      	movs	r2, r0
    1330:	000b      	movs	r3, r1
    1332:	4c3c      	ldr	r4, [pc, #240]	; (1424 <_i2c_master_set_config+0x368>)
    1334:	0028      	movs	r0, r5
    1336:	0031      	movs	r1, r6
    1338:	47a0      	blx	r4
    133a:	0003      	movs	r3, r0
    133c:	000c      	movs	r4, r1
    133e:	0018      	movs	r0, r3
    1340:	0021      	movs	r1, r4
    1342:	4c3a      	ldr	r4, [pc, #232]	; (142c <_i2c_master_set_config+0x370>)
    1344:	2200      	movs	r2, #0
    1346:	4b3a      	ldr	r3, [pc, #232]	; (1430 <_i2c_master_set_config+0x374>)
    1348:	47a0      	blx	r4
    134a:	0003      	movs	r3, r0
    134c:	000c      	movs	r4, r1
    134e:	001d      	movs	r5, r3
    1350:	0026      	movs	r6, r4
    1352:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1354:	005a      	lsls	r2, r3, #1
    1356:	4b2f      	ldr	r3, [pc, #188]	; (1414 <_i2c_master_set_config+0x358>)
    1358:	0010      	movs	r0, r2
    135a:	4798      	blx	r3
    135c:	0002      	movs	r2, r0
    135e:	000b      	movs	r3, r1
    1360:	4c34      	ldr	r4, [pc, #208]	; (1434 <_i2c_master_set_config+0x378>)
    1362:	0028      	movs	r0, r5
    1364:	0031      	movs	r1, r6
    1366:	47a0      	blx	r4
    1368:	0003      	movs	r3, r0
    136a:	000c      	movs	r4, r1
    136c:	0019      	movs	r1, r3
    136e:	0022      	movs	r2, r4
    1370:	4b31      	ldr	r3, [pc, #196]	; (1438 <_i2c_master_set_config+0x37c>)
    1372:	0008      	movs	r0, r1
    1374:	0011      	movs	r1, r2
    1376:	4798      	blx	r3
    1378:	0003      	movs	r3, r0
    137a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    137c:	693b      	ldr	r3, [r7, #16]
    137e:	689a      	ldr	r2, [r3, #8]
    1380:	2380      	movs	r3, #128	; 0x80
    1382:	049b      	lsls	r3, r3, #18
    1384:	429a      	cmp	r2, r3
    1386:	d16a      	bne.n	145e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1388:	4b22      	ldr	r3, [pc, #136]	; (1414 <_i2c_master_set_config+0x358>)
    138a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    138c:	4798      	blx	r3
    138e:	4c25      	ldr	r4, [pc, #148]	; (1424 <_i2c_master_set_config+0x368>)
    1390:	0002      	movs	r2, r0
    1392:	000b      	movs	r3, r1
    1394:	47a0      	blx	r4
    1396:	0003      	movs	r3, r0
    1398:	000c      	movs	r4, r1
    139a:	001d      	movs	r5, r3
    139c:	0026      	movs	r6, r4
    139e:	4b1d      	ldr	r3, [pc, #116]	; (1414 <_i2c_master_set_config+0x358>)
    13a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    13a2:	4798      	blx	r3
    13a4:	4c1c      	ldr	r4, [pc, #112]	; (1418 <_i2c_master_set_config+0x35c>)
    13a6:	2200      	movs	r2, #0
    13a8:	4b24      	ldr	r3, [pc, #144]	; (143c <_i2c_master_set_config+0x380>)
    13aa:	47a0      	blx	r4
    13ac:	0003      	movs	r3, r0
    13ae:	000c      	movs	r4, r1
    13b0:	001a      	movs	r2, r3
    13b2:	0023      	movs	r3, r4
    13b4:	4c1f      	ldr	r4, [pc, #124]	; (1434 <_i2c_master_set_config+0x378>)
    13b6:	0028      	movs	r0, r5
    13b8:	0031      	movs	r1, r6
    13ba:	47a0      	blx	r4
    13bc:	0003      	movs	r3, r0
    13be:	000c      	movs	r4, r1
    13c0:	0018      	movs	r0, r3
    13c2:	0021      	movs	r1, r4
    13c4:	4c19      	ldr	r4, [pc, #100]	; (142c <_i2c_master_set_config+0x370>)
    13c6:	2200      	movs	r2, #0
    13c8:	4b19      	ldr	r3, [pc, #100]	; (1430 <_i2c_master_set_config+0x374>)
    13ca:	47a0      	blx	r4
    13cc:	0003      	movs	r3, r0
    13ce:	000c      	movs	r4, r1
    13d0:	0019      	movs	r1, r3
    13d2:	0022      	movs	r2, r4
    13d4:	4b18      	ldr	r3, [pc, #96]	; (1438 <_i2c_master_set_config+0x37c>)
    13d6:	0008      	movs	r0, r1
    13d8:	0011      	movs	r1, r2
    13da:	4798      	blx	r3
    13dc:	0003      	movs	r3, r0
    13de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    13e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    13e2:	2b00      	cmp	r3, #0
    13e4:	d02e      	beq.n	1444 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    13e6:	4b16      	ldr	r3, [pc, #88]	; (1440 <_i2c_master_set_config+0x384>)
    13e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    13ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    13ec:	4798      	blx	r3
    13ee:	0003      	movs	r3, r0
    13f0:	1e9a      	subs	r2, r3, #2
    13f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    13f4:	1ad3      	subs	r3, r2, r3
    13f6:	653b      	str	r3, [r7, #80]	; 0x50
    13f8:	e031      	b.n	145e <_i2c_master_set_config+0x3a2>
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	000040f5 	.word	0x000040f5
    1400:	0000102d 	.word	0x0000102d
    1404:	00003f39 	.word	0x00003f39
    1408:	000067ad 	.word	0x000067ad
    140c:	00001055 	.word	0x00001055
    1410:	000065e5 	.word	0x000065e5
    1414:	00008f91 	.word	0x00008f91
    1418:	000083fd 	.word	0x000083fd
    141c:	e826d695 	.word	0xe826d695
    1420:	3e112e0b 	.word	0x3e112e0b
    1424:	00007775 	.word	0x00007775
    1428:	40240000 	.word	0x40240000
    142c:	000088fd 	.word	0x000088fd
    1430:	3ff00000 	.word	0x3ff00000
    1434:	00007d95 	.word	0x00007d95
    1438:	00008f29 	.word	0x00008f29
    143c:	40080000 	.word	0x40080000
    1440:	00007435 	.word	0x00007435
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1446:	005a      	lsls	r2, r3, #1
    1448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    144a:	18d3      	adds	r3, r2, r3
    144c:	1e5a      	subs	r2, r3, #1
    144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1450:	0059      	lsls	r1, r3, #1
    1452:	4b1d      	ldr	r3, [pc, #116]	; (14c8 <_i2c_master_set_config+0x40c>)
    1454:	0010      	movs	r0, r2
    1456:	4798      	blx	r3
    1458:	0003      	movs	r3, r0
    145a:	3b01      	subs	r3, #1
    145c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1460:	2bff      	cmp	r3, #255	; 0xff
    1462:	dc08      	bgt.n	1476 <_i2c_master_set_config+0x3ba>
    1464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1466:	2b00      	cmp	r3, #0
    1468:	db05      	blt.n	1476 <_i2c_master_set_config+0x3ba>
    146a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    146c:	2bff      	cmp	r3, #255	; 0xff
    146e:	dc02      	bgt.n	1476 <_i2c_master_set_config+0x3ba>
    1470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1472:	2b00      	cmp	r3, #0
    1474:	da06      	bge.n	1484 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1476:	233b      	movs	r3, #59	; 0x3b
    1478:	2210      	movs	r2, #16
    147a:	4694      	mov	ip, r2
    147c:	44bc      	add	ip, r7
    147e:	4463      	add	r3, ip
    1480:	2240      	movs	r2, #64	; 0x40
    1482:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1484:	233b      	movs	r3, #59	; 0x3b
    1486:	2210      	movs	r2, #16
    1488:	4694      	mov	ip, r2
    148a:	44bc      	add	ip, r7
    148c:	4463      	add	r3, ip
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	2b40      	cmp	r3, #64	; 0x40
    1492:	d00e      	beq.n	14b2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1496:	22ff      	movs	r2, #255	; 0xff
    1498:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    149a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    149c:	041b      	lsls	r3, r3, #16
    149e:	0019      	movs	r1, r3
    14a0:	23ff      	movs	r3, #255	; 0xff
    14a2:	041b      	lsls	r3, r3, #16
    14a4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14a6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    14a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    14aa:	0612      	lsls	r2, r2, #24
    14ac:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    14ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    14b0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    14b2:	233b      	movs	r3, #59	; 0x3b
    14b4:	2210      	movs	r2, #16
    14b6:	4694      	mov	ip, r2
    14b8:	44bc      	add	ip, r7
    14ba:	4463      	add	r3, ip
    14bc:	781b      	ldrb	r3, [r3, #0]
}
    14be:	0018      	movs	r0, r3
    14c0:	46bd      	mov	sp, r7
    14c2:	b017      	add	sp, #92	; 0x5c
    14c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	00007435 	.word	0x00007435

000014cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    14cc:	b590      	push	{r4, r7, lr}
    14ce:	b08b      	sub	sp, #44	; 0x2c
    14d0:	af00      	add	r7, sp, #0
    14d2:	60f8      	str	r0, [r7, #12]
    14d4:	60b9      	str	r1, [r7, #8]
    14d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	68ba      	ldr	r2, [r7, #8]
    14dc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14de:	68fb      	ldr	r3, [r7, #12]
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	0018      	movs	r0, r3
    14ea:	4b3b      	ldr	r3, [pc, #236]	; (15d8 <i2c_master_init+0x10c>)
    14ec:	4798      	blx	r3
    14ee:	0003      	movs	r3, r0
    14f0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14f2:	6a3b      	ldr	r3, [r7, #32]
    14f4:	3302      	adds	r3, #2
    14f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14f8:	6a3b      	ldr	r3, [r7, #32]
    14fa:	3314      	adds	r3, #20
    14fc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14fe:	2201      	movs	r2, #1
    1500:	69fb      	ldr	r3, [r7, #28]
    1502:	409a      	lsls	r2, r3
    1504:	0013      	movs	r3, r2
    1506:	0019      	movs	r1, r3
    1508:	2002      	movs	r0, #2
    150a:	4b34      	ldr	r3, [pc, #208]	; (15dc <i2c_master_init+0x110>)
    150c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    150e:	2314      	movs	r3, #20
    1510:	18fb      	adds	r3, r7, r3
    1512:	0018      	movs	r0, r3
    1514:	4b32      	ldr	r3, [pc, #200]	; (15e0 <i2c_master_init+0x114>)
    1516:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	7b1a      	ldrb	r2, [r3, #12]
    151c:	2314      	movs	r3, #20
    151e:	18fb      	adds	r3, r7, r3
    1520:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1522:	69bb      	ldr	r3, [r7, #24]
    1524:	b2db      	uxtb	r3, r3
    1526:	2214      	movs	r2, #20
    1528:	18ba      	adds	r2, r7, r2
    152a:	0011      	movs	r1, r2
    152c:	0018      	movs	r0, r3
    152e:	4b2d      	ldr	r3, [pc, #180]	; (15e4 <i2c_master_init+0x118>)
    1530:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1532:	69bb      	ldr	r3, [r7, #24]
    1534:	b2db      	uxtb	r3, r3
    1536:	0018      	movs	r0, r3
    1538:	4b2b      	ldr	r3, [pc, #172]	; (15e8 <i2c_master_init+0x11c>)
    153a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	7b1b      	ldrb	r3, [r3, #12]
    1540:	2100      	movs	r1, #0
    1542:	0018      	movs	r0, r3
    1544:	4b29      	ldr	r3, [pc, #164]	; (15ec <i2c_master_init+0x120>)
    1546:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	2202      	movs	r2, #2
    154e:	4013      	ands	r3, r2
    1550:	d001      	beq.n	1556 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1552:	231c      	movs	r3, #28
    1554:	e03b      	b.n	15ce <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	2201      	movs	r2, #1
    155c:	4013      	ands	r3, r2
    155e:	d001      	beq.n	1564 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1560:	2305      	movs	r3, #5
    1562:	e034      	b.n	15ce <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1564:	68fb      	ldr	r3, [r7, #12]
    1566:	681b      	ldr	r3, [r3, #0]
    1568:	2217      	movs	r2, #23
    156a:	18bc      	adds	r4, r7, r2
    156c:	0018      	movs	r0, r3
    156e:	4b1a      	ldr	r3, [pc, #104]	; (15d8 <i2c_master_init+0x10c>)
    1570:	4798      	blx	r3
    1572:	0003      	movs	r3, r0
    1574:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1576:	4a1e      	ldr	r2, [pc, #120]	; (15f0 <i2c_master_init+0x124>)
    1578:	2317      	movs	r3, #23
    157a:	18fb      	adds	r3, r7, r3
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	0011      	movs	r1, r2
    1580:	0018      	movs	r0, r3
    1582:	4b1c      	ldr	r3, [pc, #112]	; (15f4 <i2c_master_init+0x128>)
    1584:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1586:	2317      	movs	r3, #23
    1588:	18fb      	adds	r3, r7, r3
    158a:	781a      	ldrb	r2, [r3, #0]
    158c:	4b1a      	ldr	r3, [pc, #104]	; (15f8 <i2c_master_init+0x12c>)
    158e:	0092      	lsls	r2, r2, #2
    1590:	68f9      	ldr	r1, [r7, #12]
    1592:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	2200      	movs	r2, #0
    1598:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	2200      	movs	r2, #0
    159e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	2200      	movs	r2, #0
    15a4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    15a6:	68fb      	ldr	r3, [r7, #12]
    15a8:	2200      	movs	r2, #0
    15aa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    15ac:	68fb      	ldr	r3, [r7, #12]
    15ae:	2225      	movs	r2, #37	; 0x25
    15b0:	2100      	movs	r1, #0
    15b2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	2200      	movs	r2, #0
    15b8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    15ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15bc:	2214      	movs	r2, #20
    15be:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    15c0:	687a      	ldr	r2, [r7, #4]
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	0011      	movs	r1, r2
    15c6:	0018      	movs	r0, r3
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <i2c_master_init+0x130>)
    15ca:	4798      	blx	r3
    15cc:	0003      	movs	r3, r0
}
    15ce:	0018      	movs	r0, r3
    15d0:	46bd      	mov	sp, r7
    15d2:	b00b      	add	sp, #44	; 0x2c
    15d4:	bd90      	pop	{r4, r7, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	000040f5 	.word	0x000040f5
    15dc:	00000fd1 	.word	0x00000fd1
    15e0:	00000fb9 	.word	0x00000fb9
    15e4:	000064c1 	.word	0x000064c1
    15e8:	00006505 	.word	0x00006505
    15ec:	00003ead 	.word	0x00003ead
    15f0:	00001e1d 	.word	0x00001e1d
    15f4:	00004159 	.word	0x00004159
    15f8:	200003c0 	.word	0x200003c0
    15fc:	000010bd 	.word	0x000010bd

00001600 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    1600:	b580      	push	{r7, lr}
    1602:	b084      	sub	sp, #16
    1604:	af00      	add	r7, sp, #0
    1606:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	7e1b      	ldrb	r3, [r3, #24]
    1612:	b2db      	uxtb	r3, r3
    1614:	001a      	movs	r2, r3
    1616:	2302      	movs	r3, #2
    1618:	4013      	ands	r3, r2
    161a:	d00b      	beq.n	1634 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    161c:	68fb      	ldr	r3, [r7, #12]
    161e:	2202      	movs	r2, #2
    1620:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1622:	68fb      	ldr	r3, [r7, #12]
    1624:	8b5b      	ldrh	r3, [r3, #26]
    1626:	b29b      	uxth	r3, r3
    1628:	001a      	movs	r2, r3
    162a:	2302      	movs	r3, #2
    162c:	4013      	ands	r3, r2
    162e:	d011      	beq.n	1654 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1630:	2341      	movs	r3, #65	; 0x41
    1632:	e010      	b.n	1656 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	8b5b      	ldrh	r3, [r3, #26]
    1638:	b29b      	uxth	r3, r3
    163a:	001a      	movs	r2, r3
    163c:	2304      	movs	r3, #4
    163e:	4013      	ands	r3, r2
    1640:	d008      	beq.n	1654 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1642:	68fb      	ldr	r3, [r7, #12]
    1644:	685b      	ldr	r3, [r3, #4]
    1646:	22c0      	movs	r2, #192	; 0xc0
    1648:	0292      	lsls	r2, r2, #10
    164a:	431a      	orrs	r2, r3
    164c:	68fb      	ldr	r3, [r7, #12]
    164e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1650:	2318      	movs	r3, #24
    1652:	e000      	b.n	1656 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    1654:	2300      	movs	r3, #0
}
    1656:	0018      	movs	r0, r3
    1658:	46bd      	mov	sp, r7
    165a:	b004      	add	sp, #16
    165c:	bd80      	pop	{r7, pc}

0000165e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    165e:	b580      	push	{r7, lr}
    1660:	b084      	sub	sp, #16
    1662:	af00      	add	r7, sp, #0
    1664:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    166c:	230e      	movs	r3, #14
    166e:	18fb      	adds	r3, r7, r3
    1670:	2200      	movs	r2, #0
    1672:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1674:	e00f      	b.n	1696 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1676:	230e      	movs	r3, #14
    1678:	18fb      	adds	r3, r7, r3
    167a:	220e      	movs	r2, #14
    167c:	18ba      	adds	r2, r7, r2
    167e:	8812      	ldrh	r2, [r2, #0]
    1680:	3201      	adds	r2, #1
    1682:	801a      	strh	r2, [r3, #0]
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	891b      	ldrh	r3, [r3, #8]
    1688:	220e      	movs	r2, #14
    168a:	18ba      	adds	r2, r7, r2
    168c:	8812      	ldrh	r2, [r2, #0]
    168e:	429a      	cmp	r2, r3
    1690:	d301      	bcc.n	1696 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    1692:	2312      	movs	r3, #18
    1694:	e00e      	b.n	16b4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1696:	68bb      	ldr	r3, [r7, #8]
    1698:	7e1b      	ldrb	r3, [r3, #24]
    169a:	b2db      	uxtb	r3, r3
    169c:	001a      	movs	r2, r3
    169e:	2301      	movs	r3, #1
    16a0:	4013      	ands	r3, r2
    16a2:	d106      	bne.n	16b2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    16a4:	68bb      	ldr	r3, [r7, #8]
    16a6:	7e1b      	ldrb	r3, [r3, #24]
    16a8:	b2db      	uxtb	r3, r3
    16aa:	001a      	movs	r2, r3
    16ac:	2302      	movs	r3, #2
    16ae:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16b0:	d0e1      	beq.n	1676 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    16b2:	2300      	movs	r3, #0
}
    16b4:	0018      	movs	r0, r3
    16b6:	46bd      	mov	sp, r7
    16b8:	b004      	add	sp, #16
    16ba:	bd80      	pop	{r7, pc}

000016bc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    16bc:	b590      	push	{r4, r7, lr}
    16be:	b085      	sub	sp, #20
    16c0:	af00      	add	r7, sp, #0
    16c2:	6078      	str	r0, [r7, #4]
    16c4:	000a      	movs	r2, r1
    16c6:	1cfb      	adds	r3, r7, #3
    16c8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16d0:	68fb      	ldr	r3, [r7, #12]
    16d2:	685b      	ldr	r3, [r3, #4]
    16d4:	2280      	movs	r2, #128	; 0x80
    16d6:	02d2      	lsls	r2, r2, #11
    16d8:	431a      	orrs	r2, r3
    16da:	68fb      	ldr	r3, [r7, #12]
    16dc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    16de:	1cfb      	adds	r3, r7, #3
    16e0:	781a      	ldrb	r2, [r3, #0]
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    16e6:	230b      	movs	r3, #11
    16e8:	18fc      	adds	r4, r7, r3
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	0018      	movs	r0, r3
    16ee:	4b07      	ldr	r3, [pc, #28]	; (170c <_i2c_master_send_hs_master_code+0x50>)
    16f0:	4798      	blx	r3
    16f2:	0003      	movs	r3, r0
    16f4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	2201      	movs	r2, #1
    16fa:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    16fc:	230b      	movs	r3, #11
    16fe:	18fb      	adds	r3, r7, r3
    1700:	781b      	ldrb	r3, [r3, #0]
}
    1702:	0018      	movs	r0, r3
    1704:	46bd      	mov	sp, r7
    1706:	b005      	add	sp, #20
    1708:	bd90      	pop	{r4, r7, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	0000165f 	.word	0x0000165f

00001710 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1710:	b590      	push	{r4, r7, lr}
    1712:	b087      	sub	sp, #28
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
    1718:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1720:	2314      	movs	r3, #20
    1722:	18fb      	adds	r3, r7, r3
    1724:	683a      	ldr	r2, [r7, #0]
    1726:	8852      	ldrh	r2, [r2, #2]
    1728:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    172a:	2312      	movs	r3, #18
    172c:	18fb      	adds	r3, r7, r3
    172e:	2200      	movs	r2, #0
    1730:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	011b      	lsls	r3, r3, #4
    1738:	0fdb      	lsrs	r3, r3, #31
    173a:	b2db      	uxtb	r3, r3
    173c:	001a      	movs	r2, r3
    173e:	230b      	movs	r3, #11
    1740:	18fb      	adds	r3, r7, r3
    1742:	1e51      	subs	r1, r2, #1
    1744:	418a      	sbcs	r2, r1
    1746:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1748:	683b      	ldr	r3, [r7, #0]
    174a:	7a5b      	ldrb	r3, [r3, #9]
    174c:	2b00      	cmp	r3, #0
    174e:	d006      	beq.n	175e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1750:	683b      	ldr	r3, [r7, #0]
    1752:	7a9a      	ldrb	r2, [r3, #10]
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	0011      	movs	r1, r2
    1758:	0018      	movs	r0, r3
    175a:	4b85      	ldr	r3, [pc, #532]	; (1970 <_i2c_master_read_packet+0x260>)
    175c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    175e:	68fb      	ldr	r3, [r7, #12]
    1760:	685b      	ldr	r3, [r3, #4]
    1762:	4a84      	ldr	r2, [pc, #528]	; (1974 <_i2c_master_read_packet+0x264>)
    1764:	401a      	ands	r2, r3
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    176a:	683b      	ldr	r3, [r7, #0]
    176c:	7a1b      	ldrb	r3, [r3, #8]
    176e:	2b00      	cmp	r3, #0
    1770:	d042      	beq.n	17f8 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1772:	683b      	ldr	r3, [r7, #0]
    1774:	881b      	ldrh	r3, [r3, #0]
    1776:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1778:	683b      	ldr	r3, [r7, #0]
    177a:	7a5b      	ldrb	r3, [r3, #9]
    177c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    177e:	4313      	orrs	r3, r2
    1780:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1782:	2380      	movs	r3, #128	; 0x80
    1784:	021b      	lsls	r3, r3, #8
    1786:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1788:	68fb      	ldr	r3, [r7, #12]
    178a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    178c:	2317      	movs	r3, #23
    178e:	18fc      	adds	r4, r7, r3
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	0018      	movs	r0, r3
    1794:	4b78      	ldr	r3, [pc, #480]	; (1978 <_i2c_master_read_packet+0x268>)
    1796:	4798      	blx	r3
    1798:	0003      	movs	r3, r0
    179a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	685b      	ldr	r3, [r3, #4]
    17a0:	4a74      	ldr	r2, [pc, #464]	; (1974 <_i2c_master_read_packet+0x264>)
    17a2:	401a      	ands	r2, r3
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    17a8:	2317      	movs	r3, #23
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d107      	bne.n	17c2 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    17b2:	2317      	movs	r3, #23
    17b4:	18fc      	adds	r4, r7, r3
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	0018      	movs	r0, r3
    17ba:	4b70      	ldr	r3, [pc, #448]	; (197c <_i2c_master_read_packet+0x26c>)
    17bc:	4798      	blx	r3
    17be:	0003      	movs	r3, r0
    17c0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    17c2:	2317      	movs	r3, #23
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d111      	bne.n	17f0 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17cc:	683b      	ldr	r3, [r7, #0]
    17ce:	881b      	ldrh	r3, [r3, #0]
    17d0:	0a1b      	lsrs	r3, r3, #8
    17d2:	b29b      	uxth	r3, r3
    17d4:	2278      	movs	r2, #120	; 0x78
    17d6:	4313      	orrs	r3, r2
    17d8:	b29b      	uxth	r3, r3
    17da:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17dc:	683b      	ldr	r3, [r7, #0]
    17de:	7a5b      	ldrb	r3, [r3, #9]
    17e0:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17e2:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17e4:	2201      	movs	r2, #1
    17e6:	4313      	orrs	r3, r2
    17e8:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	625a      	str	r2, [r3, #36]	; 0x24
    17ee:	e00f      	b.n	1810 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    17f0:	2317      	movs	r3, #23
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	781b      	ldrb	r3, [r3, #0]
    17f6:	e0b6      	b.n	1966 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    17f8:	683b      	ldr	r3, [r7, #0]
    17fa:	881b      	ldrh	r3, [r3, #0]
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	2201      	movs	r2, #1
    1800:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1802:	683b      	ldr	r3, [r7, #0]
    1804:	7a5b      	ldrb	r3, [r3, #9]
    1806:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1808:	4313      	orrs	r3, r2
    180a:	001a      	movs	r2, r3
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1810:	2317      	movs	r3, #23
    1812:	18fc      	adds	r4, r7, r3
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	0018      	movs	r0, r3
    1818:	4b57      	ldr	r3, [pc, #348]	; (1978 <_i2c_master_read_packet+0x268>)
    181a:	4798      	blx	r3
    181c:	0003      	movs	r3, r0
    181e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1820:	230b      	movs	r3, #11
    1822:	18fb      	adds	r3, r7, r3
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	2b00      	cmp	r3, #0
    1828:	d00b      	beq.n	1842 <_i2c_master_read_packet+0x132>
    182a:	683b      	ldr	r3, [r7, #0]
    182c:	885b      	ldrh	r3, [r3, #2]
    182e:	2b01      	cmp	r3, #1
    1830:	d107      	bne.n	1842 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	685b      	ldr	r3, [r3, #4]
    1836:	2280      	movs	r2, #128	; 0x80
    1838:	02d2      	lsls	r2, r2, #11
    183a:	431a      	orrs	r2, r3
    183c:	68fb      	ldr	r3, [r7, #12]
    183e:	605a      	str	r2, [r3, #4]
    1840:	e005      	b.n	184e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    1842:	68fb      	ldr	r3, [r7, #12]
    1844:	685b      	ldr	r3, [r3, #4]
    1846:	4a4b      	ldr	r2, [pc, #300]	; (1974 <_i2c_master_read_packet+0x264>)
    1848:	401a      	ands	r2, r3
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    184e:	2317      	movs	r3, #23
    1850:	18fb      	adds	r3, r7, r3
    1852:	781b      	ldrb	r3, [r3, #0]
    1854:	2b00      	cmp	r3, #0
    1856:	d107      	bne.n	1868 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    1858:	2317      	movs	r3, #23
    185a:	18fc      	adds	r4, r7, r3
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	0018      	movs	r0, r3
    1860:	4b46      	ldr	r3, [pc, #280]	; (197c <_i2c_master_read_packet+0x26c>)
    1862:	4798      	blx	r3
    1864:	0003      	movs	r3, r0
    1866:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1868:	2317      	movs	r3, #23
    186a:	18fb      	adds	r3, r7, r3
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	2b00      	cmp	r3, #0
    1870:	d000      	beq.n	1874 <_i2c_master_read_packet+0x164>
    1872:	e075      	b.n	1960 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    1874:	e04b      	b.n	190e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	8b5b      	ldrh	r3, [r3, #26]
    187a:	b29b      	uxth	r3, r3
    187c:	001a      	movs	r2, r3
    187e:	2320      	movs	r3, #32
    1880:	4013      	ands	r3, r2
    1882:	d101      	bne.n	1888 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    1884:	2341      	movs	r3, #65	; 0x41
    1886:	e06e      	b.n	1966 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	7adb      	ldrb	r3, [r3, #11]
    188c:	2b00      	cmp	r3, #0
    188e:	d01e      	beq.n	18ce <_i2c_master_read_packet+0x1be>
    1890:	230b      	movs	r3, #11
    1892:	18fb      	adds	r3, r7, r3
    1894:	781b      	ldrb	r3, [r3, #0]
    1896:	2201      	movs	r2, #1
    1898:	4053      	eors	r3, r2
    189a:	b2db      	uxtb	r3, r3
    189c:	2b00      	cmp	r3, #0
    189e:	d004      	beq.n	18aa <_i2c_master_read_packet+0x19a>
    18a0:	2314      	movs	r3, #20
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	881b      	ldrh	r3, [r3, #0]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d009      	beq.n	18be <_i2c_master_read_packet+0x1ae>
    18aa:	230b      	movs	r3, #11
    18ac:	18fb      	adds	r3, r7, r3
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d00c      	beq.n	18ce <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    18b4:	2314      	movs	r3, #20
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	881b      	ldrh	r3, [r3, #0]
    18ba:	2b01      	cmp	r3, #1
    18bc:	d107      	bne.n	18ce <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18be:	68fb      	ldr	r3, [r7, #12]
    18c0:	685b      	ldr	r3, [r3, #4]
    18c2:	2280      	movs	r2, #128	; 0x80
    18c4:	02d2      	lsls	r2, r2, #11
    18c6:	431a      	orrs	r2, r3
    18c8:	68fb      	ldr	r3, [r7, #12]
    18ca:	605a      	str	r2, [r3, #4]
    18cc:	e01a      	b.n	1904 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	0018      	movs	r0, r3
    18d2:	4b2b      	ldr	r3, [pc, #172]	; (1980 <_i2c_master_read_packet+0x270>)
    18d4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    18d6:	683b      	ldr	r3, [r7, #0]
    18d8:	685a      	ldr	r2, [r3, #4]
    18da:	2312      	movs	r3, #18
    18dc:	18fb      	adds	r3, r7, r3
    18de:	881b      	ldrh	r3, [r3, #0]
    18e0:	2112      	movs	r1, #18
    18e2:	1879      	adds	r1, r7, r1
    18e4:	1c58      	adds	r0, r3, #1
    18e6:	8008      	strh	r0, [r1, #0]
    18e8:	18d3      	adds	r3, r2, r3
    18ea:	68fa      	ldr	r2, [r7, #12]
    18ec:	2128      	movs	r1, #40	; 0x28
    18ee:	5c52      	ldrb	r2, [r2, r1]
    18f0:	b2d2      	uxtb	r2, r2
    18f2:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    18f4:	2317      	movs	r3, #23
    18f6:	18fc      	adds	r4, r7, r3
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	0018      	movs	r0, r3
    18fc:	4b1e      	ldr	r3, [pc, #120]	; (1978 <_i2c_master_read_packet+0x268>)
    18fe:	4798      	blx	r3
    1900:	0003      	movs	r3, r0
    1902:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1904:	2317      	movs	r3, #23
    1906:	18fb      	adds	r3, r7, r3
    1908:	781b      	ldrb	r3, [r3, #0]
    190a:	2b00      	cmp	r3, #0
    190c:	d109      	bne.n	1922 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    190e:	2314      	movs	r3, #20
    1910:	18fb      	adds	r3, r7, r3
    1912:	881b      	ldrh	r3, [r3, #0]
    1914:	2214      	movs	r2, #20
    1916:	18ba      	adds	r2, r7, r2
    1918:	1e59      	subs	r1, r3, #1
    191a:	8011      	strh	r1, [r2, #0]
    191c:	2b00      	cmp	r3, #0
    191e:	d1aa      	bne.n	1876 <_i2c_master_read_packet+0x166>
    1920:	e000      	b.n	1924 <_i2c_master_read_packet+0x214>
				break;
    1922:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	7a9b      	ldrb	r3, [r3, #10]
    1928:	2b00      	cmp	r3, #0
    192a:	d00a      	beq.n	1942 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	0018      	movs	r0, r3
    1930:	4b13      	ldr	r3, [pc, #76]	; (1980 <_i2c_master_read_packet+0x270>)
    1932:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1934:	68fb      	ldr	r3, [r7, #12]
    1936:	685b      	ldr	r3, [r3, #4]
    1938:	22c0      	movs	r2, #192	; 0xc0
    193a:	0292      	lsls	r2, r2, #10
    193c:	431a      	orrs	r2, r3
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	0018      	movs	r0, r3
    1946:	4b0e      	ldr	r3, [pc, #56]	; (1980 <_i2c_master_read_packet+0x270>)
    1948:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    194a:	683b      	ldr	r3, [r7, #0]
    194c:	685a      	ldr	r2, [r3, #4]
    194e:	2312      	movs	r3, #18
    1950:	18fb      	adds	r3, r7, r3
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	18d3      	adds	r3, r2, r3
    1956:	68fa      	ldr	r2, [r7, #12]
    1958:	2128      	movs	r1, #40	; 0x28
    195a:	5c52      	ldrb	r2, [r2, r1]
    195c:	b2d2      	uxtb	r2, r2
    195e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    1960:	2317      	movs	r3, #23
    1962:	18fb      	adds	r3, r7, r3
    1964:	781b      	ldrb	r3, [r3, #0]
}
    1966:	0018      	movs	r0, r3
    1968:	46bd      	mov	sp, r7
    196a:	b007      	add	sp, #28
    196c:	bd90      	pop	{r4, r7, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	000016bd 	.word	0x000016bd
    1974:	fffbffff 	.word	0xfffbffff
    1978:	0000165f 	.word	0x0000165f
    197c:	00001601 	.word	0x00001601
    1980:	00001099 	.word	0x00001099

00001984 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1984:	b580      	push	{r7, lr}
    1986:	b082      	sub	sp, #8
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
    198c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    198e:	687b      	ldr	r3, [r7, #4]
    1990:	8b9b      	ldrh	r3, [r3, #28]
    1992:	b29b      	uxth	r3, r3
    1994:	2b00      	cmp	r3, #0
    1996:	d001      	beq.n	199c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1998:	2305      	movs	r3, #5
    199a:	e00c      	b.n	19b6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	2201      	movs	r2, #1
    19a0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	2201      	movs	r2, #1
    19a6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    19a8:	683a      	ldr	r2, [r7, #0]
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	0011      	movs	r1, r2
    19ae:	0018      	movs	r0, r3
    19b0:	4b03      	ldr	r3, [pc, #12]	; (19c0 <i2c_master_read_packet_wait+0x3c>)
    19b2:	4798      	blx	r3
    19b4:	0003      	movs	r3, r0
}
    19b6:	0018      	movs	r0, r3
    19b8:	46bd      	mov	sp, r7
    19ba:	b002      	add	sp, #8
    19bc:	bd80      	pop	{r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	00001711 	.word	0x00001711

000019c4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19c4:	b590      	push	{r4, r7, lr}
    19c6:	b087      	sub	sp, #28
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
    19cc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	681b      	ldr	r3, [r3, #0]
    19d2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    19d4:	2314      	movs	r3, #20
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	683a      	ldr	r2, [r7, #0]
    19da:	8852      	ldrh	r2, [r2, #2]
    19dc:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	0018      	movs	r0, r3
    19e2:	4b51      	ldr	r3, [pc, #324]	; (1b28 <_i2c_master_write_packet+0x164>)
    19e4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    19e6:	683b      	ldr	r3, [r7, #0]
    19e8:	7a5b      	ldrb	r3, [r3, #9]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d006      	beq.n	19fc <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    19ee:	683b      	ldr	r3, [r7, #0]
    19f0:	7a9a      	ldrb	r2, [r3, #10]
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	0011      	movs	r1, r2
    19f6:	0018      	movs	r0, r3
    19f8:	4b4c      	ldr	r3, [pc, #304]	; (1b2c <_i2c_master_write_packet+0x168>)
    19fa:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    19fc:	68fb      	ldr	r3, [r7, #12]
    19fe:	685b      	ldr	r3, [r3, #4]
    1a00:	4a4b      	ldr	r2, [pc, #300]	; (1b30 <_i2c_master_write_packet+0x16c>)
    1a02:	401a      	ands	r2, r3
    1a04:	68fb      	ldr	r3, [r7, #12]
    1a06:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	7a1b      	ldrb	r3, [r3, #8]
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d00d      	beq.n	1a2c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a10:	683b      	ldr	r3, [r7, #0]
    1a12:	881b      	ldrh	r3, [r3, #0]
    1a14:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a16:	683b      	ldr	r3, [r7, #0]
    1a18:	7a5b      	ldrb	r3, [r3, #9]
    1a1a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a1c:	4313      	orrs	r3, r2
    1a1e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1a20:	2380      	movs	r3, #128	; 0x80
    1a22:	021b      	lsls	r3, r3, #8
    1a24:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a26:	68fb      	ldr	r3, [r7, #12]
    1a28:	625a      	str	r2, [r3, #36]	; 0x24
    1a2a:	e009      	b.n	1a40 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a2c:	683b      	ldr	r3, [r7, #0]
    1a2e:	881b      	ldrh	r3, [r3, #0]
    1a30:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1a32:	683b      	ldr	r3, [r7, #0]
    1a34:	7a5b      	ldrb	r3, [r3, #9]
    1a36:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1a38:	4313      	orrs	r3, r2
    1a3a:	001a      	movs	r2, r3
    1a3c:	68fb      	ldr	r3, [r7, #12]
    1a3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1a40:	2317      	movs	r3, #23
    1a42:	18fc      	adds	r4, r7, r3
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	0018      	movs	r0, r3
    1a48:	4b3a      	ldr	r3, [pc, #232]	; (1b34 <_i2c_master_write_packet+0x170>)
    1a4a:	4798      	blx	r3
    1a4c:	0003      	movs	r3, r0
    1a4e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1a50:	2317      	movs	r3, #23
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d107      	bne.n	1a6a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    1a5a:	2317      	movs	r3, #23
    1a5c:	18fc      	adds	r4, r7, r3
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	0018      	movs	r0, r3
    1a62:	4b35      	ldr	r3, [pc, #212]	; (1b38 <_i2c_master_write_packet+0x174>)
    1a64:	4798      	blx	r3
    1a66:	0003      	movs	r3, r0
    1a68:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1a6a:	2317      	movs	r3, #23
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	2b00      	cmp	r3, #0
    1a72:	d152      	bne.n	1b1a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    1a74:	2312      	movs	r3, #18
    1a76:	18fb      	adds	r3, r7, r3
    1a78:	2200      	movs	r2, #0
    1a7a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    1a7c:	e033      	b.n	1ae6 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a7e:	68fb      	ldr	r3, [r7, #12]
    1a80:	8b5b      	ldrh	r3, [r3, #26]
    1a82:	b29b      	uxth	r3, r3
    1a84:	001a      	movs	r2, r3
    1a86:	2320      	movs	r3, #32
    1a88:	4013      	ands	r3, r2
    1a8a:	d101      	bne.n	1a90 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    1a8c:	2341      	movs	r3, #65	; 0x41
    1a8e:	e047      	b.n	1b20 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	0018      	movs	r0, r3
    1a94:	4b24      	ldr	r3, [pc, #144]	; (1b28 <_i2c_master_write_packet+0x164>)
    1a96:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1a98:	683b      	ldr	r3, [r7, #0]
    1a9a:	685a      	ldr	r2, [r3, #4]
    1a9c:	2312      	movs	r3, #18
    1a9e:	18fb      	adds	r3, r7, r3
    1aa0:	881b      	ldrh	r3, [r3, #0]
    1aa2:	2112      	movs	r1, #18
    1aa4:	1879      	adds	r1, r7, r1
    1aa6:	1c58      	adds	r0, r3, #1
    1aa8:	8008      	strh	r0, [r1, #0]
    1aaa:	18d3      	adds	r3, r2, r3
    1aac:	7819      	ldrb	r1, [r3, #0]
    1aae:	68fb      	ldr	r3, [r7, #12]
    1ab0:	2228      	movs	r2, #40	; 0x28
    1ab2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1ab4:	2317      	movs	r3, #23
    1ab6:	18fc      	adds	r4, r7, r3
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	0018      	movs	r0, r3
    1abc:	4b1d      	ldr	r3, [pc, #116]	; (1b34 <_i2c_master_write_packet+0x170>)
    1abe:	4798      	blx	r3
    1ac0:	0003      	movs	r3, r0
    1ac2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1ac4:	2317      	movs	r3, #23
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	781b      	ldrb	r3, [r3, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d115      	bne.n	1afa <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ace:	68fb      	ldr	r3, [r7, #12]
    1ad0:	8b5b      	ldrh	r3, [r3, #26]
    1ad2:	b29b      	uxth	r3, r3
    1ad4:	001a      	movs	r2, r3
    1ad6:	2304      	movs	r3, #4
    1ad8:	4013      	ands	r3, r2
    1ada:	d004      	beq.n	1ae6 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1adc:	2317      	movs	r3, #23
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	221e      	movs	r2, #30
    1ae2:	701a      	strb	r2, [r3, #0]
				break;
    1ae4:	e00a      	b.n	1afc <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    1ae6:	2314      	movs	r3, #20
    1ae8:	18fb      	adds	r3, r7, r3
    1aea:	881b      	ldrh	r3, [r3, #0]
    1aec:	2214      	movs	r2, #20
    1aee:	18ba      	adds	r2, r7, r2
    1af0:	1e59      	subs	r1, r3, #1
    1af2:	8011      	strh	r1, [r2, #0]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d1c2      	bne.n	1a7e <_i2c_master_write_packet+0xba>
    1af8:	e000      	b.n	1afc <_i2c_master_write_packet+0x138>
				break;
    1afa:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	7a9b      	ldrb	r3, [r3, #10]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d00a      	beq.n	1b1a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	0018      	movs	r0, r3
    1b08:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_i2c_master_write_packet+0x164>)
    1b0a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b0c:	68fb      	ldr	r3, [r7, #12]
    1b0e:	685b      	ldr	r3, [r3, #4]
    1b10:	22c0      	movs	r2, #192	; 0xc0
    1b12:	0292      	lsls	r2, r2, #10
    1b14:	431a      	orrs	r2, r3
    1b16:	68fb      	ldr	r3, [r7, #12]
    1b18:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1b1a:	2317      	movs	r3, #23
    1b1c:	18fb      	adds	r3, r7, r3
    1b1e:	781b      	ldrb	r3, [r3, #0]
}
    1b20:	0018      	movs	r0, r3
    1b22:	46bd      	mov	sp, r7
    1b24:	b007      	add	sp, #28
    1b26:	bd90      	pop	{r4, r7, pc}
    1b28:	00001099 	.word	0x00001099
    1b2c:	000016bd 	.word	0x000016bd
    1b30:	fffbffff 	.word	0xfffbffff
    1b34:	0000165f 	.word	0x0000165f
    1b38:	00001601 	.word	0x00001601

00001b3c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b082      	sub	sp, #8
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	8b9b      	ldrh	r3, [r3, #28]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d001      	beq.n	1b54 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    1b50:	2305      	movs	r3, #5
    1b52:	e00c      	b.n	1b6e <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	2200      	movs	r2, #0
    1b58:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	2201      	movs	r2, #1
    1b5e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    1b60:	683a      	ldr	r2, [r7, #0]
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	0011      	movs	r1, r2
    1b66:	0018      	movs	r0, r3
    1b68:	4b03      	ldr	r3, [pc, #12]	; (1b78 <i2c_master_write_packet_wait_no_stop+0x3c>)
    1b6a:	4798      	blx	r3
    1b6c:	0003      	movs	r3, r0
}
    1b6e:	0018      	movs	r0, r3
    1b70:	46bd      	mov	sp, r7
    1b72:	b002      	add	sp, #8
    1b74:	bd80      	pop	{r7, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	000019c5 	.word	0x000019c5

00001b7c <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b084      	sub	sp, #16
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	0018      	movs	r0, r3
    1b8e:	4b06      	ldr	r3, [pc, #24]	; (1ba8 <i2c_master_send_stop+0x2c>)
    1b90:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b92:	68fb      	ldr	r3, [r7, #12]
    1b94:	685b      	ldr	r3, [r3, #4]
    1b96:	22c0      	movs	r2, #192	; 0xc0
    1b98:	0292      	lsls	r2, r2, #10
    1b9a:	431a      	orrs	r2, r3
    1b9c:	68fb      	ldr	r3, [r7, #12]
    1b9e:	605a      	str	r2, [r3, #4]
}
    1ba0:	46c0      	nop			; (mov r8, r8)
    1ba2:	46bd      	mov	sp, r7
    1ba4:	b004      	add	sp, #16
    1ba6:	bd80      	pop	{r7, pc}
    1ba8:	00001099 	.word	0x00001099

00001bac <i2c_master_is_syncing>:
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b084      	sub	sp, #16
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	69db      	ldr	r3, [r3, #28]
    1bbe:	2207      	movs	r2, #7
    1bc0:	4013      	ands	r3, r2
    1bc2:	1e5a      	subs	r2, r3, #1
    1bc4:	4193      	sbcs	r3, r2
    1bc6:	b2db      	uxtb	r3, r3
}
    1bc8:	0018      	movs	r0, r3
    1bca:	46bd      	mov	sp, r7
    1bcc:	b004      	add	sp, #16
    1bce:	bd80      	pop	{r7, pc}

00001bd0 <_i2c_master_wait_for_sync>:
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b082      	sub	sp, #8
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1bd8:	46c0      	nop			; (mov r8, r8)
    1bda:	687b      	ldr	r3, [r7, #4]
    1bdc:	0018      	movs	r0, r3
    1bde:	4b04      	ldr	r3, [pc, #16]	; (1bf0 <_i2c_master_wait_for_sync+0x20>)
    1be0:	4798      	blx	r3
    1be2:	1e03      	subs	r3, r0, #0
    1be4:	d1f9      	bne.n	1bda <_i2c_master_wait_for_sync+0xa>
}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	46bd      	mov	sp, r7
    1bea:	b002      	add	sp, #8
    1bec:	bd80      	pop	{r7, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00001bad 	.word	0x00001bad

00001bf4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b084      	sub	sp, #16
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	681b      	ldr	r3, [r3, #0]
    1c00:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1c02:	68fb      	ldr	r3, [r7, #12]
    1c04:	681b      	ldr	r3, [r3, #0]
    1c06:	011b      	lsls	r3, r3, #4
    1c08:	0fdb      	lsrs	r3, r3, #31
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	001a      	movs	r2, r3
    1c0e:	230b      	movs	r3, #11
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	1e51      	subs	r1, r2, #1
    1c14:	418a      	sbcs	r2, r1
    1c16:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1c18:	2308      	movs	r3, #8
    1c1a:	18fb      	adds	r3, r7, r3
    1c1c:	687a      	ldr	r2, [r7, #4]
    1c1e:	8b52      	ldrh	r2, [r2, #26]
    1c20:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1c22:	687b      	ldr	r3, [r7, #4]
    1c24:	8b9b      	ldrh	r3, [r3, #28]
    1c26:	b29a      	uxth	r2, r3
    1c28:	2308      	movs	r3, #8
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	2108      	movs	r1, #8
    1c2e:	1879      	adds	r1, r7, r1
    1c30:	8809      	ldrh	r1, [r1, #0]
    1c32:	1a8a      	subs	r2, r1, r2
    1c34:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b9b      	ldrh	r3, [r3, #28]
    1c3a:	b29b      	uxth	r3, r3
    1c3c:	3b01      	subs	r3, #1
    1c3e:	b29a      	uxth	r2, r3
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    1c44:	230b      	movs	r3, #11
    1c46:	18fb      	adds	r3, r7, r3
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d010      	beq.n	1c70 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	7adb      	ldrb	r3, [r3, #11]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d01c      	beq.n	1c90 <_i2c_master_read+0x9c>
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	8b9b      	ldrh	r3, [r3, #28]
    1c5a:	b29b      	uxth	r3, r3
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d117      	bne.n	1c90 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	685b      	ldr	r3, [r3, #4]
    1c64:	2280      	movs	r2, #128	; 0x80
    1c66:	02d2      	lsls	r2, r2, #11
    1c68:	431a      	orrs	r2, r3
    1c6a:	68fb      	ldr	r3, [r7, #12]
    1c6c:	605a      	str	r2, [r3, #4]
    1c6e:	e00f      	b.n	1c90 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	7adb      	ldrb	r3, [r3, #11]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d00b      	beq.n	1c90 <_i2c_master_read+0x9c>
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	8b9b      	ldrh	r3, [r3, #28]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d106      	bne.n	1c90 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	685b      	ldr	r3, [r3, #4]
    1c86:	2280      	movs	r2, #128	; 0x80
    1c88:	02d2      	lsls	r2, r2, #11
    1c8a:	431a      	orrs	r2, r3
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	8b9b      	ldrh	r3, [r3, #28]
    1c94:	b29b      	uxth	r3, r3
    1c96:	2b00      	cmp	r3, #0
    1c98:	d10e      	bne.n	1cb8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	7a9b      	ldrb	r3, [r3, #10]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d00a      	beq.n	1cb8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	0018      	movs	r0, r3
    1ca6:	4b0e      	ldr	r3, [pc, #56]	; (1ce0 <_i2c_master_read+0xec>)
    1ca8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	685b      	ldr	r3, [r3, #4]
    1cae:	22c0      	movs	r2, #192	; 0xc0
    1cb0:	0292      	lsls	r2, r2, #10
    1cb2:	431a      	orrs	r2, r3
    1cb4:	68fb      	ldr	r3, [r7, #12]
    1cb6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	0018      	movs	r0, r3
    1cbc:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <_i2c_master_read+0xec>)
    1cbe:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	6a1a      	ldr	r2, [r3, #32]
    1cc4:	2308      	movs	r3, #8
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	881b      	ldrh	r3, [r3, #0]
    1cca:	18d3      	adds	r3, r2, r3
    1ccc:	68fa      	ldr	r2, [r7, #12]
    1cce:	2128      	movs	r1, #40	; 0x28
    1cd0:	5c52      	ldrb	r2, [r2, r1]
    1cd2:	b2d2      	uxtb	r2, r2
    1cd4:	701a      	strb	r2, [r3, #0]
}
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	46bd      	mov	sp, r7
    1cda:	b004      	add	sp, #16
    1cdc:	bd80      	pop	{r7, pc}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	00001bd1 	.word	0x00001bd1

00001ce4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b084      	sub	sp, #16
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	681b      	ldr	r3, [r3, #0]
    1cf0:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1cf2:	68fb      	ldr	r3, [r7, #12]
    1cf4:	8b5b      	ldrh	r3, [r3, #26]
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	001a      	movs	r2, r3
    1cfa:	2304      	movs	r3, #4
    1cfc:	4013      	ands	r3, r2
    1cfe:	d004      	beq.n	1d0a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	2225      	movs	r2, #37	; 0x25
    1d04:	211e      	movs	r1, #30
    1d06:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1d08:	e024      	b.n	1d54 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1d0a:	230a      	movs	r3, #10
    1d0c:	18fb      	adds	r3, r7, r3
    1d0e:	687a      	ldr	r2, [r7, #4]
    1d10:	8b52      	ldrh	r2, [r2, #26]
    1d12:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	8b9b      	ldrh	r3, [r3, #28]
    1d18:	b29a      	uxth	r2, r3
    1d1a:	230a      	movs	r3, #10
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	210a      	movs	r1, #10
    1d20:	1879      	adds	r1, r7, r1
    1d22:	8809      	ldrh	r1, [r1, #0]
    1d24:	1a8a      	subs	r2, r1, r2
    1d26:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	8b9b      	ldrh	r3, [r3, #28]
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	3b01      	subs	r3, #1
    1d30:	b29a      	uxth	r2, r3
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	0018      	movs	r0, r3
    1d3a:	4b08      	ldr	r3, [pc, #32]	; (1d5c <_i2c_master_write+0x78>)
    1d3c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	6a1a      	ldr	r2, [r3, #32]
    1d42:	230a      	movs	r3, #10
    1d44:	18fb      	adds	r3, r7, r3
    1d46:	881b      	ldrh	r3, [r3, #0]
    1d48:	18d3      	adds	r3, r2, r3
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	b2d9      	uxtb	r1, r3
    1d4e:	68fb      	ldr	r3, [r7, #12]
    1d50:	2228      	movs	r2, #40	; 0x28
    1d52:	5499      	strb	r1, [r3, r2]
}
    1d54:	46bd      	mov	sp, r7
    1d56:	b004      	add	sp, #16
    1d58:	bd80      	pop	{r7, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	00001bd1 	.word	0x00001bd1

00001d60 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b084      	sub	sp, #16
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1d6e:	68fb      	ldr	r3, [r7, #12]
    1d70:	7e1b      	ldrb	r3, [r3, #24]
    1d72:	b2db      	uxtb	r3, r3
    1d74:	001a      	movs	r2, r3
    1d76:	2301      	movs	r3, #1
    1d78:	4013      	ands	r3, r2
    1d7a:	d02b      	beq.n	1dd4 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1d7c:	68fb      	ldr	r3, [r7, #12]
    1d7e:	2201      	movs	r2, #1
    1d80:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	8b5b      	ldrh	r3, [r3, #26]
    1d86:	b29b      	uxth	r3, r3
    1d88:	001a      	movs	r2, r3
    1d8a:	2302      	movs	r3, #2
    1d8c:	4013      	ands	r3, r2
    1d8e:	d004      	beq.n	1d9a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	2225      	movs	r2, #37	; 0x25
    1d94:	2141      	movs	r1, #65	; 0x41
    1d96:	5499      	strb	r1, [r3, r2]
    1d98:	e01c      	b.n	1dd4 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1d9a:	68fb      	ldr	r3, [r7, #12]
    1d9c:	8b5b      	ldrh	r3, [r3, #26]
    1d9e:	b29b      	uxth	r3, r3
    1da0:	001a      	movs	r2, r3
    1da2:	2304      	movs	r3, #4
    1da4:	4013      	ands	r3, r2
    1da6:	d015      	beq.n	1dd4 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	2225      	movs	r2, #37	; 0x25
    1dac:	2118      	movs	r1, #24
    1dae:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1db0:	687b      	ldr	r3, [r7, #4]
    1db2:	2200      	movs	r2, #0
    1db4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	7a9b      	ldrb	r3, [r3, #10]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d00a      	beq.n	1dd4 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	0018      	movs	r0, r3
    1dc2:	4b13      	ldr	r3, [pc, #76]	; (1e10 <_i2c_master_async_address_response+0xb0>)
    1dc4:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	685b      	ldr	r3, [r3, #4]
    1dca:	22c0      	movs	r2, #192	; 0xc0
    1dcc:	0292      	lsls	r2, r2, #10
    1dce:	431a      	orrs	r2, r3
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8b9b      	ldrh	r3, [r3, #28]
    1dd8:	b29a      	uxth	r2, r3
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	2225      	movs	r2, #37	; 0x25
    1de2:	5c9b      	ldrb	r3, [r3, r2]
    1de4:	b2db      	uxtb	r3, r3
    1de6:	2b05      	cmp	r3, #5
    1de8:	d10e      	bne.n	1e08 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	2224      	movs	r2, #36	; 0x24
    1dee:	5c9b      	ldrb	r3, [r3, r2]
    1df0:	b2db      	uxtb	r3, r3
    1df2:	2b00      	cmp	r3, #0
    1df4:	d104      	bne.n	1e00 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	0018      	movs	r0, r3
    1dfa:	4b06      	ldr	r3, [pc, #24]	; (1e14 <_i2c_master_async_address_response+0xb4>)
    1dfc:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1dfe:	e003      	b.n	1e08 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	0018      	movs	r0, r3
    1e04:	4b04      	ldr	r3, [pc, #16]	; (1e18 <_i2c_master_async_address_response+0xb8>)
    1e06:	4798      	blx	r3
}
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46bd      	mov	sp, r7
    1e0c:	b004      	add	sp, #16
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	00001bd1 	.word	0x00001bd1
    1e14:	00001ce5 	.word	0x00001ce5
    1e18:	00001bf5 	.word	0x00001bf5

00001e1c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b086      	sub	sp, #24
    1e20:	af00      	add	r7, sp, #0
    1e22:	0002      	movs	r2, r0
    1e24:	1dfb      	adds	r3, r7, #7
    1e26:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1e28:	1dfb      	adds	r3, r7, #7
    1e2a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1e2c:	4b93      	ldr	r3, [pc, #588]	; (207c <STACK_SIZE+0x7c>)
    1e2e:	0092      	lsls	r2, r2, #2
    1e30:	58d3      	ldr	r3, [r2, r3]
    1e32:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e34:	697b      	ldr	r3, [r7, #20]
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1e3a:	693b      	ldr	r3, [r7, #16]
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	011b      	lsls	r3, r3, #4
    1e40:	0fdb      	lsrs	r3, r3, #31
    1e42:	b2db      	uxtb	r3, r3
    1e44:	001a      	movs	r2, r3
    1e46:	230f      	movs	r3, #15
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	1e51      	subs	r1, r2, #1
    1e4c:	418a      	sbcs	r2, r1
    1e4e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1e50:	230e      	movs	r3, #14
    1e52:	18fb      	adds	r3, r7, r3
    1e54:	697a      	ldr	r2, [r7, #20]
    1e56:	7e52      	ldrb	r2, [r2, #25]
    1e58:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1e5a:	697b      	ldr	r3, [r7, #20]
    1e5c:	7e1b      	ldrb	r3, [r3, #24]
    1e5e:	b2da      	uxtb	r2, r3
    1e60:	230e      	movs	r3, #14
    1e62:	18fb      	adds	r3, r7, r3
    1e64:	210e      	movs	r1, #14
    1e66:	1879      	adds	r1, r7, r1
    1e68:	7809      	ldrb	r1, [r1, #0]
    1e6a:	400a      	ands	r2, r1
    1e6c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1e6e:	697b      	ldr	r3, [r7, #20]
    1e70:	8b5b      	ldrh	r3, [r3, #26]
    1e72:	b29b      	uxth	r3, r3
    1e74:	2b00      	cmp	r3, #0
    1e76:	d109      	bne.n	1e8c <_i2c_master_interrupt_handler+0x70>
    1e78:	697b      	ldr	r3, [r7, #20]
    1e7a:	8b9b      	ldrh	r3, [r3, #28]
    1e7c:	b29b      	uxth	r3, r3
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d004      	beq.n	1e8c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1e82:	697b      	ldr	r3, [r7, #20]
    1e84:	0018      	movs	r0, r3
    1e86:	4b7e      	ldr	r3, [pc, #504]	; (2080 <STACK_SIZE+0x80>)
    1e88:	4798      	blx	r3
    1e8a:	e070      	b.n	1f6e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e8c:	697b      	ldr	r3, [r7, #20]
    1e8e:	8b5b      	ldrh	r3, [r3, #26]
    1e90:	b29b      	uxth	r3, r3
    1e92:	2b00      	cmp	r3, #0
    1e94:	d039      	beq.n	1f0a <_i2c_master_interrupt_handler+0xee>
    1e96:	697b      	ldr	r3, [r7, #20]
    1e98:	8b9b      	ldrh	r3, [r3, #28]
    1e9a:	b29b      	uxth	r3, r3
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d134      	bne.n	1f0a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1ea0:	697b      	ldr	r3, [r7, #20]
    1ea2:	2225      	movs	r2, #37	; 0x25
    1ea4:	5c9b      	ldrb	r3, [r3, r2]
    1ea6:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1ea8:	2b05      	cmp	r3, #5
    1eaa:	d12e      	bne.n	1f0a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1eac:	697b      	ldr	r3, [r7, #20]
    1eae:	2224      	movs	r2, #36	; 0x24
    1eb0:	5c9b      	ldrb	r3, [r3, r2]
    1eb2:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d128      	bne.n	1f0a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1eb8:	693b      	ldr	r3, [r7, #16]
    1eba:	2203      	movs	r2, #3
    1ebc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1ebe:	697b      	ldr	r3, [r7, #20]
    1ec0:	2200      	movs	r2, #0
    1ec2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1ec4:	697b      	ldr	r3, [r7, #20]
    1ec6:	2225      	movs	r2, #37	; 0x25
    1ec8:	2100      	movs	r1, #0
    1eca:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1ecc:	697b      	ldr	r3, [r7, #20]
    1ece:	7a9b      	ldrb	r3, [r3, #10]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d00b      	beq.n	1eec <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1ed4:	697b      	ldr	r3, [r7, #20]
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b6a      	ldr	r3, [pc, #424]	; (2084 <STACK_SIZE+0x84>)
    1eda:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1edc:	693b      	ldr	r3, [r7, #16]
    1ede:	685b      	ldr	r3, [r3, #4]
    1ee0:	22c0      	movs	r2, #192	; 0xc0
    1ee2:	0292      	lsls	r2, r2, #10
    1ee4:	431a      	orrs	r2, r3
    1ee6:	693b      	ldr	r3, [r7, #16]
    1ee8:	605a      	str	r2, [r3, #4]
    1eea:	e002      	b.n	1ef2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1eec:	693b      	ldr	r3, [r7, #16]
    1eee:	2201      	movs	r2, #1
    1ef0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1ef2:	230e      	movs	r3, #14
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	2201      	movs	r2, #1
    1efa:	4013      	ands	r3, r2
    1efc:	d037      	beq.n	1f6e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1efe:	697b      	ldr	r3, [r7, #20]
    1f00:	68db      	ldr	r3, [r3, #12]
    1f02:	697a      	ldr	r2, [r7, #20]
    1f04:	0010      	movs	r0, r2
    1f06:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1f08:	e031      	b.n	1f6e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1f0a:	697b      	ldr	r3, [r7, #20]
    1f0c:	8b5b      	ldrh	r3, [r3, #26]
    1f0e:	b29b      	uxth	r3, r3
    1f10:	2b00      	cmp	r3, #0
    1f12:	d02c      	beq.n	1f6e <_i2c_master_interrupt_handler+0x152>
    1f14:	697b      	ldr	r3, [r7, #20]
    1f16:	8b9b      	ldrh	r3, [r3, #28]
    1f18:	b29b      	uxth	r3, r3
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d027      	beq.n	1f6e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f1e:	693b      	ldr	r3, [r7, #16]
    1f20:	8b5b      	ldrh	r3, [r3, #26]
    1f22:	b29b      	uxth	r3, r3
    1f24:	001a      	movs	r2, r3
    1f26:	2320      	movs	r3, #32
    1f28:	4013      	ands	r3, r2
    1f2a:	d111      	bne.n	1f50 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f2c:	230f      	movs	r3, #15
    1f2e:	18fb      	adds	r3, r7, r3
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	2201      	movs	r2, #1
    1f34:	4053      	eors	r3, r2
    1f36:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d104      	bne.n	1f46 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1f3c:	697b      	ldr	r3, [r7, #20]
    1f3e:	8b9b      	ldrh	r3, [r3, #28]
    1f40:	b29b      	uxth	r3, r3
    1f42:	2b01      	cmp	r3, #1
    1f44:	d004      	beq.n	1f50 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1f46:	697b      	ldr	r3, [r7, #20]
    1f48:	2225      	movs	r2, #37	; 0x25
    1f4a:	2141      	movs	r1, #65	; 0x41
    1f4c:	5499      	strb	r1, [r3, r2]
    1f4e:	e00e      	b.n	1f6e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1f50:	697b      	ldr	r3, [r7, #20]
    1f52:	2224      	movs	r2, #36	; 0x24
    1f54:	5c9b      	ldrb	r3, [r3, r2]
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d104      	bne.n	1f66 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1f5c:	697b      	ldr	r3, [r7, #20]
    1f5e:	0018      	movs	r0, r3
    1f60:	4b49      	ldr	r3, [pc, #292]	; (2088 <STACK_SIZE+0x88>)
    1f62:	4798      	blx	r3
    1f64:	e003      	b.n	1f6e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	0018      	movs	r0, r3
    1f6a:	4b48      	ldr	r3, [pc, #288]	; (208c <STACK_SIZE+0x8c>)
    1f6c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f6e:	697b      	ldr	r3, [r7, #20]
    1f70:	8b5b      	ldrh	r3, [r3, #26]
    1f72:	b29b      	uxth	r3, r3
    1f74:	2b00      	cmp	r3, #0
    1f76:	d047      	beq.n	2008 <STACK_SIZE+0x8>
    1f78:	697b      	ldr	r3, [r7, #20]
    1f7a:	8b9b      	ldrh	r3, [r3, #28]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d142      	bne.n	2008 <STACK_SIZE+0x8>
			(module->status == STATUS_BUSY) &&
    1f82:	697b      	ldr	r3, [r7, #20]
    1f84:	2225      	movs	r2, #37	; 0x25
    1f86:	5c9b      	ldrb	r3, [r3, r2]
    1f88:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f8a:	2b05      	cmp	r3, #5
    1f8c:	d13c      	bne.n	2008 <STACK_SIZE+0x8>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1f8e:	697b      	ldr	r3, [r7, #20]
    1f90:	2224      	movs	r2, #36	; 0x24
    1f92:	5c9b      	ldrb	r3, [r3, r2]
    1f94:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1f96:	2b01      	cmp	r3, #1
    1f98:	d136      	bne.n	2008 <STACK_SIZE+0x8>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1f9a:	693b      	ldr	r3, [r7, #16]
    1f9c:	7e1b      	ldrb	r3, [r3, #24]
    1f9e:	b2db      	uxtb	r3, r3
    1fa0:	001a      	movs	r2, r3
    1fa2:	2302      	movs	r3, #2
    1fa4:	4013      	ands	r3, r2
    1fa6:	d002      	beq.n	1fae <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1fa8:	693b      	ldr	r3, [r7, #16]
    1faa:	2202      	movs	r2, #2
    1fac:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1fae:	693b      	ldr	r3, [r7, #16]
    1fb0:	2203      	movs	r2, #3
    1fb2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1fb4:	697b      	ldr	r3, [r7, #20]
    1fb6:	2200      	movs	r2, #0
    1fb8:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1fba:	697b      	ldr	r3, [r7, #20]
    1fbc:	2225      	movs	r2, #37	; 0x25
    1fbe:	2100      	movs	r1, #0
    1fc0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1fc2:	230e      	movs	r3, #14
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	2202      	movs	r2, #2
    1fca:	4013      	ands	r3, r2
    1fcc:	d00b      	beq.n	1fe6 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1fce:	697b      	ldr	r3, [r7, #20]
    1fd0:	2224      	movs	r2, #36	; 0x24
    1fd2:	5c9b      	ldrb	r3, [r3, r2]
    1fd4:	b2db      	uxtb	r3, r3
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	d105      	bne.n	1fe6 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1fda:	697b      	ldr	r3, [r7, #20]
    1fdc:	691b      	ldr	r3, [r3, #16]
    1fde:	697a      	ldr	r2, [r7, #20]
    1fe0:	0010      	movs	r0, r2
    1fe2:	4798      	blx	r3
    1fe4:	e010      	b.n	2008 <STACK_SIZE+0x8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1fe6:	230e      	movs	r3, #14
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	2201      	movs	r2, #1
    1fee:	4013      	ands	r3, r2
    1ff0:	d00a      	beq.n	2008 <STACK_SIZE+0x8>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1ff2:	697b      	ldr	r3, [r7, #20]
    1ff4:	2224      	movs	r2, #36	; 0x24
    1ff6:	5c9b      	ldrb	r3, [r3, r2]
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d104      	bne.n	2008 <STACK_SIZE+0x8>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ffe:	697b      	ldr	r3, [r7, #20]
    2000:	68db      	ldr	r3, [r3, #12]
    2002:	697a      	ldr	r2, [r7, #20]
    2004:	0010      	movs	r0, r2
    2006:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2008:	697b      	ldr	r3, [r7, #20]
    200a:	2225      	movs	r2, #37	; 0x25
    200c:	5c9b      	ldrb	r3, [r3, r2]
    200e:	b2db      	uxtb	r3, r3
    2010:	2b05      	cmp	r3, #5
    2012:	d02e      	beq.n	2072 <STACK_SIZE+0x72>
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	2225      	movs	r2, #37	; 0x25
    2018:	5c9b      	ldrb	r3, [r3, r2]
    201a:	b2db      	uxtb	r3, r3
    201c:	2b00      	cmp	r3, #0
    201e:	d028      	beq.n	2072 <STACK_SIZE+0x72>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    2020:	693b      	ldr	r3, [r7, #16]
    2022:	2203      	movs	r2, #3
    2024:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2026:	697b      	ldr	r3, [r7, #20]
    2028:	2200      	movs	r2, #0
    202a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    202c:	697b      	ldr	r3, [r7, #20]
    202e:	2200      	movs	r2, #0
    2030:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2032:	697b      	ldr	r3, [r7, #20]
    2034:	2225      	movs	r2, #37	; 0x25
    2036:	5c9b      	ldrb	r3, [r3, r2]
    2038:	b2db      	uxtb	r3, r3
    203a:	2b41      	cmp	r3, #65	; 0x41
    203c:	d00e      	beq.n	205c <STACK_SIZE+0x5c>
				module->send_stop) {
    203e:	697b      	ldr	r3, [r7, #20]
    2040:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2042:	2b00      	cmp	r3, #0
    2044:	d00a      	beq.n	205c <STACK_SIZE+0x5c>
			_i2c_master_wait_for_sync(module);
    2046:	697b      	ldr	r3, [r7, #20]
    2048:	0018      	movs	r0, r3
    204a:	4b0e      	ldr	r3, [pc, #56]	; (2084 <STACK_SIZE+0x84>)
    204c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    204e:	693b      	ldr	r3, [r7, #16]
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	22e0      	movs	r2, #224	; 0xe0
    2054:	02d2      	lsls	r2, r2, #11
    2056:	431a      	orrs	r2, r3
    2058:	693b      	ldr	r3, [r7, #16]
    205a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    205c:	230e      	movs	r3, #14
    205e:	18fb      	adds	r3, r7, r3
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	2204      	movs	r2, #4
    2064:	4013      	ands	r3, r2
    2066:	d004      	beq.n	2072 <STACK_SIZE+0x72>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2068:	697b      	ldr	r3, [r7, #20]
    206a:	695b      	ldr	r3, [r3, #20]
    206c:	697a      	ldr	r2, [r7, #20]
    206e:	0010      	movs	r0, r2
    2070:	4798      	blx	r3
		}
	}
}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	46bd      	mov	sp, r7
    2076:	b006      	add	sp, #24
    2078:	bd80      	pop	{r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	200003c0 	.word	0x200003c0
    2080:	00001d61 	.word	0x00001d61
    2084:	00001bd1 	.word	0x00001bd1
    2088:	00001ce5 	.word	0x00001ce5
    208c:	00001bf5 	.word	0x00001bf5

00002090 <system_pinmux_get_group_from_gpio_pin>:
{
    2090:	b580      	push	{r7, lr}
    2092:	b084      	sub	sp, #16
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dfb      	adds	r3, r7, #7
    209a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    209c:	230f      	movs	r3, #15
    209e:	18fb      	adds	r3, r7, r3
    20a0:	1dfa      	adds	r2, r7, #7
    20a2:	7812      	ldrb	r2, [r2, #0]
    20a4:	09d2      	lsrs	r2, r2, #7
    20a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    20a8:	230e      	movs	r3, #14
    20aa:	18fb      	adds	r3, r7, r3
    20ac:	1dfa      	adds	r2, r7, #7
    20ae:	7812      	ldrb	r2, [r2, #0]
    20b0:	0952      	lsrs	r2, r2, #5
    20b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    20b4:	4b0d      	ldr	r3, [pc, #52]	; (20ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    20b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    20b8:	230f      	movs	r3, #15
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b00      	cmp	r3, #0
    20c0:	d10f      	bne.n	20e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    20c2:	230f      	movs	r3, #15
    20c4:	18fb      	adds	r3, r7, r3
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	009b      	lsls	r3, r3, #2
    20ca:	2210      	movs	r2, #16
    20cc:	4694      	mov	ip, r2
    20ce:	44bc      	add	ip, r7
    20d0:	4463      	add	r3, ip
    20d2:	3b08      	subs	r3, #8
    20d4:	681a      	ldr	r2, [r3, #0]
    20d6:	230e      	movs	r3, #14
    20d8:	18fb      	adds	r3, r7, r3
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	01db      	lsls	r3, r3, #7
    20de:	18d3      	adds	r3, r2, r3
    20e0:	e000      	b.n	20e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    20e2:	2300      	movs	r3, #0
}
    20e4:	0018      	movs	r0, r3
    20e6:	46bd      	mov	sp, r7
    20e8:	b004      	add	sp, #16
    20ea:	bd80      	pop	{r7, pc}
    20ec:	41004400 	.word	0x41004400

000020f0 <system_voltage_reference_enable>:
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b082      	sub	sp, #8
    20f4:	af00      	add	r7, sp, #0
    20f6:	0002      	movs	r2, r0
    20f8:	1dfb      	adds	r3, r7, #7
    20fa:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    20fc:	1dfb      	adds	r3, r7, #7
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	2b00      	cmp	r3, #0
    2102:	d002      	beq.n	210a <system_voltage_reference_enable+0x1a>
    2104:	2b01      	cmp	r3, #1
    2106:	d007      	beq.n	2118 <system_voltage_reference_enable+0x28>
			return;
    2108:	e00d      	b.n	2126 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    210a:	4b08      	ldr	r3, [pc, #32]	; (212c <system_voltage_reference_enable+0x3c>)
    210c:	4a07      	ldr	r2, [pc, #28]	; (212c <system_voltage_reference_enable+0x3c>)
    210e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2110:	2102      	movs	r1, #2
    2112:	430a      	orrs	r2, r1
    2114:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2116:	e006      	b.n	2126 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2118:	4b04      	ldr	r3, [pc, #16]	; (212c <system_voltage_reference_enable+0x3c>)
    211a:	4a04      	ldr	r2, [pc, #16]	; (212c <system_voltage_reference_enable+0x3c>)
    211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    211e:	2104      	movs	r1, #4
    2120:	430a      	orrs	r2, r1
    2122:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2124:	46c0      	nop			; (mov r8, r8)
}
    2126:	46bd      	mov	sp, r7
    2128:	b002      	add	sp, #8
    212a:	bd80      	pop	{r7, pc}
    212c:	40000800 	.word	0x40000800

00002130 <system_interrupt_enable>:
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	0002      	movs	r2, r0
    2138:	1dfb      	adds	r3, r7, #7
    213a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    213c:	4b06      	ldr	r3, [pc, #24]	; (2158 <system_interrupt_enable+0x28>)
    213e:	1dfa      	adds	r2, r7, #7
    2140:	7812      	ldrb	r2, [r2, #0]
    2142:	0011      	movs	r1, r2
    2144:	221f      	movs	r2, #31
    2146:	400a      	ands	r2, r1
    2148:	2101      	movs	r1, #1
    214a:	4091      	lsls	r1, r2
    214c:	000a      	movs	r2, r1
    214e:	601a      	str	r2, [r3, #0]
}
    2150:	46c0      	nop			; (mov r8, r8)
    2152:	46bd      	mov	sp, r7
    2154:	b002      	add	sp, #8
    2156:	bd80      	pop	{r7, pc}
    2158:	e000e100 	.word	0xe000e100

0000215c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
    2162:	0002      	movs	r2, r0
    2164:	1dfb      	adds	r3, r7, #7
    2166:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2168:	4a07      	ldr	r2, [pc, #28]	; (2188 <system_interrupt_disable+0x2c>)
    216a:	1dfb      	adds	r3, r7, #7
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	0019      	movs	r1, r3
    2170:	231f      	movs	r3, #31
    2172:	400b      	ands	r3, r1
    2174:	2101      	movs	r1, #1
    2176:	4099      	lsls	r1, r3
    2178:	000b      	movs	r3, r1
    217a:	0019      	movs	r1, r3
    217c:	2380      	movs	r3, #128	; 0x80
    217e:	50d1      	str	r1, [r2, r3]
}
    2180:	46c0      	nop			; (mov r8, r8)
    2182:	46bd      	mov	sp, r7
    2184:	b002      	add	sp, #8
    2186:	bd80      	pop	{r7, pc}
    2188:	e000e100 	.word	0xe000e100

0000218c <adc_is_syncing>:
{
    218c:	b580      	push	{r7, lr}
    218e:	b084      	sub	sp, #16
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    219a:	68fb      	ldr	r3, [r7, #12]
    219c:	7e5b      	ldrb	r3, [r3, #25]
    219e:	b2db      	uxtb	r3, r3
    21a0:	b25b      	sxtb	r3, r3
    21a2:	2b00      	cmp	r3, #0
    21a4:	da01      	bge.n	21aa <adc_is_syncing+0x1e>
		return true;
    21a6:	2301      	movs	r3, #1
    21a8:	e000      	b.n	21ac <adc_is_syncing+0x20>
	return false;
    21aa:	2300      	movs	r3, #0
}
    21ac:	0018      	movs	r0, r3
    21ae:	46bd      	mov	sp, r7
    21b0:	b004      	add	sp, #16
    21b2:	bd80      	pop	{r7, pc}

000021b4 <adc_get_status>:
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b086      	sub	sp, #24
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    21c2:	693b      	ldr	r3, [r7, #16]
    21c4:	7e1b      	ldrb	r3, [r3, #24]
    21c6:	b2db      	uxtb	r3, r3
    21c8:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
    21ca:	2300      	movs	r3, #0
    21cc:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
    21ce:	68fb      	ldr	r3, [r7, #12]
    21d0:	2201      	movs	r2, #1
    21d2:	4013      	ands	r3, r2
    21d4:	d003      	beq.n	21de <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    21d6:	697b      	ldr	r3, [r7, #20]
    21d8:	2201      	movs	r2, #1
    21da:	4313      	orrs	r3, r2
    21dc:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	2204      	movs	r2, #4
    21e2:	4013      	ands	r3, r2
    21e4:	d003      	beq.n	21ee <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    21e6:	697b      	ldr	r3, [r7, #20]
    21e8:	2202      	movs	r2, #2
    21ea:	4313      	orrs	r3, r2
    21ec:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    21ee:	68fb      	ldr	r3, [r7, #12]
    21f0:	2202      	movs	r2, #2
    21f2:	4013      	ands	r3, r2
    21f4:	d003      	beq.n	21fe <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    21f6:	697b      	ldr	r3, [r7, #20]
    21f8:	2204      	movs	r2, #4
    21fa:	4313      	orrs	r3, r2
    21fc:	617b      	str	r3, [r7, #20]
	return status_flags;
    21fe:	697b      	ldr	r3, [r7, #20]
}
    2200:	0018      	movs	r0, r3
    2202:	46bd      	mov	sp, r7
    2204:	b006      	add	sp, #24
    2206:	bd80      	pop	{r7, pc}

00002208 <adc_clear_status>:
{
    2208:	b580      	push	{r7, lr}
    220a:	b084      	sub	sp, #16
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
    2210:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
    2218:	2300      	movs	r3, #0
    221a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
    221c:	683b      	ldr	r3, [r7, #0]
    221e:	2201      	movs	r2, #1
    2220:	4013      	ands	r3, r2
    2222:	d003      	beq.n	222c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	2201      	movs	r2, #1
    2228:	4313      	orrs	r3, r2
    222a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
    222c:	683b      	ldr	r3, [r7, #0]
    222e:	2202      	movs	r2, #2
    2230:	4013      	ands	r3, r2
    2232:	d003      	beq.n	223c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    2234:	68fb      	ldr	r3, [r7, #12]
    2236:	2204      	movs	r2, #4
    2238:	4313      	orrs	r3, r2
    223a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
    223c:	683b      	ldr	r3, [r7, #0]
    223e:	2204      	movs	r2, #4
    2240:	4013      	ands	r3, r2
    2242:	d003      	beq.n	224c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    2244:	68fb      	ldr	r3, [r7, #12]
    2246:	2202      	movs	r2, #2
    2248:	4313      	orrs	r3, r2
    224a:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
    224c:	68fb      	ldr	r3, [r7, #12]
    224e:	b2da      	uxtb	r2, r3
    2250:	68bb      	ldr	r3, [r7, #8]
    2252:	761a      	strb	r2, [r3, #24]
}
    2254:	46c0      	nop			; (mov r8, r8)
    2256:	46bd      	mov	sp, r7
    2258:	b004      	add	sp, #16
    225a:	bd80      	pop	{r7, pc}

0000225c <adc_enable>:
{
    225c:	b580      	push	{r7, lr}
    225e:	b084      	sub	sp, #16
    2260:	af00      	add	r7, sp, #0
    2262:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	0018      	movs	r0, r3
    2270:	4b10      	ldr	r3, [pc, #64]	; (22b4 <adc_enable+0x58>)
    2272:	4798      	blx	r3
    2274:	1e03      	subs	r3, r0, #0
    2276:	d1f9      	bne.n	226c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2278:	2017      	movs	r0, #23
    227a:	4b0f      	ldr	r3, [pc, #60]	; (22b8 <adc_enable+0x5c>)
    227c:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	220f      	movs	r2, #15
    2282:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	220f      	movs	r2, #15
    2288:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    228a:	68fb      	ldr	r3, [r7, #12]
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	b2db      	uxtb	r3, r3
    2290:	2202      	movs	r2, #2
    2292:	4313      	orrs	r3, r2
    2294:	b2da      	uxtb	r2, r3
    2296:	68fb      	ldr	r3, [r7, #12]
    2298:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	0018      	movs	r0, r3
    22a0:	4b04      	ldr	r3, [pc, #16]	; (22b4 <adc_enable+0x58>)
    22a2:	4798      	blx	r3
    22a4:	1e03      	subs	r3, r0, #0
    22a6:	d1f9      	bne.n	229c <adc_enable+0x40>
	return STATUS_OK;
    22a8:	2300      	movs	r3, #0
}
    22aa:	0018      	movs	r0, r3
    22ac:	46bd      	mov	sp, r7
    22ae:	b004      	add	sp, #16
    22b0:	bd80      	pop	{r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	0000218d 	.word	0x0000218d
    22b8:	00002131 	.word	0x00002131

000022bc <adc_disable>:
{
    22bc:	b580      	push	{r7, lr}
    22be:	b084      	sub	sp, #16
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    22ca:	2017      	movs	r0, #23
    22cc:	4b11      	ldr	r3, [pc, #68]	; (2314 <adc_disable+0x58>)
    22ce:	4798      	blx	r3
	while (adc_is_syncing(module_inst)) {
    22d0:	46c0      	nop			; (mov r8, r8)
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	0018      	movs	r0, r3
    22d6:	4b10      	ldr	r3, [pc, #64]	; (2318 <adc_disable+0x5c>)
    22d8:	4798      	blx	r3
    22da:	1e03      	subs	r3, r0, #0
    22dc:	d1f9      	bne.n	22d2 <adc_disable+0x16>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    22de:	68fb      	ldr	r3, [r7, #12]
    22e0:	220f      	movs	r2, #15
    22e2:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	220f      	movs	r2, #15
    22e8:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    22ea:	68fb      	ldr	r3, [r7, #12]
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	b2db      	uxtb	r3, r3
    22f0:	2202      	movs	r2, #2
    22f2:	4393      	bics	r3, r2
    22f4:	b2da      	uxtb	r2, r3
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	0018      	movs	r0, r3
    2300:	4b05      	ldr	r3, [pc, #20]	; (2318 <adc_disable+0x5c>)
    2302:	4798      	blx	r3
    2304:	1e03      	subs	r3, r0, #0
    2306:	d1f9      	bne.n	22fc <adc_disable+0x40>
	return STATUS_OK;
    2308:	2300      	movs	r3, #0
}
    230a:	0018      	movs	r0, r3
    230c:	46bd      	mov	sp, r7
    230e:	b004      	add	sp, #16
    2310:	bd80      	pop	{r7, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	0000215d 	.word	0x0000215d
    2318:	0000218d 	.word	0x0000218d

0000231c <adc_start_conversion>:
{
    231c:	b580      	push	{r7, lr}
    231e:	b084      	sub	sp, #16
    2320:	af00      	add	r7, sp, #0
    2322:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	0018      	movs	r0, r3
    2330:	4b0b      	ldr	r3, [pc, #44]	; (2360 <adc_start_conversion+0x44>)
    2332:	4798      	blx	r3
    2334:	1e03      	subs	r3, r0, #0
    2336:	d1f9      	bne.n	232c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2338:	68fb      	ldr	r3, [r7, #12]
    233a:	7b1b      	ldrb	r3, [r3, #12]
    233c:	b2db      	uxtb	r3, r3
    233e:	2202      	movs	r2, #2
    2340:	4313      	orrs	r3, r2
    2342:	b2da      	uxtb	r2, r3
    2344:	68fb      	ldr	r3, [r7, #12]
    2346:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
    2348:	46c0      	nop			; (mov r8, r8)
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	0018      	movs	r0, r3
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <adc_start_conversion+0x44>)
    2350:	4798      	blx	r3
    2352:	1e03      	subs	r3, r0, #0
    2354:	d1f9      	bne.n	234a <adc_start_conversion+0x2e>
}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	46bd      	mov	sp, r7
    235a:	b004      	add	sp, #16
    235c:	bd80      	pop	{r7, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	0000218d 	.word	0x0000218d

00002364 <adc_read>:
{
    2364:	b580      	push	{r7, lr}
    2366:	b084      	sub	sp, #16
    2368:	af00      	add	r7, sp, #0
    236a:	6078      	str	r0, [r7, #4]
    236c:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	0018      	movs	r0, r3
    2372:	4b18      	ldr	r3, [pc, #96]	; (23d4 <adc_read+0x70>)
    2374:	4798      	blx	r3
    2376:	0002      	movs	r2, r0
    2378:	2301      	movs	r3, #1
    237a:	4013      	ands	r3, r2
    237c:	d101      	bne.n	2382 <adc_read+0x1e>
		return STATUS_BUSY;
    237e:	2305      	movs	r3, #5
    2380:	e023      	b.n	23ca <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	681b      	ldr	r3, [r3, #0]
    2386:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2388:	46c0      	nop			; (mov r8, r8)
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	0018      	movs	r0, r3
    238e:	4b12      	ldr	r3, [pc, #72]	; (23d8 <adc_read+0x74>)
    2390:	4798      	blx	r3
    2392:	1e03      	subs	r3, r0, #0
    2394:	d1f9      	bne.n	238a <adc_read+0x26>
	*result = adc_module->RESULT.reg;
    2396:	68fb      	ldr	r3, [r7, #12]
    2398:	8b5b      	ldrh	r3, [r3, #26]
    239a:	b29a      	uxth	r2, r3
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	2101      	movs	r1, #1
    23a4:	0018      	movs	r0, r3
    23a6:	4b0d      	ldr	r3, [pc, #52]	; (23dc <adc_read+0x78>)
    23a8:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	0018      	movs	r0, r3
    23ae:	4b09      	ldr	r3, [pc, #36]	; (23d4 <adc_read+0x70>)
    23b0:	4798      	blx	r3
    23b2:	0002      	movs	r2, r0
    23b4:	2304      	movs	r3, #4
    23b6:	4013      	ands	r3, r2
    23b8:	d006      	beq.n	23c8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    23ba:	687b      	ldr	r3, [r7, #4]
    23bc:	2104      	movs	r1, #4
    23be:	0018      	movs	r0, r3
    23c0:	4b06      	ldr	r3, [pc, #24]	; (23dc <adc_read+0x78>)
    23c2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    23c4:	231e      	movs	r3, #30
    23c6:	e000      	b.n	23ca <adc_read+0x66>
	return STATUS_OK;
    23c8:	2300      	movs	r3, #0
}
    23ca:	0018      	movs	r0, r3
    23cc:	46bd      	mov	sp, r7
    23ce:	b004      	add	sp, #16
    23d0:	bd80      	pop	{r7, pc}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	000021b5 	.word	0x000021b5
    23d8:	0000218d 	.word	0x0000218d
    23dc:	00002209 	.word	0x00002209

000023e0 <port_get_group_from_gpio_pin>:
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	0002      	movs	r2, r0
    23e8:	1dfb      	adds	r3, r7, #7
    23ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    23ec:	1dfb      	adds	r3, r7, #7
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	0018      	movs	r0, r3
    23f2:	4b03      	ldr	r3, [pc, #12]	; (2400 <port_get_group_from_gpio_pin+0x20>)
    23f4:	4798      	blx	r3
    23f6:	0003      	movs	r3, r0
}
    23f8:	0018      	movs	r0, r3
    23fa:	46bd      	mov	sp, r7
    23fc:	b002      	add	sp, #8
    23fe:	bd80      	pop	{r7, pc}
    2400:	00002091 	.word	0x00002091

00002404 <port_pin_get_output_level>:
{
    2404:	b580      	push	{r7, lr}
    2406:	b084      	sub	sp, #16
    2408:	af00      	add	r7, sp, #0
    240a:	0002      	movs	r2, r0
    240c:	1dfb      	adds	r3, r7, #7
    240e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2410:	1dfb      	adds	r3, r7, #7
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	0018      	movs	r0, r3
    2416:	4b0b      	ldr	r3, [pc, #44]	; (2444 <port_pin_get_output_level+0x40>)
    2418:	4798      	blx	r3
    241a:	0003      	movs	r3, r0
    241c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    241e:	1dfb      	adds	r3, r7, #7
    2420:	781b      	ldrb	r3, [r3, #0]
    2422:	221f      	movs	r2, #31
    2424:	4013      	ands	r3, r2
    2426:	2201      	movs	r2, #1
    2428:	409a      	lsls	r2, r3
    242a:	0013      	movs	r3, r2
    242c:	60bb      	str	r3, [r7, #8]
	return (port_base->OUT.reg & pin_mask);
    242e:	68fb      	ldr	r3, [r7, #12]
    2430:	691b      	ldr	r3, [r3, #16]
    2432:	68ba      	ldr	r2, [r7, #8]
    2434:	4013      	ands	r3, r2
    2436:	1e5a      	subs	r2, r3, #1
    2438:	4193      	sbcs	r3, r2
    243a:	b2db      	uxtb	r3, r3
}
    243c:	0018      	movs	r0, r3
    243e:	46bd      	mov	sp, r7
    2440:	b004      	add	sp, #16
    2442:	bd80      	pop	{r7, pc}
    2444:	000023e1 	.word	0x000023e1

00002448 <port_pin_set_output_level>:
{
    2448:	b580      	push	{r7, lr}
    244a:	b084      	sub	sp, #16
    244c:	af00      	add	r7, sp, #0
    244e:	0002      	movs	r2, r0
    2450:	1dfb      	adds	r3, r7, #7
    2452:	701a      	strb	r2, [r3, #0]
    2454:	1dbb      	adds	r3, r7, #6
    2456:	1c0a      	adds	r2, r1, #0
    2458:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    245a:	1dfb      	adds	r3, r7, #7
    245c:	781b      	ldrb	r3, [r3, #0]
    245e:	0018      	movs	r0, r3
    2460:	4b0d      	ldr	r3, [pc, #52]	; (2498 <port_pin_set_output_level+0x50>)
    2462:	4798      	blx	r3
    2464:	0003      	movs	r3, r0
    2466:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2468:	1dfb      	adds	r3, r7, #7
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	221f      	movs	r2, #31
    246e:	4013      	ands	r3, r2
    2470:	2201      	movs	r2, #1
    2472:	409a      	lsls	r2, r3
    2474:	0013      	movs	r3, r2
    2476:	60bb      	str	r3, [r7, #8]
	if (level) {
    2478:	1dbb      	adds	r3, r7, #6
    247a:	781b      	ldrb	r3, [r3, #0]
    247c:	2b00      	cmp	r3, #0
    247e:	d003      	beq.n	2488 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2480:	68fb      	ldr	r3, [r7, #12]
    2482:	68ba      	ldr	r2, [r7, #8]
    2484:	619a      	str	r2, [r3, #24]
}
    2486:	e002      	b.n	248e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2488:	68fb      	ldr	r3, [r7, #12]
    248a:	68ba      	ldr	r2, [r7, #8]
    248c:	615a      	str	r2, [r3, #20]
}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	46bd      	mov	sp, r7
    2492:	b004      	add	sp, #16
    2494:	bd80      	pop	{r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	000023e1 	.word	0x000023e1

0000249c <init_cmd_list>:
const char* CMD_I2C_SCAN = "i2c_scan";

extern struct adc_module adc_inst;
extern struct i2c_master_module i2c_master_instance;

void init_cmd_list() {
    249c:	b5f0      	push	{r4, r5, r6, r7, lr}
    249e:	46de      	mov	lr, fp
    24a0:	4657      	mov	r7, sl
    24a2:	464e      	mov	r6, r9
    24a4:	4645      	mov	r5, r8
    24a6:	b5e0      	push	{r5, r6, r7, lr}
    24a8:	b083      	sub	sp, #12
    24aa:	af00      	add	r7, sp, #0
	cmd_list = (struct option_list) {
    24ac:	4b4f      	ldr	r3, [pc, #316]	; (25ec <init_cmd_list+0x150>)
    24ae:	681a      	ldr	r2, [r3, #0]
    24b0:	4b4f      	ldr	r3, [pc, #316]	; (25f0 <init_cmd_list+0x154>)
    24b2:	6819      	ldr	r1, [r3, #0]
    24b4:	4b4f      	ldr	r3, [pc, #316]	; (25f4 <init_cmd_list+0x158>)
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	607b      	str	r3, [r7, #4]
    24ba:	4b4f      	ldr	r3, [pc, #316]	; (25f8 <init_cmd_list+0x15c>)
    24bc:	6818      	ldr	r0, [r3, #0]
    24be:	6038      	str	r0, [r7, #0]
    24c0:	4b4e      	ldr	r3, [pc, #312]	; (25fc <init_cmd_list+0x160>)
    24c2:	681c      	ldr	r4, [r3, #0]
    24c4:	46a3      	mov	fp, r4
    24c6:	4b4e      	ldr	r3, [pc, #312]	; (2600 <init_cmd_list+0x164>)
    24c8:	681c      	ldr	r4, [r3, #0]
    24ca:	46a2      	mov	sl, r4
    24cc:	4b4d      	ldr	r3, [pc, #308]	; (2604 <init_cmd_list+0x168>)
    24ce:	681c      	ldr	r4, [r3, #0]
    24d0:	46a1      	mov	r9, r4
    24d2:	4b4d      	ldr	r3, [pc, #308]	; (2608 <init_cmd_list+0x16c>)
    24d4:	681c      	ldr	r4, [r3, #0]
    24d6:	46a0      	mov	r8, r4
    24d8:	4b4c      	ldr	r3, [pc, #304]	; (260c <init_cmd_list+0x170>)
    24da:	681c      	ldr	r4, [r3, #0]
    24dc:	46a4      	mov	ip, r4
    24de:	4b4c      	ldr	r3, [pc, #304]	; (2610 <init_cmd_list+0x174>)
    24e0:	681e      	ldr	r6, [r3, #0]
    24e2:	4b4c      	ldr	r3, [pc, #304]	; (2614 <init_cmd_list+0x178>)
    24e4:	681d      	ldr	r5, [r3, #0]
    24e6:	4b4c      	ldr	r3, [pc, #304]	; (2618 <init_cmd_list+0x17c>)
    24e8:	681c      	ldr	r4, [r3, #0]
    24ea:	4b4c      	ldr	r3, [pc, #304]	; (261c <init_cmd_list+0x180>)
    24ec:	6818      	ldr	r0, [r3, #0]
    24ee:	4b4c      	ldr	r3, [pc, #304]	; (2620 <init_cmd_list+0x184>)
    24f0:	601a      	str	r2, [r3, #0]
    24f2:	4a4b      	ldr	r2, [pc, #300]	; (2620 <init_cmd_list+0x184>)
    24f4:	4b4b      	ldr	r3, [pc, #300]	; (2624 <init_cmd_list+0x188>)
    24f6:	6053      	str	r3, [r2, #4]
    24f8:	4a49      	ldr	r2, [pc, #292]	; (2620 <init_cmd_list+0x184>)
    24fa:	4b4b      	ldr	r3, [pc, #300]	; (2628 <init_cmd_list+0x18c>)
    24fc:	6093      	str	r3, [r2, #8]
    24fe:	4b48      	ldr	r3, [pc, #288]	; (2620 <init_cmd_list+0x184>)
    2500:	60d9      	str	r1, [r3, #12]
    2502:	4b47      	ldr	r3, [pc, #284]	; (2620 <init_cmd_list+0x184>)
    2504:	4a47      	ldr	r2, [pc, #284]	; (2624 <init_cmd_list+0x188>)
    2506:	611a      	str	r2, [r3, #16]
    2508:	4b45      	ldr	r3, [pc, #276]	; (2620 <init_cmd_list+0x184>)
    250a:	4a48      	ldr	r2, [pc, #288]	; (262c <init_cmd_list+0x190>)
    250c:	615a      	str	r2, [r3, #20]
    250e:	4b44      	ldr	r3, [pc, #272]	; (2620 <init_cmd_list+0x184>)
    2510:	687a      	ldr	r2, [r7, #4]
    2512:	619a      	str	r2, [r3, #24]
    2514:	4b42      	ldr	r3, [pc, #264]	; (2620 <init_cmd_list+0x184>)
    2516:	4a43      	ldr	r2, [pc, #268]	; (2624 <init_cmd_list+0x188>)
    2518:	61da      	str	r2, [r3, #28]
    251a:	4b41      	ldr	r3, [pc, #260]	; (2620 <init_cmd_list+0x184>)
    251c:	4a44      	ldr	r2, [pc, #272]	; (2630 <init_cmd_list+0x194>)
    251e:	621a      	str	r2, [r3, #32]
    2520:	4b3f      	ldr	r3, [pc, #252]	; (2620 <init_cmd_list+0x184>)
    2522:	683a      	ldr	r2, [r7, #0]
    2524:	625a      	str	r2, [r3, #36]	; 0x24
    2526:	4b3e      	ldr	r3, [pc, #248]	; (2620 <init_cmd_list+0x184>)
    2528:	4a42      	ldr	r2, [pc, #264]	; (2634 <init_cmd_list+0x198>)
    252a:	629a      	str	r2, [r3, #40]	; 0x28
    252c:	4b3c      	ldr	r3, [pc, #240]	; (2620 <init_cmd_list+0x184>)
    252e:	4a42      	ldr	r2, [pc, #264]	; (2638 <init_cmd_list+0x19c>)
    2530:	62da      	str	r2, [r3, #44]	; 0x2c
    2532:	4b3b      	ldr	r3, [pc, #236]	; (2620 <init_cmd_list+0x184>)
    2534:	465a      	mov	r2, fp
    2536:	631a      	str	r2, [r3, #48]	; 0x30
    2538:	4b39      	ldr	r3, [pc, #228]	; (2620 <init_cmd_list+0x184>)
    253a:	4a3e      	ldr	r2, [pc, #248]	; (2634 <init_cmd_list+0x198>)
    253c:	635a      	str	r2, [r3, #52]	; 0x34
    253e:	4b38      	ldr	r3, [pc, #224]	; (2620 <init_cmd_list+0x184>)
    2540:	4a3e      	ldr	r2, [pc, #248]	; (263c <init_cmd_list+0x1a0>)
    2542:	639a      	str	r2, [r3, #56]	; 0x38
    2544:	4b36      	ldr	r3, [pc, #216]	; (2620 <init_cmd_list+0x184>)
    2546:	4652      	mov	r2, sl
    2548:	63da      	str	r2, [r3, #60]	; 0x3c
    254a:	4b35      	ldr	r3, [pc, #212]	; (2620 <init_cmd_list+0x184>)
    254c:	4a39      	ldr	r2, [pc, #228]	; (2634 <init_cmd_list+0x198>)
    254e:	641a      	str	r2, [r3, #64]	; 0x40
    2550:	4b33      	ldr	r3, [pc, #204]	; (2620 <init_cmd_list+0x184>)
    2552:	4a3b      	ldr	r2, [pc, #236]	; (2640 <init_cmd_list+0x1a4>)
    2554:	645a      	str	r2, [r3, #68]	; 0x44
    2556:	4b32      	ldr	r3, [pc, #200]	; (2620 <init_cmd_list+0x184>)
    2558:	464a      	mov	r2, r9
    255a:	649a      	str	r2, [r3, #72]	; 0x48
    255c:	4b30      	ldr	r3, [pc, #192]	; (2620 <init_cmd_list+0x184>)
    255e:	4a31      	ldr	r2, [pc, #196]	; (2624 <init_cmd_list+0x188>)
    2560:	64da      	str	r2, [r3, #76]	; 0x4c
    2562:	4b2f      	ldr	r3, [pc, #188]	; (2620 <init_cmd_list+0x184>)
    2564:	4a37      	ldr	r2, [pc, #220]	; (2644 <init_cmd_list+0x1a8>)
    2566:	651a      	str	r2, [r3, #80]	; 0x50
    2568:	4b2d      	ldr	r3, [pc, #180]	; (2620 <init_cmd_list+0x184>)
    256a:	4642      	mov	r2, r8
    256c:	655a      	str	r2, [r3, #84]	; 0x54
    256e:	4b2c      	ldr	r3, [pc, #176]	; (2620 <init_cmd_list+0x184>)
    2570:	4a2c      	ldr	r2, [pc, #176]	; (2624 <init_cmd_list+0x188>)
    2572:	659a      	str	r2, [r3, #88]	; 0x58
    2574:	4b2a      	ldr	r3, [pc, #168]	; (2620 <init_cmd_list+0x184>)
    2576:	4a34      	ldr	r2, [pc, #208]	; (2648 <init_cmd_list+0x1ac>)
    2578:	65da      	str	r2, [r3, #92]	; 0x5c
    257a:	4b29      	ldr	r3, [pc, #164]	; (2620 <init_cmd_list+0x184>)
    257c:	4662      	mov	r2, ip
    257e:	661a      	str	r2, [r3, #96]	; 0x60
    2580:	4b27      	ldr	r3, [pc, #156]	; (2620 <init_cmd_list+0x184>)
    2582:	4a32      	ldr	r2, [pc, #200]	; (264c <init_cmd_list+0x1b0>)
    2584:	665a      	str	r2, [r3, #100]	; 0x64
    2586:	4b26      	ldr	r3, [pc, #152]	; (2620 <init_cmd_list+0x184>)
    2588:	4a31      	ldr	r2, [pc, #196]	; (2650 <init_cmd_list+0x1b4>)
    258a:	669a      	str	r2, [r3, #104]	; 0x68
    258c:	4b24      	ldr	r3, [pc, #144]	; (2620 <init_cmd_list+0x184>)
    258e:	66de      	str	r6, [r3, #108]	; 0x6c
    2590:	4b23      	ldr	r3, [pc, #140]	; (2620 <init_cmd_list+0x184>)
    2592:	4a24      	ldr	r2, [pc, #144]	; (2624 <init_cmd_list+0x188>)
    2594:	671a      	str	r2, [r3, #112]	; 0x70
    2596:	4b22      	ldr	r3, [pc, #136]	; (2620 <init_cmd_list+0x184>)
    2598:	4a2e      	ldr	r2, [pc, #184]	; (2654 <init_cmd_list+0x1b8>)
    259a:	675a      	str	r2, [r3, #116]	; 0x74
    259c:	4b20      	ldr	r3, [pc, #128]	; (2620 <init_cmd_list+0x184>)
    259e:	679d      	str	r5, [r3, #120]	; 0x78
    25a0:	4b1f      	ldr	r3, [pc, #124]	; (2620 <init_cmd_list+0x184>)
    25a2:	4a20      	ldr	r2, [pc, #128]	; (2624 <init_cmd_list+0x188>)
    25a4:	67da      	str	r2, [r3, #124]	; 0x7c
    25a6:	4b1e      	ldr	r3, [pc, #120]	; (2620 <init_cmd_list+0x184>)
    25a8:	2180      	movs	r1, #128	; 0x80
    25aa:	4a2b      	ldr	r2, [pc, #172]	; (2658 <init_cmd_list+0x1bc>)
    25ac:	505a      	str	r2, [r3, r1]
    25ae:	4b1c      	ldr	r3, [pc, #112]	; (2620 <init_cmd_list+0x184>)
    25b0:	2284      	movs	r2, #132	; 0x84
    25b2:	509c      	str	r4, [r3, r2]
    25b4:	4b1a      	ldr	r3, [pc, #104]	; (2620 <init_cmd_list+0x184>)
    25b6:	2188      	movs	r1, #136	; 0x88
    25b8:	4a1e      	ldr	r2, [pc, #120]	; (2634 <init_cmd_list+0x198>)
    25ba:	505a      	str	r2, [r3, r1]
    25bc:	4b18      	ldr	r3, [pc, #96]	; (2620 <init_cmd_list+0x184>)
    25be:	218c      	movs	r1, #140	; 0x8c
    25c0:	4a26      	ldr	r2, [pc, #152]	; (265c <init_cmd_list+0x1c0>)
    25c2:	505a      	str	r2, [r3, r1]
    25c4:	4b16      	ldr	r3, [pc, #88]	; (2620 <init_cmd_list+0x184>)
    25c6:	2290      	movs	r2, #144	; 0x90
    25c8:	5098      	str	r0, [r3, r2]
    25ca:	4b15      	ldr	r3, [pc, #84]	; (2620 <init_cmd_list+0x184>)
    25cc:	2194      	movs	r1, #148	; 0x94
    25ce:	4a15      	ldr	r2, [pc, #84]	; (2624 <init_cmd_list+0x188>)
    25d0:	505a      	str	r2, [r3, r1]
    25d2:	4b13      	ldr	r3, [pc, #76]	; (2620 <init_cmd_list+0x184>)
    25d4:	2198      	movs	r1, #152	; 0x98
    25d6:	4a22      	ldr	r2, [pc, #136]	; (2660 <init_cmd_list+0x1c4>)
    25d8:	505a      	str	r2, [r3, r1]
		{ CMD_CLEAR_ACT, "", "Turn the actuator (LED) off." } ,
		{ CMD_ADC_GET, "[port] [pin_num]", "Get the ADC value of an input pin." } ,
		{ CMD_MCU_TEMP, "", "Print the temperature reading of the on-board MCU temperature sensor." } ,
		{ CMD_I2C_SCAN, "", "Print out list of addresses of I2C devices on bus." }}
	};
}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46bd      	mov	sp, r7
    25de:	b003      	add	sp, #12
    25e0:	bc3c      	pop	{r2, r3, r4, r5}
    25e2:	4690      	mov	r8, r2
    25e4:	4699      	mov	r9, r3
    25e6:	46a2      	mov	sl, r4
    25e8:	46ab      	mov	fp, r5
    25ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ec:	20000000 	.word	0x20000000
    25f0:	20000004 	.word	0x20000004
    25f4:	20000008 	.word	0x20000008
    25f8:	2000000c 	.word	0x2000000c
    25fc:	20000010 	.word	0x20000010
    2600:	20000014 	.word	0x20000014
    2604:	20000018 	.word	0x20000018
    2608:	2000001c 	.word	0x2000001c
    260c:	20000020 	.word	0x20000020
    2610:	20000028 	.word	0x20000028
    2614:	2000002c 	.word	0x2000002c
    2618:	20000030 	.word	0x20000030
    261c:	20000034 	.word	0x20000034
    2620:	200002e0 	.word	0x200002e0
    2624:	0000b0d0 	.word	0x0000b0d0
    2628:	0000b0d4 	.word	0x0000b0d4
    262c:	0000b0ec 	.word	0x0000b0ec
    2630:	0000b114 	.word	0x0000b114
    2634:	0000b13c 	.word	0x0000b13c
    2638:	0000b150 	.word	0x0000b150
    263c:	0000b174 	.word	0x0000b174
    2640:	0000b198 	.word	0x0000b198
    2644:	0000b1c4 	.word	0x0000b1c4
    2648:	0000b1dc 	.word	0x0000b1dc
    264c:	0000b1f4 	.word	0x0000b1f4
    2650:	0000b218 	.word	0x0000b218
    2654:	0000b238 	.word	0x0000b238
    2658:	0000b254 	.word	0x0000b254
    265c:	0000b274 	.word	0x0000b274
    2660:	0000b298 	.word	0x0000b298

00002664 <disable_adc>:
	.ten_bit_address  = false,
	.high_speed       = false,
	.hs_master_code   = 0x00,
};

static void disable_adc(void) {
    2664:	b580      	push	{r7, lr}
    2666:	af00      	add	r7, sp, #0
	adc_disable(&adc_inst);
    2668:	4b03      	ldr	r3, [pc, #12]	; (2678 <disable_adc+0x14>)
    266a:	0018      	movs	r0, r3
    266c:	4b03      	ldr	r3, [pc, #12]	; (267c <disable_adc+0x18>)
    266e:	4798      	blx	r3
}
    2670:	46c0      	nop			; (mov r8, r8)
    2672:	46bd      	mov	sp, r7
    2674:	bd80      	pop	{r7, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	20000454 	.word	0x20000454
    267c:	000022bd 	.word	0x000022bd

00002680 <configure_adc>:

static void configure_adc(void) {
    2680:	b580      	push	{r7, lr}
    2682:	b08c      	sub	sp, #48	; 0x30
    2684:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    2686:	003b      	movs	r3, r7
    2688:	0018      	movs	r0, r3
    268a:	4b0e      	ldr	r3, [pc, #56]	; (26c4 <configure_adc+0x44>)
    268c:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    268e:	003b      	movs	r3, r7
    2690:	2201      	movs	r2, #1
    2692:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    2694:	003b      	movs	r3, r7
    2696:	2202      	movs	r2, #2
    2698:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    269a:	003b      	movs	r3, r7
    269c:	2280      	movs	r2, #128	; 0x80
    269e:	0092      	lsls	r2, r2, #2
    26a0:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    26a2:	003b      	movs	r3, r7
    26a4:	2200      	movs	r2, #0
    26a6:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    26a8:	003a      	movs	r2, r7
    26aa:	4907      	ldr	r1, [pc, #28]	; (26c8 <configure_adc+0x48>)
    26ac:	4b07      	ldr	r3, [pc, #28]	; (26cc <configure_adc+0x4c>)
    26ae:	0018      	movs	r0, r3
    26b0:	4b07      	ldr	r3, [pc, #28]	; (26d0 <configure_adc+0x50>)
    26b2:	4798      	blx	r3
	adc_enable(&adc_inst);
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <configure_adc+0x4c>)
    26b6:	0018      	movs	r0, r3
    26b8:	4b06      	ldr	r3, [pc, #24]	; (26d4 <configure_adc+0x54>)
    26ba:	4798      	blx	r3
}
    26bc:	46c0      	nop			; (mov r8, r8)
    26be:	46bd      	mov	sp, r7
    26c0:	b00c      	add	sp, #48	; 0x30
    26c2:	bd80      	pop	{r7, pc}
    26c4:	00000699 	.word	0x00000699
    26c8:	42004000 	.word	0x42004000
    26cc:	20000454 	.word	0x20000454
    26d0:	00000ce9 	.word	0x00000ce9
    26d4:	0000225d 	.word	0x0000225d

000026d8 <handle_user_input>:

// TODO: If arg1 or arg2 are non-digit, we need to throw an error.
void handle_user_input(char* input) {
    26d8:	b580      	push	{r7, lr}
    26da:	b09c      	sub	sp, #112	; 0x70
    26dc:	af00      	add	r7, sp, #0
    26de:	6078      	str	r0, [r7, #4]
	char* cmd = strtok(input, " ");
    26e0:	4ac5      	ldr	r2, [pc, #788]	; (29f8 <handle_user_input+0x320>)
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	0011      	movs	r1, r2
    26e6:	0018      	movs	r0, r3
    26e8:	4bc4      	ldr	r3, [pc, #784]	; (29fc <handle_user_input+0x324>)
    26ea:	4798      	blx	r3
    26ec:	0003      	movs	r3, r0
    26ee:	66fb      	str	r3, [r7, #108]	; 0x6c

	if(strcmp(CMD_HELP, cmd) == 0) { 
    26f0:	4bc3      	ldr	r3, [pc, #780]	; (2a00 <handle_user_input+0x328>)
    26f2:	681b      	ldr	r3, [r3, #0]
    26f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    26f6:	0011      	movs	r1, r2
    26f8:	0018      	movs	r0, r3
    26fa:	4bc2      	ldr	r3, [pc, #776]	; (2a04 <handle_user_input+0x32c>)
    26fc:	4798      	blx	r3
    26fe:	1e03      	subs	r3, r0, #0
    2700:	d102      	bne.n	2708 <handle_user_input+0x30>
		handle_help(); 
    2702:	4bc1      	ldr	r3, [pc, #772]	; (2a08 <handle_user_input+0x330>)
    2704:	4798      	blx	r3
    2706:	e24c      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
    2708:	4bc0      	ldr	r3, [pc, #768]	; (2a0c <handle_user_input+0x334>)
    270a:	681b      	ldr	r3, [r3, #0]
    270c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    270e:	0011      	movs	r1, r2
    2710:	0018      	movs	r0, r3
    2712:	4bbc      	ldr	r3, [pc, #752]	; (2a04 <handle_user_input+0x32c>)
    2714:	4798      	blx	r3
    2716:	1e03      	subs	r3, r0, #0
    2718:	d102      	bne.n	2720 <handle_user_input+0x48>
		handle_ver_bl(); 
    271a:	4bbd      	ldr	r3, [pc, #756]	; (2a10 <handle_user_input+0x338>)
    271c:	4798      	blx	r3
    271e:	e240      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
    2720:	4bbc      	ldr	r3, [pc, #752]	; (2a14 <handle_user_input+0x33c>)
    2722:	681b      	ldr	r3, [r3, #0]
    2724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2726:	0011      	movs	r1, r2
    2728:	0018      	movs	r0, r3
    272a:	4bb6      	ldr	r3, [pc, #728]	; (2a04 <handle_user_input+0x32c>)
    272c:	4798      	blx	r3
    272e:	1e03      	subs	r3, r0, #0
    2730:	d102      	bne.n	2738 <handle_user_input+0x60>
		handle_ver_app();
    2732:	4bb9      	ldr	r3, [pc, #740]	; (2a18 <handle_user_input+0x340>)
    2734:	4798      	blx	r3
    2736:	e234      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
    2738:	4bb8      	ldr	r3, [pc, #736]	; (2a1c <handle_user_input+0x344>)
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    273e:	0011      	movs	r1, r2
    2740:	0018      	movs	r0, r3
    2742:	4bb0      	ldr	r3, [pc, #704]	; (2a04 <handle_user_input+0x32c>)
    2744:	4798      	blx	r3
    2746:	1e03      	subs	r3, r0, #0
    2748:	d146      	bne.n	27d8 <handle_user_input+0x100>
		char* arg1 = strtok(NULL, " ");
    274a:	4bab      	ldr	r3, [pc, #684]	; (29f8 <handle_user_input+0x320>)
    274c:	0019      	movs	r1, r3
    274e:	2000      	movs	r0, #0
    2750:	4baa      	ldr	r3, [pc, #680]	; (29fc <handle_user_input+0x324>)
    2752:	4798      	blx	r3
    2754:	0003      	movs	r3, r0
    2756:	66bb      	str	r3, [r7, #104]	; 0x68
		char* arg2 = strtok(NULL, " ");
    2758:	4ba7      	ldr	r3, [pc, #668]	; (29f8 <handle_user_input+0x320>)
    275a:	0019      	movs	r1, r3
    275c:	2000      	movs	r0, #0
    275e:	4ba7      	ldr	r3, [pc, #668]	; (29fc <handle_user_input+0x324>)
    2760:	4798      	blx	r3
    2762:	0003      	movs	r3, r0
    2764:	667b      	str	r3, [r7, #100]	; 0x64
		
		if(arg1 == 0 || arg2 == 0) {
    2766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2768:	2b00      	cmp	r3, #0
    276a:	d002      	beq.n	2772 <handle_user_input+0x9a>
    276c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    276e:	2b00      	cmp	r3, #0
    2770:	d104      	bne.n	277c <handle_user_input+0xa4>
			printf("Not enough arguments! Try \"help\".\r\n");
    2772:	4bab      	ldr	r3, [pc, #684]	; (2a20 <handle_user_input+0x348>)
    2774:	0018      	movs	r0, r3
    2776:	4bab      	ldr	r3, [pc, #684]	; (2a24 <handle_user_input+0x34c>)
    2778:	4798      	blx	r3
			return;
    277a:	e212      	b.n	2ba2 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    277c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    277e:	663b      	str	r3, [r7, #96]	; 0x60
		int pin_num = atoi(arg2);
    2780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2782:	0018      	movs	r0, r3
    2784:	4ba8      	ldr	r3, [pc, #672]	; (2a28 <handle_user_input+0x350>)
    2786:	4798      	blx	r3
    2788:	0003      	movs	r3, r0
    278a:	65fb      	str	r3, [r7, #92]	; 0x5c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    278c:	4aa7      	ldr	r2, [pc, #668]	; (2a2c <handle_user_input+0x354>)
    278e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2790:	0011      	movs	r1, r2
    2792:	0018      	movs	r0, r3
    2794:	4b9b      	ldr	r3, [pc, #620]	; (2a04 <handle_user_input+0x32c>)
    2796:	4798      	blx	r3
    2798:	1e03      	subs	r3, r0, #0
    279a:	d00b      	beq.n	27b4 <handle_user_input+0xdc>
    279c:	4aa4      	ldr	r2, [pc, #656]	; (2a30 <handle_user_input+0x358>)
    279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    27a0:	0011      	movs	r1, r2
    27a2:	0018      	movs	r0, r3
    27a4:	4b97      	ldr	r3, [pc, #604]	; (2a04 <handle_user_input+0x32c>)
    27a6:	4798      	blx	r3
    27a8:	1e03      	subs	r3, r0, #0
    27aa:	d003      	beq.n	27b4 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    27ac:	4ba1      	ldr	r3, [pc, #644]	; (2a34 <handle_user_input+0x35c>)
    27ae:	0018      	movs	r0, r3
    27b0:	4b9c      	ldr	r3, [pc, #624]	; (2a24 <handle_user_input+0x34c>)
    27b2:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    27b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    27b6:	2b00      	cmp	r3, #0
    27b8:	dc06      	bgt.n	27c8 <handle_user_input+0xf0>
    27ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    27bc:	2b20      	cmp	r3, #32
    27be:	dd03      	ble.n	27c8 <handle_user_input+0xf0>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    27c0:	4b9d      	ldr	r3, [pc, #628]	; (2a38 <handle_user_input+0x360>)
    27c2:	0018      	movs	r0, r3
    27c4:	4b97      	ldr	r3, [pc, #604]	; (2a24 <handle_user_input+0x34c>)
    27c6:	4798      	blx	r3
		}
		
		handle_gpio_set(*port, pin_num);
    27c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    27ca:	781b      	ldrb	r3, [r3, #0]
    27cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    27ce:	0011      	movs	r1, r2
    27d0:	0018      	movs	r0, r3
    27d2:	4b9a      	ldr	r3, [pc, #616]	; (2a3c <handle_user_input+0x364>)
    27d4:	4798      	blx	r3
    27d6:	e1e4      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
    27d8:	4b99      	ldr	r3, [pc, #612]	; (2a40 <handle_user_input+0x368>)
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    27de:	0011      	movs	r1, r2
    27e0:	0018      	movs	r0, r3
    27e2:	4b88      	ldr	r3, [pc, #544]	; (2a04 <handle_user_input+0x32c>)
    27e4:	4798      	blx	r3
    27e6:	1e03      	subs	r3, r0, #0
    27e8:	d146      	bne.n	2878 <handle_user_input+0x1a0>
		char* arg1 = strtok(NULL, " ");
    27ea:	4b83      	ldr	r3, [pc, #524]	; (29f8 <handle_user_input+0x320>)
    27ec:	0019      	movs	r1, r3
    27ee:	2000      	movs	r0, #0
    27f0:	4b82      	ldr	r3, [pc, #520]	; (29fc <handle_user_input+0x324>)
    27f2:	4798      	blx	r3
    27f4:	0003      	movs	r3, r0
    27f6:	65bb      	str	r3, [r7, #88]	; 0x58
		char* arg2 = strtok(NULL, " ");
    27f8:	4b7f      	ldr	r3, [pc, #508]	; (29f8 <handle_user_input+0x320>)
    27fa:	0019      	movs	r1, r3
    27fc:	2000      	movs	r0, #0
    27fe:	4b7f      	ldr	r3, [pc, #508]	; (29fc <handle_user_input+0x324>)
    2800:	4798      	blx	r3
    2802:	0003      	movs	r3, r0
    2804:	657b      	str	r3, [r7, #84]	; 0x54
		
		if(arg1 == 0 || arg2 == 0) {
    2806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2808:	2b00      	cmp	r3, #0
    280a:	d002      	beq.n	2812 <handle_user_input+0x13a>
    280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    280e:	2b00      	cmp	r3, #0
    2810:	d104      	bne.n	281c <handle_user_input+0x144>
			printf("Not enough arguments! Try \"help\".\r\n");
    2812:	4b83      	ldr	r3, [pc, #524]	; (2a20 <handle_user_input+0x348>)
    2814:	0018      	movs	r0, r3
    2816:	4b83      	ldr	r3, [pc, #524]	; (2a24 <handle_user_input+0x34c>)
    2818:	4798      	blx	r3
			return;
    281a:	e1c2      	b.n	2ba2 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    281c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    281e:	653b      	str	r3, [r7, #80]	; 0x50
		int pin_num = atoi(arg2);
    2820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2822:	0018      	movs	r0, r3
    2824:	4b80      	ldr	r3, [pc, #512]	; (2a28 <handle_user_input+0x350>)
    2826:	4798      	blx	r3
    2828:	0003      	movs	r3, r0
    282a:	64fb      	str	r3, [r7, #76]	; 0x4c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    282c:	4a7f      	ldr	r2, [pc, #508]	; (2a2c <handle_user_input+0x354>)
    282e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2830:	0011      	movs	r1, r2
    2832:	0018      	movs	r0, r3
    2834:	4b73      	ldr	r3, [pc, #460]	; (2a04 <handle_user_input+0x32c>)
    2836:	4798      	blx	r3
    2838:	1e03      	subs	r3, r0, #0
    283a:	d00b      	beq.n	2854 <handle_user_input+0x17c>
    283c:	4a7c      	ldr	r2, [pc, #496]	; (2a30 <handle_user_input+0x358>)
    283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2840:	0011      	movs	r1, r2
    2842:	0018      	movs	r0, r3
    2844:	4b6f      	ldr	r3, [pc, #444]	; (2a04 <handle_user_input+0x32c>)
    2846:	4798      	blx	r3
    2848:	1e03      	subs	r3, r0, #0
    284a:	d003      	beq.n	2854 <handle_user_input+0x17c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    284c:	4b79      	ldr	r3, [pc, #484]	; (2a34 <handle_user_input+0x35c>)
    284e:	0018      	movs	r0, r3
    2850:	4b74      	ldr	r3, [pc, #464]	; (2a24 <handle_user_input+0x34c>)
    2852:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    2854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2856:	2b00      	cmp	r3, #0
    2858:	dc06      	bgt.n	2868 <handle_user_input+0x190>
    285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    285c:	2b20      	cmp	r3, #32
    285e:	dd03      	ble.n	2868 <handle_user_input+0x190>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    2860:	4b75      	ldr	r3, [pc, #468]	; (2a38 <handle_user_input+0x360>)
    2862:	0018      	movs	r0, r3
    2864:	4b6f      	ldr	r3, [pc, #444]	; (2a24 <handle_user_input+0x34c>)
    2866:	4798      	blx	r3
		}
		
		handle_gpio_clear(*port, pin_num); 
    2868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    286e:	0011      	movs	r1, r2
    2870:	0018      	movs	r0, r3
    2872:	4b74      	ldr	r3, [pc, #464]	; (2a44 <handle_user_input+0x36c>)
    2874:	4798      	blx	r3
    2876:	e194      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
    2878:	4b73      	ldr	r3, [pc, #460]	; (2a48 <handle_user_input+0x370>)
    287a:	681b      	ldr	r3, [r3, #0]
    287c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    287e:	0011      	movs	r1, r2
    2880:	0018      	movs	r0, r3
    2882:	4b60      	ldr	r3, [pc, #384]	; (2a04 <handle_user_input+0x32c>)
    2884:	4798      	blx	r3
    2886:	1e03      	subs	r3, r0, #0
    2888:	d146      	bne.n	2918 <handle_user_input+0x240>
		char* arg1 = strtok(NULL, " ");
    288a:	4b5b      	ldr	r3, [pc, #364]	; (29f8 <handle_user_input+0x320>)
    288c:	0019      	movs	r1, r3
    288e:	2000      	movs	r0, #0
    2890:	4b5a      	ldr	r3, [pc, #360]	; (29fc <handle_user_input+0x324>)
    2892:	4798      	blx	r3
    2894:	0003      	movs	r3, r0
    2896:	64bb      	str	r3, [r7, #72]	; 0x48
		char* arg2 = strtok(NULL, " ");
    2898:	4b57      	ldr	r3, [pc, #348]	; (29f8 <handle_user_input+0x320>)
    289a:	0019      	movs	r1, r3
    289c:	2000      	movs	r0, #0
    289e:	4b57      	ldr	r3, [pc, #348]	; (29fc <handle_user_input+0x324>)
    28a0:	4798      	blx	r3
    28a2:	0003      	movs	r3, r0
    28a4:	647b      	str	r3, [r7, #68]	; 0x44
		
		if(arg1 == 0 || arg2 == 0) {
    28a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    28a8:	2b00      	cmp	r3, #0
    28aa:	d002      	beq.n	28b2 <handle_user_input+0x1da>
    28ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    28ae:	2b00      	cmp	r3, #0
    28b0:	d104      	bne.n	28bc <handle_user_input+0x1e4>
			printf("Not enough arguments! Try \"help\".\r\n");
    28b2:	4b5b      	ldr	r3, [pc, #364]	; (2a20 <handle_user_input+0x348>)
    28b4:	0018      	movs	r0, r3
    28b6:	4b5b      	ldr	r3, [pc, #364]	; (2a24 <handle_user_input+0x34c>)
    28b8:	4798      	blx	r3
			return;
    28ba:	e172      	b.n	2ba2 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    28bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    28be:	643b      	str	r3, [r7, #64]	; 0x40
		int pin_num = atoi(arg2);
    28c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    28c2:	0018      	movs	r0, r3
    28c4:	4b58      	ldr	r3, [pc, #352]	; (2a28 <handle_user_input+0x350>)
    28c6:	4798      	blx	r3
    28c8:	0003      	movs	r3, r0
    28ca:	63fb      	str	r3, [r7, #60]	; 0x3c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    28cc:	4a57      	ldr	r2, [pc, #348]	; (2a2c <handle_user_input+0x354>)
    28ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    28d0:	0011      	movs	r1, r2
    28d2:	0018      	movs	r0, r3
    28d4:	4b4b      	ldr	r3, [pc, #300]	; (2a04 <handle_user_input+0x32c>)
    28d6:	4798      	blx	r3
    28d8:	1e03      	subs	r3, r0, #0
    28da:	d00b      	beq.n	28f4 <handle_user_input+0x21c>
    28dc:	4a54      	ldr	r2, [pc, #336]	; (2a30 <handle_user_input+0x358>)
    28de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    28e0:	0011      	movs	r1, r2
    28e2:	0018      	movs	r0, r3
    28e4:	4b47      	ldr	r3, [pc, #284]	; (2a04 <handle_user_input+0x32c>)
    28e6:	4798      	blx	r3
    28e8:	1e03      	subs	r3, r0, #0
    28ea:	d003      	beq.n	28f4 <handle_user_input+0x21c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    28ec:	4b51      	ldr	r3, [pc, #324]	; (2a34 <handle_user_input+0x35c>)
    28ee:	0018      	movs	r0, r3
    28f0:	4b4c      	ldr	r3, [pc, #304]	; (2a24 <handle_user_input+0x34c>)
    28f2:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    28f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28f6:	2b00      	cmp	r3, #0
    28f8:	dc06      	bgt.n	2908 <handle_user_input+0x230>
    28fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28fc:	2b20      	cmp	r3, #32
    28fe:	dd03      	ble.n	2908 <handle_user_input+0x230>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    2900:	4b4d      	ldr	r3, [pc, #308]	; (2a38 <handle_user_input+0x360>)
    2902:	0018      	movs	r0, r3
    2904:	4b47      	ldr	r3, [pc, #284]	; (2a24 <handle_user_input+0x34c>)
    2906:	4798      	blx	r3
		}

		handle_gpio_get(*port, pin_num);
    2908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    290e:	0011      	movs	r1, r2
    2910:	0018      	movs	r0, r3
    2912:	4b4e      	ldr	r3, [pc, #312]	; (2a4c <handle_user_input+0x374>)
    2914:	4798      	blx	r3
    2916:	e144      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MAC, cmd) == 0) { 
    2918:	4b4d      	ldr	r3, [pc, #308]	; (2a50 <handle_user_input+0x378>)
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    291e:	0011      	movs	r1, r2
    2920:	0018      	movs	r0, r3
    2922:	4b38      	ldr	r3, [pc, #224]	; (2a04 <handle_user_input+0x32c>)
    2924:	4798      	blx	r3
    2926:	1e03      	subs	r3, r0, #0
    2928:	d102      	bne.n	2930 <handle_user_input+0x258>
		handle_mac(); 
    292a:	4b4a      	ldr	r3, [pc, #296]	; (2a54 <handle_user_input+0x37c>)
    292c:	4798      	blx	r3
    292e:	e138      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_IP, cmd) == 0) { 
    2930:	4b49      	ldr	r3, [pc, #292]	; (2a58 <handle_user_input+0x380>)
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2936:	0011      	movs	r1, r2
    2938:	0018      	movs	r0, r3
    293a:	4b32      	ldr	r3, [pc, #200]	; (2a04 <handle_user_input+0x32c>)
    293c:	4798      	blx	r3
    293e:	1e03      	subs	r3, r0, #0
    2940:	d102      	bne.n	2948 <handle_user_input+0x270>
		handle_ip(); 
    2942:	4b46      	ldr	r3, [pc, #280]	; (2a5c <handle_user_input+0x384>)
    2944:	4798      	blx	r3
    2946:	e12c      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
    2948:	4b45      	ldr	r3, [pc, #276]	; (2a60 <handle_user_input+0x388>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    294e:	0011      	movs	r1, r2
    2950:	0018      	movs	r0, r3
    2952:	4b2c      	ldr	r3, [pc, #176]	; (2a04 <handle_user_input+0x32c>)
    2954:	4798      	blx	r3
    2956:	1e03      	subs	r3, r0, #0
    2958:	d12b      	bne.n	29b2 <handle_user_input+0x2da>
		char* arg1 = strtok(NULL, " ");
    295a:	4b27      	ldr	r3, [pc, #156]	; (29f8 <handle_user_input+0x320>)
    295c:	0019      	movs	r1, r3
    295e:	2000      	movs	r0, #0
    2960:	4b26      	ldr	r3, [pc, #152]	; (29fc <handle_user_input+0x324>)
    2962:	4798      	blx	r3
    2964:	0003      	movs	r3, r0
    2966:	63bb      	str	r3, [r7, #56]	; 0x38
		char* arg2 = strtok(NULL, " ");
    2968:	4b23      	ldr	r3, [pc, #140]	; (29f8 <handle_user_input+0x320>)
    296a:	0019      	movs	r1, r3
    296c:	2000      	movs	r0, #0
    296e:	4b23      	ldr	r3, [pc, #140]	; (29fc <handle_user_input+0x324>)
    2970:	4798      	blx	r3
    2972:	0003      	movs	r3, r0
    2974:	637b      	str	r3, [r7, #52]	; 0x34
		
		if(arg1 == 0 || arg2 == 0) {
    2976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2978:	2b00      	cmp	r3, #0
    297a:	d002      	beq.n	2982 <handle_user_input+0x2aa>
    297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    297e:	2b00      	cmp	r3, #0
    2980:	d104      	bne.n	298c <handle_user_input+0x2b4>
			printf("Not enough arguments! Try \"help\".\r\n");
    2982:	4b27      	ldr	r3, [pc, #156]	; (2a20 <handle_user_input+0x348>)
    2984:	0018      	movs	r0, r3
    2986:	4b27      	ldr	r3, [pc, #156]	; (2a24 <handle_user_input+0x34c>)
    2988:	4798      	blx	r3
			return;
    298a:	e10a      	b.n	2ba2 <handle_user_input+0x4ca>
		}
				
		int num_readings = atoi(arg1);
    298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    298e:	0018      	movs	r0, r3
    2990:	4b25      	ldr	r3, [pc, #148]	; (2a28 <handle_user_input+0x350>)
    2992:	4798      	blx	r3
    2994:	0003      	movs	r3, r0
    2996:	633b      	str	r3, [r7, #48]	; 0x30
		int interval_ms = atoi(arg2);
    2998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    299a:	0018      	movs	r0, r3
    299c:	4b22      	ldr	r3, [pc, #136]	; (2a28 <handle_user_input+0x350>)
    299e:	4798      	blx	r3
    29a0:	0003      	movs	r3, r0
    29a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		
		handle_read_gyro(num_readings, interval_ms); 
    29a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    29a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    29a8:	0011      	movs	r1, r2
    29aa:	0018      	movs	r0, r3
    29ac:	4b2d      	ldr	r3, [pc, #180]	; (2a64 <handle_user_input+0x38c>)
    29ae:	4798      	blx	r3
    29b0:	e0f7      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    29b2:	4b2d      	ldr	r3, [pc, #180]	; (2a68 <handle_user_input+0x390>)
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    29b8:	0011      	movs	r1, r2
    29ba:	0018      	movs	r0, r3
    29bc:	4b11      	ldr	r3, [pc, #68]	; (2a04 <handle_user_input+0x32c>)
    29be:	4798      	blx	r3
    29c0:	1e03      	subs	r3, r0, #0
    29c2:	d166      	bne.n	2a92 <handle_user_input+0x3ba>
		char* arg1 = strtok(NULL, " ");
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <handle_user_input+0x320>)
    29c6:	0019      	movs	r1, r3
    29c8:	2000      	movs	r0, #0
    29ca:	4b0c      	ldr	r3, [pc, #48]	; (29fc <handle_user_input+0x324>)
    29cc:	4798      	blx	r3
    29ce:	0003      	movs	r3, r0
    29d0:	62bb      	str	r3, [r7, #40]	; 0x28
		char* arg2 = strtok(NULL, " ");
    29d2:	4b09      	ldr	r3, [pc, #36]	; (29f8 <handle_user_input+0x320>)
    29d4:	0019      	movs	r1, r3
    29d6:	2000      	movs	r0, #0
    29d8:	4b08      	ldr	r3, [pc, #32]	; (29fc <handle_user_input+0x324>)
    29da:	4798      	blx	r3
    29dc:	0003      	movs	r3, r0
    29de:	627b      	str	r3, [r7, #36]	; 0x24
		
		if(arg1 == 0 || arg2 == 0) {
    29e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29e2:	2b00      	cmp	r3, #0
    29e4:	d002      	beq.n	29ec <handle_user_input+0x314>
    29e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29e8:	2b00      	cmp	r3, #0
    29ea:	d13f      	bne.n	2a6c <handle_user_input+0x394>
			printf("Not enough arguments! Try \"help\".\r\n");
    29ec:	4b0c      	ldr	r3, [pc, #48]	; (2a20 <handle_user_input+0x348>)
    29ee:	0018      	movs	r0, r3
    29f0:	4b0c      	ldr	r3, [pc, #48]	; (2a24 <handle_user_input+0x34c>)
    29f2:	4798      	blx	r3
			return;
    29f4:	e0d5      	b.n	2ba2 <handle_user_input+0x4ca>
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	0000b2e0 	.word	0x0000b2e0
    29fc:	00009371 	.word	0x00009371
    2a00:	20000000 	.word	0x20000000
    2a04:	0000935d 	.word	0x0000935d
    2a08:	00002c01 	.word	0x00002c01
    2a0c:	20000004 	.word	0x20000004
    2a10:	00002c79 	.word	0x00002c79
    2a14:	20000008 	.word	0x20000008
    2a18:	00002c9d 	.word	0x00002c9d
    2a1c:	2000000c 	.word	0x2000000c
    2a20:	0000b2e4 	.word	0x0000b2e4
    2a24:	000091a9 	.word	0x000091a9
    2a28:	0000903d 	.word	0x0000903d
    2a2c:	0000b308 	.word	0x0000b308
    2a30:	0000b30c 	.word	0x0000b30c
    2a34:	0000b310 	.word	0x0000b310
    2a38:	0000b334 	.word	0x0000b334
    2a3c:	00002cc1 	.word	0x00002cc1
    2a40:	20000010 	.word	0x20000010
    2a44:	00002d01 	.word	0x00002d01
    2a48:	20000014 	.word	0x20000014
    2a4c:	00002d41 	.word	0x00002d41
    2a50:	20000018 	.word	0x20000018
    2a54:	00002dd5 	.word	0x00002dd5
    2a58:	2000001c 	.word	0x2000001c
    2a5c:	00002e01 	.word	0x00002e01
    2a60:	20000020 	.word	0x20000020
    2a64:	00002e2d 	.word	0x00002e2d
    2a68:	20000024 	.word	0x20000024
		}
				
		int num_readings = atoi(arg1);
    2a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a6e:	0018      	movs	r0, r3
    2a70:	4b4d      	ldr	r3, [pc, #308]	; (2ba8 <handle_user_input+0x4d0>)
    2a72:	4798      	blx	r3
    2a74:	0003      	movs	r3, r0
    2a76:	623b      	str	r3, [r7, #32]
		int interval_ms = atoi(arg2);
    2a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b4a      	ldr	r3, [pc, #296]	; (2ba8 <handle_user_input+0x4d0>)
    2a7e:	4798      	blx	r3
    2a80:	0003      	movs	r3, r0
    2a82:	61fb      	str	r3, [r7, #28]
		
		handle_read_accel(num_readings, interval_ms); 
    2a84:	69fa      	ldr	r2, [r7, #28]
    2a86:	6a3b      	ldr	r3, [r7, #32]
    2a88:	0011      	movs	r1, r2
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b47      	ldr	r3, [pc, #284]	; (2bac <handle_user_input+0x4d4>)
    2a8e:	4798      	blx	r3
    2a90:	e087      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    2a92:	4b47      	ldr	r3, [pc, #284]	; (2bb0 <handle_user_input+0x4d8>)
    2a94:	681b      	ldr	r3, [r3, #0]
    2a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2a98:	0011      	movs	r1, r2
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b45      	ldr	r3, [pc, #276]	; (2bb4 <handle_user_input+0x4dc>)
    2a9e:	4798      	blx	r3
    2aa0:	1e03      	subs	r3, r0, #0
    2aa2:	d146      	bne.n	2b32 <handle_user_input+0x45a>
		char* arg1 = strtok(NULL, " ");
    2aa4:	4b44      	ldr	r3, [pc, #272]	; (2bb8 <handle_user_input+0x4e0>)
    2aa6:	0019      	movs	r1, r3
    2aa8:	2000      	movs	r0, #0
    2aaa:	4b44      	ldr	r3, [pc, #272]	; (2bbc <handle_user_input+0x4e4>)
    2aac:	4798      	blx	r3
    2aae:	0003      	movs	r3, r0
    2ab0:	61bb      	str	r3, [r7, #24]
		char* arg2 = strtok(NULL, " ");
    2ab2:	4b41      	ldr	r3, [pc, #260]	; (2bb8 <handle_user_input+0x4e0>)
    2ab4:	0019      	movs	r1, r3
    2ab6:	2000      	movs	r0, #0
    2ab8:	4b40      	ldr	r3, [pc, #256]	; (2bbc <handle_user_input+0x4e4>)
    2aba:	4798      	blx	r3
    2abc:	0003      	movs	r3, r0
    2abe:	617b      	str	r3, [r7, #20]
		
		if(arg1 == 0 || arg2 == 0) {
    2ac0:	69bb      	ldr	r3, [r7, #24]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d002      	beq.n	2acc <handle_user_input+0x3f4>
    2ac6:	697b      	ldr	r3, [r7, #20]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d104      	bne.n	2ad6 <handle_user_input+0x3fe>
			printf("Not enough arguments! Try \"help\".\r\n");
    2acc:	4b3c      	ldr	r3, [pc, #240]	; (2bc0 <handle_user_input+0x4e8>)
    2ace:	0018      	movs	r0, r3
    2ad0:	4b3c      	ldr	r3, [pc, #240]	; (2bc4 <handle_user_input+0x4ec>)
    2ad2:	4798      	blx	r3
			return;
    2ad4:	e065      	b.n	2ba2 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    2ad6:	69bb      	ldr	r3, [r7, #24]
    2ad8:	613b      	str	r3, [r7, #16]
		int pin_num = atoi(arg2);
    2ada:	697b      	ldr	r3, [r7, #20]
    2adc:	0018      	movs	r0, r3
    2ade:	4b32      	ldr	r3, [pc, #200]	; (2ba8 <handle_user_input+0x4d0>)
    2ae0:	4798      	blx	r3
    2ae2:	0003      	movs	r3, r0
    2ae4:	60fb      	str	r3, [r7, #12]

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    2ae6:	4a38      	ldr	r2, [pc, #224]	; (2bc8 <handle_user_input+0x4f0>)
    2ae8:	693b      	ldr	r3, [r7, #16]
    2aea:	0011      	movs	r1, r2
    2aec:	0018      	movs	r0, r3
    2aee:	4b31      	ldr	r3, [pc, #196]	; (2bb4 <handle_user_input+0x4dc>)
    2af0:	4798      	blx	r3
    2af2:	1e03      	subs	r3, r0, #0
    2af4:	d00b      	beq.n	2b0e <handle_user_input+0x436>
    2af6:	4a35      	ldr	r2, [pc, #212]	; (2bcc <handle_user_input+0x4f4>)
    2af8:	693b      	ldr	r3, [r7, #16]
    2afa:	0011      	movs	r1, r2
    2afc:	0018      	movs	r0, r3
    2afe:	4b2d      	ldr	r3, [pc, #180]	; (2bb4 <handle_user_input+0x4dc>)
    2b00:	4798      	blx	r3
    2b02:	1e03      	subs	r3, r0, #0
    2b04:	d003      	beq.n	2b0e <handle_user_input+0x436>
			printf("Enter a valid Port! Try \"help\".\r\n");
    2b06:	4b32      	ldr	r3, [pc, #200]	; (2bd0 <handle_user_input+0x4f8>)
    2b08:	0018      	movs	r0, r3
    2b0a:	4b2e      	ldr	r3, [pc, #184]	; (2bc4 <handle_user_input+0x4ec>)
    2b0c:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    2b0e:	68fb      	ldr	r3, [r7, #12]
    2b10:	2b00      	cmp	r3, #0
    2b12:	dc06      	bgt.n	2b22 <handle_user_input+0x44a>
    2b14:	68fb      	ldr	r3, [r7, #12]
    2b16:	2b20      	cmp	r3, #32
    2b18:	dd03      	ble.n	2b22 <handle_user_input+0x44a>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    2b1a:	4b2e      	ldr	r3, [pc, #184]	; (2bd4 <handle_user_input+0x4fc>)
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b29      	ldr	r3, [pc, #164]	; (2bc4 <handle_user_input+0x4ec>)
    2b20:	4798      	blx	r3
		}
		
		handle_adc_get(port, pin_num); 
    2b22:	693b      	ldr	r3, [r7, #16]
    2b24:	b2db      	uxtb	r3, r3
    2b26:	68fa      	ldr	r2, [r7, #12]
    2b28:	0011      	movs	r1, r2
    2b2a:	0018      	movs	r0, r3
    2b2c:	4b2a      	ldr	r3, [pc, #168]	; (2bd8 <handle_user_input+0x500>)
    2b2e:	4798      	blx	r3
    2b30:	e037      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    2b32:	4b2a      	ldr	r3, [pc, #168]	; (2bdc <handle_user_input+0x504>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2b38:	0011      	movs	r1, r2
    2b3a:	0018      	movs	r0, r3
    2b3c:	4b1d      	ldr	r3, [pc, #116]	; (2bb4 <handle_user_input+0x4dc>)
    2b3e:	4798      	blx	r3
    2b40:	1e03      	subs	r3, r0, #0
    2b42:	d102      	bne.n	2b4a <handle_user_input+0x472>
		handle_mcu_temp(); 
    2b44:	4b26      	ldr	r3, [pc, #152]	; (2be0 <handle_user_input+0x508>)
    2b46:	4798      	blx	r3
    2b48:	e02b      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    2b4a:	4b26      	ldr	r3, [pc, #152]	; (2be4 <handle_user_input+0x50c>)
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2b50:	0011      	movs	r1, r2
    2b52:	0018      	movs	r0, r3
    2b54:	4b17      	ldr	r3, [pc, #92]	; (2bb4 <handle_user_input+0x4dc>)
    2b56:	4798      	blx	r3
    2b58:	1e03      	subs	r3, r0, #0
    2b5a:	d102      	bne.n	2b62 <handle_user_input+0x48a>
		handle_i2c_scan(); 
    2b5c:	4b22      	ldr	r3, [pc, #136]	; (2be8 <handle_user_input+0x510>)
    2b5e:	4798      	blx	r3
    2b60:	e01f      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_SET_ACT, cmd) == 0) {
    2b62:	4b22      	ldr	r3, [pc, #136]	; (2bec <handle_user_input+0x514>)
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2b68:	0011      	movs	r1, r2
    2b6a:	0018      	movs	r0, r3
    2b6c:	4b11      	ldr	r3, [pc, #68]	; (2bb4 <handle_user_input+0x4dc>)
    2b6e:	4798      	blx	r3
    2b70:	1e03      	subs	r3, r0, #0
    2b72:	d104      	bne.n	2b7e <handle_user_input+0x4a6>
		// Just a GPIO.
		handle_gpio_set('B', PIN_PB02);	
    2b74:	2122      	movs	r1, #34	; 0x22
    2b76:	2042      	movs	r0, #66	; 0x42
    2b78:	4b1d      	ldr	r3, [pc, #116]	; (2bf0 <handle_user_input+0x518>)
    2b7a:	4798      	blx	r3
    2b7c:	e011      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_CLEAR_ACT, cmd) == 0) {
    2b7e:	4b1d      	ldr	r3, [pc, #116]	; (2bf4 <handle_user_input+0x51c>)
    2b80:	681b      	ldr	r3, [r3, #0]
    2b82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2b84:	0011      	movs	r1, r2
    2b86:	0018      	movs	r0, r3
    2b88:	4b0a      	ldr	r3, [pc, #40]	; (2bb4 <handle_user_input+0x4dc>)
    2b8a:	4798      	blx	r3
    2b8c:	1e03      	subs	r3, r0, #0
    2b8e:	d104      	bne.n	2b9a <handle_user_input+0x4c2>
		// Just a GPIO.		
		handle_gpio_clear('B', PIN_PB02);	
    2b90:	2122      	movs	r1, #34	; 0x22
    2b92:	2042      	movs	r0, #66	; 0x42
    2b94:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <handle_user_input+0x520>)
    2b96:	4798      	blx	r3
    2b98:	e003      	b.n	2ba2 <handle_user_input+0x4ca>
	}
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    2b9a:	4b18      	ldr	r3, [pc, #96]	; (2bfc <handle_user_input+0x524>)
    2b9c:	0018      	movs	r0, r3
    2b9e:	4b09      	ldr	r3, [pc, #36]	; (2bc4 <handle_user_input+0x4ec>)
    2ba0:	4798      	blx	r3
	}
}
    2ba2:	46bd      	mov	sp, r7
    2ba4:	b01c      	add	sp, #112	; 0x70
    2ba6:	bd80      	pop	{r7, pc}
    2ba8:	0000903d 	.word	0x0000903d
    2bac:	000030f1 	.word	0x000030f1
    2bb0:	20000030 	.word	0x20000030
    2bb4:	0000935d 	.word	0x0000935d
    2bb8:	0000b2e0 	.word	0x0000b2e0
    2bbc:	00009371 	.word	0x00009371
    2bc0:	0000b2e4 	.word	0x0000b2e4
    2bc4:	000091a9 	.word	0x000091a9
    2bc8:	0000b308 	.word	0x0000b308
    2bcc:	0000b30c 	.word	0x0000b30c
    2bd0:	0000b310 	.word	0x0000b310
    2bd4:	0000b334 	.word	0x0000b334
    2bd8:	00003115 	.word	0x00003115
    2bdc:	20000034 	.word	0x20000034
    2be0:	0000317d 	.word	0x0000317d
    2be4:	20000038 	.word	0x20000038
    2be8:	000031f1 	.word	0x000031f1
    2bec:	20000028 	.word	0x20000028
    2bf0:	00002cc1 	.word	0x00002cc1
    2bf4:	2000002c 	.word	0x2000002c
    2bf8:	00002d01 	.word	0x00002d01
    2bfc:	0000b35c 	.word	0x0000b35c

00002c00 <handle_help>:

void handle_help() {
    2c00:	b5b0      	push	{r4, r5, r7, lr}
    2c02:	b082      	sub	sp, #8
    2c04:	af00      	add	r7, sp, #0
	printf("Command List:\r\n");
    2c06:	4b17      	ldr	r3, [pc, #92]	; (2c64 <handle_help+0x64>)
    2c08:	0018      	movs	r0, r3
    2c0a:	4b17      	ldr	r3, [pc, #92]	; (2c68 <handle_help+0x68>)
    2c0c:	4798      	blx	r3
	for(int i = 0; i < OPTION_COUNT; i++) {
    2c0e:	2300      	movs	r3, #0
    2c10:	607b      	str	r3, [r7, #4]
    2c12:	e020      	b.n	2c56 <handle_help+0x56>
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
    2c14:	4915      	ldr	r1, [pc, #84]	; (2c6c <handle_help+0x6c>)
    2c16:	687a      	ldr	r2, [r7, #4]
    2c18:	0013      	movs	r3, r2
    2c1a:	005b      	lsls	r3, r3, #1
    2c1c:	189b      	adds	r3, r3, r2
    2c1e:	009b      	lsls	r3, r3, #2
    2c20:	585c      	ldr	r4, [r3, r1]
    2c22:	4912      	ldr	r1, [pc, #72]	; (2c6c <handle_help+0x6c>)
    2c24:	687a      	ldr	r2, [r7, #4]
    2c26:	0013      	movs	r3, r2
    2c28:	005b      	lsls	r3, r3, #1
    2c2a:	189b      	adds	r3, r3, r2
    2c2c:	009b      	lsls	r3, r3, #2
    2c2e:	18cb      	adds	r3, r1, r3
    2c30:	3304      	adds	r3, #4
    2c32:	681d      	ldr	r5, [r3, #0]
    2c34:	490d      	ldr	r1, [pc, #52]	; (2c6c <handle_help+0x6c>)
    2c36:	687a      	ldr	r2, [r7, #4]
    2c38:	0013      	movs	r3, r2
    2c3a:	005b      	lsls	r3, r3, #1
    2c3c:	189b      	adds	r3, r3, r2
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	18cb      	adds	r3, r1, r3
    2c42:	3308      	adds	r3, #8
    2c44:	681b      	ldr	r3, [r3, #0]
    2c46:	480a      	ldr	r0, [pc, #40]	; (2c70 <handle_help+0x70>)
    2c48:	002a      	movs	r2, r5
    2c4a:	0021      	movs	r1, r4
    2c4c:	4c09      	ldr	r4, [pc, #36]	; (2c74 <handle_help+0x74>)
    2c4e:	47a0      	blx	r4
	for(int i = 0; i < OPTION_COUNT; i++) {
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	3301      	adds	r3, #1
    2c54:	607b      	str	r3, [r7, #4]
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	2b0c      	cmp	r3, #12
    2c5a:	dddb      	ble.n	2c14 <handle_help+0x14>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
    2c5c:	46c0      	nop			; (mov r8, r8)
    2c5e:	46bd      	mov	sp, r7
    2c60:	b002      	add	sp, #8
    2c62:	bdb0      	pop	{r4, r5, r7, pc}
    2c64:	0000b39c 	.word	0x0000b39c
    2c68:	000091a9 	.word	0x000091a9
    2c6c:	200002e0 	.word	0x200002e0
    2c70:	0000b3ac 	.word	0x0000b3ac
    2c74:	000090b5 	.word	0x000090b5

00002c78 <handle_ver_bl>:


void handle_ver_bl() {
    2c78:	b580      	push	{r7, lr}
    2c7a:	af00      	add	r7, sp, #0
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
    2c7c:	4a04      	ldr	r2, [pc, #16]	; (2c90 <handle_ver_bl+0x18>)
    2c7e:	4b05      	ldr	r3, [pc, #20]	; (2c94 <handle_ver_bl+0x1c>)
    2c80:	0011      	movs	r1, r2
    2c82:	0018      	movs	r0, r3
    2c84:	4b04      	ldr	r3, [pc, #16]	; (2c98 <handle_ver_bl+0x20>)
    2c86:	4798      	blx	r3
}
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46bd      	mov	sp, r7
    2c8c:	bd80      	pop	{r7, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	0000b3bc 	.word	0x0000b3bc
    2c94:	0000b3c4 	.word	0x0000b3c4
    2c98:	000090b5 	.word	0x000090b5

00002c9c <handle_ver_app>:

void handle_ver_app() {
    2c9c:	b580      	push	{r7, lr}
    2c9e:	af00      	add	r7, sp, #0
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
    2ca0:	4a04      	ldr	r2, [pc, #16]	; (2cb4 <handle_ver_app+0x18>)
    2ca2:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <handle_ver_app+0x1c>)
    2ca4:	0011      	movs	r1, r2
    2ca6:	0018      	movs	r0, r3
    2ca8:	4b04      	ldr	r3, [pc, #16]	; (2cbc <handle_ver_app+0x20>)
    2caa:	4798      	blx	r3
}
    2cac:	46c0      	nop			; (mov r8, r8)
    2cae:	46bd      	mov	sp, r7
    2cb0:	bd80      	pop	{r7, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	0000b3bc 	.word	0x0000b3bc
    2cb8:	0000b3e0 	.word	0x0000b3e0
    2cbc:	000090b5 	.word	0x000090b5

00002cc0 <handle_gpio_set>:

void handle_gpio_set(char port, int pin_num) {
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b084      	sub	sp, #16
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	0002      	movs	r2, r0
    2cc8:	6039      	str	r1, [r7, #0]
    2cca:	1dfb      	adds	r3, r7, #7
    2ccc:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    2cce:	230f      	movs	r3, #15
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	2222      	movs	r2, #34	; 0x22
    2cd4:	701a      	strb	r2, [r3, #0]
	bool level = HIGH;
    2cd6:	230e      	movs	r3, #14
    2cd8:	18fb      	adds	r3, r7, r3
    2cda:	2201      	movs	r2, #1
    2cdc:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    2cde:	230e      	movs	r3, #14
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	781a      	ldrb	r2, [r3, #0]
    2ce4:	230f      	movs	r3, #15
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	0011      	movs	r1, r2
    2cec:	0018      	movs	r0, r3
    2cee:	4b03      	ldr	r3, [pc, #12]	; (2cfc <handle_gpio_set+0x3c>)
    2cf0:	4798      	blx	r3
	
	//printf("Not implemented yet!\r\n");
}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	46bd      	mov	sp, r7
    2cf6:	b004      	add	sp, #16
    2cf8:	bd80      	pop	{r7, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00002449 	.word	0x00002449

00002d00 <handle_gpio_clear>:

void handle_gpio_clear(char port, int pin_num) {
    2d00:	b580      	push	{r7, lr}
    2d02:	b084      	sub	sp, #16
    2d04:	af00      	add	r7, sp, #0
    2d06:	0002      	movs	r2, r0
    2d08:	6039      	str	r1, [r7, #0]
    2d0a:	1dfb      	adds	r3, r7, #7
    2d0c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    2d0e:	230f      	movs	r3, #15
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	2222      	movs	r2, #34	; 0x22
    2d14:	701a      	strb	r2, [r3, #0]
	bool level = LOW;
    2d16:	230e      	movs	r3, #14
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	2200      	movs	r2, #0
    2d1c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    2d1e:	230e      	movs	r3, #14
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	781a      	ldrb	r2, [r3, #0]
    2d24:	230f      	movs	r3, #15
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	781b      	ldrb	r3, [r3, #0]
    2d2a:	0011      	movs	r1, r2
    2d2c:	0018      	movs	r0, r3
    2d2e:	4b03      	ldr	r3, [pc, #12]	; (2d3c <handle_gpio_clear+0x3c>)
    2d30:	4798      	blx	r3
		
	//printf("Not implemented yet!\r\n");
}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	46bd      	mov	sp, r7
    2d36:	b004      	add	sp, #16
    2d38:	bd80      	pop	{r7, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	00002449 	.word	0x00002449

00002d40 <handle_gpio_get>:

void handle_gpio_get(char port, int pin_num) {
    2d40:	b590      	push	{r4, r7, lr}
    2d42:	b085      	sub	sp, #20
    2d44:	af00      	add	r7, sp, #0
    2d46:	0002      	movs	r2, r0
    2d48:	6039      	str	r1, [r7, #0]
    2d4a:	1dfb      	adds	r3, r7, #7
    2d4c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
		uint8_t pin = PIN_PB02;
    2d4e:	230e      	movs	r3, #14
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	2222      	movs	r2, #34	; 0x22
    2d54:	701a      	strb	r2, [r3, #0]
		bool level;

	// Hard-coded testing
	if (port == "B" && pin_num == 2){
    2d56:	1dfb      	adds	r3, r7, #7
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	001a      	movs	r2, r3
    2d5c:	4b19      	ldr	r3, [pc, #100]	; (2dc4 <handle_gpio_get+0x84>)
    2d5e:	429a      	cmp	r2, r3
    2d60:	d10d      	bne.n	2d7e <handle_gpio_get+0x3e>
    2d62:	683b      	ldr	r3, [r7, #0]
    2d64:	2b02      	cmp	r3, #2
    2d66:	d10a      	bne.n	2d7e <handle_gpio_get+0x3e>
		level = port_pin_get_output_level(pin);
    2d68:	230f      	movs	r3, #15
    2d6a:	18fc      	adds	r4, r7, r3
    2d6c:	230e      	movs	r3, #14
    2d6e:	18fb      	adds	r3, r7, r3
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	0018      	movs	r0, r3
    2d74:	4b14      	ldr	r3, [pc, #80]	; (2dc8 <handle_gpio_get+0x88>)
    2d76:	4798      	blx	r3
    2d78:	0003      	movs	r3, r0
    2d7a:	7023      	strb	r3, [r4, #0]
    2d7c:	e016      	b.n	2dac <handle_gpio_get+0x6c>
	}

	else if (port == "B" && pin_num == 3){
    2d7e:	1dfb      	adds	r3, r7, #7
    2d80:	781b      	ldrb	r3, [r3, #0]
    2d82:	001a      	movs	r2, r3
    2d84:	4b0f      	ldr	r3, [pc, #60]	; (2dc4 <handle_gpio_get+0x84>)
    2d86:	429a      	cmp	r2, r3
    2d88:	d110      	bne.n	2dac <handle_gpio_get+0x6c>
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	2b03      	cmp	r3, #3
    2d8e:	d10d      	bne.n	2dac <handle_gpio_get+0x6c>
		uint8_t pin = PIN_PB03;
    2d90:	230d      	movs	r3, #13
    2d92:	18fb      	adds	r3, r7, r3
    2d94:	2223      	movs	r2, #35	; 0x23
    2d96:	701a      	strb	r2, [r3, #0]
		level = port_pin_get_output_level(pin);
    2d98:	230f      	movs	r3, #15
    2d9a:	18fc      	adds	r4, r7, r3
    2d9c:	230d      	movs	r3, #13
    2d9e:	18fb      	adds	r3, r7, r3
    2da0:	781b      	ldrb	r3, [r3, #0]
    2da2:	0018      	movs	r0, r3
    2da4:	4b08      	ldr	r3, [pc, #32]	; (2dc8 <handle_gpio_get+0x88>)
    2da6:	4798      	blx	r3
    2da8:	0003      	movs	r3, r0
    2daa:	7023      	strb	r3, [r4, #0]
	}
	
	printf("The level set is %d\r\n", level);
    2dac:	230f      	movs	r3, #15
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	781a      	ldrb	r2, [r3, #0]
    2db2:	4b06      	ldr	r3, [pc, #24]	; (2dcc <handle_gpio_get+0x8c>)
    2db4:	0011      	movs	r1, r2
    2db6:	0018      	movs	r0, r3
    2db8:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <handle_gpio_get+0x90>)
    2dba:	4798      	blx	r3

}
    2dbc:	46c0      	nop			; (mov r8, r8)
    2dbe:	46bd      	mov	sp, r7
    2dc0:	b005      	add	sp, #20
    2dc2:	bd90      	pop	{r4, r7, pc}
    2dc4:	0000b30c 	.word	0x0000b30c
    2dc8:	00002405 	.word	0x00002405
    2dcc:	0000b3fc 	.word	0x0000b3fc
    2dd0:	000090b5 	.word	0x000090b5

00002dd4 <handle_mac>:

void handle_mac() {
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b082      	sub	sp, #8
    2dd8:	af00      	add	r7, sp, #0
	char* dummy_mac = "01:23:45:67:89:ab";
    2dda:	4b06      	ldr	r3, [pc, #24]	; (2df4 <handle_mac+0x20>)
    2ddc:	607b      	str	r3, [r7, #4]
	printf("MAC Address: %s\r\n", dummy_mac);
    2dde:	687a      	ldr	r2, [r7, #4]
    2de0:	4b05      	ldr	r3, [pc, #20]	; (2df8 <handle_mac+0x24>)
    2de2:	0011      	movs	r1, r2
    2de4:	0018      	movs	r0, r3
    2de6:	4b05      	ldr	r3, [pc, #20]	; (2dfc <handle_mac+0x28>)
    2de8:	4798      	blx	r3
}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	46bd      	mov	sp, r7
    2dee:	b002      	add	sp, #8
    2df0:	bd80      	pop	{r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	0000b414 	.word	0x0000b414
    2df8:	0000b428 	.word	0x0000b428
    2dfc:	000090b5 	.word	0x000090b5

00002e00 <handle_ip>:

void handle_ip() {
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
	char* dummy_ip = "255.255.255.255";
    2e06:	4b06      	ldr	r3, [pc, #24]	; (2e20 <handle_ip+0x20>)
    2e08:	607b      	str	r3, [r7, #4]
	printf("IP Address: %s\r\n", dummy_ip);
    2e0a:	687a      	ldr	r2, [r7, #4]
    2e0c:	4b05      	ldr	r3, [pc, #20]	; (2e24 <handle_ip+0x24>)
    2e0e:	0011      	movs	r1, r2
    2e10:	0018      	movs	r0, r3
    2e12:	4b05      	ldr	r3, [pc, #20]	; (2e28 <handle_ip+0x28>)
    2e14:	4798      	blx	r3
}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	46bd      	mov	sp, r7
    2e1a:	b002      	add	sp, #8
    2e1c:	bd80      	pop	{r7, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	0000b43c 	.word	0x0000b43c
    2e24:	0000b44c 	.word	0x0000b44c
    2e28:	000090b5 	.word	0x000090b5

00002e2c <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
    2e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e2e:	b08d      	sub	sp, #52	; 0x34
    2e30:	af04      	add	r7, sp, #16
    2e32:	6078      	str	r0, [r7, #4]
    2e34:	6039      	str	r1, [r7, #0]
	enum status_code i2c_status;
	
	for(int i = 0; i < num_readings; i++) {
    2e36:	2300      	movs	r3, #0
    2e38:	61fb      	str	r3, [r7, #28]
    2e3a:	e137      	b.n	30ac <handle_read_gyro+0x280>
		// Wake up the device
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2e3c:	4ba0      	ldr	r3, [pc, #640]	; (30c0 <handle_read_gyro+0x294>)
    2e3e:	2268      	movs	r2, #104	; 0x68
    2e40:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2e42:	4b9f      	ldr	r3, [pc, #636]	; (30c0 <handle_read_gyro+0x294>)
    2e44:	2201      	movs	r2, #1
    2e46:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2e48:	4b9e      	ldr	r3, [pc, #632]	; (30c4 <handle_read_gyro+0x298>)
    2e4a:	226b      	movs	r2, #107	; 0x6b
    2e4c:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2e4e:	4b9c      	ldr	r3, [pc, #624]	; (30c0 <handle_read_gyro+0x294>)
    2e50:	4a9c      	ldr	r2, [pc, #624]	; (30c4 <handle_read_gyro+0x298>)
    2e52:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2e54:	4b9c      	ldr	r3, [pc, #624]	; (30c8 <handle_read_gyro+0x29c>)
    2e56:	2268      	movs	r2, #104	; 0x68
    2e58:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2e5a:	231b      	movs	r3, #27
    2e5c:	18fc      	adds	r4, r7, r3
    2e5e:	4a98      	ldr	r2, [pc, #608]	; (30c0 <handle_read_gyro+0x294>)
    2e60:	4b9a      	ldr	r3, [pc, #616]	; (30cc <handle_read_gyro+0x2a0>)
    2e62:	0011      	movs	r1, r2
    2e64:	0018      	movs	r0, r3
    2e66:	4b9a      	ldr	r3, [pc, #616]	; (30d0 <handle_read_gyro+0x2a4>)
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
    2e6c:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2e6e:	231b      	movs	r3, #27
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	781b      	ldrb	r3, [r3, #0]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d109      	bne.n	2e8c <handle_read_gyro+0x60>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2e78:	231b      	movs	r3, #27
    2e7a:	18fc      	adds	r4, r7, r3
    2e7c:	4a92      	ldr	r2, [pc, #584]	; (30c8 <handle_read_gyro+0x29c>)
    2e7e:	4b93      	ldr	r3, [pc, #588]	; (30cc <handle_read_gyro+0x2a0>)
    2e80:	0011      	movs	r1, r2
    2e82:	0018      	movs	r0, r3
    2e84:	4b93      	ldr	r3, [pc, #588]	; (30d4 <handle_read_gyro+0x2a8>)
    2e86:	4798      	blx	r3
    2e88:	0003      	movs	r3, r0
    2e8a:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    2e8c:	4b8f      	ldr	r3, [pc, #572]	; (30cc <handle_read_gyro+0x2a0>)
    2e8e:	0018      	movs	r0, r3
    2e90:	4b91      	ldr	r3, [pc, #580]	; (30d8 <handle_read_gyro+0x2ac>)
    2e92:	4798      	blx	r3
	
		rd_packet.data[0] = rd_packet.data[0] & (0 << 6);
    2e94:	4b8c      	ldr	r3, [pc, #560]	; (30c8 <handle_read_gyro+0x29c>)
    2e96:	685b      	ldr	r3, [r3, #4]
    2e98:	2200      	movs	r2, #0
    2e9a:	701a      	strb	r2, [r3, #0]
	
		// Write new sleep bit (off)
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2e9c:	4b88      	ldr	r3, [pc, #544]	; (30c0 <handle_read_gyro+0x294>)
    2e9e:	2268      	movs	r2, #104	; 0x68
    2ea0:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    2ea2:	4b87      	ldr	r3, [pc, #540]	; (30c0 <handle_read_gyro+0x294>)
    2ea4:	2202      	movs	r2, #2
    2ea6:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2ea8:	4b86      	ldr	r3, [pc, #536]	; (30c4 <handle_read_gyro+0x298>)
    2eaa:	226b      	movs	r2, #107	; 0x6b
    2eac:	701a      	strb	r2, [r3, #0]
		wr_buffer[1]          = rd_packet.data[0];
    2eae:	4b86      	ldr	r3, [pc, #536]	; (30c8 <handle_read_gyro+0x29c>)
    2eb0:	685b      	ldr	r3, [r3, #4]
    2eb2:	781a      	ldrb	r2, [r3, #0]
    2eb4:	4b83      	ldr	r3, [pc, #524]	; (30c4 <handle_read_gyro+0x298>)
    2eb6:	705a      	strb	r2, [r3, #1]
		wr_packet.data        = wr_buffer;
    2eb8:	4b81      	ldr	r3, [pc, #516]	; (30c0 <handle_read_gyro+0x294>)
    2eba:	4a82      	ldr	r2, [pc, #520]	; (30c4 <handle_read_gyro+0x298>)
    2ebc:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2ebe:	4b82      	ldr	r3, [pc, #520]	; (30c8 <handle_read_gyro+0x29c>)
    2ec0:	2268      	movs	r2, #104	; 0x68
    2ec2:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2ec4:	231b      	movs	r3, #27
    2ec6:	18fc      	adds	r4, r7, r3
    2ec8:	4a7d      	ldr	r2, [pc, #500]	; (30c0 <handle_read_gyro+0x294>)
    2eca:	4b80      	ldr	r3, [pc, #512]	; (30cc <handle_read_gyro+0x2a0>)
    2ecc:	0011      	movs	r1, r2
    2ece:	0018      	movs	r0, r3
    2ed0:	4b7f      	ldr	r3, [pc, #508]	; (30d0 <handle_read_gyro+0x2a4>)
    2ed2:	4798      	blx	r3
    2ed4:	0003      	movs	r3, r0
    2ed6:	7023      	strb	r3, [r4, #0]
		i2c_master_send_stop(&i2c_master_instance);
    2ed8:	4b7c      	ldr	r3, [pc, #496]	; (30cc <handle_read_gyro+0x2a0>)
    2eda:	0018      	movs	r0, r3
    2edc:	4b7e      	ldr	r3, [pc, #504]	; (30d8 <handle_read_gyro+0x2ac>)
    2ede:	4798      	blx	r3
	
		// Read back the Power management Register 
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2ee0:	4b77      	ldr	r3, [pc, #476]	; (30c0 <handle_read_gyro+0x294>)
    2ee2:	2268      	movs	r2, #104	; 0x68
    2ee4:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2ee6:	4b76      	ldr	r3, [pc, #472]	; (30c0 <handle_read_gyro+0x294>)
    2ee8:	2201      	movs	r2, #1
    2eea:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    2eec:	4b75      	ldr	r3, [pc, #468]	; (30c4 <handle_read_gyro+0x298>)
    2eee:	226b      	movs	r2, #107	; 0x6b
    2ef0:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2ef2:	4b73      	ldr	r3, [pc, #460]	; (30c0 <handle_read_gyro+0x294>)
    2ef4:	4a73      	ldr	r2, [pc, #460]	; (30c4 <handle_read_gyro+0x298>)
    2ef6:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2ef8:	4b73      	ldr	r3, [pc, #460]	; (30c8 <handle_read_gyro+0x29c>)
    2efa:	2268      	movs	r2, #104	; 0x68
    2efc:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2efe:	231b      	movs	r3, #27
    2f00:	18fc      	adds	r4, r7, r3
    2f02:	4a6f      	ldr	r2, [pc, #444]	; (30c0 <handle_read_gyro+0x294>)
    2f04:	4b71      	ldr	r3, [pc, #452]	; (30cc <handle_read_gyro+0x2a0>)
    2f06:	0011      	movs	r1, r2
    2f08:	0018      	movs	r0, r3
    2f0a:	4b71      	ldr	r3, [pc, #452]	; (30d0 <handle_read_gyro+0x2a4>)
    2f0c:	4798      	blx	r3
    2f0e:	0003      	movs	r3, r0
    2f10:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2f12:	231b      	movs	r3, #27
    2f14:	18fb      	adds	r3, r7, r3
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d109      	bne.n	2f30 <handle_read_gyro+0x104>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2f1c:	231b      	movs	r3, #27
    2f1e:	18fc      	adds	r4, r7, r3
    2f20:	4a69      	ldr	r2, [pc, #420]	; (30c8 <handle_read_gyro+0x29c>)
    2f22:	4b6a      	ldr	r3, [pc, #424]	; (30cc <handle_read_gyro+0x2a0>)
    2f24:	0011      	movs	r1, r2
    2f26:	0018      	movs	r0, r3
    2f28:	4b6a      	ldr	r3, [pc, #424]	; (30d4 <handle_read_gyro+0x2a8>)
    2f2a:	4798      	blx	r3
    2f2c:	0003      	movs	r3, r0
    2f2e:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    2f30:	4b66      	ldr	r3, [pc, #408]	; (30cc <handle_read_gyro+0x2a0>)
    2f32:	0018      	movs	r0, r3
    2f34:	4b68      	ldr	r3, [pc, #416]	; (30d8 <handle_read_gyro+0x2ac>)
    2f36:	4798      	blx	r3
		
		// Get the data.
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    2f38:	4b61      	ldr	r3, [pc, #388]	; (30c0 <handle_read_gyro+0x294>)
    2f3a:	2268      	movs	r2, #104	; 0x68
    2f3c:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    2f3e:	4b60      	ldr	r3, [pc, #384]	; (30c0 <handle_read_gyro+0x294>)
    2f40:	2201      	movs	r2, #1
    2f42:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x3B; //MPU6050_RA_ACCEL_XOUT_H;
    2f44:	4b5f      	ldr	r3, [pc, #380]	; (30c4 <handle_read_gyro+0x298>)
    2f46:	223b      	movs	r2, #59	; 0x3b
    2f48:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    2f4a:	4b5d      	ldr	r3, [pc, #372]	; (30c0 <handle_read_gyro+0x294>)
    2f4c:	4a5d      	ldr	r2, [pc, #372]	; (30c4 <handle_read_gyro+0x298>)
    2f4e:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    2f50:	4b5d      	ldr	r3, [pc, #372]	; (30c8 <handle_read_gyro+0x29c>)
    2f52:	2268      	movs	r2, #104	; 0x68
    2f54:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    2f56:	231b      	movs	r3, #27
    2f58:	18fc      	adds	r4, r7, r3
    2f5a:	4a59      	ldr	r2, [pc, #356]	; (30c0 <handle_read_gyro+0x294>)
    2f5c:	4b5b      	ldr	r3, [pc, #364]	; (30cc <handle_read_gyro+0x2a0>)
    2f5e:	0011      	movs	r1, r2
    2f60:	0018      	movs	r0, r3
    2f62:	4b5b      	ldr	r3, [pc, #364]	; (30d0 <handle_read_gyro+0x2a4>)
    2f64:	4798      	blx	r3
    2f66:	0003      	movs	r3, r0
    2f68:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    2f6a:	231b      	movs	r3, #27
    2f6c:	18fb      	adds	r3, r7, r3
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d109      	bne.n	2f88 <handle_read_gyro+0x15c>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2f74:	231b      	movs	r3, #27
    2f76:	18fc      	adds	r4, r7, r3
    2f78:	4a53      	ldr	r2, [pc, #332]	; (30c8 <handle_read_gyro+0x29c>)
    2f7a:	4b54      	ldr	r3, [pc, #336]	; (30cc <handle_read_gyro+0x2a0>)
    2f7c:	0011      	movs	r1, r2
    2f7e:	0018      	movs	r0, r3
    2f80:	4b54      	ldr	r3, [pc, #336]	; (30d4 <handle_read_gyro+0x2a8>)
    2f82:	4798      	blx	r3
    2f84:	0003      	movs	r3, r0
    2f86:	7023      	strb	r3, [r4, #0]
		}
	
		int16_t ax, ay, az, gx, gy, gz;
		ax = (((int16_t)rd_packet.data[0]) << 8) | rd_packet.data[1];
    2f88:	4b4f      	ldr	r3, [pc, #316]	; (30c8 <handle_read_gyro+0x29c>)
    2f8a:	685b      	ldr	r3, [r3, #4]
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	021b      	lsls	r3, r3, #8
    2f90:	b219      	sxth	r1, r3
    2f92:	4b4d      	ldr	r3, [pc, #308]	; (30c8 <handle_read_gyro+0x29c>)
    2f94:	685b      	ldr	r3, [r3, #4]
    2f96:	3301      	adds	r3, #1
    2f98:	781b      	ldrb	r3, [r3, #0]
    2f9a:	b21a      	sxth	r2, r3
    2f9c:	2318      	movs	r3, #24
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	430a      	orrs	r2, r1
    2fa2:	801a      	strh	r2, [r3, #0]
		ay = (((int16_t)rd_packet.data[2]) << 8) | rd_packet.data[3];
    2fa4:	4b48      	ldr	r3, [pc, #288]	; (30c8 <handle_read_gyro+0x29c>)
    2fa6:	685b      	ldr	r3, [r3, #4]
    2fa8:	3302      	adds	r3, #2
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	021b      	lsls	r3, r3, #8
    2fae:	b219      	sxth	r1, r3
    2fb0:	4b45      	ldr	r3, [pc, #276]	; (30c8 <handle_read_gyro+0x29c>)
    2fb2:	685b      	ldr	r3, [r3, #4]
    2fb4:	3303      	adds	r3, #3
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	b21a      	sxth	r2, r3
    2fba:	2316      	movs	r3, #22
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	430a      	orrs	r2, r1
    2fc0:	801a      	strh	r2, [r3, #0]
		az = (((int16_t)rd_packet.data[4]) << 8) | rd_packet.data[5];
    2fc2:	4b41      	ldr	r3, [pc, #260]	; (30c8 <handle_read_gyro+0x29c>)
    2fc4:	685b      	ldr	r3, [r3, #4]
    2fc6:	3304      	adds	r3, #4
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	021b      	lsls	r3, r3, #8
    2fcc:	b219      	sxth	r1, r3
    2fce:	4b3e      	ldr	r3, [pc, #248]	; (30c8 <handle_read_gyro+0x29c>)
    2fd0:	685b      	ldr	r3, [r3, #4]
    2fd2:	3305      	adds	r3, #5
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	b21a      	sxth	r2, r3
    2fd8:	2314      	movs	r3, #20
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	430a      	orrs	r2, r1
    2fde:	801a      	strh	r2, [r3, #0]
		gx = (((int16_t)rd_packet.data[8]) << 8) | rd_packet.data[9];
    2fe0:	4b39      	ldr	r3, [pc, #228]	; (30c8 <handle_read_gyro+0x29c>)
    2fe2:	685b      	ldr	r3, [r3, #4]
    2fe4:	3308      	adds	r3, #8
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	021b      	lsls	r3, r3, #8
    2fea:	b219      	sxth	r1, r3
    2fec:	4b36      	ldr	r3, [pc, #216]	; (30c8 <handle_read_gyro+0x29c>)
    2fee:	685b      	ldr	r3, [r3, #4]
    2ff0:	3309      	adds	r3, #9
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	b21a      	sxth	r2, r3
    2ff6:	2312      	movs	r3, #18
    2ff8:	18fb      	adds	r3, r7, r3
    2ffa:	430a      	orrs	r2, r1
    2ffc:	801a      	strh	r2, [r3, #0]
		gy = (((int16_t)rd_packet.data[10]) << 8) | rd_packet.data[11];
    2ffe:	4b32      	ldr	r3, [pc, #200]	; (30c8 <handle_read_gyro+0x29c>)
    3000:	685b      	ldr	r3, [r3, #4]
    3002:	330a      	adds	r3, #10
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	021b      	lsls	r3, r3, #8
    3008:	b219      	sxth	r1, r3
    300a:	4b2f      	ldr	r3, [pc, #188]	; (30c8 <handle_read_gyro+0x29c>)
    300c:	685b      	ldr	r3, [r3, #4]
    300e:	330b      	adds	r3, #11
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	b21a      	sxth	r2, r3
    3014:	2310      	movs	r3, #16
    3016:	18fb      	adds	r3, r7, r3
    3018:	430a      	orrs	r2, r1
    301a:	801a      	strh	r2, [r3, #0]
		gz = (((int16_t)rd_packet.data[12]) << 8) | rd_packet.data[13];
    301c:	4b2a      	ldr	r3, [pc, #168]	; (30c8 <handle_read_gyro+0x29c>)
    301e:	685b      	ldr	r3, [r3, #4]
    3020:	330c      	adds	r3, #12
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	021b      	lsls	r3, r3, #8
    3026:	b219      	sxth	r1, r3
    3028:	4b27      	ldr	r3, [pc, #156]	; (30c8 <handle_read_gyro+0x29c>)
    302a:	685b      	ldr	r3, [r3, #4]
    302c:	330d      	adds	r3, #13
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	b21a      	sxth	r2, r3
    3032:	230e      	movs	r3, #14
    3034:	18fb      	adds	r3, r7, r3
    3036:	430a      	orrs	r2, r1
    3038:	801a      	strh	r2, [r3, #0]
	
		printf("===Reading %d===\r\n", i);
    303a:	69fa      	ldr	r2, [r7, #28]
    303c:	4b27      	ldr	r3, [pc, #156]	; (30dc <handle_read_gyro+0x2b0>)
    303e:	0011      	movs	r1, r2
    3040:	0018      	movs	r0, r3
    3042:	4b27      	ldr	r3, [pc, #156]	; (30e0 <handle_read_gyro+0x2b4>)
    3044:	4798      	blx	r3
		printf("Ax = %d\r\nAy = %d\r\nAz = %d\r\nGx = %d\r\nGy = %d\r\nGz = %d\r\n", ax, ay, az, gx, gy, gz);
    3046:	2318      	movs	r3, #24
    3048:	18fb      	adds	r3, r7, r3
    304a:	2400      	movs	r4, #0
    304c:	5f1c      	ldrsh	r4, [r3, r4]
    304e:	2316      	movs	r3, #22
    3050:	18fb      	adds	r3, r7, r3
    3052:	2500      	movs	r5, #0
    3054:	5f5d      	ldrsh	r5, [r3, r5]
    3056:	2314      	movs	r3, #20
    3058:	18fb      	adds	r3, r7, r3
    305a:	2600      	movs	r6, #0
    305c:	5f9e      	ldrsh	r6, [r3, r6]
    305e:	2312      	movs	r3, #18
    3060:	18fb      	adds	r3, r7, r3
    3062:	2200      	movs	r2, #0
    3064:	5e9b      	ldrsh	r3, [r3, r2]
    3066:	2210      	movs	r2, #16
    3068:	18ba      	adds	r2, r7, r2
    306a:	2100      	movs	r1, #0
    306c:	5e52      	ldrsh	r2, [r2, r1]
    306e:	210e      	movs	r1, #14
    3070:	1879      	adds	r1, r7, r1
    3072:	2000      	movs	r0, #0
    3074:	5e09      	ldrsh	r1, [r1, r0]
    3076:	481b      	ldr	r0, [pc, #108]	; (30e4 <handle_read_gyro+0x2b8>)
    3078:	9102      	str	r1, [sp, #8]
    307a:	9201      	str	r2, [sp, #4]
    307c:	9300      	str	r3, [sp, #0]
    307e:	0033      	movs	r3, r6
    3080:	002a      	movs	r2, r5
    3082:	0021      	movs	r1, r4
    3084:	4c16      	ldr	r4, [pc, #88]	; (30e0 <handle_read_gyro+0x2b4>)
    3086:	47a0      	blx	r4
		i2c_master_send_stop(&i2c_master_instance);
    3088:	4b10      	ldr	r3, [pc, #64]	; (30cc <handle_read_gyro+0x2a0>)
    308a:	0018      	movs	r0, r3
    308c:	4b12      	ldr	r3, [pc, #72]	; (30d8 <handle_read_gyro+0x2ac>)
    308e:	4798      	blx	r3
		delay_ms(interval_ms);
    3090:	683b      	ldr	r3, [r7, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d004      	beq.n	30a0 <handle_read_gyro+0x274>
    3096:	683b      	ldr	r3, [r7, #0]
    3098:	0018      	movs	r0, r3
    309a:	4b13      	ldr	r3, [pc, #76]	; (30e8 <handle_read_gyro+0x2bc>)
    309c:	4798      	blx	r3
    309e:	e002      	b.n	30a6 <handle_read_gyro+0x27a>
    30a0:	2001      	movs	r0, #1
    30a2:	4b12      	ldr	r3, [pc, #72]	; (30ec <handle_read_gyro+0x2c0>)
    30a4:	4798      	blx	r3
	for(int i = 0; i < num_readings; i++) {
    30a6:	69fb      	ldr	r3, [r7, #28]
    30a8:	3301      	adds	r3, #1
    30aa:	61fb      	str	r3, [r7, #28]
    30ac:	69fa      	ldr	r2, [r7, #28]
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	429a      	cmp	r2, r3
    30b2:	da00      	bge.n	30b6 <handle_read_gyro+0x28a>
    30b4:	e6c2      	b.n	2e3c <handle_read_gyro+0x10>
	}
}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	46bd      	mov	sp, r7
    30ba:	b009      	add	sp, #36	; 0x24
    30bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	20000044 	.word	0x20000044
    30c4:	2000003c 	.word	0x2000003c
    30c8:	20000050 	.word	0x20000050
    30cc:	200003f0 	.word	0x200003f0
    30d0:	00001b3d 	.word	0x00001b3d
    30d4:	00001985 	.word	0x00001985
    30d8:	00001b7d 	.word	0x00001b7d
    30dc:	0000b460 	.word	0x0000b460
    30e0:	000090b5 	.word	0x000090b5
    30e4:	0000b474 	.word	0x0000b474
    30e8:	00003355 	.word	0x00003355
    30ec:	00003325 	.word	0x00003325

000030f0 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
    30f0:	b580      	push	{r7, lr}
    30f2:	b082      	sub	sp, #8
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
	printf("Use read_gyro!\r\n");
    30fa:	4b04      	ldr	r3, [pc, #16]	; (310c <handle_read_accel+0x1c>)
    30fc:	0018      	movs	r0, r3
    30fe:	4b04      	ldr	r3, [pc, #16]	; (3110 <handle_read_accel+0x20>)
    3100:	4798      	blx	r3
}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	46bd      	mov	sp, r7
    3106:	b002      	add	sp, #8
    3108:	bd80      	pop	{r7, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	0000b4ac 	.word	0x0000b4ac
    3110:	000091a9 	.word	0x000091a9

00003114 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
    3114:	b580      	push	{r7, lr}
    3116:	b084      	sub	sp, #16
    3118:	af00      	add	r7, sp, #0
    311a:	0002      	movs	r2, r0
    311c:	6039      	str	r1, [r7, #0]
    311e:	1dfb      	adds	r3, r7, #7
    3120:	701a      	strb	r2, [r3, #0]
	disable_adc();
    3122:	4b0f      	ldr	r3, [pc, #60]	; (3160 <handle_adc_get+0x4c>)
    3124:	4798      	blx	r3
	configure_adc();
    3126:	4b0f      	ldr	r3, [pc, #60]	; (3164 <handle_adc_get+0x50>)
    3128:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    312a:	4b0f      	ldr	r3, [pc, #60]	; (3168 <handle_adc_get+0x54>)
    312c:	0018      	movs	r0, r3
    312e:	4b0f      	ldr	r3, [pc, #60]	; (316c <handle_adc_get+0x58>)
    3130:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    3132:	230e      	movs	r3, #14
    3134:	18fa      	adds	r2, r7, r3
    3136:	4b0c      	ldr	r3, [pc, #48]	; (3168 <handle_adc_get+0x54>)
    3138:	0011      	movs	r1, r2
    313a:	0018      	movs	r0, r3
    313c:	4b0c      	ldr	r3, [pc, #48]	; (3170 <handle_adc_get+0x5c>)
    313e:	4798      	blx	r3
    3140:	0003      	movs	r3, r0
    3142:	2b05      	cmp	r3, #5
    3144:	d0f5      	beq.n	3132 <handle_adc_get+0x1e>
	
	printf("ADC Result: %d\r\n", result);
    3146:	230e      	movs	r3, #14
    3148:	18fb      	adds	r3, r7, r3
    314a:	881b      	ldrh	r3, [r3, #0]
    314c:	001a      	movs	r2, r3
    314e:	4b09      	ldr	r3, [pc, #36]	; (3174 <handle_adc_get+0x60>)
    3150:	0011      	movs	r1, r2
    3152:	0018      	movs	r0, r3
    3154:	4b08      	ldr	r3, [pc, #32]	; (3178 <handle_adc_get+0x64>)
    3156:	4798      	blx	r3
}
    3158:	46c0      	nop			; (mov r8, r8)
    315a:	46bd      	mov	sp, r7
    315c:	b004      	add	sp, #16
    315e:	bd80      	pop	{r7, pc}
    3160:	00002665 	.word	0x00002665
    3164:	00002681 	.word	0x00002681
    3168:	20000454 	.word	0x20000454
    316c:	0000231d 	.word	0x0000231d
    3170:	00002365 	.word	0x00002365
    3174:	0000b4bc 	.word	0x0000b4bc
    3178:	000090b5 	.word	0x000090b5

0000317c <handle_mcu_temp>:

void handle_mcu_temp() {
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
	disable_adc();
    3182:	4b12      	ldr	r3, [pc, #72]	; (31cc <handle_mcu_temp+0x50>)
    3184:	4798      	blx	r3
	
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
    3186:	2000      	movs	r0, #0
    3188:	4b11      	ldr	r3, [pc, #68]	; (31d0 <handle_mcu_temp+0x54>)
    318a:	4798      	blx	r3
	
	configure_adc_temp();
    318c:	4b11      	ldr	r3, [pc, #68]	; (31d4 <handle_mcu_temp+0x58>)
    318e:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    3190:	4b11      	ldr	r3, [pc, #68]	; (31d8 <handle_mcu_temp+0x5c>)
    3192:	0018      	movs	r0, r3
    3194:	4b11      	ldr	r3, [pc, #68]	; (31dc <handle_mcu_temp+0x60>)
    3196:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    3198:	1cba      	adds	r2, r7, #2
    319a:	4b0f      	ldr	r3, [pc, #60]	; (31d8 <handle_mcu_temp+0x5c>)
    319c:	0011      	movs	r1, r2
    319e:	0018      	movs	r0, r3
    31a0:	4b0f      	ldr	r3, [pc, #60]	; (31e0 <handle_mcu_temp+0x64>)
    31a2:	4798      	blx	r3
    31a4:	0003      	movs	r3, r0
    31a6:	2b05      	cmp	r3, #5
    31a8:	d0f6      	beq.n	3198 <handle_mcu_temp+0x1c>
	
	int temp = calculate_temperature(result);
    31aa:	1cbb      	adds	r3, r7, #2
    31ac:	881b      	ldrh	r3, [r3, #0]
    31ae:	0018      	movs	r0, r3
    31b0:	4b0c      	ldr	r3, [pc, #48]	; (31e4 <handle_mcu_temp+0x68>)
    31b2:	4798      	blx	r3
    31b4:	0003      	movs	r3, r0
    31b6:	607b      	str	r3, [r7, #4]
	
	printf("Temperature Result: %d \r\n", temp);
    31b8:	687a      	ldr	r2, [r7, #4]
    31ba:	4b0b      	ldr	r3, [pc, #44]	; (31e8 <handle_mcu_temp+0x6c>)
    31bc:	0011      	movs	r1, r2
    31be:	0018      	movs	r0, r3
    31c0:	4b0a      	ldr	r3, [pc, #40]	; (31ec <handle_mcu_temp+0x70>)
    31c2:	4798      	blx	r3
}
    31c4:	46c0      	nop			; (mov r8, r8)
    31c6:	46bd      	mov	sp, r7
    31c8:	b002      	add	sp, #8
    31ca:	bd80      	pop	{r7, pc}
    31cc:	00002665 	.word	0x00002665
    31d0:	000020f1 	.word	0x000020f1
    31d4:	000001c9 	.word	0x000001c9
    31d8:	20000454 	.word	0x20000454
    31dc:	0000231d 	.word	0x0000231d
    31e0:	00002365 	.word	0x00002365
    31e4:	00000235 	.word	0x00000235
    31e8:	0000b4d0 	.word	0x0000b4d0
    31ec:	000090b5 	.word	0x000090b5

000031f0 <handle_i2c_scan>:

void handle_i2c_scan() {
    31f0:	b590      	push	{r4, r7, lr}
    31f2:	b083      	sub	sp, #12
    31f4:	af00      	add	r7, sp, #0
	
	  for(char slave_address = 1; slave_address <= 127; slave_address++) {
    31f6:	1dfb      	adds	r3, r7, #7
    31f8:	2201      	movs	r2, #1
    31fa:	701a      	strb	r2, [r3, #0]
    31fc:	e031      	b.n	3262 <handle_i2c_scan+0x72>
		  enum status_code i2c_status;
		  wr_packet.address     = slave_address;
    31fe:	1dfb      	adds	r3, r7, #7
    3200:	781b      	ldrb	r3, [r3, #0]
    3202:	b29a      	uxth	r2, r3
    3204:	4b1c      	ldr	r3, [pc, #112]	; (3278 <handle_i2c_scan+0x88>)
    3206:	801a      	strh	r2, [r3, #0]
		  wr_packet.data_length = 1;
    3208:	4b1b      	ldr	r3, [pc, #108]	; (3278 <handle_i2c_scan+0x88>)
    320a:	2201      	movs	r2, #1
    320c:	805a      	strh	r2, [r3, #2]
		  wr_buffer[0]          = 0x00;
    320e:	4b1b      	ldr	r3, [pc, #108]	; (327c <handle_i2c_scan+0x8c>)
    3210:	2200      	movs	r2, #0
    3212:	701a      	strb	r2, [r3, #0]
		  wr_packet.data        = wr_buffer;
    3214:	4b18      	ldr	r3, [pc, #96]	; (3278 <handle_i2c_scan+0x88>)
    3216:	4a19      	ldr	r2, [pc, #100]	; (327c <handle_i2c_scan+0x8c>)
    3218:	605a      	str	r2, [r3, #4]
		  i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    321a:	1dbc      	adds	r4, r7, #6
    321c:	4a16      	ldr	r2, [pc, #88]	; (3278 <handle_i2c_scan+0x88>)
    321e:	4b18      	ldr	r3, [pc, #96]	; (3280 <handle_i2c_scan+0x90>)
    3220:	0011      	movs	r1, r2
    3222:	0018      	movs	r0, r3
    3224:	4b17      	ldr	r3, [pc, #92]	; (3284 <handle_i2c_scan+0x94>)
    3226:	4798      	blx	r3
    3228:	0003      	movs	r3, r0
    322a:	7023      	strb	r3, [r4, #0]
		  printf("Addr is %d \r\n", slave_address);
    322c:	1dfb      	adds	r3, r7, #7
    322e:	781a      	ldrb	r2, [r3, #0]
    3230:	4b15      	ldr	r3, [pc, #84]	; (3288 <handle_i2c_scan+0x98>)
    3232:	0011      	movs	r1, r2
    3234:	0018      	movs	r0, r3
    3236:	4b15      	ldr	r3, [pc, #84]	; (328c <handle_i2c_scan+0x9c>)
    3238:	4798      	blx	r3
		  if( i2c_status == STATUS_OK ) {
    323a:	1dbb      	adds	r3, r7, #6
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	2b00      	cmp	r3, #0
    3240:	d106      	bne.n	3250 <handle_i2c_scan+0x60>
			  //i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
			 printf("The slave address is %.2x \r\n", slave_address);
    3242:	1dfb      	adds	r3, r7, #7
    3244:	781a      	ldrb	r2, [r3, #0]
    3246:	4b12      	ldr	r3, [pc, #72]	; (3290 <handle_i2c_scan+0xa0>)
    3248:	0011      	movs	r1, r2
    324a:	0018      	movs	r0, r3
    324c:	4b0f      	ldr	r3, [pc, #60]	; (328c <handle_i2c_scan+0x9c>)
    324e:	4798      	blx	r3
		  }
		  i2c_master_send_stop(&i2c_master_instance);
    3250:	4b0b      	ldr	r3, [pc, #44]	; (3280 <handle_i2c_scan+0x90>)
    3252:	0018      	movs	r0, r3
    3254:	4b0f      	ldr	r3, [pc, #60]	; (3294 <handle_i2c_scan+0xa4>)
    3256:	4798      	blx	r3
	  for(char slave_address = 1; slave_address <= 127; slave_address++) {
    3258:	1dfb      	adds	r3, r7, #7
    325a:	781a      	ldrb	r2, [r3, #0]
    325c:	1dfb      	adds	r3, r7, #7
    325e:	3201      	adds	r2, #1
    3260:	701a      	strb	r2, [r3, #0]
    3262:	1dfb      	adds	r3, r7, #7
    3264:	781b      	ldrb	r3, [r3, #0]
    3266:	b25b      	sxtb	r3, r3
    3268:	2b00      	cmp	r3, #0
    326a:	dac8      	bge.n	31fe <handle_i2c_scan+0xe>
	 }
	 int i = 0;
    326c:	2300      	movs	r3, #0
    326e:	603b      	str	r3, [r7, #0]
	
}
    3270:	46c0      	nop			; (mov r8, r8)
    3272:	46bd      	mov	sp, r7
    3274:	b003      	add	sp, #12
    3276:	bd90      	pop	{r4, r7, pc}
    3278:	20000044 	.word	0x20000044
    327c:	2000003c 	.word	0x2000003c
    3280:	200003f0 	.word	0x200003f0
    3284:	00001b3d 	.word	0x00001b3d
    3288:	0000b4ec 	.word	0x0000b4ec
    328c:	000090b5 	.word	0x000090b5
    3290:	0000b4fc 	.word	0x0000b4fc
    3294:	00001b7d 	.word	0x00001b7d

00003298 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    3298:	b580      	push	{r7, lr}
    329a:	b082      	sub	sp, #8
    329c:	af00      	add	r7, sp, #0
    329e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	2b00      	cmp	r3, #0
    32a4:	d00c      	beq.n	32c0 <delay_cycles+0x28>
		SysTick->LOAD = n;
    32a6:	4b08      	ldr	r3, [pc, #32]	; (32c8 <delay_cycles+0x30>)
    32a8:	687a      	ldr	r2, [r7, #4]
    32aa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    32ac:	4b06      	ldr	r3, [pc, #24]	; (32c8 <delay_cycles+0x30>)
    32ae:	2200      	movs	r2, #0
    32b0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	4b04      	ldr	r3, [pc, #16]	; (32c8 <delay_cycles+0x30>)
    32b6:	681a      	ldr	r2, [r3, #0]
    32b8:	2380      	movs	r3, #128	; 0x80
    32ba:	025b      	lsls	r3, r3, #9
    32bc:	4013      	ands	r3, r2
    32be:	d0f9      	beq.n	32b4 <delay_cycles+0x1c>
		};
	}
}
    32c0:	46c0      	nop			; (mov r8, r8)
    32c2:	46bd      	mov	sp, r7
    32c4:	b002      	add	sp, #8
    32c6:	bd80      	pop	{r7, pc}
    32c8:	e000e010 	.word	0xe000e010

000032cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    32d0:	2000      	movs	r0, #0
    32d2:	4b0f      	ldr	r3, [pc, #60]	; (3310 <delay_init+0x44>)
    32d4:	4798      	blx	r3
    32d6:	0002      	movs	r2, r0
    32d8:	4b0e      	ldr	r3, [pc, #56]	; (3314 <delay_init+0x48>)
    32da:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    32dc:	4b0d      	ldr	r3, [pc, #52]	; (3314 <delay_init+0x48>)
    32de:	6818      	ldr	r0, [r3, #0]
    32e0:	4b0d      	ldr	r3, [pc, #52]	; (3318 <delay_init+0x4c>)
    32e2:	22fa      	movs	r2, #250	; 0xfa
    32e4:	0091      	lsls	r1, r2, #2
    32e6:	4798      	blx	r3
    32e8:	0003      	movs	r3, r0
    32ea:	001a      	movs	r2, r3
    32ec:	4b09      	ldr	r3, [pc, #36]	; (3314 <delay_init+0x48>)
    32ee:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <delay_init+0x48>)
    32f2:	6818      	ldr	r0, [r3, #0]
    32f4:	4b08      	ldr	r3, [pc, #32]	; (3318 <delay_init+0x4c>)
    32f6:	22fa      	movs	r2, #250	; 0xfa
    32f8:	0091      	lsls	r1, r2, #2
    32fa:	4798      	blx	r3
    32fc:	0003      	movs	r3, r0
    32fe:	001a      	movs	r2, r3
    3300:	4b06      	ldr	r3, [pc, #24]	; (331c <delay_init+0x50>)
    3302:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3304:	4b06      	ldr	r3, [pc, #24]	; (3320 <delay_init+0x54>)
    3306:	2205      	movs	r2, #5
    3308:	601a      	str	r2, [r3, #0]
}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	46bd      	mov	sp, r7
    330e:	bd80      	pop	{r7, pc}
    3310:	000063e9 	.word	0x000063e9
    3314:	2000005c 	.word	0x2000005c
    3318:	00007435 	.word	0x00007435
    331c:	20000060 	.word	0x20000060
    3320:	e000e010 	.word	0xe000e010

00003324 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    3324:	b580      	push	{r7, lr}
    3326:	b082      	sub	sp, #8
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
	while (n--) {
    332c:	e004      	b.n	3338 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    332e:	4b07      	ldr	r3, [pc, #28]	; (334c <delay_cycles_us+0x28>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	0018      	movs	r0, r3
    3334:	4b06      	ldr	r3, [pc, #24]	; (3350 <delay_cycles_us+0x2c>)
    3336:	4798      	blx	r3
	while (n--) {
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	1e5a      	subs	r2, r3, #1
    333c:	607a      	str	r2, [r7, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	d1f5      	bne.n	332e <delay_cycles_us+0xa>
	}
}
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	46bd      	mov	sp, r7
    3346:	b002      	add	sp, #8
    3348:	bd80      	pop	{r7, pc}
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	20000060 	.word	0x20000060
    3350:	00003299 	.word	0x00003299

00003354 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3354:	b580      	push	{r7, lr}
    3356:	b082      	sub	sp, #8
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
	while (n--) {
    335c:	e004      	b.n	3368 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    335e:	4b07      	ldr	r3, [pc, #28]	; (337c <delay_cycles_ms+0x28>)
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	0018      	movs	r0, r3
    3364:	4b06      	ldr	r3, [pc, #24]	; (3380 <delay_cycles_ms+0x2c>)
    3366:	4798      	blx	r3
	while (n--) {
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	1e5a      	subs	r2, r3, #1
    336c:	607a      	str	r2, [r7, #4]
    336e:	2b00      	cmp	r3, #0
    3370:	d1f5      	bne.n	335e <delay_cycles_ms+0xa>
	}
}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	46bd      	mov	sp, r7
    3376:	b002      	add	sp, #8
    3378:	bd80      	pop	{r7, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	2000005c 	.word	0x2000005c
    3380:	00003299 	.word	0x00003299

00003384 <system_pinmux_get_group_from_gpio_pin>:
{
    3384:	b580      	push	{r7, lr}
    3386:	b084      	sub	sp, #16
    3388:	af00      	add	r7, sp, #0
    338a:	0002      	movs	r2, r0
    338c:	1dfb      	adds	r3, r7, #7
    338e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3390:	230f      	movs	r3, #15
    3392:	18fb      	adds	r3, r7, r3
    3394:	1dfa      	adds	r2, r7, #7
    3396:	7812      	ldrb	r2, [r2, #0]
    3398:	09d2      	lsrs	r2, r2, #7
    339a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    339c:	230e      	movs	r3, #14
    339e:	18fb      	adds	r3, r7, r3
    33a0:	1dfa      	adds	r2, r7, #7
    33a2:	7812      	ldrb	r2, [r2, #0]
    33a4:	0952      	lsrs	r2, r2, #5
    33a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    33a8:	4b0d      	ldr	r3, [pc, #52]	; (33e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    33aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    33ac:	230f      	movs	r3, #15
    33ae:	18fb      	adds	r3, r7, r3
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d10f      	bne.n	33d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    33b6:	230f      	movs	r3, #15
    33b8:	18fb      	adds	r3, r7, r3
    33ba:	781b      	ldrb	r3, [r3, #0]
    33bc:	009b      	lsls	r3, r3, #2
    33be:	2210      	movs	r2, #16
    33c0:	4694      	mov	ip, r2
    33c2:	44bc      	add	ip, r7
    33c4:	4463      	add	r3, ip
    33c6:	3b08      	subs	r3, #8
    33c8:	681a      	ldr	r2, [r3, #0]
    33ca:	230e      	movs	r3, #14
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	01db      	lsls	r3, r3, #7
    33d2:	18d3      	adds	r3, r2, r3
    33d4:	e000      	b.n	33d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    33d6:	2300      	movs	r3, #0
}
    33d8:	0018      	movs	r0, r3
    33da:	46bd      	mov	sp, r7
    33dc:	b004      	add	sp, #16
    33de:	bd80      	pop	{r7, pc}
    33e0:	41004400 	.word	0x41004400

000033e4 <system_interrupt_enable_global>:
{
    33e4:	b580      	push	{r7, lr}
    33e6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    33e8:	4b04      	ldr	r3, [pc, #16]	; (33fc <system_interrupt_enable_global+0x18>)
    33ea:	2201      	movs	r2, #1
    33ec:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    33ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    33f2:	b662      	cpsie	i
}
    33f4:	46c0      	nop			; (mov r8, r8)
    33f6:	46bd      	mov	sp, r7
    33f8:	bd80      	pop	{r7, pc}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	20000064 	.word	0x20000064

00003400 <port_get_group_from_gpio_pin>:
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	0002      	movs	r2, r0
    3408:	1dfb      	adds	r3, r7, #7
    340a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    340c:	1dfb      	adds	r3, r7, #7
    340e:	781b      	ldrb	r3, [r3, #0]
    3410:	0018      	movs	r0, r3
    3412:	4b03      	ldr	r3, [pc, #12]	; (3420 <port_get_group_from_gpio_pin+0x20>)
    3414:	4798      	blx	r3
    3416:	0003      	movs	r3, r0
}
    3418:	0018      	movs	r0, r3
    341a:	46bd      	mov	sp, r7
    341c:	b002      	add	sp, #8
    341e:	bd80      	pop	{r7, pc}
    3420:	00003385 	.word	0x00003385

00003424 <port_get_config_defaults>:
{
    3424:	b580      	push	{r7, lr}
    3426:	b082      	sub	sp, #8
    3428:	af00      	add	r7, sp, #0
    342a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	2200      	movs	r2, #0
    3430:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3432:	687b      	ldr	r3, [r7, #4]
    3434:	2201      	movs	r2, #1
    3436:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	2200      	movs	r2, #0
    343c:	709a      	strb	r2, [r3, #2]
}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	46bd      	mov	sp, r7
    3442:	b002      	add	sp, #8
    3444:	bd80      	pop	{r7, pc}
	...

00003448 <port_pin_set_output_level>:
{
    3448:	b580      	push	{r7, lr}
    344a:	b084      	sub	sp, #16
    344c:	af00      	add	r7, sp, #0
    344e:	0002      	movs	r2, r0
    3450:	1dfb      	adds	r3, r7, #7
    3452:	701a      	strb	r2, [r3, #0]
    3454:	1dbb      	adds	r3, r7, #6
    3456:	1c0a      	adds	r2, r1, #0
    3458:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    345a:	1dfb      	adds	r3, r7, #7
    345c:	781b      	ldrb	r3, [r3, #0]
    345e:	0018      	movs	r0, r3
    3460:	4b0d      	ldr	r3, [pc, #52]	; (3498 <port_pin_set_output_level+0x50>)
    3462:	4798      	blx	r3
    3464:	0003      	movs	r3, r0
    3466:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3468:	1dfb      	adds	r3, r7, #7
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	221f      	movs	r2, #31
    346e:	4013      	ands	r3, r2
    3470:	2201      	movs	r2, #1
    3472:	409a      	lsls	r2, r3
    3474:	0013      	movs	r3, r2
    3476:	60bb      	str	r3, [r7, #8]
	if (level) {
    3478:	1dbb      	adds	r3, r7, #6
    347a:	781b      	ldrb	r3, [r3, #0]
    347c:	2b00      	cmp	r3, #0
    347e:	d003      	beq.n	3488 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3480:	68fb      	ldr	r3, [r7, #12]
    3482:	68ba      	ldr	r2, [r7, #8]
    3484:	619a      	str	r2, [r3, #24]
}
    3486:	e002      	b.n	348e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3488:	68fb      	ldr	r3, [r7, #12]
    348a:	68ba      	ldr	r2, [r7, #8]
    348c:	615a      	str	r2, [r3, #20]
}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	46bd      	mov	sp, r7
    3492:	b004      	add	sp, #16
    3494:	bd80      	pop	{r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	00003401 	.word	0x00003401

0000349c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    349c:	b580      	push	{r7, lr}
    349e:	b082      	sub	sp, #8
    34a0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    34a2:	1d3b      	adds	r3, r7, #4
    34a4:	0018      	movs	r0, r3
    34a6:	4b10      	ldr	r3, [pc, #64]	; (34e8 <init_chip_pins+0x4c>)
    34a8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    34aa:	1d3b      	adds	r3, r7, #4
    34ac:	2201      	movs	r2, #1
    34ae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    34b0:	1d3b      	adds	r3, r7, #4
    34b2:	0019      	movs	r1, r3
    34b4:	201b      	movs	r0, #27
    34b6:	4b0d      	ldr	r3, [pc, #52]	; (34ec <init_chip_pins+0x50>)
    34b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    34ba:	1d3b      	adds	r3, r7, #4
    34bc:	0019      	movs	r1, r3
    34be:	201c      	movs	r0, #28
    34c0:	4b0a      	ldr	r3, [pc, #40]	; (34ec <init_chip_pins+0x50>)
    34c2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    34c4:	1d3b      	adds	r3, r7, #4
    34c6:	0019      	movs	r1, r3
    34c8:	2028      	movs	r0, #40	; 0x28
    34ca:	4b08      	ldr	r3, [pc, #32]	; (34ec <init_chip_pins+0x50>)
    34cc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    34ce:	2100      	movs	r1, #0
    34d0:	201c      	movs	r0, #28
    34d2:	4b07      	ldr	r3, [pc, #28]	; (34f0 <init_chip_pins+0x54>)
    34d4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    34d6:	2100      	movs	r1, #0
    34d8:	201b      	movs	r0, #27
    34da:	4b05      	ldr	r3, [pc, #20]	; (34f0 <init_chip_pins+0x54>)
    34dc:	4798      	blx	r3
}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	46bd      	mov	sp, r7
    34e2:	b002      	add	sp, #8
    34e4:	bd80      	pop	{r7, pc}
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	00003425 	.word	0x00003425
    34ec:	00003b19 	.word	0x00003b19
    34f0:	00003449 	.word	0x00003449

000034f4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    34f4:	b580      	push	{r7, lr}
    34f6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    34f8:	4b0c      	ldr	r3, [pc, #48]	; (352c <nm_bsp_init+0x38>)
    34fa:	2200      	movs	r2, #0
    34fc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    34fe:	4b0c      	ldr	r3, [pc, #48]	; (3530 <nm_bsp_init+0x3c>)
    3500:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    3502:	4b0c      	ldr	r3, [pc, #48]	; (3534 <nm_bsp_init+0x40>)
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	2201      	movs	r2, #1
    3508:	4013      	ands	r3, r2
    350a:	d004      	beq.n	3516 <nm_bsp_init+0x22>
    350c:	4b09      	ldr	r3, [pc, #36]	; (3534 <nm_bsp_init+0x40>)
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	2202      	movs	r2, #2
    3512:	4013      	ands	r3, r2
    3514:	d101      	bne.n	351a <nm_bsp_init+0x26>
	    delay_init();
    3516:	4b08      	ldr	r3, [pc, #32]	; (3538 <nm_bsp_init+0x44>)
    3518:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    351a:	4b08      	ldr	r3, [pc, #32]	; (353c <nm_bsp_init+0x48>)
    351c:	4798      	blx	r3

	system_interrupt_enable_global();
    351e:	4b08      	ldr	r3, [pc, #32]	; (3540 <nm_bsp_init+0x4c>)
    3520:	4798      	blx	r3

	return M2M_SUCCESS;
    3522:	2300      	movs	r3, #0
}
    3524:	0018      	movs	r0, r3
    3526:	46bd      	mov	sp, r7
    3528:	bd80      	pop	{r7, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	2000025c 	.word	0x2000025c
    3530:	0000349d 	.word	0x0000349d
    3534:	e000e010 	.word	0xe000e010
    3538:	000032cd 	.word	0x000032cd
    353c:	00003545 	.word	0x00003545
    3540:	000033e5 	.word	0x000033e5

00003544 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3544:	b580      	push	{r7, lr}
    3546:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3548:	2100      	movs	r1, #0
    354a:	201c      	movs	r0, #28
    354c:	4b0b      	ldr	r3, [pc, #44]	; (357c <nm_bsp_reset+0x38>)
    354e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    3550:	2100      	movs	r1, #0
    3552:	201b      	movs	r0, #27
    3554:	4b09      	ldr	r3, [pc, #36]	; (357c <nm_bsp_reset+0x38>)
    3556:	4798      	blx	r3
	nm_bsp_sleep(1);
    3558:	2001      	movs	r0, #1
    355a:	4b09      	ldr	r3, [pc, #36]	; (3580 <nm_bsp_reset+0x3c>)
    355c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    355e:	2101      	movs	r1, #1
    3560:	201c      	movs	r0, #28
    3562:	4b06      	ldr	r3, [pc, #24]	; (357c <nm_bsp_reset+0x38>)
    3564:	4798      	blx	r3
	nm_bsp_sleep(10);
    3566:	200a      	movs	r0, #10
    3568:	4b05      	ldr	r3, [pc, #20]	; (3580 <nm_bsp_reset+0x3c>)
    356a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    356c:	2101      	movs	r1, #1
    356e:	201b      	movs	r0, #27
    3570:	4b02      	ldr	r3, [pc, #8]	; (357c <nm_bsp_reset+0x38>)
    3572:	4798      	blx	r3
}
    3574:	46c0      	nop			; (mov r8, r8)
    3576:	46bd      	mov	sp, r7
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	00003449 	.word	0x00003449
    3580:	00003585 	.word	0x00003585

00003584 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    3584:	b580      	push	{r7, lr}
    3586:	b082      	sub	sp, #8
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    358c:	e002      	b.n	3594 <nm_bsp_sleep+0x10>
		delay_ms(1);
    358e:	2001      	movs	r0, #1
    3590:	4b05      	ldr	r3, [pc, #20]	; (35a8 <nm_bsp_sleep+0x24>)
    3592:	4798      	blx	r3
	while (u32TimeMsec--) {
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	1e5a      	subs	r2, r3, #1
    3598:	607a      	str	r2, [r7, #4]
    359a:	2b00      	cmp	r3, #0
    359c:	d1f7      	bne.n	358e <nm_bsp_sleep+0xa>
	}
}
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	46bd      	mov	sp, r7
    35a2:	b002      	add	sp, #8
    35a4:	bd80      	pop	{r7, pc}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	00003355 	.word	0x00003355

000035ac <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    35ac:	b580      	push	{r7, lr}
    35ae:	b082      	sub	sp, #8
    35b0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    35b2:	4b10      	ldr	r3, [pc, #64]	; (35f4 <cpu_irq_enter_critical+0x48>)
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d112      	bne.n	35e0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    35ba:	f3ef 8310 	mrs	r3, PRIMASK
    35be:	607b      	str	r3, [r7, #4]
  return(result);
    35c0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    35c2:	2b00      	cmp	r3, #0
    35c4:	d109      	bne.n	35da <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    35c6:	b672      	cpsid	i
    35c8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    35cc:	4b0a      	ldr	r3, [pc, #40]	; (35f8 <cpu_irq_enter_critical+0x4c>)
    35ce:	2200      	movs	r2, #0
    35d0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    35d2:	4b0a      	ldr	r3, [pc, #40]	; (35fc <cpu_irq_enter_critical+0x50>)
    35d4:	2201      	movs	r2, #1
    35d6:	701a      	strb	r2, [r3, #0]
    35d8:	e002      	b.n	35e0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    35da:	4b08      	ldr	r3, [pc, #32]	; (35fc <cpu_irq_enter_critical+0x50>)
    35dc:	2200      	movs	r2, #0
    35de:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    35e0:	4b04      	ldr	r3, [pc, #16]	; (35f4 <cpu_irq_enter_critical+0x48>)
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	1c5a      	adds	r2, r3, #1
    35e6:	4b03      	ldr	r3, [pc, #12]	; (35f4 <cpu_irq_enter_critical+0x48>)
    35e8:	601a      	str	r2, [r3, #0]
}
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	46bd      	mov	sp, r7
    35ee:	b002      	add	sp, #8
    35f0:	bd80      	pop	{r7, pc}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	20000260 	.word	0x20000260
    35f8:	20000064 	.word	0x20000064
    35fc:	20000264 	.word	0x20000264

00003600 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3600:	b580      	push	{r7, lr}
    3602:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3604:	4b0b      	ldr	r3, [pc, #44]	; (3634 <cpu_irq_leave_critical+0x34>)
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	1e5a      	subs	r2, r3, #1
    360a:	4b0a      	ldr	r3, [pc, #40]	; (3634 <cpu_irq_leave_critical+0x34>)
    360c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    360e:	4b09      	ldr	r3, [pc, #36]	; (3634 <cpu_irq_leave_critical+0x34>)
    3610:	681b      	ldr	r3, [r3, #0]
    3612:	2b00      	cmp	r3, #0
    3614:	d10a      	bne.n	362c <cpu_irq_leave_critical+0x2c>
    3616:	4b08      	ldr	r3, [pc, #32]	; (3638 <cpu_irq_leave_critical+0x38>)
    3618:	781b      	ldrb	r3, [r3, #0]
    361a:	b2db      	uxtb	r3, r3
    361c:	2b00      	cmp	r3, #0
    361e:	d005      	beq.n	362c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3620:	4b06      	ldr	r3, [pc, #24]	; (363c <cpu_irq_leave_critical+0x3c>)
    3622:	2201      	movs	r2, #1
    3624:	701a      	strb	r2, [r3, #0]
    3626:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    362a:	b662      	cpsie	i
	}
}
    362c:	46c0      	nop			; (mov r8, r8)
    362e:	46bd      	mov	sp, r7
    3630:	bd80      	pop	{r7, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	20000260 	.word	0x20000260
    3638:	20000264 	.word	0x20000264
    363c:	20000064 	.word	0x20000064

00003640 <system_pinmux_get_group_from_gpio_pin>:
{
    3640:	b580      	push	{r7, lr}
    3642:	b084      	sub	sp, #16
    3644:	af00      	add	r7, sp, #0
    3646:	0002      	movs	r2, r0
    3648:	1dfb      	adds	r3, r7, #7
    364a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    364c:	230f      	movs	r3, #15
    364e:	18fb      	adds	r3, r7, r3
    3650:	1dfa      	adds	r2, r7, #7
    3652:	7812      	ldrb	r2, [r2, #0]
    3654:	09d2      	lsrs	r2, r2, #7
    3656:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3658:	230e      	movs	r3, #14
    365a:	18fb      	adds	r3, r7, r3
    365c:	1dfa      	adds	r2, r7, #7
    365e:	7812      	ldrb	r2, [r2, #0]
    3660:	0952      	lsrs	r2, r2, #5
    3662:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3664:	4b0d      	ldr	r3, [pc, #52]	; (369c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3666:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3668:	230f      	movs	r3, #15
    366a:	18fb      	adds	r3, r7, r3
    366c:	781b      	ldrb	r3, [r3, #0]
    366e:	2b00      	cmp	r3, #0
    3670:	d10f      	bne.n	3692 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3672:	230f      	movs	r3, #15
    3674:	18fb      	adds	r3, r7, r3
    3676:	781b      	ldrb	r3, [r3, #0]
    3678:	009b      	lsls	r3, r3, #2
    367a:	2210      	movs	r2, #16
    367c:	4694      	mov	ip, r2
    367e:	44bc      	add	ip, r7
    3680:	4463      	add	r3, ip
    3682:	3b08      	subs	r3, #8
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	230e      	movs	r3, #14
    3688:	18fb      	adds	r3, r7, r3
    368a:	781b      	ldrb	r3, [r3, #0]
    368c:	01db      	lsls	r3, r3, #7
    368e:	18d3      	adds	r3, r2, r3
    3690:	e000      	b.n	3694 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3692:	2300      	movs	r3, #0
}
    3694:	0018      	movs	r0, r3
    3696:	46bd      	mov	sp, r7
    3698:	b004      	add	sp, #16
    369a:	bd80      	pop	{r7, pc}
    369c:	41004400 	.word	0x41004400

000036a0 <port_get_group_from_gpio_pin>:
{
    36a0:	b580      	push	{r7, lr}
    36a2:	b082      	sub	sp, #8
    36a4:	af00      	add	r7, sp, #0
    36a6:	0002      	movs	r2, r0
    36a8:	1dfb      	adds	r3, r7, #7
    36aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    36ac:	1dfb      	adds	r3, r7, #7
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	0018      	movs	r0, r3
    36b2:	4b03      	ldr	r3, [pc, #12]	; (36c0 <port_get_group_from_gpio_pin+0x20>)
    36b4:	4798      	blx	r3
    36b6:	0003      	movs	r3, r0
}
    36b8:	0018      	movs	r0, r3
    36ba:	46bd      	mov	sp, r7
    36bc:	b002      	add	sp, #8
    36be:	bd80      	pop	{r7, pc}
    36c0:	00003641 	.word	0x00003641

000036c4 <port_get_config_defaults>:
{
    36c4:	b580      	push	{r7, lr}
    36c6:	b082      	sub	sp, #8
    36c8:	af00      	add	r7, sp, #0
    36ca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	2200      	movs	r2, #0
    36d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	2201      	movs	r2, #1
    36d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	2200      	movs	r2, #0
    36dc:	709a      	strb	r2, [r3, #2]
}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	46bd      	mov	sp, r7
    36e2:	b002      	add	sp, #8
    36e4:	bd80      	pop	{r7, pc}
	...

000036e8 <port_pin_set_output_level>:
{
    36e8:	b580      	push	{r7, lr}
    36ea:	b084      	sub	sp, #16
    36ec:	af00      	add	r7, sp, #0
    36ee:	0002      	movs	r2, r0
    36f0:	1dfb      	adds	r3, r7, #7
    36f2:	701a      	strb	r2, [r3, #0]
    36f4:	1dbb      	adds	r3, r7, #6
    36f6:	1c0a      	adds	r2, r1, #0
    36f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    36fa:	1dfb      	adds	r3, r7, #7
    36fc:	781b      	ldrb	r3, [r3, #0]
    36fe:	0018      	movs	r0, r3
    3700:	4b0d      	ldr	r3, [pc, #52]	; (3738 <port_pin_set_output_level+0x50>)
    3702:	4798      	blx	r3
    3704:	0003      	movs	r3, r0
    3706:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3708:	1dfb      	adds	r3, r7, #7
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	221f      	movs	r2, #31
    370e:	4013      	ands	r3, r2
    3710:	2201      	movs	r2, #1
    3712:	409a      	lsls	r2, r3
    3714:	0013      	movs	r3, r2
    3716:	60bb      	str	r3, [r7, #8]
	if (level) {
    3718:	1dbb      	adds	r3, r7, #6
    371a:	781b      	ldrb	r3, [r3, #0]
    371c:	2b00      	cmp	r3, #0
    371e:	d003      	beq.n	3728 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	68ba      	ldr	r2, [r7, #8]
    3724:	619a      	str	r2, [r3, #24]
}
    3726:	e002      	b.n	372e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3728:	68fb      	ldr	r3, [r7, #12]
    372a:	68ba      	ldr	r2, [r7, #8]
    372c:	615a      	str	r2, [r3, #20]
}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	46bd      	mov	sp, r7
    3732:	b004      	add	sp, #16
    3734:	bd80      	pop	{r7, pc}
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	000036a1 	.word	0x000036a1

0000373c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    373c:	b580      	push	{r7, lr}
    373e:	b082      	sub	sp, #8
    3740:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3742:	1d3b      	adds	r3, r7, #4
    3744:	0018      	movs	r0, r3
    3746:	4b0e      	ldr	r3, [pc, #56]	; (3780 <system_board_init+0x44>)
    3748:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    374a:	1d3b      	adds	r3, r7, #4
    374c:	2201      	movs	r2, #1
    374e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3750:	1d3b      	adds	r3, r7, #4
    3752:	0019      	movs	r1, r3
    3754:	2017      	movs	r0, #23
    3756:	4b0b      	ldr	r3, [pc, #44]	; (3784 <system_board_init+0x48>)
    3758:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    375a:	2101      	movs	r1, #1
    375c:	2017      	movs	r0, #23
    375e:	4b0a      	ldr	r3, [pc, #40]	; (3788 <system_board_init+0x4c>)
    3760:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3762:	1d3b      	adds	r3, r7, #4
    3764:	2200      	movs	r2, #0
    3766:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3768:	1d3b      	adds	r3, r7, #4
    376a:	2201      	movs	r2, #1
    376c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    376e:	1d3b      	adds	r3, r7, #4
    3770:	0019      	movs	r1, r3
    3772:	2037      	movs	r0, #55	; 0x37
    3774:	4b03      	ldr	r3, [pc, #12]	; (3784 <system_board_init+0x48>)
    3776:	4798      	blx	r3
}
    3778:	46c0      	nop			; (mov r8, r8)
    377a:	46bd      	mov	sp, r7
    377c:	b002      	add	sp, #8
    377e:	bd80      	pop	{r7, pc}
    3780:	000036c5 	.word	0x000036c5
    3784:	00003b19 	.word	0x00003b19
    3788:	000036e9 	.word	0x000036e9

0000378c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    378c:	b580      	push	{r7, lr}
    378e:	b084      	sub	sp, #16
    3790:	af00      	add	r7, sp, #0
    3792:	0002      	movs	r2, r0
    3794:	1dfb      	adds	r3, r7, #7
    3796:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3798:	230f      	movs	r3, #15
    379a:	18fb      	adds	r3, r7, r3
    379c:	1dfa      	adds	r2, r7, #7
    379e:	7812      	ldrb	r2, [r2, #0]
    37a0:	0952      	lsrs	r2, r2, #5
    37a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    37a4:	230f      	movs	r3, #15
    37a6:	18fb      	adds	r3, r7, r3
    37a8:	781b      	ldrb	r3, [r3, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d10c      	bne.n	37c8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    37ae:	4b09      	ldr	r3, [pc, #36]	; (37d4 <_extint_get_eic_from_channel+0x48>)
    37b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    37b2:	230f      	movs	r3, #15
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	781b      	ldrb	r3, [r3, #0]
    37b8:	009b      	lsls	r3, r3, #2
    37ba:	2210      	movs	r2, #16
    37bc:	4694      	mov	ip, r2
    37be:	44bc      	add	ip, r7
    37c0:	4463      	add	r3, ip
    37c2:	3b08      	subs	r3, #8
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	e000      	b.n	37ca <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    37c8:	2300      	movs	r3, #0
	}
}
    37ca:	0018      	movs	r0, r3
    37cc:	46bd      	mov	sp, r7
    37ce:	b004      	add	sp, #16
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	40001800 	.word	0x40001800

000037d8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    37d8:	b580      	push	{r7, lr}
    37da:	b084      	sub	sp, #16
    37dc:	af00      	add	r7, sp, #0
    37de:	0002      	movs	r2, r0
    37e0:	1dfb      	adds	r3, r7, #7
    37e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    37e4:	1dfb      	adds	r3, r7, #7
    37e6:	781b      	ldrb	r3, [r3, #0]
    37e8:	0018      	movs	r0, r3
    37ea:	4b0b      	ldr	r3, [pc, #44]	; (3818 <extint_chan_is_detected+0x40>)
    37ec:	4798      	blx	r3
    37ee:	0003      	movs	r3, r0
    37f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    37f2:	1dfb      	adds	r3, r7, #7
    37f4:	781b      	ldrb	r3, [r3, #0]
    37f6:	221f      	movs	r2, #31
    37f8:	4013      	ands	r3, r2
    37fa:	2201      	movs	r2, #1
    37fc:	409a      	lsls	r2, r3
    37fe:	0013      	movs	r3, r2
    3800:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3802:	68fb      	ldr	r3, [r7, #12]
    3804:	691b      	ldr	r3, [r3, #16]
    3806:	68ba      	ldr	r2, [r7, #8]
    3808:	4013      	ands	r3, r2
    380a:	1e5a      	subs	r2, r3, #1
    380c:	4193      	sbcs	r3, r2
    380e:	b2db      	uxtb	r3, r3
}
    3810:	0018      	movs	r0, r3
    3812:	46bd      	mov	sp, r7
    3814:	b004      	add	sp, #16
    3816:	bd80      	pop	{r7, pc}
    3818:	0000378d 	.word	0x0000378d

0000381c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    381c:	b580      	push	{r7, lr}
    381e:	b084      	sub	sp, #16
    3820:	af00      	add	r7, sp, #0
    3822:	0002      	movs	r2, r0
    3824:	1dfb      	adds	r3, r7, #7
    3826:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3828:	1dfb      	adds	r3, r7, #7
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	0018      	movs	r0, r3
    382e:	4b09      	ldr	r3, [pc, #36]	; (3854 <extint_chan_clear_detected+0x38>)
    3830:	4798      	blx	r3
    3832:	0003      	movs	r3, r0
    3834:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3836:	1dfb      	adds	r3, r7, #7
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	221f      	movs	r2, #31
    383c:	4013      	ands	r3, r2
    383e:	2201      	movs	r2, #1
    3840:	409a      	lsls	r2, r3
    3842:	0013      	movs	r3, r2
    3844:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	68ba      	ldr	r2, [r7, #8]
    384a:	611a      	str	r2, [r3, #16]
}
    384c:	46c0      	nop			; (mov r8, r8)
    384e:	46bd      	mov	sp, r7
    3850:	b004      	add	sp, #16
    3852:	bd80      	pop	{r7, pc}
    3854:	0000378d 	.word	0x0000378d

00003858 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3858:	b580      	push	{r7, lr}
    385a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    385c:	4b15      	ldr	r3, [pc, #84]	; (38b4 <EIC_Handler+0x5c>)
    385e:	2200      	movs	r2, #0
    3860:	701a      	strb	r2, [r3, #0]
    3862:	e020      	b.n	38a6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    3864:	4b13      	ldr	r3, [pc, #76]	; (38b4 <EIC_Handler+0x5c>)
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	0018      	movs	r0, r3
    386a:	4b13      	ldr	r3, [pc, #76]	; (38b8 <EIC_Handler+0x60>)
    386c:	4798      	blx	r3
    386e:	1e03      	subs	r3, r0, #0
    3870:	d013      	beq.n	389a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    3872:	4b10      	ldr	r3, [pc, #64]	; (38b4 <EIC_Handler+0x5c>)
    3874:	781b      	ldrb	r3, [r3, #0]
    3876:	0018      	movs	r0, r3
    3878:	4b10      	ldr	r3, [pc, #64]	; (38bc <EIC_Handler+0x64>)
    387a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    387c:	4b0d      	ldr	r3, [pc, #52]	; (38b4 <EIC_Handler+0x5c>)
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	001a      	movs	r2, r3
    3882:	4b0f      	ldr	r3, [pc, #60]	; (38c0 <EIC_Handler+0x68>)
    3884:	0092      	lsls	r2, r2, #2
    3886:	58d3      	ldr	r3, [r2, r3]
    3888:	2b00      	cmp	r3, #0
    388a:	d006      	beq.n	389a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    388c:	4b09      	ldr	r3, [pc, #36]	; (38b4 <EIC_Handler+0x5c>)
    388e:	781b      	ldrb	r3, [r3, #0]
    3890:	001a      	movs	r2, r3
    3892:	4b0b      	ldr	r3, [pc, #44]	; (38c0 <EIC_Handler+0x68>)
    3894:	0092      	lsls	r2, r2, #2
    3896:	58d3      	ldr	r3, [r2, r3]
    3898:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    389a:	4b06      	ldr	r3, [pc, #24]	; (38b4 <EIC_Handler+0x5c>)
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	3301      	adds	r3, #1
    38a0:	b2da      	uxtb	r2, r3
    38a2:	4b04      	ldr	r3, [pc, #16]	; (38b4 <EIC_Handler+0x5c>)
    38a4:	701a      	strb	r2, [r3, #0]
    38a6:	4b03      	ldr	r3, [pc, #12]	; (38b4 <EIC_Handler+0x5c>)
    38a8:	781b      	ldrb	r3, [r3, #0]
    38aa:	2b0f      	cmp	r3, #15
    38ac:	d9da      	bls.n	3864 <EIC_Handler+0xc>
			}
		}
	}
}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	46bd      	mov	sp, r7
    38b2:	bd80      	pop	{r7, pc}
    38b4:	2000037c 	.word	0x2000037c
    38b8:	000037d9 	.word	0x000037d9
    38bc:	0000381d 	.word	0x0000381d
    38c0:	20000380 	.word	0x20000380

000038c4 <system_gclk_chan_get_config_defaults>:
{
    38c4:	b580      	push	{r7, lr}
    38c6:	b082      	sub	sp, #8
    38c8:	af00      	add	r7, sp, #0
    38ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	2200      	movs	r2, #0
    38d0:	701a      	strb	r2, [r3, #0]
}
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	46bd      	mov	sp, r7
    38d6:	b002      	add	sp, #8
    38d8:	bd80      	pop	{r7, pc}
	...

000038dc <system_apb_clock_set_mask>:
{
    38dc:	b580      	push	{r7, lr}
    38de:	b082      	sub	sp, #8
    38e0:	af00      	add	r7, sp, #0
    38e2:	0002      	movs	r2, r0
    38e4:	6039      	str	r1, [r7, #0]
    38e6:	1dfb      	adds	r3, r7, #7
    38e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    38ea:	1dfb      	adds	r3, r7, #7
    38ec:	781b      	ldrb	r3, [r3, #0]
    38ee:	2b01      	cmp	r3, #1
    38f0:	d00a      	beq.n	3908 <system_apb_clock_set_mask+0x2c>
    38f2:	2b02      	cmp	r3, #2
    38f4:	d00f      	beq.n	3916 <system_apb_clock_set_mask+0x3a>
    38f6:	2b00      	cmp	r3, #0
    38f8:	d114      	bne.n	3924 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    38fa:	4b0e      	ldr	r3, [pc, #56]	; (3934 <system_apb_clock_set_mask+0x58>)
    38fc:	4a0d      	ldr	r2, [pc, #52]	; (3934 <system_apb_clock_set_mask+0x58>)
    38fe:	6991      	ldr	r1, [r2, #24]
    3900:	683a      	ldr	r2, [r7, #0]
    3902:	430a      	orrs	r2, r1
    3904:	619a      	str	r2, [r3, #24]
			break;
    3906:	e00f      	b.n	3928 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3908:	4b0a      	ldr	r3, [pc, #40]	; (3934 <system_apb_clock_set_mask+0x58>)
    390a:	4a0a      	ldr	r2, [pc, #40]	; (3934 <system_apb_clock_set_mask+0x58>)
    390c:	69d1      	ldr	r1, [r2, #28]
    390e:	683a      	ldr	r2, [r7, #0]
    3910:	430a      	orrs	r2, r1
    3912:	61da      	str	r2, [r3, #28]
			break;
    3914:	e008      	b.n	3928 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3916:	4b07      	ldr	r3, [pc, #28]	; (3934 <system_apb_clock_set_mask+0x58>)
    3918:	4a06      	ldr	r2, [pc, #24]	; (3934 <system_apb_clock_set_mask+0x58>)
    391a:	6a11      	ldr	r1, [r2, #32]
    391c:	683a      	ldr	r2, [r7, #0]
    391e:	430a      	orrs	r2, r1
    3920:	621a      	str	r2, [r3, #32]
			break;
    3922:	e001      	b.n	3928 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3924:	2317      	movs	r3, #23
    3926:	e000      	b.n	392a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3928:	2300      	movs	r3, #0
}
    392a:	0018      	movs	r0, r3
    392c:	46bd      	mov	sp, r7
    392e:	b002      	add	sp, #8
    3930:	bd80      	pop	{r7, pc}
    3932:	46c0      	nop			; (mov r8, r8)
    3934:	40000400 	.word	0x40000400

00003938 <system_interrupt_enable>:
{
    3938:	b580      	push	{r7, lr}
    393a:	b082      	sub	sp, #8
    393c:	af00      	add	r7, sp, #0
    393e:	0002      	movs	r2, r0
    3940:	1dfb      	adds	r3, r7, #7
    3942:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3944:	4b06      	ldr	r3, [pc, #24]	; (3960 <system_interrupt_enable+0x28>)
    3946:	1dfa      	adds	r2, r7, #7
    3948:	7812      	ldrb	r2, [r2, #0]
    394a:	0011      	movs	r1, r2
    394c:	221f      	movs	r2, #31
    394e:	400a      	ands	r2, r1
    3950:	2101      	movs	r1, #1
    3952:	4091      	lsls	r1, r2
    3954:	000a      	movs	r2, r1
    3956:	601a      	str	r2, [r3, #0]
}
    3958:	46c0      	nop			; (mov r8, r8)
    395a:	46bd      	mov	sp, r7
    395c:	b002      	add	sp, #8
    395e:	bd80      	pop	{r7, pc}
    3960:	e000e100 	.word	0xe000e100

00003964 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    3964:	b580      	push	{r7, lr}
    3966:	b082      	sub	sp, #8
    3968:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    396a:	4b0f      	ldr	r3, [pc, #60]	; (39a8 <extint_is_syncing+0x44>)
    396c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    396e:	2300      	movs	r3, #0
    3970:	607b      	str	r3, [r7, #4]
    3972:	e011      	b.n	3998 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3974:	687b      	ldr	r3, [r7, #4]
    3976:	009b      	lsls	r3, r3, #2
    3978:	2208      	movs	r2, #8
    397a:	4694      	mov	ip, r2
    397c:	44bc      	add	ip, r7
    397e:	4463      	add	r3, ip
    3980:	3b08      	subs	r3, #8
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	785b      	ldrb	r3, [r3, #1]
    3986:	b2db      	uxtb	r3, r3
    3988:	b25b      	sxtb	r3, r3
    398a:	2b00      	cmp	r3, #0
    398c:	da01      	bge.n	3992 <extint_is_syncing+0x2e>
			return true;
    398e:	2301      	movs	r3, #1
    3990:	e006      	b.n	39a0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	3301      	adds	r3, #1
    3996:	607b      	str	r3, [r7, #4]
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	2b00      	cmp	r3, #0
    399c:	d0ea      	beq.n	3974 <extint_is_syncing+0x10>
		}
	}
	return false;
    399e:	2300      	movs	r3, #0
}
    39a0:	0018      	movs	r0, r3
    39a2:	46bd      	mov	sp, r7
    39a4:	b002      	add	sp, #8
    39a6:	bd80      	pop	{r7, pc}
    39a8:	40001800 	.word	0x40001800

000039ac <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    39b2:	4b2d      	ldr	r3, [pc, #180]	; (3a68 <_system_extint_init+0xbc>)
    39b4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    39b6:	2140      	movs	r1, #64	; 0x40
    39b8:	2000      	movs	r0, #0
    39ba:	4b2c      	ldr	r3, [pc, #176]	; (3a6c <_system_extint_init+0xc0>)
    39bc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    39be:	003b      	movs	r3, r7
    39c0:	0018      	movs	r0, r3
    39c2:	4b2b      	ldr	r3, [pc, #172]	; (3a70 <_system_extint_init+0xc4>)
    39c4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    39c6:	003b      	movs	r3, r7
    39c8:	2200      	movs	r2, #0
    39ca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    39cc:	003b      	movs	r3, r7
    39ce:	0019      	movs	r1, r3
    39d0:	2005      	movs	r0, #5
    39d2:	4b28      	ldr	r3, [pc, #160]	; (3a74 <_system_extint_init+0xc8>)
    39d4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    39d6:	2005      	movs	r0, #5
    39d8:	4b27      	ldr	r3, [pc, #156]	; (3a78 <_system_extint_init+0xcc>)
    39da:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    39dc:	2300      	movs	r3, #0
    39de:	60fb      	str	r3, [r7, #12]
    39e0:	e018      	b.n	3a14 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	009b      	lsls	r3, r3, #2
    39e6:	2210      	movs	r2, #16
    39e8:	4694      	mov	ip, r2
    39ea:	44bc      	add	ip, r7
    39ec:	4463      	add	r3, ip
    39ee:	3b0c      	subs	r3, #12
    39f0:	681a      	ldr	r2, [r3, #0]
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	009b      	lsls	r3, r3, #2
    39f6:	2110      	movs	r1, #16
    39f8:	468c      	mov	ip, r1
    39fa:	44bc      	add	ip, r7
    39fc:	4463      	add	r3, ip
    39fe:	3b0c      	subs	r3, #12
    3a00:	681b      	ldr	r3, [r3, #0]
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	b2db      	uxtb	r3, r3
    3a06:	2101      	movs	r1, #1
    3a08:	430b      	orrs	r3, r1
    3a0a:	b2db      	uxtb	r3, r3
    3a0c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	3301      	adds	r3, #1
    3a12:	60fb      	str	r3, [r7, #12]
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d0e3      	beq.n	39e2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	4b17      	ldr	r3, [pc, #92]	; (3a7c <_system_extint_init+0xd0>)
    3a1e:	4798      	blx	r3
    3a20:	1e03      	subs	r3, r0, #0
    3a22:	d1fb      	bne.n	3a1c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3a24:	230b      	movs	r3, #11
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	2200      	movs	r2, #0
    3a2a:	701a      	strb	r2, [r3, #0]
    3a2c:	e00d      	b.n	3a4a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    3a2e:	230b      	movs	r3, #11
    3a30:	18fb      	adds	r3, r7, r3
    3a32:	781a      	ldrb	r2, [r3, #0]
    3a34:	4b12      	ldr	r3, [pc, #72]	; (3a80 <_system_extint_init+0xd4>)
    3a36:	0092      	lsls	r2, r2, #2
    3a38:	2100      	movs	r1, #0
    3a3a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3a3c:	230b      	movs	r3, #11
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	781a      	ldrb	r2, [r3, #0]
    3a42:	230b      	movs	r3, #11
    3a44:	18fb      	adds	r3, r7, r3
    3a46:	3201      	adds	r2, #1
    3a48:	701a      	strb	r2, [r3, #0]
    3a4a:	230b      	movs	r3, #11
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	781b      	ldrb	r3, [r3, #0]
    3a50:	2b0f      	cmp	r3, #15
    3a52:	d9ec      	bls.n	3a2e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3a54:	2004      	movs	r0, #4
    3a56:	4b0b      	ldr	r3, [pc, #44]	; (3a84 <_system_extint_init+0xd8>)
    3a58:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3a5a:	4b0b      	ldr	r3, [pc, #44]	; (3a88 <_system_extint_init+0xdc>)
    3a5c:	4798      	blx	r3
}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	46bd      	mov	sp, r7
    3a62:	b004      	add	sp, #16
    3a64:	bd80      	pop	{r7, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	40001800 	.word	0x40001800
    3a6c:	000038dd 	.word	0x000038dd
    3a70:	000038c5 	.word	0x000038c5
    3a74:	000064c1 	.word	0x000064c1
    3a78:	00006505 	.word	0x00006505
    3a7c:	00003965 	.word	0x00003965
    3a80:	20000380 	.word	0x20000380
    3a84:	00003939 	.word	0x00003939
    3a88:	00003a8d 	.word	0x00003a8d

00003a8c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b082      	sub	sp, #8
    3a90:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3a92:	4b15      	ldr	r3, [pc, #84]	; (3ae8 <_extint_enable+0x5c>)
    3a94:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3a96:	2300      	movs	r3, #0
    3a98:	607b      	str	r3, [r7, #4]
    3a9a:	e018      	b.n	3ace <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	009b      	lsls	r3, r3, #2
    3aa0:	2208      	movs	r2, #8
    3aa2:	4694      	mov	ip, r2
    3aa4:	44bc      	add	ip, r7
    3aa6:	4463      	add	r3, ip
    3aa8:	3b08      	subs	r3, #8
    3aaa:	681a      	ldr	r2, [r3, #0]
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	009b      	lsls	r3, r3, #2
    3ab0:	2108      	movs	r1, #8
    3ab2:	468c      	mov	ip, r1
    3ab4:	44bc      	add	ip, r7
    3ab6:	4463      	add	r3, ip
    3ab8:	3b08      	subs	r3, #8
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	b2db      	uxtb	r3, r3
    3ac0:	2102      	movs	r1, #2
    3ac2:	430b      	orrs	r3, r1
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3ac8:	687b      	ldr	r3, [r7, #4]
    3aca:	3301      	adds	r3, #1
    3acc:	607b      	str	r3, [r7, #4]
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d0e3      	beq.n	3a9c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    3ad4:	46c0      	nop			; (mov r8, r8)
    3ad6:	4b05      	ldr	r3, [pc, #20]	; (3aec <_extint_enable+0x60>)
    3ad8:	4798      	blx	r3
    3ada:	1e03      	subs	r3, r0, #0
    3adc:	d1fb      	bne.n	3ad6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3ade:	46c0      	nop			; (mov r8, r8)
    3ae0:	46bd      	mov	sp, r7
    3ae2:	b002      	add	sp, #8
    3ae4:	bd80      	pop	{r7, pc}
    3ae6:	46c0      	nop			; (mov r8, r8)
    3ae8:	40001800 	.word	0x40001800
    3aec:	00003965 	.word	0x00003965

00003af0 <system_pinmux_get_config_defaults>:
{
    3af0:	b580      	push	{r7, lr}
    3af2:	b082      	sub	sp, #8
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	2280      	movs	r2, #128	; 0x80
    3afc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	2200      	movs	r2, #0
    3b02:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	2201      	movs	r2, #1
    3b08:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	2200      	movs	r2, #0
    3b0e:	70da      	strb	r2, [r3, #3]
}
    3b10:	46c0      	nop			; (mov r8, r8)
    3b12:	46bd      	mov	sp, r7
    3b14:	b002      	add	sp, #8
    3b16:	bd80      	pop	{r7, pc}

00003b18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b084      	sub	sp, #16
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	0002      	movs	r2, r0
    3b20:	6039      	str	r1, [r7, #0]
    3b22:	1dfb      	adds	r3, r7, #7
    3b24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3b26:	230c      	movs	r3, #12
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	0018      	movs	r0, r3
    3b2c:	4b10      	ldr	r3, [pc, #64]	; (3b70 <port_pin_set_config+0x58>)
    3b2e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3b30:	230c      	movs	r3, #12
    3b32:	18fb      	adds	r3, r7, r3
    3b34:	2280      	movs	r2, #128	; 0x80
    3b36:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3b38:	683b      	ldr	r3, [r7, #0]
    3b3a:	781a      	ldrb	r2, [r3, #0]
    3b3c:	230c      	movs	r3, #12
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3b42:	683b      	ldr	r3, [r7, #0]
    3b44:	785a      	ldrb	r2, [r3, #1]
    3b46:	230c      	movs	r3, #12
    3b48:	18fb      	adds	r3, r7, r3
    3b4a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	789a      	ldrb	r2, [r3, #2]
    3b50:	230c      	movs	r3, #12
    3b52:	18fb      	adds	r3, r7, r3
    3b54:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3b56:	230c      	movs	r3, #12
    3b58:	18fa      	adds	r2, r7, r3
    3b5a:	1dfb      	adds	r3, r7, #7
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	0011      	movs	r1, r2
    3b60:	0018      	movs	r0, r3
    3b62:	4b04      	ldr	r3, [pc, #16]	; (3b74 <port_pin_set_config+0x5c>)
    3b64:	4798      	blx	r3
}
    3b66:	46c0      	nop			; (mov r8, r8)
    3b68:	46bd      	mov	sp, r7
    3b6a:	b004      	add	sp, #16
    3b6c:	bd80      	pop	{r7, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	00003af1 	.word	0x00003af1
    3b74:	000067ad 	.word	0x000067ad

00003b78 <system_gclk_chan_get_config_defaults>:
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b082      	sub	sp, #8
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	2200      	movs	r2, #0
    3b84:	701a      	strb	r2, [r3, #0]
}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	46bd      	mov	sp, r7
    3b8a:	b002      	add	sp, #8
    3b8c:	bd80      	pop	{r7, pc}

00003b8e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b90:	b08d      	sub	sp, #52	; 0x34
    3b92:	af00      	add	r7, sp, #0
    3b94:	60b8      	str	r0, [r7, #8]
    3b96:	60f9      	str	r1, [r7, #12]
    3b98:	603a      	str	r2, [r7, #0]
    3b9a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3b9c:	2300      	movs	r3, #0
    3b9e:	2400      	movs	r4, #0
    3ba0:	623b      	str	r3, [r7, #32]
    3ba2:	627c      	str	r4, [r7, #36]	; 0x24
    3ba4:	2300      	movs	r3, #0
    3ba6:	2400      	movs	r4, #0
    3ba8:	61bb      	str	r3, [r7, #24]
    3baa:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3bac:	233f      	movs	r3, #63	; 0x3f
    3bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    3bb0:	e053      	b.n	3c5a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bb4:	3b20      	subs	r3, #32
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	db04      	blt.n	3bc4 <long_division+0x36>
    3bba:	2201      	movs	r2, #1
    3bbc:	409a      	lsls	r2, r3
    3bbe:	0013      	movs	r3, r2
    3bc0:	617b      	str	r3, [r7, #20]
    3bc2:	e00b      	b.n	3bdc <long_division+0x4e>
    3bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bc6:	2220      	movs	r2, #32
    3bc8:	1ad3      	subs	r3, r2, r3
    3bca:	2201      	movs	r2, #1
    3bcc:	40da      	lsrs	r2, r3
    3bce:	0013      	movs	r3, r2
    3bd0:	2100      	movs	r1, #0
    3bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3bd4:	4091      	lsls	r1, r2
    3bd6:	000a      	movs	r2, r1
    3bd8:	4313      	orrs	r3, r2
    3bda:	617b      	str	r3, [r7, #20]
    3bdc:	2201      	movs	r2, #1
    3bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3be0:	409a      	lsls	r2, r3
    3be2:	0013      	movs	r3, r2
    3be4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3be6:	69bb      	ldr	r3, [r7, #24]
    3be8:	69fc      	ldr	r4, [r7, #28]
    3bea:	18db      	adds	r3, r3, r3
    3bec:	4164      	adcs	r4, r4
    3bee:	61bb      	str	r3, [r7, #24]
    3bf0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3bf2:	68bb      	ldr	r3, [r7, #8]
    3bf4:	693a      	ldr	r2, [r7, #16]
    3bf6:	401a      	ands	r2, r3
    3bf8:	0015      	movs	r5, r2
    3bfa:	68fb      	ldr	r3, [r7, #12]
    3bfc:	697a      	ldr	r2, [r7, #20]
    3bfe:	401a      	ands	r2, r3
    3c00:	0016      	movs	r6, r2
    3c02:	002b      	movs	r3, r5
    3c04:	4333      	orrs	r3, r6
    3c06:	d007      	beq.n	3c18 <long_division+0x8a>
			r |= 0x01;
    3c08:	69bb      	ldr	r3, [r7, #24]
    3c0a:	2201      	movs	r2, #1
    3c0c:	4313      	orrs	r3, r2
    3c0e:	61bb      	str	r3, [r7, #24]
    3c10:	69fb      	ldr	r3, [r7, #28]
    3c12:	2200      	movs	r2, #0
    3c14:	4313      	orrs	r3, r2
    3c16:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3c18:	687a      	ldr	r2, [r7, #4]
    3c1a:	69fb      	ldr	r3, [r7, #28]
    3c1c:	429a      	cmp	r2, r3
    3c1e:	d819      	bhi.n	3c54 <long_division+0xc6>
    3c20:	687a      	ldr	r2, [r7, #4]
    3c22:	69fb      	ldr	r3, [r7, #28]
    3c24:	429a      	cmp	r2, r3
    3c26:	d103      	bne.n	3c30 <long_division+0xa2>
    3c28:	683a      	ldr	r2, [r7, #0]
    3c2a:	69bb      	ldr	r3, [r7, #24]
    3c2c:	429a      	cmp	r2, r3
    3c2e:	d811      	bhi.n	3c54 <long_division+0xc6>
			r = r - d;
    3c30:	69b9      	ldr	r1, [r7, #24]
    3c32:	69fa      	ldr	r2, [r7, #28]
    3c34:	683b      	ldr	r3, [r7, #0]
    3c36:	687c      	ldr	r4, [r7, #4]
    3c38:	1ac9      	subs	r1, r1, r3
    3c3a:	41a2      	sbcs	r2, r4
    3c3c:	000b      	movs	r3, r1
    3c3e:	0014      	movs	r4, r2
    3c40:	61bb      	str	r3, [r7, #24]
    3c42:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3c44:	6a3a      	ldr	r2, [r7, #32]
    3c46:	693b      	ldr	r3, [r7, #16]
    3c48:	4313      	orrs	r3, r2
    3c4a:	623b      	str	r3, [r7, #32]
    3c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c4e:	697b      	ldr	r3, [r7, #20]
    3c50:	4313      	orrs	r3, r2
    3c52:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c56:	3b01      	subs	r3, #1
    3c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	daa8      	bge.n	3bb2 <long_division+0x24>
		}
	}

	return q;
    3c60:	6a3b      	ldr	r3, [r7, #32]
    3c62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3c64:	0018      	movs	r0, r3
    3c66:	0021      	movs	r1, r4
    3c68:	46bd      	mov	sp, r7
    3c6a:	b00d      	add	sp, #52	; 0x34
    3c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c6e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3c6e:	b580      	push	{r7, lr}
    3c70:	b086      	sub	sp, #24
    3c72:	af00      	add	r7, sp, #0
    3c74:	60f8      	str	r0, [r7, #12]
    3c76:	60b9      	str	r1, [r7, #8]
    3c78:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3c7a:	2316      	movs	r3, #22
    3c7c:	18fb      	adds	r3, r7, r3
    3c7e:	2200      	movs	r2, #0
    3c80:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3c82:	68bb      	ldr	r3, [r7, #8]
    3c84:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3c86:	68bb      	ldr	r3, [r7, #8]
    3c88:	085a      	lsrs	r2, r3, #1
    3c8a:	68fb      	ldr	r3, [r7, #12]
    3c8c:	429a      	cmp	r2, r3
    3c8e:	d201      	bcs.n	3c94 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c90:	2340      	movs	r3, #64	; 0x40
    3c92:	e026      	b.n	3ce2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3c94:	68bb      	ldr	r3, [r7, #8]
    3c96:	085b      	lsrs	r3, r3, #1
    3c98:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3c9a:	e00a      	b.n	3cb2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3c9c:	693a      	ldr	r2, [r7, #16]
    3c9e:	68fb      	ldr	r3, [r7, #12]
    3ca0:	1ad3      	subs	r3, r2, r3
    3ca2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3ca4:	2316      	movs	r3, #22
    3ca6:	18fb      	adds	r3, r7, r3
    3ca8:	881a      	ldrh	r2, [r3, #0]
    3caa:	2316      	movs	r3, #22
    3cac:	18fb      	adds	r3, r7, r3
    3cae:	3201      	adds	r2, #1
    3cb0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3cb2:	693a      	ldr	r2, [r7, #16]
    3cb4:	68fb      	ldr	r3, [r7, #12]
    3cb6:	429a      	cmp	r2, r3
    3cb8:	d2f0      	bcs.n	3c9c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3cba:	2316      	movs	r3, #22
    3cbc:	18fb      	adds	r3, r7, r3
    3cbe:	2216      	movs	r2, #22
    3cc0:	18ba      	adds	r2, r7, r2
    3cc2:	8812      	ldrh	r2, [r2, #0]
    3cc4:	3a01      	subs	r2, #1
    3cc6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3cc8:	2316      	movs	r3, #22
    3cca:	18fb      	adds	r3, r7, r3
    3ccc:	881b      	ldrh	r3, [r3, #0]
    3cce:	2bff      	cmp	r3, #255	; 0xff
    3cd0:	d901      	bls.n	3cd6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3cd2:	2340      	movs	r3, #64	; 0x40
    3cd4:	e005      	b.n	3ce2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	2216      	movs	r2, #22
    3cda:	18ba      	adds	r2, r7, r2
    3cdc:	8812      	ldrh	r2, [r2, #0]
    3cde:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3ce0:	2300      	movs	r3, #0
	}
}
    3ce2:	0018      	movs	r0, r3
    3ce4:	46bd      	mov	sp, r7
    3ce6:	b006      	add	sp, #24
    3ce8:	bd80      	pop	{r7, pc}
	...

00003cec <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cee:	b0a1      	sub	sp, #132	; 0x84
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	64f8      	str	r0, [r7, #76]	; 0x4c
    3cf4:	64b9      	str	r1, [r7, #72]	; 0x48
    3cf6:	647a      	str	r2, [r7, #68]	; 0x44
    3cf8:	2243      	movs	r2, #67	; 0x43
    3cfa:	18ba      	adds	r2, r7, r2
    3cfc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3cfe:	2300      	movs	r3, #0
    3d00:	2400      	movs	r4, #0
    3d02:	673b      	str	r3, [r7, #112]	; 0x70
    3d04:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3d06:	2300      	movs	r3, #0
    3d08:	2400      	movs	r4, #0
    3d0a:	66bb      	str	r3, [r7, #104]	; 0x68
    3d0c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3d0e:	2300      	movs	r3, #0
    3d10:	2400      	movs	r4, #0
    3d12:	67bb      	str	r3, [r7, #120]	; 0x78
    3d14:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3d16:	2300      	movs	r3, #0
    3d18:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3d1a:	2358      	movs	r3, #88	; 0x58
    3d1c:	2240      	movs	r2, #64	; 0x40
    3d1e:	4694      	mov	ip, r2
    3d20:	44bc      	add	ip, r7
    3d22:	4463      	add	r3, ip
    3d24:	781a      	ldrb	r2, [r3, #0]
    3d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d28:	435a      	muls	r2, r3
    3d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d2c:	429a      	cmp	r2, r3
    3d2e:	d901      	bls.n	3d34 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3d30:	2340      	movs	r3, #64	; 0x40
    3d32:	e0b3      	b.n	3e9c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3d34:	2343      	movs	r3, #67	; 0x43
    3d36:	18fb      	adds	r3, r7, r3
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d13d      	bne.n	3dba <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3d3e:	2358      	movs	r3, #88	; 0x58
    3d40:	2240      	movs	r2, #64	; 0x40
    3d42:	4694      	mov	ip, r2
    3d44:	44bc      	add	ip, r7
    3d46:	4463      	add	r3, ip
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	b2db      	uxtb	r3, r3
    3d4c:	613b      	str	r3, [r7, #16]
    3d4e:	2300      	movs	r3, #0
    3d50:	617b      	str	r3, [r7, #20]
    3d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3d54:	60bb      	str	r3, [r7, #8]
    3d56:	2300      	movs	r3, #0
    3d58:	60fb      	str	r3, [r7, #12]
    3d5a:	4c52      	ldr	r4, [pc, #328]	; (3ea4 <_sercom_get_async_baud_val+0x1b8>)
    3d5c:	68ba      	ldr	r2, [r7, #8]
    3d5e:	68fb      	ldr	r3, [r7, #12]
    3d60:	6938      	ldr	r0, [r7, #16]
    3d62:	6979      	ldr	r1, [r7, #20]
    3d64:	47a0      	blx	r4
    3d66:	0003      	movs	r3, r0
    3d68:	000c      	movs	r4, r1
    3d6a:	001b      	movs	r3, r3
    3d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    3d6e:	2300      	movs	r3, #0
    3d70:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3d74:	603b      	str	r3, [r7, #0]
    3d76:	2300      	movs	r3, #0
    3d78:	607b      	str	r3, [r7, #4]
    3d7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3d7c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3d7e:	683a      	ldr	r2, [r7, #0]
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	4c49      	ldr	r4, [pc, #292]	; (3ea8 <_sercom_get_async_baud_val+0x1bc>)
    3d84:	47a0      	blx	r4
    3d86:	0003      	movs	r3, r0
    3d88:	000c      	movs	r4, r1
    3d8a:	673b      	str	r3, [r7, #112]	; 0x70
    3d8c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3d8e:	2100      	movs	r1, #0
    3d90:	2201      	movs	r2, #1
    3d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3d94:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3d96:	1ac9      	subs	r1, r1, r3
    3d98:	41a2      	sbcs	r2, r4
    3d9a:	000b      	movs	r3, r1
    3d9c:	0014      	movs	r4, r2
    3d9e:	66bb      	str	r3, [r7, #104]	; 0x68
    3da0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3da4:	0c1b      	lsrs	r3, r3, #16
    3da6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3da8:	0416      	lsls	r6, r2, #16
    3daa:	431e      	orrs	r6, r3
    3dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3dae:	041d      	lsls	r5, r3, #16
    3db0:	0033      	movs	r3, r6
    3db2:	67bb      	str	r3, [r7, #120]	; 0x78
    3db4:	2300      	movs	r3, #0
    3db6:	67fb      	str	r3, [r7, #124]	; 0x7c
    3db8:	e06a      	b.n	3e90 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3dba:	2343      	movs	r3, #67	; 0x43
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	781b      	ldrb	r3, [r3, #0]
    3dc0:	2b01      	cmp	r3, #1
    3dc2:	d165      	bne.n	3e90 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3dc6:	633b      	str	r3, [r7, #48]	; 0x30
    3dc8:	2300      	movs	r3, #0
    3dca:	637b      	str	r3, [r7, #52]	; 0x34
    3dcc:	2358      	movs	r3, #88	; 0x58
    3dce:	2240      	movs	r2, #64	; 0x40
    3dd0:	4694      	mov	ip, r2
    3dd2:	44bc      	add	ip, r7
    3dd4:	4463      	add	r3, ip
    3dd6:	781b      	ldrb	r3, [r3, #0]
    3dd8:	b2db      	uxtb	r3, r3
    3dda:	62bb      	str	r3, [r7, #40]	; 0x28
    3ddc:	2300      	movs	r3, #0
    3dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    3de0:	4c30      	ldr	r4, [pc, #192]	; (3ea4 <_sercom_get_async_baud_val+0x1b8>)
    3de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3dea:	47a0      	blx	r4
    3dec:	0003      	movs	r3, r0
    3dee:	000c      	movs	r4, r1
    3df0:	65bb      	str	r3, [r7, #88]	; 0x58
    3df2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3df6:	623b      	str	r3, [r7, #32]
    3df8:	2300      	movs	r3, #0
    3dfa:	627b      	str	r3, [r7, #36]	; 0x24
    3dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3dfe:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3e00:	001a      	movs	r2, r3
    3e02:	0023      	movs	r3, r4
    3e04:	6a38      	ldr	r0, [r7, #32]
    3e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3e08:	4c27      	ldr	r4, [pc, #156]	; (3ea8 <_sercom_get_async_baud_val+0x1bc>)
    3e0a:	47a0      	blx	r4
    3e0c:	0003      	movs	r3, r0
    3e0e:	000c      	movs	r4, r1
    3e10:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3e12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3e14:	2380      	movs	r3, #128	; 0x80
    3e16:	019b      	lsls	r3, r3, #6
    3e18:	429a      	cmp	r2, r3
    3e1a:	d901      	bls.n	3e20 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3e1c:	2340      	movs	r3, #64	; 0x40
    3e1e:	e03d      	b.n	3e9c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3e22:	61bb      	str	r3, [r7, #24]
    3e24:	2300      	movs	r3, #0
    3e26:	61fb      	str	r3, [r7, #28]
    3e28:	69b9      	ldr	r1, [r7, #24]
    3e2a:	69fa      	ldr	r2, [r7, #28]
    3e2c:	000b      	movs	r3, r1
    3e2e:	0f5b      	lsrs	r3, r3, #29
    3e30:	0010      	movs	r0, r2
    3e32:	00c0      	lsls	r0, r0, #3
    3e34:	63f8      	str	r0, [r7, #60]	; 0x3c
    3e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3e38:	4318      	orrs	r0, r3
    3e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    3e3c:	000b      	movs	r3, r1
    3e3e:	00db      	lsls	r3, r3, #3
    3e40:	63bb      	str	r3, [r7, #56]	; 0x38
    3e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e44:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3e46:	001a      	movs	r2, r3
    3e48:	0023      	movs	r3, r4
    3e4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3e4e:	4c16      	ldr	r4, [pc, #88]	; (3ea8 <_sercom_get_async_baud_val+0x1bc>)
    3e50:	47a0      	blx	r4
    3e52:	0003      	movs	r3, r0
    3e54:	000c      	movs	r4, r1
    3e56:	65bb      	str	r3, [r7, #88]	; 0x58
    3e58:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e5c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3e5e:	b2d9      	uxtb	r1, r3
    3e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3e62:	b2db      	uxtb	r3, r3
    3e64:	00db      	lsls	r3, r3, #3
    3e66:	b2da      	uxtb	r2, r3
    3e68:	2317      	movs	r3, #23
    3e6a:	2040      	movs	r0, #64	; 0x40
    3e6c:	4684      	mov	ip, r0
    3e6e:	44bc      	add	ip, r7
    3e70:	4463      	add	r3, ip
    3e72:	1a8a      	subs	r2, r1, r2
    3e74:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3e76:	2317      	movs	r3, #23
    3e78:	2240      	movs	r2, #64	; 0x40
    3e7a:	4694      	mov	ip, r2
    3e7c:	44bc      	add	ip, r7
    3e7e:	4463      	add	r3, ip
    3e80:	781b      	ldrb	r3, [r3, #0]
    3e82:	035b      	lsls	r3, r3, #13
    3e84:	001a      	movs	r2, r3
    3e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3e88:	4313      	orrs	r3, r2
    3e8a:	67bb      	str	r3, [r7, #120]	; 0x78
    3e8c:	2300      	movs	r3, #0
    3e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3e92:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3e94:	b29a      	uxth	r2, r3
    3e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e98:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3e9a:	2300      	movs	r3, #0
}
    3e9c:	0018      	movs	r0, r3
    3e9e:	46bd      	mov	sp, r7
    3ea0:	b021      	add	sp, #132	; 0x84
    3ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ea4:	00007721 	.word	0x00007721
    3ea8:	00003b8f 	.word	0x00003b8f

00003eac <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	0002      	movs	r2, r0
    3eb4:	1dfb      	adds	r3, r7, #7
    3eb6:	701a      	strb	r2, [r3, #0]
    3eb8:	1dbb      	adds	r3, r7, #6
    3eba:	1c0a      	adds	r2, r1, #0
    3ebc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3ebe:	4b1a      	ldr	r3, [pc, #104]	; (3f28 <sercom_set_gclk_generator+0x7c>)
    3ec0:	781b      	ldrb	r3, [r3, #0]
    3ec2:	2201      	movs	r2, #1
    3ec4:	4053      	eors	r3, r2
    3ec6:	b2db      	uxtb	r3, r3
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d103      	bne.n	3ed4 <sercom_set_gclk_generator+0x28>
    3ecc:	1dbb      	adds	r3, r7, #6
    3ece:	781b      	ldrb	r3, [r3, #0]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d01b      	beq.n	3f0c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3ed4:	230c      	movs	r3, #12
    3ed6:	18fb      	adds	r3, r7, r3
    3ed8:	0018      	movs	r0, r3
    3eda:	4b14      	ldr	r3, [pc, #80]	; (3f2c <sercom_set_gclk_generator+0x80>)
    3edc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3ede:	230c      	movs	r3, #12
    3ee0:	18fb      	adds	r3, r7, r3
    3ee2:	1dfa      	adds	r2, r7, #7
    3ee4:	7812      	ldrb	r2, [r2, #0]
    3ee6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3ee8:	230c      	movs	r3, #12
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	0019      	movs	r1, r3
    3eee:	2013      	movs	r0, #19
    3ef0:	4b0f      	ldr	r3, [pc, #60]	; (3f30 <sercom_set_gclk_generator+0x84>)
    3ef2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3ef4:	2013      	movs	r0, #19
    3ef6:	4b0f      	ldr	r3, [pc, #60]	; (3f34 <sercom_set_gclk_generator+0x88>)
    3ef8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3efa:	4b0b      	ldr	r3, [pc, #44]	; (3f28 <sercom_set_gclk_generator+0x7c>)
    3efc:	1dfa      	adds	r2, r7, #7
    3efe:	7812      	ldrb	r2, [r2, #0]
    3f00:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3f02:	4b09      	ldr	r3, [pc, #36]	; (3f28 <sercom_set_gclk_generator+0x7c>)
    3f04:	2201      	movs	r2, #1
    3f06:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3f08:	2300      	movs	r3, #0
    3f0a:	e008      	b.n	3f1e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3f0c:	4b06      	ldr	r3, [pc, #24]	; (3f28 <sercom_set_gclk_generator+0x7c>)
    3f0e:	785b      	ldrb	r3, [r3, #1]
    3f10:	1dfa      	adds	r2, r7, #7
    3f12:	7812      	ldrb	r2, [r2, #0]
    3f14:	429a      	cmp	r2, r3
    3f16:	d101      	bne.n	3f1c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3f18:	2300      	movs	r3, #0
    3f1a:	e000      	b.n	3f1e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3f1c:	231d      	movs	r3, #29
}
    3f1e:	0018      	movs	r0, r3
    3f20:	46bd      	mov	sp, r7
    3f22:	b004      	add	sp, #16
    3f24:	bd80      	pop	{r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	20000268 	.word	0x20000268
    3f2c:	00003b79 	.word	0x00003b79
    3f30:	000064c1 	.word	0x000064c1
    3f34:	00006505 	.word	0x00006505

00003f38 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	000a      	movs	r2, r1
    3f42:	1cfb      	adds	r3, r7, #3
    3f44:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	4a4d      	ldr	r2, [pc, #308]	; (4080 <_sercom_get_default_pad+0x148>)
    3f4a:	4293      	cmp	r3, r2
    3f4c:	d03f      	beq.n	3fce <_sercom_get_default_pad+0x96>
    3f4e:	4a4c      	ldr	r2, [pc, #304]	; (4080 <_sercom_get_default_pad+0x148>)
    3f50:	4293      	cmp	r3, r2
    3f52:	d806      	bhi.n	3f62 <_sercom_get_default_pad+0x2a>
    3f54:	4a4b      	ldr	r2, [pc, #300]	; (4084 <_sercom_get_default_pad+0x14c>)
    3f56:	4293      	cmp	r3, r2
    3f58:	d00f      	beq.n	3f7a <_sercom_get_default_pad+0x42>
    3f5a:	4a4b      	ldr	r2, [pc, #300]	; (4088 <_sercom_get_default_pad+0x150>)
    3f5c:	4293      	cmp	r3, r2
    3f5e:	d021      	beq.n	3fa4 <_sercom_get_default_pad+0x6c>
    3f60:	e089      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3f62:	4a4a      	ldr	r2, [pc, #296]	; (408c <_sercom_get_default_pad+0x154>)
    3f64:	4293      	cmp	r3, r2
    3f66:	d100      	bne.n	3f6a <_sercom_get_default_pad+0x32>
    3f68:	e05b      	b.n	4022 <_sercom_get_default_pad+0xea>
    3f6a:	4a49      	ldr	r2, [pc, #292]	; (4090 <_sercom_get_default_pad+0x158>)
    3f6c:	4293      	cmp	r3, r2
    3f6e:	d100      	bne.n	3f72 <_sercom_get_default_pad+0x3a>
    3f70:	e06c      	b.n	404c <_sercom_get_default_pad+0x114>
    3f72:	4a48      	ldr	r2, [pc, #288]	; (4094 <_sercom_get_default_pad+0x15c>)
    3f74:	4293      	cmp	r3, r2
    3f76:	d03f      	beq.n	3ff8 <_sercom_get_default_pad+0xc0>
    3f78:	e07d      	b.n	4076 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3f7a:	1cfb      	adds	r3, r7, #3
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	2b01      	cmp	r3, #1
    3f80:	d00a      	beq.n	3f98 <_sercom_get_default_pad+0x60>
    3f82:	dc02      	bgt.n	3f8a <_sercom_get_default_pad+0x52>
    3f84:	2b00      	cmp	r3, #0
    3f86:	d005      	beq.n	3f94 <_sercom_get_default_pad+0x5c>
    3f88:	e075      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3f8a:	2b02      	cmp	r3, #2
    3f8c:	d006      	beq.n	3f9c <_sercom_get_default_pad+0x64>
    3f8e:	2b03      	cmp	r3, #3
    3f90:	d006      	beq.n	3fa0 <_sercom_get_default_pad+0x68>
    3f92:	e070      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3f94:	4b40      	ldr	r3, [pc, #256]	; (4098 <_sercom_get_default_pad+0x160>)
    3f96:	e06f      	b.n	4078 <_sercom_get_default_pad+0x140>
    3f98:	4b40      	ldr	r3, [pc, #256]	; (409c <_sercom_get_default_pad+0x164>)
    3f9a:	e06d      	b.n	4078 <_sercom_get_default_pad+0x140>
    3f9c:	4b40      	ldr	r3, [pc, #256]	; (40a0 <_sercom_get_default_pad+0x168>)
    3f9e:	e06b      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fa0:	4b40      	ldr	r3, [pc, #256]	; (40a4 <_sercom_get_default_pad+0x16c>)
    3fa2:	e069      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fa4:	1cfb      	adds	r3, r7, #3
    3fa6:	781b      	ldrb	r3, [r3, #0]
    3fa8:	2b01      	cmp	r3, #1
    3faa:	d00a      	beq.n	3fc2 <_sercom_get_default_pad+0x8a>
    3fac:	dc02      	bgt.n	3fb4 <_sercom_get_default_pad+0x7c>
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d005      	beq.n	3fbe <_sercom_get_default_pad+0x86>
    3fb2:	e060      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3fb4:	2b02      	cmp	r3, #2
    3fb6:	d006      	beq.n	3fc6 <_sercom_get_default_pad+0x8e>
    3fb8:	2b03      	cmp	r3, #3
    3fba:	d006      	beq.n	3fca <_sercom_get_default_pad+0x92>
    3fbc:	e05b      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3fbe:	2303      	movs	r3, #3
    3fc0:	e05a      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fc2:	4b39      	ldr	r3, [pc, #228]	; (40a8 <_sercom_get_default_pad+0x170>)
    3fc4:	e058      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fc6:	4b39      	ldr	r3, [pc, #228]	; (40ac <_sercom_get_default_pad+0x174>)
    3fc8:	e056      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fca:	4b39      	ldr	r3, [pc, #228]	; (40b0 <_sercom_get_default_pad+0x178>)
    3fcc:	e054      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fce:	1cfb      	adds	r3, r7, #3
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2b01      	cmp	r3, #1
    3fd4:	d00a      	beq.n	3fec <_sercom_get_default_pad+0xb4>
    3fd6:	dc02      	bgt.n	3fde <_sercom_get_default_pad+0xa6>
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d005      	beq.n	3fe8 <_sercom_get_default_pad+0xb0>
    3fdc:	e04b      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3fde:	2b02      	cmp	r3, #2
    3fe0:	d006      	beq.n	3ff0 <_sercom_get_default_pad+0xb8>
    3fe2:	2b03      	cmp	r3, #3
    3fe4:	d006      	beq.n	3ff4 <_sercom_get_default_pad+0xbc>
    3fe6:	e046      	b.n	4076 <_sercom_get_default_pad+0x13e>
    3fe8:	4b32      	ldr	r3, [pc, #200]	; (40b4 <_sercom_get_default_pad+0x17c>)
    3fea:	e045      	b.n	4078 <_sercom_get_default_pad+0x140>
    3fec:	4b32      	ldr	r3, [pc, #200]	; (40b8 <_sercom_get_default_pad+0x180>)
    3fee:	e043      	b.n	4078 <_sercom_get_default_pad+0x140>
    3ff0:	4b32      	ldr	r3, [pc, #200]	; (40bc <_sercom_get_default_pad+0x184>)
    3ff2:	e041      	b.n	4078 <_sercom_get_default_pad+0x140>
    3ff4:	4b32      	ldr	r3, [pc, #200]	; (40c0 <_sercom_get_default_pad+0x188>)
    3ff6:	e03f      	b.n	4078 <_sercom_get_default_pad+0x140>
    3ff8:	1cfb      	adds	r3, r7, #3
    3ffa:	781b      	ldrb	r3, [r3, #0]
    3ffc:	2b01      	cmp	r3, #1
    3ffe:	d00a      	beq.n	4016 <_sercom_get_default_pad+0xde>
    4000:	dc02      	bgt.n	4008 <_sercom_get_default_pad+0xd0>
    4002:	2b00      	cmp	r3, #0
    4004:	d005      	beq.n	4012 <_sercom_get_default_pad+0xda>
    4006:	e036      	b.n	4076 <_sercom_get_default_pad+0x13e>
    4008:	2b02      	cmp	r3, #2
    400a:	d006      	beq.n	401a <_sercom_get_default_pad+0xe2>
    400c:	2b03      	cmp	r3, #3
    400e:	d006      	beq.n	401e <_sercom_get_default_pad+0xe6>
    4010:	e031      	b.n	4076 <_sercom_get_default_pad+0x13e>
    4012:	4b2c      	ldr	r3, [pc, #176]	; (40c4 <_sercom_get_default_pad+0x18c>)
    4014:	e030      	b.n	4078 <_sercom_get_default_pad+0x140>
    4016:	4b2c      	ldr	r3, [pc, #176]	; (40c8 <_sercom_get_default_pad+0x190>)
    4018:	e02e      	b.n	4078 <_sercom_get_default_pad+0x140>
    401a:	4b2c      	ldr	r3, [pc, #176]	; (40cc <_sercom_get_default_pad+0x194>)
    401c:	e02c      	b.n	4078 <_sercom_get_default_pad+0x140>
    401e:	4b2c      	ldr	r3, [pc, #176]	; (40d0 <_sercom_get_default_pad+0x198>)
    4020:	e02a      	b.n	4078 <_sercom_get_default_pad+0x140>
    4022:	1cfb      	adds	r3, r7, #3
    4024:	781b      	ldrb	r3, [r3, #0]
    4026:	2b01      	cmp	r3, #1
    4028:	d00a      	beq.n	4040 <_sercom_get_default_pad+0x108>
    402a:	dc02      	bgt.n	4032 <_sercom_get_default_pad+0xfa>
    402c:	2b00      	cmp	r3, #0
    402e:	d005      	beq.n	403c <_sercom_get_default_pad+0x104>
    4030:	e021      	b.n	4076 <_sercom_get_default_pad+0x13e>
    4032:	2b02      	cmp	r3, #2
    4034:	d006      	beq.n	4044 <_sercom_get_default_pad+0x10c>
    4036:	2b03      	cmp	r3, #3
    4038:	d006      	beq.n	4048 <_sercom_get_default_pad+0x110>
    403a:	e01c      	b.n	4076 <_sercom_get_default_pad+0x13e>
    403c:	4b25      	ldr	r3, [pc, #148]	; (40d4 <_sercom_get_default_pad+0x19c>)
    403e:	e01b      	b.n	4078 <_sercom_get_default_pad+0x140>
    4040:	4b25      	ldr	r3, [pc, #148]	; (40d8 <_sercom_get_default_pad+0x1a0>)
    4042:	e019      	b.n	4078 <_sercom_get_default_pad+0x140>
    4044:	4b25      	ldr	r3, [pc, #148]	; (40dc <_sercom_get_default_pad+0x1a4>)
    4046:	e017      	b.n	4078 <_sercom_get_default_pad+0x140>
    4048:	4b25      	ldr	r3, [pc, #148]	; (40e0 <_sercom_get_default_pad+0x1a8>)
    404a:	e015      	b.n	4078 <_sercom_get_default_pad+0x140>
    404c:	1cfb      	adds	r3, r7, #3
    404e:	781b      	ldrb	r3, [r3, #0]
    4050:	2b01      	cmp	r3, #1
    4052:	d00a      	beq.n	406a <_sercom_get_default_pad+0x132>
    4054:	dc02      	bgt.n	405c <_sercom_get_default_pad+0x124>
    4056:	2b00      	cmp	r3, #0
    4058:	d005      	beq.n	4066 <_sercom_get_default_pad+0x12e>
    405a:	e00c      	b.n	4076 <_sercom_get_default_pad+0x13e>
    405c:	2b02      	cmp	r3, #2
    405e:	d006      	beq.n	406e <_sercom_get_default_pad+0x136>
    4060:	2b03      	cmp	r3, #3
    4062:	d006      	beq.n	4072 <_sercom_get_default_pad+0x13a>
    4064:	e007      	b.n	4076 <_sercom_get_default_pad+0x13e>
    4066:	4b1f      	ldr	r3, [pc, #124]	; (40e4 <_sercom_get_default_pad+0x1ac>)
    4068:	e006      	b.n	4078 <_sercom_get_default_pad+0x140>
    406a:	4b1f      	ldr	r3, [pc, #124]	; (40e8 <_sercom_get_default_pad+0x1b0>)
    406c:	e004      	b.n	4078 <_sercom_get_default_pad+0x140>
    406e:	4b1f      	ldr	r3, [pc, #124]	; (40ec <_sercom_get_default_pad+0x1b4>)
    4070:	e002      	b.n	4078 <_sercom_get_default_pad+0x140>
    4072:	4b1f      	ldr	r3, [pc, #124]	; (40f0 <_sercom_get_default_pad+0x1b8>)
    4074:	e000      	b.n	4078 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4076:	2300      	movs	r3, #0
}
    4078:	0018      	movs	r0, r3
    407a:	46bd      	mov	sp, r7
    407c:	b002      	add	sp, #8
    407e:	bd80      	pop	{r7, pc}
    4080:	42001000 	.word	0x42001000
    4084:	42000800 	.word	0x42000800
    4088:	42000c00 	.word	0x42000c00
    408c:	42001800 	.word	0x42001800
    4090:	42001c00 	.word	0x42001c00
    4094:	42001400 	.word	0x42001400
    4098:	00040003 	.word	0x00040003
    409c:	00050003 	.word	0x00050003
    40a0:	00060003 	.word	0x00060003
    40a4:	00070003 	.word	0x00070003
    40a8:	00010003 	.word	0x00010003
    40ac:	001e0003 	.word	0x001e0003
    40b0:	001f0003 	.word	0x001f0003
    40b4:	00080003 	.word	0x00080003
    40b8:	00090003 	.word	0x00090003
    40bc:	000a0003 	.word	0x000a0003
    40c0:	000b0003 	.word	0x000b0003
    40c4:	00100003 	.word	0x00100003
    40c8:	00110003 	.word	0x00110003
    40cc:	00120003 	.word	0x00120003
    40d0:	00130003 	.word	0x00130003
    40d4:	000c0003 	.word	0x000c0003
    40d8:	000d0003 	.word	0x000d0003
    40dc:	000e0003 	.word	0x000e0003
    40e0:	000f0003 	.word	0x000f0003
    40e4:	00160003 	.word	0x00160003
    40e8:	00170003 	.word	0x00170003
    40ec:	00180003 	.word	0x00180003
    40f0:	00190003 	.word	0x00190003

000040f4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    40f4:	b590      	push	{r4, r7, lr}
    40f6:	b08b      	sub	sp, #44	; 0x2c
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    40fc:	230c      	movs	r3, #12
    40fe:	18fb      	adds	r3, r7, r3
    4100:	4a0f      	ldr	r2, [pc, #60]	; (4140 <_sercom_get_sercom_inst_index+0x4c>)
    4102:	ca13      	ldmia	r2!, {r0, r1, r4}
    4104:	c313      	stmia	r3!, {r0, r1, r4}
    4106:	ca13      	ldmia	r2!, {r0, r1, r4}
    4108:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    410a:	2300      	movs	r3, #0
    410c:	627b      	str	r3, [r7, #36]	; 0x24
    410e:	e00e      	b.n	412e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4110:	230c      	movs	r3, #12
    4112:	18fb      	adds	r3, r7, r3
    4114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4116:	0092      	lsls	r2, r2, #2
    4118:	58d3      	ldr	r3, [r2, r3]
    411a:	001a      	movs	r2, r3
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	429a      	cmp	r2, r3
    4120:	d102      	bne.n	4128 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4124:	b2db      	uxtb	r3, r3
    4126:	e006      	b.n	4136 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412a:	3301      	adds	r3, #1
    412c:	627b      	str	r3, [r7, #36]	; 0x24
    412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4130:	2b05      	cmp	r3, #5
    4132:	d9ed      	bls.n	4110 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4134:	2300      	movs	r3, #0
}
    4136:	0018      	movs	r0, r3
    4138:	46bd      	mov	sp, r7
    413a:	b00b      	add	sp, #44	; 0x2c
    413c:	bd90      	pop	{r4, r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	0000b51c 	.word	0x0000b51c

00004144 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4144:	b580      	push	{r7, lr}
    4146:	b082      	sub	sp, #8
    4148:	af00      	add	r7, sp, #0
    414a:	0002      	movs	r2, r0
    414c:	1dfb      	adds	r3, r7, #7
    414e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4150:	46c0      	nop			; (mov r8, r8)
    4152:	46bd      	mov	sp, r7
    4154:	b002      	add	sp, #8
    4156:	bd80      	pop	{r7, pc}

00004158 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4158:	b580      	push	{r7, lr}
    415a:	b084      	sub	sp, #16
    415c:	af00      	add	r7, sp, #0
    415e:	0002      	movs	r2, r0
    4160:	6039      	str	r1, [r7, #0]
    4162:	1dfb      	adds	r3, r7, #7
    4164:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4166:	4b13      	ldr	r3, [pc, #76]	; (41b4 <_sercom_set_handler+0x5c>)
    4168:	781b      	ldrb	r3, [r3, #0]
    416a:	2201      	movs	r2, #1
    416c:	4053      	eors	r3, r2
    416e:	b2db      	uxtb	r3, r3
    4170:	2b00      	cmp	r3, #0
    4172:	d015      	beq.n	41a0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4174:	2300      	movs	r3, #0
    4176:	60fb      	str	r3, [r7, #12]
    4178:	e00c      	b.n	4194 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    417a:	4b0f      	ldr	r3, [pc, #60]	; (41b8 <_sercom_set_handler+0x60>)
    417c:	68fa      	ldr	r2, [r7, #12]
    417e:	0092      	lsls	r2, r2, #2
    4180:	490e      	ldr	r1, [pc, #56]	; (41bc <_sercom_set_handler+0x64>)
    4182:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4184:	4b0e      	ldr	r3, [pc, #56]	; (41c0 <_sercom_set_handler+0x68>)
    4186:	68fa      	ldr	r2, [r7, #12]
    4188:	0092      	lsls	r2, r2, #2
    418a:	2100      	movs	r1, #0
    418c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    418e:	68fb      	ldr	r3, [r7, #12]
    4190:	3301      	adds	r3, #1
    4192:	60fb      	str	r3, [r7, #12]
    4194:	68fb      	ldr	r3, [r7, #12]
    4196:	2b05      	cmp	r3, #5
    4198:	d9ef      	bls.n	417a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    419a:	4b06      	ldr	r3, [pc, #24]	; (41b4 <_sercom_set_handler+0x5c>)
    419c:	2201      	movs	r2, #1
    419e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    41a0:	1dfb      	adds	r3, r7, #7
    41a2:	781a      	ldrb	r2, [r3, #0]
    41a4:	4b04      	ldr	r3, [pc, #16]	; (41b8 <_sercom_set_handler+0x60>)
    41a6:	0092      	lsls	r2, r2, #2
    41a8:	6839      	ldr	r1, [r7, #0]
    41aa:	50d1      	str	r1, [r2, r3]
}
    41ac:	46c0      	nop			; (mov r8, r8)
    41ae:	46bd      	mov	sp, r7
    41b0:	b004      	add	sp, #16
    41b2:	bd80      	pop	{r7, pc}
    41b4:	2000026a 	.word	0x2000026a
    41b8:	2000026c 	.word	0x2000026c
    41bc:	00004145 	.word	0x00004145
    41c0:	200003c0 	.word	0x200003c0

000041c4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    41c4:	b590      	push	{r4, r7, lr}
    41c6:	b085      	sub	sp, #20
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    41cc:	2308      	movs	r3, #8
    41ce:	18fb      	adds	r3, r7, r3
    41d0:	4a0b      	ldr	r2, [pc, #44]	; (4200 <_sercom_get_interrupt_vector+0x3c>)
    41d2:	6811      	ldr	r1, [r2, #0]
    41d4:	6019      	str	r1, [r3, #0]
    41d6:	8892      	ldrh	r2, [r2, #4]
    41d8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    41da:	230f      	movs	r3, #15
    41dc:	18fc      	adds	r4, r7, r3
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	0018      	movs	r0, r3
    41e2:	4b08      	ldr	r3, [pc, #32]	; (4204 <_sercom_get_interrupt_vector+0x40>)
    41e4:	4798      	blx	r3
    41e6:	0003      	movs	r3, r0
    41e8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    41ea:	230f      	movs	r3, #15
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2208      	movs	r2, #8
    41f2:	18ba      	adds	r2, r7, r2
    41f4:	5cd3      	ldrb	r3, [r2, r3]
    41f6:	b25b      	sxtb	r3, r3
}
    41f8:	0018      	movs	r0, r3
    41fa:	46bd      	mov	sp, r7
    41fc:	b005      	add	sp, #20
    41fe:	bd90      	pop	{r4, r7, pc}
    4200:	0000b534 	.word	0x0000b534
    4204:	000040f5 	.word	0x000040f5

00004208 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4208:	b580      	push	{r7, lr}
    420a:	af00      	add	r7, sp, #0
    420c:	4b03      	ldr	r3, [pc, #12]	; (421c <SERCOM0_Handler+0x14>)
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	2000      	movs	r0, #0
    4212:	4798      	blx	r3
    4214:	46c0      	nop			; (mov r8, r8)
    4216:	46bd      	mov	sp, r7
    4218:	bd80      	pop	{r7, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	2000026c 	.word	0x2000026c

00004220 <SERCOM1_Handler>:
    4220:	b580      	push	{r7, lr}
    4222:	af00      	add	r7, sp, #0
    4224:	4b03      	ldr	r3, [pc, #12]	; (4234 <SERCOM1_Handler+0x14>)
    4226:	685b      	ldr	r3, [r3, #4]
    4228:	2001      	movs	r0, #1
    422a:	4798      	blx	r3
    422c:	46c0      	nop			; (mov r8, r8)
    422e:	46bd      	mov	sp, r7
    4230:	bd80      	pop	{r7, pc}
    4232:	46c0      	nop			; (mov r8, r8)
    4234:	2000026c 	.word	0x2000026c

00004238 <SERCOM2_Handler>:
    4238:	b580      	push	{r7, lr}
    423a:	af00      	add	r7, sp, #0
    423c:	4b03      	ldr	r3, [pc, #12]	; (424c <SERCOM2_Handler+0x14>)
    423e:	689b      	ldr	r3, [r3, #8]
    4240:	2002      	movs	r0, #2
    4242:	4798      	blx	r3
    4244:	46c0      	nop			; (mov r8, r8)
    4246:	46bd      	mov	sp, r7
    4248:	bd80      	pop	{r7, pc}
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	2000026c 	.word	0x2000026c

00004250 <SERCOM3_Handler>:
    4250:	b580      	push	{r7, lr}
    4252:	af00      	add	r7, sp, #0
    4254:	4b03      	ldr	r3, [pc, #12]	; (4264 <SERCOM3_Handler+0x14>)
    4256:	68db      	ldr	r3, [r3, #12]
    4258:	2003      	movs	r0, #3
    425a:	4798      	blx	r3
    425c:	46c0      	nop			; (mov r8, r8)
    425e:	46bd      	mov	sp, r7
    4260:	bd80      	pop	{r7, pc}
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	2000026c 	.word	0x2000026c

00004268 <SERCOM4_Handler>:
    4268:	b580      	push	{r7, lr}
    426a:	af00      	add	r7, sp, #0
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <SERCOM4_Handler+0x14>)
    426e:	691b      	ldr	r3, [r3, #16]
    4270:	2004      	movs	r0, #4
    4272:	4798      	blx	r3
    4274:	46c0      	nop			; (mov r8, r8)
    4276:	46bd      	mov	sp, r7
    4278:	bd80      	pop	{r7, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	2000026c 	.word	0x2000026c

00004280 <SERCOM5_Handler>:
    4280:	b580      	push	{r7, lr}
    4282:	af00      	add	r7, sp, #0
    4284:	4b03      	ldr	r3, [pc, #12]	; (4294 <SERCOM5_Handler+0x14>)
    4286:	695b      	ldr	r3, [r3, #20]
    4288:	2005      	movs	r0, #5
    428a:	4798      	blx	r3
    428c:	46c0      	nop			; (mov r8, r8)
    428e:	46bd      	mov	sp, r7
    4290:	bd80      	pop	{r7, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	2000026c 	.word	0x2000026c

00004298 <system_pinmux_get_config_defaults>:
{
    4298:	b580      	push	{r7, lr}
    429a:	b082      	sub	sp, #8
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	2280      	movs	r2, #128	; 0x80
    42a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	2200      	movs	r2, #0
    42aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	2201      	movs	r2, #1
    42b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	2200      	movs	r2, #0
    42b6:	70da      	strb	r2, [r3, #3]
}
    42b8:	46c0      	nop			; (mov r8, r8)
    42ba:	46bd      	mov	sp, r7
    42bc:	b002      	add	sp, #8
    42be:	bd80      	pop	{r7, pc}

000042c0 <system_gclk_chan_get_config_defaults>:
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	2200      	movs	r2, #0
    42cc:	701a      	strb	r2, [r3, #0]
}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	46bd      	mov	sp, r7
    42d2:	b002      	add	sp, #8
    42d4:	bd80      	pop	{r7, pc}
	...

000042d8 <system_apb_clock_set_mask>:
{
    42d8:	b580      	push	{r7, lr}
    42da:	b082      	sub	sp, #8
    42dc:	af00      	add	r7, sp, #0
    42de:	0002      	movs	r2, r0
    42e0:	6039      	str	r1, [r7, #0]
    42e2:	1dfb      	adds	r3, r7, #7
    42e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42e6:	1dfb      	adds	r3, r7, #7
    42e8:	781b      	ldrb	r3, [r3, #0]
    42ea:	2b01      	cmp	r3, #1
    42ec:	d00a      	beq.n	4304 <system_apb_clock_set_mask+0x2c>
    42ee:	2b02      	cmp	r3, #2
    42f0:	d00f      	beq.n	4312 <system_apb_clock_set_mask+0x3a>
    42f2:	2b00      	cmp	r3, #0
    42f4:	d114      	bne.n	4320 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42f6:	4b0e      	ldr	r3, [pc, #56]	; (4330 <system_apb_clock_set_mask+0x58>)
    42f8:	4a0d      	ldr	r2, [pc, #52]	; (4330 <system_apb_clock_set_mask+0x58>)
    42fa:	6991      	ldr	r1, [r2, #24]
    42fc:	683a      	ldr	r2, [r7, #0]
    42fe:	430a      	orrs	r2, r1
    4300:	619a      	str	r2, [r3, #24]
			break;
    4302:	e00f      	b.n	4324 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4304:	4b0a      	ldr	r3, [pc, #40]	; (4330 <system_apb_clock_set_mask+0x58>)
    4306:	4a0a      	ldr	r2, [pc, #40]	; (4330 <system_apb_clock_set_mask+0x58>)
    4308:	69d1      	ldr	r1, [r2, #28]
    430a:	683a      	ldr	r2, [r7, #0]
    430c:	430a      	orrs	r2, r1
    430e:	61da      	str	r2, [r3, #28]
			break;
    4310:	e008      	b.n	4324 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4312:	4b07      	ldr	r3, [pc, #28]	; (4330 <system_apb_clock_set_mask+0x58>)
    4314:	4a06      	ldr	r2, [pc, #24]	; (4330 <system_apb_clock_set_mask+0x58>)
    4316:	6a11      	ldr	r1, [r2, #32]
    4318:	683a      	ldr	r2, [r7, #0]
    431a:	430a      	orrs	r2, r1
    431c:	621a      	str	r2, [r3, #32]
			break;
    431e:	e001      	b.n	4324 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4320:	2317      	movs	r3, #23
    4322:	e000      	b.n	4326 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4324:	2300      	movs	r3, #0
}
    4326:	0018      	movs	r0, r3
    4328:	46bd      	mov	sp, r7
    432a:	b002      	add	sp, #8
    432c:	bd80      	pop	{r7, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	40000400 	.word	0x40000400

00004334 <system_is_debugger_present>:
{
    4334:	b580      	push	{r7, lr}
    4336:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4338:	4b05      	ldr	r3, [pc, #20]	; (4350 <system_is_debugger_present+0x1c>)
    433a:	789b      	ldrb	r3, [r3, #2]
    433c:	b2db      	uxtb	r3, r3
    433e:	001a      	movs	r2, r3
    4340:	2302      	movs	r3, #2
    4342:	4013      	ands	r3, r2
    4344:	1e5a      	subs	r2, r3, #1
    4346:	4193      	sbcs	r3, r2
    4348:	b2db      	uxtb	r3, r3
}
    434a:	0018      	movs	r0, r3
    434c:	46bd      	mov	sp, r7
    434e:	bd80      	pop	{r7, pc}
    4350:	41002000 	.word	0x41002000

00004354 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	681b      	ldr	r3, [r3, #0]
    4360:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4362:	68fb      	ldr	r3, [r7, #12]
    4364:	7e1b      	ldrb	r3, [r3, #24]
    4366:	b2db      	uxtb	r3, r3
    4368:	001a      	movs	r2, r3
    436a:	2302      	movs	r3, #2
    436c:	4013      	ands	r3, r2
    436e:	1e5a      	subs	r2, r3, #1
    4370:	4193      	sbcs	r3, r2
    4372:	b2db      	uxtb	r3, r3
}
    4374:	0018      	movs	r0, r3
    4376:	46bd      	mov	sp, r7
    4378:	b004      	add	sp, #16
    437a:	bd80      	pop	{r7, pc}

0000437c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    437c:	b580      	push	{r7, lr}
    437e:	b084      	sub	sp, #16
    4380:	af00      	add	r7, sp, #0
    4382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	681b      	ldr	r3, [r3, #0]
    4388:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	7e1b      	ldrb	r3, [r3, #24]
    438e:	b2db      	uxtb	r3, r3
    4390:	001a      	movs	r2, r3
    4392:	2301      	movs	r3, #1
    4394:	4013      	ands	r3, r2
    4396:	1e5a      	subs	r2, r3, #1
    4398:	4193      	sbcs	r3, r2
    439a:	b2db      	uxtb	r3, r3
}
    439c:	0018      	movs	r0, r3
    439e:	46bd      	mov	sp, r7
    43a0:	b004      	add	sp, #16
    43a2:	bd80      	pop	{r7, pc}

000043a4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b084      	sub	sp, #16
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	7e1b      	ldrb	r3, [r3, #24]
    43b6:	b2db      	uxtb	r3, r3
    43b8:	001a      	movs	r2, r3
    43ba:	2304      	movs	r3, #4
    43bc:	4013      	ands	r3, r2
    43be:	1e5a      	subs	r2, r3, #1
    43c0:	4193      	sbcs	r3, r2
    43c2:	b2db      	uxtb	r3, r3
}
    43c4:	0018      	movs	r0, r3
    43c6:	46bd      	mov	sp, r7
    43c8:	b004      	add	sp, #16
    43ca:	bd80      	pop	{r7, pc}

000043cc <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    43d4:	000a      	movs	r2, r1
    43d6:	1cbb      	adds	r3, r7, #2
    43d8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	0018      	movs	r0, r3
    43e4:	4b0a      	ldr	r3, [pc, #40]	; (4410 <spi_write+0x44>)
    43e6:	4798      	blx	r3
    43e8:	0003      	movs	r3, r0
    43ea:	001a      	movs	r2, r3
    43ec:	2301      	movs	r3, #1
    43ee:	4053      	eors	r3, r2
    43f0:	b2db      	uxtb	r3, r3
    43f2:	2b00      	cmp	r3, #0
    43f4:	d001      	beq.n	43fa <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    43f6:	2305      	movs	r3, #5
    43f8:	e006      	b.n	4408 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43fa:	1cbb      	adds	r3, r7, #2
    43fc:	881b      	ldrh	r3, [r3, #0]
    43fe:	05db      	lsls	r3, r3, #23
    4400:	0dda      	lsrs	r2, r3, #23
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4406:	2300      	movs	r3, #0
}
    4408:	0018      	movs	r0, r3
    440a:	46bd      	mov	sp, r7
    440c:	b004      	add	sp, #16
    440e:	bd80      	pop	{r7, pc}
    4410:	0000437d 	.word	0x0000437d

00004414 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4414:	b580      	push	{r7, lr}
    4416:	b084      	sub	sp, #16
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	681b      	ldr	r3, [r3, #0]
    4422:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	0018      	movs	r0, r3
    4428:	4b1b      	ldr	r3, [pc, #108]	; (4498 <spi_read+0x84>)
    442a:	4798      	blx	r3
    442c:	0003      	movs	r3, r0
    442e:	001a      	movs	r2, r3
    4430:	2301      	movs	r3, #1
    4432:	4053      	eors	r3, r2
    4434:	b2db      	uxtb	r3, r3
    4436:	2b00      	cmp	r3, #0
    4438:	d001      	beq.n	443e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    443a:	2310      	movs	r3, #16
    443c:	e027      	b.n	448e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    443e:	230f      	movs	r3, #15
    4440:	18fb      	adds	r3, r7, r3
    4442:	2200      	movs	r2, #0
    4444:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4446:	68bb      	ldr	r3, [r7, #8]
    4448:	8b5b      	ldrh	r3, [r3, #26]
    444a:	b29b      	uxth	r3, r3
    444c:	001a      	movs	r2, r3
    444e:	2304      	movs	r3, #4
    4450:	4013      	ands	r3, r2
    4452:	d006      	beq.n	4462 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4454:	230f      	movs	r3, #15
    4456:	18fb      	adds	r3, r7, r3
    4458:	221e      	movs	r2, #30
    445a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    445c:	68bb      	ldr	r3, [r7, #8]
    445e:	2204      	movs	r2, #4
    4460:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	799b      	ldrb	r3, [r3, #6]
    4466:	2b01      	cmp	r3, #1
    4468:	d108      	bne.n	447c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    446a:	68bb      	ldr	r3, [r7, #8]
    446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    446e:	b29b      	uxth	r3, r3
    4470:	05db      	lsls	r3, r3, #23
    4472:	0ddb      	lsrs	r3, r3, #23
    4474:	b29a      	uxth	r2, r3
    4476:	683b      	ldr	r3, [r7, #0]
    4478:	801a      	strh	r2, [r3, #0]
    447a:	e005      	b.n	4488 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    447c:	68bb      	ldr	r3, [r7, #8]
    447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4480:	b2db      	uxtb	r3, r3
    4482:	b29a      	uxth	r2, r3
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4488:	230f      	movs	r3, #15
    448a:	18fb      	adds	r3, r7, r3
    448c:	781b      	ldrb	r3, [r3, #0]
}
    448e:	0018      	movs	r0, r3
    4490:	46bd      	mov	sp, r7
    4492:	b004      	add	sp, #16
    4494:	bd80      	pop	{r7, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	000043a5 	.word	0x000043a5

0000449c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    449c:	b590      	push	{r4, r7, lr}
    449e:	b093      	sub	sp, #76	; 0x4c
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]
    44a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44a6:	687b      	ldr	r3, [r7, #4]
    44a8:	681b      	ldr	r3, [r3, #0]
    44aa:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	681b      	ldr	r3, [r3, #0]
    44b0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    44b2:	231c      	movs	r3, #28
    44b4:	18fb      	adds	r3, r7, r3
    44b6:	0018      	movs	r0, r3
    44b8:	4b75      	ldr	r3, [pc, #468]	; (4690 <_spi_set_config+0x1f4>)
    44ba:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44bc:	231c      	movs	r3, #28
    44be:	18fb      	adds	r3, r7, r3
    44c0:	2200      	movs	r2, #0
    44c2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    44c4:	683b      	ldr	r3, [r7, #0]
    44c6:	781b      	ldrb	r3, [r3, #0]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d103      	bne.n	44d4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    44cc:	231c      	movs	r3, #28
    44ce:	18fb      	adds	r3, r7, r3
    44d0:	2200      	movs	r2, #0
    44d2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    44d4:	683b      	ldr	r3, [r7, #0]
    44d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    44d8:	230c      	movs	r3, #12
    44da:	18fb      	adds	r3, r7, r3
    44dc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    44de:	683b      	ldr	r3, [r7, #0]
    44e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    44e2:	230c      	movs	r3, #12
    44e4:	18fb      	adds	r3, r7, r3
    44e6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    44e8:	683b      	ldr	r3, [r7, #0]
    44ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    44ec:	230c      	movs	r3, #12
    44ee:	18fb      	adds	r3, r7, r3
    44f0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    44f2:	683b      	ldr	r3, [r7, #0]
    44f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    44f6:	230c      	movs	r3, #12
    44f8:	18fb      	adds	r3, r7, r3
    44fa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    44fc:	2347      	movs	r3, #71	; 0x47
    44fe:	18fb      	adds	r3, r7, r3
    4500:	2200      	movs	r2, #0
    4502:	701a      	strb	r2, [r3, #0]
    4504:	e02c      	b.n	4560 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4506:	2347      	movs	r3, #71	; 0x47
    4508:	18fb      	adds	r3, r7, r3
    450a:	781a      	ldrb	r2, [r3, #0]
    450c:	230c      	movs	r3, #12
    450e:	18fb      	adds	r3, r7, r3
    4510:	0092      	lsls	r2, r2, #2
    4512:	58d3      	ldr	r3, [r2, r3]
    4514:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4518:	2b00      	cmp	r3, #0
    451a:	d109      	bne.n	4530 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    451c:	2347      	movs	r3, #71	; 0x47
    451e:	18fb      	adds	r3, r7, r3
    4520:	781a      	ldrb	r2, [r3, #0]
    4522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4524:	0011      	movs	r1, r2
    4526:	0018      	movs	r0, r3
    4528:	4b5a      	ldr	r3, [pc, #360]	; (4694 <_spi_set_config+0x1f8>)
    452a:	4798      	blx	r3
    452c:	0003      	movs	r3, r0
    452e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4532:	3301      	adds	r3, #1
    4534:	d00d      	beq.n	4552 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4538:	b2da      	uxtb	r2, r3
    453a:	231c      	movs	r3, #28
    453c:	18fb      	adds	r3, r7, r3
    453e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4542:	0c1b      	lsrs	r3, r3, #16
    4544:	b2db      	uxtb	r3, r3
    4546:	221c      	movs	r2, #28
    4548:	18ba      	adds	r2, r7, r2
    454a:	0011      	movs	r1, r2
    454c:	0018      	movs	r0, r3
    454e:	4b52      	ldr	r3, [pc, #328]	; (4698 <_spi_set_config+0x1fc>)
    4550:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4552:	2347      	movs	r3, #71	; 0x47
    4554:	18fb      	adds	r3, r7, r3
    4556:	781a      	ldrb	r2, [r3, #0]
    4558:	2347      	movs	r3, #71	; 0x47
    455a:	18fb      	adds	r3, r7, r3
    455c:	3201      	adds	r2, #1
    455e:	701a      	strb	r2, [r3, #0]
    4560:	2347      	movs	r3, #71	; 0x47
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	2b03      	cmp	r3, #3
    4568:	d9cd      	bls.n	4506 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    456a:	683b      	ldr	r3, [r7, #0]
    456c:	781a      	ldrb	r2, [r3, #0]
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4572:	683b      	ldr	r3, [r7, #0]
    4574:	7c1a      	ldrb	r2, [r3, #16]
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    457a:	683b      	ldr	r3, [r7, #0]
    457c:	7c9a      	ldrb	r2, [r3, #18]
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4582:	683b      	ldr	r3, [r7, #0]
    4584:	7d1a      	ldrb	r2, [r3, #20]
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    458a:	230a      	movs	r3, #10
    458c:	18fb      	adds	r3, r7, r3
    458e:	2200      	movs	r2, #0
    4590:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4592:	2300      	movs	r3, #0
    4594:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4596:	2300      	movs	r3, #0
    4598:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    459a:	683b      	ldr	r3, [r7, #0]
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	2b01      	cmp	r3, #1
    45a0:	d129      	bne.n	45f6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	0018      	movs	r0, r3
    45a8:	4b3c      	ldr	r3, [pc, #240]	; (469c <_spi_set_config+0x200>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
    45ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45b2:	3314      	adds	r3, #20
    45b4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    45b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    45b8:	b2db      	uxtb	r3, r3
    45ba:	0018      	movs	r0, r3
    45bc:	4b38      	ldr	r3, [pc, #224]	; (46a0 <_spi_set_config+0x204>)
    45be:	4798      	blx	r3
    45c0:	0003      	movs	r3, r0
    45c2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    45c4:	683b      	ldr	r3, [r7, #0]
    45c6:	699b      	ldr	r3, [r3, #24]
    45c8:	2223      	movs	r2, #35	; 0x23
    45ca:	18bc      	adds	r4, r7, r2
    45cc:	220a      	movs	r2, #10
    45ce:	18ba      	adds	r2, r7, r2
    45d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    45d2:	0018      	movs	r0, r3
    45d4:	4b33      	ldr	r3, [pc, #204]	; (46a4 <_spi_set_config+0x208>)
    45d6:	4798      	blx	r3
    45d8:	0003      	movs	r3, r0
    45da:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    45dc:	2323      	movs	r3, #35	; 0x23
    45de:	18fb      	adds	r3, r7, r3
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d001      	beq.n	45ea <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    45e6:	2317      	movs	r3, #23
    45e8:	e04e      	b.n	4688 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    45ea:	230a      	movs	r3, #10
    45ec:	18fb      	adds	r3, r7, r3
    45ee:	881b      	ldrh	r3, [r3, #0]
    45f0:	b2da      	uxtb	r2, r3
    45f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45f4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    45f6:	683b      	ldr	r3, [r7, #0]
    45f8:	685b      	ldr	r3, [r3, #4]
    45fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    45fc:	4313      	orrs	r3, r2
    45fe:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4600:	683b      	ldr	r3, [r7, #0]
    4602:	689b      	ldr	r3, [r3, #8]
    4604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4606:	4313      	orrs	r3, r2
    4608:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    460a:	683b      	ldr	r3, [r7, #0]
    460c:	68db      	ldr	r3, [r3, #12]
    460e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4610:	4313      	orrs	r3, r2
    4612:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	7c1b      	ldrb	r3, [r3, #16]
    4618:	001a      	movs	r2, r3
    461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    461c:	4313      	orrs	r3, r2
    461e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	7c5b      	ldrb	r3, [r3, #17]
    4624:	2b00      	cmp	r3, #0
    4626:	d103      	bne.n	4630 <_spi_set_config+0x194>
    4628:	4b1f      	ldr	r3, [pc, #124]	; (46a8 <_spi_set_config+0x20c>)
    462a:	4798      	blx	r3
    462c:	1e03      	subs	r3, r0, #0
    462e:	d003      	beq.n	4638 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4632:	2280      	movs	r2, #128	; 0x80
    4634:	4313      	orrs	r3, r2
    4636:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4638:	683b      	ldr	r3, [r7, #0]
    463a:	7c9b      	ldrb	r3, [r3, #18]
    463c:	2b00      	cmp	r3, #0
    463e:	d004      	beq.n	464a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4642:	2280      	movs	r2, #128	; 0x80
    4644:	0292      	lsls	r2, r2, #10
    4646:	4313      	orrs	r3, r2
    4648:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    464a:	683b      	ldr	r3, [r7, #0]
    464c:	7cdb      	ldrb	r3, [r3, #19]
    464e:	2b00      	cmp	r3, #0
    4650:	d004      	beq.n	465c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4654:	2280      	movs	r2, #128	; 0x80
    4656:	0092      	lsls	r2, r2, #2
    4658:	4313      	orrs	r3, r2
    465a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    465c:	683b      	ldr	r3, [r7, #0]
    465e:	7d1b      	ldrb	r3, [r3, #20]
    4660:	2b00      	cmp	r3, #0
    4662:	d004      	beq.n	466e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4666:	2280      	movs	r2, #128	; 0x80
    4668:	0192      	lsls	r2, r2, #6
    466a:	4313      	orrs	r3, r2
    466c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4670:	681a      	ldr	r2, [r3, #0]
    4672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4674:	431a      	orrs	r2, r3
    4676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4678:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    467c:	685a      	ldr	r2, [r3, #4]
    467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4680:	431a      	orrs	r2, r3
    4682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4684:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4686:	2300      	movs	r3, #0
}
    4688:	0018      	movs	r0, r3
    468a:	46bd      	mov	sp, r7
    468c:	b013      	add	sp, #76	; 0x4c
    468e:	bd90      	pop	{r4, r7, pc}
    4690:	00004299 	.word	0x00004299
    4694:	00003f39 	.word	0x00003f39
    4698:	000067ad 	.word	0x000067ad
    469c:	000040f5 	.word	0x000040f5
    46a0:	000065e5 	.word	0x000065e5
    46a4:	00003c6f 	.word	0x00003c6f
    46a8:	00004335 	.word	0x00004335

000046ac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    46ac:	b590      	push	{r4, r7, lr}
    46ae:	b08b      	sub	sp, #44	; 0x2c
    46b0:	af00      	add	r7, sp, #0
    46b2:	60f8      	str	r0, [r7, #12]
    46b4:	60b9      	str	r1, [r7, #8]
    46b6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	68ba      	ldr	r2, [r7, #8]
    46bc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    46be:	68fb      	ldr	r3, [r7, #12]
    46c0:	681b      	ldr	r3, [r3, #0]
    46c2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    46c4:	6a3b      	ldr	r3, [r7, #32]
    46c6:	681b      	ldr	r3, [r3, #0]
    46c8:	2202      	movs	r2, #2
    46ca:	4013      	ands	r3, r2
    46cc:	d001      	beq.n	46d2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    46ce:	231c      	movs	r3, #28
    46d0:	e09c      	b.n	480c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    46d2:	6a3b      	ldr	r3, [r7, #32]
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	2201      	movs	r2, #1
    46d8:	4013      	ands	r3, r2
    46da:	d001      	beq.n	46e0 <spi_init+0x34>
		return STATUS_BUSY;
    46dc:	2305      	movs	r3, #5
    46de:	e095      	b.n	480c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    46e0:	68fb      	ldr	r3, [r7, #12]
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	0018      	movs	r0, r3
    46e6:	4b4b      	ldr	r3, [pc, #300]	; (4814 <spi_init+0x168>)
    46e8:	4798      	blx	r3
    46ea:	0003      	movs	r3, r0
    46ec:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    46ee:	69fb      	ldr	r3, [r7, #28]
    46f0:	3302      	adds	r3, #2
    46f2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    46f4:	69fb      	ldr	r3, [r7, #28]
    46f6:	3314      	adds	r3, #20
    46f8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    46fa:	2201      	movs	r2, #1
    46fc:	69bb      	ldr	r3, [r7, #24]
    46fe:	409a      	lsls	r2, r3
    4700:	0013      	movs	r3, r2
    4702:	0019      	movs	r1, r3
    4704:	2002      	movs	r0, #2
    4706:	4b44      	ldr	r3, [pc, #272]	; (4818 <spi_init+0x16c>)
    4708:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    470a:	2310      	movs	r3, #16
    470c:	18fb      	adds	r3, r7, r3
    470e:	0018      	movs	r0, r3
    4710:	4b42      	ldr	r3, [pc, #264]	; (481c <spi_init+0x170>)
    4712:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	2224      	movs	r2, #36	; 0x24
    4718:	5c9a      	ldrb	r2, [r3, r2]
    471a:	2310      	movs	r3, #16
    471c:	18fb      	adds	r3, r7, r3
    471e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4720:	697b      	ldr	r3, [r7, #20]
    4722:	b2db      	uxtb	r3, r3
    4724:	2210      	movs	r2, #16
    4726:	18ba      	adds	r2, r7, r2
    4728:	0011      	movs	r1, r2
    472a:	0018      	movs	r0, r3
    472c:	4b3c      	ldr	r3, [pc, #240]	; (4820 <spi_init+0x174>)
    472e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4730:	697b      	ldr	r3, [r7, #20]
    4732:	b2db      	uxtb	r3, r3
    4734:	0018      	movs	r0, r3
    4736:	4b3b      	ldr	r3, [pc, #236]	; (4824 <spi_init+0x178>)
    4738:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    473a:	687b      	ldr	r3, [r7, #4]
    473c:	2224      	movs	r2, #36	; 0x24
    473e:	5c9b      	ldrb	r3, [r3, r2]
    4740:	2100      	movs	r1, #0
    4742:	0018      	movs	r0, r3
    4744:	4b38      	ldr	r3, [pc, #224]	; (4828 <spi_init+0x17c>)
    4746:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	781b      	ldrb	r3, [r3, #0]
    474c:	2b01      	cmp	r3, #1
    474e:	d105      	bne.n	475c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4750:	6a3b      	ldr	r3, [r7, #32]
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	220c      	movs	r2, #12
    4756:	431a      	orrs	r2, r3
    4758:	6a3b      	ldr	r3, [r7, #32]
    475a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    475c:	2327      	movs	r3, #39	; 0x27
    475e:	18fb      	adds	r3, r7, r3
    4760:	2200      	movs	r2, #0
    4762:	701a      	strb	r2, [r3, #0]
    4764:	e010      	b.n	4788 <spi_init+0xdc>
		module->callback[i]        = NULL;
    4766:	2327      	movs	r3, #39	; 0x27
    4768:	18fb      	adds	r3, r7, r3
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	68fa      	ldr	r2, [r7, #12]
    476e:	3302      	adds	r3, #2
    4770:	009b      	lsls	r3, r3, #2
    4772:	18d3      	adds	r3, r2, r3
    4774:	3304      	adds	r3, #4
    4776:	2200      	movs	r2, #0
    4778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    477a:	2327      	movs	r3, #39	; 0x27
    477c:	18fb      	adds	r3, r7, r3
    477e:	781a      	ldrb	r2, [r3, #0]
    4780:	2327      	movs	r3, #39	; 0x27
    4782:	18fb      	adds	r3, r7, r3
    4784:	3201      	adds	r2, #1
    4786:	701a      	strb	r2, [r3, #0]
    4788:	2327      	movs	r3, #39	; 0x27
    478a:	18fb      	adds	r3, r7, r3
    478c:	781b      	ldrb	r3, [r3, #0]
    478e:	2b06      	cmp	r3, #6
    4790:	d9e9      	bls.n	4766 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4792:	68fb      	ldr	r3, [r7, #12]
    4794:	2200      	movs	r2, #0
    4796:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	2200      	movs	r2, #0
    479c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	2200      	movs	r2, #0
    47a2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	2200      	movs	r2, #0
    47a8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    47aa:	68fb      	ldr	r3, [r7, #12]
    47ac:	2236      	movs	r2, #54	; 0x36
    47ae:	2100      	movs	r1, #0
    47b0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	2237      	movs	r2, #55	; 0x37
    47b6:	2100      	movs	r1, #0
    47b8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	2238      	movs	r2, #56	; 0x38
    47be:	2100      	movs	r1, #0
    47c0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2203      	movs	r2, #3
    47c6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	2200      	movs	r2, #0
    47cc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    47ce:	68fb      	ldr	r3, [r7, #12]
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	2213      	movs	r2, #19
    47d4:	18bc      	adds	r4, r7, r2
    47d6:	0018      	movs	r0, r3
    47d8:	4b0e      	ldr	r3, [pc, #56]	; (4814 <spi_init+0x168>)
    47da:	4798      	blx	r3
    47dc:	0003      	movs	r3, r0
    47de:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    47e0:	4a12      	ldr	r2, [pc, #72]	; (482c <spi_init+0x180>)
    47e2:	2313      	movs	r3, #19
    47e4:	18fb      	adds	r3, r7, r3
    47e6:	781b      	ldrb	r3, [r3, #0]
    47e8:	0011      	movs	r1, r2
    47ea:	0018      	movs	r0, r3
    47ec:	4b10      	ldr	r3, [pc, #64]	; (4830 <spi_init+0x184>)
    47ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    47f0:	2313      	movs	r3, #19
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	781a      	ldrb	r2, [r3, #0]
    47f6:	4b0f      	ldr	r3, [pc, #60]	; (4834 <spi_init+0x188>)
    47f8:	0092      	lsls	r2, r2, #2
    47fa:	68f9      	ldr	r1, [r7, #12]
    47fc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    47fe:	687a      	ldr	r2, [r7, #4]
    4800:	68fb      	ldr	r3, [r7, #12]
    4802:	0011      	movs	r1, r2
    4804:	0018      	movs	r0, r3
    4806:	4b0c      	ldr	r3, [pc, #48]	; (4838 <spi_init+0x18c>)
    4808:	4798      	blx	r3
    480a:	0003      	movs	r3, r0
}
    480c:	0018      	movs	r0, r3
    480e:	46bd      	mov	sp, r7
    4810:	b00b      	add	sp, #44	; 0x2c
    4812:	bd90      	pop	{r4, r7, pc}
    4814:	000040f5 	.word	0x000040f5
    4818:	000042d9 	.word	0x000042d9
    481c:	000042c1 	.word	0x000042c1
    4820:	000064c1 	.word	0x000064c1
    4824:	00006505 	.word	0x00006505
    4828:	00003ead 	.word	0x00003ead
    482c:	00004ae1 	.word	0x00004ae1
    4830:	00004159 	.word	0x00004159
    4834:	200003c0 	.word	0x200003c0
    4838:	0000449d 	.word	0x0000449d

0000483c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    483c:	b580      	push	{r7, lr}
    483e:	b086      	sub	sp, #24
    4840:	af00      	add	r7, sp, #0
    4842:	60f8      	str	r0, [r7, #12]
    4844:	60b9      	str	r1, [r7, #8]
    4846:	1dbb      	adds	r3, r7, #6
    4848:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    484a:	68fb      	ldr	r3, [r7, #12]
    484c:	2238      	movs	r2, #56	; 0x38
    484e:	5c9b      	ldrb	r3, [r3, r2]
    4850:	b2db      	uxtb	r3, r3
    4852:	2b05      	cmp	r3, #5
    4854:	d101      	bne.n	485a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4856:	2305      	movs	r3, #5
    4858:	e087      	b.n	496a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    485a:	1dbb      	adds	r3, r7, #6
    485c:	881b      	ldrh	r3, [r3, #0]
    485e:	2b00      	cmp	r3, #0
    4860:	d101      	bne.n	4866 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4862:	2317      	movs	r3, #23
    4864:	e081      	b.n	496a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4866:	2316      	movs	r3, #22
    4868:	18fb      	adds	r3, r7, r3
    486a:	2200      	movs	r2, #0
    486c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    486e:	2314      	movs	r3, #20
    4870:	18fb      	adds	r3, r7, r3
    4872:	1dba      	adds	r2, r7, #6
    4874:	8812      	ldrh	r2, [r2, #0]
    4876:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4878:	e05f      	b.n	493a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	68fb      	ldr	r3, [r7, #12]
    487e:	0018      	movs	r0, r3
    4880:	4b3c      	ldr	r3, [pc, #240]	; (4974 <spi_write_buffer_wait+0x138>)
    4882:	4798      	blx	r3
    4884:	0003      	movs	r3, r0
    4886:	001a      	movs	r2, r3
    4888:	2301      	movs	r3, #1
    488a:	4053      	eors	r3, r2
    488c:	b2db      	uxtb	r3, r3
    488e:	2b00      	cmp	r3, #0
    4890:	d1f4      	bne.n	487c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4892:	2316      	movs	r3, #22
    4894:	18fb      	adds	r3, r7, r3
    4896:	881b      	ldrh	r3, [r3, #0]
    4898:	2216      	movs	r2, #22
    489a:	18ba      	adds	r2, r7, r2
    489c:	1c59      	adds	r1, r3, #1
    489e:	8011      	strh	r1, [r2, #0]
    48a0:	001a      	movs	r2, r3
    48a2:	68bb      	ldr	r3, [r7, #8]
    48a4:	189b      	adds	r3, r3, r2
    48a6:	781a      	ldrb	r2, [r3, #0]
    48a8:	2312      	movs	r3, #18
    48aa:	18fb      	adds	r3, r7, r3
    48ac:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48ae:	68fb      	ldr	r3, [r7, #12]
    48b0:	799b      	ldrb	r3, [r3, #6]
    48b2:	2b01      	cmp	r3, #1
    48b4:	d115      	bne.n	48e2 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    48b6:	2316      	movs	r3, #22
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	881b      	ldrh	r3, [r3, #0]
    48bc:	2216      	movs	r2, #22
    48be:	18ba      	adds	r2, r7, r2
    48c0:	1c59      	adds	r1, r3, #1
    48c2:	8011      	strh	r1, [r2, #0]
    48c4:	001a      	movs	r2, r3
    48c6:	68bb      	ldr	r3, [r7, #8]
    48c8:	189b      	adds	r3, r3, r2
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	021b      	lsls	r3, r3, #8
    48ce:	b21a      	sxth	r2, r3
    48d0:	2312      	movs	r3, #18
    48d2:	18fb      	adds	r3, r7, r3
    48d4:	2100      	movs	r1, #0
    48d6:	5e5b      	ldrsh	r3, [r3, r1]
    48d8:	4313      	orrs	r3, r2
    48da:	b21a      	sxth	r2, r3
    48dc:	2312      	movs	r3, #18
    48de:	18fb      	adds	r3, r7, r3
    48e0:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    48e2:	2312      	movs	r3, #18
    48e4:	18fb      	adds	r3, r7, r3
    48e6:	881a      	ldrh	r2, [r3, #0]
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	0011      	movs	r1, r2
    48ec:	0018      	movs	r0, r3
    48ee:	4b22      	ldr	r3, [pc, #136]	; (4978 <spi_write_buffer_wait+0x13c>)
    48f0:	4798      	blx	r3

		if (module->receiver_enabled) {
    48f2:	68fb      	ldr	r3, [r7, #12]
    48f4:	79db      	ldrb	r3, [r3, #7]
    48f6:	2214      	movs	r2, #20
    48f8:	18ba      	adds	r2, r7, r2
    48fa:	2114      	movs	r1, #20
    48fc:	1879      	adds	r1, r7, r1
    48fe:	8809      	ldrh	r1, [r1, #0]
    4900:	8011      	strh	r1, [r2, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	d019      	beq.n	493a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	0018      	movs	r0, r3
    490c:	4b1b      	ldr	r3, [pc, #108]	; (497c <spi_write_buffer_wait+0x140>)
    490e:	4798      	blx	r3
    4910:	0003      	movs	r3, r0
    4912:	001a      	movs	r2, r3
    4914:	2301      	movs	r3, #1
    4916:	4053      	eors	r3, r2
    4918:	b2db      	uxtb	r3, r3
    491a:	2b00      	cmp	r3, #0
    491c:	d1f4      	bne.n	4908 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    491e:	2310      	movs	r3, #16
    4920:	18fa      	adds	r2, r7, r3
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	0011      	movs	r1, r2
    4926:	0018      	movs	r0, r3
    4928:	4b15      	ldr	r3, [pc, #84]	; (4980 <spi_write_buffer_wait+0x144>)
    492a:	4798      	blx	r3
			flush_length--;
    492c:	2314      	movs	r3, #20
    492e:	18fb      	adds	r3, r7, r3
    4930:	881a      	ldrh	r2, [r3, #0]
    4932:	2314      	movs	r3, #20
    4934:	18fb      	adds	r3, r7, r3
    4936:	3a01      	subs	r2, #1
    4938:	801a      	strh	r2, [r3, #0]
	while (length--) {
    493a:	1dbb      	adds	r3, r7, #6
    493c:	881b      	ldrh	r3, [r3, #0]
    493e:	1dba      	adds	r2, r7, #6
    4940:	1e59      	subs	r1, r3, #1
    4942:	8011      	strh	r1, [r2, #0]
    4944:	2b00      	cmp	r3, #0
    4946:	d198      	bne.n	487a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	795b      	ldrb	r3, [r3, #5]
    494c:	2b01      	cmp	r3, #1
    494e:	d10b      	bne.n	4968 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4950:	46c0      	nop			; (mov r8, r8)
    4952:	68fb      	ldr	r3, [r7, #12]
    4954:	0018      	movs	r0, r3
    4956:	4b0b      	ldr	r3, [pc, #44]	; (4984 <spi_write_buffer_wait+0x148>)
    4958:	4798      	blx	r3
    495a:	0003      	movs	r3, r0
    495c:	001a      	movs	r2, r3
    495e:	2301      	movs	r3, #1
    4960:	4053      	eors	r3, r2
    4962:	b2db      	uxtb	r3, r3
    4964:	2b00      	cmp	r3, #0
    4966:	d1f4      	bne.n	4952 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4968:	2300      	movs	r3, #0
}
    496a:	0018      	movs	r0, r3
    496c:	46bd      	mov	sp, r7
    496e:	b006      	add	sp, #24
    4970:	bd80      	pop	{r7, pc}
    4972:	46c0      	nop			; (mov r8, r8)
    4974:	0000437d 	.word	0x0000437d
    4978:	000043cd 	.word	0x000043cd
    497c:	000043a5 	.word	0x000043a5
    4980:	00004415 	.word	0x00004415
    4984:	00004355 	.word	0x00004355

00004988 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4988:	b580      	push	{r7, lr}
    498a:	b084      	sub	sp, #16
    498c:	af00      	add	r7, sp, #0
    498e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4996:	687b      	ldr	r3, [r7, #4]
    4998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    499a:	781b      	ldrb	r3, [r3, #0]
    499c:	b2da      	uxtb	r2, r3
    499e:	230e      	movs	r3, #14
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49a8:	1c5a      	adds	r2, r3, #1
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	799b      	ldrb	r3, [r3, #6]
    49b2:	2b01      	cmp	r3, #1
    49b4:	d113      	bne.n	49de <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    49b6:	687b      	ldr	r3, [r7, #4]
    49b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	b2db      	uxtb	r3, r3
    49be:	021b      	lsls	r3, r3, #8
    49c0:	b21a      	sxth	r2, r3
    49c2:	230e      	movs	r3, #14
    49c4:	18fb      	adds	r3, r7, r3
    49c6:	2100      	movs	r1, #0
    49c8:	5e5b      	ldrsh	r3, [r3, r1]
    49ca:	4313      	orrs	r3, r2
    49cc:	b21a      	sxth	r2, r3
    49ce:	230e      	movs	r3, #14
    49d0:	18fb      	adds	r3, r7, r3
    49d2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49d8:	1c5a      	adds	r2, r3, #1
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    49de:	230e      	movs	r3, #14
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	881b      	ldrh	r3, [r3, #0]
    49e4:	05db      	lsls	r3, r3, #23
    49e6:	0dda      	lsrs	r2, r3, #23
    49e8:	68bb      	ldr	r3, [r7, #8]
    49ea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    49f0:	b29b      	uxth	r3, r3
    49f2:	3b01      	subs	r3, #1
    49f4:	b29a      	uxth	r2, r3
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	869a      	strh	r2, [r3, #52]	; 0x34
}
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	46bd      	mov	sp, r7
    49fe:	b004      	add	sp, #16
    4a00:	bd80      	pop	{r7, pc}
	...

00004a04 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b084      	sub	sp, #16
    4a08:	af00      	add	r7, sp, #0
    4a0a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4a12:	4b08      	ldr	r3, [pc, #32]	; (4a34 <_spi_write_dummy+0x30>)
    4a14:	881b      	ldrh	r3, [r3, #0]
    4a16:	001a      	movs	r2, r3
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4a20:	b29b      	uxth	r3, r3
    4a22:	3b01      	subs	r3, #1
    4a24:	b29a      	uxth	r2, r3
    4a26:	687b      	ldr	r3, [r7, #4]
    4a28:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b004      	add	sp, #16
    4a30:	bd80      	pop	{r7, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	200003d8 	.word	0x200003d8

00004a38 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	b084      	sub	sp, #16
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4a46:	230a      	movs	r3, #10
    4a48:	18fb      	adds	r3, r7, r3
    4a4a:	2200      	movs	r2, #0
    4a4c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a52:	230a      	movs	r3, #10
    4a54:	18fb      	adds	r3, r7, r3
    4a56:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4a5c:	b29b      	uxth	r3, r3
    4a5e:	3b01      	subs	r3, #1
    4a60:	b29a      	uxth	r2, r3
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	46bd      	mov	sp, r7
    4a6a:	b004      	add	sp, #16
    4a6c:	bd80      	pop	{r7, pc}

00004a6e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4a6e:	b580      	push	{r7, lr}
    4a70:	b084      	sub	sp, #16
    4a72:	af00      	add	r7, sp, #0
    4a74:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a7c:	68fb      	ldr	r3, [r7, #12]
    4a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a80:	b29a      	uxth	r2, r3
    4a82:	230a      	movs	r3, #10
    4a84:	18fb      	adds	r3, r7, r3
    4a86:	05d2      	lsls	r2, r2, #23
    4a88:	0dd2      	lsrs	r2, r2, #23
    4a8a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a90:	220a      	movs	r2, #10
    4a92:	18ba      	adds	r2, r7, r2
    4a94:	8812      	ldrh	r2, [r2, #0]
    4a96:	b2d2      	uxtb	r2, r2
    4a98:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a9e:	1c5a      	adds	r2, r3, #1
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4aa4:	687b      	ldr	r3, [r7, #4]
    4aa6:	799b      	ldrb	r3, [r3, #6]
    4aa8:	2b01      	cmp	r3, #1
    4aaa:	d10d      	bne.n	4ac8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ab0:	220a      	movs	r2, #10
    4ab2:	18ba      	adds	r2, r7, r2
    4ab4:	8812      	ldrh	r2, [r2, #0]
    4ab6:	0a12      	lsrs	r2, r2, #8
    4ab8:	b292      	uxth	r2, r2
    4aba:	b2d2      	uxtb	r2, r2
    4abc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ac2:	1c5a      	adds	r2, r3, #1
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4acc:	b29b      	uxth	r3, r3
    4ace:	3b01      	subs	r3, #1
    4ad0:	b29a      	uxth	r2, r3
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4ad6:	46c0      	nop			; (mov r8, r8)
    4ad8:	46bd      	mov	sp, r7
    4ada:	b004      	add	sp, #16
    4adc:	bd80      	pop	{r7, pc}
	...

00004ae0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b086      	sub	sp, #24
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	0002      	movs	r2, r0
    4ae8:	1dfb      	adds	r3, r7, #7
    4aea:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4aec:	1dfb      	adds	r3, r7, #7
    4aee:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4af0:	4b96      	ldr	r3, [pc, #600]	; (4d4c <_spi_interrupt_handler+0x26c>)
    4af2:	0092      	lsls	r2, r2, #2
    4af4:	58d3      	ldr	r3, [r2, r3]
    4af6:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4af8:	697b      	ldr	r3, [r7, #20]
    4afa:	681b      	ldr	r3, [r3, #0]
    4afc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4afe:	697b      	ldr	r3, [r7, #20]
    4b00:	2237      	movs	r2, #55	; 0x37
    4b02:	5c9a      	ldrb	r2, [r3, r2]
    4b04:	697b      	ldr	r3, [r7, #20]
    4b06:	2136      	movs	r1, #54	; 0x36
    4b08:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4b0a:	230f      	movs	r3, #15
    4b0c:	18fb      	adds	r3, r7, r3
    4b0e:	400a      	ands	r2, r1
    4b10:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4b12:	693b      	ldr	r3, [r7, #16]
    4b14:	7e1b      	ldrb	r3, [r3, #24]
    4b16:	b2da      	uxtb	r2, r3
    4b18:	230c      	movs	r3, #12
    4b1a:	18fb      	adds	r3, r7, r3
    4b1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4b1e:	693b      	ldr	r3, [r7, #16]
    4b20:	7d9b      	ldrb	r3, [r3, #22]
    4b22:	b2db      	uxtb	r3, r3
    4b24:	b29a      	uxth	r2, r3
    4b26:	230c      	movs	r3, #12
    4b28:	18fb      	adds	r3, r7, r3
    4b2a:	210c      	movs	r1, #12
    4b2c:	1879      	adds	r1, r7, r1
    4b2e:	8809      	ldrh	r1, [r1, #0]
    4b30:	400a      	ands	r2, r1
    4b32:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4b34:	230c      	movs	r3, #12
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	881b      	ldrh	r3, [r3, #0]
    4b3a:	2201      	movs	r2, #1
    4b3c:	4013      	ands	r3, r2
    4b3e:	d038      	beq.n	4bb2 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4b40:	697b      	ldr	r3, [r7, #20]
    4b42:	795b      	ldrb	r3, [r3, #5]
    4b44:	2b01      	cmp	r3, #1
    4b46:	d110      	bne.n	4b6a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4b48:	697b      	ldr	r3, [r7, #20]
    4b4a:	7a5b      	ldrb	r3, [r3, #9]
    4b4c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d10b      	bne.n	4b6a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4b52:	697b      	ldr	r3, [r7, #20]
    4b54:	0018      	movs	r0, r3
    4b56:	4b7e      	ldr	r3, [pc, #504]	; (4d50 <_spi_interrupt_handler+0x270>)
    4b58:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4b5a:	697b      	ldr	r3, [r7, #20]
    4b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4b5e:	b29b      	uxth	r3, r3
    4b60:	2b00      	cmp	r3, #0
    4b62:	d102      	bne.n	4b6a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4b64:	693b      	ldr	r3, [r7, #16]
    4b66:	2201      	movs	r2, #1
    4b68:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4b6a:	697b      	ldr	r3, [r7, #20]
    4b6c:	795b      	ldrb	r3, [r3, #5]
		if (0
    4b6e:	2b01      	cmp	r3, #1
    4b70:	d11f      	bne.n	4bb2 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4b72:	697b      	ldr	r3, [r7, #20]
    4b74:	7a5b      	ldrb	r3, [r3, #9]
    4b76:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d01a      	beq.n	4bb2 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4b7c:	697b      	ldr	r3, [r7, #20]
    4b7e:	0018      	movs	r0, r3
    4b80:	4b74      	ldr	r3, [pc, #464]	; (4d54 <_spi_interrupt_handler+0x274>)
    4b82:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4b84:	697b      	ldr	r3, [r7, #20]
    4b86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4b88:	b29b      	uxth	r3, r3
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d111      	bne.n	4bb2 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4b8e:	693b      	ldr	r3, [r7, #16]
    4b90:	2201      	movs	r2, #1
    4b92:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4b94:	697b      	ldr	r3, [r7, #20]
    4b96:	7a5b      	ldrb	r3, [r3, #9]
    4b98:	b2db      	uxtb	r3, r3
    4b9a:	2b01      	cmp	r3, #1
    4b9c:	d109      	bne.n	4bb2 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4b9e:	697b      	ldr	r3, [r7, #20]
    4ba0:	79db      	ldrb	r3, [r3, #7]
    4ba2:	2201      	movs	r2, #1
    4ba4:	4053      	eors	r3, r2
    4ba6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d002      	beq.n	4bb2 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4bac:	693b      	ldr	r3, [r7, #16]
    4bae:	2202      	movs	r2, #2
    4bb0:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4bb2:	230c      	movs	r3, #12
    4bb4:	18fb      	adds	r3, r7, r3
    4bb6:	881b      	ldrh	r3, [r3, #0]
    4bb8:	2204      	movs	r2, #4
    4bba:	4013      	ands	r3, r2
    4bbc:	d100      	bne.n	4bc0 <_spi_interrupt_handler+0xe0>
    4bbe:	e07e      	b.n	4cbe <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4bc0:	693b      	ldr	r3, [r7, #16]
    4bc2:	8b5b      	ldrh	r3, [r3, #26]
    4bc4:	b29b      	uxth	r3, r3
    4bc6:	001a      	movs	r2, r3
    4bc8:	2304      	movs	r3, #4
    4bca:	4013      	ands	r3, r2
    4bcc:	d022      	beq.n	4c14 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4bce:	697b      	ldr	r3, [r7, #20]
    4bd0:	7a5b      	ldrb	r3, [r3, #9]
    4bd2:	b2db      	uxtb	r3, r3
    4bd4:	2b01      	cmp	r3, #1
    4bd6:	d014      	beq.n	4c02 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4bd8:	697b      	ldr	r3, [r7, #20]
    4bda:	2238      	movs	r2, #56	; 0x38
    4bdc:	211e      	movs	r1, #30
    4bde:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4be0:	697b      	ldr	r3, [r7, #20]
    4be2:	2203      	movs	r2, #3
    4be4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4be6:	693b      	ldr	r3, [r7, #16]
    4be8:	2205      	movs	r2, #5
    4bea:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4bec:	230f      	movs	r3, #15
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	781b      	ldrb	r3, [r3, #0]
    4bf2:	2208      	movs	r2, #8
    4bf4:	4013      	ands	r3, r2
    4bf6:	d004      	beq.n	4c02 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4bf8:	697b      	ldr	r3, [r7, #20]
    4bfa:	699b      	ldr	r3, [r3, #24]
    4bfc:	697a      	ldr	r2, [r7, #20]
    4bfe:	0010      	movs	r0, r2
    4c00:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4c02:	693b      	ldr	r3, [r7, #16]
    4c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c06:	230a      	movs	r3, #10
    4c08:	18fb      	adds	r3, r7, r3
    4c0a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4c0c:	693b      	ldr	r3, [r7, #16]
    4c0e:	2204      	movs	r2, #4
    4c10:	835a      	strh	r2, [r3, #26]
    4c12:	e054      	b.n	4cbe <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4c14:	697b      	ldr	r3, [r7, #20]
    4c16:	7a5b      	ldrb	r3, [r3, #9]
    4c18:	b2db      	uxtb	r3, r3
    4c1a:	2b01      	cmp	r3, #1
    4c1c:	d11e      	bne.n	4c5c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4c1e:	697b      	ldr	r3, [r7, #20]
    4c20:	0018      	movs	r0, r3
    4c22:	4b4d      	ldr	r3, [pc, #308]	; (4d58 <_spi_interrupt_handler+0x278>)
    4c24:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4c26:	697b      	ldr	r3, [r7, #20]
    4c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4c2a:	b29b      	uxth	r3, r3
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d146      	bne.n	4cbe <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4c30:	693b      	ldr	r3, [r7, #16]
    4c32:	2204      	movs	r2, #4
    4c34:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4c36:	697b      	ldr	r3, [r7, #20]
    4c38:	2238      	movs	r2, #56	; 0x38
    4c3a:	2100      	movs	r1, #0
    4c3c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4c3e:	697b      	ldr	r3, [r7, #20]
    4c40:	2203      	movs	r2, #3
    4c42:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4c44:	230f      	movs	r3, #15
    4c46:	18fb      	adds	r3, r7, r3
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	2201      	movs	r2, #1
    4c4c:	4013      	ands	r3, r2
    4c4e:	d036      	beq.n	4cbe <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4c50:	697b      	ldr	r3, [r7, #20]
    4c52:	68db      	ldr	r3, [r3, #12]
    4c54:	697a      	ldr	r2, [r7, #20]
    4c56:	0010      	movs	r0, r2
    4c58:	4798      	blx	r3
    4c5a:	e030      	b.n	4cbe <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4c5c:	697b      	ldr	r3, [r7, #20]
    4c5e:	0018      	movs	r0, r3
    4c60:	4b3e      	ldr	r3, [pc, #248]	; (4d5c <_spi_interrupt_handler+0x27c>)
    4c62:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4c64:	697b      	ldr	r3, [r7, #20]
    4c66:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4c68:	b29b      	uxth	r3, r3
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d127      	bne.n	4cbe <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4c6e:	697b      	ldr	r3, [r7, #20]
    4c70:	2238      	movs	r2, #56	; 0x38
    4c72:	2100      	movs	r1, #0
    4c74:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4c76:	693b      	ldr	r3, [r7, #16]
    4c78:	2204      	movs	r2, #4
    4c7a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4c7c:	697b      	ldr	r3, [r7, #20]
    4c7e:	7a5b      	ldrb	r3, [r3, #9]
    4c80:	b2db      	uxtb	r3, r3
    4c82:	2b02      	cmp	r3, #2
    4c84:	d10b      	bne.n	4c9e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4c86:	230f      	movs	r3, #15
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	2204      	movs	r2, #4
    4c8e:	4013      	ands	r3, r2
    4c90:	d015      	beq.n	4cbe <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4c92:	697b      	ldr	r3, [r7, #20]
    4c94:	695b      	ldr	r3, [r3, #20]
    4c96:	697a      	ldr	r2, [r7, #20]
    4c98:	0010      	movs	r0, r2
    4c9a:	4798      	blx	r3
    4c9c:	e00f      	b.n	4cbe <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4c9e:	697b      	ldr	r3, [r7, #20]
    4ca0:	7a5b      	ldrb	r3, [r3, #9]
    4ca2:	b2db      	uxtb	r3, r3
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d10a      	bne.n	4cbe <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4ca8:	230f      	movs	r3, #15
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	781b      	ldrb	r3, [r3, #0]
    4cae:	2202      	movs	r2, #2
    4cb0:	4013      	ands	r3, r2
    4cb2:	d004      	beq.n	4cbe <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4cb4:	697b      	ldr	r3, [r7, #20]
    4cb6:	691b      	ldr	r3, [r3, #16]
    4cb8:	697a      	ldr	r2, [r7, #20]
    4cba:	0010      	movs	r0, r2
    4cbc:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4cbe:	230c      	movs	r3, #12
    4cc0:	18fb      	adds	r3, r7, r3
    4cc2:	881b      	ldrh	r3, [r3, #0]
    4cc4:	2202      	movs	r2, #2
    4cc6:	4013      	ands	r3, r2
    4cc8:	d024      	beq.n	4d14 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4cca:	697b      	ldr	r3, [r7, #20]
    4ccc:	795b      	ldrb	r3, [r3, #5]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d120      	bne.n	4d14 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4cd2:	697b      	ldr	r3, [r7, #20]
    4cd4:	7a5b      	ldrb	r3, [r3, #9]
    4cd6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4cd8:	2b01      	cmp	r3, #1
    4cda:	d11b      	bne.n	4d14 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4cdc:	697b      	ldr	r3, [r7, #20]
    4cde:	79db      	ldrb	r3, [r3, #7]
    4ce0:	2201      	movs	r2, #1
    4ce2:	4053      	eors	r3, r2
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d014      	beq.n	4d14 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4cea:	693b      	ldr	r3, [r7, #16]
    4cec:	2202      	movs	r2, #2
    4cee:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4cf0:	697b      	ldr	r3, [r7, #20]
    4cf2:	2203      	movs	r2, #3
    4cf4:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4cf6:	697b      	ldr	r3, [r7, #20]
    4cf8:	2238      	movs	r2, #56	; 0x38
    4cfa:	2100      	movs	r1, #0
    4cfc:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4cfe:	230f      	movs	r3, #15
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	2201      	movs	r2, #1
    4d06:	4013      	ands	r3, r2
    4d08:	d004      	beq.n	4d14 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4d0a:	697b      	ldr	r3, [r7, #20]
    4d0c:	68db      	ldr	r3, [r3, #12]
    4d0e:	697a      	ldr	r2, [r7, #20]
    4d10:	0010      	movs	r0, r2
    4d12:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4d14:	230c      	movs	r3, #12
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	881b      	ldrh	r3, [r3, #0]
    4d1a:	2280      	movs	r2, #128	; 0x80
    4d1c:	4013      	ands	r3, r2
    4d1e:	d010      	beq.n	4d42 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4d20:	693b      	ldr	r3, [r7, #16]
    4d22:	2280      	movs	r2, #128	; 0x80
    4d24:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4d26:	693b      	ldr	r3, [r7, #16]
    4d28:	2280      	movs	r2, #128	; 0x80
    4d2a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4d2c:	230f      	movs	r3, #15
    4d2e:	18fb      	adds	r3, r7, r3
    4d30:	781b      	ldrb	r3, [r3, #0]
    4d32:	2240      	movs	r2, #64	; 0x40
    4d34:	4013      	ands	r3, r2
    4d36:	d004      	beq.n	4d42 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4d38:	697b      	ldr	r3, [r7, #20]
    4d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d3c:	697a      	ldr	r2, [r7, #20]
    4d3e:	0010      	movs	r0, r2
    4d40:	4798      	blx	r3
		}
	}
#  endif
}
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	46bd      	mov	sp, r7
    4d46:	b006      	add	sp, #24
    4d48:	bd80      	pop	{r7, pc}
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	200003c0 	.word	0x200003c0
    4d50:	00004a05 	.word	0x00004a05
    4d54:	00004989 	.word	0x00004989
    4d58:	00004a39 	.word	0x00004a39
    4d5c:	00004a6f 	.word	0x00004a6f

00004d60 <system_gclk_chan_get_config_defaults>:
{
    4d60:	b580      	push	{r7, lr}
    4d62:	b082      	sub	sp, #8
    4d64:	af00      	add	r7, sp, #0
    4d66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	2200      	movs	r2, #0
    4d6c:	701a      	strb	r2, [r3, #0]
}
    4d6e:	46c0      	nop			; (mov r8, r8)
    4d70:	46bd      	mov	sp, r7
    4d72:	b002      	add	sp, #8
    4d74:	bd80      	pop	{r7, pc}
	...

00004d78 <system_apb_clock_set_mask>:
{
    4d78:	b580      	push	{r7, lr}
    4d7a:	b082      	sub	sp, #8
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	0002      	movs	r2, r0
    4d80:	6039      	str	r1, [r7, #0]
    4d82:	1dfb      	adds	r3, r7, #7
    4d84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4d86:	1dfb      	adds	r3, r7, #7
    4d88:	781b      	ldrb	r3, [r3, #0]
    4d8a:	2b01      	cmp	r3, #1
    4d8c:	d00a      	beq.n	4da4 <system_apb_clock_set_mask+0x2c>
    4d8e:	2b02      	cmp	r3, #2
    4d90:	d00f      	beq.n	4db2 <system_apb_clock_set_mask+0x3a>
    4d92:	2b00      	cmp	r3, #0
    4d94:	d114      	bne.n	4dc0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4d96:	4b0e      	ldr	r3, [pc, #56]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4d98:	4a0d      	ldr	r2, [pc, #52]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4d9a:	6991      	ldr	r1, [r2, #24]
    4d9c:	683a      	ldr	r2, [r7, #0]
    4d9e:	430a      	orrs	r2, r1
    4da0:	619a      	str	r2, [r3, #24]
			break;
    4da2:	e00f      	b.n	4dc4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4da4:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4da6:	4a0a      	ldr	r2, [pc, #40]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4da8:	69d1      	ldr	r1, [r2, #28]
    4daa:	683a      	ldr	r2, [r7, #0]
    4dac:	430a      	orrs	r2, r1
    4dae:	61da      	str	r2, [r3, #28]
			break;
    4db0:	e008      	b.n	4dc4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4db2:	4b07      	ldr	r3, [pc, #28]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4db4:	4a06      	ldr	r2, [pc, #24]	; (4dd0 <system_apb_clock_set_mask+0x58>)
    4db6:	6a11      	ldr	r1, [r2, #32]
    4db8:	683a      	ldr	r2, [r7, #0]
    4dba:	430a      	orrs	r2, r1
    4dbc:	621a      	str	r2, [r3, #32]
			break;
    4dbe:	e001      	b.n	4dc4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4dc0:	2317      	movs	r3, #23
    4dc2:	e000      	b.n	4dc6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4dc4:	2300      	movs	r3, #0
}
    4dc6:	0018      	movs	r0, r3
    4dc8:	46bd      	mov	sp, r7
    4dca:	b002      	add	sp, #8
    4dcc:	bd80      	pop	{r7, pc}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	40000400 	.word	0x40000400

00004dd4 <system_pinmux_get_config_defaults>:
{
    4dd4:	b580      	push	{r7, lr}
    4dd6:	b082      	sub	sp, #8
    4dd8:	af00      	add	r7, sp, #0
    4dda:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	2280      	movs	r2, #128	; 0x80
    4de0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	2200      	movs	r2, #0
    4de6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	2201      	movs	r2, #1
    4dec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	2200      	movs	r2, #0
    4df2:	70da      	strb	r2, [r3, #3]
}
    4df4:	46c0      	nop			; (mov r8, r8)
    4df6:	46bd      	mov	sp, r7
    4df8:	b002      	add	sp, #8
    4dfa:	bd80      	pop	{r7, pc}

00004dfc <system_is_debugger_present>:
{
    4dfc:	b580      	push	{r7, lr}
    4dfe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4e00:	4b05      	ldr	r3, [pc, #20]	; (4e18 <system_is_debugger_present+0x1c>)
    4e02:	789b      	ldrb	r3, [r3, #2]
    4e04:	b2db      	uxtb	r3, r3
    4e06:	001a      	movs	r2, r3
    4e08:	2302      	movs	r3, #2
    4e0a:	4013      	ands	r3, r2
    4e0c:	1e5a      	subs	r2, r3, #1
    4e0e:	4193      	sbcs	r3, r2
    4e10:	b2db      	uxtb	r3, r3
}
    4e12:	0018      	movs	r0, r3
    4e14:	46bd      	mov	sp, r7
    4e16:	bd80      	pop	{r7, pc}
    4e18:	41002000 	.word	0x41002000

00004e1c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4e1c:	b580      	push	{r7, lr}
    4e1e:	b084      	sub	sp, #16
    4e20:	af00      	add	r7, sp, #0
    4e22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4e2a:	68fb      	ldr	r3, [r7, #12]
    4e2c:	69db      	ldr	r3, [r3, #28]
    4e2e:	1e5a      	subs	r2, r3, #1
    4e30:	4193      	sbcs	r3, r2
    4e32:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4e34:	0018      	movs	r0, r3
    4e36:	46bd      	mov	sp, r7
    4e38:	b004      	add	sp, #16
    4e3a:	bd80      	pop	{r7, pc}

00004e3c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b082      	sub	sp, #8
    4e40:	af00      	add	r7, sp, #0
    4e42:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4e44:	46c0      	nop			; (mov r8, r8)
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	0018      	movs	r0, r3
    4e4a:	4b04      	ldr	r3, [pc, #16]	; (4e5c <_usart_wait_for_sync+0x20>)
    4e4c:	4798      	blx	r3
    4e4e:	1e03      	subs	r3, r0, #0
    4e50:	d1f9      	bne.n	4e46 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	46bd      	mov	sp, r7
    4e56:	b002      	add	sp, #8
    4e58:	bd80      	pop	{r7, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	00004e1d 	.word	0x00004e1d

00004e60 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4e60:	b5b0      	push	{r4, r5, r7, lr}
    4e62:	b08c      	sub	sp, #48	; 0x30
    4e64:	af02      	add	r7, sp, #8
    4e66:	6078      	str	r0, [r7, #4]
    4e68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	681b      	ldr	r3, [r3, #0]
    4e74:	0018      	movs	r0, r3
    4e76:	4bab      	ldr	r3, [pc, #684]	; (5124 <_usart_set_config+0x2c4>)
    4e78:	4798      	blx	r3
    4e7a:	0003      	movs	r3, r0
    4e7c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e7e:	697b      	ldr	r3, [r7, #20]
    4e80:	3314      	adds	r3, #20
    4e82:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4e84:	2300      	movs	r3, #0
    4e86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4e88:	2300      	movs	r3, #0
    4e8a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4e8c:	230a      	movs	r3, #10
    4e8e:	18fb      	adds	r3, r7, r3
    4e90:	2200      	movs	r2, #0
    4e92:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e94:	231f      	movs	r3, #31
    4e96:	18fb      	adds	r3, r7, r3
    4e98:	2200      	movs	r2, #0
    4e9a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4e9c:	231e      	movs	r3, #30
    4e9e:	18fb      	adds	r3, r7, r3
    4ea0:	2210      	movs	r2, #16
    4ea2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4ea4:	683b      	ldr	r3, [r7, #0]
    4ea6:	8a1b      	ldrh	r3, [r3, #16]
    4ea8:	2280      	movs	r2, #128	; 0x80
    4eaa:	01d2      	lsls	r2, r2, #7
    4eac:	4293      	cmp	r3, r2
    4eae:	d01c      	beq.n	4eea <_usart_set_config+0x8a>
    4eb0:	2280      	movs	r2, #128	; 0x80
    4eb2:	01d2      	lsls	r2, r2, #7
    4eb4:	4293      	cmp	r3, r2
    4eb6:	dc06      	bgt.n	4ec6 <_usart_set_config+0x66>
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d00d      	beq.n	4ed8 <_usart_set_config+0x78>
    4ebc:	2280      	movs	r2, #128	; 0x80
    4ebe:	0192      	lsls	r2, r2, #6
    4ec0:	4293      	cmp	r3, r2
    4ec2:	d024      	beq.n	4f0e <_usart_set_config+0xae>
    4ec4:	e035      	b.n	4f32 <_usart_set_config+0xd2>
    4ec6:	22c0      	movs	r2, #192	; 0xc0
    4ec8:	01d2      	lsls	r2, r2, #7
    4eca:	4293      	cmp	r3, r2
    4ecc:	d028      	beq.n	4f20 <_usart_set_config+0xc0>
    4ece:	2280      	movs	r2, #128	; 0x80
    4ed0:	0212      	lsls	r2, r2, #8
    4ed2:	4293      	cmp	r3, r2
    4ed4:	d012      	beq.n	4efc <_usart_set_config+0x9c>
    4ed6:	e02c      	b.n	4f32 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4ed8:	231f      	movs	r3, #31
    4eda:	18fb      	adds	r3, r7, r3
    4edc:	2200      	movs	r2, #0
    4ede:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4ee0:	231e      	movs	r3, #30
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	2210      	movs	r2, #16
    4ee6:	701a      	strb	r2, [r3, #0]
			break;
    4ee8:	e023      	b.n	4f32 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4eea:	231f      	movs	r3, #31
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	2200      	movs	r2, #0
    4ef0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4ef2:	231e      	movs	r3, #30
    4ef4:	18fb      	adds	r3, r7, r3
    4ef6:	2208      	movs	r2, #8
    4ef8:	701a      	strb	r2, [r3, #0]
			break;
    4efa:	e01a      	b.n	4f32 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4efc:	231f      	movs	r3, #31
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	2200      	movs	r2, #0
    4f02:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4f04:	231e      	movs	r3, #30
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	2203      	movs	r2, #3
    4f0a:	701a      	strb	r2, [r3, #0]
			break;
    4f0c:	e011      	b.n	4f32 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4f0e:	231f      	movs	r3, #31
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	2201      	movs	r2, #1
    4f14:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4f16:	231e      	movs	r3, #30
    4f18:	18fb      	adds	r3, r7, r3
    4f1a:	2210      	movs	r2, #16
    4f1c:	701a      	strb	r2, [r3, #0]
			break;
    4f1e:	e008      	b.n	4f32 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4f20:	231f      	movs	r3, #31
    4f22:	18fb      	adds	r3, r7, r3
    4f24:	2201      	movs	r2, #1
    4f26:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4f28:	231e      	movs	r3, #30
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	2208      	movs	r2, #8
    4f2e:	701a      	strb	r2, [r3, #0]
			break;
    4f30:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4f32:	683b      	ldr	r3, [r7, #0]
    4f34:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4f36:	683b      	ldr	r3, [r7, #0]
    4f38:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4f3a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4f3c:	683b      	ldr	r3, [r7, #0]
    4f3e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4f40:	4313      	orrs	r3, r2
		config->sample_rate |
    4f42:	683a      	ldr	r2, [r7, #0]
    4f44:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4f46:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4f48:	683a      	ldr	r2, [r7, #0]
    4f4a:	7e12      	ldrb	r2, [r2, #24]
    4f4c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4f4e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4f50:	683a      	ldr	r2, [r7, #0]
    4f52:	2126      	movs	r1, #38	; 0x26
    4f54:	5c52      	ldrb	r2, [r2, r1]
    4f56:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4f58:	4313      	orrs	r3, r2
    4f5a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4f5c:	231d      	movs	r3, #29
    4f5e:	18fb      	adds	r3, r7, r3
    4f60:	2200      	movs	r2, #0
    4f62:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4f64:	683b      	ldr	r3, [r7, #0]
    4f66:	685b      	ldr	r3, [r3, #4]
    4f68:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4f6a:	68fb      	ldr	r3, [r7, #12]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d01e      	beq.n	4fae <_usart_set_config+0x14e>
    4f70:	2280      	movs	r2, #128	; 0x80
    4f72:	0552      	lsls	r2, r2, #21
    4f74:	4293      	cmp	r3, r2
    4f76:	d14f      	bne.n	5018 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4f78:	683b      	ldr	r3, [r7, #0]
    4f7a:	2227      	movs	r2, #39	; 0x27
    4f7c:	5c9b      	ldrb	r3, [r3, r2]
    4f7e:	2201      	movs	r2, #1
    4f80:	4053      	eors	r3, r2
    4f82:	b2db      	uxtb	r3, r3
    4f84:	2b00      	cmp	r3, #0
    4f86:	d046      	beq.n	5016 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4f88:	683b      	ldr	r3, [r7, #0]
    4f8a:	6a1d      	ldr	r5, [r3, #32]
    4f8c:	693b      	ldr	r3, [r7, #16]
    4f8e:	b2db      	uxtb	r3, r3
    4f90:	0018      	movs	r0, r3
    4f92:	4b65      	ldr	r3, [pc, #404]	; (5128 <_usart_set_config+0x2c8>)
    4f94:	4798      	blx	r3
    4f96:	0001      	movs	r1, r0
    4f98:	231d      	movs	r3, #29
    4f9a:	18fc      	adds	r4, r7, r3
    4f9c:	230a      	movs	r3, #10
    4f9e:	18fb      	adds	r3, r7, r3
    4fa0:	001a      	movs	r2, r3
    4fa2:	0028      	movs	r0, r5
    4fa4:	4b61      	ldr	r3, [pc, #388]	; (512c <_usart_set_config+0x2cc>)
    4fa6:	4798      	blx	r3
    4fa8:	0003      	movs	r3, r0
    4faa:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4fac:	e033      	b.n	5016 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4fae:	683b      	ldr	r3, [r7, #0]
    4fb0:	2227      	movs	r2, #39	; 0x27
    4fb2:	5c9b      	ldrb	r3, [r3, r2]
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d014      	beq.n	4fe2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4fb8:	683b      	ldr	r3, [r7, #0]
    4fba:	6a18      	ldr	r0, [r3, #32]
    4fbc:	683b      	ldr	r3, [r7, #0]
    4fbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4fc0:	231d      	movs	r3, #29
    4fc2:	18fc      	adds	r4, r7, r3
    4fc4:	231f      	movs	r3, #31
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	781d      	ldrb	r5, [r3, #0]
    4fca:	230a      	movs	r3, #10
    4fcc:	18fa      	adds	r2, r7, r3
    4fce:	231e      	movs	r3, #30
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	9300      	str	r3, [sp, #0]
    4fd6:	002b      	movs	r3, r5
    4fd8:	4d55      	ldr	r5, [pc, #340]	; (5130 <_usart_set_config+0x2d0>)
    4fda:	47a8      	blx	r5
    4fdc:	0003      	movs	r3, r0
    4fde:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4fe0:	e01a      	b.n	5018 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4fe2:	683b      	ldr	r3, [r7, #0]
    4fe4:	6a1d      	ldr	r5, [r3, #32]
    4fe6:	693b      	ldr	r3, [r7, #16]
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	0018      	movs	r0, r3
    4fec:	4b4e      	ldr	r3, [pc, #312]	; (5128 <_usart_set_config+0x2c8>)
    4fee:	4798      	blx	r3
				status_code =
    4ff0:	231d      	movs	r3, #29
    4ff2:	18fc      	adds	r4, r7, r3
    4ff4:	231f      	movs	r3, #31
    4ff6:	18fb      	adds	r3, r7, r3
    4ff8:	7819      	ldrb	r1, [r3, #0]
    4ffa:	230a      	movs	r3, #10
    4ffc:	18fa      	adds	r2, r7, r3
    4ffe:	231e      	movs	r3, #30
    5000:	18fb      	adds	r3, r7, r3
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	9300      	str	r3, [sp, #0]
    5006:	000b      	movs	r3, r1
    5008:	0001      	movs	r1, r0
    500a:	0028      	movs	r0, r5
    500c:	4d48      	ldr	r5, [pc, #288]	; (5130 <_usart_set_config+0x2d0>)
    500e:	47a8      	blx	r5
    5010:	0003      	movs	r3, r0
    5012:	7023      	strb	r3, [r4, #0]
			break;
    5014:	e000      	b.n	5018 <_usart_set_config+0x1b8>
			break;
    5016:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5018:	231d      	movs	r3, #29
    501a:	18fb      	adds	r3, r7, r3
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	2b00      	cmp	r3, #0
    5020:	d003      	beq.n	502a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5022:	231d      	movs	r3, #29
    5024:	18fb      	adds	r3, r7, r3
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	e077      	b.n	511a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    502a:	683b      	ldr	r3, [r7, #0]
    502c:	7e5b      	ldrb	r3, [r3, #25]
    502e:	2b00      	cmp	r3, #0
    5030:	d003      	beq.n	503a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5032:	683b      	ldr	r3, [r7, #0]
    5034:	7e9a      	ldrb	r2, [r3, #26]
    5036:	69bb      	ldr	r3, [r7, #24]
    5038:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	0018      	movs	r0, r3
    503e:	4b3d      	ldr	r3, [pc, #244]	; (5134 <_usart_set_config+0x2d4>)
    5040:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5042:	230a      	movs	r3, #10
    5044:	18fb      	adds	r3, r7, r3
    5046:	881a      	ldrh	r2, [r3, #0]
    5048:	69bb      	ldr	r3, [r7, #24]
    504a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    504e:	68fb      	ldr	r3, [r7, #12]
    5050:	4313      	orrs	r3, r2
    5052:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5054:	683b      	ldr	r3, [r7, #0]
    5056:	2227      	movs	r2, #39	; 0x27
    5058:	5c9b      	ldrb	r3, [r3, r2]
    505a:	2201      	movs	r2, #1
    505c:	4053      	eors	r3, r2
    505e:	b2db      	uxtb	r3, r3
    5060:	2b00      	cmp	r3, #0
    5062:	d003      	beq.n	506c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5066:	2204      	movs	r2, #4
    5068:	4313      	orrs	r3, r2
    506a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    506c:	683b      	ldr	r3, [r7, #0]
    506e:	7e5b      	ldrb	r3, [r3, #25]
    5070:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5072:	683b      	ldr	r3, [r7, #0]
    5074:	7f1b      	ldrb	r3, [r3, #28]
    5076:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5078:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    507a:	683b      	ldr	r3, [r7, #0]
    507c:	7f5b      	ldrb	r3, [r3, #29]
    507e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5080:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5082:	683b      	ldr	r3, [r7, #0]
    5084:	2124      	movs	r1, #36	; 0x24
    5086:	5c5b      	ldrb	r3, [r3, r1]
    5088:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    508a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	2125      	movs	r1, #37	; 0x25
    5090:	5c5b      	ldrb	r3, [r3, r1]
    5092:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5094:	4313      	orrs	r3, r2
	ctrlb =  
    5096:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    5098:	683b      	ldr	r3, [r7, #0]
    509a:	7a9b      	ldrb	r3, [r3, #10]
    509c:	001a      	movs	r2, r3
    509e:	6a3b      	ldr	r3, [r7, #32]
    50a0:	4313      	orrs	r3, r2
    50a2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    50a4:	683b      	ldr	r3, [r7, #0]
    50a6:	7adb      	ldrb	r3, [r3, #11]
    50a8:	001a      	movs	r2, r3
    50aa:	6a3b      	ldr	r3, [r7, #32]
    50ac:	4313      	orrs	r3, r2
    50ae:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    50b0:	683b      	ldr	r3, [r7, #0]
    50b2:	891b      	ldrh	r3, [r3, #8]
    50b4:	2bff      	cmp	r3, #255	; 0xff
    50b6:	d00b      	beq.n	50d0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    50b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50ba:	2280      	movs	r2, #128	; 0x80
    50bc:	0452      	lsls	r2, r2, #17
    50be:	4313      	orrs	r3, r2
    50c0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    50c2:	683b      	ldr	r3, [r7, #0]
    50c4:	891b      	ldrh	r3, [r3, #8]
    50c6:	001a      	movs	r2, r3
    50c8:	6a3b      	ldr	r3, [r7, #32]
    50ca:	4313      	orrs	r3, r2
    50cc:	623b      	str	r3, [r7, #32]
    50ce:	e008      	b.n	50e2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    50d0:	683b      	ldr	r3, [r7, #0]
    50d2:	7edb      	ldrb	r3, [r3, #27]
    50d4:	2b00      	cmp	r3, #0
    50d6:	d004      	beq.n	50e2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    50d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50da:	2280      	movs	r2, #128	; 0x80
    50dc:	04d2      	lsls	r2, r2, #19
    50de:	4313      	orrs	r3, r2
    50e0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    50e2:	683b      	ldr	r3, [r7, #0]
    50e4:	222c      	movs	r2, #44	; 0x2c
    50e6:	5c9b      	ldrb	r3, [r3, r2]
    50e8:	2b00      	cmp	r3, #0
    50ea:	d103      	bne.n	50f4 <_usart_set_config+0x294>
    50ec:	4b12      	ldr	r3, [pc, #72]	; (5138 <_usart_set_config+0x2d8>)
    50ee:	4798      	blx	r3
    50f0:	1e03      	subs	r3, r0, #0
    50f2:	d003      	beq.n	50fc <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    50f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50f6:	2280      	movs	r2, #128	; 0x80
    50f8:	4313      	orrs	r3, r2
    50fa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	0018      	movs	r0, r3
    5100:	4b0c      	ldr	r3, [pc, #48]	; (5134 <_usart_set_config+0x2d4>)
    5102:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5104:	69bb      	ldr	r3, [r7, #24]
    5106:	6a3a      	ldr	r2, [r7, #32]
    5108:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    510a:	687b      	ldr	r3, [r7, #4]
    510c:	0018      	movs	r0, r3
    510e:	4b09      	ldr	r3, [pc, #36]	; (5134 <_usart_set_config+0x2d4>)
    5110:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5112:	69bb      	ldr	r3, [r7, #24]
    5114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5116:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5118:	2300      	movs	r3, #0
}
    511a:	0018      	movs	r0, r3
    511c:	46bd      	mov	sp, r7
    511e:	b00a      	add	sp, #40	; 0x28
    5120:	bdb0      	pop	{r4, r5, r7, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	000040f5 	.word	0x000040f5
    5128:	000065e5 	.word	0x000065e5
    512c:	00003c6f 	.word	0x00003c6f
    5130:	00003ced 	.word	0x00003ced
    5134:	00004e3d 	.word	0x00004e3d
    5138:	00004dfd 	.word	0x00004dfd

0000513c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    513c:	b590      	push	{r4, r7, lr}
    513e:	b093      	sub	sp, #76	; 0x4c
    5140:	af00      	add	r7, sp, #0
    5142:	60f8      	str	r0, [r7, #12]
    5144:	60b9      	str	r1, [r7, #8]
    5146:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5148:	233b      	movs	r3, #59	; 0x3b
    514a:	18fb      	adds	r3, r7, r3
    514c:	2200      	movs	r2, #0
    514e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5150:	68fb      	ldr	r3, [r7, #12]
    5152:	68ba      	ldr	r2, [r7, #8]
    5154:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	681b      	ldr	r3, [r3, #0]
    515a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    515c:	68fb      	ldr	r3, [r7, #12]
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	0018      	movs	r0, r3
    5162:	4b86      	ldr	r3, [pc, #536]	; (537c <usart_init+0x240>)
    5164:	4798      	blx	r3
    5166:	0003      	movs	r3, r0
    5168:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    516c:	3302      	adds	r3, #2
    516e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5172:	3314      	adds	r3, #20
    5174:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	2201      	movs	r2, #1
    517c:	4013      	ands	r3, r2
    517e:	d001      	beq.n	5184 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5180:	2305      	movs	r3, #5
    5182:	e0f6      	b.n	5372 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	2202      	movs	r2, #2
    518a:	4013      	ands	r3, r2
    518c:	d001      	beq.n	5192 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    518e:	231c      	movs	r3, #28
    5190:	e0ef      	b.n	5372 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5192:	2201      	movs	r2, #1
    5194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5196:	409a      	lsls	r2, r3
    5198:	0013      	movs	r3, r2
    519a:	0019      	movs	r1, r3
    519c:	2002      	movs	r0, #2
    519e:	4b78      	ldr	r3, [pc, #480]	; (5380 <usart_init+0x244>)
    51a0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    51a2:	2324      	movs	r3, #36	; 0x24
    51a4:	18fb      	adds	r3, r7, r3
    51a6:	0018      	movs	r0, r3
    51a8:	4b76      	ldr	r3, [pc, #472]	; (5384 <usart_init+0x248>)
    51aa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	222d      	movs	r2, #45	; 0x2d
    51b0:	5c9a      	ldrb	r2, [r3, r2]
    51b2:	2324      	movs	r3, #36	; 0x24
    51b4:	18fb      	adds	r3, r7, r3
    51b6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    51b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51ba:	b2db      	uxtb	r3, r3
    51bc:	2224      	movs	r2, #36	; 0x24
    51be:	18ba      	adds	r2, r7, r2
    51c0:	0011      	movs	r1, r2
    51c2:	0018      	movs	r0, r3
    51c4:	4b70      	ldr	r3, [pc, #448]	; (5388 <usart_init+0x24c>)
    51c6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    51c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51ca:	b2db      	uxtb	r3, r3
    51cc:	0018      	movs	r0, r3
    51ce:	4b6f      	ldr	r3, [pc, #444]	; (538c <usart_init+0x250>)
    51d0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	222d      	movs	r2, #45	; 0x2d
    51d6:	5c9b      	ldrb	r3, [r3, r2]
    51d8:	2100      	movs	r1, #0
    51da:	0018      	movs	r0, r3
    51dc:	4b6c      	ldr	r3, [pc, #432]	; (5390 <usart_init+0x254>)
    51de:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    51e0:	687b      	ldr	r3, [r7, #4]
    51e2:	7ada      	ldrb	r2, [r3, #11]
    51e4:	68fb      	ldr	r3, [r7, #12]
    51e6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    51e8:	687b      	ldr	r3, [r7, #4]
    51ea:	2224      	movs	r2, #36	; 0x24
    51ec:	5c9a      	ldrb	r2, [r3, r2]
    51ee:	68fb      	ldr	r3, [r7, #12]
    51f0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	2225      	movs	r2, #37	; 0x25
    51f6:	5c9a      	ldrb	r2, [r3, r2]
    51f8:	68fb      	ldr	r3, [r7, #12]
    51fa:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	7eda      	ldrb	r2, [r3, #27]
    5200:	68fb      	ldr	r3, [r7, #12]
    5202:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	7f1a      	ldrb	r2, [r3, #28]
    5208:	68fb      	ldr	r3, [r7, #12]
    520a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    520c:	233b      	movs	r3, #59	; 0x3b
    520e:	18fc      	adds	r4, r7, r3
    5210:	687a      	ldr	r2, [r7, #4]
    5212:	68fb      	ldr	r3, [r7, #12]
    5214:	0011      	movs	r1, r2
    5216:	0018      	movs	r0, r3
    5218:	4b5e      	ldr	r3, [pc, #376]	; (5394 <usart_init+0x258>)
    521a:	4798      	blx	r3
    521c:	0003      	movs	r3, r0
    521e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5220:	233b      	movs	r3, #59	; 0x3b
    5222:	18fb      	adds	r3, r7, r3
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d003      	beq.n	5232 <usart_init+0xf6>
		return status_code;
    522a:	233b      	movs	r3, #59	; 0x3b
    522c:	18fb      	adds	r3, r7, r3
    522e:	781b      	ldrb	r3, [r3, #0]
    5230:	e09f      	b.n	5372 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5232:	2320      	movs	r3, #32
    5234:	18fb      	adds	r3, r7, r3
    5236:	0018      	movs	r0, r3
    5238:	4b57      	ldr	r3, [pc, #348]	; (5398 <usart_init+0x25c>)
    523a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    523c:	2320      	movs	r3, #32
    523e:	18fb      	adds	r3, r7, r3
    5240:	2200      	movs	r2, #0
    5242:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5244:	2320      	movs	r3, #32
    5246:	18fb      	adds	r3, r7, r3
    5248:	2200      	movs	r2, #0
    524a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5250:	2310      	movs	r3, #16
    5252:	18fb      	adds	r3, r7, r3
    5254:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    525a:	2310      	movs	r3, #16
    525c:	18fb      	adds	r3, r7, r3
    525e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5264:	2310      	movs	r3, #16
    5266:	18fb      	adds	r3, r7, r3
    5268:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    526e:	2310      	movs	r3, #16
    5270:	18fb      	adds	r3, r7, r3
    5272:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5274:	2347      	movs	r3, #71	; 0x47
    5276:	18fb      	adds	r3, r7, r3
    5278:	2200      	movs	r2, #0
    527a:	701a      	strb	r2, [r3, #0]
    527c:	e02c      	b.n	52d8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    527e:	2347      	movs	r3, #71	; 0x47
    5280:	18fb      	adds	r3, r7, r3
    5282:	781a      	ldrb	r2, [r3, #0]
    5284:	2310      	movs	r3, #16
    5286:	18fb      	adds	r3, r7, r3
    5288:	0092      	lsls	r2, r2, #2
    528a:	58d3      	ldr	r3, [r2, r3]
    528c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    528e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5290:	2b00      	cmp	r3, #0
    5292:	d109      	bne.n	52a8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5294:	2347      	movs	r3, #71	; 0x47
    5296:	18fb      	adds	r3, r7, r3
    5298:	781a      	ldrb	r2, [r3, #0]
    529a:	68bb      	ldr	r3, [r7, #8]
    529c:	0011      	movs	r1, r2
    529e:	0018      	movs	r0, r3
    52a0:	4b3e      	ldr	r3, [pc, #248]	; (539c <usart_init+0x260>)
    52a2:	4798      	blx	r3
    52a4:	0003      	movs	r3, r0
    52a6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    52a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    52aa:	3301      	adds	r3, #1
    52ac:	d00d      	beq.n	52ca <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    52ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    52b0:	b2da      	uxtb	r2, r3
    52b2:	2320      	movs	r3, #32
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    52b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    52ba:	0c1b      	lsrs	r3, r3, #16
    52bc:	b2db      	uxtb	r3, r3
    52be:	2220      	movs	r2, #32
    52c0:	18ba      	adds	r2, r7, r2
    52c2:	0011      	movs	r1, r2
    52c4:	0018      	movs	r0, r3
    52c6:	4b36      	ldr	r3, [pc, #216]	; (53a0 <usart_init+0x264>)
    52c8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    52ca:	2347      	movs	r3, #71	; 0x47
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	781a      	ldrb	r2, [r3, #0]
    52d0:	2347      	movs	r3, #71	; 0x47
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	3201      	adds	r2, #1
    52d6:	701a      	strb	r2, [r3, #0]
    52d8:	2347      	movs	r3, #71	; 0x47
    52da:	18fb      	adds	r3, r7, r3
    52dc:	781b      	ldrb	r3, [r3, #0]
    52de:	2b03      	cmp	r3, #3
    52e0:	d9cd      	bls.n	527e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    52e2:	2300      	movs	r3, #0
    52e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    52e6:	e00a      	b.n	52fe <usart_init+0x1c2>
		module->callback[i]            = NULL;
    52e8:	68fa      	ldr	r2, [r7, #12]
    52ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52ec:	3302      	adds	r3, #2
    52ee:	009b      	lsls	r3, r3, #2
    52f0:	18d3      	adds	r3, r2, r3
    52f2:	3304      	adds	r3, #4
    52f4:	2200      	movs	r2, #0
    52f6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    52f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52fa:	3301      	adds	r3, #1
    52fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	2b05      	cmp	r3, #5
    5302:	d9f1      	bls.n	52e8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5304:	68fb      	ldr	r3, [r7, #12]
    5306:	2200      	movs	r2, #0
    5308:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    530a:	68fb      	ldr	r3, [r7, #12]
    530c:	2200      	movs	r2, #0
    530e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5310:	68fb      	ldr	r3, [r7, #12]
    5312:	2200      	movs	r2, #0
    5314:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5316:	68fb      	ldr	r3, [r7, #12]
    5318:	2200      	movs	r2, #0
    531a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	2230      	movs	r2, #48	; 0x30
    5320:	2100      	movs	r1, #0
    5322:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5324:	68fb      	ldr	r3, [r7, #12]
    5326:	2231      	movs	r2, #49	; 0x31
    5328:	2100      	movs	r1, #0
    532a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    532c:	68fb      	ldr	r3, [r7, #12]
    532e:	2232      	movs	r2, #50	; 0x32
    5330:	2100      	movs	r1, #0
    5332:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	2233      	movs	r2, #51	; 0x33
    5338:	2100      	movs	r1, #0
    533a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    533c:	68fb      	ldr	r3, [r7, #12]
    533e:	681b      	ldr	r3, [r3, #0]
    5340:	2227      	movs	r2, #39	; 0x27
    5342:	18bc      	adds	r4, r7, r2
    5344:	0018      	movs	r0, r3
    5346:	4b0d      	ldr	r3, [pc, #52]	; (537c <usart_init+0x240>)
    5348:	4798      	blx	r3
    534a:	0003      	movs	r3, r0
    534c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    534e:	4a15      	ldr	r2, [pc, #84]	; (53a4 <usart_init+0x268>)
    5350:	2327      	movs	r3, #39	; 0x27
    5352:	18fb      	adds	r3, r7, r3
    5354:	781b      	ldrb	r3, [r3, #0]
    5356:	0011      	movs	r1, r2
    5358:	0018      	movs	r0, r3
    535a:	4b13      	ldr	r3, [pc, #76]	; (53a8 <usart_init+0x26c>)
    535c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    535e:	2327      	movs	r3, #39	; 0x27
    5360:	18fb      	adds	r3, r7, r3
    5362:	781a      	ldrb	r2, [r3, #0]
    5364:	4b11      	ldr	r3, [pc, #68]	; (53ac <usart_init+0x270>)
    5366:	0092      	lsls	r2, r2, #2
    5368:	68f9      	ldr	r1, [r7, #12]
    536a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    536c:	233b      	movs	r3, #59	; 0x3b
    536e:	18fb      	adds	r3, r7, r3
    5370:	781b      	ldrb	r3, [r3, #0]
}
    5372:	0018      	movs	r0, r3
    5374:	46bd      	mov	sp, r7
    5376:	b013      	add	sp, #76	; 0x4c
    5378:	bd90      	pop	{r4, r7, pc}
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	000040f5 	.word	0x000040f5
    5380:	00004d79 	.word	0x00004d79
    5384:	00004d61 	.word	0x00004d61
    5388:	000064c1 	.word	0x000064c1
    538c:	00006505 	.word	0x00006505
    5390:	00003ead 	.word	0x00003ead
    5394:	00004e61 	.word	0x00004e61
    5398:	00004dd5 	.word	0x00004dd5
    539c:	00003f39 	.word	0x00003f39
    53a0:	000067ad 	.word	0x000067ad
    53a4:	00005545 	.word	0x00005545
    53a8:	00004159 	.word	0x00004159
    53ac:	200003c0 	.word	0x200003c0

000053b0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b084      	sub	sp, #16
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
    53b8:	000a      	movs	r2, r1
    53ba:	1cbb      	adds	r3, r7, #2
    53bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    53be:	687b      	ldr	r3, [r7, #4]
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	79db      	ldrb	r3, [r3, #7]
    53c8:	2201      	movs	r2, #1
    53ca:	4053      	eors	r3, r2
    53cc:	b2db      	uxtb	r3, r3
    53ce:	2b00      	cmp	r3, #0
    53d0:	d001      	beq.n	53d6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    53d2:	231c      	movs	r3, #28
    53d4:	e017      	b.n	5406 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    53d6:	687b      	ldr	r3, [r7, #4]
    53d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    53da:	b29b      	uxth	r3, r3
    53dc:	2b00      	cmp	r3, #0
    53de:	d001      	beq.n	53e4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    53e0:	2305      	movs	r3, #5
    53e2:	e010      	b.n	5406 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    53e4:	687b      	ldr	r3, [r7, #4]
    53e6:	0018      	movs	r0, r3
    53e8:	4b09      	ldr	r3, [pc, #36]	; (5410 <usart_write_wait+0x60>)
    53ea:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	1cba      	adds	r2, r7, #2
    53f0:	8812      	ldrh	r2, [r2, #0]
    53f2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    53f4:	46c0      	nop			; (mov r8, r8)
    53f6:	68fb      	ldr	r3, [r7, #12]
    53f8:	7e1b      	ldrb	r3, [r3, #24]
    53fa:	b2db      	uxtb	r3, r3
    53fc:	001a      	movs	r2, r3
    53fe:	2302      	movs	r3, #2
    5400:	4013      	ands	r3, r2
    5402:	d0f8      	beq.n	53f6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5404:	2300      	movs	r3, #0
}
    5406:	0018      	movs	r0, r3
    5408:	46bd      	mov	sp, r7
    540a:	b004      	add	sp, #16
    540c:	bd80      	pop	{r7, pc}
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00004e3d 	.word	0x00004e3d

00005414 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5414:	b580      	push	{r7, lr}
    5416:	b084      	sub	sp, #16
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5424:	687b      	ldr	r3, [r7, #4]
    5426:	799b      	ldrb	r3, [r3, #6]
    5428:	2201      	movs	r2, #1
    542a:	4053      	eors	r3, r2
    542c:	b2db      	uxtb	r3, r3
    542e:	2b00      	cmp	r3, #0
    5430:	d001      	beq.n	5436 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5432:	231c      	movs	r3, #28
    5434:	e05e      	b.n	54f4 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    543a:	b29b      	uxth	r3, r3
    543c:	2b00      	cmp	r3, #0
    543e:	d001      	beq.n	5444 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5440:	2305      	movs	r3, #5
    5442:	e057      	b.n	54f4 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5444:	68fb      	ldr	r3, [r7, #12]
    5446:	7e1b      	ldrb	r3, [r3, #24]
    5448:	b2db      	uxtb	r3, r3
    544a:	001a      	movs	r2, r3
    544c:	2304      	movs	r3, #4
    544e:	4013      	ands	r3, r2
    5450:	d101      	bne.n	5456 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5452:	2305      	movs	r3, #5
    5454:	e04e      	b.n	54f4 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	0018      	movs	r0, r3
    545a:	4b28      	ldr	r3, [pc, #160]	; (54fc <usart_read_wait+0xe8>)
    545c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	8b5b      	ldrh	r3, [r3, #26]
    5462:	b29b      	uxth	r3, r3
    5464:	b2da      	uxtb	r2, r3
    5466:	230b      	movs	r3, #11
    5468:	18fb      	adds	r3, r7, r3
    546a:	213f      	movs	r1, #63	; 0x3f
    546c:	400a      	ands	r2, r1
    546e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5470:	230b      	movs	r3, #11
    5472:	18fb      	adds	r3, r7, r3
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	2b00      	cmp	r3, #0
    5478:	d036      	beq.n	54e8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    547a:	230b      	movs	r3, #11
    547c:	18fb      	adds	r3, r7, r3
    547e:	781b      	ldrb	r3, [r3, #0]
    5480:	2202      	movs	r2, #2
    5482:	4013      	ands	r3, r2
    5484:	d004      	beq.n	5490 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5486:	68fb      	ldr	r3, [r7, #12]
    5488:	2202      	movs	r2, #2
    548a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    548c:	231a      	movs	r3, #26
    548e:	e031      	b.n	54f4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5490:	230b      	movs	r3, #11
    5492:	18fb      	adds	r3, r7, r3
    5494:	781b      	ldrb	r3, [r3, #0]
    5496:	2204      	movs	r2, #4
    5498:	4013      	ands	r3, r2
    549a:	d004      	beq.n	54a6 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    549c:	68fb      	ldr	r3, [r7, #12]
    549e:	2204      	movs	r2, #4
    54a0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    54a2:	231e      	movs	r3, #30
    54a4:	e026      	b.n	54f4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    54a6:	230b      	movs	r3, #11
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	2201      	movs	r2, #1
    54ae:	4013      	ands	r3, r2
    54b0:	d004      	beq.n	54bc <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    54b2:	68fb      	ldr	r3, [r7, #12]
    54b4:	2201      	movs	r2, #1
    54b6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    54b8:	2313      	movs	r3, #19
    54ba:	e01b      	b.n	54f4 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    54bc:	230b      	movs	r3, #11
    54be:	18fb      	adds	r3, r7, r3
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2210      	movs	r2, #16
    54c4:	4013      	ands	r3, r2
    54c6:	d004      	beq.n	54d2 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    54c8:	68fb      	ldr	r3, [r7, #12]
    54ca:	2210      	movs	r2, #16
    54cc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    54ce:	2342      	movs	r3, #66	; 0x42
    54d0:	e010      	b.n	54f4 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    54d2:	230b      	movs	r3, #11
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	2220      	movs	r2, #32
    54da:	4013      	ands	r3, r2
    54dc:	d004      	beq.n	54e8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	2220      	movs	r2, #32
    54e2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    54e4:	2341      	movs	r3, #65	; 0x41
    54e6:	e005      	b.n	54f4 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    54e8:	68fb      	ldr	r3, [r7, #12]
    54ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    54ec:	b29a      	uxth	r2, r3
    54ee:	683b      	ldr	r3, [r7, #0]
    54f0:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    54f2:	2300      	movs	r3, #0
}
    54f4:	0018      	movs	r0, r3
    54f6:	46bd      	mov	sp, r7
    54f8:	b004      	add	sp, #16
    54fa:	bd80      	pop	{r7, pc}
    54fc:	00004e3d 	.word	0x00004e3d

00005500 <usart_is_syncing>:
{
    5500:	b580      	push	{r7, lr}
    5502:	b084      	sub	sp, #16
    5504:	af00      	add	r7, sp, #0
    5506:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    550e:	68fb      	ldr	r3, [r7, #12]
    5510:	69db      	ldr	r3, [r3, #28]
    5512:	1e5a      	subs	r2, r3, #1
    5514:	4193      	sbcs	r3, r2
    5516:	b2db      	uxtb	r3, r3
}
    5518:	0018      	movs	r0, r3
    551a:	46bd      	mov	sp, r7
    551c:	b004      	add	sp, #16
    551e:	bd80      	pop	{r7, pc}

00005520 <_usart_wait_for_sync>:
{
    5520:	b580      	push	{r7, lr}
    5522:	b082      	sub	sp, #8
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5528:	46c0      	nop			; (mov r8, r8)
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	0018      	movs	r0, r3
    552e:	4b04      	ldr	r3, [pc, #16]	; (5540 <_usart_wait_for_sync+0x20>)
    5530:	4798      	blx	r3
    5532:	1e03      	subs	r3, r0, #0
    5534:	d1f9      	bne.n	552a <_usart_wait_for_sync+0xa>
}
    5536:	46c0      	nop			; (mov r8, r8)
    5538:	46bd      	mov	sp, r7
    553a:	b002      	add	sp, #8
    553c:	bd80      	pop	{r7, pc}
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	00005501 	.word	0x00005501

00005544 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5544:	b580      	push	{r7, lr}
    5546:	b088      	sub	sp, #32
    5548:	af00      	add	r7, sp, #0
    554a:	0002      	movs	r2, r0
    554c:	1dfb      	adds	r3, r7, #7
    554e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5550:	1dfb      	adds	r3, r7, #7
    5552:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5554:	4ba3      	ldr	r3, [pc, #652]	; (57e4 <_usart_interrupt_handler+0x2a0>)
    5556:	0092      	lsls	r2, r2, #2
    5558:	58d3      	ldr	r3, [r2, r3]
    555a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    555c:	69bb      	ldr	r3, [r7, #24]
    555e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5560:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5562:	69bb      	ldr	r3, [r7, #24]
    5564:	0018      	movs	r0, r3
    5566:	4ba0      	ldr	r3, [pc, #640]	; (57e8 <_usart_interrupt_handler+0x2a4>)
    5568:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    556a:	697b      	ldr	r3, [r7, #20]
    556c:	7e1b      	ldrb	r3, [r3, #24]
    556e:	b2da      	uxtb	r2, r3
    5570:	2312      	movs	r3, #18
    5572:	18fb      	adds	r3, r7, r3
    5574:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5576:	697b      	ldr	r3, [r7, #20]
    5578:	7d9b      	ldrb	r3, [r3, #22]
    557a:	b2db      	uxtb	r3, r3
    557c:	b29a      	uxth	r2, r3
    557e:	2312      	movs	r3, #18
    5580:	18fb      	adds	r3, r7, r3
    5582:	2112      	movs	r1, #18
    5584:	1879      	adds	r1, r7, r1
    5586:	8809      	ldrh	r1, [r1, #0]
    5588:	400a      	ands	r2, r1
    558a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    558c:	69bb      	ldr	r3, [r7, #24]
    558e:	2230      	movs	r2, #48	; 0x30
    5590:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5592:	69ba      	ldr	r2, [r7, #24]
    5594:	2131      	movs	r1, #49	; 0x31
    5596:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5598:	4013      	ands	r3, r2
    559a:	b2da      	uxtb	r2, r3
    559c:	2310      	movs	r3, #16
    559e:	18fb      	adds	r3, r7, r3
    55a0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    55a2:	2312      	movs	r3, #18
    55a4:	18fb      	adds	r3, r7, r3
    55a6:	881b      	ldrh	r3, [r3, #0]
    55a8:	2201      	movs	r2, #1
    55aa:	4013      	ands	r3, r2
    55ac:	d044      	beq.n	5638 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    55ae:	69bb      	ldr	r3, [r7, #24]
    55b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    55b2:	b29b      	uxth	r3, r3
    55b4:	2b00      	cmp	r3, #0
    55b6:	d03c      	beq.n	5632 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55b8:	69bb      	ldr	r3, [r7, #24]
    55ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	b2da      	uxtb	r2, r3
    55c0:	231c      	movs	r3, #28
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    55c6:	69bb      	ldr	r3, [r7, #24]
    55c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55ca:	1c5a      	adds	r2, r3, #1
    55cc:	69bb      	ldr	r3, [r7, #24]
    55ce:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    55d0:	69bb      	ldr	r3, [r7, #24]
    55d2:	795b      	ldrb	r3, [r3, #5]
    55d4:	2b01      	cmp	r3, #1
    55d6:	d113      	bne.n	5600 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    55d8:	69bb      	ldr	r3, [r7, #24]
    55da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	b2db      	uxtb	r3, r3
    55e0:	021b      	lsls	r3, r3, #8
    55e2:	b21a      	sxth	r2, r3
    55e4:	231c      	movs	r3, #28
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	2100      	movs	r1, #0
    55ea:	5e5b      	ldrsh	r3, [r3, r1]
    55ec:	4313      	orrs	r3, r2
    55ee:	b21a      	sxth	r2, r3
    55f0:	231c      	movs	r3, #28
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    55f6:	69bb      	ldr	r3, [r7, #24]
    55f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55fa:	1c5a      	adds	r2, r3, #1
    55fc:	69bb      	ldr	r3, [r7, #24]
    55fe:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5600:	231c      	movs	r3, #28
    5602:	18fb      	adds	r3, r7, r3
    5604:	881b      	ldrh	r3, [r3, #0]
    5606:	05db      	lsls	r3, r3, #23
    5608:	0ddb      	lsrs	r3, r3, #23
    560a:	b29a      	uxth	r2, r3
    560c:	697b      	ldr	r3, [r7, #20]
    560e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5610:	69bb      	ldr	r3, [r7, #24]
    5612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5614:	b29b      	uxth	r3, r3
    5616:	3b01      	subs	r3, #1
    5618:	b29b      	uxth	r3, r3
    561a:	69ba      	ldr	r2, [r7, #24]
    561c:	1c19      	adds	r1, r3, #0
    561e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5620:	2b00      	cmp	r3, #0
    5622:	d109      	bne.n	5638 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5624:	697b      	ldr	r3, [r7, #20]
    5626:	2201      	movs	r2, #1
    5628:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    562a:	697b      	ldr	r3, [r7, #20]
    562c:	2202      	movs	r2, #2
    562e:	759a      	strb	r2, [r3, #22]
    5630:	e002      	b.n	5638 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5632:	697b      	ldr	r3, [r7, #20]
    5634:	2201      	movs	r2, #1
    5636:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5638:	2312      	movs	r3, #18
    563a:	18fb      	adds	r3, r7, r3
    563c:	881b      	ldrh	r3, [r3, #0]
    563e:	2202      	movs	r2, #2
    5640:	4013      	ands	r3, r2
    5642:	d011      	beq.n	5668 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5644:	697b      	ldr	r3, [r7, #20]
    5646:	2202      	movs	r2, #2
    5648:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    564a:	69bb      	ldr	r3, [r7, #24]
    564c:	2233      	movs	r2, #51	; 0x33
    564e:	2100      	movs	r1, #0
    5650:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5652:	2310      	movs	r3, #16
    5654:	18fb      	adds	r3, r7, r3
    5656:	881b      	ldrh	r3, [r3, #0]
    5658:	2201      	movs	r2, #1
    565a:	4013      	ands	r3, r2
    565c:	d004      	beq.n	5668 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    565e:	69bb      	ldr	r3, [r7, #24]
    5660:	68db      	ldr	r3, [r3, #12]
    5662:	69ba      	ldr	r2, [r7, #24]
    5664:	0010      	movs	r0, r2
    5666:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5668:	2312      	movs	r3, #18
    566a:	18fb      	adds	r3, r7, r3
    566c:	881b      	ldrh	r3, [r3, #0]
    566e:	2204      	movs	r2, #4
    5670:	4013      	ands	r3, r2
    5672:	d100      	bne.n	5676 <_usart_interrupt_handler+0x132>
    5674:	e0bd      	b.n	57f2 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5676:	69bb      	ldr	r3, [r7, #24]
    5678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    567a:	b29b      	uxth	r3, r3
    567c:	2b00      	cmp	r3, #0
    567e:	d100      	bne.n	5682 <_usart_interrupt_handler+0x13e>
    5680:	e0b4      	b.n	57ec <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5682:	697b      	ldr	r3, [r7, #20]
    5684:	8b5b      	ldrh	r3, [r3, #26]
    5686:	b29b      	uxth	r3, r3
    5688:	b2da      	uxtb	r2, r3
    568a:	231f      	movs	r3, #31
    568c:	18fb      	adds	r3, r7, r3
    568e:	213f      	movs	r1, #63	; 0x3f
    5690:	400a      	ands	r2, r1
    5692:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5694:	231f      	movs	r3, #31
    5696:	18fb      	adds	r3, r7, r3
    5698:	781b      	ldrb	r3, [r3, #0]
    569a:	2208      	movs	r2, #8
    569c:	4013      	ands	r3, r2
    569e:	d007      	beq.n	56b0 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    56a0:	231f      	movs	r3, #31
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	221f      	movs	r2, #31
    56a6:	18ba      	adds	r2, r7, r2
    56a8:	7812      	ldrb	r2, [r2, #0]
    56aa:	2108      	movs	r1, #8
    56ac:	438a      	bics	r2, r1
    56ae:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    56b0:	231f      	movs	r3, #31
    56b2:	18fb      	adds	r3, r7, r3
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d050      	beq.n	575c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    56ba:	231f      	movs	r3, #31
    56bc:	18fb      	adds	r3, r7, r3
    56be:	781b      	ldrb	r3, [r3, #0]
    56c0:	2202      	movs	r2, #2
    56c2:	4013      	ands	r3, r2
    56c4:	d007      	beq.n	56d6 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    56c6:	69bb      	ldr	r3, [r7, #24]
    56c8:	2232      	movs	r2, #50	; 0x32
    56ca:	211a      	movs	r1, #26
    56cc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    56ce:	697b      	ldr	r3, [r7, #20]
    56d0:	2202      	movs	r2, #2
    56d2:	835a      	strh	r2, [r3, #26]
    56d4:	e036      	b.n	5744 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    56d6:	231f      	movs	r3, #31
    56d8:	18fb      	adds	r3, r7, r3
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	2204      	movs	r2, #4
    56de:	4013      	ands	r3, r2
    56e0:	d007      	beq.n	56f2 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    56e2:	69bb      	ldr	r3, [r7, #24]
    56e4:	2232      	movs	r2, #50	; 0x32
    56e6:	211e      	movs	r1, #30
    56e8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    56ea:	697b      	ldr	r3, [r7, #20]
    56ec:	2204      	movs	r2, #4
    56ee:	835a      	strh	r2, [r3, #26]
    56f0:	e028      	b.n	5744 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    56f2:	231f      	movs	r3, #31
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	781b      	ldrb	r3, [r3, #0]
    56f8:	2201      	movs	r2, #1
    56fa:	4013      	ands	r3, r2
    56fc:	d007      	beq.n	570e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    56fe:	69bb      	ldr	r3, [r7, #24]
    5700:	2232      	movs	r2, #50	; 0x32
    5702:	2113      	movs	r1, #19
    5704:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5706:	697b      	ldr	r3, [r7, #20]
    5708:	2201      	movs	r2, #1
    570a:	835a      	strh	r2, [r3, #26]
    570c:	e01a      	b.n	5744 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    570e:	231f      	movs	r3, #31
    5710:	18fb      	adds	r3, r7, r3
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	2210      	movs	r2, #16
    5716:	4013      	ands	r3, r2
    5718:	d007      	beq.n	572a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    571a:	69bb      	ldr	r3, [r7, #24]
    571c:	2232      	movs	r2, #50	; 0x32
    571e:	2142      	movs	r1, #66	; 0x42
    5720:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5722:	697b      	ldr	r3, [r7, #20]
    5724:	2210      	movs	r2, #16
    5726:	835a      	strh	r2, [r3, #26]
    5728:	e00c      	b.n	5744 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    572a:	231f      	movs	r3, #31
    572c:	18fb      	adds	r3, r7, r3
    572e:	781b      	ldrb	r3, [r3, #0]
    5730:	2220      	movs	r2, #32
    5732:	4013      	ands	r3, r2
    5734:	d006      	beq.n	5744 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5736:	69bb      	ldr	r3, [r7, #24]
    5738:	2232      	movs	r2, #50	; 0x32
    573a:	2141      	movs	r1, #65	; 0x41
    573c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    573e:	697b      	ldr	r3, [r7, #20]
    5740:	2220      	movs	r2, #32
    5742:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5744:	2310      	movs	r3, #16
    5746:	18fb      	adds	r3, r7, r3
    5748:	881b      	ldrh	r3, [r3, #0]
    574a:	2204      	movs	r2, #4
    574c:	4013      	ands	r3, r2
				if (callback_status
    574e:	d050      	beq.n	57f2 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5750:	69bb      	ldr	r3, [r7, #24]
    5752:	695b      	ldr	r3, [r3, #20]
    5754:	69ba      	ldr	r2, [r7, #24]
    5756:	0010      	movs	r0, r2
    5758:	4798      	blx	r3
    575a:	e04a      	b.n	57f2 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    575c:	697b      	ldr	r3, [r7, #20]
    575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5760:	b29a      	uxth	r2, r3
    5762:	230e      	movs	r3, #14
    5764:	18fb      	adds	r3, r7, r3
    5766:	05d2      	lsls	r2, r2, #23
    5768:	0dd2      	lsrs	r2, r2, #23
    576a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    576c:	69bb      	ldr	r3, [r7, #24]
    576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5770:	220e      	movs	r2, #14
    5772:	18ba      	adds	r2, r7, r2
    5774:	8812      	ldrh	r2, [r2, #0]
    5776:	b2d2      	uxtb	r2, r2
    5778:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    577a:	69bb      	ldr	r3, [r7, #24]
    577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    577e:	1c5a      	adds	r2, r3, #1
    5780:	69bb      	ldr	r3, [r7, #24]
    5782:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5784:	69bb      	ldr	r3, [r7, #24]
    5786:	795b      	ldrb	r3, [r3, #5]
    5788:	2b01      	cmp	r3, #1
    578a:	d10d      	bne.n	57a8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    578c:	69bb      	ldr	r3, [r7, #24]
    578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5790:	220e      	movs	r2, #14
    5792:	18ba      	adds	r2, r7, r2
    5794:	8812      	ldrh	r2, [r2, #0]
    5796:	0a12      	lsrs	r2, r2, #8
    5798:	b292      	uxth	r2, r2
    579a:	b2d2      	uxtb	r2, r2
    579c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    579e:	69bb      	ldr	r3, [r7, #24]
    57a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57a2:	1c5a      	adds	r2, r3, #1
    57a4:	69bb      	ldr	r3, [r7, #24]
    57a6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    57a8:	69bb      	ldr	r3, [r7, #24]
    57aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    57ac:	b29b      	uxth	r3, r3
    57ae:	3b01      	subs	r3, #1
    57b0:	b29b      	uxth	r3, r3
    57b2:	69ba      	ldr	r2, [r7, #24]
    57b4:	1c19      	adds	r1, r3, #0
    57b6:	8591      	strh	r1, [r2, #44]	; 0x2c
    57b8:	2b00      	cmp	r3, #0
    57ba:	d11a      	bne.n	57f2 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    57bc:	697b      	ldr	r3, [r7, #20]
    57be:	2204      	movs	r2, #4
    57c0:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    57c2:	69bb      	ldr	r3, [r7, #24]
    57c4:	2232      	movs	r2, #50	; 0x32
    57c6:	2100      	movs	r1, #0
    57c8:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    57ca:	2310      	movs	r3, #16
    57cc:	18fb      	adds	r3, r7, r3
    57ce:	881b      	ldrh	r3, [r3, #0]
    57d0:	2202      	movs	r2, #2
    57d2:	4013      	ands	r3, r2
					if (callback_status
    57d4:	d00d      	beq.n	57f2 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    57d6:	69bb      	ldr	r3, [r7, #24]
    57d8:	691b      	ldr	r3, [r3, #16]
    57da:	69ba      	ldr	r2, [r7, #24]
    57dc:	0010      	movs	r0, r2
    57de:	4798      	blx	r3
    57e0:	e007      	b.n	57f2 <_usart_interrupt_handler+0x2ae>
    57e2:	46c0      	nop			; (mov r8, r8)
    57e4:	200003c0 	.word	0x200003c0
    57e8:	00005521 	.word	0x00005521
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    57ec:	697b      	ldr	r3, [r7, #20]
    57ee:	2204      	movs	r2, #4
    57f0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    57f2:	2312      	movs	r3, #18
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	881b      	ldrh	r3, [r3, #0]
    57f8:	2210      	movs	r2, #16
    57fa:	4013      	ands	r3, r2
    57fc:	d010      	beq.n	5820 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    57fe:	697b      	ldr	r3, [r7, #20]
    5800:	2210      	movs	r2, #16
    5802:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5804:	697b      	ldr	r3, [r7, #20]
    5806:	2210      	movs	r2, #16
    5808:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    580a:	2310      	movs	r3, #16
    580c:	18fb      	adds	r3, r7, r3
    580e:	881b      	ldrh	r3, [r3, #0]
    5810:	2210      	movs	r2, #16
    5812:	4013      	ands	r3, r2
    5814:	d004      	beq.n	5820 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5816:	69bb      	ldr	r3, [r7, #24]
    5818:	69db      	ldr	r3, [r3, #28]
    581a:	69ba      	ldr	r2, [r7, #24]
    581c:	0010      	movs	r0, r2
    581e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5820:	2312      	movs	r3, #18
    5822:	18fb      	adds	r3, r7, r3
    5824:	881b      	ldrh	r3, [r3, #0]
    5826:	2220      	movs	r2, #32
    5828:	4013      	ands	r3, r2
    582a:	d010      	beq.n	584e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    582c:	697b      	ldr	r3, [r7, #20]
    582e:	2220      	movs	r2, #32
    5830:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5832:	697b      	ldr	r3, [r7, #20]
    5834:	2220      	movs	r2, #32
    5836:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5838:	2310      	movs	r3, #16
    583a:	18fb      	adds	r3, r7, r3
    583c:	881b      	ldrh	r3, [r3, #0]
    583e:	2208      	movs	r2, #8
    5840:	4013      	ands	r3, r2
    5842:	d004      	beq.n	584e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5844:	69bb      	ldr	r3, [r7, #24]
    5846:	699b      	ldr	r3, [r3, #24]
    5848:	69ba      	ldr	r2, [r7, #24]
    584a:	0010      	movs	r0, r2
    584c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    584e:	2312      	movs	r3, #18
    5850:	18fb      	adds	r3, r7, r3
    5852:	881b      	ldrh	r3, [r3, #0]
    5854:	2208      	movs	r2, #8
    5856:	4013      	ands	r3, r2
    5858:	d010      	beq.n	587c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    585a:	697b      	ldr	r3, [r7, #20]
    585c:	2208      	movs	r2, #8
    585e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5860:	697b      	ldr	r3, [r7, #20]
    5862:	2208      	movs	r2, #8
    5864:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5866:	2310      	movs	r3, #16
    5868:	18fb      	adds	r3, r7, r3
    586a:	881b      	ldrh	r3, [r3, #0]
    586c:	2220      	movs	r2, #32
    586e:	4013      	ands	r3, r2
    5870:	d004      	beq.n	587c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5872:	69bb      	ldr	r3, [r7, #24]
    5874:	6a1b      	ldr	r3, [r3, #32]
    5876:	69ba      	ldr	r2, [r7, #24]
    5878:	0010      	movs	r0, r2
    587a:	4798      	blx	r3
		}
	}
#endif
}
    587c:	46c0      	nop			; (mov r8, r8)
    587e:	46bd      	mov	sp, r7
    5880:	b008      	add	sp, #32
    5882:	bd80      	pop	{r7, pc}

00005884 <system_gclk_gen_get_config_defaults>:
{
    5884:	b580      	push	{r7, lr}
    5886:	b082      	sub	sp, #8
    5888:	af00      	add	r7, sp, #0
    588a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    588c:	687b      	ldr	r3, [r7, #4]
    588e:	2201      	movs	r2, #1
    5890:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	2200      	movs	r2, #0
    5896:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	2206      	movs	r2, #6
    589c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    589e:	687b      	ldr	r3, [r7, #4]
    58a0:	2200      	movs	r2, #0
    58a2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    58a4:	687b      	ldr	r3, [r7, #4]
    58a6:	2200      	movs	r2, #0
    58a8:	725a      	strb	r2, [r3, #9]
}
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	46bd      	mov	sp, r7
    58ae:	b002      	add	sp, #8
    58b0:	bd80      	pop	{r7, pc}

000058b2 <system_gclk_chan_get_config_defaults>:
{
    58b2:	b580      	push	{r7, lr}
    58b4:	b082      	sub	sp, #8
    58b6:	af00      	add	r7, sp, #0
    58b8:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    58ba:	687b      	ldr	r3, [r7, #4]
    58bc:	2200      	movs	r2, #0
    58be:	701a      	strb	r2, [r3, #0]
}
    58c0:	46c0      	nop			; (mov r8, r8)
    58c2:	46bd      	mov	sp, r7
    58c4:	b002      	add	sp, #8
    58c6:	bd80      	pop	{r7, pc}

000058c8 <system_clock_source_xosc32k_get_config_defaults>:
{
    58c8:	b580      	push	{r7, lr}
    58ca:	b082      	sub	sp, #8
    58cc:	af00      	add	r7, sp, #0
    58ce:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	2200      	movs	r2, #0
    58d4:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	2204      	movs	r2, #4
    58da:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	2200      	movs	r2, #0
    58e0:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	2280      	movs	r2, #128	; 0x80
    58e6:	0212      	lsls	r2, r2, #8
    58e8:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	2200      	movs	r2, #0
    58ee:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	2201      	movs	r2, #1
    58f4:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	2200      	movs	r2, #0
    58fa:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	2201      	movs	r2, #1
    5900:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5902:	687b      	ldr	r3, [r7, #4]
    5904:	2200      	movs	r2, #0
    5906:	739a      	strb	r2, [r3, #14]
}
    5908:	46c0      	nop			; (mov r8, r8)
    590a:	46bd      	mov	sp, r7
    590c:	b002      	add	sp, #8
    590e:	bd80      	pop	{r7, pc}

00005910 <system_clock_source_osc8m_get_config_defaults>:
{
    5910:	b580      	push	{r7, lr}
    5912:	b082      	sub	sp, #8
    5914:	af00      	add	r7, sp, #0
    5916:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	2203      	movs	r2, #3
    591c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    591e:	687b      	ldr	r3, [r7, #4]
    5920:	2200      	movs	r2, #0
    5922:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	2201      	movs	r2, #1
    5928:	709a      	strb	r2, [r3, #2]
}
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	46bd      	mov	sp, r7
    592e:	b002      	add	sp, #8
    5930:	bd80      	pop	{r7, pc}

00005932 <system_clock_source_dfll_get_config_defaults>:
{
    5932:	b580      	push	{r7, lr}
    5934:	b082      	sub	sp, #8
    5936:	af00      	add	r7, sp, #0
    5938:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	2200      	movs	r2, #0
    593e:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	2200      	movs	r2, #0
    5944:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	2200      	movs	r2, #0
    594a:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    594c:	687b      	ldr	r3, [r7, #4]
    594e:	2200      	movs	r2, #0
    5950:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	2200      	movs	r2, #0
    5956:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	2201      	movs	r2, #1
    595c:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	2207      	movs	r2, #7
    5962:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	223f      	movs	r2, #63	; 0x3f
    5968:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	2201      	movs	r2, #1
    596e:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	2201      	movs	r2, #1
    5974:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	2206      	movs	r2, #6
    597a:	821a      	strh	r2, [r3, #16]
}
    597c:	46c0      	nop			; (mov r8, r8)
    597e:	46bd      	mov	sp, r7
    5980:	b002      	add	sp, #8
    5982:	bd80      	pop	{r7, pc}

00005984 <system_cpu_clock_set_divider>:
{
    5984:	b580      	push	{r7, lr}
    5986:	b082      	sub	sp, #8
    5988:	af00      	add	r7, sp, #0
    598a:	0002      	movs	r2, r0
    598c:	1dfb      	adds	r3, r7, #7
    598e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5990:	4a03      	ldr	r2, [pc, #12]	; (59a0 <system_cpu_clock_set_divider+0x1c>)
    5992:	1dfb      	adds	r3, r7, #7
    5994:	781b      	ldrb	r3, [r3, #0]
    5996:	7213      	strb	r3, [r2, #8]
}
    5998:	46c0      	nop			; (mov r8, r8)
    599a:	46bd      	mov	sp, r7
    599c:	b002      	add	sp, #8
    599e:	bd80      	pop	{r7, pc}
    59a0:	40000400 	.word	0x40000400

000059a4 <system_apb_clock_set_divider>:
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b082      	sub	sp, #8
    59a8:	af00      	add	r7, sp, #0
    59aa:	0002      	movs	r2, r0
    59ac:	1dfb      	adds	r3, r7, #7
    59ae:	701a      	strb	r2, [r3, #0]
    59b0:	1dbb      	adds	r3, r7, #6
    59b2:	1c0a      	adds	r2, r1, #0
    59b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    59b6:	1dfb      	adds	r3, r7, #7
    59b8:	781b      	ldrb	r3, [r3, #0]
    59ba:	2b01      	cmp	r3, #1
    59bc:	d008      	beq.n	59d0 <system_apb_clock_set_divider+0x2c>
    59be:	2b02      	cmp	r3, #2
    59c0:	d00b      	beq.n	59da <system_apb_clock_set_divider+0x36>
    59c2:	2b00      	cmp	r3, #0
    59c4:	d10e      	bne.n	59e4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    59c6:	4a0b      	ldr	r2, [pc, #44]	; (59f4 <system_apb_clock_set_divider+0x50>)
    59c8:	1dbb      	adds	r3, r7, #6
    59ca:	781b      	ldrb	r3, [r3, #0]
    59cc:	7253      	strb	r3, [r2, #9]
			break;
    59ce:	e00b      	b.n	59e8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    59d0:	4a08      	ldr	r2, [pc, #32]	; (59f4 <system_apb_clock_set_divider+0x50>)
    59d2:	1dbb      	adds	r3, r7, #6
    59d4:	781b      	ldrb	r3, [r3, #0]
    59d6:	7293      	strb	r3, [r2, #10]
			break;
    59d8:	e006      	b.n	59e8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    59da:	4a06      	ldr	r2, [pc, #24]	; (59f4 <system_apb_clock_set_divider+0x50>)
    59dc:	1dbb      	adds	r3, r7, #6
    59de:	781b      	ldrb	r3, [r3, #0]
    59e0:	72d3      	strb	r3, [r2, #11]
			break;
    59e2:	e001      	b.n	59e8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    59e4:	2317      	movs	r3, #23
    59e6:	e000      	b.n	59ea <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    59e8:	2300      	movs	r3, #0
}
    59ea:	0018      	movs	r0, r3
    59ec:	46bd      	mov	sp, r7
    59ee:	b002      	add	sp, #8
    59f0:	bd80      	pop	{r7, pc}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	40000400 	.word	0x40000400

000059f8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	b082      	sub	sp, #8
    59fc:	af00      	add	r7, sp, #0
    59fe:	0002      	movs	r2, r0
    5a00:	1dfb      	adds	r3, r7, #7
    5a02:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5a04:	4a08      	ldr	r2, [pc, #32]	; (5a28 <system_flash_set_waitstates+0x30>)
    5a06:	1dfb      	adds	r3, r7, #7
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	210f      	movs	r1, #15
    5a0c:	400b      	ands	r3, r1
    5a0e:	b2d9      	uxtb	r1, r3
    5a10:	6853      	ldr	r3, [r2, #4]
    5a12:	200f      	movs	r0, #15
    5a14:	4001      	ands	r1, r0
    5a16:	0049      	lsls	r1, r1, #1
    5a18:	201e      	movs	r0, #30
    5a1a:	4383      	bics	r3, r0
    5a1c:	430b      	orrs	r3, r1
    5a1e:	6053      	str	r3, [r2, #4]
}
    5a20:	46c0      	nop			; (mov r8, r8)
    5a22:	46bd      	mov	sp, r7
    5a24:	b002      	add	sp, #8
    5a26:	bd80      	pop	{r7, pc}
    5a28:	41004000 	.word	0x41004000

00005a2c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5a30:	46c0      	nop			; (mov r8, r8)
    5a32:	4b04      	ldr	r3, [pc, #16]	; (5a44 <_system_dfll_wait_for_sync+0x18>)
    5a34:	68db      	ldr	r3, [r3, #12]
    5a36:	2210      	movs	r2, #16
    5a38:	4013      	ands	r3, r2
    5a3a:	d0fa      	beq.n	5a32 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5a3c:	46c0      	nop			; (mov r8, r8)
    5a3e:	46bd      	mov	sp, r7
    5a40:	bd80      	pop	{r7, pc}
    5a42:	46c0      	nop			; (mov r8, r8)
    5a44:	40000800 	.word	0x40000800

00005a48 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5a48:	b580      	push	{r7, lr}
    5a4a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5a4c:	4b0c      	ldr	r3, [pc, #48]	; (5a80 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a4e:	2202      	movs	r2, #2
    5a50:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5a52:	4b0c      	ldr	r3, [pc, #48]	; (5a84 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5a54:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5a56:	4a0a      	ldr	r2, [pc, #40]	; (5a80 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a58:	4b0b      	ldr	r3, [pc, #44]	; (5a88 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5a5a:	689b      	ldr	r3, [r3, #8]
    5a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5a5e:	4a08      	ldr	r2, [pc, #32]	; (5a80 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a60:	4b09      	ldr	r3, [pc, #36]	; (5a88 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5a62:	685b      	ldr	r3, [r3, #4]
    5a64:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5a66:	4b06      	ldr	r3, [pc, #24]	; (5a80 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a68:	2200      	movs	r2, #0
    5a6a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5a6c:	4b05      	ldr	r3, [pc, #20]	; (5a84 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5a6e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5a70:	4a03      	ldr	r2, [pc, #12]	; (5a80 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5a72:	4b05      	ldr	r3, [pc, #20]	; (5a88 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5a74:	681b      	ldr	r3, [r3, #0]
    5a76:	b29b      	uxth	r3, r3
    5a78:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5a7a:	46c0      	nop			; (mov r8, r8)
    5a7c:	46bd      	mov	sp, r7
    5a7e:	bd80      	pop	{r7, pc}
    5a80:	40000800 	.word	0x40000800
    5a84:	00005a2d 	.word	0x00005a2d
    5a88:	20000284 	.word	0x20000284

00005a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
    5a92:	0002      	movs	r2, r0
    5a94:	1dfb      	adds	r3, r7, #7
    5a96:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5a98:	1dfb      	adds	r3, r7, #7
    5a9a:	781b      	ldrb	r3, [r3, #0]
    5a9c:	2b08      	cmp	r3, #8
    5a9e:	d840      	bhi.n	5b22 <system_clock_source_get_hz+0x96>
    5aa0:	009a      	lsls	r2, r3, #2
    5aa2:	4b22      	ldr	r3, [pc, #136]	; (5b2c <system_clock_source_get_hz+0xa0>)
    5aa4:	18d3      	adds	r3, r2, r3
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5aaa:	4b21      	ldr	r3, [pc, #132]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5aac:	691b      	ldr	r3, [r3, #16]
    5aae:	e039      	b.n	5b24 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5ab0:	4b20      	ldr	r3, [pc, #128]	; (5b34 <system_clock_source_get_hz+0xa8>)
    5ab2:	6a1b      	ldr	r3, [r3, #32]
    5ab4:	059b      	lsls	r3, r3, #22
    5ab6:	0f9b      	lsrs	r3, r3, #30
    5ab8:	b2db      	uxtb	r3, r3
    5aba:	001a      	movs	r2, r3
    5abc:	4b1e      	ldr	r3, [pc, #120]	; (5b38 <system_clock_source_get_hz+0xac>)
    5abe:	40d3      	lsrs	r3, r2
    5ac0:	e030      	b.n	5b24 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5ac2:	2380      	movs	r3, #128	; 0x80
    5ac4:	021b      	lsls	r3, r3, #8
    5ac6:	e02d      	b.n	5b24 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5ac8:	2380      	movs	r3, #128	; 0x80
    5aca:	021b      	lsls	r3, r3, #8
    5acc:	e02a      	b.n	5b24 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5ace:	4b18      	ldr	r3, [pc, #96]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5ad0:	695b      	ldr	r3, [r3, #20]
    5ad2:	e027      	b.n	5b24 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5ad4:	4b16      	ldr	r3, [pc, #88]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	2202      	movs	r2, #2
    5ada:	4013      	ands	r3, r2
    5adc:	d101      	bne.n	5ae2 <system_clock_source_get_hz+0x56>
			return 0;
    5ade:	2300      	movs	r3, #0
    5ae0:	e020      	b.n	5b24 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5ae2:	4b16      	ldr	r3, [pc, #88]	; (5b3c <system_clock_source_get_hz+0xb0>)
    5ae4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5ae6:	4b12      	ldr	r3, [pc, #72]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5ae8:	681b      	ldr	r3, [r3, #0]
    5aea:	2204      	movs	r2, #4
    5aec:	4013      	ands	r3, r2
    5aee:	d009      	beq.n	5b04 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5af0:	2000      	movs	r0, #0
    5af2:	4b13      	ldr	r3, [pc, #76]	; (5b40 <system_clock_source_get_hz+0xb4>)
    5af4:	4798      	blx	r3
    5af6:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5af8:	4b0d      	ldr	r3, [pc, #52]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5afa:	689b      	ldr	r3, [r3, #8]
    5afc:	041b      	lsls	r3, r3, #16
    5afe:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b00:	4353      	muls	r3, r2
    5b02:	e00f      	b.n	5b24 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    5b04:	4b0f      	ldr	r3, [pc, #60]	; (5b44 <system_clock_source_get_hz+0xb8>)
    5b06:	e00d      	b.n	5b24 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b08:	4a0a      	ldr	r2, [pc, #40]	; (5b34 <system_clock_source_get_hz+0xa8>)
    5b0a:	2350      	movs	r3, #80	; 0x50
    5b0c:	5cd3      	ldrb	r3, [r2, r3]
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	001a      	movs	r2, r3
    5b12:	2304      	movs	r3, #4
    5b14:	4013      	ands	r3, r2
    5b16:	d101      	bne.n	5b1c <system_clock_source_get_hz+0x90>
			return 0;
    5b18:	2300      	movs	r3, #0
    5b1a:	e003      	b.n	5b24 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5b1c:	4b04      	ldr	r3, [pc, #16]	; (5b30 <system_clock_source_get_hz+0xa4>)
    5b1e:	68db      	ldr	r3, [r3, #12]
    5b20:	e000      	b.n	5b24 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5b22:	2300      	movs	r3, #0
	}
}
    5b24:	0018      	movs	r0, r3
    5b26:	46bd      	mov	sp, r7
    5b28:	b002      	add	sp, #8
    5b2a:	bd80      	pop	{r7, pc}
    5b2c:	0000b53c 	.word	0x0000b53c
    5b30:	20000284 	.word	0x20000284
    5b34:	40000800 	.word	0x40000800
    5b38:	007a1200 	.word	0x007a1200
    5b3c:	00005a2d 	.word	0x00005a2d
    5b40:	000065e5 	.word	0x000065e5
    5b44:	02dc6c00 	.word	0x02dc6c00

00005b48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b084      	sub	sp, #16
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5b50:	4b1a      	ldr	r3, [pc, #104]	; (5bbc <system_clock_source_osc8m_set_config+0x74>)
    5b52:	6a1b      	ldr	r3, [r3, #32]
    5b54:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	1c1a      	adds	r2, r3, #0
    5b5c:	2303      	movs	r3, #3
    5b5e:	4013      	ands	r3, r2
    5b60:	b2da      	uxtb	r2, r3
    5b62:	230d      	movs	r3, #13
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	2103      	movs	r1, #3
    5b68:	400a      	ands	r2, r1
    5b6a:	0010      	movs	r0, r2
    5b6c:	781a      	ldrb	r2, [r3, #0]
    5b6e:	2103      	movs	r1, #3
    5b70:	438a      	bics	r2, r1
    5b72:	1c11      	adds	r1, r2, #0
    5b74:	1c02      	adds	r2, r0, #0
    5b76:	430a      	orrs	r2, r1
    5b78:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	789a      	ldrb	r2, [r3, #2]
    5b7e:	230c      	movs	r3, #12
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	01d0      	lsls	r0, r2, #7
    5b84:	781a      	ldrb	r2, [r3, #0]
    5b86:	217f      	movs	r1, #127	; 0x7f
    5b88:	400a      	ands	r2, r1
    5b8a:	1c11      	adds	r1, r2, #0
    5b8c:	1c02      	adds	r2, r0, #0
    5b8e:	430a      	orrs	r2, r1
    5b90:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	785a      	ldrb	r2, [r3, #1]
    5b96:	230c      	movs	r3, #12
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	2101      	movs	r1, #1
    5b9c:	400a      	ands	r2, r1
    5b9e:	0190      	lsls	r0, r2, #6
    5ba0:	781a      	ldrb	r2, [r3, #0]
    5ba2:	2140      	movs	r1, #64	; 0x40
    5ba4:	438a      	bics	r2, r1
    5ba6:	1c11      	adds	r1, r2, #0
    5ba8:	1c02      	adds	r2, r0, #0
    5baa:	430a      	orrs	r2, r1
    5bac:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5bae:	4b03      	ldr	r3, [pc, #12]	; (5bbc <system_clock_source_osc8m_set_config+0x74>)
    5bb0:	68fa      	ldr	r2, [r7, #12]
    5bb2:	621a      	str	r2, [r3, #32]
}
    5bb4:	46c0      	nop			; (mov r8, r8)
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b004      	add	sp, #16
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	40000800 	.word	0x40000800

00005bc0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b084      	sub	sp, #16
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5bc8:	4a43      	ldr	r2, [pc, #268]	; (5cd8 <system_clock_source_xosc32k_set_config+0x118>)
    5bca:	230c      	movs	r3, #12
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	8a92      	ldrh	r2, [r2, #20]
    5bd0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	785b      	ldrb	r3, [r3, #1]
    5bd6:	1c1a      	adds	r2, r3, #0
    5bd8:	2307      	movs	r3, #7
    5bda:	4013      	ands	r3, r2
    5bdc:	b2da      	uxtb	r2, r3
    5bde:	230c      	movs	r3, #12
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	2107      	movs	r1, #7
    5be4:	400a      	ands	r2, r1
    5be6:	0010      	movs	r0, r2
    5be8:	785a      	ldrb	r2, [r3, #1]
    5bea:	2107      	movs	r1, #7
    5bec:	438a      	bics	r2, r1
    5bee:	1c11      	adds	r1, r2, #0
    5bf0:	1c02      	adds	r2, r0, #0
    5bf2:	430a      	orrs	r2, r1
    5bf4:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5bf6:	687b      	ldr	r3, [r7, #4]
    5bf8:	781b      	ldrb	r3, [r3, #0]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d106      	bne.n	5c0c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5bfe:	230c      	movs	r3, #12
    5c00:	18fb      	adds	r3, r7, r3
    5c02:	781a      	ldrb	r2, [r3, #0]
    5c04:	2104      	movs	r1, #4
    5c06:	430a      	orrs	r2, r1
    5c08:	701a      	strb	r2, [r3, #0]
    5c0a:	e005      	b.n	5c18 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5c0c:	230c      	movs	r3, #12
    5c0e:	18fb      	adds	r3, r7, r3
    5c10:	781a      	ldrb	r2, [r3, #0]
    5c12:	2104      	movs	r1, #4
    5c14:	438a      	bics	r2, r1
    5c16:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	789a      	ldrb	r2, [r3, #2]
    5c1c:	230c      	movs	r3, #12
    5c1e:	18fb      	adds	r3, r7, r3
    5c20:	2101      	movs	r1, #1
    5c22:	400a      	ands	r2, r1
    5c24:	0150      	lsls	r0, r2, #5
    5c26:	781a      	ldrb	r2, [r3, #0]
    5c28:	2120      	movs	r1, #32
    5c2a:	438a      	bics	r2, r1
    5c2c:	1c11      	adds	r1, r2, #0
    5c2e:	1c02      	adds	r2, r0, #0
    5c30:	430a      	orrs	r2, r1
    5c32:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	78da      	ldrb	r2, [r3, #3]
    5c38:	230c      	movs	r3, #12
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	2101      	movs	r1, #1
    5c3e:	400a      	ands	r2, r1
    5c40:	0110      	lsls	r0, r2, #4
    5c42:	781a      	ldrb	r2, [r3, #0]
    5c44:	2110      	movs	r1, #16
    5c46:	438a      	bics	r2, r1
    5c48:	1c11      	adds	r1, r2, #0
    5c4a:	1c02      	adds	r2, r0, #0
    5c4c:	430a      	orrs	r2, r1
    5c4e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	791a      	ldrb	r2, [r3, #4]
    5c54:	230c      	movs	r3, #12
    5c56:	18fb      	adds	r3, r7, r3
    5c58:	2101      	movs	r1, #1
    5c5a:	400a      	ands	r2, r1
    5c5c:	00d0      	lsls	r0, r2, #3
    5c5e:	781a      	ldrb	r2, [r3, #0]
    5c60:	2108      	movs	r1, #8
    5c62:	438a      	bics	r2, r1
    5c64:	1c11      	adds	r1, r2, #0
    5c66:	1c02      	adds	r2, r0, #0
    5c68:	430a      	orrs	r2, r1
    5c6a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	7b5a      	ldrb	r2, [r3, #13]
    5c70:	230c      	movs	r3, #12
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	01d0      	lsls	r0, r2, #7
    5c76:	781a      	ldrb	r2, [r3, #0]
    5c78:	217f      	movs	r1, #127	; 0x7f
    5c7a:	400a      	ands	r2, r1
    5c7c:	1c11      	adds	r1, r2, #0
    5c7e:	1c02      	adds	r2, r0, #0
    5c80:	430a      	orrs	r2, r1
    5c82:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5c84:	687b      	ldr	r3, [r7, #4]
    5c86:	7b1a      	ldrb	r2, [r3, #12]
    5c88:	230c      	movs	r3, #12
    5c8a:	18fb      	adds	r3, r7, r3
    5c8c:	2101      	movs	r1, #1
    5c8e:	400a      	ands	r2, r1
    5c90:	0190      	lsls	r0, r2, #6
    5c92:	781a      	ldrb	r2, [r3, #0]
    5c94:	2140      	movs	r1, #64	; 0x40
    5c96:	438a      	bics	r2, r1
    5c98:	1c11      	adds	r1, r2, #0
    5c9a:	1c02      	adds	r2, r0, #0
    5c9c:	430a      	orrs	r2, r1
    5c9e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	7b9a      	ldrb	r2, [r3, #14]
    5ca4:	230c      	movs	r3, #12
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	2101      	movs	r1, #1
    5caa:	400a      	ands	r2, r1
    5cac:	0110      	lsls	r0, r2, #4
    5cae:	785a      	ldrb	r2, [r3, #1]
    5cb0:	2110      	movs	r1, #16
    5cb2:	438a      	bics	r2, r1
    5cb4:	1c11      	adds	r1, r2, #0
    5cb6:	1c02      	adds	r2, r0, #0
    5cb8:	430a      	orrs	r2, r1
    5cba:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	689a      	ldr	r2, [r3, #8]
    5cc0:	4b06      	ldr	r3, [pc, #24]	; (5cdc <system_clock_source_xosc32k_set_config+0x11c>)
    5cc2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5cc4:	4a04      	ldr	r2, [pc, #16]	; (5cd8 <system_clock_source_xosc32k_set_config+0x118>)
    5cc6:	230c      	movs	r3, #12
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	881b      	ldrh	r3, [r3, #0]
    5ccc:	8293      	strh	r3, [r2, #20]
}
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	46bd      	mov	sp, r7
    5cd2:	b004      	add	sp, #16
    5cd4:	bd80      	pop	{r7, pc}
    5cd6:	46c0      	nop			; (mov r8, r8)
    5cd8:	40000800 	.word	0x40000800
    5cdc:	20000284 	.word	0x20000284

00005ce0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b082      	sub	sp, #8
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	7a1b      	ldrb	r3, [r3, #8]
    5cec:	029b      	lsls	r3, r3, #10
    5cee:	041b      	lsls	r3, r3, #16
    5cf0:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	895b      	ldrh	r3, [r3, #10]
    5cf6:	059b      	lsls	r3, r3, #22
    5cf8:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5cfa:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5cfc:	4b2a      	ldr	r3, [pc, #168]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5cfe:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5d04:	687b      	ldr	r3, [r7, #4]
    5d06:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    5d08:	4313      	orrs	r3, r2
    5d0a:	b2db      	uxtb	r3, r3
    5d0c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    5d12:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    5d14:	687a      	ldr	r2, [r7, #4]
    5d16:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    5d18:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	785b      	ldrb	r3, [r3, #1]
    5d1e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    5d20:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    5d22:	4b21      	ldr	r3, [pc, #132]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d24:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	781b      	ldrb	r3, [r3, #0]
    5d2a:	2b04      	cmp	r3, #4
    5d2c:	d116      	bne.n	5d5c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	7b1b      	ldrb	r3, [r3, #12]
    5d32:	069b      	lsls	r3, r3, #26
    5d34:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d36:	687b      	ldr	r3, [r7, #4]
    5d38:	89db      	ldrh	r3, [r3, #14]
    5d3a:	041b      	lsls	r3, r3, #16
    5d3c:	0019      	movs	r1, r3
    5d3e:	4b1b      	ldr	r3, [pc, #108]	; (5dac <system_clock_source_dfll_set_config+0xcc>)
    5d40:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d42:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5d44:	687a      	ldr	r2, [r7, #4]
    5d46:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d48:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5d4a:	4b17      	ldr	r3, [pc, #92]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d4c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5d4e:	4b16      	ldr	r3, [pc, #88]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	687a      	ldr	r2, [r7, #4]
    5d54:	7812      	ldrb	r2, [r2, #0]
    5d56:	431a      	orrs	r2, r3
    5d58:	4b13      	ldr	r3, [pc, #76]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d5a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	2b20      	cmp	r3, #32
    5d62:	d11c      	bne.n	5d9e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	7b1b      	ldrb	r3, [r3, #12]
    5d68:	069b      	lsls	r3, r3, #26
    5d6a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	89db      	ldrh	r3, [r3, #14]
    5d70:	041b      	lsls	r3, r3, #16
    5d72:	0019      	movs	r1, r3
    5d74:	4b0d      	ldr	r3, [pc, #52]	; (5dac <system_clock_source_dfll_set_config+0xcc>)
    5d76:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5d78:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5d7a:	687a      	ldr	r2, [r7, #4]
    5d7c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5d7e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5d80:	4b09      	ldr	r3, [pc, #36]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d82:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5d84:	4b08      	ldr	r3, [pc, #32]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d86:	681b      	ldr	r3, [r3, #0]
    5d88:	687a      	ldr	r2, [r7, #4]
    5d8a:	7812      	ldrb	r2, [r2, #0]
    5d8c:	2104      	movs	r1, #4
    5d8e:	430a      	orrs	r2, r1
    5d90:	b2d2      	uxtb	r2, r2
    5d92:	4313      	orrs	r3, r2
    5d94:	2280      	movs	r2, #128	; 0x80
    5d96:	00d2      	lsls	r2, r2, #3
    5d98:	431a      	orrs	r2, r3
    5d9a:	4b03      	ldr	r3, [pc, #12]	; (5da8 <system_clock_source_dfll_set_config+0xc8>)
    5d9c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	46bd      	mov	sp, r7
    5da2:	b002      	add	sp, #8
    5da4:	bd80      	pop	{r7, pc}
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	20000284 	.word	0x20000284
    5dac:	03ff0000 	.word	0x03ff0000

00005db0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b082      	sub	sp, #8
    5db4:	af00      	add	r7, sp, #0
    5db6:	0002      	movs	r2, r0
    5db8:	1dfb      	adds	r3, r7, #7
    5dba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5dbc:	1dfb      	adds	r3, r7, #7
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	2b08      	cmp	r3, #8
    5dc2:	d83b      	bhi.n	5e3c <system_clock_source_enable+0x8c>
    5dc4:	009a      	lsls	r2, r3, #2
    5dc6:	4b21      	ldr	r3, [pc, #132]	; (5e4c <system_clock_source_enable+0x9c>)
    5dc8:	18d3      	adds	r3, r2, r3
    5dca:	681b      	ldr	r3, [r3, #0]
    5dcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5dce:	4b20      	ldr	r3, [pc, #128]	; (5e50 <system_clock_source_enable+0xa0>)
    5dd0:	4a1f      	ldr	r2, [pc, #124]	; (5e50 <system_clock_source_enable+0xa0>)
    5dd2:	6a12      	ldr	r2, [r2, #32]
    5dd4:	2102      	movs	r1, #2
    5dd6:	430a      	orrs	r2, r1
    5dd8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5dda:	2300      	movs	r3, #0
    5ddc:	e031      	b.n	5e42 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5dde:	4b1c      	ldr	r3, [pc, #112]	; (5e50 <system_clock_source_enable+0xa0>)
    5de0:	4a1b      	ldr	r2, [pc, #108]	; (5e50 <system_clock_source_enable+0xa0>)
    5de2:	6992      	ldr	r2, [r2, #24]
    5de4:	2102      	movs	r1, #2
    5de6:	430a      	orrs	r2, r1
    5de8:	619a      	str	r2, [r3, #24]
		break;
    5dea:	e029      	b.n	5e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5dec:	4a18      	ldr	r2, [pc, #96]	; (5e50 <system_clock_source_enable+0xa0>)
    5dee:	4b18      	ldr	r3, [pc, #96]	; (5e50 <system_clock_source_enable+0xa0>)
    5df0:	8a1b      	ldrh	r3, [r3, #16]
    5df2:	b29b      	uxth	r3, r3
    5df4:	2102      	movs	r1, #2
    5df6:	430b      	orrs	r3, r1
    5df8:	b29b      	uxth	r3, r3
    5dfa:	8213      	strh	r3, [r2, #16]
		break;
    5dfc:	e020      	b.n	5e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5dfe:	4a14      	ldr	r2, [pc, #80]	; (5e50 <system_clock_source_enable+0xa0>)
    5e00:	4b13      	ldr	r3, [pc, #76]	; (5e50 <system_clock_source_enable+0xa0>)
    5e02:	8a9b      	ldrh	r3, [r3, #20]
    5e04:	b29b      	uxth	r3, r3
    5e06:	2102      	movs	r1, #2
    5e08:	430b      	orrs	r3, r1
    5e0a:	b29b      	uxth	r3, r3
    5e0c:	8293      	strh	r3, [r2, #20]
		break;
    5e0e:	e017      	b.n	5e40 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5e10:	4b10      	ldr	r3, [pc, #64]	; (5e54 <system_clock_source_enable+0xa4>)
    5e12:	681b      	ldr	r3, [r3, #0]
    5e14:	2202      	movs	r2, #2
    5e16:	431a      	orrs	r2, r3
    5e18:	4b0e      	ldr	r3, [pc, #56]	; (5e54 <system_clock_source_enable+0xa4>)
    5e1a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5e1c:	4b0e      	ldr	r3, [pc, #56]	; (5e58 <system_clock_source_enable+0xa8>)
    5e1e:	4798      	blx	r3
		break;
    5e20:	e00e      	b.n	5e40 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5e22:	4a0b      	ldr	r2, [pc, #44]	; (5e50 <system_clock_source_enable+0xa0>)
    5e24:	490a      	ldr	r1, [pc, #40]	; (5e50 <system_clock_source_enable+0xa0>)
    5e26:	2344      	movs	r3, #68	; 0x44
    5e28:	5ccb      	ldrb	r3, [r1, r3]
    5e2a:	b2db      	uxtb	r3, r3
    5e2c:	2102      	movs	r1, #2
    5e2e:	430b      	orrs	r3, r1
    5e30:	b2d9      	uxtb	r1, r3
    5e32:	2344      	movs	r3, #68	; 0x44
    5e34:	54d1      	strb	r1, [r2, r3]
		break;
    5e36:	e003      	b.n	5e40 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5e38:	2300      	movs	r3, #0
    5e3a:	e002      	b.n	5e42 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5e3c:	2317      	movs	r3, #23
    5e3e:	e000      	b.n	5e42 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5e40:	2300      	movs	r3, #0
}
    5e42:	0018      	movs	r0, r3
    5e44:	46bd      	mov	sp, r7
    5e46:	b002      	add	sp, #8
    5e48:	bd80      	pop	{r7, pc}
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	0000b560 	.word	0x0000b560
    5e50:	40000800 	.word	0x40000800
    5e54:	20000284 	.word	0x20000284
    5e58:	00005a49 	.word	0x00005a49

00005e5c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b084      	sub	sp, #16
    5e60:	af00      	add	r7, sp, #0
    5e62:	0002      	movs	r2, r0
    5e64:	1dfb      	adds	r3, r7, #7
    5e66:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5e68:	2300      	movs	r3, #0
    5e6a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5e6c:	1dfb      	adds	r3, r7, #7
    5e6e:	781b      	ldrb	r3, [r3, #0]
    5e70:	2b08      	cmp	r3, #8
    5e72:	d821      	bhi.n	5eb8 <system_clock_source_is_ready+0x5c>
    5e74:	009a      	lsls	r2, r3, #2
    5e76:	4b18      	ldr	r3, [pc, #96]	; (5ed8 <system_clock_source_is_ready+0x7c>)
    5e78:	18d3      	adds	r3, r2, r3
    5e7a:	681b      	ldr	r3, [r3, #0]
    5e7c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5e7e:	2308      	movs	r3, #8
    5e80:	60fb      	str	r3, [r7, #12]
		break;
    5e82:	e01b      	b.n	5ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5e84:	2304      	movs	r3, #4
    5e86:	60fb      	str	r3, [r7, #12]
		break;
    5e88:	e018      	b.n	5ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5e8a:	2301      	movs	r3, #1
    5e8c:	60fb      	str	r3, [r7, #12]
		break;
    5e8e:	e015      	b.n	5ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5e90:	2302      	movs	r3, #2
    5e92:	60fb      	str	r3, [r7, #12]
		break;
    5e94:	e012      	b.n	5ebc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5e96:	23d0      	movs	r3, #208	; 0xd0
    5e98:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5e9a:	e00f      	b.n	5ebc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5e9c:	4a0f      	ldr	r2, [pc, #60]	; (5edc <system_clock_source_is_ready+0x80>)
    5e9e:	2350      	movs	r3, #80	; 0x50
    5ea0:	5cd3      	ldrb	r3, [r2, r3]
    5ea2:	b2db      	uxtb	r3, r3
    5ea4:	001a      	movs	r2, r3
    5ea6:	2303      	movs	r3, #3
    5ea8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    5eaa:	3b03      	subs	r3, #3
    5eac:	425a      	negs	r2, r3
    5eae:	4153      	adcs	r3, r2
    5eb0:	b2db      	uxtb	r3, r3
    5eb2:	e00c      	b.n	5ece <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5eb4:	2301      	movs	r3, #1
    5eb6:	e00a      	b.n	5ece <system_clock_source_is_ready+0x72>

	default:
		return false;
    5eb8:	2300      	movs	r3, #0
    5eba:	e008      	b.n	5ece <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5ebc:	4b07      	ldr	r3, [pc, #28]	; (5edc <system_clock_source_is_ready+0x80>)
    5ebe:	68db      	ldr	r3, [r3, #12]
    5ec0:	68fa      	ldr	r2, [r7, #12]
    5ec2:	401a      	ands	r2, r3
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	1ad3      	subs	r3, r2, r3
    5ec8:	425a      	negs	r2, r3
    5eca:	4153      	adcs	r3, r2
    5ecc:	b2db      	uxtb	r3, r3
}
    5ece:	0018      	movs	r0, r3
    5ed0:	46bd      	mov	sp, r7
    5ed2:	b004      	add	sp, #16
    5ed4:	bd80      	pop	{r7, pc}
    5ed6:	46c0      	nop			; (mov r8, r8)
    5ed8:	0000b584 	.word	0x0000b584
    5edc:	40000800 	.word	0x40000800

00005ee0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b082      	sub	sp, #8
    5ee4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5ee6:	003b      	movs	r3, r7
    5ee8:	2202      	movs	r2, #2
    5eea:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5eec:	2300      	movs	r3, #0
    5eee:	607b      	str	r3, [r7, #4]
    5ef0:	e009      	b.n	5f06 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	003a      	movs	r2, r7
    5ef8:	0011      	movs	r1, r2
    5efa:	0018      	movs	r0, r3
    5efc:	4b05      	ldr	r3, [pc, #20]	; (5f14 <_switch_peripheral_gclk+0x34>)
    5efe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	3301      	adds	r3, #1
    5f04:	607b      	str	r3, [r7, #4]
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	2b24      	cmp	r3, #36	; 0x24
    5f0a:	d9f2      	bls.n	5ef2 <_switch_peripheral_gclk+0x12>
	}
}
    5f0c:	46c0      	nop			; (mov r8, r8)
    5f0e:	46bd      	mov	sp, r7
    5f10:	b002      	add	sp, #8
    5f12:	bd80      	pop	{r7, pc}
    5f14:	000064c1 	.word	0x000064c1

00005f18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5f18:	b580      	push	{r7, lr}
    5f1a:	b0aa      	sub	sp, #168	; 0xa8
    5f1c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5f1e:	4b87      	ldr	r3, [pc, #540]	; (613c <system_clock_init+0x224>)
    5f20:	22c2      	movs	r2, #194	; 0xc2
    5f22:	00d2      	lsls	r2, r2, #3
    5f24:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5f26:	2002      	movs	r0, #2
    5f28:	4b85      	ldr	r3, [pc, #532]	; (6140 <system_clock_init+0x228>)
    5f2a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5f2c:	4b85      	ldr	r3, [pc, #532]	; (6144 <system_clock_init+0x22c>)
    5f2e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    5f30:	2394      	movs	r3, #148	; 0x94
    5f32:	18fb      	adds	r3, r7, r3
    5f34:	0018      	movs	r0, r3
    5f36:	4b84      	ldr	r3, [pc, #528]	; (6148 <system_clock_init+0x230>)
    5f38:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    5f3a:	2394      	movs	r3, #148	; 0x94
    5f3c:	18fb      	adds	r3, r7, r3
    5f3e:	2280      	movs	r2, #128	; 0x80
    5f40:	0212      	lsls	r2, r2, #8
    5f42:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    5f44:	2394      	movs	r3, #148	; 0x94
    5f46:	18fb      	adds	r3, r7, r3
    5f48:	2200      	movs	r2, #0
    5f4a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5f4c:	2394      	movs	r3, #148	; 0x94
    5f4e:	18fb      	adds	r3, r7, r3
    5f50:	2203      	movs	r2, #3
    5f52:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    5f54:	2394      	movs	r3, #148	; 0x94
    5f56:	18fb      	adds	r3, r7, r3
    5f58:	2200      	movs	r2, #0
    5f5a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    5f5c:	2394      	movs	r3, #148	; 0x94
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	2200      	movs	r2, #0
    5f62:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    5f64:	2394      	movs	r3, #148	; 0x94
    5f66:	18fb      	adds	r3, r7, r3
    5f68:	2201      	movs	r2, #1
    5f6a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    5f6c:	2394      	movs	r3, #148	; 0x94
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	2200      	movs	r2, #0
    5f72:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    5f74:	2394      	movs	r3, #148	; 0x94
    5f76:	18fb      	adds	r3, r7, r3
    5f78:	2200      	movs	r2, #0
    5f7a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5f7c:	2394      	movs	r3, #148	; 0x94
    5f7e:	18fb      	adds	r3, r7, r3
    5f80:	0018      	movs	r0, r3
    5f82:	4b72      	ldr	r3, [pc, #456]	; (614c <system_clock_init+0x234>)
    5f84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5f86:	2005      	movs	r0, #5
    5f88:	4b71      	ldr	r3, [pc, #452]	; (6150 <system_clock_init+0x238>)
    5f8a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5f8c:	46c0      	nop			; (mov r8, r8)
    5f8e:	2005      	movs	r0, #5
    5f90:	4b70      	ldr	r3, [pc, #448]	; (6154 <system_clock_init+0x23c>)
    5f92:	4798      	blx	r3
    5f94:	0003      	movs	r3, r0
    5f96:	001a      	movs	r2, r3
    5f98:	2301      	movs	r3, #1
    5f9a:	4053      	eors	r3, r2
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d1f5      	bne.n	5f8e <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5fa2:	4a66      	ldr	r2, [pc, #408]	; (613c <system_clock_init+0x224>)
    5fa4:	8a93      	ldrh	r3, [r2, #20]
    5fa6:	2180      	movs	r1, #128	; 0x80
    5fa8:	430b      	orrs	r3, r1
    5faa:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5fac:	2380      	movs	r3, #128	; 0x80
    5fae:	18fb      	adds	r3, r7, r3
    5fb0:	0018      	movs	r0, r3
    5fb2:	4b69      	ldr	r3, [pc, #420]	; (6158 <system_clock_init+0x240>)
    5fb4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5fb6:	2380      	movs	r3, #128	; 0x80
    5fb8:	18fb      	adds	r3, r7, r3
    5fba:	2204      	movs	r2, #4
    5fbc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5fbe:	2380      	movs	r3, #128	; 0x80
    5fc0:	18fb      	adds	r3, r7, r3
    5fc2:	2200      	movs	r2, #0
    5fc4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5fc6:	4b65      	ldr	r3, [pc, #404]	; (615c <system_clock_init+0x244>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	0e9b      	lsrs	r3, r3, #26
    5fcc:	22a4      	movs	r2, #164	; 0xa4
    5fce:	18ba      	adds	r2, r7, r2
    5fd0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5fd2:	23a4      	movs	r3, #164	; 0xa4
    5fd4:	18fb      	adds	r3, r7, r3
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	2b3f      	cmp	r3, #63	; 0x3f
    5fda:	d103      	bne.n	5fe4 <system_clock_init+0xcc>
		coarse = 0x1f;
    5fdc:	231f      	movs	r3, #31
    5fde:	22a4      	movs	r2, #164	; 0xa4
    5fe0:	18ba      	adds	r2, r7, r2
    5fe2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    5fe4:	23a4      	movs	r3, #164	; 0xa4
    5fe6:	18fb      	adds	r3, r7, r3
    5fe8:	681b      	ldr	r3, [r3, #0]
    5fea:	b2da      	uxtb	r2, r3
    5fec:	2380      	movs	r3, #128	; 0x80
    5fee:	18fb      	adds	r3, r7, r3
    5ff0:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5ff2:	2380      	movs	r3, #128	; 0x80
    5ff4:	18fb      	adds	r3, r7, r3
    5ff6:	2200      	movs	r2, #0
    5ff8:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5ffa:	2380      	movs	r3, #128	; 0x80
    5ffc:	18fb      	adds	r3, r7, r3
    5ffe:	2200      	movs	r2, #0
    6000:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6002:	2380      	movs	r3, #128	; 0x80
    6004:	18fb      	adds	r3, r7, r3
    6006:	2200      	movs	r2, #0
    6008:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    600a:	2380      	movs	r3, #128	; 0x80
    600c:	18fb      	adds	r3, r7, r3
    600e:	2200      	movs	r2, #0
    6010:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6012:	2380      	movs	r3, #128	; 0x80
    6014:	18fb      	adds	r3, r7, r3
    6016:	4a52      	ldr	r2, [pc, #328]	; (6160 <system_clock_init+0x248>)
    6018:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    601a:	2380      	movs	r3, #128	; 0x80
    601c:	18fb      	adds	r3, r7, r3
    601e:	2207      	movs	r2, #7
    6020:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6022:	2380      	movs	r3, #128	; 0x80
    6024:	18fb      	adds	r3, r7, r3
    6026:	223f      	movs	r2, #63	; 0x3f
    6028:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    602a:	2380      	movs	r3, #128	; 0x80
    602c:	18fb      	adds	r3, r7, r3
    602e:	0018      	movs	r0, r3
    6030:	4b4c      	ldr	r3, [pc, #304]	; (6164 <system_clock_init+0x24c>)
    6032:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6034:	237c      	movs	r3, #124	; 0x7c
    6036:	18fb      	adds	r3, r7, r3
    6038:	0018      	movs	r0, r3
    603a:	4b4b      	ldr	r3, [pc, #300]	; (6168 <system_clock_init+0x250>)
    603c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    603e:	237c      	movs	r3, #124	; 0x7c
    6040:	18fb      	adds	r3, r7, r3
    6042:	2200      	movs	r2, #0
    6044:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6046:	237c      	movs	r3, #124	; 0x7c
    6048:	18fb      	adds	r3, r7, r3
    604a:	2201      	movs	r2, #1
    604c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    604e:	237c      	movs	r3, #124	; 0x7c
    6050:	18fb      	adds	r3, r7, r3
    6052:	2200      	movs	r2, #0
    6054:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6056:	237c      	movs	r3, #124	; 0x7c
    6058:	18fb      	adds	r3, r7, r3
    605a:	0018      	movs	r0, r3
    605c:	4b43      	ldr	r3, [pc, #268]	; (616c <system_clock_init+0x254>)
    605e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6060:	2006      	movs	r0, #6
    6062:	4b3b      	ldr	r3, [pc, #236]	; (6150 <system_clock_init+0x238>)
    6064:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6066:	4b42      	ldr	r3, [pc, #264]	; (6170 <system_clock_init+0x258>)
    6068:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    606a:	2364      	movs	r3, #100	; 0x64
    606c:	18fb      	adds	r3, r7, r3
    606e:	0018      	movs	r0, r3
    6070:	4b40      	ldr	r3, [pc, #256]	; (6174 <system_clock_init+0x25c>)
    6072:	4798      	blx	r3
    6074:	2364      	movs	r3, #100	; 0x64
    6076:	18fb      	adds	r3, r7, r3
    6078:	2205      	movs	r2, #5
    607a:	701a      	strb	r2, [r3, #0]
    607c:	2364      	movs	r3, #100	; 0x64
    607e:	18fb      	adds	r3, r7, r3
    6080:	2201      	movs	r2, #1
    6082:	605a      	str	r2, [r3, #4]
    6084:	2364      	movs	r3, #100	; 0x64
    6086:	18fb      	adds	r3, r7, r3
    6088:	2200      	movs	r2, #0
    608a:	721a      	strb	r2, [r3, #8]
    608c:	2364      	movs	r3, #100	; 0x64
    608e:	18fb      	adds	r3, r7, r3
    6090:	2200      	movs	r2, #0
    6092:	725a      	strb	r2, [r3, #9]
    6094:	2364      	movs	r3, #100	; 0x64
    6096:	18fb      	adds	r3, r7, r3
    6098:	0019      	movs	r1, r3
    609a:	2001      	movs	r0, #1
    609c:	4b36      	ldr	r3, [pc, #216]	; (6178 <system_clock_init+0x260>)
    609e:	4798      	blx	r3
    60a0:	2001      	movs	r0, #1
    60a2:	4b36      	ldr	r3, [pc, #216]	; (617c <system_clock_init+0x264>)
    60a4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    60a6:	230c      	movs	r3, #12
    60a8:	18fb      	adds	r3, r7, r3
    60aa:	0018      	movs	r0, r3
    60ac:	4b34      	ldr	r3, [pc, #208]	; (6180 <system_clock_init+0x268>)
    60ae:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    60b0:	230c      	movs	r3, #12
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	2201      	movs	r2, #1
    60b6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    60b8:	230c      	movs	r3, #12
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	0019      	movs	r1, r3
    60be:	2000      	movs	r0, #0
    60c0:	4b30      	ldr	r3, [pc, #192]	; (6184 <system_clock_init+0x26c>)
    60c2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    60c4:	2000      	movs	r0, #0
    60c6:	4b30      	ldr	r3, [pc, #192]	; (6188 <system_clock_init+0x270>)
    60c8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    60ca:	2007      	movs	r0, #7
    60cc:	4b20      	ldr	r3, [pc, #128]	; (6150 <system_clock_init+0x238>)
    60ce:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    60d0:	46c0      	nop			; (mov r8, r8)
    60d2:	2007      	movs	r0, #7
    60d4:	4b1f      	ldr	r3, [pc, #124]	; (6154 <system_clock_init+0x23c>)
    60d6:	4798      	blx	r3
    60d8:	0003      	movs	r3, r0
    60da:	001a      	movs	r2, r3
    60dc:	2301      	movs	r3, #1
    60de:	4053      	eors	r3, r2
    60e0:	b2db      	uxtb	r3, r3
    60e2:	2b00      	cmp	r3, #0
    60e4:	d1f5      	bne.n	60d2 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    60e6:	2000      	movs	r0, #0
    60e8:	4b28      	ldr	r3, [pc, #160]	; (618c <system_clock_init+0x274>)
    60ea:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    60ec:	2100      	movs	r1, #0
    60ee:	2000      	movs	r0, #0
    60f0:	4b27      	ldr	r3, [pc, #156]	; (6190 <system_clock_init+0x278>)
    60f2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    60f4:	2100      	movs	r1, #0
    60f6:	2001      	movs	r0, #1
    60f8:	4b25      	ldr	r3, [pc, #148]	; (6190 <system_clock_init+0x278>)
    60fa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    60fc:	2100      	movs	r1, #0
    60fe:	2002      	movs	r0, #2
    6100:	4b23      	ldr	r3, [pc, #140]	; (6190 <system_clock_init+0x278>)
    6102:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6104:	003b      	movs	r3, r7
    6106:	0018      	movs	r0, r3
    6108:	4b1a      	ldr	r3, [pc, #104]	; (6174 <system_clock_init+0x25c>)
    610a:	4798      	blx	r3
    610c:	003b      	movs	r3, r7
    610e:	2207      	movs	r2, #7
    6110:	701a      	strb	r2, [r3, #0]
    6112:	003b      	movs	r3, r7
    6114:	2201      	movs	r2, #1
    6116:	605a      	str	r2, [r3, #4]
    6118:	003b      	movs	r3, r7
    611a:	2200      	movs	r2, #0
    611c:	721a      	strb	r2, [r3, #8]
    611e:	003b      	movs	r3, r7
    6120:	2200      	movs	r2, #0
    6122:	725a      	strb	r2, [r3, #9]
    6124:	003b      	movs	r3, r7
    6126:	0019      	movs	r1, r3
    6128:	2000      	movs	r0, #0
    612a:	4b13      	ldr	r3, [pc, #76]	; (6178 <system_clock_init+0x260>)
    612c:	4798      	blx	r3
    612e:	2000      	movs	r0, #0
    6130:	4b12      	ldr	r3, [pc, #72]	; (617c <system_clock_init+0x264>)
    6132:	4798      	blx	r3
#endif
}
    6134:	46c0      	nop			; (mov r8, r8)
    6136:	46bd      	mov	sp, r7
    6138:	b02a      	add	sp, #168	; 0xa8
    613a:	bd80      	pop	{r7, pc}
    613c:	40000800 	.word	0x40000800
    6140:	000059f9 	.word	0x000059f9
    6144:	00005ee1 	.word	0x00005ee1
    6148:	000058c9 	.word	0x000058c9
    614c:	00005bc1 	.word	0x00005bc1
    6150:	00005db1 	.word	0x00005db1
    6154:	00005e5d 	.word	0x00005e5d
    6158:	00005933 	.word	0x00005933
    615c:	00806024 	.word	0x00806024
    6160:	000005b9 	.word	0x000005b9
    6164:	00005ce1 	.word	0x00005ce1
    6168:	00005911 	.word	0x00005911
    616c:	00005b49 	.word	0x00005b49
    6170:	00006239 	.word	0x00006239
    6174:	00005885 	.word	0x00005885
    6178:	00006269 	.word	0x00006269
    617c:	0000638d 	.word	0x0000638d
    6180:	000058b3 	.word	0x000058b3
    6184:	000064c1 	.word	0x000064c1
    6188:	00006505 	.word	0x00006505
    618c:	00005985 	.word	0x00005985
    6190:	000059a5 	.word	0x000059a5

00006194 <system_apb_clock_set_mask>:
{
    6194:	b580      	push	{r7, lr}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
    619a:	0002      	movs	r2, r0
    619c:	6039      	str	r1, [r7, #0]
    619e:	1dfb      	adds	r3, r7, #7
    61a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    61a2:	1dfb      	adds	r3, r7, #7
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2b01      	cmp	r3, #1
    61a8:	d00a      	beq.n	61c0 <system_apb_clock_set_mask+0x2c>
    61aa:	2b02      	cmp	r3, #2
    61ac:	d00f      	beq.n	61ce <system_apb_clock_set_mask+0x3a>
    61ae:	2b00      	cmp	r3, #0
    61b0:	d114      	bne.n	61dc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    61b2:	4b0e      	ldr	r3, [pc, #56]	; (61ec <system_apb_clock_set_mask+0x58>)
    61b4:	4a0d      	ldr	r2, [pc, #52]	; (61ec <system_apb_clock_set_mask+0x58>)
    61b6:	6991      	ldr	r1, [r2, #24]
    61b8:	683a      	ldr	r2, [r7, #0]
    61ba:	430a      	orrs	r2, r1
    61bc:	619a      	str	r2, [r3, #24]
			break;
    61be:	e00f      	b.n	61e0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    61c0:	4b0a      	ldr	r3, [pc, #40]	; (61ec <system_apb_clock_set_mask+0x58>)
    61c2:	4a0a      	ldr	r2, [pc, #40]	; (61ec <system_apb_clock_set_mask+0x58>)
    61c4:	69d1      	ldr	r1, [r2, #28]
    61c6:	683a      	ldr	r2, [r7, #0]
    61c8:	430a      	orrs	r2, r1
    61ca:	61da      	str	r2, [r3, #28]
			break;
    61cc:	e008      	b.n	61e0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    61ce:	4b07      	ldr	r3, [pc, #28]	; (61ec <system_apb_clock_set_mask+0x58>)
    61d0:	4a06      	ldr	r2, [pc, #24]	; (61ec <system_apb_clock_set_mask+0x58>)
    61d2:	6a11      	ldr	r1, [r2, #32]
    61d4:	683a      	ldr	r2, [r7, #0]
    61d6:	430a      	orrs	r2, r1
    61d8:	621a      	str	r2, [r3, #32]
			break;
    61da:	e001      	b.n	61e0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    61dc:	2317      	movs	r3, #23
    61de:	e000      	b.n	61e2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    61e0:	2300      	movs	r3, #0
}
    61e2:	0018      	movs	r0, r3
    61e4:	46bd      	mov	sp, r7
    61e6:	b002      	add	sp, #8
    61e8:	bd80      	pop	{r7, pc}
    61ea:	46c0      	nop			; (mov r8, r8)
    61ec:	40000400 	.word	0x40000400

000061f0 <system_interrupt_enter_critical_section>:
{
    61f0:	b580      	push	{r7, lr}
    61f2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    61f4:	4b02      	ldr	r3, [pc, #8]	; (6200 <system_interrupt_enter_critical_section+0x10>)
    61f6:	4798      	blx	r3
}
    61f8:	46c0      	nop			; (mov r8, r8)
    61fa:	46bd      	mov	sp, r7
    61fc:	bd80      	pop	{r7, pc}
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	000035ad 	.word	0x000035ad

00006204 <system_interrupt_leave_critical_section>:
{
    6204:	b580      	push	{r7, lr}
    6206:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6208:	4b02      	ldr	r3, [pc, #8]	; (6214 <system_interrupt_leave_critical_section+0x10>)
    620a:	4798      	blx	r3
}
    620c:	46c0      	nop			; (mov r8, r8)
    620e:	46bd      	mov	sp, r7
    6210:	bd80      	pop	{r7, pc}
    6212:	46c0      	nop			; (mov r8, r8)
    6214:	00003601 	.word	0x00003601

00006218 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6218:	b580      	push	{r7, lr}
    621a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <system_gclk_is_syncing+0x1c>)
    621e:	785b      	ldrb	r3, [r3, #1]
    6220:	b2db      	uxtb	r3, r3
    6222:	b25b      	sxtb	r3, r3
    6224:	2b00      	cmp	r3, #0
    6226:	da01      	bge.n	622c <system_gclk_is_syncing+0x14>
		return true;
    6228:	2301      	movs	r3, #1
    622a:	e000      	b.n	622e <system_gclk_is_syncing+0x16>
	}

	return false;
    622c:	2300      	movs	r3, #0
}
    622e:	0018      	movs	r0, r3
    6230:	46bd      	mov	sp, r7
    6232:	bd80      	pop	{r7, pc}
    6234:	40000c00 	.word	0x40000c00

00006238 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6238:	b580      	push	{r7, lr}
    623a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    623c:	2108      	movs	r1, #8
    623e:	2000      	movs	r0, #0
    6240:	4b07      	ldr	r3, [pc, #28]	; (6260 <system_gclk_init+0x28>)
    6242:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6244:	4b07      	ldr	r3, [pc, #28]	; (6264 <system_gclk_init+0x2c>)
    6246:	2201      	movs	r2, #1
    6248:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	4b05      	ldr	r3, [pc, #20]	; (6264 <system_gclk_init+0x2c>)
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	b2db      	uxtb	r3, r3
    6252:	001a      	movs	r2, r3
    6254:	2301      	movs	r3, #1
    6256:	4013      	ands	r3, r2
    6258:	d1f8      	bne.n	624c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    625a:	46c0      	nop			; (mov r8, r8)
    625c:	46bd      	mov	sp, r7
    625e:	bd80      	pop	{r7, pc}
    6260:	00006195 	.word	0x00006195
    6264:	40000c00 	.word	0x40000c00

00006268 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6268:	b580      	push	{r7, lr}
    626a:	b086      	sub	sp, #24
    626c:	af00      	add	r7, sp, #0
    626e:	0002      	movs	r2, r0
    6270:	6039      	str	r1, [r7, #0]
    6272:	1dfb      	adds	r3, r7, #7
    6274:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6276:	1dfb      	adds	r3, r7, #7
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    627c:	1dfb      	adds	r3, r7, #7
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6282:	683b      	ldr	r3, [r7, #0]
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	021b      	lsls	r3, r3, #8
    6288:	001a      	movs	r2, r3
    628a:	697b      	ldr	r3, [r7, #20]
    628c:	4313      	orrs	r3, r2
    628e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6290:	683b      	ldr	r3, [r7, #0]
    6292:	785b      	ldrb	r3, [r3, #1]
    6294:	2b00      	cmp	r3, #0
    6296:	d004      	beq.n	62a2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6298:	697b      	ldr	r3, [r7, #20]
    629a:	2280      	movs	r2, #128	; 0x80
    629c:	02d2      	lsls	r2, r2, #11
    629e:	4313      	orrs	r3, r2
    62a0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    62a2:	683b      	ldr	r3, [r7, #0]
    62a4:	7a5b      	ldrb	r3, [r3, #9]
    62a6:	2b00      	cmp	r3, #0
    62a8:	d004      	beq.n	62b4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    62aa:	697b      	ldr	r3, [r7, #20]
    62ac:	2280      	movs	r2, #128	; 0x80
    62ae:	0312      	lsls	r2, r2, #12
    62b0:	4313      	orrs	r3, r2
    62b2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    62b4:	683b      	ldr	r3, [r7, #0]
    62b6:	685b      	ldr	r3, [r3, #4]
    62b8:	2b01      	cmp	r3, #1
    62ba:	d92c      	bls.n	6316 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    62bc:	683b      	ldr	r3, [r7, #0]
    62be:	685a      	ldr	r2, [r3, #4]
    62c0:	683b      	ldr	r3, [r7, #0]
    62c2:	685b      	ldr	r3, [r3, #4]
    62c4:	3b01      	subs	r3, #1
    62c6:	4013      	ands	r3, r2
    62c8:	d11a      	bne.n	6300 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    62ce:	2302      	movs	r3, #2
    62d0:	60bb      	str	r3, [r7, #8]
    62d2:	e005      	b.n	62e0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	3301      	adds	r3, #1
    62d8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    62da:	68bb      	ldr	r3, [r7, #8]
    62dc:	005b      	lsls	r3, r3, #1
    62de:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    62e0:	683b      	ldr	r3, [r7, #0]
    62e2:	685a      	ldr	r2, [r3, #4]
    62e4:	68bb      	ldr	r3, [r7, #8]
    62e6:	429a      	cmp	r2, r3
    62e8:	d8f4      	bhi.n	62d4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    62ea:	68fb      	ldr	r3, [r7, #12]
    62ec:	021b      	lsls	r3, r3, #8
    62ee:	693a      	ldr	r2, [r7, #16]
    62f0:	4313      	orrs	r3, r2
    62f2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    62f4:	697b      	ldr	r3, [r7, #20]
    62f6:	2280      	movs	r2, #128	; 0x80
    62f8:	0352      	lsls	r2, r2, #13
    62fa:	4313      	orrs	r3, r2
    62fc:	617b      	str	r3, [r7, #20]
    62fe:	e00a      	b.n	6316 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	685b      	ldr	r3, [r3, #4]
    6304:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6306:	693a      	ldr	r2, [r7, #16]
    6308:	4313      	orrs	r3, r2
    630a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    630c:	697b      	ldr	r3, [r7, #20]
    630e:	2280      	movs	r2, #128	; 0x80
    6310:	0292      	lsls	r2, r2, #10
    6312:	4313      	orrs	r3, r2
    6314:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6316:	683b      	ldr	r3, [r7, #0]
    6318:	7a1b      	ldrb	r3, [r3, #8]
    631a:	2b00      	cmp	r3, #0
    631c:	d004      	beq.n	6328 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    631e:	697b      	ldr	r3, [r7, #20]
    6320:	2280      	movs	r2, #128	; 0x80
    6322:	0392      	lsls	r2, r2, #14
    6324:	4313      	orrs	r3, r2
    6326:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6328:	46c0      	nop			; (mov r8, r8)
    632a:	4b13      	ldr	r3, [pc, #76]	; (6378 <system_gclk_gen_set_config+0x110>)
    632c:	4798      	blx	r3
    632e:	1e03      	subs	r3, r0, #0
    6330:	d1fb      	bne.n	632a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6332:	4b12      	ldr	r3, [pc, #72]	; (637c <system_gclk_gen_set_config+0x114>)
    6334:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6336:	4a12      	ldr	r2, [pc, #72]	; (6380 <system_gclk_gen_set_config+0x118>)
    6338:	1dfb      	adds	r3, r7, #7
    633a:	781b      	ldrb	r3, [r3, #0]
    633c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	4b0d      	ldr	r3, [pc, #52]	; (6378 <system_gclk_gen_set_config+0x110>)
    6342:	4798      	blx	r3
    6344:	1e03      	subs	r3, r0, #0
    6346:	d1fb      	bne.n	6340 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6348:	4b0e      	ldr	r3, [pc, #56]	; (6384 <system_gclk_gen_set_config+0x11c>)
    634a:	693a      	ldr	r2, [r7, #16]
    634c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    634e:	46c0      	nop			; (mov r8, r8)
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <system_gclk_gen_set_config+0x110>)
    6352:	4798      	blx	r3
    6354:	1e03      	subs	r3, r0, #0
    6356:	d1fb      	bne.n	6350 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6358:	4b0a      	ldr	r3, [pc, #40]	; (6384 <system_gclk_gen_set_config+0x11c>)
    635a:	4a0a      	ldr	r2, [pc, #40]	; (6384 <system_gclk_gen_set_config+0x11c>)
    635c:	6851      	ldr	r1, [r2, #4]
    635e:	2280      	movs	r2, #128	; 0x80
    6360:	0252      	lsls	r2, r2, #9
    6362:	4011      	ands	r1, r2
    6364:	697a      	ldr	r2, [r7, #20]
    6366:	430a      	orrs	r2, r1
    6368:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    636a:	4b07      	ldr	r3, [pc, #28]	; (6388 <system_gclk_gen_set_config+0x120>)
    636c:	4798      	blx	r3
}
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	46bd      	mov	sp, r7
    6372:	b006      	add	sp, #24
    6374:	bd80      	pop	{r7, pc}
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	00006219 	.word	0x00006219
    637c:	000061f1 	.word	0x000061f1
    6380:	40000c08 	.word	0x40000c08
    6384:	40000c00 	.word	0x40000c00
    6388:	00006205 	.word	0x00006205

0000638c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    638c:	b580      	push	{r7, lr}
    638e:	b082      	sub	sp, #8
    6390:	af00      	add	r7, sp, #0
    6392:	0002      	movs	r2, r0
    6394:	1dfb      	adds	r3, r7, #7
    6396:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6398:	46c0      	nop			; (mov r8, r8)
    639a:	4b0e      	ldr	r3, [pc, #56]	; (63d4 <system_gclk_gen_enable+0x48>)
    639c:	4798      	blx	r3
    639e:	1e03      	subs	r3, r0, #0
    63a0:	d1fb      	bne.n	639a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    63a2:	4b0d      	ldr	r3, [pc, #52]	; (63d8 <system_gclk_gen_enable+0x4c>)
    63a4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    63a6:	4a0d      	ldr	r2, [pc, #52]	; (63dc <system_gclk_gen_enable+0x50>)
    63a8:	1dfb      	adds	r3, r7, #7
    63aa:	781b      	ldrb	r3, [r3, #0]
    63ac:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	4b08      	ldr	r3, [pc, #32]	; (63d4 <system_gclk_gen_enable+0x48>)
    63b2:	4798      	blx	r3
    63b4:	1e03      	subs	r3, r0, #0
    63b6:	d1fb      	bne.n	63b0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    63b8:	4b09      	ldr	r3, [pc, #36]	; (63e0 <system_gclk_gen_enable+0x54>)
    63ba:	4a09      	ldr	r2, [pc, #36]	; (63e0 <system_gclk_gen_enable+0x54>)
    63bc:	6852      	ldr	r2, [r2, #4]
    63be:	2180      	movs	r1, #128	; 0x80
    63c0:	0249      	lsls	r1, r1, #9
    63c2:	430a      	orrs	r2, r1
    63c4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    63c6:	4b07      	ldr	r3, [pc, #28]	; (63e4 <system_gclk_gen_enable+0x58>)
    63c8:	4798      	blx	r3
}
    63ca:	46c0      	nop			; (mov r8, r8)
    63cc:	46bd      	mov	sp, r7
    63ce:	b002      	add	sp, #8
    63d0:	bd80      	pop	{r7, pc}
    63d2:	46c0      	nop			; (mov r8, r8)
    63d4:	00006219 	.word	0x00006219
    63d8:	000061f1 	.word	0x000061f1
    63dc:	40000c04 	.word	0x40000c04
    63e0:	40000c00 	.word	0x40000c00
    63e4:	00006205 	.word	0x00006205

000063e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    63e8:	b580      	push	{r7, lr}
    63ea:	b086      	sub	sp, #24
    63ec:	af00      	add	r7, sp, #0
    63ee:	0002      	movs	r2, r0
    63f0:	1dfb      	adds	r3, r7, #7
    63f2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    63f4:	46c0      	nop			; (mov r8, r8)
    63f6:	4b2a      	ldr	r3, [pc, #168]	; (64a0 <system_gclk_gen_get_hz+0xb8>)
    63f8:	4798      	blx	r3
    63fa:	1e03      	subs	r3, r0, #0
    63fc:	d1fb      	bne.n	63f6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    63fe:	4b29      	ldr	r3, [pc, #164]	; (64a4 <system_gclk_gen_get_hz+0xbc>)
    6400:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6402:	4a29      	ldr	r2, [pc, #164]	; (64a8 <system_gclk_gen_get_hz+0xc0>)
    6404:	1dfb      	adds	r3, r7, #7
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    640a:	46c0      	nop			; (mov r8, r8)
    640c:	4b24      	ldr	r3, [pc, #144]	; (64a0 <system_gclk_gen_get_hz+0xb8>)
    640e:	4798      	blx	r3
    6410:	1e03      	subs	r3, r0, #0
    6412:	d1fb      	bne.n	640c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6414:	4b25      	ldr	r3, [pc, #148]	; (64ac <system_gclk_gen_get_hz+0xc4>)
    6416:	685b      	ldr	r3, [r3, #4]
    6418:	04db      	lsls	r3, r3, #19
    641a:	0edb      	lsrs	r3, r3, #27
    641c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    641e:	0018      	movs	r0, r3
    6420:	4b23      	ldr	r3, [pc, #140]	; (64b0 <system_gclk_gen_get_hz+0xc8>)
    6422:	4798      	blx	r3
    6424:	0003      	movs	r3, r0
    6426:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6428:	4a1f      	ldr	r2, [pc, #124]	; (64a8 <system_gclk_gen_get_hz+0xc0>)
    642a:	1dfb      	adds	r3, r7, #7
    642c:	781b      	ldrb	r3, [r3, #0]
    642e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6430:	4b1e      	ldr	r3, [pc, #120]	; (64ac <system_gclk_gen_get_hz+0xc4>)
    6432:	685b      	ldr	r3, [r3, #4]
    6434:	02db      	lsls	r3, r3, #11
    6436:	0fdb      	lsrs	r3, r3, #31
    6438:	b2da      	uxtb	r2, r3
    643a:	2313      	movs	r3, #19
    643c:	18fb      	adds	r3, r7, r3
    643e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6440:	4a1c      	ldr	r2, [pc, #112]	; (64b4 <system_gclk_gen_get_hz+0xcc>)
    6442:	1dfb      	adds	r3, r7, #7
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6448:	46c0      	nop			; (mov r8, r8)
    644a:	4b15      	ldr	r3, [pc, #84]	; (64a0 <system_gclk_gen_get_hz+0xb8>)
    644c:	4798      	blx	r3
    644e:	1e03      	subs	r3, r0, #0
    6450:	d1fb      	bne.n	644a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6452:	4b16      	ldr	r3, [pc, #88]	; (64ac <system_gclk_gen_get_hz+0xc4>)
    6454:	689b      	ldr	r3, [r3, #8]
    6456:	021b      	lsls	r3, r3, #8
    6458:	0c1b      	lsrs	r3, r3, #16
    645a:	b29b      	uxth	r3, r3
    645c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    645e:	4b16      	ldr	r3, [pc, #88]	; (64b8 <system_gclk_gen_get_hz+0xd0>)
    6460:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6462:	2313      	movs	r3, #19
    6464:	18fb      	adds	r3, r7, r3
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	2b00      	cmp	r3, #0
    646a:	d109      	bne.n	6480 <system_gclk_gen_get_hz+0x98>
    646c:	68fb      	ldr	r3, [r7, #12]
    646e:	2b01      	cmp	r3, #1
    6470:	d906      	bls.n	6480 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6472:	4b12      	ldr	r3, [pc, #72]	; (64bc <system_gclk_gen_get_hz+0xd4>)
    6474:	68f9      	ldr	r1, [r7, #12]
    6476:	6978      	ldr	r0, [r7, #20]
    6478:	4798      	blx	r3
    647a:	0003      	movs	r3, r0
    647c:	617b      	str	r3, [r7, #20]
    647e:	e00a      	b.n	6496 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6480:	2313      	movs	r3, #19
    6482:	18fb      	adds	r3, r7, r3
    6484:	781b      	ldrb	r3, [r3, #0]
    6486:	2b00      	cmp	r3, #0
    6488:	d005      	beq.n	6496 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    648a:	68fb      	ldr	r3, [r7, #12]
    648c:	3301      	adds	r3, #1
    648e:	697a      	ldr	r2, [r7, #20]
    6490:	40da      	lsrs	r2, r3
    6492:	0013      	movs	r3, r2
    6494:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6496:	697b      	ldr	r3, [r7, #20]
}
    6498:	0018      	movs	r0, r3
    649a:	46bd      	mov	sp, r7
    649c:	b006      	add	sp, #24
    649e:	bd80      	pop	{r7, pc}
    64a0:	00006219 	.word	0x00006219
    64a4:	000061f1 	.word	0x000061f1
    64a8:	40000c04 	.word	0x40000c04
    64ac:	40000c00 	.word	0x40000c00
    64b0:	00005a8d 	.word	0x00005a8d
    64b4:	40000c08 	.word	0x40000c08
    64b8:	00006205 	.word	0x00006205
    64bc:	00007435 	.word	0x00007435

000064c0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    64c0:	b580      	push	{r7, lr}
    64c2:	b084      	sub	sp, #16
    64c4:	af00      	add	r7, sp, #0
    64c6:	0002      	movs	r2, r0
    64c8:	6039      	str	r1, [r7, #0]
    64ca:	1dfb      	adds	r3, r7, #7
    64cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    64ce:	1dfb      	adds	r3, r7, #7
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    64d4:	683b      	ldr	r3, [r7, #0]
    64d6:	781b      	ldrb	r3, [r3, #0]
    64d8:	021b      	lsls	r3, r3, #8
    64da:	001a      	movs	r2, r3
    64dc:	68fb      	ldr	r3, [r7, #12]
    64de:	4313      	orrs	r3, r2
    64e0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    64e2:	1dfb      	adds	r3, r7, #7
    64e4:	781b      	ldrb	r3, [r3, #0]
    64e6:	0018      	movs	r0, r3
    64e8:	4b04      	ldr	r3, [pc, #16]	; (64fc <system_gclk_chan_set_config+0x3c>)
    64ea:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    64ec:	4b04      	ldr	r3, [pc, #16]	; (6500 <system_gclk_chan_set_config+0x40>)
    64ee:	68fa      	ldr	r2, [r7, #12]
    64f0:	b292      	uxth	r2, r2
    64f2:	805a      	strh	r2, [r3, #2]
}
    64f4:	46c0      	nop			; (mov r8, r8)
    64f6:	46bd      	mov	sp, r7
    64f8:	b004      	add	sp, #16
    64fa:	bd80      	pop	{r7, pc}
    64fc:	0000654d 	.word	0x0000654d
    6500:	40000c00 	.word	0x40000c00

00006504 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6504:	b580      	push	{r7, lr}
    6506:	b082      	sub	sp, #8
    6508:	af00      	add	r7, sp, #0
    650a:	0002      	movs	r2, r0
    650c:	1dfb      	adds	r3, r7, #7
    650e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6510:	4b0a      	ldr	r3, [pc, #40]	; (653c <system_gclk_chan_enable+0x38>)
    6512:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6514:	4a0a      	ldr	r2, [pc, #40]	; (6540 <system_gclk_chan_enable+0x3c>)
    6516:	1dfb      	adds	r3, r7, #7
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    651c:	4909      	ldr	r1, [pc, #36]	; (6544 <system_gclk_chan_enable+0x40>)
    651e:	4b09      	ldr	r3, [pc, #36]	; (6544 <system_gclk_chan_enable+0x40>)
    6520:	885b      	ldrh	r3, [r3, #2]
    6522:	b29b      	uxth	r3, r3
    6524:	2280      	movs	r2, #128	; 0x80
    6526:	01d2      	lsls	r2, r2, #7
    6528:	4313      	orrs	r3, r2
    652a:	b29b      	uxth	r3, r3
    652c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    652e:	4b06      	ldr	r3, [pc, #24]	; (6548 <system_gclk_chan_enable+0x44>)
    6530:	4798      	blx	r3
}
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	46bd      	mov	sp, r7
    6536:	b002      	add	sp, #8
    6538:	bd80      	pop	{r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	000061f1 	.word	0x000061f1
    6540:	40000c02 	.word	0x40000c02
    6544:	40000c00 	.word	0x40000c00
    6548:	00006205 	.word	0x00006205

0000654c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    654c:	b580      	push	{r7, lr}
    654e:	b084      	sub	sp, #16
    6550:	af00      	add	r7, sp, #0
    6552:	0002      	movs	r2, r0
    6554:	1dfb      	adds	r3, r7, #7
    6556:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6558:	4b1c      	ldr	r3, [pc, #112]	; (65cc <system_gclk_chan_disable+0x80>)
    655a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    655c:	4a1c      	ldr	r2, [pc, #112]	; (65d0 <system_gclk_chan_disable+0x84>)
    655e:	1dfb      	adds	r3, r7, #7
    6560:	781b      	ldrb	r3, [r3, #0]
    6562:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6564:	4b1b      	ldr	r3, [pc, #108]	; (65d4 <system_gclk_chan_disable+0x88>)
    6566:	885b      	ldrh	r3, [r3, #2]
    6568:	051b      	lsls	r3, r3, #20
    656a:	0f1b      	lsrs	r3, r3, #28
    656c:	b2db      	uxtb	r3, r3
    656e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6570:	4a18      	ldr	r2, [pc, #96]	; (65d4 <system_gclk_chan_disable+0x88>)
    6572:	8853      	ldrh	r3, [r2, #2]
    6574:	4918      	ldr	r1, [pc, #96]	; (65d8 <system_gclk_chan_disable+0x8c>)
    6576:	400b      	ands	r3, r1
    6578:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    657a:	4a16      	ldr	r2, [pc, #88]	; (65d4 <system_gclk_chan_disable+0x88>)
    657c:	4b15      	ldr	r3, [pc, #84]	; (65d4 <system_gclk_chan_disable+0x88>)
    657e:	885b      	ldrh	r3, [r3, #2]
    6580:	b29b      	uxth	r3, r3
    6582:	4916      	ldr	r1, [pc, #88]	; (65dc <system_gclk_chan_disable+0x90>)
    6584:	400b      	ands	r3, r1
    6586:	b29b      	uxth	r3, r3
    6588:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    658a:	46c0      	nop			; (mov r8, r8)
    658c:	4b11      	ldr	r3, [pc, #68]	; (65d4 <system_gclk_chan_disable+0x88>)
    658e:	885b      	ldrh	r3, [r3, #2]
    6590:	b29b      	uxth	r3, r3
    6592:	001a      	movs	r2, r3
    6594:	2380      	movs	r3, #128	; 0x80
    6596:	01db      	lsls	r3, r3, #7
    6598:	4013      	ands	r3, r2
    659a:	d1f7      	bne.n	658c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    659c:	4a0d      	ldr	r2, [pc, #52]	; (65d4 <system_gclk_chan_disable+0x88>)
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	b2db      	uxtb	r3, r3
    65a2:	1c19      	adds	r1, r3, #0
    65a4:	230f      	movs	r3, #15
    65a6:	400b      	ands	r3, r1
    65a8:	b2d9      	uxtb	r1, r3
    65aa:	8853      	ldrh	r3, [r2, #2]
    65ac:	1c08      	adds	r0, r1, #0
    65ae:	210f      	movs	r1, #15
    65b0:	4001      	ands	r1, r0
    65b2:	0208      	lsls	r0, r1, #8
    65b4:	4908      	ldr	r1, [pc, #32]	; (65d8 <system_gclk_chan_disable+0x8c>)
    65b6:	400b      	ands	r3, r1
    65b8:	1c19      	adds	r1, r3, #0
    65ba:	1c03      	adds	r3, r0, #0
    65bc:	430b      	orrs	r3, r1
    65be:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    65c0:	4b07      	ldr	r3, [pc, #28]	; (65e0 <system_gclk_chan_disable+0x94>)
    65c2:	4798      	blx	r3
}
    65c4:	46c0      	nop			; (mov r8, r8)
    65c6:	46bd      	mov	sp, r7
    65c8:	b004      	add	sp, #16
    65ca:	bd80      	pop	{r7, pc}
    65cc:	000061f1 	.word	0x000061f1
    65d0:	40000c02 	.word	0x40000c02
    65d4:	40000c00 	.word	0x40000c00
    65d8:	fffff0ff 	.word	0xfffff0ff
    65dc:	ffffbfff 	.word	0xffffbfff
    65e0:	00006205 	.word	0x00006205

000065e4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b084      	sub	sp, #16
    65e8:	af00      	add	r7, sp, #0
    65ea:	0002      	movs	r2, r0
    65ec:	1dfb      	adds	r3, r7, #7
    65ee:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    65f0:	4b0d      	ldr	r3, [pc, #52]	; (6628 <system_gclk_chan_get_hz+0x44>)
    65f2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    65f4:	4a0d      	ldr	r2, [pc, #52]	; (662c <system_gclk_chan_get_hz+0x48>)
    65f6:	1dfb      	adds	r3, r7, #7
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    65fc:	4b0c      	ldr	r3, [pc, #48]	; (6630 <system_gclk_chan_get_hz+0x4c>)
    65fe:	885b      	ldrh	r3, [r3, #2]
    6600:	051b      	lsls	r3, r3, #20
    6602:	0f1b      	lsrs	r3, r3, #28
    6604:	b2da      	uxtb	r2, r3
    6606:	230f      	movs	r3, #15
    6608:	18fb      	adds	r3, r7, r3
    660a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    660c:	4b09      	ldr	r3, [pc, #36]	; (6634 <system_gclk_chan_get_hz+0x50>)
    660e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6610:	230f      	movs	r3, #15
    6612:	18fb      	adds	r3, r7, r3
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	0018      	movs	r0, r3
    6618:	4b07      	ldr	r3, [pc, #28]	; (6638 <system_gclk_chan_get_hz+0x54>)
    661a:	4798      	blx	r3
    661c:	0003      	movs	r3, r0
}
    661e:	0018      	movs	r0, r3
    6620:	46bd      	mov	sp, r7
    6622:	b004      	add	sp, #16
    6624:	bd80      	pop	{r7, pc}
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	000061f1 	.word	0x000061f1
    662c:	40000c02 	.word	0x40000c02
    6630:	40000c00 	.word	0x40000c00
    6634:	00006205 	.word	0x00006205
    6638:	000063e9 	.word	0x000063e9

0000663c <system_pinmux_get_group_from_gpio_pin>:
{
    663c:	b580      	push	{r7, lr}
    663e:	b084      	sub	sp, #16
    6640:	af00      	add	r7, sp, #0
    6642:	0002      	movs	r2, r0
    6644:	1dfb      	adds	r3, r7, #7
    6646:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6648:	230f      	movs	r3, #15
    664a:	18fb      	adds	r3, r7, r3
    664c:	1dfa      	adds	r2, r7, #7
    664e:	7812      	ldrb	r2, [r2, #0]
    6650:	09d2      	lsrs	r2, r2, #7
    6652:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6654:	230e      	movs	r3, #14
    6656:	18fb      	adds	r3, r7, r3
    6658:	1dfa      	adds	r2, r7, #7
    665a:	7812      	ldrb	r2, [r2, #0]
    665c:	0952      	lsrs	r2, r2, #5
    665e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6660:	4b0d      	ldr	r3, [pc, #52]	; (6698 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6662:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6664:	230f      	movs	r3, #15
    6666:	18fb      	adds	r3, r7, r3
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	2b00      	cmp	r3, #0
    666c:	d10f      	bne.n	668e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    666e:	230f      	movs	r3, #15
    6670:	18fb      	adds	r3, r7, r3
    6672:	781b      	ldrb	r3, [r3, #0]
    6674:	009b      	lsls	r3, r3, #2
    6676:	2210      	movs	r2, #16
    6678:	4694      	mov	ip, r2
    667a:	44bc      	add	ip, r7
    667c:	4463      	add	r3, ip
    667e:	3b08      	subs	r3, #8
    6680:	681a      	ldr	r2, [r3, #0]
    6682:	230e      	movs	r3, #14
    6684:	18fb      	adds	r3, r7, r3
    6686:	781b      	ldrb	r3, [r3, #0]
    6688:	01db      	lsls	r3, r3, #7
    668a:	18d3      	adds	r3, r2, r3
    668c:	e000      	b.n	6690 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    668e:	2300      	movs	r3, #0
}
    6690:	0018      	movs	r0, r3
    6692:	46bd      	mov	sp, r7
    6694:	b004      	add	sp, #16
    6696:	bd80      	pop	{r7, pc}
    6698:	41004400 	.word	0x41004400

0000669c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    669c:	b580      	push	{r7, lr}
    669e:	b088      	sub	sp, #32
    66a0:	af00      	add	r7, sp, #0
    66a2:	60f8      	str	r0, [r7, #12]
    66a4:	60b9      	str	r1, [r7, #8]
    66a6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    66a8:	2300      	movs	r3, #0
    66aa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	78db      	ldrb	r3, [r3, #3]
    66b0:	2201      	movs	r2, #1
    66b2:	4053      	eors	r3, r2
    66b4:	b2db      	uxtb	r3, r3
    66b6:	2b00      	cmp	r3, #0
    66b8:	d035      	beq.n	6726 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	781b      	ldrb	r3, [r3, #0]
    66be:	2b80      	cmp	r3, #128	; 0x80
    66c0:	d00b      	beq.n	66da <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    66c2:	69fb      	ldr	r3, [r7, #28]
    66c4:	2280      	movs	r2, #128	; 0x80
    66c6:	0252      	lsls	r2, r2, #9
    66c8:	4313      	orrs	r3, r2
    66ca:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	061b      	lsls	r3, r3, #24
    66d2:	001a      	movs	r2, r3
    66d4:	69fb      	ldr	r3, [r7, #28]
    66d6:	4313      	orrs	r3, r2
    66d8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	785b      	ldrb	r3, [r3, #1]
    66de:	2b00      	cmp	r3, #0
    66e0:	d003      	beq.n	66ea <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    66e6:	2b02      	cmp	r3, #2
    66e8:	d110      	bne.n	670c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    66ea:	69fb      	ldr	r3, [r7, #28]
    66ec:	2280      	movs	r2, #128	; 0x80
    66ee:	0292      	lsls	r2, r2, #10
    66f0:	4313      	orrs	r3, r2
    66f2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	789b      	ldrb	r3, [r3, #2]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d004      	beq.n	6706 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    66fc:	69fb      	ldr	r3, [r7, #28]
    66fe:	2280      	movs	r2, #128	; 0x80
    6700:	02d2      	lsls	r2, r2, #11
    6702:	4313      	orrs	r3, r2
    6704:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6706:	68fb      	ldr	r3, [r7, #12]
    6708:	68ba      	ldr	r2, [r7, #8]
    670a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	785b      	ldrb	r3, [r3, #1]
    6710:	2b01      	cmp	r3, #1
    6712:	d003      	beq.n	671c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6718:	2b02      	cmp	r3, #2
    671a:	d107      	bne.n	672c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    671c:	69fb      	ldr	r3, [r7, #28]
    671e:	4a22      	ldr	r2, [pc, #136]	; (67a8 <_system_pinmux_config+0x10c>)
    6720:	4013      	ands	r3, r2
    6722:	61fb      	str	r3, [r7, #28]
    6724:	e002      	b.n	672c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	68ba      	ldr	r2, [r7, #8]
    672a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    672c:	68bb      	ldr	r3, [r7, #8]
    672e:	041b      	lsls	r3, r3, #16
    6730:	0c1b      	lsrs	r3, r3, #16
    6732:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6734:	68bb      	ldr	r3, [r7, #8]
    6736:	0c1b      	lsrs	r3, r3, #16
    6738:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    673a:	69ba      	ldr	r2, [r7, #24]
    673c:	69fb      	ldr	r3, [r7, #28]
    673e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6740:	22a0      	movs	r2, #160	; 0xa0
    6742:	05d2      	lsls	r2, r2, #23
    6744:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6746:	68fb      	ldr	r3, [r7, #12]
    6748:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    674a:	697a      	ldr	r2, [r7, #20]
    674c:	69fb      	ldr	r3, [r7, #28]
    674e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6750:	22d0      	movs	r2, #208	; 0xd0
    6752:	0612      	lsls	r2, r2, #24
    6754:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6756:	68fb      	ldr	r3, [r7, #12]
    6758:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	78db      	ldrb	r3, [r3, #3]
    675e:	2201      	movs	r2, #1
    6760:	4053      	eors	r3, r2
    6762:	b2db      	uxtb	r3, r3
    6764:	2b00      	cmp	r3, #0
    6766:	d01a      	beq.n	679e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6768:	69fa      	ldr	r2, [r7, #28]
    676a:	2380      	movs	r3, #128	; 0x80
    676c:	02db      	lsls	r3, r3, #11
    676e:	4013      	ands	r3, r2
    6770:	d00a      	beq.n	6788 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	789b      	ldrb	r3, [r3, #2]
    6776:	2b01      	cmp	r3, #1
    6778:	d103      	bne.n	6782 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    677a:	68fb      	ldr	r3, [r7, #12]
    677c:	68ba      	ldr	r2, [r7, #8]
    677e:	619a      	str	r2, [r3, #24]
    6780:	e002      	b.n	6788 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6782:	68fb      	ldr	r3, [r7, #12]
    6784:	68ba      	ldr	r2, [r7, #8]
    6786:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	785b      	ldrb	r3, [r3, #1]
    678c:	2b01      	cmp	r3, #1
    678e:	d003      	beq.n	6798 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6794:	2b02      	cmp	r3, #2
    6796:	d102      	bne.n	679e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6798:	68fb      	ldr	r3, [r7, #12]
    679a:	68ba      	ldr	r2, [r7, #8]
    679c:	609a      	str	r2, [r3, #8]
		}
	}
}
    679e:	46c0      	nop			; (mov r8, r8)
    67a0:	46bd      	mov	sp, r7
    67a2:	b008      	add	sp, #32
    67a4:	bd80      	pop	{r7, pc}
    67a6:	46c0      	nop			; (mov r8, r8)
    67a8:	fffbffff 	.word	0xfffbffff

000067ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    67ac:	b580      	push	{r7, lr}
    67ae:	b084      	sub	sp, #16
    67b0:	af00      	add	r7, sp, #0
    67b2:	0002      	movs	r2, r0
    67b4:	6039      	str	r1, [r7, #0]
    67b6:	1dfb      	adds	r3, r7, #7
    67b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    67ba:	1dfb      	adds	r3, r7, #7
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	0018      	movs	r0, r3
    67c0:	4b0a      	ldr	r3, [pc, #40]	; (67ec <system_pinmux_pin_set_config+0x40>)
    67c2:	4798      	blx	r3
    67c4:	0003      	movs	r3, r0
    67c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    67c8:	1dfb      	adds	r3, r7, #7
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	221f      	movs	r2, #31
    67ce:	4013      	ands	r3, r2
    67d0:	2201      	movs	r2, #1
    67d2:	409a      	lsls	r2, r3
    67d4:	0013      	movs	r3, r2
    67d6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    67d8:	683a      	ldr	r2, [r7, #0]
    67da:	68b9      	ldr	r1, [r7, #8]
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	0018      	movs	r0, r3
    67e0:	4b03      	ldr	r3, [pc, #12]	; (67f0 <system_pinmux_pin_set_config+0x44>)
    67e2:	4798      	blx	r3
}
    67e4:	46c0      	nop			; (mov r8, r8)
    67e6:	46bd      	mov	sp, r7
    67e8:	b004      	add	sp, #16
    67ea:	bd80      	pop	{r7, pc}
    67ec:	0000663d 	.word	0x0000663d
    67f0:	0000669d 	.word	0x0000669d

000067f4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	af00      	add	r7, sp, #0
	return;
    67f8:	46c0      	nop			; (mov r8, r8)
}
    67fa:	46bd      	mov	sp, r7
    67fc:	bd80      	pop	{r7, pc}
	...

00006800 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6800:	b580      	push	{r7, lr}
    6802:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6804:	4b06      	ldr	r3, [pc, #24]	; (6820 <system_init+0x20>)
    6806:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6808:	4b06      	ldr	r3, [pc, #24]	; (6824 <system_init+0x24>)
    680a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    680c:	4b06      	ldr	r3, [pc, #24]	; (6828 <system_init+0x28>)
    680e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6810:	4b06      	ldr	r3, [pc, #24]	; (682c <system_init+0x2c>)
    6812:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6814:	4b06      	ldr	r3, [pc, #24]	; (6830 <system_init+0x30>)
    6816:	4798      	blx	r3
}
    6818:	46c0      	nop			; (mov r8, r8)
    681a:	46bd      	mov	sp, r7
    681c:	bd80      	pop	{r7, pc}
    681e:	46c0      	nop			; (mov r8, r8)
    6820:	00005f19 	.word	0x00005f19
    6824:	0000373d 	.word	0x0000373d
    6828:	000067f5 	.word	0x000067f5
    682c:	000039ad 	.word	0x000039ad
    6830:	000067f5 	.word	0x000067f5

00006834 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6834:	b580      	push	{r7, lr}
    6836:	b082      	sub	sp, #8
    6838:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    683a:	4b2f      	ldr	r3, [pc, #188]	; (68f8 <Reset_Handler+0xc4>)
    683c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    683e:	4b2f      	ldr	r3, [pc, #188]	; (68fc <Reset_Handler+0xc8>)
    6840:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6842:	687a      	ldr	r2, [r7, #4]
    6844:	683b      	ldr	r3, [r7, #0]
    6846:	429a      	cmp	r2, r3
    6848:	d00c      	beq.n	6864 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    684a:	e007      	b.n	685c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    684c:	683b      	ldr	r3, [r7, #0]
    684e:	1d1a      	adds	r2, r3, #4
    6850:	603a      	str	r2, [r7, #0]
    6852:	687a      	ldr	r2, [r7, #4]
    6854:	1d11      	adds	r1, r2, #4
    6856:	6079      	str	r1, [r7, #4]
    6858:	6812      	ldr	r2, [r2, #0]
    685a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    685c:	683a      	ldr	r2, [r7, #0]
    685e:	4b28      	ldr	r3, [pc, #160]	; (6900 <Reset_Handler+0xcc>)
    6860:	429a      	cmp	r2, r3
    6862:	d3f3      	bcc.n	684c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6864:	4b27      	ldr	r3, [pc, #156]	; (6904 <Reset_Handler+0xd0>)
    6866:	603b      	str	r3, [r7, #0]
    6868:	e004      	b.n	6874 <Reset_Handler+0x40>
                *pDest++ = 0;
    686a:	683b      	ldr	r3, [r7, #0]
    686c:	1d1a      	adds	r2, r3, #4
    686e:	603a      	str	r2, [r7, #0]
    6870:	2200      	movs	r2, #0
    6872:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6874:	683a      	ldr	r2, [r7, #0]
    6876:	4b24      	ldr	r3, [pc, #144]	; (6908 <Reset_Handler+0xd4>)
    6878:	429a      	cmp	r2, r3
    687a:	d3f6      	bcc.n	686a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    687c:	4b23      	ldr	r3, [pc, #140]	; (690c <Reset_Handler+0xd8>)
    687e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6880:	4b23      	ldr	r3, [pc, #140]	; (6910 <Reset_Handler+0xdc>)
    6882:	687a      	ldr	r2, [r7, #4]
    6884:	21ff      	movs	r1, #255	; 0xff
    6886:	438a      	bics	r2, r1
    6888:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    688a:	4a22      	ldr	r2, [pc, #136]	; (6914 <Reset_Handler+0xe0>)
    688c:	2390      	movs	r3, #144	; 0x90
    688e:	005b      	lsls	r3, r3, #1
    6890:	2102      	movs	r1, #2
    6892:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6894:	4a20      	ldr	r2, [pc, #128]	; (6918 <Reset_Handler+0xe4>)
    6896:	78d3      	ldrb	r3, [r2, #3]
    6898:	2103      	movs	r1, #3
    689a:	438b      	bics	r3, r1
    689c:	1c19      	adds	r1, r3, #0
    689e:	2302      	movs	r3, #2
    68a0:	430b      	orrs	r3, r1
    68a2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    68a4:	4a1c      	ldr	r2, [pc, #112]	; (6918 <Reset_Handler+0xe4>)
    68a6:	78d3      	ldrb	r3, [r2, #3]
    68a8:	210c      	movs	r1, #12
    68aa:	438b      	bics	r3, r1
    68ac:	1c19      	adds	r1, r3, #0
    68ae:	2308      	movs	r3, #8
    68b0:	430b      	orrs	r3, r1
    68b2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    68b4:	4a19      	ldr	r2, [pc, #100]	; (691c <Reset_Handler+0xe8>)
    68b6:	7b93      	ldrb	r3, [r2, #14]
    68b8:	2130      	movs	r1, #48	; 0x30
    68ba:	438b      	bics	r3, r1
    68bc:	1c19      	adds	r1, r3, #0
    68be:	2320      	movs	r3, #32
    68c0:	430b      	orrs	r3, r1
    68c2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    68c4:	4a15      	ldr	r2, [pc, #84]	; (691c <Reset_Handler+0xe8>)
    68c6:	7b93      	ldrb	r3, [r2, #14]
    68c8:	210c      	movs	r1, #12
    68ca:	438b      	bics	r3, r1
    68cc:	1c19      	adds	r1, r3, #0
    68ce:	2308      	movs	r3, #8
    68d0:	430b      	orrs	r3, r1
    68d2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    68d4:	4a11      	ldr	r2, [pc, #68]	; (691c <Reset_Handler+0xe8>)
    68d6:	7b93      	ldrb	r3, [r2, #14]
    68d8:	2103      	movs	r1, #3
    68da:	438b      	bics	r3, r1
    68dc:	1c19      	adds	r1, r3, #0
    68de:	2302      	movs	r3, #2
    68e0:	430b      	orrs	r3, r1
    68e2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    68e4:	4a0e      	ldr	r2, [pc, #56]	; (6920 <Reset_Handler+0xec>)
    68e6:	6853      	ldr	r3, [r2, #4]
    68e8:	2180      	movs	r1, #128	; 0x80
    68ea:	430b      	orrs	r3, r1
    68ec:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    68ee:	4b0d      	ldr	r3, [pc, #52]	; (6924 <Reset_Handler+0xf0>)
    68f0:	4798      	blx	r3

        /* Branch to main function */
        main();
    68f2:	4b0d      	ldr	r3, [pc, #52]	; (6928 <Reset_Handler+0xf4>)
    68f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    68f6:	e7fe      	b.n	68f6 <Reset_Handler+0xc2>
    68f8:	0000b8b0 	.word	0x0000b8b0
    68fc:	20000000 	.word	0x20000000
    6900:	20000238 	.word	0x20000238
    6904:	20000238 	.word	0x20000238
    6908:	20000478 	.word	0x20000478
    690c:	00000000 	.word	0x00000000
    6910:	e000ed00 	.word	0xe000ed00
    6914:	41007000 	.word	0x41007000
    6918:	41005000 	.word	0x41005000
    691c:	41004800 	.word	0x41004800
    6920:	41004000 	.word	0x41004000
    6924:	00009049 	.word	0x00009049
    6928:	00007381 	.word	0x00007381

0000692c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    692c:	b580      	push	{r7, lr}
    692e:	af00      	add	r7, sp, #0
        while (1) {
    6930:	e7fe      	b.n	6930 <Dummy_Handler+0x4>
	...

00006934 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6934:	b580      	push	{r7, lr}
    6936:	b086      	sub	sp, #24
    6938:	af00      	add	r7, sp, #0
    693a:	60f8      	str	r0, [r7, #12]
    693c:	60b9      	str	r1, [r7, #8]
    693e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6940:	2300      	movs	r3, #0
    6942:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6944:	68fb      	ldr	r3, [r7, #12]
    6946:	2b00      	cmp	r3, #0
    6948:	d012      	beq.n	6970 <_read+0x3c>
		return -1;
    694a:	2301      	movs	r3, #1
    694c:	425b      	negs	r3, r3
    694e:	e013      	b.n	6978 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6950:	4b0b      	ldr	r3, [pc, #44]	; (6980 <_read+0x4c>)
    6952:	681a      	ldr	r2, [r3, #0]
    6954:	4b0b      	ldr	r3, [pc, #44]	; (6984 <_read+0x50>)
    6956:	681b      	ldr	r3, [r3, #0]
    6958:	68b9      	ldr	r1, [r7, #8]
    695a:	0018      	movs	r0, r3
    695c:	4790      	blx	r2
		ptr++;
    695e:	68bb      	ldr	r3, [r7, #8]
    6960:	3301      	adds	r3, #1
    6962:	60bb      	str	r3, [r7, #8]
		nChars++;
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	3301      	adds	r3, #1
    6968:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	3b01      	subs	r3, #1
    696e:	607b      	str	r3, [r7, #4]
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	2b00      	cmp	r3, #0
    6974:	dcec      	bgt.n	6950 <_read+0x1c>
	}
	return nChars;
    6976:	697b      	ldr	r3, [r7, #20]
}
    6978:	0018      	movs	r0, r3
    697a:	46bd      	mov	sp, r7
    697c:	b006      	add	sp, #24
    697e:	bd80      	pop	{r7, pc}
    6980:	200003dc 	.word	0x200003dc
    6984:	200003e4 	.word	0x200003e4

00006988 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6988:	b580      	push	{r7, lr}
    698a:	b086      	sub	sp, #24
    698c:	af00      	add	r7, sp, #0
    698e:	60f8      	str	r0, [r7, #12]
    6990:	60b9      	str	r1, [r7, #8]
    6992:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6994:	2300      	movs	r3, #0
    6996:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6998:	68fb      	ldr	r3, [r7, #12]
    699a:	2b01      	cmp	r3, #1
    699c:	d01d      	beq.n	69da <_write+0x52>
    699e:	68fb      	ldr	r3, [r7, #12]
    69a0:	2b02      	cmp	r3, #2
    69a2:	d01a      	beq.n	69da <_write+0x52>
    69a4:	68fb      	ldr	r3, [r7, #12]
    69a6:	2b03      	cmp	r3, #3
    69a8:	d017      	beq.n	69da <_write+0x52>
		return -1;
    69aa:	2301      	movs	r3, #1
    69ac:	425b      	negs	r3, r3
    69ae:	e018      	b.n	69e2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    69b0:	4b0e      	ldr	r3, [pc, #56]	; (69ec <_write+0x64>)
    69b2:	681a      	ldr	r2, [r3, #0]
    69b4:	4b0e      	ldr	r3, [pc, #56]	; (69f0 <_write+0x68>)
    69b6:	6818      	ldr	r0, [r3, #0]
    69b8:	68bb      	ldr	r3, [r7, #8]
    69ba:	1c59      	adds	r1, r3, #1
    69bc:	60b9      	str	r1, [r7, #8]
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	0019      	movs	r1, r3
    69c2:	4790      	blx	r2
    69c4:	1e03      	subs	r3, r0, #0
    69c6:	da02      	bge.n	69ce <_write+0x46>
			return -1;
    69c8:	2301      	movs	r3, #1
    69ca:	425b      	negs	r3, r3
    69cc:	e009      	b.n	69e2 <_write+0x5a>
		}
		++nChars;
    69ce:	697b      	ldr	r3, [r7, #20]
    69d0:	3301      	adds	r3, #1
    69d2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	3b01      	subs	r3, #1
    69d8:	607b      	str	r3, [r7, #4]
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	2b00      	cmp	r3, #0
    69de:	d1e7      	bne.n	69b0 <_write+0x28>
	}
	return nChars;
    69e0:	697b      	ldr	r3, [r7, #20]
}
    69e2:	0018      	movs	r0, r3
    69e4:	46bd      	mov	sp, r7
    69e6:	b006      	add	sp, #24
    69e8:	bd80      	pop	{r7, pc}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	200003e0 	.word	0x200003e0
    69f0:	200003e4 	.word	0x200003e4

000069f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b084      	sub	sp, #16
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    69fc:	4b0a      	ldr	r3, [pc, #40]	; (6a28 <_sbrk+0x34>)
    69fe:	681b      	ldr	r3, [r3, #0]
    6a00:	2b00      	cmp	r3, #0
    6a02:	d102      	bne.n	6a0a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6a04:	4b08      	ldr	r3, [pc, #32]	; (6a28 <_sbrk+0x34>)
    6a06:	4a09      	ldr	r2, [pc, #36]	; (6a2c <_sbrk+0x38>)
    6a08:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6a0a:	4b07      	ldr	r3, [pc, #28]	; (6a28 <_sbrk+0x34>)
    6a0c:	681b      	ldr	r3, [r3, #0]
    6a0e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6a10:	4b05      	ldr	r3, [pc, #20]	; (6a28 <_sbrk+0x34>)
    6a12:	681a      	ldr	r2, [r3, #0]
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	18d2      	adds	r2, r2, r3
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <_sbrk+0x34>)
    6a1a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6a1c:	68fb      	ldr	r3, [r7, #12]
}
    6a1e:	0018      	movs	r0, r3
    6a20:	46bd      	mov	sp, r7
    6a22:	b004      	add	sp, #16
    6a24:	bd80      	pop	{r7, pc}
    6a26:	46c0      	nop			; (mov r8, r8)
    6a28:	2000029c 	.word	0x2000029c
    6a2c:	20002478 	.word	0x20002478

00006a30 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6a30:	b580      	push	{r7, lr}
    6a32:	b082      	sub	sp, #8
    6a34:	af00      	add	r7, sp, #0
    6a36:	6078      	str	r0, [r7, #4]
	return -1;
    6a38:	2301      	movs	r3, #1
    6a3a:	425b      	negs	r3, r3
}
    6a3c:	0018      	movs	r0, r3
    6a3e:	46bd      	mov	sp, r7
    6a40:	b002      	add	sp, #8
    6a42:	bd80      	pop	{r7, pc}

00006a44 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6a44:	b580      	push	{r7, lr}
    6a46:	b082      	sub	sp, #8
    6a48:	af00      	add	r7, sp, #0
    6a4a:	6078      	str	r0, [r7, #4]
    6a4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6a4e:	683b      	ldr	r3, [r7, #0]
    6a50:	2280      	movs	r2, #128	; 0x80
    6a52:	0192      	lsls	r2, r2, #6
    6a54:	605a      	str	r2, [r3, #4]

	return 0;
    6a56:	2300      	movs	r3, #0
}
    6a58:	0018      	movs	r0, r3
    6a5a:	46bd      	mov	sp, r7
    6a5c:	b002      	add	sp, #8
    6a5e:	bd80      	pop	{r7, pc}

00006a60 <_isatty>:

extern int _isatty(int file)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b082      	sub	sp, #8
    6a64:	af00      	add	r7, sp, #0
    6a66:	6078      	str	r0, [r7, #4]
	return 1;
    6a68:	2301      	movs	r3, #1
}
    6a6a:	0018      	movs	r0, r3
    6a6c:	46bd      	mov	sp, r7
    6a6e:	b002      	add	sp, #8
    6a70:	bd80      	pop	{r7, pc}

00006a72 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    6a72:	b580      	push	{r7, lr}
    6a74:	b084      	sub	sp, #16
    6a76:	af00      	add	r7, sp, #0
    6a78:	60f8      	str	r0, [r7, #12]
    6a7a:	60b9      	str	r1, [r7, #8]
    6a7c:	607a      	str	r2, [r7, #4]
	return 0;
    6a7e:	2300      	movs	r3, #0
}
    6a80:	0018      	movs	r0, r3
    6a82:	46bd      	mov	sp, r7
    6a84:	b004      	add	sp, #16
    6a86:	bd80      	pop	{r7, pc}

00006a88 <system_pinmux_get_group_from_gpio_pin>:
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b084      	sub	sp, #16
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	0002      	movs	r2, r0
    6a90:	1dfb      	adds	r3, r7, #7
    6a92:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6a94:	230f      	movs	r3, #15
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	1dfa      	adds	r2, r7, #7
    6a9a:	7812      	ldrb	r2, [r2, #0]
    6a9c:	09d2      	lsrs	r2, r2, #7
    6a9e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6aa0:	230e      	movs	r3, #14
    6aa2:	18fb      	adds	r3, r7, r3
    6aa4:	1dfa      	adds	r2, r7, #7
    6aa6:	7812      	ldrb	r2, [r2, #0]
    6aa8:	0952      	lsrs	r2, r2, #5
    6aaa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6aac:	4b0d      	ldr	r3, [pc, #52]	; (6ae4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6aae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6ab0:	230f      	movs	r3, #15
    6ab2:	18fb      	adds	r3, r7, r3
    6ab4:	781b      	ldrb	r3, [r3, #0]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d10f      	bne.n	6ada <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6aba:	230f      	movs	r3, #15
    6abc:	18fb      	adds	r3, r7, r3
    6abe:	781b      	ldrb	r3, [r3, #0]
    6ac0:	009b      	lsls	r3, r3, #2
    6ac2:	2210      	movs	r2, #16
    6ac4:	4694      	mov	ip, r2
    6ac6:	44bc      	add	ip, r7
    6ac8:	4463      	add	r3, ip
    6aca:	3b08      	subs	r3, #8
    6acc:	681a      	ldr	r2, [r3, #0]
    6ace:	230e      	movs	r3, #14
    6ad0:	18fb      	adds	r3, r7, r3
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	01db      	lsls	r3, r3, #7
    6ad6:	18d3      	adds	r3, r2, r3
    6ad8:	e000      	b.n	6adc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6ada:	2300      	movs	r3, #0
}
    6adc:	0018      	movs	r0, r3
    6ade:	46bd      	mov	sp, r7
    6ae0:	b004      	add	sp, #16
    6ae2:	bd80      	pop	{r7, pc}
    6ae4:	41004400 	.word	0x41004400

00006ae8 <system_interrupt_enable>:
{
    6ae8:	b580      	push	{r7, lr}
    6aea:	b082      	sub	sp, #8
    6aec:	af00      	add	r7, sp, #0
    6aee:	0002      	movs	r2, r0
    6af0:	1dfb      	adds	r3, r7, #7
    6af2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6af4:	4b06      	ldr	r3, [pc, #24]	; (6b10 <system_interrupt_enable+0x28>)
    6af6:	1dfa      	adds	r2, r7, #7
    6af8:	7812      	ldrb	r2, [r2, #0]
    6afa:	0011      	movs	r1, r2
    6afc:	221f      	movs	r2, #31
    6afe:	400a      	ands	r2, r1
    6b00:	2101      	movs	r1, #1
    6b02:	4091      	lsls	r1, r2
    6b04:	000a      	movs	r2, r1
    6b06:	601a      	str	r2, [r3, #0]
}
    6b08:	46c0      	nop			; (mov r8, r8)
    6b0a:	46bd      	mov	sp, r7
    6b0c:	b002      	add	sp, #8
    6b0e:	bd80      	pop	{r7, pc}
    6b10:	e000e100 	.word	0xe000e100

00006b14 <adc_is_syncing>:
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b084      	sub	sp, #16
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6b22:	68fb      	ldr	r3, [r7, #12]
    6b24:	7e5b      	ldrb	r3, [r3, #25]
    6b26:	b2db      	uxtb	r3, r3
    6b28:	b25b      	sxtb	r3, r3
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	da01      	bge.n	6b32 <adc_is_syncing+0x1e>
		return true;
    6b2e:	2301      	movs	r3, #1
    6b30:	e000      	b.n	6b34 <adc_is_syncing+0x20>
	return false;
    6b32:	2300      	movs	r3, #0
}
    6b34:	0018      	movs	r0, r3
    6b36:	46bd      	mov	sp, r7
    6b38:	b004      	add	sp, #16
    6b3a:	bd80      	pop	{r7, pc}

00006b3c <adc_enable>:
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	b084      	sub	sp, #16
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	681b      	ldr	r3, [r3, #0]
    6b48:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	0018      	movs	r0, r3
    6b50:	4b10      	ldr	r3, [pc, #64]	; (6b94 <adc_enable+0x58>)
    6b52:	4798      	blx	r3
    6b54:	1e03      	subs	r3, r0, #0
    6b56:	d1f9      	bne.n	6b4c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    6b58:	2017      	movs	r0, #23
    6b5a:	4b0f      	ldr	r3, [pc, #60]	; (6b98 <adc_enable+0x5c>)
    6b5c:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6b5e:	68fb      	ldr	r3, [r7, #12]
    6b60:	220f      	movs	r2, #15
    6b62:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	220f      	movs	r2, #15
    6b68:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6b6a:	68fb      	ldr	r3, [r7, #12]
    6b6c:	781b      	ldrb	r3, [r3, #0]
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	2202      	movs	r2, #2
    6b72:	4313      	orrs	r3, r2
    6b74:	b2da      	uxtb	r2, r3
    6b76:	68fb      	ldr	r3, [r7, #12]
    6b78:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    6b7a:	46c0      	nop			; (mov r8, r8)
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	0018      	movs	r0, r3
    6b80:	4b04      	ldr	r3, [pc, #16]	; (6b94 <adc_enable+0x58>)
    6b82:	4798      	blx	r3
    6b84:	1e03      	subs	r3, r0, #0
    6b86:	d1f9      	bne.n	6b7c <adc_enable+0x40>
	return STATUS_OK;
    6b88:	2300      	movs	r3, #0
}
    6b8a:	0018      	movs	r0, r3
    6b8c:	46bd      	mov	sp, r7
    6b8e:	b004      	add	sp, #16
    6b90:	bd80      	pop	{r7, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	00006b15 	.word	0x00006b15
    6b98:	00006ae9 	.word	0x00006ae9

00006b9c <i2c_master_is_syncing>:
{
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b084      	sub	sp, #16
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	681b      	ldr	r3, [r3, #0]
    6ba8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6baa:	68fb      	ldr	r3, [r7, #12]
    6bac:	69db      	ldr	r3, [r3, #28]
    6bae:	2207      	movs	r2, #7
    6bb0:	4013      	ands	r3, r2
    6bb2:	1e5a      	subs	r2, r3, #1
    6bb4:	4193      	sbcs	r3, r2
    6bb6:	b2db      	uxtb	r3, r3
}
    6bb8:	0018      	movs	r0, r3
    6bba:	46bd      	mov	sp, r7
    6bbc:	b004      	add	sp, #16
    6bbe:	bd80      	pop	{r7, pc}

00006bc0 <_i2c_master_wait_for_sync>:
{
    6bc0:	b580      	push	{r7, lr}
    6bc2:	b082      	sub	sp, #8
    6bc4:	af00      	add	r7, sp, #0
    6bc6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    6bc8:	46c0      	nop			; (mov r8, r8)
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	0018      	movs	r0, r3
    6bce:	4b04      	ldr	r3, [pc, #16]	; (6be0 <_i2c_master_wait_for_sync+0x20>)
    6bd0:	4798      	blx	r3
    6bd2:	1e03      	subs	r3, r0, #0
    6bd4:	d1f9      	bne.n	6bca <_i2c_master_wait_for_sync+0xa>
}
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	46bd      	mov	sp, r7
    6bda:	b002      	add	sp, #8
    6bdc:	bd80      	pop	{r7, pc}
    6bde:	46c0      	nop			; (mov r8, r8)
    6be0:	00006b9d 	.word	0x00006b9d

00006be4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    6be4:	b580      	push	{r7, lr}
    6be6:	b082      	sub	sp, #8
    6be8:	af00      	add	r7, sp, #0
    6bea:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	2264      	movs	r2, #100	; 0x64
    6bf0:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	4a1b      	ldr	r2, [pc, #108]	; (6c64 <i2c_master_get_config_defaults+0x80>)
    6bf6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	2200      	movs	r2, #0
    6bfc:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	2200      	movs	r2, #0
    6c02:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	2200      	movs	r2, #0
    6c08:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	2280      	movs	r2, #128	; 0x80
    6c0e:	0392      	lsls	r2, r2, #14
    6c10:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	2201      	movs	r2, #1
    6c16:	4252      	negs	r2, r2
    6c18:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	2201      	movs	r2, #1
    6c1e:	4252      	negs	r2, r2
    6c20:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	2200      	movs	r2, #0
    6c26:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	2200      	movs	r2, #0
    6c2c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	2224      	movs	r2, #36	; 0x24
    6c32:	2100      	movs	r1, #0
    6c34:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	2200      	movs	r2, #0
    6c3a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	222c      	movs	r2, #44	; 0x2c
    6c40:	2100      	movs	r1, #0
    6c42:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	222d      	movs	r2, #45	; 0x2d
    6c48:	2100      	movs	r1, #0
    6c4a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	222e      	movs	r2, #46	; 0x2e
    6c50:	2100      	movs	r1, #0
    6c52:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	22d7      	movs	r2, #215	; 0xd7
    6c58:	861a      	strh	r2, [r3, #48]	; 0x30
}
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	46bd      	mov	sp, r7
    6c5e:	b002      	add	sp, #8
    6c60:	bd80      	pop	{r7, pc}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	00000d48 	.word	0x00000d48

00006c68 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b084      	sub	sp, #16
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    6c76:	2300      	movs	r3, #0
    6c78:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	0018      	movs	r0, r3
    6c7e:	4b14      	ldr	r3, [pc, #80]	; (6cd0 <i2c_master_enable+0x68>)
    6c80:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6c82:	68bb      	ldr	r3, [r7, #8]
    6c84:	681b      	ldr	r3, [r3, #0]
    6c86:	2202      	movs	r2, #2
    6c88:	431a      	orrs	r2, r3
    6c8a:	68bb      	ldr	r3, [r7, #8]
    6c8c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	681b      	ldr	r3, [r3, #0]
    6c92:	0018      	movs	r0, r3
    6c94:	4b0f      	ldr	r3, [pc, #60]	; (6cd4 <i2c_master_enable+0x6c>)
    6c96:	4798      	blx	r3
    6c98:	0003      	movs	r3, r0
    6c9a:	0018      	movs	r0, r3
    6c9c:	4b0e      	ldr	r3, [pc, #56]	; (6cd8 <i2c_master_enable+0x70>)
    6c9e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6ca0:	e00c      	b.n	6cbc <i2c_master_enable+0x54>
		timeout_counter++;
    6ca2:	68fb      	ldr	r3, [r7, #12]
    6ca4:	3301      	adds	r3, #1
    6ca6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	88db      	ldrh	r3, [r3, #6]
    6cac:	001a      	movs	r2, r3
    6cae:	68fb      	ldr	r3, [r7, #12]
    6cb0:	429a      	cmp	r2, r3
    6cb2:	d803      	bhi.n	6cbc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    6cb4:	68bb      	ldr	r3, [r7, #8]
    6cb6:	2210      	movs	r2, #16
    6cb8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    6cba:	e006      	b.n	6cca <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6cbc:	68bb      	ldr	r3, [r7, #8]
    6cbe:	8b5b      	ldrh	r3, [r3, #26]
    6cc0:	b29b      	uxth	r3, r3
    6cc2:	001a      	movs	r2, r3
    6cc4:	2310      	movs	r3, #16
    6cc6:	4013      	ands	r3, r2
    6cc8:	d0eb      	beq.n	6ca2 <i2c_master_enable+0x3a>
		}
	}
}
    6cca:	46bd      	mov	sp, r7
    6ccc:	b004      	add	sp, #16
    6cce:	bd80      	pop	{r7, pc}
    6cd0:	00006bc1 	.word	0x00006bc1
    6cd4:	000041c5 	.word	0x000041c5
    6cd8:	00006ae9 	.word	0x00006ae9

00006cdc <port_get_group_from_gpio_pin>:
{
    6cdc:	b580      	push	{r7, lr}
    6cde:	b082      	sub	sp, #8
    6ce0:	af00      	add	r7, sp, #0
    6ce2:	0002      	movs	r2, r0
    6ce4:	1dfb      	adds	r3, r7, #7
    6ce6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6ce8:	1dfb      	adds	r3, r7, #7
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	0018      	movs	r0, r3
    6cee:	4b03      	ldr	r3, [pc, #12]	; (6cfc <port_get_group_from_gpio_pin+0x20>)
    6cf0:	4798      	blx	r3
    6cf2:	0003      	movs	r3, r0
}
    6cf4:	0018      	movs	r0, r3
    6cf6:	46bd      	mov	sp, r7
    6cf8:	b002      	add	sp, #8
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	00006a89 	.word	0x00006a89

00006d00 <port_get_config_defaults>:
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b082      	sub	sp, #8
    6d04:	af00      	add	r7, sp, #0
    6d06:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	2200      	movs	r2, #0
    6d0c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	2201      	movs	r2, #1
    6d12:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	2200      	movs	r2, #0
    6d18:	709a      	strb	r2, [r3, #2]
}
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	46bd      	mov	sp, r7
    6d1e:	b002      	add	sp, #8
    6d20:	bd80      	pop	{r7, pc}
	...

00006d24 <port_pin_set_output_level>:
{
    6d24:	b580      	push	{r7, lr}
    6d26:	b084      	sub	sp, #16
    6d28:	af00      	add	r7, sp, #0
    6d2a:	0002      	movs	r2, r0
    6d2c:	1dfb      	adds	r3, r7, #7
    6d2e:	701a      	strb	r2, [r3, #0]
    6d30:	1dbb      	adds	r3, r7, #6
    6d32:	1c0a      	adds	r2, r1, #0
    6d34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6d36:	1dfb      	adds	r3, r7, #7
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	0018      	movs	r0, r3
    6d3c:	4b0d      	ldr	r3, [pc, #52]	; (6d74 <port_pin_set_output_level+0x50>)
    6d3e:	4798      	blx	r3
    6d40:	0003      	movs	r3, r0
    6d42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6d44:	1dfb      	adds	r3, r7, #7
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	221f      	movs	r2, #31
    6d4a:	4013      	ands	r3, r2
    6d4c:	2201      	movs	r2, #1
    6d4e:	409a      	lsls	r2, r3
    6d50:	0013      	movs	r3, r2
    6d52:	60bb      	str	r3, [r7, #8]
	if (level) {
    6d54:	1dbb      	adds	r3, r7, #6
    6d56:	781b      	ldrb	r3, [r3, #0]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d003      	beq.n	6d64 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6d5c:	68fb      	ldr	r3, [r7, #12]
    6d5e:	68ba      	ldr	r2, [r7, #8]
    6d60:	619a      	str	r2, [r3, #24]
}
    6d62:	e002      	b.n	6d6a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	68ba      	ldr	r2, [r7, #8]
    6d68:	615a      	str	r2, [r3, #20]
}
    6d6a:	46c0      	nop			; (mov r8, r8)
    6d6c:	46bd      	mov	sp, r7
    6d6e:	b004      	add	sp, #16
    6d70:	bd80      	pop	{r7, pc}
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	00006cdd 	.word	0x00006cdd

00006d78 <spi_is_syncing>:
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b084      	sub	sp, #16
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	681b      	ldr	r3, [r3, #0]
    6d84:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    6d86:	68fb      	ldr	r3, [r7, #12]
    6d88:	69db      	ldr	r3, [r3, #28]
    6d8a:	1e5a      	subs	r2, r3, #1
    6d8c:	4193      	sbcs	r3, r2
    6d8e:	b2db      	uxtb	r3, r3
}
    6d90:	0018      	movs	r0, r3
    6d92:	46bd      	mov	sp, r7
    6d94:	b004      	add	sp, #16
    6d96:	bd80      	pop	{r7, pc}

00006d98 <spi_get_config_defaults>:
{
    6d98:	b580      	push	{r7, lr}
    6d9a:	b082      	sub	sp, #8
    6d9c:	af00      	add	r7, sp, #0
    6d9e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	2201      	movs	r2, #1
    6da4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	2200      	movs	r2, #0
    6daa:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	2200      	movs	r2, #0
    6db0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	22c0      	movs	r2, #192	; 0xc0
    6db6:	0392      	lsls	r2, r2, #14
    6db8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	2200      	movs	r2, #0
    6dbe:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	2200      	movs	r2, #0
    6dc4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	2201      	movs	r2, #1
    6dca:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	2201      	movs	r2, #1
    6dd0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	2200      	movs	r2, #0
    6dd6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	2224      	movs	r2, #36	; 0x24
    6ddc:	2100      	movs	r1, #0
    6dde:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	3318      	adds	r3, #24
    6de4:	220c      	movs	r2, #12
    6de6:	2100      	movs	r1, #0
    6de8:	0018      	movs	r0, r3
    6dea:	4b0a      	ldr	r3, [pc, #40]	; (6e14 <spi_get_config_defaults+0x7c>)
    6dec:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	4a09      	ldr	r2, [pc, #36]	; (6e18 <spi_get_config_defaults+0x80>)
    6df2:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	2200      	movs	r2, #0
    6df8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	2200      	movs	r2, #0
    6dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	2200      	movs	r2, #0
    6e04:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    6e06:	687b      	ldr	r3, [r7, #4]
    6e08:	2200      	movs	r2, #0
    6e0a:	635a      	str	r2, [r3, #52]	; 0x34
};
    6e0c:	46c0      	nop			; (mov r8, r8)
    6e0e:	46bd      	mov	sp, r7
    6e10:	b002      	add	sp, #8
    6e12:	bd80      	pop	{r7, pc}
    6e14:	000090a3 	.word	0x000090a3
    6e18:	000186a0 	.word	0x000186a0

00006e1c <spi_enable>:
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b084      	sub	sp, #16
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	681b      	ldr	r3, [r3, #0]
    6e28:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	0018      	movs	r0, r3
    6e30:	4b0b      	ldr	r3, [pc, #44]	; (6e60 <spi_enable+0x44>)
    6e32:	4798      	blx	r3
    6e34:	0003      	movs	r3, r0
    6e36:	0018      	movs	r0, r3
    6e38:	4b0a      	ldr	r3, [pc, #40]	; (6e64 <spi_enable+0x48>)
    6e3a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    6e3c:	46c0      	nop			; (mov r8, r8)
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	0018      	movs	r0, r3
    6e42:	4b09      	ldr	r3, [pc, #36]	; (6e68 <spi_enable+0x4c>)
    6e44:	4798      	blx	r3
    6e46:	1e03      	subs	r3, r0, #0
    6e48:	d1f9      	bne.n	6e3e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6e4a:	68fb      	ldr	r3, [r7, #12]
    6e4c:	681b      	ldr	r3, [r3, #0]
    6e4e:	2202      	movs	r2, #2
    6e50:	431a      	orrs	r2, r3
    6e52:	68fb      	ldr	r3, [r7, #12]
    6e54:	601a      	str	r2, [r3, #0]
}
    6e56:	46c0      	nop			; (mov r8, r8)
    6e58:	46bd      	mov	sp, r7
    6e5a:	b004      	add	sp, #16
    6e5c:	bd80      	pop	{r7, pc}
    6e5e:	46c0      	nop			; (mov r8, r8)
    6e60:	000041c5 	.word	0x000041c5
    6e64:	00006ae9 	.word	0x00006ae9
    6e68:	00006d79 	.word	0x00006d79

00006e6c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	b086      	sub	sp, #24
    6e70:	af00      	add	r7, sp, #0
    6e72:	60f8      	str	r0, [r7, #12]
    6e74:	60b9      	str	r1, [r7, #8]
    6e76:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	781a      	ldrb	r2, [r3, #0]
    6e7c:	68fb      	ldr	r3, [r7, #12]
    6e7e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	785a      	ldrb	r2, [r3, #1]
    6e84:	68fb      	ldr	r3, [r7, #12]
    6e86:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    6e88:	68fb      	ldr	r3, [r7, #12]
    6e8a:	68ba      	ldr	r2, [r7, #8]
    6e8c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    6e8e:	2314      	movs	r3, #20
    6e90:	18fb      	adds	r3, r7, r3
    6e92:	0018      	movs	r0, r3
    6e94:	4b0c      	ldr	r3, [pc, #48]	; (6ec8 <at25dfx_chip_init+0x5c>)
    6e96:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    6e98:	2314      	movs	r3, #20
    6e9a:	18fb      	adds	r3, r7, r3
    6e9c:	2201      	movs	r2, #1
    6e9e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    6ea0:	68fb      	ldr	r3, [r7, #12]
    6ea2:	795b      	ldrb	r3, [r3, #5]
    6ea4:	2214      	movs	r2, #20
    6ea6:	18ba      	adds	r2, r7, r2
    6ea8:	0011      	movs	r1, r2
    6eaa:	0018      	movs	r0, r3
    6eac:	4b07      	ldr	r3, [pc, #28]	; (6ecc <at25dfx_chip_init+0x60>)
    6eae:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    6eb0:	68fb      	ldr	r3, [r7, #12]
    6eb2:	795b      	ldrb	r3, [r3, #5]
    6eb4:	2101      	movs	r1, #1
    6eb6:	0018      	movs	r0, r3
    6eb8:	4b05      	ldr	r3, [pc, #20]	; (6ed0 <at25dfx_chip_init+0x64>)
    6eba:	4798      	blx	r3

	return STATUS_OK;
    6ebc:	2300      	movs	r3, #0
}
    6ebe:	0018      	movs	r0, r3
    6ec0:	46bd      	mov	sp, r7
    6ec2:	b006      	add	sp, #24
    6ec4:	bd80      	pop	{r7, pc}
    6ec6:	46c0      	nop			; (mov r8, r8)
    6ec8:	00006d01 	.word	0x00006d01
    6ecc:	00003b19 	.word	0x00003b19
    6ed0:	00006d25 	.word	0x00006d25

00006ed4 <usart_is_syncing>:
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b084      	sub	sp, #16
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	681b      	ldr	r3, [r3, #0]
    6ee0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    6ee2:	68fb      	ldr	r3, [r7, #12]
    6ee4:	69db      	ldr	r3, [r3, #28]
    6ee6:	1e5a      	subs	r2, r3, #1
    6ee8:	4193      	sbcs	r3, r2
    6eea:	b2db      	uxtb	r3, r3
}
    6eec:	0018      	movs	r0, r3
    6eee:	46bd      	mov	sp, r7
    6ef0:	b004      	add	sp, #16
    6ef2:	bd80      	pop	{r7, pc}

00006ef4 <_usart_wait_for_sync>:
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b082      	sub	sp, #8
    6ef8:	af00      	add	r7, sp, #0
    6efa:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6efc:	46c0      	nop			; (mov r8, r8)
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	0018      	movs	r0, r3
    6f02:	4b04      	ldr	r3, [pc, #16]	; (6f14 <_usart_wait_for_sync+0x20>)
    6f04:	4798      	blx	r3
    6f06:	1e03      	subs	r3, r0, #0
    6f08:	d1f9      	bne.n	6efe <_usart_wait_for_sync+0xa>
}
    6f0a:	46c0      	nop			; (mov r8, r8)
    6f0c:	46bd      	mov	sp, r7
    6f0e:	b002      	add	sp, #8
    6f10:	bd80      	pop	{r7, pc}
    6f12:	46c0      	nop			; (mov r8, r8)
    6f14:	00006ed5 	.word	0x00006ed5

00006f18 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b082      	sub	sp, #8
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	2280      	movs	r2, #128	; 0x80
    6f24:	05d2      	lsls	r2, r2, #23
    6f26:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	2200      	movs	r2, #0
    6f2c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    6f2e:	687b      	ldr	r3, [r7, #4]
    6f30:	22ff      	movs	r2, #255	; 0xff
    6f32:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    6f34:	687b      	ldr	r3, [r7, #4]
    6f36:	2200      	movs	r2, #0
    6f38:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	2200      	movs	r2, #0
    6f3e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	2296      	movs	r2, #150	; 0x96
    6f44:	0192      	lsls	r2, r2, #6
    6f46:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	2224      	movs	r2, #36	; 0x24
    6f4c:	2101      	movs	r1, #1
    6f4e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	2225      	movs	r2, #37	; 0x25
    6f54:	2101      	movs	r1, #1
    6f56:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	2226      	movs	r2, #38	; 0x26
    6f5c:	2100      	movs	r1, #0
    6f5e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	2227      	movs	r2, #39	; 0x27
    6f64:	2100      	movs	r1, #0
    6f66:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	2200      	movs	r2, #0
    6f6c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	2288      	movs	r2, #136	; 0x88
    6f72:	0352      	lsls	r2, r2, #13
    6f74:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	222c      	movs	r2, #44	; 0x2c
    6f7a:	2100      	movs	r1, #0
    6f7c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    6f7e:	687b      	ldr	r3, [r7, #4]
    6f80:	222d      	movs	r2, #45	; 0x2d
    6f82:	2100      	movs	r1, #0
    6f84:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	2200      	movs	r2, #0
    6f8a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	2200      	movs	r2, #0
    6f90:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	2200      	movs	r2, #0
    6f96:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	2200      	movs	r2, #0
    6f9c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	2200      	movs	r2, #0
    6fa2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	2200      	movs	r2, #0
    6fa8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	2200      	movs	r2, #0
    6fae:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6fb0:	687b      	ldr	r3, [r7, #4]
    6fb2:	2200      	movs	r2, #0
    6fb4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6fb6:	687b      	ldr	r3, [r7, #4]
    6fb8:	2200      	movs	r2, #0
    6fba:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	2200      	movs	r2, #0
    6fc0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	2213      	movs	r2, #19
    6fc6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	2200      	movs	r2, #0
    6fcc:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    6fce:	46c0      	nop			; (mov r8, r8)
    6fd0:	46bd      	mov	sp, r7
    6fd2:	b002      	add	sp, #8
    6fd4:	bd80      	pop	{r7, pc}
	...

00006fd8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b084      	sub	sp, #16
    6fdc:	af00      	add	r7, sp, #0
    6fde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	681b      	ldr	r3, [r3, #0]
    6fe4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	681b      	ldr	r3, [r3, #0]
    6fea:	0018      	movs	r0, r3
    6fec:	4b09      	ldr	r3, [pc, #36]	; (7014 <usart_enable+0x3c>)
    6fee:	4798      	blx	r3
    6ff0:	0003      	movs	r3, r0
    6ff2:	0018      	movs	r0, r3
    6ff4:	4b08      	ldr	r3, [pc, #32]	; (7018 <usart_enable+0x40>)
    6ff6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	0018      	movs	r0, r3
    6ffc:	4b07      	ldr	r3, [pc, #28]	; (701c <usart_enable+0x44>)
    6ffe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7000:	68fb      	ldr	r3, [r7, #12]
    7002:	681b      	ldr	r3, [r3, #0]
    7004:	2202      	movs	r2, #2
    7006:	431a      	orrs	r2, r3
    7008:	68fb      	ldr	r3, [r7, #12]
    700a:	601a      	str	r2, [r3, #0]
}
    700c:	46c0      	nop			; (mov r8, r8)
    700e:	46bd      	mov	sp, r7
    7010:	b004      	add	sp, #16
    7012:	bd80      	pop	{r7, pc}
    7014:	000041c5 	.word	0x000041c5
    7018:	00006ae9 	.word	0x00006ae9
    701c:	00006ef5 	.word	0x00006ef5

00007020 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7020:	b580      	push	{r7, lr}
    7022:	b084      	sub	sp, #16
    7024:	af00      	add	r7, sp, #0
    7026:	60f8      	str	r0, [r7, #12]
    7028:	60b9      	str	r1, [r7, #8]
    702a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    702c:	687a      	ldr	r2, [r7, #4]
    702e:	68b9      	ldr	r1, [r7, #8]
    7030:	68fb      	ldr	r3, [r7, #12]
    7032:	0018      	movs	r0, r3
    7034:	4b05      	ldr	r3, [pc, #20]	; (704c <usart_serial_init+0x2c>)
    7036:	4798      	blx	r3
    7038:	1e03      	subs	r3, r0, #0
    703a:	d101      	bne.n	7040 <usart_serial_init+0x20>
		return true;
    703c:	2301      	movs	r3, #1
    703e:	e000      	b.n	7042 <usart_serial_init+0x22>
	}
	else {
		return false;
    7040:	2300      	movs	r3, #0
	}
}
    7042:	0018      	movs	r0, r3
    7044:	46bd      	mov	sp, r7
    7046:	b004      	add	sp, #16
    7048:	bd80      	pop	{r7, pc}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	0000513d 	.word	0x0000513d

00007050 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    7050:	b580      	push	{r7, lr}
    7052:	b082      	sub	sp, #8
    7054:	af00      	add	r7, sp, #0
    7056:	6078      	str	r0, [r7, #4]
    7058:	000a      	movs	r2, r1
    705a:	1cfb      	adds	r3, r7, #3
    705c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    705e:	46c0      	nop			; (mov r8, r8)
    7060:	1cfb      	adds	r3, r7, #3
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	b29a      	uxth	r2, r3
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	0011      	movs	r1, r2
    706a:	0018      	movs	r0, r3
    706c:	4b04      	ldr	r3, [pc, #16]	; (7080 <usart_serial_putchar+0x30>)
    706e:	4798      	blx	r3
    7070:	1e03      	subs	r3, r0, #0
    7072:	d1f5      	bne.n	7060 <usart_serial_putchar+0x10>

	return STATUS_OK;
    7074:	2300      	movs	r3, #0
}
    7076:	0018      	movs	r0, r3
    7078:	46bd      	mov	sp, r7
    707a:	b002      	add	sp, #8
    707c:	bd80      	pop	{r7, pc}
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	000053b1 	.word	0x000053b1

00007084 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7084:	b580      	push	{r7, lr}
    7086:	b084      	sub	sp, #16
    7088:	af00      	add	r7, sp, #0
    708a:	6078      	str	r0, [r7, #4]
    708c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    708e:	230e      	movs	r3, #14
    7090:	18fb      	adds	r3, r7, r3
    7092:	2200      	movs	r2, #0
    7094:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	230e      	movs	r3, #14
    709a:	18fa      	adds	r2, r7, r3
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	0011      	movs	r1, r2
    70a0:	0018      	movs	r0, r3
    70a2:	4b07      	ldr	r3, [pc, #28]	; (70c0 <usart_serial_getchar+0x3c>)
    70a4:	4798      	blx	r3
    70a6:	1e03      	subs	r3, r0, #0
    70a8:	d1f6      	bne.n	7098 <usart_serial_getchar+0x14>

	*c = temp;
    70aa:	230e      	movs	r3, #14
    70ac:	18fb      	adds	r3, r7, r3
    70ae:	881b      	ldrh	r3, [r3, #0]
    70b0:	b2da      	uxtb	r2, r3
    70b2:	683b      	ldr	r3, [r7, #0]
    70b4:	701a      	strb	r2, [r3, #0]
}
    70b6:	46c0      	nop			; (mov r8, r8)
    70b8:	46bd      	mov	sp, r7
    70ba:	b004      	add	sp, #16
    70bc:	bd80      	pop	{r7, pc}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	00005415 	.word	0x00005415

000070c4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    70c4:	b580      	push	{r7, lr}
    70c6:	b084      	sub	sp, #16
    70c8:	af00      	add	r7, sp, #0
    70ca:	60f8      	str	r0, [r7, #12]
    70cc:	60b9      	str	r1, [r7, #8]
    70ce:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    70d0:	4b10      	ldr	r3, [pc, #64]	; (7114 <stdio_serial_init+0x50>)
    70d2:	68fa      	ldr	r2, [r7, #12]
    70d4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    70d6:	4b10      	ldr	r3, [pc, #64]	; (7118 <stdio_serial_init+0x54>)
    70d8:	4a10      	ldr	r2, [pc, #64]	; (711c <stdio_serial_init+0x58>)
    70da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    70dc:	4b10      	ldr	r3, [pc, #64]	; (7120 <stdio_serial_init+0x5c>)
    70de:	4a11      	ldr	r2, [pc, #68]	; (7124 <stdio_serial_init+0x60>)
    70e0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    70e2:	687a      	ldr	r2, [r7, #4]
    70e4:	68b9      	ldr	r1, [r7, #8]
    70e6:	68fb      	ldr	r3, [r7, #12]
    70e8:	0018      	movs	r0, r3
    70ea:	4b0f      	ldr	r3, [pc, #60]	; (7128 <stdio_serial_init+0x64>)
    70ec:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    70ee:	4b0f      	ldr	r3, [pc, #60]	; (712c <stdio_serial_init+0x68>)
    70f0:	681b      	ldr	r3, [r3, #0]
    70f2:	689b      	ldr	r3, [r3, #8]
    70f4:	2100      	movs	r1, #0
    70f6:	0018      	movs	r0, r3
    70f8:	4b0d      	ldr	r3, [pc, #52]	; (7130 <stdio_serial_init+0x6c>)
    70fa:	4798      	blx	r3
	setbuf(stdin, NULL);
    70fc:	4b0b      	ldr	r3, [pc, #44]	; (712c <stdio_serial_init+0x68>)
    70fe:	681b      	ldr	r3, [r3, #0]
    7100:	685b      	ldr	r3, [r3, #4]
    7102:	2100      	movs	r1, #0
    7104:	0018      	movs	r0, r3
    7106:	4b0a      	ldr	r3, [pc, #40]	; (7130 <stdio_serial_init+0x6c>)
    7108:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    710a:	46c0      	nop			; (mov r8, r8)
    710c:	46bd      	mov	sp, r7
    710e:	b004      	add	sp, #16
    7110:	bd80      	pop	{r7, pc}
    7112:	46c0      	nop			; (mov r8, r8)
    7114:	200003e4 	.word	0x200003e4
    7118:	200003e0 	.word	0x200003e0
    711c:	00007051 	.word	0x00007051
    7120:	200003dc 	.word	0x200003dc
    7124:	00007085 	.word	0x00007085
    7128:	00007021 	.word	0x00007021
    712c:	20000068 	.word	0x20000068
    7130:	000091f1 	.word	0x000091f1

00007134 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    7134:	b580      	push	{r7, lr}
    7136:	b090      	sub	sp, #64	; 0x40
    7138:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    713a:	003b      	movs	r3, r7
    713c:	0018      	movs	r0, r3
    713e:	4b13      	ldr	r3, [pc, #76]	; (718c <configure_console+0x58>)
    7140:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    7142:	003b      	movs	r3, r7
    7144:	22c4      	movs	r2, #196	; 0xc4
    7146:	0392      	lsls	r2, r2, #14
    7148:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    714a:	003b      	movs	r3, r7
    714c:	2201      	movs	r2, #1
    714e:	4252      	negs	r2, r2
    7150:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    7152:	003b      	movs	r3, r7
    7154:	2201      	movs	r2, #1
    7156:	4252      	negs	r2, r2
    7158:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    715a:	003b      	movs	r3, r7
    715c:	4a0c      	ldr	r2, [pc, #48]	; (7190 <configure_console+0x5c>)
    715e:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    7160:	003b      	movs	r3, r7
    7162:	4a0c      	ldr	r2, [pc, #48]	; (7194 <configure_console+0x60>)
    7164:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    7166:	003b      	movs	r3, r7
    7168:	22e1      	movs	r2, #225	; 0xe1
    716a:	0252      	lsls	r2, r2, #9
    716c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    716e:	003a      	movs	r2, r7
    7170:	4909      	ldr	r1, [pc, #36]	; (7198 <configure_console+0x64>)
    7172:	4b0a      	ldr	r3, [pc, #40]	; (719c <configure_console+0x68>)
    7174:	0018      	movs	r0, r3
    7176:	4b0a      	ldr	r3, [pc, #40]	; (71a0 <configure_console+0x6c>)
    7178:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    717a:	4b08      	ldr	r3, [pc, #32]	; (719c <configure_console+0x68>)
    717c:	0018      	movs	r0, r3
    717e:	4b09      	ldr	r3, [pc, #36]	; (71a4 <configure_console+0x70>)
    7180:	4798      	blx	r3
}
    7182:	46c0      	nop			; (mov r8, r8)
    7184:	46bd      	mov	sp, r7
    7186:	b010      	add	sp, #64	; 0x40
    7188:	bd80      	pop	{r7, pc}
    718a:	46c0      	nop			; (mov r8, r8)
    718c:	00006f19 	.word	0x00006f19
    7190:	002a0003 	.word	0x002a0003
    7194:	002b0003 	.word	0x002b0003
    7198:	42001800 	.word	0x42001800
    719c:	200002a0 	.word	0x200002a0
    71a0:	000070c5 	.word	0x000070c5
    71a4:	00006fd9 	.word	0x00006fd9

000071a8 <configure_gpio>:

static void configure_gpio(void)
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b082      	sub	sp, #8
    71ac:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    71ae:	1d3b      	adds	r3, r7, #4
    71b0:	0018      	movs	r0, r3
    71b2:	4b07      	ldr	r3, [pc, #28]	; (71d0 <configure_gpio+0x28>)
    71b4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    71b6:	1d3b      	adds	r3, r7, #4
    71b8:	2201      	movs	r2, #1
    71ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    71bc:	1d3b      	adds	r3, r7, #4
    71be:	0019      	movs	r1, r3
    71c0:	2022      	movs	r0, #34	; 0x22
    71c2:	4b04      	ldr	r3, [pc, #16]	; (71d4 <configure_gpio+0x2c>)
    71c4:	4798      	blx	r3
}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	46bd      	mov	sp, r7
    71ca:	b002      	add	sp, #8
    71cc:	bd80      	pop	{r7, pc}
    71ce:	46c0      	nop			; (mov r8, r8)
    71d0:	00006d01 	.word	0x00006d01
    71d4:	00003b19 	.word	0x00003b19

000071d8 <configure_ftdi_reset>:

static void configure_ftdi_reset(void)
{
    71d8:	b580      	push	{r7, lr}
    71da:	b082      	sub	sp, #8
    71dc:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    71de:	1d3b      	adds	r3, r7, #4
    71e0:	0018      	movs	r0, r3
    71e2:	4b09      	ldr	r3, [pc, #36]	; (7208 <configure_ftdi_reset+0x30>)
    71e4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    71e6:	1d3b      	adds	r3, r7, #4
    71e8:	2201      	movs	r2, #1
    71ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB22, &config_port_pin);
    71ec:	1d3b      	adds	r3, r7, #4
    71ee:	0019      	movs	r1, r3
    71f0:	2036      	movs	r0, #54	; 0x36
    71f2:	4b06      	ldr	r3, [pc, #24]	; (720c <configure_ftdi_reset+0x34>)
    71f4:	4798      	blx	r3
	
	port_pin_set_output_level(PIN_PB22, true);
    71f6:	2101      	movs	r1, #1
    71f8:	2036      	movs	r0, #54	; 0x36
    71fa:	4b05      	ldr	r3, [pc, #20]	; (7210 <configure_ftdi_reset+0x38>)
    71fc:	4798      	blx	r3
}
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	46bd      	mov	sp, r7
    7202:	b002      	add	sp, #8
    7204:	bd80      	pop	{r7, pc}
    7206:	46c0      	nop			; (mov r8, r8)
    7208:	00006d01 	.word	0x00006d01
    720c:	00003b19 	.word	0x00003b19
    7210:	00006d25 	.word	0x00006d25

00007214 <configure_i2c>:

static void configure_i2c(void)
{
    7214:	b580      	push	{r7, lr}
    7216:	b08e      	sub	sp, #56	; 0x38
    7218:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    721a:	1d3b      	adds	r3, r7, #4
    721c:	0018      	movs	r0, r3
    721e:	4b10      	ldr	r3, [pc, #64]	; (7260 <configure_i2c+0x4c>)
    7220:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
    7222:	1d3b      	adds	r3, r7, #4
    7224:	2201      	movs	r2, #1
    7226:	4252      	negs	r2, r2
    7228:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0       = PINMUX_PA08C_SERCOM0_PAD0;
    722a:	1d3b      	adds	r3, r7, #4
    722c:	4a0d      	ldr	r2, [pc, #52]	; (7264 <configure_i2c+0x50>)
    722e:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09C_SERCOM0_PAD1;
    7230:	1d3b      	adds	r3, r7, #4
    7232:	4a0d      	ldr	r2, [pc, #52]	; (7268 <configure_i2c+0x54>)
    7234:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
    7236:	1d3b      	adds	r3, r7, #4
    7238:	2200      	movs	r2, #0
    723a:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM0, &config_i2c_master) != STATUS_OK);
    723c:	46c0      	nop			; (mov r8, r8)
    723e:	1d3a      	adds	r2, r7, #4
    7240:	490a      	ldr	r1, [pc, #40]	; (726c <configure_i2c+0x58>)
    7242:	4b0b      	ldr	r3, [pc, #44]	; (7270 <configure_i2c+0x5c>)
    7244:	0018      	movs	r0, r3
    7246:	4b0b      	ldr	r3, [pc, #44]	; (7274 <configure_i2c+0x60>)
    7248:	4798      	blx	r3
    724a:	1e03      	subs	r3, r0, #0
    724c:	d1f7      	bne.n	723e <configure_i2c+0x2a>
	i2c_master_enable(&i2c_master_instance);
    724e:	4b08      	ldr	r3, [pc, #32]	; (7270 <configure_i2c+0x5c>)
    7250:	0018      	movs	r0, r3
    7252:	4b09      	ldr	r3, [pc, #36]	; (7278 <configure_i2c+0x64>)
    7254:	4798      	blx	r3
}
    7256:	46c0      	nop			; (mov r8, r8)
    7258:	46bd      	mov	sp, r7
    725a:	b00e      	add	sp, #56	; 0x38
    725c:	bd80      	pop	{r7, pc}
    725e:	46c0      	nop			; (mov r8, r8)
    7260:	00006be5 	.word	0x00006be5
    7264:	00080002 	.word	0x00080002
    7268:	00090002 	.word	0x00090002
    726c:	42000800 	.word	0x42000800
    7270:	200003f0 	.word	0x200003f0
    7274:	000014cd 	.word	0x000014cd
    7278:	00006c69 	.word	0x00006c69

0000727c <configure_adc>:

static void configure_adc(void)
{
    727c:	b580      	push	{r7, lr}
    727e:	b08c      	sub	sp, #48	; 0x30
    7280:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    7282:	003b      	movs	r3, r7
    7284:	0018      	movs	r0, r3
    7286:	4b0e      	ldr	r3, [pc, #56]	; (72c0 <configure_adc+0x44>)
    7288:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    728a:	003b      	movs	r3, r7
    728c:	2201      	movs	r2, #1
    728e:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    7290:	003b      	movs	r3, r7
    7292:	2202      	movs	r2, #2
    7294:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    7296:	003b      	movs	r3, r7
    7298:	2280      	movs	r2, #128	; 0x80
    729a:	0092      	lsls	r2, r2, #2
    729c:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    729e:	003b      	movs	r3, r7
    72a0:	2200      	movs	r2, #0
    72a2:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    72a4:	003a      	movs	r2, r7
    72a6:	4907      	ldr	r1, [pc, #28]	; (72c4 <configure_adc+0x48>)
    72a8:	4b07      	ldr	r3, [pc, #28]	; (72c8 <configure_adc+0x4c>)
    72aa:	0018      	movs	r0, r3
    72ac:	4b07      	ldr	r3, [pc, #28]	; (72cc <configure_adc+0x50>)
    72ae:	4798      	blx	r3
	adc_enable(&adc_inst);
    72b0:	4b05      	ldr	r3, [pc, #20]	; (72c8 <configure_adc+0x4c>)
    72b2:	0018      	movs	r0, r3
    72b4:	4b06      	ldr	r3, [pc, #24]	; (72d0 <configure_adc+0x54>)
    72b6:	4798      	blx	r3
}
    72b8:	46c0      	nop			; (mov r8, r8)
    72ba:	46bd      	mov	sp, r7
    72bc:	b00c      	add	sp, #48	; 0x30
    72be:	bd80      	pop	{r7, pc}
    72c0:	00000699 	.word	0x00000699
    72c4:	42004000 	.word	0x42004000
    72c8:	20000454 	.word	0x20000454
    72cc:	00000ce9 	.word	0x00000ce9
    72d0:	00006b3d 	.word	0x00006b3d

000072d4 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    72d4:	b590      	push	{r4, r7, lr}
    72d6:	b091      	sub	sp, #68	; 0x44
    72d8:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    72da:	1d3b      	adds	r3, r7, #4
    72dc:	0018      	movs	r0, r3
    72de:	4b1d      	ldr	r3, [pc, #116]	; (7354 <at25dfx_init+0x80>)
    72e0:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    72e2:	1d3b      	adds	r3, r7, #4
    72e4:	4a1c      	ldr	r2, [pc, #112]	; (7358 <at25dfx_init+0x84>)
    72e6:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    72e8:	1d3b      	adds	r3, r7, #4
    72ea:	2280      	movs	r2, #128	; 0x80
    72ec:	0252      	lsls	r2, r2, #9
    72ee:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    72f0:	1d3b      	adds	r3, r7, #4
    72f2:	4a1a      	ldr	r2, [pc, #104]	; (735c <at25dfx_init+0x88>)
    72f4:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    72f6:	1d3b      	adds	r3, r7, #4
    72f8:	2201      	movs	r2, #1
    72fa:	4252      	negs	r2, r2
    72fc:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    72fe:	1d3b      	adds	r3, r7, #4
    7300:	4a17      	ldr	r2, [pc, #92]	; (7360 <at25dfx_init+0x8c>)
    7302:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    7304:	1d3b      	adds	r3, r7, #4
    7306:	4a17      	ldr	r2, [pc, #92]	; (7364 <at25dfx_init+0x90>)
    7308:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    730a:	233f      	movs	r3, #63	; 0x3f
    730c:	18fc      	adds	r4, r7, r3
    730e:	1d3a      	adds	r2, r7, #4
    7310:	4915      	ldr	r1, [pc, #84]	; (7368 <at25dfx_init+0x94>)
    7312:	4b16      	ldr	r3, [pc, #88]	; (736c <at25dfx_init+0x98>)
    7314:	0018      	movs	r0, r3
    7316:	4b16      	ldr	r3, [pc, #88]	; (7370 <at25dfx_init+0x9c>)
    7318:	4798      	blx	r3
    731a:	0003      	movs	r3, r0
    731c:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    731e:	4b13      	ldr	r3, [pc, #76]	; (736c <at25dfx_init+0x98>)
    7320:	0018      	movs	r0, r3
    7322:	4b14      	ldr	r3, [pc, #80]	; (7374 <at25dfx_init+0xa0>)
    7324:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    7326:	233c      	movs	r3, #60	; 0x3c
    7328:	18fb      	adds	r3, r7, r3
    732a:	2204      	movs	r2, #4
    732c:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PINMUX_PA17C_SERCOM1_PAD1; // AT25DFX_CS;
    732e:	233c      	movs	r3, #60	; 0x3c
    7330:	18fb      	adds	r3, r7, r3
    7332:	2202      	movs	r2, #2
    7334:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    7336:	233f      	movs	r3, #63	; 0x3f
    7338:	18fc      	adds	r4, r7, r3
    733a:	233c      	movs	r3, #60	; 0x3c
    733c:	18fa      	adds	r2, r7, r3
    733e:	490b      	ldr	r1, [pc, #44]	; (736c <at25dfx_init+0x98>)
    7340:	4b0d      	ldr	r3, [pc, #52]	; (7378 <at25dfx_init+0xa4>)
    7342:	0018      	movs	r0, r3
    7344:	4b0d      	ldr	r3, [pc, #52]	; (737c <at25dfx_init+0xa8>)
    7346:	4798      	blx	r3
    7348:	0003      	movs	r3, r0
    734a:	7023      	strb	r3, [r4, #0]
}
    734c:	46c0      	nop			; (mov r8, r8)
    734e:	46bd      	mov	sp, r7
    7350:	b011      	add	sp, #68	; 0x44
    7352:	bd90      	pop	{r4, r7, pc}
    7354:	00006d99 	.word	0x00006d99
    7358:	0001d4c0 	.word	0x0001d4c0
    735c:	00100002 	.word	0x00100002
    7360:	00120002 	.word	0x00120002
    7364:	00130002 	.word	0x00130002
    7368:	42000c00 	.word	0x42000c00
    736c:	20000418 	.word	0x20000418
    7370:	000046ad 	.word	0x000046ad
    7374:	00006e1d 	.word	0x00006e1d
    7378:	200003e8 	.word	0x200003e8
    737c:	00006e6d 	.word	0x00006e6d

00007380 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    7380:	b580      	push	{r7, lr}
    7382:	b0c6      	sub	sp, #280	; 0x118
    7384:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    7386:	4b17      	ldr	r3, [pc, #92]	; (73e4 <main+0x64>)
    7388:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    738a:	4b17      	ldr	r3, [pc, #92]	; (73e8 <main+0x68>)
    738c:	4798      	blx	r3
	printf(STRING_HEADER);
    738e:	4b17      	ldr	r3, [pc, #92]	; (73ec <main+0x6c>)
    7390:	0018      	movs	r0, r3
    7392:	4b17      	ldr	r3, [pc, #92]	; (73f0 <main+0x70>)
    7394:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    7396:	4b17      	ldr	r3, [pc, #92]	; (73f4 <main+0x74>)
    7398:	4798      	blx	r3
	
	/* Init the GPIO & ADC */
	configure_gpio();
    739a:	4b17      	ldr	r3, [pc, #92]	; (73f8 <main+0x78>)
    739c:	4798      	blx	r3
	configure_adc();
    739e:	4b17      	ldr	r3, [pc, #92]	; (73fc <main+0x7c>)
    73a0:	4798      	blx	r3
	configure_i2c();
    73a2:	4b17      	ldr	r3, [pc, #92]	; (7400 <main+0x80>)
    73a4:	4798      	blx	r3
	
	configure_ftdi_reset();
    73a6:	4b17      	ldr	r3, [pc, #92]	; (7404 <main+0x84>)
    73a8:	4798      	blx	r3
	
	at25dfx_init();
    73aa:	4b17      	ldr	r3, [pc, #92]	; (7408 <main+0x88>)
    73ac:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
    73ae:	4b17      	ldr	r3, [pc, #92]	; (740c <main+0x8c>)
    73b0:	0018      	movs	r0, r3
    73b2:	4b17      	ldr	r3, [pc, #92]	; (7410 <main+0x90>)
    73b4:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
	at25dfx_chip_sleep(&at25dfx_chip);
	*/
	
	handle_i2c_scan();
    73b6:	4b17      	ldr	r3, [pc, #92]	; (7414 <main+0x94>)
    73b8:	4798      	blx	r3
	
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    73ba:	4b17      	ldr	r3, [pc, #92]	; (7418 <main+0x98>)
    73bc:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    73be:	4b17      	ldr	r3, [pc, #92]	; (741c <main+0x9c>)
    73c0:	0018      	movs	r0, r3
    73c2:	4b0b      	ldr	r3, [pc, #44]	; (73f0 <main+0x70>)
    73c4:	4798      	blx	r3
	while (1) {
		printf("> ");
    73c6:	4b16      	ldr	r3, [pc, #88]	; (7420 <main+0xa0>)
    73c8:	0018      	movs	r0, r3
    73ca:	4b16      	ldr	r3, [pc, #88]	; (7424 <main+0xa4>)
    73cc:	4798      	blx	r3
		scanf("%[^\r\n]%*c", input);
    73ce:	003a      	movs	r2, r7
    73d0:	4b15      	ldr	r3, [pc, #84]	; (7428 <main+0xa8>)
    73d2:	0011      	movs	r1, r2
    73d4:	0018      	movs	r0, r3
    73d6:	4b15      	ldr	r3, [pc, #84]	; (742c <main+0xac>)
    73d8:	4798      	blx	r3
		handle_user_input(input);
    73da:	003b      	movs	r3, r7
    73dc:	0018      	movs	r0, r3
    73de:	4b14      	ldr	r3, [pc, #80]	; (7430 <main+0xb0>)
    73e0:	4798      	blx	r3
		printf("> ");
    73e2:	e7f0      	b.n	73c6 <main+0x46>
    73e4:	00006801 	.word	0x00006801
    73e8:	00007135 	.word	0x00007135
    73ec:	0000b5a8 	.word	0x0000b5a8
    73f0:	000091a9 	.word	0x000091a9
    73f4:	000034f5 	.word	0x000034f5
    73f8:	000071a9 	.word	0x000071a9
    73fc:	0000727d 	.word	0x0000727d
    7400:	00007215 	.word	0x00007215
    7404:	000071d9 	.word	0x000071d9
    7408:	000072d5 	.word	0x000072d5
    740c:	200003e8 	.word	0x200003e8
    7410:	00000509 	.word	0x00000509
    7414:	000031f1 	.word	0x000031f1
    7418:	0000249d 	.word	0x0000249d
    741c:	0000b614 	.word	0x0000b614
    7420:	0000b634 	.word	0x0000b634
    7424:	000090b5 	.word	0x000090b5
    7428:	0000b638 	.word	0x0000b638
    742c:	000091bd 	.word	0x000091bd
    7430:	000026d9 	.word	0x000026d9

00007434 <__udivsi3>:
    7434:	2200      	movs	r2, #0
    7436:	0843      	lsrs	r3, r0, #1
    7438:	428b      	cmp	r3, r1
    743a:	d374      	bcc.n	7526 <__udivsi3+0xf2>
    743c:	0903      	lsrs	r3, r0, #4
    743e:	428b      	cmp	r3, r1
    7440:	d35f      	bcc.n	7502 <__udivsi3+0xce>
    7442:	0a03      	lsrs	r3, r0, #8
    7444:	428b      	cmp	r3, r1
    7446:	d344      	bcc.n	74d2 <__udivsi3+0x9e>
    7448:	0b03      	lsrs	r3, r0, #12
    744a:	428b      	cmp	r3, r1
    744c:	d328      	bcc.n	74a0 <__udivsi3+0x6c>
    744e:	0c03      	lsrs	r3, r0, #16
    7450:	428b      	cmp	r3, r1
    7452:	d30d      	bcc.n	7470 <__udivsi3+0x3c>
    7454:	22ff      	movs	r2, #255	; 0xff
    7456:	0209      	lsls	r1, r1, #8
    7458:	ba12      	rev	r2, r2
    745a:	0c03      	lsrs	r3, r0, #16
    745c:	428b      	cmp	r3, r1
    745e:	d302      	bcc.n	7466 <__udivsi3+0x32>
    7460:	1212      	asrs	r2, r2, #8
    7462:	0209      	lsls	r1, r1, #8
    7464:	d065      	beq.n	7532 <__udivsi3+0xfe>
    7466:	0b03      	lsrs	r3, r0, #12
    7468:	428b      	cmp	r3, r1
    746a:	d319      	bcc.n	74a0 <__udivsi3+0x6c>
    746c:	e000      	b.n	7470 <__udivsi3+0x3c>
    746e:	0a09      	lsrs	r1, r1, #8
    7470:	0bc3      	lsrs	r3, r0, #15
    7472:	428b      	cmp	r3, r1
    7474:	d301      	bcc.n	747a <__udivsi3+0x46>
    7476:	03cb      	lsls	r3, r1, #15
    7478:	1ac0      	subs	r0, r0, r3
    747a:	4152      	adcs	r2, r2
    747c:	0b83      	lsrs	r3, r0, #14
    747e:	428b      	cmp	r3, r1
    7480:	d301      	bcc.n	7486 <__udivsi3+0x52>
    7482:	038b      	lsls	r3, r1, #14
    7484:	1ac0      	subs	r0, r0, r3
    7486:	4152      	adcs	r2, r2
    7488:	0b43      	lsrs	r3, r0, #13
    748a:	428b      	cmp	r3, r1
    748c:	d301      	bcc.n	7492 <__udivsi3+0x5e>
    748e:	034b      	lsls	r3, r1, #13
    7490:	1ac0      	subs	r0, r0, r3
    7492:	4152      	adcs	r2, r2
    7494:	0b03      	lsrs	r3, r0, #12
    7496:	428b      	cmp	r3, r1
    7498:	d301      	bcc.n	749e <__udivsi3+0x6a>
    749a:	030b      	lsls	r3, r1, #12
    749c:	1ac0      	subs	r0, r0, r3
    749e:	4152      	adcs	r2, r2
    74a0:	0ac3      	lsrs	r3, r0, #11
    74a2:	428b      	cmp	r3, r1
    74a4:	d301      	bcc.n	74aa <__udivsi3+0x76>
    74a6:	02cb      	lsls	r3, r1, #11
    74a8:	1ac0      	subs	r0, r0, r3
    74aa:	4152      	adcs	r2, r2
    74ac:	0a83      	lsrs	r3, r0, #10
    74ae:	428b      	cmp	r3, r1
    74b0:	d301      	bcc.n	74b6 <__udivsi3+0x82>
    74b2:	028b      	lsls	r3, r1, #10
    74b4:	1ac0      	subs	r0, r0, r3
    74b6:	4152      	adcs	r2, r2
    74b8:	0a43      	lsrs	r3, r0, #9
    74ba:	428b      	cmp	r3, r1
    74bc:	d301      	bcc.n	74c2 <__udivsi3+0x8e>
    74be:	024b      	lsls	r3, r1, #9
    74c0:	1ac0      	subs	r0, r0, r3
    74c2:	4152      	adcs	r2, r2
    74c4:	0a03      	lsrs	r3, r0, #8
    74c6:	428b      	cmp	r3, r1
    74c8:	d301      	bcc.n	74ce <__udivsi3+0x9a>
    74ca:	020b      	lsls	r3, r1, #8
    74cc:	1ac0      	subs	r0, r0, r3
    74ce:	4152      	adcs	r2, r2
    74d0:	d2cd      	bcs.n	746e <__udivsi3+0x3a>
    74d2:	09c3      	lsrs	r3, r0, #7
    74d4:	428b      	cmp	r3, r1
    74d6:	d301      	bcc.n	74dc <__udivsi3+0xa8>
    74d8:	01cb      	lsls	r3, r1, #7
    74da:	1ac0      	subs	r0, r0, r3
    74dc:	4152      	adcs	r2, r2
    74de:	0983      	lsrs	r3, r0, #6
    74e0:	428b      	cmp	r3, r1
    74e2:	d301      	bcc.n	74e8 <__udivsi3+0xb4>
    74e4:	018b      	lsls	r3, r1, #6
    74e6:	1ac0      	subs	r0, r0, r3
    74e8:	4152      	adcs	r2, r2
    74ea:	0943      	lsrs	r3, r0, #5
    74ec:	428b      	cmp	r3, r1
    74ee:	d301      	bcc.n	74f4 <__udivsi3+0xc0>
    74f0:	014b      	lsls	r3, r1, #5
    74f2:	1ac0      	subs	r0, r0, r3
    74f4:	4152      	adcs	r2, r2
    74f6:	0903      	lsrs	r3, r0, #4
    74f8:	428b      	cmp	r3, r1
    74fa:	d301      	bcc.n	7500 <__udivsi3+0xcc>
    74fc:	010b      	lsls	r3, r1, #4
    74fe:	1ac0      	subs	r0, r0, r3
    7500:	4152      	adcs	r2, r2
    7502:	08c3      	lsrs	r3, r0, #3
    7504:	428b      	cmp	r3, r1
    7506:	d301      	bcc.n	750c <__udivsi3+0xd8>
    7508:	00cb      	lsls	r3, r1, #3
    750a:	1ac0      	subs	r0, r0, r3
    750c:	4152      	adcs	r2, r2
    750e:	0883      	lsrs	r3, r0, #2
    7510:	428b      	cmp	r3, r1
    7512:	d301      	bcc.n	7518 <__udivsi3+0xe4>
    7514:	008b      	lsls	r3, r1, #2
    7516:	1ac0      	subs	r0, r0, r3
    7518:	4152      	adcs	r2, r2
    751a:	0843      	lsrs	r3, r0, #1
    751c:	428b      	cmp	r3, r1
    751e:	d301      	bcc.n	7524 <__udivsi3+0xf0>
    7520:	004b      	lsls	r3, r1, #1
    7522:	1ac0      	subs	r0, r0, r3
    7524:	4152      	adcs	r2, r2
    7526:	1a41      	subs	r1, r0, r1
    7528:	d200      	bcs.n	752c <__udivsi3+0xf8>
    752a:	4601      	mov	r1, r0
    752c:	4152      	adcs	r2, r2
    752e:	4610      	mov	r0, r2
    7530:	4770      	bx	lr
    7532:	e7ff      	b.n	7534 <__udivsi3+0x100>
    7534:	b501      	push	{r0, lr}
    7536:	2000      	movs	r0, #0
    7538:	f000 f8f0 	bl	771c <__aeabi_idiv0>
    753c:	bd02      	pop	{r1, pc}
    753e:	46c0      	nop			; (mov r8, r8)

00007540 <__aeabi_uidivmod>:
    7540:	2900      	cmp	r1, #0
    7542:	d0f7      	beq.n	7534 <__udivsi3+0x100>
    7544:	e776      	b.n	7434 <__udivsi3>
    7546:	4770      	bx	lr

00007548 <__divsi3>:
    7548:	4603      	mov	r3, r0
    754a:	430b      	orrs	r3, r1
    754c:	d47f      	bmi.n	764e <__divsi3+0x106>
    754e:	2200      	movs	r2, #0
    7550:	0843      	lsrs	r3, r0, #1
    7552:	428b      	cmp	r3, r1
    7554:	d374      	bcc.n	7640 <__divsi3+0xf8>
    7556:	0903      	lsrs	r3, r0, #4
    7558:	428b      	cmp	r3, r1
    755a:	d35f      	bcc.n	761c <__divsi3+0xd4>
    755c:	0a03      	lsrs	r3, r0, #8
    755e:	428b      	cmp	r3, r1
    7560:	d344      	bcc.n	75ec <__divsi3+0xa4>
    7562:	0b03      	lsrs	r3, r0, #12
    7564:	428b      	cmp	r3, r1
    7566:	d328      	bcc.n	75ba <__divsi3+0x72>
    7568:	0c03      	lsrs	r3, r0, #16
    756a:	428b      	cmp	r3, r1
    756c:	d30d      	bcc.n	758a <__divsi3+0x42>
    756e:	22ff      	movs	r2, #255	; 0xff
    7570:	0209      	lsls	r1, r1, #8
    7572:	ba12      	rev	r2, r2
    7574:	0c03      	lsrs	r3, r0, #16
    7576:	428b      	cmp	r3, r1
    7578:	d302      	bcc.n	7580 <__divsi3+0x38>
    757a:	1212      	asrs	r2, r2, #8
    757c:	0209      	lsls	r1, r1, #8
    757e:	d065      	beq.n	764c <__divsi3+0x104>
    7580:	0b03      	lsrs	r3, r0, #12
    7582:	428b      	cmp	r3, r1
    7584:	d319      	bcc.n	75ba <__divsi3+0x72>
    7586:	e000      	b.n	758a <__divsi3+0x42>
    7588:	0a09      	lsrs	r1, r1, #8
    758a:	0bc3      	lsrs	r3, r0, #15
    758c:	428b      	cmp	r3, r1
    758e:	d301      	bcc.n	7594 <__divsi3+0x4c>
    7590:	03cb      	lsls	r3, r1, #15
    7592:	1ac0      	subs	r0, r0, r3
    7594:	4152      	adcs	r2, r2
    7596:	0b83      	lsrs	r3, r0, #14
    7598:	428b      	cmp	r3, r1
    759a:	d301      	bcc.n	75a0 <__divsi3+0x58>
    759c:	038b      	lsls	r3, r1, #14
    759e:	1ac0      	subs	r0, r0, r3
    75a0:	4152      	adcs	r2, r2
    75a2:	0b43      	lsrs	r3, r0, #13
    75a4:	428b      	cmp	r3, r1
    75a6:	d301      	bcc.n	75ac <__divsi3+0x64>
    75a8:	034b      	lsls	r3, r1, #13
    75aa:	1ac0      	subs	r0, r0, r3
    75ac:	4152      	adcs	r2, r2
    75ae:	0b03      	lsrs	r3, r0, #12
    75b0:	428b      	cmp	r3, r1
    75b2:	d301      	bcc.n	75b8 <__divsi3+0x70>
    75b4:	030b      	lsls	r3, r1, #12
    75b6:	1ac0      	subs	r0, r0, r3
    75b8:	4152      	adcs	r2, r2
    75ba:	0ac3      	lsrs	r3, r0, #11
    75bc:	428b      	cmp	r3, r1
    75be:	d301      	bcc.n	75c4 <__divsi3+0x7c>
    75c0:	02cb      	lsls	r3, r1, #11
    75c2:	1ac0      	subs	r0, r0, r3
    75c4:	4152      	adcs	r2, r2
    75c6:	0a83      	lsrs	r3, r0, #10
    75c8:	428b      	cmp	r3, r1
    75ca:	d301      	bcc.n	75d0 <__divsi3+0x88>
    75cc:	028b      	lsls	r3, r1, #10
    75ce:	1ac0      	subs	r0, r0, r3
    75d0:	4152      	adcs	r2, r2
    75d2:	0a43      	lsrs	r3, r0, #9
    75d4:	428b      	cmp	r3, r1
    75d6:	d301      	bcc.n	75dc <__divsi3+0x94>
    75d8:	024b      	lsls	r3, r1, #9
    75da:	1ac0      	subs	r0, r0, r3
    75dc:	4152      	adcs	r2, r2
    75de:	0a03      	lsrs	r3, r0, #8
    75e0:	428b      	cmp	r3, r1
    75e2:	d301      	bcc.n	75e8 <__divsi3+0xa0>
    75e4:	020b      	lsls	r3, r1, #8
    75e6:	1ac0      	subs	r0, r0, r3
    75e8:	4152      	adcs	r2, r2
    75ea:	d2cd      	bcs.n	7588 <__divsi3+0x40>
    75ec:	09c3      	lsrs	r3, r0, #7
    75ee:	428b      	cmp	r3, r1
    75f0:	d301      	bcc.n	75f6 <__divsi3+0xae>
    75f2:	01cb      	lsls	r3, r1, #7
    75f4:	1ac0      	subs	r0, r0, r3
    75f6:	4152      	adcs	r2, r2
    75f8:	0983      	lsrs	r3, r0, #6
    75fa:	428b      	cmp	r3, r1
    75fc:	d301      	bcc.n	7602 <__divsi3+0xba>
    75fe:	018b      	lsls	r3, r1, #6
    7600:	1ac0      	subs	r0, r0, r3
    7602:	4152      	adcs	r2, r2
    7604:	0943      	lsrs	r3, r0, #5
    7606:	428b      	cmp	r3, r1
    7608:	d301      	bcc.n	760e <__divsi3+0xc6>
    760a:	014b      	lsls	r3, r1, #5
    760c:	1ac0      	subs	r0, r0, r3
    760e:	4152      	adcs	r2, r2
    7610:	0903      	lsrs	r3, r0, #4
    7612:	428b      	cmp	r3, r1
    7614:	d301      	bcc.n	761a <__divsi3+0xd2>
    7616:	010b      	lsls	r3, r1, #4
    7618:	1ac0      	subs	r0, r0, r3
    761a:	4152      	adcs	r2, r2
    761c:	08c3      	lsrs	r3, r0, #3
    761e:	428b      	cmp	r3, r1
    7620:	d301      	bcc.n	7626 <__divsi3+0xde>
    7622:	00cb      	lsls	r3, r1, #3
    7624:	1ac0      	subs	r0, r0, r3
    7626:	4152      	adcs	r2, r2
    7628:	0883      	lsrs	r3, r0, #2
    762a:	428b      	cmp	r3, r1
    762c:	d301      	bcc.n	7632 <__divsi3+0xea>
    762e:	008b      	lsls	r3, r1, #2
    7630:	1ac0      	subs	r0, r0, r3
    7632:	4152      	adcs	r2, r2
    7634:	0843      	lsrs	r3, r0, #1
    7636:	428b      	cmp	r3, r1
    7638:	d301      	bcc.n	763e <__divsi3+0xf6>
    763a:	004b      	lsls	r3, r1, #1
    763c:	1ac0      	subs	r0, r0, r3
    763e:	4152      	adcs	r2, r2
    7640:	1a41      	subs	r1, r0, r1
    7642:	d200      	bcs.n	7646 <__divsi3+0xfe>
    7644:	4601      	mov	r1, r0
    7646:	4152      	adcs	r2, r2
    7648:	4610      	mov	r0, r2
    764a:	4770      	bx	lr
    764c:	e05d      	b.n	770a <__divsi3+0x1c2>
    764e:	0fca      	lsrs	r2, r1, #31
    7650:	d000      	beq.n	7654 <__divsi3+0x10c>
    7652:	4249      	negs	r1, r1
    7654:	1003      	asrs	r3, r0, #32
    7656:	d300      	bcc.n	765a <__divsi3+0x112>
    7658:	4240      	negs	r0, r0
    765a:	4053      	eors	r3, r2
    765c:	2200      	movs	r2, #0
    765e:	469c      	mov	ip, r3
    7660:	0903      	lsrs	r3, r0, #4
    7662:	428b      	cmp	r3, r1
    7664:	d32d      	bcc.n	76c2 <__divsi3+0x17a>
    7666:	0a03      	lsrs	r3, r0, #8
    7668:	428b      	cmp	r3, r1
    766a:	d312      	bcc.n	7692 <__divsi3+0x14a>
    766c:	22fc      	movs	r2, #252	; 0xfc
    766e:	0189      	lsls	r1, r1, #6
    7670:	ba12      	rev	r2, r2
    7672:	0a03      	lsrs	r3, r0, #8
    7674:	428b      	cmp	r3, r1
    7676:	d30c      	bcc.n	7692 <__divsi3+0x14a>
    7678:	0189      	lsls	r1, r1, #6
    767a:	1192      	asrs	r2, r2, #6
    767c:	428b      	cmp	r3, r1
    767e:	d308      	bcc.n	7692 <__divsi3+0x14a>
    7680:	0189      	lsls	r1, r1, #6
    7682:	1192      	asrs	r2, r2, #6
    7684:	428b      	cmp	r3, r1
    7686:	d304      	bcc.n	7692 <__divsi3+0x14a>
    7688:	0189      	lsls	r1, r1, #6
    768a:	d03a      	beq.n	7702 <__divsi3+0x1ba>
    768c:	1192      	asrs	r2, r2, #6
    768e:	e000      	b.n	7692 <__divsi3+0x14a>
    7690:	0989      	lsrs	r1, r1, #6
    7692:	09c3      	lsrs	r3, r0, #7
    7694:	428b      	cmp	r3, r1
    7696:	d301      	bcc.n	769c <__divsi3+0x154>
    7698:	01cb      	lsls	r3, r1, #7
    769a:	1ac0      	subs	r0, r0, r3
    769c:	4152      	adcs	r2, r2
    769e:	0983      	lsrs	r3, r0, #6
    76a0:	428b      	cmp	r3, r1
    76a2:	d301      	bcc.n	76a8 <__divsi3+0x160>
    76a4:	018b      	lsls	r3, r1, #6
    76a6:	1ac0      	subs	r0, r0, r3
    76a8:	4152      	adcs	r2, r2
    76aa:	0943      	lsrs	r3, r0, #5
    76ac:	428b      	cmp	r3, r1
    76ae:	d301      	bcc.n	76b4 <__divsi3+0x16c>
    76b0:	014b      	lsls	r3, r1, #5
    76b2:	1ac0      	subs	r0, r0, r3
    76b4:	4152      	adcs	r2, r2
    76b6:	0903      	lsrs	r3, r0, #4
    76b8:	428b      	cmp	r3, r1
    76ba:	d301      	bcc.n	76c0 <__divsi3+0x178>
    76bc:	010b      	lsls	r3, r1, #4
    76be:	1ac0      	subs	r0, r0, r3
    76c0:	4152      	adcs	r2, r2
    76c2:	08c3      	lsrs	r3, r0, #3
    76c4:	428b      	cmp	r3, r1
    76c6:	d301      	bcc.n	76cc <__divsi3+0x184>
    76c8:	00cb      	lsls	r3, r1, #3
    76ca:	1ac0      	subs	r0, r0, r3
    76cc:	4152      	adcs	r2, r2
    76ce:	0883      	lsrs	r3, r0, #2
    76d0:	428b      	cmp	r3, r1
    76d2:	d301      	bcc.n	76d8 <__divsi3+0x190>
    76d4:	008b      	lsls	r3, r1, #2
    76d6:	1ac0      	subs	r0, r0, r3
    76d8:	4152      	adcs	r2, r2
    76da:	d2d9      	bcs.n	7690 <__divsi3+0x148>
    76dc:	0843      	lsrs	r3, r0, #1
    76de:	428b      	cmp	r3, r1
    76e0:	d301      	bcc.n	76e6 <__divsi3+0x19e>
    76e2:	004b      	lsls	r3, r1, #1
    76e4:	1ac0      	subs	r0, r0, r3
    76e6:	4152      	adcs	r2, r2
    76e8:	1a41      	subs	r1, r0, r1
    76ea:	d200      	bcs.n	76ee <__divsi3+0x1a6>
    76ec:	4601      	mov	r1, r0
    76ee:	4663      	mov	r3, ip
    76f0:	4152      	adcs	r2, r2
    76f2:	105b      	asrs	r3, r3, #1
    76f4:	4610      	mov	r0, r2
    76f6:	d301      	bcc.n	76fc <__divsi3+0x1b4>
    76f8:	4240      	negs	r0, r0
    76fa:	2b00      	cmp	r3, #0
    76fc:	d500      	bpl.n	7700 <__divsi3+0x1b8>
    76fe:	4249      	negs	r1, r1
    7700:	4770      	bx	lr
    7702:	4663      	mov	r3, ip
    7704:	105b      	asrs	r3, r3, #1
    7706:	d300      	bcc.n	770a <__divsi3+0x1c2>
    7708:	4240      	negs	r0, r0
    770a:	b501      	push	{r0, lr}
    770c:	2000      	movs	r0, #0
    770e:	f000 f805 	bl	771c <__aeabi_idiv0>
    7712:	bd02      	pop	{r1, pc}

00007714 <__aeabi_idivmod>:
    7714:	2900      	cmp	r1, #0
    7716:	d0f8      	beq.n	770a <__divsi3+0x1c2>
    7718:	e716      	b.n	7548 <__divsi3>
    771a:	4770      	bx	lr

0000771c <__aeabi_idiv0>:
    771c:	4770      	bx	lr
    771e:	46c0      	nop			; (mov r8, r8)

00007720 <__aeabi_lmul>:
    7720:	b5f0      	push	{r4, r5, r6, r7, lr}
    7722:	46ce      	mov	lr, r9
    7724:	4647      	mov	r7, r8
    7726:	0415      	lsls	r5, r2, #16
    7728:	0c2d      	lsrs	r5, r5, #16
    772a:	002e      	movs	r6, r5
    772c:	b580      	push	{r7, lr}
    772e:	0407      	lsls	r7, r0, #16
    7730:	0c14      	lsrs	r4, r2, #16
    7732:	0c3f      	lsrs	r7, r7, #16
    7734:	4699      	mov	r9, r3
    7736:	0c03      	lsrs	r3, r0, #16
    7738:	437e      	muls	r6, r7
    773a:	435d      	muls	r5, r3
    773c:	4367      	muls	r7, r4
    773e:	4363      	muls	r3, r4
    7740:	197f      	adds	r7, r7, r5
    7742:	0c34      	lsrs	r4, r6, #16
    7744:	19e4      	adds	r4, r4, r7
    7746:	469c      	mov	ip, r3
    7748:	42a5      	cmp	r5, r4
    774a:	d903      	bls.n	7754 <__aeabi_lmul+0x34>
    774c:	2380      	movs	r3, #128	; 0x80
    774e:	025b      	lsls	r3, r3, #9
    7750:	4698      	mov	r8, r3
    7752:	44c4      	add	ip, r8
    7754:	464b      	mov	r3, r9
    7756:	4351      	muls	r1, r2
    7758:	4343      	muls	r3, r0
    775a:	0436      	lsls	r6, r6, #16
    775c:	0c36      	lsrs	r6, r6, #16
    775e:	0c25      	lsrs	r5, r4, #16
    7760:	0424      	lsls	r4, r4, #16
    7762:	4465      	add	r5, ip
    7764:	19a4      	adds	r4, r4, r6
    7766:	1859      	adds	r1, r3, r1
    7768:	1949      	adds	r1, r1, r5
    776a:	0020      	movs	r0, r4
    776c:	bc0c      	pop	{r2, r3}
    776e:	4690      	mov	r8, r2
    7770:	4699      	mov	r9, r3
    7772:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007774 <__aeabi_dadd>:
    7774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7776:	4645      	mov	r5, r8
    7778:	46de      	mov	lr, fp
    777a:	4657      	mov	r7, sl
    777c:	464e      	mov	r6, r9
    777e:	030c      	lsls	r4, r1, #12
    7780:	b5e0      	push	{r5, r6, r7, lr}
    7782:	004e      	lsls	r6, r1, #1
    7784:	0fc9      	lsrs	r1, r1, #31
    7786:	4688      	mov	r8, r1
    7788:	000d      	movs	r5, r1
    778a:	0a61      	lsrs	r1, r4, #9
    778c:	0f44      	lsrs	r4, r0, #29
    778e:	430c      	orrs	r4, r1
    7790:	00c7      	lsls	r7, r0, #3
    7792:	0319      	lsls	r1, r3, #12
    7794:	0058      	lsls	r0, r3, #1
    7796:	0fdb      	lsrs	r3, r3, #31
    7798:	469b      	mov	fp, r3
    779a:	0a4b      	lsrs	r3, r1, #9
    779c:	0f51      	lsrs	r1, r2, #29
    779e:	430b      	orrs	r3, r1
    77a0:	0d76      	lsrs	r6, r6, #21
    77a2:	0d40      	lsrs	r0, r0, #21
    77a4:	0019      	movs	r1, r3
    77a6:	00d2      	lsls	r2, r2, #3
    77a8:	45d8      	cmp	r8, fp
    77aa:	d100      	bne.n	77ae <__aeabi_dadd+0x3a>
    77ac:	e0ae      	b.n	790c <__aeabi_dadd+0x198>
    77ae:	1a35      	subs	r5, r6, r0
    77b0:	2d00      	cmp	r5, #0
    77b2:	dc00      	bgt.n	77b6 <__aeabi_dadd+0x42>
    77b4:	e0f6      	b.n	79a4 <__aeabi_dadd+0x230>
    77b6:	2800      	cmp	r0, #0
    77b8:	d10f      	bne.n	77da <__aeabi_dadd+0x66>
    77ba:	4313      	orrs	r3, r2
    77bc:	d100      	bne.n	77c0 <__aeabi_dadd+0x4c>
    77be:	e0db      	b.n	7978 <__aeabi_dadd+0x204>
    77c0:	1e6b      	subs	r3, r5, #1
    77c2:	2b00      	cmp	r3, #0
    77c4:	d000      	beq.n	77c8 <__aeabi_dadd+0x54>
    77c6:	e137      	b.n	7a38 <__aeabi_dadd+0x2c4>
    77c8:	1aba      	subs	r2, r7, r2
    77ca:	4297      	cmp	r7, r2
    77cc:	41bf      	sbcs	r7, r7
    77ce:	1a64      	subs	r4, r4, r1
    77d0:	427f      	negs	r7, r7
    77d2:	1be4      	subs	r4, r4, r7
    77d4:	2601      	movs	r6, #1
    77d6:	0017      	movs	r7, r2
    77d8:	e024      	b.n	7824 <__aeabi_dadd+0xb0>
    77da:	4bc6      	ldr	r3, [pc, #792]	; (7af4 <__aeabi_dadd+0x380>)
    77dc:	429e      	cmp	r6, r3
    77de:	d04d      	beq.n	787c <__aeabi_dadd+0x108>
    77e0:	2380      	movs	r3, #128	; 0x80
    77e2:	041b      	lsls	r3, r3, #16
    77e4:	4319      	orrs	r1, r3
    77e6:	2d38      	cmp	r5, #56	; 0x38
    77e8:	dd00      	ble.n	77ec <__aeabi_dadd+0x78>
    77ea:	e107      	b.n	79fc <__aeabi_dadd+0x288>
    77ec:	2d1f      	cmp	r5, #31
    77ee:	dd00      	ble.n	77f2 <__aeabi_dadd+0x7e>
    77f0:	e138      	b.n	7a64 <__aeabi_dadd+0x2f0>
    77f2:	2020      	movs	r0, #32
    77f4:	1b43      	subs	r3, r0, r5
    77f6:	469a      	mov	sl, r3
    77f8:	000b      	movs	r3, r1
    77fa:	4650      	mov	r0, sl
    77fc:	4083      	lsls	r3, r0
    77fe:	4699      	mov	r9, r3
    7800:	0013      	movs	r3, r2
    7802:	4648      	mov	r0, r9
    7804:	40eb      	lsrs	r3, r5
    7806:	4318      	orrs	r0, r3
    7808:	0003      	movs	r3, r0
    780a:	4650      	mov	r0, sl
    780c:	4082      	lsls	r2, r0
    780e:	1e50      	subs	r0, r2, #1
    7810:	4182      	sbcs	r2, r0
    7812:	40e9      	lsrs	r1, r5
    7814:	431a      	orrs	r2, r3
    7816:	1aba      	subs	r2, r7, r2
    7818:	1a61      	subs	r1, r4, r1
    781a:	4297      	cmp	r7, r2
    781c:	41a4      	sbcs	r4, r4
    781e:	0017      	movs	r7, r2
    7820:	4264      	negs	r4, r4
    7822:	1b0c      	subs	r4, r1, r4
    7824:	0223      	lsls	r3, r4, #8
    7826:	d562      	bpl.n	78ee <__aeabi_dadd+0x17a>
    7828:	0264      	lsls	r4, r4, #9
    782a:	0a65      	lsrs	r5, r4, #9
    782c:	2d00      	cmp	r5, #0
    782e:	d100      	bne.n	7832 <__aeabi_dadd+0xbe>
    7830:	e0df      	b.n	79f2 <__aeabi_dadd+0x27e>
    7832:	0028      	movs	r0, r5
    7834:	f001 fbe4 	bl	9000 <__clzsi2>
    7838:	0003      	movs	r3, r0
    783a:	3b08      	subs	r3, #8
    783c:	2b1f      	cmp	r3, #31
    783e:	dd00      	ble.n	7842 <__aeabi_dadd+0xce>
    7840:	e0d2      	b.n	79e8 <__aeabi_dadd+0x274>
    7842:	2220      	movs	r2, #32
    7844:	003c      	movs	r4, r7
    7846:	1ad2      	subs	r2, r2, r3
    7848:	409d      	lsls	r5, r3
    784a:	40d4      	lsrs	r4, r2
    784c:	409f      	lsls	r7, r3
    784e:	4325      	orrs	r5, r4
    7850:	429e      	cmp	r6, r3
    7852:	dd00      	ble.n	7856 <__aeabi_dadd+0xe2>
    7854:	e0c4      	b.n	79e0 <__aeabi_dadd+0x26c>
    7856:	1b9e      	subs	r6, r3, r6
    7858:	1c73      	adds	r3, r6, #1
    785a:	2b1f      	cmp	r3, #31
    785c:	dd00      	ble.n	7860 <__aeabi_dadd+0xec>
    785e:	e0f1      	b.n	7a44 <__aeabi_dadd+0x2d0>
    7860:	2220      	movs	r2, #32
    7862:	0038      	movs	r0, r7
    7864:	0029      	movs	r1, r5
    7866:	1ad2      	subs	r2, r2, r3
    7868:	40d8      	lsrs	r0, r3
    786a:	4091      	lsls	r1, r2
    786c:	4097      	lsls	r7, r2
    786e:	002c      	movs	r4, r5
    7870:	4301      	orrs	r1, r0
    7872:	1e78      	subs	r0, r7, #1
    7874:	4187      	sbcs	r7, r0
    7876:	40dc      	lsrs	r4, r3
    7878:	2600      	movs	r6, #0
    787a:	430f      	orrs	r7, r1
    787c:	077b      	lsls	r3, r7, #29
    787e:	d009      	beq.n	7894 <__aeabi_dadd+0x120>
    7880:	230f      	movs	r3, #15
    7882:	403b      	ands	r3, r7
    7884:	2b04      	cmp	r3, #4
    7886:	d005      	beq.n	7894 <__aeabi_dadd+0x120>
    7888:	1d3b      	adds	r3, r7, #4
    788a:	42bb      	cmp	r3, r7
    788c:	41bf      	sbcs	r7, r7
    788e:	427f      	negs	r7, r7
    7890:	19e4      	adds	r4, r4, r7
    7892:	001f      	movs	r7, r3
    7894:	0223      	lsls	r3, r4, #8
    7896:	d52c      	bpl.n	78f2 <__aeabi_dadd+0x17e>
    7898:	4b96      	ldr	r3, [pc, #600]	; (7af4 <__aeabi_dadd+0x380>)
    789a:	3601      	adds	r6, #1
    789c:	429e      	cmp	r6, r3
    789e:	d100      	bne.n	78a2 <__aeabi_dadd+0x12e>
    78a0:	e09a      	b.n	79d8 <__aeabi_dadd+0x264>
    78a2:	4645      	mov	r5, r8
    78a4:	4b94      	ldr	r3, [pc, #592]	; (7af8 <__aeabi_dadd+0x384>)
    78a6:	08ff      	lsrs	r7, r7, #3
    78a8:	401c      	ands	r4, r3
    78aa:	0760      	lsls	r0, r4, #29
    78ac:	0576      	lsls	r6, r6, #21
    78ae:	0264      	lsls	r4, r4, #9
    78b0:	4307      	orrs	r7, r0
    78b2:	0b24      	lsrs	r4, r4, #12
    78b4:	0d76      	lsrs	r6, r6, #21
    78b6:	2100      	movs	r1, #0
    78b8:	0324      	lsls	r4, r4, #12
    78ba:	0b23      	lsrs	r3, r4, #12
    78bc:	0d0c      	lsrs	r4, r1, #20
    78be:	4a8f      	ldr	r2, [pc, #572]	; (7afc <__aeabi_dadd+0x388>)
    78c0:	0524      	lsls	r4, r4, #20
    78c2:	431c      	orrs	r4, r3
    78c4:	4014      	ands	r4, r2
    78c6:	0533      	lsls	r3, r6, #20
    78c8:	4323      	orrs	r3, r4
    78ca:	005b      	lsls	r3, r3, #1
    78cc:	07ed      	lsls	r5, r5, #31
    78ce:	085b      	lsrs	r3, r3, #1
    78d0:	432b      	orrs	r3, r5
    78d2:	0038      	movs	r0, r7
    78d4:	0019      	movs	r1, r3
    78d6:	bc3c      	pop	{r2, r3, r4, r5}
    78d8:	4690      	mov	r8, r2
    78da:	4699      	mov	r9, r3
    78dc:	46a2      	mov	sl, r4
    78de:	46ab      	mov	fp, r5
    78e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78e2:	4664      	mov	r4, ip
    78e4:	4304      	orrs	r4, r0
    78e6:	d100      	bne.n	78ea <__aeabi_dadd+0x176>
    78e8:	e211      	b.n	7d0e <__aeabi_dadd+0x59a>
    78ea:	0004      	movs	r4, r0
    78ec:	4667      	mov	r7, ip
    78ee:	077b      	lsls	r3, r7, #29
    78f0:	d1c6      	bne.n	7880 <__aeabi_dadd+0x10c>
    78f2:	4645      	mov	r5, r8
    78f4:	0760      	lsls	r0, r4, #29
    78f6:	08ff      	lsrs	r7, r7, #3
    78f8:	4307      	orrs	r7, r0
    78fa:	08e4      	lsrs	r4, r4, #3
    78fc:	4b7d      	ldr	r3, [pc, #500]	; (7af4 <__aeabi_dadd+0x380>)
    78fe:	429e      	cmp	r6, r3
    7900:	d030      	beq.n	7964 <__aeabi_dadd+0x1f0>
    7902:	0324      	lsls	r4, r4, #12
    7904:	0576      	lsls	r6, r6, #21
    7906:	0b24      	lsrs	r4, r4, #12
    7908:	0d76      	lsrs	r6, r6, #21
    790a:	e7d4      	b.n	78b6 <__aeabi_dadd+0x142>
    790c:	1a33      	subs	r3, r6, r0
    790e:	469a      	mov	sl, r3
    7910:	2b00      	cmp	r3, #0
    7912:	dd78      	ble.n	7a06 <__aeabi_dadd+0x292>
    7914:	2800      	cmp	r0, #0
    7916:	d031      	beq.n	797c <__aeabi_dadd+0x208>
    7918:	4876      	ldr	r0, [pc, #472]	; (7af4 <__aeabi_dadd+0x380>)
    791a:	4286      	cmp	r6, r0
    791c:	d0ae      	beq.n	787c <__aeabi_dadd+0x108>
    791e:	2080      	movs	r0, #128	; 0x80
    7920:	0400      	lsls	r0, r0, #16
    7922:	4301      	orrs	r1, r0
    7924:	4653      	mov	r3, sl
    7926:	2b38      	cmp	r3, #56	; 0x38
    7928:	dc00      	bgt.n	792c <__aeabi_dadd+0x1b8>
    792a:	e0e9      	b.n	7b00 <__aeabi_dadd+0x38c>
    792c:	430a      	orrs	r2, r1
    792e:	1e51      	subs	r1, r2, #1
    7930:	418a      	sbcs	r2, r1
    7932:	2100      	movs	r1, #0
    7934:	19d2      	adds	r2, r2, r7
    7936:	42ba      	cmp	r2, r7
    7938:	41bf      	sbcs	r7, r7
    793a:	1909      	adds	r1, r1, r4
    793c:	427c      	negs	r4, r7
    793e:	0017      	movs	r7, r2
    7940:	190c      	adds	r4, r1, r4
    7942:	0223      	lsls	r3, r4, #8
    7944:	d5d3      	bpl.n	78ee <__aeabi_dadd+0x17a>
    7946:	4b6b      	ldr	r3, [pc, #428]	; (7af4 <__aeabi_dadd+0x380>)
    7948:	3601      	adds	r6, #1
    794a:	429e      	cmp	r6, r3
    794c:	d100      	bne.n	7950 <__aeabi_dadd+0x1dc>
    794e:	e13a      	b.n	7bc6 <__aeabi_dadd+0x452>
    7950:	2001      	movs	r0, #1
    7952:	4b69      	ldr	r3, [pc, #420]	; (7af8 <__aeabi_dadd+0x384>)
    7954:	401c      	ands	r4, r3
    7956:	087b      	lsrs	r3, r7, #1
    7958:	4007      	ands	r7, r0
    795a:	431f      	orrs	r7, r3
    795c:	07e0      	lsls	r0, r4, #31
    795e:	4307      	orrs	r7, r0
    7960:	0864      	lsrs	r4, r4, #1
    7962:	e78b      	b.n	787c <__aeabi_dadd+0x108>
    7964:	0023      	movs	r3, r4
    7966:	433b      	orrs	r3, r7
    7968:	d100      	bne.n	796c <__aeabi_dadd+0x1f8>
    796a:	e1cb      	b.n	7d04 <__aeabi_dadd+0x590>
    796c:	2280      	movs	r2, #128	; 0x80
    796e:	0312      	lsls	r2, r2, #12
    7970:	4314      	orrs	r4, r2
    7972:	0324      	lsls	r4, r4, #12
    7974:	0b24      	lsrs	r4, r4, #12
    7976:	e79e      	b.n	78b6 <__aeabi_dadd+0x142>
    7978:	002e      	movs	r6, r5
    797a:	e77f      	b.n	787c <__aeabi_dadd+0x108>
    797c:	0008      	movs	r0, r1
    797e:	4310      	orrs	r0, r2
    7980:	d100      	bne.n	7984 <__aeabi_dadd+0x210>
    7982:	e0b4      	b.n	7aee <__aeabi_dadd+0x37a>
    7984:	1e58      	subs	r0, r3, #1
    7986:	2800      	cmp	r0, #0
    7988:	d000      	beq.n	798c <__aeabi_dadd+0x218>
    798a:	e0de      	b.n	7b4a <__aeabi_dadd+0x3d6>
    798c:	18ba      	adds	r2, r7, r2
    798e:	42ba      	cmp	r2, r7
    7990:	419b      	sbcs	r3, r3
    7992:	1864      	adds	r4, r4, r1
    7994:	425b      	negs	r3, r3
    7996:	18e4      	adds	r4, r4, r3
    7998:	0017      	movs	r7, r2
    799a:	2601      	movs	r6, #1
    799c:	0223      	lsls	r3, r4, #8
    799e:	d5a6      	bpl.n	78ee <__aeabi_dadd+0x17a>
    79a0:	2602      	movs	r6, #2
    79a2:	e7d5      	b.n	7950 <__aeabi_dadd+0x1dc>
    79a4:	2d00      	cmp	r5, #0
    79a6:	d16e      	bne.n	7a86 <__aeabi_dadd+0x312>
    79a8:	1c70      	adds	r0, r6, #1
    79aa:	0540      	lsls	r0, r0, #21
    79ac:	0d40      	lsrs	r0, r0, #21
    79ae:	2801      	cmp	r0, #1
    79b0:	dc00      	bgt.n	79b4 <__aeabi_dadd+0x240>
    79b2:	e0f9      	b.n	7ba8 <__aeabi_dadd+0x434>
    79b4:	1ab8      	subs	r0, r7, r2
    79b6:	4684      	mov	ip, r0
    79b8:	4287      	cmp	r7, r0
    79ba:	4180      	sbcs	r0, r0
    79bc:	1ae5      	subs	r5, r4, r3
    79be:	4240      	negs	r0, r0
    79c0:	1a2d      	subs	r5, r5, r0
    79c2:	0228      	lsls	r0, r5, #8
    79c4:	d400      	bmi.n	79c8 <__aeabi_dadd+0x254>
    79c6:	e089      	b.n	7adc <__aeabi_dadd+0x368>
    79c8:	1bd7      	subs	r7, r2, r7
    79ca:	42ba      	cmp	r2, r7
    79cc:	4192      	sbcs	r2, r2
    79ce:	1b1c      	subs	r4, r3, r4
    79d0:	4252      	negs	r2, r2
    79d2:	1aa5      	subs	r5, r4, r2
    79d4:	46d8      	mov	r8, fp
    79d6:	e729      	b.n	782c <__aeabi_dadd+0xb8>
    79d8:	4645      	mov	r5, r8
    79da:	2400      	movs	r4, #0
    79dc:	2700      	movs	r7, #0
    79de:	e76a      	b.n	78b6 <__aeabi_dadd+0x142>
    79e0:	4c45      	ldr	r4, [pc, #276]	; (7af8 <__aeabi_dadd+0x384>)
    79e2:	1af6      	subs	r6, r6, r3
    79e4:	402c      	ands	r4, r5
    79e6:	e749      	b.n	787c <__aeabi_dadd+0x108>
    79e8:	003d      	movs	r5, r7
    79ea:	3828      	subs	r0, #40	; 0x28
    79ec:	4085      	lsls	r5, r0
    79ee:	2700      	movs	r7, #0
    79f0:	e72e      	b.n	7850 <__aeabi_dadd+0xdc>
    79f2:	0038      	movs	r0, r7
    79f4:	f001 fb04 	bl	9000 <__clzsi2>
    79f8:	3020      	adds	r0, #32
    79fa:	e71d      	b.n	7838 <__aeabi_dadd+0xc4>
    79fc:	430a      	orrs	r2, r1
    79fe:	1e51      	subs	r1, r2, #1
    7a00:	418a      	sbcs	r2, r1
    7a02:	2100      	movs	r1, #0
    7a04:	e707      	b.n	7816 <__aeabi_dadd+0xa2>
    7a06:	2b00      	cmp	r3, #0
    7a08:	d000      	beq.n	7a0c <__aeabi_dadd+0x298>
    7a0a:	e0f3      	b.n	7bf4 <__aeabi_dadd+0x480>
    7a0c:	1c70      	adds	r0, r6, #1
    7a0e:	0543      	lsls	r3, r0, #21
    7a10:	0d5b      	lsrs	r3, r3, #21
    7a12:	2b01      	cmp	r3, #1
    7a14:	dc00      	bgt.n	7a18 <__aeabi_dadd+0x2a4>
    7a16:	e0ad      	b.n	7b74 <__aeabi_dadd+0x400>
    7a18:	4b36      	ldr	r3, [pc, #216]	; (7af4 <__aeabi_dadd+0x380>)
    7a1a:	4298      	cmp	r0, r3
    7a1c:	d100      	bne.n	7a20 <__aeabi_dadd+0x2ac>
    7a1e:	e0d1      	b.n	7bc4 <__aeabi_dadd+0x450>
    7a20:	18ba      	adds	r2, r7, r2
    7a22:	42ba      	cmp	r2, r7
    7a24:	41bf      	sbcs	r7, r7
    7a26:	1864      	adds	r4, r4, r1
    7a28:	427f      	negs	r7, r7
    7a2a:	19e4      	adds	r4, r4, r7
    7a2c:	07e7      	lsls	r7, r4, #31
    7a2e:	0852      	lsrs	r2, r2, #1
    7a30:	4317      	orrs	r7, r2
    7a32:	0864      	lsrs	r4, r4, #1
    7a34:	0006      	movs	r6, r0
    7a36:	e721      	b.n	787c <__aeabi_dadd+0x108>
    7a38:	482e      	ldr	r0, [pc, #184]	; (7af4 <__aeabi_dadd+0x380>)
    7a3a:	4285      	cmp	r5, r0
    7a3c:	d100      	bne.n	7a40 <__aeabi_dadd+0x2cc>
    7a3e:	e093      	b.n	7b68 <__aeabi_dadd+0x3f4>
    7a40:	001d      	movs	r5, r3
    7a42:	e6d0      	b.n	77e6 <__aeabi_dadd+0x72>
    7a44:	0029      	movs	r1, r5
    7a46:	3e1f      	subs	r6, #31
    7a48:	40f1      	lsrs	r1, r6
    7a4a:	2b20      	cmp	r3, #32
    7a4c:	d100      	bne.n	7a50 <__aeabi_dadd+0x2dc>
    7a4e:	e08d      	b.n	7b6c <__aeabi_dadd+0x3f8>
    7a50:	2240      	movs	r2, #64	; 0x40
    7a52:	1ad3      	subs	r3, r2, r3
    7a54:	409d      	lsls	r5, r3
    7a56:	432f      	orrs	r7, r5
    7a58:	1e7d      	subs	r5, r7, #1
    7a5a:	41af      	sbcs	r7, r5
    7a5c:	2400      	movs	r4, #0
    7a5e:	430f      	orrs	r7, r1
    7a60:	2600      	movs	r6, #0
    7a62:	e744      	b.n	78ee <__aeabi_dadd+0x17a>
    7a64:	002b      	movs	r3, r5
    7a66:	0008      	movs	r0, r1
    7a68:	3b20      	subs	r3, #32
    7a6a:	40d8      	lsrs	r0, r3
    7a6c:	0003      	movs	r3, r0
    7a6e:	2d20      	cmp	r5, #32
    7a70:	d100      	bne.n	7a74 <__aeabi_dadd+0x300>
    7a72:	e07d      	b.n	7b70 <__aeabi_dadd+0x3fc>
    7a74:	2040      	movs	r0, #64	; 0x40
    7a76:	1b45      	subs	r5, r0, r5
    7a78:	40a9      	lsls	r1, r5
    7a7a:	430a      	orrs	r2, r1
    7a7c:	1e51      	subs	r1, r2, #1
    7a7e:	418a      	sbcs	r2, r1
    7a80:	2100      	movs	r1, #0
    7a82:	431a      	orrs	r2, r3
    7a84:	e6c7      	b.n	7816 <__aeabi_dadd+0xa2>
    7a86:	2e00      	cmp	r6, #0
    7a88:	d050      	beq.n	7b2c <__aeabi_dadd+0x3b8>
    7a8a:	4e1a      	ldr	r6, [pc, #104]	; (7af4 <__aeabi_dadd+0x380>)
    7a8c:	42b0      	cmp	r0, r6
    7a8e:	d057      	beq.n	7b40 <__aeabi_dadd+0x3cc>
    7a90:	2680      	movs	r6, #128	; 0x80
    7a92:	426b      	negs	r3, r5
    7a94:	4699      	mov	r9, r3
    7a96:	0436      	lsls	r6, r6, #16
    7a98:	4334      	orrs	r4, r6
    7a9a:	464b      	mov	r3, r9
    7a9c:	2b38      	cmp	r3, #56	; 0x38
    7a9e:	dd00      	ble.n	7aa2 <__aeabi_dadd+0x32e>
    7aa0:	e0d6      	b.n	7c50 <__aeabi_dadd+0x4dc>
    7aa2:	2b1f      	cmp	r3, #31
    7aa4:	dd00      	ble.n	7aa8 <__aeabi_dadd+0x334>
    7aa6:	e135      	b.n	7d14 <__aeabi_dadd+0x5a0>
    7aa8:	2620      	movs	r6, #32
    7aaa:	1af5      	subs	r5, r6, r3
    7aac:	0026      	movs	r6, r4
    7aae:	40ae      	lsls	r6, r5
    7ab0:	46b2      	mov	sl, r6
    7ab2:	003e      	movs	r6, r7
    7ab4:	40de      	lsrs	r6, r3
    7ab6:	46ac      	mov	ip, r5
    7ab8:	0035      	movs	r5, r6
    7aba:	4656      	mov	r6, sl
    7abc:	432e      	orrs	r6, r5
    7abe:	4665      	mov	r5, ip
    7ac0:	40af      	lsls	r7, r5
    7ac2:	1e7d      	subs	r5, r7, #1
    7ac4:	41af      	sbcs	r7, r5
    7ac6:	40dc      	lsrs	r4, r3
    7ac8:	4337      	orrs	r7, r6
    7aca:	1bd7      	subs	r7, r2, r7
    7acc:	42ba      	cmp	r2, r7
    7ace:	4192      	sbcs	r2, r2
    7ad0:	1b0c      	subs	r4, r1, r4
    7ad2:	4252      	negs	r2, r2
    7ad4:	1aa4      	subs	r4, r4, r2
    7ad6:	0006      	movs	r6, r0
    7ad8:	46d8      	mov	r8, fp
    7ada:	e6a3      	b.n	7824 <__aeabi_dadd+0xb0>
    7adc:	4664      	mov	r4, ip
    7ade:	4667      	mov	r7, ip
    7ae0:	432c      	orrs	r4, r5
    7ae2:	d000      	beq.n	7ae6 <__aeabi_dadd+0x372>
    7ae4:	e6a2      	b.n	782c <__aeabi_dadd+0xb8>
    7ae6:	2500      	movs	r5, #0
    7ae8:	2600      	movs	r6, #0
    7aea:	2700      	movs	r7, #0
    7aec:	e706      	b.n	78fc <__aeabi_dadd+0x188>
    7aee:	001e      	movs	r6, r3
    7af0:	e6c4      	b.n	787c <__aeabi_dadd+0x108>
    7af2:	46c0      	nop			; (mov r8, r8)
    7af4:	000007ff 	.word	0x000007ff
    7af8:	ff7fffff 	.word	0xff7fffff
    7afc:	800fffff 	.word	0x800fffff
    7b00:	2b1f      	cmp	r3, #31
    7b02:	dc63      	bgt.n	7bcc <__aeabi_dadd+0x458>
    7b04:	2020      	movs	r0, #32
    7b06:	1ac3      	subs	r3, r0, r3
    7b08:	0008      	movs	r0, r1
    7b0a:	4098      	lsls	r0, r3
    7b0c:	469c      	mov	ip, r3
    7b0e:	4683      	mov	fp, r0
    7b10:	4653      	mov	r3, sl
    7b12:	0010      	movs	r0, r2
    7b14:	40d8      	lsrs	r0, r3
    7b16:	0003      	movs	r3, r0
    7b18:	4658      	mov	r0, fp
    7b1a:	4318      	orrs	r0, r3
    7b1c:	4663      	mov	r3, ip
    7b1e:	409a      	lsls	r2, r3
    7b20:	1e53      	subs	r3, r2, #1
    7b22:	419a      	sbcs	r2, r3
    7b24:	4653      	mov	r3, sl
    7b26:	4302      	orrs	r2, r0
    7b28:	40d9      	lsrs	r1, r3
    7b2a:	e703      	b.n	7934 <__aeabi_dadd+0x1c0>
    7b2c:	0026      	movs	r6, r4
    7b2e:	433e      	orrs	r6, r7
    7b30:	d006      	beq.n	7b40 <__aeabi_dadd+0x3cc>
    7b32:	43eb      	mvns	r3, r5
    7b34:	4699      	mov	r9, r3
    7b36:	2b00      	cmp	r3, #0
    7b38:	d0c7      	beq.n	7aca <__aeabi_dadd+0x356>
    7b3a:	4e94      	ldr	r6, [pc, #592]	; (7d8c <__aeabi_dadd+0x618>)
    7b3c:	42b0      	cmp	r0, r6
    7b3e:	d1ac      	bne.n	7a9a <__aeabi_dadd+0x326>
    7b40:	000c      	movs	r4, r1
    7b42:	0017      	movs	r7, r2
    7b44:	0006      	movs	r6, r0
    7b46:	46d8      	mov	r8, fp
    7b48:	e698      	b.n	787c <__aeabi_dadd+0x108>
    7b4a:	4b90      	ldr	r3, [pc, #576]	; (7d8c <__aeabi_dadd+0x618>)
    7b4c:	459a      	cmp	sl, r3
    7b4e:	d00b      	beq.n	7b68 <__aeabi_dadd+0x3f4>
    7b50:	4682      	mov	sl, r0
    7b52:	e6e7      	b.n	7924 <__aeabi_dadd+0x1b0>
    7b54:	2800      	cmp	r0, #0
    7b56:	d000      	beq.n	7b5a <__aeabi_dadd+0x3e6>
    7b58:	e09e      	b.n	7c98 <__aeabi_dadd+0x524>
    7b5a:	0018      	movs	r0, r3
    7b5c:	4310      	orrs	r0, r2
    7b5e:	d100      	bne.n	7b62 <__aeabi_dadd+0x3ee>
    7b60:	e0e9      	b.n	7d36 <__aeabi_dadd+0x5c2>
    7b62:	001c      	movs	r4, r3
    7b64:	0017      	movs	r7, r2
    7b66:	46d8      	mov	r8, fp
    7b68:	4e88      	ldr	r6, [pc, #544]	; (7d8c <__aeabi_dadd+0x618>)
    7b6a:	e687      	b.n	787c <__aeabi_dadd+0x108>
    7b6c:	2500      	movs	r5, #0
    7b6e:	e772      	b.n	7a56 <__aeabi_dadd+0x2e2>
    7b70:	2100      	movs	r1, #0
    7b72:	e782      	b.n	7a7a <__aeabi_dadd+0x306>
    7b74:	0023      	movs	r3, r4
    7b76:	433b      	orrs	r3, r7
    7b78:	2e00      	cmp	r6, #0
    7b7a:	d000      	beq.n	7b7e <__aeabi_dadd+0x40a>
    7b7c:	e0ab      	b.n	7cd6 <__aeabi_dadd+0x562>
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d100      	bne.n	7b84 <__aeabi_dadd+0x410>
    7b82:	e0e7      	b.n	7d54 <__aeabi_dadd+0x5e0>
    7b84:	000b      	movs	r3, r1
    7b86:	4313      	orrs	r3, r2
    7b88:	d100      	bne.n	7b8c <__aeabi_dadd+0x418>
    7b8a:	e677      	b.n	787c <__aeabi_dadd+0x108>
    7b8c:	18ba      	adds	r2, r7, r2
    7b8e:	42ba      	cmp	r2, r7
    7b90:	41bf      	sbcs	r7, r7
    7b92:	1864      	adds	r4, r4, r1
    7b94:	427f      	negs	r7, r7
    7b96:	19e4      	adds	r4, r4, r7
    7b98:	0223      	lsls	r3, r4, #8
    7b9a:	d400      	bmi.n	7b9e <__aeabi_dadd+0x42a>
    7b9c:	e0f2      	b.n	7d84 <__aeabi_dadd+0x610>
    7b9e:	4b7c      	ldr	r3, [pc, #496]	; (7d90 <__aeabi_dadd+0x61c>)
    7ba0:	0017      	movs	r7, r2
    7ba2:	401c      	ands	r4, r3
    7ba4:	0006      	movs	r6, r0
    7ba6:	e669      	b.n	787c <__aeabi_dadd+0x108>
    7ba8:	0020      	movs	r0, r4
    7baa:	4338      	orrs	r0, r7
    7bac:	2e00      	cmp	r6, #0
    7bae:	d1d1      	bne.n	7b54 <__aeabi_dadd+0x3e0>
    7bb0:	2800      	cmp	r0, #0
    7bb2:	d15b      	bne.n	7c6c <__aeabi_dadd+0x4f8>
    7bb4:	001c      	movs	r4, r3
    7bb6:	4314      	orrs	r4, r2
    7bb8:	d100      	bne.n	7bbc <__aeabi_dadd+0x448>
    7bba:	e0a8      	b.n	7d0e <__aeabi_dadd+0x59a>
    7bbc:	001c      	movs	r4, r3
    7bbe:	0017      	movs	r7, r2
    7bc0:	46d8      	mov	r8, fp
    7bc2:	e65b      	b.n	787c <__aeabi_dadd+0x108>
    7bc4:	0006      	movs	r6, r0
    7bc6:	2400      	movs	r4, #0
    7bc8:	2700      	movs	r7, #0
    7bca:	e697      	b.n	78fc <__aeabi_dadd+0x188>
    7bcc:	4650      	mov	r0, sl
    7bce:	000b      	movs	r3, r1
    7bd0:	3820      	subs	r0, #32
    7bd2:	40c3      	lsrs	r3, r0
    7bd4:	4699      	mov	r9, r3
    7bd6:	4653      	mov	r3, sl
    7bd8:	2b20      	cmp	r3, #32
    7bda:	d100      	bne.n	7bde <__aeabi_dadd+0x46a>
    7bdc:	e095      	b.n	7d0a <__aeabi_dadd+0x596>
    7bde:	2340      	movs	r3, #64	; 0x40
    7be0:	4650      	mov	r0, sl
    7be2:	1a1b      	subs	r3, r3, r0
    7be4:	4099      	lsls	r1, r3
    7be6:	430a      	orrs	r2, r1
    7be8:	1e51      	subs	r1, r2, #1
    7bea:	418a      	sbcs	r2, r1
    7bec:	464b      	mov	r3, r9
    7bee:	2100      	movs	r1, #0
    7bf0:	431a      	orrs	r2, r3
    7bf2:	e69f      	b.n	7934 <__aeabi_dadd+0x1c0>
    7bf4:	2e00      	cmp	r6, #0
    7bf6:	d130      	bne.n	7c5a <__aeabi_dadd+0x4e6>
    7bf8:	0026      	movs	r6, r4
    7bfa:	433e      	orrs	r6, r7
    7bfc:	d067      	beq.n	7cce <__aeabi_dadd+0x55a>
    7bfe:	43db      	mvns	r3, r3
    7c00:	469a      	mov	sl, r3
    7c02:	2b00      	cmp	r3, #0
    7c04:	d01c      	beq.n	7c40 <__aeabi_dadd+0x4cc>
    7c06:	4e61      	ldr	r6, [pc, #388]	; (7d8c <__aeabi_dadd+0x618>)
    7c08:	42b0      	cmp	r0, r6
    7c0a:	d060      	beq.n	7cce <__aeabi_dadd+0x55a>
    7c0c:	4653      	mov	r3, sl
    7c0e:	2b38      	cmp	r3, #56	; 0x38
    7c10:	dd00      	ble.n	7c14 <__aeabi_dadd+0x4a0>
    7c12:	e096      	b.n	7d42 <__aeabi_dadd+0x5ce>
    7c14:	2b1f      	cmp	r3, #31
    7c16:	dd00      	ble.n	7c1a <__aeabi_dadd+0x4a6>
    7c18:	e09f      	b.n	7d5a <__aeabi_dadd+0x5e6>
    7c1a:	2620      	movs	r6, #32
    7c1c:	1af3      	subs	r3, r6, r3
    7c1e:	0026      	movs	r6, r4
    7c20:	409e      	lsls	r6, r3
    7c22:	469c      	mov	ip, r3
    7c24:	46b3      	mov	fp, r6
    7c26:	4653      	mov	r3, sl
    7c28:	003e      	movs	r6, r7
    7c2a:	40de      	lsrs	r6, r3
    7c2c:	0033      	movs	r3, r6
    7c2e:	465e      	mov	r6, fp
    7c30:	431e      	orrs	r6, r3
    7c32:	4663      	mov	r3, ip
    7c34:	409f      	lsls	r7, r3
    7c36:	1e7b      	subs	r3, r7, #1
    7c38:	419f      	sbcs	r7, r3
    7c3a:	4653      	mov	r3, sl
    7c3c:	40dc      	lsrs	r4, r3
    7c3e:	4337      	orrs	r7, r6
    7c40:	18bf      	adds	r7, r7, r2
    7c42:	4297      	cmp	r7, r2
    7c44:	4192      	sbcs	r2, r2
    7c46:	1864      	adds	r4, r4, r1
    7c48:	4252      	negs	r2, r2
    7c4a:	18a4      	adds	r4, r4, r2
    7c4c:	0006      	movs	r6, r0
    7c4e:	e678      	b.n	7942 <__aeabi_dadd+0x1ce>
    7c50:	4327      	orrs	r7, r4
    7c52:	1e7c      	subs	r4, r7, #1
    7c54:	41a7      	sbcs	r7, r4
    7c56:	2400      	movs	r4, #0
    7c58:	e737      	b.n	7aca <__aeabi_dadd+0x356>
    7c5a:	4e4c      	ldr	r6, [pc, #304]	; (7d8c <__aeabi_dadd+0x618>)
    7c5c:	42b0      	cmp	r0, r6
    7c5e:	d036      	beq.n	7cce <__aeabi_dadd+0x55a>
    7c60:	2680      	movs	r6, #128	; 0x80
    7c62:	425b      	negs	r3, r3
    7c64:	0436      	lsls	r6, r6, #16
    7c66:	469a      	mov	sl, r3
    7c68:	4334      	orrs	r4, r6
    7c6a:	e7cf      	b.n	7c0c <__aeabi_dadd+0x498>
    7c6c:	0018      	movs	r0, r3
    7c6e:	4310      	orrs	r0, r2
    7c70:	d100      	bne.n	7c74 <__aeabi_dadd+0x500>
    7c72:	e603      	b.n	787c <__aeabi_dadd+0x108>
    7c74:	1ab8      	subs	r0, r7, r2
    7c76:	4684      	mov	ip, r0
    7c78:	4567      	cmp	r7, ip
    7c7a:	41ad      	sbcs	r5, r5
    7c7c:	1ae0      	subs	r0, r4, r3
    7c7e:	426d      	negs	r5, r5
    7c80:	1b40      	subs	r0, r0, r5
    7c82:	0205      	lsls	r5, r0, #8
    7c84:	d400      	bmi.n	7c88 <__aeabi_dadd+0x514>
    7c86:	e62c      	b.n	78e2 <__aeabi_dadd+0x16e>
    7c88:	1bd7      	subs	r7, r2, r7
    7c8a:	42ba      	cmp	r2, r7
    7c8c:	4192      	sbcs	r2, r2
    7c8e:	1b1c      	subs	r4, r3, r4
    7c90:	4252      	negs	r2, r2
    7c92:	1aa4      	subs	r4, r4, r2
    7c94:	46d8      	mov	r8, fp
    7c96:	e5f1      	b.n	787c <__aeabi_dadd+0x108>
    7c98:	0018      	movs	r0, r3
    7c9a:	4310      	orrs	r0, r2
    7c9c:	d100      	bne.n	7ca0 <__aeabi_dadd+0x52c>
    7c9e:	e763      	b.n	7b68 <__aeabi_dadd+0x3f4>
    7ca0:	08f8      	lsrs	r0, r7, #3
    7ca2:	0767      	lsls	r7, r4, #29
    7ca4:	4307      	orrs	r7, r0
    7ca6:	2080      	movs	r0, #128	; 0x80
    7ca8:	08e4      	lsrs	r4, r4, #3
    7caa:	0300      	lsls	r0, r0, #12
    7cac:	4204      	tst	r4, r0
    7cae:	d008      	beq.n	7cc2 <__aeabi_dadd+0x54e>
    7cb0:	08dd      	lsrs	r5, r3, #3
    7cb2:	4205      	tst	r5, r0
    7cb4:	d105      	bne.n	7cc2 <__aeabi_dadd+0x54e>
    7cb6:	08d2      	lsrs	r2, r2, #3
    7cb8:	0759      	lsls	r1, r3, #29
    7cba:	4311      	orrs	r1, r2
    7cbc:	000f      	movs	r7, r1
    7cbe:	002c      	movs	r4, r5
    7cc0:	46d8      	mov	r8, fp
    7cc2:	0f7b      	lsrs	r3, r7, #29
    7cc4:	00e4      	lsls	r4, r4, #3
    7cc6:	431c      	orrs	r4, r3
    7cc8:	00ff      	lsls	r7, r7, #3
    7cca:	4e30      	ldr	r6, [pc, #192]	; (7d8c <__aeabi_dadd+0x618>)
    7ccc:	e5d6      	b.n	787c <__aeabi_dadd+0x108>
    7cce:	000c      	movs	r4, r1
    7cd0:	0017      	movs	r7, r2
    7cd2:	0006      	movs	r6, r0
    7cd4:	e5d2      	b.n	787c <__aeabi_dadd+0x108>
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d038      	beq.n	7d4c <__aeabi_dadd+0x5d8>
    7cda:	000b      	movs	r3, r1
    7cdc:	4313      	orrs	r3, r2
    7cde:	d100      	bne.n	7ce2 <__aeabi_dadd+0x56e>
    7ce0:	e742      	b.n	7b68 <__aeabi_dadd+0x3f4>
    7ce2:	08f8      	lsrs	r0, r7, #3
    7ce4:	0767      	lsls	r7, r4, #29
    7ce6:	4307      	orrs	r7, r0
    7ce8:	2080      	movs	r0, #128	; 0x80
    7cea:	08e4      	lsrs	r4, r4, #3
    7cec:	0300      	lsls	r0, r0, #12
    7cee:	4204      	tst	r4, r0
    7cf0:	d0e7      	beq.n	7cc2 <__aeabi_dadd+0x54e>
    7cf2:	08cb      	lsrs	r3, r1, #3
    7cf4:	4203      	tst	r3, r0
    7cf6:	d1e4      	bne.n	7cc2 <__aeabi_dadd+0x54e>
    7cf8:	08d2      	lsrs	r2, r2, #3
    7cfa:	0749      	lsls	r1, r1, #29
    7cfc:	4311      	orrs	r1, r2
    7cfe:	000f      	movs	r7, r1
    7d00:	001c      	movs	r4, r3
    7d02:	e7de      	b.n	7cc2 <__aeabi_dadd+0x54e>
    7d04:	2700      	movs	r7, #0
    7d06:	2400      	movs	r4, #0
    7d08:	e5d5      	b.n	78b6 <__aeabi_dadd+0x142>
    7d0a:	2100      	movs	r1, #0
    7d0c:	e76b      	b.n	7be6 <__aeabi_dadd+0x472>
    7d0e:	2500      	movs	r5, #0
    7d10:	2700      	movs	r7, #0
    7d12:	e5f3      	b.n	78fc <__aeabi_dadd+0x188>
    7d14:	464e      	mov	r6, r9
    7d16:	0025      	movs	r5, r4
    7d18:	3e20      	subs	r6, #32
    7d1a:	40f5      	lsrs	r5, r6
    7d1c:	464b      	mov	r3, r9
    7d1e:	002e      	movs	r6, r5
    7d20:	2b20      	cmp	r3, #32
    7d22:	d02d      	beq.n	7d80 <__aeabi_dadd+0x60c>
    7d24:	2540      	movs	r5, #64	; 0x40
    7d26:	1aed      	subs	r5, r5, r3
    7d28:	40ac      	lsls	r4, r5
    7d2a:	4327      	orrs	r7, r4
    7d2c:	1e7c      	subs	r4, r7, #1
    7d2e:	41a7      	sbcs	r7, r4
    7d30:	2400      	movs	r4, #0
    7d32:	4337      	orrs	r7, r6
    7d34:	e6c9      	b.n	7aca <__aeabi_dadd+0x356>
    7d36:	2480      	movs	r4, #128	; 0x80
    7d38:	2500      	movs	r5, #0
    7d3a:	0324      	lsls	r4, r4, #12
    7d3c:	4e13      	ldr	r6, [pc, #76]	; (7d8c <__aeabi_dadd+0x618>)
    7d3e:	2700      	movs	r7, #0
    7d40:	e5dc      	b.n	78fc <__aeabi_dadd+0x188>
    7d42:	4327      	orrs	r7, r4
    7d44:	1e7c      	subs	r4, r7, #1
    7d46:	41a7      	sbcs	r7, r4
    7d48:	2400      	movs	r4, #0
    7d4a:	e779      	b.n	7c40 <__aeabi_dadd+0x4cc>
    7d4c:	000c      	movs	r4, r1
    7d4e:	0017      	movs	r7, r2
    7d50:	4e0e      	ldr	r6, [pc, #56]	; (7d8c <__aeabi_dadd+0x618>)
    7d52:	e593      	b.n	787c <__aeabi_dadd+0x108>
    7d54:	000c      	movs	r4, r1
    7d56:	0017      	movs	r7, r2
    7d58:	e590      	b.n	787c <__aeabi_dadd+0x108>
    7d5a:	4656      	mov	r6, sl
    7d5c:	0023      	movs	r3, r4
    7d5e:	3e20      	subs	r6, #32
    7d60:	40f3      	lsrs	r3, r6
    7d62:	4699      	mov	r9, r3
    7d64:	4653      	mov	r3, sl
    7d66:	2b20      	cmp	r3, #32
    7d68:	d00e      	beq.n	7d88 <__aeabi_dadd+0x614>
    7d6a:	2340      	movs	r3, #64	; 0x40
    7d6c:	4656      	mov	r6, sl
    7d6e:	1b9b      	subs	r3, r3, r6
    7d70:	409c      	lsls	r4, r3
    7d72:	4327      	orrs	r7, r4
    7d74:	1e7c      	subs	r4, r7, #1
    7d76:	41a7      	sbcs	r7, r4
    7d78:	464b      	mov	r3, r9
    7d7a:	2400      	movs	r4, #0
    7d7c:	431f      	orrs	r7, r3
    7d7e:	e75f      	b.n	7c40 <__aeabi_dadd+0x4cc>
    7d80:	2400      	movs	r4, #0
    7d82:	e7d2      	b.n	7d2a <__aeabi_dadd+0x5b6>
    7d84:	0017      	movs	r7, r2
    7d86:	e5b2      	b.n	78ee <__aeabi_dadd+0x17a>
    7d88:	2400      	movs	r4, #0
    7d8a:	e7f2      	b.n	7d72 <__aeabi_dadd+0x5fe>
    7d8c:	000007ff 	.word	0x000007ff
    7d90:	ff7fffff 	.word	0xff7fffff

00007d94 <__aeabi_ddiv>:
    7d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d96:	4657      	mov	r7, sl
    7d98:	4645      	mov	r5, r8
    7d9a:	46de      	mov	lr, fp
    7d9c:	464e      	mov	r6, r9
    7d9e:	b5e0      	push	{r5, r6, r7, lr}
    7da0:	004c      	lsls	r4, r1, #1
    7da2:	030e      	lsls	r6, r1, #12
    7da4:	b087      	sub	sp, #28
    7da6:	4683      	mov	fp, r0
    7da8:	4692      	mov	sl, r2
    7daa:	001d      	movs	r5, r3
    7dac:	4680      	mov	r8, r0
    7dae:	0b36      	lsrs	r6, r6, #12
    7db0:	0d64      	lsrs	r4, r4, #21
    7db2:	0fcf      	lsrs	r7, r1, #31
    7db4:	2c00      	cmp	r4, #0
    7db6:	d04f      	beq.n	7e58 <__aeabi_ddiv+0xc4>
    7db8:	4b6f      	ldr	r3, [pc, #444]	; (7f78 <__aeabi_ddiv+0x1e4>)
    7dba:	429c      	cmp	r4, r3
    7dbc:	d035      	beq.n	7e2a <__aeabi_ddiv+0x96>
    7dbe:	2380      	movs	r3, #128	; 0x80
    7dc0:	0f42      	lsrs	r2, r0, #29
    7dc2:	041b      	lsls	r3, r3, #16
    7dc4:	00f6      	lsls	r6, r6, #3
    7dc6:	4313      	orrs	r3, r2
    7dc8:	4333      	orrs	r3, r6
    7dca:	4699      	mov	r9, r3
    7dcc:	00c3      	lsls	r3, r0, #3
    7dce:	4698      	mov	r8, r3
    7dd0:	4b6a      	ldr	r3, [pc, #424]	; (7f7c <__aeabi_ddiv+0x1e8>)
    7dd2:	2600      	movs	r6, #0
    7dd4:	469c      	mov	ip, r3
    7dd6:	2300      	movs	r3, #0
    7dd8:	4464      	add	r4, ip
    7dda:	9303      	str	r3, [sp, #12]
    7ddc:	032b      	lsls	r3, r5, #12
    7dde:	0b1b      	lsrs	r3, r3, #12
    7de0:	469b      	mov	fp, r3
    7de2:	006b      	lsls	r3, r5, #1
    7de4:	0fed      	lsrs	r5, r5, #31
    7de6:	4650      	mov	r0, sl
    7de8:	0d5b      	lsrs	r3, r3, #21
    7dea:	9501      	str	r5, [sp, #4]
    7dec:	d05e      	beq.n	7eac <__aeabi_ddiv+0x118>
    7dee:	4a62      	ldr	r2, [pc, #392]	; (7f78 <__aeabi_ddiv+0x1e4>)
    7df0:	4293      	cmp	r3, r2
    7df2:	d053      	beq.n	7e9c <__aeabi_ddiv+0x108>
    7df4:	465a      	mov	r2, fp
    7df6:	00d1      	lsls	r1, r2, #3
    7df8:	2280      	movs	r2, #128	; 0x80
    7dfa:	0f40      	lsrs	r0, r0, #29
    7dfc:	0412      	lsls	r2, r2, #16
    7dfe:	4302      	orrs	r2, r0
    7e00:	430a      	orrs	r2, r1
    7e02:	4693      	mov	fp, r2
    7e04:	4652      	mov	r2, sl
    7e06:	00d1      	lsls	r1, r2, #3
    7e08:	4a5c      	ldr	r2, [pc, #368]	; (7f7c <__aeabi_ddiv+0x1e8>)
    7e0a:	4694      	mov	ip, r2
    7e0c:	2200      	movs	r2, #0
    7e0e:	4463      	add	r3, ip
    7e10:	0038      	movs	r0, r7
    7e12:	4068      	eors	r0, r5
    7e14:	4684      	mov	ip, r0
    7e16:	9002      	str	r0, [sp, #8]
    7e18:	1ae4      	subs	r4, r4, r3
    7e1a:	4316      	orrs	r6, r2
    7e1c:	2e0f      	cmp	r6, #15
    7e1e:	d900      	bls.n	7e22 <__aeabi_ddiv+0x8e>
    7e20:	e0b4      	b.n	7f8c <__aeabi_ddiv+0x1f8>
    7e22:	4b57      	ldr	r3, [pc, #348]	; (7f80 <__aeabi_ddiv+0x1ec>)
    7e24:	00b6      	lsls	r6, r6, #2
    7e26:	599b      	ldr	r3, [r3, r6]
    7e28:	469f      	mov	pc, r3
    7e2a:	0003      	movs	r3, r0
    7e2c:	4333      	orrs	r3, r6
    7e2e:	4699      	mov	r9, r3
    7e30:	d16c      	bne.n	7f0c <__aeabi_ddiv+0x178>
    7e32:	2300      	movs	r3, #0
    7e34:	4698      	mov	r8, r3
    7e36:	3302      	adds	r3, #2
    7e38:	2608      	movs	r6, #8
    7e3a:	9303      	str	r3, [sp, #12]
    7e3c:	e7ce      	b.n	7ddc <__aeabi_ddiv+0x48>
    7e3e:	46cb      	mov	fp, r9
    7e40:	4641      	mov	r1, r8
    7e42:	9a03      	ldr	r2, [sp, #12]
    7e44:	9701      	str	r7, [sp, #4]
    7e46:	2a02      	cmp	r2, #2
    7e48:	d165      	bne.n	7f16 <__aeabi_ddiv+0x182>
    7e4a:	9b01      	ldr	r3, [sp, #4]
    7e4c:	4c4a      	ldr	r4, [pc, #296]	; (7f78 <__aeabi_ddiv+0x1e4>)
    7e4e:	469c      	mov	ip, r3
    7e50:	2300      	movs	r3, #0
    7e52:	2200      	movs	r2, #0
    7e54:	4698      	mov	r8, r3
    7e56:	e06b      	b.n	7f30 <__aeabi_ddiv+0x19c>
    7e58:	0003      	movs	r3, r0
    7e5a:	4333      	orrs	r3, r6
    7e5c:	4699      	mov	r9, r3
    7e5e:	d04e      	beq.n	7efe <__aeabi_ddiv+0x16a>
    7e60:	2e00      	cmp	r6, #0
    7e62:	d100      	bne.n	7e66 <__aeabi_ddiv+0xd2>
    7e64:	e1bc      	b.n	81e0 <__aeabi_ddiv+0x44c>
    7e66:	0030      	movs	r0, r6
    7e68:	f001 f8ca 	bl	9000 <__clzsi2>
    7e6c:	0003      	movs	r3, r0
    7e6e:	3b0b      	subs	r3, #11
    7e70:	2b1c      	cmp	r3, #28
    7e72:	dd00      	ble.n	7e76 <__aeabi_ddiv+0xe2>
    7e74:	e1ac      	b.n	81d0 <__aeabi_ddiv+0x43c>
    7e76:	221d      	movs	r2, #29
    7e78:	1ad3      	subs	r3, r2, r3
    7e7a:	465a      	mov	r2, fp
    7e7c:	0001      	movs	r1, r0
    7e7e:	40da      	lsrs	r2, r3
    7e80:	3908      	subs	r1, #8
    7e82:	408e      	lsls	r6, r1
    7e84:	0013      	movs	r3, r2
    7e86:	4333      	orrs	r3, r6
    7e88:	4699      	mov	r9, r3
    7e8a:	465b      	mov	r3, fp
    7e8c:	408b      	lsls	r3, r1
    7e8e:	4698      	mov	r8, r3
    7e90:	2300      	movs	r3, #0
    7e92:	4c3c      	ldr	r4, [pc, #240]	; (7f84 <__aeabi_ddiv+0x1f0>)
    7e94:	2600      	movs	r6, #0
    7e96:	1a24      	subs	r4, r4, r0
    7e98:	9303      	str	r3, [sp, #12]
    7e9a:	e79f      	b.n	7ddc <__aeabi_ddiv+0x48>
    7e9c:	4651      	mov	r1, sl
    7e9e:	465a      	mov	r2, fp
    7ea0:	4311      	orrs	r1, r2
    7ea2:	d129      	bne.n	7ef8 <__aeabi_ddiv+0x164>
    7ea4:	2200      	movs	r2, #0
    7ea6:	4693      	mov	fp, r2
    7ea8:	3202      	adds	r2, #2
    7eaa:	e7b1      	b.n	7e10 <__aeabi_ddiv+0x7c>
    7eac:	4659      	mov	r1, fp
    7eae:	4301      	orrs	r1, r0
    7eb0:	d01e      	beq.n	7ef0 <__aeabi_ddiv+0x15c>
    7eb2:	465b      	mov	r3, fp
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d100      	bne.n	7eba <__aeabi_ddiv+0x126>
    7eb8:	e19e      	b.n	81f8 <__aeabi_ddiv+0x464>
    7eba:	4658      	mov	r0, fp
    7ebc:	f001 f8a0 	bl	9000 <__clzsi2>
    7ec0:	0003      	movs	r3, r0
    7ec2:	3b0b      	subs	r3, #11
    7ec4:	2b1c      	cmp	r3, #28
    7ec6:	dd00      	ble.n	7eca <__aeabi_ddiv+0x136>
    7ec8:	e18f      	b.n	81ea <__aeabi_ddiv+0x456>
    7eca:	0002      	movs	r2, r0
    7ecc:	4659      	mov	r1, fp
    7ece:	3a08      	subs	r2, #8
    7ed0:	4091      	lsls	r1, r2
    7ed2:	468b      	mov	fp, r1
    7ed4:	211d      	movs	r1, #29
    7ed6:	1acb      	subs	r3, r1, r3
    7ed8:	4651      	mov	r1, sl
    7eda:	40d9      	lsrs	r1, r3
    7edc:	000b      	movs	r3, r1
    7ede:	4659      	mov	r1, fp
    7ee0:	430b      	orrs	r3, r1
    7ee2:	4651      	mov	r1, sl
    7ee4:	469b      	mov	fp, r3
    7ee6:	4091      	lsls	r1, r2
    7ee8:	4b26      	ldr	r3, [pc, #152]	; (7f84 <__aeabi_ddiv+0x1f0>)
    7eea:	2200      	movs	r2, #0
    7eec:	1a1b      	subs	r3, r3, r0
    7eee:	e78f      	b.n	7e10 <__aeabi_ddiv+0x7c>
    7ef0:	2300      	movs	r3, #0
    7ef2:	2201      	movs	r2, #1
    7ef4:	469b      	mov	fp, r3
    7ef6:	e78b      	b.n	7e10 <__aeabi_ddiv+0x7c>
    7ef8:	4651      	mov	r1, sl
    7efa:	2203      	movs	r2, #3
    7efc:	e788      	b.n	7e10 <__aeabi_ddiv+0x7c>
    7efe:	2300      	movs	r3, #0
    7f00:	4698      	mov	r8, r3
    7f02:	3301      	adds	r3, #1
    7f04:	2604      	movs	r6, #4
    7f06:	2400      	movs	r4, #0
    7f08:	9303      	str	r3, [sp, #12]
    7f0a:	e767      	b.n	7ddc <__aeabi_ddiv+0x48>
    7f0c:	2303      	movs	r3, #3
    7f0e:	46b1      	mov	r9, r6
    7f10:	9303      	str	r3, [sp, #12]
    7f12:	260c      	movs	r6, #12
    7f14:	e762      	b.n	7ddc <__aeabi_ddiv+0x48>
    7f16:	2a03      	cmp	r2, #3
    7f18:	d100      	bne.n	7f1c <__aeabi_ddiv+0x188>
    7f1a:	e25c      	b.n	83d6 <__aeabi_ddiv+0x642>
    7f1c:	9b01      	ldr	r3, [sp, #4]
    7f1e:	2a01      	cmp	r2, #1
    7f20:	d000      	beq.n	7f24 <__aeabi_ddiv+0x190>
    7f22:	e1e4      	b.n	82ee <__aeabi_ddiv+0x55a>
    7f24:	4013      	ands	r3, r2
    7f26:	469c      	mov	ip, r3
    7f28:	2300      	movs	r3, #0
    7f2a:	2400      	movs	r4, #0
    7f2c:	2200      	movs	r2, #0
    7f2e:	4698      	mov	r8, r3
    7f30:	2100      	movs	r1, #0
    7f32:	0312      	lsls	r2, r2, #12
    7f34:	0b13      	lsrs	r3, r2, #12
    7f36:	0d0a      	lsrs	r2, r1, #20
    7f38:	0512      	lsls	r2, r2, #20
    7f3a:	431a      	orrs	r2, r3
    7f3c:	0523      	lsls	r3, r4, #20
    7f3e:	4c12      	ldr	r4, [pc, #72]	; (7f88 <__aeabi_ddiv+0x1f4>)
    7f40:	4640      	mov	r0, r8
    7f42:	4022      	ands	r2, r4
    7f44:	4313      	orrs	r3, r2
    7f46:	4662      	mov	r2, ip
    7f48:	005b      	lsls	r3, r3, #1
    7f4a:	07d2      	lsls	r2, r2, #31
    7f4c:	085b      	lsrs	r3, r3, #1
    7f4e:	4313      	orrs	r3, r2
    7f50:	0019      	movs	r1, r3
    7f52:	b007      	add	sp, #28
    7f54:	bc3c      	pop	{r2, r3, r4, r5}
    7f56:	4690      	mov	r8, r2
    7f58:	4699      	mov	r9, r3
    7f5a:	46a2      	mov	sl, r4
    7f5c:	46ab      	mov	fp, r5
    7f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f60:	2300      	movs	r3, #0
    7f62:	2280      	movs	r2, #128	; 0x80
    7f64:	469c      	mov	ip, r3
    7f66:	0312      	lsls	r2, r2, #12
    7f68:	4698      	mov	r8, r3
    7f6a:	4c03      	ldr	r4, [pc, #12]	; (7f78 <__aeabi_ddiv+0x1e4>)
    7f6c:	e7e0      	b.n	7f30 <__aeabi_ddiv+0x19c>
    7f6e:	2300      	movs	r3, #0
    7f70:	4c01      	ldr	r4, [pc, #4]	; (7f78 <__aeabi_ddiv+0x1e4>)
    7f72:	2200      	movs	r2, #0
    7f74:	4698      	mov	r8, r3
    7f76:	e7db      	b.n	7f30 <__aeabi_ddiv+0x19c>
    7f78:	000007ff 	.word	0x000007ff
    7f7c:	fffffc01 	.word	0xfffffc01
    7f80:	0000b644 	.word	0x0000b644
    7f84:	fffffc0d 	.word	0xfffffc0d
    7f88:	800fffff 	.word	0x800fffff
    7f8c:	45d9      	cmp	r9, fp
    7f8e:	d900      	bls.n	7f92 <__aeabi_ddiv+0x1fe>
    7f90:	e139      	b.n	8206 <__aeabi_ddiv+0x472>
    7f92:	d100      	bne.n	7f96 <__aeabi_ddiv+0x202>
    7f94:	e134      	b.n	8200 <__aeabi_ddiv+0x46c>
    7f96:	2300      	movs	r3, #0
    7f98:	4646      	mov	r6, r8
    7f9a:	464d      	mov	r5, r9
    7f9c:	469a      	mov	sl, r3
    7f9e:	3c01      	subs	r4, #1
    7fa0:	465b      	mov	r3, fp
    7fa2:	0e0a      	lsrs	r2, r1, #24
    7fa4:	021b      	lsls	r3, r3, #8
    7fa6:	431a      	orrs	r2, r3
    7fa8:	020b      	lsls	r3, r1, #8
    7faa:	0c17      	lsrs	r7, r2, #16
    7fac:	9303      	str	r3, [sp, #12]
    7fae:	0413      	lsls	r3, r2, #16
    7fb0:	0c1b      	lsrs	r3, r3, #16
    7fb2:	0039      	movs	r1, r7
    7fb4:	0028      	movs	r0, r5
    7fb6:	4690      	mov	r8, r2
    7fb8:	9301      	str	r3, [sp, #4]
    7fba:	f7ff fa3b 	bl	7434 <__udivsi3>
    7fbe:	0002      	movs	r2, r0
    7fc0:	9b01      	ldr	r3, [sp, #4]
    7fc2:	4683      	mov	fp, r0
    7fc4:	435a      	muls	r2, r3
    7fc6:	0028      	movs	r0, r5
    7fc8:	0039      	movs	r1, r7
    7fca:	4691      	mov	r9, r2
    7fcc:	f7ff fab8 	bl	7540 <__aeabi_uidivmod>
    7fd0:	0c35      	lsrs	r5, r6, #16
    7fd2:	0409      	lsls	r1, r1, #16
    7fd4:	430d      	orrs	r5, r1
    7fd6:	45a9      	cmp	r9, r5
    7fd8:	d90d      	bls.n	7ff6 <__aeabi_ddiv+0x262>
    7fda:	465b      	mov	r3, fp
    7fdc:	4445      	add	r5, r8
    7fde:	3b01      	subs	r3, #1
    7fe0:	45a8      	cmp	r8, r5
    7fe2:	d900      	bls.n	7fe6 <__aeabi_ddiv+0x252>
    7fe4:	e13a      	b.n	825c <__aeabi_ddiv+0x4c8>
    7fe6:	45a9      	cmp	r9, r5
    7fe8:	d800      	bhi.n	7fec <__aeabi_ddiv+0x258>
    7fea:	e137      	b.n	825c <__aeabi_ddiv+0x4c8>
    7fec:	2302      	movs	r3, #2
    7fee:	425b      	negs	r3, r3
    7ff0:	469c      	mov	ip, r3
    7ff2:	4445      	add	r5, r8
    7ff4:	44e3      	add	fp, ip
    7ff6:	464b      	mov	r3, r9
    7ff8:	1aeb      	subs	r3, r5, r3
    7ffa:	0039      	movs	r1, r7
    7ffc:	0018      	movs	r0, r3
    7ffe:	9304      	str	r3, [sp, #16]
    8000:	f7ff fa18 	bl	7434 <__udivsi3>
    8004:	9b01      	ldr	r3, [sp, #4]
    8006:	0005      	movs	r5, r0
    8008:	4343      	muls	r3, r0
    800a:	0039      	movs	r1, r7
    800c:	9804      	ldr	r0, [sp, #16]
    800e:	4699      	mov	r9, r3
    8010:	f7ff fa96 	bl	7540 <__aeabi_uidivmod>
    8014:	0433      	lsls	r3, r6, #16
    8016:	0409      	lsls	r1, r1, #16
    8018:	0c1b      	lsrs	r3, r3, #16
    801a:	430b      	orrs	r3, r1
    801c:	4599      	cmp	r9, r3
    801e:	d909      	bls.n	8034 <__aeabi_ddiv+0x2a0>
    8020:	4443      	add	r3, r8
    8022:	1e6a      	subs	r2, r5, #1
    8024:	4598      	cmp	r8, r3
    8026:	d900      	bls.n	802a <__aeabi_ddiv+0x296>
    8028:	e11a      	b.n	8260 <__aeabi_ddiv+0x4cc>
    802a:	4599      	cmp	r9, r3
    802c:	d800      	bhi.n	8030 <__aeabi_ddiv+0x29c>
    802e:	e117      	b.n	8260 <__aeabi_ddiv+0x4cc>
    8030:	3d02      	subs	r5, #2
    8032:	4443      	add	r3, r8
    8034:	464a      	mov	r2, r9
    8036:	1a9b      	subs	r3, r3, r2
    8038:	465a      	mov	r2, fp
    803a:	0412      	lsls	r2, r2, #16
    803c:	432a      	orrs	r2, r5
    803e:	9903      	ldr	r1, [sp, #12]
    8040:	4693      	mov	fp, r2
    8042:	0c10      	lsrs	r0, r2, #16
    8044:	0c0a      	lsrs	r2, r1, #16
    8046:	4691      	mov	r9, r2
    8048:	0409      	lsls	r1, r1, #16
    804a:	465a      	mov	r2, fp
    804c:	0c09      	lsrs	r1, r1, #16
    804e:	464e      	mov	r6, r9
    8050:	000d      	movs	r5, r1
    8052:	0412      	lsls	r2, r2, #16
    8054:	0c12      	lsrs	r2, r2, #16
    8056:	4345      	muls	r5, r0
    8058:	9105      	str	r1, [sp, #20]
    805a:	4351      	muls	r1, r2
    805c:	4372      	muls	r2, r6
    805e:	4370      	muls	r0, r6
    8060:	1952      	adds	r2, r2, r5
    8062:	0c0e      	lsrs	r6, r1, #16
    8064:	18b2      	adds	r2, r6, r2
    8066:	4295      	cmp	r5, r2
    8068:	d903      	bls.n	8072 <__aeabi_ddiv+0x2de>
    806a:	2580      	movs	r5, #128	; 0x80
    806c:	026d      	lsls	r5, r5, #9
    806e:	46ac      	mov	ip, r5
    8070:	4460      	add	r0, ip
    8072:	0c15      	lsrs	r5, r2, #16
    8074:	0409      	lsls	r1, r1, #16
    8076:	0412      	lsls	r2, r2, #16
    8078:	0c09      	lsrs	r1, r1, #16
    807a:	1828      	adds	r0, r5, r0
    807c:	1852      	adds	r2, r2, r1
    807e:	4283      	cmp	r3, r0
    8080:	d200      	bcs.n	8084 <__aeabi_ddiv+0x2f0>
    8082:	e0ce      	b.n	8222 <__aeabi_ddiv+0x48e>
    8084:	d100      	bne.n	8088 <__aeabi_ddiv+0x2f4>
    8086:	e0c8      	b.n	821a <__aeabi_ddiv+0x486>
    8088:	1a1d      	subs	r5, r3, r0
    808a:	4653      	mov	r3, sl
    808c:	1a9e      	subs	r6, r3, r2
    808e:	45b2      	cmp	sl, r6
    8090:	4192      	sbcs	r2, r2
    8092:	4252      	negs	r2, r2
    8094:	1aab      	subs	r3, r5, r2
    8096:	469a      	mov	sl, r3
    8098:	4598      	cmp	r8, r3
    809a:	d100      	bne.n	809e <__aeabi_ddiv+0x30a>
    809c:	e117      	b.n	82ce <__aeabi_ddiv+0x53a>
    809e:	0039      	movs	r1, r7
    80a0:	0018      	movs	r0, r3
    80a2:	f7ff f9c7 	bl	7434 <__udivsi3>
    80a6:	9b01      	ldr	r3, [sp, #4]
    80a8:	0005      	movs	r5, r0
    80aa:	4343      	muls	r3, r0
    80ac:	0039      	movs	r1, r7
    80ae:	4650      	mov	r0, sl
    80b0:	9304      	str	r3, [sp, #16]
    80b2:	f7ff fa45 	bl	7540 <__aeabi_uidivmod>
    80b6:	9804      	ldr	r0, [sp, #16]
    80b8:	040b      	lsls	r3, r1, #16
    80ba:	0c31      	lsrs	r1, r6, #16
    80bc:	4319      	orrs	r1, r3
    80be:	4288      	cmp	r0, r1
    80c0:	d909      	bls.n	80d6 <__aeabi_ddiv+0x342>
    80c2:	4441      	add	r1, r8
    80c4:	1e6b      	subs	r3, r5, #1
    80c6:	4588      	cmp	r8, r1
    80c8:	d900      	bls.n	80cc <__aeabi_ddiv+0x338>
    80ca:	e107      	b.n	82dc <__aeabi_ddiv+0x548>
    80cc:	4288      	cmp	r0, r1
    80ce:	d800      	bhi.n	80d2 <__aeabi_ddiv+0x33e>
    80d0:	e104      	b.n	82dc <__aeabi_ddiv+0x548>
    80d2:	3d02      	subs	r5, #2
    80d4:	4441      	add	r1, r8
    80d6:	9b04      	ldr	r3, [sp, #16]
    80d8:	1acb      	subs	r3, r1, r3
    80da:	0018      	movs	r0, r3
    80dc:	0039      	movs	r1, r7
    80de:	9304      	str	r3, [sp, #16]
    80e0:	f7ff f9a8 	bl	7434 <__udivsi3>
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	4682      	mov	sl, r0
    80e8:	4343      	muls	r3, r0
    80ea:	0039      	movs	r1, r7
    80ec:	9804      	ldr	r0, [sp, #16]
    80ee:	9301      	str	r3, [sp, #4]
    80f0:	f7ff fa26 	bl	7540 <__aeabi_uidivmod>
    80f4:	9801      	ldr	r0, [sp, #4]
    80f6:	040b      	lsls	r3, r1, #16
    80f8:	0431      	lsls	r1, r6, #16
    80fa:	0c09      	lsrs	r1, r1, #16
    80fc:	4319      	orrs	r1, r3
    80fe:	4288      	cmp	r0, r1
    8100:	d90d      	bls.n	811e <__aeabi_ddiv+0x38a>
    8102:	4653      	mov	r3, sl
    8104:	4441      	add	r1, r8
    8106:	3b01      	subs	r3, #1
    8108:	4588      	cmp	r8, r1
    810a:	d900      	bls.n	810e <__aeabi_ddiv+0x37a>
    810c:	e0e8      	b.n	82e0 <__aeabi_ddiv+0x54c>
    810e:	4288      	cmp	r0, r1
    8110:	d800      	bhi.n	8114 <__aeabi_ddiv+0x380>
    8112:	e0e5      	b.n	82e0 <__aeabi_ddiv+0x54c>
    8114:	2302      	movs	r3, #2
    8116:	425b      	negs	r3, r3
    8118:	469c      	mov	ip, r3
    811a:	4441      	add	r1, r8
    811c:	44e2      	add	sl, ip
    811e:	9b01      	ldr	r3, [sp, #4]
    8120:	042d      	lsls	r5, r5, #16
    8122:	1ace      	subs	r6, r1, r3
    8124:	4651      	mov	r1, sl
    8126:	4329      	orrs	r1, r5
    8128:	9d05      	ldr	r5, [sp, #20]
    812a:	464f      	mov	r7, r9
    812c:	002a      	movs	r2, r5
    812e:	040b      	lsls	r3, r1, #16
    8130:	0c08      	lsrs	r0, r1, #16
    8132:	0c1b      	lsrs	r3, r3, #16
    8134:	435a      	muls	r2, r3
    8136:	4345      	muls	r5, r0
    8138:	437b      	muls	r3, r7
    813a:	4378      	muls	r0, r7
    813c:	195b      	adds	r3, r3, r5
    813e:	0c17      	lsrs	r7, r2, #16
    8140:	18fb      	adds	r3, r7, r3
    8142:	429d      	cmp	r5, r3
    8144:	d903      	bls.n	814e <__aeabi_ddiv+0x3ba>
    8146:	2580      	movs	r5, #128	; 0x80
    8148:	026d      	lsls	r5, r5, #9
    814a:	46ac      	mov	ip, r5
    814c:	4460      	add	r0, ip
    814e:	0c1d      	lsrs	r5, r3, #16
    8150:	0412      	lsls	r2, r2, #16
    8152:	041b      	lsls	r3, r3, #16
    8154:	0c12      	lsrs	r2, r2, #16
    8156:	1828      	adds	r0, r5, r0
    8158:	189b      	adds	r3, r3, r2
    815a:	4286      	cmp	r6, r0
    815c:	d200      	bcs.n	8160 <__aeabi_ddiv+0x3cc>
    815e:	e093      	b.n	8288 <__aeabi_ddiv+0x4f4>
    8160:	d100      	bne.n	8164 <__aeabi_ddiv+0x3d0>
    8162:	e08e      	b.n	8282 <__aeabi_ddiv+0x4ee>
    8164:	2301      	movs	r3, #1
    8166:	4319      	orrs	r1, r3
    8168:	4ba0      	ldr	r3, [pc, #640]	; (83ec <__aeabi_ddiv+0x658>)
    816a:	18e3      	adds	r3, r4, r3
    816c:	2b00      	cmp	r3, #0
    816e:	dc00      	bgt.n	8172 <__aeabi_ddiv+0x3de>
    8170:	e099      	b.n	82a6 <__aeabi_ddiv+0x512>
    8172:	074a      	lsls	r2, r1, #29
    8174:	d000      	beq.n	8178 <__aeabi_ddiv+0x3e4>
    8176:	e09e      	b.n	82b6 <__aeabi_ddiv+0x522>
    8178:	465a      	mov	r2, fp
    817a:	01d2      	lsls	r2, r2, #7
    817c:	d506      	bpl.n	818c <__aeabi_ddiv+0x3f8>
    817e:	465a      	mov	r2, fp
    8180:	4b9b      	ldr	r3, [pc, #620]	; (83f0 <__aeabi_ddiv+0x65c>)
    8182:	401a      	ands	r2, r3
    8184:	2380      	movs	r3, #128	; 0x80
    8186:	4693      	mov	fp, r2
    8188:	00db      	lsls	r3, r3, #3
    818a:	18e3      	adds	r3, r4, r3
    818c:	4a99      	ldr	r2, [pc, #612]	; (83f4 <__aeabi_ddiv+0x660>)
    818e:	4293      	cmp	r3, r2
    8190:	dd68      	ble.n	8264 <__aeabi_ddiv+0x4d0>
    8192:	2301      	movs	r3, #1
    8194:	9a02      	ldr	r2, [sp, #8]
    8196:	4c98      	ldr	r4, [pc, #608]	; (83f8 <__aeabi_ddiv+0x664>)
    8198:	401a      	ands	r2, r3
    819a:	2300      	movs	r3, #0
    819c:	4694      	mov	ip, r2
    819e:	4698      	mov	r8, r3
    81a0:	2200      	movs	r2, #0
    81a2:	e6c5      	b.n	7f30 <__aeabi_ddiv+0x19c>
    81a4:	2280      	movs	r2, #128	; 0x80
    81a6:	464b      	mov	r3, r9
    81a8:	0312      	lsls	r2, r2, #12
    81aa:	4213      	tst	r3, r2
    81ac:	d00a      	beq.n	81c4 <__aeabi_ddiv+0x430>
    81ae:	465b      	mov	r3, fp
    81b0:	4213      	tst	r3, r2
    81b2:	d106      	bne.n	81c2 <__aeabi_ddiv+0x42e>
    81b4:	431a      	orrs	r2, r3
    81b6:	0312      	lsls	r2, r2, #12
    81b8:	0b12      	lsrs	r2, r2, #12
    81ba:	46ac      	mov	ip, r5
    81bc:	4688      	mov	r8, r1
    81be:	4c8e      	ldr	r4, [pc, #568]	; (83f8 <__aeabi_ddiv+0x664>)
    81c0:	e6b6      	b.n	7f30 <__aeabi_ddiv+0x19c>
    81c2:	464b      	mov	r3, r9
    81c4:	431a      	orrs	r2, r3
    81c6:	0312      	lsls	r2, r2, #12
    81c8:	0b12      	lsrs	r2, r2, #12
    81ca:	46bc      	mov	ip, r7
    81cc:	4c8a      	ldr	r4, [pc, #552]	; (83f8 <__aeabi_ddiv+0x664>)
    81ce:	e6af      	b.n	7f30 <__aeabi_ddiv+0x19c>
    81d0:	0003      	movs	r3, r0
    81d2:	465a      	mov	r2, fp
    81d4:	3b28      	subs	r3, #40	; 0x28
    81d6:	409a      	lsls	r2, r3
    81d8:	2300      	movs	r3, #0
    81da:	4691      	mov	r9, r2
    81dc:	4698      	mov	r8, r3
    81de:	e657      	b.n	7e90 <__aeabi_ddiv+0xfc>
    81e0:	4658      	mov	r0, fp
    81e2:	f000 ff0d 	bl	9000 <__clzsi2>
    81e6:	3020      	adds	r0, #32
    81e8:	e640      	b.n	7e6c <__aeabi_ddiv+0xd8>
    81ea:	0003      	movs	r3, r0
    81ec:	4652      	mov	r2, sl
    81ee:	3b28      	subs	r3, #40	; 0x28
    81f0:	409a      	lsls	r2, r3
    81f2:	2100      	movs	r1, #0
    81f4:	4693      	mov	fp, r2
    81f6:	e677      	b.n	7ee8 <__aeabi_ddiv+0x154>
    81f8:	f000 ff02 	bl	9000 <__clzsi2>
    81fc:	3020      	adds	r0, #32
    81fe:	e65f      	b.n	7ec0 <__aeabi_ddiv+0x12c>
    8200:	4588      	cmp	r8, r1
    8202:	d200      	bcs.n	8206 <__aeabi_ddiv+0x472>
    8204:	e6c7      	b.n	7f96 <__aeabi_ddiv+0x202>
    8206:	464b      	mov	r3, r9
    8208:	07de      	lsls	r6, r3, #31
    820a:	085d      	lsrs	r5, r3, #1
    820c:	4643      	mov	r3, r8
    820e:	085b      	lsrs	r3, r3, #1
    8210:	431e      	orrs	r6, r3
    8212:	4643      	mov	r3, r8
    8214:	07db      	lsls	r3, r3, #31
    8216:	469a      	mov	sl, r3
    8218:	e6c2      	b.n	7fa0 <__aeabi_ddiv+0x20c>
    821a:	2500      	movs	r5, #0
    821c:	4592      	cmp	sl, r2
    821e:	d300      	bcc.n	8222 <__aeabi_ddiv+0x48e>
    8220:	e733      	b.n	808a <__aeabi_ddiv+0x2f6>
    8222:	9e03      	ldr	r6, [sp, #12]
    8224:	4659      	mov	r1, fp
    8226:	46b4      	mov	ip, r6
    8228:	44e2      	add	sl, ip
    822a:	45b2      	cmp	sl, r6
    822c:	41ad      	sbcs	r5, r5
    822e:	426d      	negs	r5, r5
    8230:	4445      	add	r5, r8
    8232:	18eb      	adds	r3, r5, r3
    8234:	3901      	subs	r1, #1
    8236:	4598      	cmp	r8, r3
    8238:	d207      	bcs.n	824a <__aeabi_ddiv+0x4b6>
    823a:	4298      	cmp	r0, r3
    823c:	d900      	bls.n	8240 <__aeabi_ddiv+0x4ac>
    823e:	e07f      	b.n	8340 <__aeabi_ddiv+0x5ac>
    8240:	d100      	bne.n	8244 <__aeabi_ddiv+0x4b0>
    8242:	e0bc      	b.n	83be <__aeabi_ddiv+0x62a>
    8244:	1a1d      	subs	r5, r3, r0
    8246:	468b      	mov	fp, r1
    8248:	e71f      	b.n	808a <__aeabi_ddiv+0x2f6>
    824a:	4598      	cmp	r8, r3
    824c:	d1fa      	bne.n	8244 <__aeabi_ddiv+0x4b0>
    824e:	9d03      	ldr	r5, [sp, #12]
    8250:	4555      	cmp	r5, sl
    8252:	d9f2      	bls.n	823a <__aeabi_ddiv+0x4a6>
    8254:	4643      	mov	r3, r8
    8256:	468b      	mov	fp, r1
    8258:	1a1d      	subs	r5, r3, r0
    825a:	e716      	b.n	808a <__aeabi_ddiv+0x2f6>
    825c:	469b      	mov	fp, r3
    825e:	e6ca      	b.n	7ff6 <__aeabi_ddiv+0x262>
    8260:	0015      	movs	r5, r2
    8262:	e6e7      	b.n	8034 <__aeabi_ddiv+0x2a0>
    8264:	465a      	mov	r2, fp
    8266:	08c9      	lsrs	r1, r1, #3
    8268:	0752      	lsls	r2, r2, #29
    826a:	430a      	orrs	r2, r1
    826c:	055b      	lsls	r3, r3, #21
    826e:	4690      	mov	r8, r2
    8270:	0d5c      	lsrs	r4, r3, #21
    8272:	465a      	mov	r2, fp
    8274:	2301      	movs	r3, #1
    8276:	9902      	ldr	r1, [sp, #8]
    8278:	0252      	lsls	r2, r2, #9
    827a:	4019      	ands	r1, r3
    827c:	0b12      	lsrs	r2, r2, #12
    827e:	468c      	mov	ip, r1
    8280:	e656      	b.n	7f30 <__aeabi_ddiv+0x19c>
    8282:	2b00      	cmp	r3, #0
    8284:	d100      	bne.n	8288 <__aeabi_ddiv+0x4f4>
    8286:	e76f      	b.n	8168 <__aeabi_ddiv+0x3d4>
    8288:	4446      	add	r6, r8
    828a:	1e4a      	subs	r2, r1, #1
    828c:	45b0      	cmp	r8, r6
    828e:	d929      	bls.n	82e4 <__aeabi_ddiv+0x550>
    8290:	0011      	movs	r1, r2
    8292:	4286      	cmp	r6, r0
    8294:	d000      	beq.n	8298 <__aeabi_ddiv+0x504>
    8296:	e765      	b.n	8164 <__aeabi_ddiv+0x3d0>
    8298:	9a03      	ldr	r2, [sp, #12]
    829a:	4293      	cmp	r3, r2
    829c:	d000      	beq.n	82a0 <__aeabi_ddiv+0x50c>
    829e:	e761      	b.n	8164 <__aeabi_ddiv+0x3d0>
    82a0:	e762      	b.n	8168 <__aeabi_ddiv+0x3d4>
    82a2:	2101      	movs	r1, #1
    82a4:	4249      	negs	r1, r1
    82a6:	2001      	movs	r0, #1
    82a8:	1ac2      	subs	r2, r0, r3
    82aa:	2a38      	cmp	r2, #56	; 0x38
    82ac:	dd21      	ble.n	82f2 <__aeabi_ddiv+0x55e>
    82ae:	9b02      	ldr	r3, [sp, #8]
    82b0:	4003      	ands	r3, r0
    82b2:	469c      	mov	ip, r3
    82b4:	e638      	b.n	7f28 <__aeabi_ddiv+0x194>
    82b6:	220f      	movs	r2, #15
    82b8:	400a      	ands	r2, r1
    82ba:	2a04      	cmp	r2, #4
    82bc:	d100      	bne.n	82c0 <__aeabi_ddiv+0x52c>
    82be:	e75b      	b.n	8178 <__aeabi_ddiv+0x3e4>
    82c0:	000a      	movs	r2, r1
    82c2:	1d11      	adds	r1, r2, #4
    82c4:	4291      	cmp	r1, r2
    82c6:	4192      	sbcs	r2, r2
    82c8:	4252      	negs	r2, r2
    82ca:	4493      	add	fp, r2
    82cc:	e754      	b.n	8178 <__aeabi_ddiv+0x3e4>
    82ce:	4b47      	ldr	r3, [pc, #284]	; (83ec <__aeabi_ddiv+0x658>)
    82d0:	18e3      	adds	r3, r4, r3
    82d2:	2b00      	cmp	r3, #0
    82d4:	dde5      	ble.n	82a2 <__aeabi_ddiv+0x50e>
    82d6:	2201      	movs	r2, #1
    82d8:	4252      	negs	r2, r2
    82da:	e7f2      	b.n	82c2 <__aeabi_ddiv+0x52e>
    82dc:	001d      	movs	r5, r3
    82de:	e6fa      	b.n	80d6 <__aeabi_ddiv+0x342>
    82e0:	469a      	mov	sl, r3
    82e2:	e71c      	b.n	811e <__aeabi_ddiv+0x38a>
    82e4:	42b0      	cmp	r0, r6
    82e6:	d839      	bhi.n	835c <__aeabi_ddiv+0x5c8>
    82e8:	d06e      	beq.n	83c8 <__aeabi_ddiv+0x634>
    82ea:	0011      	movs	r1, r2
    82ec:	e73a      	b.n	8164 <__aeabi_ddiv+0x3d0>
    82ee:	9302      	str	r3, [sp, #8]
    82f0:	e73a      	b.n	8168 <__aeabi_ddiv+0x3d4>
    82f2:	2a1f      	cmp	r2, #31
    82f4:	dc3c      	bgt.n	8370 <__aeabi_ddiv+0x5dc>
    82f6:	2320      	movs	r3, #32
    82f8:	1a9b      	subs	r3, r3, r2
    82fa:	000c      	movs	r4, r1
    82fc:	4658      	mov	r0, fp
    82fe:	4099      	lsls	r1, r3
    8300:	4098      	lsls	r0, r3
    8302:	1e4b      	subs	r3, r1, #1
    8304:	4199      	sbcs	r1, r3
    8306:	465b      	mov	r3, fp
    8308:	40d4      	lsrs	r4, r2
    830a:	40d3      	lsrs	r3, r2
    830c:	4320      	orrs	r0, r4
    830e:	4308      	orrs	r0, r1
    8310:	001a      	movs	r2, r3
    8312:	0743      	lsls	r3, r0, #29
    8314:	d009      	beq.n	832a <__aeabi_ddiv+0x596>
    8316:	230f      	movs	r3, #15
    8318:	4003      	ands	r3, r0
    831a:	2b04      	cmp	r3, #4
    831c:	d005      	beq.n	832a <__aeabi_ddiv+0x596>
    831e:	0001      	movs	r1, r0
    8320:	1d08      	adds	r0, r1, #4
    8322:	4288      	cmp	r0, r1
    8324:	419b      	sbcs	r3, r3
    8326:	425b      	negs	r3, r3
    8328:	18d2      	adds	r2, r2, r3
    832a:	0213      	lsls	r3, r2, #8
    832c:	d53a      	bpl.n	83a4 <__aeabi_ddiv+0x610>
    832e:	2301      	movs	r3, #1
    8330:	9a02      	ldr	r2, [sp, #8]
    8332:	2401      	movs	r4, #1
    8334:	401a      	ands	r2, r3
    8336:	2300      	movs	r3, #0
    8338:	4694      	mov	ip, r2
    833a:	4698      	mov	r8, r3
    833c:	2200      	movs	r2, #0
    833e:	e5f7      	b.n	7f30 <__aeabi_ddiv+0x19c>
    8340:	2102      	movs	r1, #2
    8342:	4249      	negs	r1, r1
    8344:	468c      	mov	ip, r1
    8346:	9d03      	ldr	r5, [sp, #12]
    8348:	44e3      	add	fp, ip
    834a:	46ac      	mov	ip, r5
    834c:	44e2      	add	sl, ip
    834e:	45aa      	cmp	sl, r5
    8350:	41ad      	sbcs	r5, r5
    8352:	426d      	negs	r5, r5
    8354:	4445      	add	r5, r8
    8356:	18ed      	adds	r5, r5, r3
    8358:	1a2d      	subs	r5, r5, r0
    835a:	e696      	b.n	808a <__aeabi_ddiv+0x2f6>
    835c:	1e8a      	subs	r2, r1, #2
    835e:	9903      	ldr	r1, [sp, #12]
    8360:	004d      	lsls	r5, r1, #1
    8362:	428d      	cmp	r5, r1
    8364:	4189      	sbcs	r1, r1
    8366:	4249      	negs	r1, r1
    8368:	4441      	add	r1, r8
    836a:	1876      	adds	r6, r6, r1
    836c:	9503      	str	r5, [sp, #12]
    836e:	e78f      	b.n	8290 <__aeabi_ddiv+0x4fc>
    8370:	201f      	movs	r0, #31
    8372:	4240      	negs	r0, r0
    8374:	1ac3      	subs	r3, r0, r3
    8376:	4658      	mov	r0, fp
    8378:	40d8      	lsrs	r0, r3
    837a:	0003      	movs	r3, r0
    837c:	2a20      	cmp	r2, #32
    837e:	d028      	beq.n	83d2 <__aeabi_ddiv+0x63e>
    8380:	2040      	movs	r0, #64	; 0x40
    8382:	465d      	mov	r5, fp
    8384:	1a82      	subs	r2, r0, r2
    8386:	4095      	lsls	r5, r2
    8388:	4329      	orrs	r1, r5
    838a:	1e4a      	subs	r2, r1, #1
    838c:	4191      	sbcs	r1, r2
    838e:	4319      	orrs	r1, r3
    8390:	2307      	movs	r3, #7
    8392:	2200      	movs	r2, #0
    8394:	400b      	ands	r3, r1
    8396:	d009      	beq.n	83ac <__aeabi_ddiv+0x618>
    8398:	230f      	movs	r3, #15
    839a:	2200      	movs	r2, #0
    839c:	400b      	ands	r3, r1
    839e:	0008      	movs	r0, r1
    83a0:	2b04      	cmp	r3, #4
    83a2:	d1bd      	bne.n	8320 <__aeabi_ddiv+0x58c>
    83a4:	0001      	movs	r1, r0
    83a6:	0753      	lsls	r3, r2, #29
    83a8:	0252      	lsls	r2, r2, #9
    83aa:	0b12      	lsrs	r2, r2, #12
    83ac:	08c9      	lsrs	r1, r1, #3
    83ae:	4319      	orrs	r1, r3
    83b0:	2301      	movs	r3, #1
    83b2:	4688      	mov	r8, r1
    83b4:	9902      	ldr	r1, [sp, #8]
    83b6:	2400      	movs	r4, #0
    83b8:	4019      	ands	r1, r3
    83ba:	468c      	mov	ip, r1
    83bc:	e5b8      	b.n	7f30 <__aeabi_ddiv+0x19c>
    83be:	4552      	cmp	r2, sl
    83c0:	d8be      	bhi.n	8340 <__aeabi_ddiv+0x5ac>
    83c2:	468b      	mov	fp, r1
    83c4:	2500      	movs	r5, #0
    83c6:	e660      	b.n	808a <__aeabi_ddiv+0x2f6>
    83c8:	9d03      	ldr	r5, [sp, #12]
    83ca:	429d      	cmp	r5, r3
    83cc:	d3c6      	bcc.n	835c <__aeabi_ddiv+0x5c8>
    83ce:	0011      	movs	r1, r2
    83d0:	e762      	b.n	8298 <__aeabi_ddiv+0x504>
    83d2:	2500      	movs	r5, #0
    83d4:	e7d8      	b.n	8388 <__aeabi_ddiv+0x5f4>
    83d6:	2280      	movs	r2, #128	; 0x80
    83d8:	465b      	mov	r3, fp
    83da:	0312      	lsls	r2, r2, #12
    83dc:	431a      	orrs	r2, r3
    83de:	9b01      	ldr	r3, [sp, #4]
    83e0:	0312      	lsls	r2, r2, #12
    83e2:	0b12      	lsrs	r2, r2, #12
    83e4:	469c      	mov	ip, r3
    83e6:	4688      	mov	r8, r1
    83e8:	4c03      	ldr	r4, [pc, #12]	; (83f8 <__aeabi_ddiv+0x664>)
    83ea:	e5a1      	b.n	7f30 <__aeabi_ddiv+0x19c>
    83ec:	000003ff 	.word	0x000003ff
    83f0:	feffffff 	.word	0xfeffffff
    83f4:	000007fe 	.word	0x000007fe
    83f8:	000007ff 	.word	0x000007ff

000083fc <__aeabi_dmul>:
    83fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    83fe:	4657      	mov	r7, sl
    8400:	4645      	mov	r5, r8
    8402:	46de      	mov	lr, fp
    8404:	464e      	mov	r6, r9
    8406:	b5e0      	push	{r5, r6, r7, lr}
    8408:	030c      	lsls	r4, r1, #12
    840a:	4698      	mov	r8, r3
    840c:	004e      	lsls	r6, r1, #1
    840e:	0b23      	lsrs	r3, r4, #12
    8410:	b087      	sub	sp, #28
    8412:	0007      	movs	r7, r0
    8414:	4692      	mov	sl, r2
    8416:	469b      	mov	fp, r3
    8418:	0d76      	lsrs	r6, r6, #21
    841a:	0fcd      	lsrs	r5, r1, #31
    841c:	2e00      	cmp	r6, #0
    841e:	d06b      	beq.n	84f8 <__aeabi_dmul+0xfc>
    8420:	4b6d      	ldr	r3, [pc, #436]	; (85d8 <__aeabi_dmul+0x1dc>)
    8422:	429e      	cmp	r6, r3
    8424:	d035      	beq.n	8492 <__aeabi_dmul+0x96>
    8426:	2480      	movs	r4, #128	; 0x80
    8428:	465b      	mov	r3, fp
    842a:	0f42      	lsrs	r2, r0, #29
    842c:	0424      	lsls	r4, r4, #16
    842e:	00db      	lsls	r3, r3, #3
    8430:	4314      	orrs	r4, r2
    8432:	431c      	orrs	r4, r3
    8434:	00c3      	lsls	r3, r0, #3
    8436:	4699      	mov	r9, r3
    8438:	4b68      	ldr	r3, [pc, #416]	; (85dc <__aeabi_dmul+0x1e0>)
    843a:	46a3      	mov	fp, r4
    843c:	469c      	mov	ip, r3
    843e:	2300      	movs	r3, #0
    8440:	2700      	movs	r7, #0
    8442:	4466      	add	r6, ip
    8444:	9302      	str	r3, [sp, #8]
    8446:	4643      	mov	r3, r8
    8448:	031c      	lsls	r4, r3, #12
    844a:	005a      	lsls	r2, r3, #1
    844c:	0fdb      	lsrs	r3, r3, #31
    844e:	4650      	mov	r0, sl
    8450:	0b24      	lsrs	r4, r4, #12
    8452:	0d52      	lsrs	r2, r2, #21
    8454:	4698      	mov	r8, r3
    8456:	d100      	bne.n	845a <__aeabi_dmul+0x5e>
    8458:	e076      	b.n	8548 <__aeabi_dmul+0x14c>
    845a:	4b5f      	ldr	r3, [pc, #380]	; (85d8 <__aeabi_dmul+0x1dc>)
    845c:	429a      	cmp	r2, r3
    845e:	d06d      	beq.n	853c <__aeabi_dmul+0x140>
    8460:	2380      	movs	r3, #128	; 0x80
    8462:	0f41      	lsrs	r1, r0, #29
    8464:	041b      	lsls	r3, r3, #16
    8466:	430b      	orrs	r3, r1
    8468:	495c      	ldr	r1, [pc, #368]	; (85dc <__aeabi_dmul+0x1e0>)
    846a:	00e4      	lsls	r4, r4, #3
    846c:	468c      	mov	ip, r1
    846e:	431c      	orrs	r4, r3
    8470:	00c3      	lsls	r3, r0, #3
    8472:	2000      	movs	r0, #0
    8474:	4462      	add	r2, ip
    8476:	4641      	mov	r1, r8
    8478:	18b6      	adds	r6, r6, r2
    847a:	4069      	eors	r1, r5
    847c:	1c72      	adds	r2, r6, #1
    847e:	9101      	str	r1, [sp, #4]
    8480:	4694      	mov	ip, r2
    8482:	4307      	orrs	r7, r0
    8484:	2f0f      	cmp	r7, #15
    8486:	d900      	bls.n	848a <__aeabi_dmul+0x8e>
    8488:	e0b0      	b.n	85ec <__aeabi_dmul+0x1f0>
    848a:	4a55      	ldr	r2, [pc, #340]	; (85e0 <__aeabi_dmul+0x1e4>)
    848c:	00bf      	lsls	r7, r7, #2
    848e:	59d2      	ldr	r2, [r2, r7]
    8490:	4697      	mov	pc, r2
    8492:	465b      	mov	r3, fp
    8494:	4303      	orrs	r3, r0
    8496:	4699      	mov	r9, r3
    8498:	d000      	beq.n	849c <__aeabi_dmul+0xa0>
    849a:	e087      	b.n	85ac <__aeabi_dmul+0x1b0>
    849c:	2300      	movs	r3, #0
    849e:	469b      	mov	fp, r3
    84a0:	3302      	adds	r3, #2
    84a2:	2708      	movs	r7, #8
    84a4:	9302      	str	r3, [sp, #8]
    84a6:	e7ce      	b.n	8446 <__aeabi_dmul+0x4a>
    84a8:	4642      	mov	r2, r8
    84aa:	9201      	str	r2, [sp, #4]
    84ac:	2802      	cmp	r0, #2
    84ae:	d067      	beq.n	8580 <__aeabi_dmul+0x184>
    84b0:	2803      	cmp	r0, #3
    84b2:	d100      	bne.n	84b6 <__aeabi_dmul+0xba>
    84b4:	e20e      	b.n	88d4 <__aeabi_dmul+0x4d8>
    84b6:	2801      	cmp	r0, #1
    84b8:	d000      	beq.n	84bc <__aeabi_dmul+0xc0>
    84ba:	e162      	b.n	8782 <__aeabi_dmul+0x386>
    84bc:	2300      	movs	r3, #0
    84be:	2400      	movs	r4, #0
    84c0:	2200      	movs	r2, #0
    84c2:	4699      	mov	r9, r3
    84c4:	9901      	ldr	r1, [sp, #4]
    84c6:	4001      	ands	r1, r0
    84c8:	b2cd      	uxtb	r5, r1
    84ca:	2100      	movs	r1, #0
    84cc:	0312      	lsls	r2, r2, #12
    84ce:	0d0b      	lsrs	r3, r1, #20
    84d0:	0b12      	lsrs	r2, r2, #12
    84d2:	051b      	lsls	r3, r3, #20
    84d4:	4313      	orrs	r3, r2
    84d6:	4a43      	ldr	r2, [pc, #268]	; (85e4 <__aeabi_dmul+0x1e8>)
    84d8:	0524      	lsls	r4, r4, #20
    84da:	4013      	ands	r3, r2
    84dc:	431c      	orrs	r4, r3
    84de:	0064      	lsls	r4, r4, #1
    84e0:	07ed      	lsls	r5, r5, #31
    84e2:	0864      	lsrs	r4, r4, #1
    84e4:	432c      	orrs	r4, r5
    84e6:	4648      	mov	r0, r9
    84e8:	0021      	movs	r1, r4
    84ea:	b007      	add	sp, #28
    84ec:	bc3c      	pop	{r2, r3, r4, r5}
    84ee:	4690      	mov	r8, r2
    84f0:	4699      	mov	r9, r3
    84f2:	46a2      	mov	sl, r4
    84f4:	46ab      	mov	fp, r5
    84f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84f8:	4303      	orrs	r3, r0
    84fa:	4699      	mov	r9, r3
    84fc:	d04f      	beq.n	859e <__aeabi_dmul+0x1a2>
    84fe:	465b      	mov	r3, fp
    8500:	2b00      	cmp	r3, #0
    8502:	d100      	bne.n	8506 <__aeabi_dmul+0x10a>
    8504:	e189      	b.n	881a <__aeabi_dmul+0x41e>
    8506:	4658      	mov	r0, fp
    8508:	f000 fd7a 	bl	9000 <__clzsi2>
    850c:	0003      	movs	r3, r0
    850e:	3b0b      	subs	r3, #11
    8510:	2b1c      	cmp	r3, #28
    8512:	dd00      	ble.n	8516 <__aeabi_dmul+0x11a>
    8514:	e17a      	b.n	880c <__aeabi_dmul+0x410>
    8516:	221d      	movs	r2, #29
    8518:	1ad3      	subs	r3, r2, r3
    851a:	003a      	movs	r2, r7
    851c:	0001      	movs	r1, r0
    851e:	465c      	mov	r4, fp
    8520:	40da      	lsrs	r2, r3
    8522:	3908      	subs	r1, #8
    8524:	408c      	lsls	r4, r1
    8526:	0013      	movs	r3, r2
    8528:	408f      	lsls	r7, r1
    852a:	4323      	orrs	r3, r4
    852c:	469b      	mov	fp, r3
    852e:	46b9      	mov	r9, r7
    8530:	2300      	movs	r3, #0
    8532:	4e2d      	ldr	r6, [pc, #180]	; (85e8 <__aeabi_dmul+0x1ec>)
    8534:	2700      	movs	r7, #0
    8536:	1a36      	subs	r6, r6, r0
    8538:	9302      	str	r3, [sp, #8]
    853a:	e784      	b.n	8446 <__aeabi_dmul+0x4a>
    853c:	4653      	mov	r3, sl
    853e:	4323      	orrs	r3, r4
    8540:	d12a      	bne.n	8598 <__aeabi_dmul+0x19c>
    8542:	2400      	movs	r4, #0
    8544:	2002      	movs	r0, #2
    8546:	e796      	b.n	8476 <__aeabi_dmul+0x7a>
    8548:	4653      	mov	r3, sl
    854a:	4323      	orrs	r3, r4
    854c:	d020      	beq.n	8590 <__aeabi_dmul+0x194>
    854e:	2c00      	cmp	r4, #0
    8550:	d100      	bne.n	8554 <__aeabi_dmul+0x158>
    8552:	e157      	b.n	8804 <__aeabi_dmul+0x408>
    8554:	0020      	movs	r0, r4
    8556:	f000 fd53 	bl	9000 <__clzsi2>
    855a:	0003      	movs	r3, r0
    855c:	3b0b      	subs	r3, #11
    855e:	2b1c      	cmp	r3, #28
    8560:	dd00      	ble.n	8564 <__aeabi_dmul+0x168>
    8562:	e149      	b.n	87f8 <__aeabi_dmul+0x3fc>
    8564:	211d      	movs	r1, #29
    8566:	1acb      	subs	r3, r1, r3
    8568:	4651      	mov	r1, sl
    856a:	0002      	movs	r2, r0
    856c:	40d9      	lsrs	r1, r3
    856e:	4653      	mov	r3, sl
    8570:	3a08      	subs	r2, #8
    8572:	4094      	lsls	r4, r2
    8574:	4093      	lsls	r3, r2
    8576:	430c      	orrs	r4, r1
    8578:	4a1b      	ldr	r2, [pc, #108]	; (85e8 <__aeabi_dmul+0x1ec>)
    857a:	1a12      	subs	r2, r2, r0
    857c:	2000      	movs	r0, #0
    857e:	e77a      	b.n	8476 <__aeabi_dmul+0x7a>
    8580:	2501      	movs	r5, #1
    8582:	9b01      	ldr	r3, [sp, #4]
    8584:	4c14      	ldr	r4, [pc, #80]	; (85d8 <__aeabi_dmul+0x1dc>)
    8586:	401d      	ands	r5, r3
    8588:	2300      	movs	r3, #0
    858a:	2200      	movs	r2, #0
    858c:	4699      	mov	r9, r3
    858e:	e79c      	b.n	84ca <__aeabi_dmul+0xce>
    8590:	2400      	movs	r4, #0
    8592:	2200      	movs	r2, #0
    8594:	2001      	movs	r0, #1
    8596:	e76e      	b.n	8476 <__aeabi_dmul+0x7a>
    8598:	4653      	mov	r3, sl
    859a:	2003      	movs	r0, #3
    859c:	e76b      	b.n	8476 <__aeabi_dmul+0x7a>
    859e:	2300      	movs	r3, #0
    85a0:	469b      	mov	fp, r3
    85a2:	3301      	adds	r3, #1
    85a4:	2704      	movs	r7, #4
    85a6:	2600      	movs	r6, #0
    85a8:	9302      	str	r3, [sp, #8]
    85aa:	e74c      	b.n	8446 <__aeabi_dmul+0x4a>
    85ac:	2303      	movs	r3, #3
    85ae:	4681      	mov	r9, r0
    85b0:	270c      	movs	r7, #12
    85b2:	9302      	str	r3, [sp, #8]
    85b4:	e747      	b.n	8446 <__aeabi_dmul+0x4a>
    85b6:	2280      	movs	r2, #128	; 0x80
    85b8:	2300      	movs	r3, #0
    85ba:	2500      	movs	r5, #0
    85bc:	0312      	lsls	r2, r2, #12
    85be:	4699      	mov	r9, r3
    85c0:	4c05      	ldr	r4, [pc, #20]	; (85d8 <__aeabi_dmul+0x1dc>)
    85c2:	e782      	b.n	84ca <__aeabi_dmul+0xce>
    85c4:	465c      	mov	r4, fp
    85c6:	464b      	mov	r3, r9
    85c8:	9802      	ldr	r0, [sp, #8]
    85ca:	e76f      	b.n	84ac <__aeabi_dmul+0xb0>
    85cc:	465c      	mov	r4, fp
    85ce:	464b      	mov	r3, r9
    85d0:	9501      	str	r5, [sp, #4]
    85d2:	9802      	ldr	r0, [sp, #8]
    85d4:	e76a      	b.n	84ac <__aeabi_dmul+0xb0>
    85d6:	46c0      	nop			; (mov r8, r8)
    85d8:	000007ff 	.word	0x000007ff
    85dc:	fffffc01 	.word	0xfffffc01
    85e0:	0000b684 	.word	0x0000b684
    85e4:	800fffff 	.word	0x800fffff
    85e8:	fffffc0d 	.word	0xfffffc0d
    85ec:	464a      	mov	r2, r9
    85ee:	4649      	mov	r1, r9
    85f0:	0c17      	lsrs	r7, r2, #16
    85f2:	0c1a      	lsrs	r2, r3, #16
    85f4:	041b      	lsls	r3, r3, #16
    85f6:	0c1b      	lsrs	r3, r3, #16
    85f8:	0408      	lsls	r0, r1, #16
    85fa:	0019      	movs	r1, r3
    85fc:	0c00      	lsrs	r0, r0, #16
    85fe:	4341      	muls	r1, r0
    8600:	0015      	movs	r5, r2
    8602:	4688      	mov	r8, r1
    8604:	0019      	movs	r1, r3
    8606:	437d      	muls	r5, r7
    8608:	4379      	muls	r1, r7
    860a:	9503      	str	r5, [sp, #12]
    860c:	4689      	mov	r9, r1
    860e:	0029      	movs	r1, r5
    8610:	0015      	movs	r5, r2
    8612:	4345      	muls	r5, r0
    8614:	444d      	add	r5, r9
    8616:	9502      	str	r5, [sp, #8]
    8618:	4645      	mov	r5, r8
    861a:	0c2d      	lsrs	r5, r5, #16
    861c:	46aa      	mov	sl, r5
    861e:	9d02      	ldr	r5, [sp, #8]
    8620:	4455      	add	r5, sl
    8622:	45a9      	cmp	r9, r5
    8624:	d906      	bls.n	8634 <__aeabi_dmul+0x238>
    8626:	468a      	mov	sl, r1
    8628:	2180      	movs	r1, #128	; 0x80
    862a:	0249      	lsls	r1, r1, #9
    862c:	4689      	mov	r9, r1
    862e:	44ca      	add	sl, r9
    8630:	4651      	mov	r1, sl
    8632:	9103      	str	r1, [sp, #12]
    8634:	0c29      	lsrs	r1, r5, #16
    8636:	9104      	str	r1, [sp, #16]
    8638:	4641      	mov	r1, r8
    863a:	0409      	lsls	r1, r1, #16
    863c:	042d      	lsls	r5, r5, #16
    863e:	0c09      	lsrs	r1, r1, #16
    8640:	4688      	mov	r8, r1
    8642:	0029      	movs	r1, r5
    8644:	0c25      	lsrs	r5, r4, #16
    8646:	0424      	lsls	r4, r4, #16
    8648:	4441      	add	r1, r8
    864a:	0c24      	lsrs	r4, r4, #16
    864c:	9105      	str	r1, [sp, #20]
    864e:	0021      	movs	r1, r4
    8650:	4341      	muls	r1, r0
    8652:	4688      	mov	r8, r1
    8654:	0021      	movs	r1, r4
    8656:	4379      	muls	r1, r7
    8658:	468a      	mov	sl, r1
    865a:	4368      	muls	r0, r5
    865c:	4641      	mov	r1, r8
    865e:	4450      	add	r0, sl
    8660:	4681      	mov	r9, r0
    8662:	0c08      	lsrs	r0, r1, #16
    8664:	4448      	add	r0, r9
    8666:	436f      	muls	r7, r5
    8668:	4582      	cmp	sl, r0
    866a:	d903      	bls.n	8674 <__aeabi_dmul+0x278>
    866c:	2180      	movs	r1, #128	; 0x80
    866e:	0249      	lsls	r1, r1, #9
    8670:	4689      	mov	r9, r1
    8672:	444f      	add	r7, r9
    8674:	0c01      	lsrs	r1, r0, #16
    8676:	4689      	mov	r9, r1
    8678:	0039      	movs	r1, r7
    867a:	4449      	add	r1, r9
    867c:	9102      	str	r1, [sp, #8]
    867e:	4641      	mov	r1, r8
    8680:	040f      	lsls	r7, r1, #16
    8682:	9904      	ldr	r1, [sp, #16]
    8684:	0c3f      	lsrs	r7, r7, #16
    8686:	4688      	mov	r8, r1
    8688:	0400      	lsls	r0, r0, #16
    868a:	19c0      	adds	r0, r0, r7
    868c:	4480      	add	r8, r0
    868e:	4641      	mov	r1, r8
    8690:	9104      	str	r1, [sp, #16]
    8692:	4659      	mov	r1, fp
    8694:	0c0f      	lsrs	r7, r1, #16
    8696:	0409      	lsls	r1, r1, #16
    8698:	0c09      	lsrs	r1, r1, #16
    869a:	4688      	mov	r8, r1
    869c:	4359      	muls	r1, r3
    869e:	468a      	mov	sl, r1
    86a0:	0039      	movs	r1, r7
    86a2:	4351      	muls	r1, r2
    86a4:	4689      	mov	r9, r1
    86a6:	4641      	mov	r1, r8
    86a8:	434a      	muls	r2, r1
    86aa:	4651      	mov	r1, sl
    86ac:	0c09      	lsrs	r1, r1, #16
    86ae:	468b      	mov	fp, r1
    86b0:	437b      	muls	r3, r7
    86b2:	18d2      	adds	r2, r2, r3
    86b4:	445a      	add	r2, fp
    86b6:	4293      	cmp	r3, r2
    86b8:	d903      	bls.n	86c2 <__aeabi_dmul+0x2c6>
    86ba:	2380      	movs	r3, #128	; 0x80
    86bc:	025b      	lsls	r3, r3, #9
    86be:	469b      	mov	fp, r3
    86c0:	44d9      	add	r9, fp
    86c2:	4651      	mov	r1, sl
    86c4:	0409      	lsls	r1, r1, #16
    86c6:	0c09      	lsrs	r1, r1, #16
    86c8:	468a      	mov	sl, r1
    86ca:	4641      	mov	r1, r8
    86cc:	4361      	muls	r1, r4
    86ce:	437c      	muls	r4, r7
    86d0:	0c13      	lsrs	r3, r2, #16
    86d2:	0412      	lsls	r2, r2, #16
    86d4:	444b      	add	r3, r9
    86d6:	4452      	add	r2, sl
    86d8:	46a1      	mov	r9, r4
    86da:	468a      	mov	sl, r1
    86dc:	003c      	movs	r4, r7
    86de:	4641      	mov	r1, r8
    86e0:	436c      	muls	r4, r5
    86e2:	434d      	muls	r5, r1
    86e4:	4651      	mov	r1, sl
    86e6:	444d      	add	r5, r9
    86e8:	0c0f      	lsrs	r7, r1, #16
    86ea:	197d      	adds	r5, r7, r5
    86ec:	45a9      	cmp	r9, r5
    86ee:	d903      	bls.n	86f8 <__aeabi_dmul+0x2fc>
    86f0:	2180      	movs	r1, #128	; 0x80
    86f2:	0249      	lsls	r1, r1, #9
    86f4:	4688      	mov	r8, r1
    86f6:	4444      	add	r4, r8
    86f8:	9f04      	ldr	r7, [sp, #16]
    86fa:	9903      	ldr	r1, [sp, #12]
    86fc:	46b8      	mov	r8, r7
    86fe:	4441      	add	r1, r8
    8700:	468b      	mov	fp, r1
    8702:	4583      	cmp	fp, r0
    8704:	4180      	sbcs	r0, r0
    8706:	4241      	negs	r1, r0
    8708:	4688      	mov	r8, r1
    870a:	4651      	mov	r1, sl
    870c:	0408      	lsls	r0, r1, #16
    870e:	042f      	lsls	r7, r5, #16
    8710:	0c00      	lsrs	r0, r0, #16
    8712:	183f      	adds	r7, r7, r0
    8714:	4658      	mov	r0, fp
    8716:	9902      	ldr	r1, [sp, #8]
    8718:	1810      	adds	r0, r2, r0
    871a:	4689      	mov	r9, r1
    871c:	4290      	cmp	r0, r2
    871e:	4192      	sbcs	r2, r2
    8720:	444f      	add	r7, r9
    8722:	46ba      	mov	sl, r7
    8724:	4252      	negs	r2, r2
    8726:	4699      	mov	r9, r3
    8728:	4693      	mov	fp, r2
    872a:	44c2      	add	sl, r8
    872c:	44d1      	add	r9, sl
    872e:	44cb      	add	fp, r9
    8730:	428f      	cmp	r7, r1
    8732:	41bf      	sbcs	r7, r7
    8734:	45c2      	cmp	sl, r8
    8736:	4189      	sbcs	r1, r1
    8738:	4599      	cmp	r9, r3
    873a:	419b      	sbcs	r3, r3
    873c:	4593      	cmp	fp, r2
    873e:	4192      	sbcs	r2, r2
    8740:	427f      	negs	r7, r7
    8742:	4249      	negs	r1, r1
    8744:	0c2d      	lsrs	r5, r5, #16
    8746:	4252      	negs	r2, r2
    8748:	430f      	orrs	r7, r1
    874a:	425b      	negs	r3, r3
    874c:	4313      	orrs	r3, r2
    874e:	197f      	adds	r7, r7, r5
    8750:	18ff      	adds	r7, r7, r3
    8752:	465b      	mov	r3, fp
    8754:	193c      	adds	r4, r7, r4
    8756:	0ddb      	lsrs	r3, r3, #23
    8758:	9a05      	ldr	r2, [sp, #20]
    875a:	0264      	lsls	r4, r4, #9
    875c:	431c      	orrs	r4, r3
    875e:	0243      	lsls	r3, r0, #9
    8760:	4313      	orrs	r3, r2
    8762:	1e5d      	subs	r5, r3, #1
    8764:	41ab      	sbcs	r3, r5
    8766:	465a      	mov	r2, fp
    8768:	0dc0      	lsrs	r0, r0, #23
    876a:	4303      	orrs	r3, r0
    876c:	0252      	lsls	r2, r2, #9
    876e:	4313      	orrs	r3, r2
    8770:	01e2      	lsls	r2, r4, #7
    8772:	d556      	bpl.n	8822 <__aeabi_dmul+0x426>
    8774:	2001      	movs	r0, #1
    8776:	085a      	lsrs	r2, r3, #1
    8778:	4003      	ands	r3, r0
    877a:	4313      	orrs	r3, r2
    877c:	07e2      	lsls	r2, r4, #31
    877e:	4313      	orrs	r3, r2
    8780:	0864      	lsrs	r4, r4, #1
    8782:	485a      	ldr	r0, [pc, #360]	; (88ec <__aeabi_dmul+0x4f0>)
    8784:	4460      	add	r0, ip
    8786:	2800      	cmp	r0, #0
    8788:	dd4d      	ble.n	8826 <__aeabi_dmul+0x42a>
    878a:	075a      	lsls	r2, r3, #29
    878c:	d009      	beq.n	87a2 <__aeabi_dmul+0x3a6>
    878e:	220f      	movs	r2, #15
    8790:	401a      	ands	r2, r3
    8792:	2a04      	cmp	r2, #4
    8794:	d005      	beq.n	87a2 <__aeabi_dmul+0x3a6>
    8796:	1d1a      	adds	r2, r3, #4
    8798:	429a      	cmp	r2, r3
    879a:	419b      	sbcs	r3, r3
    879c:	425b      	negs	r3, r3
    879e:	18e4      	adds	r4, r4, r3
    87a0:	0013      	movs	r3, r2
    87a2:	01e2      	lsls	r2, r4, #7
    87a4:	d504      	bpl.n	87b0 <__aeabi_dmul+0x3b4>
    87a6:	2080      	movs	r0, #128	; 0x80
    87a8:	4a51      	ldr	r2, [pc, #324]	; (88f0 <__aeabi_dmul+0x4f4>)
    87aa:	00c0      	lsls	r0, r0, #3
    87ac:	4014      	ands	r4, r2
    87ae:	4460      	add	r0, ip
    87b0:	4a50      	ldr	r2, [pc, #320]	; (88f4 <__aeabi_dmul+0x4f8>)
    87b2:	4290      	cmp	r0, r2
    87b4:	dd00      	ble.n	87b8 <__aeabi_dmul+0x3bc>
    87b6:	e6e3      	b.n	8580 <__aeabi_dmul+0x184>
    87b8:	2501      	movs	r5, #1
    87ba:	08db      	lsrs	r3, r3, #3
    87bc:	0762      	lsls	r2, r4, #29
    87be:	431a      	orrs	r2, r3
    87c0:	0264      	lsls	r4, r4, #9
    87c2:	9b01      	ldr	r3, [sp, #4]
    87c4:	4691      	mov	r9, r2
    87c6:	0b22      	lsrs	r2, r4, #12
    87c8:	0544      	lsls	r4, r0, #21
    87ca:	0d64      	lsrs	r4, r4, #21
    87cc:	401d      	ands	r5, r3
    87ce:	e67c      	b.n	84ca <__aeabi_dmul+0xce>
    87d0:	2280      	movs	r2, #128	; 0x80
    87d2:	4659      	mov	r1, fp
    87d4:	0312      	lsls	r2, r2, #12
    87d6:	4211      	tst	r1, r2
    87d8:	d008      	beq.n	87ec <__aeabi_dmul+0x3f0>
    87da:	4214      	tst	r4, r2
    87dc:	d106      	bne.n	87ec <__aeabi_dmul+0x3f0>
    87de:	4322      	orrs	r2, r4
    87e0:	0312      	lsls	r2, r2, #12
    87e2:	0b12      	lsrs	r2, r2, #12
    87e4:	4645      	mov	r5, r8
    87e6:	4699      	mov	r9, r3
    87e8:	4c43      	ldr	r4, [pc, #268]	; (88f8 <__aeabi_dmul+0x4fc>)
    87ea:	e66e      	b.n	84ca <__aeabi_dmul+0xce>
    87ec:	465b      	mov	r3, fp
    87ee:	431a      	orrs	r2, r3
    87f0:	0312      	lsls	r2, r2, #12
    87f2:	0b12      	lsrs	r2, r2, #12
    87f4:	4c40      	ldr	r4, [pc, #256]	; (88f8 <__aeabi_dmul+0x4fc>)
    87f6:	e668      	b.n	84ca <__aeabi_dmul+0xce>
    87f8:	0003      	movs	r3, r0
    87fa:	4654      	mov	r4, sl
    87fc:	3b28      	subs	r3, #40	; 0x28
    87fe:	409c      	lsls	r4, r3
    8800:	2300      	movs	r3, #0
    8802:	e6b9      	b.n	8578 <__aeabi_dmul+0x17c>
    8804:	f000 fbfc 	bl	9000 <__clzsi2>
    8808:	3020      	adds	r0, #32
    880a:	e6a6      	b.n	855a <__aeabi_dmul+0x15e>
    880c:	0003      	movs	r3, r0
    880e:	3b28      	subs	r3, #40	; 0x28
    8810:	409f      	lsls	r7, r3
    8812:	2300      	movs	r3, #0
    8814:	46bb      	mov	fp, r7
    8816:	4699      	mov	r9, r3
    8818:	e68a      	b.n	8530 <__aeabi_dmul+0x134>
    881a:	f000 fbf1 	bl	9000 <__clzsi2>
    881e:	3020      	adds	r0, #32
    8820:	e674      	b.n	850c <__aeabi_dmul+0x110>
    8822:	46b4      	mov	ip, r6
    8824:	e7ad      	b.n	8782 <__aeabi_dmul+0x386>
    8826:	2501      	movs	r5, #1
    8828:	1a2a      	subs	r2, r5, r0
    882a:	2a38      	cmp	r2, #56	; 0x38
    882c:	dd06      	ble.n	883c <__aeabi_dmul+0x440>
    882e:	9b01      	ldr	r3, [sp, #4]
    8830:	2400      	movs	r4, #0
    8832:	401d      	ands	r5, r3
    8834:	2300      	movs	r3, #0
    8836:	2200      	movs	r2, #0
    8838:	4699      	mov	r9, r3
    883a:	e646      	b.n	84ca <__aeabi_dmul+0xce>
    883c:	2a1f      	cmp	r2, #31
    883e:	dc21      	bgt.n	8884 <__aeabi_dmul+0x488>
    8840:	2520      	movs	r5, #32
    8842:	0020      	movs	r0, r4
    8844:	1aad      	subs	r5, r5, r2
    8846:	001e      	movs	r6, r3
    8848:	40ab      	lsls	r3, r5
    884a:	40a8      	lsls	r0, r5
    884c:	40d6      	lsrs	r6, r2
    884e:	1e5d      	subs	r5, r3, #1
    8850:	41ab      	sbcs	r3, r5
    8852:	4330      	orrs	r0, r6
    8854:	4318      	orrs	r0, r3
    8856:	40d4      	lsrs	r4, r2
    8858:	0743      	lsls	r3, r0, #29
    885a:	d009      	beq.n	8870 <__aeabi_dmul+0x474>
    885c:	230f      	movs	r3, #15
    885e:	4003      	ands	r3, r0
    8860:	2b04      	cmp	r3, #4
    8862:	d005      	beq.n	8870 <__aeabi_dmul+0x474>
    8864:	0003      	movs	r3, r0
    8866:	1d18      	adds	r0, r3, #4
    8868:	4298      	cmp	r0, r3
    886a:	419b      	sbcs	r3, r3
    886c:	425b      	negs	r3, r3
    886e:	18e4      	adds	r4, r4, r3
    8870:	0223      	lsls	r3, r4, #8
    8872:	d521      	bpl.n	88b8 <__aeabi_dmul+0x4bc>
    8874:	2501      	movs	r5, #1
    8876:	9b01      	ldr	r3, [sp, #4]
    8878:	2401      	movs	r4, #1
    887a:	401d      	ands	r5, r3
    887c:	2300      	movs	r3, #0
    887e:	2200      	movs	r2, #0
    8880:	4699      	mov	r9, r3
    8882:	e622      	b.n	84ca <__aeabi_dmul+0xce>
    8884:	251f      	movs	r5, #31
    8886:	0021      	movs	r1, r4
    8888:	426d      	negs	r5, r5
    888a:	1a28      	subs	r0, r5, r0
    888c:	40c1      	lsrs	r1, r0
    888e:	0008      	movs	r0, r1
    8890:	2a20      	cmp	r2, #32
    8892:	d01d      	beq.n	88d0 <__aeabi_dmul+0x4d4>
    8894:	355f      	adds	r5, #95	; 0x5f
    8896:	1aaa      	subs	r2, r5, r2
    8898:	4094      	lsls	r4, r2
    889a:	4323      	orrs	r3, r4
    889c:	1e5c      	subs	r4, r3, #1
    889e:	41a3      	sbcs	r3, r4
    88a0:	2507      	movs	r5, #7
    88a2:	4303      	orrs	r3, r0
    88a4:	401d      	ands	r5, r3
    88a6:	2200      	movs	r2, #0
    88a8:	2d00      	cmp	r5, #0
    88aa:	d009      	beq.n	88c0 <__aeabi_dmul+0x4c4>
    88ac:	220f      	movs	r2, #15
    88ae:	2400      	movs	r4, #0
    88b0:	401a      	ands	r2, r3
    88b2:	0018      	movs	r0, r3
    88b4:	2a04      	cmp	r2, #4
    88b6:	d1d6      	bne.n	8866 <__aeabi_dmul+0x46a>
    88b8:	0003      	movs	r3, r0
    88ba:	0765      	lsls	r5, r4, #29
    88bc:	0264      	lsls	r4, r4, #9
    88be:	0b22      	lsrs	r2, r4, #12
    88c0:	08db      	lsrs	r3, r3, #3
    88c2:	432b      	orrs	r3, r5
    88c4:	2501      	movs	r5, #1
    88c6:	4699      	mov	r9, r3
    88c8:	9b01      	ldr	r3, [sp, #4]
    88ca:	2400      	movs	r4, #0
    88cc:	401d      	ands	r5, r3
    88ce:	e5fc      	b.n	84ca <__aeabi_dmul+0xce>
    88d0:	2400      	movs	r4, #0
    88d2:	e7e2      	b.n	889a <__aeabi_dmul+0x49e>
    88d4:	2280      	movs	r2, #128	; 0x80
    88d6:	2501      	movs	r5, #1
    88d8:	0312      	lsls	r2, r2, #12
    88da:	4322      	orrs	r2, r4
    88dc:	9901      	ldr	r1, [sp, #4]
    88de:	0312      	lsls	r2, r2, #12
    88e0:	0b12      	lsrs	r2, r2, #12
    88e2:	400d      	ands	r5, r1
    88e4:	4699      	mov	r9, r3
    88e6:	4c04      	ldr	r4, [pc, #16]	; (88f8 <__aeabi_dmul+0x4fc>)
    88e8:	e5ef      	b.n	84ca <__aeabi_dmul+0xce>
    88ea:	46c0      	nop			; (mov r8, r8)
    88ec:	000003ff 	.word	0x000003ff
    88f0:	feffffff 	.word	0xfeffffff
    88f4:	000007fe 	.word	0x000007fe
    88f8:	000007ff 	.word	0x000007ff

000088fc <__aeabi_dsub>:
    88fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    88fe:	4646      	mov	r6, r8
    8900:	46d6      	mov	lr, sl
    8902:	464f      	mov	r7, r9
    8904:	030c      	lsls	r4, r1, #12
    8906:	b5c0      	push	{r6, r7, lr}
    8908:	0fcd      	lsrs	r5, r1, #31
    890a:	004e      	lsls	r6, r1, #1
    890c:	0a61      	lsrs	r1, r4, #9
    890e:	0f44      	lsrs	r4, r0, #29
    8910:	430c      	orrs	r4, r1
    8912:	00c1      	lsls	r1, r0, #3
    8914:	0058      	lsls	r0, r3, #1
    8916:	0d40      	lsrs	r0, r0, #21
    8918:	4684      	mov	ip, r0
    891a:	468a      	mov	sl, r1
    891c:	000f      	movs	r7, r1
    891e:	0319      	lsls	r1, r3, #12
    8920:	0f50      	lsrs	r0, r2, #29
    8922:	0a49      	lsrs	r1, r1, #9
    8924:	4301      	orrs	r1, r0
    8926:	48c6      	ldr	r0, [pc, #792]	; (8c40 <__aeabi_dsub+0x344>)
    8928:	0d76      	lsrs	r6, r6, #21
    892a:	46a8      	mov	r8, r5
    892c:	0fdb      	lsrs	r3, r3, #31
    892e:	00d2      	lsls	r2, r2, #3
    8930:	4584      	cmp	ip, r0
    8932:	d100      	bne.n	8936 <__aeabi_dsub+0x3a>
    8934:	e0d8      	b.n	8ae8 <__aeabi_dsub+0x1ec>
    8936:	2001      	movs	r0, #1
    8938:	4043      	eors	r3, r0
    893a:	42ab      	cmp	r3, r5
    893c:	d100      	bne.n	8940 <__aeabi_dsub+0x44>
    893e:	e0a6      	b.n	8a8e <__aeabi_dsub+0x192>
    8940:	4660      	mov	r0, ip
    8942:	1a35      	subs	r5, r6, r0
    8944:	2d00      	cmp	r5, #0
    8946:	dc00      	bgt.n	894a <__aeabi_dsub+0x4e>
    8948:	e105      	b.n	8b56 <__aeabi_dsub+0x25a>
    894a:	2800      	cmp	r0, #0
    894c:	d110      	bne.n	8970 <__aeabi_dsub+0x74>
    894e:	000b      	movs	r3, r1
    8950:	4313      	orrs	r3, r2
    8952:	d100      	bne.n	8956 <__aeabi_dsub+0x5a>
    8954:	e0d7      	b.n	8b06 <__aeabi_dsub+0x20a>
    8956:	1e6b      	subs	r3, r5, #1
    8958:	2b00      	cmp	r3, #0
    895a:	d000      	beq.n	895e <__aeabi_dsub+0x62>
    895c:	e14b      	b.n	8bf6 <__aeabi_dsub+0x2fa>
    895e:	4653      	mov	r3, sl
    8960:	1a9f      	subs	r7, r3, r2
    8962:	45ba      	cmp	sl, r7
    8964:	4180      	sbcs	r0, r0
    8966:	1a64      	subs	r4, r4, r1
    8968:	4240      	negs	r0, r0
    896a:	1a24      	subs	r4, r4, r0
    896c:	2601      	movs	r6, #1
    896e:	e01e      	b.n	89ae <__aeabi_dsub+0xb2>
    8970:	4bb3      	ldr	r3, [pc, #716]	; (8c40 <__aeabi_dsub+0x344>)
    8972:	429e      	cmp	r6, r3
    8974:	d048      	beq.n	8a08 <__aeabi_dsub+0x10c>
    8976:	2380      	movs	r3, #128	; 0x80
    8978:	041b      	lsls	r3, r3, #16
    897a:	4319      	orrs	r1, r3
    897c:	2d38      	cmp	r5, #56	; 0x38
    897e:	dd00      	ble.n	8982 <__aeabi_dsub+0x86>
    8980:	e119      	b.n	8bb6 <__aeabi_dsub+0x2ba>
    8982:	2d1f      	cmp	r5, #31
    8984:	dd00      	ble.n	8988 <__aeabi_dsub+0x8c>
    8986:	e14c      	b.n	8c22 <__aeabi_dsub+0x326>
    8988:	2320      	movs	r3, #32
    898a:	000f      	movs	r7, r1
    898c:	1b5b      	subs	r3, r3, r5
    898e:	0010      	movs	r0, r2
    8990:	409a      	lsls	r2, r3
    8992:	409f      	lsls	r7, r3
    8994:	40e8      	lsrs	r0, r5
    8996:	1e53      	subs	r3, r2, #1
    8998:	419a      	sbcs	r2, r3
    899a:	40e9      	lsrs	r1, r5
    899c:	4307      	orrs	r7, r0
    899e:	4317      	orrs	r7, r2
    89a0:	4653      	mov	r3, sl
    89a2:	1bdf      	subs	r7, r3, r7
    89a4:	1a61      	subs	r1, r4, r1
    89a6:	45ba      	cmp	sl, r7
    89a8:	41a4      	sbcs	r4, r4
    89aa:	4264      	negs	r4, r4
    89ac:	1b0c      	subs	r4, r1, r4
    89ae:	0223      	lsls	r3, r4, #8
    89b0:	d400      	bmi.n	89b4 <__aeabi_dsub+0xb8>
    89b2:	e0c5      	b.n	8b40 <__aeabi_dsub+0x244>
    89b4:	0264      	lsls	r4, r4, #9
    89b6:	0a65      	lsrs	r5, r4, #9
    89b8:	2d00      	cmp	r5, #0
    89ba:	d100      	bne.n	89be <__aeabi_dsub+0xc2>
    89bc:	e0f6      	b.n	8bac <__aeabi_dsub+0x2b0>
    89be:	0028      	movs	r0, r5
    89c0:	f000 fb1e 	bl	9000 <__clzsi2>
    89c4:	0003      	movs	r3, r0
    89c6:	3b08      	subs	r3, #8
    89c8:	2b1f      	cmp	r3, #31
    89ca:	dd00      	ble.n	89ce <__aeabi_dsub+0xd2>
    89cc:	e0e9      	b.n	8ba2 <__aeabi_dsub+0x2a6>
    89ce:	2220      	movs	r2, #32
    89d0:	003c      	movs	r4, r7
    89d2:	1ad2      	subs	r2, r2, r3
    89d4:	409d      	lsls	r5, r3
    89d6:	40d4      	lsrs	r4, r2
    89d8:	409f      	lsls	r7, r3
    89da:	4325      	orrs	r5, r4
    89dc:	429e      	cmp	r6, r3
    89de:	dd00      	ble.n	89e2 <__aeabi_dsub+0xe6>
    89e0:	e0db      	b.n	8b9a <__aeabi_dsub+0x29e>
    89e2:	1b9e      	subs	r6, r3, r6
    89e4:	1c73      	adds	r3, r6, #1
    89e6:	2b1f      	cmp	r3, #31
    89e8:	dd00      	ble.n	89ec <__aeabi_dsub+0xf0>
    89ea:	e10a      	b.n	8c02 <__aeabi_dsub+0x306>
    89ec:	2220      	movs	r2, #32
    89ee:	0038      	movs	r0, r7
    89f0:	1ad2      	subs	r2, r2, r3
    89f2:	0029      	movs	r1, r5
    89f4:	4097      	lsls	r7, r2
    89f6:	002c      	movs	r4, r5
    89f8:	4091      	lsls	r1, r2
    89fa:	40d8      	lsrs	r0, r3
    89fc:	1e7a      	subs	r2, r7, #1
    89fe:	4197      	sbcs	r7, r2
    8a00:	40dc      	lsrs	r4, r3
    8a02:	2600      	movs	r6, #0
    8a04:	4301      	orrs	r1, r0
    8a06:	430f      	orrs	r7, r1
    8a08:	077b      	lsls	r3, r7, #29
    8a0a:	d009      	beq.n	8a20 <__aeabi_dsub+0x124>
    8a0c:	230f      	movs	r3, #15
    8a0e:	403b      	ands	r3, r7
    8a10:	2b04      	cmp	r3, #4
    8a12:	d005      	beq.n	8a20 <__aeabi_dsub+0x124>
    8a14:	1d3b      	adds	r3, r7, #4
    8a16:	42bb      	cmp	r3, r7
    8a18:	41bf      	sbcs	r7, r7
    8a1a:	427f      	negs	r7, r7
    8a1c:	19e4      	adds	r4, r4, r7
    8a1e:	001f      	movs	r7, r3
    8a20:	0223      	lsls	r3, r4, #8
    8a22:	d525      	bpl.n	8a70 <__aeabi_dsub+0x174>
    8a24:	4b86      	ldr	r3, [pc, #536]	; (8c40 <__aeabi_dsub+0x344>)
    8a26:	3601      	adds	r6, #1
    8a28:	429e      	cmp	r6, r3
    8a2a:	d100      	bne.n	8a2e <__aeabi_dsub+0x132>
    8a2c:	e0af      	b.n	8b8e <__aeabi_dsub+0x292>
    8a2e:	4b85      	ldr	r3, [pc, #532]	; (8c44 <__aeabi_dsub+0x348>)
    8a30:	2501      	movs	r5, #1
    8a32:	401c      	ands	r4, r3
    8a34:	4643      	mov	r3, r8
    8a36:	0762      	lsls	r2, r4, #29
    8a38:	08ff      	lsrs	r7, r7, #3
    8a3a:	0264      	lsls	r4, r4, #9
    8a3c:	0576      	lsls	r6, r6, #21
    8a3e:	4317      	orrs	r7, r2
    8a40:	0b24      	lsrs	r4, r4, #12
    8a42:	0d76      	lsrs	r6, r6, #21
    8a44:	401d      	ands	r5, r3
    8a46:	2100      	movs	r1, #0
    8a48:	0324      	lsls	r4, r4, #12
    8a4a:	0b23      	lsrs	r3, r4, #12
    8a4c:	0d0c      	lsrs	r4, r1, #20
    8a4e:	4a7e      	ldr	r2, [pc, #504]	; (8c48 <__aeabi_dsub+0x34c>)
    8a50:	0524      	lsls	r4, r4, #20
    8a52:	431c      	orrs	r4, r3
    8a54:	4014      	ands	r4, r2
    8a56:	0533      	lsls	r3, r6, #20
    8a58:	4323      	orrs	r3, r4
    8a5a:	005b      	lsls	r3, r3, #1
    8a5c:	07ed      	lsls	r5, r5, #31
    8a5e:	085b      	lsrs	r3, r3, #1
    8a60:	432b      	orrs	r3, r5
    8a62:	0038      	movs	r0, r7
    8a64:	0019      	movs	r1, r3
    8a66:	bc1c      	pop	{r2, r3, r4}
    8a68:	4690      	mov	r8, r2
    8a6a:	4699      	mov	r9, r3
    8a6c:	46a2      	mov	sl, r4
    8a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a70:	2501      	movs	r5, #1
    8a72:	4643      	mov	r3, r8
    8a74:	0762      	lsls	r2, r4, #29
    8a76:	08ff      	lsrs	r7, r7, #3
    8a78:	4317      	orrs	r7, r2
    8a7a:	08e4      	lsrs	r4, r4, #3
    8a7c:	401d      	ands	r5, r3
    8a7e:	4b70      	ldr	r3, [pc, #448]	; (8c40 <__aeabi_dsub+0x344>)
    8a80:	429e      	cmp	r6, r3
    8a82:	d036      	beq.n	8af2 <__aeabi_dsub+0x1f6>
    8a84:	0324      	lsls	r4, r4, #12
    8a86:	0576      	lsls	r6, r6, #21
    8a88:	0b24      	lsrs	r4, r4, #12
    8a8a:	0d76      	lsrs	r6, r6, #21
    8a8c:	e7db      	b.n	8a46 <__aeabi_dsub+0x14a>
    8a8e:	4663      	mov	r3, ip
    8a90:	1af3      	subs	r3, r6, r3
    8a92:	2b00      	cmp	r3, #0
    8a94:	dc00      	bgt.n	8a98 <__aeabi_dsub+0x19c>
    8a96:	e094      	b.n	8bc2 <__aeabi_dsub+0x2c6>
    8a98:	4660      	mov	r0, ip
    8a9a:	2800      	cmp	r0, #0
    8a9c:	d035      	beq.n	8b0a <__aeabi_dsub+0x20e>
    8a9e:	4868      	ldr	r0, [pc, #416]	; (8c40 <__aeabi_dsub+0x344>)
    8aa0:	4286      	cmp	r6, r0
    8aa2:	d0b1      	beq.n	8a08 <__aeabi_dsub+0x10c>
    8aa4:	2780      	movs	r7, #128	; 0x80
    8aa6:	043f      	lsls	r7, r7, #16
    8aa8:	4339      	orrs	r1, r7
    8aaa:	2b38      	cmp	r3, #56	; 0x38
    8aac:	dc00      	bgt.n	8ab0 <__aeabi_dsub+0x1b4>
    8aae:	e0fd      	b.n	8cac <__aeabi_dsub+0x3b0>
    8ab0:	430a      	orrs	r2, r1
    8ab2:	0017      	movs	r7, r2
    8ab4:	2100      	movs	r1, #0
    8ab6:	1e7a      	subs	r2, r7, #1
    8ab8:	4197      	sbcs	r7, r2
    8aba:	4457      	add	r7, sl
    8abc:	4557      	cmp	r7, sl
    8abe:	4180      	sbcs	r0, r0
    8ac0:	1909      	adds	r1, r1, r4
    8ac2:	4244      	negs	r4, r0
    8ac4:	190c      	adds	r4, r1, r4
    8ac6:	0223      	lsls	r3, r4, #8
    8ac8:	d53a      	bpl.n	8b40 <__aeabi_dsub+0x244>
    8aca:	4b5d      	ldr	r3, [pc, #372]	; (8c40 <__aeabi_dsub+0x344>)
    8acc:	3601      	adds	r6, #1
    8ace:	429e      	cmp	r6, r3
    8ad0:	d100      	bne.n	8ad4 <__aeabi_dsub+0x1d8>
    8ad2:	e14b      	b.n	8d6c <__aeabi_dsub+0x470>
    8ad4:	2201      	movs	r2, #1
    8ad6:	4b5b      	ldr	r3, [pc, #364]	; (8c44 <__aeabi_dsub+0x348>)
    8ad8:	401c      	ands	r4, r3
    8ada:	087b      	lsrs	r3, r7, #1
    8adc:	4017      	ands	r7, r2
    8ade:	431f      	orrs	r7, r3
    8ae0:	07e2      	lsls	r2, r4, #31
    8ae2:	4317      	orrs	r7, r2
    8ae4:	0864      	lsrs	r4, r4, #1
    8ae6:	e78f      	b.n	8a08 <__aeabi_dsub+0x10c>
    8ae8:	0008      	movs	r0, r1
    8aea:	4310      	orrs	r0, r2
    8aec:	d000      	beq.n	8af0 <__aeabi_dsub+0x1f4>
    8aee:	e724      	b.n	893a <__aeabi_dsub+0x3e>
    8af0:	e721      	b.n	8936 <__aeabi_dsub+0x3a>
    8af2:	0023      	movs	r3, r4
    8af4:	433b      	orrs	r3, r7
    8af6:	d100      	bne.n	8afa <__aeabi_dsub+0x1fe>
    8af8:	e1b9      	b.n	8e6e <__aeabi_dsub+0x572>
    8afa:	2280      	movs	r2, #128	; 0x80
    8afc:	0312      	lsls	r2, r2, #12
    8afe:	4314      	orrs	r4, r2
    8b00:	0324      	lsls	r4, r4, #12
    8b02:	0b24      	lsrs	r4, r4, #12
    8b04:	e79f      	b.n	8a46 <__aeabi_dsub+0x14a>
    8b06:	002e      	movs	r6, r5
    8b08:	e77e      	b.n	8a08 <__aeabi_dsub+0x10c>
    8b0a:	0008      	movs	r0, r1
    8b0c:	4310      	orrs	r0, r2
    8b0e:	d100      	bne.n	8b12 <__aeabi_dsub+0x216>
    8b10:	e0ca      	b.n	8ca8 <__aeabi_dsub+0x3ac>
    8b12:	1e58      	subs	r0, r3, #1
    8b14:	4684      	mov	ip, r0
    8b16:	2800      	cmp	r0, #0
    8b18:	d000      	beq.n	8b1c <__aeabi_dsub+0x220>
    8b1a:	e0e7      	b.n	8cec <__aeabi_dsub+0x3f0>
    8b1c:	4452      	add	r2, sl
    8b1e:	4552      	cmp	r2, sl
    8b20:	4180      	sbcs	r0, r0
    8b22:	1864      	adds	r4, r4, r1
    8b24:	4240      	negs	r0, r0
    8b26:	1824      	adds	r4, r4, r0
    8b28:	0017      	movs	r7, r2
    8b2a:	2601      	movs	r6, #1
    8b2c:	0223      	lsls	r3, r4, #8
    8b2e:	d507      	bpl.n	8b40 <__aeabi_dsub+0x244>
    8b30:	2602      	movs	r6, #2
    8b32:	e7cf      	b.n	8ad4 <__aeabi_dsub+0x1d8>
    8b34:	4664      	mov	r4, ip
    8b36:	432c      	orrs	r4, r5
    8b38:	d100      	bne.n	8b3c <__aeabi_dsub+0x240>
    8b3a:	e1b3      	b.n	8ea4 <__aeabi_dsub+0x5a8>
    8b3c:	002c      	movs	r4, r5
    8b3e:	4667      	mov	r7, ip
    8b40:	077b      	lsls	r3, r7, #29
    8b42:	d000      	beq.n	8b46 <__aeabi_dsub+0x24a>
    8b44:	e762      	b.n	8a0c <__aeabi_dsub+0x110>
    8b46:	0763      	lsls	r3, r4, #29
    8b48:	08ff      	lsrs	r7, r7, #3
    8b4a:	431f      	orrs	r7, r3
    8b4c:	2501      	movs	r5, #1
    8b4e:	4643      	mov	r3, r8
    8b50:	08e4      	lsrs	r4, r4, #3
    8b52:	401d      	ands	r5, r3
    8b54:	e793      	b.n	8a7e <__aeabi_dsub+0x182>
    8b56:	2d00      	cmp	r5, #0
    8b58:	d178      	bne.n	8c4c <__aeabi_dsub+0x350>
    8b5a:	1c75      	adds	r5, r6, #1
    8b5c:	056d      	lsls	r5, r5, #21
    8b5e:	0d6d      	lsrs	r5, r5, #21
    8b60:	2d01      	cmp	r5, #1
    8b62:	dc00      	bgt.n	8b66 <__aeabi_dsub+0x26a>
    8b64:	e0f2      	b.n	8d4c <__aeabi_dsub+0x450>
    8b66:	4650      	mov	r0, sl
    8b68:	1a80      	subs	r0, r0, r2
    8b6a:	4582      	cmp	sl, r0
    8b6c:	41bf      	sbcs	r7, r7
    8b6e:	1a65      	subs	r5, r4, r1
    8b70:	427f      	negs	r7, r7
    8b72:	1bed      	subs	r5, r5, r7
    8b74:	4684      	mov	ip, r0
    8b76:	0228      	lsls	r0, r5, #8
    8b78:	d400      	bmi.n	8b7c <__aeabi_dsub+0x280>
    8b7a:	e08c      	b.n	8c96 <__aeabi_dsub+0x39a>
    8b7c:	4650      	mov	r0, sl
    8b7e:	1a17      	subs	r7, r2, r0
    8b80:	42ba      	cmp	r2, r7
    8b82:	4192      	sbcs	r2, r2
    8b84:	1b0c      	subs	r4, r1, r4
    8b86:	4255      	negs	r5, r2
    8b88:	1b65      	subs	r5, r4, r5
    8b8a:	4698      	mov	r8, r3
    8b8c:	e714      	b.n	89b8 <__aeabi_dsub+0xbc>
    8b8e:	2501      	movs	r5, #1
    8b90:	4643      	mov	r3, r8
    8b92:	2400      	movs	r4, #0
    8b94:	401d      	ands	r5, r3
    8b96:	2700      	movs	r7, #0
    8b98:	e755      	b.n	8a46 <__aeabi_dsub+0x14a>
    8b9a:	4c2a      	ldr	r4, [pc, #168]	; (8c44 <__aeabi_dsub+0x348>)
    8b9c:	1af6      	subs	r6, r6, r3
    8b9e:	402c      	ands	r4, r5
    8ba0:	e732      	b.n	8a08 <__aeabi_dsub+0x10c>
    8ba2:	003d      	movs	r5, r7
    8ba4:	3828      	subs	r0, #40	; 0x28
    8ba6:	4085      	lsls	r5, r0
    8ba8:	2700      	movs	r7, #0
    8baa:	e717      	b.n	89dc <__aeabi_dsub+0xe0>
    8bac:	0038      	movs	r0, r7
    8bae:	f000 fa27 	bl	9000 <__clzsi2>
    8bb2:	3020      	adds	r0, #32
    8bb4:	e706      	b.n	89c4 <__aeabi_dsub+0xc8>
    8bb6:	430a      	orrs	r2, r1
    8bb8:	0017      	movs	r7, r2
    8bba:	2100      	movs	r1, #0
    8bbc:	1e7a      	subs	r2, r7, #1
    8bbe:	4197      	sbcs	r7, r2
    8bc0:	e6ee      	b.n	89a0 <__aeabi_dsub+0xa4>
    8bc2:	2b00      	cmp	r3, #0
    8bc4:	d000      	beq.n	8bc8 <__aeabi_dsub+0x2cc>
    8bc6:	e0e5      	b.n	8d94 <__aeabi_dsub+0x498>
    8bc8:	1c73      	adds	r3, r6, #1
    8bca:	469c      	mov	ip, r3
    8bcc:	055b      	lsls	r3, r3, #21
    8bce:	0d5b      	lsrs	r3, r3, #21
    8bd0:	2b01      	cmp	r3, #1
    8bd2:	dc00      	bgt.n	8bd6 <__aeabi_dsub+0x2da>
    8bd4:	e09f      	b.n	8d16 <__aeabi_dsub+0x41a>
    8bd6:	4b1a      	ldr	r3, [pc, #104]	; (8c40 <__aeabi_dsub+0x344>)
    8bd8:	459c      	cmp	ip, r3
    8bda:	d100      	bne.n	8bde <__aeabi_dsub+0x2e2>
    8bdc:	e0c5      	b.n	8d6a <__aeabi_dsub+0x46e>
    8bde:	4452      	add	r2, sl
    8be0:	4552      	cmp	r2, sl
    8be2:	4180      	sbcs	r0, r0
    8be4:	1864      	adds	r4, r4, r1
    8be6:	4240      	negs	r0, r0
    8be8:	1824      	adds	r4, r4, r0
    8bea:	07e7      	lsls	r7, r4, #31
    8bec:	0852      	lsrs	r2, r2, #1
    8bee:	4317      	orrs	r7, r2
    8bf0:	0864      	lsrs	r4, r4, #1
    8bf2:	4666      	mov	r6, ip
    8bf4:	e708      	b.n	8a08 <__aeabi_dsub+0x10c>
    8bf6:	4812      	ldr	r0, [pc, #72]	; (8c40 <__aeabi_dsub+0x344>)
    8bf8:	4285      	cmp	r5, r0
    8bfa:	d100      	bne.n	8bfe <__aeabi_dsub+0x302>
    8bfc:	e085      	b.n	8d0a <__aeabi_dsub+0x40e>
    8bfe:	001d      	movs	r5, r3
    8c00:	e6bc      	b.n	897c <__aeabi_dsub+0x80>
    8c02:	0029      	movs	r1, r5
    8c04:	3e1f      	subs	r6, #31
    8c06:	40f1      	lsrs	r1, r6
    8c08:	2b20      	cmp	r3, #32
    8c0a:	d100      	bne.n	8c0e <__aeabi_dsub+0x312>
    8c0c:	e07f      	b.n	8d0e <__aeabi_dsub+0x412>
    8c0e:	2240      	movs	r2, #64	; 0x40
    8c10:	1ad3      	subs	r3, r2, r3
    8c12:	409d      	lsls	r5, r3
    8c14:	432f      	orrs	r7, r5
    8c16:	1e7d      	subs	r5, r7, #1
    8c18:	41af      	sbcs	r7, r5
    8c1a:	2400      	movs	r4, #0
    8c1c:	430f      	orrs	r7, r1
    8c1e:	2600      	movs	r6, #0
    8c20:	e78e      	b.n	8b40 <__aeabi_dsub+0x244>
    8c22:	002b      	movs	r3, r5
    8c24:	000f      	movs	r7, r1
    8c26:	3b20      	subs	r3, #32
    8c28:	40df      	lsrs	r7, r3
    8c2a:	2d20      	cmp	r5, #32
    8c2c:	d071      	beq.n	8d12 <__aeabi_dsub+0x416>
    8c2e:	2340      	movs	r3, #64	; 0x40
    8c30:	1b5d      	subs	r5, r3, r5
    8c32:	40a9      	lsls	r1, r5
    8c34:	430a      	orrs	r2, r1
    8c36:	1e51      	subs	r1, r2, #1
    8c38:	418a      	sbcs	r2, r1
    8c3a:	2100      	movs	r1, #0
    8c3c:	4317      	orrs	r7, r2
    8c3e:	e6af      	b.n	89a0 <__aeabi_dsub+0xa4>
    8c40:	000007ff 	.word	0x000007ff
    8c44:	ff7fffff 	.word	0xff7fffff
    8c48:	800fffff 	.word	0x800fffff
    8c4c:	2e00      	cmp	r6, #0
    8c4e:	d03e      	beq.n	8cce <__aeabi_dsub+0x3d2>
    8c50:	4eb3      	ldr	r6, [pc, #716]	; (8f20 <__aeabi_dsub+0x624>)
    8c52:	45b4      	cmp	ip, r6
    8c54:	d045      	beq.n	8ce2 <__aeabi_dsub+0x3e6>
    8c56:	2680      	movs	r6, #128	; 0x80
    8c58:	0436      	lsls	r6, r6, #16
    8c5a:	426d      	negs	r5, r5
    8c5c:	4334      	orrs	r4, r6
    8c5e:	2d38      	cmp	r5, #56	; 0x38
    8c60:	dd00      	ble.n	8c64 <__aeabi_dsub+0x368>
    8c62:	e0a8      	b.n	8db6 <__aeabi_dsub+0x4ba>
    8c64:	2d1f      	cmp	r5, #31
    8c66:	dd00      	ble.n	8c6a <__aeabi_dsub+0x36e>
    8c68:	e11f      	b.n	8eaa <__aeabi_dsub+0x5ae>
    8c6a:	2620      	movs	r6, #32
    8c6c:	0027      	movs	r7, r4
    8c6e:	4650      	mov	r0, sl
    8c70:	1b76      	subs	r6, r6, r5
    8c72:	40b7      	lsls	r7, r6
    8c74:	40e8      	lsrs	r0, r5
    8c76:	4307      	orrs	r7, r0
    8c78:	4650      	mov	r0, sl
    8c7a:	40b0      	lsls	r0, r6
    8c7c:	1e46      	subs	r6, r0, #1
    8c7e:	41b0      	sbcs	r0, r6
    8c80:	40ec      	lsrs	r4, r5
    8c82:	4338      	orrs	r0, r7
    8c84:	1a17      	subs	r7, r2, r0
    8c86:	42ba      	cmp	r2, r7
    8c88:	4192      	sbcs	r2, r2
    8c8a:	1b0c      	subs	r4, r1, r4
    8c8c:	4252      	negs	r2, r2
    8c8e:	1aa4      	subs	r4, r4, r2
    8c90:	4666      	mov	r6, ip
    8c92:	4698      	mov	r8, r3
    8c94:	e68b      	b.n	89ae <__aeabi_dsub+0xb2>
    8c96:	4664      	mov	r4, ip
    8c98:	4667      	mov	r7, ip
    8c9a:	432c      	orrs	r4, r5
    8c9c:	d000      	beq.n	8ca0 <__aeabi_dsub+0x3a4>
    8c9e:	e68b      	b.n	89b8 <__aeabi_dsub+0xbc>
    8ca0:	2500      	movs	r5, #0
    8ca2:	2600      	movs	r6, #0
    8ca4:	2700      	movs	r7, #0
    8ca6:	e6ea      	b.n	8a7e <__aeabi_dsub+0x182>
    8ca8:	001e      	movs	r6, r3
    8caa:	e6ad      	b.n	8a08 <__aeabi_dsub+0x10c>
    8cac:	2b1f      	cmp	r3, #31
    8cae:	dc60      	bgt.n	8d72 <__aeabi_dsub+0x476>
    8cb0:	2720      	movs	r7, #32
    8cb2:	1af8      	subs	r0, r7, r3
    8cb4:	000f      	movs	r7, r1
    8cb6:	4684      	mov	ip, r0
    8cb8:	4087      	lsls	r7, r0
    8cba:	0010      	movs	r0, r2
    8cbc:	40d8      	lsrs	r0, r3
    8cbe:	4307      	orrs	r7, r0
    8cc0:	4660      	mov	r0, ip
    8cc2:	4082      	lsls	r2, r0
    8cc4:	1e50      	subs	r0, r2, #1
    8cc6:	4182      	sbcs	r2, r0
    8cc8:	40d9      	lsrs	r1, r3
    8cca:	4317      	orrs	r7, r2
    8ccc:	e6f5      	b.n	8aba <__aeabi_dsub+0x1be>
    8cce:	0026      	movs	r6, r4
    8cd0:	4650      	mov	r0, sl
    8cd2:	4306      	orrs	r6, r0
    8cd4:	d005      	beq.n	8ce2 <__aeabi_dsub+0x3e6>
    8cd6:	43ed      	mvns	r5, r5
    8cd8:	2d00      	cmp	r5, #0
    8cda:	d0d3      	beq.n	8c84 <__aeabi_dsub+0x388>
    8cdc:	4e90      	ldr	r6, [pc, #576]	; (8f20 <__aeabi_dsub+0x624>)
    8cde:	45b4      	cmp	ip, r6
    8ce0:	d1bd      	bne.n	8c5e <__aeabi_dsub+0x362>
    8ce2:	000c      	movs	r4, r1
    8ce4:	0017      	movs	r7, r2
    8ce6:	4666      	mov	r6, ip
    8ce8:	4698      	mov	r8, r3
    8cea:	e68d      	b.n	8a08 <__aeabi_dsub+0x10c>
    8cec:	488c      	ldr	r0, [pc, #560]	; (8f20 <__aeabi_dsub+0x624>)
    8cee:	4283      	cmp	r3, r0
    8cf0:	d00b      	beq.n	8d0a <__aeabi_dsub+0x40e>
    8cf2:	4663      	mov	r3, ip
    8cf4:	e6d9      	b.n	8aaa <__aeabi_dsub+0x1ae>
    8cf6:	2d00      	cmp	r5, #0
    8cf8:	d000      	beq.n	8cfc <__aeabi_dsub+0x400>
    8cfa:	e096      	b.n	8e2a <__aeabi_dsub+0x52e>
    8cfc:	0008      	movs	r0, r1
    8cfe:	4310      	orrs	r0, r2
    8d00:	d100      	bne.n	8d04 <__aeabi_dsub+0x408>
    8d02:	e0e2      	b.n	8eca <__aeabi_dsub+0x5ce>
    8d04:	000c      	movs	r4, r1
    8d06:	0017      	movs	r7, r2
    8d08:	4698      	mov	r8, r3
    8d0a:	4e85      	ldr	r6, [pc, #532]	; (8f20 <__aeabi_dsub+0x624>)
    8d0c:	e67c      	b.n	8a08 <__aeabi_dsub+0x10c>
    8d0e:	2500      	movs	r5, #0
    8d10:	e780      	b.n	8c14 <__aeabi_dsub+0x318>
    8d12:	2100      	movs	r1, #0
    8d14:	e78e      	b.n	8c34 <__aeabi_dsub+0x338>
    8d16:	0023      	movs	r3, r4
    8d18:	4650      	mov	r0, sl
    8d1a:	4303      	orrs	r3, r0
    8d1c:	2e00      	cmp	r6, #0
    8d1e:	d000      	beq.n	8d22 <__aeabi_dsub+0x426>
    8d20:	e0a8      	b.n	8e74 <__aeabi_dsub+0x578>
    8d22:	2b00      	cmp	r3, #0
    8d24:	d100      	bne.n	8d28 <__aeabi_dsub+0x42c>
    8d26:	e0de      	b.n	8ee6 <__aeabi_dsub+0x5ea>
    8d28:	000b      	movs	r3, r1
    8d2a:	4313      	orrs	r3, r2
    8d2c:	d100      	bne.n	8d30 <__aeabi_dsub+0x434>
    8d2e:	e66b      	b.n	8a08 <__aeabi_dsub+0x10c>
    8d30:	4452      	add	r2, sl
    8d32:	4552      	cmp	r2, sl
    8d34:	4180      	sbcs	r0, r0
    8d36:	1864      	adds	r4, r4, r1
    8d38:	4240      	negs	r0, r0
    8d3a:	1824      	adds	r4, r4, r0
    8d3c:	0017      	movs	r7, r2
    8d3e:	0223      	lsls	r3, r4, #8
    8d40:	d400      	bmi.n	8d44 <__aeabi_dsub+0x448>
    8d42:	e6fd      	b.n	8b40 <__aeabi_dsub+0x244>
    8d44:	4b77      	ldr	r3, [pc, #476]	; (8f24 <__aeabi_dsub+0x628>)
    8d46:	4666      	mov	r6, ip
    8d48:	401c      	ands	r4, r3
    8d4a:	e65d      	b.n	8a08 <__aeabi_dsub+0x10c>
    8d4c:	0025      	movs	r5, r4
    8d4e:	4650      	mov	r0, sl
    8d50:	4305      	orrs	r5, r0
    8d52:	2e00      	cmp	r6, #0
    8d54:	d1cf      	bne.n	8cf6 <__aeabi_dsub+0x3fa>
    8d56:	2d00      	cmp	r5, #0
    8d58:	d14f      	bne.n	8dfa <__aeabi_dsub+0x4fe>
    8d5a:	000c      	movs	r4, r1
    8d5c:	4314      	orrs	r4, r2
    8d5e:	d100      	bne.n	8d62 <__aeabi_dsub+0x466>
    8d60:	e0a0      	b.n	8ea4 <__aeabi_dsub+0x5a8>
    8d62:	000c      	movs	r4, r1
    8d64:	0017      	movs	r7, r2
    8d66:	4698      	mov	r8, r3
    8d68:	e64e      	b.n	8a08 <__aeabi_dsub+0x10c>
    8d6a:	4666      	mov	r6, ip
    8d6c:	2400      	movs	r4, #0
    8d6e:	2700      	movs	r7, #0
    8d70:	e685      	b.n	8a7e <__aeabi_dsub+0x182>
    8d72:	001f      	movs	r7, r3
    8d74:	0008      	movs	r0, r1
    8d76:	3f20      	subs	r7, #32
    8d78:	40f8      	lsrs	r0, r7
    8d7a:	0007      	movs	r7, r0
    8d7c:	2b20      	cmp	r3, #32
    8d7e:	d100      	bne.n	8d82 <__aeabi_dsub+0x486>
    8d80:	e08e      	b.n	8ea0 <__aeabi_dsub+0x5a4>
    8d82:	2040      	movs	r0, #64	; 0x40
    8d84:	1ac3      	subs	r3, r0, r3
    8d86:	4099      	lsls	r1, r3
    8d88:	430a      	orrs	r2, r1
    8d8a:	1e51      	subs	r1, r2, #1
    8d8c:	418a      	sbcs	r2, r1
    8d8e:	2100      	movs	r1, #0
    8d90:	4317      	orrs	r7, r2
    8d92:	e692      	b.n	8aba <__aeabi_dsub+0x1be>
    8d94:	2e00      	cmp	r6, #0
    8d96:	d114      	bne.n	8dc2 <__aeabi_dsub+0x4c6>
    8d98:	0026      	movs	r6, r4
    8d9a:	4650      	mov	r0, sl
    8d9c:	4306      	orrs	r6, r0
    8d9e:	d062      	beq.n	8e66 <__aeabi_dsub+0x56a>
    8da0:	43db      	mvns	r3, r3
    8da2:	2b00      	cmp	r3, #0
    8da4:	d15c      	bne.n	8e60 <__aeabi_dsub+0x564>
    8da6:	1887      	adds	r7, r0, r2
    8da8:	4297      	cmp	r7, r2
    8daa:	4192      	sbcs	r2, r2
    8dac:	1864      	adds	r4, r4, r1
    8dae:	4252      	negs	r2, r2
    8db0:	18a4      	adds	r4, r4, r2
    8db2:	4666      	mov	r6, ip
    8db4:	e687      	b.n	8ac6 <__aeabi_dsub+0x1ca>
    8db6:	4650      	mov	r0, sl
    8db8:	4320      	orrs	r0, r4
    8dba:	1e44      	subs	r4, r0, #1
    8dbc:	41a0      	sbcs	r0, r4
    8dbe:	2400      	movs	r4, #0
    8dc0:	e760      	b.n	8c84 <__aeabi_dsub+0x388>
    8dc2:	4e57      	ldr	r6, [pc, #348]	; (8f20 <__aeabi_dsub+0x624>)
    8dc4:	45b4      	cmp	ip, r6
    8dc6:	d04e      	beq.n	8e66 <__aeabi_dsub+0x56a>
    8dc8:	2680      	movs	r6, #128	; 0x80
    8dca:	0436      	lsls	r6, r6, #16
    8dcc:	425b      	negs	r3, r3
    8dce:	4334      	orrs	r4, r6
    8dd0:	2b38      	cmp	r3, #56	; 0x38
    8dd2:	dd00      	ble.n	8dd6 <__aeabi_dsub+0x4da>
    8dd4:	e07f      	b.n	8ed6 <__aeabi_dsub+0x5da>
    8dd6:	2b1f      	cmp	r3, #31
    8dd8:	dd00      	ble.n	8ddc <__aeabi_dsub+0x4e0>
    8dda:	e08b      	b.n	8ef4 <__aeabi_dsub+0x5f8>
    8ddc:	2620      	movs	r6, #32
    8dde:	0027      	movs	r7, r4
    8de0:	4650      	mov	r0, sl
    8de2:	1af6      	subs	r6, r6, r3
    8de4:	40b7      	lsls	r7, r6
    8de6:	40d8      	lsrs	r0, r3
    8de8:	4307      	orrs	r7, r0
    8dea:	4650      	mov	r0, sl
    8dec:	40b0      	lsls	r0, r6
    8dee:	1e46      	subs	r6, r0, #1
    8df0:	41b0      	sbcs	r0, r6
    8df2:	4307      	orrs	r7, r0
    8df4:	40dc      	lsrs	r4, r3
    8df6:	18bf      	adds	r7, r7, r2
    8df8:	e7d6      	b.n	8da8 <__aeabi_dsub+0x4ac>
    8dfa:	000d      	movs	r5, r1
    8dfc:	4315      	orrs	r5, r2
    8dfe:	d100      	bne.n	8e02 <__aeabi_dsub+0x506>
    8e00:	e602      	b.n	8a08 <__aeabi_dsub+0x10c>
    8e02:	4650      	mov	r0, sl
    8e04:	1a80      	subs	r0, r0, r2
    8e06:	4582      	cmp	sl, r0
    8e08:	41bf      	sbcs	r7, r7
    8e0a:	1a65      	subs	r5, r4, r1
    8e0c:	427f      	negs	r7, r7
    8e0e:	1bed      	subs	r5, r5, r7
    8e10:	4684      	mov	ip, r0
    8e12:	0228      	lsls	r0, r5, #8
    8e14:	d400      	bmi.n	8e18 <__aeabi_dsub+0x51c>
    8e16:	e68d      	b.n	8b34 <__aeabi_dsub+0x238>
    8e18:	4650      	mov	r0, sl
    8e1a:	1a17      	subs	r7, r2, r0
    8e1c:	42ba      	cmp	r2, r7
    8e1e:	4192      	sbcs	r2, r2
    8e20:	1b0c      	subs	r4, r1, r4
    8e22:	4252      	negs	r2, r2
    8e24:	1aa4      	subs	r4, r4, r2
    8e26:	4698      	mov	r8, r3
    8e28:	e5ee      	b.n	8a08 <__aeabi_dsub+0x10c>
    8e2a:	000d      	movs	r5, r1
    8e2c:	4315      	orrs	r5, r2
    8e2e:	d100      	bne.n	8e32 <__aeabi_dsub+0x536>
    8e30:	e76b      	b.n	8d0a <__aeabi_dsub+0x40e>
    8e32:	4650      	mov	r0, sl
    8e34:	0767      	lsls	r7, r4, #29
    8e36:	08c0      	lsrs	r0, r0, #3
    8e38:	4307      	orrs	r7, r0
    8e3a:	2080      	movs	r0, #128	; 0x80
    8e3c:	08e4      	lsrs	r4, r4, #3
    8e3e:	0300      	lsls	r0, r0, #12
    8e40:	4204      	tst	r4, r0
    8e42:	d007      	beq.n	8e54 <__aeabi_dsub+0x558>
    8e44:	08cd      	lsrs	r5, r1, #3
    8e46:	4205      	tst	r5, r0
    8e48:	d104      	bne.n	8e54 <__aeabi_dsub+0x558>
    8e4a:	002c      	movs	r4, r5
    8e4c:	4698      	mov	r8, r3
    8e4e:	08d7      	lsrs	r7, r2, #3
    8e50:	0749      	lsls	r1, r1, #29
    8e52:	430f      	orrs	r7, r1
    8e54:	0f7b      	lsrs	r3, r7, #29
    8e56:	00e4      	lsls	r4, r4, #3
    8e58:	431c      	orrs	r4, r3
    8e5a:	00ff      	lsls	r7, r7, #3
    8e5c:	4e30      	ldr	r6, [pc, #192]	; (8f20 <__aeabi_dsub+0x624>)
    8e5e:	e5d3      	b.n	8a08 <__aeabi_dsub+0x10c>
    8e60:	4e2f      	ldr	r6, [pc, #188]	; (8f20 <__aeabi_dsub+0x624>)
    8e62:	45b4      	cmp	ip, r6
    8e64:	d1b4      	bne.n	8dd0 <__aeabi_dsub+0x4d4>
    8e66:	000c      	movs	r4, r1
    8e68:	0017      	movs	r7, r2
    8e6a:	4666      	mov	r6, ip
    8e6c:	e5cc      	b.n	8a08 <__aeabi_dsub+0x10c>
    8e6e:	2700      	movs	r7, #0
    8e70:	2400      	movs	r4, #0
    8e72:	e5e8      	b.n	8a46 <__aeabi_dsub+0x14a>
    8e74:	2b00      	cmp	r3, #0
    8e76:	d039      	beq.n	8eec <__aeabi_dsub+0x5f0>
    8e78:	000b      	movs	r3, r1
    8e7a:	4313      	orrs	r3, r2
    8e7c:	d100      	bne.n	8e80 <__aeabi_dsub+0x584>
    8e7e:	e744      	b.n	8d0a <__aeabi_dsub+0x40e>
    8e80:	08c0      	lsrs	r0, r0, #3
    8e82:	0767      	lsls	r7, r4, #29
    8e84:	4307      	orrs	r7, r0
    8e86:	2080      	movs	r0, #128	; 0x80
    8e88:	08e4      	lsrs	r4, r4, #3
    8e8a:	0300      	lsls	r0, r0, #12
    8e8c:	4204      	tst	r4, r0
    8e8e:	d0e1      	beq.n	8e54 <__aeabi_dsub+0x558>
    8e90:	08cb      	lsrs	r3, r1, #3
    8e92:	4203      	tst	r3, r0
    8e94:	d1de      	bne.n	8e54 <__aeabi_dsub+0x558>
    8e96:	08d7      	lsrs	r7, r2, #3
    8e98:	0749      	lsls	r1, r1, #29
    8e9a:	430f      	orrs	r7, r1
    8e9c:	001c      	movs	r4, r3
    8e9e:	e7d9      	b.n	8e54 <__aeabi_dsub+0x558>
    8ea0:	2100      	movs	r1, #0
    8ea2:	e771      	b.n	8d88 <__aeabi_dsub+0x48c>
    8ea4:	2500      	movs	r5, #0
    8ea6:	2700      	movs	r7, #0
    8ea8:	e5e9      	b.n	8a7e <__aeabi_dsub+0x182>
    8eaa:	002e      	movs	r6, r5
    8eac:	0027      	movs	r7, r4
    8eae:	3e20      	subs	r6, #32
    8eb0:	40f7      	lsrs	r7, r6
    8eb2:	2d20      	cmp	r5, #32
    8eb4:	d02f      	beq.n	8f16 <__aeabi_dsub+0x61a>
    8eb6:	2640      	movs	r6, #64	; 0x40
    8eb8:	1b75      	subs	r5, r6, r5
    8eba:	40ac      	lsls	r4, r5
    8ebc:	4650      	mov	r0, sl
    8ebe:	4320      	orrs	r0, r4
    8ec0:	1e44      	subs	r4, r0, #1
    8ec2:	41a0      	sbcs	r0, r4
    8ec4:	2400      	movs	r4, #0
    8ec6:	4338      	orrs	r0, r7
    8ec8:	e6dc      	b.n	8c84 <__aeabi_dsub+0x388>
    8eca:	2480      	movs	r4, #128	; 0x80
    8ecc:	2500      	movs	r5, #0
    8ece:	0324      	lsls	r4, r4, #12
    8ed0:	4e13      	ldr	r6, [pc, #76]	; (8f20 <__aeabi_dsub+0x624>)
    8ed2:	2700      	movs	r7, #0
    8ed4:	e5d3      	b.n	8a7e <__aeabi_dsub+0x182>
    8ed6:	4650      	mov	r0, sl
    8ed8:	4320      	orrs	r0, r4
    8eda:	0007      	movs	r7, r0
    8edc:	1e78      	subs	r0, r7, #1
    8ede:	4187      	sbcs	r7, r0
    8ee0:	2400      	movs	r4, #0
    8ee2:	18bf      	adds	r7, r7, r2
    8ee4:	e760      	b.n	8da8 <__aeabi_dsub+0x4ac>
    8ee6:	000c      	movs	r4, r1
    8ee8:	0017      	movs	r7, r2
    8eea:	e58d      	b.n	8a08 <__aeabi_dsub+0x10c>
    8eec:	000c      	movs	r4, r1
    8eee:	0017      	movs	r7, r2
    8ef0:	4e0b      	ldr	r6, [pc, #44]	; (8f20 <__aeabi_dsub+0x624>)
    8ef2:	e589      	b.n	8a08 <__aeabi_dsub+0x10c>
    8ef4:	001e      	movs	r6, r3
    8ef6:	0027      	movs	r7, r4
    8ef8:	3e20      	subs	r6, #32
    8efa:	40f7      	lsrs	r7, r6
    8efc:	2b20      	cmp	r3, #32
    8efe:	d00c      	beq.n	8f1a <__aeabi_dsub+0x61e>
    8f00:	2640      	movs	r6, #64	; 0x40
    8f02:	1af3      	subs	r3, r6, r3
    8f04:	409c      	lsls	r4, r3
    8f06:	4650      	mov	r0, sl
    8f08:	4320      	orrs	r0, r4
    8f0a:	1e44      	subs	r4, r0, #1
    8f0c:	41a0      	sbcs	r0, r4
    8f0e:	4307      	orrs	r7, r0
    8f10:	2400      	movs	r4, #0
    8f12:	18bf      	adds	r7, r7, r2
    8f14:	e748      	b.n	8da8 <__aeabi_dsub+0x4ac>
    8f16:	2400      	movs	r4, #0
    8f18:	e7d0      	b.n	8ebc <__aeabi_dsub+0x5c0>
    8f1a:	2400      	movs	r4, #0
    8f1c:	e7f3      	b.n	8f06 <__aeabi_dsub+0x60a>
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	000007ff 	.word	0x000007ff
    8f24:	ff7fffff 	.word	0xff7fffff

00008f28 <__aeabi_d2iz>:
    8f28:	b530      	push	{r4, r5, lr}
    8f2a:	4d13      	ldr	r5, [pc, #76]	; (8f78 <__aeabi_d2iz+0x50>)
    8f2c:	030a      	lsls	r2, r1, #12
    8f2e:	004b      	lsls	r3, r1, #1
    8f30:	0b12      	lsrs	r2, r2, #12
    8f32:	0d5b      	lsrs	r3, r3, #21
    8f34:	0fc9      	lsrs	r1, r1, #31
    8f36:	2400      	movs	r4, #0
    8f38:	42ab      	cmp	r3, r5
    8f3a:	dd10      	ble.n	8f5e <__aeabi_d2iz+0x36>
    8f3c:	4c0f      	ldr	r4, [pc, #60]	; (8f7c <__aeabi_d2iz+0x54>)
    8f3e:	42a3      	cmp	r3, r4
    8f40:	dc0f      	bgt.n	8f62 <__aeabi_d2iz+0x3a>
    8f42:	2480      	movs	r4, #128	; 0x80
    8f44:	4d0e      	ldr	r5, [pc, #56]	; (8f80 <__aeabi_d2iz+0x58>)
    8f46:	0364      	lsls	r4, r4, #13
    8f48:	4322      	orrs	r2, r4
    8f4a:	1aed      	subs	r5, r5, r3
    8f4c:	2d1f      	cmp	r5, #31
    8f4e:	dd0b      	ble.n	8f68 <__aeabi_d2iz+0x40>
    8f50:	480c      	ldr	r0, [pc, #48]	; (8f84 <__aeabi_d2iz+0x5c>)
    8f52:	1ac3      	subs	r3, r0, r3
    8f54:	40da      	lsrs	r2, r3
    8f56:	4254      	negs	r4, r2
    8f58:	2900      	cmp	r1, #0
    8f5a:	d100      	bne.n	8f5e <__aeabi_d2iz+0x36>
    8f5c:	0014      	movs	r4, r2
    8f5e:	0020      	movs	r0, r4
    8f60:	bd30      	pop	{r4, r5, pc}
    8f62:	4b09      	ldr	r3, [pc, #36]	; (8f88 <__aeabi_d2iz+0x60>)
    8f64:	18cc      	adds	r4, r1, r3
    8f66:	e7fa      	b.n	8f5e <__aeabi_d2iz+0x36>
    8f68:	4c08      	ldr	r4, [pc, #32]	; (8f8c <__aeabi_d2iz+0x64>)
    8f6a:	40e8      	lsrs	r0, r5
    8f6c:	46a4      	mov	ip, r4
    8f6e:	4463      	add	r3, ip
    8f70:	409a      	lsls	r2, r3
    8f72:	4302      	orrs	r2, r0
    8f74:	e7ef      	b.n	8f56 <__aeabi_d2iz+0x2e>
    8f76:	46c0      	nop			; (mov r8, r8)
    8f78:	000003fe 	.word	0x000003fe
    8f7c:	0000041d 	.word	0x0000041d
    8f80:	00000433 	.word	0x00000433
    8f84:	00000413 	.word	0x00000413
    8f88:	7fffffff 	.word	0x7fffffff
    8f8c:	fffffbed 	.word	0xfffffbed

00008f90 <__aeabi_ui2d>:
    8f90:	b510      	push	{r4, lr}
    8f92:	1e04      	subs	r4, r0, #0
    8f94:	d028      	beq.n	8fe8 <__aeabi_ui2d+0x58>
    8f96:	f000 f833 	bl	9000 <__clzsi2>
    8f9a:	4b15      	ldr	r3, [pc, #84]	; (8ff0 <__aeabi_ui2d+0x60>)
    8f9c:	4a15      	ldr	r2, [pc, #84]	; (8ff4 <__aeabi_ui2d+0x64>)
    8f9e:	1a1b      	subs	r3, r3, r0
    8fa0:	1ad2      	subs	r2, r2, r3
    8fa2:	2a1f      	cmp	r2, #31
    8fa4:	dd15      	ble.n	8fd2 <__aeabi_ui2d+0x42>
    8fa6:	4a14      	ldr	r2, [pc, #80]	; (8ff8 <__aeabi_ui2d+0x68>)
    8fa8:	1ad2      	subs	r2, r2, r3
    8faa:	4094      	lsls	r4, r2
    8fac:	2200      	movs	r2, #0
    8fae:	0324      	lsls	r4, r4, #12
    8fb0:	055b      	lsls	r3, r3, #21
    8fb2:	0b24      	lsrs	r4, r4, #12
    8fb4:	0d5b      	lsrs	r3, r3, #21
    8fb6:	2100      	movs	r1, #0
    8fb8:	0010      	movs	r0, r2
    8fba:	0324      	lsls	r4, r4, #12
    8fbc:	0d0a      	lsrs	r2, r1, #20
    8fbe:	0b24      	lsrs	r4, r4, #12
    8fc0:	0512      	lsls	r2, r2, #20
    8fc2:	4322      	orrs	r2, r4
    8fc4:	4c0d      	ldr	r4, [pc, #52]	; (8ffc <__aeabi_ui2d+0x6c>)
    8fc6:	051b      	lsls	r3, r3, #20
    8fc8:	4022      	ands	r2, r4
    8fca:	4313      	orrs	r3, r2
    8fcc:	005b      	lsls	r3, r3, #1
    8fce:	0859      	lsrs	r1, r3, #1
    8fd0:	bd10      	pop	{r4, pc}
    8fd2:	0021      	movs	r1, r4
    8fd4:	4091      	lsls	r1, r2
    8fd6:	000a      	movs	r2, r1
    8fd8:	210b      	movs	r1, #11
    8fda:	1a08      	subs	r0, r1, r0
    8fdc:	40c4      	lsrs	r4, r0
    8fde:	055b      	lsls	r3, r3, #21
    8fe0:	0324      	lsls	r4, r4, #12
    8fe2:	0b24      	lsrs	r4, r4, #12
    8fe4:	0d5b      	lsrs	r3, r3, #21
    8fe6:	e7e6      	b.n	8fb6 <__aeabi_ui2d+0x26>
    8fe8:	2300      	movs	r3, #0
    8fea:	2400      	movs	r4, #0
    8fec:	2200      	movs	r2, #0
    8fee:	e7e2      	b.n	8fb6 <__aeabi_ui2d+0x26>
    8ff0:	0000041e 	.word	0x0000041e
    8ff4:	00000433 	.word	0x00000433
    8ff8:	00000413 	.word	0x00000413
    8ffc:	800fffff 	.word	0x800fffff

00009000 <__clzsi2>:
    9000:	211c      	movs	r1, #28
    9002:	2301      	movs	r3, #1
    9004:	041b      	lsls	r3, r3, #16
    9006:	4298      	cmp	r0, r3
    9008:	d301      	bcc.n	900e <__clzsi2+0xe>
    900a:	0c00      	lsrs	r0, r0, #16
    900c:	3910      	subs	r1, #16
    900e:	0a1b      	lsrs	r3, r3, #8
    9010:	4298      	cmp	r0, r3
    9012:	d301      	bcc.n	9018 <__clzsi2+0x18>
    9014:	0a00      	lsrs	r0, r0, #8
    9016:	3908      	subs	r1, #8
    9018:	091b      	lsrs	r3, r3, #4
    901a:	4298      	cmp	r0, r3
    901c:	d301      	bcc.n	9022 <__clzsi2+0x22>
    901e:	0900      	lsrs	r0, r0, #4
    9020:	3904      	subs	r1, #4
    9022:	a202      	add	r2, pc, #8	; (adr r2, 902c <__clzsi2+0x2c>)
    9024:	5c10      	ldrb	r0, [r2, r0]
    9026:	1840      	adds	r0, r0, r1
    9028:	4770      	bx	lr
    902a:	46c0      	nop			; (mov r8, r8)
    902c:	02020304 	.word	0x02020304
    9030:	01010101 	.word	0x01010101
	...

0000903c <atoi>:
    903c:	b510      	push	{r4, lr}
    903e:	220a      	movs	r2, #10
    9040:	2100      	movs	r1, #0
    9042:	f000 fa81 	bl	9548 <strtol>
    9046:	bd10      	pop	{r4, pc}

00009048 <__libc_init_array>:
    9048:	b570      	push	{r4, r5, r6, lr}
    904a:	2600      	movs	r6, #0
    904c:	4d0c      	ldr	r5, [pc, #48]	; (9080 <__libc_init_array+0x38>)
    904e:	4c0d      	ldr	r4, [pc, #52]	; (9084 <__libc_init_array+0x3c>)
    9050:	1b64      	subs	r4, r4, r5
    9052:	10a4      	asrs	r4, r4, #2
    9054:	42a6      	cmp	r6, r4
    9056:	d109      	bne.n	906c <__libc_init_array+0x24>
    9058:	2600      	movs	r6, #0
    905a:	f002 fc19 	bl	b890 <_init>
    905e:	4d0a      	ldr	r5, [pc, #40]	; (9088 <__libc_init_array+0x40>)
    9060:	4c0a      	ldr	r4, [pc, #40]	; (908c <__libc_init_array+0x44>)
    9062:	1b64      	subs	r4, r4, r5
    9064:	10a4      	asrs	r4, r4, #2
    9066:	42a6      	cmp	r6, r4
    9068:	d105      	bne.n	9076 <__libc_init_array+0x2e>
    906a:	bd70      	pop	{r4, r5, r6, pc}
    906c:	00b3      	lsls	r3, r6, #2
    906e:	58eb      	ldr	r3, [r5, r3]
    9070:	4798      	blx	r3
    9072:	3601      	adds	r6, #1
    9074:	e7ee      	b.n	9054 <__libc_init_array+0xc>
    9076:	00b3      	lsls	r3, r6, #2
    9078:	58eb      	ldr	r3, [r5, r3]
    907a:	4798      	blx	r3
    907c:	3601      	adds	r6, #1
    907e:	e7f2      	b.n	9066 <__libc_init_array+0x1e>
    9080:	0000b89c 	.word	0x0000b89c
    9084:	0000b89c 	.word	0x0000b89c
    9088:	0000b89c 	.word	0x0000b89c
    908c:	0000b8a0 	.word	0x0000b8a0

00009090 <memcpy>:
    9090:	2300      	movs	r3, #0
    9092:	b510      	push	{r4, lr}
    9094:	429a      	cmp	r2, r3
    9096:	d100      	bne.n	909a <memcpy+0xa>
    9098:	bd10      	pop	{r4, pc}
    909a:	5ccc      	ldrb	r4, [r1, r3]
    909c:	54c4      	strb	r4, [r0, r3]
    909e:	3301      	adds	r3, #1
    90a0:	e7f8      	b.n	9094 <memcpy+0x4>

000090a2 <memset>:
    90a2:	0003      	movs	r3, r0
    90a4:	1882      	adds	r2, r0, r2
    90a6:	4293      	cmp	r3, r2
    90a8:	d100      	bne.n	90ac <memset+0xa>
    90aa:	4770      	bx	lr
    90ac:	7019      	strb	r1, [r3, #0]
    90ae:	3301      	adds	r3, #1
    90b0:	e7f9      	b.n	90a6 <memset+0x4>
	...

000090b4 <iprintf>:
    90b4:	b40f      	push	{r0, r1, r2, r3}
    90b6:	4b0b      	ldr	r3, [pc, #44]	; (90e4 <iprintf+0x30>)
    90b8:	b513      	push	{r0, r1, r4, lr}
    90ba:	681c      	ldr	r4, [r3, #0]
    90bc:	2c00      	cmp	r4, #0
    90be:	d005      	beq.n	90cc <iprintf+0x18>
    90c0:	69a3      	ldr	r3, [r4, #24]
    90c2:	2b00      	cmp	r3, #0
    90c4:	d102      	bne.n	90cc <iprintf+0x18>
    90c6:	0020      	movs	r0, r4
    90c8:	f000 fc2a 	bl	9920 <__sinit>
    90cc:	ab05      	add	r3, sp, #20
    90ce:	9a04      	ldr	r2, [sp, #16]
    90d0:	68a1      	ldr	r1, [r4, #8]
    90d2:	0020      	movs	r0, r4
    90d4:	9301      	str	r3, [sp, #4]
    90d6:	f000 fe3d 	bl	9d54 <_vfiprintf_r>
    90da:	bc16      	pop	{r1, r2, r4}
    90dc:	bc08      	pop	{r3}
    90de:	b004      	add	sp, #16
    90e0:	4718      	bx	r3
    90e2:	46c0      	nop			; (mov r8, r8)
    90e4:	20000068 	.word	0x20000068

000090e8 <_puts_r>:
    90e8:	b570      	push	{r4, r5, r6, lr}
    90ea:	0005      	movs	r5, r0
    90ec:	000e      	movs	r6, r1
    90ee:	2800      	cmp	r0, #0
    90f0:	d004      	beq.n	90fc <_puts_r+0x14>
    90f2:	6983      	ldr	r3, [r0, #24]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d101      	bne.n	90fc <_puts_r+0x14>
    90f8:	f000 fc12 	bl	9920 <__sinit>
    90fc:	69ab      	ldr	r3, [r5, #24]
    90fe:	68ac      	ldr	r4, [r5, #8]
    9100:	2b00      	cmp	r3, #0
    9102:	d102      	bne.n	910a <_puts_r+0x22>
    9104:	0028      	movs	r0, r5
    9106:	f000 fc0b 	bl	9920 <__sinit>
    910a:	4b24      	ldr	r3, [pc, #144]	; (919c <_puts_r+0xb4>)
    910c:	429c      	cmp	r4, r3
    910e:	d10f      	bne.n	9130 <_puts_r+0x48>
    9110:	686c      	ldr	r4, [r5, #4]
    9112:	89a3      	ldrh	r3, [r4, #12]
    9114:	071b      	lsls	r3, r3, #28
    9116:	d502      	bpl.n	911e <_puts_r+0x36>
    9118:	6923      	ldr	r3, [r4, #16]
    911a:	2b00      	cmp	r3, #0
    911c:	d120      	bne.n	9160 <_puts_r+0x78>
    911e:	0021      	movs	r1, r4
    9120:	0028      	movs	r0, r5
    9122:	f000 fa7b 	bl	961c <__swsetup_r>
    9126:	2800      	cmp	r0, #0
    9128:	d01a      	beq.n	9160 <_puts_r+0x78>
    912a:	2001      	movs	r0, #1
    912c:	4240      	negs	r0, r0
    912e:	bd70      	pop	{r4, r5, r6, pc}
    9130:	4b1b      	ldr	r3, [pc, #108]	; (91a0 <_puts_r+0xb8>)
    9132:	429c      	cmp	r4, r3
    9134:	d101      	bne.n	913a <_puts_r+0x52>
    9136:	68ac      	ldr	r4, [r5, #8]
    9138:	e7eb      	b.n	9112 <_puts_r+0x2a>
    913a:	4b1a      	ldr	r3, [pc, #104]	; (91a4 <_puts_r+0xbc>)
    913c:	429c      	cmp	r4, r3
    913e:	d1e8      	bne.n	9112 <_puts_r+0x2a>
    9140:	68ec      	ldr	r4, [r5, #12]
    9142:	e7e6      	b.n	9112 <_puts_r+0x2a>
    9144:	3b01      	subs	r3, #1
    9146:	3601      	adds	r6, #1
    9148:	60a3      	str	r3, [r4, #8]
    914a:	2b00      	cmp	r3, #0
    914c:	da04      	bge.n	9158 <_puts_r+0x70>
    914e:	69a2      	ldr	r2, [r4, #24]
    9150:	4293      	cmp	r3, r2
    9152:	db16      	blt.n	9182 <_puts_r+0x9a>
    9154:	290a      	cmp	r1, #10
    9156:	d014      	beq.n	9182 <_puts_r+0x9a>
    9158:	6823      	ldr	r3, [r4, #0]
    915a:	1c5a      	adds	r2, r3, #1
    915c:	6022      	str	r2, [r4, #0]
    915e:	7019      	strb	r1, [r3, #0]
    9160:	7831      	ldrb	r1, [r6, #0]
    9162:	68a3      	ldr	r3, [r4, #8]
    9164:	2900      	cmp	r1, #0
    9166:	d1ed      	bne.n	9144 <_puts_r+0x5c>
    9168:	3b01      	subs	r3, #1
    916a:	60a3      	str	r3, [r4, #8]
    916c:	2b00      	cmp	r3, #0
    916e:	da0f      	bge.n	9190 <_puts_r+0xa8>
    9170:	0022      	movs	r2, r4
    9172:	310a      	adds	r1, #10
    9174:	0028      	movs	r0, r5
    9176:	f000 f9fb 	bl	9570 <__swbuf_r>
    917a:	1c43      	adds	r3, r0, #1
    917c:	d0d5      	beq.n	912a <_puts_r+0x42>
    917e:	200a      	movs	r0, #10
    9180:	e7d5      	b.n	912e <_puts_r+0x46>
    9182:	0022      	movs	r2, r4
    9184:	0028      	movs	r0, r5
    9186:	f000 f9f3 	bl	9570 <__swbuf_r>
    918a:	1c43      	adds	r3, r0, #1
    918c:	d1e8      	bne.n	9160 <_puts_r+0x78>
    918e:	e7cc      	b.n	912a <_puts_r+0x42>
    9190:	200a      	movs	r0, #10
    9192:	6823      	ldr	r3, [r4, #0]
    9194:	1c5a      	adds	r2, r3, #1
    9196:	6022      	str	r2, [r4, #0]
    9198:	7018      	strb	r0, [r3, #0]
    919a:	e7c8      	b.n	912e <_puts_r+0x46>
    919c:	0000b6e8 	.word	0x0000b6e8
    91a0:	0000b708 	.word	0x0000b708
    91a4:	0000b6c8 	.word	0x0000b6c8

000091a8 <puts>:
    91a8:	b510      	push	{r4, lr}
    91aa:	4b03      	ldr	r3, [pc, #12]	; (91b8 <puts+0x10>)
    91ac:	0001      	movs	r1, r0
    91ae:	6818      	ldr	r0, [r3, #0]
    91b0:	f7ff ff9a 	bl	90e8 <_puts_r>
    91b4:	bd10      	pop	{r4, pc}
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	20000068 	.word	0x20000068

000091bc <iscanf>:
    91bc:	b40f      	push	{r0, r1, r2, r3}
    91be:	4b0b      	ldr	r3, [pc, #44]	; (91ec <iscanf+0x30>)
    91c0:	b513      	push	{r0, r1, r4, lr}
    91c2:	681c      	ldr	r4, [r3, #0]
    91c4:	2c00      	cmp	r4, #0
    91c6:	d005      	beq.n	91d4 <iscanf+0x18>
    91c8:	69a3      	ldr	r3, [r4, #24]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d102      	bne.n	91d4 <iscanf+0x18>
    91ce:	0020      	movs	r0, r4
    91d0:	f000 fba6 	bl	9920 <__sinit>
    91d4:	ab05      	add	r3, sp, #20
    91d6:	9a04      	ldr	r2, [sp, #16]
    91d8:	6861      	ldr	r1, [r4, #4]
    91da:	0020      	movs	r0, r4
    91dc:	9301      	str	r3, [sp, #4]
    91de:	f001 f9e3 	bl	a5a8 <_vfiscanf_r>
    91e2:	bc16      	pop	{r1, r2, r4}
    91e4:	bc08      	pop	{r3}
    91e6:	b004      	add	sp, #16
    91e8:	4718      	bx	r3
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	20000068 	.word	0x20000068

000091f0 <setbuf>:
    91f0:	424a      	negs	r2, r1
    91f2:	414a      	adcs	r2, r1
    91f4:	2380      	movs	r3, #128	; 0x80
    91f6:	b510      	push	{r4, lr}
    91f8:	0052      	lsls	r2, r2, #1
    91fa:	00db      	lsls	r3, r3, #3
    91fc:	f000 f802 	bl	9204 <setvbuf>
    9200:	bd10      	pop	{r4, pc}
	...

00009204 <setvbuf>:
    9204:	b5f0      	push	{r4, r5, r6, r7, lr}
    9206:	001d      	movs	r5, r3
    9208:	4b4f      	ldr	r3, [pc, #316]	; (9348 <setvbuf+0x144>)
    920a:	b085      	sub	sp, #20
    920c:	681e      	ldr	r6, [r3, #0]
    920e:	0004      	movs	r4, r0
    9210:	000f      	movs	r7, r1
    9212:	9200      	str	r2, [sp, #0]
    9214:	2e00      	cmp	r6, #0
    9216:	d005      	beq.n	9224 <setvbuf+0x20>
    9218:	69b3      	ldr	r3, [r6, #24]
    921a:	2b00      	cmp	r3, #0
    921c:	d102      	bne.n	9224 <setvbuf+0x20>
    921e:	0030      	movs	r0, r6
    9220:	f000 fb7e 	bl	9920 <__sinit>
    9224:	4b49      	ldr	r3, [pc, #292]	; (934c <setvbuf+0x148>)
    9226:	429c      	cmp	r4, r3
    9228:	d150      	bne.n	92cc <setvbuf+0xc8>
    922a:	6874      	ldr	r4, [r6, #4]
    922c:	9b00      	ldr	r3, [sp, #0]
    922e:	2b02      	cmp	r3, #2
    9230:	d005      	beq.n	923e <setvbuf+0x3a>
    9232:	2b01      	cmp	r3, #1
    9234:	d900      	bls.n	9238 <setvbuf+0x34>
    9236:	e084      	b.n	9342 <setvbuf+0x13e>
    9238:	2d00      	cmp	r5, #0
    923a:	da00      	bge.n	923e <setvbuf+0x3a>
    923c:	e081      	b.n	9342 <setvbuf+0x13e>
    923e:	0021      	movs	r1, r4
    9240:	0030      	movs	r0, r6
    9242:	f000 faeb 	bl	981c <_fflush_r>
    9246:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9248:	2900      	cmp	r1, #0
    924a:	d008      	beq.n	925e <setvbuf+0x5a>
    924c:	0023      	movs	r3, r4
    924e:	3344      	adds	r3, #68	; 0x44
    9250:	4299      	cmp	r1, r3
    9252:	d002      	beq.n	925a <setvbuf+0x56>
    9254:	0030      	movs	r0, r6
    9256:	f000 fcad 	bl	9bb4 <_free_r>
    925a:	2300      	movs	r3, #0
    925c:	6363      	str	r3, [r4, #52]	; 0x34
    925e:	2300      	movs	r3, #0
    9260:	61a3      	str	r3, [r4, #24]
    9262:	6063      	str	r3, [r4, #4]
    9264:	89a3      	ldrh	r3, [r4, #12]
    9266:	061b      	lsls	r3, r3, #24
    9268:	d503      	bpl.n	9272 <setvbuf+0x6e>
    926a:	6921      	ldr	r1, [r4, #16]
    926c:	0030      	movs	r0, r6
    926e:	f000 fca1 	bl	9bb4 <_free_r>
    9272:	89a3      	ldrh	r3, [r4, #12]
    9274:	4a36      	ldr	r2, [pc, #216]	; (9350 <setvbuf+0x14c>)
    9276:	4013      	ands	r3, r2
    9278:	81a3      	strh	r3, [r4, #12]
    927a:	9b00      	ldr	r3, [sp, #0]
    927c:	2b02      	cmp	r3, #2
    927e:	d05a      	beq.n	9336 <setvbuf+0x132>
    9280:	ab03      	add	r3, sp, #12
    9282:	aa02      	add	r2, sp, #8
    9284:	0021      	movs	r1, r4
    9286:	0030      	movs	r0, r6
    9288:	f000 fc0c 	bl	9aa4 <__swhatbuf_r>
    928c:	89a3      	ldrh	r3, [r4, #12]
    928e:	4318      	orrs	r0, r3
    9290:	81a0      	strh	r0, [r4, #12]
    9292:	2d00      	cmp	r5, #0
    9294:	d124      	bne.n	92e0 <setvbuf+0xdc>
    9296:	9d02      	ldr	r5, [sp, #8]
    9298:	0028      	movs	r0, r5
    929a:	f000 fc6f 	bl	9b7c <malloc>
    929e:	9501      	str	r5, [sp, #4]
    92a0:	1e07      	subs	r7, r0, #0
    92a2:	d142      	bne.n	932a <setvbuf+0x126>
    92a4:	9b02      	ldr	r3, [sp, #8]
    92a6:	9301      	str	r3, [sp, #4]
    92a8:	42ab      	cmp	r3, r5
    92aa:	d139      	bne.n	9320 <setvbuf+0x11c>
    92ac:	2001      	movs	r0, #1
    92ae:	4240      	negs	r0, r0
    92b0:	2302      	movs	r3, #2
    92b2:	89a2      	ldrh	r2, [r4, #12]
    92b4:	4313      	orrs	r3, r2
    92b6:	81a3      	strh	r3, [r4, #12]
    92b8:	2300      	movs	r3, #0
    92ba:	60a3      	str	r3, [r4, #8]
    92bc:	0023      	movs	r3, r4
    92be:	3347      	adds	r3, #71	; 0x47
    92c0:	6023      	str	r3, [r4, #0]
    92c2:	6123      	str	r3, [r4, #16]
    92c4:	2301      	movs	r3, #1
    92c6:	6163      	str	r3, [r4, #20]
    92c8:	b005      	add	sp, #20
    92ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92cc:	4b21      	ldr	r3, [pc, #132]	; (9354 <setvbuf+0x150>)
    92ce:	429c      	cmp	r4, r3
    92d0:	d101      	bne.n	92d6 <setvbuf+0xd2>
    92d2:	68b4      	ldr	r4, [r6, #8]
    92d4:	e7aa      	b.n	922c <setvbuf+0x28>
    92d6:	4b20      	ldr	r3, [pc, #128]	; (9358 <setvbuf+0x154>)
    92d8:	429c      	cmp	r4, r3
    92da:	d1a7      	bne.n	922c <setvbuf+0x28>
    92dc:	68f4      	ldr	r4, [r6, #12]
    92de:	e7a5      	b.n	922c <setvbuf+0x28>
    92e0:	2f00      	cmp	r7, #0
    92e2:	d0d9      	beq.n	9298 <setvbuf+0x94>
    92e4:	69b3      	ldr	r3, [r6, #24]
    92e6:	2b00      	cmp	r3, #0
    92e8:	d102      	bne.n	92f0 <setvbuf+0xec>
    92ea:	0030      	movs	r0, r6
    92ec:	f000 fb18 	bl	9920 <__sinit>
    92f0:	9b00      	ldr	r3, [sp, #0]
    92f2:	2b01      	cmp	r3, #1
    92f4:	d103      	bne.n	92fe <setvbuf+0xfa>
    92f6:	89a3      	ldrh	r3, [r4, #12]
    92f8:	9a00      	ldr	r2, [sp, #0]
    92fa:	431a      	orrs	r2, r3
    92fc:	81a2      	strh	r2, [r4, #12]
    92fe:	2008      	movs	r0, #8
    9300:	89a3      	ldrh	r3, [r4, #12]
    9302:	6027      	str	r7, [r4, #0]
    9304:	6127      	str	r7, [r4, #16]
    9306:	6165      	str	r5, [r4, #20]
    9308:	4018      	ands	r0, r3
    930a:	d018      	beq.n	933e <setvbuf+0x13a>
    930c:	2001      	movs	r0, #1
    930e:	4018      	ands	r0, r3
    9310:	2300      	movs	r3, #0
    9312:	4298      	cmp	r0, r3
    9314:	d011      	beq.n	933a <setvbuf+0x136>
    9316:	426d      	negs	r5, r5
    9318:	60a3      	str	r3, [r4, #8]
    931a:	61a5      	str	r5, [r4, #24]
    931c:	0018      	movs	r0, r3
    931e:	e7d3      	b.n	92c8 <setvbuf+0xc4>
    9320:	9801      	ldr	r0, [sp, #4]
    9322:	f000 fc2b 	bl	9b7c <malloc>
    9326:	1e07      	subs	r7, r0, #0
    9328:	d0c0      	beq.n	92ac <setvbuf+0xa8>
    932a:	2380      	movs	r3, #128	; 0x80
    932c:	89a2      	ldrh	r2, [r4, #12]
    932e:	9d01      	ldr	r5, [sp, #4]
    9330:	4313      	orrs	r3, r2
    9332:	81a3      	strh	r3, [r4, #12]
    9334:	e7d6      	b.n	92e4 <setvbuf+0xe0>
    9336:	2000      	movs	r0, #0
    9338:	e7ba      	b.n	92b0 <setvbuf+0xac>
    933a:	60a5      	str	r5, [r4, #8]
    933c:	e7c4      	b.n	92c8 <setvbuf+0xc4>
    933e:	60a0      	str	r0, [r4, #8]
    9340:	e7c2      	b.n	92c8 <setvbuf+0xc4>
    9342:	2001      	movs	r0, #1
    9344:	4240      	negs	r0, r0
    9346:	e7bf      	b.n	92c8 <setvbuf+0xc4>
    9348:	20000068 	.word	0x20000068
    934c:	0000b6e8 	.word	0x0000b6e8
    9350:	fffff35c 	.word	0xfffff35c
    9354:	0000b708 	.word	0x0000b708
    9358:	0000b6c8 	.word	0x0000b6c8

0000935c <strcmp>:
    935c:	7802      	ldrb	r2, [r0, #0]
    935e:	780b      	ldrb	r3, [r1, #0]
    9360:	2a00      	cmp	r2, #0
    9362:	d003      	beq.n	936c <strcmp+0x10>
    9364:	3001      	adds	r0, #1
    9366:	3101      	adds	r1, #1
    9368:	429a      	cmp	r2, r3
    936a:	d0f7      	beq.n	935c <strcmp>
    936c:	1ad0      	subs	r0, r2, r3
    936e:	4770      	bx	lr

00009370 <strtok>:
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	4b12      	ldr	r3, [pc, #72]	; (93bc <strtok+0x4c>)
    9374:	0006      	movs	r6, r0
    9376:	681d      	ldr	r5, [r3, #0]
    9378:	000f      	movs	r7, r1
    937a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    937c:	2c00      	cmp	r4, #0
    937e:	d116      	bne.n	93ae <strtok+0x3e>
    9380:	2050      	movs	r0, #80	; 0x50
    9382:	f000 fbfb 	bl	9b7c <malloc>
    9386:	65a8      	str	r0, [r5, #88]	; 0x58
    9388:	6004      	str	r4, [r0, #0]
    938a:	6044      	str	r4, [r0, #4]
    938c:	6084      	str	r4, [r0, #8]
    938e:	60c4      	str	r4, [r0, #12]
    9390:	6104      	str	r4, [r0, #16]
    9392:	6144      	str	r4, [r0, #20]
    9394:	6184      	str	r4, [r0, #24]
    9396:	6284      	str	r4, [r0, #40]	; 0x28
    9398:	62c4      	str	r4, [r0, #44]	; 0x2c
    939a:	6304      	str	r4, [r0, #48]	; 0x30
    939c:	6344      	str	r4, [r0, #52]	; 0x34
    939e:	6384      	str	r4, [r0, #56]	; 0x38
    93a0:	63c4      	str	r4, [r0, #60]	; 0x3c
    93a2:	6404      	str	r4, [r0, #64]	; 0x40
    93a4:	6444      	str	r4, [r0, #68]	; 0x44
    93a6:	6484      	str	r4, [r0, #72]	; 0x48
    93a8:	64c4      	str	r4, [r0, #76]	; 0x4c
    93aa:	7704      	strb	r4, [r0, #28]
    93ac:	6244      	str	r4, [r0, #36]	; 0x24
    93ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
    93b0:	0039      	movs	r1, r7
    93b2:	0030      	movs	r0, r6
    93b4:	2301      	movs	r3, #1
    93b6:	f000 f803 	bl	93c0 <__strtok_r>
    93ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93bc:	20000068 	.word	0x20000068

000093c0 <__strtok_r>:
    93c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93c2:	2800      	cmp	r0, #0
    93c4:	d104      	bne.n	93d0 <__strtok_r+0x10>
    93c6:	6810      	ldr	r0, [r2, #0]
    93c8:	2800      	cmp	r0, #0
    93ca:	d101      	bne.n	93d0 <__strtok_r+0x10>
    93cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93ce:	0020      	movs	r0, r4
    93d0:	000e      	movs	r6, r1
    93d2:	7805      	ldrb	r5, [r0, #0]
    93d4:	1c44      	adds	r4, r0, #1
    93d6:	7837      	ldrb	r7, [r6, #0]
    93d8:	2f00      	cmp	r7, #0
    93da:	d104      	bne.n	93e6 <__strtok_r+0x26>
    93dc:	2d00      	cmp	r5, #0
    93de:	d110      	bne.n	9402 <__strtok_r+0x42>
    93e0:	6015      	str	r5, [r2, #0]
    93e2:	0028      	movs	r0, r5
    93e4:	e7f2      	b.n	93cc <__strtok_r+0xc>
    93e6:	3601      	adds	r6, #1
    93e8:	42bd      	cmp	r5, r7
    93ea:	d1f4      	bne.n	93d6 <__strtok_r+0x16>
    93ec:	2b00      	cmp	r3, #0
    93ee:	d1ee      	bne.n	93ce <__strtok_r+0xe>
    93f0:	6014      	str	r4, [r2, #0]
    93f2:	7003      	strb	r3, [r0, #0]
    93f4:	e7ea      	b.n	93cc <__strtok_r+0xc>
    93f6:	0033      	movs	r3, r6
    93f8:	e00e      	b.n	9418 <__strtok_r+0x58>
    93fa:	3501      	adds	r5, #1
    93fc:	001c      	movs	r4, r3
    93fe:	2f00      	cmp	r7, #0
    9400:	d102      	bne.n	9408 <__strtok_r+0x48>
    9402:	000d      	movs	r5, r1
    9404:	7826      	ldrb	r6, [r4, #0]
    9406:	1c63      	adds	r3, r4, #1
    9408:	782f      	ldrb	r7, [r5, #0]
    940a:	42be      	cmp	r6, r7
    940c:	d1f5      	bne.n	93fa <__strtok_r+0x3a>
    940e:	2e00      	cmp	r6, #0
    9410:	d0f1      	beq.n	93f6 <__strtok_r+0x36>
    9412:	2400      	movs	r4, #0
    9414:	1e59      	subs	r1, r3, #1
    9416:	700c      	strb	r4, [r1, #0]
    9418:	6013      	str	r3, [r2, #0]
    941a:	e7d7      	b.n	93cc <__strtok_r+0xc>

0000941c <_strtol_l.isra.0>:
    941c:	b5f0      	push	{r4, r5, r6, r7, lr}
    941e:	001f      	movs	r7, r3
    9420:	000e      	movs	r6, r1
    9422:	b087      	sub	sp, #28
    9424:	9005      	str	r0, [sp, #20]
    9426:	9103      	str	r1, [sp, #12]
    9428:	9202      	str	r2, [sp, #8]
    942a:	980c      	ldr	r0, [sp, #48]	; 0x30
    942c:	7834      	ldrb	r4, [r6, #0]
    942e:	f000 fb28 	bl	9a82 <__locale_ctype_ptr_l>
    9432:	2208      	movs	r2, #8
    9434:	1900      	adds	r0, r0, r4
    9436:	7843      	ldrb	r3, [r0, #1]
    9438:	1c75      	adds	r5, r6, #1
    943a:	4013      	ands	r3, r2
    943c:	d10c      	bne.n	9458 <_strtol_l.isra.0+0x3c>
    943e:	2c2d      	cmp	r4, #45	; 0x2d
    9440:	d10c      	bne.n	945c <_strtol_l.isra.0+0x40>
    9442:	3301      	adds	r3, #1
    9444:	782c      	ldrb	r4, [r5, #0]
    9446:	9301      	str	r3, [sp, #4]
    9448:	1cb5      	adds	r5, r6, #2
    944a:	2f00      	cmp	r7, #0
    944c:	d00c      	beq.n	9468 <_strtol_l.isra.0+0x4c>
    944e:	2f10      	cmp	r7, #16
    9450:	d114      	bne.n	947c <_strtol_l.isra.0+0x60>
    9452:	2c30      	cmp	r4, #48	; 0x30
    9454:	d00a      	beq.n	946c <_strtol_l.isra.0+0x50>
    9456:	e011      	b.n	947c <_strtol_l.isra.0+0x60>
    9458:	002e      	movs	r6, r5
    945a:	e7e6      	b.n	942a <_strtol_l.isra.0+0xe>
    945c:	9301      	str	r3, [sp, #4]
    945e:	2c2b      	cmp	r4, #43	; 0x2b
    9460:	d1f3      	bne.n	944a <_strtol_l.isra.0+0x2e>
    9462:	782c      	ldrb	r4, [r5, #0]
    9464:	1cb5      	adds	r5, r6, #2
    9466:	e7f0      	b.n	944a <_strtol_l.isra.0+0x2e>
    9468:	2c30      	cmp	r4, #48	; 0x30
    946a:	d12f      	bne.n	94cc <_strtol_l.isra.0+0xb0>
    946c:	2220      	movs	r2, #32
    946e:	782b      	ldrb	r3, [r5, #0]
    9470:	4393      	bics	r3, r2
    9472:	2b58      	cmp	r3, #88	; 0x58
    9474:	d151      	bne.n	951a <_strtol_l.isra.0+0xfe>
    9476:	2710      	movs	r7, #16
    9478:	786c      	ldrb	r4, [r5, #1]
    947a:	3502      	adds	r5, #2
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	4a29      	ldr	r2, [pc, #164]	; (9524 <_strtol_l.isra.0+0x108>)
    9480:	0039      	movs	r1, r7
    9482:	189e      	adds	r6, r3, r2
    9484:	0030      	movs	r0, r6
    9486:	f7fe f85b 	bl	7540 <__aeabi_uidivmod>
    948a:	0030      	movs	r0, r6
    948c:	9104      	str	r1, [sp, #16]
    948e:	0039      	movs	r1, r7
    9490:	f7fd ffd0 	bl	7434 <__udivsi3>
    9494:	2101      	movs	r1, #1
    9496:	2300      	movs	r3, #0
    9498:	4249      	negs	r1, r1
    949a:	0002      	movs	r2, r0
    949c:	468c      	mov	ip, r1
    949e:	0018      	movs	r0, r3
    94a0:	0021      	movs	r1, r4
    94a2:	3930      	subs	r1, #48	; 0x30
    94a4:	2909      	cmp	r1, #9
    94a6:	d813      	bhi.n	94d0 <_strtol_l.isra.0+0xb4>
    94a8:	000c      	movs	r4, r1
    94aa:	42a7      	cmp	r7, r4
    94ac:	dd1c      	ble.n	94e8 <_strtol_l.isra.0+0xcc>
    94ae:	1c59      	adds	r1, r3, #1
    94b0:	d009      	beq.n	94c6 <_strtol_l.isra.0+0xaa>
    94b2:	4663      	mov	r3, ip
    94b4:	4282      	cmp	r2, r0
    94b6:	d306      	bcc.n	94c6 <_strtol_l.isra.0+0xaa>
    94b8:	d102      	bne.n	94c0 <_strtol_l.isra.0+0xa4>
    94ba:	9904      	ldr	r1, [sp, #16]
    94bc:	42a1      	cmp	r1, r4
    94be:	db02      	blt.n	94c6 <_strtol_l.isra.0+0xaa>
    94c0:	2301      	movs	r3, #1
    94c2:	4378      	muls	r0, r7
    94c4:	1820      	adds	r0, r4, r0
    94c6:	782c      	ldrb	r4, [r5, #0]
    94c8:	3501      	adds	r5, #1
    94ca:	e7e9      	b.n	94a0 <_strtol_l.isra.0+0x84>
    94cc:	270a      	movs	r7, #10
    94ce:	e7d5      	b.n	947c <_strtol_l.isra.0+0x60>
    94d0:	0021      	movs	r1, r4
    94d2:	3941      	subs	r1, #65	; 0x41
    94d4:	2919      	cmp	r1, #25
    94d6:	d801      	bhi.n	94dc <_strtol_l.isra.0+0xc0>
    94d8:	3c37      	subs	r4, #55	; 0x37
    94da:	e7e6      	b.n	94aa <_strtol_l.isra.0+0x8e>
    94dc:	0021      	movs	r1, r4
    94de:	3961      	subs	r1, #97	; 0x61
    94e0:	2919      	cmp	r1, #25
    94e2:	d801      	bhi.n	94e8 <_strtol_l.isra.0+0xcc>
    94e4:	3c57      	subs	r4, #87	; 0x57
    94e6:	e7e0      	b.n	94aa <_strtol_l.isra.0+0x8e>
    94e8:	1c5a      	adds	r2, r3, #1
    94ea:	d108      	bne.n	94fe <_strtol_l.isra.0+0xe2>
    94ec:	9a05      	ldr	r2, [sp, #20]
    94ee:	3323      	adds	r3, #35	; 0x23
    94f0:	6013      	str	r3, [r2, #0]
    94f2:	9b02      	ldr	r3, [sp, #8]
    94f4:	0030      	movs	r0, r6
    94f6:	2b00      	cmp	r3, #0
    94f8:	d10b      	bne.n	9512 <_strtol_l.isra.0+0xf6>
    94fa:	b007      	add	sp, #28
    94fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94fe:	9a01      	ldr	r2, [sp, #4]
    9500:	2a00      	cmp	r2, #0
    9502:	d000      	beq.n	9506 <_strtol_l.isra.0+0xea>
    9504:	4240      	negs	r0, r0
    9506:	9a02      	ldr	r2, [sp, #8]
    9508:	2a00      	cmp	r2, #0
    950a:	d0f6      	beq.n	94fa <_strtol_l.isra.0+0xde>
    950c:	9a03      	ldr	r2, [sp, #12]
    950e:	2b00      	cmp	r3, #0
    9510:	d000      	beq.n	9514 <_strtol_l.isra.0+0xf8>
    9512:	1e6a      	subs	r2, r5, #1
    9514:	9b02      	ldr	r3, [sp, #8]
    9516:	601a      	str	r2, [r3, #0]
    9518:	e7ef      	b.n	94fa <_strtol_l.isra.0+0xde>
    951a:	2430      	movs	r4, #48	; 0x30
    951c:	2f00      	cmp	r7, #0
    951e:	d1ad      	bne.n	947c <_strtol_l.isra.0+0x60>
    9520:	3708      	adds	r7, #8
    9522:	e7ab      	b.n	947c <_strtol_l.isra.0+0x60>
    9524:	7fffffff 	.word	0x7fffffff

00009528 <_strtol_r>:
    9528:	b513      	push	{r0, r1, r4, lr}
    952a:	4c05      	ldr	r4, [pc, #20]	; (9540 <_strtol_r+0x18>)
    952c:	6824      	ldr	r4, [r4, #0]
    952e:	6a24      	ldr	r4, [r4, #32]
    9530:	2c00      	cmp	r4, #0
    9532:	d100      	bne.n	9536 <_strtol_r+0xe>
    9534:	4c03      	ldr	r4, [pc, #12]	; (9544 <_strtol_r+0x1c>)
    9536:	9400      	str	r4, [sp, #0]
    9538:	f7ff ff70 	bl	941c <_strtol_l.isra.0>
    953c:	bd16      	pop	{r1, r2, r4, pc}
    953e:	46c0      	nop			; (mov r8, r8)
    9540:	20000068 	.word	0x20000068
    9544:	200000cc 	.word	0x200000cc

00009548 <strtol>:
    9548:	b537      	push	{r0, r1, r2, r4, r5, lr}
    954a:	0013      	movs	r3, r2
    954c:	4a06      	ldr	r2, [pc, #24]	; (9568 <strtol+0x20>)
    954e:	0005      	movs	r5, r0
    9550:	6810      	ldr	r0, [r2, #0]
    9552:	6a04      	ldr	r4, [r0, #32]
    9554:	2c00      	cmp	r4, #0
    9556:	d100      	bne.n	955a <strtol+0x12>
    9558:	4c04      	ldr	r4, [pc, #16]	; (956c <strtol+0x24>)
    955a:	000a      	movs	r2, r1
    955c:	9400      	str	r4, [sp, #0]
    955e:	0029      	movs	r1, r5
    9560:	f7ff ff5c 	bl	941c <_strtol_l.isra.0>
    9564:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9566:	46c0      	nop			; (mov r8, r8)
    9568:	20000068 	.word	0x20000068
    956c:	200000cc 	.word	0x200000cc

00009570 <__swbuf_r>:
    9570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9572:	0005      	movs	r5, r0
    9574:	000e      	movs	r6, r1
    9576:	0014      	movs	r4, r2
    9578:	2800      	cmp	r0, #0
    957a:	d004      	beq.n	9586 <__swbuf_r+0x16>
    957c:	6983      	ldr	r3, [r0, #24]
    957e:	2b00      	cmp	r3, #0
    9580:	d101      	bne.n	9586 <__swbuf_r+0x16>
    9582:	f000 f9cd 	bl	9920 <__sinit>
    9586:	4b22      	ldr	r3, [pc, #136]	; (9610 <__swbuf_r+0xa0>)
    9588:	429c      	cmp	r4, r3
    958a:	d12d      	bne.n	95e8 <__swbuf_r+0x78>
    958c:	686c      	ldr	r4, [r5, #4]
    958e:	69a3      	ldr	r3, [r4, #24]
    9590:	60a3      	str	r3, [r4, #8]
    9592:	89a3      	ldrh	r3, [r4, #12]
    9594:	071b      	lsls	r3, r3, #28
    9596:	d531      	bpl.n	95fc <__swbuf_r+0x8c>
    9598:	6923      	ldr	r3, [r4, #16]
    959a:	2b00      	cmp	r3, #0
    959c:	d02e      	beq.n	95fc <__swbuf_r+0x8c>
    959e:	6823      	ldr	r3, [r4, #0]
    95a0:	6922      	ldr	r2, [r4, #16]
    95a2:	b2f7      	uxtb	r7, r6
    95a4:	1a98      	subs	r0, r3, r2
    95a6:	6963      	ldr	r3, [r4, #20]
    95a8:	b2f6      	uxtb	r6, r6
    95aa:	4298      	cmp	r0, r3
    95ac:	db05      	blt.n	95ba <__swbuf_r+0x4a>
    95ae:	0021      	movs	r1, r4
    95b0:	0028      	movs	r0, r5
    95b2:	f000 f933 	bl	981c <_fflush_r>
    95b6:	2800      	cmp	r0, #0
    95b8:	d126      	bne.n	9608 <__swbuf_r+0x98>
    95ba:	68a3      	ldr	r3, [r4, #8]
    95bc:	3001      	adds	r0, #1
    95be:	3b01      	subs	r3, #1
    95c0:	60a3      	str	r3, [r4, #8]
    95c2:	6823      	ldr	r3, [r4, #0]
    95c4:	1c5a      	adds	r2, r3, #1
    95c6:	6022      	str	r2, [r4, #0]
    95c8:	701f      	strb	r7, [r3, #0]
    95ca:	6963      	ldr	r3, [r4, #20]
    95cc:	4298      	cmp	r0, r3
    95ce:	d004      	beq.n	95da <__swbuf_r+0x6a>
    95d0:	89a3      	ldrh	r3, [r4, #12]
    95d2:	07db      	lsls	r3, r3, #31
    95d4:	d51a      	bpl.n	960c <__swbuf_r+0x9c>
    95d6:	2e0a      	cmp	r6, #10
    95d8:	d118      	bne.n	960c <__swbuf_r+0x9c>
    95da:	0021      	movs	r1, r4
    95dc:	0028      	movs	r0, r5
    95de:	f000 f91d 	bl	981c <_fflush_r>
    95e2:	2800      	cmp	r0, #0
    95e4:	d012      	beq.n	960c <__swbuf_r+0x9c>
    95e6:	e00f      	b.n	9608 <__swbuf_r+0x98>
    95e8:	4b0a      	ldr	r3, [pc, #40]	; (9614 <__swbuf_r+0xa4>)
    95ea:	429c      	cmp	r4, r3
    95ec:	d101      	bne.n	95f2 <__swbuf_r+0x82>
    95ee:	68ac      	ldr	r4, [r5, #8]
    95f0:	e7cd      	b.n	958e <__swbuf_r+0x1e>
    95f2:	4b09      	ldr	r3, [pc, #36]	; (9618 <__swbuf_r+0xa8>)
    95f4:	429c      	cmp	r4, r3
    95f6:	d1ca      	bne.n	958e <__swbuf_r+0x1e>
    95f8:	68ec      	ldr	r4, [r5, #12]
    95fa:	e7c8      	b.n	958e <__swbuf_r+0x1e>
    95fc:	0021      	movs	r1, r4
    95fe:	0028      	movs	r0, r5
    9600:	f000 f80c 	bl	961c <__swsetup_r>
    9604:	2800      	cmp	r0, #0
    9606:	d0ca      	beq.n	959e <__swbuf_r+0x2e>
    9608:	2601      	movs	r6, #1
    960a:	4276      	negs	r6, r6
    960c:	0030      	movs	r0, r6
    960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9610:	0000b6e8 	.word	0x0000b6e8
    9614:	0000b708 	.word	0x0000b708
    9618:	0000b6c8 	.word	0x0000b6c8

0000961c <__swsetup_r>:
    961c:	4b36      	ldr	r3, [pc, #216]	; (96f8 <__swsetup_r+0xdc>)
    961e:	b570      	push	{r4, r5, r6, lr}
    9620:	681d      	ldr	r5, [r3, #0]
    9622:	0006      	movs	r6, r0
    9624:	000c      	movs	r4, r1
    9626:	2d00      	cmp	r5, #0
    9628:	d005      	beq.n	9636 <__swsetup_r+0x1a>
    962a:	69ab      	ldr	r3, [r5, #24]
    962c:	2b00      	cmp	r3, #0
    962e:	d102      	bne.n	9636 <__swsetup_r+0x1a>
    9630:	0028      	movs	r0, r5
    9632:	f000 f975 	bl	9920 <__sinit>
    9636:	4b31      	ldr	r3, [pc, #196]	; (96fc <__swsetup_r+0xe0>)
    9638:	429c      	cmp	r4, r3
    963a:	d10f      	bne.n	965c <__swsetup_r+0x40>
    963c:	686c      	ldr	r4, [r5, #4]
    963e:	230c      	movs	r3, #12
    9640:	5ee2      	ldrsh	r2, [r4, r3]
    9642:	b293      	uxth	r3, r2
    9644:	0719      	lsls	r1, r3, #28
    9646:	d42d      	bmi.n	96a4 <__swsetup_r+0x88>
    9648:	06d9      	lsls	r1, r3, #27
    964a:	d411      	bmi.n	9670 <__swsetup_r+0x54>
    964c:	2309      	movs	r3, #9
    964e:	2001      	movs	r0, #1
    9650:	6033      	str	r3, [r6, #0]
    9652:	3337      	adds	r3, #55	; 0x37
    9654:	4313      	orrs	r3, r2
    9656:	81a3      	strh	r3, [r4, #12]
    9658:	4240      	negs	r0, r0
    965a:	bd70      	pop	{r4, r5, r6, pc}
    965c:	4b28      	ldr	r3, [pc, #160]	; (9700 <__swsetup_r+0xe4>)
    965e:	429c      	cmp	r4, r3
    9660:	d101      	bne.n	9666 <__swsetup_r+0x4a>
    9662:	68ac      	ldr	r4, [r5, #8]
    9664:	e7eb      	b.n	963e <__swsetup_r+0x22>
    9666:	4b27      	ldr	r3, [pc, #156]	; (9704 <__swsetup_r+0xe8>)
    9668:	429c      	cmp	r4, r3
    966a:	d1e8      	bne.n	963e <__swsetup_r+0x22>
    966c:	68ec      	ldr	r4, [r5, #12]
    966e:	e7e6      	b.n	963e <__swsetup_r+0x22>
    9670:	075b      	lsls	r3, r3, #29
    9672:	d513      	bpl.n	969c <__swsetup_r+0x80>
    9674:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9676:	2900      	cmp	r1, #0
    9678:	d008      	beq.n	968c <__swsetup_r+0x70>
    967a:	0023      	movs	r3, r4
    967c:	3344      	adds	r3, #68	; 0x44
    967e:	4299      	cmp	r1, r3
    9680:	d002      	beq.n	9688 <__swsetup_r+0x6c>
    9682:	0030      	movs	r0, r6
    9684:	f000 fa96 	bl	9bb4 <_free_r>
    9688:	2300      	movs	r3, #0
    968a:	6363      	str	r3, [r4, #52]	; 0x34
    968c:	2224      	movs	r2, #36	; 0x24
    968e:	89a3      	ldrh	r3, [r4, #12]
    9690:	4393      	bics	r3, r2
    9692:	81a3      	strh	r3, [r4, #12]
    9694:	2300      	movs	r3, #0
    9696:	6063      	str	r3, [r4, #4]
    9698:	6923      	ldr	r3, [r4, #16]
    969a:	6023      	str	r3, [r4, #0]
    969c:	2308      	movs	r3, #8
    969e:	89a2      	ldrh	r2, [r4, #12]
    96a0:	4313      	orrs	r3, r2
    96a2:	81a3      	strh	r3, [r4, #12]
    96a4:	6923      	ldr	r3, [r4, #16]
    96a6:	2b00      	cmp	r3, #0
    96a8:	d10b      	bne.n	96c2 <__swsetup_r+0xa6>
    96aa:	21a0      	movs	r1, #160	; 0xa0
    96ac:	2280      	movs	r2, #128	; 0x80
    96ae:	89a3      	ldrh	r3, [r4, #12]
    96b0:	0089      	lsls	r1, r1, #2
    96b2:	0092      	lsls	r2, r2, #2
    96b4:	400b      	ands	r3, r1
    96b6:	4293      	cmp	r3, r2
    96b8:	d003      	beq.n	96c2 <__swsetup_r+0xa6>
    96ba:	0021      	movs	r1, r4
    96bc:	0030      	movs	r0, r6
    96be:	f000 fa19 	bl	9af4 <__smakebuf_r>
    96c2:	2301      	movs	r3, #1
    96c4:	89a2      	ldrh	r2, [r4, #12]
    96c6:	4013      	ands	r3, r2
    96c8:	d011      	beq.n	96ee <__swsetup_r+0xd2>
    96ca:	2300      	movs	r3, #0
    96cc:	60a3      	str	r3, [r4, #8]
    96ce:	6963      	ldr	r3, [r4, #20]
    96d0:	425b      	negs	r3, r3
    96d2:	61a3      	str	r3, [r4, #24]
    96d4:	2000      	movs	r0, #0
    96d6:	6923      	ldr	r3, [r4, #16]
    96d8:	4283      	cmp	r3, r0
    96da:	d1be      	bne.n	965a <__swsetup_r+0x3e>
    96dc:	230c      	movs	r3, #12
    96de:	5ee2      	ldrsh	r2, [r4, r3]
    96e0:	0613      	lsls	r3, r2, #24
    96e2:	d5ba      	bpl.n	965a <__swsetup_r+0x3e>
    96e4:	2340      	movs	r3, #64	; 0x40
    96e6:	4313      	orrs	r3, r2
    96e8:	81a3      	strh	r3, [r4, #12]
    96ea:	3801      	subs	r0, #1
    96ec:	e7b5      	b.n	965a <__swsetup_r+0x3e>
    96ee:	0792      	lsls	r2, r2, #30
    96f0:	d400      	bmi.n	96f4 <__swsetup_r+0xd8>
    96f2:	6963      	ldr	r3, [r4, #20]
    96f4:	60a3      	str	r3, [r4, #8]
    96f6:	e7ed      	b.n	96d4 <__swsetup_r+0xb8>
    96f8:	20000068 	.word	0x20000068
    96fc:	0000b6e8 	.word	0x0000b6e8
    9700:	0000b708 	.word	0x0000b708
    9704:	0000b6c8 	.word	0x0000b6c8

00009708 <__sflush_r>:
    9708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    970a:	898a      	ldrh	r2, [r1, #12]
    970c:	0005      	movs	r5, r0
    970e:	000c      	movs	r4, r1
    9710:	0713      	lsls	r3, r2, #28
    9712:	d460      	bmi.n	97d6 <__sflush_r+0xce>
    9714:	684b      	ldr	r3, [r1, #4]
    9716:	2b00      	cmp	r3, #0
    9718:	dc04      	bgt.n	9724 <__sflush_r+0x1c>
    971a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    971c:	2b00      	cmp	r3, #0
    971e:	dc01      	bgt.n	9724 <__sflush_r+0x1c>
    9720:	2000      	movs	r0, #0
    9722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9724:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9726:	2f00      	cmp	r7, #0
    9728:	d0fa      	beq.n	9720 <__sflush_r+0x18>
    972a:	2300      	movs	r3, #0
    972c:	682e      	ldr	r6, [r5, #0]
    972e:	602b      	str	r3, [r5, #0]
    9730:	2380      	movs	r3, #128	; 0x80
    9732:	015b      	lsls	r3, r3, #5
    9734:	401a      	ands	r2, r3
    9736:	d034      	beq.n	97a2 <__sflush_r+0x9a>
    9738:	6d60      	ldr	r0, [r4, #84]	; 0x54
    973a:	89a3      	ldrh	r3, [r4, #12]
    973c:	075b      	lsls	r3, r3, #29
    973e:	d506      	bpl.n	974e <__sflush_r+0x46>
    9740:	6863      	ldr	r3, [r4, #4]
    9742:	1ac0      	subs	r0, r0, r3
    9744:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9746:	2b00      	cmp	r3, #0
    9748:	d001      	beq.n	974e <__sflush_r+0x46>
    974a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    974c:	1ac0      	subs	r0, r0, r3
    974e:	0002      	movs	r2, r0
    9750:	6a21      	ldr	r1, [r4, #32]
    9752:	2300      	movs	r3, #0
    9754:	0028      	movs	r0, r5
    9756:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9758:	47b8      	blx	r7
    975a:	89a1      	ldrh	r1, [r4, #12]
    975c:	1c43      	adds	r3, r0, #1
    975e:	d106      	bne.n	976e <__sflush_r+0x66>
    9760:	682b      	ldr	r3, [r5, #0]
    9762:	2b1d      	cmp	r3, #29
    9764:	d831      	bhi.n	97ca <__sflush_r+0xc2>
    9766:	4a2c      	ldr	r2, [pc, #176]	; (9818 <__sflush_r+0x110>)
    9768:	40da      	lsrs	r2, r3
    976a:	07d3      	lsls	r3, r2, #31
    976c:	d52d      	bpl.n	97ca <__sflush_r+0xc2>
    976e:	2300      	movs	r3, #0
    9770:	6063      	str	r3, [r4, #4]
    9772:	6923      	ldr	r3, [r4, #16]
    9774:	6023      	str	r3, [r4, #0]
    9776:	04cb      	lsls	r3, r1, #19
    9778:	d505      	bpl.n	9786 <__sflush_r+0x7e>
    977a:	1c43      	adds	r3, r0, #1
    977c:	d102      	bne.n	9784 <__sflush_r+0x7c>
    977e:	682b      	ldr	r3, [r5, #0]
    9780:	2b00      	cmp	r3, #0
    9782:	d100      	bne.n	9786 <__sflush_r+0x7e>
    9784:	6560      	str	r0, [r4, #84]	; 0x54
    9786:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9788:	602e      	str	r6, [r5, #0]
    978a:	2900      	cmp	r1, #0
    978c:	d0c8      	beq.n	9720 <__sflush_r+0x18>
    978e:	0023      	movs	r3, r4
    9790:	3344      	adds	r3, #68	; 0x44
    9792:	4299      	cmp	r1, r3
    9794:	d002      	beq.n	979c <__sflush_r+0x94>
    9796:	0028      	movs	r0, r5
    9798:	f000 fa0c 	bl	9bb4 <_free_r>
    979c:	2000      	movs	r0, #0
    979e:	6360      	str	r0, [r4, #52]	; 0x34
    97a0:	e7bf      	b.n	9722 <__sflush_r+0x1a>
    97a2:	2301      	movs	r3, #1
    97a4:	6a21      	ldr	r1, [r4, #32]
    97a6:	0028      	movs	r0, r5
    97a8:	47b8      	blx	r7
    97aa:	1c43      	adds	r3, r0, #1
    97ac:	d1c5      	bne.n	973a <__sflush_r+0x32>
    97ae:	682b      	ldr	r3, [r5, #0]
    97b0:	2b00      	cmp	r3, #0
    97b2:	d0c2      	beq.n	973a <__sflush_r+0x32>
    97b4:	2b1d      	cmp	r3, #29
    97b6:	d001      	beq.n	97bc <__sflush_r+0xb4>
    97b8:	2b16      	cmp	r3, #22
    97ba:	d101      	bne.n	97c0 <__sflush_r+0xb8>
    97bc:	602e      	str	r6, [r5, #0]
    97be:	e7af      	b.n	9720 <__sflush_r+0x18>
    97c0:	2340      	movs	r3, #64	; 0x40
    97c2:	89a2      	ldrh	r2, [r4, #12]
    97c4:	4313      	orrs	r3, r2
    97c6:	81a3      	strh	r3, [r4, #12]
    97c8:	e7ab      	b.n	9722 <__sflush_r+0x1a>
    97ca:	2340      	movs	r3, #64	; 0x40
    97cc:	430b      	orrs	r3, r1
    97ce:	2001      	movs	r0, #1
    97d0:	81a3      	strh	r3, [r4, #12]
    97d2:	4240      	negs	r0, r0
    97d4:	e7a5      	b.n	9722 <__sflush_r+0x1a>
    97d6:	690f      	ldr	r7, [r1, #16]
    97d8:	2f00      	cmp	r7, #0
    97da:	d0a1      	beq.n	9720 <__sflush_r+0x18>
    97dc:	680b      	ldr	r3, [r1, #0]
    97de:	600f      	str	r7, [r1, #0]
    97e0:	1bdb      	subs	r3, r3, r7
    97e2:	9301      	str	r3, [sp, #4]
    97e4:	2300      	movs	r3, #0
    97e6:	0792      	lsls	r2, r2, #30
    97e8:	d100      	bne.n	97ec <__sflush_r+0xe4>
    97ea:	694b      	ldr	r3, [r1, #20]
    97ec:	60a3      	str	r3, [r4, #8]
    97ee:	9b01      	ldr	r3, [sp, #4]
    97f0:	2b00      	cmp	r3, #0
    97f2:	dc00      	bgt.n	97f6 <__sflush_r+0xee>
    97f4:	e794      	b.n	9720 <__sflush_r+0x18>
    97f6:	9b01      	ldr	r3, [sp, #4]
    97f8:	003a      	movs	r2, r7
    97fa:	6a21      	ldr	r1, [r4, #32]
    97fc:	0028      	movs	r0, r5
    97fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9800:	47b0      	blx	r6
    9802:	2800      	cmp	r0, #0
    9804:	dc03      	bgt.n	980e <__sflush_r+0x106>
    9806:	2340      	movs	r3, #64	; 0x40
    9808:	89a2      	ldrh	r2, [r4, #12]
    980a:	4313      	orrs	r3, r2
    980c:	e7df      	b.n	97ce <__sflush_r+0xc6>
    980e:	9b01      	ldr	r3, [sp, #4]
    9810:	183f      	adds	r7, r7, r0
    9812:	1a1b      	subs	r3, r3, r0
    9814:	9301      	str	r3, [sp, #4]
    9816:	e7ea      	b.n	97ee <__sflush_r+0xe6>
    9818:	20400001 	.word	0x20400001

0000981c <_fflush_r>:
    981c:	690b      	ldr	r3, [r1, #16]
    981e:	b570      	push	{r4, r5, r6, lr}
    9820:	0005      	movs	r5, r0
    9822:	000c      	movs	r4, r1
    9824:	2b00      	cmp	r3, #0
    9826:	d101      	bne.n	982c <_fflush_r+0x10>
    9828:	2000      	movs	r0, #0
    982a:	bd70      	pop	{r4, r5, r6, pc}
    982c:	2800      	cmp	r0, #0
    982e:	d004      	beq.n	983a <_fflush_r+0x1e>
    9830:	6983      	ldr	r3, [r0, #24]
    9832:	2b00      	cmp	r3, #0
    9834:	d101      	bne.n	983a <_fflush_r+0x1e>
    9836:	f000 f873 	bl	9920 <__sinit>
    983a:	4b0b      	ldr	r3, [pc, #44]	; (9868 <_fflush_r+0x4c>)
    983c:	429c      	cmp	r4, r3
    983e:	d109      	bne.n	9854 <_fflush_r+0x38>
    9840:	686c      	ldr	r4, [r5, #4]
    9842:	220c      	movs	r2, #12
    9844:	5ea3      	ldrsh	r3, [r4, r2]
    9846:	2b00      	cmp	r3, #0
    9848:	d0ee      	beq.n	9828 <_fflush_r+0xc>
    984a:	0021      	movs	r1, r4
    984c:	0028      	movs	r0, r5
    984e:	f7ff ff5b 	bl	9708 <__sflush_r>
    9852:	e7ea      	b.n	982a <_fflush_r+0xe>
    9854:	4b05      	ldr	r3, [pc, #20]	; (986c <_fflush_r+0x50>)
    9856:	429c      	cmp	r4, r3
    9858:	d101      	bne.n	985e <_fflush_r+0x42>
    985a:	68ac      	ldr	r4, [r5, #8]
    985c:	e7f1      	b.n	9842 <_fflush_r+0x26>
    985e:	4b04      	ldr	r3, [pc, #16]	; (9870 <_fflush_r+0x54>)
    9860:	429c      	cmp	r4, r3
    9862:	d1ee      	bne.n	9842 <_fflush_r+0x26>
    9864:	68ec      	ldr	r4, [r5, #12]
    9866:	e7ec      	b.n	9842 <_fflush_r+0x26>
    9868:	0000b6e8 	.word	0x0000b6e8
    986c:	0000b708 	.word	0x0000b708
    9870:	0000b6c8 	.word	0x0000b6c8

00009874 <fflush>:
    9874:	b510      	push	{r4, lr}
    9876:	1e01      	subs	r1, r0, #0
    9878:	d105      	bne.n	9886 <fflush+0x12>
    987a:	4b05      	ldr	r3, [pc, #20]	; (9890 <fflush+0x1c>)
    987c:	4905      	ldr	r1, [pc, #20]	; (9894 <fflush+0x20>)
    987e:	6818      	ldr	r0, [r3, #0]
    9880:	f000 f8de 	bl	9a40 <_fwalk_reent>
    9884:	bd10      	pop	{r4, pc}
    9886:	4b04      	ldr	r3, [pc, #16]	; (9898 <fflush+0x24>)
    9888:	6818      	ldr	r0, [r3, #0]
    988a:	f7ff ffc7 	bl	981c <_fflush_r>
    988e:	e7f9      	b.n	9884 <fflush+0x10>
    9890:	0000b6c4 	.word	0x0000b6c4
    9894:	0000981d 	.word	0x0000981d
    9898:	20000068 	.word	0x20000068

0000989c <_cleanup_r>:
    989c:	b510      	push	{r4, lr}
    989e:	4902      	ldr	r1, [pc, #8]	; (98a8 <_cleanup_r+0xc>)
    98a0:	f000 f8ce 	bl	9a40 <_fwalk_reent>
    98a4:	bd10      	pop	{r4, pc}
    98a6:	46c0      	nop			; (mov r8, r8)
    98a8:	0000981d 	.word	0x0000981d

000098ac <std.isra.0>:
    98ac:	2300      	movs	r3, #0
    98ae:	b510      	push	{r4, lr}
    98b0:	0004      	movs	r4, r0
    98b2:	6003      	str	r3, [r0, #0]
    98b4:	6043      	str	r3, [r0, #4]
    98b6:	6083      	str	r3, [r0, #8]
    98b8:	8181      	strh	r1, [r0, #12]
    98ba:	6643      	str	r3, [r0, #100]	; 0x64
    98bc:	81c2      	strh	r2, [r0, #14]
    98be:	6103      	str	r3, [r0, #16]
    98c0:	6143      	str	r3, [r0, #20]
    98c2:	6183      	str	r3, [r0, #24]
    98c4:	0019      	movs	r1, r3
    98c6:	2208      	movs	r2, #8
    98c8:	305c      	adds	r0, #92	; 0x5c
    98ca:	f7ff fbea 	bl	90a2 <memset>
    98ce:	4b05      	ldr	r3, [pc, #20]	; (98e4 <std.isra.0+0x38>)
    98d0:	6224      	str	r4, [r4, #32]
    98d2:	6263      	str	r3, [r4, #36]	; 0x24
    98d4:	4b04      	ldr	r3, [pc, #16]	; (98e8 <std.isra.0+0x3c>)
    98d6:	62a3      	str	r3, [r4, #40]	; 0x28
    98d8:	4b04      	ldr	r3, [pc, #16]	; (98ec <std.isra.0+0x40>)
    98da:	62e3      	str	r3, [r4, #44]	; 0x2c
    98dc:	4b04      	ldr	r3, [pc, #16]	; (98f0 <std.isra.0+0x44>)
    98de:	6323      	str	r3, [r4, #48]	; 0x30
    98e0:	bd10      	pop	{r4, pc}
    98e2:	46c0      	nop			; (mov r8, r8)
    98e4:	0000aa81 	.word	0x0000aa81
    98e8:	0000aaa9 	.word	0x0000aaa9
    98ec:	0000aae1 	.word	0x0000aae1
    98f0:	0000ab0d 	.word	0x0000ab0d

000098f4 <__sfmoreglue>:
    98f4:	b570      	push	{r4, r5, r6, lr}
    98f6:	2568      	movs	r5, #104	; 0x68
    98f8:	1e4a      	subs	r2, r1, #1
    98fa:	4355      	muls	r5, r2
    98fc:	000e      	movs	r6, r1
    98fe:	0029      	movs	r1, r5
    9900:	3174      	adds	r1, #116	; 0x74
    9902:	f000 f9a1 	bl	9c48 <_malloc_r>
    9906:	1e04      	subs	r4, r0, #0
    9908:	d008      	beq.n	991c <__sfmoreglue+0x28>
    990a:	2100      	movs	r1, #0
    990c:	002a      	movs	r2, r5
    990e:	6001      	str	r1, [r0, #0]
    9910:	6046      	str	r6, [r0, #4]
    9912:	300c      	adds	r0, #12
    9914:	60a0      	str	r0, [r4, #8]
    9916:	3268      	adds	r2, #104	; 0x68
    9918:	f7ff fbc3 	bl	90a2 <memset>
    991c:	0020      	movs	r0, r4
    991e:	bd70      	pop	{r4, r5, r6, pc}

00009920 <__sinit>:
    9920:	6983      	ldr	r3, [r0, #24]
    9922:	b513      	push	{r0, r1, r4, lr}
    9924:	0004      	movs	r4, r0
    9926:	2b00      	cmp	r3, #0
    9928:	d128      	bne.n	997c <__sinit+0x5c>
    992a:	6483      	str	r3, [r0, #72]	; 0x48
    992c:	64c3      	str	r3, [r0, #76]	; 0x4c
    992e:	6503      	str	r3, [r0, #80]	; 0x50
    9930:	4b13      	ldr	r3, [pc, #76]	; (9980 <__sinit+0x60>)
    9932:	4a14      	ldr	r2, [pc, #80]	; (9984 <__sinit+0x64>)
    9934:	681b      	ldr	r3, [r3, #0]
    9936:	6282      	str	r2, [r0, #40]	; 0x28
    9938:	9301      	str	r3, [sp, #4]
    993a:	4298      	cmp	r0, r3
    993c:	d101      	bne.n	9942 <__sinit+0x22>
    993e:	2301      	movs	r3, #1
    9940:	6183      	str	r3, [r0, #24]
    9942:	0020      	movs	r0, r4
    9944:	f000 f820 	bl	9988 <__sfp>
    9948:	6060      	str	r0, [r4, #4]
    994a:	0020      	movs	r0, r4
    994c:	f000 f81c 	bl	9988 <__sfp>
    9950:	60a0      	str	r0, [r4, #8]
    9952:	0020      	movs	r0, r4
    9954:	f000 f818 	bl	9988 <__sfp>
    9958:	2200      	movs	r2, #0
    995a:	60e0      	str	r0, [r4, #12]
    995c:	2104      	movs	r1, #4
    995e:	6860      	ldr	r0, [r4, #4]
    9960:	f7ff ffa4 	bl	98ac <std.isra.0>
    9964:	2201      	movs	r2, #1
    9966:	2109      	movs	r1, #9
    9968:	68a0      	ldr	r0, [r4, #8]
    996a:	f7ff ff9f 	bl	98ac <std.isra.0>
    996e:	2202      	movs	r2, #2
    9970:	2112      	movs	r1, #18
    9972:	68e0      	ldr	r0, [r4, #12]
    9974:	f7ff ff9a 	bl	98ac <std.isra.0>
    9978:	2301      	movs	r3, #1
    997a:	61a3      	str	r3, [r4, #24]
    997c:	bd13      	pop	{r0, r1, r4, pc}
    997e:	46c0      	nop			; (mov r8, r8)
    9980:	0000b6c4 	.word	0x0000b6c4
    9984:	0000989d 	.word	0x0000989d

00009988 <__sfp>:
    9988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    998a:	4b1e      	ldr	r3, [pc, #120]	; (9a04 <__sfp+0x7c>)
    998c:	0007      	movs	r7, r0
    998e:	681e      	ldr	r6, [r3, #0]
    9990:	69b3      	ldr	r3, [r6, #24]
    9992:	2b00      	cmp	r3, #0
    9994:	d102      	bne.n	999c <__sfp+0x14>
    9996:	0030      	movs	r0, r6
    9998:	f7ff ffc2 	bl	9920 <__sinit>
    999c:	3648      	adds	r6, #72	; 0x48
    999e:	68b4      	ldr	r4, [r6, #8]
    99a0:	6873      	ldr	r3, [r6, #4]
    99a2:	3b01      	subs	r3, #1
    99a4:	d504      	bpl.n	99b0 <__sfp+0x28>
    99a6:	6833      	ldr	r3, [r6, #0]
    99a8:	2b00      	cmp	r3, #0
    99aa:	d007      	beq.n	99bc <__sfp+0x34>
    99ac:	6836      	ldr	r6, [r6, #0]
    99ae:	e7f6      	b.n	999e <__sfp+0x16>
    99b0:	220c      	movs	r2, #12
    99b2:	5ea5      	ldrsh	r5, [r4, r2]
    99b4:	2d00      	cmp	r5, #0
    99b6:	d00d      	beq.n	99d4 <__sfp+0x4c>
    99b8:	3468      	adds	r4, #104	; 0x68
    99ba:	e7f2      	b.n	99a2 <__sfp+0x1a>
    99bc:	2104      	movs	r1, #4
    99be:	0038      	movs	r0, r7
    99c0:	f7ff ff98 	bl	98f4 <__sfmoreglue>
    99c4:	6030      	str	r0, [r6, #0]
    99c6:	2800      	cmp	r0, #0
    99c8:	d1f0      	bne.n	99ac <__sfp+0x24>
    99ca:	230c      	movs	r3, #12
    99cc:	0004      	movs	r4, r0
    99ce:	603b      	str	r3, [r7, #0]
    99d0:	0020      	movs	r0, r4
    99d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99d4:	2301      	movs	r3, #1
    99d6:	0020      	movs	r0, r4
    99d8:	425b      	negs	r3, r3
    99da:	81e3      	strh	r3, [r4, #14]
    99dc:	3302      	adds	r3, #2
    99de:	81a3      	strh	r3, [r4, #12]
    99e0:	6665      	str	r5, [r4, #100]	; 0x64
    99e2:	6025      	str	r5, [r4, #0]
    99e4:	60a5      	str	r5, [r4, #8]
    99e6:	6065      	str	r5, [r4, #4]
    99e8:	6125      	str	r5, [r4, #16]
    99ea:	6165      	str	r5, [r4, #20]
    99ec:	61a5      	str	r5, [r4, #24]
    99ee:	2208      	movs	r2, #8
    99f0:	0029      	movs	r1, r5
    99f2:	305c      	adds	r0, #92	; 0x5c
    99f4:	f7ff fb55 	bl	90a2 <memset>
    99f8:	6365      	str	r5, [r4, #52]	; 0x34
    99fa:	63a5      	str	r5, [r4, #56]	; 0x38
    99fc:	64a5      	str	r5, [r4, #72]	; 0x48
    99fe:	64e5      	str	r5, [r4, #76]	; 0x4c
    9a00:	e7e6      	b.n	99d0 <__sfp+0x48>
    9a02:	46c0      	nop			; (mov r8, r8)
    9a04:	0000b6c4 	.word	0x0000b6c4

00009a08 <_fwalk>:
    9a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a0a:	3048      	adds	r0, #72	; 0x48
    9a0c:	0004      	movs	r4, r0
    9a0e:	2600      	movs	r6, #0
    9a10:	9101      	str	r1, [sp, #4]
    9a12:	2c00      	cmp	r4, #0
    9a14:	d101      	bne.n	9a1a <_fwalk+0x12>
    9a16:	0030      	movs	r0, r6
    9a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a1a:	68a5      	ldr	r5, [r4, #8]
    9a1c:	6867      	ldr	r7, [r4, #4]
    9a1e:	3f01      	subs	r7, #1
    9a20:	d501      	bpl.n	9a26 <_fwalk+0x1e>
    9a22:	6824      	ldr	r4, [r4, #0]
    9a24:	e7f5      	b.n	9a12 <_fwalk+0xa>
    9a26:	89ab      	ldrh	r3, [r5, #12]
    9a28:	2b01      	cmp	r3, #1
    9a2a:	d907      	bls.n	9a3c <_fwalk+0x34>
    9a2c:	220e      	movs	r2, #14
    9a2e:	5eab      	ldrsh	r3, [r5, r2]
    9a30:	3301      	adds	r3, #1
    9a32:	d003      	beq.n	9a3c <_fwalk+0x34>
    9a34:	0028      	movs	r0, r5
    9a36:	9b01      	ldr	r3, [sp, #4]
    9a38:	4798      	blx	r3
    9a3a:	4306      	orrs	r6, r0
    9a3c:	3568      	adds	r5, #104	; 0x68
    9a3e:	e7ee      	b.n	9a1e <_fwalk+0x16>

00009a40 <_fwalk_reent>:
    9a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a42:	0004      	movs	r4, r0
    9a44:	0007      	movs	r7, r0
    9a46:	2600      	movs	r6, #0
    9a48:	9101      	str	r1, [sp, #4]
    9a4a:	3448      	adds	r4, #72	; 0x48
    9a4c:	2c00      	cmp	r4, #0
    9a4e:	d101      	bne.n	9a54 <_fwalk_reent+0x14>
    9a50:	0030      	movs	r0, r6
    9a52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a54:	6863      	ldr	r3, [r4, #4]
    9a56:	68a5      	ldr	r5, [r4, #8]
    9a58:	9300      	str	r3, [sp, #0]
    9a5a:	9b00      	ldr	r3, [sp, #0]
    9a5c:	3b01      	subs	r3, #1
    9a5e:	9300      	str	r3, [sp, #0]
    9a60:	d501      	bpl.n	9a66 <_fwalk_reent+0x26>
    9a62:	6824      	ldr	r4, [r4, #0]
    9a64:	e7f2      	b.n	9a4c <_fwalk_reent+0xc>
    9a66:	89ab      	ldrh	r3, [r5, #12]
    9a68:	2b01      	cmp	r3, #1
    9a6a:	d908      	bls.n	9a7e <_fwalk_reent+0x3e>
    9a6c:	220e      	movs	r2, #14
    9a6e:	5eab      	ldrsh	r3, [r5, r2]
    9a70:	3301      	adds	r3, #1
    9a72:	d004      	beq.n	9a7e <_fwalk_reent+0x3e>
    9a74:	0029      	movs	r1, r5
    9a76:	0038      	movs	r0, r7
    9a78:	9b01      	ldr	r3, [sp, #4]
    9a7a:	4798      	blx	r3
    9a7c:	4306      	orrs	r6, r0
    9a7e:	3568      	adds	r5, #104	; 0x68
    9a80:	e7eb      	b.n	9a5a <_fwalk_reent+0x1a>

00009a82 <__locale_ctype_ptr_l>:
    9a82:	30ec      	adds	r0, #236	; 0xec
    9a84:	6800      	ldr	r0, [r0, #0]
    9a86:	4770      	bx	lr

00009a88 <__locale_ctype_ptr>:
    9a88:	4b04      	ldr	r3, [pc, #16]	; (9a9c <__locale_ctype_ptr+0x14>)
    9a8a:	681b      	ldr	r3, [r3, #0]
    9a8c:	6a1b      	ldr	r3, [r3, #32]
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d100      	bne.n	9a94 <__locale_ctype_ptr+0xc>
    9a92:	4b03      	ldr	r3, [pc, #12]	; (9aa0 <__locale_ctype_ptr+0x18>)
    9a94:	33ec      	adds	r3, #236	; 0xec
    9a96:	6818      	ldr	r0, [r3, #0]
    9a98:	4770      	bx	lr
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000068 	.word	0x20000068
    9aa0:	200000cc 	.word	0x200000cc

00009aa4 <__swhatbuf_r>:
    9aa4:	b570      	push	{r4, r5, r6, lr}
    9aa6:	000e      	movs	r6, r1
    9aa8:	001d      	movs	r5, r3
    9aaa:	230e      	movs	r3, #14
    9aac:	5ec9      	ldrsh	r1, [r1, r3]
    9aae:	b090      	sub	sp, #64	; 0x40
    9ab0:	0014      	movs	r4, r2
    9ab2:	2900      	cmp	r1, #0
    9ab4:	da07      	bge.n	9ac6 <__swhatbuf_r+0x22>
    9ab6:	2300      	movs	r3, #0
    9ab8:	602b      	str	r3, [r5, #0]
    9aba:	89b3      	ldrh	r3, [r6, #12]
    9abc:	061b      	lsls	r3, r3, #24
    9abe:	d411      	bmi.n	9ae4 <__swhatbuf_r+0x40>
    9ac0:	2380      	movs	r3, #128	; 0x80
    9ac2:	00db      	lsls	r3, r3, #3
    9ac4:	e00f      	b.n	9ae6 <__swhatbuf_r+0x42>
    9ac6:	aa01      	add	r2, sp, #4
    9ac8:	f001 f9a0 	bl	ae0c <_fstat_r>
    9acc:	2800      	cmp	r0, #0
    9ace:	dbf2      	blt.n	9ab6 <__swhatbuf_r+0x12>
    9ad0:	22f0      	movs	r2, #240	; 0xf0
    9ad2:	9b02      	ldr	r3, [sp, #8]
    9ad4:	0212      	lsls	r2, r2, #8
    9ad6:	4013      	ands	r3, r2
    9ad8:	4a05      	ldr	r2, [pc, #20]	; (9af0 <__swhatbuf_r+0x4c>)
    9ada:	189b      	adds	r3, r3, r2
    9adc:	425a      	negs	r2, r3
    9ade:	4153      	adcs	r3, r2
    9ae0:	602b      	str	r3, [r5, #0]
    9ae2:	e7ed      	b.n	9ac0 <__swhatbuf_r+0x1c>
    9ae4:	2340      	movs	r3, #64	; 0x40
    9ae6:	2000      	movs	r0, #0
    9ae8:	6023      	str	r3, [r4, #0]
    9aea:	b010      	add	sp, #64	; 0x40
    9aec:	bd70      	pop	{r4, r5, r6, pc}
    9aee:	46c0      	nop			; (mov r8, r8)
    9af0:	ffffe000 	.word	0xffffe000

00009af4 <__smakebuf_r>:
    9af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9af6:	2602      	movs	r6, #2
    9af8:	898b      	ldrh	r3, [r1, #12]
    9afa:	0005      	movs	r5, r0
    9afc:	000c      	movs	r4, r1
    9afe:	4233      	tst	r3, r6
    9b00:	d006      	beq.n	9b10 <__smakebuf_r+0x1c>
    9b02:	0023      	movs	r3, r4
    9b04:	3347      	adds	r3, #71	; 0x47
    9b06:	6023      	str	r3, [r4, #0]
    9b08:	6123      	str	r3, [r4, #16]
    9b0a:	2301      	movs	r3, #1
    9b0c:	6163      	str	r3, [r4, #20]
    9b0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9b10:	ab01      	add	r3, sp, #4
    9b12:	466a      	mov	r2, sp
    9b14:	f7ff ffc6 	bl	9aa4 <__swhatbuf_r>
    9b18:	9900      	ldr	r1, [sp, #0]
    9b1a:	0007      	movs	r7, r0
    9b1c:	0028      	movs	r0, r5
    9b1e:	f000 f893 	bl	9c48 <_malloc_r>
    9b22:	2800      	cmp	r0, #0
    9b24:	d108      	bne.n	9b38 <__smakebuf_r+0x44>
    9b26:	220c      	movs	r2, #12
    9b28:	5ea3      	ldrsh	r3, [r4, r2]
    9b2a:	059a      	lsls	r2, r3, #22
    9b2c:	d4ef      	bmi.n	9b0e <__smakebuf_r+0x1a>
    9b2e:	2203      	movs	r2, #3
    9b30:	4393      	bics	r3, r2
    9b32:	431e      	orrs	r6, r3
    9b34:	81a6      	strh	r6, [r4, #12]
    9b36:	e7e4      	b.n	9b02 <__smakebuf_r+0xe>
    9b38:	4b0f      	ldr	r3, [pc, #60]	; (9b78 <__smakebuf_r+0x84>)
    9b3a:	62ab      	str	r3, [r5, #40]	; 0x28
    9b3c:	2380      	movs	r3, #128	; 0x80
    9b3e:	89a2      	ldrh	r2, [r4, #12]
    9b40:	6020      	str	r0, [r4, #0]
    9b42:	4313      	orrs	r3, r2
    9b44:	81a3      	strh	r3, [r4, #12]
    9b46:	9b00      	ldr	r3, [sp, #0]
    9b48:	6120      	str	r0, [r4, #16]
    9b4a:	6163      	str	r3, [r4, #20]
    9b4c:	9b01      	ldr	r3, [sp, #4]
    9b4e:	2b00      	cmp	r3, #0
    9b50:	d00d      	beq.n	9b6e <__smakebuf_r+0x7a>
    9b52:	230e      	movs	r3, #14
    9b54:	5ee1      	ldrsh	r1, [r4, r3]
    9b56:	0028      	movs	r0, r5
    9b58:	f001 f96a 	bl	ae30 <_isatty_r>
    9b5c:	2800      	cmp	r0, #0
    9b5e:	d006      	beq.n	9b6e <__smakebuf_r+0x7a>
    9b60:	2203      	movs	r2, #3
    9b62:	89a3      	ldrh	r3, [r4, #12]
    9b64:	4393      	bics	r3, r2
    9b66:	001a      	movs	r2, r3
    9b68:	2301      	movs	r3, #1
    9b6a:	4313      	orrs	r3, r2
    9b6c:	81a3      	strh	r3, [r4, #12]
    9b6e:	89a0      	ldrh	r0, [r4, #12]
    9b70:	4338      	orrs	r0, r7
    9b72:	81a0      	strh	r0, [r4, #12]
    9b74:	e7cb      	b.n	9b0e <__smakebuf_r+0x1a>
    9b76:	46c0      	nop			; (mov r8, r8)
    9b78:	0000989d 	.word	0x0000989d

00009b7c <malloc>:
    9b7c:	b510      	push	{r4, lr}
    9b7e:	4b03      	ldr	r3, [pc, #12]	; (9b8c <malloc+0x10>)
    9b80:	0001      	movs	r1, r0
    9b82:	6818      	ldr	r0, [r3, #0]
    9b84:	f000 f860 	bl	9c48 <_malloc_r>
    9b88:	bd10      	pop	{r4, pc}
    9b8a:	46c0      	nop			; (mov r8, r8)
    9b8c:	20000068 	.word	0x20000068

00009b90 <__ascii_mbtowc>:
    9b90:	b082      	sub	sp, #8
    9b92:	2900      	cmp	r1, #0
    9b94:	d100      	bne.n	9b98 <__ascii_mbtowc+0x8>
    9b96:	a901      	add	r1, sp, #4
    9b98:	1e10      	subs	r0, r2, #0
    9b9a:	d006      	beq.n	9baa <__ascii_mbtowc+0x1a>
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d006      	beq.n	9bae <__ascii_mbtowc+0x1e>
    9ba0:	7813      	ldrb	r3, [r2, #0]
    9ba2:	600b      	str	r3, [r1, #0]
    9ba4:	7810      	ldrb	r0, [r2, #0]
    9ba6:	1e43      	subs	r3, r0, #1
    9ba8:	4198      	sbcs	r0, r3
    9baa:	b002      	add	sp, #8
    9bac:	4770      	bx	lr
    9bae:	2002      	movs	r0, #2
    9bb0:	4240      	negs	r0, r0
    9bb2:	e7fa      	b.n	9baa <__ascii_mbtowc+0x1a>

00009bb4 <_free_r>:
    9bb4:	b570      	push	{r4, r5, r6, lr}
    9bb6:	0005      	movs	r5, r0
    9bb8:	2900      	cmp	r1, #0
    9bba:	d010      	beq.n	9bde <_free_r+0x2a>
    9bbc:	1f0c      	subs	r4, r1, #4
    9bbe:	6823      	ldr	r3, [r4, #0]
    9bc0:	2b00      	cmp	r3, #0
    9bc2:	da00      	bge.n	9bc6 <_free_r+0x12>
    9bc4:	18e4      	adds	r4, r4, r3
    9bc6:	0028      	movs	r0, r5
    9bc8:	f001 f963 	bl	ae92 <__malloc_lock>
    9bcc:	4a1d      	ldr	r2, [pc, #116]	; (9c44 <_free_r+0x90>)
    9bce:	6813      	ldr	r3, [r2, #0]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d105      	bne.n	9be0 <_free_r+0x2c>
    9bd4:	6063      	str	r3, [r4, #4]
    9bd6:	6014      	str	r4, [r2, #0]
    9bd8:	0028      	movs	r0, r5
    9bda:	f001 f95b 	bl	ae94 <__malloc_unlock>
    9bde:	bd70      	pop	{r4, r5, r6, pc}
    9be0:	42a3      	cmp	r3, r4
    9be2:	d909      	bls.n	9bf8 <_free_r+0x44>
    9be4:	6821      	ldr	r1, [r4, #0]
    9be6:	1860      	adds	r0, r4, r1
    9be8:	4283      	cmp	r3, r0
    9bea:	d1f3      	bne.n	9bd4 <_free_r+0x20>
    9bec:	6818      	ldr	r0, [r3, #0]
    9bee:	685b      	ldr	r3, [r3, #4]
    9bf0:	1841      	adds	r1, r0, r1
    9bf2:	6021      	str	r1, [r4, #0]
    9bf4:	e7ee      	b.n	9bd4 <_free_r+0x20>
    9bf6:	0013      	movs	r3, r2
    9bf8:	685a      	ldr	r2, [r3, #4]
    9bfa:	2a00      	cmp	r2, #0
    9bfc:	d001      	beq.n	9c02 <_free_r+0x4e>
    9bfe:	42a2      	cmp	r2, r4
    9c00:	d9f9      	bls.n	9bf6 <_free_r+0x42>
    9c02:	6819      	ldr	r1, [r3, #0]
    9c04:	1858      	adds	r0, r3, r1
    9c06:	42a0      	cmp	r0, r4
    9c08:	d10b      	bne.n	9c22 <_free_r+0x6e>
    9c0a:	6820      	ldr	r0, [r4, #0]
    9c0c:	1809      	adds	r1, r1, r0
    9c0e:	1858      	adds	r0, r3, r1
    9c10:	6019      	str	r1, [r3, #0]
    9c12:	4282      	cmp	r2, r0
    9c14:	d1e0      	bne.n	9bd8 <_free_r+0x24>
    9c16:	6810      	ldr	r0, [r2, #0]
    9c18:	6852      	ldr	r2, [r2, #4]
    9c1a:	1841      	adds	r1, r0, r1
    9c1c:	6019      	str	r1, [r3, #0]
    9c1e:	605a      	str	r2, [r3, #4]
    9c20:	e7da      	b.n	9bd8 <_free_r+0x24>
    9c22:	42a0      	cmp	r0, r4
    9c24:	d902      	bls.n	9c2c <_free_r+0x78>
    9c26:	230c      	movs	r3, #12
    9c28:	602b      	str	r3, [r5, #0]
    9c2a:	e7d5      	b.n	9bd8 <_free_r+0x24>
    9c2c:	6821      	ldr	r1, [r4, #0]
    9c2e:	1860      	adds	r0, r4, r1
    9c30:	4282      	cmp	r2, r0
    9c32:	d103      	bne.n	9c3c <_free_r+0x88>
    9c34:	6810      	ldr	r0, [r2, #0]
    9c36:	6852      	ldr	r2, [r2, #4]
    9c38:	1841      	adds	r1, r0, r1
    9c3a:	6021      	str	r1, [r4, #0]
    9c3c:	6062      	str	r2, [r4, #4]
    9c3e:	605c      	str	r4, [r3, #4]
    9c40:	e7ca      	b.n	9bd8 <_free_r+0x24>
    9c42:	46c0      	nop			; (mov r8, r8)
    9c44:	200002d4 	.word	0x200002d4

00009c48 <_malloc_r>:
    9c48:	2303      	movs	r3, #3
    9c4a:	b570      	push	{r4, r5, r6, lr}
    9c4c:	1ccd      	adds	r5, r1, #3
    9c4e:	439d      	bics	r5, r3
    9c50:	3508      	adds	r5, #8
    9c52:	0006      	movs	r6, r0
    9c54:	2d0c      	cmp	r5, #12
    9c56:	d21e      	bcs.n	9c96 <_malloc_r+0x4e>
    9c58:	250c      	movs	r5, #12
    9c5a:	42a9      	cmp	r1, r5
    9c5c:	d81d      	bhi.n	9c9a <_malloc_r+0x52>
    9c5e:	0030      	movs	r0, r6
    9c60:	f001 f917 	bl	ae92 <__malloc_lock>
    9c64:	4a25      	ldr	r2, [pc, #148]	; (9cfc <_malloc_r+0xb4>)
    9c66:	6814      	ldr	r4, [r2, #0]
    9c68:	0021      	movs	r1, r4
    9c6a:	2900      	cmp	r1, #0
    9c6c:	d119      	bne.n	9ca2 <_malloc_r+0x5a>
    9c6e:	4c24      	ldr	r4, [pc, #144]	; (9d00 <_malloc_r+0xb8>)
    9c70:	6823      	ldr	r3, [r4, #0]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d103      	bne.n	9c7e <_malloc_r+0x36>
    9c76:	0030      	movs	r0, r6
    9c78:	f000 febe 	bl	a9f8 <_sbrk_r>
    9c7c:	6020      	str	r0, [r4, #0]
    9c7e:	0029      	movs	r1, r5
    9c80:	0030      	movs	r0, r6
    9c82:	f000 feb9 	bl	a9f8 <_sbrk_r>
    9c86:	1c43      	adds	r3, r0, #1
    9c88:	d12c      	bne.n	9ce4 <_malloc_r+0x9c>
    9c8a:	230c      	movs	r3, #12
    9c8c:	0030      	movs	r0, r6
    9c8e:	6033      	str	r3, [r6, #0]
    9c90:	f001 f900 	bl	ae94 <__malloc_unlock>
    9c94:	e003      	b.n	9c9e <_malloc_r+0x56>
    9c96:	2d00      	cmp	r5, #0
    9c98:	dadf      	bge.n	9c5a <_malloc_r+0x12>
    9c9a:	230c      	movs	r3, #12
    9c9c:	6033      	str	r3, [r6, #0]
    9c9e:	2000      	movs	r0, #0
    9ca0:	bd70      	pop	{r4, r5, r6, pc}
    9ca2:	680b      	ldr	r3, [r1, #0]
    9ca4:	1b5b      	subs	r3, r3, r5
    9ca6:	d41a      	bmi.n	9cde <_malloc_r+0x96>
    9ca8:	2b0b      	cmp	r3, #11
    9caa:	d903      	bls.n	9cb4 <_malloc_r+0x6c>
    9cac:	600b      	str	r3, [r1, #0]
    9cae:	18cc      	adds	r4, r1, r3
    9cb0:	6025      	str	r5, [r4, #0]
    9cb2:	e003      	b.n	9cbc <_malloc_r+0x74>
    9cb4:	428c      	cmp	r4, r1
    9cb6:	d10e      	bne.n	9cd6 <_malloc_r+0x8e>
    9cb8:	6863      	ldr	r3, [r4, #4]
    9cba:	6013      	str	r3, [r2, #0]
    9cbc:	0030      	movs	r0, r6
    9cbe:	f001 f8e9 	bl	ae94 <__malloc_unlock>
    9cc2:	0020      	movs	r0, r4
    9cc4:	2207      	movs	r2, #7
    9cc6:	300b      	adds	r0, #11
    9cc8:	1d23      	adds	r3, r4, #4
    9cca:	4390      	bics	r0, r2
    9ccc:	1ac3      	subs	r3, r0, r3
    9cce:	d0e7      	beq.n	9ca0 <_malloc_r+0x58>
    9cd0:	425a      	negs	r2, r3
    9cd2:	50e2      	str	r2, [r4, r3]
    9cd4:	e7e4      	b.n	9ca0 <_malloc_r+0x58>
    9cd6:	684b      	ldr	r3, [r1, #4]
    9cd8:	6063      	str	r3, [r4, #4]
    9cda:	000c      	movs	r4, r1
    9cdc:	e7ee      	b.n	9cbc <_malloc_r+0x74>
    9cde:	000c      	movs	r4, r1
    9ce0:	6849      	ldr	r1, [r1, #4]
    9ce2:	e7c2      	b.n	9c6a <_malloc_r+0x22>
    9ce4:	2303      	movs	r3, #3
    9ce6:	1cc4      	adds	r4, r0, #3
    9ce8:	439c      	bics	r4, r3
    9cea:	42a0      	cmp	r0, r4
    9cec:	d0e0      	beq.n	9cb0 <_malloc_r+0x68>
    9cee:	1a21      	subs	r1, r4, r0
    9cf0:	0030      	movs	r0, r6
    9cf2:	f000 fe81 	bl	a9f8 <_sbrk_r>
    9cf6:	1c43      	adds	r3, r0, #1
    9cf8:	d1da      	bne.n	9cb0 <_malloc_r+0x68>
    9cfa:	e7c6      	b.n	9c8a <_malloc_r+0x42>
    9cfc:	200002d4 	.word	0x200002d4
    9d00:	200002d8 	.word	0x200002d8

00009d04 <__sfputc_r>:
    9d04:	6893      	ldr	r3, [r2, #8]
    9d06:	b510      	push	{r4, lr}
    9d08:	3b01      	subs	r3, #1
    9d0a:	6093      	str	r3, [r2, #8]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	da05      	bge.n	9d1c <__sfputc_r+0x18>
    9d10:	6994      	ldr	r4, [r2, #24]
    9d12:	42a3      	cmp	r3, r4
    9d14:	db08      	blt.n	9d28 <__sfputc_r+0x24>
    9d16:	b2cb      	uxtb	r3, r1
    9d18:	2b0a      	cmp	r3, #10
    9d1a:	d005      	beq.n	9d28 <__sfputc_r+0x24>
    9d1c:	6813      	ldr	r3, [r2, #0]
    9d1e:	1c58      	adds	r0, r3, #1
    9d20:	6010      	str	r0, [r2, #0]
    9d22:	7019      	strb	r1, [r3, #0]
    9d24:	b2c8      	uxtb	r0, r1
    9d26:	bd10      	pop	{r4, pc}
    9d28:	f7ff fc22 	bl	9570 <__swbuf_r>
    9d2c:	e7fb      	b.n	9d26 <__sfputc_r+0x22>

00009d2e <__sfputs_r>:
    9d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d30:	0006      	movs	r6, r0
    9d32:	000f      	movs	r7, r1
    9d34:	0014      	movs	r4, r2
    9d36:	18d5      	adds	r5, r2, r3
    9d38:	42ac      	cmp	r4, r5
    9d3a:	d101      	bne.n	9d40 <__sfputs_r+0x12>
    9d3c:	2000      	movs	r0, #0
    9d3e:	e007      	b.n	9d50 <__sfputs_r+0x22>
    9d40:	7821      	ldrb	r1, [r4, #0]
    9d42:	003a      	movs	r2, r7
    9d44:	0030      	movs	r0, r6
    9d46:	f7ff ffdd 	bl	9d04 <__sfputc_r>
    9d4a:	3401      	adds	r4, #1
    9d4c:	1c43      	adds	r3, r0, #1
    9d4e:	d1f3      	bne.n	9d38 <__sfputs_r+0xa>
    9d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009d54 <_vfiprintf_r>:
    9d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d56:	b09f      	sub	sp, #124	; 0x7c
    9d58:	0006      	movs	r6, r0
    9d5a:	000f      	movs	r7, r1
    9d5c:	0014      	movs	r4, r2
    9d5e:	9305      	str	r3, [sp, #20]
    9d60:	2800      	cmp	r0, #0
    9d62:	d004      	beq.n	9d6e <_vfiprintf_r+0x1a>
    9d64:	6983      	ldr	r3, [r0, #24]
    9d66:	2b00      	cmp	r3, #0
    9d68:	d101      	bne.n	9d6e <_vfiprintf_r+0x1a>
    9d6a:	f7ff fdd9 	bl	9920 <__sinit>
    9d6e:	4b7f      	ldr	r3, [pc, #508]	; (9f6c <_vfiprintf_r+0x218>)
    9d70:	429f      	cmp	r7, r3
    9d72:	d15c      	bne.n	9e2e <_vfiprintf_r+0xda>
    9d74:	6877      	ldr	r7, [r6, #4]
    9d76:	89bb      	ldrh	r3, [r7, #12]
    9d78:	071b      	lsls	r3, r3, #28
    9d7a:	d562      	bpl.n	9e42 <_vfiprintf_r+0xee>
    9d7c:	693b      	ldr	r3, [r7, #16]
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d05f      	beq.n	9e42 <_vfiprintf_r+0xee>
    9d82:	2300      	movs	r3, #0
    9d84:	ad06      	add	r5, sp, #24
    9d86:	616b      	str	r3, [r5, #20]
    9d88:	3320      	adds	r3, #32
    9d8a:	766b      	strb	r3, [r5, #25]
    9d8c:	3310      	adds	r3, #16
    9d8e:	76ab      	strb	r3, [r5, #26]
    9d90:	9402      	str	r4, [sp, #8]
    9d92:	9c02      	ldr	r4, [sp, #8]
    9d94:	7823      	ldrb	r3, [r4, #0]
    9d96:	2b00      	cmp	r3, #0
    9d98:	d15d      	bne.n	9e56 <_vfiprintf_r+0x102>
    9d9a:	9b02      	ldr	r3, [sp, #8]
    9d9c:	1ae3      	subs	r3, r4, r3
    9d9e:	9304      	str	r3, [sp, #16]
    9da0:	d00d      	beq.n	9dbe <_vfiprintf_r+0x6a>
    9da2:	9b04      	ldr	r3, [sp, #16]
    9da4:	9a02      	ldr	r2, [sp, #8]
    9da6:	0039      	movs	r1, r7
    9da8:	0030      	movs	r0, r6
    9daa:	f7ff ffc0 	bl	9d2e <__sfputs_r>
    9dae:	1c43      	adds	r3, r0, #1
    9db0:	d100      	bne.n	9db4 <_vfiprintf_r+0x60>
    9db2:	e0cc      	b.n	9f4e <_vfiprintf_r+0x1fa>
    9db4:	696a      	ldr	r2, [r5, #20]
    9db6:	9b04      	ldr	r3, [sp, #16]
    9db8:	4694      	mov	ip, r2
    9dba:	4463      	add	r3, ip
    9dbc:	616b      	str	r3, [r5, #20]
    9dbe:	7823      	ldrb	r3, [r4, #0]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d100      	bne.n	9dc6 <_vfiprintf_r+0x72>
    9dc4:	e0c3      	b.n	9f4e <_vfiprintf_r+0x1fa>
    9dc6:	2201      	movs	r2, #1
    9dc8:	2300      	movs	r3, #0
    9dca:	4252      	negs	r2, r2
    9dcc:	606a      	str	r2, [r5, #4]
    9dce:	a902      	add	r1, sp, #8
    9dd0:	3254      	adds	r2, #84	; 0x54
    9dd2:	1852      	adds	r2, r2, r1
    9dd4:	3401      	adds	r4, #1
    9dd6:	602b      	str	r3, [r5, #0]
    9dd8:	60eb      	str	r3, [r5, #12]
    9dda:	60ab      	str	r3, [r5, #8]
    9ddc:	7013      	strb	r3, [r2, #0]
    9dde:	65ab      	str	r3, [r5, #88]	; 0x58
    9de0:	7821      	ldrb	r1, [r4, #0]
    9de2:	2205      	movs	r2, #5
    9de4:	4862      	ldr	r0, [pc, #392]	; (9f70 <_vfiprintf_r+0x21c>)
    9de6:	f001 f849 	bl	ae7c <memchr>
    9dea:	1c63      	adds	r3, r4, #1
    9dec:	469c      	mov	ip, r3
    9dee:	2800      	cmp	r0, #0
    9df0:	d135      	bne.n	9e5e <_vfiprintf_r+0x10a>
    9df2:	6829      	ldr	r1, [r5, #0]
    9df4:	06cb      	lsls	r3, r1, #27
    9df6:	d504      	bpl.n	9e02 <_vfiprintf_r+0xae>
    9df8:	2353      	movs	r3, #83	; 0x53
    9dfa:	aa02      	add	r2, sp, #8
    9dfc:	3020      	adds	r0, #32
    9dfe:	189b      	adds	r3, r3, r2
    9e00:	7018      	strb	r0, [r3, #0]
    9e02:	070b      	lsls	r3, r1, #28
    9e04:	d504      	bpl.n	9e10 <_vfiprintf_r+0xbc>
    9e06:	2353      	movs	r3, #83	; 0x53
    9e08:	202b      	movs	r0, #43	; 0x2b
    9e0a:	aa02      	add	r2, sp, #8
    9e0c:	189b      	adds	r3, r3, r2
    9e0e:	7018      	strb	r0, [r3, #0]
    9e10:	7823      	ldrb	r3, [r4, #0]
    9e12:	2b2a      	cmp	r3, #42	; 0x2a
    9e14:	d02c      	beq.n	9e70 <_vfiprintf_r+0x11c>
    9e16:	2000      	movs	r0, #0
    9e18:	210a      	movs	r1, #10
    9e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e1c:	7822      	ldrb	r2, [r4, #0]
    9e1e:	3a30      	subs	r2, #48	; 0x30
    9e20:	2a09      	cmp	r2, #9
    9e22:	d800      	bhi.n	9e26 <_vfiprintf_r+0xd2>
    9e24:	e06b      	b.n	9efe <_vfiprintf_r+0x1aa>
    9e26:	2800      	cmp	r0, #0
    9e28:	d02a      	beq.n	9e80 <_vfiprintf_r+0x12c>
    9e2a:	9309      	str	r3, [sp, #36]	; 0x24
    9e2c:	e028      	b.n	9e80 <_vfiprintf_r+0x12c>
    9e2e:	4b51      	ldr	r3, [pc, #324]	; (9f74 <_vfiprintf_r+0x220>)
    9e30:	429f      	cmp	r7, r3
    9e32:	d101      	bne.n	9e38 <_vfiprintf_r+0xe4>
    9e34:	68b7      	ldr	r7, [r6, #8]
    9e36:	e79e      	b.n	9d76 <_vfiprintf_r+0x22>
    9e38:	4b4f      	ldr	r3, [pc, #316]	; (9f78 <_vfiprintf_r+0x224>)
    9e3a:	429f      	cmp	r7, r3
    9e3c:	d19b      	bne.n	9d76 <_vfiprintf_r+0x22>
    9e3e:	68f7      	ldr	r7, [r6, #12]
    9e40:	e799      	b.n	9d76 <_vfiprintf_r+0x22>
    9e42:	0039      	movs	r1, r7
    9e44:	0030      	movs	r0, r6
    9e46:	f7ff fbe9 	bl	961c <__swsetup_r>
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d099      	beq.n	9d82 <_vfiprintf_r+0x2e>
    9e4e:	2001      	movs	r0, #1
    9e50:	4240      	negs	r0, r0
    9e52:	b01f      	add	sp, #124	; 0x7c
    9e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e56:	2b25      	cmp	r3, #37	; 0x25
    9e58:	d09f      	beq.n	9d9a <_vfiprintf_r+0x46>
    9e5a:	3401      	adds	r4, #1
    9e5c:	e79a      	b.n	9d94 <_vfiprintf_r+0x40>
    9e5e:	4b44      	ldr	r3, [pc, #272]	; (9f70 <_vfiprintf_r+0x21c>)
    9e60:	6829      	ldr	r1, [r5, #0]
    9e62:	1ac0      	subs	r0, r0, r3
    9e64:	2301      	movs	r3, #1
    9e66:	4083      	lsls	r3, r0
    9e68:	430b      	orrs	r3, r1
    9e6a:	602b      	str	r3, [r5, #0]
    9e6c:	4664      	mov	r4, ip
    9e6e:	e7b7      	b.n	9de0 <_vfiprintf_r+0x8c>
    9e70:	9b05      	ldr	r3, [sp, #20]
    9e72:	1d18      	adds	r0, r3, #4
    9e74:	681b      	ldr	r3, [r3, #0]
    9e76:	9005      	str	r0, [sp, #20]
    9e78:	2b00      	cmp	r3, #0
    9e7a:	db3a      	blt.n	9ef2 <_vfiprintf_r+0x19e>
    9e7c:	9309      	str	r3, [sp, #36]	; 0x24
    9e7e:	4664      	mov	r4, ip
    9e80:	7823      	ldrb	r3, [r4, #0]
    9e82:	2b2e      	cmp	r3, #46	; 0x2e
    9e84:	d10b      	bne.n	9e9e <_vfiprintf_r+0x14a>
    9e86:	7863      	ldrb	r3, [r4, #1]
    9e88:	1c62      	adds	r2, r4, #1
    9e8a:	2b2a      	cmp	r3, #42	; 0x2a
    9e8c:	d13f      	bne.n	9f0e <_vfiprintf_r+0x1ba>
    9e8e:	9b05      	ldr	r3, [sp, #20]
    9e90:	3402      	adds	r4, #2
    9e92:	1d1a      	adds	r2, r3, #4
    9e94:	681b      	ldr	r3, [r3, #0]
    9e96:	9205      	str	r2, [sp, #20]
    9e98:	2b00      	cmp	r3, #0
    9e9a:	db35      	blt.n	9f08 <_vfiprintf_r+0x1b4>
    9e9c:	9307      	str	r3, [sp, #28]
    9e9e:	7821      	ldrb	r1, [r4, #0]
    9ea0:	2203      	movs	r2, #3
    9ea2:	4836      	ldr	r0, [pc, #216]	; (9f7c <_vfiprintf_r+0x228>)
    9ea4:	f000 ffea 	bl	ae7c <memchr>
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d007      	beq.n	9ebc <_vfiprintf_r+0x168>
    9eac:	4b33      	ldr	r3, [pc, #204]	; (9f7c <_vfiprintf_r+0x228>)
    9eae:	682a      	ldr	r2, [r5, #0]
    9eb0:	1ac0      	subs	r0, r0, r3
    9eb2:	2340      	movs	r3, #64	; 0x40
    9eb4:	4083      	lsls	r3, r0
    9eb6:	4313      	orrs	r3, r2
    9eb8:	602b      	str	r3, [r5, #0]
    9eba:	3401      	adds	r4, #1
    9ebc:	7821      	ldrb	r1, [r4, #0]
    9ebe:	1c63      	adds	r3, r4, #1
    9ec0:	2206      	movs	r2, #6
    9ec2:	482f      	ldr	r0, [pc, #188]	; (9f80 <_vfiprintf_r+0x22c>)
    9ec4:	9302      	str	r3, [sp, #8]
    9ec6:	7629      	strb	r1, [r5, #24]
    9ec8:	f000 ffd8 	bl	ae7c <memchr>
    9ecc:	2800      	cmp	r0, #0
    9ece:	d044      	beq.n	9f5a <_vfiprintf_r+0x206>
    9ed0:	4b2c      	ldr	r3, [pc, #176]	; (9f84 <_vfiprintf_r+0x230>)
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	d12f      	bne.n	9f36 <_vfiprintf_r+0x1e2>
    9ed6:	6829      	ldr	r1, [r5, #0]
    9ed8:	9b05      	ldr	r3, [sp, #20]
    9eda:	2207      	movs	r2, #7
    9edc:	05c9      	lsls	r1, r1, #23
    9ede:	d528      	bpl.n	9f32 <_vfiprintf_r+0x1de>
    9ee0:	189b      	adds	r3, r3, r2
    9ee2:	4393      	bics	r3, r2
    9ee4:	3308      	adds	r3, #8
    9ee6:	9305      	str	r3, [sp, #20]
    9ee8:	696b      	ldr	r3, [r5, #20]
    9eea:	9a03      	ldr	r2, [sp, #12]
    9eec:	189b      	adds	r3, r3, r2
    9eee:	616b      	str	r3, [r5, #20]
    9ef0:	e74f      	b.n	9d92 <_vfiprintf_r+0x3e>
    9ef2:	425b      	negs	r3, r3
    9ef4:	60eb      	str	r3, [r5, #12]
    9ef6:	2302      	movs	r3, #2
    9ef8:	430b      	orrs	r3, r1
    9efa:	602b      	str	r3, [r5, #0]
    9efc:	e7bf      	b.n	9e7e <_vfiprintf_r+0x12a>
    9efe:	434b      	muls	r3, r1
    9f00:	3401      	adds	r4, #1
    9f02:	189b      	adds	r3, r3, r2
    9f04:	2001      	movs	r0, #1
    9f06:	e789      	b.n	9e1c <_vfiprintf_r+0xc8>
    9f08:	2301      	movs	r3, #1
    9f0a:	425b      	negs	r3, r3
    9f0c:	e7c6      	b.n	9e9c <_vfiprintf_r+0x148>
    9f0e:	2300      	movs	r3, #0
    9f10:	0014      	movs	r4, r2
    9f12:	200a      	movs	r0, #10
    9f14:	001a      	movs	r2, r3
    9f16:	606b      	str	r3, [r5, #4]
    9f18:	7821      	ldrb	r1, [r4, #0]
    9f1a:	3930      	subs	r1, #48	; 0x30
    9f1c:	2909      	cmp	r1, #9
    9f1e:	d903      	bls.n	9f28 <_vfiprintf_r+0x1d4>
    9f20:	2b00      	cmp	r3, #0
    9f22:	d0bc      	beq.n	9e9e <_vfiprintf_r+0x14a>
    9f24:	9207      	str	r2, [sp, #28]
    9f26:	e7ba      	b.n	9e9e <_vfiprintf_r+0x14a>
    9f28:	4342      	muls	r2, r0
    9f2a:	3401      	adds	r4, #1
    9f2c:	1852      	adds	r2, r2, r1
    9f2e:	2301      	movs	r3, #1
    9f30:	e7f2      	b.n	9f18 <_vfiprintf_r+0x1c4>
    9f32:	3307      	adds	r3, #7
    9f34:	e7d5      	b.n	9ee2 <_vfiprintf_r+0x18e>
    9f36:	ab05      	add	r3, sp, #20
    9f38:	9300      	str	r3, [sp, #0]
    9f3a:	003a      	movs	r2, r7
    9f3c:	4b12      	ldr	r3, [pc, #72]	; (9f88 <_vfiprintf_r+0x234>)
    9f3e:	0029      	movs	r1, r5
    9f40:	0030      	movs	r0, r6
    9f42:	e000      	b.n	9f46 <_vfiprintf_r+0x1f2>
    9f44:	bf00      	nop
    9f46:	9003      	str	r0, [sp, #12]
    9f48:	9b03      	ldr	r3, [sp, #12]
    9f4a:	3301      	adds	r3, #1
    9f4c:	d1cc      	bne.n	9ee8 <_vfiprintf_r+0x194>
    9f4e:	89bb      	ldrh	r3, [r7, #12]
    9f50:	065b      	lsls	r3, r3, #25
    9f52:	d500      	bpl.n	9f56 <_vfiprintf_r+0x202>
    9f54:	e77b      	b.n	9e4e <_vfiprintf_r+0xfa>
    9f56:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9f58:	e77b      	b.n	9e52 <_vfiprintf_r+0xfe>
    9f5a:	ab05      	add	r3, sp, #20
    9f5c:	9300      	str	r3, [sp, #0]
    9f5e:	003a      	movs	r2, r7
    9f60:	4b09      	ldr	r3, [pc, #36]	; (9f88 <_vfiprintf_r+0x234>)
    9f62:	0029      	movs	r1, r5
    9f64:	0030      	movs	r0, r6
    9f66:	f000 f87f 	bl	a068 <_printf_i>
    9f6a:	e7ec      	b.n	9f46 <_vfiprintf_r+0x1f2>
    9f6c:	0000b6e8 	.word	0x0000b6e8
    9f70:	0000b732 	.word	0x0000b732
    9f74:	0000b708 	.word	0x0000b708
    9f78:	0000b6c8 	.word	0x0000b6c8
    9f7c:	0000b738 	.word	0x0000b738
    9f80:	0000b73c 	.word	0x0000b73c
    9f84:	00000000 	.word	0x00000000
    9f88:	00009d2f 	.word	0x00009d2f

00009f8c <_printf_common>:
    9f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9f8e:	0015      	movs	r5, r2
    9f90:	9301      	str	r3, [sp, #4]
    9f92:	688a      	ldr	r2, [r1, #8]
    9f94:	690b      	ldr	r3, [r1, #16]
    9f96:	9000      	str	r0, [sp, #0]
    9f98:	000c      	movs	r4, r1
    9f9a:	4293      	cmp	r3, r2
    9f9c:	da00      	bge.n	9fa0 <_printf_common+0x14>
    9f9e:	0013      	movs	r3, r2
    9fa0:	0022      	movs	r2, r4
    9fa2:	602b      	str	r3, [r5, #0]
    9fa4:	3243      	adds	r2, #67	; 0x43
    9fa6:	7812      	ldrb	r2, [r2, #0]
    9fa8:	2a00      	cmp	r2, #0
    9faa:	d001      	beq.n	9fb0 <_printf_common+0x24>
    9fac:	3301      	adds	r3, #1
    9fae:	602b      	str	r3, [r5, #0]
    9fb0:	6823      	ldr	r3, [r4, #0]
    9fb2:	069b      	lsls	r3, r3, #26
    9fb4:	d502      	bpl.n	9fbc <_printf_common+0x30>
    9fb6:	682b      	ldr	r3, [r5, #0]
    9fb8:	3302      	adds	r3, #2
    9fba:	602b      	str	r3, [r5, #0]
    9fbc:	2706      	movs	r7, #6
    9fbe:	6823      	ldr	r3, [r4, #0]
    9fc0:	401f      	ands	r7, r3
    9fc2:	d027      	beq.n	a014 <_printf_common+0x88>
    9fc4:	0023      	movs	r3, r4
    9fc6:	3343      	adds	r3, #67	; 0x43
    9fc8:	781b      	ldrb	r3, [r3, #0]
    9fca:	1e5a      	subs	r2, r3, #1
    9fcc:	4193      	sbcs	r3, r2
    9fce:	6822      	ldr	r2, [r4, #0]
    9fd0:	0692      	lsls	r2, r2, #26
    9fd2:	d430      	bmi.n	a036 <_printf_common+0xaa>
    9fd4:	0022      	movs	r2, r4
    9fd6:	9901      	ldr	r1, [sp, #4]
    9fd8:	3243      	adds	r2, #67	; 0x43
    9fda:	9800      	ldr	r0, [sp, #0]
    9fdc:	9e08      	ldr	r6, [sp, #32]
    9fde:	47b0      	blx	r6
    9fe0:	1c43      	adds	r3, r0, #1
    9fe2:	d025      	beq.n	a030 <_printf_common+0xa4>
    9fe4:	2306      	movs	r3, #6
    9fe6:	6820      	ldr	r0, [r4, #0]
    9fe8:	682a      	ldr	r2, [r5, #0]
    9fea:	68e1      	ldr	r1, [r4, #12]
    9fec:	4003      	ands	r3, r0
    9fee:	2500      	movs	r5, #0
    9ff0:	2b04      	cmp	r3, #4
    9ff2:	d103      	bne.n	9ffc <_printf_common+0x70>
    9ff4:	1a8d      	subs	r5, r1, r2
    9ff6:	43eb      	mvns	r3, r5
    9ff8:	17db      	asrs	r3, r3, #31
    9ffa:	401d      	ands	r5, r3
    9ffc:	68a3      	ldr	r3, [r4, #8]
    9ffe:	6922      	ldr	r2, [r4, #16]
    a000:	4293      	cmp	r3, r2
    a002:	dd01      	ble.n	a008 <_printf_common+0x7c>
    a004:	1a9b      	subs	r3, r3, r2
    a006:	18ed      	adds	r5, r5, r3
    a008:	2700      	movs	r7, #0
    a00a:	42bd      	cmp	r5, r7
    a00c:	d120      	bne.n	a050 <_printf_common+0xc4>
    a00e:	2000      	movs	r0, #0
    a010:	e010      	b.n	a034 <_printf_common+0xa8>
    a012:	3701      	adds	r7, #1
    a014:	68e3      	ldr	r3, [r4, #12]
    a016:	682a      	ldr	r2, [r5, #0]
    a018:	1a9b      	subs	r3, r3, r2
    a01a:	429f      	cmp	r7, r3
    a01c:	dad2      	bge.n	9fc4 <_printf_common+0x38>
    a01e:	0022      	movs	r2, r4
    a020:	2301      	movs	r3, #1
    a022:	3219      	adds	r2, #25
    a024:	9901      	ldr	r1, [sp, #4]
    a026:	9800      	ldr	r0, [sp, #0]
    a028:	9e08      	ldr	r6, [sp, #32]
    a02a:	47b0      	blx	r6
    a02c:	1c43      	adds	r3, r0, #1
    a02e:	d1f0      	bne.n	a012 <_printf_common+0x86>
    a030:	2001      	movs	r0, #1
    a032:	4240      	negs	r0, r0
    a034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a036:	2030      	movs	r0, #48	; 0x30
    a038:	18e1      	adds	r1, r4, r3
    a03a:	3143      	adds	r1, #67	; 0x43
    a03c:	7008      	strb	r0, [r1, #0]
    a03e:	0021      	movs	r1, r4
    a040:	1c5a      	adds	r2, r3, #1
    a042:	3145      	adds	r1, #69	; 0x45
    a044:	7809      	ldrb	r1, [r1, #0]
    a046:	18a2      	adds	r2, r4, r2
    a048:	3243      	adds	r2, #67	; 0x43
    a04a:	3302      	adds	r3, #2
    a04c:	7011      	strb	r1, [r2, #0]
    a04e:	e7c1      	b.n	9fd4 <_printf_common+0x48>
    a050:	0022      	movs	r2, r4
    a052:	2301      	movs	r3, #1
    a054:	321a      	adds	r2, #26
    a056:	9901      	ldr	r1, [sp, #4]
    a058:	9800      	ldr	r0, [sp, #0]
    a05a:	9e08      	ldr	r6, [sp, #32]
    a05c:	47b0      	blx	r6
    a05e:	1c43      	adds	r3, r0, #1
    a060:	d0e6      	beq.n	a030 <_printf_common+0xa4>
    a062:	3701      	adds	r7, #1
    a064:	e7d1      	b.n	a00a <_printf_common+0x7e>
	...

0000a068 <_printf_i>:
    a068:	b5f0      	push	{r4, r5, r6, r7, lr}
    a06a:	b08b      	sub	sp, #44	; 0x2c
    a06c:	9206      	str	r2, [sp, #24]
    a06e:	000a      	movs	r2, r1
    a070:	3243      	adds	r2, #67	; 0x43
    a072:	9307      	str	r3, [sp, #28]
    a074:	9005      	str	r0, [sp, #20]
    a076:	9204      	str	r2, [sp, #16]
    a078:	7e0a      	ldrb	r2, [r1, #24]
    a07a:	000c      	movs	r4, r1
    a07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a07e:	2a6e      	cmp	r2, #110	; 0x6e
    a080:	d100      	bne.n	a084 <_printf_i+0x1c>
    a082:	e08f      	b.n	a1a4 <_printf_i+0x13c>
    a084:	d817      	bhi.n	a0b6 <_printf_i+0x4e>
    a086:	2a63      	cmp	r2, #99	; 0x63
    a088:	d02c      	beq.n	a0e4 <_printf_i+0x7c>
    a08a:	d808      	bhi.n	a09e <_printf_i+0x36>
    a08c:	2a00      	cmp	r2, #0
    a08e:	d100      	bne.n	a092 <_printf_i+0x2a>
    a090:	e099      	b.n	a1c6 <_printf_i+0x15e>
    a092:	2a58      	cmp	r2, #88	; 0x58
    a094:	d054      	beq.n	a140 <_printf_i+0xd8>
    a096:	0026      	movs	r6, r4
    a098:	3642      	adds	r6, #66	; 0x42
    a09a:	7032      	strb	r2, [r6, #0]
    a09c:	e029      	b.n	a0f2 <_printf_i+0x8a>
    a09e:	2a64      	cmp	r2, #100	; 0x64
    a0a0:	d001      	beq.n	a0a6 <_printf_i+0x3e>
    a0a2:	2a69      	cmp	r2, #105	; 0x69
    a0a4:	d1f7      	bne.n	a096 <_printf_i+0x2e>
    a0a6:	6821      	ldr	r1, [r4, #0]
    a0a8:	681a      	ldr	r2, [r3, #0]
    a0aa:	0608      	lsls	r0, r1, #24
    a0ac:	d523      	bpl.n	a0f6 <_printf_i+0x8e>
    a0ae:	1d11      	adds	r1, r2, #4
    a0b0:	6019      	str	r1, [r3, #0]
    a0b2:	6815      	ldr	r5, [r2, #0]
    a0b4:	e025      	b.n	a102 <_printf_i+0x9a>
    a0b6:	2a73      	cmp	r2, #115	; 0x73
    a0b8:	d100      	bne.n	a0bc <_printf_i+0x54>
    a0ba:	e088      	b.n	a1ce <_printf_i+0x166>
    a0bc:	d808      	bhi.n	a0d0 <_printf_i+0x68>
    a0be:	2a6f      	cmp	r2, #111	; 0x6f
    a0c0:	d029      	beq.n	a116 <_printf_i+0xae>
    a0c2:	2a70      	cmp	r2, #112	; 0x70
    a0c4:	d1e7      	bne.n	a096 <_printf_i+0x2e>
    a0c6:	2220      	movs	r2, #32
    a0c8:	6809      	ldr	r1, [r1, #0]
    a0ca:	430a      	orrs	r2, r1
    a0cc:	6022      	str	r2, [r4, #0]
    a0ce:	e003      	b.n	a0d8 <_printf_i+0x70>
    a0d0:	2a75      	cmp	r2, #117	; 0x75
    a0d2:	d020      	beq.n	a116 <_printf_i+0xae>
    a0d4:	2a78      	cmp	r2, #120	; 0x78
    a0d6:	d1de      	bne.n	a096 <_printf_i+0x2e>
    a0d8:	0022      	movs	r2, r4
    a0da:	2178      	movs	r1, #120	; 0x78
    a0dc:	3245      	adds	r2, #69	; 0x45
    a0de:	7011      	strb	r1, [r2, #0]
    a0e0:	4a6c      	ldr	r2, [pc, #432]	; (a294 <_printf_i+0x22c>)
    a0e2:	e030      	b.n	a146 <_printf_i+0xde>
    a0e4:	000e      	movs	r6, r1
    a0e6:	681a      	ldr	r2, [r3, #0]
    a0e8:	3642      	adds	r6, #66	; 0x42
    a0ea:	1d11      	adds	r1, r2, #4
    a0ec:	6019      	str	r1, [r3, #0]
    a0ee:	6813      	ldr	r3, [r2, #0]
    a0f0:	7033      	strb	r3, [r6, #0]
    a0f2:	2301      	movs	r3, #1
    a0f4:	e079      	b.n	a1ea <_printf_i+0x182>
    a0f6:	0649      	lsls	r1, r1, #25
    a0f8:	d5d9      	bpl.n	a0ae <_printf_i+0x46>
    a0fa:	1d11      	adds	r1, r2, #4
    a0fc:	6019      	str	r1, [r3, #0]
    a0fe:	2300      	movs	r3, #0
    a100:	5ed5      	ldrsh	r5, [r2, r3]
    a102:	2d00      	cmp	r5, #0
    a104:	da03      	bge.n	a10e <_printf_i+0xa6>
    a106:	232d      	movs	r3, #45	; 0x2d
    a108:	9a04      	ldr	r2, [sp, #16]
    a10a:	426d      	negs	r5, r5
    a10c:	7013      	strb	r3, [r2, #0]
    a10e:	4b62      	ldr	r3, [pc, #392]	; (a298 <_printf_i+0x230>)
    a110:	270a      	movs	r7, #10
    a112:	9303      	str	r3, [sp, #12]
    a114:	e02f      	b.n	a176 <_printf_i+0x10e>
    a116:	6820      	ldr	r0, [r4, #0]
    a118:	6819      	ldr	r1, [r3, #0]
    a11a:	0605      	lsls	r5, r0, #24
    a11c:	d503      	bpl.n	a126 <_printf_i+0xbe>
    a11e:	1d08      	adds	r0, r1, #4
    a120:	6018      	str	r0, [r3, #0]
    a122:	680d      	ldr	r5, [r1, #0]
    a124:	e005      	b.n	a132 <_printf_i+0xca>
    a126:	0640      	lsls	r0, r0, #25
    a128:	d5f9      	bpl.n	a11e <_printf_i+0xb6>
    a12a:	680d      	ldr	r5, [r1, #0]
    a12c:	1d08      	adds	r0, r1, #4
    a12e:	6018      	str	r0, [r3, #0]
    a130:	b2ad      	uxth	r5, r5
    a132:	4b59      	ldr	r3, [pc, #356]	; (a298 <_printf_i+0x230>)
    a134:	2708      	movs	r7, #8
    a136:	9303      	str	r3, [sp, #12]
    a138:	2a6f      	cmp	r2, #111	; 0x6f
    a13a:	d018      	beq.n	a16e <_printf_i+0x106>
    a13c:	270a      	movs	r7, #10
    a13e:	e016      	b.n	a16e <_printf_i+0x106>
    a140:	3145      	adds	r1, #69	; 0x45
    a142:	700a      	strb	r2, [r1, #0]
    a144:	4a54      	ldr	r2, [pc, #336]	; (a298 <_printf_i+0x230>)
    a146:	9203      	str	r2, [sp, #12]
    a148:	681a      	ldr	r2, [r3, #0]
    a14a:	6821      	ldr	r1, [r4, #0]
    a14c:	1d10      	adds	r0, r2, #4
    a14e:	6018      	str	r0, [r3, #0]
    a150:	6815      	ldr	r5, [r2, #0]
    a152:	0608      	lsls	r0, r1, #24
    a154:	d522      	bpl.n	a19c <_printf_i+0x134>
    a156:	07cb      	lsls	r3, r1, #31
    a158:	d502      	bpl.n	a160 <_printf_i+0xf8>
    a15a:	2320      	movs	r3, #32
    a15c:	4319      	orrs	r1, r3
    a15e:	6021      	str	r1, [r4, #0]
    a160:	2710      	movs	r7, #16
    a162:	2d00      	cmp	r5, #0
    a164:	d103      	bne.n	a16e <_printf_i+0x106>
    a166:	2320      	movs	r3, #32
    a168:	6822      	ldr	r2, [r4, #0]
    a16a:	439a      	bics	r2, r3
    a16c:	6022      	str	r2, [r4, #0]
    a16e:	0023      	movs	r3, r4
    a170:	2200      	movs	r2, #0
    a172:	3343      	adds	r3, #67	; 0x43
    a174:	701a      	strb	r2, [r3, #0]
    a176:	6863      	ldr	r3, [r4, #4]
    a178:	60a3      	str	r3, [r4, #8]
    a17a:	2b00      	cmp	r3, #0
    a17c:	db5c      	blt.n	a238 <_printf_i+0x1d0>
    a17e:	2204      	movs	r2, #4
    a180:	6821      	ldr	r1, [r4, #0]
    a182:	4391      	bics	r1, r2
    a184:	6021      	str	r1, [r4, #0]
    a186:	2d00      	cmp	r5, #0
    a188:	d158      	bne.n	a23c <_printf_i+0x1d4>
    a18a:	9e04      	ldr	r6, [sp, #16]
    a18c:	2b00      	cmp	r3, #0
    a18e:	d064      	beq.n	a25a <_printf_i+0x1f2>
    a190:	0026      	movs	r6, r4
    a192:	9b03      	ldr	r3, [sp, #12]
    a194:	3642      	adds	r6, #66	; 0x42
    a196:	781b      	ldrb	r3, [r3, #0]
    a198:	7033      	strb	r3, [r6, #0]
    a19a:	e05e      	b.n	a25a <_printf_i+0x1f2>
    a19c:	0648      	lsls	r0, r1, #25
    a19e:	d5da      	bpl.n	a156 <_printf_i+0xee>
    a1a0:	b2ad      	uxth	r5, r5
    a1a2:	e7d8      	b.n	a156 <_printf_i+0xee>
    a1a4:	6809      	ldr	r1, [r1, #0]
    a1a6:	681a      	ldr	r2, [r3, #0]
    a1a8:	0608      	lsls	r0, r1, #24
    a1aa:	d505      	bpl.n	a1b8 <_printf_i+0x150>
    a1ac:	1d11      	adds	r1, r2, #4
    a1ae:	6019      	str	r1, [r3, #0]
    a1b0:	6813      	ldr	r3, [r2, #0]
    a1b2:	6962      	ldr	r2, [r4, #20]
    a1b4:	601a      	str	r2, [r3, #0]
    a1b6:	e006      	b.n	a1c6 <_printf_i+0x15e>
    a1b8:	0649      	lsls	r1, r1, #25
    a1ba:	d5f7      	bpl.n	a1ac <_printf_i+0x144>
    a1bc:	1d11      	adds	r1, r2, #4
    a1be:	6019      	str	r1, [r3, #0]
    a1c0:	6813      	ldr	r3, [r2, #0]
    a1c2:	8aa2      	ldrh	r2, [r4, #20]
    a1c4:	801a      	strh	r2, [r3, #0]
    a1c6:	2300      	movs	r3, #0
    a1c8:	9e04      	ldr	r6, [sp, #16]
    a1ca:	6123      	str	r3, [r4, #16]
    a1cc:	e054      	b.n	a278 <_printf_i+0x210>
    a1ce:	681a      	ldr	r2, [r3, #0]
    a1d0:	1d11      	adds	r1, r2, #4
    a1d2:	6019      	str	r1, [r3, #0]
    a1d4:	6816      	ldr	r6, [r2, #0]
    a1d6:	2100      	movs	r1, #0
    a1d8:	6862      	ldr	r2, [r4, #4]
    a1da:	0030      	movs	r0, r6
    a1dc:	f000 fe4e 	bl	ae7c <memchr>
    a1e0:	2800      	cmp	r0, #0
    a1e2:	d001      	beq.n	a1e8 <_printf_i+0x180>
    a1e4:	1b80      	subs	r0, r0, r6
    a1e6:	6060      	str	r0, [r4, #4]
    a1e8:	6863      	ldr	r3, [r4, #4]
    a1ea:	6123      	str	r3, [r4, #16]
    a1ec:	2300      	movs	r3, #0
    a1ee:	9a04      	ldr	r2, [sp, #16]
    a1f0:	7013      	strb	r3, [r2, #0]
    a1f2:	e041      	b.n	a278 <_printf_i+0x210>
    a1f4:	6923      	ldr	r3, [r4, #16]
    a1f6:	0032      	movs	r2, r6
    a1f8:	9906      	ldr	r1, [sp, #24]
    a1fa:	9805      	ldr	r0, [sp, #20]
    a1fc:	9d07      	ldr	r5, [sp, #28]
    a1fe:	47a8      	blx	r5
    a200:	1c43      	adds	r3, r0, #1
    a202:	d043      	beq.n	a28c <_printf_i+0x224>
    a204:	6823      	ldr	r3, [r4, #0]
    a206:	2500      	movs	r5, #0
    a208:	079b      	lsls	r3, r3, #30
    a20a:	d40f      	bmi.n	a22c <_printf_i+0x1c4>
    a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a20e:	68e0      	ldr	r0, [r4, #12]
    a210:	4298      	cmp	r0, r3
    a212:	da3d      	bge.n	a290 <_printf_i+0x228>
    a214:	0018      	movs	r0, r3
    a216:	e03b      	b.n	a290 <_printf_i+0x228>
    a218:	0022      	movs	r2, r4
    a21a:	2301      	movs	r3, #1
    a21c:	3219      	adds	r2, #25
    a21e:	9906      	ldr	r1, [sp, #24]
    a220:	9805      	ldr	r0, [sp, #20]
    a222:	9e07      	ldr	r6, [sp, #28]
    a224:	47b0      	blx	r6
    a226:	1c43      	adds	r3, r0, #1
    a228:	d030      	beq.n	a28c <_printf_i+0x224>
    a22a:	3501      	adds	r5, #1
    a22c:	68e3      	ldr	r3, [r4, #12]
    a22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a230:	1a9b      	subs	r3, r3, r2
    a232:	429d      	cmp	r5, r3
    a234:	dbf0      	blt.n	a218 <_printf_i+0x1b0>
    a236:	e7e9      	b.n	a20c <_printf_i+0x1a4>
    a238:	2d00      	cmp	r5, #0
    a23a:	d0a9      	beq.n	a190 <_printf_i+0x128>
    a23c:	9e04      	ldr	r6, [sp, #16]
    a23e:	0028      	movs	r0, r5
    a240:	0039      	movs	r1, r7
    a242:	f7fd f97d 	bl	7540 <__aeabi_uidivmod>
    a246:	9b03      	ldr	r3, [sp, #12]
    a248:	3e01      	subs	r6, #1
    a24a:	5c5b      	ldrb	r3, [r3, r1]
    a24c:	0028      	movs	r0, r5
    a24e:	7033      	strb	r3, [r6, #0]
    a250:	0039      	movs	r1, r7
    a252:	f7fd f8ef 	bl	7434 <__udivsi3>
    a256:	1e05      	subs	r5, r0, #0
    a258:	d1f1      	bne.n	a23e <_printf_i+0x1d6>
    a25a:	2f08      	cmp	r7, #8
    a25c:	d109      	bne.n	a272 <_printf_i+0x20a>
    a25e:	6823      	ldr	r3, [r4, #0]
    a260:	07db      	lsls	r3, r3, #31
    a262:	d506      	bpl.n	a272 <_printf_i+0x20a>
    a264:	6863      	ldr	r3, [r4, #4]
    a266:	6922      	ldr	r2, [r4, #16]
    a268:	4293      	cmp	r3, r2
    a26a:	dc02      	bgt.n	a272 <_printf_i+0x20a>
    a26c:	2330      	movs	r3, #48	; 0x30
    a26e:	3e01      	subs	r6, #1
    a270:	7033      	strb	r3, [r6, #0]
    a272:	9b04      	ldr	r3, [sp, #16]
    a274:	1b9b      	subs	r3, r3, r6
    a276:	6123      	str	r3, [r4, #16]
    a278:	9b07      	ldr	r3, [sp, #28]
    a27a:	aa09      	add	r2, sp, #36	; 0x24
    a27c:	9300      	str	r3, [sp, #0]
    a27e:	0021      	movs	r1, r4
    a280:	9b06      	ldr	r3, [sp, #24]
    a282:	9805      	ldr	r0, [sp, #20]
    a284:	f7ff fe82 	bl	9f8c <_printf_common>
    a288:	1c43      	adds	r3, r0, #1
    a28a:	d1b3      	bne.n	a1f4 <_printf_i+0x18c>
    a28c:	2001      	movs	r0, #1
    a28e:	4240      	negs	r0, r0
    a290:	b00b      	add	sp, #44	; 0x2c
    a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a294:	0000b754 	.word	0x0000b754
    a298:	0000b743 	.word	0x0000b743

0000a29c <__svfiscanf_r>:
    a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a29e:	4cbd      	ldr	r4, [pc, #756]	; (a594 <__svfiscanf_r+0x2f8>)
    a2a0:	2586      	movs	r5, #134	; 0x86
    a2a2:	44a5      	add	sp, r4
    a2a4:	9303      	str	r3, [sp, #12]
    a2a6:	2300      	movs	r3, #0
    a2a8:	9348      	str	r3, [sp, #288]	; 0x120
    a2aa:	9349      	str	r3, [sp, #292]	; 0x124
    a2ac:	ab05      	add	r3, sp, #20
    a2ae:	934a      	str	r3, [sp, #296]	; 0x128
    a2b0:	23be      	movs	r3, #190	; 0xbe
    a2b2:	006d      	lsls	r5, r5, #1
    a2b4:	9000      	str	r0, [sp, #0]
    a2b6:	000c      	movs	r4, r1
    a2b8:	a802      	add	r0, sp, #8
    a2ba:	49b7      	ldr	r1, [pc, #732]	; (a598 <__svfiscanf_r+0x2fc>)
    a2bc:	005b      	lsls	r3, r3, #1
    a2be:	1940      	adds	r0, r0, r5
    a2c0:	27c0      	movs	r7, #192	; 0xc0
    a2c2:	50c1      	str	r1, [r0, r3]
    a2c4:	ab02      	add	r3, sp, #8
    a2c6:	195b      	adds	r3, r3, r5
    a2c8:	0015      	movs	r5, r2
    a2ca:	49b4      	ldr	r1, [pc, #720]	; (a59c <__svfiscanf_r+0x300>)
    a2cc:	007f      	lsls	r7, r7, #1
    a2ce:	51d9      	str	r1, [r3, r7]
    a2d0:	782b      	ldrb	r3, [r5, #0]
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d100      	bne.n	a2d8 <__svfiscanf_r+0x3c>
    a2d6:	e15b      	b.n	a590 <__svfiscanf_r+0x2f4>
    a2d8:	f7ff fbd6 	bl	9a88 <__locale_ctype_ptr>
    a2dc:	2208      	movs	r2, #8
    a2de:	782b      	ldrb	r3, [r5, #0]
    a2e0:	18c0      	adds	r0, r0, r3
    a2e2:	9301      	str	r3, [sp, #4]
    a2e4:	7843      	ldrb	r3, [r0, #1]
    a2e6:	4013      	ands	r3, r2
    a2e8:	d141      	bne.n	a36e <__svfiscanf_r+0xd2>
    a2ea:	9a01      	ldr	r2, [sp, #4]
    a2ec:	1c6e      	adds	r6, r5, #1
    a2ee:	2a25      	cmp	r2, #37	; 0x25
    a2f0:	d000      	beq.n	a2f4 <__svfiscanf_r+0x58>
    a2f2:	e0a8      	b.n	a446 <__svfiscanf_r+0x1aa>
    a2f4:	9347      	str	r3, [sp, #284]	; 0x11c
    a2f6:	9345      	str	r3, [sp, #276]	; 0x114
    a2f8:	786b      	ldrb	r3, [r5, #1]
    a2fa:	2b2a      	cmp	r3, #42	; 0x2a
    a2fc:	d102      	bne.n	a304 <__svfiscanf_r+0x68>
    a2fe:	3b1a      	subs	r3, #26
    a300:	9345      	str	r3, [sp, #276]	; 0x114
    a302:	1cae      	adds	r6, r5, #2
    a304:	0035      	movs	r5, r6
    a306:	220a      	movs	r2, #10
    a308:	7829      	ldrb	r1, [r5, #0]
    a30a:	000b      	movs	r3, r1
    a30c:	3b30      	subs	r3, #48	; 0x30
    a30e:	2b09      	cmp	r3, #9
    a310:	d948      	bls.n	a3a4 <__svfiscanf_r+0x108>
    a312:	4ea3      	ldr	r6, [pc, #652]	; (a5a0 <__svfiscanf_r+0x304>)
    a314:	2203      	movs	r2, #3
    a316:	0030      	movs	r0, r6
    a318:	f000 fdb0 	bl	ae7c <memchr>
    a31c:	2800      	cmp	r0, #0
    a31e:	d007      	beq.n	a330 <__svfiscanf_r+0x94>
    a320:	2301      	movs	r3, #1
    a322:	1b80      	subs	r0, r0, r6
    a324:	4083      	lsls	r3, r0
    a326:	9a45      	ldr	r2, [sp, #276]	; 0x114
    a328:	3501      	adds	r5, #1
    a32a:	4313      	orrs	r3, r2
    a32c:	9202      	str	r2, [sp, #8]
    a32e:	9345      	str	r3, [sp, #276]	; 0x114
    a330:	782b      	ldrb	r3, [r5, #0]
    a332:	1c6e      	adds	r6, r5, #1
    a334:	2b67      	cmp	r3, #103	; 0x67
    a336:	d858      	bhi.n	a3ea <__svfiscanf_r+0x14e>
    a338:	2b65      	cmp	r3, #101	; 0x65
    a33a:	d300      	bcc.n	a33e <__svfiscanf_r+0xa2>
    a33c:	e0dd      	b.n	a4fa <__svfiscanf_r+0x25e>
    a33e:	2b47      	cmp	r3, #71	; 0x47
    a340:	d838      	bhi.n	a3b4 <__svfiscanf_r+0x118>
    a342:	2b45      	cmp	r3, #69	; 0x45
    a344:	d300      	bcc.n	a348 <__svfiscanf_r+0xac>
    a346:	e0d8      	b.n	a4fa <__svfiscanf_r+0x25e>
    a348:	2b00      	cmp	r3, #0
    a34a:	d100      	bne.n	a34e <__svfiscanf_r+0xb2>
    a34c:	e11d      	b.n	a58a <__svfiscanf_r+0x2ee>
    a34e:	2b25      	cmp	r3, #37	; 0x25
    a350:	d079      	beq.n	a446 <__svfiscanf_r+0x1aa>
    a352:	2303      	movs	r3, #3
    a354:	934b      	str	r3, [sp, #300]	; 0x12c
    a356:	3307      	adds	r3, #7
    a358:	9346      	str	r3, [sp, #280]	; 0x118
    a35a:	e053      	b.n	a404 <__svfiscanf_r+0x168>
    a35c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a35e:	3301      	adds	r3, #1
    a360:	9201      	str	r2, [sp, #4]
    a362:	3201      	adds	r2, #1
    a364:	9249      	str	r2, [sp, #292]	; 0x124
    a366:	6862      	ldr	r2, [r4, #4]
    a368:	6023      	str	r3, [r4, #0]
    a36a:	3a01      	subs	r2, #1
    a36c:	6062      	str	r2, [r4, #4]
    a36e:	6863      	ldr	r3, [r4, #4]
    a370:	2b00      	cmp	r3, #0
    a372:	dd0b      	ble.n	a38c <__svfiscanf_r+0xf0>
    a374:	f7ff fb88 	bl	9a88 <__locale_ctype_ptr>
    a378:	2108      	movs	r1, #8
    a37a:	6823      	ldr	r3, [r4, #0]
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	1880      	adds	r0, r0, r2
    a380:	7842      	ldrb	r2, [r0, #1]
    a382:	420a      	tst	r2, r1
    a384:	d1ea      	bne.n	a35c <__svfiscanf_r+0xc0>
    a386:	1c6e      	adds	r6, r5, #1
    a388:	0035      	movs	r5, r6
    a38a:	e7a1      	b.n	a2d0 <__svfiscanf_r+0x34>
    a38c:	2286      	movs	r2, #134	; 0x86
    a38e:	ab02      	add	r3, sp, #8
    a390:	0052      	lsls	r2, r2, #1
    a392:	189b      	adds	r3, r3, r2
    a394:	59db      	ldr	r3, [r3, r7]
    a396:	0021      	movs	r1, r4
    a398:	9800      	ldr	r0, [sp, #0]
    a39a:	9301      	str	r3, [sp, #4]
    a39c:	4798      	blx	r3
    a39e:	2800      	cmp	r0, #0
    a3a0:	d0e8      	beq.n	a374 <__svfiscanf_r+0xd8>
    a3a2:	e7f0      	b.n	a386 <__svfiscanf_r+0xea>
    a3a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a3a6:	3501      	adds	r5, #1
    a3a8:	9302      	str	r3, [sp, #8]
    a3aa:	4353      	muls	r3, r2
    a3ac:	3b30      	subs	r3, #48	; 0x30
    a3ae:	1859      	adds	r1, r3, r1
    a3b0:	9147      	str	r1, [sp, #284]	; 0x11c
    a3b2:	e7a9      	b.n	a308 <__svfiscanf_r+0x6c>
    a3b4:	2b5b      	cmp	r3, #91	; 0x5b
    a3b6:	d100      	bne.n	a3ba <__svfiscanf_r+0x11e>
    a3b8:	e077      	b.n	a4aa <__svfiscanf_r+0x20e>
    a3ba:	d80f      	bhi.n	a3dc <__svfiscanf_r+0x140>
    a3bc:	2b58      	cmp	r3, #88	; 0x58
    a3be:	d1c8      	bne.n	a352 <__svfiscanf_r+0xb6>
    a3c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    a3c2:	9201      	str	r2, [sp, #4]
    a3c4:	2280      	movs	r2, #128	; 0x80
    a3c6:	9901      	ldr	r1, [sp, #4]
    a3c8:	0092      	lsls	r2, r2, #2
    a3ca:	430a      	orrs	r2, r1
    a3cc:	9245      	str	r2, [sp, #276]	; 0x114
    a3ce:	2210      	movs	r2, #16
    a3d0:	9246      	str	r2, [sp, #280]	; 0x118
    a3d2:	2203      	movs	r2, #3
    a3d4:	2b6e      	cmp	r3, #110	; 0x6e
    a3d6:	dd14      	ble.n	a402 <__svfiscanf_r+0x166>
    a3d8:	3201      	adds	r2, #1
    a3da:	e012      	b.n	a402 <__svfiscanf_r+0x166>
    a3dc:	2b63      	cmp	r3, #99	; 0x63
    a3de:	d100      	bne.n	a3e2 <__svfiscanf_r+0x146>
    a3e0:	e071      	b.n	a4c6 <__svfiscanf_r+0x22a>
    a3e2:	2b64      	cmp	r3, #100	; 0x64
    a3e4:	d1b5      	bne.n	a352 <__svfiscanf_r+0xb6>
    a3e6:	220a      	movs	r2, #10
    a3e8:	e7f2      	b.n	a3d0 <__svfiscanf_r+0x134>
    a3ea:	2b70      	cmp	r3, #112	; 0x70
    a3ec:	d052      	beq.n	a494 <__svfiscanf_r+0x1f8>
    a3ee:	d822      	bhi.n	a436 <__svfiscanf_r+0x19a>
    a3f0:	2b6e      	cmp	r3, #110	; 0x6e
    a3f2:	d100      	bne.n	a3f6 <__svfiscanf_r+0x15a>
    a3f4:	e06f      	b.n	a4d6 <__svfiscanf_r+0x23a>
    a3f6:	d854      	bhi.n	a4a2 <__svfiscanf_r+0x206>
    a3f8:	2b69      	cmp	r3, #105	; 0x69
    a3fa:	d1aa      	bne.n	a352 <__svfiscanf_r+0xb6>
    a3fc:	2300      	movs	r3, #0
    a3fe:	2203      	movs	r2, #3
    a400:	9346      	str	r3, [sp, #280]	; 0x118
    a402:	924b      	str	r2, [sp, #300]	; 0x12c
    a404:	6863      	ldr	r3, [r4, #4]
    a406:	2b00      	cmp	r3, #0
    a408:	dc00      	bgt.n	a40c <__svfiscanf_r+0x170>
    a40a:	e078      	b.n	a4fe <__svfiscanf_r+0x262>
    a40c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    a40e:	9301      	str	r3, [sp, #4]
    a410:	065b      	lsls	r3, r3, #25
    a412:	d400      	bmi.n	a416 <__svfiscanf_r+0x17a>
    a414:	e08b      	b.n	a52e <__svfiscanf_r+0x292>
    a416:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    a418:	2b02      	cmp	r3, #2
    a41a:	dd00      	ble.n	a41e <__svfiscanf_r+0x182>
    a41c:	e09d      	b.n	a55a <__svfiscanf_r+0x2be>
    a41e:	ab03      	add	r3, sp, #12
    a420:	0022      	movs	r2, r4
    a422:	a945      	add	r1, sp, #276	; 0x114
    a424:	9800      	ldr	r0, [sp, #0]
    a426:	f000 f8e7 	bl	a5f8 <_scanf_chars>
    a42a:	2801      	cmp	r0, #1
    a42c:	d100      	bne.n	a430 <__svfiscanf_r+0x194>
    a42e:	e0af      	b.n	a590 <__svfiscanf_r+0x2f4>
    a430:	2802      	cmp	r0, #2
    a432:	d1a9      	bne.n	a388 <__svfiscanf_r+0xec>
    a434:	e025      	b.n	a482 <__svfiscanf_r+0x1e6>
    a436:	2b75      	cmp	r3, #117	; 0x75
    a438:	d0d5      	beq.n	a3e6 <__svfiscanf_r+0x14a>
    a43a:	2b78      	cmp	r3, #120	; 0x78
    a43c:	d0c0      	beq.n	a3c0 <__svfiscanf_r+0x124>
    a43e:	2b73      	cmp	r3, #115	; 0x73
    a440:	d187      	bne.n	a352 <__svfiscanf_r+0xb6>
    a442:	2302      	movs	r3, #2
    a444:	e03d      	b.n	a4c2 <__svfiscanf_r+0x226>
    a446:	6863      	ldr	r3, [r4, #4]
    a448:	2b00      	cmp	r3, #0
    a44a:	dd0f      	ble.n	a46c <__svfiscanf_r+0x1d0>
    a44c:	6823      	ldr	r3, [r4, #0]
    a44e:	9901      	ldr	r1, [sp, #4]
    a450:	781a      	ldrb	r2, [r3, #0]
    a452:	4291      	cmp	r1, r2
    a454:	d000      	beq.n	a458 <__svfiscanf_r+0x1bc>
    a456:	e09b      	b.n	a590 <__svfiscanf_r+0x2f4>
    a458:	3301      	adds	r3, #1
    a45a:	6862      	ldr	r2, [r4, #4]
    a45c:	6023      	str	r3, [r4, #0]
    a45e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    a460:	3a01      	subs	r2, #1
    a462:	9301      	str	r3, [sp, #4]
    a464:	3301      	adds	r3, #1
    a466:	6062      	str	r2, [r4, #4]
    a468:	9349      	str	r3, [sp, #292]	; 0x124
    a46a:	e78d      	b.n	a388 <__svfiscanf_r+0xec>
    a46c:	2286      	movs	r2, #134	; 0x86
    a46e:	ab02      	add	r3, sp, #8
    a470:	0052      	lsls	r2, r2, #1
    a472:	189b      	adds	r3, r3, r2
    a474:	59db      	ldr	r3, [r3, r7]
    a476:	0021      	movs	r1, r4
    a478:	9800      	ldr	r0, [sp, #0]
    a47a:	9302      	str	r3, [sp, #8]
    a47c:	4798      	blx	r3
    a47e:	2800      	cmp	r0, #0
    a480:	d0e4      	beq.n	a44c <__svfiscanf_r+0x1b0>
    a482:	9848      	ldr	r0, [sp, #288]	; 0x120
    a484:	2800      	cmp	r0, #0
    a486:	d000      	beq.n	a48a <__svfiscanf_r+0x1ee>
    a488:	e07b      	b.n	a582 <__svfiscanf_r+0x2e6>
    a48a:	3801      	subs	r0, #1
    a48c:	23a7      	movs	r3, #167	; 0xa7
    a48e:	009b      	lsls	r3, r3, #2
    a490:	449d      	add	sp, r3
    a492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a494:	9a45      	ldr	r2, [sp, #276]	; 0x114
    a496:	9201      	str	r2, [sp, #4]
    a498:	2220      	movs	r2, #32
    a49a:	9901      	ldr	r1, [sp, #4]
    a49c:	430a      	orrs	r2, r1
    a49e:	9245      	str	r2, [sp, #276]	; 0x114
    a4a0:	e78e      	b.n	a3c0 <__svfiscanf_r+0x124>
    a4a2:	2308      	movs	r3, #8
    a4a4:	2204      	movs	r2, #4
    a4a6:	9346      	str	r3, [sp, #280]	; 0x118
    a4a8:	e7ab      	b.n	a402 <__svfiscanf_r+0x166>
    a4aa:	0031      	movs	r1, r6
    a4ac:	a805      	add	r0, sp, #20
    a4ae:	f000 fab5 	bl	aa1c <__sccl>
    a4b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    a4b4:	0006      	movs	r6, r0
    a4b6:	9301      	str	r3, [sp, #4]
    a4b8:	2340      	movs	r3, #64	; 0x40
    a4ba:	9a01      	ldr	r2, [sp, #4]
    a4bc:	4313      	orrs	r3, r2
    a4be:	9345      	str	r3, [sp, #276]	; 0x114
    a4c0:	2301      	movs	r3, #1
    a4c2:	934b      	str	r3, [sp, #300]	; 0x12c
    a4c4:	e79e      	b.n	a404 <__svfiscanf_r+0x168>
    a4c6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    a4c8:	9301      	str	r3, [sp, #4]
    a4ca:	2340      	movs	r3, #64	; 0x40
    a4cc:	9a01      	ldr	r2, [sp, #4]
    a4ce:	4313      	orrs	r3, r2
    a4d0:	9345      	str	r3, [sp, #276]	; 0x114
    a4d2:	2300      	movs	r3, #0
    a4d4:	e7f5      	b.n	a4c2 <__svfiscanf_r+0x226>
    a4d6:	9945      	ldr	r1, [sp, #276]	; 0x114
    a4d8:	06cb      	lsls	r3, r1, #27
    a4da:	d500      	bpl.n	a4de <__svfiscanf_r+0x242>
    a4dc:	e754      	b.n	a388 <__svfiscanf_r+0xec>
    a4de:	9b03      	ldr	r3, [sp, #12]
    a4e0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a4e2:	07c8      	lsls	r0, r1, #31
    a4e4:	d504      	bpl.n	a4f0 <__svfiscanf_r+0x254>
    a4e6:	1d19      	adds	r1, r3, #4
    a4e8:	9103      	str	r1, [sp, #12]
    a4ea:	681b      	ldr	r3, [r3, #0]
    a4ec:	801a      	strh	r2, [r3, #0]
    a4ee:	e74b      	b.n	a388 <__svfiscanf_r+0xec>
    a4f0:	1d19      	adds	r1, r3, #4
    a4f2:	9103      	str	r1, [sp, #12]
    a4f4:	681b      	ldr	r3, [r3, #0]
    a4f6:	601a      	str	r2, [r3, #0]
    a4f8:	e746      	b.n	a388 <__svfiscanf_r+0xec>
    a4fa:	2305      	movs	r3, #5
    a4fc:	e7e1      	b.n	a4c2 <__svfiscanf_r+0x226>
    a4fe:	2286      	movs	r2, #134	; 0x86
    a500:	ab02      	add	r3, sp, #8
    a502:	0052      	lsls	r2, r2, #1
    a504:	189b      	adds	r3, r3, r2
    a506:	59db      	ldr	r3, [r3, r7]
    a508:	0021      	movs	r1, r4
    a50a:	9800      	ldr	r0, [sp, #0]
    a50c:	9301      	str	r3, [sp, #4]
    a50e:	4798      	blx	r3
    a510:	2800      	cmp	r0, #0
    a512:	d100      	bne.n	a516 <__svfiscanf_r+0x27a>
    a514:	e77a      	b.n	a40c <__svfiscanf_r+0x170>
    a516:	e7b4      	b.n	a482 <__svfiscanf_r+0x1e6>
    a518:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a51a:	9201      	str	r2, [sp, #4]
    a51c:	3201      	adds	r2, #1
    a51e:	9249      	str	r2, [sp, #292]	; 0x124
    a520:	6862      	ldr	r2, [r4, #4]
    a522:	3a01      	subs	r2, #1
    a524:	6062      	str	r2, [r4, #4]
    a526:	2a00      	cmp	r2, #0
    a528:	dd0b      	ble.n	a542 <__svfiscanf_r+0x2a6>
    a52a:	3301      	adds	r3, #1
    a52c:	6023      	str	r3, [r4, #0]
    a52e:	f7ff faab 	bl	9a88 <__locale_ctype_ptr>
    a532:	2108      	movs	r1, #8
    a534:	6823      	ldr	r3, [r4, #0]
    a536:	781a      	ldrb	r2, [r3, #0]
    a538:	1880      	adds	r0, r0, r2
    a53a:	7842      	ldrb	r2, [r0, #1]
    a53c:	420a      	tst	r2, r1
    a53e:	d1eb      	bne.n	a518 <__svfiscanf_r+0x27c>
    a540:	e769      	b.n	a416 <__svfiscanf_r+0x17a>
    a542:	2286      	movs	r2, #134	; 0x86
    a544:	ab02      	add	r3, sp, #8
    a546:	0052      	lsls	r2, r2, #1
    a548:	189b      	adds	r3, r3, r2
    a54a:	59db      	ldr	r3, [r3, r7]
    a54c:	0021      	movs	r1, r4
    a54e:	9800      	ldr	r0, [sp, #0]
    a550:	9301      	str	r3, [sp, #4]
    a552:	4798      	blx	r3
    a554:	2800      	cmp	r0, #0
    a556:	d0ea      	beq.n	a52e <__svfiscanf_r+0x292>
    a558:	e793      	b.n	a482 <__svfiscanf_r+0x1e6>
    a55a:	2b04      	cmp	r3, #4
    a55c:	dc06      	bgt.n	a56c <__svfiscanf_r+0x2d0>
    a55e:	ab03      	add	r3, sp, #12
    a560:	0022      	movs	r2, r4
    a562:	a945      	add	r1, sp, #276	; 0x114
    a564:	9800      	ldr	r0, [sp, #0]
    a566:	f000 f8ab 	bl	a6c0 <_scanf_i>
    a56a:	e75e      	b.n	a42a <__svfiscanf_r+0x18e>
    a56c:	4b0d      	ldr	r3, [pc, #52]	; (a5a4 <__svfiscanf_r+0x308>)
    a56e:	2b00      	cmp	r3, #0
    a570:	d100      	bne.n	a574 <__svfiscanf_r+0x2d8>
    a572:	e709      	b.n	a388 <__svfiscanf_r+0xec>
    a574:	ab03      	add	r3, sp, #12
    a576:	0022      	movs	r2, r4
    a578:	a945      	add	r1, sp, #276	; 0x114
    a57a:	9800      	ldr	r0, [sp, #0]
    a57c:	e000      	b.n	a580 <__svfiscanf_r+0x2e4>
    a57e:	bf00      	nop
    a580:	e753      	b.n	a42a <__svfiscanf_r+0x18e>
    a582:	89a3      	ldrh	r3, [r4, #12]
    a584:	065b      	lsls	r3, r3, #25
    a586:	d400      	bmi.n	a58a <__svfiscanf_r+0x2ee>
    a588:	e780      	b.n	a48c <__svfiscanf_r+0x1f0>
    a58a:	2001      	movs	r0, #1
    a58c:	4240      	negs	r0, r0
    a58e:	e77d      	b.n	a48c <__svfiscanf_r+0x1f0>
    a590:	9848      	ldr	r0, [sp, #288]	; 0x120
    a592:	e77b      	b.n	a48c <__svfiscanf_r+0x1f0>
    a594:	fffffd64 	.word	0xfffffd64
    a598:	0000acc5 	.word	0x0000acc5
    a59c:	0000a8d9 	.word	0x0000a8d9
    a5a0:	0000b738 	.word	0x0000b738
    a5a4:	00000000 	.word	0x00000000

0000a5a8 <_vfiscanf_r>:
    a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5aa:	0004      	movs	r4, r0
    a5ac:	000d      	movs	r5, r1
    a5ae:	0016      	movs	r6, r2
    a5b0:	001f      	movs	r7, r3
    a5b2:	2800      	cmp	r0, #0
    a5b4:	d004      	beq.n	a5c0 <_vfiscanf_r+0x18>
    a5b6:	6983      	ldr	r3, [r0, #24]
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	d101      	bne.n	a5c0 <_vfiscanf_r+0x18>
    a5bc:	f7ff f9b0 	bl	9920 <__sinit>
    a5c0:	4b0a      	ldr	r3, [pc, #40]	; (a5ec <_vfiscanf_r+0x44>)
    a5c2:	429d      	cmp	r5, r3
    a5c4:	d107      	bne.n	a5d6 <_vfiscanf_r+0x2e>
    a5c6:	6865      	ldr	r5, [r4, #4]
    a5c8:	003b      	movs	r3, r7
    a5ca:	0032      	movs	r2, r6
    a5cc:	0029      	movs	r1, r5
    a5ce:	0020      	movs	r0, r4
    a5d0:	f7ff fe64 	bl	a29c <__svfiscanf_r>
    a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5d6:	4b06      	ldr	r3, [pc, #24]	; (a5f0 <_vfiscanf_r+0x48>)
    a5d8:	429d      	cmp	r5, r3
    a5da:	d101      	bne.n	a5e0 <_vfiscanf_r+0x38>
    a5dc:	68a5      	ldr	r5, [r4, #8]
    a5de:	e7f3      	b.n	a5c8 <_vfiscanf_r+0x20>
    a5e0:	4b04      	ldr	r3, [pc, #16]	; (a5f4 <_vfiscanf_r+0x4c>)
    a5e2:	429d      	cmp	r5, r3
    a5e4:	d1f0      	bne.n	a5c8 <_vfiscanf_r+0x20>
    a5e6:	68e5      	ldr	r5, [r4, #12]
    a5e8:	e7ee      	b.n	a5c8 <_vfiscanf_r+0x20>
    a5ea:	46c0      	nop			; (mov r8, r8)
    a5ec:	0000b6e8 	.word	0x0000b6e8
    a5f0:	0000b708 	.word	0x0000b708
    a5f4:	0000b6c8 	.word	0x0000b6c8

0000a5f8 <_scanf_chars>:
    a5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a5fa:	0015      	movs	r5, r2
    a5fc:	688a      	ldr	r2, [r1, #8]
    a5fe:	9001      	str	r0, [sp, #4]
    a600:	000c      	movs	r4, r1
    a602:	2a00      	cmp	r2, #0
    a604:	d106      	bne.n	a614 <_scanf_chars+0x1c>
    a606:	698a      	ldr	r2, [r1, #24]
    a608:	1e51      	subs	r1, r2, #1
    a60a:	418a      	sbcs	r2, r1
    a60c:	2101      	movs	r1, #1
    a60e:	4252      	negs	r2, r2
    a610:	430a      	orrs	r2, r1
    a612:	60a2      	str	r2, [r4, #8]
    a614:	6822      	ldr	r2, [r4, #0]
    a616:	06d2      	lsls	r2, r2, #27
    a618:	d403      	bmi.n	a622 <_scanf_chars+0x2a>
    a61a:	681a      	ldr	r2, [r3, #0]
    a61c:	1d11      	adds	r1, r2, #4
    a61e:	6019      	str	r1, [r3, #0]
    a620:	6817      	ldr	r7, [r2, #0]
    a622:	2600      	movs	r6, #0
    a624:	69a3      	ldr	r3, [r4, #24]
    a626:	2b00      	cmp	r3, #0
    a628:	d01c      	beq.n	a664 <_scanf_chars+0x6c>
    a62a:	2b01      	cmp	r3, #1
    a62c:	d108      	bne.n	a640 <_scanf_chars+0x48>
    a62e:	682b      	ldr	r3, [r5, #0]
    a630:	6962      	ldr	r2, [r4, #20]
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	5cd3      	ldrb	r3, [r2, r3]
    a636:	2b00      	cmp	r3, #0
    a638:	d114      	bne.n	a664 <_scanf_chars+0x6c>
    a63a:	2e00      	cmp	r6, #0
    a63c:	d130      	bne.n	a6a0 <_scanf_chars+0xa8>
    a63e:	e006      	b.n	a64e <_scanf_chars+0x56>
    a640:	2b02      	cmp	r3, #2
    a642:	d006      	beq.n	a652 <_scanf_chars+0x5a>
    a644:	2e00      	cmp	r6, #0
    a646:	d12b      	bne.n	a6a0 <_scanf_chars+0xa8>
    a648:	69a3      	ldr	r3, [r4, #24]
    a64a:	2b01      	cmp	r3, #1
    a64c:	d128      	bne.n	a6a0 <_scanf_chars+0xa8>
    a64e:	2001      	movs	r0, #1
    a650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a652:	f7ff fa19 	bl	9a88 <__locale_ctype_ptr>
    a656:	2208      	movs	r2, #8
    a658:	682b      	ldr	r3, [r5, #0]
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	18c0      	adds	r0, r0, r3
    a65e:	7843      	ldrb	r3, [r0, #1]
    a660:	4213      	tst	r3, r2
    a662:	d1ef      	bne.n	a644 <_scanf_chars+0x4c>
    a664:	2210      	movs	r2, #16
    a666:	6823      	ldr	r3, [r4, #0]
    a668:	3601      	adds	r6, #1
    a66a:	4213      	tst	r3, r2
    a66c:	d103      	bne.n	a676 <_scanf_chars+0x7e>
    a66e:	682b      	ldr	r3, [r5, #0]
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	703b      	strb	r3, [r7, #0]
    a674:	3701      	adds	r7, #1
    a676:	682a      	ldr	r2, [r5, #0]
    a678:	686b      	ldr	r3, [r5, #4]
    a67a:	3201      	adds	r2, #1
    a67c:	602a      	str	r2, [r5, #0]
    a67e:	68a2      	ldr	r2, [r4, #8]
    a680:	3b01      	subs	r3, #1
    a682:	3a01      	subs	r2, #1
    a684:	606b      	str	r3, [r5, #4]
    a686:	60a2      	str	r2, [r4, #8]
    a688:	2a00      	cmp	r2, #0
    a68a:	d009      	beq.n	a6a0 <_scanf_chars+0xa8>
    a68c:	2b00      	cmp	r3, #0
    a68e:	dcc9      	bgt.n	a624 <_scanf_chars+0x2c>
    a690:	23c0      	movs	r3, #192	; 0xc0
    a692:	005b      	lsls	r3, r3, #1
    a694:	58e3      	ldr	r3, [r4, r3]
    a696:	0029      	movs	r1, r5
    a698:	9801      	ldr	r0, [sp, #4]
    a69a:	4798      	blx	r3
    a69c:	2800      	cmp	r0, #0
    a69e:	d0c1      	beq.n	a624 <_scanf_chars+0x2c>
    a6a0:	2310      	movs	r3, #16
    a6a2:	6822      	ldr	r2, [r4, #0]
    a6a4:	4013      	ands	r3, r2
    a6a6:	d106      	bne.n	a6b6 <_scanf_chars+0xbe>
    a6a8:	68e2      	ldr	r2, [r4, #12]
    a6aa:	3201      	adds	r2, #1
    a6ac:	60e2      	str	r2, [r4, #12]
    a6ae:	69a2      	ldr	r2, [r4, #24]
    a6b0:	2a00      	cmp	r2, #0
    a6b2:	d000      	beq.n	a6b6 <_scanf_chars+0xbe>
    a6b4:	703b      	strb	r3, [r7, #0]
    a6b6:	6923      	ldr	r3, [r4, #16]
    a6b8:	2000      	movs	r0, #0
    a6ba:	199e      	adds	r6, r3, r6
    a6bc:	6126      	str	r6, [r4, #16]
    a6be:	e7c7      	b.n	a650 <_scanf_chars+0x58>

0000a6c0 <_scanf_i>:
    a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6c2:	000c      	movs	r4, r1
    a6c4:	b08d      	sub	sp, #52	; 0x34
    a6c6:	9302      	str	r3, [sp, #8]
    a6c8:	4b77      	ldr	r3, [pc, #476]	; (a8a8 <_scanf_i+0x1e8>)
    a6ca:	9005      	str	r0, [sp, #20]
    a6cc:	0016      	movs	r6, r2
    a6ce:	aa09      	add	r2, sp, #36	; 0x24
    a6d0:	cb23      	ldmia	r3!, {r0, r1, r5}
    a6d2:	c223      	stmia	r2!, {r0, r1, r5}
    a6d4:	4b75      	ldr	r3, [pc, #468]	; (a8ac <_scanf_i+0x1ec>)
    a6d6:	9306      	str	r3, [sp, #24]
    a6d8:	69a3      	ldr	r3, [r4, #24]
    a6da:	2b03      	cmp	r3, #3
    a6dc:	d001      	beq.n	a6e2 <_scanf_i+0x22>
    a6de:	4b74      	ldr	r3, [pc, #464]	; (a8b0 <_scanf_i+0x1f0>)
    a6e0:	9306      	str	r3, [sp, #24]
    a6e2:	22ae      	movs	r2, #174	; 0xae
    a6e4:	2000      	movs	r0, #0
    a6e6:	68a3      	ldr	r3, [r4, #8]
    a6e8:	0052      	lsls	r2, r2, #1
    a6ea:	1e59      	subs	r1, r3, #1
    a6ec:	9004      	str	r0, [sp, #16]
    a6ee:	4291      	cmp	r1, r2
    a6f0:	d905      	bls.n	a6fe <_scanf_i+0x3e>
    a6f2:	3b5e      	subs	r3, #94	; 0x5e
    a6f4:	3bff      	subs	r3, #255	; 0xff
    a6f6:	9304      	str	r3, [sp, #16]
    a6f8:	235e      	movs	r3, #94	; 0x5e
    a6fa:	33ff      	adds	r3, #255	; 0xff
    a6fc:	60a3      	str	r3, [r4, #8]
    a6fe:	0023      	movs	r3, r4
    a700:	331c      	adds	r3, #28
    a702:	9301      	str	r3, [sp, #4]
    a704:	23d0      	movs	r3, #208	; 0xd0
    a706:	2700      	movs	r7, #0
    a708:	6822      	ldr	r2, [r4, #0]
    a70a:	011b      	lsls	r3, r3, #4
    a70c:	4313      	orrs	r3, r2
    a70e:	6023      	str	r3, [r4, #0]
    a710:	9b01      	ldr	r3, [sp, #4]
    a712:	9303      	str	r3, [sp, #12]
    a714:	6833      	ldr	r3, [r6, #0]
    a716:	a809      	add	r0, sp, #36	; 0x24
    a718:	7819      	ldrb	r1, [r3, #0]
    a71a:	00bb      	lsls	r3, r7, #2
    a71c:	2202      	movs	r2, #2
    a71e:	5818      	ldr	r0, [r3, r0]
    a720:	f000 fbac 	bl	ae7c <memchr>
    a724:	2800      	cmp	r0, #0
    a726:	d02b      	beq.n	a780 <_scanf_i+0xc0>
    a728:	2f01      	cmp	r7, #1
    a72a:	d15f      	bne.n	a7ec <_scanf_i+0x12c>
    a72c:	6863      	ldr	r3, [r4, #4]
    a72e:	2b00      	cmp	r3, #0
    a730:	d106      	bne.n	a740 <_scanf_i+0x80>
    a732:	3308      	adds	r3, #8
    a734:	6822      	ldr	r2, [r4, #0]
    a736:	6063      	str	r3, [r4, #4]
    a738:	33f9      	adds	r3, #249	; 0xf9
    a73a:	33ff      	adds	r3, #255	; 0xff
    a73c:	4313      	orrs	r3, r2
    a73e:	6023      	str	r3, [r4, #0]
    a740:	4b5c      	ldr	r3, [pc, #368]	; (a8b4 <_scanf_i+0x1f4>)
    a742:	6822      	ldr	r2, [r4, #0]
    a744:	4013      	ands	r3, r2
    a746:	6023      	str	r3, [r4, #0]
    a748:	68a3      	ldr	r3, [r4, #8]
    a74a:	1e5a      	subs	r2, r3, #1
    a74c:	60a2      	str	r2, [r4, #8]
    a74e:	2b00      	cmp	r3, #0
    a750:	d016      	beq.n	a780 <_scanf_i+0xc0>
    a752:	9b03      	ldr	r3, [sp, #12]
    a754:	1c5d      	adds	r5, r3, #1
    a756:	6833      	ldr	r3, [r6, #0]
    a758:	1c5a      	adds	r2, r3, #1
    a75a:	6032      	str	r2, [r6, #0]
    a75c:	781b      	ldrb	r3, [r3, #0]
    a75e:	9a03      	ldr	r2, [sp, #12]
    a760:	9503      	str	r5, [sp, #12]
    a762:	7013      	strb	r3, [r2, #0]
    a764:	6873      	ldr	r3, [r6, #4]
    a766:	3b01      	subs	r3, #1
    a768:	6073      	str	r3, [r6, #4]
    a76a:	2b00      	cmp	r3, #0
    a76c:	dc08      	bgt.n	a780 <_scanf_i+0xc0>
    a76e:	23c0      	movs	r3, #192	; 0xc0
    a770:	005b      	lsls	r3, r3, #1
    a772:	58e3      	ldr	r3, [r4, r3]
    a774:	0031      	movs	r1, r6
    a776:	9805      	ldr	r0, [sp, #20]
    a778:	9307      	str	r3, [sp, #28]
    a77a:	4798      	blx	r3
    a77c:	2800      	cmp	r0, #0
    a77e:	d17d      	bne.n	a87c <_scanf_i+0x1bc>
    a780:	3701      	adds	r7, #1
    a782:	2f03      	cmp	r7, #3
    a784:	d1c6      	bne.n	a714 <_scanf_i+0x54>
    a786:	6863      	ldr	r3, [r4, #4]
    a788:	2b00      	cmp	r3, #0
    a78a:	d101      	bne.n	a790 <_scanf_i+0xd0>
    a78c:	330a      	adds	r3, #10
    a78e:	6063      	str	r3, [r4, #4]
    a790:	2110      	movs	r1, #16
    a792:	2700      	movs	r7, #0
    a794:	6863      	ldr	r3, [r4, #4]
    a796:	6960      	ldr	r0, [r4, #20]
    a798:	1ac9      	subs	r1, r1, r3
    a79a:	4b47      	ldr	r3, [pc, #284]	; (a8b8 <_scanf_i+0x1f8>)
    a79c:	18c9      	adds	r1, r1, r3
    a79e:	f000 f93d 	bl	aa1c <__sccl>
    a7a2:	9d03      	ldr	r5, [sp, #12]
    a7a4:	68a3      	ldr	r3, [r4, #8]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d041      	beq.n	a82e <_scanf_i+0x16e>
    a7aa:	6832      	ldr	r2, [r6, #0]
    a7ac:	6960      	ldr	r0, [r4, #20]
    a7ae:	7811      	ldrb	r1, [r2, #0]
    a7b0:	5c40      	ldrb	r0, [r0, r1]
    a7b2:	2800      	cmp	r0, #0
    a7b4:	d03b      	beq.n	a82e <_scanf_i+0x16e>
    a7b6:	2930      	cmp	r1, #48	; 0x30
    a7b8:	d128      	bne.n	a80c <_scanf_i+0x14c>
    a7ba:	2080      	movs	r0, #128	; 0x80
    a7bc:	6821      	ldr	r1, [r4, #0]
    a7be:	0100      	lsls	r0, r0, #4
    a7c0:	4201      	tst	r1, r0
    a7c2:	d023      	beq.n	a80c <_scanf_i+0x14c>
    a7c4:	9a04      	ldr	r2, [sp, #16]
    a7c6:	3701      	adds	r7, #1
    a7c8:	2a00      	cmp	r2, #0
    a7ca:	d003      	beq.n	a7d4 <_scanf_i+0x114>
    a7cc:	3a01      	subs	r2, #1
    a7ce:	3301      	adds	r3, #1
    a7d0:	9204      	str	r2, [sp, #16]
    a7d2:	60a3      	str	r3, [r4, #8]
    a7d4:	6873      	ldr	r3, [r6, #4]
    a7d6:	3b01      	subs	r3, #1
    a7d8:	6073      	str	r3, [r6, #4]
    a7da:	2b00      	cmp	r3, #0
    a7dc:	dd1e      	ble.n	a81c <_scanf_i+0x15c>
    a7de:	6833      	ldr	r3, [r6, #0]
    a7e0:	3301      	adds	r3, #1
    a7e2:	6033      	str	r3, [r6, #0]
    a7e4:	68a3      	ldr	r3, [r4, #8]
    a7e6:	3b01      	subs	r3, #1
    a7e8:	60a3      	str	r3, [r4, #8]
    a7ea:	e7db      	b.n	a7a4 <_scanf_i+0xe4>
    a7ec:	2f02      	cmp	r7, #2
    a7ee:	d1ab      	bne.n	a748 <_scanf_i+0x88>
    a7f0:	21c0      	movs	r1, #192	; 0xc0
    a7f2:	2380      	movs	r3, #128	; 0x80
    a7f4:	6822      	ldr	r2, [r4, #0]
    a7f6:	00c9      	lsls	r1, r1, #3
    a7f8:	4011      	ands	r1, r2
    a7fa:	009b      	lsls	r3, r3, #2
    a7fc:	4299      	cmp	r1, r3
    a7fe:	d1c2      	bne.n	a786 <_scanf_i+0xc6>
    a800:	3bf1      	subs	r3, #241	; 0xf1
    a802:	3bff      	subs	r3, #255	; 0xff
    a804:	6063      	str	r3, [r4, #4]
    a806:	33f0      	adds	r3, #240	; 0xf0
    a808:	4313      	orrs	r3, r2
    a80a:	e79c      	b.n	a746 <_scanf_i+0x86>
    a80c:	6821      	ldr	r1, [r4, #0]
    a80e:	4b2b      	ldr	r3, [pc, #172]	; (a8bc <_scanf_i+0x1fc>)
    a810:	400b      	ands	r3, r1
    a812:	6023      	str	r3, [r4, #0]
    a814:	7813      	ldrb	r3, [r2, #0]
    a816:	702b      	strb	r3, [r5, #0]
    a818:	3501      	adds	r5, #1
    a81a:	e7db      	b.n	a7d4 <_scanf_i+0x114>
    a81c:	23c0      	movs	r3, #192	; 0xc0
    a81e:	005b      	lsls	r3, r3, #1
    a820:	58e3      	ldr	r3, [r4, r3]
    a822:	0031      	movs	r1, r6
    a824:	9805      	ldr	r0, [sp, #20]
    a826:	9303      	str	r3, [sp, #12]
    a828:	4798      	blx	r3
    a82a:	2800      	cmp	r0, #0
    a82c:	d0da      	beq.n	a7e4 <_scanf_i+0x124>
    a82e:	6823      	ldr	r3, [r4, #0]
    a830:	05db      	lsls	r3, r3, #23
    a832:	d50e      	bpl.n	a852 <_scanf_i+0x192>
    a834:	9b01      	ldr	r3, [sp, #4]
    a836:	429d      	cmp	r5, r3
    a838:	d907      	bls.n	a84a <_scanf_i+0x18a>
    a83a:	23be      	movs	r3, #190	; 0xbe
    a83c:	3d01      	subs	r5, #1
    a83e:	005b      	lsls	r3, r3, #1
    a840:	7829      	ldrb	r1, [r5, #0]
    a842:	58e3      	ldr	r3, [r4, r3]
    a844:	0032      	movs	r2, r6
    a846:	9805      	ldr	r0, [sp, #20]
    a848:	4798      	blx	r3
    a84a:	9b01      	ldr	r3, [sp, #4]
    a84c:	2001      	movs	r0, #1
    a84e:	429d      	cmp	r5, r3
    a850:	d027      	beq.n	a8a2 <_scanf_i+0x1e2>
    a852:	2210      	movs	r2, #16
    a854:	6823      	ldr	r3, [r4, #0]
    a856:	401a      	ands	r2, r3
    a858:	d11c      	bne.n	a894 <_scanf_i+0x1d4>
    a85a:	702a      	strb	r2, [r5, #0]
    a85c:	6863      	ldr	r3, [r4, #4]
    a85e:	9901      	ldr	r1, [sp, #4]
    a860:	9805      	ldr	r0, [sp, #20]
    a862:	9e06      	ldr	r6, [sp, #24]
    a864:	47b0      	blx	r6
    a866:	9b02      	ldr	r3, [sp, #8]
    a868:	6822      	ldr	r2, [r4, #0]
    a86a:	681b      	ldr	r3, [r3, #0]
    a86c:	0691      	lsls	r1, r2, #26
    a86e:	d507      	bpl.n	a880 <_scanf_i+0x1c0>
    a870:	9902      	ldr	r1, [sp, #8]
    a872:	1d1a      	adds	r2, r3, #4
    a874:	600a      	str	r2, [r1, #0]
    a876:	681b      	ldr	r3, [r3, #0]
    a878:	6018      	str	r0, [r3, #0]
    a87a:	e008      	b.n	a88e <_scanf_i+0x1ce>
    a87c:	2700      	movs	r7, #0
    a87e:	e7d6      	b.n	a82e <_scanf_i+0x16e>
    a880:	07d1      	lsls	r1, r2, #31
    a882:	d5f5      	bpl.n	a870 <_scanf_i+0x1b0>
    a884:	9902      	ldr	r1, [sp, #8]
    a886:	1d1a      	adds	r2, r3, #4
    a888:	600a      	str	r2, [r1, #0]
    a88a:	681b      	ldr	r3, [r3, #0]
    a88c:	8018      	strh	r0, [r3, #0]
    a88e:	68e3      	ldr	r3, [r4, #12]
    a890:	3301      	adds	r3, #1
    a892:	60e3      	str	r3, [r4, #12]
    a894:	2000      	movs	r0, #0
    a896:	9b01      	ldr	r3, [sp, #4]
    a898:	1aed      	subs	r5, r5, r3
    a89a:	6923      	ldr	r3, [r4, #16]
    a89c:	19ef      	adds	r7, r5, r7
    a89e:	19df      	adds	r7, r3, r7
    a8a0:	6127      	str	r7, [r4, #16]
    a8a2:	b00d      	add	sp, #52	; 0x34
    a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8a6:	46c0      	nop			; (mov r8, r8)
    a8a8:	0000b768 	.word	0x0000b768
    a8ac:	00009529 	.word	0x00009529
    a8b0:	0000ac29 	.word	0x0000ac29
    a8b4:	fffffaff 	.word	0xfffffaff
    a8b8:	0000b774 	.word	0x0000b774
    a8bc:	fffff6ff 	.word	0xfffff6ff

0000a8c0 <lflush>:
    a8c0:	2209      	movs	r2, #9
    a8c2:	b510      	push	{r4, lr}
    a8c4:	8983      	ldrh	r3, [r0, #12]
    a8c6:	4013      	ands	r3, r2
    a8c8:	2200      	movs	r2, #0
    a8ca:	2b09      	cmp	r3, #9
    a8cc:	d102      	bne.n	a8d4 <lflush+0x14>
    a8ce:	f7fe ffd1 	bl	9874 <fflush>
    a8d2:	0002      	movs	r2, r0
    a8d4:	0010      	movs	r0, r2
    a8d6:	bd10      	pop	{r4, pc}

0000a8d8 <__srefill_r>:
    a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8da:	0005      	movs	r5, r0
    a8dc:	000c      	movs	r4, r1
    a8de:	2800      	cmp	r0, #0
    a8e0:	d004      	beq.n	a8ec <__srefill_r+0x14>
    a8e2:	6983      	ldr	r3, [r0, #24]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d101      	bne.n	a8ec <__srefill_r+0x14>
    a8e8:	f7ff f81a 	bl	9920 <__sinit>
    a8ec:	4b3d      	ldr	r3, [pc, #244]	; (a9e4 <__srefill_r+0x10c>)
    a8ee:	429c      	cmp	r4, r3
    a8f0:	d10a      	bne.n	a908 <__srefill_r+0x30>
    a8f2:	686c      	ldr	r4, [r5, #4]
    a8f4:	2300      	movs	r3, #0
    a8f6:	6063      	str	r3, [r4, #4]
    a8f8:	230c      	movs	r3, #12
    a8fa:	5ee2      	ldrsh	r2, [r4, r3]
    a8fc:	b293      	uxth	r3, r2
    a8fe:	0699      	lsls	r1, r3, #26
    a900:	d50c      	bpl.n	a91c <__srefill_r+0x44>
    a902:	2001      	movs	r0, #1
    a904:	4240      	negs	r0, r0
    a906:	e068      	b.n	a9da <__srefill_r+0x102>
    a908:	4b37      	ldr	r3, [pc, #220]	; (a9e8 <__srefill_r+0x110>)
    a90a:	429c      	cmp	r4, r3
    a90c:	d101      	bne.n	a912 <__srefill_r+0x3a>
    a90e:	68ac      	ldr	r4, [r5, #8]
    a910:	e7f0      	b.n	a8f4 <__srefill_r+0x1c>
    a912:	4b36      	ldr	r3, [pc, #216]	; (a9ec <__srefill_r+0x114>)
    a914:	429c      	cmp	r4, r3
    a916:	d1ed      	bne.n	a8f4 <__srefill_r+0x1c>
    a918:	68ec      	ldr	r4, [r5, #12]
    a91a:	e7eb      	b.n	a8f4 <__srefill_r+0x1c>
    a91c:	0759      	lsls	r1, r3, #29
    a91e:	d44a      	bmi.n	a9b6 <__srefill_r+0xde>
    a920:	06d9      	lsls	r1, r3, #27
    a922:	d405      	bmi.n	a930 <__srefill_r+0x58>
    a924:	2309      	movs	r3, #9
    a926:	602b      	str	r3, [r5, #0]
    a928:	3337      	adds	r3, #55	; 0x37
    a92a:	4313      	orrs	r3, r2
    a92c:	81a3      	strh	r3, [r4, #12]
    a92e:	e7e8      	b.n	a902 <__srefill_r+0x2a>
    a930:	2608      	movs	r6, #8
    a932:	4233      	tst	r3, r6
    a934:	d00a      	beq.n	a94c <__srefill_r+0x74>
    a936:	0021      	movs	r1, r4
    a938:	0028      	movs	r0, r5
    a93a:	f7fe ff6f 	bl	981c <_fflush_r>
    a93e:	2800      	cmp	r0, #0
    a940:	d1df      	bne.n	a902 <__srefill_r+0x2a>
    a942:	89a3      	ldrh	r3, [r4, #12]
    a944:	60a0      	str	r0, [r4, #8]
    a946:	43b3      	bics	r3, r6
    a948:	81a3      	strh	r3, [r4, #12]
    a94a:	61a0      	str	r0, [r4, #24]
    a94c:	2304      	movs	r3, #4
    a94e:	89a2      	ldrh	r2, [r4, #12]
    a950:	4313      	orrs	r3, r2
    a952:	81a3      	strh	r3, [r4, #12]
    a954:	6923      	ldr	r3, [r4, #16]
    a956:	2b00      	cmp	r3, #0
    a958:	d103      	bne.n	a962 <__srefill_r+0x8a>
    a95a:	0021      	movs	r1, r4
    a95c:	0028      	movs	r0, r5
    a95e:	f7ff f8c9 	bl	9af4 <__smakebuf_r>
    a962:	230c      	movs	r3, #12
    a964:	5ee7      	ldrsh	r7, [r4, r3]
    a966:	b2be      	uxth	r6, r7
    a968:	07b3      	lsls	r3, r6, #30
    a96a:	d00f      	beq.n	a98c <__srefill_r+0xb4>
    a96c:	2301      	movs	r3, #1
    a96e:	81a3      	strh	r3, [r4, #12]
    a970:	4b1f      	ldr	r3, [pc, #124]	; (a9f0 <__srefill_r+0x118>)
    a972:	4920      	ldr	r1, [pc, #128]	; (a9f4 <__srefill_r+0x11c>)
    a974:	6818      	ldr	r0, [r3, #0]
    a976:	f7ff f847 	bl	9a08 <_fwalk>
    a97a:	2309      	movs	r3, #9
    a97c:	81a7      	strh	r7, [r4, #12]
    a97e:	401e      	ands	r6, r3
    a980:	429e      	cmp	r6, r3
    a982:	d103      	bne.n	a98c <__srefill_r+0xb4>
    a984:	0021      	movs	r1, r4
    a986:	0028      	movs	r0, r5
    a988:	f7fe febe 	bl	9708 <__sflush_r>
    a98c:	6923      	ldr	r3, [r4, #16]
    a98e:	6922      	ldr	r2, [r4, #16]
    a990:	6023      	str	r3, [r4, #0]
    a992:	0028      	movs	r0, r5
    a994:	6963      	ldr	r3, [r4, #20]
    a996:	6a21      	ldr	r1, [r4, #32]
    a998:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a99a:	47a8      	blx	r5
    a99c:	0002      	movs	r2, r0
    a99e:	6060      	str	r0, [r4, #4]
    a9a0:	2000      	movs	r0, #0
    a9a2:	4282      	cmp	r2, r0
    a9a4:	dc19      	bgt.n	a9da <__srefill_r+0x102>
    a9a6:	89a1      	ldrh	r1, [r4, #12]
    a9a8:	4282      	cmp	r2, r0
    a9aa:	d117      	bne.n	a9dc <__srefill_r+0x104>
    a9ac:	2320      	movs	r3, #32
    a9ae:	430b      	orrs	r3, r1
    a9b0:	81a3      	strh	r3, [r4, #12]
    a9b2:	3801      	subs	r0, #1
    a9b4:	e011      	b.n	a9da <__srefill_r+0x102>
    a9b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a9b8:	2900      	cmp	r1, #0
    a9ba:	d0cb      	beq.n	a954 <__srefill_r+0x7c>
    a9bc:	0023      	movs	r3, r4
    a9be:	3344      	adds	r3, #68	; 0x44
    a9c0:	4299      	cmp	r1, r3
    a9c2:	d002      	beq.n	a9ca <__srefill_r+0xf2>
    a9c4:	0028      	movs	r0, r5
    a9c6:	f7ff f8f5 	bl	9bb4 <_free_r>
    a9ca:	2000      	movs	r0, #0
    a9cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a9ce:	6360      	str	r0, [r4, #52]	; 0x34
    a9d0:	6063      	str	r3, [r4, #4]
    a9d2:	4283      	cmp	r3, r0
    a9d4:	d0be      	beq.n	a954 <__srefill_r+0x7c>
    a9d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a9d8:	6023      	str	r3, [r4, #0]
    a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9dc:	2340      	movs	r3, #64	; 0x40
    a9de:	6060      	str	r0, [r4, #4]
    a9e0:	430b      	orrs	r3, r1
    a9e2:	e7a3      	b.n	a92c <__srefill_r+0x54>
    a9e4:	0000b6e8 	.word	0x0000b6e8
    a9e8:	0000b708 	.word	0x0000b708
    a9ec:	0000b6c8 	.word	0x0000b6c8
    a9f0:	0000b6c4 	.word	0x0000b6c4
    a9f4:	0000a8c1 	.word	0x0000a8c1

0000a9f8 <_sbrk_r>:
    a9f8:	2300      	movs	r3, #0
    a9fa:	b570      	push	{r4, r5, r6, lr}
    a9fc:	4c06      	ldr	r4, [pc, #24]	; (aa18 <_sbrk_r+0x20>)
    a9fe:	0005      	movs	r5, r0
    aa00:	0008      	movs	r0, r1
    aa02:	6023      	str	r3, [r4, #0]
    aa04:	f7fb fff6 	bl	69f4 <_sbrk>
    aa08:	1c43      	adds	r3, r0, #1
    aa0a:	d103      	bne.n	aa14 <_sbrk_r+0x1c>
    aa0c:	6823      	ldr	r3, [r4, #0]
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d000      	beq.n	aa14 <_sbrk_r+0x1c>
    aa12:	602b      	str	r3, [r5, #0]
    aa14:	bd70      	pop	{r4, r5, r6, pc}
    aa16:	46c0      	nop			; (mov r8, r8)
    aa18:	20000474 	.word	0x20000474

0000aa1c <__sccl>:
    aa1c:	b570      	push	{r4, r5, r6, lr}
    aa1e:	780b      	ldrb	r3, [r1, #0]
    aa20:	2b5e      	cmp	r3, #94	; 0x5e
    aa22:	d00d      	beq.n	aa40 <__sccl+0x24>
    aa24:	1c4a      	adds	r2, r1, #1
    aa26:	2100      	movs	r1, #0
    aa28:	0004      	movs	r4, r0
    aa2a:	1c45      	adds	r5, r0, #1
    aa2c:	35ff      	adds	r5, #255	; 0xff
    aa2e:	7021      	strb	r1, [r4, #0]
    aa30:	3401      	adds	r4, #1
    aa32:	42a5      	cmp	r5, r4
    aa34:	d1fb      	bne.n	aa2e <__sccl+0x12>
    aa36:	2b00      	cmp	r3, #0
    aa38:	d106      	bne.n	aa48 <__sccl+0x2c>
    aa3a:	3a01      	subs	r2, #1
    aa3c:	0010      	movs	r0, r2
    aa3e:	bd70      	pop	{r4, r5, r6, pc}
    aa40:	1c8a      	adds	r2, r1, #2
    aa42:	784b      	ldrb	r3, [r1, #1]
    aa44:	2101      	movs	r1, #1
    aa46:	e7ef      	b.n	aa28 <__sccl+0xc>
    aa48:	2401      	movs	r4, #1
    aa4a:	404c      	eors	r4, r1
    aa4c:	0011      	movs	r1, r2
    aa4e:	54c4      	strb	r4, [r0, r3]
    aa50:	780d      	ldrb	r5, [r1, #0]
    aa52:	1c4a      	adds	r2, r1, #1
    aa54:	2d2d      	cmp	r5, #45	; 0x2d
    aa56:	d007      	beq.n	aa68 <__sccl+0x4c>
    aa58:	2d5d      	cmp	r5, #93	; 0x5d
    aa5a:	d0ef      	beq.n	aa3c <__sccl+0x20>
    aa5c:	2d00      	cmp	r5, #0
    aa5e:	d101      	bne.n	aa64 <__sccl+0x48>
    aa60:	000a      	movs	r2, r1
    aa62:	e7eb      	b.n	aa3c <__sccl+0x20>
    aa64:	002b      	movs	r3, r5
    aa66:	e7f1      	b.n	aa4c <__sccl+0x30>
    aa68:	784e      	ldrb	r6, [r1, #1]
    aa6a:	2e5d      	cmp	r6, #93	; 0x5d
    aa6c:	d0fa      	beq.n	aa64 <__sccl+0x48>
    aa6e:	42b3      	cmp	r3, r6
    aa70:	dcf8      	bgt.n	aa64 <__sccl+0x48>
    aa72:	3102      	adds	r1, #2
    aa74:	3301      	adds	r3, #1
    aa76:	54c4      	strb	r4, [r0, r3]
    aa78:	429e      	cmp	r6, r3
    aa7a:	dcfb      	bgt.n	aa74 <__sccl+0x58>
    aa7c:	e7e8      	b.n	aa50 <__sccl+0x34>
	...

0000aa80 <__sread>:
    aa80:	b570      	push	{r4, r5, r6, lr}
    aa82:	000c      	movs	r4, r1
    aa84:	250e      	movs	r5, #14
    aa86:	5f49      	ldrsh	r1, [r1, r5]
    aa88:	f000 fa2c 	bl	aee4 <_read_r>
    aa8c:	2800      	cmp	r0, #0
    aa8e:	db03      	blt.n	aa98 <__sread+0x18>
    aa90:	6d63      	ldr	r3, [r4, #84]	; 0x54
    aa92:	181b      	adds	r3, r3, r0
    aa94:	6563      	str	r3, [r4, #84]	; 0x54
    aa96:	bd70      	pop	{r4, r5, r6, pc}
    aa98:	89a3      	ldrh	r3, [r4, #12]
    aa9a:	4a02      	ldr	r2, [pc, #8]	; (aaa4 <__sread+0x24>)
    aa9c:	4013      	ands	r3, r2
    aa9e:	81a3      	strh	r3, [r4, #12]
    aaa0:	e7f9      	b.n	aa96 <__sread+0x16>
    aaa2:	46c0      	nop			; (mov r8, r8)
    aaa4:	ffffefff 	.word	0xffffefff

0000aaa8 <__swrite>:
    aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaaa:	001f      	movs	r7, r3
    aaac:	898b      	ldrh	r3, [r1, #12]
    aaae:	0005      	movs	r5, r0
    aab0:	000c      	movs	r4, r1
    aab2:	0016      	movs	r6, r2
    aab4:	05db      	lsls	r3, r3, #23
    aab6:	d505      	bpl.n	aac4 <__swrite+0x1c>
    aab8:	230e      	movs	r3, #14
    aaba:	5ec9      	ldrsh	r1, [r1, r3]
    aabc:	2200      	movs	r2, #0
    aabe:	2302      	movs	r3, #2
    aac0:	f000 f9c8 	bl	ae54 <_lseek_r>
    aac4:	89a3      	ldrh	r3, [r4, #12]
    aac6:	4a05      	ldr	r2, [pc, #20]	; (aadc <__swrite+0x34>)
    aac8:	0028      	movs	r0, r5
    aaca:	4013      	ands	r3, r2
    aacc:	81a3      	strh	r3, [r4, #12]
    aace:	0032      	movs	r2, r6
    aad0:	230e      	movs	r3, #14
    aad2:	5ee1      	ldrsh	r1, [r4, r3]
    aad4:	003b      	movs	r3, r7
    aad6:	f000 f973 	bl	adc0 <_write_r>
    aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aadc:	ffffefff 	.word	0xffffefff

0000aae0 <__sseek>:
    aae0:	b570      	push	{r4, r5, r6, lr}
    aae2:	000c      	movs	r4, r1
    aae4:	250e      	movs	r5, #14
    aae6:	5f49      	ldrsh	r1, [r1, r5]
    aae8:	f000 f9b4 	bl	ae54 <_lseek_r>
    aaec:	89a3      	ldrh	r3, [r4, #12]
    aaee:	1c42      	adds	r2, r0, #1
    aaf0:	d103      	bne.n	aafa <__sseek+0x1a>
    aaf2:	4a05      	ldr	r2, [pc, #20]	; (ab08 <__sseek+0x28>)
    aaf4:	4013      	ands	r3, r2
    aaf6:	81a3      	strh	r3, [r4, #12]
    aaf8:	bd70      	pop	{r4, r5, r6, pc}
    aafa:	2280      	movs	r2, #128	; 0x80
    aafc:	0152      	lsls	r2, r2, #5
    aafe:	4313      	orrs	r3, r2
    ab00:	81a3      	strh	r3, [r4, #12]
    ab02:	6560      	str	r0, [r4, #84]	; 0x54
    ab04:	e7f8      	b.n	aaf8 <__sseek+0x18>
    ab06:	46c0      	nop			; (mov r8, r8)
    ab08:	ffffefff 	.word	0xffffefff

0000ab0c <__sclose>:
    ab0c:	b510      	push	{r4, lr}
    ab0e:	230e      	movs	r3, #14
    ab10:	5ec9      	ldrsh	r1, [r1, r3]
    ab12:	f000 f969 	bl	ade8 <_close_r>
    ab16:	bd10      	pop	{r4, pc}

0000ab18 <_strtoul_l.isra.0>:
    ab18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab1a:	001f      	movs	r7, r3
    ab1c:	000e      	movs	r6, r1
    ab1e:	b087      	sub	sp, #28
    ab20:	9005      	str	r0, [sp, #20]
    ab22:	9103      	str	r1, [sp, #12]
    ab24:	9201      	str	r2, [sp, #4]
    ab26:	980c      	ldr	r0, [sp, #48]	; 0x30
    ab28:	7834      	ldrb	r4, [r6, #0]
    ab2a:	f7fe ffaa 	bl	9a82 <__locale_ctype_ptr_l>
    ab2e:	2208      	movs	r2, #8
    ab30:	1900      	adds	r0, r0, r4
    ab32:	7843      	ldrb	r3, [r0, #1]
    ab34:	1c75      	adds	r5, r6, #1
    ab36:	4013      	ands	r3, r2
    ab38:	d10c      	bne.n	ab54 <_strtoul_l.isra.0+0x3c>
    ab3a:	2c2d      	cmp	r4, #45	; 0x2d
    ab3c:	d10c      	bne.n	ab58 <_strtoul_l.isra.0+0x40>
    ab3e:	3301      	adds	r3, #1
    ab40:	782c      	ldrb	r4, [r5, #0]
    ab42:	9302      	str	r3, [sp, #8]
    ab44:	1cb5      	adds	r5, r6, #2
    ab46:	2f00      	cmp	r7, #0
    ab48:	d00c      	beq.n	ab64 <_strtoul_l.isra.0+0x4c>
    ab4a:	2f10      	cmp	r7, #16
    ab4c:	d114      	bne.n	ab78 <_strtoul_l.isra.0+0x60>
    ab4e:	2c30      	cmp	r4, #48	; 0x30
    ab50:	d00a      	beq.n	ab68 <_strtoul_l.isra.0+0x50>
    ab52:	e011      	b.n	ab78 <_strtoul_l.isra.0+0x60>
    ab54:	002e      	movs	r6, r5
    ab56:	e7e6      	b.n	ab26 <_strtoul_l.isra.0+0xe>
    ab58:	9302      	str	r3, [sp, #8]
    ab5a:	2c2b      	cmp	r4, #43	; 0x2b
    ab5c:	d1f3      	bne.n	ab46 <_strtoul_l.isra.0+0x2e>
    ab5e:	782c      	ldrb	r4, [r5, #0]
    ab60:	1cb5      	adds	r5, r6, #2
    ab62:	e7f0      	b.n	ab46 <_strtoul_l.isra.0+0x2e>
    ab64:	2c30      	cmp	r4, #48	; 0x30
    ab66:	d12f      	bne.n	abc8 <_strtoul_l.isra.0+0xb0>
    ab68:	2220      	movs	r2, #32
    ab6a:	782b      	ldrb	r3, [r5, #0]
    ab6c:	4393      	bics	r3, r2
    ab6e:	2b58      	cmp	r3, #88	; 0x58
    ab70:	d154      	bne.n	ac1c <_strtoul_l.isra.0+0x104>
    ab72:	2710      	movs	r7, #16
    ab74:	786c      	ldrb	r4, [r5, #1]
    ab76:	3502      	adds	r5, #2
    ab78:	2001      	movs	r0, #1
    ab7a:	0039      	movs	r1, r7
    ab7c:	4240      	negs	r0, r0
    ab7e:	f7fc fc59 	bl	7434 <__udivsi3>
    ab82:	0006      	movs	r6, r0
    ab84:	2001      	movs	r0, #1
    ab86:	0039      	movs	r1, r7
    ab88:	4240      	negs	r0, r0
    ab8a:	f7fc fcd9 	bl	7540 <__aeabi_uidivmod>
    ab8e:	2300      	movs	r3, #0
    ab90:	9104      	str	r1, [sp, #16]
    ab92:	2101      	movs	r1, #1
    ab94:	2201      	movs	r2, #1
    ab96:	0018      	movs	r0, r3
    ab98:	468c      	mov	ip, r1
    ab9a:	4252      	negs	r2, r2
    ab9c:	0021      	movs	r1, r4
    ab9e:	3930      	subs	r1, #48	; 0x30
    aba0:	2909      	cmp	r1, #9
    aba2:	d813      	bhi.n	abcc <_strtoul_l.isra.0+0xb4>
    aba4:	000c      	movs	r4, r1
    aba6:	42a7      	cmp	r7, r4
    aba8:	dd1e      	ble.n	abe8 <_strtoul_l.isra.0+0xd0>
    abaa:	2b00      	cmp	r3, #0
    abac:	db1a      	blt.n	abe4 <_strtoul_l.isra.0+0xcc>
    abae:	0013      	movs	r3, r2
    abb0:	4286      	cmp	r6, r0
    abb2:	d306      	bcc.n	abc2 <_strtoul_l.isra.0+0xaa>
    abb4:	d102      	bne.n	abbc <_strtoul_l.isra.0+0xa4>
    abb6:	9904      	ldr	r1, [sp, #16]
    abb8:	42a1      	cmp	r1, r4
    abba:	db02      	blt.n	abc2 <_strtoul_l.isra.0+0xaa>
    abbc:	4663      	mov	r3, ip
    abbe:	4378      	muls	r0, r7
    abc0:	1820      	adds	r0, r4, r0
    abc2:	782c      	ldrb	r4, [r5, #0]
    abc4:	3501      	adds	r5, #1
    abc6:	e7e9      	b.n	ab9c <_strtoul_l.isra.0+0x84>
    abc8:	270a      	movs	r7, #10
    abca:	e7d5      	b.n	ab78 <_strtoul_l.isra.0+0x60>
    abcc:	0021      	movs	r1, r4
    abce:	3941      	subs	r1, #65	; 0x41
    abd0:	2919      	cmp	r1, #25
    abd2:	d801      	bhi.n	abd8 <_strtoul_l.isra.0+0xc0>
    abd4:	3c37      	subs	r4, #55	; 0x37
    abd6:	e7e6      	b.n	aba6 <_strtoul_l.isra.0+0x8e>
    abd8:	0021      	movs	r1, r4
    abda:	3961      	subs	r1, #97	; 0x61
    abdc:	2919      	cmp	r1, #25
    abde:	d803      	bhi.n	abe8 <_strtoul_l.isra.0+0xd0>
    abe0:	3c57      	subs	r4, #87	; 0x57
    abe2:	e7e0      	b.n	aba6 <_strtoul_l.isra.0+0x8e>
    abe4:	0013      	movs	r3, r2
    abe6:	e7ec      	b.n	abc2 <_strtoul_l.isra.0+0xaa>
    abe8:	2b00      	cmp	r3, #0
    abea:	da09      	bge.n	ac00 <_strtoul_l.isra.0+0xe8>
    abec:	2322      	movs	r3, #34	; 0x22
    abee:	2001      	movs	r0, #1
    abf0:	9a05      	ldr	r2, [sp, #20]
    abf2:	4240      	negs	r0, r0
    abf4:	6013      	str	r3, [r2, #0]
    abf6:	9b01      	ldr	r3, [sp, #4]
    abf8:	2b00      	cmp	r3, #0
    abfa:	d10b      	bne.n	ac14 <_strtoul_l.isra.0+0xfc>
    abfc:	b007      	add	sp, #28
    abfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac00:	9a02      	ldr	r2, [sp, #8]
    ac02:	2a00      	cmp	r2, #0
    ac04:	d000      	beq.n	ac08 <_strtoul_l.isra.0+0xf0>
    ac06:	4240      	negs	r0, r0
    ac08:	9a01      	ldr	r2, [sp, #4]
    ac0a:	2a00      	cmp	r2, #0
    ac0c:	d0f6      	beq.n	abfc <_strtoul_l.isra.0+0xe4>
    ac0e:	9a03      	ldr	r2, [sp, #12]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d000      	beq.n	ac16 <_strtoul_l.isra.0+0xfe>
    ac14:	1e6a      	subs	r2, r5, #1
    ac16:	9b01      	ldr	r3, [sp, #4]
    ac18:	601a      	str	r2, [r3, #0]
    ac1a:	e7ef      	b.n	abfc <_strtoul_l.isra.0+0xe4>
    ac1c:	2430      	movs	r4, #48	; 0x30
    ac1e:	2f00      	cmp	r7, #0
    ac20:	d1aa      	bne.n	ab78 <_strtoul_l.isra.0+0x60>
    ac22:	3708      	adds	r7, #8
    ac24:	e7a8      	b.n	ab78 <_strtoul_l.isra.0+0x60>
	...

0000ac28 <_strtoul_r>:
    ac28:	b513      	push	{r0, r1, r4, lr}
    ac2a:	4c05      	ldr	r4, [pc, #20]	; (ac40 <_strtoul_r+0x18>)
    ac2c:	6824      	ldr	r4, [r4, #0]
    ac2e:	6a24      	ldr	r4, [r4, #32]
    ac30:	2c00      	cmp	r4, #0
    ac32:	d100      	bne.n	ac36 <_strtoul_r+0xe>
    ac34:	4c03      	ldr	r4, [pc, #12]	; (ac44 <_strtoul_r+0x1c>)
    ac36:	9400      	str	r4, [sp, #0]
    ac38:	f7ff ff6e 	bl	ab18 <_strtoul_l.isra.0>
    ac3c:	bd16      	pop	{r1, r2, r4, pc}
    ac3e:	46c0      	nop			; (mov r8, r8)
    ac40:	20000068 	.word	0x20000068
    ac44:	200000cc 	.word	0x200000cc

0000ac48 <__submore>:
    ac48:	000b      	movs	r3, r1
    ac4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac4c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    ac4e:	3344      	adds	r3, #68	; 0x44
    ac50:	000c      	movs	r4, r1
    ac52:	429d      	cmp	r5, r3
    ac54:	d11c      	bne.n	ac90 <__submore+0x48>
    ac56:	2680      	movs	r6, #128	; 0x80
    ac58:	00f6      	lsls	r6, r6, #3
    ac5a:	0031      	movs	r1, r6
    ac5c:	f7fe fff4 	bl	9c48 <_malloc_r>
    ac60:	2800      	cmp	r0, #0
    ac62:	d102      	bne.n	ac6a <__submore+0x22>
    ac64:	2001      	movs	r0, #1
    ac66:	4240      	negs	r0, r0
    ac68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac6a:	0023      	movs	r3, r4
    ac6c:	6360      	str	r0, [r4, #52]	; 0x34
    ac6e:	63a6      	str	r6, [r4, #56]	; 0x38
    ac70:	3346      	adds	r3, #70	; 0x46
    ac72:	781a      	ldrb	r2, [r3, #0]
    ac74:	4b10      	ldr	r3, [pc, #64]	; (acb8 <__submore+0x70>)
    ac76:	54c2      	strb	r2, [r0, r3]
    ac78:	0023      	movs	r3, r4
    ac7a:	3345      	adds	r3, #69	; 0x45
    ac7c:	781a      	ldrb	r2, [r3, #0]
    ac7e:	4b0f      	ldr	r3, [pc, #60]	; (acbc <__submore+0x74>)
    ac80:	54c2      	strb	r2, [r0, r3]
    ac82:	782a      	ldrb	r2, [r5, #0]
    ac84:	4b0e      	ldr	r3, [pc, #56]	; (acc0 <__submore+0x78>)
    ac86:	54c2      	strb	r2, [r0, r3]
    ac88:	18c0      	adds	r0, r0, r3
    ac8a:	6020      	str	r0, [r4, #0]
    ac8c:	2000      	movs	r0, #0
    ac8e:	e7eb      	b.n	ac68 <__submore+0x20>
    ac90:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    ac92:	0029      	movs	r1, r5
    ac94:	0073      	lsls	r3, r6, #1
    ac96:	001a      	movs	r2, r3
    ac98:	9301      	str	r3, [sp, #4]
    ac9a:	f000 f8fc 	bl	ae96 <_realloc_r>
    ac9e:	1e05      	subs	r5, r0, #0
    aca0:	d0e0      	beq.n	ac64 <__submore+0x1c>
    aca2:	1987      	adds	r7, r0, r6
    aca4:	0001      	movs	r1, r0
    aca6:	0032      	movs	r2, r6
    aca8:	0038      	movs	r0, r7
    acaa:	f7fe f9f1 	bl	9090 <memcpy>
    acae:	9b01      	ldr	r3, [sp, #4]
    acb0:	6027      	str	r7, [r4, #0]
    acb2:	6365      	str	r5, [r4, #52]	; 0x34
    acb4:	63a3      	str	r3, [r4, #56]	; 0x38
    acb6:	e7e9      	b.n	ac8c <__submore+0x44>
    acb8:	000003ff 	.word	0x000003ff
    acbc:	000003fe 	.word	0x000003fe
    acc0:	000003fd 	.word	0x000003fd

0000acc4 <_ungetc_r>:
    acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acc6:	0005      	movs	r5, r0
    acc8:	000e      	movs	r6, r1
    acca:	0014      	movs	r4, r2
    accc:	1c4b      	adds	r3, r1, #1
    acce:	d103      	bne.n	acd8 <_ungetc_r+0x14>
    acd0:	2601      	movs	r6, #1
    acd2:	4276      	negs	r6, r6
    acd4:	0030      	movs	r0, r6
    acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acd8:	2800      	cmp	r0, #0
    acda:	d004      	beq.n	ace6 <_ungetc_r+0x22>
    acdc:	6983      	ldr	r3, [r0, #24]
    acde:	2b00      	cmp	r3, #0
    ace0:	d101      	bne.n	ace6 <_ungetc_r+0x22>
    ace2:	f7fe fe1d 	bl	9920 <__sinit>
    ace6:	4b2d      	ldr	r3, [pc, #180]	; (ad9c <_ungetc_r+0xd8>)
    ace8:	429c      	cmp	r4, r3
    acea:	d12d      	bne.n	ad48 <_ungetc_r+0x84>
    acec:	686c      	ldr	r4, [r5, #4]
    acee:	2220      	movs	r2, #32
    acf0:	89a3      	ldrh	r3, [r4, #12]
    acf2:	4393      	bics	r3, r2
    acf4:	b21b      	sxth	r3, r3
    acf6:	81a3      	strh	r3, [r4, #12]
    acf8:	b29b      	uxth	r3, r3
    acfa:	075a      	lsls	r2, r3, #29
    acfc:	d413      	bmi.n	ad26 <_ungetc_r+0x62>
    acfe:	06da      	lsls	r2, r3, #27
    ad00:	d5e6      	bpl.n	acd0 <_ungetc_r+0xc>
    ad02:	2708      	movs	r7, #8
    ad04:	423b      	tst	r3, r7
    ad06:	d00a      	beq.n	ad1e <_ungetc_r+0x5a>
    ad08:	0021      	movs	r1, r4
    ad0a:	0028      	movs	r0, r5
    ad0c:	f7fe fd86 	bl	981c <_fflush_r>
    ad10:	2800      	cmp	r0, #0
    ad12:	d1dd      	bne.n	acd0 <_ungetc_r+0xc>
    ad14:	89a3      	ldrh	r3, [r4, #12]
    ad16:	60a0      	str	r0, [r4, #8]
    ad18:	43bb      	bics	r3, r7
    ad1a:	81a3      	strh	r3, [r4, #12]
    ad1c:	61a0      	str	r0, [r4, #24]
    ad1e:	2304      	movs	r3, #4
    ad20:	89a2      	ldrh	r2, [r4, #12]
    ad22:	4313      	orrs	r3, r2
    ad24:	81a3      	strh	r3, [r4, #12]
    ad26:	6b62      	ldr	r2, [r4, #52]	; 0x34
    ad28:	b2f7      	uxtb	r7, r6
    ad2a:	6863      	ldr	r3, [r4, #4]
    ad2c:	b2f6      	uxtb	r6, r6
    ad2e:	2a00      	cmp	r2, #0
    ad30:	d01b      	beq.n	ad6a <_ungetc_r+0xa6>
    ad32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ad34:	4293      	cmp	r3, r2
    ad36:	da11      	bge.n	ad5c <_ungetc_r+0x98>
    ad38:	6823      	ldr	r3, [r4, #0]
    ad3a:	3b01      	subs	r3, #1
    ad3c:	6023      	str	r3, [r4, #0]
    ad3e:	701f      	strb	r7, [r3, #0]
    ad40:	6863      	ldr	r3, [r4, #4]
    ad42:	3301      	adds	r3, #1
    ad44:	6063      	str	r3, [r4, #4]
    ad46:	e7c5      	b.n	acd4 <_ungetc_r+0x10>
    ad48:	4b15      	ldr	r3, [pc, #84]	; (ada0 <_ungetc_r+0xdc>)
    ad4a:	429c      	cmp	r4, r3
    ad4c:	d101      	bne.n	ad52 <_ungetc_r+0x8e>
    ad4e:	68ac      	ldr	r4, [r5, #8]
    ad50:	e7cd      	b.n	acee <_ungetc_r+0x2a>
    ad52:	4b14      	ldr	r3, [pc, #80]	; (ada4 <_ungetc_r+0xe0>)
    ad54:	429c      	cmp	r4, r3
    ad56:	d1ca      	bne.n	acee <_ungetc_r+0x2a>
    ad58:	68ec      	ldr	r4, [r5, #12]
    ad5a:	e7c8      	b.n	acee <_ungetc_r+0x2a>
    ad5c:	0021      	movs	r1, r4
    ad5e:	0028      	movs	r0, r5
    ad60:	f7ff ff72 	bl	ac48 <__submore>
    ad64:	2800      	cmp	r0, #0
    ad66:	d0e7      	beq.n	ad38 <_ungetc_r+0x74>
    ad68:	e7b2      	b.n	acd0 <_ungetc_r+0xc>
    ad6a:	6921      	ldr	r1, [r4, #16]
    ad6c:	6822      	ldr	r2, [r4, #0]
    ad6e:	2900      	cmp	r1, #0
    ad70:	d007      	beq.n	ad82 <_ungetc_r+0xbe>
    ad72:	4291      	cmp	r1, r2
    ad74:	d205      	bcs.n	ad82 <_ungetc_r+0xbe>
    ad76:	1e51      	subs	r1, r2, #1
    ad78:	7808      	ldrb	r0, [r1, #0]
    ad7a:	4286      	cmp	r6, r0
    ad7c:	d101      	bne.n	ad82 <_ungetc_r+0xbe>
    ad7e:	6021      	str	r1, [r4, #0]
    ad80:	e7df      	b.n	ad42 <_ungetc_r+0x7e>
    ad82:	6423      	str	r3, [r4, #64]	; 0x40
    ad84:	0023      	movs	r3, r4
    ad86:	3344      	adds	r3, #68	; 0x44
    ad88:	6363      	str	r3, [r4, #52]	; 0x34
    ad8a:	2303      	movs	r3, #3
    ad8c:	63a3      	str	r3, [r4, #56]	; 0x38
    ad8e:	0023      	movs	r3, r4
    ad90:	3346      	adds	r3, #70	; 0x46
    ad92:	63e2      	str	r2, [r4, #60]	; 0x3c
    ad94:	701f      	strb	r7, [r3, #0]
    ad96:	6023      	str	r3, [r4, #0]
    ad98:	2301      	movs	r3, #1
    ad9a:	e7d3      	b.n	ad44 <_ungetc_r+0x80>
    ad9c:	0000b6e8 	.word	0x0000b6e8
    ada0:	0000b708 	.word	0x0000b708
    ada4:	0000b6c8 	.word	0x0000b6c8

0000ada8 <__ascii_wctomb>:
    ada8:	1e0b      	subs	r3, r1, #0
    adaa:	d004      	beq.n	adb6 <__ascii_wctomb+0xe>
    adac:	2aff      	cmp	r2, #255	; 0xff
    adae:	d904      	bls.n	adba <__ascii_wctomb+0x12>
    adb0:	238a      	movs	r3, #138	; 0x8a
    adb2:	6003      	str	r3, [r0, #0]
    adb4:	3b8b      	subs	r3, #139	; 0x8b
    adb6:	0018      	movs	r0, r3
    adb8:	4770      	bx	lr
    adba:	700a      	strb	r2, [r1, #0]
    adbc:	2301      	movs	r3, #1
    adbe:	e7fa      	b.n	adb6 <__ascii_wctomb+0xe>

0000adc0 <_write_r>:
    adc0:	b570      	push	{r4, r5, r6, lr}
    adc2:	0005      	movs	r5, r0
    adc4:	0008      	movs	r0, r1
    adc6:	0011      	movs	r1, r2
    adc8:	2200      	movs	r2, #0
    adca:	4c06      	ldr	r4, [pc, #24]	; (ade4 <_write_r+0x24>)
    adcc:	6022      	str	r2, [r4, #0]
    adce:	001a      	movs	r2, r3
    add0:	f7fb fdda 	bl	6988 <_write>
    add4:	1c43      	adds	r3, r0, #1
    add6:	d103      	bne.n	ade0 <_write_r+0x20>
    add8:	6823      	ldr	r3, [r4, #0]
    adda:	2b00      	cmp	r3, #0
    addc:	d000      	beq.n	ade0 <_write_r+0x20>
    adde:	602b      	str	r3, [r5, #0]
    ade0:	bd70      	pop	{r4, r5, r6, pc}
    ade2:	46c0      	nop			; (mov r8, r8)
    ade4:	20000474 	.word	0x20000474

0000ade8 <_close_r>:
    ade8:	2300      	movs	r3, #0
    adea:	b570      	push	{r4, r5, r6, lr}
    adec:	4c06      	ldr	r4, [pc, #24]	; (ae08 <_close_r+0x20>)
    adee:	0005      	movs	r5, r0
    adf0:	0008      	movs	r0, r1
    adf2:	6023      	str	r3, [r4, #0]
    adf4:	f7fb fe1c 	bl	6a30 <_close>
    adf8:	1c43      	adds	r3, r0, #1
    adfa:	d103      	bne.n	ae04 <_close_r+0x1c>
    adfc:	6823      	ldr	r3, [r4, #0]
    adfe:	2b00      	cmp	r3, #0
    ae00:	d000      	beq.n	ae04 <_close_r+0x1c>
    ae02:	602b      	str	r3, [r5, #0]
    ae04:	bd70      	pop	{r4, r5, r6, pc}
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	20000474 	.word	0x20000474

0000ae0c <_fstat_r>:
    ae0c:	2300      	movs	r3, #0
    ae0e:	b570      	push	{r4, r5, r6, lr}
    ae10:	4c06      	ldr	r4, [pc, #24]	; (ae2c <_fstat_r+0x20>)
    ae12:	0005      	movs	r5, r0
    ae14:	0008      	movs	r0, r1
    ae16:	0011      	movs	r1, r2
    ae18:	6023      	str	r3, [r4, #0]
    ae1a:	f7fb fe13 	bl	6a44 <_fstat>
    ae1e:	1c43      	adds	r3, r0, #1
    ae20:	d103      	bne.n	ae2a <_fstat_r+0x1e>
    ae22:	6823      	ldr	r3, [r4, #0]
    ae24:	2b00      	cmp	r3, #0
    ae26:	d000      	beq.n	ae2a <_fstat_r+0x1e>
    ae28:	602b      	str	r3, [r5, #0]
    ae2a:	bd70      	pop	{r4, r5, r6, pc}
    ae2c:	20000474 	.word	0x20000474

0000ae30 <_isatty_r>:
    ae30:	2300      	movs	r3, #0
    ae32:	b570      	push	{r4, r5, r6, lr}
    ae34:	4c06      	ldr	r4, [pc, #24]	; (ae50 <_isatty_r+0x20>)
    ae36:	0005      	movs	r5, r0
    ae38:	0008      	movs	r0, r1
    ae3a:	6023      	str	r3, [r4, #0]
    ae3c:	f7fb fe10 	bl	6a60 <_isatty>
    ae40:	1c43      	adds	r3, r0, #1
    ae42:	d103      	bne.n	ae4c <_isatty_r+0x1c>
    ae44:	6823      	ldr	r3, [r4, #0]
    ae46:	2b00      	cmp	r3, #0
    ae48:	d000      	beq.n	ae4c <_isatty_r+0x1c>
    ae4a:	602b      	str	r3, [r5, #0]
    ae4c:	bd70      	pop	{r4, r5, r6, pc}
    ae4e:	46c0      	nop			; (mov r8, r8)
    ae50:	20000474 	.word	0x20000474

0000ae54 <_lseek_r>:
    ae54:	b570      	push	{r4, r5, r6, lr}
    ae56:	0005      	movs	r5, r0
    ae58:	0008      	movs	r0, r1
    ae5a:	0011      	movs	r1, r2
    ae5c:	2200      	movs	r2, #0
    ae5e:	4c06      	ldr	r4, [pc, #24]	; (ae78 <_lseek_r+0x24>)
    ae60:	6022      	str	r2, [r4, #0]
    ae62:	001a      	movs	r2, r3
    ae64:	f7fb fe05 	bl	6a72 <_lseek>
    ae68:	1c43      	adds	r3, r0, #1
    ae6a:	d103      	bne.n	ae74 <_lseek_r+0x20>
    ae6c:	6823      	ldr	r3, [r4, #0]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d000      	beq.n	ae74 <_lseek_r+0x20>
    ae72:	602b      	str	r3, [r5, #0]
    ae74:	bd70      	pop	{r4, r5, r6, pc}
    ae76:	46c0      	nop			; (mov r8, r8)
    ae78:	20000474 	.word	0x20000474

0000ae7c <memchr>:
    ae7c:	b2c9      	uxtb	r1, r1
    ae7e:	1882      	adds	r2, r0, r2
    ae80:	4290      	cmp	r0, r2
    ae82:	d101      	bne.n	ae88 <memchr+0xc>
    ae84:	2000      	movs	r0, #0
    ae86:	4770      	bx	lr
    ae88:	7803      	ldrb	r3, [r0, #0]
    ae8a:	428b      	cmp	r3, r1
    ae8c:	d0fb      	beq.n	ae86 <memchr+0xa>
    ae8e:	3001      	adds	r0, #1
    ae90:	e7f6      	b.n	ae80 <memchr+0x4>

0000ae92 <__malloc_lock>:
    ae92:	4770      	bx	lr

0000ae94 <__malloc_unlock>:
    ae94:	4770      	bx	lr

0000ae96 <_realloc_r>:
    ae96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae98:	0007      	movs	r7, r0
    ae9a:	000d      	movs	r5, r1
    ae9c:	0016      	movs	r6, r2
    ae9e:	2900      	cmp	r1, #0
    aea0:	d105      	bne.n	aeae <_realloc_r+0x18>
    aea2:	0011      	movs	r1, r2
    aea4:	f7fe fed0 	bl	9c48 <_malloc_r>
    aea8:	0004      	movs	r4, r0
    aeaa:	0020      	movs	r0, r4
    aeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aeae:	2a00      	cmp	r2, #0
    aeb0:	d103      	bne.n	aeba <_realloc_r+0x24>
    aeb2:	f7fe fe7f 	bl	9bb4 <_free_r>
    aeb6:	0034      	movs	r4, r6
    aeb8:	e7f7      	b.n	aeaa <_realloc_r+0x14>
    aeba:	f000 f827 	bl	af0c <_malloc_usable_size_r>
    aebe:	002c      	movs	r4, r5
    aec0:	4286      	cmp	r6, r0
    aec2:	d9f2      	bls.n	aeaa <_realloc_r+0x14>
    aec4:	0031      	movs	r1, r6
    aec6:	0038      	movs	r0, r7
    aec8:	f7fe febe 	bl	9c48 <_malloc_r>
    aecc:	1e04      	subs	r4, r0, #0
    aece:	d0ec      	beq.n	aeaa <_realloc_r+0x14>
    aed0:	0029      	movs	r1, r5
    aed2:	0032      	movs	r2, r6
    aed4:	f7fe f8dc 	bl	9090 <memcpy>
    aed8:	0029      	movs	r1, r5
    aeda:	0038      	movs	r0, r7
    aedc:	f7fe fe6a 	bl	9bb4 <_free_r>
    aee0:	e7e3      	b.n	aeaa <_realloc_r+0x14>
	...

0000aee4 <_read_r>:
    aee4:	b570      	push	{r4, r5, r6, lr}
    aee6:	0005      	movs	r5, r0
    aee8:	0008      	movs	r0, r1
    aeea:	0011      	movs	r1, r2
    aeec:	2200      	movs	r2, #0
    aeee:	4c06      	ldr	r4, [pc, #24]	; (af08 <_read_r+0x24>)
    aef0:	6022      	str	r2, [r4, #0]
    aef2:	001a      	movs	r2, r3
    aef4:	f7fb fd1e 	bl	6934 <_read>
    aef8:	1c43      	adds	r3, r0, #1
    aefa:	d103      	bne.n	af04 <_read_r+0x20>
    aefc:	6823      	ldr	r3, [r4, #0]
    aefe:	2b00      	cmp	r3, #0
    af00:	d000      	beq.n	af04 <_read_r+0x20>
    af02:	602b      	str	r3, [r5, #0]
    af04:	bd70      	pop	{r4, r5, r6, pc}
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	20000474 	.word	0x20000474

0000af0c <_malloc_usable_size_r>:
    af0c:	1f0b      	subs	r3, r1, #4
    af0e:	681b      	ldr	r3, [r3, #0]
    af10:	1f18      	subs	r0, r3, #4
    af12:	2b00      	cmp	r3, #0
    af14:	da01      	bge.n	af1a <_malloc_usable_size_r+0xe>
    af16:	580b      	ldr	r3, [r1, r0]
    af18:	18c0      	adds	r0, r0, r3
    af1a:	4770      	bx	lr
    af1c:	00000002 	.word	0x00000002
    af20:	00000003 	.word	0x00000003
    af24:	00000028 	.word	0x00000028
    af28:	00000029 	.word	0x00000029
    af2c:	00000004 	.word	0x00000004
    af30:	00000005 	.word	0x00000005
    af34:	00000006 	.word	0x00000006
    af38:	00000007 	.word	0x00000007
    af3c:	0000ffff 	.word	0x0000ffff
    af40:	0000ffff 	.word	0x0000ffff
    af44:	00000022 	.word	0x00000022
    af48:	00000023 	.word	0x00000023
    af4c:	0000ffff 	.word	0x0000ffff
    af50:	0000ffff 	.word	0x0000ffff
    af54:	0000ffff 	.word	0x0000ffff
    af58:	0000ffff 	.word	0x0000ffff
    af5c:	00000008 	.word	0x00000008
    af60:	00000009 	.word	0x00000009
    af64:	0000000a 	.word	0x0000000a
    af68:	0000000b 	.word	0x0000000b
    af6c:	0000095a 	.word	0x0000095a
    af70:	00000960 	.word	0x00000960
    af74:	00000960 	.word	0x00000960
    af78:	00000960 	.word	0x00000960
    af7c:	00000960 	.word	0x00000960
    af80:	00000960 	.word	0x00000960
    af84:	00000960 	.word	0x00000960
    af88:	00000960 	.word	0x00000960
    af8c:	00000960 	.word	0x00000960
    af90:	00000960 	.word	0x00000960
    af94:	00000960 	.word	0x00000960
    af98:	00000960 	.word	0x00000960
    af9c:	00000960 	.word	0x00000960
    afa0:	00000960 	.word	0x00000960
    afa4:	00000960 	.word	0x00000960
    afa8:	00000960 	.word	0x00000960
    afac:	00000938 	.word	0x00000938
    afb0:	00000960 	.word	0x00000960
    afb4:	00000960 	.word	0x00000960
    afb8:	00000960 	.word	0x00000960
    afbc:	00000960 	.word	0x00000960
    afc0:	00000960 	.word	0x00000960
    afc4:	00000960 	.word	0x00000960
    afc8:	00000960 	.word	0x00000960
    afcc:	00000960 	.word	0x00000960
    afd0:	00000960 	.word	0x00000960
    afd4:	00000960 	.word	0x00000960
    afd8:	00000960 	.word	0x00000960
    afdc:	00000960 	.word	0x00000960
    afe0:	00000960 	.word	0x00000960
    afe4:	00000960 	.word	0x00000960
    afe8:	00000960 	.word	0x00000960
    afec:	00000954 	.word	0x00000954
    aff0:	00000960 	.word	0x00000960
    aff4:	00000960 	.word	0x00000960
    aff8:	00000960 	.word	0x00000960
    affc:	00000960 	.word	0x00000960
    b000:	00000960 	.word	0x00000960
    b004:	00000960 	.word	0x00000960
    b008:	00000960 	.word	0x00000960
    b00c:	00000960 	.word	0x00000960
    b010:	00000960 	.word	0x00000960
    b014:	00000960 	.word	0x00000960
    b018:	00000960 	.word	0x00000960
    b01c:	00000960 	.word	0x00000960
    b020:	00000960 	.word	0x00000960
    b024:	00000960 	.word	0x00000960
    b028:	00000960 	.word	0x00000960
    b02c:	0000094e 	.word	0x0000094e
    b030:	000008f6 	.word	0x000008f6
    b034:	0000090c 	.word	0x0000090c
    b038:	00000922 	.word	0x00000922
    b03c:	000008dc 	.word	0x000008dc
    b040:	706c6568 	.word	0x706c6568
    b044:	00000000 	.word	0x00000000
    b048:	5f726576 	.word	0x5f726576
    b04c:	00006c62 	.word	0x00006c62
    b050:	5f726576 	.word	0x5f726576
    b054:	00707061 	.word	0x00707061
    b058:	6f697067 	.word	0x6f697067
    b05c:	7465735f 	.word	0x7465735f
    b060:	00000000 	.word	0x00000000
    b064:	6f697067 	.word	0x6f697067
    b068:	656c635f 	.word	0x656c635f
    b06c:	00007261 	.word	0x00007261
    b070:	6f697067 	.word	0x6f697067
    b074:	7465675f 	.word	0x7465675f
    b078:	00000000 	.word	0x00000000
    b07c:	0063616d 	.word	0x0063616d
    b080:	00007069 	.word	0x00007069
    b084:	64616572 	.word	0x64616572
    b088:	7279675f 	.word	0x7279675f
    b08c:	0000006f 	.word	0x0000006f
    b090:	64616572 	.word	0x64616572
    b094:	6363615f 	.word	0x6363615f
    b098:	00006c65 	.word	0x00006c65
    b09c:	5f746573 	.word	0x5f746573
    b0a0:	00746361 	.word	0x00746361
    b0a4:	61656c63 	.word	0x61656c63
    b0a8:	63615f72 	.word	0x63615f72
    b0ac:	00000074 	.word	0x00000074
    b0b0:	5f636461 	.word	0x5f636461
    b0b4:	00746567 	.word	0x00746567
    b0b8:	5f75636d 	.word	0x5f75636d
    b0bc:	706d6574 	.word	0x706d6574
    b0c0:	00000000 	.word	0x00000000
    b0c4:	5f633269 	.word	0x5f633269
    b0c8:	6e616373 	.word	0x6e616373
	...
    b0d4:	70736944 	.word	0x70736944
    b0d8:	2079616c 	.word	0x2079616c
    b0dc:	206c6c61 	.word	0x206c6c61
    b0e0:	6d6d6f63 	.word	0x6d6d6f63
    b0e4:	73646e61 	.word	0x73646e61
    b0e8:	00000000 	.word	0x00000000
    b0ec:	6e697250 	.word	0x6e697250
    b0f0:	6f622074 	.word	0x6f622074
    b0f4:	6f6c746f 	.word	0x6f6c746f
    b0f8:	72656461 	.word	0x72656461
    b0fc:	72696620 	.word	0x72696620
    b100:	7261776d 	.word	0x7261776d
    b104:	6e692065 	.word	0x6e692065
    b108:	6d726f66 	.word	0x6d726f66
    b10c:	6f697461 	.word	0x6f697461
    b110:	00002e6e 	.word	0x00002e6e
    b114:	6e697250 	.word	0x6e697250
    b118:	70612074 	.word	0x70612074
    b11c:	63696c70 	.word	0x63696c70
    b120:	6f697461 	.word	0x6f697461
    b124:	6576206e 	.word	0x6576206e
    b128:	6f697372 	.word	0x6f697372
    b12c:	6e69206e 	.word	0x6e69206e
    b130:	6d726f66 	.word	0x6d726f66
    b134:	6f697461 	.word	0x6f697461
    b138:	00002e6e 	.word	0x00002e6e
    b13c:	726f705b 	.word	0x726f705b
    b140:	5b205d74 	.word	0x5b205d74
    b144:	5f6e6970 	.word	0x5f6e6970
    b148:	5d6d756e 	.word	0x5d6d756e
    b14c:	00000000 	.word	0x00000000
    b150:	20746553 	.word	0x20746553
    b154:	4f495047 	.word	0x4f495047
    b158:	6e697020 	.word	0x6e697020
    b15c:	20746120 	.word	0x20746120
    b160:	69672061 	.word	0x69672061
    b164:	206e6576 	.word	0x206e6576
    b168:	74726f70 	.word	0x74726f70
    b16c:	67696820 	.word	0x67696820
    b170:	00002e68 	.word	0x00002e68
    b174:	20746553 	.word	0x20746553
    b178:	4f495047 	.word	0x4f495047
    b17c:	6e697020 	.word	0x6e697020
    b180:	20746120 	.word	0x20746120
    b184:	69672061 	.word	0x69672061
    b188:	206e6576 	.word	0x206e6576
    b18c:	74726f70 	.word	0x74726f70
    b190:	776f6c20 	.word	0x776f6c20
    b194:	0000002e 	.word	0x0000002e
    b198:	20746547 	.word	0x20746547
    b19c:	74617473 	.word	0x74617473
    b1a0:	666f2065 	.word	0x666f2065
    b1a4:	47206120 	.word	0x47206120
    b1a8:	204f4950 	.word	0x204f4950
    b1ac:	2e6e6970 	.word	0x2e6e6970
    b1b0:	746e4528 	.word	0x746e4528
    b1b4:	42207265 	.word	0x42207265
    b1b8:	6f203220 	.word	0x6f203220
    b1bc:	20422072 	.word	0x20422072
    b1c0:	00002933 	.word	0x00002933
    b1c4:	6e697250 	.word	0x6e697250
    b1c8:	68742074 	.word	0x68742074
    b1cc:	414d2065 	.word	0x414d2065
    b1d0:	64612043 	.word	0x64612043
    b1d4:	73657264 	.word	0x73657264
    b1d8:	00002e73 	.word	0x00002e73
    b1dc:	6e697250 	.word	0x6e697250
    b1e0:	68742074 	.word	0x68742074
    b1e4:	50492065 	.word	0x50492065
    b1e8:	64644120 	.word	0x64644120
    b1ec:	73736572 	.word	0x73736572
    b1f0:	0000002e 	.word	0x0000002e
    b1f4:	6165725b 	.word	0x6165725b
    b1f8:	676e6964 	.word	0x676e6964
    b1fc:	756f6320 	.word	0x756f6320
    b200:	205d746e 	.word	0x205d746e
    b204:	746e695b 	.word	0x746e695b
    b208:	61767265 	.word	0x61767265
    b20c:	6e69206c 	.word	0x6e69206c
    b210:	5d736d20 	.word	0x5d736d20
    b214:	00000000 	.word	0x00000000
    b218:	64616552 	.word	0x64616552
    b21c:	6f726620 	.word	0x6f726620
    b220:	6874206d 	.word	0x6874206d
    b224:	79472065 	.word	0x79472065
    b228:	63736f72 	.word	0x63736f72
    b22c:	2065706f 	.word	0x2065706f
    b230:	736e6573 	.word	0x736e6573
    b234:	002e726f 	.word	0x002e726f
    b238:	6e727554 	.word	0x6e727554
    b23c:	65687420 	.word	0x65687420
    b240:	74636120 	.word	0x74636120
    b244:	6f746175 	.word	0x6f746175
    b248:	4c282072 	.word	0x4c282072
    b24c:	20294445 	.word	0x20294445
    b250:	002e6e6f 	.word	0x002e6e6f
    b254:	6e727554 	.word	0x6e727554
    b258:	65687420 	.word	0x65687420
    b25c:	74636120 	.word	0x74636120
    b260:	6f746175 	.word	0x6f746175
    b264:	4c282072 	.word	0x4c282072
    b268:	20294445 	.word	0x20294445
    b26c:	2e66666f 	.word	0x2e66666f
    b270:	00000000 	.word	0x00000000
    b274:	20746547 	.word	0x20746547
    b278:	20656874 	.word	0x20656874
    b27c:	20434441 	.word	0x20434441
    b280:	756c6176 	.word	0x756c6176
    b284:	666f2065 	.word	0x666f2065
    b288:	206e6120 	.word	0x206e6120
    b28c:	75706e69 	.word	0x75706e69
    b290:	69702074 	.word	0x69702074
    b294:	00002e6e 	.word	0x00002e6e
    b298:	6e697250 	.word	0x6e697250
    b29c:	68742074 	.word	0x68742074
    b2a0:	65742065 	.word	0x65742065
    b2a4:	7265706d 	.word	0x7265706d
    b2a8:	72757461 	.word	0x72757461
    b2ac:	65722065 	.word	0x65722065
    b2b0:	6e696461 	.word	0x6e696461
    b2b4:	666f2067 	.word	0x666f2067
    b2b8:	65687420 	.word	0x65687420
    b2bc:	2d6e6f20 	.word	0x2d6e6f20
    b2c0:	72616f62 	.word	0x72616f62
    b2c4:	434d2064 	.word	0x434d2064
    b2c8:	65742055 	.word	0x65742055
    b2cc:	7265706d 	.word	0x7265706d
    b2d0:	72757461 	.word	0x72757461
    b2d4:	65732065 	.word	0x65732065
    b2d8:	726f736e 	.word	0x726f736e
    b2dc:	0000002e 	.word	0x0000002e
    b2e0:	00000020 	.word	0x00000020
    b2e4:	20746f4e 	.word	0x20746f4e
    b2e8:	756f6e65 	.word	0x756f6e65
    b2ec:	61206867 	.word	0x61206867
    b2f0:	6d756772 	.word	0x6d756772
    b2f4:	73746e65 	.word	0x73746e65
    b2f8:	72542021 	.word	0x72542021
    b2fc:	68222079 	.word	0x68222079
    b300:	22706c65 	.word	0x22706c65
    b304:	00000d2e 	.word	0x00000d2e
    b308:	00000041 	.word	0x00000041
    b30c:	00000042 	.word	0x00000042
    b310:	65746e45 	.word	0x65746e45
    b314:	20612072 	.word	0x20612072
    b318:	696c6176 	.word	0x696c6176
    b31c:	6f502064 	.word	0x6f502064
    b320:	20217472 	.word	0x20217472
    b324:	20797254 	.word	0x20797254
    b328:	6c656822 	.word	0x6c656822
    b32c:	0d2e2270 	.word	0x0d2e2270
    b330:	00000000 	.word	0x00000000
    b334:	65746e45 	.word	0x65746e45
    b338:	20612072 	.word	0x20612072
    b33c:	696c6176 	.word	0x696c6176
    b340:	69502064 	.word	0x69502064
    b344:	754e206e 	.word	0x754e206e
    b348:	7265626d 	.word	0x7265626d
    b34c:	72542021 	.word	0x72542021
    b350:	68222079 	.word	0x68222079
    b354:	22706c65 	.word	0x22706c65
    b358:	00000d2e 	.word	0x00000d2e
    b35c:	61766e49 	.word	0x61766e49
    b360:	2064696c 	.word	0x2064696c
    b364:	6d6d6f63 	.word	0x6d6d6f63
    b368:	21646e61 	.word	0x21646e61
    b36c:	70795420 	.word	0x70795420
    b370:	68222065 	.word	0x68222065
    b374:	22706c65 	.word	0x22706c65
    b378:	726f6620 	.word	0x726f6620
    b37c:	6c206120 	.word	0x6c206120
    b380:	20747369 	.word	0x20747369
    b384:	6120666f 	.word	0x6120666f
    b388:	6c696176 	.word	0x6c696176
    b38c:	656c6261 	.word	0x656c6261
    b390:	6d6f6320 	.word	0x6d6f6320
    b394:	646e616d 	.word	0x646e616d
    b398:	000d2e73 	.word	0x000d2e73
    b39c:	6d6d6f43 	.word	0x6d6d6f43
    b3a0:	20646e61 	.word	0x20646e61
    b3a4:	7473694c 	.word	0x7473694c
    b3a8:	00000d3a 	.word	0x00000d3a
    b3ac:	20732509 	.word	0x20732509
    b3b0:	0a0d7325 	.word	0x0a0d7325
    b3b4:	73250909 	.word	0x73250909
    b3b8:	00000a0d 	.word	0x00000a0d
    b3bc:	2e312e30 	.word	0x2e312e30
    b3c0:	00000030 	.word	0x00000030
    b3c4:	746f6f42 	.word	0x746f6f42
    b3c8:	64616f6c 	.word	0x64616f6c
    b3cc:	56207265 	.word	0x56207265
    b3d0:	69737265 	.word	0x69737265
    b3d4:	203a6e6f 	.word	0x203a6e6f
    b3d8:	0a0d7325 	.word	0x0a0d7325
    b3dc:	00000000 	.word	0x00000000
    b3e0:	6c707041 	.word	0x6c707041
    b3e4:	74616369 	.word	0x74616369
    b3e8:	206e6f69 	.word	0x206e6f69
    b3ec:	73726556 	.word	0x73726556
    b3f0:	3a6e6f69 	.word	0x3a6e6f69
    b3f4:	0d732520 	.word	0x0d732520
    b3f8:	0000000a 	.word	0x0000000a
    b3fc:	20656854 	.word	0x20656854
    b400:	6576656c 	.word	0x6576656c
    b404:	6573206c 	.word	0x6573206c
    b408:	73692074 	.word	0x73692074
    b40c:	0d642520 	.word	0x0d642520
    b410:	0000000a 	.word	0x0000000a
    b414:	323a3130 	.word	0x323a3130
    b418:	35343a33 	.word	0x35343a33
    b41c:	3a37363a 	.word	0x3a37363a
    b420:	613a3938 	.word	0x613a3938
    b424:	00000062 	.word	0x00000062
    b428:	2043414d 	.word	0x2043414d
    b42c:	72646441 	.word	0x72646441
    b430:	3a737365 	.word	0x3a737365
    b434:	0d732520 	.word	0x0d732520
    b438:	0000000a 	.word	0x0000000a
    b43c:	2e353532 	.word	0x2e353532
    b440:	2e353532 	.word	0x2e353532
    b444:	2e353532 	.word	0x2e353532
    b448:	00353532 	.word	0x00353532
    b44c:	41205049 	.word	0x41205049
    b450:	65726464 	.word	0x65726464
    b454:	203a7373 	.word	0x203a7373
    b458:	0a0d7325 	.word	0x0a0d7325
    b45c:	00000000 	.word	0x00000000
    b460:	523d3d3d 	.word	0x523d3d3d
    b464:	69646165 	.word	0x69646165
    b468:	2520676e 	.word	0x2520676e
    b46c:	3d3d3d64 	.word	0x3d3d3d64
    b470:	00000a0d 	.word	0x00000a0d
    b474:	3d207841 	.word	0x3d207841
    b478:	0d642520 	.word	0x0d642520
    b47c:	2079410a 	.word	0x2079410a
    b480:	6425203d 	.word	0x6425203d
    b484:	7a410a0d 	.word	0x7a410a0d
    b488:	25203d20 	.word	0x25203d20
    b48c:	470a0d64 	.word	0x470a0d64
    b490:	203d2078 	.word	0x203d2078
    b494:	0a0d6425 	.word	0x0a0d6425
    b498:	3d207947 	.word	0x3d207947
    b49c:	0d642520 	.word	0x0d642520
    b4a0:	207a470a 	.word	0x207a470a
    b4a4:	6425203d 	.word	0x6425203d
    b4a8:	00000a0d 	.word	0x00000a0d
    b4ac:	20657355 	.word	0x20657355
    b4b0:	64616572 	.word	0x64616572
    b4b4:	7279675f 	.word	0x7279675f
    b4b8:	000d216f 	.word	0x000d216f
    b4bc:	20434441 	.word	0x20434441
    b4c0:	75736552 	.word	0x75736552
    b4c4:	203a746c 	.word	0x203a746c
    b4c8:	0a0d6425 	.word	0x0a0d6425
    b4cc:	00000000 	.word	0x00000000
    b4d0:	706d6554 	.word	0x706d6554
    b4d4:	74617265 	.word	0x74617265
    b4d8:	20657275 	.word	0x20657275
    b4dc:	75736552 	.word	0x75736552
    b4e0:	203a746c 	.word	0x203a746c
    b4e4:	0d206425 	.word	0x0d206425
    b4e8:	0000000a 	.word	0x0000000a
    b4ec:	72646441 	.word	0x72646441
    b4f0:	20736920 	.word	0x20736920
    b4f4:	0d206425 	.word	0x0d206425
    b4f8:	0000000a 	.word	0x0000000a
    b4fc:	20656854 	.word	0x20656854
    b500:	76616c73 	.word	0x76616c73
    b504:	64612065 	.word	0x64612065
    b508:	73657264 	.word	0x73657264
    b50c:	73692073 	.word	0x73692073
    b510:	322e2520 	.word	0x322e2520
    b514:	0a0d2078 	.word	0x0a0d2078
    b518:	00000000 	.word	0x00000000
    b51c:	42000800 	.word	0x42000800
    b520:	42000c00 	.word	0x42000c00
    b524:	42001000 	.word	0x42001000
    b528:	42001400 	.word	0x42001400
    b52c:	42001800 	.word	0x42001800
    b530:	42001c00 	.word	0x42001c00
    b534:	0c0b0a09 	.word	0x0c0b0a09
    b538:	00000e0d 	.word	0x00000e0d
    b53c:	00005aaa 	.word	0x00005aaa
    b540:	00005b22 	.word	0x00005b22
    b544:	00005b22 	.word	0x00005b22
    b548:	00005ac8 	.word	0x00005ac8
    b54c:	00005ac2 	.word	0x00005ac2
    b550:	00005ace 	.word	0x00005ace
    b554:	00005ab0 	.word	0x00005ab0
    b558:	00005ad4 	.word	0x00005ad4
    b55c:	00005b08 	.word	0x00005b08
    b560:	00005dec 	.word	0x00005dec
    b564:	00005e3c 	.word	0x00005e3c
    b568:	00005e3c 	.word	0x00005e3c
    b56c:	00005e38 	.word	0x00005e38
    b570:	00005dde 	.word	0x00005dde
    b574:	00005dfe 	.word	0x00005dfe
    b578:	00005dce 	.word	0x00005dce
    b57c:	00005e10 	.word	0x00005e10
    b580:	00005e22 	.word	0x00005e22
    b584:	00005e8a 	.word	0x00005e8a
    b588:	00005eb8 	.word	0x00005eb8
    b58c:	00005eb8 	.word	0x00005eb8
    b590:	00005eb4 	.word	0x00005eb4
    b594:	00005e84 	.word	0x00005e84
    b598:	00005e90 	.word	0x00005e90
    b59c:	00005e7e 	.word	0x00005e7e
    b5a0:	00005e96 	.word	0x00005e96
    b5a4:	00005e9c 	.word	0x00005e9c
    b5a8:	57202d2d 	.word	0x57202d2d
    b5ac:	31434e49 	.word	0x31434e49
    b5b0:	20303035 	.word	0x20303035
    b5b4:	70696863 	.word	0x70696863
    b5b8:	666e6920 	.word	0x666e6920
    b5bc:	616d726f 	.word	0x616d726f
    b5c0:	6e6f6974 	.word	0x6e6f6974
    b5c4:	61786520 	.word	0x61786520
    b5c8:	656c706d 	.word	0x656c706d
    b5cc:	0d2d2d20 	.word	0x0d2d2d20
    b5d0:	202d2d0a 	.word	0x202d2d0a
    b5d4:	574d4153 	.word	0x574d4153
    b5d8:	585f3532 	.word	0x585f3532
    b5dc:	49414c50 	.word	0x49414c50
    b5e0:	5f44454e 	.word	0x5f44454e
    b5e4:	204f5250 	.word	0x204f5250
    b5e8:	0a0d2d2d 	.word	0x0a0d2d2d
    b5ec:	43202d2d 	.word	0x43202d2d
    b5f0:	69706d6f 	.word	0x69706d6f
    b5f4:	3a64656c 	.word	0x3a64656c
    b5f8:	72704120 	.word	0x72704120
    b5fc:	20333120 	.word	0x20333120
    b600:	38313032 	.word	0x38313032
    b604:	3a353120 	.word	0x3a353120
    b608:	313a3132 	.word	0x313a3132
    b60c:	2d2d2034 	.word	0x2d2d2034
    b610:	0000000d 	.word	0x0000000d
    b614:	203d3d3d 	.word	0x203d3d3d
    b618:	6e6f7244 	.word	0x6e6f7244
    b61c:	44414465 	.word	0x44414465
    b620:	494c4320 	.word	0x494c4320
    b624:	746e4920 	.word	0x746e4920
    b628:	61667265 	.word	0x61667265
    b62c:	3d206563 	.word	0x3d206563
    b630:	000d3d3d 	.word	0x000d3d3d
    b634:	0000203e 	.word	0x0000203e
    b638:	0d5e5b25 	.word	0x0d5e5b25
    b63c:	2a255d0a 	.word	0x2a255d0a
    b640:	00000063 	.word	0x00000063
    b644:	00007f8c 	.word	0x00007f8c
    b648:	00007f6e 	.word	0x00007f6e
    b64c:	00007f28 	.word	0x00007f28
    b650:	00007e46 	.word	0x00007e46
    b654:	00007f28 	.word	0x00007f28
    b658:	00007f60 	.word	0x00007f60
    b65c:	00007f28 	.word	0x00007f28
    b660:	00007e46 	.word	0x00007e46
    b664:	00007f6e 	.word	0x00007f6e
    b668:	00007f6e 	.word	0x00007f6e
    b66c:	00007f60 	.word	0x00007f60
    b670:	00007e46 	.word	0x00007e46
    b674:	00007e3e 	.word	0x00007e3e
    b678:	00007e3e 	.word	0x00007e3e
    b67c:	00007e3e 	.word	0x00007e3e
    b680:	000081a4 	.word	0x000081a4
    b684:	000085ec 	.word	0x000085ec
    b688:	000084ac 	.word	0x000084ac
    b68c:	000084ac 	.word	0x000084ac
    b690:	000084a8 	.word	0x000084a8
    b694:	000085c4 	.word	0x000085c4
    b698:	000085c4 	.word	0x000085c4
    b69c:	000085b6 	.word	0x000085b6
    b6a0:	000084a8 	.word	0x000084a8
    b6a4:	000085c4 	.word	0x000085c4
    b6a8:	000085b6 	.word	0x000085b6
    b6ac:	000085c4 	.word	0x000085c4
    b6b0:	000084a8 	.word	0x000084a8
    b6b4:	000085cc 	.word	0x000085cc
    b6b8:	000085cc 	.word	0x000085cc
    b6bc:	000085cc 	.word	0x000085cc
    b6c0:	000087d0 	.word	0x000087d0

0000b6c4 <_global_impure_ptr>:
    b6c4:	2000006c                                l.. 

0000b6c8 <__sf_fake_stderr>:
	...

0000b6e8 <__sf_fake_stdin>:
	...

0000b708 <__sf_fake_stdout>:
	...
    b728:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    b738:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    b748:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    b758:	37363534 62613938 66656463 00000000     456789abcdef....
    b768:	0000b786 0000b789 0000b78c 61462d41     ............A-Fa
    b778:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    b788:	00303000 00005878                                .00.xX.

0000b78f <_ctype_>:
    b78f:	20202000 20202020 28282020 20282828     .         ((((( 
    b79f:	20202020 20202020 20202020 20202020                     
    b7af:	10108820 10101010 10101010 10101010      ...............
    b7bf:	04040410 04040404 10040404 10101010     ................
    b7cf:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b7df:	01010101 01010101 01010101 10101010     ................
    b7ef:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b7ff:	02020202 02020202 02020202 10101010     ................
    b80f:	00000020 00000000 00000000 00000000      ...............
	...

0000b890 <_init>:
    b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b892:	46c0      	nop			; (mov r8, r8)
    b894:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b896:	bc08      	pop	{r3}
    b898:	469e      	mov	lr, r3
    b89a:	4770      	bx	lr

0000b89c <__init_array_start>:
    b89c:	000000dd 	.word	0x000000dd

0000b8a0 <_fini>:
    b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8a2:	46c0      	nop			; (mov r8, r8)
    b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b8a6:	bc08      	pop	{r3}
    b8a8:	469e      	mov	lr, r3
    b8aa:	4770      	bx	lr

0000b8ac <__fini_array_start>:
    b8ac:	000000b5 	.word	0x000000b5
