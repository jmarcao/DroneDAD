
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000044a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  20000068  00004508  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000170  00004610  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028d17  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034fb  00000000  00000000  00048e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002619  00000000  00000000  0004c2fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000760  00000000  00000000  0004e914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  0004f074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000066e2  00000000  00000000  0004f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cbd9  00000000  00000000  00055d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e315  00000000  00000000  0006295f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f74  00000000  00000000  000f0c74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 21 00 20 b1 2a 00 00 a9 2b 00 00 a9 2b 00 00     p!. .*...+...+..
	...
      2c:	a9 2b 00 00 00 00 00 00 00 00 00 00 a9 2b 00 00     .+...........+..
      3c:	a9 2b 00 00 a9 2b 00 00 a9 2b 00 00 a9 2b 00 00     .+...+...+...+..
      4c:	a9 2b 00 00 9d 05 00 00 a9 2b 00 00 a9 2b 00 00     .+.......+...+..
      5c:	a9 2b 00 00 a9 2b 00 00 4d 0f 00 00 65 0f 00 00     .+...+..M...e...
      6c:	7d 0f 00 00 95 0f 00 00 ad 0f 00 00 c5 0f 00 00     }...............
      7c:	a9 2b 00 00 a9 2b 00 00 a9 2b 00 00 a9 2b 00 00     .+...+...+...+..
      8c:	a9 2b 00 00 a9 2b 00 00 00 00 00 00 00 00 00 00     .+...+..........
      9c:	dd 02 00 00 a9 2b 00 00 a9 2b 00 00 a9 2b 00 00     .....+...+...+..
      ac:	a9 2b 00 00 00 00 00 00                             .+......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000044a0 	.word	0x000044a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000044a0 	.word	0x000044a0
     10c:	000044a0 	.word	0x000044a0
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	7e5b      	ldrb	r3, [r3, #25]
     126:	b2db      	uxtb	r3, r3
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	da01      	bge.n	132 <adc_is_syncing+0x1e>
		return true;
     12e:	2301      	movs	r3, #1
     130:	e000      	b.n	134 <adc_is_syncing+0x20>
	}

	return false;
     132:	2300      	movs	r3, #0
}
     134:	0018      	movs	r0, r3
     136:	46bd      	mov	sp, r7
     138:	b004      	add	sp, #16
     13a:	bd80      	pop	{r7, pc}

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7b1b      	ldrb	r3, [r3, #12]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	759a      	strb	r2, [r3, #22]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b44      	ldr	r3, [pc, #272]	; (2cc <_adc_interrupt_handler+0x124>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	7e1b      	ldrb	r3, [r3, #24]
     1c6:	b2db      	uxtb	r3, r3
     1c8:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1ca:	68bb      	ldr	r3, [r7, #8]
     1cc:	2201      	movs	r2, #1
     1ce:	4013      	ands	r3, r2
     1d0:	d045      	beq.n	25e <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	7edb      	ldrb	r3, [r3, #27]
     1d6:	001a      	movs	r2, r3
     1d8:	2301      	movs	r3, #1
     1da:	4013      	ands	r3, r2
     1dc:	d03f      	beq.n	25e <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	7e9b      	ldrb	r3, [r3, #26]
     1e2:	001a      	movs	r2, r3
     1e4:	2301      	movs	r3, #1
     1e6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     1e8:	d039      	beq.n	25e <_adc_interrupt_handler+0xb6>
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	2201      	movs	r2, #1
     1f0:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	0018      	movs	r0, r3
     1f8:	4b35      	ldr	r3, [pc, #212]	; (2d0 <_adc_interrupt_handler+0x128>)
     1fa:	4798      	blx	r3
     1fc:	1e03      	subs	r3, r0, #0
     1fe:	d1f9      	bne.n	1f4 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     200:	68fb      	ldr	r3, [r7, #12]
     202:	695b      	ldr	r3, [r3, #20]
     204:	1c99      	adds	r1, r3, #2
     206:	68fa      	ldr	r2, [r7, #12]
     208:	6151      	str	r1, [r2, #20]
     20a:	68fa      	ldr	r2, [r7, #12]
     20c:	6812      	ldr	r2, [r2, #0]
     20e:	8b52      	ldrh	r2, [r2, #26]
     210:	b292      	uxth	r2, r2
     212:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     214:	68fb      	ldr	r3, [r7, #12]
     216:	8b1b      	ldrh	r3, [r3, #24]
     218:	b29b      	uxth	r3, r3
     21a:	3b01      	subs	r3, #1
     21c:	b29b      	uxth	r3, r3
     21e:	68fa      	ldr	r2, [r7, #12]
     220:	1c19      	adds	r1, r3, #0
     222:	8311      	strh	r1, [r2, #24]
     224:	2b00      	cmp	r3, #0
     226:	d008      	beq.n	23a <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
     228:	68fb      	ldr	r3, [r7, #12]
     22a:	7f5b      	ldrb	r3, [r3, #29]
     22c:	2b00      	cmp	r3, #0
     22e:	d016      	beq.n	25e <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
     230:	68fb      	ldr	r3, [r7, #12]
     232:	0018      	movs	r0, r3
     234:	4b27      	ldr	r3, [pc, #156]	; (2d4 <_adc_interrupt_handler+0x12c>)
     236:	4798      	blx	r3
     238:	e011      	b.n	25e <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     23a:	68fb      	ldr	r3, [r7, #12]
     23c:	7f1b      	ldrb	r3, [r3, #28]
     23e:	b2db      	uxtb	r3, r3
     240:	2b05      	cmp	r3, #5
     242:	d10c      	bne.n	25e <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     244:	68fb      	ldr	r3, [r7, #12]
     246:	2200      	movs	r2, #0
     248:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	2101      	movs	r1, #1
     24e:	0018      	movs	r0, r3
     250:	4b21      	ldr	r3, [pc, #132]	; (2d8 <_adc_interrupt_handler+0x130>)
     252:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     254:	68fb      	ldr	r3, [r7, #12]
     256:	689b      	ldr	r3, [r3, #8]
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	0010      	movs	r0, r2
     25c:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     25e:	68bb      	ldr	r3, [r7, #8]
     260:	2204      	movs	r2, #4
     262:	4013      	ands	r3, r2
     264:	d014      	beq.n	290 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     266:	68fb      	ldr	r3, [r7, #12]
     268:	681b      	ldr	r3, [r3, #0]
     26a:	2204      	movs	r2, #4
     26c:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     26e:	68fb      	ldr	r3, [r7, #12]
     270:	7edb      	ldrb	r3, [r3, #27]
     272:	001a      	movs	r2, r3
     274:	2302      	movs	r3, #2
     276:	4013      	ands	r3, r2
     278:	d00a      	beq.n	290 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7e9b      	ldrb	r3, [r3, #26]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     284:	d004      	beq.n	290 <_adc_interrupt_handler+0xe8>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     286:	68fb      	ldr	r3, [r7, #12]
     288:	68db      	ldr	r3, [r3, #12]
     28a:	68fa      	ldr	r2, [r7, #12]
     28c:	0010      	movs	r0, r2
     28e:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     290:	68bb      	ldr	r3, [r7, #8]
     292:	2202      	movs	r2, #2
     294:	4013      	ands	r3, r2
     296:	d014      	beq.n	2c2 <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     298:	68fb      	ldr	r3, [r7, #12]
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2202      	movs	r2, #2
     29e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	7edb      	ldrb	r3, [r3, #27]
     2a4:	001a      	movs	r2, r3
     2a6:	2304      	movs	r3, #4
     2a8:	4013      	ands	r3, r2
     2aa:	d00a      	beq.n	2c2 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7e9b      	ldrb	r3, [r3, #26]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2b6:	d004      	beq.n	2c2 <_adc_interrupt_handler+0x11a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	691b      	ldr	r3, [r3, #16]
     2bc:	68fa      	ldr	r2, [r7, #12]
     2be:	0010      	movs	r0, r2
     2c0:	4798      	blx	r3
		}
	}
}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	46bd      	mov	sp, r7
     2c6:	b004      	add	sp, #16
     2c8:	bd80      	pop	{r7, pc}
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	20000100 	.word	0x20000100
     2d0:	00000115 	.word	0x00000115
     2d4:	0000013d 	.word	0x0000013d
     2d8:	00000185 	.word	0x00000185

000002dc <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     2dc:	b580      	push	{r7, lr}
     2de:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2e0:	2000      	movs	r0, #0
     2e2:	4b02      	ldr	r3, [pc, #8]	; (2ec <ADC_Handler+0x10>)
     2e4:	4798      	blx	r3
}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	46bd      	mov	sp, r7
     2ea:	bd80      	pop	{r7, pc}
     2ec:	000001a9 	.word	0x000001a9

000002f0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b082      	sub	sp, #8
     2f4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     2f6:	4b10      	ldr	r3, [pc, #64]	; (338 <cpu_irq_enter_critical+0x48>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d112      	bne.n	324 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2fe:	f3ef 8310 	mrs	r3, PRIMASK
     302:	607b      	str	r3, [r7, #4]
  return(result);
     304:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     306:	2b00      	cmp	r3, #0
     308:	d109      	bne.n	31e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     30a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     30c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     310:	4b0a      	ldr	r3, [pc, #40]	; (33c <cpu_irq_enter_critical+0x4c>)
     312:	2200      	movs	r2, #0
     314:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     316:	4b0a      	ldr	r3, [pc, #40]	; (340 <cpu_irq_enter_critical+0x50>)
     318:	2201      	movs	r2, #1
     31a:	701a      	strb	r2, [r3, #0]
     31c:	e002      	b.n	324 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     31e:	4b08      	ldr	r3, [pc, #32]	; (340 <cpu_irq_enter_critical+0x50>)
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     324:	4b04      	ldr	r3, [pc, #16]	; (338 <cpu_irq_enter_critical+0x48>)
     326:	681b      	ldr	r3, [r3, #0]
     328:	1c5a      	adds	r2, r3, #1
     32a:	4b03      	ldr	r3, [pc, #12]	; (338 <cpu_irq_enter_critical+0x48>)
     32c:	601a      	str	r2, [r3, #0]
}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	46bd      	mov	sp, r7
     332:	b002      	add	sp, #8
     334:	bd80      	pop	{r7, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	20000084 	.word	0x20000084
     33c:	20000000 	.word	0x20000000
     340:	20000088 	.word	0x20000088

00000344 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     344:	b580      	push	{r7, lr}
     346:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     348:	4b0b      	ldr	r3, [pc, #44]	; (378 <cpu_irq_leave_critical+0x34>)
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	1e5a      	subs	r2, r3, #1
     34e:	4b0a      	ldr	r3, [pc, #40]	; (378 <cpu_irq_leave_critical+0x34>)
     350:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <cpu_irq_leave_critical+0x34>)
     354:	681b      	ldr	r3, [r3, #0]
     356:	2b00      	cmp	r3, #0
     358:	d10a      	bne.n	370 <cpu_irq_leave_critical+0x2c>
     35a:	4b08      	ldr	r3, [pc, #32]	; (37c <cpu_irq_leave_critical+0x38>)
     35c:	781b      	ldrb	r3, [r3, #0]
     35e:	b2db      	uxtb	r3, r3
     360:	2b00      	cmp	r3, #0
     362:	d005      	beq.n	370 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     364:	4b06      	ldr	r3, [pc, #24]	; (380 <cpu_irq_leave_critical+0x3c>)
     366:	2201      	movs	r2, #1
     368:	701a      	strb	r2, [r3, #0]
     36a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     36e:	b662      	cpsie	i
	}
}
     370:	46c0      	nop			; (mov r8, r8)
     372:	46bd      	mov	sp, r7
     374:	bd80      	pop	{r7, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	20000084 	.word	0x20000084
     37c:	20000088 	.word	0x20000088
     380:	20000000 	.word	0x20000000

00000384 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	0002      	movs	r2, r0
     38c:	1dfb      	adds	r3, r7, #7
     38e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     390:	230f      	movs	r3, #15
     392:	18fb      	adds	r3, r7, r3
     394:	1dfa      	adds	r2, r7, #7
     396:	7812      	ldrb	r2, [r2, #0]
     398:	09d2      	lsrs	r2, r2, #7
     39a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     39c:	230e      	movs	r3, #14
     39e:	18fb      	adds	r3, r7, r3
     3a0:	1dfa      	adds	r2, r7, #7
     3a2:	7812      	ldrb	r2, [r2, #0]
     3a4:	0952      	lsrs	r2, r2, #5
     3a6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     3a8:	4b0d      	ldr	r3, [pc, #52]	; (3e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     3aa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     3ac:	230f      	movs	r3, #15
     3ae:	18fb      	adds	r3, r7, r3
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	2b00      	cmp	r3, #0
     3b4:	d10f      	bne.n	3d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     3b6:	230f      	movs	r3, #15
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	009b      	lsls	r3, r3, #2
     3be:	2210      	movs	r2, #16
     3c0:	4694      	mov	ip, r2
     3c2:	44bc      	add	ip, r7
     3c4:	4463      	add	r3, ip
     3c6:	3b08      	subs	r3, #8
     3c8:	681a      	ldr	r2, [r3, #0]
     3ca:	230e      	movs	r3, #14
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	01db      	lsls	r3, r3, #7
     3d2:	18d3      	adds	r3, r2, r3
     3d4:	e000      	b.n	3d8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     3d6:	2300      	movs	r3, #0
	}
}
     3d8:	0018      	movs	r0, r3
     3da:	46bd      	mov	sp, r7
     3dc:	b004      	add	sp, #16
     3de:	bd80      	pop	{r7, pc}
     3e0:	41004400 	.word	0x41004400

000003e4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     3e4:	b580      	push	{r7, lr}
     3e6:	b082      	sub	sp, #8
     3e8:	af00      	add	r7, sp, #0
     3ea:	0002      	movs	r2, r0
     3ec:	1dfb      	adds	r3, r7, #7
     3ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     3f0:	1dfb      	adds	r3, r7, #7
     3f2:	781b      	ldrb	r3, [r3, #0]
     3f4:	0018      	movs	r0, r3
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <port_get_group_from_gpio_pin+0x20>)
     3f8:	4798      	blx	r3
     3fa:	0003      	movs	r3, r0
}
     3fc:	0018      	movs	r0, r3
     3fe:	46bd      	mov	sp, r7
     400:	b002      	add	sp, #8
     402:	bd80      	pop	{r7, pc}
     404:	00000385 	.word	0x00000385

00000408 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     408:	b580      	push	{r7, lr}
     40a:	b082      	sub	sp, #8
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     410:	687b      	ldr	r3, [r7, #4]
     412:	2200      	movs	r2, #0
     414:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     416:	687b      	ldr	r3, [r7, #4]
     418:	2201      	movs	r2, #1
     41a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	2200      	movs	r2, #0
     420:	709a      	strb	r2, [r3, #2]
}
     422:	46c0      	nop			; (mov r8, r8)
     424:	46bd      	mov	sp, r7
     426:	b002      	add	sp, #8
     428:	bd80      	pop	{r7, pc}
	...

0000042c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     42c:	b580      	push	{r7, lr}
     42e:	b084      	sub	sp, #16
     430:	af00      	add	r7, sp, #0
     432:	0002      	movs	r2, r0
     434:	1dfb      	adds	r3, r7, #7
     436:	701a      	strb	r2, [r3, #0]
     438:	1dbb      	adds	r3, r7, #6
     43a:	1c0a      	adds	r2, r1, #0
     43c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     43e:	1dfb      	adds	r3, r7, #7
     440:	781b      	ldrb	r3, [r3, #0]
     442:	0018      	movs	r0, r3
     444:	4b0d      	ldr	r3, [pc, #52]	; (47c <port_pin_set_output_level+0x50>)
     446:	4798      	blx	r3
     448:	0003      	movs	r3, r0
     44a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     44c:	1dfb      	adds	r3, r7, #7
     44e:	781b      	ldrb	r3, [r3, #0]
     450:	221f      	movs	r2, #31
     452:	4013      	ands	r3, r2
     454:	2201      	movs	r2, #1
     456:	409a      	lsls	r2, r3
     458:	0013      	movs	r3, r2
     45a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     45c:	1dbb      	adds	r3, r7, #6
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	2b00      	cmp	r3, #0
     462:	d003      	beq.n	46c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     464:	68fb      	ldr	r3, [r7, #12]
     466:	68ba      	ldr	r2, [r7, #8]
     468:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     46a:	e002      	b.n	472 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     46c:	68fb      	ldr	r3, [r7, #12]
     46e:	68ba      	ldr	r2, [r7, #8]
     470:	615a      	str	r2, [r3, #20]
}
     472:	46c0      	nop			; (mov r8, r8)
     474:	46bd      	mov	sp, r7
     476:	b004      	add	sp, #16
     478:	bd80      	pop	{r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	000003e5 	.word	0x000003e5

00000480 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     480:	b580      	push	{r7, lr}
     482:	b082      	sub	sp, #8
     484:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     486:	1d3b      	adds	r3, r7, #4
     488:	0018      	movs	r0, r3
     48a:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <system_board_init+0x44>)
     48c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     48e:	1d3b      	adds	r3, r7, #4
     490:	2201      	movs	r2, #1
     492:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     494:	1d3b      	adds	r3, r7, #4
     496:	0019      	movs	r1, r3
     498:	2017      	movs	r0, #23
     49a:	4b0b      	ldr	r3, [pc, #44]	; (4c8 <system_board_init+0x48>)
     49c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     49e:	2101      	movs	r1, #1
     4a0:	2017      	movs	r0, #23
     4a2:	4b0a      	ldr	r3, [pc, #40]	; (4cc <system_board_init+0x4c>)
     4a4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4a6:	1d3b      	adds	r3, r7, #4
     4a8:	2200      	movs	r2, #0
     4aa:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4ac:	1d3b      	adds	r3, r7, #4
     4ae:	2201      	movs	r2, #1
     4b0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4b2:	1d3b      	adds	r3, r7, #4
     4b4:	0019      	movs	r1, r3
     4b6:	2037      	movs	r0, #55	; 0x37
     4b8:	4b03      	ldr	r3, [pc, #12]	; (4c8 <system_board_init+0x48>)
     4ba:	4798      	blx	r3
}
     4bc:	46c0      	nop			; (mov r8, r8)
     4be:	46bd      	mov	sp, r7
     4c0:	b002      	add	sp, #8
     4c2:	bd80      	pop	{r7, pc}
     4c4:	00000409 	.word	0x00000409
     4c8:	0000085d 	.word	0x0000085d
     4cc:	0000042d 	.word	0x0000042d

000004d0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     4d0:	b580      	push	{r7, lr}
     4d2:	b084      	sub	sp, #16
     4d4:	af00      	add	r7, sp, #0
     4d6:	0002      	movs	r2, r0
     4d8:	1dfb      	adds	r3, r7, #7
     4da:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     4dc:	230f      	movs	r3, #15
     4de:	18fb      	adds	r3, r7, r3
     4e0:	1dfa      	adds	r2, r7, #7
     4e2:	7812      	ldrb	r2, [r2, #0]
     4e4:	0952      	lsrs	r2, r2, #5
     4e6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     4e8:	230f      	movs	r3, #15
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	781b      	ldrb	r3, [r3, #0]
     4ee:	2b00      	cmp	r3, #0
     4f0:	d10c      	bne.n	50c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     4f2:	4b09      	ldr	r3, [pc, #36]	; (518 <_extint_get_eic_from_channel+0x48>)
     4f4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     4f6:	230f      	movs	r3, #15
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	781b      	ldrb	r3, [r3, #0]
     4fc:	009b      	lsls	r3, r3, #2
     4fe:	2210      	movs	r2, #16
     500:	4694      	mov	ip, r2
     502:	44bc      	add	ip, r7
     504:	4463      	add	r3, ip
     506:	3b08      	subs	r3, #8
     508:	681b      	ldr	r3, [r3, #0]
     50a:	e000      	b.n	50e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     50c:	2300      	movs	r3, #0
	}
}
     50e:	0018      	movs	r0, r3
     510:	46bd      	mov	sp, r7
     512:	b004      	add	sp, #16
     514:	bd80      	pop	{r7, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	40001800 	.word	0x40001800

0000051c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     51c:	b580      	push	{r7, lr}
     51e:	b084      	sub	sp, #16
     520:	af00      	add	r7, sp, #0
     522:	0002      	movs	r2, r0
     524:	1dfb      	adds	r3, r7, #7
     526:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     528:	1dfb      	adds	r3, r7, #7
     52a:	781b      	ldrb	r3, [r3, #0]
     52c:	0018      	movs	r0, r3
     52e:	4b0b      	ldr	r3, [pc, #44]	; (55c <extint_chan_is_detected+0x40>)
     530:	4798      	blx	r3
     532:	0003      	movs	r3, r0
     534:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	221f      	movs	r2, #31
     53c:	4013      	ands	r3, r2
     53e:	2201      	movs	r2, #1
     540:	409a      	lsls	r2, r3
     542:	0013      	movs	r3, r2
     544:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     546:	68fb      	ldr	r3, [r7, #12]
     548:	691b      	ldr	r3, [r3, #16]
     54a:	68ba      	ldr	r2, [r7, #8]
     54c:	4013      	ands	r3, r2
     54e:	1e5a      	subs	r2, r3, #1
     550:	4193      	sbcs	r3, r2
     552:	b2db      	uxtb	r3, r3
}
     554:	0018      	movs	r0, r3
     556:	46bd      	mov	sp, r7
     558:	b004      	add	sp, #16
     55a:	bd80      	pop	{r7, pc}
     55c:	000004d1 	.word	0x000004d1

00000560 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     560:	b580      	push	{r7, lr}
     562:	b084      	sub	sp, #16
     564:	af00      	add	r7, sp, #0
     566:	0002      	movs	r2, r0
     568:	1dfb      	adds	r3, r7, #7
     56a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     56c:	1dfb      	adds	r3, r7, #7
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	0018      	movs	r0, r3
     572:	4b09      	ldr	r3, [pc, #36]	; (598 <extint_chan_clear_detected+0x38>)
     574:	4798      	blx	r3
     576:	0003      	movs	r3, r0
     578:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     57a:	1dfb      	adds	r3, r7, #7
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	221f      	movs	r2, #31
     580:	4013      	ands	r3, r2
     582:	2201      	movs	r2, #1
     584:	409a      	lsls	r2, r3
     586:	0013      	movs	r3, r2
     588:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     58a:	68fb      	ldr	r3, [r7, #12]
     58c:	68ba      	ldr	r2, [r7, #8]
     58e:	611a      	str	r2, [r3, #16]
}
     590:	46c0      	nop			; (mov r8, r8)
     592:	46bd      	mov	sp, r7
     594:	b004      	add	sp, #16
     596:	bd80      	pop	{r7, pc}
     598:	000004d1 	.word	0x000004d1

0000059c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     59c:	b580      	push	{r7, lr}
     59e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5a0:	4b15      	ldr	r3, [pc, #84]	; (5f8 <EIC_Handler+0x5c>)
     5a2:	2200      	movs	r2, #0
     5a4:	701a      	strb	r2, [r3, #0]
     5a6:	e020      	b.n	5ea <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     5a8:	4b13      	ldr	r3, [pc, #76]	; (5f8 <EIC_Handler+0x5c>)
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	0018      	movs	r0, r3
     5ae:	4b13      	ldr	r3, [pc, #76]	; (5fc <EIC_Handler+0x60>)
     5b0:	4798      	blx	r3
     5b2:	1e03      	subs	r3, r0, #0
     5b4:	d013      	beq.n	5de <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     5b6:	4b10      	ldr	r3, [pc, #64]	; (5f8 <EIC_Handler+0x5c>)
     5b8:	781b      	ldrb	r3, [r3, #0]
     5ba:	0018      	movs	r0, r3
     5bc:	4b10      	ldr	r3, [pc, #64]	; (600 <EIC_Handler+0x64>)
     5be:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     5c0:	4b0d      	ldr	r3, [pc, #52]	; (5f8 <EIC_Handler+0x5c>)
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	001a      	movs	r2, r3
     5c6:	4b0f      	ldr	r3, [pc, #60]	; (604 <EIC_Handler+0x68>)
     5c8:	0092      	lsls	r2, r2, #2
     5ca:	58d3      	ldr	r3, [r2, r3]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d006      	beq.n	5de <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     5d0:	4b09      	ldr	r3, [pc, #36]	; (5f8 <EIC_Handler+0x5c>)
     5d2:	781b      	ldrb	r3, [r3, #0]
     5d4:	001a      	movs	r2, r3
     5d6:	4b0b      	ldr	r3, [pc, #44]	; (604 <EIC_Handler+0x68>)
     5d8:	0092      	lsls	r2, r2, #2
     5da:	58d3      	ldr	r3, [r2, r3]
     5dc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5de:	4b06      	ldr	r3, [pc, #24]	; (5f8 <EIC_Handler+0x5c>)
     5e0:	781b      	ldrb	r3, [r3, #0]
     5e2:	3301      	adds	r3, #1
     5e4:	b2da      	uxtb	r2, r3
     5e6:	4b04      	ldr	r3, [pc, #16]	; (5f8 <EIC_Handler+0x5c>)
     5e8:	701a      	strb	r2, [r3, #0]
     5ea:	4b03      	ldr	r3, [pc, #12]	; (5f8 <EIC_Handler+0x5c>)
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	2b0f      	cmp	r3, #15
     5f0:	d9da      	bls.n	5a8 <EIC_Handler+0xc>
			}
		}
	}
}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	46bd      	mov	sp, r7
     5f6:	bd80      	pop	{r7, pc}
     5f8:	20000104 	.word	0x20000104
     5fc:	0000051d 	.word	0x0000051d
     600:	00000561 	.word	0x00000561
     604:	20000108 	.word	0x20000108

00000608 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     610:	687b      	ldr	r3, [r7, #4]
     612:	2200      	movs	r2, #0
     614:	701a      	strb	r2, [r3, #0]
}
     616:	46c0      	nop			; (mov r8, r8)
     618:	46bd      	mov	sp, r7
     61a:	b002      	add	sp, #8
     61c:	bd80      	pop	{r7, pc}
	...

00000620 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     620:	b580      	push	{r7, lr}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
     626:	0002      	movs	r2, r0
     628:	6039      	str	r1, [r7, #0]
     62a:	1dfb      	adds	r3, r7, #7
     62c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     62e:	1dfb      	adds	r3, r7, #7
     630:	781b      	ldrb	r3, [r3, #0]
     632:	2b01      	cmp	r3, #1
     634:	d00a      	beq.n	64c <system_apb_clock_set_mask+0x2c>
     636:	2b02      	cmp	r3, #2
     638:	d00f      	beq.n	65a <system_apb_clock_set_mask+0x3a>
     63a:	2b00      	cmp	r3, #0
     63c:	d114      	bne.n	668 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <system_apb_clock_set_mask+0x58>)
     640:	4a0d      	ldr	r2, [pc, #52]	; (678 <system_apb_clock_set_mask+0x58>)
     642:	6991      	ldr	r1, [r2, #24]
     644:	683a      	ldr	r2, [r7, #0]
     646:	430a      	orrs	r2, r1
     648:	619a      	str	r2, [r3, #24]
			break;
     64a:	e00f      	b.n	66c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     64c:	4b0a      	ldr	r3, [pc, #40]	; (678 <system_apb_clock_set_mask+0x58>)
     64e:	4a0a      	ldr	r2, [pc, #40]	; (678 <system_apb_clock_set_mask+0x58>)
     650:	69d1      	ldr	r1, [r2, #28]
     652:	683a      	ldr	r2, [r7, #0]
     654:	430a      	orrs	r2, r1
     656:	61da      	str	r2, [r3, #28]
			break;
     658:	e008      	b.n	66c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     65a:	4b07      	ldr	r3, [pc, #28]	; (678 <system_apb_clock_set_mask+0x58>)
     65c:	4a06      	ldr	r2, [pc, #24]	; (678 <system_apb_clock_set_mask+0x58>)
     65e:	6a11      	ldr	r1, [r2, #32]
     660:	683a      	ldr	r2, [r7, #0]
     662:	430a      	orrs	r2, r1
     664:	621a      	str	r2, [r3, #32]
			break;
     666:	e001      	b.n	66c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     668:	2317      	movs	r3, #23
     66a:	e000      	b.n	66e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     66c:	2300      	movs	r3, #0
}
     66e:	0018      	movs	r0, r3
     670:	46bd      	mov	sp, r7
     672:	b002      	add	sp, #8
     674:	bd80      	pop	{r7, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	40000400 	.word	0x40000400

0000067c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     67c:	b580      	push	{r7, lr}
     67e:	b082      	sub	sp, #8
     680:	af00      	add	r7, sp, #0
     682:	0002      	movs	r2, r0
     684:	1dfb      	adds	r3, r7, #7
     686:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     688:	4b06      	ldr	r3, [pc, #24]	; (6a4 <system_interrupt_enable+0x28>)
     68a:	1dfa      	adds	r2, r7, #7
     68c:	7812      	ldrb	r2, [r2, #0]
     68e:	0011      	movs	r1, r2
     690:	221f      	movs	r2, #31
     692:	400a      	ands	r2, r1
     694:	2101      	movs	r1, #1
     696:	4091      	lsls	r1, r2
     698:	000a      	movs	r2, r1
     69a:	601a      	str	r2, [r3, #0]
}
     69c:	46c0      	nop			; (mov r8, r8)
     69e:	46bd      	mov	sp, r7
     6a0:	b002      	add	sp, #8
     6a2:	bd80      	pop	{r7, pc}
     6a4:	e000e100 	.word	0xe000e100

000006a8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	b082      	sub	sp, #8
     6ac:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     6ae:	4b0f      	ldr	r3, [pc, #60]	; (6ec <extint_is_syncing+0x44>)
     6b0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     6b2:	2300      	movs	r3, #0
     6b4:	607b      	str	r3, [r7, #4]
     6b6:	e011      	b.n	6dc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	009b      	lsls	r3, r3, #2
     6bc:	2208      	movs	r2, #8
     6be:	4694      	mov	ip, r2
     6c0:	44bc      	add	ip, r7
     6c2:	4463      	add	r3, ip
     6c4:	3b08      	subs	r3, #8
     6c6:	681b      	ldr	r3, [r3, #0]
     6c8:	785b      	ldrb	r3, [r3, #1]
     6ca:	b2db      	uxtb	r3, r3
     6cc:	b25b      	sxtb	r3, r3
     6ce:	2b00      	cmp	r3, #0
     6d0:	da01      	bge.n	6d6 <extint_is_syncing+0x2e>
			return true;
     6d2:	2301      	movs	r3, #1
     6d4:	e006      	b.n	6e4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	3301      	adds	r3, #1
     6da:	607b      	str	r3, [r7, #4]
     6dc:	687b      	ldr	r3, [r7, #4]
     6de:	2b00      	cmp	r3, #0
     6e0:	d0ea      	beq.n	6b8 <extint_is_syncing+0x10>
		}
	}
	return false;
     6e2:	2300      	movs	r3, #0
}
     6e4:	0018      	movs	r0, r3
     6e6:	46bd      	mov	sp, r7
     6e8:	b002      	add	sp, #8
     6ea:	bd80      	pop	{r7, pc}
     6ec:	40001800 	.word	0x40001800

000006f0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b084      	sub	sp, #16
     6f4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     6f6:	4b2d      	ldr	r3, [pc, #180]	; (7ac <_system_extint_init+0xbc>)
     6f8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     6fa:	2140      	movs	r1, #64	; 0x40
     6fc:	2000      	movs	r0, #0
     6fe:	4b2c      	ldr	r3, [pc, #176]	; (7b0 <_system_extint_init+0xc0>)
     700:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     702:	003b      	movs	r3, r7
     704:	0018      	movs	r0, r3
     706:	4b2b      	ldr	r3, [pc, #172]	; (7b4 <_system_extint_init+0xc4>)
     708:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     70a:	003b      	movs	r3, r7
     70c:	2200      	movs	r2, #0
     70e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     710:	003b      	movs	r3, r7
     712:	0019      	movs	r1, r3
     714:	2005      	movs	r0, #5
     716:	4b28      	ldr	r3, [pc, #160]	; (7b8 <_system_extint_init+0xc8>)
     718:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     71a:	2005      	movs	r0, #5
     71c:	4b27      	ldr	r3, [pc, #156]	; (7bc <_system_extint_init+0xcc>)
     71e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     720:	2300      	movs	r3, #0
     722:	60fb      	str	r3, [r7, #12]
     724:	e018      	b.n	758 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     726:	68fb      	ldr	r3, [r7, #12]
     728:	009b      	lsls	r3, r3, #2
     72a:	2210      	movs	r2, #16
     72c:	4694      	mov	ip, r2
     72e:	44bc      	add	ip, r7
     730:	4463      	add	r3, ip
     732:	3b0c      	subs	r3, #12
     734:	681a      	ldr	r2, [r3, #0]
     736:	68fb      	ldr	r3, [r7, #12]
     738:	009b      	lsls	r3, r3, #2
     73a:	2110      	movs	r1, #16
     73c:	468c      	mov	ip, r1
     73e:	44bc      	add	ip, r7
     740:	4463      	add	r3, ip
     742:	3b0c      	subs	r3, #12
     744:	681b      	ldr	r3, [r3, #0]
     746:	781b      	ldrb	r3, [r3, #0]
     748:	b2db      	uxtb	r3, r3
     74a:	2101      	movs	r1, #1
     74c:	430b      	orrs	r3, r1
     74e:	b2db      	uxtb	r3, r3
     750:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     752:	68fb      	ldr	r3, [r7, #12]
     754:	3301      	adds	r3, #1
     756:	60fb      	str	r3, [r7, #12]
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	2b00      	cmp	r3, #0
     75c:	d0e3      	beq.n	726 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     75e:	46c0      	nop			; (mov r8, r8)
     760:	4b17      	ldr	r3, [pc, #92]	; (7c0 <_system_extint_init+0xd0>)
     762:	4798      	blx	r3
     764:	1e03      	subs	r3, r0, #0
     766:	d1fb      	bne.n	760 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     768:	230b      	movs	r3, #11
     76a:	18fb      	adds	r3, r7, r3
     76c:	2200      	movs	r2, #0
     76e:	701a      	strb	r2, [r3, #0]
     770:	e00d      	b.n	78e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     772:	230b      	movs	r3, #11
     774:	18fb      	adds	r3, r7, r3
     776:	781a      	ldrb	r2, [r3, #0]
     778:	4b12      	ldr	r3, [pc, #72]	; (7c4 <_system_extint_init+0xd4>)
     77a:	0092      	lsls	r2, r2, #2
     77c:	2100      	movs	r1, #0
     77e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     780:	230b      	movs	r3, #11
     782:	18fb      	adds	r3, r7, r3
     784:	781a      	ldrb	r2, [r3, #0]
     786:	230b      	movs	r3, #11
     788:	18fb      	adds	r3, r7, r3
     78a:	3201      	adds	r2, #1
     78c:	701a      	strb	r2, [r3, #0]
     78e:	230b      	movs	r3, #11
     790:	18fb      	adds	r3, r7, r3
     792:	781b      	ldrb	r3, [r3, #0]
     794:	2b0f      	cmp	r3, #15
     796:	d9ec      	bls.n	772 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     798:	2004      	movs	r0, #4
     79a:	4b0b      	ldr	r3, [pc, #44]	; (7c8 <_system_extint_init+0xd8>)
     79c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <_system_extint_init+0xdc>)
     7a0:	4798      	blx	r3
}
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	46bd      	mov	sp, r7
     7a6:	b004      	add	sp, #16
     7a8:	bd80      	pop	{r7, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	40001800 	.word	0x40001800
     7b0:	00000621 	.word	0x00000621
     7b4:	00000609 	.word	0x00000609
     7b8:	0000273d 	.word	0x0000273d
     7bc:	00002781 	.word	0x00002781
     7c0:	000006a9 	.word	0x000006a9
     7c4:	20000108 	.word	0x20000108
     7c8:	0000067d 	.word	0x0000067d
     7cc:	000007d1 	.word	0x000007d1

000007d0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b082      	sub	sp, #8
     7d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     7d6:	4b15      	ldr	r3, [pc, #84]	; (82c <_extint_enable+0x5c>)
     7d8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7da:	2300      	movs	r3, #0
     7dc:	607b      	str	r3, [r7, #4]
     7de:	e018      	b.n	812 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	009b      	lsls	r3, r3, #2
     7e4:	2208      	movs	r2, #8
     7e6:	4694      	mov	ip, r2
     7e8:	44bc      	add	ip, r7
     7ea:	4463      	add	r3, ip
     7ec:	3b08      	subs	r3, #8
     7ee:	681a      	ldr	r2, [r3, #0]
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	009b      	lsls	r3, r3, #2
     7f4:	2108      	movs	r1, #8
     7f6:	468c      	mov	ip, r1
     7f8:	44bc      	add	ip, r7
     7fa:	4463      	add	r3, ip
     7fc:	3b08      	subs	r3, #8
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	781b      	ldrb	r3, [r3, #0]
     802:	b2db      	uxtb	r3, r3
     804:	2102      	movs	r1, #2
     806:	430b      	orrs	r3, r1
     808:	b2db      	uxtb	r3, r3
     80a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	3301      	adds	r3, #1
     810:	607b      	str	r3, [r7, #4]
     812:	687b      	ldr	r3, [r7, #4]
     814:	2b00      	cmp	r3, #0
     816:	d0e3      	beq.n	7e0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     818:	46c0      	nop			; (mov r8, r8)
     81a:	4b05      	ldr	r3, [pc, #20]	; (830 <_extint_enable+0x60>)
     81c:	4798      	blx	r3
     81e:	1e03      	subs	r3, r0, #0
     820:	d1fb      	bne.n	81a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     822:	46c0      	nop			; (mov r8, r8)
     824:	46bd      	mov	sp, r7
     826:	b002      	add	sp, #8
     828:	bd80      	pop	{r7, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	40001800 	.word	0x40001800
     830:	000006a9 	.word	0x000006a9

00000834 <system_pinmux_get_config_defaults>:
{
     834:	b580      	push	{r7, lr}
     836:	b082      	sub	sp, #8
     838:	af00      	add	r7, sp, #0
     83a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2280      	movs	r2, #128	; 0x80
     840:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     842:	687b      	ldr	r3, [r7, #4]
     844:	2200      	movs	r2, #0
     846:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     848:	687b      	ldr	r3, [r7, #4]
     84a:	2201      	movs	r2, #1
     84c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     84e:	687b      	ldr	r3, [r7, #4]
     850:	2200      	movs	r2, #0
     852:	70da      	strb	r2, [r3, #3]
}
     854:	46c0      	nop			; (mov r8, r8)
     856:	46bd      	mov	sp, r7
     858:	b002      	add	sp, #8
     85a:	bd80      	pop	{r7, pc}

0000085c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     85c:	b580      	push	{r7, lr}
     85e:	b084      	sub	sp, #16
     860:	af00      	add	r7, sp, #0
     862:	0002      	movs	r2, r0
     864:	6039      	str	r1, [r7, #0]
     866:	1dfb      	adds	r3, r7, #7
     868:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     86a:	230c      	movs	r3, #12
     86c:	18fb      	adds	r3, r7, r3
     86e:	0018      	movs	r0, r3
     870:	4b10      	ldr	r3, [pc, #64]	; (8b4 <port_pin_set_config+0x58>)
     872:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     874:	230c      	movs	r3, #12
     876:	18fb      	adds	r3, r7, r3
     878:	2280      	movs	r2, #128	; 0x80
     87a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	781a      	ldrb	r2, [r3, #0]
     880:	230c      	movs	r3, #12
     882:	18fb      	adds	r3, r7, r3
     884:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     886:	683b      	ldr	r3, [r7, #0]
     888:	785a      	ldrb	r2, [r3, #1]
     88a:	230c      	movs	r3, #12
     88c:	18fb      	adds	r3, r7, r3
     88e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     890:	683b      	ldr	r3, [r7, #0]
     892:	789a      	ldrb	r2, [r3, #2]
     894:	230c      	movs	r3, #12
     896:	18fb      	adds	r3, r7, r3
     898:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     89a:	230c      	movs	r3, #12
     89c:	18fa      	adds	r2, r7, r3
     89e:	1dfb      	adds	r3, r7, #7
     8a0:	781b      	ldrb	r3, [r3, #0]
     8a2:	0011      	movs	r1, r2
     8a4:	0018      	movs	r0, r3
     8a6:	4b04      	ldr	r3, [pc, #16]	; (8b8 <port_pin_set_config+0x5c>)
     8a8:	4798      	blx	r3
}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	46bd      	mov	sp, r7
     8ae:	b004      	add	sp, #16
     8b0:	bd80      	pop	{r7, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00000835 	.word	0x00000835
     8b8:	00002a29 	.word	0x00002a29

000008bc <system_gclk_chan_get_config_defaults>:
{
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	2200      	movs	r2, #0
     8c8:	701a      	strb	r2, [r3, #0]
}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	46bd      	mov	sp, r7
     8ce:	b002      	add	sp, #8
     8d0:	bd80      	pop	{r7, pc}

000008d2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d4:	b08d      	sub	sp, #52	; 0x34
     8d6:	af00      	add	r7, sp, #0
     8d8:	60b8      	str	r0, [r7, #8]
     8da:	60f9      	str	r1, [r7, #12]
     8dc:	603a      	str	r2, [r7, #0]
     8de:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     8e0:	2300      	movs	r3, #0
     8e2:	2400      	movs	r4, #0
     8e4:	623b      	str	r3, [r7, #32]
     8e6:	627c      	str	r4, [r7, #36]	; 0x24
     8e8:	2300      	movs	r3, #0
     8ea:	2400      	movs	r4, #0
     8ec:	61bb      	str	r3, [r7, #24]
     8ee:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     8f0:	233f      	movs	r3, #63	; 0x3f
     8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
     8f4:	e053      	b.n	99e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8f8:	3b20      	subs	r3, #32
     8fa:	2b00      	cmp	r3, #0
     8fc:	db04      	blt.n	908 <long_division+0x36>
     8fe:	2201      	movs	r2, #1
     900:	409a      	lsls	r2, r3
     902:	0013      	movs	r3, r2
     904:	617b      	str	r3, [r7, #20]
     906:	e00b      	b.n	920 <long_division+0x4e>
     908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     90a:	2220      	movs	r2, #32
     90c:	1ad3      	subs	r3, r2, r3
     90e:	2201      	movs	r2, #1
     910:	40da      	lsrs	r2, r3
     912:	0013      	movs	r3, r2
     914:	2100      	movs	r1, #0
     916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     918:	4091      	lsls	r1, r2
     91a:	000a      	movs	r2, r1
     91c:	4313      	orrs	r3, r2
     91e:	617b      	str	r3, [r7, #20]
     920:	2201      	movs	r2, #1
     922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     924:	409a      	lsls	r2, r3
     926:	0013      	movs	r3, r2
     928:	613b      	str	r3, [r7, #16]

		r = r << 1;
     92a:	69bb      	ldr	r3, [r7, #24]
     92c:	69fc      	ldr	r4, [r7, #28]
     92e:	18db      	adds	r3, r3, r3
     930:	4164      	adcs	r4, r4
     932:	61bb      	str	r3, [r7, #24]
     934:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     936:	68bb      	ldr	r3, [r7, #8]
     938:	693a      	ldr	r2, [r7, #16]
     93a:	401a      	ands	r2, r3
     93c:	0015      	movs	r5, r2
     93e:	68fb      	ldr	r3, [r7, #12]
     940:	697a      	ldr	r2, [r7, #20]
     942:	401a      	ands	r2, r3
     944:	0016      	movs	r6, r2
     946:	002b      	movs	r3, r5
     948:	4333      	orrs	r3, r6
     94a:	d007      	beq.n	95c <long_division+0x8a>
			r |= 0x01;
     94c:	69bb      	ldr	r3, [r7, #24]
     94e:	2201      	movs	r2, #1
     950:	4313      	orrs	r3, r2
     952:	61bb      	str	r3, [r7, #24]
     954:	69fb      	ldr	r3, [r7, #28]
     956:	2200      	movs	r2, #0
     958:	4313      	orrs	r3, r2
     95a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     95c:	687a      	ldr	r2, [r7, #4]
     95e:	69fb      	ldr	r3, [r7, #28]
     960:	429a      	cmp	r2, r3
     962:	d819      	bhi.n	998 <long_division+0xc6>
     964:	687a      	ldr	r2, [r7, #4]
     966:	69fb      	ldr	r3, [r7, #28]
     968:	429a      	cmp	r2, r3
     96a:	d103      	bne.n	974 <long_division+0xa2>
     96c:	683a      	ldr	r2, [r7, #0]
     96e:	69bb      	ldr	r3, [r7, #24]
     970:	429a      	cmp	r2, r3
     972:	d811      	bhi.n	998 <long_division+0xc6>
			r = r - d;
     974:	69b9      	ldr	r1, [r7, #24]
     976:	69fa      	ldr	r2, [r7, #28]
     978:	683b      	ldr	r3, [r7, #0]
     97a:	687c      	ldr	r4, [r7, #4]
     97c:	1ac9      	subs	r1, r1, r3
     97e:	41a2      	sbcs	r2, r4
     980:	000b      	movs	r3, r1
     982:	0014      	movs	r4, r2
     984:	61bb      	str	r3, [r7, #24]
     986:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     988:	6a3a      	ldr	r2, [r7, #32]
     98a:	693b      	ldr	r3, [r7, #16]
     98c:	4313      	orrs	r3, r2
     98e:	623b      	str	r3, [r7, #32]
     990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     992:	697b      	ldr	r3, [r7, #20]
     994:	4313      	orrs	r3, r2
     996:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     99a:	3b01      	subs	r3, #1
     99c:	62fb      	str	r3, [r7, #44]	; 0x2c
     99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9a0:	2b00      	cmp	r3, #0
     9a2:	daa8      	bge.n	8f6 <long_division+0x24>
		}
	}

	return q;
     9a4:	6a3b      	ldr	r3, [r7, #32]
     9a6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     9a8:	0018      	movs	r0, r3
     9aa:	0021      	movs	r1, r4
     9ac:	46bd      	mov	sp, r7
     9ae:	b00d      	add	sp, #52	; 0x34
     9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000009b2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     9b2:	b580      	push	{r7, lr}
     9b4:	b086      	sub	sp, #24
     9b6:	af00      	add	r7, sp, #0
     9b8:	60f8      	str	r0, [r7, #12]
     9ba:	60b9      	str	r1, [r7, #8]
     9bc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     9be:	2316      	movs	r3, #22
     9c0:	18fb      	adds	r3, r7, r3
     9c2:	2200      	movs	r2, #0
     9c4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     9c6:	68bb      	ldr	r3, [r7, #8]
     9c8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9ca:	68bb      	ldr	r3, [r7, #8]
     9cc:	085a      	lsrs	r2, r3, #1
     9ce:	68fb      	ldr	r3, [r7, #12]
     9d0:	429a      	cmp	r2, r3
     9d2:	d201      	bcs.n	9d8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9d4:	2340      	movs	r3, #64	; 0x40
     9d6:	e026      	b.n	a26 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     9d8:	68bb      	ldr	r3, [r7, #8]
     9da:	085b      	lsrs	r3, r3, #1
     9dc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     9de:	e00a      	b.n	9f6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     9e0:	693a      	ldr	r2, [r7, #16]
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	1ad3      	subs	r3, r2, r3
     9e6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     9e8:	2316      	movs	r3, #22
     9ea:	18fb      	adds	r3, r7, r3
     9ec:	881a      	ldrh	r2, [r3, #0]
     9ee:	2316      	movs	r3, #22
     9f0:	18fb      	adds	r3, r7, r3
     9f2:	3201      	adds	r2, #1
     9f4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     9f6:	693a      	ldr	r2, [r7, #16]
     9f8:	68fb      	ldr	r3, [r7, #12]
     9fa:	429a      	cmp	r2, r3
     9fc:	d2f0      	bcs.n	9e0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     9fe:	2316      	movs	r3, #22
     a00:	18fb      	adds	r3, r7, r3
     a02:	2216      	movs	r2, #22
     a04:	18ba      	adds	r2, r7, r2
     a06:	8812      	ldrh	r2, [r2, #0]
     a08:	3a01      	subs	r2, #1
     a0a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a0c:	2316      	movs	r3, #22
     a0e:	18fb      	adds	r3, r7, r3
     a10:	881b      	ldrh	r3, [r3, #0]
     a12:	2bff      	cmp	r3, #255	; 0xff
     a14:	d901      	bls.n	a1a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a16:	2340      	movs	r3, #64	; 0x40
     a18:	e005      	b.n	a26 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	2216      	movs	r2, #22
     a1e:	18ba      	adds	r2, r7, r2
     a20:	8812      	ldrh	r2, [r2, #0]
     a22:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     a24:	2300      	movs	r3, #0
	}
}
     a26:	0018      	movs	r0, r3
     a28:	46bd      	mov	sp, r7
     a2a:	b006      	add	sp, #24
     a2c:	bd80      	pop	{r7, pc}
	...

00000a30 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a30:	b5f0      	push	{r4, r5, r6, r7, lr}
     a32:	b0a1      	sub	sp, #132	; 0x84
     a34:	af00      	add	r7, sp, #0
     a36:	64f8      	str	r0, [r7, #76]	; 0x4c
     a38:	64b9      	str	r1, [r7, #72]	; 0x48
     a3a:	647a      	str	r2, [r7, #68]	; 0x44
     a3c:	2243      	movs	r2, #67	; 0x43
     a3e:	18ba      	adds	r2, r7, r2
     a40:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     a42:	2300      	movs	r3, #0
     a44:	2400      	movs	r4, #0
     a46:	673b      	str	r3, [r7, #112]	; 0x70
     a48:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     a4a:	2300      	movs	r3, #0
     a4c:	2400      	movs	r4, #0
     a4e:	66bb      	str	r3, [r7, #104]	; 0x68
     a50:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     a52:	2300      	movs	r3, #0
     a54:	2400      	movs	r4, #0
     a56:	67bb      	str	r3, [r7, #120]	; 0x78
     a58:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     a5a:	2300      	movs	r3, #0
     a5c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a5e:	2358      	movs	r3, #88	; 0x58
     a60:	2240      	movs	r2, #64	; 0x40
     a62:	4694      	mov	ip, r2
     a64:	44bc      	add	ip, r7
     a66:	4463      	add	r3, ip
     a68:	781a      	ldrb	r2, [r3, #0]
     a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a6c:	435a      	muls	r2, r3
     a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a70:	429a      	cmp	r2, r3
     a72:	d901      	bls.n	a78 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a74:	2340      	movs	r3, #64	; 0x40
     a76:	e0b3      	b.n	be0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a78:	2343      	movs	r3, #67	; 0x43
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	781b      	ldrb	r3, [r3, #0]
     a7e:	2b00      	cmp	r3, #0
     a80:	d13d      	bne.n	afe <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a82:	2358      	movs	r3, #88	; 0x58
     a84:	2240      	movs	r2, #64	; 0x40
     a86:	4694      	mov	ip, r2
     a88:	44bc      	add	ip, r7
     a8a:	4463      	add	r3, ip
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	b2db      	uxtb	r3, r3
     a90:	613b      	str	r3, [r7, #16]
     a92:	2300      	movs	r3, #0
     a94:	617b      	str	r3, [r7, #20]
     a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a98:	60bb      	str	r3, [r7, #8]
     a9a:	2300      	movs	r3, #0
     a9c:	60fb      	str	r3, [r7, #12]
     a9e:	4c52      	ldr	r4, [pc, #328]	; (be8 <_sercom_get_async_baud_val+0x1b8>)
     aa0:	68ba      	ldr	r2, [r7, #8]
     aa2:	68fb      	ldr	r3, [r7, #12]
     aa4:	6938      	ldr	r0, [r7, #16]
     aa6:	6979      	ldr	r1, [r7, #20]
     aa8:	47a0      	blx	r4
     aaa:	0003      	movs	r3, r0
     aac:	000c      	movs	r4, r1
     aae:	001b      	movs	r3, r3
     ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
     ab2:	2300      	movs	r3, #0
     ab4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     ab8:	603b      	str	r3, [r7, #0]
     aba:	2300      	movs	r3, #0
     abc:	607b      	str	r3, [r7, #4]
     abe:	6db8      	ldr	r0, [r7, #88]	; 0x58
     ac0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     ac2:	683a      	ldr	r2, [r7, #0]
     ac4:	687b      	ldr	r3, [r7, #4]
     ac6:	4c49      	ldr	r4, [pc, #292]	; (bec <_sercom_get_async_baud_val+0x1bc>)
     ac8:	47a0      	blx	r4
     aca:	0003      	movs	r3, r0
     acc:	000c      	movs	r4, r1
     ace:	673b      	str	r3, [r7, #112]	; 0x70
     ad0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ad2:	2100      	movs	r1, #0
     ad4:	2201      	movs	r2, #1
     ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     ad8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     ada:	1ac9      	subs	r1, r1, r3
     adc:	41a2      	sbcs	r2, r4
     ade:	000b      	movs	r3, r1
     ae0:	0014      	movs	r4, r2
     ae2:	66bb      	str	r3, [r7, #104]	; 0x68
     ae4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ae8:	0c1b      	lsrs	r3, r3, #16
     aea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     aec:	0416      	lsls	r6, r2, #16
     aee:	431e      	orrs	r6, r3
     af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     af2:	041d      	lsls	r5, r3, #16
     af4:	0033      	movs	r3, r6
     af6:	67bb      	str	r3, [r7, #120]	; 0x78
     af8:	2300      	movs	r3, #0
     afa:	67fb      	str	r3, [r7, #124]	; 0x7c
     afc:	e06a      	b.n	bd4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     afe:	2343      	movs	r3, #67	; 0x43
     b00:	18fb      	adds	r3, r7, r3
     b02:	781b      	ldrb	r3, [r3, #0]
     b04:	2b01      	cmp	r3, #1
     b06:	d165      	bne.n	bd4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     b0a:	633b      	str	r3, [r7, #48]	; 0x30
     b0c:	2300      	movs	r3, #0
     b0e:	637b      	str	r3, [r7, #52]	; 0x34
     b10:	2358      	movs	r3, #88	; 0x58
     b12:	2240      	movs	r2, #64	; 0x40
     b14:	4694      	mov	ip, r2
     b16:	44bc      	add	ip, r7
     b18:	4463      	add	r3, ip
     b1a:	781b      	ldrb	r3, [r3, #0]
     b1c:	b2db      	uxtb	r3, r3
     b1e:	62bb      	str	r3, [r7, #40]	; 0x28
     b20:	2300      	movs	r3, #0
     b22:	62fb      	str	r3, [r7, #44]	; 0x2c
     b24:	4c30      	ldr	r4, [pc, #192]	; (be8 <_sercom_get_async_baud_val+0x1b8>)
     b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
     b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
     b2e:	47a0      	blx	r4
     b30:	0003      	movs	r3, r0
     b32:	000c      	movs	r4, r1
     b34:	65bb      	str	r3, [r7, #88]	; 0x58
     b36:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     b3a:	623b      	str	r3, [r7, #32]
     b3c:	2300      	movs	r3, #0
     b3e:	627b      	str	r3, [r7, #36]	; 0x24
     b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     b42:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     b44:	001a      	movs	r2, r3
     b46:	0023      	movs	r3, r4
     b48:	6a38      	ldr	r0, [r7, #32]
     b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     b4c:	4c27      	ldr	r4, [pc, #156]	; (bec <_sercom_get_async_baud_val+0x1bc>)
     b4e:	47a0      	blx	r4
     b50:	0003      	movs	r3, r0
     b52:	000c      	movs	r4, r1
     b54:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     b56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	019b      	lsls	r3, r3, #6
     b5c:	429a      	cmp	r2, r3
     b5e:	d901      	bls.n	b64 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b60:	2340      	movs	r3, #64	; 0x40
     b62:	e03d      	b.n	be0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     b66:	61bb      	str	r3, [r7, #24]
     b68:	2300      	movs	r3, #0
     b6a:	61fb      	str	r3, [r7, #28]
     b6c:	69b9      	ldr	r1, [r7, #24]
     b6e:	69fa      	ldr	r2, [r7, #28]
     b70:	000b      	movs	r3, r1
     b72:	0f5b      	lsrs	r3, r3, #29
     b74:	0010      	movs	r0, r2
     b76:	00c0      	lsls	r0, r0, #3
     b78:	63f8      	str	r0, [r7, #60]	; 0x3c
     b7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     b7c:	4318      	orrs	r0, r3
     b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
     b80:	000b      	movs	r3, r1
     b82:	00db      	lsls	r3, r3, #3
     b84:	63bb      	str	r3, [r7, #56]	; 0x38
     b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     b88:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     b8a:	001a      	movs	r2, r3
     b8c:	0023      	movs	r3, r4
     b8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     b92:	4c16      	ldr	r4, [pc, #88]	; (bec <_sercom_get_async_baud_val+0x1bc>)
     b94:	47a0      	blx	r4
     b96:	0003      	movs	r3, r0
     b98:	000c      	movs	r4, r1
     b9a:	65bb      	str	r3, [r7, #88]	; 0x58
     b9c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     ba0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     ba2:	b2d9      	uxtb	r1, r3
     ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     ba6:	b2db      	uxtb	r3, r3
     ba8:	00db      	lsls	r3, r3, #3
     baa:	b2da      	uxtb	r2, r3
     bac:	2317      	movs	r3, #23
     bae:	2040      	movs	r0, #64	; 0x40
     bb0:	4684      	mov	ip, r0
     bb2:	44bc      	add	ip, r7
     bb4:	4463      	add	r3, ip
     bb6:	1a8a      	subs	r2, r1, r2
     bb8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     bba:	2317      	movs	r3, #23
     bbc:	2240      	movs	r2, #64	; 0x40
     bbe:	4694      	mov	ip, r2
     bc0:	44bc      	add	ip, r7
     bc2:	4463      	add	r3, ip
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	035b      	lsls	r3, r3, #13
     bc8:	001a      	movs	r2, r3
     bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     bcc:	4313      	orrs	r3, r2
     bce:	67bb      	str	r3, [r7, #120]	; 0x78
     bd0:	2300      	movs	r3, #0
     bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     bd6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     bd8:	b29a      	uxth	r2, r3
     bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     bdc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     bde:	2300      	movs	r3, #0
}
     be0:	0018      	movs	r0, r3
     be2:	46bd      	mov	sp, r7
     be4:	b021      	add	sp, #132	; 0x84
     be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     be8:	00003171 	.word	0x00003171
     bec:	000008d3 	.word	0x000008d3

00000bf0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	b084      	sub	sp, #16
     bf4:	af00      	add	r7, sp, #0
     bf6:	0002      	movs	r2, r0
     bf8:	1dfb      	adds	r3, r7, #7
     bfa:	701a      	strb	r2, [r3, #0]
     bfc:	1dbb      	adds	r3, r7, #6
     bfe:	1c0a      	adds	r2, r1, #0
     c00:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c02:	4b1a      	ldr	r3, [pc, #104]	; (c6c <sercom_set_gclk_generator+0x7c>)
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	2201      	movs	r2, #1
     c08:	4053      	eors	r3, r2
     c0a:	b2db      	uxtb	r3, r3
     c0c:	2b00      	cmp	r3, #0
     c0e:	d103      	bne.n	c18 <sercom_set_gclk_generator+0x28>
     c10:	1dbb      	adds	r3, r7, #6
     c12:	781b      	ldrb	r3, [r3, #0]
     c14:	2b00      	cmp	r3, #0
     c16:	d01b      	beq.n	c50 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     c18:	230c      	movs	r3, #12
     c1a:	18fb      	adds	r3, r7, r3
     c1c:	0018      	movs	r0, r3
     c1e:	4b14      	ldr	r3, [pc, #80]	; (c70 <sercom_set_gclk_generator+0x80>)
     c20:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     c22:	230c      	movs	r3, #12
     c24:	18fb      	adds	r3, r7, r3
     c26:	1dfa      	adds	r2, r7, #7
     c28:	7812      	ldrb	r2, [r2, #0]
     c2a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c2c:	230c      	movs	r3, #12
     c2e:	18fb      	adds	r3, r7, r3
     c30:	0019      	movs	r1, r3
     c32:	2013      	movs	r0, #19
     c34:	4b0f      	ldr	r3, [pc, #60]	; (c74 <sercom_set_gclk_generator+0x84>)
     c36:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c38:	2013      	movs	r0, #19
     c3a:	4b0f      	ldr	r3, [pc, #60]	; (c78 <sercom_set_gclk_generator+0x88>)
     c3c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     c3e:	4b0b      	ldr	r3, [pc, #44]	; (c6c <sercom_set_gclk_generator+0x7c>)
     c40:	1dfa      	adds	r2, r7, #7
     c42:	7812      	ldrb	r2, [r2, #0]
     c44:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     c46:	4b09      	ldr	r3, [pc, #36]	; (c6c <sercom_set_gclk_generator+0x7c>)
     c48:	2201      	movs	r2, #1
     c4a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c4c:	2300      	movs	r3, #0
     c4e:	e008      	b.n	c62 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <sercom_set_gclk_generator+0x7c>)
     c52:	785b      	ldrb	r3, [r3, #1]
     c54:	1dfa      	adds	r2, r7, #7
     c56:	7812      	ldrb	r2, [r2, #0]
     c58:	429a      	cmp	r2, r3
     c5a:	d101      	bne.n	c60 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     c5c:	2300      	movs	r3, #0
     c5e:	e000      	b.n	c62 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c60:	231d      	movs	r3, #29
}
     c62:	0018      	movs	r0, r3
     c64:	46bd      	mov	sp, r7
     c66:	b004      	add	sp, #16
     c68:	bd80      	pop	{r7, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	2000008c 	.word	0x2000008c
     c70:	000008bd 	.word	0x000008bd
     c74:	0000273d 	.word	0x0000273d
     c78:	00002781 	.word	0x00002781

00000c7c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
     c84:	000a      	movs	r2, r1
     c86:	1cfb      	adds	r3, r7, #3
     c88:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	4a4d      	ldr	r2, [pc, #308]	; (dc4 <_sercom_get_default_pad+0x148>)
     c8e:	4293      	cmp	r3, r2
     c90:	d03f      	beq.n	d12 <_sercom_get_default_pad+0x96>
     c92:	4a4c      	ldr	r2, [pc, #304]	; (dc4 <_sercom_get_default_pad+0x148>)
     c94:	4293      	cmp	r3, r2
     c96:	d806      	bhi.n	ca6 <_sercom_get_default_pad+0x2a>
     c98:	4a4b      	ldr	r2, [pc, #300]	; (dc8 <_sercom_get_default_pad+0x14c>)
     c9a:	4293      	cmp	r3, r2
     c9c:	d00f      	beq.n	cbe <_sercom_get_default_pad+0x42>
     c9e:	4a4b      	ldr	r2, [pc, #300]	; (dcc <_sercom_get_default_pad+0x150>)
     ca0:	4293      	cmp	r3, r2
     ca2:	d021      	beq.n	ce8 <_sercom_get_default_pad+0x6c>
     ca4:	e089      	b.n	dba <_sercom_get_default_pad+0x13e>
     ca6:	4a4a      	ldr	r2, [pc, #296]	; (dd0 <_sercom_get_default_pad+0x154>)
     ca8:	4293      	cmp	r3, r2
     caa:	d100      	bne.n	cae <_sercom_get_default_pad+0x32>
     cac:	e05b      	b.n	d66 <_sercom_get_default_pad+0xea>
     cae:	4a49      	ldr	r2, [pc, #292]	; (dd4 <_sercom_get_default_pad+0x158>)
     cb0:	4293      	cmp	r3, r2
     cb2:	d100      	bne.n	cb6 <_sercom_get_default_pad+0x3a>
     cb4:	e06c      	b.n	d90 <_sercom_get_default_pad+0x114>
     cb6:	4a48      	ldr	r2, [pc, #288]	; (dd8 <_sercom_get_default_pad+0x15c>)
     cb8:	4293      	cmp	r3, r2
     cba:	d03f      	beq.n	d3c <_sercom_get_default_pad+0xc0>
     cbc:	e07d      	b.n	dba <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cbe:	1cfb      	adds	r3, r7, #3
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	2b01      	cmp	r3, #1
     cc4:	d00a      	beq.n	cdc <_sercom_get_default_pad+0x60>
     cc6:	dc02      	bgt.n	cce <_sercom_get_default_pad+0x52>
     cc8:	2b00      	cmp	r3, #0
     cca:	d005      	beq.n	cd8 <_sercom_get_default_pad+0x5c>
     ccc:	e075      	b.n	dba <_sercom_get_default_pad+0x13e>
     cce:	2b02      	cmp	r3, #2
     cd0:	d006      	beq.n	ce0 <_sercom_get_default_pad+0x64>
     cd2:	2b03      	cmp	r3, #3
     cd4:	d006      	beq.n	ce4 <_sercom_get_default_pad+0x68>
     cd6:	e070      	b.n	dba <_sercom_get_default_pad+0x13e>
     cd8:	4b40      	ldr	r3, [pc, #256]	; (ddc <_sercom_get_default_pad+0x160>)
     cda:	e06f      	b.n	dbc <_sercom_get_default_pad+0x140>
     cdc:	4b40      	ldr	r3, [pc, #256]	; (de0 <_sercom_get_default_pad+0x164>)
     cde:	e06d      	b.n	dbc <_sercom_get_default_pad+0x140>
     ce0:	4b40      	ldr	r3, [pc, #256]	; (de4 <_sercom_get_default_pad+0x168>)
     ce2:	e06b      	b.n	dbc <_sercom_get_default_pad+0x140>
     ce4:	4b40      	ldr	r3, [pc, #256]	; (de8 <_sercom_get_default_pad+0x16c>)
     ce6:	e069      	b.n	dbc <_sercom_get_default_pad+0x140>
     ce8:	1cfb      	adds	r3, r7, #3
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	2b01      	cmp	r3, #1
     cee:	d00a      	beq.n	d06 <_sercom_get_default_pad+0x8a>
     cf0:	dc02      	bgt.n	cf8 <_sercom_get_default_pad+0x7c>
     cf2:	2b00      	cmp	r3, #0
     cf4:	d005      	beq.n	d02 <_sercom_get_default_pad+0x86>
     cf6:	e060      	b.n	dba <_sercom_get_default_pad+0x13e>
     cf8:	2b02      	cmp	r3, #2
     cfa:	d006      	beq.n	d0a <_sercom_get_default_pad+0x8e>
     cfc:	2b03      	cmp	r3, #3
     cfe:	d006      	beq.n	d0e <_sercom_get_default_pad+0x92>
     d00:	e05b      	b.n	dba <_sercom_get_default_pad+0x13e>
     d02:	2303      	movs	r3, #3
     d04:	e05a      	b.n	dbc <_sercom_get_default_pad+0x140>
     d06:	4b39      	ldr	r3, [pc, #228]	; (dec <_sercom_get_default_pad+0x170>)
     d08:	e058      	b.n	dbc <_sercom_get_default_pad+0x140>
     d0a:	4b39      	ldr	r3, [pc, #228]	; (df0 <_sercom_get_default_pad+0x174>)
     d0c:	e056      	b.n	dbc <_sercom_get_default_pad+0x140>
     d0e:	4b39      	ldr	r3, [pc, #228]	; (df4 <_sercom_get_default_pad+0x178>)
     d10:	e054      	b.n	dbc <_sercom_get_default_pad+0x140>
     d12:	1cfb      	adds	r3, r7, #3
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	2b01      	cmp	r3, #1
     d18:	d00a      	beq.n	d30 <_sercom_get_default_pad+0xb4>
     d1a:	dc02      	bgt.n	d22 <_sercom_get_default_pad+0xa6>
     d1c:	2b00      	cmp	r3, #0
     d1e:	d005      	beq.n	d2c <_sercom_get_default_pad+0xb0>
     d20:	e04b      	b.n	dba <_sercom_get_default_pad+0x13e>
     d22:	2b02      	cmp	r3, #2
     d24:	d006      	beq.n	d34 <_sercom_get_default_pad+0xb8>
     d26:	2b03      	cmp	r3, #3
     d28:	d006      	beq.n	d38 <_sercom_get_default_pad+0xbc>
     d2a:	e046      	b.n	dba <_sercom_get_default_pad+0x13e>
     d2c:	4b32      	ldr	r3, [pc, #200]	; (df8 <_sercom_get_default_pad+0x17c>)
     d2e:	e045      	b.n	dbc <_sercom_get_default_pad+0x140>
     d30:	4b32      	ldr	r3, [pc, #200]	; (dfc <_sercom_get_default_pad+0x180>)
     d32:	e043      	b.n	dbc <_sercom_get_default_pad+0x140>
     d34:	4b32      	ldr	r3, [pc, #200]	; (e00 <_sercom_get_default_pad+0x184>)
     d36:	e041      	b.n	dbc <_sercom_get_default_pad+0x140>
     d38:	4b32      	ldr	r3, [pc, #200]	; (e04 <_sercom_get_default_pad+0x188>)
     d3a:	e03f      	b.n	dbc <_sercom_get_default_pad+0x140>
     d3c:	1cfb      	adds	r3, r7, #3
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b01      	cmp	r3, #1
     d42:	d00a      	beq.n	d5a <_sercom_get_default_pad+0xde>
     d44:	dc02      	bgt.n	d4c <_sercom_get_default_pad+0xd0>
     d46:	2b00      	cmp	r3, #0
     d48:	d005      	beq.n	d56 <_sercom_get_default_pad+0xda>
     d4a:	e036      	b.n	dba <_sercom_get_default_pad+0x13e>
     d4c:	2b02      	cmp	r3, #2
     d4e:	d006      	beq.n	d5e <_sercom_get_default_pad+0xe2>
     d50:	2b03      	cmp	r3, #3
     d52:	d006      	beq.n	d62 <_sercom_get_default_pad+0xe6>
     d54:	e031      	b.n	dba <_sercom_get_default_pad+0x13e>
     d56:	4b2c      	ldr	r3, [pc, #176]	; (e08 <_sercom_get_default_pad+0x18c>)
     d58:	e030      	b.n	dbc <_sercom_get_default_pad+0x140>
     d5a:	4b2c      	ldr	r3, [pc, #176]	; (e0c <_sercom_get_default_pad+0x190>)
     d5c:	e02e      	b.n	dbc <_sercom_get_default_pad+0x140>
     d5e:	4b2c      	ldr	r3, [pc, #176]	; (e10 <_sercom_get_default_pad+0x194>)
     d60:	e02c      	b.n	dbc <_sercom_get_default_pad+0x140>
     d62:	4b2c      	ldr	r3, [pc, #176]	; (e14 <_sercom_get_default_pad+0x198>)
     d64:	e02a      	b.n	dbc <_sercom_get_default_pad+0x140>
     d66:	1cfb      	adds	r3, r7, #3
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	2b01      	cmp	r3, #1
     d6c:	d00a      	beq.n	d84 <_sercom_get_default_pad+0x108>
     d6e:	dc02      	bgt.n	d76 <_sercom_get_default_pad+0xfa>
     d70:	2b00      	cmp	r3, #0
     d72:	d005      	beq.n	d80 <_sercom_get_default_pad+0x104>
     d74:	e021      	b.n	dba <_sercom_get_default_pad+0x13e>
     d76:	2b02      	cmp	r3, #2
     d78:	d006      	beq.n	d88 <_sercom_get_default_pad+0x10c>
     d7a:	2b03      	cmp	r3, #3
     d7c:	d006      	beq.n	d8c <_sercom_get_default_pad+0x110>
     d7e:	e01c      	b.n	dba <_sercom_get_default_pad+0x13e>
     d80:	4b25      	ldr	r3, [pc, #148]	; (e18 <_sercom_get_default_pad+0x19c>)
     d82:	e01b      	b.n	dbc <_sercom_get_default_pad+0x140>
     d84:	4b25      	ldr	r3, [pc, #148]	; (e1c <_sercom_get_default_pad+0x1a0>)
     d86:	e019      	b.n	dbc <_sercom_get_default_pad+0x140>
     d88:	4b25      	ldr	r3, [pc, #148]	; (e20 <_sercom_get_default_pad+0x1a4>)
     d8a:	e017      	b.n	dbc <_sercom_get_default_pad+0x140>
     d8c:	4b25      	ldr	r3, [pc, #148]	; (e24 <_sercom_get_default_pad+0x1a8>)
     d8e:	e015      	b.n	dbc <_sercom_get_default_pad+0x140>
     d90:	1cfb      	adds	r3, r7, #3
     d92:	781b      	ldrb	r3, [r3, #0]
     d94:	2b01      	cmp	r3, #1
     d96:	d00a      	beq.n	dae <_sercom_get_default_pad+0x132>
     d98:	dc02      	bgt.n	da0 <_sercom_get_default_pad+0x124>
     d9a:	2b00      	cmp	r3, #0
     d9c:	d005      	beq.n	daa <_sercom_get_default_pad+0x12e>
     d9e:	e00c      	b.n	dba <_sercom_get_default_pad+0x13e>
     da0:	2b02      	cmp	r3, #2
     da2:	d006      	beq.n	db2 <_sercom_get_default_pad+0x136>
     da4:	2b03      	cmp	r3, #3
     da6:	d006      	beq.n	db6 <_sercom_get_default_pad+0x13a>
     da8:	e007      	b.n	dba <_sercom_get_default_pad+0x13e>
     daa:	4b1f      	ldr	r3, [pc, #124]	; (e28 <_sercom_get_default_pad+0x1ac>)
     dac:	e006      	b.n	dbc <_sercom_get_default_pad+0x140>
     dae:	4b1f      	ldr	r3, [pc, #124]	; (e2c <_sercom_get_default_pad+0x1b0>)
     db0:	e004      	b.n	dbc <_sercom_get_default_pad+0x140>
     db2:	4b1f      	ldr	r3, [pc, #124]	; (e30 <_sercom_get_default_pad+0x1b4>)
     db4:	e002      	b.n	dbc <_sercom_get_default_pad+0x140>
     db6:	4b1f      	ldr	r3, [pc, #124]	; (e34 <_sercom_get_default_pad+0x1b8>)
     db8:	e000      	b.n	dbc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     dba:	2300      	movs	r3, #0
}
     dbc:	0018      	movs	r0, r3
     dbe:	46bd      	mov	sp, r7
     dc0:	b002      	add	sp, #8
     dc2:	bd80      	pop	{r7, pc}
     dc4:	42001000 	.word	0x42001000
     dc8:	42000800 	.word	0x42000800
     dcc:	42000c00 	.word	0x42000c00
     dd0:	42001800 	.word	0x42001800
     dd4:	42001c00 	.word	0x42001c00
     dd8:	42001400 	.word	0x42001400
     ddc:	00040003 	.word	0x00040003
     de0:	00050003 	.word	0x00050003
     de4:	00060003 	.word	0x00060003
     de8:	00070003 	.word	0x00070003
     dec:	00010003 	.word	0x00010003
     df0:	001e0003 	.word	0x001e0003
     df4:	001f0003 	.word	0x001f0003
     df8:	00080003 	.word	0x00080003
     dfc:	00090003 	.word	0x00090003
     e00:	000a0003 	.word	0x000a0003
     e04:	000b0003 	.word	0x000b0003
     e08:	00100003 	.word	0x00100003
     e0c:	00110003 	.word	0x00110003
     e10:	00120003 	.word	0x00120003
     e14:	00130003 	.word	0x00130003
     e18:	000c0003 	.word	0x000c0003
     e1c:	000d0003 	.word	0x000d0003
     e20:	000e0003 	.word	0x000e0003
     e24:	000f0003 	.word	0x000f0003
     e28:	00160003 	.word	0x00160003
     e2c:	00170003 	.word	0x00170003
     e30:	00180003 	.word	0x00180003
     e34:	00190003 	.word	0x00190003

00000e38 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08b      	sub	sp, #44	; 0x2c
     e3c:	af00      	add	r7, sp, #0
     e3e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e40:	230c      	movs	r3, #12
     e42:	18fb      	adds	r3, r7, r3
     e44:	4a0f      	ldr	r2, [pc, #60]	; (e84 <_sercom_get_sercom_inst_index+0x4c>)
     e46:	ca13      	ldmia	r2!, {r0, r1, r4}
     e48:	c313      	stmia	r3!, {r0, r1, r4}
     e4a:	ca13      	ldmia	r2!, {r0, r1, r4}
     e4c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e4e:	2300      	movs	r3, #0
     e50:	627b      	str	r3, [r7, #36]	; 0x24
     e52:	e00e      	b.n	e72 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e54:	230c      	movs	r3, #12
     e56:	18fb      	adds	r3, r7, r3
     e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e5a:	0092      	lsls	r2, r2, #2
     e5c:	58d3      	ldr	r3, [r2, r3]
     e5e:	001a      	movs	r2, r3
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	429a      	cmp	r2, r3
     e64:	d102      	bne.n	e6c <_sercom_get_sercom_inst_index+0x34>
			return i;
     e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e68:	b2db      	uxtb	r3, r3
     e6a:	e006      	b.n	e7a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e6e:	3301      	adds	r3, #1
     e70:	627b      	str	r3, [r7, #36]	; 0x24
     e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e74:	2b05      	cmp	r3, #5
     e76:	d9ed      	bls.n	e54 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     e78:	2300      	movs	r3, #0
}
     e7a:	0018      	movs	r0, r3
     e7c:	46bd      	mov	sp, r7
     e7e:	b00b      	add	sp, #44	; 0x2c
     e80:	bd90      	pop	{r4, r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	000042d4 	.word	0x000042d4

00000e88 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	0002      	movs	r2, r0
     e90:	1dfb      	adds	r3, r7, #7
     e92:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     e94:	46c0      	nop			; (mov r8, r8)
     e96:	46bd      	mov	sp, r7
     e98:	b002      	add	sp, #8
     e9a:	bd80      	pop	{r7, pc}

00000e9c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b084      	sub	sp, #16
     ea0:	af00      	add	r7, sp, #0
     ea2:	0002      	movs	r2, r0
     ea4:	6039      	str	r1, [r7, #0]
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     eaa:	4b13      	ldr	r3, [pc, #76]	; (ef8 <_sercom_set_handler+0x5c>)
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2201      	movs	r2, #1
     eb0:	4053      	eors	r3, r2
     eb2:	b2db      	uxtb	r3, r3
     eb4:	2b00      	cmp	r3, #0
     eb6:	d015      	beq.n	ee4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb8:	2300      	movs	r3, #0
     eba:	60fb      	str	r3, [r7, #12]
     ebc:	e00c      	b.n	ed8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ebe:	4b0f      	ldr	r3, [pc, #60]	; (efc <_sercom_set_handler+0x60>)
     ec0:	68fa      	ldr	r2, [r7, #12]
     ec2:	0092      	lsls	r2, r2, #2
     ec4:	490e      	ldr	r1, [pc, #56]	; (f00 <_sercom_set_handler+0x64>)
     ec6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     ec8:	4b0e      	ldr	r3, [pc, #56]	; (f04 <_sercom_set_handler+0x68>)
     eca:	68fa      	ldr	r2, [r7, #12]
     ecc:	0092      	lsls	r2, r2, #2
     ece:	2100      	movs	r1, #0
     ed0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	3301      	adds	r3, #1
     ed6:	60fb      	str	r3, [r7, #12]
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	2b05      	cmp	r3, #5
     edc:	d9ef      	bls.n	ebe <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
     ede:	4b06      	ldr	r3, [pc, #24]	; (ef8 <_sercom_set_handler+0x5c>)
     ee0:	2201      	movs	r2, #1
     ee2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ee4:	1dfb      	adds	r3, r7, #7
     ee6:	781a      	ldrb	r2, [r3, #0]
     ee8:	4b04      	ldr	r3, [pc, #16]	; (efc <_sercom_set_handler+0x60>)
     eea:	0092      	lsls	r2, r2, #2
     eec:	6839      	ldr	r1, [r7, #0]
     eee:	50d1      	str	r1, [r2, r3]
}
     ef0:	46c0      	nop			; (mov r8, r8)
     ef2:	46bd      	mov	sp, r7
     ef4:	b004      	add	sp, #16
     ef6:	bd80      	pop	{r7, pc}
     ef8:	2000008e 	.word	0x2000008e
     efc:	20000090 	.word	0x20000090
     f00:	00000e89 	.word	0x00000e89
     f04:	20000148 	.word	0x20000148

00000f08 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f08:	b590      	push	{r4, r7, lr}
     f0a:	b085      	sub	sp, #20
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f10:	2308      	movs	r3, #8
     f12:	18fb      	adds	r3, r7, r3
     f14:	4a0b      	ldr	r2, [pc, #44]	; (f44 <_sercom_get_interrupt_vector+0x3c>)
     f16:	6811      	ldr	r1, [r2, #0]
     f18:	6019      	str	r1, [r3, #0]
     f1a:	8892      	ldrh	r2, [r2, #4]
     f1c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f1e:	230f      	movs	r3, #15
     f20:	18fc      	adds	r4, r7, r3
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	0018      	movs	r0, r3
     f26:	4b08      	ldr	r3, [pc, #32]	; (f48 <_sercom_get_interrupt_vector+0x40>)
     f28:	4798      	blx	r3
     f2a:	0003      	movs	r3, r0
     f2c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f2e:	230f      	movs	r3, #15
     f30:	18fb      	adds	r3, r7, r3
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	2208      	movs	r2, #8
     f36:	18ba      	adds	r2, r7, r2
     f38:	5cd3      	ldrb	r3, [r2, r3]
     f3a:	b25b      	sxtb	r3, r3
}
     f3c:	0018      	movs	r0, r3
     f3e:	46bd      	mov	sp, r7
     f40:	b005      	add	sp, #20
     f42:	bd90      	pop	{r4, r7, pc}
     f44:	000042ec 	.word	0x000042ec
     f48:	00000e39 	.word	0x00000e39

00000f4c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f4c:	b580      	push	{r7, lr}
     f4e:	af00      	add	r7, sp, #0
     f50:	4b03      	ldr	r3, [pc, #12]	; (f60 <SERCOM0_Handler+0x14>)
     f52:	681b      	ldr	r3, [r3, #0]
     f54:	2000      	movs	r0, #0
     f56:	4798      	blx	r3
     f58:	46c0      	nop			; (mov r8, r8)
     f5a:	46bd      	mov	sp, r7
     f5c:	bd80      	pop	{r7, pc}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	20000090 	.word	0x20000090

00000f64 <SERCOM1_Handler>:
     f64:	b580      	push	{r7, lr}
     f66:	af00      	add	r7, sp, #0
     f68:	4b03      	ldr	r3, [pc, #12]	; (f78 <SERCOM1_Handler+0x14>)
     f6a:	685b      	ldr	r3, [r3, #4]
     f6c:	2001      	movs	r0, #1
     f6e:	4798      	blx	r3
     f70:	46c0      	nop			; (mov r8, r8)
     f72:	46bd      	mov	sp, r7
     f74:	bd80      	pop	{r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	20000090 	.word	0x20000090

00000f7c <SERCOM2_Handler>:
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
     f80:	4b03      	ldr	r3, [pc, #12]	; (f90 <SERCOM2_Handler+0x14>)
     f82:	689b      	ldr	r3, [r3, #8]
     f84:	2002      	movs	r0, #2
     f86:	4798      	blx	r3
     f88:	46c0      	nop			; (mov r8, r8)
     f8a:	46bd      	mov	sp, r7
     f8c:	bd80      	pop	{r7, pc}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	20000090 	.word	0x20000090

00000f94 <SERCOM3_Handler>:
     f94:	b580      	push	{r7, lr}
     f96:	af00      	add	r7, sp, #0
     f98:	4b03      	ldr	r3, [pc, #12]	; (fa8 <SERCOM3_Handler+0x14>)
     f9a:	68db      	ldr	r3, [r3, #12]
     f9c:	2003      	movs	r0, #3
     f9e:	4798      	blx	r3
     fa0:	46c0      	nop			; (mov r8, r8)
     fa2:	46bd      	mov	sp, r7
     fa4:	bd80      	pop	{r7, pc}
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	20000090 	.word	0x20000090

00000fac <SERCOM4_Handler>:
     fac:	b580      	push	{r7, lr}
     fae:	af00      	add	r7, sp, #0
     fb0:	4b03      	ldr	r3, [pc, #12]	; (fc0 <SERCOM4_Handler+0x14>)
     fb2:	691b      	ldr	r3, [r3, #16]
     fb4:	2004      	movs	r0, #4
     fb6:	4798      	blx	r3
     fb8:	46c0      	nop			; (mov r8, r8)
     fba:	46bd      	mov	sp, r7
     fbc:	bd80      	pop	{r7, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	20000090 	.word	0x20000090

00000fc4 <SERCOM5_Handler>:
     fc4:	b580      	push	{r7, lr}
     fc6:	af00      	add	r7, sp, #0
     fc8:	4b03      	ldr	r3, [pc, #12]	; (fd8 <SERCOM5_Handler+0x14>)
     fca:	695b      	ldr	r3, [r3, #20]
     fcc:	2005      	movs	r0, #5
     fce:	4798      	blx	r3
     fd0:	46c0      	nop			; (mov r8, r8)
     fd2:	46bd      	mov	sp, r7
     fd4:	bd80      	pop	{r7, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	20000090 	.word	0x20000090

00000fdc <system_gclk_chan_get_config_defaults>:
{
     fdc:	b580      	push	{r7, lr}
     fde:	b082      	sub	sp, #8
     fe0:	af00      	add	r7, sp, #0
     fe2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	2200      	movs	r2, #0
     fe8:	701a      	strb	r2, [r3, #0]
}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	46bd      	mov	sp, r7
     fee:	b002      	add	sp, #8
     ff0:	bd80      	pop	{r7, pc}
	...

00000ff4 <system_apb_clock_set_mask>:
{
     ff4:	b580      	push	{r7, lr}
     ff6:	b082      	sub	sp, #8
     ff8:	af00      	add	r7, sp, #0
     ffa:	0002      	movs	r2, r0
     ffc:	6039      	str	r1, [r7, #0]
     ffe:	1dfb      	adds	r3, r7, #7
    1000:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1002:	1dfb      	adds	r3, r7, #7
    1004:	781b      	ldrb	r3, [r3, #0]
    1006:	2b01      	cmp	r3, #1
    1008:	d00a      	beq.n	1020 <system_apb_clock_set_mask+0x2c>
    100a:	2b02      	cmp	r3, #2
    100c:	d00f      	beq.n	102e <system_apb_clock_set_mask+0x3a>
    100e:	2b00      	cmp	r3, #0
    1010:	d114      	bne.n	103c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1012:	4b0e      	ldr	r3, [pc, #56]	; (104c <system_apb_clock_set_mask+0x58>)
    1014:	4a0d      	ldr	r2, [pc, #52]	; (104c <system_apb_clock_set_mask+0x58>)
    1016:	6991      	ldr	r1, [r2, #24]
    1018:	683a      	ldr	r2, [r7, #0]
    101a:	430a      	orrs	r2, r1
    101c:	619a      	str	r2, [r3, #24]
			break;
    101e:	e00f      	b.n	1040 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1020:	4b0a      	ldr	r3, [pc, #40]	; (104c <system_apb_clock_set_mask+0x58>)
    1022:	4a0a      	ldr	r2, [pc, #40]	; (104c <system_apb_clock_set_mask+0x58>)
    1024:	69d1      	ldr	r1, [r2, #28]
    1026:	683a      	ldr	r2, [r7, #0]
    1028:	430a      	orrs	r2, r1
    102a:	61da      	str	r2, [r3, #28]
			break;
    102c:	e008      	b.n	1040 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <system_apb_clock_set_mask+0x58>)
    1030:	4a06      	ldr	r2, [pc, #24]	; (104c <system_apb_clock_set_mask+0x58>)
    1032:	6a11      	ldr	r1, [r2, #32]
    1034:	683a      	ldr	r2, [r7, #0]
    1036:	430a      	orrs	r2, r1
    1038:	621a      	str	r2, [r3, #32]
			break;
    103a:	e001      	b.n	1040 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    103c:	2317      	movs	r3, #23
    103e:	e000      	b.n	1042 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1040:	2300      	movs	r3, #0
}
    1042:	0018      	movs	r0, r3
    1044:	46bd      	mov	sp, r7
    1046:	b002      	add	sp, #8
    1048:	bd80      	pop	{r7, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	40000400 	.word	0x40000400

00001050 <system_pinmux_get_config_defaults>:
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	2280      	movs	r2, #128	; 0x80
    105c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	2200      	movs	r2, #0
    1062:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	2201      	movs	r2, #1
    1068:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	2200      	movs	r2, #0
    106e:	70da      	strb	r2, [r3, #3]
}
    1070:	46c0      	nop			; (mov r8, r8)
    1072:	46bd      	mov	sp, r7
    1074:	b002      	add	sp, #8
    1076:	bd80      	pop	{r7, pc}

00001078 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <system_is_debugger_present+0x1c>)
    107e:	789b      	ldrb	r3, [r3, #2]
    1080:	b2db      	uxtb	r3, r3
    1082:	001a      	movs	r2, r3
    1084:	2302      	movs	r3, #2
    1086:	4013      	ands	r3, r2
    1088:	1e5a      	subs	r2, r3, #1
    108a:	4193      	sbcs	r3, r2
    108c:	b2db      	uxtb	r3, r3
}
    108e:	0018      	movs	r0, r3
    1090:	46bd      	mov	sp, r7
    1092:	bd80      	pop	{r7, pc}
    1094:	41002000 	.word	0x41002000

00001098 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1098:	b580      	push	{r7, lr}
    109a:	b084      	sub	sp, #16
    109c:	af00      	add	r7, sp, #0
    109e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	69db      	ldr	r3, [r3, #28]
    10aa:	1e5a      	subs	r2, r3, #1
    10ac:	4193      	sbcs	r3, r2
    10ae:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    10b0:	0018      	movs	r0, r3
    10b2:	46bd      	mov	sp, r7
    10b4:	b004      	add	sp, #16
    10b6:	bd80      	pop	{r7, pc}

000010b8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	af00      	add	r7, sp, #0
    10be:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10c0:	46c0      	nop			; (mov r8, r8)
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	0018      	movs	r0, r3
    10c6:	4b04      	ldr	r3, [pc, #16]	; (10d8 <_usart_wait_for_sync+0x20>)
    10c8:	4798      	blx	r3
    10ca:	1e03      	subs	r3, r0, #0
    10cc:	d1f9      	bne.n	10c2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	46bd      	mov	sp, r7
    10d2:	b002      	add	sp, #8
    10d4:	bd80      	pop	{r7, pc}
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	00001099 	.word	0x00001099

000010dc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    10dc:	b5b0      	push	{r4, r5, r7, lr}
    10de:	b08c      	sub	sp, #48	; 0x30
    10e0:	af02      	add	r7, sp, #8
    10e2:	6078      	str	r0, [r7, #4]
    10e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	681b      	ldr	r3, [r3, #0]
    10f0:	0018      	movs	r0, r3
    10f2:	4bab      	ldr	r3, [pc, #684]	; (13a0 <_usart_set_config+0x2c4>)
    10f4:	4798      	blx	r3
    10f6:	0003      	movs	r3, r0
    10f8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10fa:	697b      	ldr	r3, [r7, #20]
    10fc:	3314      	adds	r3, #20
    10fe:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1100:	2300      	movs	r3, #0
    1102:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    1104:	2300      	movs	r3, #0
    1106:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1108:	230a      	movs	r3, #10
    110a:	18fb      	adds	r3, r7, r3
    110c:	2200      	movs	r2, #0
    110e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1110:	231f      	movs	r3, #31
    1112:	18fb      	adds	r3, r7, r3
    1114:	2200      	movs	r2, #0
    1116:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1118:	231e      	movs	r3, #30
    111a:	18fb      	adds	r3, r7, r3
    111c:	2210      	movs	r2, #16
    111e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1120:	683b      	ldr	r3, [r7, #0]
    1122:	8a1b      	ldrh	r3, [r3, #16]
    1124:	2280      	movs	r2, #128	; 0x80
    1126:	01d2      	lsls	r2, r2, #7
    1128:	4293      	cmp	r3, r2
    112a:	d01c      	beq.n	1166 <_usart_set_config+0x8a>
    112c:	2280      	movs	r2, #128	; 0x80
    112e:	01d2      	lsls	r2, r2, #7
    1130:	4293      	cmp	r3, r2
    1132:	dc06      	bgt.n	1142 <_usart_set_config+0x66>
    1134:	2b00      	cmp	r3, #0
    1136:	d00d      	beq.n	1154 <_usart_set_config+0x78>
    1138:	2280      	movs	r2, #128	; 0x80
    113a:	0192      	lsls	r2, r2, #6
    113c:	4293      	cmp	r3, r2
    113e:	d024      	beq.n	118a <_usart_set_config+0xae>
    1140:	e035      	b.n	11ae <_usart_set_config+0xd2>
    1142:	22c0      	movs	r2, #192	; 0xc0
    1144:	01d2      	lsls	r2, r2, #7
    1146:	4293      	cmp	r3, r2
    1148:	d028      	beq.n	119c <_usart_set_config+0xc0>
    114a:	2280      	movs	r2, #128	; 0x80
    114c:	0212      	lsls	r2, r2, #8
    114e:	4293      	cmp	r3, r2
    1150:	d012      	beq.n	1178 <_usart_set_config+0x9c>
    1152:	e02c      	b.n	11ae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1154:	231f      	movs	r3, #31
    1156:	18fb      	adds	r3, r7, r3
    1158:	2200      	movs	r2, #0
    115a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    115c:	231e      	movs	r3, #30
    115e:	18fb      	adds	r3, r7, r3
    1160:	2210      	movs	r2, #16
    1162:	701a      	strb	r2, [r3, #0]
			break;
    1164:	e023      	b.n	11ae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1166:	231f      	movs	r3, #31
    1168:	18fb      	adds	r3, r7, r3
    116a:	2200      	movs	r2, #0
    116c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    116e:	231e      	movs	r3, #30
    1170:	18fb      	adds	r3, r7, r3
    1172:	2208      	movs	r2, #8
    1174:	701a      	strb	r2, [r3, #0]
			break;
    1176:	e01a      	b.n	11ae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1178:	231f      	movs	r3, #31
    117a:	18fb      	adds	r3, r7, r3
    117c:	2200      	movs	r2, #0
    117e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1180:	231e      	movs	r3, #30
    1182:	18fb      	adds	r3, r7, r3
    1184:	2203      	movs	r2, #3
    1186:	701a      	strb	r2, [r3, #0]
			break;
    1188:	e011      	b.n	11ae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    118a:	231f      	movs	r3, #31
    118c:	18fb      	adds	r3, r7, r3
    118e:	2201      	movs	r2, #1
    1190:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1192:	231e      	movs	r3, #30
    1194:	18fb      	adds	r3, r7, r3
    1196:	2210      	movs	r2, #16
    1198:	701a      	strb	r2, [r3, #0]
			break;
    119a:	e008      	b.n	11ae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    119c:	231f      	movs	r3, #31
    119e:	18fb      	adds	r3, r7, r3
    11a0:	2201      	movs	r2, #1
    11a2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    11a4:	231e      	movs	r3, #30
    11a6:	18fb      	adds	r3, r7, r3
    11a8:	2208      	movs	r2, #8
    11aa:	701a      	strb	r2, [r3, #0]
			break;
    11ac:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    11ae:	683b      	ldr	r3, [r7, #0]
    11b0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    11b2:	683b      	ldr	r3, [r7, #0]
    11b4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    11b6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    11b8:	683b      	ldr	r3, [r7, #0]
    11ba:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    11bc:	4313      	orrs	r3, r2
		config->sample_rate |
    11be:	683a      	ldr	r2, [r7, #0]
    11c0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    11c2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11c4:	683a      	ldr	r2, [r7, #0]
    11c6:	7e12      	ldrb	r2, [r2, #24]
    11c8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    11ca:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11cc:	683a      	ldr	r2, [r7, #0]
    11ce:	2126      	movs	r1, #38	; 0x26
    11d0:	5c52      	ldrb	r2, [r2, r1]
    11d2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    11d4:	4313      	orrs	r3, r2
    11d6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    11d8:	231d      	movs	r3, #29
    11da:	18fb      	adds	r3, r7, r3
    11dc:	2200      	movs	r2, #0
    11de:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	685b      	ldr	r3, [r3, #4]
    11e4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d01e      	beq.n	122a <_usart_set_config+0x14e>
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	0552      	lsls	r2, r2, #21
    11f0:	4293      	cmp	r3, r2
    11f2:	d14f      	bne.n	1294 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	2227      	movs	r2, #39	; 0x27
    11f8:	5c9b      	ldrb	r3, [r3, r2]
    11fa:	2201      	movs	r2, #1
    11fc:	4053      	eors	r3, r2
    11fe:	b2db      	uxtb	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d046      	beq.n	1292 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1204:	683b      	ldr	r3, [r7, #0]
    1206:	6a1d      	ldr	r5, [r3, #32]
    1208:	693b      	ldr	r3, [r7, #16]
    120a:	b2db      	uxtb	r3, r3
    120c:	0018      	movs	r0, r3
    120e:	4b65      	ldr	r3, [pc, #404]	; (13a4 <_usart_set_config+0x2c8>)
    1210:	4798      	blx	r3
    1212:	0001      	movs	r1, r0
    1214:	231d      	movs	r3, #29
    1216:	18fc      	adds	r4, r7, r3
    1218:	230a      	movs	r3, #10
    121a:	18fb      	adds	r3, r7, r3
    121c:	001a      	movs	r2, r3
    121e:	0028      	movs	r0, r5
    1220:	4b61      	ldr	r3, [pc, #388]	; (13a8 <_usart_set_config+0x2cc>)
    1222:	4798      	blx	r3
    1224:	0003      	movs	r3, r0
    1226:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1228:	e033      	b.n	1292 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    122a:	683b      	ldr	r3, [r7, #0]
    122c:	2227      	movs	r2, #39	; 0x27
    122e:	5c9b      	ldrb	r3, [r3, r2]
    1230:	2b00      	cmp	r3, #0
    1232:	d014      	beq.n	125e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1234:	683b      	ldr	r3, [r7, #0]
    1236:	6a18      	ldr	r0, [r3, #32]
    1238:	683b      	ldr	r3, [r7, #0]
    123a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    123c:	231d      	movs	r3, #29
    123e:	18fc      	adds	r4, r7, r3
    1240:	231f      	movs	r3, #31
    1242:	18fb      	adds	r3, r7, r3
    1244:	781d      	ldrb	r5, [r3, #0]
    1246:	230a      	movs	r3, #10
    1248:	18fa      	adds	r2, r7, r3
    124a:	231e      	movs	r3, #30
    124c:	18fb      	adds	r3, r7, r3
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	9300      	str	r3, [sp, #0]
    1252:	002b      	movs	r3, r5
    1254:	4d55      	ldr	r5, [pc, #340]	; (13ac <_usart_set_config+0x2d0>)
    1256:	47a8      	blx	r5
    1258:	0003      	movs	r3, r0
    125a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    125c:	e01a      	b.n	1294 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	6a1d      	ldr	r5, [r3, #32]
    1262:	693b      	ldr	r3, [r7, #16]
    1264:	b2db      	uxtb	r3, r3
    1266:	0018      	movs	r0, r3
    1268:	4b4e      	ldr	r3, [pc, #312]	; (13a4 <_usart_set_config+0x2c8>)
    126a:	4798      	blx	r3
				status_code =
    126c:	231d      	movs	r3, #29
    126e:	18fc      	adds	r4, r7, r3
    1270:	231f      	movs	r3, #31
    1272:	18fb      	adds	r3, r7, r3
    1274:	7819      	ldrb	r1, [r3, #0]
    1276:	230a      	movs	r3, #10
    1278:	18fa      	adds	r2, r7, r3
    127a:	231e      	movs	r3, #30
    127c:	18fb      	adds	r3, r7, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	9300      	str	r3, [sp, #0]
    1282:	000b      	movs	r3, r1
    1284:	0001      	movs	r1, r0
    1286:	0028      	movs	r0, r5
    1288:	4d48      	ldr	r5, [pc, #288]	; (13ac <_usart_set_config+0x2d0>)
    128a:	47a8      	blx	r5
    128c:	0003      	movs	r3, r0
    128e:	7023      	strb	r3, [r4, #0]
			break;
    1290:	e000      	b.n	1294 <_usart_set_config+0x1b8>
			break;
    1292:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1294:	231d      	movs	r3, #29
    1296:	18fb      	adds	r3, r7, r3
    1298:	781b      	ldrb	r3, [r3, #0]
    129a:	2b00      	cmp	r3, #0
    129c:	d003      	beq.n	12a6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    129e:	231d      	movs	r3, #29
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	e077      	b.n	1396 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    12a6:	683b      	ldr	r3, [r7, #0]
    12a8:	7e5b      	ldrb	r3, [r3, #25]
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	7e9a      	ldrb	r2, [r3, #26]
    12b2:	69bb      	ldr	r3, [r7, #24]
    12b4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	0018      	movs	r0, r3
    12ba:	4b3d      	ldr	r3, [pc, #244]	; (13b0 <_usart_set_config+0x2d4>)
    12bc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    12be:	230a      	movs	r3, #10
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	881a      	ldrh	r2, [r3, #0]
    12c4:	69bb      	ldr	r3, [r7, #24]
    12c6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    12c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	4313      	orrs	r3, r2
    12ce:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    12d0:	683b      	ldr	r3, [r7, #0]
    12d2:	2227      	movs	r2, #39	; 0x27
    12d4:	5c9b      	ldrb	r3, [r3, r2]
    12d6:	2201      	movs	r2, #1
    12d8:	4053      	eors	r3, r2
    12da:	b2db      	uxtb	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	d003      	beq.n	12e8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    12e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12e2:	2204      	movs	r2, #4
    12e4:	4313      	orrs	r3, r2
    12e6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    12e8:	683b      	ldr	r3, [r7, #0]
    12ea:	7e5b      	ldrb	r3, [r3, #25]
    12ec:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    12ee:	683b      	ldr	r3, [r7, #0]
    12f0:	7f1b      	ldrb	r3, [r3, #28]
    12f2:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    12f4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    12f6:	683b      	ldr	r3, [r7, #0]
    12f8:	7f5b      	ldrb	r3, [r3, #29]
    12fa:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    12fc:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	2124      	movs	r1, #36	; 0x24
    1302:	5c5b      	ldrb	r3, [r3, r1]
    1304:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1306:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1308:	683b      	ldr	r3, [r7, #0]
    130a:	2125      	movs	r1, #37	; 0x25
    130c:	5c5b      	ldrb	r3, [r3, r1]
    130e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1310:	4313      	orrs	r3, r2
	ctrlb =  
    1312:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	7a9b      	ldrb	r3, [r3, #10]
    1318:	001a      	movs	r2, r3
    131a:	6a3b      	ldr	r3, [r7, #32]
    131c:	4313      	orrs	r3, r2
    131e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1320:	683b      	ldr	r3, [r7, #0]
    1322:	7adb      	ldrb	r3, [r3, #11]
    1324:	001a      	movs	r2, r3
    1326:	6a3b      	ldr	r3, [r7, #32]
    1328:	4313      	orrs	r3, r2
    132a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    132c:	683b      	ldr	r3, [r7, #0]
    132e:	891b      	ldrh	r3, [r3, #8]
    1330:	2bff      	cmp	r3, #255	; 0xff
    1332:	d00b      	beq.n	134c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1336:	2280      	movs	r2, #128	; 0x80
    1338:	0452      	lsls	r2, r2, #17
    133a:	4313      	orrs	r3, r2
    133c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    133e:	683b      	ldr	r3, [r7, #0]
    1340:	891b      	ldrh	r3, [r3, #8]
    1342:	001a      	movs	r2, r3
    1344:	6a3b      	ldr	r3, [r7, #32]
    1346:	4313      	orrs	r3, r2
    1348:	623b      	str	r3, [r7, #32]
    134a:	e008      	b.n	135e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    134c:	683b      	ldr	r3, [r7, #0]
    134e:	7edb      	ldrb	r3, [r3, #27]
    1350:	2b00      	cmp	r3, #0
    1352:	d004      	beq.n	135e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1356:	2280      	movs	r2, #128	; 0x80
    1358:	04d2      	lsls	r2, r2, #19
    135a:	4313      	orrs	r3, r2
    135c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    135e:	683b      	ldr	r3, [r7, #0]
    1360:	222c      	movs	r2, #44	; 0x2c
    1362:	5c9b      	ldrb	r3, [r3, r2]
    1364:	2b00      	cmp	r3, #0
    1366:	d103      	bne.n	1370 <_usart_set_config+0x294>
    1368:	4b12      	ldr	r3, [pc, #72]	; (13b4 <_usart_set_config+0x2d8>)
    136a:	4798      	blx	r3
    136c:	1e03      	subs	r3, r0, #0
    136e:	d003      	beq.n	1378 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1372:	2280      	movs	r2, #128	; 0x80
    1374:	4313      	orrs	r3, r2
    1376:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	0018      	movs	r0, r3
    137c:	4b0c      	ldr	r3, [pc, #48]	; (13b0 <_usart_set_config+0x2d4>)
    137e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1380:	69bb      	ldr	r3, [r7, #24]
    1382:	6a3a      	ldr	r2, [r7, #32]
    1384:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	0018      	movs	r0, r3
    138a:	4b09      	ldr	r3, [pc, #36]	; (13b0 <_usart_set_config+0x2d4>)
    138c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    138e:	69bb      	ldr	r3, [r7, #24]
    1390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1392:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1394:	2300      	movs	r3, #0
}
    1396:	0018      	movs	r0, r3
    1398:	46bd      	mov	sp, r7
    139a:	b00a      	add	sp, #40	; 0x28
    139c:	bdb0      	pop	{r4, r5, r7, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	00000e39 	.word	0x00000e39
    13a4:	00002861 	.word	0x00002861
    13a8:	000009b3 	.word	0x000009b3
    13ac:	00000a31 	.word	0x00000a31
    13b0:	000010b9 	.word	0x000010b9
    13b4:	00001079 	.word	0x00001079

000013b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    13b8:	b590      	push	{r4, r7, lr}
    13ba:	b093      	sub	sp, #76	; 0x4c
    13bc:	af00      	add	r7, sp, #0
    13be:	60f8      	str	r0, [r7, #12]
    13c0:	60b9      	str	r1, [r7, #8]
    13c2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    13c4:	233b      	movs	r3, #59	; 0x3b
    13c6:	18fb      	adds	r3, r7, r3
    13c8:	2200      	movs	r2, #0
    13ca:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	68ba      	ldr	r2, [r7, #8]
    13d0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13d2:	68fb      	ldr	r3, [r7, #12]
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	681b      	ldr	r3, [r3, #0]
    13dc:	0018      	movs	r0, r3
    13de:	4b86      	ldr	r3, [pc, #536]	; (15f8 <usart_init+0x240>)
    13e0:	4798      	blx	r3
    13e2:	0003      	movs	r3, r0
    13e4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13e8:	3302      	adds	r3, #2
    13ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13ee:	3314      	adds	r3, #20
    13f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13f4:	681b      	ldr	r3, [r3, #0]
    13f6:	2201      	movs	r2, #1
    13f8:	4013      	ands	r3, r2
    13fa:	d001      	beq.n	1400 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    13fc:	2305      	movs	r3, #5
    13fe:	e0f6      	b.n	15ee <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1402:	681b      	ldr	r3, [r3, #0]
    1404:	2202      	movs	r2, #2
    1406:	4013      	ands	r3, r2
    1408:	d001      	beq.n	140e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    140a:	231c      	movs	r3, #28
    140c:	e0ef      	b.n	15ee <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    140e:	2201      	movs	r2, #1
    1410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1412:	409a      	lsls	r2, r3
    1414:	0013      	movs	r3, r2
    1416:	0019      	movs	r1, r3
    1418:	2002      	movs	r0, #2
    141a:	4b78      	ldr	r3, [pc, #480]	; (15fc <usart_init+0x244>)
    141c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    141e:	2324      	movs	r3, #36	; 0x24
    1420:	18fb      	adds	r3, r7, r3
    1422:	0018      	movs	r0, r3
    1424:	4b76      	ldr	r3, [pc, #472]	; (1600 <usart_init+0x248>)
    1426:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	222d      	movs	r2, #45	; 0x2d
    142c:	5c9a      	ldrb	r2, [r3, r2]
    142e:	2324      	movs	r3, #36	; 0x24
    1430:	18fb      	adds	r3, r7, r3
    1432:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1434:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1436:	b2db      	uxtb	r3, r3
    1438:	2224      	movs	r2, #36	; 0x24
    143a:	18ba      	adds	r2, r7, r2
    143c:	0011      	movs	r1, r2
    143e:	0018      	movs	r0, r3
    1440:	4b70      	ldr	r3, [pc, #448]	; (1604 <usart_init+0x24c>)
    1442:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1444:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1446:	b2db      	uxtb	r3, r3
    1448:	0018      	movs	r0, r3
    144a:	4b6f      	ldr	r3, [pc, #444]	; (1608 <usart_init+0x250>)
    144c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	222d      	movs	r2, #45	; 0x2d
    1452:	5c9b      	ldrb	r3, [r3, r2]
    1454:	2100      	movs	r1, #0
    1456:	0018      	movs	r0, r3
    1458:	4b6c      	ldr	r3, [pc, #432]	; (160c <usart_init+0x254>)
    145a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	7ada      	ldrb	r2, [r3, #11]
    1460:	68fb      	ldr	r3, [r7, #12]
    1462:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1464:	687b      	ldr	r3, [r7, #4]
    1466:	2224      	movs	r2, #36	; 0x24
    1468:	5c9a      	ldrb	r2, [r3, r2]
    146a:	68fb      	ldr	r3, [r7, #12]
    146c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	2225      	movs	r2, #37	; 0x25
    1472:	5c9a      	ldrb	r2, [r3, r2]
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	7eda      	ldrb	r2, [r3, #27]
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	7f1a      	ldrb	r2, [r3, #28]
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1488:	233b      	movs	r3, #59	; 0x3b
    148a:	18fc      	adds	r4, r7, r3
    148c:	687a      	ldr	r2, [r7, #4]
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	0011      	movs	r1, r2
    1492:	0018      	movs	r0, r3
    1494:	4b5e      	ldr	r3, [pc, #376]	; (1610 <usart_init+0x258>)
    1496:	4798      	blx	r3
    1498:	0003      	movs	r3, r0
    149a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    149c:	233b      	movs	r3, #59	; 0x3b
    149e:	18fb      	adds	r3, r7, r3
    14a0:	781b      	ldrb	r3, [r3, #0]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d003      	beq.n	14ae <usart_init+0xf6>
		return status_code;
    14a6:	233b      	movs	r3, #59	; 0x3b
    14a8:	18fb      	adds	r3, r7, r3
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	e09f      	b.n	15ee <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    14ae:	2320      	movs	r3, #32
    14b0:	18fb      	adds	r3, r7, r3
    14b2:	0018      	movs	r0, r3
    14b4:	4b57      	ldr	r3, [pc, #348]	; (1614 <usart_init+0x25c>)
    14b6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14b8:	2320      	movs	r3, #32
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	2200      	movs	r2, #0
    14be:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14c0:	2320      	movs	r3, #32
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	2200      	movs	r2, #0
    14c6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    14cc:	2310      	movs	r3, #16
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    14d6:	2310      	movs	r3, #16
    14d8:	18fb      	adds	r3, r7, r3
    14da:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    14e0:	2310      	movs	r3, #16
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    14ea:	2310      	movs	r3, #16
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    14f0:	2347      	movs	r3, #71	; 0x47
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	2200      	movs	r2, #0
    14f6:	701a      	strb	r2, [r3, #0]
    14f8:	e02c      	b.n	1554 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14fa:	2347      	movs	r3, #71	; 0x47
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	781a      	ldrb	r2, [r3, #0]
    1500:	2310      	movs	r3, #16
    1502:	18fb      	adds	r3, r7, r3
    1504:	0092      	lsls	r2, r2, #2
    1506:	58d3      	ldr	r3, [r2, r3]
    1508:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    150c:	2b00      	cmp	r3, #0
    150e:	d109      	bne.n	1524 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1510:	2347      	movs	r3, #71	; 0x47
    1512:	18fb      	adds	r3, r7, r3
    1514:	781a      	ldrb	r2, [r3, #0]
    1516:	68bb      	ldr	r3, [r7, #8]
    1518:	0011      	movs	r1, r2
    151a:	0018      	movs	r0, r3
    151c:	4b3e      	ldr	r3, [pc, #248]	; (1618 <usart_init+0x260>)
    151e:	4798      	blx	r3
    1520:	0003      	movs	r3, r0
    1522:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1526:	3301      	adds	r3, #1
    1528:	d00d      	beq.n	1546 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    152c:	b2da      	uxtb	r2, r3
    152e:	2320      	movs	r3, #32
    1530:	18fb      	adds	r3, r7, r3
    1532:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1536:	0c1b      	lsrs	r3, r3, #16
    1538:	b2db      	uxtb	r3, r3
    153a:	2220      	movs	r2, #32
    153c:	18ba      	adds	r2, r7, r2
    153e:	0011      	movs	r1, r2
    1540:	0018      	movs	r0, r3
    1542:	4b36      	ldr	r3, [pc, #216]	; (161c <usart_init+0x264>)
    1544:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1546:	2347      	movs	r3, #71	; 0x47
    1548:	18fb      	adds	r3, r7, r3
    154a:	781a      	ldrb	r2, [r3, #0]
    154c:	2347      	movs	r3, #71	; 0x47
    154e:	18fb      	adds	r3, r7, r3
    1550:	3201      	adds	r2, #1
    1552:	701a      	strb	r2, [r3, #0]
    1554:	2347      	movs	r3, #71	; 0x47
    1556:	18fb      	adds	r3, r7, r3
    1558:	781b      	ldrb	r3, [r3, #0]
    155a:	2b03      	cmp	r3, #3
    155c:	d9cd      	bls.n	14fa <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    155e:	2300      	movs	r3, #0
    1560:	63fb      	str	r3, [r7, #60]	; 0x3c
    1562:	e00a      	b.n	157a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1564:	68fa      	ldr	r2, [r7, #12]
    1566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1568:	3302      	adds	r3, #2
    156a:	009b      	lsls	r3, r3, #2
    156c:	18d3      	adds	r3, r2, r3
    156e:	3304      	adds	r3, #4
    1570:	2200      	movs	r2, #0
    1572:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1576:	3301      	adds	r3, #1
    1578:	63fb      	str	r3, [r7, #60]	; 0x3c
    157a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    157c:	2b05      	cmp	r3, #5
    157e:	d9f1      	bls.n	1564 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	2200      	movs	r2, #0
    1584:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2200      	movs	r2, #0
    158a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	2200      	movs	r2, #0
    1590:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	2200      	movs	r2, #0
    1596:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	2230      	movs	r2, #48	; 0x30
    159c:	2100      	movs	r1, #0
    159e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	2231      	movs	r2, #49	; 0x31
    15a4:	2100      	movs	r1, #0
    15a6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	2232      	movs	r2, #50	; 0x32
    15ac:	2100      	movs	r1, #0
    15ae:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	2233      	movs	r2, #51	; 0x33
    15b4:	2100      	movs	r1, #0
    15b6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    15b8:	68fb      	ldr	r3, [r7, #12]
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	2227      	movs	r2, #39	; 0x27
    15be:	18bc      	adds	r4, r7, r2
    15c0:	0018      	movs	r0, r3
    15c2:	4b0d      	ldr	r3, [pc, #52]	; (15f8 <usart_init+0x240>)
    15c4:	4798      	blx	r3
    15c6:	0003      	movs	r3, r0
    15c8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    15ca:	4a15      	ldr	r2, [pc, #84]	; (1620 <usart_init+0x268>)
    15cc:	2327      	movs	r3, #39	; 0x27
    15ce:	18fb      	adds	r3, r7, r3
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	0011      	movs	r1, r2
    15d4:	0018      	movs	r0, r3
    15d6:	4b13      	ldr	r3, [pc, #76]	; (1624 <usart_init+0x26c>)
    15d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15da:	2327      	movs	r3, #39	; 0x27
    15dc:	18fb      	adds	r3, r7, r3
    15de:	781a      	ldrb	r2, [r3, #0]
    15e0:	4b11      	ldr	r3, [pc, #68]	; (1628 <usart_init+0x270>)
    15e2:	0092      	lsls	r2, r2, #2
    15e4:	68f9      	ldr	r1, [r7, #12]
    15e6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    15e8:	233b      	movs	r3, #59	; 0x3b
    15ea:	18fb      	adds	r3, r7, r3
    15ec:	781b      	ldrb	r3, [r3, #0]
}
    15ee:	0018      	movs	r0, r3
    15f0:	46bd      	mov	sp, r7
    15f2:	b013      	add	sp, #76	; 0x4c
    15f4:	bd90      	pop	{r4, r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00000e39 	.word	0x00000e39
    15fc:	00000ff5 	.word	0x00000ff5
    1600:	00000fdd 	.word	0x00000fdd
    1604:	0000273d 	.word	0x0000273d
    1608:	00002781 	.word	0x00002781
    160c:	00000bf1 	.word	0x00000bf1
    1610:	000010dd 	.word	0x000010dd
    1614:	00001051 	.word	0x00001051
    1618:	00000c7d 	.word	0x00000c7d
    161c:	00002a29 	.word	0x00002a29
    1620:	000017c1 	.word	0x000017c1
    1624:	00000e9d 	.word	0x00000e9d
    1628:	20000148 	.word	0x20000148

0000162c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    162c:	b580      	push	{r7, lr}
    162e:	b084      	sub	sp, #16
    1630:	af00      	add	r7, sp, #0
    1632:	6078      	str	r0, [r7, #4]
    1634:	000a      	movs	r2, r1
    1636:	1cbb      	adds	r3, r7, #2
    1638:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	79db      	ldrb	r3, [r3, #7]
    1644:	2201      	movs	r2, #1
    1646:	4053      	eors	r3, r2
    1648:	b2db      	uxtb	r3, r3
    164a:	2b00      	cmp	r3, #0
    164c:	d001      	beq.n	1652 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    164e:	231c      	movs	r3, #28
    1650:	e017      	b.n	1682 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1656:	b29b      	uxth	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	d001      	beq.n	1660 <usart_write_wait+0x34>
		return STATUS_BUSY;
    165c:	2305      	movs	r3, #5
    165e:	e010      	b.n	1682 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	0018      	movs	r0, r3
    1664:	4b09      	ldr	r3, [pc, #36]	; (168c <usart_write_wait+0x60>)
    1666:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	1cba      	adds	r2, r7, #2
    166c:	8812      	ldrh	r2, [r2, #0]
    166e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1670:	46c0      	nop			; (mov r8, r8)
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	7e1b      	ldrb	r3, [r3, #24]
    1676:	b2db      	uxtb	r3, r3
    1678:	001a      	movs	r2, r3
    167a:	2302      	movs	r3, #2
    167c:	4013      	ands	r3, r2
    167e:	d0f8      	beq.n	1672 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1680:	2300      	movs	r3, #0
}
    1682:	0018      	movs	r0, r3
    1684:	46bd      	mov	sp, r7
    1686:	b004      	add	sp, #16
    1688:	bd80      	pop	{r7, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	000010b9 	.word	0x000010b9

00001690 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1690:	b580      	push	{r7, lr}
    1692:	b084      	sub	sp, #16
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
    1698:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    169a:	687b      	ldr	r3, [r7, #4]
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	799b      	ldrb	r3, [r3, #6]
    16a4:	2201      	movs	r2, #1
    16a6:	4053      	eors	r3, r2
    16a8:	b2db      	uxtb	r3, r3
    16aa:	2b00      	cmp	r3, #0
    16ac:	d001      	beq.n	16b2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    16ae:	231c      	movs	r3, #28
    16b0:	e05e      	b.n	1770 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    16b6:	b29b      	uxth	r3, r3
    16b8:	2b00      	cmp	r3, #0
    16ba:	d001      	beq.n	16c0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    16bc:	2305      	movs	r3, #5
    16be:	e057      	b.n	1770 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16c0:	68fb      	ldr	r3, [r7, #12]
    16c2:	7e1b      	ldrb	r3, [r3, #24]
    16c4:	b2db      	uxtb	r3, r3
    16c6:	001a      	movs	r2, r3
    16c8:	2304      	movs	r3, #4
    16ca:	4013      	ands	r3, r2
    16cc:	d101      	bne.n	16d2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    16ce:	2305      	movs	r3, #5
    16d0:	e04e      	b.n	1770 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	0018      	movs	r0, r3
    16d6:	4b28      	ldr	r3, [pc, #160]	; (1778 <usart_read_wait+0xe8>)
    16d8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16da:	68fb      	ldr	r3, [r7, #12]
    16dc:	8b5b      	ldrh	r3, [r3, #26]
    16de:	b29b      	uxth	r3, r3
    16e0:	b2da      	uxtb	r2, r3
    16e2:	230b      	movs	r3, #11
    16e4:	18fb      	adds	r3, r7, r3
    16e6:	213f      	movs	r1, #63	; 0x3f
    16e8:	400a      	ands	r2, r1
    16ea:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    16ec:	230b      	movs	r3, #11
    16ee:	18fb      	adds	r3, r7, r3
    16f0:	781b      	ldrb	r3, [r3, #0]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d036      	beq.n	1764 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16f6:	230b      	movs	r3, #11
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	781b      	ldrb	r3, [r3, #0]
    16fc:	2202      	movs	r2, #2
    16fe:	4013      	ands	r3, r2
    1700:	d004      	beq.n	170c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1702:	68fb      	ldr	r3, [r7, #12]
    1704:	2202      	movs	r2, #2
    1706:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    1708:	231a      	movs	r3, #26
    170a:	e031      	b.n	1770 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    170c:	230b      	movs	r3, #11
    170e:	18fb      	adds	r3, r7, r3
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	2204      	movs	r2, #4
    1714:	4013      	ands	r3, r2
    1716:	d004      	beq.n	1722 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1718:	68fb      	ldr	r3, [r7, #12]
    171a:	2204      	movs	r2, #4
    171c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    171e:	231e      	movs	r3, #30
    1720:	e026      	b.n	1770 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1722:	230b      	movs	r3, #11
    1724:	18fb      	adds	r3, r7, r3
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	2201      	movs	r2, #1
    172a:	4013      	ands	r3, r2
    172c:	d004      	beq.n	1738 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    172e:	68fb      	ldr	r3, [r7, #12]
    1730:	2201      	movs	r2, #1
    1732:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1734:	2313      	movs	r3, #19
    1736:	e01b      	b.n	1770 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1738:	230b      	movs	r3, #11
    173a:	18fb      	adds	r3, r7, r3
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	2210      	movs	r2, #16
    1740:	4013      	ands	r3, r2
    1742:	d004      	beq.n	174e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1744:	68fb      	ldr	r3, [r7, #12]
    1746:	2210      	movs	r2, #16
    1748:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    174a:	2342      	movs	r3, #66	; 0x42
    174c:	e010      	b.n	1770 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    174e:	230b      	movs	r3, #11
    1750:	18fb      	adds	r3, r7, r3
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	2220      	movs	r2, #32
    1756:	4013      	ands	r3, r2
    1758:	d004      	beq.n	1764 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    175a:	68fb      	ldr	r3, [r7, #12]
    175c:	2220      	movs	r2, #32
    175e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1760:	2341      	movs	r3, #65	; 0x41
    1762:	e005      	b.n	1770 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1768:	b29a      	uxth	r2, r3
    176a:	683b      	ldr	r3, [r7, #0]
    176c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    176e:	2300      	movs	r3, #0
}
    1770:	0018      	movs	r0, r3
    1772:	46bd      	mov	sp, r7
    1774:	b004      	add	sp, #16
    1776:	bd80      	pop	{r7, pc}
    1778:	000010b9 	.word	0x000010b9

0000177c <usart_is_syncing>:
{
    177c:	b580      	push	{r7, lr}
    177e:	b084      	sub	sp, #16
    1780:	af00      	add	r7, sp, #0
    1782:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    178a:	68fb      	ldr	r3, [r7, #12]
    178c:	69db      	ldr	r3, [r3, #28]
    178e:	1e5a      	subs	r2, r3, #1
    1790:	4193      	sbcs	r3, r2
    1792:	b2db      	uxtb	r3, r3
}
    1794:	0018      	movs	r0, r3
    1796:	46bd      	mov	sp, r7
    1798:	b004      	add	sp, #16
    179a:	bd80      	pop	{r7, pc}

0000179c <_usart_wait_for_sync>:
{
    179c:	b580      	push	{r7, lr}
    179e:	b082      	sub	sp, #8
    17a0:	af00      	add	r7, sp, #0
    17a2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    17a4:	46c0      	nop			; (mov r8, r8)
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	0018      	movs	r0, r3
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <_usart_wait_for_sync+0x20>)
    17ac:	4798      	blx	r3
    17ae:	1e03      	subs	r3, r0, #0
    17b0:	d1f9      	bne.n	17a6 <_usart_wait_for_sync+0xa>
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b002      	add	sp, #8
    17b8:	bd80      	pop	{r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	0000177d 	.word	0x0000177d

000017c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b088      	sub	sp, #32
    17c4:	af00      	add	r7, sp, #0
    17c6:	0002      	movs	r2, r0
    17c8:	1dfb      	adds	r3, r7, #7
    17ca:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    17cc:	1dfb      	adds	r3, r7, #7
    17ce:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    17d0:	4ba3      	ldr	r3, [pc, #652]	; (1a60 <_usart_interrupt_handler+0x2a0>)
    17d2:	0092      	lsls	r2, r2, #2
    17d4:	58d3      	ldr	r3, [r2, r3]
    17d6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    17d8:	69bb      	ldr	r3, [r7, #24]
    17da:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    17dc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    17de:	69bb      	ldr	r3, [r7, #24]
    17e0:	0018      	movs	r0, r3
    17e2:	4ba0      	ldr	r3, [pc, #640]	; (1a64 <_usart_interrupt_handler+0x2a4>)
    17e4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17e6:	697b      	ldr	r3, [r7, #20]
    17e8:	7e1b      	ldrb	r3, [r3, #24]
    17ea:	b2da      	uxtb	r2, r3
    17ec:	2312      	movs	r3, #18
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    17f2:	697b      	ldr	r3, [r7, #20]
    17f4:	7d9b      	ldrb	r3, [r3, #22]
    17f6:	b2db      	uxtb	r3, r3
    17f8:	b29a      	uxth	r2, r3
    17fa:	2312      	movs	r3, #18
    17fc:	18fb      	adds	r3, r7, r3
    17fe:	2112      	movs	r1, #18
    1800:	1879      	adds	r1, r7, r1
    1802:	8809      	ldrh	r1, [r1, #0]
    1804:	400a      	ands	r2, r1
    1806:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1808:	69bb      	ldr	r3, [r7, #24]
    180a:	2230      	movs	r2, #48	; 0x30
    180c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    180e:	69ba      	ldr	r2, [r7, #24]
    1810:	2131      	movs	r1, #49	; 0x31
    1812:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1814:	4013      	ands	r3, r2
    1816:	b2da      	uxtb	r2, r3
    1818:	2310      	movs	r3, #16
    181a:	18fb      	adds	r3, r7, r3
    181c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    181e:	2312      	movs	r3, #18
    1820:	18fb      	adds	r3, r7, r3
    1822:	881b      	ldrh	r3, [r3, #0]
    1824:	2201      	movs	r2, #1
    1826:	4013      	ands	r3, r2
    1828:	d044      	beq.n	18b4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    182a:	69bb      	ldr	r3, [r7, #24]
    182c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    182e:	b29b      	uxth	r3, r3
    1830:	2b00      	cmp	r3, #0
    1832:	d03c      	beq.n	18ae <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1834:	69bb      	ldr	r3, [r7, #24]
    1836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1838:	781b      	ldrb	r3, [r3, #0]
    183a:	b2da      	uxtb	r2, r3
    183c:	231c      	movs	r3, #28
    183e:	18fb      	adds	r3, r7, r3
    1840:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1842:	69bb      	ldr	r3, [r7, #24]
    1844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1846:	1c5a      	adds	r2, r3, #1
    1848:	69bb      	ldr	r3, [r7, #24]
    184a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    184c:	69bb      	ldr	r3, [r7, #24]
    184e:	795b      	ldrb	r3, [r3, #5]
    1850:	2b01      	cmp	r3, #1
    1852:	d113      	bne.n	187c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1854:	69bb      	ldr	r3, [r7, #24]
    1856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1858:	781b      	ldrb	r3, [r3, #0]
    185a:	b2db      	uxtb	r3, r3
    185c:	021b      	lsls	r3, r3, #8
    185e:	b21a      	sxth	r2, r3
    1860:	231c      	movs	r3, #28
    1862:	18fb      	adds	r3, r7, r3
    1864:	2100      	movs	r1, #0
    1866:	5e5b      	ldrsh	r3, [r3, r1]
    1868:	4313      	orrs	r3, r2
    186a:	b21a      	sxth	r2, r3
    186c:	231c      	movs	r3, #28
    186e:	18fb      	adds	r3, r7, r3
    1870:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1872:	69bb      	ldr	r3, [r7, #24]
    1874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1876:	1c5a      	adds	r2, r3, #1
    1878:	69bb      	ldr	r3, [r7, #24]
    187a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    187c:	231c      	movs	r3, #28
    187e:	18fb      	adds	r3, r7, r3
    1880:	881b      	ldrh	r3, [r3, #0]
    1882:	05db      	lsls	r3, r3, #23
    1884:	0ddb      	lsrs	r3, r3, #23
    1886:	b29a      	uxth	r2, r3
    1888:	697b      	ldr	r3, [r7, #20]
    188a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    188c:	69bb      	ldr	r3, [r7, #24]
    188e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1890:	b29b      	uxth	r3, r3
    1892:	3b01      	subs	r3, #1
    1894:	b29b      	uxth	r3, r3
    1896:	69ba      	ldr	r2, [r7, #24]
    1898:	1c19      	adds	r1, r3, #0
    189a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    189c:	2b00      	cmp	r3, #0
    189e:	d109      	bne.n	18b4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18a0:	697b      	ldr	r3, [r7, #20]
    18a2:	2201      	movs	r2, #1
    18a4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18a6:	697b      	ldr	r3, [r7, #20]
    18a8:	2202      	movs	r2, #2
    18aa:	759a      	strb	r2, [r3, #22]
    18ac:	e002      	b.n	18b4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18ae:	697b      	ldr	r3, [r7, #20]
    18b0:	2201      	movs	r2, #1
    18b2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18b4:	2312      	movs	r3, #18
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	881b      	ldrh	r3, [r3, #0]
    18ba:	2202      	movs	r2, #2
    18bc:	4013      	ands	r3, r2
    18be:	d011      	beq.n	18e4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18c0:	697b      	ldr	r3, [r7, #20]
    18c2:	2202      	movs	r2, #2
    18c4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    18c6:	69bb      	ldr	r3, [r7, #24]
    18c8:	2233      	movs	r2, #51	; 0x33
    18ca:	2100      	movs	r1, #0
    18cc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18ce:	2310      	movs	r3, #16
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	881b      	ldrh	r3, [r3, #0]
    18d4:	2201      	movs	r2, #1
    18d6:	4013      	ands	r3, r2
    18d8:	d004      	beq.n	18e4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    18da:	69bb      	ldr	r3, [r7, #24]
    18dc:	68db      	ldr	r3, [r3, #12]
    18de:	69ba      	ldr	r2, [r7, #24]
    18e0:	0010      	movs	r0, r2
    18e2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    18e4:	2312      	movs	r3, #18
    18e6:	18fb      	adds	r3, r7, r3
    18e8:	881b      	ldrh	r3, [r3, #0]
    18ea:	2204      	movs	r2, #4
    18ec:	4013      	ands	r3, r2
    18ee:	d100      	bne.n	18f2 <_usart_interrupt_handler+0x132>
    18f0:	e0bd      	b.n	1a6e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    18f2:	69bb      	ldr	r3, [r7, #24]
    18f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    18f6:	b29b      	uxth	r3, r3
    18f8:	2b00      	cmp	r3, #0
    18fa:	d100      	bne.n	18fe <_usart_interrupt_handler+0x13e>
    18fc:	e0b4      	b.n	1a68 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18fe:	697b      	ldr	r3, [r7, #20]
    1900:	8b5b      	ldrh	r3, [r3, #26]
    1902:	b29b      	uxth	r3, r3
    1904:	b2da      	uxtb	r2, r3
    1906:	231f      	movs	r3, #31
    1908:	18fb      	adds	r3, r7, r3
    190a:	213f      	movs	r1, #63	; 0x3f
    190c:	400a      	ands	r2, r1
    190e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1910:	231f      	movs	r3, #31
    1912:	18fb      	adds	r3, r7, r3
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	2208      	movs	r2, #8
    1918:	4013      	ands	r3, r2
    191a:	d007      	beq.n	192c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    191c:	231f      	movs	r3, #31
    191e:	18fb      	adds	r3, r7, r3
    1920:	221f      	movs	r2, #31
    1922:	18ba      	adds	r2, r7, r2
    1924:	7812      	ldrb	r2, [r2, #0]
    1926:	2108      	movs	r1, #8
    1928:	438a      	bics	r2, r1
    192a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    192c:	231f      	movs	r3, #31
    192e:	18fb      	adds	r3, r7, r3
    1930:	781b      	ldrb	r3, [r3, #0]
    1932:	2b00      	cmp	r3, #0
    1934:	d050      	beq.n	19d8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1936:	231f      	movs	r3, #31
    1938:	18fb      	adds	r3, r7, r3
    193a:	781b      	ldrb	r3, [r3, #0]
    193c:	2202      	movs	r2, #2
    193e:	4013      	ands	r3, r2
    1940:	d007      	beq.n	1952 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1942:	69bb      	ldr	r3, [r7, #24]
    1944:	2232      	movs	r2, #50	; 0x32
    1946:	211a      	movs	r1, #26
    1948:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    194a:	697b      	ldr	r3, [r7, #20]
    194c:	2202      	movs	r2, #2
    194e:	835a      	strh	r2, [r3, #26]
    1950:	e036      	b.n	19c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1952:	231f      	movs	r3, #31
    1954:	18fb      	adds	r3, r7, r3
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	2204      	movs	r2, #4
    195a:	4013      	ands	r3, r2
    195c:	d007      	beq.n	196e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    195e:	69bb      	ldr	r3, [r7, #24]
    1960:	2232      	movs	r2, #50	; 0x32
    1962:	211e      	movs	r1, #30
    1964:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1966:	697b      	ldr	r3, [r7, #20]
    1968:	2204      	movs	r2, #4
    196a:	835a      	strh	r2, [r3, #26]
    196c:	e028      	b.n	19c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    196e:	231f      	movs	r3, #31
    1970:	18fb      	adds	r3, r7, r3
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	2201      	movs	r2, #1
    1976:	4013      	ands	r3, r2
    1978:	d007      	beq.n	198a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    197a:	69bb      	ldr	r3, [r7, #24]
    197c:	2232      	movs	r2, #50	; 0x32
    197e:	2113      	movs	r1, #19
    1980:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1982:	697b      	ldr	r3, [r7, #20]
    1984:	2201      	movs	r2, #1
    1986:	835a      	strh	r2, [r3, #26]
    1988:	e01a      	b.n	19c0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    198a:	231f      	movs	r3, #31
    198c:	18fb      	adds	r3, r7, r3
    198e:	781b      	ldrb	r3, [r3, #0]
    1990:	2210      	movs	r2, #16
    1992:	4013      	ands	r3, r2
    1994:	d007      	beq.n	19a6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1996:	69bb      	ldr	r3, [r7, #24]
    1998:	2232      	movs	r2, #50	; 0x32
    199a:	2142      	movs	r1, #66	; 0x42
    199c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    199e:	697b      	ldr	r3, [r7, #20]
    19a0:	2210      	movs	r2, #16
    19a2:	835a      	strh	r2, [r3, #26]
    19a4:	e00c      	b.n	19c0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19a6:	231f      	movs	r3, #31
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2220      	movs	r2, #32
    19ae:	4013      	ands	r3, r2
    19b0:	d006      	beq.n	19c0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19b2:	69bb      	ldr	r3, [r7, #24]
    19b4:	2232      	movs	r2, #50	; 0x32
    19b6:	2141      	movs	r1, #65	; 0x41
    19b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19ba:	697b      	ldr	r3, [r7, #20]
    19bc:	2220      	movs	r2, #32
    19be:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    19c0:	2310      	movs	r3, #16
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	881b      	ldrh	r3, [r3, #0]
    19c6:	2204      	movs	r2, #4
    19c8:	4013      	ands	r3, r2
				if (callback_status
    19ca:	d050      	beq.n	1a6e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19cc:	69bb      	ldr	r3, [r7, #24]
    19ce:	695b      	ldr	r3, [r3, #20]
    19d0:	69ba      	ldr	r2, [r7, #24]
    19d2:	0010      	movs	r0, r2
    19d4:	4798      	blx	r3
    19d6:	e04a      	b.n	1a6e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19d8:	697b      	ldr	r3, [r7, #20]
    19da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    19dc:	b29a      	uxth	r2, r3
    19de:	230e      	movs	r3, #14
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	05d2      	lsls	r2, r2, #23
    19e4:	0dd2      	lsrs	r2, r2, #23
    19e6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19e8:	69bb      	ldr	r3, [r7, #24]
    19ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19ec:	220e      	movs	r2, #14
    19ee:	18ba      	adds	r2, r7, r2
    19f0:	8812      	ldrh	r2, [r2, #0]
    19f2:	b2d2      	uxtb	r2, r2
    19f4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    19f6:	69bb      	ldr	r3, [r7, #24]
    19f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19fa:	1c5a      	adds	r2, r3, #1
    19fc:	69bb      	ldr	r3, [r7, #24]
    19fe:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a00:	69bb      	ldr	r3, [r7, #24]
    1a02:	795b      	ldrb	r3, [r3, #5]
    1a04:	2b01      	cmp	r3, #1
    1a06:	d10d      	bne.n	1a24 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a08:	69bb      	ldr	r3, [r7, #24]
    1a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a0c:	220e      	movs	r2, #14
    1a0e:	18ba      	adds	r2, r7, r2
    1a10:	8812      	ldrh	r2, [r2, #0]
    1a12:	0a12      	lsrs	r2, r2, #8
    1a14:	b292      	uxth	r2, r2
    1a16:	b2d2      	uxtb	r2, r2
    1a18:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a1a:	69bb      	ldr	r3, [r7, #24]
    1a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a1e:	1c5a      	adds	r2, r3, #1
    1a20:	69bb      	ldr	r3, [r7, #24]
    1a22:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a24:	69bb      	ldr	r3, [r7, #24]
    1a26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1a28:	b29b      	uxth	r3, r3
    1a2a:	3b01      	subs	r3, #1
    1a2c:	b29b      	uxth	r3, r3
    1a2e:	69ba      	ldr	r2, [r7, #24]
    1a30:	1c19      	adds	r1, r3, #0
    1a32:	8591      	strh	r1, [r2, #44]	; 0x2c
    1a34:	2b00      	cmp	r3, #0
    1a36:	d11a      	bne.n	1a6e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a38:	697b      	ldr	r3, [r7, #20]
    1a3a:	2204      	movs	r2, #4
    1a3c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1a3e:	69bb      	ldr	r3, [r7, #24]
    1a40:	2232      	movs	r2, #50	; 0x32
    1a42:	2100      	movs	r1, #0
    1a44:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1a46:	2310      	movs	r3, #16
    1a48:	18fb      	adds	r3, r7, r3
    1a4a:	881b      	ldrh	r3, [r3, #0]
    1a4c:	2202      	movs	r2, #2
    1a4e:	4013      	ands	r3, r2
					if (callback_status
    1a50:	d00d      	beq.n	1a6e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a52:	69bb      	ldr	r3, [r7, #24]
    1a54:	691b      	ldr	r3, [r3, #16]
    1a56:	69ba      	ldr	r2, [r7, #24]
    1a58:	0010      	movs	r0, r2
    1a5a:	4798      	blx	r3
    1a5c:	e007      	b.n	1a6e <_usart_interrupt_handler+0x2ae>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	20000148 	.word	0x20000148
    1a64:	0000179d 	.word	0x0000179d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a68:	697b      	ldr	r3, [r7, #20]
    1a6a:	2204      	movs	r2, #4
    1a6c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a6e:	2312      	movs	r3, #18
    1a70:	18fb      	adds	r3, r7, r3
    1a72:	881b      	ldrh	r3, [r3, #0]
    1a74:	2210      	movs	r2, #16
    1a76:	4013      	ands	r3, r2
    1a78:	d010      	beq.n	1a9c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a7a:	697b      	ldr	r3, [r7, #20]
    1a7c:	2210      	movs	r2, #16
    1a7e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a80:	697b      	ldr	r3, [r7, #20]
    1a82:	2210      	movs	r2, #16
    1a84:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a86:	2310      	movs	r3, #16
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	881b      	ldrh	r3, [r3, #0]
    1a8c:	2210      	movs	r2, #16
    1a8e:	4013      	ands	r3, r2
    1a90:	d004      	beq.n	1a9c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a92:	69bb      	ldr	r3, [r7, #24]
    1a94:	69db      	ldr	r3, [r3, #28]
    1a96:	69ba      	ldr	r2, [r7, #24]
    1a98:	0010      	movs	r0, r2
    1a9a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a9c:	2312      	movs	r3, #18
    1a9e:	18fb      	adds	r3, r7, r3
    1aa0:	881b      	ldrh	r3, [r3, #0]
    1aa2:	2220      	movs	r2, #32
    1aa4:	4013      	ands	r3, r2
    1aa6:	d010      	beq.n	1aca <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1aa8:	697b      	ldr	r3, [r7, #20]
    1aaa:	2220      	movs	r2, #32
    1aac:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1aae:	697b      	ldr	r3, [r7, #20]
    1ab0:	2220      	movs	r2, #32
    1ab2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ab4:	2310      	movs	r3, #16
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	881b      	ldrh	r3, [r3, #0]
    1aba:	2208      	movs	r2, #8
    1abc:	4013      	ands	r3, r2
    1abe:	d004      	beq.n	1aca <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ac0:	69bb      	ldr	r3, [r7, #24]
    1ac2:	699b      	ldr	r3, [r3, #24]
    1ac4:	69ba      	ldr	r2, [r7, #24]
    1ac6:	0010      	movs	r0, r2
    1ac8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1aca:	2312      	movs	r3, #18
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	881b      	ldrh	r3, [r3, #0]
    1ad0:	2208      	movs	r2, #8
    1ad2:	4013      	ands	r3, r2
    1ad4:	d010      	beq.n	1af8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ad6:	697b      	ldr	r3, [r7, #20]
    1ad8:	2208      	movs	r2, #8
    1ada:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1adc:	697b      	ldr	r3, [r7, #20]
    1ade:	2208      	movs	r2, #8
    1ae0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ae2:	2310      	movs	r3, #16
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	881b      	ldrh	r3, [r3, #0]
    1ae8:	2220      	movs	r2, #32
    1aea:	4013      	ands	r3, r2
    1aec:	d004      	beq.n	1af8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1aee:	69bb      	ldr	r3, [r7, #24]
    1af0:	6a1b      	ldr	r3, [r3, #32]
    1af2:	69ba      	ldr	r2, [r7, #24]
    1af4:	0010      	movs	r0, r2
    1af6:	4798      	blx	r3
		}
	}
#endif
}
    1af8:	46c0      	nop			; (mov r8, r8)
    1afa:	46bd      	mov	sp, r7
    1afc:	b008      	add	sp, #32
    1afe:	bd80      	pop	{r7, pc}

00001b00 <system_gclk_gen_get_config_defaults>:
{
    1b00:	b580      	push	{r7, lr}
    1b02:	b082      	sub	sp, #8
    1b04:	af00      	add	r7, sp, #0
    1b06:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	2201      	movs	r2, #1
    1b0c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	2200      	movs	r2, #0
    1b12:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	2206      	movs	r2, #6
    1b18:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	2200      	movs	r2, #0
    1b1e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	2200      	movs	r2, #0
    1b24:	725a      	strb	r2, [r3, #9]
}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	46bd      	mov	sp, r7
    1b2a:	b002      	add	sp, #8
    1b2c:	bd80      	pop	{r7, pc}

00001b2e <system_gclk_chan_get_config_defaults>:
{
    1b2e:	b580      	push	{r7, lr}
    1b30:	b082      	sub	sp, #8
    1b32:	af00      	add	r7, sp, #0
    1b34:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	2200      	movs	r2, #0
    1b3a:	701a      	strb	r2, [r3, #0]
}
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	b002      	add	sp, #8
    1b42:	bd80      	pop	{r7, pc}

00001b44 <system_clock_source_xosc32k_get_config_defaults>:
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	2200      	movs	r2, #0
    1b50:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	2204      	movs	r2, #4
    1b56:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	2200      	movs	r2, #0
    1b5c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	2280      	movs	r2, #128	; 0x80
    1b62:	0212      	lsls	r2, r2, #8
    1b64:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	2200      	movs	r2, #0
    1b6a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	2201      	movs	r2, #1
    1b70:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	2200      	movs	r2, #0
    1b76:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	2201      	movs	r2, #1
    1b7c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	2200      	movs	r2, #0
    1b82:	739a      	strb	r2, [r3, #14]
}
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	46bd      	mov	sp, r7
    1b88:	b002      	add	sp, #8
    1b8a:	bd80      	pop	{r7, pc}

00001b8c <system_clock_source_osc8m_get_config_defaults>:
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	2203      	movs	r2, #3
    1b98:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	2200      	movs	r2, #0
    1b9e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	2201      	movs	r2, #1
    1ba4:	709a      	strb	r2, [r3, #2]
}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	46bd      	mov	sp, r7
    1baa:	b002      	add	sp, #8
    1bac:	bd80      	pop	{r7, pc}

00001bae <system_clock_source_dfll_get_config_defaults>:
{
    1bae:	b580      	push	{r7, lr}
    1bb0:	b082      	sub	sp, #8
    1bb2:	af00      	add	r7, sp, #0
    1bb4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	2200      	movs	r2, #0
    1bba:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	2200      	movs	r2, #0
    1bc0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	2200      	movs	r2, #0
    1bc6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	2200      	movs	r2, #0
    1bcc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1bce:	687b      	ldr	r3, [r7, #4]
    1bd0:	2200      	movs	r2, #0
    1bd2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	2201      	movs	r2, #1
    1bd8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    1bda:	687b      	ldr	r3, [r7, #4]
    1bdc:	2207      	movs	r2, #7
    1bde:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	223f      	movs	r2, #63	; 0x3f
    1be4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	2201      	movs	r2, #1
    1bea:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	2201      	movs	r2, #1
    1bf0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	2206      	movs	r2, #6
    1bf6:	821a      	strh	r2, [r3, #16]
}
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b002      	add	sp, #8
    1bfe:	bd80      	pop	{r7, pc}

00001c00 <system_cpu_clock_set_divider>:
{
    1c00:	b580      	push	{r7, lr}
    1c02:	b082      	sub	sp, #8
    1c04:	af00      	add	r7, sp, #0
    1c06:	0002      	movs	r2, r0
    1c08:	1dfb      	adds	r3, r7, #7
    1c0a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1c0c:	4a03      	ldr	r2, [pc, #12]	; (1c1c <system_cpu_clock_set_divider+0x1c>)
    1c0e:	1dfb      	adds	r3, r7, #7
    1c10:	781b      	ldrb	r3, [r3, #0]
    1c12:	7213      	strb	r3, [r2, #8]
}
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46bd      	mov	sp, r7
    1c18:	b002      	add	sp, #8
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	40000400 	.word	0x40000400

00001c20 <system_apb_clock_set_divider>:
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b082      	sub	sp, #8
    1c24:	af00      	add	r7, sp, #0
    1c26:	0002      	movs	r2, r0
    1c28:	1dfb      	adds	r3, r7, #7
    1c2a:	701a      	strb	r2, [r3, #0]
    1c2c:	1dbb      	adds	r3, r7, #6
    1c2e:	1c0a      	adds	r2, r1, #0
    1c30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1c32:	1dfb      	adds	r3, r7, #7
    1c34:	781b      	ldrb	r3, [r3, #0]
    1c36:	2b01      	cmp	r3, #1
    1c38:	d008      	beq.n	1c4c <system_apb_clock_set_divider+0x2c>
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d00b      	beq.n	1c56 <system_apb_clock_set_divider+0x36>
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d10e      	bne.n	1c60 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1c42:	4a0b      	ldr	r2, [pc, #44]	; (1c70 <system_apb_clock_set_divider+0x50>)
    1c44:	1dbb      	adds	r3, r7, #6
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	7253      	strb	r3, [r2, #9]
			break;
    1c4a:	e00b      	b.n	1c64 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1c4c:	4a08      	ldr	r2, [pc, #32]	; (1c70 <system_apb_clock_set_divider+0x50>)
    1c4e:	1dbb      	adds	r3, r7, #6
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	7293      	strb	r3, [r2, #10]
			break;
    1c54:	e006      	b.n	1c64 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1c56:	4a06      	ldr	r2, [pc, #24]	; (1c70 <system_apb_clock_set_divider+0x50>)
    1c58:	1dbb      	adds	r3, r7, #6
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	72d3      	strb	r3, [r2, #11]
			break;
    1c5e:	e001      	b.n	1c64 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1c60:	2317      	movs	r3, #23
    1c62:	e000      	b.n	1c66 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1c64:	2300      	movs	r3, #0
}
    1c66:	0018      	movs	r0, r3
    1c68:	46bd      	mov	sp, r7
    1c6a:	b002      	add	sp, #8
    1c6c:	bd80      	pop	{r7, pc}
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	40000400 	.word	0x40000400

00001c74 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
    1c7a:	0002      	movs	r2, r0
    1c7c:	1dfb      	adds	r3, r7, #7
    1c7e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1c80:	4a08      	ldr	r2, [pc, #32]	; (1ca4 <system_flash_set_waitstates+0x30>)
    1c82:	1dfb      	adds	r3, r7, #7
    1c84:	781b      	ldrb	r3, [r3, #0]
    1c86:	210f      	movs	r1, #15
    1c88:	400b      	ands	r3, r1
    1c8a:	b2d9      	uxtb	r1, r3
    1c8c:	6853      	ldr	r3, [r2, #4]
    1c8e:	200f      	movs	r0, #15
    1c90:	4001      	ands	r1, r0
    1c92:	0049      	lsls	r1, r1, #1
    1c94:	201e      	movs	r0, #30
    1c96:	4383      	bics	r3, r0
    1c98:	430b      	orrs	r3, r1
    1c9a:	6053      	str	r3, [r2, #4]
}
    1c9c:	46c0      	nop			; (mov r8, r8)
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b002      	add	sp, #8
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	41004000 	.word	0x41004000

00001ca8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cac:	46c0      	nop			; (mov r8, r8)
    1cae:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <_system_dfll_wait_for_sync+0x18>)
    1cb0:	68db      	ldr	r3, [r3, #12]
    1cb2:	2210      	movs	r2, #16
    1cb4:	4013      	ands	r3, r2
    1cb6:	d0fa      	beq.n	1cae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1cb8:	46c0      	nop			; (mov r8, r8)
    1cba:	46bd      	mov	sp, r7
    1cbc:	bd80      	pop	{r7, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	40000800 	.word	0x40000800

00001cc4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1cc8:	4b0c      	ldr	r3, [pc, #48]	; (1cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1cca:	2202      	movs	r2, #2
    1ccc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1cce:	4b0c      	ldr	r3, [pc, #48]	; (1d00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1cd0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1cd2:	4a0a      	ldr	r2, [pc, #40]	; (1cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1cd4:	4b0b      	ldr	r3, [pc, #44]	; (1d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1cd6:	689b      	ldr	r3, [r3, #8]
    1cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1cda:	4a08      	ldr	r2, [pc, #32]	; (1cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1cdc:	4b09      	ldr	r3, [pc, #36]	; (1d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1cde:	685b      	ldr	r3, [r3, #4]
    1ce0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1ce2:	4b06      	ldr	r3, [pc, #24]	; (1cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1ce4:	2200      	movs	r2, #0
    1ce6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1ce8:	4b05      	ldr	r3, [pc, #20]	; (1d00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1cea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1cec:	4a03      	ldr	r2, [pc, #12]	; (1cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1cee:	4b05      	ldr	r3, [pc, #20]	; (1d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	b29b      	uxth	r3, r3
    1cf4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	46bd      	mov	sp, r7
    1cfa:	bd80      	pop	{r7, pc}
    1cfc:	40000800 	.word	0x40000800
    1d00:	00001ca9 	.word	0x00001ca9
    1d04:	200000a8 	.word	0x200000a8

00001d08 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	b082      	sub	sp, #8
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	0002      	movs	r2, r0
    1d10:	1dfb      	adds	r3, r7, #7
    1d12:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1d14:	1dfb      	adds	r3, r7, #7
    1d16:	781b      	ldrb	r3, [r3, #0]
    1d18:	2b08      	cmp	r3, #8
    1d1a:	d840      	bhi.n	1d9e <system_clock_source_get_hz+0x96>
    1d1c:	009a      	lsls	r2, r3, #2
    1d1e:	4b22      	ldr	r3, [pc, #136]	; (1da8 <system_clock_source_get_hz+0xa0>)
    1d20:	18d3      	adds	r3, r2, r3
    1d22:	681b      	ldr	r3, [r3, #0]
    1d24:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1d26:	4b21      	ldr	r3, [pc, #132]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d28:	691b      	ldr	r3, [r3, #16]
    1d2a:	e039      	b.n	1da0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1d2c:	4b20      	ldr	r3, [pc, #128]	; (1db0 <system_clock_source_get_hz+0xa8>)
    1d2e:	6a1b      	ldr	r3, [r3, #32]
    1d30:	059b      	lsls	r3, r3, #22
    1d32:	0f9b      	lsrs	r3, r3, #30
    1d34:	b2db      	uxtb	r3, r3
    1d36:	001a      	movs	r2, r3
    1d38:	4b1e      	ldr	r3, [pc, #120]	; (1db4 <system_clock_source_get_hz+0xac>)
    1d3a:	40d3      	lsrs	r3, r2
    1d3c:	e030      	b.n	1da0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1d3e:	2380      	movs	r3, #128	; 0x80
    1d40:	021b      	lsls	r3, r3, #8
    1d42:	e02d      	b.n	1da0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1d44:	2380      	movs	r3, #128	; 0x80
    1d46:	021b      	lsls	r3, r3, #8
    1d48:	e02a      	b.n	1da0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1d4a:	4b18      	ldr	r3, [pc, #96]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d4c:	695b      	ldr	r3, [r3, #20]
    1d4e:	e027      	b.n	1da0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d50:	4b16      	ldr	r3, [pc, #88]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2202      	movs	r2, #2
    1d56:	4013      	ands	r3, r2
    1d58:	d101      	bne.n	1d5e <system_clock_source_get_hz+0x56>
			return 0;
    1d5a:	2300      	movs	r3, #0
    1d5c:	e020      	b.n	1da0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1d5e:	4b16      	ldr	r3, [pc, #88]	; (1db8 <system_clock_source_get_hz+0xb0>)
    1d60:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1d62:	4b12      	ldr	r3, [pc, #72]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d64:	681b      	ldr	r3, [r3, #0]
    1d66:	2204      	movs	r2, #4
    1d68:	4013      	ands	r3, r2
    1d6a:	d009      	beq.n	1d80 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d6c:	2000      	movs	r0, #0
    1d6e:	4b13      	ldr	r3, [pc, #76]	; (1dbc <system_clock_source_get_hz+0xb4>)
    1d70:	4798      	blx	r3
    1d72:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1d74:	4b0d      	ldr	r3, [pc, #52]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d76:	689b      	ldr	r3, [r3, #8]
    1d78:	041b      	lsls	r3, r3, #16
    1d7a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d7c:	4353      	muls	r3, r2
    1d7e:	e00f      	b.n	1da0 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    1d80:	4b0f      	ldr	r3, [pc, #60]	; (1dc0 <system_clock_source_get_hz+0xb8>)
    1d82:	e00d      	b.n	1da0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d84:	4a0a      	ldr	r2, [pc, #40]	; (1db0 <system_clock_source_get_hz+0xa8>)
    1d86:	2350      	movs	r3, #80	; 0x50
    1d88:	5cd3      	ldrb	r3, [r2, r3]
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	001a      	movs	r2, r3
    1d8e:	2304      	movs	r3, #4
    1d90:	4013      	ands	r3, r2
    1d92:	d101      	bne.n	1d98 <system_clock_source_get_hz+0x90>
			return 0;
    1d94:	2300      	movs	r3, #0
    1d96:	e003      	b.n	1da0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1d98:	4b04      	ldr	r3, [pc, #16]	; (1dac <system_clock_source_get_hz+0xa4>)
    1d9a:	68db      	ldr	r3, [r3, #12]
    1d9c:	e000      	b.n	1da0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1d9e:	2300      	movs	r3, #0
	}
}
    1da0:	0018      	movs	r0, r3
    1da2:	46bd      	mov	sp, r7
    1da4:	b002      	add	sp, #8
    1da6:	bd80      	pop	{r7, pc}
    1da8:	000042f4 	.word	0x000042f4
    1dac:	200000a8 	.word	0x200000a8
    1db0:	40000800 	.word	0x40000800
    1db4:	007a1200 	.word	0x007a1200
    1db8:	00001ca9 	.word	0x00001ca9
    1dbc:	00002861 	.word	0x00002861
    1dc0:	02dc6c00 	.word	0x02dc6c00

00001dc4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b084      	sub	sp, #16
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1dcc:	4b1a      	ldr	r3, [pc, #104]	; (1e38 <system_clock_source_osc8m_set_config+0x74>)
    1dce:	6a1b      	ldr	r3, [r3, #32]
    1dd0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	781b      	ldrb	r3, [r3, #0]
    1dd6:	1c1a      	adds	r2, r3, #0
    1dd8:	2303      	movs	r3, #3
    1dda:	4013      	ands	r3, r2
    1ddc:	b2da      	uxtb	r2, r3
    1dde:	230d      	movs	r3, #13
    1de0:	18fb      	adds	r3, r7, r3
    1de2:	2103      	movs	r1, #3
    1de4:	400a      	ands	r2, r1
    1de6:	0010      	movs	r0, r2
    1de8:	781a      	ldrb	r2, [r3, #0]
    1dea:	2103      	movs	r1, #3
    1dec:	438a      	bics	r2, r1
    1dee:	1c11      	adds	r1, r2, #0
    1df0:	1c02      	adds	r2, r0, #0
    1df2:	430a      	orrs	r2, r1
    1df4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	789a      	ldrb	r2, [r3, #2]
    1dfa:	230c      	movs	r3, #12
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	01d0      	lsls	r0, r2, #7
    1e00:	781a      	ldrb	r2, [r3, #0]
    1e02:	217f      	movs	r1, #127	; 0x7f
    1e04:	400a      	ands	r2, r1
    1e06:	1c11      	adds	r1, r2, #0
    1e08:	1c02      	adds	r2, r0, #0
    1e0a:	430a      	orrs	r2, r1
    1e0c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1e0e:	687b      	ldr	r3, [r7, #4]
    1e10:	785a      	ldrb	r2, [r3, #1]
    1e12:	230c      	movs	r3, #12
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	2101      	movs	r1, #1
    1e18:	400a      	ands	r2, r1
    1e1a:	0190      	lsls	r0, r2, #6
    1e1c:	781a      	ldrb	r2, [r3, #0]
    1e1e:	2140      	movs	r1, #64	; 0x40
    1e20:	438a      	bics	r2, r1
    1e22:	1c11      	adds	r1, r2, #0
    1e24:	1c02      	adds	r2, r0, #0
    1e26:	430a      	orrs	r2, r1
    1e28:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1e2a:	4b03      	ldr	r3, [pc, #12]	; (1e38 <system_clock_source_osc8m_set_config+0x74>)
    1e2c:	68fa      	ldr	r2, [r7, #12]
    1e2e:	621a      	str	r2, [r3, #32]
}
    1e30:	46c0      	nop			; (mov r8, r8)
    1e32:	46bd      	mov	sp, r7
    1e34:	b004      	add	sp, #16
    1e36:	bd80      	pop	{r7, pc}
    1e38:	40000800 	.word	0x40000800

00001e3c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b084      	sub	sp, #16
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1e44:	4a43      	ldr	r2, [pc, #268]	; (1f54 <system_clock_source_xosc32k_set_config+0x118>)
    1e46:	230c      	movs	r3, #12
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	8a92      	ldrh	r2, [r2, #20]
    1e4c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	785b      	ldrb	r3, [r3, #1]
    1e52:	1c1a      	adds	r2, r3, #0
    1e54:	2307      	movs	r3, #7
    1e56:	4013      	ands	r3, r2
    1e58:	b2da      	uxtb	r2, r3
    1e5a:	230c      	movs	r3, #12
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	2107      	movs	r1, #7
    1e60:	400a      	ands	r2, r1
    1e62:	0010      	movs	r0, r2
    1e64:	785a      	ldrb	r2, [r3, #1]
    1e66:	2107      	movs	r1, #7
    1e68:	438a      	bics	r2, r1
    1e6a:	1c11      	adds	r1, r2, #0
    1e6c:	1c02      	adds	r2, r0, #0
    1e6e:	430a      	orrs	r2, r1
    1e70:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d106      	bne.n	1e88 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    1e7a:	230c      	movs	r3, #12
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	781a      	ldrb	r2, [r3, #0]
    1e80:	2104      	movs	r1, #4
    1e82:	430a      	orrs	r2, r1
    1e84:	701a      	strb	r2, [r3, #0]
    1e86:	e005      	b.n	1e94 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    1e88:	230c      	movs	r3, #12
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	781a      	ldrb	r2, [r3, #0]
    1e8e:	2104      	movs	r1, #4
    1e90:	438a      	bics	r2, r1
    1e92:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	789a      	ldrb	r2, [r3, #2]
    1e98:	230c      	movs	r3, #12
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	2101      	movs	r1, #1
    1e9e:	400a      	ands	r2, r1
    1ea0:	0150      	lsls	r0, r2, #5
    1ea2:	781a      	ldrb	r2, [r3, #0]
    1ea4:	2120      	movs	r1, #32
    1ea6:	438a      	bics	r2, r1
    1ea8:	1c11      	adds	r1, r2, #0
    1eaa:	1c02      	adds	r2, r0, #0
    1eac:	430a      	orrs	r2, r1
    1eae:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	78da      	ldrb	r2, [r3, #3]
    1eb4:	230c      	movs	r3, #12
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	2101      	movs	r1, #1
    1eba:	400a      	ands	r2, r1
    1ebc:	0110      	lsls	r0, r2, #4
    1ebe:	781a      	ldrb	r2, [r3, #0]
    1ec0:	2110      	movs	r1, #16
    1ec2:	438a      	bics	r2, r1
    1ec4:	1c11      	adds	r1, r2, #0
    1ec6:	1c02      	adds	r2, r0, #0
    1ec8:	430a      	orrs	r2, r1
    1eca:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	791a      	ldrb	r2, [r3, #4]
    1ed0:	230c      	movs	r3, #12
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	2101      	movs	r1, #1
    1ed6:	400a      	ands	r2, r1
    1ed8:	00d0      	lsls	r0, r2, #3
    1eda:	781a      	ldrb	r2, [r3, #0]
    1edc:	2108      	movs	r1, #8
    1ede:	438a      	bics	r2, r1
    1ee0:	1c11      	adds	r1, r2, #0
    1ee2:	1c02      	adds	r2, r0, #0
    1ee4:	430a      	orrs	r2, r1
    1ee6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	7b5a      	ldrb	r2, [r3, #13]
    1eec:	230c      	movs	r3, #12
    1eee:	18fb      	adds	r3, r7, r3
    1ef0:	01d0      	lsls	r0, r2, #7
    1ef2:	781a      	ldrb	r2, [r3, #0]
    1ef4:	217f      	movs	r1, #127	; 0x7f
    1ef6:	400a      	ands	r2, r1
    1ef8:	1c11      	adds	r1, r2, #0
    1efa:	1c02      	adds	r2, r0, #0
    1efc:	430a      	orrs	r2, r1
    1efe:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	7b1a      	ldrb	r2, [r3, #12]
    1f04:	230c      	movs	r3, #12
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	2101      	movs	r1, #1
    1f0a:	400a      	ands	r2, r1
    1f0c:	0190      	lsls	r0, r2, #6
    1f0e:	781a      	ldrb	r2, [r3, #0]
    1f10:	2140      	movs	r1, #64	; 0x40
    1f12:	438a      	bics	r2, r1
    1f14:	1c11      	adds	r1, r2, #0
    1f16:	1c02      	adds	r2, r0, #0
    1f18:	430a      	orrs	r2, r1
    1f1a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	7b9a      	ldrb	r2, [r3, #14]
    1f20:	230c      	movs	r3, #12
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	2101      	movs	r1, #1
    1f26:	400a      	ands	r2, r1
    1f28:	0110      	lsls	r0, r2, #4
    1f2a:	785a      	ldrb	r2, [r3, #1]
    1f2c:	2110      	movs	r1, #16
    1f2e:	438a      	bics	r2, r1
    1f30:	1c11      	adds	r1, r2, #0
    1f32:	1c02      	adds	r2, r0, #0
    1f34:	430a      	orrs	r2, r1
    1f36:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	689a      	ldr	r2, [r3, #8]
    1f3c:	4b06      	ldr	r3, [pc, #24]	; (1f58 <system_clock_source_xosc32k_set_config+0x11c>)
    1f3e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1f40:	4a04      	ldr	r2, [pc, #16]	; (1f54 <system_clock_source_xosc32k_set_config+0x118>)
    1f42:	230c      	movs	r3, #12
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	881b      	ldrh	r3, [r3, #0]
    1f48:	8293      	strh	r3, [r2, #20]
}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46bd      	mov	sp, r7
    1f4e:	b004      	add	sp, #16
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	40000800 	.word	0x40000800
    1f58:	200000a8 	.word	0x200000a8

00001f5c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b082      	sub	sp, #8
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	7a1b      	ldrb	r3, [r3, #8]
    1f68:	029b      	lsls	r3, r3, #10
    1f6a:	041b      	lsls	r3, r3, #16
    1f6c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	895b      	ldrh	r3, [r3, #10]
    1f72:	059b      	lsls	r3, r3, #22
    1f74:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f76:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    1f78:	4b2a      	ldr	r3, [pc, #168]	; (2024 <STACK_SIZE+0x24>)
    1f7a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    1f84:	4313      	orrs	r3, r2
    1f86:	b2db      	uxtb	r3, r3
    1f88:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    1f8e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    1f90:	687a      	ldr	r2, [r7, #4]
    1f92:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    1f94:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	785b      	ldrb	r3, [r3, #1]
    1f9a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    1f9c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    1f9e:	4b21      	ldr	r3, [pc, #132]	; (2024 <STACK_SIZE+0x24>)
    1fa0:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2b04      	cmp	r3, #4
    1fa8:	d116      	bne.n	1fd8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	7b1b      	ldrb	r3, [r3, #12]
    1fae:	069b      	lsls	r3, r3, #26
    1fb0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	89db      	ldrh	r3, [r3, #14]
    1fb6:	041b      	lsls	r3, r3, #16
    1fb8:	0019      	movs	r1, r3
    1fba:	4b1b      	ldr	r3, [pc, #108]	; (2028 <STACK_SIZE+0x28>)
    1fbc:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1fbe:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1fc0:	687a      	ldr	r2, [r7, #4]
    1fc2:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1fc4:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    1fc6:	4b17      	ldr	r3, [pc, #92]	; (2024 <STACK_SIZE+0x24>)
    1fc8:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1fca:	4b16      	ldr	r3, [pc, #88]	; (2024 <STACK_SIZE+0x24>)
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	687a      	ldr	r2, [r7, #4]
    1fd0:	7812      	ldrb	r2, [r2, #0]
    1fd2:	431a      	orrs	r2, r3
    1fd4:	4b13      	ldr	r3, [pc, #76]	; (2024 <STACK_SIZE+0x24>)
    1fd6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2b20      	cmp	r3, #32
    1fde:	d11c      	bne.n	201a <STACK_SIZE+0x1a>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1fe0:	687b      	ldr	r3, [r7, #4]
    1fe2:	7b1b      	ldrb	r3, [r3, #12]
    1fe4:	069b      	lsls	r3, r3, #26
    1fe6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1fe8:	687b      	ldr	r3, [r7, #4]
    1fea:	89db      	ldrh	r3, [r3, #14]
    1fec:	041b      	lsls	r3, r3, #16
    1fee:	0019      	movs	r1, r3
    1ff0:	4b0d      	ldr	r3, [pc, #52]	; (2028 <STACK_SIZE+0x28>)
    1ff2:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ff4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ff6:	687a      	ldr	r2, [r7, #4]
    1ff8:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1ffa:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    1ffc:	4b09      	ldr	r3, [pc, #36]	; (2024 <STACK_SIZE+0x24>)
    1ffe:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2000:	4b08      	ldr	r3, [pc, #32]	; (2024 <STACK_SIZE+0x24>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	687a      	ldr	r2, [r7, #4]
    2006:	7812      	ldrb	r2, [r2, #0]
    2008:	2104      	movs	r1, #4
    200a:	430a      	orrs	r2, r1
    200c:	b2d2      	uxtb	r2, r2
    200e:	4313      	orrs	r3, r2
    2010:	2280      	movs	r2, #128	; 0x80
    2012:	00d2      	lsls	r2, r2, #3
    2014:	431a      	orrs	r2, r3
    2016:	4b03      	ldr	r3, [pc, #12]	; (2024 <STACK_SIZE+0x24>)
    2018:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	46bd      	mov	sp, r7
    201e:	b002      	add	sp, #8
    2020:	bd80      	pop	{r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	200000a8 	.word	0x200000a8
    2028:	03ff0000 	.word	0x03ff0000

0000202c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    202c:	b580      	push	{r7, lr}
    202e:	b082      	sub	sp, #8
    2030:	af00      	add	r7, sp, #0
    2032:	0002      	movs	r2, r0
    2034:	1dfb      	adds	r3, r7, #7
    2036:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2038:	1dfb      	adds	r3, r7, #7
    203a:	781b      	ldrb	r3, [r3, #0]
    203c:	2b08      	cmp	r3, #8
    203e:	d83b      	bhi.n	20b8 <system_clock_source_enable+0x8c>
    2040:	009a      	lsls	r2, r3, #2
    2042:	4b21      	ldr	r3, [pc, #132]	; (20c8 <system_clock_source_enable+0x9c>)
    2044:	18d3      	adds	r3, r2, r3
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    204a:	4b20      	ldr	r3, [pc, #128]	; (20cc <system_clock_source_enable+0xa0>)
    204c:	4a1f      	ldr	r2, [pc, #124]	; (20cc <system_clock_source_enable+0xa0>)
    204e:	6a12      	ldr	r2, [r2, #32]
    2050:	2102      	movs	r1, #2
    2052:	430a      	orrs	r2, r1
    2054:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    2056:	2300      	movs	r3, #0
    2058:	e031      	b.n	20be <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    205a:	4b1c      	ldr	r3, [pc, #112]	; (20cc <system_clock_source_enable+0xa0>)
    205c:	4a1b      	ldr	r2, [pc, #108]	; (20cc <system_clock_source_enable+0xa0>)
    205e:	6992      	ldr	r2, [r2, #24]
    2060:	2102      	movs	r1, #2
    2062:	430a      	orrs	r2, r1
    2064:	619a      	str	r2, [r3, #24]
		break;
    2066:	e029      	b.n	20bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2068:	4a18      	ldr	r2, [pc, #96]	; (20cc <system_clock_source_enable+0xa0>)
    206a:	4b18      	ldr	r3, [pc, #96]	; (20cc <system_clock_source_enable+0xa0>)
    206c:	8a1b      	ldrh	r3, [r3, #16]
    206e:	b29b      	uxth	r3, r3
    2070:	2102      	movs	r1, #2
    2072:	430b      	orrs	r3, r1
    2074:	b29b      	uxth	r3, r3
    2076:	8213      	strh	r3, [r2, #16]
		break;
    2078:	e020      	b.n	20bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    207a:	4a14      	ldr	r2, [pc, #80]	; (20cc <system_clock_source_enable+0xa0>)
    207c:	4b13      	ldr	r3, [pc, #76]	; (20cc <system_clock_source_enable+0xa0>)
    207e:	8a9b      	ldrh	r3, [r3, #20]
    2080:	b29b      	uxth	r3, r3
    2082:	2102      	movs	r1, #2
    2084:	430b      	orrs	r3, r1
    2086:	b29b      	uxth	r3, r3
    2088:	8293      	strh	r3, [r2, #20]
		break;
    208a:	e017      	b.n	20bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    208c:	4b10      	ldr	r3, [pc, #64]	; (20d0 <system_clock_source_enable+0xa4>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2202      	movs	r2, #2
    2092:	431a      	orrs	r2, r3
    2094:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <system_clock_source_enable+0xa4>)
    2096:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2098:	4b0e      	ldr	r3, [pc, #56]	; (20d4 <system_clock_source_enable+0xa8>)
    209a:	4798      	blx	r3
		break;
    209c:	e00e      	b.n	20bc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    209e:	4a0b      	ldr	r2, [pc, #44]	; (20cc <system_clock_source_enable+0xa0>)
    20a0:	490a      	ldr	r1, [pc, #40]	; (20cc <system_clock_source_enable+0xa0>)
    20a2:	2344      	movs	r3, #68	; 0x44
    20a4:	5ccb      	ldrb	r3, [r1, r3]
    20a6:	b2db      	uxtb	r3, r3
    20a8:	2102      	movs	r1, #2
    20aa:	430b      	orrs	r3, r1
    20ac:	b2d9      	uxtb	r1, r3
    20ae:	2344      	movs	r3, #68	; 0x44
    20b0:	54d1      	strb	r1, [r2, r3]
		break;
    20b2:	e003      	b.n	20bc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    20b4:	2300      	movs	r3, #0
    20b6:	e002      	b.n	20be <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    20b8:	2317      	movs	r3, #23
    20ba:	e000      	b.n	20be <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    20bc:	2300      	movs	r3, #0
}
    20be:	0018      	movs	r0, r3
    20c0:	46bd      	mov	sp, r7
    20c2:	b002      	add	sp, #8
    20c4:	bd80      	pop	{r7, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	00004318 	.word	0x00004318
    20cc:	40000800 	.word	0x40000800
    20d0:	200000a8 	.word	0x200000a8
    20d4:	00001cc5 	.word	0x00001cc5

000020d8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    20d8:	b580      	push	{r7, lr}
    20da:	b084      	sub	sp, #16
    20dc:	af00      	add	r7, sp, #0
    20de:	0002      	movs	r2, r0
    20e0:	1dfb      	adds	r3, r7, #7
    20e2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    20e4:	2300      	movs	r3, #0
    20e6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    20e8:	1dfb      	adds	r3, r7, #7
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b08      	cmp	r3, #8
    20ee:	d821      	bhi.n	2134 <system_clock_source_is_ready+0x5c>
    20f0:	009a      	lsls	r2, r3, #2
    20f2:	4b18      	ldr	r3, [pc, #96]	; (2154 <system_clock_source_is_ready+0x7c>)
    20f4:	18d3      	adds	r3, r2, r3
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    20fa:	2308      	movs	r3, #8
    20fc:	60fb      	str	r3, [r7, #12]
		break;
    20fe:	e01b      	b.n	2138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    2100:	2304      	movs	r3, #4
    2102:	60fb      	str	r3, [r7, #12]
		break;
    2104:	e018      	b.n	2138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    2106:	2301      	movs	r3, #1
    2108:	60fb      	str	r3, [r7, #12]
		break;
    210a:	e015      	b.n	2138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    210c:	2302      	movs	r3, #2
    210e:	60fb      	str	r3, [r7, #12]
		break;
    2110:	e012      	b.n	2138 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    2112:	23d0      	movs	r3, #208	; 0xd0
    2114:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    2116:	e00f      	b.n	2138 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    2118:	4a0f      	ldr	r2, [pc, #60]	; (2158 <system_clock_source_is_ready+0x80>)
    211a:	2350      	movs	r3, #80	; 0x50
    211c:	5cd3      	ldrb	r3, [r2, r3]
    211e:	b2db      	uxtb	r3, r3
    2120:	001a      	movs	r2, r3
    2122:	2303      	movs	r3, #3
    2124:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    2126:	3b03      	subs	r3, #3
    2128:	425a      	negs	r2, r3
    212a:	4153      	adcs	r3, r2
    212c:	b2db      	uxtb	r3, r3
    212e:	e00c      	b.n	214a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    2130:	2301      	movs	r3, #1
    2132:	e00a      	b.n	214a <system_clock_source_is_ready+0x72>

	default:
		return false;
    2134:	2300      	movs	r3, #0
    2136:	e008      	b.n	214a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2138:	4b07      	ldr	r3, [pc, #28]	; (2158 <system_clock_source_is_ready+0x80>)
    213a:	68db      	ldr	r3, [r3, #12]
    213c:	68fa      	ldr	r2, [r7, #12]
    213e:	401a      	ands	r2, r3
    2140:	68fb      	ldr	r3, [r7, #12]
    2142:	1ad3      	subs	r3, r2, r3
    2144:	425a      	negs	r2, r3
    2146:	4153      	adcs	r3, r2
    2148:	b2db      	uxtb	r3, r3
}
    214a:	0018      	movs	r0, r3
    214c:	46bd      	mov	sp, r7
    214e:	b004      	add	sp, #16
    2150:	bd80      	pop	{r7, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	0000433c 	.word	0x0000433c
    2158:	40000800 	.word	0x40000800

0000215c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    215c:	b580      	push	{r7, lr}
    215e:	b082      	sub	sp, #8
    2160:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2162:	003b      	movs	r3, r7
    2164:	2202      	movs	r2, #2
    2166:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2168:	2300      	movs	r3, #0
    216a:	607b      	str	r3, [r7, #4]
    216c:	e009      	b.n	2182 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	b2db      	uxtb	r3, r3
    2172:	003a      	movs	r2, r7
    2174:	0011      	movs	r1, r2
    2176:	0018      	movs	r0, r3
    2178:	4b05      	ldr	r3, [pc, #20]	; (2190 <_switch_peripheral_gclk+0x34>)
    217a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	3301      	adds	r3, #1
    2180:	607b      	str	r3, [r7, #4]
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	2b24      	cmp	r3, #36	; 0x24
    2186:	d9f2      	bls.n	216e <_switch_peripheral_gclk+0x12>
	}
}
    2188:	46c0      	nop			; (mov r8, r8)
    218a:	46bd      	mov	sp, r7
    218c:	b002      	add	sp, #8
    218e:	bd80      	pop	{r7, pc}
    2190:	0000273d 	.word	0x0000273d

00002194 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2194:	b580      	push	{r7, lr}
    2196:	b0aa      	sub	sp, #168	; 0xa8
    2198:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    219a:	4b87      	ldr	r3, [pc, #540]	; (23b8 <system_clock_init+0x224>)
    219c:	22c2      	movs	r2, #194	; 0xc2
    219e:	00d2      	lsls	r2, r2, #3
    21a0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    21a2:	2002      	movs	r0, #2
    21a4:	4b85      	ldr	r3, [pc, #532]	; (23bc <system_clock_init+0x228>)
    21a6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    21a8:	4b85      	ldr	r3, [pc, #532]	; (23c0 <system_clock_init+0x22c>)
    21aa:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    21ac:	2394      	movs	r3, #148	; 0x94
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	0018      	movs	r0, r3
    21b2:	4b84      	ldr	r3, [pc, #528]	; (23c4 <system_clock_init+0x230>)
    21b4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    21b6:	2394      	movs	r3, #148	; 0x94
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	2280      	movs	r2, #128	; 0x80
    21bc:	0212      	lsls	r2, r2, #8
    21be:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    21c0:	2394      	movs	r3, #148	; 0x94
    21c2:	18fb      	adds	r3, r7, r3
    21c4:	2200      	movs	r2, #0
    21c6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    21c8:	2394      	movs	r3, #148	; 0x94
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	2203      	movs	r2, #3
    21ce:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    21d0:	2394      	movs	r3, #148	; 0x94
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	2200      	movs	r2, #0
    21d6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    21d8:	2394      	movs	r3, #148	; 0x94
    21da:	18fb      	adds	r3, r7, r3
    21dc:	2200      	movs	r2, #0
    21de:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    21e0:	2394      	movs	r3, #148	; 0x94
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	2201      	movs	r2, #1
    21e6:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    21e8:	2394      	movs	r3, #148	; 0x94
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	2200      	movs	r2, #0
    21ee:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    21f0:	2394      	movs	r3, #148	; 0x94
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	2200      	movs	r2, #0
    21f6:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    21f8:	2394      	movs	r3, #148	; 0x94
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	0018      	movs	r0, r3
    21fe:	4b72      	ldr	r3, [pc, #456]	; (23c8 <system_clock_init+0x234>)
    2200:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2202:	2005      	movs	r0, #5
    2204:	4b71      	ldr	r3, [pc, #452]	; (23cc <system_clock_init+0x238>)
    2206:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2208:	46c0      	nop			; (mov r8, r8)
    220a:	2005      	movs	r0, #5
    220c:	4b70      	ldr	r3, [pc, #448]	; (23d0 <system_clock_init+0x23c>)
    220e:	4798      	blx	r3
    2210:	0003      	movs	r3, r0
    2212:	001a      	movs	r2, r3
    2214:	2301      	movs	r3, #1
    2216:	4053      	eors	r3, r2
    2218:	b2db      	uxtb	r3, r3
    221a:	2b00      	cmp	r3, #0
    221c:	d1f5      	bne.n	220a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    221e:	4a66      	ldr	r2, [pc, #408]	; (23b8 <system_clock_init+0x224>)
    2220:	8a93      	ldrh	r3, [r2, #20]
    2222:	2180      	movs	r1, #128	; 0x80
    2224:	430b      	orrs	r3, r1
    2226:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    2228:	2380      	movs	r3, #128	; 0x80
    222a:	18fb      	adds	r3, r7, r3
    222c:	0018      	movs	r0, r3
    222e:	4b69      	ldr	r3, [pc, #420]	; (23d4 <system_clock_init+0x240>)
    2230:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2232:	2380      	movs	r3, #128	; 0x80
    2234:	18fb      	adds	r3, r7, r3
    2236:	2204      	movs	r2, #4
    2238:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    223a:	2380      	movs	r3, #128	; 0x80
    223c:	18fb      	adds	r3, r7, r3
    223e:	2200      	movs	r2, #0
    2240:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2242:	4b65      	ldr	r3, [pc, #404]	; (23d8 <system_clock_init+0x244>)
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	0e9b      	lsrs	r3, r3, #26
    2248:	22a4      	movs	r2, #164	; 0xa4
    224a:	18ba      	adds	r2, r7, r2
    224c:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    224e:	23a4      	movs	r3, #164	; 0xa4
    2250:	18fb      	adds	r3, r7, r3
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	2b3f      	cmp	r3, #63	; 0x3f
    2256:	d103      	bne.n	2260 <system_clock_init+0xcc>
		coarse = 0x1f;
    2258:	231f      	movs	r3, #31
    225a:	22a4      	movs	r2, #164	; 0xa4
    225c:	18ba      	adds	r2, r7, r2
    225e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    2260:	23a4      	movs	r3, #164	; 0xa4
    2262:	18fb      	adds	r3, r7, r3
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	b2da      	uxtb	r2, r3
    2268:	2380      	movs	r3, #128	; 0x80
    226a:	18fb      	adds	r3, r7, r3
    226c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    226e:	2380      	movs	r3, #128	; 0x80
    2270:	18fb      	adds	r3, r7, r3
    2272:	2200      	movs	r2, #0
    2274:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2276:	2380      	movs	r3, #128	; 0x80
    2278:	18fb      	adds	r3, r7, r3
    227a:	2200      	movs	r2, #0
    227c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    227e:	2380      	movs	r3, #128	; 0x80
    2280:	18fb      	adds	r3, r7, r3
    2282:	2200      	movs	r2, #0
    2284:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2286:	2380      	movs	r3, #128	; 0x80
    2288:	18fb      	adds	r3, r7, r3
    228a:	2200      	movs	r2, #0
    228c:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    228e:	2380      	movs	r3, #128	; 0x80
    2290:	18fb      	adds	r3, r7, r3
    2292:	4a52      	ldr	r2, [pc, #328]	; (23dc <system_clock_init+0x248>)
    2294:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2296:	2380      	movs	r3, #128	; 0x80
    2298:	18fb      	adds	r3, r7, r3
    229a:	2207      	movs	r2, #7
    229c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    229e:	2380      	movs	r3, #128	; 0x80
    22a0:	18fb      	adds	r3, r7, r3
    22a2:	223f      	movs	r2, #63	; 0x3f
    22a4:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    22a6:	2380      	movs	r3, #128	; 0x80
    22a8:	18fb      	adds	r3, r7, r3
    22aa:	0018      	movs	r0, r3
    22ac:	4b4c      	ldr	r3, [pc, #304]	; (23e0 <system_clock_init+0x24c>)
    22ae:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    22b0:	237c      	movs	r3, #124	; 0x7c
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	0018      	movs	r0, r3
    22b6:	4b4b      	ldr	r3, [pc, #300]	; (23e4 <system_clock_init+0x250>)
    22b8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    22ba:	237c      	movs	r3, #124	; 0x7c
    22bc:	18fb      	adds	r3, r7, r3
    22be:	2200      	movs	r2, #0
    22c0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    22c2:	237c      	movs	r3, #124	; 0x7c
    22c4:	18fb      	adds	r3, r7, r3
    22c6:	2201      	movs	r2, #1
    22c8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    22ca:	237c      	movs	r3, #124	; 0x7c
    22cc:	18fb      	adds	r3, r7, r3
    22ce:	2200      	movs	r2, #0
    22d0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    22d2:	237c      	movs	r3, #124	; 0x7c
    22d4:	18fb      	adds	r3, r7, r3
    22d6:	0018      	movs	r0, r3
    22d8:	4b43      	ldr	r3, [pc, #268]	; (23e8 <system_clock_init+0x254>)
    22da:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    22dc:	2006      	movs	r0, #6
    22de:	4b3b      	ldr	r3, [pc, #236]	; (23cc <system_clock_init+0x238>)
    22e0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    22e2:	4b42      	ldr	r3, [pc, #264]	; (23ec <system_clock_init+0x258>)
    22e4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    22e6:	2364      	movs	r3, #100	; 0x64
    22e8:	18fb      	adds	r3, r7, r3
    22ea:	0018      	movs	r0, r3
    22ec:	4b40      	ldr	r3, [pc, #256]	; (23f0 <system_clock_init+0x25c>)
    22ee:	4798      	blx	r3
    22f0:	2364      	movs	r3, #100	; 0x64
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	2205      	movs	r2, #5
    22f6:	701a      	strb	r2, [r3, #0]
    22f8:	2364      	movs	r3, #100	; 0x64
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	2201      	movs	r2, #1
    22fe:	605a      	str	r2, [r3, #4]
    2300:	2364      	movs	r3, #100	; 0x64
    2302:	18fb      	adds	r3, r7, r3
    2304:	2200      	movs	r2, #0
    2306:	721a      	strb	r2, [r3, #8]
    2308:	2364      	movs	r3, #100	; 0x64
    230a:	18fb      	adds	r3, r7, r3
    230c:	2200      	movs	r2, #0
    230e:	725a      	strb	r2, [r3, #9]
    2310:	2364      	movs	r3, #100	; 0x64
    2312:	18fb      	adds	r3, r7, r3
    2314:	0019      	movs	r1, r3
    2316:	2001      	movs	r0, #1
    2318:	4b36      	ldr	r3, [pc, #216]	; (23f4 <system_clock_init+0x260>)
    231a:	4798      	blx	r3
    231c:	2001      	movs	r0, #1
    231e:	4b36      	ldr	r3, [pc, #216]	; (23f8 <system_clock_init+0x264>)
    2320:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    2322:	230c      	movs	r3, #12
    2324:	18fb      	adds	r3, r7, r3
    2326:	0018      	movs	r0, r3
    2328:	4b34      	ldr	r3, [pc, #208]	; (23fc <system_clock_init+0x268>)
    232a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    232c:	230c      	movs	r3, #12
    232e:	18fb      	adds	r3, r7, r3
    2330:	2201      	movs	r2, #1
    2332:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2334:	230c      	movs	r3, #12
    2336:	18fb      	adds	r3, r7, r3
    2338:	0019      	movs	r1, r3
    233a:	2000      	movs	r0, #0
    233c:	4b30      	ldr	r3, [pc, #192]	; (2400 <system_clock_init+0x26c>)
    233e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2340:	2000      	movs	r0, #0
    2342:	4b30      	ldr	r3, [pc, #192]	; (2404 <system_clock_init+0x270>)
    2344:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2346:	2007      	movs	r0, #7
    2348:	4b20      	ldr	r3, [pc, #128]	; (23cc <system_clock_init+0x238>)
    234a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    234c:	46c0      	nop			; (mov r8, r8)
    234e:	2007      	movs	r0, #7
    2350:	4b1f      	ldr	r3, [pc, #124]	; (23d0 <system_clock_init+0x23c>)
    2352:	4798      	blx	r3
    2354:	0003      	movs	r3, r0
    2356:	001a      	movs	r2, r3
    2358:	2301      	movs	r3, #1
    235a:	4053      	eors	r3, r2
    235c:	b2db      	uxtb	r3, r3
    235e:	2b00      	cmp	r3, #0
    2360:	d1f5      	bne.n	234e <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2362:	2000      	movs	r0, #0
    2364:	4b28      	ldr	r3, [pc, #160]	; (2408 <system_clock_init+0x274>)
    2366:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2368:	2100      	movs	r1, #0
    236a:	2000      	movs	r0, #0
    236c:	4b27      	ldr	r3, [pc, #156]	; (240c <system_clock_init+0x278>)
    236e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2370:	2100      	movs	r1, #0
    2372:	2001      	movs	r0, #1
    2374:	4b25      	ldr	r3, [pc, #148]	; (240c <system_clock_init+0x278>)
    2376:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2378:	2100      	movs	r1, #0
    237a:	2002      	movs	r0, #2
    237c:	4b23      	ldr	r3, [pc, #140]	; (240c <system_clock_init+0x278>)
    237e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2380:	003b      	movs	r3, r7
    2382:	0018      	movs	r0, r3
    2384:	4b1a      	ldr	r3, [pc, #104]	; (23f0 <system_clock_init+0x25c>)
    2386:	4798      	blx	r3
    2388:	003b      	movs	r3, r7
    238a:	2207      	movs	r2, #7
    238c:	701a      	strb	r2, [r3, #0]
    238e:	003b      	movs	r3, r7
    2390:	2201      	movs	r2, #1
    2392:	605a      	str	r2, [r3, #4]
    2394:	003b      	movs	r3, r7
    2396:	2200      	movs	r2, #0
    2398:	721a      	strb	r2, [r3, #8]
    239a:	003b      	movs	r3, r7
    239c:	2200      	movs	r2, #0
    239e:	725a      	strb	r2, [r3, #9]
    23a0:	003b      	movs	r3, r7
    23a2:	0019      	movs	r1, r3
    23a4:	2000      	movs	r0, #0
    23a6:	4b13      	ldr	r3, [pc, #76]	; (23f4 <system_clock_init+0x260>)
    23a8:	4798      	blx	r3
    23aa:	2000      	movs	r0, #0
    23ac:	4b12      	ldr	r3, [pc, #72]	; (23f8 <system_clock_init+0x264>)
    23ae:	4798      	blx	r3
#endif
}
    23b0:	46c0      	nop			; (mov r8, r8)
    23b2:	46bd      	mov	sp, r7
    23b4:	b02a      	add	sp, #168	; 0xa8
    23b6:	bd80      	pop	{r7, pc}
    23b8:	40000800 	.word	0x40000800
    23bc:	00001c75 	.word	0x00001c75
    23c0:	0000215d 	.word	0x0000215d
    23c4:	00001b45 	.word	0x00001b45
    23c8:	00001e3d 	.word	0x00001e3d
    23cc:	0000202d 	.word	0x0000202d
    23d0:	000020d9 	.word	0x000020d9
    23d4:	00001baf 	.word	0x00001baf
    23d8:	00806024 	.word	0x00806024
    23dc:	000005b9 	.word	0x000005b9
    23e0:	00001f5d 	.word	0x00001f5d
    23e4:	00001b8d 	.word	0x00001b8d
    23e8:	00001dc5 	.word	0x00001dc5
    23ec:	000024b5 	.word	0x000024b5
    23f0:	00001b01 	.word	0x00001b01
    23f4:	000024e5 	.word	0x000024e5
    23f8:	00002609 	.word	0x00002609
    23fc:	00001b2f 	.word	0x00001b2f
    2400:	0000273d 	.word	0x0000273d
    2404:	00002781 	.word	0x00002781
    2408:	00001c01 	.word	0x00001c01
    240c:	00001c21 	.word	0x00001c21

00002410 <system_apb_clock_set_mask>:
{
    2410:	b580      	push	{r7, lr}
    2412:	b082      	sub	sp, #8
    2414:	af00      	add	r7, sp, #0
    2416:	0002      	movs	r2, r0
    2418:	6039      	str	r1, [r7, #0]
    241a:	1dfb      	adds	r3, r7, #7
    241c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    241e:	1dfb      	adds	r3, r7, #7
    2420:	781b      	ldrb	r3, [r3, #0]
    2422:	2b01      	cmp	r3, #1
    2424:	d00a      	beq.n	243c <system_apb_clock_set_mask+0x2c>
    2426:	2b02      	cmp	r3, #2
    2428:	d00f      	beq.n	244a <system_apb_clock_set_mask+0x3a>
    242a:	2b00      	cmp	r3, #0
    242c:	d114      	bne.n	2458 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    242e:	4b0e      	ldr	r3, [pc, #56]	; (2468 <system_apb_clock_set_mask+0x58>)
    2430:	4a0d      	ldr	r2, [pc, #52]	; (2468 <system_apb_clock_set_mask+0x58>)
    2432:	6991      	ldr	r1, [r2, #24]
    2434:	683a      	ldr	r2, [r7, #0]
    2436:	430a      	orrs	r2, r1
    2438:	619a      	str	r2, [r3, #24]
			break;
    243a:	e00f      	b.n	245c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    243c:	4b0a      	ldr	r3, [pc, #40]	; (2468 <system_apb_clock_set_mask+0x58>)
    243e:	4a0a      	ldr	r2, [pc, #40]	; (2468 <system_apb_clock_set_mask+0x58>)
    2440:	69d1      	ldr	r1, [r2, #28]
    2442:	683a      	ldr	r2, [r7, #0]
    2444:	430a      	orrs	r2, r1
    2446:	61da      	str	r2, [r3, #28]
			break;
    2448:	e008      	b.n	245c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    244a:	4b07      	ldr	r3, [pc, #28]	; (2468 <system_apb_clock_set_mask+0x58>)
    244c:	4a06      	ldr	r2, [pc, #24]	; (2468 <system_apb_clock_set_mask+0x58>)
    244e:	6a11      	ldr	r1, [r2, #32]
    2450:	683a      	ldr	r2, [r7, #0]
    2452:	430a      	orrs	r2, r1
    2454:	621a      	str	r2, [r3, #32]
			break;
    2456:	e001      	b.n	245c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2458:	2317      	movs	r3, #23
    245a:	e000      	b.n	245e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    245c:	2300      	movs	r3, #0
}
    245e:	0018      	movs	r0, r3
    2460:	46bd      	mov	sp, r7
    2462:	b002      	add	sp, #8
    2464:	bd80      	pop	{r7, pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	40000400 	.word	0x40000400

0000246c <system_interrupt_enter_critical_section>:
{
    246c:	b580      	push	{r7, lr}
    246e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2470:	4b02      	ldr	r3, [pc, #8]	; (247c <system_interrupt_enter_critical_section+0x10>)
    2472:	4798      	blx	r3
}
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46bd      	mov	sp, r7
    2478:	bd80      	pop	{r7, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	000002f1 	.word	0x000002f1

00002480 <system_interrupt_leave_critical_section>:
{
    2480:	b580      	push	{r7, lr}
    2482:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2484:	4b02      	ldr	r3, [pc, #8]	; (2490 <system_interrupt_leave_critical_section+0x10>)
    2486:	4798      	blx	r3
}
    2488:	46c0      	nop			; (mov r8, r8)
    248a:	46bd      	mov	sp, r7
    248c:	bd80      	pop	{r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	00000345 	.word	0x00000345

00002494 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2494:	b580      	push	{r7, lr}
    2496:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2498:	4b05      	ldr	r3, [pc, #20]	; (24b0 <system_gclk_is_syncing+0x1c>)
    249a:	785b      	ldrb	r3, [r3, #1]
    249c:	b2db      	uxtb	r3, r3
    249e:	b25b      	sxtb	r3, r3
    24a0:	2b00      	cmp	r3, #0
    24a2:	da01      	bge.n	24a8 <system_gclk_is_syncing+0x14>
		return true;
    24a4:	2301      	movs	r3, #1
    24a6:	e000      	b.n	24aa <system_gclk_is_syncing+0x16>
	}

	return false;
    24a8:	2300      	movs	r3, #0
}
    24aa:	0018      	movs	r0, r3
    24ac:	46bd      	mov	sp, r7
    24ae:	bd80      	pop	{r7, pc}
    24b0:	40000c00 	.word	0x40000c00

000024b4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    24b4:	b580      	push	{r7, lr}
    24b6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    24b8:	2108      	movs	r1, #8
    24ba:	2000      	movs	r0, #0
    24bc:	4b07      	ldr	r3, [pc, #28]	; (24dc <system_gclk_init+0x28>)
    24be:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    24c0:	4b07      	ldr	r3, [pc, #28]	; (24e0 <system_gclk_init+0x2c>)
    24c2:	2201      	movs	r2, #1
    24c4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	4b05      	ldr	r3, [pc, #20]	; (24e0 <system_gclk_init+0x2c>)
    24ca:	781b      	ldrb	r3, [r3, #0]
    24cc:	b2db      	uxtb	r3, r3
    24ce:	001a      	movs	r2, r3
    24d0:	2301      	movs	r3, #1
    24d2:	4013      	ands	r3, r2
    24d4:	d1f8      	bne.n	24c8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	46bd      	mov	sp, r7
    24da:	bd80      	pop	{r7, pc}
    24dc:	00002411 	.word	0x00002411
    24e0:	40000c00 	.word	0x40000c00

000024e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    24e4:	b580      	push	{r7, lr}
    24e6:	b086      	sub	sp, #24
    24e8:	af00      	add	r7, sp, #0
    24ea:	0002      	movs	r2, r0
    24ec:	6039      	str	r1, [r7, #0]
    24ee:	1dfb      	adds	r3, r7, #7
    24f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    24f2:	1dfb      	adds	r3, r7, #7
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    24f8:	1dfb      	adds	r3, r7, #7
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    24fe:	683b      	ldr	r3, [r7, #0]
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	021b      	lsls	r3, r3, #8
    2504:	001a      	movs	r2, r3
    2506:	697b      	ldr	r3, [r7, #20]
    2508:	4313      	orrs	r3, r2
    250a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    250c:	683b      	ldr	r3, [r7, #0]
    250e:	785b      	ldrb	r3, [r3, #1]
    2510:	2b00      	cmp	r3, #0
    2512:	d004      	beq.n	251e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2514:	697b      	ldr	r3, [r7, #20]
    2516:	2280      	movs	r2, #128	; 0x80
    2518:	02d2      	lsls	r2, r2, #11
    251a:	4313      	orrs	r3, r2
    251c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    251e:	683b      	ldr	r3, [r7, #0]
    2520:	7a5b      	ldrb	r3, [r3, #9]
    2522:	2b00      	cmp	r3, #0
    2524:	d004      	beq.n	2530 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2526:	697b      	ldr	r3, [r7, #20]
    2528:	2280      	movs	r2, #128	; 0x80
    252a:	0312      	lsls	r2, r2, #12
    252c:	4313      	orrs	r3, r2
    252e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	685b      	ldr	r3, [r3, #4]
    2534:	2b01      	cmp	r3, #1
    2536:	d92c      	bls.n	2592 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2538:	683b      	ldr	r3, [r7, #0]
    253a:	685a      	ldr	r2, [r3, #4]
    253c:	683b      	ldr	r3, [r7, #0]
    253e:	685b      	ldr	r3, [r3, #4]
    2540:	3b01      	subs	r3, #1
    2542:	4013      	ands	r3, r2
    2544:	d11a      	bne.n	257c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2546:	2300      	movs	r3, #0
    2548:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    254a:	2302      	movs	r3, #2
    254c:	60bb      	str	r3, [r7, #8]
    254e:	e005      	b.n	255c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	3301      	adds	r3, #1
    2554:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    2556:	68bb      	ldr	r3, [r7, #8]
    2558:	005b      	lsls	r3, r3, #1
    255a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	685a      	ldr	r2, [r3, #4]
    2560:	68bb      	ldr	r3, [r7, #8]
    2562:	429a      	cmp	r2, r3
    2564:	d8f4      	bhi.n	2550 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2566:	68fb      	ldr	r3, [r7, #12]
    2568:	021b      	lsls	r3, r3, #8
    256a:	693a      	ldr	r2, [r7, #16]
    256c:	4313      	orrs	r3, r2
    256e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2570:	697b      	ldr	r3, [r7, #20]
    2572:	2280      	movs	r2, #128	; 0x80
    2574:	0352      	lsls	r2, r2, #13
    2576:	4313      	orrs	r3, r2
    2578:	617b      	str	r3, [r7, #20]
    257a:	e00a      	b.n	2592 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    257c:	683b      	ldr	r3, [r7, #0]
    257e:	685b      	ldr	r3, [r3, #4]
    2580:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2582:	693a      	ldr	r2, [r7, #16]
    2584:	4313      	orrs	r3, r2
    2586:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2588:	697b      	ldr	r3, [r7, #20]
    258a:	2280      	movs	r2, #128	; 0x80
    258c:	0292      	lsls	r2, r2, #10
    258e:	4313      	orrs	r3, r2
    2590:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2592:	683b      	ldr	r3, [r7, #0]
    2594:	7a1b      	ldrb	r3, [r3, #8]
    2596:	2b00      	cmp	r3, #0
    2598:	d004      	beq.n	25a4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    259a:	697b      	ldr	r3, [r7, #20]
    259c:	2280      	movs	r2, #128	; 0x80
    259e:	0392      	lsls	r2, r2, #14
    25a0:	4313      	orrs	r3, r2
    25a2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    25a4:	46c0      	nop			; (mov r8, r8)
    25a6:	4b13      	ldr	r3, [pc, #76]	; (25f4 <system_gclk_gen_set_config+0x110>)
    25a8:	4798      	blx	r3
    25aa:	1e03      	subs	r3, r0, #0
    25ac:	d1fb      	bne.n	25a6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    25ae:	4b12      	ldr	r3, [pc, #72]	; (25f8 <system_gclk_gen_set_config+0x114>)
    25b0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25b2:	4a12      	ldr	r2, [pc, #72]	; (25fc <system_gclk_gen_set_config+0x118>)
    25b4:	1dfb      	adds	r3, r7, #7
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	4b0d      	ldr	r3, [pc, #52]	; (25f4 <system_gclk_gen_set_config+0x110>)
    25be:	4798      	blx	r3
    25c0:	1e03      	subs	r3, r0, #0
    25c2:	d1fb      	bne.n	25bc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    25c4:	4b0e      	ldr	r3, [pc, #56]	; (2600 <system_gclk_gen_set_config+0x11c>)
    25c6:	693a      	ldr	r2, [r7, #16]
    25c8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <system_gclk_gen_set_config+0x110>)
    25ce:	4798      	blx	r3
    25d0:	1e03      	subs	r3, r0, #0
    25d2:	d1fb      	bne.n	25cc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <system_gclk_gen_set_config+0x11c>)
    25d6:	4a0a      	ldr	r2, [pc, #40]	; (2600 <system_gclk_gen_set_config+0x11c>)
    25d8:	6851      	ldr	r1, [r2, #4]
    25da:	2280      	movs	r2, #128	; 0x80
    25dc:	0252      	lsls	r2, r2, #9
    25de:	4011      	ands	r1, r2
    25e0:	697a      	ldr	r2, [r7, #20]
    25e2:	430a      	orrs	r2, r1
    25e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    25e6:	4b07      	ldr	r3, [pc, #28]	; (2604 <system_gclk_gen_set_config+0x120>)
    25e8:	4798      	blx	r3
}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	46bd      	mov	sp, r7
    25ee:	b006      	add	sp, #24
    25f0:	bd80      	pop	{r7, pc}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	00002495 	.word	0x00002495
    25f8:	0000246d 	.word	0x0000246d
    25fc:	40000c08 	.word	0x40000c08
    2600:	40000c00 	.word	0x40000c00
    2604:	00002481 	.word	0x00002481

00002608 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2608:	b580      	push	{r7, lr}
    260a:	b082      	sub	sp, #8
    260c:	af00      	add	r7, sp, #0
    260e:	0002      	movs	r2, r0
    2610:	1dfb      	adds	r3, r7, #7
    2612:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2614:	46c0      	nop			; (mov r8, r8)
    2616:	4b0e      	ldr	r3, [pc, #56]	; (2650 <system_gclk_gen_enable+0x48>)
    2618:	4798      	blx	r3
    261a:	1e03      	subs	r3, r0, #0
    261c:	d1fb      	bne.n	2616 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    261e:	4b0d      	ldr	r3, [pc, #52]	; (2654 <system_gclk_gen_enable+0x4c>)
    2620:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2622:	4a0d      	ldr	r2, [pc, #52]	; (2658 <system_gclk_gen_enable+0x50>)
    2624:	1dfb      	adds	r3, r7, #7
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	4b08      	ldr	r3, [pc, #32]	; (2650 <system_gclk_gen_enable+0x48>)
    262e:	4798      	blx	r3
    2630:	1e03      	subs	r3, r0, #0
    2632:	d1fb      	bne.n	262c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2634:	4b09      	ldr	r3, [pc, #36]	; (265c <system_gclk_gen_enable+0x54>)
    2636:	4a09      	ldr	r2, [pc, #36]	; (265c <system_gclk_gen_enable+0x54>)
    2638:	6852      	ldr	r2, [r2, #4]
    263a:	2180      	movs	r1, #128	; 0x80
    263c:	0249      	lsls	r1, r1, #9
    263e:	430a      	orrs	r2, r1
    2640:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2642:	4b07      	ldr	r3, [pc, #28]	; (2660 <system_gclk_gen_enable+0x58>)
    2644:	4798      	blx	r3
}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	46bd      	mov	sp, r7
    264a:	b002      	add	sp, #8
    264c:	bd80      	pop	{r7, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	00002495 	.word	0x00002495
    2654:	0000246d 	.word	0x0000246d
    2658:	40000c04 	.word	0x40000c04
    265c:	40000c00 	.word	0x40000c00
    2660:	00002481 	.word	0x00002481

00002664 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2664:	b580      	push	{r7, lr}
    2666:	b086      	sub	sp, #24
    2668:	af00      	add	r7, sp, #0
    266a:	0002      	movs	r2, r0
    266c:	1dfb      	adds	r3, r7, #7
    266e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2670:	46c0      	nop			; (mov r8, r8)
    2672:	4b2a      	ldr	r3, [pc, #168]	; (271c <system_gclk_gen_get_hz+0xb8>)
    2674:	4798      	blx	r3
    2676:	1e03      	subs	r3, r0, #0
    2678:	d1fb      	bne.n	2672 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    267a:	4b29      	ldr	r3, [pc, #164]	; (2720 <system_gclk_gen_get_hz+0xbc>)
    267c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    267e:	4a29      	ldr	r2, [pc, #164]	; (2724 <system_gclk_gen_get_hz+0xc0>)
    2680:	1dfb      	adds	r3, r7, #7
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	4b24      	ldr	r3, [pc, #144]	; (271c <system_gclk_gen_get_hz+0xb8>)
    268a:	4798      	blx	r3
    268c:	1e03      	subs	r3, r0, #0
    268e:	d1fb      	bne.n	2688 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2690:	4b25      	ldr	r3, [pc, #148]	; (2728 <system_gclk_gen_get_hz+0xc4>)
    2692:	685b      	ldr	r3, [r3, #4]
    2694:	04db      	lsls	r3, r3, #19
    2696:	0edb      	lsrs	r3, r3, #27
    2698:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    269a:	0018      	movs	r0, r3
    269c:	4b23      	ldr	r3, [pc, #140]	; (272c <system_gclk_gen_get_hz+0xc8>)
    269e:	4798      	blx	r3
    26a0:	0003      	movs	r3, r0
    26a2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26a4:	4a1f      	ldr	r2, [pc, #124]	; (2724 <system_gclk_gen_get_hz+0xc0>)
    26a6:	1dfb      	adds	r3, r7, #7
    26a8:	781b      	ldrb	r3, [r3, #0]
    26aa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26ac:	4b1e      	ldr	r3, [pc, #120]	; (2728 <system_gclk_gen_get_hz+0xc4>)
    26ae:	685b      	ldr	r3, [r3, #4]
    26b0:	02db      	lsls	r3, r3, #11
    26b2:	0fdb      	lsrs	r3, r3, #31
    26b4:	b2da      	uxtb	r2, r3
    26b6:	2313      	movs	r3, #19
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26bc:	4a1c      	ldr	r2, [pc, #112]	; (2730 <system_gclk_gen_get_hz+0xcc>)
    26be:	1dfb      	adds	r3, r7, #7
    26c0:	781b      	ldrb	r3, [r3, #0]
    26c2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	4b15      	ldr	r3, [pc, #84]	; (271c <system_gclk_gen_get_hz+0xb8>)
    26c8:	4798      	blx	r3
    26ca:	1e03      	subs	r3, r0, #0
    26cc:	d1fb      	bne.n	26c6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    26ce:	4b16      	ldr	r3, [pc, #88]	; (2728 <system_gclk_gen_get_hz+0xc4>)
    26d0:	689b      	ldr	r3, [r3, #8]
    26d2:	021b      	lsls	r3, r3, #8
    26d4:	0c1b      	lsrs	r3, r3, #16
    26d6:	b29b      	uxth	r3, r3
    26d8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    26da:	4b16      	ldr	r3, [pc, #88]	; (2734 <system_gclk_gen_get_hz+0xd0>)
    26dc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    26de:	2313      	movs	r3, #19
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	781b      	ldrb	r3, [r3, #0]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d109      	bne.n	26fc <system_gclk_gen_get_hz+0x98>
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	2b01      	cmp	r3, #1
    26ec:	d906      	bls.n	26fc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    26ee:	4b12      	ldr	r3, [pc, #72]	; (2738 <system_gclk_gen_get_hz+0xd4>)
    26f0:	68f9      	ldr	r1, [r7, #12]
    26f2:	6978      	ldr	r0, [r7, #20]
    26f4:	4798      	blx	r3
    26f6:	0003      	movs	r3, r0
    26f8:	617b      	str	r3, [r7, #20]
    26fa:	e00a      	b.n	2712 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    26fc:	2313      	movs	r3, #19
    26fe:	18fb      	adds	r3, r7, r3
    2700:	781b      	ldrb	r3, [r3, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d005      	beq.n	2712 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    2706:	68fb      	ldr	r3, [r7, #12]
    2708:	3301      	adds	r3, #1
    270a:	697a      	ldr	r2, [r7, #20]
    270c:	40da      	lsrs	r2, r3
    270e:	0013      	movs	r3, r2
    2710:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2712:	697b      	ldr	r3, [r7, #20]
}
    2714:	0018      	movs	r0, r3
    2716:	46bd      	mov	sp, r7
    2718:	b006      	add	sp, #24
    271a:	bd80      	pop	{r7, pc}
    271c:	00002495 	.word	0x00002495
    2720:	0000246d 	.word	0x0000246d
    2724:	40000c04 	.word	0x40000c04
    2728:	40000c00 	.word	0x40000c00
    272c:	00001d09 	.word	0x00001d09
    2730:	40000c08 	.word	0x40000c08
    2734:	00002481 	.word	0x00002481
    2738:	00003059 	.word	0x00003059

0000273c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    273c:	b580      	push	{r7, lr}
    273e:	b084      	sub	sp, #16
    2740:	af00      	add	r7, sp, #0
    2742:	0002      	movs	r2, r0
    2744:	6039      	str	r1, [r7, #0]
    2746:	1dfb      	adds	r3, r7, #7
    2748:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    274a:	1dfb      	adds	r3, r7, #7
    274c:	781b      	ldrb	r3, [r3, #0]
    274e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2750:	683b      	ldr	r3, [r7, #0]
    2752:	781b      	ldrb	r3, [r3, #0]
    2754:	021b      	lsls	r3, r3, #8
    2756:	001a      	movs	r2, r3
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	4313      	orrs	r3, r2
    275c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    275e:	1dfb      	adds	r3, r7, #7
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	0018      	movs	r0, r3
    2764:	4b04      	ldr	r3, [pc, #16]	; (2778 <system_gclk_chan_set_config+0x3c>)
    2766:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <system_gclk_chan_set_config+0x40>)
    276a:	68fa      	ldr	r2, [r7, #12]
    276c:	b292      	uxth	r2, r2
    276e:	805a      	strh	r2, [r3, #2]
}
    2770:	46c0      	nop			; (mov r8, r8)
    2772:	46bd      	mov	sp, r7
    2774:	b004      	add	sp, #16
    2776:	bd80      	pop	{r7, pc}
    2778:	000027c9 	.word	0x000027c9
    277c:	40000c00 	.word	0x40000c00

00002780 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2780:	b580      	push	{r7, lr}
    2782:	b082      	sub	sp, #8
    2784:	af00      	add	r7, sp, #0
    2786:	0002      	movs	r2, r0
    2788:	1dfb      	adds	r3, r7, #7
    278a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    278c:	4b0a      	ldr	r3, [pc, #40]	; (27b8 <system_gclk_chan_enable+0x38>)
    278e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2790:	4a0a      	ldr	r2, [pc, #40]	; (27bc <system_gclk_chan_enable+0x3c>)
    2792:	1dfb      	adds	r3, r7, #7
    2794:	781b      	ldrb	r3, [r3, #0]
    2796:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2798:	4909      	ldr	r1, [pc, #36]	; (27c0 <system_gclk_chan_enable+0x40>)
    279a:	4b09      	ldr	r3, [pc, #36]	; (27c0 <system_gclk_chan_enable+0x40>)
    279c:	885b      	ldrh	r3, [r3, #2]
    279e:	b29b      	uxth	r3, r3
    27a0:	2280      	movs	r2, #128	; 0x80
    27a2:	01d2      	lsls	r2, r2, #7
    27a4:	4313      	orrs	r3, r2
    27a6:	b29b      	uxth	r3, r3
    27a8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    27aa:	4b06      	ldr	r3, [pc, #24]	; (27c4 <system_gclk_chan_enable+0x44>)
    27ac:	4798      	blx	r3
}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	46bd      	mov	sp, r7
    27b2:	b002      	add	sp, #8
    27b4:	bd80      	pop	{r7, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	0000246d 	.word	0x0000246d
    27bc:	40000c02 	.word	0x40000c02
    27c0:	40000c00 	.word	0x40000c00
    27c4:	00002481 	.word	0x00002481

000027c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27c8:	b580      	push	{r7, lr}
    27ca:	b084      	sub	sp, #16
    27cc:	af00      	add	r7, sp, #0
    27ce:	0002      	movs	r2, r0
    27d0:	1dfb      	adds	r3, r7, #7
    27d2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    27d4:	4b1c      	ldr	r3, [pc, #112]	; (2848 <system_gclk_chan_disable+0x80>)
    27d6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27d8:	4a1c      	ldr	r2, [pc, #112]	; (284c <system_gclk_chan_disable+0x84>)
    27da:	1dfb      	adds	r3, r7, #7
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    27e0:	4b1b      	ldr	r3, [pc, #108]	; (2850 <system_gclk_chan_disable+0x88>)
    27e2:	885b      	ldrh	r3, [r3, #2]
    27e4:	051b      	lsls	r3, r3, #20
    27e6:	0f1b      	lsrs	r3, r3, #28
    27e8:	b2db      	uxtb	r3, r3
    27ea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    27ec:	4a18      	ldr	r2, [pc, #96]	; (2850 <system_gclk_chan_disable+0x88>)
    27ee:	8853      	ldrh	r3, [r2, #2]
    27f0:	4918      	ldr	r1, [pc, #96]	; (2854 <system_gclk_chan_disable+0x8c>)
    27f2:	400b      	ands	r3, r1
    27f4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    27f6:	4a16      	ldr	r2, [pc, #88]	; (2850 <system_gclk_chan_disable+0x88>)
    27f8:	4b15      	ldr	r3, [pc, #84]	; (2850 <system_gclk_chan_disable+0x88>)
    27fa:	885b      	ldrh	r3, [r3, #2]
    27fc:	b29b      	uxth	r3, r3
    27fe:	4916      	ldr	r1, [pc, #88]	; (2858 <system_gclk_chan_disable+0x90>)
    2800:	400b      	ands	r3, r1
    2802:	b29b      	uxth	r3, r3
    2804:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	4b11      	ldr	r3, [pc, #68]	; (2850 <system_gclk_chan_disable+0x88>)
    280a:	885b      	ldrh	r3, [r3, #2]
    280c:	b29b      	uxth	r3, r3
    280e:	001a      	movs	r2, r3
    2810:	2380      	movs	r3, #128	; 0x80
    2812:	01db      	lsls	r3, r3, #7
    2814:	4013      	ands	r3, r2
    2816:	d1f7      	bne.n	2808 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2818:	4a0d      	ldr	r2, [pc, #52]	; (2850 <system_gclk_chan_disable+0x88>)
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	b2db      	uxtb	r3, r3
    281e:	1c19      	adds	r1, r3, #0
    2820:	230f      	movs	r3, #15
    2822:	400b      	ands	r3, r1
    2824:	b2d9      	uxtb	r1, r3
    2826:	8853      	ldrh	r3, [r2, #2]
    2828:	1c08      	adds	r0, r1, #0
    282a:	210f      	movs	r1, #15
    282c:	4001      	ands	r1, r0
    282e:	0208      	lsls	r0, r1, #8
    2830:	4908      	ldr	r1, [pc, #32]	; (2854 <system_gclk_chan_disable+0x8c>)
    2832:	400b      	ands	r3, r1
    2834:	1c19      	adds	r1, r3, #0
    2836:	1c03      	adds	r3, r0, #0
    2838:	430b      	orrs	r3, r1
    283a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    283c:	4b07      	ldr	r3, [pc, #28]	; (285c <system_gclk_chan_disable+0x94>)
    283e:	4798      	blx	r3
}
    2840:	46c0      	nop			; (mov r8, r8)
    2842:	46bd      	mov	sp, r7
    2844:	b004      	add	sp, #16
    2846:	bd80      	pop	{r7, pc}
    2848:	0000246d 	.word	0x0000246d
    284c:	40000c02 	.word	0x40000c02
    2850:	40000c00 	.word	0x40000c00
    2854:	fffff0ff 	.word	0xfffff0ff
    2858:	ffffbfff 	.word	0xffffbfff
    285c:	00002481 	.word	0x00002481

00002860 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2860:	b580      	push	{r7, lr}
    2862:	b084      	sub	sp, #16
    2864:	af00      	add	r7, sp, #0
    2866:	0002      	movs	r2, r0
    2868:	1dfb      	adds	r3, r7, #7
    286a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    286c:	4b0d      	ldr	r3, [pc, #52]	; (28a4 <system_gclk_chan_get_hz+0x44>)
    286e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2870:	4a0d      	ldr	r2, [pc, #52]	; (28a8 <system_gclk_chan_get_hz+0x48>)
    2872:	1dfb      	adds	r3, r7, #7
    2874:	781b      	ldrb	r3, [r3, #0]
    2876:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2878:	4b0c      	ldr	r3, [pc, #48]	; (28ac <system_gclk_chan_get_hz+0x4c>)
    287a:	885b      	ldrh	r3, [r3, #2]
    287c:	051b      	lsls	r3, r3, #20
    287e:	0f1b      	lsrs	r3, r3, #28
    2880:	b2da      	uxtb	r2, r3
    2882:	230f      	movs	r3, #15
    2884:	18fb      	adds	r3, r7, r3
    2886:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    2888:	4b09      	ldr	r3, [pc, #36]	; (28b0 <system_gclk_chan_get_hz+0x50>)
    288a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    288c:	230f      	movs	r3, #15
    288e:	18fb      	adds	r3, r7, r3
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	0018      	movs	r0, r3
    2894:	4b07      	ldr	r3, [pc, #28]	; (28b4 <system_gclk_chan_get_hz+0x54>)
    2896:	4798      	blx	r3
    2898:	0003      	movs	r3, r0
}
    289a:	0018      	movs	r0, r3
    289c:	46bd      	mov	sp, r7
    289e:	b004      	add	sp, #16
    28a0:	bd80      	pop	{r7, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	0000246d 	.word	0x0000246d
    28a8:	40000c02 	.word	0x40000c02
    28ac:	40000c00 	.word	0x40000c00
    28b0:	00002481 	.word	0x00002481
    28b4:	00002665 	.word	0x00002665

000028b8 <system_pinmux_get_group_from_gpio_pin>:
{
    28b8:	b580      	push	{r7, lr}
    28ba:	b084      	sub	sp, #16
    28bc:	af00      	add	r7, sp, #0
    28be:	0002      	movs	r2, r0
    28c0:	1dfb      	adds	r3, r7, #7
    28c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    28c4:	230f      	movs	r3, #15
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	1dfa      	adds	r2, r7, #7
    28ca:	7812      	ldrb	r2, [r2, #0]
    28cc:	09d2      	lsrs	r2, r2, #7
    28ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    28d0:	230e      	movs	r3, #14
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	1dfa      	adds	r2, r7, #7
    28d6:	7812      	ldrb	r2, [r2, #0]
    28d8:	0952      	lsrs	r2, r2, #5
    28da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    28dc:	4b0d      	ldr	r3, [pc, #52]	; (2914 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    28de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    28e0:	230f      	movs	r3, #15
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d10f      	bne.n	290a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    28ea:	230f      	movs	r3, #15
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	781b      	ldrb	r3, [r3, #0]
    28f0:	009b      	lsls	r3, r3, #2
    28f2:	2210      	movs	r2, #16
    28f4:	4694      	mov	ip, r2
    28f6:	44bc      	add	ip, r7
    28f8:	4463      	add	r3, ip
    28fa:	3b08      	subs	r3, #8
    28fc:	681a      	ldr	r2, [r3, #0]
    28fe:	230e      	movs	r3, #14
    2900:	18fb      	adds	r3, r7, r3
    2902:	781b      	ldrb	r3, [r3, #0]
    2904:	01db      	lsls	r3, r3, #7
    2906:	18d3      	adds	r3, r2, r3
    2908:	e000      	b.n	290c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    290a:	2300      	movs	r3, #0
}
    290c:	0018      	movs	r0, r3
    290e:	46bd      	mov	sp, r7
    2910:	b004      	add	sp, #16
    2912:	bd80      	pop	{r7, pc}
    2914:	41004400 	.word	0x41004400

00002918 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2918:	b580      	push	{r7, lr}
    291a:	b088      	sub	sp, #32
    291c:	af00      	add	r7, sp, #0
    291e:	60f8      	str	r0, [r7, #12]
    2920:	60b9      	str	r1, [r7, #8]
    2922:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2924:	2300      	movs	r3, #0
    2926:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	78db      	ldrb	r3, [r3, #3]
    292c:	2201      	movs	r2, #1
    292e:	4053      	eors	r3, r2
    2930:	b2db      	uxtb	r3, r3
    2932:	2b00      	cmp	r3, #0
    2934:	d035      	beq.n	29a2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	781b      	ldrb	r3, [r3, #0]
    293a:	2b80      	cmp	r3, #128	; 0x80
    293c:	d00b      	beq.n	2956 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    293e:	69fb      	ldr	r3, [r7, #28]
    2940:	2280      	movs	r2, #128	; 0x80
    2942:	0252      	lsls	r2, r2, #9
    2944:	4313      	orrs	r3, r2
    2946:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	061b      	lsls	r3, r3, #24
    294e:	001a      	movs	r2, r3
    2950:	69fb      	ldr	r3, [r7, #28]
    2952:	4313      	orrs	r3, r2
    2954:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	785b      	ldrb	r3, [r3, #1]
    295a:	2b00      	cmp	r3, #0
    295c:	d003      	beq.n	2966 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    295e:	687b      	ldr	r3, [r7, #4]
    2960:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2962:	2b02      	cmp	r3, #2
    2964:	d110      	bne.n	2988 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2966:	69fb      	ldr	r3, [r7, #28]
    2968:	2280      	movs	r2, #128	; 0x80
    296a:	0292      	lsls	r2, r2, #10
    296c:	4313      	orrs	r3, r2
    296e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	789b      	ldrb	r3, [r3, #2]
    2974:	2b00      	cmp	r3, #0
    2976:	d004      	beq.n	2982 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2978:	69fb      	ldr	r3, [r7, #28]
    297a:	2280      	movs	r2, #128	; 0x80
    297c:	02d2      	lsls	r2, r2, #11
    297e:	4313      	orrs	r3, r2
    2980:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2982:	68fb      	ldr	r3, [r7, #12]
    2984:	68ba      	ldr	r2, [r7, #8]
    2986:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	785b      	ldrb	r3, [r3, #1]
    298c:	2b01      	cmp	r3, #1
    298e:	d003      	beq.n	2998 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2990:	687b      	ldr	r3, [r7, #4]
    2992:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2994:	2b02      	cmp	r3, #2
    2996:	d107      	bne.n	29a8 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2998:	69fb      	ldr	r3, [r7, #28]
    299a:	4a22      	ldr	r2, [pc, #136]	; (2a24 <_system_pinmux_config+0x10c>)
    299c:	4013      	ands	r3, r2
    299e:	61fb      	str	r3, [r7, #28]
    29a0:	e002      	b.n	29a8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    29a2:	68fb      	ldr	r3, [r7, #12]
    29a4:	68ba      	ldr	r2, [r7, #8]
    29a6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29a8:	68bb      	ldr	r3, [r7, #8]
    29aa:	041b      	lsls	r3, r3, #16
    29ac:	0c1b      	lsrs	r3, r3, #16
    29ae:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29b0:	68bb      	ldr	r3, [r7, #8]
    29b2:	0c1b      	lsrs	r3, r3, #16
    29b4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29b6:	69ba      	ldr	r2, [r7, #24]
    29b8:	69fb      	ldr	r3, [r7, #28]
    29ba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    29bc:	22a0      	movs	r2, #160	; 0xa0
    29be:	05d2      	lsls	r2, r2, #23
    29c0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29c2:	68fb      	ldr	r3, [r7, #12]
    29c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29c6:	697a      	ldr	r2, [r7, #20]
    29c8:	69fb      	ldr	r3, [r7, #28]
    29ca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29cc:	22d0      	movs	r2, #208	; 0xd0
    29ce:	0612      	lsls	r2, r2, #24
    29d0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29d2:	68fb      	ldr	r3, [r7, #12]
    29d4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	78db      	ldrb	r3, [r3, #3]
    29da:	2201      	movs	r2, #1
    29dc:	4053      	eors	r3, r2
    29de:	b2db      	uxtb	r3, r3
    29e0:	2b00      	cmp	r3, #0
    29e2:	d01a      	beq.n	2a1a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29e4:	69fa      	ldr	r2, [r7, #28]
    29e6:	2380      	movs	r3, #128	; 0x80
    29e8:	02db      	lsls	r3, r3, #11
    29ea:	4013      	ands	r3, r2
    29ec:	d00a      	beq.n	2a04 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	789b      	ldrb	r3, [r3, #2]
    29f2:	2b01      	cmp	r3, #1
    29f4:	d103      	bne.n	29fe <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    29f6:	68fb      	ldr	r3, [r7, #12]
    29f8:	68ba      	ldr	r2, [r7, #8]
    29fa:	619a      	str	r2, [r3, #24]
    29fc:	e002      	b.n	2a04 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	68ba      	ldr	r2, [r7, #8]
    2a02:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	785b      	ldrb	r3, [r3, #1]
    2a08:	2b01      	cmp	r3, #1
    2a0a:	d003      	beq.n	2a14 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a10:	2b02      	cmp	r3, #2
    2a12:	d102      	bne.n	2a1a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	68ba      	ldr	r2, [r7, #8]
    2a18:	609a      	str	r2, [r3, #8]
		}
	}
}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	46bd      	mov	sp, r7
    2a1e:	b008      	add	sp, #32
    2a20:	bd80      	pop	{r7, pc}
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	fffbffff 	.word	0xfffbffff

00002a28 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2a28:	b580      	push	{r7, lr}
    2a2a:	b084      	sub	sp, #16
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	0002      	movs	r2, r0
    2a30:	6039      	str	r1, [r7, #0]
    2a32:	1dfb      	adds	r3, r7, #7
    2a34:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2a36:	1dfb      	adds	r3, r7, #7
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	0018      	movs	r0, r3
    2a3c:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <system_pinmux_pin_set_config+0x40>)
    2a3e:	4798      	blx	r3
    2a40:	0003      	movs	r3, r0
    2a42:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a44:	1dfb      	adds	r3, r7, #7
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	221f      	movs	r2, #31
    2a4a:	4013      	ands	r3, r2
    2a4c:	2201      	movs	r2, #1
    2a4e:	409a      	lsls	r2, r3
    2a50:	0013      	movs	r3, r2
    2a52:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	68b9      	ldr	r1, [r7, #8]
    2a58:	68fb      	ldr	r3, [r7, #12]
    2a5a:	0018      	movs	r0, r3
    2a5c:	4b03      	ldr	r3, [pc, #12]	; (2a6c <system_pinmux_pin_set_config+0x44>)
    2a5e:	4798      	blx	r3
}
    2a60:	46c0      	nop			; (mov r8, r8)
    2a62:	46bd      	mov	sp, r7
    2a64:	b004      	add	sp, #16
    2a66:	bd80      	pop	{r7, pc}
    2a68:	000028b9 	.word	0x000028b9
    2a6c:	00002919 	.word	0x00002919

00002a70 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	af00      	add	r7, sp, #0
	return;
    2a74:	46c0      	nop			; (mov r8, r8)
}
    2a76:	46bd      	mov	sp, r7
    2a78:	bd80      	pop	{r7, pc}
	...

00002a7c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a80:	4b06      	ldr	r3, [pc, #24]	; (2a9c <system_init+0x20>)
    2a82:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a84:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <system_init+0x24>)
    2a86:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a88:	4b06      	ldr	r3, [pc, #24]	; (2aa4 <system_init+0x28>)
    2a8a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a8c:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <system_init+0x2c>)
    2a8e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a90:	4b06      	ldr	r3, [pc, #24]	; (2aac <system_init+0x30>)
    2a92:	4798      	blx	r3
}
    2a94:	46c0      	nop			; (mov r8, r8)
    2a96:	46bd      	mov	sp, r7
    2a98:	bd80      	pop	{r7, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	00002195 	.word	0x00002195
    2aa0:	00000481 	.word	0x00000481
    2aa4:	00002a71 	.word	0x00002a71
    2aa8:	000006f1 	.word	0x000006f1
    2aac:	00002a71 	.word	0x00002a71

00002ab0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2ab6:	4b2f      	ldr	r3, [pc, #188]	; (2b74 <Reset_Handler+0xc4>)
    2ab8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2aba:	4b2f      	ldr	r3, [pc, #188]	; (2b78 <Reset_Handler+0xc8>)
    2abc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2abe:	687a      	ldr	r2, [r7, #4]
    2ac0:	683b      	ldr	r3, [r7, #0]
    2ac2:	429a      	cmp	r2, r3
    2ac4:	d00c      	beq.n	2ae0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2ac6:	e007      	b.n	2ad8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2ac8:	683b      	ldr	r3, [r7, #0]
    2aca:	1d1a      	adds	r2, r3, #4
    2acc:	603a      	str	r2, [r7, #0]
    2ace:	687a      	ldr	r2, [r7, #4]
    2ad0:	1d11      	adds	r1, r2, #4
    2ad2:	6079      	str	r1, [r7, #4]
    2ad4:	6812      	ldr	r2, [r2, #0]
    2ad6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    2ad8:	683a      	ldr	r2, [r7, #0]
    2ada:	4b28      	ldr	r3, [pc, #160]	; (2b7c <Reset_Handler+0xcc>)
    2adc:	429a      	cmp	r2, r3
    2ade:	d3f3      	bcc.n	2ac8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2ae0:	4b27      	ldr	r3, [pc, #156]	; (2b80 <Reset_Handler+0xd0>)
    2ae2:	603b      	str	r3, [r7, #0]
    2ae4:	e004      	b.n	2af0 <Reset_Handler+0x40>
                *pDest++ = 0;
    2ae6:	683b      	ldr	r3, [r7, #0]
    2ae8:	1d1a      	adds	r2, r3, #4
    2aea:	603a      	str	r2, [r7, #0]
    2aec:	2200      	movs	r2, #0
    2aee:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2af0:	683a      	ldr	r2, [r7, #0]
    2af2:	4b24      	ldr	r3, [pc, #144]	; (2b84 <Reset_Handler+0xd4>)
    2af4:	429a      	cmp	r2, r3
    2af6:	d3f6      	bcc.n	2ae6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2af8:	4b23      	ldr	r3, [pc, #140]	; (2b88 <Reset_Handler+0xd8>)
    2afa:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2afc:	4b23      	ldr	r3, [pc, #140]	; (2b8c <Reset_Handler+0xdc>)
    2afe:	687a      	ldr	r2, [r7, #4]
    2b00:	21ff      	movs	r1, #255	; 0xff
    2b02:	438a      	bics	r2, r1
    2b04:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2b06:	4a22      	ldr	r2, [pc, #136]	; (2b90 <Reset_Handler+0xe0>)
    2b08:	2390      	movs	r3, #144	; 0x90
    2b0a:	005b      	lsls	r3, r3, #1
    2b0c:	2102      	movs	r1, #2
    2b0e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2b10:	4a20      	ldr	r2, [pc, #128]	; (2b94 <Reset_Handler+0xe4>)
    2b12:	78d3      	ldrb	r3, [r2, #3]
    2b14:	2103      	movs	r1, #3
    2b16:	438b      	bics	r3, r1
    2b18:	1c19      	adds	r1, r3, #0
    2b1a:	2302      	movs	r3, #2
    2b1c:	430b      	orrs	r3, r1
    2b1e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2b20:	4a1c      	ldr	r2, [pc, #112]	; (2b94 <Reset_Handler+0xe4>)
    2b22:	78d3      	ldrb	r3, [r2, #3]
    2b24:	210c      	movs	r1, #12
    2b26:	438b      	bics	r3, r1
    2b28:	1c19      	adds	r1, r3, #0
    2b2a:	2308      	movs	r3, #8
    2b2c:	430b      	orrs	r3, r1
    2b2e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2b30:	4a19      	ldr	r2, [pc, #100]	; (2b98 <Reset_Handler+0xe8>)
    2b32:	7b93      	ldrb	r3, [r2, #14]
    2b34:	2130      	movs	r1, #48	; 0x30
    2b36:	438b      	bics	r3, r1
    2b38:	1c19      	adds	r1, r3, #0
    2b3a:	2320      	movs	r3, #32
    2b3c:	430b      	orrs	r3, r1
    2b3e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2b40:	4a15      	ldr	r2, [pc, #84]	; (2b98 <Reset_Handler+0xe8>)
    2b42:	7b93      	ldrb	r3, [r2, #14]
    2b44:	210c      	movs	r1, #12
    2b46:	438b      	bics	r3, r1
    2b48:	1c19      	adds	r1, r3, #0
    2b4a:	2308      	movs	r3, #8
    2b4c:	430b      	orrs	r3, r1
    2b4e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2b50:	4a11      	ldr	r2, [pc, #68]	; (2b98 <Reset_Handler+0xe8>)
    2b52:	7b93      	ldrb	r3, [r2, #14]
    2b54:	2103      	movs	r1, #3
    2b56:	438b      	bics	r3, r1
    2b58:	1c19      	adds	r1, r3, #0
    2b5a:	2302      	movs	r3, #2
    2b5c:	430b      	orrs	r3, r1
    2b5e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2b60:	4a0e      	ldr	r2, [pc, #56]	; (2b9c <Reset_Handler+0xec>)
    2b62:	6853      	ldr	r3, [r2, #4]
    2b64:	2180      	movs	r1, #128	; 0x80
    2b66:	430b      	orrs	r3, r1
    2b68:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <Reset_Handler+0xf0>)
    2b6c:	4798      	blx	r3

        /* Branch to main function */
        main();
    2b6e:	4b0d      	ldr	r3, [pc, #52]	; (2ba4 <Reset_Handler+0xf4>)
    2b70:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2b72:	e7fe      	b.n	2b72 <Reset_Handler+0xc2>
    2b74:	000044a0 	.word	0x000044a0
    2b78:	20000000 	.word	0x20000000
    2b7c:	20000068 	.word	0x20000068
    2b80:	20000068 	.word	0x20000068
    2b84:	20000170 	.word	0x20000170
    2b88:	00000000 	.word	0x00000000
    2b8c:	e000ed00 	.word	0xe000ed00
    2b90:	41007000 	.word	0x41007000
    2b94:	41005000 	.word	0x41005000
    2b98:	41004800 	.word	0x41004800
    2b9c:	41004000 	.word	0x41004000
    2ba0:	000031c5 	.word	0x000031c5
    2ba4:	00003005 	.word	0x00003005

00002ba8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ba8:	b580      	push	{r7, lr}
    2baa:	af00      	add	r7, sp, #0
        while (1) {
    2bac:	e7fe      	b.n	2bac <Dummy_Handler+0x4>
	...

00002bb0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b086      	sub	sp, #24
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	60f8      	str	r0, [r7, #12]
    2bb8:	60b9      	str	r1, [r7, #8]
    2bba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2bbc:	2300      	movs	r3, #0
    2bbe:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    2bc0:	68fb      	ldr	r3, [r7, #12]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d012      	beq.n	2bec <_read+0x3c>
		return -1;
    2bc6:	2301      	movs	r3, #1
    2bc8:	425b      	negs	r3, r3
    2bca:	e013      	b.n	2bf4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    2bcc:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <_read+0x4c>)
    2bce:	681a      	ldr	r2, [r3, #0]
    2bd0:	4b0b      	ldr	r3, [pc, #44]	; (2c00 <_read+0x50>)
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	68b9      	ldr	r1, [r7, #8]
    2bd6:	0018      	movs	r0, r3
    2bd8:	4790      	blx	r2
		ptr++;
    2bda:	68bb      	ldr	r3, [r7, #8]
    2bdc:	3301      	adds	r3, #1
    2bde:	60bb      	str	r3, [r7, #8]
		nChars++;
    2be0:	697b      	ldr	r3, [r7, #20]
    2be2:	3301      	adds	r3, #1
    2be4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	3b01      	subs	r3, #1
    2bea:	607b      	str	r3, [r7, #4]
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	dcec      	bgt.n	2bcc <_read+0x1c>
	}
	return nChars;
    2bf2:	697b      	ldr	r3, [r7, #20]
}
    2bf4:	0018      	movs	r0, r3
    2bf6:	46bd      	mov	sp, r7
    2bf8:	b006      	add	sp, #24
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	20000160 	.word	0x20000160
    2c00:	20000168 	.word	0x20000168

00002c04 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b086      	sub	sp, #24
    2c08:	af00      	add	r7, sp, #0
    2c0a:	60f8      	str	r0, [r7, #12]
    2c0c:	60b9      	str	r1, [r7, #8]
    2c0e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2c10:	2300      	movs	r3, #0
    2c12:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    2c14:	68fb      	ldr	r3, [r7, #12]
    2c16:	2b01      	cmp	r3, #1
    2c18:	d01d      	beq.n	2c56 <_write+0x52>
    2c1a:	68fb      	ldr	r3, [r7, #12]
    2c1c:	2b02      	cmp	r3, #2
    2c1e:	d01a      	beq.n	2c56 <_write+0x52>
    2c20:	68fb      	ldr	r3, [r7, #12]
    2c22:	2b03      	cmp	r3, #3
    2c24:	d017      	beq.n	2c56 <_write+0x52>
		return -1;
    2c26:	2301      	movs	r3, #1
    2c28:	425b      	negs	r3, r3
    2c2a:	e018      	b.n	2c5e <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2c2c:	4b0e      	ldr	r3, [pc, #56]	; (2c68 <_write+0x64>)
    2c2e:	681a      	ldr	r2, [r3, #0]
    2c30:	4b0e      	ldr	r3, [pc, #56]	; (2c6c <_write+0x68>)
    2c32:	6818      	ldr	r0, [r3, #0]
    2c34:	68bb      	ldr	r3, [r7, #8]
    2c36:	1c59      	adds	r1, r3, #1
    2c38:	60b9      	str	r1, [r7, #8]
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	0019      	movs	r1, r3
    2c3e:	4790      	blx	r2
    2c40:	1e03      	subs	r3, r0, #0
    2c42:	da02      	bge.n	2c4a <_write+0x46>
			return -1;
    2c44:	2301      	movs	r3, #1
    2c46:	425b      	negs	r3, r3
    2c48:	e009      	b.n	2c5e <_write+0x5a>
		}
		++nChars;
    2c4a:	697b      	ldr	r3, [r7, #20]
    2c4c:	3301      	adds	r3, #1
    2c4e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	3b01      	subs	r3, #1
    2c54:	607b      	str	r3, [r7, #4]
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d1e7      	bne.n	2c2c <_write+0x28>
	}
	return nChars;
    2c5c:	697b      	ldr	r3, [r7, #20]
}
    2c5e:	0018      	movs	r0, r3
    2c60:	46bd      	mov	sp, r7
    2c62:	b006      	add	sp, #24
    2c64:	bd80      	pop	{r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	20000164 	.word	0x20000164
    2c6c:	20000168 	.word	0x20000168

00002c70 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2c70:	b580      	push	{r7, lr}
    2c72:	b084      	sub	sp, #16
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2c78:	4b0a      	ldr	r3, [pc, #40]	; (2ca4 <_sbrk+0x34>)
    2c7a:	681b      	ldr	r3, [r3, #0]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d102      	bne.n	2c86 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2c80:	4b08      	ldr	r3, [pc, #32]	; (2ca4 <_sbrk+0x34>)
    2c82:	4a09      	ldr	r2, [pc, #36]	; (2ca8 <_sbrk+0x38>)
    2c84:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2c86:	4b07      	ldr	r3, [pc, #28]	; (2ca4 <_sbrk+0x34>)
    2c88:	681b      	ldr	r3, [r3, #0]
    2c8a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2c8c:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <_sbrk+0x34>)
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	18d2      	adds	r2, r2, r3
    2c94:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <_sbrk+0x34>)
    2c96:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    2c98:	68fb      	ldr	r3, [r7, #12]
}
    2c9a:	0018      	movs	r0, r3
    2c9c:	46bd      	mov	sp, r7
    2c9e:	b004      	add	sp, #16
    2ca0:	bd80      	pop	{r7, pc}
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	200000c0 	.word	0x200000c0
    2ca8:	20002170 	.word	0x20002170

00002cac <_close>:
{
	return -1;
}

extern int _close(int file)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b082      	sub	sp, #8
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
	return -1;
    2cb4:	2301      	movs	r3, #1
    2cb6:	425b      	negs	r3, r3
}
    2cb8:	0018      	movs	r0, r3
    2cba:	46bd      	mov	sp, r7
    2cbc:	b002      	add	sp, #8
    2cbe:	bd80      	pop	{r7, pc}

00002cc0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
    2cc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    2cca:	683b      	ldr	r3, [r7, #0]
    2ccc:	2280      	movs	r2, #128	; 0x80
    2cce:	0192      	lsls	r2, r2, #6
    2cd0:	605a      	str	r2, [r3, #4]

	return 0;
    2cd2:	2300      	movs	r3, #0
}
    2cd4:	0018      	movs	r0, r3
    2cd6:	46bd      	mov	sp, r7
    2cd8:	b002      	add	sp, #8
    2cda:	bd80      	pop	{r7, pc}

00002cdc <_isatty>:

extern int _isatty(int file)
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b082      	sub	sp, #8
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
	return 1;
    2ce4:	2301      	movs	r3, #1
}
    2ce6:	0018      	movs	r0, r3
    2ce8:	46bd      	mov	sp, r7
    2cea:	b002      	add	sp, #8
    2cec:	bd80      	pop	{r7, pc}

00002cee <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    2cee:	b580      	push	{r7, lr}
    2cf0:	b084      	sub	sp, #16
    2cf2:	af00      	add	r7, sp, #0
    2cf4:	60f8      	str	r0, [r7, #12]
    2cf6:	60b9      	str	r1, [r7, #8]
    2cf8:	607a      	str	r2, [r7, #4]
	return 0;
    2cfa:	2300      	movs	r3, #0
}
    2cfc:	0018      	movs	r0, r3
    2cfe:	46bd      	mov	sp, r7
    2d00:	b004      	add	sp, #16
    2d02:	bd80      	pop	{r7, pc}

00002d04 <system_interrupt_enable>:
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b082      	sub	sp, #8
    2d08:	af00      	add	r7, sp, #0
    2d0a:	0002      	movs	r2, r0
    2d0c:	1dfb      	adds	r3, r7, #7
    2d0e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d10:	4b06      	ldr	r3, [pc, #24]	; (2d2c <system_interrupt_enable+0x28>)
    2d12:	1dfa      	adds	r2, r7, #7
    2d14:	7812      	ldrb	r2, [r2, #0]
    2d16:	0011      	movs	r1, r2
    2d18:	221f      	movs	r2, #31
    2d1a:	400a      	ands	r2, r1
    2d1c:	2101      	movs	r1, #1
    2d1e:	4091      	lsls	r1, r2
    2d20:	000a      	movs	r2, r1
    2d22:	601a      	str	r2, [r3, #0]
}
    2d24:	46c0      	nop			; (mov r8, r8)
    2d26:	46bd      	mov	sp, r7
    2d28:	b002      	add	sp, #8
    2d2a:	bd80      	pop	{r7, pc}
    2d2c:	e000e100 	.word	0xe000e100

00002d30 <usart_is_syncing>:
{
    2d30:	b580      	push	{r7, lr}
    2d32:	b084      	sub	sp, #16
    2d34:	af00      	add	r7, sp, #0
    2d36:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    2d3e:	68fb      	ldr	r3, [r7, #12]
    2d40:	69db      	ldr	r3, [r3, #28]
    2d42:	1e5a      	subs	r2, r3, #1
    2d44:	4193      	sbcs	r3, r2
    2d46:	b2db      	uxtb	r3, r3
}
    2d48:	0018      	movs	r0, r3
    2d4a:	46bd      	mov	sp, r7
    2d4c:	b004      	add	sp, #16
    2d4e:	bd80      	pop	{r7, pc}

00002d50 <_usart_wait_for_sync>:
{
    2d50:	b580      	push	{r7, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	af00      	add	r7, sp, #0
    2d56:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2d58:	46c0      	nop			; (mov r8, r8)
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	0018      	movs	r0, r3
    2d5e:	4b04      	ldr	r3, [pc, #16]	; (2d70 <_usart_wait_for_sync+0x20>)
    2d60:	4798      	blx	r3
    2d62:	1e03      	subs	r3, r0, #0
    2d64:	d1f9      	bne.n	2d5a <_usart_wait_for_sync+0xa>
}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	46bd      	mov	sp, r7
    2d6a:	b002      	add	sp, #8
    2d6c:	bd80      	pop	{r7, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002d31 	.word	0x00002d31

00002d74 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b082      	sub	sp, #8
    2d78:	af00      	add	r7, sp, #0
    2d7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	2280      	movs	r2, #128	; 0x80
    2d80:	05d2      	lsls	r2, r2, #23
    2d82:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	2200      	movs	r2, #0
    2d88:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	22ff      	movs	r2, #255	; 0xff
    2d8e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	2200      	movs	r2, #0
    2d94:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	2200      	movs	r2, #0
    2d9a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	2296      	movs	r2, #150	; 0x96
    2da0:	0192      	lsls	r2, r2, #6
    2da2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	2224      	movs	r2, #36	; 0x24
    2da8:	2101      	movs	r1, #1
    2daa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2225      	movs	r2, #37	; 0x25
    2db0:	2101      	movs	r1, #1
    2db2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	2226      	movs	r2, #38	; 0x26
    2db8:	2100      	movs	r1, #0
    2dba:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	2227      	movs	r2, #39	; 0x27
    2dc0:	2100      	movs	r1, #0
    2dc2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	2200      	movs	r2, #0
    2dc8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	2288      	movs	r2, #136	; 0x88
    2dce:	0352      	lsls	r2, r2, #13
    2dd0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	222c      	movs	r2, #44	; 0x2c
    2dd6:	2100      	movs	r1, #0
    2dd8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	222d      	movs	r2, #45	; 0x2d
    2dde:	2100      	movs	r1, #0
    2de0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	2200      	movs	r2, #0
    2de6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	2200      	movs	r2, #0
    2dec:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	2200      	movs	r2, #0
    2df2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	2200      	movs	r2, #0
    2df8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	2200      	movs	r2, #0
    2dfe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	2200      	movs	r2, #0
    2e04:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	2200      	movs	r2, #0
    2e0a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2e0c:	687b      	ldr	r3, [r7, #4]
    2e0e:	2200      	movs	r2, #0
    2e10:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	2200      	movs	r2, #0
    2e16:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	2200      	movs	r2, #0
    2e1c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	2213      	movs	r2, #19
    2e22:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	2200      	movs	r2, #0
    2e28:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	46bd      	mov	sp, r7
    2e2e:	b002      	add	sp, #8
    2e30:	bd80      	pop	{r7, pc}
	...

00002e34 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2e34:	b580      	push	{r7, lr}
    2e36:	b084      	sub	sp, #16
    2e38:	af00      	add	r7, sp, #0
    2e3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	681b      	ldr	r3, [r3, #0]
    2e40:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	0018      	movs	r0, r3
    2e48:	4b09      	ldr	r3, [pc, #36]	; (2e70 <usart_enable+0x3c>)
    2e4a:	4798      	blx	r3
    2e4c:	0003      	movs	r3, r0
    2e4e:	0018      	movs	r0, r3
    2e50:	4b08      	ldr	r3, [pc, #32]	; (2e74 <usart_enable+0x40>)
    2e52:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	0018      	movs	r0, r3
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <usart_enable+0x44>)
    2e5a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2e5c:	68fb      	ldr	r3, [r7, #12]
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	2202      	movs	r2, #2
    2e62:	431a      	orrs	r2, r3
    2e64:	68fb      	ldr	r3, [r7, #12]
    2e66:	601a      	str	r2, [r3, #0]
}
    2e68:	46c0      	nop			; (mov r8, r8)
    2e6a:	46bd      	mov	sp, r7
    2e6c:	b004      	add	sp, #16
    2e6e:	bd80      	pop	{r7, pc}
    2e70:	00000f09 	.word	0x00000f09
    2e74:	00002d05 	.word	0x00002d05
    2e78:	00002d51 	.word	0x00002d51

00002e7c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b084      	sub	sp, #16
    2e80:	af00      	add	r7, sp, #0
    2e82:	60f8      	str	r0, [r7, #12]
    2e84:	60b9      	str	r1, [r7, #8]
    2e86:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2e88:	687a      	ldr	r2, [r7, #4]
    2e8a:	68b9      	ldr	r1, [r7, #8]
    2e8c:	68fb      	ldr	r3, [r7, #12]
    2e8e:	0018      	movs	r0, r3
    2e90:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <usart_serial_init+0x2c>)
    2e92:	4798      	blx	r3
    2e94:	1e03      	subs	r3, r0, #0
    2e96:	d101      	bne.n	2e9c <usart_serial_init+0x20>
		return true;
    2e98:	2301      	movs	r3, #1
    2e9a:	e000      	b.n	2e9e <usart_serial_init+0x22>
	}
	else {
		return false;
    2e9c:	2300      	movs	r3, #0
	}
}
    2e9e:	0018      	movs	r0, r3
    2ea0:	46bd      	mov	sp, r7
    2ea2:	b004      	add	sp, #16
    2ea4:	bd80      	pop	{r7, pc}
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	000013b9 	.word	0x000013b9

00002eac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2eac:	b580      	push	{r7, lr}
    2eae:	b082      	sub	sp, #8
    2eb0:	af00      	add	r7, sp, #0
    2eb2:	6078      	str	r0, [r7, #4]
    2eb4:	000a      	movs	r2, r1
    2eb6:	1cfb      	adds	r3, r7, #3
    2eb8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	1cfb      	adds	r3, r7, #3
    2ebe:	781b      	ldrb	r3, [r3, #0]
    2ec0:	b29a      	uxth	r2, r3
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	0011      	movs	r1, r2
    2ec6:	0018      	movs	r0, r3
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <usart_serial_putchar+0x30>)
    2eca:	4798      	blx	r3
    2ecc:	1e03      	subs	r3, r0, #0
    2ece:	d1f5      	bne.n	2ebc <usart_serial_putchar+0x10>

	return STATUS_OK;
    2ed0:	2300      	movs	r3, #0
}
    2ed2:	0018      	movs	r0, r3
    2ed4:	46bd      	mov	sp, r7
    2ed6:	b002      	add	sp, #8
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	0000162d 	.word	0x0000162d

00002ee0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b084      	sub	sp, #16
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
    2ee8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    2eea:	230e      	movs	r3, #14
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	2200      	movs	r2, #0
    2ef0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	230e      	movs	r3, #14
    2ef6:	18fa      	adds	r2, r7, r3
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	0011      	movs	r1, r2
    2efc:	0018      	movs	r0, r3
    2efe:	4b07      	ldr	r3, [pc, #28]	; (2f1c <usart_serial_getchar+0x3c>)
    2f00:	4798      	blx	r3
    2f02:	1e03      	subs	r3, r0, #0
    2f04:	d1f6      	bne.n	2ef4 <usart_serial_getchar+0x14>

	*c = temp;
    2f06:	230e      	movs	r3, #14
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	b2da      	uxtb	r2, r3
    2f0e:	683b      	ldr	r3, [r7, #0]
    2f10:	701a      	strb	r2, [r3, #0]
}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	46bd      	mov	sp, r7
    2f16:	b004      	add	sp, #16
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	00001691 	.word	0x00001691

00002f20 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b084      	sub	sp, #16
    2f24:	af00      	add	r7, sp, #0
    2f26:	60f8      	str	r0, [r7, #12]
    2f28:	60b9      	str	r1, [r7, #8]
    2f2a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2f2c:	4b10      	ldr	r3, [pc, #64]	; (2f70 <stdio_serial_init+0x50>)
    2f2e:	68fa      	ldr	r2, [r7, #12]
    2f30:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2f32:	4b10      	ldr	r3, [pc, #64]	; (2f74 <stdio_serial_init+0x54>)
    2f34:	4a10      	ldr	r2, [pc, #64]	; (2f78 <stdio_serial_init+0x58>)
    2f36:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2f38:	4b10      	ldr	r3, [pc, #64]	; (2f7c <stdio_serial_init+0x5c>)
    2f3a:	4a11      	ldr	r2, [pc, #68]	; (2f80 <stdio_serial_init+0x60>)
    2f3c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    2f3e:	687a      	ldr	r2, [r7, #4]
    2f40:	68b9      	ldr	r1, [r7, #8]
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	0018      	movs	r0, r3
    2f46:	4b0f      	ldr	r3, [pc, #60]	; (2f84 <stdio_serial_init+0x64>)
    2f48:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2f4a:	4b0f      	ldr	r3, [pc, #60]	; (2f88 <stdio_serial_init+0x68>)
    2f4c:	681b      	ldr	r3, [r3, #0]
    2f4e:	689b      	ldr	r3, [r3, #8]
    2f50:	2100      	movs	r1, #0
    2f52:	0018      	movs	r0, r3
    2f54:	4b0d      	ldr	r3, [pc, #52]	; (2f8c <stdio_serial_init+0x6c>)
    2f56:	4798      	blx	r3
	setbuf(stdin, NULL);
    2f58:	4b0b      	ldr	r3, [pc, #44]	; (2f88 <stdio_serial_init+0x68>)
    2f5a:	681b      	ldr	r3, [r3, #0]
    2f5c:	685b      	ldr	r3, [r3, #4]
    2f5e:	2100      	movs	r1, #0
    2f60:	0018      	movs	r0, r3
    2f62:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <stdio_serial_init+0x6c>)
    2f64:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	46bd      	mov	sp, r7
    2f6a:	b004      	add	sp, #16
    2f6c:	bd80      	pop	{r7, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	20000168 	.word	0x20000168
    2f74:	20000164 	.word	0x20000164
    2f78:	00002ead 	.word	0x00002ead
    2f7c:	20000160 	.word	0x20000160
    2f80:	00002ee1 	.word	0x00002ee1
    2f84:	00002e7d 	.word	0x00002e7d
    2f88:	20000004 	.word	0x20000004
    2f8c:	00003325 	.word	0x00003325

00002f90 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    2f90:	b580      	push	{r7, lr}
    2f92:	b090      	sub	sp, #64	; 0x40
    2f94:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    2f96:	003b      	movs	r3, r7
    2f98:	0018      	movs	r0, r3
    2f9a:	4b13      	ldr	r3, [pc, #76]	; (2fe8 <configure_console+0x58>)
    2f9c:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2f9e:	003b      	movs	r3, r7
    2fa0:	22c4      	movs	r2, #196	; 0xc4
    2fa2:	0392      	lsls	r2, r2, #14
    2fa4:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2fa6:	003b      	movs	r3, r7
    2fa8:	2201      	movs	r2, #1
    2faa:	4252      	negs	r2, r2
    2fac:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2fae:	003b      	movs	r3, r7
    2fb0:	2201      	movs	r2, #1
    2fb2:	4252      	negs	r2, r2
    2fb4:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2fb6:	003b      	movs	r3, r7
    2fb8:	4a0c      	ldr	r2, [pc, #48]	; (2fec <configure_console+0x5c>)
    2fba:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2fbc:	003b      	movs	r3, r7
    2fbe:	4a0c      	ldr	r2, [pc, #48]	; (2ff0 <configure_console+0x60>)
    2fc0:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2fc2:	003b      	movs	r3, r7
    2fc4:	22e1      	movs	r2, #225	; 0xe1
    2fc6:	0252      	lsls	r2, r2, #9
    2fc8:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    2fca:	003a      	movs	r2, r7
    2fcc:	4909      	ldr	r1, [pc, #36]	; (2ff4 <configure_console+0x64>)
    2fce:	4b0a      	ldr	r3, [pc, #40]	; (2ff8 <configure_console+0x68>)
    2fd0:	0018      	movs	r0, r3
    2fd2:	4b0a      	ldr	r3, [pc, #40]	; (2ffc <configure_console+0x6c>)
    2fd4:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    2fd6:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <configure_console+0x68>)
    2fd8:	0018      	movs	r0, r3
    2fda:	4b09      	ldr	r3, [pc, #36]	; (3000 <configure_console+0x70>)
    2fdc:	4798      	blx	r3
}
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	46bd      	mov	sp, r7
    2fe2:	b010      	add	sp, #64	; 0x40
    2fe4:	bd80      	pop	{r7, pc}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	00002d75 	.word	0x00002d75
    2fec:	002a0003 	.word	0x002a0003
    2ff0:	002b0003 	.word	0x002b0003
    2ff4:	42001800 	.word	0x42001800
    2ff8:	200000c4 	.word	0x200000c4
    2ffc:	00002f21 	.word	0x00002f21
    3000:	00002e35 	.word	0x00002e35

00003004 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    3004:	b580      	push	{r7, lr}
    3006:	b0c8      	sub	sp, #288	; 0x120
    3008:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    300a:	4b0d      	ldr	r3, [pc, #52]	; (3040 <main+0x3c>)
    300c:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    300e:	4b0d      	ldr	r3, [pc, #52]	; (3044 <main+0x40>)
    3010:	4798      	blx	r3
	printf(STRING_HEADER);
    3012:	4b0d      	ldr	r3, [pc, #52]	; (3048 <main+0x44>)
    3014:	0018      	movs	r0, r3
    3016:	4b0d      	ldr	r3, [pc, #52]	; (304c <main+0x48>)
    3018:	4798      	blx	r3
	
	printf("Hello world! You updated!!!");
    301a:	4b0d      	ldr	r3, [pc, #52]	; (3050 <main+0x4c>)
    301c:	0018      	movs	r0, r3
    301e:	4b0d      	ldr	r3, [pc, #52]	; (3054 <main+0x50>)
    3020:	4798      	blx	r3
	int i = 0;
    3022:	2300      	movs	r3, #0
    3024:	228e      	movs	r2, #142	; 0x8e
    3026:	0052      	lsls	r2, r2, #1
    3028:	18ba      	adds	r2, r7, r2
    302a:	6013      	str	r3, [r2, #0]
	while(1){
		i++;
    302c:	238e      	movs	r3, #142	; 0x8e
    302e:	005b      	lsls	r3, r3, #1
    3030:	18fb      	adds	r3, r7, r3
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	3301      	adds	r3, #1
    3036:	228e      	movs	r2, #142	; 0x8e
    3038:	0052      	lsls	r2, r2, #1
    303a:	18ba      	adds	r2, r7, r2
    303c:	6013      	str	r3, [r2, #0]
    303e:	e7f5      	b.n	302c <main+0x28>
    3040:	00002a7d 	.word	0x00002a7d
    3044:	00002f91 	.word	0x00002f91
    3048:	00004360 	.word	0x00004360
    304c:	00003311 	.word	0x00003311
    3050:	000043cc 	.word	0x000043cc
    3054:	0000321d 	.word	0x0000321d

00003058 <__udivsi3>:
    3058:	2200      	movs	r2, #0
    305a:	0843      	lsrs	r3, r0, #1
    305c:	428b      	cmp	r3, r1
    305e:	d374      	bcc.n	314a <__udivsi3+0xf2>
    3060:	0903      	lsrs	r3, r0, #4
    3062:	428b      	cmp	r3, r1
    3064:	d35f      	bcc.n	3126 <__udivsi3+0xce>
    3066:	0a03      	lsrs	r3, r0, #8
    3068:	428b      	cmp	r3, r1
    306a:	d344      	bcc.n	30f6 <__udivsi3+0x9e>
    306c:	0b03      	lsrs	r3, r0, #12
    306e:	428b      	cmp	r3, r1
    3070:	d328      	bcc.n	30c4 <__udivsi3+0x6c>
    3072:	0c03      	lsrs	r3, r0, #16
    3074:	428b      	cmp	r3, r1
    3076:	d30d      	bcc.n	3094 <__udivsi3+0x3c>
    3078:	22ff      	movs	r2, #255	; 0xff
    307a:	0209      	lsls	r1, r1, #8
    307c:	ba12      	rev	r2, r2
    307e:	0c03      	lsrs	r3, r0, #16
    3080:	428b      	cmp	r3, r1
    3082:	d302      	bcc.n	308a <__udivsi3+0x32>
    3084:	1212      	asrs	r2, r2, #8
    3086:	0209      	lsls	r1, r1, #8
    3088:	d065      	beq.n	3156 <__udivsi3+0xfe>
    308a:	0b03      	lsrs	r3, r0, #12
    308c:	428b      	cmp	r3, r1
    308e:	d319      	bcc.n	30c4 <__udivsi3+0x6c>
    3090:	e000      	b.n	3094 <__udivsi3+0x3c>
    3092:	0a09      	lsrs	r1, r1, #8
    3094:	0bc3      	lsrs	r3, r0, #15
    3096:	428b      	cmp	r3, r1
    3098:	d301      	bcc.n	309e <__udivsi3+0x46>
    309a:	03cb      	lsls	r3, r1, #15
    309c:	1ac0      	subs	r0, r0, r3
    309e:	4152      	adcs	r2, r2
    30a0:	0b83      	lsrs	r3, r0, #14
    30a2:	428b      	cmp	r3, r1
    30a4:	d301      	bcc.n	30aa <__udivsi3+0x52>
    30a6:	038b      	lsls	r3, r1, #14
    30a8:	1ac0      	subs	r0, r0, r3
    30aa:	4152      	adcs	r2, r2
    30ac:	0b43      	lsrs	r3, r0, #13
    30ae:	428b      	cmp	r3, r1
    30b0:	d301      	bcc.n	30b6 <__udivsi3+0x5e>
    30b2:	034b      	lsls	r3, r1, #13
    30b4:	1ac0      	subs	r0, r0, r3
    30b6:	4152      	adcs	r2, r2
    30b8:	0b03      	lsrs	r3, r0, #12
    30ba:	428b      	cmp	r3, r1
    30bc:	d301      	bcc.n	30c2 <__udivsi3+0x6a>
    30be:	030b      	lsls	r3, r1, #12
    30c0:	1ac0      	subs	r0, r0, r3
    30c2:	4152      	adcs	r2, r2
    30c4:	0ac3      	lsrs	r3, r0, #11
    30c6:	428b      	cmp	r3, r1
    30c8:	d301      	bcc.n	30ce <__udivsi3+0x76>
    30ca:	02cb      	lsls	r3, r1, #11
    30cc:	1ac0      	subs	r0, r0, r3
    30ce:	4152      	adcs	r2, r2
    30d0:	0a83      	lsrs	r3, r0, #10
    30d2:	428b      	cmp	r3, r1
    30d4:	d301      	bcc.n	30da <__udivsi3+0x82>
    30d6:	028b      	lsls	r3, r1, #10
    30d8:	1ac0      	subs	r0, r0, r3
    30da:	4152      	adcs	r2, r2
    30dc:	0a43      	lsrs	r3, r0, #9
    30de:	428b      	cmp	r3, r1
    30e0:	d301      	bcc.n	30e6 <__udivsi3+0x8e>
    30e2:	024b      	lsls	r3, r1, #9
    30e4:	1ac0      	subs	r0, r0, r3
    30e6:	4152      	adcs	r2, r2
    30e8:	0a03      	lsrs	r3, r0, #8
    30ea:	428b      	cmp	r3, r1
    30ec:	d301      	bcc.n	30f2 <__udivsi3+0x9a>
    30ee:	020b      	lsls	r3, r1, #8
    30f0:	1ac0      	subs	r0, r0, r3
    30f2:	4152      	adcs	r2, r2
    30f4:	d2cd      	bcs.n	3092 <__udivsi3+0x3a>
    30f6:	09c3      	lsrs	r3, r0, #7
    30f8:	428b      	cmp	r3, r1
    30fa:	d301      	bcc.n	3100 <__udivsi3+0xa8>
    30fc:	01cb      	lsls	r3, r1, #7
    30fe:	1ac0      	subs	r0, r0, r3
    3100:	4152      	adcs	r2, r2
    3102:	0983      	lsrs	r3, r0, #6
    3104:	428b      	cmp	r3, r1
    3106:	d301      	bcc.n	310c <__udivsi3+0xb4>
    3108:	018b      	lsls	r3, r1, #6
    310a:	1ac0      	subs	r0, r0, r3
    310c:	4152      	adcs	r2, r2
    310e:	0943      	lsrs	r3, r0, #5
    3110:	428b      	cmp	r3, r1
    3112:	d301      	bcc.n	3118 <__udivsi3+0xc0>
    3114:	014b      	lsls	r3, r1, #5
    3116:	1ac0      	subs	r0, r0, r3
    3118:	4152      	adcs	r2, r2
    311a:	0903      	lsrs	r3, r0, #4
    311c:	428b      	cmp	r3, r1
    311e:	d301      	bcc.n	3124 <__udivsi3+0xcc>
    3120:	010b      	lsls	r3, r1, #4
    3122:	1ac0      	subs	r0, r0, r3
    3124:	4152      	adcs	r2, r2
    3126:	08c3      	lsrs	r3, r0, #3
    3128:	428b      	cmp	r3, r1
    312a:	d301      	bcc.n	3130 <__udivsi3+0xd8>
    312c:	00cb      	lsls	r3, r1, #3
    312e:	1ac0      	subs	r0, r0, r3
    3130:	4152      	adcs	r2, r2
    3132:	0883      	lsrs	r3, r0, #2
    3134:	428b      	cmp	r3, r1
    3136:	d301      	bcc.n	313c <__udivsi3+0xe4>
    3138:	008b      	lsls	r3, r1, #2
    313a:	1ac0      	subs	r0, r0, r3
    313c:	4152      	adcs	r2, r2
    313e:	0843      	lsrs	r3, r0, #1
    3140:	428b      	cmp	r3, r1
    3142:	d301      	bcc.n	3148 <__udivsi3+0xf0>
    3144:	004b      	lsls	r3, r1, #1
    3146:	1ac0      	subs	r0, r0, r3
    3148:	4152      	adcs	r2, r2
    314a:	1a41      	subs	r1, r0, r1
    314c:	d200      	bcs.n	3150 <__udivsi3+0xf8>
    314e:	4601      	mov	r1, r0
    3150:	4152      	adcs	r2, r2
    3152:	4610      	mov	r0, r2
    3154:	4770      	bx	lr
    3156:	e7ff      	b.n	3158 <__udivsi3+0x100>
    3158:	b501      	push	{r0, lr}
    315a:	2000      	movs	r0, #0
    315c:	f000 f806 	bl	316c <__aeabi_idiv0>
    3160:	bd02      	pop	{r1, pc}
    3162:	46c0      	nop			; (mov r8, r8)

00003164 <__aeabi_uidivmod>:
    3164:	2900      	cmp	r1, #0
    3166:	d0f7      	beq.n	3158 <__udivsi3+0x100>
    3168:	e776      	b.n	3058 <__udivsi3>
    316a:	4770      	bx	lr

0000316c <__aeabi_idiv0>:
    316c:	4770      	bx	lr
    316e:	46c0      	nop			; (mov r8, r8)

00003170 <__aeabi_lmul>:
    3170:	b5f0      	push	{r4, r5, r6, r7, lr}
    3172:	46ce      	mov	lr, r9
    3174:	4647      	mov	r7, r8
    3176:	0415      	lsls	r5, r2, #16
    3178:	0c2d      	lsrs	r5, r5, #16
    317a:	002e      	movs	r6, r5
    317c:	b580      	push	{r7, lr}
    317e:	0407      	lsls	r7, r0, #16
    3180:	0c14      	lsrs	r4, r2, #16
    3182:	0c3f      	lsrs	r7, r7, #16
    3184:	4699      	mov	r9, r3
    3186:	0c03      	lsrs	r3, r0, #16
    3188:	437e      	muls	r6, r7
    318a:	435d      	muls	r5, r3
    318c:	4367      	muls	r7, r4
    318e:	4363      	muls	r3, r4
    3190:	197f      	adds	r7, r7, r5
    3192:	0c34      	lsrs	r4, r6, #16
    3194:	19e4      	adds	r4, r4, r7
    3196:	469c      	mov	ip, r3
    3198:	42a5      	cmp	r5, r4
    319a:	d903      	bls.n	31a4 <__aeabi_lmul+0x34>
    319c:	2380      	movs	r3, #128	; 0x80
    319e:	025b      	lsls	r3, r3, #9
    31a0:	4698      	mov	r8, r3
    31a2:	44c4      	add	ip, r8
    31a4:	464b      	mov	r3, r9
    31a6:	4351      	muls	r1, r2
    31a8:	4343      	muls	r3, r0
    31aa:	0436      	lsls	r6, r6, #16
    31ac:	0c36      	lsrs	r6, r6, #16
    31ae:	0c25      	lsrs	r5, r4, #16
    31b0:	0424      	lsls	r4, r4, #16
    31b2:	4465      	add	r5, ip
    31b4:	19a4      	adds	r4, r4, r6
    31b6:	1859      	adds	r1, r3, r1
    31b8:	1949      	adds	r1, r1, r5
    31ba:	0020      	movs	r0, r4
    31bc:	bc0c      	pop	{r2, r3}
    31be:	4690      	mov	r8, r2
    31c0:	4699      	mov	r9, r3
    31c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000031c4 <__libc_init_array>:
    31c4:	b570      	push	{r4, r5, r6, lr}
    31c6:	2600      	movs	r6, #0
    31c8:	4d0c      	ldr	r5, [pc, #48]	; (31fc <__libc_init_array+0x38>)
    31ca:	4c0d      	ldr	r4, [pc, #52]	; (3200 <__libc_init_array+0x3c>)
    31cc:	1b64      	subs	r4, r4, r5
    31ce:	10a4      	asrs	r4, r4, #2
    31d0:	42a6      	cmp	r6, r4
    31d2:	d109      	bne.n	31e8 <__libc_init_array+0x24>
    31d4:	2600      	movs	r6, #0
    31d6:	f001 f953 	bl	4480 <_init>
    31da:	4d0a      	ldr	r5, [pc, #40]	; (3204 <__libc_init_array+0x40>)
    31dc:	4c0a      	ldr	r4, [pc, #40]	; (3208 <__libc_init_array+0x44>)
    31de:	1b64      	subs	r4, r4, r5
    31e0:	10a4      	asrs	r4, r4, #2
    31e2:	42a6      	cmp	r6, r4
    31e4:	d105      	bne.n	31f2 <__libc_init_array+0x2e>
    31e6:	bd70      	pop	{r4, r5, r6, pc}
    31e8:	00b3      	lsls	r3, r6, #2
    31ea:	58eb      	ldr	r3, [r5, r3]
    31ec:	4798      	blx	r3
    31ee:	3601      	adds	r6, #1
    31f0:	e7ee      	b.n	31d0 <__libc_init_array+0xc>
    31f2:	00b3      	lsls	r3, r6, #2
    31f4:	58eb      	ldr	r3, [r5, r3]
    31f6:	4798      	blx	r3
    31f8:	3601      	adds	r6, #1
    31fa:	e7f2      	b.n	31e2 <__libc_init_array+0x1e>
    31fc:	0000448c 	.word	0x0000448c
    3200:	0000448c 	.word	0x0000448c
    3204:	0000448c 	.word	0x0000448c
    3208:	00004490 	.word	0x00004490

0000320c <memset>:
    320c:	0003      	movs	r3, r0
    320e:	1882      	adds	r2, r0, r2
    3210:	4293      	cmp	r3, r2
    3212:	d100      	bne.n	3216 <memset+0xa>
    3214:	4770      	bx	lr
    3216:	7019      	strb	r1, [r3, #0]
    3218:	3301      	adds	r3, #1
    321a:	e7f9      	b.n	3210 <memset+0x4>

0000321c <iprintf>:
    321c:	b40f      	push	{r0, r1, r2, r3}
    321e:	4b0b      	ldr	r3, [pc, #44]	; (324c <iprintf+0x30>)
    3220:	b513      	push	{r0, r1, r4, lr}
    3222:	681c      	ldr	r4, [r3, #0]
    3224:	2c00      	cmp	r4, #0
    3226:	d005      	beq.n	3234 <iprintf+0x18>
    3228:	69a3      	ldr	r3, [r4, #24]
    322a:	2b00      	cmp	r3, #0
    322c:	d102      	bne.n	3234 <iprintf+0x18>
    322e:	0020      	movs	r0, r4
    3230:	f000 faf2 	bl	3818 <__sinit>
    3234:	ab05      	add	r3, sp, #20
    3236:	9a04      	ldr	r2, [sp, #16]
    3238:	68a1      	ldr	r1, [r4, #8]
    323a:	0020      	movs	r0, r4
    323c:	9301      	str	r3, [sp, #4]
    323e:	f000 fcc7 	bl	3bd0 <_vfiprintf_r>
    3242:	bc16      	pop	{r1, r2, r4}
    3244:	bc08      	pop	{r3}
    3246:	b004      	add	sp, #16
    3248:	4718      	bx	r3
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	20000004 	.word	0x20000004

00003250 <_puts_r>:
    3250:	b570      	push	{r4, r5, r6, lr}
    3252:	0005      	movs	r5, r0
    3254:	000e      	movs	r6, r1
    3256:	2800      	cmp	r0, #0
    3258:	d004      	beq.n	3264 <_puts_r+0x14>
    325a:	6983      	ldr	r3, [r0, #24]
    325c:	2b00      	cmp	r3, #0
    325e:	d101      	bne.n	3264 <_puts_r+0x14>
    3260:	f000 fada 	bl	3818 <__sinit>
    3264:	69ab      	ldr	r3, [r5, #24]
    3266:	68ac      	ldr	r4, [r5, #8]
    3268:	2b00      	cmp	r3, #0
    326a:	d102      	bne.n	3272 <_puts_r+0x22>
    326c:	0028      	movs	r0, r5
    326e:	f000 fad3 	bl	3818 <__sinit>
    3272:	4b24      	ldr	r3, [pc, #144]	; (3304 <_puts_r+0xb4>)
    3274:	429c      	cmp	r4, r3
    3276:	d10f      	bne.n	3298 <_puts_r+0x48>
    3278:	686c      	ldr	r4, [r5, #4]
    327a:	89a3      	ldrh	r3, [r4, #12]
    327c:	071b      	lsls	r3, r3, #28
    327e:	d502      	bpl.n	3286 <_puts_r+0x36>
    3280:	6923      	ldr	r3, [r4, #16]
    3282:	2b00      	cmp	r3, #0
    3284:	d120      	bne.n	32c8 <_puts_r+0x78>
    3286:	0021      	movs	r1, r4
    3288:	0028      	movs	r0, r5
    328a:	f000 f957 	bl	353c <__swsetup_r>
    328e:	2800      	cmp	r0, #0
    3290:	d01a      	beq.n	32c8 <_puts_r+0x78>
    3292:	2001      	movs	r0, #1
    3294:	4240      	negs	r0, r0
    3296:	bd70      	pop	{r4, r5, r6, pc}
    3298:	4b1b      	ldr	r3, [pc, #108]	; (3308 <_puts_r+0xb8>)
    329a:	429c      	cmp	r4, r3
    329c:	d101      	bne.n	32a2 <_puts_r+0x52>
    329e:	68ac      	ldr	r4, [r5, #8]
    32a0:	e7eb      	b.n	327a <_puts_r+0x2a>
    32a2:	4b1a      	ldr	r3, [pc, #104]	; (330c <_puts_r+0xbc>)
    32a4:	429c      	cmp	r4, r3
    32a6:	d1e8      	bne.n	327a <_puts_r+0x2a>
    32a8:	68ec      	ldr	r4, [r5, #12]
    32aa:	e7e6      	b.n	327a <_puts_r+0x2a>
    32ac:	3b01      	subs	r3, #1
    32ae:	3601      	adds	r6, #1
    32b0:	60a3      	str	r3, [r4, #8]
    32b2:	2b00      	cmp	r3, #0
    32b4:	da04      	bge.n	32c0 <_puts_r+0x70>
    32b6:	69a2      	ldr	r2, [r4, #24]
    32b8:	4293      	cmp	r3, r2
    32ba:	db16      	blt.n	32ea <_puts_r+0x9a>
    32bc:	290a      	cmp	r1, #10
    32be:	d014      	beq.n	32ea <_puts_r+0x9a>
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	1c5a      	adds	r2, r3, #1
    32c4:	6022      	str	r2, [r4, #0]
    32c6:	7019      	strb	r1, [r3, #0]
    32c8:	7831      	ldrb	r1, [r6, #0]
    32ca:	68a3      	ldr	r3, [r4, #8]
    32cc:	2900      	cmp	r1, #0
    32ce:	d1ed      	bne.n	32ac <_puts_r+0x5c>
    32d0:	3b01      	subs	r3, #1
    32d2:	60a3      	str	r3, [r4, #8]
    32d4:	2b00      	cmp	r3, #0
    32d6:	da0f      	bge.n	32f8 <_puts_r+0xa8>
    32d8:	0022      	movs	r2, r4
    32da:	310a      	adds	r1, #10
    32dc:	0028      	movs	r0, r5
    32de:	f000 f8d7 	bl	3490 <__swbuf_r>
    32e2:	1c43      	adds	r3, r0, #1
    32e4:	d0d5      	beq.n	3292 <_puts_r+0x42>
    32e6:	200a      	movs	r0, #10
    32e8:	e7d5      	b.n	3296 <_puts_r+0x46>
    32ea:	0022      	movs	r2, r4
    32ec:	0028      	movs	r0, r5
    32ee:	f000 f8cf 	bl	3490 <__swbuf_r>
    32f2:	1c43      	adds	r3, r0, #1
    32f4:	d1e8      	bne.n	32c8 <_puts_r+0x78>
    32f6:	e7cc      	b.n	3292 <_puts_r+0x42>
    32f8:	200a      	movs	r0, #10
    32fa:	6823      	ldr	r3, [r4, #0]
    32fc:	1c5a      	adds	r2, r3, #1
    32fe:	6022      	str	r2, [r4, #0]
    3300:	7018      	strb	r0, [r3, #0]
    3302:	e7c8      	b.n	3296 <_puts_r+0x46>
    3304:	0000440c 	.word	0x0000440c
    3308:	0000442c 	.word	0x0000442c
    330c:	000043ec 	.word	0x000043ec

00003310 <puts>:
    3310:	b510      	push	{r4, lr}
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <puts+0x10>)
    3314:	0001      	movs	r1, r0
    3316:	6818      	ldr	r0, [r3, #0]
    3318:	f7ff ff9a 	bl	3250 <_puts_r>
    331c:	bd10      	pop	{r4, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	20000004 	.word	0x20000004

00003324 <setbuf>:
    3324:	424a      	negs	r2, r1
    3326:	414a      	adcs	r2, r1
    3328:	2380      	movs	r3, #128	; 0x80
    332a:	b510      	push	{r4, lr}
    332c:	0052      	lsls	r2, r2, #1
    332e:	00db      	lsls	r3, r3, #3
    3330:	f000 f802 	bl	3338 <setvbuf>
    3334:	bd10      	pop	{r4, pc}
	...

00003338 <setvbuf>:
    3338:	b5f0      	push	{r4, r5, r6, r7, lr}
    333a:	001d      	movs	r5, r3
    333c:	4b4f      	ldr	r3, [pc, #316]	; (347c <setvbuf+0x144>)
    333e:	b085      	sub	sp, #20
    3340:	681e      	ldr	r6, [r3, #0]
    3342:	0004      	movs	r4, r0
    3344:	000f      	movs	r7, r1
    3346:	9200      	str	r2, [sp, #0]
    3348:	2e00      	cmp	r6, #0
    334a:	d005      	beq.n	3358 <setvbuf+0x20>
    334c:	69b3      	ldr	r3, [r6, #24]
    334e:	2b00      	cmp	r3, #0
    3350:	d102      	bne.n	3358 <setvbuf+0x20>
    3352:	0030      	movs	r0, r6
    3354:	f000 fa60 	bl	3818 <__sinit>
    3358:	4b49      	ldr	r3, [pc, #292]	; (3480 <setvbuf+0x148>)
    335a:	429c      	cmp	r4, r3
    335c:	d150      	bne.n	3400 <setvbuf+0xc8>
    335e:	6874      	ldr	r4, [r6, #4]
    3360:	9b00      	ldr	r3, [sp, #0]
    3362:	2b02      	cmp	r3, #2
    3364:	d005      	beq.n	3372 <setvbuf+0x3a>
    3366:	2b01      	cmp	r3, #1
    3368:	d900      	bls.n	336c <setvbuf+0x34>
    336a:	e084      	b.n	3476 <setvbuf+0x13e>
    336c:	2d00      	cmp	r5, #0
    336e:	da00      	bge.n	3372 <setvbuf+0x3a>
    3370:	e081      	b.n	3476 <setvbuf+0x13e>
    3372:	0021      	movs	r1, r4
    3374:	0030      	movs	r0, r6
    3376:	f000 f9e1 	bl	373c <_fflush_r>
    337a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    337c:	2900      	cmp	r1, #0
    337e:	d008      	beq.n	3392 <setvbuf+0x5a>
    3380:	0023      	movs	r3, r4
    3382:	3344      	adds	r3, #68	; 0x44
    3384:	4299      	cmp	r1, r3
    3386:	d002      	beq.n	338e <setvbuf+0x56>
    3388:	0030      	movs	r0, r6
    338a:	f000 fb51 	bl	3a30 <_free_r>
    338e:	2300      	movs	r3, #0
    3390:	6363      	str	r3, [r4, #52]	; 0x34
    3392:	2300      	movs	r3, #0
    3394:	61a3      	str	r3, [r4, #24]
    3396:	6063      	str	r3, [r4, #4]
    3398:	89a3      	ldrh	r3, [r4, #12]
    339a:	061b      	lsls	r3, r3, #24
    339c:	d503      	bpl.n	33a6 <setvbuf+0x6e>
    339e:	6921      	ldr	r1, [r4, #16]
    33a0:	0030      	movs	r0, r6
    33a2:	f000 fb45 	bl	3a30 <_free_r>
    33a6:	89a3      	ldrh	r3, [r4, #12]
    33a8:	4a36      	ldr	r2, [pc, #216]	; (3484 <setvbuf+0x14c>)
    33aa:	4013      	ands	r3, r2
    33ac:	81a3      	strh	r3, [r4, #12]
    33ae:	9b00      	ldr	r3, [sp, #0]
    33b0:	2b02      	cmp	r3, #2
    33b2:	d05a      	beq.n	346a <setvbuf+0x132>
    33b4:	ab03      	add	r3, sp, #12
    33b6:	aa02      	add	r2, sp, #8
    33b8:	0021      	movs	r1, r4
    33ba:	0030      	movs	r0, r6
    33bc:	f000 fac2 	bl	3944 <__swhatbuf_r>
    33c0:	89a3      	ldrh	r3, [r4, #12]
    33c2:	4318      	orrs	r0, r3
    33c4:	81a0      	strh	r0, [r4, #12]
    33c6:	2d00      	cmp	r5, #0
    33c8:	d124      	bne.n	3414 <setvbuf+0xdc>
    33ca:	9d02      	ldr	r5, [sp, #8]
    33cc:	0028      	movs	r0, r5
    33ce:	f000 fb25 	bl	3a1c <malloc>
    33d2:	9501      	str	r5, [sp, #4]
    33d4:	1e07      	subs	r7, r0, #0
    33d6:	d142      	bne.n	345e <setvbuf+0x126>
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	9301      	str	r3, [sp, #4]
    33dc:	42ab      	cmp	r3, r5
    33de:	d139      	bne.n	3454 <setvbuf+0x11c>
    33e0:	2001      	movs	r0, #1
    33e2:	4240      	negs	r0, r0
    33e4:	2302      	movs	r3, #2
    33e6:	89a2      	ldrh	r2, [r4, #12]
    33e8:	4313      	orrs	r3, r2
    33ea:	81a3      	strh	r3, [r4, #12]
    33ec:	2300      	movs	r3, #0
    33ee:	60a3      	str	r3, [r4, #8]
    33f0:	0023      	movs	r3, r4
    33f2:	3347      	adds	r3, #71	; 0x47
    33f4:	6023      	str	r3, [r4, #0]
    33f6:	6123      	str	r3, [r4, #16]
    33f8:	2301      	movs	r3, #1
    33fa:	6163      	str	r3, [r4, #20]
    33fc:	b005      	add	sp, #20
    33fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3400:	4b21      	ldr	r3, [pc, #132]	; (3488 <setvbuf+0x150>)
    3402:	429c      	cmp	r4, r3
    3404:	d101      	bne.n	340a <setvbuf+0xd2>
    3406:	68b4      	ldr	r4, [r6, #8]
    3408:	e7aa      	b.n	3360 <setvbuf+0x28>
    340a:	4b20      	ldr	r3, [pc, #128]	; (348c <setvbuf+0x154>)
    340c:	429c      	cmp	r4, r3
    340e:	d1a7      	bne.n	3360 <setvbuf+0x28>
    3410:	68f4      	ldr	r4, [r6, #12]
    3412:	e7a5      	b.n	3360 <setvbuf+0x28>
    3414:	2f00      	cmp	r7, #0
    3416:	d0d9      	beq.n	33cc <setvbuf+0x94>
    3418:	69b3      	ldr	r3, [r6, #24]
    341a:	2b00      	cmp	r3, #0
    341c:	d102      	bne.n	3424 <setvbuf+0xec>
    341e:	0030      	movs	r0, r6
    3420:	f000 f9fa 	bl	3818 <__sinit>
    3424:	9b00      	ldr	r3, [sp, #0]
    3426:	2b01      	cmp	r3, #1
    3428:	d103      	bne.n	3432 <setvbuf+0xfa>
    342a:	89a3      	ldrh	r3, [r4, #12]
    342c:	9a00      	ldr	r2, [sp, #0]
    342e:	431a      	orrs	r2, r3
    3430:	81a2      	strh	r2, [r4, #12]
    3432:	2008      	movs	r0, #8
    3434:	89a3      	ldrh	r3, [r4, #12]
    3436:	6027      	str	r7, [r4, #0]
    3438:	6127      	str	r7, [r4, #16]
    343a:	6165      	str	r5, [r4, #20]
    343c:	4018      	ands	r0, r3
    343e:	d018      	beq.n	3472 <setvbuf+0x13a>
    3440:	2001      	movs	r0, #1
    3442:	4018      	ands	r0, r3
    3444:	2300      	movs	r3, #0
    3446:	4298      	cmp	r0, r3
    3448:	d011      	beq.n	346e <setvbuf+0x136>
    344a:	426d      	negs	r5, r5
    344c:	60a3      	str	r3, [r4, #8]
    344e:	61a5      	str	r5, [r4, #24]
    3450:	0018      	movs	r0, r3
    3452:	e7d3      	b.n	33fc <setvbuf+0xc4>
    3454:	9801      	ldr	r0, [sp, #4]
    3456:	f000 fae1 	bl	3a1c <malloc>
    345a:	1e07      	subs	r7, r0, #0
    345c:	d0c0      	beq.n	33e0 <setvbuf+0xa8>
    345e:	2380      	movs	r3, #128	; 0x80
    3460:	89a2      	ldrh	r2, [r4, #12]
    3462:	9d01      	ldr	r5, [sp, #4]
    3464:	4313      	orrs	r3, r2
    3466:	81a3      	strh	r3, [r4, #12]
    3468:	e7d6      	b.n	3418 <setvbuf+0xe0>
    346a:	2000      	movs	r0, #0
    346c:	e7ba      	b.n	33e4 <setvbuf+0xac>
    346e:	60a5      	str	r5, [r4, #8]
    3470:	e7c4      	b.n	33fc <setvbuf+0xc4>
    3472:	60a0      	str	r0, [r4, #8]
    3474:	e7c2      	b.n	33fc <setvbuf+0xc4>
    3476:	2001      	movs	r0, #1
    3478:	4240      	negs	r0, r0
    347a:	e7bf      	b.n	33fc <setvbuf+0xc4>
    347c:	20000004 	.word	0x20000004
    3480:	0000440c 	.word	0x0000440c
    3484:	fffff35c 	.word	0xfffff35c
    3488:	0000442c 	.word	0x0000442c
    348c:	000043ec 	.word	0x000043ec

00003490 <__swbuf_r>:
    3490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3492:	0005      	movs	r5, r0
    3494:	000e      	movs	r6, r1
    3496:	0014      	movs	r4, r2
    3498:	2800      	cmp	r0, #0
    349a:	d004      	beq.n	34a6 <__swbuf_r+0x16>
    349c:	6983      	ldr	r3, [r0, #24]
    349e:	2b00      	cmp	r3, #0
    34a0:	d101      	bne.n	34a6 <__swbuf_r+0x16>
    34a2:	f000 f9b9 	bl	3818 <__sinit>
    34a6:	4b22      	ldr	r3, [pc, #136]	; (3530 <__swbuf_r+0xa0>)
    34a8:	429c      	cmp	r4, r3
    34aa:	d12d      	bne.n	3508 <__swbuf_r+0x78>
    34ac:	686c      	ldr	r4, [r5, #4]
    34ae:	69a3      	ldr	r3, [r4, #24]
    34b0:	60a3      	str	r3, [r4, #8]
    34b2:	89a3      	ldrh	r3, [r4, #12]
    34b4:	071b      	lsls	r3, r3, #28
    34b6:	d531      	bpl.n	351c <__swbuf_r+0x8c>
    34b8:	6923      	ldr	r3, [r4, #16]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d02e      	beq.n	351c <__swbuf_r+0x8c>
    34be:	6823      	ldr	r3, [r4, #0]
    34c0:	6922      	ldr	r2, [r4, #16]
    34c2:	b2f7      	uxtb	r7, r6
    34c4:	1a98      	subs	r0, r3, r2
    34c6:	6963      	ldr	r3, [r4, #20]
    34c8:	b2f6      	uxtb	r6, r6
    34ca:	4298      	cmp	r0, r3
    34cc:	db05      	blt.n	34da <__swbuf_r+0x4a>
    34ce:	0021      	movs	r1, r4
    34d0:	0028      	movs	r0, r5
    34d2:	f000 f933 	bl	373c <_fflush_r>
    34d6:	2800      	cmp	r0, #0
    34d8:	d126      	bne.n	3528 <__swbuf_r+0x98>
    34da:	68a3      	ldr	r3, [r4, #8]
    34dc:	3001      	adds	r0, #1
    34de:	3b01      	subs	r3, #1
    34e0:	60a3      	str	r3, [r4, #8]
    34e2:	6823      	ldr	r3, [r4, #0]
    34e4:	1c5a      	adds	r2, r3, #1
    34e6:	6022      	str	r2, [r4, #0]
    34e8:	701f      	strb	r7, [r3, #0]
    34ea:	6963      	ldr	r3, [r4, #20]
    34ec:	4298      	cmp	r0, r3
    34ee:	d004      	beq.n	34fa <__swbuf_r+0x6a>
    34f0:	89a3      	ldrh	r3, [r4, #12]
    34f2:	07db      	lsls	r3, r3, #31
    34f4:	d51a      	bpl.n	352c <__swbuf_r+0x9c>
    34f6:	2e0a      	cmp	r6, #10
    34f8:	d118      	bne.n	352c <__swbuf_r+0x9c>
    34fa:	0021      	movs	r1, r4
    34fc:	0028      	movs	r0, r5
    34fe:	f000 f91d 	bl	373c <_fflush_r>
    3502:	2800      	cmp	r0, #0
    3504:	d012      	beq.n	352c <__swbuf_r+0x9c>
    3506:	e00f      	b.n	3528 <__swbuf_r+0x98>
    3508:	4b0a      	ldr	r3, [pc, #40]	; (3534 <__swbuf_r+0xa4>)
    350a:	429c      	cmp	r4, r3
    350c:	d101      	bne.n	3512 <__swbuf_r+0x82>
    350e:	68ac      	ldr	r4, [r5, #8]
    3510:	e7cd      	b.n	34ae <__swbuf_r+0x1e>
    3512:	4b09      	ldr	r3, [pc, #36]	; (3538 <__swbuf_r+0xa8>)
    3514:	429c      	cmp	r4, r3
    3516:	d1ca      	bne.n	34ae <__swbuf_r+0x1e>
    3518:	68ec      	ldr	r4, [r5, #12]
    351a:	e7c8      	b.n	34ae <__swbuf_r+0x1e>
    351c:	0021      	movs	r1, r4
    351e:	0028      	movs	r0, r5
    3520:	f000 f80c 	bl	353c <__swsetup_r>
    3524:	2800      	cmp	r0, #0
    3526:	d0ca      	beq.n	34be <__swbuf_r+0x2e>
    3528:	2601      	movs	r6, #1
    352a:	4276      	negs	r6, r6
    352c:	0030      	movs	r0, r6
    352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3530:	0000440c 	.word	0x0000440c
    3534:	0000442c 	.word	0x0000442c
    3538:	000043ec 	.word	0x000043ec

0000353c <__swsetup_r>:
    353c:	4b36      	ldr	r3, [pc, #216]	; (3618 <__swsetup_r+0xdc>)
    353e:	b570      	push	{r4, r5, r6, lr}
    3540:	681d      	ldr	r5, [r3, #0]
    3542:	0006      	movs	r6, r0
    3544:	000c      	movs	r4, r1
    3546:	2d00      	cmp	r5, #0
    3548:	d005      	beq.n	3556 <__swsetup_r+0x1a>
    354a:	69ab      	ldr	r3, [r5, #24]
    354c:	2b00      	cmp	r3, #0
    354e:	d102      	bne.n	3556 <__swsetup_r+0x1a>
    3550:	0028      	movs	r0, r5
    3552:	f000 f961 	bl	3818 <__sinit>
    3556:	4b31      	ldr	r3, [pc, #196]	; (361c <__swsetup_r+0xe0>)
    3558:	429c      	cmp	r4, r3
    355a:	d10f      	bne.n	357c <__swsetup_r+0x40>
    355c:	686c      	ldr	r4, [r5, #4]
    355e:	230c      	movs	r3, #12
    3560:	5ee2      	ldrsh	r2, [r4, r3]
    3562:	b293      	uxth	r3, r2
    3564:	0719      	lsls	r1, r3, #28
    3566:	d42d      	bmi.n	35c4 <__swsetup_r+0x88>
    3568:	06d9      	lsls	r1, r3, #27
    356a:	d411      	bmi.n	3590 <__swsetup_r+0x54>
    356c:	2309      	movs	r3, #9
    356e:	2001      	movs	r0, #1
    3570:	6033      	str	r3, [r6, #0]
    3572:	3337      	adds	r3, #55	; 0x37
    3574:	4313      	orrs	r3, r2
    3576:	81a3      	strh	r3, [r4, #12]
    3578:	4240      	negs	r0, r0
    357a:	bd70      	pop	{r4, r5, r6, pc}
    357c:	4b28      	ldr	r3, [pc, #160]	; (3620 <__swsetup_r+0xe4>)
    357e:	429c      	cmp	r4, r3
    3580:	d101      	bne.n	3586 <__swsetup_r+0x4a>
    3582:	68ac      	ldr	r4, [r5, #8]
    3584:	e7eb      	b.n	355e <__swsetup_r+0x22>
    3586:	4b27      	ldr	r3, [pc, #156]	; (3624 <__swsetup_r+0xe8>)
    3588:	429c      	cmp	r4, r3
    358a:	d1e8      	bne.n	355e <__swsetup_r+0x22>
    358c:	68ec      	ldr	r4, [r5, #12]
    358e:	e7e6      	b.n	355e <__swsetup_r+0x22>
    3590:	075b      	lsls	r3, r3, #29
    3592:	d513      	bpl.n	35bc <__swsetup_r+0x80>
    3594:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3596:	2900      	cmp	r1, #0
    3598:	d008      	beq.n	35ac <__swsetup_r+0x70>
    359a:	0023      	movs	r3, r4
    359c:	3344      	adds	r3, #68	; 0x44
    359e:	4299      	cmp	r1, r3
    35a0:	d002      	beq.n	35a8 <__swsetup_r+0x6c>
    35a2:	0030      	movs	r0, r6
    35a4:	f000 fa44 	bl	3a30 <_free_r>
    35a8:	2300      	movs	r3, #0
    35aa:	6363      	str	r3, [r4, #52]	; 0x34
    35ac:	2224      	movs	r2, #36	; 0x24
    35ae:	89a3      	ldrh	r3, [r4, #12]
    35b0:	4393      	bics	r3, r2
    35b2:	81a3      	strh	r3, [r4, #12]
    35b4:	2300      	movs	r3, #0
    35b6:	6063      	str	r3, [r4, #4]
    35b8:	6923      	ldr	r3, [r4, #16]
    35ba:	6023      	str	r3, [r4, #0]
    35bc:	2308      	movs	r3, #8
    35be:	89a2      	ldrh	r2, [r4, #12]
    35c0:	4313      	orrs	r3, r2
    35c2:	81a3      	strh	r3, [r4, #12]
    35c4:	6923      	ldr	r3, [r4, #16]
    35c6:	2b00      	cmp	r3, #0
    35c8:	d10b      	bne.n	35e2 <__swsetup_r+0xa6>
    35ca:	21a0      	movs	r1, #160	; 0xa0
    35cc:	2280      	movs	r2, #128	; 0x80
    35ce:	89a3      	ldrh	r3, [r4, #12]
    35d0:	0089      	lsls	r1, r1, #2
    35d2:	0092      	lsls	r2, r2, #2
    35d4:	400b      	ands	r3, r1
    35d6:	4293      	cmp	r3, r2
    35d8:	d003      	beq.n	35e2 <__swsetup_r+0xa6>
    35da:	0021      	movs	r1, r4
    35dc:	0030      	movs	r0, r6
    35de:	f000 f9d9 	bl	3994 <__smakebuf_r>
    35e2:	2301      	movs	r3, #1
    35e4:	89a2      	ldrh	r2, [r4, #12]
    35e6:	4013      	ands	r3, r2
    35e8:	d011      	beq.n	360e <__swsetup_r+0xd2>
    35ea:	2300      	movs	r3, #0
    35ec:	60a3      	str	r3, [r4, #8]
    35ee:	6963      	ldr	r3, [r4, #20]
    35f0:	425b      	negs	r3, r3
    35f2:	61a3      	str	r3, [r4, #24]
    35f4:	2000      	movs	r0, #0
    35f6:	6923      	ldr	r3, [r4, #16]
    35f8:	4283      	cmp	r3, r0
    35fa:	d1be      	bne.n	357a <__swsetup_r+0x3e>
    35fc:	230c      	movs	r3, #12
    35fe:	5ee2      	ldrsh	r2, [r4, r3]
    3600:	0613      	lsls	r3, r2, #24
    3602:	d5ba      	bpl.n	357a <__swsetup_r+0x3e>
    3604:	2340      	movs	r3, #64	; 0x40
    3606:	4313      	orrs	r3, r2
    3608:	81a3      	strh	r3, [r4, #12]
    360a:	3801      	subs	r0, #1
    360c:	e7b5      	b.n	357a <__swsetup_r+0x3e>
    360e:	0792      	lsls	r2, r2, #30
    3610:	d400      	bmi.n	3614 <__swsetup_r+0xd8>
    3612:	6963      	ldr	r3, [r4, #20]
    3614:	60a3      	str	r3, [r4, #8]
    3616:	e7ed      	b.n	35f4 <__swsetup_r+0xb8>
    3618:	20000004 	.word	0x20000004
    361c:	0000440c 	.word	0x0000440c
    3620:	0000442c 	.word	0x0000442c
    3624:	000043ec 	.word	0x000043ec

00003628 <__sflush_r>:
    3628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    362a:	898a      	ldrh	r2, [r1, #12]
    362c:	0005      	movs	r5, r0
    362e:	000c      	movs	r4, r1
    3630:	0713      	lsls	r3, r2, #28
    3632:	d460      	bmi.n	36f6 <__sflush_r+0xce>
    3634:	684b      	ldr	r3, [r1, #4]
    3636:	2b00      	cmp	r3, #0
    3638:	dc04      	bgt.n	3644 <__sflush_r+0x1c>
    363a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    363c:	2b00      	cmp	r3, #0
    363e:	dc01      	bgt.n	3644 <__sflush_r+0x1c>
    3640:	2000      	movs	r0, #0
    3642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3644:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3646:	2f00      	cmp	r7, #0
    3648:	d0fa      	beq.n	3640 <__sflush_r+0x18>
    364a:	2300      	movs	r3, #0
    364c:	682e      	ldr	r6, [r5, #0]
    364e:	602b      	str	r3, [r5, #0]
    3650:	2380      	movs	r3, #128	; 0x80
    3652:	015b      	lsls	r3, r3, #5
    3654:	401a      	ands	r2, r3
    3656:	d034      	beq.n	36c2 <__sflush_r+0x9a>
    3658:	6d60      	ldr	r0, [r4, #84]	; 0x54
    365a:	89a3      	ldrh	r3, [r4, #12]
    365c:	075b      	lsls	r3, r3, #29
    365e:	d506      	bpl.n	366e <__sflush_r+0x46>
    3660:	6863      	ldr	r3, [r4, #4]
    3662:	1ac0      	subs	r0, r0, r3
    3664:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3666:	2b00      	cmp	r3, #0
    3668:	d001      	beq.n	366e <__sflush_r+0x46>
    366a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    366c:	1ac0      	subs	r0, r0, r3
    366e:	0002      	movs	r2, r0
    3670:	6a21      	ldr	r1, [r4, #32]
    3672:	2300      	movs	r3, #0
    3674:	0028      	movs	r0, r5
    3676:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3678:	47b8      	blx	r7
    367a:	89a1      	ldrh	r1, [r4, #12]
    367c:	1c43      	adds	r3, r0, #1
    367e:	d106      	bne.n	368e <__sflush_r+0x66>
    3680:	682b      	ldr	r3, [r5, #0]
    3682:	2b1d      	cmp	r3, #29
    3684:	d831      	bhi.n	36ea <__sflush_r+0xc2>
    3686:	4a2c      	ldr	r2, [pc, #176]	; (3738 <__sflush_r+0x110>)
    3688:	40da      	lsrs	r2, r3
    368a:	07d3      	lsls	r3, r2, #31
    368c:	d52d      	bpl.n	36ea <__sflush_r+0xc2>
    368e:	2300      	movs	r3, #0
    3690:	6063      	str	r3, [r4, #4]
    3692:	6923      	ldr	r3, [r4, #16]
    3694:	6023      	str	r3, [r4, #0]
    3696:	04cb      	lsls	r3, r1, #19
    3698:	d505      	bpl.n	36a6 <__sflush_r+0x7e>
    369a:	1c43      	adds	r3, r0, #1
    369c:	d102      	bne.n	36a4 <__sflush_r+0x7c>
    369e:	682b      	ldr	r3, [r5, #0]
    36a0:	2b00      	cmp	r3, #0
    36a2:	d100      	bne.n	36a6 <__sflush_r+0x7e>
    36a4:	6560      	str	r0, [r4, #84]	; 0x54
    36a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    36a8:	602e      	str	r6, [r5, #0]
    36aa:	2900      	cmp	r1, #0
    36ac:	d0c8      	beq.n	3640 <__sflush_r+0x18>
    36ae:	0023      	movs	r3, r4
    36b0:	3344      	adds	r3, #68	; 0x44
    36b2:	4299      	cmp	r1, r3
    36b4:	d002      	beq.n	36bc <__sflush_r+0x94>
    36b6:	0028      	movs	r0, r5
    36b8:	f000 f9ba 	bl	3a30 <_free_r>
    36bc:	2000      	movs	r0, #0
    36be:	6360      	str	r0, [r4, #52]	; 0x34
    36c0:	e7bf      	b.n	3642 <__sflush_r+0x1a>
    36c2:	2301      	movs	r3, #1
    36c4:	6a21      	ldr	r1, [r4, #32]
    36c6:	0028      	movs	r0, r5
    36c8:	47b8      	blx	r7
    36ca:	1c43      	adds	r3, r0, #1
    36cc:	d1c5      	bne.n	365a <__sflush_r+0x32>
    36ce:	682b      	ldr	r3, [r5, #0]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d0c2      	beq.n	365a <__sflush_r+0x32>
    36d4:	2b1d      	cmp	r3, #29
    36d6:	d001      	beq.n	36dc <__sflush_r+0xb4>
    36d8:	2b16      	cmp	r3, #22
    36da:	d101      	bne.n	36e0 <__sflush_r+0xb8>
    36dc:	602e      	str	r6, [r5, #0]
    36de:	e7af      	b.n	3640 <__sflush_r+0x18>
    36e0:	2340      	movs	r3, #64	; 0x40
    36e2:	89a2      	ldrh	r2, [r4, #12]
    36e4:	4313      	orrs	r3, r2
    36e6:	81a3      	strh	r3, [r4, #12]
    36e8:	e7ab      	b.n	3642 <__sflush_r+0x1a>
    36ea:	2340      	movs	r3, #64	; 0x40
    36ec:	430b      	orrs	r3, r1
    36ee:	2001      	movs	r0, #1
    36f0:	81a3      	strh	r3, [r4, #12]
    36f2:	4240      	negs	r0, r0
    36f4:	e7a5      	b.n	3642 <__sflush_r+0x1a>
    36f6:	690f      	ldr	r7, [r1, #16]
    36f8:	2f00      	cmp	r7, #0
    36fa:	d0a1      	beq.n	3640 <__sflush_r+0x18>
    36fc:	680b      	ldr	r3, [r1, #0]
    36fe:	600f      	str	r7, [r1, #0]
    3700:	1bdb      	subs	r3, r3, r7
    3702:	9301      	str	r3, [sp, #4]
    3704:	2300      	movs	r3, #0
    3706:	0792      	lsls	r2, r2, #30
    3708:	d100      	bne.n	370c <__sflush_r+0xe4>
    370a:	694b      	ldr	r3, [r1, #20]
    370c:	60a3      	str	r3, [r4, #8]
    370e:	9b01      	ldr	r3, [sp, #4]
    3710:	2b00      	cmp	r3, #0
    3712:	dc00      	bgt.n	3716 <__sflush_r+0xee>
    3714:	e794      	b.n	3640 <__sflush_r+0x18>
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	003a      	movs	r2, r7
    371a:	6a21      	ldr	r1, [r4, #32]
    371c:	0028      	movs	r0, r5
    371e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3720:	47b0      	blx	r6
    3722:	2800      	cmp	r0, #0
    3724:	dc03      	bgt.n	372e <__sflush_r+0x106>
    3726:	2340      	movs	r3, #64	; 0x40
    3728:	89a2      	ldrh	r2, [r4, #12]
    372a:	4313      	orrs	r3, r2
    372c:	e7df      	b.n	36ee <__sflush_r+0xc6>
    372e:	9b01      	ldr	r3, [sp, #4]
    3730:	183f      	adds	r7, r7, r0
    3732:	1a1b      	subs	r3, r3, r0
    3734:	9301      	str	r3, [sp, #4]
    3736:	e7ea      	b.n	370e <__sflush_r+0xe6>
    3738:	20400001 	.word	0x20400001

0000373c <_fflush_r>:
    373c:	690b      	ldr	r3, [r1, #16]
    373e:	b570      	push	{r4, r5, r6, lr}
    3740:	0005      	movs	r5, r0
    3742:	000c      	movs	r4, r1
    3744:	2b00      	cmp	r3, #0
    3746:	d101      	bne.n	374c <_fflush_r+0x10>
    3748:	2000      	movs	r0, #0
    374a:	bd70      	pop	{r4, r5, r6, pc}
    374c:	2800      	cmp	r0, #0
    374e:	d004      	beq.n	375a <_fflush_r+0x1e>
    3750:	6983      	ldr	r3, [r0, #24]
    3752:	2b00      	cmp	r3, #0
    3754:	d101      	bne.n	375a <_fflush_r+0x1e>
    3756:	f000 f85f 	bl	3818 <__sinit>
    375a:	4b0b      	ldr	r3, [pc, #44]	; (3788 <_fflush_r+0x4c>)
    375c:	429c      	cmp	r4, r3
    375e:	d109      	bne.n	3774 <_fflush_r+0x38>
    3760:	686c      	ldr	r4, [r5, #4]
    3762:	220c      	movs	r2, #12
    3764:	5ea3      	ldrsh	r3, [r4, r2]
    3766:	2b00      	cmp	r3, #0
    3768:	d0ee      	beq.n	3748 <_fflush_r+0xc>
    376a:	0021      	movs	r1, r4
    376c:	0028      	movs	r0, r5
    376e:	f7ff ff5b 	bl	3628 <__sflush_r>
    3772:	e7ea      	b.n	374a <_fflush_r+0xe>
    3774:	4b05      	ldr	r3, [pc, #20]	; (378c <_fflush_r+0x50>)
    3776:	429c      	cmp	r4, r3
    3778:	d101      	bne.n	377e <_fflush_r+0x42>
    377a:	68ac      	ldr	r4, [r5, #8]
    377c:	e7f1      	b.n	3762 <_fflush_r+0x26>
    377e:	4b04      	ldr	r3, [pc, #16]	; (3790 <_fflush_r+0x54>)
    3780:	429c      	cmp	r4, r3
    3782:	d1ee      	bne.n	3762 <_fflush_r+0x26>
    3784:	68ec      	ldr	r4, [r5, #12]
    3786:	e7ec      	b.n	3762 <_fflush_r+0x26>
    3788:	0000440c 	.word	0x0000440c
    378c:	0000442c 	.word	0x0000442c
    3790:	000043ec 	.word	0x000043ec

00003794 <_cleanup_r>:
    3794:	b510      	push	{r4, lr}
    3796:	4902      	ldr	r1, [pc, #8]	; (37a0 <_cleanup_r+0xc>)
    3798:	f000 f8b2 	bl	3900 <_fwalk_reent>
    379c:	bd10      	pop	{r4, pc}
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	0000373d 	.word	0x0000373d

000037a4 <std.isra.0>:
    37a4:	2300      	movs	r3, #0
    37a6:	b510      	push	{r4, lr}
    37a8:	0004      	movs	r4, r0
    37aa:	6003      	str	r3, [r0, #0]
    37ac:	6043      	str	r3, [r0, #4]
    37ae:	6083      	str	r3, [r0, #8]
    37b0:	8181      	strh	r1, [r0, #12]
    37b2:	6643      	str	r3, [r0, #100]	; 0x64
    37b4:	81c2      	strh	r2, [r0, #14]
    37b6:	6103      	str	r3, [r0, #16]
    37b8:	6143      	str	r3, [r0, #20]
    37ba:	6183      	str	r3, [r0, #24]
    37bc:	0019      	movs	r1, r3
    37be:	2208      	movs	r2, #8
    37c0:	305c      	adds	r0, #92	; 0x5c
    37c2:	f7ff fd23 	bl	320c <memset>
    37c6:	4b05      	ldr	r3, [pc, #20]	; (37dc <std.isra.0+0x38>)
    37c8:	6224      	str	r4, [r4, #32]
    37ca:	6263      	str	r3, [r4, #36]	; 0x24
    37cc:	4b04      	ldr	r3, [pc, #16]	; (37e0 <std.isra.0+0x3c>)
    37ce:	62a3      	str	r3, [r4, #40]	; 0x28
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <std.isra.0+0x40>)
    37d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    37d4:	4b04      	ldr	r3, [pc, #16]	; (37e8 <std.isra.0+0x44>)
    37d6:	6323      	str	r3, [r4, #48]	; 0x30
    37d8:	bd10      	pop	{r4, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	0000413d 	.word	0x0000413d
    37e0:	00004165 	.word	0x00004165
    37e4:	0000419d 	.word	0x0000419d
    37e8:	000041c9 	.word	0x000041c9

000037ec <__sfmoreglue>:
    37ec:	b570      	push	{r4, r5, r6, lr}
    37ee:	2568      	movs	r5, #104	; 0x68
    37f0:	1e4a      	subs	r2, r1, #1
    37f2:	4355      	muls	r5, r2
    37f4:	000e      	movs	r6, r1
    37f6:	0029      	movs	r1, r5
    37f8:	3174      	adds	r1, #116	; 0x74
    37fa:	f000 f963 	bl	3ac4 <_malloc_r>
    37fe:	1e04      	subs	r4, r0, #0
    3800:	d008      	beq.n	3814 <__sfmoreglue+0x28>
    3802:	2100      	movs	r1, #0
    3804:	002a      	movs	r2, r5
    3806:	6001      	str	r1, [r0, #0]
    3808:	6046      	str	r6, [r0, #4]
    380a:	300c      	adds	r0, #12
    380c:	60a0      	str	r0, [r4, #8]
    380e:	3268      	adds	r2, #104	; 0x68
    3810:	f7ff fcfc 	bl	320c <memset>
    3814:	0020      	movs	r0, r4
    3816:	bd70      	pop	{r4, r5, r6, pc}

00003818 <__sinit>:
    3818:	6983      	ldr	r3, [r0, #24]
    381a:	b513      	push	{r0, r1, r4, lr}
    381c:	0004      	movs	r4, r0
    381e:	2b00      	cmp	r3, #0
    3820:	d128      	bne.n	3874 <__sinit+0x5c>
    3822:	6483      	str	r3, [r0, #72]	; 0x48
    3824:	64c3      	str	r3, [r0, #76]	; 0x4c
    3826:	6503      	str	r3, [r0, #80]	; 0x50
    3828:	4b13      	ldr	r3, [pc, #76]	; (3878 <__sinit+0x60>)
    382a:	4a14      	ldr	r2, [pc, #80]	; (387c <__sinit+0x64>)
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	6282      	str	r2, [r0, #40]	; 0x28
    3830:	9301      	str	r3, [sp, #4]
    3832:	4298      	cmp	r0, r3
    3834:	d101      	bne.n	383a <__sinit+0x22>
    3836:	2301      	movs	r3, #1
    3838:	6183      	str	r3, [r0, #24]
    383a:	0020      	movs	r0, r4
    383c:	f000 f820 	bl	3880 <__sfp>
    3840:	6060      	str	r0, [r4, #4]
    3842:	0020      	movs	r0, r4
    3844:	f000 f81c 	bl	3880 <__sfp>
    3848:	60a0      	str	r0, [r4, #8]
    384a:	0020      	movs	r0, r4
    384c:	f000 f818 	bl	3880 <__sfp>
    3850:	2200      	movs	r2, #0
    3852:	60e0      	str	r0, [r4, #12]
    3854:	2104      	movs	r1, #4
    3856:	6860      	ldr	r0, [r4, #4]
    3858:	f7ff ffa4 	bl	37a4 <std.isra.0>
    385c:	2201      	movs	r2, #1
    385e:	2109      	movs	r1, #9
    3860:	68a0      	ldr	r0, [r4, #8]
    3862:	f7ff ff9f 	bl	37a4 <std.isra.0>
    3866:	2202      	movs	r2, #2
    3868:	2112      	movs	r1, #18
    386a:	68e0      	ldr	r0, [r4, #12]
    386c:	f7ff ff9a 	bl	37a4 <std.isra.0>
    3870:	2301      	movs	r3, #1
    3872:	61a3      	str	r3, [r4, #24]
    3874:	bd13      	pop	{r0, r1, r4, pc}
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	000043e8 	.word	0x000043e8
    387c:	00003795 	.word	0x00003795

00003880 <__sfp>:
    3880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3882:	4b1e      	ldr	r3, [pc, #120]	; (38fc <__sfp+0x7c>)
    3884:	0007      	movs	r7, r0
    3886:	681e      	ldr	r6, [r3, #0]
    3888:	69b3      	ldr	r3, [r6, #24]
    388a:	2b00      	cmp	r3, #0
    388c:	d102      	bne.n	3894 <__sfp+0x14>
    388e:	0030      	movs	r0, r6
    3890:	f7ff ffc2 	bl	3818 <__sinit>
    3894:	3648      	adds	r6, #72	; 0x48
    3896:	68b4      	ldr	r4, [r6, #8]
    3898:	6873      	ldr	r3, [r6, #4]
    389a:	3b01      	subs	r3, #1
    389c:	d504      	bpl.n	38a8 <__sfp+0x28>
    389e:	6833      	ldr	r3, [r6, #0]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d007      	beq.n	38b4 <__sfp+0x34>
    38a4:	6836      	ldr	r6, [r6, #0]
    38a6:	e7f6      	b.n	3896 <__sfp+0x16>
    38a8:	220c      	movs	r2, #12
    38aa:	5ea5      	ldrsh	r5, [r4, r2]
    38ac:	2d00      	cmp	r5, #0
    38ae:	d00d      	beq.n	38cc <__sfp+0x4c>
    38b0:	3468      	adds	r4, #104	; 0x68
    38b2:	e7f2      	b.n	389a <__sfp+0x1a>
    38b4:	2104      	movs	r1, #4
    38b6:	0038      	movs	r0, r7
    38b8:	f7ff ff98 	bl	37ec <__sfmoreglue>
    38bc:	6030      	str	r0, [r6, #0]
    38be:	2800      	cmp	r0, #0
    38c0:	d1f0      	bne.n	38a4 <__sfp+0x24>
    38c2:	230c      	movs	r3, #12
    38c4:	0004      	movs	r4, r0
    38c6:	603b      	str	r3, [r7, #0]
    38c8:	0020      	movs	r0, r4
    38ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38cc:	2301      	movs	r3, #1
    38ce:	0020      	movs	r0, r4
    38d0:	425b      	negs	r3, r3
    38d2:	81e3      	strh	r3, [r4, #14]
    38d4:	3302      	adds	r3, #2
    38d6:	81a3      	strh	r3, [r4, #12]
    38d8:	6665      	str	r5, [r4, #100]	; 0x64
    38da:	6025      	str	r5, [r4, #0]
    38dc:	60a5      	str	r5, [r4, #8]
    38de:	6065      	str	r5, [r4, #4]
    38e0:	6125      	str	r5, [r4, #16]
    38e2:	6165      	str	r5, [r4, #20]
    38e4:	61a5      	str	r5, [r4, #24]
    38e6:	2208      	movs	r2, #8
    38e8:	0029      	movs	r1, r5
    38ea:	305c      	adds	r0, #92	; 0x5c
    38ec:	f7ff fc8e 	bl	320c <memset>
    38f0:	6365      	str	r5, [r4, #52]	; 0x34
    38f2:	63a5      	str	r5, [r4, #56]	; 0x38
    38f4:	64a5      	str	r5, [r4, #72]	; 0x48
    38f6:	64e5      	str	r5, [r4, #76]	; 0x4c
    38f8:	e7e6      	b.n	38c8 <__sfp+0x48>
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	000043e8 	.word	0x000043e8

00003900 <_fwalk_reent>:
    3900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3902:	0004      	movs	r4, r0
    3904:	0007      	movs	r7, r0
    3906:	2600      	movs	r6, #0
    3908:	9101      	str	r1, [sp, #4]
    390a:	3448      	adds	r4, #72	; 0x48
    390c:	2c00      	cmp	r4, #0
    390e:	d101      	bne.n	3914 <_fwalk_reent+0x14>
    3910:	0030      	movs	r0, r6
    3912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3914:	6863      	ldr	r3, [r4, #4]
    3916:	68a5      	ldr	r5, [r4, #8]
    3918:	9300      	str	r3, [sp, #0]
    391a:	9b00      	ldr	r3, [sp, #0]
    391c:	3b01      	subs	r3, #1
    391e:	9300      	str	r3, [sp, #0]
    3920:	d501      	bpl.n	3926 <_fwalk_reent+0x26>
    3922:	6824      	ldr	r4, [r4, #0]
    3924:	e7f2      	b.n	390c <_fwalk_reent+0xc>
    3926:	89ab      	ldrh	r3, [r5, #12]
    3928:	2b01      	cmp	r3, #1
    392a:	d908      	bls.n	393e <_fwalk_reent+0x3e>
    392c:	220e      	movs	r2, #14
    392e:	5eab      	ldrsh	r3, [r5, r2]
    3930:	3301      	adds	r3, #1
    3932:	d004      	beq.n	393e <_fwalk_reent+0x3e>
    3934:	0029      	movs	r1, r5
    3936:	0038      	movs	r0, r7
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	4798      	blx	r3
    393c:	4306      	orrs	r6, r0
    393e:	3568      	adds	r5, #104	; 0x68
    3940:	e7eb      	b.n	391a <_fwalk_reent+0x1a>
	...

00003944 <__swhatbuf_r>:
    3944:	b570      	push	{r4, r5, r6, lr}
    3946:	000e      	movs	r6, r1
    3948:	001d      	movs	r5, r3
    394a:	230e      	movs	r3, #14
    394c:	5ec9      	ldrsh	r1, [r1, r3]
    394e:	b090      	sub	sp, #64	; 0x40
    3950:	0014      	movs	r4, r2
    3952:	2900      	cmp	r1, #0
    3954:	da07      	bge.n	3966 <__swhatbuf_r+0x22>
    3956:	2300      	movs	r3, #0
    3958:	602b      	str	r3, [r5, #0]
    395a:	89b3      	ldrh	r3, [r6, #12]
    395c:	061b      	lsls	r3, r3, #24
    395e:	d411      	bmi.n	3984 <__swhatbuf_r+0x40>
    3960:	2380      	movs	r3, #128	; 0x80
    3962:	00db      	lsls	r3, r3, #3
    3964:	e00f      	b.n	3986 <__swhatbuf_r+0x42>
    3966:	aa01      	add	r2, sp, #4
    3968:	f000 fc5a 	bl	4220 <_fstat_r>
    396c:	2800      	cmp	r0, #0
    396e:	dbf2      	blt.n	3956 <__swhatbuf_r+0x12>
    3970:	22f0      	movs	r2, #240	; 0xf0
    3972:	9b02      	ldr	r3, [sp, #8]
    3974:	0212      	lsls	r2, r2, #8
    3976:	4013      	ands	r3, r2
    3978:	4a05      	ldr	r2, [pc, #20]	; (3990 <__swhatbuf_r+0x4c>)
    397a:	189b      	adds	r3, r3, r2
    397c:	425a      	negs	r2, r3
    397e:	4153      	adcs	r3, r2
    3980:	602b      	str	r3, [r5, #0]
    3982:	e7ed      	b.n	3960 <__swhatbuf_r+0x1c>
    3984:	2340      	movs	r3, #64	; 0x40
    3986:	2000      	movs	r0, #0
    3988:	6023      	str	r3, [r4, #0]
    398a:	b010      	add	sp, #64	; 0x40
    398c:	bd70      	pop	{r4, r5, r6, pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	ffffe000 	.word	0xffffe000

00003994 <__smakebuf_r>:
    3994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3996:	2602      	movs	r6, #2
    3998:	898b      	ldrh	r3, [r1, #12]
    399a:	0005      	movs	r5, r0
    399c:	000c      	movs	r4, r1
    399e:	4233      	tst	r3, r6
    39a0:	d006      	beq.n	39b0 <__smakebuf_r+0x1c>
    39a2:	0023      	movs	r3, r4
    39a4:	3347      	adds	r3, #71	; 0x47
    39a6:	6023      	str	r3, [r4, #0]
    39a8:	6123      	str	r3, [r4, #16]
    39aa:	2301      	movs	r3, #1
    39ac:	6163      	str	r3, [r4, #20]
    39ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    39b0:	ab01      	add	r3, sp, #4
    39b2:	466a      	mov	r2, sp
    39b4:	f7ff ffc6 	bl	3944 <__swhatbuf_r>
    39b8:	9900      	ldr	r1, [sp, #0]
    39ba:	0007      	movs	r7, r0
    39bc:	0028      	movs	r0, r5
    39be:	f000 f881 	bl	3ac4 <_malloc_r>
    39c2:	2800      	cmp	r0, #0
    39c4:	d108      	bne.n	39d8 <__smakebuf_r+0x44>
    39c6:	220c      	movs	r2, #12
    39c8:	5ea3      	ldrsh	r3, [r4, r2]
    39ca:	059a      	lsls	r2, r3, #22
    39cc:	d4ef      	bmi.n	39ae <__smakebuf_r+0x1a>
    39ce:	2203      	movs	r2, #3
    39d0:	4393      	bics	r3, r2
    39d2:	431e      	orrs	r6, r3
    39d4:	81a6      	strh	r6, [r4, #12]
    39d6:	e7e4      	b.n	39a2 <__smakebuf_r+0xe>
    39d8:	4b0f      	ldr	r3, [pc, #60]	; (3a18 <__smakebuf_r+0x84>)
    39da:	62ab      	str	r3, [r5, #40]	; 0x28
    39dc:	2380      	movs	r3, #128	; 0x80
    39de:	89a2      	ldrh	r2, [r4, #12]
    39e0:	6020      	str	r0, [r4, #0]
    39e2:	4313      	orrs	r3, r2
    39e4:	81a3      	strh	r3, [r4, #12]
    39e6:	9b00      	ldr	r3, [sp, #0]
    39e8:	6120      	str	r0, [r4, #16]
    39ea:	6163      	str	r3, [r4, #20]
    39ec:	9b01      	ldr	r3, [sp, #4]
    39ee:	2b00      	cmp	r3, #0
    39f0:	d00d      	beq.n	3a0e <__smakebuf_r+0x7a>
    39f2:	230e      	movs	r3, #14
    39f4:	5ee1      	ldrsh	r1, [r4, r3]
    39f6:	0028      	movs	r0, r5
    39f8:	f000 fc24 	bl	4244 <_isatty_r>
    39fc:	2800      	cmp	r0, #0
    39fe:	d006      	beq.n	3a0e <__smakebuf_r+0x7a>
    3a00:	2203      	movs	r2, #3
    3a02:	89a3      	ldrh	r3, [r4, #12]
    3a04:	4393      	bics	r3, r2
    3a06:	001a      	movs	r2, r3
    3a08:	2301      	movs	r3, #1
    3a0a:	4313      	orrs	r3, r2
    3a0c:	81a3      	strh	r3, [r4, #12]
    3a0e:	89a0      	ldrh	r0, [r4, #12]
    3a10:	4338      	orrs	r0, r7
    3a12:	81a0      	strh	r0, [r4, #12]
    3a14:	e7cb      	b.n	39ae <__smakebuf_r+0x1a>
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	00003795 	.word	0x00003795

00003a1c <malloc>:
    3a1c:	b510      	push	{r4, lr}
    3a1e:	4b03      	ldr	r3, [pc, #12]	; (3a2c <malloc+0x10>)
    3a20:	0001      	movs	r1, r0
    3a22:	6818      	ldr	r0, [r3, #0]
    3a24:	f000 f84e 	bl	3ac4 <_malloc_r>
    3a28:	bd10      	pop	{r4, pc}
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	20000004 	.word	0x20000004

00003a30 <_free_r>:
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	0005      	movs	r5, r0
    3a34:	2900      	cmp	r1, #0
    3a36:	d010      	beq.n	3a5a <_free_r+0x2a>
    3a38:	1f0c      	subs	r4, r1, #4
    3a3a:	6823      	ldr	r3, [r4, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	da00      	bge.n	3a42 <_free_r+0x12>
    3a40:	18e4      	adds	r4, r4, r3
    3a42:	0028      	movs	r0, r5
    3a44:	f000 fc2f 	bl	42a6 <__malloc_lock>
    3a48:	4a1d      	ldr	r2, [pc, #116]	; (3ac0 <_free_r+0x90>)
    3a4a:	6813      	ldr	r3, [r2, #0]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d105      	bne.n	3a5c <_free_r+0x2c>
    3a50:	6063      	str	r3, [r4, #4]
    3a52:	6014      	str	r4, [r2, #0]
    3a54:	0028      	movs	r0, r5
    3a56:	f000 fc27 	bl	42a8 <__malloc_unlock>
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	42a3      	cmp	r3, r4
    3a5e:	d909      	bls.n	3a74 <_free_r+0x44>
    3a60:	6821      	ldr	r1, [r4, #0]
    3a62:	1860      	adds	r0, r4, r1
    3a64:	4283      	cmp	r3, r0
    3a66:	d1f3      	bne.n	3a50 <_free_r+0x20>
    3a68:	6818      	ldr	r0, [r3, #0]
    3a6a:	685b      	ldr	r3, [r3, #4]
    3a6c:	1841      	adds	r1, r0, r1
    3a6e:	6021      	str	r1, [r4, #0]
    3a70:	e7ee      	b.n	3a50 <_free_r+0x20>
    3a72:	0013      	movs	r3, r2
    3a74:	685a      	ldr	r2, [r3, #4]
    3a76:	2a00      	cmp	r2, #0
    3a78:	d001      	beq.n	3a7e <_free_r+0x4e>
    3a7a:	42a2      	cmp	r2, r4
    3a7c:	d9f9      	bls.n	3a72 <_free_r+0x42>
    3a7e:	6819      	ldr	r1, [r3, #0]
    3a80:	1858      	adds	r0, r3, r1
    3a82:	42a0      	cmp	r0, r4
    3a84:	d10b      	bne.n	3a9e <_free_r+0x6e>
    3a86:	6820      	ldr	r0, [r4, #0]
    3a88:	1809      	adds	r1, r1, r0
    3a8a:	1858      	adds	r0, r3, r1
    3a8c:	6019      	str	r1, [r3, #0]
    3a8e:	4282      	cmp	r2, r0
    3a90:	d1e0      	bne.n	3a54 <_free_r+0x24>
    3a92:	6810      	ldr	r0, [r2, #0]
    3a94:	6852      	ldr	r2, [r2, #4]
    3a96:	1841      	adds	r1, r0, r1
    3a98:	6019      	str	r1, [r3, #0]
    3a9a:	605a      	str	r2, [r3, #4]
    3a9c:	e7da      	b.n	3a54 <_free_r+0x24>
    3a9e:	42a0      	cmp	r0, r4
    3aa0:	d902      	bls.n	3aa8 <_free_r+0x78>
    3aa2:	230c      	movs	r3, #12
    3aa4:	602b      	str	r3, [r5, #0]
    3aa6:	e7d5      	b.n	3a54 <_free_r+0x24>
    3aa8:	6821      	ldr	r1, [r4, #0]
    3aaa:	1860      	adds	r0, r4, r1
    3aac:	4282      	cmp	r2, r0
    3aae:	d103      	bne.n	3ab8 <_free_r+0x88>
    3ab0:	6810      	ldr	r0, [r2, #0]
    3ab2:	6852      	ldr	r2, [r2, #4]
    3ab4:	1841      	adds	r1, r0, r1
    3ab6:	6021      	str	r1, [r4, #0]
    3ab8:	6062      	str	r2, [r4, #4]
    3aba:	605c      	str	r4, [r3, #4]
    3abc:	e7ca      	b.n	3a54 <_free_r+0x24>
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	200000f8 	.word	0x200000f8

00003ac4 <_malloc_r>:
    3ac4:	2303      	movs	r3, #3
    3ac6:	b570      	push	{r4, r5, r6, lr}
    3ac8:	1ccd      	adds	r5, r1, #3
    3aca:	439d      	bics	r5, r3
    3acc:	3508      	adds	r5, #8
    3ace:	0006      	movs	r6, r0
    3ad0:	2d0c      	cmp	r5, #12
    3ad2:	d21e      	bcs.n	3b12 <_malloc_r+0x4e>
    3ad4:	250c      	movs	r5, #12
    3ad6:	42a9      	cmp	r1, r5
    3ad8:	d81d      	bhi.n	3b16 <_malloc_r+0x52>
    3ada:	0030      	movs	r0, r6
    3adc:	f000 fbe3 	bl	42a6 <__malloc_lock>
    3ae0:	4a25      	ldr	r2, [pc, #148]	; (3b78 <_malloc_r+0xb4>)
    3ae2:	6814      	ldr	r4, [r2, #0]
    3ae4:	0021      	movs	r1, r4
    3ae6:	2900      	cmp	r1, #0
    3ae8:	d119      	bne.n	3b1e <_malloc_r+0x5a>
    3aea:	4c24      	ldr	r4, [pc, #144]	; (3b7c <_malloc_r+0xb8>)
    3aec:	6823      	ldr	r3, [r4, #0]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d103      	bne.n	3afa <_malloc_r+0x36>
    3af2:	0030      	movs	r0, r6
    3af4:	f000 fb10 	bl	4118 <_sbrk_r>
    3af8:	6020      	str	r0, [r4, #0]
    3afa:	0029      	movs	r1, r5
    3afc:	0030      	movs	r0, r6
    3afe:	f000 fb0b 	bl	4118 <_sbrk_r>
    3b02:	1c43      	adds	r3, r0, #1
    3b04:	d12c      	bne.n	3b60 <_malloc_r+0x9c>
    3b06:	230c      	movs	r3, #12
    3b08:	0030      	movs	r0, r6
    3b0a:	6033      	str	r3, [r6, #0]
    3b0c:	f000 fbcc 	bl	42a8 <__malloc_unlock>
    3b10:	e003      	b.n	3b1a <_malloc_r+0x56>
    3b12:	2d00      	cmp	r5, #0
    3b14:	dadf      	bge.n	3ad6 <_malloc_r+0x12>
    3b16:	230c      	movs	r3, #12
    3b18:	6033      	str	r3, [r6, #0]
    3b1a:	2000      	movs	r0, #0
    3b1c:	bd70      	pop	{r4, r5, r6, pc}
    3b1e:	680b      	ldr	r3, [r1, #0]
    3b20:	1b5b      	subs	r3, r3, r5
    3b22:	d41a      	bmi.n	3b5a <_malloc_r+0x96>
    3b24:	2b0b      	cmp	r3, #11
    3b26:	d903      	bls.n	3b30 <_malloc_r+0x6c>
    3b28:	600b      	str	r3, [r1, #0]
    3b2a:	18cc      	adds	r4, r1, r3
    3b2c:	6025      	str	r5, [r4, #0]
    3b2e:	e003      	b.n	3b38 <_malloc_r+0x74>
    3b30:	428c      	cmp	r4, r1
    3b32:	d10e      	bne.n	3b52 <_malloc_r+0x8e>
    3b34:	6863      	ldr	r3, [r4, #4]
    3b36:	6013      	str	r3, [r2, #0]
    3b38:	0030      	movs	r0, r6
    3b3a:	f000 fbb5 	bl	42a8 <__malloc_unlock>
    3b3e:	0020      	movs	r0, r4
    3b40:	2207      	movs	r2, #7
    3b42:	300b      	adds	r0, #11
    3b44:	1d23      	adds	r3, r4, #4
    3b46:	4390      	bics	r0, r2
    3b48:	1ac3      	subs	r3, r0, r3
    3b4a:	d0e7      	beq.n	3b1c <_malloc_r+0x58>
    3b4c:	425a      	negs	r2, r3
    3b4e:	50e2      	str	r2, [r4, r3]
    3b50:	e7e4      	b.n	3b1c <_malloc_r+0x58>
    3b52:	684b      	ldr	r3, [r1, #4]
    3b54:	6063      	str	r3, [r4, #4]
    3b56:	000c      	movs	r4, r1
    3b58:	e7ee      	b.n	3b38 <_malloc_r+0x74>
    3b5a:	000c      	movs	r4, r1
    3b5c:	6849      	ldr	r1, [r1, #4]
    3b5e:	e7c2      	b.n	3ae6 <_malloc_r+0x22>
    3b60:	2303      	movs	r3, #3
    3b62:	1cc4      	adds	r4, r0, #3
    3b64:	439c      	bics	r4, r3
    3b66:	42a0      	cmp	r0, r4
    3b68:	d0e0      	beq.n	3b2c <_malloc_r+0x68>
    3b6a:	1a21      	subs	r1, r4, r0
    3b6c:	0030      	movs	r0, r6
    3b6e:	f000 fad3 	bl	4118 <_sbrk_r>
    3b72:	1c43      	adds	r3, r0, #1
    3b74:	d1da      	bne.n	3b2c <_malloc_r+0x68>
    3b76:	e7c6      	b.n	3b06 <_malloc_r+0x42>
    3b78:	200000f8 	.word	0x200000f8
    3b7c:	200000fc 	.word	0x200000fc

00003b80 <__sfputc_r>:
    3b80:	6893      	ldr	r3, [r2, #8]
    3b82:	b510      	push	{r4, lr}
    3b84:	3b01      	subs	r3, #1
    3b86:	6093      	str	r3, [r2, #8]
    3b88:	2b00      	cmp	r3, #0
    3b8a:	da05      	bge.n	3b98 <__sfputc_r+0x18>
    3b8c:	6994      	ldr	r4, [r2, #24]
    3b8e:	42a3      	cmp	r3, r4
    3b90:	db08      	blt.n	3ba4 <__sfputc_r+0x24>
    3b92:	b2cb      	uxtb	r3, r1
    3b94:	2b0a      	cmp	r3, #10
    3b96:	d005      	beq.n	3ba4 <__sfputc_r+0x24>
    3b98:	6813      	ldr	r3, [r2, #0]
    3b9a:	1c58      	adds	r0, r3, #1
    3b9c:	6010      	str	r0, [r2, #0]
    3b9e:	7019      	strb	r1, [r3, #0]
    3ba0:	b2c8      	uxtb	r0, r1
    3ba2:	bd10      	pop	{r4, pc}
    3ba4:	f7ff fc74 	bl	3490 <__swbuf_r>
    3ba8:	e7fb      	b.n	3ba2 <__sfputc_r+0x22>

00003baa <__sfputs_r>:
    3baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bac:	0006      	movs	r6, r0
    3bae:	000f      	movs	r7, r1
    3bb0:	0014      	movs	r4, r2
    3bb2:	18d5      	adds	r5, r2, r3
    3bb4:	42ac      	cmp	r4, r5
    3bb6:	d101      	bne.n	3bbc <__sfputs_r+0x12>
    3bb8:	2000      	movs	r0, #0
    3bba:	e007      	b.n	3bcc <__sfputs_r+0x22>
    3bbc:	7821      	ldrb	r1, [r4, #0]
    3bbe:	003a      	movs	r2, r7
    3bc0:	0030      	movs	r0, r6
    3bc2:	f7ff ffdd 	bl	3b80 <__sfputc_r>
    3bc6:	3401      	adds	r4, #1
    3bc8:	1c43      	adds	r3, r0, #1
    3bca:	d1f3      	bne.n	3bb4 <__sfputs_r+0xa>
    3bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003bd0 <_vfiprintf_r>:
    3bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bd2:	b09f      	sub	sp, #124	; 0x7c
    3bd4:	0006      	movs	r6, r0
    3bd6:	000f      	movs	r7, r1
    3bd8:	0014      	movs	r4, r2
    3bda:	9305      	str	r3, [sp, #20]
    3bdc:	2800      	cmp	r0, #0
    3bde:	d004      	beq.n	3bea <_vfiprintf_r+0x1a>
    3be0:	6983      	ldr	r3, [r0, #24]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d101      	bne.n	3bea <_vfiprintf_r+0x1a>
    3be6:	f7ff fe17 	bl	3818 <__sinit>
    3bea:	4b7f      	ldr	r3, [pc, #508]	; (3de8 <_vfiprintf_r+0x218>)
    3bec:	429f      	cmp	r7, r3
    3bee:	d15c      	bne.n	3caa <_vfiprintf_r+0xda>
    3bf0:	6877      	ldr	r7, [r6, #4]
    3bf2:	89bb      	ldrh	r3, [r7, #12]
    3bf4:	071b      	lsls	r3, r3, #28
    3bf6:	d562      	bpl.n	3cbe <_vfiprintf_r+0xee>
    3bf8:	693b      	ldr	r3, [r7, #16]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d05f      	beq.n	3cbe <_vfiprintf_r+0xee>
    3bfe:	2300      	movs	r3, #0
    3c00:	ad06      	add	r5, sp, #24
    3c02:	616b      	str	r3, [r5, #20]
    3c04:	3320      	adds	r3, #32
    3c06:	766b      	strb	r3, [r5, #25]
    3c08:	3310      	adds	r3, #16
    3c0a:	76ab      	strb	r3, [r5, #26]
    3c0c:	9402      	str	r4, [sp, #8]
    3c0e:	9c02      	ldr	r4, [sp, #8]
    3c10:	7823      	ldrb	r3, [r4, #0]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d15d      	bne.n	3cd2 <_vfiprintf_r+0x102>
    3c16:	9b02      	ldr	r3, [sp, #8]
    3c18:	1ae3      	subs	r3, r4, r3
    3c1a:	9304      	str	r3, [sp, #16]
    3c1c:	d00d      	beq.n	3c3a <_vfiprintf_r+0x6a>
    3c1e:	9b04      	ldr	r3, [sp, #16]
    3c20:	9a02      	ldr	r2, [sp, #8]
    3c22:	0039      	movs	r1, r7
    3c24:	0030      	movs	r0, r6
    3c26:	f7ff ffc0 	bl	3baa <__sfputs_r>
    3c2a:	1c43      	adds	r3, r0, #1
    3c2c:	d100      	bne.n	3c30 <_vfiprintf_r+0x60>
    3c2e:	e0cc      	b.n	3dca <_vfiprintf_r+0x1fa>
    3c30:	696a      	ldr	r2, [r5, #20]
    3c32:	9b04      	ldr	r3, [sp, #16]
    3c34:	4694      	mov	ip, r2
    3c36:	4463      	add	r3, ip
    3c38:	616b      	str	r3, [r5, #20]
    3c3a:	7823      	ldrb	r3, [r4, #0]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d100      	bne.n	3c42 <_vfiprintf_r+0x72>
    3c40:	e0c3      	b.n	3dca <_vfiprintf_r+0x1fa>
    3c42:	2201      	movs	r2, #1
    3c44:	2300      	movs	r3, #0
    3c46:	4252      	negs	r2, r2
    3c48:	606a      	str	r2, [r5, #4]
    3c4a:	a902      	add	r1, sp, #8
    3c4c:	3254      	adds	r2, #84	; 0x54
    3c4e:	1852      	adds	r2, r2, r1
    3c50:	3401      	adds	r4, #1
    3c52:	602b      	str	r3, [r5, #0]
    3c54:	60eb      	str	r3, [r5, #12]
    3c56:	60ab      	str	r3, [r5, #8]
    3c58:	7013      	strb	r3, [r2, #0]
    3c5a:	65ab      	str	r3, [r5, #88]	; 0x58
    3c5c:	7821      	ldrb	r1, [r4, #0]
    3c5e:	2205      	movs	r2, #5
    3c60:	4862      	ldr	r0, [pc, #392]	; (3dec <_vfiprintf_r+0x21c>)
    3c62:	f000 fb15 	bl	4290 <memchr>
    3c66:	1c63      	adds	r3, r4, #1
    3c68:	469c      	mov	ip, r3
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d135      	bne.n	3cda <_vfiprintf_r+0x10a>
    3c6e:	6829      	ldr	r1, [r5, #0]
    3c70:	06cb      	lsls	r3, r1, #27
    3c72:	d504      	bpl.n	3c7e <_vfiprintf_r+0xae>
    3c74:	2353      	movs	r3, #83	; 0x53
    3c76:	aa02      	add	r2, sp, #8
    3c78:	3020      	adds	r0, #32
    3c7a:	189b      	adds	r3, r3, r2
    3c7c:	7018      	strb	r0, [r3, #0]
    3c7e:	070b      	lsls	r3, r1, #28
    3c80:	d504      	bpl.n	3c8c <_vfiprintf_r+0xbc>
    3c82:	2353      	movs	r3, #83	; 0x53
    3c84:	202b      	movs	r0, #43	; 0x2b
    3c86:	aa02      	add	r2, sp, #8
    3c88:	189b      	adds	r3, r3, r2
    3c8a:	7018      	strb	r0, [r3, #0]
    3c8c:	7823      	ldrb	r3, [r4, #0]
    3c8e:	2b2a      	cmp	r3, #42	; 0x2a
    3c90:	d02c      	beq.n	3cec <_vfiprintf_r+0x11c>
    3c92:	2000      	movs	r0, #0
    3c94:	210a      	movs	r1, #10
    3c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c98:	7822      	ldrb	r2, [r4, #0]
    3c9a:	3a30      	subs	r2, #48	; 0x30
    3c9c:	2a09      	cmp	r2, #9
    3c9e:	d800      	bhi.n	3ca2 <_vfiprintf_r+0xd2>
    3ca0:	e06b      	b.n	3d7a <_vfiprintf_r+0x1aa>
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d02a      	beq.n	3cfc <_vfiprintf_r+0x12c>
    3ca6:	9309      	str	r3, [sp, #36]	; 0x24
    3ca8:	e028      	b.n	3cfc <_vfiprintf_r+0x12c>
    3caa:	4b51      	ldr	r3, [pc, #324]	; (3df0 <_vfiprintf_r+0x220>)
    3cac:	429f      	cmp	r7, r3
    3cae:	d101      	bne.n	3cb4 <_vfiprintf_r+0xe4>
    3cb0:	68b7      	ldr	r7, [r6, #8]
    3cb2:	e79e      	b.n	3bf2 <_vfiprintf_r+0x22>
    3cb4:	4b4f      	ldr	r3, [pc, #316]	; (3df4 <_vfiprintf_r+0x224>)
    3cb6:	429f      	cmp	r7, r3
    3cb8:	d19b      	bne.n	3bf2 <_vfiprintf_r+0x22>
    3cba:	68f7      	ldr	r7, [r6, #12]
    3cbc:	e799      	b.n	3bf2 <_vfiprintf_r+0x22>
    3cbe:	0039      	movs	r1, r7
    3cc0:	0030      	movs	r0, r6
    3cc2:	f7ff fc3b 	bl	353c <__swsetup_r>
    3cc6:	2800      	cmp	r0, #0
    3cc8:	d099      	beq.n	3bfe <_vfiprintf_r+0x2e>
    3cca:	2001      	movs	r0, #1
    3ccc:	4240      	negs	r0, r0
    3cce:	b01f      	add	sp, #124	; 0x7c
    3cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cd2:	2b25      	cmp	r3, #37	; 0x25
    3cd4:	d09f      	beq.n	3c16 <_vfiprintf_r+0x46>
    3cd6:	3401      	adds	r4, #1
    3cd8:	e79a      	b.n	3c10 <_vfiprintf_r+0x40>
    3cda:	4b44      	ldr	r3, [pc, #272]	; (3dec <_vfiprintf_r+0x21c>)
    3cdc:	6829      	ldr	r1, [r5, #0]
    3cde:	1ac0      	subs	r0, r0, r3
    3ce0:	2301      	movs	r3, #1
    3ce2:	4083      	lsls	r3, r0
    3ce4:	430b      	orrs	r3, r1
    3ce6:	602b      	str	r3, [r5, #0]
    3ce8:	4664      	mov	r4, ip
    3cea:	e7b7      	b.n	3c5c <_vfiprintf_r+0x8c>
    3cec:	9b05      	ldr	r3, [sp, #20]
    3cee:	1d18      	adds	r0, r3, #4
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	9005      	str	r0, [sp, #20]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	db3a      	blt.n	3d6e <_vfiprintf_r+0x19e>
    3cf8:	9309      	str	r3, [sp, #36]	; 0x24
    3cfa:	4664      	mov	r4, ip
    3cfc:	7823      	ldrb	r3, [r4, #0]
    3cfe:	2b2e      	cmp	r3, #46	; 0x2e
    3d00:	d10b      	bne.n	3d1a <_vfiprintf_r+0x14a>
    3d02:	7863      	ldrb	r3, [r4, #1]
    3d04:	1c62      	adds	r2, r4, #1
    3d06:	2b2a      	cmp	r3, #42	; 0x2a
    3d08:	d13f      	bne.n	3d8a <_vfiprintf_r+0x1ba>
    3d0a:	9b05      	ldr	r3, [sp, #20]
    3d0c:	3402      	adds	r4, #2
    3d0e:	1d1a      	adds	r2, r3, #4
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	9205      	str	r2, [sp, #20]
    3d14:	2b00      	cmp	r3, #0
    3d16:	db35      	blt.n	3d84 <_vfiprintf_r+0x1b4>
    3d18:	9307      	str	r3, [sp, #28]
    3d1a:	7821      	ldrb	r1, [r4, #0]
    3d1c:	2203      	movs	r2, #3
    3d1e:	4836      	ldr	r0, [pc, #216]	; (3df8 <_vfiprintf_r+0x228>)
    3d20:	f000 fab6 	bl	4290 <memchr>
    3d24:	2800      	cmp	r0, #0
    3d26:	d007      	beq.n	3d38 <_vfiprintf_r+0x168>
    3d28:	4b33      	ldr	r3, [pc, #204]	; (3df8 <_vfiprintf_r+0x228>)
    3d2a:	682a      	ldr	r2, [r5, #0]
    3d2c:	1ac0      	subs	r0, r0, r3
    3d2e:	2340      	movs	r3, #64	; 0x40
    3d30:	4083      	lsls	r3, r0
    3d32:	4313      	orrs	r3, r2
    3d34:	602b      	str	r3, [r5, #0]
    3d36:	3401      	adds	r4, #1
    3d38:	7821      	ldrb	r1, [r4, #0]
    3d3a:	1c63      	adds	r3, r4, #1
    3d3c:	2206      	movs	r2, #6
    3d3e:	482f      	ldr	r0, [pc, #188]	; (3dfc <_vfiprintf_r+0x22c>)
    3d40:	9302      	str	r3, [sp, #8]
    3d42:	7629      	strb	r1, [r5, #24]
    3d44:	f000 faa4 	bl	4290 <memchr>
    3d48:	2800      	cmp	r0, #0
    3d4a:	d044      	beq.n	3dd6 <_vfiprintf_r+0x206>
    3d4c:	4b2c      	ldr	r3, [pc, #176]	; (3e00 <_vfiprintf_r+0x230>)
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d12f      	bne.n	3db2 <_vfiprintf_r+0x1e2>
    3d52:	6829      	ldr	r1, [r5, #0]
    3d54:	9b05      	ldr	r3, [sp, #20]
    3d56:	2207      	movs	r2, #7
    3d58:	05c9      	lsls	r1, r1, #23
    3d5a:	d528      	bpl.n	3dae <_vfiprintf_r+0x1de>
    3d5c:	189b      	adds	r3, r3, r2
    3d5e:	4393      	bics	r3, r2
    3d60:	3308      	adds	r3, #8
    3d62:	9305      	str	r3, [sp, #20]
    3d64:	696b      	ldr	r3, [r5, #20]
    3d66:	9a03      	ldr	r2, [sp, #12]
    3d68:	189b      	adds	r3, r3, r2
    3d6a:	616b      	str	r3, [r5, #20]
    3d6c:	e74f      	b.n	3c0e <_vfiprintf_r+0x3e>
    3d6e:	425b      	negs	r3, r3
    3d70:	60eb      	str	r3, [r5, #12]
    3d72:	2302      	movs	r3, #2
    3d74:	430b      	orrs	r3, r1
    3d76:	602b      	str	r3, [r5, #0]
    3d78:	e7bf      	b.n	3cfa <_vfiprintf_r+0x12a>
    3d7a:	434b      	muls	r3, r1
    3d7c:	3401      	adds	r4, #1
    3d7e:	189b      	adds	r3, r3, r2
    3d80:	2001      	movs	r0, #1
    3d82:	e789      	b.n	3c98 <_vfiprintf_r+0xc8>
    3d84:	2301      	movs	r3, #1
    3d86:	425b      	negs	r3, r3
    3d88:	e7c6      	b.n	3d18 <_vfiprintf_r+0x148>
    3d8a:	2300      	movs	r3, #0
    3d8c:	0014      	movs	r4, r2
    3d8e:	200a      	movs	r0, #10
    3d90:	001a      	movs	r2, r3
    3d92:	606b      	str	r3, [r5, #4]
    3d94:	7821      	ldrb	r1, [r4, #0]
    3d96:	3930      	subs	r1, #48	; 0x30
    3d98:	2909      	cmp	r1, #9
    3d9a:	d903      	bls.n	3da4 <_vfiprintf_r+0x1d4>
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d0bc      	beq.n	3d1a <_vfiprintf_r+0x14a>
    3da0:	9207      	str	r2, [sp, #28]
    3da2:	e7ba      	b.n	3d1a <_vfiprintf_r+0x14a>
    3da4:	4342      	muls	r2, r0
    3da6:	3401      	adds	r4, #1
    3da8:	1852      	adds	r2, r2, r1
    3daa:	2301      	movs	r3, #1
    3dac:	e7f2      	b.n	3d94 <_vfiprintf_r+0x1c4>
    3dae:	3307      	adds	r3, #7
    3db0:	e7d5      	b.n	3d5e <_vfiprintf_r+0x18e>
    3db2:	ab05      	add	r3, sp, #20
    3db4:	9300      	str	r3, [sp, #0]
    3db6:	003a      	movs	r2, r7
    3db8:	4b12      	ldr	r3, [pc, #72]	; (3e04 <_vfiprintf_r+0x234>)
    3dba:	0029      	movs	r1, r5
    3dbc:	0030      	movs	r0, r6
    3dbe:	e000      	b.n	3dc2 <_vfiprintf_r+0x1f2>
    3dc0:	bf00      	nop
    3dc2:	9003      	str	r0, [sp, #12]
    3dc4:	9b03      	ldr	r3, [sp, #12]
    3dc6:	3301      	adds	r3, #1
    3dc8:	d1cc      	bne.n	3d64 <_vfiprintf_r+0x194>
    3dca:	89bb      	ldrh	r3, [r7, #12]
    3dcc:	065b      	lsls	r3, r3, #25
    3dce:	d500      	bpl.n	3dd2 <_vfiprintf_r+0x202>
    3dd0:	e77b      	b.n	3cca <_vfiprintf_r+0xfa>
    3dd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3dd4:	e77b      	b.n	3cce <_vfiprintf_r+0xfe>
    3dd6:	ab05      	add	r3, sp, #20
    3dd8:	9300      	str	r3, [sp, #0]
    3dda:	003a      	movs	r2, r7
    3ddc:	4b09      	ldr	r3, [pc, #36]	; (3e04 <_vfiprintf_r+0x234>)
    3dde:	0029      	movs	r1, r5
    3de0:	0030      	movs	r0, r6
    3de2:	f000 f87f 	bl	3ee4 <_printf_i>
    3de6:	e7ec      	b.n	3dc2 <_vfiprintf_r+0x1f2>
    3de8:	0000440c 	.word	0x0000440c
    3dec:	0000444c 	.word	0x0000444c
    3df0:	0000442c 	.word	0x0000442c
    3df4:	000043ec 	.word	0x000043ec
    3df8:	00004452 	.word	0x00004452
    3dfc:	00004456 	.word	0x00004456
    3e00:	00000000 	.word	0x00000000
    3e04:	00003bab 	.word	0x00003bab

00003e08 <_printf_common>:
    3e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e0a:	0015      	movs	r5, r2
    3e0c:	9301      	str	r3, [sp, #4]
    3e0e:	688a      	ldr	r2, [r1, #8]
    3e10:	690b      	ldr	r3, [r1, #16]
    3e12:	9000      	str	r0, [sp, #0]
    3e14:	000c      	movs	r4, r1
    3e16:	4293      	cmp	r3, r2
    3e18:	da00      	bge.n	3e1c <_printf_common+0x14>
    3e1a:	0013      	movs	r3, r2
    3e1c:	0022      	movs	r2, r4
    3e1e:	602b      	str	r3, [r5, #0]
    3e20:	3243      	adds	r2, #67	; 0x43
    3e22:	7812      	ldrb	r2, [r2, #0]
    3e24:	2a00      	cmp	r2, #0
    3e26:	d001      	beq.n	3e2c <_printf_common+0x24>
    3e28:	3301      	adds	r3, #1
    3e2a:	602b      	str	r3, [r5, #0]
    3e2c:	6823      	ldr	r3, [r4, #0]
    3e2e:	069b      	lsls	r3, r3, #26
    3e30:	d502      	bpl.n	3e38 <_printf_common+0x30>
    3e32:	682b      	ldr	r3, [r5, #0]
    3e34:	3302      	adds	r3, #2
    3e36:	602b      	str	r3, [r5, #0]
    3e38:	2706      	movs	r7, #6
    3e3a:	6823      	ldr	r3, [r4, #0]
    3e3c:	401f      	ands	r7, r3
    3e3e:	d027      	beq.n	3e90 <_printf_common+0x88>
    3e40:	0023      	movs	r3, r4
    3e42:	3343      	adds	r3, #67	; 0x43
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	1e5a      	subs	r2, r3, #1
    3e48:	4193      	sbcs	r3, r2
    3e4a:	6822      	ldr	r2, [r4, #0]
    3e4c:	0692      	lsls	r2, r2, #26
    3e4e:	d430      	bmi.n	3eb2 <_printf_common+0xaa>
    3e50:	0022      	movs	r2, r4
    3e52:	9901      	ldr	r1, [sp, #4]
    3e54:	3243      	adds	r2, #67	; 0x43
    3e56:	9800      	ldr	r0, [sp, #0]
    3e58:	9e08      	ldr	r6, [sp, #32]
    3e5a:	47b0      	blx	r6
    3e5c:	1c43      	adds	r3, r0, #1
    3e5e:	d025      	beq.n	3eac <_printf_common+0xa4>
    3e60:	2306      	movs	r3, #6
    3e62:	6820      	ldr	r0, [r4, #0]
    3e64:	682a      	ldr	r2, [r5, #0]
    3e66:	68e1      	ldr	r1, [r4, #12]
    3e68:	4003      	ands	r3, r0
    3e6a:	2500      	movs	r5, #0
    3e6c:	2b04      	cmp	r3, #4
    3e6e:	d103      	bne.n	3e78 <_printf_common+0x70>
    3e70:	1a8d      	subs	r5, r1, r2
    3e72:	43eb      	mvns	r3, r5
    3e74:	17db      	asrs	r3, r3, #31
    3e76:	401d      	ands	r5, r3
    3e78:	68a3      	ldr	r3, [r4, #8]
    3e7a:	6922      	ldr	r2, [r4, #16]
    3e7c:	4293      	cmp	r3, r2
    3e7e:	dd01      	ble.n	3e84 <_printf_common+0x7c>
    3e80:	1a9b      	subs	r3, r3, r2
    3e82:	18ed      	adds	r5, r5, r3
    3e84:	2700      	movs	r7, #0
    3e86:	42bd      	cmp	r5, r7
    3e88:	d120      	bne.n	3ecc <_printf_common+0xc4>
    3e8a:	2000      	movs	r0, #0
    3e8c:	e010      	b.n	3eb0 <_printf_common+0xa8>
    3e8e:	3701      	adds	r7, #1
    3e90:	68e3      	ldr	r3, [r4, #12]
    3e92:	682a      	ldr	r2, [r5, #0]
    3e94:	1a9b      	subs	r3, r3, r2
    3e96:	429f      	cmp	r7, r3
    3e98:	dad2      	bge.n	3e40 <_printf_common+0x38>
    3e9a:	0022      	movs	r2, r4
    3e9c:	2301      	movs	r3, #1
    3e9e:	3219      	adds	r2, #25
    3ea0:	9901      	ldr	r1, [sp, #4]
    3ea2:	9800      	ldr	r0, [sp, #0]
    3ea4:	9e08      	ldr	r6, [sp, #32]
    3ea6:	47b0      	blx	r6
    3ea8:	1c43      	adds	r3, r0, #1
    3eaa:	d1f0      	bne.n	3e8e <_printf_common+0x86>
    3eac:	2001      	movs	r0, #1
    3eae:	4240      	negs	r0, r0
    3eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3eb2:	2030      	movs	r0, #48	; 0x30
    3eb4:	18e1      	adds	r1, r4, r3
    3eb6:	3143      	adds	r1, #67	; 0x43
    3eb8:	7008      	strb	r0, [r1, #0]
    3eba:	0021      	movs	r1, r4
    3ebc:	1c5a      	adds	r2, r3, #1
    3ebe:	3145      	adds	r1, #69	; 0x45
    3ec0:	7809      	ldrb	r1, [r1, #0]
    3ec2:	18a2      	adds	r2, r4, r2
    3ec4:	3243      	adds	r2, #67	; 0x43
    3ec6:	3302      	adds	r3, #2
    3ec8:	7011      	strb	r1, [r2, #0]
    3eca:	e7c1      	b.n	3e50 <_printf_common+0x48>
    3ecc:	0022      	movs	r2, r4
    3ece:	2301      	movs	r3, #1
    3ed0:	321a      	adds	r2, #26
    3ed2:	9901      	ldr	r1, [sp, #4]
    3ed4:	9800      	ldr	r0, [sp, #0]
    3ed6:	9e08      	ldr	r6, [sp, #32]
    3ed8:	47b0      	blx	r6
    3eda:	1c43      	adds	r3, r0, #1
    3edc:	d0e6      	beq.n	3eac <_printf_common+0xa4>
    3ede:	3701      	adds	r7, #1
    3ee0:	e7d1      	b.n	3e86 <_printf_common+0x7e>
	...

00003ee4 <_printf_i>:
    3ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ee6:	b08b      	sub	sp, #44	; 0x2c
    3ee8:	9206      	str	r2, [sp, #24]
    3eea:	000a      	movs	r2, r1
    3eec:	3243      	adds	r2, #67	; 0x43
    3eee:	9307      	str	r3, [sp, #28]
    3ef0:	9005      	str	r0, [sp, #20]
    3ef2:	9204      	str	r2, [sp, #16]
    3ef4:	7e0a      	ldrb	r2, [r1, #24]
    3ef6:	000c      	movs	r4, r1
    3ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3efa:	2a6e      	cmp	r2, #110	; 0x6e
    3efc:	d100      	bne.n	3f00 <_printf_i+0x1c>
    3efe:	e08f      	b.n	4020 <_printf_i+0x13c>
    3f00:	d817      	bhi.n	3f32 <_printf_i+0x4e>
    3f02:	2a63      	cmp	r2, #99	; 0x63
    3f04:	d02c      	beq.n	3f60 <_printf_i+0x7c>
    3f06:	d808      	bhi.n	3f1a <_printf_i+0x36>
    3f08:	2a00      	cmp	r2, #0
    3f0a:	d100      	bne.n	3f0e <_printf_i+0x2a>
    3f0c:	e099      	b.n	4042 <_printf_i+0x15e>
    3f0e:	2a58      	cmp	r2, #88	; 0x58
    3f10:	d054      	beq.n	3fbc <_printf_i+0xd8>
    3f12:	0026      	movs	r6, r4
    3f14:	3642      	adds	r6, #66	; 0x42
    3f16:	7032      	strb	r2, [r6, #0]
    3f18:	e029      	b.n	3f6e <_printf_i+0x8a>
    3f1a:	2a64      	cmp	r2, #100	; 0x64
    3f1c:	d001      	beq.n	3f22 <_printf_i+0x3e>
    3f1e:	2a69      	cmp	r2, #105	; 0x69
    3f20:	d1f7      	bne.n	3f12 <_printf_i+0x2e>
    3f22:	6821      	ldr	r1, [r4, #0]
    3f24:	681a      	ldr	r2, [r3, #0]
    3f26:	0608      	lsls	r0, r1, #24
    3f28:	d523      	bpl.n	3f72 <_printf_i+0x8e>
    3f2a:	1d11      	adds	r1, r2, #4
    3f2c:	6019      	str	r1, [r3, #0]
    3f2e:	6815      	ldr	r5, [r2, #0]
    3f30:	e025      	b.n	3f7e <_printf_i+0x9a>
    3f32:	2a73      	cmp	r2, #115	; 0x73
    3f34:	d100      	bne.n	3f38 <_printf_i+0x54>
    3f36:	e088      	b.n	404a <_printf_i+0x166>
    3f38:	d808      	bhi.n	3f4c <_printf_i+0x68>
    3f3a:	2a6f      	cmp	r2, #111	; 0x6f
    3f3c:	d029      	beq.n	3f92 <_printf_i+0xae>
    3f3e:	2a70      	cmp	r2, #112	; 0x70
    3f40:	d1e7      	bne.n	3f12 <_printf_i+0x2e>
    3f42:	2220      	movs	r2, #32
    3f44:	6809      	ldr	r1, [r1, #0]
    3f46:	430a      	orrs	r2, r1
    3f48:	6022      	str	r2, [r4, #0]
    3f4a:	e003      	b.n	3f54 <_printf_i+0x70>
    3f4c:	2a75      	cmp	r2, #117	; 0x75
    3f4e:	d020      	beq.n	3f92 <_printf_i+0xae>
    3f50:	2a78      	cmp	r2, #120	; 0x78
    3f52:	d1de      	bne.n	3f12 <_printf_i+0x2e>
    3f54:	0022      	movs	r2, r4
    3f56:	2178      	movs	r1, #120	; 0x78
    3f58:	3245      	adds	r2, #69	; 0x45
    3f5a:	7011      	strb	r1, [r2, #0]
    3f5c:	4a6c      	ldr	r2, [pc, #432]	; (4110 <_printf_i+0x22c>)
    3f5e:	e030      	b.n	3fc2 <_printf_i+0xde>
    3f60:	000e      	movs	r6, r1
    3f62:	681a      	ldr	r2, [r3, #0]
    3f64:	3642      	adds	r6, #66	; 0x42
    3f66:	1d11      	adds	r1, r2, #4
    3f68:	6019      	str	r1, [r3, #0]
    3f6a:	6813      	ldr	r3, [r2, #0]
    3f6c:	7033      	strb	r3, [r6, #0]
    3f6e:	2301      	movs	r3, #1
    3f70:	e079      	b.n	4066 <_printf_i+0x182>
    3f72:	0649      	lsls	r1, r1, #25
    3f74:	d5d9      	bpl.n	3f2a <_printf_i+0x46>
    3f76:	1d11      	adds	r1, r2, #4
    3f78:	6019      	str	r1, [r3, #0]
    3f7a:	2300      	movs	r3, #0
    3f7c:	5ed5      	ldrsh	r5, [r2, r3]
    3f7e:	2d00      	cmp	r5, #0
    3f80:	da03      	bge.n	3f8a <_printf_i+0xa6>
    3f82:	232d      	movs	r3, #45	; 0x2d
    3f84:	9a04      	ldr	r2, [sp, #16]
    3f86:	426d      	negs	r5, r5
    3f88:	7013      	strb	r3, [r2, #0]
    3f8a:	4b62      	ldr	r3, [pc, #392]	; (4114 <_printf_i+0x230>)
    3f8c:	270a      	movs	r7, #10
    3f8e:	9303      	str	r3, [sp, #12]
    3f90:	e02f      	b.n	3ff2 <_printf_i+0x10e>
    3f92:	6820      	ldr	r0, [r4, #0]
    3f94:	6819      	ldr	r1, [r3, #0]
    3f96:	0605      	lsls	r5, r0, #24
    3f98:	d503      	bpl.n	3fa2 <_printf_i+0xbe>
    3f9a:	1d08      	adds	r0, r1, #4
    3f9c:	6018      	str	r0, [r3, #0]
    3f9e:	680d      	ldr	r5, [r1, #0]
    3fa0:	e005      	b.n	3fae <_printf_i+0xca>
    3fa2:	0640      	lsls	r0, r0, #25
    3fa4:	d5f9      	bpl.n	3f9a <_printf_i+0xb6>
    3fa6:	680d      	ldr	r5, [r1, #0]
    3fa8:	1d08      	adds	r0, r1, #4
    3faa:	6018      	str	r0, [r3, #0]
    3fac:	b2ad      	uxth	r5, r5
    3fae:	4b59      	ldr	r3, [pc, #356]	; (4114 <_printf_i+0x230>)
    3fb0:	2708      	movs	r7, #8
    3fb2:	9303      	str	r3, [sp, #12]
    3fb4:	2a6f      	cmp	r2, #111	; 0x6f
    3fb6:	d018      	beq.n	3fea <_printf_i+0x106>
    3fb8:	270a      	movs	r7, #10
    3fba:	e016      	b.n	3fea <_printf_i+0x106>
    3fbc:	3145      	adds	r1, #69	; 0x45
    3fbe:	700a      	strb	r2, [r1, #0]
    3fc0:	4a54      	ldr	r2, [pc, #336]	; (4114 <_printf_i+0x230>)
    3fc2:	9203      	str	r2, [sp, #12]
    3fc4:	681a      	ldr	r2, [r3, #0]
    3fc6:	6821      	ldr	r1, [r4, #0]
    3fc8:	1d10      	adds	r0, r2, #4
    3fca:	6018      	str	r0, [r3, #0]
    3fcc:	6815      	ldr	r5, [r2, #0]
    3fce:	0608      	lsls	r0, r1, #24
    3fd0:	d522      	bpl.n	4018 <_printf_i+0x134>
    3fd2:	07cb      	lsls	r3, r1, #31
    3fd4:	d502      	bpl.n	3fdc <_printf_i+0xf8>
    3fd6:	2320      	movs	r3, #32
    3fd8:	4319      	orrs	r1, r3
    3fda:	6021      	str	r1, [r4, #0]
    3fdc:	2710      	movs	r7, #16
    3fde:	2d00      	cmp	r5, #0
    3fe0:	d103      	bne.n	3fea <_printf_i+0x106>
    3fe2:	2320      	movs	r3, #32
    3fe4:	6822      	ldr	r2, [r4, #0]
    3fe6:	439a      	bics	r2, r3
    3fe8:	6022      	str	r2, [r4, #0]
    3fea:	0023      	movs	r3, r4
    3fec:	2200      	movs	r2, #0
    3fee:	3343      	adds	r3, #67	; 0x43
    3ff0:	701a      	strb	r2, [r3, #0]
    3ff2:	6863      	ldr	r3, [r4, #4]
    3ff4:	60a3      	str	r3, [r4, #8]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	db5c      	blt.n	40b4 <_printf_i+0x1d0>
    3ffa:	2204      	movs	r2, #4
    3ffc:	6821      	ldr	r1, [r4, #0]
    3ffe:	4391      	bics	r1, r2
    4000:	6021      	str	r1, [r4, #0]
    4002:	2d00      	cmp	r5, #0
    4004:	d158      	bne.n	40b8 <_printf_i+0x1d4>
    4006:	9e04      	ldr	r6, [sp, #16]
    4008:	2b00      	cmp	r3, #0
    400a:	d064      	beq.n	40d6 <_printf_i+0x1f2>
    400c:	0026      	movs	r6, r4
    400e:	9b03      	ldr	r3, [sp, #12]
    4010:	3642      	adds	r6, #66	; 0x42
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	7033      	strb	r3, [r6, #0]
    4016:	e05e      	b.n	40d6 <_printf_i+0x1f2>
    4018:	0648      	lsls	r0, r1, #25
    401a:	d5da      	bpl.n	3fd2 <_printf_i+0xee>
    401c:	b2ad      	uxth	r5, r5
    401e:	e7d8      	b.n	3fd2 <_printf_i+0xee>
    4020:	6809      	ldr	r1, [r1, #0]
    4022:	681a      	ldr	r2, [r3, #0]
    4024:	0608      	lsls	r0, r1, #24
    4026:	d505      	bpl.n	4034 <_printf_i+0x150>
    4028:	1d11      	adds	r1, r2, #4
    402a:	6019      	str	r1, [r3, #0]
    402c:	6813      	ldr	r3, [r2, #0]
    402e:	6962      	ldr	r2, [r4, #20]
    4030:	601a      	str	r2, [r3, #0]
    4032:	e006      	b.n	4042 <_printf_i+0x15e>
    4034:	0649      	lsls	r1, r1, #25
    4036:	d5f7      	bpl.n	4028 <_printf_i+0x144>
    4038:	1d11      	adds	r1, r2, #4
    403a:	6019      	str	r1, [r3, #0]
    403c:	6813      	ldr	r3, [r2, #0]
    403e:	8aa2      	ldrh	r2, [r4, #20]
    4040:	801a      	strh	r2, [r3, #0]
    4042:	2300      	movs	r3, #0
    4044:	9e04      	ldr	r6, [sp, #16]
    4046:	6123      	str	r3, [r4, #16]
    4048:	e054      	b.n	40f4 <_printf_i+0x210>
    404a:	681a      	ldr	r2, [r3, #0]
    404c:	1d11      	adds	r1, r2, #4
    404e:	6019      	str	r1, [r3, #0]
    4050:	6816      	ldr	r6, [r2, #0]
    4052:	2100      	movs	r1, #0
    4054:	6862      	ldr	r2, [r4, #4]
    4056:	0030      	movs	r0, r6
    4058:	f000 f91a 	bl	4290 <memchr>
    405c:	2800      	cmp	r0, #0
    405e:	d001      	beq.n	4064 <_printf_i+0x180>
    4060:	1b80      	subs	r0, r0, r6
    4062:	6060      	str	r0, [r4, #4]
    4064:	6863      	ldr	r3, [r4, #4]
    4066:	6123      	str	r3, [r4, #16]
    4068:	2300      	movs	r3, #0
    406a:	9a04      	ldr	r2, [sp, #16]
    406c:	7013      	strb	r3, [r2, #0]
    406e:	e041      	b.n	40f4 <_printf_i+0x210>
    4070:	6923      	ldr	r3, [r4, #16]
    4072:	0032      	movs	r2, r6
    4074:	9906      	ldr	r1, [sp, #24]
    4076:	9805      	ldr	r0, [sp, #20]
    4078:	9d07      	ldr	r5, [sp, #28]
    407a:	47a8      	blx	r5
    407c:	1c43      	adds	r3, r0, #1
    407e:	d043      	beq.n	4108 <_printf_i+0x224>
    4080:	6823      	ldr	r3, [r4, #0]
    4082:	2500      	movs	r5, #0
    4084:	079b      	lsls	r3, r3, #30
    4086:	d40f      	bmi.n	40a8 <_printf_i+0x1c4>
    4088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    408a:	68e0      	ldr	r0, [r4, #12]
    408c:	4298      	cmp	r0, r3
    408e:	da3d      	bge.n	410c <_printf_i+0x228>
    4090:	0018      	movs	r0, r3
    4092:	e03b      	b.n	410c <_printf_i+0x228>
    4094:	0022      	movs	r2, r4
    4096:	2301      	movs	r3, #1
    4098:	3219      	adds	r2, #25
    409a:	9906      	ldr	r1, [sp, #24]
    409c:	9805      	ldr	r0, [sp, #20]
    409e:	9e07      	ldr	r6, [sp, #28]
    40a0:	47b0      	blx	r6
    40a2:	1c43      	adds	r3, r0, #1
    40a4:	d030      	beq.n	4108 <_printf_i+0x224>
    40a6:	3501      	adds	r5, #1
    40a8:	68e3      	ldr	r3, [r4, #12]
    40aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40ac:	1a9b      	subs	r3, r3, r2
    40ae:	429d      	cmp	r5, r3
    40b0:	dbf0      	blt.n	4094 <_printf_i+0x1b0>
    40b2:	e7e9      	b.n	4088 <_printf_i+0x1a4>
    40b4:	2d00      	cmp	r5, #0
    40b6:	d0a9      	beq.n	400c <_printf_i+0x128>
    40b8:	9e04      	ldr	r6, [sp, #16]
    40ba:	0028      	movs	r0, r5
    40bc:	0039      	movs	r1, r7
    40be:	f7ff f851 	bl	3164 <__aeabi_uidivmod>
    40c2:	9b03      	ldr	r3, [sp, #12]
    40c4:	3e01      	subs	r6, #1
    40c6:	5c5b      	ldrb	r3, [r3, r1]
    40c8:	0028      	movs	r0, r5
    40ca:	7033      	strb	r3, [r6, #0]
    40cc:	0039      	movs	r1, r7
    40ce:	f7fe ffc3 	bl	3058 <__udivsi3>
    40d2:	1e05      	subs	r5, r0, #0
    40d4:	d1f1      	bne.n	40ba <_printf_i+0x1d6>
    40d6:	2f08      	cmp	r7, #8
    40d8:	d109      	bne.n	40ee <_printf_i+0x20a>
    40da:	6823      	ldr	r3, [r4, #0]
    40dc:	07db      	lsls	r3, r3, #31
    40de:	d506      	bpl.n	40ee <_printf_i+0x20a>
    40e0:	6863      	ldr	r3, [r4, #4]
    40e2:	6922      	ldr	r2, [r4, #16]
    40e4:	4293      	cmp	r3, r2
    40e6:	dc02      	bgt.n	40ee <_printf_i+0x20a>
    40e8:	2330      	movs	r3, #48	; 0x30
    40ea:	3e01      	subs	r6, #1
    40ec:	7033      	strb	r3, [r6, #0]
    40ee:	9b04      	ldr	r3, [sp, #16]
    40f0:	1b9b      	subs	r3, r3, r6
    40f2:	6123      	str	r3, [r4, #16]
    40f4:	9b07      	ldr	r3, [sp, #28]
    40f6:	aa09      	add	r2, sp, #36	; 0x24
    40f8:	9300      	str	r3, [sp, #0]
    40fa:	0021      	movs	r1, r4
    40fc:	9b06      	ldr	r3, [sp, #24]
    40fe:	9805      	ldr	r0, [sp, #20]
    4100:	f7ff fe82 	bl	3e08 <_printf_common>
    4104:	1c43      	adds	r3, r0, #1
    4106:	d1b3      	bne.n	4070 <_printf_i+0x18c>
    4108:	2001      	movs	r0, #1
    410a:	4240      	negs	r0, r0
    410c:	b00b      	add	sp, #44	; 0x2c
    410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4110:	0000446e 	.word	0x0000446e
    4114:	0000445d 	.word	0x0000445d

00004118 <_sbrk_r>:
    4118:	2300      	movs	r3, #0
    411a:	b570      	push	{r4, r5, r6, lr}
    411c:	4c06      	ldr	r4, [pc, #24]	; (4138 <_sbrk_r+0x20>)
    411e:	0005      	movs	r5, r0
    4120:	0008      	movs	r0, r1
    4122:	6023      	str	r3, [r4, #0]
    4124:	f7fe fda4 	bl	2c70 <_sbrk>
    4128:	1c43      	adds	r3, r0, #1
    412a:	d103      	bne.n	4134 <_sbrk_r+0x1c>
    412c:	6823      	ldr	r3, [r4, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d000      	beq.n	4134 <_sbrk_r+0x1c>
    4132:	602b      	str	r3, [r5, #0]
    4134:	bd70      	pop	{r4, r5, r6, pc}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	2000016c 	.word	0x2000016c

0000413c <__sread>:
    413c:	b570      	push	{r4, r5, r6, lr}
    413e:	000c      	movs	r4, r1
    4140:	250e      	movs	r5, #14
    4142:	5f49      	ldrsh	r1, [r1, r5]
    4144:	f000 f8b2 	bl	42ac <_read_r>
    4148:	2800      	cmp	r0, #0
    414a:	db03      	blt.n	4154 <__sread+0x18>
    414c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    414e:	181b      	adds	r3, r3, r0
    4150:	6563      	str	r3, [r4, #84]	; 0x54
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	89a3      	ldrh	r3, [r4, #12]
    4156:	4a02      	ldr	r2, [pc, #8]	; (4160 <__sread+0x24>)
    4158:	4013      	ands	r3, r2
    415a:	81a3      	strh	r3, [r4, #12]
    415c:	e7f9      	b.n	4152 <__sread+0x16>
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	ffffefff 	.word	0xffffefff

00004164 <__swrite>:
    4164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4166:	001f      	movs	r7, r3
    4168:	898b      	ldrh	r3, [r1, #12]
    416a:	0005      	movs	r5, r0
    416c:	000c      	movs	r4, r1
    416e:	0016      	movs	r6, r2
    4170:	05db      	lsls	r3, r3, #23
    4172:	d505      	bpl.n	4180 <__swrite+0x1c>
    4174:	230e      	movs	r3, #14
    4176:	5ec9      	ldrsh	r1, [r1, r3]
    4178:	2200      	movs	r2, #0
    417a:	2302      	movs	r3, #2
    417c:	f000 f874 	bl	4268 <_lseek_r>
    4180:	89a3      	ldrh	r3, [r4, #12]
    4182:	4a05      	ldr	r2, [pc, #20]	; (4198 <__swrite+0x34>)
    4184:	0028      	movs	r0, r5
    4186:	4013      	ands	r3, r2
    4188:	81a3      	strh	r3, [r4, #12]
    418a:	0032      	movs	r2, r6
    418c:	230e      	movs	r3, #14
    418e:	5ee1      	ldrsh	r1, [r4, r3]
    4190:	003b      	movs	r3, r7
    4192:	f000 f81f 	bl	41d4 <_write_r>
    4196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4198:	ffffefff 	.word	0xffffefff

0000419c <__sseek>:
    419c:	b570      	push	{r4, r5, r6, lr}
    419e:	000c      	movs	r4, r1
    41a0:	250e      	movs	r5, #14
    41a2:	5f49      	ldrsh	r1, [r1, r5]
    41a4:	f000 f860 	bl	4268 <_lseek_r>
    41a8:	89a3      	ldrh	r3, [r4, #12]
    41aa:	1c42      	adds	r2, r0, #1
    41ac:	d103      	bne.n	41b6 <__sseek+0x1a>
    41ae:	4a05      	ldr	r2, [pc, #20]	; (41c4 <__sseek+0x28>)
    41b0:	4013      	ands	r3, r2
    41b2:	81a3      	strh	r3, [r4, #12]
    41b4:	bd70      	pop	{r4, r5, r6, pc}
    41b6:	2280      	movs	r2, #128	; 0x80
    41b8:	0152      	lsls	r2, r2, #5
    41ba:	4313      	orrs	r3, r2
    41bc:	81a3      	strh	r3, [r4, #12]
    41be:	6560      	str	r0, [r4, #84]	; 0x54
    41c0:	e7f8      	b.n	41b4 <__sseek+0x18>
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	ffffefff 	.word	0xffffefff

000041c8 <__sclose>:
    41c8:	b510      	push	{r4, lr}
    41ca:	230e      	movs	r3, #14
    41cc:	5ec9      	ldrsh	r1, [r1, r3]
    41ce:	f000 f815 	bl	41fc <_close_r>
    41d2:	bd10      	pop	{r4, pc}

000041d4 <_write_r>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	0005      	movs	r5, r0
    41d8:	0008      	movs	r0, r1
    41da:	0011      	movs	r1, r2
    41dc:	2200      	movs	r2, #0
    41de:	4c06      	ldr	r4, [pc, #24]	; (41f8 <_write_r+0x24>)
    41e0:	6022      	str	r2, [r4, #0]
    41e2:	001a      	movs	r2, r3
    41e4:	f7fe fd0e 	bl	2c04 <_write>
    41e8:	1c43      	adds	r3, r0, #1
    41ea:	d103      	bne.n	41f4 <_write_r+0x20>
    41ec:	6823      	ldr	r3, [r4, #0]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d000      	beq.n	41f4 <_write_r+0x20>
    41f2:	602b      	str	r3, [r5, #0]
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	2000016c 	.word	0x2000016c

000041fc <_close_r>:
    41fc:	2300      	movs	r3, #0
    41fe:	b570      	push	{r4, r5, r6, lr}
    4200:	4c06      	ldr	r4, [pc, #24]	; (421c <_close_r+0x20>)
    4202:	0005      	movs	r5, r0
    4204:	0008      	movs	r0, r1
    4206:	6023      	str	r3, [r4, #0]
    4208:	f7fe fd50 	bl	2cac <_close>
    420c:	1c43      	adds	r3, r0, #1
    420e:	d103      	bne.n	4218 <_close_r+0x1c>
    4210:	6823      	ldr	r3, [r4, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d000      	beq.n	4218 <_close_r+0x1c>
    4216:	602b      	str	r3, [r5, #0]
    4218:	bd70      	pop	{r4, r5, r6, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	2000016c 	.word	0x2000016c

00004220 <_fstat_r>:
    4220:	2300      	movs	r3, #0
    4222:	b570      	push	{r4, r5, r6, lr}
    4224:	4c06      	ldr	r4, [pc, #24]	; (4240 <_fstat_r+0x20>)
    4226:	0005      	movs	r5, r0
    4228:	0008      	movs	r0, r1
    422a:	0011      	movs	r1, r2
    422c:	6023      	str	r3, [r4, #0]
    422e:	f7fe fd47 	bl	2cc0 <_fstat>
    4232:	1c43      	adds	r3, r0, #1
    4234:	d103      	bne.n	423e <_fstat_r+0x1e>
    4236:	6823      	ldr	r3, [r4, #0]
    4238:	2b00      	cmp	r3, #0
    423a:	d000      	beq.n	423e <_fstat_r+0x1e>
    423c:	602b      	str	r3, [r5, #0]
    423e:	bd70      	pop	{r4, r5, r6, pc}
    4240:	2000016c 	.word	0x2000016c

00004244 <_isatty_r>:
    4244:	2300      	movs	r3, #0
    4246:	b570      	push	{r4, r5, r6, lr}
    4248:	4c06      	ldr	r4, [pc, #24]	; (4264 <_isatty_r+0x20>)
    424a:	0005      	movs	r5, r0
    424c:	0008      	movs	r0, r1
    424e:	6023      	str	r3, [r4, #0]
    4250:	f7fe fd44 	bl	2cdc <_isatty>
    4254:	1c43      	adds	r3, r0, #1
    4256:	d103      	bne.n	4260 <_isatty_r+0x1c>
    4258:	6823      	ldr	r3, [r4, #0]
    425a:	2b00      	cmp	r3, #0
    425c:	d000      	beq.n	4260 <_isatty_r+0x1c>
    425e:	602b      	str	r3, [r5, #0]
    4260:	bd70      	pop	{r4, r5, r6, pc}
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	2000016c 	.word	0x2000016c

00004268 <_lseek_r>:
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	0005      	movs	r5, r0
    426c:	0008      	movs	r0, r1
    426e:	0011      	movs	r1, r2
    4270:	2200      	movs	r2, #0
    4272:	4c06      	ldr	r4, [pc, #24]	; (428c <_lseek_r+0x24>)
    4274:	6022      	str	r2, [r4, #0]
    4276:	001a      	movs	r2, r3
    4278:	f7fe fd39 	bl	2cee <_lseek>
    427c:	1c43      	adds	r3, r0, #1
    427e:	d103      	bne.n	4288 <_lseek_r+0x20>
    4280:	6823      	ldr	r3, [r4, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d000      	beq.n	4288 <_lseek_r+0x20>
    4286:	602b      	str	r3, [r5, #0]
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	2000016c 	.word	0x2000016c

00004290 <memchr>:
    4290:	b2c9      	uxtb	r1, r1
    4292:	1882      	adds	r2, r0, r2
    4294:	4290      	cmp	r0, r2
    4296:	d101      	bne.n	429c <memchr+0xc>
    4298:	2000      	movs	r0, #0
    429a:	4770      	bx	lr
    429c:	7803      	ldrb	r3, [r0, #0]
    429e:	428b      	cmp	r3, r1
    42a0:	d0fb      	beq.n	429a <memchr+0xa>
    42a2:	3001      	adds	r0, #1
    42a4:	e7f6      	b.n	4294 <memchr+0x4>

000042a6 <__malloc_lock>:
    42a6:	4770      	bx	lr

000042a8 <__malloc_unlock>:
    42a8:	4770      	bx	lr
	...

000042ac <_read_r>:
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	0005      	movs	r5, r0
    42b0:	0008      	movs	r0, r1
    42b2:	0011      	movs	r1, r2
    42b4:	2200      	movs	r2, #0
    42b6:	4c06      	ldr	r4, [pc, #24]	; (42d0 <_read_r+0x24>)
    42b8:	6022      	str	r2, [r4, #0]
    42ba:	001a      	movs	r2, r3
    42bc:	f7fe fc78 	bl	2bb0 <_read>
    42c0:	1c43      	adds	r3, r0, #1
    42c2:	d103      	bne.n	42cc <_read_r+0x20>
    42c4:	6823      	ldr	r3, [r4, #0]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d000      	beq.n	42cc <_read_r+0x20>
    42ca:	602b      	str	r3, [r5, #0]
    42cc:	bd70      	pop	{r4, r5, r6, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	2000016c 	.word	0x2000016c
    42d4:	42000800 	.word	0x42000800
    42d8:	42000c00 	.word	0x42000c00
    42dc:	42001000 	.word	0x42001000
    42e0:	42001400 	.word	0x42001400
    42e4:	42001800 	.word	0x42001800
    42e8:	42001c00 	.word	0x42001c00
    42ec:	0c0b0a09 	.word	0x0c0b0a09
    42f0:	00000e0d 	.word	0x00000e0d
    42f4:	00001d26 	.word	0x00001d26
    42f8:	00001d9e 	.word	0x00001d9e
    42fc:	00001d9e 	.word	0x00001d9e
    4300:	00001d44 	.word	0x00001d44
    4304:	00001d3e 	.word	0x00001d3e
    4308:	00001d4a 	.word	0x00001d4a
    430c:	00001d2c 	.word	0x00001d2c
    4310:	00001d50 	.word	0x00001d50
    4314:	00001d84 	.word	0x00001d84
    4318:	00002068 	.word	0x00002068
    431c:	000020b8 	.word	0x000020b8
    4320:	000020b8 	.word	0x000020b8
    4324:	000020b4 	.word	0x000020b4
    4328:	0000205a 	.word	0x0000205a
    432c:	0000207a 	.word	0x0000207a
    4330:	0000204a 	.word	0x0000204a
    4334:	0000208c 	.word	0x0000208c
    4338:	0000209e 	.word	0x0000209e
    433c:	00002106 	.word	0x00002106
    4340:	00002134 	.word	0x00002134
    4344:	00002134 	.word	0x00002134
    4348:	00002130 	.word	0x00002130
    434c:	00002100 	.word	0x00002100
    4350:	0000210c 	.word	0x0000210c
    4354:	000020fa 	.word	0x000020fa
    4358:	00002112 	.word	0x00002112
    435c:	00002118 	.word	0x00002118
    4360:	57202d2d 	.word	0x57202d2d
    4364:	31434e49 	.word	0x31434e49
    4368:	20303035 	.word	0x20303035
    436c:	70696863 	.word	0x70696863
    4370:	666e6920 	.word	0x666e6920
    4374:	616d726f 	.word	0x616d726f
    4378:	6e6f6974 	.word	0x6e6f6974
    437c:	61786520 	.word	0x61786520
    4380:	656c706d 	.word	0x656c706d
    4384:	0d2d2d20 	.word	0x0d2d2d20
    4388:	202d2d0a 	.word	0x202d2d0a
    438c:	574d4153 	.word	0x574d4153
    4390:	585f3532 	.word	0x585f3532
    4394:	49414c50 	.word	0x49414c50
    4398:	5f44454e 	.word	0x5f44454e
    439c:	204f5250 	.word	0x204f5250
    43a0:	0a0d2d2d 	.word	0x0a0d2d2d
    43a4:	43202d2d 	.word	0x43202d2d
    43a8:	69706d6f 	.word	0x69706d6f
    43ac:	3a64656c 	.word	0x3a64656c
    43b0:	72704120 	.word	0x72704120
    43b4:	20333220 	.word	0x20333220
    43b8:	38313032 	.word	0x38313032
    43bc:	3a393120 	.word	0x3a393120
    43c0:	313a3832 	.word	0x313a3832
    43c4:	2d2d2030 	.word	0x2d2d2030
    43c8:	0000000d 	.word	0x0000000d
    43cc:	6c6c6548 	.word	0x6c6c6548
    43d0:	6f77206f 	.word	0x6f77206f
    43d4:	21646c72 	.word	0x21646c72
    43d8:	756f5920 	.word	0x756f5920
    43dc:	64707520 	.word	0x64707520
    43e0:	64657461 	.word	0x64657461
    43e4:	00212121 	.word	0x00212121

000043e8 <_global_impure_ptr>:
    43e8:	20000008                                ... 

000043ec <__sf_fake_stderr>:
	...

0000440c <__sf_fake_stdin>:
	...

0000442c <__sf_fake_stdout>:
	...
    444c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    445c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    446c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    447c:	00006665                                ef..

00004480 <_init>:
    4480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4486:	bc08      	pop	{r3}
    4488:	469e      	mov	lr, r3
    448a:	4770      	bx	lr

0000448c <__init_array_start>:
    448c:	000000dd 	.word	0x000000dd

00004490 <_fini>:
    4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4496:	bc08      	pop	{r3}
    4498:	469e      	mov	lr, r3
    449a:	4770      	bx	lr

0000449c <__fini_array_start>:
    449c:	000000b5 	.word	0x000000b5
