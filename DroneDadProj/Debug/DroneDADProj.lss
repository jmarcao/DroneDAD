
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c4c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000244  20000000  0000c4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024c  20000244  0000c704  00020244  2**2
                  ALLOC
  3 .stack        00002000  20000490  0000c950  00020244  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050008  00000000  00000000  000202c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055df  00000000  00000000  000702cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004d73  00000000  00000000  000758ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e00  00000000  00000000  0007a61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c30  00000000  00000000  0007b41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee77  00000000  00000000  0007c04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016126  00000000  00000000  0009aec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f862  00000000  00000000  000b0fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003d88  00000000  00000000  00140850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 24 00 20 d5 73 00 00 cd 74 00 00 cd 74 00 00     .$. .s...t...t..
	...
      2c:	cd 74 00 00 00 00 00 00 00 00 00 00 cd 74 00 00     .t...........t..
      3c:	cd 74 00 00 cd 74 00 00 cd 74 00 00 cd 74 00 00     .t...t...t...t..
      4c:	cd 74 00 00 c5 42 00 00 cd 74 00 00 cd 74 00 00     .t...B...t...t..
      5c:	cd 74 00 00 cd 74 00 00 75 4c 00 00 8d 4c 00 00     .t...t..uL...L..
      6c:	a5 4c 00 00 bd 4c 00 00 d5 4c 00 00 ed 4c 00 00     .L...L...L...L..
      7c:	cd 74 00 00 cd 74 00 00 cd 74 00 00 cd 74 00 00     .t...t...t...t..
      8c:	cd 74 00 00 cd 74 00 00 00 00 00 00 00 00 00 00     .t...t..........
      9c:	25 1a 00 00 cd 74 00 00 cd 74 00 00 cd 74 00 00     %....t...t...t..
      ac:	cd 74 00 00 00 00 00 00                             .t......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000244 	.word	0x20000244
      d4:	00000000 	.word	0x00000000
      d8:	0000c4c0 	.word	0x0000c4c0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000248 	.word	0x20000248
     108:	0000c4c0 	.word	0x0000c4c0
     10c:	0000c4c0 	.word	0x0000c4c0
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <system_interrupt_enable+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     140:	b580      	push	{r7, lr}
     142:	b084      	sub	sp, #16
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     148:	687b      	ldr	r3, [r7, #4]
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	68fb      	ldr	r3, [r7, #12]
     150:	7e5b      	ldrb	r3, [r3, #25]
     152:	b2db      	uxtb	r3, r3
     154:	b25b      	sxtb	r3, r3
     156:	2b00      	cmp	r3, #0
     158:	da01      	bge.n	15e <adc_is_syncing+0x1e>
		return true;
     15a:	2301      	movs	r3, #1
     15c:	e000      	b.n	160 <adc_is_syncing+0x20>
	}

	return false;
     15e:	2300      	movs	r3, #0
}
     160:	0018      	movs	r0, r3
     162:	46bd      	mov	sp, r7
     164:	b004      	add	sp, #16
     166:	bd80      	pop	{r7, pc}

00000168 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
     168:	b580      	push	{r7, lr}
     16a:	b084      	sub	sp, #16
     16c:	af00      	add	r7, sp, #0
     16e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     170:	687b      	ldr	r3, [r7, #4]
     172:	681b      	ldr	r3, [r3, #0]
     174:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     176:	46c0      	nop			; (mov r8, r8)
     178:	687b      	ldr	r3, [r7, #4]
     17a:	0018      	movs	r0, r3
     17c:	4b10      	ldr	r3, [pc, #64]	; (1c0 <adc_enable+0x58>)
     17e:	4798      	blx	r3
     180:	1e03      	subs	r3, r0, #0
     182:	d1f9      	bne.n	178 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
     184:	2017      	movs	r0, #23
     186:	4b0f      	ldr	r3, [pc, #60]	; (1c4 <adc_enable+0x5c>)
     188:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	220f      	movs	r2, #15
     18e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	220f      	movs	r2, #15
     194:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     196:	68fb      	ldr	r3, [r7, #12]
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	b2db      	uxtb	r3, r3
     19c:	2202      	movs	r2, #2
     19e:	4313      	orrs	r3, r2
     1a0:	b2da      	uxtb	r2, r3
     1a2:	68fb      	ldr	r3, [r7, #12]
     1a4:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	0018      	movs	r0, r3
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <adc_enable+0x58>)
     1ae:	4798      	blx	r3
     1b0:	1e03      	subs	r3, r0, #0
     1b2:	d1f9      	bne.n	1a8 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
     1b4:	2300      	movs	r3, #0
}
     1b6:	0018      	movs	r0, r3
     1b8:	46bd      	mov	sp, r7
     1ba:	b004      	add	sp, #16
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00000141 	.word	0x00000141
     1c4:	00000115 	.word	0x00000115

000001c8 <configure_adc_temp>:
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/

void configure_adc_temp(void)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b08c      	sub	sp, #48	; 0x30
     1cc:	af00      	add	r7, sp, #0
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     1ce:	003b      	movs	r3, r7
     1d0:	0018      	movs	r0, r3
     1d2:	4b13      	ldr	r3, [pc, #76]	; (220 <configure_adc_temp+0x58>)
     1d4:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     1d6:	003b      	movs	r3, r7
     1d8:	2201      	movs	r2, #1
     1da:	701a      	strb	r2, [r3, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     1dc:	003b      	movs	r3, r7
     1de:	2280      	movs	r2, #128	; 0x80
     1e0:	0092      	lsls	r2, r2, #2
     1e2:	805a      	strh	r2, [r3, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
     1e4:	003b      	movs	r3, r7
     1e6:	2200      	movs	r2, #0
     1e8:	705a      	strb	r2, [r3, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
     1ea:	003b      	movs	r3, r7
     1ec:	2218      	movs	r2, #24
     1ee:	731a      	strb	r2, [r3, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     1f0:	003b      	movs	r3, r7
     1f2:	22c0      	movs	r2, #192	; 0xc0
     1f4:	0152      	lsls	r2, r2, #5
     1f6:	81da      	strh	r2, [r3, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
     1f8:	003b      	movs	r3, r7
     1fa:	2204      	movs	r2, #4
     1fc:	75da      	strb	r2, [r3, #23]
	
	adc_init(&adc_inst, ADC, &conf_adc);
     1fe:	003a      	movs	r2, r7
     200:	4908      	ldr	r1, [pc, #32]	; (224 <configure_adc_temp+0x5c>)
     202:	4b09      	ldr	r3, [pc, #36]	; (228 <configure_adc_temp+0x60>)
     204:	0018      	movs	r0, r3
     206:	4b09      	ldr	r3, [pc, #36]	; (22c <configure_adc_temp+0x64>)
     208:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
     20a:	4b06      	ldr	r3, [pc, #24]	; (224 <configure_adc_temp+0x5c>)
     20c:	2222      	movs	r2, #34	; 0x22
     20e:	709a      	strb	r2, [r3, #2]
	
	adc_enable(&adc_inst);
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <configure_adc_temp+0x60>)
     212:	0018      	movs	r0, r3
     214:	4b06      	ldr	r3, [pc, #24]	; (230 <configure_adc_temp+0x68>)
     216:	4798      	blx	r3
}
     218:	46c0      	nop			; (mov r8, r8)
     21a:	46bd      	mov	sp, r7
     21c:	b00c      	add	sp, #48	; 0x30
     21e:	bd80      	pop	{r7, pc}
     220:	00001119 	.word	0x00001119
     224:	42004000 	.word	0x42004000
     228:	2000046c 	.word	0x2000046c
     22c:	00001769 	.word	0x00001769
     230:	00000169 	.word	0x00000169

00000234 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
int calculate_temperature(int adc_result)
{	
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	int temp = (adc_result *1000)/(4095*25);
     23c:	687b      	ldr	r3, [r7, #4]
     23e:	22fa      	movs	r2, #250	; 0xfa
     240:	0092      	lsls	r2, r2, #2
     242:	435a      	muls	r2, r3
     244:	4b05      	ldr	r3, [pc, #20]	; (25c <calculate_temperature+0x28>)
     246:	4906      	ldr	r1, [pc, #24]	; (260 <calculate_temperature+0x2c>)
     248:	0010      	movs	r0, r2
     24a:	4798      	blx	r3
     24c:	0003      	movs	r3, r0
     24e:	60fb      	str	r3, [r7, #12]
	return temp;
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	0018      	movs	r0, r3
     254:	46bd      	mov	sp, r7
     256:	b004      	add	sp, #16
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	00008119 	.word	0x00008119
     260:	00018fe7 	.word	0x00018fe7

00000264 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     264:	b580      	push	{r7, lr}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	0002      	movs	r2, r0
     26c:	1dfb      	adds	r3, r7, #7
     26e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     270:	230f      	movs	r3, #15
     272:	18fb      	adds	r3, r7, r3
     274:	1dfa      	adds	r2, r7, #7
     276:	7812      	ldrb	r2, [r2, #0]
     278:	09d2      	lsrs	r2, r2, #7
     27a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     27c:	230e      	movs	r3, #14
     27e:	18fb      	adds	r3, r7, r3
     280:	1dfa      	adds	r2, r7, #7
     282:	7812      	ldrb	r2, [r2, #0]
     284:	0952      	lsrs	r2, r2, #5
     286:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     288:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     28a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     28c:	230f      	movs	r3, #15
     28e:	18fb      	adds	r3, r7, r3
     290:	781b      	ldrb	r3, [r3, #0]
     292:	2b00      	cmp	r3, #0
     294:	d10f      	bne.n	2b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     296:	230f      	movs	r3, #15
     298:	18fb      	adds	r3, r7, r3
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	009b      	lsls	r3, r3, #2
     29e:	2210      	movs	r2, #16
     2a0:	4694      	mov	ip, r2
     2a2:	44bc      	add	ip, r7
     2a4:	4463      	add	r3, ip
     2a6:	3b08      	subs	r3, #8
     2a8:	681a      	ldr	r2, [r3, #0]
     2aa:	230e      	movs	r3, #14
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	18d3      	adds	r3, r2, r3
     2b4:	e000      	b.n	2b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2b6:	2300      	movs	r3, #0
	}
}
     2b8:	0018      	movs	r0, r3
     2ba:	46bd      	mov	sp, r7
     2bc:	b004      	add	sp, #16
     2be:	bd80      	pop	{r7, pc}
     2c0:	41004400 	.word	0x41004400

000002c4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b082      	sub	sp, #8
     2c8:	af00      	add	r7, sp, #0
     2ca:	0002      	movs	r2, r0
     2cc:	1dfb      	adds	r3, r7, #7
     2ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     2d0:	1dfb      	adds	r3, r7, #7
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	0018      	movs	r0, r3
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <port_get_group_from_gpio_pin+0x20>)
     2d8:	4798      	blx	r3
     2da:	0003      	movs	r3, r0
}
     2dc:	0018      	movs	r0, r3
     2de:	46bd      	mov	sp, r7
     2e0:	b002      	add	sp, #8
     2e2:	bd80      	pop	{r7, pc}
     2e4:	00000265 	.word	0x00000265

000002e8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b084      	sub	sp, #16
     2ec:	af00      	add	r7, sp, #0
     2ee:	0002      	movs	r2, r0
     2f0:	1dfb      	adds	r3, r7, #7
     2f2:	701a      	strb	r2, [r3, #0]
     2f4:	1dbb      	adds	r3, r7, #6
     2f6:	1c0a      	adds	r2, r1, #0
     2f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2fa:	1dfb      	adds	r3, r7, #7
     2fc:	781b      	ldrb	r3, [r3, #0]
     2fe:	0018      	movs	r0, r3
     300:	4b0d      	ldr	r3, [pc, #52]	; (338 <port_pin_set_output_level+0x50>)
     302:	4798      	blx	r3
     304:	0003      	movs	r3, r0
     306:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     308:	1dfb      	adds	r3, r7, #7
     30a:	781b      	ldrb	r3, [r3, #0]
     30c:	221f      	movs	r2, #31
     30e:	4013      	ands	r3, r2
     310:	2201      	movs	r2, #1
     312:	409a      	lsls	r2, r3
     314:	0013      	movs	r3, r2
     316:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     318:	1dbb      	adds	r3, r7, #6
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	2b00      	cmp	r3, #0
     31e:	d003      	beq.n	328 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     320:	68fb      	ldr	r3, [r7, #12]
     322:	68ba      	ldr	r2, [r7, #8]
     324:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     326:	e002      	b.n	32e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     328:	68fb      	ldr	r3, [r7, #12]
     32a:	68ba      	ldr	r2, [r7, #8]
     32c:	615a      	str	r2, [r3, #20]
}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	46bd      	mov	sp, r7
     332:	b004      	add	sp, #16
     334:	bd80      	pop	{r7, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	000002c5 	.word	0x000002c5

0000033c <system_interrupt_enter_critical_section>:
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     340:	4b02      	ldr	r3, [pc, #8]	; (34c <system_interrupt_enter_critical_section+0x10>)
     342:	4798      	blx	r3
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	00004019 	.word	0x00004019

00000350 <system_interrupt_leave_critical_section>:
{
     350:	b580      	push	{r7, lr}
     352:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     354:	4b02      	ldr	r3, [pc, #8]	; (360 <system_interrupt_leave_critical_section+0x10>)
     356:	4798      	blx	r3
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	0000406d 	.word	0x0000406d

00000364 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     364:	b580      	push	{r7, lr}
     366:	b084      	sub	sp, #16
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     36c:	4b0d      	ldr	r3, [pc, #52]	; (3a4 <spi_lock+0x40>)
     36e:	4798      	blx	r3

	if (module->locked) {
     370:	687b      	ldr	r3, [r7, #4]
     372:	791b      	ldrb	r3, [r3, #4]
     374:	b2db      	uxtb	r3, r3
     376:	2b00      	cmp	r3, #0
     378:	d004      	beq.n	384 <spi_lock+0x20>
		status = STATUS_BUSY;
     37a:	230f      	movs	r3, #15
     37c:	18fb      	adds	r3, r7, r3
     37e:	2205      	movs	r2, #5
     380:	701a      	strb	r2, [r3, #0]
     382:	e006      	b.n	392 <spi_lock+0x2e>
	} else {
		module->locked = true;
     384:	687b      	ldr	r3, [r7, #4]
     386:	2201      	movs	r2, #1
     388:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     38a:	230f      	movs	r3, #15
     38c:	18fb      	adds	r3, r7, r3
     38e:	2200      	movs	r2, #0
     390:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     392:	4b05      	ldr	r3, [pc, #20]	; (3a8 <spi_lock+0x44>)
     394:	4798      	blx	r3

	return status;
     396:	230f      	movs	r3, #15
     398:	18fb      	adds	r3, r7, r3
     39a:	781b      	ldrb	r3, [r3, #0]
}
     39c:	0018      	movs	r0, r3
     39e:	46bd      	mov	sp, r7
     3a0:	b004      	add	sp, #16
     3a2:	bd80      	pop	{r7, pc}
     3a4:	0000033d 	.word	0x0000033d
     3a8:	00000351 	.word	0x00000351

000003ac <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	module->locked = false;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	711a      	strb	r2, [r3, #4]
}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	46bd      	mov	sp, r7
     3be:	b002      	add	sp, #8
     3c0:	bd80      	pop	{r7, pc}

000003c2 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     3c2:	b580      	push	{r7, lr}
     3c4:	b084      	sub	sp, #16
     3c6:	af00      	add	r7, sp, #0
     3c8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	681b      	ldr	r3, [r3, #0]
     3ce:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3d0:	68fb      	ldr	r3, [r7, #12]
     3d2:	7e1b      	ldrb	r3, [r3, #24]
     3d4:	b2db      	uxtb	r3, r3
     3d6:	001a      	movs	r2, r3
     3d8:	2301      	movs	r3, #1
     3da:	4013      	ands	r3, r2
     3dc:	1e5a      	subs	r2, r3, #1
     3de:	4193      	sbcs	r3, r2
     3e0:	b2db      	uxtb	r3, r3
}
     3e2:	0018      	movs	r0, r3
     3e4:	46bd      	mov	sp, r7
     3e6:	b004      	add	sp, #16
     3e8:	bd80      	pop	{r7, pc}

000003ea <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     3ea:	b580      	push	{r7, lr}
     3ec:	b084      	sub	sp, #16
     3ee:	af00      	add	r7, sp, #0
     3f0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3f2:	687b      	ldr	r3, [r7, #4]
     3f4:	681b      	ldr	r3, [r3, #0]
     3f6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3f8:	68fb      	ldr	r3, [r7, #12]
     3fa:	7e1b      	ldrb	r3, [r3, #24]
     3fc:	b2db      	uxtb	r3, r3
     3fe:	001a      	movs	r2, r3
     400:	2304      	movs	r3, #4
     402:	4013      	ands	r3, r2
     404:	1e5a      	subs	r2, r3, #1
     406:	4193      	sbcs	r3, r2
     408:	b2db      	uxtb	r3, r3
}
     40a:	0018      	movs	r0, r3
     40c:	46bd      	mov	sp, r7
     40e:	b004      	add	sp, #16
     410:	bd80      	pop	{r7, pc}
	...

00000414 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     414:	b580      	push	{r7, lr}
     416:	b084      	sub	sp, #16
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
     41c:	000a      	movs	r2, r1
     41e:	1cbb      	adds	r3, r7, #2
     420:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     422:	687b      	ldr	r3, [r7, #4]
     424:	681b      	ldr	r3, [r3, #0]
     426:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     428:	687b      	ldr	r3, [r7, #4]
     42a:	0018      	movs	r0, r3
     42c:	4b0a      	ldr	r3, [pc, #40]	; (458 <spi_write+0x44>)
     42e:	4798      	blx	r3
     430:	0003      	movs	r3, r0
     432:	001a      	movs	r2, r3
     434:	2301      	movs	r3, #1
     436:	4053      	eors	r3, r2
     438:	b2db      	uxtb	r3, r3
     43a:	2b00      	cmp	r3, #0
     43c:	d001      	beq.n	442 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     43e:	2305      	movs	r3, #5
     440:	e006      	b.n	450 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     442:	1cbb      	adds	r3, r7, #2
     444:	881b      	ldrh	r3, [r3, #0]
     446:	05db      	lsls	r3, r3, #23
     448:	0dda      	lsrs	r2, r3, #23
     44a:	68fb      	ldr	r3, [r7, #12]
     44c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     44e:	2300      	movs	r3, #0
}
     450:	0018      	movs	r0, r3
     452:	46bd      	mov	sp, r7
     454:	b004      	add	sp, #16
     456:	bd80      	pop	{r7, pc}
     458:	000003c3 	.word	0x000003c3

0000045c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     45c:	b580      	push	{r7, lr}
     45e:	b084      	sub	sp, #16
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
     464:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     466:	687b      	ldr	r3, [r7, #4]
     468:	681b      	ldr	r3, [r3, #0]
     46a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	0018      	movs	r0, r3
     470:	4b1b      	ldr	r3, [pc, #108]	; (4e0 <spi_read+0x84>)
     472:	4798      	blx	r3
     474:	0003      	movs	r3, r0
     476:	001a      	movs	r2, r3
     478:	2301      	movs	r3, #1
     47a:	4053      	eors	r3, r2
     47c:	b2db      	uxtb	r3, r3
     47e:	2b00      	cmp	r3, #0
     480:	d001      	beq.n	486 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     482:	2310      	movs	r3, #16
     484:	e027      	b.n	4d6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     486:	230f      	movs	r3, #15
     488:	18fb      	adds	r3, r7, r3
     48a:	2200      	movs	r2, #0
     48c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     48e:	68bb      	ldr	r3, [r7, #8]
     490:	8b5b      	ldrh	r3, [r3, #26]
     492:	b29b      	uxth	r3, r3
     494:	001a      	movs	r2, r3
     496:	2304      	movs	r3, #4
     498:	4013      	ands	r3, r2
     49a:	d006      	beq.n	4aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     49c:	230f      	movs	r3, #15
     49e:	18fb      	adds	r3, r7, r3
     4a0:	221e      	movs	r2, #30
     4a2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4a4:	68bb      	ldr	r3, [r7, #8]
     4a6:	2204      	movs	r2, #4
     4a8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	799b      	ldrb	r3, [r3, #6]
     4ae:	2b01      	cmp	r3, #1
     4b0:	d108      	bne.n	4c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4b2:	68bb      	ldr	r3, [r7, #8]
     4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     4b6:	b29b      	uxth	r3, r3
     4b8:	05db      	lsls	r3, r3, #23
     4ba:	0ddb      	lsrs	r3, r3, #23
     4bc:	b29a      	uxth	r2, r3
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	801a      	strh	r2, [r3, #0]
     4c2:	e005      	b.n	4d0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4c4:	68bb      	ldr	r3, [r7, #8]
     4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     4c8:	b2db      	uxtb	r3, r3
     4ca:	b29a      	uxth	r2, r3
     4cc:	683b      	ldr	r3, [r7, #0]
     4ce:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     4d0:	230f      	movs	r3, #15
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	781b      	ldrb	r3, [r3, #0]
}
     4d6:	0018      	movs	r0, r3
     4d8:	46bd      	mov	sp, r7
     4da:	b004      	add	sp, #16
     4dc:	bd80      	pop	{r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	000003eb 	.word	0x000003eb

000004e4 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	0002      	movs	r2, r0
     4ec:	1dfb      	adds	r3, r7, #7
     4ee:	701a      	strb	r2, [r3, #0]
	switch (type) {
     4f0:	1dfb      	adds	r3, r7, #7
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	2b09      	cmp	r3, #9
     4f6:	d818      	bhi.n	52a <_at25dfx_get_device_id+0x46>
     4f8:	009a      	lsls	r2, r3, #2
     4fa:	4b0e      	ldr	r3, [pc, #56]	; (534 <_at25dfx_get_device_id+0x50>)
     4fc:	18d3      	adds	r3, r2, r3
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
     502:	4b0d      	ldr	r3, [pc, #52]	; (538 <_at25dfx_get_device_id+0x54>)
     504:	e012      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
     506:	4b0d      	ldr	r3, [pc, #52]	; (53c <_at25dfx_get_device_id+0x58>)
     508:	e010      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
     50a:	4b0d      	ldr	r3, [pc, #52]	; (540 <_at25dfx_get_device_id+0x5c>)
     50c:	e00e      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
     50e:	4b0d      	ldr	r3, [pc, #52]	; (544 <_at25dfx_get_device_id+0x60>)
     510:	e00c      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
     512:	4b0d      	ldr	r3, [pc, #52]	; (548 <_at25dfx_get_device_id+0x64>)
     514:	e00a      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
     516:	4b0d      	ldr	r3, [pc, #52]	; (54c <_at25dfx_get_device_id+0x68>)
     518:	e008      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
     51a:	4b0d      	ldr	r3, [pc, #52]	; (550 <_at25dfx_get_device_id+0x6c>)
     51c:	e006      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
     51e:	4b0d      	ldr	r3, [pc, #52]	; (554 <_at25dfx_get_device_id+0x70>)
     520:	e004      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
     522:	4b0d      	ldr	r3, [pc, #52]	; (558 <_at25dfx_get_device_id+0x74>)
     524:	e002      	b.n	52c <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
     526:	4b0d      	ldr	r3, [pc, #52]	; (55c <_at25dfx_get_device_id+0x78>)
     528:	e000      	b.n	52c <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
     52a:	2300      	movs	r3, #0
	}
}
     52c:	0018      	movs	r0, r3
     52e:	46bd      	mov	sp, r7
     530:	b002      	add	sp, #8
     532:	bd80      	pop	{r7, pc}
     534:	0000baec 	.word	0x0000baec
     538:	0000651f 	.word	0x0000651f
     53c:	0000431f 	.word	0x0000431f
     540:	0001441f 	.word	0x0001441f
     544:	0002451f 	.word	0x0002451f
     548:	0001451f 	.word	0x0001451f
     54c:	0002461f 	.word	0x0002461f
     550:	0003461f 	.word	0x0003461f
     554:	0000861f 	.word	0x0000861f
     558:	0001471f 	.word	0x0001471f
     55c:	0000481f 	.word	0x0000481f

00000560 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
     560:	b580      	push	{r7, lr}
     562:	b082      	sub	sp, #8
     564:	af00      	add	r7, sp, #0
     566:	0002      	movs	r2, r0
     568:	1dfb      	adds	r3, r7, #7
     56a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     56c:	1dfb      	adds	r3, r7, #7
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	2b09      	cmp	r3, #9
     572:	d819      	bhi.n	5a8 <_at25dfx_get_device_size+0x48>
     574:	009a      	lsls	r2, r3, #2
     576:	4b0f      	ldr	r3, [pc, #60]	; (5b4 <_at25dfx_get_device_size+0x54>)
     578:	18d3      	adds	r3, r2, r3
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
     57e:	2380      	movs	r3, #128	; 0x80
     580:	025b      	lsls	r3, r3, #9
     582:	e012      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
     584:	2380      	movs	r3, #128	; 0x80
     586:	02db      	lsls	r3, r3, #11
     588:	e00f      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
     58a:	2380      	movs	r3, #128	; 0x80
     58c:	031b      	lsls	r3, r3, #12
     58e:	e00c      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     590:	2380      	movs	r3, #128	; 0x80
     592:	035b      	lsls	r3, r3, #13
     594:	e009      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     596:	2380      	movs	r3, #128	; 0x80
     598:	039b      	lsls	r3, r3, #14
     59a:	e006      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     59c:	2380      	movs	r3, #128	; 0x80
     59e:	03db      	lsls	r3, r3, #15
     5a0:	e003      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
     5a2:	2380      	movs	r3, #128	; 0x80
     5a4:	041b      	lsls	r3, r3, #16
     5a6:	e000      	b.n	5aa <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
     5a8:	2300      	movs	r3, #0
	}
}
     5aa:	0018      	movs	r0, r3
     5ac:	46bd      	mov	sp, r7
     5ae:	b002      	add	sp, #8
     5b0:	bd80      	pop	{r7, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	0000bb14 	.word	0x0000bb14

000005b8 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	795b      	ldrb	r3, [r3, #5]
     5c4:	2100      	movs	r1, #0
     5c6:	0018      	movs	r0, r3
     5c8:	4b02      	ldr	r3, [pc, #8]	; (5d4 <_at25dfx_chip_select+0x1c>)
     5ca:	4798      	blx	r3
}
     5cc:	46c0      	nop			; (mov r8, r8)
     5ce:	46bd      	mov	sp, r7
     5d0:	b002      	add	sp, #8
     5d2:	bd80      	pop	{r7, pc}
     5d4:	000002e9 	.word	0x000002e9

000005d8 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     5d8:	b580      	push	{r7, lr}
     5da:	b082      	sub	sp, #8
     5dc:	af00      	add	r7, sp, #0
     5de:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     5e0:	687b      	ldr	r3, [r7, #4]
     5e2:	795b      	ldrb	r3, [r3, #5]
     5e4:	2101      	movs	r1, #1
     5e6:	0018      	movs	r0, r3
     5e8:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_at25dfx_chip_deselect+0x1c>)
     5ea:	4798      	blx	r3
}
     5ec:	46c0      	nop			; (mov r8, r8)
     5ee:	46bd      	mov	sp, r7
     5f0:	b002      	add	sp, #8
     5f2:	bd80      	pop	{r7, pc}
     5f4:	000002e9 	.word	0x000002e9

000005f8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     5f8:	b084      	sub	sp, #16
     5fa:	b5b0      	push	{r4, r5, r7, lr}
     5fc:	b084      	sub	sp, #16
     5fe:	af00      	add	r7, sp, #0
     600:	6078      	str	r0, [r7, #4]
     602:	2004      	movs	r0, #4
     604:	2420      	movs	r4, #32
     606:	46a4      	mov	ip, r4
     608:	44bc      	add	ip, r7
     60a:	4460      	add	r0, ip
     60c:	6001      	str	r1, [r0, #0]
     60e:	6042      	str	r2, [r0, #4]
     610:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     612:	2304      	movs	r3, #4
     614:	2220      	movs	r2, #32
     616:	4694      	mov	ip, r2
     618:	44bc      	add	ip, r7
     61a:	4463      	add	r3, ip
     61c:	781a      	ldrb	r2, [r3, #0]
     61e:	2308      	movs	r3, #8
     620:	18fb      	adds	r3, r7, r3
     622:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     624:	2304      	movs	r3, #4
     626:	2220      	movs	r2, #32
     628:	4694      	mov	ip, r2
     62a:	44bc      	add	ip, r7
     62c:	4463      	add	r3, ip
     62e:	785b      	ldrb	r3, [r3, #1]
     630:	2b01      	cmp	r3, #1
     632:	d91f      	bls.n	674 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     634:	2304      	movs	r3, #4
     636:	2220      	movs	r2, #32
     638:	4694      	mov	ip, r2
     63a:	44bc      	add	ip, r7
     63c:	4463      	add	r3, ip
     63e:	685b      	ldr	r3, [r3, #4]
     640:	b2da      	uxtb	r2, r3
     642:	2308      	movs	r3, #8
     644:	18fb      	adds	r3, r7, r3
     646:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     648:	2304      	movs	r3, #4
     64a:	2220      	movs	r2, #32
     64c:	4694      	mov	ip, r2
     64e:	44bc      	add	ip, r7
     650:	4463      	add	r3, ip
     652:	685b      	ldr	r3, [r3, #4]
     654:	0a1b      	lsrs	r3, r3, #8
     656:	b2da      	uxtb	r2, r3
     658:	2308      	movs	r3, #8
     65a:	18fb      	adds	r3, r7, r3
     65c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     65e:	2304      	movs	r3, #4
     660:	2220      	movs	r2, #32
     662:	4694      	mov	ip, r2
     664:	44bc      	add	ip, r7
     666:	4463      	add	r3, ip
     668:	685b      	ldr	r3, [r3, #4]
     66a:	0c1b      	lsrs	r3, r3, #16
     66c:	b2da      	uxtb	r2, r3
     66e:	2308      	movs	r3, #8
     670:	18fb      	adds	r3, r7, r3
     672:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     674:	687b      	ldr	r3, [r7, #4]
     676:	0018      	movs	r0, r3
     678:	4b1d      	ldr	r3, [pc, #116]	; (6f0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     67a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	6818      	ldr	r0, [r3, #0]
     680:	2304      	movs	r3, #4
     682:	2220      	movs	r2, #32
     684:	4694      	mov	ip, r2
     686:	44bc      	add	ip, r7
     688:	4463      	add	r3, ip
     68a:	785b      	ldrb	r3, [r3, #1]
     68c:	b29a      	uxth	r2, r3
     68e:	230f      	movs	r3, #15
     690:	18fc      	adds	r4, r7, r3
     692:	2308      	movs	r3, #8
     694:	18fb      	adds	r3, r7, r3
     696:	0019      	movs	r1, r3
     698:	4b16      	ldr	r3, [pc, #88]	; (6f4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     69a:	4798      	blx	r3
     69c:	0003      	movs	r3, r0
     69e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     6a0:	2304      	movs	r3, #4
     6a2:	2220      	movs	r2, #32
     6a4:	4694      	mov	ip, r2
     6a6:	44bc      	add	ip, r7
     6a8:	4463      	add	r3, ip
     6aa:	899b      	ldrh	r3, [r3, #12]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d014      	beq.n	6da <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	6818      	ldr	r0, [r3, #0]
     6b4:	2304      	movs	r3, #4
     6b6:	2220      	movs	r2, #32
     6b8:	4694      	mov	ip, r2
     6ba:	44bc      	add	ip, r7
     6bc:	4463      	add	r3, ip
     6be:	6899      	ldr	r1, [r3, #8]
     6c0:	2304      	movs	r3, #4
     6c2:	2220      	movs	r2, #32
     6c4:	4694      	mov	ip, r2
     6c6:	44bc      	add	ip, r7
     6c8:	4463      	add	r3, ip
     6ca:	899a      	ldrh	r2, [r3, #12]
     6cc:	230f      	movs	r3, #15
     6ce:	18fc      	adds	r4, r7, r3
     6d0:	2300      	movs	r3, #0
     6d2:	4d09      	ldr	r5, [pc, #36]	; (6f8 <_at25dfx_chip_issue_read_command_wait+0x100>)
     6d4:	47a8      	blx	r5
     6d6:	0003      	movs	r3, r0
     6d8:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	0018      	movs	r0, r3
     6de:	4b07      	ldr	r3, [pc, #28]	; (6fc <_at25dfx_chip_issue_read_command_wait+0x104>)
     6e0:	4798      	blx	r3
}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	46bd      	mov	sp, r7
     6e6:	b004      	add	sp, #16
     6e8:	bcb0      	pop	{r4, r5, r7}
     6ea:	bc08      	pop	{r3}
     6ec:	b004      	add	sp, #16
     6ee:	4718      	bx	r3
     6f0:	000005b9 	.word	0x000005b9
     6f4:	000053dd 	.word	0x000053dd
     6f8:	000052a9 	.word	0x000052a9
     6fc:	000005d9 	.word	0x000005d9

00000700 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     700:	b084      	sub	sp, #16
     702:	b590      	push	{r4, r7, lr}
     704:	b085      	sub	sp, #20
     706:	af00      	add	r7, sp, #0
     708:	6078      	str	r0, [r7, #4]
     70a:	2004      	movs	r0, #4
     70c:	2420      	movs	r4, #32
     70e:	46a4      	mov	ip, r4
     710:	44bc      	add	ip, r7
     712:	4460      	add	r0, ip
     714:	6001      	str	r1, [r0, #0]
     716:	6042      	str	r2, [r0, #4]
     718:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     71a:	2304      	movs	r3, #4
     71c:	2220      	movs	r2, #32
     71e:	4694      	mov	ip, r2
     720:	44bc      	add	ip, r7
     722:	4463      	add	r3, ip
     724:	781a      	ldrb	r2, [r3, #0]
     726:	2308      	movs	r3, #8
     728:	18fb      	adds	r3, r7, r3
     72a:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     72c:	2304      	movs	r3, #4
     72e:	2220      	movs	r2, #32
     730:	4694      	mov	ip, r2
     732:	44bc      	add	ip, r7
     734:	4463      	add	r3, ip
     736:	785b      	ldrb	r3, [r3, #1]
     738:	2b01      	cmp	r3, #1
     73a:	d91f      	bls.n	77c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     73c:	2304      	movs	r3, #4
     73e:	2220      	movs	r2, #32
     740:	4694      	mov	ip, r2
     742:	44bc      	add	ip, r7
     744:	4463      	add	r3, ip
     746:	685b      	ldr	r3, [r3, #4]
     748:	b2da      	uxtb	r2, r3
     74a:	2308      	movs	r3, #8
     74c:	18fb      	adds	r3, r7, r3
     74e:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     750:	2304      	movs	r3, #4
     752:	2220      	movs	r2, #32
     754:	4694      	mov	ip, r2
     756:	44bc      	add	ip, r7
     758:	4463      	add	r3, ip
     75a:	685b      	ldr	r3, [r3, #4]
     75c:	0a1b      	lsrs	r3, r3, #8
     75e:	b2da      	uxtb	r2, r3
     760:	2308      	movs	r3, #8
     762:	18fb      	adds	r3, r7, r3
     764:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     766:	2304      	movs	r3, #4
     768:	2220      	movs	r2, #32
     76a:	4694      	mov	ip, r2
     76c:	44bc      	add	ip, r7
     76e:	4463      	add	r3, ip
     770:	685b      	ldr	r3, [r3, #4]
     772:	0c1b      	lsrs	r3, r3, #16
     774:	b2da      	uxtb	r2, r3
     776:	2308      	movs	r3, #8
     778:	18fb      	adds	r3, r7, r3
     77a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	0018      	movs	r0, r3
     780:	4b1d      	ldr	r3, [pc, #116]	; (7f8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     782:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     784:	687b      	ldr	r3, [r7, #4]
     786:	6818      	ldr	r0, [r3, #0]
     788:	2304      	movs	r3, #4
     78a:	2220      	movs	r2, #32
     78c:	4694      	mov	ip, r2
     78e:	44bc      	add	ip, r7
     790:	4463      	add	r3, ip
     792:	785b      	ldrb	r3, [r3, #1]
     794:	b29a      	uxth	r2, r3
     796:	230f      	movs	r3, #15
     798:	18fc      	adds	r4, r7, r3
     79a:	2308      	movs	r3, #8
     79c:	18fb      	adds	r3, r7, r3
     79e:	0019      	movs	r1, r3
     7a0:	4b16      	ldr	r3, [pc, #88]	; (7fc <_at25dfx_chip_issue_write_command_wait+0xfc>)
     7a2:	4798      	blx	r3
     7a4:	0003      	movs	r3, r0
     7a6:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     7a8:	2304      	movs	r3, #4
     7aa:	2220      	movs	r2, #32
     7ac:	4694      	mov	ip, r2
     7ae:	44bc      	add	ip, r7
     7b0:	4463      	add	r3, ip
     7b2:	899b      	ldrh	r3, [r3, #12]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d014      	beq.n	7e2 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	6818      	ldr	r0, [r3, #0]
     7bc:	2304      	movs	r3, #4
     7be:	2220      	movs	r2, #32
     7c0:	4694      	mov	ip, r2
     7c2:	44bc      	add	ip, r7
     7c4:	4463      	add	r3, ip
     7c6:	6899      	ldr	r1, [r3, #8]
     7c8:	2304      	movs	r3, #4
     7ca:	2220      	movs	r2, #32
     7cc:	4694      	mov	ip, r2
     7ce:	44bc      	add	ip, r7
     7d0:	4463      	add	r3, ip
     7d2:	899b      	ldrh	r3, [r3, #12]
     7d4:	220f      	movs	r2, #15
     7d6:	18bc      	adds	r4, r7, r2
     7d8:	001a      	movs	r2, r3
     7da:	4b08      	ldr	r3, [pc, #32]	; (7fc <_at25dfx_chip_issue_write_command_wait+0xfc>)
     7dc:	4798      	blx	r3
     7de:	0003      	movs	r3, r0
     7e0:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	0018      	movs	r0, r3
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <_at25dfx_chip_issue_write_command_wait+0x100>)
     7e8:	4798      	blx	r3
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b005      	add	sp, #20
     7f0:	bc90      	pop	{r4, r7}
     7f2:	bc08      	pop	{r3}
     7f4:	b004      	add	sp, #16
     7f6:	4718      	bx	r3
     7f8:	000005b9 	.word	0x000005b9
     7fc:	000053dd 	.word	0x000053dd
     800:	000005d9 	.word	0x000005d9

00000804 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
     804:	b590      	push	{r4, r7, lr}
     806:	b085      	sub	sp, #20
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
     80c:	230c      	movs	r3, #12
     80e:	18fb      	adds	r3, r7, r3
     810:	2200      	movs	r2, #0
     812:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     814:	46c0      	nop			; (mov r8, r8)
     816:	687b      	ldr	r3, [r7, #4]
     818:	681b      	ldr	r3, [r3, #0]
     81a:	0018      	movs	r0, r3
     81c:	4b3c      	ldr	r3, [pc, #240]	; (910 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     81e:	4798      	blx	r3
     820:	0003      	movs	r3, r0
     822:	001a      	movs	r2, r3
     824:	2301      	movs	r3, #1
     826:	4053      	eors	r3, r2
     828:	b2db      	uxtb	r3, r3
     82a:	2b00      	cmp	r3, #0
     82c:	d1f3      	bne.n	816 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
     82e:	687b      	ldr	r3, [r7, #4]
     830:	0018      	movs	r0, r3
     832:	4b38      	ldr	r3, [pc, #224]	; (914 <_at25dfx_chip_get_nonbusy_status+0x110>)
     834:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
     836:	687b      	ldr	r3, [r7, #4]
     838:	681b      	ldr	r3, [r3, #0]
     83a:	220f      	movs	r2, #15
     83c:	18bc      	adds	r4, r7, r2
     83e:	2105      	movs	r1, #5
     840:	0018      	movs	r0, r3
     842:	4b35      	ldr	r3, [pc, #212]	; (918 <_at25dfx_chip_get_nonbusy_status+0x114>)
     844:	4798      	blx	r3
     846:	0003      	movs	r3, r0
     848:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	681b      	ldr	r3, [r3, #0]
     850:	0018      	movs	r0, r3
     852:	4b32      	ldr	r3, [pc, #200]	; (91c <_at25dfx_chip_get_nonbusy_status+0x118>)
     854:	4798      	blx	r3
     856:	0003      	movs	r3, r0
     858:	001a      	movs	r2, r3
     85a:	2301      	movs	r3, #1
     85c:	4053      	eors	r3, r2
     85e:	b2db      	uxtb	r3, r3
     860:	2b00      	cmp	r3, #0
     862:	d1f3      	bne.n	84c <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
     864:	687b      	ldr	r3, [r7, #4]
     866:	681b      	ldr	r3, [r3, #0]
     868:	220f      	movs	r2, #15
     86a:	18bc      	adds	r4, r7, r2
     86c:	220c      	movs	r2, #12
     86e:	18ba      	adds	r2, r7, r2
     870:	0011      	movs	r1, r2
     872:	0018      	movs	r0, r3
     874:	4b2a      	ldr	r3, [pc, #168]	; (920 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     876:	4798      	blx	r3
     878:	0003      	movs	r3, r0
     87a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     87c:	46c0      	nop			; (mov r8, r8)
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	0018      	movs	r0, r3
     884:	4b22      	ldr	r3, [pc, #136]	; (910 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     886:	4798      	blx	r3
     888:	0003      	movs	r3, r0
     88a:	001a      	movs	r2, r3
     88c:	2301      	movs	r3, #1
     88e:	4053      	eors	r3, r2
     890:	b2db      	uxtb	r3, r3
     892:	2b00      	cmp	r3, #0
     894:	d1f3      	bne.n	87e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
     896:	687b      	ldr	r3, [r7, #4]
     898:	681b      	ldr	r3, [r3, #0]
     89a:	220f      	movs	r2, #15
     89c:	18bc      	adds	r4, r7, r2
     89e:	2100      	movs	r1, #0
     8a0:	0018      	movs	r0, r3
     8a2:	4b1d      	ldr	r3, [pc, #116]	; (918 <_at25dfx_chip_get_nonbusy_status+0x114>)
     8a4:	4798      	blx	r3
     8a6:	0003      	movs	r3, r0
     8a8:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	0018      	movs	r0, r3
     8b2:	4b1a      	ldr	r3, [pc, #104]	; (91c <_at25dfx_chip_get_nonbusy_status+0x118>)
     8b4:	4798      	blx	r3
     8b6:	0003      	movs	r3, r0
     8b8:	001a      	movs	r2, r3
     8ba:	2301      	movs	r3, #1
     8bc:	4053      	eors	r3, r2
     8be:	b2db      	uxtb	r3, r3
     8c0:	2b00      	cmp	r3, #0
     8c2:	d1f3      	bne.n	8ac <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	220f      	movs	r2, #15
     8ca:	18bc      	adds	r4, r7, r2
     8cc:	220c      	movs	r2, #12
     8ce:	18ba      	adds	r2, r7, r2
     8d0:	0011      	movs	r1, r2
     8d2:	0018      	movs	r0, r3
     8d4:	4b12      	ldr	r3, [pc, #72]	; (920 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     8d6:	4798      	blx	r3
     8d8:	0003      	movs	r3, r0
     8da:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     8dc:	230c      	movs	r3, #12
     8de:	18fb      	adds	r3, r7, r3
     8e0:	881b      	ldrh	r3, [r3, #0]
     8e2:	001a      	movs	r2, r3
     8e4:	2301      	movs	r3, #1
     8e6:	4013      	ands	r3, r2
     8e8:	d1c8      	bne.n	87c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	0018      	movs	r0, r3
     8ee:	4b0d      	ldr	r3, [pc, #52]	; (924 <_at25dfx_chip_get_nonbusy_status+0x120>)
     8f0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     8f2:	230c      	movs	r3, #12
     8f4:	18fb      	adds	r3, r7, r3
     8f6:	881b      	ldrh	r3, [r3, #0]
     8f8:	001a      	movs	r2, r3
     8fa:	2320      	movs	r3, #32
     8fc:	4013      	ands	r3, r2
     8fe:	d001      	beq.n	904 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
     900:	2310      	movs	r3, #16
     902:	e000      	b.n	906 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
     904:	2300      	movs	r3, #0
}
     906:	0018      	movs	r0, r3
     908:	46bd      	mov	sp, r7
     90a:	b005      	add	sp, #20
     90c:	bd90      	pop	{r4, r7, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	000003c3 	.word	0x000003c3
     914:	000005b9 	.word	0x000005b9
     918:	00000415 	.word	0x00000415
     91c:	000003eb 	.word	0x000003eb
     920:	0000045d 	.word	0x0000045d
     924:	000005d9 	.word	0x000005d9

00000928 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
     928:	b590      	push	{r4, r7, lr}
     92a:	b089      	sub	sp, #36	; 0x24
     92c:	af02      	add	r7, sp, #8
     92e:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
     930:	2308      	movs	r3, #8
     932:	18fb      	adds	r3, r7, r3
     934:	2206      	movs	r2, #6
     936:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     938:	2308      	movs	r3, #8
     93a:	18fb      	adds	r3, r7, r3
     93c:	2201      	movs	r2, #1
     93e:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     940:	2308      	movs	r3, #8
     942:	18fb      	adds	r3, r7, r3
     944:	2200      	movs	r2, #0
     946:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     948:	2308      	movs	r3, #8
     94a:	18fb      	adds	r3, r7, r3
     94c:	2200      	movs	r2, #0
     94e:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     950:	2308      	movs	r3, #8
     952:	18fb      	adds	r3, r7, r3
     954:	2200      	movs	r2, #0
     956:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     958:	2308      	movs	r3, #8
     95a:	18fb      	adds	r3, r7, r3
     95c:	6878      	ldr	r0, [r7, #4]
     95e:	466a      	mov	r2, sp
     960:	68d9      	ldr	r1, [r3, #12]
     962:	6011      	str	r1, [r2, #0]
     964:	6819      	ldr	r1, [r3, #0]
     966:	685a      	ldr	r2, [r3, #4]
     968:	689b      	ldr	r3, [r3, #8]
     96a:	4c03      	ldr	r4, [pc, #12]	; (978 <_at25dfx_chip_enable_write+0x50>)
     96c:	47a0      	blx	r4
}
     96e:	46c0      	nop			; (mov r8, r8)
     970:	46bd      	mov	sp, r7
     972:	b007      	add	sp, #28
     974:	bd90      	pop	{r4, r7, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	00000701 	.word	0x00000701

0000097c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b08b      	sub	sp, #44	; 0x2c
     980:	af02      	add	r7, sp, #8
     982:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
     984:	2300      	movs	r3, #0
     986:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
     988:	687b      	ldr	r3, [r7, #4]
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	221f      	movs	r2, #31
     98e:	18bc      	adds	r4, r7, r2
     990:	0018      	movs	r0, r3
     992:	4b21      	ldr	r3, [pc, #132]	; (a18 <at25dfx_chip_check_presence+0x9c>)
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     99a:	231f      	movs	r3, #31
     99c:	18fb      	adds	r3, r7, r3
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	2b05      	cmp	r3, #5
     9a2:	d103      	bne.n	9ac <at25dfx_chip_check_presence+0x30>
		return status;
     9a4:	231f      	movs	r3, #31
     9a6:	18fb      	adds	r3, r7, r3
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	e030      	b.n	a0e <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     9ac:	230c      	movs	r3, #12
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	229f      	movs	r2, #159	; 0x9f
     9b2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     9b4:	230c      	movs	r3, #12
     9b6:	18fb      	adds	r3, r7, r3
     9b8:	2201      	movs	r2, #1
     9ba:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     9bc:	230c      	movs	r3, #12
     9be:	18fb      	adds	r3, r7, r3
     9c0:	2208      	movs	r2, #8
     9c2:	18ba      	adds	r2, r7, r2
     9c4:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     9c6:	230c      	movs	r3, #12
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	2203      	movs	r2, #3
     9cc:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     9ce:	230c      	movs	r3, #12
     9d0:	18fb      	adds	r3, r7, r3
     9d2:	2200      	movs	r2, #0
     9d4:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     9d6:	230c      	movs	r3, #12
     9d8:	18fb      	adds	r3, r7, r3
     9da:	6878      	ldr	r0, [r7, #4]
     9dc:	466a      	mov	r2, sp
     9de:	68d9      	ldr	r1, [r3, #12]
     9e0:	6011      	str	r1, [r2, #0]
     9e2:	6819      	ldr	r1, [r3, #0]
     9e4:	685a      	ldr	r2, [r3, #4]
     9e6:	689b      	ldr	r3, [r3, #8]
     9e8:	4c0c      	ldr	r4, [pc, #48]	; (a1c <at25dfx_chip_check_presence+0xa0>)
     9ea:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	0018      	movs	r0, r3
     9f2:	4b0b      	ldr	r3, [pc, #44]	; (a20 <at25dfx_chip_check_presence+0xa4>)
     9f4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	791b      	ldrb	r3, [r3, #4]
     9fa:	0018      	movs	r0, r3
     9fc:	4b09      	ldr	r3, [pc, #36]	; (a24 <at25dfx_chip_check_presence+0xa8>)
     9fe:	4798      	blx	r3
     a00:	0002      	movs	r2, r0
     a02:	68bb      	ldr	r3, [r7, #8]
     a04:	429a      	cmp	r2, r3
     a06:	d101      	bne.n	a0c <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     a08:	2300      	movs	r3, #0
     a0a:	e000      	b.n	a0e <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
     a0c:	2314      	movs	r3, #20
	}
}
     a0e:	0018      	movs	r0, r3
     a10:	46bd      	mov	sp, r7
     a12:	b009      	add	sp, #36	; 0x24
     a14:	bd90      	pop	{r4, r7, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	00000365 	.word	0x00000365
     a1c:	000005f9 	.word	0x000005f9
     a20:	000003ad 	.word	0x000003ad
     a24:	000004e5 	.word	0x000004e5

00000a28 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     a28:	b590      	push	{r4, r7, lr}
     a2a:	b08d      	sub	sp, #52	; 0x34
     a2c:	af02      	add	r7, sp, #8
     a2e:	60f8      	str	r0, [r7, #12]
     a30:	60b9      	str	r1, [r7, #8]
     a32:	607a      	str	r2, [r7, #4]
     a34:	001a      	movs	r2, r3
     a36:	1cbb      	adds	r3, r7, #2
     a38:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     a3a:	1cbb      	adds	r3, r7, #2
     a3c:	881a      	ldrh	r2, [r3, #0]
     a3e:	68bb      	ldr	r3, [r7, #8]
     a40:	18d4      	adds	r4, r2, r3
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	791b      	ldrb	r3, [r3, #4]
     a46:	0018      	movs	r0, r3
     a48:	4b21      	ldr	r3, [pc, #132]	; (ad0 <at25dfx_chip_read_buffer+0xa8>)
     a4a:	4798      	blx	r3
     a4c:	0003      	movs	r3, r0
     a4e:	429c      	cmp	r4, r3
     a50:	d901      	bls.n	a56 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     a52:	2317      	movs	r3, #23
     a54:	e037      	b.n	ac6 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	2227      	movs	r2, #39	; 0x27
     a5c:	18bc      	adds	r4, r7, r2
     a5e:	0018      	movs	r0, r3
     a60:	4b1c      	ldr	r3, [pc, #112]	; (ad4 <at25dfx_chip_read_buffer+0xac>)
     a62:	4798      	blx	r3
     a64:	0003      	movs	r3, r0
     a66:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     a68:	2327      	movs	r3, #39	; 0x27
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	781b      	ldrb	r3, [r3, #0]
     a6e:	2b05      	cmp	r3, #5
     a70:	d103      	bne.n	a7a <at25dfx_chip_read_buffer+0x52>
		return status;
     a72:	2327      	movs	r3, #39	; 0x27
     a74:	18fb      	adds	r3, r7, r3
     a76:	781b      	ldrb	r3, [r3, #0]
     a78:	e025      	b.n	ac6 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     a7a:	2314      	movs	r3, #20
     a7c:	18fb      	adds	r3, r7, r3
     a7e:	220b      	movs	r2, #11
     a80:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     a82:	2314      	movs	r3, #20
     a84:	18fb      	adds	r3, r7, r3
     a86:	2205      	movs	r2, #5
     a88:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     a8a:	2314      	movs	r3, #20
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	68ba      	ldr	r2, [r7, #8]
     a90:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     a92:	2314      	movs	r3, #20
     a94:	18fb      	adds	r3, r7, r3
     a96:	687a      	ldr	r2, [r7, #4]
     a98:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     a9a:	2314      	movs	r3, #20
     a9c:	18fb      	adds	r3, r7, r3
     a9e:	1cba      	adds	r2, r7, #2
     aa0:	8812      	ldrh	r2, [r2, #0]
     aa2:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     aa4:	2314      	movs	r3, #20
     aa6:	18fb      	adds	r3, r7, r3
     aa8:	68f8      	ldr	r0, [r7, #12]
     aaa:	466a      	mov	r2, sp
     aac:	68d9      	ldr	r1, [r3, #12]
     aae:	6011      	str	r1, [r2, #0]
     ab0:	6819      	ldr	r1, [r3, #0]
     ab2:	685a      	ldr	r2, [r3, #4]
     ab4:	689b      	ldr	r3, [r3, #8]
     ab6:	4c08      	ldr	r4, [pc, #32]	; (ad8 <at25dfx_chip_read_buffer+0xb0>)
     ab8:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     aba:	68fb      	ldr	r3, [r7, #12]
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	0018      	movs	r0, r3
     ac0:	4b06      	ldr	r3, [pc, #24]	; (adc <at25dfx_chip_read_buffer+0xb4>)
     ac2:	4798      	blx	r3

	return STATUS_OK;
     ac4:	2300      	movs	r3, #0
}
     ac6:	0018      	movs	r0, r3
     ac8:	46bd      	mov	sp, r7
     aca:	b00b      	add	sp, #44	; 0x2c
     acc:	bd90      	pop	{r4, r7, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	00000561 	.word	0x00000561
     ad4:	00000365 	.word	0x00000365
     ad8:	000005f9 	.word	0x000005f9
     adc:	000003ad 	.word	0x000003ad

00000ae0 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     ae0:	b590      	push	{r4, r7, lr}
     ae2:	b08d      	sub	sp, #52	; 0x34
     ae4:	af02      	add	r7, sp, #8
     ae6:	60f8      	str	r0, [r7, #12]
     ae8:	60b9      	str	r1, [r7, #8]
     aea:	607a      	str	r2, [r7, #4]
     aec:	001a      	movs	r2, r3
     aee:	1cbb      	adds	r3, r7, #2
     af0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     af2:	1cbb      	adds	r3, r7, #2
     af4:	881a      	ldrh	r2, [r3, #0]
     af6:	68bb      	ldr	r3, [r7, #8]
     af8:	18d4      	adds	r4, r2, r3
     afa:	68fb      	ldr	r3, [r7, #12]
     afc:	791b      	ldrb	r3, [r3, #4]
     afe:	0018      	movs	r0, r3
     b00:	4b5b      	ldr	r3, [pc, #364]	; (c70 <at25dfx_chip_write_buffer+0x190>)
     b02:	4798      	blx	r3
     b04:	0003      	movs	r3, r0
     b06:	429c      	cmp	r4, r3
     b08:	d901      	bls.n	b0e <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     b0a:	2317      	movs	r3, #23
     b0c:	e0ab      	b.n	c66 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	2227      	movs	r2, #39	; 0x27
     b14:	18bc      	adds	r4, r7, r2
     b16:	0018      	movs	r0, r3
     b18:	4b56      	ldr	r3, [pc, #344]	; (c74 <at25dfx_chip_write_buffer+0x194>)
     b1a:	4798      	blx	r3
     b1c:	0003      	movs	r3, r0
     b1e:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     b20:	2327      	movs	r3, #39	; 0x27
     b22:	18fb      	adds	r3, r7, r3
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	2b05      	cmp	r3, #5
     b28:	d103      	bne.n	b32 <at25dfx_chip_write_buffer+0x52>
		return status;
     b2a:	2327      	movs	r3, #39	; 0x27
     b2c:	18fb      	adds	r3, r7, r3
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	e099      	b.n	c66 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
     b32:	68fb      	ldr	r3, [r7, #12]
     b34:	0018      	movs	r0, r3
     b36:	4b50      	ldr	r3, [pc, #320]	; (c78 <at25dfx_chip_write_buffer+0x198>)
     b38:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
     b3a:	2314      	movs	r3, #20
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	2202      	movs	r2, #2
     b40:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     b42:	2314      	movs	r3, #20
     b44:	18fb      	adds	r3, r7, r3
     b46:	2204      	movs	r2, #4
     b48:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     b4a:	2314      	movs	r3, #20
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	68ba      	ldr	r2, [r7, #8]
     b50:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
     b52:	2314      	movs	r3, #20
     b54:	18fb      	adds	r3, r7, r3
     b56:	687a      	ldr	r2, [r7, #4]
     b58:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     b5a:	68bb      	ldr	r3, [r7, #8]
     b5c:	b29b      	uxth	r3, r3
     b5e:	22ff      	movs	r2, #255	; 0xff
     b60:	4013      	ands	r3, r2
     b62:	b29a      	uxth	r2, r3
     b64:	2324      	movs	r3, #36	; 0x24
     b66:	18fb      	adds	r3, r7, r3
     b68:	2180      	movs	r1, #128	; 0x80
     b6a:	0049      	lsls	r1, r1, #1
     b6c:	1a8a      	subs	r2, r1, r2
     b6e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
     b70:	1cbb      	adds	r3, r7, #2
     b72:	2224      	movs	r2, #36	; 0x24
     b74:	18ba      	adds	r2, r7, r2
     b76:	8810      	ldrh	r0, [r2, #0]
     b78:	881b      	ldrh	r3, [r3, #0]
     b7a:	b299      	uxth	r1, r3
     b7c:	b282      	uxth	r2, r0
     b7e:	4291      	cmp	r1, r2
     b80:	d900      	bls.n	b84 <at25dfx_chip_write_buffer+0xa4>
     b82:	1c03      	adds	r3, r0, #0
     b84:	b29a      	uxth	r2, r3
     b86:	2314      	movs	r3, #20
     b88:	18fb      	adds	r3, r7, r3
     b8a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     b8c:	2314      	movs	r3, #20
     b8e:	18fb      	adds	r3, r7, r3
     b90:	68f8      	ldr	r0, [r7, #12]
     b92:	466a      	mov	r2, sp
     b94:	68d9      	ldr	r1, [r3, #12]
     b96:	6011      	str	r1, [r2, #0]
     b98:	6819      	ldr	r1, [r3, #0]
     b9a:	685a      	ldr	r2, [r3, #4]
     b9c:	689b      	ldr	r3, [r3, #8]
     b9e:	4c37      	ldr	r4, [pc, #220]	; (c7c <at25dfx_chip_write_buffer+0x19c>)
     ba0:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     ba2:	2327      	movs	r3, #39	; 0x27
     ba4:	18fc      	adds	r4, r7, r3
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	0018      	movs	r0, r3
     baa:	4b35      	ldr	r3, [pc, #212]	; (c80 <at25dfx_chip_write_buffer+0x1a0>)
     bac:	4798      	blx	r3
     bae:	0003      	movs	r3, r0
     bb0:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
     bb2:	2314      	movs	r3, #20
     bb4:	18fb      	adds	r3, r7, r3
     bb6:	899a      	ldrh	r2, [r3, #12]
     bb8:	1cbb      	adds	r3, r7, #2
     bba:	1cb9      	adds	r1, r7, #2
     bbc:	8809      	ldrh	r1, [r1, #0]
     bbe:	1a8a      	subs	r2, r1, r2
     bc0:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
     bc2:	e03f      	b.n	c44 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
     bc4:	68fb      	ldr	r3, [r7, #12]
     bc6:	0018      	movs	r0, r3
     bc8:	4b2b      	ldr	r3, [pc, #172]	; (c78 <at25dfx_chip_write_buffer+0x198>)
     bca:	4798      	blx	r3

		cmd.address += cmd.length;
     bcc:	2314      	movs	r3, #20
     bce:	18fb      	adds	r3, r7, r3
     bd0:	685b      	ldr	r3, [r3, #4]
     bd2:	2214      	movs	r2, #20
     bd4:	18ba      	adds	r2, r7, r2
     bd6:	8992      	ldrh	r2, [r2, #12]
     bd8:	189a      	adds	r2, r3, r2
     bda:	2314      	movs	r3, #20
     bdc:	18fb      	adds	r3, r7, r3
     bde:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
     be0:	2314      	movs	r3, #20
     be2:	18fb      	adds	r3, r7, r3
     be4:	689b      	ldr	r3, [r3, #8]
     be6:	2214      	movs	r2, #20
     be8:	18ba      	adds	r2, r7, r2
     bea:	8992      	ldrh	r2, [r2, #12]
     bec:	189a      	adds	r2, r3, r2
     bee:	2314      	movs	r3, #20
     bf0:	18fb      	adds	r3, r7, r3
     bf2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     bf4:	1cbb      	adds	r3, r7, #2
     bf6:	881b      	ldrh	r3, [r3, #0]
     bf8:	b299      	uxth	r1, r3
     bfa:	2280      	movs	r2, #128	; 0x80
     bfc:	0052      	lsls	r2, r2, #1
     bfe:	4291      	cmp	r1, r2
     c00:	d901      	bls.n	c06 <at25dfx_chip_write_buffer+0x126>
     c02:	2380      	movs	r3, #128	; 0x80
     c04:	005b      	lsls	r3, r3, #1
     c06:	b29a      	uxth	r2, r3
     c08:	2314      	movs	r3, #20
     c0a:	18fb      	adds	r3, r7, r3
     c0c:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     c0e:	2314      	movs	r3, #20
     c10:	18fb      	adds	r3, r7, r3
     c12:	68f8      	ldr	r0, [r7, #12]
     c14:	466a      	mov	r2, sp
     c16:	68d9      	ldr	r1, [r3, #12]
     c18:	6011      	str	r1, [r2, #0]
     c1a:	6819      	ldr	r1, [r3, #0]
     c1c:	685a      	ldr	r2, [r3, #4]
     c1e:	689b      	ldr	r3, [r3, #8]
     c20:	4c16      	ldr	r4, [pc, #88]	; (c7c <at25dfx_chip_write_buffer+0x19c>)
     c22:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
     c24:	2327      	movs	r3, #39	; 0x27
     c26:	18fc      	adds	r4, r7, r3
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	0018      	movs	r0, r3
     c2c:	4b14      	ldr	r3, [pc, #80]	; (c80 <at25dfx_chip_write_buffer+0x1a0>)
     c2e:	4798      	blx	r3
     c30:	0003      	movs	r3, r0
     c32:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
     c34:	2314      	movs	r3, #20
     c36:	18fb      	adds	r3, r7, r3
     c38:	899a      	ldrh	r2, [r3, #12]
     c3a:	1cbb      	adds	r3, r7, #2
     c3c:	1cb9      	adds	r1, r7, #2
     c3e:	8809      	ldrh	r1, [r1, #0]
     c40:	1a8a      	subs	r2, r1, r2
     c42:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
     c44:	1cbb      	adds	r3, r7, #2
     c46:	881b      	ldrh	r3, [r3, #0]
     c48:	2b00      	cmp	r3, #0
     c4a:	d004      	beq.n	c56 <at25dfx_chip_write_buffer+0x176>
     c4c:	2327      	movs	r3, #39	; 0x27
     c4e:	18fb      	adds	r3, r7, r3
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d0b6      	beq.n	bc4 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
     c56:	68fb      	ldr	r3, [r7, #12]
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	0018      	movs	r0, r3
     c5c:	4b09      	ldr	r3, [pc, #36]	; (c84 <at25dfx_chip_write_buffer+0x1a4>)
     c5e:	4798      	blx	r3

	return status;
     c60:	2327      	movs	r3, #39	; 0x27
     c62:	18fb      	adds	r3, r7, r3
     c64:	781b      	ldrb	r3, [r3, #0]
}
     c66:	0018      	movs	r0, r3
     c68:	46bd      	mov	sp, r7
     c6a:	b00b      	add	sp, #44	; 0x2c
     c6c:	bd90      	pop	{r4, r7, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	00000561 	.word	0x00000561
     c74:	00000365 	.word	0x00000365
     c78:	00000929 	.word	0x00000929
     c7c:	00000701 	.word	0x00000701
     c80:	00000805 	.word	0x00000805
     c84:	000003ad 	.word	0x000003ad

00000c88 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     c88:	b590      	push	{r4, r7, lr}
     c8a:	b08d      	sub	sp, #52	; 0x34
     c8c:	af02      	add	r7, sp, #8
     c8e:	60f8      	str	r0, [r7, #12]
     c90:	60b9      	str	r1, [r7, #8]
     c92:	1dfb      	adds	r3, r7, #7
     c94:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     c96:	68fb      	ldr	r3, [r7, #12]
     c98:	791b      	ldrb	r3, [r3, #4]
     c9a:	0018      	movs	r0, r3
     c9c:	4b33      	ldr	r3, [pc, #204]	; (d6c <at25dfx_chip_erase_block+0xe4>)
     c9e:	4798      	blx	r3
     ca0:	0002      	movs	r2, r0
     ca2:	68bb      	ldr	r3, [r7, #8]
     ca4:	429a      	cmp	r2, r3
     ca6:	d801      	bhi.n	cac <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
     ca8:	2317      	movs	r3, #23
     caa:	e05b      	b.n	d64 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
     cac:	68fb      	ldr	r3, [r7, #12]
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	2227      	movs	r2, #39	; 0x27
     cb2:	18bc      	adds	r4, r7, r2
     cb4:	0018      	movs	r0, r3
     cb6:	4b2e      	ldr	r3, [pc, #184]	; (d70 <at25dfx_chip_erase_block+0xe8>)
     cb8:	4798      	blx	r3
     cba:	0003      	movs	r3, r0
     cbc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     cbe:	2327      	movs	r3, #39	; 0x27
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	2b05      	cmp	r3, #5
     cc6:	d103      	bne.n	cd0 <at25dfx_chip_erase_block+0x48>
		return status;
     cc8:	2327      	movs	r3, #39	; 0x27
     cca:	18fb      	adds	r3, r7, r3
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	e049      	b.n	d64 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
     cd0:	68fb      	ldr	r3, [r7, #12]
     cd2:	0018      	movs	r0, r3
     cd4:	4b27      	ldr	r3, [pc, #156]	; (d74 <at25dfx_chip_erase_block+0xec>)
     cd6:	4798      	blx	r3

	switch (block_size) {
     cd8:	1dfb      	adds	r3, r7, #7
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	2b01      	cmp	r3, #1
     cde:	d008      	beq.n	cf2 <at25dfx_chip_erase_block+0x6a>
     ce0:	2b02      	cmp	r3, #2
     ce2:	d00b      	beq.n	cfc <at25dfx_chip_erase_block+0x74>
     ce4:	2b00      	cmp	r3, #0
     ce6:	d10e      	bne.n	d06 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     ce8:	2314      	movs	r3, #20
     cea:	18fb      	adds	r3, r7, r3
     cec:	2220      	movs	r2, #32
     cee:	701a      	strb	r2, [r3, #0]
		break;
     cf0:	e00d      	b.n	d0e <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     cf2:	2314      	movs	r3, #20
     cf4:	18fb      	adds	r3, r7, r3
     cf6:	2252      	movs	r2, #82	; 0x52
     cf8:	701a      	strb	r2, [r3, #0]
		break;
     cfa:	e008      	b.n	d0e <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     cfc:	2314      	movs	r3, #20
     cfe:	18fb      	adds	r3, r7, r3
     d00:	22d8      	movs	r2, #216	; 0xd8
     d02:	701a      	strb	r2, [r3, #0]
		break;
     d04:	e003      	b.n	d0e <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     d06:	2314      	movs	r3, #20
     d08:	18fb      	adds	r3, r7, r3
     d0a:	2200      	movs	r2, #0
     d0c:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
     d0e:	2314      	movs	r3, #20
     d10:	18fb      	adds	r3, r7, r3
     d12:	2204      	movs	r2, #4
     d14:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     d16:	2314      	movs	r3, #20
     d18:	18fb      	adds	r3, r7, r3
     d1a:	68ba      	ldr	r2, [r7, #8]
     d1c:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     d1e:	2314      	movs	r3, #20
     d20:	18fb      	adds	r3, r7, r3
     d22:	2200      	movs	r2, #0
     d24:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     d26:	2314      	movs	r3, #20
     d28:	18fb      	adds	r3, r7, r3
     d2a:	2200      	movs	r2, #0
     d2c:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     d2e:	2314      	movs	r3, #20
     d30:	18fb      	adds	r3, r7, r3
     d32:	68f8      	ldr	r0, [r7, #12]
     d34:	466a      	mov	r2, sp
     d36:	68d9      	ldr	r1, [r3, #12]
     d38:	6011      	str	r1, [r2, #0]
     d3a:	6819      	ldr	r1, [r3, #0]
     d3c:	685a      	ldr	r2, [r3, #4]
     d3e:	689b      	ldr	r3, [r3, #8]
     d40:	4c0d      	ldr	r4, [pc, #52]	; (d78 <at25dfx_chip_erase_block+0xf0>)
     d42:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     d44:	2327      	movs	r3, #39	; 0x27
     d46:	18fc      	adds	r4, r7, r3
     d48:	68fb      	ldr	r3, [r7, #12]
     d4a:	0018      	movs	r0, r3
     d4c:	4b0b      	ldr	r3, [pc, #44]	; (d7c <at25dfx_chip_erase_block+0xf4>)
     d4e:	4798      	blx	r3
     d50:	0003      	movs	r3, r0
     d52:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
     d54:	68fb      	ldr	r3, [r7, #12]
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	0018      	movs	r0, r3
     d5a:	4b09      	ldr	r3, [pc, #36]	; (d80 <at25dfx_chip_erase_block+0xf8>)
     d5c:	4798      	blx	r3

	return status;
     d5e:	2327      	movs	r3, #39	; 0x27
     d60:	18fb      	adds	r3, r7, r3
     d62:	781b      	ldrb	r3, [r3, #0]
}
     d64:	0018      	movs	r0, r3
     d66:	46bd      	mov	sp, r7
     d68:	b00b      	add	sp, #44	; 0x2c
     d6a:	bd90      	pop	{r4, r7, pc}
     d6c:	00000561 	.word	0x00000561
     d70:	00000365 	.word	0x00000365
     d74:	00000929 	.word	0x00000929
     d78:	00000701 	.word	0x00000701
     d7c:	00000805 	.word	0x00000805
     d80:	000003ad 	.word	0x000003ad

00000d84 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     d84:	b590      	push	{r4, r7, lr}
     d86:	b08b      	sub	sp, #44	; 0x2c
     d88:	af02      	add	r7, sp, #8
     d8a:	6078      	str	r0, [r7, #4]
     d8c:	000a      	movs	r2, r1
     d8e:	1cfb      	adds	r3, r7, #3
     d90:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	221f      	movs	r2, #31
     d98:	18bc      	adds	r4, r7, r2
     d9a:	0018      	movs	r0, r3
     d9c:	4b22      	ldr	r3, [pc, #136]	; (e28 <at25dfx_chip_set_global_sector_protect+0xa4>)
     d9e:	4798      	blx	r3
     da0:	0003      	movs	r3, r0
     da2:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     da4:	231f      	movs	r3, #31
     da6:	18fb      	adds	r3, r7, r3
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	2b05      	cmp	r3, #5
     dac:	d103      	bne.n	db6 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
     dae:	231f      	movs	r3, #31
     db0:	18fb      	adds	r3, r7, r3
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	e033      	b.n	e1e <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	0018      	movs	r0, r3
     dba:	4b1c      	ldr	r3, [pc, #112]	; (e2c <at25dfx_chip_set_global_sector_protect+0xa8>)
     dbc:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     dbe:	1cfb      	adds	r3, r7, #3
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d001      	beq.n	dca <at25dfx_chip_set_global_sector_protect+0x46>
     dc6:	223c      	movs	r2, #60	; 0x3c
     dc8:	e000      	b.n	dcc <at25dfx_chip_set_global_sector_protect+0x48>
     dca:	2200      	movs	r2, #0
     dcc:	230b      	movs	r3, #11
     dce:	18fb      	adds	r3, r7, r3
     dd0:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
     dd2:	230c      	movs	r3, #12
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     dda:	230c      	movs	r3, #12
     ddc:	18fb      	adds	r3, r7, r3
     dde:	2201      	movs	r2, #1
     de0:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
     de2:	230c      	movs	r3, #12
     de4:	18fb      	adds	r3, r7, r3
     de6:	2201      	movs	r2, #1
     de8:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
     dea:	230c      	movs	r3, #12
     dec:	18fb      	adds	r3, r7, r3
     dee:	220b      	movs	r2, #11
     df0:	18ba      	adds	r2, r7, r2
     df2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     df4:	230c      	movs	r3, #12
     df6:	18fb      	adds	r3, r7, r3
     df8:	2200      	movs	r2, #0
     dfa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     dfc:	230c      	movs	r3, #12
     dfe:	18fb      	adds	r3, r7, r3
     e00:	6878      	ldr	r0, [r7, #4]
     e02:	466a      	mov	r2, sp
     e04:	68d9      	ldr	r1, [r3, #12]
     e06:	6011      	str	r1, [r2, #0]
     e08:	6819      	ldr	r1, [r3, #0]
     e0a:	685a      	ldr	r2, [r3, #4]
     e0c:	689b      	ldr	r3, [r3, #8]
     e0e:	4c08      	ldr	r4, [pc, #32]	; (e30 <at25dfx_chip_set_global_sector_protect+0xac>)
     e10:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	0018      	movs	r0, r3
     e18:	4b06      	ldr	r3, [pc, #24]	; (e34 <at25dfx_chip_set_global_sector_protect+0xb0>)
     e1a:	4798      	blx	r3

	return STATUS_OK;
     e1c:	2300      	movs	r3, #0
}
     e1e:	0018      	movs	r0, r3
     e20:	46bd      	mov	sp, r7
     e22:	b009      	add	sp, #36	; 0x24
     e24:	bd90      	pop	{r4, r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	00000365 	.word	0x00000365
     e2c:	00000929 	.word	0x00000929
     e30:	00000701 	.word	0x00000701
     e34:	000003ad 	.word	0x000003ad

00000e38 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08d      	sub	sp, #52	; 0x34
     e3c:	af02      	add	r7, sp, #8
     e3e:	60f8      	str	r0, [r7, #12]
     e40:	60b9      	str	r1, [r7, #8]
     e42:	1dfb      	adds	r3, r7, #7
     e44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     e46:	68fb      	ldr	r3, [r7, #12]
     e48:	791b      	ldrb	r3, [r3, #4]
     e4a:	0018      	movs	r0, r3
     e4c:	4b26      	ldr	r3, [pc, #152]	; (ee8 <at25dfx_chip_set_sector_protect+0xb0>)
     e4e:	4798      	blx	r3
     e50:	0002      	movs	r2, r0
     e52:	68bb      	ldr	r3, [r7, #8]
     e54:	429a      	cmp	r2, r3
     e56:	d801      	bhi.n	e5c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
     e58:	2317      	movs	r3, #23
     e5a:	e040      	b.n	ede <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
     e5c:	68fb      	ldr	r3, [r7, #12]
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	2227      	movs	r2, #39	; 0x27
     e62:	18bc      	adds	r4, r7, r2
     e64:	0018      	movs	r0, r3
     e66:	4b21      	ldr	r3, [pc, #132]	; (eec <at25dfx_chip_set_sector_protect+0xb4>)
     e68:	4798      	blx	r3
     e6a:	0003      	movs	r3, r0
     e6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     e6e:	2327      	movs	r3, #39	; 0x27
     e70:	18fb      	adds	r3, r7, r3
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	2b05      	cmp	r3, #5
     e76:	d103      	bne.n	e80 <at25dfx_chip_set_sector_protect+0x48>
		return status;
     e78:	2327      	movs	r3, #39	; 0x27
     e7a:	18fb      	adds	r3, r7, r3
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	e02e      	b.n	ede <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
     e80:	68fb      	ldr	r3, [r7, #12]
     e82:	0018      	movs	r0, r3
     e84:	4b1a      	ldr	r3, [pc, #104]	; (ef0 <at25dfx_chip_set_sector_protect+0xb8>)
     e86:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     e88:	1dfb      	adds	r3, r7, #7
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d001      	beq.n	e94 <at25dfx_chip_set_sector_protect+0x5c>
     e90:	2236      	movs	r2, #54	; 0x36
     e92:	e000      	b.n	e96 <at25dfx_chip_set_sector_protect+0x5e>
     e94:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
     e96:	2314      	movs	r3, #20
     e98:	18fb      	adds	r3, r7, r3
     e9a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     e9c:	2314      	movs	r3, #20
     e9e:	18fb      	adds	r3, r7, r3
     ea0:	2204      	movs	r2, #4
     ea2:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     ea4:	2314      	movs	r3, #20
     ea6:	18fb      	adds	r3, r7, r3
     ea8:	68ba      	ldr	r2, [r7, #8]
     eaa:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     eac:	2314      	movs	r3, #20
     eae:	18fb      	adds	r3, r7, r3
     eb0:	2200      	movs	r2, #0
     eb2:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     eb4:	2314      	movs	r3, #20
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	2200      	movs	r2, #0
     eba:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     ebc:	2314      	movs	r3, #20
     ebe:	18fb      	adds	r3, r7, r3
     ec0:	68f8      	ldr	r0, [r7, #12]
     ec2:	466a      	mov	r2, sp
     ec4:	68d9      	ldr	r1, [r3, #12]
     ec6:	6011      	str	r1, [r2, #0]
     ec8:	6819      	ldr	r1, [r3, #0]
     eca:	685a      	ldr	r2, [r3, #4]
     ecc:	689b      	ldr	r3, [r3, #8]
     ece:	4c09      	ldr	r4, [pc, #36]	; (ef4 <at25dfx_chip_set_sector_protect+0xbc>)
     ed0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	0018      	movs	r0, r3
     ed8:	4b07      	ldr	r3, [pc, #28]	; (ef8 <at25dfx_chip_set_sector_protect+0xc0>)
     eda:	4798      	blx	r3

	return STATUS_OK;
     edc:	2300      	movs	r3, #0
}
     ede:	0018      	movs	r0, r3
     ee0:	46bd      	mov	sp, r7
     ee2:	b00b      	add	sp, #44	; 0x2c
     ee4:	bd90      	pop	{r4, r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00000561 	.word	0x00000561
     eec:	00000365 	.word	0x00000365
     ef0:	00000929 	.word	0x00000929
     ef4:	00000701 	.word	0x00000701
     ef8:	000003ad 	.word	0x000003ad

00000efc <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     efc:	b590      	push	{r4, r7, lr}
     efe:	b08b      	sub	sp, #44	; 0x2c
     f00:	af02      	add	r7, sp, #8
     f02:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	221f      	movs	r2, #31
     f0a:	18bc      	adds	r4, r7, r2
     f0c:	0018      	movs	r0, r3
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <at25dfx_chip_sleep+0x80>)
     f10:	4798      	blx	r3
     f12:	0003      	movs	r3, r0
     f14:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     f16:	231f      	movs	r3, #31
     f18:	18fb      	adds	r3, r7, r3
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	2b05      	cmp	r3, #5
     f1e:	d103      	bne.n	f28 <at25dfx_chip_sleep+0x2c>
		return status;
     f20:	231f      	movs	r3, #31
     f22:	18fb      	adds	r3, r7, r3
     f24:	781b      	ldrb	r3, [r3, #0]
     f26:	e024      	b.n	f72 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     f28:	230c      	movs	r3, #12
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	22b9      	movs	r2, #185	; 0xb9
     f2e:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     f30:	230c      	movs	r3, #12
     f32:	18fb      	adds	r3, r7, r3
     f34:	2201      	movs	r2, #1
     f36:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     f38:	230c      	movs	r3, #12
     f3a:	18fb      	adds	r3, r7, r3
     f3c:	2200      	movs	r2, #0
     f3e:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     f40:	230c      	movs	r3, #12
     f42:	18fb      	adds	r3, r7, r3
     f44:	2200      	movs	r2, #0
     f46:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     f48:	230c      	movs	r3, #12
     f4a:	18fb      	adds	r3, r7, r3
     f4c:	2200      	movs	r2, #0
     f4e:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     f50:	230c      	movs	r3, #12
     f52:	18fb      	adds	r3, r7, r3
     f54:	6878      	ldr	r0, [r7, #4]
     f56:	466a      	mov	r2, sp
     f58:	68d9      	ldr	r1, [r3, #12]
     f5a:	6011      	str	r1, [r2, #0]
     f5c:	6819      	ldr	r1, [r3, #0]
     f5e:	685a      	ldr	r2, [r3, #4]
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	4c07      	ldr	r4, [pc, #28]	; (f80 <at25dfx_chip_sleep+0x84>)
     f64:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	0018      	movs	r0, r3
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <at25dfx_chip_sleep+0x88>)
     f6e:	4798      	blx	r3

	return STATUS_OK;
     f70:	2300      	movs	r3, #0
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	b009      	add	sp, #36	; 0x24
     f78:	bd90      	pop	{r4, r7, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000365 	.word	0x00000365
     f80:	00000701 	.word	0x00000701
     f84:	000003ad 	.word	0x000003ad

00000f88 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     f88:	b590      	push	{r4, r7, lr}
     f8a:	b08b      	sub	sp, #44	; 0x2c
     f8c:	af02      	add	r7, sp, #8
     f8e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	221f      	movs	r2, #31
     f96:	18bc      	adds	r4, r7, r2
     f98:	0018      	movs	r0, r3
     f9a:	4b1b      	ldr	r3, [pc, #108]	; (1008 <at25dfx_chip_wake+0x80>)
     f9c:	4798      	blx	r3
     f9e:	0003      	movs	r3, r0
     fa0:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     fa2:	231f      	movs	r3, #31
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2b05      	cmp	r3, #5
     faa:	d103      	bne.n	fb4 <at25dfx_chip_wake+0x2c>
		return status;
     fac:	231f      	movs	r3, #31
     fae:	18fb      	adds	r3, r7, r3
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	e024      	b.n	ffe <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     fb4:	230c      	movs	r3, #12
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	22ab      	movs	r2, #171	; 0xab
     fba:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     fbc:	230c      	movs	r3, #12
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	2201      	movs	r2, #1
     fc2:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     fc4:	230c      	movs	r3, #12
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	2200      	movs	r2, #0
     fca:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     fcc:	230c      	movs	r3, #12
     fce:	18fb      	adds	r3, r7, r3
     fd0:	2200      	movs	r2, #0
     fd2:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     fd4:	230c      	movs	r3, #12
     fd6:	18fb      	adds	r3, r7, r3
     fd8:	2200      	movs	r2, #0
     fda:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     fdc:	230c      	movs	r3, #12
     fde:	18fb      	adds	r3, r7, r3
     fe0:	6878      	ldr	r0, [r7, #4]
     fe2:	466a      	mov	r2, sp
     fe4:	68d9      	ldr	r1, [r3, #12]
     fe6:	6011      	str	r1, [r2, #0]
     fe8:	6819      	ldr	r1, [r3, #0]
     fea:	685a      	ldr	r2, [r3, #4]
     fec:	689b      	ldr	r3, [r3, #8]
     fee:	4c07      	ldr	r4, [pc, #28]	; (100c <at25dfx_chip_wake+0x84>)
     ff0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ff2:	687b      	ldr	r3, [r7, #4]
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	0018      	movs	r0, r3
     ff8:	4b05      	ldr	r3, [pc, #20]	; (1010 <at25dfx_chip_wake+0x88>)
     ffa:	4798      	blx	r3

	return STATUS_OK;
     ffc:	2300      	movs	r3, #0
     ffe:	0018      	movs	r0, r3
    1000:	46bd      	mov	sp, r7
    1002:	b009      	add	sp, #36	; 0x24
    1004:	bd90      	pop	{r4, r7, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00000365 	.word	0x00000365
    100c:	00000701 	.word	0x00000701
    1010:	000003ad 	.word	0x000003ad

00001014 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1014:	b580      	push	{r7, lr}
    1016:	b082      	sub	sp, #8
    1018:	af00      	add	r7, sp, #0
    101a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	2200      	movs	r2, #0
    1020:	701a      	strb	r2, [r3, #0]
}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	46bd      	mov	sp, r7
    1026:	b002      	add	sp, #8
    1028:	bd80      	pop	{r7, pc}
	...

0000102c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    102c:	b580      	push	{r7, lr}
    102e:	b082      	sub	sp, #8
    1030:	af00      	add	r7, sp, #0
    1032:	0002      	movs	r2, r0
    1034:	6039      	str	r1, [r7, #0]
    1036:	1dfb      	adds	r3, r7, #7
    1038:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    103a:	1dfb      	adds	r3, r7, #7
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	2b01      	cmp	r3, #1
    1040:	d00a      	beq.n	1058 <system_apb_clock_set_mask+0x2c>
    1042:	2b02      	cmp	r3, #2
    1044:	d00f      	beq.n	1066 <system_apb_clock_set_mask+0x3a>
    1046:	2b00      	cmp	r3, #0
    1048:	d114      	bne.n	1074 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    104a:	4b0e      	ldr	r3, [pc, #56]	; (1084 <system_apb_clock_set_mask+0x58>)
    104c:	4a0d      	ldr	r2, [pc, #52]	; (1084 <system_apb_clock_set_mask+0x58>)
    104e:	6991      	ldr	r1, [r2, #24]
    1050:	683a      	ldr	r2, [r7, #0]
    1052:	430a      	orrs	r2, r1
    1054:	619a      	str	r2, [r3, #24]
			break;
    1056:	e00f      	b.n	1078 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1058:	4b0a      	ldr	r3, [pc, #40]	; (1084 <system_apb_clock_set_mask+0x58>)
    105a:	4a0a      	ldr	r2, [pc, #40]	; (1084 <system_apb_clock_set_mask+0x58>)
    105c:	69d1      	ldr	r1, [r2, #28]
    105e:	683a      	ldr	r2, [r7, #0]
    1060:	430a      	orrs	r2, r1
    1062:	61da      	str	r2, [r3, #28]
			break;
    1064:	e008      	b.n	1078 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1066:	4b07      	ldr	r3, [pc, #28]	; (1084 <system_apb_clock_set_mask+0x58>)
    1068:	4a06      	ldr	r2, [pc, #24]	; (1084 <system_apb_clock_set_mask+0x58>)
    106a:	6a11      	ldr	r1, [r2, #32]
    106c:	683a      	ldr	r2, [r7, #0]
    106e:	430a      	orrs	r2, r1
    1070:	621a      	str	r2, [r3, #32]
			break;
    1072:	e001      	b.n	1078 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1074:	2317      	movs	r3, #23
    1076:	e000      	b.n	107a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1078:	2300      	movs	r3, #0
}
    107a:	0018      	movs	r0, r3
    107c:	46bd      	mov	sp, r7
    107e:	b002      	add	sp, #8
    1080:	bd80      	pop	{r7, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	40000400 	.word	0x40000400

00001088 <system_pinmux_get_config_defaults>:
{
    1088:	b580      	push	{r7, lr}
    108a:	b082      	sub	sp, #8
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1090:	687b      	ldr	r3, [r7, #4]
    1092:	2280      	movs	r2, #128	; 0x80
    1094:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2200      	movs	r2, #0
    109a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	2201      	movs	r2, #1
    10a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	2200      	movs	r2, #0
    10a6:	70da      	strb	r2, [r3, #3]
}
    10a8:	46c0      	nop			; (mov r8, r8)
    10aa:	46bd      	mov	sp, r7
    10ac:	b002      	add	sp, #8
    10ae:	bd80      	pop	{r7, pc}

000010b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    10b0:	b580      	push	{r7, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	af00      	add	r7, sp, #0
    10b6:	0002      	movs	r2, r0
    10b8:	1dfb      	adds	r3, r7, #7
    10ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    10bc:	1dfb      	adds	r3, r7, #7
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d002      	beq.n	10ca <system_voltage_reference_enable+0x1a>
    10c4:	2b01      	cmp	r3, #1
    10c6:	d007      	beq.n	10d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    10c8:	e00d      	b.n	10e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    10ca:	4b08      	ldr	r3, [pc, #32]	; (10ec <system_voltage_reference_enable+0x3c>)
    10cc:	4a07      	ldr	r2, [pc, #28]	; (10ec <system_voltage_reference_enable+0x3c>)
    10ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    10d0:	2102      	movs	r1, #2
    10d2:	430a      	orrs	r2, r1
    10d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    10d6:	e006      	b.n	10e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    10d8:	4b04      	ldr	r3, [pc, #16]	; (10ec <system_voltage_reference_enable+0x3c>)
    10da:	4a04      	ldr	r2, [pc, #16]	; (10ec <system_voltage_reference_enable+0x3c>)
    10dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    10de:	2104      	movs	r1, #4
    10e0:	430a      	orrs	r2, r1
    10e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    10e4:	46c0      	nop			; (mov r8, r8)
	}
}
    10e6:	46bd      	mov	sp, r7
    10e8:	b002      	add	sp, #8
    10ea:	bd80      	pop	{r7, pc}
    10ec:	40000800 	.word	0x40000800

000010f0 <adc_is_syncing>:
{
    10f0:	b580      	push	{r7, lr}
    10f2:	b084      	sub	sp, #16
    10f4:	af00      	add	r7, sp, #0
    10f6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    10fe:	68fb      	ldr	r3, [r7, #12]
    1100:	7e5b      	ldrb	r3, [r3, #25]
    1102:	b2db      	uxtb	r3, r3
    1104:	b25b      	sxtb	r3, r3
    1106:	2b00      	cmp	r3, #0
    1108:	da01      	bge.n	110e <adc_is_syncing+0x1e>
		return true;
    110a:	2301      	movs	r3, #1
    110c:	e000      	b.n	1110 <adc_is_syncing+0x20>
	return false;
    110e:	2300      	movs	r3, #0
}
    1110:	0018      	movs	r0, r3
    1112:	46bd      	mov	sp, r7
    1114:	b004      	add	sp, #16
    1116:	bd80      	pop	{r7, pc}

00001118 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1118:	b580      	push	{r7, lr}
    111a:	b082      	sub	sp, #8
    111c:	af00      	add	r7, sp, #0
    111e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1120:	687b      	ldr	r3, [r7, #4]
    1122:	2200      	movs	r2, #0
    1124:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	2200      	movs	r2, #0
    112a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	2200      	movs	r2, #0
    1130:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	2200      	movs	r2, #0
    1136:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	2200      	movs	r2, #0
    113c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	2200      	movs	r2, #0
    1142:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	2200      	movs	r2, #0
    1148:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	2200      	movs	r2, #0
    114e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	2200      	movs	r2, #0
    1154:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	22c0      	movs	r2, #192	; 0xc0
    115a:	0152      	lsls	r2, r2, #5
    115c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	2200      	movs	r2, #0
    1162:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	2200      	movs	r2, #0
    1168:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	2200      	movs	r2, #0
    116e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	2200      	movs	r2, #0
    1174:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    1176:	687b      	ldr	r3, [r7, #4]
    1178:	2200      	movs	r2, #0
    117a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	222a      	movs	r2, #42	; 0x2a
    1180:	2100      	movs	r1, #0
    1182:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	2200      	movs	r2, #0
    1188:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	2200      	movs	r2, #0
    118e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	2224      	movs	r2, #36	; 0x24
    1194:	2100      	movs	r1, #0
    1196:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	2200      	movs	r2, #0
    119c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	2200      	movs	r2, #0
    11a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	2200      	movs	r2, #0
    11a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	222b      	movs	r2, #43	; 0x2b
    11ae:	2100      	movs	r1, #0
    11b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	222c      	movs	r2, #44	; 0x2c
    11b6:	2100      	movs	r1, #0
    11b8:	5499      	strb	r1, [r3, r2]
}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	46bd      	mov	sp, r7
    11be:	b002      	add	sp, #8
    11c0:	bd80      	pop	{r7, pc}
	...

000011c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b098      	sub	sp, #96	; 0x60
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    11cc:	230c      	movs	r3, #12
    11ce:	18fa      	adds	r2, r7, r3
    11d0:	4b15      	ldr	r3, [pc, #84]	; (1228 <_adc_configure_ain_pin+0x64>)
    11d2:	0010      	movs	r0, r2
    11d4:	0019      	movs	r1, r3
    11d6:	2350      	movs	r3, #80	; 0x50
    11d8:	001a      	movs	r2, r3
    11da:	4b14      	ldr	r3, [pc, #80]	; (122c <_adc_configure_ain_pin+0x68>)
    11dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    11de:	4b14      	ldr	r3, [pc, #80]	; (1230 <_adc_configure_ain_pin+0x6c>)
    11e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    11e2:	687b      	ldr	r3, [r7, #4]
    11e4:	2b13      	cmp	r3, #19
    11e6:	d81a      	bhi.n	121e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    11e8:	230c      	movs	r3, #12
    11ea:	18fb      	adds	r3, r7, r3
    11ec:	687a      	ldr	r2, [r7, #4]
    11ee:	0092      	lsls	r2, r2, #2
    11f0:	58d3      	ldr	r3, [r2, r3]
    11f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    11f4:	2308      	movs	r3, #8
    11f6:	18fb      	adds	r3, r7, r3
    11f8:	0018      	movs	r0, r3
    11fa:	4b0e      	ldr	r3, [pc, #56]	; (1234 <_adc_configure_ain_pin+0x70>)
    11fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11fe:	2308      	movs	r3, #8
    1200:	18fb      	adds	r3, r7, r3
    1202:	2200      	movs	r2, #0
    1204:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    1206:	2308      	movs	r3, #8
    1208:	18fb      	adds	r3, r7, r3
    120a:	2201      	movs	r2, #1
    120c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    120e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1210:	b2db      	uxtb	r3, r3
    1212:	2208      	movs	r2, #8
    1214:	18ba      	adds	r2, r7, r2
    1216:	0011      	movs	r1, r2
    1218:	0018      	movs	r0, r3
    121a:	4b07      	ldr	r3, [pc, #28]	; (1238 <_adc_configure_ain_pin+0x74>)
    121c:	4798      	blx	r3
	}
}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	46bd      	mov	sp, r7
    1222:	b018      	add	sp, #96	; 0x60
    1224:	bd80      	pop	{r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	0000bb3c 	.word	0x0000bb3c
    122c:	00009c61 	.word	0x00009c61
    1230:	0000ffff 	.word	0x0000ffff
    1234:	00001089 	.word	0x00001089
    1238:	0000734d 	.word	0x0000734d

0000123c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    123c:	b5f0      	push	{r4, r5, r6, r7, lr}
    123e:	b089      	sub	sp, #36	; 0x24
    1240:	af00      	add	r7, sp, #0
    1242:	6078      	str	r0, [r7, #4]
    1244:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    1246:	231f      	movs	r3, #31
    1248:	18fb      	adds	r3, r7, r3
    124a:	2200      	movs	r2, #0
    124c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    124e:	2310      	movs	r3, #16
    1250:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1252:	2317      	movs	r3, #23
    1254:	18fb      	adds	r3, r7, r3
    1256:	2200      	movs	r2, #0
    1258:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1260:	230c      	movs	r3, #12
    1262:	18fb      	adds	r3, r7, r3
    1264:	0018      	movs	r0, r3
    1266:	4bce      	ldr	r3, [pc, #824]	; (15a0 <_adc_set_config+0x364>)
    1268:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    126a:	683b      	ldr	r3, [r7, #0]
    126c:	781a      	ldrb	r2, [r3, #0]
    126e:	230c      	movs	r3, #12
    1270:	18fb      	adds	r3, r7, r3
    1272:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1274:	230c      	movs	r3, #12
    1276:	18fb      	adds	r3, r7, r3
    1278:	0019      	movs	r1, r3
    127a:	201e      	movs	r0, #30
    127c:	4bc9      	ldr	r3, [pc, #804]	; (15a4 <_adc_set_config+0x368>)
    127e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1280:	201e      	movs	r0, #30
    1282:	4bc9      	ldr	r3, [pc, #804]	; (15a8 <_adc_set_config+0x36c>)
    1284:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    1286:	683b      	ldr	r3, [r7, #0]
    1288:	222c      	movs	r2, #44	; 0x2c
    128a:	5c9b      	ldrb	r3, [r3, r2]
    128c:	2b00      	cmp	r3, #0
    128e:	d040      	beq.n	1312 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1290:	2316      	movs	r3, #22
    1292:	18fb      	adds	r3, r7, r3
    1294:	683a      	ldr	r2, [r7, #0]
    1296:	212b      	movs	r1, #43	; 0x2b
    1298:	5c52      	ldrb	r2, [r2, r1]
    129a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    129c:	683b      	ldr	r3, [r7, #0]
    129e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    12a0:	2315      	movs	r3, #21
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	2216      	movs	r2, #22
    12a6:	18ba      	adds	r2, r7, r2
    12a8:	7812      	ldrb	r2, [r2, #0]
    12aa:	188a      	adds	r2, r1, r2
    12ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	222c      	movs	r2, #44	; 0x2c
    12b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    12b4:	230f      	movs	r3, #15
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	2215      	movs	r2, #21
    12ba:	18ba      	adds	r2, r7, r2
    12bc:	7812      	ldrb	r2, [r2, #0]
    12be:	188a      	adds	r2, r1, r2
    12c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    12c2:	e018      	b.n	12f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    12c4:	2316      	movs	r3, #22
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	781b      	ldrb	r3, [r3, #0]
    12ca:	220f      	movs	r2, #15
    12cc:	4013      	ands	r3, r2
    12ce:	683a      	ldr	r2, [r7, #0]
    12d0:	7b12      	ldrb	r2, [r2, #12]
    12d2:	189b      	adds	r3, r3, r2
    12d4:	0018      	movs	r0, r3
    12d6:	4bb5      	ldr	r3, [pc, #724]	; (15ac <_adc_set_config+0x370>)
    12d8:	4798      	blx	r3
			start_pin++;
    12da:	2315      	movs	r3, #21
    12dc:	18fb      	adds	r3, r7, r3
    12de:	781a      	ldrb	r2, [r3, #0]
    12e0:	2315      	movs	r3, #21
    12e2:	18fb      	adds	r3, r7, r3
    12e4:	3201      	adds	r2, #1
    12e6:	701a      	strb	r2, [r3, #0]
			offset++;
    12e8:	2316      	movs	r3, #22
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	2316      	movs	r3, #22
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	3201      	adds	r2, #1
    12f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    12f6:	2315      	movs	r3, #21
    12f8:	18fa      	adds	r2, r7, r3
    12fa:	230f      	movs	r3, #15
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	7812      	ldrb	r2, [r2, #0]
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	429a      	cmp	r2, r3
    1304:	d3de      	bcc.n	12c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	89db      	ldrh	r3, [r3, #14]
    130a:	0018      	movs	r0, r3
    130c:	4ba7      	ldr	r3, [pc, #668]	; (15ac <_adc_set_config+0x370>)
    130e:	4798      	blx	r3
    1310:	e009      	b.n	1326 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    1312:	683b      	ldr	r3, [r7, #0]
    1314:	7b1b      	ldrb	r3, [r3, #12]
    1316:	0018      	movs	r0, r3
    1318:	4ba4      	ldr	r3, [pc, #656]	; (15ac <_adc_set_config+0x370>)
    131a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	89db      	ldrh	r3, [r3, #14]
    1320:	0018      	movs	r0, r3
    1322:	4ba2      	ldr	r3, [pc, #648]	; (15ac <_adc_set_config+0x370>)
    1324:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1326:	683b      	ldr	r3, [r7, #0]
    1328:	7d5b      	ldrb	r3, [r3, #21]
    132a:	009b      	lsls	r3, r3, #2
    132c:	b2da      	uxtb	r2, r3
    132e:	693b      	ldr	r3, [r7, #16]
    1330:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1332:	683b      	ldr	r3, [r7, #0]
    1334:	7d9b      	ldrb	r3, [r3, #22]
    1336:	01db      	lsls	r3, r3, #7
    1338:	b25a      	sxtb	r2, r3
			(config->reference);
    133a:	683b      	ldr	r3, [r7, #0]
    133c:	785b      	ldrb	r3, [r3, #1]
    133e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1340:	4313      	orrs	r3, r2
    1342:	b25b      	sxtb	r3, r3
    1344:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    1346:	693b      	ldr	r3, [r7, #16]
    1348:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    134a:	683b      	ldr	r3, [r7, #0]
    134c:	791b      	ldrb	r3, [r3, #4]
    134e:	2b34      	cmp	r3, #52	; 0x34
    1350:	d846      	bhi.n	13e0 <_adc_set_config+0x1a4>
    1352:	009a      	lsls	r2, r3, #2
    1354:	4b96      	ldr	r3, [pc, #600]	; (15b0 <_adc_set_config+0x374>)
    1356:	18d3      	adds	r3, r2, r3
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    135c:	231f      	movs	r3, #31
    135e:	18fb      	adds	r3, r7, r3
    1360:	683a      	ldr	r2, [r7, #0]
    1362:	7c52      	ldrb	r2, [r2, #17]
    1364:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    1366:	2317      	movs	r3, #23
    1368:	18fb      	adds	r3, r7, r3
    136a:	683a      	ldr	r2, [r7, #0]
    136c:	7c12      	ldrb	r2, [r2, #16]
    136e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1370:	2310      	movs	r3, #16
    1372:	61bb      	str	r3, [r7, #24]
		break;
    1374:	e036      	b.n	13e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    1376:	231f      	movs	r3, #31
    1378:	18fb      	adds	r3, r7, r3
    137a:	2201      	movs	r2, #1
    137c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    137e:	2317      	movs	r3, #23
    1380:	18fb      	adds	r3, r7, r3
    1382:	2202      	movs	r2, #2
    1384:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1386:	2310      	movs	r3, #16
    1388:	61bb      	str	r3, [r7, #24]
		break;
    138a:	e02b      	b.n	13e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    138c:	231f      	movs	r3, #31
    138e:	18fb      	adds	r3, r7, r3
    1390:	2202      	movs	r2, #2
    1392:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1394:	2317      	movs	r3, #23
    1396:	18fb      	adds	r3, r7, r3
    1398:	2204      	movs	r2, #4
    139a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    139c:	2310      	movs	r3, #16
    139e:	61bb      	str	r3, [r7, #24]
		break;
    13a0:	e020      	b.n	13e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    13a2:	231f      	movs	r3, #31
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	2201      	movs	r2, #1
    13a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    13aa:	2317      	movs	r3, #23
    13ac:	18fb      	adds	r3, r7, r3
    13ae:	2206      	movs	r2, #6
    13b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13b2:	2310      	movs	r3, #16
    13b4:	61bb      	str	r3, [r7, #24]
		break;
    13b6:	e015      	b.n	13e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    13b8:	231f      	movs	r3, #31
    13ba:	18fb      	adds	r3, r7, r3
    13bc:	2200      	movs	r2, #0
    13be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    13c0:	2317      	movs	r3, #23
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	2208      	movs	r2, #8
    13c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    13c8:	2310      	movs	r3, #16
    13ca:	61bb      	str	r3, [r7, #24]
		break;
    13cc:	e00a      	b.n	13e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    13ce:	2330      	movs	r3, #48	; 0x30
    13d0:	61bb      	str	r3, [r7, #24]
		break;
    13d2:	e007      	b.n	13e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    13d4:	2320      	movs	r3, #32
    13d6:	61bb      	str	r3, [r7, #24]
		break;
    13d8:	e004      	b.n	13e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    13da:	2300      	movs	r3, #0
    13dc:	61bb      	str	r3, [r7, #24]
		break;
    13de:	e001      	b.n	13e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    13e0:	2317      	movs	r3, #23
    13e2:	e1ae      	b.n	1742 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    13e4:	231f      	movs	r3, #31
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	011b      	lsls	r3, r3, #4
    13ec:	b2db      	uxtb	r3, r3
    13ee:	2270      	movs	r2, #112	; 0x70
    13f0:	4013      	ands	r3, r2
    13f2:	b2da      	uxtb	r2, r3
    13f4:	2317      	movs	r3, #23
    13f6:	18fb      	adds	r3, r7, r3
    13f8:	781b      	ldrb	r3, [r3, #0]
    13fa:	4313      	orrs	r3, r2
    13fc:	b2da      	uxtb	r2, r3
    13fe:	693b      	ldr	r3, [r7, #16]
    1400:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1402:	683b      	ldr	r3, [r7, #0]
    1404:	7ddb      	ldrb	r3, [r3, #23]
    1406:	2b3f      	cmp	r3, #63	; 0x3f
    1408:	d901      	bls.n	140e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    140a:	2317      	movs	r3, #23
    140c:	e199      	b.n	1742 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    140e:	683b      	ldr	r3, [r7, #0]
    1410:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    1412:	693b      	ldr	r3, [r7, #16]
    1414:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	0018      	movs	r0, r3
    141c:	4b65      	ldr	r3, [pc, #404]	; (15b4 <_adc_set_config+0x378>)
    141e:	4798      	blx	r3
    1420:	1e03      	subs	r3, r0, #0
    1422:	d1f9      	bne.n	1418 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    1424:	683b      	ldr	r3, [r7, #0]
    1426:	885a      	ldrh	r2, [r3, #2]
    1428:	69bb      	ldr	r3, [r7, #24]
    142a:	b29b      	uxth	r3, r3
    142c:	4313      	orrs	r3, r2
    142e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1430:	683b      	ldr	r3, [r7, #0]
    1432:	2124      	movs	r1, #36	; 0x24
    1434:	5c5b      	ldrb	r3, [r3, r1]
    1436:	b29b      	uxth	r3, r3
    1438:	00db      	lsls	r3, r3, #3
    143a:	b29b      	uxth	r3, r3
			resolution |
    143c:	4313      	orrs	r3, r2
    143e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1440:	683b      	ldr	r3, [r7, #0]
    1442:	7d1b      	ldrb	r3, [r3, #20]
    1444:	b29b      	uxth	r3, r3
    1446:	009b      	lsls	r3, r3, #2
    1448:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    144a:	4313      	orrs	r3, r2
    144c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    144e:	683b      	ldr	r3, [r7, #0]
    1450:	7c9b      	ldrb	r3, [r3, #18]
    1452:	b29b      	uxth	r3, r3
    1454:	18db      	adds	r3, r3, r3
    1456:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1458:	4313      	orrs	r3, r2
    145a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	7cdb      	ldrb	r3, [r3, #19]
    1460:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1462:	4313      	orrs	r3, r2
    1464:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    1466:	693b      	ldr	r3, [r7, #16]
    1468:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	7e1b      	ldrb	r3, [r3, #24]
    146e:	2b00      	cmp	r3, #0
    1470:	d100      	bne.n	1474 <_adc_set_config+0x238>
    1472:	e0c4      	b.n	15fe <_adc_set_config+0x3c2>
		switch (resolution) {
    1474:	69bb      	ldr	r3, [r7, #24]
    1476:	2b10      	cmp	r3, #16
    1478:	d100      	bne.n	147c <_adc_set_config+0x240>
    147a:	e076      	b.n	156a <_adc_set_config+0x32e>
    147c:	d802      	bhi.n	1484 <_adc_set_config+0x248>
    147e:	2b00      	cmp	r3, #0
    1480:	d04d      	beq.n	151e <_adc_set_config+0x2e2>
    1482:	e0bc      	b.n	15fe <_adc_set_config+0x3c2>
    1484:	2b20      	cmp	r3, #32
    1486:	d023      	beq.n	14d0 <_adc_set_config+0x294>
    1488:	2b30      	cmp	r3, #48	; 0x30
    148a:	d000      	beq.n	148e <_adc_set_config+0x252>
    148c:	e0b7      	b.n	15fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    148e:	683b      	ldr	r3, [r7, #0]
    1490:	7cdb      	ldrb	r3, [r3, #19]
    1492:	2b00      	cmp	r3, #0
    1494:	d011      	beq.n	14ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    1496:	683b      	ldr	r3, [r7, #0]
    1498:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    149a:	2b7f      	cmp	r3, #127	; 0x7f
    149c:	dc0b      	bgt.n	14b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    149e:	683b      	ldr	r3, [r7, #0]
    14a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    14a2:	3380      	adds	r3, #128	; 0x80
    14a4:	db07      	blt.n	14b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    14a6:	683b      	ldr	r3, [r7, #0]
    14a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    14aa:	2b7f      	cmp	r3, #127	; 0x7f
    14ac:	dc03      	bgt.n	14b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    14b2:	3380      	adds	r3, #128	; 0x80
    14b4:	da01      	bge.n	14ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14b6:	2317      	movs	r3, #23
    14b8:	e143      	b.n	1742 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    14ba:	683b      	ldr	r3, [r7, #0]
    14bc:	69db      	ldr	r3, [r3, #28]
    14be:	2bff      	cmp	r3, #255	; 0xff
    14c0:	dc04      	bgt.n	14cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    14c2:	683b      	ldr	r3, [r7, #0]
    14c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    14c6:	2bff      	cmp	r3, #255	; 0xff
    14c8:	dc00      	bgt.n	14cc <_adc_set_config+0x290>
    14ca:	e091      	b.n	15f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    14cc:	2317      	movs	r3, #23
    14ce:	e138      	b.n	1742 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    14d0:	683b      	ldr	r3, [r7, #0]
    14d2:	7cdb      	ldrb	r3, [r3, #19]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d015      	beq.n	1504 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    14d8:	683b      	ldr	r3, [r7, #0]
    14da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    14dc:	4a36      	ldr	r2, [pc, #216]	; (15b8 <_adc_set_config+0x37c>)
    14de:	4293      	cmp	r3, r2
    14e0:	dc0e      	bgt.n	1500 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    14e2:	683b      	ldr	r3, [r7, #0]
    14e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    14e6:	4a35      	ldr	r2, [pc, #212]	; (15bc <_adc_set_config+0x380>)
    14e8:	4293      	cmp	r3, r2
    14ea:	db09      	blt.n	1500 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    14ec:	683b      	ldr	r3, [r7, #0]
    14ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    14f0:	4a31      	ldr	r2, [pc, #196]	; (15b8 <_adc_set_config+0x37c>)
    14f2:	4293      	cmp	r3, r2
    14f4:	dc04      	bgt.n	1500 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    14f6:	683b      	ldr	r3, [r7, #0]
    14f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    14fa:	4a30      	ldr	r2, [pc, #192]	; (15bc <_adc_set_config+0x380>)
    14fc:	4293      	cmp	r3, r2
    14fe:	da01      	bge.n	1504 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1500:	2317      	movs	r3, #23
    1502:	e11e      	b.n	1742 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    1504:	683b      	ldr	r3, [r7, #0]
    1506:	69db      	ldr	r3, [r3, #28]
    1508:	4a2d      	ldr	r2, [pc, #180]	; (15c0 <_adc_set_config+0x384>)
    150a:	4293      	cmp	r3, r2
    150c:	dc05      	bgt.n	151a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    150e:	683b      	ldr	r3, [r7, #0]
    1510:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    1512:	4a2b      	ldr	r2, [pc, #172]	; (15c0 <_adc_set_config+0x384>)
    1514:	4293      	cmp	r3, r2
    1516:	dc00      	bgt.n	151a <_adc_set_config+0x2de>
    1518:	e06c      	b.n	15f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    151a:	2317      	movs	r3, #23
    151c:	e111      	b.n	1742 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    151e:	683b      	ldr	r3, [r7, #0]
    1520:	7cdb      	ldrb	r3, [r3, #19]
    1522:	2b00      	cmp	r3, #0
    1524:	d015      	beq.n	1552 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    1526:	683b      	ldr	r3, [r7, #0]
    1528:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    152a:	4a26      	ldr	r2, [pc, #152]	; (15c4 <_adc_set_config+0x388>)
    152c:	4293      	cmp	r3, r2
    152e:	dc0e      	bgt.n	154e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    1530:	683b      	ldr	r3, [r7, #0]
    1532:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    1534:	4a24      	ldr	r2, [pc, #144]	; (15c8 <_adc_set_config+0x38c>)
    1536:	4293      	cmp	r3, r2
    1538:	db09      	blt.n	154e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    153a:	683b      	ldr	r3, [r7, #0]
    153c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    153e:	4a21      	ldr	r2, [pc, #132]	; (15c4 <_adc_set_config+0x388>)
    1540:	4293      	cmp	r3, r2
    1542:	dc04      	bgt.n	154e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    1544:	683b      	ldr	r3, [r7, #0]
    1546:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    1548:	4a1f      	ldr	r2, [pc, #124]	; (15c8 <_adc_set_config+0x38c>)
    154a:	4293      	cmp	r3, r2
    154c:	da01      	bge.n	1552 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    154e:	2317      	movs	r3, #23
    1550:	e0f7      	b.n	1742 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    1552:	683b      	ldr	r3, [r7, #0]
    1554:	69db      	ldr	r3, [r3, #28]
    1556:	4a1d      	ldr	r2, [pc, #116]	; (15cc <_adc_set_config+0x390>)
    1558:	4293      	cmp	r3, r2
    155a:	dc04      	bgt.n	1566 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    155c:	683b      	ldr	r3, [r7, #0]
    155e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    1560:	4a1a      	ldr	r2, [pc, #104]	; (15cc <_adc_set_config+0x390>)
    1562:	4293      	cmp	r3, r2
    1564:	dd48      	ble.n	15f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1566:	2317      	movs	r3, #23
    1568:	e0eb      	b.n	1742 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    156a:	683b      	ldr	r3, [r7, #0]
    156c:	7cdb      	ldrb	r3, [r3, #19]
    156e:	2b00      	cmp	r3, #0
    1570:	d032      	beq.n	15d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    1572:	683b      	ldr	r3, [r7, #0]
    1574:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    1576:	4a16      	ldr	r2, [pc, #88]	; (15d0 <_adc_set_config+0x394>)
    1578:	4293      	cmp	r3, r2
    157a:	dc0e      	bgt.n	159a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    1580:	4a14      	ldr	r2, [pc, #80]	; (15d4 <_adc_set_config+0x398>)
    1582:	4293      	cmp	r3, r2
    1584:	db09      	blt.n	159a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    1586:	683b      	ldr	r3, [r7, #0]
    1588:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    158a:	4a11      	ldr	r2, [pc, #68]	; (15d0 <_adc_set_config+0x394>)
    158c:	4293      	cmp	r3, r2
    158e:	dc04      	bgt.n	159a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    1590:	683b      	ldr	r3, [r7, #0]
    1592:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    1594:	4a0f      	ldr	r2, [pc, #60]	; (15d4 <_adc_set_config+0x398>)
    1596:	4293      	cmp	r3, r2
    1598:	da1e      	bge.n	15d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    159a:	2317      	movs	r3, #23
    159c:	e0d1      	b.n	1742 <_adc_set_config+0x506>
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	00001015 	.word	0x00001015
    15a4:	00007061 	.word	0x00007061
    15a8:	000070a5 	.word	0x000070a5
    15ac:	000011c5 	.word	0x000011c5
    15b0:	0000bb8c 	.word	0x0000bb8c
    15b4:	000010f1 	.word	0x000010f1
    15b8:	000001ff 	.word	0x000001ff
    15bc:	fffffe00 	.word	0xfffffe00
    15c0:	000003ff 	.word	0x000003ff
    15c4:	000007ff 	.word	0x000007ff
    15c8:	fffff800 	.word	0xfffff800
    15cc:	00000fff 	.word	0x00000fff
    15d0:	00007fff 	.word	0x00007fff
    15d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    15d8:	683b      	ldr	r3, [r7, #0]
    15da:	69db      	ldr	r3, [r3, #28]
    15dc:	4a5b      	ldr	r2, [pc, #364]	; (174c <_adc_set_config+0x510>)
    15de:	4293      	cmp	r3, r2
    15e0:	dc04      	bgt.n	15ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    15e2:	683b      	ldr	r3, [r7, #0]
    15e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    15e6:	4a59      	ldr	r2, [pc, #356]	; (174c <_adc_set_config+0x510>)
    15e8:	4293      	cmp	r3, r2
    15ea:	dd07      	ble.n	15fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    15ec:	2317      	movs	r3, #23
    15ee:	e0a8      	b.n	1742 <_adc_set_config+0x506>
			break;
    15f0:	46c0      	nop			; (mov r8, r8)
    15f2:	e004      	b.n	15fe <_adc_set_config+0x3c2>
			break;
    15f4:	46c0      	nop			; (mov r8, r8)
    15f6:	e002      	b.n	15fe <_adc_set_config+0x3c2>
			break;
    15f8:	46c0      	nop			; (mov r8, r8)
    15fa:	e000      	b.n	15fe <_adc_set_config+0x3c2>
			}
			break;
    15fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	0018      	movs	r0, r3
    1604:	4b52      	ldr	r3, [pc, #328]	; (1750 <_adc_set_config+0x514>)
    1606:	4798      	blx	r3
    1608:	1e03      	subs	r3, r0, #0
    160a:	d1f9      	bne.n	1600 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    160c:	683b      	ldr	r3, [r7, #0]
    160e:	7e1a      	ldrb	r2, [r3, #24]
    1610:	693b      	ldr	r3, [r7, #16]
    1612:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    1614:	46c0      	nop			; (mov r8, r8)
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	0018      	movs	r0, r3
    161a:	4b4d      	ldr	r3, [pc, #308]	; (1750 <_adc_set_config+0x514>)
    161c:	4798      	blx	r3
    161e:	1e03      	subs	r3, r0, #0
    1620:	d1f9      	bne.n	1616 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    1622:	683b      	ldr	r3, [r7, #0]
    1624:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    1626:	b29a      	uxth	r2, r3
    1628:	693b      	ldr	r3, [r7, #16]
    162a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    162c:	46c0      	nop			; (mov r8, r8)
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	0018      	movs	r0, r3
    1632:	4b47      	ldr	r3, [pc, #284]	; (1750 <_adc_set_config+0x514>)
    1634:	4798      	blx	r3
    1636:	1e03      	subs	r3, r0, #0
    1638:	d1f9      	bne.n	162e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    163a:	683b      	ldr	r3, [r7, #0]
    163c:	6a1b      	ldr	r3, [r3, #32]
    163e:	b29a      	uxth	r2, r3
    1640:	693b      	ldr	r3, [r7, #16]
    1642:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1644:	2314      	movs	r3, #20
    1646:	18fb      	adds	r3, r7, r3
    1648:	683a      	ldr	r2, [r7, #0]
    164a:	212c      	movs	r1, #44	; 0x2c
    164c:	5c52      	ldrb	r2, [r2, r1]
    164e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    1650:	2314      	movs	r3, #20
    1652:	18fb      	adds	r3, r7, r3
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	2b00      	cmp	r3, #0
    1658:	d006      	beq.n	1668 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    165a:	2314      	movs	r3, #20
    165c:	18fb      	adds	r3, r7, r3
    165e:	781a      	ldrb	r2, [r3, #0]
    1660:	2314      	movs	r3, #20
    1662:	18fb      	adds	r3, r7, r3
    1664:	3a01      	subs	r2, #1
    1666:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1668:	2314      	movs	r3, #20
    166a:	18fb      	adds	r3, r7, r3
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	2b0f      	cmp	r3, #15
    1670:	d804      	bhi.n	167c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1672:	683b      	ldr	r3, [r7, #0]
    1674:	222b      	movs	r2, #43	; 0x2b
    1676:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1678:	2b0f      	cmp	r3, #15
    167a:	d901      	bls.n	1680 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    167c:	2317      	movs	r3, #23
    167e:	e060      	b.n	1742 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    1680:	46c0      	nop			; (mov r8, r8)
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	0018      	movs	r0, r3
    1686:	4b32      	ldr	r3, [pc, #200]	; (1750 <_adc_set_config+0x514>)
    1688:	4798      	blx	r3
    168a:	1e03      	subs	r3, r0, #0
    168c:	d1f9      	bne.n	1682 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    168e:	683b      	ldr	r3, [r7, #0]
    1690:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    1692:	683a      	ldr	r2, [r7, #0]
    1694:	212b      	movs	r1, #43	; 0x2b
    1696:	5c52      	ldrb	r2, [r2, r1]
    1698:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    169a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    169c:	2214      	movs	r2, #20
    169e:	18ba      	adds	r2, r7, r2
    16a0:	7812      	ldrb	r2, [r2, #0]
    16a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    16a4:	4313      	orrs	r3, r2
			config->negative_input |
    16a6:	683a      	ldr	r2, [r7, #0]
    16a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    16aa:	4313      	orrs	r3, r2
			config->positive_input;
    16ac:	683a      	ldr	r2, [r7, #0]
    16ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    16b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    16b2:	693b      	ldr	r3, [r7, #16]
    16b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    16b6:	683b      	ldr	r3, [r7, #0]
    16b8:	222a      	movs	r2, #42	; 0x2a
    16ba:	5c9a      	ldrb	r2, [r3, r2]
    16bc:	693b      	ldr	r3, [r7, #16]
    16be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    16c0:	693b      	ldr	r3, [r7, #16]
    16c2:	220f      	movs	r2, #15
    16c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    16c6:	683b      	ldr	r3, [r7, #0]
    16c8:	2224      	movs	r2, #36	; 0x24
    16ca:	5c9b      	ldrb	r3, [r3, r2]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d01e      	beq.n	170e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    16d0:	683b      	ldr	r3, [r7, #0]
    16d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    16d4:	4a1f      	ldr	r2, [pc, #124]	; (1754 <_adc_set_config+0x518>)
    16d6:	4293      	cmp	r3, r2
    16d8:	d901      	bls.n	16de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    16da:	2317      	movs	r3, #23
    16dc:	e031      	b.n	1742 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    16e2:	693b      	ldr	r3, [r7, #16]
    16e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    16e6:	683b      	ldr	r3, [r7, #0]
    16e8:	2228      	movs	r2, #40	; 0x28
    16ea:	5e9b      	ldrsh	r3, [r3, r2]
    16ec:	4a1a      	ldr	r2, [pc, #104]	; (1758 <_adc_set_config+0x51c>)
    16ee:	4293      	cmp	r3, r2
    16f0:	dc05      	bgt.n	16fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    16f2:	683b      	ldr	r3, [r7, #0]
    16f4:	2228      	movs	r2, #40	; 0x28
    16f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    16f8:	4a18      	ldr	r2, [pc, #96]	; (175c <_adc_set_config+0x520>)
    16fa:	4293      	cmp	r3, r2
    16fc:	da01      	bge.n	1702 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    16fe:	2317      	movs	r3, #23
    1700:	e01f      	b.n	1742 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	2228      	movs	r2, #40	; 0x28
    1706:	5e9b      	ldrsh	r3, [r3, r2]
    1708:	b29a      	uxth	r2, r3
    170a:	693b      	ldr	r3, [r7, #16]
    170c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    170e:	4b14      	ldr	r3, [pc, #80]	; (1760 <_adc_set_config+0x524>)
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	08db      	lsrs	r3, r3, #3
    1714:	b29b      	uxth	r3, r3
    1716:	021b      	lsls	r3, r3, #8
    1718:	b29a      	uxth	r2, r3
    171a:	23e0      	movs	r3, #224	; 0xe0
    171c:	00db      	lsls	r3, r3, #3
    171e:	4013      	ands	r3, r2
    1720:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    1722:	4b10      	ldr	r3, [pc, #64]	; (1764 <_adc_set_config+0x528>)
    1724:	685c      	ldr	r4, [r3, #4]
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	0161      	lsls	r1, r4, #5
    172a:	0edd      	lsrs	r5, r3, #27
    172c:	430d      	orrs	r5, r1
    172e:	0ee6      	lsrs	r6, r4, #27
    1730:	b2ab      	uxth	r3, r5
    1732:	21ff      	movs	r1, #255	; 0xff
    1734:	400b      	ands	r3, r1
    1736:	b29b      	uxth	r3, r3
			) |
    1738:	4313      	orrs	r3, r2
    173a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    173c:	693b      	ldr	r3, [r7, #16]
    173e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1740:	2300      	movs	r3, #0
}
    1742:	0018      	movs	r0, r3
    1744:	46bd      	mov	sp, r7
    1746:	b009      	add	sp, #36	; 0x24
    1748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	0000ffff 	.word	0x0000ffff
    1750:	000010f1 	.word	0x000010f1
    1754:	00000fff 	.word	0x00000fff
    1758:	000007ff 	.word	0x000007ff
    175c:	fffff800 	.word	0xfffff800
    1760:	00806024 	.word	0x00806024
    1764:	00806020 	.word	0x00806020

00001768 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1768:	b580      	push	{r7, lr}
    176a:	b086      	sub	sp, #24
    176c:	af00      	add	r7, sp, #0
    176e:	60f8      	str	r0, [r7, #12]
    1770:	60b9      	str	r1, [r7, #8]
    1772:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	68ba      	ldr	r2, [r7, #8]
    1778:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    177a:	2380      	movs	r3, #128	; 0x80
    177c:	025b      	lsls	r3, r3, #9
    177e:	0019      	movs	r1, r3
    1780:	2002      	movs	r0, #2
    1782:	4b32      	ldr	r3, [pc, #200]	; (184c <adc_init+0xe4>)
    1784:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1786:	68bb      	ldr	r3, [r7, #8]
    1788:	781b      	ldrb	r3, [r3, #0]
    178a:	b2db      	uxtb	r3, r3
    178c:	001a      	movs	r2, r3
    178e:	2301      	movs	r3, #1
    1790:	4013      	ands	r3, r2
    1792:	d001      	beq.n	1798 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1794:	2305      	movs	r3, #5
    1796:	e055      	b.n	1844 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1798:	68bb      	ldr	r3, [r7, #8]
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	b2db      	uxtb	r3, r3
    179e:	001a      	movs	r2, r3
    17a0:	2302      	movs	r3, #2
    17a2:	4013      	ands	r3, r2
    17a4:	d001      	beq.n	17aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    17a6:	231c      	movs	r3, #28
    17a8:	e04c      	b.n	1844 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	785a      	ldrb	r2, [r3, #1]
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	791b      	ldrb	r3, [r3, #4]
    17b6:	2b00      	cmp	r3, #0
    17b8:	d102      	bne.n	17c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    17ba:	2001      	movs	r0, #1
    17bc:	4b24      	ldr	r3, [pc, #144]	; (1850 <adc_init+0xe8>)
    17be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    17c0:	2317      	movs	r3, #23
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	2200      	movs	r2, #0
    17c6:	701a      	strb	r2, [r3, #0]
    17c8:	e00e      	b.n	17e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    17ca:	2317      	movs	r3, #23
    17cc:	18fb      	adds	r3, r7, r3
    17ce:	781a      	ldrb	r2, [r3, #0]
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	3202      	adds	r2, #2
    17d4:	0092      	lsls	r2, r2, #2
    17d6:	2100      	movs	r1, #0
    17d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    17da:	2317      	movs	r3, #23
    17dc:	18fb      	adds	r3, r7, r3
    17de:	781a      	ldrb	r2, [r3, #0]
    17e0:	2317      	movs	r3, #23
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	3201      	adds	r2, #1
    17e6:	701a      	strb	r2, [r3, #0]
    17e8:	2317      	movs	r3, #23
    17ea:	18fb      	adds	r3, r7, r3
    17ec:	781b      	ldrb	r3, [r3, #0]
    17ee:	2b02      	cmp	r3, #2
    17f0:	d9eb      	bls.n	17ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	2200      	movs	r2, #0
    17f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    17f8:	68fb      	ldr	r3, [r7, #12]
    17fa:	2200      	movs	r2, #0
    17fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    17fe:	68fb      	ldr	r3, [r7, #12]
    1800:	2200      	movs	r2, #0
    1802:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    1804:	68fb      	ldr	r3, [r7, #12]
    1806:	2200      	movs	r2, #0
    1808:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    180a:	4b12      	ldr	r3, [pc, #72]	; (1854 <adc_init+0xec>)
    180c:	68fa      	ldr	r2, [r7, #12]
    180e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1810:	687b      	ldr	r3, [r7, #4]
    1812:	222a      	movs	r2, #42	; 0x2a
    1814:	5c9b      	ldrb	r3, [r3, r2]
    1816:	2b00      	cmp	r3, #0
    1818:	d10a      	bne.n	1830 <adc_init+0xc8>
			!config->freerunning) {
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	7d1b      	ldrb	r3, [r3, #20]
    181e:	2201      	movs	r2, #1
    1820:	4053      	eors	r3, r2
    1822:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1824:	2b00      	cmp	r3, #0
    1826:	d003      	beq.n	1830 <adc_init+0xc8>
		module_inst->software_trigger = true;
    1828:	68fb      	ldr	r3, [r7, #12]
    182a:	2201      	movs	r2, #1
    182c:	775a      	strb	r2, [r3, #29]
    182e:	e002      	b.n	1836 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	2200      	movs	r2, #0
    1834:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    1836:	687a      	ldr	r2, [r7, #4]
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	0011      	movs	r1, r2
    183c:	0018      	movs	r0, r3
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <adc_init+0xf0>)
    1840:	4798      	blx	r3
    1842:	0003      	movs	r3, r0
}
    1844:	0018      	movs	r0, r3
    1846:	46bd      	mov	sp, r7
    1848:	b006      	add	sp, #24
    184a:	bd80      	pop	{r7, pc}
    184c:	0000102d 	.word	0x0000102d
    1850:	000010b1 	.word	0x000010b1
    1854:	200002f4 	.word	0x200002f4
    1858:	0000123d 	.word	0x0000123d

0000185c <adc_is_syncing>:
{
    185c:	b580      	push	{r7, lr}
    185e:	b084      	sub	sp, #16
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    186a:	68fb      	ldr	r3, [r7, #12]
    186c:	7e5b      	ldrb	r3, [r3, #25]
    186e:	b2db      	uxtb	r3, r3
    1870:	b25b      	sxtb	r3, r3
    1872:	2b00      	cmp	r3, #0
    1874:	da01      	bge.n	187a <adc_is_syncing+0x1e>
		return true;
    1876:	2301      	movs	r3, #1
    1878:	e000      	b.n	187c <adc_is_syncing+0x20>
	return false;
    187a:	2300      	movs	r3, #0
}
    187c:	0018      	movs	r0, r3
    187e:	46bd      	mov	sp, r7
    1880:	b004      	add	sp, #16
    1882:	bd80      	pop	{r7, pc}

00001884 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1884:	b580      	push	{r7, lr}
    1886:	b084      	sub	sp, #16
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	0018      	movs	r0, r3
    1898:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <adc_start_conversion+0x44>)
    189a:	4798      	blx	r3
    189c:	1e03      	subs	r3, r0, #0
    189e:	d1f9      	bne.n	1894 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    18a0:	68fb      	ldr	r3, [r7, #12]
    18a2:	7b1b      	ldrb	r3, [r3, #12]
    18a4:	b2db      	uxtb	r3, r3
    18a6:	2202      	movs	r2, #2
    18a8:	4313      	orrs	r3, r2
    18aa:	b2da      	uxtb	r2, r3
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    18b0:	46c0      	nop			; (mov r8, r8)
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	0018      	movs	r0, r3
    18b6:	4b04      	ldr	r3, [pc, #16]	; (18c8 <adc_start_conversion+0x44>)
    18b8:	4798      	blx	r3
    18ba:	1e03      	subs	r3, r0, #0
    18bc:	d1f9      	bne.n	18b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	46bd      	mov	sp, r7
    18c2:	b004      	add	sp, #16
    18c4:	bd80      	pop	{r7, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	0000185d 	.word	0x0000185d

000018cc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b084      	sub	sp, #16
    18d0:	af00      	add	r7, sp, #0
    18d2:	6078      	str	r0, [r7, #4]
    18d4:	000a      	movs	r2, r1
    18d6:	1cfb      	adds	r3, r7, #3
    18d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    18e0:	68fb      	ldr	r3, [r7, #12]
    18e2:	1cfa      	adds	r2, r7, #3
    18e4:	7812      	ldrb	r2, [r2, #0]
    18e6:	759a      	strb	r2, [r3, #22]
}
    18e8:	46c0      	nop			; (mov r8, r8)
    18ea:	46bd      	mov	sp, r7
    18ec:	b004      	add	sp, #16
    18ee:	bd80      	pop	{r7, pc}

000018f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	b084      	sub	sp, #16
    18f4:	af00      	add	r7, sp, #0
    18f6:	0002      	movs	r2, r0
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    18fc:	1dfb      	adds	r3, r7, #7
    18fe:	781a      	ldrb	r2, [r3, #0]
    1900:	4b44      	ldr	r3, [pc, #272]	; (1a14 <_adc_interrupt_handler+0x124>)
    1902:	0092      	lsls	r2, r2, #2
    1904:	58d3      	ldr	r3, [r2, r3]
    1906:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    1908:	68fb      	ldr	r3, [r7, #12]
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	7e1b      	ldrb	r3, [r3, #24]
    190e:	b2db      	uxtb	r3, r3
    1910:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    1912:	68bb      	ldr	r3, [r7, #8]
    1914:	2201      	movs	r2, #1
    1916:	4013      	ands	r3, r2
    1918:	d045      	beq.n	19a6 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    191a:	68fb      	ldr	r3, [r7, #12]
    191c:	7edb      	ldrb	r3, [r3, #27]
    191e:	001a      	movs	r2, r3
    1920:	2301      	movs	r3, #1
    1922:	4013      	ands	r3, r2
    1924:	d03f      	beq.n	19a6 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	7e9b      	ldrb	r3, [r3, #26]
    192a:	001a      	movs	r2, r3
    192c:	2301      	movs	r3, #1
    192e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1930:	d039      	beq.n	19a6 <_adc_interrupt_handler+0xb6>
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1932:	68fb      	ldr	r3, [r7, #12]
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	2201      	movs	r2, #1
    1938:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	68fb      	ldr	r3, [r7, #12]
    193e:	0018      	movs	r0, r3
    1940:	4b35      	ldr	r3, [pc, #212]	; (1a18 <_adc_interrupt_handler+0x128>)
    1942:	4798      	blx	r3
    1944:	1e03      	subs	r3, r0, #0
    1946:	d1f9      	bne.n	193c <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	695b      	ldr	r3, [r3, #20]
    194c:	1c99      	adds	r1, r3, #2
    194e:	68fa      	ldr	r2, [r7, #12]
    1950:	6151      	str	r1, [r2, #20]
    1952:	68fa      	ldr	r2, [r7, #12]
    1954:	6812      	ldr	r2, [r2, #0]
    1956:	8b52      	ldrh	r2, [r2, #26]
    1958:	b292      	uxth	r2, r2
    195a:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    195c:	68fb      	ldr	r3, [r7, #12]
    195e:	8b1b      	ldrh	r3, [r3, #24]
    1960:	b29b      	uxth	r3, r3
    1962:	3b01      	subs	r3, #1
    1964:	b29b      	uxth	r3, r3
    1966:	68fa      	ldr	r2, [r7, #12]
    1968:	1c19      	adds	r1, r3, #0
    196a:	8311      	strh	r1, [r2, #24]
    196c:	2b00      	cmp	r3, #0
    196e:	d008      	beq.n	1982 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    1970:	68fb      	ldr	r3, [r7, #12]
    1972:	7f5b      	ldrb	r3, [r3, #29]
    1974:	2b00      	cmp	r3, #0
    1976:	d016      	beq.n	19a6 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	0018      	movs	r0, r3
    197c:	4b27      	ldr	r3, [pc, #156]	; (1a1c <_adc_interrupt_handler+0x12c>)
    197e:	4798      	blx	r3
    1980:	e011      	b.n	19a6 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	7f1b      	ldrb	r3, [r3, #28]
    1986:	b2db      	uxtb	r3, r3
    1988:	2b05      	cmp	r3, #5
    198a:	d10c      	bne.n	19a6 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    198c:	68fb      	ldr	r3, [r7, #12]
    198e:	2200      	movs	r2, #0
    1990:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    1992:	68fb      	ldr	r3, [r7, #12]
    1994:	2101      	movs	r1, #1
    1996:	0018      	movs	r0, r3
    1998:	4b21      	ldr	r3, [pc, #132]	; (1a20 <_adc_interrupt_handler+0x130>)
    199a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    199c:	68fb      	ldr	r3, [r7, #12]
    199e:	689b      	ldr	r3, [r3, #8]
    19a0:	68fa      	ldr	r2, [r7, #12]
    19a2:	0010      	movs	r0, r2
    19a4:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    19a6:	68bb      	ldr	r3, [r7, #8]
    19a8:	2204      	movs	r2, #4
    19aa:	4013      	ands	r3, r2
    19ac:	d014      	beq.n	19d8 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	2204      	movs	r2, #4
    19b4:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    19b6:	68fb      	ldr	r3, [r7, #12]
    19b8:	7edb      	ldrb	r3, [r3, #27]
    19ba:	001a      	movs	r2, r3
    19bc:	2302      	movs	r3, #2
    19be:	4013      	ands	r3, r2
    19c0:	d00a      	beq.n	19d8 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    19c2:	68fb      	ldr	r3, [r7, #12]
    19c4:	7e9b      	ldrb	r3, [r3, #26]
    19c6:	001a      	movs	r2, r3
    19c8:	2302      	movs	r3, #2
    19ca:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    19cc:	d004      	beq.n	19d8 <_adc_interrupt_handler+0xe8>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    19ce:	68fb      	ldr	r3, [r7, #12]
    19d0:	68db      	ldr	r3, [r3, #12]
    19d2:	68fa      	ldr	r2, [r7, #12]
    19d4:	0010      	movs	r0, r2
    19d6:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    19d8:	68bb      	ldr	r3, [r7, #8]
    19da:	2202      	movs	r2, #2
    19dc:	4013      	ands	r3, r2
    19de:	d014      	beq.n	1a0a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	2202      	movs	r2, #2
    19e6:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    19e8:	68fb      	ldr	r3, [r7, #12]
    19ea:	7edb      	ldrb	r3, [r3, #27]
    19ec:	001a      	movs	r2, r3
    19ee:	2304      	movs	r3, #4
    19f0:	4013      	ands	r3, r2
    19f2:	d00a      	beq.n	1a0a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	7e9b      	ldrb	r3, [r3, #26]
    19f8:	001a      	movs	r2, r3
    19fa:	2304      	movs	r3, #4
    19fc:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    19fe:	d004      	beq.n	1a0a <_adc_interrupt_handler+0x11a>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	691b      	ldr	r3, [r3, #16]
    1a04:	68fa      	ldr	r2, [r7, #12]
    1a06:	0010      	movs	r0, r2
    1a08:	4798      	blx	r3
		}
	}
}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	46bd      	mov	sp, r7
    1a0e:	b004      	add	sp, #16
    1a10:	bd80      	pop	{r7, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	200002f4 	.word	0x200002f4
    1a18:	0000185d 	.word	0x0000185d
    1a1c:	00001885 	.word	0x00001885
    1a20:	000018cd 	.word	0x000018cd

00001a24 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    1a28:	2000      	movs	r0, #0
    1a2a:	4b02      	ldr	r3, [pc, #8]	; (1a34 <ADC_Handler+0x10>)
    1a2c:	4798      	blx	r3
}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	46bd      	mov	sp, r7
    1a32:	bd80      	pop	{r7, pc}
    1a34:	000018f1 	.word	0x000018f1

00001a38 <system_gclk_chan_get_config_defaults>:
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	b082      	sub	sp, #8
    1a3c:	af00      	add	r7, sp, #0
    1a3e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1a40:	687b      	ldr	r3, [r7, #4]
    1a42:	2200      	movs	r2, #0
    1a44:	701a      	strb	r2, [r3, #0]
}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	46bd      	mov	sp, r7
    1a4a:	b002      	add	sp, #8
    1a4c:	bd80      	pop	{r7, pc}
	...

00001a50 <system_apb_clock_set_mask>:
{
    1a50:	b580      	push	{r7, lr}
    1a52:	b082      	sub	sp, #8
    1a54:	af00      	add	r7, sp, #0
    1a56:	0002      	movs	r2, r0
    1a58:	6039      	str	r1, [r7, #0]
    1a5a:	1dfb      	adds	r3, r7, #7
    1a5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1a5e:	1dfb      	adds	r3, r7, #7
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2b01      	cmp	r3, #1
    1a64:	d00a      	beq.n	1a7c <system_apb_clock_set_mask+0x2c>
    1a66:	2b02      	cmp	r3, #2
    1a68:	d00f      	beq.n	1a8a <system_apb_clock_set_mask+0x3a>
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d114      	bne.n	1a98 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1a6e:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a70:	4a0d      	ldr	r2, [pc, #52]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a72:	6991      	ldr	r1, [r2, #24]
    1a74:	683a      	ldr	r2, [r7, #0]
    1a76:	430a      	orrs	r2, r1
    1a78:	619a      	str	r2, [r3, #24]
			break;
    1a7a:	e00f      	b.n	1a9c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1a7c:	4b0a      	ldr	r3, [pc, #40]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a7e:	4a0a      	ldr	r2, [pc, #40]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a80:	69d1      	ldr	r1, [r2, #28]
    1a82:	683a      	ldr	r2, [r7, #0]
    1a84:	430a      	orrs	r2, r1
    1a86:	61da      	str	r2, [r3, #28]
			break;
    1a88:	e008      	b.n	1a9c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1a8a:	4b07      	ldr	r3, [pc, #28]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a8c:	4a06      	ldr	r2, [pc, #24]	; (1aa8 <system_apb_clock_set_mask+0x58>)
    1a8e:	6a11      	ldr	r1, [r2, #32]
    1a90:	683a      	ldr	r2, [r7, #0]
    1a92:	430a      	orrs	r2, r1
    1a94:	621a      	str	r2, [r3, #32]
			break;
    1a96:	e001      	b.n	1a9c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1a98:	2317      	movs	r3, #23
    1a9a:	e000      	b.n	1a9e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1a9c:	2300      	movs	r3, #0
}
    1a9e:	0018      	movs	r0, r3
    1aa0:	46bd      	mov	sp, r7
    1aa2:	b002      	add	sp, #8
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	40000400 	.word	0x40000400

00001aac <system_pinmux_get_config_defaults>:
{
    1aac:	b580      	push	{r7, lr}
    1aae:	b082      	sub	sp, #8
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	2280      	movs	r2, #128	; 0x80
    1ab8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	2200      	movs	r2, #0
    1abe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	2201      	movs	r2, #1
    1ac4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	2200      	movs	r2, #0
    1aca:	70da      	strb	r2, [r3, #3]
}
    1acc:	46c0      	nop			; (mov r8, r8)
    1ace:	46bd      	mov	sp, r7
    1ad0:	b002      	add	sp, #8
    1ad2:	bd80      	pop	{r7, pc}

00001ad4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ad8:	4b05      	ldr	r3, [pc, #20]	; (1af0 <system_is_debugger_present+0x1c>)
    1ada:	789b      	ldrb	r3, [r3, #2]
    1adc:	b2db      	uxtb	r3, r3
    1ade:	001a      	movs	r2, r3
    1ae0:	2302      	movs	r3, #2
    1ae2:	4013      	ands	r3, r2
    1ae4:	1e5a      	subs	r2, r3, #1
    1ae6:	4193      	sbcs	r3, r2
    1ae8:	b2db      	uxtb	r3, r3
}
    1aea:	0018      	movs	r0, r3
    1aec:	46bd      	mov	sp, r7
    1aee:	bd80      	pop	{r7, pc}
    1af0:	41002000 	.word	0x41002000

00001af4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b084      	sub	sp, #16
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	69db      	ldr	r3, [r3, #28]
    1b06:	2207      	movs	r2, #7
    1b08:	4013      	ands	r3, r2
    1b0a:	1e5a      	subs	r2, r3, #1
    1b0c:	4193      	sbcs	r3, r2
    1b0e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    1b10:	0018      	movs	r0, r3
    1b12:	46bd      	mov	sp, r7
    1b14:	b004      	add	sp, #16
    1b16:	bd80      	pop	{r7, pc}

00001b18 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b082      	sub	sp, #8
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	0018      	movs	r0, r3
    1b26:	4b04      	ldr	r3, [pc, #16]	; (1b38 <_i2c_master_wait_for_sync+0x20>)
    1b28:	4798      	blx	r3
    1b2a:	1e03      	subs	r3, r0, #0
    1b2c:	d1f9      	bne.n	1b22 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	46bd      	mov	sp, r7
    1b32:	b002      	add	sp, #8
    1b34:	bd80      	pop	{r7, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	00001af5 	.word	0x00001af5

00001b3c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    1b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b3e:	b097      	sub	sp, #92	; 0x5c
    1b40:	af00      	add	r7, sp, #0
    1b42:	6178      	str	r0, [r7, #20]
    1b44:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    1b46:	2300      	movs	r3, #0
    1b48:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    1b4a:	2300      	movs	r3, #0
    1b4c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    1b4e:	2300      	movs	r3, #0
    1b50:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    1b52:	233b      	movs	r3, #59	; 0x3b
    1b54:	2210      	movs	r2, #16
    1b56:	4694      	mov	ip, r2
    1b58:	44bc      	add	ip, r7
    1b5a:	4463      	add	r3, ip
    1b5c:	2200      	movs	r2, #0
    1b5e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b60:	697b      	ldr	r3, [r7, #20]
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    1b66:	697b      	ldr	r3, [r7, #20]
    1b68:	681b      	ldr	r3, [r3, #0]
    1b6a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1b6c:	2323      	movs	r3, #35	; 0x23
    1b6e:	2210      	movs	r2, #16
    1b70:	18ba      	adds	r2, r7, r2
    1b72:	18d4      	adds	r4, r2, r3
    1b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b76:	0018      	movs	r0, r3
    1b78:	4bc0      	ldr	r3, [pc, #768]	; (1e7c <_i2c_master_set_config+0x340>)
    1b7a:	4798      	blx	r3
    1b7c:	0003      	movs	r3, r0
    1b7e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1b80:	230c      	movs	r3, #12
    1b82:	2210      	movs	r2, #16
    1b84:	4694      	mov	ip, r2
    1b86:	44bc      	add	ip, r7
    1b88:	4463      	add	r3, ip
    1b8a:	0018      	movs	r0, r3
    1b8c:	4bbc      	ldr	r3, [pc, #752]	; (1e80 <_i2c_master_set_config+0x344>)
    1b8e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    1b90:	693b      	ldr	r3, [r7, #16]
    1b92:	69db      	ldr	r3, [r3, #28]
    1b94:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    1b96:	693b      	ldr	r3, [r7, #16]
    1b98:	6a1b      	ldr	r3, [r3, #32]
    1b9a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d106      	bne.n	1bb0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba4:	2100      	movs	r1, #0
    1ba6:	0018      	movs	r0, r3
    1ba8:	4bb6      	ldr	r3, [pc, #728]	; (1e84 <_i2c_master_set_config+0x348>)
    1baa:	4798      	blx	r3
    1bac:	0003      	movs	r3, r0
    1bae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1bb2:	b2da      	uxtb	r2, r3
    1bb4:	230c      	movs	r3, #12
    1bb6:	2110      	movs	r1, #16
    1bb8:	468c      	mov	ip, r1
    1bba:	44bc      	add	ip, r7
    1bbc:	4463      	add	r3, ip
    1bbe:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1bc0:	230c      	movs	r3, #12
    1bc2:	2210      	movs	r2, #16
    1bc4:	4694      	mov	ip, r2
    1bc6:	44bc      	add	ip, r7
    1bc8:	4463      	add	r3, ip
    1bca:	2202      	movs	r2, #2
    1bcc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1bd0:	0c1b      	lsrs	r3, r3, #16
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	220c      	movs	r2, #12
    1bd6:	2110      	movs	r1, #16
    1bd8:	468c      	mov	ip, r1
    1bda:	44bc      	add	ip, r7
    1bdc:	4462      	add	r2, ip
    1bde:	0011      	movs	r1, r2
    1be0:	0018      	movs	r0, r3
    1be2:	4ba9      	ldr	r3, [pc, #676]	; (1e88 <_i2c_master_set_config+0x34c>)
    1be4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1be8:	2b00      	cmp	r3, #0
    1bea:	d106      	bne.n	1bfa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bee:	2101      	movs	r1, #1
    1bf0:	0018      	movs	r0, r3
    1bf2:	4ba4      	ldr	r3, [pc, #656]	; (1e84 <_i2c_master_set_config+0x348>)
    1bf4:	4798      	blx	r3
    1bf6:	0003      	movs	r3, r0
    1bf8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    1bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1bfc:	b2da      	uxtb	r2, r3
    1bfe:	230c      	movs	r3, #12
    1c00:	2110      	movs	r1, #16
    1c02:	468c      	mov	ip, r1
    1c04:	44bc      	add	ip, r7
    1c06:	4463      	add	r3, ip
    1c08:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1c0a:	230c      	movs	r3, #12
    1c0c:	2210      	movs	r2, #16
    1c0e:	4694      	mov	ip, r2
    1c10:	44bc      	add	ip, r7
    1c12:	4463      	add	r3, ip
    1c14:	2202      	movs	r2, #2
    1c16:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c1a:	0c1b      	lsrs	r3, r3, #16
    1c1c:	b2db      	uxtb	r3, r3
    1c1e:	220c      	movs	r2, #12
    1c20:	2110      	movs	r1, #16
    1c22:	468c      	mov	ip, r1
    1c24:	44bc      	add	ip, r7
    1c26:	4462      	add	r2, ip
    1c28:	0011      	movs	r1, r2
    1c2a:	0018      	movs	r0, r3
    1c2c:	4b96      	ldr	r3, [pc, #600]	; (1e88 <_i2c_master_set_config+0x34c>)
    1c2e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1c30:	693b      	ldr	r3, [r7, #16]
    1c32:	8a9a      	ldrh	r2, [r3, #20]
    1c34:	697b      	ldr	r3, [r7, #20]
    1c36:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1c38:	693b      	ldr	r3, [r7, #16]
    1c3a:	8ada      	ldrh	r2, [r3, #22]
    1c3c:	697b      	ldr	r3, [r7, #20]
    1c3e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1c40:	693b      	ldr	r3, [r7, #16]
    1c42:	7e1b      	ldrb	r3, [r3, #24]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d103      	bne.n	1c50 <_i2c_master_set_config+0x114>
    1c48:	4b90      	ldr	r3, [pc, #576]	; (1e8c <_i2c_master_set_config+0x350>)
    1c4a:	4798      	blx	r3
    1c4c:	1e03      	subs	r3, r0, #0
    1c4e:	d002      	beq.n	1c56 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1c50:	2380      	movs	r3, #128	; 0x80
    1c52:	657b      	str	r3, [r7, #84]	; 0x54
    1c54:	e001      	b.n	1c5a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    1c56:	2300      	movs	r3, #0
    1c58:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1c5a:	693b      	ldr	r3, [r7, #16]
    1c5c:	691b      	ldr	r3, [r3, #16]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d004      	beq.n	1c6c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    1c62:	693b      	ldr	r3, [r7, #16]
    1c64:	691b      	ldr	r3, [r3, #16]
    1c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c68:	4313      	orrs	r3, r2
    1c6a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1c6c:	693b      	ldr	r3, [r7, #16]
    1c6e:	689b      	ldr	r3, [r3, #8]
    1c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c72:	4313      	orrs	r3, r2
    1c74:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1c76:	693b      	ldr	r3, [r7, #16]
    1c78:	2224      	movs	r2, #36	; 0x24
    1c7a:	5c9b      	ldrb	r3, [r3, r2]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d004      	beq.n	1c8a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c82:	2280      	movs	r2, #128	; 0x80
    1c84:	05d2      	lsls	r2, r2, #23
    1c86:	4313      	orrs	r3, r2
    1c88:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1c8a:	693b      	ldr	r3, [r7, #16]
    1c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d004      	beq.n	1c9c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    1c92:	693b      	ldr	r3, [r7, #16]
    1c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c98:	4313      	orrs	r3, r2
    1c9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1c9c:	693b      	ldr	r3, [r7, #16]
    1c9e:	222c      	movs	r2, #44	; 0x2c
    1ca0:	5c9b      	ldrb	r3, [r3, r2]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d105      	bne.n	1cb2 <_i2c_master_set_config+0x176>
    1ca6:	693b      	ldr	r3, [r7, #16]
    1ca8:	689a      	ldr	r2, [r3, #8]
    1caa:	2380      	movs	r3, #128	; 0x80
    1cac:	049b      	lsls	r3, r3, #18
    1cae:	429a      	cmp	r2, r3
    1cb0:	d104      	bne.n	1cbc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cb4:	2280      	movs	r2, #128	; 0x80
    1cb6:	0512      	lsls	r2, r2, #20
    1cb8:	4313      	orrs	r3, r2
    1cba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1cbc:	693b      	ldr	r3, [r7, #16]
    1cbe:	222d      	movs	r2, #45	; 0x2d
    1cc0:	5c9b      	ldrb	r3, [r3, r2]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d004      	beq.n	1cd0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cc8:	2280      	movs	r2, #128	; 0x80
    1cca:	0412      	lsls	r2, r2, #16
    1ccc:	4313      	orrs	r3, r2
    1cce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1cd0:	693b      	ldr	r3, [r7, #16]
    1cd2:	222e      	movs	r2, #46	; 0x2e
    1cd4:	5c9b      	ldrb	r3, [r3, r2]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d004      	beq.n	1ce4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cdc:	2280      	movs	r2, #128	; 0x80
    1cde:	03d2      	lsls	r2, r2, #15
    1ce0:	4313      	orrs	r3, r2
    1ce2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ce6:	681a      	ldr	r2, [r3, #0]
    1ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cea:	431a      	orrs	r2, r3
    1cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1cee:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1cf2:	2280      	movs	r2, #128	; 0x80
    1cf4:	0052      	lsls	r2, r2, #1
    1cf6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1cf8:	2323      	movs	r3, #35	; 0x23
    1cfa:	2210      	movs	r2, #16
    1cfc:	4694      	mov	ip, r2
    1cfe:	44bc      	add	ip, r7
    1d00:	4463      	add	r3, ip
    1d02:	781b      	ldrb	r3, [r3, #0]
    1d04:	3314      	adds	r3, #20
    1d06:	b2db      	uxtb	r3, r3
    1d08:	0018      	movs	r0, r3
    1d0a:	4b61      	ldr	r3, [pc, #388]	; (1e90 <_i2c_master_set_config+0x354>)
    1d0c:	4798      	blx	r3
    1d0e:	0003      	movs	r3, r0
    1d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    1d12:	693b      	ldr	r3, [r7, #16]
    1d14:	681b      	ldr	r3, [r3, #0]
    1d16:	22fa      	movs	r2, #250	; 0xfa
    1d18:	0092      	lsls	r2, r2, #2
    1d1a:	4353      	muls	r3, r2
    1d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1d1e:	693b      	ldr	r3, [r7, #16]
    1d20:	685b      	ldr	r3, [r3, #4]
    1d22:	22fa      	movs	r2, #250	; 0xfa
    1d24:	0092      	lsls	r2, r2, #2
    1d26:	4353      	muls	r3, r2
    1d28:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    1d2a:	693b      	ldr	r3, [r7, #16]
    1d2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1d2e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    1d30:	4b58      	ldr	r3, [pc, #352]	; (1e94 <_i2c_master_set_config+0x358>)
    1d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1d34:	4798      	blx	r3
    1d36:	0005      	movs	r5, r0
    1d38:	000e      	movs	r6, r1
    1d3a:	4b56      	ldr	r3, [pc, #344]	; (1e94 <_i2c_master_set_config+0x358>)
    1d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1d3e:	4798      	blx	r3
    1d40:	60b8      	str	r0, [r7, #8]
    1d42:	60f9      	str	r1, [r7, #12]
    1d44:	4b53      	ldr	r3, [pc, #332]	; (1e94 <_i2c_master_set_config+0x358>)
    1d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1d48:	4798      	blx	r3
    1d4a:	4c53      	ldr	r4, [pc, #332]	; (1e98 <_i2c_master_set_config+0x35c>)
    1d4c:	4a53      	ldr	r2, [pc, #332]	; (1e9c <_i2c_master_set_config+0x360>)
    1d4e:	4b54      	ldr	r3, [pc, #336]	; (1ea0 <_i2c_master_set_config+0x364>)
    1d50:	47a0      	blx	r4
    1d52:	0003      	movs	r3, r0
    1d54:	000c      	movs	r4, r1
    1d56:	603b      	str	r3, [r7, #0]
    1d58:	607c      	str	r4, [r7, #4]
    1d5a:	4b4e      	ldr	r3, [pc, #312]	; (1e94 <_i2c_master_set_config+0x358>)
    1d5c:	6a38      	ldr	r0, [r7, #32]
    1d5e:	4798      	blx	r3
    1d60:	0002      	movs	r2, r0
    1d62:	000b      	movs	r3, r1
    1d64:	4c4c      	ldr	r4, [pc, #304]	; (1e98 <_i2c_master_set_config+0x35c>)
    1d66:	6838      	ldr	r0, [r7, #0]
    1d68:	6879      	ldr	r1, [r7, #4]
    1d6a:	47a0      	blx	r4
    1d6c:	0003      	movs	r3, r0
    1d6e:	000c      	movs	r4, r1
    1d70:	0018      	movs	r0, r3
    1d72:	0021      	movs	r1, r4
    1d74:	4c4b      	ldr	r4, [pc, #300]	; (1ea4 <_i2c_master_set_config+0x368>)
    1d76:	2200      	movs	r2, #0
    1d78:	4b4b      	ldr	r3, [pc, #300]	; (1ea8 <_i2c_master_set_config+0x36c>)
    1d7a:	47a0      	blx	r4
    1d7c:	0003      	movs	r3, r0
    1d7e:	000c      	movs	r4, r1
    1d80:	001a      	movs	r2, r3
    1d82:	0023      	movs	r3, r4
    1d84:	4c44      	ldr	r4, [pc, #272]	; (1e98 <_i2c_master_set_config+0x35c>)
    1d86:	68b8      	ldr	r0, [r7, #8]
    1d88:	68f9      	ldr	r1, [r7, #12]
    1d8a:	47a0      	blx	r4
    1d8c:	0003      	movs	r3, r0
    1d8e:	000c      	movs	r4, r1
    1d90:	001a      	movs	r2, r3
    1d92:	0023      	movs	r3, r4
    1d94:	4c45      	ldr	r4, [pc, #276]	; (1eac <_i2c_master_set_config+0x370>)
    1d96:	0028      	movs	r0, r5
    1d98:	0031      	movs	r1, r6
    1d9a:	47a0      	blx	r4
    1d9c:	0003      	movs	r3, r0
    1d9e:	000c      	movs	r4, r1
    1da0:	001d      	movs	r5, r3
    1da2:	0026      	movs	r6, r4
    1da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1da6:	005a      	lsls	r2, r3, #1
    1da8:	4b3a      	ldr	r3, [pc, #232]	; (1e94 <_i2c_master_set_config+0x358>)
    1daa:	0010      	movs	r0, r2
    1dac:	4798      	blx	r3
    1dae:	0002      	movs	r2, r0
    1db0:	000b      	movs	r3, r1
    1db2:	4c3c      	ldr	r4, [pc, #240]	; (1ea4 <_i2c_master_set_config+0x368>)
    1db4:	0028      	movs	r0, r5
    1db6:	0031      	movs	r1, r6
    1db8:	47a0      	blx	r4
    1dba:	0003      	movs	r3, r0
    1dbc:	000c      	movs	r4, r1
    1dbe:	0018      	movs	r0, r3
    1dc0:	0021      	movs	r1, r4
    1dc2:	4c3a      	ldr	r4, [pc, #232]	; (1eac <_i2c_master_set_config+0x370>)
    1dc4:	2200      	movs	r2, #0
    1dc6:	4b3a      	ldr	r3, [pc, #232]	; (1eb0 <_i2c_master_set_config+0x374>)
    1dc8:	47a0      	blx	r4
    1dca:	0003      	movs	r3, r0
    1dcc:	000c      	movs	r4, r1
    1dce:	001d      	movs	r5, r3
    1dd0:	0026      	movs	r6, r4
    1dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1dd4:	005a      	lsls	r2, r3, #1
    1dd6:	4b2f      	ldr	r3, [pc, #188]	; (1e94 <_i2c_master_set_config+0x358>)
    1dd8:	0010      	movs	r0, r2
    1dda:	4798      	blx	r3
    1ddc:	0002      	movs	r2, r0
    1dde:	000b      	movs	r3, r1
    1de0:	4c34      	ldr	r4, [pc, #208]	; (1eb4 <_i2c_master_set_config+0x378>)
    1de2:	0028      	movs	r0, r5
    1de4:	0031      	movs	r1, r6
    1de6:	47a0      	blx	r4
    1de8:	0003      	movs	r3, r0
    1dea:	000c      	movs	r4, r1
    1dec:	0019      	movs	r1, r3
    1dee:	0022      	movs	r2, r4
    1df0:	4b31      	ldr	r3, [pc, #196]	; (1eb8 <_i2c_master_set_config+0x37c>)
    1df2:	0008      	movs	r0, r1
    1df4:	0011      	movs	r1, r2
    1df6:	4798      	blx	r3
    1df8:	0003      	movs	r3, r0
    1dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1dfc:	693b      	ldr	r3, [r7, #16]
    1dfe:	689a      	ldr	r2, [r3, #8]
    1e00:	2380      	movs	r3, #128	; 0x80
    1e02:	049b      	lsls	r3, r3, #18
    1e04:	429a      	cmp	r2, r3
    1e06:	d16a      	bne.n	1ede <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1e08:	4b22      	ldr	r3, [pc, #136]	; (1e94 <_i2c_master_set_config+0x358>)
    1e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1e0c:	4798      	blx	r3
    1e0e:	4c25      	ldr	r4, [pc, #148]	; (1ea4 <_i2c_master_set_config+0x368>)
    1e10:	0002      	movs	r2, r0
    1e12:	000b      	movs	r3, r1
    1e14:	47a0      	blx	r4
    1e16:	0003      	movs	r3, r0
    1e18:	000c      	movs	r4, r1
    1e1a:	001d      	movs	r5, r3
    1e1c:	0026      	movs	r6, r4
    1e1e:	4b1d      	ldr	r3, [pc, #116]	; (1e94 <_i2c_master_set_config+0x358>)
    1e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1e22:	4798      	blx	r3
    1e24:	4c1c      	ldr	r4, [pc, #112]	; (1e98 <_i2c_master_set_config+0x35c>)
    1e26:	2200      	movs	r2, #0
    1e28:	4b24      	ldr	r3, [pc, #144]	; (1ebc <_i2c_master_set_config+0x380>)
    1e2a:	47a0      	blx	r4
    1e2c:	0003      	movs	r3, r0
    1e2e:	000c      	movs	r4, r1
    1e30:	001a      	movs	r2, r3
    1e32:	0023      	movs	r3, r4
    1e34:	4c1f      	ldr	r4, [pc, #124]	; (1eb4 <_i2c_master_set_config+0x378>)
    1e36:	0028      	movs	r0, r5
    1e38:	0031      	movs	r1, r6
    1e3a:	47a0      	blx	r4
    1e3c:	0003      	movs	r3, r0
    1e3e:	000c      	movs	r4, r1
    1e40:	0018      	movs	r0, r3
    1e42:	0021      	movs	r1, r4
    1e44:	4c19      	ldr	r4, [pc, #100]	; (1eac <_i2c_master_set_config+0x370>)
    1e46:	2200      	movs	r2, #0
    1e48:	4b19      	ldr	r3, [pc, #100]	; (1eb0 <_i2c_master_set_config+0x374>)
    1e4a:	47a0      	blx	r4
    1e4c:	0003      	movs	r3, r0
    1e4e:	000c      	movs	r4, r1
    1e50:	0019      	movs	r1, r3
    1e52:	0022      	movs	r2, r4
    1e54:	4b18      	ldr	r3, [pc, #96]	; (1eb8 <_i2c_master_set_config+0x37c>)
    1e56:	0008      	movs	r0, r1
    1e58:	0011      	movs	r1, r2
    1e5a:	4798      	blx	r3
    1e5c:	0003      	movs	r3, r0
    1e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    1e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e62:	2b00      	cmp	r3, #0
    1e64:	d02e      	beq.n	1ec4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1e66:	4b16      	ldr	r3, [pc, #88]	; (1ec0 <_i2c_master_set_config+0x384>)
    1e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1e6c:	4798      	blx	r3
    1e6e:	0003      	movs	r3, r0
    1e70:	1e9a      	subs	r2, r3, #2
    1e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e74:	1ad3      	subs	r3, r2, r3
    1e76:	653b      	str	r3, [r7, #80]	; 0x50
    1e78:	e031      	b.n	1ede <_i2c_master_set_config+0x3a2>
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00004b61 	.word	0x00004b61
    1e80:	00001aad 	.word	0x00001aad
    1e84:	000049a5 	.word	0x000049a5
    1e88:	0000734d 	.word	0x0000734d
    1e8c:	00001ad5 	.word	0x00001ad5
    1e90:	00007185 	.word	0x00007185
    1e94:	00009b61 	.word	0x00009b61
    1e98:	00008fcd 	.word	0x00008fcd
    1e9c:	e826d695 	.word	0xe826d695
    1ea0:	3e112e0b 	.word	0x3e112e0b
    1ea4:	00008345 	.word	0x00008345
    1ea8:	40240000 	.word	0x40240000
    1eac:	000094cd 	.word	0x000094cd
    1eb0:	3ff00000 	.word	0x3ff00000
    1eb4:	00008965 	.word	0x00008965
    1eb8:	00009af9 	.word	0x00009af9
    1ebc:	40080000 	.word	0x40080000
    1ec0:	00008005 	.word	0x00008005
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    1ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ec6:	005a      	lsls	r2, r3, #1
    1ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1eca:	18d3      	adds	r3, r2, r3
    1ecc:	1e5a      	subs	r2, r3, #1
    1ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ed0:	0059      	lsls	r1, r3, #1
    1ed2:	4b1d      	ldr	r3, [pc, #116]	; (1f48 <_i2c_master_set_config+0x40c>)
    1ed4:	0010      	movs	r0, r2
    1ed6:	4798      	blx	r3
    1ed8:	0003      	movs	r3, r0
    1eda:	3b01      	subs	r3, #1
    1edc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ee0:	2bff      	cmp	r3, #255	; 0xff
    1ee2:	dc08      	bgt.n	1ef6 <_i2c_master_set_config+0x3ba>
    1ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	db05      	blt.n	1ef6 <_i2c_master_set_config+0x3ba>
    1eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1eec:	2bff      	cmp	r3, #255	; 0xff
    1eee:	dc02      	bgt.n	1ef6 <_i2c_master_set_config+0x3ba>
    1ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	da06      	bge.n	1f04 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ef6:	233b      	movs	r3, #59	; 0x3b
    1ef8:	2210      	movs	r2, #16
    1efa:	4694      	mov	ip, r2
    1efc:	44bc      	add	ip, r7
    1efe:	4463      	add	r3, ip
    1f00:	2240      	movs	r2, #64	; 0x40
    1f02:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    1f04:	233b      	movs	r3, #59	; 0x3b
    1f06:	2210      	movs	r2, #16
    1f08:	4694      	mov	ip, r2
    1f0a:	44bc      	add	ip, r7
    1f0c:	4463      	add	r3, ip
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	2b40      	cmp	r3, #64	; 0x40
    1f12:	d00e      	beq.n	1f32 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f16:	22ff      	movs	r2, #255	; 0xff
    1f18:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1f1c:	041b      	lsls	r3, r3, #16
    1f1e:	0019      	movs	r1, r3
    1f20:	23ff      	movs	r3, #255	; 0xff
    1f22:	041b      	lsls	r3, r3, #16
    1f24:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1f26:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1f2a:	0612      	lsls	r2, r2, #24
    1f2c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f30:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    1f32:	233b      	movs	r3, #59	; 0x3b
    1f34:	2210      	movs	r2, #16
    1f36:	4694      	mov	ip, r2
    1f38:	44bc      	add	ip, r7
    1f3a:	4463      	add	r3, ip
    1f3c:	781b      	ldrb	r3, [r3, #0]
}
    1f3e:	0018      	movs	r0, r3
    1f40:	46bd      	mov	sp, r7
    1f42:	b017      	add	sp, #92	; 0x5c
    1f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	00008005 	.word	0x00008005

00001f4c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1f4c:	b590      	push	{r4, r7, lr}
    1f4e:	b08b      	sub	sp, #44	; 0x2c
    1f50:	af00      	add	r7, sp, #0
    1f52:	60f8      	str	r0, [r7, #12]
    1f54:	60b9      	str	r1, [r7, #8]
    1f56:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1f58:	68fb      	ldr	r3, [r7, #12]
    1f5a:	68ba      	ldr	r2, [r7, #8]
    1f5c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f5e:	68fb      	ldr	r3, [r7, #12]
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f64:	68fb      	ldr	r3, [r7, #12]
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	0018      	movs	r0, r3
    1f6a:	4b3b      	ldr	r3, [pc, #236]	; (2058 <STACK_SIZE+0x58>)
    1f6c:	4798      	blx	r3
    1f6e:	0003      	movs	r3, r0
    1f70:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f72:	6a3b      	ldr	r3, [r7, #32]
    1f74:	3302      	adds	r3, #2
    1f76:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f78:	6a3b      	ldr	r3, [r7, #32]
    1f7a:	3314      	adds	r3, #20
    1f7c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f7e:	2201      	movs	r2, #1
    1f80:	69fb      	ldr	r3, [r7, #28]
    1f82:	409a      	lsls	r2, r3
    1f84:	0013      	movs	r3, r2
    1f86:	0019      	movs	r1, r3
    1f88:	2002      	movs	r0, #2
    1f8a:	4b34      	ldr	r3, [pc, #208]	; (205c <STACK_SIZE+0x5c>)
    1f8c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1f8e:	2314      	movs	r3, #20
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	0018      	movs	r0, r3
    1f94:	4b32      	ldr	r3, [pc, #200]	; (2060 <STACK_SIZE+0x60>)
    1f96:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1f98:	687b      	ldr	r3, [r7, #4]
    1f9a:	7b1a      	ldrb	r2, [r3, #12]
    1f9c:	2314      	movs	r3, #20
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1fa2:	69bb      	ldr	r3, [r7, #24]
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	2214      	movs	r2, #20
    1fa8:	18ba      	adds	r2, r7, r2
    1faa:	0011      	movs	r1, r2
    1fac:	0018      	movs	r0, r3
    1fae:	4b2d      	ldr	r3, [pc, #180]	; (2064 <STACK_SIZE+0x64>)
    1fb0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fb2:	69bb      	ldr	r3, [r7, #24]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	0018      	movs	r0, r3
    1fb8:	4b2b      	ldr	r3, [pc, #172]	; (2068 <STACK_SIZE+0x68>)
    1fba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	7b1b      	ldrb	r3, [r3, #12]
    1fc0:	2100      	movs	r1, #0
    1fc2:	0018      	movs	r0, r3
    1fc4:	4b29      	ldr	r3, [pc, #164]	; (206c <STACK_SIZE+0x6c>)
    1fc6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2202      	movs	r2, #2
    1fce:	4013      	ands	r3, r2
    1fd0:	d001      	beq.n	1fd6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    1fd2:	231c      	movs	r3, #28
    1fd4:	e03b      	b.n	204e <STACK_SIZE+0x4e>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	2201      	movs	r2, #1
    1fdc:	4013      	ands	r3, r2
    1fde:	d001      	beq.n	1fe4 <i2c_master_init+0x98>
		return STATUS_BUSY;
    1fe0:	2305      	movs	r3, #5
    1fe2:	e034      	b.n	204e <STACK_SIZE+0x4e>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1fe4:	68fb      	ldr	r3, [r7, #12]
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	2217      	movs	r2, #23
    1fea:	18bc      	adds	r4, r7, r2
    1fec:	0018      	movs	r0, r3
    1fee:	4b1a      	ldr	r3, [pc, #104]	; (2058 <STACK_SIZE+0x58>)
    1ff0:	4798      	blx	r3
    1ff2:	0003      	movs	r3, r0
    1ff4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1ff6:	4a1e      	ldr	r2, [pc, #120]	; (2070 <STACK_SIZE+0x70>)
    1ff8:	2317      	movs	r3, #23
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	781b      	ldrb	r3, [r3, #0]
    1ffe:	0011      	movs	r1, r2
    2000:	0018      	movs	r0, r3
    2002:	4b1c      	ldr	r3, [pc, #112]	; (2074 <STACK_SIZE+0x74>)
    2004:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2006:	2317      	movs	r3, #23
    2008:	18fb      	adds	r3, r7, r3
    200a:	781a      	ldrb	r2, [r3, #0]
    200c:	4b1a      	ldr	r3, [pc, #104]	; (2078 <STACK_SIZE+0x78>)
    200e:	0092      	lsls	r2, r2, #2
    2010:	68f9      	ldr	r1, [r7, #12]
    2012:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	2200      	movs	r2, #0
    2018:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    201a:	68fb      	ldr	r3, [r7, #12]
    201c:	2200      	movs	r2, #0
    201e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	2200      	movs	r2, #0
    2024:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	2200      	movs	r2, #0
    202a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	2225      	movs	r2, #37	; 0x25
    2030:	2100      	movs	r1, #0
    2032:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	2200      	movs	r2, #0
    2038:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    203c:	2214      	movs	r2, #20
    203e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    2040:	687a      	ldr	r2, [r7, #4]
    2042:	68fb      	ldr	r3, [r7, #12]
    2044:	0011      	movs	r1, r2
    2046:	0018      	movs	r0, r3
    2048:	4b0c      	ldr	r3, [pc, #48]	; (207c <STACK_SIZE+0x7c>)
    204a:	4798      	blx	r3
    204c:	0003      	movs	r3, r0
}
    204e:	0018      	movs	r0, r3
    2050:	46bd      	mov	sp, r7
    2052:	b00b      	add	sp, #44	; 0x2c
    2054:	bd90      	pop	{r4, r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	00004b61 	.word	0x00004b61
    205c:	00001a51 	.word	0x00001a51
    2060:	00001a39 	.word	0x00001a39
    2064:	00007061 	.word	0x00007061
    2068:	000070a5 	.word	0x000070a5
    206c:	00004919 	.word	0x00004919
    2070:	0000289d 	.word	0x0000289d
    2074:	00004bc5 	.word	0x00004bc5
    2078:	200003d8 	.word	0x200003d8
    207c:	00001b3d 	.word	0x00001b3d

00002080 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    2080:	b580      	push	{r7, lr}
    2082:	b084      	sub	sp, #16
    2084:	af00      	add	r7, sp, #0
    2086:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	681b      	ldr	r3, [r3, #0]
    208c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    208e:	68fb      	ldr	r3, [r7, #12]
    2090:	7e1b      	ldrb	r3, [r3, #24]
    2092:	b2db      	uxtb	r3, r3
    2094:	001a      	movs	r2, r3
    2096:	2302      	movs	r3, #2
    2098:	4013      	ands	r3, r2
    209a:	d00b      	beq.n	20b4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	2202      	movs	r2, #2
    20a0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    20a2:	68fb      	ldr	r3, [r7, #12]
    20a4:	8b5b      	ldrh	r3, [r3, #26]
    20a6:	b29b      	uxth	r3, r3
    20a8:	001a      	movs	r2, r3
    20aa:	2302      	movs	r3, #2
    20ac:	4013      	ands	r3, r2
    20ae:	d011      	beq.n	20d4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    20b0:	2341      	movs	r3, #65	; 0x41
    20b2:	e010      	b.n	20d6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    20b4:	68fb      	ldr	r3, [r7, #12]
    20b6:	8b5b      	ldrh	r3, [r3, #26]
    20b8:	b29b      	uxth	r3, r3
    20ba:	001a      	movs	r2, r3
    20bc:	2304      	movs	r3, #4
    20be:	4013      	ands	r3, r2
    20c0:	d008      	beq.n	20d4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    20c2:	68fb      	ldr	r3, [r7, #12]
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	22c0      	movs	r2, #192	; 0xc0
    20c8:	0292      	lsls	r2, r2, #10
    20ca:	431a      	orrs	r2, r3
    20cc:	68fb      	ldr	r3, [r7, #12]
    20ce:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    20d0:	2318      	movs	r3, #24
    20d2:	e000      	b.n	20d6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    20d4:	2300      	movs	r3, #0
}
    20d6:	0018      	movs	r0, r3
    20d8:	46bd      	mov	sp, r7
    20da:	b004      	add	sp, #16
    20dc:	bd80      	pop	{r7, pc}

000020de <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    20de:	b580      	push	{r7, lr}
    20e0:	b084      	sub	sp, #16
    20e2:	af00      	add	r7, sp, #0
    20e4:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    20ec:	230e      	movs	r3, #14
    20ee:	18fb      	adds	r3, r7, r3
    20f0:	2200      	movs	r2, #0
    20f2:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    20f4:	e00f      	b.n	2116 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    20f6:	230e      	movs	r3, #14
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	220e      	movs	r2, #14
    20fc:	18ba      	adds	r2, r7, r2
    20fe:	8812      	ldrh	r2, [r2, #0]
    2100:	3201      	adds	r2, #1
    2102:	801a      	strh	r2, [r3, #0]
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	891b      	ldrh	r3, [r3, #8]
    2108:	220e      	movs	r2, #14
    210a:	18ba      	adds	r2, r7, r2
    210c:	8812      	ldrh	r2, [r2, #0]
    210e:	429a      	cmp	r2, r3
    2110:	d301      	bcc.n	2116 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    2112:	2312      	movs	r3, #18
    2114:	e00e      	b.n	2134 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2116:	68bb      	ldr	r3, [r7, #8]
    2118:	7e1b      	ldrb	r3, [r3, #24]
    211a:	b2db      	uxtb	r3, r3
    211c:	001a      	movs	r2, r3
    211e:	2301      	movs	r3, #1
    2120:	4013      	ands	r3, r2
    2122:	d106      	bne.n	2132 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2124:	68bb      	ldr	r3, [r7, #8]
    2126:	7e1b      	ldrb	r3, [r3, #24]
    2128:	b2db      	uxtb	r3, r3
    212a:	001a      	movs	r2, r3
    212c:	2302      	movs	r3, #2
    212e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2130:	d0e1      	beq.n	20f6 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    2132:	2300      	movs	r3, #0
}
    2134:	0018      	movs	r0, r3
    2136:	46bd      	mov	sp, r7
    2138:	b004      	add	sp, #16
    213a:	bd80      	pop	{r7, pc}

0000213c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    213c:	b590      	push	{r4, r7, lr}
    213e:	b085      	sub	sp, #20
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
    2144:	000a      	movs	r2, r1
    2146:	1cfb      	adds	r3, r7, #3
    2148:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	685b      	ldr	r3, [r3, #4]
    2154:	2280      	movs	r2, #128	; 0x80
    2156:	02d2      	lsls	r2, r2, #11
    2158:	431a      	orrs	r2, r3
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    215e:	1cfb      	adds	r3, r7, #3
    2160:	781a      	ldrb	r2, [r3, #0]
    2162:	68fb      	ldr	r3, [r7, #12]
    2164:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2166:	230b      	movs	r3, #11
    2168:	18fc      	adds	r4, r7, r3
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	0018      	movs	r0, r3
    216e:	4b07      	ldr	r3, [pc, #28]	; (218c <_i2c_master_send_hs_master_code+0x50>)
    2170:	4798      	blx	r3
    2172:	0003      	movs	r3, r0
    2174:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	2201      	movs	r2, #1
    217a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    217c:	230b      	movs	r3, #11
    217e:	18fb      	adds	r3, r7, r3
    2180:	781b      	ldrb	r3, [r3, #0]
}
    2182:	0018      	movs	r0, r3
    2184:	46bd      	mov	sp, r7
    2186:	b005      	add	sp, #20
    2188:	bd90      	pop	{r4, r7, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	000020df 	.word	0x000020df

00002190 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2190:	b590      	push	{r4, r7, lr}
    2192:	b087      	sub	sp, #28
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
    2198:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    21a0:	2314      	movs	r3, #20
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	683a      	ldr	r2, [r7, #0]
    21a6:	8852      	ldrh	r2, [r2, #2]
    21a8:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    21aa:	2312      	movs	r3, #18
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	2200      	movs	r2, #0
    21b0:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	011b      	lsls	r3, r3, #4
    21b8:	0fdb      	lsrs	r3, r3, #31
    21ba:	b2db      	uxtb	r3, r3
    21bc:	001a      	movs	r2, r3
    21be:	230b      	movs	r3, #11
    21c0:	18fb      	adds	r3, r7, r3
    21c2:	1e51      	subs	r1, r2, #1
    21c4:	418a      	sbcs	r2, r1
    21c6:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    21c8:	683b      	ldr	r3, [r7, #0]
    21ca:	7a5b      	ldrb	r3, [r3, #9]
    21cc:	2b00      	cmp	r3, #0
    21ce:	d006      	beq.n	21de <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    21d0:	683b      	ldr	r3, [r7, #0]
    21d2:	7a9a      	ldrb	r2, [r3, #10]
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	0011      	movs	r1, r2
    21d8:	0018      	movs	r0, r3
    21da:	4b85      	ldr	r3, [pc, #532]	; (23f0 <_i2c_master_read_packet+0x260>)
    21dc:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	685b      	ldr	r3, [r3, #4]
    21e2:	4a84      	ldr	r2, [pc, #528]	; (23f4 <_i2c_master_read_packet+0x264>)
    21e4:	401a      	ands	r2, r3
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    21ea:	683b      	ldr	r3, [r7, #0]
    21ec:	7a1b      	ldrb	r3, [r3, #8]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d042      	beq.n	2278 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    21f2:	683b      	ldr	r3, [r7, #0]
    21f4:	881b      	ldrh	r3, [r3, #0]
    21f6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    21f8:	683b      	ldr	r3, [r7, #0]
    21fa:	7a5b      	ldrb	r3, [r3, #9]
    21fc:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    21fe:	4313      	orrs	r3, r2
    2200:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2202:	2380      	movs	r3, #128	; 0x80
    2204:	021b      	lsls	r3, r3, #8
    2206:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    220c:	2317      	movs	r3, #23
    220e:	18fc      	adds	r4, r7, r3
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	0018      	movs	r0, r3
    2214:	4b78      	ldr	r3, [pc, #480]	; (23f8 <_i2c_master_read_packet+0x268>)
    2216:	4798      	blx	r3
    2218:	0003      	movs	r3, r0
    221a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    221c:	68fb      	ldr	r3, [r7, #12]
    221e:	685b      	ldr	r3, [r3, #4]
    2220:	4a74      	ldr	r2, [pc, #464]	; (23f4 <_i2c_master_read_packet+0x264>)
    2222:	401a      	ands	r2, r3
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    2228:	2317      	movs	r3, #23
    222a:	18fb      	adds	r3, r7, r3
    222c:	781b      	ldrb	r3, [r3, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d107      	bne.n	2242 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    2232:	2317      	movs	r3, #23
    2234:	18fc      	adds	r4, r7, r3
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	0018      	movs	r0, r3
    223a:	4b70      	ldr	r3, [pc, #448]	; (23fc <_i2c_master_read_packet+0x26c>)
    223c:	4798      	blx	r3
    223e:	0003      	movs	r3, r0
    2240:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    2242:	2317      	movs	r3, #23
    2244:	18fb      	adds	r3, r7, r3
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	2b00      	cmp	r3, #0
    224a:	d111      	bne.n	2270 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    224c:	683b      	ldr	r3, [r7, #0]
    224e:	881b      	ldrh	r3, [r3, #0]
    2250:	0a1b      	lsrs	r3, r3, #8
    2252:	b29b      	uxth	r3, r3
    2254:	2278      	movs	r2, #120	; 0x78
    2256:	4313      	orrs	r3, r2
    2258:	b29b      	uxth	r3, r3
    225a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	7a5b      	ldrb	r3, [r3, #9]
    2260:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2262:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2264:	2201      	movs	r2, #1
    2266:	4313      	orrs	r3, r2
    2268:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    226a:	68fb      	ldr	r3, [r7, #12]
    226c:	625a      	str	r2, [r3, #36]	; 0x24
    226e:	e00f      	b.n	2290 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    2270:	2317      	movs	r3, #23
    2272:	18fb      	adds	r3, r7, r3
    2274:	781b      	ldrb	r3, [r3, #0]
    2276:	e0b6      	b.n	23e6 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2278:	683b      	ldr	r3, [r7, #0]
    227a:	881b      	ldrh	r3, [r3, #0]
    227c:	005b      	lsls	r3, r3, #1
    227e:	2201      	movs	r2, #1
    2280:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2282:	683b      	ldr	r3, [r7, #0]
    2284:	7a5b      	ldrb	r3, [r3, #9]
    2286:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2288:	4313      	orrs	r3, r2
    228a:	001a      	movs	r2, r3
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2290:	2317      	movs	r3, #23
    2292:	18fc      	adds	r4, r7, r3
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	0018      	movs	r0, r3
    2298:	4b57      	ldr	r3, [pc, #348]	; (23f8 <_i2c_master_read_packet+0x268>)
    229a:	4798      	blx	r3
    229c:	0003      	movs	r3, r0
    229e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    22a0:	230b      	movs	r3, #11
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	781b      	ldrb	r3, [r3, #0]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d00b      	beq.n	22c2 <_i2c_master_read_packet+0x132>
    22aa:	683b      	ldr	r3, [r7, #0]
    22ac:	885b      	ldrh	r3, [r3, #2]
    22ae:	2b01      	cmp	r3, #1
    22b0:	d107      	bne.n	22c2 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    22b2:	68fb      	ldr	r3, [r7, #12]
    22b4:	685b      	ldr	r3, [r3, #4]
    22b6:	2280      	movs	r2, #128	; 0x80
    22b8:	02d2      	lsls	r2, r2, #11
    22ba:	431a      	orrs	r2, r3
    22bc:	68fb      	ldr	r3, [r7, #12]
    22be:	605a      	str	r2, [r3, #4]
    22c0:	e005      	b.n	22ce <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	685b      	ldr	r3, [r3, #4]
    22c6:	4a4b      	ldr	r2, [pc, #300]	; (23f4 <_i2c_master_read_packet+0x264>)
    22c8:	401a      	ands	r2, r3
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    22ce:	2317      	movs	r3, #23
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d107      	bne.n	22e8 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    22d8:	2317      	movs	r3, #23
    22da:	18fc      	adds	r4, r7, r3
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	0018      	movs	r0, r3
    22e0:	4b46      	ldr	r3, [pc, #280]	; (23fc <_i2c_master_read_packet+0x26c>)
    22e2:	4798      	blx	r3
    22e4:	0003      	movs	r3, r0
    22e6:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    22e8:	2317      	movs	r3, #23
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d000      	beq.n	22f4 <_i2c_master_read_packet+0x164>
    22f2:	e075      	b.n	23e0 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    22f4:	e04b      	b.n	238e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	8b5b      	ldrh	r3, [r3, #26]
    22fa:	b29b      	uxth	r3, r3
    22fc:	001a      	movs	r2, r3
    22fe:	2320      	movs	r3, #32
    2300:	4013      	ands	r3, r2
    2302:	d101      	bne.n	2308 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    2304:	2341      	movs	r3, #65	; 0x41
    2306:	e06e      	b.n	23e6 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	7adb      	ldrb	r3, [r3, #11]
    230c:	2b00      	cmp	r3, #0
    230e:	d01e      	beq.n	234e <_i2c_master_read_packet+0x1be>
    2310:	230b      	movs	r3, #11
    2312:	18fb      	adds	r3, r7, r3
    2314:	781b      	ldrb	r3, [r3, #0]
    2316:	2201      	movs	r2, #1
    2318:	4053      	eors	r3, r2
    231a:	b2db      	uxtb	r3, r3
    231c:	2b00      	cmp	r3, #0
    231e:	d004      	beq.n	232a <_i2c_master_read_packet+0x19a>
    2320:	2314      	movs	r3, #20
    2322:	18fb      	adds	r3, r7, r3
    2324:	881b      	ldrh	r3, [r3, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d009      	beq.n	233e <_i2c_master_read_packet+0x1ae>
    232a:	230b      	movs	r3, #11
    232c:	18fb      	adds	r3, r7, r3
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d00c      	beq.n	234e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    2334:	2314      	movs	r3, #20
    2336:	18fb      	adds	r3, r7, r3
    2338:	881b      	ldrh	r3, [r3, #0]
    233a:	2b01      	cmp	r3, #1
    233c:	d107      	bne.n	234e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	685b      	ldr	r3, [r3, #4]
    2342:	2280      	movs	r2, #128	; 0x80
    2344:	02d2      	lsls	r2, r2, #11
    2346:	431a      	orrs	r2, r3
    2348:	68fb      	ldr	r3, [r7, #12]
    234a:	605a      	str	r2, [r3, #4]
    234c:	e01a      	b.n	2384 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	0018      	movs	r0, r3
    2352:	4b2b      	ldr	r3, [pc, #172]	; (2400 <_i2c_master_read_packet+0x270>)
    2354:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	685a      	ldr	r2, [r3, #4]
    235a:	2312      	movs	r3, #18
    235c:	18fb      	adds	r3, r7, r3
    235e:	881b      	ldrh	r3, [r3, #0]
    2360:	2112      	movs	r1, #18
    2362:	1879      	adds	r1, r7, r1
    2364:	1c58      	adds	r0, r3, #1
    2366:	8008      	strh	r0, [r1, #0]
    2368:	18d3      	adds	r3, r2, r3
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	2128      	movs	r1, #40	; 0x28
    236e:	5c52      	ldrb	r2, [r2, r1]
    2370:	b2d2      	uxtb	r2, r2
    2372:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    2374:	2317      	movs	r3, #23
    2376:	18fc      	adds	r4, r7, r3
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	0018      	movs	r0, r3
    237c:	4b1e      	ldr	r3, [pc, #120]	; (23f8 <_i2c_master_read_packet+0x268>)
    237e:	4798      	blx	r3
    2380:	0003      	movs	r3, r0
    2382:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    2384:	2317      	movs	r3, #23
    2386:	18fb      	adds	r3, r7, r3
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d109      	bne.n	23a2 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    238e:	2314      	movs	r3, #20
    2390:	18fb      	adds	r3, r7, r3
    2392:	881b      	ldrh	r3, [r3, #0]
    2394:	2214      	movs	r2, #20
    2396:	18ba      	adds	r2, r7, r2
    2398:	1e59      	subs	r1, r3, #1
    239a:	8011      	strh	r1, [r2, #0]
    239c:	2b00      	cmp	r3, #0
    239e:	d1aa      	bne.n	22f6 <_i2c_master_read_packet+0x166>
    23a0:	e000      	b.n	23a4 <_i2c_master_read_packet+0x214>
				break;
    23a2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	7a9b      	ldrb	r3, [r3, #10]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d00a      	beq.n	23c2 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	0018      	movs	r0, r3
    23b0:	4b13      	ldr	r3, [pc, #76]	; (2400 <_i2c_master_read_packet+0x270>)
    23b2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    23b4:	68fb      	ldr	r3, [r7, #12]
    23b6:	685b      	ldr	r3, [r3, #4]
    23b8:	22c0      	movs	r2, #192	; 0xc0
    23ba:	0292      	lsls	r2, r2, #10
    23bc:	431a      	orrs	r2, r3
    23be:	68fb      	ldr	r3, [r7, #12]
    23c0:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	0018      	movs	r0, r3
    23c6:	4b0e      	ldr	r3, [pc, #56]	; (2400 <_i2c_master_read_packet+0x270>)
    23c8:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    23ca:	683b      	ldr	r3, [r7, #0]
    23cc:	685a      	ldr	r2, [r3, #4]
    23ce:	2312      	movs	r3, #18
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	881b      	ldrh	r3, [r3, #0]
    23d4:	18d3      	adds	r3, r2, r3
    23d6:	68fa      	ldr	r2, [r7, #12]
    23d8:	2128      	movs	r1, #40	; 0x28
    23da:	5c52      	ldrb	r2, [r2, r1]
    23dc:	b2d2      	uxtb	r2, r2
    23de:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    23e0:	2317      	movs	r3, #23
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	781b      	ldrb	r3, [r3, #0]
}
    23e6:	0018      	movs	r0, r3
    23e8:	46bd      	mov	sp, r7
    23ea:	b007      	add	sp, #28
    23ec:	bd90      	pop	{r4, r7, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	0000213d 	.word	0x0000213d
    23f4:	fffbffff 	.word	0xfffbffff
    23f8:	000020df 	.word	0x000020df
    23fc:	00002081 	.word	0x00002081
    2400:	00001b19 	.word	0x00001b19

00002404 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2404:	b580      	push	{r7, lr}
    2406:	b082      	sub	sp, #8
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	8b9b      	ldrh	r3, [r3, #28]
    2412:	b29b      	uxth	r3, r3
    2414:	2b00      	cmp	r3, #0
    2416:	d001      	beq.n	241c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    2418:	2305      	movs	r3, #5
    241a:	e00c      	b.n	2436 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	2201      	movs	r2, #1
    2420:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	2201      	movs	r2, #1
    2426:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    2428:	683a      	ldr	r2, [r7, #0]
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	0011      	movs	r1, r2
    242e:	0018      	movs	r0, r3
    2430:	4b03      	ldr	r3, [pc, #12]	; (2440 <i2c_master_read_packet_wait+0x3c>)
    2432:	4798      	blx	r3
    2434:	0003      	movs	r3, r0
}
    2436:	0018      	movs	r0, r3
    2438:	46bd      	mov	sp, r7
    243a:	b002      	add	sp, #8
    243c:	bd80      	pop	{r7, pc}
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	00002191 	.word	0x00002191

00002444 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2444:	b590      	push	{r4, r7, lr}
    2446:	b087      	sub	sp, #28
    2448:	af00      	add	r7, sp, #0
    244a:	6078      	str	r0, [r7, #4]
    244c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	681b      	ldr	r3, [r3, #0]
    2452:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2454:	2314      	movs	r3, #20
    2456:	18fb      	adds	r3, r7, r3
    2458:	683a      	ldr	r2, [r7, #0]
    245a:	8852      	ldrh	r2, [r2, #2]
    245c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	0018      	movs	r0, r3
    2462:	4b51      	ldr	r3, [pc, #324]	; (25a8 <_i2c_master_write_packet+0x164>)
    2464:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2466:	683b      	ldr	r3, [r7, #0]
    2468:	7a5b      	ldrb	r3, [r3, #9]
    246a:	2b00      	cmp	r3, #0
    246c:	d006      	beq.n	247c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    246e:	683b      	ldr	r3, [r7, #0]
    2470:	7a9a      	ldrb	r2, [r3, #10]
    2472:	687b      	ldr	r3, [r7, #4]
    2474:	0011      	movs	r1, r2
    2476:	0018      	movs	r0, r3
    2478:	4b4c      	ldr	r3, [pc, #304]	; (25ac <_i2c_master_write_packet+0x168>)
    247a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    247c:	68fb      	ldr	r3, [r7, #12]
    247e:	685b      	ldr	r3, [r3, #4]
    2480:	4a4b      	ldr	r2, [pc, #300]	; (25b0 <_i2c_master_write_packet+0x16c>)
    2482:	401a      	ands	r2, r3
    2484:	68fb      	ldr	r3, [r7, #12]
    2486:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2488:	683b      	ldr	r3, [r7, #0]
    248a:	7a1b      	ldrb	r3, [r3, #8]
    248c:	2b00      	cmp	r3, #0
    248e:	d00d      	beq.n	24ac <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	881b      	ldrh	r3, [r3, #0]
    2494:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2496:	683b      	ldr	r3, [r7, #0]
    2498:	7a5b      	ldrb	r3, [r3, #9]
    249a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    249c:	4313      	orrs	r3, r2
    249e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    24a0:	2380      	movs	r3, #128	; 0x80
    24a2:	021b      	lsls	r3, r3, #8
    24a4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    24a6:	68fb      	ldr	r3, [r7, #12]
    24a8:	625a      	str	r2, [r3, #36]	; 0x24
    24aa:	e009      	b.n	24c0 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	881b      	ldrh	r3, [r3, #0]
    24b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    24b2:	683b      	ldr	r3, [r7, #0]
    24b4:	7a5b      	ldrb	r3, [r3, #9]
    24b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    24b8:	4313      	orrs	r3, r2
    24ba:	001a      	movs	r2, r3
    24bc:	68fb      	ldr	r3, [r7, #12]
    24be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    24c0:	2317      	movs	r3, #23
    24c2:	18fc      	adds	r4, r7, r3
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	0018      	movs	r0, r3
    24c8:	4b3a      	ldr	r3, [pc, #232]	; (25b4 <_i2c_master_write_packet+0x170>)
    24ca:	4798      	blx	r3
    24cc:	0003      	movs	r3, r0
    24ce:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    24d0:	2317      	movs	r3, #23
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d107      	bne.n	24ea <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    24da:	2317      	movs	r3, #23
    24dc:	18fc      	adds	r4, r7, r3
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	0018      	movs	r0, r3
    24e2:	4b35      	ldr	r3, [pc, #212]	; (25b8 <_i2c_master_write_packet+0x174>)
    24e4:	4798      	blx	r3
    24e6:	0003      	movs	r3, r0
    24e8:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    24ea:	2317      	movs	r3, #23
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d152      	bne.n	259a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    24f4:	2312      	movs	r3, #18
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	2200      	movs	r2, #0
    24fa:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    24fc:	e033      	b.n	2566 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    24fe:	68fb      	ldr	r3, [r7, #12]
    2500:	8b5b      	ldrh	r3, [r3, #26]
    2502:	b29b      	uxth	r3, r3
    2504:	001a      	movs	r2, r3
    2506:	2320      	movs	r3, #32
    2508:	4013      	ands	r3, r2
    250a:	d101      	bne.n	2510 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    250c:	2341      	movs	r3, #65	; 0x41
    250e:	e047      	b.n	25a0 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	0018      	movs	r0, r3
    2514:	4b24      	ldr	r3, [pc, #144]	; (25a8 <_i2c_master_write_packet+0x164>)
    2516:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    2518:	683b      	ldr	r3, [r7, #0]
    251a:	685a      	ldr	r2, [r3, #4]
    251c:	2312      	movs	r3, #18
    251e:	18fb      	adds	r3, r7, r3
    2520:	881b      	ldrh	r3, [r3, #0]
    2522:	2112      	movs	r1, #18
    2524:	1879      	adds	r1, r7, r1
    2526:	1c58      	adds	r0, r3, #1
    2528:	8008      	strh	r0, [r1, #0]
    252a:	18d3      	adds	r3, r2, r3
    252c:	7819      	ldrb	r1, [r3, #0]
    252e:	68fb      	ldr	r3, [r7, #12]
    2530:	2228      	movs	r2, #40	; 0x28
    2532:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    2534:	2317      	movs	r3, #23
    2536:	18fc      	adds	r4, r7, r3
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	0018      	movs	r0, r3
    253c:	4b1d      	ldr	r3, [pc, #116]	; (25b4 <_i2c_master_write_packet+0x170>)
    253e:	4798      	blx	r3
    2540:	0003      	movs	r3, r0
    2542:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    2544:	2317      	movs	r3, #23
    2546:	18fb      	adds	r3, r7, r3
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	2b00      	cmp	r3, #0
    254c:	d115      	bne.n	257a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    254e:	68fb      	ldr	r3, [r7, #12]
    2550:	8b5b      	ldrh	r3, [r3, #26]
    2552:	b29b      	uxth	r3, r3
    2554:	001a      	movs	r2, r3
    2556:	2304      	movs	r3, #4
    2558:	4013      	ands	r3, r2
    255a:	d004      	beq.n	2566 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    255c:	2317      	movs	r3, #23
    255e:	18fb      	adds	r3, r7, r3
    2560:	221e      	movs	r2, #30
    2562:	701a      	strb	r2, [r3, #0]
				break;
    2564:	e00a      	b.n	257c <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    2566:	2314      	movs	r3, #20
    2568:	18fb      	adds	r3, r7, r3
    256a:	881b      	ldrh	r3, [r3, #0]
    256c:	2214      	movs	r2, #20
    256e:	18ba      	adds	r2, r7, r2
    2570:	1e59      	subs	r1, r3, #1
    2572:	8011      	strh	r1, [r2, #0]
    2574:	2b00      	cmp	r3, #0
    2576:	d1c2      	bne.n	24fe <_i2c_master_write_packet+0xba>
    2578:	e000      	b.n	257c <_i2c_master_write_packet+0x138>
				break;
    257a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	7a9b      	ldrb	r3, [r3, #10]
    2580:	2b00      	cmp	r3, #0
    2582:	d00a      	beq.n	259a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	0018      	movs	r0, r3
    2588:	4b07      	ldr	r3, [pc, #28]	; (25a8 <_i2c_master_write_packet+0x164>)
    258a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	685b      	ldr	r3, [r3, #4]
    2590:	22c0      	movs	r2, #192	; 0xc0
    2592:	0292      	lsls	r2, r2, #10
    2594:	431a      	orrs	r2, r3
    2596:	68fb      	ldr	r3, [r7, #12]
    2598:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    259a:	2317      	movs	r3, #23
    259c:	18fb      	adds	r3, r7, r3
    259e:	781b      	ldrb	r3, [r3, #0]
}
    25a0:	0018      	movs	r0, r3
    25a2:	46bd      	mov	sp, r7
    25a4:	b007      	add	sp, #28
    25a6:	bd90      	pop	{r4, r7, pc}
    25a8:	00001b19 	.word	0x00001b19
    25ac:	0000213d 	.word	0x0000213d
    25b0:	fffbffff 	.word	0xfffbffff
    25b4:	000020df 	.word	0x000020df
    25b8:	00002081 	.word	0x00002081

000025bc <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b082      	sub	sp, #8
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
    25c4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	8b9b      	ldrh	r3, [r3, #28]
    25ca:	b29b      	uxth	r3, r3
    25cc:	2b00      	cmp	r3, #0
    25ce:	d001      	beq.n	25d4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    25d0:	2305      	movs	r3, #5
    25d2:	e00c      	b.n	25ee <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	2200      	movs	r2, #0
    25d8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    25da:	687b      	ldr	r3, [r7, #4]
    25dc:	2201      	movs	r2, #1
    25de:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    25e0:	683a      	ldr	r2, [r7, #0]
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	0011      	movs	r1, r2
    25e6:	0018      	movs	r0, r3
    25e8:	4b03      	ldr	r3, [pc, #12]	; (25f8 <i2c_master_write_packet_wait_no_stop+0x3c>)
    25ea:	4798      	blx	r3
    25ec:	0003      	movs	r3, r0
}
    25ee:	0018      	movs	r0, r3
    25f0:	46bd      	mov	sp, r7
    25f2:	b002      	add	sp, #8
    25f4:	bd80      	pop	{r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	00002445 	.word	0x00002445

000025fc <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b084      	sub	sp, #16
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	0018      	movs	r0, r3
    260e:	4b06      	ldr	r3, [pc, #24]	; (2628 <i2c_master_send_stop+0x2c>)
    2610:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2612:	68fb      	ldr	r3, [r7, #12]
    2614:	685b      	ldr	r3, [r3, #4]
    2616:	22c0      	movs	r2, #192	; 0xc0
    2618:	0292      	lsls	r2, r2, #10
    261a:	431a      	orrs	r2, r3
    261c:	68fb      	ldr	r3, [r7, #12]
    261e:	605a      	str	r2, [r3, #4]
}
    2620:	46c0      	nop			; (mov r8, r8)
    2622:	46bd      	mov	sp, r7
    2624:	b004      	add	sp, #16
    2626:	bd80      	pop	{r7, pc}
    2628:	00001b19 	.word	0x00001b19

0000262c <i2c_master_is_syncing>:
{
    262c:	b580      	push	{r7, lr}
    262e:	b084      	sub	sp, #16
    2630:	af00      	add	r7, sp, #0
    2632:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	681b      	ldr	r3, [r3, #0]
    2638:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    263a:	68fb      	ldr	r3, [r7, #12]
    263c:	69db      	ldr	r3, [r3, #28]
    263e:	2207      	movs	r2, #7
    2640:	4013      	ands	r3, r2
    2642:	1e5a      	subs	r2, r3, #1
    2644:	4193      	sbcs	r3, r2
    2646:	b2db      	uxtb	r3, r3
}
    2648:	0018      	movs	r0, r3
    264a:	46bd      	mov	sp, r7
    264c:	b004      	add	sp, #16
    264e:	bd80      	pop	{r7, pc}

00002650 <_i2c_master_wait_for_sync>:
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2658:	46c0      	nop			; (mov r8, r8)
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	0018      	movs	r0, r3
    265e:	4b04      	ldr	r3, [pc, #16]	; (2670 <_i2c_master_wait_for_sync+0x20>)
    2660:	4798      	blx	r3
    2662:	1e03      	subs	r3, r0, #0
    2664:	d1f9      	bne.n	265a <_i2c_master_wait_for_sync+0xa>
}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	46bd      	mov	sp, r7
    266a:	b002      	add	sp, #8
    266c:	bd80      	pop	{r7, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	0000262d 	.word	0x0000262d

00002674 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    2674:	b580      	push	{r7, lr}
    2676:	b084      	sub	sp, #16
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2682:	68fb      	ldr	r3, [r7, #12]
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	011b      	lsls	r3, r3, #4
    2688:	0fdb      	lsrs	r3, r3, #31
    268a:	b2db      	uxtb	r3, r3
    268c:	001a      	movs	r2, r3
    268e:	230b      	movs	r3, #11
    2690:	18fb      	adds	r3, r7, r3
    2692:	1e51      	subs	r1, r2, #1
    2694:	418a      	sbcs	r2, r1
    2696:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    2698:	2308      	movs	r3, #8
    269a:	18fb      	adds	r3, r7, r3
    269c:	687a      	ldr	r2, [r7, #4]
    269e:	8b52      	ldrh	r2, [r2, #26]
    26a0:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    26a2:	687b      	ldr	r3, [r7, #4]
    26a4:	8b9b      	ldrh	r3, [r3, #28]
    26a6:	b29a      	uxth	r2, r3
    26a8:	2308      	movs	r3, #8
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	2108      	movs	r1, #8
    26ae:	1879      	adds	r1, r7, r1
    26b0:	8809      	ldrh	r1, [r1, #0]
    26b2:	1a8a      	subs	r2, r1, r2
    26b4:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	8b9b      	ldrh	r3, [r3, #28]
    26ba:	b29b      	uxth	r3, r3
    26bc:	3b01      	subs	r3, #1
    26be:	b29a      	uxth	r2, r3
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    26c4:	230b      	movs	r3, #11
    26c6:	18fb      	adds	r3, r7, r3
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d010      	beq.n	26f0 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    26ce:	687b      	ldr	r3, [r7, #4]
    26d0:	7adb      	ldrb	r3, [r3, #11]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d01c      	beq.n	2710 <_i2c_master_read+0x9c>
    26d6:	687b      	ldr	r3, [r7, #4]
    26d8:	8b9b      	ldrh	r3, [r3, #28]
    26da:	b29b      	uxth	r3, r3
    26dc:	2b01      	cmp	r3, #1
    26de:	d117      	bne.n	2710 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	685b      	ldr	r3, [r3, #4]
    26e4:	2280      	movs	r2, #128	; 0x80
    26e6:	02d2      	lsls	r2, r2, #11
    26e8:	431a      	orrs	r2, r3
    26ea:	68fb      	ldr	r3, [r7, #12]
    26ec:	605a      	str	r2, [r3, #4]
    26ee:	e00f      	b.n	2710 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	7adb      	ldrb	r3, [r3, #11]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d00b      	beq.n	2710 <_i2c_master_read+0x9c>
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	8b9b      	ldrh	r3, [r3, #28]
    26fc:	b29b      	uxth	r3, r3
    26fe:	2b00      	cmp	r3, #0
    2700:	d106      	bne.n	2710 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	685b      	ldr	r3, [r3, #4]
    2706:	2280      	movs	r2, #128	; 0x80
    2708:	02d2      	lsls	r2, r2, #11
    270a:	431a      	orrs	r2, r3
    270c:	68fb      	ldr	r3, [r7, #12]
    270e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	8b9b      	ldrh	r3, [r3, #28]
    2714:	b29b      	uxth	r3, r3
    2716:	2b00      	cmp	r3, #0
    2718:	d10e      	bne.n	2738 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	7a9b      	ldrb	r3, [r3, #10]
    271e:	2b00      	cmp	r3, #0
    2720:	d00a      	beq.n	2738 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	0018      	movs	r0, r3
    2726:	4b0e      	ldr	r3, [pc, #56]	; (2760 <_i2c_master_read+0xec>)
    2728:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    272a:	68fb      	ldr	r3, [r7, #12]
    272c:	685b      	ldr	r3, [r3, #4]
    272e:	22c0      	movs	r2, #192	; 0xc0
    2730:	0292      	lsls	r2, r2, #10
    2732:	431a      	orrs	r2, r3
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	0018      	movs	r0, r3
    273c:	4b08      	ldr	r3, [pc, #32]	; (2760 <_i2c_master_read+0xec>)
    273e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    2740:	687b      	ldr	r3, [r7, #4]
    2742:	6a1a      	ldr	r2, [r3, #32]
    2744:	2308      	movs	r3, #8
    2746:	18fb      	adds	r3, r7, r3
    2748:	881b      	ldrh	r3, [r3, #0]
    274a:	18d3      	adds	r3, r2, r3
    274c:	68fa      	ldr	r2, [r7, #12]
    274e:	2128      	movs	r1, #40	; 0x28
    2750:	5c52      	ldrb	r2, [r2, r1]
    2752:	b2d2      	uxtb	r2, r2
    2754:	701a      	strb	r2, [r3, #0]
}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	46bd      	mov	sp, r7
    275a:	b004      	add	sp, #16
    275c:	bd80      	pop	{r7, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00002651 	.word	0x00002651

00002764 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    2764:	b580      	push	{r7, lr}
    2766:	b084      	sub	sp, #16
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	8b5b      	ldrh	r3, [r3, #26]
    2776:	b29b      	uxth	r3, r3
    2778:	001a      	movs	r2, r3
    277a:	2304      	movs	r3, #4
    277c:	4013      	ands	r3, r2
    277e:	d004      	beq.n	278a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	2225      	movs	r2, #37	; 0x25
    2784:	211e      	movs	r1, #30
    2786:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    2788:	e024      	b.n	27d4 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    278a:	230a      	movs	r3, #10
    278c:	18fb      	adds	r3, r7, r3
    278e:	687a      	ldr	r2, [r7, #4]
    2790:	8b52      	ldrh	r2, [r2, #26]
    2792:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	8b9b      	ldrh	r3, [r3, #28]
    2798:	b29a      	uxth	r2, r3
    279a:	230a      	movs	r3, #10
    279c:	18fb      	adds	r3, r7, r3
    279e:	210a      	movs	r1, #10
    27a0:	1879      	adds	r1, r7, r1
    27a2:	8809      	ldrh	r1, [r1, #0]
    27a4:	1a8a      	subs	r2, r1, r2
    27a6:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	8b9b      	ldrh	r3, [r3, #28]
    27ac:	b29b      	uxth	r3, r3
    27ae:	3b01      	subs	r3, #1
    27b0:	b29a      	uxth	r2, r3
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	0018      	movs	r0, r3
    27ba:	4b08      	ldr	r3, [pc, #32]	; (27dc <_i2c_master_write+0x78>)
    27bc:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	6a1a      	ldr	r2, [r3, #32]
    27c2:	230a      	movs	r3, #10
    27c4:	18fb      	adds	r3, r7, r3
    27c6:	881b      	ldrh	r3, [r3, #0]
    27c8:	18d3      	adds	r3, r2, r3
    27ca:	781b      	ldrb	r3, [r3, #0]
    27cc:	b2d9      	uxtb	r1, r3
    27ce:	68fb      	ldr	r3, [r7, #12]
    27d0:	2228      	movs	r2, #40	; 0x28
    27d2:	5499      	strb	r1, [r3, r2]
}
    27d4:	46bd      	mov	sp, r7
    27d6:	b004      	add	sp, #16
    27d8:	bd80      	pop	{r7, pc}
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	00002651 	.word	0x00002651

000027e0 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b084      	sub	sp, #16
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	681b      	ldr	r3, [r3, #0]
    27ec:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    27ee:	68fb      	ldr	r3, [r7, #12]
    27f0:	7e1b      	ldrb	r3, [r3, #24]
    27f2:	b2db      	uxtb	r3, r3
    27f4:	001a      	movs	r2, r3
    27f6:	2301      	movs	r3, #1
    27f8:	4013      	ands	r3, r2
    27fa:	d02b      	beq.n	2854 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    27fc:	68fb      	ldr	r3, [r7, #12]
    27fe:	2201      	movs	r2, #1
    2800:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2802:	68fb      	ldr	r3, [r7, #12]
    2804:	8b5b      	ldrh	r3, [r3, #26]
    2806:	b29b      	uxth	r3, r3
    2808:	001a      	movs	r2, r3
    280a:	2302      	movs	r3, #2
    280c:	4013      	ands	r3, r2
    280e:	d004      	beq.n	281a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	2225      	movs	r2, #37	; 0x25
    2814:	2141      	movs	r1, #65	; 0x41
    2816:	5499      	strb	r1, [r3, r2]
    2818:	e01c      	b.n	2854 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	8b5b      	ldrh	r3, [r3, #26]
    281e:	b29b      	uxth	r3, r3
    2820:	001a      	movs	r2, r3
    2822:	2304      	movs	r3, #4
    2824:	4013      	ands	r3, r2
    2826:	d015      	beq.n	2854 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	2225      	movs	r2, #37	; 0x25
    282c:	2118      	movs	r1, #24
    282e:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	2200      	movs	r2, #0
    2834:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	7a9b      	ldrb	r3, [r3, #10]
    283a:	2b00      	cmp	r3, #0
    283c:	d00a      	beq.n	2854 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	0018      	movs	r0, r3
    2842:	4b13      	ldr	r3, [pc, #76]	; (2890 <_i2c_master_async_address_response+0xb0>)
    2844:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2846:	68fb      	ldr	r3, [r7, #12]
    2848:	685b      	ldr	r3, [r3, #4]
    284a:	22c0      	movs	r2, #192	; 0xc0
    284c:	0292      	lsls	r2, r2, #10
    284e:	431a      	orrs	r2, r3
    2850:	68fb      	ldr	r3, [r7, #12]
    2852:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	8b9b      	ldrh	r3, [r3, #28]
    2858:	b29a      	uxth	r2, r3
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	2225      	movs	r2, #37	; 0x25
    2862:	5c9b      	ldrb	r3, [r3, r2]
    2864:	b2db      	uxtb	r3, r3
    2866:	2b05      	cmp	r3, #5
    2868:	d10e      	bne.n	2888 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	2224      	movs	r2, #36	; 0x24
    286e:	5c9b      	ldrb	r3, [r3, r2]
    2870:	b2db      	uxtb	r3, r3
    2872:	2b00      	cmp	r3, #0
    2874:	d104      	bne.n	2880 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	0018      	movs	r0, r3
    287a:	4b06      	ldr	r3, [pc, #24]	; (2894 <_i2c_master_async_address_response+0xb4>)
    287c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    287e:	e003      	b.n	2888 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	0018      	movs	r0, r3
    2884:	4b04      	ldr	r3, [pc, #16]	; (2898 <_i2c_master_async_address_response+0xb8>)
    2886:	4798      	blx	r3
}
    2888:	46c0      	nop			; (mov r8, r8)
    288a:	46bd      	mov	sp, r7
    288c:	b004      	add	sp, #16
    288e:	bd80      	pop	{r7, pc}
    2890:	00002651 	.word	0x00002651
    2894:	00002765 	.word	0x00002765
    2898:	00002675 	.word	0x00002675

0000289c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    289c:	b580      	push	{r7, lr}
    289e:	b086      	sub	sp, #24
    28a0:	af00      	add	r7, sp, #0
    28a2:	0002      	movs	r2, r0
    28a4:	1dfb      	adds	r3, r7, #7
    28a6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    28a8:	1dfb      	adds	r3, r7, #7
    28aa:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    28ac:	4b93      	ldr	r3, [pc, #588]	; (2afc <_i2c_master_interrupt_handler+0x260>)
    28ae:	0092      	lsls	r2, r2, #2
    28b0:	58d3      	ldr	r3, [r2, r3]
    28b2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    28b4:	697b      	ldr	r3, [r7, #20]
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    28ba:	693b      	ldr	r3, [r7, #16]
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	011b      	lsls	r3, r3, #4
    28c0:	0fdb      	lsrs	r3, r3, #31
    28c2:	b2db      	uxtb	r3, r3
    28c4:	001a      	movs	r2, r3
    28c6:	230f      	movs	r3, #15
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	1e51      	subs	r1, r2, #1
    28cc:	418a      	sbcs	r2, r1
    28ce:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    28d0:	230e      	movs	r3, #14
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	697a      	ldr	r2, [r7, #20]
    28d6:	7e52      	ldrb	r2, [r2, #25]
    28d8:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    28da:	697b      	ldr	r3, [r7, #20]
    28dc:	7e1b      	ldrb	r3, [r3, #24]
    28de:	b2da      	uxtb	r2, r3
    28e0:	230e      	movs	r3, #14
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	210e      	movs	r1, #14
    28e6:	1879      	adds	r1, r7, r1
    28e8:	7809      	ldrb	r1, [r1, #0]
    28ea:	400a      	ands	r2, r1
    28ec:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    28ee:	697b      	ldr	r3, [r7, #20]
    28f0:	8b5b      	ldrh	r3, [r3, #26]
    28f2:	b29b      	uxth	r3, r3
    28f4:	2b00      	cmp	r3, #0
    28f6:	d109      	bne.n	290c <_i2c_master_interrupt_handler+0x70>
    28f8:	697b      	ldr	r3, [r7, #20]
    28fa:	8b9b      	ldrh	r3, [r3, #28]
    28fc:	b29b      	uxth	r3, r3
    28fe:	2b00      	cmp	r3, #0
    2900:	d004      	beq.n	290c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    2902:	697b      	ldr	r3, [r7, #20]
    2904:	0018      	movs	r0, r3
    2906:	4b7e      	ldr	r3, [pc, #504]	; (2b00 <_i2c_master_interrupt_handler+0x264>)
    2908:	4798      	blx	r3
    290a:	e070      	b.n	29ee <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    290c:	697b      	ldr	r3, [r7, #20]
    290e:	8b5b      	ldrh	r3, [r3, #26]
    2910:	b29b      	uxth	r3, r3
    2912:	2b00      	cmp	r3, #0
    2914:	d039      	beq.n	298a <_i2c_master_interrupt_handler+0xee>
    2916:	697b      	ldr	r3, [r7, #20]
    2918:	8b9b      	ldrh	r3, [r3, #28]
    291a:	b29b      	uxth	r3, r3
    291c:	2b00      	cmp	r3, #0
    291e:	d134      	bne.n	298a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    2920:	697b      	ldr	r3, [r7, #20]
    2922:	2225      	movs	r2, #37	; 0x25
    2924:	5c9b      	ldrb	r3, [r3, r2]
    2926:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2928:	2b05      	cmp	r3, #5
    292a:	d12e      	bne.n	298a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    292c:	697b      	ldr	r3, [r7, #20]
    292e:	2224      	movs	r2, #36	; 0x24
    2930:	5c9b      	ldrb	r3, [r3, r2]
    2932:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    2934:	2b00      	cmp	r3, #0
    2936:	d128      	bne.n	298a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	2203      	movs	r2, #3
    293c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    293e:	697b      	ldr	r3, [r7, #20]
    2940:	2200      	movs	r2, #0
    2942:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    2944:	697b      	ldr	r3, [r7, #20]
    2946:	2225      	movs	r2, #37	; 0x25
    2948:	2100      	movs	r1, #0
    294a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    294c:	697b      	ldr	r3, [r7, #20]
    294e:	7a9b      	ldrb	r3, [r3, #10]
    2950:	2b00      	cmp	r3, #0
    2952:	d00b      	beq.n	296c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    2954:	697b      	ldr	r3, [r7, #20]
    2956:	0018      	movs	r0, r3
    2958:	4b6a      	ldr	r3, [pc, #424]	; (2b04 <_i2c_master_interrupt_handler+0x268>)
    295a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    295c:	693b      	ldr	r3, [r7, #16]
    295e:	685b      	ldr	r3, [r3, #4]
    2960:	22c0      	movs	r2, #192	; 0xc0
    2962:	0292      	lsls	r2, r2, #10
    2964:	431a      	orrs	r2, r3
    2966:	693b      	ldr	r3, [r7, #16]
    2968:	605a      	str	r2, [r3, #4]
    296a:	e002      	b.n	2972 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    296c:	693b      	ldr	r3, [r7, #16]
    296e:	2201      	movs	r2, #1
    2970:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    2972:	230e      	movs	r3, #14
    2974:	18fb      	adds	r3, r7, r3
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2201      	movs	r2, #1
    297a:	4013      	ands	r3, r2
    297c:	d037      	beq.n	29ee <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    297e:	697b      	ldr	r3, [r7, #20]
    2980:	68db      	ldr	r3, [r3, #12]
    2982:	697a      	ldr	r2, [r7, #20]
    2984:	0010      	movs	r0, r2
    2986:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    2988:	e031      	b.n	29ee <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    298a:	697b      	ldr	r3, [r7, #20]
    298c:	8b5b      	ldrh	r3, [r3, #26]
    298e:	b29b      	uxth	r3, r3
    2990:	2b00      	cmp	r3, #0
    2992:	d02c      	beq.n	29ee <_i2c_master_interrupt_handler+0x152>
    2994:	697b      	ldr	r3, [r7, #20]
    2996:	8b9b      	ldrh	r3, [r3, #28]
    2998:	b29b      	uxth	r3, r3
    299a:	2b00      	cmp	r3, #0
    299c:	d027      	beq.n	29ee <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    299e:	693b      	ldr	r3, [r7, #16]
    29a0:	8b5b      	ldrh	r3, [r3, #26]
    29a2:	b29b      	uxth	r3, r3
    29a4:	001a      	movs	r2, r3
    29a6:	2320      	movs	r3, #32
    29a8:	4013      	ands	r3, r2
    29aa:	d111      	bne.n	29d0 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    29ac:	230f      	movs	r3, #15
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	2201      	movs	r2, #1
    29b4:	4053      	eors	r3, r2
    29b6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    29b8:	2b00      	cmp	r3, #0
    29ba:	d104      	bne.n	29c6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    29bc:	697b      	ldr	r3, [r7, #20]
    29be:	8b9b      	ldrh	r3, [r3, #28]
    29c0:	b29b      	uxth	r3, r3
    29c2:	2b01      	cmp	r3, #1
    29c4:	d004      	beq.n	29d0 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    29c6:	697b      	ldr	r3, [r7, #20]
    29c8:	2225      	movs	r2, #37	; 0x25
    29ca:	2141      	movs	r1, #65	; 0x41
    29cc:	5499      	strb	r1, [r3, r2]
    29ce:	e00e      	b.n	29ee <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    29d0:	697b      	ldr	r3, [r7, #20]
    29d2:	2224      	movs	r2, #36	; 0x24
    29d4:	5c9b      	ldrb	r3, [r3, r2]
    29d6:	b2db      	uxtb	r3, r3
    29d8:	2b00      	cmp	r3, #0
    29da:	d104      	bne.n	29e6 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    29dc:	697b      	ldr	r3, [r7, #20]
    29de:	0018      	movs	r0, r3
    29e0:	4b49      	ldr	r3, [pc, #292]	; (2b08 <_i2c_master_interrupt_handler+0x26c>)
    29e2:	4798      	blx	r3
    29e4:	e003      	b.n	29ee <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    29e6:	697b      	ldr	r3, [r7, #20]
    29e8:	0018      	movs	r0, r3
    29ea:	4b48      	ldr	r3, [pc, #288]	; (2b0c <_i2c_master_interrupt_handler+0x270>)
    29ec:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    29ee:	697b      	ldr	r3, [r7, #20]
    29f0:	8b5b      	ldrh	r3, [r3, #26]
    29f2:	b29b      	uxth	r3, r3
    29f4:	2b00      	cmp	r3, #0
    29f6:	d047      	beq.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
    29f8:	697b      	ldr	r3, [r7, #20]
    29fa:	8b9b      	ldrh	r3, [r3, #28]
    29fc:	b29b      	uxth	r3, r3
    29fe:	2b00      	cmp	r3, #0
    2a00:	d142      	bne.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    2a02:	697b      	ldr	r3, [r7, #20]
    2a04:	2225      	movs	r2, #37	; 0x25
    2a06:	5c9b      	ldrb	r3, [r3, r2]
    2a08:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2a0a:	2b05      	cmp	r3, #5
    2a0c:	d13c      	bne.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    2a0e:	697b      	ldr	r3, [r7, #20]
    2a10:	2224      	movs	r2, #36	; 0x24
    2a12:	5c9b      	ldrb	r3, [r3, r2]
    2a14:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    2a16:	2b01      	cmp	r3, #1
    2a18:	d136      	bne.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	7e1b      	ldrb	r3, [r3, #24]
    2a1e:	b2db      	uxtb	r3, r3
    2a20:	001a      	movs	r2, r3
    2a22:	2302      	movs	r3, #2
    2a24:	4013      	ands	r3, r2
    2a26:	d002      	beq.n	2a2e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2a28:	693b      	ldr	r3, [r7, #16]
    2a2a:	2202      	movs	r2, #2
    2a2c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    2a2e:	693b      	ldr	r3, [r7, #16]
    2a30:	2203      	movs	r2, #3
    2a32:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	2200      	movs	r2, #0
    2a38:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	2225      	movs	r2, #37	; 0x25
    2a3e:	2100      	movs	r1, #0
    2a40:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    2a42:	230e      	movs	r3, #14
    2a44:	18fb      	adds	r3, r7, r3
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	2202      	movs	r2, #2
    2a4a:	4013      	ands	r3, r2
    2a4c:	d00b      	beq.n	2a66 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	2224      	movs	r2, #36	; 0x24
    2a52:	5c9b      	ldrb	r3, [r3, r2]
    2a54:	b2db      	uxtb	r3, r3
    2a56:	2b01      	cmp	r3, #1
    2a58:	d105      	bne.n	2a66 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    2a5a:	697b      	ldr	r3, [r7, #20]
    2a5c:	691b      	ldr	r3, [r3, #16]
    2a5e:	697a      	ldr	r2, [r7, #20]
    2a60:	0010      	movs	r0, r2
    2a62:	4798      	blx	r3
    2a64:	e010      	b.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    2a66:	230e      	movs	r3, #14
    2a68:	18fb      	adds	r3, r7, r3
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	2201      	movs	r2, #1
    2a6e:	4013      	ands	r3, r2
    2a70:	d00a      	beq.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    2a72:	697b      	ldr	r3, [r7, #20]
    2a74:	2224      	movs	r2, #36	; 0x24
    2a76:	5c9b      	ldrb	r3, [r3, r2]
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d104      	bne.n	2a88 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    2a7e:	697b      	ldr	r3, [r7, #20]
    2a80:	68db      	ldr	r3, [r3, #12]
    2a82:	697a      	ldr	r2, [r7, #20]
    2a84:	0010      	movs	r0, r2
    2a86:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2a88:	697b      	ldr	r3, [r7, #20]
    2a8a:	2225      	movs	r2, #37	; 0x25
    2a8c:	5c9b      	ldrb	r3, [r3, r2]
    2a8e:	b2db      	uxtb	r3, r3
    2a90:	2b05      	cmp	r3, #5
    2a92:	d02e      	beq.n	2af2 <_i2c_master_interrupt_handler+0x256>
    2a94:	697b      	ldr	r3, [r7, #20]
    2a96:	2225      	movs	r2, #37	; 0x25
    2a98:	5c9b      	ldrb	r3, [r3, r2]
    2a9a:	b2db      	uxtb	r3, r3
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d028      	beq.n	2af2 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    2aa0:	693b      	ldr	r3, [r7, #16]
    2aa2:	2203      	movs	r2, #3
    2aa4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2aa6:	697b      	ldr	r3, [r7, #20]
    2aa8:	2200      	movs	r2, #0
    2aaa:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    2aac:	697b      	ldr	r3, [r7, #20]
    2aae:	2200      	movs	r2, #0
    2ab0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2ab2:	697b      	ldr	r3, [r7, #20]
    2ab4:	2225      	movs	r2, #37	; 0x25
    2ab6:	5c9b      	ldrb	r3, [r3, r2]
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	2b41      	cmp	r3, #65	; 0x41
    2abc:	d00e      	beq.n	2adc <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    2abe:	697b      	ldr	r3, [r7, #20]
    2ac0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d00a      	beq.n	2adc <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    2ac6:	697b      	ldr	r3, [r7, #20]
    2ac8:	0018      	movs	r0, r3
    2aca:	4b0e      	ldr	r3, [pc, #56]	; (2b04 <_i2c_master_interrupt_handler+0x268>)
    2acc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    2ace:	693b      	ldr	r3, [r7, #16]
    2ad0:	685b      	ldr	r3, [r3, #4]
    2ad2:	22e0      	movs	r2, #224	; 0xe0
    2ad4:	02d2      	lsls	r2, r2, #11
    2ad6:	431a      	orrs	r2, r3
    2ad8:	693b      	ldr	r3, [r7, #16]
    2ada:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    2adc:	230e      	movs	r3, #14
    2ade:	18fb      	adds	r3, r7, r3
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	2204      	movs	r2, #4
    2ae4:	4013      	ands	r3, r2
    2ae6:	d004      	beq.n	2af2 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2ae8:	697b      	ldr	r3, [r7, #20]
    2aea:	695b      	ldr	r3, [r3, #20]
    2aec:	697a      	ldr	r2, [r7, #20]
    2aee:	0010      	movs	r0, r2
    2af0:	4798      	blx	r3
		}
	}
}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	46bd      	mov	sp, r7
    2af6:	b006      	add	sp, #24
    2af8:	bd80      	pop	{r7, pc}
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	200003d8 	.word	0x200003d8
    2b00:	000027e1 	.word	0x000027e1
    2b04:	00002651 	.word	0x00002651
    2b08:	00002765 	.word	0x00002765
    2b0c:	00002675 	.word	0x00002675

00002b10 <system_pinmux_get_group_from_gpio_pin>:
{
    2b10:	b580      	push	{r7, lr}
    2b12:	b084      	sub	sp, #16
    2b14:	af00      	add	r7, sp, #0
    2b16:	0002      	movs	r2, r0
    2b18:	1dfb      	adds	r3, r7, #7
    2b1a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2b1c:	230f      	movs	r3, #15
    2b1e:	18fb      	adds	r3, r7, r3
    2b20:	1dfa      	adds	r2, r7, #7
    2b22:	7812      	ldrb	r2, [r2, #0]
    2b24:	09d2      	lsrs	r2, r2, #7
    2b26:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2b28:	230e      	movs	r3, #14
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	1dfa      	adds	r2, r7, #7
    2b2e:	7812      	ldrb	r2, [r2, #0]
    2b30:	0952      	lsrs	r2, r2, #5
    2b32:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2b34:	4b0d      	ldr	r3, [pc, #52]	; (2b6c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2b36:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2b38:	230f      	movs	r3, #15
    2b3a:	18fb      	adds	r3, r7, r3
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d10f      	bne.n	2b62 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2b42:	230f      	movs	r3, #15
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	009b      	lsls	r3, r3, #2
    2b4a:	2210      	movs	r2, #16
    2b4c:	4694      	mov	ip, r2
    2b4e:	44bc      	add	ip, r7
    2b50:	4463      	add	r3, ip
    2b52:	3b08      	subs	r3, #8
    2b54:	681a      	ldr	r2, [r3, #0]
    2b56:	230e      	movs	r3, #14
    2b58:	18fb      	adds	r3, r7, r3
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	01db      	lsls	r3, r3, #7
    2b5e:	18d3      	adds	r3, r2, r3
    2b60:	e000      	b.n	2b64 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2b62:	2300      	movs	r3, #0
}
    2b64:	0018      	movs	r0, r3
    2b66:	46bd      	mov	sp, r7
    2b68:	b004      	add	sp, #16
    2b6a:	bd80      	pop	{r7, pc}
    2b6c:	41004400 	.word	0x41004400

00002b70 <system_voltage_reference_enable>:
{
    2b70:	b580      	push	{r7, lr}
    2b72:	b082      	sub	sp, #8
    2b74:	af00      	add	r7, sp, #0
    2b76:	0002      	movs	r2, r0
    2b78:	1dfb      	adds	r3, r7, #7
    2b7a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    2b7c:	1dfb      	adds	r3, r7, #7
    2b7e:	781b      	ldrb	r3, [r3, #0]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d002      	beq.n	2b8a <system_voltage_reference_enable+0x1a>
    2b84:	2b01      	cmp	r3, #1
    2b86:	d007      	beq.n	2b98 <system_voltage_reference_enable+0x28>
			return;
    2b88:	e00d      	b.n	2ba6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    2b8a:	4b08      	ldr	r3, [pc, #32]	; (2bac <system_voltage_reference_enable+0x3c>)
    2b8c:	4a07      	ldr	r2, [pc, #28]	; (2bac <system_voltage_reference_enable+0x3c>)
    2b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2b90:	2102      	movs	r1, #2
    2b92:	430a      	orrs	r2, r1
    2b94:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2b96:	e006      	b.n	2ba6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2b98:	4b04      	ldr	r3, [pc, #16]	; (2bac <system_voltage_reference_enable+0x3c>)
    2b9a:	4a04      	ldr	r2, [pc, #16]	; (2bac <system_voltage_reference_enable+0x3c>)
    2b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2b9e:	2104      	movs	r1, #4
    2ba0:	430a      	orrs	r2, r1
    2ba2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2ba4:	46c0      	nop			; (mov r8, r8)
}
    2ba6:	46bd      	mov	sp, r7
    2ba8:	b002      	add	sp, #8
    2baa:	bd80      	pop	{r7, pc}
    2bac:	40000800 	.word	0x40000800

00002bb0 <system_interrupt_enable>:
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	0002      	movs	r2, r0
    2bb8:	1dfb      	adds	r3, r7, #7
    2bba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bbc:	4b06      	ldr	r3, [pc, #24]	; (2bd8 <system_interrupt_enable+0x28>)
    2bbe:	1dfa      	adds	r2, r7, #7
    2bc0:	7812      	ldrb	r2, [r2, #0]
    2bc2:	0011      	movs	r1, r2
    2bc4:	221f      	movs	r2, #31
    2bc6:	400a      	ands	r2, r1
    2bc8:	2101      	movs	r1, #1
    2bca:	4091      	lsls	r1, r2
    2bcc:	000a      	movs	r2, r1
    2bce:	601a      	str	r2, [r3, #0]
}
    2bd0:	46c0      	nop			; (mov r8, r8)
    2bd2:	46bd      	mov	sp, r7
    2bd4:	b002      	add	sp, #8
    2bd6:	bd80      	pop	{r7, pc}
    2bd8:	e000e100 	.word	0xe000e100

00002bdc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	b082      	sub	sp, #8
    2be0:	af00      	add	r7, sp, #0
    2be2:	0002      	movs	r2, r0
    2be4:	1dfb      	adds	r3, r7, #7
    2be6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2be8:	4a07      	ldr	r2, [pc, #28]	; (2c08 <system_interrupt_disable+0x2c>)
    2bea:	1dfb      	adds	r3, r7, #7
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	0019      	movs	r1, r3
    2bf0:	231f      	movs	r3, #31
    2bf2:	400b      	ands	r3, r1
    2bf4:	2101      	movs	r1, #1
    2bf6:	4099      	lsls	r1, r3
    2bf8:	000b      	movs	r3, r1
    2bfa:	0019      	movs	r1, r3
    2bfc:	2380      	movs	r3, #128	; 0x80
    2bfe:	50d1      	str	r1, [r2, r3]
}
    2c00:	46c0      	nop			; (mov r8, r8)
    2c02:	46bd      	mov	sp, r7
    2c04:	b002      	add	sp, #8
    2c06:	bd80      	pop	{r7, pc}
    2c08:	e000e100 	.word	0xe000e100

00002c0c <adc_is_syncing>:
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b084      	sub	sp, #16
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2c1a:	68fb      	ldr	r3, [r7, #12]
    2c1c:	7e5b      	ldrb	r3, [r3, #25]
    2c1e:	b2db      	uxtb	r3, r3
    2c20:	b25b      	sxtb	r3, r3
    2c22:	2b00      	cmp	r3, #0
    2c24:	da01      	bge.n	2c2a <adc_is_syncing+0x1e>
		return true;
    2c26:	2301      	movs	r3, #1
    2c28:	e000      	b.n	2c2c <adc_is_syncing+0x20>
	return false;
    2c2a:	2300      	movs	r3, #0
}
    2c2c:	0018      	movs	r0, r3
    2c2e:	46bd      	mov	sp, r7
    2c30:	b004      	add	sp, #16
    2c32:	bd80      	pop	{r7, pc}

00002c34 <adc_get_status>:
{
    2c34:	b580      	push	{r7, lr}
    2c36:	b086      	sub	sp, #24
    2c38:	af00      	add	r7, sp, #0
    2c3a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	681b      	ldr	r3, [r3, #0]
    2c40:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2c42:	693b      	ldr	r3, [r7, #16]
    2c44:	7e1b      	ldrb	r3, [r3, #24]
    2c46:	b2db      	uxtb	r3, r3
    2c48:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c4e:	68fb      	ldr	r3, [r7, #12]
    2c50:	2201      	movs	r2, #1
    2c52:	4013      	ands	r3, r2
    2c54:	d003      	beq.n	2c5e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    2c56:	697b      	ldr	r3, [r7, #20]
    2c58:	2201      	movs	r2, #1
    2c5a:	4313      	orrs	r3, r2
    2c5c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	2204      	movs	r2, #4
    2c62:	4013      	ands	r3, r2
    2c64:	d003      	beq.n	2c6e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    2c66:	697b      	ldr	r3, [r7, #20]
    2c68:	2202      	movs	r2, #2
    2c6a:	4313      	orrs	r3, r2
    2c6c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	2202      	movs	r2, #2
    2c72:	4013      	ands	r3, r2
    2c74:	d003      	beq.n	2c7e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    2c76:	697b      	ldr	r3, [r7, #20]
    2c78:	2204      	movs	r2, #4
    2c7a:	4313      	orrs	r3, r2
    2c7c:	617b      	str	r3, [r7, #20]
	return status_flags;
    2c7e:	697b      	ldr	r3, [r7, #20]
}
    2c80:	0018      	movs	r0, r3
    2c82:	46bd      	mov	sp, r7
    2c84:	b006      	add	sp, #24
    2c86:	bd80      	pop	{r7, pc}

00002c88 <adc_clear_status>:
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	681b      	ldr	r3, [r3, #0]
    2c96:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
    2c98:	2300      	movs	r3, #0
    2c9a:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	2201      	movs	r2, #1
    2ca0:	4013      	ands	r3, r2
    2ca2:	d003      	beq.n	2cac <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    2ca4:	68fb      	ldr	r3, [r7, #12]
    2ca6:	2201      	movs	r2, #1
    2ca8:	4313      	orrs	r3, r2
    2caa:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
    2cac:	683b      	ldr	r3, [r7, #0]
    2cae:	2202      	movs	r2, #2
    2cb0:	4013      	ands	r3, r2
    2cb2:	d003      	beq.n	2cbc <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    2cb4:	68fb      	ldr	r3, [r7, #12]
    2cb6:	2204      	movs	r2, #4
    2cb8:	4313      	orrs	r3, r2
    2cba:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
    2cbc:	683b      	ldr	r3, [r7, #0]
    2cbe:	2204      	movs	r2, #4
    2cc0:	4013      	ands	r3, r2
    2cc2:	d003      	beq.n	2ccc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    2cc4:	68fb      	ldr	r3, [r7, #12]
    2cc6:	2202      	movs	r2, #2
    2cc8:	4313      	orrs	r3, r2
    2cca:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	b2da      	uxtb	r2, r3
    2cd0:	68bb      	ldr	r3, [r7, #8]
    2cd2:	761a      	strb	r2, [r3, #24]
}
    2cd4:	46c0      	nop			; (mov r8, r8)
    2cd6:	46bd      	mov	sp, r7
    2cd8:	b004      	add	sp, #16
    2cda:	bd80      	pop	{r7, pc}

00002cdc <adc_enable>:
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	0018      	movs	r0, r3
    2cf0:	4b10      	ldr	r3, [pc, #64]	; (2d34 <adc_enable+0x58>)
    2cf2:	4798      	blx	r3
    2cf4:	1e03      	subs	r3, r0, #0
    2cf6:	d1f9      	bne.n	2cec <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2cf8:	2017      	movs	r0, #23
    2cfa:	4b0f      	ldr	r3, [pc, #60]	; (2d38 <adc_enable+0x5c>)
    2cfc:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2cfe:	68fb      	ldr	r3, [r7, #12]
    2d00:	220f      	movs	r2, #15
    2d02:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	220f      	movs	r2, #15
    2d08:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2d0a:	68fb      	ldr	r3, [r7, #12]
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	b2db      	uxtb	r3, r3
    2d10:	2202      	movs	r2, #2
    2d12:	4313      	orrs	r3, r2
    2d14:	b2da      	uxtb	r2, r3
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	687b      	ldr	r3, [r7, #4]
    2d1e:	0018      	movs	r0, r3
    2d20:	4b04      	ldr	r3, [pc, #16]	; (2d34 <adc_enable+0x58>)
    2d22:	4798      	blx	r3
    2d24:	1e03      	subs	r3, r0, #0
    2d26:	d1f9      	bne.n	2d1c <adc_enable+0x40>
	return STATUS_OK;
    2d28:	2300      	movs	r3, #0
}
    2d2a:	0018      	movs	r0, r3
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b004      	add	sp, #16
    2d30:	bd80      	pop	{r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	00002c0d 	.word	0x00002c0d
    2d38:	00002bb1 	.word	0x00002bb1

00002d3c <adc_disable>:
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b084      	sub	sp, #16
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	60fb      	str	r3, [r7, #12]
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    2d4a:	2017      	movs	r0, #23
    2d4c:	4b11      	ldr	r3, [pc, #68]	; (2d94 <adc_disable+0x58>)
    2d4e:	4798      	blx	r3
	while (adc_is_syncing(module_inst)) {
    2d50:	46c0      	nop			; (mov r8, r8)
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	0018      	movs	r0, r3
    2d56:	4b10      	ldr	r3, [pc, #64]	; (2d98 <adc_disable+0x5c>)
    2d58:	4798      	blx	r3
    2d5a:	1e03      	subs	r3, r0, #0
    2d5c:	d1f9      	bne.n	2d52 <adc_disable+0x16>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	220f      	movs	r2, #15
    2d62:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	220f      	movs	r2, #15
    2d68:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	781b      	ldrb	r3, [r3, #0]
    2d6e:	b2db      	uxtb	r3, r3
    2d70:	2202      	movs	r2, #2
    2d72:	4393      	bics	r3, r2
    2d74:	b2da      	uxtb	r2, r3
    2d76:	68fb      	ldr	r3, [r7, #12]
    2d78:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	0018      	movs	r0, r3
    2d80:	4b05      	ldr	r3, [pc, #20]	; (2d98 <adc_disable+0x5c>)
    2d82:	4798      	blx	r3
    2d84:	1e03      	subs	r3, r0, #0
    2d86:	d1f9      	bne.n	2d7c <adc_disable+0x40>
	return STATUS_OK;
    2d88:	2300      	movs	r3, #0
}
    2d8a:	0018      	movs	r0, r3
    2d8c:	46bd      	mov	sp, r7
    2d8e:	b004      	add	sp, #16
    2d90:	bd80      	pop	{r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00002bdd 	.word	0x00002bdd
    2d98:	00002c0d 	.word	0x00002c0d

00002d9c <adc_start_conversion>:
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	681b      	ldr	r3, [r3, #0]
    2da8:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	0018      	movs	r0, r3
    2db0:	4b0b      	ldr	r3, [pc, #44]	; (2de0 <adc_start_conversion+0x44>)
    2db2:	4798      	blx	r3
    2db4:	1e03      	subs	r3, r0, #0
    2db6:	d1f9      	bne.n	2dac <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2db8:	68fb      	ldr	r3, [r7, #12]
    2dba:	7b1b      	ldrb	r3, [r3, #12]
    2dbc:	b2db      	uxtb	r3, r3
    2dbe:	2202      	movs	r2, #2
    2dc0:	4313      	orrs	r3, r2
    2dc2:	b2da      	uxtb	r2, r3
    2dc4:	68fb      	ldr	r3, [r7, #12]
    2dc6:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
    2dc8:	46c0      	nop			; (mov r8, r8)
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b04      	ldr	r3, [pc, #16]	; (2de0 <adc_start_conversion+0x44>)
    2dd0:	4798      	blx	r3
    2dd2:	1e03      	subs	r3, r0, #0
    2dd4:	d1f9      	bne.n	2dca <adc_start_conversion+0x2e>
}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	46bd      	mov	sp, r7
    2dda:	b004      	add	sp, #16
    2ddc:	bd80      	pop	{r7, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00002c0d 	.word	0x00002c0d

00002de4 <adc_read>:
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	0018      	movs	r0, r3
    2df2:	4b18      	ldr	r3, [pc, #96]	; (2e54 <adc_read+0x70>)
    2df4:	4798      	blx	r3
    2df6:	0002      	movs	r2, r0
    2df8:	2301      	movs	r3, #1
    2dfa:	4013      	ands	r3, r2
    2dfc:	d101      	bne.n	2e02 <adc_read+0x1e>
		return STATUS_BUSY;
    2dfe:	2305      	movs	r3, #5
    2e00:	e023      	b.n	2e4a <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    2e08:	46c0      	nop			; (mov r8, r8)
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	0018      	movs	r0, r3
    2e0e:	4b12      	ldr	r3, [pc, #72]	; (2e58 <adc_read+0x74>)
    2e10:	4798      	blx	r3
    2e12:	1e03      	subs	r3, r0, #0
    2e14:	d1f9      	bne.n	2e0a <adc_read+0x26>
	*result = adc_module->RESULT.reg;
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	8b5b      	ldrh	r3, [r3, #26]
    2e1a:	b29a      	uxth	r2, r3
    2e1c:	683b      	ldr	r3, [r7, #0]
    2e1e:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	2101      	movs	r1, #1
    2e24:	0018      	movs	r0, r3
    2e26:	4b0d      	ldr	r3, [pc, #52]	; (2e5c <adc_read+0x78>)
    2e28:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b09      	ldr	r3, [pc, #36]	; (2e54 <adc_read+0x70>)
    2e30:	4798      	blx	r3
    2e32:	0002      	movs	r2, r0
    2e34:	2304      	movs	r3, #4
    2e36:	4013      	ands	r3, r2
    2e38:	d006      	beq.n	2e48 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    2e3a:	687b      	ldr	r3, [r7, #4]
    2e3c:	2104      	movs	r1, #4
    2e3e:	0018      	movs	r0, r3
    2e40:	4b06      	ldr	r3, [pc, #24]	; (2e5c <adc_read+0x78>)
    2e42:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    2e44:	231e      	movs	r3, #30
    2e46:	e000      	b.n	2e4a <adc_read+0x66>
	return STATUS_OK;
    2e48:	2300      	movs	r3, #0
}
    2e4a:	0018      	movs	r0, r3
    2e4c:	46bd      	mov	sp, r7
    2e4e:	b004      	add	sp, #16
    2e50:	bd80      	pop	{r7, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	00002c35 	.word	0x00002c35
    2e58:	00002c0d 	.word	0x00002c0d
    2e5c:	00002c89 	.word	0x00002c89

00002e60 <port_get_group_from_gpio_pin>:
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b082      	sub	sp, #8
    2e64:	af00      	add	r7, sp, #0
    2e66:	0002      	movs	r2, r0
    2e68:	1dfb      	adds	r3, r7, #7
    2e6a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2e6c:	1dfb      	adds	r3, r7, #7
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	0018      	movs	r0, r3
    2e72:	4b03      	ldr	r3, [pc, #12]	; (2e80 <port_get_group_from_gpio_pin+0x20>)
    2e74:	4798      	blx	r3
    2e76:	0003      	movs	r3, r0
}
    2e78:	0018      	movs	r0, r3
    2e7a:	46bd      	mov	sp, r7
    2e7c:	b002      	add	sp, #8
    2e7e:	bd80      	pop	{r7, pc}
    2e80:	00002b11 	.word	0x00002b11

00002e84 <port_pin_get_output_level>:
{
    2e84:	b580      	push	{r7, lr}
    2e86:	b084      	sub	sp, #16
    2e88:	af00      	add	r7, sp, #0
    2e8a:	0002      	movs	r2, r0
    2e8c:	1dfb      	adds	r3, r7, #7
    2e8e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2e90:	1dfb      	adds	r3, r7, #7
    2e92:	781b      	ldrb	r3, [r3, #0]
    2e94:	0018      	movs	r0, r3
    2e96:	4b0b      	ldr	r3, [pc, #44]	; (2ec4 <port_pin_get_output_level+0x40>)
    2e98:	4798      	blx	r3
    2e9a:	0003      	movs	r3, r0
    2e9c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2e9e:	1dfb      	adds	r3, r7, #7
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	221f      	movs	r2, #31
    2ea4:	4013      	ands	r3, r2
    2ea6:	2201      	movs	r2, #1
    2ea8:	409a      	lsls	r2, r3
    2eaa:	0013      	movs	r3, r2
    2eac:	60bb      	str	r3, [r7, #8]
	return (port_base->OUT.reg & pin_mask);
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	691b      	ldr	r3, [r3, #16]
    2eb2:	68ba      	ldr	r2, [r7, #8]
    2eb4:	4013      	ands	r3, r2
    2eb6:	1e5a      	subs	r2, r3, #1
    2eb8:	4193      	sbcs	r3, r2
    2eba:	b2db      	uxtb	r3, r3
}
    2ebc:	0018      	movs	r0, r3
    2ebe:	46bd      	mov	sp, r7
    2ec0:	b004      	add	sp, #16
    2ec2:	bd80      	pop	{r7, pc}
    2ec4:	00002e61 	.word	0x00002e61

00002ec8 <port_pin_set_output_level>:
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b084      	sub	sp, #16
    2ecc:	af00      	add	r7, sp, #0
    2ece:	0002      	movs	r2, r0
    2ed0:	1dfb      	adds	r3, r7, #7
    2ed2:	701a      	strb	r2, [r3, #0]
    2ed4:	1dbb      	adds	r3, r7, #6
    2ed6:	1c0a      	adds	r2, r1, #0
    2ed8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2eda:	1dfb      	adds	r3, r7, #7
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	0018      	movs	r0, r3
    2ee0:	4b0d      	ldr	r3, [pc, #52]	; (2f18 <port_pin_set_output_level+0x50>)
    2ee2:	4798      	blx	r3
    2ee4:	0003      	movs	r3, r0
    2ee6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2ee8:	1dfb      	adds	r3, r7, #7
    2eea:	781b      	ldrb	r3, [r3, #0]
    2eec:	221f      	movs	r2, #31
    2eee:	4013      	ands	r3, r2
    2ef0:	2201      	movs	r2, #1
    2ef2:	409a      	lsls	r2, r3
    2ef4:	0013      	movs	r3, r2
    2ef6:	60bb      	str	r3, [r7, #8]
	if (level) {
    2ef8:	1dbb      	adds	r3, r7, #6
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	2b00      	cmp	r3, #0
    2efe:	d003      	beq.n	2f08 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	68ba      	ldr	r2, [r7, #8]
    2f04:	619a      	str	r2, [r3, #24]
}
    2f06:	e002      	b.n	2f0e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2f08:	68fb      	ldr	r3, [r7, #12]
    2f0a:	68ba      	ldr	r2, [r7, #8]
    2f0c:	615a      	str	r2, [r3, #20]
}
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	46bd      	mov	sp, r7
    2f12:	b004      	add	sp, #16
    2f14:	bd80      	pop	{r7, pc}
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	00002e61 	.word	0x00002e61

00002f1c <init_cmd_list>:
const char* CMD_I2C_SCAN = "i2c_scan";

extern struct adc_module adc_inst;
extern struct i2c_master_module i2c_master_instance;

void init_cmd_list() {
    2f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f1e:	46de      	mov	lr, fp
    2f20:	4657      	mov	r7, sl
    2f22:	464e      	mov	r6, r9
    2f24:	4645      	mov	r5, r8
    2f26:	b5e0      	push	{r5, r6, r7, lr}
    2f28:	b083      	sub	sp, #12
    2f2a:	af00      	add	r7, sp, #0
	cmd_list = (struct option_list) {
    2f2c:	4b4f      	ldr	r3, [pc, #316]	; (306c <init_cmd_list+0x150>)
    2f2e:	681a      	ldr	r2, [r3, #0]
    2f30:	4b4f      	ldr	r3, [pc, #316]	; (3070 <init_cmd_list+0x154>)
    2f32:	6819      	ldr	r1, [r3, #0]
    2f34:	4b4f      	ldr	r3, [pc, #316]	; (3074 <init_cmd_list+0x158>)
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	607b      	str	r3, [r7, #4]
    2f3a:	4b4f      	ldr	r3, [pc, #316]	; (3078 <init_cmd_list+0x15c>)
    2f3c:	6818      	ldr	r0, [r3, #0]
    2f3e:	6038      	str	r0, [r7, #0]
    2f40:	4b4e      	ldr	r3, [pc, #312]	; (307c <init_cmd_list+0x160>)
    2f42:	681c      	ldr	r4, [r3, #0]
    2f44:	46a3      	mov	fp, r4
    2f46:	4b4e      	ldr	r3, [pc, #312]	; (3080 <init_cmd_list+0x164>)
    2f48:	681c      	ldr	r4, [r3, #0]
    2f4a:	46a2      	mov	sl, r4
    2f4c:	4b4d      	ldr	r3, [pc, #308]	; (3084 <init_cmd_list+0x168>)
    2f4e:	681c      	ldr	r4, [r3, #0]
    2f50:	46a1      	mov	r9, r4
    2f52:	4b4d      	ldr	r3, [pc, #308]	; (3088 <init_cmd_list+0x16c>)
    2f54:	681c      	ldr	r4, [r3, #0]
    2f56:	46a0      	mov	r8, r4
    2f58:	4b4c      	ldr	r3, [pc, #304]	; (308c <init_cmd_list+0x170>)
    2f5a:	681c      	ldr	r4, [r3, #0]
    2f5c:	46a4      	mov	ip, r4
    2f5e:	4b4c      	ldr	r3, [pc, #304]	; (3090 <init_cmd_list+0x174>)
    2f60:	681e      	ldr	r6, [r3, #0]
    2f62:	4b4c      	ldr	r3, [pc, #304]	; (3094 <init_cmd_list+0x178>)
    2f64:	681d      	ldr	r5, [r3, #0]
    2f66:	4b4c      	ldr	r3, [pc, #304]	; (3098 <init_cmd_list+0x17c>)
    2f68:	681c      	ldr	r4, [r3, #0]
    2f6a:	4b4c      	ldr	r3, [pc, #304]	; (309c <init_cmd_list+0x180>)
    2f6c:	6818      	ldr	r0, [r3, #0]
    2f6e:	4b4c      	ldr	r3, [pc, #304]	; (30a0 <init_cmd_list+0x184>)
    2f70:	601a      	str	r2, [r3, #0]
    2f72:	4a4b      	ldr	r2, [pc, #300]	; (30a0 <init_cmd_list+0x184>)
    2f74:	4b4b      	ldr	r3, [pc, #300]	; (30a4 <init_cmd_list+0x188>)
    2f76:	6053      	str	r3, [r2, #4]
    2f78:	4a49      	ldr	r2, [pc, #292]	; (30a0 <init_cmd_list+0x184>)
    2f7a:	4b4b      	ldr	r3, [pc, #300]	; (30a8 <init_cmd_list+0x18c>)
    2f7c:	6093      	str	r3, [r2, #8]
    2f7e:	4b48      	ldr	r3, [pc, #288]	; (30a0 <init_cmd_list+0x184>)
    2f80:	60d9      	str	r1, [r3, #12]
    2f82:	4b47      	ldr	r3, [pc, #284]	; (30a0 <init_cmd_list+0x184>)
    2f84:	4a47      	ldr	r2, [pc, #284]	; (30a4 <init_cmd_list+0x188>)
    2f86:	611a      	str	r2, [r3, #16]
    2f88:	4b45      	ldr	r3, [pc, #276]	; (30a0 <init_cmd_list+0x184>)
    2f8a:	4a48      	ldr	r2, [pc, #288]	; (30ac <init_cmd_list+0x190>)
    2f8c:	615a      	str	r2, [r3, #20]
    2f8e:	4b44      	ldr	r3, [pc, #272]	; (30a0 <init_cmd_list+0x184>)
    2f90:	687a      	ldr	r2, [r7, #4]
    2f92:	619a      	str	r2, [r3, #24]
    2f94:	4b42      	ldr	r3, [pc, #264]	; (30a0 <init_cmd_list+0x184>)
    2f96:	4a43      	ldr	r2, [pc, #268]	; (30a4 <init_cmd_list+0x188>)
    2f98:	61da      	str	r2, [r3, #28]
    2f9a:	4b41      	ldr	r3, [pc, #260]	; (30a0 <init_cmd_list+0x184>)
    2f9c:	4a44      	ldr	r2, [pc, #272]	; (30b0 <init_cmd_list+0x194>)
    2f9e:	621a      	str	r2, [r3, #32]
    2fa0:	4b3f      	ldr	r3, [pc, #252]	; (30a0 <init_cmd_list+0x184>)
    2fa2:	683a      	ldr	r2, [r7, #0]
    2fa4:	625a      	str	r2, [r3, #36]	; 0x24
    2fa6:	4b3e      	ldr	r3, [pc, #248]	; (30a0 <init_cmd_list+0x184>)
    2fa8:	4a42      	ldr	r2, [pc, #264]	; (30b4 <init_cmd_list+0x198>)
    2faa:	629a      	str	r2, [r3, #40]	; 0x28
    2fac:	4b3c      	ldr	r3, [pc, #240]	; (30a0 <init_cmd_list+0x184>)
    2fae:	4a42      	ldr	r2, [pc, #264]	; (30b8 <init_cmd_list+0x19c>)
    2fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    2fb2:	4b3b      	ldr	r3, [pc, #236]	; (30a0 <init_cmd_list+0x184>)
    2fb4:	465a      	mov	r2, fp
    2fb6:	631a      	str	r2, [r3, #48]	; 0x30
    2fb8:	4b39      	ldr	r3, [pc, #228]	; (30a0 <init_cmd_list+0x184>)
    2fba:	4a3e      	ldr	r2, [pc, #248]	; (30b4 <init_cmd_list+0x198>)
    2fbc:	635a      	str	r2, [r3, #52]	; 0x34
    2fbe:	4b38      	ldr	r3, [pc, #224]	; (30a0 <init_cmd_list+0x184>)
    2fc0:	4a3e      	ldr	r2, [pc, #248]	; (30bc <init_cmd_list+0x1a0>)
    2fc2:	639a      	str	r2, [r3, #56]	; 0x38
    2fc4:	4b36      	ldr	r3, [pc, #216]	; (30a0 <init_cmd_list+0x184>)
    2fc6:	4652      	mov	r2, sl
    2fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    2fca:	4b35      	ldr	r3, [pc, #212]	; (30a0 <init_cmd_list+0x184>)
    2fcc:	4a39      	ldr	r2, [pc, #228]	; (30b4 <init_cmd_list+0x198>)
    2fce:	641a      	str	r2, [r3, #64]	; 0x40
    2fd0:	4b33      	ldr	r3, [pc, #204]	; (30a0 <init_cmd_list+0x184>)
    2fd2:	4a3b      	ldr	r2, [pc, #236]	; (30c0 <init_cmd_list+0x1a4>)
    2fd4:	645a      	str	r2, [r3, #68]	; 0x44
    2fd6:	4b32      	ldr	r3, [pc, #200]	; (30a0 <init_cmd_list+0x184>)
    2fd8:	464a      	mov	r2, r9
    2fda:	649a      	str	r2, [r3, #72]	; 0x48
    2fdc:	4b30      	ldr	r3, [pc, #192]	; (30a0 <init_cmd_list+0x184>)
    2fde:	4a31      	ldr	r2, [pc, #196]	; (30a4 <init_cmd_list+0x188>)
    2fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    2fe2:	4b2f      	ldr	r3, [pc, #188]	; (30a0 <init_cmd_list+0x184>)
    2fe4:	4a37      	ldr	r2, [pc, #220]	; (30c4 <init_cmd_list+0x1a8>)
    2fe6:	651a      	str	r2, [r3, #80]	; 0x50
    2fe8:	4b2d      	ldr	r3, [pc, #180]	; (30a0 <init_cmd_list+0x184>)
    2fea:	4642      	mov	r2, r8
    2fec:	655a      	str	r2, [r3, #84]	; 0x54
    2fee:	4b2c      	ldr	r3, [pc, #176]	; (30a0 <init_cmd_list+0x184>)
    2ff0:	4a2c      	ldr	r2, [pc, #176]	; (30a4 <init_cmd_list+0x188>)
    2ff2:	659a      	str	r2, [r3, #88]	; 0x58
    2ff4:	4b2a      	ldr	r3, [pc, #168]	; (30a0 <init_cmd_list+0x184>)
    2ff6:	4a34      	ldr	r2, [pc, #208]	; (30c8 <init_cmd_list+0x1ac>)
    2ff8:	65da      	str	r2, [r3, #92]	; 0x5c
    2ffa:	4b29      	ldr	r3, [pc, #164]	; (30a0 <init_cmd_list+0x184>)
    2ffc:	4662      	mov	r2, ip
    2ffe:	661a      	str	r2, [r3, #96]	; 0x60
    3000:	4b27      	ldr	r3, [pc, #156]	; (30a0 <init_cmd_list+0x184>)
    3002:	4a32      	ldr	r2, [pc, #200]	; (30cc <init_cmd_list+0x1b0>)
    3004:	665a      	str	r2, [r3, #100]	; 0x64
    3006:	4b26      	ldr	r3, [pc, #152]	; (30a0 <init_cmd_list+0x184>)
    3008:	4a31      	ldr	r2, [pc, #196]	; (30d0 <init_cmd_list+0x1b4>)
    300a:	669a      	str	r2, [r3, #104]	; 0x68
    300c:	4b24      	ldr	r3, [pc, #144]	; (30a0 <init_cmd_list+0x184>)
    300e:	66de      	str	r6, [r3, #108]	; 0x6c
    3010:	4b23      	ldr	r3, [pc, #140]	; (30a0 <init_cmd_list+0x184>)
    3012:	4a24      	ldr	r2, [pc, #144]	; (30a4 <init_cmd_list+0x188>)
    3014:	671a      	str	r2, [r3, #112]	; 0x70
    3016:	4b22      	ldr	r3, [pc, #136]	; (30a0 <init_cmd_list+0x184>)
    3018:	4a2e      	ldr	r2, [pc, #184]	; (30d4 <init_cmd_list+0x1b8>)
    301a:	675a      	str	r2, [r3, #116]	; 0x74
    301c:	4b20      	ldr	r3, [pc, #128]	; (30a0 <init_cmd_list+0x184>)
    301e:	679d      	str	r5, [r3, #120]	; 0x78
    3020:	4b1f      	ldr	r3, [pc, #124]	; (30a0 <init_cmd_list+0x184>)
    3022:	4a20      	ldr	r2, [pc, #128]	; (30a4 <init_cmd_list+0x188>)
    3024:	67da      	str	r2, [r3, #124]	; 0x7c
    3026:	4b1e      	ldr	r3, [pc, #120]	; (30a0 <init_cmd_list+0x184>)
    3028:	2180      	movs	r1, #128	; 0x80
    302a:	4a2b      	ldr	r2, [pc, #172]	; (30d8 <init_cmd_list+0x1bc>)
    302c:	505a      	str	r2, [r3, r1]
    302e:	4b1c      	ldr	r3, [pc, #112]	; (30a0 <init_cmd_list+0x184>)
    3030:	2284      	movs	r2, #132	; 0x84
    3032:	509c      	str	r4, [r3, r2]
    3034:	4b1a      	ldr	r3, [pc, #104]	; (30a0 <init_cmd_list+0x184>)
    3036:	2188      	movs	r1, #136	; 0x88
    3038:	4a1e      	ldr	r2, [pc, #120]	; (30b4 <init_cmd_list+0x198>)
    303a:	505a      	str	r2, [r3, r1]
    303c:	4b18      	ldr	r3, [pc, #96]	; (30a0 <init_cmd_list+0x184>)
    303e:	218c      	movs	r1, #140	; 0x8c
    3040:	4a26      	ldr	r2, [pc, #152]	; (30dc <init_cmd_list+0x1c0>)
    3042:	505a      	str	r2, [r3, r1]
    3044:	4b16      	ldr	r3, [pc, #88]	; (30a0 <init_cmd_list+0x184>)
    3046:	2290      	movs	r2, #144	; 0x90
    3048:	5098      	str	r0, [r3, r2]
    304a:	4b15      	ldr	r3, [pc, #84]	; (30a0 <init_cmd_list+0x184>)
    304c:	2194      	movs	r1, #148	; 0x94
    304e:	4a15      	ldr	r2, [pc, #84]	; (30a4 <init_cmd_list+0x188>)
    3050:	505a      	str	r2, [r3, r1]
    3052:	4b13      	ldr	r3, [pc, #76]	; (30a0 <init_cmd_list+0x184>)
    3054:	2198      	movs	r1, #152	; 0x98
    3056:	4a22      	ldr	r2, [pc, #136]	; (30e0 <init_cmd_list+0x1c4>)
    3058:	505a      	str	r2, [r3, r1]
		{ CMD_CLEAR_ACT, "", "Turn the actuator (LED) off." } ,
		{ CMD_ADC_GET, "[port] [pin_num]", "Get the ADC value of an input pin." } ,
		{ CMD_MCU_TEMP, "", "Print the temperature reading of the on-board MCU temperature sensor." } ,
		{ CMD_I2C_SCAN, "", "Print out list of addresses of I2C devices on bus." }}
	};
}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	46bd      	mov	sp, r7
    305e:	b003      	add	sp, #12
    3060:	bc3c      	pop	{r2, r3, r4, r5}
    3062:	4690      	mov	r8, r2
    3064:	4699      	mov	r9, r3
    3066:	46a2      	mov	sl, r4
    3068:	46ab      	mov	fp, r5
    306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    306c:	20000000 	.word	0x20000000
    3070:	20000004 	.word	0x20000004
    3074:	20000008 	.word	0x20000008
    3078:	2000000c 	.word	0x2000000c
    307c:	20000010 	.word	0x20000010
    3080:	20000014 	.word	0x20000014
    3084:	20000018 	.word	0x20000018
    3088:	2000001c 	.word	0x2000001c
    308c:	20000020 	.word	0x20000020
    3090:	20000028 	.word	0x20000028
    3094:	2000002c 	.word	0x2000002c
    3098:	20000030 	.word	0x20000030
    309c:	20000034 	.word	0x20000034
    30a0:	200002f8 	.word	0x200002f8
    30a4:	0000bcf0 	.word	0x0000bcf0
    30a8:	0000bcf4 	.word	0x0000bcf4
    30ac:	0000bd0c 	.word	0x0000bd0c
    30b0:	0000bd34 	.word	0x0000bd34
    30b4:	0000bd5c 	.word	0x0000bd5c
    30b8:	0000bd70 	.word	0x0000bd70
    30bc:	0000bd94 	.word	0x0000bd94
    30c0:	0000bdb8 	.word	0x0000bdb8
    30c4:	0000bde4 	.word	0x0000bde4
    30c8:	0000bdfc 	.word	0x0000bdfc
    30cc:	0000be14 	.word	0x0000be14
    30d0:	0000be38 	.word	0x0000be38
    30d4:	0000be58 	.word	0x0000be58
    30d8:	0000be74 	.word	0x0000be74
    30dc:	0000be94 	.word	0x0000be94
    30e0:	0000beb8 	.word	0x0000beb8

000030e4 <disable_adc>:
	.ten_bit_address  = false,
	.high_speed       = false,
	.hs_master_code   = 0x00,
};

static void disable_adc(void) {
    30e4:	b580      	push	{r7, lr}
    30e6:	af00      	add	r7, sp, #0
	adc_disable(&adc_inst);
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <disable_adc+0x14>)
    30ea:	0018      	movs	r0, r3
    30ec:	4b03      	ldr	r3, [pc, #12]	; (30fc <disable_adc+0x18>)
    30ee:	4798      	blx	r3
}
    30f0:	46c0      	nop			; (mov r8, r8)
    30f2:	46bd      	mov	sp, r7
    30f4:	bd80      	pop	{r7, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	2000046c 	.word	0x2000046c
    30fc:	00002d3d 	.word	0x00002d3d

00003100 <configure_adc>:

static void configure_adc(void) {
    3100:	b580      	push	{r7, lr}
    3102:	b08c      	sub	sp, #48	; 0x30
    3104:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    3106:	003b      	movs	r3, r7
    3108:	0018      	movs	r0, r3
    310a:	4b0e      	ldr	r3, [pc, #56]	; (3144 <configure_adc+0x44>)
    310c:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    310e:	003b      	movs	r3, r7
    3110:	2201      	movs	r2, #1
    3112:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    3114:	003b      	movs	r3, r7
    3116:	2202      	movs	r2, #2
    3118:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    311a:	003b      	movs	r3, r7
    311c:	2280      	movs	r2, #128	; 0x80
    311e:	0092      	lsls	r2, r2, #2
    3120:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    3122:	003b      	movs	r3, r7
    3124:	2200      	movs	r2, #0
    3126:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    3128:	003a      	movs	r2, r7
    312a:	4907      	ldr	r1, [pc, #28]	; (3148 <configure_adc+0x48>)
    312c:	4b07      	ldr	r3, [pc, #28]	; (314c <configure_adc+0x4c>)
    312e:	0018      	movs	r0, r3
    3130:	4b07      	ldr	r3, [pc, #28]	; (3150 <configure_adc+0x50>)
    3132:	4798      	blx	r3
	adc_enable(&adc_inst);
    3134:	4b05      	ldr	r3, [pc, #20]	; (314c <configure_adc+0x4c>)
    3136:	0018      	movs	r0, r3
    3138:	4b06      	ldr	r3, [pc, #24]	; (3154 <configure_adc+0x54>)
    313a:	4798      	blx	r3
}
    313c:	46c0      	nop			; (mov r8, r8)
    313e:	46bd      	mov	sp, r7
    3140:	b00c      	add	sp, #48	; 0x30
    3142:	bd80      	pop	{r7, pc}
    3144:	00001119 	.word	0x00001119
    3148:	42004000 	.word	0x42004000
    314c:	2000046c 	.word	0x2000046c
    3150:	00001769 	.word	0x00001769
    3154:	00002cdd 	.word	0x00002cdd

00003158 <handle_user_input>:

// TODO: If arg1 or arg2 are non-digit, we need to throw an error.
void handle_user_input(char* input) {
    3158:	b580      	push	{r7, lr}
    315a:	b09c      	sub	sp, #112	; 0x70
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
	char* cmd = strtok(input, " ");
    3160:	4ac5      	ldr	r2, [pc, #788]	; (3478 <handle_user_input+0x320>)
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	0011      	movs	r1, r2
    3166:	0018      	movs	r0, r3
    3168:	4bc4      	ldr	r3, [pc, #784]	; (347c <handle_user_input+0x324>)
    316a:	4798      	blx	r3
    316c:	0003      	movs	r3, r0
    316e:	66fb      	str	r3, [r7, #108]	; 0x6c

	if(strcmp(CMD_HELP, cmd) == 0) { 
    3170:	4bc3      	ldr	r3, [pc, #780]	; (3480 <handle_user_input+0x328>)
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3176:	0011      	movs	r1, r2
    3178:	0018      	movs	r0, r3
    317a:	4bc2      	ldr	r3, [pc, #776]	; (3484 <handle_user_input+0x32c>)
    317c:	4798      	blx	r3
    317e:	1e03      	subs	r3, r0, #0
    3180:	d102      	bne.n	3188 <handle_user_input+0x30>
		handle_help(); 
    3182:	4bc1      	ldr	r3, [pc, #772]	; (3488 <handle_user_input+0x330>)
    3184:	4798      	blx	r3
    3186:	e24c      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
    3188:	4bc0      	ldr	r3, [pc, #768]	; (348c <handle_user_input+0x334>)
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    318e:	0011      	movs	r1, r2
    3190:	0018      	movs	r0, r3
    3192:	4bbc      	ldr	r3, [pc, #752]	; (3484 <handle_user_input+0x32c>)
    3194:	4798      	blx	r3
    3196:	1e03      	subs	r3, r0, #0
    3198:	d102      	bne.n	31a0 <handle_user_input+0x48>
		handle_ver_bl(); 
    319a:	4bbd      	ldr	r3, [pc, #756]	; (3490 <handle_user_input+0x338>)
    319c:	4798      	blx	r3
    319e:	e240      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
    31a0:	4bbc      	ldr	r3, [pc, #752]	; (3494 <handle_user_input+0x33c>)
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    31a6:	0011      	movs	r1, r2
    31a8:	0018      	movs	r0, r3
    31aa:	4bb6      	ldr	r3, [pc, #728]	; (3484 <handle_user_input+0x32c>)
    31ac:	4798      	blx	r3
    31ae:	1e03      	subs	r3, r0, #0
    31b0:	d102      	bne.n	31b8 <handle_user_input+0x60>
		handle_ver_app();
    31b2:	4bb9      	ldr	r3, [pc, #740]	; (3498 <handle_user_input+0x340>)
    31b4:	4798      	blx	r3
    31b6:	e234      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
    31b8:	4bb8      	ldr	r3, [pc, #736]	; (349c <handle_user_input+0x344>)
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    31be:	0011      	movs	r1, r2
    31c0:	0018      	movs	r0, r3
    31c2:	4bb0      	ldr	r3, [pc, #704]	; (3484 <handle_user_input+0x32c>)
    31c4:	4798      	blx	r3
    31c6:	1e03      	subs	r3, r0, #0
    31c8:	d146      	bne.n	3258 <handle_user_input+0x100>
		char* arg1 = strtok(NULL, " ");
    31ca:	4bab      	ldr	r3, [pc, #684]	; (3478 <handle_user_input+0x320>)
    31cc:	0019      	movs	r1, r3
    31ce:	2000      	movs	r0, #0
    31d0:	4baa      	ldr	r3, [pc, #680]	; (347c <handle_user_input+0x324>)
    31d2:	4798      	blx	r3
    31d4:	0003      	movs	r3, r0
    31d6:	66bb      	str	r3, [r7, #104]	; 0x68
		char* arg2 = strtok(NULL, " ");
    31d8:	4ba7      	ldr	r3, [pc, #668]	; (3478 <handle_user_input+0x320>)
    31da:	0019      	movs	r1, r3
    31dc:	2000      	movs	r0, #0
    31de:	4ba7      	ldr	r3, [pc, #668]	; (347c <handle_user_input+0x324>)
    31e0:	4798      	blx	r3
    31e2:	0003      	movs	r3, r0
    31e4:	667b      	str	r3, [r7, #100]	; 0x64
		
		if(arg1 == 0 || arg2 == 0) {
    31e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    31e8:	2b00      	cmp	r3, #0
    31ea:	d002      	beq.n	31f2 <handle_user_input+0x9a>
    31ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    31ee:	2b00      	cmp	r3, #0
    31f0:	d104      	bne.n	31fc <handle_user_input+0xa4>
			printf("Not enough arguments! Try \"help\".\r\n");
    31f2:	4bab      	ldr	r3, [pc, #684]	; (34a0 <handle_user_input+0x348>)
    31f4:	0018      	movs	r0, r3
    31f6:	4bab      	ldr	r3, [pc, #684]	; (34a4 <handle_user_input+0x34c>)
    31f8:	4798      	blx	r3
			return;
    31fa:	e212      	b.n	3622 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    31fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    31fe:	663b      	str	r3, [r7, #96]	; 0x60
		int pin_num = atoi(arg2);
    3200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3202:	0018      	movs	r0, r3
    3204:	4ba8      	ldr	r3, [pc, #672]	; (34a8 <handle_user_input+0x350>)
    3206:	4798      	blx	r3
    3208:	0003      	movs	r3, r0
    320a:	65fb      	str	r3, [r7, #92]	; 0x5c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    320c:	4aa7      	ldr	r2, [pc, #668]	; (34ac <handle_user_input+0x354>)
    320e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3210:	0011      	movs	r1, r2
    3212:	0018      	movs	r0, r3
    3214:	4b9b      	ldr	r3, [pc, #620]	; (3484 <handle_user_input+0x32c>)
    3216:	4798      	blx	r3
    3218:	1e03      	subs	r3, r0, #0
    321a:	d00b      	beq.n	3234 <handle_user_input+0xdc>
    321c:	4aa4      	ldr	r2, [pc, #656]	; (34b0 <handle_user_input+0x358>)
    321e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3220:	0011      	movs	r1, r2
    3222:	0018      	movs	r0, r3
    3224:	4b97      	ldr	r3, [pc, #604]	; (3484 <handle_user_input+0x32c>)
    3226:	4798      	blx	r3
    3228:	1e03      	subs	r3, r0, #0
    322a:	d003      	beq.n	3234 <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    322c:	4ba1      	ldr	r3, [pc, #644]	; (34b4 <handle_user_input+0x35c>)
    322e:	0018      	movs	r0, r3
    3230:	4b9c      	ldr	r3, [pc, #624]	; (34a4 <handle_user_input+0x34c>)
    3232:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    3234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3236:	2b00      	cmp	r3, #0
    3238:	dc06      	bgt.n	3248 <handle_user_input+0xf0>
    323a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    323c:	2b20      	cmp	r3, #32
    323e:	dd03      	ble.n	3248 <handle_user_input+0xf0>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    3240:	4b9d      	ldr	r3, [pc, #628]	; (34b8 <handle_user_input+0x360>)
    3242:	0018      	movs	r0, r3
    3244:	4b97      	ldr	r3, [pc, #604]	; (34a4 <handle_user_input+0x34c>)
    3246:	4798      	blx	r3
		}
		
		handle_gpio_set(*port, pin_num);
    3248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    324e:	0011      	movs	r1, r2
    3250:	0018      	movs	r0, r3
    3252:	4b9a      	ldr	r3, [pc, #616]	; (34bc <handle_user_input+0x364>)
    3254:	4798      	blx	r3
    3256:	e1e4      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
    3258:	4b99      	ldr	r3, [pc, #612]	; (34c0 <handle_user_input+0x368>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    325e:	0011      	movs	r1, r2
    3260:	0018      	movs	r0, r3
    3262:	4b88      	ldr	r3, [pc, #544]	; (3484 <handle_user_input+0x32c>)
    3264:	4798      	blx	r3
    3266:	1e03      	subs	r3, r0, #0
    3268:	d146      	bne.n	32f8 <handle_user_input+0x1a0>
		char* arg1 = strtok(NULL, " ");
    326a:	4b83      	ldr	r3, [pc, #524]	; (3478 <handle_user_input+0x320>)
    326c:	0019      	movs	r1, r3
    326e:	2000      	movs	r0, #0
    3270:	4b82      	ldr	r3, [pc, #520]	; (347c <handle_user_input+0x324>)
    3272:	4798      	blx	r3
    3274:	0003      	movs	r3, r0
    3276:	65bb      	str	r3, [r7, #88]	; 0x58
		char* arg2 = strtok(NULL, " ");
    3278:	4b7f      	ldr	r3, [pc, #508]	; (3478 <handle_user_input+0x320>)
    327a:	0019      	movs	r1, r3
    327c:	2000      	movs	r0, #0
    327e:	4b7f      	ldr	r3, [pc, #508]	; (347c <handle_user_input+0x324>)
    3280:	4798      	blx	r3
    3282:	0003      	movs	r3, r0
    3284:	657b      	str	r3, [r7, #84]	; 0x54
		
		if(arg1 == 0 || arg2 == 0) {
    3286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3288:	2b00      	cmp	r3, #0
    328a:	d002      	beq.n	3292 <handle_user_input+0x13a>
    328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    328e:	2b00      	cmp	r3, #0
    3290:	d104      	bne.n	329c <handle_user_input+0x144>
			printf("Not enough arguments! Try \"help\".\r\n");
    3292:	4b83      	ldr	r3, [pc, #524]	; (34a0 <handle_user_input+0x348>)
    3294:	0018      	movs	r0, r3
    3296:	4b83      	ldr	r3, [pc, #524]	; (34a4 <handle_user_input+0x34c>)
    3298:	4798      	blx	r3
			return;
    329a:	e1c2      	b.n	3622 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    329c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    329e:	653b      	str	r3, [r7, #80]	; 0x50
		int pin_num = atoi(arg2);
    32a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32a2:	0018      	movs	r0, r3
    32a4:	4b80      	ldr	r3, [pc, #512]	; (34a8 <handle_user_input+0x350>)
    32a6:	4798      	blx	r3
    32a8:	0003      	movs	r3, r0
    32aa:	64fb      	str	r3, [r7, #76]	; 0x4c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    32ac:	4a7f      	ldr	r2, [pc, #508]	; (34ac <handle_user_input+0x354>)
    32ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32b0:	0011      	movs	r1, r2
    32b2:	0018      	movs	r0, r3
    32b4:	4b73      	ldr	r3, [pc, #460]	; (3484 <handle_user_input+0x32c>)
    32b6:	4798      	blx	r3
    32b8:	1e03      	subs	r3, r0, #0
    32ba:	d00b      	beq.n	32d4 <handle_user_input+0x17c>
    32bc:	4a7c      	ldr	r2, [pc, #496]	; (34b0 <handle_user_input+0x358>)
    32be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32c0:	0011      	movs	r1, r2
    32c2:	0018      	movs	r0, r3
    32c4:	4b6f      	ldr	r3, [pc, #444]	; (3484 <handle_user_input+0x32c>)
    32c6:	4798      	blx	r3
    32c8:	1e03      	subs	r3, r0, #0
    32ca:	d003      	beq.n	32d4 <handle_user_input+0x17c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    32cc:	4b79      	ldr	r3, [pc, #484]	; (34b4 <handle_user_input+0x35c>)
    32ce:	0018      	movs	r0, r3
    32d0:	4b74      	ldr	r3, [pc, #464]	; (34a4 <handle_user_input+0x34c>)
    32d2:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    32d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32d6:	2b00      	cmp	r3, #0
    32d8:	dc06      	bgt.n	32e8 <handle_user_input+0x190>
    32da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32dc:	2b20      	cmp	r3, #32
    32de:	dd03      	ble.n	32e8 <handle_user_input+0x190>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    32e0:	4b75      	ldr	r3, [pc, #468]	; (34b8 <handle_user_input+0x360>)
    32e2:	0018      	movs	r0, r3
    32e4:	4b6f      	ldr	r3, [pc, #444]	; (34a4 <handle_user_input+0x34c>)
    32e6:	4798      	blx	r3
		}
		
		handle_gpio_clear(*port, pin_num); 
    32e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32ea:	781b      	ldrb	r3, [r3, #0]
    32ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    32ee:	0011      	movs	r1, r2
    32f0:	0018      	movs	r0, r3
    32f2:	4b74      	ldr	r3, [pc, #464]	; (34c4 <handle_user_input+0x36c>)
    32f4:	4798      	blx	r3
    32f6:	e194      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
    32f8:	4b73      	ldr	r3, [pc, #460]	; (34c8 <handle_user_input+0x370>)
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    32fe:	0011      	movs	r1, r2
    3300:	0018      	movs	r0, r3
    3302:	4b60      	ldr	r3, [pc, #384]	; (3484 <handle_user_input+0x32c>)
    3304:	4798      	blx	r3
    3306:	1e03      	subs	r3, r0, #0
    3308:	d146      	bne.n	3398 <handle_user_input+0x240>
		char* arg1 = strtok(NULL, " ");
    330a:	4b5b      	ldr	r3, [pc, #364]	; (3478 <handle_user_input+0x320>)
    330c:	0019      	movs	r1, r3
    330e:	2000      	movs	r0, #0
    3310:	4b5a      	ldr	r3, [pc, #360]	; (347c <handle_user_input+0x324>)
    3312:	4798      	blx	r3
    3314:	0003      	movs	r3, r0
    3316:	64bb      	str	r3, [r7, #72]	; 0x48
		char* arg2 = strtok(NULL, " ");
    3318:	4b57      	ldr	r3, [pc, #348]	; (3478 <handle_user_input+0x320>)
    331a:	0019      	movs	r1, r3
    331c:	2000      	movs	r0, #0
    331e:	4b57      	ldr	r3, [pc, #348]	; (347c <handle_user_input+0x324>)
    3320:	4798      	blx	r3
    3322:	0003      	movs	r3, r0
    3324:	647b      	str	r3, [r7, #68]	; 0x44
		
		if(arg1 == 0 || arg2 == 0) {
    3326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3328:	2b00      	cmp	r3, #0
    332a:	d002      	beq.n	3332 <handle_user_input+0x1da>
    332c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    332e:	2b00      	cmp	r3, #0
    3330:	d104      	bne.n	333c <handle_user_input+0x1e4>
			printf("Not enough arguments! Try \"help\".\r\n");
    3332:	4b5b      	ldr	r3, [pc, #364]	; (34a0 <handle_user_input+0x348>)
    3334:	0018      	movs	r0, r3
    3336:	4b5b      	ldr	r3, [pc, #364]	; (34a4 <handle_user_input+0x34c>)
    3338:	4798      	blx	r3
			return;
    333a:	e172      	b.n	3622 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    333c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    333e:	643b      	str	r3, [r7, #64]	; 0x40
		int pin_num = atoi(arg2);
    3340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3342:	0018      	movs	r0, r3
    3344:	4b58      	ldr	r3, [pc, #352]	; (34a8 <handle_user_input+0x350>)
    3346:	4798      	blx	r3
    3348:	0003      	movs	r3, r0
    334a:	63fb      	str	r3, [r7, #60]	; 0x3c

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    334c:	4a57      	ldr	r2, [pc, #348]	; (34ac <handle_user_input+0x354>)
    334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3350:	0011      	movs	r1, r2
    3352:	0018      	movs	r0, r3
    3354:	4b4b      	ldr	r3, [pc, #300]	; (3484 <handle_user_input+0x32c>)
    3356:	4798      	blx	r3
    3358:	1e03      	subs	r3, r0, #0
    335a:	d00b      	beq.n	3374 <handle_user_input+0x21c>
    335c:	4a54      	ldr	r2, [pc, #336]	; (34b0 <handle_user_input+0x358>)
    335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3360:	0011      	movs	r1, r2
    3362:	0018      	movs	r0, r3
    3364:	4b47      	ldr	r3, [pc, #284]	; (3484 <handle_user_input+0x32c>)
    3366:	4798      	blx	r3
    3368:	1e03      	subs	r3, r0, #0
    336a:	d003      	beq.n	3374 <handle_user_input+0x21c>
			printf("Enter a valid Port! Try \"help\".\r\n");
    336c:	4b51      	ldr	r3, [pc, #324]	; (34b4 <handle_user_input+0x35c>)
    336e:	0018      	movs	r0, r3
    3370:	4b4c      	ldr	r3, [pc, #304]	; (34a4 <handle_user_input+0x34c>)
    3372:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    3374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3376:	2b00      	cmp	r3, #0
    3378:	dc06      	bgt.n	3388 <handle_user_input+0x230>
    337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    337c:	2b20      	cmp	r3, #32
    337e:	dd03      	ble.n	3388 <handle_user_input+0x230>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    3380:	4b4d      	ldr	r3, [pc, #308]	; (34b8 <handle_user_input+0x360>)
    3382:	0018      	movs	r0, r3
    3384:	4b47      	ldr	r3, [pc, #284]	; (34a4 <handle_user_input+0x34c>)
    3386:	4798      	blx	r3
		}

		handle_gpio_get(*port, pin_num);
    3388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    338e:	0011      	movs	r1, r2
    3390:	0018      	movs	r0, r3
    3392:	4b4e      	ldr	r3, [pc, #312]	; (34cc <handle_user_input+0x374>)
    3394:	4798      	blx	r3
    3396:	e144      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MAC, cmd) == 0) { 
    3398:	4b4d      	ldr	r3, [pc, #308]	; (34d0 <handle_user_input+0x378>)
    339a:	681b      	ldr	r3, [r3, #0]
    339c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    339e:	0011      	movs	r1, r2
    33a0:	0018      	movs	r0, r3
    33a2:	4b38      	ldr	r3, [pc, #224]	; (3484 <handle_user_input+0x32c>)
    33a4:	4798      	blx	r3
    33a6:	1e03      	subs	r3, r0, #0
    33a8:	d102      	bne.n	33b0 <handle_user_input+0x258>
		handle_mac(); 
    33aa:	4b4a      	ldr	r3, [pc, #296]	; (34d4 <handle_user_input+0x37c>)
    33ac:	4798      	blx	r3
    33ae:	e138      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_IP, cmd) == 0) { 
    33b0:	4b49      	ldr	r3, [pc, #292]	; (34d8 <handle_user_input+0x380>)
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    33b6:	0011      	movs	r1, r2
    33b8:	0018      	movs	r0, r3
    33ba:	4b32      	ldr	r3, [pc, #200]	; (3484 <handle_user_input+0x32c>)
    33bc:	4798      	blx	r3
    33be:	1e03      	subs	r3, r0, #0
    33c0:	d102      	bne.n	33c8 <handle_user_input+0x270>
		handle_ip(); 
    33c2:	4b46      	ldr	r3, [pc, #280]	; (34dc <handle_user_input+0x384>)
    33c4:	4798      	blx	r3
    33c6:	e12c      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
    33c8:	4b45      	ldr	r3, [pc, #276]	; (34e0 <handle_user_input+0x388>)
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    33ce:	0011      	movs	r1, r2
    33d0:	0018      	movs	r0, r3
    33d2:	4b2c      	ldr	r3, [pc, #176]	; (3484 <handle_user_input+0x32c>)
    33d4:	4798      	blx	r3
    33d6:	1e03      	subs	r3, r0, #0
    33d8:	d12b      	bne.n	3432 <handle_user_input+0x2da>
		char* arg1 = strtok(NULL, " ");
    33da:	4b27      	ldr	r3, [pc, #156]	; (3478 <handle_user_input+0x320>)
    33dc:	0019      	movs	r1, r3
    33de:	2000      	movs	r0, #0
    33e0:	4b26      	ldr	r3, [pc, #152]	; (347c <handle_user_input+0x324>)
    33e2:	4798      	blx	r3
    33e4:	0003      	movs	r3, r0
    33e6:	63bb      	str	r3, [r7, #56]	; 0x38
		char* arg2 = strtok(NULL, " ");
    33e8:	4b23      	ldr	r3, [pc, #140]	; (3478 <handle_user_input+0x320>)
    33ea:	0019      	movs	r1, r3
    33ec:	2000      	movs	r0, #0
    33ee:	4b23      	ldr	r3, [pc, #140]	; (347c <handle_user_input+0x324>)
    33f0:	4798      	blx	r3
    33f2:	0003      	movs	r3, r0
    33f4:	637b      	str	r3, [r7, #52]	; 0x34
		
		if(arg1 == 0 || arg2 == 0) {
    33f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33f8:	2b00      	cmp	r3, #0
    33fa:	d002      	beq.n	3402 <handle_user_input+0x2aa>
    33fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    33fe:	2b00      	cmp	r3, #0
    3400:	d104      	bne.n	340c <handle_user_input+0x2b4>
			printf("Not enough arguments! Try \"help\".\r\n");
    3402:	4b27      	ldr	r3, [pc, #156]	; (34a0 <handle_user_input+0x348>)
    3404:	0018      	movs	r0, r3
    3406:	4b27      	ldr	r3, [pc, #156]	; (34a4 <handle_user_input+0x34c>)
    3408:	4798      	blx	r3
			return;
    340a:	e10a      	b.n	3622 <handle_user_input+0x4ca>
		}
				
		int num_readings = atoi(arg1);
    340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    340e:	0018      	movs	r0, r3
    3410:	4b25      	ldr	r3, [pc, #148]	; (34a8 <handle_user_input+0x350>)
    3412:	4798      	blx	r3
    3414:	0003      	movs	r3, r0
    3416:	633b      	str	r3, [r7, #48]	; 0x30
		int interval_ms = atoi(arg2);
    3418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    341a:	0018      	movs	r0, r3
    341c:	4b22      	ldr	r3, [pc, #136]	; (34a8 <handle_user_input+0x350>)
    341e:	4798      	blx	r3
    3420:	0003      	movs	r3, r0
    3422:	62fb      	str	r3, [r7, #44]	; 0x2c
		
		handle_read_gyro(num_readings, interval_ms); 
    3424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3428:	0011      	movs	r1, r2
    342a:	0018      	movs	r0, r3
    342c:	4b2d      	ldr	r3, [pc, #180]	; (34e4 <handle_user_input+0x38c>)
    342e:	4798      	blx	r3
    3430:	e0f7      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    3432:	4b2d      	ldr	r3, [pc, #180]	; (34e8 <handle_user_input+0x390>)
    3434:	681b      	ldr	r3, [r3, #0]
    3436:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3438:	0011      	movs	r1, r2
    343a:	0018      	movs	r0, r3
    343c:	4b11      	ldr	r3, [pc, #68]	; (3484 <handle_user_input+0x32c>)
    343e:	4798      	blx	r3
    3440:	1e03      	subs	r3, r0, #0
    3442:	d166      	bne.n	3512 <handle_user_input+0x3ba>
		char* arg1 = strtok(NULL, " ");
    3444:	4b0c      	ldr	r3, [pc, #48]	; (3478 <handle_user_input+0x320>)
    3446:	0019      	movs	r1, r3
    3448:	2000      	movs	r0, #0
    344a:	4b0c      	ldr	r3, [pc, #48]	; (347c <handle_user_input+0x324>)
    344c:	4798      	blx	r3
    344e:	0003      	movs	r3, r0
    3450:	62bb      	str	r3, [r7, #40]	; 0x28
		char* arg2 = strtok(NULL, " ");
    3452:	4b09      	ldr	r3, [pc, #36]	; (3478 <handle_user_input+0x320>)
    3454:	0019      	movs	r1, r3
    3456:	2000      	movs	r0, #0
    3458:	4b08      	ldr	r3, [pc, #32]	; (347c <handle_user_input+0x324>)
    345a:	4798      	blx	r3
    345c:	0003      	movs	r3, r0
    345e:	627b      	str	r3, [r7, #36]	; 0x24
		
		if(arg1 == 0 || arg2 == 0) {
    3460:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3462:	2b00      	cmp	r3, #0
    3464:	d002      	beq.n	346c <handle_user_input+0x314>
    3466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3468:	2b00      	cmp	r3, #0
    346a:	d13f      	bne.n	34ec <handle_user_input+0x394>
			printf("Not enough arguments! Try \"help\".\r\n");
    346c:	4b0c      	ldr	r3, [pc, #48]	; (34a0 <handle_user_input+0x348>)
    346e:	0018      	movs	r0, r3
    3470:	4b0c      	ldr	r3, [pc, #48]	; (34a4 <handle_user_input+0x34c>)
    3472:	4798      	blx	r3
			return;
    3474:	e0d5      	b.n	3622 <handle_user_input+0x4ca>
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	0000bf00 	.word	0x0000bf00
    347c:	00009f41 	.word	0x00009f41
    3480:	20000000 	.word	0x20000000
    3484:	00009f2d 	.word	0x00009f2d
    3488:	00003681 	.word	0x00003681
    348c:	20000004 	.word	0x20000004
    3490:	000036f9 	.word	0x000036f9
    3494:	20000008 	.word	0x20000008
    3498:	0000371d 	.word	0x0000371d
    349c:	2000000c 	.word	0x2000000c
    34a0:	0000bf04 	.word	0x0000bf04
    34a4:	00009d79 	.word	0x00009d79
    34a8:	00009c0d 	.word	0x00009c0d
    34ac:	0000bf28 	.word	0x0000bf28
    34b0:	0000bf2c 	.word	0x0000bf2c
    34b4:	0000bf30 	.word	0x0000bf30
    34b8:	0000bf54 	.word	0x0000bf54
    34bc:	00003741 	.word	0x00003741
    34c0:	20000010 	.word	0x20000010
    34c4:	00003781 	.word	0x00003781
    34c8:	20000014 	.word	0x20000014
    34cc:	000037c1 	.word	0x000037c1
    34d0:	20000018 	.word	0x20000018
    34d4:	00003855 	.word	0x00003855
    34d8:	2000001c 	.word	0x2000001c
    34dc:	00003881 	.word	0x00003881
    34e0:	20000020 	.word	0x20000020
    34e4:	000038ad 	.word	0x000038ad
    34e8:	20000024 	.word	0x20000024
		}
				
		int num_readings = atoi(arg1);
    34ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34ee:	0018      	movs	r0, r3
    34f0:	4b4d      	ldr	r3, [pc, #308]	; (3628 <handle_user_input+0x4d0>)
    34f2:	4798      	blx	r3
    34f4:	0003      	movs	r3, r0
    34f6:	623b      	str	r3, [r7, #32]
		int interval_ms = atoi(arg2);
    34f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34fa:	0018      	movs	r0, r3
    34fc:	4b4a      	ldr	r3, [pc, #296]	; (3628 <handle_user_input+0x4d0>)
    34fe:	4798      	blx	r3
    3500:	0003      	movs	r3, r0
    3502:	61fb      	str	r3, [r7, #28]
		
		handle_read_accel(num_readings, interval_ms); 
    3504:	69fa      	ldr	r2, [r7, #28]
    3506:	6a3b      	ldr	r3, [r7, #32]
    3508:	0011      	movs	r1, r2
    350a:	0018      	movs	r0, r3
    350c:	4b47      	ldr	r3, [pc, #284]	; (362c <handle_user_input+0x4d4>)
    350e:	4798      	blx	r3
    3510:	e087      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    3512:	4b47      	ldr	r3, [pc, #284]	; (3630 <handle_user_input+0x4d8>)
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3518:	0011      	movs	r1, r2
    351a:	0018      	movs	r0, r3
    351c:	4b45      	ldr	r3, [pc, #276]	; (3634 <handle_user_input+0x4dc>)
    351e:	4798      	blx	r3
    3520:	1e03      	subs	r3, r0, #0
    3522:	d146      	bne.n	35b2 <handle_user_input+0x45a>
		char* arg1 = strtok(NULL, " ");
    3524:	4b44      	ldr	r3, [pc, #272]	; (3638 <handle_user_input+0x4e0>)
    3526:	0019      	movs	r1, r3
    3528:	2000      	movs	r0, #0
    352a:	4b44      	ldr	r3, [pc, #272]	; (363c <handle_user_input+0x4e4>)
    352c:	4798      	blx	r3
    352e:	0003      	movs	r3, r0
    3530:	61bb      	str	r3, [r7, #24]
		char* arg2 = strtok(NULL, " ");
    3532:	4b41      	ldr	r3, [pc, #260]	; (3638 <handle_user_input+0x4e0>)
    3534:	0019      	movs	r1, r3
    3536:	2000      	movs	r0, #0
    3538:	4b40      	ldr	r3, [pc, #256]	; (363c <handle_user_input+0x4e4>)
    353a:	4798      	blx	r3
    353c:	0003      	movs	r3, r0
    353e:	617b      	str	r3, [r7, #20]
		
		if(arg1 == 0 || arg2 == 0) {
    3540:	69bb      	ldr	r3, [r7, #24]
    3542:	2b00      	cmp	r3, #0
    3544:	d002      	beq.n	354c <handle_user_input+0x3f4>
    3546:	697b      	ldr	r3, [r7, #20]
    3548:	2b00      	cmp	r3, #0
    354a:	d104      	bne.n	3556 <handle_user_input+0x3fe>
			printf("Not enough arguments! Try \"help\".\r\n");
    354c:	4b3c      	ldr	r3, [pc, #240]	; (3640 <handle_user_input+0x4e8>)
    354e:	0018      	movs	r0, r3
    3550:	4b3c      	ldr	r3, [pc, #240]	; (3644 <handle_user_input+0x4ec>)
    3552:	4798      	blx	r3
			return;
    3554:	e065      	b.n	3622 <handle_user_input+0x4ca>
		}

		char* port = arg1;
    3556:	69bb      	ldr	r3, [r7, #24]
    3558:	613b      	str	r3, [r7, #16]
		int pin_num = atoi(arg2);
    355a:	697b      	ldr	r3, [r7, #20]
    355c:	0018      	movs	r0, r3
    355e:	4b32      	ldr	r3, [pc, #200]	; (3628 <handle_user_input+0x4d0>)
    3560:	4798      	blx	r3
    3562:	0003      	movs	r3, r0
    3564:	60fb      	str	r3, [r7, #12]

		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    3566:	4a38      	ldr	r2, [pc, #224]	; (3648 <handle_user_input+0x4f0>)
    3568:	693b      	ldr	r3, [r7, #16]
    356a:	0011      	movs	r1, r2
    356c:	0018      	movs	r0, r3
    356e:	4b31      	ldr	r3, [pc, #196]	; (3634 <handle_user_input+0x4dc>)
    3570:	4798      	blx	r3
    3572:	1e03      	subs	r3, r0, #0
    3574:	d00b      	beq.n	358e <handle_user_input+0x436>
    3576:	4a35      	ldr	r2, [pc, #212]	; (364c <handle_user_input+0x4f4>)
    3578:	693b      	ldr	r3, [r7, #16]
    357a:	0011      	movs	r1, r2
    357c:	0018      	movs	r0, r3
    357e:	4b2d      	ldr	r3, [pc, #180]	; (3634 <handle_user_input+0x4dc>)
    3580:	4798      	blx	r3
    3582:	1e03      	subs	r3, r0, #0
    3584:	d003      	beq.n	358e <handle_user_input+0x436>
			printf("Enter a valid Port! Try \"help\".\r\n");
    3586:	4b32      	ldr	r3, [pc, #200]	; (3650 <handle_user_input+0x4f8>)
    3588:	0018      	movs	r0, r3
    358a:	4b2e      	ldr	r3, [pc, #184]	; (3644 <handle_user_input+0x4ec>)
    358c:	4798      	blx	r3
		}

		if (pin_num <= 0 && pin_num > 32) {
    358e:	68fb      	ldr	r3, [r7, #12]
    3590:	2b00      	cmp	r3, #0
    3592:	dc06      	bgt.n	35a2 <handle_user_input+0x44a>
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	2b20      	cmp	r3, #32
    3598:	dd03      	ble.n	35a2 <handle_user_input+0x44a>
			printf("Enter a valid Pin Number! Try \"help\".\r\n");
    359a:	4b2e      	ldr	r3, [pc, #184]	; (3654 <handle_user_input+0x4fc>)
    359c:	0018      	movs	r0, r3
    359e:	4b29      	ldr	r3, [pc, #164]	; (3644 <handle_user_input+0x4ec>)
    35a0:	4798      	blx	r3
		}
		
		handle_adc_get(port, pin_num); 
    35a2:	693b      	ldr	r3, [r7, #16]
    35a4:	b2db      	uxtb	r3, r3
    35a6:	68fa      	ldr	r2, [r7, #12]
    35a8:	0011      	movs	r1, r2
    35aa:	0018      	movs	r0, r3
    35ac:	4b2a      	ldr	r3, [pc, #168]	; (3658 <handle_user_input+0x500>)
    35ae:	4798      	blx	r3
    35b0:	e037      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    35b2:	4b2a      	ldr	r3, [pc, #168]	; (365c <handle_user_input+0x504>)
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    35b8:	0011      	movs	r1, r2
    35ba:	0018      	movs	r0, r3
    35bc:	4b1d      	ldr	r3, [pc, #116]	; (3634 <handle_user_input+0x4dc>)
    35be:	4798      	blx	r3
    35c0:	1e03      	subs	r3, r0, #0
    35c2:	d102      	bne.n	35ca <handle_user_input+0x472>
		handle_mcu_temp(); 
    35c4:	4b26      	ldr	r3, [pc, #152]	; (3660 <handle_user_input+0x508>)
    35c6:	4798      	blx	r3
    35c8:	e02b      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    35ca:	4b26      	ldr	r3, [pc, #152]	; (3664 <handle_user_input+0x50c>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    35d0:	0011      	movs	r1, r2
    35d2:	0018      	movs	r0, r3
    35d4:	4b17      	ldr	r3, [pc, #92]	; (3634 <handle_user_input+0x4dc>)
    35d6:	4798      	blx	r3
    35d8:	1e03      	subs	r3, r0, #0
    35da:	d102      	bne.n	35e2 <handle_user_input+0x48a>
		handle_i2c_scan(); 
    35dc:	4b22      	ldr	r3, [pc, #136]	; (3668 <handle_user_input+0x510>)
    35de:	4798      	blx	r3
    35e0:	e01f      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_SET_ACT, cmd) == 0) {
    35e2:	4b22      	ldr	r3, [pc, #136]	; (366c <handle_user_input+0x514>)
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    35e8:	0011      	movs	r1, r2
    35ea:	0018      	movs	r0, r3
    35ec:	4b11      	ldr	r3, [pc, #68]	; (3634 <handle_user_input+0x4dc>)
    35ee:	4798      	blx	r3
    35f0:	1e03      	subs	r3, r0, #0
    35f2:	d104      	bne.n	35fe <handle_user_input+0x4a6>
		// Just a GPIO.
		handle_gpio_set('B', PIN_PB02);	
    35f4:	2122      	movs	r1, #34	; 0x22
    35f6:	2042      	movs	r0, #66	; 0x42
    35f8:	4b1d      	ldr	r3, [pc, #116]	; (3670 <handle_user_input+0x518>)
    35fa:	4798      	blx	r3
    35fc:	e011      	b.n	3622 <handle_user_input+0x4ca>
	}
	else if(strcmp(CMD_CLEAR_ACT, cmd) == 0) {
    35fe:	4b1d      	ldr	r3, [pc, #116]	; (3674 <handle_user_input+0x51c>)
    3600:	681b      	ldr	r3, [r3, #0]
    3602:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3604:	0011      	movs	r1, r2
    3606:	0018      	movs	r0, r3
    3608:	4b0a      	ldr	r3, [pc, #40]	; (3634 <handle_user_input+0x4dc>)
    360a:	4798      	blx	r3
    360c:	1e03      	subs	r3, r0, #0
    360e:	d104      	bne.n	361a <handle_user_input+0x4c2>
		// Just a GPIO.		
		handle_gpio_clear('B', PIN_PB02);	
    3610:	2122      	movs	r1, #34	; 0x22
    3612:	2042      	movs	r0, #66	; 0x42
    3614:	4b18      	ldr	r3, [pc, #96]	; (3678 <handle_user_input+0x520>)
    3616:	4798      	blx	r3
    3618:	e003      	b.n	3622 <handle_user_input+0x4ca>
	}
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    361a:	4b18      	ldr	r3, [pc, #96]	; (367c <handle_user_input+0x524>)
    361c:	0018      	movs	r0, r3
    361e:	4b09      	ldr	r3, [pc, #36]	; (3644 <handle_user_input+0x4ec>)
    3620:	4798      	blx	r3
	}
}
    3622:	46bd      	mov	sp, r7
    3624:	b01c      	add	sp, #112	; 0x70
    3626:	bd80      	pop	{r7, pc}
    3628:	00009c0d 	.word	0x00009c0d
    362c:	00003b71 	.word	0x00003b71
    3630:	20000030 	.word	0x20000030
    3634:	00009f2d 	.word	0x00009f2d
    3638:	0000bf00 	.word	0x0000bf00
    363c:	00009f41 	.word	0x00009f41
    3640:	0000bf04 	.word	0x0000bf04
    3644:	00009d79 	.word	0x00009d79
    3648:	0000bf28 	.word	0x0000bf28
    364c:	0000bf2c 	.word	0x0000bf2c
    3650:	0000bf30 	.word	0x0000bf30
    3654:	0000bf54 	.word	0x0000bf54
    3658:	00003b95 	.word	0x00003b95
    365c:	20000034 	.word	0x20000034
    3660:	00003bfd 	.word	0x00003bfd
    3664:	20000038 	.word	0x20000038
    3668:	00003c71 	.word	0x00003c71
    366c:	20000028 	.word	0x20000028
    3670:	00003741 	.word	0x00003741
    3674:	2000002c 	.word	0x2000002c
    3678:	00003781 	.word	0x00003781
    367c:	0000bf7c 	.word	0x0000bf7c

00003680 <handle_help>:

void handle_help() {
    3680:	b5b0      	push	{r4, r5, r7, lr}
    3682:	b082      	sub	sp, #8
    3684:	af00      	add	r7, sp, #0
	printf("Command List:\r\n");
    3686:	4b17      	ldr	r3, [pc, #92]	; (36e4 <handle_help+0x64>)
    3688:	0018      	movs	r0, r3
    368a:	4b17      	ldr	r3, [pc, #92]	; (36e8 <handle_help+0x68>)
    368c:	4798      	blx	r3
	for(int i = 0; i < OPTION_COUNT; i++) {
    368e:	2300      	movs	r3, #0
    3690:	607b      	str	r3, [r7, #4]
    3692:	e020      	b.n	36d6 <handle_help+0x56>
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
    3694:	4915      	ldr	r1, [pc, #84]	; (36ec <handle_help+0x6c>)
    3696:	687a      	ldr	r2, [r7, #4]
    3698:	0013      	movs	r3, r2
    369a:	005b      	lsls	r3, r3, #1
    369c:	189b      	adds	r3, r3, r2
    369e:	009b      	lsls	r3, r3, #2
    36a0:	585c      	ldr	r4, [r3, r1]
    36a2:	4912      	ldr	r1, [pc, #72]	; (36ec <handle_help+0x6c>)
    36a4:	687a      	ldr	r2, [r7, #4]
    36a6:	0013      	movs	r3, r2
    36a8:	005b      	lsls	r3, r3, #1
    36aa:	189b      	adds	r3, r3, r2
    36ac:	009b      	lsls	r3, r3, #2
    36ae:	18cb      	adds	r3, r1, r3
    36b0:	3304      	adds	r3, #4
    36b2:	681d      	ldr	r5, [r3, #0]
    36b4:	490d      	ldr	r1, [pc, #52]	; (36ec <handle_help+0x6c>)
    36b6:	687a      	ldr	r2, [r7, #4]
    36b8:	0013      	movs	r3, r2
    36ba:	005b      	lsls	r3, r3, #1
    36bc:	189b      	adds	r3, r3, r2
    36be:	009b      	lsls	r3, r3, #2
    36c0:	18cb      	adds	r3, r1, r3
    36c2:	3308      	adds	r3, #8
    36c4:	681b      	ldr	r3, [r3, #0]
    36c6:	480a      	ldr	r0, [pc, #40]	; (36f0 <handle_help+0x70>)
    36c8:	002a      	movs	r2, r5
    36ca:	0021      	movs	r1, r4
    36cc:	4c09      	ldr	r4, [pc, #36]	; (36f4 <handle_help+0x74>)
    36ce:	47a0      	blx	r4
	for(int i = 0; i < OPTION_COUNT; i++) {
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	3301      	adds	r3, #1
    36d4:	607b      	str	r3, [r7, #4]
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	2b0c      	cmp	r3, #12
    36da:	dddb      	ble.n	3694 <handle_help+0x14>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
    36dc:	46c0      	nop			; (mov r8, r8)
    36de:	46bd      	mov	sp, r7
    36e0:	b002      	add	sp, #8
    36e2:	bdb0      	pop	{r4, r5, r7, pc}
    36e4:	0000bfbc 	.word	0x0000bfbc
    36e8:	00009d79 	.word	0x00009d79
    36ec:	200002f8 	.word	0x200002f8
    36f0:	0000bfcc 	.word	0x0000bfcc
    36f4:	00009c85 	.word	0x00009c85

000036f8 <handle_ver_bl>:


void handle_ver_bl() {
    36f8:	b580      	push	{r7, lr}
    36fa:	af00      	add	r7, sp, #0
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
    36fc:	4a04      	ldr	r2, [pc, #16]	; (3710 <handle_ver_bl+0x18>)
    36fe:	4b05      	ldr	r3, [pc, #20]	; (3714 <handle_ver_bl+0x1c>)
    3700:	0011      	movs	r1, r2
    3702:	0018      	movs	r0, r3
    3704:	4b04      	ldr	r3, [pc, #16]	; (3718 <handle_ver_bl+0x20>)
    3706:	4798      	blx	r3
}
    3708:	46c0      	nop			; (mov r8, r8)
    370a:	46bd      	mov	sp, r7
    370c:	bd80      	pop	{r7, pc}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	0000bfdc 	.word	0x0000bfdc
    3714:	0000bfe4 	.word	0x0000bfe4
    3718:	00009c85 	.word	0x00009c85

0000371c <handle_ver_app>:

void handle_ver_app() {
    371c:	b580      	push	{r7, lr}
    371e:	af00      	add	r7, sp, #0
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
    3720:	4a04      	ldr	r2, [pc, #16]	; (3734 <handle_ver_app+0x18>)
    3722:	4b05      	ldr	r3, [pc, #20]	; (3738 <handle_ver_app+0x1c>)
    3724:	0011      	movs	r1, r2
    3726:	0018      	movs	r0, r3
    3728:	4b04      	ldr	r3, [pc, #16]	; (373c <handle_ver_app+0x20>)
    372a:	4798      	blx	r3
}
    372c:	46c0      	nop			; (mov r8, r8)
    372e:	46bd      	mov	sp, r7
    3730:	bd80      	pop	{r7, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	0000bfdc 	.word	0x0000bfdc
    3738:	0000c000 	.word	0x0000c000
    373c:	00009c85 	.word	0x00009c85

00003740 <handle_gpio_set>:

void handle_gpio_set(char port, int pin_num) {
    3740:	b580      	push	{r7, lr}
    3742:	b084      	sub	sp, #16
    3744:	af00      	add	r7, sp, #0
    3746:	0002      	movs	r2, r0
    3748:	6039      	str	r1, [r7, #0]
    374a:	1dfb      	adds	r3, r7, #7
    374c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    374e:	230f      	movs	r3, #15
    3750:	18fb      	adds	r3, r7, r3
    3752:	2222      	movs	r2, #34	; 0x22
    3754:	701a      	strb	r2, [r3, #0]
	bool level = HIGH;
    3756:	230e      	movs	r3, #14
    3758:	18fb      	adds	r3, r7, r3
    375a:	2201      	movs	r2, #1
    375c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    375e:	230e      	movs	r3, #14
    3760:	18fb      	adds	r3, r7, r3
    3762:	781a      	ldrb	r2, [r3, #0]
    3764:	230f      	movs	r3, #15
    3766:	18fb      	adds	r3, r7, r3
    3768:	781b      	ldrb	r3, [r3, #0]
    376a:	0011      	movs	r1, r2
    376c:	0018      	movs	r0, r3
    376e:	4b03      	ldr	r3, [pc, #12]	; (377c <handle_gpio_set+0x3c>)
    3770:	4798      	blx	r3
	
	//printf("Not implemented yet!\r\n");
}
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	46bd      	mov	sp, r7
    3776:	b004      	add	sp, #16
    3778:	bd80      	pop	{r7, pc}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	00002ec9 	.word	0x00002ec9

00003780 <handle_gpio_clear>:

void handle_gpio_clear(char port, int pin_num) {
    3780:	b580      	push	{r7, lr}
    3782:	b084      	sub	sp, #16
    3784:	af00      	add	r7, sp, #0
    3786:	0002      	movs	r2, r0
    3788:	6039      	str	r1, [r7, #0]
    378a:	1dfb      	adds	r3, r7, #7
    378c:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
	
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
    378e:	230f      	movs	r3, #15
    3790:	18fb      	adds	r3, r7, r3
    3792:	2222      	movs	r2, #34	; 0x22
    3794:	701a      	strb	r2, [r3, #0]
	bool level = LOW;
    3796:	230e      	movs	r3, #14
    3798:	18fb      	adds	r3, r7, r3
    379a:	2200      	movs	r2, #0
    379c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(pin, level);
    379e:	230e      	movs	r3, #14
    37a0:	18fb      	adds	r3, r7, r3
    37a2:	781a      	ldrb	r2, [r3, #0]
    37a4:	230f      	movs	r3, #15
    37a6:	18fb      	adds	r3, r7, r3
    37a8:	781b      	ldrb	r3, [r3, #0]
    37aa:	0011      	movs	r1, r2
    37ac:	0018      	movs	r0, r3
    37ae:	4b03      	ldr	r3, [pc, #12]	; (37bc <handle_gpio_clear+0x3c>)
    37b0:	4798      	blx	r3
		
	//printf("Not implemented yet!\r\n");
}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	46bd      	mov	sp, r7
    37b6:	b004      	add	sp, #16
    37b8:	bd80      	pop	{r7, pc}
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	00002ec9 	.word	0x00002ec9

000037c0 <handle_gpio_get>:

void handle_gpio_get(char port, int pin_num) {
    37c0:	b590      	push	{r4, r7, lr}
    37c2:	b085      	sub	sp, #20
    37c4:	af00      	add	r7, sp, #0
    37c6:	0002      	movs	r2, r0
    37c8:	6039      	str	r1, [r7, #0]
    37ca:	1dfb      	adds	r3, r7, #7
    37cc:	701a      	strb	r2, [r3, #0]
	// TODO: Must implement this feature for at least two pins.
		uint8_t pin = PIN_PB02;
    37ce:	230e      	movs	r3, #14
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	2222      	movs	r2, #34	; 0x22
    37d4:	701a      	strb	r2, [r3, #0]
		bool level;

	// Hard-coded testing
	if (port == "B" && pin_num == 2){
    37d6:	1dfb      	adds	r3, r7, #7
    37d8:	781b      	ldrb	r3, [r3, #0]
    37da:	001a      	movs	r2, r3
    37dc:	4b19      	ldr	r3, [pc, #100]	; (3844 <handle_gpio_get+0x84>)
    37de:	429a      	cmp	r2, r3
    37e0:	d10d      	bne.n	37fe <handle_gpio_get+0x3e>
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	2b02      	cmp	r3, #2
    37e6:	d10a      	bne.n	37fe <handle_gpio_get+0x3e>
		level = port_pin_get_output_level(pin);
    37e8:	230f      	movs	r3, #15
    37ea:	18fc      	adds	r4, r7, r3
    37ec:	230e      	movs	r3, #14
    37ee:	18fb      	adds	r3, r7, r3
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	0018      	movs	r0, r3
    37f4:	4b14      	ldr	r3, [pc, #80]	; (3848 <handle_gpio_get+0x88>)
    37f6:	4798      	blx	r3
    37f8:	0003      	movs	r3, r0
    37fa:	7023      	strb	r3, [r4, #0]
    37fc:	e016      	b.n	382c <handle_gpio_get+0x6c>
	}

	else if (port == "B" && pin_num == 3){
    37fe:	1dfb      	adds	r3, r7, #7
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	001a      	movs	r2, r3
    3804:	4b0f      	ldr	r3, [pc, #60]	; (3844 <handle_gpio_get+0x84>)
    3806:	429a      	cmp	r2, r3
    3808:	d110      	bne.n	382c <handle_gpio_get+0x6c>
    380a:	683b      	ldr	r3, [r7, #0]
    380c:	2b03      	cmp	r3, #3
    380e:	d10d      	bne.n	382c <handle_gpio_get+0x6c>
		uint8_t pin = PIN_PB03;
    3810:	230d      	movs	r3, #13
    3812:	18fb      	adds	r3, r7, r3
    3814:	2223      	movs	r2, #35	; 0x23
    3816:	701a      	strb	r2, [r3, #0]
		level = port_pin_get_output_level(pin);
    3818:	230f      	movs	r3, #15
    381a:	18fc      	adds	r4, r7, r3
    381c:	230d      	movs	r3, #13
    381e:	18fb      	adds	r3, r7, r3
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	0018      	movs	r0, r3
    3824:	4b08      	ldr	r3, [pc, #32]	; (3848 <handle_gpio_get+0x88>)
    3826:	4798      	blx	r3
    3828:	0003      	movs	r3, r0
    382a:	7023      	strb	r3, [r4, #0]
	}
	
	printf("The level set is %d\r\n", level);
    382c:	230f      	movs	r3, #15
    382e:	18fb      	adds	r3, r7, r3
    3830:	781a      	ldrb	r2, [r3, #0]
    3832:	4b06      	ldr	r3, [pc, #24]	; (384c <handle_gpio_get+0x8c>)
    3834:	0011      	movs	r1, r2
    3836:	0018      	movs	r0, r3
    3838:	4b05      	ldr	r3, [pc, #20]	; (3850 <handle_gpio_get+0x90>)
    383a:	4798      	blx	r3

}
    383c:	46c0      	nop			; (mov r8, r8)
    383e:	46bd      	mov	sp, r7
    3840:	b005      	add	sp, #20
    3842:	bd90      	pop	{r4, r7, pc}
    3844:	0000bf2c 	.word	0x0000bf2c
    3848:	00002e85 	.word	0x00002e85
    384c:	0000c01c 	.word	0x0000c01c
    3850:	00009c85 	.word	0x00009c85

00003854 <handle_mac>:

void handle_mac() {
    3854:	b580      	push	{r7, lr}
    3856:	b082      	sub	sp, #8
    3858:	af00      	add	r7, sp, #0
	char* dummy_mac = "01:23:45:67:89:ab";
    385a:	4b06      	ldr	r3, [pc, #24]	; (3874 <handle_mac+0x20>)
    385c:	607b      	str	r3, [r7, #4]
	printf("MAC Address: %s\r\n", dummy_mac);
    385e:	687a      	ldr	r2, [r7, #4]
    3860:	4b05      	ldr	r3, [pc, #20]	; (3878 <handle_mac+0x24>)
    3862:	0011      	movs	r1, r2
    3864:	0018      	movs	r0, r3
    3866:	4b05      	ldr	r3, [pc, #20]	; (387c <handle_mac+0x28>)
    3868:	4798      	blx	r3
}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	46bd      	mov	sp, r7
    386e:	b002      	add	sp, #8
    3870:	bd80      	pop	{r7, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	0000c034 	.word	0x0000c034
    3878:	0000c048 	.word	0x0000c048
    387c:	00009c85 	.word	0x00009c85

00003880 <handle_ip>:

void handle_ip() {
    3880:	b580      	push	{r7, lr}
    3882:	b082      	sub	sp, #8
    3884:	af00      	add	r7, sp, #0
	char* dummy_ip = "255.255.255.255";
    3886:	4b06      	ldr	r3, [pc, #24]	; (38a0 <handle_ip+0x20>)
    3888:	607b      	str	r3, [r7, #4]
	printf("IP Address: %s\r\n", dummy_ip);
    388a:	687a      	ldr	r2, [r7, #4]
    388c:	4b05      	ldr	r3, [pc, #20]	; (38a4 <handle_ip+0x24>)
    388e:	0011      	movs	r1, r2
    3890:	0018      	movs	r0, r3
    3892:	4b05      	ldr	r3, [pc, #20]	; (38a8 <handle_ip+0x28>)
    3894:	4798      	blx	r3
}
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	46bd      	mov	sp, r7
    389a:	b002      	add	sp, #8
    389c:	bd80      	pop	{r7, pc}
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	0000c05c 	.word	0x0000c05c
    38a4:	0000c06c 	.word	0x0000c06c
    38a8:	00009c85 	.word	0x00009c85

000038ac <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	b08d      	sub	sp, #52	; 0x34
    38b0:	af04      	add	r7, sp, #16
    38b2:	6078      	str	r0, [r7, #4]
    38b4:	6039      	str	r1, [r7, #0]
	enum status_code i2c_status;
	
	for(int i = 0; i < num_readings; i++) {
    38b6:	2300      	movs	r3, #0
    38b8:	61fb      	str	r3, [r7, #28]
    38ba:	e137      	b.n	3b2c <handle_read_gyro+0x280>
		// Wake up the device
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    38bc:	4ba0      	ldr	r3, [pc, #640]	; (3b40 <handle_read_gyro+0x294>)
    38be:	2268      	movs	r2, #104	; 0x68
    38c0:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    38c2:	4b9f      	ldr	r3, [pc, #636]	; (3b40 <handle_read_gyro+0x294>)
    38c4:	2201      	movs	r2, #1
    38c6:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    38c8:	4b9e      	ldr	r3, [pc, #632]	; (3b44 <handle_read_gyro+0x298>)
    38ca:	226b      	movs	r2, #107	; 0x6b
    38cc:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    38ce:	4b9c      	ldr	r3, [pc, #624]	; (3b40 <handle_read_gyro+0x294>)
    38d0:	4a9c      	ldr	r2, [pc, #624]	; (3b44 <handle_read_gyro+0x298>)
    38d2:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    38d4:	4b9c      	ldr	r3, [pc, #624]	; (3b48 <handle_read_gyro+0x29c>)
    38d6:	2268      	movs	r2, #104	; 0x68
    38d8:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    38da:	231b      	movs	r3, #27
    38dc:	18fc      	adds	r4, r7, r3
    38de:	4a98      	ldr	r2, [pc, #608]	; (3b40 <handle_read_gyro+0x294>)
    38e0:	4b9a      	ldr	r3, [pc, #616]	; (3b4c <handle_read_gyro+0x2a0>)
    38e2:	0011      	movs	r1, r2
    38e4:	0018      	movs	r0, r3
    38e6:	4b9a      	ldr	r3, [pc, #616]	; (3b50 <handle_read_gyro+0x2a4>)
    38e8:	4798      	blx	r3
    38ea:	0003      	movs	r3, r0
    38ec:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    38ee:	231b      	movs	r3, #27
    38f0:	18fb      	adds	r3, r7, r3
    38f2:	781b      	ldrb	r3, [r3, #0]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d109      	bne.n	390c <handle_read_gyro+0x60>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    38f8:	231b      	movs	r3, #27
    38fa:	18fc      	adds	r4, r7, r3
    38fc:	4a92      	ldr	r2, [pc, #584]	; (3b48 <handle_read_gyro+0x29c>)
    38fe:	4b93      	ldr	r3, [pc, #588]	; (3b4c <handle_read_gyro+0x2a0>)
    3900:	0011      	movs	r1, r2
    3902:	0018      	movs	r0, r3
    3904:	4b93      	ldr	r3, [pc, #588]	; (3b54 <handle_read_gyro+0x2a8>)
    3906:	4798      	blx	r3
    3908:	0003      	movs	r3, r0
    390a:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    390c:	4b8f      	ldr	r3, [pc, #572]	; (3b4c <handle_read_gyro+0x2a0>)
    390e:	0018      	movs	r0, r3
    3910:	4b91      	ldr	r3, [pc, #580]	; (3b58 <handle_read_gyro+0x2ac>)
    3912:	4798      	blx	r3
	
		rd_packet.data[0] = rd_packet.data[0] & (0 << 6);
    3914:	4b8c      	ldr	r3, [pc, #560]	; (3b48 <handle_read_gyro+0x29c>)
    3916:	685b      	ldr	r3, [r3, #4]
    3918:	2200      	movs	r2, #0
    391a:	701a      	strb	r2, [r3, #0]
	
		// Write new sleep bit (off)
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    391c:	4b88      	ldr	r3, [pc, #544]	; (3b40 <handle_read_gyro+0x294>)
    391e:	2268      	movs	r2, #104	; 0x68
    3920:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    3922:	4b87      	ldr	r3, [pc, #540]	; (3b40 <handle_read_gyro+0x294>)
    3924:	2202      	movs	r2, #2
    3926:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    3928:	4b86      	ldr	r3, [pc, #536]	; (3b44 <handle_read_gyro+0x298>)
    392a:	226b      	movs	r2, #107	; 0x6b
    392c:	701a      	strb	r2, [r3, #0]
		wr_buffer[1]          = rd_packet.data[0];
    392e:	4b86      	ldr	r3, [pc, #536]	; (3b48 <handle_read_gyro+0x29c>)
    3930:	685b      	ldr	r3, [r3, #4]
    3932:	781a      	ldrb	r2, [r3, #0]
    3934:	4b83      	ldr	r3, [pc, #524]	; (3b44 <handle_read_gyro+0x298>)
    3936:	705a      	strb	r2, [r3, #1]
		wr_packet.data        = wr_buffer;
    3938:	4b81      	ldr	r3, [pc, #516]	; (3b40 <handle_read_gyro+0x294>)
    393a:	4a82      	ldr	r2, [pc, #520]	; (3b44 <handle_read_gyro+0x298>)
    393c:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    393e:	4b82      	ldr	r3, [pc, #520]	; (3b48 <handle_read_gyro+0x29c>)
    3940:	2268      	movs	r2, #104	; 0x68
    3942:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    3944:	231b      	movs	r3, #27
    3946:	18fc      	adds	r4, r7, r3
    3948:	4a7d      	ldr	r2, [pc, #500]	; (3b40 <handle_read_gyro+0x294>)
    394a:	4b80      	ldr	r3, [pc, #512]	; (3b4c <handle_read_gyro+0x2a0>)
    394c:	0011      	movs	r1, r2
    394e:	0018      	movs	r0, r3
    3950:	4b7f      	ldr	r3, [pc, #508]	; (3b50 <handle_read_gyro+0x2a4>)
    3952:	4798      	blx	r3
    3954:	0003      	movs	r3, r0
    3956:	7023      	strb	r3, [r4, #0]
		i2c_master_send_stop(&i2c_master_instance);
    3958:	4b7c      	ldr	r3, [pc, #496]	; (3b4c <handle_read_gyro+0x2a0>)
    395a:	0018      	movs	r0, r3
    395c:	4b7e      	ldr	r3, [pc, #504]	; (3b58 <handle_read_gyro+0x2ac>)
    395e:	4798      	blx	r3
	
		// Read back the Power management Register 
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    3960:	4b77      	ldr	r3, [pc, #476]	; (3b40 <handle_read_gyro+0x294>)
    3962:	2268      	movs	r2, #104	; 0x68
    3964:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    3966:	4b76      	ldr	r3, [pc, #472]	; (3b40 <handle_read_gyro+0x294>)
    3968:	2201      	movs	r2, #1
    396a:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x6B;
    396c:	4b75      	ldr	r3, [pc, #468]	; (3b44 <handle_read_gyro+0x298>)
    396e:	226b      	movs	r2, #107	; 0x6b
    3970:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    3972:	4b73      	ldr	r3, [pc, #460]	; (3b40 <handle_read_gyro+0x294>)
    3974:	4a73      	ldr	r2, [pc, #460]	; (3b44 <handle_read_gyro+0x298>)
    3976:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    3978:	4b73      	ldr	r3, [pc, #460]	; (3b48 <handle_read_gyro+0x29c>)
    397a:	2268      	movs	r2, #104	; 0x68
    397c:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    397e:	231b      	movs	r3, #27
    3980:	18fc      	adds	r4, r7, r3
    3982:	4a6f      	ldr	r2, [pc, #444]	; (3b40 <handle_read_gyro+0x294>)
    3984:	4b71      	ldr	r3, [pc, #452]	; (3b4c <handle_read_gyro+0x2a0>)
    3986:	0011      	movs	r1, r2
    3988:	0018      	movs	r0, r3
    398a:	4b71      	ldr	r3, [pc, #452]	; (3b50 <handle_read_gyro+0x2a4>)
    398c:	4798      	blx	r3
    398e:	0003      	movs	r3, r0
    3990:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    3992:	231b      	movs	r3, #27
    3994:	18fb      	adds	r3, r7, r3
    3996:	781b      	ldrb	r3, [r3, #0]
    3998:	2b00      	cmp	r3, #0
    399a:	d109      	bne.n	39b0 <handle_read_gyro+0x104>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    399c:	231b      	movs	r3, #27
    399e:	18fc      	adds	r4, r7, r3
    39a0:	4a69      	ldr	r2, [pc, #420]	; (3b48 <handle_read_gyro+0x29c>)
    39a2:	4b6a      	ldr	r3, [pc, #424]	; (3b4c <handle_read_gyro+0x2a0>)
    39a4:	0011      	movs	r1, r2
    39a6:	0018      	movs	r0, r3
    39a8:	4b6a      	ldr	r3, [pc, #424]	; (3b54 <handle_read_gyro+0x2a8>)
    39aa:	4798      	blx	r3
    39ac:	0003      	movs	r3, r0
    39ae:	7023      	strb	r3, [r4, #0]
		}
		i2c_master_send_stop(&i2c_master_instance);
    39b0:	4b66      	ldr	r3, [pc, #408]	; (3b4c <handle_read_gyro+0x2a0>)
    39b2:	0018      	movs	r0, r3
    39b4:	4b68      	ldr	r3, [pc, #416]	; (3b58 <handle_read_gyro+0x2ac>)
    39b6:	4798      	blx	r3
		
		// Get the data.
		wr_packet.address     = MPU_6050_SLAVE_ADDR;
    39b8:	4b61      	ldr	r3, [pc, #388]	; (3b40 <handle_read_gyro+0x294>)
    39ba:	2268      	movs	r2, #104	; 0x68
    39bc:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    39be:	4b60      	ldr	r3, [pc, #384]	; (3b40 <handle_read_gyro+0x294>)
    39c0:	2201      	movs	r2, #1
    39c2:	805a      	strh	r2, [r3, #2]
		wr_buffer[0]          = 0x3B; //MPU6050_RA_ACCEL_XOUT_H;
    39c4:	4b5f      	ldr	r3, [pc, #380]	; (3b44 <handle_read_gyro+0x298>)
    39c6:	223b      	movs	r2, #59	; 0x3b
    39c8:	701a      	strb	r2, [r3, #0]
		wr_packet.data        = wr_buffer;
    39ca:	4b5d      	ldr	r3, [pc, #372]	; (3b40 <handle_read_gyro+0x294>)
    39cc:	4a5d      	ldr	r2, [pc, #372]	; (3b44 <handle_read_gyro+0x298>)
    39ce:	605a      	str	r2, [r3, #4]
		rd_packet.address = MPU_6050_SLAVE_ADDR;
    39d0:	4b5d      	ldr	r3, [pc, #372]	; (3b48 <handle_read_gyro+0x29c>)
    39d2:	2268      	movs	r2, #104	; 0x68
    39d4:	801a      	strh	r2, [r3, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    39d6:	231b      	movs	r3, #27
    39d8:	18fc      	adds	r4, r7, r3
    39da:	4a59      	ldr	r2, [pc, #356]	; (3b40 <handle_read_gyro+0x294>)
    39dc:	4b5b      	ldr	r3, [pc, #364]	; (3b4c <handle_read_gyro+0x2a0>)
    39de:	0011      	movs	r1, r2
    39e0:	0018      	movs	r0, r3
    39e2:	4b5b      	ldr	r3, [pc, #364]	; (3b50 <handle_read_gyro+0x2a4>)
    39e4:	4798      	blx	r3
    39e6:	0003      	movs	r3, r0
    39e8:	7023      	strb	r3, [r4, #0]
		if( i2c_status == STATUS_OK ) {
    39ea:	231b      	movs	r3, #27
    39ec:	18fb      	adds	r3, r7, r3
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d109      	bne.n	3a08 <handle_read_gyro+0x15c>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    39f4:	231b      	movs	r3, #27
    39f6:	18fc      	adds	r4, r7, r3
    39f8:	4a53      	ldr	r2, [pc, #332]	; (3b48 <handle_read_gyro+0x29c>)
    39fa:	4b54      	ldr	r3, [pc, #336]	; (3b4c <handle_read_gyro+0x2a0>)
    39fc:	0011      	movs	r1, r2
    39fe:	0018      	movs	r0, r3
    3a00:	4b54      	ldr	r3, [pc, #336]	; (3b54 <handle_read_gyro+0x2a8>)
    3a02:	4798      	blx	r3
    3a04:	0003      	movs	r3, r0
    3a06:	7023      	strb	r3, [r4, #0]
		}
	
		int16_t ax, ay, az, gx, gy, gz;
		ax = (((int16_t)rd_packet.data[0]) << 8) | rd_packet.data[1];
    3a08:	4b4f      	ldr	r3, [pc, #316]	; (3b48 <handle_read_gyro+0x29c>)
    3a0a:	685b      	ldr	r3, [r3, #4]
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	021b      	lsls	r3, r3, #8
    3a10:	b219      	sxth	r1, r3
    3a12:	4b4d      	ldr	r3, [pc, #308]	; (3b48 <handle_read_gyro+0x29c>)
    3a14:	685b      	ldr	r3, [r3, #4]
    3a16:	3301      	adds	r3, #1
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	b21a      	sxth	r2, r3
    3a1c:	2318      	movs	r3, #24
    3a1e:	18fb      	adds	r3, r7, r3
    3a20:	430a      	orrs	r2, r1
    3a22:	801a      	strh	r2, [r3, #0]
		ay = (((int16_t)rd_packet.data[2]) << 8) | rd_packet.data[3];
    3a24:	4b48      	ldr	r3, [pc, #288]	; (3b48 <handle_read_gyro+0x29c>)
    3a26:	685b      	ldr	r3, [r3, #4]
    3a28:	3302      	adds	r3, #2
    3a2a:	781b      	ldrb	r3, [r3, #0]
    3a2c:	021b      	lsls	r3, r3, #8
    3a2e:	b219      	sxth	r1, r3
    3a30:	4b45      	ldr	r3, [pc, #276]	; (3b48 <handle_read_gyro+0x29c>)
    3a32:	685b      	ldr	r3, [r3, #4]
    3a34:	3303      	adds	r3, #3
    3a36:	781b      	ldrb	r3, [r3, #0]
    3a38:	b21a      	sxth	r2, r3
    3a3a:	2316      	movs	r3, #22
    3a3c:	18fb      	adds	r3, r7, r3
    3a3e:	430a      	orrs	r2, r1
    3a40:	801a      	strh	r2, [r3, #0]
		az = (((int16_t)rd_packet.data[4]) << 8) | rd_packet.data[5];
    3a42:	4b41      	ldr	r3, [pc, #260]	; (3b48 <handle_read_gyro+0x29c>)
    3a44:	685b      	ldr	r3, [r3, #4]
    3a46:	3304      	adds	r3, #4
    3a48:	781b      	ldrb	r3, [r3, #0]
    3a4a:	021b      	lsls	r3, r3, #8
    3a4c:	b219      	sxth	r1, r3
    3a4e:	4b3e      	ldr	r3, [pc, #248]	; (3b48 <handle_read_gyro+0x29c>)
    3a50:	685b      	ldr	r3, [r3, #4]
    3a52:	3305      	adds	r3, #5
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	b21a      	sxth	r2, r3
    3a58:	2314      	movs	r3, #20
    3a5a:	18fb      	adds	r3, r7, r3
    3a5c:	430a      	orrs	r2, r1
    3a5e:	801a      	strh	r2, [r3, #0]
		gx = (((int16_t)rd_packet.data[8]) << 8) | rd_packet.data[9];
    3a60:	4b39      	ldr	r3, [pc, #228]	; (3b48 <handle_read_gyro+0x29c>)
    3a62:	685b      	ldr	r3, [r3, #4]
    3a64:	3308      	adds	r3, #8
    3a66:	781b      	ldrb	r3, [r3, #0]
    3a68:	021b      	lsls	r3, r3, #8
    3a6a:	b219      	sxth	r1, r3
    3a6c:	4b36      	ldr	r3, [pc, #216]	; (3b48 <handle_read_gyro+0x29c>)
    3a6e:	685b      	ldr	r3, [r3, #4]
    3a70:	3309      	adds	r3, #9
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	b21a      	sxth	r2, r3
    3a76:	2312      	movs	r3, #18
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	430a      	orrs	r2, r1
    3a7c:	801a      	strh	r2, [r3, #0]
		gy = (((int16_t)rd_packet.data[10]) << 8) | rd_packet.data[11];
    3a7e:	4b32      	ldr	r3, [pc, #200]	; (3b48 <handle_read_gyro+0x29c>)
    3a80:	685b      	ldr	r3, [r3, #4]
    3a82:	330a      	adds	r3, #10
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	021b      	lsls	r3, r3, #8
    3a88:	b219      	sxth	r1, r3
    3a8a:	4b2f      	ldr	r3, [pc, #188]	; (3b48 <handle_read_gyro+0x29c>)
    3a8c:	685b      	ldr	r3, [r3, #4]
    3a8e:	330b      	adds	r3, #11
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	b21a      	sxth	r2, r3
    3a94:	2310      	movs	r3, #16
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	430a      	orrs	r2, r1
    3a9a:	801a      	strh	r2, [r3, #0]
		gz = (((int16_t)rd_packet.data[12]) << 8) | rd_packet.data[13];
    3a9c:	4b2a      	ldr	r3, [pc, #168]	; (3b48 <handle_read_gyro+0x29c>)
    3a9e:	685b      	ldr	r3, [r3, #4]
    3aa0:	330c      	adds	r3, #12
    3aa2:	781b      	ldrb	r3, [r3, #0]
    3aa4:	021b      	lsls	r3, r3, #8
    3aa6:	b219      	sxth	r1, r3
    3aa8:	4b27      	ldr	r3, [pc, #156]	; (3b48 <handle_read_gyro+0x29c>)
    3aaa:	685b      	ldr	r3, [r3, #4]
    3aac:	330d      	adds	r3, #13
    3aae:	781b      	ldrb	r3, [r3, #0]
    3ab0:	b21a      	sxth	r2, r3
    3ab2:	230e      	movs	r3, #14
    3ab4:	18fb      	adds	r3, r7, r3
    3ab6:	430a      	orrs	r2, r1
    3ab8:	801a      	strh	r2, [r3, #0]
	
		printf("===Reading %d===\r\n", i);
    3aba:	69fa      	ldr	r2, [r7, #28]
    3abc:	4b27      	ldr	r3, [pc, #156]	; (3b5c <handle_read_gyro+0x2b0>)
    3abe:	0011      	movs	r1, r2
    3ac0:	0018      	movs	r0, r3
    3ac2:	4b27      	ldr	r3, [pc, #156]	; (3b60 <handle_read_gyro+0x2b4>)
    3ac4:	4798      	blx	r3
		printf("Ax = %d\r\nAy = %d\r\nAz = %d\r\nGx = %d\r\nGy = %d\r\nGz = %d\r\n", ax, ay, az, gx, gy, gz);
    3ac6:	2318      	movs	r3, #24
    3ac8:	18fb      	adds	r3, r7, r3
    3aca:	2400      	movs	r4, #0
    3acc:	5f1c      	ldrsh	r4, [r3, r4]
    3ace:	2316      	movs	r3, #22
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	2500      	movs	r5, #0
    3ad4:	5f5d      	ldrsh	r5, [r3, r5]
    3ad6:	2314      	movs	r3, #20
    3ad8:	18fb      	adds	r3, r7, r3
    3ada:	2600      	movs	r6, #0
    3adc:	5f9e      	ldrsh	r6, [r3, r6]
    3ade:	2312      	movs	r3, #18
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	2200      	movs	r2, #0
    3ae4:	5e9b      	ldrsh	r3, [r3, r2]
    3ae6:	2210      	movs	r2, #16
    3ae8:	18ba      	adds	r2, r7, r2
    3aea:	2100      	movs	r1, #0
    3aec:	5e52      	ldrsh	r2, [r2, r1]
    3aee:	210e      	movs	r1, #14
    3af0:	1879      	adds	r1, r7, r1
    3af2:	2000      	movs	r0, #0
    3af4:	5e09      	ldrsh	r1, [r1, r0]
    3af6:	481b      	ldr	r0, [pc, #108]	; (3b64 <handle_read_gyro+0x2b8>)
    3af8:	9102      	str	r1, [sp, #8]
    3afa:	9201      	str	r2, [sp, #4]
    3afc:	9300      	str	r3, [sp, #0]
    3afe:	0033      	movs	r3, r6
    3b00:	002a      	movs	r2, r5
    3b02:	0021      	movs	r1, r4
    3b04:	4c16      	ldr	r4, [pc, #88]	; (3b60 <handle_read_gyro+0x2b4>)
    3b06:	47a0      	blx	r4
		i2c_master_send_stop(&i2c_master_instance);
    3b08:	4b10      	ldr	r3, [pc, #64]	; (3b4c <handle_read_gyro+0x2a0>)
    3b0a:	0018      	movs	r0, r3
    3b0c:	4b12      	ldr	r3, [pc, #72]	; (3b58 <handle_read_gyro+0x2ac>)
    3b0e:	4798      	blx	r3
		delay_ms(interval_ms);
    3b10:	683b      	ldr	r3, [r7, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d004      	beq.n	3b20 <handle_read_gyro+0x274>
    3b16:	683b      	ldr	r3, [r7, #0]
    3b18:	0018      	movs	r0, r3
    3b1a:	4b13      	ldr	r3, [pc, #76]	; (3b68 <handle_read_gyro+0x2bc>)
    3b1c:	4798      	blx	r3
    3b1e:	e002      	b.n	3b26 <handle_read_gyro+0x27a>
    3b20:	2001      	movs	r0, #1
    3b22:	4b12      	ldr	r3, [pc, #72]	; (3b6c <handle_read_gyro+0x2c0>)
    3b24:	4798      	blx	r3
	for(int i = 0; i < num_readings; i++) {
    3b26:	69fb      	ldr	r3, [r7, #28]
    3b28:	3301      	adds	r3, #1
    3b2a:	61fb      	str	r3, [r7, #28]
    3b2c:	69fa      	ldr	r2, [r7, #28]
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	429a      	cmp	r2, r3
    3b32:	da00      	bge.n	3b36 <handle_read_gyro+0x28a>
    3b34:	e6c2      	b.n	38bc <handle_read_gyro+0x10>
	}
}
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	46bd      	mov	sp, r7
    3b3a:	b009      	add	sp, #36	; 0x24
    3b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	20000044 	.word	0x20000044
    3b44:	2000003c 	.word	0x2000003c
    3b48:	20000050 	.word	0x20000050
    3b4c:	20000408 	.word	0x20000408
    3b50:	000025bd 	.word	0x000025bd
    3b54:	00002405 	.word	0x00002405
    3b58:	000025fd 	.word	0x000025fd
    3b5c:	0000c080 	.word	0x0000c080
    3b60:	00009c85 	.word	0x00009c85
    3b64:	0000c094 	.word	0x0000c094
    3b68:	00003dc1 	.word	0x00003dc1
    3b6c:	00003d91 	.word	0x00003d91

00003b70 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
    3b70:	b580      	push	{r7, lr}
    3b72:	b082      	sub	sp, #8
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
    3b78:	6039      	str	r1, [r7, #0]
	printf("Use read_gyro!\r\n");
    3b7a:	4b04      	ldr	r3, [pc, #16]	; (3b8c <handle_read_accel+0x1c>)
    3b7c:	0018      	movs	r0, r3
    3b7e:	4b04      	ldr	r3, [pc, #16]	; (3b90 <handle_read_accel+0x20>)
    3b80:	4798      	blx	r3
}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	46bd      	mov	sp, r7
    3b86:	b002      	add	sp, #8
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	0000c0cc 	.word	0x0000c0cc
    3b90:	00009d79 	.word	0x00009d79

00003b94 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
    3b94:	b580      	push	{r7, lr}
    3b96:	b084      	sub	sp, #16
    3b98:	af00      	add	r7, sp, #0
    3b9a:	0002      	movs	r2, r0
    3b9c:	6039      	str	r1, [r7, #0]
    3b9e:	1dfb      	adds	r3, r7, #7
    3ba0:	701a      	strb	r2, [r3, #0]
	disable_adc();
    3ba2:	4b0f      	ldr	r3, [pc, #60]	; (3be0 <handle_adc_get+0x4c>)
    3ba4:	4798      	blx	r3
	configure_adc();
    3ba6:	4b0f      	ldr	r3, [pc, #60]	; (3be4 <handle_adc_get+0x50>)
    3ba8:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    3baa:	4b0f      	ldr	r3, [pc, #60]	; (3be8 <handle_adc_get+0x54>)
    3bac:	0018      	movs	r0, r3
    3bae:	4b0f      	ldr	r3, [pc, #60]	; (3bec <handle_adc_get+0x58>)
    3bb0:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    3bb2:	230e      	movs	r3, #14
    3bb4:	18fa      	adds	r2, r7, r3
    3bb6:	4b0c      	ldr	r3, [pc, #48]	; (3be8 <handle_adc_get+0x54>)
    3bb8:	0011      	movs	r1, r2
    3bba:	0018      	movs	r0, r3
    3bbc:	4b0c      	ldr	r3, [pc, #48]	; (3bf0 <handle_adc_get+0x5c>)
    3bbe:	4798      	blx	r3
    3bc0:	0003      	movs	r3, r0
    3bc2:	2b05      	cmp	r3, #5
    3bc4:	d0f5      	beq.n	3bb2 <handle_adc_get+0x1e>
	
	printf("ADC Result: %d\r\n", result);
    3bc6:	230e      	movs	r3, #14
    3bc8:	18fb      	adds	r3, r7, r3
    3bca:	881b      	ldrh	r3, [r3, #0]
    3bcc:	001a      	movs	r2, r3
    3bce:	4b09      	ldr	r3, [pc, #36]	; (3bf4 <handle_adc_get+0x60>)
    3bd0:	0011      	movs	r1, r2
    3bd2:	0018      	movs	r0, r3
    3bd4:	4b08      	ldr	r3, [pc, #32]	; (3bf8 <handle_adc_get+0x64>)
    3bd6:	4798      	blx	r3
}
    3bd8:	46c0      	nop			; (mov r8, r8)
    3bda:	46bd      	mov	sp, r7
    3bdc:	b004      	add	sp, #16
    3bde:	bd80      	pop	{r7, pc}
    3be0:	000030e5 	.word	0x000030e5
    3be4:	00003101 	.word	0x00003101
    3be8:	2000046c 	.word	0x2000046c
    3bec:	00002d9d 	.word	0x00002d9d
    3bf0:	00002de5 	.word	0x00002de5
    3bf4:	0000c0dc 	.word	0x0000c0dc
    3bf8:	00009c85 	.word	0x00009c85

00003bfc <handle_mcu_temp>:

void handle_mcu_temp() {
    3bfc:	b580      	push	{r7, lr}
    3bfe:	b082      	sub	sp, #8
    3c00:	af00      	add	r7, sp, #0
	disable_adc();
    3c02:	4b12      	ldr	r3, [pc, #72]	; (3c4c <handle_mcu_temp+0x50>)
    3c04:	4798      	blx	r3
	
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
    3c06:	2000      	movs	r0, #0
    3c08:	4b11      	ldr	r3, [pc, #68]	; (3c50 <handle_mcu_temp+0x54>)
    3c0a:	4798      	blx	r3
	
	configure_adc_temp();
    3c0c:	4b11      	ldr	r3, [pc, #68]	; (3c54 <handle_mcu_temp+0x58>)
    3c0e:	4798      	blx	r3
	
	adc_start_conversion(&adc_inst);
    3c10:	4b11      	ldr	r3, [pc, #68]	; (3c58 <handle_mcu_temp+0x5c>)
    3c12:	0018      	movs	r0, r3
    3c14:	4b11      	ldr	r3, [pc, #68]	; (3c5c <handle_mcu_temp+0x60>)
    3c16:	4798      	blx	r3
	uint16_t result;
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
    3c18:	1cba      	adds	r2, r7, #2
    3c1a:	4b0f      	ldr	r3, [pc, #60]	; (3c58 <handle_mcu_temp+0x5c>)
    3c1c:	0011      	movs	r1, r2
    3c1e:	0018      	movs	r0, r3
    3c20:	4b0f      	ldr	r3, [pc, #60]	; (3c60 <handle_mcu_temp+0x64>)
    3c22:	4798      	blx	r3
    3c24:	0003      	movs	r3, r0
    3c26:	2b05      	cmp	r3, #5
    3c28:	d0f6      	beq.n	3c18 <handle_mcu_temp+0x1c>
	
	int temp = calculate_temperature(result);
    3c2a:	1cbb      	adds	r3, r7, #2
    3c2c:	881b      	ldrh	r3, [r3, #0]
    3c2e:	0018      	movs	r0, r3
    3c30:	4b0c      	ldr	r3, [pc, #48]	; (3c64 <handle_mcu_temp+0x68>)
    3c32:	4798      	blx	r3
    3c34:	0003      	movs	r3, r0
    3c36:	607b      	str	r3, [r7, #4]
	
	printf("Temperature Result: %d \r\n", temp);
    3c38:	687a      	ldr	r2, [r7, #4]
    3c3a:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <handle_mcu_temp+0x6c>)
    3c3c:	0011      	movs	r1, r2
    3c3e:	0018      	movs	r0, r3
    3c40:	4b0a      	ldr	r3, [pc, #40]	; (3c6c <handle_mcu_temp+0x70>)
    3c42:	4798      	blx	r3
}
    3c44:	46c0      	nop			; (mov r8, r8)
    3c46:	46bd      	mov	sp, r7
    3c48:	b002      	add	sp, #8
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	000030e5 	.word	0x000030e5
    3c50:	00002b71 	.word	0x00002b71
    3c54:	000001c9 	.word	0x000001c9
    3c58:	2000046c 	.word	0x2000046c
    3c5c:	00002d9d 	.word	0x00002d9d
    3c60:	00002de5 	.word	0x00002de5
    3c64:	00000235 	.word	0x00000235
    3c68:	0000c0f0 	.word	0x0000c0f0
    3c6c:	00009c85 	.word	0x00009c85

00003c70 <handle_i2c_scan>:

void handle_i2c_scan() {
    3c70:	b590      	push	{r4, r7, lr}
    3c72:	b083      	sub	sp, #12
    3c74:	af00      	add	r7, sp, #0
	
	  for(char slave_address = 0; slave_address <= 127; slave_address++) {
    3c76:	1dfb      	adds	r3, r7, #7
    3c78:	2200      	movs	r2, #0
    3c7a:	701a      	strb	r2, [r3, #0]
    3c7c:	e02a      	b.n	3cd4 <handle_i2c_scan+0x64>
		  enum status_code i2c_status;
		  wr_packet.address     = slave_address;
    3c7e:	1dfb      	adds	r3, r7, #7
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	b29a      	uxth	r2, r3
    3c84:	4b18      	ldr	r3, [pc, #96]	; (3ce8 <handle_i2c_scan+0x78>)
    3c86:	801a      	strh	r2, [r3, #0]
		  wr_packet.data_length = 1;
    3c88:	4b17      	ldr	r3, [pc, #92]	; (3ce8 <handle_i2c_scan+0x78>)
    3c8a:	2201      	movs	r2, #1
    3c8c:	805a      	strh	r2, [r3, #2]
		  wr_buffer[0]          = 0x00;
    3c8e:	4b17      	ldr	r3, [pc, #92]	; (3cec <handle_i2c_scan+0x7c>)
    3c90:	2200      	movs	r2, #0
    3c92:	701a      	strb	r2, [r3, #0]
		  wr_packet.data        = wr_buffer;
    3c94:	4b14      	ldr	r3, [pc, #80]	; (3ce8 <handle_i2c_scan+0x78>)
    3c96:	4a15      	ldr	r2, [pc, #84]	; (3cec <handle_i2c_scan+0x7c>)
    3c98:	605a      	str	r2, [r3, #4]
		  i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    3c9a:	1dbc      	adds	r4, r7, #6
    3c9c:	4a12      	ldr	r2, [pc, #72]	; (3ce8 <handle_i2c_scan+0x78>)
    3c9e:	4b14      	ldr	r3, [pc, #80]	; (3cf0 <handle_i2c_scan+0x80>)
    3ca0:	0011      	movs	r1, r2
    3ca2:	0018      	movs	r0, r3
    3ca4:	4b13      	ldr	r3, [pc, #76]	; (3cf4 <handle_i2c_scan+0x84>)
    3ca6:	4798      	blx	r3
    3ca8:	0003      	movs	r3, r0
    3caa:	7023      	strb	r3, [r4, #0]
		  if( i2c_status == STATUS_OK ) {
    3cac:	1dbb      	adds	r3, r7, #6
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d106      	bne.n	3cc2 <handle_i2c_scan+0x52>
			  //i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
			 printf("The slave address is %.2x \r\n", slave_address);
    3cb4:	1dfb      	adds	r3, r7, #7
    3cb6:	781a      	ldrb	r2, [r3, #0]
    3cb8:	4b0f      	ldr	r3, [pc, #60]	; (3cf8 <handle_i2c_scan+0x88>)
    3cba:	0011      	movs	r1, r2
    3cbc:	0018      	movs	r0, r3
    3cbe:	4b0f      	ldr	r3, [pc, #60]	; (3cfc <handle_i2c_scan+0x8c>)
    3cc0:	4798      	blx	r3
		  }
		  i2c_master_send_stop(&i2c_master_instance);
    3cc2:	4b0b      	ldr	r3, [pc, #44]	; (3cf0 <handle_i2c_scan+0x80>)
    3cc4:	0018      	movs	r0, r3
    3cc6:	4b0e      	ldr	r3, [pc, #56]	; (3d00 <handle_i2c_scan+0x90>)
    3cc8:	4798      	blx	r3
	  for(char slave_address = 0; slave_address <= 127; slave_address++) {
    3cca:	1dfb      	adds	r3, r7, #7
    3ccc:	781a      	ldrb	r2, [r3, #0]
    3cce:	1dfb      	adds	r3, r7, #7
    3cd0:	3201      	adds	r2, #1
    3cd2:	701a      	strb	r2, [r3, #0]
    3cd4:	1dfb      	adds	r3, r7, #7
    3cd6:	781b      	ldrb	r3, [r3, #0]
    3cd8:	b25b      	sxtb	r3, r3
    3cda:	2b00      	cmp	r3, #0
    3cdc:	dacf      	bge.n	3c7e <handle_i2c_scan+0xe>
	 }
	
}
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	46bd      	mov	sp, r7
    3ce2:	b003      	add	sp, #12
    3ce4:	bd90      	pop	{r4, r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	20000044 	.word	0x20000044
    3cec:	2000003c 	.word	0x2000003c
    3cf0:	20000408 	.word	0x20000408
    3cf4:	000025bd 	.word	0x000025bd
    3cf8:	0000c10c 	.word	0x0000c10c
    3cfc:	00009c85 	.word	0x00009c85
    3d00:	000025fd 	.word	0x000025fd

00003d04 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b082      	sub	sp, #8
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d00c      	beq.n	3d2c <delay_cycles+0x28>
		SysTick->LOAD = n;
    3d12:	4b08      	ldr	r3, [pc, #32]	; (3d34 <delay_cycles+0x30>)
    3d14:	687a      	ldr	r2, [r7, #4]
    3d16:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    3d18:	4b06      	ldr	r3, [pc, #24]	; (3d34 <delay_cycles+0x30>)
    3d1a:	2200      	movs	r2, #0
    3d1c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	4b04      	ldr	r3, [pc, #16]	; (3d34 <delay_cycles+0x30>)
    3d22:	681a      	ldr	r2, [r3, #0]
    3d24:	2380      	movs	r3, #128	; 0x80
    3d26:	025b      	lsls	r3, r3, #9
    3d28:	4013      	ands	r3, r2
    3d2a:	d0f9      	beq.n	3d20 <delay_cycles+0x1c>
		};
	}
}
    3d2c:	46c0      	nop			; (mov r8, r8)
    3d2e:	46bd      	mov	sp, r7
    3d30:	b002      	add	sp, #8
    3d32:	bd80      	pop	{r7, pc}
    3d34:	e000e010 	.word	0xe000e010

00003d38 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    3d3c:	2000      	movs	r0, #0
    3d3e:	4b0f      	ldr	r3, [pc, #60]	; (3d7c <delay_init+0x44>)
    3d40:	4798      	blx	r3
    3d42:	0002      	movs	r2, r0
    3d44:	4b0e      	ldr	r3, [pc, #56]	; (3d80 <delay_init+0x48>)
    3d46:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    3d48:	4b0d      	ldr	r3, [pc, #52]	; (3d80 <delay_init+0x48>)
    3d4a:	6818      	ldr	r0, [r3, #0]
    3d4c:	4b0d      	ldr	r3, [pc, #52]	; (3d84 <delay_init+0x4c>)
    3d4e:	22fa      	movs	r2, #250	; 0xfa
    3d50:	0091      	lsls	r1, r2, #2
    3d52:	4798      	blx	r3
    3d54:	0003      	movs	r3, r0
    3d56:	001a      	movs	r2, r3
    3d58:	4b09      	ldr	r3, [pc, #36]	; (3d80 <delay_init+0x48>)
    3d5a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    3d5c:	4b08      	ldr	r3, [pc, #32]	; (3d80 <delay_init+0x48>)
    3d5e:	6818      	ldr	r0, [r3, #0]
    3d60:	4b08      	ldr	r3, [pc, #32]	; (3d84 <delay_init+0x4c>)
    3d62:	22fa      	movs	r2, #250	; 0xfa
    3d64:	0091      	lsls	r1, r2, #2
    3d66:	4798      	blx	r3
    3d68:	0003      	movs	r3, r0
    3d6a:	001a      	movs	r2, r3
    3d6c:	4b06      	ldr	r3, [pc, #24]	; (3d88 <delay_init+0x50>)
    3d6e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3d70:	4b06      	ldr	r3, [pc, #24]	; (3d8c <delay_init+0x54>)
    3d72:	2205      	movs	r2, #5
    3d74:	601a      	str	r2, [r3, #0]
}
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	46bd      	mov	sp, r7
    3d7a:	bd80      	pop	{r7, pc}
    3d7c:	00006f89 	.word	0x00006f89
    3d80:	2000005c 	.word	0x2000005c
    3d84:	00008005 	.word	0x00008005
    3d88:	20000060 	.word	0x20000060
    3d8c:	e000e010 	.word	0xe000e010

00003d90 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b082      	sub	sp, #8
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
	while (n--) {
    3d98:	e004      	b.n	3da4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    3d9a:	4b07      	ldr	r3, [pc, #28]	; (3db8 <delay_cycles_us+0x28>)
    3d9c:	681b      	ldr	r3, [r3, #0]
    3d9e:	0018      	movs	r0, r3
    3da0:	4b06      	ldr	r3, [pc, #24]	; (3dbc <delay_cycles_us+0x2c>)
    3da2:	4798      	blx	r3
	while (n--) {
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	1e5a      	subs	r2, r3, #1
    3da8:	607a      	str	r2, [r7, #4]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d1f5      	bne.n	3d9a <delay_cycles_us+0xa>
	}
}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	46bd      	mov	sp, r7
    3db2:	b002      	add	sp, #8
    3db4:	bd80      	pop	{r7, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	20000060 	.word	0x20000060
    3dbc:	00003d05 	.word	0x00003d05

00003dc0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	b082      	sub	sp, #8
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
	while (n--) {
    3dc8:	e004      	b.n	3dd4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    3dca:	4b07      	ldr	r3, [pc, #28]	; (3de8 <delay_cycles_ms+0x28>)
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	0018      	movs	r0, r3
    3dd0:	4b06      	ldr	r3, [pc, #24]	; (3dec <delay_cycles_ms+0x2c>)
    3dd2:	4798      	blx	r3
	while (n--) {
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	1e5a      	subs	r2, r3, #1
    3dd8:	607a      	str	r2, [r7, #4]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d1f5      	bne.n	3dca <delay_cycles_ms+0xa>
	}
}
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	46bd      	mov	sp, r7
    3de2:	b002      	add	sp, #8
    3de4:	bd80      	pop	{r7, pc}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	2000005c 	.word	0x2000005c
    3dec:	00003d05 	.word	0x00003d05

00003df0 <system_pinmux_get_group_from_gpio_pin>:
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b084      	sub	sp, #16
    3df4:	af00      	add	r7, sp, #0
    3df6:	0002      	movs	r2, r0
    3df8:	1dfb      	adds	r3, r7, #7
    3dfa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3dfc:	230f      	movs	r3, #15
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	1dfa      	adds	r2, r7, #7
    3e02:	7812      	ldrb	r2, [r2, #0]
    3e04:	09d2      	lsrs	r2, r2, #7
    3e06:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e08:	230e      	movs	r3, #14
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	1dfa      	adds	r2, r7, #7
    3e0e:	7812      	ldrb	r2, [r2, #0]
    3e10:	0952      	lsrs	r2, r2, #5
    3e12:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3e14:	4b0d      	ldr	r3, [pc, #52]	; (3e4c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3e16:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3e18:	230f      	movs	r3, #15
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d10f      	bne.n	3e42 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3e22:	230f      	movs	r3, #15
    3e24:	18fb      	adds	r3, r7, r3
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	009b      	lsls	r3, r3, #2
    3e2a:	2210      	movs	r2, #16
    3e2c:	4694      	mov	ip, r2
    3e2e:	44bc      	add	ip, r7
    3e30:	4463      	add	r3, ip
    3e32:	3b08      	subs	r3, #8
    3e34:	681a      	ldr	r2, [r3, #0]
    3e36:	230e      	movs	r3, #14
    3e38:	18fb      	adds	r3, r7, r3
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	01db      	lsls	r3, r3, #7
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	e000      	b.n	3e44 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3e42:	2300      	movs	r3, #0
}
    3e44:	0018      	movs	r0, r3
    3e46:	46bd      	mov	sp, r7
    3e48:	b004      	add	sp, #16
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	41004400 	.word	0x41004400

00003e50 <system_interrupt_enable_global>:
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3e54:	4b04      	ldr	r3, [pc, #16]	; (3e68 <system_interrupt_enable_global+0x18>)
    3e56:	2201      	movs	r2, #1
    3e58:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3e5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3e5e:	b662      	cpsie	i
}
    3e60:	46c0      	nop			; (mov r8, r8)
    3e62:	46bd      	mov	sp, r7
    3e64:	bd80      	pop	{r7, pc}
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	20000064 	.word	0x20000064

00003e6c <port_get_group_from_gpio_pin>:
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	0002      	movs	r2, r0
    3e74:	1dfb      	adds	r3, r7, #7
    3e76:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3e78:	1dfb      	adds	r3, r7, #7
    3e7a:	781b      	ldrb	r3, [r3, #0]
    3e7c:	0018      	movs	r0, r3
    3e7e:	4b03      	ldr	r3, [pc, #12]	; (3e8c <port_get_group_from_gpio_pin+0x20>)
    3e80:	4798      	blx	r3
    3e82:	0003      	movs	r3, r0
}
    3e84:	0018      	movs	r0, r3
    3e86:	46bd      	mov	sp, r7
    3e88:	b002      	add	sp, #8
    3e8a:	bd80      	pop	{r7, pc}
    3e8c:	00003df1 	.word	0x00003df1

00003e90 <port_get_config_defaults>:
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b082      	sub	sp, #8
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	2200      	movs	r2, #0
    3e9c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	2201      	movs	r2, #1
    3ea2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	2200      	movs	r2, #0
    3ea8:	709a      	strb	r2, [r3, #2]
}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	46bd      	mov	sp, r7
    3eae:	b002      	add	sp, #8
    3eb0:	bd80      	pop	{r7, pc}
	...

00003eb4 <port_pin_set_output_level>:
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b084      	sub	sp, #16
    3eb8:	af00      	add	r7, sp, #0
    3eba:	0002      	movs	r2, r0
    3ebc:	1dfb      	adds	r3, r7, #7
    3ebe:	701a      	strb	r2, [r3, #0]
    3ec0:	1dbb      	adds	r3, r7, #6
    3ec2:	1c0a      	adds	r2, r1, #0
    3ec4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3ec6:	1dfb      	adds	r3, r7, #7
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	0018      	movs	r0, r3
    3ecc:	4b0d      	ldr	r3, [pc, #52]	; (3f04 <port_pin_set_output_level+0x50>)
    3ece:	4798      	blx	r3
    3ed0:	0003      	movs	r3, r0
    3ed2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3ed4:	1dfb      	adds	r3, r7, #7
    3ed6:	781b      	ldrb	r3, [r3, #0]
    3ed8:	221f      	movs	r2, #31
    3eda:	4013      	ands	r3, r2
    3edc:	2201      	movs	r2, #1
    3ede:	409a      	lsls	r2, r3
    3ee0:	0013      	movs	r3, r2
    3ee2:	60bb      	str	r3, [r7, #8]
	if (level) {
    3ee4:	1dbb      	adds	r3, r7, #6
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d003      	beq.n	3ef4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	68ba      	ldr	r2, [r7, #8]
    3ef0:	619a      	str	r2, [r3, #24]
}
    3ef2:	e002      	b.n	3efa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	68ba      	ldr	r2, [r7, #8]
    3ef8:	615a      	str	r2, [r3, #20]
}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	46bd      	mov	sp, r7
    3efe:	b004      	add	sp, #16
    3f00:	bd80      	pop	{r7, pc}
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	00003e6d 	.word	0x00003e6d

00003f08 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    3f0e:	1d3b      	adds	r3, r7, #4
    3f10:	0018      	movs	r0, r3
    3f12:	4b10      	ldr	r3, [pc, #64]	; (3f54 <init_chip_pins+0x4c>)
    3f14:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3f16:	1d3b      	adds	r3, r7, #4
    3f18:	2201      	movs	r2, #1
    3f1a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    3f1c:	1d3b      	adds	r3, r7, #4
    3f1e:	0019      	movs	r1, r3
    3f20:	201b      	movs	r0, #27
    3f22:	4b0d      	ldr	r3, [pc, #52]	; (3f58 <init_chip_pins+0x50>)
    3f24:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    3f26:	1d3b      	adds	r3, r7, #4
    3f28:	0019      	movs	r1, r3
    3f2a:	201c      	movs	r0, #28
    3f2c:	4b0a      	ldr	r3, [pc, #40]	; (3f58 <init_chip_pins+0x50>)
    3f2e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    3f30:	1d3b      	adds	r3, r7, #4
    3f32:	0019      	movs	r1, r3
    3f34:	2028      	movs	r0, #40	; 0x28
    3f36:	4b08      	ldr	r3, [pc, #32]	; (3f58 <init_chip_pins+0x50>)
    3f38:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3f3a:	2100      	movs	r1, #0
    3f3c:	201c      	movs	r0, #28
    3f3e:	4b07      	ldr	r3, [pc, #28]	; (3f5c <init_chip_pins+0x54>)
    3f40:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    3f42:	2100      	movs	r1, #0
    3f44:	201b      	movs	r0, #27
    3f46:	4b05      	ldr	r3, [pc, #20]	; (3f5c <init_chip_pins+0x54>)
    3f48:	4798      	blx	r3
}
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	46bd      	mov	sp, r7
    3f4e:	b002      	add	sp, #8
    3f50:	bd80      	pop	{r7, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	00003e91 	.word	0x00003e91
    3f58:	00004585 	.word	0x00004585
    3f5c:	00003eb5 	.word	0x00003eb5

00003f60 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    3f64:	4b0c      	ldr	r3, [pc, #48]	; (3f98 <nm_bsp_init+0x38>)
    3f66:	2200      	movs	r2, #0
    3f68:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    3f6a:	4b0c      	ldr	r3, [pc, #48]	; (3f9c <nm_bsp_init+0x3c>)
    3f6c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    3f6e:	4b0c      	ldr	r3, [pc, #48]	; (3fa0 <nm_bsp_init+0x40>)
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	2201      	movs	r2, #1
    3f74:	4013      	ands	r3, r2
    3f76:	d004      	beq.n	3f82 <nm_bsp_init+0x22>
    3f78:	4b09      	ldr	r3, [pc, #36]	; (3fa0 <nm_bsp_init+0x40>)
    3f7a:	681b      	ldr	r3, [r3, #0]
    3f7c:	2202      	movs	r2, #2
    3f7e:	4013      	ands	r3, r2
    3f80:	d101      	bne.n	3f86 <nm_bsp_init+0x26>
	    delay_init();
    3f82:	4b08      	ldr	r3, [pc, #32]	; (3fa4 <nm_bsp_init+0x44>)
    3f84:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    3f86:	4b08      	ldr	r3, [pc, #32]	; (3fa8 <nm_bsp_init+0x48>)
    3f88:	4798      	blx	r3

	system_interrupt_enable_global();
    3f8a:	4b08      	ldr	r3, [pc, #32]	; (3fac <nm_bsp_init+0x4c>)
    3f8c:	4798      	blx	r3

	return M2M_SUCCESS;
    3f8e:	2300      	movs	r3, #0
}
    3f90:	0018      	movs	r0, r3
    3f92:	46bd      	mov	sp, r7
    3f94:	bd80      	pop	{r7, pc}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000268 	.word	0x20000268
    3f9c:	00003f09 	.word	0x00003f09
    3fa0:	e000e010 	.word	0xe000e010
    3fa4:	00003d39 	.word	0x00003d39
    3fa8:	00003fb1 	.word	0x00003fb1
    3fac:	00003e51 	.word	0x00003e51

00003fb0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3fb0:	b580      	push	{r7, lr}
    3fb2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3fb4:	2100      	movs	r1, #0
    3fb6:	201c      	movs	r0, #28
    3fb8:	4b0b      	ldr	r3, [pc, #44]	; (3fe8 <nm_bsp_reset+0x38>)
    3fba:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    3fbc:	2100      	movs	r1, #0
    3fbe:	201b      	movs	r0, #27
    3fc0:	4b09      	ldr	r3, [pc, #36]	; (3fe8 <nm_bsp_reset+0x38>)
    3fc2:	4798      	blx	r3
	nm_bsp_sleep(1);
    3fc4:	2001      	movs	r0, #1
    3fc6:	4b09      	ldr	r3, [pc, #36]	; (3fec <nm_bsp_reset+0x3c>)
    3fc8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    3fca:	2101      	movs	r1, #1
    3fcc:	201c      	movs	r0, #28
    3fce:	4b06      	ldr	r3, [pc, #24]	; (3fe8 <nm_bsp_reset+0x38>)
    3fd0:	4798      	blx	r3
	nm_bsp_sleep(10);
    3fd2:	200a      	movs	r0, #10
    3fd4:	4b05      	ldr	r3, [pc, #20]	; (3fec <nm_bsp_reset+0x3c>)
    3fd6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    3fd8:	2101      	movs	r1, #1
    3fda:	201b      	movs	r0, #27
    3fdc:	4b02      	ldr	r3, [pc, #8]	; (3fe8 <nm_bsp_reset+0x38>)
    3fde:	4798      	blx	r3
}
    3fe0:	46c0      	nop			; (mov r8, r8)
    3fe2:	46bd      	mov	sp, r7
    3fe4:	bd80      	pop	{r7, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	00003eb5 	.word	0x00003eb5
    3fec:	00003ff1 	.word	0x00003ff1

00003ff0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b082      	sub	sp, #8
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    3ff8:	e002      	b.n	4000 <nm_bsp_sleep+0x10>
		delay_ms(1);
    3ffa:	2001      	movs	r0, #1
    3ffc:	4b05      	ldr	r3, [pc, #20]	; (4014 <nm_bsp_sleep+0x24>)
    3ffe:	4798      	blx	r3
	while (u32TimeMsec--) {
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	1e5a      	subs	r2, r3, #1
    4004:	607a      	str	r2, [r7, #4]
    4006:	2b00      	cmp	r3, #0
    4008:	d1f7      	bne.n	3ffa <nm_bsp_sleep+0xa>
	}
}
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	46bd      	mov	sp, r7
    400e:	b002      	add	sp, #8
    4010:	bd80      	pop	{r7, pc}
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	00003dc1 	.word	0x00003dc1

00004018 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    401e:	4b10      	ldr	r3, [pc, #64]	; (4060 <cpu_irq_enter_critical+0x48>)
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	2b00      	cmp	r3, #0
    4024:	d112      	bne.n	404c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4026:	f3ef 8310 	mrs	r3, PRIMASK
    402a:	607b      	str	r3, [r7, #4]
  return(result);
    402c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    402e:	2b00      	cmp	r3, #0
    4030:	d109      	bne.n	4046 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    4032:	b672      	cpsid	i
    4034:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4038:	4b0a      	ldr	r3, [pc, #40]	; (4064 <cpu_irq_enter_critical+0x4c>)
    403a:	2200      	movs	r2, #0
    403c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    403e:	4b0a      	ldr	r3, [pc, #40]	; (4068 <cpu_irq_enter_critical+0x50>)
    4040:	2201      	movs	r2, #1
    4042:	701a      	strb	r2, [r3, #0]
    4044:	e002      	b.n	404c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4046:	4b08      	ldr	r3, [pc, #32]	; (4068 <cpu_irq_enter_critical+0x50>)
    4048:	2200      	movs	r2, #0
    404a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    404c:	4b04      	ldr	r3, [pc, #16]	; (4060 <cpu_irq_enter_critical+0x48>)
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	1c5a      	adds	r2, r3, #1
    4052:	4b03      	ldr	r3, [pc, #12]	; (4060 <cpu_irq_enter_critical+0x48>)
    4054:	601a      	str	r2, [r3, #0]
}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	46bd      	mov	sp, r7
    405a:	b002      	add	sp, #8
    405c:	bd80      	pop	{r7, pc}
    405e:	46c0      	nop			; (mov r8, r8)
    4060:	2000026c 	.word	0x2000026c
    4064:	20000064 	.word	0x20000064
    4068:	20000270 	.word	0x20000270

0000406c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    406c:	b580      	push	{r7, lr}
    406e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4070:	4b0b      	ldr	r3, [pc, #44]	; (40a0 <cpu_irq_leave_critical+0x34>)
    4072:	681b      	ldr	r3, [r3, #0]
    4074:	1e5a      	subs	r2, r3, #1
    4076:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <cpu_irq_leave_critical+0x34>)
    4078:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    407a:	4b09      	ldr	r3, [pc, #36]	; (40a0 <cpu_irq_leave_critical+0x34>)
    407c:	681b      	ldr	r3, [r3, #0]
    407e:	2b00      	cmp	r3, #0
    4080:	d10a      	bne.n	4098 <cpu_irq_leave_critical+0x2c>
    4082:	4b08      	ldr	r3, [pc, #32]	; (40a4 <cpu_irq_leave_critical+0x38>)
    4084:	781b      	ldrb	r3, [r3, #0]
    4086:	b2db      	uxtb	r3, r3
    4088:	2b00      	cmp	r3, #0
    408a:	d005      	beq.n	4098 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    408c:	4b06      	ldr	r3, [pc, #24]	; (40a8 <cpu_irq_leave_critical+0x3c>)
    408e:	2201      	movs	r2, #1
    4090:	701a      	strb	r2, [r3, #0]
    4092:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4096:	b662      	cpsie	i
	}
}
    4098:	46c0      	nop			; (mov r8, r8)
    409a:	46bd      	mov	sp, r7
    409c:	bd80      	pop	{r7, pc}
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	2000026c 	.word	0x2000026c
    40a4:	20000270 	.word	0x20000270
    40a8:	20000064 	.word	0x20000064

000040ac <system_pinmux_get_group_from_gpio_pin>:
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b084      	sub	sp, #16
    40b0:	af00      	add	r7, sp, #0
    40b2:	0002      	movs	r2, r0
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    40b8:	230f      	movs	r3, #15
    40ba:	18fb      	adds	r3, r7, r3
    40bc:	1dfa      	adds	r2, r7, #7
    40be:	7812      	ldrb	r2, [r2, #0]
    40c0:	09d2      	lsrs	r2, r2, #7
    40c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    40c4:	230e      	movs	r3, #14
    40c6:	18fb      	adds	r3, r7, r3
    40c8:	1dfa      	adds	r2, r7, #7
    40ca:	7812      	ldrb	r2, [r2, #0]
    40cc:	0952      	lsrs	r2, r2, #5
    40ce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    40d0:	4b0d      	ldr	r3, [pc, #52]	; (4108 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    40d2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    40d4:	230f      	movs	r3, #15
    40d6:	18fb      	adds	r3, r7, r3
    40d8:	781b      	ldrb	r3, [r3, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	d10f      	bne.n	40fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    40de:	230f      	movs	r3, #15
    40e0:	18fb      	adds	r3, r7, r3
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	009b      	lsls	r3, r3, #2
    40e6:	2210      	movs	r2, #16
    40e8:	4694      	mov	ip, r2
    40ea:	44bc      	add	ip, r7
    40ec:	4463      	add	r3, ip
    40ee:	3b08      	subs	r3, #8
    40f0:	681a      	ldr	r2, [r3, #0]
    40f2:	230e      	movs	r3, #14
    40f4:	18fb      	adds	r3, r7, r3
    40f6:	781b      	ldrb	r3, [r3, #0]
    40f8:	01db      	lsls	r3, r3, #7
    40fa:	18d3      	adds	r3, r2, r3
    40fc:	e000      	b.n	4100 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    40fe:	2300      	movs	r3, #0
}
    4100:	0018      	movs	r0, r3
    4102:	46bd      	mov	sp, r7
    4104:	b004      	add	sp, #16
    4106:	bd80      	pop	{r7, pc}
    4108:	41004400 	.word	0x41004400

0000410c <port_get_group_from_gpio_pin>:
{
    410c:	b580      	push	{r7, lr}
    410e:	b082      	sub	sp, #8
    4110:	af00      	add	r7, sp, #0
    4112:	0002      	movs	r2, r0
    4114:	1dfb      	adds	r3, r7, #7
    4116:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4118:	1dfb      	adds	r3, r7, #7
    411a:	781b      	ldrb	r3, [r3, #0]
    411c:	0018      	movs	r0, r3
    411e:	4b03      	ldr	r3, [pc, #12]	; (412c <port_get_group_from_gpio_pin+0x20>)
    4120:	4798      	blx	r3
    4122:	0003      	movs	r3, r0
}
    4124:	0018      	movs	r0, r3
    4126:	46bd      	mov	sp, r7
    4128:	b002      	add	sp, #8
    412a:	bd80      	pop	{r7, pc}
    412c:	000040ad 	.word	0x000040ad

00004130 <port_get_config_defaults>:
{
    4130:	b580      	push	{r7, lr}
    4132:	b082      	sub	sp, #8
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	2200      	movs	r2, #0
    413c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	2201      	movs	r2, #1
    4142:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	2200      	movs	r2, #0
    4148:	709a      	strb	r2, [r3, #2]
}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	46bd      	mov	sp, r7
    414e:	b002      	add	sp, #8
    4150:	bd80      	pop	{r7, pc}
	...

00004154 <port_pin_set_output_level>:
{
    4154:	b580      	push	{r7, lr}
    4156:	b084      	sub	sp, #16
    4158:	af00      	add	r7, sp, #0
    415a:	0002      	movs	r2, r0
    415c:	1dfb      	adds	r3, r7, #7
    415e:	701a      	strb	r2, [r3, #0]
    4160:	1dbb      	adds	r3, r7, #6
    4162:	1c0a      	adds	r2, r1, #0
    4164:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4166:	1dfb      	adds	r3, r7, #7
    4168:	781b      	ldrb	r3, [r3, #0]
    416a:	0018      	movs	r0, r3
    416c:	4b0d      	ldr	r3, [pc, #52]	; (41a4 <port_pin_set_output_level+0x50>)
    416e:	4798      	blx	r3
    4170:	0003      	movs	r3, r0
    4172:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4174:	1dfb      	adds	r3, r7, #7
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	221f      	movs	r2, #31
    417a:	4013      	ands	r3, r2
    417c:	2201      	movs	r2, #1
    417e:	409a      	lsls	r2, r3
    4180:	0013      	movs	r3, r2
    4182:	60bb      	str	r3, [r7, #8]
	if (level) {
    4184:	1dbb      	adds	r3, r7, #6
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	2b00      	cmp	r3, #0
    418a:	d003      	beq.n	4194 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    418c:	68fb      	ldr	r3, [r7, #12]
    418e:	68ba      	ldr	r2, [r7, #8]
    4190:	619a      	str	r2, [r3, #24]
}
    4192:	e002      	b.n	419a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4194:	68fb      	ldr	r3, [r7, #12]
    4196:	68ba      	ldr	r2, [r7, #8]
    4198:	615a      	str	r2, [r3, #20]
}
    419a:	46c0      	nop			; (mov r8, r8)
    419c:	46bd      	mov	sp, r7
    419e:	b004      	add	sp, #16
    41a0:	bd80      	pop	{r7, pc}
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	0000410d 	.word	0x0000410d

000041a8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b082      	sub	sp, #8
    41ac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    41ae:	1d3b      	adds	r3, r7, #4
    41b0:	0018      	movs	r0, r3
    41b2:	4b0e      	ldr	r3, [pc, #56]	; (41ec <system_board_init+0x44>)
    41b4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    41b6:	1d3b      	adds	r3, r7, #4
    41b8:	2201      	movs	r2, #1
    41ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    41bc:	1d3b      	adds	r3, r7, #4
    41be:	0019      	movs	r1, r3
    41c0:	2017      	movs	r0, #23
    41c2:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <system_board_init+0x48>)
    41c4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    41c6:	2101      	movs	r1, #1
    41c8:	2017      	movs	r0, #23
    41ca:	4b0a      	ldr	r3, [pc, #40]	; (41f4 <system_board_init+0x4c>)
    41cc:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    41ce:	1d3b      	adds	r3, r7, #4
    41d0:	2200      	movs	r2, #0
    41d2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    41d4:	1d3b      	adds	r3, r7, #4
    41d6:	2201      	movs	r2, #1
    41d8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    41da:	1d3b      	adds	r3, r7, #4
    41dc:	0019      	movs	r1, r3
    41de:	2037      	movs	r0, #55	; 0x37
    41e0:	4b03      	ldr	r3, [pc, #12]	; (41f0 <system_board_init+0x48>)
    41e2:	4798      	blx	r3
}
    41e4:	46c0      	nop			; (mov r8, r8)
    41e6:	46bd      	mov	sp, r7
    41e8:	b002      	add	sp, #8
    41ea:	bd80      	pop	{r7, pc}
    41ec:	00004131 	.word	0x00004131
    41f0:	00004585 	.word	0x00004585
    41f4:	00004155 	.word	0x00004155

000041f8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    41f8:	b580      	push	{r7, lr}
    41fa:	b084      	sub	sp, #16
    41fc:	af00      	add	r7, sp, #0
    41fe:	0002      	movs	r2, r0
    4200:	1dfb      	adds	r3, r7, #7
    4202:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4204:	230f      	movs	r3, #15
    4206:	18fb      	adds	r3, r7, r3
    4208:	1dfa      	adds	r2, r7, #7
    420a:	7812      	ldrb	r2, [r2, #0]
    420c:	0952      	lsrs	r2, r2, #5
    420e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4210:	230f      	movs	r3, #15
    4212:	18fb      	adds	r3, r7, r3
    4214:	781b      	ldrb	r3, [r3, #0]
    4216:	2b00      	cmp	r3, #0
    4218:	d10c      	bne.n	4234 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    421a:	4b09      	ldr	r3, [pc, #36]	; (4240 <_extint_get_eic_from_channel+0x48>)
    421c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    421e:	230f      	movs	r3, #15
    4220:	18fb      	adds	r3, r7, r3
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	009b      	lsls	r3, r3, #2
    4226:	2210      	movs	r2, #16
    4228:	4694      	mov	ip, r2
    422a:	44bc      	add	ip, r7
    422c:	4463      	add	r3, ip
    422e:	3b08      	subs	r3, #8
    4230:	681b      	ldr	r3, [r3, #0]
    4232:	e000      	b.n	4236 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4234:	2300      	movs	r3, #0
	}
}
    4236:	0018      	movs	r0, r3
    4238:	46bd      	mov	sp, r7
    423a:	b004      	add	sp, #16
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	40001800 	.word	0x40001800

00004244 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4244:	b580      	push	{r7, lr}
    4246:	b084      	sub	sp, #16
    4248:	af00      	add	r7, sp, #0
    424a:	0002      	movs	r2, r0
    424c:	1dfb      	adds	r3, r7, #7
    424e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4250:	1dfb      	adds	r3, r7, #7
    4252:	781b      	ldrb	r3, [r3, #0]
    4254:	0018      	movs	r0, r3
    4256:	4b0b      	ldr	r3, [pc, #44]	; (4284 <extint_chan_is_detected+0x40>)
    4258:	4798      	blx	r3
    425a:	0003      	movs	r3, r0
    425c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    425e:	1dfb      	adds	r3, r7, #7
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	221f      	movs	r2, #31
    4264:	4013      	ands	r3, r2
    4266:	2201      	movs	r2, #1
    4268:	409a      	lsls	r2, r3
    426a:	0013      	movs	r3, r2
    426c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	691b      	ldr	r3, [r3, #16]
    4272:	68ba      	ldr	r2, [r7, #8]
    4274:	4013      	ands	r3, r2
    4276:	1e5a      	subs	r2, r3, #1
    4278:	4193      	sbcs	r3, r2
    427a:	b2db      	uxtb	r3, r3
}
    427c:	0018      	movs	r0, r3
    427e:	46bd      	mov	sp, r7
    4280:	b004      	add	sp, #16
    4282:	bd80      	pop	{r7, pc}
    4284:	000041f9 	.word	0x000041f9

00004288 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4288:	b580      	push	{r7, lr}
    428a:	b084      	sub	sp, #16
    428c:	af00      	add	r7, sp, #0
    428e:	0002      	movs	r2, r0
    4290:	1dfb      	adds	r3, r7, #7
    4292:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4294:	1dfb      	adds	r3, r7, #7
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	0018      	movs	r0, r3
    429a:	4b09      	ldr	r3, [pc, #36]	; (42c0 <extint_chan_clear_detected+0x38>)
    429c:	4798      	blx	r3
    429e:	0003      	movs	r3, r0
    42a0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    42a2:	1dfb      	adds	r3, r7, #7
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	221f      	movs	r2, #31
    42a8:	4013      	ands	r3, r2
    42aa:	2201      	movs	r2, #1
    42ac:	409a      	lsls	r2, r3
    42ae:	0013      	movs	r3, r2
    42b0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    42b2:	68fb      	ldr	r3, [r7, #12]
    42b4:	68ba      	ldr	r2, [r7, #8]
    42b6:	611a      	str	r2, [r3, #16]
}
    42b8:	46c0      	nop			; (mov r8, r8)
    42ba:	46bd      	mov	sp, r7
    42bc:	b004      	add	sp, #16
    42be:	bd80      	pop	{r7, pc}
    42c0:	000041f9 	.word	0x000041f9

000042c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    42c4:	b580      	push	{r7, lr}
    42c6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    42c8:	4b15      	ldr	r3, [pc, #84]	; (4320 <EIC_Handler+0x5c>)
    42ca:	2200      	movs	r2, #0
    42cc:	701a      	strb	r2, [r3, #0]
    42ce:	e020      	b.n	4312 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    42d0:	4b13      	ldr	r3, [pc, #76]	; (4320 <EIC_Handler+0x5c>)
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	0018      	movs	r0, r3
    42d6:	4b13      	ldr	r3, [pc, #76]	; (4324 <EIC_Handler+0x60>)
    42d8:	4798      	blx	r3
    42da:	1e03      	subs	r3, r0, #0
    42dc:	d013      	beq.n	4306 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    42de:	4b10      	ldr	r3, [pc, #64]	; (4320 <EIC_Handler+0x5c>)
    42e0:	781b      	ldrb	r3, [r3, #0]
    42e2:	0018      	movs	r0, r3
    42e4:	4b10      	ldr	r3, [pc, #64]	; (4328 <EIC_Handler+0x64>)
    42e6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    42e8:	4b0d      	ldr	r3, [pc, #52]	; (4320 <EIC_Handler+0x5c>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	001a      	movs	r2, r3
    42ee:	4b0f      	ldr	r3, [pc, #60]	; (432c <EIC_Handler+0x68>)
    42f0:	0092      	lsls	r2, r2, #2
    42f2:	58d3      	ldr	r3, [r2, r3]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d006      	beq.n	4306 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    42f8:	4b09      	ldr	r3, [pc, #36]	; (4320 <EIC_Handler+0x5c>)
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	001a      	movs	r2, r3
    42fe:	4b0b      	ldr	r3, [pc, #44]	; (432c <EIC_Handler+0x68>)
    4300:	0092      	lsls	r2, r2, #2
    4302:	58d3      	ldr	r3, [r2, r3]
    4304:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4306:	4b06      	ldr	r3, [pc, #24]	; (4320 <EIC_Handler+0x5c>)
    4308:	781b      	ldrb	r3, [r3, #0]
    430a:	3301      	adds	r3, #1
    430c:	b2da      	uxtb	r2, r3
    430e:	4b04      	ldr	r3, [pc, #16]	; (4320 <EIC_Handler+0x5c>)
    4310:	701a      	strb	r2, [r3, #0]
    4312:	4b03      	ldr	r3, [pc, #12]	; (4320 <EIC_Handler+0x5c>)
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	2b0f      	cmp	r3, #15
    4318:	d9da      	bls.n	42d0 <EIC_Handler+0xc>
			}
		}
	}
}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	46bd      	mov	sp, r7
    431e:	bd80      	pop	{r7, pc}
    4320:	20000394 	.word	0x20000394
    4324:	00004245 	.word	0x00004245
    4328:	00004289 	.word	0x00004289
    432c:	20000398 	.word	0x20000398

00004330 <system_gclk_chan_get_config_defaults>:
{
    4330:	b580      	push	{r7, lr}
    4332:	b082      	sub	sp, #8
    4334:	af00      	add	r7, sp, #0
    4336:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4338:	687b      	ldr	r3, [r7, #4]
    433a:	2200      	movs	r2, #0
    433c:	701a      	strb	r2, [r3, #0]
}
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	46bd      	mov	sp, r7
    4342:	b002      	add	sp, #8
    4344:	bd80      	pop	{r7, pc}
	...

00004348 <system_apb_clock_set_mask>:
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
    434e:	0002      	movs	r2, r0
    4350:	6039      	str	r1, [r7, #0]
    4352:	1dfb      	adds	r3, r7, #7
    4354:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4356:	1dfb      	adds	r3, r7, #7
    4358:	781b      	ldrb	r3, [r3, #0]
    435a:	2b01      	cmp	r3, #1
    435c:	d00a      	beq.n	4374 <system_apb_clock_set_mask+0x2c>
    435e:	2b02      	cmp	r3, #2
    4360:	d00f      	beq.n	4382 <system_apb_clock_set_mask+0x3a>
    4362:	2b00      	cmp	r3, #0
    4364:	d114      	bne.n	4390 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4366:	4b0e      	ldr	r3, [pc, #56]	; (43a0 <system_apb_clock_set_mask+0x58>)
    4368:	4a0d      	ldr	r2, [pc, #52]	; (43a0 <system_apb_clock_set_mask+0x58>)
    436a:	6991      	ldr	r1, [r2, #24]
    436c:	683a      	ldr	r2, [r7, #0]
    436e:	430a      	orrs	r2, r1
    4370:	619a      	str	r2, [r3, #24]
			break;
    4372:	e00f      	b.n	4394 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4374:	4b0a      	ldr	r3, [pc, #40]	; (43a0 <system_apb_clock_set_mask+0x58>)
    4376:	4a0a      	ldr	r2, [pc, #40]	; (43a0 <system_apb_clock_set_mask+0x58>)
    4378:	69d1      	ldr	r1, [r2, #28]
    437a:	683a      	ldr	r2, [r7, #0]
    437c:	430a      	orrs	r2, r1
    437e:	61da      	str	r2, [r3, #28]
			break;
    4380:	e008      	b.n	4394 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4382:	4b07      	ldr	r3, [pc, #28]	; (43a0 <system_apb_clock_set_mask+0x58>)
    4384:	4a06      	ldr	r2, [pc, #24]	; (43a0 <system_apb_clock_set_mask+0x58>)
    4386:	6a11      	ldr	r1, [r2, #32]
    4388:	683a      	ldr	r2, [r7, #0]
    438a:	430a      	orrs	r2, r1
    438c:	621a      	str	r2, [r3, #32]
			break;
    438e:	e001      	b.n	4394 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4390:	2317      	movs	r3, #23
    4392:	e000      	b.n	4396 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4394:	2300      	movs	r3, #0
}
    4396:	0018      	movs	r0, r3
    4398:	46bd      	mov	sp, r7
    439a:	b002      	add	sp, #8
    439c:	bd80      	pop	{r7, pc}
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	40000400 	.word	0x40000400

000043a4 <system_interrupt_enable>:
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b082      	sub	sp, #8
    43a8:	af00      	add	r7, sp, #0
    43aa:	0002      	movs	r2, r0
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    43b0:	4b06      	ldr	r3, [pc, #24]	; (43cc <system_interrupt_enable+0x28>)
    43b2:	1dfa      	adds	r2, r7, #7
    43b4:	7812      	ldrb	r2, [r2, #0]
    43b6:	0011      	movs	r1, r2
    43b8:	221f      	movs	r2, #31
    43ba:	400a      	ands	r2, r1
    43bc:	2101      	movs	r1, #1
    43be:	4091      	lsls	r1, r2
    43c0:	000a      	movs	r2, r1
    43c2:	601a      	str	r2, [r3, #0]
}
    43c4:	46c0      	nop			; (mov r8, r8)
    43c6:	46bd      	mov	sp, r7
    43c8:	b002      	add	sp, #8
    43ca:	bd80      	pop	{r7, pc}
    43cc:	e000e100 	.word	0xe000e100

000043d0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    43d6:	4b0f      	ldr	r3, [pc, #60]	; (4414 <extint_is_syncing+0x44>)
    43d8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    43da:	2300      	movs	r3, #0
    43dc:	607b      	str	r3, [r7, #4]
    43de:	e011      	b.n	4404 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	009b      	lsls	r3, r3, #2
    43e4:	2208      	movs	r2, #8
    43e6:	4694      	mov	ip, r2
    43e8:	44bc      	add	ip, r7
    43ea:	4463      	add	r3, ip
    43ec:	3b08      	subs	r3, #8
    43ee:	681b      	ldr	r3, [r3, #0]
    43f0:	785b      	ldrb	r3, [r3, #1]
    43f2:	b2db      	uxtb	r3, r3
    43f4:	b25b      	sxtb	r3, r3
    43f6:	2b00      	cmp	r3, #0
    43f8:	da01      	bge.n	43fe <extint_is_syncing+0x2e>
			return true;
    43fa:	2301      	movs	r3, #1
    43fc:	e006      	b.n	440c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	3301      	adds	r3, #1
    4402:	607b      	str	r3, [r7, #4]
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	2b00      	cmp	r3, #0
    4408:	d0ea      	beq.n	43e0 <extint_is_syncing+0x10>
		}
	}
	return false;
    440a:	2300      	movs	r3, #0
}
    440c:	0018      	movs	r0, r3
    440e:	46bd      	mov	sp, r7
    4410:	b002      	add	sp, #8
    4412:	bd80      	pop	{r7, pc}
    4414:	40001800 	.word	0x40001800

00004418 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4418:	b580      	push	{r7, lr}
    441a:	b084      	sub	sp, #16
    441c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    441e:	4b2d      	ldr	r3, [pc, #180]	; (44d4 <_system_extint_init+0xbc>)
    4420:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4422:	2140      	movs	r1, #64	; 0x40
    4424:	2000      	movs	r0, #0
    4426:	4b2c      	ldr	r3, [pc, #176]	; (44d8 <_system_extint_init+0xc0>)
    4428:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    442a:	003b      	movs	r3, r7
    442c:	0018      	movs	r0, r3
    442e:	4b2b      	ldr	r3, [pc, #172]	; (44dc <_system_extint_init+0xc4>)
    4430:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4432:	003b      	movs	r3, r7
    4434:	2200      	movs	r2, #0
    4436:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4438:	003b      	movs	r3, r7
    443a:	0019      	movs	r1, r3
    443c:	2005      	movs	r0, #5
    443e:	4b28      	ldr	r3, [pc, #160]	; (44e0 <_system_extint_init+0xc8>)
    4440:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4442:	2005      	movs	r0, #5
    4444:	4b27      	ldr	r3, [pc, #156]	; (44e4 <_system_extint_init+0xcc>)
    4446:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4448:	2300      	movs	r3, #0
    444a:	60fb      	str	r3, [r7, #12]
    444c:	e018      	b.n	4480 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    444e:	68fb      	ldr	r3, [r7, #12]
    4450:	009b      	lsls	r3, r3, #2
    4452:	2210      	movs	r2, #16
    4454:	4694      	mov	ip, r2
    4456:	44bc      	add	ip, r7
    4458:	4463      	add	r3, ip
    445a:	3b0c      	subs	r3, #12
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	009b      	lsls	r3, r3, #2
    4462:	2110      	movs	r1, #16
    4464:	468c      	mov	ip, r1
    4466:	44bc      	add	ip, r7
    4468:	4463      	add	r3, ip
    446a:	3b0c      	subs	r3, #12
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	b2db      	uxtb	r3, r3
    4472:	2101      	movs	r1, #1
    4474:	430b      	orrs	r3, r1
    4476:	b2db      	uxtb	r3, r3
    4478:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	3301      	adds	r3, #1
    447e:	60fb      	str	r3, [r7, #12]
    4480:	68fb      	ldr	r3, [r7, #12]
    4482:	2b00      	cmp	r3, #0
    4484:	d0e3      	beq.n	444e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	4b17      	ldr	r3, [pc, #92]	; (44e8 <_system_extint_init+0xd0>)
    448a:	4798      	blx	r3
    448c:	1e03      	subs	r3, r0, #0
    448e:	d1fb      	bne.n	4488 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4490:	230b      	movs	r3, #11
    4492:	18fb      	adds	r3, r7, r3
    4494:	2200      	movs	r2, #0
    4496:	701a      	strb	r2, [r3, #0]
    4498:	e00d      	b.n	44b6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    449a:	230b      	movs	r3, #11
    449c:	18fb      	adds	r3, r7, r3
    449e:	781a      	ldrb	r2, [r3, #0]
    44a0:	4b12      	ldr	r3, [pc, #72]	; (44ec <_system_extint_init+0xd4>)
    44a2:	0092      	lsls	r2, r2, #2
    44a4:	2100      	movs	r1, #0
    44a6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    44a8:	230b      	movs	r3, #11
    44aa:	18fb      	adds	r3, r7, r3
    44ac:	781a      	ldrb	r2, [r3, #0]
    44ae:	230b      	movs	r3, #11
    44b0:	18fb      	adds	r3, r7, r3
    44b2:	3201      	adds	r2, #1
    44b4:	701a      	strb	r2, [r3, #0]
    44b6:	230b      	movs	r3, #11
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	781b      	ldrb	r3, [r3, #0]
    44bc:	2b0f      	cmp	r3, #15
    44be:	d9ec      	bls.n	449a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    44c0:	2004      	movs	r0, #4
    44c2:	4b0b      	ldr	r3, [pc, #44]	; (44f0 <_system_extint_init+0xd8>)
    44c4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    44c6:	4b0b      	ldr	r3, [pc, #44]	; (44f4 <_system_extint_init+0xdc>)
    44c8:	4798      	blx	r3
}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	46bd      	mov	sp, r7
    44ce:	b004      	add	sp, #16
    44d0:	bd80      	pop	{r7, pc}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	40001800 	.word	0x40001800
    44d8:	00004349 	.word	0x00004349
    44dc:	00004331 	.word	0x00004331
    44e0:	00007061 	.word	0x00007061
    44e4:	000070a5 	.word	0x000070a5
    44e8:	000043d1 	.word	0x000043d1
    44ec:	20000398 	.word	0x20000398
    44f0:	000043a5 	.word	0x000043a5
    44f4:	000044f9 	.word	0x000044f9

000044f8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b082      	sub	sp, #8
    44fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    44fe:	4b15      	ldr	r3, [pc, #84]	; (4554 <_extint_enable+0x5c>)
    4500:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4502:	2300      	movs	r3, #0
    4504:	607b      	str	r3, [r7, #4]
    4506:	e018      	b.n	453a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	009b      	lsls	r3, r3, #2
    450c:	2208      	movs	r2, #8
    450e:	4694      	mov	ip, r2
    4510:	44bc      	add	ip, r7
    4512:	4463      	add	r3, ip
    4514:	3b08      	subs	r3, #8
    4516:	681a      	ldr	r2, [r3, #0]
    4518:	687b      	ldr	r3, [r7, #4]
    451a:	009b      	lsls	r3, r3, #2
    451c:	2108      	movs	r1, #8
    451e:	468c      	mov	ip, r1
    4520:	44bc      	add	ip, r7
    4522:	4463      	add	r3, ip
    4524:	3b08      	subs	r3, #8
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	781b      	ldrb	r3, [r3, #0]
    452a:	b2db      	uxtb	r3, r3
    452c:	2102      	movs	r1, #2
    452e:	430b      	orrs	r3, r1
    4530:	b2db      	uxtb	r3, r3
    4532:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4534:	687b      	ldr	r3, [r7, #4]
    4536:	3301      	adds	r3, #1
    4538:	607b      	str	r3, [r7, #4]
    453a:	687b      	ldr	r3, [r7, #4]
    453c:	2b00      	cmp	r3, #0
    453e:	d0e3      	beq.n	4508 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    4540:	46c0      	nop			; (mov r8, r8)
    4542:	4b05      	ldr	r3, [pc, #20]	; (4558 <_extint_enable+0x60>)
    4544:	4798      	blx	r3
    4546:	1e03      	subs	r3, r0, #0
    4548:	d1fb      	bne.n	4542 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	46bd      	mov	sp, r7
    454e:	b002      	add	sp, #8
    4550:	bd80      	pop	{r7, pc}
    4552:	46c0      	nop			; (mov r8, r8)
    4554:	40001800 	.word	0x40001800
    4558:	000043d1 	.word	0x000043d1

0000455c <system_pinmux_get_config_defaults>:
{
    455c:	b580      	push	{r7, lr}
    455e:	b082      	sub	sp, #8
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4564:	687b      	ldr	r3, [r7, #4]
    4566:	2280      	movs	r2, #128	; 0x80
    4568:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	2200      	movs	r2, #0
    456e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	2201      	movs	r2, #1
    4574:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	2200      	movs	r2, #0
    457a:	70da      	strb	r2, [r3, #3]
}
    457c:	46c0      	nop			; (mov r8, r8)
    457e:	46bd      	mov	sp, r7
    4580:	b002      	add	sp, #8
    4582:	bd80      	pop	{r7, pc}

00004584 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4584:	b580      	push	{r7, lr}
    4586:	b084      	sub	sp, #16
    4588:	af00      	add	r7, sp, #0
    458a:	0002      	movs	r2, r0
    458c:	6039      	str	r1, [r7, #0]
    458e:	1dfb      	adds	r3, r7, #7
    4590:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4592:	230c      	movs	r3, #12
    4594:	18fb      	adds	r3, r7, r3
    4596:	0018      	movs	r0, r3
    4598:	4b10      	ldr	r3, [pc, #64]	; (45dc <port_pin_set_config+0x58>)
    459a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    459c:	230c      	movs	r3, #12
    459e:	18fb      	adds	r3, r7, r3
    45a0:	2280      	movs	r2, #128	; 0x80
    45a2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    45a4:	683b      	ldr	r3, [r7, #0]
    45a6:	781a      	ldrb	r2, [r3, #0]
    45a8:	230c      	movs	r3, #12
    45aa:	18fb      	adds	r3, r7, r3
    45ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	785a      	ldrb	r2, [r3, #1]
    45b2:	230c      	movs	r3, #12
    45b4:	18fb      	adds	r3, r7, r3
    45b6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    45b8:	683b      	ldr	r3, [r7, #0]
    45ba:	789a      	ldrb	r2, [r3, #2]
    45bc:	230c      	movs	r3, #12
    45be:	18fb      	adds	r3, r7, r3
    45c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    45c2:	230c      	movs	r3, #12
    45c4:	18fa      	adds	r2, r7, r3
    45c6:	1dfb      	adds	r3, r7, #7
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	0011      	movs	r1, r2
    45cc:	0018      	movs	r0, r3
    45ce:	4b04      	ldr	r3, [pc, #16]	; (45e0 <port_pin_set_config+0x5c>)
    45d0:	4798      	blx	r3
}
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	46bd      	mov	sp, r7
    45d6:	b004      	add	sp, #16
    45d8:	bd80      	pop	{r7, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	0000455d 	.word	0x0000455d
    45e0:	0000734d 	.word	0x0000734d

000045e4 <system_gclk_chan_get_config_defaults>:
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b082      	sub	sp, #8
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	2200      	movs	r2, #0
    45f0:	701a      	strb	r2, [r3, #0]
}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	46bd      	mov	sp, r7
    45f6:	b002      	add	sp, #8
    45f8:	bd80      	pop	{r7, pc}

000045fa <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    45fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    45fc:	b08d      	sub	sp, #52	; 0x34
    45fe:	af00      	add	r7, sp, #0
    4600:	60b8      	str	r0, [r7, #8]
    4602:	60f9      	str	r1, [r7, #12]
    4604:	603a      	str	r2, [r7, #0]
    4606:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4608:	2300      	movs	r3, #0
    460a:	2400      	movs	r4, #0
    460c:	623b      	str	r3, [r7, #32]
    460e:	627c      	str	r4, [r7, #36]	; 0x24
    4610:	2300      	movs	r3, #0
    4612:	2400      	movs	r4, #0
    4614:	61bb      	str	r3, [r7, #24]
    4616:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    4618:	233f      	movs	r3, #63	; 0x3f
    461a:	62fb      	str	r3, [r7, #44]	; 0x2c
    461c:	e053      	b.n	46c6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4620:	3b20      	subs	r3, #32
    4622:	2b00      	cmp	r3, #0
    4624:	db04      	blt.n	4630 <long_division+0x36>
    4626:	2201      	movs	r2, #1
    4628:	409a      	lsls	r2, r3
    462a:	0013      	movs	r3, r2
    462c:	617b      	str	r3, [r7, #20]
    462e:	e00b      	b.n	4648 <long_division+0x4e>
    4630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4632:	2220      	movs	r2, #32
    4634:	1ad3      	subs	r3, r2, r3
    4636:	2201      	movs	r2, #1
    4638:	40da      	lsrs	r2, r3
    463a:	0013      	movs	r3, r2
    463c:	2100      	movs	r1, #0
    463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4640:	4091      	lsls	r1, r2
    4642:	000a      	movs	r2, r1
    4644:	4313      	orrs	r3, r2
    4646:	617b      	str	r3, [r7, #20]
    4648:	2201      	movs	r2, #1
    464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    464c:	409a      	lsls	r2, r3
    464e:	0013      	movs	r3, r2
    4650:	613b      	str	r3, [r7, #16]

		r = r << 1;
    4652:	69bb      	ldr	r3, [r7, #24]
    4654:	69fc      	ldr	r4, [r7, #28]
    4656:	18db      	adds	r3, r3, r3
    4658:	4164      	adcs	r4, r4
    465a:	61bb      	str	r3, [r7, #24]
    465c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    465e:	68bb      	ldr	r3, [r7, #8]
    4660:	693a      	ldr	r2, [r7, #16]
    4662:	401a      	ands	r2, r3
    4664:	0015      	movs	r5, r2
    4666:	68fb      	ldr	r3, [r7, #12]
    4668:	697a      	ldr	r2, [r7, #20]
    466a:	401a      	ands	r2, r3
    466c:	0016      	movs	r6, r2
    466e:	002b      	movs	r3, r5
    4670:	4333      	orrs	r3, r6
    4672:	d007      	beq.n	4684 <long_division+0x8a>
			r |= 0x01;
    4674:	69bb      	ldr	r3, [r7, #24]
    4676:	2201      	movs	r2, #1
    4678:	4313      	orrs	r3, r2
    467a:	61bb      	str	r3, [r7, #24]
    467c:	69fb      	ldr	r3, [r7, #28]
    467e:	2200      	movs	r2, #0
    4680:	4313      	orrs	r3, r2
    4682:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    4684:	687a      	ldr	r2, [r7, #4]
    4686:	69fb      	ldr	r3, [r7, #28]
    4688:	429a      	cmp	r2, r3
    468a:	d819      	bhi.n	46c0 <long_division+0xc6>
    468c:	687a      	ldr	r2, [r7, #4]
    468e:	69fb      	ldr	r3, [r7, #28]
    4690:	429a      	cmp	r2, r3
    4692:	d103      	bne.n	469c <long_division+0xa2>
    4694:	683a      	ldr	r2, [r7, #0]
    4696:	69bb      	ldr	r3, [r7, #24]
    4698:	429a      	cmp	r2, r3
    469a:	d811      	bhi.n	46c0 <long_division+0xc6>
			r = r - d;
    469c:	69b9      	ldr	r1, [r7, #24]
    469e:	69fa      	ldr	r2, [r7, #28]
    46a0:	683b      	ldr	r3, [r7, #0]
    46a2:	687c      	ldr	r4, [r7, #4]
    46a4:	1ac9      	subs	r1, r1, r3
    46a6:	41a2      	sbcs	r2, r4
    46a8:	000b      	movs	r3, r1
    46aa:	0014      	movs	r4, r2
    46ac:	61bb      	str	r3, [r7, #24]
    46ae:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    46b0:	6a3a      	ldr	r2, [r7, #32]
    46b2:	693b      	ldr	r3, [r7, #16]
    46b4:	4313      	orrs	r3, r2
    46b6:	623b      	str	r3, [r7, #32]
    46b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    46ba:	697b      	ldr	r3, [r7, #20]
    46bc:	4313      	orrs	r3, r2
    46be:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    46c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    46c2:	3b01      	subs	r3, #1
    46c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    46c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    46c8:	2b00      	cmp	r3, #0
    46ca:	daa8      	bge.n	461e <long_division+0x24>
		}
	}

	return q;
    46cc:	6a3b      	ldr	r3, [r7, #32]
    46ce:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    46d0:	0018      	movs	r0, r3
    46d2:	0021      	movs	r1, r4
    46d4:	46bd      	mov	sp, r7
    46d6:	b00d      	add	sp, #52	; 0x34
    46d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000046da <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    46da:	b580      	push	{r7, lr}
    46dc:	b086      	sub	sp, #24
    46de:	af00      	add	r7, sp, #0
    46e0:	60f8      	str	r0, [r7, #12]
    46e2:	60b9      	str	r1, [r7, #8]
    46e4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    46e6:	2316      	movs	r3, #22
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	2200      	movs	r2, #0
    46ec:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    46ee:	68bb      	ldr	r3, [r7, #8]
    46f0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    46f2:	68bb      	ldr	r3, [r7, #8]
    46f4:	085a      	lsrs	r2, r3, #1
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	429a      	cmp	r2, r3
    46fa:	d201      	bcs.n	4700 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    46fc:	2340      	movs	r3, #64	; 0x40
    46fe:	e026      	b.n	474e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    4700:	68bb      	ldr	r3, [r7, #8]
    4702:	085b      	lsrs	r3, r3, #1
    4704:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4706:	e00a      	b.n	471e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4708:	693a      	ldr	r2, [r7, #16]
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	1ad3      	subs	r3, r2, r3
    470e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    4710:	2316      	movs	r3, #22
    4712:	18fb      	adds	r3, r7, r3
    4714:	881a      	ldrh	r2, [r3, #0]
    4716:	2316      	movs	r3, #22
    4718:	18fb      	adds	r3, r7, r3
    471a:	3201      	adds	r2, #1
    471c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    471e:	693a      	ldr	r2, [r7, #16]
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	429a      	cmp	r2, r3
    4724:	d2f0      	bcs.n	4708 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    4726:	2316      	movs	r3, #22
    4728:	18fb      	adds	r3, r7, r3
    472a:	2216      	movs	r2, #22
    472c:	18ba      	adds	r2, r7, r2
    472e:	8812      	ldrh	r2, [r2, #0]
    4730:	3a01      	subs	r2, #1
    4732:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4734:	2316      	movs	r3, #22
    4736:	18fb      	adds	r3, r7, r3
    4738:	881b      	ldrh	r3, [r3, #0]
    473a:	2bff      	cmp	r3, #255	; 0xff
    473c:	d901      	bls.n	4742 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    473e:	2340      	movs	r3, #64	; 0x40
    4740:	e005      	b.n	474e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4742:	687b      	ldr	r3, [r7, #4]
    4744:	2216      	movs	r2, #22
    4746:	18ba      	adds	r2, r7, r2
    4748:	8812      	ldrh	r2, [r2, #0]
    474a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    474c:	2300      	movs	r3, #0
	}
}
    474e:	0018      	movs	r0, r3
    4750:	46bd      	mov	sp, r7
    4752:	b006      	add	sp, #24
    4754:	bd80      	pop	{r7, pc}
	...

00004758 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4758:	b5f0      	push	{r4, r5, r6, r7, lr}
    475a:	b0a1      	sub	sp, #132	; 0x84
    475c:	af00      	add	r7, sp, #0
    475e:	64f8      	str	r0, [r7, #76]	; 0x4c
    4760:	64b9      	str	r1, [r7, #72]	; 0x48
    4762:	647a      	str	r2, [r7, #68]	; 0x44
    4764:	2243      	movs	r2, #67	; 0x43
    4766:	18ba      	adds	r2, r7, r2
    4768:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    476a:	2300      	movs	r3, #0
    476c:	2400      	movs	r4, #0
    476e:	673b      	str	r3, [r7, #112]	; 0x70
    4770:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    4772:	2300      	movs	r3, #0
    4774:	2400      	movs	r4, #0
    4776:	66bb      	str	r3, [r7, #104]	; 0x68
    4778:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    477a:	2300      	movs	r3, #0
    477c:	2400      	movs	r4, #0
    477e:	67bb      	str	r3, [r7, #120]	; 0x78
    4780:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    4782:	2300      	movs	r3, #0
    4784:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4786:	2358      	movs	r3, #88	; 0x58
    4788:	2240      	movs	r2, #64	; 0x40
    478a:	4694      	mov	ip, r2
    478c:	44bc      	add	ip, r7
    478e:	4463      	add	r3, ip
    4790:	781a      	ldrb	r2, [r3, #0]
    4792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4794:	435a      	muls	r2, r3
    4796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4798:	429a      	cmp	r2, r3
    479a:	d901      	bls.n	47a0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    479c:	2340      	movs	r3, #64	; 0x40
    479e:	e0b3      	b.n	4908 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    47a0:	2343      	movs	r3, #67	; 0x43
    47a2:	18fb      	adds	r3, r7, r3
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d13d      	bne.n	4826 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    47aa:	2358      	movs	r3, #88	; 0x58
    47ac:	2240      	movs	r2, #64	; 0x40
    47ae:	4694      	mov	ip, r2
    47b0:	44bc      	add	ip, r7
    47b2:	4463      	add	r3, ip
    47b4:	781b      	ldrb	r3, [r3, #0]
    47b6:	b2db      	uxtb	r3, r3
    47b8:	613b      	str	r3, [r7, #16]
    47ba:	2300      	movs	r3, #0
    47bc:	617b      	str	r3, [r7, #20]
    47be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    47c0:	60bb      	str	r3, [r7, #8]
    47c2:	2300      	movs	r3, #0
    47c4:	60fb      	str	r3, [r7, #12]
    47c6:	4c52      	ldr	r4, [pc, #328]	; (4910 <_sercom_get_async_baud_val+0x1b8>)
    47c8:	68ba      	ldr	r2, [r7, #8]
    47ca:	68fb      	ldr	r3, [r7, #12]
    47cc:	6938      	ldr	r0, [r7, #16]
    47ce:	6979      	ldr	r1, [r7, #20]
    47d0:	47a0      	blx	r4
    47d2:	0003      	movs	r3, r0
    47d4:	000c      	movs	r4, r1
    47d6:	001b      	movs	r3, r3
    47d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    47da:	2300      	movs	r3, #0
    47dc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    47de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    47e0:	603b      	str	r3, [r7, #0]
    47e2:	2300      	movs	r3, #0
    47e4:	607b      	str	r3, [r7, #4]
    47e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
    47e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    47ea:	683a      	ldr	r2, [r7, #0]
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	4c49      	ldr	r4, [pc, #292]	; (4914 <_sercom_get_async_baud_val+0x1bc>)
    47f0:	47a0      	blx	r4
    47f2:	0003      	movs	r3, r0
    47f4:	000c      	movs	r4, r1
    47f6:	673b      	str	r3, [r7, #112]	; 0x70
    47f8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    47fa:	2100      	movs	r1, #0
    47fc:	2201      	movs	r2, #1
    47fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4800:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    4802:	1ac9      	subs	r1, r1, r3
    4804:	41a2      	sbcs	r2, r4
    4806:	000b      	movs	r3, r1
    4808:	0014      	movs	r4, r2
    480a:	66bb      	str	r3, [r7, #104]	; 0x68
    480c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    480e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4810:	0c1b      	lsrs	r3, r3, #16
    4812:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    4814:	0416      	lsls	r6, r2, #16
    4816:	431e      	orrs	r6, r3
    4818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    481a:	041d      	lsls	r5, r3, #16
    481c:	0033      	movs	r3, r6
    481e:	67bb      	str	r3, [r7, #120]	; 0x78
    4820:	2300      	movs	r3, #0
    4822:	67fb      	str	r3, [r7, #124]	; 0x7c
    4824:	e06a      	b.n	48fc <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4826:	2343      	movs	r3, #67	; 0x43
    4828:	18fb      	adds	r3, r7, r3
    482a:	781b      	ldrb	r3, [r3, #0]
    482c:	2b01      	cmp	r3, #1
    482e:	d165      	bne.n	48fc <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    4830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4832:	633b      	str	r3, [r7, #48]	; 0x30
    4834:	2300      	movs	r3, #0
    4836:	637b      	str	r3, [r7, #52]	; 0x34
    4838:	2358      	movs	r3, #88	; 0x58
    483a:	2240      	movs	r2, #64	; 0x40
    483c:	4694      	mov	ip, r2
    483e:	44bc      	add	ip, r7
    4840:	4463      	add	r3, ip
    4842:	781b      	ldrb	r3, [r3, #0]
    4844:	b2db      	uxtb	r3, r3
    4846:	62bb      	str	r3, [r7, #40]	; 0x28
    4848:	2300      	movs	r3, #0
    484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    484c:	4c30      	ldr	r4, [pc, #192]	; (4910 <_sercom_get_async_baud_val+0x1b8>)
    484e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4852:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4854:	6b79      	ldr	r1, [r7, #52]	; 0x34
    4856:	47a0      	blx	r4
    4858:	0003      	movs	r3, r0
    485a:	000c      	movs	r4, r1
    485c:	65bb      	str	r3, [r7, #88]	; 0x58
    485e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    4860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4862:	623b      	str	r3, [r7, #32]
    4864:	2300      	movs	r3, #0
    4866:	627b      	str	r3, [r7, #36]	; 0x24
    4868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    486a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    486c:	001a      	movs	r2, r3
    486e:	0023      	movs	r3, r4
    4870:	6a38      	ldr	r0, [r7, #32]
    4872:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4874:	4c27      	ldr	r4, [pc, #156]	; (4914 <_sercom_get_async_baud_val+0x1bc>)
    4876:	47a0      	blx	r4
    4878:	0003      	movs	r3, r0
    487a:	000c      	movs	r4, r1
    487c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    487e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4880:	2380      	movs	r3, #128	; 0x80
    4882:	019b      	lsls	r3, r3, #6
    4884:	429a      	cmp	r2, r3
    4886:	d901      	bls.n	488c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4888:	2340      	movs	r3, #64	; 0x40
    488a:	e03d      	b.n	4908 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    488c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    488e:	61bb      	str	r3, [r7, #24]
    4890:	2300      	movs	r3, #0
    4892:	61fb      	str	r3, [r7, #28]
    4894:	69b9      	ldr	r1, [r7, #24]
    4896:	69fa      	ldr	r2, [r7, #28]
    4898:	000b      	movs	r3, r1
    489a:	0f5b      	lsrs	r3, r3, #29
    489c:	0010      	movs	r0, r2
    489e:	00c0      	lsls	r0, r0, #3
    48a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    48a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    48a4:	4318      	orrs	r0, r3
    48a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    48a8:	000b      	movs	r3, r1
    48aa:	00db      	lsls	r3, r3, #3
    48ac:	63bb      	str	r3, [r7, #56]	; 0x38
    48ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    48b0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    48b2:	001a      	movs	r2, r3
    48b4:	0023      	movs	r3, r4
    48b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    48b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    48ba:	4c16      	ldr	r4, [pc, #88]	; (4914 <_sercom_get_async_baud_val+0x1bc>)
    48bc:	47a0      	blx	r4
    48be:	0003      	movs	r3, r0
    48c0:	000c      	movs	r4, r1
    48c2:	65bb      	str	r3, [r7, #88]	; 0x58
    48c4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    48c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    48c8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    48ca:	b2d9      	uxtb	r1, r3
    48cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    48ce:	b2db      	uxtb	r3, r3
    48d0:	00db      	lsls	r3, r3, #3
    48d2:	b2da      	uxtb	r2, r3
    48d4:	2317      	movs	r3, #23
    48d6:	2040      	movs	r0, #64	; 0x40
    48d8:	4684      	mov	ip, r0
    48da:	44bc      	add	ip, r7
    48dc:	4463      	add	r3, ip
    48de:	1a8a      	subs	r2, r1, r2
    48e0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    48e2:	2317      	movs	r3, #23
    48e4:	2240      	movs	r2, #64	; 0x40
    48e6:	4694      	mov	ip, r2
    48e8:	44bc      	add	ip, r7
    48ea:	4463      	add	r3, ip
    48ec:	781b      	ldrb	r3, [r3, #0]
    48ee:	035b      	lsls	r3, r3, #13
    48f0:	001a      	movs	r2, r3
    48f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    48f4:	4313      	orrs	r3, r2
    48f6:	67bb      	str	r3, [r7, #120]	; 0x78
    48f8:	2300      	movs	r3, #0
    48fa:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    48fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    48fe:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    4900:	b29a      	uxth	r2, r3
    4902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4904:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4906:	2300      	movs	r3, #0
}
    4908:	0018      	movs	r0, r3
    490a:	46bd      	mov	sp, r7
    490c:	b021      	add	sp, #132	; 0x84
    490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4910:	000082f1 	.word	0x000082f1
    4914:	000045fb 	.word	0x000045fb

00004918 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4918:	b580      	push	{r7, lr}
    491a:	b084      	sub	sp, #16
    491c:	af00      	add	r7, sp, #0
    491e:	0002      	movs	r2, r0
    4920:	1dfb      	adds	r3, r7, #7
    4922:	701a      	strb	r2, [r3, #0]
    4924:	1dbb      	adds	r3, r7, #6
    4926:	1c0a      	adds	r2, r1, #0
    4928:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    492a:	4b1a      	ldr	r3, [pc, #104]	; (4994 <sercom_set_gclk_generator+0x7c>)
    492c:	781b      	ldrb	r3, [r3, #0]
    492e:	2201      	movs	r2, #1
    4930:	4053      	eors	r3, r2
    4932:	b2db      	uxtb	r3, r3
    4934:	2b00      	cmp	r3, #0
    4936:	d103      	bne.n	4940 <sercom_set_gclk_generator+0x28>
    4938:	1dbb      	adds	r3, r7, #6
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	2b00      	cmp	r3, #0
    493e:	d01b      	beq.n	4978 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4940:	230c      	movs	r3, #12
    4942:	18fb      	adds	r3, r7, r3
    4944:	0018      	movs	r0, r3
    4946:	4b14      	ldr	r3, [pc, #80]	; (4998 <sercom_set_gclk_generator+0x80>)
    4948:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    494a:	230c      	movs	r3, #12
    494c:	18fb      	adds	r3, r7, r3
    494e:	1dfa      	adds	r2, r7, #7
    4950:	7812      	ldrb	r2, [r2, #0]
    4952:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4954:	230c      	movs	r3, #12
    4956:	18fb      	adds	r3, r7, r3
    4958:	0019      	movs	r1, r3
    495a:	2013      	movs	r0, #19
    495c:	4b0f      	ldr	r3, [pc, #60]	; (499c <sercom_set_gclk_generator+0x84>)
    495e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4960:	2013      	movs	r0, #19
    4962:	4b0f      	ldr	r3, [pc, #60]	; (49a0 <sercom_set_gclk_generator+0x88>)
    4964:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    4966:	4b0b      	ldr	r3, [pc, #44]	; (4994 <sercom_set_gclk_generator+0x7c>)
    4968:	1dfa      	adds	r2, r7, #7
    496a:	7812      	ldrb	r2, [r2, #0]
    496c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    496e:	4b09      	ldr	r3, [pc, #36]	; (4994 <sercom_set_gclk_generator+0x7c>)
    4970:	2201      	movs	r2, #1
    4972:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4974:	2300      	movs	r3, #0
    4976:	e008      	b.n	498a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4978:	4b06      	ldr	r3, [pc, #24]	; (4994 <sercom_set_gclk_generator+0x7c>)
    497a:	785b      	ldrb	r3, [r3, #1]
    497c:	1dfa      	adds	r2, r7, #7
    497e:	7812      	ldrb	r2, [r2, #0]
    4980:	429a      	cmp	r2, r3
    4982:	d101      	bne.n	4988 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    4984:	2300      	movs	r3, #0
    4986:	e000      	b.n	498a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4988:	231d      	movs	r3, #29
}
    498a:	0018      	movs	r0, r3
    498c:	46bd      	mov	sp, r7
    498e:	b004      	add	sp, #16
    4990:	bd80      	pop	{r7, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	20000274 	.word	0x20000274
    4998:	000045e5 	.word	0x000045e5
    499c:	00007061 	.word	0x00007061
    49a0:	000070a5 	.word	0x000070a5

000049a4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    49a4:	b580      	push	{r7, lr}
    49a6:	b082      	sub	sp, #8
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
    49ac:	000a      	movs	r2, r1
    49ae:	1cfb      	adds	r3, r7, #3
    49b0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    49b2:	687b      	ldr	r3, [r7, #4]
    49b4:	4a4d      	ldr	r2, [pc, #308]	; (4aec <_sercom_get_default_pad+0x148>)
    49b6:	4293      	cmp	r3, r2
    49b8:	d03f      	beq.n	4a3a <_sercom_get_default_pad+0x96>
    49ba:	4a4c      	ldr	r2, [pc, #304]	; (4aec <_sercom_get_default_pad+0x148>)
    49bc:	4293      	cmp	r3, r2
    49be:	d806      	bhi.n	49ce <_sercom_get_default_pad+0x2a>
    49c0:	4a4b      	ldr	r2, [pc, #300]	; (4af0 <_sercom_get_default_pad+0x14c>)
    49c2:	4293      	cmp	r3, r2
    49c4:	d00f      	beq.n	49e6 <_sercom_get_default_pad+0x42>
    49c6:	4a4b      	ldr	r2, [pc, #300]	; (4af4 <_sercom_get_default_pad+0x150>)
    49c8:	4293      	cmp	r3, r2
    49ca:	d021      	beq.n	4a10 <_sercom_get_default_pad+0x6c>
    49cc:	e089      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    49ce:	4a4a      	ldr	r2, [pc, #296]	; (4af8 <_sercom_get_default_pad+0x154>)
    49d0:	4293      	cmp	r3, r2
    49d2:	d100      	bne.n	49d6 <_sercom_get_default_pad+0x32>
    49d4:	e05b      	b.n	4a8e <_sercom_get_default_pad+0xea>
    49d6:	4a49      	ldr	r2, [pc, #292]	; (4afc <_sercom_get_default_pad+0x158>)
    49d8:	4293      	cmp	r3, r2
    49da:	d100      	bne.n	49de <_sercom_get_default_pad+0x3a>
    49dc:	e06c      	b.n	4ab8 <_sercom_get_default_pad+0x114>
    49de:	4a48      	ldr	r2, [pc, #288]	; (4b00 <_sercom_get_default_pad+0x15c>)
    49e0:	4293      	cmp	r3, r2
    49e2:	d03f      	beq.n	4a64 <_sercom_get_default_pad+0xc0>
    49e4:	e07d      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    49e6:	1cfb      	adds	r3, r7, #3
    49e8:	781b      	ldrb	r3, [r3, #0]
    49ea:	2b01      	cmp	r3, #1
    49ec:	d00a      	beq.n	4a04 <_sercom_get_default_pad+0x60>
    49ee:	dc02      	bgt.n	49f6 <_sercom_get_default_pad+0x52>
    49f0:	2b00      	cmp	r3, #0
    49f2:	d005      	beq.n	4a00 <_sercom_get_default_pad+0x5c>
    49f4:	e075      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    49f6:	2b02      	cmp	r3, #2
    49f8:	d006      	beq.n	4a08 <_sercom_get_default_pad+0x64>
    49fa:	2b03      	cmp	r3, #3
    49fc:	d006      	beq.n	4a0c <_sercom_get_default_pad+0x68>
    49fe:	e070      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a00:	4b40      	ldr	r3, [pc, #256]	; (4b04 <_sercom_get_default_pad+0x160>)
    4a02:	e06f      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a04:	4b40      	ldr	r3, [pc, #256]	; (4b08 <_sercom_get_default_pad+0x164>)
    4a06:	e06d      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a08:	4b40      	ldr	r3, [pc, #256]	; (4b0c <_sercom_get_default_pad+0x168>)
    4a0a:	e06b      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a0c:	4b40      	ldr	r3, [pc, #256]	; (4b10 <_sercom_get_default_pad+0x16c>)
    4a0e:	e069      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a10:	1cfb      	adds	r3, r7, #3
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	2b01      	cmp	r3, #1
    4a16:	d00a      	beq.n	4a2e <_sercom_get_default_pad+0x8a>
    4a18:	dc02      	bgt.n	4a20 <_sercom_get_default_pad+0x7c>
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d005      	beq.n	4a2a <_sercom_get_default_pad+0x86>
    4a1e:	e060      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a20:	2b02      	cmp	r3, #2
    4a22:	d006      	beq.n	4a32 <_sercom_get_default_pad+0x8e>
    4a24:	2b03      	cmp	r3, #3
    4a26:	d006      	beq.n	4a36 <_sercom_get_default_pad+0x92>
    4a28:	e05b      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a2a:	2303      	movs	r3, #3
    4a2c:	e05a      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a2e:	4b39      	ldr	r3, [pc, #228]	; (4b14 <_sercom_get_default_pad+0x170>)
    4a30:	e058      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a32:	4b39      	ldr	r3, [pc, #228]	; (4b18 <_sercom_get_default_pad+0x174>)
    4a34:	e056      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a36:	4b39      	ldr	r3, [pc, #228]	; (4b1c <_sercom_get_default_pad+0x178>)
    4a38:	e054      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a3a:	1cfb      	adds	r3, r7, #3
    4a3c:	781b      	ldrb	r3, [r3, #0]
    4a3e:	2b01      	cmp	r3, #1
    4a40:	d00a      	beq.n	4a58 <_sercom_get_default_pad+0xb4>
    4a42:	dc02      	bgt.n	4a4a <_sercom_get_default_pad+0xa6>
    4a44:	2b00      	cmp	r3, #0
    4a46:	d005      	beq.n	4a54 <_sercom_get_default_pad+0xb0>
    4a48:	e04b      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a4a:	2b02      	cmp	r3, #2
    4a4c:	d006      	beq.n	4a5c <_sercom_get_default_pad+0xb8>
    4a4e:	2b03      	cmp	r3, #3
    4a50:	d006      	beq.n	4a60 <_sercom_get_default_pad+0xbc>
    4a52:	e046      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a54:	4b32      	ldr	r3, [pc, #200]	; (4b20 <_sercom_get_default_pad+0x17c>)
    4a56:	e045      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a58:	4b32      	ldr	r3, [pc, #200]	; (4b24 <_sercom_get_default_pad+0x180>)
    4a5a:	e043      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a5c:	4b32      	ldr	r3, [pc, #200]	; (4b28 <_sercom_get_default_pad+0x184>)
    4a5e:	e041      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a60:	4b32      	ldr	r3, [pc, #200]	; (4b2c <_sercom_get_default_pad+0x188>)
    4a62:	e03f      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a64:	1cfb      	adds	r3, r7, #3
    4a66:	781b      	ldrb	r3, [r3, #0]
    4a68:	2b01      	cmp	r3, #1
    4a6a:	d00a      	beq.n	4a82 <_sercom_get_default_pad+0xde>
    4a6c:	dc02      	bgt.n	4a74 <_sercom_get_default_pad+0xd0>
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d005      	beq.n	4a7e <_sercom_get_default_pad+0xda>
    4a72:	e036      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a74:	2b02      	cmp	r3, #2
    4a76:	d006      	beq.n	4a86 <_sercom_get_default_pad+0xe2>
    4a78:	2b03      	cmp	r3, #3
    4a7a:	d006      	beq.n	4a8a <_sercom_get_default_pad+0xe6>
    4a7c:	e031      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a7e:	4b2c      	ldr	r3, [pc, #176]	; (4b30 <_sercom_get_default_pad+0x18c>)
    4a80:	e030      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a82:	4b2c      	ldr	r3, [pc, #176]	; (4b34 <_sercom_get_default_pad+0x190>)
    4a84:	e02e      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a86:	4b2c      	ldr	r3, [pc, #176]	; (4b38 <_sercom_get_default_pad+0x194>)
    4a88:	e02c      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a8a:	4b2c      	ldr	r3, [pc, #176]	; (4b3c <_sercom_get_default_pad+0x198>)
    4a8c:	e02a      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4a8e:	1cfb      	adds	r3, r7, #3
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	2b01      	cmp	r3, #1
    4a94:	d00a      	beq.n	4aac <_sercom_get_default_pad+0x108>
    4a96:	dc02      	bgt.n	4a9e <_sercom_get_default_pad+0xfa>
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d005      	beq.n	4aa8 <_sercom_get_default_pad+0x104>
    4a9c:	e021      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4a9e:	2b02      	cmp	r3, #2
    4aa0:	d006      	beq.n	4ab0 <_sercom_get_default_pad+0x10c>
    4aa2:	2b03      	cmp	r3, #3
    4aa4:	d006      	beq.n	4ab4 <_sercom_get_default_pad+0x110>
    4aa6:	e01c      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4aa8:	4b25      	ldr	r3, [pc, #148]	; (4b40 <_sercom_get_default_pad+0x19c>)
    4aaa:	e01b      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4aac:	4b25      	ldr	r3, [pc, #148]	; (4b44 <_sercom_get_default_pad+0x1a0>)
    4aae:	e019      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ab0:	4b25      	ldr	r3, [pc, #148]	; (4b48 <_sercom_get_default_pad+0x1a4>)
    4ab2:	e017      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ab4:	4b25      	ldr	r3, [pc, #148]	; (4b4c <_sercom_get_default_pad+0x1a8>)
    4ab6:	e015      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ab8:	1cfb      	adds	r3, r7, #3
    4aba:	781b      	ldrb	r3, [r3, #0]
    4abc:	2b01      	cmp	r3, #1
    4abe:	d00a      	beq.n	4ad6 <_sercom_get_default_pad+0x132>
    4ac0:	dc02      	bgt.n	4ac8 <_sercom_get_default_pad+0x124>
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d005      	beq.n	4ad2 <_sercom_get_default_pad+0x12e>
    4ac6:	e00c      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4ac8:	2b02      	cmp	r3, #2
    4aca:	d006      	beq.n	4ada <_sercom_get_default_pad+0x136>
    4acc:	2b03      	cmp	r3, #3
    4ace:	d006      	beq.n	4ade <_sercom_get_default_pad+0x13a>
    4ad0:	e007      	b.n	4ae2 <_sercom_get_default_pad+0x13e>
    4ad2:	4b1f      	ldr	r3, [pc, #124]	; (4b50 <_sercom_get_default_pad+0x1ac>)
    4ad4:	e006      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ad6:	4b1f      	ldr	r3, [pc, #124]	; (4b54 <_sercom_get_default_pad+0x1b0>)
    4ad8:	e004      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ada:	4b1f      	ldr	r3, [pc, #124]	; (4b58 <_sercom_get_default_pad+0x1b4>)
    4adc:	e002      	b.n	4ae4 <_sercom_get_default_pad+0x140>
    4ade:	4b1f      	ldr	r3, [pc, #124]	; (4b5c <_sercom_get_default_pad+0x1b8>)
    4ae0:	e000      	b.n	4ae4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4ae2:	2300      	movs	r3, #0
}
    4ae4:	0018      	movs	r0, r3
    4ae6:	46bd      	mov	sp, r7
    4ae8:	b002      	add	sp, #8
    4aea:	bd80      	pop	{r7, pc}
    4aec:	42001000 	.word	0x42001000
    4af0:	42000800 	.word	0x42000800
    4af4:	42000c00 	.word	0x42000c00
    4af8:	42001800 	.word	0x42001800
    4afc:	42001c00 	.word	0x42001c00
    4b00:	42001400 	.word	0x42001400
    4b04:	00040003 	.word	0x00040003
    4b08:	00050003 	.word	0x00050003
    4b0c:	00060003 	.word	0x00060003
    4b10:	00070003 	.word	0x00070003
    4b14:	00010003 	.word	0x00010003
    4b18:	001e0003 	.word	0x001e0003
    4b1c:	001f0003 	.word	0x001f0003
    4b20:	00080003 	.word	0x00080003
    4b24:	00090003 	.word	0x00090003
    4b28:	000a0003 	.word	0x000a0003
    4b2c:	000b0003 	.word	0x000b0003
    4b30:	00100003 	.word	0x00100003
    4b34:	00110003 	.word	0x00110003
    4b38:	00120003 	.word	0x00120003
    4b3c:	00130003 	.word	0x00130003
    4b40:	000c0003 	.word	0x000c0003
    4b44:	000d0003 	.word	0x000d0003
    4b48:	000e0003 	.word	0x000e0003
    4b4c:	000f0003 	.word	0x000f0003
    4b50:	00160003 	.word	0x00160003
    4b54:	00170003 	.word	0x00170003
    4b58:	00180003 	.word	0x00180003
    4b5c:	00190003 	.word	0x00190003

00004b60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4b60:	b590      	push	{r4, r7, lr}
    4b62:	b08b      	sub	sp, #44	; 0x2c
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4b68:	230c      	movs	r3, #12
    4b6a:	18fb      	adds	r3, r7, r3
    4b6c:	4a0f      	ldr	r2, [pc, #60]	; (4bac <_sercom_get_sercom_inst_index+0x4c>)
    4b6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4b70:	c313      	stmia	r3!, {r0, r1, r4}
    4b72:	ca13      	ldmia	r2!, {r0, r1, r4}
    4b74:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4b76:	2300      	movs	r3, #0
    4b78:	627b      	str	r3, [r7, #36]	; 0x24
    4b7a:	e00e      	b.n	4b9a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4b7c:	230c      	movs	r3, #12
    4b7e:	18fb      	adds	r3, r7, r3
    4b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b82:	0092      	lsls	r2, r2, #2
    4b84:	58d3      	ldr	r3, [r2, r3]
    4b86:	001a      	movs	r2, r3
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	429a      	cmp	r2, r3
    4b8c:	d102      	bne.n	4b94 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b90:	b2db      	uxtb	r3, r3
    4b92:	e006      	b.n	4ba2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b96:	3301      	adds	r3, #1
    4b98:	627b      	str	r3, [r7, #36]	; 0x24
    4b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b9c:	2b05      	cmp	r3, #5
    4b9e:	d9ed      	bls.n	4b7c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4ba0:	2300      	movs	r3, #0
}
    4ba2:	0018      	movs	r0, r3
    4ba4:	46bd      	mov	sp, r7
    4ba6:	b00b      	add	sp, #44	; 0x2c
    4ba8:	bd90      	pop	{r4, r7, pc}
    4baa:	46c0      	nop			; (mov r8, r8)
    4bac:	0000c12c 	.word	0x0000c12c

00004bb0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	0002      	movs	r2, r0
    4bb8:	1dfb      	adds	r3, r7, #7
    4bba:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4bbc:	46c0      	nop			; (mov r8, r8)
    4bbe:	46bd      	mov	sp, r7
    4bc0:	b002      	add	sp, #8
    4bc2:	bd80      	pop	{r7, pc}

00004bc4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b084      	sub	sp, #16
    4bc8:	af00      	add	r7, sp, #0
    4bca:	0002      	movs	r2, r0
    4bcc:	6039      	str	r1, [r7, #0]
    4bce:	1dfb      	adds	r3, r7, #7
    4bd0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4bd2:	4b13      	ldr	r3, [pc, #76]	; (4c20 <_sercom_set_handler+0x5c>)
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	2201      	movs	r2, #1
    4bd8:	4053      	eors	r3, r2
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d015      	beq.n	4c0c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4be0:	2300      	movs	r3, #0
    4be2:	60fb      	str	r3, [r7, #12]
    4be4:	e00c      	b.n	4c00 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4be6:	4b0f      	ldr	r3, [pc, #60]	; (4c24 <_sercom_set_handler+0x60>)
    4be8:	68fa      	ldr	r2, [r7, #12]
    4bea:	0092      	lsls	r2, r2, #2
    4bec:	490e      	ldr	r1, [pc, #56]	; (4c28 <_sercom_set_handler+0x64>)
    4bee:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4bf0:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <_sercom_set_handler+0x68>)
    4bf2:	68fa      	ldr	r2, [r7, #12]
    4bf4:	0092      	lsls	r2, r2, #2
    4bf6:	2100      	movs	r1, #0
    4bf8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	3301      	adds	r3, #1
    4bfe:	60fb      	str	r3, [r7, #12]
    4c00:	68fb      	ldr	r3, [r7, #12]
    4c02:	2b05      	cmp	r3, #5
    4c04:	d9ef      	bls.n	4be6 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4c06:	4b06      	ldr	r3, [pc, #24]	; (4c20 <_sercom_set_handler+0x5c>)
    4c08:	2201      	movs	r2, #1
    4c0a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4c0c:	1dfb      	adds	r3, r7, #7
    4c0e:	781a      	ldrb	r2, [r3, #0]
    4c10:	4b04      	ldr	r3, [pc, #16]	; (4c24 <_sercom_set_handler+0x60>)
    4c12:	0092      	lsls	r2, r2, #2
    4c14:	6839      	ldr	r1, [r7, #0]
    4c16:	50d1      	str	r1, [r2, r3]
}
    4c18:	46c0      	nop			; (mov r8, r8)
    4c1a:	46bd      	mov	sp, r7
    4c1c:	b004      	add	sp, #16
    4c1e:	bd80      	pop	{r7, pc}
    4c20:	20000276 	.word	0x20000276
    4c24:	20000278 	.word	0x20000278
    4c28:	00004bb1 	.word	0x00004bb1
    4c2c:	200003d8 	.word	0x200003d8

00004c30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4c30:	b590      	push	{r4, r7, lr}
    4c32:	b085      	sub	sp, #20
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4c38:	2308      	movs	r3, #8
    4c3a:	18fb      	adds	r3, r7, r3
    4c3c:	4a0b      	ldr	r2, [pc, #44]	; (4c6c <_sercom_get_interrupt_vector+0x3c>)
    4c3e:	6811      	ldr	r1, [r2, #0]
    4c40:	6019      	str	r1, [r3, #0]
    4c42:	8892      	ldrh	r2, [r2, #4]
    4c44:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4c46:	230f      	movs	r3, #15
    4c48:	18fc      	adds	r4, r7, r3
    4c4a:	687b      	ldr	r3, [r7, #4]
    4c4c:	0018      	movs	r0, r3
    4c4e:	4b08      	ldr	r3, [pc, #32]	; (4c70 <_sercom_get_interrupt_vector+0x40>)
    4c50:	4798      	blx	r3
    4c52:	0003      	movs	r3, r0
    4c54:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4c56:	230f      	movs	r3, #15
    4c58:	18fb      	adds	r3, r7, r3
    4c5a:	781b      	ldrb	r3, [r3, #0]
    4c5c:	2208      	movs	r2, #8
    4c5e:	18ba      	adds	r2, r7, r2
    4c60:	5cd3      	ldrb	r3, [r2, r3]
    4c62:	b25b      	sxtb	r3, r3
}
    4c64:	0018      	movs	r0, r3
    4c66:	46bd      	mov	sp, r7
    4c68:	b005      	add	sp, #20
    4c6a:	bd90      	pop	{r4, r7, pc}
    4c6c:	0000c144 	.word	0x0000c144
    4c70:	00004b61 	.word	0x00004b61

00004c74 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4c74:	b580      	push	{r7, lr}
    4c76:	af00      	add	r7, sp, #0
    4c78:	4b03      	ldr	r3, [pc, #12]	; (4c88 <SERCOM0_Handler+0x14>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2000      	movs	r0, #0
    4c7e:	4798      	blx	r3
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	bd80      	pop	{r7, pc}
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	20000278 	.word	0x20000278

00004c8c <SERCOM1_Handler>:
    4c8c:	b580      	push	{r7, lr}
    4c8e:	af00      	add	r7, sp, #0
    4c90:	4b03      	ldr	r3, [pc, #12]	; (4ca0 <SERCOM1_Handler+0x14>)
    4c92:	685b      	ldr	r3, [r3, #4]
    4c94:	2001      	movs	r0, #1
    4c96:	4798      	blx	r3
    4c98:	46c0      	nop			; (mov r8, r8)
    4c9a:	46bd      	mov	sp, r7
    4c9c:	bd80      	pop	{r7, pc}
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	20000278 	.word	0x20000278

00004ca4 <SERCOM2_Handler>:
    4ca4:	b580      	push	{r7, lr}
    4ca6:	af00      	add	r7, sp, #0
    4ca8:	4b03      	ldr	r3, [pc, #12]	; (4cb8 <SERCOM2_Handler+0x14>)
    4caa:	689b      	ldr	r3, [r3, #8]
    4cac:	2002      	movs	r0, #2
    4cae:	4798      	blx	r3
    4cb0:	46c0      	nop			; (mov r8, r8)
    4cb2:	46bd      	mov	sp, r7
    4cb4:	bd80      	pop	{r7, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	20000278 	.word	0x20000278

00004cbc <SERCOM3_Handler>:
    4cbc:	b580      	push	{r7, lr}
    4cbe:	af00      	add	r7, sp, #0
    4cc0:	4b03      	ldr	r3, [pc, #12]	; (4cd0 <SERCOM3_Handler+0x14>)
    4cc2:	68db      	ldr	r3, [r3, #12]
    4cc4:	2003      	movs	r0, #3
    4cc6:	4798      	blx	r3
    4cc8:	46c0      	nop			; (mov r8, r8)
    4cca:	46bd      	mov	sp, r7
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	20000278 	.word	0x20000278

00004cd4 <SERCOM4_Handler>:
    4cd4:	b580      	push	{r7, lr}
    4cd6:	af00      	add	r7, sp, #0
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <SERCOM4_Handler+0x14>)
    4cda:	691b      	ldr	r3, [r3, #16]
    4cdc:	2004      	movs	r0, #4
    4cde:	4798      	blx	r3
    4ce0:	46c0      	nop			; (mov r8, r8)
    4ce2:	46bd      	mov	sp, r7
    4ce4:	bd80      	pop	{r7, pc}
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	20000278 	.word	0x20000278

00004cec <SERCOM5_Handler>:
    4cec:	b580      	push	{r7, lr}
    4cee:	af00      	add	r7, sp, #0
    4cf0:	4b03      	ldr	r3, [pc, #12]	; (4d00 <SERCOM5_Handler+0x14>)
    4cf2:	695b      	ldr	r3, [r3, #20]
    4cf4:	2005      	movs	r0, #5
    4cf6:	4798      	blx	r3
    4cf8:	46c0      	nop			; (mov r8, r8)
    4cfa:	46bd      	mov	sp, r7
    4cfc:	bd80      	pop	{r7, pc}
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	20000278 	.word	0x20000278

00004d04 <system_pinmux_get_config_defaults>:
{
    4d04:	b580      	push	{r7, lr}
    4d06:	b082      	sub	sp, #8
    4d08:	af00      	add	r7, sp, #0
    4d0a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	2280      	movs	r2, #128	; 0x80
    4d10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2200      	movs	r2, #0
    4d16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	2201      	movs	r2, #1
    4d1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	2200      	movs	r2, #0
    4d22:	70da      	strb	r2, [r3, #3]
}
    4d24:	46c0      	nop			; (mov r8, r8)
    4d26:	46bd      	mov	sp, r7
    4d28:	b002      	add	sp, #8
    4d2a:	bd80      	pop	{r7, pc}

00004d2c <system_gclk_chan_get_config_defaults>:
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b082      	sub	sp, #8
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	2200      	movs	r2, #0
    4d38:	701a      	strb	r2, [r3, #0]
}
    4d3a:	46c0      	nop			; (mov r8, r8)
    4d3c:	46bd      	mov	sp, r7
    4d3e:	b002      	add	sp, #8
    4d40:	bd80      	pop	{r7, pc}
	...

00004d44 <system_apb_clock_set_mask>:
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b082      	sub	sp, #8
    4d48:	af00      	add	r7, sp, #0
    4d4a:	0002      	movs	r2, r0
    4d4c:	6039      	str	r1, [r7, #0]
    4d4e:	1dfb      	adds	r3, r7, #7
    4d50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4d52:	1dfb      	adds	r3, r7, #7
    4d54:	781b      	ldrb	r3, [r3, #0]
    4d56:	2b01      	cmp	r3, #1
    4d58:	d00a      	beq.n	4d70 <system_apb_clock_set_mask+0x2c>
    4d5a:	2b02      	cmp	r3, #2
    4d5c:	d00f      	beq.n	4d7e <system_apb_clock_set_mask+0x3a>
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d114      	bne.n	4d8c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4d62:	4b0e      	ldr	r3, [pc, #56]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d64:	4a0d      	ldr	r2, [pc, #52]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d66:	6991      	ldr	r1, [r2, #24]
    4d68:	683a      	ldr	r2, [r7, #0]
    4d6a:	430a      	orrs	r2, r1
    4d6c:	619a      	str	r2, [r3, #24]
			break;
    4d6e:	e00f      	b.n	4d90 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4d70:	4b0a      	ldr	r3, [pc, #40]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d72:	4a0a      	ldr	r2, [pc, #40]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d74:	69d1      	ldr	r1, [r2, #28]
    4d76:	683a      	ldr	r2, [r7, #0]
    4d78:	430a      	orrs	r2, r1
    4d7a:	61da      	str	r2, [r3, #28]
			break;
    4d7c:	e008      	b.n	4d90 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4d7e:	4b07      	ldr	r3, [pc, #28]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d80:	4a06      	ldr	r2, [pc, #24]	; (4d9c <system_apb_clock_set_mask+0x58>)
    4d82:	6a11      	ldr	r1, [r2, #32]
    4d84:	683a      	ldr	r2, [r7, #0]
    4d86:	430a      	orrs	r2, r1
    4d88:	621a      	str	r2, [r3, #32]
			break;
    4d8a:	e001      	b.n	4d90 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4d8c:	2317      	movs	r3, #23
    4d8e:	e000      	b.n	4d92 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4d90:	2300      	movs	r3, #0
}
    4d92:	0018      	movs	r0, r3
    4d94:	46bd      	mov	sp, r7
    4d96:	b002      	add	sp, #8
    4d98:	bd80      	pop	{r7, pc}
    4d9a:	46c0      	nop			; (mov r8, r8)
    4d9c:	40000400 	.word	0x40000400

00004da0 <system_is_debugger_present>:
{
    4da0:	b580      	push	{r7, lr}
    4da2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4da4:	4b05      	ldr	r3, [pc, #20]	; (4dbc <system_is_debugger_present+0x1c>)
    4da6:	789b      	ldrb	r3, [r3, #2]
    4da8:	b2db      	uxtb	r3, r3
    4daa:	001a      	movs	r2, r3
    4dac:	2302      	movs	r3, #2
    4dae:	4013      	ands	r3, r2
    4db0:	1e5a      	subs	r2, r3, #1
    4db2:	4193      	sbcs	r3, r2
    4db4:	b2db      	uxtb	r3, r3
}
    4db6:	0018      	movs	r0, r3
    4db8:	46bd      	mov	sp, r7
    4dba:	bd80      	pop	{r7, pc}
    4dbc:	41002000 	.word	0x41002000

00004dc0 <spi_is_write_complete>:
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	b084      	sub	sp, #16
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4dce:	68fb      	ldr	r3, [r7, #12]
    4dd0:	7e1b      	ldrb	r3, [r3, #24]
    4dd2:	b2db      	uxtb	r3, r3
    4dd4:	001a      	movs	r2, r3
    4dd6:	2302      	movs	r3, #2
    4dd8:	4013      	ands	r3, r2
    4dda:	1e5a      	subs	r2, r3, #1
    4ddc:	4193      	sbcs	r3, r2
    4dde:	b2db      	uxtb	r3, r3
}
    4de0:	0018      	movs	r0, r3
    4de2:	46bd      	mov	sp, r7
    4de4:	b004      	add	sp, #16
    4de6:	bd80      	pop	{r7, pc}

00004de8 <spi_is_ready_to_write>:
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b084      	sub	sp, #16
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4df6:	68fb      	ldr	r3, [r7, #12]
    4df8:	7e1b      	ldrb	r3, [r3, #24]
    4dfa:	b2db      	uxtb	r3, r3
    4dfc:	001a      	movs	r2, r3
    4dfe:	2301      	movs	r3, #1
    4e00:	4013      	ands	r3, r2
    4e02:	1e5a      	subs	r2, r3, #1
    4e04:	4193      	sbcs	r3, r2
    4e06:	b2db      	uxtb	r3, r3
}
    4e08:	0018      	movs	r0, r3
    4e0a:	46bd      	mov	sp, r7
    4e0c:	b004      	add	sp, #16
    4e0e:	bd80      	pop	{r7, pc}

00004e10 <spi_is_ready_to_read>:
{
    4e10:	b580      	push	{r7, lr}
    4e12:	b084      	sub	sp, #16
    4e14:	af00      	add	r7, sp, #0
    4e16:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	681b      	ldr	r3, [r3, #0]
    4e1c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e1e:	68fb      	ldr	r3, [r7, #12]
    4e20:	7e1b      	ldrb	r3, [r3, #24]
    4e22:	b2db      	uxtb	r3, r3
    4e24:	001a      	movs	r2, r3
    4e26:	2304      	movs	r3, #4
    4e28:	4013      	ands	r3, r2
    4e2a:	1e5a      	subs	r2, r3, #1
    4e2c:	4193      	sbcs	r3, r2
    4e2e:	b2db      	uxtb	r3, r3
}
    4e30:	0018      	movs	r0, r3
    4e32:	46bd      	mov	sp, r7
    4e34:	b004      	add	sp, #16
    4e36:	bd80      	pop	{r7, pc}

00004e38 <spi_write>:
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b084      	sub	sp, #16
    4e3c:	af00      	add	r7, sp, #0
    4e3e:	6078      	str	r0, [r7, #4]
    4e40:	000a      	movs	r2, r1
    4e42:	1cbb      	adds	r3, r7, #2
    4e44:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	0018      	movs	r0, r3
    4e50:	4b0a      	ldr	r3, [pc, #40]	; (4e7c <spi_write+0x44>)
    4e52:	4798      	blx	r3
    4e54:	0003      	movs	r3, r0
    4e56:	001a      	movs	r2, r3
    4e58:	2301      	movs	r3, #1
    4e5a:	4053      	eors	r3, r2
    4e5c:	b2db      	uxtb	r3, r3
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d001      	beq.n	4e66 <spi_write+0x2e>
		return STATUS_BUSY;
    4e62:	2305      	movs	r3, #5
    4e64:	e006      	b.n	4e74 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e66:	1cbb      	adds	r3, r7, #2
    4e68:	881b      	ldrh	r3, [r3, #0]
    4e6a:	05db      	lsls	r3, r3, #23
    4e6c:	0dda      	lsrs	r2, r3, #23
    4e6e:	68fb      	ldr	r3, [r7, #12]
    4e70:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    4e72:	2300      	movs	r3, #0
}
    4e74:	0018      	movs	r0, r3
    4e76:	46bd      	mov	sp, r7
    4e78:	b004      	add	sp, #16
    4e7a:	bd80      	pop	{r7, pc}
    4e7c:	00004de9 	.word	0x00004de9

00004e80 <spi_read>:
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b084      	sub	sp, #16
    4e84:	af00      	add	r7, sp, #0
    4e86:	6078      	str	r0, [r7, #4]
    4e88:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	0018      	movs	r0, r3
    4e94:	4b1b      	ldr	r3, [pc, #108]	; (4f04 <spi_read+0x84>)
    4e96:	4798      	blx	r3
    4e98:	0003      	movs	r3, r0
    4e9a:	001a      	movs	r2, r3
    4e9c:	2301      	movs	r3, #1
    4e9e:	4053      	eors	r3, r2
    4ea0:	b2db      	uxtb	r3, r3
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d001      	beq.n	4eaa <spi_read+0x2a>
		return STATUS_ERR_IO;
    4ea6:	2310      	movs	r3, #16
    4ea8:	e027      	b.n	4efa <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    4eaa:	230f      	movs	r3, #15
    4eac:	18fb      	adds	r3, r7, r3
    4eae:	2200      	movs	r2, #0
    4eb0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4eb2:	68bb      	ldr	r3, [r7, #8]
    4eb4:	8b5b      	ldrh	r3, [r3, #26]
    4eb6:	b29b      	uxth	r3, r3
    4eb8:	001a      	movs	r2, r3
    4eba:	2304      	movs	r3, #4
    4ebc:	4013      	ands	r3, r2
    4ebe:	d006      	beq.n	4ece <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4ec0:	230f      	movs	r3, #15
    4ec2:	18fb      	adds	r3, r7, r3
    4ec4:	221e      	movs	r2, #30
    4ec6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4ec8:	68bb      	ldr	r3, [r7, #8]
    4eca:	2204      	movs	r2, #4
    4ecc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	799b      	ldrb	r3, [r3, #6]
    4ed2:	2b01      	cmp	r3, #1
    4ed4:	d108      	bne.n	4ee8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ed6:	68bb      	ldr	r3, [r7, #8]
    4ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4eda:	b29b      	uxth	r3, r3
    4edc:	05db      	lsls	r3, r3, #23
    4ede:	0ddb      	lsrs	r3, r3, #23
    4ee0:	b29a      	uxth	r2, r3
    4ee2:	683b      	ldr	r3, [r7, #0]
    4ee4:	801a      	strh	r2, [r3, #0]
    4ee6:	e005      	b.n	4ef4 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ee8:	68bb      	ldr	r3, [r7, #8]
    4eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4eec:	b2db      	uxtb	r3, r3
    4eee:	b29a      	uxth	r2, r3
    4ef0:	683b      	ldr	r3, [r7, #0]
    4ef2:	801a      	strh	r2, [r3, #0]
	return retval;
    4ef4:	230f      	movs	r3, #15
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	781b      	ldrb	r3, [r3, #0]
}
    4efa:	0018      	movs	r0, r3
    4efc:	46bd      	mov	sp, r7
    4efe:	b004      	add	sp, #16
    4f00:	bd80      	pop	{r7, pc}
    4f02:	46c0      	nop			; (mov r8, r8)
    4f04:	00004e11 	.word	0x00004e11

00004f08 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4f08:	b590      	push	{r4, r7, lr}
    4f0a:	b093      	sub	sp, #76	; 0x4c
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	6078      	str	r0, [r7, #4]
    4f10:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	681b      	ldr	r3, [r3, #0]
    4f16:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	681b      	ldr	r3, [r3, #0]
    4f1c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4f1e:	231c      	movs	r3, #28
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	0018      	movs	r0, r3
    4f24:	4b75      	ldr	r3, [pc, #468]	; (50fc <_spi_set_config+0x1f4>)
    4f26:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f28:	231c      	movs	r3, #28
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	2200      	movs	r2, #0
    4f2e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4f30:	683b      	ldr	r3, [r7, #0]
    4f32:	781b      	ldrb	r3, [r3, #0]
    4f34:	2b00      	cmp	r3, #0
    4f36:	d103      	bne.n	4f40 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4f38:	231c      	movs	r3, #28
    4f3a:	18fb      	adds	r3, r7, r3
    4f3c:	2200      	movs	r2, #0
    4f3e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4f40:	683b      	ldr	r3, [r7, #0]
    4f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4f44:	230c      	movs	r3, #12
    4f46:	18fb      	adds	r3, r7, r3
    4f48:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4f4a:	683b      	ldr	r3, [r7, #0]
    4f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    4f4e:	230c      	movs	r3, #12
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4f54:	683b      	ldr	r3, [r7, #0]
    4f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4f58:	230c      	movs	r3, #12
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4f5e:	683b      	ldr	r3, [r7, #0]
    4f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4f62:	230c      	movs	r3, #12
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f68:	2347      	movs	r3, #71	; 0x47
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	2200      	movs	r2, #0
    4f6e:	701a      	strb	r2, [r3, #0]
    4f70:	e02c      	b.n	4fcc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f72:	2347      	movs	r3, #71	; 0x47
    4f74:	18fb      	adds	r3, r7, r3
    4f76:	781a      	ldrb	r2, [r3, #0]
    4f78:	230c      	movs	r3, #12
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	0092      	lsls	r2, r2, #2
    4f7e:	58d3      	ldr	r3, [r2, r3]
    4f80:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f84:	2b00      	cmp	r3, #0
    4f86:	d109      	bne.n	4f9c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4f88:	2347      	movs	r3, #71	; 0x47
    4f8a:	18fb      	adds	r3, r7, r3
    4f8c:	781a      	ldrb	r2, [r3, #0]
    4f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4f90:	0011      	movs	r1, r2
    4f92:	0018      	movs	r0, r3
    4f94:	4b5a      	ldr	r3, [pc, #360]	; (5100 <_spi_set_config+0x1f8>)
    4f96:	4798      	blx	r3
    4f98:	0003      	movs	r3, r0
    4f9a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f9e:	3301      	adds	r3, #1
    4fa0:	d00d      	beq.n	4fbe <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	231c      	movs	r3, #28
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4fae:	0c1b      	lsrs	r3, r3, #16
    4fb0:	b2db      	uxtb	r3, r3
    4fb2:	221c      	movs	r2, #28
    4fb4:	18ba      	adds	r2, r7, r2
    4fb6:	0011      	movs	r1, r2
    4fb8:	0018      	movs	r0, r3
    4fba:	4b52      	ldr	r3, [pc, #328]	; (5104 <_spi_set_config+0x1fc>)
    4fbc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4fbe:	2347      	movs	r3, #71	; 0x47
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	781a      	ldrb	r2, [r3, #0]
    4fc4:	2347      	movs	r3, #71	; 0x47
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	3201      	adds	r2, #1
    4fca:	701a      	strb	r2, [r3, #0]
    4fcc:	2347      	movs	r3, #71	; 0x47
    4fce:	18fb      	adds	r3, r7, r3
    4fd0:	781b      	ldrb	r3, [r3, #0]
    4fd2:	2b03      	cmp	r3, #3
    4fd4:	d9cd      	bls.n	4f72 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    4fd6:	683b      	ldr	r3, [r7, #0]
    4fd8:	781a      	ldrb	r2, [r3, #0]
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4fde:	683b      	ldr	r3, [r7, #0]
    4fe0:	7c1a      	ldrb	r2, [r3, #16]
    4fe2:	687b      	ldr	r3, [r7, #4]
    4fe4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4fe6:	683b      	ldr	r3, [r7, #0]
    4fe8:	7c9a      	ldrb	r2, [r3, #18]
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4fee:	683b      	ldr	r3, [r7, #0]
    4ff0:	7d1a      	ldrb	r2, [r3, #20]
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4ff6:	230a      	movs	r3, #10
    4ff8:	18fb      	adds	r3, r7, r3
    4ffa:	2200      	movs	r2, #0
    4ffc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4ffe:	2300      	movs	r3, #0
    5000:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    5002:	2300      	movs	r3, #0
    5004:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    5006:	683b      	ldr	r3, [r7, #0]
    5008:	781b      	ldrb	r3, [r3, #0]
    500a:	2b01      	cmp	r3, #1
    500c:	d129      	bne.n	5062 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    500e:	687b      	ldr	r3, [r7, #4]
    5010:	681b      	ldr	r3, [r3, #0]
    5012:	0018      	movs	r0, r3
    5014:	4b3c      	ldr	r3, [pc, #240]	; (5108 <_spi_set_config+0x200>)
    5016:	4798      	blx	r3
    5018:	0003      	movs	r3, r0
    501a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    501e:	3314      	adds	r3, #20
    5020:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5024:	b2db      	uxtb	r3, r3
    5026:	0018      	movs	r0, r3
    5028:	4b38      	ldr	r3, [pc, #224]	; (510c <_spi_set_config+0x204>)
    502a:	4798      	blx	r3
    502c:	0003      	movs	r3, r0
    502e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    5030:	683b      	ldr	r3, [r7, #0]
    5032:	699b      	ldr	r3, [r3, #24]
    5034:	2223      	movs	r2, #35	; 0x23
    5036:	18bc      	adds	r4, r7, r2
    5038:	220a      	movs	r2, #10
    503a:	18ba      	adds	r2, r7, r2
    503c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    503e:	0018      	movs	r0, r3
    5040:	4b33      	ldr	r3, [pc, #204]	; (5110 <_spi_set_config+0x208>)
    5042:	4798      	blx	r3
    5044:	0003      	movs	r3, r0
    5046:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    5048:	2323      	movs	r3, #35	; 0x23
    504a:	18fb      	adds	r3, r7, r3
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	2b00      	cmp	r3, #0
    5050:	d001      	beq.n	5056 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    5052:	2317      	movs	r3, #23
    5054:	e04e      	b.n	50f4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    5056:	230a      	movs	r3, #10
    5058:	18fb      	adds	r3, r7, r3
    505a:	881b      	ldrh	r3, [r3, #0]
    505c:	b2da      	uxtb	r2, r3
    505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5060:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    5062:	683b      	ldr	r3, [r7, #0]
    5064:	685b      	ldr	r3, [r3, #4]
    5066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5068:	4313      	orrs	r3, r2
    506a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    506c:	683b      	ldr	r3, [r7, #0]
    506e:	689b      	ldr	r3, [r3, #8]
    5070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5072:	4313      	orrs	r3, r2
    5074:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    5076:	683b      	ldr	r3, [r7, #0]
    5078:	68db      	ldr	r3, [r3, #12]
    507a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    507c:	4313      	orrs	r3, r2
    507e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    5080:	683b      	ldr	r3, [r7, #0]
    5082:	7c1b      	ldrb	r3, [r3, #16]
    5084:	001a      	movs	r2, r3
    5086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5088:	4313      	orrs	r3, r2
    508a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	7c5b      	ldrb	r3, [r3, #17]
    5090:	2b00      	cmp	r3, #0
    5092:	d103      	bne.n	509c <_spi_set_config+0x194>
    5094:	4b1f      	ldr	r3, [pc, #124]	; (5114 <_spi_set_config+0x20c>)
    5096:	4798      	blx	r3
    5098:	1e03      	subs	r3, r0, #0
    509a:	d003      	beq.n	50a4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    509c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    509e:	2280      	movs	r2, #128	; 0x80
    50a0:	4313      	orrs	r3, r2
    50a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    50a4:	683b      	ldr	r3, [r7, #0]
    50a6:	7c9b      	ldrb	r3, [r3, #18]
    50a8:	2b00      	cmp	r3, #0
    50aa:	d004      	beq.n	50b6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    50ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50ae:	2280      	movs	r2, #128	; 0x80
    50b0:	0292      	lsls	r2, r2, #10
    50b2:	4313      	orrs	r3, r2
    50b4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    50b6:	683b      	ldr	r3, [r7, #0]
    50b8:	7cdb      	ldrb	r3, [r3, #19]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d004      	beq.n	50c8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    50be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50c0:	2280      	movs	r2, #128	; 0x80
    50c2:	0092      	lsls	r2, r2, #2
    50c4:	4313      	orrs	r3, r2
    50c6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    50c8:	683b      	ldr	r3, [r7, #0]
    50ca:	7d1b      	ldrb	r3, [r3, #20]
    50cc:	2b00      	cmp	r3, #0
    50ce:	d004      	beq.n	50da <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    50d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50d2:	2280      	movs	r2, #128	; 0x80
    50d4:	0192      	lsls	r2, r2, #6
    50d6:	4313      	orrs	r3, r2
    50d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    50da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50dc:	681a      	ldr	r2, [r3, #0]
    50de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50e0:	431a      	orrs	r2, r3
    50e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50e4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    50e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50e8:	685a      	ldr	r2, [r3, #4]
    50ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50ec:	431a      	orrs	r2, r3
    50ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    50f0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    50f2:	2300      	movs	r3, #0
}
    50f4:	0018      	movs	r0, r3
    50f6:	46bd      	mov	sp, r7
    50f8:	b013      	add	sp, #76	; 0x4c
    50fa:	bd90      	pop	{r4, r7, pc}
    50fc:	00004d05 	.word	0x00004d05
    5100:	000049a5 	.word	0x000049a5
    5104:	0000734d 	.word	0x0000734d
    5108:	00004b61 	.word	0x00004b61
    510c:	00007185 	.word	0x00007185
    5110:	000046db 	.word	0x000046db
    5114:	00004da1 	.word	0x00004da1

00005118 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5118:	b590      	push	{r4, r7, lr}
    511a:	b08b      	sub	sp, #44	; 0x2c
    511c:	af00      	add	r7, sp, #0
    511e:	60f8      	str	r0, [r7, #12]
    5120:	60b9      	str	r1, [r7, #8]
    5122:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5124:	68fb      	ldr	r3, [r7, #12]
    5126:	68ba      	ldr	r2, [r7, #8]
    5128:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    512a:	68fb      	ldr	r3, [r7, #12]
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5130:	6a3b      	ldr	r3, [r7, #32]
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	2202      	movs	r2, #2
    5136:	4013      	ands	r3, r2
    5138:	d001      	beq.n	513e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    513a:	231c      	movs	r3, #28
    513c:	e09c      	b.n	5278 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    513e:	6a3b      	ldr	r3, [r7, #32]
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	2201      	movs	r2, #1
    5144:	4013      	ands	r3, r2
    5146:	d001      	beq.n	514c <spi_init+0x34>
		return STATUS_BUSY;
    5148:	2305      	movs	r3, #5
    514a:	e095      	b.n	5278 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    514c:	68fb      	ldr	r3, [r7, #12]
    514e:	681b      	ldr	r3, [r3, #0]
    5150:	0018      	movs	r0, r3
    5152:	4b4b      	ldr	r3, [pc, #300]	; (5280 <spi_init+0x168>)
    5154:	4798      	blx	r3
    5156:	0003      	movs	r3, r0
    5158:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    515a:	69fb      	ldr	r3, [r7, #28]
    515c:	3302      	adds	r3, #2
    515e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5160:	69fb      	ldr	r3, [r7, #28]
    5162:	3314      	adds	r3, #20
    5164:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5166:	2201      	movs	r2, #1
    5168:	69bb      	ldr	r3, [r7, #24]
    516a:	409a      	lsls	r2, r3
    516c:	0013      	movs	r3, r2
    516e:	0019      	movs	r1, r3
    5170:	2002      	movs	r0, #2
    5172:	4b44      	ldr	r3, [pc, #272]	; (5284 <spi_init+0x16c>)
    5174:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5176:	2310      	movs	r3, #16
    5178:	18fb      	adds	r3, r7, r3
    517a:	0018      	movs	r0, r3
    517c:	4b42      	ldr	r3, [pc, #264]	; (5288 <spi_init+0x170>)
    517e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	2224      	movs	r2, #36	; 0x24
    5184:	5c9a      	ldrb	r2, [r3, r2]
    5186:	2310      	movs	r3, #16
    5188:	18fb      	adds	r3, r7, r3
    518a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    518c:	697b      	ldr	r3, [r7, #20]
    518e:	b2db      	uxtb	r3, r3
    5190:	2210      	movs	r2, #16
    5192:	18ba      	adds	r2, r7, r2
    5194:	0011      	movs	r1, r2
    5196:	0018      	movs	r0, r3
    5198:	4b3c      	ldr	r3, [pc, #240]	; (528c <spi_init+0x174>)
    519a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    519c:	697b      	ldr	r3, [r7, #20]
    519e:	b2db      	uxtb	r3, r3
    51a0:	0018      	movs	r0, r3
    51a2:	4b3b      	ldr	r3, [pc, #236]	; (5290 <spi_init+0x178>)
    51a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	2224      	movs	r2, #36	; 0x24
    51aa:	5c9b      	ldrb	r3, [r3, r2]
    51ac:	2100      	movs	r1, #0
    51ae:	0018      	movs	r0, r3
    51b0:	4b38      	ldr	r3, [pc, #224]	; (5294 <spi_init+0x17c>)
    51b2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	781b      	ldrb	r3, [r3, #0]
    51b8:	2b01      	cmp	r3, #1
    51ba:	d105      	bne.n	51c8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    51bc:	6a3b      	ldr	r3, [r7, #32]
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	220c      	movs	r2, #12
    51c2:	431a      	orrs	r2, r3
    51c4:	6a3b      	ldr	r3, [r7, #32]
    51c6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    51c8:	2327      	movs	r3, #39	; 0x27
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	2200      	movs	r2, #0
    51ce:	701a      	strb	r2, [r3, #0]
    51d0:	e010      	b.n	51f4 <spi_init+0xdc>
		module->callback[i]        = NULL;
    51d2:	2327      	movs	r3, #39	; 0x27
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	68fa      	ldr	r2, [r7, #12]
    51da:	3302      	adds	r3, #2
    51dc:	009b      	lsls	r3, r3, #2
    51de:	18d3      	adds	r3, r2, r3
    51e0:	3304      	adds	r3, #4
    51e2:	2200      	movs	r2, #0
    51e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    51e6:	2327      	movs	r3, #39	; 0x27
    51e8:	18fb      	adds	r3, r7, r3
    51ea:	781a      	ldrb	r2, [r3, #0]
    51ec:	2327      	movs	r3, #39	; 0x27
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	3201      	adds	r2, #1
    51f2:	701a      	strb	r2, [r3, #0]
    51f4:	2327      	movs	r3, #39	; 0x27
    51f6:	18fb      	adds	r3, r7, r3
    51f8:	781b      	ldrb	r3, [r3, #0]
    51fa:	2b06      	cmp	r3, #6
    51fc:	d9e9      	bls.n	51d2 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	2200      	movs	r2, #0
    5202:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    5204:	68fb      	ldr	r3, [r7, #12]
    5206:	2200      	movs	r2, #0
    5208:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    520a:	68fb      	ldr	r3, [r7, #12]
    520c:	2200      	movs	r2, #0
    520e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    5210:	68fb      	ldr	r3, [r7, #12]
    5212:	2200      	movs	r2, #0
    5214:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    5216:	68fb      	ldr	r3, [r7, #12]
    5218:	2236      	movs	r2, #54	; 0x36
    521a:	2100      	movs	r1, #0
    521c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    521e:	68fb      	ldr	r3, [r7, #12]
    5220:	2237      	movs	r2, #55	; 0x37
    5222:	2100      	movs	r1, #0
    5224:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    5226:	68fb      	ldr	r3, [r7, #12]
    5228:	2238      	movs	r2, #56	; 0x38
    522a:	2100      	movs	r1, #0
    522c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    522e:	68fb      	ldr	r3, [r7, #12]
    5230:	2203      	movs	r2, #3
    5232:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    5234:	68fb      	ldr	r3, [r7, #12]
    5236:	2200      	movs	r2, #0
    5238:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    523a:	68fb      	ldr	r3, [r7, #12]
    523c:	681b      	ldr	r3, [r3, #0]
    523e:	2213      	movs	r2, #19
    5240:	18bc      	adds	r4, r7, r2
    5242:	0018      	movs	r0, r3
    5244:	4b0e      	ldr	r3, [pc, #56]	; (5280 <spi_init+0x168>)
    5246:	4798      	blx	r3
    5248:	0003      	movs	r3, r0
    524a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    524c:	4a12      	ldr	r2, [pc, #72]	; (5298 <spi_init+0x180>)
    524e:	2313      	movs	r3, #19
    5250:	18fb      	adds	r3, r7, r3
    5252:	781b      	ldrb	r3, [r3, #0]
    5254:	0011      	movs	r1, r2
    5256:	0018      	movs	r0, r3
    5258:	4b10      	ldr	r3, [pc, #64]	; (529c <spi_init+0x184>)
    525a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    525c:	2313      	movs	r3, #19
    525e:	18fb      	adds	r3, r7, r3
    5260:	781a      	ldrb	r2, [r3, #0]
    5262:	4b0f      	ldr	r3, [pc, #60]	; (52a0 <spi_init+0x188>)
    5264:	0092      	lsls	r2, r2, #2
    5266:	68f9      	ldr	r1, [r7, #12]
    5268:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    526a:	687a      	ldr	r2, [r7, #4]
    526c:	68fb      	ldr	r3, [r7, #12]
    526e:	0011      	movs	r1, r2
    5270:	0018      	movs	r0, r3
    5272:	4b0c      	ldr	r3, [pc, #48]	; (52a4 <spi_init+0x18c>)
    5274:	4798      	blx	r3
    5276:	0003      	movs	r3, r0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b00b      	add	sp, #44	; 0x2c
    527e:	bd90      	pop	{r4, r7, pc}
    5280:	00004b61 	.word	0x00004b61
    5284:	00004d45 	.word	0x00004d45
    5288:	00004d2d 	.word	0x00004d2d
    528c:	00007061 	.word	0x00007061
    5290:	000070a5 	.word	0x000070a5
    5294:	00004919 	.word	0x00004919
    5298:	00005681 	.word	0x00005681
    529c:	00004bc5 	.word	0x00004bc5
    52a0:	200003d8 	.word	0x200003d8
    52a4:	00004f09 	.word	0x00004f09

000052a8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    52a8:	b590      	push	{r4, r7, lr}
    52aa:	b087      	sub	sp, #28
    52ac:	af00      	add	r7, sp, #0
    52ae:	60f8      	str	r0, [r7, #12]
    52b0:	60b9      	str	r1, [r7, #8]
    52b2:	0019      	movs	r1, r3
    52b4:	1dbb      	adds	r3, r7, #6
    52b6:	801a      	strh	r2, [r3, #0]
    52b8:	1d3b      	adds	r3, r7, #4
    52ba:	1c0a      	adds	r2, r1, #0
    52bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    52be:	68fb      	ldr	r3, [r7, #12]
    52c0:	2238      	movs	r2, #56	; 0x38
    52c2:	5c9b      	ldrb	r3, [r3, r2]
    52c4:	b2db      	uxtb	r3, r3
    52c6:	2b05      	cmp	r3, #5
    52c8:	d101      	bne.n	52ce <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    52ca:	2305      	movs	r3, #5
    52cc:	e07a      	b.n	53c4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    52ce:	1dbb      	adds	r3, r7, #6
    52d0:	881b      	ldrh	r3, [r3, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d101      	bne.n	52da <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    52d6:	2317      	movs	r3, #23
    52d8:	e074      	b.n	53c4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    52da:	68fb      	ldr	r3, [r7, #12]
    52dc:	79db      	ldrb	r3, [r3, #7]
    52de:	2201      	movs	r2, #1
    52e0:	4053      	eors	r3, r2
    52e2:	b2db      	uxtb	r3, r3
    52e4:	2b00      	cmp	r3, #0
    52e6:	d001      	beq.n	52ec <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    52e8:	231c      	movs	r3, #28
    52ea:	e06b      	b.n	53c4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    52ec:	2316      	movs	r3, #22
    52ee:	18fb      	adds	r3, r7, r3
    52f0:	2200      	movs	r2, #0
    52f2:	801a      	strh	r2, [r3, #0]

	while (length--) {
    52f4:	e05e      	b.n	53b4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    52f6:	68fb      	ldr	r3, [r7, #12]
    52f8:	795b      	ldrb	r3, [r3, #5]
    52fa:	2b01      	cmp	r3, #1
    52fc:	d112      	bne.n	5324 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	68fb      	ldr	r3, [r7, #12]
    5302:	0018      	movs	r0, r3
    5304:	4b31      	ldr	r3, [pc, #196]	; (53cc <spi_read_buffer_wait+0x124>)
    5306:	4798      	blx	r3
    5308:	0003      	movs	r3, r0
    530a:	001a      	movs	r2, r3
    530c:	2301      	movs	r3, #1
    530e:	4053      	eors	r3, r2
    5310:	b2db      	uxtb	r3, r3
    5312:	2b00      	cmp	r3, #0
    5314:	d1f4      	bne.n	5300 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    5316:	1d3b      	adds	r3, r7, #4
    5318:	881a      	ldrh	r2, [r3, #0]
    531a:	68fb      	ldr	r3, [r7, #12]
    531c:	0011      	movs	r1, r2
    531e:	0018      	movs	r0, r3
    5320:	4b2b      	ldr	r3, [pc, #172]	; (53d0 <spi_read_buffer_wait+0x128>)
    5322:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    5324:	46c0      	nop			; (mov r8, r8)
    5326:	68fb      	ldr	r3, [r7, #12]
    5328:	0018      	movs	r0, r3
    532a:	4b2a      	ldr	r3, [pc, #168]	; (53d4 <spi_read_buffer_wait+0x12c>)
    532c:	4798      	blx	r3
    532e:	0003      	movs	r3, r0
    5330:	001a      	movs	r2, r3
    5332:	2301      	movs	r3, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d1f4      	bne.n	5326 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    533c:	2312      	movs	r3, #18
    533e:	18fb      	adds	r3, r7, r3
    5340:	2200      	movs	r2, #0
    5342:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    5344:	2315      	movs	r3, #21
    5346:	18fc      	adds	r4, r7, r3
    5348:	2312      	movs	r3, #18
    534a:	18fa      	adds	r2, r7, r3
    534c:	68fb      	ldr	r3, [r7, #12]
    534e:	0011      	movs	r1, r2
    5350:	0018      	movs	r0, r3
    5352:	4b21      	ldr	r3, [pc, #132]	; (53d8 <spi_read_buffer_wait+0x130>)
    5354:	4798      	blx	r3
    5356:	0003      	movs	r3, r0
    5358:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    535a:	2315      	movs	r3, #21
    535c:	18fb      	adds	r3, r7, r3
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	2b00      	cmp	r3, #0
    5362:	d003      	beq.n	536c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    5364:	2315      	movs	r3, #21
    5366:	18fb      	adds	r3, r7, r3
    5368:	781b      	ldrb	r3, [r3, #0]
    536a:	e02b      	b.n	53c4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    536c:	2316      	movs	r3, #22
    536e:	18fb      	adds	r3, r7, r3
    5370:	881b      	ldrh	r3, [r3, #0]
    5372:	2216      	movs	r2, #22
    5374:	18ba      	adds	r2, r7, r2
    5376:	1c59      	adds	r1, r3, #1
    5378:	8011      	strh	r1, [r2, #0]
    537a:	001a      	movs	r2, r3
    537c:	68bb      	ldr	r3, [r7, #8]
    537e:	189b      	adds	r3, r3, r2
    5380:	2212      	movs	r2, #18
    5382:	18ba      	adds	r2, r7, r2
    5384:	8812      	ldrh	r2, [r2, #0]
    5386:	b2d2      	uxtb	r2, r2
    5388:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	799b      	ldrb	r3, [r3, #6]
    538e:	2b01      	cmp	r3, #1
    5390:	d110      	bne.n	53b4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    5392:	2316      	movs	r3, #22
    5394:	18fb      	adds	r3, r7, r3
    5396:	881b      	ldrh	r3, [r3, #0]
    5398:	2216      	movs	r2, #22
    539a:	18ba      	adds	r2, r7, r2
    539c:	1c59      	adds	r1, r3, #1
    539e:	8011      	strh	r1, [r2, #0]
    53a0:	001a      	movs	r2, r3
    53a2:	68bb      	ldr	r3, [r7, #8]
    53a4:	189b      	adds	r3, r3, r2
    53a6:	2212      	movs	r2, #18
    53a8:	18ba      	adds	r2, r7, r2
    53aa:	8812      	ldrh	r2, [r2, #0]
    53ac:	0a12      	lsrs	r2, r2, #8
    53ae:	b292      	uxth	r2, r2
    53b0:	b2d2      	uxtb	r2, r2
    53b2:	701a      	strb	r2, [r3, #0]
	while (length--) {
    53b4:	1dbb      	adds	r3, r7, #6
    53b6:	881b      	ldrh	r3, [r3, #0]
    53b8:	1dba      	adds	r2, r7, #6
    53ba:	1e59      	subs	r1, r3, #1
    53bc:	8011      	strh	r1, [r2, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	d199      	bne.n	52f6 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    53c2:	2300      	movs	r3, #0
}
    53c4:	0018      	movs	r0, r3
    53c6:	46bd      	mov	sp, r7
    53c8:	b007      	add	sp, #28
    53ca:	bd90      	pop	{r4, r7, pc}
    53cc:	00004de9 	.word	0x00004de9
    53d0:	00004e39 	.word	0x00004e39
    53d4:	00004e11 	.word	0x00004e11
    53d8:	00004e81 	.word	0x00004e81

000053dc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    53dc:	b580      	push	{r7, lr}
    53de:	b086      	sub	sp, #24
    53e0:	af00      	add	r7, sp, #0
    53e2:	60f8      	str	r0, [r7, #12]
    53e4:	60b9      	str	r1, [r7, #8]
    53e6:	1dbb      	adds	r3, r7, #6
    53e8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    53ea:	68fb      	ldr	r3, [r7, #12]
    53ec:	2238      	movs	r2, #56	; 0x38
    53ee:	5c9b      	ldrb	r3, [r3, r2]
    53f0:	b2db      	uxtb	r3, r3
    53f2:	2b05      	cmp	r3, #5
    53f4:	d101      	bne.n	53fa <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    53f6:	2305      	movs	r3, #5
    53f8:	e087      	b.n	550a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    53fa:	1dbb      	adds	r3, r7, #6
    53fc:	881b      	ldrh	r3, [r3, #0]
    53fe:	2b00      	cmp	r3, #0
    5400:	d101      	bne.n	5406 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    5402:	2317      	movs	r3, #23
    5404:	e081      	b.n	550a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    5406:	2316      	movs	r3, #22
    5408:	18fb      	adds	r3, r7, r3
    540a:	2200      	movs	r2, #0
    540c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    540e:	2314      	movs	r3, #20
    5410:	18fb      	adds	r3, r7, r3
    5412:	1dba      	adds	r2, r7, #6
    5414:	8812      	ldrh	r2, [r2, #0]
    5416:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    5418:	e05f      	b.n	54da <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    541a:	46c0      	nop			; (mov r8, r8)
    541c:	68fb      	ldr	r3, [r7, #12]
    541e:	0018      	movs	r0, r3
    5420:	4b3c      	ldr	r3, [pc, #240]	; (5514 <spi_write_buffer_wait+0x138>)
    5422:	4798      	blx	r3
    5424:	0003      	movs	r3, r0
    5426:	001a      	movs	r2, r3
    5428:	2301      	movs	r3, #1
    542a:	4053      	eors	r3, r2
    542c:	b2db      	uxtb	r3, r3
    542e:	2b00      	cmp	r3, #0
    5430:	d1f4      	bne.n	541c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    5432:	2316      	movs	r3, #22
    5434:	18fb      	adds	r3, r7, r3
    5436:	881b      	ldrh	r3, [r3, #0]
    5438:	2216      	movs	r2, #22
    543a:	18ba      	adds	r2, r7, r2
    543c:	1c59      	adds	r1, r3, #1
    543e:	8011      	strh	r1, [r2, #0]
    5440:	001a      	movs	r2, r3
    5442:	68bb      	ldr	r3, [r7, #8]
    5444:	189b      	adds	r3, r3, r2
    5446:	781a      	ldrb	r2, [r3, #0]
    5448:	2312      	movs	r3, #18
    544a:	18fb      	adds	r3, r7, r3
    544c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    544e:	68fb      	ldr	r3, [r7, #12]
    5450:	799b      	ldrb	r3, [r3, #6]
    5452:	2b01      	cmp	r3, #1
    5454:	d115      	bne.n	5482 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5456:	2316      	movs	r3, #22
    5458:	18fb      	adds	r3, r7, r3
    545a:	881b      	ldrh	r3, [r3, #0]
    545c:	2216      	movs	r2, #22
    545e:	18ba      	adds	r2, r7, r2
    5460:	1c59      	adds	r1, r3, #1
    5462:	8011      	strh	r1, [r2, #0]
    5464:	001a      	movs	r2, r3
    5466:	68bb      	ldr	r3, [r7, #8]
    5468:	189b      	adds	r3, r3, r2
    546a:	781b      	ldrb	r3, [r3, #0]
    546c:	021b      	lsls	r3, r3, #8
    546e:	b21a      	sxth	r2, r3
    5470:	2312      	movs	r3, #18
    5472:	18fb      	adds	r3, r7, r3
    5474:	2100      	movs	r1, #0
    5476:	5e5b      	ldrsh	r3, [r3, r1]
    5478:	4313      	orrs	r3, r2
    547a:	b21a      	sxth	r2, r3
    547c:	2312      	movs	r3, #18
    547e:	18fb      	adds	r3, r7, r3
    5480:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    5482:	2312      	movs	r3, #18
    5484:	18fb      	adds	r3, r7, r3
    5486:	881a      	ldrh	r2, [r3, #0]
    5488:	68fb      	ldr	r3, [r7, #12]
    548a:	0011      	movs	r1, r2
    548c:	0018      	movs	r0, r3
    548e:	4b22      	ldr	r3, [pc, #136]	; (5518 <spi_write_buffer_wait+0x13c>)
    5490:	4798      	blx	r3

		if (module->receiver_enabled) {
    5492:	68fb      	ldr	r3, [r7, #12]
    5494:	79db      	ldrb	r3, [r3, #7]
    5496:	2214      	movs	r2, #20
    5498:	18ba      	adds	r2, r7, r2
    549a:	2114      	movs	r1, #20
    549c:	1879      	adds	r1, r7, r1
    549e:	8809      	ldrh	r1, [r1, #0]
    54a0:	8011      	strh	r1, [r2, #0]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d019      	beq.n	54da <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    54a6:	46c0      	nop			; (mov r8, r8)
    54a8:	68fb      	ldr	r3, [r7, #12]
    54aa:	0018      	movs	r0, r3
    54ac:	4b1b      	ldr	r3, [pc, #108]	; (551c <spi_write_buffer_wait+0x140>)
    54ae:	4798      	blx	r3
    54b0:	0003      	movs	r3, r0
    54b2:	001a      	movs	r2, r3
    54b4:	2301      	movs	r3, #1
    54b6:	4053      	eors	r3, r2
    54b8:	b2db      	uxtb	r3, r3
    54ba:	2b00      	cmp	r3, #0
    54bc:	d1f4      	bne.n	54a8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    54be:	2310      	movs	r3, #16
    54c0:	18fa      	adds	r2, r7, r3
    54c2:	68fb      	ldr	r3, [r7, #12]
    54c4:	0011      	movs	r1, r2
    54c6:	0018      	movs	r0, r3
    54c8:	4b15      	ldr	r3, [pc, #84]	; (5520 <spi_write_buffer_wait+0x144>)
    54ca:	4798      	blx	r3
			flush_length--;
    54cc:	2314      	movs	r3, #20
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	881a      	ldrh	r2, [r3, #0]
    54d2:	2314      	movs	r3, #20
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	3a01      	subs	r2, #1
    54d8:	801a      	strh	r2, [r3, #0]
	while (length--) {
    54da:	1dbb      	adds	r3, r7, #6
    54dc:	881b      	ldrh	r3, [r3, #0]
    54de:	1dba      	adds	r2, r7, #6
    54e0:	1e59      	subs	r1, r3, #1
    54e2:	8011      	strh	r1, [r2, #0]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d198      	bne.n	541a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    54e8:	68fb      	ldr	r3, [r7, #12]
    54ea:	795b      	ldrb	r3, [r3, #5]
    54ec:	2b01      	cmp	r3, #1
    54ee:	d10b      	bne.n	5508 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    54f0:	46c0      	nop			; (mov r8, r8)
    54f2:	68fb      	ldr	r3, [r7, #12]
    54f4:	0018      	movs	r0, r3
    54f6:	4b0b      	ldr	r3, [pc, #44]	; (5524 <spi_write_buffer_wait+0x148>)
    54f8:	4798      	blx	r3
    54fa:	0003      	movs	r3, r0
    54fc:	001a      	movs	r2, r3
    54fe:	2301      	movs	r3, #1
    5500:	4053      	eors	r3, r2
    5502:	b2db      	uxtb	r3, r3
    5504:	2b00      	cmp	r3, #0
    5506:	d1f4      	bne.n	54f2 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    5508:	2300      	movs	r3, #0
}
    550a:	0018      	movs	r0, r3
    550c:	46bd      	mov	sp, r7
    550e:	b006      	add	sp, #24
    5510:	bd80      	pop	{r7, pc}
    5512:	46c0      	nop			; (mov r8, r8)
    5514:	00004de9 	.word	0x00004de9
    5518:	00004e39 	.word	0x00004e39
    551c:	00004e11 	.word	0x00004e11
    5520:	00004e81 	.word	0x00004e81
    5524:	00004dc1 	.word	0x00004dc1

00005528 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    5528:	b580      	push	{r7, lr}
    552a:	b084      	sub	sp, #16
    552c:	af00      	add	r7, sp, #0
    552e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    553a:	781b      	ldrb	r3, [r3, #0]
    553c:	b2da      	uxtb	r2, r3
    553e:	230e      	movs	r3, #14
    5540:	18fb      	adds	r3, r7, r3
    5542:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5548:	1c5a      	adds	r2, r3, #1
    554a:	687b      	ldr	r3, [r7, #4]
    554c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	799b      	ldrb	r3, [r3, #6]
    5552:	2b01      	cmp	r3, #1
    5554:	d113      	bne.n	557e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	b2db      	uxtb	r3, r3
    555e:	021b      	lsls	r3, r3, #8
    5560:	b21a      	sxth	r2, r3
    5562:	230e      	movs	r3, #14
    5564:	18fb      	adds	r3, r7, r3
    5566:	2100      	movs	r1, #0
    5568:	5e5b      	ldrsh	r3, [r3, r1]
    556a:	4313      	orrs	r3, r2
    556c:	b21a      	sxth	r2, r3
    556e:	230e      	movs	r3, #14
    5570:	18fb      	adds	r3, r7, r3
    5572:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5578:	1c5a      	adds	r2, r3, #1
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    557e:	230e      	movs	r3, #14
    5580:	18fb      	adds	r3, r7, r3
    5582:	881b      	ldrh	r3, [r3, #0]
    5584:	05db      	lsls	r3, r3, #23
    5586:	0dda      	lsrs	r2, r3, #23
    5588:	68bb      	ldr	r3, [r7, #8]
    558a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5590:	b29b      	uxth	r3, r3
    5592:	3b01      	subs	r3, #1
    5594:	b29a      	uxth	r2, r3
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	869a      	strh	r2, [r3, #52]	; 0x34
}
    559a:	46c0      	nop			; (mov r8, r8)
    559c:	46bd      	mov	sp, r7
    559e:	b004      	add	sp, #16
    55a0:	bd80      	pop	{r7, pc}
	...

000055a4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b084      	sub	sp, #16
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    55b2:	4b08      	ldr	r3, [pc, #32]	; (55d4 <_spi_write_dummy+0x30>)
    55b4:	881b      	ldrh	r3, [r3, #0]
    55b6:	001a      	movs	r2, r3
    55b8:	68fb      	ldr	r3, [r7, #12]
    55ba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    55c0:	b29b      	uxth	r3, r3
    55c2:	3b01      	subs	r3, #1
    55c4:	b29a      	uxth	r2, r3
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	46bd      	mov	sp, r7
    55ce:	b004      	add	sp, #16
    55d0:	bd80      	pop	{r7, pc}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	200003f0 	.word	0x200003f0

000055d8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    55d8:	b580      	push	{r7, lr}
    55da:	b084      	sub	sp, #16
    55dc:	af00      	add	r7, sp, #0
    55de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    55e6:	230a      	movs	r3, #10
    55e8:	18fb      	adds	r3, r7, r3
    55ea:	2200      	movs	r2, #0
    55ec:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    55f2:	230a      	movs	r3, #10
    55f4:	18fb      	adds	r3, r7, r3
    55f6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    55fc:	b29b      	uxth	r3, r3
    55fe:	3b01      	subs	r3, #1
    5600:	b29a      	uxth	r2, r3
    5602:	687b      	ldr	r3, [r7, #4]
    5604:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5606:	46c0      	nop			; (mov r8, r8)
    5608:	46bd      	mov	sp, r7
    560a:	b004      	add	sp, #16
    560c:	bd80      	pop	{r7, pc}

0000560e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    560e:	b580      	push	{r7, lr}
    5610:	b084      	sub	sp, #16
    5612:	af00      	add	r7, sp, #0
    5614:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	681b      	ldr	r3, [r3, #0]
    561a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    561c:	68fb      	ldr	r3, [r7, #12]
    561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5620:	b29a      	uxth	r2, r3
    5622:	230a      	movs	r3, #10
    5624:	18fb      	adds	r3, r7, r3
    5626:	05d2      	lsls	r2, r2, #23
    5628:	0dd2      	lsrs	r2, r2, #23
    562a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    562c:	687b      	ldr	r3, [r7, #4]
    562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5630:	220a      	movs	r2, #10
    5632:	18ba      	adds	r2, r7, r2
    5634:	8812      	ldrh	r2, [r2, #0]
    5636:	b2d2      	uxtb	r2, r2
    5638:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    563e:	1c5a      	adds	r2, r3, #1
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	799b      	ldrb	r3, [r3, #6]
    5648:	2b01      	cmp	r3, #1
    564a:	d10d      	bne.n	5668 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5650:	220a      	movs	r2, #10
    5652:	18ba      	adds	r2, r7, r2
    5654:	8812      	ldrh	r2, [r2, #0]
    5656:	0a12      	lsrs	r2, r2, #8
    5658:	b292      	uxth	r2, r2
    565a:	b2d2      	uxtb	r2, r2
    565c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    565e:	687b      	ldr	r3, [r7, #4]
    5660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5662:	1c5a      	adds	r2, r3, #1
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    5668:	687b      	ldr	r3, [r7, #4]
    566a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    566c:	b29b      	uxth	r3, r3
    566e:	3b01      	subs	r3, #1
    5670:	b29a      	uxth	r2, r3
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	46bd      	mov	sp, r7
    567a:	b004      	add	sp, #16
    567c:	bd80      	pop	{r7, pc}
	...

00005680 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5680:	b580      	push	{r7, lr}
    5682:	b086      	sub	sp, #24
    5684:	af00      	add	r7, sp, #0
    5686:	0002      	movs	r2, r0
    5688:	1dfb      	adds	r3, r7, #7
    568a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    568c:	1dfb      	adds	r3, r7, #7
    568e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    5690:	4b96      	ldr	r3, [pc, #600]	; (58ec <_spi_interrupt_handler+0x26c>)
    5692:	0092      	lsls	r2, r2, #2
    5694:	58d3      	ldr	r3, [r2, r3]
    5696:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5698:	697b      	ldr	r3, [r7, #20]
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    569e:	697b      	ldr	r3, [r7, #20]
    56a0:	2237      	movs	r2, #55	; 0x37
    56a2:	5c9a      	ldrb	r2, [r3, r2]
    56a4:	697b      	ldr	r3, [r7, #20]
    56a6:	2136      	movs	r1, #54	; 0x36
    56a8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    56aa:	230f      	movs	r3, #15
    56ac:	18fb      	adds	r3, r7, r3
    56ae:	400a      	ands	r2, r1
    56b0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    56b2:	693b      	ldr	r3, [r7, #16]
    56b4:	7e1b      	ldrb	r3, [r3, #24]
    56b6:	b2da      	uxtb	r2, r3
    56b8:	230c      	movs	r3, #12
    56ba:	18fb      	adds	r3, r7, r3
    56bc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    56be:	693b      	ldr	r3, [r7, #16]
    56c0:	7d9b      	ldrb	r3, [r3, #22]
    56c2:	b2db      	uxtb	r3, r3
    56c4:	b29a      	uxth	r2, r3
    56c6:	230c      	movs	r3, #12
    56c8:	18fb      	adds	r3, r7, r3
    56ca:	210c      	movs	r1, #12
    56cc:	1879      	adds	r1, r7, r1
    56ce:	8809      	ldrh	r1, [r1, #0]
    56d0:	400a      	ands	r2, r1
    56d2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    56d4:	230c      	movs	r3, #12
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	881b      	ldrh	r3, [r3, #0]
    56da:	2201      	movs	r2, #1
    56dc:	4013      	ands	r3, r2
    56de:	d038      	beq.n	5752 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    56e0:	697b      	ldr	r3, [r7, #20]
    56e2:	795b      	ldrb	r3, [r3, #5]
    56e4:	2b01      	cmp	r3, #1
    56e6:	d110      	bne.n	570a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    56e8:	697b      	ldr	r3, [r7, #20]
    56ea:	7a5b      	ldrb	r3, [r3, #9]
    56ec:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    56ee:	2b00      	cmp	r3, #0
    56f0:	d10b      	bne.n	570a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    56f2:	697b      	ldr	r3, [r7, #20]
    56f4:	0018      	movs	r0, r3
    56f6:	4b7e      	ldr	r3, [pc, #504]	; (58f0 <_spi_interrupt_handler+0x270>)
    56f8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    56fa:	697b      	ldr	r3, [r7, #20]
    56fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    56fe:	b29b      	uxth	r3, r3
    5700:	2b00      	cmp	r3, #0
    5702:	d102      	bne.n	570a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5704:	693b      	ldr	r3, [r7, #16]
    5706:	2201      	movs	r2, #1
    5708:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    570a:	697b      	ldr	r3, [r7, #20]
    570c:	795b      	ldrb	r3, [r3, #5]
		if (0
    570e:	2b01      	cmp	r3, #1
    5710:	d11f      	bne.n	5752 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    5712:	697b      	ldr	r3, [r7, #20]
    5714:	7a5b      	ldrb	r3, [r3, #9]
    5716:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    5718:	2b00      	cmp	r3, #0
    571a:	d01a      	beq.n	5752 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    571c:	697b      	ldr	r3, [r7, #20]
    571e:	0018      	movs	r0, r3
    5720:	4b74      	ldr	r3, [pc, #464]	; (58f4 <_spi_interrupt_handler+0x274>)
    5722:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    5724:	697b      	ldr	r3, [r7, #20]
    5726:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5728:	b29b      	uxth	r3, r3
    572a:	2b00      	cmp	r3, #0
    572c:	d111      	bne.n	5752 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    572e:	693b      	ldr	r3, [r7, #16]
    5730:	2201      	movs	r2, #1
    5732:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5734:	697b      	ldr	r3, [r7, #20]
    5736:	7a5b      	ldrb	r3, [r3, #9]
    5738:	b2db      	uxtb	r3, r3
    573a:	2b01      	cmp	r3, #1
    573c:	d109      	bne.n	5752 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    573e:	697b      	ldr	r3, [r7, #20]
    5740:	79db      	ldrb	r3, [r3, #7]
    5742:	2201      	movs	r2, #1
    5744:	4053      	eors	r3, r2
    5746:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    5748:	2b00      	cmp	r3, #0
    574a:	d002      	beq.n	5752 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    574c:	693b      	ldr	r3, [r7, #16]
    574e:	2202      	movs	r2, #2
    5750:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5752:	230c      	movs	r3, #12
    5754:	18fb      	adds	r3, r7, r3
    5756:	881b      	ldrh	r3, [r3, #0]
    5758:	2204      	movs	r2, #4
    575a:	4013      	ands	r3, r2
    575c:	d100      	bne.n	5760 <_spi_interrupt_handler+0xe0>
    575e:	e07e      	b.n	585e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5760:	693b      	ldr	r3, [r7, #16]
    5762:	8b5b      	ldrh	r3, [r3, #26]
    5764:	b29b      	uxth	r3, r3
    5766:	001a      	movs	r2, r3
    5768:	2304      	movs	r3, #4
    576a:	4013      	ands	r3, r2
    576c:	d022      	beq.n	57b4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    576e:	697b      	ldr	r3, [r7, #20]
    5770:	7a5b      	ldrb	r3, [r3, #9]
    5772:	b2db      	uxtb	r3, r3
    5774:	2b01      	cmp	r3, #1
    5776:	d014      	beq.n	57a2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5778:	697b      	ldr	r3, [r7, #20]
    577a:	2238      	movs	r2, #56	; 0x38
    577c:	211e      	movs	r1, #30
    577e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5780:	697b      	ldr	r3, [r7, #20]
    5782:	2203      	movs	r2, #3
    5784:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5786:	693b      	ldr	r3, [r7, #16]
    5788:	2205      	movs	r2, #5
    578a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    578c:	230f      	movs	r3, #15
    578e:	18fb      	adds	r3, r7, r3
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	2208      	movs	r2, #8
    5794:	4013      	ands	r3, r2
    5796:	d004      	beq.n	57a2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5798:	697b      	ldr	r3, [r7, #20]
    579a:	699b      	ldr	r3, [r3, #24]
    579c:	697a      	ldr	r2, [r7, #20]
    579e:	0010      	movs	r0, r2
    57a0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    57a2:	693b      	ldr	r3, [r7, #16]
    57a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    57a6:	230a      	movs	r3, #10
    57a8:	18fb      	adds	r3, r7, r3
    57aa:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    57ac:	693b      	ldr	r3, [r7, #16]
    57ae:	2204      	movs	r2, #4
    57b0:	835a      	strh	r2, [r3, #26]
    57b2:	e054      	b.n	585e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    57b4:	697b      	ldr	r3, [r7, #20]
    57b6:	7a5b      	ldrb	r3, [r3, #9]
    57b8:	b2db      	uxtb	r3, r3
    57ba:	2b01      	cmp	r3, #1
    57bc:	d11e      	bne.n	57fc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    57be:	697b      	ldr	r3, [r7, #20]
    57c0:	0018      	movs	r0, r3
    57c2:	4b4d      	ldr	r3, [pc, #308]	; (58f8 <_spi_interrupt_handler+0x278>)
    57c4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    57c6:	697b      	ldr	r3, [r7, #20]
    57c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    57ca:	b29b      	uxth	r3, r3
    57cc:	2b00      	cmp	r3, #0
    57ce:	d146      	bne.n	585e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    57d0:	693b      	ldr	r3, [r7, #16]
    57d2:	2204      	movs	r2, #4
    57d4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    57d6:	697b      	ldr	r3, [r7, #20]
    57d8:	2238      	movs	r2, #56	; 0x38
    57da:	2100      	movs	r1, #0
    57dc:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    57de:	697b      	ldr	r3, [r7, #20]
    57e0:	2203      	movs	r2, #3
    57e2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    57e4:	230f      	movs	r3, #15
    57e6:	18fb      	adds	r3, r7, r3
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	2201      	movs	r2, #1
    57ec:	4013      	ands	r3, r2
    57ee:	d036      	beq.n	585e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    57f0:	697b      	ldr	r3, [r7, #20]
    57f2:	68db      	ldr	r3, [r3, #12]
    57f4:	697a      	ldr	r2, [r7, #20]
    57f6:	0010      	movs	r0, r2
    57f8:	4798      	blx	r3
    57fa:	e030      	b.n	585e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    57fc:	697b      	ldr	r3, [r7, #20]
    57fe:	0018      	movs	r0, r3
    5800:	4b3e      	ldr	r3, [pc, #248]	; (58fc <_spi_interrupt_handler+0x27c>)
    5802:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5804:	697b      	ldr	r3, [r7, #20]
    5806:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5808:	b29b      	uxth	r3, r3
    580a:	2b00      	cmp	r3, #0
    580c:	d127      	bne.n	585e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    580e:	697b      	ldr	r3, [r7, #20]
    5810:	2238      	movs	r2, #56	; 0x38
    5812:	2100      	movs	r1, #0
    5814:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5816:	693b      	ldr	r3, [r7, #16]
    5818:	2204      	movs	r2, #4
    581a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    581c:	697b      	ldr	r3, [r7, #20]
    581e:	7a5b      	ldrb	r3, [r3, #9]
    5820:	b2db      	uxtb	r3, r3
    5822:	2b02      	cmp	r3, #2
    5824:	d10b      	bne.n	583e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5826:	230f      	movs	r3, #15
    5828:	18fb      	adds	r3, r7, r3
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	2204      	movs	r2, #4
    582e:	4013      	ands	r3, r2
    5830:	d015      	beq.n	585e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5832:	697b      	ldr	r3, [r7, #20]
    5834:	695b      	ldr	r3, [r3, #20]
    5836:	697a      	ldr	r2, [r7, #20]
    5838:	0010      	movs	r0, r2
    583a:	4798      	blx	r3
    583c:	e00f      	b.n	585e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    583e:	697b      	ldr	r3, [r7, #20]
    5840:	7a5b      	ldrb	r3, [r3, #9]
    5842:	b2db      	uxtb	r3, r3
    5844:	2b00      	cmp	r3, #0
    5846:	d10a      	bne.n	585e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5848:	230f      	movs	r3, #15
    584a:	18fb      	adds	r3, r7, r3
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	2202      	movs	r2, #2
    5850:	4013      	ands	r3, r2
    5852:	d004      	beq.n	585e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5854:	697b      	ldr	r3, [r7, #20]
    5856:	691b      	ldr	r3, [r3, #16]
    5858:	697a      	ldr	r2, [r7, #20]
    585a:	0010      	movs	r0, r2
    585c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    585e:	230c      	movs	r3, #12
    5860:	18fb      	adds	r3, r7, r3
    5862:	881b      	ldrh	r3, [r3, #0]
    5864:	2202      	movs	r2, #2
    5866:	4013      	ands	r3, r2
    5868:	d024      	beq.n	58b4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    586a:	697b      	ldr	r3, [r7, #20]
    586c:	795b      	ldrb	r3, [r3, #5]
    586e:	2b01      	cmp	r3, #1
    5870:	d120      	bne.n	58b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5872:	697b      	ldr	r3, [r7, #20]
    5874:	7a5b      	ldrb	r3, [r3, #9]
    5876:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5878:	2b01      	cmp	r3, #1
    587a:	d11b      	bne.n	58b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    587c:	697b      	ldr	r3, [r7, #20]
    587e:	79db      	ldrb	r3, [r3, #7]
    5880:	2201      	movs	r2, #1
    5882:	4053      	eors	r3, r2
    5884:	b2db      	uxtb	r3, r3
    5886:	2b00      	cmp	r3, #0
    5888:	d014      	beq.n	58b4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    588a:	693b      	ldr	r3, [r7, #16]
    588c:	2202      	movs	r2, #2
    588e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5890:	697b      	ldr	r3, [r7, #20]
    5892:	2203      	movs	r2, #3
    5894:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    5896:	697b      	ldr	r3, [r7, #20]
    5898:	2238      	movs	r2, #56	; 0x38
    589a:	2100      	movs	r1, #0
    589c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    589e:	230f      	movs	r3, #15
    58a0:	18fb      	adds	r3, r7, r3
    58a2:	781b      	ldrb	r3, [r3, #0]
    58a4:	2201      	movs	r2, #1
    58a6:	4013      	ands	r3, r2
    58a8:	d004      	beq.n	58b4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    58aa:	697b      	ldr	r3, [r7, #20]
    58ac:	68db      	ldr	r3, [r3, #12]
    58ae:	697a      	ldr	r2, [r7, #20]
    58b0:	0010      	movs	r0, r2
    58b2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    58b4:	230c      	movs	r3, #12
    58b6:	18fb      	adds	r3, r7, r3
    58b8:	881b      	ldrh	r3, [r3, #0]
    58ba:	2280      	movs	r2, #128	; 0x80
    58bc:	4013      	ands	r3, r2
    58be:	d010      	beq.n	58e2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    58c0:	693b      	ldr	r3, [r7, #16]
    58c2:	2280      	movs	r2, #128	; 0x80
    58c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    58c6:	693b      	ldr	r3, [r7, #16]
    58c8:	2280      	movs	r2, #128	; 0x80
    58ca:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    58cc:	230f      	movs	r3, #15
    58ce:	18fb      	adds	r3, r7, r3
    58d0:	781b      	ldrb	r3, [r3, #0]
    58d2:	2240      	movs	r2, #64	; 0x40
    58d4:	4013      	ands	r3, r2
    58d6:	d004      	beq.n	58e2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    58d8:	697b      	ldr	r3, [r7, #20]
    58da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58dc:	697a      	ldr	r2, [r7, #20]
    58de:	0010      	movs	r0, r2
    58e0:	4798      	blx	r3
		}
	}
#  endif
}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	46bd      	mov	sp, r7
    58e6:	b006      	add	sp, #24
    58e8:	bd80      	pop	{r7, pc}
    58ea:	46c0      	nop			; (mov r8, r8)
    58ec:	200003d8 	.word	0x200003d8
    58f0:	000055a5 	.word	0x000055a5
    58f4:	00005529 	.word	0x00005529
    58f8:	000055d9 	.word	0x000055d9
    58fc:	0000560f 	.word	0x0000560f

00005900 <system_gclk_chan_get_config_defaults>:
{
    5900:	b580      	push	{r7, lr}
    5902:	b082      	sub	sp, #8
    5904:	af00      	add	r7, sp, #0
    5906:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	2200      	movs	r2, #0
    590c:	701a      	strb	r2, [r3, #0]
}
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	46bd      	mov	sp, r7
    5912:	b002      	add	sp, #8
    5914:	bd80      	pop	{r7, pc}
	...

00005918 <system_apb_clock_set_mask>:
{
    5918:	b580      	push	{r7, lr}
    591a:	b082      	sub	sp, #8
    591c:	af00      	add	r7, sp, #0
    591e:	0002      	movs	r2, r0
    5920:	6039      	str	r1, [r7, #0]
    5922:	1dfb      	adds	r3, r7, #7
    5924:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5926:	1dfb      	adds	r3, r7, #7
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	2b01      	cmp	r3, #1
    592c:	d00a      	beq.n	5944 <system_apb_clock_set_mask+0x2c>
    592e:	2b02      	cmp	r3, #2
    5930:	d00f      	beq.n	5952 <system_apb_clock_set_mask+0x3a>
    5932:	2b00      	cmp	r3, #0
    5934:	d114      	bne.n	5960 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5936:	4b0e      	ldr	r3, [pc, #56]	; (5970 <system_apb_clock_set_mask+0x58>)
    5938:	4a0d      	ldr	r2, [pc, #52]	; (5970 <system_apb_clock_set_mask+0x58>)
    593a:	6991      	ldr	r1, [r2, #24]
    593c:	683a      	ldr	r2, [r7, #0]
    593e:	430a      	orrs	r2, r1
    5940:	619a      	str	r2, [r3, #24]
			break;
    5942:	e00f      	b.n	5964 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5944:	4b0a      	ldr	r3, [pc, #40]	; (5970 <system_apb_clock_set_mask+0x58>)
    5946:	4a0a      	ldr	r2, [pc, #40]	; (5970 <system_apb_clock_set_mask+0x58>)
    5948:	69d1      	ldr	r1, [r2, #28]
    594a:	683a      	ldr	r2, [r7, #0]
    594c:	430a      	orrs	r2, r1
    594e:	61da      	str	r2, [r3, #28]
			break;
    5950:	e008      	b.n	5964 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5952:	4b07      	ldr	r3, [pc, #28]	; (5970 <system_apb_clock_set_mask+0x58>)
    5954:	4a06      	ldr	r2, [pc, #24]	; (5970 <system_apb_clock_set_mask+0x58>)
    5956:	6a11      	ldr	r1, [r2, #32]
    5958:	683a      	ldr	r2, [r7, #0]
    595a:	430a      	orrs	r2, r1
    595c:	621a      	str	r2, [r3, #32]
			break;
    595e:	e001      	b.n	5964 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5960:	2317      	movs	r3, #23
    5962:	e000      	b.n	5966 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5964:	2300      	movs	r3, #0
}
    5966:	0018      	movs	r0, r3
    5968:	46bd      	mov	sp, r7
    596a:	b002      	add	sp, #8
    596c:	bd80      	pop	{r7, pc}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	40000400 	.word	0x40000400

00005974 <system_pinmux_get_config_defaults>:
{
    5974:	b580      	push	{r7, lr}
    5976:	b082      	sub	sp, #8
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	2280      	movs	r2, #128	; 0x80
    5980:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	2200      	movs	r2, #0
    5986:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	2201      	movs	r2, #1
    598c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    598e:	687b      	ldr	r3, [r7, #4]
    5990:	2200      	movs	r2, #0
    5992:	70da      	strb	r2, [r3, #3]
}
    5994:	46c0      	nop			; (mov r8, r8)
    5996:	46bd      	mov	sp, r7
    5998:	b002      	add	sp, #8
    599a:	bd80      	pop	{r7, pc}

0000599c <system_is_debugger_present>:
{
    599c:	b580      	push	{r7, lr}
    599e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    59a0:	4b05      	ldr	r3, [pc, #20]	; (59b8 <system_is_debugger_present+0x1c>)
    59a2:	789b      	ldrb	r3, [r3, #2]
    59a4:	b2db      	uxtb	r3, r3
    59a6:	001a      	movs	r2, r3
    59a8:	2302      	movs	r3, #2
    59aa:	4013      	ands	r3, r2
    59ac:	1e5a      	subs	r2, r3, #1
    59ae:	4193      	sbcs	r3, r2
    59b0:	b2db      	uxtb	r3, r3
}
    59b2:	0018      	movs	r0, r3
    59b4:	46bd      	mov	sp, r7
    59b6:	bd80      	pop	{r7, pc}
    59b8:	41002000 	.word	0x41002000

000059bc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    59bc:	b580      	push	{r7, lr}
    59be:	b084      	sub	sp, #16
    59c0:	af00      	add	r7, sp, #0
    59c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    59ca:	68fb      	ldr	r3, [r7, #12]
    59cc:	69db      	ldr	r3, [r3, #28]
    59ce:	1e5a      	subs	r2, r3, #1
    59d0:	4193      	sbcs	r3, r2
    59d2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    59d4:	0018      	movs	r0, r3
    59d6:	46bd      	mov	sp, r7
    59d8:	b004      	add	sp, #16
    59da:	bd80      	pop	{r7, pc}

000059dc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    59dc:	b580      	push	{r7, lr}
    59de:	b082      	sub	sp, #8
    59e0:	af00      	add	r7, sp, #0
    59e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    59e4:	46c0      	nop			; (mov r8, r8)
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	0018      	movs	r0, r3
    59ea:	4b04      	ldr	r3, [pc, #16]	; (59fc <_usart_wait_for_sync+0x20>)
    59ec:	4798      	blx	r3
    59ee:	1e03      	subs	r3, r0, #0
    59f0:	d1f9      	bne.n	59e6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	46bd      	mov	sp, r7
    59f6:	b002      	add	sp, #8
    59f8:	bd80      	pop	{r7, pc}
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	000059bd 	.word	0x000059bd

00005a00 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5a00:	b5b0      	push	{r4, r5, r7, lr}
    5a02:	b08c      	sub	sp, #48	; 0x30
    5a04:	af02      	add	r7, sp, #8
    5a06:	6078      	str	r0, [r7, #4]
    5a08:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	681b      	ldr	r3, [r3, #0]
    5a14:	0018      	movs	r0, r3
    5a16:	4bab      	ldr	r3, [pc, #684]	; (5cc4 <_usart_set_config+0x2c4>)
    5a18:	4798      	blx	r3
    5a1a:	0003      	movs	r3, r0
    5a1c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a1e:	697b      	ldr	r3, [r7, #20]
    5a20:	3314      	adds	r3, #20
    5a22:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5a24:	2300      	movs	r3, #0
    5a26:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5a28:	2300      	movs	r3, #0
    5a2a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5a2c:	230a      	movs	r3, #10
    5a2e:	18fb      	adds	r3, r7, r3
    5a30:	2200      	movs	r2, #0
    5a32:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5a34:	231f      	movs	r3, #31
    5a36:	18fb      	adds	r3, r7, r3
    5a38:	2200      	movs	r2, #0
    5a3a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5a3c:	231e      	movs	r3, #30
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	2210      	movs	r2, #16
    5a42:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5a44:	683b      	ldr	r3, [r7, #0]
    5a46:	8a1b      	ldrh	r3, [r3, #16]
    5a48:	2280      	movs	r2, #128	; 0x80
    5a4a:	01d2      	lsls	r2, r2, #7
    5a4c:	4293      	cmp	r3, r2
    5a4e:	d01c      	beq.n	5a8a <_usart_set_config+0x8a>
    5a50:	2280      	movs	r2, #128	; 0x80
    5a52:	01d2      	lsls	r2, r2, #7
    5a54:	4293      	cmp	r3, r2
    5a56:	dc06      	bgt.n	5a66 <_usart_set_config+0x66>
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d00d      	beq.n	5a78 <_usart_set_config+0x78>
    5a5c:	2280      	movs	r2, #128	; 0x80
    5a5e:	0192      	lsls	r2, r2, #6
    5a60:	4293      	cmp	r3, r2
    5a62:	d024      	beq.n	5aae <_usart_set_config+0xae>
    5a64:	e035      	b.n	5ad2 <_usart_set_config+0xd2>
    5a66:	22c0      	movs	r2, #192	; 0xc0
    5a68:	01d2      	lsls	r2, r2, #7
    5a6a:	4293      	cmp	r3, r2
    5a6c:	d028      	beq.n	5ac0 <_usart_set_config+0xc0>
    5a6e:	2280      	movs	r2, #128	; 0x80
    5a70:	0212      	lsls	r2, r2, #8
    5a72:	4293      	cmp	r3, r2
    5a74:	d012      	beq.n	5a9c <_usart_set_config+0x9c>
    5a76:	e02c      	b.n	5ad2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5a78:	231f      	movs	r3, #31
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	2200      	movs	r2, #0
    5a7e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5a80:	231e      	movs	r3, #30
    5a82:	18fb      	adds	r3, r7, r3
    5a84:	2210      	movs	r2, #16
    5a86:	701a      	strb	r2, [r3, #0]
			break;
    5a88:	e023      	b.n	5ad2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5a8a:	231f      	movs	r3, #31
    5a8c:	18fb      	adds	r3, r7, r3
    5a8e:	2200      	movs	r2, #0
    5a90:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5a92:	231e      	movs	r3, #30
    5a94:	18fb      	adds	r3, r7, r3
    5a96:	2208      	movs	r2, #8
    5a98:	701a      	strb	r2, [r3, #0]
			break;
    5a9a:	e01a      	b.n	5ad2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5a9c:	231f      	movs	r3, #31
    5a9e:	18fb      	adds	r3, r7, r3
    5aa0:	2200      	movs	r2, #0
    5aa2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5aa4:	231e      	movs	r3, #30
    5aa6:	18fb      	adds	r3, r7, r3
    5aa8:	2203      	movs	r2, #3
    5aaa:	701a      	strb	r2, [r3, #0]
			break;
    5aac:	e011      	b.n	5ad2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5aae:	231f      	movs	r3, #31
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	2201      	movs	r2, #1
    5ab4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5ab6:	231e      	movs	r3, #30
    5ab8:	18fb      	adds	r3, r7, r3
    5aba:	2210      	movs	r2, #16
    5abc:	701a      	strb	r2, [r3, #0]
			break;
    5abe:	e008      	b.n	5ad2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ac0:	231f      	movs	r3, #31
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	2201      	movs	r2, #1
    5ac6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ac8:	231e      	movs	r3, #30
    5aca:	18fb      	adds	r3, r7, r3
    5acc:	2208      	movs	r2, #8
    5ace:	701a      	strb	r2, [r3, #0]
			break;
    5ad0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ad2:	683b      	ldr	r3, [r7, #0]
    5ad4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5ad6:	683b      	ldr	r3, [r7, #0]
    5ad8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5ada:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5adc:	683b      	ldr	r3, [r7, #0]
    5ade:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ae0:	4313      	orrs	r3, r2
		config->sample_rate |
    5ae2:	683a      	ldr	r2, [r7, #0]
    5ae4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5ae6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5ae8:	683a      	ldr	r2, [r7, #0]
    5aea:	7e12      	ldrb	r2, [r2, #24]
    5aec:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5aee:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5af0:	683a      	ldr	r2, [r7, #0]
    5af2:	2126      	movs	r1, #38	; 0x26
    5af4:	5c52      	ldrb	r2, [r2, r1]
    5af6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5af8:	4313      	orrs	r3, r2
    5afa:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5afc:	231d      	movs	r3, #29
    5afe:	18fb      	adds	r3, r7, r3
    5b00:	2200      	movs	r2, #0
    5b02:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5b04:	683b      	ldr	r3, [r7, #0]
    5b06:	685b      	ldr	r3, [r3, #4]
    5b08:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d01e      	beq.n	5b4e <_usart_set_config+0x14e>
    5b10:	2280      	movs	r2, #128	; 0x80
    5b12:	0552      	lsls	r2, r2, #21
    5b14:	4293      	cmp	r3, r2
    5b16:	d14f      	bne.n	5bb8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5b18:	683b      	ldr	r3, [r7, #0]
    5b1a:	2227      	movs	r2, #39	; 0x27
    5b1c:	5c9b      	ldrb	r3, [r3, r2]
    5b1e:	2201      	movs	r2, #1
    5b20:	4053      	eors	r3, r2
    5b22:	b2db      	uxtb	r3, r3
    5b24:	2b00      	cmp	r3, #0
    5b26:	d046      	beq.n	5bb6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5b28:	683b      	ldr	r3, [r7, #0]
    5b2a:	6a1d      	ldr	r5, [r3, #32]
    5b2c:	693b      	ldr	r3, [r7, #16]
    5b2e:	b2db      	uxtb	r3, r3
    5b30:	0018      	movs	r0, r3
    5b32:	4b65      	ldr	r3, [pc, #404]	; (5cc8 <_usart_set_config+0x2c8>)
    5b34:	4798      	blx	r3
    5b36:	0001      	movs	r1, r0
    5b38:	231d      	movs	r3, #29
    5b3a:	18fc      	adds	r4, r7, r3
    5b3c:	230a      	movs	r3, #10
    5b3e:	18fb      	adds	r3, r7, r3
    5b40:	001a      	movs	r2, r3
    5b42:	0028      	movs	r0, r5
    5b44:	4b61      	ldr	r3, [pc, #388]	; (5ccc <_usart_set_config+0x2cc>)
    5b46:	4798      	blx	r3
    5b48:	0003      	movs	r3, r0
    5b4a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5b4c:	e033      	b.n	5bb6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5b4e:	683b      	ldr	r3, [r7, #0]
    5b50:	2227      	movs	r2, #39	; 0x27
    5b52:	5c9b      	ldrb	r3, [r3, r2]
    5b54:	2b00      	cmp	r3, #0
    5b56:	d014      	beq.n	5b82 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5b58:	683b      	ldr	r3, [r7, #0]
    5b5a:	6a18      	ldr	r0, [r3, #32]
    5b5c:	683b      	ldr	r3, [r7, #0]
    5b5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5b60:	231d      	movs	r3, #29
    5b62:	18fc      	adds	r4, r7, r3
    5b64:	231f      	movs	r3, #31
    5b66:	18fb      	adds	r3, r7, r3
    5b68:	781d      	ldrb	r5, [r3, #0]
    5b6a:	230a      	movs	r3, #10
    5b6c:	18fa      	adds	r2, r7, r3
    5b6e:	231e      	movs	r3, #30
    5b70:	18fb      	adds	r3, r7, r3
    5b72:	781b      	ldrb	r3, [r3, #0]
    5b74:	9300      	str	r3, [sp, #0]
    5b76:	002b      	movs	r3, r5
    5b78:	4d55      	ldr	r5, [pc, #340]	; (5cd0 <_usart_set_config+0x2d0>)
    5b7a:	47a8      	blx	r5
    5b7c:	0003      	movs	r3, r0
    5b7e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5b80:	e01a      	b.n	5bb8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5b82:	683b      	ldr	r3, [r7, #0]
    5b84:	6a1d      	ldr	r5, [r3, #32]
    5b86:	693b      	ldr	r3, [r7, #16]
    5b88:	b2db      	uxtb	r3, r3
    5b8a:	0018      	movs	r0, r3
    5b8c:	4b4e      	ldr	r3, [pc, #312]	; (5cc8 <_usart_set_config+0x2c8>)
    5b8e:	4798      	blx	r3
				status_code =
    5b90:	231d      	movs	r3, #29
    5b92:	18fc      	adds	r4, r7, r3
    5b94:	231f      	movs	r3, #31
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	7819      	ldrb	r1, [r3, #0]
    5b9a:	230a      	movs	r3, #10
    5b9c:	18fa      	adds	r2, r7, r3
    5b9e:	231e      	movs	r3, #30
    5ba0:	18fb      	adds	r3, r7, r3
    5ba2:	781b      	ldrb	r3, [r3, #0]
    5ba4:	9300      	str	r3, [sp, #0]
    5ba6:	000b      	movs	r3, r1
    5ba8:	0001      	movs	r1, r0
    5baa:	0028      	movs	r0, r5
    5bac:	4d48      	ldr	r5, [pc, #288]	; (5cd0 <_usart_set_config+0x2d0>)
    5bae:	47a8      	blx	r5
    5bb0:	0003      	movs	r3, r0
    5bb2:	7023      	strb	r3, [r4, #0]
			break;
    5bb4:	e000      	b.n	5bb8 <_usart_set_config+0x1b8>
			break;
    5bb6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5bb8:	231d      	movs	r3, #29
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d003      	beq.n	5bca <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5bc2:	231d      	movs	r3, #29
    5bc4:	18fb      	adds	r3, r7, r3
    5bc6:	781b      	ldrb	r3, [r3, #0]
    5bc8:	e077      	b.n	5cba <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5bca:	683b      	ldr	r3, [r7, #0]
    5bcc:	7e5b      	ldrb	r3, [r3, #25]
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d003      	beq.n	5bda <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5bd2:	683b      	ldr	r3, [r7, #0]
    5bd4:	7e9a      	ldrb	r2, [r3, #26]
    5bd6:	69bb      	ldr	r3, [r7, #24]
    5bd8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b3d      	ldr	r3, [pc, #244]	; (5cd4 <_usart_set_config+0x2d4>)
    5be0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5be2:	230a      	movs	r3, #10
    5be4:	18fb      	adds	r3, r7, r3
    5be6:	881a      	ldrh	r2, [r3, #0]
    5be8:	69bb      	ldr	r3, [r7, #24]
    5bea:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5bee:	68fb      	ldr	r3, [r7, #12]
    5bf0:	4313      	orrs	r3, r2
    5bf2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5bf4:	683b      	ldr	r3, [r7, #0]
    5bf6:	2227      	movs	r2, #39	; 0x27
    5bf8:	5c9b      	ldrb	r3, [r3, r2]
    5bfa:	2201      	movs	r2, #1
    5bfc:	4053      	eors	r3, r2
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	2b00      	cmp	r3, #0
    5c02:	d003      	beq.n	5c0c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c06:	2204      	movs	r2, #4
    5c08:	4313      	orrs	r3, r2
    5c0a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5c0c:	683b      	ldr	r3, [r7, #0]
    5c0e:	7e5b      	ldrb	r3, [r3, #25]
    5c10:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5c12:	683b      	ldr	r3, [r7, #0]
    5c14:	7f1b      	ldrb	r3, [r3, #28]
    5c16:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5c18:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5c1a:	683b      	ldr	r3, [r7, #0]
    5c1c:	7f5b      	ldrb	r3, [r3, #29]
    5c1e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5c20:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5c22:	683b      	ldr	r3, [r7, #0]
    5c24:	2124      	movs	r1, #36	; 0x24
    5c26:	5c5b      	ldrb	r3, [r3, r1]
    5c28:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5c2a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5c2c:	683b      	ldr	r3, [r7, #0]
    5c2e:	2125      	movs	r1, #37	; 0x25
    5c30:	5c5b      	ldrb	r3, [r3, r1]
    5c32:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5c34:	4313      	orrs	r3, r2
	ctrlb =  
    5c36:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    5c38:	683b      	ldr	r3, [r7, #0]
    5c3a:	7a9b      	ldrb	r3, [r3, #10]
    5c3c:	001a      	movs	r2, r3
    5c3e:	6a3b      	ldr	r3, [r7, #32]
    5c40:	4313      	orrs	r3, r2
    5c42:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5c44:	683b      	ldr	r3, [r7, #0]
    5c46:	7adb      	ldrb	r3, [r3, #11]
    5c48:	001a      	movs	r2, r3
    5c4a:	6a3b      	ldr	r3, [r7, #32]
    5c4c:	4313      	orrs	r3, r2
    5c4e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5c50:	683b      	ldr	r3, [r7, #0]
    5c52:	891b      	ldrh	r3, [r3, #8]
    5c54:	2bff      	cmp	r3, #255	; 0xff
    5c56:	d00b      	beq.n	5c70 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c5a:	2280      	movs	r2, #128	; 0x80
    5c5c:	0452      	lsls	r2, r2, #17
    5c5e:	4313      	orrs	r3, r2
    5c60:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5c62:	683b      	ldr	r3, [r7, #0]
    5c64:	891b      	ldrh	r3, [r3, #8]
    5c66:	001a      	movs	r2, r3
    5c68:	6a3b      	ldr	r3, [r7, #32]
    5c6a:	4313      	orrs	r3, r2
    5c6c:	623b      	str	r3, [r7, #32]
    5c6e:	e008      	b.n	5c82 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5c70:	683b      	ldr	r3, [r7, #0]
    5c72:	7edb      	ldrb	r3, [r3, #27]
    5c74:	2b00      	cmp	r3, #0
    5c76:	d004      	beq.n	5c82 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c7a:	2280      	movs	r2, #128	; 0x80
    5c7c:	04d2      	lsls	r2, r2, #19
    5c7e:	4313      	orrs	r3, r2
    5c80:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	222c      	movs	r2, #44	; 0x2c
    5c86:	5c9b      	ldrb	r3, [r3, r2]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d103      	bne.n	5c94 <_usart_set_config+0x294>
    5c8c:	4b12      	ldr	r3, [pc, #72]	; (5cd8 <_usart_set_config+0x2d8>)
    5c8e:	4798      	blx	r3
    5c90:	1e03      	subs	r3, r0, #0
    5c92:	d003      	beq.n	5c9c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c96:	2280      	movs	r2, #128	; 0x80
    5c98:	4313      	orrs	r3, r2
    5c9a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	0018      	movs	r0, r3
    5ca0:	4b0c      	ldr	r3, [pc, #48]	; (5cd4 <_usart_set_config+0x2d4>)
    5ca2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5ca4:	69bb      	ldr	r3, [r7, #24]
    5ca6:	6a3a      	ldr	r2, [r7, #32]
    5ca8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	0018      	movs	r0, r3
    5cae:	4b09      	ldr	r3, [pc, #36]	; (5cd4 <_usart_set_config+0x2d4>)
    5cb0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5cb2:	69bb      	ldr	r3, [r7, #24]
    5cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5cb6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5cb8:	2300      	movs	r3, #0
}
    5cba:	0018      	movs	r0, r3
    5cbc:	46bd      	mov	sp, r7
    5cbe:	b00a      	add	sp, #40	; 0x28
    5cc0:	bdb0      	pop	{r4, r5, r7, pc}
    5cc2:	46c0      	nop			; (mov r8, r8)
    5cc4:	00004b61 	.word	0x00004b61
    5cc8:	00007185 	.word	0x00007185
    5ccc:	000046db 	.word	0x000046db
    5cd0:	00004759 	.word	0x00004759
    5cd4:	000059dd 	.word	0x000059dd
    5cd8:	0000599d 	.word	0x0000599d

00005cdc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5cdc:	b590      	push	{r4, r7, lr}
    5cde:	b093      	sub	sp, #76	; 0x4c
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	60f8      	str	r0, [r7, #12]
    5ce4:	60b9      	str	r1, [r7, #8]
    5ce6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5ce8:	233b      	movs	r3, #59	; 0x3b
    5cea:	18fb      	adds	r3, r7, r3
    5cec:	2200      	movs	r2, #0
    5cee:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5cf0:	68fb      	ldr	r3, [r7, #12]
    5cf2:	68ba      	ldr	r2, [r7, #8]
    5cf4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5cfc:	68fb      	ldr	r3, [r7, #12]
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	0018      	movs	r0, r3
    5d02:	4b86      	ldr	r3, [pc, #536]	; (5f1c <usart_init+0x240>)
    5d04:	4798      	blx	r3
    5d06:	0003      	movs	r3, r0
    5d08:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d0c:	3302      	adds	r3, #2
    5d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d12:	3314      	adds	r3, #20
    5d14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	2201      	movs	r2, #1
    5d1c:	4013      	ands	r3, r2
    5d1e:	d001      	beq.n	5d24 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5d20:	2305      	movs	r3, #5
    5d22:	e0f6      	b.n	5f12 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d26:	681b      	ldr	r3, [r3, #0]
    5d28:	2202      	movs	r2, #2
    5d2a:	4013      	ands	r3, r2
    5d2c:	d001      	beq.n	5d32 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5d2e:	231c      	movs	r3, #28
    5d30:	e0ef      	b.n	5f12 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5d32:	2201      	movs	r2, #1
    5d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d36:	409a      	lsls	r2, r3
    5d38:	0013      	movs	r3, r2
    5d3a:	0019      	movs	r1, r3
    5d3c:	2002      	movs	r0, #2
    5d3e:	4b78      	ldr	r3, [pc, #480]	; (5f20 <usart_init+0x244>)
    5d40:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5d42:	2324      	movs	r3, #36	; 0x24
    5d44:	18fb      	adds	r3, r7, r3
    5d46:	0018      	movs	r0, r3
    5d48:	4b76      	ldr	r3, [pc, #472]	; (5f24 <usart_init+0x248>)
    5d4a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	222d      	movs	r2, #45	; 0x2d
    5d50:	5c9a      	ldrb	r2, [r3, r2]
    5d52:	2324      	movs	r3, #36	; 0x24
    5d54:	18fb      	adds	r3, r7, r3
    5d56:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5d5a:	b2db      	uxtb	r3, r3
    5d5c:	2224      	movs	r2, #36	; 0x24
    5d5e:	18ba      	adds	r2, r7, r2
    5d60:	0011      	movs	r1, r2
    5d62:	0018      	movs	r0, r3
    5d64:	4b70      	ldr	r3, [pc, #448]	; (5f28 <usart_init+0x24c>)
    5d66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5d6a:	b2db      	uxtb	r3, r3
    5d6c:	0018      	movs	r0, r3
    5d6e:	4b6f      	ldr	r3, [pc, #444]	; (5f2c <usart_init+0x250>)
    5d70:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	222d      	movs	r2, #45	; 0x2d
    5d76:	5c9b      	ldrb	r3, [r3, r2]
    5d78:	2100      	movs	r1, #0
    5d7a:	0018      	movs	r0, r3
    5d7c:	4b6c      	ldr	r3, [pc, #432]	; (5f30 <usart_init+0x254>)
    5d7e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	7ada      	ldrb	r2, [r3, #11]
    5d84:	68fb      	ldr	r3, [r7, #12]
    5d86:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	2224      	movs	r2, #36	; 0x24
    5d8c:	5c9a      	ldrb	r2, [r3, r2]
    5d8e:	68fb      	ldr	r3, [r7, #12]
    5d90:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	2225      	movs	r2, #37	; 0x25
    5d96:	5c9a      	ldrb	r2, [r3, r2]
    5d98:	68fb      	ldr	r3, [r7, #12]
    5d9a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	7eda      	ldrb	r2, [r3, #27]
    5da0:	68fb      	ldr	r3, [r7, #12]
    5da2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	7f1a      	ldrb	r2, [r3, #28]
    5da8:	68fb      	ldr	r3, [r7, #12]
    5daa:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5dac:	233b      	movs	r3, #59	; 0x3b
    5dae:	18fc      	adds	r4, r7, r3
    5db0:	687a      	ldr	r2, [r7, #4]
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	0011      	movs	r1, r2
    5db6:	0018      	movs	r0, r3
    5db8:	4b5e      	ldr	r3, [pc, #376]	; (5f34 <usart_init+0x258>)
    5dba:	4798      	blx	r3
    5dbc:	0003      	movs	r3, r0
    5dbe:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5dc0:	233b      	movs	r3, #59	; 0x3b
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	781b      	ldrb	r3, [r3, #0]
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d003      	beq.n	5dd2 <usart_init+0xf6>
		return status_code;
    5dca:	233b      	movs	r3, #59	; 0x3b
    5dcc:	18fb      	adds	r3, r7, r3
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	e09f      	b.n	5f12 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5dd2:	2320      	movs	r3, #32
    5dd4:	18fb      	adds	r3, r7, r3
    5dd6:	0018      	movs	r0, r3
    5dd8:	4b57      	ldr	r3, [pc, #348]	; (5f38 <usart_init+0x25c>)
    5dda:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5ddc:	2320      	movs	r3, #32
    5dde:	18fb      	adds	r3, r7, r3
    5de0:	2200      	movs	r2, #0
    5de2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5de4:	2320      	movs	r3, #32
    5de6:	18fb      	adds	r3, r7, r3
    5de8:	2200      	movs	r2, #0
    5dea:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5df0:	2310      	movs	r3, #16
    5df2:	18fb      	adds	r3, r7, r3
    5df4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5dfa:	2310      	movs	r3, #16
    5dfc:	18fb      	adds	r3, r7, r3
    5dfe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5e04:	2310      	movs	r3, #16
    5e06:	18fb      	adds	r3, r7, r3
    5e08:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5e0a:	687b      	ldr	r3, [r7, #4]
    5e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5e0e:	2310      	movs	r3, #16
    5e10:	18fb      	adds	r3, r7, r3
    5e12:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e14:	2347      	movs	r3, #71	; 0x47
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	2200      	movs	r2, #0
    5e1a:	701a      	strb	r2, [r3, #0]
    5e1c:	e02c      	b.n	5e78 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5e1e:	2347      	movs	r3, #71	; 0x47
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	781a      	ldrb	r2, [r3, #0]
    5e24:	2310      	movs	r3, #16
    5e26:	18fb      	adds	r3, r7, r3
    5e28:	0092      	lsls	r2, r2, #2
    5e2a:	58d3      	ldr	r3, [r2, r3]
    5e2c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e30:	2b00      	cmp	r3, #0
    5e32:	d109      	bne.n	5e48 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5e34:	2347      	movs	r3, #71	; 0x47
    5e36:	18fb      	adds	r3, r7, r3
    5e38:	781a      	ldrb	r2, [r3, #0]
    5e3a:	68bb      	ldr	r3, [r7, #8]
    5e3c:	0011      	movs	r1, r2
    5e3e:	0018      	movs	r0, r3
    5e40:	4b3e      	ldr	r3, [pc, #248]	; (5f3c <usart_init+0x260>)
    5e42:	4798      	blx	r3
    5e44:	0003      	movs	r3, r0
    5e46:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e4a:	3301      	adds	r3, #1
    5e4c:	d00d      	beq.n	5e6a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e50:	b2da      	uxtb	r2, r3
    5e52:	2320      	movs	r3, #32
    5e54:	18fb      	adds	r3, r7, r3
    5e56:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e5a:	0c1b      	lsrs	r3, r3, #16
    5e5c:	b2db      	uxtb	r3, r3
    5e5e:	2220      	movs	r2, #32
    5e60:	18ba      	adds	r2, r7, r2
    5e62:	0011      	movs	r1, r2
    5e64:	0018      	movs	r0, r3
    5e66:	4b36      	ldr	r3, [pc, #216]	; (5f40 <usart_init+0x264>)
    5e68:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e6a:	2347      	movs	r3, #71	; 0x47
    5e6c:	18fb      	adds	r3, r7, r3
    5e6e:	781a      	ldrb	r2, [r3, #0]
    5e70:	2347      	movs	r3, #71	; 0x47
    5e72:	18fb      	adds	r3, r7, r3
    5e74:	3201      	adds	r2, #1
    5e76:	701a      	strb	r2, [r3, #0]
    5e78:	2347      	movs	r3, #71	; 0x47
    5e7a:	18fb      	adds	r3, r7, r3
    5e7c:	781b      	ldrb	r3, [r3, #0]
    5e7e:	2b03      	cmp	r3, #3
    5e80:	d9cd      	bls.n	5e1e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5e82:	2300      	movs	r3, #0
    5e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    5e86:	e00a      	b.n	5e9e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5e88:	68fa      	ldr	r2, [r7, #12]
    5e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5e8c:	3302      	adds	r3, #2
    5e8e:	009b      	lsls	r3, r3, #2
    5e90:	18d3      	adds	r3, r2, r3
    5e92:	3304      	adds	r3, #4
    5e94:	2200      	movs	r2, #0
    5e96:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5e9a:	3301      	adds	r3, #1
    5e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    5e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5ea0:	2b05      	cmp	r3, #5
    5ea2:	d9f1      	bls.n	5e88 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	2200      	movs	r2, #0
    5ea8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5eaa:	68fb      	ldr	r3, [r7, #12]
    5eac:	2200      	movs	r2, #0
    5eae:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5eb0:	68fb      	ldr	r3, [r7, #12]
    5eb2:	2200      	movs	r2, #0
    5eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5eb6:	68fb      	ldr	r3, [r7, #12]
    5eb8:	2200      	movs	r2, #0
    5eba:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5ebc:	68fb      	ldr	r3, [r7, #12]
    5ebe:	2230      	movs	r2, #48	; 0x30
    5ec0:	2100      	movs	r1, #0
    5ec2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	2231      	movs	r2, #49	; 0x31
    5ec8:	2100      	movs	r1, #0
    5eca:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5ecc:	68fb      	ldr	r3, [r7, #12]
    5ece:	2232      	movs	r2, #50	; 0x32
    5ed0:	2100      	movs	r1, #0
    5ed2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5ed4:	68fb      	ldr	r3, [r7, #12]
    5ed6:	2233      	movs	r2, #51	; 0x33
    5ed8:	2100      	movs	r1, #0
    5eda:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5edc:	68fb      	ldr	r3, [r7, #12]
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	2227      	movs	r2, #39	; 0x27
    5ee2:	18bc      	adds	r4, r7, r2
    5ee4:	0018      	movs	r0, r3
    5ee6:	4b0d      	ldr	r3, [pc, #52]	; (5f1c <usart_init+0x240>)
    5ee8:	4798      	blx	r3
    5eea:	0003      	movs	r3, r0
    5eec:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5eee:	4a15      	ldr	r2, [pc, #84]	; (5f44 <usart_init+0x268>)
    5ef0:	2327      	movs	r3, #39	; 0x27
    5ef2:	18fb      	adds	r3, r7, r3
    5ef4:	781b      	ldrb	r3, [r3, #0]
    5ef6:	0011      	movs	r1, r2
    5ef8:	0018      	movs	r0, r3
    5efa:	4b13      	ldr	r3, [pc, #76]	; (5f48 <usart_init+0x26c>)
    5efc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5efe:	2327      	movs	r3, #39	; 0x27
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	781a      	ldrb	r2, [r3, #0]
    5f04:	4b11      	ldr	r3, [pc, #68]	; (5f4c <usart_init+0x270>)
    5f06:	0092      	lsls	r2, r2, #2
    5f08:	68f9      	ldr	r1, [r7, #12]
    5f0a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5f0c:	233b      	movs	r3, #59	; 0x3b
    5f0e:	18fb      	adds	r3, r7, r3
    5f10:	781b      	ldrb	r3, [r3, #0]
}
    5f12:	0018      	movs	r0, r3
    5f14:	46bd      	mov	sp, r7
    5f16:	b013      	add	sp, #76	; 0x4c
    5f18:	bd90      	pop	{r4, r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	00004b61 	.word	0x00004b61
    5f20:	00005919 	.word	0x00005919
    5f24:	00005901 	.word	0x00005901
    5f28:	00007061 	.word	0x00007061
    5f2c:	000070a5 	.word	0x000070a5
    5f30:	00004919 	.word	0x00004919
    5f34:	00005a01 	.word	0x00005a01
    5f38:	00005975 	.word	0x00005975
    5f3c:	000049a5 	.word	0x000049a5
    5f40:	0000734d 	.word	0x0000734d
    5f44:	000060e5 	.word	0x000060e5
    5f48:	00004bc5 	.word	0x00004bc5
    5f4c:	200003d8 	.word	0x200003d8

00005f50 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b084      	sub	sp, #16
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
    5f58:	000a      	movs	r2, r1
    5f5a:	1cbb      	adds	r3, r7, #2
    5f5c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	79db      	ldrb	r3, [r3, #7]
    5f68:	2201      	movs	r2, #1
    5f6a:	4053      	eors	r3, r2
    5f6c:	b2db      	uxtb	r3, r3
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d001      	beq.n	5f76 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5f72:	231c      	movs	r3, #28
    5f74:	e017      	b.n	5fa6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5f7a:	b29b      	uxth	r3, r3
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d001      	beq.n	5f84 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5f80:	2305      	movs	r3, #5
    5f82:	e010      	b.n	5fa6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	0018      	movs	r0, r3
    5f88:	4b09      	ldr	r3, [pc, #36]	; (5fb0 <usart_write_wait+0x60>)
    5f8a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5f8c:	68fb      	ldr	r3, [r7, #12]
    5f8e:	1cba      	adds	r2, r7, #2
    5f90:	8812      	ldrh	r2, [r2, #0]
    5f92:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5f94:	46c0      	nop			; (mov r8, r8)
    5f96:	68fb      	ldr	r3, [r7, #12]
    5f98:	7e1b      	ldrb	r3, [r3, #24]
    5f9a:	b2db      	uxtb	r3, r3
    5f9c:	001a      	movs	r2, r3
    5f9e:	2302      	movs	r3, #2
    5fa0:	4013      	ands	r3, r2
    5fa2:	d0f8      	beq.n	5f96 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5fa4:	2300      	movs	r3, #0
}
    5fa6:	0018      	movs	r0, r3
    5fa8:	46bd      	mov	sp, r7
    5faa:	b004      	add	sp, #16
    5fac:	bd80      	pop	{r7, pc}
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	000059dd 	.word	0x000059dd

00005fb4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b084      	sub	sp, #16
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
    5fbc:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	681b      	ldr	r3, [r3, #0]
    5fc2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	799b      	ldrb	r3, [r3, #6]
    5fc8:	2201      	movs	r2, #1
    5fca:	4053      	eors	r3, r2
    5fcc:	b2db      	uxtb	r3, r3
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d001      	beq.n	5fd6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5fd2:	231c      	movs	r3, #28
    5fd4:	e05e      	b.n	6094 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5fda:	b29b      	uxth	r3, r3
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d001      	beq.n	5fe4 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5fe0:	2305      	movs	r3, #5
    5fe2:	e057      	b.n	6094 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5fe4:	68fb      	ldr	r3, [r7, #12]
    5fe6:	7e1b      	ldrb	r3, [r3, #24]
    5fe8:	b2db      	uxtb	r3, r3
    5fea:	001a      	movs	r2, r3
    5fec:	2304      	movs	r3, #4
    5fee:	4013      	ands	r3, r2
    5ff0:	d101      	bne.n	5ff6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5ff2:	2305      	movs	r3, #5
    5ff4:	e04e      	b.n	6094 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	0018      	movs	r0, r3
    5ffa:	4b28      	ldr	r3, [pc, #160]	; (609c <usart_read_wait+0xe8>)
    5ffc:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	8b5b      	ldrh	r3, [r3, #26]
    6002:	b29b      	uxth	r3, r3
    6004:	b2da      	uxtb	r2, r3
    6006:	230b      	movs	r3, #11
    6008:	18fb      	adds	r3, r7, r3
    600a:	213f      	movs	r1, #63	; 0x3f
    600c:	400a      	ands	r2, r1
    600e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    6010:	230b      	movs	r3, #11
    6012:	18fb      	adds	r3, r7, r3
    6014:	781b      	ldrb	r3, [r3, #0]
    6016:	2b00      	cmp	r3, #0
    6018:	d036      	beq.n	6088 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    601a:	230b      	movs	r3, #11
    601c:	18fb      	adds	r3, r7, r3
    601e:	781b      	ldrb	r3, [r3, #0]
    6020:	2202      	movs	r2, #2
    6022:	4013      	ands	r3, r2
    6024:	d004      	beq.n	6030 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6026:	68fb      	ldr	r3, [r7, #12]
    6028:	2202      	movs	r2, #2
    602a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    602c:	231a      	movs	r3, #26
    602e:	e031      	b.n	6094 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6030:	230b      	movs	r3, #11
    6032:	18fb      	adds	r3, r7, r3
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	2204      	movs	r2, #4
    6038:	4013      	ands	r3, r2
    603a:	d004      	beq.n	6046 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    603c:	68fb      	ldr	r3, [r7, #12]
    603e:	2204      	movs	r2, #4
    6040:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    6042:	231e      	movs	r3, #30
    6044:	e026      	b.n	6094 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6046:	230b      	movs	r3, #11
    6048:	18fb      	adds	r3, r7, r3
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	2201      	movs	r2, #1
    604e:	4013      	ands	r3, r2
    6050:	d004      	beq.n	605c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6052:	68fb      	ldr	r3, [r7, #12]
    6054:	2201      	movs	r2, #1
    6056:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    6058:	2313      	movs	r3, #19
    605a:	e01b      	b.n	6094 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    605c:	230b      	movs	r3, #11
    605e:	18fb      	adds	r3, r7, r3
    6060:	781b      	ldrb	r3, [r3, #0]
    6062:	2210      	movs	r2, #16
    6064:	4013      	ands	r3, r2
    6066:	d004      	beq.n	6072 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6068:	68fb      	ldr	r3, [r7, #12]
    606a:	2210      	movs	r2, #16
    606c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    606e:	2342      	movs	r3, #66	; 0x42
    6070:	e010      	b.n	6094 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6072:	230b      	movs	r3, #11
    6074:	18fb      	adds	r3, r7, r3
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	2220      	movs	r2, #32
    607a:	4013      	ands	r3, r2
    607c:	d004      	beq.n	6088 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    607e:	68fb      	ldr	r3, [r7, #12]
    6080:	2220      	movs	r2, #32
    6082:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    6084:	2341      	movs	r3, #65	; 0x41
    6086:	e005      	b.n	6094 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    6088:	68fb      	ldr	r3, [r7, #12]
    608a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    608c:	b29a      	uxth	r2, r3
    608e:	683b      	ldr	r3, [r7, #0]
    6090:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    6092:	2300      	movs	r3, #0
}
    6094:	0018      	movs	r0, r3
    6096:	46bd      	mov	sp, r7
    6098:	b004      	add	sp, #16
    609a:	bd80      	pop	{r7, pc}
    609c:	000059dd 	.word	0x000059dd

000060a0 <usart_is_syncing>:
{
    60a0:	b580      	push	{r7, lr}
    60a2:	b084      	sub	sp, #16
    60a4:	af00      	add	r7, sp, #0
    60a6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    60ae:	68fb      	ldr	r3, [r7, #12]
    60b0:	69db      	ldr	r3, [r3, #28]
    60b2:	1e5a      	subs	r2, r3, #1
    60b4:	4193      	sbcs	r3, r2
    60b6:	b2db      	uxtb	r3, r3
}
    60b8:	0018      	movs	r0, r3
    60ba:	46bd      	mov	sp, r7
    60bc:	b004      	add	sp, #16
    60be:	bd80      	pop	{r7, pc}

000060c0 <_usart_wait_for_sync>:
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    60c8:	46c0      	nop			; (mov r8, r8)
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	0018      	movs	r0, r3
    60ce:	4b04      	ldr	r3, [pc, #16]	; (60e0 <_usart_wait_for_sync+0x20>)
    60d0:	4798      	blx	r3
    60d2:	1e03      	subs	r3, r0, #0
    60d4:	d1f9      	bne.n	60ca <_usart_wait_for_sync+0xa>
}
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	46bd      	mov	sp, r7
    60da:	b002      	add	sp, #8
    60dc:	bd80      	pop	{r7, pc}
    60de:	46c0      	nop			; (mov r8, r8)
    60e0:	000060a1 	.word	0x000060a1

000060e4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b088      	sub	sp, #32
    60e8:	af00      	add	r7, sp, #0
    60ea:	0002      	movs	r2, r0
    60ec:	1dfb      	adds	r3, r7, #7
    60ee:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    60f0:	1dfb      	adds	r3, r7, #7
    60f2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    60f4:	4ba3      	ldr	r3, [pc, #652]	; (6384 <_usart_interrupt_handler+0x2a0>)
    60f6:	0092      	lsls	r2, r2, #2
    60f8:	58d3      	ldr	r3, [r2, r3]
    60fa:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    60fc:	69bb      	ldr	r3, [r7, #24]
    60fe:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6100:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    6102:	69bb      	ldr	r3, [r7, #24]
    6104:	0018      	movs	r0, r3
    6106:	4ba0      	ldr	r3, [pc, #640]	; (6388 <_usart_interrupt_handler+0x2a4>)
    6108:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    610a:	697b      	ldr	r3, [r7, #20]
    610c:	7e1b      	ldrb	r3, [r3, #24]
    610e:	b2da      	uxtb	r2, r3
    6110:	2312      	movs	r3, #18
    6112:	18fb      	adds	r3, r7, r3
    6114:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    6116:	697b      	ldr	r3, [r7, #20]
    6118:	7d9b      	ldrb	r3, [r3, #22]
    611a:	b2db      	uxtb	r3, r3
    611c:	b29a      	uxth	r2, r3
    611e:	2312      	movs	r3, #18
    6120:	18fb      	adds	r3, r7, r3
    6122:	2112      	movs	r1, #18
    6124:	1879      	adds	r1, r7, r1
    6126:	8809      	ldrh	r1, [r1, #0]
    6128:	400a      	ands	r2, r1
    612a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    612c:	69bb      	ldr	r3, [r7, #24]
    612e:	2230      	movs	r2, #48	; 0x30
    6130:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    6132:	69ba      	ldr	r2, [r7, #24]
    6134:	2131      	movs	r1, #49	; 0x31
    6136:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    6138:	4013      	ands	r3, r2
    613a:	b2da      	uxtb	r2, r3
    613c:	2310      	movs	r3, #16
    613e:	18fb      	adds	r3, r7, r3
    6140:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6142:	2312      	movs	r3, #18
    6144:	18fb      	adds	r3, r7, r3
    6146:	881b      	ldrh	r3, [r3, #0]
    6148:	2201      	movs	r2, #1
    614a:	4013      	ands	r3, r2
    614c:	d044      	beq.n	61d8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    614e:	69bb      	ldr	r3, [r7, #24]
    6150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6152:	b29b      	uxth	r3, r3
    6154:	2b00      	cmp	r3, #0
    6156:	d03c      	beq.n	61d2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6158:	69bb      	ldr	r3, [r7, #24]
    615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    615c:	781b      	ldrb	r3, [r3, #0]
    615e:	b2da      	uxtb	r2, r3
    6160:	231c      	movs	r3, #28
    6162:	18fb      	adds	r3, r7, r3
    6164:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6166:	69bb      	ldr	r3, [r7, #24]
    6168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    616a:	1c5a      	adds	r2, r3, #1
    616c:	69bb      	ldr	r3, [r7, #24]
    616e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6170:	69bb      	ldr	r3, [r7, #24]
    6172:	795b      	ldrb	r3, [r3, #5]
    6174:	2b01      	cmp	r3, #1
    6176:	d113      	bne.n	61a0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6178:	69bb      	ldr	r3, [r7, #24]
    617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	b2db      	uxtb	r3, r3
    6180:	021b      	lsls	r3, r3, #8
    6182:	b21a      	sxth	r2, r3
    6184:	231c      	movs	r3, #28
    6186:	18fb      	adds	r3, r7, r3
    6188:	2100      	movs	r1, #0
    618a:	5e5b      	ldrsh	r3, [r3, r1]
    618c:	4313      	orrs	r3, r2
    618e:	b21a      	sxth	r2, r3
    6190:	231c      	movs	r3, #28
    6192:	18fb      	adds	r3, r7, r3
    6194:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6196:	69bb      	ldr	r3, [r7, #24]
    6198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    619a:	1c5a      	adds	r2, r3, #1
    619c:	69bb      	ldr	r3, [r7, #24]
    619e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    61a0:	231c      	movs	r3, #28
    61a2:	18fb      	adds	r3, r7, r3
    61a4:	881b      	ldrh	r3, [r3, #0]
    61a6:	05db      	lsls	r3, r3, #23
    61a8:	0ddb      	lsrs	r3, r3, #23
    61aa:	b29a      	uxth	r2, r3
    61ac:	697b      	ldr	r3, [r7, #20]
    61ae:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    61b0:	69bb      	ldr	r3, [r7, #24]
    61b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    61b4:	b29b      	uxth	r3, r3
    61b6:	3b01      	subs	r3, #1
    61b8:	b29b      	uxth	r3, r3
    61ba:	69ba      	ldr	r2, [r7, #24]
    61bc:	1c19      	adds	r1, r3, #0
    61be:	85d1      	strh	r1, [r2, #46]	; 0x2e
    61c0:	2b00      	cmp	r3, #0
    61c2:	d109      	bne.n	61d8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61c4:	697b      	ldr	r3, [r7, #20]
    61c6:	2201      	movs	r2, #1
    61c8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    61ca:	697b      	ldr	r3, [r7, #20]
    61cc:	2202      	movs	r2, #2
    61ce:	759a      	strb	r2, [r3, #22]
    61d0:	e002      	b.n	61d8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61d2:	697b      	ldr	r3, [r7, #20]
    61d4:	2201      	movs	r2, #1
    61d6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    61d8:	2312      	movs	r3, #18
    61da:	18fb      	adds	r3, r7, r3
    61dc:	881b      	ldrh	r3, [r3, #0]
    61de:	2202      	movs	r2, #2
    61e0:	4013      	ands	r3, r2
    61e2:	d011      	beq.n	6208 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    61e4:	697b      	ldr	r3, [r7, #20]
    61e6:	2202      	movs	r2, #2
    61e8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    61ea:	69bb      	ldr	r3, [r7, #24]
    61ec:	2233      	movs	r2, #51	; 0x33
    61ee:	2100      	movs	r1, #0
    61f0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    61f2:	2310      	movs	r3, #16
    61f4:	18fb      	adds	r3, r7, r3
    61f6:	881b      	ldrh	r3, [r3, #0]
    61f8:	2201      	movs	r2, #1
    61fa:	4013      	ands	r3, r2
    61fc:	d004      	beq.n	6208 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    61fe:	69bb      	ldr	r3, [r7, #24]
    6200:	68db      	ldr	r3, [r3, #12]
    6202:	69ba      	ldr	r2, [r7, #24]
    6204:	0010      	movs	r0, r2
    6206:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6208:	2312      	movs	r3, #18
    620a:	18fb      	adds	r3, r7, r3
    620c:	881b      	ldrh	r3, [r3, #0]
    620e:	2204      	movs	r2, #4
    6210:	4013      	ands	r3, r2
    6212:	d100      	bne.n	6216 <_usart_interrupt_handler+0x132>
    6214:	e0bd      	b.n	6392 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    6216:	69bb      	ldr	r3, [r7, #24]
    6218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    621a:	b29b      	uxth	r3, r3
    621c:	2b00      	cmp	r3, #0
    621e:	d100      	bne.n	6222 <_usart_interrupt_handler+0x13e>
    6220:	e0b4      	b.n	638c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6222:	697b      	ldr	r3, [r7, #20]
    6224:	8b5b      	ldrh	r3, [r3, #26]
    6226:	b29b      	uxth	r3, r3
    6228:	b2da      	uxtb	r2, r3
    622a:	231f      	movs	r3, #31
    622c:	18fb      	adds	r3, r7, r3
    622e:	213f      	movs	r1, #63	; 0x3f
    6230:	400a      	ands	r2, r1
    6232:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6234:	231f      	movs	r3, #31
    6236:	18fb      	adds	r3, r7, r3
    6238:	781b      	ldrb	r3, [r3, #0]
    623a:	2208      	movs	r2, #8
    623c:	4013      	ands	r3, r2
    623e:	d007      	beq.n	6250 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6240:	231f      	movs	r3, #31
    6242:	18fb      	adds	r3, r7, r3
    6244:	221f      	movs	r2, #31
    6246:	18ba      	adds	r2, r7, r2
    6248:	7812      	ldrb	r2, [r2, #0]
    624a:	2108      	movs	r1, #8
    624c:	438a      	bics	r2, r1
    624e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6250:	231f      	movs	r3, #31
    6252:	18fb      	adds	r3, r7, r3
    6254:	781b      	ldrb	r3, [r3, #0]
    6256:	2b00      	cmp	r3, #0
    6258:	d050      	beq.n	62fc <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    625a:	231f      	movs	r3, #31
    625c:	18fb      	adds	r3, r7, r3
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	2202      	movs	r2, #2
    6262:	4013      	ands	r3, r2
    6264:	d007      	beq.n	6276 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6266:	69bb      	ldr	r3, [r7, #24]
    6268:	2232      	movs	r2, #50	; 0x32
    626a:	211a      	movs	r1, #26
    626c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    626e:	697b      	ldr	r3, [r7, #20]
    6270:	2202      	movs	r2, #2
    6272:	835a      	strh	r2, [r3, #26]
    6274:	e036      	b.n	62e4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6276:	231f      	movs	r3, #31
    6278:	18fb      	adds	r3, r7, r3
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	2204      	movs	r2, #4
    627e:	4013      	ands	r3, r2
    6280:	d007      	beq.n	6292 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    6282:	69bb      	ldr	r3, [r7, #24]
    6284:	2232      	movs	r2, #50	; 0x32
    6286:	211e      	movs	r1, #30
    6288:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    628a:	697b      	ldr	r3, [r7, #20]
    628c:	2204      	movs	r2, #4
    628e:	835a      	strh	r2, [r3, #26]
    6290:	e028      	b.n	62e4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6292:	231f      	movs	r3, #31
    6294:	18fb      	adds	r3, r7, r3
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	2201      	movs	r2, #1
    629a:	4013      	ands	r3, r2
    629c:	d007      	beq.n	62ae <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    629e:	69bb      	ldr	r3, [r7, #24]
    62a0:	2232      	movs	r2, #50	; 0x32
    62a2:	2113      	movs	r1, #19
    62a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    62a6:	697b      	ldr	r3, [r7, #20]
    62a8:	2201      	movs	r2, #1
    62aa:	835a      	strh	r2, [r3, #26]
    62ac:	e01a      	b.n	62e4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    62ae:	231f      	movs	r3, #31
    62b0:	18fb      	adds	r3, r7, r3
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	2210      	movs	r2, #16
    62b6:	4013      	ands	r3, r2
    62b8:	d007      	beq.n	62ca <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    62ba:	69bb      	ldr	r3, [r7, #24]
    62bc:	2232      	movs	r2, #50	; 0x32
    62be:	2142      	movs	r1, #66	; 0x42
    62c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    62c2:	697b      	ldr	r3, [r7, #20]
    62c4:	2210      	movs	r2, #16
    62c6:	835a      	strh	r2, [r3, #26]
    62c8:	e00c      	b.n	62e4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    62ca:	231f      	movs	r3, #31
    62cc:	18fb      	adds	r3, r7, r3
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	2220      	movs	r2, #32
    62d2:	4013      	ands	r3, r2
    62d4:	d006      	beq.n	62e4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    62d6:	69bb      	ldr	r3, [r7, #24]
    62d8:	2232      	movs	r2, #50	; 0x32
    62da:	2141      	movs	r1, #65	; 0x41
    62dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    62de:	697b      	ldr	r3, [r7, #20]
    62e0:	2220      	movs	r2, #32
    62e2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    62e4:	2310      	movs	r3, #16
    62e6:	18fb      	adds	r3, r7, r3
    62e8:	881b      	ldrh	r3, [r3, #0]
    62ea:	2204      	movs	r2, #4
    62ec:	4013      	ands	r3, r2
				if (callback_status
    62ee:	d050      	beq.n	6392 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    62f0:	69bb      	ldr	r3, [r7, #24]
    62f2:	695b      	ldr	r3, [r3, #20]
    62f4:	69ba      	ldr	r2, [r7, #24]
    62f6:	0010      	movs	r0, r2
    62f8:	4798      	blx	r3
    62fa:	e04a      	b.n	6392 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    62fc:	697b      	ldr	r3, [r7, #20]
    62fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6300:	b29a      	uxth	r2, r3
    6302:	230e      	movs	r3, #14
    6304:	18fb      	adds	r3, r7, r3
    6306:	05d2      	lsls	r2, r2, #23
    6308:	0dd2      	lsrs	r2, r2, #23
    630a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    630c:	69bb      	ldr	r3, [r7, #24]
    630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6310:	220e      	movs	r2, #14
    6312:	18ba      	adds	r2, r7, r2
    6314:	8812      	ldrh	r2, [r2, #0]
    6316:	b2d2      	uxtb	r2, r2
    6318:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    631a:	69bb      	ldr	r3, [r7, #24]
    631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    631e:	1c5a      	adds	r2, r3, #1
    6320:	69bb      	ldr	r3, [r7, #24]
    6322:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6324:	69bb      	ldr	r3, [r7, #24]
    6326:	795b      	ldrb	r3, [r3, #5]
    6328:	2b01      	cmp	r3, #1
    632a:	d10d      	bne.n	6348 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    632c:	69bb      	ldr	r3, [r7, #24]
    632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6330:	220e      	movs	r2, #14
    6332:	18ba      	adds	r2, r7, r2
    6334:	8812      	ldrh	r2, [r2, #0]
    6336:	0a12      	lsrs	r2, r2, #8
    6338:	b292      	uxth	r2, r2
    633a:	b2d2      	uxtb	r2, r2
    633c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    633e:	69bb      	ldr	r3, [r7, #24]
    6340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6342:	1c5a      	adds	r2, r3, #1
    6344:	69bb      	ldr	r3, [r7, #24]
    6346:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6348:	69bb      	ldr	r3, [r7, #24]
    634a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    634c:	b29b      	uxth	r3, r3
    634e:	3b01      	subs	r3, #1
    6350:	b29b      	uxth	r3, r3
    6352:	69ba      	ldr	r2, [r7, #24]
    6354:	1c19      	adds	r1, r3, #0
    6356:	8591      	strh	r1, [r2, #44]	; 0x2c
    6358:	2b00      	cmp	r3, #0
    635a:	d11a      	bne.n	6392 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    635c:	697b      	ldr	r3, [r7, #20]
    635e:	2204      	movs	r2, #4
    6360:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6362:	69bb      	ldr	r3, [r7, #24]
    6364:	2232      	movs	r2, #50	; 0x32
    6366:	2100      	movs	r1, #0
    6368:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    636a:	2310      	movs	r3, #16
    636c:	18fb      	adds	r3, r7, r3
    636e:	881b      	ldrh	r3, [r3, #0]
    6370:	2202      	movs	r2, #2
    6372:	4013      	ands	r3, r2
					if (callback_status
    6374:	d00d      	beq.n	6392 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6376:	69bb      	ldr	r3, [r7, #24]
    6378:	691b      	ldr	r3, [r3, #16]
    637a:	69ba      	ldr	r2, [r7, #24]
    637c:	0010      	movs	r0, r2
    637e:	4798      	blx	r3
    6380:	e007      	b.n	6392 <_usart_interrupt_handler+0x2ae>
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	200003d8 	.word	0x200003d8
    6388:	000060c1 	.word	0x000060c1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    638c:	697b      	ldr	r3, [r7, #20]
    638e:	2204      	movs	r2, #4
    6390:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6392:	2312      	movs	r3, #18
    6394:	18fb      	adds	r3, r7, r3
    6396:	881b      	ldrh	r3, [r3, #0]
    6398:	2210      	movs	r2, #16
    639a:	4013      	ands	r3, r2
    639c:	d010      	beq.n	63c0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    639e:	697b      	ldr	r3, [r7, #20]
    63a0:	2210      	movs	r2, #16
    63a2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63a4:	697b      	ldr	r3, [r7, #20]
    63a6:	2210      	movs	r2, #16
    63a8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63aa:	2310      	movs	r3, #16
    63ac:	18fb      	adds	r3, r7, r3
    63ae:	881b      	ldrh	r3, [r3, #0]
    63b0:	2210      	movs	r2, #16
    63b2:	4013      	ands	r3, r2
    63b4:	d004      	beq.n	63c0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    63b6:	69bb      	ldr	r3, [r7, #24]
    63b8:	69db      	ldr	r3, [r3, #28]
    63ba:	69ba      	ldr	r2, [r7, #24]
    63bc:	0010      	movs	r0, r2
    63be:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63c0:	2312      	movs	r3, #18
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	881b      	ldrh	r3, [r3, #0]
    63c6:	2220      	movs	r2, #32
    63c8:	4013      	ands	r3, r2
    63ca:	d010      	beq.n	63ee <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63cc:	697b      	ldr	r3, [r7, #20]
    63ce:	2220      	movs	r2, #32
    63d0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63d2:	697b      	ldr	r3, [r7, #20]
    63d4:	2220      	movs	r2, #32
    63d6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    63d8:	2310      	movs	r3, #16
    63da:	18fb      	adds	r3, r7, r3
    63dc:	881b      	ldrh	r3, [r3, #0]
    63de:	2208      	movs	r2, #8
    63e0:	4013      	ands	r3, r2
    63e2:	d004      	beq.n	63ee <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    63e4:	69bb      	ldr	r3, [r7, #24]
    63e6:	699b      	ldr	r3, [r3, #24]
    63e8:	69ba      	ldr	r2, [r7, #24]
    63ea:	0010      	movs	r0, r2
    63ec:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    63ee:	2312      	movs	r3, #18
    63f0:	18fb      	adds	r3, r7, r3
    63f2:	881b      	ldrh	r3, [r3, #0]
    63f4:	2208      	movs	r2, #8
    63f6:	4013      	ands	r3, r2
    63f8:	d010      	beq.n	641c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    63fa:	697b      	ldr	r3, [r7, #20]
    63fc:	2208      	movs	r2, #8
    63fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6400:	697b      	ldr	r3, [r7, #20]
    6402:	2208      	movs	r2, #8
    6404:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6406:	2310      	movs	r3, #16
    6408:	18fb      	adds	r3, r7, r3
    640a:	881b      	ldrh	r3, [r3, #0]
    640c:	2220      	movs	r2, #32
    640e:	4013      	ands	r3, r2
    6410:	d004      	beq.n	641c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6412:	69bb      	ldr	r3, [r7, #24]
    6414:	6a1b      	ldr	r3, [r3, #32]
    6416:	69ba      	ldr	r2, [r7, #24]
    6418:	0010      	movs	r0, r2
    641a:	4798      	blx	r3
		}
	}
#endif
}
    641c:	46c0      	nop			; (mov r8, r8)
    641e:	46bd      	mov	sp, r7
    6420:	b008      	add	sp, #32
    6422:	bd80      	pop	{r7, pc}

00006424 <system_gclk_gen_get_config_defaults>:
{
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	2201      	movs	r2, #1
    6430:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	2200      	movs	r2, #0
    6436:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	2206      	movs	r2, #6
    643c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	2200      	movs	r2, #0
    6442:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	2200      	movs	r2, #0
    6448:	725a      	strb	r2, [r3, #9]
}
    644a:	46c0      	nop			; (mov r8, r8)
    644c:	46bd      	mov	sp, r7
    644e:	b002      	add	sp, #8
    6450:	bd80      	pop	{r7, pc}

00006452 <system_gclk_chan_get_config_defaults>:
{
    6452:	b580      	push	{r7, lr}
    6454:	b082      	sub	sp, #8
    6456:	af00      	add	r7, sp, #0
    6458:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	2200      	movs	r2, #0
    645e:	701a      	strb	r2, [r3, #0]
}
    6460:	46c0      	nop			; (mov r8, r8)
    6462:	46bd      	mov	sp, r7
    6464:	b002      	add	sp, #8
    6466:	bd80      	pop	{r7, pc}

00006468 <system_clock_source_xosc32k_get_config_defaults>:
{
    6468:	b580      	push	{r7, lr}
    646a:	b082      	sub	sp, #8
    646c:	af00      	add	r7, sp, #0
    646e:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	2200      	movs	r2, #0
    6474:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	2204      	movs	r2, #4
    647a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	2200      	movs	r2, #0
    6480:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	2280      	movs	r2, #128	; 0x80
    6486:	0212      	lsls	r2, r2, #8
    6488:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	2200      	movs	r2, #0
    648e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	2201      	movs	r2, #1
    6494:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	2200      	movs	r2, #0
    649a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	2201      	movs	r2, #1
    64a0:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	2200      	movs	r2, #0
    64a6:	739a      	strb	r2, [r3, #14]
}
    64a8:	46c0      	nop			; (mov r8, r8)
    64aa:	46bd      	mov	sp, r7
    64ac:	b002      	add	sp, #8
    64ae:	bd80      	pop	{r7, pc}

000064b0 <system_clock_source_osc8m_get_config_defaults>:
{
    64b0:	b580      	push	{r7, lr}
    64b2:	b082      	sub	sp, #8
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	2203      	movs	r2, #3
    64bc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	2200      	movs	r2, #0
    64c2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    64c4:	687b      	ldr	r3, [r7, #4]
    64c6:	2201      	movs	r2, #1
    64c8:	709a      	strb	r2, [r3, #2]
}
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	46bd      	mov	sp, r7
    64ce:	b002      	add	sp, #8
    64d0:	bd80      	pop	{r7, pc}

000064d2 <system_clock_source_dfll_get_config_defaults>:
{
    64d2:	b580      	push	{r7, lr}
    64d4:	b082      	sub	sp, #8
    64d6:	af00      	add	r7, sp, #0
    64d8:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	2200      	movs	r2, #0
    64de:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    64e0:	687b      	ldr	r3, [r7, #4]
    64e2:	2200      	movs	r2, #0
    64e4:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    64e6:	687b      	ldr	r3, [r7, #4]
    64e8:	2200      	movs	r2, #0
    64ea:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	2200      	movs	r2, #0
    64f0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	2200      	movs	r2, #0
    64f6:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	2201      	movs	r2, #1
    64fc:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	2207      	movs	r2, #7
    6502:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6504:	687b      	ldr	r3, [r7, #4]
    6506:	223f      	movs	r2, #63	; 0x3f
    6508:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	2201      	movs	r2, #1
    650e:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	2201      	movs	r2, #1
    6514:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	2206      	movs	r2, #6
    651a:	821a      	strh	r2, [r3, #16]
}
    651c:	46c0      	nop			; (mov r8, r8)
    651e:	46bd      	mov	sp, r7
    6520:	b002      	add	sp, #8
    6522:	bd80      	pop	{r7, pc}

00006524 <system_cpu_clock_set_divider>:
{
    6524:	b580      	push	{r7, lr}
    6526:	b082      	sub	sp, #8
    6528:	af00      	add	r7, sp, #0
    652a:	0002      	movs	r2, r0
    652c:	1dfb      	adds	r3, r7, #7
    652e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    6530:	4a03      	ldr	r2, [pc, #12]	; (6540 <system_cpu_clock_set_divider+0x1c>)
    6532:	1dfb      	adds	r3, r7, #7
    6534:	781b      	ldrb	r3, [r3, #0]
    6536:	7213      	strb	r3, [r2, #8]
}
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	46bd      	mov	sp, r7
    653c:	b002      	add	sp, #8
    653e:	bd80      	pop	{r7, pc}
    6540:	40000400 	.word	0x40000400

00006544 <system_apb_clock_set_divider>:
{
    6544:	b580      	push	{r7, lr}
    6546:	b082      	sub	sp, #8
    6548:	af00      	add	r7, sp, #0
    654a:	0002      	movs	r2, r0
    654c:	1dfb      	adds	r3, r7, #7
    654e:	701a      	strb	r2, [r3, #0]
    6550:	1dbb      	adds	r3, r7, #6
    6552:	1c0a      	adds	r2, r1, #0
    6554:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6556:	1dfb      	adds	r3, r7, #7
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	2b01      	cmp	r3, #1
    655c:	d008      	beq.n	6570 <system_apb_clock_set_divider+0x2c>
    655e:	2b02      	cmp	r3, #2
    6560:	d00b      	beq.n	657a <system_apb_clock_set_divider+0x36>
    6562:	2b00      	cmp	r3, #0
    6564:	d10e      	bne.n	6584 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    6566:	4a0b      	ldr	r2, [pc, #44]	; (6594 <system_apb_clock_set_divider+0x50>)
    6568:	1dbb      	adds	r3, r7, #6
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	7253      	strb	r3, [r2, #9]
			break;
    656e:	e00b      	b.n	6588 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    6570:	4a08      	ldr	r2, [pc, #32]	; (6594 <system_apb_clock_set_divider+0x50>)
    6572:	1dbb      	adds	r3, r7, #6
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	7293      	strb	r3, [r2, #10]
			break;
    6578:	e006      	b.n	6588 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    657a:	4a06      	ldr	r2, [pc, #24]	; (6594 <system_apb_clock_set_divider+0x50>)
    657c:	1dbb      	adds	r3, r7, #6
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	72d3      	strb	r3, [r2, #11]
			break;
    6582:	e001      	b.n	6588 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    6584:	2317      	movs	r3, #23
    6586:	e000      	b.n	658a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    6588:	2300      	movs	r3, #0
}
    658a:	0018      	movs	r0, r3
    658c:	46bd      	mov	sp, r7
    658e:	b002      	add	sp, #8
    6590:	bd80      	pop	{r7, pc}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	40000400 	.word	0x40000400

00006598 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6598:	b580      	push	{r7, lr}
    659a:	b082      	sub	sp, #8
    659c:	af00      	add	r7, sp, #0
    659e:	0002      	movs	r2, r0
    65a0:	1dfb      	adds	r3, r7, #7
    65a2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    65a4:	4a08      	ldr	r2, [pc, #32]	; (65c8 <system_flash_set_waitstates+0x30>)
    65a6:	1dfb      	adds	r3, r7, #7
    65a8:	781b      	ldrb	r3, [r3, #0]
    65aa:	210f      	movs	r1, #15
    65ac:	400b      	ands	r3, r1
    65ae:	b2d9      	uxtb	r1, r3
    65b0:	6853      	ldr	r3, [r2, #4]
    65b2:	200f      	movs	r0, #15
    65b4:	4001      	ands	r1, r0
    65b6:	0049      	lsls	r1, r1, #1
    65b8:	201e      	movs	r0, #30
    65ba:	4383      	bics	r3, r0
    65bc:	430b      	orrs	r3, r1
    65be:	6053      	str	r3, [r2, #4]
}
    65c0:	46c0      	nop			; (mov r8, r8)
    65c2:	46bd      	mov	sp, r7
    65c4:	b002      	add	sp, #8
    65c6:	bd80      	pop	{r7, pc}
    65c8:	41004000 	.word	0x41004000

000065cc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    65cc:	b580      	push	{r7, lr}
    65ce:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    65d0:	46c0      	nop			; (mov r8, r8)
    65d2:	4b04      	ldr	r3, [pc, #16]	; (65e4 <_system_dfll_wait_for_sync+0x18>)
    65d4:	68db      	ldr	r3, [r3, #12]
    65d6:	2210      	movs	r2, #16
    65d8:	4013      	ands	r3, r2
    65da:	d0fa      	beq.n	65d2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    65dc:	46c0      	nop			; (mov r8, r8)
    65de:	46bd      	mov	sp, r7
    65e0:	bd80      	pop	{r7, pc}
    65e2:	46c0      	nop			; (mov r8, r8)
    65e4:	40000800 	.word	0x40000800

000065e8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    65ec:	4b0c      	ldr	r3, [pc, #48]	; (6620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    65ee:	2202      	movs	r2, #2
    65f0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    65f2:	4b0c      	ldr	r3, [pc, #48]	; (6624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    65f4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    65f6:	4a0a      	ldr	r2, [pc, #40]	; (6620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    65f8:	4b0b      	ldr	r3, [pc, #44]	; (6628 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    65fa:	689b      	ldr	r3, [r3, #8]
    65fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65fe:	4a08      	ldr	r2, [pc, #32]	; (6620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6600:	4b09      	ldr	r3, [pc, #36]	; (6628 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6602:	685b      	ldr	r3, [r3, #4]
    6604:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    6606:	4b06      	ldr	r3, [pc, #24]	; (6620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6608:	2200      	movs	r2, #0
    660a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    660c:	4b05      	ldr	r3, [pc, #20]	; (6624 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    660e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6610:	4a03      	ldr	r2, [pc, #12]	; (6620 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6612:	4b05      	ldr	r3, [pc, #20]	; (6628 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6614:	681b      	ldr	r3, [r3, #0]
    6616:	b29b      	uxth	r3, r3
    6618:	8493      	strh	r3, [r2, #36]	; 0x24
}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	46bd      	mov	sp, r7
    661e:	bd80      	pop	{r7, pc}
    6620:	40000800 	.word	0x40000800
    6624:	000065cd 	.word	0x000065cd
    6628:	20000290 	.word	0x20000290

0000662c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    662c:	b580      	push	{r7, lr}
    662e:	b082      	sub	sp, #8
    6630:	af00      	add	r7, sp, #0
    6632:	0002      	movs	r2, r0
    6634:	1dfb      	adds	r3, r7, #7
    6636:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6638:	1dfb      	adds	r3, r7, #7
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	2b08      	cmp	r3, #8
    663e:	d840      	bhi.n	66c2 <system_clock_source_get_hz+0x96>
    6640:	009a      	lsls	r2, r3, #2
    6642:	4b22      	ldr	r3, [pc, #136]	; (66cc <system_clock_source_get_hz+0xa0>)
    6644:	18d3      	adds	r3, r2, r3
    6646:	681b      	ldr	r3, [r3, #0]
    6648:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    664a:	4b21      	ldr	r3, [pc, #132]	; (66d0 <system_clock_source_get_hz+0xa4>)
    664c:	691b      	ldr	r3, [r3, #16]
    664e:	e039      	b.n	66c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6650:	4b20      	ldr	r3, [pc, #128]	; (66d4 <system_clock_source_get_hz+0xa8>)
    6652:	6a1b      	ldr	r3, [r3, #32]
    6654:	059b      	lsls	r3, r3, #22
    6656:	0f9b      	lsrs	r3, r3, #30
    6658:	b2db      	uxtb	r3, r3
    665a:	001a      	movs	r2, r3
    665c:	4b1e      	ldr	r3, [pc, #120]	; (66d8 <system_clock_source_get_hz+0xac>)
    665e:	40d3      	lsrs	r3, r2
    6660:	e030      	b.n	66c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6662:	2380      	movs	r3, #128	; 0x80
    6664:	021b      	lsls	r3, r3, #8
    6666:	e02d      	b.n	66c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6668:	2380      	movs	r3, #128	; 0x80
    666a:	021b      	lsls	r3, r3, #8
    666c:	e02a      	b.n	66c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    666e:	4b18      	ldr	r3, [pc, #96]	; (66d0 <system_clock_source_get_hz+0xa4>)
    6670:	695b      	ldr	r3, [r3, #20]
    6672:	e027      	b.n	66c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6674:	4b16      	ldr	r3, [pc, #88]	; (66d0 <system_clock_source_get_hz+0xa4>)
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	2202      	movs	r2, #2
    667a:	4013      	ands	r3, r2
    667c:	d101      	bne.n	6682 <system_clock_source_get_hz+0x56>
			return 0;
    667e:	2300      	movs	r3, #0
    6680:	e020      	b.n	66c4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6682:	4b16      	ldr	r3, [pc, #88]	; (66dc <system_clock_source_get_hz+0xb0>)
    6684:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    6686:	4b12      	ldr	r3, [pc, #72]	; (66d0 <system_clock_source_get_hz+0xa4>)
    6688:	681b      	ldr	r3, [r3, #0]
    668a:	2204      	movs	r2, #4
    668c:	4013      	ands	r3, r2
    668e:	d009      	beq.n	66a4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6690:	2000      	movs	r0, #0
    6692:	4b13      	ldr	r3, [pc, #76]	; (66e0 <system_clock_source_get_hz+0xb4>)
    6694:	4798      	blx	r3
    6696:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    6698:	4b0d      	ldr	r3, [pc, #52]	; (66d0 <system_clock_source_get_hz+0xa4>)
    669a:	689b      	ldr	r3, [r3, #8]
    669c:	041b      	lsls	r3, r3, #16
    669e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    66a0:	4353      	muls	r3, r2
    66a2:	e00f      	b.n	66c4 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    66a4:	4b0f      	ldr	r3, [pc, #60]	; (66e4 <system_clock_source_get_hz+0xb8>)
    66a6:	e00d      	b.n	66c4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    66a8:	4a0a      	ldr	r2, [pc, #40]	; (66d4 <system_clock_source_get_hz+0xa8>)
    66aa:	2350      	movs	r3, #80	; 0x50
    66ac:	5cd3      	ldrb	r3, [r2, r3]
    66ae:	b2db      	uxtb	r3, r3
    66b0:	001a      	movs	r2, r3
    66b2:	2304      	movs	r3, #4
    66b4:	4013      	ands	r3, r2
    66b6:	d101      	bne.n	66bc <system_clock_source_get_hz+0x90>
			return 0;
    66b8:	2300      	movs	r3, #0
    66ba:	e003      	b.n	66c4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    66bc:	4b04      	ldr	r3, [pc, #16]	; (66d0 <system_clock_source_get_hz+0xa4>)
    66be:	68db      	ldr	r3, [r3, #12]
    66c0:	e000      	b.n	66c4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    66c2:	2300      	movs	r3, #0
	}
}
    66c4:	0018      	movs	r0, r3
    66c6:	46bd      	mov	sp, r7
    66c8:	b002      	add	sp, #8
    66ca:	bd80      	pop	{r7, pc}
    66cc:	0000c14c 	.word	0x0000c14c
    66d0:	20000290 	.word	0x20000290
    66d4:	40000800 	.word	0x40000800
    66d8:	007a1200 	.word	0x007a1200
    66dc:	000065cd 	.word	0x000065cd
    66e0:	00007185 	.word	0x00007185
    66e4:	02dc6c00 	.word	0x02dc6c00

000066e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b084      	sub	sp, #16
    66ec:	af00      	add	r7, sp, #0
    66ee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    66f0:	4b1a      	ldr	r3, [pc, #104]	; (675c <system_clock_source_osc8m_set_config+0x74>)
    66f2:	6a1b      	ldr	r3, [r3, #32]
    66f4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    66f6:	687b      	ldr	r3, [r7, #4]
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	1c1a      	adds	r2, r3, #0
    66fc:	2303      	movs	r3, #3
    66fe:	4013      	ands	r3, r2
    6700:	b2da      	uxtb	r2, r3
    6702:	230d      	movs	r3, #13
    6704:	18fb      	adds	r3, r7, r3
    6706:	2103      	movs	r1, #3
    6708:	400a      	ands	r2, r1
    670a:	0010      	movs	r0, r2
    670c:	781a      	ldrb	r2, [r3, #0]
    670e:	2103      	movs	r1, #3
    6710:	438a      	bics	r2, r1
    6712:	1c11      	adds	r1, r2, #0
    6714:	1c02      	adds	r2, r0, #0
    6716:	430a      	orrs	r2, r1
    6718:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	789a      	ldrb	r2, [r3, #2]
    671e:	230c      	movs	r3, #12
    6720:	18fb      	adds	r3, r7, r3
    6722:	01d0      	lsls	r0, r2, #7
    6724:	781a      	ldrb	r2, [r3, #0]
    6726:	217f      	movs	r1, #127	; 0x7f
    6728:	400a      	ands	r2, r1
    672a:	1c11      	adds	r1, r2, #0
    672c:	1c02      	adds	r2, r0, #0
    672e:	430a      	orrs	r2, r1
    6730:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	785a      	ldrb	r2, [r3, #1]
    6736:	230c      	movs	r3, #12
    6738:	18fb      	adds	r3, r7, r3
    673a:	2101      	movs	r1, #1
    673c:	400a      	ands	r2, r1
    673e:	0190      	lsls	r0, r2, #6
    6740:	781a      	ldrb	r2, [r3, #0]
    6742:	2140      	movs	r1, #64	; 0x40
    6744:	438a      	bics	r2, r1
    6746:	1c11      	adds	r1, r2, #0
    6748:	1c02      	adds	r2, r0, #0
    674a:	430a      	orrs	r2, r1
    674c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    674e:	4b03      	ldr	r3, [pc, #12]	; (675c <system_clock_source_osc8m_set_config+0x74>)
    6750:	68fa      	ldr	r2, [r7, #12]
    6752:	621a      	str	r2, [r3, #32]
}
    6754:	46c0      	nop			; (mov r8, r8)
    6756:	46bd      	mov	sp, r7
    6758:	b004      	add	sp, #16
    675a:	bd80      	pop	{r7, pc}
    675c:	40000800 	.word	0x40000800

00006760 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6760:	b580      	push	{r7, lr}
    6762:	b084      	sub	sp, #16
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6768:	4a43      	ldr	r2, [pc, #268]	; (6878 <system_clock_source_xosc32k_set_config+0x118>)
    676a:	230c      	movs	r3, #12
    676c:	18fb      	adds	r3, r7, r3
    676e:	8a92      	ldrh	r2, [r2, #20]
    6770:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	785b      	ldrb	r3, [r3, #1]
    6776:	1c1a      	adds	r2, r3, #0
    6778:	2307      	movs	r3, #7
    677a:	4013      	ands	r3, r2
    677c:	b2da      	uxtb	r2, r3
    677e:	230c      	movs	r3, #12
    6780:	18fb      	adds	r3, r7, r3
    6782:	2107      	movs	r1, #7
    6784:	400a      	ands	r2, r1
    6786:	0010      	movs	r0, r2
    6788:	785a      	ldrb	r2, [r3, #1]
    678a:	2107      	movs	r1, #7
    678c:	438a      	bics	r2, r1
    678e:	1c11      	adds	r1, r2, #0
    6790:	1c02      	adds	r2, r0, #0
    6792:	430a      	orrs	r2, r1
    6794:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	2b00      	cmp	r3, #0
    679c:	d106      	bne.n	67ac <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    679e:	230c      	movs	r3, #12
    67a0:	18fb      	adds	r3, r7, r3
    67a2:	781a      	ldrb	r2, [r3, #0]
    67a4:	2104      	movs	r1, #4
    67a6:	430a      	orrs	r2, r1
    67a8:	701a      	strb	r2, [r3, #0]
    67aa:	e005      	b.n	67b8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    67ac:	230c      	movs	r3, #12
    67ae:	18fb      	adds	r3, r7, r3
    67b0:	781a      	ldrb	r2, [r3, #0]
    67b2:	2104      	movs	r1, #4
    67b4:	438a      	bics	r2, r1
    67b6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	789a      	ldrb	r2, [r3, #2]
    67bc:	230c      	movs	r3, #12
    67be:	18fb      	adds	r3, r7, r3
    67c0:	2101      	movs	r1, #1
    67c2:	400a      	ands	r2, r1
    67c4:	0150      	lsls	r0, r2, #5
    67c6:	781a      	ldrb	r2, [r3, #0]
    67c8:	2120      	movs	r1, #32
    67ca:	438a      	bics	r2, r1
    67cc:	1c11      	adds	r1, r2, #0
    67ce:	1c02      	adds	r2, r0, #0
    67d0:	430a      	orrs	r2, r1
    67d2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	78da      	ldrb	r2, [r3, #3]
    67d8:	230c      	movs	r3, #12
    67da:	18fb      	adds	r3, r7, r3
    67dc:	2101      	movs	r1, #1
    67de:	400a      	ands	r2, r1
    67e0:	0110      	lsls	r0, r2, #4
    67e2:	781a      	ldrb	r2, [r3, #0]
    67e4:	2110      	movs	r1, #16
    67e6:	438a      	bics	r2, r1
    67e8:	1c11      	adds	r1, r2, #0
    67ea:	1c02      	adds	r2, r0, #0
    67ec:	430a      	orrs	r2, r1
    67ee:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	791a      	ldrb	r2, [r3, #4]
    67f4:	230c      	movs	r3, #12
    67f6:	18fb      	adds	r3, r7, r3
    67f8:	2101      	movs	r1, #1
    67fa:	400a      	ands	r2, r1
    67fc:	00d0      	lsls	r0, r2, #3
    67fe:	781a      	ldrb	r2, [r3, #0]
    6800:	2108      	movs	r1, #8
    6802:	438a      	bics	r2, r1
    6804:	1c11      	adds	r1, r2, #0
    6806:	1c02      	adds	r2, r0, #0
    6808:	430a      	orrs	r2, r1
    680a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	7b5a      	ldrb	r2, [r3, #13]
    6810:	230c      	movs	r3, #12
    6812:	18fb      	adds	r3, r7, r3
    6814:	01d0      	lsls	r0, r2, #7
    6816:	781a      	ldrb	r2, [r3, #0]
    6818:	217f      	movs	r1, #127	; 0x7f
    681a:	400a      	ands	r2, r1
    681c:	1c11      	adds	r1, r2, #0
    681e:	1c02      	adds	r2, r0, #0
    6820:	430a      	orrs	r2, r1
    6822:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	7b1a      	ldrb	r2, [r3, #12]
    6828:	230c      	movs	r3, #12
    682a:	18fb      	adds	r3, r7, r3
    682c:	2101      	movs	r1, #1
    682e:	400a      	ands	r2, r1
    6830:	0190      	lsls	r0, r2, #6
    6832:	781a      	ldrb	r2, [r3, #0]
    6834:	2140      	movs	r1, #64	; 0x40
    6836:	438a      	bics	r2, r1
    6838:	1c11      	adds	r1, r2, #0
    683a:	1c02      	adds	r2, r0, #0
    683c:	430a      	orrs	r2, r1
    683e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	7b9a      	ldrb	r2, [r3, #14]
    6844:	230c      	movs	r3, #12
    6846:	18fb      	adds	r3, r7, r3
    6848:	2101      	movs	r1, #1
    684a:	400a      	ands	r2, r1
    684c:	0110      	lsls	r0, r2, #4
    684e:	785a      	ldrb	r2, [r3, #1]
    6850:	2110      	movs	r1, #16
    6852:	438a      	bics	r2, r1
    6854:	1c11      	adds	r1, r2, #0
    6856:	1c02      	adds	r2, r0, #0
    6858:	430a      	orrs	r2, r1
    685a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	689a      	ldr	r2, [r3, #8]
    6860:	4b06      	ldr	r3, [pc, #24]	; (687c <system_clock_source_xosc32k_set_config+0x11c>)
    6862:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6864:	4a04      	ldr	r2, [pc, #16]	; (6878 <system_clock_source_xosc32k_set_config+0x118>)
    6866:	230c      	movs	r3, #12
    6868:	18fb      	adds	r3, r7, r3
    686a:	881b      	ldrh	r3, [r3, #0]
    686c:	8293      	strh	r3, [r2, #20]
}
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	46bd      	mov	sp, r7
    6872:	b004      	add	sp, #16
    6874:	bd80      	pop	{r7, pc}
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	40000800 	.word	0x40000800
    687c:	20000290 	.word	0x20000290

00006880 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6880:	b580      	push	{r7, lr}
    6882:	b082      	sub	sp, #8
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	7a1b      	ldrb	r3, [r3, #8]
    688c:	029b      	lsls	r3, r3, #10
    688e:	041b      	lsls	r3, r3, #16
    6890:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	895b      	ldrh	r3, [r3, #10]
    6896:	059b      	lsls	r3, r3, #22
    6898:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    689a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    689c:	4b2a      	ldr	r3, [pc, #168]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    689e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    68a8:	4313      	orrs	r3, r2
    68aa:	b2db      	uxtb	r3, r3
    68ac:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    68b2:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    68b4:	687a      	ldr	r2, [r7, #4]
    68b6:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    68b8:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	785b      	ldrb	r3, [r3, #1]
    68be:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    68c0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    68c2:	4b21      	ldr	r3, [pc, #132]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    68c4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	2b04      	cmp	r3, #4
    68cc:	d116      	bne.n	68fc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	7b1b      	ldrb	r3, [r3, #12]
    68d2:	069b      	lsls	r3, r3, #26
    68d4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    68d6:	687b      	ldr	r3, [r7, #4]
    68d8:	89db      	ldrh	r3, [r3, #14]
    68da:	041b      	lsls	r3, r3, #16
    68dc:	0019      	movs	r1, r3
    68de:	4b1b      	ldr	r3, [pc, #108]	; (694c <system_clock_source_dfll_set_config+0xcc>)
    68e0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    68e2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    68e4:	687a      	ldr	r2, [r7, #4]
    68e6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    68e8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    68ea:	4b17      	ldr	r3, [pc, #92]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    68ec:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    68ee:	4b16      	ldr	r3, [pc, #88]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    68f0:	681b      	ldr	r3, [r3, #0]
    68f2:	687a      	ldr	r2, [r7, #4]
    68f4:	7812      	ldrb	r2, [r2, #0]
    68f6:	431a      	orrs	r2, r3
    68f8:	4b13      	ldr	r3, [pc, #76]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    68fa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    68fc:	687b      	ldr	r3, [r7, #4]
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	2b20      	cmp	r3, #32
    6902:	d11c      	bne.n	693e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	7b1b      	ldrb	r3, [r3, #12]
    6908:	069b      	lsls	r3, r3, #26
    690a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	89db      	ldrh	r3, [r3, #14]
    6910:	041b      	lsls	r3, r3, #16
    6912:	0019      	movs	r1, r3
    6914:	4b0d      	ldr	r3, [pc, #52]	; (694c <system_clock_source_dfll_set_config+0xcc>)
    6916:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6918:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    691a:	687a      	ldr	r2, [r7, #4]
    691c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    691e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6920:	4b09      	ldr	r3, [pc, #36]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    6922:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6924:	4b08      	ldr	r3, [pc, #32]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    6926:	681b      	ldr	r3, [r3, #0]
    6928:	687a      	ldr	r2, [r7, #4]
    692a:	7812      	ldrb	r2, [r2, #0]
    692c:	2104      	movs	r1, #4
    692e:	430a      	orrs	r2, r1
    6930:	b2d2      	uxtb	r2, r2
    6932:	4313      	orrs	r3, r2
    6934:	2280      	movs	r2, #128	; 0x80
    6936:	00d2      	lsls	r2, r2, #3
    6938:	431a      	orrs	r2, r3
    693a:	4b03      	ldr	r3, [pc, #12]	; (6948 <system_clock_source_dfll_set_config+0xc8>)
    693c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    693e:	46c0      	nop			; (mov r8, r8)
    6940:	46bd      	mov	sp, r7
    6942:	b002      	add	sp, #8
    6944:	bd80      	pop	{r7, pc}
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	20000290 	.word	0x20000290
    694c:	03ff0000 	.word	0x03ff0000

00006950 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6950:	b580      	push	{r7, lr}
    6952:	b082      	sub	sp, #8
    6954:	af00      	add	r7, sp, #0
    6956:	0002      	movs	r2, r0
    6958:	1dfb      	adds	r3, r7, #7
    695a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    695c:	1dfb      	adds	r3, r7, #7
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	2b08      	cmp	r3, #8
    6962:	d83b      	bhi.n	69dc <system_clock_source_enable+0x8c>
    6964:	009a      	lsls	r2, r3, #2
    6966:	4b21      	ldr	r3, [pc, #132]	; (69ec <system_clock_source_enable+0x9c>)
    6968:	18d3      	adds	r3, r2, r3
    696a:	681b      	ldr	r3, [r3, #0]
    696c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    696e:	4b20      	ldr	r3, [pc, #128]	; (69f0 <system_clock_source_enable+0xa0>)
    6970:	4a1f      	ldr	r2, [pc, #124]	; (69f0 <system_clock_source_enable+0xa0>)
    6972:	6a12      	ldr	r2, [r2, #32]
    6974:	2102      	movs	r1, #2
    6976:	430a      	orrs	r2, r1
    6978:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    697a:	2300      	movs	r3, #0
    697c:	e031      	b.n	69e2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    697e:	4b1c      	ldr	r3, [pc, #112]	; (69f0 <system_clock_source_enable+0xa0>)
    6980:	4a1b      	ldr	r2, [pc, #108]	; (69f0 <system_clock_source_enable+0xa0>)
    6982:	6992      	ldr	r2, [r2, #24]
    6984:	2102      	movs	r1, #2
    6986:	430a      	orrs	r2, r1
    6988:	619a      	str	r2, [r3, #24]
		break;
    698a:	e029      	b.n	69e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    698c:	4a18      	ldr	r2, [pc, #96]	; (69f0 <system_clock_source_enable+0xa0>)
    698e:	4b18      	ldr	r3, [pc, #96]	; (69f0 <system_clock_source_enable+0xa0>)
    6990:	8a1b      	ldrh	r3, [r3, #16]
    6992:	b29b      	uxth	r3, r3
    6994:	2102      	movs	r1, #2
    6996:	430b      	orrs	r3, r1
    6998:	b29b      	uxth	r3, r3
    699a:	8213      	strh	r3, [r2, #16]
		break;
    699c:	e020      	b.n	69e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    699e:	4a14      	ldr	r2, [pc, #80]	; (69f0 <system_clock_source_enable+0xa0>)
    69a0:	4b13      	ldr	r3, [pc, #76]	; (69f0 <system_clock_source_enable+0xa0>)
    69a2:	8a9b      	ldrh	r3, [r3, #20]
    69a4:	b29b      	uxth	r3, r3
    69a6:	2102      	movs	r1, #2
    69a8:	430b      	orrs	r3, r1
    69aa:	b29b      	uxth	r3, r3
    69ac:	8293      	strh	r3, [r2, #20]
		break;
    69ae:	e017      	b.n	69e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    69b0:	4b10      	ldr	r3, [pc, #64]	; (69f4 <system_clock_source_enable+0xa4>)
    69b2:	681b      	ldr	r3, [r3, #0]
    69b4:	2202      	movs	r2, #2
    69b6:	431a      	orrs	r2, r3
    69b8:	4b0e      	ldr	r3, [pc, #56]	; (69f4 <system_clock_source_enable+0xa4>)
    69ba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    69bc:	4b0e      	ldr	r3, [pc, #56]	; (69f8 <system_clock_source_enable+0xa8>)
    69be:	4798      	blx	r3
		break;
    69c0:	e00e      	b.n	69e0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    69c2:	4a0b      	ldr	r2, [pc, #44]	; (69f0 <system_clock_source_enable+0xa0>)
    69c4:	490a      	ldr	r1, [pc, #40]	; (69f0 <system_clock_source_enable+0xa0>)
    69c6:	2344      	movs	r3, #68	; 0x44
    69c8:	5ccb      	ldrb	r3, [r1, r3]
    69ca:	b2db      	uxtb	r3, r3
    69cc:	2102      	movs	r1, #2
    69ce:	430b      	orrs	r3, r1
    69d0:	b2d9      	uxtb	r1, r3
    69d2:	2344      	movs	r3, #68	; 0x44
    69d4:	54d1      	strb	r1, [r2, r3]
		break;
    69d6:	e003      	b.n	69e0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    69d8:	2300      	movs	r3, #0
    69da:	e002      	b.n	69e2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    69dc:	2317      	movs	r3, #23
    69de:	e000      	b.n	69e2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    69e0:	2300      	movs	r3, #0
}
    69e2:	0018      	movs	r0, r3
    69e4:	46bd      	mov	sp, r7
    69e6:	b002      	add	sp, #8
    69e8:	bd80      	pop	{r7, pc}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	0000c170 	.word	0x0000c170
    69f0:	40000800 	.word	0x40000800
    69f4:	20000290 	.word	0x20000290
    69f8:	000065e9 	.word	0x000065e9

000069fc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b084      	sub	sp, #16
    6a00:	af00      	add	r7, sp, #0
    6a02:	0002      	movs	r2, r0
    6a04:	1dfb      	adds	r3, r7, #7
    6a06:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6a08:	2300      	movs	r3, #0
    6a0a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6a0c:	1dfb      	adds	r3, r7, #7
    6a0e:	781b      	ldrb	r3, [r3, #0]
    6a10:	2b08      	cmp	r3, #8
    6a12:	d821      	bhi.n	6a58 <system_clock_source_is_ready+0x5c>
    6a14:	009a      	lsls	r2, r3, #2
    6a16:	4b18      	ldr	r3, [pc, #96]	; (6a78 <system_clock_source_is_ready+0x7c>)
    6a18:	18d3      	adds	r3, r2, r3
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6a1e:	2308      	movs	r3, #8
    6a20:	60fb      	str	r3, [r7, #12]
		break;
    6a22:	e01b      	b.n	6a5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6a24:	2304      	movs	r3, #4
    6a26:	60fb      	str	r3, [r7, #12]
		break;
    6a28:	e018      	b.n	6a5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6a2a:	2301      	movs	r3, #1
    6a2c:	60fb      	str	r3, [r7, #12]
		break;
    6a2e:	e015      	b.n	6a5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6a30:	2302      	movs	r3, #2
    6a32:	60fb      	str	r3, [r7, #12]
		break;
    6a34:	e012      	b.n	6a5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    6a36:	23d0      	movs	r3, #208	; 0xd0
    6a38:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6a3a:	e00f      	b.n	6a5c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6a3c:	4a0f      	ldr	r2, [pc, #60]	; (6a7c <system_clock_source_is_ready+0x80>)
    6a3e:	2350      	movs	r3, #80	; 0x50
    6a40:	5cd3      	ldrb	r3, [r2, r3]
    6a42:	b2db      	uxtb	r3, r3
    6a44:	001a      	movs	r2, r3
    6a46:	2303      	movs	r3, #3
    6a48:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6a4a:	3b03      	subs	r3, #3
    6a4c:	425a      	negs	r2, r3
    6a4e:	4153      	adcs	r3, r2
    6a50:	b2db      	uxtb	r3, r3
    6a52:	e00c      	b.n	6a6e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6a54:	2301      	movs	r3, #1
    6a56:	e00a      	b.n	6a6e <system_clock_source_is_ready+0x72>

	default:
		return false;
    6a58:	2300      	movs	r3, #0
    6a5a:	e008      	b.n	6a6e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6a5c:	4b07      	ldr	r3, [pc, #28]	; (6a7c <system_clock_source_is_ready+0x80>)
    6a5e:	68db      	ldr	r3, [r3, #12]
    6a60:	68fa      	ldr	r2, [r7, #12]
    6a62:	401a      	ands	r2, r3
    6a64:	68fb      	ldr	r3, [r7, #12]
    6a66:	1ad3      	subs	r3, r2, r3
    6a68:	425a      	negs	r2, r3
    6a6a:	4153      	adcs	r3, r2
    6a6c:	b2db      	uxtb	r3, r3
}
    6a6e:	0018      	movs	r0, r3
    6a70:	46bd      	mov	sp, r7
    6a72:	b004      	add	sp, #16
    6a74:	bd80      	pop	{r7, pc}
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	0000c194 	.word	0x0000c194
    6a7c:	40000800 	.word	0x40000800

00006a80 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6a86:	003b      	movs	r3, r7
    6a88:	2202      	movs	r2, #2
    6a8a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6a8c:	2300      	movs	r3, #0
    6a8e:	607b      	str	r3, [r7, #4]
    6a90:	e009      	b.n	6aa6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6a92:	687b      	ldr	r3, [r7, #4]
    6a94:	b2db      	uxtb	r3, r3
    6a96:	003a      	movs	r2, r7
    6a98:	0011      	movs	r1, r2
    6a9a:	0018      	movs	r0, r3
    6a9c:	4b05      	ldr	r3, [pc, #20]	; (6ab4 <_switch_peripheral_gclk+0x34>)
    6a9e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	3301      	adds	r3, #1
    6aa4:	607b      	str	r3, [r7, #4]
    6aa6:	687b      	ldr	r3, [r7, #4]
    6aa8:	2b24      	cmp	r3, #36	; 0x24
    6aaa:	d9f2      	bls.n	6a92 <_switch_peripheral_gclk+0x12>
	}
}
    6aac:	46c0      	nop			; (mov r8, r8)
    6aae:	46bd      	mov	sp, r7
    6ab0:	b002      	add	sp, #8
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	00007061 	.word	0x00007061

00006ab8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b0aa      	sub	sp, #168	; 0xa8
    6abc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6abe:	4b87      	ldr	r3, [pc, #540]	; (6cdc <system_clock_init+0x224>)
    6ac0:	22c2      	movs	r2, #194	; 0xc2
    6ac2:	00d2      	lsls	r2, r2, #3
    6ac4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6ac6:	2002      	movs	r0, #2
    6ac8:	4b85      	ldr	r3, [pc, #532]	; (6ce0 <system_clock_init+0x228>)
    6aca:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6acc:	4b85      	ldr	r3, [pc, #532]	; (6ce4 <system_clock_init+0x22c>)
    6ace:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6ad0:	2394      	movs	r3, #148	; 0x94
    6ad2:	18fb      	adds	r3, r7, r3
    6ad4:	0018      	movs	r0, r3
    6ad6:	4b84      	ldr	r3, [pc, #528]	; (6ce8 <system_clock_init+0x230>)
    6ad8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6ada:	2394      	movs	r3, #148	; 0x94
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	2280      	movs	r2, #128	; 0x80
    6ae0:	0212      	lsls	r2, r2, #8
    6ae2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6ae4:	2394      	movs	r3, #148	; 0x94
    6ae6:	18fb      	adds	r3, r7, r3
    6ae8:	2200      	movs	r2, #0
    6aea:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6aec:	2394      	movs	r3, #148	; 0x94
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	2203      	movs	r2, #3
    6af2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6af4:	2394      	movs	r3, #148	; 0x94
    6af6:	18fb      	adds	r3, r7, r3
    6af8:	2200      	movs	r2, #0
    6afa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6afc:	2394      	movs	r3, #148	; 0x94
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	2200      	movs	r2, #0
    6b02:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6b04:	2394      	movs	r3, #148	; 0x94
    6b06:	18fb      	adds	r3, r7, r3
    6b08:	2201      	movs	r2, #1
    6b0a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6b0c:	2394      	movs	r3, #148	; 0x94
    6b0e:	18fb      	adds	r3, r7, r3
    6b10:	2200      	movs	r2, #0
    6b12:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6b14:	2394      	movs	r3, #148	; 0x94
    6b16:	18fb      	adds	r3, r7, r3
    6b18:	2200      	movs	r2, #0
    6b1a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6b1c:	2394      	movs	r3, #148	; 0x94
    6b1e:	18fb      	adds	r3, r7, r3
    6b20:	0018      	movs	r0, r3
    6b22:	4b72      	ldr	r3, [pc, #456]	; (6cec <system_clock_init+0x234>)
    6b24:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6b26:	2005      	movs	r0, #5
    6b28:	4b71      	ldr	r3, [pc, #452]	; (6cf0 <system_clock_init+0x238>)
    6b2a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6b2c:	46c0      	nop			; (mov r8, r8)
    6b2e:	2005      	movs	r0, #5
    6b30:	4b70      	ldr	r3, [pc, #448]	; (6cf4 <system_clock_init+0x23c>)
    6b32:	4798      	blx	r3
    6b34:	0003      	movs	r3, r0
    6b36:	001a      	movs	r2, r3
    6b38:	2301      	movs	r3, #1
    6b3a:	4053      	eors	r3, r2
    6b3c:	b2db      	uxtb	r3, r3
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d1f5      	bne.n	6b2e <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    6b42:	4a66      	ldr	r2, [pc, #408]	; (6cdc <system_clock_init+0x224>)
    6b44:	8a93      	ldrh	r3, [r2, #20]
    6b46:	2180      	movs	r1, #128	; 0x80
    6b48:	430b      	orrs	r3, r1
    6b4a:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6b4c:	2380      	movs	r3, #128	; 0x80
    6b4e:	18fb      	adds	r3, r7, r3
    6b50:	0018      	movs	r0, r3
    6b52:	4b69      	ldr	r3, [pc, #420]	; (6cf8 <system_clock_init+0x240>)
    6b54:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6b56:	2380      	movs	r3, #128	; 0x80
    6b58:	18fb      	adds	r3, r7, r3
    6b5a:	2204      	movs	r2, #4
    6b5c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6b5e:	2380      	movs	r3, #128	; 0x80
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	2200      	movs	r2, #0
    6b64:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6b66:	4b65      	ldr	r3, [pc, #404]	; (6cfc <system_clock_init+0x244>)
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	0e9b      	lsrs	r3, r3, #26
    6b6c:	22a4      	movs	r2, #164	; 0xa4
    6b6e:	18ba      	adds	r2, r7, r2
    6b70:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6b72:	23a4      	movs	r3, #164	; 0xa4
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	681b      	ldr	r3, [r3, #0]
    6b78:	2b3f      	cmp	r3, #63	; 0x3f
    6b7a:	d103      	bne.n	6b84 <system_clock_init+0xcc>
		coarse = 0x1f;
    6b7c:	231f      	movs	r3, #31
    6b7e:	22a4      	movs	r2, #164	; 0xa4
    6b80:	18ba      	adds	r2, r7, r2
    6b82:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6b84:	23a4      	movs	r3, #164	; 0xa4
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	681b      	ldr	r3, [r3, #0]
    6b8a:	b2da      	uxtb	r2, r3
    6b8c:	2380      	movs	r3, #128	; 0x80
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6b92:	2380      	movs	r3, #128	; 0x80
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	2200      	movs	r2, #0
    6b98:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6b9a:	2380      	movs	r3, #128	; 0x80
    6b9c:	18fb      	adds	r3, r7, r3
    6b9e:	2200      	movs	r2, #0
    6ba0:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6ba2:	2380      	movs	r3, #128	; 0x80
    6ba4:	18fb      	adds	r3, r7, r3
    6ba6:	2200      	movs	r2, #0
    6ba8:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6baa:	2380      	movs	r3, #128	; 0x80
    6bac:	18fb      	adds	r3, r7, r3
    6bae:	2200      	movs	r2, #0
    6bb0:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6bb2:	2380      	movs	r3, #128	; 0x80
    6bb4:	18fb      	adds	r3, r7, r3
    6bb6:	4a52      	ldr	r2, [pc, #328]	; (6d00 <system_clock_init+0x248>)
    6bb8:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6bba:	2380      	movs	r3, #128	; 0x80
    6bbc:	18fb      	adds	r3, r7, r3
    6bbe:	2207      	movs	r2, #7
    6bc0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6bc2:	2380      	movs	r3, #128	; 0x80
    6bc4:	18fb      	adds	r3, r7, r3
    6bc6:	223f      	movs	r2, #63	; 0x3f
    6bc8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6bca:	2380      	movs	r3, #128	; 0x80
    6bcc:	18fb      	adds	r3, r7, r3
    6bce:	0018      	movs	r0, r3
    6bd0:	4b4c      	ldr	r3, [pc, #304]	; (6d04 <system_clock_init+0x24c>)
    6bd2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6bd4:	237c      	movs	r3, #124	; 0x7c
    6bd6:	18fb      	adds	r3, r7, r3
    6bd8:	0018      	movs	r0, r3
    6bda:	4b4b      	ldr	r3, [pc, #300]	; (6d08 <system_clock_init+0x250>)
    6bdc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6bde:	237c      	movs	r3, #124	; 0x7c
    6be0:	18fb      	adds	r3, r7, r3
    6be2:	2200      	movs	r2, #0
    6be4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6be6:	237c      	movs	r3, #124	; 0x7c
    6be8:	18fb      	adds	r3, r7, r3
    6bea:	2201      	movs	r2, #1
    6bec:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6bee:	237c      	movs	r3, #124	; 0x7c
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	2200      	movs	r2, #0
    6bf4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6bf6:	237c      	movs	r3, #124	; 0x7c
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	0018      	movs	r0, r3
    6bfc:	4b43      	ldr	r3, [pc, #268]	; (6d0c <system_clock_init+0x254>)
    6bfe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6c00:	2006      	movs	r0, #6
    6c02:	4b3b      	ldr	r3, [pc, #236]	; (6cf0 <system_clock_init+0x238>)
    6c04:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6c06:	4b42      	ldr	r3, [pc, #264]	; (6d10 <system_clock_init+0x258>)
    6c08:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6c0a:	2364      	movs	r3, #100	; 0x64
    6c0c:	18fb      	adds	r3, r7, r3
    6c0e:	0018      	movs	r0, r3
    6c10:	4b40      	ldr	r3, [pc, #256]	; (6d14 <system_clock_init+0x25c>)
    6c12:	4798      	blx	r3
    6c14:	2364      	movs	r3, #100	; 0x64
    6c16:	18fb      	adds	r3, r7, r3
    6c18:	2205      	movs	r2, #5
    6c1a:	701a      	strb	r2, [r3, #0]
    6c1c:	2364      	movs	r3, #100	; 0x64
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	2201      	movs	r2, #1
    6c22:	605a      	str	r2, [r3, #4]
    6c24:	2364      	movs	r3, #100	; 0x64
    6c26:	18fb      	adds	r3, r7, r3
    6c28:	2200      	movs	r2, #0
    6c2a:	721a      	strb	r2, [r3, #8]
    6c2c:	2364      	movs	r3, #100	; 0x64
    6c2e:	18fb      	adds	r3, r7, r3
    6c30:	2200      	movs	r2, #0
    6c32:	725a      	strb	r2, [r3, #9]
    6c34:	2364      	movs	r3, #100	; 0x64
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	0019      	movs	r1, r3
    6c3a:	2001      	movs	r0, #1
    6c3c:	4b36      	ldr	r3, [pc, #216]	; (6d18 <system_clock_init+0x260>)
    6c3e:	4798      	blx	r3
    6c40:	2001      	movs	r0, #1
    6c42:	4b36      	ldr	r3, [pc, #216]	; (6d1c <system_clock_init+0x264>)
    6c44:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6c46:	230c      	movs	r3, #12
    6c48:	18fb      	adds	r3, r7, r3
    6c4a:	0018      	movs	r0, r3
    6c4c:	4b34      	ldr	r3, [pc, #208]	; (6d20 <system_clock_init+0x268>)
    6c4e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6c50:	230c      	movs	r3, #12
    6c52:	18fb      	adds	r3, r7, r3
    6c54:	2201      	movs	r2, #1
    6c56:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6c58:	230c      	movs	r3, #12
    6c5a:	18fb      	adds	r3, r7, r3
    6c5c:	0019      	movs	r1, r3
    6c5e:	2000      	movs	r0, #0
    6c60:	4b30      	ldr	r3, [pc, #192]	; (6d24 <system_clock_init+0x26c>)
    6c62:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6c64:	2000      	movs	r0, #0
    6c66:	4b30      	ldr	r3, [pc, #192]	; (6d28 <system_clock_init+0x270>)
    6c68:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6c6a:	2007      	movs	r0, #7
    6c6c:	4b20      	ldr	r3, [pc, #128]	; (6cf0 <system_clock_init+0x238>)
    6c6e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6c70:	46c0      	nop			; (mov r8, r8)
    6c72:	2007      	movs	r0, #7
    6c74:	4b1f      	ldr	r3, [pc, #124]	; (6cf4 <system_clock_init+0x23c>)
    6c76:	4798      	blx	r3
    6c78:	0003      	movs	r3, r0
    6c7a:	001a      	movs	r2, r3
    6c7c:	2301      	movs	r3, #1
    6c7e:	4053      	eors	r3, r2
    6c80:	b2db      	uxtb	r3, r3
    6c82:	2b00      	cmp	r3, #0
    6c84:	d1f5      	bne.n	6c72 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6c86:	2000      	movs	r0, #0
    6c88:	4b28      	ldr	r3, [pc, #160]	; (6d2c <system_clock_init+0x274>)
    6c8a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6c8c:	2100      	movs	r1, #0
    6c8e:	2000      	movs	r0, #0
    6c90:	4b27      	ldr	r3, [pc, #156]	; (6d30 <system_clock_init+0x278>)
    6c92:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6c94:	2100      	movs	r1, #0
    6c96:	2001      	movs	r0, #1
    6c98:	4b25      	ldr	r3, [pc, #148]	; (6d30 <system_clock_init+0x278>)
    6c9a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6c9c:	2100      	movs	r1, #0
    6c9e:	2002      	movs	r0, #2
    6ca0:	4b23      	ldr	r3, [pc, #140]	; (6d30 <system_clock_init+0x278>)
    6ca2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6ca4:	003b      	movs	r3, r7
    6ca6:	0018      	movs	r0, r3
    6ca8:	4b1a      	ldr	r3, [pc, #104]	; (6d14 <system_clock_init+0x25c>)
    6caa:	4798      	blx	r3
    6cac:	003b      	movs	r3, r7
    6cae:	2207      	movs	r2, #7
    6cb0:	701a      	strb	r2, [r3, #0]
    6cb2:	003b      	movs	r3, r7
    6cb4:	2201      	movs	r2, #1
    6cb6:	605a      	str	r2, [r3, #4]
    6cb8:	003b      	movs	r3, r7
    6cba:	2200      	movs	r2, #0
    6cbc:	721a      	strb	r2, [r3, #8]
    6cbe:	003b      	movs	r3, r7
    6cc0:	2200      	movs	r2, #0
    6cc2:	725a      	strb	r2, [r3, #9]
    6cc4:	003b      	movs	r3, r7
    6cc6:	0019      	movs	r1, r3
    6cc8:	2000      	movs	r0, #0
    6cca:	4b13      	ldr	r3, [pc, #76]	; (6d18 <system_clock_init+0x260>)
    6ccc:	4798      	blx	r3
    6cce:	2000      	movs	r0, #0
    6cd0:	4b12      	ldr	r3, [pc, #72]	; (6d1c <system_clock_init+0x264>)
    6cd2:	4798      	blx	r3
#endif
}
    6cd4:	46c0      	nop			; (mov r8, r8)
    6cd6:	46bd      	mov	sp, r7
    6cd8:	b02a      	add	sp, #168	; 0xa8
    6cda:	bd80      	pop	{r7, pc}
    6cdc:	40000800 	.word	0x40000800
    6ce0:	00006599 	.word	0x00006599
    6ce4:	00006a81 	.word	0x00006a81
    6ce8:	00006469 	.word	0x00006469
    6cec:	00006761 	.word	0x00006761
    6cf0:	00006951 	.word	0x00006951
    6cf4:	000069fd 	.word	0x000069fd
    6cf8:	000064d3 	.word	0x000064d3
    6cfc:	00806024 	.word	0x00806024
    6d00:	000005b9 	.word	0x000005b9
    6d04:	00006881 	.word	0x00006881
    6d08:	000064b1 	.word	0x000064b1
    6d0c:	000066e9 	.word	0x000066e9
    6d10:	00006dd9 	.word	0x00006dd9
    6d14:	00006425 	.word	0x00006425
    6d18:	00006e09 	.word	0x00006e09
    6d1c:	00006f2d 	.word	0x00006f2d
    6d20:	00006453 	.word	0x00006453
    6d24:	00007061 	.word	0x00007061
    6d28:	000070a5 	.word	0x000070a5
    6d2c:	00006525 	.word	0x00006525
    6d30:	00006545 	.word	0x00006545

00006d34 <system_apb_clock_set_mask>:
{
    6d34:	b580      	push	{r7, lr}
    6d36:	b082      	sub	sp, #8
    6d38:	af00      	add	r7, sp, #0
    6d3a:	0002      	movs	r2, r0
    6d3c:	6039      	str	r1, [r7, #0]
    6d3e:	1dfb      	adds	r3, r7, #7
    6d40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6d42:	1dfb      	adds	r3, r7, #7
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	2b01      	cmp	r3, #1
    6d48:	d00a      	beq.n	6d60 <system_apb_clock_set_mask+0x2c>
    6d4a:	2b02      	cmp	r3, #2
    6d4c:	d00f      	beq.n	6d6e <system_apb_clock_set_mask+0x3a>
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d114      	bne.n	6d7c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6d52:	4b0e      	ldr	r3, [pc, #56]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d54:	4a0d      	ldr	r2, [pc, #52]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d56:	6991      	ldr	r1, [r2, #24]
    6d58:	683a      	ldr	r2, [r7, #0]
    6d5a:	430a      	orrs	r2, r1
    6d5c:	619a      	str	r2, [r3, #24]
			break;
    6d5e:	e00f      	b.n	6d80 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6d60:	4b0a      	ldr	r3, [pc, #40]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d62:	4a0a      	ldr	r2, [pc, #40]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d64:	69d1      	ldr	r1, [r2, #28]
    6d66:	683a      	ldr	r2, [r7, #0]
    6d68:	430a      	orrs	r2, r1
    6d6a:	61da      	str	r2, [r3, #28]
			break;
    6d6c:	e008      	b.n	6d80 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6d6e:	4b07      	ldr	r3, [pc, #28]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d70:	4a06      	ldr	r2, [pc, #24]	; (6d8c <system_apb_clock_set_mask+0x58>)
    6d72:	6a11      	ldr	r1, [r2, #32]
    6d74:	683a      	ldr	r2, [r7, #0]
    6d76:	430a      	orrs	r2, r1
    6d78:	621a      	str	r2, [r3, #32]
			break;
    6d7a:	e001      	b.n	6d80 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6d7c:	2317      	movs	r3, #23
    6d7e:	e000      	b.n	6d82 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6d80:	2300      	movs	r3, #0
}
    6d82:	0018      	movs	r0, r3
    6d84:	46bd      	mov	sp, r7
    6d86:	b002      	add	sp, #8
    6d88:	bd80      	pop	{r7, pc}
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	40000400 	.word	0x40000400

00006d90 <system_interrupt_enter_critical_section>:
{
    6d90:	b580      	push	{r7, lr}
    6d92:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6d94:	4b02      	ldr	r3, [pc, #8]	; (6da0 <system_interrupt_enter_critical_section+0x10>)
    6d96:	4798      	blx	r3
}
    6d98:	46c0      	nop			; (mov r8, r8)
    6d9a:	46bd      	mov	sp, r7
    6d9c:	bd80      	pop	{r7, pc}
    6d9e:	46c0      	nop			; (mov r8, r8)
    6da0:	00004019 	.word	0x00004019

00006da4 <system_interrupt_leave_critical_section>:
{
    6da4:	b580      	push	{r7, lr}
    6da6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6da8:	4b02      	ldr	r3, [pc, #8]	; (6db4 <system_interrupt_leave_critical_section+0x10>)
    6daa:	4798      	blx	r3
}
    6dac:	46c0      	nop			; (mov r8, r8)
    6dae:	46bd      	mov	sp, r7
    6db0:	bd80      	pop	{r7, pc}
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	0000406d 	.word	0x0000406d

00006db8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6dbc:	4b05      	ldr	r3, [pc, #20]	; (6dd4 <system_gclk_is_syncing+0x1c>)
    6dbe:	785b      	ldrb	r3, [r3, #1]
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	b25b      	sxtb	r3, r3
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	da01      	bge.n	6dcc <system_gclk_is_syncing+0x14>
		return true;
    6dc8:	2301      	movs	r3, #1
    6dca:	e000      	b.n	6dce <system_gclk_is_syncing+0x16>
	}

	return false;
    6dcc:	2300      	movs	r3, #0
}
    6dce:	0018      	movs	r0, r3
    6dd0:	46bd      	mov	sp, r7
    6dd2:	bd80      	pop	{r7, pc}
    6dd4:	40000c00 	.word	0x40000c00

00006dd8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6ddc:	2108      	movs	r1, #8
    6dde:	2000      	movs	r0, #0
    6de0:	4b07      	ldr	r3, [pc, #28]	; (6e00 <system_gclk_init+0x28>)
    6de2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6de4:	4b07      	ldr	r3, [pc, #28]	; (6e04 <system_gclk_init+0x2c>)
    6de6:	2201      	movs	r2, #1
    6de8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	4b05      	ldr	r3, [pc, #20]	; (6e04 <system_gclk_init+0x2c>)
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	b2db      	uxtb	r3, r3
    6df2:	001a      	movs	r2, r3
    6df4:	2301      	movs	r3, #1
    6df6:	4013      	ands	r3, r2
    6df8:	d1f8      	bne.n	6dec <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6dfa:	46c0      	nop			; (mov r8, r8)
    6dfc:	46bd      	mov	sp, r7
    6dfe:	bd80      	pop	{r7, pc}
    6e00:	00006d35 	.word	0x00006d35
    6e04:	40000c00 	.word	0x40000c00

00006e08 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	b086      	sub	sp, #24
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	0002      	movs	r2, r0
    6e10:	6039      	str	r1, [r7, #0]
    6e12:	1dfb      	adds	r3, r7, #7
    6e14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6e16:	1dfb      	adds	r3, r7, #7
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6e1c:	1dfb      	adds	r3, r7, #7
    6e1e:	781b      	ldrb	r3, [r3, #0]
    6e20:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6e22:	683b      	ldr	r3, [r7, #0]
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	021b      	lsls	r3, r3, #8
    6e28:	001a      	movs	r2, r3
    6e2a:	697b      	ldr	r3, [r7, #20]
    6e2c:	4313      	orrs	r3, r2
    6e2e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6e30:	683b      	ldr	r3, [r7, #0]
    6e32:	785b      	ldrb	r3, [r3, #1]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d004      	beq.n	6e42 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6e38:	697b      	ldr	r3, [r7, #20]
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	02d2      	lsls	r2, r2, #11
    6e3e:	4313      	orrs	r3, r2
    6e40:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6e42:	683b      	ldr	r3, [r7, #0]
    6e44:	7a5b      	ldrb	r3, [r3, #9]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d004      	beq.n	6e54 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6e4a:	697b      	ldr	r3, [r7, #20]
    6e4c:	2280      	movs	r2, #128	; 0x80
    6e4e:	0312      	lsls	r2, r2, #12
    6e50:	4313      	orrs	r3, r2
    6e52:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6e54:	683b      	ldr	r3, [r7, #0]
    6e56:	685b      	ldr	r3, [r3, #4]
    6e58:	2b01      	cmp	r3, #1
    6e5a:	d92c      	bls.n	6eb6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	685a      	ldr	r2, [r3, #4]
    6e60:	683b      	ldr	r3, [r7, #0]
    6e62:	685b      	ldr	r3, [r3, #4]
    6e64:	3b01      	subs	r3, #1
    6e66:	4013      	ands	r3, r2
    6e68:	d11a      	bne.n	6ea0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6e6a:	2300      	movs	r3, #0
    6e6c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6e6e:	2302      	movs	r3, #2
    6e70:	60bb      	str	r3, [r7, #8]
    6e72:	e005      	b.n	6e80 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6e74:	68fb      	ldr	r3, [r7, #12]
    6e76:	3301      	adds	r3, #1
    6e78:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    6e7a:	68bb      	ldr	r3, [r7, #8]
    6e7c:	005b      	lsls	r3, r3, #1
    6e7e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6e80:	683b      	ldr	r3, [r7, #0]
    6e82:	685a      	ldr	r2, [r3, #4]
    6e84:	68bb      	ldr	r3, [r7, #8]
    6e86:	429a      	cmp	r2, r3
    6e88:	d8f4      	bhi.n	6e74 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6e8a:	68fb      	ldr	r3, [r7, #12]
    6e8c:	021b      	lsls	r3, r3, #8
    6e8e:	693a      	ldr	r2, [r7, #16]
    6e90:	4313      	orrs	r3, r2
    6e92:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6e94:	697b      	ldr	r3, [r7, #20]
    6e96:	2280      	movs	r2, #128	; 0x80
    6e98:	0352      	lsls	r2, r2, #13
    6e9a:	4313      	orrs	r3, r2
    6e9c:	617b      	str	r3, [r7, #20]
    6e9e:	e00a      	b.n	6eb6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6ea0:	683b      	ldr	r3, [r7, #0]
    6ea2:	685b      	ldr	r3, [r3, #4]
    6ea4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6ea6:	693a      	ldr	r2, [r7, #16]
    6ea8:	4313      	orrs	r3, r2
    6eaa:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6eac:	697b      	ldr	r3, [r7, #20]
    6eae:	2280      	movs	r2, #128	; 0x80
    6eb0:	0292      	lsls	r2, r2, #10
    6eb2:	4313      	orrs	r3, r2
    6eb4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6eb6:	683b      	ldr	r3, [r7, #0]
    6eb8:	7a1b      	ldrb	r3, [r3, #8]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d004      	beq.n	6ec8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6ebe:	697b      	ldr	r3, [r7, #20]
    6ec0:	2280      	movs	r2, #128	; 0x80
    6ec2:	0392      	lsls	r2, r2, #14
    6ec4:	4313      	orrs	r3, r2
    6ec6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6ec8:	46c0      	nop			; (mov r8, r8)
    6eca:	4b13      	ldr	r3, [pc, #76]	; (6f18 <system_gclk_gen_set_config+0x110>)
    6ecc:	4798      	blx	r3
    6ece:	1e03      	subs	r3, r0, #0
    6ed0:	d1fb      	bne.n	6eca <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6ed2:	4b12      	ldr	r3, [pc, #72]	; (6f1c <system_gclk_gen_set_config+0x114>)
    6ed4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6ed6:	4a12      	ldr	r2, [pc, #72]	; (6f20 <system_gclk_gen_set_config+0x118>)
    6ed8:	1dfb      	adds	r3, r7, #7
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	4b0d      	ldr	r3, [pc, #52]	; (6f18 <system_gclk_gen_set_config+0x110>)
    6ee2:	4798      	blx	r3
    6ee4:	1e03      	subs	r3, r0, #0
    6ee6:	d1fb      	bne.n	6ee0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6ee8:	4b0e      	ldr	r3, [pc, #56]	; (6f24 <system_gclk_gen_set_config+0x11c>)
    6eea:	693a      	ldr	r2, [r7, #16]
    6eec:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6eee:	46c0      	nop			; (mov r8, r8)
    6ef0:	4b09      	ldr	r3, [pc, #36]	; (6f18 <system_gclk_gen_set_config+0x110>)
    6ef2:	4798      	blx	r3
    6ef4:	1e03      	subs	r3, r0, #0
    6ef6:	d1fb      	bne.n	6ef0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6ef8:	4b0a      	ldr	r3, [pc, #40]	; (6f24 <system_gclk_gen_set_config+0x11c>)
    6efa:	4a0a      	ldr	r2, [pc, #40]	; (6f24 <system_gclk_gen_set_config+0x11c>)
    6efc:	6851      	ldr	r1, [r2, #4]
    6efe:	2280      	movs	r2, #128	; 0x80
    6f00:	0252      	lsls	r2, r2, #9
    6f02:	4011      	ands	r1, r2
    6f04:	697a      	ldr	r2, [r7, #20]
    6f06:	430a      	orrs	r2, r1
    6f08:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6f0a:	4b07      	ldr	r3, [pc, #28]	; (6f28 <system_gclk_gen_set_config+0x120>)
    6f0c:	4798      	blx	r3
}
    6f0e:	46c0      	nop			; (mov r8, r8)
    6f10:	46bd      	mov	sp, r7
    6f12:	b006      	add	sp, #24
    6f14:	bd80      	pop	{r7, pc}
    6f16:	46c0      	nop			; (mov r8, r8)
    6f18:	00006db9 	.word	0x00006db9
    6f1c:	00006d91 	.word	0x00006d91
    6f20:	40000c08 	.word	0x40000c08
    6f24:	40000c00 	.word	0x40000c00
    6f28:	00006da5 	.word	0x00006da5

00006f2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6f2c:	b580      	push	{r7, lr}
    6f2e:	b082      	sub	sp, #8
    6f30:	af00      	add	r7, sp, #0
    6f32:	0002      	movs	r2, r0
    6f34:	1dfb      	adds	r3, r7, #7
    6f36:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6f38:	46c0      	nop			; (mov r8, r8)
    6f3a:	4b0e      	ldr	r3, [pc, #56]	; (6f74 <system_gclk_gen_enable+0x48>)
    6f3c:	4798      	blx	r3
    6f3e:	1e03      	subs	r3, r0, #0
    6f40:	d1fb      	bne.n	6f3a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6f42:	4b0d      	ldr	r3, [pc, #52]	; (6f78 <system_gclk_gen_enable+0x4c>)
    6f44:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6f46:	4a0d      	ldr	r2, [pc, #52]	; (6f7c <system_gclk_gen_enable+0x50>)
    6f48:	1dfb      	adds	r3, r7, #7
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6f4e:	46c0      	nop			; (mov r8, r8)
    6f50:	4b08      	ldr	r3, [pc, #32]	; (6f74 <system_gclk_gen_enable+0x48>)
    6f52:	4798      	blx	r3
    6f54:	1e03      	subs	r3, r0, #0
    6f56:	d1fb      	bne.n	6f50 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6f58:	4b09      	ldr	r3, [pc, #36]	; (6f80 <system_gclk_gen_enable+0x54>)
    6f5a:	4a09      	ldr	r2, [pc, #36]	; (6f80 <system_gclk_gen_enable+0x54>)
    6f5c:	6852      	ldr	r2, [r2, #4]
    6f5e:	2180      	movs	r1, #128	; 0x80
    6f60:	0249      	lsls	r1, r1, #9
    6f62:	430a      	orrs	r2, r1
    6f64:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6f66:	4b07      	ldr	r3, [pc, #28]	; (6f84 <system_gclk_gen_enable+0x58>)
    6f68:	4798      	blx	r3
}
    6f6a:	46c0      	nop			; (mov r8, r8)
    6f6c:	46bd      	mov	sp, r7
    6f6e:	b002      	add	sp, #8
    6f70:	bd80      	pop	{r7, pc}
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	00006db9 	.word	0x00006db9
    6f78:	00006d91 	.word	0x00006d91
    6f7c:	40000c04 	.word	0x40000c04
    6f80:	40000c00 	.word	0x40000c00
    6f84:	00006da5 	.word	0x00006da5

00006f88 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b086      	sub	sp, #24
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	0002      	movs	r2, r0
    6f90:	1dfb      	adds	r3, r7, #7
    6f92:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6f94:	46c0      	nop			; (mov r8, r8)
    6f96:	4b2a      	ldr	r3, [pc, #168]	; (7040 <system_gclk_gen_get_hz+0xb8>)
    6f98:	4798      	blx	r3
    6f9a:	1e03      	subs	r3, r0, #0
    6f9c:	d1fb      	bne.n	6f96 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6f9e:	4b29      	ldr	r3, [pc, #164]	; (7044 <system_gclk_gen_get_hz+0xbc>)
    6fa0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6fa2:	4a29      	ldr	r2, [pc, #164]	; (7048 <system_gclk_gen_get_hz+0xc0>)
    6fa4:	1dfb      	adds	r3, r7, #7
    6fa6:	781b      	ldrb	r3, [r3, #0]
    6fa8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6faa:	46c0      	nop			; (mov r8, r8)
    6fac:	4b24      	ldr	r3, [pc, #144]	; (7040 <system_gclk_gen_get_hz+0xb8>)
    6fae:	4798      	blx	r3
    6fb0:	1e03      	subs	r3, r0, #0
    6fb2:	d1fb      	bne.n	6fac <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6fb4:	4b25      	ldr	r3, [pc, #148]	; (704c <system_gclk_gen_get_hz+0xc4>)
    6fb6:	685b      	ldr	r3, [r3, #4]
    6fb8:	04db      	lsls	r3, r3, #19
    6fba:	0edb      	lsrs	r3, r3, #27
    6fbc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6fbe:	0018      	movs	r0, r3
    6fc0:	4b23      	ldr	r3, [pc, #140]	; (7050 <system_gclk_gen_get_hz+0xc8>)
    6fc2:	4798      	blx	r3
    6fc4:	0003      	movs	r3, r0
    6fc6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6fc8:	4a1f      	ldr	r2, [pc, #124]	; (7048 <system_gclk_gen_get_hz+0xc0>)
    6fca:	1dfb      	adds	r3, r7, #7
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6fd0:	4b1e      	ldr	r3, [pc, #120]	; (704c <system_gclk_gen_get_hz+0xc4>)
    6fd2:	685b      	ldr	r3, [r3, #4]
    6fd4:	02db      	lsls	r3, r3, #11
    6fd6:	0fdb      	lsrs	r3, r3, #31
    6fd8:	b2da      	uxtb	r2, r3
    6fda:	2313      	movs	r3, #19
    6fdc:	18fb      	adds	r3, r7, r3
    6fde:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6fe0:	4a1c      	ldr	r2, [pc, #112]	; (7054 <system_gclk_gen_get_hz+0xcc>)
    6fe2:	1dfb      	adds	r3, r7, #7
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6fe8:	46c0      	nop			; (mov r8, r8)
    6fea:	4b15      	ldr	r3, [pc, #84]	; (7040 <system_gclk_gen_get_hz+0xb8>)
    6fec:	4798      	blx	r3
    6fee:	1e03      	subs	r3, r0, #0
    6ff0:	d1fb      	bne.n	6fea <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6ff2:	4b16      	ldr	r3, [pc, #88]	; (704c <system_gclk_gen_get_hz+0xc4>)
    6ff4:	689b      	ldr	r3, [r3, #8]
    6ff6:	021b      	lsls	r3, r3, #8
    6ff8:	0c1b      	lsrs	r3, r3, #16
    6ffa:	b29b      	uxth	r3, r3
    6ffc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6ffe:	4b16      	ldr	r3, [pc, #88]	; (7058 <system_gclk_gen_get_hz+0xd0>)
    7000:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7002:	2313      	movs	r3, #19
    7004:	18fb      	adds	r3, r7, r3
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	2b00      	cmp	r3, #0
    700a:	d109      	bne.n	7020 <system_gclk_gen_get_hz+0x98>
    700c:	68fb      	ldr	r3, [r7, #12]
    700e:	2b01      	cmp	r3, #1
    7010:	d906      	bls.n	7020 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    7012:	4b12      	ldr	r3, [pc, #72]	; (705c <system_gclk_gen_get_hz+0xd4>)
    7014:	68f9      	ldr	r1, [r7, #12]
    7016:	6978      	ldr	r0, [r7, #20]
    7018:	4798      	blx	r3
    701a:	0003      	movs	r3, r0
    701c:	617b      	str	r3, [r7, #20]
    701e:	e00a      	b.n	7036 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    7020:	2313      	movs	r3, #19
    7022:	18fb      	adds	r3, r7, r3
    7024:	781b      	ldrb	r3, [r3, #0]
    7026:	2b00      	cmp	r3, #0
    7028:	d005      	beq.n	7036 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    702a:	68fb      	ldr	r3, [r7, #12]
    702c:	3301      	adds	r3, #1
    702e:	697a      	ldr	r2, [r7, #20]
    7030:	40da      	lsrs	r2, r3
    7032:	0013      	movs	r3, r2
    7034:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    7036:	697b      	ldr	r3, [r7, #20]
}
    7038:	0018      	movs	r0, r3
    703a:	46bd      	mov	sp, r7
    703c:	b006      	add	sp, #24
    703e:	bd80      	pop	{r7, pc}
    7040:	00006db9 	.word	0x00006db9
    7044:	00006d91 	.word	0x00006d91
    7048:	40000c04 	.word	0x40000c04
    704c:	40000c00 	.word	0x40000c00
    7050:	0000662d 	.word	0x0000662d
    7054:	40000c08 	.word	0x40000c08
    7058:	00006da5 	.word	0x00006da5
    705c:	00008005 	.word	0x00008005

00007060 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7060:	b580      	push	{r7, lr}
    7062:	b084      	sub	sp, #16
    7064:	af00      	add	r7, sp, #0
    7066:	0002      	movs	r2, r0
    7068:	6039      	str	r1, [r7, #0]
    706a:	1dfb      	adds	r3, r7, #7
    706c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    706e:	1dfb      	adds	r3, r7, #7
    7070:	781b      	ldrb	r3, [r3, #0]
    7072:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7074:	683b      	ldr	r3, [r7, #0]
    7076:	781b      	ldrb	r3, [r3, #0]
    7078:	021b      	lsls	r3, r3, #8
    707a:	001a      	movs	r2, r3
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	4313      	orrs	r3, r2
    7080:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7082:	1dfb      	adds	r3, r7, #7
    7084:	781b      	ldrb	r3, [r3, #0]
    7086:	0018      	movs	r0, r3
    7088:	4b04      	ldr	r3, [pc, #16]	; (709c <system_gclk_chan_set_config+0x3c>)
    708a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    708c:	4b04      	ldr	r3, [pc, #16]	; (70a0 <system_gclk_chan_set_config+0x40>)
    708e:	68fa      	ldr	r2, [r7, #12]
    7090:	b292      	uxth	r2, r2
    7092:	805a      	strh	r2, [r3, #2]
}
    7094:	46c0      	nop			; (mov r8, r8)
    7096:	46bd      	mov	sp, r7
    7098:	b004      	add	sp, #16
    709a:	bd80      	pop	{r7, pc}
    709c:	000070ed 	.word	0x000070ed
    70a0:	40000c00 	.word	0x40000c00

000070a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    70a4:	b580      	push	{r7, lr}
    70a6:	b082      	sub	sp, #8
    70a8:	af00      	add	r7, sp, #0
    70aa:	0002      	movs	r2, r0
    70ac:	1dfb      	adds	r3, r7, #7
    70ae:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    70b0:	4b0a      	ldr	r3, [pc, #40]	; (70dc <system_gclk_chan_enable+0x38>)
    70b2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    70b4:	4a0a      	ldr	r2, [pc, #40]	; (70e0 <system_gclk_chan_enable+0x3c>)
    70b6:	1dfb      	adds	r3, r7, #7
    70b8:	781b      	ldrb	r3, [r3, #0]
    70ba:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    70bc:	4909      	ldr	r1, [pc, #36]	; (70e4 <system_gclk_chan_enable+0x40>)
    70be:	4b09      	ldr	r3, [pc, #36]	; (70e4 <system_gclk_chan_enable+0x40>)
    70c0:	885b      	ldrh	r3, [r3, #2]
    70c2:	b29b      	uxth	r3, r3
    70c4:	2280      	movs	r2, #128	; 0x80
    70c6:	01d2      	lsls	r2, r2, #7
    70c8:	4313      	orrs	r3, r2
    70ca:	b29b      	uxth	r3, r3
    70cc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    70ce:	4b06      	ldr	r3, [pc, #24]	; (70e8 <system_gclk_chan_enable+0x44>)
    70d0:	4798      	blx	r3
}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	46bd      	mov	sp, r7
    70d6:	b002      	add	sp, #8
    70d8:	bd80      	pop	{r7, pc}
    70da:	46c0      	nop			; (mov r8, r8)
    70dc:	00006d91 	.word	0x00006d91
    70e0:	40000c02 	.word	0x40000c02
    70e4:	40000c00 	.word	0x40000c00
    70e8:	00006da5 	.word	0x00006da5

000070ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    70ec:	b580      	push	{r7, lr}
    70ee:	b084      	sub	sp, #16
    70f0:	af00      	add	r7, sp, #0
    70f2:	0002      	movs	r2, r0
    70f4:	1dfb      	adds	r3, r7, #7
    70f6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    70f8:	4b1c      	ldr	r3, [pc, #112]	; (716c <system_gclk_chan_disable+0x80>)
    70fa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    70fc:	4a1c      	ldr	r2, [pc, #112]	; (7170 <system_gclk_chan_disable+0x84>)
    70fe:	1dfb      	adds	r3, r7, #7
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7104:	4b1b      	ldr	r3, [pc, #108]	; (7174 <system_gclk_chan_disable+0x88>)
    7106:	885b      	ldrh	r3, [r3, #2]
    7108:	051b      	lsls	r3, r3, #20
    710a:	0f1b      	lsrs	r3, r3, #28
    710c:	b2db      	uxtb	r3, r3
    710e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    7110:	4a18      	ldr	r2, [pc, #96]	; (7174 <system_gclk_chan_disable+0x88>)
    7112:	8853      	ldrh	r3, [r2, #2]
    7114:	4918      	ldr	r1, [pc, #96]	; (7178 <system_gclk_chan_disable+0x8c>)
    7116:	400b      	ands	r3, r1
    7118:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    711a:	4a16      	ldr	r2, [pc, #88]	; (7174 <system_gclk_chan_disable+0x88>)
    711c:	4b15      	ldr	r3, [pc, #84]	; (7174 <system_gclk_chan_disable+0x88>)
    711e:	885b      	ldrh	r3, [r3, #2]
    7120:	b29b      	uxth	r3, r3
    7122:	4916      	ldr	r1, [pc, #88]	; (717c <system_gclk_chan_disable+0x90>)
    7124:	400b      	ands	r3, r1
    7126:	b29b      	uxth	r3, r3
    7128:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	4b11      	ldr	r3, [pc, #68]	; (7174 <system_gclk_chan_disable+0x88>)
    712e:	885b      	ldrh	r3, [r3, #2]
    7130:	b29b      	uxth	r3, r3
    7132:	001a      	movs	r2, r3
    7134:	2380      	movs	r3, #128	; 0x80
    7136:	01db      	lsls	r3, r3, #7
    7138:	4013      	ands	r3, r2
    713a:	d1f7      	bne.n	712c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    713c:	4a0d      	ldr	r2, [pc, #52]	; (7174 <system_gclk_chan_disable+0x88>)
    713e:	68fb      	ldr	r3, [r7, #12]
    7140:	b2db      	uxtb	r3, r3
    7142:	1c19      	adds	r1, r3, #0
    7144:	230f      	movs	r3, #15
    7146:	400b      	ands	r3, r1
    7148:	b2d9      	uxtb	r1, r3
    714a:	8853      	ldrh	r3, [r2, #2]
    714c:	1c08      	adds	r0, r1, #0
    714e:	210f      	movs	r1, #15
    7150:	4001      	ands	r1, r0
    7152:	0208      	lsls	r0, r1, #8
    7154:	4908      	ldr	r1, [pc, #32]	; (7178 <system_gclk_chan_disable+0x8c>)
    7156:	400b      	ands	r3, r1
    7158:	1c19      	adds	r1, r3, #0
    715a:	1c03      	adds	r3, r0, #0
    715c:	430b      	orrs	r3, r1
    715e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    7160:	4b07      	ldr	r3, [pc, #28]	; (7180 <system_gclk_chan_disable+0x94>)
    7162:	4798      	blx	r3
}
    7164:	46c0      	nop			; (mov r8, r8)
    7166:	46bd      	mov	sp, r7
    7168:	b004      	add	sp, #16
    716a:	bd80      	pop	{r7, pc}
    716c:	00006d91 	.word	0x00006d91
    7170:	40000c02 	.word	0x40000c02
    7174:	40000c00 	.word	0x40000c00
    7178:	fffff0ff 	.word	0xfffff0ff
    717c:	ffffbfff 	.word	0xffffbfff
    7180:	00006da5 	.word	0x00006da5

00007184 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7184:	b580      	push	{r7, lr}
    7186:	b084      	sub	sp, #16
    7188:	af00      	add	r7, sp, #0
    718a:	0002      	movs	r2, r0
    718c:	1dfb      	adds	r3, r7, #7
    718e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7190:	4b0d      	ldr	r3, [pc, #52]	; (71c8 <system_gclk_chan_get_hz+0x44>)
    7192:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7194:	4a0d      	ldr	r2, [pc, #52]	; (71cc <system_gclk_chan_get_hz+0x48>)
    7196:	1dfb      	adds	r3, r7, #7
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    719c:	4b0c      	ldr	r3, [pc, #48]	; (71d0 <system_gclk_chan_get_hz+0x4c>)
    719e:	885b      	ldrh	r3, [r3, #2]
    71a0:	051b      	lsls	r3, r3, #20
    71a2:	0f1b      	lsrs	r3, r3, #28
    71a4:	b2da      	uxtb	r2, r3
    71a6:	230f      	movs	r3, #15
    71a8:	18fb      	adds	r3, r7, r3
    71aa:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    71ac:	4b09      	ldr	r3, [pc, #36]	; (71d4 <system_gclk_chan_get_hz+0x50>)
    71ae:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    71b0:	230f      	movs	r3, #15
    71b2:	18fb      	adds	r3, r7, r3
    71b4:	781b      	ldrb	r3, [r3, #0]
    71b6:	0018      	movs	r0, r3
    71b8:	4b07      	ldr	r3, [pc, #28]	; (71d8 <system_gclk_chan_get_hz+0x54>)
    71ba:	4798      	blx	r3
    71bc:	0003      	movs	r3, r0
}
    71be:	0018      	movs	r0, r3
    71c0:	46bd      	mov	sp, r7
    71c2:	b004      	add	sp, #16
    71c4:	bd80      	pop	{r7, pc}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	00006d91 	.word	0x00006d91
    71cc:	40000c02 	.word	0x40000c02
    71d0:	40000c00 	.word	0x40000c00
    71d4:	00006da5 	.word	0x00006da5
    71d8:	00006f89 	.word	0x00006f89

000071dc <system_pinmux_get_group_from_gpio_pin>:
{
    71dc:	b580      	push	{r7, lr}
    71de:	b084      	sub	sp, #16
    71e0:	af00      	add	r7, sp, #0
    71e2:	0002      	movs	r2, r0
    71e4:	1dfb      	adds	r3, r7, #7
    71e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    71e8:	230f      	movs	r3, #15
    71ea:	18fb      	adds	r3, r7, r3
    71ec:	1dfa      	adds	r2, r7, #7
    71ee:	7812      	ldrb	r2, [r2, #0]
    71f0:	09d2      	lsrs	r2, r2, #7
    71f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    71f4:	230e      	movs	r3, #14
    71f6:	18fb      	adds	r3, r7, r3
    71f8:	1dfa      	adds	r2, r7, #7
    71fa:	7812      	ldrb	r2, [r2, #0]
    71fc:	0952      	lsrs	r2, r2, #5
    71fe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7200:	4b0d      	ldr	r3, [pc, #52]	; (7238 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7202:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7204:	230f      	movs	r3, #15
    7206:	18fb      	adds	r3, r7, r3
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	2b00      	cmp	r3, #0
    720c:	d10f      	bne.n	722e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    720e:	230f      	movs	r3, #15
    7210:	18fb      	adds	r3, r7, r3
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	009b      	lsls	r3, r3, #2
    7216:	2210      	movs	r2, #16
    7218:	4694      	mov	ip, r2
    721a:	44bc      	add	ip, r7
    721c:	4463      	add	r3, ip
    721e:	3b08      	subs	r3, #8
    7220:	681a      	ldr	r2, [r3, #0]
    7222:	230e      	movs	r3, #14
    7224:	18fb      	adds	r3, r7, r3
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	01db      	lsls	r3, r3, #7
    722a:	18d3      	adds	r3, r2, r3
    722c:	e000      	b.n	7230 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    722e:	2300      	movs	r3, #0
}
    7230:	0018      	movs	r0, r3
    7232:	46bd      	mov	sp, r7
    7234:	b004      	add	sp, #16
    7236:	bd80      	pop	{r7, pc}
    7238:	41004400 	.word	0x41004400

0000723c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    723c:	b580      	push	{r7, lr}
    723e:	b088      	sub	sp, #32
    7240:	af00      	add	r7, sp, #0
    7242:	60f8      	str	r0, [r7, #12]
    7244:	60b9      	str	r1, [r7, #8]
    7246:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7248:	2300      	movs	r3, #0
    724a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	78db      	ldrb	r3, [r3, #3]
    7250:	2201      	movs	r2, #1
    7252:	4053      	eors	r3, r2
    7254:	b2db      	uxtb	r3, r3
    7256:	2b00      	cmp	r3, #0
    7258:	d035      	beq.n	72c6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	781b      	ldrb	r3, [r3, #0]
    725e:	2b80      	cmp	r3, #128	; 0x80
    7260:	d00b      	beq.n	727a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7262:	69fb      	ldr	r3, [r7, #28]
    7264:	2280      	movs	r2, #128	; 0x80
    7266:	0252      	lsls	r2, r2, #9
    7268:	4313      	orrs	r3, r2
    726a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	061b      	lsls	r3, r3, #24
    7272:	001a      	movs	r2, r3
    7274:	69fb      	ldr	r3, [r7, #28]
    7276:	4313      	orrs	r3, r2
    7278:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	785b      	ldrb	r3, [r3, #1]
    727e:	2b00      	cmp	r3, #0
    7280:	d003      	beq.n	728a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7282:	687b      	ldr	r3, [r7, #4]
    7284:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7286:	2b02      	cmp	r3, #2
    7288:	d110      	bne.n	72ac <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    728a:	69fb      	ldr	r3, [r7, #28]
    728c:	2280      	movs	r2, #128	; 0x80
    728e:	0292      	lsls	r2, r2, #10
    7290:	4313      	orrs	r3, r2
    7292:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	789b      	ldrb	r3, [r3, #2]
    7298:	2b00      	cmp	r3, #0
    729a:	d004      	beq.n	72a6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    729c:	69fb      	ldr	r3, [r7, #28]
    729e:	2280      	movs	r2, #128	; 0x80
    72a0:	02d2      	lsls	r2, r2, #11
    72a2:	4313      	orrs	r3, r2
    72a4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    72a6:	68fb      	ldr	r3, [r7, #12]
    72a8:	68ba      	ldr	r2, [r7, #8]
    72aa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    72ac:	687b      	ldr	r3, [r7, #4]
    72ae:	785b      	ldrb	r3, [r3, #1]
    72b0:	2b01      	cmp	r3, #1
    72b2:	d003      	beq.n	72bc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    72b4:	687b      	ldr	r3, [r7, #4]
    72b6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    72b8:	2b02      	cmp	r3, #2
    72ba:	d107      	bne.n	72cc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    72bc:	69fb      	ldr	r3, [r7, #28]
    72be:	4a22      	ldr	r2, [pc, #136]	; (7348 <_system_pinmux_config+0x10c>)
    72c0:	4013      	ands	r3, r2
    72c2:	61fb      	str	r3, [r7, #28]
    72c4:	e002      	b.n	72cc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    72c6:	68fb      	ldr	r3, [r7, #12]
    72c8:	68ba      	ldr	r2, [r7, #8]
    72ca:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    72cc:	68bb      	ldr	r3, [r7, #8]
    72ce:	041b      	lsls	r3, r3, #16
    72d0:	0c1b      	lsrs	r3, r3, #16
    72d2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    72d4:	68bb      	ldr	r3, [r7, #8]
    72d6:	0c1b      	lsrs	r3, r3, #16
    72d8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72da:	69ba      	ldr	r2, [r7, #24]
    72dc:	69fb      	ldr	r3, [r7, #28]
    72de:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    72e0:	22a0      	movs	r2, #160	; 0xa0
    72e2:	05d2      	lsls	r2, r2, #23
    72e4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72ea:	697a      	ldr	r2, [r7, #20]
    72ec:	69fb      	ldr	r3, [r7, #28]
    72ee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    72f0:	22d0      	movs	r2, #208	; 0xd0
    72f2:	0612      	lsls	r2, r2, #24
    72f4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72f6:	68fb      	ldr	r3, [r7, #12]
    72f8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	78db      	ldrb	r3, [r3, #3]
    72fe:	2201      	movs	r2, #1
    7300:	4053      	eors	r3, r2
    7302:	b2db      	uxtb	r3, r3
    7304:	2b00      	cmp	r3, #0
    7306:	d01a      	beq.n	733e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7308:	69fa      	ldr	r2, [r7, #28]
    730a:	2380      	movs	r3, #128	; 0x80
    730c:	02db      	lsls	r3, r3, #11
    730e:	4013      	ands	r3, r2
    7310:	d00a      	beq.n	7328 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	789b      	ldrb	r3, [r3, #2]
    7316:	2b01      	cmp	r3, #1
    7318:	d103      	bne.n	7322 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    731a:	68fb      	ldr	r3, [r7, #12]
    731c:	68ba      	ldr	r2, [r7, #8]
    731e:	619a      	str	r2, [r3, #24]
    7320:	e002      	b.n	7328 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7322:	68fb      	ldr	r3, [r7, #12]
    7324:	68ba      	ldr	r2, [r7, #8]
    7326:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	785b      	ldrb	r3, [r3, #1]
    732c:	2b01      	cmp	r3, #1
    732e:	d003      	beq.n	7338 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7334:	2b02      	cmp	r3, #2
    7336:	d102      	bne.n	733e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	68ba      	ldr	r2, [r7, #8]
    733c:	609a      	str	r2, [r3, #8]
		}
	}
}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	46bd      	mov	sp, r7
    7342:	b008      	add	sp, #32
    7344:	bd80      	pop	{r7, pc}
    7346:	46c0      	nop			; (mov r8, r8)
    7348:	fffbffff 	.word	0xfffbffff

0000734c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    734c:	b580      	push	{r7, lr}
    734e:	b084      	sub	sp, #16
    7350:	af00      	add	r7, sp, #0
    7352:	0002      	movs	r2, r0
    7354:	6039      	str	r1, [r7, #0]
    7356:	1dfb      	adds	r3, r7, #7
    7358:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    735a:	1dfb      	adds	r3, r7, #7
    735c:	781b      	ldrb	r3, [r3, #0]
    735e:	0018      	movs	r0, r3
    7360:	4b0a      	ldr	r3, [pc, #40]	; (738c <system_pinmux_pin_set_config+0x40>)
    7362:	4798      	blx	r3
    7364:	0003      	movs	r3, r0
    7366:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7368:	1dfb      	adds	r3, r7, #7
    736a:	781b      	ldrb	r3, [r3, #0]
    736c:	221f      	movs	r2, #31
    736e:	4013      	ands	r3, r2
    7370:	2201      	movs	r2, #1
    7372:	409a      	lsls	r2, r3
    7374:	0013      	movs	r3, r2
    7376:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7378:	683a      	ldr	r2, [r7, #0]
    737a:	68b9      	ldr	r1, [r7, #8]
    737c:	68fb      	ldr	r3, [r7, #12]
    737e:	0018      	movs	r0, r3
    7380:	4b03      	ldr	r3, [pc, #12]	; (7390 <system_pinmux_pin_set_config+0x44>)
    7382:	4798      	blx	r3
}
    7384:	46c0      	nop			; (mov r8, r8)
    7386:	46bd      	mov	sp, r7
    7388:	b004      	add	sp, #16
    738a:	bd80      	pop	{r7, pc}
    738c:	000071dd 	.word	0x000071dd
    7390:	0000723d 	.word	0x0000723d

00007394 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7394:	b580      	push	{r7, lr}
    7396:	af00      	add	r7, sp, #0
	return;
    7398:	46c0      	nop			; (mov r8, r8)
}
    739a:	46bd      	mov	sp, r7
    739c:	bd80      	pop	{r7, pc}
	...

000073a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    73a0:	b580      	push	{r7, lr}
    73a2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    73a4:	4b06      	ldr	r3, [pc, #24]	; (73c0 <system_init+0x20>)
    73a6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    73a8:	4b06      	ldr	r3, [pc, #24]	; (73c4 <system_init+0x24>)
    73aa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    73ac:	4b06      	ldr	r3, [pc, #24]	; (73c8 <system_init+0x28>)
    73ae:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    73b0:	4b06      	ldr	r3, [pc, #24]	; (73cc <system_init+0x2c>)
    73b2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    73b4:	4b06      	ldr	r3, [pc, #24]	; (73d0 <system_init+0x30>)
    73b6:	4798      	blx	r3
}
    73b8:	46c0      	nop			; (mov r8, r8)
    73ba:	46bd      	mov	sp, r7
    73bc:	bd80      	pop	{r7, pc}
    73be:	46c0      	nop			; (mov r8, r8)
    73c0:	00006ab9 	.word	0x00006ab9
    73c4:	000041a9 	.word	0x000041a9
    73c8:	00007395 	.word	0x00007395
    73cc:	00004419 	.word	0x00004419
    73d0:	00007395 	.word	0x00007395

000073d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    73d4:	b580      	push	{r7, lr}
    73d6:	b082      	sub	sp, #8
    73d8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    73da:	4b2f      	ldr	r3, [pc, #188]	; (7498 <Reset_Handler+0xc4>)
    73dc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    73de:	4b2f      	ldr	r3, [pc, #188]	; (749c <Reset_Handler+0xc8>)
    73e0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    73e2:	687a      	ldr	r2, [r7, #4]
    73e4:	683b      	ldr	r3, [r7, #0]
    73e6:	429a      	cmp	r2, r3
    73e8:	d00c      	beq.n	7404 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    73ea:	e007      	b.n	73fc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    73ec:	683b      	ldr	r3, [r7, #0]
    73ee:	1d1a      	adds	r2, r3, #4
    73f0:	603a      	str	r2, [r7, #0]
    73f2:	687a      	ldr	r2, [r7, #4]
    73f4:	1d11      	adds	r1, r2, #4
    73f6:	6079      	str	r1, [r7, #4]
    73f8:	6812      	ldr	r2, [r2, #0]
    73fa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    73fc:	683a      	ldr	r2, [r7, #0]
    73fe:	4b28      	ldr	r3, [pc, #160]	; (74a0 <Reset_Handler+0xcc>)
    7400:	429a      	cmp	r2, r3
    7402:	d3f3      	bcc.n	73ec <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7404:	4b27      	ldr	r3, [pc, #156]	; (74a4 <Reset_Handler+0xd0>)
    7406:	603b      	str	r3, [r7, #0]
    7408:	e004      	b.n	7414 <Reset_Handler+0x40>
                *pDest++ = 0;
    740a:	683b      	ldr	r3, [r7, #0]
    740c:	1d1a      	adds	r2, r3, #4
    740e:	603a      	str	r2, [r7, #0]
    7410:	2200      	movs	r2, #0
    7412:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    7414:	683a      	ldr	r2, [r7, #0]
    7416:	4b24      	ldr	r3, [pc, #144]	; (74a8 <Reset_Handler+0xd4>)
    7418:	429a      	cmp	r2, r3
    741a:	d3f6      	bcc.n	740a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    741c:	4b23      	ldr	r3, [pc, #140]	; (74ac <Reset_Handler+0xd8>)
    741e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7420:	4b23      	ldr	r3, [pc, #140]	; (74b0 <Reset_Handler+0xdc>)
    7422:	687a      	ldr	r2, [r7, #4]
    7424:	21ff      	movs	r1, #255	; 0xff
    7426:	438a      	bics	r2, r1
    7428:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    742a:	4a22      	ldr	r2, [pc, #136]	; (74b4 <Reset_Handler+0xe0>)
    742c:	2390      	movs	r3, #144	; 0x90
    742e:	005b      	lsls	r3, r3, #1
    7430:	2102      	movs	r1, #2
    7432:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7434:	4a20      	ldr	r2, [pc, #128]	; (74b8 <Reset_Handler+0xe4>)
    7436:	78d3      	ldrb	r3, [r2, #3]
    7438:	2103      	movs	r1, #3
    743a:	438b      	bics	r3, r1
    743c:	1c19      	adds	r1, r3, #0
    743e:	2302      	movs	r3, #2
    7440:	430b      	orrs	r3, r1
    7442:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7444:	4a1c      	ldr	r2, [pc, #112]	; (74b8 <Reset_Handler+0xe4>)
    7446:	78d3      	ldrb	r3, [r2, #3]
    7448:	210c      	movs	r1, #12
    744a:	438b      	bics	r3, r1
    744c:	1c19      	adds	r1, r3, #0
    744e:	2308      	movs	r3, #8
    7450:	430b      	orrs	r3, r1
    7452:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    7454:	4a19      	ldr	r2, [pc, #100]	; (74bc <Reset_Handler+0xe8>)
    7456:	7b93      	ldrb	r3, [r2, #14]
    7458:	2130      	movs	r1, #48	; 0x30
    745a:	438b      	bics	r3, r1
    745c:	1c19      	adds	r1, r3, #0
    745e:	2320      	movs	r3, #32
    7460:	430b      	orrs	r3, r1
    7462:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    7464:	4a15      	ldr	r2, [pc, #84]	; (74bc <Reset_Handler+0xe8>)
    7466:	7b93      	ldrb	r3, [r2, #14]
    7468:	210c      	movs	r1, #12
    746a:	438b      	bics	r3, r1
    746c:	1c19      	adds	r1, r3, #0
    746e:	2308      	movs	r3, #8
    7470:	430b      	orrs	r3, r1
    7472:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7474:	4a11      	ldr	r2, [pc, #68]	; (74bc <Reset_Handler+0xe8>)
    7476:	7b93      	ldrb	r3, [r2, #14]
    7478:	2103      	movs	r1, #3
    747a:	438b      	bics	r3, r1
    747c:	1c19      	adds	r1, r3, #0
    747e:	2302      	movs	r3, #2
    7480:	430b      	orrs	r3, r1
    7482:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    7484:	4a0e      	ldr	r2, [pc, #56]	; (74c0 <Reset_Handler+0xec>)
    7486:	6853      	ldr	r3, [r2, #4]
    7488:	2180      	movs	r1, #128	; 0x80
    748a:	430b      	orrs	r3, r1
    748c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    748e:	4b0d      	ldr	r3, [pc, #52]	; (74c4 <Reset_Handler+0xf0>)
    7490:	4798      	blx	r3

        /* Branch to main function */
        main();
    7492:	4b0d      	ldr	r3, [pc, #52]	; (74c8 <Reset_Handler+0xf4>)
    7494:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    7496:	e7fe      	b.n	7496 <Reset_Handler+0xc2>
    7498:	0000c4c0 	.word	0x0000c4c0
    749c:	20000000 	.word	0x20000000
    74a0:	20000244 	.word	0x20000244
    74a4:	20000244 	.word	0x20000244
    74a8:	20000490 	.word	0x20000490
    74ac:	00000000 	.word	0x00000000
    74b0:	e000ed00 	.word	0xe000ed00
    74b4:	41007000 	.word	0x41007000
    74b8:	41005000 	.word	0x41005000
    74bc:	41004800 	.word	0x41004800
    74c0:	41004000 	.word	0x41004000
    74c4:	00009c19 	.word	0x00009c19
    74c8:	00007ee5 	.word	0x00007ee5

000074cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    74cc:	b580      	push	{r7, lr}
    74ce:	af00      	add	r7, sp, #0
        while (1) {
    74d0:	e7fe      	b.n	74d0 <Dummy_Handler+0x4>
	...

000074d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    74d4:	b580      	push	{r7, lr}
    74d6:	b086      	sub	sp, #24
    74d8:	af00      	add	r7, sp, #0
    74da:	60f8      	str	r0, [r7, #12]
    74dc:	60b9      	str	r1, [r7, #8]
    74de:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    74e0:	2300      	movs	r3, #0
    74e2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    74e4:	68fb      	ldr	r3, [r7, #12]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d012      	beq.n	7510 <_read+0x3c>
		return -1;
    74ea:	2301      	movs	r3, #1
    74ec:	425b      	negs	r3, r3
    74ee:	e013      	b.n	7518 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    74f0:	4b0b      	ldr	r3, [pc, #44]	; (7520 <_read+0x4c>)
    74f2:	681a      	ldr	r2, [r3, #0]
    74f4:	4b0b      	ldr	r3, [pc, #44]	; (7524 <_read+0x50>)
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	68b9      	ldr	r1, [r7, #8]
    74fa:	0018      	movs	r0, r3
    74fc:	4790      	blx	r2
		ptr++;
    74fe:	68bb      	ldr	r3, [r7, #8]
    7500:	3301      	adds	r3, #1
    7502:	60bb      	str	r3, [r7, #8]
		nChars++;
    7504:	697b      	ldr	r3, [r7, #20]
    7506:	3301      	adds	r3, #1
    7508:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    750a:	687b      	ldr	r3, [r7, #4]
    750c:	3b01      	subs	r3, #1
    750e:	607b      	str	r3, [r7, #4]
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	2b00      	cmp	r3, #0
    7514:	dcec      	bgt.n	74f0 <_read+0x1c>
	}
	return nChars;
    7516:	697b      	ldr	r3, [r7, #20]
}
    7518:	0018      	movs	r0, r3
    751a:	46bd      	mov	sp, r7
    751c:	b006      	add	sp, #24
    751e:	bd80      	pop	{r7, pc}
    7520:	200003f4 	.word	0x200003f4
    7524:	200003fc 	.word	0x200003fc

00007528 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7528:	b580      	push	{r7, lr}
    752a:	b086      	sub	sp, #24
    752c:	af00      	add	r7, sp, #0
    752e:	60f8      	str	r0, [r7, #12]
    7530:	60b9      	str	r1, [r7, #8]
    7532:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7534:	2300      	movs	r3, #0
    7536:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    7538:	68fb      	ldr	r3, [r7, #12]
    753a:	2b01      	cmp	r3, #1
    753c:	d01d      	beq.n	757a <_write+0x52>
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	2b02      	cmp	r3, #2
    7542:	d01a      	beq.n	757a <_write+0x52>
    7544:	68fb      	ldr	r3, [r7, #12]
    7546:	2b03      	cmp	r3, #3
    7548:	d017      	beq.n	757a <_write+0x52>
		return -1;
    754a:	2301      	movs	r3, #1
    754c:	425b      	negs	r3, r3
    754e:	e018      	b.n	7582 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7550:	4b0e      	ldr	r3, [pc, #56]	; (758c <_write+0x64>)
    7552:	681a      	ldr	r2, [r3, #0]
    7554:	4b0e      	ldr	r3, [pc, #56]	; (7590 <_write+0x68>)
    7556:	6818      	ldr	r0, [r3, #0]
    7558:	68bb      	ldr	r3, [r7, #8]
    755a:	1c59      	adds	r1, r3, #1
    755c:	60b9      	str	r1, [r7, #8]
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	0019      	movs	r1, r3
    7562:	4790      	blx	r2
    7564:	1e03      	subs	r3, r0, #0
    7566:	da02      	bge.n	756e <_write+0x46>
			return -1;
    7568:	2301      	movs	r3, #1
    756a:	425b      	negs	r3, r3
    756c:	e009      	b.n	7582 <_write+0x5a>
		}
		++nChars;
    756e:	697b      	ldr	r3, [r7, #20]
    7570:	3301      	adds	r3, #1
    7572:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	3b01      	subs	r3, #1
    7578:	607b      	str	r3, [r7, #4]
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	2b00      	cmp	r3, #0
    757e:	d1e7      	bne.n	7550 <_write+0x28>
	}
	return nChars;
    7580:	697b      	ldr	r3, [r7, #20]
}
    7582:	0018      	movs	r0, r3
    7584:	46bd      	mov	sp, r7
    7586:	b006      	add	sp, #24
    7588:	bd80      	pop	{r7, pc}
    758a:	46c0      	nop			; (mov r8, r8)
    758c:	200003f8 	.word	0x200003f8
    7590:	200003fc 	.word	0x200003fc

00007594 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7594:	b580      	push	{r7, lr}
    7596:	b084      	sub	sp, #16
    7598:	af00      	add	r7, sp, #0
    759a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    759c:	4b0a      	ldr	r3, [pc, #40]	; (75c8 <_sbrk+0x34>)
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	2b00      	cmp	r3, #0
    75a2:	d102      	bne.n	75aa <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    75a4:	4b08      	ldr	r3, [pc, #32]	; (75c8 <_sbrk+0x34>)
    75a6:	4a09      	ldr	r2, [pc, #36]	; (75cc <_sbrk+0x38>)
    75a8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    75aa:	4b07      	ldr	r3, [pc, #28]	; (75c8 <_sbrk+0x34>)
    75ac:	681b      	ldr	r3, [r3, #0]
    75ae:	60fb      	str	r3, [r7, #12]

	heap += incr;
    75b0:	4b05      	ldr	r3, [pc, #20]	; (75c8 <_sbrk+0x34>)
    75b2:	681a      	ldr	r2, [r3, #0]
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	18d2      	adds	r2, r2, r3
    75b8:	4b03      	ldr	r3, [pc, #12]	; (75c8 <_sbrk+0x34>)
    75ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    75bc:	68fb      	ldr	r3, [r7, #12]
}
    75be:	0018      	movs	r0, r3
    75c0:	46bd      	mov	sp, r7
    75c2:	b004      	add	sp, #16
    75c4:	bd80      	pop	{r7, pc}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	200002a8 	.word	0x200002a8
    75cc:	20002490 	.word	0x20002490

000075d0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    75d0:	b580      	push	{r7, lr}
    75d2:	b082      	sub	sp, #8
    75d4:	af00      	add	r7, sp, #0
    75d6:	6078      	str	r0, [r7, #4]
	return -1;
    75d8:	2301      	movs	r3, #1
    75da:	425b      	negs	r3, r3
}
    75dc:	0018      	movs	r0, r3
    75de:	46bd      	mov	sp, r7
    75e0:	b002      	add	sp, #8
    75e2:	bd80      	pop	{r7, pc}

000075e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    75e4:	b580      	push	{r7, lr}
    75e6:	b082      	sub	sp, #8
    75e8:	af00      	add	r7, sp, #0
    75ea:	6078      	str	r0, [r7, #4]
    75ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    75ee:	683b      	ldr	r3, [r7, #0]
    75f0:	2280      	movs	r2, #128	; 0x80
    75f2:	0192      	lsls	r2, r2, #6
    75f4:	605a      	str	r2, [r3, #4]

	return 0;
    75f6:	2300      	movs	r3, #0
}
    75f8:	0018      	movs	r0, r3
    75fa:	46bd      	mov	sp, r7
    75fc:	b002      	add	sp, #8
    75fe:	bd80      	pop	{r7, pc}

00007600 <_isatty>:

extern int _isatty(int file)
{
    7600:	b580      	push	{r7, lr}
    7602:	b082      	sub	sp, #8
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
	return 1;
    7608:	2301      	movs	r3, #1
}
    760a:	0018      	movs	r0, r3
    760c:	46bd      	mov	sp, r7
    760e:	b002      	add	sp, #8
    7610:	bd80      	pop	{r7, pc}

00007612 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    7612:	b580      	push	{r7, lr}
    7614:	b084      	sub	sp, #16
    7616:	af00      	add	r7, sp, #0
    7618:	60f8      	str	r0, [r7, #12]
    761a:	60b9      	str	r1, [r7, #8]
    761c:	607a      	str	r2, [r7, #4]
	return 0;
    761e:	2300      	movs	r3, #0
}
    7620:	0018      	movs	r0, r3
    7622:	46bd      	mov	sp, r7
    7624:	b004      	add	sp, #16
    7626:	bd80      	pop	{r7, pc}

00007628 <system_pinmux_get_group_from_gpio_pin>:
{
    7628:	b580      	push	{r7, lr}
    762a:	b084      	sub	sp, #16
    762c:	af00      	add	r7, sp, #0
    762e:	0002      	movs	r2, r0
    7630:	1dfb      	adds	r3, r7, #7
    7632:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7634:	230f      	movs	r3, #15
    7636:	18fb      	adds	r3, r7, r3
    7638:	1dfa      	adds	r2, r7, #7
    763a:	7812      	ldrb	r2, [r2, #0]
    763c:	09d2      	lsrs	r2, r2, #7
    763e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7640:	230e      	movs	r3, #14
    7642:	18fb      	adds	r3, r7, r3
    7644:	1dfa      	adds	r2, r7, #7
    7646:	7812      	ldrb	r2, [r2, #0]
    7648:	0952      	lsrs	r2, r2, #5
    764a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    764c:	4b0d      	ldr	r3, [pc, #52]	; (7684 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    764e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7650:	230f      	movs	r3, #15
    7652:	18fb      	adds	r3, r7, r3
    7654:	781b      	ldrb	r3, [r3, #0]
    7656:	2b00      	cmp	r3, #0
    7658:	d10f      	bne.n	767a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    765a:	230f      	movs	r3, #15
    765c:	18fb      	adds	r3, r7, r3
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	009b      	lsls	r3, r3, #2
    7662:	2210      	movs	r2, #16
    7664:	4694      	mov	ip, r2
    7666:	44bc      	add	ip, r7
    7668:	4463      	add	r3, ip
    766a:	3b08      	subs	r3, #8
    766c:	681a      	ldr	r2, [r3, #0]
    766e:	230e      	movs	r3, #14
    7670:	18fb      	adds	r3, r7, r3
    7672:	781b      	ldrb	r3, [r3, #0]
    7674:	01db      	lsls	r3, r3, #7
    7676:	18d3      	adds	r3, r2, r3
    7678:	e000      	b.n	767c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    767a:	2300      	movs	r3, #0
}
    767c:	0018      	movs	r0, r3
    767e:	46bd      	mov	sp, r7
    7680:	b004      	add	sp, #16
    7682:	bd80      	pop	{r7, pc}
    7684:	41004400 	.word	0x41004400

00007688 <system_interrupt_enable>:
{
    7688:	b580      	push	{r7, lr}
    768a:	b082      	sub	sp, #8
    768c:	af00      	add	r7, sp, #0
    768e:	0002      	movs	r2, r0
    7690:	1dfb      	adds	r3, r7, #7
    7692:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7694:	4b06      	ldr	r3, [pc, #24]	; (76b0 <system_interrupt_enable+0x28>)
    7696:	1dfa      	adds	r2, r7, #7
    7698:	7812      	ldrb	r2, [r2, #0]
    769a:	0011      	movs	r1, r2
    769c:	221f      	movs	r2, #31
    769e:	400a      	ands	r2, r1
    76a0:	2101      	movs	r1, #1
    76a2:	4091      	lsls	r1, r2
    76a4:	000a      	movs	r2, r1
    76a6:	601a      	str	r2, [r3, #0]
}
    76a8:	46c0      	nop			; (mov r8, r8)
    76aa:	46bd      	mov	sp, r7
    76ac:	b002      	add	sp, #8
    76ae:	bd80      	pop	{r7, pc}
    76b0:	e000e100 	.word	0xe000e100

000076b4 <adc_is_syncing>:
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b084      	sub	sp, #16
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	681b      	ldr	r3, [r3, #0]
    76c0:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    76c2:	68fb      	ldr	r3, [r7, #12]
    76c4:	7e5b      	ldrb	r3, [r3, #25]
    76c6:	b2db      	uxtb	r3, r3
    76c8:	b25b      	sxtb	r3, r3
    76ca:	2b00      	cmp	r3, #0
    76cc:	da01      	bge.n	76d2 <adc_is_syncing+0x1e>
		return true;
    76ce:	2301      	movs	r3, #1
    76d0:	e000      	b.n	76d4 <adc_is_syncing+0x20>
	return false;
    76d2:	2300      	movs	r3, #0
}
    76d4:	0018      	movs	r0, r3
    76d6:	46bd      	mov	sp, r7
    76d8:	b004      	add	sp, #16
    76da:	bd80      	pop	{r7, pc}

000076dc <adc_enable>:
{
    76dc:	b580      	push	{r7, lr}
    76de:	b084      	sub	sp, #16
    76e0:	af00      	add	r7, sp, #0
    76e2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	681b      	ldr	r3, [r3, #0]
    76e8:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    76ea:	46c0      	nop			; (mov r8, r8)
    76ec:	687b      	ldr	r3, [r7, #4]
    76ee:	0018      	movs	r0, r3
    76f0:	4b10      	ldr	r3, [pc, #64]	; (7734 <adc_enable+0x58>)
    76f2:	4798      	blx	r3
    76f4:	1e03      	subs	r3, r0, #0
    76f6:	d1f9      	bne.n	76ec <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    76f8:	2017      	movs	r0, #23
    76fa:	4b0f      	ldr	r3, [pc, #60]	; (7738 <adc_enable+0x5c>)
    76fc:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    76fe:	68fb      	ldr	r3, [r7, #12]
    7700:	220f      	movs	r2, #15
    7702:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    7704:	68fb      	ldr	r3, [r7, #12]
    7706:	220f      	movs	r2, #15
    7708:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    770a:	68fb      	ldr	r3, [r7, #12]
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	b2db      	uxtb	r3, r3
    7710:	2202      	movs	r2, #2
    7712:	4313      	orrs	r3, r2
    7714:	b2da      	uxtb	r2, r3
    7716:	68fb      	ldr	r3, [r7, #12]
    7718:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    771a:	46c0      	nop			; (mov r8, r8)
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	0018      	movs	r0, r3
    7720:	4b04      	ldr	r3, [pc, #16]	; (7734 <adc_enable+0x58>)
    7722:	4798      	blx	r3
    7724:	1e03      	subs	r3, r0, #0
    7726:	d1f9      	bne.n	771c <adc_enable+0x40>
	return STATUS_OK;
    7728:	2300      	movs	r3, #0
}
    772a:	0018      	movs	r0, r3
    772c:	46bd      	mov	sp, r7
    772e:	b004      	add	sp, #16
    7730:	bd80      	pop	{r7, pc}
    7732:	46c0      	nop			; (mov r8, r8)
    7734:	000076b5 	.word	0x000076b5
    7738:	00007689 	.word	0x00007689

0000773c <i2c_master_is_syncing>:
{
    773c:	b580      	push	{r7, lr}
    773e:	b084      	sub	sp, #16
    7740:	af00      	add	r7, sp, #0
    7742:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	681b      	ldr	r3, [r3, #0]
    7748:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    774a:	68fb      	ldr	r3, [r7, #12]
    774c:	69db      	ldr	r3, [r3, #28]
    774e:	2207      	movs	r2, #7
    7750:	4013      	ands	r3, r2
    7752:	1e5a      	subs	r2, r3, #1
    7754:	4193      	sbcs	r3, r2
    7756:	b2db      	uxtb	r3, r3
}
    7758:	0018      	movs	r0, r3
    775a:	46bd      	mov	sp, r7
    775c:	b004      	add	sp, #16
    775e:	bd80      	pop	{r7, pc}

00007760 <_i2c_master_wait_for_sync>:
{
    7760:	b580      	push	{r7, lr}
    7762:	b082      	sub	sp, #8
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    7768:	46c0      	nop			; (mov r8, r8)
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	0018      	movs	r0, r3
    776e:	4b04      	ldr	r3, [pc, #16]	; (7780 <_i2c_master_wait_for_sync+0x20>)
    7770:	4798      	blx	r3
    7772:	1e03      	subs	r3, r0, #0
    7774:	d1f9      	bne.n	776a <_i2c_master_wait_for_sync+0xa>
}
    7776:	46c0      	nop			; (mov r8, r8)
    7778:	46bd      	mov	sp, r7
    777a:	b002      	add	sp, #8
    777c:	bd80      	pop	{r7, pc}
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	0000773d 	.word	0x0000773d

00007784 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    7784:	b580      	push	{r7, lr}
    7786:	b082      	sub	sp, #8
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	2264      	movs	r2, #100	; 0x64
    7790:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	4a1b      	ldr	r2, [pc, #108]	; (7804 <i2c_master_get_config_defaults+0x80>)
    7796:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    7798:	687b      	ldr	r3, [r7, #4]
    779a:	2200      	movs	r2, #0
    779c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	2200      	movs	r2, #0
    77a2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	2200      	movs	r2, #0
    77a8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	2280      	movs	r2, #128	; 0x80
    77ae:	0392      	lsls	r2, r2, #14
    77b0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	2201      	movs	r2, #1
    77b6:	4252      	negs	r2, r2
    77b8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	2201      	movs	r2, #1
    77be:	4252      	negs	r2, r2
    77c0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    77c2:	687b      	ldr	r3, [r7, #4]
    77c4:	2200      	movs	r2, #0
    77c6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	2200      	movs	r2, #0
    77cc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	2224      	movs	r2, #36	; 0x24
    77d2:	2100      	movs	r1, #0
    77d4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    77d6:	687b      	ldr	r3, [r7, #4]
    77d8:	2200      	movs	r2, #0
    77da:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	222c      	movs	r2, #44	; 0x2c
    77e0:	2100      	movs	r1, #0
    77e2:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	222d      	movs	r2, #45	; 0x2d
    77e8:	2100      	movs	r1, #0
    77ea:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	222e      	movs	r2, #46	; 0x2e
    77f0:	2100      	movs	r1, #0
    77f2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	22d7      	movs	r2, #215	; 0xd7
    77f8:	861a      	strh	r2, [r3, #48]	; 0x30
}
    77fa:	46c0      	nop			; (mov r8, r8)
    77fc:	46bd      	mov	sp, r7
    77fe:	b002      	add	sp, #8
    7800:	bd80      	pop	{r7, pc}
    7802:	46c0      	nop			; (mov r8, r8)
    7804:	00000d48 	.word	0x00000d48

00007808 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    7808:	b580      	push	{r7, lr}
    780a:	b084      	sub	sp, #16
    780c:	af00      	add	r7, sp, #0
    780e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	681b      	ldr	r3, [r3, #0]
    7814:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    7816:	2300      	movs	r3, #0
    7818:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	0018      	movs	r0, r3
    781e:	4b14      	ldr	r3, [pc, #80]	; (7870 <i2c_master_enable+0x68>)
    7820:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7822:	68bb      	ldr	r3, [r7, #8]
    7824:	681b      	ldr	r3, [r3, #0]
    7826:	2202      	movs	r2, #2
    7828:	431a      	orrs	r2, r3
    782a:	68bb      	ldr	r3, [r7, #8]
    782c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    782e:	687b      	ldr	r3, [r7, #4]
    7830:	681b      	ldr	r3, [r3, #0]
    7832:	0018      	movs	r0, r3
    7834:	4b0f      	ldr	r3, [pc, #60]	; (7874 <i2c_master_enable+0x6c>)
    7836:	4798      	blx	r3
    7838:	0003      	movs	r3, r0
    783a:	0018      	movs	r0, r3
    783c:	4b0e      	ldr	r3, [pc, #56]	; (7878 <i2c_master_enable+0x70>)
    783e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    7840:	e00c      	b.n	785c <i2c_master_enable+0x54>
		timeout_counter++;
    7842:	68fb      	ldr	r3, [r7, #12]
    7844:	3301      	adds	r3, #1
    7846:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	88db      	ldrh	r3, [r3, #6]
    784c:	001a      	movs	r2, r3
    784e:	68fb      	ldr	r3, [r7, #12]
    7850:	429a      	cmp	r2, r3
    7852:	d803      	bhi.n	785c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    7854:	68bb      	ldr	r3, [r7, #8]
    7856:	2210      	movs	r2, #16
    7858:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    785a:	e006      	b.n	786a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    785c:	68bb      	ldr	r3, [r7, #8]
    785e:	8b5b      	ldrh	r3, [r3, #26]
    7860:	b29b      	uxth	r3, r3
    7862:	001a      	movs	r2, r3
    7864:	2310      	movs	r3, #16
    7866:	4013      	ands	r3, r2
    7868:	d0eb      	beq.n	7842 <i2c_master_enable+0x3a>
		}
	}
}
    786a:	46bd      	mov	sp, r7
    786c:	b004      	add	sp, #16
    786e:	bd80      	pop	{r7, pc}
    7870:	00007761 	.word	0x00007761
    7874:	00004c31 	.word	0x00004c31
    7878:	00007689 	.word	0x00007689

0000787c <port_get_group_from_gpio_pin>:
{
    787c:	b580      	push	{r7, lr}
    787e:	b082      	sub	sp, #8
    7880:	af00      	add	r7, sp, #0
    7882:	0002      	movs	r2, r0
    7884:	1dfb      	adds	r3, r7, #7
    7886:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7888:	1dfb      	adds	r3, r7, #7
    788a:	781b      	ldrb	r3, [r3, #0]
    788c:	0018      	movs	r0, r3
    788e:	4b03      	ldr	r3, [pc, #12]	; (789c <port_get_group_from_gpio_pin+0x20>)
    7890:	4798      	blx	r3
    7892:	0003      	movs	r3, r0
}
    7894:	0018      	movs	r0, r3
    7896:	46bd      	mov	sp, r7
    7898:	b002      	add	sp, #8
    789a:	bd80      	pop	{r7, pc}
    789c:	00007629 	.word	0x00007629

000078a0 <port_get_config_defaults>:
{
    78a0:	b580      	push	{r7, lr}
    78a2:	b082      	sub	sp, #8
    78a4:	af00      	add	r7, sp, #0
    78a6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	2200      	movs	r2, #0
    78ac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	2201      	movs	r2, #1
    78b2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	2200      	movs	r2, #0
    78b8:	709a      	strb	r2, [r3, #2]
}
    78ba:	46c0      	nop			; (mov r8, r8)
    78bc:	46bd      	mov	sp, r7
    78be:	b002      	add	sp, #8
    78c0:	bd80      	pop	{r7, pc}
	...

000078c4 <port_pin_set_output_level>:
{
    78c4:	b580      	push	{r7, lr}
    78c6:	b084      	sub	sp, #16
    78c8:	af00      	add	r7, sp, #0
    78ca:	0002      	movs	r2, r0
    78cc:	1dfb      	adds	r3, r7, #7
    78ce:	701a      	strb	r2, [r3, #0]
    78d0:	1dbb      	adds	r3, r7, #6
    78d2:	1c0a      	adds	r2, r1, #0
    78d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    78d6:	1dfb      	adds	r3, r7, #7
    78d8:	781b      	ldrb	r3, [r3, #0]
    78da:	0018      	movs	r0, r3
    78dc:	4b0d      	ldr	r3, [pc, #52]	; (7914 <port_pin_set_output_level+0x50>)
    78de:	4798      	blx	r3
    78e0:	0003      	movs	r3, r0
    78e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    78e4:	1dfb      	adds	r3, r7, #7
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	221f      	movs	r2, #31
    78ea:	4013      	ands	r3, r2
    78ec:	2201      	movs	r2, #1
    78ee:	409a      	lsls	r2, r3
    78f0:	0013      	movs	r3, r2
    78f2:	60bb      	str	r3, [r7, #8]
	if (level) {
    78f4:	1dbb      	adds	r3, r7, #6
    78f6:	781b      	ldrb	r3, [r3, #0]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d003      	beq.n	7904 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    78fc:	68fb      	ldr	r3, [r7, #12]
    78fe:	68ba      	ldr	r2, [r7, #8]
    7900:	619a      	str	r2, [r3, #24]
}
    7902:	e002      	b.n	790a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    7904:	68fb      	ldr	r3, [r7, #12]
    7906:	68ba      	ldr	r2, [r7, #8]
    7908:	615a      	str	r2, [r3, #20]
}
    790a:	46c0      	nop			; (mov r8, r8)
    790c:	46bd      	mov	sp, r7
    790e:	b004      	add	sp, #16
    7910:	bd80      	pop	{r7, pc}
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	0000787d 	.word	0x0000787d

00007918 <spi_is_syncing>:
{
    7918:	b580      	push	{r7, lr}
    791a:	b084      	sub	sp, #16
    791c:	af00      	add	r7, sp, #0
    791e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7920:	687b      	ldr	r3, [r7, #4]
    7922:	681b      	ldr	r3, [r3, #0]
    7924:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    7926:	68fb      	ldr	r3, [r7, #12]
    7928:	69db      	ldr	r3, [r3, #28]
    792a:	1e5a      	subs	r2, r3, #1
    792c:	4193      	sbcs	r3, r2
    792e:	b2db      	uxtb	r3, r3
}
    7930:	0018      	movs	r0, r3
    7932:	46bd      	mov	sp, r7
    7934:	b004      	add	sp, #16
    7936:	bd80      	pop	{r7, pc}

00007938 <spi_get_config_defaults>:
{
    7938:	b580      	push	{r7, lr}
    793a:	b082      	sub	sp, #8
    793c:	af00      	add	r7, sp, #0
    793e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	2201      	movs	r2, #1
    7944:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	2200      	movs	r2, #0
    794a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	2200      	movs	r2, #0
    7950:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	22c0      	movs	r2, #192	; 0xc0
    7956:	0392      	lsls	r2, r2, #14
    7958:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	2200      	movs	r2, #0
    795e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	2200      	movs	r2, #0
    7964:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	2201      	movs	r2, #1
    796a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	2201      	movs	r2, #1
    7970:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	2200      	movs	r2, #0
    7976:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7978:	687b      	ldr	r3, [r7, #4]
    797a:	2224      	movs	r2, #36	; 0x24
    797c:	2100      	movs	r1, #0
    797e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	3318      	adds	r3, #24
    7984:	220c      	movs	r2, #12
    7986:	2100      	movs	r1, #0
    7988:	0018      	movs	r0, r3
    798a:	4b0a      	ldr	r3, [pc, #40]	; (79b4 <spi_get_config_defaults+0x7c>)
    798c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    798e:	687b      	ldr	r3, [r7, #4]
    7990:	4a09      	ldr	r2, [pc, #36]	; (79b8 <spi_get_config_defaults+0x80>)
    7992:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	2200      	movs	r2, #0
    7998:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	2200      	movs	r2, #0
    799e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    79a0:	687b      	ldr	r3, [r7, #4]
    79a2:	2200      	movs	r2, #0
    79a4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	2200      	movs	r2, #0
    79aa:	635a      	str	r2, [r3, #52]	; 0x34
};
    79ac:	46c0      	nop			; (mov r8, r8)
    79ae:	46bd      	mov	sp, r7
    79b0:	b002      	add	sp, #8
    79b2:	bd80      	pop	{r7, pc}
    79b4:	00009c73 	.word	0x00009c73
    79b8:	000186a0 	.word	0x000186a0

000079bc <spi_enable>:
{
    79bc:	b580      	push	{r7, lr}
    79be:	b084      	sub	sp, #16
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	681b      	ldr	r3, [r3, #0]
    79c8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	681b      	ldr	r3, [r3, #0]
    79ce:	0018      	movs	r0, r3
    79d0:	4b0b      	ldr	r3, [pc, #44]	; (7a00 <spi_enable+0x44>)
    79d2:	4798      	blx	r3
    79d4:	0003      	movs	r3, r0
    79d6:	0018      	movs	r0, r3
    79d8:	4b0a      	ldr	r3, [pc, #40]	; (7a04 <spi_enable+0x48>)
    79da:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    79dc:	46c0      	nop			; (mov r8, r8)
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	0018      	movs	r0, r3
    79e2:	4b09      	ldr	r3, [pc, #36]	; (7a08 <spi_enable+0x4c>)
    79e4:	4798      	blx	r3
    79e6:	1e03      	subs	r3, r0, #0
    79e8:	d1f9      	bne.n	79de <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    79ea:	68fb      	ldr	r3, [r7, #12]
    79ec:	681b      	ldr	r3, [r3, #0]
    79ee:	2202      	movs	r2, #2
    79f0:	431a      	orrs	r2, r3
    79f2:	68fb      	ldr	r3, [r7, #12]
    79f4:	601a      	str	r2, [r3, #0]
}
    79f6:	46c0      	nop			; (mov r8, r8)
    79f8:	46bd      	mov	sp, r7
    79fa:	b004      	add	sp, #16
    79fc:	bd80      	pop	{r7, pc}
    79fe:	46c0      	nop			; (mov r8, r8)
    7a00:	00004c31 	.word	0x00004c31
    7a04:	00007689 	.word	0x00007689
    7a08:	00007919 	.word	0x00007919

00007a0c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    7a0c:	b580      	push	{r7, lr}
    7a0e:	b086      	sub	sp, #24
    7a10:	af00      	add	r7, sp, #0
    7a12:	60f8      	str	r0, [r7, #12]
    7a14:	60b9      	str	r1, [r7, #8]
    7a16:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	781a      	ldrb	r2, [r3, #0]
    7a1c:	68fb      	ldr	r3, [r7, #12]
    7a1e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	785a      	ldrb	r2, [r3, #1]
    7a24:	68fb      	ldr	r3, [r7, #12]
    7a26:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    7a28:	68fb      	ldr	r3, [r7, #12]
    7a2a:	68ba      	ldr	r2, [r7, #8]
    7a2c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    7a2e:	2314      	movs	r3, #20
    7a30:	18fb      	adds	r3, r7, r3
    7a32:	0018      	movs	r0, r3
    7a34:	4b0c      	ldr	r3, [pc, #48]	; (7a68 <at25dfx_chip_init+0x5c>)
    7a36:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    7a38:	2314      	movs	r3, #20
    7a3a:	18fb      	adds	r3, r7, r3
    7a3c:	2201      	movs	r2, #1
    7a3e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    7a40:	68fb      	ldr	r3, [r7, #12]
    7a42:	795b      	ldrb	r3, [r3, #5]
    7a44:	2214      	movs	r2, #20
    7a46:	18ba      	adds	r2, r7, r2
    7a48:	0011      	movs	r1, r2
    7a4a:	0018      	movs	r0, r3
    7a4c:	4b07      	ldr	r3, [pc, #28]	; (7a6c <at25dfx_chip_init+0x60>)
    7a4e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    7a50:	68fb      	ldr	r3, [r7, #12]
    7a52:	795b      	ldrb	r3, [r3, #5]
    7a54:	2101      	movs	r1, #1
    7a56:	0018      	movs	r0, r3
    7a58:	4b05      	ldr	r3, [pc, #20]	; (7a70 <at25dfx_chip_init+0x64>)
    7a5a:	4798      	blx	r3

	return STATUS_OK;
    7a5c:	2300      	movs	r3, #0
}
    7a5e:	0018      	movs	r0, r3
    7a60:	46bd      	mov	sp, r7
    7a62:	b006      	add	sp, #24
    7a64:	bd80      	pop	{r7, pc}
    7a66:	46c0      	nop			; (mov r8, r8)
    7a68:	000078a1 	.word	0x000078a1
    7a6c:	00004585 	.word	0x00004585
    7a70:	000078c5 	.word	0x000078c5

00007a74 <usart_is_syncing>:
{
    7a74:	b580      	push	{r7, lr}
    7a76:	b084      	sub	sp, #16
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a7c:	687b      	ldr	r3, [r7, #4]
    7a7e:	681b      	ldr	r3, [r3, #0]
    7a80:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    7a82:	68fb      	ldr	r3, [r7, #12]
    7a84:	69db      	ldr	r3, [r3, #28]
    7a86:	1e5a      	subs	r2, r3, #1
    7a88:	4193      	sbcs	r3, r2
    7a8a:	b2db      	uxtb	r3, r3
}
    7a8c:	0018      	movs	r0, r3
    7a8e:	46bd      	mov	sp, r7
    7a90:	b004      	add	sp, #16
    7a92:	bd80      	pop	{r7, pc}

00007a94 <_usart_wait_for_sync>:
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b082      	sub	sp, #8
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    7a9c:	46c0      	nop			; (mov r8, r8)
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	0018      	movs	r0, r3
    7aa2:	4b04      	ldr	r3, [pc, #16]	; (7ab4 <_usart_wait_for_sync+0x20>)
    7aa4:	4798      	blx	r3
    7aa6:	1e03      	subs	r3, r0, #0
    7aa8:	d1f9      	bne.n	7a9e <_usart_wait_for_sync+0xa>
}
    7aaa:	46c0      	nop			; (mov r8, r8)
    7aac:	46bd      	mov	sp, r7
    7aae:	b002      	add	sp, #8
    7ab0:	bd80      	pop	{r7, pc}
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	00007a75 	.word	0x00007a75

00007ab8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    7ab8:	b580      	push	{r7, lr}
    7aba:	b082      	sub	sp, #8
    7abc:	af00      	add	r7, sp, #0
    7abe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	2280      	movs	r2, #128	; 0x80
    7ac4:	05d2      	lsls	r2, r2, #23
    7ac6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	2200      	movs	r2, #0
    7acc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	22ff      	movs	r2, #255	; 0xff
    7ad2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    7ad4:	687b      	ldr	r3, [r7, #4]
    7ad6:	2200      	movs	r2, #0
    7ad8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	2200      	movs	r2, #0
    7ade:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    7ae0:	687b      	ldr	r3, [r7, #4]
    7ae2:	2296      	movs	r2, #150	; 0x96
    7ae4:	0192      	lsls	r2, r2, #6
    7ae6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	2224      	movs	r2, #36	; 0x24
    7aec:	2101      	movs	r1, #1
    7aee:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    7af0:	687b      	ldr	r3, [r7, #4]
    7af2:	2225      	movs	r2, #37	; 0x25
    7af4:	2101      	movs	r1, #1
    7af6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	2226      	movs	r2, #38	; 0x26
    7afc:	2100      	movs	r1, #0
    7afe:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    7b00:	687b      	ldr	r3, [r7, #4]
    7b02:	2227      	movs	r2, #39	; 0x27
    7b04:	2100      	movs	r1, #0
    7b06:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	2200      	movs	r2, #0
    7b0c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	2288      	movs	r2, #136	; 0x88
    7b12:	0352      	lsls	r2, r2, #13
    7b14:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	222c      	movs	r2, #44	; 0x2c
    7b1a:	2100      	movs	r1, #0
    7b1c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	222d      	movs	r2, #45	; 0x2d
    7b22:	2100      	movs	r1, #0
    7b24:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	2200      	movs	r2, #0
    7b2a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	2200      	movs	r2, #0
    7b30:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	2200      	movs	r2, #0
    7b36:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	2200      	movs	r2, #0
    7b3c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	2200      	movs	r2, #0
    7b42:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	2200      	movs	r2, #0
    7b48:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	2200      	movs	r2, #0
    7b4e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7b50:	687b      	ldr	r3, [r7, #4]
    7b52:	2200      	movs	r2, #0
    7b54:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	2200      	movs	r2, #0
    7b5a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	2200      	movs	r2, #0
    7b60:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	2213      	movs	r2, #19
    7b66:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	2200      	movs	r2, #0
    7b6c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    7b6e:	46c0      	nop			; (mov r8, r8)
    7b70:	46bd      	mov	sp, r7
    7b72:	b002      	add	sp, #8
    7b74:	bd80      	pop	{r7, pc}
	...

00007b78 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    7b78:	b580      	push	{r7, lr}
    7b7a:	b084      	sub	sp, #16
    7b7c:	af00      	add	r7, sp, #0
    7b7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	681b      	ldr	r3, [r3, #0]
    7b84:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	681b      	ldr	r3, [r3, #0]
    7b8a:	0018      	movs	r0, r3
    7b8c:	4b09      	ldr	r3, [pc, #36]	; (7bb4 <usart_enable+0x3c>)
    7b8e:	4798      	blx	r3
    7b90:	0003      	movs	r3, r0
    7b92:	0018      	movs	r0, r3
    7b94:	4b08      	ldr	r3, [pc, #32]	; (7bb8 <usart_enable+0x40>)
    7b96:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	0018      	movs	r0, r3
    7b9c:	4b07      	ldr	r3, [pc, #28]	; (7bbc <usart_enable+0x44>)
    7b9e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7ba0:	68fb      	ldr	r3, [r7, #12]
    7ba2:	681b      	ldr	r3, [r3, #0]
    7ba4:	2202      	movs	r2, #2
    7ba6:	431a      	orrs	r2, r3
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	601a      	str	r2, [r3, #0]
}
    7bac:	46c0      	nop			; (mov r8, r8)
    7bae:	46bd      	mov	sp, r7
    7bb0:	b004      	add	sp, #16
    7bb2:	bd80      	pop	{r7, pc}
    7bb4:	00004c31 	.word	0x00004c31
    7bb8:	00007689 	.word	0x00007689
    7bbc:	00007a95 	.word	0x00007a95

00007bc0 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7bc0:	b580      	push	{r7, lr}
    7bc2:	b084      	sub	sp, #16
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	60f8      	str	r0, [r7, #12]
    7bc8:	60b9      	str	r1, [r7, #8]
    7bca:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7bcc:	687a      	ldr	r2, [r7, #4]
    7bce:	68b9      	ldr	r1, [r7, #8]
    7bd0:	68fb      	ldr	r3, [r7, #12]
    7bd2:	0018      	movs	r0, r3
    7bd4:	4b05      	ldr	r3, [pc, #20]	; (7bec <usart_serial_init+0x2c>)
    7bd6:	4798      	blx	r3
    7bd8:	1e03      	subs	r3, r0, #0
    7bda:	d101      	bne.n	7be0 <usart_serial_init+0x20>
		return true;
    7bdc:	2301      	movs	r3, #1
    7bde:	e000      	b.n	7be2 <usart_serial_init+0x22>
	}
	else {
		return false;
    7be0:	2300      	movs	r3, #0
	}
}
    7be2:	0018      	movs	r0, r3
    7be4:	46bd      	mov	sp, r7
    7be6:	b004      	add	sp, #16
    7be8:	bd80      	pop	{r7, pc}
    7bea:	46c0      	nop			; (mov r8, r8)
    7bec:	00005cdd 	.word	0x00005cdd

00007bf0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	b082      	sub	sp, #8
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
    7bf8:	000a      	movs	r2, r1
    7bfa:	1cfb      	adds	r3, r7, #3
    7bfc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    7bfe:	46c0      	nop			; (mov r8, r8)
    7c00:	1cfb      	adds	r3, r7, #3
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	b29a      	uxth	r2, r3
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	0011      	movs	r1, r2
    7c0a:	0018      	movs	r0, r3
    7c0c:	4b04      	ldr	r3, [pc, #16]	; (7c20 <usart_serial_putchar+0x30>)
    7c0e:	4798      	blx	r3
    7c10:	1e03      	subs	r3, r0, #0
    7c12:	d1f5      	bne.n	7c00 <usart_serial_putchar+0x10>

	return STATUS_OK;
    7c14:	2300      	movs	r3, #0
}
    7c16:	0018      	movs	r0, r3
    7c18:	46bd      	mov	sp, r7
    7c1a:	b002      	add	sp, #8
    7c1c:	bd80      	pop	{r7, pc}
    7c1e:	46c0      	nop			; (mov r8, r8)
    7c20:	00005f51 	.word	0x00005f51

00007c24 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7c24:	b580      	push	{r7, lr}
    7c26:	b084      	sub	sp, #16
    7c28:	af00      	add	r7, sp, #0
    7c2a:	6078      	str	r0, [r7, #4]
    7c2c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    7c2e:	230e      	movs	r3, #14
    7c30:	18fb      	adds	r3, r7, r3
    7c32:	2200      	movs	r2, #0
    7c34:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7c36:	46c0      	nop			; (mov r8, r8)
    7c38:	230e      	movs	r3, #14
    7c3a:	18fa      	adds	r2, r7, r3
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	0011      	movs	r1, r2
    7c40:	0018      	movs	r0, r3
    7c42:	4b07      	ldr	r3, [pc, #28]	; (7c60 <usart_serial_getchar+0x3c>)
    7c44:	4798      	blx	r3
    7c46:	1e03      	subs	r3, r0, #0
    7c48:	d1f6      	bne.n	7c38 <usart_serial_getchar+0x14>

	*c = temp;
    7c4a:	230e      	movs	r3, #14
    7c4c:	18fb      	adds	r3, r7, r3
    7c4e:	881b      	ldrh	r3, [r3, #0]
    7c50:	b2da      	uxtb	r2, r3
    7c52:	683b      	ldr	r3, [r7, #0]
    7c54:	701a      	strb	r2, [r3, #0]
}
    7c56:	46c0      	nop			; (mov r8, r8)
    7c58:	46bd      	mov	sp, r7
    7c5a:	b004      	add	sp, #16
    7c5c:	bd80      	pop	{r7, pc}
    7c5e:	46c0      	nop			; (mov r8, r8)
    7c60:	00005fb5 	.word	0x00005fb5

00007c64 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b084      	sub	sp, #16
    7c68:	af00      	add	r7, sp, #0
    7c6a:	60f8      	str	r0, [r7, #12]
    7c6c:	60b9      	str	r1, [r7, #8]
    7c6e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    7c70:	4b10      	ldr	r3, [pc, #64]	; (7cb4 <stdio_serial_init+0x50>)
    7c72:	68fa      	ldr	r2, [r7, #12]
    7c74:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7c76:	4b10      	ldr	r3, [pc, #64]	; (7cb8 <stdio_serial_init+0x54>)
    7c78:	4a10      	ldr	r2, [pc, #64]	; (7cbc <stdio_serial_init+0x58>)
    7c7a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7c7c:	4b10      	ldr	r3, [pc, #64]	; (7cc0 <stdio_serial_init+0x5c>)
    7c7e:	4a11      	ldr	r2, [pc, #68]	; (7cc4 <stdio_serial_init+0x60>)
    7c80:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    7c82:	687a      	ldr	r2, [r7, #4]
    7c84:	68b9      	ldr	r1, [r7, #8]
    7c86:	68fb      	ldr	r3, [r7, #12]
    7c88:	0018      	movs	r0, r3
    7c8a:	4b0f      	ldr	r3, [pc, #60]	; (7cc8 <stdio_serial_init+0x64>)
    7c8c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7c8e:	4b0f      	ldr	r3, [pc, #60]	; (7ccc <stdio_serial_init+0x68>)
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	689b      	ldr	r3, [r3, #8]
    7c94:	2100      	movs	r1, #0
    7c96:	0018      	movs	r0, r3
    7c98:	4b0d      	ldr	r3, [pc, #52]	; (7cd0 <stdio_serial_init+0x6c>)
    7c9a:	4798      	blx	r3
	setbuf(stdin, NULL);
    7c9c:	4b0b      	ldr	r3, [pc, #44]	; (7ccc <stdio_serial_init+0x68>)
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	685b      	ldr	r3, [r3, #4]
    7ca2:	2100      	movs	r1, #0
    7ca4:	0018      	movs	r0, r3
    7ca6:	4b0a      	ldr	r3, [pc, #40]	; (7cd0 <stdio_serial_init+0x6c>)
    7ca8:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    7caa:	46c0      	nop			; (mov r8, r8)
    7cac:	46bd      	mov	sp, r7
    7cae:	b004      	add	sp, #16
    7cb0:	bd80      	pop	{r7, pc}
    7cb2:	46c0      	nop			; (mov r8, r8)
    7cb4:	200003fc 	.word	0x200003fc
    7cb8:	200003f8 	.word	0x200003f8
    7cbc:	00007bf1 	.word	0x00007bf1
    7cc0:	200003f4 	.word	0x200003f4
    7cc4:	00007c25 	.word	0x00007c25
    7cc8:	00007bc1 	.word	0x00007bc1
    7ccc:	20000074 	.word	0x20000074
    7cd0:	00009dc1 	.word	0x00009dc1

00007cd4 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    7cd4:	b580      	push	{r7, lr}
    7cd6:	b090      	sub	sp, #64	; 0x40
    7cd8:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    7cda:	003b      	movs	r3, r7
    7cdc:	0018      	movs	r0, r3
    7cde:	4b13      	ldr	r3, [pc, #76]	; (7d2c <configure_console+0x58>)
    7ce0:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    7ce2:	003b      	movs	r3, r7
    7ce4:	22c4      	movs	r2, #196	; 0xc4
    7ce6:	0392      	lsls	r2, r2, #14
    7ce8:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    7cea:	003b      	movs	r3, r7
    7cec:	2201      	movs	r2, #1
    7cee:	4252      	negs	r2, r2
    7cf0:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    7cf2:	003b      	movs	r3, r7
    7cf4:	2201      	movs	r2, #1
    7cf6:	4252      	negs	r2, r2
    7cf8:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    7cfa:	003b      	movs	r3, r7
    7cfc:	4a0c      	ldr	r2, [pc, #48]	; (7d30 <configure_console+0x5c>)
    7cfe:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    7d00:	003b      	movs	r3, r7
    7d02:	4a0c      	ldr	r2, [pc, #48]	; (7d34 <configure_console+0x60>)
    7d04:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    7d06:	003b      	movs	r3, r7
    7d08:	22e1      	movs	r2, #225	; 0xe1
    7d0a:	0252      	lsls	r2, r2, #9
    7d0c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    7d0e:	003a      	movs	r2, r7
    7d10:	4909      	ldr	r1, [pc, #36]	; (7d38 <configure_console+0x64>)
    7d12:	4b0a      	ldr	r3, [pc, #40]	; (7d3c <configure_console+0x68>)
    7d14:	0018      	movs	r0, r3
    7d16:	4b0a      	ldr	r3, [pc, #40]	; (7d40 <configure_console+0x6c>)
    7d18:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    7d1a:	4b08      	ldr	r3, [pc, #32]	; (7d3c <configure_console+0x68>)
    7d1c:	0018      	movs	r0, r3
    7d1e:	4b09      	ldr	r3, [pc, #36]	; (7d44 <configure_console+0x70>)
    7d20:	4798      	blx	r3
}
    7d22:	46c0      	nop			; (mov r8, r8)
    7d24:	46bd      	mov	sp, r7
    7d26:	b010      	add	sp, #64	; 0x40
    7d28:	bd80      	pop	{r7, pc}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	00007ab9 	.word	0x00007ab9
    7d30:	002a0003 	.word	0x002a0003
    7d34:	002b0003 	.word	0x002b0003
    7d38:	42001800 	.word	0x42001800
    7d3c:	200002ac 	.word	0x200002ac
    7d40:	00007c65 	.word	0x00007c65
    7d44:	00007b79 	.word	0x00007b79

00007d48 <configure_gpio>:

static void configure_gpio(void)
{
    7d48:	b580      	push	{r7, lr}
    7d4a:	b082      	sub	sp, #8
    7d4c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    7d4e:	1d3b      	adds	r3, r7, #4
    7d50:	0018      	movs	r0, r3
    7d52:	4b07      	ldr	r3, [pc, #28]	; (7d70 <configure_gpio+0x28>)
    7d54:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    7d56:	1d3b      	adds	r3, r7, #4
    7d58:	2201      	movs	r2, #1
    7d5a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    7d5c:	1d3b      	adds	r3, r7, #4
    7d5e:	0019      	movs	r1, r3
    7d60:	2022      	movs	r0, #34	; 0x22
    7d62:	4b04      	ldr	r3, [pc, #16]	; (7d74 <configure_gpio+0x2c>)
    7d64:	4798      	blx	r3
}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	46bd      	mov	sp, r7
    7d6a:	b002      	add	sp, #8
    7d6c:	bd80      	pop	{r7, pc}
    7d6e:	46c0      	nop			; (mov r8, r8)
    7d70:	000078a1 	.word	0x000078a1
    7d74:	00004585 	.word	0x00004585

00007d78 <configure_i2c>:

static void configure_i2c(void)
{
    7d78:	b580      	push	{r7, lr}
    7d7a:	b08e      	sub	sp, #56	; 0x38
    7d7c:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    7d7e:	1d3b      	adds	r3, r7, #4
    7d80:	0018      	movs	r0, r3
    7d82:	4b10      	ldr	r3, [pc, #64]	; (7dc4 <configure_i2c+0x4c>)
    7d84:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
    7d86:	1d3b      	adds	r3, r7, #4
    7d88:	2201      	movs	r2, #1
    7d8a:	4252      	negs	r2, r2
    7d8c:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0       = PINMUX_PA08D_SERCOM2_PAD0;
    7d8e:	1d3b      	adds	r3, r7, #4
    7d90:	4a0d      	ldr	r2, [pc, #52]	; (7dc8 <configure_i2c+0x50>)
    7d92:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09D_SERCOM2_PAD1;
    7d94:	1d3b      	adds	r3, r7, #4
    7d96:	4a0d      	ldr	r2, [pc, #52]	; (7dcc <configure_i2c+0x54>)
    7d98:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
    7d9a:	1d3b      	adds	r3, r7, #4
    7d9c:	2200      	movs	r2, #0
    7d9e:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master) != STATUS_OK);
    7da0:	46c0      	nop			; (mov r8, r8)
    7da2:	1d3a      	adds	r2, r7, #4
    7da4:	490a      	ldr	r1, [pc, #40]	; (7dd0 <configure_i2c+0x58>)
    7da6:	4b0b      	ldr	r3, [pc, #44]	; (7dd4 <configure_i2c+0x5c>)
    7da8:	0018      	movs	r0, r3
    7daa:	4b0b      	ldr	r3, [pc, #44]	; (7dd8 <configure_i2c+0x60>)
    7dac:	4798      	blx	r3
    7dae:	1e03      	subs	r3, r0, #0
    7db0:	d1f7      	bne.n	7da2 <configure_i2c+0x2a>
	i2c_master_enable(&i2c_master_instance);
    7db2:	4b08      	ldr	r3, [pc, #32]	; (7dd4 <configure_i2c+0x5c>)
    7db4:	0018      	movs	r0, r3
    7db6:	4b09      	ldr	r3, [pc, #36]	; (7ddc <configure_i2c+0x64>)
    7db8:	4798      	blx	r3
}
    7dba:	46c0      	nop			; (mov r8, r8)
    7dbc:	46bd      	mov	sp, r7
    7dbe:	b00e      	add	sp, #56	; 0x38
    7dc0:	bd80      	pop	{r7, pc}
    7dc2:	46c0      	nop			; (mov r8, r8)
    7dc4:	00007785 	.word	0x00007785
    7dc8:	00080003 	.word	0x00080003
    7dcc:	00090003 	.word	0x00090003
    7dd0:	42001000 	.word	0x42001000
    7dd4:	20000408 	.word	0x20000408
    7dd8:	00001f4d 	.word	0x00001f4d
    7ddc:	00007809 	.word	0x00007809

00007de0 <configure_adc>:

static void configure_adc(void)
{
    7de0:	b580      	push	{r7, lr}
    7de2:	b08c      	sub	sp, #48	; 0x30
    7de4:	af00      	add	r7, sp, #0
	struct adc_config config;
	
	adc_get_config_defaults(&config);
    7de6:	003b      	movs	r3, r7
    7de8:	0018      	movs	r0, r3
    7dea:	4b0e      	ldr	r3, [pc, #56]	; (7e24 <configure_adc+0x44>)
    7dec:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    7dee:	003b      	movs	r3, r7
    7df0:	2201      	movs	r2, #1
    7df2:	701a      	strb	r2, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    7df4:	003b      	movs	r3, r7
    7df6:	2202      	movs	r2, #2
    7df8:	705a      	strb	r2, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    7dfa:	003b      	movs	r3, r7
    7dfc:	2280      	movs	r2, #128	; 0x80
    7dfe:	0092      	lsls	r2, r2, #2
    7e00:	805a      	strh	r2, [r3, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    7e02:	003b      	movs	r3, r7
    7e04:	2200      	movs	r2, #0
    7e06:	711a      	strb	r2, [r3, #4]
	adc_init(&adc_inst, ADC, &config);
    7e08:	003a      	movs	r2, r7
    7e0a:	4907      	ldr	r1, [pc, #28]	; (7e28 <configure_adc+0x48>)
    7e0c:	4b07      	ldr	r3, [pc, #28]	; (7e2c <configure_adc+0x4c>)
    7e0e:	0018      	movs	r0, r3
    7e10:	4b07      	ldr	r3, [pc, #28]	; (7e30 <configure_adc+0x50>)
    7e12:	4798      	blx	r3
	adc_enable(&adc_inst);
    7e14:	4b05      	ldr	r3, [pc, #20]	; (7e2c <configure_adc+0x4c>)
    7e16:	0018      	movs	r0, r3
    7e18:	4b06      	ldr	r3, [pc, #24]	; (7e34 <configure_adc+0x54>)
    7e1a:	4798      	blx	r3
}
    7e1c:	46c0      	nop			; (mov r8, r8)
    7e1e:	46bd      	mov	sp, r7
    7e20:	b00c      	add	sp, #48	; 0x30
    7e22:	bd80      	pop	{r7, pc}
    7e24:	00001119 	.word	0x00001119
    7e28:	42004000 	.word	0x42004000
    7e2c:	2000046c 	.word	0x2000046c
    7e30:	00001769 	.word	0x00001769
    7e34:	000076dd 	.word	0x000076dd

00007e38 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    7e38:	b590      	push	{r4, r7, lr}
    7e3a:	b091      	sub	sp, #68	; 0x44
    7e3c:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    7e3e:	1d3b      	adds	r3, r7, #4
    7e40:	0018      	movs	r0, r3
    7e42:	4b1d      	ldr	r3, [pc, #116]	; (7eb8 <at25dfx_init+0x80>)
    7e44:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    7e46:	1d3b      	adds	r3, r7, #4
    7e48:	4a1c      	ldr	r2, [pc, #112]	; (7ebc <at25dfx_init+0x84>)
    7e4a:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    7e4c:	1d3b      	adds	r3, r7, #4
    7e4e:	2280      	movs	r2, #128	; 0x80
    7e50:	0252      	lsls	r2, r2, #9
    7e52:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    7e54:	1d3b      	adds	r3, r7, #4
    7e56:	4a1a      	ldr	r2, [pc, #104]	; (7ec0 <at25dfx_init+0x88>)
    7e58:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    7e5a:	1d3b      	adds	r3, r7, #4
    7e5c:	2201      	movs	r2, #1
    7e5e:	4252      	negs	r2, r2
    7e60:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    7e62:	1d3b      	adds	r3, r7, #4
    7e64:	4a17      	ldr	r2, [pc, #92]	; (7ec4 <at25dfx_init+0x8c>)
    7e66:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    7e68:	1d3b      	adds	r3, r7, #4
    7e6a:	4a17      	ldr	r2, [pc, #92]	; (7ec8 <at25dfx_init+0x90>)
    7e6c:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    7e6e:	233f      	movs	r3, #63	; 0x3f
    7e70:	18fc      	adds	r4, r7, r3
    7e72:	1d3a      	adds	r2, r7, #4
    7e74:	4915      	ldr	r1, [pc, #84]	; (7ecc <at25dfx_init+0x94>)
    7e76:	4b16      	ldr	r3, [pc, #88]	; (7ed0 <at25dfx_init+0x98>)
    7e78:	0018      	movs	r0, r3
    7e7a:	4b16      	ldr	r3, [pc, #88]	; (7ed4 <at25dfx_init+0x9c>)
    7e7c:	4798      	blx	r3
    7e7e:	0003      	movs	r3, r0
    7e80:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    7e82:	4b13      	ldr	r3, [pc, #76]	; (7ed0 <at25dfx_init+0x98>)
    7e84:	0018      	movs	r0, r3
    7e86:	4b14      	ldr	r3, [pc, #80]	; (7ed8 <at25dfx_init+0xa0>)
    7e88:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    7e8a:	233c      	movs	r3, #60	; 0x3c
    7e8c:	18fb      	adds	r3, r7, r3
    7e8e:	2204      	movs	r2, #4
    7e90:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PINMUX_PA17C_SERCOM1_PAD1; // AT25DFX_CS;
    7e92:	233c      	movs	r3, #60	; 0x3c
    7e94:	18fb      	adds	r3, r7, r3
    7e96:	2202      	movs	r2, #2
    7e98:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    7e9a:	233f      	movs	r3, #63	; 0x3f
    7e9c:	18fc      	adds	r4, r7, r3
    7e9e:	233c      	movs	r3, #60	; 0x3c
    7ea0:	18fa      	adds	r2, r7, r3
    7ea2:	490b      	ldr	r1, [pc, #44]	; (7ed0 <at25dfx_init+0x98>)
    7ea4:	4b0d      	ldr	r3, [pc, #52]	; (7edc <at25dfx_init+0xa4>)
    7ea6:	0018      	movs	r0, r3
    7ea8:	4b0d      	ldr	r3, [pc, #52]	; (7ee0 <at25dfx_init+0xa8>)
    7eaa:	4798      	blx	r3
    7eac:	0003      	movs	r3, r0
    7eae:	7023      	strb	r3, [r4, #0]
}
    7eb0:	46c0      	nop			; (mov r8, r8)
    7eb2:	46bd      	mov	sp, r7
    7eb4:	b011      	add	sp, #68	; 0x44
    7eb6:	bd90      	pop	{r4, r7, pc}
    7eb8:	00007939 	.word	0x00007939
    7ebc:	0001d4c0 	.word	0x0001d4c0
    7ec0:	00100002 	.word	0x00100002
    7ec4:	00120002 	.word	0x00120002
    7ec8:	00130002 	.word	0x00130002
    7ecc:	42000c00 	.word	0x42000c00
    7ed0:	20000430 	.word	0x20000430
    7ed4:	00005119 	.word	0x00005119
    7ed8:	000079bd 	.word	0x000079bd
    7edc:	20000400 	.word	0x20000400
    7ee0:	00007a0d 	.word	0x00007a0d

00007ee4 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    7ee4:	b590      	push	{r4, r7, lr}
    7ee6:	b0c7      	sub	sp, #284	; 0x11c
    7ee8:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    7eea:	4b2b      	ldr	r3, [pc, #172]	; (7f98 <main+0xb4>)
    7eec:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    7eee:	4b2b      	ldr	r3, [pc, #172]	; (7f9c <main+0xb8>)
    7ef0:	4798      	blx	r3
	printf(STRING_HEADER);
    7ef2:	4b2b      	ldr	r3, [pc, #172]	; (7fa0 <main+0xbc>)
    7ef4:	0018      	movs	r0, r3
    7ef6:	4b2b      	ldr	r3, [pc, #172]	; (7fa4 <main+0xc0>)
    7ef8:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    7efa:	4b2b      	ldr	r3, [pc, #172]	; (7fa8 <main+0xc4>)
    7efc:	4798      	blx	r3
	
	/* Init the GPIO & ADC */
	configure_gpio();
    7efe:	4b2b      	ldr	r3, [pc, #172]	; (7fac <main+0xc8>)
    7f00:	4798      	blx	r3
	configure_adc();
    7f02:	4b2b      	ldr	r3, [pc, #172]	; (7fb0 <main+0xcc>)
    7f04:	4798      	blx	r3
	configure_i2c();
    7f06:	4b2b      	ldr	r3, [pc, #172]	; (7fb4 <main+0xd0>)
    7f08:	4798      	blx	r3
	
	at25dfx_init();
    7f0a:	4b2b      	ldr	r3, [pc, #172]	; (7fb8 <main+0xd4>)
    7f0c:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
    7f0e:	4b2b      	ldr	r3, [pc, #172]	; (7fbc <main+0xd8>)
    7f10:	0018      	movs	r0, r3
    7f12:	4b2b      	ldr	r3, [pc, #172]	; (7fc0 <main+0xdc>)
    7f14:	4798      	blx	r3
			
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    7f16:	4b29      	ldr	r3, [pc, #164]	; (7fbc <main+0xd8>)
    7f18:	0018      	movs	r0, r3
    7f1a:	4b2a      	ldr	r3, [pc, #168]	; (7fc4 <main+0xe0>)
    7f1c:	4798      	blx	r3
    7f1e:	1e03      	subs	r3, r0, #0
    7f20:	d000      	beq.n	7f24 <main+0x40>
		// Handle missing or non-responsive device
		while(1) { }
    7f22:	e7fe      	b.n	7f22 <main+0x3e>
	}
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    7f24:	4a28      	ldr	r2, [pc, #160]	; (7fc8 <main+0xe4>)
    7f26:	4825      	ldr	r0, [pc, #148]	; (7fbc <main+0xd8>)
    7f28:	230a      	movs	r3, #10
    7f2a:	2100      	movs	r1, #0
    7f2c:	4c27      	ldr	r4, [pc, #156]	; (7fcc <main+0xe8>)
    7f2e:	47a0      	blx	r4
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    7f30:	2380      	movs	r3, #128	; 0x80
    7f32:	0259      	lsls	r1, r3, #9
    7f34:	4b21      	ldr	r3, [pc, #132]	; (7fbc <main+0xd8>)
    7f36:	2200      	movs	r2, #0
    7f38:	0018      	movs	r0, r3
    7f3a:	4b25      	ldr	r3, [pc, #148]	; (7fd0 <main+0xec>)
    7f3c:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    7f3e:	2380      	movs	r3, #128	; 0x80
    7f40:	0259      	lsls	r1, r3, #9
    7f42:	4b1e      	ldr	r3, [pc, #120]	; (7fbc <main+0xd8>)
    7f44:	2200      	movs	r2, #0
    7f46:	0018      	movs	r0, r3
    7f48:	4b22      	ldr	r3, [pc, #136]	; (7fd4 <main+0xf0>)
    7f4a:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    7f4c:	4a22      	ldr	r2, [pc, #136]	; (7fd8 <main+0xf4>)
    7f4e:	2380      	movs	r3, #128	; 0x80
    7f50:	0259      	lsls	r1, r3, #9
    7f52:	481a      	ldr	r0, [pc, #104]	; (7fbc <main+0xd8>)
    7f54:	230a      	movs	r3, #10
    7f56:	4c21      	ldr	r4, [pc, #132]	; (7fdc <main+0xf8>)
    7f58:	47a0      	blx	r4
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    7f5a:	4b18      	ldr	r3, [pc, #96]	; (7fbc <main+0xd8>)
    7f5c:	2101      	movs	r1, #1
    7f5e:	0018      	movs	r0, r3
    7f60:	4b1f      	ldr	r3, [pc, #124]	; (7fe0 <main+0xfc>)
    7f62:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);
    7f64:	4b15      	ldr	r3, [pc, #84]	; (7fbc <main+0xd8>)
    7f66:	0018      	movs	r0, r3
    7f68:	4b1e      	ldr	r3, [pc, #120]	; (7fe4 <main+0x100>)
    7f6a:	4798      	blx	r3
	
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    7f6c:	4b1e      	ldr	r3, [pc, #120]	; (7fe8 <main+0x104>)
    7f6e:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    7f70:	4b1e      	ldr	r3, [pc, #120]	; (7fec <main+0x108>)
    7f72:	0018      	movs	r0, r3
    7f74:	4b0b      	ldr	r3, [pc, #44]	; (7fa4 <main+0xc0>)
    7f76:	4798      	blx	r3
	while (1) {
		printf("> ");
    7f78:	4b1d      	ldr	r3, [pc, #116]	; (7ff0 <main+0x10c>)
    7f7a:	0018      	movs	r0, r3
    7f7c:	4b1d      	ldr	r3, [pc, #116]	; (7ff4 <main+0x110>)
    7f7e:	4798      	blx	r3
		scanf("%[^\r\n]%*c", input);
    7f80:	003a      	movs	r2, r7
    7f82:	4b1d      	ldr	r3, [pc, #116]	; (7ff8 <main+0x114>)
    7f84:	0011      	movs	r1, r2
    7f86:	0018      	movs	r0, r3
    7f88:	4b1c      	ldr	r3, [pc, #112]	; (7ffc <main+0x118>)
    7f8a:	4798      	blx	r3
		handle_user_input(input);
    7f8c:	003b      	movs	r3, r7
    7f8e:	0018      	movs	r0, r3
    7f90:	4b1b      	ldr	r3, [pc, #108]	; (8000 <main+0x11c>)
    7f92:	4798      	blx	r3
		printf("> ");
    7f94:	e7f0      	b.n	7f78 <main+0x94>
    7f96:	46c0      	nop			; (mov r8, r8)
    7f98:	000073a1 	.word	0x000073a1
    7f9c:	00007cd5 	.word	0x00007cd5
    7fa0:	0000c1b8 	.word	0x0000c1b8
    7fa4:	00009d79 	.word	0x00009d79
    7fa8:	00003f61 	.word	0x00003f61
    7fac:	00007d49 	.word	0x00007d49
    7fb0:	00007de1 	.word	0x00007de1
    7fb4:	00007d79 	.word	0x00007d79
    7fb8:	00007e39 	.word	0x00007e39
    7fbc:	20000400 	.word	0x20000400
    7fc0:	00000f89 	.word	0x00000f89
    7fc4:	0000097d 	.word	0x0000097d
    7fc8:	200002e0 	.word	0x200002e0
    7fcc:	00000a29 	.word	0x00000a29
    7fd0:	00000e39 	.word	0x00000e39
    7fd4:	00000c89 	.word	0x00000c89
    7fd8:	20000068 	.word	0x20000068
    7fdc:	00000ae1 	.word	0x00000ae1
    7fe0:	00000d85 	.word	0x00000d85
    7fe4:	00000efd 	.word	0x00000efd
    7fe8:	00002f1d 	.word	0x00002f1d
    7fec:	0000c224 	.word	0x0000c224
    7ff0:	0000c244 	.word	0x0000c244
    7ff4:	00009c85 	.word	0x00009c85
    7ff8:	0000c248 	.word	0x0000c248
    7ffc:	00009d8d 	.word	0x00009d8d
    8000:	00003159 	.word	0x00003159

00008004 <__udivsi3>:
    8004:	2200      	movs	r2, #0
    8006:	0843      	lsrs	r3, r0, #1
    8008:	428b      	cmp	r3, r1
    800a:	d374      	bcc.n	80f6 <__udivsi3+0xf2>
    800c:	0903      	lsrs	r3, r0, #4
    800e:	428b      	cmp	r3, r1
    8010:	d35f      	bcc.n	80d2 <__udivsi3+0xce>
    8012:	0a03      	lsrs	r3, r0, #8
    8014:	428b      	cmp	r3, r1
    8016:	d344      	bcc.n	80a2 <__udivsi3+0x9e>
    8018:	0b03      	lsrs	r3, r0, #12
    801a:	428b      	cmp	r3, r1
    801c:	d328      	bcc.n	8070 <__udivsi3+0x6c>
    801e:	0c03      	lsrs	r3, r0, #16
    8020:	428b      	cmp	r3, r1
    8022:	d30d      	bcc.n	8040 <__udivsi3+0x3c>
    8024:	22ff      	movs	r2, #255	; 0xff
    8026:	0209      	lsls	r1, r1, #8
    8028:	ba12      	rev	r2, r2
    802a:	0c03      	lsrs	r3, r0, #16
    802c:	428b      	cmp	r3, r1
    802e:	d302      	bcc.n	8036 <__udivsi3+0x32>
    8030:	1212      	asrs	r2, r2, #8
    8032:	0209      	lsls	r1, r1, #8
    8034:	d065      	beq.n	8102 <__udivsi3+0xfe>
    8036:	0b03      	lsrs	r3, r0, #12
    8038:	428b      	cmp	r3, r1
    803a:	d319      	bcc.n	8070 <__udivsi3+0x6c>
    803c:	e000      	b.n	8040 <__udivsi3+0x3c>
    803e:	0a09      	lsrs	r1, r1, #8
    8040:	0bc3      	lsrs	r3, r0, #15
    8042:	428b      	cmp	r3, r1
    8044:	d301      	bcc.n	804a <__udivsi3+0x46>
    8046:	03cb      	lsls	r3, r1, #15
    8048:	1ac0      	subs	r0, r0, r3
    804a:	4152      	adcs	r2, r2
    804c:	0b83      	lsrs	r3, r0, #14
    804e:	428b      	cmp	r3, r1
    8050:	d301      	bcc.n	8056 <__udivsi3+0x52>
    8052:	038b      	lsls	r3, r1, #14
    8054:	1ac0      	subs	r0, r0, r3
    8056:	4152      	adcs	r2, r2
    8058:	0b43      	lsrs	r3, r0, #13
    805a:	428b      	cmp	r3, r1
    805c:	d301      	bcc.n	8062 <__udivsi3+0x5e>
    805e:	034b      	lsls	r3, r1, #13
    8060:	1ac0      	subs	r0, r0, r3
    8062:	4152      	adcs	r2, r2
    8064:	0b03      	lsrs	r3, r0, #12
    8066:	428b      	cmp	r3, r1
    8068:	d301      	bcc.n	806e <__udivsi3+0x6a>
    806a:	030b      	lsls	r3, r1, #12
    806c:	1ac0      	subs	r0, r0, r3
    806e:	4152      	adcs	r2, r2
    8070:	0ac3      	lsrs	r3, r0, #11
    8072:	428b      	cmp	r3, r1
    8074:	d301      	bcc.n	807a <__udivsi3+0x76>
    8076:	02cb      	lsls	r3, r1, #11
    8078:	1ac0      	subs	r0, r0, r3
    807a:	4152      	adcs	r2, r2
    807c:	0a83      	lsrs	r3, r0, #10
    807e:	428b      	cmp	r3, r1
    8080:	d301      	bcc.n	8086 <__udivsi3+0x82>
    8082:	028b      	lsls	r3, r1, #10
    8084:	1ac0      	subs	r0, r0, r3
    8086:	4152      	adcs	r2, r2
    8088:	0a43      	lsrs	r3, r0, #9
    808a:	428b      	cmp	r3, r1
    808c:	d301      	bcc.n	8092 <__udivsi3+0x8e>
    808e:	024b      	lsls	r3, r1, #9
    8090:	1ac0      	subs	r0, r0, r3
    8092:	4152      	adcs	r2, r2
    8094:	0a03      	lsrs	r3, r0, #8
    8096:	428b      	cmp	r3, r1
    8098:	d301      	bcc.n	809e <__udivsi3+0x9a>
    809a:	020b      	lsls	r3, r1, #8
    809c:	1ac0      	subs	r0, r0, r3
    809e:	4152      	adcs	r2, r2
    80a0:	d2cd      	bcs.n	803e <__udivsi3+0x3a>
    80a2:	09c3      	lsrs	r3, r0, #7
    80a4:	428b      	cmp	r3, r1
    80a6:	d301      	bcc.n	80ac <__udivsi3+0xa8>
    80a8:	01cb      	lsls	r3, r1, #7
    80aa:	1ac0      	subs	r0, r0, r3
    80ac:	4152      	adcs	r2, r2
    80ae:	0983      	lsrs	r3, r0, #6
    80b0:	428b      	cmp	r3, r1
    80b2:	d301      	bcc.n	80b8 <__udivsi3+0xb4>
    80b4:	018b      	lsls	r3, r1, #6
    80b6:	1ac0      	subs	r0, r0, r3
    80b8:	4152      	adcs	r2, r2
    80ba:	0943      	lsrs	r3, r0, #5
    80bc:	428b      	cmp	r3, r1
    80be:	d301      	bcc.n	80c4 <__udivsi3+0xc0>
    80c0:	014b      	lsls	r3, r1, #5
    80c2:	1ac0      	subs	r0, r0, r3
    80c4:	4152      	adcs	r2, r2
    80c6:	0903      	lsrs	r3, r0, #4
    80c8:	428b      	cmp	r3, r1
    80ca:	d301      	bcc.n	80d0 <__udivsi3+0xcc>
    80cc:	010b      	lsls	r3, r1, #4
    80ce:	1ac0      	subs	r0, r0, r3
    80d0:	4152      	adcs	r2, r2
    80d2:	08c3      	lsrs	r3, r0, #3
    80d4:	428b      	cmp	r3, r1
    80d6:	d301      	bcc.n	80dc <__udivsi3+0xd8>
    80d8:	00cb      	lsls	r3, r1, #3
    80da:	1ac0      	subs	r0, r0, r3
    80dc:	4152      	adcs	r2, r2
    80de:	0883      	lsrs	r3, r0, #2
    80e0:	428b      	cmp	r3, r1
    80e2:	d301      	bcc.n	80e8 <__udivsi3+0xe4>
    80e4:	008b      	lsls	r3, r1, #2
    80e6:	1ac0      	subs	r0, r0, r3
    80e8:	4152      	adcs	r2, r2
    80ea:	0843      	lsrs	r3, r0, #1
    80ec:	428b      	cmp	r3, r1
    80ee:	d301      	bcc.n	80f4 <__udivsi3+0xf0>
    80f0:	004b      	lsls	r3, r1, #1
    80f2:	1ac0      	subs	r0, r0, r3
    80f4:	4152      	adcs	r2, r2
    80f6:	1a41      	subs	r1, r0, r1
    80f8:	d200      	bcs.n	80fc <__udivsi3+0xf8>
    80fa:	4601      	mov	r1, r0
    80fc:	4152      	adcs	r2, r2
    80fe:	4610      	mov	r0, r2
    8100:	4770      	bx	lr
    8102:	e7ff      	b.n	8104 <__udivsi3+0x100>
    8104:	b501      	push	{r0, lr}
    8106:	2000      	movs	r0, #0
    8108:	f000 f8f0 	bl	82ec <__aeabi_idiv0>
    810c:	bd02      	pop	{r1, pc}
    810e:	46c0      	nop			; (mov r8, r8)

00008110 <__aeabi_uidivmod>:
    8110:	2900      	cmp	r1, #0
    8112:	d0f7      	beq.n	8104 <__udivsi3+0x100>
    8114:	e776      	b.n	8004 <__udivsi3>
    8116:	4770      	bx	lr

00008118 <__divsi3>:
    8118:	4603      	mov	r3, r0
    811a:	430b      	orrs	r3, r1
    811c:	d47f      	bmi.n	821e <__divsi3+0x106>
    811e:	2200      	movs	r2, #0
    8120:	0843      	lsrs	r3, r0, #1
    8122:	428b      	cmp	r3, r1
    8124:	d374      	bcc.n	8210 <__divsi3+0xf8>
    8126:	0903      	lsrs	r3, r0, #4
    8128:	428b      	cmp	r3, r1
    812a:	d35f      	bcc.n	81ec <__divsi3+0xd4>
    812c:	0a03      	lsrs	r3, r0, #8
    812e:	428b      	cmp	r3, r1
    8130:	d344      	bcc.n	81bc <__divsi3+0xa4>
    8132:	0b03      	lsrs	r3, r0, #12
    8134:	428b      	cmp	r3, r1
    8136:	d328      	bcc.n	818a <__divsi3+0x72>
    8138:	0c03      	lsrs	r3, r0, #16
    813a:	428b      	cmp	r3, r1
    813c:	d30d      	bcc.n	815a <__divsi3+0x42>
    813e:	22ff      	movs	r2, #255	; 0xff
    8140:	0209      	lsls	r1, r1, #8
    8142:	ba12      	rev	r2, r2
    8144:	0c03      	lsrs	r3, r0, #16
    8146:	428b      	cmp	r3, r1
    8148:	d302      	bcc.n	8150 <__divsi3+0x38>
    814a:	1212      	asrs	r2, r2, #8
    814c:	0209      	lsls	r1, r1, #8
    814e:	d065      	beq.n	821c <__divsi3+0x104>
    8150:	0b03      	lsrs	r3, r0, #12
    8152:	428b      	cmp	r3, r1
    8154:	d319      	bcc.n	818a <__divsi3+0x72>
    8156:	e000      	b.n	815a <__divsi3+0x42>
    8158:	0a09      	lsrs	r1, r1, #8
    815a:	0bc3      	lsrs	r3, r0, #15
    815c:	428b      	cmp	r3, r1
    815e:	d301      	bcc.n	8164 <__divsi3+0x4c>
    8160:	03cb      	lsls	r3, r1, #15
    8162:	1ac0      	subs	r0, r0, r3
    8164:	4152      	adcs	r2, r2
    8166:	0b83      	lsrs	r3, r0, #14
    8168:	428b      	cmp	r3, r1
    816a:	d301      	bcc.n	8170 <__divsi3+0x58>
    816c:	038b      	lsls	r3, r1, #14
    816e:	1ac0      	subs	r0, r0, r3
    8170:	4152      	adcs	r2, r2
    8172:	0b43      	lsrs	r3, r0, #13
    8174:	428b      	cmp	r3, r1
    8176:	d301      	bcc.n	817c <__divsi3+0x64>
    8178:	034b      	lsls	r3, r1, #13
    817a:	1ac0      	subs	r0, r0, r3
    817c:	4152      	adcs	r2, r2
    817e:	0b03      	lsrs	r3, r0, #12
    8180:	428b      	cmp	r3, r1
    8182:	d301      	bcc.n	8188 <__divsi3+0x70>
    8184:	030b      	lsls	r3, r1, #12
    8186:	1ac0      	subs	r0, r0, r3
    8188:	4152      	adcs	r2, r2
    818a:	0ac3      	lsrs	r3, r0, #11
    818c:	428b      	cmp	r3, r1
    818e:	d301      	bcc.n	8194 <__divsi3+0x7c>
    8190:	02cb      	lsls	r3, r1, #11
    8192:	1ac0      	subs	r0, r0, r3
    8194:	4152      	adcs	r2, r2
    8196:	0a83      	lsrs	r3, r0, #10
    8198:	428b      	cmp	r3, r1
    819a:	d301      	bcc.n	81a0 <__divsi3+0x88>
    819c:	028b      	lsls	r3, r1, #10
    819e:	1ac0      	subs	r0, r0, r3
    81a0:	4152      	adcs	r2, r2
    81a2:	0a43      	lsrs	r3, r0, #9
    81a4:	428b      	cmp	r3, r1
    81a6:	d301      	bcc.n	81ac <__divsi3+0x94>
    81a8:	024b      	lsls	r3, r1, #9
    81aa:	1ac0      	subs	r0, r0, r3
    81ac:	4152      	adcs	r2, r2
    81ae:	0a03      	lsrs	r3, r0, #8
    81b0:	428b      	cmp	r3, r1
    81b2:	d301      	bcc.n	81b8 <__divsi3+0xa0>
    81b4:	020b      	lsls	r3, r1, #8
    81b6:	1ac0      	subs	r0, r0, r3
    81b8:	4152      	adcs	r2, r2
    81ba:	d2cd      	bcs.n	8158 <__divsi3+0x40>
    81bc:	09c3      	lsrs	r3, r0, #7
    81be:	428b      	cmp	r3, r1
    81c0:	d301      	bcc.n	81c6 <__divsi3+0xae>
    81c2:	01cb      	lsls	r3, r1, #7
    81c4:	1ac0      	subs	r0, r0, r3
    81c6:	4152      	adcs	r2, r2
    81c8:	0983      	lsrs	r3, r0, #6
    81ca:	428b      	cmp	r3, r1
    81cc:	d301      	bcc.n	81d2 <__divsi3+0xba>
    81ce:	018b      	lsls	r3, r1, #6
    81d0:	1ac0      	subs	r0, r0, r3
    81d2:	4152      	adcs	r2, r2
    81d4:	0943      	lsrs	r3, r0, #5
    81d6:	428b      	cmp	r3, r1
    81d8:	d301      	bcc.n	81de <__divsi3+0xc6>
    81da:	014b      	lsls	r3, r1, #5
    81dc:	1ac0      	subs	r0, r0, r3
    81de:	4152      	adcs	r2, r2
    81e0:	0903      	lsrs	r3, r0, #4
    81e2:	428b      	cmp	r3, r1
    81e4:	d301      	bcc.n	81ea <__divsi3+0xd2>
    81e6:	010b      	lsls	r3, r1, #4
    81e8:	1ac0      	subs	r0, r0, r3
    81ea:	4152      	adcs	r2, r2
    81ec:	08c3      	lsrs	r3, r0, #3
    81ee:	428b      	cmp	r3, r1
    81f0:	d301      	bcc.n	81f6 <__divsi3+0xde>
    81f2:	00cb      	lsls	r3, r1, #3
    81f4:	1ac0      	subs	r0, r0, r3
    81f6:	4152      	adcs	r2, r2
    81f8:	0883      	lsrs	r3, r0, #2
    81fa:	428b      	cmp	r3, r1
    81fc:	d301      	bcc.n	8202 <__divsi3+0xea>
    81fe:	008b      	lsls	r3, r1, #2
    8200:	1ac0      	subs	r0, r0, r3
    8202:	4152      	adcs	r2, r2
    8204:	0843      	lsrs	r3, r0, #1
    8206:	428b      	cmp	r3, r1
    8208:	d301      	bcc.n	820e <__divsi3+0xf6>
    820a:	004b      	lsls	r3, r1, #1
    820c:	1ac0      	subs	r0, r0, r3
    820e:	4152      	adcs	r2, r2
    8210:	1a41      	subs	r1, r0, r1
    8212:	d200      	bcs.n	8216 <__divsi3+0xfe>
    8214:	4601      	mov	r1, r0
    8216:	4152      	adcs	r2, r2
    8218:	4610      	mov	r0, r2
    821a:	4770      	bx	lr
    821c:	e05d      	b.n	82da <__divsi3+0x1c2>
    821e:	0fca      	lsrs	r2, r1, #31
    8220:	d000      	beq.n	8224 <__divsi3+0x10c>
    8222:	4249      	negs	r1, r1
    8224:	1003      	asrs	r3, r0, #32
    8226:	d300      	bcc.n	822a <__divsi3+0x112>
    8228:	4240      	negs	r0, r0
    822a:	4053      	eors	r3, r2
    822c:	2200      	movs	r2, #0
    822e:	469c      	mov	ip, r3
    8230:	0903      	lsrs	r3, r0, #4
    8232:	428b      	cmp	r3, r1
    8234:	d32d      	bcc.n	8292 <__divsi3+0x17a>
    8236:	0a03      	lsrs	r3, r0, #8
    8238:	428b      	cmp	r3, r1
    823a:	d312      	bcc.n	8262 <__divsi3+0x14a>
    823c:	22fc      	movs	r2, #252	; 0xfc
    823e:	0189      	lsls	r1, r1, #6
    8240:	ba12      	rev	r2, r2
    8242:	0a03      	lsrs	r3, r0, #8
    8244:	428b      	cmp	r3, r1
    8246:	d30c      	bcc.n	8262 <__divsi3+0x14a>
    8248:	0189      	lsls	r1, r1, #6
    824a:	1192      	asrs	r2, r2, #6
    824c:	428b      	cmp	r3, r1
    824e:	d308      	bcc.n	8262 <__divsi3+0x14a>
    8250:	0189      	lsls	r1, r1, #6
    8252:	1192      	asrs	r2, r2, #6
    8254:	428b      	cmp	r3, r1
    8256:	d304      	bcc.n	8262 <__divsi3+0x14a>
    8258:	0189      	lsls	r1, r1, #6
    825a:	d03a      	beq.n	82d2 <__divsi3+0x1ba>
    825c:	1192      	asrs	r2, r2, #6
    825e:	e000      	b.n	8262 <__divsi3+0x14a>
    8260:	0989      	lsrs	r1, r1, #6
    8262:	09c3      	lsrs	r3, r0, #7
    8264:	428b      	cmp	r3, r1
    8266:	d301      	bcc.n	826c <__divsi3+0x154>
    8268:	01cb      	lsls	r3, r1, #7
    826a:	1ac0      	subs	r0, r0, r3
    826c:	4152      	adcs	r2, r2
    826e:	0983      	lsrs	r3, r0, #6
    8270:	428b      	cmp	r3, r1
    8272:	d301      	bcc.n	8278 <__divsi3+0x160>
    8274:	018b      	lsls	r3, r1, #6
    8276:	1ac0      	subs	r0, r0, r3
    8278:	4152      	adcs	r2, r2
    827a:	0943      	lsrs	r3, r0, #5
    827c:	428b      	cmp	r3, r1
    827e:	d301      	bcc.n	8284 <__divsi3+0x16c>
    8280:	014b      	lsls	r3, r1, #5
    8282:	1ac0      	subs	r0, r0, r3
    8284:	4152      	adcs	r2, r2
    8286:	0903      	lsrs	r3, r0, #4
    8288:	428b      	cmp	r3, r1
    828a:	d301      	bcc.n	8290 <__divsi3+0x178>
    828c:	010b      	lsls	r3, r1, #4
    828e:	1ac0      	subs	r0, r0, r3
    8290:	4152      	adcs	r2, r2
    8292:	08c3      	lsrs	r3, r0, #3
    8294:	428b      	cmp	r3, r1
    8296:	d301      	bcc.n	829c <__divsi3+0x184>
    8298:	00cb      	lsls	r3, r1, #3
    829a:	1ac0      	subs	r0, r0, r3
    829c:	4152      	adcs	r2, r2
    829e:	0883      	lsrs	r3, r0, #2
    82a0:	428b      	cmp	r3, r1
    82a2:	d301      	bcc.n	82a8 <__divsi3+0x190>
    82a4:	008b      	lsls	r3, r1, #2
    82a6:	1ac0      	subs	r0, r0, r3
    82a8:	4152      	adcs	r2, r2
    82aa:	d2d9      	bcs.n	8260 <__divsi3+0x148>
    82ac:	0843      	lsrs	r3, r0, #1
    82ae:	428b      	cmp	r3, r1
    82b0:	d301      	bcc.n	82b6 <__divsi3+0x19e>
    82b2:	004b      	lsls	r3, r1, #1
    82b4:	1ac0      	subs	r0, r0, r3
    82b6:	4152      	adcs	r2, r2
    82b8:	1a41      	subs	r1, r0, r1
    82ba:	d200      	bcs.n	82be <__divsi3+0x1a6>
    82bc:	4601      	mov	r1, r0
    82be:	4663      	mov	r3, ip
    82c0:	4152      	adcs	r2, r2
    82c2:	105b      	asrs	r3, r3, #1
    82c4:	4610      	mov	r0, r2
    82c6:	d301      	bcc.n	82cc <__divsi3+0x1b4>
    82c8:	4240      	negs	r0, r0
    82ca:	2b00      	cmp	r3, #0
    82cc:	d500      	bpl.n	82d0 <__divsi3+0x1b8>
    82ce:	4249      	negs	r1, r1
    82d0:	4770      	bx	lr
    82d2:	4663      	mov	r3, ip
    82d4:	105b      	asrs	r3, r3, #1
    82d6:	d300      	bcc.n	82da <__divsi3+0x1c2>
    82d8:	4240      	negs	r0, r0
    82da:	b501      	push	{r0, lr}
    82dc:	2000      	movs	r0, #0
    82de:	f000 f805 	bl	82ec <__aeabi_idiv0>
    82e2:	bd02      	pop	{r1, pc}

000082e4 <__aeabi_idivmod>:
    82e4:	2900      	cmp	r1, #0
    82e6:	d0f8      	beq.n	82da <__divsi3+0x1c2>
    82e8:	e716      	b.n	8118 <__divsi3>
    82ea:	4770      	bx	lr

000082ec <__aeabi_idiv0>:
    82ec:	4770      	bx	lr
    82ee:	46c0      	nop			; (mov r8, r8)

000082f0 <__aeabi_lmul>:
    82f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82f2:	46ce      	mov	lr, r9
    82f4:	4647      	mov	r7, r8
    82f6:	0415      	lsls	r5, r2, #16
    82f8:	0c2d      	lsrs	r5, r5, #16
    82fa:	002e      	movs	r6, r5
    82fc:	b580      	push	{r7, lr}
    82fe:	0407      	lsls	r7, r0, #16
    8300:	0c14      	lsrs	r4, r2, #16
    8302:	0c3f      	lsrs	r7, r7, #16
    8304:	4699      	mov	r9, r3
    8306:	0c03      	lsrs	r3, r0, #16
    8308:	437e      	muls	r6, r7
    830a:	435d      	muls	r5, r3
    830c:	4367      	muls	r7, r4
    830e:	4363      	muls	r3, r4
    8310:	197f      	adds	r7, r7, r5
    8312:	0c34      	lsrs	r4, r6, #16
    8314:	19e4      	adds	r4, r4, r7
    8316:	469c      	mov	ip, r3
    8318:	42a5      	cmp	r5, r4
    831a:	d903      	bls.n	8324 <__aeabi_lmul+0x34>
    831c:	2380      	movs	r3, #128	; 0x80
    831e:	025b      	lsls	r3, r3, #9
    8320:	4698      	mov	r8, r3
    8322:	44c4      	add	ip, r8
    8324:	464b      	mov	r3, r9
    8326:	4351      	muls	r1, r2
    8328:	4343      	muls	r3, r0
    832a:	0436      	lsls	r6, r6, #16
    832c:	0c36      	lsrs	r6, r6, #16
    832e:	0c25      	lsrs	r5, r4, #16
    8330:	0424      	lsls	r4, r4, #16
    8332:	4465      	add	r5, ip
    8334:	19a4      	adds	r4, r4, r6
    8336:	1859      	adds	r1, r3, r1
    8338:	1949      	adds	r1, r1, r5
    833a:	0020      	movs	r0, r4
    833c:	bc0c      	pop	{r2, r3}
    833e:	4690      	mov	r8, r2
    8340:	4699      	mov	r9, r3
    8342:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008344 <__aeabi_dadd>:
    8344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8346:	4645      	mov	r5, r8
    8348:	46de      	mov	lr, fp
    834a:	4657      	mov	r7, sl
    834c:	464e      	mov	r6, r9
    834e:	030c      	lsls	r4, r1, #12
    8350:	b5e0      	push	{r5, r6, r7, lr}
    8352:	004e      	lsls	r6, r1, #1
    8354:	0fc9      	lsrs	r1, r1, #31
    8356:	4688      	mov	r8, r1
    8358:	000d      	movs	r5, r1
    835a:	0a61      	lsrs	r1, r4, #9
    835c:	0f44      	lsrs	r4, r0, #29
    835e:	430c      	orrs	r4, r1
    8360:	00c7      	lsls	r7, r0, #3
    8362:	0319      	lsls	r1, r3, #12
    8364:	0058      	lsls	r0, r3, #1
    8366:	0fdb      	lsrs	r3, r3, #31
    8368:	469b      	mov	fp, r3
    836a:	0a4b      	lsrs	r3, r1, #9
    836c:	0f51      	lsrs	r1, r2, #29
    836e:	430b      	orrs	r3, r1
    8370:	0d76      	lsrs	r6, r6, #21
    8372:	0d40      	lsrs	r0, r0, #21
    8374:	0019      	movs	r1, r3
    8376:	00d2      	lsls	r2, r2, #3
    8378:	45d8      	cmp	r8, fp
    837a:	d100      	bne.n	837e <__aeabi_dadd+0x3a>
    837c:	e0ae      	b.n	84dc <__aeabi_dadd+0x198>
    837e:	1a35      	subs	r5, r6, r0
    8380:	2d00      	cmp	r5, #0
    8382:	dc00      	bgt.n	8386 <__aeabi_dadd+0x42>
    8384:	e0f6      	b.n	8574 <__aeabi_dadd+0x230>
    8386:	2800      	cmp	r0, #0
    8388:	d10f      	bne.n	83aa <__aeabi_dadd+0x66>
    838a:	4313      	orrs	r3, r2
    838c:	d100      	bne.n	8390 <__aeabi_dadd+0x4c>
    838e:	e0db      	b.n	8548 <__aeabi_dadd+0x204>
    8390:	1e6b      	subs	r3, r5, #1
    8392:	2b00      	cmp	r3, #0
    8394:	d000      	beq.n	8398 <__aeabi_dadd+0x54>
    8396:	e137      	b.n	8608 <__aeabi_dadd+0x2c4>
    8398:	1aba      	subs	r2, r7, r2
    839a:	4297      	cmp	r7, r2
    839c:	41bf      	sbcs	r7, r7
    839e:	1a64      	subs	r4, r4, r1
    83a0:	427f      	negs	r7, r7
    83a2:	1be4      	subs	r4, r4, r7
    83a4:	2601      	movs	r6, #1
    83a6:	0017      	movs	r7, r2
    83a8:	e024      	b.n	83f4 <__aeabi_dadd+0xb0>
    83aa:	4bc6      	ldr	r3, [pc, #792]	; (86c4 <__aeabi_dadd+0x380>)
    83ac:	429e      	cmp	r6, r3
    83ae:	d04d      	beq.n	844c <__aeabi_dadd+0x108>
    83b0:	2380      	movs	r3, #128	; 0x80
    83b2:	041b      	lsls	r3, r3, #16
    83b4:	4319      	orrs	r1, r3
    83b6:	2d38      	cmp	r5, #56	; 0x38
    83b8:	dd00      	ble.n	83bc <__aeabi_dadd+0x78>
    83ba:	e107      	b.n	85cc <__aeabi_dadd+0x288>
    83bc:	2d1f      	cmp	r5, #31
    83be:	dd00      	ble.n	83c2 <__aeabi_dadd+0x7e>
    83c0:	e138      	b.n	8634 <__aeabi_dadd+0x2f0>
    83c2:	2020      	movs	r0, #32
    83c4:	1b43      	subs	r3, r0, r5
    83c6:	469a      	mov	sl, r3
    83c8:	000b      	movs	r3, r1
    83ca:	4650      	mov	r0, sl
    83cc:	4083      	lsls	r3, r0
    83ce:	4699      	mov	r9, r3
    83d0:	0013      	movs	r3, r2
    83d2:	4648      	mov	r0, r9
    83d4:	40eb      	lsrs	r3, r5
    83d6:	4318      	orrs	r0, r3
    83d8:	0003      	movs	r3, r0
    83da:	4650      	mov	r0, sl
    83dc:	4082      	lsls	r2, r0
    83de:	1e50      	subs	r0, r2, #1
    83e0:	4182      	sbcs	r2, r0
    83e2:	40e9      	lsrs	r1, r5
    83e4:	431a      	orrs	r2, r3
    83e6:	1aba      	subs	r2, r7, r2
    83e8:	1a61      	subs	r1, r4, r1
    83ea:	4297      	cmp	r7, r2
    83ec:	41a4      	sbcs	r4, r4
    83ee:	0017      	movs	r7, r2
    83f0:	4264      	negs	r4, r4
    83f2:	1b0c      	subs	r4, r1, r4
    83f4:	0223      	lsls	r3, r4, #8
    83f6:	d562      	bpl.n	84be <__aeabi_dadd+0x17a>
    83f8:	0264      	lsls	r4, r4, #9
    83fa:	0a65      	lsrs	r5, r4, #9
    83fc:	2d00      	cmp	r5, #0
    83fe:	d100      	bne.n	8402 <__aeabi_dadd+0xbe>
    8400:	e0df      	b.n	85c2 <__aeabi_dadd+0x27e>
    8402:	0028      	movs	r0, r5
    8404:	f001 fbe4 	bl	9bd0 <__clzsi2>
    8408:	0003      	movs	r3, r0
    840a:	3b08      	subs	r3, #8
    840c:	2b1f      	cmp	r3, #31
    840e:	dd00      	ble.n	8412 <__aeabi_dadd+0xce>
    8410:	e0d2      	b.n	85b8 <__aeabi_dadd+0x274>
    8412:	2220      	movs	r2, #32
    8414:	003c      	movs	r4, r7
    8416:	1ad2      	subs	r2, r2, r3
    8418:	409d      	lsls	r5, r3
    841a:	40d4      	lsrs	r4, r2
    841c:	409f      	lsls	r7, r3
    841e:	4325      	orrs	r5, r4
    8420:	429e      	cmp	r6, r3
    8422:	dd00      	ble.n	8426 <__aeabi_dadd+0xe2>
    8424:	e0c4      	b.n	85b0 <__aeabi_dadd+0x26c>
    8426:	1b9e      	subs	r6, r3, r6
    8428:	1c73      	adds	r3, r6, #1
    842a:	2b1f      	cmp	r3, #31
    842c:	dd00      	ble.n	8430 <__aeabi_dadd+0xec>
    842e:	e0f1      	b.n	8614 <__aeabi_dadd+0x2d0>
    8430:	2220      	movs	r2, #32
    8432:	0038      	movs	r0, r7
    8434:	0029      	movs	r1, r5
    8436:	1ad2      	subs	r2, r2, r3
    8438:	40d8      	lsrs	r0, r3
    843a:	4091      	lsls	r1, r2
    843c:	4097      	lsls	r7, r2
    843e:	002c      	movs	r4, r5
    8440:	4301      	orrs	r1, r0
    8442:	1e78      	subs	r0, r7, #1
    8444:	4187      	sbcs	r7, r0
    8446:	40dc      	lsrs	r4, r3
    8448:	2600      	movs	r6, #0
    844a:	430f      	orrs	r7, r1
    844c:	077b      	lsls	r3, r7, #29
    844e:	d009      	beq.n	8464 <__aeabi_dadd+0x120>
    8450:	230f      	movs	r3, #15
    8452:	403b      	ands	r3, r7
    8454:	2b04      	cmp	r3, #4
    8456:	d005      	beq.n	8464 <__aeabi_dadd+0x120>
    8458:	1d3b      	adds	r3, r7, #4
    845a:	42bb      	cmp	r3, r7
    845c:	41bf      	sbcs	r7, r7
    845e:	427f      	negs	r7, r7
    8460:	19e4      	adds	r4, r4, r7
    8462:	001f      	movs	r7, r3
    8464:	0223      	lsls	r3, r4, #8
    8466:	d52c      	bpl.n	84c2 <__aeabi_dadd+0x17e>
    8468:	4b96      	ldr	r3, [pc, #600]	; (86c4 <__aeabi_dadd+0x380>)
    846a:	3601      	adds	r6, #1
    846c:	429e      	cmp	r6, r3
    846e:	d100      	bne.n	8472 <__aeabi_dadd+0x12e>
    8470:	e09a      	b.n	85a8 <__aeabi_dadd+0x264>
    8472:	4645      	mov	r5, r8
    8474:	4b94      	ldr	r3, [pc, #592]	; (86c8 <__aeabi_dadd+0x384>)
    8476:	08ff      	lsrs	r7, r7, #3
    8478:	401c      	ands	r4, r3
    847a:	0760      	lsls	r0, r4, #29
    847c:	0576      	lsls	r6, r6, #21
    847e:	0264      	lsls	r4, r4, #9
    8480:	4307      	orrs	r7, r0
    8482:	0b24      	lsrs	r4, r4, #12
    8484:	0d76      	lsrs	r6, r6, #21
    8486:	2100      	movs	r1, #0
    8488:	0324      	lsls	r4, r4, #12
    848a:	0b23      	lsrs	r3, r4, #12
    848c:	0d0c      	lsrs	r4, r1, #20
    848e:	4a8f      	ldr	r2, [pc, #572]	; (86cc <__aeabi_dadd+0x388>)
    8490:	0524      	lsls	r4, r4, #20
    8492:	431c      	orrs	r4, r3
    8494:	4014      	ands	r4, r2
    8496:	0533      	lsls	r3, r6, #20
    8498:	4323      	orrs	r3, r4
    849a:	005b      	lsls	r3, r3, #1
    849c:	07ed      	lsls	r5, r5, #31
    849e:	085b      	lsrs	r3, r3, #1
    84a0:	432b      	orrs	r3, r5
    84a2:	0038      	movs	r0, r7
    84a4:	0019      	movs	r1, r3
    84a6:	bc3c      	pop	{r2, r3, r4, r5}
    84a8:	4690      	mov	r8, r2
    84aa:	4699      	mov	r9, r3
    84ac:	46a2      	mov	sl, r4
    84ae:	46ab      	mov	fp, r5
    84b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84b2:	4664      	mov	r4, ip
    84b4:	4304      	orrs	r4, r0
    84b6:	d100      	bne.n	84ba <__aeabi_dadd+0x176>
    84b8:	e211      	b.n	88de <__aeabi_dadd+0x59a>
    84ba:	0004      	movs	r4, r0
    84bc:	4667      	mov	r7, ip
    84be:	077b      	lsls	r3, r7, #29
    84c0:	d1c6      	bne.n	8450 <__aeabi_dadd+0x10c>
    84c2:	4645      	mov	r5, r8
    84c4:	0760      	lsls	r0, r4, #29
    84c6:	08ff      	lsrs	r7, r7, #3
    84c8:	4307      	orrs	r7, r0
    84ca:	08e4      	lsrs	r4, r4, #3
    84cc:	4b7d      	ldr	r3, [pc, #500]	; (86c4 <__aeabi_dadd+0x380>)
    84ce:	429e      	cmp	r6, r3
    84d0:	d030      	beq.n	8534 <__aeabi_dadd+0x1f0>
    84d2:	0324      	lsls	r4, r4, #12
    84d4:	0576      	lsls	r6, r6, #21
    84d6:	0b24      	lsrs	r4, r4, #12
    84d8:	0d76      	lsrs	r6, r6, #21
    84da:	e7d4      	b.n	8486 <__aeabi_dadd+0x142>
    84dc:	1a33      	subs	r3, r6, r0
    84de:	469a      	mov	sl, r3
    84e0:	2b00      	cmp	r3, #0
    84e2:	dd78      	ble.n	85d6 <__aeabi_dadd+0x292>
    84e4:	2800      	cmp	r0, #0
    84e6:	d031      	beq.n	854c <__aeabi_dadd+0x208>
    84e8:	4876      	ldr	r0, [pc, #472]	; (86c4 <__aeabi_dadd+0x380>)
    84ea:	4286      	cmp	r6, r0
    84ec:	d0ae      	beq.n	844c <__aeabi_dadd+0x108>
    84ee:	2080      	movs	r0, #128	; 0x80
    84f0:	0400      	lsls	r0, r0, #16
    84f2:	4301      	orrs	r1, r0
    84f4:	4653      	mov	r3, sl
    84f6:	2b38      	cmp	r3, #56	; 0x38
    84f8:	dc00      	bgt.n	84fc <__aeabi_dadd+0x1b8>
    84fa:	e0e9      	b.n	86d0 <__aeabi_dadd+0x38c>
    84fc:	430a      	orrs	r2, r1
    84fe:	1e51      	subs	r1, r2, #1
    8500:	418a      	sbcs	r2, r1
    8502:	2100      	movs	r1, #0
    8504:	19d2      	adds	r2, r2, r7
    8506:	42ba      	cmp	r2, r7
    8508:	41bf      	sbcs	r7, r7
    850a:	1909      	adds	r1, r1, r4
    850c:	427c      	negs	r4, r7
    850e:	0017      	movs	r7, r2
    8510:	190c      	adds	r4, r1, r4
    8512:	0223      	lsls	r3, r4, #8
    8514:	d5d3      	bpl.n	84be <__aeabi_dadd+0x17a>
    8516:	4b6b      	ldr	r3, [pc, #428]	; (86c4 <__aeabi_dadd+0x380>)
    8518:	3601      	adds	r6, #1
    851a:	429e      	cmp	r6, r3
    851c:	d100      	bne.n	8520 <__aeabi_dadd+0x1dc>
    851e:	e13a      	b.n	8796 <__aeabi_dadd+0x452>
    8520:	2001      	movs	r0, #1
    8522:	4b69      	ldr	r3, [pc, #420]	; (86c8 <__aeabi_dadd+0x384>)
    8524:	401c      	ands	r4, r3
    8526:	087b      	lsrs	r3, r7, #1
    8528:	4007      	ands	r7, r0
    852a:	431f      	orrs	r7, r3
    852c:	07e0      	lsls	r0, r4, #31
    852e:	4307      	orrs	r7, r0
    8530:	0864      	lsrs	r4, r4, #1
    8532:	e78b      	b.n	844c <__aeabi_dadd+0x108>
    8534:	0023      	movs	r3, r4
    8536:	433b      	orrs	r3, r7
    8538:	d100      	bne.n	853c <__aeabi_dadd+0x1f8>
    853a:	e1cb      	b.n	88d4 <__aeabi_dadd+0x590>
    853c:	2280      	movs	r2, #128	; 0x80
    853e:	0312      	lsls	r2, r2, #12
    8540:	4314      	orrs	r4, r2
    8542:	0324      	lsls	r4, r4, #12
    8544:	0b24      	lsrs	r4, r4, #12
    8546:	e79e      	b.n	8486 <__aeabi_dadd+0x142>
    8548:	002e      	movs	r6, r5
    854a:	e77f      	b.n	844c <__aeabi_dadd+0x108>
    854c:	0008      	movs	r0, r1
    854e:	4310      	orrs	r0, r2
    8550:	d100      	bne.n	8554 <__aeabi_dadd+0x210>
    8552:	e0b4      	b.n	86be <__aeabi_dadd+0x37a>
    8554:	1e58      	subs	r0, r3, #1
    8556:	2800      	cmp	r0, #0
    8558:	d000      	beq.n	855c <__aeabi_dadd+0x218>
    855a:	e0de      	b.n	871a <__aeabi_dadd+0x3d6>
    855c:	18ba      	adds	r2, r7, r2
    855e:	42ba      	cmp	r2, r7
    8560:	419b      	sbcs	r3, r3
    8562:	1864      	adds	r4, r4, r1
    8564:	425b      	negs	r3, r3
    8566:	18e4      	adds	r4, r4, r3
    8568:	0017      	movs	r7, r2
    856a:	2601      	movs	r6, #1
    856c:	0223      	lsls	r3, r4, #8
    856e:	d5a6      	bpl.n	84be <__aeabi_dadd+0x17a>
    8570:	2602      	movs	r6, #2
    8572:	e7d5      	b.n	8520 <__aeabi_dadd+0x1dc>
    8574:	2d00      	cmp	r5, #0
    8576:	d16e      	bne.n	8656 <__aeabi_dadd+0x312>
    8578:	1c70      	adds	r0, r6, #1
    857a:	0540      	lsls	r0, r0, #21
    857c:	0d40      	lsrs	r0, r0, #21
    857e:	2801      	cmp	r0, #1
    8580:	dc00      	bgt.n	8584 <__aeabi_dadd+0x240>
    8582:	e0f9      	b.n	8778 <__aeabi_dadd+0x434>
    8584:	1ab8      	subs	r0, r7, r2
    8586:	4684      	mov	ip, r0
    8588:	4287      	cmp	r7, r0
    858a:	4180      	sbcs	r0, r0
    858c:	1ae5      	subs	r5, r4, r3
    858e:	4240      	negs	r0, r0
    8590:	1a2d      	subs	r5, r5, r0
    8592:	0228      	lsls	r0, r5, #8
    8594:	d400      	bmi.n	8598 <__aeabi_dadd+0x254>
    8596:	e089      	b.n	86ac <__aeabi_dadd+0x368>
    8598:	1bd7      	subs	r7, r2, r7
    859a:	42ba      	cmp	r2, r7
    859c:	4192      	sbcs	r2, r2
    859e:	1b1c      	subs	r4, r3, r4
    85a0:	4252      	negs	r2, r2
    85a2:	1aa5      	subs	r5, r4, r2
    85a4:	46d8      	mov	r8, fp
    85a6:	e729      	b.n	83fc <__aeabi_dadd+0xb8>
    85a8:	4645      	mov	r5, r8
    85aa:	2400      	movs	r4, #0
    85ac:	2700      	movs	r7, #0
    85ae:	e76a      	b.n	8486 <__aeabi_dadd+0x142>
    85b0:	4c45      	ldr	r4, [pc, #276]	; (86c8 <__aeabi_dadd+0x384>)
    85b2:	1af6      	subs	r6, r6, r3
    85b4:	402c      	ands	r4, r5
    85b6:	e749      	b.n	844c <__aeabi_dadd+0x108>
    85b8:	003d      	movs	r5, r7
    85ba:	3828      	subs	r0, #40	; 0x28
    85bc:	4085      	lsls	r5, r0
    85be:	2700      	movs	r7, #0
    85c0:	e72e      	b.n	8420 <__aeabi_dadd+0xdc>
    85c2:	0038      	movs	r0, r7
    85c4:	f001 fb04 	bl	9bd0 <__clzsi2>
    85c8:	3020      	adds	r0, #32
    85ca:	e71d      	b.n	8408 <__aeabi_dadd+0xc4>
    85cc:	430a      	orrs	r2, r1
    85ce:	1e51      	subs	r1, r2, #1
    85d0:	418a      	sbcs	r2, r1
    85d2:	2100      	movs	r1, #0
    85d4:	e707      	b.n	83e6 <__aeabi_dadd+0xa2>
    85d6:	2b00      	cmp	r3, #0
    85d8:	d000      	beq.n	85dc <__aeabi_dadd+0x298>
    85da:	e0f3      	b.n	87c4 <__aeabi_dadd+0x480>
    85dc:	1c70      	adds	r0, r6, #1
    85de:	0543      	lsls	r3, r0, #21
    85e0:	0d5b      	lsrs	r3, r3, #21
    85e2:	2b01      	cmp	r3, #1
    85e4:	dc00      	bgt.n	85e8 <__aeabi_dadd+0x2a4>
    85e6:	e0ad      	b.n	8744 <__aeabi_dadd+0x400>
    85e8:	4b36      	ldr	r3, [pc, #216]	; (86c4 <__aeabi_dadd+0x380>)
    85ea:	4298      	cmp	r0, r3
    85ec:	d100      	bne.n	85f0 <__aeabi_dadd+0x2ac>
    85ee:	e0d1      	b.n	8794 <__aeabi_dadd+0x450>
    85f0:	18ba      	adds	r2, r7, r2
    85f2:	42ba      	cmp	r2, r7
    85f4:	41bf      	sbcs	r7, r7
    85f6:	1864      	adds	r4, r4, r1
    85f8:	427f      	negs	r7, r7
    85fa:	19e4      	adds	r4, r4, r7
    85fc:	07e7      	lsls	r7, r4, #31
    85fe:	0852      	lsrs	r2, r2, #1
    8600:	4317      	orrs	r7, r2
    8602:	0864      	lsrs	r4, r4, #1
    8604:	0006      	movs	r6, r0
    8606:	e721      	b.n	844c <__aeabi_dadd+0x108>
    8608:	482e      	ldr	r0, [pc, #184]	; (86c4 <__aeabi_dadd+0x380>)
    860a:	4285      	cmp	r5, r0
    860c:	d100      	bne.n	8610 <__aeabi_dadd+0x2cc>
    860e:	e093      	b.n	8738 <__aeabi_dadd+0x3f4>
    8610:	001d      	movs	r5, r3
    8612:	e6d0      	b.n	83b6 <__aeabi_dadd+0x72>
    8614:	0029      	movs	r1, r5
    8616:	3e1f      	subs	r6, #31
    8618:	40f1      	lsrs	r1, r6
    861a:	2b20      	cmp	r3, #32
    861c:	d100      	bne.n	8620 <__aeabi_dadd+0x2dc>
    861e:	e08d      	b.n	873c <__aeabi_dadd+0x3f8>
    8620:	2240      	movs	r2, #64	; 0x40
    8622:	1ad3      	subs	r3, r2, r3
    8624:	409d      	lsls	r5, r3
    8626:	432f      	orrs	r7, r5
    8628:	1e7d      	subs	r5, r7, #1
    862a:	41af      	sbcs	r7, r5
    862c:	2400      	movs	r4, #0
    862e:	430f      	orrs	r7, r1
    8630:	2600      	movs	r6, #0
    8632:	e744      	b.n	84be <__aeabi_dadd+0x17a>
    8634:	002b      	movs	r3, r5
    8636:	0008      	movs	r0, r1
    8638:	3b20      	subs	r3, #32
    863a:	40d8      	lsrs	r0, r3
    863c:	0003      	movs	r3, r0
    863e:	2d20      	cmp	r5, #32
    8640:	d100      	bne.n	8644 <__aeabi_dadd+0x300>
    8642:	e07d      	b.n	8740 <__aeabi_dadd+0x3fc>
    8644:	2040      	movs	r0, #64	; 0x40
    8646:	1b45      	subs	r5, r0, r5
    8648:	40a9      	lsls	r1, r5
    864a:	430a      	orrs	r2, r1
    864c:	1e51      	subs	r1, r2, #1
    864e:	418a      	sbcs	r2, r1
    8650:	2100      	movs	r1, #0
    8652:	431a      	orrs	r2, r3
    8654:	e6c7      	b.n	83e6 <__aeabi_dadd+0xa2>
    8656:	2e00      	cmp	r6, #0
    8658:	d050      	beq.n	86fc <__aeabi_dadd+0x3b8>
    865a:	4e1a      	ldr	r6, [pc, #104]	; (86c4 <__aeabi_dadd+0x380>)
    865c:	42b0      	cmp	r0, r6
    865e:	d057      	beq.n	8710 <__aeabi_dadd+0x3cc>
    8660:	2680      	movs	r6, #128	; 0x80
    8662:	426b      	negs	r3, r5
    8664:	4699      	mov	r9, r3
    8666:	0436      	lsls	r6, r6, #16
    8668:	4334      	orrs	r4, r6
    866a:	464b      	mov	r3, r9
    866c:	2b38      	cmp	r3, #56	; 0x38
    866e:	dd00      	ble.n	8672 <__aeabi_dadd+0x32e>
    8670:	e0d6      	b.n	8820 <__aeabi_dadd+0x4dc>
    8672:	2b1f      	cmp	r3, #31
    8674:	dd00      	ble.n	8678 <__aeabi_dadd+0x334>
    8676:	e135      	b.n	88e4 <__aeabi_dadd+0x5a0>
    8678:	2620      	movs	r6, #32
    867a:	1af5      	subs	r5, r6, r3
    867c:	0026      	movs	r6, r4
    867e:	40ae      	lsls	r6, r5
    8680:	46b2      	mov	sl, r6
    8682:	003e      	movs	r6, r7
    8684:	40de      	lsrs	r6, r3
    8686:	46ac      	mov	ip, r5
    8688:	0035      	movs	r5, r6
    868a:	4656      	mov	r6, sl
    868c:	432e      	orrs	r6, r5
    868e:	4665      	mov	r5, ip
    8690:	40af      	lsls	r7, r5
    8692:	1e7d      	subs	r5, r7, #1
    8694:	41af      	sbcs	r7, r5
    8696:	40dc      	lsrs	r4, r3
    8698:	4337      	orrs	r7, r6
    869a:	1bd7      	subs	r7, r2, r7
    869c:	42ba      	cmp	r2, r7
    869e:	4192      	sbcs	r2, r2
    86a0:	1b0c      	subs	r4, r1, r4
    86a2:	4252      	negs	r2, r2
    86a4:	1aa4      	subs	r4, r4, r2
    86a6:	0006      	movs	r6, r0
    86a8:	46d8      	mov	r8, fp
    86aa:	e6a3      	b.n	83f4 <__aeabi_dadd+0xb0>
    86ac:	4664      	mov	r4, ip
    86ae:	4667      	mov	r7, ip
    86b0:	432c      	orrs	r4, r5
    86b2:	d000      	beq.n	86b6 <__aeabi_dadd+0x372>
    86b4:	e6a2      	b.n	83fc <__aeabi_dadd+0xb8>
    86b6:	2500      	movs	r5, #0
    86b8:	2600      	movs	r6, #0
    86ba:	2700      	movs	r7, #0
    86bc:	e706      	b.n	84cc <__aeabi_dadd+0x188>
    86be:	001e      	movs	r6, r3
    86c0:	e6c4      	b.n	844c <__aeabi_dadd+0x108>
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	000007ff 	.word	0x000007ff
    86c8:	ff7fffff 	.word	0xff7fffff
    86cc:	800fffff 	.word	0x800fffff
    86d0:	2b1f      	cmp	r3, #31
    86d2:	dc63      	bgt.n	879c <__aeabi_dadd+0x458>
    86d4:	2020      	movs	r0, #32
    86d6:	1ac3      	subs	r3, r0, r3
    86d8:	0008      	movs	r0, r1
    86da:	4098      	lsls	r0, r3
    86dc:	469c      	mov	ip, r3
    86de:	4683      	mov	fp, r0
    86e0:	4653      	mov	r3, sl
    86e2:	0010      	movs	r0, r2
    86e4:	40d8      	lsrs	r0, r3
    86e6:	0003      	movs	r3, r0
    86e8:	4658      	mov	r0, fp
    86ea:	4318      	orrs	r0, r3
    86ec:	4663      	mov	r3, ip
    86ee:	409a      	lsls	r2, r3
    86f0:	1e53      	subs	r3, r2, #1
    86f2:	419a      	sbcs	r2, r3
    86f4:	4653      	mov	r3, sl
    86f6:	4302      	orrs	r2, r0
    86f8:	40d9      	lsrs	r1, r3
    86fa:	e703      	b.n	8504 <__aeabi_dadd+0x1c0>
    86fc:	0026      	movs	r6, r4
    86fe:	433e      	orrs	r6, r7
    8700:	d006      	beq.n	8710 <__aeabi_dadd+0x3cc>
    8702:	43eb      	mvns	r3, r5
    8704:	4699      	mov	r9, r3
    8706:	2b00      	cmp	r3, #0
    8708:	d0c7      	beq.n	869a <__aeabi_dadd+0x356>
    870a:	4e94      	ldr	r6, [pc, #592]	; (895c <__aeabi_dadd+0x618>)
    870c:	42b0      	cmp	r0, r6
    870e:	d1ac      	bne.n	866a <__aeabi_dadd+0x326>
    8710:	000c      	movs	r4, r1
    8712:	0017      	movs	r7, r2
    8714:	0006      	movs	r6, r0
    8716:	46d8      	mov	r8, fp
    8718:	e698      	b.n	844c <__aeabi_dadd+0x108>
    871a:	4b90      	ldr	r3, [pc, #576]	; (895c <__aeabi_dadd+0x618>)
    871c:	459a      	cmp	sl, r3
    871e:	d00b      	beq.n	8738 <__aeabi_dadd+0x3f4>
    8720:	4682      	mov	sl, r0
    8722:	e6e7      	b.n	84f4 <__aeabi_dadd+0x1b0>
    8724:	2800      	cmp	r0, #0
    8726:	d000      	beq.n	872a <__aeabi_dadd+0x3e6>
    8728:	e09e      	b.n	8868 <__aeabi_dadd+0x524>
    872a:	0018      	movs	r0, r3
    872c:	4310      	orrs	r0, r2
    872e:	d100      	bne.n	8732 <__aeabi_dadd+0x3ee>
    8730:	e0e9      	b.n	8906 <__aeabi_dadd+0x5c2>
    8732:	001c      	movs	r4, r3
    8734:	0017      	movs	r7, r2
    8736:	46d8      	mov	r8, fp
    8738:	4e88      	ldr	r6, [pc, #544]	; (895c <__aeabi_dadd+0x618>)
    873a:	e687      	b.n	844c <__aeabi_dadd+0x108>
    873c:	2500      	movs	r5, #0
    873e:	e772      	b.n	8626 <__aeabi_dadd+0x2e2>
    8740:	2100      	movs	r1, #0
    8742:	e782      	b.n	864a <__aeabi_dadd+0x306>
    8744:	0023      	movs	r3, r4
    8746:	433b      	orrs	r3, r7
    8748:	2e00      	cmp	r6, #0
    874a:	d000      	beq.n	874e <__aeabi_dadd+0x40a>
    874c:	e0ab      	b.n	88a6 <__aeabi_dadd+0x562>
    874e:	2b00      	cmp	r3, #0
    8750:	d100      	bne.n	8754 <__aeabi_dadd+0x410>
    8752:	e0e7      	b.n	8924 <__aeabi_dadd+0x5e0>
    8754:	000b      	movs	r3, r1
    8756:	4313      	orrs	r3, r2
    8758:	d100      	bne.n	875c <__aeabi_dadd+0x418>
    875a:	e677      	b.n	844c <__aeabi_dadd+0x108>
    875c:	18ba      	adds	r2, r7, r2
    875e:	42ba      	cmp	r2, r7
    8760:	41bf      	sbcs	r7, r7
    8762:	1864      	adds	r4, r4, r1
    8764:	427f      	negs	r7, r7
    8766:	19e4      	adds	r4, r4, r7
    8768:	0223      	lsls	r3, r4, #8
    876a:	d400      	bmi.n	876e <__aeabi_dadd+0x42a>
    876c:	e0f2      	b.n	8954 <__aeabi_dadd+0x610>
    876e:	4b7c      	ldr	r3, [pc, #496]	; (8960 <__aeabi_dadd+0x61c>)
    8770:	0017      	movs	r7, r2
    8772:	401c      	ands	r4, r3
    8774:	0006      	movs	r6, r0
    8776:	e669      	b.n	844c <__aeabi_dadd+0x108>
    8778:	0020      	movs	r0, r4
    877a:	4338      	orrs	r0, r7
    877c:	2e00      	cmp	r6, #0
    877e:	d1d1      	bne.n	8724 <__aeabi_dadd+0x3e0>
    8780:	2800      	cmp	r0, #0
    8782:	d15b      	bne.n	883c <__aeabi_dadd+0x4f8>
    8784:	001c      	movs	r4, r3
    8786:	4314      	orrs	r4, r2
    8788:	d100      	bne.n	878c <__aeabi_dadd+0x448>
    878a:	e0a8      	b.n	88de <__aeabi_dadd+0x59a>
    878c:	001c      	movs	r4, r3
    878e:	0017      	movs	r7, r2
    8790:	46d8      	mov	r8, fp
    8792:	e65b      	b.n	844c <__aeabi_dadd+0x108>
    8794:	0006      	movs	r6, r0
    8796:	2400      	movs	r4, #0
    8798:	2700      	movs	r7, #0
    879a:	e697      	b.n	84cc <__aeabi_dadd+0x188>
    879c:	4650      	mov	r0, sl
    879e:	000b      	movs	r3, r1
    87a0:	3820      	subs	r0, #32
    87a2:	40c3      	lsrs	r3, r0
    87a4:	4699      	mov	r9, r3
    87a6:	4653      	mov	r3, sl
    87a8:	2b20      	cmp	r3, #32
    87aa:	d100      	bne.n	87ae <__aeabi_dadd+0x46a>
    87ac:	e095      	b.n	88da <__aeabi_dadd+0x596>
    87ae:	2340      	movs	r3, #64	; 0x40
    87b0:	4650      	mov	r0, sl
    87b2:	1a1b      	subs	r3, r3, r0
    87b4:	4099      	lsls	r1, r3
    87b6:	430a      	orrs	r2, r1
    87b8:	1e51      	subs	r1, r2, #1
    87ba:	418a      	sbcs	r2, r1
    87bc:	464b      	mov	r3, r9
    87be:	2100      	movs	r1, #0
    87c0:	431a      	orrs	r2, r3
    87c2:	e69f      	b.n	8504 <__aeabi_dadd+0x1c0>
    87c4:	2e00      	cmp	r6, #0
    87c6:	d130      	bne.n	882a <__aeabi_dadd+0x4e6>
    87c8:	0026      	movs	r6, r4
    87ca:	433e      	orrs	r6, r7
    87cc:	d067      	beq.n	889e <__aeabi_dadd+0x55a>
    87ce:	43db      	mvns	r3, r3
    87d0:	469a      	mov	sl, r3
    87d2:	2b00      	cmp	r3, #0
    87d4:	d01c      	beq.n	8810 <__aeabi_dadd+0x4cc>
    87d6:	4e61      	ldr	r6, [pc, #388]	; (895c <__aeabi_dadd+0x618>)
    87d8:	42b0      	cmp	r0, r6
    87da:	d060      	beq.n	889e <__aeabi_dadd+0x55a>
    87dc:	4653      	mov	r3, sl
    87de:	2b38      	cmp	r3, #56	; 0x38
    87e0:	dd00      	ble.n	87e4 <__aeabi_dadd+0x4a0>
    87e2:	e096      	b.n	8912 <__aeabi_dadd+0x5ce>
    87e4:	2b1f      	cmp	r3, #31
    87e6:	dd00      	ble.n	87ea <__aeabi_dadd+0x4a6>
    87e8:	e09f      	b.n	892a <__aeabi_dadd+0x5e6>
    87ea:	2620      	movs	r6, #32
    87ec:	1af3      	subs	r3, r6, r3
    87ee:	0026      	movs	r6, r4
    87f0:	409e      	lsls	r6, r3
    87f2:	469c      	mov	ip, r3
    87f4:	46b3      	mov	fp, r6
    87f6:	4653      	mov	r3, sl
    87f8:	003e      	movs	r6, r7
    87fa:	40de      	lsrs	r6, r3
    87fc:	0033      	movs	r3, r6
    87fe:	465e      	mov	r6, fp
    8800:	431e      	orrs	r6, r3
    8802:	4663      	mov	r3, ip
    8804:	409f      	lsls	r7, r3
    8806:	1e7b      	subs	r3, r7, #1
    8808:	419f      	sbcs	r7, r3
    880a:	4653      	mov	r3, sl
    880c:	40dc      	lsrs	r4, r3
    880e:	4337      	orrs	r7, r6
    8810:	18bf      	adds	r7, r7, r2
    8812:	4297      	cmp	r7, r2
    8814:	4192      	sbcs	r2, r2
    8816:	1864      	adds	r4, r4, r1
    8818:	4252      	negs	r2, r2
    881a:	18a4      	adds	r4, r4, r2
    881c:	0006      	movs	r6, r0
    881e:	e678      	b.n	8512 <__aeabi_dadd+0x1ce>
    8820:	4327      	orrs	r7, r4
    8822:	1e7c      	subs	r4, r7, #1
    8824:	41a7      	sbcs	r7, r4
    8826:	2400      	movs	r4, #0
    8828:	e737      	b.n	869a <__aeabi_dadd+0x356>
    882a:	4e4c      	ldr	r6, [pc, #304]	; (895c <__aeabi_dadd+0x618>)
    882c:	42b0      	cmp	r0, r6
    882e:	d036      	beq.n	889e <__aeabi_dadd+0x55a>
    8830:	2680      	movs	r6, #128	; 0x80
    8832:	425b      	negs	r3, r3
    8834:	0436      	lsls	r6, r6, #16
    8836:	469a      	mov	sl, r3
    8838:	4334      	orrs	r4, r6
    883a:	e7cf      	b.n	87dc <__aeabi_dadd+0x498>
    883c:	0018      	movs	r0, r3
    883e:	4310      	orrs	r0, r2
    8840:	d100      	bne.n	8844 <__aeabi_dadd+0x500>
    8842:	e603      	b.n	844c <__aeabi_dadd+0x108>
    8844:	1ab8      	subs	r0, r7, r2
    8846:	4684      	mov	ip, r0
    8848:	4567      	cmp	r7, ip
    884a:	41ad      	sbcs	r5, r5
    884c:	1ae0      	subs	r0, r4, r3
    884e:	426d      	negs	r5, r5
    8850:	1b40      	subs	r0, r0, r5
    8852:	0205      	lsls	r5, r0, #8
    8854:	d400      	bmi.n	8858 <__aeabi_dadd+0x514>
    8856:	e62c      	b.n	84b2 <__aeabi_dadd+0x16e>
    8858:	1bd7      	subs	r7, r2, r7
    885a:	42ba      	cmp	r2, r7
    885c:	4192      	sbcs	r2, r2
    885e:	1b1c      	subs	r4, r3, r4
    8860:	4252      	negs	r2, r2
    8862:	1aa4      	subs	r4, r4, r2
    8864:	46d8      	mov	r8, fp
    8866:	e5f1      	b.n	844c <__aeabi_dadd+0x108>
    8868:	0018      	movs	r0, r3
    886a:	4310      	orrs	r0, r2
    886c:	d100      	bne.n	8870 <__aeabi_dadd+0x52c>
    886e:	e763      	b.n	8738 <__aeabi_dadd+0x3f4>
    8870:	08f8      	lsrs	r0, r7, #3
    8872:	0767      	lsls	r7, r4, #29
    8874:	4307      	orrs	r7, r0
    8876:	2080      	movs	r0, #128	; 0x80
    8878:	08e4      	lsrs	r4, r4, #3
    887a:	0300      	lsls	r0, r0, #12
    887c:	4204      	tst	r4, r0
    887e:	d008      	beq.n	8892 <__aeabi_dadd+0x54e>
    8880:	08dd      	lsrs	r5, r3, #3
    8882:	4205      	tst	r5, r0
    8884:	d105      	bne.n	8892 <__aeabi_dadd+0x54e>
    8886:	08d2      	lsrs	r2, r2, #3
    8888:	0759      	lsls	r1, r3, #29
    888a:	4311      	orrs	r1, r2
    888c:	000f      	movs	r7, r1
    888e:	002c      	movs	r4, r5
    8890:	46d8      	mov	r8, fp
    8892:	0f7b      	lsrs	r3, r7, #29
    8894:	00e4      	lsls	r4, r4, #3
    8896:	431c      	orrs	r4, r3
    8898:	00ff      	lsls	r7, r7, #3
    889a:	4e30      	ldr	r6, [pc, #192]	; (895c <__aeabi_dadd+0x618>)
    889c:	e5d6      	b.n	844c <__aeabi_dadd+0x108>
    889e:	000c      	movs	r4, r1
    88a0:	0017      	movs	r7, r2
    88a2:	0006      	movs	r6, r0
    88a4:	e5d2      	b.n	844c <__aeabi_dadd+0x108>
    88a6:	2b00      	cmp	r3, #0
    88a8:	d038      	beq.n	891c <__aeabi_dadd+0x5d8>
    88aa:	000b      	movs	r3, r1
    88ac:	4313      	orrs	r3, r2
    88ae:	d100      	bne.n	88b2 <__aeabi_dadd+0x56e>
    88b0:	e742      	b.n	8738 <__aeabi_dadd+0x3f4>
    88b2:	08f8      	lsrs	r0, r7, #3
    88b4:	0767      	lsls	r7, r4, #29
    88b6:	4307      	orrs	r7, r0
    88b8:	2080      	movs	r0, #128	; 0x80
    88ba:	08e4      	lsrs	r4, r4, #3
    88bc:	0300      	lsls	r0, r0, #12
    88be:	4204      	tst	r4, r0
    88c0:	d0e7      	beq.n	8892 <__aeabi_dadd+0x54e>
    88c2:	08cb      	lsrs	r3, r1, #3
    88c4:	4203      	tst	r3, r0
    88c6:	d1e4      	bne.n	8892 <__aeabi_dadd+0x54e>
    88c8:	08d2      	lsrs	r2, r2, #3
    88ca:	0749      	lsls	r1, r1, #29
    88cc:	4311      	orrs	r1, r2
    88ce:	000f      	movs	r7, r1
    88d0:	001c      	movs	r4, r3
    88d2:	e7de      	b.n	8892 <__aeabi_dadd+0x54e>
    88d4:	2700      	movs	r7, #0
    88d6:	2400      	movs	r4, #0
    88d8:	e5d5      	b.n	8486 <__aeabi_dadd+0x142>
    88da:	2100      	movs	r1, #0
    88dc:	e76b      	b.n	87b6 <__aeabi_dadd+0x472>
    88de:	2500      	movs	r5, #0
    88e0:	2700      	movs	r7, #0
    88e2:	e5f3      	b.n	84cc <__aeabi_dadd+0x188>
    88e4:	464e      	mov	r6, r9
    88e6:	0025      	movs	r5, r4
    88e8:	3e20      	subs	r6, #32
    88ea:	40f5      	lsrs	r5, r6
    88ec:	464b      	mov	r3, r9
    88ee:	002e      	movs	r6, r5
    88f0:	2b20      	cmp	r3, #32
    88f2:	d02d      	beq.n	8950 <__aeabi_dadd+0x60c>
    88f4:	2540      	movs	r5, #64	; 0x40
    88f6:	1aed      	subs	r5, r5, r3
    88f8:	40ac      	lsls	r4, r5
    88fa:	4327      	orrs	r7, r4
    88fc:	1e7c      	subs	r4, r7, #1
    88fe:	41a7      	sbcs	r7, r4
    8900:	2400      	movs	r4, #0
    8902:	4337      	orrs	r7, r6
    8904:	e6c9      	b.n	869a <__aeabi_dadd+0x356>
    8906:	2480      	movs	r4, #128	; 0x80
    8908:	2500      	movs	r5, #0
    890a:	0324      	lsls	r4, r4, #12
    890c:	4e13      	ldr	r6, [pc, #76]	; (895c <__aeabi_dadd+0x618>)
    890e:	2700      	movs	r7, #0
    8910:	e5dc      	b.n	84cc <__aeabi_dadd+0x188>
    8912:	4327      	orrs	r7, r4
    8914:	1e7c      	subs	r4, r7, #1
    8916:	41a7      	sbcs	r7, r4
    8918:	2400      	movs	r4, #0
    891a:	e779      	b.n	8810 <__aeabi_dadd+0x4cc>
    891c:	000c      	movs	r4, r1
    891e:	0017      	movs	r7, r2
    8920:	4e0e      	ldr	r6, [pc, #56]	; (895c <__aeabi_dadd+0x618>)
    8922:	e593      	b.n	844c <__aeabi_dadd+0x108>
    8924:	000c      	movs	r4, r1
    8926:	0017      	movs	r7, r2
    8928:	e590      	b.n	844c <__aeabi_dadd+0x108>
    892a:	4656      	mov	r6, sl
    892c:	0023      	movs	r3, r4
    892e:	3e20      	subs	r6, #32
    8930:	40f3      	lsrs	r3, r6
    8932:	4699      	mov	r9, r3
    8934:	4653      	mov	r3, sl
    8936:	2b20      	cmp	r3, #32
    8938:	d00e      	beq.n	8958 <__aeabi_dadd+0x614>
    893a:	2340      	movs	r3, #64	; 0x40
    893c:	4656      	mov	r6, sl
    893e:	1b9b      	subs	r3, r3, r6
    8940:	409c      	lsls	r4, r3
    8942:	4327      	orrs	r7, r4
    8944:	1e7c      	subs	r4, r7, #1
    8946:	41a7      	sbcs	r7, r4
    8948:	464b      	mov	r3, r9
    894a:	2400      	movs	r4, #0
    894c:	431f      	orrs	r7, r3
    894e:	e75f      	b.n	8810 <__aeabi_dadd+0x4cc>
    8950:	2400      	movs	r4, #0
    8952:	e7d2      	b.n	88fa <__aeabi_dadd+0x5b6>
    8954:	0017      	movs	r7, r2
    8956:	e5b2      	b.n	84be <__aeabi_dadd+0x17a>
    8958:	2400      	movs	r4, #0
    895a:	e7f2      	b.n	8942 <__aeabi_dadd+0x5fe>
    895c:	000007ff 	.word	0x000007ff
    8960:	ff7fffff 	.word	0xff7fffff

00008964 <__aeabi_ddiv>:
    8964:	b5f0      	push	{r4, r5, r6, r7, lr}
    8966:	4657      	mov	r7, sl
    8968:	4645      	mov	r5, r8
    896a:	46de      	mov	lr, fp
    896c:	464e      	mov	r6, r9
    896e:	b5e0      	push	{r5, r6, r7, lr}
    8970:	004c      	lsls	r4, r1, #1
    8972:	030e      	lsls	r6, r1, #12
    8974:	b087      	sub	sp, #28
    8976:	4683      	mov	fp, r0
    8978:	4692      	mov	sl, r2
    897a:	001d      	movs	r5, r3
    897c:	4680      	mov	r8, r0
    897e:	0b36      	lsrs	r6, r6, #12
    8980:	0d64      	lsrs	r4, r4, #21
    8982:	0fcf      	lsrs	r7, r1, #31
    8984:	2c00      	cmp	r4, #0
    8986:	d04f      	beq.n	8a28 <__aeabi_ddiv+0xc4>
    8988:	4b6f      	ldr	r3, [pc, #444]	; (8b48 <__aeabi_ddiv+0x1e4>)
    898a:	429c      	cmp	r4, r3
    898c:	d035      	beq.n	89fa <__aeabi_ddiv+0x96>
    898e:	2380      	movs	r3, #128	; 0x80
    8990:	0f42      	lsrs	r2, r0, #29
    8992:	041b      	lsls	r3, r3, #16
    8994:	00f6      	lsls	r6, r6, #3
    8996:	4313      	orrs	r3, r2
    8998:	4333      	orrs	r3, r6
    899a:	4699      	mov	r9, r3
    899c:	00c3      	lsls	r3, r0, #3
    899e:	4698      	mov	r8, r3
    89a0:	4b6a      	ldr	r3, [pc, #424]	; (8b4c <__aeabi_ddiv+0x1e8>)
    89a2:	2600      	movs	r6, #0
    89a4:	469c      	mov	ip, r3
    89a6:	2300      	movs	r3, #0
    89a8:	4464      	add	r4, ip
    89aa:	9303      	str	r3, [sp, #12]
    89ac:	032b      	lsls	r3, r5, #12
    89ae:	0b1b      	lsrs	r3, r3, #12
    89b0:	469b      	mov	fp, r3
    89b2:	006b      	lsls	r3, r5, #1
    89b4:	0fed      	lsrs	r5, r5, #31
    89b6:	4650      	mov	r0, sl
    89b8:	0d5b      	lsrs	r3, r3, #21
    89ba:	9501      	str	r5, [sp, #4]
    89bc:	d05e      	beq.n	8a7c <__aeabi_ddiv+0x118>
    89be:	4a62      	ldr	r2, [pc, #392]	; (8b48 <__aeabi_ddiv+0x1e4>)
    89c0:	4293      	cmp	r3, r2
    89c2:	d053      	beq.n	8a6c <__aeabi_ddiv+0x108>
    89c4:	465a      	mov	r2, fp
    89c6:	00d1      	lsls	r1, r2, #3
    89c8:	2280      	movs	r2, #128	; 0x80
    89ca:	0f40      	lsrs	r0, r0, #29
    89cc:	0412      	lsls	r2, r2, #16
    89ce:	4302      	orrs	r2, r0
    89d0:	430a      	orrs	r2, r1
    89d2:	4693      	mov	fp, r2
    89d4:	4652      	mov	r2, sl
    89d6:	00d1      	lsls	r1, r2, #3
    89d8:	4a5c      	ldr	r2, [pc, #368]	; (8b4c <__aeabi_ddiv+0x1e8>)
    89da:	4694      	mov	ip, r2
    89dc:	2200      	movs	r2, #0
    89de:	4463      	add	r3, ip
    89e0:	0038      	movs	r0, r7
    89e2:	4068      	eors	r0, r5
    89e4:	4684      	mov	ip, r0
    89e6:	9002      	str	r0, [sp, #8]
    89e8:	1ae4      	subs	r4, r4, r3
    89ea:	4316      	orrs	r6, r2
    89ec:	2e0f      	cmp	r6, #15
    89ee:	d900      	bls.n	89f2 <__aeabi_ddiv+0x8e>
    89f0:	e0b4      	b.n	8b5c <__aeabi_ddiv+0x1f8>
    89f2:	4b57      	ldr	r3, [pc, #348]	; (8b50 <__aeabi_ddiv+0x1ec>)
    89f4:	00b6      	lsls	r6, r6, #2
    89f6:	599b      	ldr	r3, [r3, r6]
    89f8:	469f      	mov	pc, r3
    89fa:	0003      	movs	r3, r0
    89fc:	4333      	orrs	r3, r6
    89fe:	4699      	mov	r9, r3
    8a00:	d16c      	bne.n	8adc <__aeabi_ddiv+0x178>
    8a02:	2300      	movs	r3, #0
    8a04:	4698      	mov	r8, r3
    8a06:	3302      	adds	r3, #2
    8a08:	2608      	movs	r6, #8
    8a0a:	9303      	str	r3, [sp, #12]
    8a0c:	e7ce      	b.n	89ac <__aeabi_ddiv+0x48>
    8a0e:	46cb      	mov	fp, r9
    8a10:	4641      	mov	r1, r8
    8a12:	9a03      	ldr	r2, [sp, #12]
    8a14:	9701      	str	r7, [sp, #4]
    8a16:	2a02      	cmp	r2, #2
    8a18:	d165      	bne.n	8ae6 <__aeabi_ddiv+0x182>
    8a1a:	9b01      	ldr	r3, [sp, #4]
    8a1c:	4c4a      	ldr	r4, [pc, #296]	; (8b48 <__aeabi_ddiv+0x1e4>)
    8a1e:	469c      	mov	ip, r3
    8a20:	2300      	movs	r3, #0
    8a22:	2200      	movs	r2, #0
    8a24:	4698      	mov	r8, r3
    8a26:	e06b      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8a28:	0003      	movs	r3, r0
    8a2a:	4333      	orrs	r3, r6
    8a2c:	4699      	mov	r9, r3
    8a2e:	d04e      	beq.n	8ace <__aeabi_ddiv+0x16a>
    8a30:	2e00      	cmp	r6, #0
    8a32:	d100      	bne.n	8a36 <__aeabi_ddiv+0xd2>
    8a34:	e1bc      	b.n	8db0 <__aeabi_ddiv+0x44c>
    8a36:	0030      	movs	r0, r6
    8a38:	f001 f8ca 	bl	9bd0 <__clzsi2>
    8a3c:	0003      	movs	r3, r0
    8a3e:	3b0b      	subs	r3, #11
    8a40:	2b1c      	cmp	r3, #28
    8a42:	dd00      	ble.n	8a46 <__aeabi_ddiv+0xe2>
    8a44:	e1ac      	b.n	8da0 <__aeabi_ddiv+0x43c>
    8a46:	221d      	movs	r2, #29
    8a48:	1ad3      	subs	r3, r2, r3
    8a4a:	465a      	mov	r2, fp
    8a4c:	0001      	movs	r1, r0
    8a4e:	40da      	lsrs	r2, r3
    8a50:	3908      	subs	r1, #8
    8a52:	408e      	lsls	r6, r1
    8a54:	0013      	movs	r3, r2
    8a56:	4333      	orrs	r3, r6
    8a58:	4699      	mov	r9, r3
    8a5a:	465b      	mov	r3, fp
    8a5c:	408b      	lsls	r3, r1
    8a5e:	4698      	mov	r8, r3
    8a60:	2300      	movs	r3, #0
    8a62:	4c3c      	ldr	r4, [pc, #240]	; (8b54 <__aeabi_ddiv+0x1f0>)
    8a64:	2600      	movs	r6, #0
    8a66:	1a24      	subs	r4, r4, r0
    8a68:	9303      	str	r3, [sp, #12]
    8a6a:	e79f      	b.n	89ac <__aeabi_ddiv+0x48>
    8a6c:	4651      	mov	r1, sl
    8a6e:	465a      	mov	r2, fp
    8a70:	4311      	orrs	r1, r2
    8a72:	d129      	bne.n	8ac8 <__aeabi_ddiv+0x164>
    8a74:	2200      	movs	r2, #0
    8a76:	4693      	mov	fp, r2
    8a78:	3202      	adds	r2, #2
    8a7a:	e7b1      	b.n	89e0 <__aeabi_ddiv+0x7c>
    8a7c:	4659      	mov	r1, fp
    8a7e:	4301      	orrs	r1, r0
    8a80:	d01e      	beq.n	8ac0 <__aeabi_ddiv+0x15c>
    8a82:	465b      	mov	r3, fp
    8a84:	2b00      	cmp	r3, #0
    8a86:	d100      	bne.n	8a8a <__aeabi_ddiv+0x126>
    8a88:	e19e      	b.n	8dc8 <__aeabi_ddiv+0x464>
    8a8a:	4658      	mov	r0, fp
    8a8c:	f001 f8a0 	bl	9bd0 <__clzsi2>
    8a90:	0003      	movs	r3, r0
    8a92:	3b0b      	subs	r3, #11
    8a94:	2b1c      	cmp	r3, #28
    8a96:	dd00      	ble.n	8a9a <__aeabi_ddiv+0x136>
    8a98:	e18f      	b.n	8dba <__aeabi_ddiv+0x456>
    8a9a:	0002      	movs	r2, r0
    8a9c:	4659      	mov	r1, fp
    8a9e:	3a08      	subs	r2, #8
    8aa0:	4091      	lsls	r1, r2
    8aa2:	468b      	mov	fp, r1
    8aa4:	211d      	movs	r1, #29
    8aa6:	1acb      	subs	r3, r1, r3
    8aa8:	4651      	mov	r1, sl
    8aaa:	40d9      	lsrs	r1, r3
    8aac:	000b      	movs	r3, r1
    8aae:	4659      	mov	r1, fp
    8ab0:	430b      	orrs	r3, r1
    8ab2:	4651      	mov	r1, sl
    8ab4:	469b      	mov	fp, r3
    8ab6:	4091      	lsls	r1, r2
    8ab8:	4b26      	ldr	r3, [pc, #152]	; (8b54 <__aeabi_ddiv+0x1f0>)
    8aba:	2200      	movs	r2, #0
    8abc:	1a1b      	subs	r3, r3, r0
    8abe:	e78f      	b.n	89e0 <__aeabi_ddiv+0x7c>
    8ac0:	2300      	movs	r3, #0
    8ac2:	2201      	movs	r2, #1
    8ac4:	469b      	mov	fp, r3
    8ac6:	e78b      	b.n	89e0 <__aeabi_ddiv+0x7c>
    8ac8:	4651      	mov	r1, sl
    8aca:	2203      	movs	r2, #3
    8acc:	e788      	b.n	89e0 <__aeabi_ddiv+0x7c>
    8ace:	2300      	movs	r3, #0
    8ad0:	4698      	mov	r8, r3
    8ad2:	3301      	adds	r3, #1
    8ad4:	2604      	movs	r6, #4
    8ad6:	2400      	movs	r4, #0
    8ad8:	9303      	str	r3, [sp, #12]
    8ada:	e767      	b.n	89ac <__aeabi_ddiv+0x48>
    8adc:	2303      	movs	r3, #3
    8ade:	46b1      	mov	r9, r6
    8ae0:	9303      	str	r3, [sp, #12]
    8ae2:	260c      	movs	r6, #12
    8ae4:	e762      	b.n	89ac <__aeabi_ddiv+0x48>
    8ae6:	2a03      	cmp	r2, #3
    8ae8:	d100      	bne.n	8aec <__aeabi_ddiv+0x188>
    8aea:	e25c      	b.n	8fa6 <__aeabi_ddiv+0x642>
    8aec:	9b01      	ldr	r3, [sp, #4]
    8aee:	2a01      	cmp	r2, #1
    8af0:	d000      	beq.n	8af4 <__aeabi_ddiv+0x190>
    8af2:	e1e4      	b.n	8ebe <__aeabi_ddiv+0x55a>
    8af4:	4013      	ands	r3, r2
    8af6:	469c      	mov	ip, r3
    8af8:	2300      	movs	r3, #0
    8afa:	2400      	movs	r4, #0
    8afc:	2200      	movs	r2, #0
    8afe:	4698      	mov	r8, r3
    8b00:	2100      	movs	r1, #0
    8b02:	0312      	lsls	r2, r2, #12
    8b04:	0b13      	lsrs	r3, r2, #12
    8b06:	0d0a      	lsrs	r2, r1, #20
    8b08:	0512      	lsls	r2, r2, #20
    8b0a:	431a      	orrs	r2, r3
    8b0c:	0523      	lsls	r3, r4, #20
    8b0e:	4c12      	ldr	r4, [pc, #72]	; (8b58 <__aeabi_ddiv+0x1f4>)
    8b10:	4640      	mov	r0, r8
    8b12:	4022      	ands	r2, r4
    8b14:	4313      	orrs	r3, r2
    8b16:	4662      	mov	r2, ip
    8b18:	005b      	lsls	r3, r3, #1
    8b1a:	07d2      	lsls	r2, r2, #31
    8b1c:	085b      	lsrs	r3, r3, #1
    8b1e:	4313      	orrs	r3, r2
    8b20:	0019      	movs	r1, r3
    8b22:	b007      	add	sp, #28
    8b24:	bc3c      	pop	{r2, r3, r4, r5}
    8b26:	4690      	mov	r8, r2
    8b28:	4699      	mov	r9, r3
    8b2a:	46a2      	mov	sl, r4
    8b2c:	46ab      	mov	fp, r5
    8b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b30:	2300      	movs	r3, #0
    8b32:	2280      	movs	r2, #128	; 0x80
    8b34:	469c      	mov	ip, r3
    8b36:	0312      	lsls	r2, r2, #12
    8b38:	4698      	mov	r8, r3
    8b3a:	4c03      	ldr	r4, [pc, #12]	; (8b48 <__aeabi_ddiv+0x1e4>)
    8b3c:	e7e0      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8b3e:	2300      	movs	r3, #0
    8b40:	4c01      	ldr	r4, [pc, #4]	; (8b48 <__aeabi_ddiv+0x1e4>)
    8b42:	2200      	movs	r2, #0
    8b44:	4698      	mov	r8, r3
    8b46:	e7db      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8b48:	000007ff 	.word	0x000007ff
    8b4c:	fffffc01 	.word	0xfffffc01
    8b50:	0000c254 	.word	0x0000c254
    8b54:	fffffc0d 	.word	0xfffffc0d
    8b58:	800fffff 	.word	0x800fffff
    8b5c:	45d9      	cmp	r9, fp
    8b5e:	d900      	bls.n	8b62 <__aeabi_ddiv+0x1fe>
    8b60:	e139      	b.n	8dd6 <__aeabi_ddiv+0x472>
    8b62:	d100      	bne.n	8b66 <__aeabi_ddiv+0x202>
    8b64:	e134      	b.n	8dd0 <__aeabi_ddiv+0x46c>
    8b66:	2300      	movs	r3, #0
    8b68:	4646      	mov	r6, r8
    8b6a:	464d      	mov	r5, r9
    8b6c:	469a      	mov	sl, r3
    8b6e:	3c01      	subs	r4, #1
    8b70:	465b      	mov	r3, fp
    8b72:	0e0a      	lsrs	r2, r1, #24
    8b74:	021b      	lsls	r3, r3, #8
    8b76:	431a      	orrs	r2, r3
    8b78:	020b      	lsls	r3, r1, #8
    8b7a:	0c17      	lsrs	r7, r2, #16
    8b7c:	9303      	str	r3, [sp, #12]
    8b7e:	0413      	lsls	r3, r2, #16
    8b80:	0c1b      	lsrs	r3, r3, #16
    8b82:	0039      	movs	r1, r7
    8b84:	0028      	movs	r0, r5
    8b86:	4690      	mov	r8, r2
    8b88:	9301      	str	r3, [sp, #4]
    8b8a:	f7ff fa3b 	bl	8004 <__udivsi3>
    8b8e:	0002      	movs	r2, r0
    8b90:	9b01      	ldr	r3, [sp, #4]
    8b92:	4683      	mov	fp, r0
    8b94:	435a      	muls	r2, r3
    8b96:	0028      	movs	r0, r5
    8b98:	0039      	movs	r1, r7
    8b9a:	4691      	mov	r9, r2
    8b9c:	f7ff fab8 	bl	8110 <__aeabi_uidivmod>
    8ba0:	0c35      	lsrs	r5, r6, #16
    8ba2:	0409      	lsls	r1, r1, #16
    8ba4:	430d      	orrs	r5, r1
    8ba6:	45a9      	cmp	r9, r5
    8ba8:	d90d      	bls.n	8bc6 <__aeabi_ddiv+0x262>
    8baa:	465b      	mov	r3, fp
    8bac:	4445      	add	r5, r8
    8bae:	3b01      	subs	r3, #1
    8bb0:	45a8      	cmp	r8, r5
    8bb2:	d900      	bls.n	8bb6 <__aeabi_ddiv+0x252>
    8bb4:	e13a      	b.n	8e2c <__aeabi_ddiv+0x4c8>
    8bb6:	45a9      	cmp	r9, r5
    8bb8:	d800      	bhi.n	8bbc <__aeabi_ddiv+0x258>
    8bba:	e137      	b.n	8e2c <__aeabi_ddiv+0x4c8>
    8bbc:	2302      	movs	r3, #2
    8bbe:	425b      	negs	r3, r3
    8bc0:	469c      	mov	ip, r3
    8bc2:	4445      	add	r5, r8
    8bc4:	44e3      	add	fp, ip
    8bc6:	464b      	mov	r3, r9
    8bc8:	1aeb      	subs	r3, r5, r3
    8bca:	0039      	movs	r1, r7
    8bcc:	0018      	movs	r0, r3
    8bce:	9304      	str	r3, [sp, #16]
    8bd0:	f7ff fa18 	bl	8004 <__udivsi3>
    8bd4:	9b01      	ldr	r3, [sp, #4]
    8bd6:	0005      	movs	r5, r0
    8bd8:	4343      	muls	r3, r0
    8bda:	0039      	movs	r1, r7
    8bdc:	9804      	ldr	r0, [sp, #16]
    8bde:	4699      	mov	r9, r3
    8be0:	f7ff fa96 	bl	8110 <__aeabi_uidivmod>
    8be4:	0433      	lsls	r3, r6, #16
    8be6:	0409      	lsls	r1, r1, #16
    8be8:	0c1b      	lsrs	r3, r3, #16
    8bea:	430b      	orrs	r3, r1
    8bec:	4599      	cmp	r9, r3
    8bee:	d909      	bls.n	8c04 <__aeabi_ddiv+0x2a0>
    8bf0:	4443      	add	r3, r8
    8bf2:	1e6a      	subs	r2, r5, #1
    8bf4:	4598      	cmp	r8, r3
    8bf6:	d900      	bls.n	8bfa <__aeabi_ddiv+0x296>
    8bf8:	e11a      	b.n	8e30 <__aeabi_ddiv+0x4cc>
    8bfa:	4599      	cmp	r9, r3
    8bfc:	d800      	bhi.n	8c00 <__aeabi_ddiv+0x29c>
    8bfe:	e117      	b.n	8e30 <__aeabi_ddiv+0x4cc>
    8c00:	3d02      	subs	r5, #2
    8c02:	4443      	add	r3, r8
    8c04:	464a      	mov	r2, r9
    8c06:	1a9b      	subs	r3, r3, r2
    8c08:	465a      	mov	r2, fp
    8c0a:	0412      	lsls	r2, r2, #16
    8c0c:	432a      	orrs	r2, r5
    8c0e:	9903      	ldr	r1, [sp, #12]
    8c10:	4693      	mov	fp, r2
    8c12:	0c10      	lsrs	r0, r2, #16
    8c14:	0c0a      	lsrs	r2, r1, #16
    8c16:	4691      	mov	r9, r2
    8c18:	0409      	lsls	r1, r1, #16
    8c1a:	465a      	mov	r2, fp
    8c1c:	0c09      	lsrs	r1, r1, #16
    8c1e:	464e      	mov	r6, r9
    8c20:	000d      	movs	r5, r1
    8c22:	0412      	lsls	r2, r2, #16
    8c24:	0c12      	lsrs	r2, r2, #16
    8c26:	4345      	muls	r5, r0
    8c28:	9105      	str	r1, [sp, #20]
    8c2a:	4351      	muls	r1, r2
    8c2c:	4372      	muls	r2, r6
    8c2e:	4370      	muls	r0, r6
    8c30:	1952      	adds	r2, r2, r5
    8c32:	0c0e      	lsrs	r6, r1, #16
    8c34:	18b2      	adds	r2, r6, r2
    8c36:	4295      	cmp	r5, r2
    8c38:	d903      	bls.n	8c42 <__aeabi_ddiv+0x2de>
    8c3a:	2580      	movs	r5, #128	; 0x80
    8c3c:	026d      	lsls	r5, r5, #9
    8c3e:	46ac      	mov	ip, r5
    8c40:	4460      	add	r0, ip
    8c42:	0c15      	lsrs	r5, r2, #16
    8c44:	0409      	lsls	r1, r1, #16
    8c46:	0412      	lsls	r2, r2, #16
    8c48:	0c09      	lsrs	r1, r1, #16
    8c4a:	1828      	adds	r0, r5, r0
    8c4c:	1852      	adds	r2, r2, r1
    8c4e:	4283      	cmp	r3, r0
    8c50:	d200      	bcs.n	8c54 <__aeabi_ddiv+0x2f0>
    8c52:	e0ce      	b.n	8df2 <__aeabi_ddiv+0x48e>
    8c54:	d100      	bne.n	8c58 <__aeabi_ddiv+0x2f4>
    8c56:	e0c8      	b.n	8dea <__aeabi_ddiv+0x486>
    8c58:	1a1d      	subs	r5, r3, r0
    8c5a:	4653      	mov	r3, sl
    8c5c:	1a9e      	subs	r6, r3, r2
    8c5e:	45b2      	cmp	sl, r6
    8c60:	4192      	sbcs	r2, r2
    8c62:	4252      	negs	r2, r2
    8c64:	1aab      	subs	r3, r5, r2
    8c66:	469a      	mov	sl, r3
    8c68:	4598      	cmp	r8, r3
    8c6a:	d100      	bne.n	8c6e <__aeabi_ddiv+0x30a>
    8c6c:	e117      	b.n	8e9e <__aeabi_ddiv+0x53a>
    8c6e:	0039      	movs	r1, r7
    8c70:	0018      	movs	r0, r3
    8c72:	f7ff f9c7 	bl	8004 <__udivsi3>
    8c76:	9b01      	ldr	r3, [sp, #4]
    8c78:	0005      	movs	r5, r0
    8c7a:	4343      	muls	r3, r0
    8c7c:	0039      	movs	r1, r7
    8c7e:	4650      	mov	r0, sl
    8c80:	9304      	str	r3, [sp, #16]
    8c82:	f7ff fa45 	bl	8110 <__aeabi_uidivmod>
    8c86:	9804      	ldr	r0, [sp, #16]
    8c88:	040b      	lsls	r3, r1, #16
    8c8a:	0c31      	lsrs	r1, r6, #16
    8c8c:	4319      	orrs	r1, r3
    8c8e:	4288      	cmp	r0, r1
    8c90:	d909      	bls.n	8ca6 <__aeabi_ddiv+0x342>
    8c92:	4441      	add	r1, r8
    8c94:	1e6b      	subs	r3, r5, #1
    8c96:	4588      	cmp	r8, r1
    8c98:	d900      	bls.n	8c9c <__aeabi_ddiv+0x338>
    8c9a:	e107      	b.n	8eac <__aeabi_ddiv+0x548>
    8c9c:	4288      	cmp	r0, r1
    8c9e:	d800      	bhi.n	8ca2 <__aeabi_ddiv+0x33e>
    8ca0:	e104      	b.n	8eac <__aeabi_ddiv+0x548>
    8ca2:	3d02      	subs	r5, #2
    8ca4:	4441      	add	r1, r8
    8ca6:	9b04      	ldr	r3, [sp, #16]
    8ca8:	1acb      	subs	r3, r1, r3
    8caa:	0018      	movs	r0, r3
    8cac:	0039      	movs	r1, r7
    8cae:	9304      	str	r3, [sp, #16]
    8cb0:	f7ff f9a8 	bl	8004 <__udivsi3>
    8cb4:	9b01      	ldr	r3, [sp, #4]
    8cb6:	4682      	mov	sl, r0
    8cb8:	4343      	muls	r3, r0
    8cba:	0039      	movs	r1, r7
    8cbc:	9804      	ldr	r0, [sp, #16]
    8cbe:	9301      	str	r3, [sp, #4]
    8cc0:	f7ff fa26 	bl	8110 <__aeabi_uidivmod>
    8cc4:	9801      	ldr	r0, [sp, #4]
    8cc6:	040b      	lsls	r3, r1, #16
    8cc8:	0431      	lsls	r1, r6, #16
    8cca:	0c09      	lsrs	r1, r1, #16
    8ccc:	4319      	orrs	r1, r3
    8cce:	4288      	cmp	r0, r1
    8cd0:	d90d      	bls.n	8cee <__aeabi_ddiv+0x38a>
    8cd2:	4653      	mov	r3, sl
    8cd4:	4441      	add	r1, r8
    8cd6:	3b01      	subs	r3, #1
    8cd8:	4588      	cmp	r8, r1
    8cda:	d900      	bls.n	8cde <__aeabi_ddiv+0x37a>
    8cdc:	e0e8      	b.n	8eb0 <__aeabi_ddiv+0x54c>
    8cde:	4288      	cmp	r0, r1
    8ce0:	d800      	bhi.n	8ce4 <__aeabi_ddiv+0x380>
    8ce2:	e0e5      	b.n	8eb0 <__aeabi_ddiv+0x54c>
    8ce4:	2302      	movs	r3, #2
    8ce6:	425b      	negs	r3, r3
    8ce8:	469c      	mov	ip, r3
    8cea:	4441      	add	r1, r8
    8cec:	44e2      	add	sl, ip
    8cee:	9b01      	ldr	r3, [sp, #4]
    8cf0:	042d      	lsls	r5, r5, #16
    8cf2:	1ace      	subs	r6, r1, r3
    8cf4:	4651      	mov	r1, sl
    8cf6:	4329      	orrs	r1, r5
    8cf8:	9d05      	ldr	r5, [sp, #20]
    8cfa:	464f      	mov	r7, r9
    8cfc:	002a      	movs	r2, r5
    8cfe:	040b      	lsls	r3, r1, #16
    8d00:	0c08      	lsrs	r0, r1, #16
    8d02:	0c1b      	lsrs	r3, r3, #16
    8d04:	435a      	muls	r2, r3
    8d06:	4345      	muls	r5, r0
    8d08:	437b      	muls	r3, r7
    8d0a:	4378      	muls	r0, r7
    8d0c:	195b      	adds	r3, r3, r5
    8d0e:	0c17      	lsrs	r7, r2, #16
    8d10:	18fb      	adds	r3, r7, r3
    8d12:	429d      	cmp	r5, r3
    8d14:	d903      	bls.n	8d1e <__aeabi_ddiv+0x3ba>
    8d16:	2580      	movs	r5, #128	; 0x80
    8d18:	026d      	lsls	r5, r5, #9
    8d1a:	46ac      	mov	ip, r5
    8d1c:	4460      	add	r0, ip
    8d1e:	0c1d      	lsrs	r5, r3, #16
    8d20:	0412      	lsls	r2, r2, #16
    8d22:	041b      	lsls	r3, r3, #16
    8d24:	0c12      	lsrs	r2, r2, #16
    8d26:	1828      	adds	r0, r5, r0
    8d28:	189b      	adds	r3, r3, r2
    8d2a:	4286      	cmp	r6, r0
    8d2c:	d200      	bcs.n	8d30 <__aeabi_ddiv+0x3cc>
    8d2e:	e093      	b.n	8e58 <__aeabi_ddiv+0x4f4>
    8d30:	d100      	bne.n	8d34 <__aeabi_ddiv+0x3d0>
    8d32:	e08e      	b.n	8e52 <__aeabi_ddiv+0x4ee>
    8d34:	2301      	movs	r3, #1
    8d36:	4319      	orrs	r1, r3
    8d38:	4ba0      	ldr	r3, [pc, #640]	; (8fbc <__aeabi_ddiv+0x658>)
    8d3a:	18e3      	adds	r3, r4, r3
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	dc00      	bgt.n	8d42 <__aeabi_ddiv+0x3de>
    8d40:	e099      	b.n	8e76 <__aeabi_ddiv+0x512>
    8d42:	074a      	lsls	r2, r1, #29
    8d44:	d000      	beq.n	8d48 <__aeabi_ddiv+0x3e4>
    8d46:	e09e      	b.n	8e86 <__aeabi_ddiv+0x522>
    8d48:	465a      	mov	r2, fp
    8d4a:	01d2      	lsls	r2, r2, #7
    8d4c:	d506      	bpl.n	8d5c <__aeabi_ddiv+0x3f8>
    8d4e:	465a      	mov	r2, fp
    8d50:	4b9b      	ldr	r3, [pc, #620]	; (8fc0 <__aeabi_ddiv+0x65c>)
    8d52:	401a      	ands	r2, r3
    8d54:	2380      	movs	r3, #128	; 0x80
    8d56:	4693      	mov	fp, r2
    8d58:	00db      	lsls	r3, r3, #3
    8d5a:	18e3      	adds	r3, r4, r3
    8d5c:	4a99      	ldr	r2, [pc, #612]	; (8fc4 <__aeabi_ddiv+0x660>)
    8d5e:	4293      	cmp	r3, r2
    8d60:	dd68      	ble.n	8e34 <__aeabi_ddiv+0x4d0>
    8d62:	2301      	movs	r3, #1
    8d64:	9a02      	ldr	r2, [sp, #8]
    8d66:	4c98      	ldr	r4, [pc, #608]	; (8fc8 <__aeabi_ddiv+0x664>)
    8d68:	401a      	ands	r2, r3
    8d6a:	2300      	movs	r3, #0
    8d6c:	4694      	mov	ip, r2
    8d6e:	4698      	mov	r8, r3
    8d70:	2200      	movs	r2, #0
    8d72:	e6c5      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8d74:	2280      	movs	r2, #128	; 0x80
    8d76:	464b      	mov	r3, r9
    8d78:	0312      	lsls	r2, r2, #12
    8d7a:	4213      	tst	r3, r2
    8d7c:	d00a      	beq.n	8d94 <__aeabi_ddiv+0x430>
    8d7e:	465b      	mov	r3, fp
    8d80:	4213      	tst	r3, r2
    8d82:	d106      	bne.n	8d92 <__aeabi_ddiv+0x42e>
    8d84:	431a      	orrs	r2, r3
    8d86:	0312      	lsls	r2, r2, #12
    8d88:	0b12      	lsrs	r2, r2, #12
    8d8a:	46ac      	mov	ip, r5
    8d8c:	4688      	mov	r8, r1
    8d8e:	4c8e      	ldr	r4, [pc, #568]	; (8fc8 <__aeabi_ddiv+0x664>)
    8d90:	e6b6      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8d92:	464b      	mov	r3, r9
    8d94:	431a      	orrs	r2, r3
    8d96:	0312      	lsls	r2, r2, #12
    8d98:	0b12      	lsrs	r2, r2, #12
    8d9a:	46bc      	mov	ip, r7
    8d9c:	4c8a      	ldr	r4, [pc, #552]	; (8fc8 <__aeabi_ddiv+0x664>)
    8d9e:	e6af      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8da0:	0003      	movs	r3, r0
    8da2:	465a      	mov	r2, fp
    8da4:	3b28      	subs	r3, #40	; 0x28
    8da6:	409a      	lsls	r2, r3
    8da8:	2300      	movs	r3, #0
    8daa:	4691      	mov	r9, r2
    8dac:	4698      	mov	r8, r3
    8dae:	e657      	b.n	8a60 <__aeabi_ddiv+0xfc>
    8db0:	4658      	mov	r0, fp
    8db2:	f000 ff0d 	bl	9bd0 <__clzsi2>
    8db6:	3020      	adds	r0, #32
    8db8:	e640      	b.n	8a3c <__aeabi_ddiv+0xd8>
    8dba:	0003      	movs	r3, r0
    8dbc:	4652      	mov	r2, sl
    8dbe:	3b28      	subs	r3, #40	; 0x28
    8dc0:	409a      	lsls	r2, r3
    8dc2:	2100      	movs	r1, #0
    8dc4:	4693      	mov	fp, r2
    8dc6:	e677      	b.n	8ab8 <__aeabi_ddiv+0x154>
    8dc8:	f000 ff02 	bl	9bd0 <__clzsi2>
    8dcc:	3020      	adds	r0, #32
    8dce:	e65f      	b.n	8a90 <__aeabi_ddiv+0x12c>
    8dd0:	4588      	cmp	r8, r1
    8dd2:	d200      	bcs.n	8dd6 <__aeabi_ddiv+0x472>
    8dd4:	e6c7      	b.n	8b66 <__aeabi_ddiv+0x202>
    8dd6:	464b      	mov	r3, r9
    8dd8:	07de      	lsls	r6, r3, #31
    8dda:	085d      	lsrs	r5, r3, #1
    8ddc:	4643      	mov	r3, r8
    8dde:	085b      	lsrs	r3, r3, #1
    8de0:	431e      	orrs	r6, r3
    8de2:	4643      	mov	r3, r8
    8de4:	07db      	lsls	r3, r3, #31
    8de6:	469a      	mov	sl, r3
    8de8:	e6c2      	b.n	8b70 <__aeabi_ddiv+0x20c>
    8dea:	2500      	movs	r5, #0
    8dec:	4592      	cmp	sl, r2
    8dee:	d300      	bcc.n	8df2 <__aeabi_ddiv+0x48e>
    8df0:	e733      	b.n	8c5a <__aeabi_ddiv+0x2f6>
    8df2:	9e03      	ldr	r6, [sp, #12]
    8df4:	4659      	mov	r1, fp
    8df6:	46b4      	mov	ip, r6
    8df8:	44e2      	add	sl, ip
    8dfa:	45b2      	cmp	sl, r6
    8dfc:	41ad      	sbcs	r5, r5
    8dfe:	426d      	negs	r5, r5
    8e00:	4445      	add	r5, r8
    8e02:	18eb      	adds	r3, r5, r3
    8e04:	3901      	subs	r1, #1
    8e06:	4598      	cmp	r8, r3
    8e08:	d207      	bcs.n	8e1a <__aeabi_ddiv+0x4b6>
    8e0a:	4298      	cmp	r0, r3
    8e0c:	d900      	bls.n	8e10 <__aeabi_ddiv+0x4ac>
    8e0e:	e07f      	b.n	8f10 <__aeabi_ddiv+0x5ac>
    8e10:	d100      	bne.n	8e14 <__aeabi_ddiv+0x4b0>
    8e12:	e0bc      	b.n	8f8e <__aeabi_ddiv+0x62a>
    8e14:	1a1d      	subs	r5, r3, r0
    8e16:	468b      	mov	fp, r1
    8e18:	e71f      	b.n	8c5a <__aeabi_ddiv+0x2f6>
    8e1a:	4598      	cmp	r8, r3
    8e1c:	d1fa      	bne.n	8e14 <__aeabi_ddiv+0x4b0>
    8e1e:	9d03      	ldr	r5, [sp, #12]
    8e20:	4555      	cmp	r5, sl
    8e22:	d9f2      	bls.n	8e0a <__aeabi_ddiv+0x4a6>
    8e24:	4643      	mov	r3, r8
    8e26:	468b      	mov	fp, r1
    8e28:	1a1d      	subs	r5, r3, r0
    8e2a:	e716      	b.n	8c5a <__aeabi_ddiv+0x2f6>
    8e2c:	469b      	mov	fp, r3
    8e2e:	e6ca      	b.n	8bc6 <__aeabi_ddiv+0x262>
    8e30:	0015      	movs	r5, r2
    8e32:	e6e7      	b.n	8c04 <__aeabi_ddiv+0x2a0>
    8e34:	465a      	mov	r2, fp
    8e36:	08c9      	lsrs	r1, r1, #3
    8e38:	0752      	lsls	r2, r2, #29
    8e3a:	430a      	orrs	r2, r1
    8e3c:	055b      	lsls	r3, r3, #21
    8e3e:	4690      	mov	r8, r2
    8e40:	0d5c      	lsrs	r4, r3, #21
    8e42:	465a      	mov	r2, fp
    8e44:	2301      	movs	r3, #1
    8e46:	9902      	ldr	r1, [sp, #8]
    8e48:	0252      	lsls	r2, r2, #9
    8e4a:	4019      	ands	r1, r3
    8e4c:	0b12      	lsrs	r2, r2, #12
    8e4e:	468c      	mov	ip, r1
    8e50:	e656      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8e52:	2b00      	cmp	r3, #0
    8e54:	d100      	bne.n	8e58 <__aeabi_ddiv+0x4f4>
    8e56:	e76f      	b.n	8d38 <__aeabi_ddiv+0x3d4>
    8e58:	4446      	add	r6, r8
    8e5a:	1e4a      	subs	r2, r1, #1
    8e5c:	45b0      	cmp	r8, r6
    8e5e:	d929      	bls.n	8eb4 <__aeabi_ddiv+0x550>
    8e60:	0011      	movs	r1, r2
    8e62:	4286      	cmp	r6, r0
    8e64:	d000      	beq.n	8e68 <__aeabi_ddiv+0x504>
    8e66:	e765      	b.n	8d34 <__aeabi_ddiv+0x3d0>
    8e68:	9a03      	ldr	r2, [sp, #12]
    8e6a:	4293      	cmp	r3, r2
    8e6c:	d000      	beq.n	8e70 <__aeabi_ddiv+0x50c>
    8e6e:	e761      	b.n	8d34 <__aeabi_ddiv+0x3d0>
    8e70:	e762      	b.n	8d38 <__aeabi_ddiv+0x3d4>
    8e72:	2101      	movs	r1, #1
    8e74:	4249      	negs	r1, r1
    8e76:	2001      	movs	r0, #1
    8e78:	1ac2      	subs	r2, r0, r3
    8e7a:	2a38      	cmp	r2, #56	; 0x38
    8e7c:	dd21      	ble.n	8ec2 <__aeabi_ddiv+0x55e>
    8e7e:	9b02      	ldr	r3, [sp, #8]
    8e80:	4003      	ands	r3, r0
    8e82:	469c      	mov	ip, r3
    8e84:	e638      	b.n	8af8 <__aeabi_ddiv+0x194>
    8e86:	220f      	movs	r2, #15
    8e88:	400a      	ands	r2, r1
    8e8a:	2a04      	cmp	r2, #4
    8e8c:	d100      	bne.n	8e90 <__aeabi_ddiv+0x52c>
    8e8e:	e75b      	b.n	8d48 <__aeabi_ddiv+0x3e4>
    8e90:	000a      	movs	r2, r1
    8e92:	1d11      	adds	r1, r2, #4
    8e94:	4291      	cmp	r1, r2
    8e96:	4192      	sbcs	r2, r2
    8e98:	4252      	negs	r2, r2
    8e9a:	4493      	add	fp, r2
    8e9c:	e754      	b.n	8d48 <__aeabi_ddiv+0x3e4>
    8e9e:	4b47      	ldr	r3, [pc, #284]	; (8fbc <__aeabi_ddiv+0x658>)
    8ea0:	18e3      	adds	r3, r4, r3
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	dde5      	ble.n	8e72 <__aeabi_ddiv+0x50e>
    8ea6:	2201      	movs	r2, #1
    8ea8:	4252      	negs	r2, r2
    8eaa:	e7f2      	b.n	8e92 <__aeabi_ddiv+0x52e>
    8eac:	001d      	movs	r5, r3
    8eae:	e6fa      	b.n	8ca6 <__aeabi_ddiv+0x342>
    8eb0:	469a      	mov	sl, r3
    8eb2:	e71c      	b.n	8cee <__aeabi_ddiv+0x38a>
    8eb4:	42b0      	cmp	r0, r6
    8eb6:	d839      	bhi.n	8f2c <__aeabi_ddiv+0x5c8>
    8eb8:	d06e      	beq.n	8f98 <__aeabi_ddiv+0x634>
    8eba:	0011      	movs	r1, r2
    8ebc:	e73a      	b.n	8d34 <__aeabi_ddiv+0x3d0>
    8ebe:	9302      	str	r3, [sp, #8]
    8ec0:	e73a      	b.n	8d38 <__aeabi_ddiv+0x3d4>
    8ec2:	2a1f      	cmp	r2, #31
    8ec4:	dc3c      	bgt.n	8f40 <__aeabi_ddiv+0x5dc>
    8ec6:	2320      	movs	r3, #32
    8ec8:	1a9b      	subs	r3, r3, r2
    8eca:	000c      	movs	r4, r1
    8ecc:	4658      	mov	r0, fp
    8ece:	4099      	lsls	r1, r3
    8ed0:	4098      	lsls	r0, r3
    8ed2:	1e4b      	subs	r3, r1, #1
    8ed4:	4199      	sbcs	r1, r3
    8ed6:	465b      	mov	r3, fp
    8ed8:	40d4      	lsrs	r4, r2
    8eda:	40d3      	lsrs	r3, r2
    8edc:	4320      	orrs	r0, r4
    8ede:	4308      	orrs	r0, r1
    8ee0:	001a      	movs	r2, r3
    8ee2:	0743      	lsls	r3, r0, #29
    8ee4:	d009      	beq.n	8efa <__aeabi_ddiv+0x596>
    8ee6:	230f      	movs	r3, #15
    8ee8:	4003      	ands	r3, r0
    8eea:	2b04      	cmp	r3, #4
    8eec:	d005      	beq.n	8efa <__aeabi_ddiv+0x596>
    8eee:	0001      	movs	r1, r0
    8ef0:	1d08      	adds	r0, r1, #4
    8ef2:	4288      	cmp	r0, r1
    8ef4:	419b      	sbcs	r3, r3
    8ef6:	425b      	negs	r3, r3
    8ef8:	18d2      	adds	r2, r2, r3
    8efa:	0213      	lsls	r3, r2, #8
    8efc:	d53a      	bpl.n	8f74 <__aeabi_ddiv+0x610>
    8efe:	2301      	movs	r3, #1
    8f00:	9a02      	ldr	r2, [sp, #8]
    8f02:	2401      	movs	r4, #1
    8f04:	401a      	ands	r2, r3
    8f06:	2300      	movs	r3, #0
    8f08:	4694      	mov	ip, r2
    8f0a:	4698      	mov	r8, r3
    8f0c:	2200      	movs	r2, #0
    8f0e:	e5f7      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8f10:	2102      	movs	r1, #2
    8f12:	4249      	negs	r1, r1
    8f14:	468c      	mov	ip, r1
    8f16:	9d03      	ldr	r5, [sp, #12]
    8f18:	44e3      	add	fp, ip
    8f1a:	46ac      	mov	ip, r5
    8f1c:	44e2      	add	sl, ip
    8f1e:	45aa      	cmp	sl, r5
    8f20:	41ad      	sbcs	r5, r5
    8f22:	426d      	negs	r5, r5
    8f24:	4445      	add	r5, r8
    8f26:	18ed      	adds	r5, r5, r3
    8f28:	1a2d      	subs	r5, r5, r0
    8f2a:	e696      	b.n	8c5a <__aeabi_ddiv+0x2f6>
    8f2c:	1e8a      	subs	r2, r1, #2
    8f2e:	9903      	ldr	r1, [sp, #12]
    8f30:	004d      	lsls	r5, r1, #1
    8f32:	428d      	cmp	r5, r1
    8f34:	4189      	sbcs	r1, r1
    8f36:	4249      	negs	r1, r1
    8f38:	4441      	add	r1, r8
    8f3a:	1876      	adds	r6, r6, r1
    8f3c:	9503      	str	r5, [sp, #12]
    8f3e:	e78f      	b.n	8e60 <__aeabi_ddiv+0x4fc>
    8f40:	201f      	movs	r0, #31
    8f42:	4240      	negs	r0, r0
    8f44:	1ac3      	subs	r3, r0, r3
    8f46:	4658      	mov	r0, fp
    8f48:	40d8      	lsrs	r0, r3
    8f4a:	0003      	movs	r3, r0
    8f4c:	2a20      	cmp	r2, #32
    8f4e:	d028      	beq.n	8fa2 <__aeabi_ddiv+0x63e>
    8f50:	2040      	movs	r0, #64	; 0x40
    8f52:	465d      	mov	r5, fp
    8f54:	1a82      	subs	r2, r0, r2
    8f56:	4095      	lsls	r5, r2
    8f58:	4329      	orrs	r1, r5
    8f5a:	1e4a      	subs	r2, r1, #1
    8f5c:	4191      	sbcs	r1, r2
    8f5e:	4319      	orrs	r1, r3
    8f60:	2307      	movs	r3, #7
    8f62:	2200      	movs	r2, #0
    8f64:	400b      	ands	r3, r1
    8f66:	d009      	beq.n	8f7c <__aeabi_ddiv+0x618>
    8f68:	230f      	movs	r3, #15
    8f6a:	2200      	movs	r2, #0
    8f6c:	400b      	ands	r3, r1
    8f6e:	0008      	movs	r0, r1
    8f70:	2b04      	cmp	r3, #4
    8f72:	d1bd      	bne.n	8ef0 <__aeabi_ddiv+0x58c>
    8f74:	0001      	movs	r1, r0
    8f76:	0753      	lsls	r3, r2, #29
    8f78:	0252      	lsls	r2, r2, #9
    8f7a:	0b12      	lsrs	r2, r2, #12
    8f7c:	08c9      	lsrs	r1, r1, #3
    8f7e:	4319      	orrs	r1, r3
    8f80:	2301      	movs	r3, #1
    8f82:	4688      	mov	r8, r1
    8f84:	9902      	ldr	r1, [sp, #8]
    8f86:	2400      	movs	r4, #0
    8f88:	4019      	ands	r1, r3
    8f8a:	468c      	mov	ip, r1
    8f8c:	e5b8      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8f8e:	4552      	cmp	r2, sl
    8f90:	d8be      	bhi.n	8f10 <__aeabi_ddiv+0x5ac>
    8f92:	468b      	mov	fp, r1
    8f94:	2500      	movs	r5, #0
    8f96:	e660      	b.n	8c5a <__aeabi_ddiv+0x2f6>
    8f98:	9d03      	ldr	r5, [sp, #12]
    8f9a:	429d      	cmp	r5, r3
    8f9c:	d3c6      	bcc.n	8f2c <__aeabi_ddiv+0x5c8>
    8f9e:	0011      	movs	r1, r2
    8fa0:	e762      	b.n	8e68 <__aeabi_ddiv+0x504>
    8fa2:	2500      	movs	r5, #0
    8fa4:	e7d8      	b.n	8f58 <__aeabi_ddiv+0x5f4>
    8fa6:	2280      	movs	r2, #128	; 0x80
    8fa8:	465b      	mov	r3, fp
    8faa:	0312      	lsls	r2, r2, #12
    8fac:	431a      	orrs	r2, r3
    8fae:	9b01      	ldr	r3, [sp, #4]
    8fb0:	0312      	lsls	r2, r2, #12
    8fb2:	0b12      	lsrs	r2, r2, #12
    8fb4:	469c      	mov	ip, r3
    8fb6:	4688      	mov	r8, r1
    8fb8:	4c03      	ldr	r4, [pc, #12]	; (8fc8 <__aeabi_ddiv+0x664>)
    8fba:	e5a1      	b.n	8b00 <__aeabi_ddiv+0x19c>
    8fbc:	000003ff 	.word	0x000003ff
    8fc0:	feffffff 	.word	0xfeffffff
    8fc4:	000007fe 	.word	0x000007fe
    8fc8:	000007ff 	.word	0x000007ff

00008fcc <__aeabi_dmul>:
    8fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fce:	4657      	mov	r7, sl
    8fd0:	4645      	mov	r5, r8
    8fd2:	46de      	mov	lr, fp
    8fd4:	464e      	mov	r6, r9
    8fd6:	b5e0      	push	{r5, r6, r7, lr}
    8fd8:	030c      	lsls	r4, r1, #12
    8fda:	4698      	mov	r8, r3
    8fdc:	004e      	lsls	r6, r1, #1
    8fde:	0b23      	lsrs	r3, r4, #12
    8fe0:	b087      	sub	sp, #28
    8fe2:	0007      	movs	r7, r0
    8fe4:	4692      	mov	sl, r2
    8fe6:	469b      	mov	fp, r3
    8fe8:	0d76      	lsrs	r6, r6, #21
    8fea:	0fcd      	lsrs	r5, r1, #31
    8fec:	2e00      	cmp	r6, #0
    8fee:	d06b      	beq.n	90c8 <__aeabi_dmul+0xfc>
    8ff0:	4b6d      	ldr	r3, [pc, #436]	; (91a8 <__aeabi_dmul+0x1dc>)
    8ff2:	429e      	cmp	r6, r3
    8ff4:	d035      	beq.n	9062 <__aeabi_dmul+0x96>
    8ff6:	2480      	movs	r4, #128	; 0x80
    8ff8:	465b      	mov	r3, fp
    8ffa:	0f42      	lsrs	r2, r0, #29
    8ffc:	0424      	lsls	r4, r4, #16
    8ffe:	00db      	lsls	r3, r3, #3
    9000:	4314      	orrs	r4, r2
    9002:	431c      	orrs	r4, r3
    9004:	00c3      	lsls	r3, r0, #3
    9006:	4699      	mov	r9, r3
    9008:	4b68      	ldr	r3, [pc, #416]	; (91ac <__aeabi_dmul+0x1e0>)
    900a:	46a3      	mov	fp, r4
    900c:	469c      	mov	ip, r3
    900e:	2300      	movs	r3, #0
    9010:	2700      	movs	r7, #0
    9012:	4466      	add	r6, ip
    9014:	9302      	str	r3, [sp, #8]
    9016:	4643      	mov	r3, r8
    9018:	031c      	lsls	r4, r3, #12
    901a:	005a      	lsls	r2, r3, #1
    901c:	0fdb      	lsrs	r3, r3, #31
    901e:	4650      	mov	r0, sl
    9020:	0b24      	lsrs	r4, r4, #12
    9022:	0d52      	lsrs	r2, r2, #21
    9024:	4698      	mov	r8, r3
    9026:	d100      	bne.n	902a <__aeabi_dmul+0x5e>
    9028:	e076      	b.n	9118 <__aeabi_dmul+0x14c>
    902a:	4b5f      	ldr	r3, [pc, #380]	; (91a8 <__aeabi_dmul+0x1dc>)
    902c:	429a      	cmp	r2, r3
    902e:	d06d      	beq.n	910c <__aeabi_dmul+0x140>
    9030:	2380      	movs	r3, #128	; 0x80
    9032:	0f41      	lsrs	r1, r0, #29
    9034:	041b      	lsls	r3, r3, #16
    9036:	430b      	orrs	r3, r1
    9038:	495c      	ldr	r1, [pc, #368]	; (91ac <__aeabi_dmul+0x1e0>)
    903a:	00e4      	lsls	r4, r4, #3
    903c:	468c      	mov	ip, r1
    903e:	431c      	orrs	r4, r3
    9040:	00c3      	lsls	r3, r0, #3
    9042:	2000      	movs	r0, #0
    9044:	4462      	add	r2, ip
    9046:	4641      	mov	r1, r8
    9048:	18b6      	adds	r6, r6, r2
    904a:	4069      	eors	r1, r5
    904c:	1c72      	adds	r2, r6, #1
    904e:	9101      	str	r1, [sp, #4]
    9050:	4694      	mov	ip, r2
    9052:	4307      	orrs	r7, r0
    9054:	2f0f      	cmp	r7, #15
    9056:	d900      	bls.n	905a <__aeabi_dmul+0x8e>
    9058:	e0b0      	b.n	91bc <__aeabi_dmul+0x1f0>
    905a:	4a55      	ldr	r2, [pc, #340]	; (91b0 <__aeabi_dmul+0x1e4>)
    905c:	00bf      	lsls	r7, r7, #2
    905e:	59d2      	ldr	r2, [r2, r7]
    9060:	4697      	mov	pc, r2
    9062:	465b      	mov	r3, fp
    9064:	4303      	orrs	r3, r0
    9066:	4699      	mov	r9, r3
    9068:	d000      	beq.n	906c <__aeabi_dmul+0xa0>
    906a:	e087      	b.n	917c <__aeabi_dmul+0x1b0>
    906c:	2300      	movs	r3, #0
    906e:	469b      	mov	fp, r3
    9070:	3302      	adds	r3, #2
    9072:	2708      	movs	r7, #8
    9074:	9302      	str	r3, [sp, #8]
    9076:	e7ce      	b.n	9016 <__aeabi_dmul+0x4a>
    9078:	4642      	mov	r2, r8
    907a:	9201      	str	r2, [sp, #4]
    907c:	2802      	cmp	r0, #2
    907e:	d067      	beq.n	9150 <__aeabi_dmul+0x184>
    9080:	2803      	cmp	r0, #3
    9082:	d100      	bne.n	9086 <__aeabi_dmul+0xba>
    9084:	e20e      	b.n	94a4 <__aeabi_dmul+0x4d8>
    9086:	2801      	cmp	r0, #1
    9088:	d000      	beq.n	908c <__aeabi_dmul+0xc0>
    908a:	e162      	b.n	9352 <__aeabi_dmul+0x386>
    908c:	2300      	movs	r3, #0
    908e:	2400      	movs	r4, #0
    9090:	2200      	movs	r2, #0
    9092:	4699      	mov	r9, r3
    9094:	9901      	ldr	r1, [sp, #4]
    9096:	4001      	ands	r1, r0
    9098:	b2cd      	uxtb	r5, r1
    909a:	2100      	movs	r1, #0
    909c:	0312      	lsls	r2, r2, #12
    909e:	0d0b      	lsrs	r3, r1, #20
    90a0:	0b12      	lsrs	r2, r2, #12
    90a2:	051b      	lsls	r3, r3, #20
    90a4:	4313      	orrs	r3, r2
    90a6:	4a43      	ldr	r2, [pc, #268]	; (91b4 <__aeabi_dmul+0x1e8>)
    90a8:	0524      	lsls	r4, r4, #20
    90aa:	4013      	ands	r3, r2
    90ac:	431c      	orrs	r4, r3
    90ae:	0064      	lsls	r4, r4, #1
    90b0:	07ed      	lsls	r5, r5, #31
    90b2:	0864      	lsrs	r4, r4, #1
    90b4:	432c      	orrs	r4, r5
    90b6:	4648      	mov	r0, r9
    90b8:	0021      	movs	r1, r4
    90ba:	b007      	add	sp, #28
    90bc:	bc3c      	pop	{r2, r3, r4, r5}
    90be:	4690      	mov	r8, r2
    90c0:	4699      	mov	r9, r3
    90c2:	46a2      	mov	sl, r4
    90c4:	46ab      	mov	fp, r5
    90c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90c8:	4303      	orrs	r3, r0
    90ca:	4699      	mov	r9, r3
    90cc:	d04f      	beq.n	916e <__aeabi_dmul+0x1a2>
    90ce:	465b      	mov	r3, fp
    90d0:	2b00      	cmp	r3, #0
    90d2:	d100      	bne.n	90d6 <__aeabi_dmul+0x10a>
    90d4:	e189      	b.n	93ea <__aeabi_dmul+0x41e>
    90d6:	4658      	mov	r0, fp
    90d8:	f000 fd7a 	bl	9bd0 <__clzsi2>
    90dc:	0003      	movs	r3, r0
    90de:	3b0b      	subs	r3, #11
    90e0:	2b1c      	cmp	r3, #28
    90e2:	dd00      	ble.n	90e6 <__aeabi_dmul+0x11a>
    90e4:	e17a      	b.n	93dc <__aeabi_dmul+0x410>
    90e6:	221d      	movs	r2, #29
    90e8:	1ad3      	subs	r3, r2, r3
    90ea:	003a      	movs	r2, r7
    90ec:	0001      	movs	r1, r0
    90ee:	465c      	mov	r4, fp
    90f0:	40da      	lsrs	r2, r3
    90f2:	3908      	subs	r1, #8
    90f4:	408c      	lsls	r4, r1
    90f6:	0013      	movs	r3, r2
    90f8:	408f      	lsls	r7, r1
    90fa:	4323      	orrs	r3, r4
    90fc:	469b      	mov	fp, r3
    90fe:	46b9      	mov	r9, r7
    9100:	2300      	movs	r3, #0
    9102:	4e2d      	ldr	r6, [pc, #180]	; (91b8 <__aeabi_dmul+0x1ec>)
    9104:	2700      	movs	r7, #0
    9106:	1a36      	subs	r6, r6, r0
    9108:	9302      	str	r3, [sp, #8]
    910a:	e784      	b.n	9016 <__aeabi_dmul+0x4a>
    910c:	4653      	mov	r3, sl
    910e:	4323      	orrs	r3, r4
    9110:	d12a      	bne.n	9168 <__aeabi_dmul+0x19c>
    9112:	2400      	movs	r4, #0
    9114:	2002      	movs	r0, #2
    9116:	e796      	b.n	9046 <__aeabi_dmul+0x7a>
    9118:	4653      	mov	r3, sl
    911a:	4323      	orrs	r3, r4
    911c:	d020      	beq.n	9160 <__aeabi_dmul+0x194>
    911e:	2c00      	cmp	r4, #0
    9120:	d100      	bne.n	9124 <__aeabi_dmul+0x158>
    9122:	e157      	b.n	93d4 <__aeabi_dmul+0x408>
    9124:	0020      	movs	r0, r4
    9126:	f000 fd53 	bl	9bd0 <__clzsi2>
    912a:	0003      	movs	r3, r0
    912c:	3b0b      	subs	r3, #11
    912e:	2b1c      	cmp	r3, #28
    9130:	dd00      	ble.n	9134 <__aeabi_dmul+0x168>
    9132:	e149      	b.n	93c8 <__aeabi_dmul+0x3fc>
    9134:	211d      	movs	r1, #29
    9136:	1acb      	subs	r3, r1, r3
    9138:	4651      	mov	r1, sl
    913a:	0002      	movs	r2, r0
    913c:	40d9      	lsrs	r1, r3
    913e:	4653      	mov	r3, sl
    9140:	3a08      	subs	r2, #8
    9142:	4094      	lsls	r4, r2
    9144:	4093      	lsls	r3, r2
    9146:	430c      	orrs	r4, r1
    9148:	4a1b      	ldr	r2, [pc, #108]	; (91b8 <__aeabi_dmul+0x1ec>)
    914a:	1a12      	subs	r2, r2, r0
    914c:	2000      	movs	r0, #0
    914e:	e77a      	b.n	9046 <__aeabi_dmul+0x7a>
    9150:	2501      	movs	r5, #1
    9152:	9b01      	ldr	r3, [sp, #4]
    9154:	4c14      	ldr	r4, [pc, #80]	; (91a8 <__aeabi_dmul+0x1dc>)
    9156:	401d      	ands	r5, r3
    9158:	2300      	movs	r3, #0
    915a:	2200      	movs	r2, #0
    915c:	4699      	mov	r9, r3
    915e:	e79c      	b.n	909a <__aeabi_dmul+0xce>
    9160:	2400      	movs	r4, #0
    9162:	2200      	movs	r2, #0
    9164:	2001      	movs	r0, #1
    9166:	e76e      	b.n	9046 <__aeabi_dmul+0x7a>
    9168:	4653      	mov	r3, sl
    916a:	2003      	movs	r0, #3
    916c:	e76b      	b.n	9046 <__aeabi_dmul+0x7a>
    916e:	2300      	movs	r3, #0
    9170:	469b      	mov	fp, r3
    9172:	3301      	adds	r3, #1
    9174:	2704      	movs	r7, #4
    9176:	2600      	movs	r6, #0
    9178:	9302      	str	r3, [sp, #8]
    917a:	e74c      	b.n	9016 <__aeabi_dmul+0x4a>
    917c:	2303      	movs	r3, #3
    917e:	4681      	mov	r9, r0
    9180:	270c      	movs	r7, #12
    9182:	9302      	str	r3, [sp, #8]
    9184:	e747      	b.n	9016 <__aeabi_dmul+0x4a>
    9186:	2280      	movs	r2, #128	; 0x80
    9188:	2300      	movs	r3, #0
    918a:	2500      	movs	r5, #0
    918c:	0312      	lsls	r2, r2, #12
    918e:	4699      	mov	r9, r3
    9190:	4c05      	ldr	r4, [pc, #20]	; (91a8 <__aeabi_dmul+0x1dc>)
    9192:	e782      	b.n	909a <__aeabi_dmul+0xce>
    9194:	465c      	mov	r4, fp
    9196:	464b      	mov	r3, r9
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	e76f      	b.n	907c <__aeabi_dmul+0xb0>
    919c:	465c      	mov	r4, fp
    919e:	464b      	mov	r3, r9
    91a0:	9501      	str	r5, [sp, #4]
    91a2:	9802      	ldr	r0, [sp, #8]
    91a4:	e76a      	b.n	907c <__aeabi_dmul+0xb0>
    91a6:	46c0      	nop			; (mov r8, r8)
    91a8:	000007ff 	.word	0x000007ff
    91ac:	fffffc01 	.word	0xfffffc01
    91b0:	0000c294 	.word	0x0000c294
    91b4:	800fffff 	.word	0x800fffff
    91b8:	fffffc0d 	.word	0xfffffc0d
    91bc:	464a      	mov	r2, r9
    91be:	4649      	mov	r1, r9
    91c0:	0c17      	lsrs	r7, r2, #16
    91c2:	0c1a      	lsrs	r2, r3, #16
    91c4:	041b      	lsls	r3, r3, #16
    91c6:	0c1b      	lsrs	r3, r3, #16
    91c8:	0408      	lsls	r0, r1, #16
    91ca:	0019      	movs	r1, r3
    91cc:	0c00      	lsrs	r0, r0, #16
    91ce:	4341      	muls	r1, r0
    91d0:	0015      	movs	r5, r2
    91d2:	4688      	mov	r8, r1
    91d4:	0019      	movs	r1, r3
    91d6:	437d      	muls	r5, r7
    91d8:	4379      	muls	r1, r7
    91da:	9503      	str	r5, [sp, #12]
    91dc:	4689      	mov	r9, r1
    91de:	0029      	movs	r1, r5
    91e0:	0015      	movs	r5, r2
    91e2:	4345      	muls	r5, r0
    91e4:	444d      	add	r5, r9
    91e6:	9502      	str	r5, [sp, #8]
    91e8:	4645      	mov	r5, r8
    91ea:	0c2d      	lsrs	r5, r5, #16
    91ec:	46aa      	mov	sl, r5
    91ee:	9d02      	ldr	r5, [sp, #8]
    91f0:	4455      	add	r5, sl
    91f2:	45a9      	cmp	r9, r5
    91f4:	d906      	bls.n	9204 <__aeabi_dmul+0x238>
    91f6:	468a      	mov	sl, r1
    91f8:	2180      	movs	r1, #128	; 0x80
    91fa:	0249      	lsls	r1, r1, #9
    91fc:	4689      	mov	r9, r1
    91fe:	44ca      	add	sl, r9
    9200:	4651      	mov	r1, sl
    9202:	9103      	str	r1, [sp, #12]
    9204:	0c29      	lsrs	r1, r5, #16
    9206:	9104      	str	r1, [sp, #16]
    9208:	4641      	mov	r1, r8
    920a:	0409      	lsls	r1, r1, #16
    920c:	042d      	lsls	r5, r5, #16
    920e:	0c09      	lsrs	r1, r1, #16
    9210:	4688      	mov	r8, r1
    9212:	0029      	movs	r1, r5
    9214:	0c25      	lsrs	r5, r4, #16
    9216:	0424      	lsls	r4, r4, #16
    9218:	4441      	add	r1, r8
    921a:	0c24      	lsrs	r4, r4, #16
    921c:	9105      	str	r1, [sp, #20]
    921e:	0021      	movs	r1, r4
    9220:	4341      	muls	r1, r0
    9222:	4688      	mov	r8, r1
    9224:	0021      	movs	r1, r4
    9226:	4379      	muls	r1, r7
    9228:	468a      	mov	sl, r1
    922a:	4368      	muls	r0, r5
    922c:	4641      	mov	r1, r8
    922e:	4450      	add	r0, sl
    9230:	4681      	mov	r9, r0
    9232:	0c08      	lsrs	r0, r1, #16
    9234:	4448      	add	r0, r9
    9236:	436f      	muls	r7, r5
    9238:	4582      	cmp	sl, r0
    923a:	d903      	bls.n	9244 <__aeabi_dmul+0x278>
    923c:	2180      	movs	r1, #128	; 0x80
    923e:	0249      	lsls	r1, r1, #9
    9240:	4689      	mov	r9, r1
    9242:	444f      	add	r7, r9
    9244:	0c01      	lsrs	r1, r0, #16
    9246:	4689      	mov	r9, r1
    9248:	0039      	movs	r1, r7
    924a:	4449      	add	r1, r9
    924c:	9102      	str	r1, [sp, #8]
    924e:	4641      	mov	r1, r8
    9250:	040f      	lsls	r7, r1, #16
    9252:	9904      	ldr	r1, [sp, #16]
    9254:	0c3f      	lsrs	r7, r7, #16
    9256:	4688      	mov	r8, r1
    9258:	0400      	lsls	r0, r0, #16
    925a:	19c0      	adds	r0, r0, r7
    925c:	4480      	add	r8, r0
    925e:	4641      	mov	r1, r8
    9260:	9104      	str	r1, [sp, #16]
    9262:	4659      	mov	r1, fp
    9264:	0c0f      	lsrs	r7, r1, #16
    9266:	0409      	lsls	r1, r1, #16
    9268:	0c09      	lsrs	r1, r1, #16
    926a:	4688      	mov	r8, r1
    926c:	4359      	muls	r1, r3
    926e:	468a      	mov	sl, r1
    9270:	0039      	movs	r1, r7
    9272:	4351      	muls	r1, r2
    9274:	4689      	mov	r9, r1
    9276:	4641      	mov	r1, r8
    9278:	434a      	muls	r2, r1
    927a:	4651      	mov	r1, sl
    927c:	0c09      	lsrs	r1, r1, #16
    927e:	468b      	mov	fp, r1
    9280:	437b      	muls	r3, r7
    9282:	18d2      	adds	r2, r2, r3
    9284:	445a      	add	r2, fp
    9286:	4293      	cmp	r3, r2
    9288:	d903      	bls.n	9292 <__aeabi_dmul+0x2c6>
    928a:	2380      	movs	r3, #128	; 0x80
    928c:	025b      	lsls	r3, r3, #9
    928e:	469b      	mov	fp, r3
    9290:	44d9      	add	r9, fp
    9292:	4651      	mov	r1, sl
    9294:	0409      	lsls	r1, r1, #16
    9296:	0c09      	lsrs	r1, r1, #16
    9298:	468a      	mov	sl, r1
    929a:	4641      	mov	r1, r8
    929c:	4361      	muls	r1, r4
    929e:	437c      	muls	r4, r7
    92a0:	0c13      	lsrs	r3, r2, #16
    92a2:	0412      	lsls	r2, r2, #16
    92a4:	444b      	add	r3, r9
    92a6:	4452      	add	r2, sl
    92a8:	46a1      	mov	r9, r4
    92aa:	468a      	mov	sl, r1
    92ac:	003c      	movs	r4, r7
    92ae:	4641      	mov	r1, r8
    92b0:	436c      	muls	r4, r5
    92b2:	434d      	muls	r5, r1
    92b4:	4651      	mov	r1, sl
    92b6:	444d      	add	r5, r9
    92b8:	0c0f      	lsrs	r7, r1, #16
    92ba:	197d      	adds	r5, r7, r5
    92bc:	45a9      	cmp	r9, r5
    92be:	d903      	bls.n	92c8 <__aeabi_dmul+0x2fc>
    92c0:	2180      	movs	r1, #128	; 0x80
    92c2:	0249      	lsls	r1, r1, #9
    92c4:	4688      	mov	r8, r1
    92c6:	4444      	add	r4, r8
    92c8:	9f04      	ldr	r7, [sp, #16]
    92ca:	9903      	ldr	r1, [sp, #12]
    92cc:	46b8      	mov	r8, r7
    92ce:	4441      	add	r1, r8
    92d0:	468b      	mov	fp, r1
    92d2:	4583      	cmp	fp, r0
    92d4:	4180      	sbcs	r0, r0
    92d6:	4241      	negs	r1, r0
    92d8:	4688      	mov	r8, r1
    92da:	4651      	mov	r1, sl
    92dc:	0408      	lsls	r0, r1, #16
    92de:	042f      	lsls	r7, r5, #16
    92e0:	0c00      	lsrs	r0, r0, #16
    92e2:	183f      	adds	r7, r7, r0
    92e4:	4658      	mov	r0, fp
    92e6:	9902      	ldr	r1, [sp, #8]
    92e8:	1810      	adds	r0, r2, r0
    92ea:	4689      	mov	r9, r1
    92ec:	4290      	cmp	r0, r2
    92ee:	4192      	sbcs	r2, r2
    92f0:	444f      	add	r7, r9
    92f2:	46ba      	mov	sl, r7
    92f4:	4252      	negs	r2, r2
    92f6:	4699      	mov	r9, r3
    92f8:	4693      	mov	fp, r2
    92fa:	44c2      	add	sl, r8
    92fc:	44d1      	add	r9, sl
    92fe:	44cb      	add	fp, r9
    9300:	428f      	cmp	r7, r1
    9302:	41bf      	sbcs	r7, r7
    9304:	45c2      	cmp	sl, r8
    9306:	4189      	sbcs	r1, r1
    9308:	4599      	cmp	r9, r3
    930a:	419b      	sbcs	r3, r3
    930c:	4593      	cmp	fp, r2
    930e:	4192      	sbcs	r2, r2
    9310:	427f      	negs	r7, r7
    9312:	4249      	negs	r1, r1
    9314:	0c2d      	lsrs	r5, r5, #16
    9316:	4252      	negs	r2, r2
    9318:	430f      	orrs	r7, r1
    931a:	425b      	negs	r3, r3
    931c:	4313      	orrs	r3, r2
    931e:	197f      	adds	r7, r7, r5
    9320:	18ff      	adds	r7, r7, r3
    9322:	465b      	mov	r3, fp
    9324:	193c      	adds	r4, r7, r4
    9326:	0ddb      	lsrs	r3, r3, #23
    9328:	9a05      	ldr	r2, [sp, #20]
    932a:	0264      	lsls	r4, r4, #9
    932c:	431c      	orrs	r4, r3
    932e:	0243      	lsls	r3, r0, #9
    9330:	4313      	orrs	r3, r2
    9332:	1e5d      	subs	r5, r3, #1
    9334:	41ab      	sbcs	r3, r5
    9336:	465a      	mov	r2, fp
    9338:	0dc0      	lsrs	r0, r0, #23
    933a:	4303      	orrs	r3, r0
    933c:	0252      	lsls	r2, r2, #9
    933e:	4313      	orrs	r3, r2
    9340:	01e2      	lsls	r2, r4, #7
    9342:	d556      	bpl.n	93f2 <__aeabi_dmul+0x426>
    9344:	2001      	movs	r0, #1
    9346:	085a      	lsrs	r2, r3, #1
    9348:	4003      	ands	r3, r0
    934a:	4313      	orrs	r3, r2
    934c:	07e2      	lsls	r2, r4, #31
    934e:	4313      	orrs	r3, r2
    9350:	0864      	lsrs	r4, r4, #1
    9352:	485a      	ldr	r0, [pc, #360]	; (94bc <__aeabi_dmul+0x4f0>)
    9354:	4460      	add	r0, ip
    9356:	2800      	cmp	r0, #0
    9358:	dd4d      	ble.n	93f6 <__aeabi_dmul+0x42a>
    935a:	075a      	lsls	r2, r3, #29
    935c:	d009      	beq.n	9372 <__aeabi_dmul+0x3a6>
    935e:	220f      	movs	r2, #15
    9360:	401a      	ands	r2, r3
    9362:	2a04      	cmp	r2, #4
    9364:	d005      	beq.n	9372 <__aeabi_dmul+0x3a6>
    9366:	1d1a      	adds	r2, r3, #4
    9368:	429a      	cmp	r2, r3
    936a:	419b      	sbcs	r3, r3
    936c:	425b      	negs	r3, r3
    936e:	18e4      	adds	r4, r4, r3
    9370:	0013      	movs	r3, r2
    9372:	01e2      	lsls	r2, r4, #7
    9374:	d504      	bpl.n	9380 <__aeabi_dmul+0x3b4>
    9376:	2080      	movs	r0, #128	; 0x80
    9378:	4a51      	ldr	r2, [pc, #324]	; (94c0 <__aeabi_dmul+0x4f4>)
    937a:	00c0      	lsls	r0, r0, #3
    937c:	4014      	ands	r4, r2
    937e:	4460      	add	r0, ip
    9380:	4a50      	ldr	r2, [pc, #320]	; (94c4 <__aeabi_dmul+0x4f8>)
    9382:	4290      	cmp	r0, r2
    9384:	dd00      	ble.n	9388 <__aeabi_dmul+0x3bc>
    9386:	e6e3      	b.n	9150 <__aeabi_dmul+0x184>
    9388:	2501      	movs	r5, #1
    938a:	08db      	lsrs	r3, r3, #3
    938c:	0762      	lsls	r2, r4, #29
    938e:	431a      	orrs	r2, r3
    9390:	0264      	lsls	r4, r4, #9
    9392:	9b01      	ldr	r3, [sp, #4]
    9394:	4691      	mov	r9, r2
    9396:	0b22      	lsrs	r2, r4, #12
    9398:	0544      	lsls	r4, r0, #21
    939a:	0d64      	lsrs	r4, r4, #21
    939c:	401d      	ands	r5, r3
    939e:	e67c      	b.n	909a <__aeabi_dmul+0xce>
    93a0:	2280      	movs	r2, #128	; 0x80
    93a2:	4659      	mov	r1, fp
    93a4:	0312      	lsls	r2, r2, #12
    93a6:	4211      	tst	r1, r2
    93a8:	d008      	beq.n	93bc <__aeabi_dmul+0x3f0>
    93aa:	4214      	tst	r4, r2
    93ac:	d106      	bne.n	93bc <__aeabi_dmul+0x3f0>
    93ae:	4322      	orrs	r2, r4
    93b0:	0312      	lsls	r2, r2, #12
    93b2:	0b12      	lsrs	r2, r2, #12
    93b4:	4645      	mov	r5, r8
    93b6:	4699      	mov	r9, r3
    93b8:	4c43      	ldr	r4, [pc, #268]	; (94c8 <__aeabi_dmul+0x4fc>)
    93ba:	e66e      	b.n	909a <__aeabi_dmul+0xce>
    93bc:	465b      	mov	r3, fp
    93be:	431a      	orrs	r2, r3
    93c0:	0312      	lsls	r2, r2, #12
    93c2:	0b12      	lsrs	r2, r2, #12
    93c4:	4c40      	ldr	r4, [pc, #256]	; (94c8 <__aeabi_dmul+0x4fc>)
    93c6:	e668      	b.n	909a <__aeabi_dmul+0xce>
    93c8:	0003      	movs	r3, r0
    93ca:	4654      	mov	r4, sl
    93cc:	3b28      	subs	r3, #40	; 0x28
    93ce:	409c      	lsls	r4, r3
    93d0:	2300      	movs	r3, #0
    93d2:	e6b9      	b.n	9148 <__aeabi_dmul+0x17c>
    93d4:	f000 fbfc 	bl	9bd0 <__clzsi2>
    93d8:	3020      	adds	r0, #32
    93da:	e6a6      	b.n	912a <__aeabi_dmul+0x15e>
    93dc:	0003      	movs	r3, r0
    93de:	3b28      	subs	r3, #40	; 0x28
    93e0:	409f      	lsls	r7, r3
    93e2:	2300      	movs	r3, #0
    93e4:	46bb      	mov	fp, r7
    93e6:	4699      	mov	r9, r3
    93e8:	e68a      	b.n	9100 <__aeabi_dmul+0x134>
    93ea:	f000 fbf1 	bl	9bd0 <__clzsi2>
    93ee:	3020      	adds	r0, #32
    93f0:	e674      	b.n	90dc <__aeabi_dmul+0x110>
    93f2:	46b4      	mov	ip, r6
    93f4:	e7ad      	b.n	9352 <__aeabi_dmul+0x386>
    93f6:	2501      	movs	r5, #1
    93f8:	1a2a      	subs	r2, r5, r0
    93fa:	2a38      	cmp	r2, #56	; 0x38
    93fc:	dd06      	ble.n	940c <__aeabi_dmul+0x440>
    93fe:	9b01      	ldr	r3, [sp, #4]
    9400:	2400      	movs	r4, #0
    9402:	401d      	ands	r5, r3
    9404:	2300      	movs	r3, #0
    9406:	2200      	movs	r2, #0
    9408:	4699      	mov	r9, r3
    940a:	e646      	b.n	909a <__aeabi_dmul+0xce>
    940c:	2a1f      	cmp	r2, #31
    940e:	dc21      	bgt.n	9454 <__aeabi_dmul+0x488>
    9410:	2520      	movs	r5, #32
    9412:	0020      	movs	r0, r4
    9414:	1aad      	subs	r5, r5, r2
    9416:	001e      	movs	r6, r3
    9418:	40ab      	lsls	r3, r5
    941a:	40a8      	lsls	r0, r5
    941c:	40d6      	lsrs	r6, r2
    941e:	1e5d      	subs	r5, r3, #1
    9420:	41ab      	sbcs	r3, r5
    9422:	4330      	orrs	r0, r6
    9424:	4318      	orrs	r0, r3
    9426:	40d4      	lsrs	r4, r2
    9428:	0743      	lsls	r3, r0, #29
    942a:	d009      	beq.n	9440 <__aeabi_dmul+0x474>
    942c:	230f      	movs	r3, #15
    942e:	4003      	ands	r3, r0
    9430:	2b04      	cmp	r3, #4
    9432:	d005      	beq.n	9440 <__aeabi_dmul+0x474>
    9434:	0003      	movs	r3, r0
    9436:	1d18      	adds	r0, r3, #4
    9438:	4298      	cmp	r0, r3
    943a:	419b      	sbcs	r3, r3
    943c:	425b      	negs	r3, r3
    943e:	18e4      	adds	r4, r4, r3
    9440:	0223      	lsls	r3, r4, #8
    9442:	d521      	bpl.n	9488 <__aeabi_dmul+0x4bc>
    9444:	2501      	movs	r5, #1
    9446:	9b01      	ldr	r3, [sp, #4]
    9448:	2401      	movs	r4, #1
    944a:	401d      	ands	r5, r3
    944c:	2300      	movs	r3, #0
    944e:	2200      	movs	r2, #0
    9450:	4699      	mov	r9, r3
    9452:	e622      	b.n	909a <__aeabi_dmul+0xce>
    9454:	251f      	movs	r5, #31
    9456:	0021      	movs	r1, r4
    9458:	426d      	negs	r5, r5
    945a:	1a28      	subs	r0, r5, r0
    945c:	40c1      	lsrs	r1, r0
    945e:	0008      	movs	r0, r1
    9460:	2a20      	cmp	r2, #32
    9462:	d01d      	beq.n	94a0 <__aeabi_dmul+0x4d4>
    9464:	355f      	adds	r5, #95	; 0x5f
    9466:	1aaa      	subs	r2, r5, r2
    9468:	4094      	lsls	r4, r2
    946a:	4323      	orrs	r3, r4
    946c:	1e5c      	subs	r4, r3, #1
    946e:	41a3      	sbcs	r3, r4
    9470:	2507      	movs	r5, #7
    9472:	4303      	orrs	r3, r0
    9474:	401d      	ands	r5, r3
    9476:	2200      	movs	r2, #0
    9478:	2d00      	cmp	r5, #0
    947a:	d009      	beq.n	9490 <__aeabi_dmul+0x4c4>
    947c:	220f      	movs	r2, #15
    947e:	2400      	movs	r4, #0
    9480:	401a      	ands	r2, r3
    9482:	0018      	movs	r0, r3
    9484:	2a04      	cmp	r2, #4
    9486:	d1d6      	bne.n	9436 <__aeabi_dmul+0x46a>
    9488:	0003      	movs	r3, r0
    948a:	0765      	lsls	r5, r4, #29
    948c:	0264      	lsls	r4, r4, #9
    948e:	0b22      	lsrs	r2, r4, #12
    9490:	08db      	lsrs	r3, r3, #3
    9492:	432b      	orrs	r3, r5
    9494:	2501      	movs	r5, #1
    9496:	4699      	mov	r9, r3
    9498:	9b01      	ldr	r3, [sp, #4]
    949a:	2400      	movs	r4, #0
    949c:	401d      	ands	r5, r3
    949e:	e5fc      	b.n	909a <__aeabi_dmul+0xce>
    94a0:	2400      	movs	r4, #0
    94a2:	e7e2      	b.n	946a <__aeabi_dmul+0x49e>
    94a4:	2280      	movs	r2, #128	; 0x80
    94a6:	2501      	movs	r5, #1
    94a8:	0312      	lsls	r2, r2, #12
    94aa:	4322      	orrs	r2, r4
    94ac:	9901      	ldr	r1, [sp, #4]
    94ae:	0312      	lsls	r2, r2, #12
    94b0:	0b12      	lsrs	r2, r2, #12
    94b2:	400d      	ands	r5, r1
    94b4:	4699      	mov	r9, r3
    94b6:	4c04      	ldr	r4, [pc, #16]	; (94c8 <__aeabi_dmul+0x4fc>)
    94b8:	e5ef      	b.n	909a <__aeabi_dmul+0xce>
    94ba:	46c0      	nop			; (mov r8, r8)
    94bc:	000003ff 	.word	0x000003ff
    94c0:	feffffff 	.word	0xfeffffff
    94c4:	000007fe 	.word	0x000007fe
    94c8:	000007ff 	.word	0x000007ff

000094cc <__aeabi_dsub>:
    94cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    94ce:	4646      	mov	r6, r8
    94d0:	46d6      	mov	lr, sl
    94d2:	464f      	mov	r7, r9
    94d4:	030c      	lsls	r4, r1, #12
    94d6:	b5c0      	push	{r6, r7, lr}
    94d8:	0fcd      	lsrs	r5, r1, #31
    94da:	004e      	lsls	r6, r1, #1
    94dc:	0a61      	lsrs	r1, r4, #9
    94de:	0f44      	lsrs	r4, r0, #29
    94e0:	430c      	orrs	r4, r1
    94e2:	00c1      	lsls	r1, r0, #3
    94e4:	0058      	lsls	r0, r3, #1
    94e6:	0d40      	lsrs	r0, r0, #21
    94e8:	4684      	mov	ip, r0
    94ea:	468a      	mov	sl, r1
    94ec:	000f      	movs	r7, r1
    94ee:	0319      	lsls	r1, r3, #12
    94f0:	0f50      	lsrs	r0, r2, #29
    94f2:	0a49      	lsrs	r1, r1, #9
    94f4:	4301      	orrs	r1, r0
    94f6:	48c6      	ldr	r0, [pc, #792]	; (9810 <__aeabi_dsub+0x344>)
    94f8:	0d76      	lsrs	r6, r6, #21
    94fa:	46a8      	mov	r8, r5
    94fc:	0fdb      	lsrs	r3, r3, #31
    94fe:	00d2      	lsls	r2, r2, #3
    9500:	4584      	cmp	ip, r0
    9502:	d100      	bne.n	9506 <__aeabi_dsub+0x3a>
    9504:	e0d8      	b.n	96b8 <__aeabi_dsub+0x1ec>
    9506:	2001      	movs	r0, #1
    9508:	4043      	eors	r3, r0
    950a:	42ab      	cmp	r3, r5
    950c:	d100      	bne.n	9510 <__aeabi_dsub+0x44>
    950e:	e0a6      	b.n	965e <__aeabi_dsub+0x192>
    9510:	4660      	mov	r0, ip
    9512:	1a35      	subs	r5, r6, r0
    9514:	2d00      	cmp	r5, #0
    9516:	dc00      	bgt.n	951a <__aeabi_dsub+0x4e>
    9518:	e105      	b.n	9726 <__aeabi_dsub+0x25a>
    951a:	2800      	cmp	r0, #0
    951c:	d110      	bne.n	9540 <__aeabi_dsub+0x74>
    951e:	000b      	movs	r3, r1
    9520:	4313      	orrs	r3, r2
    9522:	d100      	bne.n	9526 <__aeabi_dsub+0x5a>
    9524:	e0d7      	b.n	96d6 <__aeabi_dsub+0x20a>
    9526:	1e6b      	subs	r3, r5, #1
    9528:	2b00      	cmp	r3, #0
    952a:	d000      	beq.n	952e <__aeabi_dsub+0x62>
    952c:	e14b      	b.n	97c6 <__aeabi_dsub+0x2fa>
    952e:	4653      	mov	r3, sl
    9530:	1a9f      	subs	r7, r3, r2
    9532:	45ba      	cmp	sl, r7
    9534:	4180      	sbcs	r0, r0
    9536:	1a64      	subs	r4, r4, r1
    9538:	4240      	negs	r0, r0
    953a:	1a24      	subs	r4, r4, r0
    953c:	2601      	movs	r6, #1
    953e:	e01e      	b.n	957e <__aeabi_dsub+0xb2>
    9540:	4bb3      	ldr	r3, [pc, #716]	; (9810 <__aeabi_dsub+0x344>)
    9542:	429e      	cmp	r6, r3
    9544:	d048      	beq.n	95d8 <__aeabi_dsub+0x10c>
    9546:	2380      	movs	r3, #128	; 0x80
    9548:	041b      	lsls	r3, r3, #16
    954a:	4319      	orrs	r1, r3
    954c:	2d38      	cmp	r5, #56	; 0x38
    954e:	dd00      	ble.n	9552 <__aeabi_dsub+0x86>
    9550:	e119      	b.n	9786 <__aeabi_dsub+0x2ba>
    9552:	2d1f      	cmp	r5, #31
    9554:	dd00      	ble.n	9558 <__aeabi_dsub+0x8c>
    9556:	e14c      	b.n	97f2 <__aeabi_dsub+0x326>
    9558:	2320      	movs	r3, #32
    955a:	000f      	movs	r7, r1
    955c:	1b5b      	subs	r3, r3, r5
    955e:	0010      	movs	r0, r2
    9560:	409a      	lsls	r2, r3
    9562:	409f      	lsls	r7, r3
    9564:	40e8      	lsrs	r0, r5
    9566:	1e53      	subs	r3, r2, #1
    9568:	419a      	sbcs	r2, r3
    956a:	40e9      	lsrs	r1, r5
    956c:	4307      	orrs	r7, r0
    956e:	4317      	orrs	r7, r2
    9570:	4653      	mov	r3, sl
    9572:	1bdf      	subs	r7, r3, r7
    9574:	1a61      	subs	r1, r4, r1
    9576:	45ba      	cmp	sl, r7
    9578:	41a4      	sbcs	r4, r4
    957a:	4264      	negs	r4, r4
    957c:	1b0c      	subs	r4, r1, r4
    957e:	0223      	lsls	r3, r4, #8
    9580:	d400      	bmi.n	9584 <__aeabi_dsub+0xb8>
    9582:	e0c5      	b.n	9710 <__aeabi_dsub+0x244>
    9584:	0264      	lsls	r4, r4, #9
    9586:	0a65      	lsrs	r5, r4, #9
    9588:	2d00      	cmp	r5, #0
    958a:	d100      	bne.n	958e <__aeabi_dsub+0xc2>
    958c:	e0f6      	b.n	977c <__aeabi_dsub+0x2b0>
    958e:	0028      	movs	r0, r5
    9590:	f000 fb1e 	bl	9bd0 <__clzsi2>
    9594:	0003      	movs	r3, r0
    9596:	3b08      	subs	r3, #8
    9598:	2b1f      	cmp	r3, #31
    959a:	dd00      	ble.n	959e <__aeabi_dsub+0xd2>
    959c:	e0e9      	b.n	9772 <__aeabi_dsub+0x2a6>
    959e:	2220      	movs	r2, #32
    95a0:	003c      	movs	r4, r7
    95a2:	1ad2      	subs	r2, r2, r3
    95a4:	409d      	lsls	r5, r3
    95a6:	40d4      	lsrs	r4, r2
    95a8:	409f      	lsls	r7, r3
    95aa:	4325      	orrs	r5, r4
    95ac:	429e      	cmp	r6, r3
    95ae:	dd00      	ble.n	95b2 <__aeabi_dsub+0xe6>
    95b0:	e0db      	b.n	976a <__aeabi_dsub+0x29e>
    95b2:	1b9e      	subs	r6, r3, r6
    95b4:	1c73      	adds	r3, r6, #1
    95b6:	2b1f      	cmp	r3, #31
    95b8:	dd00      	ble.n	95bc <__aeabi_dsub+0xf0>
    95ba:	e10a      	b.n	97d2 <__aeabi_dsub+0x306>
    95bc:	2220      	movs	r2, #32
    95be:	0038      	movs	r0, r7
    95c0:	1ad2      	subs	r2, r2, r3
    95c2:	0029      	movs	r1, r5
    95c4:	4097      	lsls	r7, r2
    95c6:	002c      	movs	r4, r5
    95c8:	4091      	lsls	r1, r2
    95ca:	40d8      	lsrs	r0, r3
    95cc:	1e7a      	subs	r2, r7, #1
    95ce:	4197      	sbcs	r7, r2
    95d0:	40dc      	lsrs	r4, r3
    95d2:	2600      	movs	r6, #0
    95d4:	4301      	orrs	r1, r0
    95d6:	430f      	orrs	r7, r1
    95d8:	077b      	lsls	r3, r7, #29
    95da:	d009      	beq.n	95f0 <__aeabi_dsub+0x124>
    95dc:	230f      	movs	r3, #15
    95de:	403b      	ands	r3, r7
    95e0:	2b04      	cmp	r3, #4
    95e2:	d005      	beq.n	95f0 <__aeabi_dsub+0x124>
    95e4:	1d3b      	adds	r3, r7, #4
    95e6:	42bb      	cmp	r3, r7
    95e8:	41bf      	sbcs	r7, r7
    95ea:	427f      	negs	r7, r7
    95ec:	19e4      	adds	r4, r4, r7
    95ee:	001f      	movs	r7, r3
    95f0:	0223      	lsls	r3, r4, #8
    95f2:	d525      	bpl.n	9640 <__aeabi_dsub+0x174>
    95f4:	4b86      	ldr	r3, [pc, #536]	; (9810 <__aeabi_dsub+0x344>)
    95f6:	3601      	adds	r6, #1
    95f8:	429e      	cmp	r6, r3
    95fa:	d100      	bne.n	95fe <__aeabi_dsub+0x132>
    95fc:	e0af      	b.n	975e <__aeabi_dsub+0x292>
    95fe:	4b85      	ldr	r3, [pc, #532]	; (9814 <__aeabi_dsub+0x348>)
    9600:	2501      	movs	r5, #1
    9602:	401c      	ands	r4, r3
    9604:	4643      	mov	r3, r8
    9606:	0762      	lsls	r2, r4, #29
    9608:	08ff      	lsrs	r7, r7, #3
    960a:	0264      	lsls	r4, r4, #9
    960c:	0576      	lsls	r6, r6, #21
    960e:	4317      	orrs	r7, r2
    9610:	0b24      	lsrs	r4, r4, #12
    9612:	0d76      	lsrs	r6, r6, #21
    9614:	401d      	ands	r5, r3
    9616:	2100      	movs	r1, #0
    9618:	0324      	lsls	r4, r4, #12
    961a:	0b23      	lsrs	r3, r4, #12
    961c:	0d0c      	lsrs	r4, r1, #20
    961e:	4a7e      	ldr	r2, [pc, #504]	; (9818 <__aeabi_dsub+0x34c>)
    9620:	0524      	lsls	r4, r4, #20
    9622:	431c      	orrs	r4, r3
    9624:	4014      	ands	r4, r2
    9626:	0533      	lsls	r3, r6, #20
    9628:	4323      	orrs	r3, r4
    962a:	005b      	lsls	r3, r3, #1
    962c:	07ed      	lsls	r5, r5, #31
    962e:	085b      	lsrs	r3, r3, #1
    9630:	432b      	orrs	r3, r5
    9632:	0038      	movs	r0, r7
    9634:	0019      	movs	r1, r3
    9636:	bc1c      	pop	{r2, r3, r4}
    9638:	4690      	mov	r8, r2
    963a:	4699      	mov	r9, r3
    963c:	46a2      	mov	sl, r4
    963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9640:	2501      	movs	r5, #1
    9642:	4643      	mov	r3, r8
    9644:	0762      	lsls	r2, r4, #29
    9646:	08ff      	lsrs	r7, r7, #3
    9648:	4317      	orrs	r7, r2
    964a:	08e4      	lsrs	r4, r4, #3
    964c:	401d      	ands	r5, r3
    964e:	4b70      	ldr	r3, [pc, #448]	; (9810 <__aeabi_dsub+0x344>)
    9650:	429e      	cmp	r6, r3
    9652:	d036      	beq.n	96c2 <__aeabi_dsub+0x1f6>
    9654:	0324      	lsls	r4, r4, #12
    9656:	0576      	lsls	r6, r6, #21
    9658:	0b24      	lsrs	r4, r4, #12
    965a:	0d76      	lsrs	r6, r6, #21
    965c:	e7db      	b.n	9616 <__aeabi_dsub+0x14a>
    965e:	4663      	mov	r3, ip
    9660:	1af3      	subs	r3, r6, r3
    9662:	2b00      	cmp	r3, #0
    9664:	dc00      	bgt.n	9668 <__aeabi_dsub+0x19c>
    9666:	e094      	b.n	9792 <__aeabi_dsub+0x2c6>
    9668:	4660      	mov	r0, ip
    966a:	2800      	cmp	r0, #0
    966c:	d035      	beq.n	96da <__aeabi_dsub+0x20e>
    966e:	4868      	ldr	r0, [pc, #416]	; (9810 <__aeabi_dsub+0x344>)
    9670:	4286      	cmp	r6, r0
    9672:	d0b1      	beq.n	95d8 <__aeabi_dsub+0x10c>
    9674:	2780      	movs	r7, #128	; 0x80
    9676:	043f      	lsls	r7, r7, #16
    9678:	4339      	orrs	r1, r7
    967a:	2b38      	cmp	r3, #56	; 0x38
    967c:	dc00      	bgt.n	9680 <__aeabi_dsub+0x1b4>
    967e:	e0fd      	b.n	987c <__aeabi_dsub+0x3b0>
    9680:	430a      	orrs	r2, r1
    9682:	0017      	movs	r7, r2
    9684:	2100      	movs	r1, #0
    9686:	1e7a      	subs	r2, r7, #1
    9688:	4197      	sbcs	r7, r2
    968a:	4457      	add	r7, sl
    968c:	4557      	cmp	r7, sl
    968e:	4180      	sbcs	r0, r0
    9690:	1909      	adds	r1, r1, r4
    9692:	4244      	negs	r4, r0
    9694:	190c      	adds	r4, r1, r4
    9696:	0223      	lsls	r3, r4, #8
    9698:	d53a      	bpl.n	9710 <__aeabi_dsub+0x244>
    969a:	4b5d      	ldr	r3, [pc, #372]	; (9810 <__aeabi_dsub+0x344>)
    969c:	3601      	adds	r6, #1
    969e:	429e      	cmp	r6, r3
    96a0:	d100      	bne.n	96a4 <__aeabi_dsub+0x1d8>
    96a2:	e14b      	b.n	993c <__aeabi_dsub+0x470>
    96a4:	2201      	movs	r2, #1
    96a6:	4b5b      	ldr	r3, [pc, #364]	; (9814 <__aeabi_dsub+0x348>)
    96a8:	401c      	ands	r4, r3
    96aa:	087b      	lsrs	r3, r7, #1
    96ac:	4017      	ands	r7, r2
    96ae:	431f      	orrs	r7, r3
    96b0:	07e2      	lsls	r2, r4, #31
    96b2:	4317      	orrs	r7, r2
    96b4:	0864      	lsrs	r4, r4, #1
    96b6:	e78f      	b.n	95d8 <__aeabi_dsub+0x10c>
    96b8:	0008      	movs	r0, r1
    96ba:	4310      	orrs	r0, r2
    96bc:	d000      	beq.n	96c0 <__aeabi_dsub+0x1f4>
    96be:	e724      	b.n	950a <__aeabi_dsub+0x3e>
    96c0:	e721      	b.n	9506 <__aeabi_dsub+0x3a>
    96c2:	0023      	movs	r3, r4
    96c4:	433b      	orrs	r3, r7
    96c6:	d100      	bne.n	96ca <__aeabi_dsub+0x1fe>
    96c8:	e1b9      	b.n	9a3e <__aeabi_dsub+0x572>
    96ca:	2280      	movs	r2, #128	; 0x80
    96cc:	0312      	lsls	r2, r2, #12
    96ce:	4314      	orrs	r4, r2
    96d0:	0324      	lsls	r4, r4, #12
    96d2:	0b24      	lsrs	r4, r4, #12
    96d4:	e79f      	b.n	9616 <__aeabi_dsub+0x14a>
    96d6:	002e      	movs	r6, r5
    96d8:	e77e      	b.n	95d8 <__aeabi_dsub+0x10c>
    96da:	0008      	movs	r0, r1
    96dc:	4310      	orrs	r0, r2
    96de:	d100      	bne.n	96e2 <__aeabi_dsub+0x216>
    96e0:	e0ca      	b.n	9878 <__aeabi_dsub+0x3ac>
    96e2:	1e58      	subs	r0, r3, #1
    96e4:	4684      	mov	ip, r0
    96e6:	2800      	cmp	r0, #0
    96e8:	d000      	beq.n	96ec <__aeabi_dsub+0x220>
    96ea:	e0e7      	b.n	98bc <__aeabi_dsub+0x3f0>
    96ec:	4452      	add	r2, sl
    96ee:	4552      	cmp	r2, sl
    96f0:	4180      	sbcs	r0, r0
    96f2:	1864      	adds	r4, r4, r1
    96f4:	4240      	negs	r0, r0
    96f6:	1824      	adds	r4, r4, r0
    96f8:	0017      	movs	r7, r2
    96fa:	2601      	movs	r6, #1
    96fc:	0223      	lsls	r3, r4, #8
    96fe:	d507      	bpl.n	9710 <__aeabi_dsub+0x244>
    9700:	2602      	movs	r6, #2
    9702:	e7cf      	b.n	96a4 <__aeabi_dsub+0x1d8>
    9704:	4664      	mov	r4, ip
    9706:	432c      	orrs	r4, r5
    9708:	d100      	bne.n	970c <__aeabi_dsub+0x240>
    970a:	e1b3      	b.n	9a74 <__aeabi_dsub+0x5a8>
    970c:	002c      	movs	r4, r5
    970e:	4667      	mov	r7, ip
    9710:	077b      	lsls	r3, r7, #29
    9712:	d000      	beq.n	9716 <__aeabi_dsub+0x24a>
    9714:	e762      	b.n	95dc <__aeabi_dsub+0x110>
    9716:	0763      	lsls	r3, r4, #29
    9718:	08ff      	lsrs	r7, r7, #3
    971a:	431f      	orrs	r7, r3
    971c:	2501      	movs	r5, #1
    971e:	4643      	mov	r3, r8
    9720:	08e4      	lsrs	r4, r4, #3
    9722:	401d      	ands	r5, r3
    9724:	e793      	b.n	964e <__aeabi_dsub+0x182>
    9726:	2d00      	cmp	r5, #0
    9728:	d178      	bne.n	981c <__aeabi_dsub+0x350>
    972a:	1c75      	adds	r5, r6, #1
    972c:	056d      	lsls	r5, r5, #21
    972e:	0d6d      	lsrs	r5, r5, #21
    9730:	2d01      	cmp	r5, #1
    9732:	dc00      	bgt.n	9736 <__aeabi_dsub+0x26a>
    9734:	e0f2      	b.n	991c <__aeabi_dsub+0x450>
    9736:	4650      	mov	r0, sl
    9738:	1a80      	subs	r0, r0, r2
    973a:	4582      	cmp	sl, r0
    973c:	41bf      	sbcs	r7, r7
    973e:	1a65      	subs	r5, r4, r1
    9740:	427f      	negs	r7, r7
    9742:	1bed      	subs	r5, r5, r7
    9744:	4684      	mov	ip, r0
    9746:	0228      	lsls	r0, r5, #8
    9748:	d400      	bmi.n	974c <__aeabi_dsub+0x280>
    974a:	e08c      	b.n	9866 <__aeabi_dsub+0x39a>
    974c:	4650      	mov	r0, sl
    974e:	1a17      	subs	r7, r2, r0
    9750:	42ba      	cmp	r2, r7
    9752:	4192      	sbcs	r2, r2
    9754:	1b0c      	subs	r4, r1, r4
    9756:	4255      	negs	r5, r2
    9758:	1b65      	subs	r5, r4, r5
    975a:	4698      	mov	r8, r3
    975c:	e714      	b.n	9588 <__aeabi_dsub+0xbc>
    975e:	2501      	movs	r5, #1
    9760:	4643      	mov	r3, r8
    9762:	2400      	movs	r4, #0
    9764:	401d      	ands	r5, r3
    9766:	2700      	movs	r7, #0
    9768:	e755      	b.n	9616 <__aeabi_dsub+0x14a>
    976a:	4c2a      	ldr	r4, [pc, #168]	; (9814 <__aeabi_dsub+0x348>)
    976c:	1af6      	subs	r6, r6, r3
    976e:	402c      	ands	r4, r5
    9770:	e732      	b.n	95d8 <__aeabi_dsub+0x10c>
    9772:	003d      	movs	r5, r7
    9774:	3828      	subs	r0, #40	; 0x28
    9776:	4085      	lsls	r5, r0
    9778:	2700      	movs	r7, #0
    977a:	e717      	b.n	95ac <__aeabi_dsub+0xe0>
    977c:	0038      	movs	r0, r7
    977e:	f000 fa27 	bl	9bd0 <__clzsi2>
    9782:	3020      	adds	r0, #32
    9784:	e706      	b.n	9594 <__aeabi_dsub+0xc8>
    9786:	430a      	orrs	r2, r1
    9788:	0017      	movs	r7, r2
    978a:	2100      	movs	r1, #0
    978c:	1e7a      	subs	r2, r7, #1
    978e:	4197      	sbcs	r7, r2
    9790:	e6ee      	b.n	9570 <__aeabi_dsub+0xa4>
    9792:	2b00      	cmp	r3, #0
    9794:	d000      	beq.n	9798 <__aeabi_dsub+0x2cc>
    9796:	e0e5      	b.n	9964 <__aeabi_dsub+0x498>
    9798:	1c73      	adds	r3, r6, #1
    979a:	469c      	mov	ip, r3
    979c:	055b      	lsls	r3, r3, #21
    979e:	0d5b      	lsrs	r3, r3, #21
    97a0:	2b01      	cmp	r3, #1
    97a2:	dc00      	bgt.n	97a6 <__aeabi_dsub+0x2da>
    97a4:	e09f      	b.n	98e6 <__aeabi_dsub+0x41a>
    97a6:	4b1a      	ldr	r3, [pc, #104]	; (9810 <__aeabi_dsub+0x344>)
    97a8:	459c      	cmp	ip, r3
    97aa:	d100      	bne.n	97ae <__aeabi_dsub+0x2e2>
    97ac:	e0c5      	b.n	993a <__aeabi_dsub+0x46e>
    97ae:	4452      	add	r2, sl
    97b0:	4552      	cmp	r2, sl
    97b2:	4180      	sbcs	r0, r0
    97b4:	1864      	adds	r4, r4, r1
    97b6:	4240      	negs	r0, r0
    97b8:	1824      	adds	r4, r4, r0
    97ba:	07e7      	lsls	r7, r4, #31
    97bc:	0852      	lsrs	r2, r2, #1
    97be:	4317      	orrs	r7, r2
    97c0:	0864      	lsrs	r4, r4, #1
    97c2:	4666      	mov	r6, ip
    97c4:	e708      	b.n	95d8 <__aeabi_dsub+0x10c>
    97c6:	4812      	ldr	r0, [pc, #72]	; (9810 <__aeabi_dsub+0x344>)
    97c8:	4285      	cmp	r5, r0
    97ca:	d100      	bne.n	97ce <__aeabi_dsub+0x302>
    97cc:	e085      	b.n	98da <__aeabi_dsub+0x40e>
    97ce:	001d      	movs	r5, r3
    97d0:	e6bc      	b.n	954c <__aeabi_dsub+0x80>
    97d2:	0029      	movs	r1, r5
    97d4:	3e1f      	subs	r6, #31
    97d6:	40f1      	lsrs	r1, r6
    97d8:	2b20      	cmp	r3, #32
    97da:	d100      	bne.n	97de <__aeabi_dsub+0x312>
    97dc:	e07f      	b.n	98de <__aeabi_dsub+0x412>
    97de:	2240      	movs	r2, #64	; 0x40
    97e0:	1ad3      	subs	r3, r2, r3
    97e2:	409d      	lsls	r5, r3
    97e4:	432f      	orrs	r7, r5
    97e6:	1e7d      	subs	r5, r7, #1
    97e8:	41af      	sbcs	r7, r5
    97ea:	2400      	movs	r4, #0
    97ec:	430f      	orrs	r7, r1
    97ee:	2600      	movs	r6, #0
    97f0:	e78e      	b.n	9710 <__aeabi_dsub+0x244>
    97f2:	002b      	movs	r3, r5
    97f4:	000f      	movs	r7, r1
    97f6:	3b20      	subs	r3, #32
    97f8:	40df      	lsrs	r7, r3
    97fa:	2d20      	cmp	r5, #32
    97fc:	d071      	beq.n	98e2 <__aeabi_dsub+0x416>
    97fe:	2340      	movs	r3, #64	; 0x40
    9800:	1b5d      	subs	r5, r3, r5
    9802:	40a9      	lsls	r1, r5
    9804:	430a      	orrs	r2, r1
    9806:	1e51      	subs	r1, r2, #1
    9808:	418a      	sbcs	r2, r1
    980a:	2100      	movs	r1, #0
    980c:	4317      	orrs	r7, r2
    980e:	e6af      	b.n	9570 <__aeabi_dsub+0xa4>
    9810:	000007ff 	.word	0x000007ff
    9814:	ff7fffff 	.word	0xff7fffff
    9818:	800fffff 	.word	0x800fffff
    981c:	2e00      	cmp	r6, #0
    981e:	d03e      	beq.n	989e <__aeabi_dsub+0x3d2>
    9820:	4eb3      	ldr	r6, [pc, #716]	; (9af0 <__aeabi_dsub+0x624>)
    9822:	45b4      	cmp	ip, r6
    9824:	d045      	beq.n	98b2 <__aeabi_dsub+0x3e6>
    9826:	2680      	movs	r6, #128	; 0x80
    9828:	0436      	lsls	r6, r6, #16
    982a:	426d      	negs	r5, r5
    982c:	4334      	orrs	r4, r6
    982e:	2d38      	cmp	r5, #56	; 0x38
    9830:	dd00      	ble.n	9834 <__aeabi_dsub+0x368>
    9832:	e0a8      	b.n	9986 <__aeabi_dsub+0x4ba>
    9834:	2d1f      	cmp	r5, #31
    9836:	dd00      	ble.n	983a <__aeabi_dsub+0x36e>
    9838:	e11f      	b.n	9a7a <__aeabi_dsub+0x5ae>
    983a:	2620      	movs	r6, #32
    983c:	0027      	movs	r7, r4
    983e:	4650      	mov	r0, sl
    9840:	1b76      	subs	r6, r6, r5
    9842:	40b7      	lsls	r7, r6
    9844:	40e8      	lsrs	r0, r5
    9846:	4307      	orrs	r7, r0
    9848:	4650      	mov	r0, sl
    984a:	40b0      	lsls	r0, r6
    984c:	1e46      	subs	r6, r0, #1
    984e:	41b0      	sbcs	r0, r6
    9850:	40ec      	lsrs	r4, r5
    9852:	4338      	orrs	r0, r7
    9854:	1a17      	subs	r7, r2, r0
    9856:	42ba      	cmp	r2, r7
    9858:	4192      	sbcs	r2, r2
    985a:	1b0c      	subs	r4, r1, r4
    985c:	4252      	negs	r2, r2
    985e:	1aa4      	subs	r4, r4, r2
    9860:	4666      	mov	r6, ip
    9862:	4698      	mov	r8, r3
    9864:	e68b      	b.n	957e <__aeabi_dsub+0xb2>
    9866:	4664      	mov	r4, ip
    9868:	4667      	mov	r7, ip
    986a:	432c      	orrs	r4, r5
    986c:	d000      	beq.n	9870 <__aeabi_dsub+0x3a4>
    986e:	e68b      	b.n	9588 <__aeabi_dsub+0xbc>
    9870:	2500      	movs	r5, #0
    9872:	2600      	movs	r6, #0
    9874:	2700      	movs	r7, #0
    9876:	e6ea      	b.n	964e <__aeabi_dsub+0x182>
    9878:	001e      	movs	r6, r3
    987a:	e6ad      	b.n	95d8 <__aeabi_dsub+0x10c>
    987c:	2b1f      	cmp	r3, #31
    987e:	dc60      	bgt.n	9942 <__aeabi_dsub+0x476>
    9880:	2720      	movs	r7, #32
    9882:	1af8      	subs	r0, r7, r3
    9884:	000f      	movs	r7, r1
    9886:	4684      	mov	ip, r0
    9888:	4087      	lsls	r7, r0
    988a:	0010      	movs	r0, r2
    988c:	40d8      	lsrs	r0, r3
    988e:	4307      	orrs	r7, r0
    9890:	4660      	mov	r0, ip
    9892:	4082      	lsls	r2, r0
    9894:	1e50      	subs	r0, r2, #1
    9896:	4182      	sbcs	r2, r0
    9898:	40d9      	lsrs	r1, r3
    989a:	4317      	orrs	r7, r2
    989c:	e6f5      	b.n	968a <__aeabi_dsub+0x1be>
    989e:	0026      	movs	r6, r4
    98a0:	4650      	mov	r0, sl
    98a2:	4306      	orrs	r6, r0
    98a4:	d005      	beq.n	98b2 <__aeabi_dsub+0x3e6>
    98a6:	43ed      	mvns	r5, r5
    98a8:	2d00      	cmp	r5, #0
    98aa:	d0d3      	beq.n	9854 <__aeabi_dsub+0x388>
    98ac:	4e90      	ldr	r6, [pc, #576]	; (9af0 <__aeabi_dsub+0x624>)
    98ae:	45b4      	cmp	ip, r6
    98b0:	d1bd      	bne.n	982e <__aeabi_dsub+0x362>
    98b2:	000c      	movs	r4, r1
    98b4:	0017      	movs	r7, r2
    98b6:	4666      	mov	r6, ip
    98b8:	4698      	mov	r8, r3
    98ba:	e68d      	b.n	95d8 <__aeabi_dsub+0x10c>
    98bc:	488c      	ldr	r0, [pc, #560]	; (9af0 <__aeabi_dsub+0x624>)
    98be:	4283      	cmp	r3, r0
    98c0:	d00b      	beq.n	98da <__aeabi_dsub+0x40e>
    98c2:	4663      	mov	r3, ip
    98c4:	e6d9      	b.n	967a <__aeabi_dsub+0x1ae>
    98c6:	2d00      	cmp	r5, #0
    98c8:	d000      	beq.n	98cc <__aeabi_dsub+0x400>
    98ca:	e096      	b.n	99fa <__aeabi_dsub+0x52e>
    98cc:	0008      	movs	r0, r1
    98ce:	4310      	orrs	r0, r2
    98d0:	d100      	bne.n	98d4 <__aeabi_dsub+0x408>
    98d2:	e0e2      	b.n	9a9a <__aeabi_dsub+0x5ce>
    98d4:	000c      	movs	r4, r1
    98d6:	0017      	movs	r7, r2
    98d8:	4698      	mov	r8, r3
    98da:	4e85      	ldr	r6, [pc, #532]	; (9af0 <__aeabi_dsub+0x624>)
    98dc:	e67c      	b.n	95d8 <__aeabi_dsub+0x10c>
    98de:	2500      	movs	r5, #0
    98e0:	e780      	b.n	97e4 <__aeabi_dsub+0x318>
    98e2:	2100      	movs	r1, #0
    98e4:	e78e      	b.n	9804 <__aeabi_dsub+0x338>
    98e6:	0023      	movs	r3, r4
    98e8:	4650      	mov	r0, sl
    98ea:	4303      	orrs	r3, r0
    98ec:	2e00      	cmp	r6, #0
    98ee:	d000      	beq.n	98f2 <__aeabi_dsub+0x426>
    98f0:	e0a8      	b.n	9a44 <__aeabi_dsub+0x578>
    98f2:	2b00      	cmp	r3, #0
    98f4:	d100      	bne.n	98f8 <__aeabi_dsub+0x42c>
    98f6:	e0de      	b.n	9ab6 <__aeabi_dsub+0x5ea>
    98f8:	000b      	movs	r3, r1
    98fa:	4313      	orrs	r3, r2
    98fc:	d100      	bne.n	9900 <__aeabi_dsub+0x434>
    98fe:	e66b      	b.n	95d8 <__aeabi_dsub+0x10c>
    9900:	4452      	add	r2, sl
    9902:	4552      	cmp	r2, sl
    9904:	4180      	sbcs	r0, r0
    9906:	1864      	adds	r4, r4, r1
    9908:	4240      	negs	r0, r0
    990a:	1824      	adds	r4, r4, r0
    990c:	0017      	movs	r7, r2
    990e:	0223      	lsls	r3, r4, #8
    9910:	d400      	bmi.n	9914 <__aeabi_dsub+0x448>
    9912:	e6fd      	b.n	9710 <__aeabi_dsub+0x244>
    9914:	4b77      	ldr	r3, [pc, #476]	; (9af4 <__aeabi_dsub+0x628>)
    9916:	4666      	mov	r6, ip
    9918:	401c      	ands	r4, r3
    991a:	e65d      	b.n	95d8 <__aeabi_dsub+0x10c>
    991c:	0025      	movs	r5, r4
    991e:	4650      	mov	r0, sl
    9920:	4305      	orrs	r5, r0
    9922:	2e00      	cmp	r6, #0
    9924:	d1cf      	bne.n	98c6 <__aeabi_dsub+0x3fa>
    9926:	2d00      	cmp	r5, #0
    9928:	d14f      	bne.n	99ca <__aeabi_dsub+0x4fe>
    992a:	000c      	movs	r4, r1
    992c:	4314      	orrs	r4, r2
    992e:	d100      	bne.n	9932 <__aeabi_dsub+0x466>
    9930:	e0a0      	b.n	9a74 <__aeabi_dsub+0x5a8>
    9932:	000c      	movs	r4, r1
    9934:	0017      	movs	r7, r2
    9936:	4698      	mov	r8, r3
    9938:	e64e      	b.n	95d8 <__aeabi_dsub+0x10c>
    993a:	4666      	mov	r6, ip
    993c:	2400      	movs	r4, #0
    993e:	2700      	movs	r7, #0
    9940:	e685      	b.n	964e <__aeabi_dsub+0x182>
    9942:	001f      	movs	r7, r3
    9944:	0008      	movs	r0, r1
    9946:	3f20      	subs	r7, #32
    9948:	40f8      	lsrs	r0, r7
    994a:	0007      	movs	r7, r0
    994c:	2b20      	cmp	r3, #32
    994e:	d100      	bne.n	9952 <__aeabi_dsub+0x486>
    9950:	e08e      	b.n	9a70 <__aeabi_dsub+0x5a4>
    9952:	2040      	movs	r0, #64	; 0x40
    9954:	1ac3      	subs	r3, r0, r3
    9956:	4099      	lsls	r1, r3
    9958:	430a      	orrs	r2, r1
    995a:	1e51      	subs	r1, r2, #1
    995c:	418a      	sbcs	r2, r1
    995e:	2100      	movs	r1, #0
    9960:	4317      	orrs	r7, r2
    9962:	e692      	b.n	968a <__aeabi_dsub+0x1be>
    9964:	2e00      	cmp	r6, #0
    9966:	d114      	bne.n	9992 <__aeabi_dsub+0x4c6>
    9968:	0026      	movs	r6, r4
    996a:	4650      	mov	r0, sl
    996c:	4306      	orrs	r6, r0
    996e:	d062      	beq.n	9a36 <__aeabi_dsub+0x56a>
    9970:	43db      	mvns	r3, r3
    9972:	2b00      	cmp	r3, #0
    9974:	d15c      	bne.n	9a30 <__aeabi_dsub+0x564>
    9976:	1887      	adds	r7, r0, r2
    9978:	4297      	cmp	r7, r2
    997a:	4192      	sbcs	r2, r2
    997c:	1864      	adds	r4, r4, r1
    997e:	4252      	negs	r2, r2
    9980:	18a4      	adds	r4, r4, r2
    9982:	4666      	mov	r6, ip
    9984:	e687      	b.n	9696 <__aeabi_dsub+0x1ca>
    9986:	4650      	mov	r0, sl
    9988:	4320      	orrs	r0, r4
    998a:	1e44      	subs	r4, r0, #1
    998c:	41a0      	sbcs	r0, r4
    998e:	2400      	movs	r4, #0
    9990:	e760      	b.n	9854 <__aeabi_dsub+0x388>
    9992:	4e57      	ldr	r6, [pc, #348]	; (9af0 <__aeabi_dsub+0x624>)
    9994:	45b4      	cmp	ip, r6
    9996:	d04e      	beq.n	9a36 <__aeabi_dsub+0x56a>
    9998:	2680      	movs	r6, #128	; 0x80
    999a:	0436      	lsls	r6, r6, #16
    999c:	425b      	negs	r3, r3
    999e:	4334      	orrs	r4, r6
    99a0:	2b38      	cmp	r3, #56	; 0x38
    99a2:	dd00      	ble.n	99a6 <__aeabi_dsub+0x4da>
    99a4:	e07f      	b.n	9aa6 <__aeabi_dsub+0x5da>
    99a6:	2b1f      	cmp	r3, #31
    99a8:	dd00      	ble.n	99ac <__aeabi_dsub+0x4e0>
    99aa:	e08b      	b.n	9ac4 <__aeabi_dsub+0x5f8>
    99ac:	2620      	movs	r6, #32
    99ae:	0027      	movs	r7, r4
    99b0:	4650      	mov	r0, sl
    99b2:	1af6      	subs	r6, r6, r3
    99b4:	40b7      	lsls	r7, r6
    99b6:	40d8      	lsrs	r0, r3
    99b8:	4307      	orrs	r7, r0
    99ba:	4650      	mov	r0, sl
    99bc:	40b0      	lsls	r0, r6
    99be:	1e46      	subs	r6, r0, #1
    99c0:	41b0      	sbcs	r0, r6
    99c2:	4307      	orrs	r7, r0
    99c4:	40dc      	lsrs	r4, r3
    99c6:	18bf      	adds	r7, r7, r2
    99c8:	e7d6      	b.n	9978 <__aeabi_dsub+0x4ac>
    99ca:	000d      	movs	r5, r1
    99cc:	4315      	orrs	r5, r2
    99ce:	d100      	bne.n	99d2 <__aeabi_dsub+0x506>
    99d0:	e602      	b.n	95d8 <__aeabi_dsub+0x10c>
    99d2:	4650      	mov	r0, sl
    99d4:	1a80      	subs	r0, r0, r2
    99d6:	4582      	cmp	sl, r0
    99d8:	41bf      	sbcs	r7, r7
    99da:	1a65      	subs	r5, r4, r1
    99dc:	427f      	negs	r7, r7
    99de:	1bed      	subs	r5, r5, r7
    99e0:	4684      	mov	ip, r0
    99e2:	0228      	lsls	r0, r5, #8
    99e4:	d400      	bmi.n	99e8 <__aeabi_dsub+0x51c>
    99e6:	e68d      	b.n	9704 <__aeabi_dsub+0x238>
    99e8:	4650      	mov	r0, sl
    99ea:	1a17      	subs	r7, r2, r0
    99ec:	42ba      	cmp	r2, r7
    99ee:	4192      	sbcs	r2, r2
    99f0:	1b0c      	subs	r4, r1, r4
    99f2:	4252      	negs	r2, r2
    99f4:	1aa4      	subs	r4, r4, r2
    99f6:	4698      	mov	r8, r3
    99f8:	e5ee      	b.n	95d8 <__aeabi_dsub+0x10c>
    99fa:	000d      	movs	r5, r1
    99fc:	4315      	orrs	r5, r2
    99fe:	d100      	bne.n	9a02 <__aeabi_dsub+0x536>
    9a00:	e76b      	b.n	98da <__aeabi_dsub+0x40e>
    9a02:	4650      	mov	r0, sl
    9a04:	0767      	lsls	r7, r4, #29
    9a06:	08c0      	lsrs	r0, r0, #3
    9a08:	4307      	orrs	r7, r0
    9a0a:	2080      	movs	r0, #128	; 0x80
    9a0c:	08e4      	lsrs	r4, r4, #3
    9a0e:	0300      	lsls	r0, r0, #12
    9a10:	4204      	tst	r4, r0
    9a12:	d007      	beq.n	9a24 <__aeabi_dsub+0x558>
    9a14:	08cd      	lsrs	r5, r1, #3
    9a16:	4205      	tst	r5, r0
    9a18:	d104      	bne.n	9a24 <__aeabi_dsub+0x558>
    9a1a:	002c      	movs	r4, r5
    9a1c:	4698      	mov	r8, r3
    9a1e:	08d7      	lsrs	r7, r2, #3
    9a20:	0749      	lsls	r1, r1, #29
    9a22:	430f      	orrs	r7, r1
    9a24:	0f7b      	lsrs	r3, r7, #29
    9a26:	00e4      	lsls	r4, r4, #3
    9a28:	431c      	orrs	r4, r3
    9a2a:	00ff      	lsls	r7, r7, #3
    9a2c:	4e30      	ldr	r6, [pc, #192]	; (9af0 <__aeabi_dsub+0x624>)
    9a2e:	e5d3      	b.n	95d8 <__aeabi_dsub+0x10c>
    9a30:	4e2f      	ldr	r6, [pc, #188]	; (9af0 <__aeabi_dsub+0x624>)
    9a32:	45b4      	cmp	ip, r6
    9a34:	d1b4      	bne.n	99a0 <__aeabi_dsub+0x4d4>
    9a36:	000c      	movs	r4, r1
    9a38:	0017      	movs	r7, r2
    9a3a:	4666      	mov	r6, ip
    9a3c:	e5cc      	b.n	95d8 <__aeabi_dsub+0x10c>
    9a3e:	2700      	movs	r7, #0
    9a40:	2400      	movs	r4, #0
    9a42:	e5e8      	b.n	9616 <__aeabi_dsub+0x14a>
    9a44:	2b00      	cmp	r3, #0
    9a46:	d039      	beq.n	9abc <__aeabi_dsub+0x5f0>
    9a48:	000b      	movs	r3, r1
    9a4a:	4313      	orrs	r3, r2
    9a4c:	d100      	bne.n	9a50 <__aeabi_dsub+0x584>
    9a4e:	e744      	b.n	98da <__aeabi_dsub+0x40e>
    9a50:	08c0      	lsrs	r0, r0, #3
    9a52:	0767      	lsls	r7, r4, #29
    9a54:	4307      	orrs	r7, r0
    9a56:	2080      	movs	r0, #128	; 0x80
    9a58:	08e4      	lsrs	r4, r4, #3
    9a5a:	0300      	lsls	r0, r0, #12
    9a5c:	4204      	tst	r4, r0
    9a5e:	d0e1      	beq.n	9a24 <__aeabi_dsub+0x558>
    9a60:	08cb      	lsrs	r3, r1, #3
    9a62:	4203      	tst	r3, r0
    9a64:	d1de      	bne.n	9a24 <__aeabi_dsub+0x558>
    9a66:	08d7      	lsrs	r7, r2, #3
    9a68:	0749      	lsls	r1, r1, #29
    9a6a:	430f      	orrs	r7, r1
    9a6c:	001c      	movs	r4, r3
    9a6e:	e7d9      	b.n	9a24 <__aeabi_dsub+0x558>
    9a70:	2100      	movs	r1, #0
    9a72:	e771      	b.n	9958 <__aeabi_dsub+0x48c>
    9a74:	2500      	movs	r5, #0
    9a76:	2700      	movs	r7, #0
    9a78:	e5e9      	b.n	964e <__aeabi_dsub+0x182>
    9a7a:	002e      	movs	r6, r5
    9a7c:	0027      	movs	r7, r4
    9a7e:	3e20      	subs	r6, #32
    9a80:	40f7      	lsrs	r7, r6
    9a82:	2d20      	cmp	r5, #32
    9a84:	d02f      	beq.n	9ae6 <__aeabi_dsub+0x61a>
    9a86:	2640      	movs	r6, #64	; 0x40
    9a88:	1b75      	subs	r5, r6, r5
    9a8a:	40ac      	lsls	r4, r5
    9a8c:	4650      	mov	r0, sl
    9a8e:	4320      	orrs	r0, r4
    9a90:	1e44      	subs	r4, r0, #1
    9a92:	41a0      	sbcs	r0, r4
    9a94:	2400      	movs	r4, #0
    9a96:	4338      	orrs	r0, r7
    9a98:	e6dc      	b.n	9854 <__aeabi_dsub+0x388>
    9a9a:	2480      	movs	r4, #128	; 0x80
    9a9c:	2500      	movs	r5, #0
    9a9e:	0324      	lsls	r4, r4, #12
    9aa0:	4e13      	ldr	r6, [pc, #76]	; (9af0 <__aeabi_dsub+0x624>)
    9aa2:	2700      	movs	r7, #0
    9aa4:	e5d3      	b.n	964e <__aeabi_dsub+0x182>
    9aa6:	4650      	mov	r0, sl
    9aa8:	4320      	orrs	r0, r4
    9aaa:	0007      	movs	r7, r0
    9aac:	1e78      	subs	r0, r7, #1
    9aae:	4187      	sbcs	r7, r0
    9ab0:	2400      	movs	r4, #0
    9ab2:	18bf      	adds	r7, r7, r2
    9ab4:	e760      	b.n	9978 <__aeabi_dsub+0x4ac>
    9ab6:	000c      	movs	r4, r1
    9ab8:	0017      	movs	r7, r2
    9aba:	e58d      	b.n	95d8 <__aeabi_dsub+0x10c>
    9abc:	000c      	movs	r4, r1
    9abe:	0017      	movs	r7, r2
    9ac0:	4e0b      	ldr	r6, [pc, #44]	; (9af0 <__aeabi_dsub+0x624>)
    9ac2:	e589      	b.n	95d8 <__aeabi_dsub+0x10c>
    9ac4:	001e      	movs	r6, r3
    9ac6:	0027      	movs	r7, r4
    9ac8:	3e20      	subs	r6, #32
    9aca:	40f7      	lsrs	r7, r6
    9acc:	2b20      	cmp	r3, #32
    9ace:	d00c      	beq.n	9aea <__aeabi_dsub+0x61e>
    9ad0:	2640      	movs	r6, #64	; 0x40
    9ad2:	1af3      	subs	r3, r6, r3
    9ad4:	409c      	lsls	r4, r3
    9ad6:	4650      	mov	r0, sl
    9ad8:	4320      	orrs	r0, r4
    9ada:	1e44      	subs	r4, r0, #1
    9adc:	41a0      	sbcs	r0, r4
    9ade:	4307      	orrs	r7, r0
    9ae0:	2400      	movs	r4, #0
    9ae2:	18bf      	adds	r7, r7, r2
    9ae4:	e748      	b.n	9978 <__aeabi_dsub+0x4ac>
    9ae6:	2400      	movs	r4, #0
    9ae8:	e7d0      	b.n	9a8c <__aeabi_dsub+0x5c0>
    9aea:	2400      	movs	r4, #0
    9aec:	e7f3      	b.n	9ad6 <__aeabi_dsub+0x60a>
    9aee:	46c0      	nop			; (mov r8, r8)
    9af0:	000007ff 	.word	0x000007ff
    9af4:	ff7fffff 	.word	0xff7fffff

00009af8 <__aeabi_d2iz>:
    9af8:	b530      	push	{r4, r5, lr}
    9afa:	4d13      	ldr	r5, [pc, #76]	; (9b48 <__aeabi_d2iz+0x50>)
    9afc:	030a      	lsls	r2, r1, #12
    9afe:	004b      	lsls	r3, r1, #1
    9b00:	0b12      	lsrs	r2, r2, #12
    9b02:	0d5b      	lsrs	r3, r3, #21
    9b04:	0fc9      	lsrs	r1, r1, #31
    9b06:	2400      	movs	r4, #0
    9b08:	42ab      	cmp	r3, r5
    9b0a:	dd10      	ble.n	9b2e <__aeabi_d2iz+0x36>
    9b0c:	4c0f      	ldr	r4, [pc, #60]	; (9b4c <__aeabi_d2iz+0x54>)
    9b0e:	42a3      	cmp	r3, r4
    9b10:	dc0f      	bgt.n	9b32 <__aeabi_d2iz+0x3a>
    9b12:	2480      	movs	r4, #128	; 0x80
    9b14:	4d0e      	ldr	r5, [pc, #56]	; (9b50 <__aeabi_d2iz+0x58>)
    9b16:	0364      	lsls	r4, r4, #13
    9b18:	4322      	orrs	r2, r4
    9b1a:	1aed      	subs	r5, r5, r3
    9b1c:	2d1f      	cmp	r5, #31
    9b1e:	dd0b      	ble.n	9b38 <__aeabi_d2iz+0x40>
    9b20:	480c      	ldr	r0, [pc, #48]	; (9b54 <__aeabi_d2iz+0x5c>)
    9b22:	1ac3      	subs	r3, r0, r3
    9b24:	40da      	lsrs	r2, r3
    9b26:	4254      	negs	r4, r2
    9b28:	2900      	cmp	r1, #0
    9b2a:	d100      	bne.n	9b2e <__aeabi_d2iz+0x36>
    9b2c:	0014      	movs	r4, r2
    9b2e:	0020      	movs	r0, r4
    9b30:	bd30      	pop	{r4, r5, pc}
    9b32:	4b09      	ldr	r3, [pc, #36]	; (9b58 <__aeabi_d2iz+0x60>)
    9b34:	18cc      	adds	r4, r1, r3
    9b36:	e7fa      	b.n	9b2e <__aeabi_d2iz+0x36>
    9b38:	4c08      	ldr	r4, [pc, #32]	; (9b5c <__aeabi_d2iz+0x64>)
    9b3a:	40e8      	lsrs	r0, r5
    9b3c:	46a4      	mov	ip, r4
    9b3e:	4463      	add	r3, ip
    9b40:	409a      	lsls	r2, r3
    9b42:	4302      	orrs	r2, r0
    9b44:	e7ef      	b.n	9b26 <__aeabi_d2iz+0x2e>
    9b46:	46c0      	nop			; (mov r8, r8)
    9b48:	000003fe 	.word	0x000003fe
    9b4c:	0000041d 	.word	0x0000041d
    9b50:	00000433 	.word	0x00000433
    9b54:	00000413 	.word	0x00000413
    9b58:	7fffffff 	.word	0x7fffffff
    9b5c:	fffffbed 	.word	0xfffffbed

00009b60 <__aeabi_ui2d>:
    9b60:	b510      	push	{r4, lr}
    9b62:	1e04      	subs	r4, r0, #0
    9b64:	d028      	beq.n	9bb8 <__aeabi_ui2d+0x58>
    9b66:	f000 f833 	bl	9bd0 <__clzsi2>
    9b6a:	4b15      	ldr	r3, [pc, #84]	; (9bc0 <__aeabi_ui2d+0x60>)
    9b6c:	4a15      	ldr	r2, [pc, #84]	; (9bc4 <__aeabi_ui2d+0x64>)
    9b6e:	1a1b      	subs	r3, r3, r0
    9b70:	1ad2      	subs	r2, r2, r3
    9b72:	2a1f      	cmp	r2, #31
    9b74:	dd15      	ble.n	9ba2 <__aeabi_ui2d+0x42>
    9b76:	4a14      	ldr	r2, [pc, #80]	; (9bc8 <__aeabi_ui2d+0x68>)
    9b78:	1ad2      	subs	r2, r2, r3
    9b7a:	4094      	lsls	r4, r2
    9b7c:	2200      	movs	r2, #0
    9b7e:	0324      	lsls	r4, r4, #12
    9b80:	055b      	lsls	r3, r3, #21
    9b82:	0b24      	lsrs	r4, r4, #12
    9b84:	0d5b      	lsrs	r3, r3, #21
    9b86:	2100      	movs	r1, #0
    9b88:	0010      	movs	r0, r2
    9b8a:	0324      	lsls	r4, r4, #12
    9b8c:	0d0a      	lsrs	r2, r1, #20
    9b8e:	0b24      	lsrs	r4, r4, #12
    9b90:	0512      	lsls	r2, r2, #20
    9b92:	4322      	orrs	r2, r4
    9b94:	4c0d      	ldr	r4, [pc, #52]	; (9bcc <__aeabi_ui2d+0x6c>)
    9b96:	051b      	lsls	r3, r3, #20
    9b98:	4022      	ands	r2, r4
    9b9a:	4313      	orrs	r3, r2
    9b9c:	005b      	lsls	r3, r3, #1
    9b9e:	0859      	lsrs	r1, r3, #1
    9ba0:	bd10      	pop	{r4, pc}
    9ba2:	0021      	movs	r1, r4
    9ba4:	4091      	lsls	r1, r2
    9ba6:	000a      	movs	r2, r1
    9ba8:	210b      	movs	r1, #11
    9baa:	1a08      	subs	r0, r1, r0
    9bac:	40c4      	lsrs	r4, r0
    9bae:	055b      	lsls	r3, r3, #21
    9bb0:	0324      	lsls	r4, r4, #12
    9bb2:	0b24      	lsrs	r4, r4, #12
    9bb4:	0d5b      	lsrs	r3, r3, #21
    9bb6:	e7e6      	b.n	9b86 <__aeabi_ui2d+0x26>
    9bb8:	2300      	movs	r3, #0
    9bba:	2400      	movs	r4, #0
    9bbc:	2200      	movs	r2, #0
    9bbe:	e7e2      	b.n	9b86 <__aeabi_ui2d+0x26>
    9bc0:	0000041e 	.word	0x0000041e
    9bc4:	00000433 	.word	0x00000433
    9bc8:	00000413 	.word	0x00000413
    9bcc:	800fffff 	.word	0x800fffff

00009bd0 <__clzsi2>:
    9bd0:	211c      	movs	r1, #28
    9bd2:	2301      	movs	r3, #1
    9bd4:	041b      	lsls	r3, r3, #16
    9bd6:	4298      	cmp	r0, r3
    9bd8:	d301      	bcc.n	9bde <__clzsi2+0xe>
    9bda:	0c00      	lsrs	r0, r0, #16
    9bdc:	3910      	subs	r1, #16
    9bde:	0a1b      	lsrs	r3, r3, #8
    9be0:	4298      	cmp	r0, r3
    9be2:	d301      	bcc.n	9be8 <__clzsi2+0x18>
    9be4:	0a00      	lsrs	r0, r0, #8
    9be6:	3908      	subs	r1, #8
    9be8:	091b      	lsrs	r3, r3, #4
    9bea:	4298      	cmp	r0, r3
    9bec:	d301      	bcc.n	9bf2 <__clzsi2+0x22>
    9bee:	0900      	lsrs	r0, r0, #4
    9bf0:	3904      	subs	r1, #4
    9bf2:	a202      	add	r2, pc, #8	; (adr r2, 9bfc <__clzsi2+0x2c>)
    9bf4:	5c10      	ldrb	r0, [r2, r0]
    9bf6:	1840      	adds	r0, r0, r1
    9bf8:	4770      	bx	lr
    9bfa:	46c0      	nop			; (mov r8, r8)
    9bfc:	02020304 	.word	0x02020304
    9c00:	01010101 	.word	0x01010101
	...

00009c0c <atoi>:
    9c0c:	b510      	push	{r4, lr}
    9c0e:	220a      	movs	r2, #10
    9c10:	2100      	movs	r1, #0
    9c12:	f000 fa81 	bl	a118 <strtol>
    9c16:	bd10      	pop	{r4, pc}

00009c18 <__libc_init_array>:
    9c18:	b570      	push	{r4, r5, r6, lr}
    9c1a:	2600      	movs	r6, #0
    9c1c:	4d0c      	ldr	r5, [pc, #48]	; (9c50 <__libc_init_array+0x38>)
    9c1e:	4c0d      	ldr	r4, [pc, #52]	; (9c54 <__libc_init_array+0x3c>)
    9c20:	1b64      	subs	r4, r4, r5
    9c22:	10a4      	asrs	r4, r4, #2
    9c24:	42a6      	cmp	r6, r4
    9c26:	d109      	bne.n	9c3c <__libc_init_array+0x24>
    9c28:	2600      	movs	r6, #0
    9c2a:	f002 fc39 	bl	c4a0 <_init>
    9c2e:	4d0a      	ldr	r5, [pc, #40]	; (9c58 <__libc_init_array+0x40>)
    9c30:	4c0a      	ldr	r4, [pc, #40]	; (9c5c <__libc_init_array+0x44>)
    9c32:	1b64      	subs	r4, r4, r5
    9c34:	10a4      	asrs	r4, r4, #2
    9c36:	42a6      	cmp	r6, r4
    9c38:	d105      	bne.n	9c46 <__libc_init_array+0x2e>
    9c3a:	bd70      	pop	{r4, r5, r6, pc}
    9c3c:	00b3      	lsls	r3, r6, #2
    9c3e:	58eb      	ldr	r3, [r5, r3]
    9c40:	4798      	blx	r3
    9c42:	3601      	adds	r6, #1
    9c44:	e7ee      	b.n	9c24 <__libc_init_array+0xc>
    9c46:	00b3      	lsls	r3, r6, #2
    9c48:	58eb      	ldr	r3, [r5, r3]
    9c4a:	4798      	blx	r3
    9c4c:	3601      	adds	r6, #1
    9c4e:	e7f2      	b.n	9c36 <__libc_init_array+0x1e>
    9c50:	0000c4ac 	.word	0x0000c4ac
    9c54:	0000c4ac 	.word	0x0000c4ac
    9c58:	0000c4ac 	.word	0x0000c4ac
    9c5c:	0000c4b0 	.word	0x0000c4b0

00009c60 <memcpy>:
    9c60:	2300      	movs	r3, #0
    9c62:	b510      	push	{r4, lr}
    9c64:	429a      	cmp	r2, r3
    9c66:	d100      	bne.n	9c6a <memcpy+0xa>
    9c68:	bd10      	pop	{r4, pc}
    9c6a:	5ccc      	ldrb	r4, [r1, r3]
    9c6c:	54c4      	strb	r4, [r0, r3]
    9c6e:	3301      	adds	r3, #1
    9c70:	e7f8      	b.n	9c64 <memcpy+0x4>

00009c72 <memset>:
    9c72:	0003      	movs	r3, r0
    9c74:	1882      	adds	r2, r0, r2
    9c76:	4293      	cmp	r3, r2
    9c78:	d100      	bne.n	9c7c <memset+0xa>
    9c7a:	4770      	bx	lr
    9c7c:	7019      	strb	r1, [r3, #0]
    9c7e:	3301      	adds	r3, #1
    9c80:	e7f9      	b.n	9c76 <memset+0x4>
	...

00009c84 <iprintf>:
    9c84:	b40f      	push	{r0, r1, r2, r3}
    9c86:	4b0b      	ldr	r3, [pc, #44]	; (9cb4 <iprintf+0x30>)
    9c88:	b513      	push	{r0, r1, r4, lr}
    9c8a:	681c      	ldr	r4, [r3, #0]
    9c8c:	2c00      	cmp	r4, #0
    9c8e:	d005      	beq.n	9c9c <iprintf+0x18>
    9c90:	69a3      	ldr	r3, [r4, #24]
    9c92:	2b00      	cmp	r3, #0
    9c94:	d102      	bne.n	9c9c <iprintf+0x18>
    9c96:	0020      	movs	r0, r4
    9c98:	f000 fc2a 	bl	a4f0 <__sinit>
    9c9c:	ab05      	add	r3, sp, #20
    9c9e:	9a04      	ldr	r2, [sp, #16]
    9ca0:	68a1      	ldr	r1, [r4, #8]
    9ca2:	0020      	movs	r0, r4
    9ca4:	9301      	str	r3, [sp, #4]
    9ca6:	f000 fe3d 	bl	a924 <_vfiprintf_r>
    9caa:	bc16      	pop	{r1, r2, r4}
    9cac:	bc08      	pop	{r3}
    9cae:	b004      	add	sp, #16
    9cb0:	4718      	bx	r3
    9cb2:	46c0      	nop			; (mov r8, r8)
    9cb4:	20000074 	.word	0x20000074

00009cb8 <_puts_r>:
    9cb8:	b570      	push	{r4, r5, r6, lr}
    9cba:	0005      	movs	r5, r0
    9cbc:	000e      	movs	r6, r1
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d004      	beq.n	9ccc <_puts_r+0x14>
    9cc2:	6983      	ldr	r3, [r0, #24]
    9cc4:	2b00      	cmp	r3, #0
    9cc6:	d101      	bne.n	9ccc <_puts_r+0x14>
    9cc8:	f000 fc12 	bl	a4f0 <__sinit>
    9ccc:	69ab      	ldr	r3, [r5, #24]
    9cce:	68ac      	ldr	r4, [r5, #8]
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d102      	bne.n	9cda <_puts_r+0x22>
    9cd4:	0028      	movs	r0, r5
    9cd6:	f000 fc0b 	bl	a4f0 <__sinit>
    9cda:	4b24      	ldr	r3, [pc, #144]	; (9d6c <_puts_r+0xb4>)
    9cdc:	429c      	cmp	r4, r3
    9cde:	d10f      	bne.n	9d00 <_puts_r+0x48>
    9ce0:	686c      	ldr	r4, [r5, #4]
    9ce2:	89a3      	ldrh	r3, [r4, #12]
    9ce4:	071b      	lsls	r3, r3, #28
    9ce6:	d502      	bpl.n	9cee <_puts_r+0x36>
    9ce8:	6923      	ldr	r3, [r4, #16]
    9cea:	2b00      	cmp	r3, #0
    9cec:	d120      	bne.n	9d30 <_puts_r+0x78>
    9cee:	0021      	movs	r1, r4
    9cf0:	0028      	movs	r0, r5
    9cf2:	f000 fa7b 	bl	a1ec <__swsetup_r>
    9cf6:	2800      	cmp	r0, #0
    9cf8:	d01a      	beq.n	9d30 <_puts_r+0x78>
    9cfa:	2001      	movs	r0, #1
    9cfc:	4240      	negs	r0, r0
    9cfe:	bd70      	pop	{r4, r5, r6, pc}
    9d00:	4b1b      	ldr	r3, [pc, #108]	; (9d70 <_puts_r+0xb8>)
    9d02:	429c      	cmp	r4, r3
    9d04:	d101      	bne.n	9d0a <_puts_r+0x52>
    9d06:	68ac      	ldr	r4, [r5, #8]
    9d08:	e7eb      	b.n	9ce2 <_puts_r+0x2a>
    9d0a:	4b1a      	ldr	r3, [pc, #104]	; (9d74 <_puts_r+0xbc>)
    9d0c:	429c      	cmp	r4, r3
    9d0e:	d1e8      	bne.n	9ce2 <_puts_r+0x2a>
    9d10:	68ec      	ldr	r4, [r5, #12]
    9d12:	e7e6      	b.n	9ce2 <_puts_r+0x2a>
    9d14:	3b01      	subs	r3, #1
    9d16:	3601      	adds	r6, #1
    9d18:	60a3      	str	r3, [r4, #8]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	da04      	bge.n	9d28 <_puts_r+0x70>
    9d1e:	69a2      	ldr	r2, [r4, #24]
    9d20:	4293      	cmp	r3, r2
    9d22:	db16      	blt.n	9d52 <_puts_r+0x9a>
    9d24:	290a      	cmp	r1, #10
    9d26:	d014      	beq.n	9d52 <_puts_r+0x9a>
    9d28:	6823      	ldr	r3, [r4, #0]
    9d2a:	1c5a      	adds	r2, r3, #1
    9d2c:	6022      	str	r2, [r4, #0]
    9d2e:	7019      	strb	r1, [r3, #0]
    9d30:	7831      	ldrb	r1, [r6, #0]
    9d32:	68a3      	ldr	r3, [r4, #8]
    9d34:	2900      	cmp	r1, #0
    9d36:	d1ed      	bne.n	9d14 <_puts_r+0x5c>
    9d38:	3b01      	subs	r3, #1
    9d3a:	60a3      	str	r3, [r4, #8]
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	da0f      	bge.n	9d60 <_puts_r+0xa8>
    9d40:	0022      	movs	r2, r4
    9d42:	310a      	adds	r1, #10
    9d44:	0028      	movs	r0, r5
    9d46:	f000 f9fb 	bl	a140 <__swbuf_r>
    9d4a:	1c43      	adds	r3, r0, #1
    9d4c:	d0d5      	beq.n	9cfa <_puts_r+0x42>
    9d4e:	200a      	movs	r0, #10
    9d50:	e7d5      	b.n	9cfe <_puts_r+0x46>
    9d52:	0022      	movs	r2, r4
    9d54:	0028      	movs	r0, r5
    9d56:	f000 f9f3 	bl	a140 <__swbuf_r>
    9d5a:	1c43      	adds	r3, r0, #1
    9d5c:	d1e8      	bne.n	9d30 <_puts_r+0x78>
    9d5e:	e7cc      	b.n	9cfa <_puts_r+0x42>
    9d60:	200a      	movs	r0, #10
    9d62:	6823      	ldr	r3, [r4, #0]
    9d64:	1c5a      	adds	r2, r3, #1
    9d66:	6022      	str	r2, [r4, #0]
    9d68:	7018      	strb	r0, [r3, #0]
    9d6a:	e7c8      	b.n	9cfe <_puts_r+0x46>
    9d6c:	0000c2f8 	.word	0x0000c2f8
    9d70:	0000c318 	.word	0x0000c318
    9d74:	0000c2d8 	.word	0x0000c2d8

00009d78 <puts>:
    9d78:	b510      	push	{r4, lr}
    9d7a:	4b03      	ldr	r3, [pc, #12]	; (9d88 <puts+0x10>)
    9d7c:	0001      	movs	r1, r0
    9d7e:	6818      	ldr	r0, [r3, #0]
    9d80:	f7ff ff9a 	bl	9cb8 <_puts_r>
    9d84:	bd10      	pop	{r4, pc}
    9d86:	46c0      	nop			; (mov r8, r8)
    9d88:	20000074 	.word	0x20000074

00009d8c <iscanf>:
    9d8c:	b40f      	push	{r0, r1, r2, r3}
    9d8e:	4b0b      	ldr	r3, [pc, #44]	; (9dbc <iscanf+0x30>)
    9d90:	b513      	push	{r0, r1, r4, lr}
    9d92:	681c      	ldr	r4, [r3, #0]
    9d94:	2c00      	cmp	r4, #0
    9d96:	d005      	beq.n	9da4 <iscanf+0x18>
    9d98:	69a3      	ldr	r3, [r4, #24]
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d102      	bne.n	9da4 <iscanf+0x18>
    9d9e:	0020      	movs	r0, r4
    9da0:	f000 fba6 	bl	a4f0 <__sinit>
    9da4:	ab05      	add	r3, sp, #20
    9da6:	9a04      	ldr	r2, [sp, #16]
    9da8:	6861      	ldr	r1, [r4, #4]
    9daa:	0020      	movs	r0, r4
    9dac:	9301      	str	r3, [sp, #4]
    9dae:	f001 f9e3 	bl	b178 <_vfiscanf_r>
    9db2:	bc16      	pop	{r1, r2, r4}
    9db4:	bc08      	pop	{r3}
    9db6:	b004      	add	sp, #16
    9db8:	4718      	bx	r3
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	20000074 	.word	0x20000074

00009dc0 <setbuf>:
    9dc0:	424a      	negs	r2, r1
    9dc2:	414a      	adcs	r2, r1
    9dc4:	2380      	movs	r3, #128	; 0x80
    9dc6:	b510      	push	{r4, lr}
    9dc8:	0052      	lsls	r2, r2, #1
    9dca:	00db      	lsls	r3, r3, #3
    9dcc:	f000 f802 	bl	9dd4 <setvbuf>
    9dd0:	bd10      	pop	{r4, pc}
	...

00009dd4 <setvbuf>:
    9dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dd6:	001d      	movs	r5, r3
    9dd8:	4b4f      	ldr	r3, [pc, #316]	; (9f18 <setvbuf+0x144>)
    9dda:	b085      	sub	sp, #20
    9ddc:	681e      	ldr	r6, [r3, #0]
    9dde:	0004      	movs	r4, r0
    9de0:	000f      	movs	r7, r1
    9de2:	9200      	str	r2, [sp, #0]
    9de4:	2e00      	cmp	r6, #0
    9de6:	d005      	beq.n	9df4 <setvbuf+0x20>
    9de8:	69b3      	ldr	r3, [r6, #24]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d102      	bne.n	9df4 <setvbuf+0x20>
    9dee:	0030      	movs	r0, r6
    9df0:	f000 fb7e 	bl	a4f0 <__sinit>
    9df4:	4b49      	ldr	r3, [pc, #292]	; (9f1c <setvbuf+0x148>)
    9df6:	429c      	cmp	r4, r3
    9df8:	d150      	bne.n	9e9c <setvbuf+0xc8>
    9dfa:	6874      	ldr	r4, [r6, #4]
    9dfc:	9b00      	ldr	r3, [sp, #0]
    9dfe:	2b02      	cmp	r3, #2
    9e00:	d005      	beq.n	9e0e <setvbuf+0x3a>
    9e02:	2b01      	cmp	r3, #1
    9e04:	d900      	bls.n	9e08 <setvbuf+0x34>
    9e06:	e084      	b.n	9f12 <setvbuf+0x13e>
    9e08:	2d00      	cmp	r5, #0
    9e0a:	da00      	bge.n	9e0e <setvbuf+0x3a>
    9e0c:	e081      	b.n	9f12 <setvbuf+0x13e>
    9e0e:	0021      	movs	r1, r4
    9e10:	0030      	movs	r0, r6
    9e12:	f000 faeb 	bl	a3ec <_fflush_r>
    9e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9e18:	2900      	cmp	r1, #0
    9e1a:	d008      	beq.n	9e2e <setvbuf+0x5a>
    9e1c:	0023      	movs	r3, r4
    9e1e:	3344      	adds	r3, #68	; 0x44
    9e20:	4299      	cmp	r1, r3
    9e22:	d002      	beq.n	9e2a <setvbuf+0x56>
    9e24:	0030      	movs	r0, r6
    9e26:	f000 fcad 	bl	a784 <_free_r>
    9e2a:	2300      	movs	r3, #0
    9e2c:	6363      	str	r3, [r4, #52]	; 0x34
    9e2e:	2300      	movs	r3, #0
    9e30:	61a3      	str	r3, [r4, #24]
    9e32:	6063      	str	r3, [r4, #4]
    9e34:	89a3      	ldrh	r3, [r4, #12]
    9e36:	061b      	lsls	r3, r3, #24
    9e38:	d503      	bpl.n	9e42 <setvbuf+0x6e>
    9e3a:	6921      	ldr	r1, [r4, #16]
    9e3c:	0030      	movs	r0, r6
    9e3e:	f000 fca1 	bl	a784 <_free_r>
    9e42:	89a3      	ldrh	r3, [r4, #12]
    9e44:	4a36      	ldr	r2, [pc, #216]	; (9f20 <setvbuf+0x14c>)
    9e46:	4013      	ands	r3, r2
    9e48:	81a3      	strh	r3, [r4, #12]
    9e4a:	9b00      	ldr	r3, [sp, #0]
    9e4c:	2b02      	cmp	r3, #2
    9e4e:	d05a      	beq.n	9f06 <setvbuf+0x132>
    9e50:	ab03      	add	r3, sp, #12
    9e52:	aa02      	add	r2, sp, #8
    9e54:	0021      	movs	r1, r4
    9e56:	0030      	movs	r0, r6
    9e58:	f000 fc0c 	bl	a674 <__swhatbuf_r>
    9e5c:	89a3      	ldrh	r3, [r4, #12]
    9e5e:	4318      	orrs	r0, r3
    9e60:	81a0      	strh	r0, [r4, #12]
    9e62:	2d00      	cmp	r5, #0
    9e64:	d124      	bne.n	9eb0 <setvbuf+0xdc>
    9e66:	9d02      	ldr	r5, [sp, #8]
    9e68:	0028      	movs	r0, r5
    9e6a:	f000 fc6f 	bl	a74c <malloc>
    9e6e:	9501      	str	r5, [sp, #4]
    9e70:	1e07      	subs	r7, r0, #0
    9e72:	d142      	bne.n	9efa <setvbuf+0x126>
    9e74:	9b02      	ldr	r3, [sp, #8]
    9e76:	9301      	str	r3, [sp, #4]
    9e78:	42ab      	cmp	r3, r5
    9e7a:	d139      	bne.n	9ef0 <setvbuf+0x11c>
    9e7c:	2001      	movs	r0, #1
    9e7e:	4240      	negs	r0, r0
    9e80:	2302      	movs	r3, #2
    9e82:	89a2      	ldrh	r2, [r4, #12]
    9e84:	4313      	orrs	r3, r2
    9e86:	81a3      	strh	r3, [r4, #12]
    9e88:	2300      	movs	r3, #0
    9e8a:	60a3      	str	r3, [r4, #8]
    9e8c:	0023      	movs	r3, r4
    9e8e:	3347      	adds	r3, #71	; 0x47
    9e90:	6023      	str	r3, [r4, #0]
    9e92:	6123      	str	r3, [r4, #16]
    9e94:	2301      	movs	r3, #1
    9e96:	6163      	str	r3, [r4, #20]
    9e98:	b005      	add	sp, #20
    9e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e9c:	4b21      	ldr	r3, [pc, #132]	; (9f24 <setvbuf+0x150>)
    9e9e:	429c      	cmp	r4, r3
    9ea0:	d101      	bne.n	9ea6 <setvbuf+0xd2>
    9ea2:	68b4      	ldr	r4, [r6, #8]
    9ea4:	e7aa      	b.n	9dfc <setvbuf+0x28>
    9ea6:	4b20      	ldr	r3, [pc, #128]	; (9f28 <setvbuf+0x154>)
    9ea8:	429c      	cmp	r4, r3
    9eaa:	d1a7      	bne.n	9dfc <setvbuf+0x28>
    9eac:	68f4      	ldr	r4, [r6, #12]
    9eae:	e7a5      	b.n	9dfc <setvbuf+0x28>
    9eb0:	2f00      	cmp	r7, #0
    9eb2:	d0d9      	beq.n	9e68 <setvbuf+0x94>
    9eb4:	69b3      	ldr	r3, [r6, #24]
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	d102      	bne.n	9ec0 <setvbuf+0xec>
    9eba:	0030      	movs	r0, r6
    9ebc:	f000 fb18 	bl	a4f0 <__sinit>
    9ec0:	9b00      	ldr	r3, [sp, #0]
    9ec2:	2b01      	cmp	r3, #1
    9ec4:	d103      	bne.n	9ece <setvbuf+0xfa>
    9ec6:	89a3      	ldrh	r3, [r4, #12]
    9ec8:	9a00      	ldr	r2, [sp, #0]
    9eca:	431a      	orrs	r2, r3
    9ecc:	81a2      	strh	r2, [r4, #12]
    9ece:	2008      	movs	r0, #8
    9ed0:	89a3      	ldrh	r3, [r4, #12]
    9ed2:	6027      	str	r7, [r4, #0]
    9ed4:	6127      	str	r7, [r4, #16]
    9ed6:	6165      	str	r5, [r4, #20]
    9ed8:	4018      	ands	r0, r3
    9eda:	d018      	beq.n	9f0e <setvbuf+0x13a>
    9edc:	2001      	movs	r0, #1
    9ede:	4018      	ands	r0, r3
    9ee0:	2300      	movs	r3, #0
    9ee2:	4298      	cmp	r0, r3
    9ee4:	d011      	beq.n	9f0a <setvbuf+0x136>
    9ee6:	426d      	negs	r5, r5
    9ee8:	60a3      	str	r3, [r4, #8]
    9eea:	61a5      	str	r5, [r4, #24]
    9eec:	0018      	movs	r0, r3
    9eee:	e7d3      	b.n	9e98 <setvbuf+0xc4>
    9ef0:	9801      	ldr	r0, [sp, #4]
    9ef2:	f000 fc2b 	bl	a74c <malloc>
    9ef6:	1e07      	subs	r7, r0, #0
    9ef8:	d0c0      	beq.n	9e7c <setvbuf+0xa8>
    9efa:	2380      	movs	r3, #128	; 0x80
    9efc:	89a2      	ldrh	r2, [r4, #12]
    9efe:	9d01      	ldr	r5, [sp, #4]
    9f00:	4313      	orrs	r3, r2
    9f02:	81a3      	strh	r3, [r4, #12]
    9f04:	e7d6      	b.n	9eb4 <setvbuf+0xe0>
    9f06:	2000      	movs	r0, #0
    9f08:	e7ba      	b.n	9e80 <setvbuf+0xac>
    9f0a:	60a5      	str	r5, [r4, #8]
    9f0c:	e7c4      	b.n	9e98 <setvbuf+0xc4>
    9f0e:	60a0      	str	r0, [r4, #8]
    9f10:	e7c2      	b.n	9e98 <setvbuf+0xc4>
    9f12:	2001      	movs	r0, #1
    9f14:	4240      	negs	r0, r0
    9f16:	e7bf      	b.n	9e98 <setvbuf+0xc4>
    9f18:	20000074 	.word	0x20000074
    9f1c:	0000c2f8 	.word	0x0000c2f8
    9f20:	fffff35c 	.word	0xfffff35c
    9f24:	0000c318 	.word	0x0000c318
    9f28:	0000c2d8 	.word	0x0000c2d8

00009f2c <strcmp>:
    9f2c:	7802      	ldrb	r2, [r0, #0]
    9f2e:	780b      	ldrb	r3, [r1, #0]
    9f30:	2a00      	cmp	r2, #0
    9f32:	d003      	beq.n	9f3c <strcmp+0x10>
    9f34:	3001      	adds	r0, #1
    9f36:	3101      	adds	r1, #1
    9f38:	429a      	cmp	r2, r3
    9f3a:	d0f7      	beq.n	9f2c <strcmp>
    9f3c:	1ad0      	subs	r0, r2, r3
    9f3e:	4770      	bx	lr

00009f40 <strtok>:
    9f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f42:	4b12      	ldr	r3, [pc, #72]	; (9f8c <strtok+0x4c>)
    9f44:	0006      	movs	r6, r0
    9f46:	681d      	ldr	r5, [r3, #0]
    9f48:	000f      	movs	r7, r1
    9f4a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    9f4c:	2c00      	cmp	r4, #0
    9f4e:	d116      	bne.n	9f7e <strtok+0x3e>
    9f50:	2050      	movs	r0, #80	; 0x50
    9f52:	f000 fbfb 	bl	a74c <malloc>
    9f56:	65a8      	str	r0, [r5, #88]	; 0x58
    9f58:	6004      	str	r4, [r0, #0]
    9f5a:	6044      	str	r4, [r0, #4]
    9f5c:	6084      	str	r4, [r0, #8]
    9f5e:	60c4      	str	r4, [r0, #12]
    9f60:	6104      	str	r4, [r0, #16]
    9f62:	6144      	str	r4, [r0, #20]
    9f64:	6184      	str	r4, [r0, #24]
    9f66:	6284      	str	r4, [r0, #40]	; 0x28
    9f68:	62c4      	str	r4, [r0, #44]	; 0x2c
    9f6a:	6304      	str	r4, [r0, #48]	; 0x30
    9f6c:	6344      	str	r4, [r0, #52]	; 0x34
    9f6e:	6384      	str	r4, [r0, #56]	; 0x38
    9f70:	63c4      	str	r4, [r0, #60]	; 0x3c
    9f72:	6404      	str	r4, [r0, #64]	; 0x40
    9f74:	6444      	str	r4, [r0, #68]	; 0x44
    9f76:	6484      	str	r4, [r0, #72]	; 0x48
    9f78:	64c4      	str	r4, [r0, #76]	; 0x4c
    9f7a:	7704      	strb	r4, [r0, #28]
    9f7c:	6244      	str	r4, [r0, #36]	; 0x24
    9f7e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    9f80:	0039      	movs	r1, r7
    9f82:	0030      	movs	r0, r6
    9f84:	2301      	movs	r3, #1
    9f86:	f000 f803 	bl	9f90 <__strtok_r>
    9f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f8c:	20000074 	.word	0x20000074

00009f90 <__strtok_r>:
    9f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f92:	2800      	cmp	r0, #0
    9f94:	d104      	bne.n	9fa0 <__strtok_r+0x10>
    9f96:	6810      	ldr	r0, [r2, #0]
    9f98:	2800      	cmp	r0, #0
    9f9a:	d101      	bne.n	9fa0 <__strtok_r+0x10>
    9f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f9e:	0020      	movs	r0, r4
    9fa0:	000e      	movs	r6, r1
    9fa2:	7805      	ldrb	r5, [r0, #0]
    9fa4:	1c44      	adds	r4, r0, #1
    9fa6:	7837      	ldrb	r7, [r6, #0]
    9fa8:	2f00      	cmp	r7, #0
    9faa:	d104      	bne.n	9fb6 <__strtok_r+0x26>
    9fac:	2d00      	cmp	r5, #0
    9fae:	d110      	bne.n	9fd2 <__strtok_r+0x42>
    9fb0:	6015      	str	r5, [r2, #0]
    9fb2:	0028      	movs	r0, r5
    9fb4:	e7f2      	b.n	9f9c <__strtok_r+0xc>
    9fb6:	3601      	adds	r6, #1
    9fb8:	42bd      	cmp	r5, r7
    9fba:	d1f4      	bne.n	9fa6 <__strtok_r+0x16>
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d1ee      	bne.n	9f9e <__strtok_r+0xe>
    9fc0:	6014      	str	r4, [r2, #0]
    9fc2:	7003      	strb	r3, [r0, #0]
    9fc4:	e7ea      	b.n	9f9c <__strtok_r+0xc>
    9fc6:	0033      	movs	r3, r6
    9fc8:	e00e      	b.n	9fe8 <__strtok_r+0x58>
    9fca:	3501      	adds	r5, #1
    9fcc:	001c      	movs	r4, r3
    9fce:	2f00      	cmp	r7, #0
    9fd0:	d102      	bne.n	9fd8 <__strtok_r+0x48>
    9fd2:	000d      	movs	r5, r1
    9fd4:	7826      	ldrb	r6, [r4, #0]
    9fd6:	1c63      	adds	r3, r4, #1
    9fd8:	782f      	ldrb	r7, [r5, #0]
    9fda:	42be      	cmp	r6, r7
    9fdc:	d1f5      	bne.n	9fca <__strtok_r+0x3a>
    9fde:	2e00      	cmp	r6, #0
    9fe0:	d0f1      	beq.n	9fc6 <__strtok_r+0x36>
    9fe2:	2400      	movs	r4, #0
    9fe4:	1e59      	subs	r1, r3, #1
    9fe6:	700c      	strb	r4, [r1, #0]
    9fe8:	6013      	str	r3, [r2, #0]
    9fea:	e7d7      	b.n	9f9c <__strtok_r+0xc>

00009fec <_strtol_l.isra.0>:
    9fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fee:	001f      	movs	r7, r3
    9ff0:	000e      	movs	r6, r1
    9ff2:	b087      	sub	sp, #28
    9ff4:	9005      	str	r0, [sp, #20]
    9ff6:	9103      	str	r1, [sp, #12]
    9ff8:	9202      	str	r2, [sp, #8]
    9ffa:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ffc:	7834      	ldrb	r4, [r6, #0]
    9ffe:	f000 fb28 	bl	a652 <__locale_ctype_ptr_l>
    a002:	2208      	movs	r2, #8
    a004:	1900      	adds	r0, r0, r4
    a006:	7843      	ldrb	r3, [r0, #1]
    a008:	1c75      	adds	r5, r6, #1
    a00a:	4013      	ands	r3, r2
    a00c:	d10c      	bne.n	a028 <_strtol_l.isra.0+0x3c>
    a00e:	2c2d      	cmp	r4, #45	; 0x2d
    a010:	d10c      	bne.n	a02c <_strtol_l.isra.0+0x40>
    a012:	3301      	adds	r3, #1
    a014:	782c      	ldrb	r4, [r5, #0]
    a016:	9301      	str	r3, [sp, #4]
    a018:	1cb5      	adds	r5, r6, #2
    a01a:	2f00      	cmp	r7, #0
    a01c:	d00c      	beq.n	a038 <_strtol_l.isra.0+0x4c>
    a01e:	2f10      	cmp	r7, #16
    a020:	d114      	bne.n	a04c <_strtol_l.isra.0+0x60>
    a022:	2c30      	cmp	r4, #48	; 0x30
    a024:	d00a      	beq.n	a03c <_strtol_l.isra.0+0x50>
    a026:	e011      	b.n	a04c <_strtol_l.isra.0+0x60>
    a028:	002e      	movs	r6, r5
    a02a:	e7e6      	b.n	9ffa <_strtol_l.isra.0+0xe>
    a02c:	9301      	str	r3, [sp, #4]
    a02e:	2c2b      	cmp	r4, #43	; 0x2b
    a030:	d1f3      	bne.n	a01a <_strtol_l.isra.0+0x2e>
    a032:	782c      	ldrb	r4, [r5, #0]
    a034:	1cb5      	adds	r5, r6, #2
    a036:	e7f0      	b.n	a01a <_strtol_l.isra.0+0x2e>
    a038:	2c30      	cmp	r4, #48	; 0x30
    a03a:	d12f      	bne.n	a09c <_strtol_l.isra.0+0xb0>
    a03c:	2220      	movs	r2, #32
    a03e:	782b      	ldrb	r3, [r5, #0]
    a040:	4393      	bics	r3, r2
    a042:	2b58      	cmp	r3, #88	; 0x58
    a044:	d151      	bne.n	a0ea <_strtol_l.isra.0+0xfe>
    a046:	2710      	movs	r7, #16
    a048:	786c      	ldrb	r4, [r5, #1]
    a04a:	3502      	adds	r5, #2
    a04c:	9b01      	ldr	r3, [sp, #4]
    a04e:	4a29      	ldr	r2, [pc, #164]	; (a0f4 <_strtol_l.isra.0+0x108>)
    a050:	0039      	movs	r1, r7
    a052:	189e      	adds	r6, r3, r2
    a054:	0030      	movs	r0, r6
    a056:	f7fe f85b 	bl	8110 <__aeabi_uidivmod>
    a05a:	0030      	movs	r0, r6
    a05c:	9104      	str	r1, [sp, #16]
    a05e:	0039      	movs	r1, r7
    a060:	f7fd ffd0 	bl	8004 <__udivsi3>
    a064:	2101      	movs	r1, #1
    a066:	2300      	movs	r3, #0
    a068:	4249      	negs	r1, r1
    a06a:	0002      	movs	r2, r0
    a06c:	468c      	mov	ip, r1
    a06e:	0018      	movs	r0, r3
    a070:	0021      	movs	r1, r4
    a072:	3930      	subs	r1, #48	; 0x30
    a074:	2909      	cmp	r1, #9
    a076:	d813      	bhi.n	a0a0 <_strtol_l.isra.0+0xb4>
    a078:	000c      	movs	r4, r1
    a07a:	42a7      	cmp	r7, r4
    a07c:	dd1c      	ble.n	a0b8 <_strtol_l.isra.0+0xcc>
    a07e:	1c59      	adds	r1, r3, #1
    a080:	d009      	beq.n	a096 <_strtol_l.isra.0+0xaa>
    a082:	4663      	mov	r3, ip
    a084:	4282      	cmp	r2, r0
    a086:	d306      	bcc.n	a096 <_strtol_l.isra.0+0xaa>
    a088:	d102      	bne.n	a090 <_strtol_l.isra.0+0xa4>
    a08a:	9904      	ldr	r1, [sp, #16]
    a08c:	42a1      	cmp	r1, r4
    a08e:	db02      	blt.n	a096 <_strtol_l.isra.0+0xaa>
    a090:	2301      	movs	r3, #1
    a092:	4378      	muls	r0, r7
    a094:	1820      	adds	r0, r4, r0
    a096:	782c      	ldrb	r4, [r5, #0]
    a098:	3501      	adds	r5, #1
    a09a:	e7e9      	b.n	a070 <_strtol_l.isra.0+0x84>
    a09c:	270a      	movs	r7, #10
    a09e:	e7d5      	b.n	a04c <_strtol_l.isra.0+0x60>
    a0a0:	0021      	movs	r1, r4
    a0a2:	3941      	subs	r1, #65	; 0x41
    a0a4:	2919      	cmp	r1, #25
    a0a6:	d801      	bhi.n	a0ac <_strtol_l.isra.0+0xc0>
    a0a8:	3c37      	subs	r4, #55	; 0x37
    a0aa:	e7e6      	b.n	a07a <_strtol_l.isra.0+0x8e>
    a0ac:	0021      	movs	r1, r4
    a0ae:	3961      	subs	r1, #97	; 0x61
    a0b0:	2919      	cmp	r1, #25
    a0b2:	d801      	bhi.n	a0b8 <_strtol_l.isra.0+0xcc>
    a0b4:	3c57      	subs	r4, #87	; 0x57
    a0b6:	e7e0      	b.n	a07a <_strtol_l.isra.0+0x8e>
    a0b8:	1c5a      	adds	r2, r3, #1
    a0ba:	d108      	bne.n	a0ce <_strtol_l.isra.0+0xe2>
    a0bc:	9a05      	ldr	r2, [sp, #20]
    a0be:	3323      	adds	r3, #35	; 0x23
    a0c0:	6013      	str	r3, [r2, #0]
    a0c2:	9b02      	ldr	r3, [sp, #8]
    a0c4:	0030      	movs	r0, r6
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d10b      	bne.n	a0e2 <_strtol_l.isra.0+0xf6>
    a0ca:	b007      	add	sp, #28
    a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0ce:	9a01      	ldr	r2, [sp, #4]
    a0d0:	2a00      	cmp	r2, #0
    a0d2:	d000      	beq.n	a0d6 <_strtol_l.isra.0+0xea>
    a0d4:	4240      	negs	r0, r0
    a0d6:	9a02      	ldr	r2, [sp, #8]
    a0d8:	2a00      	cmp	r2, #0
    a0da:	d0f6      	beq.n	a0ca <_strtol_l.isra.0+0xde>
    a0dc:	9a03      	ldr	r2, [sp, #12]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d000      	beq.n	a0e4 <_strtol_l.isra.0+0xf8>
    a0e2:	1e6a      	subs	r2, r5, #1
    a0e4:	9b02      	ldr	r3, [sp, #8]
    a0e6:	601a      	str	r2, [r3, #0]
    a0e8:	e7ef      	b.n	a0ca <_strtol_l.isra.0+0xde>
    a0ea:	2430      	movs	r4, #48	; 0x30
    a0ec:	2f00      	cmp	r7, #0
    a0ee:	d1ad      	bne.n	a04c <_strtol_l.isra.0+0x60>
    a0f0:	3708      	adds	r7, #8
    a0f2:	e7ab      	b.n	a04c <_strtol_l.isra.0+0x60>
    a0f4:	7fffffff 	.word	0x7fffffff

0000a0f8 <_strtol_r>:
    a0f8:	b513      	push	{r0, r1, r4, lr}
    a0fa:	4c05      	ldr	r4, [pc, #20]	; (a110 <_strtol_r+0x18>)
    a0fc:	6824      	ldr	r4, [r4, #0]
    a0fe:	6a24      	ldr	r4, [r4, #32]
    a100:	2c00      	cmp	r4, #0
    a102:	d100      	bne.n	a106 <_strtol_r+0xe>
    a104:	4c03      	ldr	r4, [pc, #12]	; (a114 <_strtol_r+0x1c>)
    a106:	9400      	str	r4, [sp, #0]
    a108:	f7ff ff70 	bl	9fec <_strtol_l.isra.0>
    a10c:	bd16      	pop	{r1, r2, r4, pc}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	20000074 	.word	0x20000074
    a114:	200000d8 	.word	0x200000d8

0000a118 <strtol>:
    a118:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a11a:	0013      	movs	r3, r2
    a11c:	4a06      	ldr	r2, [pc, #24]	; (a138 <strtol+0x20>)
    a11e:	0005      	movs	r5, r0
    a120:	6810      	ldr	r0, [r2, #0]
    a122:	6a04      	ldr	r4, [r0, #32]
    a124:	2c00      	cmp	r4, #0
    a126:	d100      	bne.n	a12a <strtol+0x12>
    a128:	4c04      	ldr	r4, [pc, #16]	; (a13c <strtol+0x24>)
    a12a:	000a      	movs	r2, r1
    a12c:	9400      	str	r4, [sp, #0]
    a12e:	0029      	movs	r1, r5
    a130:	f7ff ff5c 	bl	9fec <_strtol_l.isra.0>
    a134:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a136:	46c0      	nop			; (mov r8, r8)
    a138:	20000074 	.word	0x20000074
    a13c:	200000d8 	.word	0x200000d8

0000a140 <__swbuf_r>:
    a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a142:	0005      	movs	r5, r0
    a144:	000e      	movs	r6, r1
    a146:	0014      	movs	r4, r2
    a148:	2800      	cmp	r0, #0
    a14a:	d004      	beq.n	a156 <__swbuf_r+0x16>
    a14c:	6983      	ldr	r3, [r0, #24]
    a14e:	2b00      	cmp	r3, #0
    a150:	d101      	bne.n	a156 <__swbuf_r+0x16>
    a152:	f000 f9cd 	bl	a4f0 <__sinit>
    a156:	4b22      	ldr	r3, [pc, #136]	; (a1e0 <__swbuf_r+0xa0>)
    a158:	429c      	cmp	r4, r3
    a15a:	d12d      	bne.n	a1b8 <__swbuf_r+0x78>
    a15c:	686c      	ldr	r4, [r5, #4]
    a15e:	69a3      	ldr	r3, [r4, #24]
    a160:	60a3      	str	r3, [r4, #8]
    a162:	89a3      	ldrh	r3, [r4, #12]
    a164:	071b      	lsls	r3, r3, #28
    a166:	d531      	bpl.n	a1cc <__swbuf_r+0x8c>
    a168:	6923      	ldr	r3, [r4, #16]
    a16a:	2b00      	cmp	r3, #0
    a16c:	d02e      	beq.n	a1cc <__swbuf_r+0x8c>
    a16e:	6823      	ldr	r3, [r4, #0]
    a170:	6922      	ldr	r2, [r4, #16]
    a172:	b2f7      	uxtb	r7, r6
    a174:	1a98      	subs	r0, r3, r2
    a176:	6963      	ldr	r3, [r4, #20]
    a178:	b2f6      	uxtb	r6, r6
    a17a:	4298      	cmp	r0, r3
    a17c:	db05      	blt.n	a18a <__swbuf_r+0x4a>
    a17e:	0021      	movs	r1, r4
    a180:	0028      	movs	r0, r5
    a182:	f000 f933 	bl	a3ec <_fflush_r>
    a186:	2800      	cmp	r0, #0
    a188:	d126      	bne.n	a1d8 <__swbuf_r+0x98>
    a18a:	68a3      	ldr	r3, [r4, #8]
    a18c:	3001      	adds	r0, #1
    a18e:	3b01      	subs	r3, #1
    a190:	60a3      	str	r3, [r4, #8]
    a192:	6823      	ldr	r3, [r4, #0]
    a194:	1c5a      	adds	r2, r3, #1
    a196:	6022      	str	r2, [r4, #0]
    a198:	701f      	strb	r7, [r3, #0]
    a19a:	6963      	ldr	r3, [r4, #20]
    a19c:	4298      	cmp	r0, r3
    a19e:	d004      	beq.n	a1aa <__swbuf_r+0x6a>
    a1a0:	89a3      	ldrh	r3, [r4, #12]
    a1a2:	07db      	lsls	r3, r3, #31
    a1a4:	d51a      	bpl.n	a1dc <__swbuf_r+0x9c>
    a1a6:	2e0a      	cmp	r6, #10
    a1a8:	d118      	bne.n	a1dc <__swbuf_r+0x9c>
    a1aa:	0021      	movs	r1, r4
    a1ac:	0028      	movs	r0, r5
    a1ae:	f000 f91d 	bl	a3ec <_fflush_r>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	d012      	beq.n	a1dc <__swbuf_r+0x9c>
    a1b6:	e00f      	b.n	a1d8 <__swbuf_r+0x98>
    a1b8:	4b0a      	ldr	r3, [pc, #40]	; (a1e4 <__swbuf_r+0xa4>)
    a1ba:	429c      	cmp	r4, r3
    a1bc:	d101      	bne.n	a1c2 <__swbuf_r+0x82>
    a1be:	68ac      	ldr	r4, [r5, #8]
    a1c0:	e7cd      	b.n	a15e <__swbuf_r+0x1e>
    a1c2:	4b09      	ldr	r3, [pc, #36]	; (a1e8 <__swbuf_r+0xa8>)
    a1c4:	429c      	cmp	r4, r3
    a1c6:	d1ca      	bne.n	a15e <__swbuf_r+0x1e>
    a1c8:	68ec      	ldr	r4, [r5, #12]
    a1ca:	e7c8      	b.n	a15e <__swbuf_r+0x1e>
    a1cc:	0021      	movs	r1, r4
    a1ce:	0028      	movs	r0, r5
    a1d0:	f000 f80c 	bl	a1ec <__swsetup_r>
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d0ca      	beq.n	a16e <__swbuf_r+0x2e>
    a1d8:	2601      	movs	r6, #1
    a1da:	4276      	negs	r6, r6
    a1dc:	0030      	movs	r0, r6
    a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1e0:	0000c2f8 	.word	0x0000c2f8
    a1e4:	0000c318 	.word	0x0000c318
    a1e8:	0000c2d8 	.word	0x0000c2d8

0000a1ec <__swsetup_r>:
    a1ec:	4b36      	ldr	r3, [pc, #216]	; (a2c8 <__swsetup_r+0xdc>)
    a1ee:	b570      	push	{r4, r5, r6, lr}
    a1f0:	681d      	ldr	r5, [r3, #0]
    a1f2:	0006      	movs	r6, r0
    a1f4:	000c      	movs	r4, r1
    a1f6:	2d00      	cmp	r5, #0
    a1f8:	d005      	beq.n	a206 <__swsetup_r+0x1a>
    a1fa:	69ab      	ldr	r3, [r5, #24]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d102      	bne.n	a206 <__swsetup_r+0x1a>
    a200:	0028      	movs	r0, r5
    a202:	f000 f975 	bl	a4f0 <__sinit>
    a206:	4b31      	ldr	r3, [pc, #196]	; (a2cc <__swsetup_r+0xe0>)
    a208:	429c      	cmp	r4, r3
    a20a:	d10f      	bne.n	a22c <__swsetup_r+0x40>
    a20c:	686c      	ldr	r4, [r5, #4]
    a20e:	230c      	movs	r3, #12
    a210:	5ee2      	ldrsh	r2, [r4, r3]
    a212:	b293      	uxth	r3, r2
    a214:	0719      	lsls	r1, r3, #28
    a216:	d42d      	bmi.n	a274 <__swsetup_r+0x88>
    a218:	06d9      	lsls	r1, r3, #27
    a21a:	d411      	bmi.n	a240 <__swsetup_r+0x54>
    a21c:	2309      	movs	r3, #9
    a21e:	2001      	movs	r0, #1
    a220:	6033      	str	r3, [r6, #0]
    a222:	3337      	adds	r3, #55	; 0x37
    a224:	4313      	orrs	r3, r2
    a226:	81a3      	strh	r3, [r4, #12]
    a228:	4240      	negs	r0, r0
    a22a:	bd70      	pop	{r4, r5, r6, pc}
    a22c:	4b28      	ldr	r3, [pc, #160]	; (a2d0 <__swsetup_r+0xe4>)
    a22e:	429c      	cmp	r4, r3
    a230:	d101      	bne.n	a236 <__swsetup_r+0x4a>
    a232:	68ac      	ldr	r4, [r5, #8]
    a234:	e7eb      	b.n	a20e <__swsetup_r+0x22>
    a236:	4b27      	ldr	r3, [pc, #156]	; (a2d4 <__swsetup_r+0xe8>)
    a238:	429c      	cmp	r4, r3
    a23a:	d1e8      	bne.n	a20e <__swsetup_r+0x22>
    a23c:	68ec      	ldr	r4, [r5, #12]
    a23e:	e7e6      	b.n	a20e <__swsetup_r+0x22>
    a240:	075b      	lsls	r3, r3, #29
    a242:	d513      	bpl.n	a26c <__swsetup_r+0x80>
    a244:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a246:	2900      	cmp	r1, #0
    a248:	d008      	beq.n	a25c <__swsetup_r+0x70>
    a24a:	0023      	movs	r3, r4
    a24c:	3344      	adds	r3, #68	; 0x44
    a24e:	4299      	cmp	r1, r3
    a250:	d002      	beq.n	a258 <__swsetup_r+0x6c>
    a252:	0030      	movs	r0, r6
    a254:	f000 fa96 	bl	a784 <_free_r>
    a258:	2300      	movs	r3, #0
    a25a:	6363      	str	r3, [r4, #52]	; 0x34
    a25c:	2224      	movs	r2, #36	; 0x24
    a25e:	89a3      	ldrh	r3, [r4, #12]
    a260:	4393      	bics	r3, r2
    a262:	81a3      	strh	r3, [r4, #12]
    a264:	2300      	movs	r3, #0
    a266:	6063      	str	r3, [r4, #4]
    a268:	6923      	ldr	r3, [r4, #16]
    a26a:	6023      	str	r3, [r4, #0]
    a26c:	2308      	movs	r3, #8
    a26e:	89a2      	ldrh	r2, [r4, #12]
    a270:	4313      	orrs	r3, r2
    a272:	81a3      	strh	r3, [r4, #12]
    a274:	6923      	ldr	r3, [r4, #16]
    a276:	2b00      	cmp	r3, #0
    a278:	d10b      	bne.n	a292 <__swsetup_r+0xa6>
    a27a:	21a0      	movs	r1, #160	; 0xa0
    a27c:	2280      	movs	r2, #128	; 0x80
    a27e:	89a3      	ldrh	r3, [r4, #12]
    a280:	0089      	lsls	r1, r1, #2
    a282:	0092      	lsls	r2, r2, #2
    a284:	400b      	ands	r3, r1
    a286:	4293      	cmp	r3, r2
    a288:	d003      	beq.n	a292 <__swsetup_r+0xa6>
    a28a:	0021      	movs	r1, r4
    a28c:	0030      	movs	r0, r6
    a28e:	f000 fa19 	bl	a6c4 <__smakebuf_r>
    a292:	2301      	movs	r3, #1
    a294:	89a2      	ldrh	r2, [r4, #12]
    a296:	4013      	ands	r3, r2
    a298:	d011      	beq.n	a2be <__swsetup_r+0xd2>
    a29a:	2300      	movs	r3, #0
    a29c:	60a3      	str	r3, [r4, #8]
    a29e:	6963      	ldr	r3, [r4, #20]
    a2a0:	425b      	negs	r3, r3
    a2a2:	61a3      	str	r3, [r4, #24]
    a2a4:	2000      	movs	r0, #0
    a2a6:	6923      	ldr	r3, [r4, #16]
    a2a8:	4283      	cmp	r3, r0
    a2aa:	d1be      	bne.n	a22a <__swsetup_r+0x3e>
    a2ac:	230c      	movs	r3, #12
    a2ae:	5ee2      	ldrsh	r2, [r4, r3]
    a2b0:	0613      	lsls	r3, r2, #24
    a2b2:	d5ba      	bpl.n	a22a <__swsetup_r+0x3e>
    a2b4:	2340      	movs	r3, #64	; 0x40
    a2b6:	4313      	orrs	r3, r2
    a2b8:	81a3      	strh	r3, [r4, #12]
    a2ba:	3801      	subs	r0, #1
    a2bc:	e7b5      	b.n	a22a <__swsetup_r+0x3e>
    a2be:	0792      	lsls	r2, r2, #30
    a2c0:	d400      	bmi.n	a2c4 <__swsetup_r+0xd8>
    a2c2:	6963      	ldr	r3, [r4, #20]
    a2c4:	60a3      	str	r3, [r4, #8]
    a2c6:	e7ed      	b.n	a2a4 <__swsetup_r+0xb8>
    a2c8:	20000074 	.word	0x20000074
    a2cc:	0000c2f8 	.word	0x0000c2f8
    a2d0:	0000c318 	.word	0x0000c318
    a2d4:	0000c2d8 	.word	0x0000c2d8

0000a2d8 <__sflush_r>:
    a2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a2da:	898a      	ldrh	r2, [r1, #12]
    a2dc:	0005      	movs	r5, r0
    a2de:	000c      	movs	r4, r1
    a2e0:	0713      	lsls	r3, r2, #28
    a2e2:	d460      	bmi.n	a3a6 <__sflush_r+0xce>
    a2e4:	684b      	ldr	r3, [r1, #4]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	dc04      	bgt.n	a2f4 <__sflush_r+0x1c>
    a2ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	dc01      	bgt.n	a2f4 <__sflush_r+0x1c>
    a2f0:	2000      	movs	r0, #0
    a2f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a2f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a2f6:	2f00      	cmp	r7, #0
    a2f8:	d0fa      	beq.n	a2f0 <__sflush_r+0x18>
    a2fa:	2300      	movs	r3, #0
    a2fc:	682e      	ldr	r6, [r5, #0]
    a2fe:	602b      	str	r3, [r5, #0]
    a300:	2380      	movs	r3, #128	; 0x80
    a302:	015b      	lsls	r3, r3, #5
    a304:	401a      	ands	r2, r3
    a306:	d034      	beq.n	a372 <__sflush_r+0x9a>
    a308:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a30a:	89a3      	ldrh	r3, [r4, #12]
    a30c:	075b      	lsls	r3, r3, #29
    a30e:	d506      	bpl.n	a31e <__sflush_r+0x46>
    a310:	6863      	ldr	r3, [r4, #4]
    a312:	1ac0      	subs	r0, r0, r3
    a314:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a316:	2b00      	cmp	r3, #0
    a318:	d001      	beq.n	a31e <__sflush_r+0x46>
    a31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a31c:	1ac0      	subs	r0, r0, r3
    a31e:	0002      	movs	r2, r0
    a320:	6a21      	ldr	r1, [r4, #32]
    a322:	2300      	movs	r3, #0
    a324:	0028      	movs	r0, r5
    a326:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a328:	47b8      	blx	r7
    a32a:	89a1      	ldrh	r1, [r4, #12]
    a32c:	1c43      	adds	r3, r0, #1
    a32e:	d106      	bne.n	a33e <__sflush_r+0x66>
    a330:	682b      	ldr	r3, [r5, #0]
    a332:	2b1d      	cmp	r3, #29
    a334:	d831      	bhi.n	a39a <__sflush_r+0xc2>
    a336:	4a2c      	ldr	r2, [pc, #176]	; (a3e8 <__sflush_r+0x110>)
    a338:	40da      	lsrs	r2, r3
    a33a:	07d3      	lsls	r3, r2, #31
    a33c:	d52d      	bpl.n	a39a <__sflush_r+0xc2>
    a33e:	2300      	movs	r3, #0
    a340:	6063      	str	r3, [r4, #4]
    a342:	6923      	ldr	r3, [r4, #16]
    a344:	6023      	str	r3, [r4, #0]
    a346:	04cb      	lsls	r3, r1, #19
    a348:	d505      	bpl.n	a356 <__sflush_r+0x7e>
    a34a:	1c43      	adds	r3, r0, #1
    a34c:	d102      	bne.n	a354 <__sflush_r+0x7c>
    a34e:	682b      	ldr	r3, [r5, #0]
    a350:	2b00      	cmp	r3, #0
    a352:	d100      	bne.n	a356 <__sflush_r+0x7e>
    a354:	6560      	str	r0, [r4, #84]	; 0x54
    a356:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a358:	602e      	str	r6, [r5, #0]
    a35a:	2900      	cmp	r1, #0
    a35c:	d0c8      	beq.n	a2f0 <__sflush_r+0x18>
    a35e:	0023      	movs	r3, r4
    a360:	3344      	adds	r3, #68	; 0x44
    a362:	4299      	cmp	r1, r3
    a364:	d002      	beq.n	a36c <__sflush_r+0x94>
    a366:	0028      	movs	r0, r5
    a368:	f000 fa0c 	bl	a784 <_free_r>
    a36c:	2000      	movs	r0, #0
    a36e:	6360      	str	r0, [r4, #52]	; 0x34
    a370:	e7bf      	b.n	a2f2 <__sflush_r+0x1a>
    a372:	2301      	movs	r3, #1
    a374:	6a21      	ldr	r1, [r4, #32]
    a376:	0028      	movs	r0, r5
    a378:	47b8      	blx	r7
    a37a:	1c43      	adds	r3, r0, #1
    a37c:	d1c5      	bne.n	a30a <__sflush_r+0x32>
    a37e:	682b      	ldr	r3, [r5, #0]
    a380:	2b00      	cmp	r3, #0
    a382:	d0c2      	beq.n	a30a <__sflush_r+0x32>
    a384:	2b1d      	cmp	r3, #29
    a386:	d001      	beq.n	a38c <__sflush_r+0xb4>
    a388:	2b16      	cmp	r3, #22
    a38a:	d101      	bne.n	a390 <__sflush_r+0xb8>
    a38c:	602e      	str	r6, [r5, #0]
    a38e:	e7af      	b.n	a2f0 <__sflush_r+0x18>
    a390:	2340      	movs	r3, #64	; 0x40
    a392:	89a2      	ldrh	r2, [r4, #12]
    a394:	4313      	orrs	r3, r2
    a396:	81a3      	strh	r3, [r4, #12]
    a398:	e7ab      	b.n	a2f2 <__sflush_r+0x1a>
    a39a:	2340      	movs	r3, #64	; 0x40
    a39c:	430b      	orrs	r3, r1
    a39e:	2001      	movs	r0, #1
    a3a0:	81a3      	strh	r3, [r4, #12]
    a3a2:	4240      	negs	r0, r0
    a3a4:	e7a5      	b.n	a2f2 <__sflush_r+0x1a>
    a3a6:	690f      	ldr	r7, [r1, #16]
    a3a8:	2f00      	cmp	r7, #0
    a3aa:	d0a1      	beq.n	a2f0 <__sflush_r+0x18>
    a3ac:	680b      	ldr	r3, [r1, #0]
    a3ae:	600f      	str	r7, [r1, #0]
    a3b0:	1bdb      	subs	r3, r3, r7
    a3b2:	9301      	str	r3, [sp, #4]
    a3b4:	2300      	movs	r3, #0
    a3b6:	0792      	lsls	r2, r2, #30
    a3b8:	d100      	bne.n	a3bc <__sflush_r+0xe4>
    a3ba:	694b      	ldr	r3, [r1, #20]
    a3bc:	60a3      	str	r3, [r4, #8]
    a3be:	9b01      	ldr	r3, [sp, #4]
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	dc00      	bgt.n	a3c6 <__sflush_r+0xee>
    a3c4:	e794      	b.n	a2f0 <__sflush_r+0x18>
    a3c6:	9b01      	ldr	r3, [sp, #4]
    a3c8:	003a      	movs	r2, r7
    a3ca:	6a21      	ldr	r1, [r4, #32]
    a3cc:	0028      	movs	r0, r5
    a3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a3d0:	47b0      	blx	r6
    a3d2:	2800      	cmp	r0, #0
    a3d4:	dc03      	bgt.n	a3de <__sflush_r+0x106>
    a3d6:	2340      	movs	r3, #64	; 0x40
    a3d8:	89a2      	ldrh	r2, [r4, #12]
    a3da:	4313      	orrs	r3, r2
    a3dc:	e7df      	b.n	a39e <__sflush_r+0xc6>
    a3de:	9b01      	ldr	r3, [sp, #4]
    a3e0:	183f      	adds	r7, r7, r0
    a3e2:	1a1b      	subs	r3, r3, r0
    a3e4:	9301      	str	r3, [sp, #4]
    a3e6:	e7ea      	b.n	a3be <__sflush_r+0xe6>
    a3e8:	20400001 	.word	0x20400001

0000a3ec <_fflush_r>:
    a3ec:	690b      	ldr	r3, [r1, #16]
    a3ee:	b570      	push	{r4, r5, r6, lr}
    a3f0:	0005      	movs	r5, r0
    a3f2:	000c      	movs	r4, r1
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d101      	bne.n	a3fc <_fflush_r+0x10>
    a3f8:	2000      	movs	r0, #0
    a3fa:	bd70      	pop	{r4, r5, r6, pc}
    a3fc:	2800      	cmp	r0, #0
    a3fe:	d004      	beq.n	a40a <_fflush_r+0x1e>
    a400:	6983      	ldr	r3, [r0, #24]
    a402:	2b00      	cmp	r3, #0
    a404:	d101      	bne.n	a40a <_fflush_r+0x1e>
    a406:	f000 f873 	bl	a4f0 <__sinit>
    a40a:	4b0b      	ldr	r3, [pc, #44]	; (a438 <_fflush_r+0x4c>)
    a40c:	429c      	cmp	r4, r3
    a40e:	d109      	bne.n	a424 <_fflush_r+0x38>
    a410:	686c      	ldr	r4, [r5, #4]
    a412:	220c      	movs	r2, #12
    a414:	5ea3      	ldrsh	r3, [r4, r2]
    a416:	2b00      	cmp	r3, #0
    a418:	d0ee      	beq.n	a3f8 <_fflush_r+0xc>
    a41a:	0021      	movs	r1, r4
    a41c:	0028      	movs	r0, r5
    a41e:	f7ff ff5b 	bl	a2d8 <__sflush_r>
    a422:	e7ea      	b.n	a3fa <_fflush_r+0xe>
    a424:	4b05      	ldr	r3, [pc, #20]	; (a43c <_fflush_r+0x50>)
    a426:	429c      	cmp	r4, r3
    a428:	d101      	bne.n	a42e <_fflush_r+0x42>
    a42a:	68ac      	ldr	r4, [r5, #8]
    a42c:	e7f1      	b.n	a412 <_fflush_r+0x26>
    a42e:	4b04      	ldr	r3, [pc, #16]	; (a440 <_fflush_r+0x54>)
    a430:	429c      	cmp	r4, r3
    a432:	d1ee      	bne.n	a412 <_fflush_r+0x26>
    a434:	68ec      	ldr	r4, [r5, #12]
    a436:	e7ec      	b.n	a412 <_fflush_r+0x26>
    a438:	0000c2f8 	.word	0x0000c2f8
    a43c:	0000c318 	.word	0x0000c318
    a440:	0000c2d8 	.word	0x0000c2d8

0000a444 <fflush>:
    a444:	b510      	push	{r4, lr}
    a446:	1e01      	subs	r1, r0, #0
    a448:	d105      	bne.n	a456 <fflush+0x12>
    a44a:	4b05      	ldr	r3, [pc, #20]	; (a460 <fflush+0x1c>)
    a44c:	4905      	ldr	r1, [pc, #20]	; (a464 <fflush+0x20>)
    a44e:	6818      	ldr	r0, [r3, #0]
    a450:	f000 f8de 	bl	a610 <_fwalk_reent>
    a454:	bd10      	pop	{r4, pc}
    a456:	4b04      	ldr	r3, [pc, #16]	; (a468 <fflush+0x24>)
    a458:	6818      	ldr	r0, [r3, #0]
    a45a:	f7ff ffc7 	bl	a3ec <_fflush_r>
    a45e:	e7f9      	b.n	a454 <fflush+0x10>
    a460:	0000c2d4 	.word	0x0000c2d4
    a464:	0000a3ed 	.word	0x0000a3ed
    a468:	20000074 	.word	0x20000074

0000a46c <_cleanup_r>:
    a46c:	b510      	push	{r4, lr}
    a46e:	4902      	ldr	r1, [pc, #8]	; (a478 <_cleanup_r+0xc>)
    a470:	f000 f8ce 	bl	a610 <_fwalk_reent>
    a474:	bd10      	pop	{r4, pc}
    a476:	46c0      	nop			; (mov r8, r8)
    a478:	0000a3ed 	.word	0x0000a3ed

0000a47c <std.isra.0>:
    a47c:	2300      	movs	r3, #0
    a47e:	b510      	push	{r4, lr}
    a480:	0004      	movs	r4, r0
    a482:	6003      	str	r3, [r0, #0]
    a484:	6043      	str	r3, [r0, #4]
    a486:	6083      	str	r3, [r0, #8]
    a488:	8181      	strh	r1, [r0, #12]
    a48a:	6643      	str	r3, [r0, #100]	; 0x64
    a48c:	81c2      	strh	r2, [r0, #14]
    a48e:	6103      	str	r3, [r0, #16]
    a490:	6143      	str	r3, [r0, #20]
    a492:	6183      	str	r3, [r0, #24]
    a494:	0019      	movs	r1, r3
    a496:	2208      	movs	r2, #8
    a498:	305c      	adds	r0, #92	; 0x5c
    a49a:	f7ff fbea 	bl	9c72 <memset>
    a49e:	4b05      	ldr	r3, [pc, #20]	; (a4b4 <std.isra.0+0x38>)
    a4a0:	6224      	str	r4, [r4, #32]
    a4a2:	6263      	str	r3, [r4, #36]	; 0x24
    a4a4:	4b04      	ldr	r3, [pc, #16]	; (a4b8 <std.isra.0+0x3c>)
    a4a6:	62a3      	str	r3, [r4, #40]	; 0x28
    a4a8:	4b04      	ldr	r3, [pc, #16]	; (a4bc <std.isra.0+0x40>)
    a4aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    a4ac:	4b04      	ldr	r3, [pc, #16]	; (a4c0 <std.isra.0+0x44>)
    a4ae:	6323      	str	r3, [r4, #48]	; 0x30
    a4b0:	bd10      	pop	{r4, pc}
    a4b2:	46c0      	nop			; (mov r8, r8)
    a4b4:	0000b651 	.word	0x0000b651
    a4b8:	0000b679 	.word	0x0000b679
    a4bc:	0000b6b1 	.word	0x0000b6b1
    a4c0:	0000b6dd 	.word	0x0000b6dd

0000a4c4 <__sfmoreglue>:
    a4c4:	b570      	push	{r4, r5, r6, lr}
    a4c6:	2568      	movs	r5, #104	; 0x68
    a4c8:	1e4a      	subs	r2, r1, #1
    a4ca:	4355      	muls	r5, r2
    a4cc:	000e      	movs	r6, r1
    a4ce:	0029      	movs	r1, r5
    a4d0:	3174      	adds	r1, #116	; 0x74
    a4d2:	f000 f9a1 	bl	a818 <_malloc_r>
    a4d6:	1e04      	subs	r4, r0, #0
    a4d8:	d008      	beq.n	a4ec <__sfmoreglue+0x28>
    a4da:	2100      	movs	r1, #0
    a4dc:	002a      	movs	r2, r5
    a4de:	6001      	str	r1, [r0, #0]
    a4e0:	6046      	str	r6, [r0, #4]
    a4e2:	300c      	adds	r0, #12
    a4e4:	60a0      	str	r0, [r4, #8]
    a4e6:	3268      	adds	r2, #104	; 0x68
    a4e8:	f7ff fbc3 	bl	9c72 <memset>
    a4ec:	0020      	movs	r0, r4
    a4ee:	bd70      	pop	{r4, r5, r6, pc}

0000a4f0 <__sinit>:
    a4f0:	6983      	ldr	r3, [r0, #24]
    a4f2:	b513      	push	{r0, r1, r4, lr}
    a4f4:	0004      	movs	r4, r0
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d128      	bne.n	a54c <__sinit+0x5c>
    a4fa:	6483      	str	r3, [r0, #72]	; 0x48
    a4fc:	64c3      	str	r3, [r0, #76]	; 0x4c
    a4fe:	6503      	str	r3, [r0, #80]	; 0x50
    a500:	4b13      	ldr	r3, [pc, #76]	; (a550 <__sinit+0x60>)
    a502:	4a14      	ldr	r2, [pc, #80]	; (a554 <__sinit+0x64>)
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	6282      	str	r2, [r0, #40]	; 0x28
    a508:	9301      	str	r3, [sp, #4]
    a50a:	4298      	cmp	r0, r3
    a50c:	d101      	bne.n	a512 <__sinit+0x22>
    a50e:	2301      	movs	r3, #1
    a510:	6183      	str	r3, [r0, #24]
    a512:	0020      	movs	r0, r4
    a514:	f000 f820 	bl	a558 <__sfp>
    a518:	6060      	str	r0, [r4, #4]
    a51a:	0020      	movs	r0, r4
    a51c:	f000 f81c 	bl	a558 <__sfp>
    a520:	60a0      	str	r0, [r4, #8]
    a522:	0020      	movs	r0, r4
    a524:	f000 f818 	bl	a558 <__sfp>
    a528:	2200      	movs	r2, #0
    a52a:	60e0      	str	r0, [r4, #12]
    a52c:	2104      	movs	r1, #4
    a52e:	6860      	ldr	r0, [r4, #4]
    a530:	f7ff ffa4 	bl	a47c <std.isra.0>
    a534:	2201      	movs	r2, #1
    a536:	2109      	movs	r1, #9
    a538:	68a0      	ldr	r0, [r4, #8]
    a53a:	f7ff ff9f 	bl	a47c <std.isra.0>
    a53e:	2202      	movs	r2, #2
    a540:	2112      	movs	r1, #18
    a542:	68e0      	ldr	r0, [r4, #12]
    a544:	f7ff ff9a 	bl	a47c <std.isra.0>
    a548:	2301      	movs	r3, #1
    a54a:	61a3      	str	r3, [r4, #24]
    a54c:	bd13      	pop	{r0, r1, r4, pc}
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	0000c2d4 	.word	0x0000c2d4
    a554:	0000a46d 	.word	0x0000a46d

0000a558 <__sfp>:
    a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a55a:	4b1e      	ldr	r3, [pc, #120]	; (a5d4 <__sfp+0x7c>)
    a55c:	0007      	movs	r7, r0
    a55e:	681e      	ldr	r6, [r3, #0]
    a560:	69b3      	ldr	r3, [r6, #24]
    a562:	2b00      	cmp	r3, #0
    a564:	d102      	bne.n	a56c <__sfp+0x14>
    a566:	0030      	movs	r0, r6
    a568:	f7ff ffc2 	bl	a4f0 <__sinit>
    a56c:	3648      	adds	r6, #72	; 0x48
    a56e:	68b4      	ldr	r4, [r6, #8]
    a570:	6873      	ldr	r3, [r6, #4]
    a572:	3b01      	subs	r3, #1
    a574:	d504      	bpl.n	a580 <__sfp+0x28>
    a576:	6833      	ldr	r3, [r6, #0]
    a578:	2b00      	cmp	r3, #0
    a57a:	d007      	beq.n	a58c <__sfp+0x34>
    a57c:	6836      	ldr	r6, [r6, #0]
    a57e:	e7f6      	b.n	a56e <__sfp+0x16>
    a580:	220c      	movs	r2, #12
    a582:	5ea5      	ldrsh	r5, [r4, r2]
    a584:	2d00      	cmp	r5, #0
    a586:	d00d      	beq.n	a5a4 <__sfp+0x4c>
    a588:	3468      	adds	r4, #104	; 0x68
    a58a:	e7f2      	b.n	a572 <__sfp+0x1a>
    a58c:	2104      	movs	r1, #4
    a58e:	0038      	movs	r0, r7
    a590:	f7ff ff98 	bl	a4c4 <__sfmoreglue>
    a594:	6030      	str	r0, [r6, #0]
    a596:	2800      	cmp	r0, #0
    a598:	d1f0      	bne.n	a57c <__sfp+0x24>
    a59a:	230c      	movs	r3, #12
    a59c:	0004      	movs	r4, r0
    a59e:	603b      	str	r3, [r7, #0]
    a5a0:	0020      	movs	r0, r4
    a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5a4:	2301      	movs	r3, #1
    a5a6:	0020      	movs	r0, r4
    a5a8:	425b      	negs	r3, r3
    a5aa:	81e3      	strh	r3, [r4, #14]
    a5ac:	3302      	adds	r3, #2
    a5ae:	81a3      	strh	r3, [r4, #12]
    a5b0:	6665      	str	r5, [r4, #100]	; 0x64
    a5b2:	6025      	str	r5, [r4, #0]
    a5b4:	60a5      	str	r5, [r4, #8]
    a5b6:	6065      	str	r5, [r4, #4]
    a5b8:	6125      	str	r5, [r4, #16]
    a5ba:	6165      	str	r5, [r4, #20]
    a5bc:	61a5      	str	r5, [r4, #24]
    a5be:	2208      	movs	r2, #8
    a5c0:	0029      	movs	r1, r5
    a5c2:	305c      	adds	r0, #92	; 0x5c
    a5c4:	f7ff fb55 	bl	9c72 <memset>
    a5c8:	6365      	str	r5, [r4, #52]	; 0x34
    a5ca:	63a5      	str	r5, [r4, #56]	; 0x38
    a5cc:	64a5      	str	r5, [r4, #72]	; 0x48
    a5ce:	64e5      	str	r5, [r4, #76]	; 0x4c
    a5d0:	e7e6      	b.n	a5a0 <__sfp+0x48>
    a5d2:	46c0      	nop			; (mov r8, r8)
    a5d4:	0000c2d4 	.word	0x0000c2d4

0000a5d8 <_fwalk>:
    a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a5da:	3048      	adds	r0, #72	; 0x48
    a5dc:	0004      	movs	r4, r0
    a5de:	2600      	movs	r6, #0
    a5e0:	9101      	str	r1, [sp, #4]
    a5e2:	2c00      	cmp	r4, #0
    a5e4:	d101      	bne.n	a5ea <_fwalk+0x12>
    a5e6:	0030      	movs	r0, r6
    a5e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a5ea:	68a5      	ldr	r5, [r4, #8]
    a5ec:	6867      	ldr	r7, [r4, #4]
    a5ee:	3f01      	subs	r7, #1
    a5f0:	d501      	bpl.n	a5f6 <_fwalk+0x1e>
    a5f2:	6824      	ldr	r4, [r4, #0]
    a5f4:	e7f5      	b.n	a5e2 <_fwalk+0xa>
    a5f6:	89ab      	ldrh	r3, [r5, #12]
    a5f8:	2b01      	cmp	r3, #1
    a5fa:	d907      	bls.n	a60c <_fwalk+0x34>
    a5fc:	220e      	movs	r2, #14
    a5fe:	5eab      	ldrsh	r3, [r5, r2]
    a600:	3301      	adds	r3, #1
    a602:	d003      	beq.n	a60c <_fwalk+0x34>
    a604:	0028      	movs	r0, r5
    a606:	9b01      	ldr	r3, [sp, #4]
    a608:	4798      	blx	r3
    a60a:	4306      	orrs	r6, r0
    a60c:	3568      	adds	r5, #104	; 0x68
    a60e:	e7ee      	b.n	a5ee <_fwalk+0x16>

0000a610 <_fwalk_reent>:
    a610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a612:	0004      	movs	r4, r0
    a614:	0007      	movs	r7, r0
    a616:	2600      	movs	r6, #0
    a618:	9101      	str	r1, [sp, #4]
    a61a:	3448      	adds	r4, #72	; 0x48
    a61c:	2c00      	cmp	r4, #0
    a61e:	d101      	bne.n	a624 <_fwalk_reent+0x14>
    a620:	0030      	movs	r0, r6
    a622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a624:	6863      	ldr	r3, [r4, #4]
    a626:	68a5      	ldr	r5, [r4, #8]
    a628:	9300      	str	r3, [sp, #0]
    a62a:	9b00      	ldr	r3, [sp, #0]
    a62c:	3b01      	subs	r3, #1
    a62e:	9300      	str	r3, [sp, #0]
    a630:	d501      	bpl.n	a636 <_fwalk_reent+0x26>
    a632:	6824      	ldr	r4, [r4, #0]
    a634:	e7f2      	b.n	a61c <_fwalk_reent+0xc>
    a636:	89ab      	ldrh	r3, [r5, #12]
    a638:	2b01      	cmp	r3, #1
    a63a:	d908      	bls.n	a64e <_fwalk_reent+0x3e>
    a63c:	220e      	movs	r2, #14
    a63e:	5eab      	ldrsh	r3, [r5, r2]
    a640:	3301      	adds	r3, #1
    a642:	d004      	beq.n	a64e <_fwalk_reent+0x3e>
    a644:	0029      	movs	r1, r5
    a646:	0038      	movs	r0, r7
    a648:	9b01      	ldr	r3, [sp, #4]
    a64a:	4798      	blx	r3
    a64c:	4306      	orrs	r6, r0
    a64e:	3568      	adds	r5, #104	; 0x68
    a650:	e7eb      	b.n	a62a <_fwalk_reent+0x1a>

0000a652 <__locale_ctype_ptr_l>:
    a652:	30ec      	adds	r0, #236	; 0xec
    a654:	6800      	ldr	r0, [r0, #0]
    a656:	4770      	bx	lr

0000a658 <__locale_ctype_ptr>:
    a658:	4b04      	ldr	r3, [pc, #16]	; (a66c <__locale_ctype_ptr+0x14>)
    a65a:	681b      	ldr	r3, [r3, #0]
    a65c:	6a1b      	ldr	r3, [r3, #32]
    a65e:	2b00      	cmp	r3, #0
    a660:	d100      	bne.n	a664 <__locale_ctype_ptr+0xc>
    a662:	4b03      	ldr	r3, [pc, #12]	; (a670 <__locale_ctype_ptr+0x18>)
    a664:	33ec      	adds	r3, #236	; 0xec
    a666:	6818      	ldr	r0, [r3, #0]
    a668:	4770      	bx	lr
    a66a:	46c0      	nop			; (mov r8, r8)
    a66c:	20000074 	.word	0x20000074
    a670:	200000d8 	.word	0x200000d8

0000a674 <__swhatbuf_r>:
    a674:	b570      	push	{r4, r5, r6, lr}
    a676:	000e      	movs	r6, r1
    a678:	001d      	movs	r5, r3
    a67a:	230e      	movs	r3, #14
    a67c:	5ec9      	ldrsh	r1, [r1, r3]
    a67e:	b090      	sub	sp, #64	; 0x40
    a680:	0014      	movs	r4, r2
    a682:	2900      	cmp	r1, #0
    a684:	da07      	bge.n	a696 <__swhatbuf_r+0x22>
    a686:	2300      	movs	r3, #0
    a688:	602b      	str	r3, [r5, #0]
    a68a:	89b3      	ldrh	r3, [r6, #12]
    a68c:	061b      	lsls	r3, r3, #24
    a68e:	d411      	bmi.n	a6b4 <__swhatbuf_r+0x40>
    a690:	2380      	movs	r3, #128	; 0x80
    a692:	00db      	lsls	r3, r3, #3
    a694:	e00f      	b.n	a6b6 <__swhatbuf_r+0x42>
    a696:	aa01      	add	r2, sp, #4
    a698:	f001 f9a0 	bl	b9dc <_fstat_r>
    a69c:	2800      	cmp	r0, #0
    a69e:	dbf2      	blt.n	a686 <__swhatbuf_r+0x12>
    a6a0:	22f0      	movs	r2, #240	; 0xf0
    a6a2:	9b02      	ldr	r3, [sp, #8]
    a6a4:	0212      	lsls	r2, r2, #8
    a6a6:	4013      	ands	r3, r2
    a6a8:	4a05      	ldr	r2, [pc, #20]	; (a6c0 <__swhatbuf_r+0x4c>)
    a6aa:	189b      	adds	r3, r3, r2
    a6ac:	425a      	negs	r2, r3
    a6ae:	4153      	adcs	r3, r2
    a6b0:	602b      	str	r3, [r5, #0]
    a6b2:	e7ed      	b.n	a690 <__swhatbuf_r+0x1c>
    a6b4:	2340      	movs	r3, #64	; 0x40
    a6b6:	2000      	movs	r0, #0
    a6b8:	6023      	str	r3, [r4, #0]
    a6ba:	b010      	add	sp, #64	; 0x40
    a6bc:	bd70      	pop	{r4, r5, r6, pc}
    a6be:	46c0      	nop			; (mov r8, r8)
    a6c0:	ffffe000 	.word	0xffffe000

0000a6c4 <__smakebuf_r>:
    a6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a6c6:	2602      	movs	r6, #2
    a6c8:	898b      	ldrh	r3, [r1, #12]
    a6ca:	0005      	movs	r5, r0
    a6cc:	000c      	movs	r4, r1
    a6ce:	4233      	tst	r3, r6
    a6d0:	d006      	beq.n	a6e0 <__smakebuf_r+0x1c>
    a6d2:	0023      	movs	r3, r4
    a6d4:	3347      	adds	r3, #71	; 0x47
    a6d6:	6023      	str	r3, [r4, #0]
    a6d8:	6123      	str	r3, [r4, #16]
    a6da:	2301      	movs	r3, #1
    a6dc:	6163      	str	r3, [r4, #20]
    a6de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a6e0:	ab01      	add	r3, sp, #4
    a6e2:	466a      	mov	r2, sp
    a6e4:	f7ff ffc6 	bl	a674 <__swhatbuf_r>
    a6e8:	9900      	ldr	r1, [sp, #0]
    a6ea:	0007      	movs	r7, r0
    a6ec:	0028      	movs	r0, r5
    a6ee:	f000 f893 	bl	a818 <_malloc_r>
    a6f2:	2800      	cmp	r0, #0
    a6f4:	d108      	bne.n	a708 <__smakebuf_r+0x44>
    a6f6:	220c      	movs	r2, #12
    a6f8:	5ea3      	ldrsh	r3, [r4, r2]
    a6fa:	059a      	lsls	r2, r3, #22
    a6fc:	d4ef      	bmi.n	a6de <__smakebuf_r+0x1a>
    a6fe:	2203      	movs	r2, #3
    a700:	4393      	bics	r3, r2
    a702:	431e      	orrs	r6, r3
    a704:	81a6      	strh	r6, [r4, #12]
    a706:	e7e4      	b.n	a6d2 <__smakebuf_r+0xe>
    a708:	4b0f      	ldr	r3, [pc, #60]	; (a748 <__smakebuf_r+0x84>)
    a70a:	62ab      	str	r3, [r5, #40]	; 0x28
    a70c:	2380      	movs	r3, #128	; 0x80
    a70e:	89a2      	ldrh	r2, [r4, #12]
    a710:	6020      	str	r0, [r4, #0]
    a712:	4313      	orrs	r3, r2
    a714:	81a3      	strh	r3, [r4, #12]
    a716:	9b00      	ldr	r3, [sp, #0]
    a718:	6120      	str	r0, [r4, #16]
    a71a:	6163      	str	r3, [r4, #20]
    a71c:	9b01      	ldr	r3, [sp, #4]
    a71e:	2b00      	cmp	r3, #0
    a720:	d00d      	beq.n	a73e <__smakebuf_r+0x7a>
    a722:	230e      	movs	r3, #14
    a724:	5ee1      	ldrsh	r1, [r4, r3]
    a726:	0028      	movs	r0, r5
    a728:	f001 f96a 	bl	ba00 <_isatty_r>
    a72c:	2800      	cmp	r0, #0
    a72e:	d006      	beq.n	a73e <__smakebuf_r+0x7a>
    a730:	2203      	movs	r2, #3
    a732:	89a3      	ldrh	r3, [r4, #12]
    a734:	4393      	bics	r3, r2
    a736:	001a      	movs	r2, r3
    a738:	2301      	movs	r3, #1
    a73a:	4313      	orrs	r3, r2
    a73c:	81a3      	strh	r3, [r4, #12]
    a73e:	89a0      	ldrh	r0, [r4, #12]
    a740:	4338      	orrs	r0, r7
    a742:	81a0      	strh	r0, [r4, #12]
    a744:	e7cb      	b.n	a6de <__smakebuf_r+0x1a>
    a746:	46c0      	nop			; (mov r8, r8)
    a748:	0000a46d 	.word	0x0000a46d

0000a74c <malloc>:
    a74c:	b510      	push	{r4, lr}
    a74e:	4b03      	ldr	r3, [pc, #12]	; (a75c <malloc+0x10>)
    a750:	0001      	movs	r1, r0
    a752:	6818      	ldr	r0, [r3, #0]
    a754:	f000 f860 	bl	a818 <_malloc_r>
    a758:	bd10      	pop	{r4, pc}
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	20000074 	.word	0x20000074

0000a760 <__ascii_mbtowc>:
    a760:	b082      	sub	sp, #8
    a762:	2900      	cmp	r1, #0
    a764:	d100      	bne.n	a768 <__ascii_mbtowc+0x8>
    a766:	a901      	add	r1, sp, #4
    a768:	1e10      	subs	r0, r2, #0
    a76a:	d006      	beq.n	a77a <__ascii_mbtowc+0x1a>
    a76c:	2b00      	cmp	r3, #0
    a76e:	d006      	beq.n	a77e <__ascii_mbtowc+0x1e>
    a770:	7813      	ldrb	r3, [r2, #0]
    a772:	600b      	str	r3, [r1, #0]
    a774:	7810      	ldrb	r0, [r2, #0]
    a776:	1e43      	subs	r3, r0, #1
    a778:	4198      	sbcs	r0, r3
    a77a:	b002      	add	sp, #8
    a77c:	4770      	bx	lr
    a77e:	2002      	movs	r0, #2
    a780:	4240      	negs	r0, r0
    a782:	e7fa      	b.n	a77a <__ascii_mbtowc+0x1a>

0000a784 <_free_r>:
    a784:	b570      	push	{r4, r5, r6, lr}
    a786:	0005      	movs	r5, r0
    a788:	2900      	cmp	r1, #0
    a78a:	d010      	beq.n	a7ae <_free_r+0x2a>
    a78c:	1f0c      	subs	r4, r1, #4
    a78e:	6823      	ldr	r3, [r4, #0]
    a790:	2b00      	cmp	r3, #0
    a792:	da00      	bge.n	a796 <_free_r+0x12>
    a794:	18e4      	adds	r4, r4, r3
    a796:	0028      	movs	r0, r5
    a798:	f001 f963 	bl	ba62 <__malloc_lock>
    a79c:	4a1d      	ldr	r2, [pc, #116]	; (a814 <_free_r+0x90>)
    a79e:	6813      	ldr	r3, [r2, #0]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d105      	bne.n	a7b0 <_free_r+0x2c>
    a7a4:	6063      	str	r3, [r4, #4]
    a7a6:	6014      	str	r4, [r2, #0]
    a7a8:	0028      	movs	r0, r5
    a7aa:	f001 f95b 	bl	ba64 <__malloc_unlock>
    a7ae:	bd70      	pop	{r4, r5, r6, pc}
    a7b0:	42a3      	cmp	r3, r4
    a7b2:	d909      	bls.n	a7c8 <_free_r+0x44>
    a7b4:	6821      	ldr	r1, [r4, #0]
    a7b6:	1860      	adds	r0, r4, r1
    a7b8:	4283      	cmp	r3, r0
    a7ba:	d1f3      	bne.n	a7a4 <_free_r+0x20>
    a7bc:	6818      	ldr	r0, [r3, #0]
    a7be:	685b      	ldr	r3, [r3, #4]
    a7c0:	1841      	adds	r1, r0, r1
    a7c2:	6021      	str	r1, [r4, #0]
    a7c4:	e7ee      	b.n	a7a4 <_free_r+0x20>
    a7c6:	0013      	movs	r3, r2
    a7c8:	685a      	ldr	r2, [r3, #4]
    a7ca:	2a00      	cmp	r2, #0
    a7cc:	d001      	beq.n	a7d2 <_free_r+0x4e>
    a7ce:	42a2      	cmp	r2, r4
    a7d0:	d9f9      	bls.n	a7c6 <_free_r+0x42>
    a7d2:	6819      	ldr	r1, [r3, #0]
    a7d4:	1858      	adds	r0, r3, r1
    a7d6:	42a0      	cmp	r0, r4
    a7d8:	d10b      	bne.n	a7f2 <_free_r+0x6e>
    a7da:	6820      	ldr	r0, [r4, #0]
    a7dc:	1809      	adds	r1, r1, r0
    a7de:	1858      	adds	r0, r3, r1
    a7e0:	6019      	str	r1, [r3, #0]
    a7e2:	4282      	cmp	r2, r0
    a7e4:	d1e0      	bne.n	a7a8 <_free_r+0x24>
    a7e6:	6810      	ldr	r0, [r2, #0]
    a7e8:	6852      	ldr	r2, [r2, #4]
    a7ea:	1841      	adds	r1, r0, r1
    a7ec:	6019      	str	r1, [r3, #0]
    a7ee:	605a      	str	r2, [r3, #4]
    a7f0:	e7da      	b.n	a7a8 <_free_r+0x24>
    a7f2:	42a0      	cmp	r0, r4
    a7f4:	d902      	bls.n	a7fc <_free_r+0x78>
    a7f6:	230c      	movs	r3, #12
    a7f8:	602b      	str	r3, [r5, #0]
    a7fa:	e7d5      	b.n	a7a8 <_free_r+0x24>
    a7fc:	6821      	ldr	r1, [r4, #0]
    a7fe:	1860      	adds	r0, r4, r1
    a800:	4282      	cmp	r2, r0
    a802:	d103      	bne.n	a80c <_free_r+0x88>
    a804:	6810      	ldr	r0, [r2, #0]
    a806:	6852      	ldr	r2, [r2, #4]
    a808:	1841      	adds	r1, r0, r1
    a80a:	6021      	str	r1, [r4, #0]
    a80c:	6062      	str	r2, [r4, #4]
    a80e:	605c      	str	r4, [r3, #4]
    a810:	e7ca      	b.n	a7a8 <_free_r+0x24>
    a812:	46c0      	nop			; (mov r8, r8)
    a814:	200002ec 	.word	0x200002ec

0000a818 <_malloc_r>:
    a818:	2303      	movs	r3, #3
    a81a:	b570      	push	{r4, r5, r6, lr}
    a81c:	1ccd      	adds	r5, r1, #3
    a81e:	439d      	bics	r5, r3
    a820:	3508      	adds	r5, #8
    a822:	0006      	movs	r6, r0
    a824:	2d0c      	cmp	r5, #12
    a826:	d21e      	bcs.n	a866 <_malloc_r+0x4e>
    a828:	250c      	movs	r5, #12
    a82a:	42a9      	cmp	r1, r5
    a82c:	d81d      	bhi.n	a86a <_malloc_r+0x52>
    a82e:	0030      	movs	r0, r6
    a830:	f001 f917 	bl	ba62 <__malloc_lock>
    a834:	4a25      	ldr	r2, [pc, #148]	; (a8cc <_malloc_r+0xb4>)
    a836:	6814      	ldr	r4, [r2, #0]
    a838:	0021      	movs	r1, r4
    a83a:	2900      	cmp	r1, #0
    a83c:	d119      	bne.n	a872 <_malloc_r+0x5a>
    a83e:	4c24      	ldr	r4, [pc, #144]	; (a8d0 <_malloc_r+0xb8>)
    a840:	6823      	ldr	r3, [r4, #0]
    a842:	2b00      	cmp	r3, #0
    a844:	d103      	bne.n	a84e <_malloc_r+0x36>
    a846:	0030      	movs	r0, r6
    a848:	f000 febe 	bl	b5c8 <_sbrk_r>
    a84c:	6020      	str	r0, [r4, #0]
    a84e:	0029      	movs	r1, r5
    a850:	0030      	movs	r0, r6
    a852:	f000 feb9 	bl	b5c8 <_sbrk_r>
    a856:	1c43      	adds	r3, r0, #1
    a858:	d12c      	bne.n	a8b4 <_malloc_r+0x9c>
    a85a:	230c      	movs	r3, #12
    a85c:	0030      	movs	r0, r6
    a85e:	6033      	str	r3, [r6, #0]
    a860:	f001 f900 	bl	ba64 <__malloc_unlock>
    a864:	e003      	b.n	a86e <_malloc_r+0x56>
    a866:	2d00      	cmp	r5, #0
    a868:	dadf      	bge.n	a82a <_malloc_r+0x12>
    a86a:	230c      	movs	r3, #12
    a86c:	6033      	str	r3, [r6, #0]
    a86e:	2000      	movs	r0, #0
    a870:	bd70      	pop	{r4, r5, r6, pc}
    a872:	680b      	ldr	r3, [r1, #0]
    a874:	1b5b      	subs	r3, r3, r5
    a876:	d41a      	bmi.n	a8ae <_malloc_r+0x96>
    a878:	2b0b      	cmp	r3, #11
    a87a:	d903      	bls.n	a884 <_malloc_r+0x6c>
    a87c:	600b      	str	r3, [r1, #0]
    a87e:	18cc      	adds	r4, r1, r3
    a880:	6025      	str	r5, [r4, #0]
    a882:	e003      	b.n	a88c <_malloc_r+0x74>
    a884:	428c      	cmp	r4, r1
    a886:	d10e      	bne.n	a8a6 <_malloc_r+0x8e>
    a888:	6863      	ldr	r3, [r4, #4]
    a88a:	6013      	str	r3, [r2, #0]
    a88c:	0030      	movs	r0, r6
    a88e:	f001 f8e9 	bl	ba64 <__malloc_unlock>
    a892:	0020      	movs	r0, r4
    a894:	2207      	movs	r2, #7
    a896:	300b      	adds	r0, #11
    a898:	1d23      	adds	r3, r4, #4
    a89a:	4390      	bics	r0, r2
    a89c:	1ac3      	subs	r3, r0, r3
    a89e:	d0e7      	beq.n	a870 <_malloc_r+0x58>
    a8a0:	425a      	negs	r2, r3
    a8a2:	50e2      	str	r2, [r4, r3]
    a8a4:	e7e4      	b.n	a870 <_malloc_r+0x58>
    a8a6:	684b      	ldr	r3, [r1, #4]
    a8a8:	6063      	str	r3, [r4, #4]
    a8aa:	000c      	movs	r4, r1
    a8ac:	e7ee      	b.n	a88c <_malloc_r+0x74>
    a8ae:	000c      	movs	r4, r1
    a8b0:	6849      	ldr	r1, [r1, #4]
    a8b2:	e7c2      	b.n	a83a <_malloc_r+0x22>
    a8b4:	2303      	movs	r3, #3
    a8b6:	1cc4      	adds	r4, r0, #3
    a8b8:	439c      	bics	r4, r3
    a8ba:	42a0      	cmp	r0, r4
    a8bc:	d0e0      	beq.n	a880 <_malloc_r+0x68>
    a8be:	1a21      	subs	r1, r4, r0
    a8c0:	0030      	movs	r0, r6
    a8c2:	f000 fe81 	bl	b5c8 <_sbrk_r>
    a8c6:	1c43      	adds	r3, r0, #1
    a8c8:	d1da      	bne.n	a880 <_malloc_r+0x68>
    a8ca:	e7c6      	b.n	a85a <_malloc_r+0x42>
    a8cc:	200002ec 	.word	0x200002ec
    a8d0:	200002f0 	.word	0x200002f0

0000a8d4 <__sfputc_r>:
    a8d4:	6893      	ldr	r3, [r2, #8]
    a8d6:	b510      	push	{r4, lr}
    a8d8:	3b01      	subs	r3, #1
    a8da:	6093      	str	r3, [r2, #8]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	da05      	bge.n	a8ec <__sfputc_r+0x18>
    a8e0:	6994      	ldr	r4, [r2, #24]
    a8e2:	42a3      	cmp	r3, r4
    a8e4:	db08      	blt.n	a8f8 <__sfputc_r+0x24>
    a8e6:	b2cb      	uxtb	r3, r1
    a8e8:	2b0a      	cmp	r3, #10
    a8ea:	d005      	beq.n	a8f8 <__sfputc_r+0x24>
    a8ec:	6813      	ldr	r3, [r2, #0]
    a8ee:	1c58      	adds	r0, r3, #1
    a8f0:	6010      	str	r0, [r2, #0]
    a8f2:	7019      	strb	r1, [r3, #0]
    a8f4:	b2c8      	uxtb	r0, r1
    a8f6:	bd10      	pop	{r4, pc}
    a8f8:	f7ff fc22 	bl	a140 <__swbuf_r>
    a8fc:	e7fb      	b.n	a8f6 <__sfputc_r+0x22>

0000a8fe <__sfputs_r>:
    a8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a900:	0006      	movs	r6, r0
    a902:	000f      	movs	r7, r1
    a904:	0014      	movs	r4, r2
    a906:	18d5      	adds	r5, r2, r3
    a908:	42ac      	cmp	r4, r5
    a90a:	d101      	bne.n	a910 <__sfputs_r+0x12>
    a90c:	2000      	movs	r0, #0
    a90e:	e007      	b.n	a920 <__sfputs_r+0x22>
    a910:	7821      	ldrb	r1, [r4, #0]
    a912:	003a      	movs	r2, r7
    a914:	0030      	movs	r0, r6
    a916:	f7ff ffdd 	bl	a8d4 <__sfputc_r>
    a91a:	3401      	adds	r4, #1
    a91c:	1c43      	adds	r3, r0, #1
    a91e:	d1f3      	bne.n	a908 <__sfputs_r+0xa>
    a920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a924 <_vfiprintf_r>:
    a924:	b5f0      	push	{r4, r5, r6, r7, lr}
    a926:	b09f      	sub	sp, #124	; 0x7c
    a928:	0006      	movs	r6, r0
    a92a:	000f      	movs	r7, r1
    a92c:	0014      	movs	r4, r2
    a92e:	9305      	str	r3, [sp, #20]
    a930:	2800      	cmp	r0, #0
    a932:	d004      	beq.n	a93e <_vfiprintf_r+0x1a>
    a934:	6983      	ldr	r3, [r0, #24]
    a936:	2b00      	cmp	r3, #0
    a938:	d101      	bne.n	a93e <_vfiprintf_r+0x1a>
    a93a:	f7ff fdd9 	bl	a4f0 <__sinit>
    a93e:	4b7f      	ldr	r3, [pc, #508]	; (ab3c <_vfiprintf_r+0x218>)
    a940:	429f      	cmp	r7, r3
    a942:	d15c      	bne.n	a9fe <_vfiprintf_r+0xda>
    a944:	6877      	ldr	r7, [r6, #4]
    a946:	89bb      	ldrh	r3, [r7, #12]
    a948:	071b      	lsls	r3, r3, #28
    a94a:	d562      	bpl.n	aa12 <_vfiprintf_r+0xee>
    a94c:	693b      	ldr	r3, [r7, #16]
    a94e:	2b00      	cmp	r3, #0
    a950:	d05f      	beq.n	aa12 <_vfiprintf_r+0xee>
    a952:	2300      	movs	r3, #0
    a954:	ad06      	add	r5, sp, #24
    a956:	616b      	str	r3, [r5, #20]
    a958:	3320      	adds	r3, #32
    a95a:	766b      	strb	r3, [r5, #25]
    a95c:	3310      	adds	r3, #16
    a95e:	76ab      	strb	r3, [r5, #26]
    a960:	9402      	str	r4, [sp, #8]
    a962:	9c02      	ldr	r4, [sp, #8]
    a964:	7823      	ldrb	r3, [r4, #0]
    a966:	2b00      	cmp	r3, #0
    a968:	d15d      	bne.n	aa26 <_vfiprintf_r+0x102>
    a96a:	9b02      	ldr	r3, [sp, #8]
    a96c:	1ae3      	subs	r3, r4, r3
    a96e:	9304      	str	r3, [sp, #16]
    a970:	d00d      	beq.n	a98e <_vfiprintf_r+0x6a>
    a972:	9b04      	ldr	r3, [sp, #16]
    a974:	9a02      	ldr	r2, [sp, #8]
    a976:	0039      	movs	r1, r7
    a978:	0030      	movs	r0, r6
    a97a:	f7ff ffc0 	bl	a8fe <__sfputs_r>
    a97e:	1c43      	adds	r3, r0, #1
    a980:	d100      	bne.n	a984 <_vfiprintf_r+0x60>
    a982:	e0cc      	b.n	ab1e <_vfiprintf_r+0x1fa>
    a984:	696a      	ldr	r2, [r5, #20]
    a986:	9b04      	ldr	r3, [sp, #16]
    a988:	4694      	mov	ip, r2
    a98a:	4463      	add	r3, ip
    a98c:	616b      	str	r3, [r5, #20]
    a98e:	7823      	ldrb	r3, [r4, #0]
    a990:	2b00      	cmp	r3, #0
    a992:	d100      	bne.n	a996 <_vfiprintf_r+0x72>
    a994:	e0c3      	b.n	ab1e <_vfiprintf_r+0x1fa>
    a996:	2201      	movs	r2, #1
    a998:	2300      	movs	r3, #0
    a99a:	4252      	negs	r2, r2
    a99c:	606a      	str	r2, [r5, #4]
    a99e:	a902      	add	r1, sp, #8
    a9a0:	3254      	adds	r2, #84	; 0x54
    a9a2:	1852      	adds	r2, r2, r1
    a9a4:	3401      	adds	r4, #1
    a9a6:	602b      	str	r3, [r5, #0]
    a9a8:	60eb      	str	r3, [r5, #12]
    a9aa:	60ab      	str	r3, [r5, #8]
    a9ac:	7013      	strb	r3, [r2, #0]
    a9ae:	65ab      	str	r3, [r5, #88]	; 0x58
    a9b0:	7821      	ldrb	r1, [r4, #0]
    a9b2:	2205      	movs	r2, #5
    a9b4:	4862      	ldr	r0, [pc, #392]	; (ab40 <_vfiprintf_r+0x21c>)
    a9b6:	f001 f849 	bl	ba4c <memchr>
    a9ba:	1c63      	adds	r3, r4, #1
    a9bc:	469c      	mov	ip, r3
    a9be:	2800      	cmp	r0, #0
    a9c0:	d135      	bne.n	aa2e <_vfiprintf_r+0x10a>
    a9c2:	6829      	ldr	r1, [r5, #0]
    a9c4:	06cb      	lsls	r3, r1, #27
    a9c6:	d504      	bpl.n	a9d2 <_vfiprintf_r+0xae>
    a9c8:	2353      	movs	r3, #83	; 0x53
    a9ca:	aa02      	add	r2, sp, #8
    a9cc:	3020      	adds	r0, #32
    a9ce:	189b      	adds	r3, r3, r2
    a9d0:	7018      	strb	r0, [r3, #0]
    a9d2:	070b      	lsls	r3, r1, #28
    a9d4:	d504      	bpl.n	a9e0 <_vfiprintf_r+0xbc>
    a9d6:	2353      	movs	r3, #83	; 0x53
    a9d8:	202b      	movs	r0, #43	; 0x2b
    a9da:	aa02      	add	r2, sp, #8
    a9dc:	189b      	adds	r3, r3, r2
    a9de:	7018      	strb	r0, [r3, #0]
    a9e0:	7823      	ldrb	r3, [r4, #0]
    a9e2:	2b2a      	cmp	r3, #42	; 0x2a
    a9e4:	d02c      	beq.n	aa40 <_vfiprintf_r+0x11c>
    a9e6:	2000      	movs	r0, #0
    a9e8:	210a      	movs	r1, #10
    a9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9ec:	7822      	ldrb	r2, [r4, #0]
    a9ee:	3a30      	subs	r2, #48	; 0x30
    a9f0:	2a09      	cmp	r2, #9
    a9f2:	d800      	bhi.n	a9f6 <_vfiprintf_r+0xd2>
    a9f4:	e06b      	b.n	aace <_vfiprintf_r+0x1aa>
    a9f6:	2800      	cmp	r0, #0
    a9f8:	d02a      	beq.n	aa50 <_vfiprintf_r+0x12c>
    a9fa:	9309      	str	r3, [sp, #36]	; 0x24
    a9fc:	e028      	b.n	aa50 <_vfiprintf_r+0x12c>
    a9fe:	4b51      	ldr	r3, [pc, #324]	; (ab44 <_vfiprintf_r+0x220>)
    aa00:	429f      	cmp	r7, r3
    aa02:	d101      	bne.n	aa08 <_vfiprintf_r+0xe4>
    aa04:	68b7      	ldr	r7, [r6, #8]
    aa06:	e79e      	b.n	a946 <_vfiprintf_r+0x22>
    aa08:	4b4f      	ldr	r3, [pc, #316]	; (ab48 <_vfiprintf_r+0x224>)
    aa0a:	429f      	cmp	r7, r3
    aa0c:	d19b      	bne.n	a946 <_vfiprintf_r+0x22>
    aa0e:	68f7      	ldr	r7, [r6, #12]
    aa10:	e799      	b.n	a946 <_vfiprintf_r+0x22>
    aa12:	0039      	movs	r1, r7
    aa14:	0030      	movs	r0, r6
    aa16:	f7ff fbe9 	bl	a1ec <__swsetup_r>
    aa1a:	2800      	cmp	r0, #0
    aa1c:	d099      	beq.n	a952 <_vfiprintf_r+0x2e>
    aa1e:	2001      	movs	r0, #1
    aa20:	4240      	negs	r0, r0
    aa22:	b01f      	add	sp, #124	; 0x7c
    aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa26:	2b25      	cmp	r3, #37	; 0x25
    aa28:	d09f      	beq.n	a96a <_vfiprintf_r+0x46>
    aa2a:	3401      	adds	r4, #1
    aa2c:	e79a      	b.n	a964 <_vfiprintf_r+0x40>
    aa2e:	4b44      	ldr	r3, [pc, #272]	; (ab40 <_vfiprintf_r+0x21c>)
    aa30:	6829      	ldr	r1, [r5, #0]
    aa32:	1ac0      	subs	r0, r0, r3
    aa34:	2301      	movs	r3, #1
    aa36:	4083      	lsls	r3, r0
    aa38:	430b      	orrs	r3, r1
    aa3a:	602b      	str	r3, [r5, #0]
    aa3c:	4664      	mov	r4, ip
    aa3e:	e7b7      	b.n	a9b0 <_vfiprintf_r+0x8c>
    aa40:	9b05      	ldr	r3, [sp, #20]
    aa42:	1d18      	adds	r0, r3, #4
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	9005      	str	r0, [sp, #20]
    aa48:	2b00      	cmp	r3, #0
    aa4a:	db3a      	blt.n	aac2 <_vfiprintf_r+0x19e>
    aa4c:	9309      	str	r3, [sp, #36]	; 0x24
    aa4e:	4664      	mov	r4, ip
    aa50:	7823      	ldrb	r3, [r4, #0]
    aa52:	2b2e      	cmp	r3, #46	; 0x2e
    aa54:	d10b      	bne.n	aa6e <_vfiprintf_r+0x14a>
    aa56:	7863      	ldrb	r3, [r4, #1]
    aa58:	1c62      	adds	r2, r4, #1
    aa5a:	2b2a      	cmp	r3, #42	; 0x2a
    aa5c:	d13f      	bne.n	aade <_vfiprintf_r+0x1ba>
    aa5e:	9b05      	ldr	r3, [sp, #20]
    aa60:	3402      	adds	r4, #2
    aa62:	1d1a      	adds	r2, r3, #4
    aa64:	681b      	ldr	r3, [r3, #0]
    aa66:	9205      	str	r2, [sp, #20]
    aa68:	2b00      	cmp	r3, #0
    aa6a:	db35      	blt.n	aad8 <_vfiprintf_r+0x1b4>
    aa6c:	9307      	str	r3, [sp, #28]
    aa6e:	7821      	ldrb	r1, [r4, #0]
    aa70:	2203      	movs	r2, #3
    aa72:	4836      	ldr	r0, [pc, #216]	; (ab4c <_vfiprintf_r+0x228>)
    aa74:	f000 ffea 	bl	ba4c <memchr>
    aa78:	2800      	cmp	r0, #0
    aa7a:	d007      	beq.n	aa8c <_vfiprintf_r+0x168>
    aa7c:	4b33      	ldr	r3, [pc, #204]	; (ab4c <_vfiprintf_r+0x228>)
    aa7e:	682a      	ldr	r2, [r5, #0]
    aa80:	1ac0      	subs	r0, r0, r3
    aa82:	2340      	movs	r3, #64	; 0x40
    aa84:	4083      	lsls	r3, r0
    aa86:	4313      	orrs	r3, r2
    aa88:	602b      	str	r3, [r5, #0]
    aa8a:	3401      	adds	r4, #1
    aa8c:	7821      	ldrb	r1, [r4, #0]
    aa8e:	1c63      	adds	r3, r4, #1
    aa90:	2206      	movs	r2, #6
    aa92:	482f      	ldr	r0, [pc, #188]	; (ab50 <_vfiprintf_r+0x22c>)
    aa94:	9302      	str	r3, [sp, #8]
    aa96:	7629      	strb	r1, [r5, #24]
    aa98:	f000 ffd8 	bl	ba4c <memchr>
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d044      	beq.n	ab2a <_vfiprintf_r+0x206>
    aaa0:	4b2c      	ldr	r3, [pc, #176]	; (ab54 <_vfiprintf_r+0x230>)
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d12f      	bne.n	ab06 <_vfiprintf_r+0x1e2>
    aaa6:	6829      	ldr	r1, [r5, #0]
    aaa8:	9b05      	ldr	r3, [sp, #20]
    aaaa:	2207      	movs	r2, #7
    aaac:	05c9      	lsls	r1, r1, #23
    aaae:	d528      	bpl.n	ab02 <_vfiprintf_r+0x1de>
    aab0:	189b      	adds	r3, r3, r2
    aab2:	4393      	bics	r3, r2
    aab4:	3308      	adds	r3, #8
    aab6:	9305      	str	r3, [sp, #20]
    aab8:	696b      	ldr	r3, [r5, #20]
    aaba:	9a03      	ldr	r2, [sp, #12]
    aabc:	189b      	adds	r3, r3, r2
    aabe:	616b      	str	r3, [r5, #20]
    aac0:	e74f      	b.n	a962 <_vfiprintf_r+0x3e>
    aac2:	425b      	negs	r3, r3
    aac4:	60eb      	str	r3, [r5, #12]
    aac6:	2302      	movs	r3, #2
    aac8:	430b      	orrs	r3, r1
    aaca:	602b      	str	r3, [r5, #0]
    aacc:	e7bf      	b.n	aa4e <_vfiprintf_r+0x12a>
    aace:	434b      	muls	r3, r1
    aad0:	3401      	adds	r4, #1
    aad2:	189b      	adds	r3, r3, r2
    aad4:	2001      	movs	r0, #1
    aad6:	e789      	b.n	a9ec <_vfiprintf_r+0xc8>
    aad8:	2301      	movs	r3, #1
    aada:	425b      	negs	r3, r3
    aadc:	e7c6      	b.n	aa6c <_vfiprintf_r+0x148>
    aade:	2300      	movs	r3, #0
    aae0:	0014      	movs	r4, r2
    aae2:	200a      	movs	r0, #10
    aae4:	001a      	movs	r2, r3
    aae6:	606b      	str	r3, [r5, #4]
    aae8:	7821      	ldrb	r1, [r4, #0]
    aaea:	3930      	subs	r1, #48	; 0x30
    aaec:	2909      	cmp	r1, #9
    aaee:	d903      	bls.n	aaf8 <_vfiprintf_r+0x1d4>
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d0bc      	beq.n	aa6e <_vfiprintf_r+0x14a>
    aaf4:	9207      	str	r2, [sp, #28]
    aaf6:	e7ba      	b.n	aa6e <_vfiprintf_r+0x14a>
    aaf8:	4342      	muls	r2, r0
    aafa:	3401      	adds	r4, #1
    aafc:	1852      	adds	r2, r2, r1
    aafe:	2301      	movs	r3, #1
    ab00:	e7f2      	b.n	aae8 <_vfiprintf_r+0x1c4>
    ab02:	3307      	adds	r3, #7
    ab04:	e7d5      	b.n	aab2 <_vfiprintf_r+0x18e>
    ab06:	ab05      	add	r3, sp, #20
    ab08:	9300      	str	r3, [sp, #0]
    ab0a:	003a      	movs	r2, r7
    ab0c:	4b12      	ldr	r3, [pc, #72]	; (ab58 <_vfiprintf_r+0x234>)
    ab0e:	0029      	movs	r1, r5
    ab10:	0030      	movs	r0, r6
    ab12:	e000      	b.n	ab16 <_vfiprintf_r+0x1f2>
    ab14:	bf00      	nop
    ab16:	9003      	str	r0, [sp, #12]
    ab18:	9b03      	ldr	r3, [sp, #12]
    ab1a:	3301      	adds	r3, #1
    ab1c:	d1cc      	bne.n	aab8 <_vfiprintf_r+0x194>
    ab1e:	89bb      	ldrh	r3, [r7, #12]
    ab20:	065b      	lsls	r3, r3, #25
    ab22:	d500      	bpl.n	ab26 <_vfiprintf_r+0x202>
    ab24:	e77b      	b.n	aa1e <_vfiprintf_r+0xfa>
    ab26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ab28:	e77b      	b.n	aa22 <_vfiprintf_r+0xfe>
    ab2a:	ab05      	add	r3, sp, #20
    ab2c:	9300      	str	r3, [sp, #0]
    ab2e:	003a      	movs	r2, r7
    ab30:	4b09      	ldr	r3, [pc, #36]	; (ab58 <_vfiprintf_r+0x234>)
    ab32:	0029      	movs	r1, r5
    ab34:	0030      	movs	r0, r6
    ab36:	f000 f87f 	bl	ac38 <_printf_i>
    ab3a:	e7ec      	b.n	ab16 <_vfiprintf_r+0x1f2>
    ab3c:	0000c2f8 	.word	0x0000c2f8
    ab40:	0000c342 	.word	0x0000c342
    ab44:	0000c318 	.word	0x0000c318
    ab48:	0000c2d8 	.word	0x0000c2d8
    ab4c:	0000c348 	.word	0x0000c348
    ab50:	0000c34c 	.word	0x0000c34c
    ab54:	00000000 	.word	0x00000000
    ab58:	0000a8ff 	.word	0x0000a8ff

0000ab5c <_printf_common>:
    ab5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab5e:	0015      	movs	r5, r2
    ab60:	9301      	str	r3, [sp, #4]
    ab62:	688a      	ldr	r2, [r1, #8]
    ab64:	690b      	ldr	r3, [r1, #16]
    ab66:	9000      	str	r0, [sp, #0]
    ab68:	000c      	movs	r4, r1
    ab6a:	4293      	cmp	r3, r2
    ab6c:	da00      	bge.n	ab70 <_printf_common+0x14>
    ab6e:	0013      	movs	r3, r2
    ab70:	0022      	movs	r2, r4
    ab72:	602b      	str	r3, [r5, #0]
    ab74:	3243      	adds	r2, #67	; 0x43
    ab76:	7812      	ldrb	r2, [r2, #0]
    ab78:	2a00      	cmp	r2, #0
    ab7a:	d001      	beq.n	ab80 <_printf_common+0x24>
    ab7c:	3301      	adds	r3, #1
    ab7e:	602b      	str	r3, [r5, #0]
    ab80:	6823      	ldr	r3, [r4, #0]
    ab82:	069b      	lsls	r3, r3, #26
    ab84:	d502      	bpl.n	ab8c <_printf_common+0x30>
    ab86:	682b      	ldr	r3, [r5, #0]
    ab88:	3302      	adds	r3, #2
    ab8a:	602b      	str	r3, [r5, #0]
    ab8c:	2706      	movs	r7, #6
    ab8e:	6823      	ldr	r3, [r4, #0]
    ab90:	401f      	ands	r7, r3
    ab92:	d027      	beq.n	abe4 <_printf_common+0x88>
    ab94:	0023      	movs	r3, r4
    ab96:	3343      	adds	r3, #67	; 0x43
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	1e5a      	subs	r2, r3, #1
    ab9c:	4193      	sbcs	r3, r2
    ab9e:	6822      	ldr	r2, [r4, #0]
    aba0:	0692      	lsls	r2, r2, #26
    aba2:	d430      	bmi.n	ac06 <_printf_common+0xaa>
    aba4:	0022      	movs	r2, r4
    aba6:	9901      	ldr	r1, [sp, #4]
    aba8:	3243      	adds	r2, #67	; 0x43
    abaa:	9800      	ldr	r0, [sp, #0]
    abac:	9e08      	ldr	r6, [sp, #32]
    abae:	47b0      	blx	r6
    abb0:	1c43      	adds	r3, r0, #1
    abb2:	d025      	beq.n	ac00 <_printf_common+0xa4>
    abb4:	2306      	movs	r3, #6
    abb6:	6820      	ldr	r0, [r4, #0]
    abb8:	682a      	ldr	r2, [r5, #0]
    abba:	68e1      	ldr	r1, [r4, #12]
    abbc:	4003      	ands	r3, r0
    abbe:	2500      	movs	r5, #0
    abc0:	2b04      	cmp	r3, #4
    abc2:	d103      	bne.n	abcc <_printf_common+0x70>
    abc4:	1a8d      	subs	r5, r1, r2
    abc6:	43eb      	mvns	r3, r5
    abc8:	17db      	asrs	r3, r3, #31
    abca:	401d      	ands	r5, r3
    abcc:	68a3      	ldr	r3, [r4, #8]
    abce:	6922      	ldr	r2, [r4, #16]
    abd0:	4293      	cmp	r3, r2
    abd2:	dd01      	ble.n	abd8 <_printf_common+0x7c>
    abd4:	1a9b      	subs	r3, r3, r2
    abd6:	18ed      	adds	r5, r5, r3
    abd8:	2700      	movs	r7, #0
    abda:	42bd      	cmp	r5, r7
    abdc:	d120      	bne.n	ac20 <_printf_common+0xc4>
    abde:	2000      	movs	r0, #0
    abe0:	e010      	b.n	ac04 <_printf_common+0xa8>
    abe2:	3701      	adds	r7, #1
    abe4:	68e3      	ldr	r3, [r4, #12]
    abe6:	682a      	ldr	r2, [r5, #0]
    abe8:	1a9b      	subs	r3, r3, r2
    abea:	429f      	cmp	r7, r3
    abec:	dad2      	bge.n	ab94 <_printf_common+0x38>
    abee:	0022      	movs	r2, r4
    abf0:	2301      	movs	r3, #1
    abf2:	3219      	adds	r2, #25
    abf4:	9901      	ldr	r1, [sp, #4]
    abf6:	9800      	ldr	r0, [sp, #0]
    abf8:	9e08      	ldr	r6, [sp, #32]
    abfa:	47b0      	blx	r6
    abfc:	1c43      	adds	r3, r0, #1
    abfe:	d1f0      	bne.n	abe2 <_printf_common+0x86>
    ac00:	2001      	movs	r0, #1
    ac02:	4240      	negs	r0, r0
    ac04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac06:	2030      	movs	r0, #48	; 0x30
    ac08:	18e1      	adds	r1, r4, r3
    ac0a:	3143      	adds	r1, #67	; 0x43
    ac0c:	7008      	strb	r0, [r1, #0]
    ac0e:	0021      	movs	r1, r4
    ac10:	1c5a      	adds	r2, r3, #1
    ac12:	3145      	adds	r1, #69	; 0x45
    ac14:	7809      	ldrb	r1, [r1, #0]
    ac16:	18a2      	adds	r2, r4, r2
    ac18:	3243      	adds	r2, #67	; 0x43
    ac1a:	3302      	adds	r3, #2
    ac1c:	7011      	strb	r1, [r2, #0]
    ac1e:	e7c1      	b.n	aba4 <_printf_common+0x48>
    ac20:	0022      	movs	r2, r4
    ac22:	2301      	movs	r3, #1
    ac24:	321a      	adds	r2, #26
    ac26:	9901      	ldr	r1, [sp, #4]
    ac28:	9800      	ldr	r0, [sp, #0]
    ac2a:	9e08      	ldr	r6, [sp, #32]
    ac2c:	47b0      	blx	r6
    ac2e:	1c43      	adds	r3, r0, #1
    ac30:	d0e6      	beq.n	ac00 <_printf_common+0xa4>
    ac32:	3701      	adds	r7, #1
    ac34:	e7d1      	b.n	abda <_printf_common+0x7e>
	...

0000ac38 <_printf_i>:
    ac38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac3a:	b08b      	sub	sp, #44	; 0x2c
    ac3c:	9206      	str	r2, [sp, #24]
    ac3e:	000a      	movs	r2, r1
    ac40:	3243      	adds	r2, #67	; 0x43
    ac42:	9307      	str	r3, [sp, #28]
    ac44:	9005      	str	r0, [sp, #20]
    ac46:	9204      	str	r2, [sp, #16]
    ac48:	7e0a      	ldrb	r2, [r1, #24]
    ac4a:	000c      	movs	r4, r1
    ac4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ac4e:	2a6e      	cmp	r2, #110	; 0x6e
    ac50:	d100      	bne.n	ac54 <_printf_i+0x1c>
    ac52:	e08f      	b.n	ad74 <_printf_i+0x13c>
    ac54:	d817      	bhi.n	ac86 <_printf_i+0x4e>
    ac56:	2a63      	cmp	r2, #99	; 0x63
    ac58:	d02c      	beq.n	acb4 <_printf_i+0x7c>
    ac5a:	d808      	bhi.n	ac6e <_printf_i+0x36>
    ac5c:	2a00      	cmp	r2, #0
    ac5e:	d100      	bne.n	ac62 <_printf_i+0x2a>
    ac60:	e099      	b.n	ad96 <_printf_i+0x15e>
    ac62:	2a58      	cmp	r2, #88	; 0x58
    ac64:	d054      	beq.n	ad10 <_printf_i+0xd8>
    ac66:	0026      	movs	r6, r4
    ac68:	3642      	adds	r6, #66	; 0x42
    ac6a:	7032      	strb	r2, [r6, #0]
    ac6c:	e029      	b.n	acc2 <_printf_i+0x8a>
    ac6e:	2a64      	cmp	r2, #100	; 0x64
    ac70:	d001      	beq.n	ac76 <_printf_i+0x3e>
    ac72:	2a69      	cmp	r2, #105	; 0x69
    ac74:	d1f7      	bne.n	ac66 <_printf_i+0x2e>
    ac76:	6821      	ldr	r1, [r4, #0]
    ac78:	681a      	ldr	r2, [r3, #0]
    ac7a:	0608      	lsls	r0, r1, #24
    ac7c:	d523      	bpl.n	acc6 <_printf_i+0x8e>
    ac7e:	1d11      	adds	r1, r2, #4
    ac80:	6019      	str	r1, [r3, #0]
    ac82:	6815      	ldr	r5, [r2, #0]
    ac84:	e025      	b.n	acd2 <_printf_i+0x9a>
    ac86:	2a73      	cmp	r2, #115	; 0x73
    ac88:	d100      	bne.n	ac8c <_printf_i+0x54>
    ac8a:	e088      	b.n	ad9e <_printf_i+0x166>
    ac8c:	d808      	bhi.n	aca0 <_printf_i+0x68>
    ac8e:	2a6f      	cmp	r2, #111	; 0x6f
    ac90:	d029      	beq.n	ace6 <_printf_i+0xae>
    ac92:	2a70      	cmp	r2, #112	; 0x70
    ac94:	d1e7      	bne.n	ac66 <_printf_i+0x2e>
    ac96:	2220      	movs	r2, #32
    ac98:	6809      	ldr	r1, [r1, #0]
    ac9a:	430a      	orrs	r2, r1
    ac9c:	6022      	str	r2, [r4, #0]
    ac9e:	e003      	b.n	aca8 <_printf_i+0x70>
    aca0:	2a75      	cmp	r2, #117	; 0x75
    aca2:	d020      	beq.n	ace6 <_printf_i+0xae>
    aca4:	2a78      	cmp	r2, #120	; 0x78
    aca6:	d1de      	bne.n	ac66 <_printf_i+0x2e>
    aca8:	0022      	movs	r2, r4
    acaa:	2178      	movs	r1, #120	; 0x78
    acac:	3245      	adds	r2, #69	; 0x45
    acae:	7011      	strb	r1, [r2, #0]
    acb0:	4a6c      	ldr	r2, [pc, #432]	; (ae64 <_printf_i+0x22c>)
    acb2:	e030      	b.n	ad16 <_printf_i+0xde>
    acb4:	000e      	movs	r6, r1
    acb6:	681a      	ldr	r2, [r3, #0]
    acb8:	3642      	adds	r6, #66	; 0x42
    acba:	1d11      	adds	r1, r2, #4
    acbc:	6019      	str	r1, [r3, #0]
    acbe:	6813      	ldr	r3, [r2, #0]
    acc0:	7033      	strb	r3, [r6, #0]
    acc2:	2301      	movs	r3, #1
    acc4:	e079      	b.n	adba <_printf_i+0x182>
    acc6:	0649      	lsls	r1, r1, #25
    acc8:	d5d9      	bpl.n	ac7e <_printf_i+0x46>
    acca:	1d11      	adds	r1, r2, #4
    accc:	6019      	str	r1, [r3, #0]
    acce:	2300      	movs	r3, #0
    acd0:	5ed5      	ldrsh	r5, [r2, r3]
    acd2:	2d00      	cmp	r5, #0
    acd4:	da03      	bge.n	acde <_printf_i+0xa6>
    acd6:	232d      	movs	r3, #45	; 0x2d
    acd8:	9a04      	ldr	r2, [sp, #16]
    acda:	426d      	negs	r5, r5
    acdc:	7013      	strb	r3, [r2, #0]
    acde:	4b62      	ldr	r3, [pc, #392]	; (ae68 <_printf_i+0x230>)
    ace0:	270a      	movs	r7, #10
    ace2:	9303      	str	r3, [sp, #12]
    ace4:	e02f      	b.n	ad46 <_printf_i+0x10e>
    ace6:	6820      	ldr	r0, [r4, #0]
    ace8:	6819      	ldr	r1, [r3, #0]
    acea:	0605      	lsls	r5, r0, #24
    acec:	d503      	bpl.n	acf6 <_printf_i+0xbe>
    acee:	1d08      	adds	r0, r1, #4
    acf0:	6018      	str	r0, [r3, #0]
    acf2:	680d      	ldr	r5, [r1, #0]
    acf4:	e005      	b.n	ad02 <_printf_i+0xca>
    acf6:	0640      	lsls	r0, r0, #25
    acf8:	d5f9      	bpl.n	acee <_printf_i+0xb6>
    acfa:	680d      	ldr	r5, [r1, #0]
    acfc:	1d08      	adds	r0, r1, #4
    acfe:	6018      	str	r0, [r3, #0]
    ad00:	b2ad      	uxth	r5, r5
    ad02:	4b59      	ldr	r3, [pc, #356]	; (ae68 <_printf_i+0x230>)
    ad04:	2708      	movs	r7, #8
    ad06:	9303      	str	r3, [sp, #12]
    ad08:	2a6f      	cmp	r2, #111	; 0x6f
    ad0a:	d018      	beq.n	ad3e <_printf_i+0x106>
    ad0c:	270a      	movs	r7, #10
    ad0e:	e016      	b.n	ad3e <_printf_i+0x106>
    ad10:	3145      	adds	r1, #69	; 0x45
    ad12:	700a      	strb	r2, [r1, #0]
    ad14:	4a54      	ldr	r2, [pc, #336]	; (ae68 <_printf_i+0x230>)
    ad16:	9203      	str	r2, [sp, #12]
    ad18:	681a      	ldr	r2, [r3, #0]
    ad1a:	6821      	ldr	r1, [r4, #0]
    ad1c:	1d10      	adds	r0, r2, #4
    ad1e:	6018      	str	r0, [r3, #0]
    ad20:	6815      	ldr	r5, [r2, #0]
    ad22:	0608      	lsls	r0, r1, #24
    ad24:	d522      	bpl.n	ad6c <_printf_i+0x134>
    ad26:	07cb      	lsls	r3, r1, #31
    ad28:	d502      	bpl.n	ad30 <_printf_i+0xf8>
    ad2a:	2320      	movs	r3, #32
    ad2c:	4319      	orrs	r1, r3
    ad2e:	6021      	str	r1, [r4, #0]
    ad30:	2710      	movs	r7, #16
    ad32:	2d00      	cmp	r5, #0
    ad34:	d103      	bne.n	ad3e <_printf_i+0x106>
    ad36:	2320      	movs	r3, #32
    ad38:	6822      	ldr	r2, [r4, #0]
    ad3a:	439a      	bics	r2, r3
    ad3c:	6022      	str	r2, [r4, #0]
    ad3e:	0023      	movs	r3, r4
    ad40:	2200      	movs	r2, #0
    ad42:	3343      	adds	r3, #67	; 0x43
    ad44:	701a      	strb	r2, [r3, #0]
    ad46:	6863      	ldr	r3, [r4, #4]
    ad48:	60a3      	str	r3, [r4, #8]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	db5c      	blt.n	ae08 <_printf_i+0x1d0>
    ad4e:	2204      	movs	r2, #4
    ad50:	6821      	ldr	r1, [r4, #0]
    ad52:	4391      	bics	r1, r2
    ad54:	6021      	str	r1, [r4, #0]
    ad56:	2d00      	cmp	r5, #0
    ad58:	d158      	bne.n	ae0c <_printf_i+0x1d4>
    ad5a:	9e04      	ldr	r6, [sp, #16]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d064      	beq.n	ae2a <_printf_i+0x1f2>
    ad60:	0026      	movs	r6, r4
    ad62:	9b03      	ldr	r3, [sp, #12]
    ad64:	3642      	adds	r6, #66	; 0x42
    ad66:	781b      	ldrb	r3, [r3, #0]
    ad68:	7033      	strb	r3, [r6, #0]
    ad6a:	e05e      	b.n	ae2a <_printf_i+0x1f2>
    ad6c:	0648      	lsls	r0, r1, #25
    ad6e:	d5da      	bpl.n	ad26 <_printf_i+0xee>
    ad70:	b2ad      	uxth	r5, r5
    ad72:	e7d8      	b.n	ad26 <_printf_i+0xee>
    ad74:	6809      	ldr	r1, [r1, #0]
    ad76:	681a      	ldr	r2, [r3, #0]
    ad78:	0608      	lsls	r0, r1, #24
    ad7a:	d505      	bpl.n	ad88 <_printf_i+0x150>
    ad7c:	1d11      	adds	r1, r2, #4
    ad7e:	6019      	str	r1, [r3, #0]
    ad80:	6813      	ldr	r3, [r2, #0]
    ad82:	6962      	ldr	r2, [r4, #20]
    ad84:	601a      	str	r2, [r3, #0]
    ad86:	e006      	b.n	ad96 <_printf_i+0x15e>
    ad88:	0649      	lsls	r1, r1, #25
    ad8a:	d5f7      	bpl.n	ad7c <_printf_i+0x144>
    ad8c:	1d11      	adds	r1, r2, #4
    ad8e:	6019      	str	r1, [r3, #0]
    ad90:	6813      	ldr	r3, [r2, #0]
    ad92:	8aa2      	ldrh	r2, [r4, #20]
    ad94:	801a      	strh	r2, [r3, #0]
    ad96:	2300      	movs	r3, #0
    ad98:	9e04      	ldr	r6, [sp, #16]
    ad9a:	6123      	str	r3, [r4, #16]
    ad9c:	e054      	b.n	ae48 <_printf_i+0x210>
    ad9e:	681a      	ldr	r2, [r3, #0]
    ada0:	1d11      	adds	r1, r2, #4
    ada2:	6019      	str	r1, [r3, #0]
    ada4:	6816      	ldr	r6, [r2, #0]
    ada6:	2100      	movs	r1, #0
    ada8:	6862      	ldr	r2, [r4, #4]
    adaa:	0030      	movs	r0, r6
    adac:	f000 fe4e 	bl	ba4c <memchr>
    adb0:	2800      	cmp	r0, #0
    adb2:	d001      	beq.n	adb8 <_printf_i+0x180>
    adb4:	1b80      	subs	r0, r0, r6
    adb6:	6060      	str	r0, [r4, #4]
    adb8:	6863      	ldr	r3, [r4, #4]
    adba:	6123      	str	r3, [r4, #16]
    adbc:	2300      	movs	r3, #0
    adbe:	9a04      	ldr	r2, [sp, #16]
    adc0:	7013      	strb	r3, [r2, #0]
    adc2:	e041      	b.n	ae48 <_printf_i+0x210>
    adc4:	6923      	ldr	r3, [r4, #16]
    adc6:	0032      	movs	r2, r6
    adc8:	9906      	ldr	r1, [sp, #24]
    adca:	9805      	ldr	r0, [sp, #20]
    adcc:	9d07      	ldr	r5, [sp, #28]
    adce:	47a8      	blx	r5
    add0:	1c43      	adds	r3, r0, #1
    add2:	d043      	beq.n	ae5c <_printf_i+0x224>
    add4:	6823      	ldr	r3, [r4, #0]
    add6:	2500      	movs	r5, #0
    add8:	079b      	lsls	r3, r3, #30
    adda:	d40f      	bmi.n	adfc <_printf_i+0x1c4>
    addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adde:	68e0      	ldr	r0, [r4, #12]
    ade0:	4298      	cmp	r0, r3
    ade2:	da3d      	bge.n	ae60 <_printf_i+0x228>
    ade4:	0018      	movs	r0, r3
    ade6:	e03b      	b.n	ae60 <_printf_i+0x228>
    ade8:	0022      	movs	r2, r4
    adea:	2301      	movs	r3, #1
    adec:	3219      	adds	r2, #25
    adee:	9906      	ldr	r1, [sp, #24]
    adf0:	9805      	ldr	r0, [sp, #20]
    adf2:	9e07      	ldr	r6, [sp, #28]
    adf4:	47b0      	blx	r6
    adf6:	1c43      	adds	r3, r0, #1
    adf8:	d030      	beq.n	ae5c <_printf_i+0x224>
    adfa:	3501      	adds	r5, #1
    adfc:	68e3      	ldr	r3, [r4, #12]
    adfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae00:	1a9b      	subs	r3, r3, r2
    ae02:	429d      	cmp	r5, r3
    ae04:	dbf0      	blt.n	ade8 <_printf_i+0x1b0>
    ae06:	e7e9      	b.n	addc <_printf_i+0x1a4>
    ae08:	2d00      	cmp	r5, #0
    ae0a:	d0a9      	beq.n	ad60 <_printf_i+0x128>
    ae0c:	9e04      	ldr	r6, [sp, #16]
    ae0e:	0028      	movs	r0, r5
    ae10:	0039      	movs	r1, r7
    ae12:	f7fd f97d 	bl	8110 <__aeabi_uidivmod>
    ae16:	9b03      	ldr	r3, [sp, #12]
    ae18:	3e01      	subs	r6, #1
    ae1a:	5c5b      	ldrb	r3, [r3, r1]
    ae1c:	0028      	movs	r0, r5
    ae1e:	7033      	strb	r3, [r6, #0]
    ae20:	0039      	movs	r1, r7
    ae22:	f7fd f8ef 	bl	8004 <__udivsi3>
    ae26:	1e05      	subs	r5, r0, #0
    ae28:	d1f1      	bne.n	ae0e <_printf_i+0x1d6>
    ae2a:	2f08      	cmp	r7, #8
    ae2c:	d109      	bne.n	ae42 <_printf_i+0x20a>
    ae2e:	6823      	ldr	r3, [r4, #0]
    ae30:	07db      	lsls	r3, r3, #31
    ae32:	d506      	bpl.n	ae42 <_printf_i+0x20a>
    ae34:	6863      	ldr	r3, [r4, #4]
    ae36:	6922      	ldr	r2, [r4, #16]
    ae38:	4293      	cmp	r3, r2
    ae3a:	dc02      	bgt.n	ae42 <_printf_i+0x20a>
    ae3c:	2330      	movs	r3, #48	; 0x30
    ae3e:	3e01      	subs	r6, #1
    ae40:	7033      	strb	r3, [r6, #0]
    ae42:	9b04      	ldr	r3, [sp, #16]
    ae44:	1b9b      	subs	r3, r3, r6
    ae46:	6123      	str	r3, [r4, #16]
    ae48:	9b07      	ldr	r3, [sp, #28]
    ae4a:	aa09      	add	r2, sp, #36	; 0x24
    ae4c:	9300      	str	r3, [sp, #0]
    ae4e:	0021      	movs	r1, r4
    ae50:	9b06      	ldr	r3, [sp, #24]
    ae52:	9805      	ldr	r0, [sp, #20]
    ae54:	f7ff fe82 	bl	ab5c <_printf_common>
    ae58:	1c43      	adds	r3, r0, #1
    ae5a:	d1b3      	bne.n	adc4 <_printf_i+0x18c>
    ae5c:	2001      	movs	r0, #1
    ae5e:	4240      	negs	r0, r0
    ae60:	b00b      	add	sp, #44	; 0x2c
    ae62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae64:	0000c364 	.word	0x0000c364
    ae68:	0000c353 	.word	0x0000c353

0000ae6c <__svfiscanf_r>:
    ae6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae6e:	4cbd      	ldr	r4, [pc, #756]	; (b164 <__svfiscanf_r+0x2f8>)
    ae70:	2586      	movs	r5, #134	; 0x86
    ae72:	44a5      	add	sp, r4
    ae74:	9303      	str	r3, [sp, #12]
    ae76:	2300      	movs	r3, #0
    ae78:	9348      	str	r3, [sp, #288]	; 0x120
    ae7a:	9349      	str	r3, [sp, #292]	; 0x124
    ae7c:	ab05      	add	r3, sp, #20
    ae7e:	934a      	str	r3, [sp, #296]	; 0x128
    ae80:	23be      	movs	r3, #190	; 0xbe
    ae82:	006d      	lsls	r5, r5, #1
    ae84:	9000      	str	r0, [sp, #0]
    ae86:	000c      	movs	r4, r1
    ae88:	a802      	add	r0, sp, #8
    ae8a:	49b7      	ldr	r1, [pc, #732]	; (b168 <__svfiscanf_r+0x2fc>)
    ae8c:	005b      	lsls	r3, r3, #1
    ae8e:	1940      	adds	r0, r0, r5
    ae90:	27c0      	movs	r7, #192	; 0xc0
    ae92:	50c1      	str	r1, [r0, r3]
    ae94:	ab02      	add	r3, sp, #8
    ae96:	195b      	adds	r3, r3, r5
    ae98:	0015      	movs	r5, r2
    ae9a:	49b4      	ldr	r1, [pc, #720]	; (b16c <__svfiscanf_r+0x300>)
    ae9c:	007f      	lsls	r7, r7, #1
    ae9e:	51d9      	str	r1, [r3, r7]
    aea0:	782b      	ldrb	r3, [r5, #0]
    aea2:	2b00      	cmp	r3, #0
    aea4:	d100      	bne.n	aea8 <__svfiscanf_r+0x3c>
    aea6:	e15b      	b.n	b160 <__svfiscanf_r+0x2f4>
    aea8:	f7ff fbd6 	bl	a658 <__locale_ctype_ptr>
    aeac:	2208      	movs	r2, #8
    aeae:	782b      	ldrb	r3, [r5, #0]
    aeb0:	18c0      	adds	r0, r0, r3
    aeb2:	9301      	str	r3, [sp, #4]
    aeb4:	7843      	ldrb	r3, [r0, #1]
    aeb6:	4013      	ands	r3, r2
    aeb8:	d141      	bne.n	af3e <__svfiscanf_r+0xd2>
    aeba:	9a01      	ldr	r2, [sp, #4]
    aebc:	1c6e      	adds	r6, r5, #1
    aebe:	2a25      	cmp	r2, #37	; 0x25
    aec0:	d000      	beq.n	aec4 <__svfiscanf_r+0x58>
    aec2:	e0a8      	b.n	b016 <__svfiscanf_r+0x1aa>
    aec4:	9347      	str	r3, [sp, #284]	; 0x11c
    aec6:	9345      	str	r3, [sp, #276]	; 0x114
    aec8:	786b      	ldrb	r3, [r5, #1]
    aeca:	2b2a      	cmp	r3, #42	; 0x2a
    aecc:	d102      	bne.n	aed4 <__svfiscanf_r+0x68>
    aece:	3b1a      	subs	r3, #26
    aed0:	9345      	str	r3, [sp, #276]	; 0x114
    aed2:	1cae      	adds	r6, r5, #2
    aed4:	0035      	movs	r5, r6
    aed6:	220a      	movs	r2, #10
    aed8:	7829      	ldrb	r1, [r5, #0]
    aeda:	000b      	movs	r3, r1
    aedc:	3b30      	subs	r3, #48	; 0x30
    aede:	2b09      	cmp	r3, #9
    aee0:	d948      	bls.n	af74 <__svfiscanf_r+0x108>
    aee2:	4ea3      	ldr	r6, [pc, #652]	; (b170 <__svfiscanf_r+0x304>)
    aee4:	2203      	movs	r2, #3
    aee6:	0030      	movs	r0, r6
    aee8:	f000 fdb0 	bl	ba4c <memchr>
    aeec:	2800      	cmp	r0, #0
    aeee:	d007      	beq.n	af00 <__svfiscanf_r+0x94>
    aef0:	2301      	movs	r3, #1
    aef2:	1b80      	subs	r0, r0, r6
    aef4:	4083      	lsls	r3, r0
    aef6:	9a45      	ldr	r2, [sp, #276]	; 0x114
    aef8:	3501      	adds	r5, #1
    aefa:	4313      	orrs	r3, r2
    aefc:	9202      	str	r2, [sp, #8]
    aefe:	9345      	str	r3, [sp, #276]	; 0x114
    af00:	782b      	ldrb	r3, [r5, #0]
    af02:	1c6e      	adds	r6, r5, #1
    af04:	2b67      	cmp	r3, #103	; 0x67
    af06:	d858      	bhi.n	afba <__svfiscanf_r+0x14e>
    af08:	2b65      	cmp	r3, #101	; 0x65
    af0a:	d300      	bcc.n	af0e <__svfiscanf_r+0xa2>
    af0c:	e0dd      	b.n	b0ca <__svfiscanf_r+0x25e>
    af0e:	2b47      	cmp	r3, #71	; 0x47
    af10:	d838      	bhi.n	af84 <__svfiscanf_r+0x118>
    af12:	2b45      	cmp	r3, #69	; 0x45
    af14:	d300      	bcc.n	af18 <__svfiscanf_r+0xac>
    af16:	e0d8      	b.n	b0ca <__svfiscanf_r+0x25e>
    af18:	2b00      	cmp	r3, #0
    af1a:	d100      	bne.n	af1e <__svfiscanf_r+0xb2>
    af1c:	e11d      	b.n	b15a <__svfiscanf_r+0x2ee>
    af1e:	2b25      	cmp	r3, #37	; 0x25
    af20:	d079      	beq.n	b016 <__svfiscanf_r+0x1aa>
    af22:	2303      	movs	r3, #3
    af24:	934b      	str	r3, [sp, #300]	; 0x12c
    af26:	3307      	adds	r3, #7
    af28:	9346      	str	r3, [sp, #280]	; 0x118
    af2a:	e053      	b.n	afd4 <__svfiscanf_r+0x168>
    af2c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    af2e:	3301      	adds	r3, #1
    af30:	9201      	str	r2, [sp, #4]
    af32:	3201      	adds	r2, #1
    af34:	9249      	str	r2, [sp, #292]	; 0x124
    af36:	6862      	ldr	r2, [r4, #4]
    af38:	6023      	str	r3, [r4, #0]
    af3a:	3a01      	subs	r2, #1
    af3c:	6062      	str	r2, [r4, #4]
    af3e:	6863      	ldr	r3, [r4, #4]
    af40:	2b00      	cmp	r3, #0
    af42:	dd0b      	ble.n	af5c <__svfiscanf_r+0xf0>
    af44:	f7ff fb88 	bl	a658 <__locale_ctype_ptr>
    af48:	2108      	movs	r1, #8
    af4a:	6823      	ldr	r3, [r4, #0]
    af4c:	781a      	ldrb	r2, [r3, #0]
    af4e:	1880      	adds	r0, r0, r2
    af50:	7842      	ldrb	r2, [r0, #1]
    af52:	420a      	tst	r2, r1
    af54:	d1ea      	bne.n	af2c <__svfiscanf_r+0xc0>
    af56:	1c6e      	adds	r6, r5, #1
    af58:	0035      	movs	r5, r6
    af5a:	e7a1      	b.n	aea0 <__svfiscanf_r+0x34>
    af5c:	2286      	movs	r2, #134	; 0x86
    af5e:	ab02      	add	r3, sp, #8
    af60:	0052      	lsls	r2, r2, #1
    af62:	189b      	adds	r3, r3, r2
    af64:	59db      	ldr	r3, [r3, r7]
    af66:	0021      	movs	r1, r4
    af68:	9800      	ldr	r0, [sp, #0]
    af6a:	9301      	str	r3, [sp, #4]
    af6c:	4798      	blx	r3
    af6e:	2800      	cmp	r0, #0
    af70:	d0e8      	beq.n	af44 <__svfiscanf_r+0xd8>
    af72:	e7f0      	b.n	af56 <__svfiscanf_r+0xea>
    af74:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    af76:	3501      	adds	r5, #1
    af78:	9302      	str	r3, [sp, #8]
    af7a:	4353      	muls	r3, r2
    af7c:	3b30      	subs	r3, #48	; 0x30
    af7e:	1859      	adds	r1, r3, r1
    af80:	9147      	str	r1, [sp, #284]	; 0x11c
    af82:	e7a9      	b.n	aed8 <__svfiscanf_r+0x6c>
    af84:	2b5b      	cmp	r3, #91	; 0x5b
    af86:	d100      	bne.n	af8a <__svfiscanf_r+0x11e>
    af88:	e077      	b.n	b07a <__svfiscanf_r+0x20e>
    af8a:	d80f      	bhi.n	afac <__svfiscanf_r+0x140>
    af8c:	2b58      	cmp	r3, #88	; 0x58
    af8e:	d1c8      	bne.n	af22 <__svfiscanf_r+0xb6>
    af90:	9a45      	ldr	r2, [sp, #276]	; 0x114
    af92:	9201      	str	r2, [sp, #4]
    af94:	2280      	movs	r2, #128	; 0x80
    af96:	9901      	ldr	r1, [sp, #4]
    af98:	0092      	lsls	r2, r2, #2
    af9a:	430a      	orrs	r2, r1
    af9c:	9245      	str	r2, [sp, #276]	; 0x114
    af9e:	2210      	movs	r2, #16
    afa0:	9246      	str	r2, [sp, #280]	; 0x118
    afa2:	2203      	movs	r2, #3
    afa4:	2b6e      	cmp	r3, #110	; 0x6e
    afa6:	dd14      	ble.n	afd2 <__svfiscanf_r+0x166>
    afa8:	3201      	adds	r2, #1
    afaa:	e012      	b.n	afd2 <__svfiscanf_r+0x166>
    afac:	2b63      	cmp	r3, #99	; 0x63
    afae:	d100      	bne.n	afb2 <__svfiscanf_r+0x146>
    afb0:	e071      	b.n	b096 <__svfiscanf_r+0x22a>
    afb2:	2b64      	cmp	r3, #100	; 0x64
    afb4:	d1b5      	bne.n	af22 <__svfiscanf_r+0xb6>
    afb6:	220a      	movs	r2, #10
    afb8:	e7f2      	b.n	afa0 <__svfiscanf_r+0x134>
    afba:	2b70      	cmp	r3, #112	; 0x70
    afbc:	d052      	beq.n	b064 <__svfiscanf_r+0x1f8>
    afbe:	d822      	bhi.n	b006 <__svfiscanf_r+0x19a>
    afc0:	2b6e      	cmp	r3, #110	; 0x6e
    afc2:	d100      	bne.n	afc6 <__svfiscanf_r+0x15a>
    afc4:	e06f      	b.n	b0a6 <__svfiscanf_r+0x23a>
    afc6:	d854      	bhi.n	b072 <__svfiscanf_r+0x206>
    afc8:	2b69      	cmp	r3, #105	; 0x69
    afca:	d1aa      	bne.n	af22 <__svfiscanf_r+0xb6>
    afcc:	2300      	movs	r3, #0
    afce:	2203      	movs	r2, #3
    afd0:	9346      	str	r3, [sp, #280]	; 0x118
    afd2:	924b      	str	r2, [sp, #300]	; 0x12c
    afd4:	6863      	ldr	r3, [r4, #4]
    afd6:	2b00      	cmp	r3, #0
    afd8:	dc00      	bgt.n	afdc <__svfiscanf_r+0x170>
    afda:	e078      	b.n	b0ce <__svfiscanf_r+0x262>
    afdc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    afde:	9301      	str	r3, [sp, #4]
    afe0:	065b      	lsls	r3, r3, #25
    afe2:	d400      	bmi.n	afe6 <__svfiscanf_r+0x17a>
    afe4:	e08b      	b.n	b0fe <__svfiscanf_r+0x292>
    afe6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    afe8:	2b02      	cmp	r3, #2
    afea:	dd00      	ble.n	afee <__svfiscanf_r+0x182>
    afec:	e09d      	b.n	b12a <__svfiscanf_r+0x2be>
    afee:	ab03      	add	r3, sp, #12
    aff0:	0022      	movs	r2, r4
    aff2:	a945      	add	r1, sp, #276	; 0x114
    aff4:	9800      	ldr	r0, [sp, #0]
    aff6:	f000 f8e7 	bl	b1c8 <_scanf_chars>
    affa:	2801      	cmp	r0, #1
    affc:	d100      	bne.n	b000 <__svfiscanf_r+0x194>
    affe:	e0af      	b.n	b160 <__svfiscanf_r+0x2f4>
    b000:	2802      	cmp	r0, #2
    b002:	d1a9      	bne.n	af58 <__svfiscanf_r+0xec>
    b004:	e025      	b.n	b052 <__svfiscanf_r+0x1e6>
    b006:	2b75      	cmp	r3, #117	; 0x75
    b008:	d0d5      	beq.n	afb6 <__svfiscanf_r+0x14a>
    b00a:	2b78      	cmp	r3, #120	; 0x78
    b00c:	d0c0      	beq.n	af90 <__svfiscanf_r+0x124>
    b00e:	2b73      	cmp	r3, #115	; 0x73
    b010:	d187      	bne.n	af22 <__svfiscanf_r+0xb6>
    b012:	2302      	movs	r3, #2
    b014:	e03d      	b.n	b092 <__svfiscanf_r+0x226>
    b016:	6863      	ldr	r3, [r4, #4]
    b018:	2b00      	cmp	r3, #0
    b01a:	dd0f      	ble.n	b03c <__svfiscanf_r+0x1d0>
    b01c:	6823      	ldr	r3, [r4, #0]
    b01e:	9901      	ldr	r1, [sp, #4]
    b020:	781a      	ldrb	r2, [r3, #0]
    b022:	4291      	cmp	r1, r2
    b024:	d000      	beq.n	b028 <__svfiscanf_r+0x1bc>
    b026:	e09b      	b.n	b160 <__svfiscanf_r+0x2f4>
    b028:	3301      	adds	r3, #1
    b02a:	6862      	ldr	r2, [r4, #4]
    b02c:	6023      	str	r3, [r4, #0]
    b02e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    b030:	3a01      	subs	r2, #1
    b032:	9301      	str	r3, [sp, #4]
    b034:	3301      	adds	r3, #1
    b036:	6062      	str	r2, [r4, #4]
    b038:	9349      	str	r3, [sp, #292]	; 0x124
    b03a:	e78d      	b.n	af58 <__svfiscanf_r+0xec>
    b03c:	2286      	movs	r2, #134	; 0x86
    b03e:	ab02      	add	r3, sp, #8
    b040:	0052      	lsls	r2, r2, #1
    b042:	189b      	adds	r3, r3, r2
    b044:	59db      	ldr	r3, [r3, r7]
    b046:	0021      	movs	r1, r4
    b048:	9800      	ldr	r0, [sp, #0]
    b04a:	9302      	str	r3, [sp, #8]
    b04c:	4798      	blx	r3
    b04e:	2800      	cmp	r0, #0
    b050:	d0e4      	beq.n	b01c <__svfiscanf_r+0x1b0>
    b052:	9848      	ldr	r0, [sp, #288]	; 0x120
    b054:	2800      	cmp	r0, #0
    b056:	d000      	beq.n	b05a <__svfiscanf_r+0x1ee>
    b058:	e07b      	b.n	b152 <__svfiscanf_r+0x2e6>
    b05a:	3801      	subs	r0, #1
    b05c:	23a7      	movs	r3, #167	; 0xa7
    b05e:	009b      	lsls	r3, r3, #2
    b060:	449d      	add	sp, r3
    b062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b064:	9a45      	ldr	r2, [sp, #276]	; 0x114
    b066:	9201      	str	r2, [sp, #4]
    b068:	2220      	movs	r2, #32
    b06a:	9901      	ldr	r1, [sp, #4]
    b06c:	430a      	orrs	r2, r1
    b06e:	9245      	str	r2, [sp, #276]	; 0x114
    b070:	e78e      	b.n	af90 <__svfiscanf_r+0x124>
    b072:	2308      	movs	r3, #8
    b074:	2204      	movs	r2, #4
    b076:	9346      	str	r3, [sp, #280]	; 0x118
    b078:	e7ab      	b.n	afd2 <__svfiscanf_r+0x166>
    b07a:	0031      	movs	r1, r6
    b07c:	a805      	add	r0, sp, #20
    b07e:	f000 fab5 	bl	b5ec <__sccl>
    b082:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b084:	0006      	movs	r6, r0
    b086:	9301      	str	r3, [sp, #4]
    b088:	2340      	movs	r3, #64	; 0x40
    b08a:	9a01      	ldr	r2, [sp, #4]
    b08c:	4313      	orrs	r3, r2
    b08e:	9345      	str	r3, [sp, #276]	; 0x114
    b090:	2301      	movs	r3, #1
    b092:	934b      	str	r3, [sp, #300]	; 0x12c
    b094:	e79e      	b.n	afd4 <__svfiscanf_r+0x168>
    b096:	9b45      	ldr	r3, [sp, #276]	; 0x114
    b098:	9301      	str	r3, [sp, #4]
    b09a:	2340      	movs	r3, #64	; 0x40
    b09c:	9a01      	ldr	r2, [sp, #4]
    b09e:	4313      	orrs	r3, r2
    b0a0:	9345      	str	r3, [sp, #276]	; 0x114
    b0a2:	2300      	movs	r3, #0
    b0a4:	e7f5      	b.n	b092 <__svfiscanf_r+0x226>
    b0a6:	9945      	ldr	r1, [sp, #276]	; 0x114
    b0a8:	06cb      	lsls	r3, r1, #27
    b0aa:	d500      	bpl.n	b0ae <__svfiscanf_r+0x242>
    b0ac:	e754      	b.n	af58 <__svfiscanf_r+0xec>
    b0ae:	9b03      	ldr	r3, [sp, #12]
    b0b0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    b0b2:	07c8      	lsls	r0, r1, #31
    b0b4:	d504      	bpl.n	b0c0 <__svfiscanf_r+0x254>
    b0b6:	1d19      	adds	r1, r3, #4
    b0b8:	9103      	str	r1, [sp, #12]
    b0ba:	681b      	ldr	r3, [r3, #0]
    b0bc:	801a      	strh	r2, [r3, #0]
    b0be:	e74b      	b.n	af58 <__svfiscanf_r+0xec>
    b0c0:	1d19      	adds	r1, r3, #4
    b0c2:	9103      	str	r1, [sp, #12]
    b0c4:	681b      	ldr	r3, [r3, #0]
    b0c6:	601a      	str	r2, [r3, #0]
    b0c8:	e746      	b.n	af58 <__svfiscanf_r+0xec>
    b0ca:	2305      	movs	r3, #5
    b0cc:	e7e1      	b.n	b092 <__svfiscanf_r+0x226>
    b0ce:	2286      	movs	r2, #134	; 0x86
    b0d0:	ab02      	add	r3, sp, #8
    b0d2:	0052      	lsls	r2, r2, #1
    b0d4:	189b      	adds	r3, r3, r2
    b0d6:	59db      	ldr	r3, [r3, r7]
    b0d8:	0021      	movs	r1, r4
    b0da:	9800      	ldr	r0, [sp, #0]
    b0dc:	9301      	str	r3, [sp, #4]
    b0de:	4798      	blx	r3
    b0e0:	2800      	cmp	r0, #0
    b0e2:	d100      	bne.n	b0e6 <__svfiscanf_r+0x27a>
    b0e4:	e77a      	b.n	afdc <__svfiscanf_r+0x170>
    b0e6:	e7b4      	b.n	b052 <__svfiscanf_r+0x1e6>
    b0e8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    b0ea:	9201      	str	r2, [sp, #4]
    b0ec:	3201      	adds	r2, #1
    b0ee:	9249      	str	r2, [sp, #292]	; 0x124
    b0f0:	6862      	ldr	r2, [r4, #4]
    b0f2:	3a01      	subs	r2, #1
    b0f4:	6062      	str	r2, [r4, #4]
    b0f6:	2a00      	cmp	r2, #0
    b0f8:	dd0b      	ble.n	b112 <__svfiscanf_r+0x2a6>
    b0fa:	3301      	adds	r3, #1
    b0fc:	6023      	str	r3, [r4, #0]
    b0fe:	f7ff faab 	bl	a658 <__locale_ctype_ptr>
    b102:	2108      	movs	r1, #8
    b104:	6823      	ldr	r3, [r4, #0]
    b106:	781a      	ldrb	r2, [r3, #0]
    b108:	1880      	adds	r0, r0, r2
    b10a:	7842      	ldrb	r2, [r0, #1]
    b10c:	420a      	tst	r2, r1
    b10e:	d1eb      	bne.n	b0e8 <__svfiscanf_r+0x27c>
    b110:	e769      	b.n	afe6 <__svfiscanf_r+0x17a>
    b112:	2286      	movs	r2, #134	; 0x86
    b114:	ab02      	add	r3, sp, #8
    b116:	0052      	lsls	r2, r2, #1
    b118:	189b      	adds	r3, r3, r2
    b11a:	59db      	ldr	r3, [r3, r7]
    b11c:	0021      	movs	r1, r4
    b11e:	9800      	ldr	r0, [sp, #0]
    b120:	9301      	str	r3, [sp, #4]
    b122:	4798      	blx	r3
    b124:	2800      	cmp	r0, #0
    b126:	d0ea      	beq.n	b0fe <__svfiscanf_r+0x292>
    b128:	e793      	b.n	b052 <__svfiscanf_r+0x1e6>
    b12a:	2b04      	cmp	r3, #4
    b12c:	dc06      	bgt.n	b13c <__svfiscanf_r+0x2d0>
    b12e:	ab03      	add	r3, sp, #12
    b130:	0022      	movs	r2, r4
    b132:	a945      	add	r1, sp, #276	; 0x114
    b134:	9800      	ldr	r0, [sp, #0]
    b136:	f000 f8ab 	bl	b290 <_scanf_i>
    b13a:	e75e      	b.n	affa <__svfiscanf_r+0x18e>
    b13c:	4b0d      	ldr	r3, [pc, #52]	; (b174 <__svfiscanf_r+0x308>)
    b13e:	2b00      	cmp	r3, #0
    b140:	d100      	bne.n	b144 <__svfiscanf_r+0x2d8>
    b142:	e709      	b.n	af58 <__svfiscanf_r+0xec>
    b144:	ab03      	add	r3, sp, #12
    b146:	0022      	movs	r2, r4
    b148:	a945      	add	r1, sp, #276	; 0x114
    b14a:	9800      	ldr	r0, [sp, #0]
    b14c:	e000      	b.n	b150 <__svfiscanf_r+0x2e4>
    b14e:	bf00      	nop
    b150:	e753      	b.n	affa <__svfiscanf_r+0x18e>
    b152:	89a3      	ldrh	r3, [r4, #12]
    b154:	065b      	lsls	r3, r3, #25
    b156:	d400      	bmi.n	b15a <__svfiscanf_r+0x2ee>
    b158:	e780      	b.n	b05c <__svfiscanf_r+0x1f0>
    b15a:	2001      	movs	r0, #1
    b15c:	4240      	negs	r0, r0
    b15e:	e77d      	b.n	b05c <__svfiscanf_r+0x1f0>
    b160:	9848      	ldr	r0, [sp, #288]	; 0x120
    b162:	e77b      	b.n	b05c <__svfiscanf_r+0x1f0>
    b164:	fffffd64 	.word	0xfffffd64
    b168:	0000b895 	.word	0x0000b895
    b16c:	0000b4a9 	.word	0x0000b4a9
    b170:	0000c348 	.word	0x0000c348
    b174:	00000000 	.word	0x00000000

0000b178 <_vfiscanf_r>:
    b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b17a:	0004      	movs	r4, r0
    b17c:	000d      	movs	r5, r1
    b17e:	0016      	movs	r6, r2
    b180:	001f      	movs	r7, r3
    b182:	2800      	cmp	r0, #0
    b184:	d004      	beq.n	b190 <_vfiscanf_r+0x18>
    b186:	6983      	ldr	r3, [r0, #24]
    b188:	2b00      	cmp	r3, #0
    b18a:	d101      	bne.n	b190 <_vfiscanf_r+0x18>
    b18c:	f7ff f9b0 	bl	a4f0 <__sinit>
    b190:	4b0a      	ldr	r3, [pc, #40]	; (b1bc <_vfiscanf_r+0x44>)
    b192:	429d      	cmp	r5, r3
    b194:	d107      	bne.n	b1a6 <_vfiscanf_r+0x2e>
    b196:	6865      	ldr	r5, [r4, #4]
    b198:	003b      	movs	r3, r7
    b19a:	0032      	movs	r2, r6
    b19c:	0029      	movs	r1, r5
    b19e:	0020      	movs	r0, r4
    b1a0:	f7ff fe64 	bl	ae6c <__svfiscanf_r>
    b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1a6:	4b06      	ldr	r3, [pc, #24]	; (b1c0 <_vfiscanf_r+0x48>)
    b1a8:	429d      	cmp	r5, r3
    b1aa:	d101      	bne.n	b1b0 <_vfiscanf_r+0x38>
    b1ac:	68a5      	ldr	r5, [r4, #8]
    b1ae:	e7f3      	b.n	b198 <_vfiscanf_r+0x20>
    b1b0:	4b04      	ldr	r3, [pc, #16]	; (b1c4 <_vfiscanf_r+0x4c>)
    b1b2:	429d      	cmp	r5, r3
    b1b4:	d1f0      	bne.n	b198 <_vfiscanf_r+0x20>
    b1b6:	68e5      	ldr	r5, [r4, #12]
    b1b8:	e7ee      	b.n	b198 <_vfiscanf_r+0x20>
    b1ba:	46c0      	nop			; (mov r8, r8)
    b1bc:	0000c2f8 	.word	0x0000c2f8
    b1c0:	0000c318 	.word	0x0000c318
    b1c4:	0000c2d8 	.word	0x0000c2d8

0000b1c8 <_scanf_chars>:
    b1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b1ca:	0015      	movs	r5, r2
    b1cc:	688a      	ldr	r2, [r1, #8]
    b1ce:	9001      	str	r0, [sp, #4]
    b1d0:	000c      	movs	r4, r1
    b1d2:	2a00      	cmp	r2, #0
    b1d4:	d106      	bne.n	b1e4 <_scanf_chars+0x1c>
    b1d6:	698a      	ldr	r2, [r1, #24]
    b1d8:	1e51      	subs	r1, r2, #1
    b1da:	418a      	sbcs	r2, r1
    b1dc:	2101      	movs	r1, #1
    b1de:	4252      	negs	r2, r2
    b1e0:	430a      	orrs	r2, r1
    b1e2:	60a2      	str	r2, [r4, #8]
    b1e4:	6822      	ldr	r2, [r4, #0]
    b1e6:	06d2      	lsls	r2, r2, #27
    b1e8:	d403      	bmi.n	b1f2 <_scanf_chars+0x2a>
    b1ea:	681a      	ldr	r2, [r3, #0]
    b1ec:	1d11      	adds	r1, r2, #4
    b1ee:	6019      	str	r1, [r3, #0]
    b1f0:	6817      	ldr	r7, [r2, #0]
    b1f2:	2600      	movs	r6, #0
    b1f4:	69a3      	ldr	r3, [r4, #24]
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d01c      	beq.n	b234 <_scanf_chars+0x6c>
    b1fa:	2b01      	cmp	r3, #1
    b1fc:	d108      	bne.n	b210 <_scanf_chars+0x48>
    b1fe:	682b      	ldr	r3, [r5, #0]
    b200:	6962      	ldr	r2, [r4, #20]
    b202:	781b      	ldrb	r3, [r3, #0]
    b204:	5cd3      	ldrb	r3, [r2, r3]
    b206:	2b00      	cmp	r3, #0
    b208:	d114      	bne.n	b234 <_scanf_chars+0x6c>
    b20a:	2e00      	cmp	r6, #0
    b20c:	d130      	bne.n	b270 <_scanf_chars+0xa8>
    b20e:	e006      	b.n	b21e <_scanf_chars+0x56>
    b210:	2b02      	cmp	r3, #2
    b212:	d006      	beq.n	b222 <_scanf_chars+0x5a>
    b214:	2e00      	cmp	r6, #0
    b216:	d12b      	bne.n	b270 <_scanf_chars+0xa8>
    b218:	69a3      	ldr	r3, [r4, #24]
    b21a:	2b01      	cmp	r3, #1
    b21c:	d128      	bne.n	b270 <_scanf_chars+0xa8>
    b21e:	2001      	movs	r0, #1
    b220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b222:	f7ff fa19 	bl	a658 <__locale_ctype_ptr>
    b226:	2208      	movs	r2, #8
    b228:	682b      	ldr	r3, [r5, #0]
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	18c0      	adds	r0, r0, r3
    b22e:	7843      	ldrb	r3, [r0, #1]
    b230:	4213      	tst	r3, r2
    b232:	d1ef      	bne.n	b214 <_scanf_chars+0x4c>
    b234:	2210      	movs	r2, #16
    b236:	6823      	ldr	r3, [r4, #0]
    b238:	3601      	adds	r6, #1
    b23a:	4213      	tst	r3, r2
    b23c:	d103      	bne.n	b246 <_scanf_chars+0x7e>
    b23e:	682b      	ldr	r3, [r5, #0]
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	703b      	strb	r3, [r7, #0]
    b244:	3701      	adds	r7, #1
    b246:	682a      	ldr	r2, [r5, #0]
    b248:	686b      	ldr	r3, [r5, #4]
    b24a:	3201      	adds	r2, #1
    b24c:	602a      	str	r2, [r5, #0]
    b24e:	68a2      	ldr	r2, [r4, #8]
    b250:	3b01      	subs	r3, #1
    b252:	3a01      	subs	r2, #1
    b254:	606b      	str	r3, [r5, #4]
    b256:	60a2      	str	r2, [r4, #8]
    b258:	2a00      	cmp	r2, #0
    b25a:	d009      	beq.n	b270 <_scanf_chars+0xa8>
    b25c:	2b00      	cmp	r3, #0
    b25e:	dcc9      	bgt.n	b1f4 <_scanf_chars+0x2c>
    b260:	23c0      	movs	r3, #192	; 0xc0
    b262:	005b      	lsls	r3, r3, #1
    b264:	58e3      	ldr	r3, [r4, r3]
    b266:	0029      	movs	r1, r5
    b268:	9801      	ldr	r0, [sp, #4]
    b26a:	4798      	blx	r3
    b26c:	2800      	cmp	r0, #0
    b26e:	d0c1      	beq.n	b1f4 <_scanf_chars+0x2c>
    b270:	2310      	movs	r3, #16
    b272:	6822      	ldr	r2, [r4, #0]
    b274:	4013      	ands	r3, r2
    b276:	d106      	bne.n	b286 <_scanf_chars+0xbe>
    b278:	68e2      	ldr	r2, [r4, #12]
    b27a:	3201      	adds	r2, #1
    b27c:	60e2      	str	r2, [r4, #12]
    b27e:	69a2      	ldr	r2, [r4, #24]
    b280:	2a00      	cmp	r2, #0
    b282:	d000      	beq.n	b286 <_scanf_chars+0xbe>
    b284:	703b      	strb	r3, [r7, #0]
    b286:	6923      	ldr	r3, [r4, #16]
    b288:	2000      	movs	r0, #0
    b28a:	199e      	adds	r6, r3, r6
    b28c:	6126      	str	r6, [r4, #16]
    b28e:	e7c7      	b.n	b220 <_scanf_chars+0x58>

0000b290 <_scanf_i>:
    b290:	b5f0      	push	{r4, r5, r6, r7, lr}
    b292:	000c      	movs	r4, r1
    b294:	b08d      	sub	sp, #52	; 0x34
    b296:	9302      	str	r3, [sp, #8]
    b298:	4b77      	ldr	r3, [pc, #476]	; (b478 <_scanf_i+0x1e8>)
    b29a:	9005      	str	r0, [sp, #20]
    b29c:	0016      	movs	r6, r2
    b29e:	aa09      	add	r2, sp, #36	; 0x24
    b2a0:	cb23      	ldmia	r3!, {r0, r1, r5}
    b2a2:	c223      	stmia	r2!, {r0, r1, r5}
    b2a4:	4b75      	ldr	r3, [pc, #468]	; (b47c <_scanf_i+0x1ec>)
    b2a6:	9306      	str	r3, [sp, #24]
    b2a8:	69a3      	ldr	r3, [r4, #24]
    b2aa:	2b03      	cmp	r3, #3
    b2ac:	d001      	beq.n	b2b2 <_scanf_i+0x22>
    b2ae:	4b74      	ldr	r3, [pc, #464]	; (b480 <_scanf_i+0x1f0>)
    b2b0:	9306      	str	r3, [sp, #24]
    b2b2:	22ae      	movs	r2, #174	; 0xae
    b2b4:	2000      	movs	r0, #0
    b2b6:	68a3      	ldr	r3, [r4, #8]
    b2b8:	0052      	lsls	r2, r2, #1
    b2ba:	1e59      	subs	r1, r3, #1
    b2bc:	9004      	str	r0, [sp, #16]
    b2be:	4291      	cmp	r1, r2
    b2c0:	d905      	bls.n	b2ce <_scanf_i+0x3e>
    b2c2:	3b5e      	subs	r3, #94	; 0x5e
    b2c4:	3bff      	subs	r3, #255	; 0xff
    b2c6:	9304      	str	r3, [sp, #16]
    b2c8:	235e      	movs	r3, #94	; 0x5e
    b2ca:	33ff      	adds	r3, #255	; 0xff
    b2cc:	60a3      	str	r3, [r4, #8]
    b2ce:	0023      	movs	r3, r4
    b2d0:	331c      	adds	r3, #28
    b2d2:	9301      	str	r3, [sp, #4]
    b2d4:	23d0      	movs	r3, #208	; 0xd0
    b2d6:	2700      	movs	r7, #0
    b2d8:	6822      	ldr	r2, [r4, #0]
    b2da:	011b      	lsls	r3, r3, #4
    b2dc:	4313      	orrs	r3, r2
    b2de:	6023      	str	r3, [r4, #0]
    b2e0:	9b01      	ldr	r3, [sp, #4]
    b2e2:	9303      	str	r3, [sp, #12]
    b2e4:	6833      	ldr	r3, [r6, #0]
    b2e6:	a809      	add	r0, sp, #36	; 0x24
    b2e8:	7819      	ldrb	r1, [r3, #0]
    b2ea:	00bb      	lsls	r3, r7, #2
    b2ec:	2202      	movs	r2, #2
    b2ee:	5818      	ldr	r0, [r3, r0]
    b2f0:	f000 fbac 	bl	ba4c <memchr>
    b2f4:	2800      	cmp	r0, #0
    b2f6:	d02b      	beq.n	b350 <_scanf_i+0xc0>
    b2f8:	2f01      	cmp	r7, #1
    b2fa:	d15f      	bne.n	b3bc <_scanf_i+0x12c>
    b2fc:	6863      	ldr	r3, [r4, #4]
    b2fe:	2b00      	cmp	r3, #0
    b300:	d106      	bne.n	b310 <_scanf_i+0x80>
    b302:	3308      	adds	r3, #8
    b304:	6822      	ldr	r2, [r4, #0]
    b306:	6063      	str	r3, [r4, #4]
    b308:	33f9      	adds	r3, #249	; 0xf9
    b30a:	33ff      	adds	r3, #255	; 0xff
    b30c:	4313      	orrs	r3, r2
    b30e:	6023      	str	r3, [r4, #0]
    b310:	4b5c      	ldr	r3, [pc, #368]	; (b484 <_scanf_i+0x1f4>)
    b312:	6822      	ldr	r2, [r4, #0]
    b314:	4013      	ands	r3, r2
    b316:	6023      	str	r3, [r4, #0]
    b318:	68a3      	ldr	r3, [r4, #8]
    b31a:	1e5a      	subs	r2, r3, #1
    b31c:	60a2      	str	r2, [r4, #8]
    b31e:	2b00      	cmp	r3, #0
    b320:	d016      	beq.n	b350 <_scanf_i+0xc0>
    b322:	9b03      	ldr	r3, [sp, #12]
    b324:	1c5d      	adds	r5, r3, #1
    b326:	6833      	ldr	r3, [r6, #0]
    b328:	1c5a      	adds	r2, r3, #1
    b32a:	6032      	str	r2, [r6, #0]
    b32c:	781b      	ldrb	r3, [r3, #0]
    b32e:	9a03      	ldr	r2, [sp, #12]
    b330:	9503      	str	r5, [sp, #12]
    b332:	7013      	strb	r3, [r2, #0]
    b334:	6873      	ldr	r3, [r6, #4]
    b336:	3b01      	subs	r3, #1
    b338:	6073      	str	r3, [r6, #4]
    b33a:	2b00      	cmp	r3, #0
    b33c:	dc08      	bgt.n	b350 <_scanf_i+0xc0>
    b33e:	23c0      	movs	r3, #192	; 0xc0
    b340:	005b      	lsls	r3, r3, #1
    b342:	58e3      	ldr	r3, [r4, r3]
    b344:	0031      	movs	r1, r6
    b346:	9805      	ldr	r0, [sp, #20]
    b348:	9307      	str	r3, [sp, #28]
    b34a:	4798      	blx	r3
    b34c:	2800      	cmp	r0, #0
    b34e:	d17d      	bne.n	b44c <_scanf_i+0x1bc>
    b350:	3701      	adds	r7, #1
    b352:	2f03      	cmp	r7, #3
    b354:	d1c6      	bne.n	b2e4 <_scanf_i+0x54>
    b356:	6863      	ldr	r3, [r4, #4]
    b358:	2b00      	cmp	r3, #0
    b35a:	d101      	bne.n	b360 <_scanf_i+0xd0>
    b35c:	330a      	adds	r3, #10
    b35e:	6063      	str	r3, [r4, #4]
    b360:	2110      	movs	r1, #16
    b362:	2700      	movs	r7, #0
    b364:	6863      	ldr	r3, [r4, #4]
    b366:	6960      	ldr	r0, [r4, #20]
    b368:	1ac9      	subs	r1, r1, r3
    b36a:	4b47      	ldr	r3, [pc, #284]	; (b488 <_scanf_i+0x1f8>)
    b36c:	18c9      	adds	r1, r1, r3
    b36e:	f000 f93d 	bl	b5ec <__sccl>
    b372:	9d03      	ldr	r5, [sp, #12]
    b374:	68a3      	ldr	r3, [r4, #8]
    b376:	2b00      	cmp	r3, #0
    b378:	d041      	beq.n	b3fe <_scanf_i+0x16e>
    b37a:	6832      	ldr	r2, [r6, #0]
    b37c:	6960      	ldr	r0, [r4, #20]
    b37e:	7811      	ldrb	r1, [r2, #0]
    b380:	5c40      	ldrb	r0, [r0, r1]
    b382:	2800      	cmp	r0, #0
    b384:	d03b      	beq.n	b3fe <_scanf_i+0x16e>
    b386:	2930      	cmp	r1, #48	; 0x30
    b388:	d128      	bne.n	b3dc <_scanf_i+0x14c>
    b38a:	2080      	movs	r0, #128	; 0x80
    b38c:	6821      	ldr	r1, [r4, #0]
    b38e:	0100      	lsls	r0, r0, #4
    b390:	4201      	tst	r1, r0
    b392:	d023      	beq.n	b3dc <_scanf_i+0x14c>
    b394:	9a04      	ldr	r2, [sp, #16]
    b396:	3701      	adds	r7, #1
    b398:	2a00      	cmp	r2, #0
    b39a:	d003      	beq.n	b3a4 <_scanf_i+0x114>
    b39c:	3a01      	subs	r2, #1
    b39e:	3301      	adds	r3, #1
    b3a0:	9204      	str	r2, [sp, #16]
    b3a2:	60a3      	str	r3, [r4, #8]
    b3a4:	6873      	ldr	r3, [r6, #4]
    b3a6:	3b01      	subs	r3, #1
    b3a8:	6073      	str	r3, [r6, #4]
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	dd1e      	ble.n	b3ec <_scanf_i+0x15c>
    b3ae:	6833      	ldr	r3, [r6, #0]
    b3b0:	3301      	adds	r3, #1
    b3b2:	6033      	str	r3, [r6, #0]
    b3b4:	68a3      	ldr	r3, [r4, #8]
    b3b6:	3b01      	subs	r3, #1
    b3b8:	60a3      	str	r3, [r4, #8]
    b3ba:	e7db      	b.n	b374 <_scanf_i+0xe4>
    b3bc:	2f02      	cmp	r7, #2
    b3be:	d1ab      	bne.n	b318 <_scanf_i+0x88>
    b3c0:	21c0      	movs	r1, #192	; 0xc0
    b3c2:	2380      	movs	r3, #128	; 0x80
    b3c4:	6822      	ldr	r2, [r4, #0]
    b3c6:	00c9      	lsls	r1, r1, #3
    b3c8:	4011      	ands	r1, r2
    b3ca:	009b      	lsls	r3, r3, #2
    b3cc:	4299      	cmp	r1, r3
    b3ce:	d1c2      	bne.n	b356 <_scanf_i+0xc6>
    b3d0:	3bf1      	subs	r3, #241	; 0xf1
    b3d2:	3bff      	subs	r3, #255	; 0xff
    b3d4:	6063      	str	r3, [r4, #4]
    b3d6:	33f0      	adds	r3, #240	; 0xf0
    b3d8:	4313      	orrs	r3, r2
    b3da:	e79c      	b.n	b316 <_scanf_i+0x86>
    b3dc:	6821      	ldr	r1, [r4, #0]
    b3de:	4b2b      	ldr	r3, [pc, #172]	; (b48c <_scanf_i+0x1fc>)
    b3e0:	400b      	ands	r3, r1
    b3e2:	6023      	str	r3, [r4, #0]
    b3e4:	7813      	ldrb	r3, [r2, #0]
    b3e6:	702b      	strb	r3, [r5, #0]
    b3e8:	3501      	adds	r5, #1
    b3ea:	e7db      	b.n	b3a4 <_scanf_i+0x114>
    b3ec:	23c0      	movs	r3, #192	; 0xc0
    b3ee:	005b      	lsls	r3, r3, #1
    b3f0:	58e3      	ldr	r3, [r4, r3]
    b3f2:	0031      	movs	r1, r6
    b3f4:	9805      	ldr	r0, [sp, #20]
    b3f6:	9303      	str	r3, [sp, #12]
    b3f8:	4798      	blx	r3
    b3fa:	2800      	cmp	r0, #0
    b3fc:	d0da      	beq.n	b3b4 <_scanf_i+0x124>
    b3fe:	6823      	ldr	r3, [r4, #0]
    b400:	05db      	lsls	r3, r3, #23
    b402:	d50e      	bpl.n	b422 <_scanf_i+0x192>
    b404:	9b01      	ldr	r3, [sp, #4]
    b406:	429d      	cmp	r5, r3
    b408:	d907      	bls.n	b41a <_scanf_i+0x18a>
    b40a:	23be      	movs	r3, #190	; 0xbe
    b40c:	3d01      	subs	r5, #1
    b40e:	005b      	lsls	r3, r3, #1
    b410:	7829      	ldrb	r1, [r5, #0]
    b412:	58e3      	ldr	r3, [r4, r3]
    b414:	0032      	movs	r2, r6
    b416:	9805      	ldr	r0, [sp, #20]
    b418:	4798      	blx	r3
    b41a:	9b01      	ldr	r3, [sp, #4]
    b41c:	2001      	movs	r0, #1
    b41e:	429d      	cmp	r5, r3
    b420:	d027      	beq.n	b472 <_scanf_i+0x1e2>
    b422:	2210      	movs	r2, #16
    b424:	6823      	ldr	r3, [r4, #0]
    b426:	401a      	ands	r2, r3
    b428:	d11c      	bne.n	b464 <_scanf_i+0x1d4>
    b42a:	702a      	strb	r2, [r5, #0]
    b42c:	6863      	ldr	r3, [r4, #4]
    b42e:	9901      	ldr	r1, [sp, #4]
    b430:	9805      	ldr	r0, [sp, #20]
    b432:	9e06      	ldr	r6, [sp, #24]
    b434:	47b0      	blx	r6
    b436:	9b02      	ldr	r3, [sp, #8]
    b438:	6822      	ldr	r2, [r4, #0]
    b43a:	681b      	ldr	r3, [r3, #0]
    b43c:	0691      	lsls	r1, r2, #26
    b43e:	d507      	bpl.n	b450 <_scanf_i+0x1c0>
    b440:	9902      	ldr	r1, [sp, #8]
    b442:	1d1a      	adds	r2, r3, #4
    b444:	600a      	str	r2, [r1, #0]
    b446:	681b      	ldr	r3, [r3, #0]
    b448:	6018      	str	r0, [r3, #0]
    b44a:	e008      	b.n	b45e <_scanf_i+0x1ce>
    b44c:	2700      	movs	r7, #0
    b44e:	e7d6      	b.n	b3fe <_scanf_i+0x16e>
    b450:	07d1      	lsls	r1, r2, #31
    b452:	d5f5      	bpl.n	b440 <_scanf_i+0x1b0>
    b454:	9902      	ldr	r1, [sp, #8]
    b456:	1d1a      	adds	r2, r3, #4
    b458:	600a      	str	r2, [r1, #0]
    b45a:	681b      	ldr	r3, [r3, #0]
    b45c:	8018      	strh	r0, [r3, #0]
    b45e:	68e3      	ldr	r3, [r4, #12]
    b460:	3301      	adds	r3, #1
    b462:	60e3      	str	r3, [r4, #12]
    b464:	2000      	movs	r0, #0
    b466:	9b01      	ldr	r3, [sp, #4]
    b468:	1aed      	subs	r5, r5, r3
    b46a:	6923      	ldr	r3, [r4, #16]
    b46c:	19ef      	adds	r7, r5, r7
    b46e:	19df      	adds	r7, r3, r7
    b470:	6127      	str	r7, [r4, #16]
    b472:	b00d      	add	sp, #52	; 0x34
    b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b476:	46c0      	nop			; (mov r8, r8)
    b478:	0000c378 	.word	0x0000c378
    b47c:	0000a0f9 	.word	0x0000a0f9
    b480:	0000b7f9 	.word	0x0000b7f9
    b484:	fffffaff 	.word	0xfffffaff
    b488:	0000c384 	.word	0x0000c384
    b48c:	fffff6ff 	.word	0xfffff6ff

0000b490 <lflush>:
    b490:	2209      	movs	r2, #9
    b492:	b510      	push	{r4, lr}
    b494:	8983      	ldrh	r3, [r0, #12]
    b496:	4013      	ands	r3, r2
    b498:	2200      	movs	r2, #0
    b49a:	2b09      	cmp	r3, #9
    b49c:	d102      	bne.n	b4a4 <lflush+0x14>
    b49e:	f7fe ffd1 	bl	a444 <fflush>
    b4a2:	0002      	movs	r2, r0
    b4a4:	0010      	movs	r0, r2
    b4a6:	bd10      	pop	{r4, pc}

0000b4a8 <__srefill_r>:
    b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4aa:	0005      	movs	r5, r0
    b4ac:	000c      	movs	r4, r1
    b4ae:	2800      	cmp	r0, #0
    b4b0:	d004      	beq.n	b4bc <__srefill_r+0x14>
    b4b2:	6983      	ldr	r3, [r0, #24]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d101      	bne.n	b4bc <__srefill_r+0x14>
    b4b8:	f7ff f81a 	bl	a4f0 <__sinit>
    b4bc:	4b3d      	ldr	r3, [pc, #244]	; (b5b4 <__srefill_r+0x10c>)
    b4be:	429c      	cmp	r4, r3
    b4c0:	d10a      	bne.n	b4d8 <__srefill_r+0x30>
    b4c2:	686c      	ldr	r4, [r5, #4]
    b4c4:	2300      	movs	r3, #0
    b4c6:	6063      	str	r3, [r4, #4]
    b4c8:	230c      	movs	r3, #12
    b4ca:	5ee2      	ldrsh	r2, [r4, r3]
    b4cc:	b293      	uxth	r3, r2
    b4ce:	0699      	lsls	r1, r3, #26
    b4d0:	d50c      	bpl.n	b4ec <__srefill_r+0x44>
    b4d2:	2001      	movs	r0, #1
    b4d4:	4240      	negs	r0, r0
    b4d6:	e068      	b.n	b5aa <__srefill_r+0x102>
    b4d8:	4b37      	ldr	r3, [pc, #220]	; (b5b8 <__srefill_r+0x110>)
    b4da:	429c      	cmp	r4, r3
    b4dc:	d101      	bne.n	b4e2 <__srefill_r+0x3a>
    b4de:	68ac      	ldr	r4, [r5, #8]
    b4e0:	e7f0      	b.n	b4c4 <__srefill_r+0x1c>
    b4e2:	4b36      	ldr	r3, [pc, #216]	; (b5bc <__srefill_r+0x114>)
    b4e4:	429c      	cmp	r4, r3
    b4e6:	d1ed      	bne.n	b4c4 <__srefill_r+0x1c>
    b4e8:	68ec      	ldr	r4, [r5, #12]
    b4ea:	e7eb      	b.n	b4c4 <__srefill_r+0x1c>
    b4ec:	0759      	lsls	r1, r3, #29
    b4ee:	d44a      	bmi.n	b586 <__srefill_r+0xde>
    b4f0:	06d9      	lsls	r1, r3, #27
    b4f2:	d405      	bmi.n	b500 <__srefill_r+0x58>
    b4f4:	2309      	movs	r3, #9
    b4f6:	602b      	str	r3, [r5, #0]
    b4f8:	3337      	adds	r3, #55	; 0x37
    b4fa:	4313      	orrs	r3, r2
    b4fc:	81a3      	strh	r3, [r4, #12]
    b4fe:	e7e8      	b.n	b4d2 <__srefill_r+0x2a>
    b500:	2608      	movs	r6, #8
    b502:	4233      	tst	r3, r6
    b504:	d00a      	beq.n	b51c <__srefill_r+0x74>
    b506:	0021      	movs	r1, r4
    b508:	0028      	movs	r0, r5
    b50a:	f7fe ff6f 	bl	a3ec <_fflush_r>
    b50e:	2800      	cmp	r0, #0
    b510:	d1df      	bne.n	b4d2 <__srefill_r+0x2a>
    b512:	89a3      	ldrh	r3, [r4, #12]
    b514:	60a0      	str	r0, [r4, #8]
    b516:	43b3      	bics	r3, r6
    b518:	81a3      	strh	r3, [r4, #12]
    b51a:	61a0      	str	r0, [r4, #24]
    b51c:	2304      	movs	r3, #4
    b51e:	89a2      	ldrh	r2, [r4, #12]
    b520:	4313      	orrs	r3, r2
    b522:	81a3      	strh	r3, [r4, #12]
    b524:	6923      	ldr	r3, [r4, #16]
    b526:	2b00      	cmp	r3, #0
    b528:	d103      	bne.n	b532 <__srefill_r+0x8a>
    b52a:	0021      	movs	r1, r4
    b52c:	0028      	movs	r0, r5
    b52e:	f7ff f8c9 	bl	a6c4 <__smakebuf_r>
    b532:	230c      	movs	r3, #12
    b534:	5ee7      	ldrsh	r7, [r4, r3]
    b536:	b2be      	uxth	r6, r7
    b538:	07b3      	lsls	r3, r6, #30
    b53a:	d00f      	beq.n	b55c <__srefill_r+0xb4>
    b53c:	2301      	movs	r3, #1
    b53e:	81a3      	strh	r3, [r4, #12]
    b540:	4b1f      	ldr	r3, [pc, #124]	; (b5c0 <__srefill_r+0x118>)
    b542:	4920      	ldr	r1, [pc, #128]	; (b5c4 <__srefill_r+0x11c>)
    b544:	6818      	ldr	r0, [r3, #0]
    b546:	f7ff f847 	bl	a5d8 <_fwalk>
    b54a:	2309      	movs	r3, #9
    b54c:	81a7      	strh	r7, [r4, #12]
    b54e:	401e      	ands	r6, r3
    b550:	429e      	cmp	r6, r3
    b552:	d103      	bne.n	b55c <__srefill_r+0xb4>
    b554:	0021      	movs	r1, r4
    b556:	0028      	movs	r0, r5
    b558:	f7fe febe 	bl	a2d8 <__sflush_r>
    b55c:	6923      	ldr	r3, [r4, #16]
    b55e:	6922      	ldr	r2, [r4, #16]
    b560:	6023      	str	r3, [r4, #0]
    b562:	0028      	movs	r0, r5
    b564:	6963      	ldr	r3, [r4, #20]
    b566:	6a21      	ldr	r1, [r4, #32]
    b568:	6a65      	ldr	r5, [r4, #36]	; 0x24
    b56a:	47a8      	blx	r5
    b56c:	0002      	movs	r2, r0
    b56e:	6060      	str	r0, [r4, #4]
    b570:	2000      	movs	r0, #0
    b572:	4282      	cmp	r2, r0
    b574:	dc19      	bgt.n	b5aa <__srefill_r+0x102>
    b576:	89a1      	ldrh	r1, [r4, #12]
    b578:	4282      	cmp	r2, r0
    b57a:	d117      	bne.n	b5ac <__srefill_r+0x104>
    b57c:	2320      	movs	r3, #32
    b57e:	430b      	orrs	r3, r1
    b580:	81a3      	strh	r3, [r4, #12]
    b582:	3801      	subs	r0, #1
    b584:	e011      	b.n	b5aa <__srefill_r+0x102>
    b586:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b588:	2900      	cmp	r1, #0
    b58a:	d0cb      	beq.n	b524 <__srefill_r+0x7c>
    b58c:	0023      	movs	r3, r4
    b58e:	3344      	adds	r3, #68	; 0x44
    b590:	4299      	cmp	r1, r3
    b592:	d002      	beq.n	b59a <__srefill_r+0xf2>
    b594:	0028      	movs	r0, r5
    b596:	f7ff f8f5 	bl	a784 <_free_r>
    b59a:	2000      	movs	r0, #0
    b59c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b59e:	6360      	str	r0, [r4, #52]	; 0x34
    b5a0:	6063      	str	r3, [r4, #4]
    b5a2:	4283      	cmp	r3, r0
    b5a4:	d0be      	beq.n	b524 <__srefill_r+0x7c>
    b5a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b5a8:	6023      	str	r3, [r4, #0]
    b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5ac:	2340      	movs	r3, #64	; 0x40
    b5ae:	6060      	str	r0, [r4, #4]
    b5b0:	430b      	orrs	r3, r1
    b5b2:	e7a3      	b.n	b4fc <__srefill_r+0x54>
    b5b4:	0000c2f8 	.word	0x0000c2f8
    b5b8:	0000c318 	.word	0x0000c318
    b5bc:	0000c2d8 	.word	0x0000c2d8
    b5c0:	0000c2d4 	.word	0x0000c2d4
    b5c4:	0000b491 	.word	0x0000b491

0000b5c8 <_sbrk_r>:
    b5c8:	2300      	movs	r3, #0
    b5ca:	b570      	push	{r4, r5, r6, lr}
    b5cc:	4c06      	ldr	r4, [pc, #24]	; (b5e8 <_sbrk_r+0x20>)
    b5ce:	0005      	movs	r5, r0
    b5d0:	0008      	movs	r0, r1
    b5d2:	6023      	str	r3, [r4, #0]
    b5d4:	f7fb ffde 	bl	7594 <_sbrk>
    b5d8:	1c43      	adds	r3, r0, #1
    b5da:	d103      	bne.n	b5e4 <_sbrk_r+0x1c>
    b5dc:	6823      	ldr	r3, [r4, #0]
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d000      	beq.n	b5e4 <_sbrk_r+0x1c>
    b5e2:	602b      	str	r3, [r5, #0]
    b5e4:	bd70      	pop	{r4, r5, r6, pc}
    b5e6:	46c0      	nop			; (mov r8, r8)
    b5e8:	2000048c 	.word	0x2000048c

0000b5ec <__sccl>:
    b5ec:	b570      	push	{r4, r5, r6, lr}
    b5ee:	780b      	ldrb	r3, [r1, #0]
    b5f0:	2b5e      	cmp	r3, #94	; 0x5e
    b5f2:	d00d      	beq.n	b610 <__sccl+0x24>
    b5f4:	1c4a      	adds	r2, r1, #1
    b5f6:	2100      	movs	r1, #0
    b5f8:	0004      	movs	r4, r0
    b5fa:	1c45      	adds	r5, r0, #1
    b5fc:	35ff      	adds	r5, #255	; 0xff
    b5fe:	7021      	strb	r1, [r4, #0]
    b600:	3401      	adds	r4, #1
    b602:	42a5      	cmp	r5, r4
    b604:	d1fb      	bne.n	b5fe <__sccl+0x12>
    b606:	2b00      	cmp	r3, #0
    b608:	d106      	bne.n	b618 <__sccl+0x2c>
    b60a:	3a01      	subs	r2, #1
    b60c:	0010      	movs	r0, r2
    b60e:	bd70      	pop	{r4, r5, r6, pc}
    b610:	1c8a      	adds	r2, r1, #2
    b612:	784b      	ldrb	r3, [r1, #1]
    b614:	2101      	movs	r1, #1
    b616:	e7ef      	b.n	b5f8 <__sccl+0xc>
    b618:	2401      	movs	r4, #1
    b61a:	404c      	eors	r4, r1
    b61c:	0011      	movs	r1, r2
    b61e:	54c4      	strb	r4, [r0, r3]
    b620:	780d      	ldrb	r5, [r1, #0]
    b622:	1c4a      	adds	r2, r1, #1
    b624:	2d2d      	cmp	r5, #45	; 0x2d
    b626:	d007      	beq.n	b638 <__sccl+0x4c>
    b628:	2d5d      	cmp	r5, #93	; 0x5d
    b62a:	d0ef      	beq.n	b60c <__sccl+0x20>
    b62c:	2d00      	cmp	r5, #0
    b62e:	d101      	bne.n	b634 <__sccl+0x48>
    b630:	000a      	movs	r2, r1
    b632:	e7eb      	b.n	b60c <__sccl+0x20>
    b634:	002b      	movs	r3, r5
    b636:	e7f1      	b.n	b61c <__sccl+0x30>
    b638:	784e      	ldrb	r6, [r1, #1]
    b63a:	2e5d      	cmp	r6, #93	; 0x5d
    b63c:	d0fa      	beq.n	b634 <__sccl+0x48>
    b63e:	42b3      	cmp	r3, r6
    b640:	dcf8      	bgt.n	b634 <__sccl+0x48>
    b642:	3102      	adds	r1, #2
    b644:	3301      	adds	r3, #1
    b646:	54c4      	strb	r4, [r0, r3]
    b648:	429e      	cmp	r6, r3
    b64a:	dcfb      	bgt.n	b644 <__sccl+0x58>
    b64c:	e7e8      	b.n	b620 <__sccl+0x34>
	...

0000b650 <__sread>:
    b650:	b570      	push	{r4, r5, r6, lr}
    b652:	000c      	movs	r4, r1
    b654:	250e      	movs	r5, #14
    b656:	5f49      	ldrsh	r1, [r1, r5]
    b658:	f000 fa2c 	bl	bab4 <_read_r>
    b65c:	2800      	cmp	r0, #0
    b65e:	db03      	blt.n	b668 <__sread+0x18>
    b660:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b662:	181b      	adds	r3, r3, r0
    b664:	6563      	str	r3, [r4, #84]	; 0x54
    b666:	bd70      	pop	{r4, r5, r6, pc}
    b668:	89a3      	ldrh	r3, [r4, #12]
    b66a:	4a02      	ldr	r2, [pc, #8]	; (b674 <__sread+0x24>)
    b66c:	4013      	ands	r3, r2
    b66e:	81a3      	strh	r3, [r4, #12]
    b670:	e7f9      	b.n	b666 <__sread+0x16>
    b672:	46c0      	nop			; (mov r8, r8)
    b674:	ffffefff 	.word	0xffffefff

0000b678 <__swrite>:
    b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b67a:	001f      	movs	r7, r3
    b67c:	898b      	ldrh	r3, [r1, #12]
    b67e:	0005      	movs	r5, r0
    b680:	000c      	movs	r4, r1
    b682:	0016      	movs	r6, r2
    b684:	05db      	lsls	r3, r3, #23
    b686:	d505      	bpl.n	b694 <__swrite+0x1c>
    b688:	230e      	movs	r3, #14
    b68a:	5ec9      	ldrsh	r1, [r1, r3]
    b68c:	2200      	movs	r2, #0
    b68e:	2302      	movs	r3, #2
    b690:	f000 f9c8 	bl	ba24 <_lseek_r>
    b694:	89a3      	ldrh	r3, [r4, #12]
    b696:	4a05      	ldr	r2, [pc, #20]	; (b6ac <__swrite+0x34>)
    b698:	0028      	movs	r0, r5
    b69a:	4013      	ands	r3, r2
    b69c:	81a3      	strh	r3, [r4, #12]
    b69e:	0032      	movs	r2, r6
    b6a0:	230e      	movs	r3, #14
    b6a2:	5ee1      	ldrsh	r1, [r4, r3]
    b6a4:	003b      	movs	r3, r7
    b6a6:	f000 f973 	bl	b990 <_write_r>
    b6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6ac:	ffffefff 	.word	0xffffefff

0000b6b0 <__sseek>:
    b6b0:	b570      	push	{r4, r5, r6, lr}
    b6b2:	000c      	movs	r4, r1
    b6b4:	250e      	movs	r5, #14
    b6b6:	5f49      	ldrsh	r1, [r1, r5]
    b6b8:	f000 f9b4 	bl	ba24 <_lseek_r>
    b6bc:	89a3      	ldrh	r3, [r4, #12]
    b6be:	1c42      	adds	r2, r0, #1
    b6c0:	d103      	bne.n	b6ca <__sseek+0x1a>
    b6c2:	4a05      	ldr	r2, [pc, #20]	; (b6d8 <__sseek+0x28>)
    b6c4:	4013      	ands	r3, r2
    b6c6:	81a3      	strh	r3, [r4, #12]
    b6c8:	bd70      	pop	{r4, r5, r6, pc}
    b6ca:	2280      	movs	r2, #128	; 0x80
    b6cc:	0152      	lsls	r2, r2, #5
    b6ce:	4313      	orrs	r3, r2
    b6d0:	81a3      	strh	r3, [r4, #12]
    b6d2:	6560      	str	r0, [r4, #84]	; 0x54
    b6d4:	e7f8      	b.n	b6c8 <__sseek+0x18>
    b6d6:	46c0      	nop			; (mov r8, r8)
    b6d8:	ffffefff 	.word	0xffffefff

0000b6dc <__sclose>:
    b6dc:	b510      	push	{r4, lr}
    b6de:	230e      	movs	r3, #14
    b6e0:	5ec9      	ldrsh	r1, [r1, r3]
    b6e2:	f000 f969 	bl	b9b8 <_close_r>
    b6e6:	bd10      	pop	{r4, pc}

0000b6e8 <_strtoul_l.isra.0>:
    b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ea:	001f      	movs	r7, r3
    b6ec:	000e      	movs	r6, r1
    b6ee:	b087      	sub	sp, #28
    b6f0:	9005      	str	r0, [sp, #20]
    b6f2:	9103      	str	r1, [sp, #12]
    b6f4:	9201      	str	r2, [sp, #4]
    b6f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    b6f8:	7834      	ldrb	r4, [r6, #0]
    b6fa:	f7fe ffaa 	bl	a652 <__locale_ctype_ptr_l>
    b6fe:	2208      	movs	r2, #8
    b700:	1900      	adds	r0, r0, r4
    b702:	7843      	ldrb	r3, [r0, #1]
    b704:	1c75      	adds	r5, r6, #1
    b706:	4013      	ands	r3, r2
    b708:	d10c      	bne.n	b724 <_strtoul_l.isra.0+0x3c>
    b70a:	2c2d      	cmp	r4, #45	; 0x2d
    b70c:	d10c      	bne.n	b728 <_strtoul_l.isra.0+0x40>
    b70e:	3301      	adds	r3, #1
    b710:	782c      	ldrb	r4, [r5, #0]
    b712:	9302      	str	r3, [sp, #8]
    b714:	1cb5      	adds	r5, r6, #2
    b716:	2f00      	cmp	r7, #0
    b718:	d00c      	beq.n	b734 <_strtoul_l.isra.0+0x4c>
    b71a:	2f10      	cmp	r7, #16
    b71c:	d114      	bne.n	b748 <_strtoul_l.isra.0+0x60>
    b71e:	2c30      	cmp	r4, #48	; 0x30
    b720:	d00a      	beq.n	b738 <_strtoul_l.isra.0+0x50>
    b722:	e011      	b.n	b748 <_strtoul_l.isra.0+0x60>
    b724:	002e      	movs	r6, r5
    b726:	e7e6      	b.n	b6f6 <_strtoul_l.isra.0+0xe>
    b728:	9302      	str	r3, [sp, #8]
    b72a:	2c2b      	cmp	r4, #43	; 0x2b
    b72c:	d1f3      	bne.n	b716 <_strtoul_l.isra.0+0x2e>
    b72e:	782c      	ldrb	r4, [r5, #0]
    b730:	1cb5      	adds	r5, r6, #2
    b732:	e7f0      	b.n	b716 <_strtoul_l.isra.0+0x2e>
    b734:	2c30      	cmp	r4, #48	; 0x30
    b736:	d12f      	bne.n	b798 <_strtoul_l.isra.0+0xb0>
    b738:	2220      	movs	r2, #32
    b73a:	782b      	ldrb	r3, [r5, #0]
    b73c:	4393      	bics	r3, r2
    b73e:	2b58      	cmp	r3, #88	; 0x58
    b740:	d154      	bne.n	b7ec <_strtoul_l.isra.0+0x104>
    b742:	2710      	movs	r7, #16
    b744:	786c      	ldrb	r4, [r5, #1]
    b746:	3502      	adds	r5, #2
    b748:	2001      	movs	r0, #1
    b74a:	0039      	movs	r1, r7
    b74c:	4240      	negs	r0, r0
    b74e:	f7fc fc59 	bl	8004 <__udivsi3>
    b752:	0006      	movs	r6, r0
    b754:	2001      	movs	r0, #1
    b756:	0039      	movs	r1, r7
    b758:	4240      	negs	r0, r0
    b75a:	f7fc fcd9 	bl	8110 <__aeabi_uidivmod>
    b75e:	2300      	movs	r3, #0
    b760:	9104      	str	r1, [sp, #16]
    b762:	2101      	movs	r1, #1
    b764:	2201      	movs	r2, #1
    b766:	0018      	movs	r0, r3
    b768:	468c      	mov	ip, r1
    b76a:	4252      	negs	r2, r2
    b76c:	0021      	movs	r1, r4
    b76e:	3930      	subs	r1, #48	; 0x30
    b770:	2909      	cmp	r1, #9
    b772:	d813      	bhi.n	b79c <_strtoul_l.isra.0+0xb4>
    b774:	000c      	movs	r4, r1
    b776:	42a7      	cmp	r7, r4
    b778:	dd1e      	ble.n	b7b8 <_strtoul_l.isra.0+0xd0>
    b77a:	2b00      	cmp	r3, #0
    b77c:	db1a      	blt.n	b7b4 <_strtoul_l.isra.0+0xcc>
    b77e:	0013      	movs	r3, r2
    b780:	4286      	cmp	r6, r0
    b782:	d306      	bcc.n	b792 <_strtoul_l.isra.0+0xaa>
    b784:	d102      	bne.n	b78c <_strtoul_l.isra.0+0xa4>
    b786:	9904      	ldr	r1, [sp, #16]
    b788:	42a1      	cmp	r1, r4
    b78a:	db02      	blt.n	b792 <_strtoul_l.isra.0+0xaa>
    b78c:	4663      	mov	r3, ip
    b78e:	4378      	muls	r0, r7
    b790:	1820      	adds	r0, r4, r0
    b792:	782c      	ldrb	r4, [r5, #0]
    b794:	3501      	adds	r5, #1
    b796:	e7e9      	b.n	b76c <_strtoul_l.isra.0+0x84>
    b798:	270a      	movs	r7, #10
    b79a:	e7d5      	b.n	b748 <_strtoul_l.isra.0+0x60>
    b79c:	0021      	movs	r1, r4
    b79e:	3941      	subs	r1, #65	; 0x41
    b7a0:	2919      	cmp	r1, #25
    b7a2:	d801      	bhi.n	b7a8 <_strtoul_l.isra.0+0xc0>
    b7a4:	3c37      	subs	r4, #55	; 0x37
    b7a6:	e7e6      	b.n	b776 <_strtoul_l.isra.0+0x8e>
    b7a8:	0021      	movs	r1, r4
    b7aa:	3961      	subs	r1, #97	; 0x61
    b7ac:	2919      	cmp	r1, #25
    b7ae:	d803      	bhi.n	b7b8 <_strtoul_l.isra.0+0xd0>
    b7b0:	3c57      	subs	r4, #87	; 0x57
    b7b2:	e7e0      	b.n	b776 <_strtoul_l.isra.0+0x8e>
    b7b4:	0013      	movs	r3, r2
    b7b6:	e7ec      	b.n	b792 <_strtoul_l.isra.0+0xaa>
    b7b8:	2b00      	cmp	r3, #0
    b7ba:	da09      	bge.n	b7d0 <_strtoul_l.isra.0+0xe8>
    b7bc:	2322      	movs	r3, #34	; 0x22
    b7be:	2001      	movs	r0, #1
    b7c0:	9a05      	ldr	r2, [sp, #20]
    b7c2:	4240      	negs	r0, r0
    b7c4:	6013      	str	r3, [r2, #0]
    b7c6:	9b01      	ldr	r3, [sp, #4]
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d10b      	bne.n	b7e4 <_strtoul_l.isra.0+0xfc>
    b7cc:	b007      	add	sp, #28
    b7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7d0:	9a02      	ldr	r2, [sp, #8]
    b7d2:	2a00      	cmp	r2, #0
    b7d4:	d000      	beq.n	b7d8 <_strtoul_l.isra.0+0xf0>
    b7d6:	4240      	negs	r0, r0
    b7d8:	9a01      	ldr	r2, [sp, #4]
    b7da:	2a00      	cmp	r2, #0
    b7dc:	d0f6      	beq.n	b7cc <_strtoul_l.isra.0+0xe4>
    b7de:	9a03      	ldr	r2, [sp, #12]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d000      	beq.n	b7e6 <_strtoul_l.isra.0+0xfe>
    b7e4:	1e6a      	subs	r2, r5, #1
    b7e6:	9b01      	ldr	r3, [sp, #4]
    b7e8:	601a      	str	r2, [r3, #0]
    b7ea:	e7ef      	b.n	b7cc <_strtoul_l.isra.0+0xe4>
    b7ec:	2430      	movs	r4, #48	; 0x30
    b7ee:	2f00      	cmp	r7, #0
    b7f0:	d1aa      	bne.n	b748 <_strtoul_l.isra.0+0x60>
    b7f2:	3708      	adds	r7, #8
    b7f4:	e7a8      	b.n	b748 <_strtoul_l.isra.0+0x60>
	...

0000b7f8 <_strtoul_r>:
    b7f8:	b513      	push	{r0, r1, r4, lr}
    b7fa:	4c05      	ldr	r4, [pc, #20]	; (b810 <_strtoul_r+0x18>)
    b7fc:	6824      	ldr	r4, [r4, #0]
    b7fe:	6a24      	ldr	r4, [r4, #32]
    b800:	2c00      	cmp	r4, #0
    b802:	d100      	bne.n	b806 <_strtoul_r+0xe>
    b804:	4c03      	ldr	r4, [pc, #12]	; (b814 <_strtoul_r+0x1c>)
    b806:	9400      	str	r4, [sp, #0]
    b808:	f7ff ff6e 	bl	b6e8 <_strtoul_l.isra.0>
    b80c:	bd16      	pop	{r1, r2, r4, pc}
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	20000074 	.word	0x20000074
    b814:	200000d8 	.word	0x200000d8

0000b818 <__submore>:
    b818:	000b      	movs	r3, r1
    b81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b81c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    b81e:	3344      	adds	r3, #68	; 0x44
    b820:	000c      	movs	r4, r1
    b822:	429d      	cmp	r5, r3
    b824:	d11c      	bne.n	b860 <__submore+0x48>
    b826:	2680      	movs	r6, #128	; 0x80
    b828:	00f6      	lsls	r6, r6, #3
    b82a:	0031      	movs	r1, r6
    b82c:	f7fe fff4 	bl	a818 <_malloc_r>
    b830:	2800      	cmp	r0, #0
    b832:	d102      	bne.n	b83a <__submore+0x22>
    b834:	2001      	movs	r0, #1
    b836:	4240      	negs	r0, r0
    b838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b83a:	0023      	movs	r3, r4
    b83c:	6360      	str	r0, [r4, #52]	; 0x34
    b83e:	63a6      	str	r6, [r4, #56]	; 0x38
    b840:	3346      	adds	r3, #70	; 0x46
    b842:	781a      	ldrb	r2, [r3, #0]
    b844:	4b10      	ldr	r3, [pc, #64]	; (b888 <__submore+0x70>)
    b846:	54c2      	strb	r2, [r0, r3]
    b848:	0023      	movs	r3, r4
    b84a:	3345      	adds	r3, #69	; 0x45
    b84c:	781a      	ldrb	r2, [r3, #0]
    b84e:	4b0f      	ldr	r3, [pc, #60]	; (b88c <__submore+0x74>)
    b850:	54c2      	strb	r2, [r0, r3]
    b852:	782a      	ldrb	r2, [r5, #0]
    b854:	4b0e      	ldr	r3, [pc, #56]	; (b890 <__submore+0x78>)
    b856:	54c2      	strb	r2, [r0, r3]
    b858:	18c0      	adds	r0, r0, r3
    b85a:	6020      	str	r0, [r4, #0]
    b85c:	2000      	movs	r0, #0
    b85e:	e7eb      	b.n	b838 <__submore+0x20>
    b860:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    b862:	0029      	movs	r1, r5
    b864:	0073      	lsls	r3, r6, #1
    b866:	001a      	movs	r2, r3
    b868:	9301      	str	r3, [sp, #4]
    b86a:	f000 f8fc 	bl	ba66 <_realloc_r>
    b86e:	1e05      	subs	r5, r0, #0
    b870:	d0e0      	beq.n	b834 <__submore+0x1c>
    b872:	1987      	adds	r7, r0, r6
    b874:	0001      	movs	r1, r0
    b876:	0032      	movs	r2, r6
    b878:	0038      	movs	r0, r7
    b87a:	f7fe f9f1 	bl	9c60 <memcpy>
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	6027      	str	r7, [r4, #0]
    b882:	6365      	str	r5, [r4, #52]	; 0x34
    b884:	63a3      	str	r3, [r4, #56]	; 0x38
    b886:	e7e9      	b.n	b85c <__submore+0x44>
    b888:	000003ff 	.word	0x000003ff
    b88c:	000003fe 	.word	0x000003fe
    b890:	000003fd 	.word	0x000003fd

0000b894 <_ungetc_r>:
    b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b896:	0005      	movs	r5, r0
    b898:	000e      	movs	r6, r1
    b89a:	0014      	movs	r4, r2
    b89c:	1c4b      	adds	r3, r1, #1
    b89e:	d103      	bne.n	b8a8 <_ungetc_r+0x14>
    b8a0:	2601      	movs	r6, #1
    b8a2:	4276      	negs	r6, r6
    b8a4:	0030      	movs	r0, r6
    b8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8a8:	2800      	cmp	r0, #0
    b8aa:	d004      	beq.n	b8b6 <_ungetc_r+0x22>
    b8ac:	6983      	ldr	r3, [r0, #24]
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d101      	bne.n	b8b6 <_ungetc_r+0x22>
    b8b2:	f7fe fe1d 	bl	a4f0 <__sinit>
    b8b6:	4b2d      	ldr	r3, [pc, #180]	; (b96c <_ungetc_r+0xd8>)
    b8b8:	429c      	cmp	r4, r3
    b8ba:	d12d      	bne.n	b918 <_ungetc_r+0x84>
    b8bc:	686c      	ldr	r4, [r5, #4]
    b8be:	2220      	movs	r2, #32
    b8c0:	89a3      	ldrh	r3, [r4, #12]
    b8c2:	4393      	bics	r3, r2
    b8c4:	b21b      	sxth	r3, r3
    b8c6:	81a3      	strh	r3, [r4, #12]
    b8c8:	b29b      	uxth	r3, r3
    b8ca:	075a      	lsls	r2, r3, #29
    b8cc:	d413      	bmi.n	b8f6 <_ungetc_r+0x62>
    b8ce:	06da      	lsls	r2, r3, #27
    b8d0:	d5e6      	bpl.n	b8a0 <_ungetc_r+0xc>
    b8d2:	2708      	movs	r7, #8
    b8d4:	423b      	tst	r3, r7
    b8d6:	d00a      	beq.n	b8ee <_ungetc_r+0x5a>
    b8d8:	0021      	movs	r1, r4
    b8da:	0028      	movs	r0, r5
    b8dc:	f7fe fd86 	bl	a3ec <_fflush_r>
    b8e0:	2800      	cmp	r0, #0
    b8e2:	d1dd      	bne.n	b8a0 <_ungetc_r+0xc>
    b8e4:	89a3      	ldrh	r3, [r4, #12]
    b8e6:	60a0      	str	r0, [r4, #8]
    b8e8:	43bb      	bics	r3, r7
    b8ea:	81a3      	strh	r3, [r4, #12]
    b8ec:	61a0      	str	r0, [r4, #24]
    b8ee:	2304      	movs	r3, #4
    b8f0:	89a2      	ldrh	r2, [r4, #12]
    b8f2:	4313      	orrs	r3, r2
    b8f4:	81a3      	strh	r3, [r4, #12]
    b8f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    b8f8:	b2f7      	uxtb	r7, r6
    b8fa:	6863      	ldr	r3, [r4, #4]
    b8fc:	b2f6      	uxtb	r6, r6
    b8fe:	2a00      	cmp	r2, #0
    b900:	d01b      	beq.n	b93a <_ungetc_r+0xa6>
    b902:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b904:	4293      	cmp	r3, r2
    b906:	da11      	bge.n	b92c <_ungetc_r+0x98>
    b908:	6823      	ldr	r3, [r4, #0]
    b90a:	3b01      	subs	r3, #1
    b90c:	6023      	str	r3, [r4, #0]
    b90e:	701f      	strb	r7, [r3, #0]
    b910:	6863      	ldr	r3, [r4, #4]
    b912:	3301      	adds	r3, #1
    b914:	6063      	str	r3, [r4, #4]
    b916:	e7c5      	b.n	b8a4 <_ungetc_r+0x10>
    b918:	4b15      	ldr	r3, [pc, #84]	; (b970 <_ungetc_r+0xdc>)
    b91a:	429c      	cmp	r4, r3
    b91c:	d101      	bne.n	b922 <_ungetc_r+0x8e>
    b91e:	68ac      	ldr	r4, [r5, #8]
    b920:	e7cd      	b.n	b8be <_ungetc_r+0x2a>
    b922:	4b14      	ldr	r3, [pc, #80]	; (b974 <_ungetc_r+0xe0>)
    b924:	429c      	cmp	r4, r3
    b926:	d1ca      	bne.n	b8be <_ungetc_r+0x2a>
    b928:	68ec      	ldr	r4, [r5, #12]
    b92a:	e7c8      	b.n	b8be <_ungetc_r+0x2a>
    b92c:	0021      	movs	r1, r4
    b92e:	0028      	movs	r0, r5
    b930:	f7ff ff72 	bl	b818 <__submore>
    b934:	2800      	cmp	r0, #0
    b936:	d0e7      	beq.n	b908 <_ungetc_r+0x74>
    b938:	e7b2      	b.n	b8a0 <_ungetc_r+0xc>
    b93a:	6921      	ldr	r1, [r4, #16]
    b93c:	6822      	ldr	r2, [r4, #0]
    b93e:	2900      	cmp	r1, #0
    b940:	d007      	beq.n	b952 <_ungetc_r+0xbe>
    b942:	4291      	cmp	r1, r2
    b944:	d205      	bcs.n	b952 <_ungetc_r+0xbe>
    b946:	1e51      	subs	r1, r2, #1
    b948:	7808      	ldrb	r0, [r1, #0]
    b94a:	4286      	cmp	r6, r0
    b94c:	d101      	bne.n	b952 <_ungetc_r+0xbe>
    b94e:	6021      	str	r1, [r4, #0]
    b950:	e7df      	b.n	b912 <_ungetc_r+0x7e>
    b952:	6423      	str	r3, [r4, #64]	; 0x40
    b954:	0023      	movs	r3, r4
    b956:	3344      	adds	r3, #68	; 0x44
    b958:	6363      	str	r3, [r4, #52]	; 0x34
    b95a:	2303      	movs	r3, #3
    b95c:	63a3      	str	r3, [r4, #56]	; 0x38
    b95e:	0023      	movs	r3, r4
    b960:	3346      	adds	r3, #70	; 0x46
    b962:	63e2      	str	r2, [r4, #60]	; 0x3c
    b964:	701f      	strb	r7, [r3, #0]
    b966:	6023      	str	r3, [r4, #0]
    b968:	2301      	movs	r3, #1
    b96a:	e7d3      	b.n	b914 <_ungetc_r+0x80>
    b96c:	0000c2f8 	.word	0x0000c2f8
    b970:	0000c318 	.word	0x0000c318
    b974:	0000c2d8 	.word	0x0000c2d8

0000b978 <__ascii_wctomb>:
    b978:	1e0b      	subs	r3, r1, #0
    b97a:	d004      	beq.n	b986 <__ascii_wctomb+0xe>
    b97c:	2aff      	cmp	r2, #255	; 0xff
    b97e:	d904      	bls.n	b98a <__ascii_wctomb+0x12>
    b980:	238a      	movs	r3, #138	; 0x8a
    b982:	6003      	str	r3, [r0, #0]
    b984:	3b8b      	subs	r3, #139	; 0x8b
    b986:	0018      	movs	r0, r3
    b988:	4770      	bx	lr
    b98a:	700a      	strb	r2, [r1, #0]
    b98c:	2301      	movs	r3, #1
    b98e:	e7fa      	b.n	b986 <__ascii_wctomb+0xe>

0000b990 <_write_r>:
    b990:	b570      	push	{r4, r5, r6, lr}
    b992:	0005      	movs	r5, r0
    b994:	0008      	movs	r0, r1
    b996:	0011      	movs	r1, r2
    b998:	2200      	movs	r2, #0
    b99a:	4c06      	ldr	r4, [pc, #24]	; (b9b4 <_write_r+0x24>)
    b99c:	6022      	str	r2, [r4, #0]
    b99e:	001a      	movs	r2, r3
    b9a0:	f7fb fdc2 	bl	7528 <_write>
    b9a4:	1c43      	adds	r3, r0, #1
    b9a6:	d103      	bne.n	b9b0 <_write_r+0x20>
    b9a8:	6823      	ldr	r3, [r4, #0]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d000      	beq.n	b9b0 <_write_r+0x20>
    b9ae:	602b      	str	r3, [r5, #0]
    b9b0:	bd70      	pop	{r4, r5, r6, pc}
    b9b2:	46c0      	nop			; (mov r8, r8)
    b9b4:	2000048c 	.word	0x2000048c

0000b9b8 <_close_r>:
    b9b8:	2300      	movs	r3, #0
    b9ba:	b570      	push	{r4, r5, r6, lr}
    b9bc:	4c06      	ldr	r4, [pc, #24]	; (b9d8 <_close_r+0x20>)
    b9be:	0005      	movs	r5, r0
    b9c0:	0008      	movs	r0, r1
    b9c2:	6023      	str	r3, [r4, #0]
    b9c4:	f7fb fe04 	bl	75d0 <_close>
    b9c8:	1c43      	adds	r3, r0, #1
    b9ca:	d103      	bne.n	b9d4 <_close_r+0x1c>
    b9cc:	6823      	ldr	r3, [r4, #0]
    b9ce:	2b00      	cmp	r3, #0
    b9d0:	d000      	beq.n	b9d4 <_close_r+0x1c>
    b9d2:	602b      	str	r3, [r5, #0]
    b9d4:	bd70      	pop	{r4, r5, r6, pc}
    b9d6:	46c0      	nop			; (mov r8, r8)
    b9d8:	2000048c 	.word	0x2000048c

0000b9dc <_fstat_r>:
    b9dc:	2300      	movs	r3, #0
    b9de:	b570      	push	{r4, r5, r6, lr}
    b9e0:	4c06      	ldr	r4, [pc, #24]	; (b9fc <_fstat_r+0x20>)
    b9e2:	0005      	movs	r5, r0
    b9e4:	0008      	movs	r0, r1
    b9e6:	0011      	movs	r1, r2
    b9e8:	6023      	str	r3, [r4, #0]
    b9ea:	f7fb fdfb 	bl	75e4 <_fstat>
    b9ee:	1c43      	adds	r3, r0, #1
    b9f0:	d103      	bne.n	b9fa <_fstat_r+0x1e>
    b9f2:	6823      	ldr	r3, [r4, #0]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d000      	beq.n	b9fa <_fstat_r+0x1e>
    b9f8:	602b      	str	r3, [r5, #0]
    b9fa:	bd70      	pop	{r4, r5, r6, pc}
    b9fc:	2000048c 	.word	0x2000048c

0000ba00 <_isatty_r>:
    ba00:	2300      	movs	r3, #0
    ba02:	b570      	push	{r4, r5, r6, lr}
    ba04:	4c06      	ldr	r4, [pc, #24]	; (ba20 <_isatty_r+0x20>)
    ba06:	0005      	movs	r5, r0
    ba08:	0008      	movs	r0, r1
    ba0a:	6023      	str	r3, [r4, #0]
    ba0c:	f7fb fdf8 	bl	7600 <_isatty>
    ba10:	1c43      	adds	r3, r0, #1
    ba12:	d103      	bne.n	ba1c <_isatty_r+0x1c>
    ba14:	6823      	ldr	r3, [r4, #0]
    ba16:	2b00      	cmp	r3, #0
    ba18:	d000      	beq.n	ba1c <_isatty_r+0x1c>
    ba1a:	602b      	str	r3, [r5, #0]
    ba1c:	bd70      	pop	{r4, r5, r6, pc}
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	2000048c 	.word	0x2000048c

0000ba24 <_lseek_r>:
    ba24:	b570      	push	{r4, r5, r6, lr}
    ba26:	0005      	movs	r5, r0
    ba28:	0008      	movs	r0, r1
    ba2a:	0011      	movs	r1, r2
    ba2c:	2200      	movs	r2, #0
    ba2e:	4c06      	ldr	r4, [pc, #24]	; (ba48 <_lseek_r+0x24>)
    ba30:	6022      	str	r2, [r4, #0]
    ba32:	001a      	movs	r2, r3
    ba34:	f7fb fded 	bl	7612 <_lseek>
    ba38:	1c43      	adds	r3, r0, #1
    ba3a:	d103      	bne.n	ba44 <_lseek_r+0x20>
    ba3c:	6823      	ldr	r3, [r4, #0]
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d000      	beq.n	ba44 <_lseek_r+0x20>
    ba42:	602b      	str	r3, [r5, #0]
    ba44:	bd70      	pop	{r4, r5, r6, pc}
    ba46:	46c0      	nop			; (mov r8, r8)
    ba48:	2000048c 	.word	0x2000048c

0000ba4c <memchr>:
    ba4c:	b2c9      	uxtb	r1, r1
    ba4e:	1882      	adds	r2, r0, r2
    ba50:	4290      	cmp	r0, r2
    ba52:	d101      	bne.n	ba58 <memchr+0xc>
    ba54:	2000      	movs	r0, #0
    ba56:	4770      	bx	lr
    ba58:	7803      	ldrb	r3, [r0, #0]
    ba5a:	428b      	cmp	r3, r1
    ba5c:	d0fb      	beq.n	ba56 <memchr+0xa>
    ba5e:	3001      	adds	r0, #1
    ba60:	e7f6      	b.n	ba50 <memchr+0x4>

0000ba62 <__malloc_lock>:
    ba62:	4770      	bx	lr

0000ba64 <__malloc_unlock>:
    ba64:	4770      	bx	lr

0000ba66 <_realloc_r>:
    ba66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba68:	0007      	movs	r7, r0
    ba6a:	000d      	movs	r5, r1
    ba6c:	0016      	movs	r6, r2
    ba6e:	2900      	cmp	r1, #0
    ba70:	d105      	bne.n	ba7e <_realloc_r+0x18>
    ba72:	0011      	movs	r1, r2
    ba74:	f7fe fed0 	bl	a818 <_malloc_r>
    ba78:	0004      	movs	r4, r0
    ba7a:	0020      	movs	r0, r4
    ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba7e:	2a00      	cmp	r2, #0
    ba80:	d103      	bne.n	ba8a <_realloc_r+0x24>
    ba82:	f7fe fe7f 	bl	a784 <_free_r>
    ba86:	0034      	movs	r4, r6
    ba88:	e7f7      	b.n	ba7a <_realloc_r+0x14>
    ba8a:	f000 f827 	bl	badc <_malloc_usable_size_r>
    ba8e:	002c      	movs	r4, r5
    ba90:	4286      	cmp	r6, r0
    ba92:	d9f2      	bls.n	ba7a <_realloc_r+0x14>
    ba94:	0031      	movs	r1, r6
    ba96:	0038      	movs	r0, r7
    ba98:	f7fe febe 	bl	a818 <_malloc_r>
    ba9c:	1e04      	subs	r4, r0, #0
    ba9e:	d0ec      	beq.n	ba7a <_realloc_r+0x14>
    baa0:	0029      	movs	r1, r5
    baa2:	0032      	movs	r2, r6
    baa4:	f7fe f8dc 	bl	9c60 <memcpy>
    baa8:	0029      	movs	r1, r5
    baaa:	0038      	movs	r0, r7
    baac:	f7fe fe6a 	bl	a784 <_free_r>
    bab0:	e7e3      	b.n	ba7a <_realloc_r+0x14>
	...

0000bab4 <_read_r>:
    bab4:	b570      	push	{r4, r5, r6, lr}
    bab6:	0005      	movs	r5, r0
    bab8:	0008      	movs	r0, r1
    baba:	0011      	movs	r1, r2
    babc:	2200      	movs	r2, #0
    babe:	4c06      	ldr	r4, [pc, #24]	; (bad8 <_read_r+0x24>)
    bac0:	6022      	str	r2, [r4, #0]
    bac2:	001a      	movs	r2, r3
    bac4:	f7fb fd06 	bl	74d4 <_read>
    bac8:	1c43      	adds	r3, r0, #1
    baca:	d103      	bne.n	bad4 <_read_r+0x20>
    bacc:	6823      	ldr	r3, [r4, #0]
    bace:	2b00      	cmp	r3, #0
    bad0:	d000      	beq.n	bad4 <_read_r+0x20>
    bad2:	602b      	str	r3, [r5, #0]
    bad4:	bd70      	pop	{r4, r5, r6, pc}
    bad6:	46c0      	nop			; (mov r8, r8)
    bad8:	2000048c 	.word	0x2000048c

0000badc <_malloc_usable_size_r>:
    badc:	1f0b      	subs	r3, r1, #4
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	1f18      	subs	r0, r3, #4
    bae2:	2b00      	cmp	r3, #0
    bae4:	da01      	bge.n	baea <_malloc_usable_size_r+0xe>
    bae6:	580b      	ldr	r3, [r1, r0]
    bae8:	18c0      	adds	r0, r0, r3
    baea:	4770      	bx	lr
    baec:	00000502 	.word	0x00000502
    baf0:	00000506 	.word	0x00000506
    baf4:	0000050a 	.word	0x0000050a
    baf8:	0000050e 	.word	0x0000050e
    bafc:	00000512 	.word	0x00000512
    bb00:	00000516 	.word	0x00000516
    bb04:	0000051a 	.word	0x0000051a
    bb08:	0000051e 	.word	0x0000051e
    bb0c:	00000522 	.word	0x00000522
    bb10:	00000526 	.word	0x00000526
    bb14:	0000057e 	.word	0x0000057e
    bb18:	00000584 	.word	0x00000584
    bb1c:	0000058a 	.word	0x0000058a
    bb20:	00000590 	.word	0x00000590
    bb24:	00000590 	.word	0x00000590
    bb28:	00000596 	.word	0x00000596
    bb2c:	00000596 	.word	0x00000596
    bb30:	00000596 	.word	0x00000596
    bb34:	0000059c 	.word	0x0000059c
    bb38:	000005a2 	.word	0x000005a2
    bb3c:	00000002 	.word	0x00000002
    bb40:	00000003 	.word	0x00000003
    bb44:	00000028 	.word	0x00000028
    bb48:	00000029 	.word	0x00000029
    bb4c:	00000004 	.word	0x00000004
    bb50:	00000005 	.word	0x00000005
    bb54:	00000006 	.word	0x00000006
    bb58:	00000007 	.word	0x00000007
    bb5c:	0000ffff 	.word	0x0000ffff
    bb60:	0000ffff 	.word	0x0000ffff
    bb64:	00000022 	.word	0x00000022
    bb68:	00000023 	.word	0x00000023
    bb6c:	0000ffff 	.word	0x0000ffff
    bb70:	0000ffff 	.word	0x0000ffff
    bb74:	0000ffff 	.word	0x0000ffff
    bb78:	0000ffff 	.word	0x0000ffff
    bb7c:	00000008 	.word	0x00000008
    bb80:	00000009 	.word	0x00000009
    bb84:	0000000a 	.word	0x0000000a
    bb88:	0000000b 	.word	0x0000000b
    bb8c:	000013da 	.word	0x000013da
    bb90:	000013e0 	.word	0x000013e0
    bb94:	000013e0 	.word	0x000013e0
    bb98:	000013e0 	.word	0x000013e0
    bb9c:	000013e0 	.word	0x000013e0
    bba0:	000013e0 	.word	0x000013e0
    bba4:	000013e0 	.word	0x000013e0
    bba8:	000013e0 	.word	0x000013e0
    bbac:	000013e0 	.word	0x000013e0
    bbb0:	000013e0 	.word	0x000013e0
    bbb4:	000013e0 	.word	0x000013e0
    bbb8:	000013e0 	.word	0x000013e0
    bbbc:	000013e0 	.word	0x000013e0
    bbc0:	000013e0 	.word	0x000013e0
    bbc4:	000013e0 	.word	0x000013e0
    bbc8:	000013e0 	.word	0x000013e0
    bbcc:	000013b8 	.word	0x000013b8
    bbd0:	000013e0 	.word	0x000013e0
    bbd4:	000013e0 	.word	0x000013e0
    bbd8:	000013e0 	.word	0x000013e0
    bbdc:	000013e0 	.word	0x000013e0
    bbe0:	000013e0 	.word	0x000013e0
    bbe4:	000013e0 	.word	0x000013e0
    bbe8:	000013e0 	.word	0x000013e0
    bbec:	000013e0 	.word	0x000013e0
    bbf0:	000013e0 	.word	0x000013e0
    bbf4:	000013e0 	.word	0x000013e0
    bbf8:	000013e0 	.word	0x000013e0
    bbfc:	000013e0 	.word	0x000013e0
    bc00:	000013e0 	.word	0x000013e0
    bc04:	000013e0 	.word	0x000013e0
    bc08:	000013e0 	.word	0x000013e0
    bc0c:	000013d4 	.word	0x000013d4
    bc10:	000013e0 	.word	0x000013e0
    bc14:	000013e0 	.word	0x000013e0
    bc18:	000013e0 	.word	0x000013e0
    bc1c:	000013e0 	.word	0x000013e0
    bc20:	000013e0 	.word	0x000013e0
    bc24:	000013e0 	.word	0x000013e0
    bc28:	000013e0 	.word	0x000013e0
    bc2c:	000013e0 	.word	0x000013e0
    bc30:	000013e0 	.word	0x000013e0
    bc34:	000013e0 	.word	0x000013e0
    bc38:	000013e0 	.word	0x000013e0
    bc3c:	000013e0 	.word	0x000013e0
    bc40:	000013e0 	.word	0x000013e0
    bc44:	000013e0 	.word	0x000013e0
    bc48:	000013e0 	.word	0x000013e0
    bc4c:	000013ce 	.word	0x000013ce
    bc50:	00001376 	.word	0x00001376
    bc54:	0000138c 	.word	0x0000138c
    bc58:	000013a2 	.word	0x000013a2
    bc5c:	0000135c 	.word	0x0000135c
    bc60:	706c6568 	.word	0x706c6568
    bc64:	00000000 	.word	0x00000000
    bc68:	5f726576 	.word	0x5f726576
    bc6c:	00006c62 	.word	0x00006c62
    bc70:	5f726576 	.word	0x5f726576
    bc74:	00707061 	.word	0x00707061
    bc78:	6f697067 	.word	0x6f697067
    bc7c:	7465735f 	.word	0x7465735f
    bc80:	00000000 	.word	0x00000000
    bc84:	6f697067 	.word	0x6f697067
    bc88:	656c635f 	.word	0x656c635f
    bc8c:	00007261 	.word	0x00007261
    bc90:	6f697067 	.word	0x6f697067
    bc94:	7465675f 	.word	0x7465675f
    bc98:	00000000 	.word	0x00000000
    bc9c:	0063616d 	.word	0x0063616d
    bca0:	00007069 	.word	0x00007069
    bca4:	64616572 	.word	0x64616572
    bca8:	7279675f 	.word	0x7279675f
    bcac:	0000006f 	.word	0x0000006f
    bcb0:	64616572 	.word	0x64616572
    bcb4:	6363615f 	.word	0x6363615f
    bcb8:	00006c65 	.word	0x00006c65
    bcbc:	5f746573 	.word	0x5f746573
    bcc0:	00746361 	.word	0x00746361
    bcc4:	61656c63 	.word	0x61656c63
    bcc8:	63615f72 	.word	0x63615f72
    bccc:	00000074 	.word	0x00000074
    bcd0:	5f636461 	.word	0x5f636461
    bcd4:	00746567 	.word	0x00746567
    bcd8:	5f75636d 	.word	0x5f75636d
    bcdc:	706d6574 	.word	0x706d6574
    bce0:	00000000 	.word	0x00000000
    bce4:	5f633269 	.word	0x5f633269
    bce8:	6e616373 	.word	0x6e616373
	...
    bcf4:	70736944 	.word	0x70736944
    bcf8:	2079616c 	.word	0x2079616c
    bcfc:	206c6c61 	.word	0x206c6c61
    bd00:	6d6d6f63 	.word	0x6d6d6f63
    bd04:	73646e61 	.word	0x73646e61
    bd08:	00000000 	.word	0x00000000
    bd0c:	6e697250 	.word	0x6e697250
    bd10:	6f622074 	.word	0x6f622074
    bd14:	6f6c746f 	.word	0x6f6c746f
    bd18:	72656461 	.word	0x72656461
    bd1c:	72696620 	.word	0x72696620
    bd20:	7261776d 	.word	0x7261776d
    bd24:	6e692065 	.word	0x6e692065
    bd28:	6d726f66 	.word	0x6d726f66
    bd2c:	6f697461 	.word	0x6f697461
    bd30:	00002e6e 	.word	0x00002e6e
    bd34:	6e697250 	.word	0x6e697250
    bd38:	70612074 	.word	0x70612074
    bd3c:	63696c70 	.word	0x63696c70
    bd40:	6f697461 	.word	0x6f697461
    bd44:	6576206e 	.word	0x6576206e
    bd48:	6f697372 	.word	0x6f697372
    bd4c:	6e69206e 	.word	0x6e69206e
    bd50:	6d726f66 	.word	0x6d726f66
    bd54:	6f697461 	.word	0x6f697461
    bd58:	00002e6e 	.word	0x00002e6e
    bd5c:	726f705b 	.word	0x726f705b
    bd60:	5b205d74 	.word	0x5b205d74
    bd64:	5f6e6970 	.word	0x5f6e6970
    bd68:	5d6d756e 	.word	0x5d6d756e
    bd6c:	00000000 	.word	0x00000000
    bd70:	20746553 	.word	0x20746553
    bd74:	4f495047 	.word	0x4f495047
    bd78:	6e697020 	.word	0x6e697020
    bd7c:	20746120 	.word	0x20746120
    bd80:	69672061 	.word	0x69672061
    bd84:	206e6576 	.word	0x206e6576
    bd88:	74726f70 	.word	0x74726f70
    bd8c:	67696820 	.word	0x67696820
    bd90:	00002e68 	.word	0x00002e68
    bd94:	20746553 	.word	0x20746553
    bd98:	4f495047 	.word	0x4f495047
    bd9c:	6e697020 	.word	0x6e697020
    bda0:	20746120 	.word	0x20746120
    bda4:	69672061 	.word	0x69672061
    bda8:	206e6576 	.word	0x206e6576
    bdac:	74726f70 	.word	0x74726f70
    bdb0:	776f6c20 	.word	0x776f6c20
    bdb4:	0000002e 	.word	0x0000002e
    bdb8:	20746547 	.word	0x20746547
    bdbc:	74617473 	.word	0x74617473
    bdc0:	666f2065 	.word	0x666f2065
    bdc4:	47206120 	.word	0x47206120
    bdc8:	204f4950 	.word	0x204f4950
    bdcc:	2e6e6970 	.word	0x2e6e6970
    bdd0:	746e4528 	.word	0x746e4528
    bdd4:	42207265 	.word	0x42207265
    bdd8:	6f203220 	.word	0x6f203220
    bddc:	20422072 	.word	0x20422072
    bde0:	00002933 	.word	0x00002933
    bde4:	6e697250 	.word	0x6e697250
    bde8:	68742074 	.word	0x68742074
    bdec:	414d2065 	.word	0x414d2065
    bdf0:	64612043 	.word	0x64612043
    bdf4:	73657264 	.word	0x73657264
    bdf8:	00002e73 	.word	0x00002e73
    bdfc:	6e697250 	.word	0x6e697250
    be00:	68742074 	.word	0x68742074
    be04:	50492065 	.word	0x50492065
    be08:	64644120 	.word	0x64644120
    be0c:	73736572 	.word	0x73736572
    be10:	0000002e 	.word	0x0000002e
    be14:	6165725b 	.word	0x6165725b
    be18:	676e6964 	.word	0x676e6964
    be1c:	756f6320 	.word	0x756f6320
    be20:	205d746e 	.word	0x205d746e
    be24:	746e695b 	.word	0x746e695b
    be28:	61767265 	.word	0x61767265
    be2c:	6e69206c 	.word	0x6e69206c
    be30:	5d736d20 	.word	0x5d736d20
    be34:	00000000 	.word	0x00000000
    be38:	64616552 	.word	0x64616552
    be3c:	6f726620 	.word	0x6f726620
    be40:	6874206d 	.word	0x6874206d
    be44:	79472065 	.word	0x79472065
    be48:	63736f72 	.word	0x63736f72
    be4c:	2065706f 	.word	0x2065706f
    be50:	736e6573 	.word	0x736e6573
    be54:	002e726f 	.word	0x002e726f
    be58:	6e727554 	.word	0x6e727554
    be5c:	65687420 	.word	0x65687420
    be60:	74636120 	.word	0x74636120
    be64:	6f746175 	.word	0x6f746175
    be68:	4c282072 	.word	0x4c282072
    be6c:	20294445 	.word	0x20294445
    be70:	002e6e6f 	.word	0x002e6e6f
    be74:	6e727554 	.word	0x6e727554
    be78:	65687420 	.word	0x65687420
    be7c:	74636120 	.word	0x74636120
    be80:	6f746175 	.word	0x6f746175
    be84:	4c282072 	.word	0x4c282072
    be88:	20294445 	.word	0x20294445
    be8c:	2e66666f 	.word	0x2e66666f
    be90:	00000000 	.word	0x00000000
    be94:	20746547 	.word	0x20746547
    be98:	20656874 	.word	0x20656874
    be9c:	20434441 	.word	0x20434441
    bea0:	756c6176 	.word	0x756c6176
    bea4:	666f2065 	.word	0x666f2065
    bea8:	206e6120 	.word	0x206e6120
    beac:	75706e69 	.word	0x75706e69
    beb0:	69702074 	.word	0x69702074
    beb4:	00002e6e 	.word	0x00002e6e
    beb8:	6e697250 	.word	0x6e697250
    bebc:	68742074 	.word	0x68742074
    bec0:	65742065 	.word	0x65742065
    bec4:	7265706d 	.word	0x7265706d
    bec8:	72757461 	.word	0x72757461
    becc:	65722065 	.word	0x65722065
    bed0:	6e696461 	.word	0x6e696461
    bed4:	666f2067 	.word	0x666f2067
    bed8:	65687420 	.word	0x65687420
    bedc:	2d6e6f20 	.word	0x2d6e6f20
    bee0:	72616f62 	.word	0x72616f62
    bee4:	434d2064 	.word	0x434d2064
    bee8:	65742055 	.word	0x65742055
    beec:	7265706d 	.word	0x7265706d
    bef0:	72757461 	.word	0x72757461
    bef4:	65732065 	.word	0x65732065
    bef8:	726f736e 	.word	0x726f736e
    befc:	0000002e 	.word	0x0000002e
    bf00:	00000020 	.word	0x00000020
    bf04:	20746f4e 	.word	0x20746f4e
    bf08:	756f6e65 	.word	0x756f6e65
    bf0c:	61206867 	.word	0x61206867
    bf10:	6d756772 	.word	0x6d756772
    bf14:	73746e65 	.word	0x73746e65
    bf18:	72542021 	.word	0x72542021
    bf1c:	68222079 	.word	0x68222079
    bf20:	22706c65 	.word	0x22706c65
    bf24:	00000d2e 	.word	0x00000d2e
    bf28:	00000041 	.word	0x00000041
    bf2c:	00000042 	.word	0x00000042
    bf30:	65746e45 	.word	0x65746e45
    bf34:	20612072 	.word	0x20612072
    bf38:	696c6176 	.word	0x696c6176
    bf3c:	6f502064 	.word	0x6f502064
    bf40:	20217472 	.word	0x20217472
    bf44:	20797254 	.word	0x20797254
    bf48:	6c656822 	.word	0x6c656822
    bf4c:	0d2e2270 	.word	0x0d2e2270
    bf50:	00000000 	.word	0x00000000
    bf54:	65746e45 	.word	0x65746e45
    bf58:	20612072 	.word	0x20612072
    bf5c:	696c6176 	.word	0x696c6176
    bf60:	69502064 	.word	0x69502064
    bf64:	754e206e 	.word	0x754e206e
    bf68:	7265626d 	.word	0x7265626d
    bf6c:	72542021 	.word	0x72542021
    bf70:	68222079 	.word	0x68222079
    bf74:	22706c65 	.word	0x22706c65
    bf78:	00000d2e 	.word	0x00000d2e
    bf7c:	61766e49 	.word	0x61766e49
    bf80:	2064696c 	.word	0x2064696c
    bf84:	6d6d6f63 	.word	0x6d6d6f63
    bf88:	21646e61 	.word	0x21646e61
    bf8c:	70795420 	.word	0x70795420
    bf90:	68222065 	.word	0x68222065
    bf94:	22706c65 	.word	0x22706c65
    bf98:	726f6620 	.word	0x726f6620
    bf9c:	6c206120 	.word	0x6c206120
    bfa0:	20747369 	.word	0x20747369
    bfa4:	6120666f 	.word	0x6120666f
    bfa8:	6c696176 	.word	0x6c696176
    bfac:	656c6261 	.word	0x656c6261
    bfb0:	6d6f6320 	.word	0x6d6f6320
    bfb4:	646e616d 	.word	0x646e616d
    bfb8:	000d2e73 	.word	0x000d2e73
    bfbc:	6d6d6f43 	.word	0x6d6d6f43
    bfc0:	20646e61 	.word	0x20646e61
    bfc4:	7473694c 	.word	0x7473694c
    bfc8:	00000d3a 	.word	0x00000d3a
    bfcc:	20732509 	.word	0x20732509
    bfd0:	0a0d7325 	.word	0x0a0d7325
    bfd4:	73250909 	.word	0x73250909
    bfd8:	00000a0d 	.word	0x00000a0d
    bfdc:	2e312e30 	.word	0x2e312e30
    bfe0:	00000030 	.word	0x00000030
    bfe4:	746f6f42 	.word	0x746f6f42
    bfe8:	64616f6c 	.word	0x64616f6c
    bfec:	56207265 	.word	0x56207265
    bff0:	69737265 	.word	0x69737265
    bff4:	203a6e6f 	.word	0x203a6e6f
    bff8:	0a0d7325 	.word	0x0a0d7325
    bffc:	00000000 	.word	0x00000000
    c000:	6c707041 	.word	0x6c707041
    c004:	74616369 	.word	0x74616369
    c008:	206e6f69 	.word	0x206e6f69
    c00c:	73726556 	.word	0x73726556
    c010:	3a6e6f69 	.word	0x3a6e6f69
    c014:	0d732520 	.word	0x0d732520
    c018:	0000000a 	.word	0x0000000a
    c01c:	20656854 	.word	0x20656854
    c020:	6576656c 	.word	0x6576656c
    c024:	6573206c 	.word	0x6573206c
    c028:	73692074 	.word	0x73692074
    c02c:	0d642520 	.word	0x0d642520
    c030:	0000000a 	.word	0x0000000a
    c034:	323a3130 	.word	0x323a3130
    c038:	35343a33 	.word	0x35343a33
    c03c:	3a37363a 	.word	0x3a37363a
    c040:	613a3938 	.word	0x613a3938
    c044:	00000062 	.word	0x00000062
    c048:	2043414d 	.word	0x2043414d
    c04c:	72646441 	.word	0x72646441
    c050:	3a737365 	.word	0x3a737365
    c054:	0d732520 	.word	0x0d732520
    c058:	0000000a 	.word	0x0000000a
    c05c:	2e353532 	.word	0x2e353532
    c060:	2e353532 	.word	0x2e353532
    c064:	2e353532 	.word	0x2e353532
    c068:	00353532 	.word	0x00353532
    c06c:	41205049 	.word	0x41205049
    c070:	65726464 	.word	0x65726464
    c074:	203a7373 	.word	0x203a7373
    c078:	0a0d7325 	.word	0x0a0d7325
    c07c:	00000000 	.word	0x00000000
    c080:	523d3d3d 	.word	0x523d3d3d
    c084:	69646165 	.word	0x69646165
    c088:	2520676e 	.word	0x2520676e
    c08c:	3d3d3d64 	.word	0x3d3d3d64
    c090:	00000a0d 	.word	0x00000a0d
    c094:	3d207841 	.word	0x3d207841
    c098:	0d642520 	.word	0x0d642520
    c09c:	2079410a 	.word	0x2079410a
    c0a0:	6425203d 	.word	0x6425203d
    c0a4:	7a410a0d 	.word	0x7a410a0d
    c0a8:	25203d20 	.word	0x25203d20
    c0ac:	470a0d64 	.word	0x470a0d64
    c0b0:	203d2078 	.word	0x203d2078
    c0b4:	0a0d6425 	.word	0x0a0d6425
    c0b8:	3d207947 	.word	0x3d207947
    c0bc:	0d642520 	.word	0x0d642520
    c0c0:	207a470a 	.word	0x207a470a
    c0c4:	6425203d 	.word	0x6425203d
    c0c8:	00000a0d 	.word	0x00000a0d
    c0cc:	20657355 	.word	0x20657355
    c0d0:	64616572 	.word	0x64616572
    c0d4:	7279675f 	.word	0x7279675f
    c0d8:	000d216f 	.word	0x000d216f
    c0dc:	20434441 	.word	0x20434441
    c0e0:	75736552 	.word	0x75736552
    c0e4:	203a746c 	.word	0x203a746c
    c0e8:	0a0d6425 	.word	0x0a0d6425
    c0ec:	00000000 	.word	0x00000000
    c0f0:	706d6554 	.word	0x706d6554
    c0f4:	74617265 	.word	0x74617265
    c0f8:	20657275 	.word	0x20657275
    c0fc:	75736552 	.word	0x75736552
    c100:	203a746c 	.word	0x203a746c
    c104:	0d206425 	.word	0x0d206425
    c108:	0000000a 	.word	0x0000000a
    c10c:	20656854 	.word	0x20656854
    c110:	76616c73 	.word	0x76616c73
    c114:	64612065 	.word	0x64612065
    c118:	73657264 	.word	0x73657264
    c11c:	73692073 	.word	0x73692073
    c120:	322e2520 	.word	0x322e2520
    c124:	0a0d2078 	.word	0x0a0d2078
    c128:	00000000 	.word	0x00000000
    c12c:	42000800 	.word	0x42000800
    c130:	42000c00 	.word	0x42000c00
    c134:	42001000 	.word	0x42001000
    c138:	42001400 	.word	0x42001400
    c13c:	42001800 	.word	0x42001800
    c140:	42001c00 	.word	0x42001c00
    c144:	0c0b0a09 	.word	0x0c0b0a09
    c148:	00000e0d 	.word	0x00000e0d
    c14c:	0000664a 	.word	0x0000664a
    c150:	000066c2 	.word	0x000066c2
    c154:	000066c2 	.word	0x000066c2
    c158:	00006668 	.word	0x00006668
    c15c:	00006662 	.word	0x00006662
    c160:	0000666e 	.word	0x0000666e
    c164:	00006650 	.word	0x00006650
    c168:	00006674 	.word	0x00006674
    c16c:	000066a8 	.word	0x000066a8
    c170:	0000698c 	.word	0x0000698c
    c174:	000069dc 	.word	0x000069dc
    c178:	000069dc 	.word	0x000069dc
    c17c:	000069d8 	.word	0x000069d8
    c180:	0000697e 	.word	0x0000697e
    c184:	0000699e 	.word	0x0000699e
    c188:	0000696e 	.word	0x0000696e
    c18c:	000069b0 	.word	0x000069b0
    c190:	000069c2 	.word	0x000069c2
    c194:	00006a2a 	.word	0x00006a2a
    c198:	00006a58 	.word	0x00006a58
    c19c:	00006a58 	.word	0x00006a58
    c1a0:	00006a54 	.word	0x00006a54
    c1a4:	00006a24 	.word	0x00006a24
    c1a8:	00006a30 	.word	0x00006a30
    c1ac:	00006a1e 	.word	0x00006a1e
    c1b0:	00006a36 	.word	0x00006a36
    c1b4:	00006a3c 	.word	0x00006a3c
    c1b8:	57202d2d 	.word	0x57202d2d
    c1bc:	31434e49 	.word	0x31434e49
    c1c0:	20303035 	.word	0x20303035
    c1c4:	70696863 	.word	0x70696863
    c1c8:	666e6920 	.word	0x666e6920
    c1cc:	616d726f 	.word	0x616d726f
    c1d0:	6e6f6974 	.word	0x6e6f6974
    c1d4:	61786520 	.word	0x61786520
    c1d8:	656c706d 	.word	0x656c706d
    c1dc:	0d2d2d20 	.word	0x0d2d2d20
    c1e0:	202d2d0a 	.word	0x202d2d0a
    c1e4:	574d4153 	.word	0x574d4153
    c1e8:	585f3532 	.word	0x585f3532
    c1ec:	49414c50 	.word	0x49414c50
    c1f0:	5f44454e 	.word	0x5f44454e
    c1f4:	204f5250 	.word	0x204f5250
    c1f8:	0a0d2d2d 	.word	0x0a0d2d2d
    c1fc:	43202d2d 	.word	0x43202d2d
    c200:	69706d6f 	.word	0x69706d6f
    c204:	3a64656c 	.word	0x3a64656c
    c208:	72614d20 	.word	0x72614d20
    c20c:	20373120 	.word	0x20373120
    c210:	38313032 	.word	0x38313032
    c214:	3a363120 	.word	0x3a363120
    c218:	313a3933 	.word	0x313a3933
    c21c:	2d2d2038 	.word	0x2d2d2038
    c220:	0000000d 	.word	0x0000000d
    c224:	203d3d3d 	.word	0x203d3d3d
    c228:	6e6f7244 	.word	0x6e6f7244
    c22c:	44414465 	.word	0x44414465
    c230:	494c4320 	.word	0x494c4320
    c234:	746e4920 	.word	0x746e4920
    c238:	61667265 	.word	0x61667265
    c23c:	3d206563 	.word	0x3d206563
    c240:	000d3d3d 	.word	0x000d3d3d
    c244:	0000203e 	.word	0x0000203e
    c248:	0d5e5b25 	.word	0x0d5e5b25
    c24c:	2a255d0a 	.word	0x2a255d0a
    c250:	00000063 	.word	0x00000063
    c254:	00008b5c 	.word	0x00008b5c
    c258:	00008b3e 	.word	0x00008b3e
    c25c:	00008af8 	.word	0x00008af8
    c260:	00008a16 	.word	0x00008a16
    c264:	00008af8 	.word	0x00008af8
    c268:	00008b30 	.word	0x00008b30
    c26c:	00008af8 	.word	0x00008af8
    c270:	00008a16 	.word	0x00008a16
    c274:	00008b3e 	.word	0x00008b3e
    c278:	00008b3e 	.word	0x00008b3e
    c27c:	00008b30 	.word	0x00008b30
    c280:	00008a16 	.word	0x00008a16
    c284:	00008a0e 	.word	0x00008a0e
    c288:	00008a0e 	.word	0x00008a0e
    c28c:	00008a0e 	.word	0x00008a0e
    c290:	00008d74 	.word	0x00008d74
    c294:	000091bc 	.word	0x000091bc
    c298:	0000907c 	.word	0x0000907c
    c29c:	0000907c 	.word	0x0000907c
    c2a0:	00009078 	.word	0x00009078
    c2a4:	00009194 	.word	0x00009194
    c2a8:	00009194 	.word	0x00009194
    c2ac:	00009186 	.word	0x00009186
    c2b0:	00009078 	.word	0x00009078
    c2b4:	00009194 	.word	0x00009194
    c2b8:	00009186 	.word	0x00009186
    c2bc:	00009194 	.word	0x00009194
    c2c0:	00009078 	.word	0x00009078
    c2c4:	0000919c 	.word	0x0000919c
    c2c8:	0000919c 	.word	0x0000919c
    c2cc:	0000919c 	.word	0x0000919c
    c2d0:	000093a0 	.word	0x000093a0

0000c2d4 <_global_impure_ptr>:
    c2d4:	20000078                                x.. 

0000c2d8 <__sf_fake_stderr>:
	...

0000c2f8 <__sf_fake_stdin>:
	...

0000c318 <__sf_fake_stdout>:
	...
    c338:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    c348:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    c358:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    c368:	37363534 62613938 66656463 00000000     456789abcdef....
    c378:	0000c396 0000c399 0000c39c 61462d41     ............A-Fa
    c388:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    c398:	00303000 00005878                                .00.xX.

0000c39f <_ctype_>:
    c39f:	20202000 20202020 28282020 20282828     .         ((((( 
    c3af:	20202020 20202020 20202020 20202020                     
    c3bf:	10108820 10101010 10101010 10101010      ...............
    c3cf:	04040410 04040404 10040404 10101010     ................
    c3df:	41411010 41414141 01010101 01010101     ..AAAAAA........
    c3ef:	01010101 01010101 01010101 10101010     ................
    c3ff:	42421010 42424242 02020202 02020202     ..BBBBBB........
    c40f:	02020202 02020202 02020202 10101010     ................
    c41f:	00000020 00000000 00000000 00000000      ...............
	...

0000c4a0 <_init>:
    c4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4a2:	46c0      	nop			; (mov r8, r8)
    c4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c4a6:	bc08      	pop	{r3}
    c4a8:	469e      	mov	lr, r3
    c4aa:	4770      	bx	lr

0000c4ac <__init_array_start>:
    c4ac:	000000dd 	.word	0x000000dd

0000c4b0 <_fini>:
    c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4b2:	46c0      	nop			; (mov r8, r8)
    c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c4b6:	bc08      	pop	{r3}
    c4b8:	469e      	mov	lr, r3
    c4ba:	4770      	bx	lr

0000c4bc <__fini_array_start>:
    c4bc:	000000b5 	.word	0x000000b5
