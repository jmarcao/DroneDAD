
DroneDADProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008088  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  00008088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  20000210  00008298  00020210  2**2
                  ALLOC
  3 .stack        00002000  20000428  000084b0  00020210  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  6 .debug_info   00040f29  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000598e  00000000  00000000  000611ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000809a  00000000  00000000  00066b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007c0  00000000  00000000  0006ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000938  00000000  00000000  0006f3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dc19  00000000  00000000  0006fcda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012d2e  00000000  00000000  0008d8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e9ea  00000000  00000000  000a0621  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022e4  00000000  00000000  0012f00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 24 00 20 4d 2b 00 00 49 2b 00 00 49 2b 00 00     ($. M+..I+..I+..
	...
      2c:	49 2b 00 00 00 00 00 00 00 00 00 00 49 2b 00 00     I+..........I+..
      3c:	49 2b 00 00 49 2b 00 00 49 2b 00 00 49 2b 00 00     I+..I+..I+..I+..
      4c:	49 2b 00 00 f9 18 00 00 49 2b 00 00 49 2b 00 00     I+......I+..I+..
      5c:	49 2b 00 00 49 2b 00 00 d9 1d 00 00 e9 1d 00 00     I+..I+..........
      6c:	f9 1d 00 00 09 1e 00 00 19 1e 00 00 29 1e 00 00     ............)...
      7c:	49 2b 00 00 49 2b 00 00 49 2b 00 00 49 2b 00 00     I+..I+..I+..I+..
      8c:	49 2b 00 00 49 2b 00 00 00 00 00 00 00 00 00 00     I+..I+..........
      9c:	75 08 00 00 49 2b 00 00 49 2b 00 00 49 2b 00 00     u...I+..I+..I+..
      ac:	49 2b 00 00 00 00 00 00                             I+......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000210 	.word	0x20000210
      d4:	00000000 	.word	0x00000000
      d8:	00008088 	.word	0x00008088

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000214 	.word	0x20000214
     108:	00008088 	.word	0x00008088
     10c:	00008088 	.word	0x00008088
     110:	00000000 	.word	0x00000000

00000114 <configure_adc_temp>:
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/

void configure_adc_temp(void)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     118:	4668      	mov	r0, sp
     11a:	4b18      	ldr	r3, [pc, #96]	; (17c <configure_adc_temp+0x68>)
     11c:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     11e:	2301      	movs	r3, #1
     120:	466a      	mov	r2, sp
     122:	7013      	strb	r3, [r2, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     124:	2380      	movs	r3, #128	; 0x80
     126:	009b      	lsls	r3, r3, #2
     128:	8053      	strh	r3, [r2, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
     12a:	2300      	movs	r3, #0
     12c:	7053      	strb	r3, [r2, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
     12e:	3318      	adds	r3, #24
     130:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     132:	23c0      	movs	r3, #192	; 0xc0
     134:	015b      	lsls	r3, r3, #5
     136:	81d3      	strh	r3, [r2, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
     138:	2304      	movs	r3, #4
     13a:	75d3      	strb	r3, [r2, #23]
	
	adc_init(&adc_inst, ADC, &conf_adc);
     13c:	4d10      	ldr	r5, [pc, #64]	; (180 <configure_adc_temp+0x6c>)
     13e:	4c11      	ldr	r4, [pc, #68]	; (184 <configure_adc_temp+0x70>)
     140:	0029      	movs	r1, r5
     142:	0020      	movs	r0, r4
     144:	4b10      	ldr	r3, [pc, #64]	; (188 <configure_adc_temp+0x74>)
     146:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
     148:	2322      	movs	r3, #34	; 0x22
     14a:	70ab      	strb	r3, [r5, #2]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14c:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     150:	b25b      	sxtb	r3, r3
     152:	2b00      	cmp	r3, #0
     154:	dbfb      	blt.n	14e <configure_adc_temp+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     156:	2180      	movs	r1, #128	; 0x80
     158:	0409      	lsls	r1, r1, #16
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <configure_adc_temp+0x78>)
     15c:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     15e:	230f      	movs	r3, #15
     160:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     162:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     164:	7813      	ldrb	r3, [r2, #0]
     166:	2102      	movs	r1, #2
     168:	430b      	orrs	r3, r1
     16a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     16c:	4b05      	ldr	r3, [pc, #20]	; (184 <configure_adc_temp+0x70>)
     16e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     170:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     172:	b25b      	sxtb	r3, r3
     174:	2b00      	cmp	r3, #0
     176:	dbfb      	blt.n	170 <configure_adc_temp+0x5c>
	
	adc_enable(&adc_inst);
}
     178:	b00d      	add	sp, #52	; 0x34
     17a:	bd30      	pop	{r4, r5, pc}
     17c:	00000405 	.word	0x00000405
     180:	42004000 	.word	0x42004000
     184:	20000404 	.word	0x20000404
     188:	0000044d 	.word	0x0000044d
     18c:	e000e100 	.word	0xe000e100

00000190 <convert_dec_to_frac>:
* \brief Decimal to Fraction Conversation.
* This function converts the decimal value into fractional 
* and return the fractional value for temperature calculation
*/
float convert_dec_to_frac(uint8_t val)
{
     190:	b510      	push	{r4, lr}
	if (val < 10)
     192:	2809      	cmp	r0, #9
     194:	d907      	bls.n	1a6 <convert_dec_to_frac+0x16>
	{
		return ((float)val/10.0);
	}
	
	else if (val <100)
     196:	2863      	cmp	r0, #99	; 0x63
     198:	d90b      	bls.n	1b2 <convert_dec_to_frac+0x22>
		return ((float)val/100.0);
	}
	
	else
	{
		return ((float)val/1000.0);
     19a:	4b09      	ldr	r3, [pc, #36]	; (1c0 <convert_dec_to_frac+0x30>)
     19c:	4798      	blx	r3
     19e:	4909      	ldr	r1, [pc, #36]	; (1c4 <convert_dec_to_frac+0x34>)
     1a0:	4b09      	ldr	r3, [pc, #36]	; (1c8 <convert_dec_to_frac+0x38>)
     1a2:	4798      	blx	r3
     1a4:	e004      	b.n	1b0 <convert_dec_to_frac+0x20>
		return ((float)val/10.0);
     1a6:	4b06      	ldr	r3, [pc, #24]	; (1c0 <convert_dec_to_frac+0x30>)
     1a8:	4798      	blx	r3
     1aa:	4908      	ldr	r1, [pc, #32]	; (1cc <convert_dec_to_frac+0x3c>)
     1ac:	4b06      	ldr	r3, [pc, #24]	; (1c8 <convert_dec_to_frac+0x38>)
     1ae:	4798      	blx	r3
	}
}
     1b0:	bd10      	pop	{r4, pc}
		return ((float)val/100.0);
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <convert_dec_to_frac+0x30>)
     1b4:	4798      	blx	r3
     1b6:	4906      	ldr	r1, [pc, #24]	; (1d0 <convert_dec_to_frac+0x40>)
     1b8:	4b03      	ldr	r3, [pc, #12]	; (1c8 <convert_dec_to_frac+0x38>)
     1ba:	4798      	blx	r3
     1bc:	e7f8      	b.n	1b0 <convert_dec_to_frac+0x20>
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00003cfd 	.word	0x00003cfd
     1c4:	447a0000 	.word	0x447a0000
     1c8:	00003455 	.word	0x00003455
     1cc:	41200000 	.word	0x41200000
     1d0:	42c80000 	.word	0x42c80000

000001d4 <load_calibration_data>:
* This function extract the production calibration data information from
* Temperature log row content and store it variables for temperature calculation
*
*/
void load_calibration_data(void)
{
     1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d6:	46de      	mov	lr, fp
     1d8:	4657      	mov	r7, sl
     1da:	464e      	mov	r6, r9
     1dc:	4645      	mov	r5, r8
     1de:	b5e0      	push	{r5, r6, r7, lr}
     1e0:	b087      	sub	sp, #28
	int8_t room_int1v_val;				/* internal 1V reference drift at room temperature */
	int8_t hot_int1v_val;				/* internal 1V reference drift at hot temperature*/
	
	uint32_t *temp_log_row_ptr = (uint32_t *)NVMCTRL_TEMP_LOG;
	
	val1 = *temp_log_row_ptr;
     1e2:	4b3e      	ldr	r3, [pc, #248]	; (2dc <load_calibration_data+0x108>)
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	9305      	str	r3, [sp, #20]
	temp_log_row_ptr++;
	val2 = *temp_log_row_ptr;
     1e8:	4b3d      	ldr	r3, [pc, #244]	; (2e0 <load_calibration_data+0x10c>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	9304      	str	r3, [sp, #16]
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
     1ee:	9e05      	ldr	r6, [sp, #20]
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
     1f0:	9805      	ldr	r0, [sp, #20]
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
     1f2:	9b05      	ldr	r3, [sp, #20]
     1f4:	9300      	str	r3, [sp, #0]
	
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
     1f6:	9a05      	ldr	r2, [sp, #20]
     1f8:	4691      	mov	r9, r2
	
	room_int1v_val = (int8_t)((val1 & NVMCTRL_FUSES_ROOM_INT1V_VAL_Msk) >> NVMCTRL_FUSES_ROOM_INT1V_VAL_Pos);
     1fa:	9a05      	ldr	r2, [sp, #20]
     1fc:	9201      	str	r2, [sp, #4]
	
	hot_int1v_val = (int8_t)((val2 & NVMCTRL_FUSES_HOT_INT1V_VAL_Msk) >> NVMCTRL_FUSES_HOT_INT1V_VAL_Pos);
     1fe:	9904      	ldr	r1, [sp, #16]
     200:	9102      	str	r1, [sp, #8]
	
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
     202:	9c04      	ldr	r4, [sp, #16]
     204:	0324      	lsls	r4, r4, #12
     206:	0d24      	lsrs	r4, r4, #20
     208:	4b36      	ldr	r3, [pc, #216]	; (2e4 <load_calibration_data+0x110>)
     20a:	801c      	strh	r4, [r3, #0]
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
     20c:	9d04      	ldr	r5, [sp, #16]
     20e:	0d2d      	lsrs	r5, r5, #20
     210:	4b35      	ldr	r3, [pc, #212]	; (2e8 <load_calibration_data+0x114>)
     212:	801d      	strh	r5, [r3, #0]
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
     214:	0a00      	lsrs	r0, r0, #8
     216:	270f      	movs	r7, #15
     218:	46b8      	mov	r8, r7
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
     21a:	4038      	ands	r0, r7
     21c:	4f33      	ldr	r7, [pc, #204]	; (2ec <load_calibration_data+0x118>)
     21e:	46bb      	mov	fp, r7
     220:	47b8      	blx	r7
     222:	9003      	str	r0, [sp, #12]
     224:	27ff      	movs	r7, #255	; 0xff
     226:	403e      	ands	r6, r7
     228:	0030      	movs	r0, r6
     22a:	4e31      	ldr	r6, [pc, #196]	; (2f0 <load_calibration_data+0x11c>)
     22c:	47b0      	blx	r6
     22e:	4b31      	ldr	r3, [pc, #196]	; (2f4 <load_calibration_data+0x120>)
     230:	469a      	mov	sl, r3
     232:	9903      	ldr	r1, [sp, #12]
     234:	4798      	blx	r3
     236:	4b30      	ldr	r3, [pc, #192]	; (2f8 <load_calibration_data+0x124>)
     238:	6018      	str	r0, [r3, #0]
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
     23a:	4648      	mov	r0, r9
     23c:	0d00      	lsrs	r0, r0, #20
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
     23e:	4641      	mov	r1, r8
     240:	4008      	ands	r0, r1
     242:	47d8      	blx	fp
     244:	9003      	str	r0, [sp, #12]
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
     246:	9b00      	ldr	r3, [sp, #0]
     248:	0b18      	lsrs	r0, r3, #12
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
     24a:	4038      	ands	r0, r7
     24c:	47b0      	blx	r6
     24e:	9903      	ldr	r1, [sp, #12]
     250:	47d0      	blx	sl
     252:	4b2a      	ldr	r3, [pc, #168]	; (2fc <load_calibration_data+0x128>)
     254:	6018      	str	r0, [r3, #0]
	
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
     256:	9a01      	ldr	r2, [sp, #4]
     258:	1610      	asrs	r0, r2, #24
     25a:	47b0      	blx	r6
     25c:	4b28      	ldr	r3, [pc, #160]	; (300 <load_calibration_data+0x12c>)
     25e:	469b      	mov	fp, r3
     260:	4798      	blx	r3
     262:	4b28      	ldr	r3, [pc, #160]	; (304 <load_calibration_data+0x130>)
     264:	469a      	mov	sl, r3
     266:	2200      	movs	r2, #0
     268:	4b27      	ldr	r3, [pc, #156]	; (308 <load_calibration_data+0x134>)
     26a:	47d0      	blx	sl
     26c:	0002      	movs	r2, r0
     26e:	000b      	movs	r3, r1
     270:	4826      	ldr	r0, [pc, #152]	; (30c <load_calibration_data+0x138>)
     272:	4681      	mov	r9, r0
     274:	2000      	movs	r0, #0
     276:	4926      	ldr	r1, [pc, #152]	; (310 <load_calibration_data+0x13c>)
     278:	47c8      	blx	r9
     27a:	4f26      	ldr	r7, [pc, #152]	; (314 <load_calibration_data+0x140>)
     27c:	47b8      	blx	r7
     27e:	4b26      	ldr	r3, [pc, #152]	; (318 <load_calibration_data+0x144>)
     280:	9000      	str	r0, [sp, #0]
     282:	6018      	str	r0, [r3, #0]
	
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
     284:	466b      	mov	r3, sp
     286:	2008      	movs	r0, #8
     288:	5618      	ldrsb	r0, [r3, r0]
     28a:	47b0      	blx	r6
     28c:	47d8      	blx	fp
     28e:	2200      	movs	r2, #0
     290:	4b1d      	ldr	r3, [pc, #116]	; (308 <load_calibration_data+0x134>)
     292:	47d0      	blx	sl
     294:	0002      	movs	r2, r0
     296:	000b      	movs	r3, r1
     298:	2000      	movs	r0, #0
     29a:	491d      	ldr	r1, [pc, #116]	; (310 <load_calibration_data+0x13c>)
     29c:	47c8      	blx	r9
     29e:	47b8      	blx	r7
     2a0:	4b1e      	ldr	r3, [pc, #120]	; (31c <load_calibration_data+0x148>)
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	6018      	str	r0, [r3, #0]
	
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
     2a6:	4f1e      	ldr	r7, [pc, #120]	; (320 <load_calibration_data+0x14c>)
     2a8:	0020      	movs	r0, r4
     2aa:	47b8      	blx	r7
     2ac:	4e1d      	ldr	r6, [pc, #116]	; (324 <load_calibration_data+0x150>)
     2ae:	9900      	ldr	r1, [sp, #0]
     2b0:	47b0      	blx	r6
     2b2:	4c1d      	ldr	r4, [pc, #116]	; (328 <load_calibration_data+0x154>)
     2b4:	491d      	ldr	r1, [pc, #116]	; (32c <load_calibration_data+0x158>)
     2b6:	47a0      	blx	r4
     2b8:	4b1d      	ldr	r3, [pc, #116]	; (330 <load_calibration_data+0x15c>)
     2ba:	6018      	str	r0, [r3, #0]
	
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
     2bc:	0028      	movs	r0, r5
     2be:	47b8      	blx	r7
     2c0:	9901      	ldr	r1, [sp, #4]
     2c2:	47b0      	blx	r6
     2c4:	4919      	ldr	r1, [pc, #100]	; (32c <load_calibration_data+0x158>)
     2c6:	47a0      	blx	r4
     2c8:	4b1a      	ldr	r3, [pc, #104]	; (334 <load_calibration_data+0x160>)
     2ca:	6018      	str	r0, [r3, #0]
}
     2cc:	b007      	add	sp, #28
     2ce:	bc3c      	pop	{r2, r3, r4, r5}
     2d0:	4690      	mov	r8, r2
     2d2:	4699      	mov	r9, r3
     2d4:	46a2      	mov	sl, r4
     2d6:	46ab      	mov	fp, r5
     2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	00806030 	.word	0x00806030
     2e0:	00806034 	.word	0x00806034
     2e4:	200002c0 	.word	0x200002c0
     2e8:	200002b4 	.word	0x200002b4
     2ec:	00000191 	.word	0x00000191
     2f0:	00003c5d 	.word	0x00003c5d
     2f4:	00003131 	.word	0x00003131
     2f8:	200002c8 	.word	0x200002c8
     2fc:	200002d0 	.word	0x200002d0
     300:	00005615 	.word	0x00005615
     304:	000043a9 	.word	0x000043a9
     308:	408f4000 	.word	0x408f4000
     30c:	00004f11 	.word	0x00004f11
     310:	3ff00000 	.word	0x3ff00000
     314:	000056b9 	.word	0x000056b9
     318:	200002bc 	.word	0x200002bc
     31c:	200002b0 	.word	0x200002b0
     320:	00003cfd 	.word	0x00003cfd
     324:	000036e5 	.word	0x000036e5
     328:	00003455 	.word	0x00003455
     32c:	457ff000 	.word	0x457ff000
     330:	200002ac 	.word	0x200002ac
     334:	200002cc 	.word	0x200002cc

00000338 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
float calculate_temperature(uint16_t raw_code)
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	b089      	sub	sp, #36	; 0x24
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
     33c:	4b23      	ldr	r3, [pc, #140]	; (3cc <calculate_temperature+0x94>)
     33e:	4798      	blx	r3
     340:	1c07      	adds	r7, r0, #0
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
     342:	4b23      	ldr	r3, [pc, #140]	; (3d0 <calculate_temperature+0x98>)
     344:	681b      	ldr	r3, [r3, #0]
     346:	4d23      	ldr	r5, [pc, #140]	; (3d4 <calculate_temperature+0x9c>)
     348:	9300      	str	r3, [sp, #0]
     34a:	1c19      	adds	r1, r3, #0
     34c:	4b22      	ldr	r3, [pc, #136]	; (3d8 <calculate_temperature+0xa0>)
     34e:	6818      	ldr	r0, [r3, #0]
     350:	47a8      	blx	r5
     352:	9001      	str	r0, [sp, #4]
     354:	4b21      	ldr	r3, [pc, #132]	; (3dc <calculate_temperature+0xa4>)
     356:	681a      	ldr	r2, [r3, #0]
     358:	1c16      	adds	r6, r2, #0
     35a:	1c11      	adds	r1, r2, #0
     35c:	4b20      	ldr	r3, [pc, #128]	; (3e0 <calculate_temperature+0xa8>)
     35e:	6818      	ldr	r0, [r3, #0]
     360:	47a8      	blx	r5
     362:	1c01      	adds	r1, r0, #0
     364:	4c1f      	ldr	r4, [pc, #124]	; (3e4 <calculate_temperature+0xac>)
     366:	9801      	ldr	r0, [sp, #4]
     368:	47a0      	blx	r4
     36a:	9002      	str	r0, [sp, #8]
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
     36c:	491e      	ldr	r1, [pc, #120]	; (3e8 <calculate_temperature+0xb0>)
     36e:	9703      	str	r7, [sp, #12]
     370:	1c38      	adds	r0, r7, #0
     372:	47a0      	blx	r4
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
     374:	9604      	str	r6, [sp, #16]
     376:	1c31      	adds	r1, r6, #0
     378:	47a8      	blx	r5
     37a:	4f1c      	ldr	r7, [pc, #112]	; (3ec <calculate_temperature+0xb4>)
     37c:	9902      	ldr	r1, [sp, #8]
     37e:	47b8      	blx	r7
     380:	4e1b      	ldr	r6, [pc, #108]	; (3f0 <calculate_temperature+0xb8>)
     382:	9900      	ldr	r1, [sp, #0]
     384:	47b0      	blx	r6
     386:	4b1b      	ldr	r3, [pc, #108]	; (3f4 <calculate_temperature+0xbc>)
     388:	9006      	str	r0, [sp, #24]
     38a:	6018      	str	r0, [r3, #0]
	
	/* Calculation to find the real INT1V value during the ADC conversion */
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
     38c:	4b1a      	ldr	r3, [pc, #104]	; (3f8 <calculate_temperature+0xc0>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	9305      	str	r3, [sp, #20]
     392:	1c19      	adds	r1, r3, #0
     394:	4b19      	ldr	r3, [pc, #100]	; (3fc <calculate_temperature+0xc4>)
     396:	6818      	ldr	r0, [r3, #0]
     398:	47a8      	blx	r5
     39a:	9007      	str	r0, [sp, #28]
     39c:	9900      	ldr	r1, [sp, #0]
     39e:	9806      	ldr	r0, [sp, #24]
     3a0:	47a8      	blx	r5
     3a2:	1c01      	adds	r1, r0, #0
     3a4:	9807      	ldr	r0, [sp, #28]
     3a6:	47b8      	blx	r7
     3a8:	9901      	ldr	r1, [sp, #4]
     3aa:	47a0      	blx	r4
     3ac:	9905      	ldr	r1, [sp, #20]
     3ae:	47b0      	blx	r6
	
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
     3b0:	9903      	ldr	r1, [sp, #12]
     3b2:	47b8      	blx	r7
     3b4:	490c      	ldr	r1, [pc, #48]	; (3e8 <calculate_temperature+0xb0>)
     3b6:	47a0      	blx	r4
	
	/* Fine Temp Calculation by replace INT1V=1V by INT1V = INT1Vm for ADC conversion */
	fine_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR));
     3b8:	9904      	ldr	r1, [sp, #16]
     3ba:	47a8      	blx	r5
     3bc:	9902      	ldr	r1, [sp, #8]
     3be:	47b8      	blx	r7
     3c0:	9900      	ldr	r1, [sp, #0]
     3c2:	47b0      	blx	r6
     3c4:	4b0e      	ldr	r3, [pc, #56]	; (400 <calculate_temperature+0xc8>)
     3c6:	6018      	str	r0, [r3, #0]
	
	return fine_temp;
}
     3c8:	b009      	add	sp, #36	; 0x24
     3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3cc:	00003cfd 	.word	0x00003cfd
     3d0:	200002c8 	.word	0x200002c8
     3d4:	00003925 	.word	0x00003925
     3d8:	200002d0 	.word	0x200002d0
     3dc:	200002ac 	.word	0x200002ac
     3e0:	200002cc 	.word	0x200002cc
     3e4:	00003455 	.word	0x00003455
     3e8:	457ff000 	.word	0x457ff000
     3ec:	000036e5 	.word	0x000036e5
     3f0:	00003131 	.word	0x00003131
     3f4:	200002b8 	.word	0x200002b8
     3f8:	200002bc 	.word	0x200002bc
     3fc:	200002b0 	.word	0x200002b0
     400:	200002c4 	.word	0x200002c4

00000404 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     404:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     406:	2200      	movs	r2, #0
     408:	2300      	movs	r3, #0
     40a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     40c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     40e:	2100      	movs	r1, #0
     410:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     412:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     414:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     416:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     418:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     41a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     41c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     41e:	24c0      	movs	r4, #192	; 0xc0
     420:	0164      	lsls	r4, r4, #5
     422:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     424:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     426:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     428:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     42a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     42c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     42e:	242a      	movs	r4, #42	; 0x2a
     430:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     432:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     434:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     436:	3c06      	subs	r4, #6
     438:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     43a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     43c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     43e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     440:	232b      	movs	r3, #43	; 0x2b
     442:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     444:	3301      	adds	r3, #1
     446:	54c1      	strb	r1, [r0, r3]
}
     448:	bd10      	pop	{r4, pc}
	...

0000044c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     44c:	b5f0      	push	{r4, r5, r6, r7, lr}
     44e:	46d6      	mov	lr, sl
     450:	464f      	mov	r7, r9
     452:	4646      	mov	r6, r8
     454:	b5c0      	push	{r6, r7, lr}
     456:	b096      	sub	sp, #88	; 0x58
     458:	0007      	movs	r7, r0
     45a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     45c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     45e:	4ac6      	ldr	r2, [pc, #792]	; (778 <adc_init+0x32c>)
     460:	6a10      	ldr	r0, [r2, #32]
     462:	2380      	movs	r3, #128	; 0x80
     464:	025b      	lsls	r3, r3, #9
     466:	4303      	orrs	r3, r0
     468:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     46a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     46c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     46e:	07db      	lsls	r3, r3, #31
     470:	d505      	bpl.n	47e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     472:	b016      	add	sp, #88	; 0x58
     474:	bc1c      	pop	{r2, r3, r4}
     476:	4690      	mov	r8, r2
     478:	4699      	mov	r9, r3
     47a:	46a2      	mov	sl, r4
     47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     47e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     480:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     482:	079b      	lsls	r3, r3, #30
     484:	d4f5      	bmi.n	472 <adc_init+0x26>
	module_inst->reference = config->reference;
     486:	7873      	ldrb	r3, [r6, #1]
     488:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     48a:	2b00      	cmp	r3, #0
     48c:	d104      	bne.n	498 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     48e:	4abb      	ldr	r2, [pc, #748]	; (77c <adc_init+0x330>)
     490:	6c13      	ldr	r3, [r2, #64]	; 0x40
     492:	2104      	movs	r1, #4
     494:	430b      	orrs	r3, r1
     496:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     498:	2300      	movs	r3, #0
     49a:	60bb      	str	r3, [r7, #8]
     49c:	60fb      	str	r3, [r7, #12]
     49e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     4a0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     4a2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     4a4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     4a6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     4a8:	4bb5      	ldr	r3, [pc, #724]	; (780 <adc_init+0x334>)
     4aa:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     4ac:	232a      	movs	r3, #42	; 0x2a
     4ae:	5cf3      	ldrb	r3, [r6, r3]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d105      	bne.n	4c0 <adc_init+0x74>
     4b4:	7d33      	ldrb	r3, [r6, #20]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d102      	bne.n	4c0 <adc_init+0x74>
		module_inst->software_trigger = true;
     4ba:	3301      	adds	r3, #1
     4bc:	777b      	strb	r3, [r7, #29]
     4be:	e001      	b.n	4c4 <adc_init+0x78>
		module_inst->software_trigger = false;
     4c0:	2300      	movs	r3, #0
     4c2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     4c4:	683b      	ldr	r3, [r7, #0]
     4c6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     4c8:	7833      	ldrb	r3, [r6, #0]
     4ca:	466a      	mov	r2, sp
     4cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     4ce:	4669      	mov	r1, sp
     4d0:	201e      	movs	r0, #30
     4d2:	4bac      	ldr	r3, [pc, #688]	; (784 <adc_init+0x338>)
     4d4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     4d6:	201e      	movs	r0, #30
     4d8:	4bab      	ldr	r3, [pc, #684]	; (788 <adc_init+0x33c>)
     4da:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     4dc:	232c      	movs	r3, #44	; 0x2c
     4de:	5cf2      	ldrb	r2, [r6, r3]
     4e0:	2a00      	cmp	r2, #0
     4e2:	d054      	beq.n	58e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     4e4:	3b01      	subs	r3, #1
     4e6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     4e8:	7b33      	ldrb	r3, [r6, #12]
     4ea:	18eb      	adds	r3, r5, r3
     4ec:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     4ee:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     4f0:	b2c9      	uxtb	r1, r1
     4f2:	428b      	cmp	r3, r1
     4f4:	d221      	bcs.n	53a <adc_init+0xee>
     4f6:	1952      	adds	r2, r2, r5
     4f8:	b2d3      	uxtb	r3, r2
     4fa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     4fc:	4ba3      	ldr	r3, [pc, #652]	; (78c <adc_init+0x340>)
     4fe:	469a      	mov	sl, r3
     500:	e003      	b.n	50a <adc_init+0xbe>
			offset++;
     502:	3501      	adds	r5, #1
     504:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     506:	454d      	cmp	r5, r9
     508:	d017      	beq.n	53a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     50a:	240f      	movs	r4, #15
     50c:	402c      	ands	r4, r5
     50e:	7b33      	ldrb	r3, [r6, #12]
     510:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     512:	2250      	movs	r2, #80	; 0x50
     514:	499e      	ldr	r1, [pc, #632]	; (790 <adc_init+0x344>)
     516:	a802      	add	r0, sp, #8
     518:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     51a:	2c13      	cmp	r4, #19
     51c:	d8f1      	bhi.n	502 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     51e:	00a4      	lsls	r4, r4, #2
     520:	ab02      	add	r3, sp, #8
     522:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     524:	a901      	add	r1, sp, #4
     526:	2300      	movs	r3, #0
     528:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     52a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     52c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     52e:	3301      	adds	r3, #1
     530:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     532:	b2c0      	uxtb	r0, r0
     534:	4b97      	ldr	r3, [pc, #604]	; (794 <adc_init+0x348>)
     536:	4798      	blx	r3
     538:	e7e3      	b.n	502 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     53a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     53c:	2250      	movs	r2, #80	; 0x50
     53e:	4994      	ldr	r1, [pc, #592]	; (790 <adc_init+0x344>)
     540:	a802      	add	r0, sp, #8
     542:	4b92      	ldr	r3, [pc, #584]	; (78c <adc_init+0x340>)
     544:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     546:	2c13      	cmp	r4, #19
     548:	d913      	bls.n	572 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     54a:	7d73      	ldrb	r3, [r6, #21]
     54c:	009b      	lsls	r3, r3, #2
     54e:	b2db      	uxtb	r3, r3
     550:	4642      	mov	r2, r8
     552:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     554:	7db3      	ldrb	r3, [r6, #22]
     556:	01db      	lsls	r3, r3, #7
     558:	7872      	ldrb	r2, [r6, #1]
     55a:	4313      	orrs	r3, r2
     55c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     55e:	4642      	mov	r2, r8
     560:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     562:	7933      	ldrb	r3, [r6, #4]
     564:	2b34      	cmp	r3, #52	; 0x34
     566:	d900      	bls.n	56a <adc_init+0x11e>
     568:	e17b      	b.n	862 <adc_init+0x416>
     56a:	009b      	lsls	r3, r3, #2
     56c:	4a8a      	ldr	r2, [pc, #552]	; (798 <adc_init+0x34c>)
     56e:	58d3      	ldr	r3, [r2, r3]
     570:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     572:	00a4      	lsls	r4, r4, #2
     574:	ab02      	add	r3, sp, #8
     576:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     578:	a901      	add	r1, sp, #4
     57a:	2300      	movs	r3, #0
     57c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     57e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     580:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     582:	3301      	adds	r3, #1
     584:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     586:	b2c0      	uxtb	r0, r0
     588:	4b82      	ldr	r3, [pc, #520]	; (794 <adc_init+0x348>)
     58a:	4798      	blx	r3
     58c:	e7dd      	b.n	54a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     58e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     590:	2250      	movs	r2, #80	; 0x50
     592:	497f      	ldr	r1, [pc, #508]	; (790 <adc_init+0x344>)
     594:	a802      	add	r0, sp, #8
     596:	4b7d      	ldr	r3, [pc, #500]	; (78c <adc_init+0x340>)
     598:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     59a:	2c13      	cmp	r4, #19
     59c:	d915      	bls.n	5ca <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     59e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     5a0:	2250      	movs	r2, #80	; 0x50
     5a2:	497b      	ldr	r1, [pc, #492]	; (790 <adc_init+0x344>)
     5a4:	a802      	add	r0, sp, #8
     5a6:	4b79      	ldr	r3, [pc, #484]	; (78c <adc_init+0x340>)
     5a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     5aa:	2c13      	cmp	r4, #19
     5ac:	d8cd      	bhi.n	54a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     5ae:	00a4      	lsls	r4, r4, #2
     5b0:	ab02      	add	r3, sp, #8
     5b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5b4:	a901      	add	r1, sp, #4
     5b6:	2300      	movs	r3, #0
     5b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     5ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5be:	3301      	adds	r3, #1
     5c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5c2:	b2c0      	uxtb	r0, r0
     5c4:	4b73      	ldr	r3, [pc, #460]	; (794 <adc_init+0x348>)
     5c6:	4798      	blx	r3
     5c8:	e7bf      	b.n	54a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     5ca:	00a4      	lsls	r4, r4, #2
     5cc:	ab02      	add	r3, sp, #8
     5ce:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5d0:	a901      	add	r1, sp, #4
     5d2:	2300      	movs	r3, #0
     5d4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     5d6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5d8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5da:	3301      	adds	r3, #1
     5dc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5de:	b2c0      	uxtb	r0, r0
     5e0:	4b6c      	ldr	r3, [pc, #432]	; (794 <adc_init+0x348>)
     5e2:	4798      	blx	r3
     5e4:	e7db      	b.n	59e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     5e6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     5e8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     5ea:	2102      	movs	r1, #2
     5ec:	e01a      	b.n	624 <adc_init+0x1d8>
		adjres = config->divide_result;
     5ee:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     5f0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     5f2:	2410      	movs	r4, #16
     5f4:	e016      	b.n	624 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     5f6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     5f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     5fa:	2101      	movs	r1, #1
     5fc:	e012      	b.n	624 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     5fe:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     600:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     602:	2100      	movs	r1, #0
     604:	e00e      	b.n	624 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     606:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     608:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     60a:	2100      	movs	r1, #0
     60c:	e00a      	b.n	624 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     60e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     610:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     612:	2100      	movs	r1, #0
     614:	e006      	b.n	624 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     616:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     618:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     61a:	2100      	movs	r1, #0
     61c:	e002      	b.n	624 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     61e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     620:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     622:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     624:	0109      	lsls	r1, r1, #4
     626:	2270      	movs	r2, #112	; 0x70
     628:	400a      	ands	r2, r1
     62a:	4313      	orrs	r3, r2
     62c:	4642      	mov	r2, r8
     62e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     630:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     634:	2b3f      	cmp	r3, #63	; 0x3f
     636:	d900      	bls.n	63a <adc_init+0x1ee>
     638:	e71b      	b.n	472 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     63a:	70d3      	strb	r3, [r2, #3]
	Adc *const adc_module = module_inst->hw;
     63c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     63e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     640:	b25b      	sxtb	r3, r3
     642:	2b00      	cmp	r3, #0
     644:	dbfb      	blt.n	63e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     646:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     648:	8872      	ldrh	r2, [r6, #2]
     64a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     64c:	2224      	movs	r2, #36	; 0x24
     64e:	5cb2      	ldrb	r2, [r6, r2]
     650:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     652:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     654:	7d32      	ldrb	r2, [r6, #20]
     656:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     658:	4313      	orrs	r3, r2
     65a:	7cb2      	ldrb	r2, [r6, #18]
     65c:	0052      	lsls	r2, r2, #1
     65e:	4313      	orrs	r3, r2
     660:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     662:	4642      	mov	r2, r8
     664:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     666:	7e33      	ldrb	r3, [r6, #24]
     668:	2b00      	cmp	r3, #0
     66a:	d020      	beq.n	6ae <adc_init+0x262>
		switch (resolution) {
     66c:	2c10      	cmp	r4, #16
     66e:	d100      	bne.n	672 <adc_init+0x226>
     670:	e0d9      	b.n	826 <adc_init+0x3da>
     672:	d800      	bhi.n	676 <adc_init+0x22a>
     674:	e098      	b.n	7a8 <adc_init+0x35c>
     676:	2c20      	cmp	r4, #32
     678:	d100      	bne.n	67c <adc_init+0x230>
     67a:	e0b6      	b.n	7ea <adc_init+0x39e>
     67c:	2c30      	cmp	r4, #48	; 0x30
     67e:	d116      	bne.n	6ae <adc_init+0x262>
			if (config->differential_mode &&
     680:	7cf2      	ldrb	r2, [r6, #19]
     682:	2a00      	cmp	r2, #0
     684:	d00a      	beq.n	69c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     686:	69f2      	ldr	r2, [r6, #28]
     688:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     68a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     68c:	2aff      	cmp	r2, #255	; 0xff
     68e:	d900      	bls.n	692 <adc_init+0x246>
     690:	e6ef      	b.n	472 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     692:	6a32      	ldr	r2, [r6, #32]
     694:	3280      	adds	r2, #128	; 0x80
     696:	2aff      	cmp	r2, #255	; 0xff
     698:	d900      	bls.n	69c <adc_init+0x250>
     69a:	e6ea      	b.n	472 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     69c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     69e:	69f2      	ldr	r2, [r6, #28]
     6a0:	2aff      	cmp	r2, #255	; 0xff
     6a2:	dd00      	ble.n	6a6 <adc_init+0x25a>
     6a4:	e6e5      	b.n	472 <adc_init+0x26>
     6a6:	6a32      	ldr	r2, [r6, #32]
     6a8:	2aff      	cmp	r2, #255	; 0xff
     6aa:	dd00      	ble.n	6ae <adc_init+0x262>
     6ac:	e6e1      	b.n	472 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     6ae:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6b0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     6b2:	b252      	sxtb	r2, r2
     6b4:	2a00      	cmp	r2, #0
     6b6:	dbfb      	blt.n	6b0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     6b8:	4642      	mov	r2, r8
     6ba:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     6bc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6be:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     6c0:	b25b      	sxtb	r3, r3
     6c2:	2b00      	cmp	r3, #0
     6c4:	dbfb      	blt.n	6be <adc_init+0x272>
	adc_module->WINLT.reg =
     6c6:	8bb3      	ldrh	r3, [r6, #28]
     6c8:	4642      	mov	r2, r8
     6ca:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     6cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     6d0:	b25b      	sxtb	r3, r3
     6d2:	2b00      	cmp	r3, #0
     6d4:	dbfb      	blt.n	6ce <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     6d6:	8c33      	ldrh	r3, [r6, #32]
     6d8:	4642      	mov	r2, r8
     6da:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     6dc:	232c      	movs	r3, #44	; 0x2c
     6de:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     6e0:	2b00      	cmp	r3, #0
     6e2:	d005      	beq.n	6f0 <adc_init+0x2a4>
		inputs_to_scan--;
     6e4:	3b01      	subs	r3, #1
     6e6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     6e8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     6ea:	2b0f      	cmp	r3, #15
     6ec:	d900      	bls.n	6f0 <adc_init+0x2a4>
     6ee:	e6c0      	b.n	472 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     6f0:	222b      	movs	r2, #43	; 0x2b
     6f2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     6f4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     6f6:	290f      	cmp	r1, #15
     6f8:	d900      	bls.n	6fc <adc_init+0x2b0>
     6fa:	e6ba      	b.n	472 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     6fc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6fe:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     700:	b252      	sxtb	r2, r2
     702:	2a00      	cmp	r2, #0
     704:	dbfb      	blt.n	6fe <adc_init+0x2b2>
			config->negative_input |
     706:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     708:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     70a:	4302      	orrs	r2, r0
     70c:	68b0      	ldr	r0, [r6, #8]
     70e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     710:	0509      	lsls	r1, r1, #20
			config->negative_input |
     712:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     714:	041b      	lsls	r3, r3, #16
			config->negative_input |
     716:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     718:	4642      	mov	r2, r8
     71a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     71c:	232a      	movs	r3, #42	; 0x2a
     71e:	5cf3      	ldrb	r3, [r6, r3]
     720:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     722:	230f      	movs	r3, #15
     724:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     726:	3315      	adds	r3, #21
     728:	5cf3      	ldrb	r3, [r6, r3]
     72a:	2b00      	cmp	r3, #0
     72c:	d012      	beq.n	754 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     72e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     730:	4a1a      	ldr	r2, [pc, #104]	; (79c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     732:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     734:	4293      	cmp	r3, r2
     736:	d900      	bls.n	73a <adc_init+0x2ee>
     738:	e69b      	b.n	472 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     73a:	4642      	mov	r2, r8
     73c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     73e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     740:	2380      	movs	r3, #128	; 0x80
     742:	011b      	lsls	r3, r3, #4
     744:	18d3      	adds	r3, r2, r3
     746:	4915      	ldr	r1, [pc, #84]	; (79c <adc_init+0x350>)
     748:	b29b      	uxth	r3, r3
     74a:	428b      	cmp	r3, r1
     74c:	d900      	bls.n	750 <adc_init+0x304>
     74e:	e690      	b.n	472 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     750:	4643      	mov	r3, r8
     752:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     754:	4b12      	ldr	r3, [pc, #72]	; (7a0 <adc_init+0x354>)
     756:	681b      	ldr	r3, [r3, #0]
     758:	015b      	lsls	r3, r3, #5
     75a:	22e0      	movs	r2, #224	; 0xe0
     75c:	00d2      	lsls	r2, r2, #3
     75e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     760:	4a10      	ldr	r2, [pc, #64]	; (7a4 <adc_init+0x358>)
     762:	6851      	ldr	r1, [r2, #4]
     764:	0149      	lsls	r1, r1, #5
     766:	6812      	ldr	r2, [r2, #0]
     768:	0ed2      	lsrs	r2, r2, #27
     76a:	430a      	orrs	r2, r1
     76c:	b2d2      	uxtb	r2, r2
			) |
     76e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     770:	4642      	mov	r2, r8
     772:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     774:	2000      	movs	r0, #0
     776:	e67c      	b.n	472 <adc_init+0x26>
     778:	40000400 	.word	0x40000400
     77c:	40000800 	.word	0x40000800
     780:	200002d4 	.word	0x200002d4
     784:	000029f1 	.word	0x000029f1
     788:	00002965 	.word	0x00002965
     78c:	0000585d 	.word	0x0000585d
     790:	000077bc 	.word	0x000077bc
     794:	00002ae9 	.word	0x00002ae9
     798:	000076e8 	.word	0x000076e8
     79c:	00000fff 	.word	0x00000fff
     7a0:	00806024 	.word	0x00806024
     7a4:	00806020 	.word	0x00806020
		switch (resolution) {
     7a8:	2c00      	cmp	r4, #0
     7aa:	d000      	beq.n	7ae <adc_init+0x362>
     7ac:	e77f      	b.n	6ae <adc_init+0x262>
			if (config->differential_mode &&
     7ae:	7cf2      	ldrb	r2, [r6, #19]
     7b0:	2a00      	cmp	r2, #0
     7b2:	d00f      	beq.n	7d4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     7b4:	69f2      	ldr	r2, [r6, #28]
     7b6:	2180      	movs	r1, #128	; 0x80
     7b8:	0109      	lsls	r1, r1, #4
     7ba:	468c      	mov	ip, r1
     7bc:	4462      	add	r2, ip
			if (config->differential_mode &&
     7be:	492a      	ldr	r1, [pc, #168]	; (868 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     7c0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     7c2:	428a      	cmp	r2, r1
     7c4:	d900      	bls.n	7c8 <adc_init+0x37c>
     7c6:	e654      	b.n	472 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     7c8:	6a32      	ldr	r2, [r6, #32]
     7ca:	4462      	add	r2, ip
     7cc:	4926      	ldr	r1, [pc, #152]	; (868 <adc_init+0x41c>)
     7ce:	428a      	cmp	r2, r1
     7d0:	d900      	bls.n	7d4 <adc_init+0x388>
     7d2:	e64e      	b.n	472 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     7d4:	4a24      	ldr	r2, [pc, #144]	; (868 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     7d6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     7d8:	69f1      	ldr	r1, [r6, #28]
     7da:	4291      	cmp	r1, r2
     7dc:	dd00      	ble.n	7e0 <adc_init+0x394>
     7de:	e648      	b.n	472 <adc_init+0x26>
     7e0:	6a31      	ldr	r1, [r6, #32]
     7e2:	4291      	cmp	r1, r2
     7e4:	dd00      	ble.n	7e8 <adc_init+0x39c>
     7e6:	e644      	b.n	472 <adc_init+0x26>
     7e8:	e761      	b.n	6ae <adc_init+0x262>
			if (config->differential_mode &&
     7ea:	7cf2      	ldrb	r2, [r6, #19]
     7ec:	2a00      	cmp	r2, #0
     7ee:	d00f      	beq.n	810 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     7f0:	69f2      	ldr	r2, [r6, #28]
     7f2:	2180      	movs	r1, #128	; 0x80
     7f4:	0089      	lsls	r1, r1, #2
     7f6:	468c      	mov	ip, r1
     7f8:	4462      	add	r2, ip
			if (config->differential_mode &&
     7fa:	491c      	ldr	r1, [pc, #112]	; (86c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     7fc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     7fe:	428a      	cmp	r2, r1
     800:	d900      	bls.n	804 <adc_init+0x3b8>
     802:	e636      	b.n	472 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     804:	6a32      	ldr	r2, [r6, #32]
     806:	4462      	add	r2, ip
     808:	4918      	ldr	r1, [pc, #96]	; (86c <adc_init+0x420>)
     80a:	428a      	cmp	r2, r1
     80c:	d900      	bls.n	810 <adc_init+0x3c4>
     80e:	e630      	b.n	472 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     810:	4a16      	ldr	r2, [pc, #88]	; (86c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     812:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     814:	69f1      	ldr	r1, [r6, #28]
     816:	4291      	cmp	r1, r2
     818:	dd00      	ble.n	81c <adc_init+0x3d0>
     81a:	e62a      	b.n	472 <adc_init+0x26>
     81c:	6a31      	ldr	r1, [r6, #32]
     81e:	4291      	cmp	r1, r2
     820:	dd00      	ble.n	824 <adc_init+0x3d8>
     822:	e626      	b.n	472 <adc_init+0x26>
     824:	e743      	b.n	6ae <adc_init+0x262>
			if (config->differential_mode &&
     826:	7cf2      	ldrb	r2, [r6, #19]
     828:	2a00      	cmp	r2, #0
     82a:	d00f      	beq.n	84c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     82c:	69f2      	ldr	r2, [r6, #28]
     82e:	2180      	movs	r1, #128	; 0x80
     830:	0209      	lsls	r1, r1, #8
     832:	468c      	mov	ip, r1
     834:	4462      	add	r2, ip
			if (config->differential_mode &&
     836:	490e      	ldr	r1, [pc, #56]	; (870 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     838:	2017      	movs	r0, #23
			if (config->differential_mode &&
     83a:	428a      	cmp	r2, r1
     83c:	d900      	bls.n	840 <adc_init+0x3f4>
     83e:	e618      	b.n	472 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     840:	6a32      	ldr	r2, [r6, #32]
     842:	4462      	add	r2, ip
     844:	490a      	ldr	r1, [pc, #40]	; (870 <adc_init+0x424>)
     846:	428a      	cmp	r2, r1
     848:	d900      	bls.n	84c <adc_init+0x400>
     84a:	e612      	b.n	472 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     84c:	4a08      	ldr	r2, [pc, #32]	; (870 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     84e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     850:	69f1      	ldr	r1, [r6, #28]
     852:	4291      	cmp	r1, r2
     854:	dd00      	ble.n	858 <adc_init+0x40c>
     856:	e60c      	b.n	472 <adc_init+0x26>
     858:	6a31      	ldr	r1, [r6, #32]
     85a:	4291      	cmp	r1, r2
     85c:	dd00      	ble.n	860 <adc_init+0x414>
     85e:	e608      	b.n	472 <adc_init+0x26>
     860:	e725      	b.n	6ae <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     862:	2017      	movs	r0, #23
     864:	e605      	b.n	472 <adc_init+0x26>
     866:	46c0      	nop			; (mov r8, r8)
     868:	00000fff 	.word	0x00000fff
     86c:	000003ff 	.word	0x000003ff
     870:	0000ffff 	.word	0x0000ffff

00000874 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     874:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     876:	4b2e      	ldr	r3, [pc, #184]	; (930 <ADC_Handler+0xbc>)
     878:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     87a:	6823      	ldr	r3, [r4, #0]
     87c:	7e1d      	ldrb	r5, [r3, #24]
     87e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     880:	07ea      	lsls	r2, r5, #31
     882:	d505      	bpl.n	890 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     884:	7ee2      	ldrb	r2, [r4, #27]
     886:	07d2      	lsls	r2, r2, #31
     888:	d502      	bpl.n	890 <ADC_Handler+0x1c>
     88a:	7ea2      	ldrb	r2, [r4, #26]
     88c:	07d2      	lsls	r2, r2, #31
     88e:	d416      	bmi.n	8be <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     890:	076b      	lsls	r3, r5, #29
     892:	d508      	bpl.n	8a6 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     894:	2304      	movs	r3, #4
     896:	6822      	ldr	r2, [r4, #0]
     898:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     89a:	7ee3      	ldrb	r3, [r4, #27]
     89c:	079b      	lsls	r3, r3, #30
     89e:	d502      	bpl.n	8a6 <ADC_Handler+0x32>
     8a0:	7ea3      	ldrb	r3, [r4, #26]
     8a2:	079b      	lsls	r3, r3, #30
     8a4:	d43c      	bmi.n	920 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     8a6:	07ab      	lsls	r3, r5, #30
     8a8:	d508      	bpl.n	8bc <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     8aa:	2302      	movs	r3, #2
     8ac:	6822      	ldr	r2, [r4, #0]
     8ae:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     8b0:	7ee3      	ldrb	r3, [r4, #27]
     8b2:	075b      	lsls	r3, r3, #29
     8b4:	d502      	bpl.n	8bc <ADC_Handler+0x48>
     8b6:	7ea3      	ldrb	r3, [r4, #26]
     8b8:	075b      	lsls	r3, r3, #29
     8ba:	d435      	bmi.n	928 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     8bc:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     8be:	2201      	movs	r2, #1
     8c0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     8c2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8c4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     8c6:	b25b      	sxtb	r3, r3
     8c8:	2b00      	cmp	r3, #0
     8ca:	dbfb      	blt.n	8c4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     8cc:	6961      	ldr	r1, [r4, #20]
     8ce:	1c8b      	adds	r3, r1, #2
     8d0:	6163      	str	r3, [r4, #20]
     8d2:	8b53      	ldrh	r3, [r2, #26]
     8d4:	b29b      	uxth	r3, r3
     8d6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     8d8:	8b23      	ldrh	r3, [r4, #24]
     8da:	3b01      	subs	r3, #1
     8dc:	b29b      	uxth	r3, r3
     8de:	8323      	strh	r3, [r4, #24]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d011      	beq.n	908 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     8e4:	7f63      	ldrb	r3, [r4, #29]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d0d2      	beq.n	890 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     8ea:	6822      	ldr	r2, [r4, #0]
     8ec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     8ee:	b25b      	sxtb	r3, r3
     8f0:	2b00      	cmp	r3, #0
     8f2:	dbfb      	blt.n	8ec <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     8f4:	7b13      	ldrb	r3, [r2, #12]
     8f6:	2102      	movs	r1, #2
     8f8:	430b      	orrs	r3, r1
     8fa:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     8fc:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8fe:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     900:	b25b      	sxtb	r3, r3
     902:	2b00      	cmp	r3, #0
     904:	dbfb      	blt.n	8fe <ADC_Handler+0x8a>
     906:	e7c3      	b.n	890 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     908:	7f23      	ldrb	r3, [r4, #28]
     90a:	2b05      	cmp	r3, #5
     90c:	d1c0      	bne.n	890 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     90e:	2300      	movs	r3, #0
     910:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     912:	3301      	adds	r3, #1
     914:	6822      	ldr	r2, [r4, #0]
     916:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     918:	0020      	movs	r0, r4
     91a:	68a3      	ldr	r3, [r4, #8]
     91c:	4798      	blx	r3
     91e:	e7b7      	b.n	890 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     920:	0020      	movs	r0, r4
     922:	68e3      	ldr	r3, [r4, #12]
     924:	4798      	blx	r3
     926:	e7be      	b.n	8a6 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     928:	6923      	ldr	r3, [r4, #16]
     92a:	0020      	movs	r0, r4
     92c:	4798      	blx	r3
}
     92e:	e7c5      	b.n	8bc <ADC_Handler+0x48>
     930:	200002d4 	.word	0x200002d4

00000934 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     934:	b5f0      	push	{r4, r5, r6, r7, lr}
     936:	46d6      	mov	lr, sl
     938:	464f      	mov	r7, r9
     93a:	4646      	mov	r6, r8
     93c:	b5c0      	push	{r6, r7, lr}
     93e:	b08a      	sub	sp, #40	; 0x28
     940:	0006      	movs	r6, r0
     942:	000f      	movs	r7, r1
     944:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     946:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     948:	0008      	movs	r0, r1
     94a:	4ba0      	ldr	r3, [pc, #640]	; (bcc <i2c_master_init+0x298>)
     94c:	4798      	blx	r3
     94e:	4aa0      	ldr	r2, [pc, #640]	; (bd0 <i2c_master_init+0x29c>)
     950:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     952:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     954:	2301      	movs	r3, #1
     956:	40ab      	lsls	r3, r5
     958:	430b      	orrs	r3, r1
     95a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     95c:	a909      	add	r1, sp, #36	; 0x24
     95e:	7b23      	ldrb	r3, [r4, #12]
     960:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     962:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     964:	b2c5      	uxtb	r5, r0
     966:	0028      	movs	r0, r5
     968:	4b9a      	ldr	r3, [pc, #616]	; (bd4 <i2c_master_init+0x2a0>)
     96a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     96c:	0028      	movs	r0, r5
     96e:	4b9a      	ldr	r3, [pc, #616]	; (bd8 <i2c_master_init+0x2a4>)
     970:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     972:	7b20      	ldrb	r0, [r4, #12]
     974:	2100      	movs	r1, #0
     976:	4b99      	ldr	r3, [pc, #612]	; (bdc <i2c_master_init+0x2a8>)
     978:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     97a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     97c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     97e:	079b      	lsls	r3, r3, #30
     980:	d505      	bpl.n	98e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     982:	b00a      	add	sp, #40	; 0x28
     984:	bc1c      	pop	{r2, r3, r4}
     986:	4690      	mov	r8, r2
     988:	4699      	mov	r9, r3
     98a:	46a2      	mov	sl, r4
     98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     98e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     990:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     992:	07db      	lsls	r3, r3, #31
     994:	d4f5      	bmi.n	982 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     996:	6830      	ldr	r0, [r6, #0]
     998:	4b8c      	ldr	r3, [pc, #560]	; (bcc <i2c_master_init+0x298>)
     99a:	4699      	mov	r9, r3
     99c:	4798      	blx	r3
     99e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9a0:	498f      	ldr	r1, [pc, #572]	; (be0 <i2c_master_init+0x2ac>)
     9a2:	4b90      	ldr	r3, [pc, #576]	; (be4 <i2c_master_init+0x2b0>)
     9a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9a6:	00ad      	lsls	r5, r5, #2
     9a8:	4b8f      	ldr	r3, [pc, #572]	; (be8 <i2c_master_init+0x2b4>)
     9aa:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     9ac:	2300      	movs	r3, #0
     9ae:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     9b0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     9b2:	2500      	movs	r5, #0
     9b4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     9b6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     9b8:	2225      	movs	r2, #37	; 0x25
     9ba:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     9bc:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     9be:	3314      	adds	r3, #20
     9c0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9c2:	6833      	ldr	r3, [r6, #0]
     9c4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     9c6:	0018      	movs	r0, r3
     9c8:	47c8      	blx	r9
     9ca:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9cc:	2380      	movs	r3, #128	; 0x80
     9ce:	aa08      	add	r2, sp, #32
     9d0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9d2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9d4:	2301      	movs	r3, #1
     9d6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     9d8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     9da:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     9dc:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     9de:	2800      	cmp	r0, #0
     9e0:	d100      	bne.n	9e4 <i2c_master_init+0xb0>
     9e2:	e0af      	b.n	b44 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     9e4:	ab08      	add	r3, sp, #32
     9e6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     9e8:	2302      	movs	r3, #2
     9ea:	aa08      	add	r2, sp, #32
     9ec:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     9ee:	0c00      	lsrs	r0, r0, #16
     9f0:	b2c0      	uxtb	r0, r0
     9f2:	0011      	movs	r1, r2
     9f4:	4b7d      	ldr	r3, [pc, #500]	; (bec <i2c_master_init+0x2b8>)
     9f6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     9f8:	2f00      	cmp	r7, #0
     9fa:	d100      	bne.n	9fe <i2c_master_init+0xca>
     9fc:	e0a7      	b.n	b4e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     9fe:	ab08      	add	r3, sp, #32
     a00:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a02:	2302      	movs	r3, #2
     a04:	aa08      	add	r2, sp, #32
     a06:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     a08:	0c3f      	lsrs	r7, r7, #16
     a0a:	b2f8      	uxtb	r0, r7
     a0c:	0011      	movs	r1, r2
     a0e:	4b77      	ldr	r3, [pc, #476]	; (bec <i2c_master_init+0x2b8>)
     a10:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     a12:	8aa3      	ldrh	r3, [r4, #20]
     a14:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     a16:	8ae3      	ldrh	r3, [r4, #22]
     a18:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     a1a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     a1c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     a1e:	2b00      	cmp	r3, #0
     a20:	d104      	bne.n	a2c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a22:	4b73      	ldr	r3, [pc, #460]	; (bf0 <i2c_master_init+0x2bc>)
     a24:	789b      	ldrb	r3, [r3, #2]
     a26:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     a28:	0fdb      	lsrs	r3, r3, #31
     a2a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     a2c:	68a1      	ldr	r1, [r4, #8]
     a2e:	6923      	ldr	r3, [r4, #16]
     a30:	430b      	orrs	r3, r1
     a32:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     a34:	2224      	movs	r2, #36	; 0x24
     a36:	5ca2      	ldrb	r2, [r4, r2]
     a38:	2a00      	cmp	r2, #0
     a3a:	d002      	beq.n	a42 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     a3c:	2280      	movs	r2, #128	; 0x80
     a3e:	05d2      	lsls	r2, r2, #23
     a40:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     a42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     a44:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     a46:	222c      	movs	r2, #44	; 0x2c
     a48:	5ca2      	ldrb	r2, [r4, r2]
     a4a:	2a00      	cmp	r2, #0
     a4c:	d103      	bne.n	a56 <i2c_master_init+0x122>
     a4e:	2280      	movs	r2, #128	; 0x80
     a50:	0492      	lsls	r2, r2, #18
     a52:	4291      	cmp	r1, r2
     a54:	d102      	bne.n	a5c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     a56:	2280      	movs	r2, #128	; 0x80
     a58:	0512      	lsls	r2, r2, #20
     a5a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     a5c:	222d      	movs	r2, #45	; 0x2d
     a5e:	5ca2      	ldrb	r2, [r4, r2]
     a60:	2a00      	cmp	r2, #0
     a62:	d002      	beq.n	a6a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     a64:	2280      	movs	r2, #128	; 0x80
     a66:	0412      	lsls	r2, r2, #16
     a68:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     a6a:	222e      	movs	r2, #46	; 0x2e
     a6c:	5ca2      	ldrb	r2, [r4, r2]
     a6e:	2a00      	cmp	r2, #0
     a70:	d002      	beq.n	a78 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     a72:	2280      	movs	r2, #128	; 0x80
     a74:	03d2      	lsls	r2, r2, #15
     a76:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     a78:	4642      	mov	r2, r8
     a7a:	6812      	ldr	r2, [r2, #0]
     a7c:	4313      	orrs	r3, r2
     a7e:	4642      	mov	r2, r8
     a80:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     a82:	2380      	movs	r3, #128	; 0x80
     a84:	005b      	lsls	r3, r3, #1
     a86:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     a88:	4648      	mov	r0, r9
     a8a:	3014      	adds	r0, #20
     a8c:	b2c0      	uxtb	r0, r0
     a8e:	4b59      	ldr	r3, [pc, #356]	; (bf4 <i2c_master_init+0x2c0>)
     a90:	4798      	blx	r3
     a92:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     a94:	23fa      	movs	r3, #250	; 0xfa
     a96:	009b      	lsls	r3, r3, #2
     a98:	6822      	ldr	r2, [r4, #0]
     a9a:	435a      	muls	r2, r3
     a9c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     a9e:	6863      	ldr	r3, [r4, #4]
     aa0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     aa2:	4d55      	ldr	r5, [pc, #340]	; (bf8 <i2c_master_init+0x2c4>)
     aa4:	47a8      	blx	r5
     aa6:	9000      	str	r0, [sp, #0]
     aa8:	9101      	str	r1, [sp, #4]
     aaa:	464b      	mov	r3, r9
     aac:	0058      	lsls	r0, r3, #1
     aae:	47a8      	blx	r5
     ab0:	9002      	str	r0, [sp, #8]
     ab2:	9103      	str	r1, [sp, #12]
     ab4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     ab6:	47a8      	blx	r5
     ab8:	9004      	str	r0, [sp, #16]
     aba:	9105      	str	r1, [sp, #20]
     abc:	4f4f      	ldr	r7, [pc, #316]	; (bfc <i2c_master_init+0x2c8>)
     abe:	4a50      	ldr	r2, [pc, #320]	; (c00 <i2c_master_init+0x2cc>)
     ac0:	4b50      	ldr	r3, [pc, #320]	; (c04 <i2c_master_init+0x2d0>)
     ac2:	9800      	ldr	r0, [sp, #0]
     ac4:	9901      	ldr	r1, [sp, #4]
     ac6:	47b8      	blx	r7
     ac8:	0002      	movs	r2, r0
     aca:	000b      	movs	r3, r1
     acc:	9804      	ldr	r0, [sp, #16]
     ace:	9905      	ldr	r1, [sp, #20]
     ad0:	47b8      	blx	r7
     ad2:	4e4d      	ldr	r6, [pc, #308]	; (c08 <i2c_master_init+0x2d4>)
     ad4:	2200      	movs	r2, #0
     ad6:	4b4d      	ldr	r3, [pc, #308]	; (c0c <i2c_master_init+0x2d8>)
     ad8:	47b0      	blx	r6
     ada:	9004      	str	r0, [sp, #16]
     adc:	9105      	str	r1, [sp, #20]
     ade:	4648      	mov	r0, r9
     ae0:	47a8      	blx	r5
     ae2:	0002      	movs	r2, r0
     ae4:	000b      	movs	r3, r1
     ae6:	9804      	ldr	r0, [sp, #16]
     ae8:	9905      	ldr	r1, [sp, #20]
     aea:	47b8      	blx	r7
     aec:	0002      	movs	r2, r0
     aee:	000b      	movs	r3, r1
     af0:	4d47      	ldr	r5, [pc, #284]	; (c10 <i2c_master_init+0x2dc>)
     af2:	9800      	ldr	r0, [sp, #0]
     af4:	9901      	ldr	r1, [sp, #4]
     af6:	47a8      	blx	r5
     af8:	9a02      	ldr	r2, [sp, #8]
     afa:	9b03      	ldr	r3, [sp, #12]
     afc:	47b0      	blx	r6
     afe:	2200      	movs	r2, #0
     b00:	4b44      	ldr	r3, [pc, #272]	; (c14 <i2c_master_init+0x2e0>)
     b02:	47a8      	blx	r5
     b04:	9a02      	ldr	r2, [sp, #8]
     b06:	9b03      	ldr	r3, [sp, #12]
     b08:	4d43      	ldr	r5, [pc, #268]	; (c18 <i2c_master_init+0x2e4>)
     b0a:	47a8      	blx	r5
     b0c:	4b43      	ldr	r3, [pc, #268]	; (c1c <i2c_master_init+0x2e8>)
     b0e:	4798      	blx	r3
     b10:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     b12:	2380      	movs	r3, #128	; 0x80
     b14:	049b      	lsls	r3, r3, #18
     b16:	68a2      	ldr	r2, [r4, #8]
     b18:	429a      	cmp	r2, r3
     b1a:	d01e      	beq.n	b5a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     b1c:	0003      	movs	r3, r0
     b1e:	2040      	movs	r0, #64	; 0x40
     b20:	2dff      	cmp	r5, #255	; 0xff
     b22:	d900      	bls.n	b26 <i2c_master_init+0x1f2>
     b24:	e72d      	b.n	982 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     b26:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     b28:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     b2a:	25ff      	movs	r5, #255	; 0xff
     b2c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     b2e:	0624      	lsls	r4, r4, #24
     b30:	4325      	orrs	r5, r4
     b32:	0400      	lsls	r0, r0, #16
     b34:	23ff      	movs	r3, #255	; 0xff
     b36:	041b      	lsls	r3, r3, #16
     b38:	4018      	ands	r0, r3
     b3a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     b3c:	4643      	mov	r3, r8
     b3e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     b40:	2000      	movs	r0, #0
     b42:	e71e      	b.n	982 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     b44:	2100      	movs	r1, #0
     b46:	4640      	mov	r0, r8
     b48:	4b35      	ldr	r3, [pc, #212]	; (c20 <i2c_master_init+0x2ec>)
     b4a:	4798      	blx	r3
     b4c:	e74a      	b.n	9e4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     b4e:	2101      	movs	r1, #1
     b50:	4640      	mov	r0, r8
     b52:	4b33      	ldr	r3, [pc, #204]	; (c20 <i2c_master_init+0x2ec>)
     b54:	4798      	blx	r3
     b56:	0007      	movs	r7, r0
     b58:	e751      	b.n	9fe <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     b5a:	26fa      	movs	r6, #250	; 0xfa
     b5c:	00b6      	lsls	r6, r6, #2
     b5e:	4653      	mov	r3, sl
     b60:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     b62:	9800      	ldr	r0, [sp, #0]
     b64:	9901      	ldr	r1, [sp, #4]
     b66:	0002      	movs	r2, r0
     b68:	000b      	movs	r3, r1
     b6a:	4c27      	ldr	r4, [pc, #156]	; (c08 <i2c_master_init+0x2d4>)
     b6c:	47a0      	blx	r4
     b6e:	9000      	str	r0, [sp, #0]
     b70:	9101      	str	r1, [sp, #4]
     b72:	0030      	movs	r0, r6
     b74:	4b20      	ldr	r3, [pc, #128]	; (bf8 <i2c_master_init+0x2c4>)
     b76:	4798      	blx	r3
     b78:	2200      	movs	r2, #0
     b7a:	4b2a      	ldr	r3, [pc, #168]	; (c24 <i2c_master_init+0x2f0>)
     b7c:	47b8      	blx	r7
     b7e:	0002      	movs	r2, r0
     b80:	000b      	movs	r3, r1
     b82:	9800      	ldr	r0, [sp, #0]
     b84:	9901      	ldr	r1, [sp, #4]
     b86:	4c24      	ldr	r4, [pc, #144]	; (c18 <i2c_master_init+0x2e4>)
     b88:	47a0      	blx	r4
     b8a:	2200      	movs	r2, #0
     b8c:	4b21      	ldr	r3, [pc, #132]	; (c14 <i2c_master_init+0x2e0>)
     b8e:	4c20      	ldr	r4, [pc, #128]	; (c10 <i2c_master_init+0x2dc>)
     b90:	47a0      	blx	r4
     b92:	4b22      	ldr	r3, [pc, #136]	; (c1c <i2c_master_init+0x2e8>)
     b94:	4798      	blx	r3
     b96:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     b98:	d00c      	beq.n	bb4 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     b9a:	0031      	movs	r1, r6
     b9c:	9807      	ldr	r0, [sp, #28]
     b9e:	4b22      	ldr	r3, [pc, #136]	; (c28 <i2c_master_init+0x2f4>)
     ba0:	4798      	blx	r3
     ba2:	3802      	subs	r0, #2
     ba4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     ba6:	002b      	movs	r3, r5
     ba8:	2dff      	cmp	r5, #255	; 0xff
     baa:	d80c      	bhi.n	bc6 <i2c_master_init+0x292>
     bac:	28ff      	cmp	r0, #255	; 0xff
     bae:	d9bc      	bls.n	b2a <i2c_master_init+0x1f6>
     bb0:	2040      	movs	r0, #64	; 0x40
     bb2:	e6e6      	b.n	982 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     bb4:	0071      	lsls	r1, r6, #1
     bb6:	1e48      	subs	r0, r1, #1
     bb8:	9b07      	ldr	r3, [sp, #28]
     bba:	469c      	mov	ip, r3
     bbc:	4460      	add	r0, ip
     bbe:	4b1a      	ldr	r3, [pc, #104]	; (c28 <i2c_master_init+0x2f4>)
     bc0:	4798      	blx	r3
     bc2:	3801      	subs	r0, #1
     bc4:	e7ef      	b.n	ba6 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     bc6:	2040      	movs	r0, #64	; 0x40
     bc8:	e6db      	b.n	982 <i2c_master_init+0x4e>
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	00001d31 	.word	0x00001d31
     bd0:	40000400 	.word	0x40000400
     bd4:	000029f1 	.word	0x000029f1
     bd8:	00002965 	.word	0x00002965
     bdc:	00001b6d 	.word	0x00001b6d
     be0:	00000cfd 	.word	0x00000cfd
     be4:	00001d6d 	.word	0x00001d6d
     be8:	200003e0 	.word	0x200003e0
     bec:	00002ae9 	.word	0x00002ae9
     bf0:	41002000 	.word	0x41002000
     bf4:	00002a0d 	.word	0x00002a0d
     bf8:	000055a5 	.word	0x000055a5
     bfc:	00004a11 	.word	0x00004a11
     c00:	e826d695 	.word	0xe826d695
     c04:	3e112e0b 	.word	0x3e112e0b
     c08:	00003d89 	.word	0x00003d89
     c0c:	40240000 	.word	0x40240000
     c10:	00004f11 	.word	0x00004f11
     c14:	3ff00000 	.word	0x3ff00000
     c18:	000043a9 	.word	0x000043a9
     c1c:	0000553d 	.word	0x0000553d
     c20:	00001bb9 	.word	0x00001bb9
     c24:	40080000 	.word	0x40080000
     c28:	00002fc5 	.word	0x00002fc5

00000c2c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c2c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c2e:	2207      	movs	r2, #7
     c30:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     c32:	421a      	tst	r2, r3
     c34:	d1fc      	bne.n	c30 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     c36:	4770      	bx	lr

00000c38 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c3c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c3e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     c40:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c42:	8b83      	ldrh	r3, [r0, #28]
     c44:	1aed      	subs	r5, r5, r3
     c46:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     c48:	8b83      	ldrh	r3, [r0, #28]
     c4a:	3b01      	subs	r3, #1
     c4c:	b29b      	uxth	r3, r3
     c4e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     c50:	0113      	lsls	r3, r2, #4
     c52:	d51d      	bpl.n	c90 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     c54:	7ac3      	ldrb	r3, [r0, #11]
     c56:	2b00      	cmp	r3, #0
     c58:	d003      	beq.n	c62 <_i2c_master_read+0x2a>
     c5a:	8b83      	ldrh	r3, [r0, #28]
     c5c:	b29b      	uxth	r3, r3
     c5e:	2b01      	cmp	r3, #1
     c60:	d010      	beq.n	c84 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     c62:	8ba3      	ldrh	r3, [r4, #28]
     c64:	b29b      	uxth	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d102      	bne.n	c70 <_i2c_master_read+0x38>
		if (module->send_stop) {
     c6a:	7aa3      	ldrb	r3, [r4, #10]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d11c      	bne.n	caa <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c70:	0020      	movs	r0, r4
     c72:	4b12      	ldr	r3, [pc, #72]	; (cbc <_i2c_master_read+0x84>)
     c74:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c76:	6a23      	ldr	r3, [r4, #32]
     c78:	195d      	adds	r5, r3, r5
     c7a:	2328      	movs	r3, #40	; 0x28
     c7c:	5cf3      	ldrb	r3, [r6, r3]
     c7e:	b2db      	uxtb	r3, r3
     c80:	702b      	strb	r3, [r5, #0]
}
     c82:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c84:	6872      	ldr	r2, [r6, #4]
     c86:	2380      	movs	r3, #128	; 0x80
     c88:	02db      	lsls	r3, r3, #11
     c8a:	4313      	orrs	r3, r2
     c8c:	6073      	str	r3, [r6, #4]
     c8e:	e7e8      	b.n	c62 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     c90:	7ac3      	ldrb	r3, [r0, #11]
     c92:	2b00      	cmp	r3, #0
     c94:	d0e5      	beq.n	c62 <_i2c_master_read+0x2a>
     c96:	8b83      	ldrh	r3, [r0, #28]
     c98:	b29b      	uxth	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d1e1      	bne.n	c62 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c9e:	6872      	ldr	r2, [r6, #4]
     ca0:	2380      	movs	r3, #128	; 0x80
     ca2:	02db      	lsls	r3, r3, #11
     ca4:	4313      	orrs	r3, r2
     ca6:	6073      	str	r3, [r6, #4]
     ca8:	e7db      	b.n	c62 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     caa:	0020      	movs	r0, r4
     cac:	4b03      	ldr	r3, [pc, #12]	; (cbc <_i2c_master_read+0x84>)
     cae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     cb0:	6872      	ldr	r2, [r6, #4]
     cb2:	23c0      	movs	r3, #192	; 0xc0
     cb4:	029b      	lsls	r3, r3, #10
     cb6:	4313      	orrs	r3, r2
     cb8:	6073      	str	r3, [r6, #4]
     cba:	e7d9      	b.n	c70 <_i2c_master_read+0x38>
     cbc:	00000c2d 	.word	0x00000c2d

00000cc0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cc4:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     cc6:	8b6b      	ldrh	r3, [r5, #26]
     cc8:	075b      	lsls	r3, r3, #29
     cca:	d503      	bpl.n	cd4 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     ccc:	221e      	movs	r2, #30
     cce:	2325      	movs	r3, #37	; 0x25
     cd0:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     cd2:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     cd4:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     cd6:	8b83      	ldrh	r3, [r0, #28]
     cd8:	1af6      	subs	r6, r6, r3
     cda:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     cdc:	8b83      	ldrh	r3, [r0, #28]
     cde:	3b01      	subs	r3, #1
     ce0:	b29b      	uxth	r3, r3
     ce2:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     ce4:	4b04      	ldr	r3, [pc, #16]	; (cf8 <_i2c_master_write+0x38>)
     ce6:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     ce8:	6a23      	ldr	r3, [r4, #32]
     cea:	199e      	adds	r6, r3, r6
     cec:	7833      	ldrb	r3, [r6, #0]
     cee:	b2db      	uxtb	r3, r3
     cf0:	2228      	movs	r2, #40	; 0x28
     cf2:	54ab      	strb	r3, [r5, r2]
     cf4:	e7ed      	b.n	cd2 <_i2c_master_write+0x12>
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000c2d 	.word	0x00000c2d

00000cfc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     cfc:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     cfe:	0080      	lsls	r0, r0, #2
     d00:	4b75      	ldr	r3, [pc, #468]	; (ed8 <_i2c_master_interrupt_handler+0x1dc>)
     d02:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d04:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d06:	682b      	ldr	r3, [r5, #0]
     d08:	011b      	lsls	r3, r3, #4
     d0a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     d0c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     d0e:	7e26      	ldrb	r6, [r4, #24]
     d10:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     d12:	8b63      	ldrh	r3, [r4, #26]
     d14:	b29b      	uxth	r3, r3
     d16:	2b00      	cmp	r3, #0
     d18:	d103      	bne.n	d22 <_i2c_master_interrupt_handler+0x26>
     d1a:	8ba3      	ldrh	r3, [r4, #28]
     d1c:	b29b      	uxth	r3, r3
     d1e:	2b00      	cmp	r3, #0
     d20:	d123      	bne.n	d6a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d22:	8b63      	ldrh	r3, [r4, #26]
     d24:	b29b      	uxth	r3, r3
     d26:	2b00      	cmp	r3, #0
     d28:	d008      	beq.n	d3c <_i2c_master_interrupt_handler+0x40>
     d2a:	8ba3      	ldrh	r3, [r4, #28]
     d2c:	b29b      	uxth	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	d104      	bne.n	d3c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     d32:	3325      	adds	r3, #37	; 0x25
     d34:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d36:	2b05      	cmp	r3, #5
     d38:	d100      	bne.n	d3c <_i2c_master_interrupt_handler+0x40>
     d3a:	e06d      	b.n	e18 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d3c:	8b63      	ldrh	r3, [r4, #26]
     d3e:	b29b      	uxth	r3, r3
     d40:	2b00      	cmp	r3, #0
     d42:	d024      	beq.n	d8e <_i2c_master_interrupt_handler+0x92>
     d44:	8ba3      	ldrh	r3, [r4, #28]
     d46:	b29b      	uxth	r3, r3
     d48:	2b00      	cmp	r3, #0
     d4a:	d020      	beq.n	d8e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     d4c:	8b6b      	ldrh	r3, [r5, #26]
     d4e:	069b      	lsls	r3, r3, #26
     d50:	d500      	bpl.n	d54 <_i2c_master_interrupt_handler+0x58>
     d52:	e081      	b.n	e58 <_i2c_master_interrupt_handler+0x15c>
     d54:	2a00      	cmp	r2, #0
     d56:	d004      	beq.n	d62 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     d58:	8ba3      	ldrh	r3, [r4, #28]
     d5a:	b29b      	uxth	r3, r3
     d5c:	2b01      	cmp	r3, #1
     d5e:	d100      	bne.n	d62 <_i2c_master_interrupt_handler+0x66>
     d60:	e07a      	b.n	e58 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d62:	2241      	movs	r2, #65	; 0x41
     d64:	2325      	movs	r3, #37	; 0x25
     d66:	54e2      	strb	r2, [r4, r3]
     d68:	e011      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     d6a:	7e2b      	ldrb	r3, [r5, #24]
     d6c:	07db      	lsls	r3, r3, #31
     d6e:	d507      	bpl.n	d80 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     d70:	2301      	movs	r3, #1
     d72:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     d74:	8b6b      	ldrh	r3, [r5, #26]
     d76:	079b      	lsls	r3, r3, #30
     d78:	d52e      	bpl.n	dd8 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     d7a:	2241      	movs	r2, #65	; 0x41
     d7c:	2325      	movs	r3, #37	; 0x25
     d7e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     d80:	8ba3      	ldrh	r3, [r4, #28]
     d82:	b29b      	uxth	r3, r3
     d84:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     d86:	2325      	movs	r3, #37	; 0x25
     d88:	5ce3      	ldrb	r3, [r4, r3]
     d8a:	2b05      	cmp	r3, #5
     d8c:	d038      	beq.n	e00 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d8e:	8b63      	ldrh	r3, [r4, #26]
     d90:	b29b      	uxth	r3, r3
     d92:	2b00      	cmp	r3, #0
     d94:	d007      	beq.n	da6 <_i2c_master_interrupt_handler+0xaa>
     d96:	8ba3      	ldrh	r3, [r4, #28]
     d98:	b29b      	uxth	r3, r3
     d9a:	2b00      	cmp	r3, #0
     d9c:	d103      	bne.n	da6 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     d9e:	3325      	adds	r3, #37	; 0x25
     da0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     da2:	2b05      	cmp	r3, #5
     da4:	d064      	beq.n	e70 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     da6:	2325      	movs	r3, #37	; 0x25
     da8:	5ce3      	ldrb	r3, [r4, r3]
     daa:	2b05      	cmp	r3, #5
     dac:	d013      	beq.n	dd6 <_i2c_master_interrupt_handler+0xda>
     dae:	2325      	movs	r3, #37	; 0x25
     db0:	5ce3      	ldrb	r3, [r4, r3]
     db2:	2b00      	cmp	r3, #0
     db4:	d00f      	beq.n	dd6 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     db6:	2303      	movs	r3, #3
     db8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     dba:	2300      	movs	r3, #0
     dbc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     dbe:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     dc0:	3325      	adds	r3, #37	; 0x25
     dc2:	5ce3      	ldrb	r3, [r4, r3]
     dc4:	2b41      	cmp	r3, #65	; 0x41
     dc6:	d003      	beq.n	dd0 <_i2c_master_interrupt_handler+0xd4>
     dc8:	7aa3      	ldrb	r3, [r4, #10]
     dca:	2b00      	cmp	r3, #0
     dcc:	d000      	beq.n	dd0 <_i2c_master_interrupt_handler+0xd4>
     dce:	e075      	b.n	ebc <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     dd0:	0773      	lsls	r3, r6, #29
     dd2:	d500      	bpl.n	dd6 <_i2c_master_interrupt_handler+0xda>
     dd4:	e07b      	b.n	ece <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     dd6:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     dd8:	8b6b      	ldrh	r3, [r5, #26]
     dda:	075b      	lsls	r3, r3, #29
     ddc:	d5d0      	bpl.n	d80 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     dde:	2218      	movs	r2, #24
     de0:	2325      	movs	r3, #37	; 0x25
     de2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     de4:	2300      	movs	r3, #0
     de6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     de8:	7aa3      	ldrb	r3, [r4, #10]
     dea:	2b00      	cmp	r3, #0
     dec:	d0c8      	beq.n	d80 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     dee:	0020      	movs	r0, r4
     df0:	4b3a      	ldr	r3, [pc, #232]	; (edc <_i2c_master_interrupt_handler+0x1e0>)
     df2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     df4:	686a      	ldr	r2, [r5, #4]
     df6:	23c0      	movs	r3, #192	; 0xc0
     df8:	029b      	lsls	r3, r3, #10
     dfa:	4313      	orrs	r3, r2
     dfc:	606b      	str	r3, [r5, #4]
     dfe:	e7bf      	b.n	d80 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e00:	331f      	adds	r3, #31
     e02:	5ce3      	ldrb	r3, [r4, r3]
     e04:	2b00      	cmp	r3, #0
     e06:	d003      	beq.n	e10 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     e08:	0020      	movs	r0, r4
     e0a:	4b35      	ldr	r3, [pc, #212]	; (ee0 <_i2c_master_interrupt_handler+0x1e4>)
     e0c:	4798      	blx	r3
     e0e:	e7be      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     e10:	0020      	movs	r0, r4
     e12:	4b34      	ldr	r3, [pc, #208]	; (ee4 <_i2c_master_interrupt_handler+0x1e8>)
     e14:	4798      	blx	r3
     e16:	e7ba      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e18:	331f      	adds	r3, #31
     e1a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e1c:	2b00      	cmp	r3, #0
     e1e:	d000      	beq.n	e22 <_i2c_master_interrupt_handler+0x126>
     e20:	e78c      	b.n	d3c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     e22:	3303      	adds	r3, #3
     e24:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e26:	2300      	movs	r3, #0
     e28:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e2a:	3325      	adds	r3, #37	; 0x25
     e2c:	2200      	movs	r2, #0
     e2e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     e30:	7aa3      	ldrb	r3, [r4, #10]
     e32:	2b00      	cmp	r3, #0
     e34:	d107      	bne.n	e46 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e36:	2301      	movs	r3, #1
     e38:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     e3a:	07f3      	lsls	r3, r6, #31
     e3c:	d5a7      	bpl.n	d8e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e3e:	68e3      	ldr	r3, [r4, #12]
     e40:	0020      	movs	r0, r4
     e42:	4798      	blx	r3
     e44:	e7a3      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     e46:	0020      	movs	r0, r4
     e48:	4b24      	ldr	r3, [pc, #144]	; (edc <_i2c_master_interrupt_handler+0x1e0>)
     e4a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e4c:	686a      	ldr	r2, [r5, #4]
     e4e:	23c0      	movs	r3, #192	; 0xc0
     e50:	029b      	lsls	r3, r3, #10
     e52:	4313      	orrs	r3, r2
     e54:	606b      	str	r3, [r5, #4]
     e56:	e7f0      	b.n	e3a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e58:	2324      	movs	r3, #36	; 0x24
     e5a:	5ce3      	ldrb	r3, [r4, r3]
     e5c:	2b00      	cmp	r3, #0
     e5e:	d103      	bne.n	e68 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     e60:	0020      	movs	r0, r4
     e62:	4b20      	ldr	r3, [pc, #128]	; (ee4 <_i2c_master_interrupt_handler+0x1e8>)
     e64:	4798      	blx	r3
     e66:	e792      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     e68:	0020      	movs	r0, r4
     e6a:	4b1d      	ldr	r3, [pc, #116]	; (ee0 <_i2c_master_interrupt_handler+0x1e4>)
     e6c:	4798      	blx	r3
     e6e:	e78e      	b.n	d8e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     e70:	331f      	adds	r3, #31
     e72:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     e74:	2b01      	cmp	r3, #1
     e76:	d196      	bne.n	da6 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     e78:	7e2b      	ldrb	r3, [r5, #24]
     e7a:	079b      	lsls	r3, r3, #30
     e7c:	d501      	bpl.n	e82 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e7e:	2302      	movs	r3, #2
     e80:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     e82:	2303      	movs	r3, #3
     e84:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     e86:	2300      	movs	r3, #0
     e88:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     e8a:	3325      	adds	r3, #37	; 0x25
     e8c:	2200      	movs	r2, #0
     e8e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     e90:	07b3      	lsls	r3, r6, #30
     e92:	d503      	bpl.n	e9c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     e94:	2324      	movs	r3, #36	; 0x24
     e96:	5ce3      	ldrb	r3, [r4, r3]
     e98:	2b01      	cmp	r3, #1
     e9a:	d00b      	beq.n	eb4 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     e9c:	07f3      	lsls	r3, r6, #31
     e9e:	d400      	bmi.n	ea2 <_i2c_master_interrupt_handler+0x1a6>
     ea0:	e781      	b.n	da6 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ea2:	2324      	movs	r3, #36	; 0x24
     ea4:	5ce3      	ldrb	r3, [r4, r3]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d000      	beq.n	eac <_i2c_master_interrupt_handler+0x1b0>
     eaa:	e77c      	b.n	da6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     eac:	68e3      	ldr	r3, [r4, #12]
     eae:	0020      	movs	r0, r4
     eb0:	4798      	blx	r3
     eb2:	e778      	b.n	da6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     eb4:	6923      	ldr	r3, [r4, #16]
     eb6:	0020      	movs	r0, r4
     eb8:	4798      	blx	r3
     eba:	e774      	b.n	da6 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     ebc:	0020      	movs	r0, r4
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <_i2c_master_interrupt_handler+0x1e0>)
     ec0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     ec2:	686a      	ldr	r2, [r5, #4]
     ec4:	23e0      	movs	r3, #224	; 0xe0
     ec6:	02db      	lsls	r3, r3, #11
     ec8:	4313      	orrs	r3, r2
     eca:	606b      	str	r3, [r5, #4]
     ecc:	e780      	b.n	dd0 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     ece:	6963      	ldr	r3, [r4, #20]
     ed0:	0020      	movs	r0, r4
     ed2:	4798      	blx	r3
}
     ed4:	e77f      	b.n	dd6 <_i2c_master_interrupt_handler+0xda>
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	200003e0 	.word	0x200003e0
     edc:	00000c2d 	.word	0x00000c2d
     ee0:	00000c39 	.word	0x00000c39
     ee4:	00000cc1 	.word	0x00000cc1

00000ee8 <disable_adc>:
	Adc *const adc_module = module_inst->hw;
     ee8:	4b0c      	ldr	r3, [pc, #48]	; (f1c <disable_adc+0x34>)
     eea:	681a      	ldr	r2, [r3, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     eec:	2080      	movs	r0, #128	; 0x80
     eee:	0400      	lsls	r0, r0, #16
     ef0:	2380      	movs	r3, #128	; 0x80
     ef2:	490b      	ldr	r1, [pc, #44]	; (f20 <disable_adc+0x38>)
     ef4:	50c8      	str	r0, [r1, r3]
     ef6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     ef8:	b25b      	sxtb	r3, r3
     efa:	2b00      	cmp	r3, #0
     efc:	dbfb      	blt.n	ef6 <disable_adc+0xe>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     efe:	230f      	movs	r3, #15
     f00:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     f02:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     f04:	7813      	ldrb	r3, [r2, #0]
     f06:	2102      	movs	r1, #2
     f08:	438b      	bics	r3, r1
     f0a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     f0c:	4b03      	ldr	r3, [pc, #12]	; (f1c <disable_adc+0x34>)
     f0e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     f10:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     f12:	b25b      	sxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	dbfb      	blt.n	f10 <disable_adc+0x28>
	};
}

static void disable_adc(void) {
	adc_disable(&adc_inst);
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	20000404 	.word	0x20000404
     f20:	e000e100 	.word	0xe000e100

00000f24 <init_cmd_list>:
void init_cmd_list() {
     f24:	b5f0      	push	{r4, r5, r6, r7, lr}
     f26:	46de      	mov	lr, fp
     f28:	4657      	mov	r7, sl
     f2a:	464e      	mov	r6, r9
     f2c:	4645      	mov	r5, r8
     f2e:	b5e0      	push	{r5, r6, r7, lr}
     f30:	b085      	sub	sp, #20
	cmd_list = (struct option_list) {
     f32:	4b37      	ldr	r3, [pc, #220]	; (1010 <init_cmd_list+0xec>)
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	469a      	mov	sl, r3
     f38:	4b36      	ldr	r3, [pc, #216]	; (1014 <init_cmd_list+0xf0>)
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	4699      	mov	r9, r3
     f3e:	4b36      	ldr	r3, [pc, #216]	; (1018 <init_cmd_list+0xf4>)
     f40:	6819      	ldr	r1, [r3, #0]
     f42:	4b36      	ldr	r3, [pc, #216]	; (101c <init_cmd_list+0xf8>)
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	469c      	mov	ip, r3
     f48:	4b35      	ldr	r3, [pc, #212]	; (1020 <init_cmd_list+0xfc>)
     f4a:	681f      	ldr	r7, [r3, #0]
     f4c:	4b35      	ldr	r3, [pc, #212]	; (1024 <init_cmd_list+0x100>)
     f4e:	681e      	ldr	r6, [r3, #0]
     f50:	4b35      	ldr	r3, [pc, #212]	; (1028 <init_cmd_list+0x104>)
     f52:	681d      	ldr	r5, [r3, #0]
     f54:	4b35      	ldr	r3, [pc, #212]	; (102c <init_cmd_list+0x108>)
     f56:	681c      	ldr	r4, [r3, #0]
     f58:	9401      	str	r4, [sp, #4]
     f5a:	4b35      	ldr	r3, [pc, #212]	; (1030 <init_cmd_list+0x10c>)
     f5c:	6818      	ldr	r0, [r3, #0]
     f5e:	4b35      	ldr	r3, [pc, #212]	; (1034 <init_cmd_list+0x110>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	4698      	mov	r8, r3
     f64:	4b34      	ldr	r3, [pc, #208]	; (1038 <init_cmd_list+0x114>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	9302      	str	r3, [sp, #8]
     f6a:	4b34      	ldr	r3, [pc, #208]	; (103c <init_cmd_list+0x118>)
     f6c:	681a      	ldr	r2, [r3, #0]
     f6e:	9203      	str	r2, [sp, #12]
     f70:	4b33      	ldr	r3, [pc, #204]	; (1040 <init_cmd_list+0x11c>)
     f72:	4a34      	ldr	r2, [pc, #208]	; (1044 <init_cmd_list+0x120>)
     f74:	6812      	ldr	r2, [r2, #0]
     f76:	601a      	str	r2, [r3, #0]
     f78:	4a33      	ldr	r2, [pc, #204]	; (1048 <init_cmd_list+0x124>)
     f7a:	605a      	str	r2, [r3, #4]
     f7c:	4c33      	ldr	r4, [pc, #204]	; (104c <init_cmd_list+0x128>)
     f7e:	609c      	str	r4, [r3, #8]
     f80:	4654      	mov	r4, sl
     f82:	60dc      	str	r4, [r3, #12]
     f84:	611a      	str	r2, [r3, #16]
     f86:	4c32      	ldr	r4, [pc, #200]	; (1050 <init_cmd_list+0x12c>)
     f88:	615c      	str	r4, [r3, #20]
     f8a:	464c      	mov	r4, r9
     f8c:	619c      	str	r4, [r3, #24]
     f8e:	61da      	str	r2, [r3, #28]
     f90:	4c30      	ldr	r4, [pc, #192]	; (1054 <init_cmd_list+0x130>)
     f92:	621c      	str	r4, [r3, #32]
     f94:	6259      	str	r1, [r3, #36]	; 0x24
     f96:	4930      	ldr	r1, [pc, #192]	; (1058 <init_cmd_list+0x134>)
     f98:	6299      	str	r1, [r3, #40]	; 0x28
     f9a:	4c30      	ldr	r4, [pc, #192]	; (105c <init_cmd_list+0x138>)
     f9c:	62dc      	str	r4, [r3, #44]	; 0x2c
     f9e:	4664      	mov	r4, ip
     fa0:	631c      	str	r4, [r3, #48]	; 0x30
     fa2:	6359      	str	r1, [r3, #52]	; 0x34
     fa4:	4c2e      	ldr	r4, [pc, #184]	; (1060 <init_cmd_list+0x13c>)
     fa6:	639c      	str	r4, [r3, #56]	; 0x38
     fa8:	63df      	str	r7, [r3, #60]	; 0x3c
     faa:	6419      	str	r1, [r3, #64]	; 0x40
     fac:	4f2d      	ldr	r7, [pc, #180]	; (1064 <init_cmd_list+0x140>)
     fae:	645f      	str	r7, [r3, #68]	; 0x44
     fb0:	649e      	str	r6, [r3, #72]	; 0x48
     fb2:	64da      	str	r2, [r3, #76]	; 0x4c
     fb4:	4e2c      	ldr	r6, [pc, #176]	; (1068 <init_cmd_list+0x144>)
     fb6:	651e      	str	r6, [r3, #80]	; 0x50
     fb8:	655d      	str	r5, [r3, #84]	; 0x54
     fba:	659a      	str	r2, [r3, #88]	; 0x58
     fbc:	4d2b      	ldr	r5, [pc, #172]	; (106c <init_cmd_list+0x148>)
     fbe:	65dd      	str	r5, [r3, #92]	; 0x5c
     fc0:	9c01      	ldr	r4, [sp, #4]
     fc2:	661c      	str	r4, [r3, #96]	; 0x60
     fc4:	4c2a      	ldr	r4, [pc, #168]	; (1070 <init_cmd_list+0x14c>)
     fc6:	665c      	str	r4, [r3, #100]	; 0x64
     fc8:	4d2a      	ldr	r5, [pc, #168]	; (1074 <init_cmd_list+0x150>)
     fca:	669d      	str	r5, [r3, #104]	; 0x68
     fcc:	66d8      	str	r0, [r3, #108]	; 0x6c
     fce:	671c      	str	r4, [r3, #112]	; 0x70
     fd0:	4829      	ldr	r0, [pc, #164]	; (1078 <init_cmd_list+0x154>)
     fd2:	6758      	str	r0, [r3, #116]	; 0x74
     fd4:	4644      	mov	r4, r8
     fd6:	679c      	str	r4, [r3, #120]	; 0x78
     fd8:	67d9      	str	r1, [r3, #124]	; 0x7c
     fda:	4828      	ldr	r0, [pc, #160]	; (107c <init_cmd_list+0x158>)
     fdc:	2180      	movs	r1, #128	; 0x80
     fde:	5058      	str	r0, [r3, r1]
     fe0:	3104      	adds	r1, #4
     fe2:	9802      	ldr	r0, [sp, #8]
     fe4:	5058      	str	r0, [r3, r1]
     fe6:	3104      	adds	r1, #4
     fe8:	505a      	str	r2, [r3, r1]
     fea:	4825      	ldr	r0, [pc, #148]	; (1080 <init_cmd_list+0x15c>)
     fec:	3104      	adds	r1, #4
     fee:	5058      	str	r0, [r3, r1]
     ff0:	3104      	adds	r1, #4
     ff2:	9803      	ldr	r0, [sp, #12]
     ff4:	5058      	str	r0, [r3, r1]
     ff6:	3104      	adds	r1, #4
     ff8:	505a      	str	r2, [r3, r1]
     ffa:	4922      	ldr	r1, [pc, #136]	; (1084 <init_cmd_list+0x160>)
     ffc:	2298      	movs	r2, #152	; 0x98
     ffe:	5099      	str	r1, [r3, r2]
}
    1000:	b005      	add	sp, #20
    1002:	bc3c      	pop	{r2, r3, r4, r5}
    1004:	4690      	mov	r8, r2
    1006:	4699      	mov	r9, r3
    1008:	46a2      	mov	sl, r4
    100a:	46ab      	mov	fp, r5
    100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	20000030 	.word	0x20000030
    1014:	2000002c 	.word	0x2000002c
    1018:	2000000c 	.word	0x2000000c
    101c:	20000004 	.word	0x20000004
    1020:	20000008 	.word	0x20000008
    1024:	2000001c 	.word	0x2000001c
    1028:	20000018 	.word	0x20000018
    102c:	20000028 	.word	0x20000028
    1030:	20000024 	.word	0x20000024
    1034:	20000000 	.word	0x20000000
    1038:	20000020 	.word	0x20000020
    103c:	20000014 	.word	0x20000014
    1040:	20000300 	.word	0x20000300
    1044:	20000010 	.word	0x20000010
    1048:	0000781c 	.word	0x0000781c
    104c:	000079cc 	.word	0x000079cc
    1050:	000079e4 	.word	0x000079e4
    1054:	00007a0c 	.word	0x00007a0c
    1058:	00007a34 	.word	0x00007a34
    105c:	00007a48 	.word	0x00007a48
    1060:	00007a6c 	.word	0x00007a6c
    1064:	00007a90 	.word	0x00007a90
    1068:	00007aac 	.word	0x00007aac
    106c:	00007ac4 	.word	0x00007ac4
    1070:	00007adc 	.word	0x00007adc
    1074:	00007b00 	.word	0x00007b00
    1078:	00007b20 	.word	0x00007b20
    107c:	00007b44 	.word	0x00007b44
    1080:	00007b68 	.word	0x00007b68
    1084:	00007bb0 	.word	0x00007bb0

00001088 <handle_help>:
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
	}
}

void handle_help() {
    1088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Command List:\r\n");
    108a:	4808      	ldr	r0, [pc, #32]	; (10ac <handle_help+0x24>)
    108c:	4b08      	ldr	r3, [pc, #32]	; (10b0 <handle_help+0x28>)
    108e:	4798      	blx	r3
    1090:	4c08      	ldr	r4, [pc, #32]	; (10b4 <handle_help+0x2c>)
    1092:	0027      	movs	r7, r4
    1094:	379c      	adds	r7, #156	; 0x9c
	for(int i = 0; i < OPTION_COUNT; i++) {
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
    1096:	4e08      	ldr	r6, [pc, #32]	; (10b8 <handle_help+0x30>)
    1098:	4d08      	ldr	r5, [pc, #32]	; (10bc <handle_help+0x34>)
    109a:	68a3      	ldr	r3, [r4, #8]
    109c:	6862      	ldr	r2, [r4, #4]
    109e:	6821      	ldr	r1, [r4, #0]
    10a0:	0030      	movs	r0, r6
    10a2:	47a8      	blx	r5
    10a4:	340c      	adds	r4, #12
	for(int i = 0; i < OPTION_COUNT; i++) {
    10a6:	42bc      	cmp	r4, r7
    10a8:	d1f7      	bne.n	109a <handle_help+0x12>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
    10aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10ac:	00007838 	.word	0x00007838
    10b0:	00005975 	.word	0x00005975
    10b4:	20000300 	.word	0x20000300
    10b8:	00007848 	.word	0x00007848
    10bc:	00005881 	.word	0x00005881

000010c0 <handle_ver_bl>:


void handle_ver_bl() {
    10c0:	b510      	push	{r4, lr}
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
    10c2:	4902      	ldr	r1, [pc, #8]	; (10cc <handle_ver_bl+0xc>)
    10c4:	4802      	ldr	r0, [pc, #8]	; (10d0 <handle_ver_bl+0x10>)
    10c6:	4b03      	ldr	r3, [pc, #12]	; (10d4 <handle_ver_bl+0x14>)
    10c8:	4798      	blx	r3
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	000079a8 	.word	0x000079a8
    10d0:	000079b0 	.word	0x000079b0
    10d4:	00005881 	.word	0x00005881

000010d8 <handle_ver_app>:

void handle_ver_app() {
    10d8:	b510      	push	{r4, lr}
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
    10da:	4902      	ldr	r1, [pc, #8]	; (10e4 <handle_ver_app+0xc>)
    10dc:	4802      	ldr	r0, [pc, #8]	; (10e8 <handle_ver_app+0x10>)
    10de:	4b03      	ldr	r3, [pc, #12]	; (10ec <handle_ver_app+0x14>)
    10e0:	4798      	blx	r3
}
    10e2:	bd10      	pop	{r4, pc}
    10e4:	000079a8 	.word	0x000079a8
    10e8:	0000798c 	.word	0x0000798c
    10ec:	00005881 	.word	0x00005881

000010f0 <handle_gpio_get>:
	port_pin_set_output_level(pin, level);
		
	printf("Not implemented yet!\r\n");
}

void handle_gpio_get(char port, int pin_num) {
    10f0:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->OUT.reg & pin_mask);
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <handle_gpio_get+0x18>)
    10f4:	6919      	ldr	r1, [r3, #16]
    10f6:	0749      	lsls	r1, r1, #29
    10f8:	0fc9      	lsrs	r1, r1, #31
	// Hard-coded testing
	uint8_t pin = PIN_PB02;
	bool level;
	level = port_pin_get_output_level(pin);
	
	printf("%d\r\n", level);
    10fa:	4804      	ldr	r0, [pc, #16]	; (110c <handle_gpio_get+0x1c>)
    10fc:	4b04      	ldr	r3, [pc, #16]	; (1110 <handle_gpio_get+0x20>)
    10fe:	4798      	blx	r3
		
	printf("Not implemented yet!\r\n");
    1100:	4804      	ldr	r0, [pc, #16]	; (1114 <handle_gpio_get+0x24>)
    1102:	4b05      	ldr	r3, [pc, #20]	; (1118 <handle_gpio_get+0x28>)
    1104:	4798      	blx	r3
}
    1106:	bd10      	pop	{r4, pc}
    1108:	41004480 	.word	0x41004480
    110c:	00007818 	.word	0x00007818
    1110:	00005881 	.word	0x00005881
    1114:	00007820 	.word	0x00007820
    1118:	00005975 	.word	0x00005975

0000111c <handle_mac>:

void handle_mac() {
    111c:	b510      	push	{r4, lr}
	char* dummy_mac = "01:23:45:67:89:ab";
	printf("MAC Address: %s\r\n", dummy_mac);
    111e:	4902      	ldr	r1, [pc, #8]	; (1128 <handle_mac+0xc>)
    1120:	4802      	ldr	r0, [pc, #8]	; (112c <handle_mac+0x10>)
    1122:	4b03      	ldr	r3, [pc, #12]	; (1130 <handle_mac+0x14>)
    1124:	4798      	blx	r3
}
    1126:	bd10      	pop	{r4, pc}
    1128:	0000787c 	.word	0x0000787c
    112c:	00007890 	.word	0x00007890
    1130:	00005881 	.word	0x00005881

00001134 <handle_ip>:

void handle_ip() {
    1134:	b510      	push	{r4, lr}
	char* dummy_ip = "255.255.255.255";
	printf("IP Address: %s\r\n", dummy_ip);
    1136:	4902      	ldr	r1, [pc, #8]	; (1140 <handle_ip+0xc>)
    1138:	4802      	ldr	r0, [pc, #8]	; (1144 <handle_ip+0x10>)
    113a:	4b03      	ldr	r3, [pc, #12]	; (1148 <handle_ip+0x14>)
    113c:	4798      	blx	r3
}
    113e:	bd10      	pop	{r4, pc}
    1140:	00007858 	.word	0x00007858
    1144:	00007868 	.word	0x00007868
    1148:	00005881 	.word	0x00005881

0000114c <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
    114c:	b5f0      	push	{r4, r5, r6, r7, lr}
    114e:	46c6      	mov	lr, r8
    1150:	b500      	push	{lr}
    1152:	0006      	movs	r6, r0
    1154:	000d      	movs	r5, r1
	printf("Reading from Gyro...\r\n");
    1156:	480f      	ldr	r0, [pc, #60]	; (1194 <handle_read_gyro+0x48>)
    1158:	4b0f      	ldr	r3, [pc, #60]	; (1198 <handle_read_gyro+0x4c>)
    115a:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
    115c:	2e00      	cmp	r6, #0
    115e:	dd12      	ble.n	1186 <handle_read_gyro+0x3a>
    1160:	2400      	movs	r4, #0
		printf("%d\r\n", 9);
    1162:	4f0e      	ldr	r7, [pc, #56]	; (119c <handle_read_gyro+0x50>)
		delay_ms(interval_ms);
    1164:	4b0e      	ldr	r3, [pc, #56]	; (11a0 <handle_read_gyro+0x54>)
    1166:	4698      	mov	r8, r3
    1168:	e004      	b.n	1174 <handle_read_gyro+0x28>
    116a:	2001      	movs	r0, #1
    116c:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
    116e:	3401      	adds	r4, #1
    1170:	42a6      	cmp	r6, r4
    1172:	d008      	beq.n	1186 <handle_read_gyro+0x3a>
		printf("%d\r\n", 9);
    1174:	2109      	movs	r1, #9
    1176:	480b      	ldr	r0, [pc, #44]	; (11a4 <handle_read_gyro+0x58>)
    1178:	47b8      	blx	r7
		delay_ms(interval_ms);
    117a:	2d00      	cmp	r5, #0
    117c:	d0f5      	beq.n	116a <handle_read_gyro+0x1e>
    117e:	0028      	movs	r0, r5
    1180:	4b09      	ldr	r3, [pc, #36]	; (11a8 <handle_read_gyro+0x5c>)
    1182:	4798      	blx	r3
    1184:	e7f3      	b.n	116e <handle_read_gyro+0x22>
	}
	printf("Done!\r\n");
    1186:	4809      	ldr	r0, [pc, #36]	; (11ac <handle_read_gyro+0x60>)
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <handle_read_gyro+0x4c>)
    118a:	4798      	blx	r3
}
    118c:	bc04      	pop	{r2}
    118e:	4690      	mov	r8, r2
    1190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	000078d8 	.word	0x000078d8
    1198:	00005975 	.word	0x00005975
    119c:	00005881 	.word	0x00005881
    11a0:	0000173d 	.word	0x0000173d
    11a4:	00007818 	.word	0x00007818
    11a8:	00001769 	.word	0x00001769
    11ac:	000078f0 	.word	0x000078f0

000011b0 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
    11b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11b2:	46c6      	mov	lr, r8
    11b4:	b500      	push	{lr}
    11b6:	0006      	movs	r6, r0
    11b8:	000d      	movs	r5, r1
	printf("Reading from Accelerometer...\r\n");
    11ba:	480f      	ldr	r0, [pc, #60]	; (11f8 <handle_read_accel+0x48>)
    11bc:	4b0f      	ldr	r3, [pc, #60]	; (11fc <handle_read_accel+0x4c>)
    11be:	4798      	blx	r3
	// Dummy data
	for(int i = 0; i < num_readings; i++) {
    11c0:	2e00      	cmp	r6, #0
    11c2:	dd12      	ble.n	11ea <handle_read_accel+0x3a>
    11c4:	2400      	movs	r4, #0
		printf("%d\r\n", 8);
    11c6:	4f0e      	ldr	r7, [pc, #56]	; (1200 <handle_read_accel+0x50>)
		delay_ms(interval_ms);
    11c8:	4b0e      	ldr	r3, [pc, #56]	; (1204 <handle_read_accel+0x54>)
    11ca:	4698      	mov	r8, r3
    11cc:	e004      	b.n	11d8 <handle_read_accel+0x28>
    11ce:	2001      	movs	r0, #1
    11d0:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
    11d2:	3401      	adds	r4, #1
    11d4:	42a6      	cmp	r6, r4
    11d6:	d008      	beq.n	11ea <handle_read_accel+0x3a>
		printf("%d\r\n", 8);
    11d8:	2108      	movs	r1, #8
    11da:	480b      	ldr	r0, [pc, #44]	; (1208 <handle_read_accel+0x58>)
    11dc:	47b8      	blx	r7
		delay_ms(interval_ms);
    11de:	2d00      	cmp	r5, #0
    11e0:	d0f5      	beq.n	11ce <handle_read_accel+0x1e>
    11e2:	0028      	movs	r0, r5
    11e4:	4b09      	ldr	r3, [pc, #36]	; (120c <handle_read_accel+0x5c>)
    11e6:	4798      	blx	r3
    11e8:	e7f3      	b.n	11d2 <handle_read_accel+0x22>
	}
	printf("Done!\r\n");
    11ea:	4809      	ldr	r0, [pc, #36]	; (1210 <handle_read_accel+0x60>)
    11ec:	4b03      	ldr	r3, [pc, #12]	; (11fc <handle_read_accel+0x4c>)
    11ee:	4798      	blx	r3
}
    11f0:	bc04      	pop	{r2}
    11f2:	4690      	mov	r8, r2
    11f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	000078b8 	.word	0x000078b8
    11fc:	00005975 	.word	0x00005975
    1200:	00005881 	.word	0x00005881
    1204:	0000173d 	.word	0x0000173d
    1208:	00007818 	.word	0x00007818
    120c:	00001769 	.word	0x00001769
    1210:	000078f0 	.word	0x000078f0

00001214 <handle_adc_get>:

void handle_adc_get(char port, int pin_num) {
    1214:	b530      	push	{r4, r5, lr}
    1216:	b08d      	sub	sp, #52	; 0x34
	disable_adc();
    1218:	4b31      	ldr	r3, [pc, #196]	; (12e0 <handle_adc_get+0xcc>)
    121a:	4798      	blx	r3
	adc_get_config_defaults(&config);
    121c:	4668      	mov	r0, sp
    121e:	4b31      	ldr	r3, [pc, #196]	; (12e4 <handle_adc_get+0xd0>)
    1220:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    1222:	2301      	movs	r3, #1
    1224:	466a      	mov	r2, sp
    1226:	7013      	strb	r3, [r2, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    1228:	3301      	adds	r3, #1
    122a:	7053      	strb	r3, [r2, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    122c:	33ff      	adds	r3, #255	; 0xff
    122e:	33ff      	adds	r3, #255	; 0xff
    1230:	8053      	strh	r3, [r2, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    1232:	2300      	movs	r3, #0
    1234:	7113      	strb	r3, [r2, #4]
	adc_init(&adc_inst, ADC, &config);
    1236:	4c2c      	ldr	r4, [pc, #176]	; (12e8 <handle_adc_get+0xd4>)
    1238:	492c      	ldr	r1, [pc, #176]	; (12ec <handle_adc_get+0xd8>)
    123a:	0020      	movs	r0, r4
    123c:	4b2c      	ldr	r3, [pc, #176]	; (12f0 <handle_adc_get+0xdc>)
    123e:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1240:	6822      	ldr	r2, [r4, #0]
    1242:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1244:	b25b      	sxtb	r3, r3
    1246:	2b00      	cmp	r3, #0
    1248:	dbfb      	blt.n	1242 <handle_adc_get+0x2e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    124a:	2180      	movs	r1, #128	; 0x80
    124c:	0409      	lsls	r1, r1, #16
    124e:	4b29      	ldr	r3, [pc, #164]	; (12f4 <handle_adc_get+0xe0>)
    1250:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1252:	230f      	movs	r3, #15
    1254:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1256:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1258:	7813      	ldrb	r3, [r2, #0]
    125a:	2102      	movs	r1, #2
    125c:	430b      	orrs	r3, r1
    125e:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1260:	4b21      	ldr	r3, [pc, #132]	; (12e8 <handle_adc_get+0xd4>)
    1262:	6818      	ldr	r0, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1264:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1266:	b25b      	sxtb	r3, r3
    1268:	2b00      	cmp	r3, #0
    126a:	dbfb      	blt.n	1264 <handle_adc_get+0x50>
    126c:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    126e:	b25b      	sxtb	r3, r3
    1270:	2b00      	cmp	r3, #0
    1272:	dbfb      	blt.n	126c <handle_adc_get+0x58>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1274:	7b03      	ldrb	r3, [r0, #12]
    1276:	2202      	movs	r2, #2
    1278:	4313      	orrs	r3, r2
    127a:	7303      	strb	r3, [r0, #12]
    127c:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    127e:	b25b      	sxtb	r3, r3
    1280:	2b00      	cmp	r3, #0
    1282:	dbfb      	blt.n	127c <handle_adc_get+0x68>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1284:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1286:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1288:	2402      	movs	r4, #2
    128a:	e001      	b.n	1290 <handle_adc_get+0x7c>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    128c:	4211      	tst	r1, r2
    128e:	d10a      	bne.n	12a6 <handle_adc_get+0x92>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1290:	7e03      	ldrb	r3, [r0, #24]
    1292:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1294:	000a      	movs	r2, r1
    1296:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1298:	421d      	tst	r5, r3
    129a:	d000      	beq.n	129e <handle_adc_get+0x8a>
		status_flags |= ADC_STATUS_WINDOW;
    129c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    129e:	421c      	tst	r4, r3
    12a0:	d0f4      	beq.n	128c <handle_adc_get+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    12a2:	432a      	orrs	r2, r5
    12a4:	e7f2      	b.n	128c <handle_adc_get+0x78>
    12a6:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    12a8:	b25b      	sxtb	r3, r3
    12aa:	2b00      	cmp	r3, #0
    12ac:	dbfb      	blt.n	12a6 <handle_adc_get+0x92>
	*result = adc_module->RESULT.reg;
    12ae:	8b41      	ldrh	r1, [r0, #26]
    12b0:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
    12b2:	2301      	movs	r3, #1
    12b4:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    12b6:	7e02      	ldrb	r2, [r0, #24]
    12b8:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    12ba:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    12bc:	0754      	lsls	r4, r2, #29
    12be:	d501      	bpl.n	12c4 <handle_adc_get+0xb0>
		status_flags |= ADC_STATUS_WINDOW;
    12c0:	2402      	movs	r4, #2
    12c2:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    12c4:	0792      	lsls	r2, r2, #30
    12c6:	d501      	bpl.n	12cc <handle_adc_get+0xb8>
		status_flags |= ADC_STATUS_OVERRUN;
    12c8:	2204      	movs	r2, #4
    12ca:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    12cc:	075b      	lsls	r3, r3, #29
    12ce:	d501      	bpl.n	12d4 <handle_adc_get+0xc0>
	adc_module->INTFLAG.reg = int_flags;
    12d0:	2302      	movs	r3, #2
    12d2:	7603      	strb	r3, [r0, #24]
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
	
	printf("ADC Result: %d\r\n", result);
    12d4:	4808      	ldr	r0, [pc, #32]	; (12f8 <handle_adc_get+0xe4>)
    12d6:	4b09      	ldr	r3, [pc, #36]	; (12fc <handle_adc_get+0xe8>)
    12d8:	4798      	blx	r3
}
    12da:	b00d      	add	sp, #52	; 0x34
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	00000ee9 	.word	0x00000ee9
    12e4:	00000405 	.word	0x00000405
    12e8:	20000404 	.word	0x20000404
    12ec:	42004000 	.word	0x42004000
    12f0:	0000044d 	.word	0x0000044d
    12f4:	e000e100 	.word	0xe000e100
    12f8:	0000780c 	.word	0x0000780c
    12fc:	00005881 	.word	0x00005881

00001300 <handle_mcu_temp>:

void handle_mcu_temp() {
    1300:	b570      	push	{r4, r5, r6, lr}
	disable_adc();
    1302:	4b25      	ldr	r3, [pc, #148]	; (1398 <handle_mcu_temp+0x98>)
    1304:	4798      	blx	r3
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    1306:	4a25      	ldr	r2, [pc, #148]	; (139c <handle_mcu_temp+0x9c>)
    1308:	6c13      	ldr	r3, [r2, #64]	; 0x40
    130a:	2102      	movs	r1, #2
    130c:	430b      	orrs	r3, r1
    130e:	6413      	str	r3, [r2, #64]	; 0x40
	
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
	
	configure_adc_temp();
    1310:	4b23      	ldr	r3, [pc, #140]	; (13a0 <handle_mcu_temp+0xa0>)
    1312:	4798      	blx	r3
	
	load_calibration_data();
    1314:	4b23      	ldr	r3, [pc, #140]	; (13a4 <handle_mcu_temp+0xa4>)
    1316:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1318:	4b23      	ldr	r3, [pc, #140]	; (13a8 <handle_mcu_temp+0xa8>)
    131a:	6819      	ldr	r1, [r3, #0]
    131c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    131e:	b25b      	sxtb	r3, r3
    1320:	2b00      	cmp	r3, #0
    1322:	dbfb      	blt.n	131c <handle_mcu_temp+0x1c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1324:	7b0b      	ldrb	r3, [r1, #12]
    1326:	2202      	movs	r2, #2
    1328:	4313      	orrs	r3, r2
    132a:	730b      	strb	r3, [r1, #12]
    132c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    132e:	b25b      	sxtb	r3, r3
    1330:	2b00      	cmp	r3, #0
    1332:	dbfb      	blt.n	132c <handle_mcu_temp+0x2c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1334:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1336:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1338:	2402      	movs	r4, #2
    133a:	e001      	b.n	1340 <handle_mcu_temp+0x40>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    133c:	4210      	tst	r0, r2
    133e:	d10a      	bne.n	1356 <handle_mcu_temp+0x56>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1340:	7e0b      	ldrb	r3, [r1, #24]
    1342:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1344:	0002      	movs	r2, r0
    1346:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1348:	421d      	tst	r5, r3
    134a:	d000      	beq.n	134e <handle_mcu_temp+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    134c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    134e:	421c      	tst	r4, r3
    1350:	d0f4      	beq.n	133c <handle_mcu_temp+0x3c>
		status_flags |= ADC_STATUS_OVERRUN;
    1352:	432a      	orrs	r2, r5
    1354:	e7f2      	b.n	133c <handle_mcu_temp+0x3c>
    1356:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1358:	b25b      	sxtb	r3, r3
    135a:	2b00      	cmp	r3, #0
    135c:	dbfb      	blt.n	1356 <handle_mcu_temp+0x56>
	*result = adc_module->RESULT.reg;
    135e:	8b4b      	ldrh	r3, [r1, #26]
	adc_module->INTFLAG.reg = int_flags;
    1360:	2301      	movs	r3, #1
    1362:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1364:	7e0a      	ldrb	r2, [r1, #24]
    1366:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1368:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    136a:	0750      	lsls	r0, r2, #29
    136c:	d501      	bpl.n	1372 <handle_mcu_temp+0x72>
		status_flags |= ADC_STATUS_WINDOW;
    136e:	2002      	movs	r0, #2
    1370:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1372:	0792      	lsls	r2, r2, #30
    1374:	d501      	bpl.n	137a <handle_mcu_temp+0x7a>
		status_flags |= ADC_STATUS_OVERRUN;
    1376:	2204      	movs	r2, #4
    1378:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    137a:	075b      	lsls	r3, r3, #29
    137c:	d501      	bpl.n	1382 <handle_mcu_temp+0x82>
	adc_module->INTFLAG.reg = int_flags;
    137e:	2302      	movs	r3, #2
    1380:	760b      	strb	r3, [r1, #24]
	
	do {
		/* Wait */
	} while(adc_read(&adc_inst, &result) == STATUS_BUSY);
	
	float temp = calculate_temperature(2500);
    1382:	480a      	ldr	r0, [pc, #40]	; (13ac <handle_mcu_temp+0xac>)
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <handle_mcu_temp+0xb0>)
    1386:	4798      	blx	r3
	
	printf("Temp Result: %.6f\r\n", temp);
    1388:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <handle_mcu_temp+0xb4>)
    138a:	4798      	blx	r3
    138c:	0002      	movs	r2, r0
    138e:	000b      	movs	r3, r1
    1390:	4809      	ldr	r0, [pc, #36]	; (13b8 <handle_mcu_temp+0xb8>)
    1392:	490a      	ldr	r1, [pc, #40]	; (13bc <handle_mcu_temp+0xbc>)
    1394:	4788      	blx	r1
}
    1396:	bd70      	pop	{r4, r5, r6, pc}
    1398:	00000ee9 	.word	0x00000ee9
    139c:	40000800 	.word	0x40000800
    13a0:	00000115 	.word	0x00000115
    13a4:	000001d5 	.word	0x000001d5
    13a8:	20000404 	.word	0x20000404
    13ac:	000009c4 	.word	0x000009c4
    13b0:	00000339 	.word	0x00000339
    13b4:	00005615 	.word	0x00005615
    13b8:	000078a4 	.word	0x000078a4
    13bc:	00005881 	.word	0x00005881

000013c0 <handle_user_input>:
void handle_user_input(char* input) {
    13c0:	b570      	push	{r4, r5, r6, lr}
	char* cmd = strtok(input, " ");
    13c2:	49ab      	ldr	r1, [pc, #684]	; (1670 <handle_user_input+0x2b0>)
    13c4:	4bab      	ldr	r3, [pc, #684]	; (1674 <handle_user_input+0x2b4>)
    13c6:	4798      	blx	r3
    13c8:	0004      	movs	r4, r0
	if(strcmp(CMD_HELP, cmd) == 0) { 
    13ca:	4bab      	ldr	r3, [pc, #684]	; (1678 <handle_user_input+0x2b8>)
    13cc:	6818      	ldr	r0, [r3, #0]
    13ce:	0021      	movs	r1, r4
    13d0:	4baa      	ldr	r3, [pc, #680]	; (167c <handle_user_input+0x2bc>)
    13d2:	4798      	blx	r3
    13d4:	2800      	cmp	r0, #0
    13d6:	d05f      	beq.n	1498 <handle_user_input+0xd8>
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
    13d8:	4ba9      	ldr	r3, [pc, #676]	; (1680 <handle_user_input+0x2c0>)
    13da:	6818      	ldr	r0, [r3, #0]
    13dc:	0021      	movs	r1, r4
    13de:	4ba7      	ldr	r3, [pc, #668]	; (167c <handle_user_input+0x2bc>)
    13e0:	4798      	blx	r3
    13e2:	2800      	cmp	r0, #0
    13e4:	d05b      	beq.n	149e <handle_user_input+0xde>
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
    13e6:	4ba7      	ldr	r3, [pc, #668]	; (1684 <handle_user_input+0x2c4>)
    13e8:	6818      	ldr	r0, [r3, #0]
    13ea:	0021      	movs	r1, r4
    13ec:	4ba3      	ldr	r3, [pc, #652]	; (167c <handle_user_input+0x2bc>)
    13ee:	4798      	blx	r3
    13f0:	2800      	cmp	r0, #0
    13f2:	d057      	beq.n	14a4 <handle_user_input+0xe4>
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
    13f4:	4ba4      	ldr	r3, [pc, #656]	; (1688 <handle_user_input+0x2c8>)
    13f6:	6818      	ldr	r0, [r3, #0]
    13f8:	0021      	movs	r1, r4
    13fa:	4ba0      	ldr	r3, [pc, #640]	; (167c <handle_user_input+0x2bc>)
    13fc:	4798      	blx	r3
    13fe:	2800      	cmp	r0, #0
    1400:	d053      	beq.n	14aa <handle_user_input+0xea>
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
    1402:	4ba2      	ldr	r3, [pc, #648]	; (168c <handle_user_input+0x2cc>)
    1404:	6818      	ldr	r0, [r3, #0]
    1406:	0021      	movs	r1, r4
    1408:	4b9c      	ldr	r3, [pc, #624]	; (167c <handle_user_input+0x2bc>)
    140a:	4798      	blx	r3
    140c:	2800      	cmp	r0, #0
    140e:	d100      	bne.n	1412 <handle_user_input+0x52>
    1410:	e074      	b.n	14fc <handle_user_input+0x13c>
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) {
    1412:	4b9f      	ldr	r3, [pc, #636]	; (1690 <handle_user_input+0x2d0>)
    1414:	6818      	ldr	r0, [r3, #0]
    1416:	0021      	movs	r1, r4
    1418:	4b98      	ldr	r3, [pc, #608]	; (167c <handle_user_input+0x2bc>)
    141a:	4798      	blx	r3
    141c:	2800      	cmp	r0, #0
    141e:	d100      	bne.n	1422 <handle_user_input+0x62>
    1420:	e095      	b.n	154e <handle_user_input+0x18e>
	else if(strcmp(CMD_MAC, cmd) == 0) { 
    1422:	4b9c      	ldr	r3, [pc, #624]	; (1694 <handle_user_input+0x2d4>)
    1424:	6818      	ldr	r0, [r3, #0]
    1426:	0021      	movs	r1, r4
    1428:	4b94      	ldr	r3, [pc, #592]	; (167c <handle_user_input+0x2bc>)
    142a:	4798      	blx	r3
    142c:	2800      	cmp	r0, #0
    142e:	d100      	bne.n	1432 <handle_user_input+0x72>
    1430:	e0b5      	b.n	159e <handle_user_input+0x1de>
	else if(strcmp(CMD_IP, cmd) == 0) { 
    1432:	4b99      	ldr	r3, [pc, #612]	; (1698 <handle_user_input+0x2d8>)
    1434:	6818      	ldr	r0, [r3, #0]
    1436:	0021      	movs	r1, r4
    1438:	4b90      	ldr	r3, [pc, #576]	; (167c <handle_user_input+0x2bc>)
    143a:	4798      	blx	r3
    143c:	2800      	cmp	r0, #0
    143e:	d100      	bne.n	1442 <handle_user_input+0x82>
    1440:	e0b0      	b.n	15a4 <handle_user_input+0x1e4>
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
    1442:	4b96      	ldr	r3, [pc, #600]	; (169c <handle_user_input+0x2dc>)
    1444:	6818      	ldr	r0, [r3, #0]
    1446:	0021      	movs	r1, r4
    1448:	4b8c      	ldr	r3, [pc, #560]	; (167c <handle_user_input+0x2bc>)
    144a:	4798      	blx	r3
    144c:	2800      	cmp	r0, #0
    144e:	d100      	bne.n	1452 <handle_user_input+0x92>
    1450:	e0ab      	b.n	15aa <handle_user_input+0x1ea>
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
    1452:	4b93      	ldr	r3, [pc, #588]	; (16a0 <handle_user_input+0x2e0>)
    1454:	6818      	ldr	r0, [r3, #0]
    1456:	0021      	movs	r1, r4
    1458:	4b88      	ldr	r3, [pc, #544]	; (167c <handle_user_input+0x2bc>)
    145a:	4798      	blx	r3
    145c:	2800      	cmp	r0, #0
    145e:	d100      	bne.n	1462 <handle_user_input+0xa2>
    1460:	e0bf      	b.n	15e2 <handle_user_input+0x222>
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
    1462:	4b90      	ldr	r3, [pc, #576]	; (16a4 <handle_user_input+0x2e4>)
    1464:	6818      	ldr	r0, [r3, #0]
    1466:	0021      	movs	r1, r4
    1468:	4b84      	ldr	r3, [pc, #528]	; (167c <handle_user_input+0x2bc>)
    146a:	4798      	blx	r3
    146c:	2800      	cmp	r0, #0
    146e:	d100      	bne.n	1472 <handle_user_input+0xb2>
    1470:	e0d3      	b.n	161a <handle_user_input+0x25a>
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
    1472:	4b8d      	ldr	r3, [pc, #564]	; (16a8 <handle_user_input+0x2e8>)
    1474:	6818      	ldr	r0, [r3, #0]
    1476:	0021      	movs	r1, r4
    1478:	4b80      	ldr	r3, [pc, #512]	; (167c <handle_user_input+0x2bc>)
    147a:	4798      	blx	r3
    147c:	2800      	cmp	r0, #0
    147e:	d100      	bne.n	1482 <handle_user_input+0xc2>
    1480:	e0f3      	b.n	166a <handle_user_input+0x2aa>
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
    1482:	4b8a      	ldr	r3, [pc, #552]	; (16ac <handle_user_input+0x2ec>)
    1484:	6818      	ldr	r0, [r3, #0]
    1486:	0021      	movs	r1, r4
    1488:	4b7c      	ldr	r3, [pc, #496]	; (167c <handle_user_input+0x2bc>)
    148a:	4798      	blx	r3
    148c:	2800      	cmp	r0, #0
    148e:	d005      	beq.n	149c <handle_user_input+0xdc>
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
    1490:	4887      	ldr	r0, [pc, #540]	; (16b0 <handle_user_input+0x2f0>)
    1492:	4b88      	ldr	r3, [pc, #544]	; (16b4 <handle_user_input+0x2f4>)
    1494:	4798      	blx	r3
    1496:	e001      	b.n	149c <handle_user_input+0xdc>
		handle_help(); 
    1498:	4b87      	ldr	r3, [pc, #540]	; (16b8 <handle_user_input+0x2f8>)
    149a:	4798      	blx	r3
}
    149c:	bd70      	pop	{r4, r5, r6, pc}
		handle_ver_bl(); 
    149e:	4b87      	ldr	r3, [pc, #540]	; (16bc <handle_user_input+0x2fc>)
    14a0:	4798      	blx	r3
    14a2:	e7fb      	b.n	149c <handle_user_input+0xdc>
		handle_ver_app();
    14a4:	4b86      	ldr	r3, [pc, #536]	; (16c0 <handle_user_input+0x300>)
    14a6:	4798      	blx	r3
    14a8:	e7f8      	b.n	149c <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    14aa:	4e71      	ldr	r6, [pc, #452]	; (1670 <handle_user_input+0x2b0>)
    14ac:	0031      	movs	r1, r6
    14ae:	4d71      	ldr	r5, [pc, #452]	; (1674 <handle_user_input+0x2b4>)
    14b0:	47a8      	blx	r5
    14b2:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    14b4:	0031      	movs	r1, r6
    14b6:	2000      	movs	r0, #0
    14b8:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    14ba:	2c00      	cmp	r4, #0
    14bc:	d016      	beq.n	14ec <handle_user_input+0x12c>
    14be:	2800      	cmp	r0, #0
    14c0:	d014      	beq.n	14ec <handle_user_input+0x12c>
		int pin_num = atoi(arg2);
    14c2:	4b80      	ldr	r3, [pc, #512]	; (16c4 <handle_user_input+0x304>)
    14c4:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    14c6:	4980      	ldr	r1, [pc, #512]	; (16c8 <handle_user_input+0x308>)
    14c8:	0020      	movs	r0, r4
    14ca:	4b6c      	ldr	r3, [pc, #432]	; (167c <handle_user_input+0x2bc>)
    14cc:	4798      	blx	r3
    14ce:	2800      	cmp	r0, #0
    14d0:	d005      	beq.n	14de <handle_user_input+0x11e>
    14d2:	497e      	ldr	r1, [pc, #504]	; (16cc <handle_user_input+0x30c>)
    14d4:	0020      	movs	r0, r4
    14d6:	4b69      	ldr	r3, [pc, #420]	; (167c <handle_user_input+0x2bc>)
    14d8:	4798      	blx	r3
    14da:	2800      	cmp	r0, #0
    14dc:	d10a      	bne.n	14f4 <handle_user_input+0x134>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    14de:	2204      	movs	r2, #4
    14e0:	4b7b      	ldr	r3, [pc, #492]	; (16d0 <handle_user_input+0x310>)
    14e2:	619a      	str	r2, [r3, #24]
	printf("Not implemented yet!\r\n");
    14e4:	487b      	ldr	r0, [pc, #492]	; (16d4 <handle_user_input+0x314>)
    14e6:	4b73      	ldr	r3, [pc, #460]	; (16b4 <handle_user_input+0x2f4>)
    14e8:	4798      	blx	r3
    14ea:	e7d7      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    14ec:	487a      	ldr	r0, [pc, #488]	; (16d8 <handle_user_input+0x318>)
    14ee:	4b71      	ldr	r3, [pc, #452]	; (16b4 <handle_user_input+0x2f4>)
    14f0:	4798      	blx	r3
			return;
    14f2:	e7d3      	b.n	149c <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    14f4:	4879      	ldr	r0, [pc, #484]	; (16dc <handle_user_input+0x31c>)
    14f6:	4b6f      	ldr	r3, [pc, #444]	; (16b4 <handle_user_input+0x2f4>)
    14f8:	4798      	blx	r3
    14fa:	e7f0      	b.n	14de <handle_user_input+0x11e>
		char* arg1 = strtok(NULL, " ");
    14fc:	4e5c      	ldr	r6, [pc, #368]	; (1670 <handle_user_input+0x2b0>)
    14fe:	0031      	movs	r1, r6
    1500:	4d5c      	ldr	r5, [pc, #368]	; (1674 <handle_user_input+0x2b4>)
    1502:	47a8      	blx	r5
    1504:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    1506:	0031      	movs	r1, r6
    1508:	2000      	movs	r0, #0
    150a:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    150c:	2c00      	cmp	r4, #0
    150e:	d016      	beq.n	153e <handle_user_input+0x17e>
    1510:	2800      	cmp	r0, #0
    1512:	d014      	beq.n	153e <handle_user_input+0x17e>
		int pin_num = atoi(arg2);
    1514:	4b6b      	ldr	r3, [pc, #428]	; (16c4 <handle_user_input+0x304>)
    1516:	4798      	blx	r3
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    1518:	496b      	ldr	r1, [pc, #428]	; (16c8 <handle_user_input+0x308>)
    151a:	0020      	movs	r0, r4
    151c:	4b57      	ldr	r3, [pc, #348]	; (167c <handle_user_input+0x2bc>)
    151e:	4798      	blx	r3
    1520:	2800      	cmp	r0, #0
    1522:	d005      	beq.n	1530 <handle_user_input+0x170>
    1524:	4969      	ldr	r1, [pc, #420]	; (16cc <handle_user_input+0x30c>)
    1526:	0020      	movs	r0, r4
    1528:	4b54      	ldr	r3, [pc, #336]	; (167c <handle_user_input+0x2bc>)
    152a:	4798      	blx	r3
    152c:	2800      	cmp	r0, #0
    152e:	d10a      	bne.n	1546 <handle_user_input+0x186>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1530:	2204      	movs	r2, #4
    1532:	4b67      	ldr	r3, [pc, #412]	; (16d0 <handle_user_input+0x310>)
    1534:	615a      	str	r2, [r3, #20]
	printf("Not implemented yet!\r\n");
    1536:	4867      	ldr	r0, [pc, #412]	; (16d4 <handle_user_input+0x314>)
    1538:	4b5e      	ldr	r3, [pc, #376]	; (16b4 <handle_user_input+0x2f4>)
    153a:	4798      	blx	r3
    153c:	e7ae      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    153e:	4866      	ldr	r0, [pc, #408]	; (16d8 <handle_user_input+0x318>)
    1540:	4b5c      	ldr	r3, [pc, #368]	; (16b4 <handle_user_input+0x2f4>)
    1542:	4798      	blx	r3
			return;
    1544:	e7aa      	b.n	149c <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    1546:	4865      	ldr	r0, [pc, #404]	; (16dc <handle_user_input+0x31c>)
    1548:	4b5a      	ldr	r3, [pc, #360]	; (16b4 <handle_user_input+0x2f4>)
    154a:	4798      	blx	r3
    154c:	e7f0      	b.n	1530 <handle_user_input+0x170>
		char* arg1 = strtok(NULL, " ");
    154e:	4e48      	ldr	r6, [pc, #288]	; (1670 <handle_user_input+0x2b0>)
    1550:	0031      	movs	r1, r6
    1552:	4d48      	ldr	r5, [pc, #288]	; (1674 <handle_user_input+0x2b4>)
    1554:	47a8      	blx	r5
    1556:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    1558:	0031      	movs	r1, r6
    155a:	2000      	movs	r0, #0
    155c:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    155e:	2c00      	cmp	r4, #0
    1560:	d015      	beq.n	158e <handle_user_input+0x1ce>
    1562:	2800      	cmp	r0, #0
    1564:	d013      	beq.n	158e <handle_user_input+0x1ce>
		int pin_num = atoi(arg2);
    1566:	4b57      	ldr	r3, [pc, #348]	; (16c4 <handle_user_input+0x304>)
    1568:	4798      	blx	r3
    156a:	0005      	movs	r5, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    156c:	4956      	ldr	r1, [pc, #344]	; (16c8 <handle_user_input+0x308>)
    156e:	0020      	movs	r0, r4
    1570:	4b42      	ldr	r3, [pc, #264]	; (167c <handle_user_input+0x2bc>)
    1572:	4798      	blx	r3
    1574:	2800      	cmp	r0, #0
    1576:	d005      	beq.n	1584 <handle_user_input+0x1c4>
    1578:	4954      	ldr	r1, [pc, #336]	; (16cc <handle_user_input+0x30c>)
    157a:	0020      	movs	r0, r4
    157c:	4b3f      	ldr	r3, [pc, #252]	; (167c <handle_user_input+0x2bc>)
    157e:	4798      	blx	r3
    1580:	2800      	cmp	r0, #0
    1582:	d108      	bne.n	1596 <handle_user_input+0x1d6>
		handle_gpio_get(*port, pin_num);
    1584:	7820      	ldrb	r0, [r4, #0]
    1586:	0029      	movs	r1, r5
    1588:	4b55      	ldr	r3, [pc, #340]	; (16e0 <handle_user_input+0x320>)
    158a:	4798      	blx	r3
    158c:	e786      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    158e:	4852      	ldr	r0, [pc, #328]	; (16d8 <handle_user_input+0x318>)
    1590:	4b48      	ldr	r3, [pc, #288]	; (16b4 <handle_user_input+0x2f4>)
    1592:	4798      	blx	r3
			return;
    1594:	e782      	b.n	149c <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    1596:	4851      	ldr	r0, [pc, #324]	; (16dc <handle_user_input+0x31c>)
    1598:	4b46      	ldr	r3, [pc, #280]	; (16b4 <handle_user_input+0x2f4>)
    159a:	4798      	blx	r3
    159c:	e7f2      	b.n	1584 <handle_user_input+0x1c4>
		handle_mac(); 
    159e:	4b51      	ldr	r3, [pc, #324]	; (16e4 <handle_user_input+0x324>)
    15a0:	4798      	blx	r3
    15a2:	e77b      	b.n	149c <handle_user_input+0xdc>
		handle_ip(); 
    15a4:	4b50      	ldr	r3, [pc, #320]	; (16e8 <handle_user_input+0x328>)
    15a6:	4798      	blx	r3
    15a8:	e778      	b.n	149c <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    15aa:	4d31      	ldr	r5, [pc, #196]	; (1670 <handle_user_input+0x2b0>)
    15ac:	0029      	movs	r1, r5
    15ae:	4c31      	ldr	r4, [pc, #196]	; (1674 <handle_user_input+0x2b4>)
    15b0:	47a0      	blx	r4
    15b2:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    15b4:	0029      	movs	r1, r5
    15b6:	2000      	movs	r0, #0
    15b8:	47a0      	blx	r4
    15ba:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    15bc:	2e00      	cmp	r6, #0
    15be:	d00c      	beq.n	15da <handle_user_input+0x21a>
    15c0:	2800      	cmp	r0, #0
    15c2:	d00a      	beq.n	15da <handle_user_input+0x21a>
		int num_readings = atoi(arg1);
    15c4:	0030      	movs	r0, r6
    15c6:	4d3f      	ldr	r5, [pc, #252]	; (16c4 <handle_user_input+0x304>)
    15c8:	47a8      	blx	r5
    15ca:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    15cc:	0020      	movs	r0, r4
    15ce:	47a8      	blx	r5
    15d0:	0001      	movs	r1, r0
		handle_read_gyro(num_readings, interval_ms); 
    15d2:	0030      	movs	r0, r6
    15d4:	4b45      	ldr	r3, [pc, #276]	; (16ec <handle_user_input+0x32c>)
    15d6:	4798      	blx	r3
    15d8:	e760      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    15da:	483f      	ldr	r0, [pc, #252]	; (16d8 <handle_user_input+0x318>)
    15dc:	4b35      	ldr	r3, [pc, #212]	; (16b4 <handle_user_input+0x2f4>)
    15de:	4798      	blx	r3
			return;
    15e0:	e75c      	b.n	149c <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    15e2:	4d23      	ldr	r5, [pc, #140]	; (1670 <handle_user_input+0x2b0>)
    15e4:	0029      	movs	r1, r5
    15e6:	4c23      	ldr	r4, [pc, #140]	; (1674 <handle_user_input+0x2b4>)
    15e8:	47a0      	blx	r4
    15ea:	0006      	movs	r6, r0
		char* arg2 = strtok(NULL, " ");
    15ec:	0029      	movs	r1, r5
    15ee:	2000      	movs	r0, #0
    15f0:	47a0      	blx	r4
    15f2:	0004      	movs	r4, r0
		if(arg1 == 0 || arg2 == 0) {
    15f4:	2e00      	cmp	r6, #0
    15f6:	d00c      	beq.n	1612 <handle_user_input+0x252>
    15f8:	2800      	cmp	r0, #0
    15fa:	d00a      	beq.n	1612 <handle_user_input+0x252>
		int num_readings = atoi(arg1);
    15fc:	0030      	movs	r0, r6
    15fe:	4d31      	ldr	r5, [pc, #196]	; (16c4 <handle_user_input+0x304>)
    1600:	47a8      	blx	r5
    1602:	0006      	movs	r6, r0
		int interval_ms = atoi(arg2);
    1604:	0020      	movs	r0, r4
    1606:	47a8      	blx	r5
    1608:	0001      	movs	r1, r0
		handle_read_accel(num_readings, interval_ms); 
    160a:	0030      	movs	r0, r6
    160c:	4b38      	ldr	r3, [pc, #224]	; (16f0 <handle_user_input+0x330>)
    160e:	4798      	blx	r3
    1610:	e744      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    1612:	4831      	ldr	r0, [pc, #196]	; (16d8 <handle_user_input+0x318>)
    1614:	4b27      	ldr	r3, [pc, #156]	; (16b4 <handle_user_input+0x2f4>)
    1616:	4798      	blx	r3
			return;
    1618:	e740      	b.n	149c <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
    161a:	4e15      	ldr	r6, [pc, #84]	; (1670 <handle_user_input+0x2b0>)
    161c:	0031      	movs	r1, r6
    161e:	4d15      	ldr	r5, [pc, #84]	; (1674 <handle_user_input+0x2b4>)
    1620:	47a8      	blx	r5
    1622:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
    1624:	0031      	movs	r1, r6
    1626:	2000      	movs	r0, #0
    1628:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
    162a:	2c00      	cmp	r4, #0
    162c:	d015      	beq.n	165a <handle_user_input+0x29a>
    162e:	2800      	cmp	r0, #0
    1630:	d013      	beq.n	165a <handle_user_input+0x29a>
		int pin_num = atoi(arg2);
    1632:	4b24      	ldr	r3, [pc, #144]	; (16c4 <handle_user_input+0x304>)
    1634:	4798      	blx	r3
    1636:	0005      	movs	r5, r0
		if ((strcmp(port,"A") != 0) && (strcmp(port,"B") != 0)){
    1638:	4923      	ldr	r1, [pc, #140]	; (16c8 <handle_user_input+0x308>)
    163a:	0020      	movs	r0, r4
    163c:	4b0f      	ldr	r3, [pc, #60]	; (167c <handle_user_input+0x2bc>)
    163e:	4798      	blx	r3
    1640:	2800      	cmp	r0, #0
    1642:	d005      	beq.n	1650 <handle_user_input+0x290>
    1644:	4921      	ldr	r1, [pc, #132]	; (16cc <handle_user_input+0x30c>)
    1646:	0020      	movs	r0, r4
    1648:	4b0c      	ldr	r3, [pc, #48]	; (167c <handle_user_input+0x2bc>)
    164a:	4798      	blx	r3
    164c:	2800      	cmp	r0, #0
    164e:	d108      	bne.n	1662 <handle_user_input+0x2a2>
		handle_adc_get(port, pin_num); 
    1650:	b2e0      	uxtb	r0, r4
    1652:	0029      	movs	r1, r5
    1654:	4b27      	ldr	r3, [pc, #156]	; (16f4 <handle_user_input+0x334>)
    1656:	4798      	blx	r3
    1658:	e720      	b.n	149c <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
    165a:	481f      	ldr	r0, [pc, #124]	; (16d8 <handle_user_input+0x318>)
    165c:	4b15      	ldr	r3, [pc, #84]	; (16b4 <handle_user_input+0x2f4>)
    165e:	4798      	blx	r3
			return;
    1660:	e71c      	b.n	149c <handle_user_input+0xdc>
			printf("Enter a valid Port! Try \"help\".\r\n");
    1662:	481e      	ldr	r0, [pc, #120]	; (16dc <handle_user_input+0x31c>)
    1664:	4b13      	ldr	r3, [pc, #76]	; (16b4 <handle_user_input+0x2f4>)
    1666:	4798      	blx	r3
    1668:	e7f2      	b.n	1650 <handle_user_input+0x290>
		handle_mcu_temp(); 
    166a:	4b23      	ldr	r3, [pc, #140]	; (16f8 <handle_user_input+0x338>)
    166c:	4798      	blx	r3
    166e:	e715      	b.n	149c <handle_user_input+0xdc>
    1670:	000078f8 	.word	0x000078f8
    1674:	00005b3d 	.word	0x00005b3d
    1678:	20000010 	.word	0x20000010
    167c:	00005b29 	.word	0x00005b29
    1680:	20000030 	.word	0x20000030
    1684:	2000002c 	.word	0x2000002c
    1688:	2000000c 	.word	0x2000000c
    168c:	20000004 	.word	0x20000004
    1690:	20000008 	.word	0x20000008
    1694:	2000001c 	.word	0x2000001c
    1698:	20000018 	.word	0x20000018
    169c:	20000028 	.word	0x20000028
    16a0:	20000024 	.word	0x20000024
    16a4:	20000000 	.word	0x20000000
    16a8:	20000020 	.word	0x20000020
    16ac:	20000014 	.word	0x20000014
    16b0:	0000794c 	.word	0x0000794c
    16b4:	00005975 	.word	0x00005975
    16b8:	00001089 	.word	0x00001089
    16bc:	000010c1 	.word	0x000010c1
    16c0:	000010d9 	.word	0x000010d9
    16c4:	00005809 	.word	0x00005809
    16c8:	00007920 	.word	0x00007920
    16cc:	00007924 	.word	0x00007924
    16d0:	41004480 	.word	0x41004480
    16d4:	00007820 	.word	0x00007820
    16d8:	000078fc 	.word	0x000078fc
    16dc:	00007928 	.word	0x00007928
    16e0:	000010f1 	.word	0x000010f1
    16e4:	0000111d 	.word	0x0000111d
    16e8:	00001135 	.word	0x00001135
    16ec:	0000114d 	.word	0x0000114d
    16f0:	000011b1 	.word	0x000011b1
    16f4:	00001215 	.word	0x00001215
    16f8:	00001301 	.word	0x00001301

000016fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    16fc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    16fe:	2000      	movs	r0, #0
    1700:	4b08      	ldr	r3, [pc, #32]	; (1724 <delay_init+0x28>)
    1702:	4798      	blx	r3
    1704:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1706:	4c08      	ldr	r4, [pc, #32]	; (1728 <delay_init+0x2c>)
    1708:	21fa      	movs	r1, #250	; 0xfa
    170a:	0089      	lsls	r1, r1, #2
    170c:	47a0      	blx	r4
    170e:	4b07      	ldr	r3, [pc, #28]	; (172c <delay_init+0x30>)
    1710:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1712:	4907      	ldr	r1, [pc, #28]	; (1730 <delay_init+0x34>)
    1714:	0028      	movs	r0, r5
    1716:	47a0      	blx	r4
    1718:	4b06      	ldr	r3, [pc, #24]	; (1734 <delay_init+0x38>)
    171a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    171c:	2205      	movs	r2, #5
    171e:	4b06      	ldr	r3, [pc, #24]	; (1738 <delay_init+0x3c>)
    1720:	601a      	str	r2, [r3, #0]
}
    1722:	bd70      	pop	{r4, r5, r6, pc}
    1724:	000028d9 	.word	0x000028d9
    1728:	00002fc5 	.word	0x00002fc5
    172c:	20000034 	.word	0x20000034
    1730:	000f4240 	.word	0x000f4240
    1734:	20000038 	.word	0x20000038
    1738:	e000e010 	.word	0xe000e010

0000173c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    173c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    173e:	4b08      	ldr	r3, [pc, #32]	; (1760 <delay_cycles_us+0x24>)
    1740:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1742:	4a08      	ldr	r2, [pc, #32]	; (1764 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1744:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1746:	2180      	movs	r1, #128	; 0x80
    1748:	0249      	lsls	r1, r1, #9
	while (n--) {
    174a:	3801      	subs	r0, #1
    174c:	d307      	bcc.n	175e <delay_cycles_us+0x22>
	if (n > 0) {
    174e:	2c00      	cmp	r4, #0
    1750:	d0fb      	beq.n	174a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1752:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1754:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1756:	6813      	ldr	r3, [r2, #0]
    1758:	420b      	tst	r3, r1
    175a:	d0fc      	beq.n	1756 <delay_cycles_us+0x1a>
    175c:	e7f5      	b.n	174a <delay_cycles_us+0xe>
	}
}
    175e:	bd30      	pop	{r4, r5, pc}
    1760:	20000038 	.word	0x20000038
    1764:	e000e010 	.word	0xe000e010

00001768 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1768:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    176a:	4b08      	ldr	r3, [pc, #32]	; (178c <delay_cycles_ms+0x24>)
    176c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    176e:	4a08      	ldr	r2, [pc, #32]	; (1790 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1770:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1772:	2180      	movs	r1, #128	; 0x80
    1774:	0249      	lsls	r1, r1, #9
	while (n--) {
    1776:	3801      	subs	r0, #1
    1778:	d307      	bcc.n	178a <delay_cycles_ms+0x22>
	if (n > 0) {
    177a:	2c00      	cmp	r4, #0
    177c:	d0fb      	beq.n	1776 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    177e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1780:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1782:	6813      	ldr	r3, [r2, #0]
    1784:	420b      	tst	r3, r1
    1786:	d0fc      	beq.n	1782 <delay_cycles_ms+0x1a>
    1788:	e7f5      	b.n	1776 <delay_cycles_ms+0xe>
	}
}
    178a:	bd30      	pop	{r4, r5, pc}
    178c:	20000034 	.word	0x20000034
    1790:	e000e010 	.word	0xe000e010

00001794 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1794:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    1796:	1e44      	subs	r4, r0, #1
    1798:	2800      	cmp	r0, #0
    179a:	d004      	beq.n	17a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    179c:	4d02      	ldr	r5, [pc, #8]	; (17a8 <nm_bsp_sleep+0x14>)
    179e:	2001      	movs	r0, #1
    17a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    17a2:	3c01      	subs	r4, #1
    17a4:	d2fb      	bcs.n	179e <nm_bsp_sleep+0xa>
	}
}
    17a6:	bd70      	pop	{r4, r5, r6, pc}
    17a8:	00001769 	.word	0x00001769

000017ac <nm_bsp_reset>:
{
    17ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ae:	4c07      	ldr	r4, [pc, #28]	; (17cc <nm_bsp_reset+0x20>)
    17b0:	2780      	movs	r7, #128	; 0x80
    17b2:	057f      	lsls	r7, r7, #21
    17b4:	6167      	str	r7, [r4, #20]
    17b6:	2580      	movs	r5, #128	; 0x80
    17b8:	052d      	lsls	r5, r5, #20
    17ba:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    17bc:	2001      	movs	r0, #1
    17be:	4e04      	ldr	r6, [pc, #16]	; (17d0 <nm_bsp_reset+0x24>)
    17c0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    17c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    17c4:	200a      	movs	r0, #10
    17c6:	47b0      	blx	r6
    17c8:	61a5      	str	r5, [r4, #24]
}
    17ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17cc:	41004400 	.word	0x41004400
    17d0:	00001795 	.word	0x00001795

000017d4 <nm_bsp_init>:
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	b082      	sub	sp, #8
	gpfIsr = NULL;
    17d8:	2300      	movs	r3, #0
    17da:	4a16      	ldr	r2, [pc, #88]	; (1834 <nm_bsp_init+0x60>)
    17dc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    17de:	ac01      	add	r4, sp, #4
    17e0:	2501      	movs	r5, #1
    17e2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    17e4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    17e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    17e8:	0021      	movs	r1, r4
    17ea:	201b      	movs	r0, #27
    17ec:	4e12      	ldr	r6, [pc, #72]	; (1838 <nm_bsp_init+0x64>)
    17ee:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    17f0:	0021      	movs	r1, r4
    17f2:	201c      	movs	r0, #28
    17f4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    17f6:	0021      	movs	r1, r4
    17f8:	2028      	movs	r0, #40	; 0x28
    17fa:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    17fc:	4b0f      	ldr	r3, [pc, #60]	; (183c <nm_bsp_init+0x68>)
    17fe:	2280      	movs	r2, #128	; 0x80
    1800:	0552      	lsls	r2, r2, #21
    1802:	615a      	str	r2, [r3, #20]
    1804:	2280      	movs	r2, #128	; 0x80
    1806:	0512      	lsls	r2, r2, #20
    1808:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    180a:	4b0d      	ldr	r3, [pc, #52]	; (1840 <nm_bsp_init+0x6c>)
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	421d      	tst	r5, r3
    1810:	d003      	beq.n	181a <nm_bsp_init+0x46>
    1812:	4b0b      	ldr	r3, [pc, #44]	; (1840 <nm_bsp_init+0x6c>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	079b      	lsls	r3, r3, #30
    1818:	d401      	bmi.n	181e <nm_bsp_init+0x4a>
	    delay_init();
    181a:	4b0a      	ldr	r3, [pc, #40]	; (1844 <nm_bsp_init+0x70>)
    181c:	4798      	blx	r3
	nm_bsp_reset();
    181e:	4b0a      	ldr	r3, [pc, #40]	; (1848 <nm_bsp_init+0x74>)
    1820:	4798      	blx	r3
	cpu_irq_enable();
    1822:	2201      	movs	r2, #1
    1824:	4b09      	ldr	r3, [pc, #36]	; (184c <nm_bsp_init+0x78>)
    1826:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1828:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    182c:	b662      	cpsie	i
}
    182e:	2000      	movs	r0, #0
    1830:	b002      	add	sp, #8
    1832:	bd70      	pop	{r4, r5, r6, pc}
    1834:	2000022c 	.word	0x2000022c
    1838:	000019d1 	.word	0x000019d1
    183c:	41004400 	.word	0x41004400
    1840:	e000e010 	.word	0xe000e010
    1844:	000016fd 	.word	0x000016fd
    1848:	000017ad 	.word	0x000017ad
    184c:	2000003c 	.word	0x2000003c

00001850 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1850:	4b0c      	ldr	r3, [pc, #48]	; (1884 <cpu_irq_enter_critical+0x34>)
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	2b00      	cmp	r3, #0
    1856:	d106      	bne.n	1866 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1858:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    185c:	2b00      	cmp	r3, #0
    185e:	d007      	beq.n	1870 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1860:	2200      	movs	r2, #0
    1862:	4b09      	ldr	r3, [pc, #36]	; (1888 <cpu_irq_enter_critical+0x38>)
    1864:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1866:	4a07      	ldr	r2, [pc, #28]	; (1884 <cpu_irq_enter_critical+0x34>)
    1868:	6813      	ldr	r3, [r2, #0]
    186a:	3301      	adds	r3, #1
    186c:	6013      	str	r3, [r2, #0]
}
    186e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1870:	b672      	cpsid	i
    1872:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1876:	2200      	movs	r2, #0
    1878:	4b04      	ldr	r3, [pc, #16]	; (188c <cpu_irq_enter_critical+0x3c>)
    187a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    187c:	3201      	adds	r2, #1
    187e:	4b02      	ldr	r3, [pc, #8]	; (1888 <cpu_irq_enter_critical+0x38>)
    1880:	701a      	strb	r2, [r3, #0]
    1882:	e7f0      	b.n	1866 <cpu_irq_enter_critical+0x16>
    1884:	20000230 	.word	0x20000230
    1888:	20000234 	.word	0x20000234
    188c:	2000003c 	.word	0x2000003c

00001890 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1890:	4b08      	ldr	r3, [pc, #32]	; (18b4 <cpu_irq_leave_critical+0x24>)
    1892:	681a      	ldr	r2, [r3, #0]
    1894:	3a01      	subs	r2, #1
    1896:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d109      	bne.n	18b2 <cpu_irq_leave_critical+0x22>
    189e:	4b06      	ldr	r3, [pc, #24]	; (18b8 <cpu_irq_leave_critical+0x28>)
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d005      	beq.n	18b2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    18a6:	2201      	movs	r2, #1
    18a8:	4b04      	ldr	r3, [pc, #16]	; (18bc <cpu_irq_leave_critical+0x2c>)
    18aa:	701a      	strb	r2, [r3, #0]
    18ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    18b0:	b662      	cpsie	i
	}
}
    18b2:	4770      	bx	lr
    18b4:	20000230 	.word	0x20000230
    18b8:	20000234 	.word	0x20000234
    18bc:	2000003c 	.word	0x2000003c

000018c0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    18c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18c2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    18c4:	ac01      	add	r4, sp, #4
    18c6:	2501      	movs	r5, #1
    18c8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    18ca:	2700      	movs	r7, #0
    18cc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    18ce:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    18d0:	0021      	movs	r1, r4
    18d2:	2017      	movs	r0, #23
    18d4:	4e06      	ldr	r6, [pc, #24]	; (18f0 <system_board_init+0x30>)
    18d6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    18d8:	2280      	movs	r2, #128	; 0x80
    18da:	0412      	lsls	r2, r2, #16
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <system_board_init+0x34>)
    18de:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    18e0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    18e2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    18e4:	0021      	movs	r1, r4
    18e6:	2037      	movs	r0, #55	; 0x37
    18e8:	47b0      	blx	r6
}
    18ea:	b003      	add	sp, #12
    18ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	000019d1 	.word	0x000019d1
    18f4:	41004400 	.word	0x41004400

000018f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    18fa:	2200      	movs	r2, #0
    18fc:	4b10      	ldr	r3, [pc, #64]	; (1940 <EIC_Handler+0x48>)
    18fe:	701a      	strb	r2, [r3, #0]
    1900:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1902:	4910      	ldr	r1, [pc, #64]	; (1944 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1904:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1906:	4e10      	ldr	r6, [pc, #64]	; (1948 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1908:	4c0d      	ldr	r4, [pc, #52]	; (1940 <EIC_Handler+0x48>)
    190a:	e00a      	b.n	1922 <EIC_Handler+0x2a>
		return eics[eic_index];
    190c:	490d      	ldr	r1, [pc, #52]	; (1944 <EIC_Handler+0x4c>)
    190e:	e008      	b.n	1922 <EIC_Handler+0x2a>
    1910:	7823      	ldrb	r3, [r4, #0]
    1912:	3301      	adds	r3, #1
    1914:	b2db      	uxtb	r3, r3
    1916:	7023      	strb	r3, [r4, #0]
    1918:	2b0f      	cmp	r3, #15
    191a:	d810      	bhi.n	193e <EIC_Handler+0x46>
		return NULL;
    191c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    191e:	2b1f      	cmp	r3, #31
    1920:	d9f4      	bls.n	190c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1922:	0028      	movs	r0, r5
    1924:	4018      	ands	r0, r3
    1926:	2201      	movs	r2, #1
    1928:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    192a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    192c:	4210      	tst	r0, r2
    192e:	d0ef      	beq.n	1910 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1930:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1932:	009b      	lsls	r3, r3, #2
    1934:	599b      	ldr	r3, [r3, r6]
    1936:	2b00      	cmp	r3, #0
    1938:	d0ea      	beq.n	1910 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    193a:	4798      	blx	r3
    193c:	e7e8      	b.n	1910 <EIC_Handler+0x18>
			}
		}
	}
}
    193e:	bd70      	pop	{r4, r5, r6, pc}
    1940:	2000039c 	.word	0x2000039c
    1944:	40001800 	.word	0x40001800
    1948:	200003a0 	.word	0x200003a0

0000194c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    194c:	4a04      	ldr	r2, [pc, #16]	; (1960 <_extint_enable+0x14>)
    194e:	7813      	ldrb	r3, [r2, #0]
    1950:	2102      	movs	r1, #2
    1952:	430b      	orrs	r3, r1
    1954:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1956:	7853      	ldrb	r3, [r2, #1]
    1958:	b25b      	sxtb	r3, r3
    195a:	2b00      	cmp	r3, #0
    195c:	dbfb      	blt.n	1956 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    195e:	4770      	bx	lr
    1960:	40001800 	.word	0x40001800

00001964 <_system_extint_init>:
{
    1964:	b500      	push	{lr}
    1966:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1968:	4a12      	ldr	r2, [pc, #72]	; (19b4 <_system_extint_init+0x50>)
    196a:	6993      	ldr	r3, [r2, #24]
    196c:	2140      	movs	r1, #64	; 0x40
    196e:	430b      	orrs	r3, r1
    1970:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1972:	a901      	add	r1, sp, #4
    1974:	2300      	movs	r3, #0
    1976:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1978:	2005      	movs	r0, #5
    197a:	4b0f      	ldr	r3, [pc, #60]	; (19b8 <_system_extint_init+0x54>)
    197c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    197e:	2005      	movs	r0, #5
    1980:	4b0e      	ldr	r3, [pc, #56]	; (19bc <_system_extint_init+0x58>)
    1982:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1984:	4a0e      	ldr	r2, [pc, #56]	; (19c0 <_system_extint_init+0x5c>)
    1986:	7813      	ldrb	r3, [r2, #0]
    1988:	2101      	movs	r1, #1
    198a:	430b      	orrs	r3, r1
    198c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    198e:	7853      	ldrb	r3, [r2, #1]
    1990:	b25b      	sxtb	r3, r3
    1992:	2b00      	cmp	r3, #0
    1994:	dbfb      	blt.n	198e <_system_extint_init+0x2a>
    1996:	4b0b      	ldr	r3, [pc, #44]	; (19c4 <_system_extint_init+0x60>)
    1998:	0019      	movs	r1, r3
    199a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    199c:	2200      	movs	r2, #0
    199e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    19a0:	4299      	cmp	r1, r3
    19a2:	d1fc      	bne.n	199e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19a4:	2210      	movs	r2, #16
    19a6:	4b08      	ldr	r3, [pc, #32]	; (19c8 <_system_extint_init+0x64>)
    19a8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    19aa:	4b08      	ldr	r3, [pc, #32]	; (19cc <_system_extint_init+0x68>)
    19ac:	4798      	blx	r3
}
    19ae:	b003      	add	sp, #12
    19b0:	bd00      	pop	{pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	40000400 	.word	0x40000400
    19b8:	000029f1 	.word	0x000029f1
    19bc:	00002965 	.word	0x00002965
    19c0:	40001800 	.word	0x40001800
    19c4:	200003a0 	.word	0x200003a0
    19c8:	e000e100 	.word	0xe000e100
    19cc:	0000194d 	.word	0x0000194d

000019d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    19d0:	b500      	push	{lr}
    19d2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19d4:	ab01      	add	r3, sp, #4
    19d6:	2280      	movs	r2, #128	; 0x80
    19d8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19da:	780a      	ldrb	r2, [r1, #0]
    19dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19de:	784a      	ldrb	r2, [r1, #1]
    19e0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19e2:	788a      	ldrb	r2, [r1, #2]
    19e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19e6:	0019      	movs	r1, r3
    19e8:	4b01      	ldr	r3, [pc, #4]	; (19f0 <port_pin_set_config+0x20>)
    19ea:	4798      	blx	r3
}
    19ec:	b003      	add	sp, #12
    19ee:	bd00      	pop	{pc}
    19f0:	00002ae9 	.word	0x00002ae9

000019f4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    19f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f6:	46de      	mov	lr, fp
    19f8:	4657      	mov	r7, sl
    19fa:	464e      	mov	r6, r9
    19fc:	4645      	mov	r5, r8
    19fe:	b5e0      	push	{r5, r6, r7, lr}
    1a00:	b087      	sub	sp, #28
    1a02:	4680      	mov	r8, r0
    1a04:	9104      	str	r1, [sp, #16]
    1a06:	0016      	movs	r6, r2
    1a08:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1a0a:	2200      	movs	r2, #0
    1a0c:	2300      	movs	r3, #0
    1a0e:	2100      	movs	r1, #0
    1a10:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1a12:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1a14:	2001      	movs	r0, #1
    1a16:	0021      	movs	r1, r4
    1a18:	9600      	str	r6, [sp, #0]
    1a1a:	9701      	str	r7, [sp, #4]
    1a1c:	465c      	mov	r4, fp
    1a1e:	9403      	str	r4, [sp, #12]
    1a20:	4644      	mov	r4, r8
    1a22:	9405      	str	r4, [sp, #20]
    1a24:	e013      	b.n	1a4e <long_division+0x5a>
    1a26:	2420      	movs	r4, #32
    1a28:	1a64      	subs	r4, r4, r1
    1a2a:	0005      	movs	r5, r0
    1a2c:	40e5      	lsrs	r5, r4
    1a2e:	46a8      	mov	r8, r5
    1a30:	e014      	b.n	1a5c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1a32:	9c00      	ldr	r4, [sp, #0]
    1a34:	9d01      	ldr	r5, [sp, #4]
    1a36:	1b12      	subs	r2, r2, r4
    1a38:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1a3a:	465c      	mov	r4, fp
    1a3c:	464d      	mov	r5, r9
    1a3e:	432c      	orrs	r4, r5
    1a40:	46a3      	mov	fp, r4
    1a42:	9c03      	ldr	r4, [sp, #12]
    1a44:	4645      	mov	r5, r8
    1a46:	432c      	orrs	r4, r5
    1a48:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1a4a:	3901      	subs	r1, #1
    1a4c:	d325      	bcc.n	1a9a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1a4e:	2420      	movs	r4, #32
    1a50:	4264      	negs	r4, r4
    1a52:	190c      	adds	r4, r1, r4
    1a54:	d4e7      	bmi.n	1a26 <long_division+0x32>
    1a56:	0005      	movs	r5, r0
    1a58:	40a5      	lsls	r5, r4
    1a5a:	46a8      	mov	r8, r5
    1a5c:	0004      	movs	r4, r0
    1a5e:	408c      	lsls	r4, r1
    1a60:	46a1      	mov	r9, r4
		r = r << 1;
    1a62:	1892      	adds	r2, r2, r2
    1a64:	415b      	adcs	r3, r3
    1a66:	0014      	movs	r4, r2
    1a68:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1a6a:	9e05      	ldr	r6, [sp, #20]
    1a6c:	464f      	mov	r7, r9
    1a6e:	403e      	ands	r6, r7
    1a70:	46b4      	mov	ip, r6
    1a72:	9e04      	ldr	r6, [sp, #16]
    1a74:	4647      	mov	r7, r8
    1a76:	403e      	ands	r6, r7
    1a78:	46b2      	mov	sl, r6
    1a7a:	4666      	mov	r6, ip
    1a7c:	4657      	mov	r7, sl
    1a7e:	433e      	orrs	r6, r7
    1a80:	d003      	beq.n	1a8a <long_division+0x96>
			r |= 0x01;
    1a82:	0006      	movs	r6, r0
    1a84:	4326      	orrs	r6, r4
    1a86:	0032      	movs	r2, r6
    1a88:	002b      	movs	r3, r5
		if (r >= d) {
    1a8a:	9c00      	ldr	r4, [sp, #0]
    1a8c:	9d01      	ldr	r5, [sp, #4]
    1a8e:	429d      	cmp	r5, r3
    1a90:	d8db      	bhi.n	1a4a <long_division+0x56>
    1a92:	d1ce      	bne.n	1a32 <long_division+0x3e>
    1a94:	4294      	cmp	r4, r2
    1a96:	d8d8      	bhi.n	1a4a <long_division+0x56>
    1a98:	e7cb      	b.n	1a32 <long_division+0x3e>
    1a9a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1a9c:	4658      	mov	r0, fp
    1a9e:	0019      	movs	r1, r3
    1aa0:	b007      	add	sp, #28
    1aa2:	bc3c      	pop	{r2, r3, r4, r5}
    1aa4:	4690      	mov	r8, r2
    1aa6:	4699      	mov	r9, r3
    1aa8:	46a2      	mov	sl, r4
    1aaa:	46ab      	mov	fp, r5
    1aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001aae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1aae:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1ab0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ab2:	2340      	movs	r3, #64	; 0x40
    1ab4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1ab6:	4281      	cmp	r1, r0
    1ab8:	d202      	bcs.n	1ac0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1aba:	0018      	movs	r0, r3
    1abc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1abe:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1ac0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1ac2:	1c63      	adds	r3, r4, #1
    1ac4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1ac6:	4288      	cmp	r0, r1
    1ac8:	d9f9      	bls.n	1abe <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1aca:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1acc:	2cff      	cmp	r4, #255	; 0xff
    1ace:	d8f4      	bhi.n	1aba <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1ad0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1ad2:	2300      	movs	r3, #0
    1ad4:	e7f1      	b.n	1aba <_sercom_get_sync_baud_val+0xc>
	...

00001ad8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ada:	b083      	sub	sp, #12
    1adc:	000f      	movs	r7, r1
    1ade:	0016      	movs	r6, r2
    1ae0:	aa08      	add	r2, sp, #32
    1ae2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1ae4:	0004      	movs	r4, r0
    1ae6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ae8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1aea:	42bc      	cmp	r4, r7
    1aec:	d902      	bls.n	1af4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1aee:	0010      	movs	r0, r2
    1af0:	b003      	add	sp, #12
    1af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1af4:	2b00      	cmp	r3, #0
    1af6:	d114      	bne.n	1b22 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1af8:	0002      	movs	r2, r0
    1afa:	0008      	movs	r0, r1
    1afc:	2100      	movs	r1, #0
    1afe:	4c19      	ldr	r4, [pc, #100]	; (1b64 <_sercom_get_async_baud_val+0x8c>)
    1b00:	47a0      	blx	r4
    1b02:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1b04:	003a      	movs	r2, r7
    1b06:	2300      	movs	r3, #0
    1b08:	2000      	movs	r0, #0
    1b0a:	4c17      	ldr	r4, [pc, #92]	; (1b68 <_sercom_get_async_baud_val+0x90>)
    1b0c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1b0e:	2200      	movs	r2, #0
    1b10:	2301      	movs	r3, #1
    1b12:	1a12      	subs	r2, r2, r0
    1b14:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1b16:	0c12      	lsrs	r2, r2, #16
    1b18:	041b      	lsls	r3, r3, #16
    1b1a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1b1c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1b1e:	2200      	movs	r2, #0
    1b20:	e7e5      	b.n	1aee <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1b22:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1b24:	2b01      	cmp	r3, #1
    1b26:	d1f9      	bne.n	1b1c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1b28:	000a      	movs	r2, r1
    1b2a:	2300      	movs	r3, #0
    1b2c:	2100      	movs	r1, #0
    1b2e:	4c0d      	ldr	r4, [pc, #52]	; (1b64 <_sercom_get_async_baud_val+0x8c>)
    1b30:	47a0      	blx	r4
    1b32:	0002      	movs	r2, r0
    1b34:	000b      	movs	r3, r1
    1b36:	9200      	str	r2, [sp, #0]
    1b38:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1b3a:	0038      	movs	r0, r7
    1b3c:	2100      	movs	r1, #0
    1b3e:	4c0a      	ldr	r4, [pc, #40]	; (1b68 <_sercom_get_async_baud_val+0x90>)
    1b40:	47a0      	blx	r4
    1b42:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1b44:	2380      	movs	r3, #128	; 0x80
    1b46:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b48:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1b4a:	4298      	cmp	r0, r3
    1b4c:	d8cf      	bhi.n	1aee <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1b4e:	0f79      	lsrs	r1, r7, #29
    1b50:	00f8      	lsls	r0, r7, #3
    1b52:	9a00      	ldr	r2, [sp, #0]
    1b54:	9b01      	ldr	r3, [sp, #4]
    1b56:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1b58:	00ea      	lsls	r2, r5, #3
    1b5a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1b5c:	b2d2      	uxtb	r2, r2
    1b5e:	0352      	lsls	r2, r2, #13
    1b60:	432a      	orrs	r2, r5
    1b62:	e7db      	b.n	1b1c <_sercom_get_async_baud_val+0x44>
    1b64:	000030dd 	.word	0x000030dd
    1b68:	000019f5 	.word	0x000019f5

00001b6c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1b6c:	b510      	push	{r4, lr}
    1b6e:	b082      	sub	sp, #8
    1b70:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1b72:	4b0e      	ldr	r3, [pc, #56]	; (1bac <sercom_set_gclk_generator+0x40>)
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d007      	beq.n	1b8a <sercom_set_gclk_generator+0x1e>
    1b7a:	2900      	cmp	r1, #0
    1b7c:	d105      	bne.n	1b8a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1b7e:	4b0b      	ldr	r3, [pc, #44]	; (1bac <sercom_set_gclk_generator+0x40>)
    1b80:	785b      	ldrb	r3, [r3, #1]
    1b82:	4283      	cmp	r3, r0
    1b84:	d010      	beq.n	1ba8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1b86:	201d      	movs	r0, #29
    1b88:	e00c      	b.n	1ba4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1b8a:	a901      	add	r1, sp, #4
    1b8c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1b8e:	2013      	movs	r0, #19
    1b90:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <sercom_set_gclk_generator+0x44>)
    1b92:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1b94:	2013      	movs	r0, #19
    1b96:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <sercom_set_gclk_generator+0x48>)
    1b98:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1b9a:	4b04      	ldr	r3, [pc, #16]	; (1bac <sercom_set_gclk_generator+0x40>)
    1b9c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1b9e:	2201      	movs	r2, #1
    1ba0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1ba2:	2000      	movs	r0, #0
}
    1ba4:	b002      	add	sp, #8
    1ba6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1ba8:	2000      	movs	r0, #0
    1baa:	e7fb      	b.n	1ba4 <sercom_set_gclk_generator+0x38>
    1bac:	20000238 	.word	0x20000238
    1bb0:	000029f1 	.word	0x000029f1
    1bb4:	00002965 	.word	0x00002965

00001bb8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1bb8:	4b40      	ldr	r3, [pc, #256]	; (1cbc <_sercom_get_default_pad+0x104>)
    1bba:	4298      	cmp	r0, r3
    1bbc:	d031      	beq.n	1c22 <_sercom_get_default_pad+0x6a>
    1bbe:	d90a      	bls.n	1bd6 <_sercom_get_default_pad+0x1e>
    1bc0:	4b3f      	ldr	r3, [pc, #252]	; (1cc0 <_sercom_get_default_pad+0x108>)
    1bc2:	4298      	cmp	r0, r3
    1bc4:	d04d      	beq.n	1c62 <_sercom_get_default_pad+0xaa>
    1bc6:	4b3f      	ldr	r3, [pc, #252]	; (1cc4 <_sercom_get_default_pad+0x10c>)
    1bc8:	4298      	cmp	r0, r3
    1bca:	d05a      	beq.n	1c82 <_sercom_get_default_pad+0xca>
    1bcc:	4b3e      	ldr	r3, [pc, #248]	; (1cc8 <_sercom_get_default_pad+0x110>)
    1bce:	4298      	cmp	r0, r3
    1bd0:	d037      	beq.n	1c42 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1bd2:	2000      	movs	r0, #0
}
    1bd4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1bd6:	4b3d      	ldr	r3, [pc, #244]	; (1ccc <_sercom_get_default_pad+0x114>)
    1bd8:	4298      	cmp	r0, r3
    1bda:	d00c      	beq.n	1bf6 <_sercom_get_default_pad+0x3e>
    1bdc:	4b3c      	ldr	r3, [pc, #240]	; (1cd0 <_sercom_get_default_pad+0x118>)
    1bde:	4298      	cmp	r0, r3
    1be0:	d1f7      	bne.n	1bd2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1be2:	2901      	cmp	r1, #1
    1be4:	d017      	beq.n	1c16 <_sercom_get_default_pad+0x5e>
    1be6:	2900      	cmp	r1, #0
    1be8:	d05d      	beq.n	1ca6 <_sercom_get_default_pad+0xee>
    1bea:	2902      	cmp	r1, #2
    1bec:	d015      	beq.n	1c1a <_sercom_get_default_pad+0x62>
    1bee:	2903      	cmp	r1, #3
    1bf0:	d015      	beq.n	1c1e <_sercom_get_default_pad+0x66>
	return 0;
    1bf2:	2000      	movs	r0, #0
    1bf4:	e7ee      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bf6:	2901      	cmp	r1, #1
    1bf8:	d007      	beq.n	1c0a <_sercom_get_default_pad+0x52>
    1bfa:	2900      	cmp	r1, #0
    1bfc:	d051      	beq.n	1ca2 <_sercom_get_default_pad+0xea>
    1bfe:	2902      	cmp	r1, #2
    1c00:	d005      	beq.n	1c0e <_sercom_get_default_pad+0x56>
    1c02:	2903      	cmp	r1, #3
    1c04:	d005      	beq.n	1c12 <_sercom_get_default_pad+0x5a>
	return 0;
    1c06:	2000      	movs	r0, #0
    1c08:	e7e4      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c0a:	4832      	ldr	r0, [pc, #200]	; (1cd4 <_sercom_get_default_pad+0x11c>)
    1c0c:	e7e2      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c0e:	4832      	ldr	r0, [pc, #200]	; (1cd8 <_sercom_get_default_pad+0x120>)
    1c10:	e7e0      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c12:	4832      	ldr	r0, [pc, #200]	; (1cdc <_sercom_get_default_pad+0x124>)
    1c14:	e7de      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c16:	4832      	ldr	r0, [pc, #200]	; (1ce0 <_sercom_get_default_pad+0x128>)
    1c18:	e7dc      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c1a:	4832      	ldr	r0, [pc, #200]	; (1ce4 <_sercom_get_default_pad+0x12c>)
    1c1c:	e7da      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c1e:	4832      	ldr	r0, [pc, #200]	; (1ce8 <_sercom_get_default_pad+0x130>)
    1c20:	e7d8      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c22:	2901      	cmp	r1, #1
    1c24:	d007      	beq.n	1c36 <_sercom_get_default_pad+0x7e>
    1c26:	2900      	cmp	r1, #0
    1c28:	d03f      	beq.n	1caa <_sercom_get_default_pad+0xf2>
    1c2a:	2902      	cmp	r1, #2
    1c2c:	d005      	beq.n	1c3a <_sercom_get_default_pad+0x82>
    1c2e:	2903      	cmp	r1, #3
    1c30:	d005      	beq.n	1c3e <_sercom_get_default_pad+0x86>
	return 0;
    1c32:	2000      	movs	r0, #0
    1c34:	e7ce      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c36:	482d      	ldr	r0, [pc, #180]	; (1cec <_sercom_get_default_pad+0x134>)
    1c38:	e7cc      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c3a:	482d      	ldr	r0, [pc, #180]	; (1cf0 <_sercom_get_default_pad+0x138>)
    1c3c:	e7ca      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c3e:	482d      	ldr	r0, [pc, #180]	; (1cf4 <_sercom_get_default_pad+0x13c>)
    1c40:	e7c8      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c42:	2901      	cmp	r1, #1
    1c44:	d007      	beq.n	1c56 <_sercom_get_default_pad+0x9e>
    1c46:	2900      	cmp	r1, #0
    1c48:	d031      	beq.n	1cae <_sercom_get_default_pad+0xf6>
    1c4a:	2902      	cmp	r1, #2
    1c4c:	d005      	beq.n	1c5a <_sercom_get_default_pad+0xa2>
    1c4e:	2903      	cmp	r1, #3
    1c50:	d005      	beq.n	1c5e <_sercom_get_default_pad+0xa6>
	return 0;
    1c52:	2000      	movs	r0, #0
    1c54:	e7be      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c56:	4828      	ldr	r0, [pc, #160]	; (1cf8 <_sercom_get_default_pad+0x140>)
    1c58:	e7bc      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c5a:	4828      	ldr	r0, [pc, #160]	; (1cfc <_sercom_get_default_pad+0x144>)
    1c5c:	e7ba      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c5e:	4828      	ldr	r0, [pc, #160]	; (1d00 <_sercom_get_default_pad+0x148>)
    1c60:	e7b8      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c62:	2901      	cmp	r1, #1
    1c64:	d007      	beq.n	1c76 <_sercom_get_default_pad+0xbe>
    1c66:	2900      	cmp	r1, #0
    1c68:	d023      	beq.n	1cb2 <_sercom_get_default_pad+0xfa>
    1c6a:	2902      	cmp	r1, #2
    1c6c:	d005      	beq.n	1c7a <_sercom_get_default_pad+0xc2>
    1c6e:	2903      	cmp	r1, #3
    1c70:	d005      	beq.n	1c7e <_sercom_get_default_pad+0xc6>
	return 0;
    1c72:	2000      	movs	r0, #0
    1c74:	e7ae      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c76:	4823      	ldr	r0, [pc, #140]	; (1d04 <_sercom_get_default_pad+0x14c>)
    1c78:	e7ac      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c7a:	4823      	ldr	r0, [pc, #140]	; (1d08 <_sercom_get_default_pad+0x150>)
    1c7c:	e7aa      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c7e:	4823      	ldr	r0, [pc, #140]	; (1d0c <_sercom_get_default_pad+0x154>)
    1c80:	e7a8      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c82:	2901      	cmp	r1, #1
    1c84:	d007      	beq.n	1c96 <_sercom_get_default_pad+0xde>
    1c86:	2900      	cmp	r1, #0
    1c88:	d015      	beq.n	1cb6 <_sercom_get_default_pad+0xfe>
    1c8a:	2902      	cmp	r1, #2
    1c8c:	d005      	beq.n	1c9a <_sercom_get_default_pad+0xe2>
    1c8e:	2903      	cmp	r1, #3
    1c90:	d005      	beq.n	1c9e <_sercom_get_default_pad+0xe6>
	return 0;
    1c92:	2000      	movs	r0, #0
    1c94:	e79e      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c96:	481e      	ldr	r0, [pc, #120]	; (1d10 <_sercom_get_default_pad+0x158>)
    1c98:	e79c      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c9a:	481e      	ldr	r0, [pc, #120]	; (1d14 <_sercom_get_default_pad+0x15c>)
    1c9c:	e79a      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1c9e:	481e      	ldr	r0, [pc, #120]	; (1d18 <_sercom_get_default_pad+0x160>)
    1ca0:	e798      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1ca2:	481e      	ldr	r0, [pc, #120]	; (1d1c <_sercom_get_default_pad+0x164>)
    1ca4:	e796      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1ca6:	2003      	movs	r0, #3
    1ca8:	e794      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1caa:	481d      	ldr	r0, [pc, #116]	; (1d20 <_sercom_get_default_pad+0x168>)
    1cac:	e792      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1cae:	481d      	ldr	r0, [pc, #116]	; (1d24 <_sercom_get_default_pad+0x16c>)
    1cb0:	e790      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1cb2:	481d      	ldr	r0, [pc, #116]	; (1d28 <_sercom_get_default_pad+0x170>)
    1cb4:	e78e      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1cb6:	481d      	ldr	r0, [pc, #116]	; (1d2c <_sercom_get_default_pad+0x174>)
    1cb8:	e78c      	b.n	1bd4 <_sercom_get_default_pad+0x1c>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	42001000 	.word	0x42001000
    1cc0:	42001800 	.word	0x42001800
    1cc4:	42001c00 	.word	0x42001c00
    1cc8:	42001400 	.word	0x42001400
    1ccc:	42000800 	.word	0x42000800
    1cd0:	42000c00 	.word	0x42000c00
    1cd4:	00050003 	.word	0x00050003
    1cd8:	00060003 	.word	0x00060003
    1cdc:	00070003 	.word	0x00070003
    1ce0:	00010003 	.word	0x00010003
    1ce4:	001e0003 	.word	0x001e0003
    1ce8:	001f0003 	.word	0x001f0003
    1cec:	00090003 	.word	0x00090003
    1cf0:	000a0003 	.word	0x000a0003
    1cf4:	000b0003 	.word	0x000b0003
    1cf8:	00110003 	.word	0x00110003
    1cfc:	00120003 	.word	0x00120003
    1d00:	00130003 	.word	0x00130003
    1d04:	000d0003 	.word	0x000d0003
    1d08:	000e0003 	.word	0x000e0003
    1d0c:	000f0003 	.word	0x000f0003
    1d10:	00170003 	.word	0x00170003
    1d14:	00180003 	.word	0x00180003
    1d18:	00190003 	.word	0x00190003
    1d1c:	00040003 	.word	0x00040003
    1d20:	00080003 	.word	0x00080003
    1d24:	00100003 	.word	0x00100003
    1d28:	000c0003 	.word	0x000c0003
    1d2c:	00160003 	.word	0x00160003

00001d30 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1d30:	b530      	push	{r4, r5, lr}
    1d32:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1d34:	4b0b      	ldr	r3, [pc, #44]	; (1d64 <_sercom_get_sercom_inst_index+0x34>)
    1d36:	466a      	mov	r2, sp
    1d38:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d3a:	c232      	stmia	r2!, {r1, r4, r5}
    1d3c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d3e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1d40:	9b00      	ldr	r3, [sp, #0]
    1d42:	4283      	cmp	r3, r0
    1d44:	d00b      	beq.n	1d5e <_sercom_get_sercom_inst_index+0x2e>
    1d46:	2301      	movs	r3, #1
    1d48:	009a      	lsls	r2, r3, #2
    1d4a:	4669      	mov	r1, sp
    1d4c:	5852      	ldr	r2, [r2, r1]
    1d4e:	4282      	cmp	r2, r0
    1d50:	d006      	beq.n	1d60 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d52:	3301      	adds	r3, #1
    1d54:	2b06      	cmp	r3, #6
    1d56:	d1f7      	bne.n	1d48 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d58:	2000      	movs	r0, #0
}
    1d5a:	b007      	add	sp, #28
    1d5c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d5e:	2300      	movs	r3, #0
			return i;
    1d60:	b2d8      	uxtb	r0, r3
    1d62:	e7fa      	b.n	1d5a <_sercom_get_sercom_inst_index+0x2a>
    1d64:	00007c60 	.word	0x00007c60

00001d68 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1d68:	4770      	bx	lr
	...

00001d6c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1d6e:	4b0a      	ldr	r3, [pc, #40]	; (1d98 <_sercom_set_handler+0x2c>)
    1d70:	781b      	ldrb	r3, [r3, #0]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d10c      	bne.n	1d90 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d76:	4f09      	ldr	r7, [pc, #36]	; (1d9c <_sercom_set_handler+0x30>)
    1d78:	4e09      	ldr	r6, [pc, #36]	; (1da0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1d7a:	4d0a      	ldr	r5, [pc, #40]	; (1da4 <_sercom_set_handler+0x38>)
    1d7c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1d7e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1d80:	195a      	adds	r2, r3, r5
    1d82:	6014      	str	r4, [r2, #0]
    1d84:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d86:	2b18      	cmp	r3, #24
    1d88:	d1f9      	bne.n	1d7e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1d8a:	2201      	movs	r2, #1
    1d8c:	4b02      	ldr	r3, [pc, #8]	; (1d98 <_sercom_set_handler+0x2c>)
    1d8e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1d90:	0080      	lsls	r0, r0, #2
    1d92:	4b02      	ldr	r3, [pc, #8]	; (1d9c <_sercom_set_handler+0x30>)
    1d94:	50c1      	str	r1, [r0, r3]
}
    1d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d98:	2000023a 	.word	0x2000023a
    1d9c:	2000023c 	.word	0x2000023c
    1da0:	00001d69 	.word	0x00001d69
    1da4:	200003e0 	.word	0x200003e0

00001da8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1da8:	b500      	push	{lr}
    1daa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1dac:	2309      	movs	r3, #9
    1dae:	466a      	mov	r2, sp
    1db0:	7013      	strb	r3, [r2, #0]
    1db2:	3301      	adds	r3, #1
    1db4:	7053      	strb	r3, [r2, #1]
    1db6:	3301      	adds	r3, #1
    1db8:	7093      	strb	r3, [r2, #2]
    1dba:	3301      	adds	r3, #1
    1dbc:	70d3      	strb	r3, [r2, #3]
    1dbe:	3301      	adds	r3, #1
    1dc0:	7113      	strb	r3, [r2, #4]
    1dc2:	3301      	adds	r3, #1
    1dc4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1dc6:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <_sercom_get_interrupt_vector+0x2c>)
    1dc8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1dca:	466b      	mov	r3, sp
    1dcc:	5618      	ldrsb	r0, [r3, r0]
}
    1dce:	b003      	add	sp, #12
    1dd0:	bd00      	pop	{pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	00001d31 	.word	0x00001d31

00001dd8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1dd8:	b510      	push	{r4, lr}
    1dda:	4b02      	ldr	r3, [pc, #8]	; (1de4 <SERCOM0_Handler+0xc>)
    1ddc:	681b      	ldr	r3, [r3, #0]
    1dde:	2000      	movs	r0, #0
    1de0:	4798      	blx	r3
    1de2:	bd10      	pop	{r4, pc}
    1de4:	2000023c 	.word	0x2000023c

00001de8 <SERCOM1_Handler>:
    1de8:	b510      	push	{r4, lr}
    1dea:	4b02      	ldr	r3, [pc, #8]	; (1df4 <SERCOM1_Handler+0xc>)
    1dec:	685b      	ldr	r3, [r3, #4]
    1dee:	2001      	movs	r0, #1
    1df0:	4798      	blx	r3
    1df2:	bd10      	pop	{r4, pc}
    1df4:	2000023c 	.word	0x2000023c

00001df8 <SERCOM2_Handler>:
    1df8:	b510      	push	{r4, lr}
    1dfa:	4b02      	ldr	r3, [pc, #8]	; (1e04 <SERCOM2_Handler+0xc>)
    1dfc:	689b      	ldr	r3, [r3, #8]
    1dfe:	2002      	movs	r0, #2
    1e00:	4798      	blx	r3
    1e02:	bd10      	pop	{r4, pc}
    1e04:	2000023c 	.word	0x2000023c

00001e08 <SERCOM3_Handler>:
    1e08:	b510      	push	{r4, lr}
    1e0a:	4b02      	ldr	r3, [pc, #8]	; (1e14 <SERCOM3_Handler+0xc>)
    1e0c:	68db      	ldr	r3, [r3, #12]
    1e0e:	2003      	movs	r0, #3
    1e10:	4798      	blx	r3
    1e12:	bd10      	pop	{r4, pc}
    1e14:	2000023c 	.word	0x2000023c

00001e18 <SERCOM4_Handler>:
    1e18:	b510      	push	{r4, lr}
    1e1a:	4b02      	ldr	r3, [pc, #8]	; (1e24 <SERCOM4_Handler+0xc>)
    1e1c:	691b      	ldr	r3, [r3, #16]
    1e1e:	2004      	movs	r0, #4
    1e20:	4798      	blx	r3
    1e22:	bd10      	pop	{r4, pc}
    1e24:	2000023c 	.word	0x2000023c

00001e28 <SERCOM5_Handler>:
    1e28:	b510      	push	{r4, lr}
    1e2a:	4b02      	ldr	r3, [pc, #8]	; (1e34 <SERCOM5_Handler+0xc>)
    1e2c:	695b      	ldr	r3, [r3, #20]
    1e2e:	2005      	movs	r0, #5
    1e30:	4798      	blx	r3
    1e32:	bd10      	pop	{r4, pc}
    1e34:	2000023c 	.word	0x2000023c

00001e38 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3a:	46de      	mov	lr, fp
    1e3c:	4657      	mov	r7, sl
    1e3e:	464e      	mov	r6, r9
    1e40:	4645      	mov	r5, r8
    1e42:	b5e0      	push	{r5, r6, r7, lr}
    1e44:	b091      	sub	sp, #68	; 0x44
    1e46:	0005      	movs	r5, r0
    1e48:	000c      	movs	r4, r1
    1e4a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1e4c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e4e:	0008      	movs	r0, r1
    1e50:	4bbc      	ldr	r3, [pc, #752]	; (2144 <STACK_SIZE+0x144>)
    1e52:	4798      	blx	r3
    1e54:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e56:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1e58:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1e5a:	07db      	lsls	r3, r3, #31
    1e5c:	d506      	bpl.n	1e6c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1e5e:	b011      	add	sp, #68	; 0x44
    1e60:	bc3c      	pop	{r2, r3, r4, r5}
    1e62:	4690      	mov	r8, r2
    1e64:	4699      	mov	r9, r3
    1e66:	46a2      	mov	sl, r4
    1e68:	46ab      	mov	fp, r5
    1e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1e6c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1e6e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1e70:	079b      	lsls	r3, r3, #30
    1e72:	d4f4      	bmi.n	1e5e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1e74:	49b4      	ldr	r1, [pc, #720]	; (2148 <STACK_SIZE+0x148>)
    1e76:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1e78:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e7a:	2301      	movs	r3, #1
    1e7c:	40bb      	lsls	r3, r7
    1e7e:	4303      	orrs	r3, r0
    1e80:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1e82:	a90f      	add	r1, sp, #60	; 0x3c
    1e84:	272d      	movs	r7, #45	; 0x2d
    1e86:	5df3      	ldrb	r3, [r6, r7]
    1e88:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e8a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1e8c:	b2d3      	uxtb	r3, r2
    1e8e:	9302      	str	r3, [sp, #8]
    1e90:	0018      	movs	r0, r3
    1e92:	4bae      	ldr	r3, [pc, #696]	; (214c <STACK_SIZE+0x14c>)
    1e94:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1e96:	9802      	ldr	r0, [sp, #8]
    1e98:	4bad      	ldr	r3, [pc, #692]	; (2150 <STACK_SIZE+0x150>)
    1e9a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1e9c:	5df0      	ldrb	r0, [r6, r7]
    1e9e:	2100      	movs	r1, #0
    1ea0:	4bac      	ldr	r3, [pc, #688]	; (2154 <STACK_SIZE+0x154>)
    1ea2:	4798      	blx	r3
	module->character_size = config->character_size;
    1ea4:	7af3      	ldrb	r3, [r6, #11]
    1ea6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ea8:	2324      	movs	r3, #36	; 0x24
    1eaa:	5cf3      	ldrb	r3, [r6, r3]
    1eac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1eae:	2325      	movs	r3, #37	; 0x25
    1eb0:	5cf3      	ldrb	r3, [r6, r3]
    1eb2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1eb4:	7ef3      	ldrb	r3, [r6, #27]
    1eb6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1eb8:	7f33      	ldrb	r3, [r6, #28]
    1eba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ebc:	682b      	ldr	r3, [r5, #0]
    1ebe:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ec0:	0018      	movs	r0, r3
    1ec2:	4ba0      	ldr	r3, [pc, #640]	; (2144 <STACK_SIZE+0x144>)
    1ec4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ec6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1ec8:	2200      	movs	r2, #0
    1eca:	230e      	movs	r3, #14
    1ecc:	a906      	add	r1, sp, #24
    1ece:	468c      	mov	ip, r1
    1ed0:	4463      	add	r3, ip
    1ed2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1ed4:	8a32      	ldrh	r2, [r6, #16]
    1ed6:	9202      	str	r2, [sp, #8]
    1ed8:	2380      	movs	r3, #128	; 0x80
    1eda:	01db      	lsls	r3, r3, #7
    1edc:	429a      	cmp	r2, r3
    1ede:	d100      	bne.n	1ee2 <usart_init+0xaa>
    1ee0:	e09e      	b.n	2020 <STACK_SIZE+0x20>
    1ee2:	d90f      	bls.n	1f04 <usart_init+0xcc>
    1ee4:	23c0      	movs	r3, #192	; 0xc0
    1ee6:	01db      	lsls	r3, r3, #7
    1ee8:	9a02      	ldr	r2, [sp, #8]
    1eea:	429a      	cmp	r2, r3
    1eec:	d100      	bne.n	1ef0 <usart_init+0xb8>
    1eee:	e092      	b.n	2016 <STACK_SIZE+0x16>
    1ef0:	2380      	movs	r3, #128	; 0x80
    1ef2:	021b      	lsls	r3, r3, #8
    1ef4:	429a      	cmp	r2, r3
    1ef6:	d000      	beq.n	1efa <usart_init+0xc2>
    1ef8:	e11f      	b.n	213a <STACK_SIZE+0x13a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1efa:	2303      	movs	r3, #3
    1efc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1efe:	2300      	movs	r3, #0
    1f00:	9307      	str	r3, [sp, #28]
    1f02:	e008      	b.n	1f16 <usart_init+0xde>
	switch (config->sample_rate) {
    1f04:	2380      	movs	r3, #128	; 0x80
    1f06:	019b      	lsls	r3, r3, #6
    1f08:	429a      	cmp	r2, r3
    1f0a:	d000      	beq.n	1f0e <usart_init+0xd6>
    1f0c:	e115      	b.n	213a <STACK_SIZE+0x13a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1f0e:	2310      	movs	r3, #16
    1f10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f12:	3b0f      	subs	r3, #15
    1f14:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1f16:	6833      	ldr	r3, [r6, #0]
    1f18:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f1a:	68f3      	ldr	r3, [r6, #12]
    1f1c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1f1e:	6973      	ldr	r3, [r6, #20]
    1f20:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f22:	7e33      	ldrb	r3, [r6, #24]
    1f24:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f26:	2326      	movs	r3, #38	; 0x26
    1f28:	5cf3      	ldrb	r3, [r6, r3]
    1f2a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f2c:	6873      	ldr	r3, [r6, #4]
    1f2e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f30:	2b00      	cmp	r3, #0
    1f32:	d100      	bne.n	1f36 <usart_init+0xfe>
    1f34:	e0a0      	b.n	2078 <STACK_SIZE+0x78>
    1f36:	2380      	movs	r3, #128	; 0x80
    1f38:	055b      	lsls	r3, r3, #21
    1f3a:	4599      	cmp	r9, r3
    1f3c:	d100      	bne.n	1f40 <usart_init+0x108>
    1f3e:	e084      	b.n	204a <STACK_SIZE+0x4a>
	if(config->encoding_format_enable) {
    1f40:	7e73      	ldrb	r3, [r6, #25]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d002      	beq.n	1f4c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1f46:	7eb3      	ldrb	r3, [r6, #26]
    1f48:	4642      	mov	r2, r8
    1f4a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1f4c:	682a      	ldr	r2, [r5, #0]
    1f4e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1f50:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1f52:	2b00      	cmp	r3, #0
    1f54:	d1fc      	bne.n	1f50 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1f56:	330e      	adds	r3, #14
    1f58:	aa06      	add	r2, sp, #24
    1f5a:	4694      	mov	ip, r2
    1f5c:	4463      	add	r3, ip
    1f5e:	881b      	ldrh	r3, [r3, #0]
    1f60:	4642      	mov	r2, r8
    1f62:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1f64:	9b05      	ldr	r3, [sp, #20]
    1f66:	9a03      	ldr	r2, [sp, #12]
    1f68:	4313      	orrs	r3, r2
    1f6a:	9a04      	ldr	r2, [sp, #16]
    1f6c:	4313      	orrs	r3, r2
    1f6e:	464a      	mov	r2, r9
    1f70:	4313      	orrs	r3, r2
    1f72:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f74:	465b      	mov	r3, fp
    1f76:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1f78:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f7a:	4653      	mov	r3, sl
    1f7c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1f7e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1f80:	2327      	movs	r3, #39	; 0x27
    1f82:	5cf3      	ldrb	r3, [r6, r3]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d101      	bne.n	1f8c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1f88:	3304      	adds	r3, #4
    1f8a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1f8c:	7e73      	ldrb	r3, [r6, #25]
    1f8e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1f90:	7f32      	ldrb	r2, [r6, #28]
    1f92:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1f94:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1f96:	7f72      	ldrb	r2, [r6, #29]
    1f98:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1f9a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1f9c:	2224      	movs	r2, #36	; 0x24
    1f9e:	5cb2      	ldrb	r2, [r6, r2]
    1fa0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1fa2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1fa4:	2225      	movs	r2, #37	; 0x25
    1fa6:	5cb2      	ldrb	r2, [r6, r2]
    1fa8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1faa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1fac:	7ab1      	ldrb	r1, [r6, #10]
    1fae:	7af2      	ldrb	r2, [r6, #11]
    1fb0:	4311      	orrs	r1, r2
    1fb2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1fb4:	8933      	ldrh	r3, [r6, #8]
    1fb6:	2bff      	cmp	r3, #255	; 0xff
    1fb8:	d100      	bne.n	1fbc <usart_init+0x184>
    1fba:	e081      	b.n	20c0 <STACK_SIZE+0xc0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1fbc:	2280      	movs	r2, #128	; 0x80
    1fbe:	0452      	lsls	r2, r2, #17
    1fc0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1fc2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1fc4:	232c      	movs	r3, #44	; 0x2c
    1fc6:	5cf3      	ldrb	r3, [r6, r3]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d103      	bne.n	1fd4 <usart_init+0x19c>
    1fcc:	4b62      	ldr	r3, [pc, #392]	; (2158 <STACK_SIZE+0x158>)
    1fce:	789b      	ldrb	r3, [r3, #2]
    1fd0:	079b      	lsls	r3, r3, #30
    1fd2:	d501      	bpl.n	1fd8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1fd4:	2380      	movs	r3, #128	; 0x80
    1fd6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fd8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1fda:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d1fc      	bne.n	1fda <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1fe0:	4643      	mov	r3, r8
    1fe2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fe4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1fe6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d1fc      	bne.n	1fe6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1fec:	4643      	mov	r3, r8
    1fee:	601f      	str	r7, [r3, #0]
    1ff0:	ab0e      	add	r3, sp, #56	; 0x38
    1ff2:	2280      	movs	r2, #128	; 0x80
    1ff4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ff6:	2200      	movs	r2, #0
    1ff8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1ffa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ffc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1ffe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2000:	930a      	str	r3, [sp, #40]	; 0x28
    2002:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2004:	930b      	str	r3, [sp, #44]	; 0x2c
    2006:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2008:	930c      	str	r3, [sp, #48]	; 0x30
    200a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    200c:	9302      	str	r3, [sp, #8]
    200e:	930d      	str	r3, [sp, #52]	; 0x34
    2010:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2012:	ae0a      	add	r6, sp, #40	; 0x28
    2014:	e063      	b.n	20de <STACK_SIZE+0xde>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2016:	2308      	movs	r3, #8
    2018:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    201a:	3b07      	subs	r3, #7
    201c:	9307      	str	r3, [sp, #28]
    201e:	e77a      	b.n	1f16 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2020:	6833      	ldr	r3, [r6, #0]
    2022:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2024:	68f3      	ldr	r3, [r6, #12]
    2026:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2028:	6973      	ldr	r3, [r6, #20]
    202a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    202c:	7e33      	ldrb	r3, [r6, #24]
    202e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2030:	2326      	movs	r3, #38	; 0x26
    2032:	5cf3      	ldrb	r3, [r6, r3]
    2034:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2036:	6873      	ldr	r3, [r6, #4]
    2038:	4699      	mov	r9, r3
	switch (transfer_mode)
    203a:	2b00      	cmp	r3, #0
    203c:	d018      	beq.n	2070 <STACK_SIZE+0x70>
    203e:	2380      	movs	r3, #128	; 0x80
    2040:	055b      	lsls	r3, r3, #21
    2042:	4599      	cmp	r9, r3
    2044:	d001      	beq.n	204a <STACK_SIZE+0x4a>
	enum status_code status_code = STATUS_OK;
    2046:	2000      	movs	r0, #0
    2048:	e025      	b.n	2096 <STACK_SIZE+0x96>
			if (!config->use_external_clock) {
    204a:	2327      	movs	r3, #39	; 0x27
    204c:	5cf3      	ldrb	r3, [r6, r3]
    204e:	2b00      	cmp	r3, #0
    2050:	d000      	beq.n	2054 <STACK_SIZE+0x54>
    2052:	e775      	b.n	1f40 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2054:	6a33      	ldr	r3, [r6, #32]
    2056:	001f      	movs	r7, r3
    2058:	b2c0      	uxtb	r0, r0
    205a:	4b40      	ldr	r3, [pc, #256]	; (215c <STACK_SIZE+0x15c>)
    205c:	4798      	blx	r3
    205e:	0001      	movs	r1, r0
    2060:	220e      	movs	r2, #14
    2062:	ab06      	add	r3, sp, #24
    2064:	469c      	mov	ip, r3
    2066:	4462      	add	r2, ip
    2068:	0038      	movs	r0, r7
    206a:	4b3d      	ldr	r3, [pc, #244]	; (2160 <STACK_SIZE+0x160>)
    206c:	4798      	blx	r3
    206e:	e012      	b.n	2096 <STACK_SIZE+0x96>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2070:	2308      	movs	r3, #8
    2072:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2074:	2300      	movs	r3, #0
    2076:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2078:	2327      	movs	r3, #39	; 0x27
    207a:	5cf3      	ldrb	r3, [r6, r3]
    207c:	2b00      	cmp	r3, #0
    207e:	d00e      	beq.n	209e <STACK_SIZE+0x9e>
				status_code =
    2080:	9b06      	ldr	r3, [sp, #24]
    2082:	9300      	str	r3, [sp, #0]
    2084:	9b07      	ldr	r3, [sp, #28]
    2086:	220e      	movs	r2, #14
    2088:	a906      	add	r1, sp, #24
    208a:	468c      	mov	ip, r1
    208c:	4462      	add	r2, ip
    208e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2090:	6a30      	ldr	r0, [r6, #32]
    2092:	4f34      	ldr	r7, [pc, #208]	; (2164 <STACK_SIZE+0x164>)
    2094:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2096:	2800      	cmp	r0, #0
    2098:	d000      	beq.n	209c <STACK_SIZE+0x9c>
    209a:	e6e0      	b.n	1e5e <usart_init+0x26>
    209c:	e750      	b.n	1f40 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    209e:	6a33      	ldr	r3, [r6, #32]
    20a0:	001f      	movs	r7, r3
    20a2:	b2c0      	uxtb	r0, r0
    20a4:	4b2d      	ldr	r3, [pc, #180]	; (215c <STACK_SIZE+0x15c>)
    20a6:	4798      	blx	r3
    20a8:	0001      	movs	r1, r0
				status_code =
    20aa:	9b06      	ldr	r3, [sp, #24]
    20ac:	9300      	str	r3, [sp, #0]
    20ae:	9b07      	ldr	r3, [sp, #28]
    20b0:	220e      	movs	r2, #14
    20b2:	a806      	add	r0, sp, #24
    20b4:	4684      	mov	ip, r0
    20b6:	4462      	add	r2, ip
    20b8:	0038      	movs	r0, r7
    20ba:	4f2a      	ldr	r7, [pc, #168]	; (2164 <STACK_SIZE+0x164>)
    20bc:	47b8      	blx	r7
    20be:	e7ea      	b.n	2096 <STACK_SIZE+0x96>
		if(config->lin_slave_enable) {
    20c0:	7ef3      	ldrb	r3, [r6, #27]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d100      	bne.n	20c8 <STACK_SIZE+0xc8>
    20c6:	e77d      	b.n	1fc4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    20c8:	2380      	movs	r3, #128	; 0x80
    20ca:	04db      	lsls	r3, r3, #19
    20cc:	431f      	orrs	r7, r3
    20ce:	e779      	b.n	1fc4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    20d0:	0020      	movs	r0, r4
    20d2:	4b25      	ldr	r3, [pc, #148]	; (2168 <STACK_SIZE+0x168>)
    20d4:	4798      	blx	r3
    20d6:	e007      	b.n	20e8 <STACK_SIZE+0xe8>
    20d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    20da:	2f04      	cmp	r7, #4
    20dc:	d00d      	beq.n	20fa <STACK_SIZE+0xfa>
    20de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    20e0:	00bb      	lsls	r3, r7, #2
    20e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    20e4:	2800      	cmp	r0, #0
    20e6:	d0f3      	beq.n	20d0 <STACK_SIZE+0xd0>
		if (current_pinmux != PINMUX_UNUSED) {
    20e8:	1c43      	adds	r3, r0, #1
    20ea:	d0f5      	beq.n	20d8 <STACK_SIZE+0xd8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    20ec:	a90e      	add	r1, sp, #56	; 0x38
    20ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    20f0:	0c00      	lsrs	r0, r0, #16
    20f2:	b2c0      	uxtb	r0, r0
    20f4:	4b1d      	ldr	r3, [pc, #116]	; (216c <STACK_SIZE+0x16c>)
    20f6:	4798      	blx	r3
    20f8:	e7ee      	b.n	20d8 <STACK_SIZE+0xd8>
		module->callback[i]            = NULL;
    20fa:	2300      	movs	r3, #0
    20fc:	60eb      	str	r3, [r5, #12]
    20fe:	612b      	str	r3, [r5, #16]
    2100:	616b      	str	r3, [r5, #20]
    2102:	61ab      	str	r3, [r5, #24]
    2104:	61eb      	str	r3, [r5, #28]
    2106:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2108:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    210a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    210c:	2200      	movs	r2, #0
    210e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2110:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2112:	3330      	adds	r3, #48	; 0x30
    2114:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2116:	3301      	adds	r3, #1
    2118:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    211a:	3301      	adds	r3, #1
    211c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    211e:	3301      	adds	r3, #1
    2120:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2122:	6828      	ldr	r0, [r5, #0]
    2124:	4b07      	ldr	r3, [pc, #28]	; (2144 <STACK_SIZE+0x144>)
    2126:	4798      	blx	r3
    2128:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    212a:	4911      	ldr	r1, [pc, #68]	; (2170 <STACK_SIZE+0x170>)
    212c:	4b11      	ldr	r3, [pc, #68]	; (2174 <STACK_SIZE+0x174>)
    212e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2130:	00a4      	lsls	r4, r4, #2
    2132:	4b11      	ldr	r3, [pc, #68]	; (2178 <STACK_SIZE+0x178>)
    2134:	50e5      	str	r5, [r4, r3]
	return status_code;
    2136:	2000      	movs	r0, #0
    2138:	e691      	b.n	1e5e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    213a:	2310      	movs	r3, #16
    213c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    213e:	2300      	movs	r3, #0
    2140:	9307      	str	r3, [sp, #28]
    2142:	e6e8      	b.n	1f16 <usart_init+0xde>
    2144:	00001d31 	.word	0x00001d31
    2148:	40000400 	.word	0x40000400
    214c:	000029f1 	.word	0x000029f1
    2150:	00002965 	.word	0x00002965
    2154:	00001b6d 	.word	0x00001b6d
    2158:	41002000 	.word	0x41002000
    215c:	00002a0d 	.word	0x00002a0d
    2160:	00001aaf 	.word	0x00001aaf
    2164:	00001ad9 	.word	0x00001ad9
    2168:	00001bb9 	.word	0x00001bb9
    216c:	00002ae9 	.word	0x00002ae9
    2170:	00002219 	.word	0x00002219
    2174:	00001d6d 	.word	0x00001d6d
    2178:	200003e0 	.word	0x200003e0

0000217c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    217c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    217e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2180:	2a00      	cmp	r2, #0
    2182:	d101      	bne.n	2188 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2184:	0018      	movs	r0, r3
    2186:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2188:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    218a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    218c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    218e:	2a00      	cmp	r2, #0
    2190:	d1f8      	bne.n	2184 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2192:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2194:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2196:	2a00      	cmp	r2, #0
    2198:	d1fc      	bne.n	2194 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    219a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    219c:	2102      	movs	r1, #2
    219e:	7e1a      	ldrb	r2, [r3, #24]
    21a0:	420a      	tst	r2, r1
    21a2:	d0fc      	beq.n	219e <usart_write_wait+0x22>
	return STATUS_OK;
    21a4:	2300      	movs	r3, #0
    21a6:	e7ed      	b.n	2184 <usart_write_wait+0x8>

000021a8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    21a8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    21aa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    21ac:	2a00      	cmp	r2, #0
    21ae:	d101      	bne.n	21b4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    21b0:	0018      	movs	r0, r3
    21b2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    21b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    21b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    21b8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    21ba:	2a00      	cmp	r2, #0
    21bc:	d1f8      	bne.n	21b0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    21be:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    21c0:	7e10      	ldrb	r0, [r2, #24]
    21c2:	0740      	lsls	r0, r0, #29
    21c4:	d5f4      	bpl.n	21b0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    21c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    21c8:	2b00      	cmp	r3, #0
    21ca:	d1fc      	bne.n	21c6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    21cc:	8b53      	ldrh	r3, [r2, #26]
    21ce:	b2db      	uxtb	r3, r3
	if (error_code) {
    21d0:	0698      	lsls	r0, r3, #26
    21d2:	d01d      	beq.n	2210 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    21d4:	0798      	lsls	r0, r3, #30
    21d6:	d503      	bpl.n	21e0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    21d8:	2302      	movs	r3, #2
    21da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    21dc:	3318      	adds	r3, #24
    21de:	e7e7      	b.n	21b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    21e0:	0758      	lsls	r0, r3, #29
    21e2:	d503      	bpl.n	21ec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    21e4:	2304      	movs	r3, #4
    21e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    21e8:	331a      	adds	r3, #26
    21ea:	e7e1      	b.n	21b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    21ec:	07d8      	lsls	r0, r3, #31
    21ee:	d503      	bpl.n	21f8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    21f0:	2301      	movs	r3, #1
    21f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    21f4:	3312      	adds	r3, #18
    21f6:	e7db      	b.n	21b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    21f8:	06d8      	lsls	r0, r3, #27
    21fa:	d503      	bpl.n	2204 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    21fc:	2310      	movs	r3, #16
    21fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2200:	3332      	adds	r3, #50	; 0x32
    2202:	e7d5      	b.n	21b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2204:	069b      	lsls	r3, r3, #26
    2206:	d503      	bpl.n	2210 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2208:	2320      	movs	r3, #32
    220a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    220c:	3321      	adds	r3, #33	; 0x21
    220e:	e7cf      	b.n	21b0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2210:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2212:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2214:	2300      	movs	r3, #0
    2216:	e7cb      	b.n	21b0 <usart_read_wait+0x8>

00002218 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    221a:	0080      	lsls	r0, r0, #2
    221c:	4b62      	ldr	r3, [pc, #392]	; (23a8 <_usart_interrupt_handler+0x190>)
    221e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2220:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2222:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2224:	2b00      	cmp	r3, #0
    2226:	d1fc      	bne.n	2222 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2228:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    222a:	7da6      	ldrb	r6, [r4, #22]
    222c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    222e:	2330      	movs	r3, #48	; 0x30
    2230:	5ceb      	ldrb	r3, [r5, r3]
    2232:	2231      	movs	r2, #49	; 0x31
    2234:	5caf      	ldrb	r7, [r5, r2]
    2236:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2238:	07f3      	lsls	r3, r6, #31
    223a:	d522      	bpl.n	2282 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    223c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    223e:	b29b      	uxth	r3, r3
    2240:	2b00      	cmp	r3, #0
    2242:	d01c      	beq.n	227e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2244:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2246:	7813      	ldrb	r3, [r2, #0]
    2248:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    224a:	1c51      	adds	r1, r2, #1
    224c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    224e:	7969      	ldrb	r1, [r5, #5]
    2250:	2901      	cmp	r1, #1
    2252:	d00e      	beq.n	2272 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2254:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2256:	05db      	lsls	r3, r3, #23
    2258:	0ddb      	lsrs	r3, r3, #23
    225a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    225c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    225e:	3b01      	subs	r3, #1
    2260:	b29b      	uxth	r3, r3
    2262:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2264:	2b00      	cmp	r3, #0
    2266:	d10c      	bne.n	2282 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2268:	3301      	adds	r3, #1
    226a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    226c:	3301      	adds	r3, #1
    226e:	75a3      	strb	r3, [r4, #22]
    2270:	e007      	b.n	2282 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2272:	7851      	ldrb	r1, [r2, #1]
    2274:	0209      	lsls	r1, r1, #8
    2276:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2278:	3202      	adds	r2, #2
    227a:	62aa      	str	r2, [r5, #40]	; 0x28
    227c:	e7eb      	b.n	2256 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    227e:	2301      	movs	r3, #1
    2280:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2282:	07b3      	lsls	r3, r6, #30
    2284:	d506      	bpl.n	2294 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2286:	2302      	movs	r3, #2
    2288:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    228a:	2200      	movs	r2, #0
    228c:	3331      	adds	r3, #49	; 0x31
    228e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2290:	07fb      	lsls	r3, r7, #31
    2292:	d41a      	bmi.n	22ca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2294:	0773      	lsls	r3, r6, #29
    2296:	d565      	bpl.n	2364 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2298:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    229a:	b29b      	uxth	r3, r3
    229c:	2b00      	cmp	r3, #0
    229e:	d05f      	beq.n	2360 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22a0:	8b63      	ldrh	r3, [r4, #26]
    22a2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    22a4:	071a      	lsls	r2, r3, #28
    22a6:	d414      	bmi.n	22d2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22a8:	223f      	movs	r2, #63	; 0x3f
    22aa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    22ac:	2b00      	cmp	r3, #0
    22ae:	d034      	beq.n	231a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    22b0:	079a      	lsls	r2, r3, #30
    22b2:	d511      	bpl.n	22d8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    22b4:	221a      	movs	r2, #26
    22b6:	2332      	movs	r3, #50	; 0x32
    22b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    22ba:	3b30      	subs	r3, #48	; 0x30
    22bc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    22be:	077b      	lsls	r3, r7, #29
    22c0:	d550      	bpl.n	2364 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    22c2:	0028      	movs	r0, r5
    22c4:	696b      	ldr	r3, [r5, #20]
    22c6:	4798      	blx	r3
    22c8:	e04c      	b.n	2364 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    22ca:	0028      	movs	r0, r5
    22cc:	68eb      	ldr	r3, [r5, #12]
    22ce:	4798      	blx	r3
    22d0:	e7e0      	b.n	2294 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    22d2:	2237      	movs	r2, #55	; 0x37
    22d4:	4013      	ands	r3, r2
    22d6:	e7e9      	b.n	22ac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    22d8:	075a      	lsls	r2, r3, #29
    22da:	d505      	bpl.n	22e8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    22dc:	221e      	movs	r2, #30
    22de:	2332      	movs	r3, #50	; 0x32
    22e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    22e2:	3b2e      	subs	r3, #46	; 0x2e
    22e4:	8363      	strh	r3, [r4, #26]
    22e6:	e7ea      	b.n	22be <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    22e8:	07da      	lsls	r2, r3, #31
    22ea:	d505      	bpl.n	22f8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    22ec:	2213      	movs	r2, #19
    22ee:	2332      	movs	r3, #50	; 0x32
    22f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    22f2:	3b31      	subs	r3, #49	; 0x31
    22f4:	8363      	strh	r3, [r4, #26]
    22f6:	e7e2      	b.n	22be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    22f8:	06da      	lsls	r2, r3, #27
    22fa:	d505      	bpl.n	2308 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    22fc:	2242      	movs	r2, #66	; 0x42
    22fe:	2332      	movs	r3, #50	; 0x32
    2300:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2302:	3b22      	subs	r3, #34	; 0x22
    2304:	8363      	strh	r3, [r4, #26]
    2306:	e7da      	b.n	22be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2308:	2220      	movs	r2, #32
    230a:	421a      	tst	r2, r3
    230c:	d0d7      	beq.n	22be <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    230e:	3221      	adds	r2, #33	; 0x21
    2310:	2332      	movs	r3, #50	; 0x32
    2312:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2314:	3b12      	subs	r3, #18
    2316:	8363      	strh	r3, [r4, #26]
    2318:	e7d1      	b.n	22be <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    231a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    231c:	05db      	lsls	r3, r3, #23
    231e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2320:	b2da      	uxtb	r2, r3
    2322:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2324:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2326:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2328:	1c51      	adds	r1, r2, #1
    232a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    232c:	7969      	ldrb	r1, [r5, #5]
    232e:	2901      	cmp	r1, #1
    2330:	d010      	beq.n	2354 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2332:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2334:	3b01      	subs	r3, #1
    2336:	b29b      	uxth	r3, r3
    2338:	85ab      	strh	r3, [r5, #44]	; 0x2c
    233a:	2b00      	cmp	r3, #0
    233c:	d112      	bne.n	2364 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    233e:	3304      	adds	r3, #4
    2340:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2342:	2200      	movs	r2, #0
    2344:	332e      	adds	r3, #46	; 0x2e
    2346:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2348:	07bb      	lsls	r3, r7, #30
    234a:	d50b      	bpl.n	2364 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    234c:	0028      	movs	r0, r5
    234e:	692b      	ldr	r3, [r5, #16]
    2350:	4798      	blx	r3
    2352:	e007      	b.n	2364 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2354:	0a1b      	lsrs	r3, r3, #8
    2356:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2358:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    235a:	3301      	adds	r3, #1
    235c:	626b      	str	r3, [r5, #36]	; 0x24
    235e:	e7e8      	b.n	2332 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2360:	2304      	movs	r3, #4
    2362:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2364:	06f3      	lsls	r3, r6, #27
    2366:	d504      	bpl.n	2372 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2368:	2310      	movs	r3, #16
    236a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    236c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    236e:	06fb      	lsls	r3, r7, #27
    2370:	d40e      	bmi.n	2390 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2372:	06b3      	lsls	r3, r6, #26
    2374:	d504      	bpl.n	2380 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2376:	2320      	movs	r3, #32
    2378:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    237a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    237c:	073b      	lsls	r3, r7, #28
    237e:	d40b      	bmi.n	2398 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2380:	0733      	lsls	r3, r6, #28
    2382:	d504      	bpl.n	238e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2384:	2308      	movs	r3, #8
    2386:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2388:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    238a:	06bb      	lsls	r3, r7, #26
    238c:	d408      	bmi.n	23a0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2390:	0028      	movs	r0, r5
    2392:	69eb      	ldr	r3, [r5, #28]
    2394:	4798      	blx	r3
    2396:	e7ec      	b.n	2372 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2398:	0028      	movs	r0, r5
    239a:	69ab      	ldr	r3, [r5, #24]
    239c:	4798      	blx	r3
    239e:	e7ef      	b.n	2380 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    23a0:	6a2b      	ldr	r3, [r5, #32]
    23a2:	0028      	movs	r0, r5
    23a4:	4798      	blx	r3
}
    23a6:	e7f2      	b.n	238e <_usart_interrupt_handler+0x176>
    23a8:	200003e0 	.word	0x200003e0

000023ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    23ac:	b510      	push	{r4, lr}
	switch (clock_source) {
    23ae:	2808      	cmp	r0, #8
    23b0:	d803      	bhi.n	23ba <system_clock_source_get_hz+0xe>
    23b2:	0080      	lsls	r0, r0, #2
    23b4:	4b1b      	ldr	r3, [pc, #108]	; (2424 <system_clock_source_get_hz+0x78>)
    23b6:	581b      	ldr	r3, [r3, r0]
    23b8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    23ba:	2000      	movs	r0, #0
    23bc:	e030      	b.n	2420 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    23be:	4b1a      	ldr	r3, [pc, #104]	; (2428 <system_clock_source_get_hz+0x7c>)
    23c0:	6918      	ldr	r0, [r3, #16]
    23c2:	e02d      	b.n	2420 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    23c4:	4b19      	ldr	r3, [pc, #100]	; (242c <system_clock_source_get_hz+0x80>)
    23c6:	6a1b      	ldr	r3, [r3, #32]
    23c8:	059b      	lsls	r3, r3, #22
    23ca:	0f9b      	lsrs	r3, r3, #30
    23cc:	4818      	ldr	r0, [pc, #96]	; (2430 <system_clock_source_get_hz+0x84>)
    23ce:	40d8      	lsrs	r0, r3
    23d0:	e026      	b.n	2420 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    23d2:	4b15      	ldr	r3, [pc, #84]	; (2428 <system_clock_source_get_hz+0x7c>)
    23d4:	6958      	ldr	r0, [r3, #20]
    23d6:	e023      	b.n	2420 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    23d8:	4b13      	ldr	r3, [pc, #76]	; (2428 <system_clock_source_get_hz+0x7c>)
    23da:	681b      	ldr	r3, [r3, #0]
			return 0;
    23dc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    23de:	079b      	lsls	r3, r3, #30
    23e0:	d51e      	bpl.n	2420 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23e2:	4912      	ldr	r1, [pc, #72]	; (242c <system_clock_source_get_hz+0x80>)
    23e4:	2210      	movs	r2, #16
    23e6:	68cb      	ldr	r3, [r1, #12]
    23e8:	421a      	tst	r2, r3
    23ea:	d0fc      	beq.n	23e6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    23ec:	4b0e      	ldr	r3, [pc, #56]	; (2428 <system_clock_source_get_hz+0x7c>)
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	075b      	lsls	r3, r3, #29
    23f2:	d401      	bmi.n	23f8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    23f4:	480f      	ldr	r0, [pc, #60]	; (2434 <system_clock_source_get_hz+0x88>)
    23f6:	e013      	b.n	2420 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    23f8:	2000      	movs	r0, #0
    23fa:	4b0f      	ldr	r3, [pc, #60]	; (2438 <system_clock_source_get_hz+0x8c>)
    23fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    23fe:	4b0a      	ldr	r3, [pc, #40]	; (2428 <system_clock_source_get_hz+0x7c>)
    2400:	689b      	ldr	r3, [r3, #8]
    2402:	041b      	lsls	r3, r3, #16
    2404:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2406:	4358      	muls	r0, r3
    2408:	e00a      	b.n	2420 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    240a:	2350      	movs	r3, #80	; 0x50
    240c:	4a07      	ldr	r2, [pc, #28]	; (242c <system_clock_source_get_hz+0x80>)
    240e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2410:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2412:	075b      	lsls	r3, r3, #29
    2414:	d504      	bpl.n	2420 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2416:	4b04      	ldr	r3, [pc, #16]	; (2428 <system_clock_source_get_hz+0x7c>)
    2418:	68d8      	ldr	r0, [r3, #12]
    241a:	e001      	b.n	2420 <system_clock_source_get_hz+0x74>
		return 32768UL;
    241c:	2080      	movs	r0, #128	; 0x80
    241e:	0200      	lsls	r0, r0, #8
	}
}
    2420:	bd10      	pop	{r4, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	00007c78 	.word	0x00007c78
    2428:	20000254 	.word	0x20000254
    242c:	40000800 	.word	0x40000800
    2430:	007a1200 	.word	0x007a1200
    2434:	02dc6c00 	.word	0x02dc6c00
    2438:	00002a0d 	.word	0x00002a0d

0000243c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    243c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    243e:	490c      	ldr	r1, [pc, #48]	; (2470 <system_clock_source_osc8m_set_config+0x34>)
    2440:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2442:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2444:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2446:	7840      	ldrb	r0, [r0, #1]
    2448:	2201      	movs	r2, #1
    244a:	4010      	ands	r0, r2
    244c:	0180      	lsls	r0, r0, #6
    244e:	2640      	movs	r6, #64	; 0x40
    2450:	43b3      	bics	r3, r6
    2452:	4303      	orrs	r3, r0
    2454:	402a      	ands	r2, r5
    2456:	01d2      	lsls	r2, r2, #7
    2458:	2080      	movs	r0, #128	; 0x80
    245a:	4383      	bics	r3, r0
    245c:	4313      	orrs	r3, r2
    245e:	2203      	movs	r2, #3
    2460:	4022      	ands	r2, r4
    2462:	0212      	lsls	r2, r2, #8
    2464:	4803      	ldr	r0, [pc, #12]	; (2474 <system_clock_source_osc8m_set_config+0x38>)
    2466:	4003      	ands	r3, r0
    2468:	4313      	orrs	r3, r2
    246a:	620b      	str	r3, [r1, #32]
}
    246c:	bd70      	pop	{r4, r5, r6, pc}
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	40000800 	.word	0x40000800
    2474:	fffffcff 	.word	0xfffffcff

00002478 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2478:	b5f0      	push	{r4, r5, r6, r7, lr}
    247a:	46de      	mov	lr, fp
    247c:	4657      	mov	r7, sl
    247e:	464e      	mov	r6, r9
    2480:	4645      	mov	r5, r8
    2482:	b5e0      	push	{r5, r6, r7, lr}
    2484:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2486:	4b26      	ldr	r3, [pc, #152]	; (2520 <system_clock_source_xosc32k_set_config+0xa8>)
    2488:	469b      	mov	fp, r3
    248a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    248c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    248e:	7800      	ldrb	r0, [r0, #0]
    2490:	4242      	negs	r2, r0
    2492:	4142      	adcs	r2, r0
    2494:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2496:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2498:	78ca      	ldrb	r2, [r1, #3]
    249a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    249c:	790a      	ldrb	r2, [r1, #4]
    249e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    24a0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    24a2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    24a4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    24a6:	688a      	ldr	r2, [r1, #8]
    24a8:	491e      	ldr	r1, [pc, #120]	; (2524 <system_clock_source_xosc32k_set_config+0xac>)
    24aa:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    24ac:	2101      	movs	r1, #1
    24ae:	464a      	mov	r2, r9
    24b0:	0092      	lsls	r2, r2, #2
    24b2:	4691      	mov	r9, r2
    24b4:	2204      	movs	r2, #4
    24b6:	4393      	bics	r3, r2
    24b8:	464a      	mov	r2, r9
    24ba:	4313      	orrs	r3, r2
    24bc:	4642      	mov	r2, r8
    24be:	400a      	ands	r2, r1
    24c0:	00d2      	lsls	r2, r2, #3
    24c2:	4690      	mov	r8, r2
    24c4:	2208      	movs	r2, #8
    24c6:	4393      	bics	r3, r2
    24c8:	4642      	mov	r2, r8
    24ca:	4313      	orrs	r3, r2
    24cc:	4662      	mov	r2, ip
    24ce:	400a      	ands	r2, r1
    24d0:	0112      	lsls	r2, r2, #4
    24d2:	4694      	mov	ip, r2
    24d4:	2210      	movs	r2, #16
    24d6:	4393      	bics	r3, r2
    24d8:	4662      	mov	r2, ip
    24da:	4313      	orrs	r3, r2
    24dc:	4008      	ands	r0, r1
    24de:	0140      	lsls	r0, r0, #5
    24e0:	2220      	movs	r2, #32
    24e2:	4393      	bics	r3, r2
    24e4:	4303      	orrs	r3, r0
    24e6:	400f      	ands	r7, r1
    24e8:	01bf      	lsls	r7, r7, #6
    24ea:	2040      	movs	r0, #64	; 0x40
    24ec:	4383      	bics	r3, r0
    24ee:	433b      	orrs	r3, r7
    24f0:	400e      	ands	r6, r1
    24f2:	01f6      	lsls	r6, r6, #7
    24f4:	3040      	adds	r0, #64	; 0x40
    24f6:	4383      	bics	r3, r0
    24f8:	4333      	orrs	r3, r6
    24fa:	3879      	subs	r0, #121	; 0x79
    24fc:	4005      	ands	r5, r0
    24fe:	022d      	lsls	r5, r5, #8
    2500:	4809      	ldr	r0, [pc, #36]	; (2528 <system_clock_source_xosc32k_set_config+0xb0>)
    2502:	4003      	ands	r3, r0
    2504:	432b      	orrs	r3, r5
    2506:	4021      	ands	r1, r4
    2508:	0309      	lsls	r1, r1, #12
    250a:	4808      	ldr	r0, [pc, #32]	; (252c <system_clock_source_xosc32k_set_config+0xb4>)
    250c:	4003      	ands	r3, r0
    250e:	430b      	orrs	r3, r1
    2510:	465a      	mov	r2, fp
    2512:	8293      	strh	r3, [r2, #20]
}
    2514:	bc3c      	pop	{r2, r3, r4, r5}
    2516:	4690      	mov	r8, r2
    2518:	4699      	mov	r9, r3
    251a:	46a2      	mov	sl, r4
    251c:	46ab      	mov	fp, r5
    251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2520:	40000800 	.word	0x40000800
    2524:	20000254 	.word	0x20000254
    2528:	fffff8ff 	.word	0xfffff8ff
    252c:	ffffefff 	.word	0xffffefff

00002530 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2530:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2532:	7a03      	ldrb	r3, [r0, #8]
    2534:	069b      	lsls	r3, r3, #26
    2536:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2538:	8942      	ldrh	r2, [r0, #10]
    253a:	0592      	lsls	r2, r2, #22
    253c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    253e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2540:	4918      	ldr	r1, [pc, #96]	; (25a4 <system_clock_source_dfll_set_config+0x74>)
    2542:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2544:	7983      	ldrb	r3, [r0, #6]
    2546:	79c2      	ldrb	r2, [r0, #7]
    2548:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    254a:	8842      	ldrh	r2, [r0, #2]
    254c:	8884      	ldrh	r4, [r0, #4]
    254e:	4322      	orrs	r2, r4
    2550:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2552:	7842      	ldrb	r2, [r0, #1]
    2554:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2556:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2558:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    255a:	7803      	ldrb	r3, [r0, #0]
    255c:	2b04      	cmp	r3, #4
    255e:	d011      	beq.n	2584 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2560:	2b20      	cmp	r3, #32
    2562:	d10e      	bne.n	2582 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2564:	7b03      	ldrb	r3, [r0, #12]
    2566:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2568:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    256a:	4313      	orrs	r3, r2
    256c:	89c2      	ldrh	r2, [r0, #14]
    256e:	0412      	lsls	r2, r2, #16
    2570:	490d      	ldr	r1, [pc, #52]	; (25a8 <system_clock_source_dfll_set_config+0x78>)
    2572:	400a      	ands	r2, r1
    2574:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2576:	4a0b      	ldr	r2, [pc, #44]	; (25a4 <system_clock_source_dfll_set_config+0x74>)
    2578:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    257a:	6811      	ldr	r1, [r2, #0]
    257c:	4b0b      	ldr	r3, [pc, #44]	; (25ac <system_clock_source_dfll_set_config+0x7c>)
    257e:	430b      	orrs	r3, r1
    2580:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2582:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2584:	7b03      	ldrb	r3, [r0, #12]
    2586:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2588:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    258a:	4313      	orrs	r3, r2
    258c:	89c2      	ldrh	r2, [r0, #14]
    258e:	0412      	lsls	r2, r2, #16
    2590:	4905      	ldr	r1, [pc, #20]	; (25a8 <system_clock_source_dfll_set_config+0x78>)
    2592:	400a      	ands	r2, r1
    2594:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2596:	4a03      	ldr	r2, [pc, #12]	; (25a4 <system_clock_source_dfll_set_config+0x74>)
    2598:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    259a:	6813      	ldr	r3, [r2, #0]
    259c:	2104      	movs	r1, #4
    259e:	430b      	orrs	r3, r1
    25a0:	6013      	str	r3, [r2, #0]
    25a2:	e7ee      	b.n	2582 <system_clock_source_dfll_set_config+0x52>
    25a4:	20000254 	.word	0x20000254
    25a8:	03ff0000 	.word	0x03ff0000
    25ac:	00000424 	.word	0x00000424

000025b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    25b0:	2808      	cmp	r0, #8
    25b2:	d803      	bhi.n	25bc <system_clock_source_enable+0xc>
    25b4:	0080      	lsls	r0, r0, #2
    25b6:	4b25      	ldr	r3, [pc, #148]	; (264c <system_clock_source_enable+0x9c>)
    25b8:	581b      	ldr	r3, [r3, r0]
    25ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    25bc:	2017      	movs	r0, #23
    25be:	e044      	b.n	264a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    25c0:	4a23      	ldr	r2, [pc, #140]	; (2650 <system_clock_source_enable+0xa0>)
    25c2:	6a13      	ldr	r3, [r2, #32]
    25c4:	2102      	movs	r1, #2
    25c6:	430b      	orrs	r3, r1
    25c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    25ca:	2000      	movs	r0, #0
    25cc:	e03d      	b.n	264a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    25ce:	4a20      	ldr	r2, [pc, #128]	; (2650 <system_clock_source_enable+0xa0>)
    25d0:	6993      	ldr	r3, [r2, #24]
    25d2:	2102      	movs	r1, #2
    25d4:	430b      	orrs	r3, r1
    25d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    25d8:	2000      	movs	r0, #0
		break;
    25da:	e036      	b.n	264a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    25dc:	4a1c      	ldr	r2, [pc, #112]	; (2650 <system_clock_source_enable+0xa0>)
    25de:	8a13      	ldrh	r3, [r2, #16]
    25e0:	2102      	movs	r1, #2
    25e2:	430b      	orrs	r3, r1
    25e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    25e6:	2000      	movs	r0, #0
		break;
    25e8:	e02f      	b.n	264a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    25ea:	4a19      	ldr	r2, [pc, #100]	; (2650 <system_clock_source_enable+0xa0>)
    25ec:	8a93      	ldrh	r3, [r2, #20]
    25ee:	2102      	movs	r1, #2
    25f0:	430b      	orrs	r3, r1
    25f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    25f4:	2000      	movs	r0, #0
		break;
    25f6:	e028      	b.n	264a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    25f8:	4916      	ldr	r1, [pc, #88]	; (2654 <system_clock_source_enable+0xa4>)
    25fa:	680b      	ldr	r3, [r1, #0]
    25fc:	2202      	movs	r2, #2
    25fe:	4313      	orrs	r3, r2
    2600:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2602:	4b13      	ldr	r3, [pc, #76]	; (2650 <system_clock_source_enable+0xa0>)
    2604:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2606:	0019      	movs	r1, r3
    2608:	320e      	adds	r2, #14
    260a:	68cb      	ldr	r3, [r1, #12]
    260c:	421a      	tst	r2, r3
    260e:	d0fc      	beq.n	260a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2610:	4a10      	ldr	r2, [pc, #64]	; (2654 <system_clock_source_enable+0xa4>)
    2612:	6891      	ldr	r1, [r2, #8]
    2614:	4b0e      	ldr	r3, [pc, #56]	; (2650 <system_clock_source_enable+0xa0>)
    2616:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2618:	6852      	ldr	r2, [r2, #4]
    261a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    261c:	2200      	movs	r2, #0
    261e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2620:	0019      	movs	r1, r3
    2622:	3210      	adds	r2, #16
    2624:	68cb      	ldr	r3, [r1, #12]
    2626:	421a      	tst	r2, r3
    2628:	d0fc      	beq.n	2624 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    262a:	4b0a      	ldr	r3, [pc, #40]	; (2654 <system_clock_source_enable+0xa4>)
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	b29b      	uxth	r3, r3
    2630:	4a07      	ldr	r2, [pc, #28]	; (2650 <system_clock_source_enable+0xa0>)
    2632:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2634:	2000      	movs	r0, #0
    2636:	e008      	b.n	264a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2638:	4905      	ldr	r1, [pc, #20]	; (2650 <system_clock_source_enable+0xa0>)
    263a:	2244      	movs	r2, #68	; 0x44
    263c:	5c8b      	ldrb	r3, [r1, r2]
    263e:	2002      	movs	r0, #2
    2640:	4303      	orrs	r3, r0
    2642:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2644:	2000      	movs	r0, #0
		break;
    2646:	e000      	b.n	264a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2648:	2000      	movs	r0, #0
}
    264a:	4770      	bx	lr
    264c:	00007c9c 	.word	0x00007c9c
    2650:	40000800 	.word	0x40000800
    2654:	20000254 	.word	0x20000254

00002658 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2658:	b5f0      	push	{r4, r5, r6, r7, lr}
    265a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    265c:	22c2      	movs	r2, #194	; 0xc2
    265e:	00d2      	lsls	r2, r2, #3
    2660:	4b47      	ldr	r3, [pc, #284]	; (2780 <system_clock_init+0x128>)
    2662:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2664:	4a47      	ldr	r2, [pc, #284]	; (2784 <system_clock_init+0x12c>)
    2666:	6853      	ldr	r3, [r2, #4]
    2668:	211e      	movs	r1, #30
    266a:	438b      	bics	r3, r1
    266c:	391a      	subs	r1, #26
    266e:	430b      	orrs	r3, r1
    2670:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2672:	2202      	movs	r2, #2
    2674:	ab01      	add	r3, sp, #4
    2676:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2678:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    267a:	4d43      	ldr	r5, [pc, #268]	; (2788 <system_clock_init+0x130>)
    267c:	b2e0      	uxtb	r0, r4
    267e:	a901      	add	r1, sp, #4
    2680:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2682:	3401      	adds	r4, #1
    2684:	2c25      	cmp	r4, #37	; 0x25
    2686:	d1f9      	bne.n	267c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2688:	a80a      	add	r0, sp, #40	; 0x28
    268a:	2300      	movs	r3, #0
    268c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    268e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2690:	2280      	movs	r2, #128	; 0x80
    2692:	0212      	lsls	r2, r2, #8
    2694:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2696:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2698:	2201      	movs	r2, #1
    269a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    269c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    269e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    26a0:	3202      	adds	r2, #2
    26a2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    26a4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    26a6:	4b39      	ldr	r3, [pc, #228]	; (278c <system_clock_init+0x134>)
    26a8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    26aa:	2005      	movs	r0, #5
    26ac:	4b38      	ldr	r3, [pc, #224]	; (2790 <system_clock_init+0x138>)
    26ae:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    26b0:	4933      	ldr	r1, [pc, #204]	; (2780 <system_clock_init+0x128>)
    26b2:	2202      	movs	r2, #2
    26b4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    26b6:	421a      	tst	r2, r3
    26b8:	d0fc      	beq.n	26b4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    26ba:	4a31      	ldr	r2, [pc, #196]	; (2780 <system_clock_init+0x128>)
    26bc:	8a93      	ldrh	r3, [r2, #20]
    26be:	2180      	movs	r1, #128	; 0x80
    26c0:	430b      	orrs	r3, r1
    26c2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    26c4:	ab05      	add	r3, sp, #20
    26c6:	2100      	movs	r1, #0
    26c8:	2200      	movs	r2, #0
    26ca:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    26cc:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    26ce:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    26d0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    26d2:	313f      	adds	r1, #63	; 0x3f
    26d4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    26d6:	393b      	subs	r1, #59	; 0x3b
    26d8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    26da:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    26dc:	4b2d      	ldr	r3, [pc, #180]	; (2794 <system_clock_init+0x13c>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    26e2:	2b3f      	cmp	r3, #63	; 0x3f
    26e4:	d04a      	beq.n	277c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    26e6:	a805      	add	r0, sp, #20
    26e8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    26ea:	4b2b      	ldr	r3, [pc, #172]	; (2798 <system_clock_init+0x140>)
    26ec:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    26ee:	2307      	movs	r3, #7
    26f0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    26f2:	3338      	adds	r3, #56	; 0x38
    26f4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    26f6:	4b29      	ldr	r3, [pc, #164]	; (279c <system_clock_init+0x144>)
    26f8:	4798      	blx	r3
	config->run_in_standby  = false;
    26fa:	a804      	add	r0, sp, #16
    26fc:	2500      	movs	r5, #0
    26fe:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2700:	2601      	movs	r6, #1
    2702:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2704:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2706:	4b26      	ldr	r3, [pc, #152]	; (27a0 <system_clock_init+0x148>)
    2708:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    270a:	2006      	movs	r0, #6
    270c:	4f20      	ldr	r7, [pc, #128]	; (2790 <system_clock_init+0x138>)
    270e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2710:	4b24      	ldr	r3, [pc, #144]	; (27a4 <system_clock_init+0x14c>)
    2712:	4798      	blx	r3
	config->division_factor    = 1;
    2714:	ac01      	add	r4, sp, #4
    2716:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2718:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    271a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    271c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    271e:	2305      	movs	r3, #5
    2720:	7023      	strb	r3, [r4, #0]
    2722:	0021      	movs	r1, r4
    2724:	2001      	movs	r0, #1
    2726:	4b20      	ldr	r3, [pc, #128]	; (27a8 <system_clock_init+0x150>)
    2728:	4798      	blx	r3
    272a:	2001      	movs	r0, #1
    272c:	4b1f      	ldr	r3, [pc, #124]	; (27ac <system_clock_init+0x154>)
    272e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2730:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2732:	0021      	movs	r1, r4
    2734:	2000      	movs	r0, #0
    2736:	4b14      	ldr	r3, [pc, #80]	; (2788 <system_clock_init+0x130>)
    2738:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    273a:	2000      	movs	r0, #0
    273c:	4b1c      	ldr	r3, [pc, #112]	; (27b0 <system_clock_init+0x158>)
    273e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2740:	2007      	movs	r0, #7
    2742:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2744:	490e      	ldr	r1, [pc, #56]	; (2780 <system_clock_init+0x128>)
    2746:	22d0      	movs	r2, #208	; 0xd0
    2748:	68cb      	ldr	r3, [r1, #12]
    274a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    274c:	2bd0      	cmp	r3, #208	; 0xd0
    274e:	d1fb      	bne.n	2748 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2750:	4a18      	ldr	r2, [pc, #96]	; (27b4 <system_clock_init+0x15c>)
    2752:	2300      	movs	r3, #0
    2754:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2756:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2758:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    275a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    275c:	a901      	add	r1, sp, #4
    275e:	2201      	movs	r2, #1
    2760:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2762:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2764:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2766:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2768:	3307      	adds	r3, #7
    276a:	700b      	strb	r3, [r1, #0]
    276c:	2000      	movs	r0, #0
    276e:	4b0e      	ldr	r3, [pc, #56]	; (27a8 <system_clock_init+0x150>)
    2770:	4798      	blx	r3
    2772:	2000      	movs	r0, #0
    2774:	4b0d      	ldr	r3, [pc, #52]	; (27ac <system_clock_init+0x154>)
    2776:	4798      	blx	r3
#endif
}
    2778:	b00f      	add	sp, #60	; 0x3c
    277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    277c:	3b20      	subs	r3, #32
    277e:	e7b2      	b.n	26e6 <system_clock_init+0x8e>
    2780:	40000800 	.word	0x40000800
    2784:	41004000 	.word	0x41004000
    2788:	000029f1 	.word	0x000029f1
    278c:	00002479 	.word	0x00002479
    2790:	000025b1 	.word	0x000025b1
    2794:	00806024 	.word	0x00806024
    2798:	000005b9 	.word	0x000005b9
    279c:	00002531 	.word	0x00002531
    27a0:	0000243d 	.word	0x0000243d
    27a4:	000027b9 	.word	0x000027b9
    27a8:	000027dd 	.word	0x000027dd
    27ac:	00002895 	.word	0x00002895
    27b0:	00002965 	.word	0x00002965
    27b4:	40000400 	.word	0x40000400

000027b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    27b8:	4a06      	ldr	r2, [pc, #24]	; (27d4 <system_gclk_init+0x1c>)
    27ba:	6993      	ldr	r3, [r2, #24]
    27bc:	2108      	movs	r1, #8
    27be:	430b      	orrs	r3, r1
    27c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    27c2:	2201      	movs	r2, #1
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <system_gclk_init+0x20>)
    27c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    27c8:	0019      	movs	r1, r3
    27ca:	780b      	ldrb	r3, [r1, #0]
    27cc:	4213      	tst	r3, r2
    27ce:	d1fc      	bne.n	27ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    27d0:	4770      	bx	lr
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	40000400 	.word	0x40000400
    27d8:	40000c00 	.word	0x40000c00

000027dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    27dc:	b570      	push	{r4, r5, r6, lr}
    27de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    27e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    27e2:	780d      	ldrb	r5, [r1, #0]
    27e4:	022d      	lsls	r5, r5, #8
    27e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    27e8:	784b      	ldrb	r3, [r1, #1]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d002      	beq.n	27f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	02db      	lsls	r3, r3, #11
    27f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    27f4:	7a4b      	ldrb	r3, [r1, #9]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d002      	beq.n	2800 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    27fa:	2380      	movs	r3, #128	; 0x80
    27fc:	031b      	lsls	r3, r3, #12
    27fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2800:	6848      	ldr	r0, [r1, #4]
    2802:	2801      	cmp	r0, #1
    2804:	d910      	bls.n	2828 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2806:	1e43      	subs	r3, r0, #1
    2808:	4218      	tst	r0, r3
    280a:	d134      	bne.n	2876 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    280c:	2802      	cmp	r0, #2
    280e:	d930      	bls.n	2872 <system_gclk_gen_set_config+0x96>
    2810:	2302      	movs	r3, #2
    2812:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2814:	3201      	adds	r2, #1
						mask <<= 1) {
    2816:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2818:	4298      	cmp	r0, r3
    281a:	d8fb      	bhi.n	2814 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    281c:	0212      	lsls	r2, r2, #8
    281e:	4332      	orrs	r2, r6
    2820:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2822:	2380      	movs	r3, #128	; 0x80
    2824:	035b      	lsls	r3, r3, #13
    2826:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2828:	7a0b      	ldrb	r3, [r1, #8]
    282a:	2b00      	cmp	r3, #0
    282c:	d002      	beq.n	2834 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    282e:	2380      	movs	r3, #128	; 0x80
    2830:	039b      	lsls	r3, r3, #14
    2832:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2834:	4a13      	ldr	r2, [pc, #76]	; (2884 <system_gclk_gen_set_config+0xa8>)
    2836:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2838:	b25b      	sxtb	r3, r3
    283a:	2b00      	cmp	r3, #0
    283c:	dbfb      	blt.n	2836 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    283e:	4b12      	ldr	r3, [pc, #72]	; (2888 <system_gclk_gen_set_config+0xac>)
    2840:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2842:	4b12      	ldr	r3, [pc, #72]	; (288c <system_gclk_gen_set_config+0xb0>)
    2844:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2846:	4a0f      	ldr	r2, [pc, #60]	; (2884 <system_gclk_gen_set_config+0xa8>)
    2848:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    284a:	b25b      	sxtb	r3, r3
    284c:	2b00      	cmp	r3, #0
    284e:	dbfb      	blt.n	2848 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2850:	4b0c      	ldr	r3, [pc, #48]	; (2884 <system_gclk_gen_set_config+0xa8>)
    2852:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2854:	001a      	movs	r2, r3
    2856:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2858:	b25b      	sxtb	r3, r3
    285a:	2b00      	cmp	r3, #0
    285c:	dbfb      	blt.n	2856 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    285e:	4a09      	ldr	r2, [pc, #36]	; (2884 <system_gclk_gen_set_config+0xa8>)
    2860:	6853      	ldr	r3, [r2, #4]
    2862:	2180      	movs	r1, #128	; 0x80
    2864:	0249      	lsls	r1, r1, #9
    2866:	400b      	ands	r3, r1
    2868:	431d      	orrs	r5, r3
    286a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    286c:	4b08      	ldr	r3, [pc, #32]	; (2890 <system_gclk_gen_set_config+0xb4>)
    286e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2870:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2872:	2200      	movs	r2, #0
    2874:	e7d2      	b.n	281c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2876:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2878:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	029b      	lsls	r3, r3, #10
    287e:	431d      	orrs	r5, r3
    2880:	e7d2      	b.n	2828 <system_gclk_gen_set_config+0x4c>
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	40000c00 	.word	0x40000c00
    2888:	00001851 	.word	0x00001851
    288c:	40000c08 	.word	0x40000c08
    2890:	00001891 	.word	0x00001891

00002894 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2894:	b510      	push	{r4, lr}
    2896:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2898:	4a0b      	ldr	r2, [pc, #44]	; (28c8 <system_gclk_gen_enable+0x34>)
    289a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    289c:	b25b      	sxtb	r3, r3
    289e:	2b00      	cmp	r3, #0
    28a0:	dbfb      	blt.n	289a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    28a2:	4b0a      	ldr	r3, [pc, #40]	; (28cc <system_gclk_gen_enable+0x38>)
    28a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    28a6:	4b0a      	ldr	r3, [pc, #40]	; (28d0 <system_gclk_gen_enable+0x3c>)
    28a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28aa:	4a07      	ldr	r2, [pc, #28]	; (28c8 <system_gclk_gen_enable+0x34>)
    28ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28ae:	b25b      	sxtb	r3, r3
    28b0:	2b00      	cmp	r3, #0
    28b2:	dbfb      	blt.n	28ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    28b4:	4a04      	ldr	r2, [pc, #16]	; (28c8 <system_gclk_gen_enable+0x34>)
    28b6:	6851      	ldr	r1, [r2, #4]
    28b8:	2380      	movs	r3, #128	; 0x80
    28ba:	025b      	lsls	r3, r3, #9
    28bc:	430b      	orrs	r3, r1
    28be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    28c0:	4b04      	ldr	r3, [pc, #16]	; (28d4 <system_gclk_gen_enable+0x40>)
    28c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28c4:	bd10      	pop	{r4, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	40000c00 	.word	0x40000c00
    28cc:	00001851 	.word	0x00001851
    28d0:	40000c04 	.word	0x40000c04
    28d4:	00001891 	.word	0x00001891

000028d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    28d8:	b570      	push	{r4, r5, r6, lr}
    28da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28dc:	4a1a      	ldr	r2, [pc, #104]	; (2948 <system_gclk_gen_get_hz+0x70>)
    28de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28e0:	b25b      	sxtb	r3, r3
    28e2:	2b00      	cmp	r3, #0
    28e4:	dbfb      	blt.n	28de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    28e6:	4b19      	ldr	r3, [pc, #100]	; (294c <system_gclk_gen_get_hz+0x74>)
    28e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    28ea:	4b19      	ldr	r3, [pc, #100]	; (2950 <system_gclk_gen_get_hz+0x78>)
    28ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28ee:	4a16      	ldr	r2, [pc, #88]	; (2948 <system_gclk_gen_get_hz+0x70>)
    28f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28f2:	b25b      	sxtb	r3, r3
    28f4:	2b00      	cmp	r3, #0
    28f6:	dbfb      	blt.n	28f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    28f8:	4e13      	ldr	r6, [pc, #76]	; (2948 <system_gclk_gen_get_hz+0x70>)
    28fa:	6870      	ldr	r0, [r6, #4]
    28fc:	04c0      	lsls	r0, r0, #19
    28fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2900:	4b14      	ldr	r3, [pc, #80]	; (2954 <system_gclk_gen_get_hz+0x7c>)
    2902:	4798      	blx	r3
    2904:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2906:	4b12      	ldr	r3, [pc, #72]	; (2950 <system_gclk_gen_get_hz+0x78>)
    2908:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    290a:	6876      	ldr	r6, [r6, #4]
    290c:	02f6      	lsls	r6, r6, #11
    290e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2910:	4b11      	ldr	r3, [pc, #68]	; (2958 <system_gclk_gen_get_hz+0x80>)
    2912:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2914:	4a0c      	ldr	r2, [pc, #48]	; (2948 <system_gclk_gen_get_hz+0x70>)
    2916:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2918:	b25b      	sxtb	r3, r3
    291a:	2b00      	cmp	r3, #0
    291c:	dbfb      	blt.n	2916 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    291e:	4b0a      	ldr	r3, [pc, #40]	; (2948 <system_gclk_gen_get_hz+0x70>)
    2920:	689c      	ldr	r4, [r3, #8]
    2922:	0224      	lsls	r4, r4, #8
    2924:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2926:	4b0d      	ldr	r3, [pc, #52]	; (295c <system_gclk_gen_get_hz+0x84>)
    2928:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    292a:	2e00      	cmp	r6, #0
    292c:	d107      	bne.n	293e <system_gclk_gen_get_hz+0x66>
    292e:	2c01      	cmp	r4, #1
    2930:	d907      	bls.n	2942 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2932:	0021      	movs	r1, r4
    2934:	0028      	movs	r0, r5
    2936:	4b0a      	ldr	r3, [pc, #40]	; (2960 <system_gclk_gen_get_hz+0x88>)
    2938:	4798      	blx	r3
    293a:	0005      	movs	r5, r0
    293c:	e001      	b.n	2942 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    293e:	3401      	adds	r4, #1
    2940:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2942:	0028      	movs	r0, r5
    2944:	bd70      	pop	{r4, r5, r6, pc}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	40000c00 	.word	0x40000c00
    294c:	00001851 	.word	0x00001851
    2950:	40000c04 	.word	0x40000c04
    2954:	000023ad 	.word	0x000023ad
    2958:	40000c08 	.word	0x40000c08
    295c:	00001891 	.word	0x00001891
    2960:	00002fc5 	.word	0x00002fc5

00002964 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2964:	b510      	push	{r4, lr}
    2966:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2968:	4b06      	ldr	r3, [pc, #24]	; (2984 <system_gclk_chan_enable+0x20>)
    296a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    296c:	4b06      	ldr	r3, [pc, #24]	; (2988 <system_gclk_chan_enable+0x24>)
    296e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2970:	4a06      	ldr	r2, [pc, #24]	; (298c <system_gclk_chan_enable+0x28>)
    2972:	8853      	ldrh	r3, [r2, #2]
    2974:	2180      	movs	r1, #128	; 0x80
    2976:	01c9      	lsls	r1, r1, #7
    2978:	430b      	orrs	r3, r1
    297a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    297c:	4b04      	ldr	r3, [pc, #16]	; (2990 <system_gclk_chan_enable+0x2c>)
    297e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2980:	bd10      	pop	{r4, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	00001851 	.word	0x00001851
    2988:	40000c02 	.word	0x40000c02
    298c:	40000c00 	.word	0x40000c00
    2990:	00001891 	.word	0x00001891

00002994 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2994:	b510      	push	{r4, lr}
    2996:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2998:	4b0f      	ldr	r3, [pc, #60]	; (29d8 <system_gclk_chan_disable+0x44>)
    299a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    299c:	4b0f      	ldr	r3, [pc, #60]	; (29dc <system_gclk_chan_disable+0x48>)
    299e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    29a0:	4a0f      	ldr	r2, [pc, #60]	; (29e0 <system_gclk_chan_disable+0x4c>)
    29a2:	8853      	ldrh	r3, [r2, #2]
    29a4:	051b      	lsls	r3, r3, #20
    29a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    29a8:	8853      	ldrh	r3, [r2, #2]
    29aa:	490e      	ldr	r1, [pc, #56]	; (29e4 <system_gclk_chan_disable+0x50>)
    29ac:	400b      	ands	r3, r1
    29ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    29b0:	8853      	ldrh	r3, [r2, #2]
    29b2:	490d      	ldr	r1, [pc, #52]	; (29e8 <system_gclk_chan_disable+0x54>)
    29b4:	400b      	ands	r3, r1
    29b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    29b8:	0011      	movs	r1, r2
    29ba:	2280      	movs	r2, #128	; 0x80
    29bc:	01d2      	lsls	r2, r2, #7
    29be:	884b      	ldrh	r3, [r1, #2]
    29c0:	4213      	tst	r3, r2
    29c2:	d1fc      	bne.n	29be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    29c4:	4906      	ldr	r1, [pc, #24]	; (29e0 <system_gclk_chan_disable+0x4c>)
    29c6:	884a      	ldrh	r2, [r1, #2]
    29c8:	0203      	lsls	r3, r0, #8
    29ca:	4806      	ldr	r0, [pc, #24]	; (29e4 <system_gclk_chan_disable+0x50>)
    29cc:	4002      	ands	r2, r0
    29ce:	4313      	orrs	r3, r2
    29d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    29d2:	4b06      	ldr	r3, [pc, #24]	; (29ec <system_gclk_chan_disable+0x58>)
    29d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    29d6:	bd10      	pop	{r4, pc}
    29d8:	00001851 	.word	0x00001851
    29dc:	40000c02 	.word	0x40000c02
    29e0:	40000c00 	.word	0x40000c00
    29e4:	fffff0ff 	.word	0xfffff0ff
    29e8:	ffffbfff 	.word	0xffffbfff
    29ec:	00001891 	.word	0x00001891

000029f0 <system_gclk_chan_set_config>:
{
    29f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    29f2:	780c      	ldrb	r4, [r1, #0]
    29f4:	0224      	lsls	r4, r4, #8
    29f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    29f8:	4b02      	ldr	r3, [pc, #8]	; (2a04 <system_gclk_chan_set_config+0x14>)
    29fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    29fc:	b2a4      	uxth	r4, r4
    29fe:	4b02      	ldr	r3, [pc, #8]	; (2a08 <system_gclk_chan_set_config+0x18>)
    2a00:	805c      	strh	r4, [r3, #2]
}
    2a02:	bd10      	pop	{r4, pc}
    2a04:	00002995 	.word	0x00002995
    2a08:	40000c00 	.word	0x40000c00

00002a0c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2a0c:	b510      	push	{r4, lr}
    2a0e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a10:	4b06      	ldr	r3, [pc, #24]	; (2a2c <system_gclk_chan_get_hz+0x20>)
    2a12:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a14:	4b06      	ldr	r3, [pc, #24]	; (2a30 <system_gclk_chan_get_hz+0x24>)
    2a16:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2a18:	4b06      	ldr	r3, [pc, #24]	; (2a34 <system_gclk_chan_get_hz+0x28>)
    2a1a:	885c      	ldrh	r4, [r3, #2]
    2a1c:	0524      	lsls	r4, r4, #20
    2a1e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2a20:	4b05      	ldr	r3, [pc, #20]	; (2a38 <system_gclk_chan_get_hz+0x2c>)
    2a22:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2a24:	0020      	movs	r0, r4
    2a26:	4b05      	ldr	r3, [pc, #20]	; (2a3c <system_gclk_chan_get_hz+0x30>)
    2a28:	4798      	blx	r3
}
    2a2a:	bd10      	pop	{r4, pc}
    2a2c:	00001851 	.word	0x00001851
    2a30:	40000c02 	.word	0x40000c02
    2a34:	40000c00 	.word	0x40000c00
    2a38:	00001891 	.word	0x00001891
    2a3c:	000028d9 	.word	0x000028d9

00002a40 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2a40:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2a42:	78d3      	ldrb	r3, [r2, #3]
    2a44:	2b00      	cmp	r3, #0
    2a46:	d135      	bne.n	2ab4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2a48:	7813      	ldrb	r3, [r2, #0]
    2a4a:	2b80      	cmp	r3, #128	; 0x80
    2a4c:	d029      	beq.n	2aa2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2a4e:	061b      	lsls	r3, r3, #24
    2a50:	2480      	movs	r4, #128	; 0x80
    2a52:	0264      	lsls	r4, r4, #9
    2a54:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2a56:	7854      	ldrb	r4, [r2, #1]
    2a58:	2502      	movs	r5, #2
    2a5a:	43ac      	bics	r4, r5
    2a5c:	d106      	bne.n	2a6c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2a5e:	7894      	ldrb	r4, [r2, #2]
    2a60:	2c00      	cmp	r4, #0
    2a62:	d120      	bne.n	2aa6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2a64:	2480      	movs	r4, #128	; 0x80
    2a66:	02a4      	lsls	r4, r4, #10
    2a68:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2a6a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a6c:	7854      	ldrb	r4, [r2, #1]
    2a6e:	3c01      	subs	r4, #1
    2a70:	2c01      	cmp	r4, #1
    2a72:	d91c      	bls.n	2aae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a74:	040d      	lsls	r5, r1, #16
    2a76:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a78:	24a0      	movs	r4, #160	; 0xa0
    2a7a:	05e4      	lsls	r4, r4, #23
    2a7c:	432c      	orrs	r4, r5
    2a7e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a80:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a82:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a84:	24d0      	movs	r4, #208	; 0xd0
    2a86:	0624      	lsls	r4, r4, #24
    2a88:	432c      	orrs	r4, r5
    2a8a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a8c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2a8e:	78d4      	ldrb	r4, [r2, #3]
    2a90:	2c00      	cmp	r4, #0
    2a92:	d122      	bne.n	2ada <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2a94:	035b      	lsls	r3, r3, #13
    2a96:	d51c      	bpl.n	2ad2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2a98:	7893      	ldrb	r3, [r2, #2]
    2a9a:	2b01      	cmp	r3, #1
    2a9c:	d01e      	beq.n	2adc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2a9e:	6141      	str	r1, [r0, #20]
    2aa0:	e017      	b.n	2ad2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2aa2:	2300      	movs	r3, #0
    2aa4:	e7d7      	b.n	2a56 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2aa6:	24c0      	movs	r4, #192	; 0xc0
    2aa8:	02e4      	lsls	r4, r4, #11
    2aaa:	4323      	orrs	r3, r4
    2aac:	e7dd      	b.n	2a6a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2aae:	4c0d      	ldr	r4, [pc, #52]	; (2ae4 <_system_pinmux_config+0xa4>)
    2ab0:	4023      	ands	r3, r4
    2ab2:	e7df      	b.n	2a74 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2ab4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ab6:	040c      	lsls	r4, r1, #16
    2ab8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2aba:	23a0      	movs	r3, #160	; 0xa0
    2abc:	05db      	lsls	r3, r3, #23
    2abe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ac0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2ac2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ac4:	23d0      	movs	r3, #208	; 0xd0
    2ac6:	061b      	lsls	r3, r3, #24
    2ac8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2aca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2acc:	78d3      	ldrb	r3, [r2, #3]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d103      	bne.n	2ada <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ad2:	7853      	ldrb	r3, [r2, #1]
    2ad4:	3b01      	subs	r3, #1
    2ad6:	2b01      	cmp	r3, #1
    2ad8:	d902      	bls.n	2ae0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2ada:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2adc:	6181      	str	r1, [r0, #24]
    2ade:	e7f8      	b.n	2ad2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2ae0:	6081      	str	r1, [r0, #8]
}
    2ae2:	e7fa      	b.n	2ada <_system_pinmux_config+0x9a>
    2ae4:	fffbffff 	.word	0xfffbffff

00002ae8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2ae8:	b510      	push	{r4, lr}
    2aea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2aec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2aee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2af0:	2900      	cmp	r1, #0
    2af2:	d104      	bne.n	2afe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2af4:	0943      	lsrs	r3, r0, #5
    2af6:	01db      	lsls	r3, r3, #7
    2af8:	4905      	ldr	r1, [pc, #20]	; (2b10 <system_pinmux_pin_set_config+0x28>)
    2afa:	468c      	mov	ip, r1
    2afc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2afe:	241f      	movs	r4, #31
    2b00:	4020      	ands	r0, r4
    2b02:	2101      	movs	r1, #1
    2b04:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2b06:	0018      	movs	r0, r3
    2b08:	4b02      	ldr	r3, [pc, #8]	; (2b14 <system_pinmux_pin_set_config+0x2c>)
    2b0a:	4798      	blx	r3
}
    2b0c:	bd10      	pop	{r4, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	41004400 	.word	0x41004400
    2b14:	00002a41 	.word	0x00002a41

00002b18 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2b18:	4770      	bx	lr
	...

00002b1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2b1c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2b1e:	4b05      	ldr	r3, [pc, #20]	; (2b34 <system_init+0x18>)
    2b20:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2b22:	4b05      	ldr	r3, [pc, #20]	; (2b38 <system_init+0x1c>)
    2b24:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2b26:	4b05      	ldr	r3, [pc, #20]	; (2b3c <system_init+0x20>)
    2b28:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2b2a:	4b05      	ldr	r3, [pc, #20]	; (2b40 <system_init+0x24>)
    2b2c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2b2e:	4b05      	ldr	r3, [pc, #20]	; (2b44 <system_init+0x28>)
    2b30:	4798      	blx	r3
}
    2b32:	bd10      	pop	{r4, pc}
    2b34:	00002659 	.word	0x00002659
    2b38:	000018c1 	.word	0x000018c1
    2b3c:	00002b19 	.word	0x00002b19
    2b40:	00001965 	.word	0x00001965
    2b44:	00002b19 	.word	0x00002b19

00002b48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2b48:	e7fe      	b.n	2b48 <Dummy_Handler>
	...

00002b4c <Reset_Handler>:
{
    2b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2b4e:	4a2a      	ldr	r2, [pc, #168]	; (2bf8 <Reset_Handler+0xac>)
    2b50:	4b2a      	ldr	r3, [pc, #168]	; (2bfc <Reset_Handler+0xb0>)
    2b52:	429a      	cmp	r2, r3
    2b54:	d011      	beq.n	2b7a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2b56:	001a      	movs	r2, r3
    2b58:	4b29      	ldr	r3, [pc, #164]	; (2c00 <Reset_Handler+0xb4>)
    2b5a:	429a      	cmp	r2, r3
    2b5c:	d20d      	bcs.n	2b7a <Reset_Handler+0x2e>
    2b5e:	4a29      	ldr	r2, [pc, #164]	; (2c04 <Reset_Handler+0xb8>)
    2b60:	3303      	adds	r3, #3
    2b62:	1a9b      	subs	r3, r3, r2
    2b64:	089b      	lsrs	r3, r3, #2
    2b66:	3301      	adds	r3, #1
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2b6c:	4823      	ldr	r0, [pc, #140]	; (2bfc <Reset_Handler+0xb0>)
    2b6e:	4922      	ldr	r1, [pc, #136]	; (2bf8 <Reset_Handler+0xac>)
    2b70:	588c      	ldr	r4, [r1, r2]
    2b72:	5084      	str	r4, [r0, r2]
    2b74:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2b76:	429a      	cmp	r2, r3
    2b78:	d1fa      	bne.n	2b70 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2b7a:	4a23      	ldr	r2, [pc, #140]	; (2c08 <Reset_Handler+0xbc>)
    2b7c:	4b23      	ldr	r3, [pc, #140]	; (2c0c <Reset_Handler+0xc0>)
    2b7e:	429a      	cmp	r2, r3
    2b80:	d20a      	bcs.n	2b98 <Reset_Handler+0x4c>
    2b82:	43d3      	mvns	r3, r2
    2b84:	4921      	ldr	r1, [pc, #132]	; (2c0c <Reset_Handler+0xc0>)
    2b86:	185b      	adds	r3, r3, r1
    2b88:	2103      	movs	r1, #3
    2b8a:	438b      	bics	r3, r1
    2b8c:	3304      	adds	r3, #4
    2b8e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2b90:	2100      	movs	r1, #0
    2b92:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2b94:	4293      	cmp	r3, r2
    2b96:	d1fc      	bne.n	2b92 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2b98:	4a1d      	ldr	r2, [pc, #116]	; (2c10 <Reset_Handler+0xc4>)
    2b9a:	21ff      	movs	r1, #255	; 0xff
    2b9c:	4b1d      	ldr	r3, [pc, #116]	; (2c14 <Reset_Handler+0xc8>)
    2b9e:	438b      	bics	r3, r1
    2ba0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2ba2:	39fd      	subs	r1, #253	; 0xfd
    2ba4:	2390      	movs	r3, #144	; 0x90
    2ba6:	005b      	lsls	r3, r3, #1
    2ba8:	4a1b      	ldr	r2, [pc, #108]	; (2c18 <Reset_Handler+0xcc>)
    2baa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2bac:	4a1b      	ldr	r2, [pc, #108]	; (2c1c <Reset_Handler+0xd0>)
    2bae:	78d3      	ldrb	r3, [r2, #3]
    2bb0:	2503      	movs	r5, #3
    2bb2:	43ab      	bics	r3, r5
    2bb4:	2402      	movs	r4, #2
    2bb6:	4323      	orrs	r3, r4
    2bb8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2bba:	78d3      	ldrb	r3, [r2, #3]
    2bbc:	270c      	movs	r7, #12
    2bbe:	43bb      	bics	r3, r7
    2bc0:	2608      	movs	r6, #8
    2bc2:	4333      	orrs	r3, r6
    2bc4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2bc6:	4b16      	ldr	r3, [pc, #88]	; (2c20 <Reset_Handler+0xd4>)
    2bc8:	7b98      	ldrb	r0, [r3, #14]
    2bca:	2230      	movs	r2, #48	; 0x30
    2bcc:	4390      	bics	r0, r2
    2bce:	2220      	movs	r2, #32
    2bd0:	4310      	orrs	r0, r2
    2bd2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2bd4:	7b99      	ldrb	r1, [r3, #14]
    2bd6:	43b9      	bics	r1, r7
    2bd8:	4331      	orrs	r1, r6
    2bda:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2bdc:	7b9a      	ldrb	r2, [r3, #14]
    2bde:	43aa      	bics	r2, r5
    2be0:	4322      	orrs	r2, r4
    2be2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2be4:	4a0f      	ldr	r2, [pc, #60]	; (2c24 <Reset_Handler+0xd8>)
    2be6:	6853      	ldr	r3, [r2, #4]
    2be8:	2180      	movs	r1, #128	; 0x80
    2bea:	430b      	orrs	r3, r1
    2bec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2bee:	4b0e      	ldr	r3, [pc, #56]	; (2c28 <Reset_Handler+0xdc>)
    2bf0:	4798      	blx	r3
        main();
    2bf2:	4b0e      	ldr	r3, [pc, #56]	; (2c2c <Reset_Handler+0xe0>)
    2bf4:	4798      	blx	r3
    2bf6:	e7fe      	b.n	2bf6 <Reset_Handler+0xaa>
    2bf8:	00008088 	.word	0x00008088
    2bfc:	20000000 	.word	0x20000000
    2c00:	20000210 	.word	0x20000210
    2c04:	20000004 	.word	0x20000004
    2c08:	20000210 	.word	0x20000210
    2c0c:	20000428 	.word	0x20000428
    2c10:	e000ed00 	.word	0xe000ed00
    2c14:	00000000 	.word	0x00000000
    2c18:	41007000 	.word	0x41007000
    2c1c:	41005000 	.word	0x41005000
    2c20:	41004800 	.word	0x41004800
    2c24:	41004000 	.word	0x41004000
    2c28:	00005815 	.word	0x00005815
    2c2c:	00002df9 	.word	0x00002df9

00002c30 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c32:	46c6      	mov	lr, r8
    2c34:	b500      	push	{lr}
    2c36:	000c      	movs	r4, r1
    2c38:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d10f      	bne.n	2c5e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2c3e:	2a00      	cmp	r2, #0
    2c40:	dd11      	ble.n	2c66 <_read+0x36>
    2c42:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2c44:	4e09      	ldr	r6, [pc, #36]	; (2c6c <_read+0x3c>)
    2c46:	4d0a      	ldr	r5, [pc, #40]	; (2c70 <_read+0x40>)
    2c48:	6830      	ldr	r0, [r6, #0]
    2c4a:	0021      	movs	r1, r4
    2c4c:	682b      	ldr	r3, [r5, #0]
    2c4e:	4798      	blx	r3
		ptr++;
    2c50:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2c52:	42bc      	cmp	r4, r7
    2c54:	d1f8      	bne.n	2c48 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2c56:	4640      	mov	r0, r8
    2c58:	bc04      	pop	{r2}
    2c5a:	4690      	mov	r8, r2
    2c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2c5e:	2301      	movs	r3, #1
    2c60:	425b      	negs	r3, r3
    2c62:	4698      	mov	r8, r3
    2c64:	e7f7      	b.n	2c56 <_read+0x26>
	for (; len > 0; --len) {
    2c66:	4680      	mov	r8, r0
    2c68:	e7f5      	b.n	2c56 <_read+0x26>
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	20000400 	.word	0x20000400
    2c70:	200003f8 	.word	0x200003f8

00002c74 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c76:	46c6      	mov	lr, r8
    2c78:	b500      	push	{lr}
    2c7a:	000e      	movs	r6, r1
    2c7c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2c7e:	3801      	subs	r0, #1
    2c80:	2802      	cmp	r0, #2
    2c82:	d810      	bhi.n	2ca6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2c84:	2a00      	cmp	r2, #0
    2c86:	d011      	beq.n	2cac <_write+0x38>
    2c88:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2c8a:	4b0c      	ldr	r3, [pc, #48]	; (2cbc <_write+0x48>)
    2c8c:	4698      	mov	r8, r3
    2c8e:	4f0c      	ldr	r7, [pc, #48]	; (2cc0 <_write+0x4c>)
    2c90:	4643      	mov	r3, r8
    2c92:	6818      	ldr	r0, [r3, #0]
    2c94:	5d31      	ldrb	r1, [r6, r4]
    2c96:	683b      	ldr	r3, [r7, #0]
    2c98:	4798      	blx	r3
    2c9a:	2800      	cmp	r0, #0
    2c9c:	db08      	blt.n	2cb0 <_write+0x3c>
			return -1;
		}
		++nChars;
    2c9e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2ca0:	42a5      	cmp	r5, r4
    2ca2:	d1f5      	bne.n	2c90 <_write+0x1c>
    2ca4:	e006      	b.n	2cb4 <_write+0x40>
		return -1;
    2ca6:	2401      	movs	r4, #1
    2ca8:	4264      	negs	r4, r4
    2caa:	e003      	b.n	2cb4 <_write+0x40>
	for (; len != 0; --len) {
    2cac:	0014      	movs	r4, r2
    2cae:	e001      	b.n	2cb4 <_write+0x40>
			return -1;
    2cb0:	2401      	movs	r4, #1
    2cb2:	4264      	negs	r4, r4
	}
	return nChars;
}
    2cb4:	0020      	movs	r0, r4
    2cb6:	bc04      	pop	{r2}
    2cb8:	4690      	mov	r8, r2
    2cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cbc:	20000400 	.word	0x20000400
    2cc0:	200003fc 	.word	0x200003fc

00002cc4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2cc4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2cc6:	4a06      	ldr	r2, [pc, #24]	; (2ce0 <_sbrk+0x1c>)
    2cc8:	6812      	ldr	r2, [r2, #0]
    2cca:	2a00      	cmp	r2, #0
    2ccc:	d004      	beq.n	2cd8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2cce:	4a04      	ldr	r2, [pc, #16]	; (2ce0 <_sbrk+0x1c>)
    2cd0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2cd2:	18c3      	adds	r3, r0, r3
    2cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2cd6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2cd8:	4902      	ldr	r1, [pc, #8]	; (2ce4 <_sbrk+0x20>)
    2cda:	4a01      	ldr	r2, [pc, #4]	; (2ce0 <_sbrk+0x1c>)
    2cdc:	6011      	str	r1, [r2, #0]
    2cde:	e7f6      	b.n	2cce <_sbrk+0xa>
    2ce0:	2000026c 	.word	0x2000026c
    2ce4:	20002428 	.word	0x20002428

00002ce8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2ce8:	2001      	movs	r0, #1
    2cea:	4240      	negs	r0, r0
    2cec:	4770      	bx	lr

00002cee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2cee:	2380      	movs	r3, #128	; 0x80
    2cf0:	019b      	lsls	r3, r3, #6
    2cf2:	604b      	str	r3, [r1, #4]

	return 0;
}
    2cf4:	2000      	movs	r0, #0
    2cf6:	4770      	bx	lr

00002cf8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2cf8:	2001      	movs	r0, #1
    2cfa:	4770      	bx	lr

00002cfc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2cfc:	2000      	movs	r0, #0
    2cfe:	4770      	bx	lr

00002d00 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2d00:	b570      	push	{r4, r5, r6, lr}
    2d02:	b082      	sub	sp, #8
    2d04:	0005      	movs	r5, r0
    2d06:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2d08:	2200      	movs	r2, #0
    2d0a:	466b      	mov	r3, sp
    2d0c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2d0e:	4c06      	ldr	r4, [pc, #24]	; (2d28 <usart_serial_getchar+0x28>)
    2d10:	466b      	mov	r3, sp
    2d12:	1d99      	adds	r1, r3, #6
    2d14:	0028      	movs	r0, r5
    2d16:	47a0      	blx	r4
    2d18:	2800      	cmp	r0, #0
    2d1a:	d1f9      	bne.n	2d10 <usart_serial_getchar+0x10>

	*c = temp;
    2d1c:	466b      	mov	r3, sp
    2d1e:	3306      	adds	r3, #6
    2d20:	881b      	ldrh	r3, [r3, #0]
    2d22:	7033      	strb	r3, [r6, #0]
}
    2d24:	b002      	add	sp, #8
    2d26:	bd70      	pop	{r4, r5, r6, pc}
    2d28:	000021a9 	.word	0x000021a9

00002d2c <usart_serial_putchar>:
{
    2d2c:	b570      	push	{r4, r5, r6, lr}
    2d2e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2d30:	b28c      	uxth	r4, r1
    2d32:	4e03      	ldr	r6, [pc, #12]	; (2d40 <usart_serial_putchar+0x14>)
    2d34:	0021      	movs	r1, r4
    2d36:	0028      	movs	r0, r5
    2d38:	47b0      	blx	r6
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d1fa      	bne.n	2d34 <usart_serial_putchar+0x8>
}
    2d3e:	bd70      	pop	{r4, r5, r6, pc}
    2d40:	0000217d 	.word	0x0000217d

00002d44 <configure_i2c>:
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PB02, &config_port_pin);
}

void configure_i2c(void)
{
    2d44:	b530      	push	{r4, r5, lr}
    2d46:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2d48:	ab01      	add	r3, sp, #4
    2d4a:	2264      	movs	r2, #100	; 0x64
    2d4c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2d4e:	4a22      	ldr	r2, [pc, #136]	; (2dd8 <configure_i2c+0x94>)
    2d50:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2d52:	2200      	movs	r2, #0
    2d54:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2d56:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2d58:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2d5a:	2180      	movs	r1, #128	; 0x80
    2d5c:	0389      	lsls	r1, r1, #14
    2d5e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    2d60:	2101      	movs	r1, #1
    2d62:	4249      	negs	r1, r1
    2d64:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2d66:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2d68:	3125      	adds	r1, #37	; 0x25
    2d6a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d6c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d6e:	3108      	adds	r1, #8
    2d70:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d72:	3101      	adds	r1, #1
    2d74:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2d76:	3101      	adds	r1, #1
    2d78:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d7a:	32d7      	adds	r2, #215	; 0xd7
    2d7c:	861a      	strh	r2, [r3, #48]	; 0x30
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout    = 65535;
	config_i2c_master.pinmux_pad0       = PINMUX_PA08D_SERCOM2_PAD0;
    2d7e:	4a17      	ldr	r2, [pc, #92]	; (2ddc <configure_i2c+0x98>)
    2d80:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09D_SERCOM2_PAD1;
    2d82:	4a17      	ldr	r2, [pc, #92]	; (2de0 <configure_i2c+0x9c>)
    2d84:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.generator_source  = GCLK_GENERATOR_0;
	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master) != STATUS_OK);
    2d86:	4d17      	ldr	r5, [pc, #92]	; (2de4 <configure_i2c+0xa0>)
    2d88:	4c17      	ldr	r4, [pc, #92]	; (2de8 <configure_i2c+0xa4>)
    2d8a:	aa01      	add	r2, sp, #4
    2d8c:	4917      	ldr	r1, [pc, #92]	; (2dec <configure_i2c+0xa8>)
    2d8e:	0028      	movs	r0, r5
    2d90:	47a0      	blx	r4
    2d92:	2800      	cmp	r0, #0
    2d94:	d1f9      	bne.n	2d8a <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2d96:	4b13      	ldr	r3, [pc, #76]	; (2de4 <configure_i2c+0xa0>)
    2d98:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2d9a:	2207      	movs	r2, #7
    2d9c:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2d9e:	421a      	tst	r2, r3
    2da0:	d1fc      	bne.n	2d9c <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2da2:	6823      	ldr	r3, [r4, #0]
    2da4:	2202      	movs	r2, #2
    2da6:	4313      	orrs	r3, r2
    2da8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2daa:	4d0e      	ldr	r5, [pc, #56]	; (2de4 <configure_i2c+0xa0>)
    2dac:	6828      	ldr	r0, [r5, #0]
    2dae:	4b10      	ldr	r3, [pc, #64]	; (2df0 <configure_i2c+0xac>)
    2db0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2db2:	231f      	movs	r3, #31
    2db4:	4018      	ands	r0, r3
    2db6:	3b1e      	subs	r3, #30
    2db8:	4083      	lsls	r3, r0
    2dba:	4a0e      	ldr	r2, [pc, #56]	; (2df4 <configure_i2c+0xb0>)
    2dbc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2dbe:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2dc0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2dc2:	2110      	movs	r1, #16
    2dc4:	8b62      	ldrh	r2, [r4, #26]
    2dc6:	420a      	tst	r2, r1
    2dc8:	d104      	bne.n	2dd4 <configure_i2c+0x90>
		timeout_counter++;
    2dca:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2dcc:	4283      	cmp	r3, r0
    2dce:	d3f9      	bcc.n	2dc4 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2dd0:	2310      	movs	r3, #16
    2dd2:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    2dd4:	b00f      	add	sp, #60	; 0x3c
    2dd6:	bd30      	pop	{r4, r5, pc}
    2dd8:	00000d48 	.word	0x00000d48
    2ddc:	00080003 	.word	0x00080003
    2de0:	00090003 	.word	0x00090003
    2de4:	200002d8 	.word	0x200002d8
    2de8:	00000935 	.word	0x00000935
    2dec:	42001000 	.word	0x42001000
    2df0:	00001da9 	.word	0x00001da9
    2df4:	e000e100 	.word	0xe000e100

00002df8 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    2df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfa:	b0d1      	sub	sp, #324	; 0x144
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    2dfc:	4b52      	ldr	r3, [pc, #328]	; (2f48 <main+0x150>)
    2dfe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2e00:	2380      	movs	r3, #128	; 0x80
    2e02:	05db      	lsls	r3, r3, #23
    2e04:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2e06:	2300      	movs	r3, #0
    2e08:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2e0a:	22ff      	movs	r2, #255	; 0xff
    2e0c:	4669      	mov	r1, sp
    2e0e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2e10:	2200      	movs	r2, #0
    2e12:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2e14:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2e16:	2401      	movs	r4, #1
    2e18:	2124      	movs	r1, #36	; 0x24
    2e1a:	4668      	mov	r0, sp
    2e1c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2e1e:	3101      	adds	r1, #1
    2e20:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2e22:	3101      	adds	r1, #1
    2e24:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2e26:	3101      	adds	r1, #1
    2e28:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2e2a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2e2c:	3105      	adds	r1, #5
    2e2e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2e30:	3101      	adds	r1, #1
    2e32:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2e34:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2e36:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2e38:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2e3a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2e3c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2e3e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2e40:	2313      	movs	r3, #19
    2e42:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2e44:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2e46:	23c4      	movs	r3, #196	; 0xc4
    2e48:	039b      	lsls	r3, r3, #14
    2e4a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2e4c:	2301      	movs	r3, #1
    2e4e:	425b      	negs	r3, r3
    2e50:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2e52:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2e54:	4b3d      	ldr	r3, [pc, #244]	; (2f4c <main+0x154>)
    2e56:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2e58:	4b3d      	ldr	r3, [pc, #244]	; (2f50 <main+0x158>)
    2e5a:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2e5c:	23e1      	movs	r3, #225	; 0xe1
    2e5e:	025b      	lsls	r3, r3, #9
    2e60:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2e62:	4d3c      	ldr	r5, [pc, #240]	; (2f54 <main+0x15c>)
    2e64:	4b3c      	ldr	r3, [pc, #240]	; (2f58 <main+0x160>)
    2e66:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2e68:	4a3c      	ldr	r2, [pc, #240]	; (2f5c <main+0x164>)
    2e6a:	4b3d      	ldr	r3, [pc, #244]	; (2f60 <main+0x168>)
    2e6c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2e6e:	4a3d      	ldr	r2, [pc, #244]	; (2f64 <main+0x16c>)
    2e70:	4b3d      	ldr	r3, [pc, #244]	; (2f68 <main+0x170>)
    2e72:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2e74:	466a      	mov	r2, sp
    2e76:	493d      	ldr	r1, [pc, #244]	; (2f6c <main+0x174>)
    2e78:	0028      	movs	r0, r5
    2e7a:	4b3d      	ldr	r3, [pc, #244]	; (2f70 <main+0x178>)
    2e7c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2e7e:	4f3d      	ldr	r7, [pc, #244]	; (2f74 <main+0x17c>)
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	6898      	ldr	r0, [r3, #8]
    2e84:	2100      	movs	r1, #0
    2e86:	4e3c      	ldr	r6, [pc, #240]	; (2f78 <main+0x180>)
    2e88:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	6858      	ldr	r0, [r3, #4]
    2e8e:	2100      	movs	r1, #0
    2e90:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e92:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e94:	0030      	movs	r0, r6
    2e96:	4b39      	ldr	r3, [pc, #228]	; (2f7c <main+0x184>)
    2e98:	4798      	blx	r3
    2e9a:	231f      	movs	r3, #31
    2e9c:	4018      	ands	r0, r3
    2e9e:	4084      	lsls	r4, r0
    2ea0:	4b37      	ldr	r3, [pc, #220]	; (2f80 <main+0x188>)
    2ea2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ea4:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ea6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	d1fc      	bne.n	2ea6 <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2eac:	6833      	ldr	r3, [r6, #0]
    2eae:	2702      	movs	r7, #2
    2eb0:	433b      	orrs	r3, r7
    2eb2:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    2eb4:	4833      	ldr	r0, [pc, #204]	; (2f84 <main+0x18c>)
    2eb6:	4b34      	ldr	r3, [pc, #208]	; (2f88 <main+0x190>)
    2eb8:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    2eba:	4b34      	ldr	r3, [pc, #208]	; (2f8c <main+0x194>)
    2ebc:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    2ebe:	2401      	movs	r4, #1
    2ec0:	466b      	mov	r3, sp
    2ec2:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    2ec4:	2500      	movs	r5, #0
    2ec6:	709d      	strb	r5, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2ec8:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    2eca:	4669      	mov	r1, sp
    2ecc:	2022      	movs	r0, #34	; 0x22
    2ece:	4b30      	ldr	r3, [pc, #192]	; (2f90 <main+0x198>)
    2ed0:	4798      	blx	r3
	adc_get_config_defaults(&config);
    2ed2:	4668      	mov	r0, sp
    2ed4:	4b2f      	ldr	r3, [pc, #188]	; (2f94 <main+0x19c>)
    2ed6:	4798      	blx	r3
	config.clock_source = GCLK_GENERATOR_1;
    2ed8:	466b      	mov	r3, sp
    2eda:	701c      	strb	r4, [r3, #0]
	config.reference = ADC_REFERENCE_INTVCC1;
    2edc:	705f      	strb	r7, [r3, #1]
	config.clock_prescaler = ADC_CTRLB_PRESCALER_DIV16;
    2ede:	2380      	movs	r3, #128	; 0x80
    2ee0:	009b      	lsls	r3, r3, #2
    2ee2:	466a      	mov	r2, sp
    2ee4:	8053      	strh	r3, [r2, #2]
	config.resolution = ADC_RESOLUTION_12BIT;
    2ee6:	7115      	strb	r5, [r2, #4]
	adc_init(&adc_inst, ADC, &config);
    2ee8:	4c2b      	ldr	r4, [pc, #172]	; (2f98 <main+0x1a0>)
    2eea:	492c      	ldr	r1, [pc, #176]	; (2f9c <main+0x1a4>)
    2eec:	0020      	movs	r0, r4
    2eee:	4b2c      	ldr	r3, [pc, #176]	; (2fa0 <main+0x1a8>)
    2ef0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2ef2:	6823      	ldr	r3, [r4, #0]
    2ef4:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2ef6:	b252      	sxtb	r2, r2
    2ef8:	2a00      	cmp	r2, #0
    2efa:	dbfb      	blt.n	2ef4 <main+0xfc>
    2efc:	2180      	movs	r1, #128	; 0x80
    2efe:	0409      	lsls	r1, r1, #16
    2f00:	4a1f      	ldr	r2, [pc, #124]	; (2f80 <main+0x188>)
    2f02:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2f04:	220f      	movs	r2, #15
    2f06:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2f08:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2f0a:	781a      	ldrb	r2, [r3, #0]
    2f0c:	2102      	movs	r1, #2
    2f0e:	430a      	orrs	r2, r1
    2f10:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2f12:	4b21      	ldr	r3, [pc, #132]	; (2f98 <main+0x1a0>)
    2f14:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2f16:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2f18:	b25b      	sxtb	r3, r3
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	dbfb      	blt.n	2f16 <main+0x11e>
	
	/* Init the GPIO & ADC */
	configure_gpio();
	configure_adc();
	configure_i2c();
    2f1e:	4b21      	ldr	r3, [pc, #132]	; (2fa4 <main+0x1ac>)
    2f20:	4798      	blx	r3
		
	/* Do our own initialization for CLI */
	init_cmd_list(); // Creates the help struct.
    2f22:	4b21      	ldr	r3, [pc, #132]	; (2fa8 <main+0x1b0>)
    2f24:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    2f26:	4821      	ldr	r0, [pc, #132]	; (2fac <main+0x1b4>)
    2f28:	4b17      	ldr	r3, [pc, #92]	; (2f88 <main+0x190>)
    2f2a:	4798      	blx	r3
	while (1) {
		printf("> ");
    2f2c:	4d20      	ldr	r5, [pc, #128]	; (2fb0 <main+0x1b8>)
    2f2e:	4e21      	ldr	r6, [pc, #132]	; (2fb4 <main+0x1bc>)
		scanf("%[^\r\n]%*c", input);
    2f30:	4c21      	ldr	r4, [pc, #132]	; (2fb8 <main+0x1c0>)
		printf("> ");
    2f32:	0028      	movs	r0, r5
    2f34:	47b0      	blx	r6
		scanf("%[^\r\n]%*c", input);
    2f36:	a910      	add	r1, sp, #64	; 0x40
    2f38:	0020      	movs	r0, r4
    2f3a:	4b20      	ldr	r3, [pc, #128]	; (2fbc <main+0x1c4>)
    2f3c:	4798      	blx	r3
		handle_user_input(input);
    2f3e:	a810      	add	r0, sp, #64	; 0x40
    2f40:	4b1f      	ldr	r3, [pc, #124]	; (2fc0 <main+0x1c8>)
    2f42:	4798      	blx	r3
    2f44:	e7f5      	b.n	2f32 <main+0x13a>
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	00002b1d 	.word	0x00002b1d
    2f4c:	002a0003 	.word	0x002a0003
    2f50:	002b0003 	.word	0x002b0003
    2f54:	20000270 	.word	0x20000270
    2f58:	20000400 	.word	0x20000400
    2f5c:	00002d2d 	.word	0x00002d2d
    2f60:	200003fc 	.word	0x200003fc
    2f64:	00002d01 	.word	0x00002d01
    2f68:	200003f8 	.word	0x200003f8
    2f6c:	42001800 	.word	0x42001800
    2f70:	00001e39 	.word	0x00001e39
    2f74:	20000040 	.word	0x20000040
    2f78:	000059bd 	.word	0x000059bd
    2f7c:	00001da9 	.word	0x00001da9
    2f80:	e000e100 	.word	0xe000e100
    2f84:	00007cc0 	.word	0x00007cc0
    2f88:	00005975 	.word	0x00005975
    2f8c:	000017d5 	.word	0x000017d5
    2f90:	000019d1 	.word	0x000019d1
    2f94:	00000405 	.word	0x00000405
    2f98:	20000404 	.word	0x20000404
    2f9c:	42004000 	.word	0x42004000
    2fa0:	0000044d 	.word	0x0000044d
    2fa4:	00002d45 	.word	0x00002d45
    2fa8:	00000f25 	.word	0x00000f25
    2fac:	00007d2c 	.word	0x00007d2c
    2fb0:	00007d4c 	.word	0x00007d4c
    2fb4:	00005881 	.word	0x00005881
    2fb8:	00007d50 	.word	0x00007d50
    2fbc:	00005989 	.word	0x00005989
    2fc0:	000013c1 	.word	0x000013c1

00002fc4 <__udivsi3>:
    2fc4:	2200      	movs	r2, #0
    2fc6:	0843      	lsrs	r3, r0, #1
    2fc8:	428b      	cmp	r3, r1
    2fca:	d374      	bcc.n	30b6 <__udivsi3+0xf2>
    2fcc:	0903      	lsrs	r3, r0, #4
    2fce:	428b      	cmp	r3, r1
    2fd0:	d35f      	bcc.n	3092 <__udivsi3+0xce>
    2fd2:	0a03      	lsrs	r3, r0, #8
    2fd4:	428b      	cmp	r3, r1
    2fd6:	d344      	bcc.n	3062 <__udivsi3+0x9e>
    2fd8:	0b03      	lsrs	r3, r0, #12
    2fda:	428b      	cmp	r3, r1
    2fdc:	d328      	bcc.n	3030 <__udivsi3+0x6c>
    2fde:	0c03      	lsrs	r3, r0, #16
    2fe0:	428b      	cmp	r3, r1
    2fe2:	d30d      	bcc.n	3000 <__udivsi3+0x3c>
    2fe4:	22ff      	movs	r2, #255	; 0xff
    2fe6:	0209      	lsls	r1, r1, #8
    2fe8:	ba12      	rev	r2, r2
    2fea:	0c03      	lsrs	r3, r0, #16
    2fec:	428b      	cmp	r3, r1
    2fee:	d302      	bcc.n	2ff6 <__udivsi3+0x32>
    2ff0:	1212      	asrs	r2, r2, #8
    2ff2:	0209      	lsls	r1, r1, #8
    2ff4:	d065      	beq.n	30c2 <__udivsi3+0xfe>
    2ff6:	0b03      	lsrs	r3, r0, #12
    2ff8:	428b      	cmp	r3, r1
    2ffa:	d319      	bcc.n	3030 <__udivsi3+0x6c>
    2ffc:	e000      	b.n	3000 <__udivsi3+0x3c>
    2ffe:	0a09      	lsrs	r1, r1, #8
    3000:	0bc3      	lsrs	r3, r0, #15
    3002:	428b      	cmp	r3, r1
    3004:	d301      	bcc.n	300a <__udivsi3+0x46>
    3006:	03cb      	lsls	r3, r1, #15
    3008:	1ac0      	subs	r0, r0, r3
    300a:	4152      	adcs	r2, r2
    300c:	0b83      	lsrs	r3, r0, #14
    300e:	428b      	cmp	r3, r1
    3010:	d301      	bcc.n	3016 <__udivsi3+0x52>
    3012:	038b      	lsls	r3, r1, #14
    3014:	1ac0      	subs	r0, r0, r3
    3016:	4152      	adcs	r2, r2
    3018:	0b43      	lsrs	r3, r0, #13
    301a:	428b      	cmp	r3, r1
    301c:	d301      	bcc.n	3022 <__udivsi3+0x5e>
    301e:	034b      	lsls	r3, r1, #13
    3020:	1ac0      	subs	r0, r0, r3
    3022:	4152      	adcs	r2, r2
    3024:	0b03      	lsrs	r3, r0, #12
    3026:	428b      	cmp	r3, r1
    3028:	d301      	bcc.n	302e <__udivsi3+0x6a>
    302a:	030b      	lsls	r3, r1, #12
    302c:	1ac0      	subs	r0, r0, r3
    302e:	4152      	adcs	r2, r2
    3030:	0ac3      	lsrs	r3, r0, #11
    3032:	428b      	cmp	r3, r1
    3034:	d301      	bcc.n	303a <__udivsi3+0x76>
    3036:	02cb      	lsls	r3, r1, #11
    3038:	1ac0      	subs	r0, r0, r3
    303a:	4152      	adcs	r2, r2
    303c:	0a83      	lsrs	r3, r0, #10
    303e:	428b      	cmp	r3, r1
    3040:	d301      	bcc.n	3046 <__udivsi3+0x82>
    3042:	028b      	lsls	r3, r1, #10
    3044:	1ac0      	subs	r0, r0, r3
    3046:	4152      	adcs	r2, r2
    3048:	0a43      	lsrs	r3, r0, #9
    304a:	428b      	cmp	r3, r1
    304c:	d301      	bcc.n	3052 <__udivsi3+0x8e>
    304e:	024b      	lsls	r3, r1, #9
    3050:	1ac0      	subs	r0, r0, r3
    3052:	4152      	adcs	r2, r2
    3054:	0a03      	lsrs	r3, r0, #8
    3056:	428b      	cmp	r3, r1
    3058:	d301      	bcc.n	305e <__udivsi3+0x9a>
    305a:	020b      	lsls	r3, r1, #8
    305c:	1ac0      	subs	r0, r0, r3
    305e:	4152      	adcs	r2, r2
    3060:	d2cd      	bcs.n	2ffe <__udivsi3+0x3a>
    3062:	09c3      	lsrs	r3, r0, #7
    3064:	428b      	cmp	r3, r1
    3066:	d301      	bcc.n	306c <__udivsi3+0xa8>
    3068:	01cb      	lsls	r3, r1, #7
    306a:	1ac0      	subs	r0, r0, r3
    306c:	4152      	adcs	r2, r2
    306e:	0983      	lsrs	r3, r0, #6
    3070:	428b      	cmp	r3, r1
    3072:	d301      	bcc.n	3078 <__udivsi3+0xb4>
    3074:	018b      	lsls	r3, r1, #6
    3076:	1ac0      	subs	r0, r0, r3
    3078:	4152      	adcs	r2, r2
    307a:	0943      	lsrs	r3, r0, #5
    307c:	428b      	cmp	r3, r1
    307e:	d301      	bcc.n	3084 <__udivsi3+0xc0>
    3080:	014b      	lsls	r3, r1, #5
    3082:	1ac0      	subs	r0, r0, r3
    3084:	4152      	adcs	r2, r2
    3086:	0903      	lsrs	r3, r0, #4
    3088:	428b      	cmp	r3, r1
    308a:	d301      	bcc.n	3090 <__udivsi3+0xcc>
    308c:	010b      	lsls	r3, r1, #4
    308e:	1ac0      	subs	r0, r0, r3
    3090:	4152      	adcs	r2, r2
    3092:	08c3      	lsrs	r3, r0, #3
    3094:	428b      	cmp	r3, r1
    3096:	d301      	bcc.n	309c <__udivsi3+0xd8>
    3098:	00cb      	lsls	r3, r1, #3
    309a:	1ac0      	subs	r0, r0, r3
    309c:	4152      	adcs	r2, r2
    309e:	0883      	lsrs	r3, r0, #2
    30a0:	428b      	cmp	r3, r1
    30a2:	d301      	bcc.n	30a8 <__udivsi3+0xe4>
    30a4:	008b      	lsls	r3, r1, #2
    30a6:	1ac0      	subs	r0, r0, r3
    30a8:	4152      	adcs	r2, r2
    30aa:	0843      	lsrs	r3, r0, #1
    30ac:	428b      	cmp	r3, r1
    30ae:	d301      	bcc.n	30b4 <__udivsi3+0xf0>
    30b0:	004b      	lsls	r3, r1, #1
    30b2:	1ac0      	subs	r0, r0, r3
    30b4:	4152      	adcs	r2, r2
    30b6:	1a41      	subs	r1, r0, r1
    30b8:	d200      	bcs.n	30bc <__udivsi3+0xf8>
    30ba:	4601      	mov	r1, r0
    30bc:	4152      	adcs	r2, r2
    30be:	4610      	mov	r0, r2
    30c0:	4770      	bx	lr
    30c2:	e7ff      	b.n	30c4 <__udivsi3+0x100>
    30c4:	b501      	push	{r0, lr}
    30c6:	2000      	movs	r0, #0
    30c8:	f000 f806 	bl	30d8 <__aeabi_idiv0>
    30cc:	bd02      	pop	{r1, pc}
    30ce:	46c0      	nop			; (mov r8, r8)

000030d0 <__aeabi_uidivmod>:
    30d0:	2900      	cmp	r1, #0
    30d2:	d0f7      	beq.n	30c4 <__udivsi3+0x100>
    30d4:	e776      	b.n	2fc4 <__udivsi3>
    30d6:	4770      	bx	lr

000030d8 <__aeabi_idiv0>:
    30d8:	4770      	bx	lr
    30da:	46c0      	nop			; (mov r8, r8)

000030dc <__aeabi_lmul>:
    30dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30de:	46ce      	mov	lr, r9
    30e0:	4647      	mov	r7, r8
    30e2:	0415      	lsls	r5, r2, #16
    30e4:	0c2d      	lsrs	r5, r5, #16
    30e6:	002e      	movs	r6, r5
    30e8:	b580      	push	{r7, lr}
    30ea:	0407      	lsls	r7, r0, #16
    30ec:	0c14      	lsrs	r4, r2, #16
    30ee:	0c3f      	lsrs	r7, r7, #16
    30f0:	4699      	mov	r9, r3
    30f2:	0c03      	lsrs	r3, r0, #16
    30f4:	437e      	muls	r6, r7
    30f6:	435d      	muls	r5, r3
    30f8:	4367      	muls	r7, r4
    30fa:	4363      	muls	r3, r4
    30fc:	197f      	adds	r7, r7, r5
    30fe:	0c34      	lsrs	r4, r6, #16
    3100:	19e4      	adds	r4, r4, r7
    3102:	469c      	mov	ip, r3
    3104:	42a5      	cmp	r5, r4
    3106:	d903      	bls.n	3110 <__aeabi_lmul+0x34>
    3108:	2380      	movs	r3, #128	; 0x80
    310a:	025b      	lsls	r3, r3, #9
    310c:	4698      	mov	r8, r3
    310e:	44c4      	add	ip, r8
    3110:	464b      	mov	r3, r9
    3112:	4351      	muls	r1, r2
    3114:	4343      	muls	r3, r0
    3116:	0436      	lsls	r6, r6, #16
    3118:	0c36      	lsrs	r6, r6, #16
    311a:	0c25      	lsrs	r5, r4, #16
    311c:	0424      	lsls	r4, r4, #16
    311e:	4465      	add	r5, ip
    3120:	19a4      	adds	r4, r4, r6
    3122:	1859      	adds	r1, r3, r1
    3124:	1949      	adds	r1, r1, r5
    3126:	0020      	movs	r0, r4
    3128:	bc0c      	pop	{r2, r3}
    312a:	4690      	mov	r8, r2
    312c:	4699      	mov	r9, r3
    312e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003130 <__aeabi_fadd>:
    3130:	b5f0      	push	{r4, r5, r6, r7, lr}
    3132:	46c6      	mov	lr, r8
    3134:	024e      	lsls	r6, r1, #9
    3136:	0247      	lsls	r7, r0, #9
    3138:	0a76      	lsrs	r6, r6, #9
    313a:	0a7b      	lsrs	r3, r7, #9
    313c:	0044      	lsls	r4, r0, #1
    313e:	0fc5      	lsrs	r5, r0, #31
    3140:	00f7      	lsls	r7, r6, #3
    3142:	0048      	lsls	r0, r1, #1
    3144:	4698      	mov	r8, r3
    3146:	b500      	push	{lr}
    3148:	0e24      	lsrs	r4, r4, #24
    314a:	002a      	movs	r2, r5
    314c:	00db      	lsls	r3, r3, #3
    314e:	0e00      	lsrs	r0, r0, #24
    3150:	0fc9      	lsrs	r1, r1, #31
    3152:	46bc      	mov	ip, r7
    3154:	428d      	cmp	r5, r1
    3156:	d067      	beq.n	3228 <__aeabi_fadd+0xf8>
    3158:	1a22      	subs	r2, r4, r0
    315a:	2a00      	cmp	r2, #0
    315c:	dc00      	bgt.n	3160 <__aeabi_fadd+0x30>
    315e:	e0a5      	b.n	32ac <__aeabi_fadd+0x17c>
    3160:	2800      	cmp	r0, #0
    3162:	d13a      	bne.n	31da <__aeabi_fadd+0xaa>
    3164:	2f00      	cmp	r7, #0
    3166:	d100      	bne.n	316a <__aeabi_fadd+0x3a>
    3168:	e093      	b.n	3292 <__aeabi_fadd+0x162>
    316a:	1e51      	subs	r1, r2, #1
    316c:	2900      	cmp	r1, #0
    316e:	d000      	beq.n	3172 <__aeabi_fadd+0x42>
    3170:	e0bc      	b.n	32ec <__aeabi_fadd+0x1bc>
    3172:	2401      	movs	r4, #1
    3174:	1bdb      	subs	r3, r3, r7
    3176:	015a      	lsls	r2, r3, #5
    3178:	d546      	bpl.n	3208 <__aeabi_fadd+0xd8>
    317a:	019b      	lsls	r3, r3, #6
    317c:	099e      	lsrs	r6, r3, #6
    317e:	0030      	movs	r0, r6
    3180:	f002 fb24 	bl	57cc <__clzsi2>
    3184:	3805      	subs	r0, #5
    3186:	4086      	lsls	r6, r0
    3188:	4284      	cmp	r4, r0
    318a:	dd00      	ble.n	318e <__aeabi_fadd+0x5e>
    318c:	e09d      	b.n	32ca <__aeabi_fadd+0x19a>
    318e:	1b04      	subs	r4, r0, r4
    3190:	0032      	movs	r2, r6
    3192:	2020      	movs	r0, #32
    3194:	3401      	adds	r4, #1
    3196:	40e2      	lsrs	r2, r4
    3198:	1b04      	subs	r4, r0, r4
    319a:	40a6      	lsls	r6, r4
    319c:	0033      	movs	r3, r6
    319e:	1e5e      	subs	r6, r3, #1
    31a0:	41b3      	sbcs	r3, r6
    31a2:	2400      	movs	r4, #0
    31a4:	4313      	orrs	r3, r2
    31a6:	075a      	lsls	r2, r3, #29
    31a8:	d004      	beq.n	31b4 <__aeabi_fadd+0x84>
    31aa:	220f      	movs	r2, #15
    31ac:	401a      	ands	r2, r3
    31ae:	2a04      	cmp	r2, #4
    31b0:	d000      	beq.n	31b4 <__aeabi_fadd+0x84>
    31b2:	3304      	adds	r3, #4
    31b4:	015a      	lsls	r2, r3, #5
    31b6:	d529      	bpl.n	320c <__aeabi_fadd+0xdc>
    31b8:	3401      	adds	r4, #1
    31ba:	2cff      	cmp	r4, #255	; 0xff
    31bc:	d100      	bne.n	31c0 <__aeabi_fadd+0x90>
    31be:	e081      	b.n	32c4 <__aeabi_fadd+0x194>
    31c0:	002a      	movs	r2, r5
    31c2:	019b      	lsls	r3, r3, #6
    31c4:	0a5b      	lsrs	r3, r3, #9
    31c6:	b2e4      	uxtb	r4, r4
    31c8:	025b      	lsls	r3, r3, #9
    31ca:	05e4      	lsls	r4, r4, #23
    31cc:	0a58      	lsrs	r0, r3, #9
    31ce:	07d2      	lsls	r2, r2, #31
    31d0:	4320      	orrs	r0, r4
    31d2:	4310      	orrs	r0, r2
    31d4:	bc04      	pop	{r2}
    31d6:	4690      	mov	r8, r2
    31d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31da:	2cff      	cmp	r4, #255	; 0xff
    31dc:	d0e3      	beq.n	31a6 <__aeabi_fadd+0x76>
    31de:	2180      	movs	r1, #128	; 0x80
    31e0:	0038      	movs	r0, r7
    31e2:	04c9      	lsls	r1, r1, #19
    31e4:	4308      	orrs	r0, r1
    31e6:	4684      	mov	ip, r0
    31e8:	2a1b      	cmp	r2, #27
    31ea:	dd00      	ble.n	31ee <__aeabi_fadd+0xbe>
    31ec:	e082      	b.n	32f4 <__aeabi_fadd+0x1c4>
    31ee:	2020      	movs	r0, #32
    31f0:	4661      	mov	r1, ip
    31f2:	40d1      	lsrs	r1, r2
    31f4:	1a82      	subs	r2, r0, r2
    31f6:	4660      	mov	r0, ip
    31f8:	4090      	lsls	r0, r2
    31fa:	0002      	movs	r2, r0
    31fc:	1e50      	subs	r0, r2, #1
    31fe:	4182      	sbcs	r2, r0
    3200:	430a      	orrs	r2, r1
    3202:	1a9b      	subs	r3, r3, r2
    3204:	015a      	lsls	r2, r3, #5
    3206:	d4b8      	bmi.n	317a <__aeabi_fadd+0x4a>
    3208:	075a      	lsls	r2, r3, #29
    320a:	d1ce      	bne.n	31aa <__aeabi_fadd+0x7a>
    320c:	08de      	lsrs	r6, r3, #3
    320e:	002a      	movs	r2, r5
    3210:	2cff      	cmp	r4, #255	; 0xff
    3212:	d13a      	bne.n	328a <__aeabi_fadd+0x15a>
    3214:	2e00      	cmp	r6, #0
    3216:	d100      	bne.n	321a <__aeabi_fadd+0xea>
    3218:	e0ae      	b.n	3378 <__aeabi_fadd+0x248>
    321a:	2380      	movs	r3, #128	; 0x80
    321c:	03db      	lsls	r3, r3, #15
    321e:	4333      	orrs	r3, r6
    3220:	025b      	lsls	r3, r3, #9
    3222:	0a5b      	lsrs	r3, r3, #9
    3224:	24ff      	movs	r4, #255	; 0xff
    3226:	e7cf      	b.n	31c8 <__aeabi_fadd+0x98>
    3228:	1a21      	subs	r1, r4, r0
    322a:	2900      	cmp	r1, #0
    322c:	dd52      	ble.n	32d4 <__aeabi_fadd+0x1a4>
    322e:	2800      	cmp	r0, #0
    3230:	d031      	beq.n	3296 <__aeabi_fadd+0x166>
    3232:	2cff      	cmp	r4, #255	; 0xff
    3234:	d0b7      	beq.n	31a6 <__aeabi_fadd+0x76>
    3236:	2080      	movs	r0, #128	; 0x80
    3238:	003e      	movs	r6, r7
    323a:	04c0      	lsls	r0, r0, #19
    323c:	4306      	orrs	r6, r0
    323e:	46b4      	mov	ip, r6
    3240:	291b      	cmp	r1, #27
    3242:	dd00      	ble.n	3246 <__aeabi_fadd+0x116>
    3244:	e0aa      	b.n	339c <__aeabi_fadd+0x26c>
    3246:	2620      	movs	r6, #32
    3248:	4660      	mov	r0, ip
    324a:	40c8      	lsrs	r0, r1
    324c:	1a71      	subs	r1, r6, r1
    324e:	4666      	mov	r6, ip
    3250:	408e      	lsls	r6, r1
    3252:	0031      	movs	r1, r6
    3254:	1e4e      	subs	r6, r1, #1
    3256:	41b1      	sbcs	r1, r6
    3258:	4301      	orrs	r1, r0
    325a:	185b      	adds	r3, r3, r1
    325c:	0159      	lsls	r1, r3, #5
    325e:	d5d3      	bpl.n	3208 <__aeabi_fadd+0xd8>
    3260:	3401      	adds	r4, #1
    3262:	2cff      	cmp	r4, #255	; 0xff
    3264:	d100      	bne.n	3268 <__aeabi_fadd+0x138>
    3266:	e087      	b.n	3378 <__aeabi_fadd+0x248>
    3268:	2201      	movs	r2, #1
    326a:	4978      	ldr	r1, [pc, #480]	; (344c <__aeabi_fadd+0x31c>)
    326c:	401a      	ands	r2, r3
    326e:	085b      	lsrs	r3, r3, #1
    3270:	400b      	ands	r3, r1
    3272:	4313      	orrs	r3, r2
    3274:	e797      	b.n	31a6 <__aeabi_fadd+0x76>
    3276:	2c00      	cmp	r4, #0
    3278:	d000      	beq.n	327c <__aeabi_fadd+0x14c>
    327a:	e0a7      	b.n	33cc <__aeabi_fadd+0x29c>
    327c:	2b00      	cmp	r3, #0
    327e:	d000      	beq.n	3282 <__aeabi_fadd+0x152>
    3280:	e0b6      	b.n	33f0 <__aeabi_fadd+0x2c0>
    3282:	1e3b      	subs	r3, r7, #0
    3284:	d162      	bne.n	334c <__aeabi_fadd+0x21c>
    3286:	2600      	movs	r6, #0
    3288:	2200      	movs	r2, #0
    328a:	0273      	lsls	r3, r6, #9
    328c:	0a5b      	lsrs	r3, r3, #9
    328e:	b2e4      	uxtb	r4, r4
    3290:	e79a      	b.n	31c8 <__aeabi_fadd+0x98>
    3292:	0014      	movs	r4, r2
    3294:	e787      	b.n	31a6 <__aeabi_fadd+0x76>
    3296:	2f00      	cmp	r7, #0
    3298:	d04d      	beq.n	3336 <__aeabi_fadd+0x206>
    329a:	1e48      	subs	r0, r1, #1
    329c:	2800      	cmp	r0, #0
    329e:	d157      	bne.n	3350 <__aeabi_fadd+0x220>
    32a0:	4463      	add	r3, ip
    32a2:	2401      	movs	r4, #1
    32a4:	015a      	lsls	r2, r3, #5
    32a6:	d5af      	bpl.n	3208 <__aeabi_fadd+0xd8>
    32a8:	2402      	movs	r4, #2
    32aa:	e7dd      	b.n	3268 <__aeabi_fadd+0x138>
    32ac:	2a00      	cmp	r2, #0
    32ae:	d124      	bne.n	32fa <__aeabi_fadd+0x1ca>
    32b0:	1c62      	adds	r2, r4, #1
    32b2:	b2d2      	uxtb	r2, r2
    32b4:	2a01      	cmp	r2, #1
    32b6:	ddde      	ble.n	3276 <__aeabi_fadd+0x146>
    32b8:	1bde      	subs	r6, r3, r7
    32ba:	0172      	lsls	r2, r6, #5
    32bc:	d535      	bpl.n	332a <__aeabi_fadd+0x1fa>
    32be:	1afe      	subs	r6, r7, r3
    32c0:	000d      	movs	r5, r1
    32c2:	e75c      	b.n	317e <__aeabi_fadd+0x4e>
    32c4:	002a      	movs	r2, r5
    32c6:	2300      	movs	r3, #0
    32c8:	e77e      	b.n	31c8 <__aeabi_fadd+0x98>
    32ca:	0033      	movs	r3, r6
    32cc:	4a60      	ldr	r2, [pc, #384]	; (3450 <__aeabi_fadd+0x320>)
    32ce:	1a24      	subs	r4, r4, r0
    32d0:	4013      	ands	r3, r2
    32d2:	e768      	b.n	31a6 <__aeabi_fadd+0x76>
    32d4:	2900      	cmp	r1, #0
    32d6:	d163      	bne.n	33a0 <__aeabi_fadd+0x270>
    32d8:	1c61      	adds	r1, r4, #1
    32da:	b2c8      	uxtb	r0, r1
    32dc:	2801      	cmp	r0, #1
    32de:	dd4e      	ble.n	337e <__aeabi_fadd+0x24e>
    32e0:	29ff      	cmp	r1, #255	; 0xff
    32e2:	d049      	beq.n	3378 <__aeabi_fadd+0x248>
    32e4:	4463      	add	r3, ip
    32e6:	085b      	lsrs	r3, r3, #1
    32e8:	000c      	movs	r4, r1
    32ea:	e75c      	b.n	31a6 <__aeabi_fadd+0x76>
    32ec:	2aff      	cmp	r2, #255	; 0xff
    32ee:	d041      	beq.n	3374 <__aeabi_fadd+0x244>
    32f0:	000a      	movs	r2, r1
    32f2:	e779      	b.n	31e8 <__aeabi_fadd+0xb8>
    32f4:	2201      	movs	r2, #1
    32f6:	1a9b      	subs	r3, r3, r2
    32f8:	e784      	b.n	3204 <__aeabi_fadd+0xd4>
    32fa:	2c00      	cmp	r4, #0
    32fc:	d01d      	beq.n	333a <__aeabi_fadd+0x20a>
    32fe:	28ff      	cmp	r0, #255	; 0xff
    3300:	d022      	beq.n	3348 <__aeabi_fadd+0x218>
    3302:	2480      	movs	r4, #128	; 0x80
    3304:	04e4      	lsls	r4, r4, #19
    3306:	4252      	negs	r2, r2
    3308:	4323      	orrs	r3, r4
    330a:	2a1b      	cmp	r2, #27
    330c:	dd00      	ble.n	3310 <__aeabi_fadd+0x1e0>
    330e:	e08a      	b.n	3426 <__aeabi_fadd+0x2f6>
    3310:	001c      	movs	r4, r3
    3312:	2520      	movs	r5, #32
    3314:	40d4      	lsrs	r4, r2
    3316:	1aaa      	subs	r2, r5, r2
    3318:	4093      	lsls	r3, r2
    331a:	1e5a      	subs	r2, r3, #1
    331c:	4193      	sbcs	r3, r2
    331e:	4323      	orrs	r3, r4
    3320:	4662      	mov	r2, ip
    3322:	0004      	movs	r4, r0
    3324:	1ad3      	subs	r3, r2, r3
    3326:	000d      	movs	r5, r1
    3328:	e725      	b.n	3176 <__aeabi_fadd+0x46>
    332a:	2e00      	cmp	r6, #0
    332c:	d000      	beq.n	3330 <__aeabi_fadd+0x200>
    332e:	e726      	b.n	317e <__aeabi_fadd+0x4e>
    3330:	2200      	movs	r2, #0
    3332:	2400      	movs	r4, #0
    3334:	e7a9      	b.n	328a <__aeabi_fadd+0x15a>
    3336:	000c      	movs	r4, r1
    3338:	e735      	b.n	31a6 <__aeabi_fadd+0x76>
    333a:	2b00      	cmp	r3, #0
    333c:	d04d      	beq.n	33da <__aeabi_fadd+0x2aa>
    333e:	43d2      	mvns	r2, r2
    3340:	2a00      	cmp	r2, #0
    3342:	d0ed      	beq.n	3320 <__aeabi_fadd+0x1f0>
    3344:	28ff      	cmp	r0, #255	; 0xff
    3346:	d1e0      	bne.n	330a <__aeabi_fadd+0x1da>
    3348:	4663      	mov	r3, ip
    334a:	24ff      	movs	r4, #255	; 0xff
    334c:	000d      	movs	r5, r1
    334e:	e72a      	b.n	31a6 <__aeabi_fadd+0x76>
    3350:	29ff      	cmp	r1, #255	; 0xff
    3352:	d00f      	beq.n	3374 <__aeabi_fadd+0x244>
    3354:	0001      	movs	r1, r0
    3356:	e773      	b.n	3240 <__aeabi_fadd+0x110>
    3358:	2b00      	cmp	r3, #0
    335a:	d061      	beq.n	3420 <__aeabi_fadd+0x2f0>
    335c:	24ff      	movs	r4, #255	; 0xff
    335e:	2f00      	cmp	r7, #0
    3360:	d100      	bne.n	3364 <__aeabi_fadd+0x234>
    3362:	e720      	b.n	31a6 <__aeabi_fadd+0x76>
    3364:	2280      	movs	r2, #128	; 0x80
    3366:	4641      	mov	r1, r8
    3368:	03d2      	lsls	r2, r2, #15
    336a:	4211      	tst	r1, r2
    336c:	d002      	beq.n	3374 <__aeabi_fadd+0x244>
    336e:	4216      	tst	r6, r2
    3370:	d100      	bne.n	3374 <__aeabi_fadd+0x244>
    3372:	003b      	movs	r3, r7
    3374:	24ff      	movs	r4, #255	; 0xff
    3376:	e716      	b.n	31a6 <__aeabi_fadd+0x76>
    3378:	24ff      	movs	r4, #255	; 0xff
    337a:	2300      	movs	r3, #0
    337c:	e724      	b.n	31c8 <__aeabi_fadd+0x98>
    337e:	2c00      	cmp	r4, #0
    3380:	d1ea      	bne.n	3358 <__aeabi_fadd+0x228>
    3382:	2b00      	cmp	r3, #0
    3384:	d058      	beq.n	3438 <__aeabi_fadd+0x308>
    3386:	2f00      	cmp	r7, #0
    3388:	d100      	bne.n	338c <__aeabi_fadd+0x25c>
    338a:	e70c      	b.n	31a6 <__aeabi_fadd+0x76>
    338c:	4463      	add	r3, ip
    338e:	015a      	lsls	r2, r3, #5
    3390:	d400      	bmi.n	3394 <__aeabi_fadd+0x264>
    3392:	e739      	b.n	3208 <__aeabi_fadd+0xd8>
    3394:	4a2e      	ldr	r2, [pc, #184]	; (3450 <__aeabi_fadd+0x320>)
    3396:	000c      	movs	r4, r1
    3398:	4013      	ands	r3, r2
    339a:	e704      	b.n	31a6 <__aeabi_fadd+0x76>
    339c:	2101      	movs	r1, #1
    339e:	e75c      	b.n	325a <__aeabi_fadd+0x12a>
    33a0:	2c00      	cmp	r4, #0
    33a2:	d11e      	bne.n	33e2 <__aeabi_fadd+0x2b2>
    33a4:	2b00      	cmp	r3, #0
    33a6:	d040      	beq.n	342a <__aeabi_fadd+0x2fa>
    33a8:	43c9      	mvns	r1, r1
    33aa:	2900      	cmp	r1, #0
    33ac:	d00b      	beq.n	33c6 <__aeabi_fadd+0x296>
    33ae:	28ff      	cmp	r0, #255	; 0xff
    33b0:	d036      	beq.n	3420 <__aeabi_fadd+0x2f0>
    33b2:	291b      	cmp	r1, #27
    33b4:	dc47      	bgt.n	3446 <__aeabi_fadd+0x316>
    33b6:	001c      	movs	r4, r3
    33b8:	2620      	movs	r6, #32
    33ba:	40cc      	lsrs	r4, r1
    33bc:	1a71      	subs	r1, r6, r1
    33be:	408b      	lsls	r3, r1
    33c0:	1e59      	subs	r1, r3, #1
    33c2:	418b      	sbcs	r3, r1
    33c4:	4323      	orrs	r3, r4
    33c6:	4463      	add	r3, ip
    33c8:	0004      	movs	r4, r0
    33ca:	e747      	b.n	325c <__aeabi_fadd+0x12c>
    33cc:	2b00      	cmp	r3, #0
    33ce:	d118      	bne.n	3402 <__aeabi_fadd+0x2d2>
    33d0:	1e3b      	subs	r3, r7, #0
    33d2:	d02d      	beq.n	3430 <__aeabi_fadd+0x300>
    33d4:	000d      	movs	r5, r1
    33d6:	24ff      	movs	r4, #255	; 0xff
    33d8:	e6e5      	b.n	31a6 <__aeabi_fadd+0x76>
    33da:	003b      	movs	r3, r7
    33dc:	0004      	movs	r4, r0
    33de:	000d      	movs	r5, r1
    33e0:	e6e1      	b.n	31a6 <__aeabi_fadd+0x76>
    33e2:	28ff      	cmp	r0, #255	; 0xff
    33e4:	d01c      	beq.n	3420 <__aeabi_fadd+0x2f0>
    33e6:	2480      	movs	r4, #128	; 0x80
    33e8:	04e4      	lsls	r4, r4, #19
    33ea:	4249      	negs	r1, r1
    33ec:	4323      	orrs	r3, r4
    33ee:	e7e0      	b.n	33b2 <__aeabi_fadd+0x282>
    33f0:	2f00      	cmp	r7, #0
    33f2:	d100      	bne.n	33f6 <__aeabi_fadd+0x2c6>
    33f4:	e6d7      	b.n	31a6 <__aeabi_fadd+0x76>
    33f6:	1bde      	subs	r6, r3, r7
    33f8:	0172      	lsls	r2, r6, #5
    33fa:	d51f      	bpl.n	343c <__aeabi_fadd+0x30c>
    33fc:	1afb      	subs	r3, r7, r3
    33fe:	000d      	movs	r5, r1
    3400:	e6d1      	b.n	31a6 <__aeabi_fadd+0x76>
    3402:	24ff      	movs	r4, #255	; 0xff
    3404:	2f00      	cmp	r7, #0
    3406:	d100      	bne.n	340a <__aeabi_fadd+0x2da>
    3408:	e6cd      	b.n	31a6 <__aeabi_fadd+0x76>
    340a:	2280      	movs	r2, #128	; 0x80
    340c:	4640      	mov	r0, r8
    340e:	03d2      	lsls	r2, r2, #15
    3410:	4210      	tst	r0, r2
    3412:	d0af      	beq.n	3374 <__aeabi_fadd+0x244>
    3414:	4216      	tst	r6, r2
    3416:	d1ad      	bne.n	3374 <__aeabi_fadd+0x244>
    3418:	003b      	movs	r3, r7
    341a:	000d      	movs	r5, r1
    341c:	24ff      	movs	r4, #255	; 0xff
    341e:	e6c2      	b.n	31a6 <__aeabi_fadd+0x76>
    3420:	4663      	mov	r3, ip
    3422:	24ff      	movs	r4, #255	; 0xff
    3424:	e6bf      	b.n	31a6 <__aeabi_fadd+0x76>
    3426:	2301      	movs	r3, #1
    3428:	e77a      	b.n	3320 <__aeabi_fadd+0x1f0>
    342a:	003b      	movs	r3, r7
    342c:	0004      	movs	r4, r0
    342e:	e6ba      	b.n	31a6 <__aeabi_fadd+0x76>
    3430:	2680      	movs	r6, #128	; 0x80
    3432:	2200      	movs	r2, #0
    3434:	03f6      	lsls	r6, r6, #15
    3436:	e6f0      	b.n	321a <__aeabi_fadd+0xea>
    3438:	003b      	movs	r3, r7
    343a:	e6b4      	b.n	31a6 <__aeabi_fadd+0x76>
    343c:	1e33      	subs	r3, r6, #0
    343e:	d000      	beq.n	3442 <__aeabi_fadd+0x312>
    3440:	e6e2      	b.n	3208 <__aeabi_fadd+0xd8>
    3442:	2200      	movs	r2, #0
    3444:	e721      	b.n	328a <__aeabi_fadd+0x15a>
    3446:	2301      	movs	r3, #1
    3448:	e7bd      	b.n	33c6 <__aeabi_fadd+0x296>
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	7dffffff 	.word	0x7dffffff
    3450:	fbffffff 	.word	0xfbffffff

00003454 <__aeabi_fdiv>:
    3454:	b5f0      	push	{r4, r5, r6, r7, lr}
    3456:	4657      	mov	r7, sl
    3458:	464e      	mov	r6, r9
    345a:	46de      	mov	lr, fp
    345c:	4645      	mov	r5, r8
    345e:	b5e0      	push	{r5, r6, r7, lr}
    3460:	0244      	lsls	r4, r0, #9
    3462:	0043      	lsls	r3, r0, #1
    3464:	0fc6      	lsrs	r6, r0, #31
    3466:	b083      	sub	sp, #12
    3468:	1c0f      	adds	r7, r1, #0
    346a:	0a64      	lsrs	r4, r4, #9
    346c:	0e1b      	lsrs	r3, r3, #24
    346e:	46b2      	mov	sl, r6
    3470:	d053      	beq.n	351a <__aeabi_fdiv+0xc6>
    3472:	2bff      	cmp	r3, #255	; 0xff
    3474:	d027      	beq.n	34c6 <__aeabi_fdiv+0x72>
    3476:	2280      	movs	r2, #128	; 0x80
    3478:	00e4      	lsls	r4, r4, #3
    347a:	04d2      	lsls	r2, r2, #19
    347c:	4314      	orrs	r4, r2
    347e:	227f      	movs	r2, #127	; 0x7f
    3480:	4252      	negs	r2, r2
    3482:	4690      	mov	r8, r2
    3484:	4498      	add	r8, r3
    3486:	2300      	movs	r3, #0
    3488:	4699      	mov	r9, r3
    348a:	469b      	mov	fp, r3
    348c:	027d      	lsls	r5, r7, #9
    348e:	0078      	lsls	r0, r7, #1
    3490:	0ffb      	lsrs	r3, r7, #31
    3492:	0a6d      	lsrs	r5, r5, #9
    3494:	0e00      	lsrs	r0, r0, #24
    3496:	9300      	str	r3, [sp, #0]
    3498:	d024      	beq.n	34e4 <__aeabi_fdiv+0x90>
    349a:	28ff      	cmp	r0, #255	; 0xff
    349c:	d046      	beq.n	352c <__aeabi_fdiv+0xd8>
    349e:	2380      	movs	r3, #128	; 0x80
    34a0:	2100      	movs	r1, #0
    34a2:	00ed      	lsls	r5, r5, #3
    34a4:	04db      	lsls	r3, r3, #19
    34a6:	431d      	orrs	r5, r3
    34a8:	387f      	subs	r0, #127	; 0x7f
    34aa:	4647      	mov	r7, r8
    34ac:	1a38      	subs	r0, r7, r0
    34ae:	464f      	mov	r7, r9
    34b0:	430f      	orrs	r7, r1
    34b2:	00bf      	lsls	r7, r7, #2
    34b4:	46b9      	mov	r9, r7
    34b6:	0033      	movs	r3, r6
    34b8:	9a00      	ldr	r2, [sp, #0]
    34ba:	4f87      	ldr	r7, [pc, #540]	; (36d8 <__aeabi_fdiv+0x284>)
    34bc:	4053      	eors	r3, r2
    34be:	464a      	mov	r2, r9
    34c0:	58ba      	ldr	r2, [r7, r2]
    34c2:	9301      	str	r3, [sp, #4]
    34c4:	4697      	mov	pc, r2
    34c6:	2c00      	cmp	r4, #0
    34c8:	d14e      	bne.n	3568 <__aeabi_fdiv+0x114>
    34ca:	2308      	movs	r3, #8
    34cc:	4699      	mov	r9, r3
    34ce:	33f7      	adds	r3, #247	; 0xf7
    34d0:	4698      	mov	r8, r3
    34d2:	3bfd      	subs	r3, #253	; 0xfd
    34d4:	469b      	mov	fp, r3
    34d6:	027d      	lsls	r5, r7, #9
    34d8:	0078      	lsls	r0, r7, #1
    34da:	0ffb      	lsrs	r3, r7, #31
    34dc:	0a6d      	lsrs	r5, r5, #9
    34de:	0e00      	lsrs	r0, r0, #24
    34e0:	9300      	str	r3, [sp, #0]
    34e2:	d1da      	bne.n	349a <__aeabi_fdiv+0x46>
    34e4:	2d00      	cmp	r5, #0
    34e6:	d126      	bne.n	3536 <__aeabi_fdiv+0xe2>
    34e8:	2000      	movs	r0, #0
    34ea:	2101      	movs	r1, #1
    34ec:	0033      	movs	r3, r6
    34ee:	9a00      	ldr	r2, [sp, #0]
    34f0:	4f7a      	ldr	r7, [pc, #488]	; (36dc <__aeabi_fdiv+0x288>)
    34f2:	4053      	eors	r3, r2
    34f4:	4642      	mov	r2, r8
    34f6:	1a10      	subs	r0, r2, r0
    34f8:	464a      	mov	r2, r9
    34fa:	430a      	orrs	r2, r1
    34fc:	0092      	lsls	r2, r2, #2
    34fe:	58ba      	ldr	r2, [r7, r2]
    3500:	001d      	movs	r5, r3
    3502:	4697      	mov	pc, r2
    3504:	9b00      	ldr	r3, [sp, #0]
    3506:	002c      	movs	r4, r5
    3508:	469a      	mov	sl, r3
    350a:	468b      	mov	fp, r1
    350c:	465b      	mov	r3, fp
    350e:	2b02      	cmp	r3, #2
    3510:	d131      	bne.n	3576 <__aeabi_fdiv+0x122>
    3512:	4653      	mov	r3, sl
    3514:	21ff      	movs	r1, #255	; 0xff
    3516:	2400      	movs	r4, #0
    3518:	e038      	b.n	358c <__aeabi_fdiv+0x138>
    351a:	2c00      	cmp	r4, #0
    351c:	d117      	bne.n	354e <__aeabi_fdiv+0xfa>
    351e:	2304      	movs	r3, #4
    3520:	4699      	mov	r9, r3
    3522:	2300      	movs	r3, #0
    3524:	4698      	mov	r8, r3
    3526:	3301      	adds	r3, #1
    3528:	469b      	mov	fp, r3
    352a:	e7af      	b.n	348c <__aeabi_fdiv+0x38>
    352c:	20ff      	movs	r0, #255	; 0xff
    352e:	2d00      	cmp	r5, #0
    3530:	d10b      	bne.n	354a <__aeabi_fdiv+0xf6>
    3532:	2102      	movs	r1, #2
    3534:	e7da      	b.n	34ec <__aeabi_fdiv+0x98>
    3536:	0028      	movs	r0, r5
    3538:	f002 f948 	bl	57cc <__clzsi2>
    353c:	1f43      	subs	r3, r0, #5
    353e:	409d      	lsls	r5, r3
    3540:	2376      	movs	r3, #118	; 0x76
    3542:	425b      	negs	r3, r3
    3544:	1a18      	subs	r0, r3, r0
    3546:	2100      	movs	r1, #0
    3548:	e7af      	b.n	34aa <__aeabi_fdiv+0x56>
    354a:	2103      	movs	r1, #3
    354c:	e7ad      	b.n	34aa <__aeabi_fdiv+0x56>
    354e:	0020      	movs	r0, r4
    3550:	f002 f93c 	bl	57cc <__clzsi2>
    3554:	1f43      	subs	r3, r0, #5
    3556:	409c      	lsls	r4, r3
    3558:	2376      	movs	r3, #118	; 0x76
    355a:	425b      	negs	r3, r3
    355c:	1a1b      	subs	r3, r3, r0
    355e:	4698      	mov	r8, r3
    3560:	2300      	movs	r3, #0
    3562:	4699      	mov	r9, r3
    3564:	469b      	mov	fp, r3
    3566:	e791      	b.n	348c <__aeabi_fdiv+0x38>
    3568:	230c      	movs	r3, #12
    356a:	4699      	mov	r9, r3
    356c:	33f3      	adds	r3, #243	; 0xf3
    356e:	4698      	mov	r8, r3
    3570:	3bfc      	subs	r3, #252	; 0xfc
    3572:	469b      	mov	fp, r3
    3574:	e78a      	b.n	348c <__aeabi_fdiv+0x38>
    3576:	2b03      	cmp	r3, #3
    3578:	d100      	bne.n	357c <__aeabi_fdiv+0x128>
    357a:	e0a5      	b.n	36c8 <__aeabi_fdiv+0x274>
    357c:	4655      	mov	r5, sl
    357e:	2b01      	cmp	r3, #1
    3580:	d000      	beq.n	3584 <__aeabi_fdiv+0x130>
    3582:	e081      	b.n	3688 <__aeabi_fdiv+0x234>
    3584:	2301      	movs	r3, #1
    3586:	2100      	movs	r1, #0
    3588:	2400      	movs	r4, #0
    358a:	402b      	ands	r3, r5
    358c:	0264      	lsls	r4, r4, #9
    358e:	05c9      	lsls	r1, r1, #23
    3590:	0a60      	lsrs	r0, r4, #9
    3592:	07db      	lsls	r3, r3, #31
    3594:	4308      	orrs	r0, r1
    3596:	4318      	orrs	r0, r3
    3598:	b003      	add	sp, #12
    359a:	bc3c      	pop	{r2, r3, r4, r5}
    359c:	4690      	mov	r8, r2
    359e:	4699      	mov	r9, r3
    35a0:	46a2      	mov	sl, r4
    35a2:	46ab      	mov	fp, r5
    35a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a6:	2480      	movs	r4, #128	; 0x80
    35a8:	2300      	movs	r3, #0
    35aa:	03e4      	lsls	r4, r4, #15
    35ac:	21ff      	movs	r1, #255	; 0xff
    35ae:	e7ed      	b.n	358c <__aeabi_fdiv+0x138>
    35b0:	21ff      	movs	r1, #255	; 0xff
    35b2:	2400      	movs	r4, #0
    35b4:	e7ea      	b.n	358c <__aeabi_fdiv+0x138>
    35b6:	2301      	movs	r3, #1
    35b8:	1a59      	subs	r1, r3, r1
    35ba:	291b      	cmp	r1, #27
    35bc:	dd66      	ble.n	368c <__aeabi_fdiv+0x238>
    35be:	9a01      	ldr	r2, [sp, #4]
    35c0:	4013      	ands	r3, r2
    35c2:	2100      	movs	r1, #0
    35c4:	2400      	movs	r4, #0
    35c6:	e7e1      	b.n	358c <__aeabi_fdiv+0x138>
    35c8:	2380      	movs	r3, #128	; 0x80
    35ca:	03db      	lsls	r3, r3, #15
    35cc:	421c      	tst	r4, r3
    35ce:	d038      	beq.n	3642 <__aeabi_fdiv+0x1ee>
    35d0:	421d      	tst	r5, r3
    35d2:	d051      	beq.n	3678 <__aeabi_fdiv+0x224>
    35d4:	431c      	orrs	r4, r3
    35d6:	0264      	lsls	r4, r4, #9
    35d8:	0a64      	lsrs	r4, r4, #9
    35da:	0033      	movs	r3, r6
    35dc:	21ff      	movs	r1, #255	; 0xff
    35de:	e7d5      	b.n	358c <__aeabi_fdiv+0x138>
    35e0:	0163      	lsls	r3, r4, #5
    35e2:	016c      	lsls	r4, r5, #5
    35e4:	42a3      	cmp	r3, r4
    35e6:	d23b      	bcs.n	3660 <__aeabi_fdiv+0x20c>
    35e8:	261b      	movs	r6, #27
    35ea:	2100      	movs	r1, #0
    35ec:	3801      	subs	r0, #1
    35ee:	2501      	movs	r5, #1
    35f0:	001f      	movs	r7, r3
    35f2:	0049      	lsls	r1, r1, #1
    35f4:	005b      	lsls	r3, r3, #1
    35f6:	2f00      	cmp	r7, #0
    35f8:	db01      	blt.n	35fe <__aeabi_fdiv+0x1aa>
    35fa:	429c      	cmp	r4, r3
    35fc:	d801      	bhi.n	3602 <__aeabi_fdiv+0x1ae>
    35fe:	1b1b      	subs	r3, r3, r4
    3600:	4329      	orrs	r1, r5
    3602:	3e01      	subs	r6, #1
    3604:	2e00      	cmp	r6, #0
    3606:	d1f3      	bne.n	35f0 <__aeabi_fdiv+0x19c>
    3608:	001c      	movs	r4, r3
    360a:	1e63      	subs	r3, r4, #1
    360c:	419c      	sbcs	r4, r3
    360e:	430c      	orrs	r4, r1
    3610:	0001      	movs	r1, r0
    3612:	317f      	adds	r1, #127	; 0x7f
    3614:	2900      	cmp	r1, #0
    3616:	ddce      	ble.n	35b6 <__aeabi_fdiv+0x162>
    3618:	0763      	lsls	r3, r4, #29
    361a:	d004      	beq.n	3626 <__aeabi_fdiv+0x1d2>
    361c:	230f      	movs	r3, #15
    361e:	4023      	ands	r3, r4
    3620:	2b04      	cmp	r3, #4
    3622:	d000      	beq.n	3626 <__aeabi_fdiv+0x1d2>
    3624:	3404      	adds	r4, #4
    3626:	0123      	lsls	r3, r4, #4
    3628:	d503      	bpl.n	3632 <__aeabi_fdiv+0x1de>
    362a:	0001      	movs	r1, r0
    362c:	4b2c      	ldr	r3, [pc, #176]	; (36e0 <__aeabi_fdiv+0x28c>)
    362e:	3180      	adds	r1, #128	; 0x80
    3630:	401c      	ands	r4, r3
    3632:	29fe      	cmp	r1, #254	; 0xfe
    3634:	dd0d      	ble.n	3652 <__aeabi_fdiv+0x1fe>
    3636:	2301      	movs	r3, #1
    3638:	9a01      	ldr	r2, [sp, #4]
    363a:	21ff      	movs	r1, #255	; 0xff
    363c:	4013      	ands	r3, r2
    363e:	2400      	movs	r4, #0
    3640:	e7a4      	b.n	358c <__aeabi_fdiv+0x138>
    3642:	2380      	movs	r3, #128	; 0x80
    3644:	03db      	lsls	r3, r3, #15
    3646:	431c      	orrs	r4, r3
    3648:	0264      	lsls	r4, r4, #9
    364a:	0a64      	lsrs	r4, r4, #9
    364c:	0033      	movs	r3, r6
    364e:	21ff      	movs	r1, #255	; 0xff
    3650:	e79c      	b.n	358c <__aeabi_fdiv+0x138>
    3652:	2301      	movs	r3, #1
    3654:	9a01      	ldr	r2, [sp, #4]
    3656:	01a4      	lsls	r4, r4, #6
    3658:	0a64      	lsrs	r4, r4, #9
    365a:	b2c9      	uxtb	r1, r1
    365c:	4013      	ands	r3, r2
    365e:	e795      	b.n	358c <__aeabi_fdiv+0x138>
    3660:	1b1b      	subs	r3, r3, r4
    3662:	261a      	movs	r6, #26
    3664:	2101      	movs	r1, #1
    3666:	e7c2      	b.n	35ee <__aeabi_fdiv+0x19a>
    3668:	9b00      	ldr	r3, [sp, #0]
    366a:	468b      	mov	fp, r1
    366c:	469a      	mov	sl, r3
    366e:	2400      	movs	r4, #0
    3670:	e74c      	b.n	350c <__aeabi_fdiv+0xb8>
    3672:	0263      	lsls	r3, r4, #9
    3674:	d5e5      	bpl.n	3642 <__aeabi_fdiv+0x1ee>
    3676:	2500      	movs	r5, #0
    3678:	2480      	movs	r4, #128	; 0x80
    367a:	03e4      	lsls	r4, r4, #15
    367c:	432c      	orrs	r4, r5
    367e:	0264      	lsls	r4, r4, #9
    3680:	0a64      	lsrs	r4, r4, #9
    3682:	9b00      	ldr	r3, [sp, #0]
    3684:	21ff      	movs	r1, #255	; 0xff
    3686:	e781      	b.n	358c <__aeabi_fdiv+0x138>
    3688:	9501      	str	r5, [sp, #4]
    368a:	e7c1      	b.n	3610 <__aeabi_fdiv+0x1bc>
    368c:	0023      	movs	r3, r4
    368e:	2020      	movs	r0, #32
    3690:	40cb      	lsrs	r3, r1
    3692:	1a41      	subs	r1, r0, r1
    3694:	408c      	lsls	r4, r1
    3696:	1e61      	subs	r1, r4, #1
    3698:	418c      	sbcs	r4, r1
    369a:	431c      	orrs	r4, r3
    369c:	0763      	lsls	r3, r4, #29
    369e:	d004      	beq.n	36aa <__aeabi_fdiv+0x256>
    36a0:	230f      	movs	r3, #15
    36a2:	4023      	ands	r3, r4
    36a4:	2b04      	cmp	r3, #4
    36a6:	d000      	beq.n	36aa <__aeabi_fdiv+0x256>
    36a8:	3404      	adds	r4, #4
    36aa:	0163      	lsls	r3, r4, #5
    36ac:	d505      	bpl.n	36ba <__aeabi_fdiv+0x266>
    36ae:	2301      	movs	r3, #1
    36b0:	9a01      	ldr	r2, [sp, #4]
    36b2:	2101      	movs	r1, #1
    36b4:	4013      	ands	r3, r2
    36b6:	2400      	movs	r4, #0
    36b8:	e768      	b.n	358c <__aeabi_fdiv+0x138>
    36ba:	2301      	movs	r3, #1
    36bc:	9a01      	ldr	r2, [sp, #4]
    36be:	01a4      	lsls	r4, r4, #6
    36c0:	0a64      	lsrs	r4, r4, #9
    36c2:	4013      	ands	r3, r2
    36c4:	2100      	movs	r1, #0
    36c6:	e761      	b.n	358c <__aeabi_fdiv+0x138>
    36c8:	2380      	movs	r3, #128	; 0x80
    36ca:	03db      	lsls	r3, r3, #15
    36cc:	431c      	orrs	r4, r3
    36ce:	0264      	lsls	r4, r4, #9
    36d0:	0a64      	lsrs	r4, r4, #9
    36d2:	4653      	mov	r3, sl
    36d4:	21ff      	movs	r1, #255	; 0xff
    36d6:	e759      	b.n	358c <__aeabi_fdiv+0x138>
    36d8:	00007d5c 	.word	0x00007d5c
    36dc:	00007d9c 	.word	0x00007d9c
    36e0:	f7ffffff 	.word	0xf7ffffff

000036e4 <__aeabi_fmul>:
    36e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36e6:	4657      	mov	r7, sl
    36e8:	464e      	mov	r6, r9
    36ea:	4645      	mov	r5, r8
    36ec:	46de      	mov	lr, fp
    36ee:	b5e0      	push	{r5, r6, r7, lr}
    36f0:	0247      	lsls	r7, r0, #9
    36f2:	0046      	lsls	r6, r0, #1
    36f4:	4688      	mov	r8, r1
    36f6:	0a7f      	lsrs	r7, r7, #9
    36f8:	0e36      	lsrs	r6, r6, #24
    36fa:	0fc4      	lsrs	r4, r0, #31
    36fc:	2e00      	cmp	r6, #0
    36fe:	d047      	beq.n	3790 <__aeabi_fmul+0xac>
    3700:	2eff      	cmp	r6, #255	; 0xff
    3702:	d024      	beq.n	374e <__aeabi_fmul+0x6a>
    3704:	00fb      	lsls	r3, r7, #3
    3706:	2780      	movs	r7, #128	; 0x80
    3708:	04ff      	lsls	r7, r7, #19
    370a:	431f      	orrs	r7, r3
    370c:	2300      	movs	r3, #0
    370e:	4699      	mov	r9, r3
    3710:	469a      	mov	sl, r3
    3712:	3e7f      	subs	r6, #127	; 0x7f
    3714:	4643      	mov	r3, r8
    3716:	025d      	lsls	r5, r3, #9
    3718:	0058      	lsls	r0, r3, #1
    371a:	0fdb      	lsrs	r3, r3, #31
    371c:	0a6d      	lsrs	r5, r5, #9
    371e:	0e00      	lsrs	r0, r0, #24
    3720:	4698      	mov	r8, r3
    3722:	d043      	beq.n	37ac <__aeabi_fmul+0xc8>
    3724:	28ff      	cmp	r0, #255	; 0xff
    3726:	d03b      	beq.n	37a0 <__aeabi_fmul+0xbc>
    3728:	00eb      	lsls	r3, r5, #3
    372a:	2580      	movs	r5, #128	; 0x80
    372c:	2200      	movs	r2, #0
    372e:	04ed      	lsls	r5, r5, #19
    3730:	431d      	orrs	r5, r3
    3732:	387f      	subs	r0, #127	; 0x7f
    3734:	1836      	adds	r6, r6, r0
    3736:	1c73      	adds	r3, r6, #1
    3738:	4641      	mov	r1, r8
    373a:	469b      	mov	fp, r3
    373c:	464b      	mov	r3, r9
    373e:	4061      	eors	r1, r4
    3740:	4313      	orrs	r3, r2
    3742:	2b0f      	cmp	r3, #15
    3744:	d864      	bhi.n	3810 <__aeabi_fmul+0x12c>
    3746:	4875      	ldr	r0, [pc, #468]	; (391c <__aeabi_fmul+0x238>)
    3748:	009b      	lsls	r3, r3, #2
    374a:	58c3      	ldr	r3, [r0, r3]
    374c:	469f      	mov	pc, r3
    374e:	2f00      	cmp	r7, #0
    3750:	d142      	bne.n	37d8 <__aeabi_fmul+0xf4>
    3752:	2308      	movs	r3, #8
    3754:	4699      	mov	r9, r3
    3756:	3b06      	subs	r3, #6
    3758:	26ff      	movs	r6, #255	; 0xff
    375a:	469a      	mov	sl, r3
    375c:	e7da      	b.n	3714 <__aeabi_fmul+0x30>
    375e:	4641      	mov	r1, r8
    3760:	2a02      	cmp	r2, #2
    3762:	d028      	beq.n	37b6 <__aeabi_fmul+0xd2>
    3764:	2a03      	cmp	r2, #3
    3766:	d100      	bne.n	376a <__aeabi_fmul+0x86>
    3768:	e0ce      	b.n	3908 <__aeabi_fmul+0x224>
    376a:	2a01      	cmp	r2, #1
    376c:	d000      	beq.n	3770 <__aeabi_fmul+0x8c>
    376e:	e0ac      	b.n	38ca <__aeabi_fmul+0x1e6>
    3770:	4011      	ands	r1, r2
    3772:	2000      	movs	r0, #0
    3774:	2200      	movs	r2, #0
    3776:	b2cc      	uxtb	r4, r1
    3778:	0240      	lsls	r0, r0, #9
    377a:	05d2      	lsls	r2, r2, #23
    377c:	0a40      	lsrs	r0, r0, #9
    377e:	07e4      	lsls	r4, r4, #31
    3780:	4310      	orrs	r0, r2
    3782:	4320      	orrs	r0, r4
    3784:	bc3c      	pop	{r2, r3, r4, r5}
    3786:	4690      	mov	r8, r2
    3788:	4699      	mov	r9, r3
    378a:	46a2      	mov	sl, r4
    378c:	46ab      	mov	fp, r5
    378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3790:	2f00      	cmp	r7, #0
    3792:	d115      	bne.n	37c0 <__aeabi_fmul+0xdc>
    3794:	2304      	movs	r3, #4
    3796:	4699      	mov	r9, r3
    3798:	3b03      	subs	r3, #3
    379a:	2600      	movs	r6, #0
    379c:	469a      	mov	sl, r3
    379e:	e7b9      	b.n	3714 <__aeabi_fmul+0x30>
    37a0:	20ff      	movs	r0, #255	; 0xff
    37a2:	2202      	movs	r2, #2
    37a4:	2d00      	cmp	r5, #0
    37a6:	d0c5      	beq.n	3734 <__aeabi_fmul+0x50>
    37a8:	2203      	movs	r2, #3
    37aa:	e7c3      	b.n	3734 <__aeabi_fmul+0x50>
    37ac:	2d00      	cmp	r5, #0
    37ae:	d119      	bne.n	37e4 <__aeabi_fmul+0x100>
    37b0:	2000      	movs	r0, #0
    37b2:	2201      	movs	r2, #1
    37b4:	e7be      	b.n	3734 <__aeabi_fmul+0x50>
    37b6:	2401      	movs	r4, #1
    37b8:	22ff      	movs	r2, #255	; 0xff
    37ba:	400c      	ands	r4, r1
    37bc:	2000      	movs	r0, #0
    37be:	e7db      	b.n	3778 <__aeabi_fmul+0x94>
    37c0:	0038      	movs	r0, r7
    37c2:	f002 f803 	bl	57cc <__clzsi2>
    37c6:	2676      	movs	r6, #118	; 0x76
    37c8:	1f43      	subs	r3, r0, #5
    37ca:	409f      	lsls	r7, r3
    37cc:	2300      	movs	r3, #0
    37ce:	4276      	negs	r6, r6
    37d0:	1a36      	subs	r6, r6, r0
    37d2:	4699      	mov	r9, r3
    37d4:	469a      	mov	sl, r3
    37d6:	e79d      	b.n	3714 <__aeabi_fmul+0x30>
    37d8:	230c      	movs	r3, #12
    37da:	4699      	mov	r9, r3
    37dc:	3b09      	subs	r3, #9
    37de:	26ff      	movs	r6, #255	; 0xff
    37e0:	469a      	mov	sl, r3
    37e2:	e797      	b.n	3714 <__aeabi_fmul+0x30>
    37e4:	0028      	movs	r0, r5
    37e6:	f001 fff1 	bl	57cc <__clzsi2>
    37ea:	1f43      	subs	r3, r0, #5
    37ec:	409d      	lsls	r5, r3
    37ee:	2376      	movs	r3, #118	; 0x76
    37f0:	425b      	negs	r3, r3
    37f2:	1a18      	subs	r0, r3, r0
    37f4:	2200      	movs	r2, #0
    37f6:	e79d      	b.n	3734 <__aeabi_fmul+0x50>
    37f8:	2080      	movs	r0, #128	; 0x80
    37fa:	2400      	movs	r4, #0
    37fc:	03c0      	lsls	r0, r0, #15
    37fe:	22ff      	movs	r2, #255	; 0xff
    3800:	e7ba      	b.n	3778 <__aeabi_fmul+0x94>
    3802:	003d      	movs	r5, r7
    3804:	4652      	mov	r2, sl
    3806:	e7ab      	b.n	3760 <__aeabi_fmul+0x7c>
    3808:	003d      	movs	r5, r7
    380a:	0021      	movs	r1, r4
    380c:	4652      	mov	r2, sl
    380e:	e7a7      	b.n	3760 <__aeabi_fmul+0x7c>
    3810:	0c3b      	lsrs	r3, r7, #16
    3812:	469c      	mov	ip, r3
    3814:	042a      	lsls	r2, r5, #16
    3816:	0c12      	lsrs	r2, r2, #16
    3818:	0c2b      	lsrs	r3, r5, #16
    381a:	0014      	movs	r4, r2
    381c:	4660      	mov	r0, ip
    381e:	4665      	mov	r5, ip
    3820:	043f      	lsls	r7, r7, #16
    3822:	0c3f      	lsrs	r7, r7, #16
    3824:	437c      	muls	r4, r7
    3826:	4342      	muls	r2, r0
    3828:	435d      	muls	r5, r3
    382a:	437b      	muls	r3, r7
    382c:	0c27      	lsrs	r7, r4, #16
    382e:	189b      	adds	r3, r3, r2
    3830:	18ff      	adds	r7, r7, r3
    3832:	42ba      	cmp	r2, r7
    3834:	d903      	bls.n	383e <__aeabi_fmul+0x15a>
    3836:	2380      	movs	r3, #128	; 0x80
    3838:	025b      	lsls	r3, r3, #9
    383a:	469c      	mov	ip, r3
    383c:	4465      	add	r5, ip
    383e:	0424      	lsls	r4, r4, #16
    3840:	043a      	lsls	r2, r7, #16
    3842:	0c24      	lsrs	r4, r4, #16
    3844:	1912      	adds	r2, r2, r4
    3846:	0193      	lsls	r3, r2, #6
    3848:	1e5c      	subs	r4, r3, #1
    384a:	41a3      	sbcs	r3, r4
    384c:	0c3f      	lsrs	r7, r7, #16
    384e:	0e92      	lsrs	r2, r2, #26
    3850:	197d      	adds	r5, r7, r5
    3852:	431a      	orrs	r2, r3
    3854:	01ad      	lsls	r5, r5, #6
    3856:	4315      	orrs	r5, r2
    3858:	012b      	lsls	r3, r5, #4
    385a:	d504      	bpl.n	3866 <__aeabi_fmul+0x182>
    385c:	2301      	movs	r3, #1
    385e:	465e      	mov	r6, fp
    3860:	086a      	lsrs	r2, r5, #1
    3862:	401d      	ands	r5, r3
    3864:	4315      	orrs	r5, r2
    3866:	0032      	movs	r2, r6
    3868:	327f      	adds	r2, #127	; 0x7f
    386a:	2a00      	cmp	r2, #0
    386c:	dd25      	ble.n	38ba <__aeabi_fmul+0x1d6>
    386e:	076b      	lsls	r3, r5, #29
    3870:	d004      	beq.n	387c <__aeabi_fmul+0x198>
    3872:	230f      	movs	r3, #15
    3874:	402b      	ands	r3, r5
    3876:	2b04      	cmp	r3, #4
    3878:	d000      	beq.n	387c <__aeabi_fmul+0x198>
    387a:	3504      	adds	r5, #4
    387c:	012b      	lsls	r3, r5, #4
    387e:	d503      	bpl.n	3888 <__aeabi_fmul+0x1a4>
    3880:	0032      	movs	r2, r6
    3882:	4b27      	ldr	r3, [pc, #156]	; (3920 <__aeabi_fmul+0x23c>)
    3884:	3280      	adds	r2, #128	; 0x80
    3886:	401d      	ands	r5, r3
    3888:	2afe      	cmp	r2, #254	; 0xfe
    388a:	dc94      	bgt.n	37b6 <__aeabi_fmul+0xd2>
    388c:	2401      	movs	r4, #1
    388e:	01a8      	lsls	r0, r5, #6
    3890:	0a40      	lsrs	r0, r0, #9
    3892:	b2d2      	uxtb	r2, r2
    3894:	400c      	ands	r4, r1
    3896:	e76f      	b.n	3778 <__aeabi_fmul+0x94>
    3898:	2080      	movs	r0, #128	; 0x80
    389a:	03c0      	lsls	r0, r0, #15
    389c:	4207      	tst	r7, r0
    389e:	d007      	beq.n	38b0 <__aeabi_fmul+0x1cc>
    38a0:	4205      	tst	r5, r0
    38a2:	d105      	bne.n	38b0 <__aeabi_fmul+0x1cc>
    38a4:	4328      	orrs	r0, r5
    38a6:	0240      	lsls	r0, r0, #9
    38a8:	0a40      	lsrs	r0, r0, #9
    38aa:	4644      	mov	r4, r8
    38ac:	22ff      	movs	r2, #255	; 0xff
    38ae:	e763      	b.n	3778 <__aeabi_fmul+0x94>
    38b0:	4338      	orrs	r0, r7
    38b2:	0240      	lsls	r0, r0, #9
    38b4:	0a40      	lsrs	r0, r0, #9
    38b6:	22ff      	movs	r2, #255	; 0xff
    38b8:	e75e      	b.n	3778 <__aeabi_fmul+0x94>
    38ba:	2401      	movs	r4, #1
    38bc:	1aa3      	subs	r3, r4, r2
    38be:	2b1b      	cmp	r3, #27
    38c0:	dd05      	ble.n	38ce <__aeabi_fmul+0x1ea>
    38c2:	400c      	ands	r4, r1
    38c4:	2200      	movs	r2, #0
    38c6:	2000      	movs	r0, #0
    38c8:	e756      	b.n	3778 <__aeabi_fmul+0x94>
    38ca:	465e      	mov	r6, fp
    38cc:	e7cb      	b.n	3866 <__aeabi_fmul+0x182>
    38ce:	002a      	movs	r2, r5
    38d0:	2020      	movs	r0, #32
    38d2:	40da      	lsrs	r2, r3
    38d4:	1ac3      	subs	r3, r0, r3
    38d6:	409d      	lsls	r5, r3
    38d8:	002b      	movs	r3, r5
    38da:	1e5d      	subs	r5, r3, #1
    38dc:	41ab      	sbcs	r3, r5
    38de:	4313      	orrs	r3, r2
    38e0:	075a      	lsls	r2, r3, #29
    38e2:	d004      	beq.n	38ee <__aeabi_fmul+0x20a>
    38e4:	220f      	movs	r2, #15
    38e6:	401a      	ands	r2, r3
    38e8:	2a04      	cmp	r2, #4
    38ea:	d000      	beq.n	38ee <__aeabi_fmul+0x20a>
    38ec:	3304      	adds	r3, #4
    38ee:	015a      	lsls	r2, r3, #5
    38f0:	d504      	bpl.n	38fc <__aeabi_fmul+0x218>
    38f2:	2401      	movs	r4, #1
    38f4:	2201      	movs	r2, #1
    38f6:	400c      	ands	r4, r1
    38f8:	2000      	movs	r0, #0
    38fa:	e73d      	b.n	3778 <__aeabi_fmul+0x94>
    38fc:	2401      	movs	r4, #1
    38fe:	019b      	lsls	r3, r3, #6
    3900:	0a58      	lsrs	r0, r3, #9
    3902:	400c      	ands	r4, r1
    3904:	2200      	movs	r2, #0
    3906:	e737      	b.n	3778 <__aeabi_fmul+0x94>
    3908:	2080      	movs	r0, #128	; 0x80
    390a:	2401      	movs	r4, #1
    390c:	03c0      	lsls	r0, r0, #15
    390e:	4328      	orrs	r0, r5
    3910:	0240      	lsls	r0, r0, #9
    3912:	0a40      	lsrs	r0, r0, #9
    3914:	400c      	ands	r4, r1
    3916:	22ff      	movs	r2, #255	; 0xff
    3918:	e72e      	b.n	3778 <__aeabi_fmul+0x94>
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	00007ddc 	.word	0x00007ddc
    3920:	f7ffffff 	.word	0xf7ffffff

00003924 <__aeabi_fsub>:
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	464f      	mov	r7, r9
    3928:	46d6      	mov	lr, sl
    392a:	4646      	mov	r6, r8
    392c:	0044      	lsls	r4, r0, #1
    392e:	b5c0      	push	{r6, r7, lr}
    3930:	0fc2      	lsrs	r2, r0, #31
    3932:	0247      	lsls	r7, r0, #9
    3934:	0248      	lsls	r0, r1, #9
    3936:	0a40      	lsrs	r0, r0, #9
    3938:	4684      	mov	ip, r0
    393a:	4666      	mov	r6, ip
    393c:	0a7b      	lsrs	r3, r7, #9
    393e:	0048      	lsls	r0, r1, #1
    3940:	0fc9      	lsrs	r1, r1, #31
    3942:	469a      	mov	sl, r3
    3944:	0e24      	lsrs	r4, r4, #24
    3946:	0015      	movs	r5, r2
    3948:	00db      	lsls	r3, r3, #3
    394a:	0e00      	lsrs	r0, r0, #24
    394c:	4689      	mov	r9, r1
    394e:	00f6      	lsls	r6, r6, #3
    3950:	28ff      	cmp	r0, #255	; 0xff
    3952:	d100      	bne.n	3956 <__aeabi_fsub+0x32>
    3954:	e08f      	b.n	3a76 <__aeabi_fsub+0x152>
    3956:	2101      	movs	r1, #1
    3958:	464f      	mov	r7, r9
    395a:	404f      	eors	r7, r1
    395c:	0039      	movs	r1, r7
    395e:	4291      	cmp	r1, r2
    3960:	d066      	beq.n	3a30 <__aeabi_fsub+0x10c>
    3962:	1a22      	subs	r2, r4, r0
    3964:	2a00      	cmp	r2, #0
    3966:	dc00      	bgt.n	396a <__aeabi_fsub+0x46>
    3968:	e09d      	b.n	3aa6 <__aeabi_fsub+0x182>
    396a:	2800      	cmp	r0, #0
    396c:	d13d      	bne.n	39ea <__aeabi_fsub+0xc6>
    396e:	2e00      	cmp	r6, #0
    3970:	d100      	bne.n	3974 <__aeabi_fsub+0x50>
    3972:	e08b      	b.n	3a8c <__aeabi_fsub+0x168>
    3974:	1e51      	subs	r1, r2, #1
    3976:	2900      	cmp	r1, #0
    3978:	d000      	beq.n	397c <__aeabi_fsub+0x58>
    397a:	e0b5      	b.n	3ae8 <__aeabi_fsub+0x1c4>
    397c:	2401      	movs	r4, #1
    397e:	1b9b      	subs	r3, r3, r6
    3980:	015a      	lsls	r2, r3, #5
    3982:	d544      	bpl.n	3a0e <__aeabi_fsub+0xea>
    3984:	019b      	lsls	r3, r3, #6
    3986:	099f      	lsrs	r7, r3, #6
    3988:	0038      	movs	r0, r7
    398a:	f001 ff1f 	bl	57cc <__clzsi2>
    398e:	3805      	subs	r0, #5
    3990:	4087      	lsls	r7, r0
    3992:	4284      	cmp	r4, r0
    3994:	dd00      	ble.n	3998 <__aeabi_fsub+0x74>
    3996:	e096      	b.n	3ac6 <__aeabi_fsub+0x1a2>
    3998:	1b04      	subs	r4, r0, r4
    399a:	003a      	movs	r2, r7
    399c:	2020      	movs	r0, #32
    399e:	3401      	adds	r4, #1
    39a0:	40e2      	lsrs	r2, r4
    39a2:	1b04      	subs	r4, r0, r4
    39a4:	40a7      	lsls	r7, r4
    39a6:	003b      	movs	r3, r7
    39a8:	1e5f      	subs	r7, r3, #1
    39aa:	41bb      	sbcs	r3, r7
    39ac:	2400      	movs	r4, #0
    39ae:	4313      	orrs	r3, r2
    39b0:	075a      	lsls	r2, r3, #29
    39b2:	d004      	beq.n	39be <__aeabi_fsub+0x9a>
    39b4:	220f      	movs	r2, #15
    39b6:	401a      	ands	r2, r3
    39b8:	2a04      	cmp	r2, #4
    39ba:	d000      	beq.n	39be <__aeabi_fsub+0x9a>
    39bc:	3304      	adds	r3, #4
    39be:	015a      	lsls	r2, r3, #5
    39c0:	d527      	bpl.n	3a12 <__aeabi_fsub+0xee>
    39c2:	3401      	adds	r4, #1
    39c4:	2cff      	cmp	r4, #255	; 0xff
    39c6:	d100      	bne.n	39ca <__aeabi_fsub+0xa6>
    39c8:	e079      	b.n	3abe <__aeabi_fsub+0x19a>
    39ca:	2201      	movs	r2, #1
    39cc:	019b      	lsls	r3, r3, #6
    39ce:	0a5b      	lsrs	r3, r3, #9
    39d0:	b2e4      	uxtb	r4, r4
    39d2:	402a      	ands	r2, r5
    39d4:	025b      	lsls	r3, r3, #9
    39d6:	05e4      	lsls	r4, r4, #23
    39d8:	0a58      	lsrs	r0, r3, #9
    39da:	07d2      	lsls	r2, r2, #31
    39dc:	4320      	orrs	r0, r4
    39de:	4310      	orrs	r0, r2
    39e0:	bc1c      	pop	{r2, r3, r4}
    39e2:	4690      	mov	r8, r2
    39e4:	4699      	mov	r9, r3
    39e6:	46a2      	mov	sl, r4
    39e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ea:	2cff      	cmp	r4, #255	; 0xff
    39ec:	d0e0      	beq.n	39b0 <__aeabi_fsub+0x8c>
    39ee:	2180      	movs	r1, #128	; 0x80
    39f0:	04c9      	lsls	r1, r1, #19
    39f2:	430e      	orrs	r6, r1
    39f4:	2a1b      	cmp	r2, #27
    39f6:	dc7b      	bgt.n	3af0 <__aeabi_fsub+0x1cc>
    39f8:	0031      	movs	r1, r6
    39fa:	2020      	movs	r0, #32
    39fc:	40d1      	lsrs	r1, r2
    39fe:	1a82      	subs	r2, r0, r2
    3a00:	4096      	lsls	r6, r2
    3a02:	1e72      	subs	r2, r6, #1
    3a04:	4196      	sbcs	r6, r2
    3a06:	430e      	orrs	r6, r1
    3a08:	1b9b      	subs	r3, r3, r6
    3a0a:	015a      	lsls	r2, r3, #5
    3a0c:	d4ba      	bmi.n	3984 <__aeabi_fsub+0x60>
    3a0e:	075a      	lsls	r2, r3, #29
    3a10:	d1d0      	bne.n	39b4 <__aeabi_fsub+0x90>
    3a12:	2201      	movs	r2, #1
    3a14:	08df      	lsrs	r7, r3, #3
    3a16:	402a      	ands	r2, r5
    3a18:	2cff      	cmp	r4, #255	; 0xff
    3a1a:	d133      	bne.n	3a84 <__aeabi_fsub+0x160>
    3a1c:	2f00      	cmp	r7, #0
    3a1e:	d100      	bne.n	3a22 <__aeabi_fsub+0xfe>
    3a20:	e0a8      	b.n	3b74 <__aeabi_fsub+0x250>
    3a22:	2380      	movs	r3, #128	; 0x80
    3a24:	03db      	lsls	r3, r3, #15
    3a26:	433b      	orrs	r3, r7
    3a28:	025b      	lsls	r3, r3, #9
    3a2a:	0a5b      	lsrs	r3, r3, #9
    3a2c:	24ff      	movs	r4, #255	; 0xff
    3a2e:	e7d1      	b.n	39d4 <__aeabi_fsub+0xb0>
    3a30:	1a21      	subs	r1, r4, r0
    3a32:	2900      	cmp	r1, #0
    3a34:	dd4c      	ble.n	3ad0 <__aeabi_fsub+0x1ac>
    3a36:	2800      	cmp	r0, #0
    3a38:	d02a      	beq.n	3a90 <__aeabi_fsub+0x16c>
    3a3a:	2cff      	cmp	r4, #255	; 0xff
    3a3c:	d0b8      	beq.n	39b0 <__aeabi_fsub+0x8c>
    3a3e:	2080      	movs	r0, #128	; 0x80
    3a40:	04c0      	lsls	r0, r0, #19
    3a42:	4306      	orrs	r6, r0
    3a44:	291b      	cmp	r1, #27
    3a46:	dd00      	ble.n	3a4a <__aeabi_fsub+0x126>
    3a48:	e0af      	b.n	3baa <__aeabi_fsub+0x286>
    3a4a:	0030      	movs	r0, r6
    3a4c:	2720      	movs	r7, #32
    3a4e:	40c8      	lsrs	r0, r1
    3a50:	1a79      	subs	r1, r7, r1
    3a52:	408e      	lsls	r6, r1
    3a54:	1e71      	subs	r1, r6, #1
    3a56:	418e      	sbcs	r6, r1
    3a58:	4306      	orrs	r6, r0
    3a5a:	199b      	adds	r3, r3, r6
    3a5c:	0159      	lsls	r1, r3, #5
    3a5e:	d5d6      	bpl.n	3a0e <__aeabi_fsub+0xea>
    3a60:	3401      	adds	r4, #1
    3a62:	2cff      	cmp	r4, #255	; 0xff
    3a64:	d100      	bne.n	3a68 <__aeabi_fsub+0x144>
    3a66:	e085      	b.n	3b74 <__aeabi_fsub+0x250>
    3a68:	2201      	movs	r2, #1
    3a6a:	497a      	ldr	r1, [pc, #488]	; (3c54 <__aeabi_fsub+0x330>)
    3a6c:	401a      	ands	r2, r3
    3a6e:	085b      	lsrs	r3, r3, #1
    3a70:	400b      	ands	r3, r1
    3a72:	4313      	orrs	r3, r2
    3a74:	e79c      	b.n	39b0 <__aeabi_fsub+0x8c>
    3a76:	2e00      	cmp	r6, #0
    3a78:	d000      	beq.n	3a7c <__aeabi_fsub+0x158>
    3a7a:	e770      	b.n	395e <__aeabi_fsub+0x3a>
    3a7c:	e76b      	b.n	3956 <__aeabi_fsub+0x32>
    3a7e:	1e3b      	subs	r3, r7, #0
    3a80:	d1c5      	bne.n	3a0e <__aeabi_fsub+0xea>
    3a82:	2200      	movs	r2, #0
    3a84:	027b      	lsls	r3, r7, #9
    3a86:	0a5b      	lsrs	r3, r3, #9
    3a88:	b2e4      	uxtb	r4, r4
    3a8a:	e7a3      	b.n	39d4 <__aeabi_fsub+0xb0>
    3a8c:	0014      	movs	r4, r2
    3a8e:	e78f      	b.n	39b0 <__aeabi_fsub+0x8c>
    3a90:	2e00      	cmp	r6, #0
    3a92:	d04d      	beq.n	3b30 <__aeabi_fsub+0x20c>
    3a94:	1e48      	subs	r0, r1, #1
    3a96:	2800      	cmp	r0, #0
    3a98:	d157      	bne.n	3b4a <__aeabi_fsub+0x226>
    3a9a:	199b      	adds	r3, r3, r6
    3a9c:	2401      	movs	r4, #1
    3a9e:	015a      	lsls	r2, r3, #5
    3aa0:	d5b5      	bpl.n	3a0e <__aeabi_fsub+0xea>
    3aa2:	2402      	movs	r4, #2
    3aa4:	e7e0      	b.n	3a68 <__aeabi_fsub+0x144>
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	d125      	bne.n	3af6 <__aeabi_fsub+0x1d2>
    3aaa:	1c62      	adds	r2, r4, #1
    3aac:	b2d2      	uxtb	r2, r2
    3aae:	2a01      	cmp	r2, #1
    3ab0:	dd72      	ble.n	3b98 <__aeabi_fsub+0x274>
    3ab2:	1b9f      	subs	r7, r3, r6
    3ab4:	017a      	lsls	r2, r7, #5
    3ab6:	d535      	bpl.n	3b24 <__aeabi_fsub+0x200>
    3ab8:	1af7      	subs	r7, r6, r3
    3aba:	000d      	movs	r5, r1
    3abc:	e764      	b.n	3988 <__aeabi_fsub+0x64>
    3abe:	2201      	movs	r2, #1
    3ac0:	2300      	movs	r3, #0
    3ac2:	402a      	ands	r2, r5
    3ac4:	e786      	b.n	39d4 <__aeabi_fsub+0xb0>
    3ac6:	003b      	movs	r3, r7
    3ac8:	4a63      	ldr	r2, [pc, #396]	; (3c58 <__aeabi_fsub+0x334>)
    3aca:	1a24      	subs	r4, r4, r0
    3acc:	4013      	ands	r3, r2
    3ace:	e76f      	b.n	39b0 <__aeabi_fsub+0x8c>
    3ad0:	2900      	cmp	r1, #0
    3ad2:	d16c      	bne.n	3bae <__aeabi_fsub+0x28a>
    3ad4:	1c61      	adds	r1, r4, #1
    3ad6:	b2c8      	uxtb	r0, r1
    3ad8:	2801      	cmp	r0, #1
    3ada:	dd4e      	ble.n	3b7a <__aeabi_fsub+0x256>
    3adc:	29ff      	cmp	r1, #255	; 0xff
    3ade:	d049      	beq.n	3b74 <__aeabi_fsub+0x250>
    3ae0:	199b      	adds	r3, r3, r6
    3ae2:	085b      	lsrs	r3, r3, #1
    3ae4:	000c      	movs	r4, r1
    3ae6:	e763      	b.n	39b0 <__aeabi_fsub+0x8c>
    3ae8:	2aff      	cmp	r2, #255	; 0xff
    3aea:	d041      	beq.n	3b70 <__aeabi_fsub+0x24c>
    3aec:	000a      	movs	r2, r1
    3aee:	e781      	b.n	39f4 <__aeabi_fsub+0xd0>
    3af0:	2601      	movs	r6, #1
    3af2:	1b9b      	subs	r3, r3, r6
    3af4:	e789      	b.n	3a0a <__aeabi_fsub+0xe6>
    3af6:	2c00      	cmp	r4, #0
    3af8:	d01c      	beq.n	3b34 <__aeabi_fsub+0x210>
    3afa:	28ff      	cmp	r0, #255	; 0xff
    3afc:	d021      	beq.n	3b42 <__aeabi_fsub+0x21e>
    3afe:	2480      	movs	r4, #128	; 0x80
    3b00:	04e4      	lsls	r4, r4, #19
    3b02:	4252      	negs	r2, r2
    3b04:	4323      	orrs	r3, r4
    3b06:	2a1b      	cmp	r2, #27
    3b08:	dd00      	ble.n	3b0c <__aeabi_fsub+0x1e8>
    3b0a:	e096      	b.n	3c3a <__aeabi_fsub+0x316>
    3b0c:	001c      	movs	r4, r3
    3b0e:	2520      	movs	r5, #32
    3b10:	40d4      	lsrs	r4, r2
    3b12:	1aaa      	subs	r2, r5, r2
    3b14:	4093      	lsls	r3, r2
    3b16:	1e5a      	subs	r2, r3, #1
    3b18:	4193      	sbcs	r3, r2
    3b1a:	4323      	orrs	r3, r4
    3b1c:	1af3      	subs	r3, r6, r3
    3b1e:	0004      	movs	r4, r0
    3b20:	000d      	movs	r5, r1
    3b22:	e72d      	b.n	3980 <__aeabi_fsub+0x5c>
    3b24:	2f00      	cmp	r7, #0
    3b26:	d000      	beq.n	3b2a <__aeabi_fsub+0x206>
    3b28:	e72e      	b.n	3988 <__aeabi_fsub+0x64>
    3b2a:	2200      	movs	r2, #0
    3b2c:	2400      	movs	r4, #0
    3b2e:	e7a9      	b.n	3a84 <__aeabi_fsub+0x160>
    3b30:	000c      	movs	r4, r1
    3b32:	e73d      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b34:	2b00      	cmp	r3, #0
    3b36:	d058      	beq.n	3bea <__aeabi_fsub+0x2c6>
    3b38:	43d2      	mvns	r2, r2
    3b3a:	2a00      	cmp	r2, #0
    3b3c:	d0ee      	beq.n	3b1c <__aeabi_fsub+0x1f8>
    3b3e:	28ff      	cmp	r0, #255	; 0xff
    3b40:	d1e1      	bne.n	3b06 <__aeabi_fsub+0x1e2>
    3b42:	0033      	movs	r3, r6
    3b44:	24ff      	movs	r4, #255	; 0xff
    3b46:	000d      	movs	r5, r1
    3b48:	e732      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b4a:	29ff      	cmp	r1, #255	; 0xff
    3b4c:	d010      	beq.n	3b70 <__aeabi_fsub+0x24c>
    3b4e:	0001      	movs	r1, r0
    3b50:	e778      	b.n	3a44 <__aeabi_fsub+0x120>
    3b52:	2b00      	cmp	r3, #0
    3b54:	d06e      	beq.n	3c34 <__aeabi_fsub+0x310>
    3b56:	24ff      	movs	r4, #255	; 0xff
    3b58:	2e00      	cmp	r6, #0
    3b5a:	d100      	bne.n	3b5e <__aeabi_fsub+0x23a>
    3b5c:	e728      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b5e:	2280      	movs	r2, #128	; 0x80
    3b60:	4651      	mov	r1, sl
    3b62:	03d2      	lsls	r2, r2, #15
    3b64:	4211      	tst	r1, r2
    3b66:	d003      	beq.n	3b70 <__aeabi_fsub+0x24c>
    3b68:	4661      	mov	r1, ip
    3b6a:	4211      	tst	r1, r2
    3b6c:	d100      	bne.n	3b70 <__aeabi_fsub+0x24c>
    3b6e:	0033      	movs	r3, r6
    3b70:	24ff      	movs	r4, #255	; 0xff
    3b72:	e71d      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b74:	24ff      	movs	r4, #255	; 0xff
    3b76:	2300      	movs	r3, #0
    3b78:	e72c      	b.n	39d4 <__aeabi_fsub+0xb0>
    3b7a:	2c00      	cmp	r4, #0
    3b7c:	d1e9      	bne.n	3b52 <__aeabi_fsub+0x22e>
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d063      	beq.n	3c4a <__aeabi_fsub+0x326>
    3b82:	2e00      	cmp	r6, #0
    3b84:	d100      	bne.n	3b88 <__aeabi_fsub+0x264>
    3b86:	e713      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b88:	199b      	adds	r3, r3, r6
    3b8a:	015a      	lsls	r2, r3, #5
    3b8c:	d400      	bmi.n	3b90 <__aeabi_fsub+0x26c>
    3b8e:	e73e      	b.n	3a0e <__aeabi_fsub+0xea>
    3b90:	4a31      	ldr	r2, [pc, #196]	; (3c58 <__aeabi_fsub+0x334>)
    3b92:	000c      	movs	r4, r1
    3b94:	4013      	ands	r3, r2
    3b96:	e70b      	b.n	39b0 <__aeabi_fsub+0x8c>
    3b98:	2c00      	cmp	r4, #0
    3b9a:	d11e      	bne.n	3bda <__aeabi_fsub+0x2b6>
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d12f      	bne.n	3c00 <__aeabi_fsub+0x2dc>
    3ba0:	2e00      	cmp	r6, #0
    3ba2:	d04f      	beq.n	3c44 <__aeabi_fsub+0x320>
    3ba4:	0033      	movs	r3, r6
    3ba6:	000d      	movs	r5, r1
    3ba8:	e702      	b.n	39b0 <__aeabi_fsub+0x8c>
    3baa:	2601      	movs	r6, #1
    3bac:	e755      	b.n	3a5a <__aeabi_fsub+0x136>
    3bae:	2c00      	cmp	r4, #0
    3bb0:	d11f      	bne.n	3bf2 <__aeabi_fsub+0x2ce>
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d043      	beq.n	3c3e <__aeabi_fsub+0x31a>
    3bb6:	43c9      	mvns	r1, r1
    3bb8:	2900      	cmp	r1, #0
    3bba:	d00b      	beq.n	3bd4 <__aeabi_fsub+0x2b0>
    3bbc:	28ff      	cmp	r0, #255	; 0xff
    3bbe:	d039      	beq.n	3c34 <__aeabi_fsub+0x310>
    3bc0:	291b      	cmp	r1, #27
    3bc2:	dc44      	bgt.n	3c4e <__aeabi_fsub+0x32a>
    3bc4:	001c      	movs	r4, r3
    3bc6:	2720      	movs	r7, #32
    3bc8:	40cc      	lsrs	r4, r1
    3bca:	1a79      	subs	r1, r7, r1
    3bcc:	408b      	lsls	r3, r1
    3bce:	1e59      	subs	r1, r3, #1
    3bd0:	418b      	sbcs	r3, r1
    3bd2:	4323      	orrs	r3, r4
    3bd4:	199b      	adds	r3, r3, r6
    3bd6:	0004      	movs	r4, r0
    3bd8:	e740      	b.n	3a5c <__aeabi_fsub+0x138>
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d11a      	bne.n	3c14 <__aeabi_fsub+0x2f0>
    3bde:	2e00      	cmp	r6, #0
    3be0:	d124      	bne.n	3c2c <__aeabi_fsub+0x308>
    3be2:	2780      	movs	r7, #128	; 0x80
    3be4:	2200      	movs	r2, #0
    3be6:	03ff      	lsls	r7, r7, #15
    3be8:	e71b      	b.n	3a22 <__aeabi_fsub+0xfe>
    3bea:	0033      	movs	r3, r6
    3bec:	0004      	movs	r4, r0
    3bee:	000d      	movs	r5, r1
    3bf0:	e6de      	b.n	39b0 <__aeabi_fsub+0x8c>
    3bf2:	28ff      	cmp	r0, #255	; 0xff
    3bf4:	d01e      	beq.n	3c34 <__aeabi_fsub+0x310>
    3bf6:	2480      	movs	r4, #128	; 0x80
    3bf8:	04e4      	lsls	r4, r4, #19
    3bfa:	4249      	negs	r1, r1
    3bfc:	4323      	orrs	r3, r4
    3bfe:	e7df      	b.n	3bc0 <__aeabi_fsub+0x29c>
    3c00:	2e00      	cmp	r6, #0
    3c02:	d100      	bne.n	3c06 <__aeabi_fsub+0x2e2>
    3c04:	e6d4      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c06:	1b9f      	subs	r7, r3, r6
    3c08:	017a      	lsls	r2, r7, #5
    3c0a:	d400      	bmi.n	3c0e <__aeabi_fsub+0x2ea>
    3c0c:	e737      	b.n	3a7e <__aeabi_fsub+0x15a>
    3c0e:	1af3      	subs	r3, r6, r3
    3c10:	000d      	movs	r5, r1
    3c12:	e6cd      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c14:	24ff      	movs	r4, #255	; 0xff
    3c16:	2e00      	cmp	r6, #0
    3c18:	d100      	bne.n	3c1c <__aeabi_fsub+0x2f8>
    3c1a:	e6c9      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c1c:	2280      	movs	r2, #128	; 0x80
    3c1e:	4650      	mov	r0, sl
    3c20:	03d2      	lsls	r2, r2, #15
    3c22:	4210      	tst	r0, r2
    3c24:	d0a4      	beq.n	3b70 <__aeabi_fsub+0x24c>
    3c26:	4660      	mov	r0, ip
    3c28:	4210      	tst	r0, r2
    3c2a:	d1a1      	bne.n	3b70 <__aeabi_fsub+0x24c>
    3c2c:	0033      	movs	r3, r6
    3c2e:	000d      	movs	r5, r1
    3c30:	24ff      	movs	r4, #255	; 0xff
    3c32:	e6bd      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c34:	0033      	movs	r3, r6
    3c36:	24ff      	movs	r4, #255	; 0xff
    3c38:	e6ba      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c3a:	2301      	movs	r3, #1
    3c3c:	e76e      	b.n	3b1c <__aeabi_fsub+0x1f8>
    3c3e:	0033      	movs	r3, r6
    3c40:	0004      	movs	r4, r0
    3c42:	e6b5      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c44:	2700      	movs	r7, #0
    3c46:	2200      	movs	r2, #0
    3c48:	e71c      	b.n	3a84 <__aeabi_fsub+0x160>
    3c4a:	0033      	movs	r3, r6
    3c4c:	e6b0      	b.n	39b0 <__aeabi_fsub+0x8c>
    3c4e:	2301      	movs	r3, #1
    3c50:	e7c0      	b.n	3bd4 <__aeabi_fsub+0x2b0>
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	7dffffff 	.word	0x7dffffff
    3c58:	fbffffff 	.word	0xfbffffff

00003c5c <__aeabi_i2f>:
    3c5c:	b570      	push	{r4, r5, r6, lr}
    3c5e:	2800      	cmp	r0, #0
    3c60:	d030      	beq.n	3cc4 <__aeabi_i2f+0x68>
    3c62:	17c3      	asrs	r3, r0, #31
    3c64:	18c4      	adds	r4, r0, r3
    3c66:	405c      	eors	r4, r3
    3c68:	0fc5      	lsrs	r5, r0, #31
    3c6a:	0020      	movs	r0, r4
    3c6c:	f001 fdae 	bl	57cc <__clzsi2>
    3c70:	239e      	movs	r3, #158	; 0x9e
    3c72:	1a1b      	subs	r3, r3, r0
    3c74:	2b96      	cmp	r3, #150	; 0x96
    3c76:	dc0d      	bgt.n	3c94 <__aeabi_i2f+0x38>
    3c78:	2296      	movs	r2, #150	; 0x96
    3c7a:	1ad2      	subs	r2, r2, r3
    3c7c:	4094      	lsls	r4, r2
    3c7e:	002a      	movs	r2, r5
    3c80:	0264      	lsls	r4, r4, #9
    3c82:	0a64      	lsrs	r4, r4, #9
    3c84:	b2db      	uxtb	r3, r3
    3c86:	0264      	lsls	r4, r4, #9
    3c88:	05db      	lsls	r3, r3, #23
    3c8a:	0a60      	lsrs	r0, r4, #9
    3c8c:	07d2      	lsls	r2, r2, #31
    3c8e:	4318      	orrs	r0, r3
    3c90:	4310      	orrs	r0, r2
    3c92:	bd70      	pop	{r4, r5, r6, pc}
    3c94:	2b99      	cmp	r3, #153	; 0x99
    3c96:	dc19      	bgt.n	3ccc <__aeabi_i2f+0x70>
    3c98:	2299      	movs	r2, #153	; 0x99
    3c9a:	1ad2      	subs	r2, r2, r3
    3c9c:	2a00      	cmp	r2, #0
    3c9e:	dd29      	ble.n	3cf4 <__aeabi_i2f+0x98>
    3ca0:	4094      	lsls	r4, r2
    3ca2:	0022      	movs	r2, r4
    3ca4:	4c14      	ldr	r4, [pc, #80]	; (3cf8 <__aeabi_i2f+0x9c>)
    3ca6:	4014      	ands	r4, r2
    3ca8:	0751      	lsls	r1, r2, #29
    3caa:	d004      	beq.n	3cb6 <__aeabi_i2f+0x5a>
    3cac:	210f      	movs	r1, #15
    3cae:	400a      	ands	r2, r1
    3cb0:	2a04      	cmp	r2, #4
    3cb2:	d000      	beq.n	3cb6 <__aeabi_i2f+0x5a>
    3cb4:	3404      	adds	r4, #4
    3cb6:	0162      	lsls	r2, r4, #5
    3cb8:	d413      	bmi.n	3ce2 <__aeabi_i2f+0x86>
    3cba:	01a4      	lsls	r4, r4, #6
    3cbc:	0a64      	lsrs	r4, r4, #9
    3cbe:	b2db      	uxtb	r3, r3
    3cc0:	002a      	movs	r2, r5
    3cc2:	e7e0      	b.n	3c86 <__aeabi_i2f+0x2a>
    3cc4:	2200      	movs	r2, #0
    3cc6:	2300      	movs	r3, #0
    3cc8:	2400      	movs	r4, #0
    3cca:	e7dc      	b.n	3c86 <__aeabi_i2f+0x2a>
    3ccc:	2205      	movs	r2, #5
    3cce:	0021      	movs	r1, r4
    3cd0:	1a12      	subs	r2, r2, r0
    3cd2:	40d1      	lsrs	r1, r2
    3cd4:	22b9      	movs	r2, #185	; 0xb9
    3cd6:	1ad2      	subs	r2, r2, r3
    3cd8:	4094      	lsls	r4, r2
    3cda:	1e62      	subs	r2, r4, #1
    3cdc:	4194      	sbcs	r4, r2
    3cde:	430c      	orrs	r4, r1
    3ce0:	e7da      	b.n	3c98 <__aeabi_i2f+0x3c>
    3ce2:	4b05      	ldr	r3, [pc, #20]	; (3cf8 <__aeabi_i2f+0x9c>)
    3ce4:	002a      	movs	r2, r5
    3ce6:	401c      	ands	r4, r3
    3ce8:	239f      	movs	r3, #159	; 0x9f
    3cea:	01a4      	lsls	r4, r4, #6
    3cec:	1a1b      	subs	r3, r3, r0
    3cee:	0a64      	lsrs	r4, r4, #9
    3cf0:	b2db      	uxtb	r3, r3
    3cf2:	e7c8      	b.n	3c86 <__aeabi_i2f+0x2a>
    3cf4:	0022      	movs	r2, r4
    3cf6:	e7d5      	b.n	3ca4 <__aeabi_i2f+0x48>
    3cf8:	fbffffff 	.word	0xfbffffff

00003cfc <__aeabi_ui2f>:
    3cfc:	b510      	push	{r4, lr}
    3cfe:	1e04      	subs	r4, r0, #0
    3d00:	d027      	beq.n	3d52 <__aeabi_ui2f+0x56>
    3d02:	f001 fd63 	bl	57cc <__clzsi2>
    3d06:	239e      	movs	r3, #158	; 0x9e
    3d08:	1a1b      	subs	r3, r3, r0
    3d0a:	2b96      	cmp	r3, #150	; 0x96
    3d0c:	dc0a      	bgt.n	3d24 <__aeabi_ui2f+0x28>
    3d0e:	2296      	movs	r2, #150	; 0x96
    3d10:	1ad2      	subs	r2, r2, r3
    3d12:	4094      	lsls	r4, r2
    3d14:	0264      	lsls	r4, r4, #9
    3d16:	0a64      	lsrs	r4, r4, #9
    3d18:	b2db      	uxtb	r3, r3
    3d1a:	0264      	lsls	r4, r4, #9
    3d1c:	05db      	lsls	r3, r3, #23
    3d1e:	0a60      	lsrs	r0, r4, #9
    3d20:	4318      	orrs	r0, r3
    3d22:	bd10      	pop	{r4, pc}
    3d24:	2b99      	cmp	r3, #153	; 0x99
    3d26:	dc17      	bgt.n	3d58 <__aeabi_ui2f+0x5c>
    3d28:	2299      	movs	r2, #153	; 0x99
    3d2a:	1ad2      	subs	r2, r2, r3
    3d2c:	2a00      	cmp	r2, #0
    3d2e:	dd27      	ble.n	3d80 <__aeabi_ui2f+0x84>
    3d30:	4094      	lsls	r4, r2
    3d32:	0022      	movs	r2, r4
    3d34:	4c13      	ldr	r4, [pc, #76]	; (3d84 <__aeabi_ui2f+0x88>)
    3d36:	4014      	ands	r4, r2
    3d38:	0751      	lsls	r1, r2, #29
    3d3a:	d004      	beq.n	3d46 <__aeabi_ui2f+0x4a>
    3d3c:	210f      	movs	r1, #15
    3d3e:	400a      	ands	r2, r1
    3d40:	2a04      	cmp	r2, #4
    3d42:	d000      	beq.n	3d46 <__aeabi_ui2f+0x4a>
    3d44:	3404      	adds	r4, #4
    3d46:	0162      	lsls	r2, r4, #5
    3d48:	d412      	bmi.n	3d70 <__aeabi_ui2f+0x74>
    3d4a:	01a4      	lsls	r4, r4, #6
    3d4c:	0a64      	lsrs	r4, r4, #9
    3d4e:	b2db      	uxtb	r3, r3
    3d50:	e7e3      	b.n	3d1a <__aeabi_ui2f+0x1e>
    3d52:	2300      	movs	r3, #0
    3d54:	2400      	movs	r4, #0
    3d56:	e7e0      	b.n	3d1a <__aeabi_ui2f+0x1e>
    3d58:	22b9      	movs	r2, #185	; 0xb9
    3d5a:	0021      	movs	r1, r4
    3d5c:	1ad2      	subs	r2, r2, r3
    3d5e:	4091      	lsls	r1, r2
    3d60:	000a      	movs	r2, r1
    3d62:	1e51      	subs	r1, r2, #1
    3d64:	418a      	sbcs	r2, r1
    3d66:	2105      	movs	r1, #5
    3d68:	1a09      	subs	r1, r1, r0
    3d6a:	40cc      	lsrs	r4, r1
    3d6c:	4314      	orrs	r4, r2
    3d6e:	e7db      	b.n	3d28 <__aeabi_ui2f+0x2c>
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <__aeabi_ui2f+0x88>)
    3d72:	401c      	ands	r4, r3
    3d74:	239f      	movs	r3, #159	; 0x9f
    3d76:	01a4      	lsls	r4, r4, #6
    3d78:	1a1b      	subs	r3, r3, r0
    3d7a:	0a64      	lsrs	r4, r4, #9
    3d7c:	b2db      	uxtb	r3, r3
    3d7e:	e7cc      	b.n	3d1a <__aeabi_ui2f+0x1e>
    3d80:	0022      	movs	r2, r4
    3d82:	e7d7      	b.n	3d34 <__aeabi_ui2f+0x38>
    3d84:	fbffffff 	.word	0xfbffffff

00003d88 <__aeabi_dadd>:
    3d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d8a:	4645      	mov	r5, r8
    3d8c:	46de      	mov	lr, fp
    3d8e:	4657      	mov	r7, sl
    3d90:	464e      	mov	r6, r9
    3d92:	030c      	lsls	r4, r1, #12
    3d94:	b5e0      	push	{r5, r6, r7, lr}
    3d96:	004e      	lsls	r6, r1, #1
    3d98:	0fc9      	lsrs	r1, r1, #31
    3d9a:	4688      	mov	r8, r1
    3d9c:	000d      	movs	r5, r1
    3d9e:	0a61      	lsrs	r1, r4, #9
    3da0:	0f44      	lsrs	r4, r0, #29
    3da2:	430c      	orrs	r4, r1
    3da4:	00c7      	lsls	r7, r0, #3
    3da6:	0319      	lsls	r1, r3, #12
    3da8:	0058      	lsls	r0, r3, #1
    3daa:	0fdb      	lsrs	r3, r3, #31
    3dac:	469b      	mov	fp, r3
    3dae:	0a4b      	lsrs	r3, r1, #9
    3db0:	0f51      	lsrs	r1, r2, #29
    3db2:	430b      	orrs	r3, r1
    3db4:	0d76      	lsrs	r6, r6, #21
    3db6:	0d40      	lsrs	r0, r0, #21
    3db8:	0019      	movs	r1, r3
    3dba:	00d2      	lsls	r2, r2, #3
    3dbc:	45d8      	cmp	r8, fp
    3dbe:	d100      	bne.n	3dc2 <__aeabi_dadd+0x3a>
    3dc0:	e0ae      	b.n	3f20 <__aeabi_dadd+0x198>
    3dc2:	1a35      	subs	r5, r6, r0
    3dc4:	2d00      	cmp	r5, #0
    3dc6:	dc00      	bgt.n	3dca <__aeabi_dadd+0x42>
    3dc8:	e0f6      	b.n	3fb8 <__aeabi_dadd+0x230>
    3dca:	2800      	cmp	r0, #0
    3dcc:	d10f      	bne.n	3dee <__aeabi_dadd+0x66>
    3dce:	4313      	orrs	r3, r2
    3dd0:	d100      	bne.n	3dd4 <__aeabi_dadd+0x4c>
    3dd2:	e0db      	b.n	3f8c <__aeabi_dadd+0x204>
    3dd4:	1e6b      	subs	r3, r5, #1
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d000      	beq.n	3ddc <__aeabi_dadd+0x54>
    3dda:	e137      	b.n	404c <__aeabi_dadd+0x2c4>
    3ddc:	1aba      	subs	r2, r7, r2
    3dde:	4297      	cmp	r7, r2
    3de0:	41bf      	sbcs	r7, r7
    3de2:	1a64      	subs	r4, r4, r1
    3de4:	427f      	negs	r7, r7
    3de6:	1be4      	subs	r4, r4, r7
    3de8:	2601      	movs	r6, #1
    3dea:	0017      	movs	r7, r2
    3dec:	e024      	b.n	3e38 <__aeabi_dadd+0xb0>
    3dee:	4bc6      	ldr	r3, [pc, #792]	; (4108 <__aeabi_dadd+0x380>)
    3df0:	429e      	cmp	r6, r3
    3df2:	d04d      	beq.n	3e90 <__aeabi_dadd+0x108>
    3df4:	2380      	movs	r3, #128	; 0x80
    3df6:	041b      	lsls	r3, r3, #16
    3df8:	4319      	orrs	r1, r3
    3dfa:	2d38      	cmp	r5, #56	; 0x38
    3dfc:	dd00      	ble.n	3e00 <__aeabi_dadd+0x78>
    3dfe:	e107      	b.n	4010 <__aeabi_dadd+0x288>
    3e00:	2d1f      	cmp	r5, #31
    3e02:	dd00      	ble.n	3e06 <__aeabi_dadd+0x7e>
    3e04:	e138      	b.n	4078 <__aeabi_dadd+0x2f0>
    3e06:	2020      	movs	r0, #32
    3e08:	1b43      	subs	r3, r0, r5
    3e0a:	469a      	mov	sl, r3
    3e0c:	000b      	movs	r3, r1
    3e0e:	4650      	mov	r0, sl
    3e10:	4083      	lsls	r3, r0
    3e12:	4699      	mov	r9, r3
    3e14:	0013      	movs	r3, r2
    3e16:	4648      	mov	r0, r9
    3e18:	40eb      	lsrs	r3, r5
    3e1a:	4318      	orrs	r0, r3
    3e1c:	0003      	movs	r3, r0
    3e1e:	4650      	mov	r0, sl
    3e20:	4082      	lsls	r2, r0
    3e22:	1e50      	subs	r0, r2, #1
    3e24:	4182      	sbcs	r2, r0
    3e26:	40e9      	lsrs	r1, r5
    3e28:	431a      	orrs	r2, r3
    3e2a:	1aba      	subs	r2, r7, r2
    3e2c:	1a61      	subs	r1, r4, r1
    3e2e:	4297      	cmp	r7, r2
    3e30:	41a4      	sbcs	r4, r4
    3e32:	0017      	movs	r7, r2
    3e34:	4264      	negs	r4, r4
    3e36:	1b0c      	subs	r4, r1, r4
    3e38:	0223      	lsls	r3, r4, #8
    3e3a:	d562      	bpl.n	3f02 <__aeabi_dadd+0x17a>
    3e3c:	0264      	lsls	r4, r4, #9
    3e3e:	0a65      	lsrs	r5, r4, #9
    3e40:	2d00      	cmp	r5, #0
    3e42:	d100      	bne.n	3e46 <__aeabi_dadd+0xbe>
    3e44:	e0df      	b.n	4006 <__aeabi_dadd+0x27e>
    3e46:	0028      	movs	r0, r5
    3e48:	f001 fcc0 	bl	57cc <__clzsi2>
    3e4c:	0003      	movs	r3, r0
    3e4e:	3b08      	subs	r3, #8
    3e50:	2b1f      	cmp	r3, #31
    3e52:	dd00      	ble.n	3e56 <__aeabi_dadd+0xce>
    3e54:	e0d2      	b.n	3ffc <__aeabi_dadd+0x274>
    3e56:	2220      	movs	r2, #32
    3e58:	003c      	movs	r4, r7
    3e5a:	1ad2      	subs	r2, r2, r3
    3e5c:	409d      	lsls	r5, r3
    3e5e:	40d4      	lsrs	r4, r2
    3e60:	409f      	lsls	r7, r3
    3e62:	4325      	orrs	r5, r4
    3e64:	429e      	cmp	r6, r3
    3e66:	dd00      	ble.n	3e6a <__aeabi_dadd+0xe2>
    3e68:	e0c4      	b.n	3ff4 <__aeabi_dadd+0x26c>
    3e6a:	1b9e      	subs	r6, r3, r6
    3e6c:	1c73      	adds	r3, r6, #1
    3e6e:	2b1f      	cmp	r3, #31
    3e70:	dd00      	ble.n	3e74 <__aeabi_dadd+0xec>
    3e72:	e0f1      	b.n	4058 <__aeabi_dadd+0x2d0>
    3e74:	2220      	movs	r2, #32
    3e76:	0038      	movs	r0, r7
    3e78:	0029      	movs	r1, r5
    3e7a:	1ad2      	subs	r2, r2, r3
    3e7c:	40d8      	lsrs	r0, r3
    3e7e:	4091      	lsls	r1, r2
    3e80:	4097      	lsls	r7, r2
    3e82:	002c      	movs	r4, r5
    3e84:	4301      	orrs	r1, r0
    3e86:	1e78      	subs	r0, r7, #1
    3e88:	4187      	sbcs	r7, r0
    3e8a:	40dc      	lsrs	r4, r3
    3e8c:	2600      	movs	r6, #0
    3e8e:	430f      	orrs	r7, r1
    3e90:	077b      	lsls	r3, r7, #29
    3e92:	d009      	beq.n	3ea8 <__aeabi_dadd+0x120>
    3e94:	230f      	movs	r3, #15
    3e96:	403b      	ands	r3, r7
    3e98:	2b04      	cmp	r3, #4
    3e9a:	d005      	beq.n	3ea8 <__aeabi_dadd+0x120>
    3e9c:	1d3b      	adds	r3, r7, #4
    3e9e:	42bb      	cmp	r3, r7
    3ea0:	41bf      	sbcs	r7, r7
    3ea2:	427f      	negs	r7, r7
    3ea4:	19e4      	adds	r4, r4, r7
    3ea6:	001f      	movs	r7, r3
    3ea8:	0223      	lsls	r3, r4, #8
    3eaa:	d52c      	bpl.n	3f06 <__aeabi_dadd+0x17e>
    3eac:	4b96      	ldr	r3, [pc, #600]	; (4108 <__aeabi_dadd+0x380>)
    3eae:	3601      	adds	r6, #1
    3eb0:	429e      	cmp	r6, r3
    3eb2:	d100      	bne.n	3eb6 <__aeabi_dadd+0x12e>
    3eb4:	e09a      	b.n	3fec <__aeabi_dadd+0x264>
    3eb6:	4645      	mov	r5, r8
    3eb8:	4b94      	ldr	r3, [pc, #592]	; (410c <__aeabi_dadd+0x384>)
    3eba:	08ff      	lsrs	r7, r7, #3
    3ebc:	401c      	ands	r4, r3
    3ebe:	0760      	lsls	r0, r4, #29
    3ec0:	0576      	lsls	r6, r6, #21
    3ec2:	0264      	lsls	r4, r4, #9
    3ec4:	4307      	orrs	r7, r0
    3ec6:	0b24      	lsrs	r4, r4, #12
    3ec8:	0d76      	lsrs	r6, r6, #21
    3eca:	2100      	movs	r1, #0
    3ecc:	0324      	lsls	r4, r4, #12
    3ece:	0b23      	lsrs	r3, r4, #12
    3ed0:	0d0c      	lsrs	r4, r1, #20
    3ed2:	4a8f      	ldr	r2, [pc, #572]	; (4110 <__aeabi_dadd+0x388>)
    3ed4:	0524      	lsls	r4, r4, #20
    3ed6:	431c      	orrs	r4, r3
    3ed8:	4014      	ands	r4, r2
    3eda:	0533      	lsls	r3, r6, #20
    3edc:	4323      	orrs	r3, r4
    3ede:	005b      	lsls	r3, r3, #1
    3ee0:	07ed      	lsls	r5, r5, #31
    3ee2:	085b      	lsrs	r3, r3, #1
    3ee4:	432b      	orrs	r3, r5
    3ee6:	0038      	movs	r0, r7
    3ee8:	0019      	movs	r1, r3
    3eea:	bc3c      	pop	{r2, r3, r4, r5}
    3eec:	4690      	mov	r8, r2
    3eee:	4699      	mov	r9, r3
    3ef0:	46a2      	mov	sl, r4
    3ef2:	46ab      	mov	fp, r5
    3ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ef6:	4664      	mov	r4, ip
    3ef8:	4304      	orrs	r4, r0
    3efa:	d100      	bne.n	3efe <__aeabi_dadd+0x176>
    3efc:	e211      	b.n	4322 <__aeabi_dadd+0x59a>
    3efe:	0004      	movs	r4, r0
    3f00:	4667      	mov	r7, ip
    3f02:	077b      	lsls	r3, r7, #29
    3f04:	d1c6      	bne.n	3e94 <__aeabi_dadd+0x10c>
    3f06:	4645      	mov	r5, r8
    3f08:	0760      	lsls	r0, r4, #29
    3f0a:	08ff      	lsrs	r7, r7, #3
    3f0c:	4307      	orrs	r7, r0
    3f0e:	08e4      	lsrs	r4, r4, #3
    3f10:	4b7d      	ldr	r3, [pc, #500]	; (4108 <__aeabi_dadd+0x380>)
    3f12:	429e      	cmp	r6, r3
    3f14:	d030      	beq.n	3f78 <__aeabi_dadd+0x1f0>
    3f16:	0324      	lsls	r4, r4, #12
    3f18:	0576      	lsls	r6, r6, #21
    3f1a:	0b24      	lsrs	r4, r4, #12
    3f1c:	0d76      	lsrs	r6, r6, #21
    3f1e:	e7d4      	b.n	3eca <__aeabi_dadd+0x142>
    3f20:	1a33      	subs	r3, r6, r0
    3f22:	469a      	mov	sl, r3
    3f24:	2b00      	cmp	r3, #0
    3f26:	dd78      	ble.n	401a <__aeabi_dadd+0x292>
    3f28:	2800      	cmp	r0, #0
    3f2a:	d031      	beq.n	3f90 <__aeabi_dadd+0x208>
    3f2c:	4876      	ldr	r0, [pc, #472]	; (4108 <__aeabi_dadd+0x380>)
    3f2e:	4286      	cmp	r6, r0
    3f30:	d0ae      	beq.n	3e90 <__aeabi_dadd+0x108>
    3f32:	2080      	movs	r0, #128	; 0x80
    3f34:	0400      	lsls	r0, r0, #16
    3f36:	4301      	orrs	r1, r0
    3f38:	4653      	mov	r3, sl
    3f3a:	2b38      	cmp	r3, #56	; 0x38
    3f3c:	dc00      	bgt.n	3f40 <__aeabi_dadd+0x1b8>
    3f3e:	e0e9      	b.n	4114 <__aeabi_dadd+0x38c>
    3f40:	430a      	orrs	r2, r1
    3f42:	1e51      	subs	r1, r2, #1
    3f44:	418a      	sbcs	r2, r1
    3f46:	2100      	movs	r1, #0
    3f48:	19d2      	adds	r2, r2, r7
    3f4a:	42ba      	cmp	r2, r7
    3f4c:	41bf      	sbcs	r7, r7
    3f4e:	1909      	adds	r1, r1, r4
    3f50:	427c      	negs	r4, r7
    3f52:	0017      	movs	r7, r2
    3f54:	190c      	adds	r4, r1, r4
    3f56:	0223      	lsls	r3, r4, #8
    3f58:	d5d3      	bpl.n	3f02 <__aeabi_dadd+0x17a>
    3f5a:	4b6b      	ldr	r3, [pc, #428]	; (4108 <__aeabi_dadd+0x380>)
    3f5c:	3601      	adds	r6, #1
    3f5e:	429e      	cmp	r6, r3
    3f60:	d100      	bne.n	3f64 <__aeabi_dadd+0x1dc>
    3f62:	e13a      	b.n	41da <__aeabi_dadd+0x452>
    3f64:	2001      	movs	r0, #1
    3f66:	4b69      	ldr	r3, [pc, #420]	; (410c <__aeabi_dadd+0x384>)
    3f68:	401c      	ands	r4, r3
    3f6a:	087b      	lsrs	r3, r7, #1
    3f6c:	4007      	ands	r7, r0
    3f6e:	431f      	orrs	r7, r3
    3f70:	07e0      	lsls	r0, r4, #31
    3f72:	4307      	orrs	r7, r0
    3f74:	0864      	lsrs	r4, r4, #1
    3f76:	e78b      	b.n	3e90 <__aeabi_dadd+0x108>
    3f78:	0023      	movs	r3, r4
    3f7a:	433b      	orrs	r3, r7
    3f7c:	d100      	bne.n	3f80 <__aeabi_dadd+0x1f8>
    3f7e:	e1cb      	b.n	4318 <__aeabi_dadd+0x590>
    3f80:	2280      	movs	r2, #128	; 0x80
    3f82:	0312      	lsls	r2, r2, #12
    3f84:	4314      	orrs	r4, r2
    3f86:	0324      	lsls	r4, r4, #12
    3f88:	0b24      	lsrs	r4, r4, #12
    3f8a:	e79e      	b.n	3eca <__aeabi_dadd+0x142>
    3f8c:	002e      	movs	r6, r5
    3f8e:	e77f      	b.n	3e90 <__aeabi_dadd+0x108>
    3f90:	0008      	movs	r0, r1
    3f92:	4310      	orrs	r0, r2
    3f94:	d100      	bne.n	3f98 <__aeabi_dadd+0x210>
    3f96:	e0b4      	b.n	4102 <__aeabi_dadd+0x37a>
    3f98:	1e58      	subs	r0, r3, #1
    3f9a:	2800      	cmp	r0, #0
    3f9c:	d000      	beq.n	3fa0 <__aeabi_dadd+0x218>
    3f9e:	e0de      	b.n	415e <__aeabi_dadd+0x3d6>
    3fa0:	18ba      	adds	r2, r7, r2
    3fa2:	42ba      	cmp	r2, r7
    3fa4:	419b      	sbcs	r3, r3
    3fa6:	1864      	adds	r4, r4, r1
    3fa8:	425b      	negs	r3, r3
    3faa:	18e4      	adds	r4, r4, r3
    3fac:	0017      	movs	r7, r2
    3fae:	2601      	movs	r6, #1
    3fb0:	0223      	lsls	r3, r4, #8
    3fb2:	d5a6      	bpl.n	3f02 <__aeabi_dadd+0x17a>
    3fb4:	2602      	movs	r6, #2
    3fb6:	e7d5      	b.n	3f64 <__aeabi_dadd+0x1dc>
    3fb8:	2d00      	cmp	r5, #0
    3fba:	d16e      	bne.n	409a <__aeabi_dadd+0x312>
    3fbc:	1c70      	adds	r0, r6, #1
    3fbe:	0540      	lsls	r0, r0, #21
    3fc0:	0d40      	lsrs	r0, r0, #21
    3fc2:	2801      	cmp	r0, #1
    3fc4:	dc00      	bgt.n	3fc8 <__aeabi_dadd+0x240>
    3fc6:	e0f9      	b.n	41bc <__aeabi_dadd+0x434>
    3fc8:	1ab8      	subs	r0, r7, r2
    3fca:	4684      	mov	ip, r0
    3fcc:	4287      	cmp	r7, r0
    3fce:	4180      	sbcs	r0, r0
    3fd0:	1ae5      	subs	r5, r4, r3
    3fd2:	4240      	negs	r0, r0
    3fd4:	1a2d      	subs	r5, r5, r0
    3fd6:	0228      	lsls	r0, r5, #8
    3fd8:	d400      	bmi.n	3fdc <__aeabi_dadd+0x254>
    3fda:	e089      	b.n	40f0 <__aeabi_dadd+0x368>
    3fdc:	1bd7      	subs	r7, r2, r7
    3fde:	42ba      	cmp	r2, r7
    3fe0:	4192      	sbcs	r2, r2
    3fe2:	1b1c      	subs	r4, r3, r4
    3fe4:	4252      	negs	r2, r2
    3fe6:	1aa5      	subs	r5, r4, r2
    3fe8:	46d8      	mov	r8, fp
    3fea:	e729      	b.n	3e40 <__aeabi_dadd+0xb8>
    3fec:	4645      	mov	r5, r8
    3fee:	2400      	movs	r4, #0
    3ff0:	2700      	movs	r7, #0
    3ff2:	e76a      	b.n	3eca <__aeabi_dadd+0x142>
    3ff4:	4c45      	ldr	r4, [pc, #276]	; (410c <__aeabi_dadd+0x384>)
    3ff6:	1af6      	subs	r6, r6, r3
    3ff8:	402c      	ands	r4, r5
    3ffa:	e749      	b.n	3e90 <__aeabi_dadd+0x108>
    3ffc:	003d      	movs	r5, r7
    3ffe:	3828      	subs	r0, #40	; 0x28
    4000:	4085      	lsls	r5, r0
    4002:	2700      	movs	r7, #0
    4004:	e72e      	b.n	3e64 <__aeabi_dadd+0xdc>
    4006:	0038      	movs	r0, r7
    4008:	f001 fbe0 	bl	57cc <__clzsi2>
    400c:	3020      	adds	r0, #32
    400e:	e71d      	b.n	3e4c <__aeabi_dadd+0xc4>
    4010:	430a      	orrs	r2, r1
    4012:	1e51      	subs	r1, r2, #1
    4014:	418a      	sbcs	r2, r1
    4016:	2100      	movs	r1, #0
    4018:	e707      	b.n	3e2a <__aeabi_dadd+0xa2>
    401a:	2b00      	cmp	r3, #0
    401c:	d000      	beq.n	4020 <__aeabi_dadd+0x298>
    401e:	e0f3      	b.n	4208 <__aeabi_dadd+0x480>
    4020:	1c70      	adds	r0, r6, #1
    4022:	0543      	lsls	r3, r0, #21
    4024:	0d5b      	lsrs	r3, r3, #21
    4026:	2b01      	cmp	r3, #1
    4028:	dc00      	bgt.n	402c <__aeabi_dadd+0x2a4>
    402a:	e0ad      	b.n	4188 <__aeabi_dadd+0x400>
    402c:	4b36      	ldr	r3, [pc, #216]	; (4108 <__aeabi_dadd+0x380>)
    402e:	4298      	cmp	r0, r3
    4030:	d100      	bne.n	4034 <__aeabi_dadd+0x2ac>
    4032:	e0d1      	b.n	41d8 <__aeabi_dadd+0x450>
    4034:	18ba      	adds	r2, r7, r2
    4036:	42ba      	cmp	r2, r7
    4038:	41bf      	sbcs	r7, r7
    403a:	1864      	adds	r4, r4, r1
    403c:	427f      	negs	r7, r7
    403e:	19e4      	adds	r4, r4, r7
    4040:	07e7      	lsls	r7, r4, #31
    4042:	0852      	lsrs	r2, r2, #1
    4044:	4317      	orrs	r7, r2
    4046:	0864      	lsrs	r4, r4, #1
    4048:	0006      	movs	r6, r0
    404a:	e721      	b.n	3e90 <__aeabi_dadd+0x108>
    404c:	482e      	ldr	r0, [pc, #184]	; (4108 <__aeabi_dadd+0x380>)
    404e:	4285      	cmp	r5, r0
    4050:	d100      	bne.n	4054 <__aeabi_dadd+0x2cc>
    4052:	e093      	b.n	417c <__aeabi_dadd+0x3f4>
    4054:	001d      	movs	r5, r3
    4056:	e6d0      	b.n	3dfa <__aeabi_dadd+0x72>
    4058:	0029      	movs	r1, r5
    405a:	3e1f      	subs	r6, #31
    405c:	40f1      	lsrs	r1, r6
    405e:	2b20      	cmp	r3, #32
    4060:	d100      	bne.n	4064 <__aeabi_dadd+0x2dc>
    4062:	e08d      	b.n	4180 <__aeabi_dadd+0x3f8>
    4064:	2240      	movs	r2, #64	; 0x40
    4066:	1ad3      	subs	r3, r2, r3
    4068:	409d      	lsls	r5, r3
    406a:	432f      	orrs	r7, r5
    406c:	1e7d      	subs	r5, r7, #1
    406e:	41af      	sbcs	r7, r5
    4070:	2400      	movs	r4, #0
    4072:	430f      	orrs	r7, r1
    4074:	2600      	movs	r6, #0
    4076:	e744      	b.n	3f02 <__aeabi_dadd+0x17a>
    4078:	002b      	movs	r3, r5
    407a:	0008      	movs	r0, r1
    407c:	3b20      	subs	r3, #32
    407e:	40d8      	lsrs	r0, r3
    4080:	0003      	movs	r3, r0
    4082:	2d20      	cmp	r5, #32
    4084:	d100      	bne.n	4088 <__aeabi_dadd+0x300>
    4086:	e07d      	b.n	4184 <__aeabi_dadd+0x3fc>
    4088:	2040      	movs	r0, #64	; 0x40
    408a:	1b45      	subs	r5, r0, r5
    408c:	40a9      	lsls	r1, r5
    408e:	430a      	orrs	r2, r1
    4090:	1e51      	subs	r1, r2, #1
    4092:	418a      	sbcs	r2, r1
    4094:	2100      	movs	r1, #0
    4096:	431a      	orrs	r2, r3
    4098:	e6c7      	b.n	3e2a <__aeabi_dadd+0xa2>
    409a:	2e00      	cmp	r6, #0
    409c:	d050      	beq.n	4140 <__aeabi_dadd+0x3b8>
    409e:	4e1a      	ldr	r6, [pc, #104]	; (4108 <__aeabi_dadd+0x380>)
    40a0:	42b0      	cmp	r0, r6
    40a2:	d057      	beq.n	4154 <__aeabi_dadd+0x3cc>
    40a4:	2680      	movs	r6, #128	; 0x80
    40a6:	426b      	negs	r3, r5
    40a8:	4699      	mov	r9, r3
    40aa:	0436      	lsls	r6, r6, #16
    40ac:	4334      	orrs	r4, r6
    40ae:	464b      	mov	r3, r9
    40b0:	2b38      	cmp	r3, #56	; 0x38
    40b2:	dd00      	ble.n	40b6 <__aeabi_dadd+0x32e>
    40b4:	e0d6      	b.n	4264 <__aeabi_dadd+0x4dc>
    40b6:	2b1f      	cmp	r3, #31
    40b8:	dd00      	ble.n	40bc <__aeabi_dadd+0x334>
    40ba:	e135      	b.n	4328 <__aeabi_dadd+0x5a0>
    40bc:	2620      	movs	r6, #32
    40be:	1af5      	subs	r5, r6, r3
    40c0:	0026      	movs	r6, r4
    40c2:	40ae      	lsls	r6, r5
    40c4:	46b2      	mov	sl, r6
    40c6:	003e      	movs	r6, r7
    40c8:	40de      	lsrs	r6, r3
    40ca:	46ac      	mov	ip, r5
    40cc:	0035      	movs	r5, r6
    40ce:	4656      	mov	r6, sl
    40d0:	432e      	orrs	r6, r5
    40d2:	4665      	mov	r5, ip
    40d4:	40af      	lsls	r7, r5
    40d6:	1e7d      	subs	r5, r7, #1
    40d8:	41af      	sbcs	r7, r5
    40da:	40dc      	lsrs	r4, r3
    40dc:	4337      	orrs	r7, r6
    40de:	1bd7      	subs	r7, r2, r7
    40e0:	42ba      	cmp	r2, r7
    40e2:	4192      	sbcs	r2, r2
    40e4:	1b0c      	subs	r4, r1, r4
    40e6:	4252      	negs	r2, r2
    40e8:	1aa4      	subs	r4, r4, r2
    40ea:	0006      	movs	r6, r0
    40ec:	46d8      	mov	r8, fp
    40ee:	e6a3      	b.n	3e38 <__aeabi_dadd+0xb0>
    40f0:	4664      	mov	r4, ip
    40f2:	4667      	mov	r7, ip
    40f4:	432c      	orrs	r4, r5
    40f6:	d000      	beq.n	40fa <__aeabi_dadd+0x372>
    40f8:	e6a2      	b.n	3e40 <__aeabi_dadd+0xb8>
    40fa:	2500      	movs	r5, #0
    40fc:	2600      	movs	r6, #0
    40fe:	2700      	movs	r7, #0
    4100:	e706      	b.n	3f10 <__aeabi_dadd+0x188>
    4102:	001e      	movs	r6, r3
    4104:	e6c4      	b.n	3e90 <__aeabi_dadd+0x108>
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	000007ff 	.word	0x000007ff
    410c:	ff7fffff 	.word	0xff7fffff
    4110:	800fffff 	.word	0x800fffff
    4114:	2b1f      	cmp	r3, #31
    4116:	dc63      	bgt.n	41e0 <__aeabi_dadd+0x458>
    4118:	2020      	movs	r0, #32
    411a:	1ac3      	subs	r3, r0, r3
    411c:	0008      	movs	r0, r1
    411e:	4098      	lsls	r0, r3
    4120:	469c      	mov	ip, r3
    4122:	4683      	mov	fp, r0
    4124:	4653      	mov	r3, sl
    4126:	0010      	movs	r0, r2
    4128:	40d8      	lsrs	r0, r3
    412a:	0003      	movs	r3, r0
    412c:	4658      	mov	r0, fp
    412e:	4318      	orrs	r0, r3
    4130:	4663      	mov	r3, ip
    4132:	409a      	lsls	r2, r3
    4134:	1e53      	subs	r3, r2, #1
    4136:	419a      	sbcs	r2, r3
    4138:	4653      	mov	r3, sl
    413a:	4302      	orrs	r2, r0
    413c:	40d9      	lsrs	r1, r3
    413e:	e703      	b.n	3f48 <__aeabi_dadd+0x1c0>
    4140:	0026      	movs	r6, r4
    4142:	433e      	orrs	r6, r7
    4144:	d006      	beq.n	4154 <__aeabi_dadd+0x3cc>
    4146:	43eb      	mvns	r3, r5
    4148:	4699      	mov	r9, r3
    414a:	2b00      	cmp	r3, #0
    414c:	d0c7      	beq.n	40de <__aeabi_dadd+0x356>
    414e:	4e94      	ldr	r6, [pc, #592]	; (43a0 <__aeabi_dadd+0x618>)
    4150:	42b0      	cmp	r0, r6
    4152:	d1ac      	bne.n	40ae <__aeabi_dadd+0x326>
    4154:	000c      	movs	r4, r1
    4156:	0017      	movs	r7, r2
    4158:	0006      	movs	r6, r0
    415a:	46d8      	mov	r8, fp
    415c:	e698      	b.n	3e90 <__aeabi_dadd+0x108>
    415e:	4b90      	ldr	r3, [pc, #576]	; (43a0 <__aeabi_dadd+0x618>)
    4160:	459a      	cmp	sl, r3
    4162:	d00b      	beq.n	417c <__aeabi_dadd+0x3f4>
    4164:	4682      	mov	sl, r0
    4166:	e6e7      	b.n	3f38 <__aeabi_dadd+0x1b0>
    4168:	2800      	cmp	r0, #0
    416a:	d000      	beq.n	416e <__aeabi_dadd+0x3e6>
    416c:	e09e      	b.n	42ac <__aeabi_dadd+0x524>
    416e:	0018      	movs	r0, r3
    4170:	4310      	orrs	r0, r2
    4172:	d100      	bne.n	4176 <__aeabi_dadd+0x3ee>
    4174:	e0e9      	b.n	434a <__aeabi_dadd+0x5c2>
    4176:	001c      	movs	r4, r3
    4178:	0017      	movs	r7, r2
    417a:	46d8      	mov	r8, fp
    417c:	4e88      	ldr	r6, [pc, #544]	; (43a0 <__aeabi_dadd+0x618>)
    417e:	e687      	b.n	3e90 <__aeabi_dadd+0x108>
    4180:	2500      	movs	r5, #0
    4182:	e772      	b.n	406a <__aeabi_dadd+0x2e2>
    4184:	2100      	movs	r1, #0
    4186:	e782      	b.n	408e <__aeabi_dadd+0x306>
    4188:	0023      	movs	r3, r4
    418a:	433b      	orrs	r3, r7
    418c:	2e00      	cmp	r6, #0
    418e:	d000      	beq.n	4192 <__aeabi_dadd+0x40a>
    4190:	e0ab      	b.n	42ea <__aeabi_dadd+0x562>
    4192:	2b00      	cmp	r3, #0
    4194:	d100      	bne.n	4198 <__aeabi_dadd+0x410>
    4196:	e0e7      	b.n	4368 <__aeabi_dadd+0x5e0>
    4198:	000b      	movs	r3, r1
    419a:	4313      	orrs	r3, r2
    419c:	d100      	bne.n	41a0 <__aeabi_dadd+0x418>
    419e:	e677      	b.n	3e90 <__aeabi_dadd+0x108>
    41a0:	18ba      	adds	r2, r7, r2
    41a2:	42ba      	cmp	r2, r7
    41a4:	41bf      	sbcs	r7, r7
    41a6:	1864      	adds	r4, r4, r1
    41a8:	427f      	negs	r7, r7
    41aa:	19e4      	adds	r4, r4, r7
    41ac:	0223      	lsls	r3, r4, #8
    41ae:	d400      	bmi.n	41b2 <__aeabi_dadd+0x42a>
    41b0:	e0f2      	b.n	4398 <__aeabi_dadd+0x610>
    41b2:	4b7c      	ldr	r3, [pc, #496]	; (43a4 <__aeabi_dadd+0x61c>)
    41b4:	0017      	movs	r7, r2
    41b6:	401c      	ands	r4, r3
    41b8:	0006      	movs	r6, r0
    41ba:	e669      	b.n	3e90 <__aeabi_dadd+0x108>
    41bc:	0020      	movs	r0, r4
    41be:	4338      	orrs	r0, r7
    41c0:	2e00      	cmp	r6, #0
    41c2:	d1d1      	bne.n	4168 <__aeabi_dadd+0x3e0>
    41c4:	2800      	cmp	r0, #0
    41c6:	d15b      	bne.n	4280 <__aeabi_dadd+0x4f8>
    41c8:	001c      	movs	r4, r3
    41ca:	4314      	orrs	r4, r2
    41cc:	d100      	bne.n	41d0 <__aeabi_dadd+0x448>
    41ce:	e0a8      	b.n	4322 <__aeabi_dadd+0x59a>
    41d0:	001c      	movs	r4, r3
    41d2:	0017      	movs	r7, r2
    41d4:	46d8      	mov	r8, fp
    41d6:	e65b      	b.n	3e90 <__aeabi_dadd+0x108>
    41d8:	0006      	movs	r6, r0
    41da:	2400      	movs	r4, #0
    41dc:	2700      	movs	r7, #0
    41de:	e697      	b.n	3f10 <__aeabi_dadd+0x188>
    41e0:	4650      	mov	r0, sl
    41e2:	000b      	movs	r3, r1
    41e4:	3820      	subs	r0, #32
    41e6:	40c3      	lsrs	r3, r0
    41e8:	4699      	mov	r9, r3
    41ea:	4653      	mov	r3, sl
    41ec:	2b20      	cmp	r3, #32
    41ee:	d100      	bne.n	41f2 <__aeabi_dadd+0x46a>
    41f0:	e095      	b.n	431e <__aeabi_dadd+0x596>
    41f2:	2340      	movs	r3, #64	; 0x40
    41f4:	4650      	mov	r0, sl
    41f6:	1a1b      	subs	r3, r3, r0
    41f8:	4099      	lsls	r1, r3
    41fa:	430a      	orrs	r2, r1
    41fc:	1e51      	subs	r1, r2, #1
    41fe:	418a      	sbcs	r2, r1
    4200:	464b      	mov	r3, r9
    4202:	2100      	movs	r1, #0
    4204:	431a      	orrs	r2, r3
    4206:	e69f      	b.n	3f48 <__aeabi_dadd+0x1c0>
    4208:	2e00      	cmp	r6, #0
    420a:	d130      	bne.n	426e <__aeabi_dadd+0x4e6>
    420c:	0026      	movs	r6, r4
    420e:	433e      	orrs	r6, r7
    4210:	d067      	beq.n	42e2 <__aeabi_dadd+0x55a>
    4212:	43db      	mvns	r3, r3
    4214:	469a      	mov	sl, r3
    4216:	2b00      	cmp	r3, #0
    4218:	d01c      	beq.n	4254 <__aeabi_dadd+0x4cc>
    421a:	4e61      	ldr	r6, [pc, #388]	; (43a0 <__aeabi_dadd+0x618>)
    421c:	42b0      	cmp	r0, r6
    421e:	d060      	beq.n	42e2 <__aeabi_dadd+0x55a>
    4220:	4653      	mov	r3, sl
    4222:	2b38      	cmp	r3, #56	; 0x38
    4224:	dd00      	ble.n	4228 <__aeabi_dadd+0x4a0>
    4226:	e096      	b.n	4356 <__aeabi_dadd+0x5ce>
    4228:	2b1f      	cmp	r3, #31
    422a:	dd00      	ble.n	422e <__aeabi_dadd+0x4a6>
    422c:	e09f      	b.n	436e <__aeabi_dadd+0x5e6>
    422e:	2620      	movs	r6, #32
    4230:	1af3      	subs	r3, r6, r3
    4232:	0026      	movs	r6, r4
    4234:	409e      	lsls	r6, r3
    4236:	469c      	mov	ip, r3
    4238:	46b3      	mov	fp, r6
    423a:	4653      	mov	r3, sl
    423c:	003e      	movs	r6, r7
    423e:	40de      	lsrs	r6, r3
    4240:	0033      	movs	r3, r6
    4242:	465e      	mov	r6, fp
    4244:	431e      	orrs	r6, r3
    4246:	4663      	mov	r3, ip
    4248:	409f      	lsls	r7, r3
    424a:	1e7b      	subs	r3, r7, #1
    424c:	419f      	sbcs	r7, r3
    424e:	4653      	mov	r3, sl
    4250:	40dc      	lsrs	r4, r3
    4252:	4337      	orrs	r7, r6
    4254:	18bf      	adds	r7, r7, r2
    4256:	4297      	cmp	r7, r2
    4258:	4192      	sbcs	r2, r2
    425a:	1864      	adds	r4, r4, r1
    425c:	4252      	negs	r2, r2
    425e:	18a4      	adds	r4, r4, r2
    4260:	0006      	movs	r6, r0
    4262:	e678      	b.n	3f56 <__aeabi_dadd+0x1ce>
    4264:	4327      	orrs	r7, r4
    4266:	1e7c      	subs	r4, r7, #1
    4268:	41a7      	sbcs	r7, r4
    426a:	2400      	movs	r4, #0
    426c:	e737      	b.n	40de <__aeabi_dadd+0x356>
    426e:	4e4c      	ldr	r6, [pc, #304]	; (43a0 <__aeabi_dadd+0x618>)
    4270:	42b0      	cmp	r0, r6
    4272:	d036      	beq.n	42e2 <__aeabi_dadd+0x55a>
    4274:	2680      	movs	r6, #128	; 0x80
    4276:	425b      	negs	r3, r3
    4278:	0436      	lsls	r6, r6, #16
    427a:	469a      	mov	sl, r3
    427c:	4334      	orrs	r4, r6
    427e:	e7cf      	b.n	4220 <__aeabi_dadd+0x498>
    4280:	0018      	movs	r0, r3
    4282:	4310      	orrs	r0, r2
    4284:	d100      	bne.n	4288 <__aeabi_dadd+0x500>
    4286:	e603      	b.n	3e90 <__aeabi_dadd+0x108>
    4288:	1ab8      	subs	r0, r7, r2
    428a:	4684      	mov	ip, r0
    428c:	4567      	cmp	r7, ip
    428e:	41ad      	sbcs	r5, r5
    4290:	1ae0      	subs	r0, r4, r3
    4292:	426d      	negs	r5, r5
    4294:	1b40      	subs	r0, r0, r5
    4296:	0205      	lsls	r5, r0, #8
    4298:	d400      	bmi.n	429c <__aeabi_dadd+0x514>
    429a:	e62c      	b.n	3ef6 <__aeabi_dadd+0x16e>
    429c:	1bd7      	subs	r7, r2, r7
    429e:	42ba      	cmp	r2, r7
    42a0:	4192      	sbcs	r2, r2
    42a2:	1b1c      	subs	r4, r3, r4
    42a4:	4252      	negs	r2, r2
    42a6:	1aa4      	subs	r4, r4, r2
    42a8:	46d8      	mov	r8, fp
    42aa:	e5f1      	b.n	3e90 <__aeabi_dadd+0x108>
    42ac:	0018      	movs	r0, r3
    42ae:	4310      	orrs	r0, r2
    42b0:	d100      	bne.n	42b4 <__aeabi_dadd+0x52c>
    42b2:	e763      	b.n	417c <__aeabi_dadd+0x3f4>
    42b4:	08f8      	lsrs	r0, r7, #3
    42b6:	0767      	lsls	r7, r4, #29
    42b8:	4307      	orrs	r7, r0
    42ba:	2080      	movs	r0, #128	; 0x80
    42bc:	08e4      	lsrs	r4, r4, #3
    42be:	0300      	lsls	r0, r0, #12
    42c0:	4204      	tst	r4, r0
    42c2:	d008      	beq.n	42d6 <__aeabi_dadd+0x54e>
    42c4:	08dd      	lsrs	r5, r3, #3
    42c6:	4205      	tst	r5, r0
    42c8:	d105      	bne.n	42d6 <__aeabi_dadd+0x54e>
    42ca:	08d2      	lsrs	r2, r2, #3
    42cc:	0759      	lsls	r1, r3, #29
    42ce:	4311      	orrs	r1, r2
    42d0:	000f      	movs	r7, r1
    42d2:	002c      	movs	r4, r5
    42d4:	46d8      	mov	r8, fp
    42d6:	0f7b      	lsrs	r3, r7, #29
    42d8:	00e4      	lsls	r4, r4, #3
    42da:	431c      	orrs	r4, r3
    42dc:	00ff      	lsls	r7, r7, #3
    42de:	4e30      	ldr	r6, [pc, #192]	; (43a0 <__aeabi_dadd+0x618>)
    42e0:	e5d6      	b.n	3e90 <__aeabi_dadd+0x108>
    42e2:	000c      	movs	r4, r1
    42e4:	0017      	movs	r7, r2
    42e6:	0006      	movs	r6, r0
    42e8:	e5d2      	b.n	3e90 <__aeabi_dadd+0x108>
    42ea:	2b00      	cmp	r3, #0
    42ec:	d038      	beq.n	4360 <__aeabi_dadd+0x5d8>
    42ee:	000b      	movs	r3, r1
    42f0:	4313      	orrs	r3, r2
    42f2:	d100      	bne.n	42f6 <__aeabi_dadd+0x56e>
    42f4:	e742      	b.n	417c <__aeabi_dadd+0x3f4>
    42f6:	08f8      	lsrs	r0, r7, #3
    42f8:	0767      	lsls	r7, r4, #29
    42fa:	4307      	orrs	r7, r0
    42fc:	2080      	movs	r0, #128	; 0x80
    42fe:	08e4      	lsrs	r4, r4, #3
    4300:	0300      	lsls	r0, r0, #12
    4302:	4204      	tst	r4, r0
    4304:	d0e7      	beq.n	42d6 <__aeabi_dadd+0x54e>
    4306:	08cb      	lsrs	r3, r1, #3
    4308:	4203      	tst	r3, r0
    430a:	d1e4      	bne.n	42d6 <__aeabi_dadd+0x54e>
    430c:	08d2      	lsrs	r2, r2, #3
    430e:	0749      	lsls	r1, r1, #29
    4310:	4311      	orrs	r1, r2
    4312:	000f      	movs	r7, r1
    4314:	001c      	movs	r4, r3
    4316:	e7de      	b.n	42d6 <__aeabi_dadd+0x54e>
    4318:	2700      	movs	r7, #0
    431a:	2400      	movs	r4, #0
    431c:	e5d5      	b.n	3eca <__aeabi_dadd+0x142>
    431e:	2100      	movs	r1, #0
    4320:	e76b      	b.n	41fa <__aeabi_dadd+0x472>
    4322:	2500      	movs	r5, #0
    4324:	2700      	movs	r7, #0
    4326:	e5f3      	b.n	3f10 <__aeabi_dadd+0x188>
    4328:	464e      	mov	r6, r9
    432a:	0025      	movs	r5, r4
    432c:	3e20      	subs	r6, #32
    432e:	40f5      	lsrs	r5, r6
    4330:	464b      	mov	r3, r9
    4332:	002e      	movs	r6, r5
    4334:	2b20      	cmp	r3, #32
    4336:	d02d      	beq.n	4394 <__aeabi_dadd+0x60c>
    4338:	2540      	movs	r5, #64	; 0x40
    433a:	1aed      	subs	r5, r5, r3
    433c:	40ac      	lsls	r4, r5
    433e:	4327      	orrs	r7, r4
    4340:	1e7c      	subs	r4, r7, #1
    4342:	41a7      	sbcs	r7, r4
    4344:	2400      	movs	r4, #0
    4346:	4337      	orrs	r7, r6
    4348:	e6c9      	b.n	40de <__aeabi_dadd+0x356>
    434a:	2480      	movs	r4, #128	; 0x80
    434c:	2500      	movs	r5, #0
    434e:	0324      	lsls	r4, r4, #12
    4350:	4e13      	ldr	r6, [pc, #76]	; (43a0 <__aeabi_dadd+0x618>)
    4352:	2700      	movs	r7, #0
    4354:	e5dc      	b.n	3f10 <__aeabi_dadd+0x188>
    4356:	4327      	orrs	r7, r4
    4358:	1e7c      	subs	r4, r7, #1
    435a:	41a7      	sbcs	r7, r4
    435c:	2400      	movs	r4, #0
    435e:	e779      	b.n	4254 <__aeabi_dadd+0x4cc>
    4360:	000c      	movs	r4, r1
    4362:	0017      	movs	r7, r2
    4364:	4e0e      	ldr	r6, [pc, #56]	; (43a0 <__aeabi_dadd+0x618>)
    4366:	e593      	b.n	3e90 <__aeabi_dadd+0x108>
    4368:	000c      	movs	r4, r1
    436a:	0017      	movs	r7, r2
    436c:	e590      	b.n	3e90 <__aeabi_dadd+0x108>
    436e:	4656      	mov	r6, sl
    4370:	0023      	movs	r3, r4
    4372:	3e20      	subs	r6, #32
    4374:	40f3      	lsrs	r3, r6
    4376:	4699      	mov	r9, r3
    4378:	4653      	mov	r3, sl
    437a:	2b20      	cmp	r3, #32
    437c:	d00e      	beq.n	439c <__aeabi_dadd+0x614>
    437e:	2340      	movs	r3, #64	; 0x40
    4380:	4656      	mov	r6, sl
    4382:	1b9b      	subs	r3, r3, r6
    4384:	409c      	lsls	r4, r3
    4386:	4327      	orrs	r7, r4
    4388:	1e7c      	subs	r4, r7, #1
    438a:	41a7      	sbcs	r7, r4
    438c:	464b      	mov	r3, r9
    438e:	2400      	movs	r4, #0
    4390:	431f      	orrs	r7, r3
    4392:	e75f      	b.n	4254 <__aeabi_dadd+0x4cc>
    4394:	2400      	movs	r4, #0
    4396:	e7d2      	b.n	433e <__aeabi_dadd+0x5b6>
    4398:	0017      	movs	r7, r2
    439a:	e5b2      	b.n	3f02 <__aeabi_dadd+0x17a>
    439c:	2400      	movs	r4, #0
    439e:	e7f2      	b.n	4386 <__aeabi_dadd+0x5fe>
    43a0:	000007ff 	.word	0x000007ff
    43a4:	ff7fffff 	.word	0xff7fffff

000043a8 <__aeabi_ddiv>:
    43a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43aa:	4657      	mov	r7, sl
    43ac:	4645      	mov	r5, r8
    43ae:	46de      	mov	lr, fp
    43b0:	464e      	mov	r6, r9
    43b2:	b5e0      	push	{r5, r6, r7, lr}
    43b4:	004c      	lsls	r4, r1, #1
    43b6:	030e      	lsls	r6, r1, #12
    43b8:	b087      	sub	sp, #28
    43ba:	4683      	mov	fp, r0
    43bc:	4692      	mov	sl, r2
    43be:	001d      	movs	r5, r3
    43c0:	4680      	mov	r8, r0
    43c2:	0b36      	lsrs	r6, r6, #12
    43c4:	0d64      	lsrs	r4, r4, #21
    43c6:	0fcf      	lsrs	r7, r1, #31
    43c8:	2c00      	cmp	r4, #0
    43ca:	d04f      	beq.n	446c <__aeabi_ddiv+0xc4>
    43cc:	4b6f      	ldr	r3, [pc, #444]	; (458c <__aeabi_ddiv+0x1e4>)
    43ce:	429c      	cmp	r4, r3
    43d0:	d035      	beq.n	443e <__aeabi_ddiv+0x96>
    43d2:	2380      	movs	r3, #128	; 0x80
    43d4:	0f42      	lsrs	r2, r0, #29
    43d6:	041b      	lsls	r3, r3, #16
    43d8:	00f6      	lsls	r6, r6, #3
    43da:	4313      	orrs	r3, r2
    43dc:	4333      	orrs	r3, r6
    43de:	4699      	mov	r9, r3
    43e0:	00c3      	lsls	r3, r0, #3
    43e2:	4698      	mov	r8, r3
    43e4:	4b6a      	ldr	r3, [pc, #424]	; (4590 <__aeabi_ddiv+0x1e8>)
    43e6:	2600      	movs	r6, #0
    43e8:	469c      	mov	ip, r3
    43ea:	2300      	movs	r3, #0
    43ec:	4464      	add	r4, ip
    43ee:	9303      	str	r3, [sp, #12]
    43f0:	032b      	lsls	r3, r5, #12
    43f2:	0b1b      	lsrs	r3, r3, #12
    43f4:	469b      	mov	fp, r3
    43f6:	006b      	lsls	r3, r5, #1
    43f8:	0fed      	lsrs	r5, r5, #31
    43fa:	4650      	mov	r0, sl
    43fc:	0d5b      	lsrs	r3, r3, #21
    43fe:	9501      	str	r5, [sp, #4]
    4400:	d05e      	beq.n	44c0 <__aeabi_ddiv+0x118>
    4402:	4a62      	ldr	r2, [pc, #392]	; (458c <__aeabi_ddiv+0x1e4>)
    4404:	4293      	cmp	r3, r2
    4406:	d053      	beq.n	44b0 <__aeabi_ddiv+0x108>
    4408:	465a      	mov	r2, fp
    440a:	00d1      	lsls	r1, r2, #3
    440c:	2280      	movs	r2, #128	; 0x80
    440e:	0f40      	lsrs	r0, r0, #29
    4410:	0412      	lsls	r2, r2, #16
    4412:	4302      	orrs	r2, r0
    4414:	430a      	orrs	r2, r1
    4416:	4693      	mov	fp, r2
    4418:	4652      	mov	r2, sl
    441a:	00d1      	lsls	r1, r2, #3
    441c:	4a5c      	ldr	r2, [pc, #368]	; (4590 <__aeabi_ddiv+0x1e8>)
    441e:	4694      	mov	ip, r2
    4420:	2200      	movs	r2, #0
    4422:	4463      	add	r3, ip
    4424:	0038      	movs	r0, r7
    4426:	4068      	eors	r0, r5
    4428:	4684      	mov	ip, r0
    442a:	9002      	str	r0, [sp, #8]
    442c:	1ae4      	subs	r4, r4, r3
    442e:	4316      	orrs	r6, r2
    4430:	2e0f      	cmp	r6, #15
    4432:	d900      	bls.n	4436 <__aeabi_ddiv+0x8e>
    4434:	e0b4      	b.n	45a0 <__aeabi_ddiv+0x1f8>
    4436:	4b57      	ldr	r3, [pc, #348]	; (4594 <__aeabi_ddiv+0x1ec>)
    4438:	00b6      	lsls	r6, r6, #2
    443a:	599b      	ldr	r3, [r3, r6]
    443c:	469f      	mov	pc, r3
    443e:	0003      	movs	r3, r0
    4440:	4333      	orrs	r3, r6
    4442:	4699      	mov	r9, r3
    4444:	d16c      	bne.n	4520 <__aeabi_ddiv+0x178>
    4446:	2300      	movs	r3, #0
    4448:	4698      	mov	r8, r3
    444a:	3302      	adds	r3, #2
    444c:	2608      	movs	r6, #8
    444e:	9303      	str	r3, [sp, #12]
    4450:	e7ce      	b.n	43f0 <__aeabi_ddiv+0x48>
    4452:	46cb      	mov	fp, r9
    4454:	4641      	mov	r1, r8
    4456:	9a03      	ldr	r2, [sp, #12]
    4458:	9701      	str	r7, [sp, #4]
    445a:	2a02      	cmp	r2, #2
    445c:	d165      	bne.n	452a <__aeabi_ddiv+0x182>
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	4c4a      	ldr	r4, [pc, #296]	; (458c <__aeabi_ddiv+0x1e4>)
    4462:	469c      	mov	ip, r3
    4464:	2300      	movs	r3, #0
    4466:	2200      	movs	r2, #0
    4468:	4698      	mov	r8, r3
    446a:	e06b      	b.n	4544 <__aeabi_ddiv+0x19c>
    446c:	0003      	movs	r3, r0
    446e:	4333      	orrs	r3, r6
    4470:	4699      	mov	r9, r3
    4472:	d04e      	beq.n	4512 <__aeabi_ddiv+0x16a>
    4474:	2e00      	cmp	r6, #0
    4476:	d100      	bne.n	447a <__aeabi_ddiv+0xd2>
    4478:	e1bc      	b.n	47f4 <__aeabi_ddiv+0x44c>
    447a:	0030      	movs	r0, r6
    447c:	f001 f9a6 	bl	57cc <__clzsi2>
    4480:	0003      	movs	r3, r0
    4482:	3b0b      	subs	r3, #11
    4484:	2b1c      	cmp	r3, #28
    4486:	dd00      	ble.n	448a <__aeabi_ddiv+0xe2>
    4488:	e1ac      	b.n	47e4 <__aeabi_ddiv+0x43c>
    448a:	221d      	movs	r2, #29
    448c:	1ad3      	subs	r3, r2, r3
    448e:	465a      	mov	r2, fp
    4490:	0001      	movs	r1, r0
    4492:	40da      	lsrs	r2, r3
    4494:	3908      	subs	r1, #8
    4496:	408e      	lsls	r6, r1
    4498:	0013      	movs	r3, r2
    449a:	4333      	orrs	r3, r6
    449c:	4699      	mov	r9, r3
    449e:	465b      	mov	r3, fp
    44a0:	408b      	lsls	r3, r1
    44a2:	4698      	mov	r8, r3
    44a4:	2300      	movs	r3, #0
    44a6:	4c3c      	ldr	r4, [pc, #240]	; (4598 <__aeabi_ddiv+0x1f0>)
    44a8:	2600      	movs	r6, #0
    44aa:	1a24      	subs	r4, r4, r0
    44ac:	9303      	str	r3, [sp, #12]
    44ae:	e79f      	b.n	43f0 <__aeabi_ddiv+0x48>
    44b0:	4651      	mov	r1, sl
    44b2:	465a      	mov	r2, fp
    44b4:	4311      	orrs	r1, r2
    44b6:	d129      	bne.n	450c <__aeabi_ddiv+0x164>
    44b8:	2200      	movs	r2, #0
    44ba:	4693      	mov	fp, r2
    44bc:	3202      	adds	r2, #2
    44be:	e7b1      	b.n	4424 <__aeabi_ddiv+0x7c>
    44c0:	4659      	mov	r1, fp
    44c2:	4301      	orrs	r1, r0
    44c4:	d01e      	beq.n	4504 <__aeabi_ddiv+0x15c>
    44c6:	465b      	mov	r3, fp
    44c8:	2b00      	cmp	r3, #0
    44ca:	d100      	bne.n	44ce <__aeabi_ddiv+0x126>
    44cc:	e19e      	b.n	480c <__aeabi_ddiv+0x464>
    44ce:	4658      	mov	r0, fp
    44d0:	f001 f97c 	bl	57cc <__clzsi2>
    44d4:	0003      	movs	r3, r0
    44d6:	3b0b      	subs	r3, #11
    44d8:	2b1c      	cmp	r3, #28
    44da:	dd00      	ble.n	44de <__aeabi_ddiv+0x136>
    44dc:	e18f      	b.n	47fe <__aeabi_ddiv+0x456>
    44de:	0002      	movs	r2, r0
    44e0:	4659      	mov	r1, fp
    44e2:	3a08      	subs	r2, #8
    44e4:	4091      	lsls	r1, r2
    44e6:	468b      	mov	fp, r1
    44e8:	211d      	movs	r1, #29
    44ea:	1acb      	subs	r3, r1, r3
    44ec:	4651      	mov	r1, sl
    44ee:	40d9      	lsrs	r1, r3
    44f0:	000b      	movs	r3, r1
    44f2:	4659      	mov	r1, fp
    44f4:	430b      	orrs	r3, r1
    44f6:	4651      	mov	r1, sl
    44f8:	469b      	mov	fp, r3
    44fa:	4091      	lsls	r1, r2
    44fc:	4b26      	ldr	r3, [pc, #152]	; (4598 <__aeabi_ddiv+0x1f0>)
    44fe:	2200      	movs	r2, #0
    4500:	1a1b      	subs	r3, r3, r0
    4502:	e78f      	b.n	4424 <__aeabi_ddiv+0x7c>
    4504:	2300      	movs	r3, #0
    4506:	2201      	movs	r2, #1
    4508:	469b      	mov	fp, r3
    450a:	e78b      	b.n	4424 <__aeabi_ddiv+0x7c>
    450c:	4651      	mov	r1, sl
    450e:	2203      	movs	r2, #3
    4510:	e788      	b.n	4424 <__aeabi_ddiv+0x7c>
    4512:	2300      	movs	r3, #0
    4514:	4698      	mov	r8, r3
    4516:	3301      	adds	r3, #1
    4518:	2604      	movs	r6, #4
    451a:	2400      	movs	r4, #0
    451c:	9303      	str	r3, [sp, #12]
    451e:	e767      	b.n	43f0 <__aeabi_ddiv+0x48>
    4520:	2303      	movs	r3, #3
    4522:	46b1      	mov	r9, r6
    4524:	9303      	str	r3, [sp, #12]
    4526:	260c      	movs	r6, #12
    4528:	e762      	b.n	43f0 <__aeabi_ddiv+0x48>
    452a:	2a03      	cmp	r2, #3
    452c:	d100      	bne.n	4530 <__aeabi_ddiv+0x188>
    452e:	e25c      	b.n	49ea <__aeabi_ddiv+0x642>
    4530:	9b01      	ldr	r3, [sp, #4]
    4532:	2a01      	cmp	r2, #1
    4534:	d000      	beq.n	4538 <__aeabi_ddiv+0x190>
    4536:	e1e4      	b.n	4902 <__aeabi_ddiv+0x55a>
    4538:	4013      	ands	r3, r2
    453a:	469c      	mov	ip, r3
    453c:	2300      	movs	r3, #0
    453e:	2400      	movs	r4, #0
    4540:	2200      	movs	r2, #0
    4542:	4698      	mov	r8, r3
    4544:	2100      	movs	r1, #0
    4546:	0312      	lsls	r2, r2, #12
    4548:	0b13      	lsrs	r3, r2, #12
    454a:	0d0a      	lsrs	r2, r1, #20
    454c:	0512      	lsls	r2, r2, #20
    454e:	431a      	orrs	r2, r3
    4550:	0523      	lsls	r3, r4, #20
    4552:	4c12      	ldr	r4, [pc, #72]	; (459c <__aeabi_ddiv+0x1f4>)
    4554:	4640      	mov	r0, r8
    4556:	4022      	ands	r2, r4
    4558:	4313      	orrs	r3, r2
    455a:	4662      	mov	r2, ip
    455c:	005b      	lsls	r3, r3, #1
    455e:	07d2      	lsls	r2, r2, #31
    4560:	085b      	lsrs	r3, r3, #1
    4562:	4313      	orrs	r3, r2
    4564:	0019      	movs	r1, r3
    4566:	b007      	add	sp, #28
    4568:	bc3c      	pop	{r2, r3, r4, r5}
    456a:	4690      	mov	r8, r2
    456c:	4699      	mov	r9, r3
    456e:	46a2      	mov	sl, r4
    4570:	46ab      	mov	fp, r5
    4572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4574:	2300      	movs	r3, #0
    4576:	2280      	movs	r2, #128	; 0x80
    4578:	469c      	mov	ip, r3
    457a:	0312      	lsls	r2, r2, #12
    457c:	4698      	mov	r8, r3
    457e:	4c03      	ldr	r4, [pc, #12]	; (458c <__aeabi_ddiv+0x1e4>)
    4580:	e7e0      	b.n	4544 <__aeabi_ddiv+0x19c>
    4582:	2300      	movs	r3, #0
    4584:	4c01      	ldr	r4, [pc, #4]	; (458c <__aeabi_ddiv+0x1e4>)
    4586:	2200      	movs	r2, #0
    4588:	4698      	mov	r8, r3
    458a:	e7db      	b.n	4544 <__aeabi_ddiv+0x19c>
    458c:	000007ff 	.word	0x000007ff
    4590:	fffffc01 	.word	0xfffffc01
    4594:	00007e1c 	.word	0x00007e1c
    4598:	fffffc0d 	.word	0xfffffc0d
    459c:	800fffff 	.word	0x800fffff
    45a0:	45d9      	cmp	r9, fp
    45a2:	d900      	bls.n	45a6 <__aeabi_ddiv+0x1fe>
    45a4:	e139      	b.n	481a <__aeabi_ddiv+0x472>
    45a6:	d100      	bne.n	45aa <__aeabi_ddiv+0x202>
    45a8:	e134      	b.n	4814 <__aeabi_ddiv+0x46c>
    45aa:	2300      	movs	r3, #0
    45ac:	4646      	mov	r6, r8
    45ae:	464d      	mov	r5, r9
    45b0:	469a      	mov	sl, r3
    45b2:	3c01      	subs	r4, #1
    45b4:	465b      	mov	r3, fp
    45b6:	0e0a      	lsrs	r2, r1, #24
    45b8:	021b      	lsls	r3, r3, #8
    45ba:	431a      	orrs	r2, r3
    45bc:	020b      	lsls	r3, r1, #8
    45be:	0c17      	lsrs	r7, r2, #16
    45c0:	9303      	str	r3, [sp, #12]
    45c2:	0413      	lsls	r3, r2, #16
    45c4:	0c1b      	lsrs	r3, r3, #16
    45c6:	0039      	movs	r1, r7
    45c8:	0028      	movs	r0, r5
    45ca:	4690      	mov	r8, r2
    45cc:	9301      	str	r3, [sp, #4]
    45ce:	f7fe fcf9 	bl	2fc4 <__udivsi3>
    45d2:	0002      	movs	r2, r0
    45d4:	9b01      	ldr	r3, [sp, #4]
    45d6:	4683      	mov	fp, r0
    45d8:	435a      	muls	r2, r3
    45da:	0028      	movs	r0, r5
    45dc:	0039      	movs	r1, r7
    45de:	4691      	mov	r9, r2
    45e0:	f7fe fd76 	bl	30d0 <__aeabi_uidivmod>
    45e4:	0c35      	lsrs	r5, r6, #16
    45e6:	0409      	lsls	r1, r1, #16
    45e8:	430d      	orrs	r5, r1
    45ea:	45a9      	cmp	r9, r5
    45ec:	d90d      	bls.n	460a <__aeabi_ddiv+0x262>
    45ee:	465b      	mov	r3, fp
    45f0:	4445      	add	r5, r8
    45f2:	3b01      	subs	r3, #1
    45f4:	45a8      	cmp	r8, r5
    45f6:	d900      	bls.n	45fa <__aeabi_ddiv+0x252>
    45f8:	e13a      	b.n	4870 <__aeabi_ddiv+0x4c8>
    45fa:	45a9      	cmp	r9, r5
    45fc:	d800      	bhi.n	4600 <__aeabi_ddiv+0x258>
    45fe:	e137      	b.n	4870 <__aeabi_ddiv+0x4c8>
    4600:	2302      	movs	r3, #2
    4602:	425b      	negs	r3, r3
    4604:	469c      	mov	ip, r3
    4606:	4445      	add	r5, r8
    4608:	44e3      	add	fp, ip
    460a:	464b      	mov	r3, r9
    460c:	1aeb      	subs	r3, r5, r3
    460e:	0039      	movs	r1, r7
    4610:	0018      	movs	r0, r3
    4612:	9304      	str	r3, [sp, #16]
    4614:	f7fe fcd6 	bl	2fc4 <__udivsi3>
    4618:	9b01      	ldr	r3, [sp, #4]
    461a:	0005      	movs	r5, r0
    461c:	4343      	muls	r3, r0
    461e:	0039      	movs	r1, r7
    4620:	9804      	ldr	r0, [sp, #16]
    4622:	4699      	mov	r9, r3
    4624:	f7fe fd54 	bl	30d0 <__aeabi_uidivmod>
    4628:	0433      	lsls	r3, r6, #16
    462a:	0409      	lsls	r1, r1, #16
    462c:	0c1b      	lsrs	r3, r3, #16
    462e:	430b      	orrs	r3, r1
    4630:	4599      	cmp	r9, r3
    4632:	d909      	bls.n	4648 <__aeabi_ddiv+0x2a0>
    4634:	4443      	add	r3, r8
    4636:	1e6a      	subs	r2, r5, #1
    4638:	4598      	cmp	r8, r3
    463a:	d900      	bls.n	463e <__aeabi_ddiv+0x296>
    463c:	e11a      	b.n	4874 <__aeabi_ddiv+0x4cc>
    463e:	4599      	cmp	r9, r3
    4640:	d800      	bhi.n	4644 <__aeabi_ddiv+0x29c>
    4642:	e117      	b.n	4874 <__aeabi_ddiv+0x4cc>
    4644:	3d02      	subs	r5, #2
    4646:	4443      	add	r3, r8
    4648:	464a      	mov	r2, r9
    464a:	1a9b      	subs	r3, r3, r2
    464c:	465a      	mov	r2, fp
    464e:	0412      	lsls	r2, r2, #16
    4650:	432a      	orrs	r2, r5
    4652:	9903      	ldr	r1, [sp, #12]
    4654:	4693      	mov	fp, r2
    4656:	0c10      	lsrs	r0, r2, #16
    4658:	0c0a      	lsrs	r2, r1, #16
    465a:	4691      	mov	r9, r2
    465c:	0409      	lsls	r1, r1, #16
    465e:	465a      	mov	r2, fp
    4660:	0c09      	lsrs	r1, r1, #16
    4662:	464e      	mov	r6, r9
    4664:	000d      	movs	r5, r1
    4666:	0412      	lsls	r2, r2, #16
    4668:	0c12      	lsrs	r2, r2, #16
    466a:	4345      	muls	r5, r0
    466c:	9105      	str	r1, [sp, #20]
    466e:	4351      	muls	r1, r2
    4670:	4372      	muls	r2, r6
    4672:	4370      	muls	r0, r6
    4674:	1952      	adds	r2, r2, r5
    4676:	0c0e      	lsrs	r6, r1, #16
    4678:	18b2      	adds	r2, r6, r2
    467a:	4295      	cmp	r5, r2
    467c:	d903      	bls.n	4686 <__aeabi_ddiv+0x2de>
    467e:	2580      	movs	r5, #128	; 0x80
    4680:	026d      	lsls	r5, r5, #9
    4682:	46ac      	mov	ip, r5
    4684:	4460      	add	r0, ip
    4686:	0c15      	lsrs	r5, r2, #16
    4688:	0409      	lsls	r1, r1, #16
    468a:	0412      	lsls	r2, r2, #16
    468c:	0c09      	lsrs	r1, r1, #16
    468e:	1828      	adds	r0, r5, r0
    4690:	1852      	adds	r2, r2, r1
    4692:	4283      	cmp	r3, r0
    4694:	d200      	bcs.n	4698 <__aeabi_ddiv+0x2f0>
    4696:	e0ce      	b.n	4836 <__aeabi_ddiv+0x48e>
    4698:	d100      	bne.n	469c <__aeabi_ddiv+0x2f4>
    469a:	e0c8      	b.n	482e <__aeabi_ddiv+0x486>
    469c:	1a1d      	subs	r5, r3, r0
    469e:	4653      	mov	r3, sl
    46a0:	1a9e      	subs	r6, r3, r2
    46a2:	45b2      	cmp	sl, r6
    46a4:	4192      	sbcs	r2, r2
    46a6:	4252      	negs	r2, r2
    46a8:	1aab      	subs	r3, r5, r2
    46aa:	469a      	mov	sl, r3
    46ac:	4598      	cmp	r8, r3
    46ae:	d100      	bne.n	46b2 <__aeabi_ddiv+0x30a>
    46b0:	e117      	b.n	48e2 <__aeabi_ddiv+0x53a>
    46b2:	0039      	movs	r1, r7
    46b4:	0018      	movs	r0, r3
    46b6:	f7fe fc85 	bl	2fc4 <__udivsi3>
    46ba:	9b01      	ldr	r3, [sp, #4]
    46bc:	0005      	movs	r5, r0
    46be:	4343      	muls	r3, r0
    46c0:	0039      	movs	r1, r7
    46c2:	4650      	mov	r0, sl
    46c4:	9304      	str	r3, [sp, #16]
    46c6:	f7fe fd03 	bl	30d0 <__aeabi_uidivmod>
    46ca:	9804      	ldr	r0, [sp, #16]
    46cc:	040b      	lsls	r3, r1, #16
    46ce:	0c31      	lsrs	r1, r6, #16
    46d0:	4319      	orrs	r1, r3
    46d2:	4288      	cmp	r0, r1
    46d4:	d909      	bls.n	46ea <__aeabi_ddiv+0x342>
    46d6:	4441      	add	r1, r8
    46d8:	1e6b      	subs	r3, r5, #1
    46da:	4588      	cmp	r8, r1
    46dc:	d900      	bls.n	46e0 <__aeabi_ddiv+0x338>
    46de:	e107      	b.n	48f0 <__aeabi_ddiv+0x548>
    46e0:	4288      	cmp	r0, r1
    46e2:	d800      	bhi.n	46e6 <__aeabi_ddiv+0x33e>
    46e4:	e104      	b.n	48f0 <__aeabi_ddiv+0x548>
    46e6:	3d02      	subs	r5, #2
    46e8:	4441      	add	r1, r8
    46ea:	9b04      	ldr	r3, [sp, #16]
    46ec:	1acb      	subs	r3, r1, r3
    46ee:	0018      	movs	r0, r3
    46f0:	0039      	movs	r1, r7
    46f2:	9304      	str	r3, [sp, #16]
    46f4:	f7fe fc66 	bl	2fc4 <__udivsi3>
    46f8:	9b01      	ldr	r3, [sp, #4]
    46fa:	4682      	mov	sl, r0
    46fc:	4343      	muls	r3, r0
    46fe:	0039      	movs	r1, r7
    4700:	9804      	ldr	r0, [sp, #16]
    4702:	9301      	str	r3, [sp, #4]
    4704:	f7fe fce4 	bl	30d0 <__aeabi_uidivmod>
    4708:	9801      	ldr	r0, [sp, #4]
    470a:	040b      	lsls	r3, r1, #16
    470c:	0431      	lsls	r1, r6, #16
    470e:	0c09      	lsrs	r1, r1, #16
    4710:	4319      	orrs	r1, r3
    4712:	4288      	cmp	r0, r1
    4714:	d90d      	bls.n	4732 <__aeabi_ddiv+0x38a>
    4716:	4653      	mov	r3, sl
    4718:	4441      	add	r1, r8
    471a:	3b01      	subs	r3, #1
    471c:	4588      	cmp	r8, r1
    471e:	d900      	bls.n	4722 <__aeabi_ddiv+0x37a>
    4720:	e0e8      	b.n	48f4 <__aeabi_ddiv+0x54c>
    4722:	4288      	cmp	r0, r1
    4724:	d800      	bhi.n	4728 <__aeabi_ddiv+0x380>
    4726:	e0e5      	b.n	48f4 <__aeabi_ddiv+0x54c>
    4728:	2302      	movs	r3, #2
    472a:	425b      	negs	r3, r3
    472c:	469c      	mov	ip, r3
    472e:	4441      	add	r1, r8
    4730:	44e2      	add	sl, ip
    4732:	9b01      	ldr	r3, [sp, #4]
    4734:	042d      	lsls	r5, r5, #16
    4736:	1ace      	subs	r6, r1, r3
    4738:	4651      	mov	r1, sl
    473a:	4329      	orrs	r1, r5
    473c:	9d05      	ldr	r5, [sp, #20]
    473e:	464f      	mov	r7, r9
    4740:	002a      	movs	r2, r5
    4742:	040b      	lsls	r3, r1, #16
    4744:	0c08      	lsrs	r0, r1, #16
    4746:	0c1b      	lsrs	r3, r3, #16
    4748:	435a      	muls	r2, r3
    474a:	4345      	muls	r5, r0
    474c:	437b      	muls	r3, r7
    474e:	4378      	muls	r0, r7
    4750:	195b      	adds	r3, r3, r5
    4752:	0c17      	lsrs	r7, r2, #16
    4754:	18fb      	adds	r3, r7, r3
    4756:	429d      	cmp	r5, r3
    4758:	d903      	bls.n	4762 <__aeabi_ddiv+0x3ba>
    475a:	2580      	movs	r5, #128	; 0x80
    475c:	026d      	lsls	r5, r5, #9
    475e:	46ac      	mov	ip, r5
    4760:	4460      	add	r0, ip
    4762:	0c1d      	lsrs	r5, r3, #16
    4764:	0412      	lsls	r2, r2, #16
    4766:	041b      	lsls	r3, r3, #16
    4768:	0c12      	lsrs	r2, r2, #16
    476a:	1828      	adds	r0, r5, r0
    476c:	189b      	adds	r3, r3, r2
    476e:	4286      	cmp	r6, r0
    4770:	d200      	bcs.n	4774 <__aeabi_ddiv+0x3cc>
    4772:	e093      	b.n	489c <__aeabi_ddiv+0x4f4>
    4774:	d100      	bne.n	4778 <__aeabi_ddiv+0x3d0>
    4776:	e08e      	b.n	4896 <__aeabi_ddiv+0x4ee>
    4778:	2301      	movs	r3, #1
    477a:	4319      	orrs	r1, r3
    477c:	4ba0      	ldr	r3, [pc, #640]	; (4a00 <__aeabi_ddiv+0x658>)
    477e:	18e3      	adds	r3, r4, r3
    4780:	2b00      	cmp	r3, #0
    4782:	dc00      	bgt.n	4786 <__aeabi_ddiv+0x3de>
    4784:	e099      	b.n	48ba <__aeabi_ddiv+0x512>
    4786:	074a      	lsls	r2, r1, #29
    4788:	d000      	beq.n	478c <__aeabi_ddiv+0x3e4>
    478a:	e09e      	b.n	48ca <__aeabi_ddiv+0x522>
    478c:	465a      	mov	r2, fp
    478e:	01d2      	lsls	r2, r2, #7
    4790:	d506      	bpl.n	47a0 <__aeabi_ddiv+0x3f8>
    4792:	465a      	mov	r2, fp
    4794:	4b9b      	ldr	r3, [pc, #620]	; (4a04 <__aeabi_ddiv+0x65c>)
    4796:	401a      	ands	r2, r3
    4798:	2380      	movs	r3, #128	; 0x80
    479a:	4693      	mov	fp, r2
    479c:	00db      	lsls	r3, r3, #3
    479e:	18e3      	adds	r3, r4, r3
    47a0:	4a99      	ldr	r2, [pc, #612]	; (4a08 <__aeabi_ddiv+0x660>)
    47a2:	4293      	cmp	r3, r2
    47a4:	dd68      	ble.n	4878 <__aeabi_ddiv+0x4d0>
    47a6:	2301      	movs	r3, #1
    47a8:	9a02      	ldr	r2, [sp, #8]
    47aa:	4c98      	ldr	r4, [pc, #608]	; (4a0c <__aeabi_ddiv+0x664>)
    47ac:	401a      	ands	r2, r3
    47ae:	2300      	movs	r3, #0
    47b0:	4694      	mov	ip, r2
    47b2:	4698      	mov	r8, r3
    47b4:	2200      	movs	r2, #0
    47b6:	e6c5      	b.n	4544 <__aeabi_ddiv+0x19c>
    47b8:	2280      	movs	r2, #128	; 0x80
    47ba:	464b      	mov	r3, r9
    47bc:	0312      	lsls	r2, r2, #12
    47be:	4213      	tst	r3, r2
    47c0:	d00a      	beq.n	47d8 <__aeabi_ddiv+0x430>
    47c2:	465b      	mov	r3, fp
    47c4:	4213      	tst	r3, r2
    47c6:	d106      	bne.n	47d6 <__aeabi_ddiv+0x42e>
    47c8:	431a      	orrs	r2, r3
    47ca:	0312      	lsls	r2, r2, #12
    47cc:	0b12      	lsrs	r2, r2, #12
    47ce:	46ac      	mov	ip, r5
    47d0:	4688      	mov	r8, r1
    47d2:	4c8e      	ldr	r4, [pc, #568]	; (4a0c <__aeabi_ddiv+0x664>)
    47d4:	e6b6      	b.n	4544 <__aeabi_ddiv+0x19c>
    47d6:	464b      	mov	r3, r9
    47d8:	431a      	orrs	r2, r3
    47da:	0312      	lsls	r2, r2, #12
    47dc:	0b12      	lsrs	r2, r2, #12
    47de:	46bc      	mov	ip, r7
    47e0:	4c8a      	ldr	r4, [pc, #552]	; (4a0c <__aeabi_ddiv+0x664>)
    47e2:	e6af      	b.n	4544 <__aeabi_ddiv+0x19c>
    47e4:	0003      	movs	r3, r0
    47e6:	465a      	mov	r2, fp
    47e8:	3b28      	subs	r3, #40	; 0x28
    47ea:	409a      	lsls	r2, r3
    47ec:	2300      	movs	r3, #0
    47ee:	4691      	mov	r9, r2
    47f0:	4698      	mov	r8, r3
    47f2:	e657      	b.n	44a4 <__aeabi_ddiv+0xfc>
    47f4:	4658      	mov	r0, fp
    47f6:	f000 ffe9 	bl	57cc <__clzsi2>
    47fa:	3020      	adds	r0, #32
    47fc:	e640      	b.n	4480 <__aeabi_ddiv+0xd8>
    47fe:	0003      	movs	r3, r0
    4800:	4652      	mov	r2, sl
    4802:	3b28      	subs	r3, #40	; 0x28
    4804:	409a      	lsls	r2, r3
    4806:	2100      	movs	r1, #0
    4808:	4693      	mov	fp, r2
    480a:	e677      	b.n	44fc <__aeabi_ddiv+0x154>
    480c:	f000 ffde 	bl	57cc <__clzsi2>
    4810:	3020      	adds	r0, #32
    4812:	e65f      	b.n	44d4 <__aeabi_ddiv+0x12c>
    4814:	4588      	cmp	r8, r1
    4816:	d200      	bcs.n	481a <__aeabi_ddiv+0x472>
    4818:	e6c7      	b.n	45aa <__aeabi_ddiv+0x202>
    481a:	464b      	mov	r3, r9
    481c:	07de      	lsls	r6, r3, #31
    481e:	085d      	lsrs	r5, r3, #1
    4820:	4643      	mov	r3, r8
    4822:	085b      	lsrs	r3, r3, #1
    4824:	431e      	orrs	r6, r3
    4826:	4643      	mov	r3, r8
    4828:	07db      	lsls	r3, r3, #31
    482a:	469a      	mov	sl, r3
    482c:	e6c2      	b.n	45b4 <__aeabi_ddiv+0x20c>
    482e:	2500      	movs	r5, #0
    4830:	4592      	cmp	sl, r2
    4832:	d300      	bcc.n	4836 <__aeabi_ddiv+0x48e>
    4834:	e733      	b.n	469e <__aeabi_ddiv+0x2f6>
    4836:	9e03      	ldr	r6, [sp, #12]
    4838:	4659      	mov	r1, fp
    483a:	46b4      	mov	ip, r6
    483c:	44e2      	add	sl, ip
    483e:	45b2      	cmp	sl, r6
    4840:	41ad      	sbcs	r5, r5
    4842:	426d      	negs	r5, r5
    4844:	4445      	add	r5, r8
    4846:	18eb      	adds	r3, r5, r3
    4848:	3901      	subs	r1, #1
    484a:	4598      	cmp	r8, r3
    484c:	d207      	bcs.n	485e <__aeabi_ddiv+0x4b6>
    484e:	4298      	cmp	r0, r3
    4850:	d900      	bls.n	4854 <__aeabi_ddiv+0x4ac>
    4852:	e07f      	b.n	4954 <__aeabi_ddiv+0x5ac>
    4854:	d100      	bne.n	4858 <__aeabi_ddiv+0x4b0>
    4856:	e0bc      	b.n	49d2 <__aeabi_ddiv+0x62a>
    4858:	1a1d      	subs	r5, r3, r0
    485a:	468b      	mov	fp, r1
    485c:	e71f      	b.n	469e <__aeabi_ddiv+0x2f6>
    485e:	4598      	cmp	r8, r3
    4860:	d1fa      	bne.n	4858 <__aeabi_ddiv+0x4b0>
    4862:	9d03      	ldr	r5, [sp, #12]
    4864:	4555      	cmp	r5, sl
    4866:	d9f2      	bls.n	484e <__aeabi_ddiv+0x4a6>
    4868:	4643      	mov	r3, r8
    486a:	468b      	mov	fp, r1
    486c:	1a1d      	subs	r5, r3, r0
    486e:	e716      	b.n	469e <__aeabi_ddiv+0x2f6>
    4870:	469b      	mov	fp, r3
    4872:	e6ca      	b.n	460a <__aeabi_ddiv+0x262>
    4874:	0015      	movs	r5, r2
    4876:	e6e7      	b.n	4648 <__aeabi_ddiv+0x2a0>
    4878:	465a      	mov	r2, fp
    487a:	08c9      	lsrs	r1, r1, #3
    487c:	0752      	lsls	r2, r2, #29
    487e:	430a      	orrs	r2, r1
    4880:	055b      	lsls	r3, r3, #21
    4882:	4690      	mov	r8, r2
    4884:	0d5c      	lsrs	r4, r3, #21
    4886:	465a      	mov	r2, fp
    4888:	2301      	movs	r3, #1
    488a:	9902      	ldr	r1, [sp, #8]
    488c:	0252      	lsls	r2, r2, #9
    488e:	4019      	ands	r1, r3
    4890:	0b12      	lsrs	r2, r2, #12
    4892:	468c      	mov	ip, r1
    4894:	e656      	b.n	4544 <__aeabi_ddiv+0x19c>
    4896:	2b00      	cmp	r3, #0
    4898:	d100      	bne.n	489c <__aeabi_ddiv+0x4f4>
    489a:	e76f      	b.n	477c <__aeabi_ddiv+0x3d4>
    489c:	4446      	add	r6, r8
    489e:	1e4a      	subs	r2, r1, #1
    48a0:	45b0      	cmp	r8, r6
    48a2:	d929      	bls.n	48f8 <__aeabi_ddiv+0x550>
    48a4:	0011      	movs	r1, r2
    48a6:	4286      	cmp	r6, r0
    48a8:	d000      	beq.n	48ac <__aeabi_ddiv+0x504>
    48aa:	e765      	b.n	4778 <__aeabi_ddiv+0x3d0>
    48ac:	9a03      	ldr	r2, [sp, #12]
    48ae:	4293      	cmp	r3, r2
    48b0:	d000      	beq.n	48b4 <__aeabi_ddiv+0x50c>
    48b2:	e761      	b.n	4778 <__aeabi_ddiv+0x3d0>
    48b4:	e762      	b.n	477c <__aeabi_ddiv+0x3d4>
    48b6:	2101      	movs	r1, #1
    48b8:	4249      	negs	r1, r1
    48ba:	2001      	movs	r0, #1
    48bc:	1ac2      	subs	r2, r0, r3
    48be:	2a38      	cmp	r2, #56	; 0x38
    48c0:	dd21      	ble.n	4906 <__aeabi_ddiv+0x55e>
    48c2:	9b02      	ldr	r3, [sp, #8]
    48c4:	4003      	ands	r3, r0
    48c6:	469c      	mov	ip, r3
    48c8:	e638      	b.n	453c <__aeabi_ddiv+0x194>
    48ca:	220f      	movs	r2, #15
    48cc:	400a      	ands	r2, r1
    48ce:	2a04      	cmp	r2, #4
    48d0:	d100      	bne.n	48d4 <__aeabi_ddiv+0x52c>
    48d2:	e75b      	b.n	478c <__aeabi_ddiv+0x3e4>
    48d4:	000a      	movs	r2, r1
    48d6:	1d11      	adds	r1, r2, #4
    48d8:	4291      	cmp	r1, r2
    48da:	4192      	sbcs	r2, r2
    48dc:	4252      	negs	r2, r2
    48de:	4493      	add	fp, r2
    48e0:	e754      	b.n	478c <__aeabi_ddiv+0x3e4>
    48e2:	4b47      	ldr	r3, [pc, #284]	; (4a00 <__aeabi_ddiv+0x658>)
    48e4:	18e3      	adds	r3, r4, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	dde5      	ble.n	48b6 <__aeabi_ddiv+0x50e>
    48ea:	2201      	movs	r2, #1
    48ec:	4252      	negs	r2, r2
    48ee:	e7f2      	b.n	48d6 <__aeabi_ddiv+0x52e>
    48f0:	001d      	movs	r5, r3
    48f2:	e6fa      	b.n	46ea <__aeabi_ddiv+0x342>
    48f4:	469a      	mov	sl, r3
    48f6:	e71c      	b.n	4732 <__aeabi_ddiv+0x38a>
    48f8:	42b0      	cmp	r0, r6
    48fa:	d839      	bhi.n	4970 <__aeabi_ddiv+0x5c8>
    48fc:	d06e      	beq.n	49dc <__aeabi_ddiv+0x634>
    48fe:	0011      	movs	r1, r2
    4900:	e73a      	b.n	4778 <__aeabi_ddiv+0x3d0>
    4902:	9302      	str	r3, [sp, #8]
    4904:	e73a      	b.n	477c <__aeabi_ddiv+0x3d4>
    4906:	2a1f      	cmp	r2, #31
    4908:	dc3c      	bgt.n	4984 <__aeabi_ddiv+0x5dc>
    490a:	2320      	movs	r3, #32
    490c:	1a9b      	subs	r3, r3, r2
    490e:	000c      	movs	r4, r1
    4910:	4658      	mov	r0, fp
    4912:	4099      	lsls	r1, r3
    4914:	4098      	lsls	r0, r3
    4916:	1e4b      	subs	r3, r1, #1
    4918:	4199      	sbcs	r1, r3
    491a:	465b      	mov	r3, fp
    491c:	40d4      	lsrs	r4, r2
    491e:	40d3      	lsrs	r3, r2
    4920:	4320      	orrs	r0, r4
    4922:	4308      	orrs	r0, r1
    4924:	001a      	movs	r2, r3
    4926:	0743      	lsls	r3, r0, #29
    4928:	d009      	beq.n	493e <__aeabi_ddiv+0x596>
    492a:	230f      	movs	r3, #15
    492c:	4003      	ands	r3, r0
    492e:	2b04      	cmp	r3, #4
    4930:	d005      	beq.n	493e <__aeabi_ddiv+0x596>
    4932:	0001      	movs	r1, r0
    4934:	1d08      	adds	r0, r1, #4
    4936:	4288      	cmp	r0, r1
    4938:	419b      	sbcs	r3, r3
    493a:	425b      	negs	r3, r3
    493c:	18d2      	adds	r2, r2, r3
    493e:	0213      	lsls	r3, r2, #8
    4940:	d53a      	bpl.n	49b8 <__aeabi_ddiv+0x610>
    4942:	2301      	movs	r3, #1
    4944:	9a02      	ldr	r2, [sp, #8]
    4946:	2401      	movs	r4, #1
    4948:	401a      	ands	r2, r3
    494a:	2300      	movs	r3, #0
    494c:	4694      	mov	ip, r2
    494e:	4698      	mov	r8, r3
    4950:	2200      	movs	r2, #0
    4952:	e5f7      	b.n	4544 <__aeabi_ddiv+0x19c>
    4954:	2102      	movs	r1, #2
    4956:	4249      	negs	r1, r1
    4958:	468c      	mov	ip, r1
    495a:	9d03      	ldr	r5, [sp, #12]
    495c:	44e3      	add	fp, ip
    495e:	46ac      	mov	ip, r5
    4960:	44e2      	add	sl, ip
    4962:	45aa      	cmp	sl, r5
    4964:	41ad      	sbcs	r5, r5
    4966:	426d      	negs	r5, r5
    4968:	4445      	add	r5, r8
    496a:	18ed      	adds	r5, r5, r3
    496c:	1a2d      	subs	r5, r5, r0
    496e:	e696      	b.n	469e <__aeabi_ddiv+0x2f6>
    4970:	1e8a      	subs	r2, r1, #2
    4972:	9903      	ldr	r1, [sp, #12]
    4974:	004d      	lsls	r5, r1, #1
    4976:	428d      	cmp	r5, r1
    4978:	4189      	sbcs	r1, r1
    497a:	4249      	negs	r1, r1
    497c:	4441      	add	r1, r8
    497e:	1876      	adds	r6, r6, r1
    4980:	9503      	str	r5, [sp, #12]
    4982:	e78f      	b.n	48a4 <__aeabi_ddiv+0x4fc>
    4984:	201f      	movs	r0, #31
    4986:	4240      	negs	r0, r0
    4988:	1ac3      	subs	r3, r0, r3
    498a:	4658      	mov	r0, fp
    498c:	40d8      	lsrs	r0, r3
    498e:	0003      	movs	r3, r0
    4990:	2a20      	cmp	r2, #32
    4992:	d028      	beq.n	49e6 <__aeabi_ddiv+0x63e>
    4994:	2040      	movs	r0, #64	; 0x40
    4996:	465d      	mov	r5, fp
    4998:	1a82      	subs	r2, r0, r2
    499a:	4095      	lsls	r5, r2
    499c:	4329      	orrs	r1, r5
    499e:	1e4a      	subs	r2, r1, #1
    49a0:	4191      	sbcs	r1, r2
    49a2:	4319      	orrs	r1, r3
    49a4:	2307      	movs	r3, #7
    49a6:	2200      	movs	r2, #0
    49a8:	400b      	ands	r3, r1
    49aa:	d009      	beq.n	49c0 <__aeabi_ddiv+0x618>
    49ac:	230f      	movs	r3, #15
    49ae:	2200      	movs	r2, #0
    49b0:	400b      	ands	r3, r1
    49b2:	0008      	movs	r0, r1
    49b4:	2b04      	cmp	r3, #4
    49b6:	d1bd      	bne.n	4934 <__aeabi_ddiv+0x58c>
    49b8:	0001      	movs	r1, r0
    49ba:	0753      	lsls	r3, r2, #29
    49bc:	0252      	lsls	r2, r2, #9
    49be:	0b12      	lsrs	r2, r2, #12
    49c0:	08c9      	lsrs	r1, r1, #3
    49c2:	4319      	orrs	r1, r3
    49c4:	2301      	movs	r3, #1
    49c6:	4688      	mov	r8, r1
    49c8:	9902      	ldr	r1, [sp, #8]
    49ca:	2400      	movs	r4, #0
    49cc:	4019      	ands	r1, r3
    49ce:	468c      	mov	ip, r1
    49d0:	e5b8      	b.n	4544 <__aeabi_ddiv+0x19c>
    49d2:	4552      	cmp	r2, sl
    49d4:	d8be      	bhi.n	4954 <__aeabi_ddiv+0x5ac>
    49d6:	468b      	mov	fp, r1
    49d8:	2500      	movs	r5, #0
    49da:	e660      	b.n	469e <__aeabi_ddiv+0x2f6>
    49dc:	9d03      	ldr	r5, [sp, #12]
    49de:	429d      	cmp	r5, r3
    49e0:	d3c6      	bcc.n	4970 <__aeabi_ddiv+0x5c8>
    49e2:	0011      	movs	r1, r2
    49e4:	e762      	b.n	48ac <__aeabi_ddiv+0x504>
    49e6:	2500      	movs	r5, #0
    49e8:	e7d8      	b.n	499c <__aeabi_ddiv+0x5f4>
    49ea:	2280      	movs	r2, #128	; 0x80
    49ec:	465b      	mov	r3, fp
    49ee:	0312      	lsls	r2, r2, #12
    49f0:	431a      	orrs	r2, r3
    49f2:	9b01      	ldr	r3, [sp, #4]
    49f4:	0312      	lsls	r2, r2, #12
    49f6:	0b12      	lsrs	r2, r2, #12
    49f8:	469c      	mov	ip, r3
    49fa:	4688      	mov	r8, r1
    49fc:	4c03      	ldr	r4, [pc, #12]	; (4a0c <__aeabi_ddiv+0x664>)
    49fe:	e5a1      	b.n	4544 <__aeabi_ddiv+0x19c>
    4a00:	000003ff 	.word	0x000003ff
    4a04:	feffffff 	.word	0xfeffffff
    4a08:	000007fe 	.word	0x000007fe
    4a0c:	000007ff 	.word	0x000007ff

00004a10 <__aeabi_dmul>:
    4a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a12:	4657      	mov	r7, sl
    4a14:	4645      	mov	r5, r8
    4a16:	46de      	mov	lr, fp
    4a18:	464e      	mov	r6, r9
    4a1a:	b5e0      	push	{r5, r6, r7, lr}
    4a1c:	030c      	lsls	r4, r1, #12
    4a1e:	4698      	mov	r8, r3
    4a20:	004e      	lsls	r6, r1, #1
    4a22:	0b23      	lsrs	r3, r4, #12
    4a24:	b087      	sub	sp, #28
    4a26:	0007      	movs	r7, r0
    4a28:	4692      	mov	sl, r2
    4a2a:	469b      	mov	fp, r3
    4a2c:	0d76      	lsrs	r6, r6, #21
    4a2e:	0fcd      	lsrs	r5, r1, #31
    4a30:	2e00      	cmp	r6, #0
    4a32:	d06b      	beq.n	4b0c <__aeabi_dmul+0xfc>
    4a34:	4b6d      	ldr	r3, [pc, #436]	; (4bec <__aeabi_dmul+0x1dc>)
    4a36:	429e      	cmp	r6, r3
    4a38:	d035      	beq.n	4aa6 <__aeabi_dmul+0x96>
    4a3a:	2480      	movs	r4, #128	; 0x80
    4a3c:	465b      	mov	r3, fp
    4a3e:	0f42      	lsrs	r2, r0, #29
    4a40:	0424      	lsls	r4, r4, #16
    4a42:	00db      	lsls	r3, r3, #3
    4a44:	4314      	orrs	r4, r2
    4a46:	431c      	orrs	r4, r3
    4a48:	00c3      	lsls	r3, r0, #3
    4a4a:	4699      	mov	r9, r3
    4a4c:	4b68      	ldr	r3, [pc, #416]	; (4bf0 <__aeabi_dmul+0x1e0>)
    4a4e:	46a3      	mov	fp, r4
    4a50:	469c      	mov	ip, r3
    4a52:	2300      	movs	r3, #0
    4a54:	2700      	movs	r7, #0
    4a56:	4466      	add	r6, ip
    4a58:	9302      	str	r3, [sp, #8]
    4a5a:	4643      	mov	r3, r8
    4a5c:	031c      	lsls	r4, r3, #12
    4a5e:	005a      	lsls	r2, r3, #1
    4a60:	0fdb      	lsrs	r3, r3, #31
    4a62:	4650      	mov	r0, sl
    4a64:	0b24      	lsrs	r4, r4, #12
    4a66:	0d52      	lsrs	r2, r2, #21
    4a68:	4698      	mov	r8, r3
    4a6a:	d100      	bne.n	4a6e <__aeabi_dmul+0x5e>
    4a6c:	e076      	b.n	4b5c <__aeabi_dmul+0x14c>
    4a6e:	4b5f      	ldr	r3, [pc, #380]	; (4bec <__aeabi_dmul+0x1dc>)
    4a70:	429a      	cmp	r2, r3
    4a72:	d06d      	beq.n	4b50 <__aeabi_dmul+0x140>
    4a74:	2380      	movs	r3, #128	; 0x80
    4a76:	0f41      	lsrs	r1, r0, #29
    4a78:	041b      	lsls	r3, r3, #16
    4a7a:	430b      	orrs	r3, r1
    4a7c:	495c      	ldr	r1, [pc, #368]	; (4bf0 <__aeabi_dmul+0x1e0>)
    4a7e:	00e4      	lsls	r4, r4, #3
    4a80:	468c      	mov	ip, r1
    4a82:	431c      	orrs	r4, r3
    4a84:	00c3      	lsls	r3, r0, #3
    4a86:	2000      	movs	r0, #0
    4a88:	4462      	add	r2, ip
    4a8a:	4641      	mov	r1, r8
    4a8c:	18b6      	adds	r6, r6, r2
    4a8e:	4069      	eors	r1, r5
    4a90:	1c72      	adds	r2, r6, #1
    4a92:	9101      	str	r1, [sp, #4]
    4a94:	4694      	mov	ip, r2
    4a96:	4307      	orrs	r7, r0
    4a98:	2f0f      	cmp	r7, #15
    4a9a:	d900      	bls.n	4a9e <__aeabi_dmul+0x8e>
    4a9c:	e0b0      	b.n	4c00 <__aeabi_dmul+0x1f0>
    4a9e:	4a55      	ldr	r2, [pc, #340]	; (4bf4 <__aeabi_dmul+0x1e4>)
    4aa0:	00bf      	lsls	r7, r7, #2
    4aa2:	59d2      	ldr	r2, [r2, r7]
    4aa4:	4697      	mov	pc, r2
    4aa6:	465b      	mov	r3, fp
    4aa8:	4303      	orrs	r3, r0
    4aaa:	4699      	mov	r9, r3
    4aac:	d000      	beq.n	4ab0 <__aeabi_dmul+0xa0>
    4aae:	e087      	b.n	4bc0 <__aeabi_dmul+0x1b0>
    4ab0:	2300      	movs	r3, #0
    4ab2:	469b      	mov	fp, r3
    4ab4:	3302      	adds	r3, #2
    4ab6:	2708      	movs	r7, #8
    4ab8:	9302      	str	r3, [sp, #8]
    4aba:	e7ce      	b.n	4a5a <__aeabi_dmul+0x4a>
    4abc:	4642      	mov	r2, r8
    4abe:	9201      	str	r2, [sp, #4]
    4ac0:	2802      	cmp	r0, #2
    4ac2:	d067      	beq.n	4b94 <__aeabi_dmul+0x184>
    4ac4:	2803      	cmp	r0, #3
    4ac6:	d100      	bne.n	4aca <__aeabi_dmul+0xba>
    4ac8:	e20e      	b.n	4ee8 <__aeabi_dmul+0x4d8>
    4aca:	2801      	cmp	r0, #1
    4acc:	d000      	beq.n	4ad0 <__aeabi_dmul+0xc0>
    4ace:	e162      	b.n	4d96 <__aeabi_dmul+0x386>
    4ad0:	2300      	movs	r3, #0
    4ad2:	2400      	movs	r4, #0
    4ad4:	2200      	movs	r2, #0
    4ad6:	4699      	mov	r9, r3
    4ad8:	9901      	ldr	r1, [sp, #4]
    4ada:	4001      	ands	r1, r0
    4adc:	b2cd      	uxtb	r5, r1
    4ade:	2100      	movs	r1, #0
    4ae0:	0312      	lsls	r2, r2, #12
    4ae2:	0d0b      	lsrs	r3, r1, #20
    4ae4:	0b12      	lsrs	r2, r2, #12
    4ae6:	051b      	lsls	r3, r3, #20
    4ae8:	4313      	orrs	r3, r2
    4aea:	4a43      	ldr	r2, [pc, #268]	; (4bf8 <__aeabi_dmul+0x1e8>)
    4aec:	0524      	lsls	r4, r4, #20
    4aee:	4013      	ands	r3, r2
    4af0:	431c      	orrs	r4, r3
    4af2:	0064      	lsls	r4, r4, #1
    4af4:	07ed      	lsls	r5, r5, #31
    4af6:	0864      	lsrs	r4, r4, #1
    4af8:	432c      	orrs	r4, r5
    4afa:	4648      	mov	r0, r9
    4afc:	0021      	movs	r1, r4
    4afe:	b007      	add	sp, #28
    4b00:	bc3c      	pop	{r2, r3, r4, r5}
    4b02:	4690      	mov	r8, r2
    4b04:	4699      	mov	r9, r3
    4b06:	46a2      	mov	sl, r4
    4b08:	46ab      	mov	fp, r5
    4b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b0c:	4303      	orrs	r3, r0
    4b0e:	4699      	mov	r9, r3
    4b10:	d04f      	beq.n	4bb2 <__aeabi_dmul+0x1a2>
    4b12:	465b      	mov	r3, fp
    4b14:	2b00      	cmp	r3, #0
    4b16:	d100      	bne.n	4b1a <__aeabi_dmul+0x10a>
    4b18:	e189      	b.n	4e2e <__aeabi_dmul+0x41e>
    4b1a:	4658      	mov	r0, fp
    4b1c:	f000 fe56 	bl	57cc <__clzsi2>
    4b20:	0003      	movs	r3, r0
    4b22:	3b0b      	subs	r3, #11
    4b24:	2b1c      	cmp	r3, #28
    4b26:	dd00      	ble.n	4b2a <__aeabi_dmul+0x11a>
    4b28:	e17a      	b.n	4e20 <__aeabi_dmul+0x410>
    4b2a:	221d      	movs	r2, #29
    4b2c:	1ad3      	subs	r3, r2, r3
    4b2e:	003a      	movs	r2, r7
    4b30:	0001      	movs	r1, r0
    4b32:	465c      	mov	r4, fp
    4b34:	40da      	lsrs	r2, r3
    4b36:	3908      	subs	r1, #8
    4b38:	408c      	lsls	r4, r1
    4b3a:	0013      	movs	r3, r2
    4b3c:	408f      	lsls	r7, r1
    4b3e:	4323      	orrs	r3, r4
    4b40:	469b      	mov	fp, r3
    4b42:	46b9      	mov	r9, r7
    4b44:	2300      	movs	r3, #0
    4b46:	4e2d      	ldr	r6, [pc, #180]	; (4bfc <__aeabi_dmul+0x1ec>)
    4b48:	2700      	movs	r7, #0
    4b4a:	1a36      	subs	r6, r6, r0
    4b4c:	9302      	str	r3, [sp, #8]
    4b4e:	e784      	b.n	4a5a <__aeabi_dmul+0x4a>
    4b50:	4653      	mov	r3, sl
    4b52:	4323      	orrs	r3, r4
    4b54:	d12a      	bne.n	4bac <__aeabi_dmul+0x19c>
    4b56:	2400      	movs	r4, #0
    4b58:	2002      	movs	r0, #2
    4b5a:	e796      	b.n	4a8a <__aeabi_dmul+0x7a>
    4b5c:	4653      	mov	r3, sl
    4b5e:	4323      	orrs	r3, r4
    4b60:	d020      	beq.n	4ba4 <__aeabi_dmul+0x194>
    4b62:	2c00      	cmp	r4, #0
    4b64:	d100      	bne.n	4b68 <__aeabi_dmul+0x158>
    4b66:	e157      	b.n	4e18 <__aeabi_dmul+0x408>
    4b68:	0020      	movs	r0, r4
    4b6a:	f000 fe2f 	bl	57cc <__clzsi2>
    4b6e:	0003      	movs	r3, r0
    4b70:	3b0b      	subs	r3, #11
    4b72:	2b1c      	cmp	r3, #28
    4b74:	dd00      	ble.n	4b78 <__aeabi_dmul+0x168>
    4b76:	e149      	b.n	4e0c <__aeabi_dmul+0x3fc>
    4b78:	211d      	movs	r1, #29
    4b7a:	1acb      	subs	r3, r1, r3
    4b7c:	4651      	mov	r1, sl
    4b7e:	0002      	movs	r2, r0
    4b80:	40d9      	lsrs	r1, r3
    4b82:	4653      	mov	r3, sl
    4b84:	3a08      	subs	r2, #8
    4b86:	4094      	lsls	r4, r2
    4b88:	4093      	lsls	r3, r2
    4b8a:	430c      	orrs	r4, r1
    4b8c:	4a1b      	ldr	r2, [pc, #108]	; (4bfc <__aeabi_dmul+0x1ec>)
    4b8e:	1a12      	subs	r2, r2, r0
    4b90:	2000      	movs	r0, #0
    4b92:	e77a      	b.n	4a8a <__aeabi_dmul+0x7a>
    4b94:	2501      	movs	r5, #1
    4b96:	9b01      	ldr	r3, [sp, #4]
    4b98:	4c14      	ldr	r4, [pc, #80]	; (4bec <__aeabi_dmul+0x1dc>)
    4b9a:	401d      	ands	r5, r3
    4b9c:	2300      	movs	r3, #0
    4b9e:	2200      	movs	r2, #0
    4ba0:	4699      	mov	r9, r3
    4ba2:	e79c      	b.n	4ade <__aeabi_dmul+0xce>
    4ba4:	2400      	movs	r4, #0
    4ba6:	2200      	movs	r2, #0
    4ba8:	2001      	movs	r0, #1
    4baa:	e76e      	b.n	4a8a <__aeabi_dmul+0x7a>
    4bac:	4653      	mov	r3, sl
    4bae:	2003      	movs	r0, #3
    4bb0:	e76b      	b.n	4a8a <__aeabi_dmul+0x7a>
    4bb2:	2300      	movs	r3, #0
    4bb4:	469b      	mov	fp, r3
    4bb6:	3301      	adds	r3, #1
    4bb8:	2704      	movs	r7, #4
    4bba:	2600      	movs	r6, #0
    4bbc:	9302      	str	r3, [sp, #8]
    4bbe:	e74c      	b.n	4a5a <__aeabi_dmul+0x4a>
    4bc0:	2303      	movs	r3, #3
    4bc2:	4681      	mov	r9, r0
    4bc4:	270c      	movs	r7, #12
    4bc6:	9302      	str	r3, [sp, #8]
    4bc8:	e747      	b.n	4a5a <__aeabi_dmul+0x4a>
    4bca:	2280      	movs	r2, #128	; 0x80
    4bcc:	2300      	movs	r3, #0
    4bce:	2500      	movs	r5, #0
    4bd0:	0312      	lsls	r2, r2, #12
    4bd2:	4699      	mov	r9, r3
    4bd4:	4c05      	ldr	r4, [pc, #20]	; (4bec <__aeabi_dmul+0x1dc>)
    4bd6:	e782      	b.n	4ade <__aeabi_dmul+0xce>
    4bd8:	465c      	mov	r4, fp
    4bda:	464b      	mov	r3, r9
    4bdc:	9802      	ldr	r0, [sp, #8]
    4bde:	e76f      	b.n	4ac0 <__aeabi_dmul+0xb0>
    4be0:	465c      	mov	r4, fp
    4be2:	464b      	mov	r3, r9
    4be4:	9501      	str	r5, [sp, #4]
    4be6:	9802      	ldr	r0, [sp, #8]
    4be8:	e76a      	b.n	4ac0 <__aeabi_dmul+0xb0>
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	000007ff 	.word	0x000007ff
    4bf0:	fffffc01 	.word	0xfffffc01
    4bf4:	00007e5c 	.word	0x00007e5c
    4bf8:	800fffff 	.word	0x800fffff
    4bfc:	fffffc0d 	.word	0xfffffc0d
    4c00:	464a      	mov	r2, r9
    4c02:	4649      	mov	r1, r9
    4c04:	0c17      	lsrs	r7, r2, #16
    4c06:	0c1a      	lsrs	r2, r3, #16
    4c08:	041b      	lsls	r3, r3, #16
    4c0a:	0c1b      	lsrs	r3, r3, #16
    4c0c:	0408      	lsls	r0, r1, #16
    4c0e:	0019      	movs	r1, r3
    4c10:	0c00      	lsrs	r0, r0, #16
    4c12:	4341      	muls	r1, r0
    4c14:	0015      	movs	r5, r2
    4c16:	4688      	mov	r8, r1
    4c18:	0019      	movs	r1, r3
    4c1a:	437d      	muls	r5, r7
    4c1c:	4379      	muls	r1, r7
    4c1e:	9503      	str	r5, [sp, #12]
    4c20:	4689      	mov	r9, r1
    4c22:	0029      	movs	r1, r5
    4c24:	0015      	movs	r5, r2
    4c26:	4345      	muls	r5, r0
    4c28:	444d      	add	r5, r9
    4c2a:	9502      	str	r5, [sp, #8]
    4c2c:	4645      	mov	r5, r8
    4c2e:	0c2d      	lsrs	r5, r5, #16
    4c30:	46aa      	mov	sl, r5
    4c32:	9d02      	ldr	r5, [sp, #8]
    4c34:	4455      	add	r5, sl
    4c36:	45a9      	cmp	r9, r5
    4c38:	d906      	bls.n	4c48 <__aeabi_dmul+0x238>
    4c3a:	468a      	mov	sl, r1
    4c3c:	2180      	movs	r1, #128	; 0x80
    4c3e:	0249      	lsls	r1, r1, #9
    4c40:	4689      	mov	r9, r1
    4c42:	44ca      	add	sl, r9
    4c44:	4651      	mov	r1, sl
    4c46:	9103      	str	r1, [sp, #12]
    4c48:	0c29      	lsrs	r1, r5, #16
    4c4a:	9104      	str	r1, [sp, #16]
    4c4c:	4641      	mov	r1, r8
    4c4e:	0409      	lsls	r1, r1, #16
    4c50:	042d      	lsls	r5, r5, #16
    4c52:	0c09      	lsrs	r1, r1, #16
    4c54:	4688      	mov	r8, r1
    4c56:	0029      	movs	r1, r5
    4c58:	0c25      	lsrs	r5, r4, #16
    4c5a:	0424      	lsls	r4, r4, #16
    4c5c:	4441      	add	r1, r8
    4c5e:	0c24      	lsrs	r4, r4, #16
    4c60:	9105      	str	r1, [sp, #20]
    4c62:	0021      	movs	r1, r4
    4c64:	4341      	muls	r1, r0
    4c66:	4688      	mov	r8, r1
    4c68:	0021      	movs	r1, r4
    4c6a:	4379      	muls	r1, r7
    4c6c:	468a      	mov	sl, r1
    4c6e:	4368      	muls	r0, r5
    4c70:	4641      	mov	r1, r8
    4c72:	4450      	add	r0, sl
    4c74:	4681      	mov	r9, r0
    4c76:	0c08      	lsrs	r0, r1, #16
    4c78:	4448      	add	r0, r9
    4c7a:	436f      	muls	r7, r5
    4c7c:	4582      	cmp	sl, r0
    4c7e:	d903      	bls.n	4c88 <__aeabi_dmul+0x278>
    4c80:	2180      	movs	r1, #128	; 0x80
    4c82:	0249      	lsls	r1, r1, #9
    4c84:	4689      	mov	r9, r1
    4c86:	444f      	add	r7, r9
    4c88:	0c01      	lsrs	r1, r0, #16
    4c8a:	4689      	mov	r9, r1
    4c8c:	0039      	movs	r1, r7
    4c8e:	4449      	add	r1, r9
    4c90:	9102      	str	r1, [sp, #8]
    4c92:	4641      	mov	r1, r8
    4c94:	040f      	lsls	r7, r1, #16
    4c96:	9904      	ldr	r1, [sp, #16]
    4c98:	0c3f      	lsrs	r7, r7, #16
    4c9a:	4688      	mov	r8, r1
    4c9c:	0400      	lsls	r0, r0, #16
    4c9e:	19c0      	adds	r0, r0, r7
    4ca0:	4480      	add	r8, r0
    4ca2:	4641      	mov	r1, r8
    4ca4:	9104      	str	r1, [sp, #16]
    4ca6:	4659      	mov	r1, fp
    4ca8:	0c0f      	lsrs	r7, r1, #16
    4caa:	0409      	lsls	r1, r1, #16
    4cac:	0c09      	lsrs	r1, r1, #16
    4cae:	4688      	mov	r8, r1
    4cb0:	4359      	muls	r1, r3
    4cb2:	468a      	mov	sl, r1
    4cb4:	0039      	movs	r1, r7
    4cb6:	4351      	muls	r1, r2
    4cb8:	4689      	mov	r9, r1
    4cba:	4641      	mov	r1, r8
    4cbc:	434a      	muls	r2, r1
    4cbe:	4651      	mov	r1, sl
    4cc0:	0c09      	lsrs	r1, r1, #16
    4cc2:	468b      	mov	fp, r1
    4cc4:	437b      	muls	r3, r7
    4cc6:	18d2      	adds	r2, r2, r3
    4cc8:	445a      	add	r2, fp
    4cca:	4293      	cmp	r3, r2
    4ccc:	d903      	bls.n	4cd6 <__aeabi_dmul+0x2c6>
    4cce:	2380      	movs	r3, #128	; 0x80
    4cd0:	025b      	lsls	r3, r3, #9
    4cd2:	469b      	mov	fp, r3
    4cd4:	44d9      	add	r9, fp
    4cd6:	4651      	mov	r1, sl
    4cd8:	0409      	lsls	r1, r1, #16
    4cda:	0c09      	lsrs	r1, r1, #16
    4cdc:	468a      	mov	sl, r1
    4cde:	4641      	mov	r1, r8
    4ce0:	4361      	muls	r1, r4
    4ce2:	437c      	muls	r4, r7
    4ce4:	0c13      	lsrs	r3, r2, #16
    4ce6:	0412      	lsls	r2, r2, #16
    4ce8:	444b      	add	r3, r9
    4cea:	4452      	add	r2, sl
    4cec:	46a1      	mov	r9, r4
    4cee:	468a      	mov	sl, r1
    4cf0:	003c      	movs	r4, r7
    4cf2:	4641      	mov	r1, r8
    4cf4:	436c      	muls	r4, r5
    4cf6:	434d      	muls	r5, r1
    4cf8:	4651      	mov	r1, sl
    4cfa:	444d      	add	r5, r9
    4cfc:	0c0f      	lsrs	r7, r1, #16
    4cfe:	197d      	adds	r5, r7, r5
    4d00:	45a9      	cmp	r9, r5
    4d02:	d903      	bls.n	4d0c <__aeabi_dmul+0x2fc>
    4d04:	2180      	movs	r1, #128	; 0x80
    4d06:	0249      	lsls	r1, r1, #9
    4d08:	4688      	mov	r8, r1
    4d0a:	4444      	add	r4, r8
    4d0c:	9f04      	ldr	r7, [sp, #16]
    4d0e:	9903      	ldr	r1, [sp, #12]
    4d10:	46b8      	mov	r8, r7
    4d12:	4441      	add	r1, r8
    4d14:	468b      	mov	fp, r1
    4d16:	4583      	cmp	fp, r0
    4d18:	4180      	sbcs	r0, r0
    4d1a:	4241      	negs	r1, r0
    4d1c:	4688      	mov	r8, r1
    4d1e:	4651      	mov	r1, sl
    4d20:	0408      	lsls	r0, r1, #16
    4d22:	042f      	lsls	r7, r5, #16
    4d24:	0c00      	lsrs	r0, r0, #16
    4d26:	183f      	adds	r7, r7, r0
    4d28:	4658      	mov	r0, fp
    4d2a:	9902      	ldr	r1, [sp, #8]
    4d2c:	1810      	adds	r0, r2, r0
    4d2e:	4689      	mov	r9, r1
    4d30:	4290      	cmp	r0, r2
    4d32:	4192      	sbcs	r2, r2
    4d34:	444f      	add	r7, r9
    4d36:	46ba      	mov	sl, r7
    4d38:	4252      	negs	r2, r2
    4d3a:	4699      	mov	r9, r3
    4d3c:	4693      	mov	fp, r2
    4d3e:	44c2      	add	sl, r8
    4d40:	44d1      	add	r9, sl
    4d42:	44cb      	add	fp, r9
    4d44:	428f      	cmp	r7, r1
    4d46:	41bf      	sbcs	r7, r7
    4d48:	45c2      	cmp	sl, r8
    4d4a:	4189      	sbcs	r1, r1
    4d4c:	4599      	cmp	r9, r3
    4d4e:	419b      	sbcs	r3, r3
    4d50:	4593      	cmp	fp, r2
    4d52:	4192      	sbcs	r2, r2
    4d54:	427f      	negs	r7, r7
    4d56:	4249      	negs	r1, r1
    4d58:	0c2d      	lsrs	r5, r5, #16
    4d5a:	4252      	negs	r2, r2
    4d5c:	430f      	orrs	r7, r1
    4d5e:	425b      	negs	r3, r3
    4d60:	4313      	orrs	r3, r2
    4d62:	197f      	adds	r7, r7, r5
    4d64:	18ff      	adds	r7, r7, r3
    4d66:	465b      	mov	r3, fp
    4d68:	193c      	adds	r4, r7, r4
    4d6a:	0ddb      	lsrs	r3, r3, #23
    4d6c:	9a05      	ldr	r2, [sp, #20]
    4d6e:	0264      	lsls	r4, r4, #9
    4d70:	431c      	orrs	r4, r3
    4d72:	0243      	lsls	r3, r0, #9
    4d74:	4313      	orrs	r3, r2
    4d76:	1e5d      	subs	r5, r3, #1
    4d78:	41ab      	sbcs	r3, r5
    4d7a:	465a      	mov	r2, fp
    4d7c:	0dc0      	lsrs	r0, r0, #23
    4d7e:	4303      	orrs	r3, r0
    4d80:	0252      	lsls	r2, r2, #9
    4d82:	4313      	orrs	r3, r2
    4d84:	01e2      	lsls	r2, r4, #7
    4d86:	d556      	bpl.n	4e36 <__aeabi_dmul+0x426>
    4d88:	2001      	movs	r0, #1
    4d8a:	085a      	lsrs	r2, r3, #1
    4d8c:	4003      	ands	r3, r0
    4d8e:	4313      	orrs	r3, r2
    4d90:	07e2      	lsls	r2, r4, #31
    4d92:	4313      	orrs	r3, r2
    4d94:	0864      	lsrs	r4, r4, #1
    4d96:	485a      	ldr	r0, [pc, #360]	; (4f00 <__aeabi_dmul+0x4f0>)
    4d98:	4460      	add	r0, ip
    4d9a:	2800      	cmp	r0, #0
    4d9c:	dd4d      	ble.n	4e3a <__aeabi_dmul+0x42a>
    4d9e:	075a      	lsls	r2, r3, #29
    4da0:	d009      	beq.n	4db6 <__aeabi_dmul+0x3a6>
    4da2:	220f      	movs	r2, #15
    4da4:	401a      	ands	r2, r3
    4da6:	2a04      	cmp	r2, #4
    4da8:	d005      	beq.n	4db6 <__aeabi_dmul+0x3a6>
    4daa:	1d1a      	adds	r2, r3, #4
    4dac:	429a      	cmp	r2, r3
    4dae:	419b      	sbcs	r3, r3
    4db0:	425b      	negs	r3, r3
    4db2:	18e4      	adds	r4, r4, r3
    4db4:	0013      	movs	r3, r2
    4db6:	01e2      	lsls	r2, r4, #7
    4db8:	d504      	bpl.n	4dc4 <__aeabi_dmul+0x3b4>
    4dba:	2080      	movs	r0, #128	; 0x80
    4dbc:	4a51      	ldr	r2, [pc, #324]	; (4f04 <__aeabi_dmul+0x4f4>)
    4dbe:	00c0      	lsls	r0, r0, #3
    4dc0:	4014      	ands	r4, r2
    4dc2:	4460      	add	r0, ip
    4dc4:	4a50      	ldr	r2, [pc, #320]	; (4f08 <__aeabi_dmul+0x4f8>)
    4dc6:	4290      	cmp	r0, r2
    4dc8:	dd00      	ble.n	4dcc <__aeabi_dmul+0x3bc>
    4dca:	e6e3      	b.n	4b94 <__aeabi_dmul+0x184>
    4dcc:	2501      	movs	r5, #1
    4dce:	08db      	lsrs	r3, r3, #3
    4dd0:	0762      	lsls	r2, r4, #29
    4dd2:	431a      	orrs	r2, r3
    4dd4:	0264      	lsls	r4, r4, #9
    4dd6:	9b01      	ldr	r3, [sp, #4]
    4dd8:	4691      	mov	r9, r2
    4dda:	0b22      	lsrs	r2, r4, #12
    4ddc:	0544      	lsls	r4, r0, #21
    4dde:	0d64      	lsrs	r4, r4, #21
    4de0:	401d      	ands	r5, r3
    4de2:	e67c      	b.n	4ade <__aeabi_dmul+0xce>
    4de4:	2280      	movs	r2, #128	; 0x80
    4de6:	4659      	mov	r1, fp
    4de8:	0312      	lsls	r2, r2, #12
    4dea:	4211      	tst	r1, r2
    4dec:	d008      	beq.n	4e00 <__aeabi_dmul+0x3f0>
    4dee:	4214      	tst	r4, r2
    4df0:	d106      	bne.n	4e00 <__aeabi_dmul+0x3f0>
    4df2:	4322      	orrs	r2, r4
    4df4:	0312      	lsls	r2, r2, #12
    4df6:	0b12      	lsrs	r2, r2, #12
    4df8:	4645      	mov	r5, r8
    4dfa:	4699      	mov	r9, r3
    4dfc:	4c43      	ldr	r4, [pc, #268]	; (4f0c <__aeabi_dmul+0x4fc>)
    4dfe:	e66e      	b.n	4ade <__aeabi_dmul+0xce>
    4e00:	465b      	mov	r3, fp
    4e02:	431a      	orrs	r2, r3
    4e04:	0312      	lsls	r2, r2, #12
    4e06:	0b12      	lsrs	r2, r2, #12
    4e08:	4c40      	ldr	r4, [pc, #256]	; (4f0c <__aeabi_dmul+0x4fc>)
    4e0a:	e668      	b.n	4ade <__aeabi_dmul+0xce>
    4e0c:	0003      	movs	r3, r0
    4e0e:	4654      	mov	r4, sl
    4e10:	3b28      	subs	r3, #40	; 0x28
    4e12:	409c      	lsls	r4, r3
    4e14:	2300      	movs	r3, #0
    4e16:	e6b9      	b.n	4b8c <__aeabi_dmul+0x17c>
    4e18:	f000 fcd8 	bl	57cc <__clzsi2>
    4e1c:	3020      	adds	r0, #32
    4e1e:	e6a6      	b.n	4b6e <__aeabi_dmul+0x15e>
    4e20:	0003      	movs	r3, r0
    4e22:	3b28      	subs	r3, #40	; 0x28
    4e24:	409f      	lsls	r7, r3
    4e26:	2300      	movs	r3, #0
    4e28:	46bb      	mov	fp, r7
    4e2a:	4699      	mov	r9, r3
    4e2c:	e68a      	b.n	4b44 <__aeabi_dmul+0x134>
    4e2e:	f000 fccd 	bl	57cc <__clzsi2>
    4e32:	3020      	adds	r0, #32
    4e34:	e674      	b.n	4b20 <__aeabi_dmul+0x110>
    4e36:	46b4      	mov	ip, r6
    4e38:	e7ad      	b.n	4d96 <__aeabi_dmul+0x386>
    4e3a:	2501      	movs	r5, #1
    4e3c:	1a2a      	subs	r2, r5, r0
    4e3e:	2a38      	cmp	r2, #56	; 0x38
    4e40:	dd06      	ble.n	4e50 <__aeabi_dmul+0x440>
    4e42:	9b01      	ldr	r3, [sp, #4]
    4e44:	2400      	movs	r4, #0
    4e46:	401d      	ands	r5, r3
    4e48:	2300      	movs	r3, #0
    4e4a:	2200      	movs	r2, #0
    4e4c:	4699      	mov	r9, r3
    4e4e:	e646      	b.n	4ade <__aeabi_dmul+0xce>
    4e50:	2a1f      	cmp	r2, #31
    4e52:	dc21      	bgt.n	4e98 <__aeabi_dmul+0x488>
    4e54:	2520      	movs	r5, #32
    4e56:	0020      	movs	r0, r4
    4e58:	1aad      	subs	r5, r5, r2
    4e5a:	001e      	movs	r6, r3
    4e5c:	40ab      	lsls	r3, r5
    4e5e:	40a8      	lsls	r0, r5
    4e60:	40d6      	lsrs	r6, r2
    4e62:	1e5d      	subs	r5, r3, #1
    4e64:	41ab      	sbcs	r3, r5
    4e66:	4330      	orrs	r0, r6
    4e68:	4318      	orrs	r0, r3
    4e6a:	40d4      	lsrs	r4, r2
    4e6c:	0743      	lsls	r3, r0, #29
    4e6e:	d009      	beq.n	4e84 <__aeabi_dmul+0x474>
    4e70:	230f      	movs	r3, #15
    4e72:	4003      	ands	r3, r0
    4e74:	2b04      	cmp	r3, #4
    4e76:	d005      	beq.n	4e84 <__aeabi_dmul+0x474>
    4e78:	0003      	movs	r3, r0
    4e7a:	1d18      	adds	r0, r3, #4
    4e7c:	4298      	cmp	r0, r3
    4e7e:	419b      	sbcs	r3, r3
    4e80:	425b      	negs	r3, r3
    4e82:	18e4      	adds	r4, r4, r3
    4e84:	0223      	lsls	r3, r4, #8
    4e86:	d521      	bpl.n	4ecc <__aeabi_dmul+0x4bc>
    4e88:	2501      	movs	r5, #1
    4e8a:	9b01      	ldr	r3, [sp, #4]
    4e8c:	2401      	movs	r4, #1
    4e8e:	401d      	ands	r5, r3
    4e90:	2300      	movs	r3, #0
    4e92:	2200      	movs	r2, #0
    4e94:	4699      	mov	r9, r3
    4e96:	e622      	b.n	4ade <__aeabi_dmul+0xce>
    4e98:	251f      	movs	r5, #31
    4e9a:	0021      	movs	r1, r4
    4e9c:	426d      	negs	r5, r5
    4e9e:	1a28      	subs	r0, r5, r0
    4ea0:	40c1      	lsrs	r1, r0
    4ea2:	0008      	movs	r0, r1
    4ea4:	2a20      	cmp	r2, #32
    4ea6:	d01d      	beq.n	4ee4 <__aeabi_dmul+0x4d4>
    4ea8:	355f      	adds	r5, #95	; 0x5f
    4eaa:	1aaa      	subs	r2, r5, r2
    4eac:	4094      	lsls	r4, r2
    4eae:	4323      	orrs	r3, r4
    4eb0:	1e5c      	subs	r4, r3, #1
    4eb2:	41a3      	sbcs	r3, r4
    4eb4:	2507      	movs	r5, #7
    4eb6:	4303      	orrs	r3, r0
    4eb8:	401d      	ands	r5, r3
    4eba:	2200      	movs	r2, #0
    4ebc:	2d00      	cmp	r5, #0
    4ebe:	d009      	beq.n	4ed4 <__aeabi_dmul+0x4c4>
    4ec0:	220f      	movs	r2, #15
    4ec2:	2400      	movs	r4, #0
    4ec4:	401a      	ands	r2, r3
    4ec6:	0018      	movs	r0, r3
    4ec8:	2a04      	cmp	r2, #4
    4eca:	d1d6      	bne.n	4e7a <__aeabi_dmul+0x46a>
    4ecc:	0003      	movs	r3, r0
    4ece:	0765      	lsls	r5, r4, #29
    4ed0:	0264      	lsls	r4, r4, #9
    4ed2:	0b22      	lsrs	r2, r4, #12
    4ed4:	08db      	lsrs	r3, r3, #3
    4ed6:	432b      	orrs	r3, r5
    4ed8:	2501      	movs	r5, #1
    4eda:	4699      	mov	r9, r3
    4edc:	9b01      	ldr	r3, [sp, #4]
    4ede:	2400      	movs	r4, #0
    4ee0:	401d      	ands	r5, r3
    4ee2:	e5fc      	b.n	4ade <__aeabi_dmul+0xce>
    4ee4:	2400      	movs	r4, #0
    4ee6:	e7e2      	b.n	4eae <__aeabi_dmul+0x49e>
    4ee8:	2280      	movs	r2, #128	; 0x80
    4eea:	2501      	movs	r5, #1
    4eec:	0312      	lsls	r2, r2, #12
    4eee:	4322      	orrs	r2, r4
    4ef0:	9901      	ldr	r1, [sp, #4]
    4ef2:	0312      	lsls	r2, r2, #12
    4ef4:	0b12      	lsrs	r2, r2, #12
    4ef6:	400d      	ands	r5, r1
    4ef8:	4699      	mov	r9, r3
    4efa:	4c04      	ldr	r4, [pc, #16]	; (4f0c <__aeabi_dmul+0x4fc>)
    4efc:	e5ef      	b.n	4ade <__aeabi_dmul+0xce>
    4efe:	46c0      	nop			; (mov r8, r8)
    4f00:	000003ff 	.word	0x000003ff
    4f04:	feffffff 	.word	0xfeffffff
    4f08:	000007fe 	.word	0x000007fe
    4f0c:	000007ff 	.word	0x000007ff

00004f10 <__aeabi_dsub>:
    4f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f12:	4646      	mov	r6, r8
    4f14:	46d6      	mov	lr, sl
    4f16:	464f      	mov	r7, r9
    4f18:	030c      	lsls	r4, r1, #12
    4f1a:	b5c0      	push	{r6, r7, lr}
    4f1c:	0fcd      	lsrs	r5, r1, #31
    4f1e:	004e      	lsls	r6, r1, #1
    4f20:	0a61      	lsrs	r1, r4, #9
    4f22:	0f44      	lsrs	r4, r0, #29
    4f24:	430c      	orrs	r4, r1
    4f26:	00c1      	lsls	r1, r0, #3
    4f28:	0058      	lsls	r0, r3, #1
    4f2a:	0d40      	lsrs	r0, r0, #21
    4f2c:	4684      	mov	ip, r0
    4f2e:	468a      	mov	sl, r1
    4f30:	000f      	movs	r7, r1
    4f32:	0319      	lsls	r1, r3, #12
    4f34:	0f50      	lsrs	r0, r2, #29
    4f36:	0a49      	lsrs	r1, r1, #9
    4f38:	4301      	orrs	r1, r0
    4f3a:	48c6      	ldr	r0, [pc, #792]	; (5254 <__aeabi_dsub+0x344>)
    4f3c:	0d76      	lsrs	r6, r6, #21
    4f3e:	46a8      	mov	r8, r5
    4f40:	0fdb      	lsrs	r3, r3, #31
    4f42:	00d2      	lsls	r2, r2, #3
    4f44:	4584      	cmp	ip, r0
    4f46:	d100      	bne.n	4f4a <__aeabi_dsub+0x3a>
    4f48:	e0d8      	b.n	50fc <__aeabi_dsub+0x1ec>
    4f4a:	2001      	movs	r0, #1
    4f4c:	4043      	eors	r3, r0
    4f4e:	42ab      	cmp	r3, r5
    4f50:	d100      	bne.n	4f54 <__aeabi_dsub+0x44>
    4f52:	e0a6      	b.n	50a2 <__aeabi_dsub+0x192>
    4f54:	4660      	mov	r0, ip
    4f56:	1a35      	subs	r5, r6, r0
    4f58:	2d00      	cmp	r5, #0
    4f5a:	dc00      	bgt.n	4f5e <__aeabi_dsub+0x4e>
    4f5c:	e105      	b.n	516a <__aeabi_dsub+0x25a>
    4f5e:	2800      	cmp	r0, #0
    4f60:	d110      	bne.n	4f84 <__aeabi_dsub+0x74>
    4f62:	000b      	movs	r3, r1
    4f64:	4313      	orrs	r3, r2
    4f66:	d100      	bne.n	4f6a <__aeabi_dsub+0x5a>
    4f68:	e0d7      	b.n	511a <__aeabi_dsub+0x20a>
    4f6a:	1e6b      	subs	r3, r5, #1
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d000      	beq.n	4f72 <__aeabi_dsub+0x62>
    4f70:	e14b      	b.n	520a <__aeabi_dsub+0x2fa>
    4f72:	4653      	mov	r3, sl
    4f74:	1a9f      	subs	r7, r3, r2
    4f76:	45ba      	cmp	sl, r7
    4f78:	4180      	sbcs	r0, r0
    4f7a:	1a64      	subs	r4, r4, r1
    4f7c:	4240      	negs	r0, r0
    4f7e:	1a24      	subs	r4, r4, r0
    4f80:	2601      	movs	r6, #1
    4f82:	e01e      	b.n	4fc2 <__aeabi_dsub+0xb2>
    4f84:	4bb3      	ldr	r3, [pc, #716]	; (5254 <__aeabi_dsub+0x344>)
    4f86:	429e      	cmp	r6, r3
    4f88:	d048      	beq.n	501c <__aeabi_dsub+0x10c>
    4f8a:	2380      	movs	r3, #128	; 0x80
    4f8c:	041b      	lsls	r3, r3, #16
    4f8e:	4319      	orrs	r1, r3
    4f90:	2d38      	cmp	r5, #56	; 0x38
    4f92:	dd00      	ble.n	4f96 <__aeabi_dsub+0x86>
    4f94:	e119      	b.n	51ca <__aeabi_dsub+0x2ba>
    4f96:	2d1f      	cmp	r5, #31
    4f98:	dd00      	ble.n	4f9c <__aeabi_dsub+0x8c>
    4f9a:	e14c      	b.n	5236 <__aeabi_dsub+0x326>
    4f9c:	2320      	movs	r3, #32
    4f9e:	000f      	movs	r7, r1
    4fa0:	1b5b      	subs	r3, r3, r5
    4fa2:	0010      	movs	r0, r2
    4fa4:	409a      	lsls	r2, r3
    4fa6:	409f      	lsls	r7, r3
    4fa8:	40e8      	lsrs	r0, r5
    4faa:	1e53      	subs	r3, r2, #1
    4fac:	419a      	sbcs	r2, r3
    4fae:	40e9      	lsrs	r1, r5
    4fb0:	4307      	orrs	r7, r0
    4fb2:	4317      	orrs	r7, r2
    4fb4:	4653      	mov	r3, sl
    4fb6:	1bdf      	subs	r7, r3, r7
    4fb8:	1a61      	subs	r1, r4, r1
    4fba:	45ba      	cmp	sl, r7
    4fbc:	41a4      	sbcs	r4, r4
    4fbe:	4264      	negs	r4, r4
    4fc0:	1b0c      	subs	r4, r1, r4
    4fc2:	0223      	lsls	r3, r4, #8
    4fc4:	d400      	bmi.n	4fc8 <__aeabi_dsub+0xb8>
    4fc6:	e0c5      	b.n	5154 <__aeabi_dsub+0x244>
    4fc8:	0264      	lsls	r4, r4, #9
    4fca:	0a65      	lsrs	r5, r4, #9
    4fcc:	2d00      	cmp	r5, #0
    4fce:	d100      	bne.n	4fd2 <__aeabi_dsub+0xc2>
    4fd0:	e0f6      	b.n	51c0 <__aeabi_dsub+0x2b0>
    4fd2:	0028      	movs	r0, r5
    4fd4:	f000 fbfa 	bl	57cc <__clzsi2>
    4fd8:	0003      	movs	r3, r0
    4fda:	3b08      	subs	r3, #8
    4fdc:	2b1f      	cmp	r3, #31
    4fde:	dd00      	ble.n	4fe2 <__aeabi_dsub+0xd2>
    4fe0:	e0e9      	b.n	51b6 <__aeabi_dsub+0x2a6>
    4fe2:	2220      	movs	r2, #32
    4fe4:	003c      	movs	r4, r7
    4fe6:	1ad2      	subs	r2, r2, r3
    4fe8:	409d      	lsls	r5, r3
    4fea:	40d4      	lsrs	r4, r2
    4fec:	409f      	lsls	r7, r3
    4fee:	4325      	orrs	r5, r4
    4ff0:	429e      	cmp	r6, r3
    4ff2:	dd00      	ble.n	4ff6 <__aeabi_dsub+0xe6>
    4ff4:	e0db      	b.n	51ae <__aeabi_dsub+0x29e>
    4ff6:	1b9e      	subs	r6, r3, r6
    4ff8:	1c73      	adds	r3, r6, #1
    4ffa:	2b1f      	cmp	r3, #31
    4ffc:	dd00      	ble.n	5000 <__aeabi_dsub+0xf0>
    4ffe:	e10a      	b.n	5216 <__aeabi_dsub+0x306>
    5000:	2220      	movs	r2, #32
    5002:	0038      	movs	r0, r7
    5004:	1ad2      	subs	r2, r2, r3
    5006:	0029      	movs	r1, r5
    5008:	4097      	lsls	r7, r2
    500a:	002c      	movs	r4, r5
    500c:	4091      	lsls	r1, r2
    500e:	40d8      	lsrs	r0, r3
    5010:	1e7a      	subs	r2, r7, #1
    5012:	4197      	sbcs	r7, r2
    5014:	40dc      	lsrs	r4, r3
    5016:	2600      	movs	r6, #0
    5018:	4301      	orrs	r1, r0
    501a:	430f      	orrs	r7, r1
    501c:	077b      	lsls	r3, r7, #29
    501e:	d009      	beq.n	5034 <__aeabi_dsub+0x124>
    5020:	230f      	movs	r3, #15
    5022:	403b      	ands	r3, r7
    5024:	2b04      	cmp	r3, #4
    5026:	d005      	beq.n	5034 <__aeabi_dsub+0x124>
    5028:	1d3b      	adds	r3, r7, #4
    502a:	42bb      	cmp	r3, r7
    502c:	41bf      	sbcs	r7, r7
    502e:	427f      	negs	r7, r7
    5030:	19e4      	adds	r4, r4, r7
    5032:	001f      	movs	r7, r3
    5034:	0223      	lsls	r3, r4, #8
    5036:	d525      	bpl.n	5084 <__aeabi_dsub+0x174>
    5038:	4b86      	ldr	r3, [pc, #536]	; (5254 <__aeabi_dsub+0x344>)
    503a:	3601      	adds	r6, #1
    503c:	429e      	cmp	r6, r3
    503e:	d100      	bne.n	5042 <__aeabi_dsub+0x132>
    5040:	e0af      	b.n	51a2 <__aeabi_dsub+0x292>
    5042:	4b85      	ldr	r3, [pc, #532]	; (5258 <__aeabi_dsub+0x348>)
    5044:	2501      	movs	r5, #1
    5046:	401c      	ands	r4, r3
    5048:	4643      	mov	r3, r8
    504a:	0762      	lsls	r2, r4, #29
    504c:	08ff      	lsrs	r7, r7, #3
    504e:	0264      	lsls	r4, r4, #9
    5050:	0576      	lsls	r6, r6, #21
    5052:	4317      	orrs	r7, r2
    5054:	0b24      	lsrs	r4, r4, #12
    5056:	0d76      	lsrs	r6, r6, #21
    5058:	401d      	ands	r5, r3
    505a:	2100      	movs	r1, #0
    505c:	0324      	lsls	r4, r4, #12
    505e:	0b23      	lsrs	r3, r4, #12
    5060:	0d0c      	lsrs	r4, r1, #20
    5062:	4a7e      	ldr	r2, [pc, #504]	; (525c <__aeabi_dsub+0x34c>)
    5064:	0524      	lsls	r4, r4, #20
    5066:	431c      	orrs	r4, r3
    5068:	4014      	ands	r4, r2
    506a:	0533      	lsls	r3, r6, #20
    506c:	4323      	orrs	r3, r4
    506e:	005b      	lsls	r3, r3, #1
    5070:	07ed      	lsls	r5, r5, #31
    5072:	085b      	lsrs	r3, r3, #1
    5074:	432b      	orrs	r3, r5
    5076:	0038      	movs	r0, r7
    5078:	0019      	movs	r1, r3
    507a:	bc1c      	pop	{r2, r3, r4}
    507c:	4690      	mov	r8, r2
    507e:	4699      	mov	r9, r3
    5080:	46a2      	mov	sl, r4
    5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5084:	2501      	movs	r5, #1
    5086:	4643      	mov	r3, r8
    5088:	0762      	lsls	r2, r4, #29
    508a:	08ff      	lsrs	r7, r7, #3
    508c:	4317      	orrs	r7, r2
    508e:	08e4      	lsrs	r4, r4, #3
    5090:	401d      	ands	r5, r3
    5092:	4b70      	ldr	r3, [pc, #448]	; (5254 <__aeabi_dsub+0x344>)
    5094:	429e      	cmp	r6, r3
    5096:	d036      	beq.n	5106 <__aeabi_dsub+0x1f6>
    5098:	0324      	lsls	r4, r4, #12
    509a:	0576      	lsls	r6, r6, #21
    509c:	0b24      	lsrs	r4, r4, #12
    509e:	0d76      	lsrs	r6, r6, #21
    50a0:	e7db      	b.n	505a <__aeabi_dsub+0x14a>
    50a2:	4663      	mov	r3, ip
    50a4:	1af3      	subs	r3, r6, r3
    50a6:	2b00      	cmp	r3, #0
    50a8:	dc00      	bgt.n	50ac <__aeabi_dsub+0x19c>
    50aa:	e094      	b.n	51d6 <__aeabi_dsub+0x2c6>
    50ac:	4660      	mov	r0, ip
    50ae:	2800      	cmp	r0, #0
    50b0:	d035      	beq.n	511e <__aeabi_dsub+0x20e>
    50b2:	4868      	ldr	r0, [pc, #416]	; (5254 <__aeabi_dsub+0x344>)
    50b4:	4286      	cmp	r6, r0
    50b6:	d0b1      	beq.n	501c <__aeabi_dsub+0x10c>
    50b8:	2780      	movs	r7, #128	; 0x80
    50ba:	043f      	lsls	r7, r7, #16
    50bc:	4339      	orrs	r1, r7
    50be:	2b38      	cmp	r3, #56	; 0x38
    50c0:	dc00      	bgt.n	50c4 <__aeabi_dsub+0x1b4>
    50c2:	e0fd      	b.n	52c0 <__aeabi_dsub+0x3b0>
    50c4:	430a      	orrs	r2, r1
    50c6:	0017      	movs	r7, r2
    50c8:	2100      	movs	r1, #0
    50ca:	1e7a      	subs	r2, r7, #1
    50cc:	4197      	sbcs	r7, r2
    50ce:	4457      	add	r7, sl
    50d0:	4557      	cmp	r7, sl
    50d2:	4180      	sbcs	r0, r0
    50d4:	1909      	adds	r1, r1, r4
    50d6:	4244      	negs	r4, r0
    50d8:	190c      	adds	r4, r1, r4
    50da:	0223      	lsls	r3, r4, #8
    50dc:	d53a      	bpl.n	5154 <__aeabi_dsub+0x244>
    50de:	4b5d      	ldr	r3, [pc, #372]	; (5254 <__aeabi_dsub+0x344>)
    50e0:	3601      	adds	r6, #1
    50e2:	429e      	cmp	r6, r3
    50e4:	d100      	bne.n	50e8 <__aeabi_dsub+0x1d8>
    50e6:	e14b      	b.n	5380 <__aeabi_dsub+0x470>
    50e8:	2201      	movs	r2, #1
    50ea:	4b5b      	ldr	r3, [pc, #364]	; (5258 <__aeabi_dsub+0x348>)
    50ec:	401c      	ands	r4, r3
    50ee:	087b      	lsrs	r3, r7, #1
    50f0:	4017      	ands	r7, r2
    50f2:	431f      	orrs	r7, r3
    50f4:	07e2      	lsls	r2, r4, #31
    50f6:	4317      	orrs	r7, r2
    50f8:	0864      	lsrs	r4, r4, #1
    50fa:	e78f      	b.n	501c <__aeabi_dsub+0x10c>
    50fc:	0008      	movs	r0, r1
    50fe:	4310      	orrs	r0, r2
    5100:	d000      	beq.n	5104 <__aeabi_dsub+0x1f4>
    5102:	e724      	b.n	4f4e <__aeabi_dsub+0x3e>
    5104:	e721      	b.n	4f4a <__aeabi_dsub+0x3a>
    5106:	0023      	movs	r3, r4
    5108:	433b      	orrs	r3, r7
    510a:	d100      	bne.n	510e <__aeabi_dsub+0x1fe>
    510c:	e1b9      	b.n	5482 <__aeabi_dsub+0x572>
    510e:	2280      	movs	r2, #128	; 0x80
    5110:	0312      	lsls	r2, r2, #12
    5112:	4314      	orrs	r4, r2
    5114:	0324      	lsls	r4, r4, #12
    5116:	0b24      	lsrs	r4, r4, #12
    5118:	e79f      	b.n	505a <__aeabi_dsub+0x14a>
    511a:	002e      	movs	r6, r5
    511c:	e77e      	b.n	501c <__aeabi_dsub+0x10c>
    511e:	0008      	movs	r0, r1
    5120:	4310      	orrs	r0, r2
    5122:	d100      	bne.n	5126 <__aeabi_dsub+0x216>
    5124:	e0ca      	b.n	52bc <__aeabi_dsub+0x3ac>
    5126:	1e58      	subs	r0, r3, #1
    5128:	4684      	mov	ip, r0
    512a:	2800      	cmp	r0, #0
    512c:	d000      	beq.n	5130 <__aeabi_dsub+0x220>
    512e:	e0e7      	b.n	5300 <__aeabi_dsub+0x3f0>
    5130:	4452      	add	r2, sl
    5132:	4552      	cmp	r2, sl
    5134:	4180      	sbcs	r0, r0
    5136:	1864      	adds	r4, r4, r1
    5138:	4240      	negs	r0, r0
    513a:	1824      	adds	r4, r4, r0
    513c:	0017      	movs	r7, r2
    513e:	2601      	movs	r6, #1
    5140:	0223      	lsls	r3, r4, #8
    5142:	d507      	bpl.n	5154 <__aeabi_dsub+0x244>
    5144:	2602      	movs	r6, #2
    5146:	e7cf      	b.n	50e8 <__aeabi_dsub+0x1d8>
    5148:	4664      	mov	r4, ip
    514a:	432c      	orrs	r4, r5
    514c:	d100      	bne.n	5150 <__aeabi_dsub+0x240>
    514e:	e1b3      	b.n	54b8 <__aeabi_dsub+0x5a8>
    5150:	002c      	movs	r4, r5
    5152:	4667      	mov	r7, ip
    5154:	077b      	lsls	r3, r7, #29
    5156:	d000      	beq.n	515a <__aeabi_dsub+0x24a>
    5158:	e762      	b.n	5020 <__aeabi_dsub+0x110>
    515a:	0763      	lsls	r3, r4, #29
    515c:	08ff      	lsrs	r7, r7, #3
    515e:	431f      	orrs	r7, r3
    5160:	2501      	movs	r5, #1
    5162:	4643      	mov	r3, r8
    5164:	08e4      	lsrs	r4, r4, #3
    5166:	401d      	ands	r5, r3
    5168:	e793      	b.n	5092 <__aeabi_dsub+0x182>
    516a:	2d00      	cmp	r5, #0
    516c:	d178      	bne.n	5260 <__aeabi_dsub+0x350>
    516e:	1c75      	adds	r5, r6, #1
    5170:	056d      	lsls	r5, r5, #21
    5172:	0d6d      	lsrs	r5, r5, #21
    5174:	2d01      	cmp	r5, #1
    5176:	dc00      	bgt.n	517a <__aeabi_dsub+0x26a>
    5178:	e0f2      	b.n	5360 <__aeabi_dsub+0x450>
    517a:	4650      	mov	r0, sl
    517c:	1a80      	subs	r0, r0, r2
    517e:	4582      	cmp	sl, r0
    5180:	41bf      	sbcs	r7, r7
    5182:	1a65      	subs	r5, r4, r1
    5184:	427f      	negs	r7, r7
    5186:	1bed      	subs	r5, r5, r7
    5188:	4684      	mov	ip, r0
    518a:	0228      	lsls	r0, r5, #8
    518c:	d400      	bmi.n	5190 <__aeabi_dsub+0x280>
    518e:	e08c      	b.n	52aa <__aeabi_dsub+0x39a>
    5190:	4650      	mov	r0, sl
    5192:	1a17      	subs	r7, r2, r0
    5194:	42ba      	cmp	r2, r7
    5196:	4192      	sbcs	r2, r2
    5198:	1b0c      	subs	r4, r1, r4
    519a:	4255      	negs	r5, r2
    519c:	1b65      	subs	r5, r4, r5
    519e:	4698      	mov	r8, r3
    51a0:	e714      	b.n	4fcc <__aeabi_dsub+0xbc>
    51a2:	2501      	movs	r5, #1
    51a4:	4643      	mov	r3, r8
    51a6:	2400      	movs	r4, #0
    51a8:	401d      	ands	r5, r3
    51aa:	2700      	movs	r7, #0
    51ac:	e755      	b.n	505a <__aeabi_dsub+0x14a>
    51ae:	4c2a      	ldr	r4, [pc, #168]	; (5258 <__aeabi_dsub+0x348>)
    51b0:	1af6      	subs	r6, r6, r3
    51b2:	402c      	ands	r4, r5
    51b4:	e732      	b.n	501c <__aeabi_dsub+0x10c>
    51b6:	003d      	movs	r5, r7
    51b8:	3828      	subs	r0, #40	; 0x28
    51ba:	4085      	lsls	r5, r0
    51bc:	2700      	movs	r7, #0
    51be:	e717      	b.n	4ff0 <__aeabi_dsub+0xe0>
    51c0:	0038      	movs	r0, r7
    51c2:	f000 fb03 	bl	57cc <__clzsi2>
    51c6:	3020      	adds	r0, #32
    51c8:	e706      	b.n	4fd8 <__aeabi_dsub+0xc8>
    51ca:	430a      	orrs	r2, r1
    51cc:	0017      	movs	r7, r2
    51ce:	2100      	movs	r1, #0
    51d0:	1e7a      	subs	r2, r7, #1
    51d2:	4197      	sbcs	r7, r2
    51d4:	e6ee      	b.n	4fb4 <__aeabi_dsub+0xa4>
    51d6:	2b00      	cmp	r3, #0
    51d8:	d000      	beq.n	51dc <__aeabi_dsub+0x2cc>
    51da:	e0e5      	b.n	53a8 <__aeabi_dsub+0x498>
    51dc:	1c73      	adds	r3, r6, #1
    51de:	469c      	mov	ip, r3
    51e0:	055b      	lsls	r3, r3, #21
    51e2:	0d5b      	lsrs	r3, r3, #21
    51e4:	2b01      	cmp	r3, #1
    51e6:	dc00      	bgt.n	51ea <__aeabi_dsub+0x2da>
    51e8:	e09f      	b.n	532a <__aeabi_dsub+0x41a>
    51ea:	4b1a      	ldr	r3, [pc, #104]	; (5254 <__aeabi_dsub+0x344>)
    51ec:	459c      	cmp	ip, r3
    51ee:	d100      	bne.n	51f2 <__aeabi_dsub+0x2e2>
    51f0:	e0c5      	b.n	537e <__aeabi_dsub+0x46e>
    51f2:	4452      	add	r2, sl
    51f4:	4552      	cmp	r2, sl
    51f6:	4180      	sbcs	r0, r0
    51f8:	1864      	adds	r4, r4, r1
    51fa:	4240      	negs	r0, r0
    51fc:	1824      	adds	r4, r4, r0
    51fe:	07e7      	lsls	r7, r4, #31
    5200:	0852      	lsrs	r2, r2, #1
    5202:	4317      	orrs	r7, r2
    5204:	0864      	lsrs	r4, r4, #1
    5206:	4666      	mov	r6, ip
    5208:	e708      	b.n	501c <__aeabi_dsub+0x10c>
    520a:	4812      	ldr	r0, [pc, #72]	; (5254 <__aeabi_dsub+0x344>)
    520c:	4285      	cmp	r5, r0
    520e:	d100      	bne.n	5212 <__aeabi_dsub+0x302>
    5210:	e085      	b.n	531e <__aeabi_dsub+0x40e>
    5212:	001d      	movs	r5, r3
    5214:	e6bc      	b.n	4f90 <__aeabi_dsub+0x80>
    5216:	0029      	movs	r1, r5
    5218:	3e1f      	subs	r6, #31
    521a:	40f1      	lsrs	r1, r6
    521c:	2b20      	cmp	r3, #32
    521e:	d100      	bne.n	5222 <__aeabi_dsub+0x312>
    5220:	e07f      	b.n	5322 <__aeabi_dsub+0x412>
    5222:	2240      	movs	r2, #64	; 0x40
    5224:	1ad3      	subs	r3, r2, r3
    5226:	409d      	lsls	r5, r3
    5228:	432f      	orrs	r7, r5
    522a:	1e7d      	subs	r5, r7, #1
    522c:	41af      	sbcs	r7, r5
    522e:	2400      	movs	r4, #0
    5230:	430f      	orrs	r7, r1
    5232:	2600      	movs	r6, #0
    5234:	e78e      	b.n	5154 <__aeabi_dsub+0x244>
    5236:	002b      	movs	r3, r5
    5238:	000f      	movs	r7, r1
    523a:	3b20      	subs	r3, #32
    523c:	40df      	lsrs	r7, r3
    523e:	2d20      	cmp	r5, #32
    5240:	d071      	beq.n	5326 <__aeabi_dsub+0x416>
    5242:	2340      	movs	r3, #64	; 0x40
    5244:	1b5d      	subs	r5, r3, r5
    5246:	40a9      	lsls	r1, r5
    5248:	430a      	orrs	r2, r1
    524a:	1e51      	subs	r1, r2, #1
    524c:	418a      	sbcs	r2, r1
    524e:	2100      	movs	r1, #0
    5250:	4317      	orrs	r7, r2
    5252:	e6af      	b.n	4fb4 <__aeabi_dsub+0xa4>
    5254:	000007ff 	.word	0x000007ff
    5258:	ff7fffff 	.word	0xff7fffff
    525c:	800fffff 	.word	0x800fffff
    5260:	2e00      	cmp	r6, #0
    5262:	d03e      	beq.n	52e2 <__aeabi_dsub+0x3d2>
    5264:	4eb3      	ldr	r6, [pc, #716]	; (5534 <__aeabi_dsub+0x624>)
    5266:	45b4      	cmp	ip, r6
    5268:	d045      	beq.n	52f6 <__aeabi_dsub+0x3e6>
    526a:	2680      	movs	r6, #128	; 0x80
    526c:	0436      	lsls	r6, r6, #16
    526e:	426d      	negs	r5, r5
    5270:	4334      	orrs	r4, r6
    5272:	2d38      	cmp	r5, #56	; 0x38
    5274:	dd00      	ble.n	5278 <__aeabi_dsub+0x368>
    5276:	e0a8      	b.n	53ca <__aeabi_dsub+0x4ba>
    5278:	2d1f      	cmp	r5, #31
    527a:	dd00      	ble.n	527e <__aeabi_dsub+0x36e>
    527c:	e11f      	b.n	54be <__aeabi_dsub+0x5ae>
    527e:	2620      	movs	r6, #32
    5280:	0027      	movs	r7, r4
    5282:	4650      	mov	r0, sl
    5284:	1b76      	subs	r6, r6, r5
    5286:	40b7      	lsls	r7, r6
    5288:	40e8      	lsrs	r0, r5
    528a:	4307      	orrs	r7, r0
    528c:	4650      	mov	r0, sl
    528e:	40b0      	lsls	r0, r6
    5290:	1e46      	subs	r6, r0, #1
    5292:	41b0      	sbcs	r0, r6
    5294:	40ec      	lsrs	r4, r5
    5296:	4338      	orrs	r0, r7
    5298:	1a17      	subs	r7, r2, r0
    529a:	42ba      	cmp	r2, r7
    529c:	4192      	sbcs	r2, r2
    529e:	1b0c      	subs	r4, r1, r4
    52a0:	4252      	negs	r2, r2
    52a2:	1aa4      	subs	r4, r4, r2
    52a4:	4666      	mov	r6, ip
    52a6:	4698      	mov	r8, r3
    52a8:	e68b      	b.n	4fc2 <__aeabi_dsub+0xb2>
    52aa:	4664      	mov	r4, ip
    52ac:	4667      	mov	r7, ip
    52ae:	432c      	orrs	r4, r5
    52b0:	d000      	beq.n	52b4 <__aeabi_dsub+0x3a4>
    52b2:	e68b      	b.n	4fcc <__aeabi_dsub+0xbc>
    52b4:	2500      	movs	r5, #0
    52b6:	2600      	movs	r6, #0
    52b8:	2700      	movs	r7, #0
    52ba:	e6ea      	b.n	5092 <__aeabi_dsub+0x182>
    52bc:	001e      	movs	r6, r3
    52be:	e6ad      	b.n	501c <__aeabi_dsub+0x10c>
    52c0:	2b1f      	cmp	r3, #31
    52c2:	dc60      	bgt.n	5386 <__aeabi_dsub+0x476>
    52c4:	2720      	movs	r7, #32
    52c6:	1af8      	subs	r0, r7, r3
    52c8:	000f      	movs	r7, r1
    52ca:	4684      	mov	ip, r0
    52cc:	4087      	lsls	r7, r0
    52ce:	0010      	movs	r0, r2
    52d0:	40d8      	lsrs	r0, r3
    52d2:	4307      	orrs	r7, r0
    52d4:	4660      	mov	r0, ip
    52d6:	4082      	lsls	r2, r0
    52d8:	1e50      	subs	r0, r2, #1
    52da:	4182      	sbcs	r2, r0
    52dc:	40d9      	lsrs	r1, r3
    52de:	4317      	orrs	r7, r2
    52e0:	e6f5      	b.n	50ce <__aeabi_dsub+0x1be>
    52e2:	0026      	movs	r6, r4
    52e4:	4650      	mov	r0, sl
    52e6:	4306      	orrs	r6, r0
    52e8:	d005      	beq.n	52f6 <__aeabi_dsub+0x3e6>
    52ea:	43ed      	mvns	r5, r5
    52ec:	2d00      	cmp	r5, #0
    52ee:	d0d3      	beq.n	5298 <__aeabi_dsub+0x388>
    52f0:	4e90      	ldr	r6, [pc, #576]	; (5534 <__aeabi_dsub+0x624>)
    52f2:	45b4      	cmp	ip, r6
    52f4:	d1bd      	bne.n	5272 <__aeabi_dsub+0x362>
    52f6:	000c      	movs	r4, r1
    52f8:	0017      	movs	r7, r2
    52fa:	4666      	mov	r6, ip
    52fc:	4698      	mov	r8, r3
    52fe:	e68d      	b.n	501c <__aeabi_dsub+0x10c>
    5300:	488c      	ldr	r0, [pc, #560]	; (5534 <__aeabi_dsub+0x624>)
    5302:	4283      	cmp	r3, r0
    5304:	d00b      	beq.n	531e <__aeabi_dsub+0x40e>
    5306:	4663      	mov	r3, ip
    5308:	e6d9      	b.n	50be <__aeabi_dsub+0x1ae>
    530a:	2d00      	cmp	r5, #0
    530c:	d000      	beq.n	5310 <__aeabi_dsub+0x400>
    530e:	e096      	b.n	543e <__aeabi_dsub+0x52e>
    5310:	0008      	movs	r0, r1
    5312:	4310      	orrs	r0, r2
    5314:	d100      	bne.n	5318 <__aeabi_dsub+0x408>
    5316:	e0e2      	b.n	54de <__aeabi_dsub+0x5ce>
    5318:	000c      	movs	r4, r1
    531a:	0017      	movs	r7, r2
    531c:	4698      	mov	r8, r3
    531e:	4e85      	ldr	r6, [pc, #532]	; (5534 <__aeabi_dsub+0x624>)
    5320:	e67c      	b.n	501c <__aeabi_dsub+0x10c>
    5322:	2500      	movs	r5, #0
    5324:	e780      	b.n	5228 <__aeabi_dsub+0x318>
    5326:	2100      	movs	r1, #0
    5328:	e78e      	b.n	5248 <__aeabi_dsub+0x338>
    532a:	0023      	movs	r3, r4
    532c:	4650      	mov	r0, sl
    532e:	4303      	orrs	r3, r0
    5330:	2e00      	cmp	r6, #0
    5332:	d000      	beq.n	5336 <__aeabi_dsub+0x426>
    5334:	e0a8      	b.n	5488 <__aeabi_dsub+0x578>
    5336:	2b00      	cmp	r3, #0
    5338:	d100      	bne.n	533c <__aeabi_dsub+0x42c>
    533a:	e0de      	b.n	54fa <__aeabi_dsub+0x5ea>
    533c:	000b      	movs	r3, r1
    533e:	4313      	orrs	r3, r2
    5340:	d100      	bne.n	5344 <__aeabi_dsub+0x434>
    5342:	e66b      	b.n	501c <__aeabi_dsub+0x10c>
    5344:	4452      	add	r2, sl
    5346:	4552      	cmp	r2, sl
    5348:	4180      	sbcs	r0, r0
    534a:	1864      	adds	r4, r4, r1
    534c:	4240      	negs	r0, r0
    534e:	1824      	adds	r4, r4, r0
    5350:	0017      	movs	r7, r2
    5352:	0223      	lsls	r3, r4, #8
    5354:	d400      	bmi.n	5358 <__aeabi_dsub+0x448>
    5356:	e6fd      	b.n	5154 <__aeabi_dsub+0x244>
    5358:	4b77      	ldr	r3, [pc, #476]	; (5538 <__aeabi_dsub+0x628>)
    535a:	4666      	mov	r6, ip
    535c:	401c      	ands	r4, r3
    535e:	e65d      	b.n	501c <__aeabi_dsub+0x10c>
    5360:	0025      	movs	r5, r4
    5362:	4650      	mov	r0, sl
    5364:	4305      	orrs	r5, r0
    5366:	2e00      	cmp	r6, #0
    5368:	d1cf      	bne.n	530a <__aeabi_dsub+0x3fa>
    536a:	2d00      	cmp	r5, #0
    536c:	d14f      	bne.n	540e <__aeabi_dsub+0x4fe>
    536e:	000c      	movs	r4, r1
    5370:	4314      	orrs	r4, r2
    5372:	d100      	bne.n	5376 <__aeabi_dsub+0x466>
    5374:	e0a0      	b.n	54b8 <__aeabi_dsub+0x5a8>
    5376:	000c      	movs	r4, r1
    5378:	0017      	movs	r7, r2
    537a:	4698      	mov	r8, r3
    537c:	e64e      	b.n	501c <__aeabi_dsub+0x10c>
    537e:	4666      	mov	r6, ip
    5380:	2400      	movs	r4, #0
    5382:	2700      	movs	r7, #0
    5384:	e685      	b.n	5092 <__aeabi_dsub+0x182>
    5386:	001f      	movs	r7, r3
    5388:	0008      	movs	r0, r1
    538a:	3f20      	subs	r7, #32
    538c:	40f8      	lsrs	r0, r7
    538e:	0007      	movs	r7, r0
    5390:	2b20      	cmp	r3, #32
    5392:	d100      	bne.n	5396 <__aeabi_dsub+0x486>
    5394:	e08e      	b.n	54b4 <__aeabi_dsub+0x5a4>
    5396:	2040      	movs	r0, #64	; 0x40
    5398:	1ac3      	subs	r3, r0, r3
    539a:	4099      	lsls	r1, r3
    539c:	430a      	orrs	r2, r1
    539e:	1e51      	subs	r1, r2, #1
    53a0:	418a      	sbcs	r2, r1
    53a2:	2100      	movs	r1, #0
    53a4:	4317      	orrs	r7, r2
    53a6:	e692      	b.n	50ce <__aeabi_dsub+0x1be>
    53a8:	2e00      	cmp	r6, #0
    53aa:	d114      	bne.n	53d6 <__aeabi_dsub+0x4c6>
    53ac:	0026      	movs	r6, r4
    53ae:	4650      	mov	r0, sl
    53b0:	4306      	orrs	r6, r0
    53b2:	d062      	beq.n	547a <__aeabi_dsub+0x56a>
    53b4:	43db      	mvns	r3, r3
    53b6:	2b00      	cmp	r3, #0
    53b8:	d15c      	bne.n	5474 <__aeabi_dsub+0x564>
    53ba:	1887      	adds	r7, r0, r2
    53bc:	4297      	cmp	r7, r2
    53be:	4192      	sbcs	r2, r2
    53c0:	1864      	adds	r4, r4, r1
    53c2:	4252      	negs	r2, r2
    53c4:	18a4      	adds	r4, r4, r2
    53c6:	4666      	mov	r6, ip
    53c8:	e687      	b.n	50da <__aeabi_dsub+0x1ca>
    53ca:	4650      	mov	r0, sl
    53cc:	4320      	orrs	r0, r4
    53ce:	1e44      	subs	r4, r0, #1
    53d0:	41a0      	sbcs	r0, r4
    53d2:	2400      	movs	r4, #0
    53d4:	e760      	b.n	5298 <__aeabi_dsub+0x388>
    53d6:	4e57      	ldr	r6, [pc, #348]	; (5534 <__aeabi_dsub+0x624>)
    53d8:	45b4      	cmp	ip, r6
    53da:	d04e      	beq.n	547a <__aeabi_dsub+0x56a>
    53dc:	2680      	movs	r6, #128	; 0x80
    53de:	0436      	lsls	r6, r6, #16
    53e0:	425b      	negs	r3, r3
    53e2:	4334      	orrs	r4, r6
    53e4:	2b38      	cmp	r3, #56	; 0x38
    53e6:	dd00      	ble.n	53ea <__aeabi_dsub+0x4da>
    53e8:	e07f      	b.n	54ea <__aeabi_dsub+0x5da>
    53ea:	2b1f      	cmp	r3, #31
    53ec:	dd00      	ble.n	53f0 <__aeabi_dsub+0x4e0>
    53ee:	e08b      	b.n	5508 <__aeabi_dsub+0x5f8>
    53f0:	2620      	movs	r6, #32
    53f2:	0027      	movs	r7, r4
    53f4:	4650      	mov	r0, sl
    53f6:	1af6      	subs	r6, r6, r3
    53f8:	40b7      	lsls	r7, r6
    53fa:	40d8      	lsrs	r0, r3
    53fc:	4307      	orrs	r7, r0
    53fe:	4650      	mov	r0, sl
    5400:	40b0      	lsls	r0, r6
    5402:	1e46      	subs	r6, r0, #1
    5404:	41b0      	sbcs	r0, r6
    5406:	4307      	orrs	r7, r0
    5408:	40dc      	lsrs	r4, r3
    540a:	18bf      	adds	r7, r7, r2
    540c:	e7d6      	b.n	53bc <__aeabi_dsub+0x4ac>
    540e:	000d      	movs	r5, r1
    5410:	4315      	orrs	r5, r2
    5412:	d100      	bne.n	5416 <__aeabi_dsub+0x506>
    5414:	e602      	b.n	501c <__aeabi_dsub+0x10c>
    5416:	4650      	mov	r0, sl
    5418:	1a80      	subs	r0, r0, r2
    541a:	4582      	cmp	sl, r0
    541c:	41bf      	sbcs	r7, r7
    541e:	1a65      	subs	r5, r4, r1
    5420:	427f      	negs	r7, r7
    5422:	1bed      	subs	r5, r5, r7
    5424:	4684      	mov	ip, r0
    5426:	0228      	lsls	r0, r5, #8
    5428:	d400      	bmi.n	542c <__aeabi_dsub+0x51c>
    542a:	e68d      	b.n	5148 <__aeabi_dsub+0x238>
    542c:	4650      	mov	r0, sl
    542e:	1a17      	subs	r7, r2, r0
    5430:	42ba      	cmp	r2, r7
    5432:	4192      	sbcs	r2, r2
    5434:	1b0c      	subs	r4, r1, r4
    5436:	4252      	negs	r2, r2
    5438:	1aa4      	subs	r4, r4, r2
    543a:	4698      	mov	r8, r3
    543c:	e5ee      	b.n	501c <__aeabi_dsub+0x10c>
    543e:	000d      	movs	r5, r1
    5440:	4315      	orrs	r5, r2
    5442:	d100      	bne.n	5446 <__aeabi_dsub+0x536>
    5444:	e76b      	b.n	531e <__aeabi_dsub+0x40e>
    5446:	4650      	mov	r0, sl
    5448:	0767      	lsls	r7, r4, #29
    544a:	08c0      	lsrs	r0, r0, #3
    544c:	4307      	orrs	r7, r0
    544e:	2080      	movs	r0, #128	; 0x80
    5450:	08e4      	lsrs	r4, r4, #3
    5452:	0300      	lsls	r0, r0, #12
    5454:	4204      	tst	r4, r0
    5456:	d007      	beq.n	5468 <__aeabi_dsub+0x558>
    5458:	08cd      	lsrs	r5, r1, #3
    545a:	4205      	tst	r5, r0
    545c:	d104      	bne.n	5468 <__aeabi_dsub+0x558>
    545e:	002c      	movs	r4, r5
    5460:	4698      	mov	r8, r3
    5462:	08d7      	lsrs	r7, r2, #3
    5464:	0749      	lsls	r1, r1, #29
    5466:	430f      	orrs	r7, r1
    5468:	0f7b      	lsrs	r3, r7, #29
    546a:	00e4      	lsls	r4, r4, #3
    546c:	431c      	orrs	r4, r3
    546e:	00ff      	lsls	r7, r7, #3
    5470:	4e30      	ldr	r6, [pc, #192]	; (5534 <__aeabi_dsub+0x624>)
    5472:	e5d3      	b.n	501c <__aeabi_dsub+0x10c>
    5474:	4e2f      	ldr	r6, [pc, #188]	; (5534 <__aeabi_dsub+0x624>)
    5476:	45b4      	cmp	ip, r6
    5478:	d1b4      	bne.n	53e4 <__aeabi_dsub+0x4d4>
    547a:	000c      	movs	r4, r1
    547c:	0017      	movs	r7, r2
    547e:	4666      	mov	r6, ip
    5480:	e5cc      	b.n	501c <__aeabi_dsub+0x10c>
    5482:	2700      	movs	r7, #0
    5484:	2400      	movs	r4, #0
    5486:	e5e8      	b.n	505a <__aeabi_dsub+0x14a>
    5488:	2b00      	cmp	r3, #0
    548a:	d039      	beq.n	5500 <__aeabi_dsub+0x5f0>
    548c:	000b      	movs	r3, r1
    548e:	4313      	orrs	r3, r2
    5490:	d100      	bne.n	5494 <__aeabi_dsub+0x584>
    5492:	e744      	b.n	531e <__aeabi_dsub+0x40e>
    5494:	08c0      	lsrs	r0, r0, #3
    5496:	0767      	lsls	r7, r4, #29
    5498:	4307      	orrs	r7, r0
    549a:	2080      	movs	r0, #128	; 0x80
    549c:	08e4      	lsrs	r4, r4, #3
    549e:	0300      	lsls	r0, r0, #12
    54a0:	4204      	tst	r4, r0
    54a2:	d0e1      	beq.n	5468 <__aeabi_dsub+0x558>
    54a4:	08cb      	lsrs	r3, r1, #3
    54a6:	4203      	tst	r3, r0
    54a8:	d1de      	bne.n	5468 <__aeabi_dsub+0x558>
    54aa:	08d7      	lsrs	r7, r2, #3
    54ac:	0749      	lsls	r1, r1, #29
    54ae:	430f      	orrs	r7, r1
    54b0:	001c      	movs	r4, r3
    54b2:	e7d9      	b.n	5468 <__aeabi_dsub+0x558>
    54b4:	2100      	movs	r1, #0
    54b6:	e771      	b.n	539c <__aeabi_dsub+0x48c>
    54b8:	2500      	movs	r5, #0
    54ba:	2700      	movs	r7, #0
    54bc:	e5e9      	b.n	5092 <__aeabi_dsub+0x182>
    54be:	002e      	movs	r6, r5
    54c0:	0027      	movs	r7, r4
    54c2:	3e20      	subs	r6, #32
    54c4:	40f7      	lsrs	r7, r6
    54c6:	2d20      	cmp	r5, #32
    54c8:	d02f      	beq.n	552a <__aeabi_dsub+0x61a>
    54ca:	2640      	movs	r6, #64	; 0x40
    54cc:	1b75      	subs	r5, r6, r5
    54ce:	40ac      	lsls	r4, r5
    54d0:	4650      	mov	r0, sl
    54d2:	4320      	orrs	r0, r4
    54d4:	1e44      	subs	r4, r0, #1
    54d6:	41a0      	sbcs	r0, r4
    54d8:	2400      	movs	r4, #0
    54da:	4338      	orrs	r0, r7
    54dc:	e6dc      	b.n	5298 <__aeabi_dsub+0x388>
    54de:	2480      	movs	r4, #128	; 0x80
    54e0:	2500      	movs	r5, #0
    54e2:	0324      	lsls	r4, r4, #12
    54e4:	4e13      	ldr	r6, [pc, #76]	; (5534 <__aeabi_dsub+0x624>)
    54e6:	2700      	movs	r7, #0
    54e8:	e5d3      	b.n	5092 <__aeabi_dsub+0x182>
    54ea:	4650      	mov	r0, sl
    54ec:	4320      	orrs	r0, r4
    54ee:	0007      	movs	r7, r0
    54f0:	1e78      	subs	r0, r7, #1
    54f2:	4187      	sbcs	r7, r0
    54f4:	2400      	movs	r4, #0
    54f6:	18bf      	adds	r7, r7, r2
    54f8:	e760      	b.n	53bc <__aeabi_dsub+0x4ac>
    54fa:	000c      	movs	r4, r1
    54fc:	0017      	movs	r7, r2
    54fe:	e58d      	b.n	501c <__aeabi_dsub+0x10c>
    5500:	000c      	movs	r4, r1
    5502:	0017      	movs	r7, r2
    5504:	4e0b      	ldr	r6, [pc, #44]	; (5534 <__aeabi_dsub+0x624>)
    5506:	e589      	b.n	501c <__aeabi_dsub+0x10c>
    5508:	001e      	movs	r6, r3
    550a:	0027      	movs	r7, r4
    550c:	3e20      	subs	r6, #32
    550e:	40f7      	lsrs	r7, r6
    5510:	2b20      	cmp	r3, #32
    5512:	d00c      	beq.n	552e <__aeabi_dsub+0x61e>
    5514:	2640      	movs	r6, #64	; 0x40
    5516:	1af3      	subs	r3, r6, r3
    5518:	409c      	lsls	r4, r3
    551a:	4650      	mov	r0, sl
    551c:	4320      	orrs	r0, r4
    551e:	1e44      	subs	r4, r0, #1
    5520:	41a0      	sbcs	r0, r4
    5522:	4307      	orrs	r7, r0
    5524:	2400      	movs	r4, #0
    5526:	18bf      	adds	r7, r7, r2
    5528:	e748      	b.n	53bc <__aeabi_dsub+0x4ac>
    552a:	2400      	movs	r4, #0
    552c:	e7d0      	b.n	54d0 <__aeabi_dsub+0x5c0>
    552e:	2400      	movs	r4, #0
    5530:	e7f3      	b.n	551a <__aeabi_dsub+0x60a>
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	000007ff 	.word	0x000007ff
    5538:	ff7fffff 	.word	0xff7fffff

0000553c <__aeabi_d2iz>:
    553c:	b530      	push	{r4, r5, lr}
    553e:	4d13      	ldr	r5, [pc, #76]	; (558c <__aeabi_d2iz+0x50>)
    5540:	030a      	lsls	r2, r1, #12
    5542:	004b      	lsls	r3, r1, #1
    5544:	0b12      	lsrs	r2, r2, #12
    5546:	0d5b      	lsrs	r3, r3, #21
    5548:	0fc9      	lsrs	r1, r1, #31
    554a:	2400      	movs	r4, #0
    554c:	42ab      	cmp	r3, r5
    554e:	dd10      	ble.n	5572 <__aeabi_d2iz+0x36>
    5550:	4c0f      	ldr	r4, [pc, #60]	; (5590 <__aeabi_d2iz+0x54>)
    5552:	42a3      	cmp	r3, r4
    5554:	dc0f      	bgt.n	5576 <__aeabi_d2iz+0x3a>
    5556:	2480      	movs	r4, #128	; 0x80
    5558:	4d0e      	ldr	r5, [pc, #56]	; (5594 <__aeabi_d2iz+0x58>)
    555a:	0364      	lsls	r4, r4, #13
    555c:	4322      	orrs	r2, r4
    555e:	1aed      	subs	r5, r5, r3
    5560:	2d1f      	cmp	r5, #31
    5562:	dd0b      	ble.n	557c <__aeabi_d2iz+0x40>
    5564:	480c      	ldr	r0, [pc, #48]	; (5598 <__aeabi_d2iz+0x5c>)
    5566:	1ac3      	subs	r3, r0, r3
    5568:	40da      	lsrs	r2, r3
    556a:	4254      	negs	r4, r2
    556c:	2900      	cmp	r1, #0
    556e:	d100      	bne.n	5572 <__aeabi_d2iz+0x36>
    5570:	0014      	movs	r4, r2
    5572:	0020      	movs	r0, r4
    5574:	bd30      	pop	{r4, r5, pc}
    5576:	4b09      	ldr	r3, [pc, #36]	; (559c <__aeabi_d2iz+0x60>)
    5578:	18cc      	adds	r4, r1, r3
    557a:	e7fa      	b.n	5572 <__aeabi_d2iz+0x36>
    557c:	4c08      	ldr	r4, [pc, #32]	; (55a0 <__aeabi_d2iz+0x64>)
    557e:	40e8      	lsrs	r0, r5
    5580:	46a4      	mov	ip, r4
    5582:	4463      	add	r3, ip
    5584:	409a      	lsls	r2, r3
    5586:	4302      	orrs	r2, r0
    5588:	e7ef      	b.n	556a <__aeabi_d2iz+0x2e>
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	000003fe 	.word	0x000003fe
    5590:	0000041d 	.word	0x0000041d
    5594:	00000433 	.word	0x00000433
    5598:	00000413 	.word	0x00000413
    559c:	7fffffff 	.word	0x7fffffff
    55a0:	fffffbed 	.word	0xfffffbed

000055a4 <__aeabi_ui2d>:
    55a4:	b510      	push	{r4, lr}
    55a6:	1e04      	subs	r4, r0, #0
    55a8:	d028      	beq.n	55fc <__aeabi_ui2d+0x58>
    55aa:	f000 f90f 	bl	57cc <__clzsi2>
    55ae:	4b15      	ldr	r3, [pc, #84]	; (5604 <__aeabi_ui2d+0x60>)
    55b0:	4a15      	ldr	r2, [pc, #84]	; (5608 <__aeabi_ui2d+0x64>)
    55b2:	1a1b      	subs	r3, r3, r0
    55b4:	1ad2      	subs	r2, r2, r3
    55b6:	2a1f      	cmp	r2, #31
    55b8:	dd15      	ble.n	55e6 <__aeabi_ui2d+0x42>
    55ba:	4a14      	ldr	r2, [pc, #80]	; (560c <__aeabi_ui2d+0x68>)
    55bc:	1ad2      	subs	r2, r2, r3
    55be:	4094      	lsls	r4, r2
    55c0:	2200      	movs	r2, #0
    55c2:	0324      	lsls	r4, r4, #12
    55c4:	055b      	lsls	r3, r3, #21
    55c6:	0b24      	lsrs	r4, r4, #12
    55c8:	0d5b      	lsrs	r3, r3, #21
    55ca:	2100      	movs	r1, #0
    55cc:	0010      	movs	r0, r2
    55ce:	0324      	lsls	r4, r4, #12
    55d0:	0d0a      	lsrs	r2, r1, #20
    55d2:	0b24      	lsrs	r4, r4, #12
    55d4:	0512      	lsls	r2, r2, #20
    55d6:	4322      	orrs	r2, r4
    55d8:	4c0d      	ldr	r4, [pc, #52]	; (5610 <__aeabi_ui2d+0x6c>)
    55da:	051b      	lsls	r3, r3, #20
    55dc:	4022      	ands	r2, r4
    55de:	4313      	orrs	r3, r2
    55e0:	005b      	lsls	r3, r3, #1
    55e2:	0859      	lsrs	r1, r3, #1
    55e4:	bd10      	pop	{r4, pc}
    55e6:	0021      	movs	r1, r4
    55e8:	4091      	lsls	r1, r2
    55ea:	000a      	movs	r2, r1
    55ec:	210b      	movs	r1, #11
    55ee:	1a08      	subs	r0, r1, r0
    55f0:	40c4      	lsrs	r4, r0
    55f2:	055b      	lsls	r3, r3, #21
    55f4:	0324      	lsls	r4, r4, #12
    55f6:	0b24      	lsrs	r4, r4, #12
    55f8:	0d5b      	lsrs	r3, r3, #21
    55fa:	e7e6      	b.n	55ca <__aeabi_ui2d+0x26>
    55fc:	2300      	movs	r3, #0
    55fe:	2400      	movs	r4, #0
    5600:	2200      	movs	r2, #0
    5602:	e7e2      	b.n	55ca <__aeabi_ui2d+0x26>
    5604:	0000041e 	.word	0x0000041e
    5608:	00000433 	.word	0x00000433
    560c:	00000413 	.word	0x00000413
    5610:	800fffff 	.word	0x800fffff

00005614 <__aeabi_f2d>:
    5614:	0041      	lsls	r1, r0, #1
    5616:	0e09      	lsrs	r1, r1, #24
    5618:	1c4b      	adds	r3, r1, #1
    561a:	b570      	push	{r4, r5, r6, lr}
    561c:	b2db      	uxtb	r3, r3
    561e:	0246      	lsls	r6, r0, #9
    5620:	0a75      	lsrs	r5, r6, #9
    5622:	0fc4      	lsrs	r4, r0, #31
    5624:	2b01      	cmp	r3, #1
    5626:	dd14      	ble.n	5652 <__aeabi_f2d+0x3e>
    5628:	23e0      	movs	r3, #224	; 0xe0
    562a:	009b      	lsls	r3, r3, #2
    562c:	076d      	lsls	r5, r5, #29
    562e:	0b36      	lsrs	r6, r6, #12
    5630:	18cb      	adds	r3, r1, r3
    5632:	2100      	movs	r1, #0
    5634:	0d0a      	lsrs	r2, r1, #20
    5636:	0028      	movs	r0, r5
    5638:	0512      	lsls	r2, r2, #20
    563a:	4d1c      	ldr	r5, [pc, #112]	; (56ac <__aeabi_f2d+0x98>)
    563c:	4332      	orrs	r2, r6
    563e:	055b      	lsls	r3, r3, #21
    5640:	402a      	ands	r2, r5
    5642:	085b      	lsrs	r3, r3, #1
    5644:	4313      	orrs	r3, r2
    5646:	005b      	lsls	r3, r3, #1
    5648:	07e4      	lsls	r4, r4, #31
    564a:	085b      	lsrs	r3, r3, #1
    564c:	4323      	orrs	r3, r4
    564e:	0019      	movs	r1, r3
    5650:	bd70      	pop	{r4, r5, r6, pc}
    5652:	2900      	cmp	r1, #0
    5654:	d114      	bne.n	5680 <__aeabi_f2d+0x6c>
    5656:	2d00      	cmp	r5, #0
    5658:	d01e      	beq.n	5698 <__aeabi_f2d+0x84>
    565a:	0028      	movs	r0, r5
    565c:	f000 f8b6 	bl	57cc <__clzsi2>
    5660:	280a      	cmp	r0, #10
    5662:	dc1c      	bgt.n	569e <__aeabi_f2d+0x8a>
    5664:	230b      	movs	r3, #11
    5666:	002a      	movs	r2, r5
    5668:	1a1b      	subs	r3, r3, r0
    566a:	40da      	lsrs	r2, r3
    566c:	0003      	movs	r3, r0
    566e:	3315      	adds	r3, #21
    5670:	409d      	lsls	r5, r3
    5672:	4b0f      	ldr	r3, [pc, #60]	; (56b0 <__aeabi_f2d+0x9c>)
    5674:	0312      	lsls	r2, r2, #12
    5676:	1a1b      	subs	r3, r3, r0
    5678:	055b      	lsls	r3, r3, #21
    567a:	0b16      	lsrs	r6, r2, #12
    567c:	0d5b      	lsrs	r3, r3, #21
    567e:	e7d8      	b.n	5632 <__aeabi_f2d+0x1e>
    5680:	2d00      	cmp	r5, #0
    5682:	d006      	beq.n	5692 <__aeabi_f2d+0x7e>
    5684:	0b32      	lsrs	r2, r6, #12
    5686:	2680      	movs	r6, #128	; 0x80
    5688:	0336      	lsls	r6, r6, #12
    568a:	076d      	lsls	r5, r5, #29
    568c:	4316      	orrs	r6, r2
    568e:	4b09      	ldr	r3, [pc, #36]	; (56b4 <__aeabi_f2d+0xa0>)
    5690:	e7cf      	b.n	5632 <__aeabi_f2d+0x1e>
    5692:	4b08      	ldr	r3, [pc, #32]	; (56b4 <__aeabi_f2d+0xa0>)
    5694:	2600      	movs	r6, #0
    5696:	e7cc      	b.n	5632 <__aeabi_f2d+0x1e>
    5698:	2300      	movs	r3, #0
    569a:	2600      	movs	r6, #0
    569c:	e7c9      	b.n	5632 <__aeabi_f2d+0x1e>
    569e:	0003      	movs	r3, r0
    56a0:	002a      	movs	r2, r5
    56a2:	3b0b      	subs	r3, #11
    56a4:	409a      	lsls	r2, r3
    56a6:	2500      	movs	r5, #0
    56a8:	e7e3      	b.n	5672 <__aeabi_f2d+0x5e>
    56aa:	46c0      	nop			; (mov r8, r8)
    56ac:	800fffff 	.word	0x800fffff
    56b0:	00000389 	.word	0x00000389
    56b4:	000007ff 	.word	0x000007ff

000056b8 <__aeabi_d2f>:
    56b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ba:	004c      	lsls	r4, r1, #1
    56bc:	0d64      	lsrs	r4, r4, #21
    56be:	030b      	lsls	r3, r1, #12
    56c0:	1c62      	adds	r2, r4, #1
    56c2:	0f45      	lsrs	r5, r0, #29
    56c4:	0a5b      	lsrs	r3, r3, #9
    56c6:	0552      	lsls	r2, r2, #21
    56c8:	432b      	orrs	r3, r5
    56ca:	0fc9      	lsrs	r1, r1, #31
    56cc:	00c5      	lsls	r5, r0, #3
    56ce:	0d52      	lsrs	r2, r2, #21
    56d0:	2a01      	cmp	r2, #1
    56d2:	dd28      	ble.n	5726 <__aeabi_d2f+0x6e>
    56d4:	4a3a      	ldr	r2, [pc, #232]	; (57c0 <__aeabi_d2f+0x108>)
    56d6:	18a6      	adds	r6, r4, r2
    56d8:	2efe      	cmp	r6, #254	; 0xfe
    56da:	dc1b      	bgt.n	5714 <__aeabi_d2f+0x5c>
    56dc:	2e00      	cmp	r6, #0
    56de:	dd3e      	ble.n	575e <__aeabi_d2f+0xa6>
    56e0:	0180      	lsls	r0, r0, #6
    56e2:	0002      	movs	r2, r0
    56e4:	1e50      	subs	r0, r2, #1
    56e6:	4182      	sbcs	r2, r0
    56e8:	0f6d      	lsrs	r5, r5, #29
    56ea:	432a      	orrs	r2, r5
    56ec:	00db      	lsls	r3, r3, #3
    56ee:	4313      	orrs	r3, r2
    56f0:	075a      	lsls	r2, r3, #29
    56f2:	d004      	beq.n	56fe <__aeabi_d2f+0x46>
    56f4:	220f      	movs	r2, #15
    56f6:	401a      	ands	r2, r3
    56f8:	2a04      	cmp	r2, #4
    56fa:	d000      	beq.n	56fe <__aeabi_d2f+0x46>
    56fc:	3304      	adds	r3, #4
    56fe:	2280      	movs	r2, #128	; 0x80
    5700:	04d2      	lsls	r2, r2, #19
    5702:	401a      	ands	r2, r3
    5704:	d05a      	beq.n	57bc <__aeabi_d2f+0x104>
    5706:	3601      	adds	r6, #1
    5708:	2eff      	cmp	r6, #255	; 0xff
    570a:	d003      	beq.n	5714 <__aeabi_d2f+0x5c>
    570c:	019b      	lsls	r3, r3, #6
    570e:	0a5b      	lsrs	r3, r3, #9
    5710:	b2f4      	uxtb	r4, r6
    5712:	e001      	b.n	5718 <__aeabi_d2f+0x60>
    5714:	24ff      	movs	r4, #255	; 0xff
    5716:	2300      	movs	r3, #0
    5718:	0258      	lsls	r0, r3, #9
    571a:	05e4      	lsls	r4, r4, #23
    571c:	0a40      	lsrs	r0, r0, #9
    571e:	07c9      	lsls	r1, r1, #31
    5720:	4320      	orrs	r0, r4
    5722:	4308      	orrs	r0, r1
    5724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5726:	2c00      	cmp	r4, #0
    5728:	d007      	beq.n	573a <__aeabi_d2f+0x82>
    572a:	431d      	orrs	r5, r3
    572c:	d0f2      	beq.n	5714 <__aeabi_d2f+0x5c>
    572e:	2080      	movs	r0, #128	; 0x80
    5730:	00db      	lsls	r3, r3, #3
    5732:	0480      	lsls	r0, r0, #18
    5734:	4303      	orrs	r3, r0
    5736:	26ff      	movs	r6, #255	; 0xff
    5738:	e7da      	b.n	56f0 <__aeabi_d2f+0x38>
    573a:	432b      	orrs	r3, r5
    573c:	d003      	beq.n	5746 <__aeabi_d2f+0x8e>
    573e:	2305      	movs	r3, #5
    5740:	08db      	lsrs	r3, r3, #3
    5742:	2cff      	cmp	r4, #255	; 0xff
    5744:	d003      	beq.n	574e <__aeabi_d2f+0x96>
    5746:	025b      	lsls	r3, r3, #9
    5748:	0a5b      	lsrs	r3, r3, #9
    574a:	b2e4      	uxtb	r4, r4
    574c:	e7e4      	b.n	5718 <__aeabi_d2f+0x60>
    574e:	2b00      	cmp	r3, #0
    5750:	d032      	beq.n	57b8 <__aeabi_d2f+0x100>
    5752:	2080      	movs	r0, #128	; 0x80
    5754:	03c0      	lsls	r0, r0, #15
    5756:	4303      	orrs	r3, r0
    5758:	025b      	lsls	r3, r3, #9
    575a:	0a5b      	lsrs	r3, r3, #9
    575c:	e7dc      	b.n	5718 <__aeabi_d2f+0x60>
    575e:	0032      	movs	r2, r6
    5760:	3217      	adds	r2, #23
    5762:	db14      	blt.n	578e <__aeabi_d2f+0xd6>
    5764:	2280      	movs	r2, #128	; 0x80
    5766:	271e      	movs	r7, #30
    5768:	0412      	lsls	r2, r2, #16
    576a:	4313      	orrs	r3, r2
    576c:	1bbf      	subs	r7, r7, r6
    576e:	2f1f      	cmp	r7, #31
    5770:	dc0f      	bgt.n	5792 <__aeabi_d2f+0xda>
    5772:	4a14      	ldr	r2, [pc, #80]	; (57c4 <__aeabi_d2f+0x10c>)
    5774:	4694      	mov	ip, r2
    5776:	4464      	add	r4, ip
    5778:	002a      	movs	r2, r5
    577a:	40a5      	lsls	r5, r4
    577c:	002e      	movs	r6, r5
    577e:	40a3      	lsls	r3, r4
    5780:	1e75      	subs	r5, r6, #1
    5782:	41ae      	sbcs	r6, r5
    5784:	40fa      	lsrs	r2, r7
    5786:	4333      	orrs	r3, r6
    5788:	4313      	orrs	r3, r2
    578a:	2600      	movs	r6, #0
    578c:	e7b0      	b.n	56f0 <__aeabi_d2f+0x38>
    578e:	2400      	movs	r4, #0
    5790:	e7d5      	b.n	573e <__aeabi_d2f+0x86>
    5792:	2202      	movs	r2, #2
    5794:	4252      	negs	r2, r2
    5796:	1b96      	subs	r6, r2, r6
    5798:	001a      	movs	r2, r3
    579a:	40f2      	lsrs	r2, r6
    579c:	2f20      	cmp	r7, #32
    579e:	d009      	beq.n	57b4 <__aeabi_d2f+0xfc>
    57a0:	4809      	ldr	r0, [pc, #36]	; (57c8 <__aeabi_d2f+0x110>)
    57a2:	4684      	mov	ip, r0
    57a4:	4464      	add	r4, ip
    57a6:	40a3      	lsls	r3, r4
    57a8:	432b      	orrs	r3, r5
    57aa:	1e5d      	subs	r5, r3, #1
    57ac:	41ab      	sbcs	r3, r5
    57ae:	2600      	movs	r6, #0
    57b0:	4313      	orrs	r3, r2
    57b2:	e79d      	b.n	56f0 <__aeabi_d2f+0x38>
    57b4:	2300      	movs	r3, #0
    57b6:	e7f7      	b.n	57a8 <__aeabi_d2f+0xf0>
    57b8:	2300      	movs	r3, #0
    57ba:	e7ad      	b.n	5718 <__aeabi_d2f+0x60>
    57bc:	0034      	movs	r4, r6
    57be:	e7bf      	b.n	5740 <__aeabi_d2f+0x88>
    57c0:	fffffc80 	.word	0xfffffc80
    57c4:	fffffc82 	.word	0xfffffc82
    57c8:	fffffca2 	.word	0xfffffca2

000057cc <__clzsi2>:
    57cc:	211c      	movs	r1, #28
    57ce:	2301      	movs	r3, #1
    57d0:	041b      	lsls	r3, r3, #16
    57d2:	4298      	cmp	r0, r3
    57d4:	d301      	bcc.n	57da <__clzsi2+0xe>
    57d6:	0c00      	lsrs	r0, r0, #16
    57d8:	3910      	subs	r1, #16
    57da:	0a1b      	lsrs	r3, r3, #8
    57dc:	4298      	cmp	r0, r3
    57de:	d301      	bcc.n	57e4 <__clzsi2+0x18>
    57e0:	0a00      	lsrs	r0, r0, #8
    57e2:	3908      	subs	r1, #8
    57e4:	091b      	lsrs	r3, r3, #4
    57e6:	4298      	cmp	r0, r3
    57e8:	d301      	bcc.n	57ee <__clzsi2+0x22>
    57ea:	0900      	lsrs	r0, r0, #4
    57ec:	3904      	subs	r1, #4
    57ee:	a202      	add	r2, pc, #8	; (adr r2, 57f8 <__clzsi2+0x2c>)
    57f0:	5c10      	ldrb	r0, [r2, r0]
    57f2:	1840      	adds	r0, r0, r1
    57f4:	4770      	bx	lr
    57f6:	46c0      	nop			; (mov r8, r8)
    57f8:	02020304 	.word	0x02020304
    57fc:	01010101 	.word	0x01010101
	...

00005808 <atoi>:
    5808:	b510      	push	{r4, lr}
    580a:	220a      	movs	r2, #10
    580c:	2100      	movs	r1, #0
    580e:	f000 fa81 	bl	5d14 <strtol>
    5812:	bd10      	pop	{r4, pc}

00005814 <__libc_init_array>:
    5814:	b570      	push	{r4, r5, r6, lr}
    5816:	2600      	movs	r6, #0
    5818:	4d0c      	ldr	r5, [pc, #48]	; (584c <__libc_init_array+0x38>)
    581a:	4c0d      	ldr	r4, [pc, #52]	; (5850 <__libc_init_array+0x3c>)
    581c:	1b64      	subs	r4, r4, r5
    581e:	10a4      	asrs	r4, r4, #2
    5820:	42a6      	cmp	r6, r4
    5822:	d109      	bne.n	5838 <__libc_init_array+0x24>
    5824:	2600      	movs	r6, #0
    5826:	f002 fc1f 	bl	8068 <_init>
    582a:	4d0a      	ldr	r5, [pc, #40]	; (5854 <__libc_init_array+0x40>)
    582c:	4c0a      	ldr	r4, [pc, #40]	; (5858 <__libc_init_array+0x44>)
    582e:	1b64      	subs	r4, r4, r5
    5830:	10a4      	asrs	r4, r4, #2
    5832:	42a6      	cmp	r6, r4
    5834:	d105      	bne.n	5842 <__libc_init_array+0x2e>
    5836:	bd70      	pop	{r4, r5, r6, pc}
    5838:	00b3      	lsls	r3, r6, #2
    583a:	58eb      	ldr	r3, [r5, r3]
    583c:	4798      	blx	r3
    583e:	3601      	adds	r6, #1
    5840:	e7ee      	b.n	5820 <__libc_init_array+0xc>
    5842:	00b3      	lsls	r3, r6, #2
    5844:	58eb      	ldr	r3, [r5, r3]
    5846:	4798      	blx	r3
    5848:	3601      	adds	r6, #1
    584a:	e7f2      	b.n	5832 <__libc_init_array+0x1e>
    584c:	00008074 	.word	0x00008074
    5850:	00008074 	.word	0x00008074
    5854:	00008074 	.word	0x00008074
    5858:	00008078 	.word	0x00008078

0000585c <memcpy>:
    585c:	2300      	movs	r3, #0
    585e:	b510      	push	{r4, lr}
    5860:	429a      	cmp	r2, r3
    5862:	d100      	bne.n	5866 <memcpy+0xa>
    5864:	bd10      	pop	{r4, pc}
    5866:	5ccc      	ldrb	r4, [r1, r3]
    5868:	54c4      	strb	r4, [r0, r3]
    586a:	3301      	adds	r3, #1
    586c:	e7f8      	b.n	5860 <memcpy+0x4>

0000586e <memset>:
    586e:	0003      	movs	r3, r0
    5870:	1882      	adds	r2, r0, r2
    5872:	4293      	cmp	r3, r2
    5874:	d100      	bne.n	5878 <memset+0xa>
    5876:	4770      	bx	lr
    5878:	7019      	strb	r1, [r3, #0]
    587a:	3301      	adds	r3, #1
    587c:	e7f9      	b.n	5872 <memset+0x4>
	...

00005880 <iprintf>:
    5880:	b40f      	push	{r0, r1, r2, r3}
    5882:	4b0b      	ldr	r3, [pc, #44]	; (58b0 <iprintf+0x30>)
    5884:	b513      	push	{r0, r1, r4, lr}
    5886:	681c      	ldr	r4, [r3, #0]
    5888:	2c00      	cmp	r4, #0
    588a:	d005      	beq.n	5898 <iprintf+0x18>
    588c:	69a3      	ldr	r3, [r4, #24]
    588e:	2b00      	cmp	r3, #0
    5890:	d102      	bne.n	5898 <iprintf+0x18>
    5892:	0020      	movs	r0, r4
    5894:	f000 fc2a 	bl	60ec <__sinit>
    5898:	ab05      	add	r3, sp, #20
    589a:	9a04      	ldr	r2, [sp, #16]
    589c:	68a1      	ldr	r1, [r4, #8]
    589e:	0020      	movs	r0, r4
    58a0:	9301      	str	r3, [sp, #4]
    58a2:	f000 fe3d 	bl	6520 <_vfiprintf_r>
    58a6:	bc16      	pop	{r1, r2, r4}
    58a8:	bc08      	pop	{r3}
    58aa:	b004      	add	sp, #16
    58ac:	4718      	bx	r3
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	20000040 	.word	0x20000040

000058b4 <_puts_r>:
    58b4:	b570      	push	{r4, r5, r6, lr}
    58b6:	0005      	movs	r5, r0
    58b8:	000e      	movs	r6, r1
    58ba:	2800      	cmp	r0, #0
    58bc:	d004      	beq.n	58c8 <_puts_r+0x14>
    58be:	6983      	ldr	r3, [r0, #24]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d101      	bne.n	58c8 <_puts_r+0x14>
    58c4:	f000 fc12 	bl	60ec <__sinit>
    58c8:	69ab      	ldr	r3, [r5, #24]
    58ca:	68ac      	ldr	r4, [r5, #8]
    58cc:	2b00      	cmp	r3, #0
    58ce:	d102      	bne.n	58d6 <_puts_r+0x22>
    58d0:	0028      	movs	r0, r5
    58d2:	f000 fc0b 	bl	60ec <__sinit>
    58d6:	4b24      	ldr	r3, [pc, #144]	; (5968 <_puts_r+0xb4>)
    58d8:	429c      	cmp	r4, r3
    58da:	d10f      	bne.n	58fc <_puts_r+0x48>
    58dc:	686c      	ldr	r4, [r5, #4]
    58de:	89a3      	ldrh	r3, [r4, #12]
    58e0:	071b      	lsls	r3, r3, #28
    58e2:	d502      	bpl.n	58ea <_puts_r+0x36>
    58e4:	6923      	ldr	r3, [r4, #16]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d120      	bne.n	592c <_puts_r+0x78>
    58ea:	0021      	movs	r1, r4
    58ec:	0028      	movs	r0, r5
    58ee:	f000 fa7b 	bl	5de8 <__swsetup_r>
    58f2:	2800      	cmp	r0, #0
    58f4:	d01a      	beq.n	592c <_puts_r+0x78>
    58f6:	2001      	movs	r0, #1
    58f8:	4240      	negs	r0, r0
    58fa:	bd70      	pop	{r4, r5, r6, pc}
    58fc:	4b1b      	ldr	r3, [pc, #108]	; (596c <_puts_r+0xb8>)
    58fe:	429c      	cmp	r4, r3
    5900:	d101      	bne.n	5906 <_puts_r+0x52>
    5902:	68ac      	ldr	r4, [r5, #8]
    5904:	e7eb      	b.n	58de <_puts_r+0x2a>
    5906:	4b1a      	ldr	r3, [pc, #104]	; (5970 <_puts_r+0xbc>)
    5908:	429c      	cmp	r4, r3
    590a:	d1e8      	bne.n	58de <_puts_r+0x2a>
    590c:	68ec      	ldr	r4, [r5, #12]
    590e:	e7e6      	b.n	58de <_puts_r+0x2a>
    5910:	3b01      	subs	r3, #1
    5912:	3601      	adds	r6, #1
    5914:	60a3      	str	r3, [r4, #8]
    5916:	2b00      	cmp	r3, #0
    5918:	da04      	bge.n	5924 <_puts_r+0x70>
    591a:	69a2      	ldr	r2, [r4, #24]
    591c:	4293      	cmp	r3, r2
    591e:	db16      	blt.n	594e <_puts_r+0x9a>
    5920:	290a      	cmp	r1, #10
    5922:	d014      	beq.n	594e <_puts_r+0x9a>
    5924:	6823      	ldr	r3, [r4, #0]
    5926:	1c5a      	adds	r2, r3, #1
    5928:	6022      	str	r2, [r4, #0]
    592a:	7019      	strb	r1, [r3, #0]
    592c:	7831      	ldrb	r1, [r6, #0]
    592e:	68a3      	ldr	r3, [r4, #8]
    5930:	2900      	cmp	r1, #0
    5932:	d1ed      	bne.n	5910 <_puts_r+0x5c>
    5934:	3b01      	subs	r3, #1
    5936:	60a3      	str	r3, [r4, #8]
    5938:	2b00      	cmp	r3, #0
    593a:	da0f      	bge.n	595c <_puts_r+0xa8>
    593c:	0022      	movs	r2, r4
    593e:	310a      	adds	r1, #10
    5940:	0028      	movs	r0, r5
    5942:	f000 f9fb 	bl	5d3c <__swbuf_r>
    5946:	1c43      	adds	r3, r0, #1
    5948:	d0d5      	beq.n	58f6 <_puts_r+0x42>
    594a:	200a      	movs	r0, #10
    594c:	e7d5      	b.n	58fa <_puts_r+0x46>
    594e:	0022      	movs	r2, r4
    5950:	0028      	movs	r0, r5
    5952:	f000 f9f3 	bl	5d3c <__swbuf_r>
    5956:	1c43      	adds	r3, r0, #1
    5958:	d1e8      	bne.n	592c <_puts_r+0x78>
    595a:	e7cc      	b.n	58f6 <_puts_r+0x42>
    595c:	200a      	movs	r0, #10
    595e:	6823      	ldr	r3, [r4, #0]
    5960:	1c5a      	adds	r2, r3, #1
    5962:	6022      	str	r2, [r4, #0]
    5964:	7018      	strb	r0, [r3, #0]
    5966:	e7c8      	b.n	58fa <_puts_r+0x46>
    5968:	00007ec0 	.word	0x00007ec0
    596c:	00007ee0 	.word	0x00007ee0
    5970:	00007ea0 	.word	0x00007ea0

00005974 <puts>:
    5974:	b510      	push	{r4, lr}
    5976:	4b03      	ldr	r3, [pc, #12]	; (5984 <puts+0x10>)
    5978:	0001      	movs	r1, r0
    597a:	6818      	ldr	r0, [r3, #0]
    597c:	f7ff ff9a 	bl	58b4 <_puts_r>
    5980:	bd10      	pop	{r4, pc}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	20000040 	.word	0x20000040

00005988 <iscanf>:
    5988:	b40f      	push	{r0, r1, r2, r3}
    598a:	4b0b      	ldr	r3, [pc, #44]	; (59b8 <iscanf+0x30>)
    598c:	b513      	push	{r0, r1, r4, lr}
    598e:	681c      	ldr	r4, [r3, #0]
    5990:	2c00      	cmp	r4, #0
    5992:	d005      	beq.n	59a0 <iscanf+0x18>
    5994:	69a3      	ldr	r3, [r4, #24]
    5996:	2b00      	cmp	r3, #0
    5998:	d102      	bne.n	59a0 <iscanf+0x18>
    599a:	0020      	movs	r0, r4
    599c:	f000 fba6 	bl	60ec <__sinit>
    59a0:	ab05      	add	r3, sp, #20
    59a2:	9a04      	ldr	r2, [sp, #16]
    59a4:	6861      	ldr	r1, [r4, #4]
    59a6:	0020      	movs	r0, r4
    59a8:	9301      	str	r3, [sp, #4]
    59aa:	f001 f9e3 	bl	6d74 <_vfiscanf_r>
    59ae:	bc16      	pop	{r1, r2, r4}
    59b0:	bc08      	pop	{r3}
    59b2:	b004      	add	sp, #16
    59b4:	4718      	bx	r3
    59b6:	46c0      	nop			; (mov r8, r8)
    59b8:	20000040 	.word	0x20000040

000059bc <setbuf>:
    59bc:	424a      	negs	r2, r1
    59be:	414a      	adcs	r2, r1
    59c0:	2380      	movs	r3, #128	; 0x80
    59c2:	b510      	push	{r4, lr}
    59c4:	0052      	lsls	r2, r2, #1
    59c6:	00db      	lsls	r3, r3, #3
    59c8:	f000 f802 	bl	59d0 <setvbuf>
    59cc:	bd10      	pop	{r4, pc}
	...

000059d0 <setvbuf>:
    59d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59d2:	001d      	movs	r5, r3
    59d4:	4b4f      	ldr	r3, [pc, #316]	; (5b14 <setvbuf+0x144>)
    59d6:	b085      	sub	sp, #20
    59d8:	681e      	ldr	r6, [r3, #0]
    59da:	0004      	movs	r4, r0
    59dc:	000f      	movs	r7, r1
    59de:	9200      	str	r2, [sp, #0]
    59e0:	2e00      	cmp	r6, #0
    59e2:	d005      	beq.n	59f0 <setvbuf+0x20>
    59e4:	69b3      	ldr	r3, [r6, #24]
    59e6:	2b00      	cmp	r3, #0
    59e8:	d102      	bne.n	59f0 <setvbuf+0x20>
    59ea:	0030      	movs	r0, r6
    59ec:	f000 fb7e 	bl	60ec <__sinit>
    59f0:	4b49      	ldr	r3, [pc, #292]	; (5b18 <setvbuf+0x148>)
    59f2:	429c      	cmp	r4, r3
    59f4:	d150      	bne.n	5a98 <setvbuf+0xc8>
    59f6:	6874      	ldr	r4, [r6, #4]
    59f8:	9b00      	ldr	r3, [sp, #0]
    59fa:	2b02      	cmp	r3, #2
    59fc:	d005      	beq.n	5a0a <setvbuf+0x3a>
    59fe:	2b01      	cmp	r3, #1
    5a00:	d900      	bls.n	5a04 <setvbuf+0x34>
    5a02:	e084      	b.n	5b0e <setvbuf+0x13e>
    5a04:	2d00      	cmp	r5, #0
    5a06:	da00      	bge.n	5a0a <setvbuf+0x3a>
    5a08:	e081      	b.n	5b0e <setvbuf+0x13e>
    5a0a:	0021      	movs	r1, r4
    5a0c:	0030      	movs	r0, r6
    5a0e:	f000 faeb 	bl	5fe8 <_fflush_r>
    5a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5a14:	2900      	cmp	r1, #0
    5a16:	d008      	beq.n	5a2a <setvbuf+0x5a>
    5a18:	0023      	movs	r3, r4
    5a1a:	3344      	adds	r3, #68	; 0x44
    5a1c:	4299      	cmp	r1, r3
    5a1e:	d002      	beq.n	5a26 <setvbuf+0x56>
    5a20:	0030      	movs	r0, r6
    5a22:	f000 fcad 	bl	6380 <_free_r>
    5a26:	2300      	movs	r3, #0
    5a28:	6363      	str	r3, [r4, #52]	; 0x34
    5a2a:	2300      	movs	r3, #0
    5a2c:	61a3      	str	r3, [r4, #24]
    5a2e:	6063      	str	r3, [r4, #4]
    5a30:	89a3      	ldrh	r3, [r4, #12]
    5a32:	061b      	lsls	r3, r3, #24
    5a34:	d503      	bpl.n	5a3e <setvbuf+0x6e>
    5a36:	6921      	ldr	r1, [r4, #16]
    5a38:	0030      	movs	r0, r6
    5a3a:	f000 fca1 	bl	6380 <_free_r>
    5a3e:	89a3      	ldrh	r3, [r4, #12]
    5a40:	4a36      	ldr	r2, [pc, #216]	; (5b1c <setvbuf+0x14c>)
    5a42:	4013      	ands	r3, r2
    5a44:	81a3      	strh	r3, [r4, #12]
    5a46:	9b00      	ldr	r3, [sp, #0]
    5a48:	2b02      	cmp	r3, #2
    5a4a:	d05a      	beq.n	5b02 <setvbuf+0x132>
    5a4c:	ab03      	add	r3, sp, #12
    5a4e:	aa02      	add	r2, sp, #8
    5a50:	0021      	movs	r1, r4
    5a52:	0030      	movs	r0, r6
    5a54:	f000 fc0c 	bl	6270 <__swhatbuf_r>
    5a58:	89a3      	ldrh	r3, [r4, #12]
    5a5a:	4318      	orrs	r0, r3
    5a5c:	81a0      	strh	r0, [r4, #12]
    5a5e:	2d00      	cmp	r5, #0
    5a60:	d124      	bne.n	5aac <setvbuf+0xdc>
    5a62:	9d02      	ldr	r5, [sp, #8]
    5a64:	0028      	movs	r0, r5
    5a66:	f000 fc6f 	bl	6348 <malloc>
    5a6a:	9501      	str	r5, [sp, #4]
    5a6c:	1e07      	subs	r7, r0, #0
    5a6e:	d142      	bne.n	5af6 <setvbuf+0x126>
    5a70:	9b02      	ldr	r3, [sp, #8]
    5a72:	9301      	str	r3, [sp, #4]
    5a74:	42ab      	cmp	r3, r5
    5a76:	d139      	bne.n	5aec <setvbuf+0x11c>
    5a78:	2001      	movs	r0, #1
    5a7a:	4240      	negs	r0, r0
    5a7c:	2302      	movs	r3, #2
    5a7e:	89a2      	ldrh	r2, [r4, #12]
    5a80:	4313      	orrs	r3, r2
    5a82:	81a3      	strh	r3, [r4, #12]
    5a84:	2300      	movs	r3, #0
    5a86:	60a3      	str	r3, [r4, #8]
    5a88:	0023      	movs	r3, r4
    5a8a:	3347      	adds	r3, #71	; 0x47
    5a8c:	6023      	str	r3, [r4, #0]
    5a8e:	6123      	str	r3, [r4, #16]
    5a90:	2301      	movs	r3, #1
    5a92:	6163      	str	r3, [r4, #20]
    5a94:	b005      	add	sp, #20
    5a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a98:	4b21      	ldr	r3, [pc, #132]	; (5b20 <setvbuf+0x150>)
    5a9a:	429c      	cmp	r4, r3
    5a9c:	d101      	bne.n	5aa2 <setvbuf+0xd2>
    5a9e:	68b4      	ldr	r4, [r6, #8]
    5aa0:	e7aa      	b.n	59f8 <setvbuf+0x28>
    5aa2:	4b20      	ldr	r3, [pc, #128]	; (5b24 <setvbuf+0x154>)
    5aa4:	429c      	cmp	r4, r3
    5aa6:	d1a7      	bne.n	59f8 <setvbuf+0x28>
    5aa8:	68f4      	ldr	r4, [r6, #12]
    5aaa:	e7a5      	b.n	59f8 <setvbuf+0x28>
    5aac:	2f00      	cmp	r7, #0
    5aae:	d0d9      	beq.n	5a64 <setvbuf+0x94>
    5ab0:	69b3      	ldr	r3, [r6, #24]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d102      	bne.n	5abc <setvbuf+0xec>
    5ab6:	0030      	movs	r0, r6
    5ab8:	f000 fb18 	bl	60ec <__sinit>
    5abc:	9b00      	ldr	r3, [sp, #0]
    5abe:	2b01      	cmp	r3, #1
    5ac0:	d103      	bne.n	5aca <setvbuf+0xfa>
    5ac2:	89a3      	ldrh	r3, [r4, #12]
    5ac4:	9a00      	ldr	r2, [sp, #0]
    5ac6:	431a      	orrs	r2, r3
    5ac8:	81a2      	strh	r2, [r4, #12]
    5aca:	2008      	movs	r0, #8
    5acc:	89a3      	ldrh	r3, [r4, #12]
    5ace:	6027      	str	r7, [r4, #0]
    5ad0:	6127      	str	r7, [r4, #16]
    5ad2:	6165      	str	r5, [r4, #20]
    5ad4:	4018      	ands	r0, r3
    5ad6:	d018      	beq.n	5b0a <setvbuf+0x13a>
    5ad8:	2001      	movs	r0, #1
    5ada:	4018      	ands	r0, r3
    5adc:	2300      	movs	r3, #0
    5ade:	4298      	cmp	r0, r3
    5ae0:	d011      	beq.n	5b06 <setvbuf+0x136>
    5ae2:	426d      	negs	r5, r5
    5ae4:	60a3      	str	r3, [r4, #8]
    5ae6:	61a5      	str	r5, [r4, #24]
    5ae8:	0018      	movs	r0, r3
    5aea:	e7d3      	b.n	5a94 <setvbuf+0xc4>
    5aec:	9801      	ldr	r0, [sp, #4]
    5aee:	f000 fc2b 	bl	6348 <malloc>
    5af2:	1e07      	subs	r7, r0, #0
    5af4:	d0c0      	beq.n	5a78 <setvbuf+0xa8>
    5af6:	2380      	movs	r3, #128	; 0x80
    5af8:	89a2      	ldrh	r2, [r4, #12]
    5afa:	9d01      	ldr	r5, [sp, #4]
    5afc:	4313      	orrs	r3, r2
    5afe:	81a3      	strh	r3, [r4, #12]
    5b00:	e7d6      	b.n	5ab0 <setvbuf+0xe0>
    5b02:	2000      	movs	r0, #0
    5b04:	e7ba      	b.n	5a7c <setvbuf+0xac>
    5b06:	60a5      	str	r5, [r4, #8]
    5b08:	e7c4      	b.n	5a94 <setvbuf+0xc4>
    5b0a:	60a0      	str	r0, [r4, #8]
    5b0c:	e7c2      	b.n	5a94 <setvbuf+0xc4>
    5b0e:	2001      	movs	r0, #1
    5b10:	4240      	negs	r0, r0
    5b12:	e7bf      	b.n	5a94 <setvbuf+0xc4>
    5b14:	20000040 	.word	0x20000040
    5b18:	00007ec0 	.word	0x00007ec0
    5b1c:	fffff35c 	.word	0xfffff35c
    5b20:	00007ee0 	.word	0x00007ee0
    5b24:	00007ea0 	.word	0x00007ea0

00005b28 <strcmp>:
    5b28:	7802      	ldrb	r2, [r0, #0]
    5b2a:	780b      	ldrb	r3, [r1, #0]
    5b2c:	2a00      	cmp	r2, #0
    5b2e:	d003      	beq.n	5b38 <strcmp+0x10>
    5b30:	3001      	adds	r0, #1
    5b32:	3101      	adds	r1, #1
    5b34:	429a      	cmp	r2, r3
    5b36:	d0f7      	beq.n	5b28 <strcmp>
    5b38:	1ad0      	subs	r0, r2, r3
    5b3a:	4770      	bx	lr

00005b3c <strtok>:
    5b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b3e:	4b12      	ldr	r3, [pc, #72]	; (5b88 <strtok+0x4c>)
    5b40:	0006      	movs	r6, r0
    5b42:	681d      	ldr	r5, [r3, #0]
    5b44:	000f      	movs	r7, r1
    5b46:	6dac      	ldr	r4, [r5, #88]	; 0x58
    5b48:	2c00      	cmp	r4, #0
    5b4a:	d116      	bne.n	5b7a <strtok+0x3e>
    5b4c:	2050      	movs	r0, #80	; 0x50
    5b4e:	f000 fbfb 	bl	6348 <malloc>
    5b52:	65a8      	str	r0, [r5, #88]	; 0x58
    5b54:	6004      	str	r4, [r0, #0]
    5b56:	6044      	str	r4, [r0, #4]
    5b58:	6084      	str	r4, [r0, #8]
    5b5a:	60c4      	str	r4, [r0, #12]
    5b5c:	6104      	str	r4, [r0, #16]
    5b5e:	6144      	str	r4, [r0, #20]
    5b60:	6184      	str	r4, [r0, #24]
    5b62:	6284      	str	r4, [r0, #40]	; 0x28
    5b64:	62c4      	str	r4, [r0, #44]	; 0x2c
    5b66:	6304      	str	r4, [r0, #48]	; 0x30
    5b68:	6344      	str	r4, [r0, #52]	; 0x34
    5b6a:	6384      	str	r4, [r0, #56]	; 0x38
    5b6c:	63c4      	str	r4, [r0, #60]	; 0x3c
    5b6e:	6404      	str	r4, [r0, #64]	; 0x40
    5b70:	6444      	str	r4, [r0, #68]	; 0x44
    5b72:	6484      	str	r4, [r0, #72]	; 0x48
    5b74:	64c4      	str	r4, [r0, #76]	; 0x4c
    5b76:	7704      	strb	r4, [r0, #28]
    5b78:	6244      	str	r4, [r0, #36]	; 0x24
    5b7a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    5b7c:	0039      	movs	r1, r7
    5b7e:	0030      	movs	r0, r6
    5b80:	2301      	movs	r3, #1
    5b82:	f000 f803 	bl	5b8c <__strtok_r>
    5b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b88:	20000040 	.word	0x20000040

00005b8c <__strtok_r>:
    5b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b8e:	2800      	cmp	r0, #0
    5b90:	d104      	bne.n	5b9c <__strtok_r+0x10>
    5b92:	6810      	ldr	r0, [r2, #0]
    5b94:	2800      	cmp	r0, #0
    5b96:	d101      	bne.n	5b9c <__strtok_r+0x10>
    5b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b9a:	0020      	movs	r0, r4
    5b9c:	000e      	movs	r6, r1
    5b9e:	7805      	ldrb	r5, [r0, #0]
    5ba0:	1c44      	adds	r4, r0, #1
    5ba2:	7837      	ldrb	r7, [r6, #0]
    5ba4:	2f00      	cmp	r7, #0
    5ba6:	d104      	bne.n	5bb2 <__strtok_r+0x26>
    5ba8:	2d00      	cmp	r5, #0
    5baa:	d110      	bne.n	5bce <__strtok_r+0x42>
    5bac:	6015      	str	r5, [r2, #0]
    5bae:	0028      	movs	r0, r5
    5bb0:	e7f2      	b.n	5b98 <__strtok_r+0xc>
    5bb2:	3601      	adds	r6, #1
    5bb4:	42bd      	cmp	r5, r7
    5bb6:	d1f4      	bne.n	5ba2 <__strtok_r+0x16>
    5bb8:	2b00      	cmp	r3, #0
    5bba:	d1ee      	bne.n	5b9a <__strtok_r+0xe>
    5bbc:	6014      	str	r4, [r2, #0]
    5bbe:	7003      	strb	r3, [r0, #0]
    5bc0:	e7ea      	b.n	5b98 <__strtok_r+0xc>
    5bc2:	0033      	movs	r3, r6
    5bc4:	e00e      	b.n	5be4 <__strtok_r+0x58>
    5bc6:	3501      	adds	r5, #1
    5bc8:	001c      	movs	r4, r3
    5bca:	2f00      	cmp	r7, #0
    5bcc:	d102      	bne.n	5bd4 <__strtok_r+0x48>
    5bce:	000d      	movs	r5, r1
    5bd0:	7826      	ldrb	r6, [r4, #0]
    5bd2:	1c63      	adds	r3, r4, #1
    5bd4:	782f      	ldrb	r7, [r5, #0]
    5bd6:	42be      	cmp	r6, r7
    5bd8:	d1f5      	bne.n	5bc6 <__strtok_r+0x3a>
    5bda:	2e00      	cmp	r6, #0
    5bdc:	d0f1      	beq.n	5bc2 <__strtok_r+0x36>
    5bde:	2400      	movs	r4, #0
    5be0:	1e59      	subs	r1, r3, #1
    5be2:	700c      	strb	r4, [r1, #0]
    5be4:	6013      	str	r3, [r2, #0]
    5be6:	e7d7      	b.n	5b98 <__strtok_r+0xc>

00005be8 <_strtol_l.isra.0>:
    5be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bea:	001f      	movs	r7, r3
    5bec:	000e      	movs	r6, r1
    5bee:	b087      	sub	sp, #28
    5bf0:	9005      	str	r0, [sp, #20]
    5bf2:	9103      	str	r1, [sp, #12]
    5bf4:	9202      	str	r2, [sp, #8]
    5bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
    5bf8:	7834      	ldrb	r4, [r6, #0]
    5bfa:	f000 fb28 	bl	624e <__locale_ctype_ptr_l>
    5bfe:	2208      	movs	r2, #8
    5c00:	1900      	adds	r0, r0, r4
    5c02:	7843      	ldrb	r3, [r0, #1]
    5c04:	1c75      	adds	r5, r6, #1
    5c06:	4013      	ands	r3, r2
    5c08:	d10c      	bne.n	5c24 <_strtol_l.isra.0+0x3c>
    5c0a:	2c2d      	cmp	r4, #45	; 0x2d
    5c0c:	d10c      	bne.n	5c28 <_strtol_l.isra.0+0x40>
    5c0e:	3301      	adds	r3, #1
    5c10:	782c      	ldrb	r4, [r5, #0]
    5c12:	9301      	str	r3, [sp, #4]
    5c14:	1cb5      	adds	r5, r6, #2
    5c16:	2f00      	cmp	r7, #0
    5c18:	d00c      	beq.n	5c34 <_strtol_l.isra.0+0x4c>
    5c1a:	2f10      	cmp	r7, #16
    5c1c:	d114      	bne.n	5c48 <_strtol_l.isra.0+0x60>
    5c1e:	2c30      	cmp	r4, #48	; 0x30
    5c20:	d00a      	beq.n	5c38 <_strtol_l.isra.0+0x50>
    5c22:	e011      	b.n	5c48 <_strtol_l.isra.0+0x60>
    5c24:	002e      	movs	r6, r5
    5c26:	e7e6      	b.n	5bf6 <_strtol_l.isra.0+0xe>
    5c28:	9301      	str	r3, [sp, #4]
    5c2a:	2c2b      	cmp	r4, #43	; 0x2b
    5c2c:	d1f3      	bne.n	5c16 <_strtol_l.isra.0+0x2e>
    5c2e:	782c      	ldrb	r4, [r5, #0]
    5c30:	1cb5      	adds	r5, r6, #2
    5c32:	e7f0      	b.n	5c16 <_strtol_l.isra.0+0x2e>
    5c34:	2c30      	cmp	r4, #48	; 0x30
    5c36:	d12f      	bne.n	5c98 <_strtol_l.isra.0+0xb0>
    5c38:	2220      	movs	r2, #32
    5c3a:	782b      	ldrb	r3, [r5, #0]
    5c3c:	4393      	bics	r3, r2
    5c3e:	2b58      	cmp	r3, #88	; 0x58
    5c40:	d151      	bne.n	5ce6 <_strtol_l.isra.0+0xfe>
    5c42:	2710      	movs	r7, #16
    5c44:	786c      	ldrb	r4, [r5, #1]
    5c46:	3502      	adds	r5, #2
    5c48:	9b01      	ldr	r3, [sp, #4]
    5c4a:	4a29      	ldr	r2, [pc, #164]	; (5cf0 <_strtol_l.isra.0+0x108>)
    5c4c:	0039      	movs	r1, r7
    5c4e:	189e      	adds	r6, r3, r2
    5c50:	0030      	movs	r0, r6
    5c52:	f7fd fa3d 	bl	30d0 <__aeabi_uidivmod>
    5c56:	0030      	movs	r0, r6
    5c58:	9104      	str	r1, [sp, #16]
    5c5a:	0039      	movs	r1, r7
    5c5c:	f7fd f9b2 	bl	2fc4 <__udivsi3>
    5c60:	2101      	movs	r1, #1
    5c62:	2300      	movs	r3, #0
    5c64:	4249      	negs	r1, r1
    5c66:	0002      	movs	r2, r0
    5c68:	468c      	mov	ip, r1
    5c6a:	0018      	movs	r0, r3
    5c6c:	0021      	movs	r1, r4
    5c6e:	3930      	subs	r1, #48	; 0x30
    5c70:	2909      	cmp	r1, #9
    5c72:	d813      	bhi.n	5c9c <_strtol_l.isra.0+0xb4>
    5c74:	000c      	movs	r4, r1
    5c76:	42a7      	cmp	r7, r4
    5c78:	dd1c      	ble.n	5cb4 <_strtol_l.isra.0+0xcc>
    5c7a:	1c59      	adds	r1, r3, #1
    5c7c:	d009      	beq.n	5c92 <_strtol_l.isra.0+0xaa>
    5c7e:	4663      	mov	r3, ip
    5c80:	4282      	cmp	r2, r0
    5c82:	d306      	bcc.n	5c92 <_strtol_l.isra.0+0xaa>
    5c84:	d102      	bne.n	5c8c <_strtol_l.isra.0+0xa4>
    5c86:	9904      	ldr	r1, [sp, #16]
    5c88:	42a1      	cmp	r1, r4
    5c8a:	db02      	blt.n	5c92 <_strtol_l.isra.0+0xaa>
    5c8c:	2301      	movs	r3, #1
    5c8e:	4378      	muls	r0, r7
    5c90:	1820      	adds	r0, r4, r0
    5c92:	782c      	ldrb	r4, [r5, #0]
    5c94:	3501      	adds	r5, #1
    5c96:	e7e9      	b.n	5c6c <_strtol_l.isra.0+0x84>
    5c98:	270a      	movs	r7, #10
    5c9a:	e7d5      	b.n	5c48 <_strtol_l.isra.0+0x60>
    5c9c:	0021      	movs	r1, r4
    5c9e:	3941      	subs	r1, #65	; 0x41
    5ca0:	2919      	cmp	r1, #25
    5ca2:	d801      	bhi.n	5ca8 <_strtol_l.isra.0+0xc0>
    5ca4:	3c37      	subs	r4, #55	; 0x37
    5ca6:	e7e6      	b.n	5c76 <_strtol_l.isra.0+0x8e>
    5ca8:	0021      	movs	r1, r4
    5caa:	3961      	subs	r1, #97	; 0x61
    5cac:	2919      	cmp	r1, #25
    5cae:	d801      	bhi.n	5cb4 <_strtol_l.isra.0+0xcc>
    5cb0:	3c57      	subs	r4, #87	; 0x57
    5cb2:	e7e0      	b.n	5c76 <_strtol_l.isra.0+0x8e>
    5cb4:	1c5a      	adds	r2, r3, #1
    5cb6:	d108      	bne.n	5cca <_strtol_l.isra.0+0xe2>
    5cb8:	9a05      	ldr	r2, [sp, #20]
    5cba:	3323      	adds	r3, #35	; 0x23
    5cbc:	6013      	str	r3, [r2, #0]
    5cbe:	9b02      	ldr	r3, [sp, #8]
    5cc0:	0030      	movs	r0, r6
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d10b      	bne.n	5cde <_strtol_l.isra.0+0xf6>
    5cc6:	b007      	add	sp, #28
    5cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cca:	9a01      	ldr	r2, [sp, #4]
    5ccc:	2a00      	cmp	r2, #0
    5cce:	d000      	beq.n	5cd2 <_strtol_l.isra.0+0xea>
    5cd0:	4240      	negs	r0, r0
    5cd2:	9a02      	ldr	r2, [sp, #8]
    5cd4:	2a00      	cmp	r2, #0
    5cd6:	d0f6      	beq.n	5cc6 <_strtol_l.isra.0+0xde>
    5cd8:	9a03      	ldr	r2, [sp, #12]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d000      	beq.n	5ce0 <_strtol_l.isra.0+0xf8>
    5cde:	1e6a      	subs	r2, r5, #1
    5ce0:	9b02      	ldr	r3, [sp, #8]
    5ce2:	601a      	str	r2, [r3, #0]
    5ce4:	e7ef      	b.n	5cc6 <_strtol_l.isra.0+0xde>
    5ce6:	2430      	movs	r4, #48	; 0x30
    5ce8:	2f00      	cmp	r7, #0
    5cea:	d1ad      	bne.n	5c48 <_strtol_l.isra.0+0x60>
    5cec:	3708      	adds	r7, #8
    5cee:	e7ab      	b.n	5c48 <_strtol_l.isra.0+0x60>
    5cf0:	7fffffff 	.word	0x7fffffff

00005cf4 <_strtol_r>:
    5cf4:	b513      	push	{r0, r1, r4, lr}
    5cf6:	4c05      	ldr	r4, [pc, #20]	; (5d0c <_strtol_r+0x18>)
    5cf8:	6824      	ldr	r4, [r4, #0]
    5cfa:	6a24      	ldr	r4, [r4, #32]
    5cfc:	2c00      	cmp	r4, #0
    5cfe:	d100      	bne.n	5d02 <_strtol_r+0xe>
    5d00:	4c03      	ldr	r4, [pc, #12]	; (5d10 <_strtol_r+0x1c>)
    5d02:	9400      	str	r4, [sp, #0]
    5d04:	f7ff ff70 	bl	5be8 <_strtol_l.isra.0>
    5d08:	bd16      	pop	{r1, r2, r4, pc}
    5d0a:	46c0      	nop			; (mov r8, r8)
    5d0c:	20000040 	.word	0x20000040
    5d10:	200000a4 	.word	0x200000a4

00005d14 <strtol>:
    5d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d16:	0013      	movs	r3, r2
    5d18:	4a06      	ldr	r2, [pc, #24]	; (5d34 <strtol+0x20>)
    5d1a:	0005      	movs	r5, r0
    5d1c:	6810      	ldr	r0, [r2, #0]
    5d1e:	6a04      	ldr	r4, [r0, #32]
    5d20:	2c00      	cmp	r4, #0
    5d22:	d100      	bne.n	5d26 <strtol+0x12>
    5d24:	4c04      	ldr	r4, [pc, #16]	; (5d38 <strtol+0x24>)
    5d26:	000a      	movs	r2, r1
    5d28:	9400      	str	r4, [sp, #0]
    5d2a:	0029      	movs	r1, r5
    5d2c:	f7ff ff5c 	bl	5be8 <_strtol_l.isra.0>
    5d30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	20000040 	.word	0x20000040
    5d38:	200000a4 	.word	0x200000a4

00005d3c <__swbuf_r>:
    5d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d3e:	0005      	movs	r5, r0
    5d40:	000e      	movs	r6, r1
    5d42:	0014      	movs	r4, r2
    5d44:	2800      	cmp	r0, #0
    5d46:	d004      	beq.n	5d52 <__swbuf_r+0x16>
    5d48:	6983      	ldr	r3, [r0, #24]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d101      	bne.n	5d52 <__swbuf_r+0x16>
    5d4e:	f000 f9cd 	bl	60ec <__sinit>
    5d52:	4b22      	ldr	r3, [pc, #136]	; (5ddc <__swbuf_r+0xa0>)
    5d54:	429c      	cmp	r4, r3
    5d56:	d12d      	bne.n	5db4 <__swbuf_r+0x78>
    5d58:	686c      	ldr	r4, [r5, #4]
    5d5a:	69a3      	ldr	r3, [r4, #24]
    5d5c:	60a3      	str	r3, [r4, #8]
    5d5e:	89a3      	ldrh	r3, [r4, #12]
    5d60:	071b      	lsls	r3, r3, #28
    5d62:	d531      	bpl.n	5dc8 <__swbuf_r+0x8c>
    5d64:	6923      	ldr	r3, [r4, #16]
    5d66:	2b00      	cmp	r3, #0
    5d68:	d02e      	beq.n	5dc8 <__swbuf_r+0x8c>
    5d6a:	6823      	ldr	r3, [r4, #0]
    5d6c:	6922      	ldr	r2, [r4, #16]
    5d6e:	b2f7      	uxtb	r7, r6
    5d70:	1a98      	subs	r0, r3, r2
    5d72:	6963      	ldr	r3, [r4, #20]
    5d74:	b2f6      	uxtb	r6, r6
    5d76:	4298      	cmp	r0, r3
    5d78:	db05      	blt.n	5d86 <__swbuf_r+0x4a>
    5d7a:	0021      	movs	r1, r4
    5d7c:	0028      	movs	r0, r5
    5d7e:	f000 f933 	bl	5fe8 <_fflush_r>
    5d82:	2800      	cmp	r0, #0
    5d84:	d126      	bne.n	5dd4 <__swbuf_r+0x98>
    5d86:	68a3      	ldr	r3, [r4, #8]
    5d88:	3001      	adds	r0, #1
    5d8a:	3b01      	subs	r3, #1
    5d8c:	60a3      	str	r3, [r4, #8]
    5d8e:	6823      	ldr	r3, [r4, #0]
    5d90:	1c5a      	adds	r2, r3, #1
    5d92:	6022      	str	r2, [r4, #0]
    5d94:	701f      	strb	r7, [r3, #0]
    5d96:	6963      	ldr	r3, [r4, #20]
    5d98:	4298      	cmp	r0, r3
    5d9a:	d004      	beq.n	5da6 <__swbuf_r+0x6a>
    5d9c:	89a3      	ldrh	r3, [r4, #12]
    5d9e:	07db      	lsls	r3, r3, #31
    5da0:	d51a      	bpl.n	5dd8 <__swbuf_r+0x9c>
    5da2:	2e0a      	cmp	r6, #10
    5da4:	d118      	bne.n	5dd8 <__swbuf_r+0x9c>
    5da6:	0021      	movs	r1, r4
    5da8:	0028      	movs	r0, r5
    5daa:	f000 f91d 	bl	5fe8 <_fflush_r>
    5dae:	2800      	cmp	r0, #0
    5db0:	d012      	beq.n	5dd8 <__swbuf_r+0x9c>
    5db2:	e00f      	b.n	5dd4 <__swbuf_r+0x98>
    5db4:	4b0a      	ldr	r3, [pc, #40]	; (5de0 <__swbuf_r+0xa4>)
    5db6:	429c      	cmp	r4, r3
    5db8:	d101      	bne.n	5dbe <__swbuf_r+0x82>
    5dba:	68ac      	ldr	r4, [r5, #8]
    5dbc:	e7cd      	b.n	5d5a <__swbuf_r+0x1e>
    5dbe:	4b09      	ldr	r3, [pc, #36]	; (5de4 <__swbuf_r+0xa8>)
    5dc0:	429c      	cmp	r4, r3
    5dc2:	d1ca      	bne.n	5d5a <__swbuf_r+0x1e>
    5dc4:	68ec      	ldr	r4, [r5, #12]
    5dc6:	e7c8      	b.n	5d5a <__swbuf_r+0x1e>
    5dc8:	0021      	movs	r1, r4
    5dca:	0028      	movs	r0, r5
    5dcc:	f000 f80c 	bl	5de8 <__swsetup_r>
    5dd0:	2800      	cmp	r0, #0
    5dd2:	d0ca      	beq.n	5d6a <__swbuf_r+0x2e>
    5dd4:	2601      	movs	r6, #1
    5dd6:	4276      	negs	r6, r6
    5dd8:	0030      	movs	r0, r6
    5dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ddc:	00007ec0 	.word	0x00007ec0
    5de0:	00007ee0 	.word	0x00007ee0
    5de4:	00007ea0 	.word	0x00007ea0

00005de8 <__swsetup_r>:
    5de8:	4b36      	ldr	r3, [pc, #216]	; (5ec4 <__swsetup_r+0xdc>)
    5dea:	b570      	push	{r4, r5, r6, lr}
    5dec:	681d      	ldr	r5, [r3, #0]
    5dee:	0006      	movs	r6, r0
    5df0:	000c      	movs	r4, r1
    5df2:	2d00      	cmp	r5, #0
    5df4:	d005      	beq.n	5e02 <__swsetup_r+0x1a>
    5df6:	69ab      	ldr	r3, [r5, #24]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d102      	bne.n	5e02 <__swsetup_r+0x1a>
    5dfc:	0028      	movs	r0, r5
    5dfe:	f000 f975 	bl	60ec <__sinit>
    5e02:	4b31      	ldr	r3, [pc, #196]	; (5ec8 <__swsetup_r+0xe0>)
    5e04:	429c      	cmp	r4, r3
    5e06:	d10f      	bne.n	5e28 <__swsetup_r+0x40>
    5e08:	686c      	ldr	r4, [r5, #4]
    5e0a:	230c      	movs	r3, #12
    5e0c:	5ee2      	ldrsh	r2, [r4, r3]
    5e0e:	b293      	uxth	r3, r2
    5e10:	0719      	lsls	r1, r3, #28
    5e12:	d42d      	bmi.n	5e70 <__swsetup_r+0x88>
    5e14:	06d9      	lsls	r1, r3, #27
    5e16:	d411      	bmi.n	5e3c <__swsetup_r+0x54>
    5e18:	2309      	movs	r3, #9
    5e1a:	2001      	movs	r0, #1
    5e1c:	6033      	str	r3, [r6, #0]
    5e1e:	3337      	adds	r3, #55	; 0x37
    5e20:	4313      	orrs	r3, r2
    5e22:	81a3      	strh	r3, [r4, #12]
    5e24:	4240      	negs	r0, r0
    5e26:	bd70      	pop	{r4, r5, r6, pc}
    5e28:	4b28      	ldr	r3, [pc, #160]	; (5ecc <__swsetup_r+0xe4>)
    5e2a:	429c      	cmp	r4, r3
    5e2c:	d101      	bne.n	5e32 <__swsetup_r+0x4a>
    5e2e:	68ac      	ldr	r4, [r5, #8]
    5e30:	e7eb      	b.n	5e0a <__swsetup_r+0x22>
    5e32:	4b27      	ldr	r3, [pc, #156]	; (5ed0 <__swsetup_r+0xe8>)
    5e34:	429c      	cmp	r4, r3
    5e36:	d1e8      	bne.n	5e0a <__swsetup_r+0x22>
    5e38:	68ec      	ldr	r4, [r5, #12]
    5e3a:	e7e6      	b.n	5e0a <__swsetup_r+0x22>
    5e3c:	075b      	lsls	r3, r3, #29
    5e3e:	d513      	bpl.n	5e68 <__swsetup_r+0x80>
    5e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5e42:	2900      	cmp	r1, #0
    5e44:	d008      	beq.n	5e58 <__swsetup_r+0x70>
    5e46:	0023      	movs	r3, r4
    5e48:	3344      	adds	r3, #68	; 0x44
    5e4a:	4299      	cmp	r1, r3
    5e4c:	d002      	beq.n	5e54 <__swsetup_r+0x6c>
    5e4e:	0030      	movs	r0, r6
    5e50:	f000 fa96 	bl	6380 <_free_r>
    5e54:	2300      	movs	r3, #0
    5e56:	6363      	str	r3, [r4, #52]	; 0x34
    5e58:	2224      	movs	r2, #36	; 0x24
    5e5a:	89a3      	ldrh	r3, [r4, #12]
    5e5c:	4393      	bics	r3, r2
    5e5e:	81a3      	strh	r3, [r4, #12]
    5e60:	2300      	movs	r3, #0
    5e62:	6063      	str	r3, [r4, #4]
    5e64:	6923      	ldr	r3, [r4, #16]
    5e66:	6023      	str	r3, [r4, #0]
    5e68:	2308      	movs	r3, #8
    5e6a:	89a2      	ldrh	r2, [r4, #12]
    5e6c:	4313      	orrs	r3, r2
    5e6e:	81a3      	strh	r3, [r4, #12]
    5e70:	6923      	ldr	r3, [r4, #16]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d10b      	bne.n	5e8e <__swsetup_r+0xa6>
    5e76:	21a0      	movs	r1, #160	; 0xa0
    5e78:	2280      	movs	r2, #128	; 0x80
    5e7a:	89a3      	ldrh	r3, [r4, #12]
    5e7c:	0089      	lsls	r1, r1, #2
    5e7e:	0092      	lsls	r2, r2, #2
    5e80:	400b      	ands	r3, r1
    5e82:	4293      	cmp	r3, r2
    5e84:	d003      	beq.n	5e8e <__swsetup_r+0xa6>
    5e86:	0021      	movs	r1, r4
    5e88:	0030      	movs	r0, r6
    5e8a:	f000 fa19 	bl	62c0 <__smakebuf_r>
    5e8e:	2301      	movs	r3, #1
    5e90:	89a2      	ldrh	r2, [r4, #12]
    5e92:	4013      	ands	r3, r2
    5e94:	d011      	beq.n	5eba <__swsetup_r+0xd2>
    5e96:	2300      	movs	r3, #0
    5e98:	60a3      	str	r3, [r4, #8]
    5e9a:	6963      	ldr	r3, [r4, #20]
    5e9c:	425b      	negs	r3, r3
    5e9e:	61a3      	str	r3, [r4, #24]
    5ea0:	2000      	movs	r0, #0
    5ea2:	6923      	ldr	r3, [r4, #16]
    5ea4:	4283      	cmp	r3, r0
    5ea6:	d1be      	bne.n	5e26 <__swsetup_r+0x3e>
    5ea8:	230c      	movs	r3, #12
    5eaa:	5ee2      	ldrsh	r2, [r4, r3]
    5eac:	0613      	lsls	r3, r2, #24
    5eae:	d5ba      	bpl.n	5e26 <__swsetup_r+0x3e>
    5eb0:	2340      	movs	r3, #64	; 0x40
    5eb2:	4313      	orrs	r3, r2
    5eb4:	81a3      	strh	r3, [r4, #12]
    5eb6:	3801      	subs	r0, #1
    5eb8:	e7b5      	b.n	5e26 <__swsetup_r+0x3e>
    5eba:	0792      	lsls	r2, r2, #30
    5ebc:	d400      	bmi.n	5ec0 <__swsetup_r+0xd8>
    5ebe:	6963      	ldr	r3, [r4, #20]
    5ec0:	60a3      	str	r3, [r4, #8]
    5ec2:	e7ed      	b.n	5ea0 <__swsetup_r+0xb8>
    5ec4:	20000040 	.word	0x20000040
    5ec8:	00007ec0 	.word	0x00007ec0
    5ecc:	00007ee0 	.word	0x00007ee0
    5ed0:	00007ea0 	.word	0x00007ea0

00005ed4 <__sflush_r>:
    5ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ed6:	898a      	ldrh	r2, [r1, #12]
    5ed8:	0005      	movs	r5, r0
    5eda:	000c      	movs	r4, r1
    5edc:	0713      	lsls	r3, r2, #28
    5ede:	d460      	bmi.n	5fa2 <__sflush_r+0xce>
    5ee0:	684b      	ldr	r3, [r1, #4]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	dc04      	bgt.n	5ef0 <__sflush_r+0x1c>
    5ee6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5ee8:	2b00      	cmp	r3, #0
    5eea:	dc01      	bgt.n	5ef0 <__sflush_r+0x1c>
    5eec:	2000      	movs	r0, #0
    5eee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5ef0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5ef2:	2f00      	cmp	r7, #0
    5ef4:	d0fa      	beq.n	5eec <__sflush_r+0x18>
    5ef6:	2300      	movs	r3, #0
    5ef8:	682e      	ldr	r6, [r5, #0]
    5efa:	602b      	str	r3, [r5, #0]
    5efc:	2380      	movs	r3, #128	; 0x80
    5efe:	015b      	lsls	r3, r3, #5
    5f00:	401a      	ands	r2, r3
    5f02:	d034      	beq.n	5f6e <__sflush_r+0x9a>
    5f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5f06:	89a3      	ldrh	r3, [r4, #12]
    5f08:	075b      	lsls	r3, r3, #29
    5f0a:	d506      	bpl.n	5f1a <__sflush_r+0x46>
    5f0c:	6863      	ldr	r3, [r4, #4]
    5f0e:	1ac0      	subs	r0, r0, r3
    5f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5f12:	2b00      	cmp	r3, #0
    5f14:	d001      	beq.n	5f1a <__sflush_r+0x46>
    5f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5f18:	1ac0      	subs	r0, r0, r3
    5f1a:	0002      	movs	r2, r0
    5f1c:	6a21      	ldr	r1, [r4, #32]
    5f1e:	2300      	movs	r3, #0
    5f20:	0028      	movs	r0, r5
    5f22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5f24:	47b8      	blx	r7
    5f26:	89a1      	ldrh	r1, [r4, #12]
    5f28:	1c43      	adds	r3, r0, #1
    5f2a:	d106      	bne.n	5f3a <__sflush_r+0x66>
    5f2c:	682b      	ldr	r3, [r5, #0]
    5f2e:	2b1d      	cmp	r3, #29
    5f30:	d831      	bhi.n	5f96 <__sflush_r+0xc2>
    5f32:	4a2c      	ldr	r2, [pc, #176]	; (5fe4 <__sflush_r+0x110>)
    5f34:	40da      	lsrs	r2, r3
    5f36:	07d3      	lsls	r3, r2, #31
    5f38:	d52d      	bpl.n	5f96 <__sflush_r+0xc2>
    5f3a:	2300      	movs	r3, #0
    5f3c:	6063      	str	r3, [r4, #4]
    5f3e:	6923      	ldr	r3, [r4, #16]
    5f40:	6023      	str	r3, [r4, #0]
    5f42:	04cb      	lsls	r3, r1, #19
    5f44:	d505      	bpl.n	5f52 <__sflush_r+0x7e>
    5f46:	1c43      	adds	r3, r0, #1
    5f48:	d102      	bne.n	5f50 <__sflush_r+0x7c>
    5f4a:	682b      	ldr	r3, [r5, #0]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d100      	bne.n	5f52 <__sflush_r+0x7e>
    5f50:	6560      	str	r0, [r4, #84]	; 0x54
    5f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f54:	602e      	str	r6, [r5, #0]
    5f56:	2900      	cmp	r1, #0
    5f58:	d0c8      	beq.n	5eec <__sflush_r+0x18>
    5f5a:	0023      	movs	r3, r4
    5f5c:	3344      	adds	r3, #68	; 0x44
    5f5e:	4299      	cmp	r1, r3
    5f60:	d002      	beq.n	5f68 <__sflush_r+0x94>
    5f62:	0028      	movs	r0, r5
    5f64:	f000 fa0c 	bl	6380 <_free_r>
    5f68:	2000      	movs	r0, #0
    5f6a:	6360      	str	r0, [r4, #52]	; 0x34
    5f6c:	e7bf      	b.n	5eee <__sflush_r+0x1a>
    5f6e:	2301      	movs	r3, #1
    5f70:	6a21      	ldr	r1, [r4, #32]
    5f72:	0028      	movs	r0, r5
    5f74:	47b8      	blx	r7
    5f76:	1c43      	adds	r3, r0, #1
    5f78:	d1c5      	bne.n	5f06 <__sflush_r+0x32>
    5f7a:	682b      	ldr	r3, [r5, #0]
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d0c2      	beq.n	5f06 <__sflush_r+0x32>
    5f80:	2b1d      	cmp	r3, #29
    5f82:	d001      	beq.n	5f88 <__sflush_r+0xb4>
    5f84:	2b16      	cmp	r3, #22
    5f86:	d101      	bne.n	5f8c <__sflush_r+0xb8>
    5f88:	602e      	str	r6, [r5, #0]
    5f8a:	e7af      	b.n	5eec <__sflush_r+0x18>
    5f8c:	2340      	movs	r3, #64	; 0x40
    5f8e:	89a2      	ldrh	r2, [r4, #12]
    5f90:	4313      	orrs	r3, r2
    5f92:	81a3      	strh	r3, [r4, #12]
    5f94:	e7ab      	b.n	5eee <__sflush_r+0x1a>
    5f96:	2340      	movs	r3, #64	; 0x40
    5f98:	430b      	orrs	r3, r1
    5f9a:	2001      	movs	r0, #1
    5f9c:	81a3      	strh	r3, [r4, #12]
    5f9e:	4240      	negs	r0, r0
    5fa0:	e7a5      	b.n	5eee <__sflush_r+0x1a>
    5fa2:	690f      	ldr	r7, [r1, #16]
    5fa4:	2f00      	cmp	r7, #0
    5fa6:	d0a1      	beq.n	5eec <__sflush_r+0x18>
    5fa8:	680b      	ldr	r3, [r1, #0]
    5faa:	600f      	str	r7, [r1, #0]
    5fac:	1bdb      	subs	r3, r3, r7
    5fae:	9301      	str	r3, [sp, #4]
    5fb0:	2300      	movs	r3, #0
    5fb2:	0792      	lsls	r2, r2, #30
    5fb4:	d100      	bne.n	5fb8 <__sflush_r+0xe4>
    5fb6:	694b      	ldr	r3, [r1, #20]
    5fb8:	60a3      	str	r3, [r4, #8]
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	dc00      	bgt.n	5fc2 <__sflush_r+0xee>
    5fc0:	e794      	b.n	5eec <__sflush_r+0x18>
    5fc2:	9b01      	ldr	r3, [sp, #4]
    5fc4:	003a      	movs	r2, r7
    5fc6:	6a21      	ldr	r1, [r4, #32]
    5fc8:	0028      	movs	r0, r5
    5fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5fcc:	47b0      	blx	r6
    5fce:	2800      	cmp	r0, #0
    5fd0:	dc03      	bgt.n	5fda <__sflush_r+0x106>
    5fd2:	2340      	movs	r3, #64	; 0x40
    5fd4:	89a2      	ldrh	r2, [r4, #12]
    5fd6:	4313      	orrs	r3, r2
    5fd8:	e7df      	b.n	5f9a <__sflush_r+0xc6>
    5fda:	9b01      	ldr	r3, [sp, #4]
    5fdc:	183f      	adds	r7, r7, r0
    5fde:	1a1b      	subs	r3, r3, r0
    5fe0:	9301      	str	r3, [sp, #4]
    5fe2:	e7ea      	b.n	5fba <__sflush_r+0xe6>
    5fe4:	20400001 	.word	0x20400001

00005fe8 <_fflush_r>:
    5fe8:	690b      	ldr	r3, [r1, #16]
    5fea:	b570      	push	{r4, r5, r6, lr}
    5fec:	0005      	movs	r5, r0
    5fee:	000c      	movs	r4, r1
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d101      	bne.n	5ff8 <_fflush_r+0x10>
    5ff4:	2000      	movs	r0, #0
    5ff6:	bd70      	pop	{r4, r5, r6, pc}
    5ff8:	2800      	cmp	r0, #0
    5ffa:	d004      	beq.n	6006 <_fflush_r+0x1e>
    5ffc:	6983      	ldr	r3, [r0, #24]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d101      	bne.n	6006 <_fflush_r+0x1e>
    6002:	f000 f873 	bl	60ec <__sinit>
    6006:	4b0b      	ldr	r3, [pc, #44]	; (6034 <_fflush_r+0x4c>)
    6008:	429c      	cmp	r4, r3
    600a:	d109      	bne.n	6020 <_fflush_r+0x38>
    600c:	686c      	ldr	r4, [r5, #4]
    600e:	220c      	movs	r2, #12
    6010:	5ea3      	ldrsh	r3, [r4, r2]
    6012:	2b00      	cmp	r3, #0
    6014:	d0ee      	beq.n	5ff4 <_fflush_r+0xc>
    6016:	0021      	movs	r1, r4
    6018:	0028      	movs	r0, r5
    601a:	f7ff ff5b 	bl	5ed4 <__sflush_r>
    601e:	e7ea      	b.n	5ff6 <_fflush_r+0xe>
    6020:	4b05      	ldr	r3, [pc, #20]	; (6038 <_fflush_r+0x50>)
    6022:	429c      	cmp	r4, r3
    6024:	d101      	bne.n	602a <_fflush_r+0x42>
    6026:	68ac      	ldr	r4, [r5, #8]
    6028:	e7f1      	b.n	600e <_fflush_r+0x26>
    602a:	4b04      	ldr	r3, [pc, #16]	; (603c <_fflush_r+0x54>)
    602c:	429c      	cmp	r4, r3
    602e:	d1ee      	bne.n	600e <_fflush_r+0x26>
    6030:	68ec      	ldr	r4, [r5, #12]
    6032:	e7ec      	b.n	600e <_fflush_r+0x26>
    6034:	00007ec0 	.word	0x00007ec0
    6038:	00007ee0 	.word	0x00007ee0
    603c:	00007ea0 	.word	0x00007ea0

00006040 <fflush>:
    6040:	b510      	push	{r4, lr}
    6042:	1e01      	subs	r1, r0, #0
    6044:	d105      	bne.n	6052 <fflush+0x12>
    6046:	4b05      	ldr	r3, [pc, #20]	; (605c <fflush+0x1c>)
    6048:	4905      	ldr	r1, [pc, #20]	; (6060 <fflush+0x20>)
    604a:	6818      	ldr	r0, [r3, #0]
    604c:	f000 f8de 	bl	620c <_fwalk_reent>
    6050:	bd10      	pop	{r4, pc}
    6052:	4b04      	ldr	r3, [pc, #16]	; (6064 <fflush+0x24>)
    6054:	6818      	ldr	r0, [r3, #0]
    6056:	f7ff ffc7 	bl	5fe8 <_fflush_r>
    605a:	e7f9      	b.n	6050 <fflush+0x10>
    605c:	00007e9c 	.word	0x00007e9c
    6060:	00005fe9 	.word	0x00005fe9
    6064:	20000040 	.word	0x20000040

00006068 <_cleanup_r>:
    6068:	b510      	push	{r4, lr}
    606a:	4902      	ldr	r1, [pc, #8]	; (6074 <_cleanup_r+0xc>)
    606c:	f000 f8ce 	bl	620c <_fwalk_reent>
    6070:	bd10      	pop	{r4, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	00005fe9 	.word	0x00005fe9

00006078 <std.isra.0>:
    6078:	2300      	movs	r3, #0
    607a:	b510      	push	{r4, lr}
    607c:	0004      	movs	r4, r0
    607e:	6003      	str	r3, [r0, #0]
    6080:	6043      	str	r3, [r0, #4]
    6082:	6083      	str	r3, [r0, #8]
    6084:	8181      	strh	r1, [r0, #12]
    6086:	6643      	str	r3, [r0, #100]	; 0x64
    6088:	81c2      	strh	r2, [r0, #14]
    608a:	6103      	str	r3, [r0, #16]
    608c:	6143      	str	r3, [r0, #20]
    608e:	6183      	str	r3, [r0, #24]
    6090:	0019      	movs	r1, r3
    6092:	2208      	movs	r2, #8
    6094:	305c      	adds	r0, #92	; 0x5c
    6096:	f7ff fbea 	bl	586e <memset>
    609a:	4b05      	ldr	r3, [pc, #20]	; (60b0 <std.isra.0+0x38>)
    609c:	6224      	str	r4, [r4, #32]
    609e:	6263      	str	r3, [r4, #36]	; 0x24
    60a0:	4b04      	ldr	r3, [pc, #16]	; (60b4 <std.isra.0+0x3c>)
    60a2:	62a3      	str	r3, [r4, #40]	; 0x28
    60a4:	4b04      	ldr	r3, [pc, #16]	; (60b8 <std.isra.0+0x40>)
    60a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    60a8:	4b04      	ldr	r3, [pc, #16]	; (60bc <std.isra.0+0x44>)
    60aa:	6323      	str	r3, [r4, #48]	; 0x30
    60ac:	bd10      	pop	{r4, pc}
    60ae:	46c0      	nop			; (mov r8, r8)
    60b0:	0000724d 	.word	0x0000724d
    60b4:	00007275 	.word	0x00007275
    60b8:	000072ad 	.word	0x000072ad
    60bc:	000072d9 	.word	0x000072d9

000060c0 <__sfmoreglue>:
    60c0:	b570      	push	{r4, r5, r6, lr}
    60c2:	2568      	movs	r5, #104	; 0x68
    60c4:	1e4a      	subs	r2, r1, #1
    60c6:	4355      	muls	r5, r2
    60c8:	000e      	movs	r6, r1
    60ca:	0029      	movs	r1, r5
    60cc:	3174      	adds	r1, #116	; 0x74
    60ce:	f000 f9a1 	bl	6414 <_malloc_r>
    60d2:	1e04      	subs	r4, r0, #0
    60d4:	d008      	beq.n	60e8 <__sfmoreglue+0x28>
    60d6:	2100      	movs	r1, #0
    60d8:	002a      	movs	r2, r5
    60da:	6001      	str	r1, [r0, #0]
    60dc:	6046      	str	r6, [r0, #4]
    60de:	300c      	adds	r0, #12
    60e0:	60a0      	str	r0, [r4, #8]
    60e2:	3268      	adds	r2, #104	; 0x68
    60e4:	f7ff fbc3 	bl	586e <memset>
    60e8:	0020      	movs	r0, r4
    60ea:	bd70      	pop	{r4, r5, r6, pc}

000060ec <__sinit>:
    60ec:	6983      	ldr	r3, [r0, #24]
    60ee:	b513      	push	{r0, r1, r4, lr}
    60f0:	0004      	movs	r4, r0
    60f2:	2b00      	cmp	r3, #0
    60f4:	d128      	bne.n	6148 <__sinit+0x5c>
    60f6:	6483      	str	r3, [r0, #72]	; 0x48
    60f8:	64c3      	str	r3, [r0, #76]	; 0x4c
    60fa:	6503      	str	r3, [r0, #80]	; 0x50
    60fc:	4b13      	ldr	r3, [pc, #76]	; (614c <__sinit+0x60>)
    60fe:	4a14      	ldr	r2, [pc, #80]	; (6150 <__sinit+0x64>)
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	6282      	str	r2, [r0, #40]	; 0x28
    6104:	9301      	str	r3, [sp, #4]
    6106:	4298      	cmp	r0, r3
    6108:	d101      	bne.n	610e <__sinit+0x22>
    610a:	2301      	movs	r3, #1
    610c:	6183      	str	r3, [r0, #24]
    610e:	0020      	movs	r0, r4
    6110:	f000 f820 	bl	6154 <__sfp>
    6114:	6060      	str	r0, [r4, #4]
    6116:	0020      	movs	r0, r4
    6118:	f000 f81c 	bl	6154 <__sfp>
    611c:	60a0      	str	r0, [r4, #8]
    611e:	0020      	movs	r0, r4
    6120:	f000 f818 	bl	6154 <__sfp>
    6124:	2200      	movs	r2, #0
    6126:	60e0      	str	r0, [r4, #12]
    6128:	2104      	movs	r1, #4
    612a:	6860      	ldr	r0, [r4, #4]
    612c:	f7ff ffa4 	bl	6078 <std.isra.0>
    6130:	2201      	movs	r2, #1
    6132:	2109      	movs	r1, #9
    6134:	68a0      	ldr	r0, [r4, #8]
    6136:	f7ff ff9f 	bl	6078 <std.isra.0>
    613a:	2202      	movs	r2, #2
    613c:	2112      	movs	r1, #18
    613e:	68e0      	ldr	r0, [r4, #12]
    6140:	f7ff ff9a 	bl	6078 <std.isra.0>
    6144:	2301      	movs	r3, #1
    6146:	61a3      	str	r3, [r4, #24]
    6148:	bd13      	pop	{r0, r1, r4, pc}
    614a:	46c0      	nop			; (mov r8, r8)
    614c:	00007e9c 	.word	0x00007e9c
    6150:	00006069 	.word	0x00006069

00006154 <__sfp>:
    6154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6156:	4b1e      	ldr	r3, [pc, #120]	; (61d0 <__sfp+0x7c>)
    6158:	0007      	movs	r7, r0
    615a:	681e      	ldr	r6, [r3, #0]
    615c:	69b3      	ldr	r3, [r6, #24]
    615e:	2b00      	cmp	r3, #0
    6160:	d102      	bne.n	6168 <__sfp+0x14>
    6162:	0030      	movs	r0, r6
    6164:	f7ff ffc2 	bl	60ec <__sinit>
    6168:	3648      	adds	r6, #72	; 0x48
    616a:	68b4      	ldr	r4, [r6, #8]
    616c:	6873      	ldr	r3, [r6, #4]
    616e:	3b01      	subs	r3, #1
    6170:	d504      	bpl.n	617c <__sfp+0x28>
    6172:	6833      	ldr	r3, [r6, #0]
    6174:	2b00      	cmp	r3, #0
    6176:	d007      	beq.n	6188 <__sfp+0x34>
    6178:	6836      	ldr	r6, [r6, #0]
    617a:	e7f6      	b.n	616a <__sfp+0x16>
    617c:	220c      	movs	r2, #12
    617e:	5ea5      	ldrsh	r5, [r4, r2]
    6180:	2d00      	cmp	r5, #0
    6182:	d00d      	beq.n	61a0 <__sfp+0x4c>
    6184:	3468      	adds	r4, #104	; 0x68
    6186:	e7f2      	b.n	616e <__sfp+0x1a>
    6188:	2104      	movs	r1, #4
    618a:	0038      	movs	r0, r7
    618c:	f7ff ff98 	bl	60c0 <__sfmoreglue>
    6190:	6030      	str	r0, [r6, #0]
    6192:	2800      	cmp	r0, #0
    6194:	d1f0      	bne.n	6178 <__sfp+0x24>
    6196:	230c      	movs	r3, #12
    6198:	0004      	movs	r4, r0
    619a:	603b      	str	r3, [r7, #0]
    619c:	0020      	movs	r0, r4
    619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61a0:	2301      	movs	r3, #1
    61a2:	0020      	movs	r0, r4
    61a4:	425b      	negs	r3, r3
    61a6:	81e3      	strh	r3, [r4, #14]
    61a8:	3302      	adds	r3, #2
    61aa:	81a3      	strh	r3, [r4, #12]
    61ac:	6665      	str	r5, [r4, #100]	; 0x64
    61ae:	6025      	str	r5, [r4, #0]
    61b0:	60a5      	str	r5, [r4, #8]
    61b2:	6065      	str	r5, [r4, #4]
    61b4:	6125      	str	r5, [r4, #16]
    61b6:	6165      	str	r5, [r4, #20]
    61b8:	61a5      	str	r5, [r4, #24]
    61ba:	2208      	movs	r2, #8
    61bc:	0029      	movs	r1, r5
    61be:	305c      	adds	r0, #92	; 0x5c
    61c0:	f7ff fb55 	bl	586e <memset>
    61c4:	6365      	str	r5, [r4, #52]	; 0x34
    61c6:	63a5      	str	r5, [r4, #56]	; 0x38
    61c8:	64a5      	str	r5, [r4, #72]	; 0x48
    61ca:	64e5      	str	r5, [r4, #76]	; 0x4c
    61cc:	e7e6      	b.n	619c <__sfp+0x48>
    61ce:	46c0      	nop			; (mov r8, r8)
    61d0:	00007e9c 	.word	0x00007e9c

000061d4 <_fwalk>:
    61d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61d6:	3048      	adds	r0, #72	; 0x48
    61d8:	0004      	movs	r4, r0
    61da:	2600      	movs	r6, #0
    61dc:	9101      	str	r1, [sp, #4]
    61de:	2c00      	cmp	r4, #0
    61e0:	d101      	bne.n	61e6 <_fwalk+0x12>
    61e2:	0030      	movs	r0, r6
    61e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61e6:	68a5      	ldr	r5, [r4, #8]
    61e8:	6867      	ldr	r7, [r4, #4]
    61ea:	3f01      	subs	r7, #1
    61ec:	d501      	bpl.n	61f2 <_fwalk+0x1e>
    61ee:	6824      	ldr	r4, [r4, #0]
    61f0:	e7f5      	b.n	61de <_fwalk+0xa>
    61f2:	89ab      	ldrh	r3, [r5, #12]
    61f4:	2b01      	cmp	r3, #1
    61f6:	d907      	bls.n	6208 <_fwalk+0x34>
    61f8:	220e      	movs	r2, #14
    61fa:	5eab      	ldrsh	r3, [r5, r2]
    61fc:	3301      	adds	r3, #1
    61fe:	d003      	beq.n	6208 <_fwalk+0x34>
    6200:	0028      	movs	r0, r5
    6202:	9b01      	ldr	r3, [sp, #4]
    6204:	4798      	blx	r3
    6206:	4306      	orrs	r6, r0
    6208:	3568      	adds	r5, #104	; 0x68
    620a:	e7ee      	b.n	61ea <_fwalk+0x16>

0000620c <_fwalk_reent>:
    620c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    620e:	0004      	movs	r4, r0
    6210:	0007      	movs	r7, r0
    6212:	2600      	movs	r6, #0
    6214:	9101      	str	r1, [sp, #4]
    6216:	3448      	adds	r4, #72	; 0x48
    6218:	2c00      	cmp	r4, #0
    621a:	d101      	bne.n	6220 <_fwalk_reent+0x14>
    621c:	0030      	movs	r0, r6
    621e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6220:	6863      	ldr	r3, [r4, #4]
    6222:	68a5      	ldr	r5, [r4, #8]
    6224:	9300      	str	r3, [sp, #0]
    6226:	9b00      	ldr	r3, [sp, #0]
    6228:	3b01      	subs	r3, #1
    622a:	9300      	str	r3, [sp, #0]
    622c:	d501      	bpl.n	6232 <_fwalk_reent+0x26>
    622e:	6824      	ldr	r4, [r4, #0]
    6230:	e7f2      	b.n	6218 <_fwalk_reent+0xc>
    6232:	89ab      	ldrh	r3, [r5, #12]
    6234:	2b01      	cmp	r3, #1
    6236:	d908      	bls.n	624a <_fwalk_reent+0x3e>
    6238:	220e      	movs	r2, #14
    623a:	5eab      	ldrsh	r3, [r5, r2]
    623c:	3301      	adds	r3, #1
    623e:	d004      	beq.n	624a <_fwalk_reent+0x3e>
    6240:	0029      	movs	r1, r5
    6242:	0038      	movs	r0, r7
    6244:	9b01      	ldr	r3, [sp, #4]
    6246:	4798      	blx	r3
    6248:	4306      	orrs	r6, r0
    624a:	3568      	adds	r5, #104	; 0x68
    624c:	e7eb      	b.n	6226 <_fwalk_reent+0x1a>

0000624e <__locale_ctype_ptr_l>:
    624e:	30ec      	adds	r0, #236	; 0xec
    6250:	6800      	ldr	r0, [r0, #0]
    6252:	4770      	bx	lr

00006254 <__locale_ctype_ptr>:
    6254:	4b04      	ldr	r3, [pc, #16]	; (6268 <__locale_ctype_ptr+0x14>)
    6256:	681b      	ldr	r3, [r3, #0]
    6258:	6a1b      	ldr	r3, [r3, #32]
    625a:	2b00      	cmp	r3, #0
    625c:	d100      	bne.n	6260 <__locale_ctype_ptr+0xc>
    625e:	4b03      	ldr	r3, [pc, #12]	; (626c <__locale_ctype_ptr+0x18>)
    6260:	33ec      	adds	r3, #236	; 0xec
    6262:	6818      	ldr	r0, [r3, #0]
    6264:	4770      	bx	lr
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	20000040 	.word	0x20000040
    626c:	200000a4 	.word	0x200000a4

00006270 <__swhatbuf_r>:
    6270:	b570      	push	{r4, r5, r6, lr}
    6272:	000e      	movs	r6, r1
    6274:	001d      	movs	r5, r3
    6276:	230e      	movs	r3, #14
    6278:	5ec9      	ldrsh	r1, [r1, r3]
    627a:	b090      	sub	sp, #64	; 0x40
    627c:	0014      	movs	r4, r2
    627e:	2900      	cmp	r1, #0
    6280:	da07      	bge.n	6292 <__swhatbuf_r+0x22>
    6282:	2300      	movs	r3, #0
    6284:	602b      	str	r3, [r5, #0]
    6286:	89b3      	ldrh	r3, [r6, #12]
    6288:	061b      	lsls	r3, r3, #24
    628a:	d411      	bmi.n	62b0 <__swhatbuf_r+0x40>
    628c:	2380      	movs	r3, #128	; 0x80
    628e:	00db      	lsls	r3, r3, #3
    6290:	e00f      	b.n	62b2 <__swhatbuf_r+0x42>
    6292:	aa01      	add	r2, sp, #4
    6294:	f001 f9a0 	bl	75d8 <_fstat_r>
    6298:	2800      	cmp	r0, #0
    629a:	dbf2      	blt.n	6282 <__swhatbuf_r+0x12>
    629c:	22f0      	movs	r2, #240	; 0xf0
    629e:	9b02      	ldr	r3, [sp, #8]
    62a0:	0212      	lsls	r2, r2, #8
    62a2:	4013      	ands	r3, r2
    62a4:	4a05      	ldr	r2, [pc, #20]	; (62bc <__swhatbuf_r+0x4c>)
    62a6:	189b      	adds	r3, r3, r2
    62a8:	425a      	negs	r2, r3
    62aa:	4153      	adcs	r3, r2
    62ac:	602b      	str	r3, [r5, #0]
    62ae:	e7ed      	b.n	628c <__swhatbuf_r+0x1c>
    62b0:	2340      	movs	r3, #64	; 0x40
    62b2:	2000      	movs	r0, #0
    62b4:	6023      	str	r3, [r4, #0]
    62b6:	b010      	add	sp, #64	; 0x40
    62b8:	bd70      	pop	{r4, r5, r6, pc}
    62ba:	46c0      	nop			; (mov r8, r8)
    62bc:	ffffe000 	.word	0xffffe000

000062c0 <__smakebuf_r>:
    62c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62c2:	2602      	movs	r6, #2
    62c4:	898b      	ldrh	r3, [r1, #12]
    62c6:	0005      	movs	r5, r0
    62c8:	000c      	movs	r4, r1
    62ca:	4233      	tst	r3, r6
    62cc:	d006      	beq.n	62dc <__smakebuf_r+0x1c>
    62ce:	0023      	movs	r3, r4
    62d0:	3347      	adds	r3, #71	; 0x47
    62d2:	6023      	str	r3, [r4, #0]
    62d4:	6123      	str	r3, [r4, #16]
    62d6:	2301      	movs	r3, #1
    62d8:	6163      	str	r3, [r4, #20]
    62da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    62dc:	ab01      	add	r3, sp, #4
    62de:	466a      	mov	r2, sp
    62e0:	f7ff ffc6 	bl	6270 <__swhatbuf_r>
    62e4:	9900      	ldr	r1, [sp, #0]
    62e6:	0007      	movs	r7, r0
    62e8:	0028      	movs	r0, r5
    62ea:	f000 f893 	bl	6414 <_malloc_r>
    62ee:	2800      	cmp	r0, #0
    62f0:	d108      	bne.n	6304 <__smakebuf_r+0x44>
    62f2:	220c      	movs	r2, #12
    62f4:	5ea3      	ldrsh	r3, [r4, r2]
    62f6:	059a      	lsls	r2, r3, #22
    62f8:	d4ef      	bmi.n	62da <__smakebuf_r+0x1a>
    62fa:	2203      	movs	r2, #3
    62fc:	4393      	bics	r3, r2
    62fe:	431e      	orrs	r6, r3
    6300:	81a6      	strh	r6, [r4, #12]
    6302:	e7e4      	b.n	62ce <__smakebuf_r+0xe>
    6304:	4b0f      	ldr	r3, [pc, #60]	; (6344 <__smakebuf_r+0x84>)
    6306:	62ab      	str	r3, [r5, #40]	; 0x28
    6308:	2380      	movs	r3, #128	; 0x80
    630a:	89a2      	ldrh	r2, [r4, #12]
    630c:	6020      	str	r0, [r4, #0]
    630e:	4313      	orrs	r3, r2
    6310:	81a3      	strh	r3, [r4, #12]
    6312:	9b00      	ldr	r3, [sp, #0]
    6314:	6120      	str	r0, [r4, #16]
    6316:	6163      	str	r3, [r4, #20]
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	2b00      	cmp	r3, #0
    631c:	d00d      	beq.n	633a <__smakebuf_r+0x7a>
    631e:	230e      	movs	r3, #14
    6320:	5ee1      	ldrsh	r1, [r4, r3]
    6322:	0028      	movs	r0, r5
    6324:	f001 f96a 	bl	75fc <_isatty_r>
    6328:	2800      	cmp	r0, #0
    632a:	d006      	beq.n	633a <__smakebuf_r+0x7a>
    632c:	2203      	movs	r2, #3
    632e:	89a3      	ldrh	r3, [r4, #12]
    6330:	4393      	bics	r3, r2
    6332:	001a      	movs	r2, r3
    6334:	2301      	movs	r3, #1
    6336:	4313      	orrs	r3, r2
    6338:	81a3      	strh	r3, [r4, #12]
    633a:	89a0      	ldrh	r0, [r4, #12]
    633c:	4338      	orrs	r0, r7
    633e:	81a0      	strh	r0, [r4, #12]
    6340:	e7cb      	b.n	62da <__smakebuf_r+0x1a>
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	00006069 	.word	0x00006069

00006348 <malloc>:
    6348:	b510      	push	{r4, lr}
    634a:	4b03      	ldr	r3, [pc, #12]	; (6358 <malloc+0x10>)
    634c:	0001      	movs	r1, r0
    634e:	6818      	ldr	r0, [r3, #0]
    6350:	f000 f860 	bl	6414 <_malloc_r>
    6354:	bd10      	pop	{r4, pc}
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	20000040 	.word	0x20000040

0000635c <__ascii_mbtowc>:
    635c:	b082      	sub	sp, #8
    635e:	2900      	cmp	r1, #0
    6360:	d100      	bne.n	6364 <__ascii_mbtowc+0x8>
    6362:	a901      	add	r1, sp, #4
    6364:	1e10      	subs	r0, r2, #0
    6366:	d006      	beq.n	6376 <__ascii_mbtowc+0x1a>
    6368:	2b00      	cmp	r3, #0
    636a:	d006      	beq.n	637a <__ascii_mbtowc+0x1e>
    636c:	7813      	ldrb	r3, [r2, #0]
    636e:	600b      	str	r3, [r1, #0]
    6370:	7810      	ldrb	r0, [r2, #0]
    6372:	1e43      	subs	r3, r0, #1
    6374:	4198      	sbcs	r0, r3
    6376:	b002      	add	sp, #8
    6378:	4770      	bx	lr
    637a:	2002      	movs	r0, #2
    637c:	4240      	negs	r0, r0
    637e:	e7fa      	b.n	6376 <__ascii_mbtowc+0x1a>

00006380 <_free_r>:
    6380:	b570      	push	{r4, r5, r6, lr}
    6382:	0005      	movs	r5, r0
    6384:	2900      	cmp	r1, #0
    6386:	d010      	beq.n	63aa <_free_r+0x2a>
    6388:	1f0c      	subs	r4, r1, #4
    638a:	6823      	ldr	r3, [r4, #0]
    638c:	2b00      	cmp	r3, #0
    638e:	da00      	bge.n	6392 <_free_r+0x12>
    6390:	18e4      	adds	r4, r4, r3
    6392:	0028      	movs	r0, r5
    6394:	f001 f963 	bl	765e <__malloc_lock>
    6398:	4a1d      	ldr	r2, [pc, #116]	; (6410 <_free_r+0x90>)
    639a:	6813      	ldr	r3, [r2, #0]
    639c:	2b00      	cmp	r3, #0
    639e:	d105      	bne.n	63ac <_free_r+0x2c>
    63a0:	6063      	str	r3, [r4, #4]
    63a2:	6014      	str	r4, [r2, #0]
    63a4:	0028      	movs	r0, r5
    63a6:	f001 f95b 	bl	7660 <__malloc_unlock>
    63aa:	bd70      	pop	{r4, r5, r6, pc}
    63ac:	42a3      	cmp	r3, r4
    63ae:	d909      	bls.n	63c4 <_free_r+0x44>
    63b0:	6821      	ldr	r1, [r4, #0]
    63b2:	1860      	adds	r0, r4, r1
    63b4:	4283      	cmp	r3, r0
    63b6:	d1f3      	bne.n	63a0 <_free_r+0x20>
    63b8:	6818      	ldr	r0, [r3, #0]
    63ba:	685b      	ldr	r3, [r3, #4]
    63bc:	1841      	adds	r1, r0, r1
    63be:	6021      	str	r1, [r4, #0]
    63c0:	e7ee      	b.n	63a0 <_free_r+0x20>
    63c2:	0013      	movs	r3, r2
    63c4:	685a      	ldr	r2, [r3, #4]
    63c6:	2a00      	cmp	r2, #0
    63c8:	d001      	beq.n	63ce <_free_r+0x4e>
    63ca:	42a2      	cmp	r2, r4
    63cc:	d9f9      	bls.n	63c2 <_free_r+0x42>
    63ce:	6819      	ldr	r1, [r3, #0]
    63d0:	1858      	adds	r0, r3, r1
    63d2:	42a0      	cmp	r0, r4
    63d4:	d10b      	bne.n	63ee <_free_r+0x6e>
    63d6:	6820      	ldr	r0, [r4, #0]
    63d8:	1809      	adds	r1, r1, r0
    63da:	1858      	adds	r0, r3, r1
    63dc:	6019      	str	r1, [r3, #0]
    63de:	4282      	cmp	r2, r0
    63e0:	d1e0      	bne.n	63a4 <_free_r+0x24>
    63e2:	6810      	ldr	r0, [r2, #0]
    63e4:	6852      	ldr	r2, [r2, #4]
    63e6:	1841      	adds	r1, r0, r1
    63e8:	6019      	str	r1, [r3, #0]
    63ea:	605a      	str	r2, [r3, #4]
    63ec:	e7da      	b.n	63a4 <_free_r+0x24>
    63ee:	42a0      	cmp	r0, r4
    63f0:	d902      	bls.n	63f8 <_free_r+0x78>
    63f2:	230c      	movs	r3, #12
    63f4:	602b      	str	r3, [r5, #0]
    63f6:	e7d5      	b.n	63a4 <_free_r+0x24>
    63f8:	6821      	ldr	r1, [r4, #0]
    63fa:	1860      	adds	r0, r4, r1
    63fc:	4282      	cmp	r2, r0
    63fe:	d103      	bne.n	6408 <_free_r+0x88>
    6400:	6810      	ldr	r0, [r2, #0]
    6402:	6852      	ldr	r2, [r2, #4]
    6404:	1841      	adds	r1, r0, r1
    6406:	6021      	str	r1, [r4, #0]
    6408:	6062      	str	r2, [r4, #4]
    640a:	605c      	str	r4, [r3, #4]
    640c:	e7ca      	b.n	63a4 <_free_r+0x24>
    640e:	46c0      	nop			; (mov r8, r8)
    6410:	200002a4 	.word	0x200002a4

00006414 <_malloc_r>:
    6414:	2303      	movs	r3, #3
    6416:	b570      	push	{r4, r5, r6, lr}
    6418:	1ccd      	adds	r5, r1, #3
    641a:	439d      	bics	r5, r3
    641c:	3508      	adds	r5, #8
    641e:	0006      	movs	r6, r0
    6420:	2d0c      	cmp	r5, #12
    6422:	d21e      	bcs.n	6462 <_malloc_r+0x4e>
    6424:	250c      	movs	r5, #12
    6426:	42a9      	cmp	r1, r5
    6428:	d81d      	bhi.n	6466 <_malloc_r+0x52>
    642a:	0030      	movs	r0, r6
    642c:	f001 f917 	bl	765e <__malloc_lock>
    6430:	4a25      	ldr	r2, [pc, #148]	; (64c8 <_malloc_r+0xb4>)
    6432:	6814      	ldr	r4, [r2, #0]
    6434:	0021      	movs	r1, r4
    6436:	2900      	cmp	r1, #0
    6438:	d119      	bne.n	646e <_malloc_r+0x5a>
    643a:	4c24      	ldr	r4, [pc, #144]	; (64cc <_malloc_r+0xb8>)
    643c:	6823      	ldr	r3, [r4, #0]
    643e:	2b00      	cmp	r3, #0
    6440:	d103      	bne.n	644a <_malloc_r+0x36>
    6442:	0030      	movs	r0, r6
    6444:	f000 febe 	bl	71c4 <_sbrk_r>
    6448:	6020      	str	r0, [r4, #0]
    644a:	0029      	movs	r1, r5
    644c:	0030      	movs	r0, r6
    644e:	f000 feb9 	bl	71c4 <_sbrk_r>
    6452:	1c43      	adds	r3, r0, #1
    6454:	d12c      	bne.n	64b0 <_malloc_r+0x9c>
    6456:	230c      	movs	r3, #12
    6458:	0030      	movs	r0, r6
    645a:	6033      	str	r3, [r6, #0]
    645c:	f001 f900 	bl	7660 <__malloc_unlock>
    6460:	e003      	b.n	646a <_malloc_r+0x56>
    6462:	2d00      	cmp	r5, #0
    6464:	dadf      	bge.n	6426 <_malloc_r+0x12>
    6466:	230c      	movs	r3, #12
    6468:	6033      	str	r3, [r6, #0]
    646a:	2000      	movs	r0, #0
    646c:	bd70      	pop	{r4, r5, r6, pc}
    646e:	680b      	ldr	r3, [r1, #0]
    6470:	1b5b      	subs	r3, r3, r5
    6472:	d41a      	bmi.n	64aa <_malloc_r+0x96>
    6474:	2b0b      	cmp	r3, #11
    6476:	d903      	bls.n	6480 <_malloc_r+0x6c>
    6478:	600b      	str	r3, [r1, #0]
    647a:	18cc      	adds	r4, r1, r3
    647c:	6025      	str	r5, [r4, #0]
    647e:	e003      	b.n	6488 <_malloc_r+0x74>
    6480:	428c      	cmp	r4, r1
    6482:	d10e      	bne.n	64a2 <_malloc_r+0x8e>
    6484:	6863      	ldr	r3, [r4, #4]
    6486:	6013      	str	r3, [r2, #0]
    6488:	0030      	movs	r0, r6
    648a:	f001 f8e9 	bl	7660 <__malloc_unlock>
    648e:	0020      	movs	r0, r4
    6490:	2207      	movs	r2, #7
    6492:	300b      	adds	r0, #11
    6494:	1d23      	adds	r3, r4, #4
    6496:	4390      	bics	r0, r2
    6498:	1ac3      	subs	r3, r0, r3
    649a:	d0e7      	beq.n	646c <_malloc_r+0x58>
    649c:	425a      	negs	r2, r3
    649e:	50e2      	str	r2, [r4, r3]
    64a0:	e7e4      	b.n	646c <_malloc_r+0x58>
    64a2:	684b      	ldr	r3, [r1, #4]
    64a4:	6063      	str	r3, [r4, #4]
    64a6:	000c      	movs	r4, r1
    64a8:	e7ee      	b.n	6488 <_malloc_r+0x74>
    64aa:	000c      	movs	r4, r1
    64ac:	6849      	ldr	r1, [r1, #4]
    64ae:	e7c2      	b.n	6436 <_malloc_r+0x22>
    64b0:	2303      	movs	r3, #3
    64b2:	1cc4      	adds	r4, r0, #3
    64b4:	439c      	bics	r4, r3
    64b6:	42a0      	cmp	r0, r4
    64b8:	d0e0      	beq.n	647c <_malloc_r+0x68>
    64ba:	1a21      	subs	r1, r4, r0
    64bc:	0030      	movs	r0, r6
    64be:	f000 fe81 	bl	71c4 <_sbrk_r>
    64c2:	1c43      	adds	r3, r0, #1
    64c4:	d1da      	bne.n	647c <_malloc_r+0x68>
    64c6:	e7c6      	b.n	6456 <_malloc_r+0x42>
    64c8:	200002a4 	.word	0x200002a4
    64cc:	200002a8 	.word	0x200002a8

000064d0 <__sfputc_r>:
    64d0:	6893      	ldr	r3, [r2, #8]
    64d2:	b510      	push	{r4, lr}
    64d4:	3b01      	subs	r3, #1
    64d6:	6093      	str	r3, [r2, #8]
    64d8:	2b00      	cmp	r3, #0
    64da:	da05      	bge.n	64e8 <__sfputc_r+0x18>
    64dc:	6994      	ldr	r4, [r2, #24]
    64de:	42a3      	cmp	r3, r4
    64e0:	db08      	blt.n	64f4 <__sfputc_r+0x24>
    64e2:	b2cb      	uxtb	r3, r1
    64e4:	2b0a      	cmp	r3, #10
    64e6:	d005      	beq.n	64f4 <__sfputc_r+0x24>
    64e8:	6813      	ldr	r3, [r2, #0]
    64ea:	1c58      	adds	r0, r3, #1
    64ec:	6010      	str	r0, [r2, #0]
    64ee:	7019      	strb	r1, [r3, #0]
    64f0:	b2c8      	uxtb	r0, r1
    64f2:	bd10      	pop	{r4, pc}
    64f4:	f7ff fc22 	bl	5d3c <__swbuf_r>
    64f8:	e7fb      	b.n	64f2 <__sfputc_r+0x22>

000064fa <__sfputs_r>:
    64fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64fc:	0006      	movs	r6, r0
    64fe:	000f      	movs	r7, r1
    6500:	0014      	movs	r4, r2
    6502:	18d5      	adds	r5, r2, r3
    6504:	42ac      	cmp	r4, r5
    6506:	d101      	bne.n	650c <__sfputs_r+0x12>
    6508:	2000      	movs	r0, #0
    650a:	e007      	b.n	651c <__sfputs_r+0x22>
    650c:	7821      	ldrb	r1, [r4, #0]
    650e:	003a      	movs	r2, r7
    6510:	0030      	movs	r0, r6
    6512:	f7ff ffdd 	bl	64d0 <__sfputc_r>
    6516:	3401      	adds	r4, #1
    6518:	1c43      	adds	r3, r0, #1
    651a:	d1f3      	bne.n	6504 <__sfputs_r+0xa>
    651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006520 <_vfiprintf_r>:
    6520:	b5f0      	push	{r4, r5, r6, r7, lr}
    6522:	b09f      	sub	sp, #124	; 0x7c
    6524:	0006      	movs	r6, r0
    6526:	000f      	movs	r7, r1
    6528:	0014      	movs	r4, r2
    652a:	9305      	str	r3, [sp, #20]
    652c:	2800      	cmp	r0, #0
    652e:	d004      	beq.n	653a <_vfiprintf_r+0x1a>
    6530:	6983      	ldr	r3, [r0, #24]
    6532:	2b00      	cmp	r3, #0
    6534:	d101      	bne.n	653a <_vfiprintf_r+0x1a>
    6536:	f7ff fdd9 	bl	60ec <__sinit>
    653a:	4b7f      	ldr	r3, [pc, #508]	; (6738 <_vfiprintf_r+0x218>)
    653c:	429f      	cmp	r7, r3
    653e:	d15c      	bne.n	65fa <_vfiprintf_r+0xda>
    6540:	6877      	ldr	r7, [r6, #4]
    6542:	89bb      	ldrh	r3, [r7, #12]
    6544:	071b      	lsls	r3, r3, #28
    6546:	d562      	bpl.n	660e <_vfiprintf_r+0xee>
    6548:	693b      	ldr	r3, [r7, #16]
    654a:	2b00      	cmp	r3, #0
    654c:	d05f      	beq.n	660e <_vfiprintf_r+0xee>
    654e:	2300      	movs	r3, #0
    6550:	ad06      	add	r5, sp, #24
    6552:	616b      	str	r3, [r5, #20]
    6554:	3320      	adds	r3, #32
    6556:	766b      	strb	r3, [r5, #25]
    6558:	3310      	adds	r3, #16
    655a:	76ab      	strb	r3, [r5, #26]
    655c:	9402      	str	r4, [sp, #8]
    655e:	9c02      	ldr	r4, [sp, #8]
    6560:	7823      	ldrb	r3, [r4, #0]
    6562:	2b00      	cmp	r3, #0
    6564:	d15d      	bne.n	6622 <_vfiprintf_r+0x102>
    6566:	9b02      	ldr	r3, [sp, #8]
    6568:	1ae3      	subs	r3, r4, r3
    656a:	9304      	str	r3, [sp, #16]
    656c:	d00d      	beq.n	658a <_vfiprintf_r+0x6a>
    656e:	9b04      	ldr	r3, [sp, #16]
    6570:	9a02      	ldr	r2, [sp, #8]
    6572:	0039      	movs	r1, r7
    6574:	0030      	movs	r0, r6
    6576:	f7ff ffc0 	bl	64fa <__sfputs_r>
    657a:	1c43      	adds	r3, r0, #1
    657c:	d100      	bne.n	6580 <_vfiprintf_r+0x60>
    657e:	e0cc      	b.n	671a <_vfiprintf_r+0x1fa>
    6580:	696a      	ldr	r2, [r5, #20]
    6582:	9b04      	ldr	r3, [sp, #16]
    6584:	4694      	mov	ip, r2
    6586:	4463      	add	r3, ip
    6588:	616b      	str	r3, [r5, #20]
    658a:	7823      	ldrb	r3, [r4, #0]
    658c:	2b00      	cmp	r3, #0
    658e:	d100      	bne.n	6592 <_vfiprintf_r+0x72>
    6590:	e0c3      	b.n	671a <_vfiprintf_r+0x1fa>
    6592:	2201      	movs	r2, #1
    6594:	2300      	movs	r3, #0
    6596:	4252      	negs	r2, r2
    6598:	606a      	str	r2, [r5, #4]
    659a:	a902      	add	r1, sp, #8
    659c:	3254      	adds	r2, #84	; 0x54
    659e:	1852      	adds	r2, r2, r1
    65a0:	3401      	adds	r4, #1
    65a2:	602b      	str	r3, [r5, #0]
    65a4:	60eb      	str	r3, [r5, #12]
    65a6:	60ab      	str	r3, [r5, #8]
    65a8:	7013      	strb	r3, [r2, #0]
    65aa:	65ab      	str	r3, [r5, #88]	; 0x58
    65ac:	7821      	ldrb	r1, [r4, #0]
    65ae:	2205      	movs	r2, #5
    65b0:	4862      	ldr	r0, [pc, #392]	; (673c <_vfiprintf_r+0x21c>)
    65b2:	f001 f849 	bl	7648 <memchr>
    65b6:	1c63      	adds	r3, r4, #1
    65b8:	469c      	mov	ip, r3
    65ba:	2800      	cmp	r0, #0
    65bc:	d135      	bne.n	662a <_vfiprintf_r+0x10a>
    65be:	6829      	ldr	r1, [r5, #0]
    65c0:	06cb      	lsls	r3, r1, #27
    65c2:	d504      	bpl.n	65ce <_vfiprintf_r+0xae>
    65c4:	2353      	movs	r3, #83	; 0x53
    65c6:	aa02      	add	r2, sp, #8
    65c8:	3020      	adds	r0, #32
    65ca:	189b      	adds	r3, r3, r2
    65cc:	7018      	strb	r0, [r3, #0]
    65ce:	070b      	lsls	r3, r1, #28
    65d0:	d504      	bpl.n	65dc <_vfiprintf_r+0xbc>
    65d2:	2353      	movs	r3, #83	; 0x53
    65d4:	202b      	movs	r0, #43	; 0x2b
    65d6:	aa02      	add	r2, sp, #8
    65d8:	189b      	adds	r3, r3, r2
    65da:	7018      	strb	r0, [r3, #0]
    65dc:	7823      	ldrb	r3, [r4, #0]
    65de:	2b2a      	cmp	r3, #42	; 0x2a
    65e0:	d02c      	beq.n	663c <_vfiprintf_r+0x11c>
    65e2:	2000      	movs	r0, #0
    65e4:	210a      	movs	r1, #10
    65e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65e8:	7822      	ldrb	r2, [r4, #0]
    65ea:	3a30      	subs	r2, #48	; 0x30
    65ec:	2a09      	cmp	r2, #9
    65ee:	d800      	bhi.n	65f2 <_vfiprintf_r+0xd2>
    65f0:	e06b      	b.n	66ca <_vfiprintf_r+0x1aa>
    65f2:	2800      	cmp	r0, #0
    65f4:	d02a      	beq.n	664c <_vfiprintf_r+0x12c>
    65f6:	9309      	str	r3, [sp, #36]	; 0x24
    65f8:	e028      	b.n	664c <_vfiprintf_r+0x12c>
    65fa:	4b51      	ldr	r3, [pc, #324]	; (6740 <_vfiprintf_r+0x220>)
    65fc:	429f      	cmp	r7, r3
    65fe:	d101      	bne.n	6604 <_vfiprintf_r+0xe4>
    6600:	68b7      	ldr	r7, [r6, #8]
    6602:	e79e      	b.n	6542 <_vfiprintf_r+0x22>
    6604:	4b4f      	ldr	r3, [pc, #316]	; (6744 <_vfiprintf_r+0x224>)
    6606:	429f      	cmp	r7, r3
    6608:	d19b      	bne.n	6542 <_vfiprintf_r+0x22>
    660a:	68f7      	ldr	r7, [r6, #12]
    660c:	e799      	b.n	6542 <_vfiprintf_r+0x22>
    660e:	0039      	movs	r1, r7
    6610:	0030      	movs	r0, r6
    6612:	f7ff fbe9 	bl	5de8 <__swsetup_r>
    6616:	2800      	cmp	r0, #0
    6618:	d099      	beq.n	654e <_vfiprintf_r+0x2e>
    661a:	2001      	movs	r0, #1
    661c:	4240      	negs	r0, r0
    661e:	b01f      	add	sp, #124	; 0x7c
    6620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6622:	2b25      	cmp	r3, #37	; 0x25
    6624:	d09f      	beq.n	6566 <_vfiprintf_r+0x46>
    6626:	3401      	adds	r4, #1
    6628:	e79a      	b.n	6560 <_vfiprintf_r+0x40>
    662a:	4b44      	ldr	r3, [pc, #272]	; (673c <_vfiprintf_r+0x21c>)
    662c:	6829      	ldr	r1, [r5, #0]
    662e:	1ac0      	subs	r0, r0, r3
    6630:	2301      	movs	r3, #1
    6632:	4083      	lsls	r3, r0
    6634:	430b      	orrs	r3, r1
    6636:	602b      	str	r3, [r5, #0]
    6638:	4664      	mov	r4, ip
    663a:	e7b7      	b.n	65ac <_vfiprintf_r+0x8c>
    663c:	9b05      	ldr	r3, [sp, #20]
    663e:	1d18      	adds	r0, r3, #4
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	9005      	str	r0, [sp, #20]
    6644:	2b00      	cmp	r3, #0
    6646:	db3a      	blt.n	66be <_vfiprintf_r+0x19e>
    6648:	9309      	str	r3, [sp, #36]	; 0x24
    664a:	4664      	mov	r4, ip
    664c:	7823      	ldrb	r3, [r4, #0]
    664e:	2b2e      	cmp	r3, #46	; 0x2e
    6650:	d10b      	bne.n	666a <_vfiprintf_r+0x14a>
    6652:	7863      	ldrb	r3, [r4, #1]
    6654:	1c62      	adds	r2, r4, #1
    6656:	2b2a      	cmp	r3, #42	; 0x2a
    6658:	d13f      	bne.n	66da <_vfiprintf_r+0x1ba>
    665a:	9b05      	ldr	r3, [sp, #20]
    665c:	3402      	adds	r4, #2
    665e:	1d1a      	adds	r2, r3, #4
    6660:	681b      	ldr	r3, [r3, #0]
    6662:	9205      	str	r2, [sp, #20]
    6664:	2b00      	cmp	r3, #0
    6666:	db35      	blt.n	66d4 <_vfiprintf_r+0x1b4>
    6668:	9307      	str	r3, [sp, #28]
    666a:	7821      	ldrb	r1, [r4, #0]
    666c:	2203      	movs	r2, #3
    666e:	4836      	ldr	r0, [pc, #216]	; (6748 <_vfiprintf_r+0x228>)
    6670:	f000 ffea 	bl	7648 <memchr>
    6674:	2800      	cmp	r0, #0
    6676:	d007      	beq.n	6688 <_vfiprintf_r+0x168>
    6678:	4b33      	ldr	r3, [pc, #204]	; (6748 <_vfiprintf_r+0x228>)
    667a:	682a      	ldr	r2, [r5, #0]
    667c:	1ac0      	subs	r0, r0, r3
    667e:	2340      	movs	r3, #64	; 0x40
    6680:	4083      	lsls	r3, r0
    6682:	4313      	orrs	r3, r2
    6684:	602b      	str	r3, [r5, #0]
    6686:	3401      	adds	r4, #1
    6688:	7821      	ldrb	r1, [r4, #0]
    668a:	1c63      	adds	r3, r4, #1
    668c:	2206      	movs	r2, #6
    668e:	482f      	ldr	r0, [pc, #188]	; (674c <_vfiprintf_r+0x22c>)
    6690:	9302      	str	r3, [sp, #8]
    6692:	7629      	strb	r1, [r5, #24]
    6694:	f000 ffd8 	bl	7648 <memchr>
    6698:	2800      	cmp	r0, #0
    669a:	d044      	beq.n	6726 <_vfiprintf_r+0x206>
    669c:	4b2c      	ldr	r3, [pc, #176]	; (6750 <_vfiprintf_r+0x230>)
    669e:	2b00      	cmp	r3, #0
    66a0:	d12f      	bne.n	6702 <_vfiprintf_r+0x1e2>
    66a2:	6829      	ldr	r1, [r5, #0]
    66a4:	9b05      	ldr	r3, [sp, #20]
    66a6:	2207      	movs	r2, #7
    66a8:	05c9      	lsls	r1, r1, #23
    66aa:	d528      	bpl.n	66fe <_vfiprintf_r+0x1de>
    66ac:	189b      	adds	r3, r3, r2
    66ae:	4393      	bics	r3, r2
    66b0:	3308      	adds	r3, #8
    66b2:	9305      	str	r3, [sp, #20]
    66b4:	696b      	ldr	r3, [r5, #20]
    66b6:	9a03      	ldr	r2, [sp, #12]
    66b8:	189b      	adds	r3, r3, r2
    66ba:	616b      	str	r3, [r5, #20]
    66bc:	e74f      	b.n	655e <_vfiprintf_r+0x3e>
    66be:	425b      	negs	r3, r3
    66c0:	60eb      	str	r3, [r5, #12]
    66c2:	2302      	movs	r3, #2
    66c4:	430b      	orrs	r3, r1
    66c6:	602b      	str	r3, [r5, #0]
    66c8:	e7bf      	b.n	664a <_vfiprintf_r+0x12a>
    66ca:	434b      	muls	r3, r1
    66cc:	3401      	adds	r4, #1
    66ce:	189b      	adds	r3, r3, r2
    66d0:	2001      	movs	r0, #1
    66d2:	e789      	b.n	65e8 <_vfiprintf_r+0xc8>
    66d4:	2301      	movs	r3, #1
    66d6:	425b      	negs	r3, r3
    66d8:	e7c6      	b.n	6668 <_vfiprintf_r+0x148>
    66da:	2300      	movs	r3, #0
    66dc:	0014      	movs	r4, r2
    66de:	200a      	movs	r0, #10
    66e0:	001a      	movs	r2, r3
    66e2:	606b      	str	r3, [r5, #4]
    66e4:	7821      	ldrb	r1, [r4, #0]
    66e6:	3930      	subs	r1, #48	; 0x30
    66e8:	2909      	cmp	r1, #9
    66ea:	d903      	bls.n	66f4 <_vfiprintf_r+0x1d4>
    66ec:	2b00      	cmp	r3, #0
    66ee:	d0bc      	beq.n	666a <_vfiprintf_r+0x14a>
    66f0:	9207      	str	r2, [sp, #28]
    66f2:	e7ba      	b.n	666a <_vfiprintf_r+0x14a>
    66f4:	4342      	muls	r2, r0
    66f6:	3401      	adds	r4, #1
    66f8:	1852      	adds	r2, r2, r1
    66fa:	2301      	movs	r3, #1
    66fc:	e7f2      	b.n	66e4 <_vfiprintf_r+0x1c4>
    66fe:	3307      	adds	r3, #7
    6700:	e7d5      	b.n	66ae <_vfiprintf_r+0x18e>
    6702:	ab05      	add	r3, sp, #20
    6704:	9300      	str	r3, [sp, #0]
    6706:	003a      	movs	r2, r7
    6708:	4b12      	ldr	r3, [pc, #72]	; (6754 <_vfiprintf_r+0x234>)
    670a:	0029      	movs	r1, r5
    670c:	0030      	movs	r0, r6
    670e:	e000      	b.n	6712 <_vfiprintf_r+0x1f2>
    6710:	bf00      	nop
    6712:	9003      	str	r0, [sp, #12]
    6714:	9b03      	ldr	r3, [sp, #12]
    6716:	3301      	adds	r3, #1
    6718:	d1cc      	bne.n	66b4 <_vfiprintf_r+0x194>
    671a:	89bb      	ldrh	r3, [r7, #12]
    671c:	065b      	lsls	r3, r3, #25
    671e:	d500      	bpl.n	6722 <_vfiprintf_r+0x202>
    6720:	e77b      	b.n	661a <_vfiprintf_r+0xfa>
    6722:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6724:	e77b      	b.n	661e <_vfiprintf_r+0xfe>
    6726:	ab05      	add	r3, sp, #20
    6728:	9300      	str	r3, [sp, #0]
    672a:	003a      	movs	r2, r7
    672c:	4b09      	ldr	r3, [pc, #36]	; (6754 <_vfiprintf_r+0x234>)
    672e:	0029      	movs	r1, r5
    6730:	0030      	movs	r0, r6
    6732:	f000 f87f 	bl	6834 <_printf_i>
    6736:	e7ec      	b.n	6712 <_vfiprintf_r+0x1f2>
    6738:	00007ec0 	.word	0x00007ec0
    673c:	00007f0a 	.word	0x00007f0a
    6740:	00007ee0 	.word	0x00007ee0
    6744:	00007ea0 	.word	0x00007ea0
    6748:	00007f10 	.word	0x00007f10
    674c:	00007f14 	.word	0x00007f14
    6750:	00000000 	.word	0x00000000
    6754:	000064fb 	.word	0x000064fb

00006758 <_printf_common>:
    6758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    675a:	0015      	movs	r5, r2
    675c:	9301      	str	r3, [sp, #4]
    675e:	688a      	ldr	r2, [r1, #8]
    6760:	690b      	ldr	r3, [r1, #16]
    6762:	9000      	str	r0, [sp, #0]
    6764:	000c      	movs	r4, r1
    6766:	4293      	cmp	r3, r2
    6768:	da00      	bge.n	676c <_printf_common+0x14>
    676a:	0013      	movs	r3, r2
    676c:	0022      	movs	r2, r4
    676e:	602b      	str	r3, [r5, #0]
    6770:	3243      	adds	r2, #67	; 0x43
    6772:	7812      	ldrb	r2, [r2, #0]
    6774:	2a00      	cmp	r2, #0
    6776:	d001      	beq.n	677c <_printf_common+0x24>
    6778:	3301      	adds	r3, #1
    677a:	602b      	str	r3, [r5, #0]
    677c:	6823      	ldr	r3, [r4, #0]
    677e:	069b      	lsls	r3, r3, #26
    6780:	d502      	bpl.n	6788 <_printf_common+0x30>
    6782:	682b      	ldr	r3, [r5, #0]
    6784:	3302      	adds	r3, #2
    6786:	602b      	str	r3, [r5, #0]
    6788:	2706      	movs	r7, #6
    678a:	6823      	ldr	r3, [r4, #0]
    678c:	401f      	ands	r7, r3
    678e:	d027      	beq.n	67e0 <_printf_common+0x88>
    6790:	0023      	movs	r3, r4
    6792:	3343      	adds	r3, #67	; 0x43
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	1e5a      	subs	r2, r3, #1
    6798:	4193      	sbcs	r3, r2
    679a:	6822      	ldr	r2, [r4, #0]
    679c:	0692      	lsls	r2, r2, #26
    679e:	d430      	bmi.n	6802 <_printf_common+0xaa>
    67a0:	0022      	movs	r2, r4
    67a2:	9901      	ldr	r1, [sp, #4]
    67a4:	3243      	adds	r2, #67	; 0x43
    67a6:	9800      	ldr	r0, [sp, #0]
    67a8:	9e08      	ldr	r6, [sp, #32]
    67aa:	47b0      	blx	r6
    67ac:	1c43      	adds	r3, r0, #1
    67ae:	d025      	beq.n	67fc <_printf_common+0xa4>
    67b0:	2306      	movs	r3, #6
    67b2:	6820      	ldr	r0, [r4, #0]
    67b4:	682a      	ldr	r2, [r5, #0]
    67b6:	68e1      	ldr	r1, [r4, #12]
    67b8:	4003      	ands	r3, r0
    67ba:	2500      	movs	r5, #0
    67bc:	2b04      	cmp	r3, #4
    67be:	d103      	bne.n	67c8 <_printf_common+0x70>
    67c0:	1a8d      	subs	r5, r1, r2
    67c2:	43eb      	mvns	r3, r5
    67c4:	17db      	asrs	r3, r3, #31
    67c6:	401d      	ands	r5, r3
    67c8:	68a3      	ldr	r3, [r4, #8]
    67ca:	6922      	ldr	r2, [r4, #16]
    67cc:	4293      	cmp	r3, r2
    67ce:	dd01      	ble.n	67d4 <_printf_common+0x7c>
    67d0:	1a9b      	subs	r3, r3, r2
    67d2:	18ed      	adds	r5, r5, r3
    67d4:	2700      	movs	r7, #0
    67d6:	42bd      	cmp	r5, r7
    67d8:	d120      	bne.n	681c <_printf_common+0xc4>
    67da:	2000      	movs	r0, #0
    67dc:	e010      	b.n	6800 <_printf_common+0xa8>
    67de:	3701      	adds	r7, #1
    67e0:	68e3      	ldr	r3, [r4, #12]
    67e2:	682a      	ldr	r2, [r5, #0]
    67e4:	1a9b      	subs	r3, r3, r2
    67e6:	429f      	cmp	r7, r3
    67e8:	dad2      	bge.n	6790 <_printf_common+0x38>
    67ea:	0022      	movs	r2, r4
    67ec:	2301      	movs	r3, #1
    67ee:	3219      	adds	r2, #25
    67f0:	9901      	ldr	r1, [sp, #4]
    67f2:	9800      	ldr	r0, [sp, #0]
    67f4:	9e08      	ldr	r6, [sp, #32]
    67f6:	47b0      	blx	r6
    67f8:	1c43      	adds	r3, r0, #1
    67fa:	d1f0      	bne.n	67de <_printf_common+0x86>
    67fc:	2001      	movs	r0, #1
    67fe:	4240      	negs	r0, r0
    6800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6802:	2030      	movs	r0, #48	; 0x30
    6804:	18e1      	adds	r1, r4, r3
    6806:	3143      	adds	r1, #67	; 0x43
    6808:	7008      	strb	r0, [r1, #0]
    680a:	0021      	movs	r1, r4
    680c:	1c5a      	adds	r2, r3, #1
    680e:	3145      	adds	r1, #69	; 0x45
    6810:	7809      	ldrb	r1, [r1, #0]
    6812:	18a2      	adds	r2, r4, r2
    6814:	3243      	adds	r2, #67	; 0x43
    6816:	3302      	adds	r3, #2
    6818:	7011      	strb	r1, [r2, #0]
    681a:	e7c1      	b.n	67a0 <_printf_common+0x48>
    681c:	0022      	movs	r2, r4
    681e:	2301      	movs	r3, #1
    6820:	321a      	adds	r2, #26
    6822:	9901      	ldr	r1, [sp, #4]
    6824:	9800      	ldr	r0, [sp, #0]
    6826:	9e08      	ldr	r6, [sp, #32]
    6828:	47b0      	blx	r6
    682a:	1c43      	adds	r3, r0, #1
    682c:	d0e6      	beq.n	67fc <_printf_common+0xa4>
    682e:	3701      	adds	r7, #1
    6830:	e7d1      	b.n	67d6 <_printf_common+0x7e>
	...

00006834 <_printf_i>:
    6834:	b5f0      	push	{r4, r5, r6, r7, lr}
    6836:	b08b      	sub	sp, #44	; 0x2c
    6838:	9206      	str	r2, [sp, #24]
    683a:	000a      	movs	r2, r1
    683c:	3243      	adds	r2, #67	; 0x43
    683e:	9307      	str	r3, [sp, #28]
    6840:	9005      	str	r0, [sp, #20]
    6842:	9204      	str	r2, [sp, #16]
    6844:	7e0a      	ldrb	r2, [r1, #24]
    6846:	000c      	movs	r4, r1
    6848:	9b10      	ldr	r3, [sp, #64]	; 0x40
    684a:	2a6e      	cmp	r2, #110	; 0x6e
    684c:	d100      	bne.n	6850 <_printf_i+0x1c>
    684e:	e08f      	b.n	6970 <_printf_i+0x13c>
    6850:	d817      	bhi.n	6882 <_printf_i+0x4e>
    6852:	2a63      	cmp	r2, #99	; 0x63
    6854:	d02c      	beq.n	68b0 <_printf_i+0x7c>
    6856:	d808      	bhi.n	686a <_printf_i+0x36>
    6858:	2a00      	cmp	r2, #0
    685a:	d100      	bne.n	685e <_printf_i+0x2a>
    685c:	e099      	b.n	6992 <_printf_i+0x15e>
    685e:	2a58      	cmp	r2, #88	; 0x58
    6860:	d054      	beq.n	690c <_printf_i+0xd8>
    6862:	0026      	movs	r6, r4
    6864:	3642      	adds	r6, #66	; 0x42
    6866:	7032      	strb	r2, [r6, #0]
    6868:	e029      	b.n	68be <_printf_i+0x8a>
    686a:	2a64      	cmp	r2, #100	; 0x64
    686c:	d001      	beq.n	6872 <_printf_i+0x3e>
    686e:	2a69      	cmp	r2, #105	; 0x69
    6870:	d1f7      	bne.n	6862 <_printf_i+0x2e>
    6872:	6821      	ldr	r1, [r4, #0]
    6874:	681a      	ldr	r2, [r3, #0]
    6876:	0608      	lsls	r0, r1, #24
    6878:	d523      	bpl.n	68c2 <_printf_i+0x8e>
    687a:	1d11      	adds	r1, r2, #4
    687c:	6019      	str	r1, [r3, #0]
    687e:	6815      	ldr	r5, [r2, #0]
    6880:	e025      	b.n	68ce <_printf_i+0x9a>
    6882:	2a73      	cmp	r2, #115	; 0x73
    6884:	d100      	bne.n	6888 <_printf_i+0x54>
    6886:	e088      	b.n	699a <_printf_i+0x166>
    6888:	d808      	bhi.n	689c <_printf_i+0x68>
    688a:	2a6f      	cmp	r2, #111	; 0x6f
    688c:	d029      	beq.n	68e2 <_printf_i+0xae>
    688e:	2a70      	cmp	r2, #112	; 0x70
    6890:	d1e7      	bne.n	6862 <_printf_i+0x2e>
    6892:	2220      	movs	r2, #32
    6894:	6809      	ldr	r1, [r1, #0]
    6896:	430a      	orrs	r2, r1
    6898:	6022      	str	r2, [r4, #0]
    689a:	e003      	b.n	68a4 <_printf_i+0x70>
    689c:	2a75      	cmp	r2, #117	; 0x75
    689e:	d020      	beq.n	68e2 <_printf_i+0xae>
    68a0:	2a78      	cmp	r2, #120	; 0x78
    68a2:	d1de      	bne.n	6862 <_printf_i+0x2e>
    68a4:	0022      	movs	r2, r4
    68a6:	2178      	movs	r1, #120	; 0x78
    68a8:	3245      	adds	r2, #69	; 0x45
    68aa:	7011      	strb	r1, [r2, #0]
    68ac:	4a6c      	ldr	r2, [pc, #432]	; (6a60 <_printf_i+0x22c>)
    68ae:	e030      	b.n	6912 <_printf_i+0xde>
    68b0:	000e      	movs	r6, r1
    68b2:	681a      	ldr	r2, [r3, #0]
    68b4:	3642      	adds	r6, #66	; 0x42
    68b6:	1d11      	adds	r1, r2, #4
    68b8:	6019      	str	r1, [r3, #0]
    68ba:	6813      	ldr	r3, [r2, #0]
    68bc:	7033      	strb	r3, [r6, #0]
    68be:	2301      	movs	r3, #1
    68c0:	e079      	b.n	69b6 <_printf_i+0x182>
    68c2:	0649      	lsls	r1, r1, #25
    68c4:	d5d9      	bpl.n	687a <_printf_i+0x46>
    68c6:	1d11      	adds	r1, r2, #4
    68c8:	6019      	str	r1, [r3, #0]
    68ca:	2300      	movs	r3, #0
    68cc:	5ed5      	ldrsh	r5, [r2, r3]
    68ce:	2d00      	cmp	r5, #0
    68d0:	da03      	bge.n	68da <_printf_i+0xa6>
    68d2:	232d      	movs	r3, #45	; 0x2d
    68d4:	9a04      	ldr	r2, [sp, #16]
    68d6:	426d      	negs	r5, r5
    68d8:	7013      	strb	r3, [r2, #0]
    68da:	4b62      	ldr	r3, [pc, #392]	; (6a64 <_printf_i+0x230>)
    68dc:	270a      	movs	r7, #10
    68de:	9303      	str	r3, [sp, #12]
    68e0:	e02f      	b.n	6942 <_printf_i+0x10e>
    68e2:	6820      	ldr	r0, [r4, #0]
    68e4:	6819      	ldr	r1, [r3, #0]
    68e6:	0605      	lsls	r5, r0, #24
    68e8:	d503      	bpl.n	68f2 <_printf_i+0xbe>
    68ea:	1d08      	adds	r0, r1, #4
    68ec:	6018      	str	r0, [r3, #0]
    68ee:	680d      	ldr	r5, [r1, #0]
    68f0:	e005      	b.n	68fe <_printf_i+0xca>
    68f2:	0640      	lsls	r0, r0, #25
    68f4:	d5f9      	bpl.n	68ea <_printf_i+0xb6>
    68f6:	680d      	ldr	r5, [r1, #0]
    68f8:	1d08      	adds	r0, r1, #4
    68fa:	6018      	str	r0, [r3, #0]
    68fc:	b2ad      	uxth	r5, r5
    68fe:	4b59      	ldr	r3, [pc, #356]	; (6a64 <_printf_i+0x230>)
    6900:	2708      	movs	r7, #8
    6902:	9303      	str	r3, [sp, #12]
    6904:	2a6f      	cmp	r2, #111	; 0x6f
    6906:	d018      	beq.n	693a <_printf_i+0x106>
    6908:	270a      	movs	r7, #10
    690a:	e016      	b.n	693a <_printf_i+0x106>
    690c:	3145      	adds	r1, #69	; 0x45
    690e:	700a      	strb	r2, [r1, #0]
    6910:	4a54      	ldr	r2, [pc, #336]	; (6a64 <_printf_i+0x230>)
    6912:	9203      	str	r2, [sp, #12]
    6914:	681a      	ldr	r2, [r3, #0]
    6916:	6821      	ldr	r1, [r4, #0]
    6918:	1d10      	adds	r0, r2, #4
    691a:	6018      	str	r0, [r3, #0]
    691c:	6815      	ldr	r5, [r2, #0]
    691e:	0608      	lsls	r0, r1, #24
    6920:	d522      	bpl.n	6968 <_printf_i+0x134>
    6922:	07cb      	lsls	r3, r1, #31
    6924:	d502      	bpl.n	692c <_printf_i+0xf8>
    6926:	2320      	movs	r3, #32
    6928:	4319      	orrs	r1, r3
    692a:	6021      	str	r1, [r4, #0]
    692c:	2710      	movs	r7, #16
    692e:	2d00      	cmp	r5, #0
    6930:	d103      	bne.n	693a <_printf_i+0x106>
    6932:	2320      	movs	r3, #32
    6934:	6822      	ldr	r2, [r4, #0]
    6936:	439a      	bics	r2, r3
    6938:	6022      	str	r2, [r4, #0]
    693a:	0023      	movs	r3, r4
    693c:	2200      	movs	r2, #0
    693e:	3343      	adds	r3, #67	; 0x43
    6940:	701a      	strb	r2, [r3, #0]
    6942:	6863      	ldr	r3, [r4, #4]
    6944:	60a3      	str	r3, [r4, #8]
    6946:	2b00      	cmp	r3, #0
    6948:	db5c      	blt.n	6a04 <_printf_i+0x1d0>
    694a:	2204      	movs	r2, #4
    694c:	6821      	ldr	r1, [r4, #0]
    694e:	4391      	bics	r1, r2
    6950:	6021      	str	r1, [r4, #0]
    6952:	2d00      	cmp	r5, #0
    6954:	d158      	bne.n	6a08 <_printf_i+0x1d4>
    6956:	9e04      	ldr	r6, [sp, #16]
    6958:	2b00      	cmp	r3, #0
    695a:	d064      	beq.n	6a26 <_printf_i+0x1f2>
    695c:	0026      	movs	r6, r4
    695e:	9b03      	ldr	r3, [sp, #12]
    6960:	3642      	adds	r6, #66	; 0x42
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	7033      	strb	r3, [r6, #0]
    6966:	e05e      	b.n	6a26 <_printf_i+0x1f2>
    6968:	0648      	lsls	r0, r1, #25
    696a:	d5da      	bpl.n	6922 <_printf_i+0xee>
    696c:	b2ad      	uxth	r5, r5
    696e:	e7d8      	b.n	6922 <_printf_i+0xee>
    6970:	6809      	ldr	r1, [r1, #0]
    6972:	681a      	ldr	r2, [r3, #0]
    6974:	0608      	lsls	r0, r1, #24
    6976:	d505      	bpl.n	6984 <_printf_i+0x150>
    6978:	1d11      	adds	r1, r2, #4
    697a:	6019      	str	r1, [r3, #0]
    697c:	6813      	ldr	r3, [r2, #0]
    697e:	6962      	ldr	r2, [r4, #20]
    6980:	601a      	str	r2, [r3, #0]
    6982:	e006      	b.n	6992 <_printf_i+0x15e>
    6984:	0649      	lsls	r1, r1, #25
    6986:	d5f7      	bpl.n	6978 <_printf_i+0x144>
    6988:	1d11      	adds	r1, r2, #4
    698a:	6019      	str	r1, [r3, #0]
    698c:	6813      	ldr	r3, [r2, #0]
    698e:	8aa2      	ldrh	r2, [r4, #20]
    6990:	801a      	strh	r2, [r3, #0]
    6992:	2300      	movs	r3, #0
    6994:	9e04      	ldr	r6, [sp, #16]
    6996:	6123      	str	r3, [r4, #16]
    6998:	e054      	b.n	6a44 <_printf_i+0x210>
    699a:	681a      	ldr	r2, [r3, #0]
    699c:	1d11      	adds	r1, r2, #4
    699e:	6019      	str	r1, [r3, #0]
    69a0:	6816      	ldr	r6, [r2, #0]
    69a2:	2100      	movs	r1, #0
    69a4:	6862      	ldr	r2, [r4, #4]
    69a6:	0030      	movs	r0, r6
    69a8:	f000 fe4e 	bl	7648 <memchr>
    69ac:	2800      	cmp	r0, #0
    69ae:	d001      	beq.n	69b4 <_printf_i+0x180>
    69b0:	1b80      	subs	r0, r0, r6
    69b2:	6060      	str	r0, [r4, #4]
    69b4:	6863      	ldr	r3, [r4, #4]
    69b6:	6123      	str	r3, [r4, #16]
    69b8:	2300      	movs	r3, #0
    69ba:	9a04      	ldr	r2, [sp, #16]
    69bc:	7013      	strb	r3, [r2, #0]
    69be:	e041      	b.n	6a44 <_printf_i+0x210>
    69c0:	6923      	ldr	r3, [r4, #16]
    69c2:	0032      	movs	r2, r6
    69c4:	9906      	ldr	r1, [sp, #24]
    69c6:	9805      	ldr	r0, [sp, #20]
    69c8:	9d07      	ldr	r5, [sp, #28]
    69ca:	47a8      	blx	r5
    69cc:	1c43      	adds	r3, r0, #1
    69ce:	d043      	beq.n	6a58 <_printf_i+0x224>
    69d0:	6823      	ldr	r3, [r4, #0]
    69d2:	2500      	movs	r5, #0
    69d4:	079b      	lsls	r3, r3, #30
    69d6:	d40f      	bmi.n	69f8 <_printf_i+0x1c4>
    69d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    69da:	68e0      	ldr	r0, [r4, #12]
    69dc:	4298      	cmp	r0, r3
    69de:	da3d      	bge.n	6a5c <_printf_i+0x228>
    69e0:	0018      	movs	r0, r3
    69e2:	e03b      	b.n	6a5c <_printf_i+0x228>
    69e4:	0022      	movs	r2, r4
    69e6:	2301      	movs	r3, #1
    69e8:	3219      	adds	r2, #25
    69ea:	9906      	ldr	r1, [sp, #24]
    69ec:	9805      	ldr	r0, [sp, #20]
    69ee:	9e07      	ldr	r6, [sp, #28]
    69f0:	47b0      	blx	r6
    69f2:	1c43      	adds	r3, r0, #1
    69f4:	d030      	beq.n	6a58 <_printf_i+0x224>
    69f6:	3501      	adds	r5, #1
    69f8:	68e3      	ldr	r3, [r4, #12]
    69fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    69fc:	1a9b      	subs	r3, r3, r2
    69fe:	429d      	cmp	r5, r3
    6a00:	dbf0      	blt.n	69e4 <_printf_i+0x1b0>
    6a02:	e7e9      	b.n	69d8 <_printf_i+0x1a4>
    6a04:	2d00      	cmp	r5, #0
    6a06:	d0a9      	beq.n	695c <_printf_i+0x128>
    6a08:	9e04      	ldr	r6, [sp, #16]
    6a0a:	0028      	movs	r0, r5
    6a0c:	0039      	movs	r1, r7
    6a0e:	f7fc fb5f 	bl	30d0 <__aeabi_uidivmod>
    6a12:	9b03      	ldr	r3, [sp, #12]
    6a14:	3e01      	subs	r6, #1
    6a16:	5c5b      	ldrb	r3, [r3, r1]
    6a18:	0028      	movs	r0, r5
    6a1a:	7033      	strb	r3, [r6, #0]
    6a1c:	0039      	movs	r1, r7
    6a1e:	f7fc fad1 	bl	2fc4 <__udivsi3>
    6a22:	1e05      	subs	r5, r0, #0
    6a24:	d1f1      	bne.n	6a0a <_printf_i+0x1d6>
    6a26:	2f08      	cmp	r7, #8
    6a28:	d109      	bne.n	6a3e <_printf_i+0x20a>
    6a2a:	6823      	ldr	r3, [r4, #0]
    6a2c:	07db      	lsls	r3, r3, #31
    6a2e:	d506      	bpl.n	6a3e <_printf_i+0x20a>
    6a30:	6863      	ldr	r3, [r4, #4]
    6a32:	6922      	ldr	r2, [r4, #16]
    6a34:	4293      	cmp	r3, r2
    6a36:	dc02      	bgt.n	6a3e <_printf_i+0x20a>
    6a38:	2330      	movs	r3, #48	; 0x30
    6a3a:	3e01      	subs	r6, #1
    6a3c:	7033      	strb	r3, [r6, #0]
    6a3e:	9b04      	ldr	r3, [sp, #16]
    6a40:	1b9b      	subs	r3, r3, r6
    6a42:	6123      	str	r3, [r4, #16]
    6a44:	9b07      	ldr	r3, [sp, #28]
    6a46:	aa09      	add	r2, sp, #36	; 0x24
    6a48:	9300      	str	r3, [sp, #0]
    6a4a:	0021      	movs	r1, r4
    6a4c:	9b06      	ldr	r3, [sp, #24]
    6a4e:	9805      	ldr	r0, [sp, #20]
    6a50:	f7ff fe82 	bl	6758 <_printf_common>
    6a54:	1c43      	adds	r3, r0, #1
    6a56:	d1b3      	bne.n	69c0 <_printf_i+0x18c>
    6a58:	2001      	movs	r0, #1
    6a5a:	4240      	negs	r0, r0
    6a5c:	b00b      	add	sp, #44	; 0x2c
    6a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a60:	00007f2c 	.word	0x00007f2c
    6a64:	00007f1b 	.word	0x00007f1b

00006a68 <__svfiscanf_r>:
    6a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a6a:	4cbd      	ldr	r4, [pc, #756]	; (6d60 <__svfiscanf_r+0x2f8>)
    6a6c:	2586      	movs	r5, #134	; 0x86
    6a6e:	44a5      	add	sp, r4
    6a70:	9303      	str	r3, [sp, #12]
    6a72:	2300      	movs	r3, #0
    6a74:	9348      	str	r3, [sp, #288]	; 0x120
    6a76:	9349      	str	r3, [sp, #292]	; 0x124
    6a78:	ab05      	add	r3, sp, #20
    6a7a:	934a      	str	r3, [sp, #296]	; 0x128
    6a7c:	23be      	movs	r3, #190	; 0xbe
    6a7e:	006d      	lsls	r5, r5, #1
    6a80:	9000      	str	r0, [sp, #0]
    6a82:	000c      	movs	r4, r1
    6a84:	a802      	add	r0, sp, #8
    6a86:	49b7      	ldr	r1, [pc, #732]	; (6d64 <__svfiscanf_r+0x2fc>)
    6a88:	005b      	lsls	r3, r3, #1
    6a8a:	1940      	adds	r0, r0, r5
    6a8c:	27c0      	movs	r7, #192	; 0xc0
    6a8e:	50c1      	str	r1, [r0, r3]
    6a90:	ab02      	add	r3, sp, #8
    6a92:	195b      	adds	r3, r3, r5
    6a94:	0015      	movs	r5, r2
    6a96:	49b4      	ldr	r1, [pc, #720]	; (6d68 <__svfiscanf_r+0x300>)
    6a98:	007f      	lsls	r7, r7, #1
    6a9a:	51d9      	str	r1, [r3, r7]
    6a9c:	782b      	ldrb	r3, [r5, #0]
    6a9e:	2b00      	cmp	r3, #0
    6aa0:	d100      	bne.n	6aa4 <__svfiscanf_r+0x3c>
    6aa2:	e15b      	b.n	6d5c <__svfiscanf_r+0x2f4>
    6aa4:	f7ff fbd6 	bl	6254 <__locale_ctype_ptr>
    6aa8:	2208      	movs	r2, #8
    6aaa:	782b      	ldrb	r3, [r5, #0]
    6aac:	18c0      	adds	r0, r0, r3
    6aae:	9301      	str	r3, [sp, #4]
    6ab0:	7843      	ldrb	r3, [r0, #1]
    6ab2:	4013      	ands	r3, r2
    6ab4:	d141      	bne.n	6b3a <__svfiscanf_r+0xd2>
    6ab6:	9a01      	ldr	r2, [sp, #4]
    6ab8:	1c6e      	adds	r6, r5, #1
    6aba:	2a25      	cmp	r2, #37	; 0x25
    6abc:	d000      	beq.n	6ac0 <__svfiscanf_r+0x58>
    6abe:	e0a8      	b.n	6c12 <__svfiscanf_r+0x1aa>
    6ac0:	9347      	str	r3, [sp, #284]	; 0x11c
    6ac2:	9345      	str	r3, [sp, #276]	; 0x114
    6ac4:	786b      	ldrb	r3, [r5, #1]
    6ac6:	2b2a      	cmp	r3, #42	; 0x2a
    6ac8:	d102      	bne.n	6ad0 <__svfiscanf_r+0x68>
    6aca:	3b1a      	subs	r3, #26
    6acc:	9345      	str	r3, [sp, #276]	; 0x114
    6ace:	1cae      	adds	r6, r5, #2
    6ad0:	0035      	movs	r5, r6
    6ad2:	220a      	movs	r2, #10
    6ad4:	7829      	ldrb	r1, [r5, #0]
    6ad6:	000b      	movs	r3, r1
    6ad8:	3b30      	subs	r3, #48	; 0x30
    6ada:	2b09      	cmp	r3, #9
    6adc:	d948      	bls.n	6b70 <__svfiscanf_r+0x108>
    6ade:	4ea3      	ldr	r6, [pc, #652]	; (6d6c <__svfiscanf_r+0x304>)
    6ae0:	2203      	movs	r2, #3
    6ae2:	0030      	movs	r0, r6
    6ae4:	f000 fdb0 	bl	7648 <memchr>
    6ae8:	2800      	cmp	r0, #0
    6aea:	d007      	beq.n	6afc <__svfiscanf_r+0x94>
    6aec:	2301      	movs	r3, #1
    6aee:	1b80      	subs	r0, r0, r6
    6af0:	4083      	lsls	r3, r0
    6af2:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6af4:	3501      	adds	r5, #1
    6af6:	4313      	orrs	r3, r2
    6af8:	9202      	str	r2, [sp, #8]
    6afa:	9345      	str	r3, [sp, #276]	; 0x114
    6afc:	782b      	ldrb	r3, [r5, #0]
    6afe:	1c6e      	adds	r6, r5, #1
    6b00:	2b67      	cmp	r3, #103	; 0x67
    6b02:	d858      	bhi.n	6bb6 <__svfiscanf_r+0x14e>
    6b04:	2b65      	cmp	r3, #101	; 0x65
    6b06:	d300      	bcc.n	6b0a <__svfiscanf_r+0xa2>
    6b08:	e0dd      	b.n	6cc6 <__svfiscanf_r+0x25e>
    6b0a:	2b47      	cmp	r3, #71	; 0x47
    6b0c:	d838      	bhi.n	6b80 <__svfiscanf_r+0x118>
    6b0e:	2b45      	cmp	r3, #69	; 0x45
    6b10:	d300      	bcc.n	6b14 <__svfiscanf_r+0xac>
    6b12:	e0d8      	b.n	6cc6 <__svfiscanf_r+0x25e>
    6b14:	2b00      	cmp	r3, #0
    6b16:	d100      	bne.n	6b1a <__svfiscanf_r+0xb2>
    6b18:	e11d      	b.n	6d56 <__svfiscanf_r+0x2ee>
    6b1a:	2b25      	cmp	r3, #37	; 0x25
    6b1c:	d079      	beq.n	6c12 <__svfiscanf_r+0x1aa>
    6b1e:	2303      	movs	r3, #3
    6b20:	934b      	str	r3, [sp, #300]	; 0x12c
    6b22:	3307      	adds	r3, #7
    6b24:	9346      	str	r3, [sp, #280]	; 0x118
    6b26:	e053      	b.n	6bd0 <__svfiscanf_r+0x168>
    6b28:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6b2a:	3301      	adds	r3, #1
    6b2c:	9201      	str	r2, [sp, #4]
    6b2e:	3201      	adds	r2, #1
    6b30:	9249      	str	r2, [sp, #292]	; 0x124
    6b32:	6862      	ldr	r2, [r4, #4]
    6b34:	6023      	str	r3, [r4, #0]
    6b36:	3a01      	subs	r2, #1
    6b38:	6062      	str	r2, [r4, #4]
    6b3a:	6863      	ldr	r3, [r4, #4]
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	dd0b      	ble.n	6b58 <__svfiscanf_r+0xf0>
    6b40:	f7ff fb88 	bl	6254 <__locale_ctype_ptr>
    6b44:	2108      	movs	r1, #8
    6b46:	6823      	ldr	r3, [r4, #0]
    6b48:	781a      	ldrb	r2, [r3, #0]
    6b4a:	1880      	adds	r0, r0, r2
    6b4c:	7842      	ldrb	r2, [r0, #1]
    6b4e:	420a      	tst	r2, r1
    6b50:	d1ea      	bne.n	6b28 <__svfiscanf_r+0xc0>
    6b52:	1c6e      	adds	r6, r5, #1
    6b54:	0035      	movs	r5, r6
    6b56:	e7a1      	b.n	6a9c <__svfiscanf_r+0x34>
    6b58:	2286      	movs	r2, #134	; 0x86
    6b5a:	ab02      	add	r3, sp, #8
    6b5c:	0052      	lsls	r2, r2, #1
    6b5e:	189b      	adds	r3, r3, r2
    6b60:	59db      	ldr	r3, [r3, r7]
    6b62:	0021      	movs	r1, r4
    6b64:	9800      	ldr	r0, [sp, #0]
    6b66:	9301      	str	r3, [sp, #4]
    6b68:	4798      	blx	r3
    6b6a:	2800      	cmp	r0, #0
    6b6c:	d0e8      	beq.n	6b40 <__svfiscanf_r+0xd8>
    6b6e:	e7f0      	b.n	6b52 <__svfiscanf_r+0xea>
    6b70:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    6b72:	3501      	adds	r5, #1
    6b74:	9302      	str	r3, [sp, #8]
    6b76:	4353      	muls	r3, r2
    6b78:	3b30      	subs	r3, #48	; 0x30
    6b7a:	1859      	adds	r1, r3, r1
    6b7c:	9147      	str	r1, [sp, #284]	; 0x11c
    6b7e:	e7a9      	b.n	6ad4 <__svfiscanf_r+0x6c>
    6b80:	2b5b      	cmp	r3, #91	; 0x5b
    6b82:	d100      	bne.n	6b86 <__svfiscanf_r+0x11e>
    6b84:	e077      	b.n	6c76 <__svfiscanf_r+0x20e>
    6b86:	d80f      	bhi.n	6ba8 <__svfiscanf_r+0x140>
    6b88:	2b58      	cmp	r3, #88	; 0x58
    6b8a:	d1c8      	bne.n	6b1e <__svfiscanf_r+0xb6>
    6b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6b8e:	9201      	str	r2, [sp, #4]
    6b90:	2280      	movs	r2, #128	; 0x80
    6b92:	9901      	ldr	r1, [sp, #4]
    6b94:	0092      	lsls	r2, r2, #2
    6b96:	430a      	orrs	r2, r1
    6b98:	9245      	str	r2, [sp, #276]	; 0x114
    6b9a:	2210      	movs	r2, #16
    6b9c:	9246      	str	r2, [sp, #280]	; 0x118
    6b9e:	2203      	movs	r2, #3
    6ba0:	2b6e      	cmp	r3, #110	; 0x6e
    6ba2:	dd14      	ble.n	6bce <__svfiscanf_r+0x166>
    6ba4:	3201      	adds	r2, #1
    6ba6:	e012      	b.n	6bce <__svfiscanf_r+0x166>
    6ba8:	2b63      	cmp	r3, #99	; 0x63
    6baa:	d100      	bne.n	6bae <__svfiscanf_r+0x146>
    6bac:	e071      	b.n	6c92 <__svfiscanf_r+0x22a>
    6bae:	2b64      	cmp	r3, #100	; 0x64
    6bb0:	d1b5      	bne.n	6b1e <__svfiscanf_r+0xb6>
    6bb2:	220a      	movs	r2, #10
    6bb4:	e7f2      	b.n	6b9c <__svfiscanf_r+0x134>
    6bb6:	2b70      	cmp	r3, #112	; 0x70
    6bb8:	d052      	beq.n	6c60 <__svfiscanf_r+0x1f8>
    6bba:	d822      	bhi.n	6c02 <__svfiscanf_r+0x19a>
    6bbc:	2b6e      	cmp	r3, #110	; 0x6e
    6bbe:	d100      	bne.n	6bc2 <__svfiscanf_r+0x15a>
    6bc0:	e06f      	b.n	6ca2 <__svfiscanf_r+0x23a>
    6bc2:	d854      	bhi.n	6c6e <__svfiscanf_r+0x206>
    6bc4:	2b69      	cmp	r3, #105	; 0x69
    6bc6:	d1aa      	bne.n	6b1e <__svfiscanf_r+0xb6>
    6bc8:	2300      	movs	r3, #0
    6bca:	2203      	movs	r2, #3
    6bcc:	9346      	str	r3, [sp, #280]	; 0x118
    6bce:	924b      	str	r2, [sp, #300]	; 0x12c
    6bd0:	6863      	ldr	r3, [r4, #4]
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	dc00      	bgt.n	6bd8 <__svfiscanf_r+0x170>
    6bd6:	e078      	b.n	6cca <__svfiscanf_r+0x262>
    6bd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6bda:	9301      	str	r3, [sp, #4]
    6bdc:	065b      	lsls	r3, r3, #25
    6bde:	d400      	bmi.n	6be2 <__svfiscanf_r+0x17a>
    6be0:	e08b      	b.n	6cfa <__svfiscanf_r+0x292>
    6be2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    6be4:	2b02      	cmp	r3, #2
    6be6:	dd00      	ble.n	6bea <__svfiscanf_r+0x182>
    6be8:	e09d      	b.n	6d26 <__svfiscanf_r+0x2be>
    6bea:	ab03      	add	r3, sp, #12
    6bec:	0022      	movs	r2, r4
    6bee:	a945      	add	r1, sp, #276	; 0x114
    6bf0:	9800      	ldr	r0, [sp, #0]
    6bf2:	f000 f8e7 	bl	6dc4 <_scanf_chars>
    6bf6:	2801      	cmp	r0, #1
    6bf8:	d100      	bne.n	6bfc <__svfiscanf_r+0x194>
    6bfa:	e0af      	b.n	6d5c <__svfiscanf_r+0x2f4>
    6bfc:	2802      	cmp	r0, #2
    6bfe:	d1a9      	bne.n	6b54 <__svfiscanf_r+0xec>
    6c00:	e025      	b.n	6c4e <__svfiscanf_r+0x1e6>
    6c02:	2b75      	cmp	r3, #117	; 0x75
    6c04:	d0d5      	beq.n	6bb2 <__svfiscanf_r+0x14a>
    6c06:	2b78      	cmp	r3, #120	; 0x78
    6c08:	d0c0      	beq.n	6b8c <__svfiscanf_r+0x124>
    6c0a:	2b73      	cmp	r3, #115	; 0x73
    6c0c:	d187      	bne.n	6b1e <__svfiscanf_r+0xb6>
    6c0e:	2302      	movs	r3, #2
    6c10:	e03d      	b.n	6c8e <__svfiscanf_r+0x226>
    6c12:	6863      	ldr	r3, [r4, #4]
    6c14:	2b00      	cmp	r3, #0
    6c16:	dd0f      	ble.n	6c38 <__svfiscanf_r+0x1d0>
    6c18:	6823      	ldr	r3, [r4, #0]
    6c1a:	9901      	ldr	r1, [sp, #4]
    6c1c:	781a      	ldrb	r2, [r3, #0]
    6c1e:	4291      	cmp	r1, r2
    6c20:	d000      	beq.n	6c24 <__svfiscanf_r+0x1bc>
    6c22:	e09b      	b.n	6d5c <__svfiscanf_r+0x2f4>
    6c24:	3301      	adds	r3, #1
    6c26:	6862      	ldr	r2, [r4, #4]
    6c28:	6023      	str	r3, [r4, #0]
    6c2a:	9b49      	ldr	r3, [sp, #292]	; 0x124
    6c2c:	3a01      	subs	r2, #1
    6c2e:	9301      	str	r3, [sp, #4]
    6c30:	3301      	adds	r3, #1
    6c32:	6062      	str	r2, [r4, #4]
    6c34:	9349      	str	r3, [sp, #292]	; 0x124
    6c36:	e78d      	b.n	6b54 <__svfiscanf_r+0xec>
    6c38:	2286      	movs	r2, #134	; 0x86
    6c3a:	ab02      	add	r3, sp, #8
    6c3c:	0052      	lsls	r2, r2, #1
    6c3e:	189b      	adds	r3, r3, r2
    6c40:	59db      	ldr	r3, [r3, r7]
    6c42:	0021      	movs	r1, r4
    6c44:	9800      	ldr	r0, [sp, #0]
    6c46:	9302      	str	r3, [sp, #8]
    6c48:	4798      	blx	r3
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d0e4      	beq.n	6c18 <__svfiscanf_r+0x1b0>
    6c4e:	9848      	ldr	r0, [sp, #288]	; 0x120
    6c50:	2800      	cmp	r0, #0
    6c52:	d000      	beq.n	6c56 <__svfiscanf_r+0x1ee>
    6c54:	e07b      	b.n	6d4e <__svfiscanf_r+0x2e6>
    6c56:	3801      	subs	r0, #1
    6c58:	23a7      	movs	r3, #167	; 0xa7
    6c5a:	009b      	lsls	r3, r3, #2
    6c5c:	449d      	add	sp, r3
    6c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c60:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6c62:	9201      	str	r2, [sp, #4]
    6c64:	2220      	movs	r2, #32
    6c66:	9901      	ldr	r1, [sp, #4]
    6c68:	430a      	orrs	r2, r1
    6c6a:	9245      	str	r2, [sp, #276]	; 0x114
    6c6c:	e78e      	b.n	6b8c <__svfiscanf_r+0x124>
    6c6e:	2308      	movs	r3, #8
    6c70:	2204      	movs	r2, #4
    6c72:	9346      	str	r3, [sp, #280]	; 0x118
    6c74:	e7ab      	b.n	6bce <__svfiscanf_r+0x166>
    6c76:	0031      	movs	r1, r6
    6c78:	a805      	add	r0, sp, #20
    6c7a:	f000 fab5 	bl	71e8 <__sccl>
    6c7e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6c80:	0006      	movs	r6, r0
    6c82:	9301      	str	r3, [sp, #4]
    6c84:	2340      	movs	r3, #64	; 0x40
    6c86:	9a01      	ldr	r2, [sp, #4]
    6c88:	4313      	orrs	r3, r2
    6c8a:	9345      	str	r3, [sp, #276]	; 0x114
    6c8c:	2301      	movs	r3, #1
    6c8e:	934b      	str	r3, [sp, #300]	; 0x12c
    6c90:	e79e      	b.n	6bd0 <__svfiscanf_r+0x168>
    6c92:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6c94:	9301      	str	r3, [sp, #4]
    6c96:	2340      	movs	r3, #64	; 0x40
    6c98:	9a01      	ldr	r2, [sp, #4]
    6c9a:	4313      	orrs	r3, r2
    6c9c:	9345      	str	r3, [sp, #276]	; 0x114
    6c9e:	2300      	movs	r3, #0
    6ca0:	e7f5      	b.n	6c8e <__svfiscanf_r+0x226>
    6ca2:	9945      	ldr	r1, [sp, #276]	; 0x114
    6ca4:	06cb      	lsls	r3, r1, #27
    6ca6:	d500      	bpl.n	6caa <__svfiscanf_r+0x242>
    6ca8:	e754      	b.n	6b54 <__svfiscanf_r+0xec>
    6caa:	9b03      	ldr	r3, [sp, #12]
    6cac:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6cae:	07c8      	lsls	r0, r1, #31
    6cb0:	d504      	bpl.n	6cbc <__svfiscanf_r+0x254>
    6cb2:	1d19      	adds	r1, r3, #4
    6cb4:	9103      	str	r1, [sp, #12]
    6cb6:	681b      	ldr	r3, [r3, #0]
    6cb8:	801a      	strh	r2, [r3, #0]
    6cba:	e74b      	b.n	6b54 <__svfiscanf_r+0xec>
    6cbc:	1d19      	adds	r1, r3, #4
    6cbe:	9103      	str	r1, [sp, #12]
    6cc0:	681b      	ldr	r3, [r3, #0]
    6cc2:	601a      	str	r2, [r3, #0]
    6cc4:	e746      	b.n	6b54 <__svfiscanf_r+0xec>
    6cc6:	2305      	movs	r3, #5
    6cc8:	e7e1      	b.n	6c8e <__svfiscanf_r+0x226>
    6cca:	2286      	movs	r2, #134	; 0x86
    6ccc:	ab02      	add	r3, sp, #8
    6cce:	0052      	lsls	r2, r2, #1
    6cd0:	189b      	adds	r3, r3, r2
    6cd2:	59db      	ldr	r3, [r3, r7]
    6cd4:	0021      	movs	r1, r4
    6cd6:	9800      	ldr	r0, [sp, #0]
    6cd8:	9301      	str	r3, [sp, #4]
    6cda:	4798      	blx	r3
    6cdc:	2800      	cmp	r0, #0
    6cde:	d100      	bne.n	6ce2 <__svfiscanf_r+0x27a>
    6ce0:	e77a      	b.n	6bd8 <__svfiscanf_r+0x170>
    6ce2:	e7b4      	b.n	6c4e <__svfiscanf_r+0x1e6>
    6ce4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6ce6:	9201      	str	r2, [sp, #4]
    6ce8:	3201      	adds	r2, #1
    6cea:	9249      	str	r2, [sp, #292]	; 0x124
    6cec:	6862      	ldr	r2, [r4, #4]
    6cee:	3a01      	subs	r2, #1
    6cf0:	6062      	str	r2, [r4, #4]
    6cf2:	2a00      	cmp	r2, #0
    6cf4:	dd0b      	ble.n	6d0e <__svfiscanf_r+0x2a6>
    6cf6:	3301      	adds	r3, #1
    6cf8:	6023      	str	r3, [r4, #0]
    6cfa:	f7ff faab 	bl	6254 <__locale_ctype_ptr>
    6cfe:	2108      	movs	r1, #8
    6d00:	6823      	ldr	r3, [r4, #0]
    6d02:	781a      	ldrb	r2, [r3, #0]
    6d04:	1880      	adds	r0, r0, r2
    6d06:	7842      	ldrb	r2, [r0, #1]
    6d08:	420a      	tst	r2, r1
    6d0a:	d1eb      	bne.n	6ce4 <__svfiscanf_r+0x27c>
    6d0c:	e769      	b.n	6be2 <__svfiscanf_r+0x17a>
    6d0e:	2286      	movs	r2, #134	; 0x86
    6d10:	ab02      	add	r3, sp, #8
    6d12:	0052      	lsls	r2, r2, #1
    6d14:	189b      	adds	r3, r3, r2
    6d16:	59db      	ldr	r3, [r3, r7]
    6d18:	0021      	movs	r1, r4
    6d1a:	9800      	ldr	r0, [sp, #0]
    6d1c:	9301      	str	r3, [sp, #4]
    6d1e:	4798      	blx	r3
    6d20:	2800      	cmp	r0, #0
    6d22:	d0ea      	beq.n	6cfa <__svfiscanf_r+0x292>
    6d24:	e793      	b.n	6c4e <__svfiscanf_r+0x1e6>
    6d26:	2b04      	cmp	r3, #4
    6d28:	dc06      	bgt.n	6d38 <__svfiscanf_r+0x2d0>
    6d2a:	ab03      	add	r3, sp, #12
    6d2c:	0022      	movs	r2, r4
    6d2e:	a945      	add	r1, sp, #276	; 0x114
    6d30:	9800      	ldr	r0, [sp, #0]
    6d32:	f000 f8ab 	bl	6e8c <_scanf_i>
    6d36:	e75e      	b.n	6bf6 <__svfiscanf_r+0x18e>
    6d38:	4b0d      	ldr	r3, [pc, #52]	; (6d70 <__svfiscanf_r+0x308>)
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d100      	bne.n	6d40 <__svfiscanf_r+0x2d8>
    6d3e:	e709      	b.n	6b54 <__svfiscanf_r+0xec>
    6d40:	ab03      	add	r3, sp, #12
    6d42:	0022      	movs	r2, r4
    6d44:	a945      	add	r1, sp, #276	; 0x114
    6d46:	9800      	ldr	r0, [sp, #0]
    6d48:	e000      	b.n	6d4c <__svfiscanf_r+0x2e4>
    6d4a:	bf00      	nop
    6d4c:	e753      	b.n	6bf6 <__svfiscanf_r+0x18e>
    6d4e:	89a3      	ldrh	r3, [r4, #12]
    6d50:	065b      	lsls	r3, r3, #25
    6d52:	d400      	bmi.n	6d56 <__svfiscanf_r+0x2ee>
    6d54:	e780      	b.n	6c58 <__svfiscanf_r+0x1f0>
    6d56:	2001      	movs	r0, #1
    6d58:	4240      	negs	r0, r0
    6d5a:	e77d      	b.n	6c58 <__svfiscanf_r+0x1f0>
    6d5c:	9848      	ldr	r0, [sp, #288]	; 0x120
    6d5e:	e77b      	b.n	6c58 <__svfiscanf_r+0x1f0>
    6d60:	fffffd64 	.word	0xfffffd64
    6d64:	00007491 	.word	0x00007491
    6d68:	000070a5 	.word	0x000070a5
    6d6c:	00007f10 	.word	0x00007f10
    6d70:	00000000 	.word	0x00000000

00006d74 <_vfiscanf_r>:
    6d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d76:	0004      	movs	r4, r0
    6d78:	000d      	movs	r5, r1
    6d7a:	0016      	movs	r6, r2
    6d7c:	001f      	movs	r7, r3
    6d7e:	2800      	cmp	r0, #0
    6d80:	d004      	beq.n	6d8c <_vfiscanf_r+0x18>
    6d82:	6983      	ldr	r3, [r0, #24]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d101      	bne.n	6d8c <_vfiscanf_r+0x18>
    6d88:	f7ff f9b0 	bl	60ec <__sinit>
    6d8c:	4b0a      	ldr	r3, [pc, #40]	; (6db8 <_vfiscanf_r+0x44>)
    6d8e:	429d      	cmp	r5, r3
    6d90:	d107      	bne.n	6da2 <_vfiscanf_r+0x2e>
    6d92:	6865      	ldr	r5, [r4, #4]
    6d94:	003b      	movs	r3, r7
    6d96:	0032      	movs	r2, r6
    6d98:	0029      	movs	r1, r5
    6d9a:	0020      	movs	r0, r4
    6d9c:	f7ff fe64 	bl	6a68 <__svfiscanf_r>
    6da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6da2:	4b06      	ldr	r3, [pc, #24]	; (6dbc <_vfiscanf_r+0x48>)
    6da4:	429d      	cmp	r5, r3
    6da6:	d101      	bne.n	6dac <_vfiscanf_r+0x38>
    6da8:	68a5      	ldr	r5, [r4, #8]
    6daa:	e7f3      	b.n	6d94 <_vfiscanf_r+0x20>
    6dac:	4b04      	ldr	r3, [pc, #16]	; (6dc0 <_vfiscanf_r+0x4c>)
    6dae:	429d      	cmp	r5, r3
    6db0:	d1f0      	bne.n	6d94 <_vfiscanf_r+0x20>
    6db2:	68e5      	ldr	r5, [r4, #12]
    6db4:	e7ee      	b.n	6d94 <_vfiscanf_r+0x20>
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	00007ec0 	.word	0x00007ec0
    6dbc:	00007ee0 	.word	0x00007ee0
    6dc0:	00007ea0 	.word	0x00007ea0

00006dc4 <_scanf_chars>:
    6dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6dc6:	0015      	movs	r5, r2
    6dc8:	688a      	ldr	r2, [r1, #8]
    6dca:	9001      	str	r0, [sp, #4]
    6dcc:	000c      	movs	r4, r1
    6dce:	2a00      	cmp	r2, #0
    6dd0:	d106      	bne.n	6de0 <_scanf_chars+0x1c>
    6dd2:	698a      	ldr	r2, [r1, #24]
    6dd4:	1e51      	subs	r1, r2, #1
    6dd6:	418a      	sbcs	r2, r1
    6dd8:	2101      	movs	r1, #1
    6dda:	4252      	negs	r2, r2
    6ddc:	430a      	orrs	r2, r1
    6dde:	60a2      	str	r2, [r4, #8]
    6de0:	6822      	ldr	r2, [r4, #0]
    6de2:	06d2      	lsls	r2, r2, #27
    6de4:	d403      	bmi.n	6dee <_scanf_chars+0x2a>
    6de6:	681a      	ldr	r2, [r3, #0]
    6de8:	1d11      	adds	r1, r2, #4
    6dea:	6019      	str	r1, [r3, #0]
    6dec:	6817      	ldr	r7, [r2, #0]
    6dee:	2600      	movs	r6, #0
    6df0:	69a3      	ldr	r3, [r4, #24]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d01c      	beq.n	6e30 <_scanf_chars+0x6c>
    6df6:	2b01      	cmp	r3, #1
    6df8:	d108      	bne.n	6e0c <_scanf_chars+0x48>
    6dfa:	682b      	ldr	r3, [r5, #0]
    6dfc:	6962      	ldr	r2, [r4, #20]
    6dfe:	781b      	ldrb	r3, [r3, #0]
    6e00:	5cd3      	ldrb	r3, [r2, r3]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d114      	bne.n	6e30 <_scanf_chars+0x6c>
    6e06:	2e00      	cmp	r6, #0
    6e08:	d130      	bne.n	6e6c <_scanf_chars+0xa8>
    6e0a:	e006      	b.n	6e1a <_scanf_chars+0x56>
    6e0c:	2b02      	cmp	r3, #2
    6e0e:	d006      	beq.n	6e1e <_scanf_chars+0x5a>
    6e10:	2e00      	cmp	r6, #0
    6e12:	d12b      	bne.n	6e6c <_scanf_chars+0xa8>
    6e14:	69a3      	ldr	r3, [r4, #24]
    6e16:	2b01      	cmp	r3, #1
    6e18:	d128      	bne.n	6e6c <_scanf_chars+0xa8>
    6e1a:	2001      	movs	r0, #1
    6e1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e1e:	f7ff fa19 	bl	6254 <__locale_ctype_ptr>
    6e22:	2208      	movs	r2, #8
    6e24:	682b      	ldr	r3, [r5, #0]
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	18c0      	adds	r0, r0, r3
    6e2a:	7843      	ldrb	r3, [r0, #1]
    6e2c:	4213      	tst	r3, r2
    6e2e:	d1ef      	bne.n	6e10 <_scanf_chars+0x4c>
    6e30:	2210      	movs	r2, #16
    6e32:	6823      	ldr	r3, [r4, #0]
    6e34:	3601      	adds	r6, #1
    6e36:	4213      	tst	r3, r2
    6e38:	d103      	bne.n	6e42 <_scanf_chars+0x7e>
    6e3a:	682b      	ldr	r3, [r5, #0]
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	703b      	strb	r3, [r7, #0]
    6e40:	3701      	adds	r7, #1
    6e42:	682a      	ldr	r2, [r5, #0]
    6e44:	686b      	ldr	r3, [r5, #4]
    6e46:	3201      	adds	r2, #1
    6e48:	602a      	str	r2, [r5, #0]
    6e4a:	68a2      	ldr	r2, [r4, #8]
    6e4c:	3b01      	subs	r3, #1
    6e4e:	3a01      	subs	r2, #1
    6e50:	606b      	str	r3, [r5, #4]
    6e52:	60a2      	str	r2, [r4, #8]
    6e54:	2a00      	cmp	r2, #0
    6e56:	d009      	beq.n	6e6c <_scanf_chars+0xa8>
    6e58:	2b00      	cmp	r3, #0
    6e5a:	dcc9      	bgt.n	6df0 <_scanf_chars+0x2c>
    6e5c:	23c0      	movs	r3, #192	; 0xc0
    6e5e:	005b      	lsls	r3, r3, #1
    6e60:	58e3      	ldr	r3, [r4, r3]
    6e62:	0029      	movs	r1, r5
    6e64:	9801      	ldr	r0, [sp, #4]
    6e66:	4798      	blx	r3
    6e68:	2800      	cmp	r0, #0
    6e6a:	d0c1      	beq.n	6df0 <_scanf_chars+0x2c>
    6e6c:	2310      	movs	r3, #16
    6e6e:	6822      	ldr	r2, [r4, #0]
    6e70:	4013      	ands	r3, r2
    6e72:	d106      	bne.n	6e82 <_scanf_chars+0xbe>
    6e74:	68e2      	ldr	r2, [r4, #12]
    6e76:	3201      	adds	r2, #1
    6e78:	60e2      	str	r2, [r4, #12]
    6e7a:	69a2      	ldr	r2, [r4, #24]
    6e7c:	2a00      	cmp	r2, #0
    6e7e:	d000      	beq.n	6e82 <_scanf_chars+0xbe>
    6e80:	703b      	strb	r3, [r7, #0]
    6e82:	6923      	ldr	r3, [r4, #16]
    6e84:	2000      	movs	r0, #0
    6e86:	199e      	adds	r6, r3, r6
    6e88:	6126      	str	r6, [r4, #16]
    6e8a:	e7c7      	b.n	6e1c <_scanf_chars+0x58>

00006e8c <_scanf_i>:
    6e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e8e:	000c      	movs	r4, r1
    6e90:	b08d      	sub	sp, #52	; 0x34
    6e92:	9302      	str	r3, [sp, #8]
    6e94:	4b77      	ldr	r3, [pc, #476]	; (7074 <_scanf_i+0x1e8>)
    6e96:	9005      	str	r0, [sp, #20]
    6e98:	0016      	movs	r6, r2
    6e9a:	aa09      	add	r2, sp, #36	; 0x24
    6e9c:	cb23      	ldmia	r3!, {r0, r1, r5}
    6e9e:	c223      	stmia	r2!, {r0, r1, r5}
    6ea0:	4b75      	ldr	r3, [pc, #468]	; (7078 <_scanf_i+0x1ec>)
    6ea2:	9306      	str	r3, [sp, #24]
    6ea4:	69a3      	ldr	r3, [r4, #24]
    6ea6:	2b03      	cmp	r3, #3
    6ea8:	d001      	beq.n	6eae <_scanf_i+0x22>
    6eaa:	4b74      	ldr	r3, [pc, #464]	; (707c <_scanf_i+0x1f0>)
    6eac:	9306      	str	r3, [sp, #24]
    6eae:	22ae      	movs	r2, #174	; 0xae
    6eb0:	2000      	movs	r0, #0
    6eb2:	68a3      	ldr	r3, [r4, #8]
    6eb4:	0052      	lsls	r2, r2, #1
    6eb6:	1e59      	subs	r1, r3, #1
    6eb8:	9004      	str	r0, [sp, #16]
    6eba:	4291      	cmp	r1, r2
    6ebc:	d905      	bls.n	6eca <_scanf_i+0x3e>
    6ebe:	3b5e      	subs	r3, #94	; 0x5e
    6ec0:	3bff      	subs	r3, #255	; 0xff
    6ec2:	9304      	str	r3, [sp, #16]
    6ec4:	235e      	movs	r3, #94	; 0x5e
    6ec6:	33ff      	adds	r3, #255	; 0xff
    6ec8:	60a3      	str	r3, [r4, #8]
    6eca:	0023      	movs	r3, r4
    6ecc:	331c      	adds	r3, #28
    6ece:	9301      	str	r3, [sp, #4]
    6ed0:	23d0      	movs	r3, #208	; 0xd0
    6ed2:	2700      	movs	r7, #0
    6ed4:	6822      	ldr	r2, [r4, #0]
    6ed6:	011b      	lsls	r3, r3, #4
    6ed8:	4313      	orrs	r3, r2
    6eda:	6023      	str	r3, [r4, #0]
    6edc:	9b01      	ldr	r3, [sp, #4]
    6ede:	9303      	str	r3, [sp, #12]
    6ee0:	6833      	ldr	r3, [r6, #0]
    6ee2:	a809      	add	r0, sp, #36	; 0x24
    6ee4:	7819      	ldrb	r1, [r3, #0]
    6ee6:	00bb      	lsls	r3, r7, #2
    6ee8:	2202      	movs	r2, #2
    6eea:	5818      	ldr	r0, [r3, r0]
    6eec:	f000 fbac 	bl	7648 <memchr>
    6ef0:	2800      	cmp	r0, #0
    6ef2:	d02b      	beq.n	6f4c <_scanf_i+0xc0>
    6ef4:	2f01      	cmp	r7, #1
    6ef6:	d15f      	bne.n	6fb8 <_scanf_i+0x12c>
    6ef8:	6863      	ldr	r3, [r4, #4]
    6efa:	2b00      	cmp	r3, #0
    6efc:	d106      	bne.n	6f0c <_scanf_i+0x80>
    6efe:	3308      	adds	r3, #8
    6f00:	6822      	ldr	r2, [r4, #0]
    6f02:	6063      	str	r3, [r4, #4]
    6f04:	33f9      	adds	r3, #249	; 0xf9
    6f06:	33ff      	adds	r3, #255	; 0xff
    6f08:	4313      	orrs	r3, r2
    6f0a:	6023      	str	r3, [r4, #0]
    6f0c:	4b5c      	ldr	r3, [pc, #368]	; (7080 <_scanf_i+0x1f4>)
    6f0e:	6822      	ldr	r2, [r4, #0]
    6f10:	4013      	ands	r3, r2
    6f12:	6023      	str	r3, [r4, #0]
    6f14:	68a3      	ldr	r3, [r4, #8]
    6f16:	1e5a      	subs	r2, r3, #1
    6f18:	60a2      	str	r2, [r4, #8]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	d016      	beq.n	6f4c <_scanf_i+0xc0>
    6f1e:	9b03      	ldr	r3, [sp, #12]
    6f20:	1c5d      	adds	r5, r3, #1
    6f22:	6833      	ldr	r3, [r6, #0]
    6f24:	1c5a      	adds	r2, r3, #1
    6f26:	6032      	str	r2, [r6, #0]
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	9a03      	ldr	r2, [sp, #12]
    6f2c:	9503      	str	r5, [sp, #12]
    6f2e:	7013      	strb	r3, [r2, #0]
    6f30:	6873      	ldr	r3, [r6, #4]
    6f32:	3b01      	subs	r3, #1
    6f34:	6073      	str	r3, [r6, #4]
    6f36:	2b00      	cmp	r3, #0
    6f38:	dc08      	bgt.n	6f4c <_scanf_i+0xc0>
    6f3a:	23c0      	movs	r3, #192	; 0xc0
    6f3c:	005b      	lsls	r3, r3, #1
    6f3e:	58e3      	ldr	r3, [r4, r3]
    6f40:	0031      	movs	r1, r6
    6f42:	9805      	ldr	r0, [sp, #20]
    6f44:	9307      	str	r3, [sp, #28]
    6f46:	4798      	blx	r3
    6f48:	2800      	cmp	r0, #0
    6f4a:	d17d      	bne.n	7048 <_scanf_i+0x1bc>
    6f4c:	3701      	adds	r7, #1
    6f4e:	2f03      	cmp	r7, #3
    6f50:	d1c6      	bne.n	6ee0 <_scanf_i+0x54>
    6f52:	6863      	ldr	r3, [r4, #4]
    6f54:	2b00      	cmp	r3, #0
    6f56:	d101      	bne.n	6f5c <_scanf_i+0xd0>
    6f58:	330a      	adds	r3, #10
    6f5a:	6063      	str	r3, [r4, #4]
    6f5c:	2110      	movs	r1, #16
    6f5e:	2700      	movs	r7, #0
    6f60:	6863      	ldr	r3, [r4, #4]
    6f62:	6960      	ldr	r0, [r4, #20]
    6f64:	1ac9      	subs	r1, r1, r3
    6f66:	4b47      	ldr	r3, [pc, #284]	; (7084 <_scanf_i+0x1f8>)
    6f68:	18c9      	adds	r1, r1, r3
    6f6a:	f000 f93d 	bl	71e8 <__sccl>
    6f6e:	9d03      	ldr	r5, [sp, #12]
    6f70:	68a3      	ldr	r3, [r4, #8]
    6f72:	2b00      	cmp	r3, #0
    6f74:	d041      	beq.n	6ffa <_scanf_i+0x16e>
    6f76:	6832      	ldr	r2, [r6, #0]
    6f78:	6960      	ldr	r0, [r4, #20]
    6f7a:	7811      	ldrb	r1, [r2, #0]
    6f7c:	5c40      	ldrb	r0, [r0, r1]
    6f7e:	2800      	cmp	r0, #0
    6f80:	d03b      	beq.n	6ffa <_scanf_i+0x16e>
    6f82:	2930      	cmp	r1, #48	; 0x30
    6f84:	d128      	bne.n	6fd8 <_scanf_i+0x14c>
    6f86:	2080      	movs	r0, #128	; 0x80
    6f88:	6821      	ldr	r1, [r4, #0]
    6f8a:	0100      	lsls	r0, r0, #4
    6f8c:	4201      	tst	r1, r0
    6f8e:	d023      	beq.n	6fd8 <_scanf_i+0x14c>
    6f90:	9a04      	ldr	r2, [sp, #16]
    6f92:	3701      	adds	r7, #1
    6f94:	2a00      	cmp	r2, #0
    6f96:	d003      	beq.n	6fa0 <_scanf_i+0x114>
    6f98:	3a01      	subs	r2, #1
    6f9a:	3301      	adds	r3, #1
    6f9c:	9204      	str	r2, [sp, #16]
    6f9e:	60a3      	str	r3, [r4, #8]
    6fa0:	6873      	ldr	r3, [r6, #4]
    6fa2:	3b01      	subs	r3, #1
    6fa4:	6073      	str	r3, [r6, #4]
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	dd1e      	ble.n	6fe8 <_scanf_i+0x15c>
    6faa:	6833      	ldr	r3, [r6, #0]
    6fac:	3301      	adds	r3, #1
    6fae:	6033      	str	r3, [r6, #0]
    6fb0:	68a3      	ldr	r3, [r4, #8]
    6fb2:	3b01      	subs	r3, #1
    6fb4:	60a3      	str	r3, [r4, #8]
    6fb6:	e7db      	b.n	6f70 <_scanf_i+0xe4>
    6fb8:	2f02      	cmp	r7, #2
    6fba:	d1ab      	bne.n	6f14 <_scanf_i+0x88>
    6fbc:	21c0      	movs	r1, #192	; 0xc0
    6fbe:	2380      	movs	r3, #128	; 0x80
    6fc0:	6822      	ldr	r2, [r4, #0]
    6fc2:	00c9      	lsls	r1, r1, #3
    6fc4:	4011      	ands	r1, r2
    6fc6:	009b      	lsls	r3, r3, #2
    6fc8:	4299      	cmp	r1, r3
    6fca:	d1c2      	bne.n	6f52 <_scanf_i+0xc6>
    6fcc:	3bf1      	subs	r3, #241	; 0xf1
    6fce:	3bff      	subs	r3, #255	; 0xff
    6fd0:	6063      	str	r3, [r4, #4]
    6fd2:	33f0      	adds	r3, #240	; 0xf0
    6fd4:	4313      	orrs	r3, r2
    6fd6:	e79c      	b.n	6f12 <_scanf_i+0x86>
    6fd8:	6821      	ldr	r1, [r4, #0]
    6fda:	4b2b      	ldr	r3, [pc, #172]	; (7088 <_scanf_i+0x1fc>)
    6fdc:	400b      	ands	r3, r1
    6fde:	6023      	str	r3, [r4, #0]
    6fe0:	7813      	ldrb	r3, [r2, #0]
    6fe2:	702b      	strb	r3, [r5, #0]
    6fe4:	3501      	adds	r5, #1
    6fe6:	e7db      	b.n	6fa0 <_scanf_i+0x114>
    6fe8:	23c0      	movs	r3, #192	; 0xc0
    6fea:	005b      	lsls	r3, r3, #1
    6fec:	58e3      	ldr	r3, [r4, r3]
    6fee:	0031      	movs	r1, r6
    6ff0:	9805      	ldr	r0, [sp, #20]
    6ff2:	9303      	str	r3, [sp, #12]
    6ff4:	4798      	blx	r3
    6ff6:	2800      	cmp	r0, #0
    6ff8:	d0da      	beq.n	6fb0 <_scanf_i+0x124>
    6ffa:	6823      	ldr	r3, [r4, #0]
    6ffc:	05db      	lsls	r3, r3, #23
    6ffe:	d50e      	bpl.n	701e <_scanf_i+0x192>
    7000:	9b01      	ldr	r3, [sp, #4]
    7002:	429d      	cmp	r5, r3
    7004:	d907      	bls.n	7016 <_scanf_i+0x18a>
    7006:	23be      	movs	r3, #190	; 0xbe
    7008:	3d01      	subs	r5, #1
    700a:	005b      	lsls	r3, r3, #1
    700c:	7829      	ldrb	r1, [r5, #0]
    700e:	58e3      	ldr	r3, [r4, r3]
    7010:	0032      	movs	r2, r6
    7012:	9805      	ldr	r0, [sp, #20]
    7014:	4798      	blx	r3
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	2001      	movs	r0, #1
    701a:	429d      	cmp	r5, r3
    701c:	d027      	beq.n	706e <_scanf_i+0x1e2>
    701e:	2210      	movs	r2, #16
    7020:	6823      	ldr	r3, [r4, #0]
    7022:	401a      	ands	r2, r3
    7024:	d11c      	bne.n	7060 <_scanf_i+0x1d4>
    7026:	702a      	strb	r2, [r5, #0]
    7028:	6863      	ldr	r3, [r4, #4]
    702a:	9901      	ldr	r1, [sp, #4]
    702c:	9805      	ldr	r0, [sp, #20]
    702e:	9e06      	ldr	r6, [sp, #24]
    7030:	47b0      	blx	r6
    7032:	9b02      	ldr	r3, [sp, #8]
    7034:	6822      	ldr	r2, [r4, #0]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	0691      	lsls	r1, r2, #26
    703a:	d507      	bpl.n	704c <_scanf_i+0x1c0>
    703c:	9902      	ldr	r1, [sp, #8]
    703e:	1d1a      	adds	r2, r3, #4
    7040:	600a      	str	r2, [r1, #0]
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	6018      	str	r0, [r3, #0]
    7046:	e008      	b.n	705a <_scanf_i+0x1ce>
    7048:	2700      	movs	r7, #0
    704a:	e7d6      	b.n	6ffa <_scanf_i+0x16e>
    704c:	07d1      	lsls	r1, r2, #31
    704e:	d5f5      	bpl.n	703c <_scanf_i+0x1b0>
    7050:	9902      	ldr	r1, [sp, #8]
    7052:	1d1a      	adds	r2, r3, #4
    7054:	600a      	str	r2, [r1, #0]
    7056:	681b      	ldr	r3, [r3, #0]
    7058:	8018      	strh	r0, [r3, #0]
    705a:	68e3      	ldr	r3, [r4, #12]
    705c:	3301      	adds	r3, #1
    705e:	60e3      	str	r3, [r4, #12]
    7060:	2000      	movs	r0, #0
    7062:	9b01      	ldr	r3, [sp, #4]
    7064:	1aed      	subs	r5, r5, r3
    7066:	6923      	ldr	r3, [r4, #16]
    7068:	19ef      	adds	r7, r5, r7
    706a:	19df      	adds	r7, r3, r7
    706c:	6127      	str	r7, [r4, #16]
    706e:	b00d      	add	sp, #52	; 0x34
    7070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7072:	46c0      	nop			; (mov r8, r8)
    7074:	00007f40 	.word	0x00007f40
    7078:	00005cf5 	.word	0x00005cf5
    707c:	000073f5 	.word	0x000073f5
    7080:	fffffaff 	.word	0xfffffaff
    7084:	00007f4c 	.word	0x00007f4c
    7088:	fffff6ff 	.word	0xfffff6ff

0000708c <lflush>:
    708c:	2209      	movs	r2, #9
    708e:	b510      	push	{r4, lr}
    7090:	8983      	ldrh	r3, [r0, #12]
    7092:	4013      	ands	r3, r2
    7094:	2200      	movs	r2, #0
    7096:	2b09      	cmp	r3, #9
    7098:	d102      	bne.n	70a0 <lflush+0x14>
    709a:	f7fe ffd1 	bl	6040 <fflush>
    709e:	0002      	movs	r2, r0
    70a0:	0010      	movs	r0, r2
    70a2:	bd10      	pop	{r4, pc}

000070a4 <__srefill_r>:
    70a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70a6:	0005      	movs	r5, r0
    70a8:	000c      	movs	r4, r1
    70aa:	2800      	cmp	r0, #0
    70ac:	d004      	beq.n	70b8 <__srefill_r+0x14>
    70ae:	6983      	ldr	r3, [r0, #24]
    70b0:	2b00      	cmp	r3, #0
    70b2:	d101      	bne.n	70b8 <__srefill_r+0x14>
    70b4:	f7ff f81a 	bl	60ec <__sinit>
    70b8:	4b3d      	ldr	r3, [pc, #244]	; (71b0 <__srefill_r+0x10c>)
    70ba:	429c      	cmp	r4, r3
    70bc:	d10a      	bne.n	70d4 <__srefill_r+0x30>
    70be:	686c      	ldr	r4, [r5, #4]
    70c0:	2300      	movs	r3, #0
    70c2:	6063      	str	r3, [r4, #4]
    70c4:	230c      	movs	r3, #12
    70c6:	5ee2      	ldrsh	r2, [r4, r3]
    70c8:	b293      	uxth	r3, r2
    70ca:	0699      	lsls	r1, r3, #26
    70cc:	d50c      	bpl.n	70e8 <__srefill_r+0x44>
    70ce:	2001      	movs	r0, #1
    70d0:	4240      	negs	r0, r0
    70d2:	e068      	b.n	71a6 <__srefill_r+0x102>
    70d4:	4b37      	ldr	r3, [pc, #220]	; (71b4 <__srefill_r+0x110>)
    70d6:	429c      	cmp	r4, r3
    70d8:	d101      	bne.n	70de <__srefill_r+0x3a>
    70da:	68ac      	ldr	r4, [r5, #8]
    70dc:	e7f0      	b.n	70c0 <__srefill_r+0x1c>
    70de:	4b36      	ldr	r3, [pc, #216]	; (71b8 <__srefill_r+0x114>)
    70e0:	429c      	cmp	r4, r3
    70e2:	d1ed      	bne.n	70c0 <__srefill_r+0x1c>
    70e4:	68ec      	ldr	r4, [r5, #12]
    70e6:	e7eb      	b.n	70c0 <__srefill_r+0x1c>
    70e8:	0759      	lsls	r1, r3, #29
    70ea:	d44a      	bmi.n	7182 <__srefill_r+0xde>
    70ec:	06d9      	lsls	r1, r3, #27
    70ee:	d405      	bmi.n	70fc <__srefill_r+0x58>
    70f0:	2309      	movs	r3, #9
    70f2:	602b      	str	r3, [r5, #0]
    70f4:	3337      	adds	r3, #55	; 0x37
    70f6:	4313      	orrs	r3, r2
    70f8:	81a3      	strh	r3, [r4, #12]
    70fa:	e7e8      	b.n	70ce <__srefill_r+0x2a>
    70fc:	2608      	movs	r6, #8
    70fe:	4233      	tst	r3, r6
    7100:	d00a      	beq.n	7118 <__srefill_r+0x74>
    7102:	0021      	movs	r1, r4
    7104:	0028      	movs	r0, r5
    7106:	f7fe ff6f 	bl	5fe8 <_fflush_r>
    710a:	2800      	cmp	r0, #0
    710c:	d1df      	bne.n	70ce <__srefill_r+0x2a>
    710e:	89a3      	ldrh	r3, [r4, #12]
    7110:	60a0      	str	r0, [r4, #8]
    7112:	43b3      	bics	r3, r6
    7114:	81a3      	strh	r3, [r4, #12]
    7116:	61a0      	str	r0, [r4, #24]
    7118:	2304      	movs	r3, #4
    711a:	89a2      	ldrh	r2, [r4, #12]
    711c:	4313      	orrs	r3, r2
    711e:	81a3      	strh	r3, [r4, #12]
    7120:	6923      	ldr	r3, [r4, #16]
    7122:	2b00      	cmp	r3, #0
    7124:	d103      	bne.n	712e <__srefill_r+0x8a>
    7126:	0021      	movs	r1, r4
    7128:	0028      	movs	r0, r5
    712a:	f7ff f8c9 	bl	62c0 <__smakebuf_r>
    712e:	230c      	movs	r3, #12
    7130:	5ee7      	ldrsh	r7, [r4, r3]
    7132:	b2be      	uxth	r6, r7
    7134:	07b3      	lsls	r3, r6, #30
    7136:	d00f      	beq.n	7158 <__srefill_r+0xb4>
    7138:	2301      	movs	r3, #1
    713a:	81a3      	strh	r3, [r4, #12]
    713c:	4b1f      	ldr	r3, [pc, #124]	; (71bc <__srefill_r+0x118>)
    713e:	4920      	ldr	r1, [pc, #128]	; (71c0 <__srefill_r+0x11c>)
    7140:	6818      	ldr	r0, [r3, #0]
    7142:	f7ff f847 	bl	61d4 <_fwalk>
    7146:	2309      	movs	r3, #9
    7148:	81a7      	strh	r7, [r4, #12]
    714a:	401e      	ands	r6, r3
    714c:	429e      	cmp	r6, r3
    714e:	d103      	bne.n	7158 <__srefill_r+0xb4>
    7150:	0021      	movs	r1, r4
    7152:	0028      	movs	r0, r5
    7154:	f7fe febe 	bl	5ed4 <__sflush_r>
    7158:	6923      	ldr	r3, [r4, #16]
    715a:	6922      	ldr	r2, [r4, #16]
    715c:	6023      	str	r3, [r4, #0]
    715e:	0028      	movs	r0, r5
    7160:	6963      	ldr	r3, [r4, #20]
    7162:	6a21      	ldr	r1, [r4, #32]
    7164:	6a65      	ldr	r5, [r4, #36]	; 0x24
    7166:	47a8      	blx	r5
    7168:	0002      	movs	r2, r0
    716a:	6060      	str	r0, [r4, #4]
    716c:	2000      	movs	r0, #0
    716e:	4282      	cmp	r2, r0
    7170:	dc19      	bgt.n	71a6 <__srefill_r+0x102>
    7172:	89a1      	ldrh	r1, [r4, #12]
    7174:	4282      	cmp	r2, r0
    7176:	d117      	bne.n	71a8 <__srefill_r+0x104>
    7178:	2320      	movs	r3, #32
    717a:	430b      	orrs	r3, r1
    717c:	81a3      	strh	r3, [r4, #12]
    717e:	3801      	subs	r0, #1
    7180:	e011      	b.n	71a6 <__srefill_r+0x102>
    7182:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7184:	2900      	cmp	r1, #0
    7186:	d0cb      	beq.n	7120 <__srefill_r+0x7c>
    7188:	0023      	movs	r3, r4
    718a:	3344      	adds	r3, #68	; 0x44
    718c:	4299      	cmp	r1, r3
    718e:	d002      	beq.n	7196 <__srefill_r+0xf2>
    7190:	0028      	movs	r0, r5
    7192:	f7ff f8f5 	bl	6380 <_free_r>
    7196:	2000      	movs	r0, #0
    7198:	6c23      	ldr	r3, [r4, #64]	; 0x40
    719a:	6360      	str	r0, [r4, #52]	; 0x34
    719c:	6063      	str	r3, [r4, #4]
    719e:	4283      	cmp	r3, r0
    71a0:	d0be      	beq.n	7120 <__srefill_r+0x7c>
    71a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    71a4:	6023      	str	r3, [r4, #0]
    71a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71a8:	2340      	movs	r3, #64	; 0x40
    71aa:	6060      	str	r0, [r4, #4]
    71ac:	430b      	orrs	r3, r1
    71ae:	e7a3      	b.n	70f8 <__srefill_r+0x54>
    71b0:	00007ec0 	.word	0x00007ec0
    71b4:	00007ee0 	.word	0x00007ee0
    71b8:	00007ea0 	.word	0x00007ea0
    71bc:	00007e9c 	.word	0x00007e9c
    71c0:	0000708d 	.word	0x0000708d

000071c4 <_sbrk_r>:
    71c4:	2300      	movs	r3, #0
    71c6:	b570      	push	{r4, r5, r6, lr}
    71c8:	4c06      	ldr	r4, [pc, #24]	; (71e4 <_sbrk_r+0x20>)
    71ca:	0005      	movs	r5, r0
    71cc:	0008      	movs	r0, r1
    71ce:	6023      	str	r3, [r4, #0]
    71d0:	f7fb fd78 	bl	2cc4 <_sbrk>
    71d4:	1c43      	adds	r3, r0, #1
    71d6:	d103      	bne.n	71e0 <_sbrk_r+0x1c>
    71d8:	6823      	ldr	r3, [r4, #0]
    71da:	2b00      	cmp	r3, #0
    71dc:	d000      	beq.n	71e0 <_sbrk_r+0x1c>
    71de:	602b      	str	r3, [r5, #0]
    71e0:	bd70      	pop	{r4, r5, r6, pc}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	20000424 	.word	0x20000424

000071e8 <__sccl>:
    71e8:	b570      	push	{r4, r5, r6, lr}
    71ea:	780b      	ldrb	r3, [r1, #0]
    71ec:	2b5e      	cmp	r3, #94	; 0x5e
    71ee:	d00d      	beq.n	720c <__sccl+0x24>
    71f0:	1c4a      	adds	r2, r1, #1
    71f2:	2100      	movs	r1, #0
    71f4:	0004      	movs	r4, r0
    71f6:	1c45      	adds	r5, r0, #1
    71f8:	35ff      	adds	r5, #255	; 0xff
    71fa:	7021      	strb	r1, [r4, #0]
    71fc:	3401      	adds	r4, #1
    71fe:	42a5      	cmp	r5, r4
    7200:	d1fb      	bne.n	71fa <__sccl+0x12>
    7202:	2b00      	cmp	r3, #0
    7204:	d106      	bne.n	7214 <__sccl+0x2c>
    7206:	3a01      	subs	r2, #1
    7208:	0010      	movs	r0, r2
    720a:	bd70      	pop	{r4, r5, r6, pc}
    720c:	1c8a      	adds	r2, r1, #2
    720e:	784b      	ldrb	r3, [r1, #1]
    7210:	2101      	movs	r1, #1
    7212:	e7ef      	b.n	71f4 <__sccl+0xc>
    7214:	2401      	movs	r4, #1
    7216:	404c      	eors	r4, r1
    7218:	0011      	movs	r1, r2
    721a:	54c4      	strb	r4, [r0, r3]
    721c:	780d      	ldrb	r5, [r1, #0]
    721e:	1c4a      	adds	r2, r1, #1
    7220:	2d2d      	cmp	r5, #45	; 0x2d
    7222:	d007      	beq.n	7234 <__sccl+0x4c>
    7224:	2d5d      	cmp	r5, #93	; 0x5d
    7226:	d0ef      	beq.n	7208 <__sccl+0x20>
    7228:	2d00      	cmp	r5, #0
    722a:	d101      	bne.n	7230 <__sccl+0x48>
    722c:	000a      	movs	r2, r1
    722e:	e7eb      	b.n	7208 <__sccl+0x20>
    7230:	002b      	movs	r3, r5
    7232:	e7f1      	b.n	7218 <__sccl+0x30>
    7234:	784e      	ldrb	r6, [r1, #1]
    7236:	2e5d      	cmp	r6, #93	; 0x5d
    7238:	d0fa      	beq.n	7230 <__sccl+0x48>
    723a:	42b3      	cmp	r3, r6
    723c:	dcf8      	bgt.n	7230 <__sccl+0x48>
    723e:	3102      	adds	r1, #2
    7240:	3301      	adds	r3, #1
    7242:	54c4      	strb	r4, [r0, r3]
    7244:	429e      	cmp	r6, r3
    7246:	dcfb      	bgt.n	7240 <__sccl+0x58>
    7248:	e7e8      	b.n	721c <__sccl+0x34>
	...

0000724c <__sread>:
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	000c      	movs	r4, r1
    7250:	250e      	movs	r5, #14
    7252:	5f49      	ldrsh	r1, [r1, r5]
    7254:	f000 fa2c 	bl	76b0 <_read_r>
    7258:	2800      	cmp	r0, #0
    725a:	db03      	blt.n	7264 <__sread+0x18>
    725c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    725e:	181b      	adds	r3, r3, r0
    7260:	6563      	str	r3, [r4, #84]	; 0x54
    7262:	bd70      	pop	{r4, r5, r6, pc}
    7264:	89a3      	ldrh	r3, [r4, #12]
    7266:	4a02      	ldr	r2, [pc, #8]	; (7270 <__sread+0x24>)
    7268:	4013      	ands	r3, r2
    726a:	81a3      	strh	r3, [r4, #12]
    726c:	e7f9      	b.n	7262 <__sread+0x16>
    726e:	46c0      	nop			; (mov r8, r8)
    7270:	ffffefff 	.word	0xffffefff

00007274 <__swrite>:
    7274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7276:	001f      	movs	r7, r3
    7278:	898b      	ldrh	r3, [r1, #12]
    727a:	0005      	movs	r5, r0
    727c:	000c      	movs	r4, r1
    727e:	0016      	movs	r6, r2
    7280:	05db      	lsls	r3, r3, #23
    7282:	d505      	bpl.n	7290 <__swrite+0x1c>
    7284:	230e      	movs	r3, #14
    7286:	5ec9      	ldrsh	r1, [r1, r3]
    7288:	2200      	movs	r2, #0
    728a:	2302      	movs	r3, #2
    728c:	f000 f9c8 	bl	7620 <_lseek_r>
    7290:	89a3      	ldrh	r3, [r4, #12]
    7292:	4a05      	ldr	r2, [pc, #20]	; (72a8 <__swrite+0x34>)
    7294:	0028      	movs	r0, r5
    7296:	4013      	ands	r3, r2
    7298:	81a3      	strh	r3, [r4, #12]
    729a:	0032      	movs	r2, r6
    729c:	230e      	movs	r3, #14
    729e:	5ee1      	ldrsh	r1, [r4, r3]
    72a0:	003b      	movs	r3, r7
    72a2:	f000 f973 	bl	758c <_write_r>
    72a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72a8:	ffffefff 	.word	0xffffefff

000072ac <__sseek>:
    72ac:	b570      	push	{r4, r5, r6, lr}
    72ae:	000c      	movs	r4, r1
    72b0:	250e      	movs	r5, #14
    72b2:	5f49      	ldrsh	r1, [r1, r5]
    72b4:	f000 f9b4 	bl	7620 <_lseek_r>
    72b8:	89a3      	ldrh	r3, [r4, #12]
    72ba:	1c42      	adds	r2, r0, #1
    72bc:	d103      	bne.n	72c6 <__sseek+0x1a>
    72be:	4a05      	ldr	r2, [pc, #20]	; (72d4 <__sseek+0x28>)
    72c0:	4013      	ands	r3, r2
    72c2:	81a3      	strh	r3, [r4, #12]
    72c4:	bd70      	pop	{r4, r5, r6, pc}
    72c6:	2280      	movs	r2, #128	; 0x80
    72c8:	0152      	lsls	r2, r2, #5
    72ca:	4313      	orrs	r3, r2
    72cc:	81a3      	strh	r3, [r4, #12]
    72ce:	6560      	str	r0, [r4, #84]	; 0x54
    72d0:	e7f8      	b.n	72c4 <__sseek+0x18>
    72d2:	46c0      	nop			; (mov r8, r8)
    72d4:	ffffefff 	.word	0xffffefff

000072d8 <__sclose>:
    72d8:	b510      	push	{r4, lr}
    72da:	230e      	movs	r3, #14
    72dc:	5ec9      	ldrsh	r1, [r1, r3]
    72de:	f000 f969 	bl	75b4 <_close_r>
    72e2:	bd10      	pop	{r4, pc}

000072e4 <_strtoul_l.isra.0>:
    72e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72e6:	001f      	movs	r7, r3
    72e8:	000e      	movs	r6, r1
    72ea:	b087      	sub	sp, #28
    72ec:	9005      	str	r0, [sp, #20]
    72ee:	9103      	str	r1, [sp, #12]
    72f0:	9201      	str	r2, [sp, #4]
    72f2:	980c      	ldr	r0, [sp, #48]	; 0x30
    72f4:	7834      	ldrb	r4, [r6, #0]
    72f6:	f7fe ffaa 	bl	624e <__locale_ctype_ptr_l>
    72fa:	2208      	movs	r2, #8
    72fc:	1900      	adds	r0, r0, r4
    72fe:	7843      	ldrb	r3, [r0, #1]
    7300:	1c75      	adds	r5, r6, #1
    7302:	4013      	ands	r3, r2
    7304:	d10c      	bne.n	7320 <_strtoul_l.isra.0+0x3c>
    7306:	2c2d      	cmp	r4, #45	; 0x2d
    7308:	d10c      	bne.n	7324 <_strtoul_l.isra.0+0x40>
    730a:	3301      	adds	r3, #1
    730c:	782c      	ldrb	r4, [r5, #0]
    730e:	9302      	str	r3, [sp, #8]
    7310:	1cb5      	adds	r5, r6, #2
    7312:	2f00      	cmp	r7, #0
    7314:	d00c      	beq.n	7330 <_strtoul_l.isra.0+0x4c>
    7316:	2f10      	cmp	r7, #16
    7318:	d114      	bne.n	7344 <_strtoul_l.isra.0+0x60>
    731a:	2c30      	cmp	r4, #48	; 0x30
    731c:	d00a      	beq.n	7334 <_strtoul_l.isra.0+0x50>
    731e:	e011      	b.n	7344 <_strtoul_l.isra.0+0x60>
    7320:	002e      	movs	r6, r5
    7322:	e7e6      	b.n	72f2 <_strtoul_l.isra.0+0xe>
    7324:	9302      	str	r3, [sp, #8]
    7326:	2c2b      	cmp	r4, #43	; 0x2b
    7328:	d1f3      	bne.n	7312 <_strtoul_l.isra.0+0x2e>
    732a:	782c      	ldrb	r4, [r5, #0]
    732c:	1cb5      	adds	r5, r6, #2
    732e:	e7f0      	b.n	7312 <_strtoul_l.isra.0+0x2e>
    7330:	2c30      	cmp	r4, #48	; 0x30
    7332:	d12f      	bne.n	7394 <_strtoul_l.isra.0+0xb0>
    7334:	2220      	movs	r2, #32
    7336:	782b      	ldrb	r3, [r5, #0]
    7338:	4393      	bics	r3, r2
    733a:	2b58      	cmp	r3, #88	; 0x58
    733c:	d154      	bne.n	73e8 <_strtoul_l.isra.0+0x104>
    733e:	2710      	movs	r7, #16
    7340:	786c      	ldrb	r4, [r5, #1]
    7342:	3502      	adds	r5, #2
    7344:	2001      	movs	r0, #1
    7346:	0039      	movs	r1, r7
    7348:	4240      	negs	r0, r0
    734a:	f7fb fe3b 	bl	2fc4 <__udivsi3>
    734e:	0006      	movs	r6, r0
    7350:	2001      	movs	r0, #1
    7352:	0039      	movs	r1, r7
    7354:	4240      	negs	r0, r0
    7356:	f7fb febb 	bl	30d0 <__aeabi_uidivmod>
    735a:	2300      	movs	r3, #0
    735c:	9104      	str	r1, [sp, #16]
    735e:	2101      	movs	r1, #1
    7360:	2201      	movs	r2, #1
    7362:	0018      	movs	r0, r3
    7364:	468c      	mov	ip, r1
    7366:	4252      	negs	r2, r2
    7368:	0021      	movs	r1, r4
    736a:	3930      	subs	r1, #48	; 0x30
    736c:	2909      	cmp	r1, #9
    736e:	d813      	bhi.n	7398 <_strtoul_l.isra.0+0xb4>
    7370:	000c      	movs	r4, r1
    7372:	42a7      	cmp	r7, r4
    7374:	dd1e      	ble.n	73b4 <_strtoul_l.isra.0+0xd0>
    7376:	2b00      	cmp	r3, #0
    7378:	db1a      	blt.n	73b0 <_strtoul_l.isra.0+0xcc>
    737a:	0013      	movs	r3, r2
    737c:	4286      	cmp	r6, r0
    737e:	d306      	bcc.n	738e <_strtoul_l.isra.0+0xaa>
    7380:	d102      	bne.n	7388 <_strtoul_l.isra.0+0xa4>
    7382:	9904      	ldr	r1, [sp, #16]
    7384:	42a1      	cmp	r1, r4
    7386:	db02      	blt.n	738e <_strtoul_l.isra.0+0xaa>
    7388:	4663      	mov	r3, ip
    738a:	4378      	muls	r0, r7
    738c:	1820      	adds	r0, r4, r0
    738e:	782c      	ldrb	r4, [r5, #0]
    7390:	3501      	adds	r5, #1
    7392:	e7e9      	b.n	7368 <_strtoul_l.isra.0+0x84>
    7394:	270a      	movs	r7, #10
    7396:	e7d5      	b.n	7344 <_strtoul_l.isra.0+0x60>
    7398:	0021      	movs	r1, r4
    739a:	3941      	subs	r1, #65	; 0x41
    739c:	2919      	cmp	r1, #25
    739e:	d801      	bhi.n	73a4 <_strtoul_l.isra.0+0xc0>
    73a0:	3c37      	subs	r4, #55	; 0x37
    73a2:	e7e6      	b.n	7372 <_strtoul_l.isra.0+0x8e>
    73a4:	0021      	movs	r1, r4
    73a6:	3961      	subs	r1, #97	; 0x61
    73a8:	2919      	cmp	r1, #25
    73aa:	d803      	bhi.n	73b4 <_strtoul_l.isra.0+0xd0>
    73ac:	3c57      	subs	r4, #87	; 0x57
    73ae:	e7e0      	b.n	7372 <_strtoul_l.isra.0+0x8e>
    73b0:	0013      	movs	r3, r2
    73b2:	e7ec      	b.n	738e <_strtoul_l.isra.0+0xaa>
    73b4:	2b00      	cmp	r3, #0
    73b6:	da09      	bge.n	73cc <_strtoul_l.isra.0+0xe8>
    73b8:	2322      	movs	r3, #34	; 0x22
    73ba:	2001      	movs	r0, #1
    73bc:	9a05      	ldr	r2, [sp, #20]
    73be:	4240      	negs	r0, r0
    73c0:	6013      	str	r3, [r2, #0]
    73c2:	9b01      	ldr	r3, [sp, #4]
    73c4:	2b00      	cmp	r3, #0
    73c6:	d10b      	bne.n	73e0 <_strtoul_l.isra.0+0xfc>
    73c8:	b007      	add	sp, #28
    73ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73cc:	9a02      	ldr	r2, [sp, #8]
    73ce:	2a00      	cmp	r2, #0
    73d0:	d000      	beq.n	73d4 <_strtoul_l.isra.0+0xf0>
    73d2:	4240      	negs	r0, r0
    73d4:	9a01      	ldr	r2, [sp, #4]
    73d6:	2a00      	cmp	r2, #0
    73d8:	d0f6      	beq.n	73c8 <_strtoul_l.isra.0+0xe4>
    73da:	9a03      	ldr	r2, [sp, #12]
    73dc:	2b00      	cmp	r3, #0
    73de:	d000      	beq.n	73e2 <_strtoul_l.isra.0+0xfe>
    73e0:	1e6a      	subs	r2, r5, #1
    73e2:	9b01      	ldr	r3, [sp, #4]
    73e4:	601a      	str	r2, [r3, #0]
    73e6:	e7ef      	b.n	73c8 <_strtoul_l.isra.0+0xe4>
    73e8:	2430      	movs	r4, #48	; 0x30
    73ea:	2f00      	cmp	r7, #0
    73ec:	d1aa      	bne.n	7344 <_strtoul_l.isra.0+0x60>
    73ee:	3708      	adds	r7, #8
    73f0:	e7a8      	b.n	7344 <_strtoul_l.isra.0+0x60>
	...

000073f4 <_strtoul_r>:
    73f4:	b513      	push	{r0, r1, r4, lr}
    73f6:	4c05      	ldr	r4, [pc, #20]	; (740c <_strtoul_r+0x18>)
    73f8:	6824      	ldr	r4, [r4, #0]
    73fa:	6a24      	ldr	r4, [r4, #32]
    73fc:	2c00      	cmp	r4, #0
    73fe:	d100      	bne.n	7402 <_strtoul_r+0xe>
    7400:	4c03      	ldr	r4, [pc, #12]	; (7410 <_strtoul_r+0x1c>)
    7402:	9400      	str	r4, [sp, #0]
    7404:	f7ff ff6e 	bl	72e4 <_strtoul_l.isra.0>
    7408:	bd16      	pop	{r1, r2, r4, pc}
    740a:	46c0      	nop			; (mov r8, r8)
    740c:	20000040 	.word	0x20000040
    7410:	200000a4 	.word	0x200000a4

00007414 <__submore>:
    7414:	000b      	movs	r3, r1
    7416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7418:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    741a:	3344      	adds	r3, #68	; 0x44
    741c:	000c      	movs	r4, r1
    741e:	429d      	cmp	r5, r3
    7420:	d11c      	bne.n	745c <__submore+0x48>
    7422:	2680      	movs	r6, #128	; 0x80
    7424:	00f6      	lsls	r6, r6, #3
    7426:	0031      	movs	r1, r6
    7428:	f7fe fff4 	bl	6414 <_malloc_r>
    742c:	2800      	cmp	r0, #0
    742e:	d102      	bne.n	7436 <__submore+0x22>
    7430:	2001      	movs	r0, #1
    7432:	4240      	negs	r0, r0
    7434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7436:	0023      	movs	r3, r4
    7438:	6360      	str	r0, [r4, #52]	; 0x34
    743a:	63a6      	str	r6, [r4, #56]	; 0x38
    743c:	3346      	adds	r3, #70	; 0x46
    743e:	781a      	ldrb	r2, [r3, #0]
    7440:	4b10      	ldr	r3, [pc, #64]	; (7484 <__submore+0x70>)
    7442:	54c2      	strb	r2, [r0, r3]
    7444:	0023      	movs	r3, r4
    7446:	3345      	adds	r3, #69	; 0x45
    7448:	781a      	ldrb	r2, [r3, #0]
    744a:	4b0f      	ldr	r3, [pc, #60]	; (7488 <__submore+0x74>)
    744c:	54c2      	strb	r2, [r0, r3]
    744e:	782a      	ldrb	r2, [r5, #0]
    7450:	4b0e      	ldr	r3, [pc, #56]	; (748c <__submore+0x78>)
    7452:	54c2      	strb	r2, [r0, r3]
    7454:	18c0      	adds	r0, r0, r3
    7456:	6020      	str	r0, [r4, #0]
    7458:	2000      	movs	r0, #0
    745a:	e7eb      	b.n	7434 <__submore+0x20>
    745c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    745e:	0029      	movs	r1, r5
    7460:	0073      	lsls	r3, r6, #1
    7462:	001a      	movs	r2, r3
    7464:	9301      	str	r3, [sp, #4]
    7466:	f000 f8fc 	bl	7662 <_realloc_r>
    746a:	1e05      	subs	r5, r0, #0
    746c:	d0e0      	beq.n	7430 <__submore+0x1c>
    746e:	1987      	adds	r7, r0, r6
    7470:	0001      	movs	r1, r0
    7472:	0032      	movs	r2, r6
    7474:	0038      	movs	r0, r7
    7476:	f7fe f9f1 	bl	585c <memcpy>
    747a:	9b01      	ldr	r3, [sp, #4]
    747c:	6027      	str	r7, [r4, #0]
    747e:	6365      	str	r5, [r4, #52]	; 0x34
    7480:	63a3      	str	r3, [r4, #56]	; 0x38
    7482:	e7e9      	b.n	7458 <__submore+0x44>
    7484:	000003ff 	.word	0x000003ff
    7488:	000003fe 	.word	0x000003fe
    748c:	000003fd 	.word	0x000003fd

00007490 <_ungetc_r>:
    7490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7492:	0005      	movs	r5, r0
    7494:	000e      	movs	r6, r1
    7496:	0014      	movs	r4, r2
    7498:	1c4b      	adds	r3, r1, #1
    749a:	d103      	bne.n	74a4 <_ungetc_r+0x14>
    749c:	2601      	movs	r6, #1
    749e:	4276      	negs	r6, r6
    74a0:	0030      	movs	r0, r6
    74a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74a4:	2800      	cmp	r0, #0
    74a6:	d004      	beq.n	74b2 <_ungetc_r+0x22>
    74a8:	6983      	ldr	r3, [r0, #24]
    74aa:	2b00      	cmp	r3, #0
    74ac:	d101      	bne.n	74b2 <_ungetc_r+0x22>
    74ae:	f7fe fe1d 	bl	60ec <__sinit>
    74b2:	4b2d      	ldr	r3, [pc, #180]	; (7568 <_ungetc_r+0xd8>)
    74b4:	429c      	cmp	r4, r3
    74b6:	d12d      	bne.n	7514 <_ungetc_r+0x84>
    74b8:	686c      	ldr	r4, [r5, #4]
    74ba:	2220      	movs	r2, #32
    74bc:	89a3      	ldrh	r3, [r4, #12]
    74be:	4393      	bics	r3, r2
    74c0:	b21b      	sxth	r3, r3
    74c2:	81a3      	strh	r3, [r4, #12]
    74c4:	b29b      	uxth	r3, r3
    74c6:	075a      	lsls	r2, r3, #29
    74c8:	d413      	bmi.n	74f2 <_ungetc_r+0x62>
    74ca:	06da      	lsls	r2, r3, #27
    74cc:	d5e6      	bpl.n	749c <_ungetc_r+0xc>
    74ce:	2708      	movs	r7, #8
    74d0:	423b      	tst	r3, r7
    74d2:	d00a      	beq.n	74ea <_ungetc_r+0x5a>
    74d4:	0021      	movs	r1, r4
    74d6:	0028      	movs	r0, r5
    74d8:	f7fe fd86 	bl	5fe8 <_fflush_r>
    74dc:	2800      	cmp	r0, #0
    74de:	d1dd      	bne.n	749c <_ungetc_r+0xc>
    74e0:	89a3      	ldrh	r3, [r4, #12]
    74e2:	60a0      	str	r0, [r4, #8]
    74e4:	43bb      	bics	r3, r7
    74e6:	81a3      	strh	r3, [r4, #12]
    74e8:	61a0      	str	r0, [r4, #24]
    74ea:	2304      	movs	r3, #4
    74ec:	89a2      	ldrh	r2, [r4, #12]
    74ee:	4313      	orrs	r3, r2
    74f0:	81a3      	strh	r3, [r4, #12]
    74f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    74f4:	b2f7      	uxtb	r7, r6
    74f6:	6863      	ldr	r3, [r4, #4]
    74f8:	b2f6      	uxtb	r6, r6
    74fa:	2a00      	cmp	r2, #0
    74fc:	d01b      	beq.n	7536 <_ungetc_r+0xa6>
    74fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7500:	4293      	cmp	r3, r2
    7502:	da11      	bge.n	7528 <_ungetc_r+0x98>
    7504:	6823      	ldr	r3, [r4, #0]
    7506:	3b01      	subs	r3, #1
    7508:	6023      	str	r3, [r4, #0]
    750a:	701f      	strb	r7, [r3, #0]
    750c:	6863      	ldr	r3, [r4, #4]
    750e:	3301      	adds	r3, #1
    7510:	6063      	str	r3, [r4, #4]
    7512:	e7c5      	b.n	74a0 <_ungetc_r+0x10>
    7514:	4b15      	ldr	r3, [pc, #84]	; (756c <_ungetc_r+0xdc>)
    7516:	429c      	cmp	r4, r3
    7518:	d101      	bne.n	751e <_ungetc_r+0x8e>
    751a:	68ac      	ldr	r4, [r5, #8]
    751c:	e7cd      	b.n	74ba <_ungetc_r+0x2a>
    751e:	4b14      	ldr	r3, [pc, #80]	; (7570 <_ungetc_r+0xe0>)
    7520:	429c      	cmp	r4, r3
    7522:	d1ca      	bne.n	74ba <_ungetc_r+0x2a>
    7524:	68ec      	ldr	r4, [r5, #12]
    7526:	e7c8      	b.n	74ba <_ungetc_r+0x2a>
    7528:	0021      	movs	r1, r4
    752a:	0028      	movs	r0, r5
    752c:	f7ff ff72 	bl	7414 <__submore>
    7530:	2800      	cmp	r0, #0
    7532:	d0e7      	beq.n	7504 <_ungetc_r+0x74>
    7534:	e7b2      	b.n	749c <_ungetc_r+0xc>
    7536:	6921      	ldr	r1, [r4, #16]
    7538:	6822      	ldr	r2, [r4, #0]
    753a:	2900      	cmp	r1, #0
    753c:	d007      	beq.n	754e <_ungetc_r+0xbe>
    753e:	4291      	cmp	r1, r2
    7540:	d205      	bcs.n	754e <_ungetc_r+0xbe>
    7542:	1e51      	subs	r1, r2, #1
    7544:	7808      	ldrb	r0, [r1, #0]
    7546:	4286      	cmp	r6, r0
    7548:	d101      	bne.n	754e <_ungetc_r+0xbe>
    754a:	6021      	str	r1, [r4, #0]
    754c:	e7df      	b.n	750e <_ungetc_r+0x7e>
    754e:	6423      	str	r3, [r4, #64]	; 0x40
    7550:	0023      	movs	r3, r4
    7552:	3344      	adds	r3, #68	; 0x44
    7554:	6363      	str	r3, [r4, #52]	; 0x34
    7556:	2303      	movs	r3, #3
    7558:	63a3      	str	r3, [r4, #56]	; 0x38
    755a:	0023      	movs	r3, r4
    755c:	3346      	adds	r3, #70	; 0x46
    755e:	63e2      	str	r2, [r4, #60]	; 0x3c
    7560:	701f      	strb	r7, [r3, #0]
    7562:	6023      	str	r3, [r4, #0]
    7564:	2301      	movs	r3, #1
    7566:	e7d3      	b.n	7510 <_ungetc_r+0x80>
    7568:	00007ec0 	.word	0x00007ec0
    756c:	00007ee0 	.word	0x00007ee0
    7570:	00007ea0 	.word	0x00007ea0

00007574 <__ascii_wctomb>:
    7574:	1e0b      	subs	r3, r1, #0
    7576:	d004      	beq.n	7582 <__ascii_wctomb+0xe>
    7578:	2aff      	cmp	r2, #255	; 0xff
    757a:	d904      	bls.n	7586 <__ascii_wctomb+0x12>
    757c:	238a      	movs	r3, #138	; 0x8a
    757e:	6003      	str	r3, [r0, #0]
    7580:	3b8b      	subs	r3, #139	; 0x8b
    7582:	0018      	movs	r0, r3
    7584:	4770      	bx	lr
    7586:	700a      	strb	r2, [r1, #0]
    7588:	2301      	movs	r3, #1
    758a:	e7fa      	b.n	7582 <__ascii_wctomb+0xe>

0000758c <_write_r>:
    758c:	b570      	push	{r4, r5, r6, lr}
    758e:	0005      	movs	r5, r0
    7590:	0008      	movs	r0, r1
    7592:	0011      	movs	r1, r2
    7594:	2200      	movs	r2, #0
    7596:	4c06      	ldr	r4, [pc, #24]	; (75b0 <_write_r+0x24>)
    7598:	6022      	str	r2, [r4, #0]
    759a:	001a      	movs	r2, r3
    759c:	f7fb fb6a 	bl	2c74 <_write>
    75a0:	1c43      	adds	r3, r0, #1
    75a2:	d103      	bne.n	75ac <_write_r+0x20>
    75a4:	6823      	ldr	r3, [r4, #0]
    75a6:	2b00      	cmp	r3, #0
    75a8:	d000      	beq.n	75ac <_write_r+0x20>
    75aa:	602b      	str	r3, [r5, #0]
    75ac:	bd70      	pop	{r4, r5, r6, pc}
    75ae:	46c0      	nop			; (mov r8, r8)
    75b0:	20000424 	.word	0x20000424

000075b4 <_close_r>:
    75b4:	2300      	movs	r3, #0
    75b6:	b570      	push	{r4, r5, r6, lr}
    75b8:	4c06      	ldr	r4, [pc, #24]	; (75d4 <_close_r+0x20>)
    75ba:	0005      	movs	r5, r0
    75bc:	0008      	movs	r0, r1
    75be:	6023      	str	r3, [r4, #0]
    75c0:	f7fb fb92 	bl	2ce8 <_close>
    75c4:	1c43      	adds	r3, r0, #1
    75c6:	d103      	bne.n	75d0 <_close_r+0x1c>
    75c8:	6823      	ldr	r3, [r4, #0]
    75ca:	2b00      	cmp	r3, #0
    75cc:	d000      	beq.n	75d0 <_close_r+0x1c>
    75ce:	602b      	str	r3, [r5, #0]
    75d0:	bd70      	pop	{r4, r5, r6, pc}
    75d2:	46c0      	nop			; (mov r8, r8)
    75d4:	20000424 	.word	0x20000424

000075d8 <_fstat_r>:
    75d8:	2300      	movs	r3, #0
    75da:	b570      	push	{r4, r5, r6, lr}
    75dc:	4c06      	ldr	r4, [pc, #24]	; (75f8 <_fstat_r+0x20>)
    75de:	0005      	movs	r5, r0
    75e0:	0008      	movs	r0, r1
    75e2:	0011      	movs	r1, r2
    75e4:	6023      	str	r3, [r4, #0]
    75e6:	f7fb fb82 	bl	2cee <_fstat>
    75ea:	1c43      	adds	r3, r0, #1
    75ec:	d103      	bne.n	75f6 <_fstat_r+0x1e>
    75ee:	6823      	ldr	r3, [r4, #0]
    75f0:	2b00      	cmp	r3, #0
    75f2:	d000      	beq.n	75f6 <_fstat_r+0x1e>
    75f4:	602b      	str	r3, [r5, #0]
    75f6:	bd70      	pop	{r4, r5, r6, pc}
    75f8:	20000424 	.word	0x20000424

000075fc <_isatty_r>:
    75fc:	2300      	movs	r3, #0
    75fe:	b570      	push	{r4, r5, r6, lr}
    7600:	4c06      	ldr	r4, [pc, #24]	; (761c <_isatty_r+0x20>)
    7602:	0005      	movs	r5, r0
    7604:	0008      	movs	r0, r1
    7606:	6023      	str	r3, [r4, #0]
    7608:	f7fb fb76 	bl	2cf8 <_isatty>
    760c:	1c43      	adds	r3, r0, #1
    760e:	d103      	bne.n	7618 <_isatty_r+0x1c>
    7610:	6823      	ldr	r3, [r4, #0]
    7612:	2b00      	cmp	r3, #0
    7614:	d000      	beq.n	7618 <_isatty_r+0x1c>
    7616:	602b      	str	r3, [r5, #0]
    7618:	bd70      	pop	{r4, r5, r6, pc}
    761a:	46c0      	nop			; (mov r8, r8)
    761c:	20000424 	.word	0x20000424

00007620 <_lseek_r>:
    7620:	b570      	push	{r4, r5, r6, lr}
    7622:	0005      	movs	r5, r0
    7624:	0008      	movs	r0, r1
    7626:	0011      	movs	r1, r2
    7628:	2200      	movs	r2, #0
    762a:	4c06      	ldr	r4, [pc, #24]	; (7644 <_lseek_r+0x24>)
    762c:	6022      	str	r2, [r4, #0]
    762e:	001a      	movs	r2, r3
    7630:	f7fb fb64 	bl	2cfc <_lseek>
    7634:	1c43      	adds	r3, r0, #1
    7636:	d103      	bne.n	7640 <_lseek_r+0x20>
    7638:	6823      	ldr	r3, [r4, #0]
    763a:	2b00      	cmp	r3, #0
    763c:	d000      	beq.n	7640 <_lseek_r+0x20>
    763e:	602b      	str	r3, [r5, #0]
    7640:	bd70      	pop	{r4, r5, r6, pc}
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	20000424 	.word	0x20000424

00007648 <memchr>:
    7648:	b2c9      	uxtb	r1, r1
    764a:	1882      	adds	r2, r0, r2
    764c:	4290      	cmp	r0, r2
    764e:	d101      	bne.n	7654 <memchr+0xc>
    7650:	2000      	movs	r0, #0
    7652:	4770      	bx	lr
    7654:	7803      	ldrb	r3, [r0, #0]
    7656:	428b      	cmp	r3, r1
    7658:	d0fb      	beq.n	7652 <memchr+0xa>
    765a:	3001      	adds	r0, #1
    765c:	e7f6      	b.n	764c <memchr+0x4>

0000765e <__malloc_lock>:
    765e:	4770      	bx	lr

00007660 <__malloc_unlock>:
    7660:	4770      	bx	lr

00007662 <_realloc_r>:
    7662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7664:	0007      	movs	r7, r0
    7666:	000d      	movs	r5, r1
    7668:	0016      	movs	r6, r2
    766a:	2900      	cmp	r1, #0
    766c:	d105      	bne.n	767a <_realloc_r+0x18>
    766e:	0011      	movs	r1, r2
    7670:	f7fe fed0 	bl	6414 <_malloc_r>
    7674:	0004      	movs	r4, r0
    7676:	0020      	movs	r0, r4
    7678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    767a:	2a00      	cmp	r2, #0
    767c:	d103      	bne.n	7686 <_realloc_r+0x24>
    767e:	f7fe fe7f 	bl	6380 <_free_r>
    7682:	0034      	movs	r4, r6
    7684:	e7f7      	b.n	7676 <_realloc_r+0x14>
    7686:	f000 f827 	bl	76d8 <_malloc_usable_size_r>
    768a:	002c      	movs	r4, r5
    768c:	4286      	cmp	r6, r0
    768e:	d9f2      	bls.n	7676 <_realloc_r+0x14>
    7690:	0031      	movs	r1, r6
    7692:	0038      	movs	r0, r7
    7694:	f7fe febe 	bl	6414 <_malloc_r>
    7698:	1e04      	subs	r4, r0, #0
    769a:	d0ec      	beq.n	7676 <_realloc_r+0x14>
    769c:	0029      	movs	r1, r5
    769e:	0032      	movs	r2, r6
    76a0:	f7fe f8dc 	bl	585c <memcpy>
    76a4:	0029      	movs	r1, r5
    76a6:	0038      	movs	r0, r7
    76a8:	f7fe fe6a 	bl	6380 <_free_r>
    76ac:	e7e3      	b.n	7676 <_realloc_r+0x14>
	...

000076b0 <_read_r>:
    76b0:	b570      	push	{r4, r5, r6, lr}
    76b2:	0005      	movs	r5, r0
    76b4:	0008      	movs	r0, r1
    76b6:	0011      	movs	r1, r2
    76b8:	2200      	movs	r2, #0
    76ba:	4c06      	ldr	r4, [pc, #24]	; (76d4 <_read_r+0x24>)
    76bc:	6022      	str	r2, [r4, #0]
    76be:	001a      	movs	r2, r3
    76c0:	f7fb fab6 	bl	2c30 <_read>
    76c4:	1c43      	adds	r3, r0, #1
    76c6:	d103      	bne.n	76d0 <_read_r+0x20>
    76c8:	6823      	ldr	r3, [r4, #0]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d000      	beq.n	76d0 <_read_r+0x20>
    76ce:	602b      	str	r3, [r5, #0]
    76d0:	bd70      	pop	{r4, r5, r6, pc}
    76d2:	46c0      	nop			; (mov r8, r8)
    76d4:	20000424 	.word	0x20000424

000076d8 <_malloc_usable_size_r>:
    76d8:	1f0b      	subs	r3, r1, #4
    76da:	681b      	ldr	r3, [r3, #0]
    76dc:	1f18      	subs	r0, r3, #4
    76de:	2b00      	cmp	r3, #0
    76e0:	da01      	bge.n	76e6 <_malloc_usable_size_r+0xe>
    76e2:	580b      	ldr	r3, [r1, r0]
    76e4:	18c0      	adds	r0, r0, r3
    76e6:	4770      	bx	lr
    76e8:	00000616 	.word	0x00000616
    76ec:	00000862 	.word	0x00000862
    76f0:	00000862 	.word	0x00000862
    76f4:	00000862 	.word	0x00000862
    76f8:	00000862 	.word	0x00000862
    76fc:	00000862 	.word	0x00000862
    7700:	00000862 	.word	0x00000862
    7704:	00000862 	.word	0x00000862
    7708:	00000862 	.word	0x00000862
    770c:	00000862 	.word	0x00000862
    7710:	00000862 	.word	0x00000862
    7714:	00000862 	.word	0x00000862
    7718:	00000862 	.word	0x00000862
    771c:	00000862 	.word	0x00000862
    7720:	00000862 	.word	0x00000862
    7724:	00000862 	.word	0x00000862
    7728:	000005fe 	.word	0x000005fe
    772c:	00000862 	.word	0x00000862
    7730:	00000862 	.word	0x00000862
    7734:	00000862 	.word	0x00000862
    7738:	00000862 	.word	0x00000862
    773c:	00000862 	.word	0x00000862
    7740:	00000862 	.word	0x00000862
    7744:	00000862 	.word	0x00000862
    7748:	00000862 	.word	0x00000862
    774c:	00000862 	.word	0x00000862
    7750:	00000862 	.word	0x00000862
    7754:	00000862 	.word	0x00000862
    7758:	00000862 	.word	0x00000862
    775c:	00000862 	.word	0x00000862
    7760:	00000862 	.word	0x00000862
    7764:	00000862 	.word	0x00000862
    7768:	0000060e 	.word	0x0000060e
    776c:	00000862 	.word	0x00000862
    7770:	00000862 	.word	0x00000862
    7774:	00000862 	.word	0x00000862
    7778:	00000862 	.word	0x00000862
    777c:	00000862 	.word	0x00000862
    7780:	00000862 	.word	0x00000862
    7784:	00000862 	.word	0x00000862
    7788:	00000862 	.word	0x00000862
    778c:	00000862 	.word	0x00000862
    7790:	00000862 	.word	0x00000862
    7794:	00000862 	.word	0x00000862
    7798:	00000862 	.word	0x00000862
    779c:	00000862 	.word	0x00000862
    77a0:	00000862 	.word	0x00000862
    77a4:	00000862 	.word	0x00000862
    77a8:	00000606 	.word	0x00000606
    77ac:	0000061e 	.word	0x0000061e
    77b0:	000005e6 	.word	0x000005e6
    77b4:	000005f6 	.word	0x000005f6
    77b8:	000005ee 	.word	0x000005ee
    77bc:	00000002 	.word	0x00000002
    77c0:	00000003 	.word	0x00000003
    77c4:	00000028 	.word	0x00000028
    77c8:	00000029 	.word	0x00000029
    77cc:	00000004 	.word	0x00000004
    77d0:	00000005 	.word	0x00000005
    77d4:	00000006 	.word	0x00000006
    77d8:	00000007 	.word	0x00000007
    77dc:	0000ffff 	.word	0x0000ffff
    77e0:	0000ffff 	.word	0x0000ffff
    77e4:	00000022 	.word	0x00000022
    77e8:	00000023 	.word	0x00000023
    77ec:	0000ffff 	.word	0x0000ffff
    77f0:	0000ffff 	.word	0x0000ffff
    77f4:	0000ffff 	.word	0x0000ffff
    77f8:	0000ffff 	.word	0x0000ffff
    77fc:	00000008 	.word	0x00000008
    7800:	00000009 	.word	0x00000009
    7804:	0000000a 	.word	0x0000000a
    7808:	0000000b 	.word	0x0000000b
    780c:	20434441 	.word	0x20434441
    7810:	75736552 	.word	0x75736552
    7814:	203a746c 	.word	0x203a746c
    7818:	0a0d6425 	.word	0x0a0d6425
    781c:	00000000 	.word	0x00000000
    7820:	20746f4e 	.word	0x20746f4e
    7824:	6c706d69 	.word	0x6c706d69
    7828:	6e656d65 	.word	0x6e656d65
    782c:	20646574 	.word	0x20646574
    7830:	21746579 	.word	0x21746579
    7834:	0000000d 	.word	0x0000000d
    7838:	6d6d6f43 	.word	0x6d6d6f43
    783c:	20646e61 	.word	0x20646e61
    7840:	7473694c 	.word	0x7473694c
    7844:	00000d3a 	.word	0x00000d3a
    7848:	20732509 	.word	0x20732509
    784c:	0a0d7325 	.word	0x0a0d7325
    7850:	73250909 	.word	0x73250909
    7854:	00000a0d 	.word	0x00000a0d
    7858:	2e353532 	.word	0x2e353532
    785c:	2e353532 	.word	0x2e353532
    7860:	2e353532 	.word	0x2e353532
    7864:	00353532 	.word	0x00353532
    7868:	41205049 	.word	0x41205049
    786c:	65726464 	.word	0x65726464
    7870:	203a7373 	.word	0x203a7373
    7874:	0a0d7325 	.word	0x0a0d7325
    7878:	00000000 	.word	0x00000000
    787c:	323a3130 	.word	0x323a3130
    7880:	35343a33 	.word	0x35343a33
    7884:	3a37363a 	.word	0x3a37363a
    7888:	613a3938 	.word	0x613a3938
    788c:	00000062 	.word	0x00000062
    7890:	2043414d 	.word	0x2043414d
    7894:	72646441 	.word	0x72646441
    7898:	3a737365 	.word	0x3a737365
    789c:	0d732520 	.word	0x0d732520
    78a0:	0000000a 	.word	0x0000000a
    78a4:	706d6554 	.word	0x706d6554
    78a8:	73655220 	.word	0x73655220
    78ac:	3a746c75 	.word	0x3a746c75
    78b0:	362e2520 	.word	0x362e2520
    78b4:	000a0d66 	.word	0x000a0d66
    78b8:	64616552 	.word	0x64616552
    78bc:	20676e69 	.word	0x20676e69
    78c0:	6d6f7266 	.word	0x6d6f7266
    78c4:	63634120 	.word	0x63634120
    78c8:	72656c65 	.word	0x72656c65
    78cc:	74656d6f 	.word	0x74656d6f
    78d0:	2e2e7265 	.word	0x2e2e7265
    78d4:	00000d2e 	.word	0x00000d2e
    78d8:	64616552 	.word	0x64616552
    78dc:	20676e69 	.word	0x20676e69
    78e0:	6d6f7266 	.word	0x6d6f7266
    78e4:	72794720 	.word	0x72794720
    78e8:	2e2e2e6f 	.word	0x2e2e2e6f
    78ec:	0000000d 	.word	0x0000000d
    78f0:	656e6f44 	.word	0x656e6f44
    78f4:	00000d21 	.word	0x00000d21
    78f8:	00000020 	.word	0x00000020
    78fc:	20746f4e 	.word	0x20746f4e
    7900:	756f6e65 	.word	0x756f6e65
    7904:	61206867 	.word	0x61206867
    7908:	6d756772 	.word	0x6d756772
    790c:	73746e65 	.word	0x73746e65
    7910:	72542021 	.word	0x72542021
    7914:	68222079 	.word	0x68222079
    7918:	22706c65 	.word	0x22706c65
    791c:	00000d2e 	.word	0x00000d2e
    7920:	00000041 	.word	0x00000041
    7924:	00000042 	.word	0x00000042
    7928:	65746e45 	.word	0x65746e45
    792c:	20612072 	.word	0x20612072
    7930:	696c6176 	.word	0x696c6176
    7934:	6f502064 	.word	0x6f502064
    7938:	20217472 	.word	0x20217472
    793c:	20797254 	.word	0x20797254
    7940:	6c656822 	.word	0x6c656822
    7944:	0d2e2270 	.word	0x0d2e2270
    7948:	00000000 	.word	0x00000000
    794c:	61766e49 	.word	0x61766e49
    7950:	2064696c 	.word	0x2064696c
    7954:	6d6d6f63 	.word	0x6d6d6f63
    7958:	21646e61 	.word	0x21646e61
    795c:	70795420 	.word	0x70795420
    7960:	68222065 	.word	0x68222065
    7964:	22706c65 	.word	0x22706c65
    7968:	726f6620 	.word	0x726f6620
    796c:	6c206120 	.word	0x6c206120
    7970:	20747369 	.word	0x20747369
    7974:	6120666f 	.word	0x6120666f
    7978:	6c696176 	.word	0x6c696176
    797c:	656c6261 	.word	0x656c6261
    7980:	6d6f6320 	.word	0x6d6f6320
    7984:	646e616d 	.word	0x646e616d
    7988:	000d2e73 	.word	0x000d2e73
    798c:	6c707041 	.word	0x6c707041
    7990:	74616369 	.word	0x74616369
    7994:	206e6f69 	.word	0x206e6f69
    7998:	73726556 	.word	0x73726556
    799c:	3a6e6f69 	.word	0x3a6e6f69
    79a0:	0d732520 	.word	0x0d732520
    79a4:	0000000a 	.word	0x0000000a
    79a8:	2e312e30 	.word	0x2e312e30
    79ac:	00000030 	.word	0x00000030
    79b0:	746f6f42 	.word	0x746f6f42
    79b4:	64616f6c 	.word	0x64616f6c
    79b8:	56207265 	.word	0x56207265
    79bc:	69737265 	.word	0x69737265
    79c0:	203a6e6f 	.word	0x203a6e6f
    79c4:	0a0d7325 	.word	0x0a0d7325
    79c8:	00000000 	.word	0x00000000
    79cc:	70736944 	.word	0x70736944
    79d0:	2079616c 	.word	0x2079616c
    79d4:	206c6c61 	.word	0x206c6c61
    79d8:	6d6d6f63 	.word	0x6d6d6f63
    79dc:	73646e61 	.word	0x73646e61
    79e0:	00000000 	.word	0x00000000
    79e4:	6e697250 	.word	0x6e697250
    79e8:	6f622074 	.word	0x6f622074
    79ec:	6f6c746f 	.word	0x6f6c746f
    79f0:	72656461 	.word	0x72656461
    79f4:	72696620 	.word	0x72696620
    79f8:	7261776d 	.word	0x7261776d
    79fc:	6e692065 	.word	0x6e692065
    7a00:	6d726f66 	.word	0x6d726f66
    7a04:	6f697461 	.word	0x6f697461
    7a08:	00002e6e 	.word	0x00002e6e
    7a0c:	6e697250 	.word	0x6e697250
    7a10:	70612074 	.word	0x70612074
    7a14:	63696c70 	.word	0x63696c70
    7a18:	6f697461 	.word	0x6f697461
    7a1c:	6576206e 	.word	0x6576206e
    7a20:	6f697372 	.word	0x6f697372
    7a24:	6e69206e 	.word	0x6e69206e
    7a28:	6d726f66 	.word	0x6d726f66
    7a2c:	6f697461 	.word	0x6f697461
    7a30:	00002e6e 	.word	0x00002e6e
    7a34:	726f705b 	.word	0x726f705b
    7a38:	5b205d74 	.word	0x5b205d74
    7a3c:	5f6e6970 	.word	0x5f6e6970
    7a40:	5d6d756e 	.word	0x5d6d756e
    7a44:	00000000 	.word	0x00000000
    7a48:	20746553 	.word	0x20746553
    7a4c:	4f495047 	.word	0x4f495047
    7a50:	6e697020 	.word	0x6e697020
    7a54:	20746120 	.word	0x20746120
    7a58:	69672061 	.word	0x69672061
    7a5c:	206e6576 	.word	0x206e6576
    7a60:	74726f70 	.word	0x74726f70
    7a64:	67696820 	.word	0x67696820
    7a68:	00002e68 	.word	0x00002e68
    7a6c:	20746553 	.word	0x20746553
    7a70:	4f495047 	.word	0x4f495047
    7a74:	6e697020 	.word	0x6e697020
    7a78:	20746120 	.word	0x20746120
    7a7c:	69672061 	.word	0x69672061
    7a80:	206e6576 	.word	0x206e6576
    7a84:	74726f70 	.word	0x74726f70
    7a88:	776f6c20 	.word	0x776f6c20
    7a8c:	0000002e 	.word	0x0000002e
    7a90:	20746547 	.word	0x20746547
    7a94:	74617473 	.word	0x74617473
    7a98:	666f2065 	.word	0x666f2065
    7a9c:	47206120 	.word	0x47206120
    7aa0:	204f4950 	.word	0x204f4950
    7aa4:	2e6e6970 	.word	0x2e6e6970
    7aa8:	00000000 	.word	0x00000000
    7aac:	6e697250 	.word	0x6e697250
    7ab0:	68742074 	.word	0x68742074
    7ab4:	414d2065 	.word	0x414d2065
    7ab8:	64612043 	.word	0x64612043
    7abc:	73657264 	.word	0x73657264
    7ac0:	00002e73 	.word	0x00002e73
    7ac4:	6e697250 	.word	0x6e697250
    7ac8:	68742074 	.word	0x68742074
    7acc:	50492065 	.word	0x50492065
    7ad0:	64644120 	.word	0x64644120
    7ad4:	73736572 	.word	0x73736572
    7ad8:	0000002e 	.word	0x0000002e
    7adc:	6165725b 	.word	0x6165725b
    7ae0:	676e6964 	.word	0x676e6964
    7ae4:	756f6320 	.word	0x756f6320
    7ae8:	205d746e 	.word	0x205d746e
    7aec:	746e695b 	.word	0x746e695b
    7af0:	61767265 	.word	0x61767265
    7af4:	6e69206c 	.word	0x6e69206c
    7af8:	5d736d20 	.word	0x5d736d20
    7afc:	00000000 	.word	0x00000000
    7b00:	64616552 	.word	0x64616552
    7b04:	6f726620 	.word	0x6f726620
    7b08:	6874206d 	.word	0x6874206d
    7b0c:	79472065 	.word	0x79472065
    7b10:	63736f72 	.word	0x63736f72
    7b14:	2065706f 	.word	0x2065706f
    7b18:	736e6573 	.word	0x736e6573
    7b1c:	002e726f 	.word	0x002e726f
    7b20:	64616552 	.word	0x64616552
    7b24:	6f726620 	.word	0x6f726620
    7b28:	6874206d 	.word	0x6874206d
    7b2c:	63412065 	.word	0x63412065
    7b30:	656c6563 	.word	0x656c6563
    7b34:	656d6f72 	.word	0x656d6f72
    7b38:	20726574 	.word	0x20726574
    7b3c:	736e6573 	.word	0x736e6573
    7b40:	002e726f 	.word	0x002e726f
    7b44:	20746547 	.word	0x20746547
    7b48:	20656874 	.word	0x20656874
    7b4c:	20434441 	.word	0x20434441
    7b50:	756c6176 	.word	0x756c6176
    7b54:	666f2065 	.word	0x666f2065
    7b58:	206e6120 	.word	0x206e6120
    7b5c:	75706e69 	.word	0x75706e69
    7b60:	69702074 	.word	0x69702074
    7b64:	00002e6e 	.word	0x00002e6e
    7b68:	6e697250 	.word	0x6e697250
    7b6c:	68742074 	.word	0x68742074
    7b70:	65742065 	.word	0x65742065
    7b74:	7265706d 	.word	0x7265706d
    7b78:	72757461 	.word	0x72757461
    7b7c:	65722065 	.word	0x65722065
    7b80:	6e696461 	.word	0x6e696461
    7b84:	666f2067 	.word	0x666f2067
    7b88:	65687420 	.word	0x65687420
    7b8c:	2d6e6f20 	.word	0x2d6e6f20
    7b90:	72616f62 	.word	0x72616f62
    7b94:	434d2064 	.word	0x434d2064
    7b98:	65742055 	.word	0x65742055
    7b9c:	7265706d 	.word	0x7265706d
    7ba0:	72757461 	.word	0x72757461
    7ba4:	65732065 	.word	0x65732065
    7ba8:	726f736e 	.word	0x726f736e
    7bac:	0000002e 	.word	0x0000002e
    7bb0:	6e697250 	.word	0x6e697250
    7bb4:	756f2074 	.word	0x756f2074
    7bb8:	696c2074 	.word	0x696c2074
    7bbc:	6f207473 	.word	0x6f207473
    7bc0:	64612066 	.word	0x64612066
    7bc4:	73657264 	.word	0x73657264
    7bc8:	20736573 	.word	0x20736573
    7bcc:	4920666f 	.word	0x4920666f
    7bd0:	64204332 	.word	0x64204332
    7bd4:	63697665 	.word	0x63697665
    7bd8:	6f207365 	.word	0x6f207365
    7bdc:	7562206e 	.word	0x7562206e
    7be0:	00002e73 	.word	0x00002e73
    7be4:	5f633269 	.word	0x5f633269
    7be8:	6e616373 	.word	0x6e616373
    7bec:	00000000 	.word	0x00000000
    7bf0:	5f75636d 	.word	0x5f75636d
    7bf4:	706d6574 	.word	0x706d6574
    7bf8:	00000000 	.word	0x00000000
    7bfc:	5f636461 	.word	0x5f636461
    7c00:	00746567 	.word	0x00746567
    7c04:	64616572 	.word	0x64616572
    7c08:	6363615f 	.word	0x6363615f
    7c0c:	00006c65 	.word	0x00006c65
    7c10:	64616572 	.word	0x64616572
    7c14:	7279675f 	.word	0x7279675f
    7c18:	0000006f 	.word	0x0000006f
    7c1c:	00007069 	.word	0x00007069
    7c20:	0063616d 	.word	0x0063616d
    7c24:	6f697067 	.word	0x6f697067
    7c28:	7465675f 	.word	0x7465675f
    7c2c:	00000000 	.word	0x00000000
    7c30:	6f697067 	.word	0x6f697067
    7c34:	656c635f 	.word	0x656c635f
    7c38:	00007261 	.word	0x00007261
    7c3c:	6f697067 	.word	0x6f697067
    7c40:	7465735f 	.word	0x7465735f
    7c44:	00000000 	.word	0x00000000
    7c48:	5f726576 	.word	0x5f726576
    7c4c:	00707061 	.word	0x00707061
    7c50:	5f726576 	.word	0x5f726576
    7c54:	00006c62 	.word	0x00006c62
    7c58:	706c6568 	.word	0x706c6568
    7c5c:	00000000 	.word	0x00000000
    7c60:	42000800 	.word	0x42000800
    7c64:	42000c00 	.word	0x42000c00
    7c68:	42001000 	.word	0x42001000
    7c6c:	42001400 	.word	0x42001400
    7c70:	42001800 	.word	0x42001800
    7c74:	42001c00 	.word	0x42001c00
    7c78:	000023be 	.word	0x000023be
    7c7c:	000023ba 	.word	0x000023ba
    7c80:	000023ba 	.word	0x000023ba
    7c84:	0000241c 	.word	0x0000241c
    7c88:	0000241c 	.word	0x0000241c
    7c8c:	000023d2 	.word	0x000023d2
    7c90:	000023c4 	.word	0x000023c4
    7c94:	000023d8 	.word	0x000023d8
    7c98:	0000240a 	.word	0x0000240a
    7c9c:	000025dc 	.word	0x000025dc
    7ca0:	000025bc 	.word	0x000025bc
    7ca4:	000025bc 	.word	0x000025bc
    7ca8:	00002648 	.word	0x00002648
    7cac:	000025ce 	.word	0x000025ce
    7cb0:	000025ea 	.word	0x000025ea
    7cb4:	000025c0 	.word	0x000025c0
    7cb8:	000025f8 	.word	0x000025f8
    7cbc:	00002638 	.word	0x00002638
    7cc0:	57202d2d 	.word	0x57202d2d
    7cc4:	31434e49 	.word	0x31434e49
    7cc8:	20303035 	.word	0x20303035
    7ccc:	70696863 	.word	0x70696863
    7cd0:	666e6920 	.word	0x666e6920
    7cd4:	616d726f 	.word	0x616d726f
    7cd8:	6e6f6974 	.word	0x6e6f6974
    7cdc:	61786520 	.word	0x61786520
    7ce0:	656c706d 	.word	0x656c706d
    7ce4:	0d2d2d20 	.word	0x0d2d2d20
    7ce8:	202d2d0a 	.word	0x202d2d0a
    7cec:	574d4153 	.word	0x574d4153
    7cf0:	585f3532 	.word	0x585f3532
    7cf4:	49414c50 	.word	0x49414c50
    7cf8:	5f44454e 	.word	0x5f44454e
    7cfc:	204f5250 	.word	0x204f5250
    7d00:	0a0d2d2d 	.word	0x0a0d2d2d
    7d04:	43202d2d 	.word	0x43202d2d
    7d08:	69706d6f 	.word	0x69706d6f
    7d0c:	3a64656c 	.word	0x3a64656c
    7d10:	6e614a20 	.word	0x6e614a20
    7d14:	20373220 	.word	0x20373220
    7d18:	38313032 	.word	0x38313032
    7d1c:	3a363120 	.word	0x3a363120
    7d20:	303a3730 	.word	0x303a3730
    7d24:	2d2d2036 	.word	0x2d2d2036
    7d28:	0000000d 	.word	0x0000000d
    7d2c:	203d3d3d 	.word	0x203d3d3d
    7d30:	6e6f7244 	.word	0x6e6f7244
    7d34:	44414465 	.word	0x44414465
    7d38:	494c4320 	.word	0x494c4320
    7d3c:	746e4920 	.word	0x746e4920
    7d40:	61667265 	.word	0x61667265
    7d44:	3d206563 	.word	0x3d206563
    7d48:	000d3d3d 	.word	0x000d3d3d
    7d4c:	0000203e 	.word	0x0000203e
    7d50:	0d5e5b25 	.word	0x0d5e5b25
    7d54:	2a255d0a 	.word	0x2a255d0a
    7d58:	00000063 	.word	0x00000063
    7d5c:	000035e0 	.word	0x000035e0
    7d60:	000035b0 	.word	0x000035b0
    7d64:	000035c2 	.word	0x000035c2
    7d68:	00003504 	.word	0x00003504
    7d6c:	000035c2 	.word	0x000035c2
    7d70:	000035a6 	.word	0x000035a6
    7d74:	000035c2 	.word	0x000035c2
    7d78:	00003504 	.word	0x00003504
    7d7c:	000035b0 	.word	0x000035b0
    7d80:	000035b0 	.word	0x000035b0
    7d84:	000035a6 	.word	0x000035a6
    7d88:	00003504 	.word	0x00003504
    7d8c:	0000350c 	.word	0x0000350c
    7d90:	0000350c 	.word	0x0000350c
    7d94:	0000350c 	.word	0x0000350c
    7d98:	000035c8 	.word	0x000035c8
    7d9c:	000035b0 	.word	0x000035b0
    7da0:	000035b0 	.word	0x000035b0
    7da4:	00003584 	.word	0x00003584
    7da8:	00003668 	.word	0x00003668
    7dac:	00003584 	.word	0x00003584
    7db0:	000035a6 	.word	0x000035a6
    7db4:	00003584 	.word	0x00003584
    7db8:	00003668 	.word	0x00003668
    7dbc:	000035b0 	.word	0x000035b0
    7dc0:	000035b0 	.word	0x000035b0
    7dc4:	000035a6 	.word	0x000035a6
    7dc8:	00003668 	.word	0x00003668
    7dcc:	0000350c 	.word	0x0000350c
    7dd0:	0000350c 	.word	0x0000350c
    7dd4:	0000350c 	.word	0x0000350c
    7dd8:	00003672 	.word	0x00003672
    7ddc:	00003810 	.word	0x00003810
    7de0:	00003760 	.word	0x00003760
    7de4:	00003760 	.word	0x00003760
    7de8:	0000375e 	.word	0x0000375e
    7dec:	00003802 	.word	0x00003802
    7df0:	00003802 	.word	0x00003802
    7df4:	000037f8 	.word	0x000037f8
    7df8:	0000375e 	.word	0x0000375e
    7dfc:	00003802 	.word	0x00003802
    7e00:	000037f8 	.word	0x000037f8
    7e04:	00003802 	.word	0x00003802
    7e08:	0000375e 	.word	0x0000375e
    7e0c:	00003808 	.word	0x00003808
    7e10:	00003808 	.word	0x00003808
    7e14:	00003808 	.word	0x00003808
    7e18:	00003898 	.word	0x00003898
    7e1c:	000045a0 	.word	0x000045a0
    7e20:	00004582 	.word	0x00004582
    7e24:	0000453c 	.word	0x0000453c
    7e28:	0000445a 	.word	0x0000445a
    7e2c:	0000453c 	.word	0x0000453c
    7e30:	00004574 	.word	0x00004574
    7e34:	0000453c 	.word	0x0000453c
    7e38:	0000445a 	.word	0x0000445a
    7e3c:	00004582 	.word	0x00004582
    7e40:	00004582 	.word	0x00004582
    7e44:	00004574 	.word	0x00004574
    7e48:	0000445a 	.word	0x0000445a
    7e4c:	00004452 	.word	0x00004452
    7e50:	00004452 	.word	0x00004452
    7e54:	00004452 	.word	0x00004452
    7e58:	000047b8 	.word	0x000047b8
    7e5c:	00004c00 	.word	0x00004c00
    7e60:	00004ac0 	.word	0x00004ac0
    7e64:	00004ac0 	.word	0x00004ac0
    7e68:	00004abc 	.word	0x00004abc
    7e6c:	00004bd8 	.word	0x00004bd8
    7e70:	00004bd8 	.word	0x00004bd8
    7e74:	00004bca 	.word	0x00004bca
    7e78:	00004abc 	.word	0x00004abc
    7e7c:	00004bd8 	.word	0x00004bd8
    7e80:	00004bca 	.word	0x00004bca
    7e84:	00004bd8 	.word	0x00004bd8
    7e88:	00004abc 	.word	0x00004abc
    7e8c:	00004be0 	.word	0x00004be0
    7e90:	00004be0 	.word	0x00004be0
    7e94:	00004be0 	.word	0x00004be0
    7e98:	00004de4 	.word	0x00004de4

00007e9c <_global_impure_ptr>:
    7e9c:	20000044                                D.. 

00007ea0 <__sf_fake_stderr>:
	...

00007ec0 <__sf_fake_stdin>:
	...

00007ee0 <__sf_fake_stdout>:
	...
    7f00:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    7f10:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    7f20:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    7f30:	37363534 62613938 66656463 00000000     456789abcdef....
    7f40:	00007f5e 00007f61 00007f64 61462d41     ^...a...d...A-Fa
    7f50:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    7f60:	00303000 00005878                                .00.xX.

00007f67 <_ctype_>:
    7f67:	20202000 20202020 28282020 20282828     .         ((((( 
    7f77:	20202020 20202020 20202020 20202020                     
    7f87:	10108820 10101010 10101010 10101010      ...............
    7f97:	04040410 04040404 10040404 10101010     ................
    7fa7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    7fb7:	01010101 01010101 01010101 10101010     ................
    7fc7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7fd7:	02020202 02020202 02020202 10101010     ................
    7fe7:	00000020 00000000 00000000 00000000      ...............
	...

00008068 <_init>:
    8068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    806a:	46c0      	nop			; (mov r8, r8)
    806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    806e:	bc08      	pop	{r3}
    8070:	469e      	mov	lr, r3
    8072:	4770      	bx	lr

00008074 <__init_array_start>:
    8074:	000000dd 	.word	0x000000dd

00008078 <_fini>:
    8078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    807a:	46c0      	nop			; (mov r8, r8)
    807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    807e:	bc08      	pop	{r3}
    8080:	469e      	mov	lr, r3
    8082:	4770      	bx	lr

00008084 <__fini_array_start>:
    8084:	000000b5 	.word	0x000000b5
