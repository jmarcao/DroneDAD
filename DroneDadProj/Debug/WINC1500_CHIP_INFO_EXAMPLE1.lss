
WINC1500_CHIP_INFO_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004588  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  00004588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000210  00004798  00020210  2**2
                  ALLOC
  3 .stack        00002004  200003b4  0000493c  00020210  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  6 .debug_info   000297eb  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000421c  00000000  00000000  00049a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005203  00000000  00000000  0004dc98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005c8  00000000  00000000  00052e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000670  00000000  00000000  00053463  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bbc5  00000000  00000000  00053ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e2ce  00000000  00000000  0006f698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c5a1  00000000  00000000  0007d966  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001adc  00000000  00000000  00109f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 23 00 20 0d 1b 00 00 09 1b 00 00 09 1b 00 00     .#. ............
	...
      2c:	09 1b 00 00 00 00 00 00 00 00 00 00 09 1b 00 00     ................
      3c:	09 1b 00 00 09 1b 00 00 09 1b 00 00 09 1b 00 00     ................
      4c:	09 1b 00 00 b9 08 00 00 09 1b 00 00 09 1b 00 00     ................
      5c:	09 1b 00 00 09 1b 00 00 99 0d 00 00 a9 0d 00 00     ................
      6c:	b9 0d 00 00 c9 0d 00 00 d9 0d 00 00 e9 0d 00 00     ................
      7c:	09 1b 00 00 09 1b 00 00 09 1b 00 00 09 1b 00 00     ................
      8c:	09 1b 00 00 09 1b 00 00 00 00 00 00 00 00 00 00     ................
      9c:	09 1b 00 00 09 1b 00 00 09 1b 00 00 09 1b 00 00     ................
      ac:	09 1b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000210 	.word	0x20000210
      d4:	00000000 	.word	0x00000000
      d8:	00004588 	.word	0x00004588

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000214 	.word	0x20000214
     108:	00004588 	.word	0x00004588
     10c:	00004588 	.word	0x00004588
     110:	00000000 	.word	0x00000000

00000114 <init_cmd_list>:
const char* CMD_READ_ACCEL = "read_accel";
const char* CMD_ADC_GET = "adc_get";
const char* CMD_MCU_TEMP = "mcu_temp";
const char* CMD_I2C_SCAN = "i2c_scan";

void init_cmd_list() {
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b085      	sub	sp, #20
	cmd_list = (struct option_list) {
     122:	4b37      	ldr	r3, [pc, #220]	; (200 <init_cmd_list+0xec>)
     124:	681b      	ldr	r3, [r3, #0]
     126:	469a      	mov	sl, r3
     128:	4b36      	ldr	r3, [pc, #216]	; (204 <init_cmd_list+0xf0>)
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	4699      	mov	r9, r3
     12e:	4b36      	ldr	r3, [pc, #216]	; (208 <init_cmd_list+0xf4>)
     130:	6819      	ldr	r1, [r3, #0]
     132:	4b36      	ldr	r3, [pc, #216]	; (20c <init_cmd_list+0xf8>)
     134:	681b      	ldr	r3, [r3, #0]
     136:	469c      	mov	ip, r3
     138:	4b35      	ldr	r3, [pc, #212]	; (210 <init_cmd_list+0xfc>)
     13a:	681f      	ldr	r7, [r3, #0]
     13c:	4b35      	ldr	r3, [pc, #212]	; (214 <init_cmd_list+0x100>)
     13e:	681e      	ldr	r6, [r3, #0]
     140:	4b35      	ldr	r3, [pc, #212]	; (218 <init_cmd_list+0x104>)
     142:	681d      	ldr	r5, [r3, #0]
     144:	4b35      	ldr	r3, [pc, #212]	; (21c <init_cmd_list+0x108>)
     146:	681c      	ldr	r4, [r3, #0]
     148:	9401      	str	r4, [sp, #4]
     14a:	4b35      	ldr	r3, [pc, #212]	; (220 <init_cmd_list+0x10c>)
     14c:	6818      	ldr	r0, [r3, #0]
     14e:	4b35      	ldr	r3, [pc, #212]	; (224 <init_cmd_list+0x110>)
     150:	681b      	ldr	r3, [r3, #0]
     152:	4698      	mov	r8, r3
     154:	4b34      	ldr	r3, [pc, #208]	; (228 <init_cmd_list+0x114>)
     156:	681b      	ldr	r3, [r3, #0]
     158:	9302      	str	r3, [sp, #8]
     15a:	4b34      	ldr	r3, [pc, #208]	; (22c <init_cmd_list+0x118>)
     15c:	681a      	ldr	r2, [r3, #0]
     15e:	9203      	str	r2, [sp, #12]
     160:	4b33      	ldr	r3, [pc, #204]	; (230 <init_cmd_list+0x11c>)
     162:	4a34      	ldr	r2, [pc, #208]	; (234 <init_cmd_list+0x120>)
     164:	6812      	ldr	r2, [r2, #0]
     166:	601a      	str	r2, [r3, #0]
     168:	4a33      	ldr	r2, [pc, #204]	; (238 <init_cmd_list+0x124>)
     16a:	605a      	str	r2, [r3, #4]
     16c:	4c33      	ldr	r4, [pc, #204]	; (23c <init_cmd_list+0x128>)
     16e:	609c      	str	r4, [r3, #8]
     170:	4654      	mov	r4, sl
     172:	60dc      	str	r4, [r3, #12]
     174:	611a      	str	r2, [r3, #16]
     176:	4c32      	ldr	r4, [pc, #200]	; (240 <init_cmd_list+0x12c>)
     178:	615c      	str	r4, [r3, #20]
     17a:	464c      	mov	r4, r9
     17c:	619c      	str	r4, [r3, #24]
     17e:	61da      	str	r2, [r3, #28]
     180:	4c30      	ldr	r4, [pc, #192]	; (244 <init_cmd_list+0x130>)
     182:	621c      	str	r4, [r3, #32]
     184:	6259      	str	r1, [r3, #36]	; 0x24
     186:	4930      	ldr	r1, [pc, #192]	; (248 <init_cmd_list+0x134>)
     188:	6299      	str	r1, [r3, #40]	; 0x28
     18a:	4c30      	ldr	r4, [pc, #192]	; (24c <init_cmd_list+0x138>)
     18c:	62dc      	str	r4, [r3, #44]	; 0x2c
     18e:	4664      	mov	r4, ip
     190:	631c      	str	r4, [r3, #48]	; 0x30
     192:	6359      	str	r1, [r3, #52]	; 0x34
     194:	4c2e      	ldr	r4, [pc, #184]	; (250 <init_cmd_list+0x13c>)
     196:	639c      	str	r4, [r3, #56]	; 0x38
     198:	63df      	str	r7, [r3, #60]	; 0x3c
     19a:	6419      	str	r1, [r3, #64]	; 0x40
     19c:	4f2d      	ldr	r7, [pc, #180]	; (254 <init_cmd_list+0x140>)
     19e:	645f      	str	r7, [r3, #68]	; 0x44
     1a0:	649e      	str	r6, [r3, #72]	; 0x48
     1a2:	64da      	str	r2, [r3, #76]	; 0x4c
     1a4:	4e2c      	ldr	r6, [pc, #176]	; (258 <init_cmd_list+0x144>)
     1a6:	651e      	str	r6, [r3, #80]	; 0x50
     1a8:	655d      	str	r5, [r3, #84]	; 0x54
     1aa:	659a      	str	r2, [r3, #88]	; 0x58
     1ac:	4d2b      	ldr	r5, [pc, #172]	; (25c <init_cmd_list+0x148>)
     1ae:	65dd      	str	r5, [r3, #92]	; 0x5c
     1b0:	9c01      	ldr	r4, [sp, #4]
     1b2:	661c      	str	r4, [r3, #96]	; 0x60
     1b4:	4c2a      	ldr	r4, [pc, #168]	; (260 <init_cmd_list+0x14c>)
     1b6:	665c      	str	r4, [r3, #100]	; 0x64
     1b8:	4d2a      	ldr	r5, [pc, #168]	; (264 <init_cmd_list+0x150>)
     1ba:	669d      	str	r5, [r3, #104]	; 0x68
     1bc:	66d8      	str	r0, [r3, #108]	; 0x6c
     1be:	671c      	str	r4, [r3, #112]	; 0x70
     1c0:	4829      	ldr	r0, [pc, #164]	; (268 <init_cmd_list+0x154>)
     1c2:	6758      	str	r0, [r3, #116]	; 0x74
     1c4:	4644      	mov	r4, r8
     1c6:	679c      	str	r4, [r3, #120]	; 0x78
     1c8:	67d9      	str	r1, [r3, #124]	; 0x7c
     1ca:	4828      	ldr	r0, [pc, #160]	; (26c <init_cmd_list+0x158>)
     1cc:	2180      	movs	r1, #128	; 0x80
     1ce:	5058      	str	r0, [r3, r1]
     1d0:	3104      	adds	r1, #4
     1d2:	9802      	ldr	r0, [sp, #8]
     1d4:	5058      	str	r0, [r3, r1]
     1d6:	3104      	adds	r1, #4
     1d8:	505a      	str	r2, [r3, r1]
     1da:	4825      	ldr	r0, [pc, #148]	; (270 <init_cmd_list+0x15c>)
     1dc:	3104      	adds	r1, #4
     1de:	5058      	str	r0, [r3, r1]
     1e0:	3104      	adds	r1, #4
     1e2:	9803      	ldr	r0, [sp, #12]
     1e4:	5058      	str	r0, [r3, r1]
     1e6:	3104      	adds	r1, #4
     1e8:	505a      	str	r2, [r3, r1]
     1ea:	4922      	ldr	r1, [pc, #136]	; (274 <init_cmd_list+0x160>)
     1ec:	2298      	movs	r2, #152	; 0x98
     1ee:	5099      	str	r1, [r3, r2]
		{ CMD_READ_ACCEL, "[reading count] [interval in ms]", "Read from the Accelerometer sensor." } ,
		{ CMD_ADC_GET, "[port] [pin_num]", "Get the ADC value of an input pin." } ,
		{ CMD_MCU_TEMP, "", "Print the temperature reading of the on-board MCU temperature sensor." } ,
		{ CMD_I2C_SCAN, "", "Print out list of addresses of I2C devices on bus." }}
	};
}
     1f0:	b005      	add	sp, #20
     1f2:	bc3c      	pop	{r2, r3, r4, r5}
     1f4:	4690      	mov	r8, r2
     1f6:	4699      	mov	r9, r3
     1f8:	46a2      	mov	sl, r4
     1fa:	46ab      	mov	fp, r5
     1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	20000030 	.word	0x20000030
     204:	2000002c 	.word	0x2000002c
     208:	2000000c 	.word	0x2000000c
     20c:	20000004 	.word	0x20000004
     210:	20000008 	.word	0x20000008
     214:	2000001c 	.word	0x2000001c
     218:	20000018 	.word	0x20000018
     21c:	20000028 	.word	0x20000028
     220:	20000024 	.word	0x20000024
     224:	20000000 	.word	0x20000000
     228:	20000020 	.word	0x20000020
     22c:	20000014 	.word	0x20000014
     230:	200002ac 	.word	0x200002ac
     234:	20000010 	.word	0x20000010
     238:	00003f58 	.word	0x00003f58
     23c:	0000400c 	.word	0x0000400c
     240:	00004024 	.word	0x00004024
     244:	0000404c 	.word	0x0000404c
     248:	00004074 	.word	0x00004074
     24c:	00004088 	.word	0x00004088
     250:	000040ac 	.word	0x000040ac
     254:	000040d0 	.word	0x000040d0
     258:	000040ec 	.word	0x000040ec
     25c:	00004104 	.word	0x00004104
     260:	0000411c 	.word	0x0000411c
     264:	00004140 	.word	0x00004140
     268:	00004160 	.word	0x00004160
     26c:	00004184 	.word	0x00004184
     270:	000041a8 	.word	0x000041a8
     274:	000041f0 	.word	0x000041f0

00000278 <handle_help>:
	else {
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
	}
}

void handle_help() {
     278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Command List:\r\n");
     27a:	4808      	ldr	r0, [pc, #32]	; (29c <handle_help+0x24>)
     27c:	4b08      	ldr	r3, [pc, #32]	; (2a0 <handle_help+0x28>)
     27e:	4798      	blx	r3
     280:	4c08      	ldr	r4, [pc, #32]	; (2a4 <handle_help+0x2c>)
     282:	0027      	movs	r7, r4
     284:	379c      	adds	r7, #156	; 0x9c
	for(int i = 0; i < OPTION_COUNT; i++) {
		printf("\t%s %s\r\n\t\t%s\r\n", cmd_list.options[i].command, 
     286:	4e08      	ldr	r6, [pc, #32]	; (2a8 <handle_help+0x30>)
     288:	4d08      	ldr	r5, [pc, #32]	; (2ac <handle_help+0x34>)
     28a:	68a3      	ldr	r3, [r4, #8]
     28c:	6862      	ldr	r2, [r4, #4]
     28e:	6821      	ldr	r1, [r4, #0]
     290:	0030      	movs	r0, r6
     292:	47a8      	blx	r5
     294:	340c      	adds	r4, #12
	for(int i = 0; i < OPTION_COUNT; i++) {
     296:	42bc      	cmp	r4, r7
     298:	d1f7      	bne.n	28a <handle_help+0x12>
			cmd_list.options[i].params,
			cmd_list.options[i].description);
	}
}
     29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     29c:	00003eb0 	.word	0x00003eb0
     2a0:	00002115 	.word	0x00002115
     2a4:	200002ac 	.word	0x200002ac
     2a8:	00003ec0 	.word	0x00003ec0
     2ac:	00002021 	.word	0x00002021

000002b0 <handle_ver_bl>:


void handle_ver_bl() {
     2b0:	b510      	push	{r4, lr}
	printf("Bootloader Version: %s\r\n", BL_VERSION_STRING);
     2b2:	4902      	ldr	r1, [pc, #8]	; (2bc <handle_ver_bl+0xc>)
     2b4:	4802      	ldr	r0, [pc, #8]	; (2c0 <handle_ver_bl+0x10>)
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <handle_ver_bl+0x14>)
     2b8:	4798      	blx	r3
}
     2ba:	bd10      	pop	{r4, pc}
     2bc:	00003fe8 	.word	0x00003fe8
     2c0:	00003ff0 	.word	0x00003ff0
     2c4:	00002021 	.word	0x00002021

000002c8 <handle_ver_app>:

void handle_ver_app() {
     2c8:	b510      	push	{r4, lr}
	printf("Application Version: %s\r\n", APP_VERSION_STRING);
     2ca:	4902      	ldr	r1, [pc, #8]	; (2d4 <handle_ver_app+0xc>)
     2cc:	4802      	ldr	r0, [pc, #8]	; (2d8 <handle_ver_app+0x10>)
     2ce:	4b03      	ldr	r3, [pc, #12]	; (2dc <handle_ver_app+0x14>)
     2d0:	4798      	blx	r3
}
     2d2:	bd10      	pop	{r4, pc}
     2d4:	00003fe8 	.word	0x00003fe8
     2d8:	00003fcc 	.word	0x00003fcc
     2dc:	00002021 	.word	0x00002021

000002e0 <handle_mac>:
void handle_gpio_get(int port, int pin_num) {
	// TODO: Must implement this feature for at least two pins.
	printf("Not implemented yet!\r\n");
}

void handle_mac() {
     2e0:	b510      	push	{r4, lr}
	char* dummy_mac = "01:23:45:67:89:ab";
	printf("MAC Address: %s\r\n", dummy_mac);
     2e2:	4902      	ldr	r1, [pc, #8]	; (2ec <handle_mac+0xc>)
     2e4:	4802      	ldr	r0, [pc, #8]	; (2f0 <handle_mac+0x10>)
     2e6:	4b03      	ldr	r3, [pc, #12]	; (2f4 <handle_mac+0x14>)
     2e8:	4798      	blx	r3
}
     2ea:	bd10      	pop	{r4, pc}
     2ec:	00003ef4 	.word	0x00003ef4
     2f0:	00003f08 	.word	0x00003f08
     2f4:	00002021 	.word	0x00002021

000002f8 <handle_ip>:

void handle_ip() {
     2f8:	b510      	push	{r4, lr}
	char* dummy_ip = "255.255.255.255";
	printf("IP Address: %s\r\n", dummy_ip);
     2fa:	4902      	ldr	r1, [pc, #8]	; (304 <handle_ip+0xc>)
     2fc:	4802      	ldr	r0, [pc, #8]	; (308 <handle_ip+0x10>)
     2fe:	4b03      	ldr	r3, [pc, #12]	; (30c <handle_ip+0x14>)
     300:	4798      	blx	r3
}
     302:	bd10      	pop	{r4, pc}
     304:	00003ed0 	.word	0x00003ed0
     308:	00003ee0 	.word	0x00003ee0
     30c:	00002021 	.word	0x00002021

00000310 <handle_read_gyro>:

void handle_read_gyro(int num_readings, int interval_ms) {
     310:	b5f0      	push	{r4, r5, r6, r7, lr}
     312:	46c6      	mov	lr, r8
     314:	b500      	push	{lr}
     316:	0006      	movs	r6, r0
     318:	000d      	movs	r5, r1
	printf("Reading from Gyro...\r\n");
     31a:	480f      	ldr	r0, [pc, #60]	; (358 <handle_read_gyro+0x48>)
     31c:	4b0f      	ldr	r3, [pc, #60]	; (35c <handle_read_gyro+0x4c>)
     31e:	4798      	blx	r3
	for(int i = 0; i < num_readings; i++) {
     320:	2e00      	cmp	r6, #0
     322:	dd12      	ble.n	34a <handle_read_gyro+0x3a>
     324:	2400      	movs	r4, #0
		printf("%d\r\n", 9);
     326:	4f0e      	ldr	r7, [pc, #56]	; (360 <handle_read_gyro+0x50>)
		delay_ms(interval_ms);
     328:	4b0e      	ldr	r3, [pc, #56]	; (364 <handle_read_gyro+0x54>)
     32a:	4698      	mov	r8, r3
     32c:	e004      	b.n	338 <handle_read_gyro+0x28>
     32e:	2001      	movs	r0, #1
     330:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
     332:	3401      	adds	r4, #1
     334:	42a6      	cmp	r6, r4
     336:	d008      	beq.n	34a <handle_read_gyro+0x3a>
		printf("%d\r\n", 9);
     338:	2109      	movs	r1, #9
     33a:	480b      	ldr	r0, [pc, #44]	; (368 <handle_read_gyro+0x58>)
     33c:	47b8      	blx	r7
		delay_ms(interval_ms);
     33e:	2d00      	cmp	r5, #0
     340:	d0f5      	beq.n	32e <handle_read_gyro+0x1e>
     342:	0028      	movs	r0, r5
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <handle_read_gyro+0x5c>)
     346:	4798      	blx	r3
     348:	e7f3      	b.n	332 <handle_read_gyro+0x22>
	}
	printf("Done!\r\n");
     34a:	4809      	ldr	r0, [pc, #36]	; (370 <handle_read_gyro+0x60>)
     34c:	4b03      	ldr	r3, [pc, #12]	; (35c <handle_read_gyro+0x4c>)
     34e:	4798      	blx	r3
}
     350:	bc04      	pop	{r2}
     352:	4690      	mov	r8, r2
     354:	bdf0      	pop	{r4, r5, r6, r7, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	00003f3c 	.word	0x00003f3c
     35c:	00002115 	.word	0x00002115
     360:	00002021 	.word	0x00002021
     364:	000006fd 	.word	0x000006fd
     368:	00003f54 	.word	0x00003f54
     36c:	00000729 	.word	0x00000729
     370:	00003f5c 	.word	0x00003f5c

00000374 <handle_read_accel>:

void handle_read_accel(int num_readings, int interval_ms) {
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	46c6      	mov	lr, r8
     378:	b500      	push	{lr}
     37a:	0006      	movs	r6, r0
     37c:	000d      	movs	r5, r1
	printf("Reading from Accelerometer...\r\n");
     37e:	480f      	ldr	r0, [pc, #60]	; (3bc <handle_read_accel+0x48>)
     380:	4b0f      	ldr	r3, [pc, #60]	; (3c0 <handle_read_accel+0x4c>)
     382:	4798      	blx	r3
	for(int i = 0; i < num_readings; i++) {
     384:	2e00      	cmp	r6, #0
     386:	dd12      	ble.n	3ae <handle_read_accel+0x3a>
     388:	2400      	movs	r4, #0
		printf("%d\r\n", 8);
     38a:	4f0e      	ldr	r7, [pc, #56]	; (3c4 <handle_read_accel+0x50>)
		delay_ms(interval_ms);
     38c:	4b0e      	ldr	r3, [pc, #56]	; (3c8 <handle_read_accel+0x54>)
     38e:	4698      	mov	r8, r3
     390:	e004      	b.n	39c <handle_read_accel+0x28>
     392:	2001      	movs	r0, #1
     394:	47c0      	blx	r8
	for(int i = 0; i < num_readings; i++) {
     396:	3401      	adds	r4, #1
     398:	42a6      	cmp	r6, r4
     39a:	d008      	beq.n	3ae <handle_read_accel+0x3a>
		printf("%d\r\n", 8);
     39c:	2108      	movs	r1, #8
     39e:	480b      	ldr	r0, [pc, #44]	; (3cc <handle_read_accel+0x58>)
     3a0:	47b8      	blx	r7
		delay_ms(interval_ms);
     3a2:	2d00      	cmp	r5, #0
     3a4:	d0f5      	beq.n	392 <handle_read_accel+0x1e>
     3a6:	0028      	movs	r0, r5
     3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <handle_read_accel+0x5c>)
     3aa:	4798      	blx	r3
     3ac:	e7f3      	b.n	396 <handle_read_accel+0x22>
	}
	printf("Done!\r\n");
     3ae:	4809      	ldr	r0, [pc, #36]	; (3d4 <handle_read_accel+0x60>)
     3b0:	4b03      	ldr	r3, [pc, #12]	; (3c0 <handle_read_accel+0x4c>)
     3b2:	4798      	blx	r3
}
     3b4:	bc04      	pop	{r2}
     3b6:	4690      	mov	r8, r2
     3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	00003f1c 	.word	0x00003f1c
     3c0:	00002115 	.word	0x00002115
     3c4:	00002021 	.word	0x00002021
     3c8:	000006fd 	.word	0x000006fd
     3cc:	00003f54 	.word	0x00003f54
     3d0:	00000729 	.word	0x00000729
     3d4:	00003f5c 	.word	0x00003f5c

000003d8 <handle_mcu_temp>:
void handle_adc_get(int port, int pin_num) {
	// TODO: Must implement this feature for at least one pin.
	printf("Not implemented yet!\r\n");
}

void handle_mcu_temp() {
     3d8:	b510      	push	{r4, lr}
	printf("Not implemented yet!\r\n");
     3da:	4802      	ldr	r0, [pc, #8]	; (3e4 <handle_mcu_temp+0xc>)
     3dc:	4b02      	ldr	r3, [pc, #8]	; (3e8 <handle_mcu_temp+0x10>)
     3de:	4798      	blx	r3
}
     3e0:	bd10      	pop	{r4, pc}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	00003e98 	.word	0x00003e98
     3e8:	00002115 	.word	0x00002115

000003ec <handle_i2c_scan>:

void handle_i2c_scan() {
     3ec:	b510      	push	{r4, lr}
	printf("Not implemented yet!\r\n");
     3ee:	4802      	ldr	r0, [pc, #8]	; (3f8 <handle_i2c_scan+0xc>)
     3f0:	4b02      	ldr	r3, [pc, #8]	; (3fc <handle_i2c_scan+0x10>)
     3f2:	4798      	blx	r3
}
     3f4:	bd10      	pop	{r4, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00003e98 	.word	0x00003e98
     3fc:	00002115 	.word	0x00002115

00000400 <handle_user_input>:
void handle_user_input(char* input) {
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char* cmd = strtok(input, " ");
     402:	4990      	ldr	r1, [pc, #576]	; (644 <handle_user_input+0x244>)
     404:	4b90      	ldr	r3, [pc, #576]	; (648 <handle_user_input+0x248>)
     406:	4798      	blx	r3
     408:	0004      	movs	r4, r0
	if(strcmp(CMD_HELP, cmd) == 0) { 
     40a:	4b90      	ldr	r3, [pc, #576]	; (64c <handle_user_input+0x24c>)
     40c:	6818      	ldr	r0, [r3, #0]
     40e:	0021      	movs	r1, r4
     410:	4b8f      	ldr	r3, [pc, #572]	; (650 <handle_user_input+0x250>)
     412:	4798      	blx	r3
     414:	2800      	cmp	r0, #0
     416:	d05f      	beq.n	4d8 <handle_user_input+0xd8>
	else if(strcmp(CMD_VER_BL, cmd) == 0) { 
     418:	4b8e      	ldr	r3, [pc, #568]	; (654 <handle_user_input+0x254>)
     41a:	6818      	ldr	r0, [r3, #0]
     41c:	0021      	movs	r1, r4
     41e:	4b8c      	ldr	r3, [pc, #560]	; (650 <handle_user_input+0x250>)
     420:	4798      	blx	r3
     422:	2800      	cmp	r0, #0
     424:	d05b      	beq.n	4de <handle_user_input+0xde>
	else if(strcmp(CMD_VER_APP, cmd) == 0) { 
     426:	4b8c      	ldr	r3, [pc, #560]	; (658 <handle_user_input+0x258>)
     428:	6818      	ldr	r0, [r3, #0]
     42a:	0021      	movs	r1, r4
     42c:	4b88      	ldr	r3, [pc, #544]	; (650 <handle_user_input+0x250>)
     42e:	4798      	blx	r3
     430:	2800      	cmp	r0, #0
     432:	d057      	beq.n	4e4 <handle_user_input+0xe4>
	else if(strcmp(CMD_GPIO_SET, cmd) == 0) { 
     434:	4b89      	ldr	r3, [pc, #548]	; (65c <handle_user_input+0x25c>)
     436:	6818      	ldr	r0, [r3, #0]
     438:	0021      	movs	r1, r4
     43a:	4b85      	ldr	r3, [pc, #532]	; (650 <handle_user_input+0x250>)
     43c:	4798      	blx	r3
     43e:	2800      	cmp	r0, #0
     440:	d053      	beq.n	4ea <handle_user_input+0xea>
	else if(strcmp(CMD_GPIO_CLEAR, cmd) == 0) { 
     442:	4b87      	ldr	r3, [pc, #540]	; (660 <handle_user_input+0x260>)
     444:	6818      	ldr	r0, [r3, #0]
     446:	0021      	movs	r1, r4
     448:	4b81      	ldr	r3, [pc, #516]	; (650 <handle_user_input+0x250>)
     44a:	4798      	blx	r3
     44c:	2800      	cmp	r0, #0
     44e:	d066      	beq.n	51e <handle_user_input+0x11e>
	else if(strcmp(CMD_GPIO_GET, cmd) == 0) { 
     450:	4b84      	ldr	r3, [pc, #528]	; (664 <handle_user_input+0x264>)
     452:	6818      	ldr	r0, [r3, #0]
     454:	0021      	movs	r1, r4
     456:	4b7e      	ldr	r3, [pc, #504]	; (650 <handle_user_input+0x250>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d100      	bne.n	460 <handle_user_input+0x60>
     45e:	e078      	b.n	552 <handle_user_input+0x152>
	else if(strcmp(CMD_MAC, cmd) == 0) { 
     460:	4b81      	ldr	r3, [pc, #516]	; (668 <handle_user_input+0x268>)
     462:	6818      	ldr	r0, [r3, #0]
     464:	0021      	movs	r1, r4
     466:	4b7a      	ldr	r3, [pc, #488]	; (650 <handle_user_input+0x250>)
     468:	4798      	blx	r3
     46a:	2800      	cmp	r0, #0
     46c:	d100      	bne.n	470 <handle_user_input+0x70>
     46e:	e08a      	b.n	586 <handle_user_input+0x186>
	else if(strcmp(CMD_IP, cmd) == 0) { 
     470:	4b7e      	ldr	r3, [pc, #504]	; (66c <handle_user_input+0x26c>)
     472:	6818      	ldr	r0, [r3, #0]
     474:	0021      	movs	r1, r4
     476:	4b76      	ldr	r3, [pc, #472]	; (650 <handle_user_input+0x250>)
     478:	4798      	blx	r3
     47a:	2800      	cmp	r0, #0
     47c:	d100      	bne.n	480 <handle_user_input+0x80>
     47e:	e085      	b.n	58c <handle_user_input+0x18c>
	else if(strcmp(CMD_READ_GYRO, cmd) == 0) {
     480:	4b7b      	ldr	r3, [pc, #492]	; (670 <handle_user_input+0x270>)
     482:	6818      	ldr	r0, [r3, #0]
     484:	0021      	movs	r1, r4
     486:	4b72      	ldr	r3, [pc, #456]	; (650 <handle_user_input+0x250>)
     488:	4798      	blx	r3
     48a:	2800      	cmp	r0, #0
     48c:	d100      	bne.n	490 <handle_user_input+0x90>
     48e:	e080      	b.n	592 <handle_user_input+0x192>
	else if(strcmp(CMD_READ_ACCEL, cmd) == 0) {
     490:	4b78      	ldr	r3, [pc, #480]	; (674 <handle_user_input+0x274>)
     492:	6818      	ldr	r0, [r3, #0]
     494:	0021      	movs	r1, r4
     496:	4b6e      	ldr	r3, [pc, #440]	; (650 <handle_user_input+0x250>)
     498:	4798      	blx	r3
     49a:	2800      	cmp	r0, #0
     49c:	d100      	bne.n	4a0 <handle_user_input+0xa0>
     49e:	e094      	b.n	5ca <handle_user_input+0x1ca>
	else if(strcmp(CMD_ADC_GET, cmd) == 0) {
     4a0:	4b75      	ldr	r3, [pc, #468]	; (678 <handle_user_input+0x278>)
     4a2:	6818      	ldr	r0, [r3, #0]
     4a4:	0021      	movs	r1, r4
     4a6:	4b6a      	ldr	r3, [pc, #424]	; (650 <handle_user_input+0x250>)
     4a8:	4798      	blx	r3
     4aa:	2800      	cmp	r0, #0
     4ac:	d100      	bne.n	4b0 <handle_user_input+0xb0>
     4ae:	e0a8      	b.n	602 <handle_user_input+0x202>
	else if(strcmp(CMD_MCU_TEMP, cmd) == 0) { 
     4b0:	4b72      	ldr	r3, [pc, #456]	; (67c <handle_user_input+0x27c>)
     4b2:	6818      	ldr	r0, [r3, #0]
     4b4:	0021      	movs	r1, r4
     4b6:	4b66      	ldr	r3, [pc, #408]	; (650 <handle_user_input+0x250>)
     4b8:	4798      	blx	r3
     4ba:	2800      	cmp	r0, #0
     4bc:	d100      	bne.n	4c0 <handle_user_input+0xc0>
     4be:	e0ba      	b.n	636 <handle_user_input+0x236>
	else if(strcmp(CMD_I2C_SCAN, cmd) == 0) { 
     4c0:	4b6f      	ldr	r3, [pc, #444]	; (680 <handle_user_input+0x280>)
     4c2:	6818      	ldr	r0, [r3, #0]
     4c4:	0021      	movs	r1, r4
     4c6:	4b62      	ldr	r3, [pc, #392]	; (650 <handle_user_input+0x250>)
     4c8:	4798      	blx	r3
     4ca:	2800      	cmp	r0, #0
     4cc:	d100      	bne.n	4d0 <handle_user_input+0xd0>
     4ce:	e0b5      	b.n	63c <handle_user_input+0x23c>
		printf("Invalid command! Type \"help\" for a list of available commands.\r\n");
     4d0:	486c      	ldr	r0, [pc, #432]	; (684 <handle_user_input+0x284>)
     4d2:	4b6d      	ldr	r3, [pc, #436]	; (688 <handle_user_input+0x288>)
     4d4:	4798      	blx	r3
     4d6:	e001      	b.n	4dc <handle_user_input+0xdc>
		handle_help(); 
     4d8:	4b6c      	ldr	r3, [pc, #432]	; (68c <handle_user_input+0x28c>)
     4da:	4798      	blx	r3
}
     4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		handle_ver_bl(); 
     4de:	4b6c      	ldr	r3, [pc, #432]	; (690 <handle_user_input+0x290>)
     4e0:	4798      	blx	r3
     4e2:	e7fb      	b.n	4dc <handle_user_input+0xdc>
		handle_ver_app();
     4e4:	4b6b      	ldr	r3, [pc, #428]	; (694 <handle_user_input+0x294>)
     4e6:	4798      	blx	r3
     4e8:	e7f8      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     4ea:	4e56      	ldr	r6, [pc, #344]	; (644 <handle_user_input+0x244>)
     4ec:	0031      	movs	r1, r6
     4ee:	4d56      	ldr	r5, [pc, #344]	; (648 <handle_user_input+0x248>)
     4f0:	47a8      	blx	r5
     4f2:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     4f4:	0031      	movs	r1, r6
     4f6:	2000      	movs	r0, #0
     4f8:	47a8      	blx	r5
     4fa:	0006      	movs	r6, r0
		int port = atoi(arg1);
     4fc:	0020      	movs	r0, r4
     4fe:	4d66      	ldr	r5, [pc, #408]	; (698 <handle_user_input+0x298>)
     500:	47a8      	blx	r5
		int pin_num = atoi(arg2);
     502:	0030      	movs	r0, r6
     504:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     506:	2c00      	cmp	r4, #0
     508:	d005      	beq.n	516 <handle_user_input+0x116>
     50a:	2e00      	cmp	r6, #0
     50c:	d003      	beq.n	516 <handle_user_input+0x116>
	printf("Not implemented yet!\r\n");
     50e:	4863      	ldr	r0, [pc, #396]	; (69c <handle_user_input+0x29c>)
     510:	4b5d      	ldr	r3, [pc, #372]	; (688 <handle_user_input+0x288>)
     512:	4798      	blx	r3
     514:	e7e2      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     516:	4862      	ldr	r0, [pc, #392]	; (6a0 <handle_user_input+0x2a0>)
     518:	4b5b      	ldr	r3, [pc, #364]	; (688 <handle_user_input+0x288>)
     51a:	4798      	blx	r3
			return;
     51c:	e7de      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     51e:	4e49      	ldr	r6, [pc, #292]	; (644 <handle_user_input+0x244>)
     520:	0031      	movs	r1, r6
     522:	4d49      	ldr	r5, [pc, #292]	; (648 <handle_user_input+0x248>)
     524:	47a8      	blx	r5
     526:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     528:	0031      	movs	r1, r6
     52a:	2000      	movs	r0, #0
     52c:	47a8      	blx	r5
     52e:	0006      	movs	r6, r0
		int port = atoi(arg1);
     530:	0020      	movs	r0, r4
     532:	4d59      	ldr	r5, [pc, #356]	; (698 <handle_user_input+0x298>)
     534:	47a8      	blx	r5
		int pin_num = atoi(arg2);
     536:	0030      	movs	r0, r6
     538:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     53a:	2c00      	cmp	r4, #0
     53c:	d005      	beq.n	54a <handle_user_input+0x14a>
     53e:	2e00      	cmp	r6, #0
     540:	d003      	beq.n	54a <handle_user_input+0x14a>
	printf("Not implemented yet!\r\n");
     542:	4856      	ldr	r0, [pc, #344]	; (69c <handle_user_input+0x29c>)
     544:	4b50      	ldr	r3, [pc, #320]	; (688 <handle_user_input+0x288>)
     546:	4798      	blx	r3
     548:	e7c8      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     54a:	4855      	ldr	r0, [pc, #340]	; (6a0 <handle_user_input+0x2a0>)
     54c:	4b4e      	ldr	r3, [pc, #312]	; (688 <handle_user_input+0x288>)
     54e:	4798      	blx	r3
			return;
     550:	e7c4      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     552:	4e3c      	ldr	r6, [pc, #240]	; (644 <handle_user_input+0x244>)
     554:	0031      	movs	r1, r6
     556:	4d3c      	ldr	r5, [pc, #240]	; (648 <handle_user_input+0x248>)
     558:	47a8      	blx	r5
     55a:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     55c:	0031      	movs	r1, r6
     55e:	2000      	movs	r0, #0
     560:	47a8      	blx	r5
     562:	0006      	movs	r6, r0
		int port = atoi(arg1);
     564:	0020      	movs	r0, r4
     566:	4d4c      	ldr	r5, [pc, #304]	; (698 <handle_user_input+0x298>)
     568:	47a8      	blx	r5
		int pin_num = atoi(arg2);
     56a:	0030      	movs	r0, r6
     56c:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     56e:	2c00      	cmp	r4, #0
     570:	d005      	beq.n	57e <handle_user_input+0x17e>
     572:	2e00      	cmp	r6, #0
     574:	d003      	beq.n	57e <handle_user_input+0x17e>
	printf("Not implemented yet!\r\n");
     576:	4849      	ldr	r0, [pc, #292]	; (69c <handle_user_input+0x29c>)
     578:	4b43      	ldr	r3, [pc, #268]	; (688 <handle_user_input+0x288>)
     57a:	4798      	blx	r3
     57c:	e7ae      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     57e:	4848      	ldr	r0, [pc, #288]	; (6a0 <handle_user_input+0x2a0>)
     580:	4b41      	ldr	r3, [pc, #260]	; (688 <handle_user_input+0x288>)
     582:	4798      	blx	r3
			return;
     584:	e7aa      	b.n	4dc <handle_user_input+0xdc>
		handle_mac(); 
     586:	4b47      	ldr	r3, [pc, #284]	; (6a4 <handle_user_input+0x2a4>)
     588:	4798      	blx	r3
     58a:	e7a7      	b.n	4dc <handle_user_input+0xdc>
		handle_ip(); 
     58c:	4b46      	ldr	r3, [pc, #280]	; (6a8 <handle_user_input+0x2a8>)
     58e:	4798      	blx	r3
     590:	e7a4      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     592:	4e2c      	ldr	r6, [pc, #176]	; (644 <handle_user_input+0x244>)
     594:	0031      	movs	r1, r6
     596:	4d2c      	ldr	r5, [pc, #176]	; (648 <handle_user_input+0x248>)
     598:	47a8      	blx	r5
     59a:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     59c:	0031      	movs	r1, r6
     59e:	2000      	movs	r0, #0
     5a0:	47a8      	blx	r5
     5a2:	0006      	movs	r6, r0
		int num_readings = atoi(arg1);
     5a4:	0020      	movs	r0, r4
     5a6:	4d3c      	ldr	r5, [pc, #240]	; (698 <handle_user_input+0x298>)
     5a8:	47a8      	blx	r5
     5aa:	0007      	movs	r7, r0
		int interval_ms = atoi(arg2);
     5ac:	0030      	movs	r0, r6
     5ae:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     5b0:	2c00      	cmp	r4, #0
     5b2:	d006      	beq.n	5c2 <handle_user_input+0x1c2>
     5b4:	2e00      	cmp	r6, #0
     5b6:	d004      	beq.n	5c2 <handle_user_input+0x1c2>
		handle_read_gyro(num_readings, interval_ms); 
     5b8:	0001      	movs	r1, r0
     5ba:	0038      	movs	r0, r7
     5bc:	4b3b      	ldr	r3, [pc, #236]	; (6ac <handle_user_input+0x2ac>)
     5be:	4798      	blx	r3
     5c0:	e78c      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     5c2:	4837      	ldr	r0, [pc, #220]	; (6a0 <handle_user_input+0x2a0>)
     5c4:	4b30      	ldr	r3, [pc, #192]	; (688 <handle_user_input+0x288>)
     5c6:	4798      	blx	r3
			return;
     5c8:	e788      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     5ca:	4e1e      	ldr	r6, [pc, #120]	; (644 <handle_user_input+0x244>)
     5cc:	0031      	movs	r1, r6
     5ce:	4d1e      	ldr	r5, [pc, #120]	; (648 <handle_user_input+0x248>)
     5d0:	47a8      	blx	r5
     5d2:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     5d4:	0031      	movs	r1, r6
     5d6:	2000      	movs	r0, #0
     5d8:	47a8      	blx	r5
     5da:	0006      	movs	r6, r0
		int num_readings = atoi(arg1);
     5dc:	0020      	movs	r0, r4
     5de:	4d2e      	ldr	r5, [pc, #184]	; (698 <handle_user_input+0x298>)
     5e0:	47a8      	blx	r5
     5e2:	0007      	movs	r7, r0
		int interval_ms = atoi(arg2);
     5e4:	0030      	movs	r0, r6
     5e6:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     5e8:	2c00      	cmp	r4, #0
     5ea:	d006      	beq.n	5fa <handle_user_input+0x1fa>
     5ec:	2e00      	cmp	r6, #0
     5ee:	d004      	beq.n	5fa <handle_user_input+0x1fa>
		handle_read_accel(num_readings, interval_ms); 
     5f0:	0001      	movs	r1, r0
     5f2:	0038      	movs	r0, r7
     5f4:	4b2e      	ldr	r3, [pc, #184]	; (6b0 <handle_user_input+0x2b0>)
     5f6:	4798      	blx	r3
     5f8:	e770      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     5fa:	4829      	ldr	r0, [pc, #164]	; (6a0 <handle_user_input+0x2a0>)
     5fc:	4b22      	ldr	r3, [pc, #136]	; (688 <handle_user_input+0x288>)
     5fe:	4798      	blx	r3
			return;
     600:	e76c      	b.n	4dc <handle_user_input+0xdc>
		char* arg1 = strtok(NULL, " ");
     602:	4e10      	ldr	r6, [pc, #64]	; (644 <handle_user_input+0x244>)
     604:	0031      	movs	r1, r6
     606:	4d10      	ldr	r5, [pc, #64]	; (648 <handle_user_input+0x248>)
     608:	47a8      	blx	r5
     60a:	0004      	movs	r4, r0
		char* arg2 = strtok(NULL, " ");
     60c:	0031      	movs	r1, r6
     60e:	2000      	movs	r0, #0
     610:	47a8      	blx	r5
     612:	0006      	movs	r6, r0
		int port = atoi(arg1);
     614:	0020      	movs	r0, r4
     616:	4d20      	ldr	r5, [pc, #128]	; (698 <handle_user_input+0x298>)
     618:	47a8      	blx	r5
		int pin_num = atoi(arg2);
     61a:	0030      	movs	r0, r6
     61c:	47a8      	blx	r5
		if(arg1 == 0 || arg2 == 0) {
     61e:	2c00      	cmp	r4, #0
     620:	d005      	beq.n	62e <handle_user_input+0x22e>
     622:	2e00      	cmp	r6, #0
     624:	d003      	beq.n	62e <handle_user_input+0x22e>
	printf("Not implemented yet!\r\n");
     626:	481d      	ldr	r0, [pc, #116]	; (69c <handle_user_input+0x29c>)
     628:	4b17      	ldr	r3, [pc, #92]	; (688 <handle_user_input+0x288>)
     62a:	4798      	blx	r3
     62c:	e756      	b.n	4dc <handle_user_input+0xdc>
			printf("Not enough arguments! Try \"help\".\r\n");
     62e:	481c      	ldr	r0, [pc, #112]	; (6a0 <handle_user_input+0x2a0>)
     630:	4b15      	ldr	r3, [pc, #84]	; (688 <handle_user_input+0x288>)
     632:	4798      	blx	r3
			return;
     634:	e752      	b.n	4dc <handle_user_input+0xdc>
		handle_mcu_temp(); 
     636:	4b1f      	ldr	r3, [pc, #124]	; (6b4 <handle_user_input+0x2b4>)
     638:	4798      	blx	r3
     63a:	e74f      	b.n	4dc <handle_user_input+0xdc>
		handle_i2c_scan(); 
     63c:	4b1e      	ldr	r3, [pc, #120]	; (6b8 <handle_user_input+0x2b8>)
     63e:	4798      	blx	r3
     640:	e74c      	b.n	4dc <handle_user_input+0xdc>
     642:	46c0      	nop			; (mov r8, r8)
     644:	00003f64 	.word	0x00003f64
     648:	000022dd 	.word	0x000022dd
     64c:	20000010 	.word	0x20000010
     650:	000022c9 	.word	0x000022c9
     654:	20000030 	.word	0x20000030
     658:	2000002c 	.word	0x2000002c
     65c:	2000000c 	.word	0x2000000c
     660:	20000004 	.word	0x20000004
     664:	20000008 	.word	0x20000008
     668:	2000001c 	.word	0x2000001c
     66c:	20000018 	.word	0x20000018
     670:	20000028 	.word	0x20000028
     674:	20000024 	.word	0x20000024
     678:	20000000 	.word	0x20000000
     67c:	20000020 	.word	0x20000020
     680:	20000014 	.word	0x20000014
     684:	00003f8c 	.word	0x00003f8c
     688:	00002115 	.word	0x00002115
     68c:	00000279 	.word	0x00000279
     690:	000002b1 	.word	0x000002b1
     694:	000002c9 	.word	0x000002c9
     698:	00001fbd 	.word	0x00001fbd
     69c:	00003e98 	.word	0x00003e98
     6a0:	00003f68 	.word	0x00003f68
     6a4:	000002e1 	.word	0x000002e1
     6a8:	000002f9 	.word	0x000002f9
     6ac:	00000311 	.word	0x00000311
     6b0:	00000375 	.word	0x00000375
     6b4:	000003d9 	.word	0x000003d9
     6b8:	000003ed 	.word	0x000003ed

000006bc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     6be:	2000      	movs	r0, #0
     6c0:	4b08      	ldr	r3, [pc, #32]	; (6e4 <delay_init+0x28>)
     6c2:	4798      	blx	r3
     6c4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     6c6:	4c08      	ldr	r4, [pc, #32]	; (6e8 <delay_init+0x2c>)
     6c8:	21fa      	movs	r1, #250	; 0xfa
     6ca:	0089      	lsls	r1, r1, #2
     6cc:	47a0      	blx	r4
     6ce:	4b07      	ldr	r3, [pc, #28]	; (6ec <delay_init+0x30>)
     6d0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     6d2:	4907      	ldr	r1, [pc, #28]	; (6f0 <delay_init+0x34>)
     6d4:	0028      	movs	r0, r5
     6d6:	47a0      	blx	r4
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <delay_init+0x38>)
     6da:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     6dc:	2205      	movs	r2, #5
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <delay_init+0x3c>)
     6e0:	601a      	str	r2, [r3, #0]
}
     6e2:	bd70      	pop	{r4, r5, r6, pc}
     6e4:	00001899 	.word	0x00001899
     6e8:	00001e51 	.word	0x00001e51
     6ec:	20000034 	.word	0x20000034
     6f0:	000f4240 	.word	0x000f4240
     6f4:	20000038 	.word	0x20000038
     6f8:	e000e010 	.word	0xe000e010

000006fc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     6fc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     6fe:	4b08      	ldr	r3, [pc, #32]	; (720 <delay_cycles_us+0x24>)
     700:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     702:	4a08      	ldr	r2, [pc, #32]	; (724 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     704:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     706:	2180      	movs	r1, #128	; 0x80
     708:	0249      	lsls	r1, r1, #9
	while (n--) {
     70a:	3801      	subs	r0, #1
     70c:	d307      	bcc.n	71e <delay_cycles_us+0x22>
	if (n > 0) {
     70e:	2c00      	cmp	r4, #0
     710:	d0fb      	beq.n	70a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     712:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     714:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     716:	6813      	ldr	r3, [r2, #0]
     718:	420b      	tst	r3, r1
     71a:	d0fc      	beq.n	716 <delay_cycles_us+0x1a>
     71c:	e7f5      	b.n	70a <delay_cycles_us+0xe>
	}
}
     71e:	bd30      	pop	{r4, r5, pc}
     720:	20000038 	.word	0x20000038
     724:	e000e010 	.word	0xe000e010

00000728 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     728:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     72a:	4b08      	ldr	r3, [pc, #32]	; (74c <delay_cycles_ms+0x24>)
     72c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     72e:	4a08      	ldr	r2, [pc, #32]	; (750 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     730:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     732:	2180      	movs	r1, #128	; 0x80
     734:	0249      	lsls	r1, r1, #9
	while (n--) {
     736:	3801      	subs	r0, #1
     738:	d307      	bcc.n	74a <delay_cycles_ms+0x22>
	if (n > 0) {
     73a:	2c00      	cmp	r4, #0
     73c:	d0fb      	beq.n	736 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     73e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     740:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     742:	6813      	ldr	r3, [r2, #0]
     744:	420b      	tst	r3, r1
     746:	d0fc      	beq.n	742 <delay_cycles_ms+0x1a>
     748:	e7f5      	b.n	736 <delay_cycles_ms+0xe>
	}
}
     74a:	bd30      	pop	{r4, r5, pc}
     74c:	20000034 	.word	0x20000034
     750:	e000e010 	.word	0xe000e010

00000754 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     754:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     756:	1e44      	subs	r4, r0, #1
     758:	2800      	cmp	r0, #0
     75a:	d004      	beq.n	766 <nm_bsp_sleep+0x12>
		delay_ms(1);
     75c:	4d02      	ldr	r5, [pc, #8]	; (768 <nm_bsp_sleep+0x14>)
     75e:	2001      	movs	r0, #1
     760:	47a8      	blx	r5
	while (u32TimeMsec--) {
     762:	3c01      	subs	r4, #1
     764:	d2fb      	bcs.n	75e <nm_bsp_sleep+0xa>
	}
}
     766:	bd70      	pop	{r4, r5, r6, pc}
     768:	00000729 	.word	0x00000729

0000076c <nm_bsp_reset>:
{
     76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     76e:	4c07      	ldr	r4, [pc, #28]	; (78c <nm_bsp_reset+0x20>)
     770:	2780      	movs	r7, #128	; 0x80
     772:	057f      	lsls	r7, r7, #21
     774:	6167      	str	r7, [r4, #20]
     776:	2580      	movs	r5, #128	; 0x80
     778:	052d      	lsls	r5, r5, #20
     77a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     77c:	2001      	movs	r0, #1
     77e:	4e04      	ldr	r6, [pc, #16]	; (790 <nm_bsp_reset+0x24>)
     780:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     782:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     784:	200a      	movs	r0, #10
     786:	47b0      	blx	r6
     788:	61a5      	str	r5, [r4, #24]
}
     78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     78c:	41004400 	.word	0x41004400
     790:	00000755 	.word	0x00000755

00000794 <nm_bsp_init>:
{
     794:	b570      	push	{r4, r5, r6, lr}
     796:	b082      	sub	sp, #8
	gpfIsr = NULL;
     798:	2300      	movs	r3, #0
     79a:	4a16      	ldr	r2, [pc, #88]	; (7f4 <nm_bsp_init+0x60>)
     79c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     79e:	ac01      	add	r4, sp, #4
     7a0:	2501      	movs	r5, #1
     7a2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     7a4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     7a6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     7a8:	0021      	movs	r1, r4
     7aa:	201b      	movs	r0, #27
     7ac:	4e12      	ldr	r6, [pc, #72]	; (7f8 <nm_bsp_init+0x64>)
     7ae:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     7b0:	0021      	movs	r1, r4
     7b2:	201c      	movs	r0, #28
     7b4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     7b6:	0021      	movs	r1, r4
     7b8:	2028      	movs	r0, #40	; 0x28
     7ba:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     7bc:	4b0f      	ldr	r3, [pc, #60]	; (7fc <nm_bsp_init+0x68>)
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0552      	lsls	r2, r2, #21
     7c2:	615a      	str	r2, [r3, #20]
     7c4:	2280      	movs	r2, #128	; 0x80
     7c6:	0512      	lsls	r2, r2, #20
     7c8:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     7ca:	4b0d      	ldr	r3, [pc, #52]	; (800 <nm_bsp_init+0x6c>)
     7cc:	681b      	ldr	r3, [r3, #0]
     7ce:	421d      	tst	r5, r3
     7d0:	d003      	beq.n	7da <nm_bsp_init+0x46>
     7d2:	4b0b      	ldr	r3, [pc, #44]	; (800 <nm_bsp_init+0x6c>)
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	079b      	lsls	r3, r3, #30
     7d8:	d401      	bmi.n	7de <nm_bsp_init+0x4a>
	    delay_init();
     7da:	4b0a      	ldr	r3, [pc, #40]	; (804 <nm_bsp_init+0x70>)
     7dc:	4798      	blx	r3
	nm_bsp_reset();
     7de:	4b0a      	ldr	r3, [pc, #40]	; (808 <nm_bsp_init+0x74>)
     7e0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     7e2:	2201      	movs	r2, #1
     7e4:	4b09      	ldr	r3, [pc, #36]	; (80c <nm_bsp_init+0x78>)
     7e6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     7ec:	b662      	cpsie	i
}
     7ee:	2000      	movs	r0, #0
     7f0:	b002      	add	sp, #8
     7f2:	bd70      	pop	{r4, r5, r6, pc}
     7f4:	2000022c 	.word	0x2000022c
     7f8:	00000991 	.word	0x00000991
     7fc:	41004400 	.word	0x41004400
     800:	e000e010 	.word	0xe000e010
     804:	000006bd 	.word	0x000006bd
     808:	0000076d 	.word	0x0000076d
     80c:	2000003c 	.word	0x2000003c

00000810 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     810:	4b0c      	ldr	r3, [pc, #48]	; (844 <cpu_irq_enter_critical+0x34>)
     812:	681b      	ldr	r3, [r3, #0]
     814:	2b00      	cmp	r3, #0
     816:	d106      	bne.n	826 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     818:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     81c:	2b00      	cmp	r3, #0
     81e:	d007      	beq.n	830 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     820:	2200      	movs	r2, #0
     822:	4b09      	ldr	r3, [pc, #36]	; (848 <cpu_irq_enter_critical+0x38>)
     824:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     826:	4a07      	ldr	r2, [pc, #28]	; (844 <cpu_irq_enter_critical+0x34>)
     828:	6813      	ldr	r3, [r2, #0]
     82a:	3301      	adds	r3, #1
     82c:	6013      	str	r3, [r2, #0]
}
     82e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     830:	b672      	cpsid	i
     832:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     836:	2200      	movs	r2, #0
     838:	4b04      	ldr	r3, [pc, #16]	; (84c <cpu_irq_enter_critical+0x3c>)
     83a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     83c:	3201      	adds	r2, #1
     83e:	4b02      	ldr	r3, [pc, #8]	; (848 <cpu_irq_enter_critical+0x38>)
     840:	701a      	strb	r2, [r3, #0]
     842:	e7f0      	b.n	826 <cpu_irq_enter_critical+0x16>
     844:	20000230 	.word	0x20000230
     848:	20000234 	.word	0x20000234
     84c:	2000003c 	.word	0x2000003c

00000850 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     850:	4b08      	ldr	r3, [pc, #32]	; (874 <cpu_irq_leave_critical+0x24>)
     852:	681a      	ldr	r2, [r3, #0]
     854:	3a01      	subs	r2, #1
     856:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     858:	681b      	ldr	r3, [r3, #0]
     85a:	2b00      	cmp	r3, #0
     85c:	d109      	bne.n	872 <cpu_irq_leave_critical+0x22>
     85e:	4b06      	ldr	r3, [pc, #24]	; (878 <cpu_irq_leave_critical+0x28>)
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b00      	cmp	r3, #0
     864:	d005      	beq.n	872 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     866:	2201      	movs	r2, #1
     868:	4b04      	ldr	r3, [pc, #16]	; (87c <cpu_irq_leave_critical+0x2c>)
     86a:	701a      	strb	r2, [r3, #0]
     86c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     870:	b662      	cpsie	i
	}
}
     872:	4770      	bx	lr
     874:	20000230 	.word	0x20000230
     878:	20000234 	.word	0x20000234
     87c:	2000003c 	.word	0x2000003c

00000880 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     880:	b5f0      	push	{r4, r5, r6, r7, lr}
     882:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     884:	ac01      	add	r4, sp, #4
     886:	2501      	movs	r5, #1
     888:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     88a:	2700      	movs	r7, #0
     88c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     88e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     890:	0021      	movs	r1, r4
     892:	2017      	movs	r0, #23
     894:	4e06      	ldr	r6, [pc, #24]	; (8b0 <system_board_init+0x30>)
     896:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     898:	2280      	movs	r2, #128	; 0x80
     89a:	0412      	lsls	r2, r2, #16
     89c:	4b05      	ldr	r3, [pc, #20]	; (8b4 <system_board_init+0x34>)
     89e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     8a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     8a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     8a4:	0021      	movs	r1, r4
     8a6:	2037      	movs	r0, #55	; 0x37
     8a8:	47b0      	blx	r6
}
     8aa:	b003      	add	sp, #12
     8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00000991 	.word	0x00000991
     8b4:	41004400 	.word	0x41004400

000008b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8b8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8ba:	2200      	movs	r2, #0
     8bc:	4b10      	ldr	r3, [pc, #64]	; (900 <EIC_Handler+0x48>)
     8be:	701a      	strb	r2, [r3, #0]
     8c0:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     8c2:	4910      	ldr	r1, [pc, #64]	; (904 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8c4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8c6:	4e10      	ldr	r6, [pc, #64]	; (908 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8c8:	4c0d      	ldr	r4, [pc, #52]	; (900 <EIC_Handler+0x48>)
     8ca:	e00a      	b.n	8e2 <EIC_Handler+0x2a>
		return eics[eic_index];
     8cc:	490d      	ldr	r1, [pc, #52]	; (904 <EIC_Handler+0x4c>)
     8ce:	e008      	b.n	8e2 <EIC_Handler+0x2a>
     8d0:	7823      	ldrb	r3, [r4, #0]
     8d2:	3301      	adds	r3, #1
     8d4:	b2db      	uxtb	r3, r3
     8d6:	7023      	strb	r3, [r4, #0]
     8d8:	2b0f      	cmp	r3, #15
     8da:	d810      	bhi.n	8fe <EIC_Handler+0x46>
		return NULL;
     8dc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     8de:	2b1f      	cmp	r3, #31
     8e0:	d9f4      	bls.n	8cc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     8e2:	0028      	movs	r0, r5
     8e4:	4018      	ands	r0, r3
     8e6:	2201      	movs	r2, #1
     8e8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     8ea:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     8ec:	4210      	tst	r0, r2
     8ee:	d0ef      	beq.n	8d0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     8f0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8f2:	009b      	lsls	r3, r3, #2
     8f4:	599b      	ldr	r3, [r3, r6]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d0ea      	beq.n	8d0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     8fa:	4798      	blx	r3
     8fc:	e7e8      	b.n	8d0 <EIC_Handler+0x18>
			}
		}
	}
}
     8fe:	bd70      	pop	{r4, r5, r6, pc}
     900:	20000348 	.word	0x20000348
     904:	40001800 	.word	0x40001800
     908:	2000034c 	.word	0x2000034c

0000090c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     90c:	4a04      	ldr	r2, [pc, #16]	; (920 <_extint_enable+0x14>)
     90e:	7813      	ldrb	r3, [r2, #0]
     910:	2102      	movs	r1, #2
     912:	430b      	orrs	r3, r1
     914:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     916:	7853      	ldrb	r3, [r2, #1]
     918:	b25b      	sxtb	r3, r3
     91a:	2b00      	cmp	r3, #0
     91c:	dbfb      	blt.n	916 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     91e:	4770      	bx	lr
     920:	40001800 	.word	0x40001800

00000924 <_system_extint_init>:
{
     924:	b500      	push	{lr}
     926:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     928:	4a12      	ldr	r2, [pc, #72]	; (974 <_system_extint_init+0x50>)
     92a:	6993      	ldr	r3, [r2, #24]
     92c:	2140      	movs	r1, #64	; 0x40
     92e:	430b      	orrs	r3, r1
     930:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     932:	a901      	add	r1, sp, #4
     934:	2300      	movs	r3, #0
     936:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     938:	2005      	movs	r0, #5
     93a:	4b0f      	ldr	r3, [pc, #60]	; (978 <_system_extint_init+0x54>)
     93c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     93e:	2005      	movs	r0, #5
     940:	4b0e      	ldr	r3, [pc, #56]	; (97c <_system_extint_init+0x58>)
     942:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     944:	4a0e      	ldr	r2, [pc, #56]	; (980 <_system_extint_init+0x5c>)
     946:	7813      	ldrb	r3, [r2, #0]
     948:	2101      	movs	r1, #1
     94a:	430b      	orrs	r3, r1
     94c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     94e:	7853      	ldrb	r3, [r2, #1]
     950:	b25b      	sxtb	r3, r3
     952:	2b00      	cmp	r3, #0
     954:	dbfb      	blt.n	94e <_system_extint_init+0x2a>
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <_system_extint_init+0x60>)
     958:	0019      	movs	r1, r3
     95a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     95c:	2200      	movs	r2, #0
     95e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     960:	4299      	cmp	r1, r3
     962:	d1fc      	bne.n	95e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     964:	2210      	movs	r2, #16
     966:	4b08      	ldr	r3, [pc, #32]	; (988 <_system_extint_init+0x64>)
     968:	601a      	str	r2, [r3, #0]
	_extint_enable();
     96a:	4b08      	ldr	r3, [pc, #32]	; (98c <_system_extint_init+0x68>)
     96c:	4798      	blx	r3
}
     96e:	b003      	add	sp, #12
     970:	bd00      	pop	{pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	40000400 	.word	0x40000400
     978:	000019b1 	.word	0x000019b1
     97c:	00001925 	.word	0x00001925
     980:	40001800 	.word	0x40001800
     984:	2000034c 	.word	0x2000034c
     988:	e000e100 	.word	0xe000e100
     98c:	0000090d 	.word	0x0000090d

00000990 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     990:	b500      	push	{lr}
     992:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     994:	ab01      	add	r3, sp, #4
     996:	2280      	movs	r2, #128	; 0x80
     998:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     99a:	780a      	ldrb	r2, [r1, #0]
     99c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     99e:	784a      	ldrb	r2, [r1, #1]
     9a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     9a2:	788a      	ldrb	r2, [r1, #2]
     9a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     9a6:	0019      	movs	r1, r3
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <port_pin_set_config+0x20>)
     9aa:	4798      	blx	r3
}
     9ac:	b003      	add	sp, #12
     9ae:	bd00      	pop	{pc}
     9b0:	00001aa9 	.word	0x00001aa9

000009b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b6:	46de      	mov	lr, fp
     9b8:	4657      	mov	r7, sl
     9ba:	464e      	mov	r6, r9
     9bc:	4645      	mov	r5, r8
     9be:	b5e0      	push	{r5, r6, r7, lr}
     9c0:	b087      	sub	sp, #28
     9c2:	4680      	mov	r8, r0
     9c4:	9104      	str	r1, [sp, #16]
     9c6:	0016      	movs	r6, r2
     9c8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     9ca:	2200      	movs	r2, #0
     9cc:	2300      	movs	r3, #0
     9ce:	2100      	movs	r1, #0
     9d0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     9d2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9d4:	2001      	movs	r0, #1
     9d6:	0021      	movs	r1, r4
     9d8:	9600      	str	r6, [sp, #0]
     9da:	9701      	str	r7, [sp, #4]
     9dc:	465c      	mov	r4, fp
     9de:	9403      	str	r4, [sp, #12]
     9e0:	4644      	mov	r4, r8
     9e2:	9405      	str	r4, [sp, #20]
     9e4:	e013      	b.n	a0e <long_division+0x5a>
     9e6:	2420      	movs	r4, #32
     9e8:	1a64      	subs	r4, r4, r1
     9ea:	0005      	movs	r5, r0
     9ec:	40e5      	lsrs	r5, r4
     9ee:	46a8      	mov	r8, r5
     9f0:	e014      	b.n	a1c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     9f2:	9c00      	ldr	r4, [sp, #0]
     9f4:	9d01      	ldr	r5, [sp, #4]
     9f6:	1b12      	subs	r2, r2, r4
     9f8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     9fa:	465c      	mov	r4, fp
     9fc:	464d      	mov	r5, r9
     9fe:	432c      	orrs	r4, r5
     a00:	46a3      	mov	fp, r4
     a02:	9c03      	ldr	r4, [sp, #12]
     a04:	4645      	mov	r5, r8
     a06:	432c      	orrs	r4, r5
     a08:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a0a:	3901      	subs	r1, #1
     a0c:	d325      	bcc.n	a5a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a0e:	2420      	movs	r4, #32
     a10:	4264      	negs	r4, r4
     a12:	190c      	adds	r4, r1, r4
     a14:	d4e7      	bmi.n	9e6 <long_division+0x32>
     a16:	0005      	movs	r5, r0
     a18:	40a5      	lsls	r5, r4
     a1a:	46a8      	mov	r8, r5
     a1c:	0004      	movs	r4, r0
     a1e:	408c      	lsls	r4, r1
     a20:	46a1      	mov	r9, r4
		r = r << 1;
     a22:	1892      	adds	r2, r2, r2
     a24:	415b      	adcs	r3, r3
     a26:	0014      	movs	r4, r2
     a28:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a2a:	9e05      	ldr	r6, [sp, #20]
     a2c:	464f      	mov	r7, r9
     a2e:	403e      	ands	r6, r7
     a30:	46b4      	mov	ip, r6
     a32:	9e04      	ldr	r6, [sp, #16]
     a34:	4647      	mov	r7, r8
     a36:	403e      	ands	r6, r7
     a38:	46b2      	mov	sl, r6
     a3a:	4666      	mov	r6, ip
     a3c:	4657      	mov	r7, sl
     a3e:	433e      	orrs	r6, r7
     a40:	d003      	beq.n	a4a <long_division+0x96>
			r |= 0x01;
     a42:	0006      	movs	r6, r0
     a44:	4326      	orrs	r6, r4
     a46:	0032      	movs	r2, r6
     a48:	002b      	movs	r3, r5
		if (r >= d) {
     a4a:	9c00      	ldr	r4, [sp, #0]
     a4c:	9d01      	ldr	r5, [sp, #4]
     a4e:	429d      	cmp	r5, r3
     a50:	d8db      	bhi.n	a0a <long_division+0x56>
     a52:	d1ce      	bne.n	9f2 <long_division+0x3e>
     a54:	4294      	cmp	r4, r2
     a56:	d8d8      	bhi.n	a0a <long_division+0x56>
     a58:	e7cb      	b.n	9f2 <long_division+0x3e>
     a5a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     a5c:	4658      	mov	r0, fp
     a5e:	0019      	movs	r1, r3
     a60:	b007      	add	sp, #28
     a62:	bc3c      	pop	{r2, r3, r4, r5}
     a64:	4690      	mov	r8, r2
     a66:	4699      	mov	r9, r3
     a68:	46a2      	mov	sl, r4
     a6a:	46ab      	mov	fp, r5
     a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a6e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a6e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a70:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a72:	2340      	movs	r3, #64	; 0x40
     a74:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a76:	4281      	cmp	r1, r0
     a78:	d202      	bcs.n	a80 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a7a:	0018      	movs	r0, r3
     a7c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a7e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a80:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a82:	1c63      	adds	r3, r4, #1
     a84:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a86:	4288      	cmp	r0, r1
     a88:	d9f9      	bls.n	a7e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a8a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a8c:	2cff      	cmp	r4, #255	; 0xff
     a8e:	d8f4      	bhi.n	a7a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a90:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a92:	2300      	movs	r3, #0
     a94:	e7f1      	b.n	a7a <_sercom_get_sync_baud_val+0xc>
	...

00000a98 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a98:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9a:	b083      	sub	sp, #12
     a9c:	000f      	movs	r7, r1
     a9e:	0016      	movs	r6, r2
     aa0:	aa08      	add	r2, sp, #32
     aa2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     aa4:	0004      	movs	r4, r0
     aa6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aa8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     aaa:	42bc      	cmp	r4, r7
     aac:	d902      	bls.n	ab4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     aae:	0010      	movs	r0, r2
     ab0:	b003      	add	sp, #12
     ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     ab4:	2b00      	cmp	r3, #0
     ab6:	d114      	bne.n	ae2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     ab8:	0002      	movs	r2, r0
     aba:	0008      	movs	r0, r1
     abc:	2100      	movs	r1, #0
     abe:	4c19      	ldr	r4, [pc, #100]	; (b24 <_sercom_get_async_baud_val+0x8c>)
     ac0:	47a0      	blx	r4
     ac2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     ac4:	003a      	movs	r2, r7
     ac6:	2300      	movs	r3, #0
     ac8:	2000      	movs	r0, #0
     aca:	4c17      	ldr	r4, [pc, #92]	; (b28 <_sercom_get_async_baud_val+0x90>)
     acc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ace:	2200      	movs	r2, #0
     ad0:	2301      	movs	r3, #1
     ad2:	1a12      	subs	r2, r2, r0
     ad4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ad6:	0c12      	lsrs	r2, r2, #16
     ad8:	041b      	lsls	r3, r3, #16
     ada:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     adc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     ade:	2200      	movs	r2, #0
     ae0:	e7e5      	b.n	aae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     ae2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ae4:	2b01      	cmp	r3, #1
     ae6:	d1f9      	bne.n	adc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     ae8:	000a      	movs	r2, r1
     aea:	2300      	movs	r3, #0
     aec:	2100      	movs	r1, #0
     aee:	4c0d      	ldr	r4, [pc, #52]	; (b24 <_sercom_get_async_baud_val+0x8c>)
     af0:	47a0      	blx	r4
     af2:	0002      	movs	r2, r0
     af4:	000b      	movs	r3, r1
     af6:	9200      	str	r2, [sp, #0]
     af8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     afa:	0038      	movs	r0, r7
     afc:	2100      	movs	r1, #0
     afe:	4c0a      	ldr	r4, [pc, #40]	; (b28 <_sercom_get_async_baud_val+0x90>)
     b00:	47a0      	blx	r4
     b02:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b04:	2380      	movs	r3, #128	; 0x80
     b06:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b08:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b0a:	4298      	cmp	r0, r3
     b0c:	d8cf      	bhi.n	aae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b0e:	0f79      	lsrs	r1, r7, #29
     b10:	00f8      	lsls	r0, r7, #3
     b12:	9a00      	ldr	r2, [sp, #0]
     b14:	9b01      	ldr	r3, [sp, #4]
     b16:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b18:	00ea      	lsls	r2, r5, #3
     b1a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	0352      	lsls	r2, r2, #13
     b20:	432a      	orrs	r2, r5
     b22:	e7db      	b.n	adc <_sercom_get_async_baud_val+0x44>
     b24:	00001f69 	.word	0x00001f69
     b28:	000009b5 	.word	0x000009b5

00000b2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b2c:	b510      	push	{r4, lr}
     b2e:	b082      	sub	sp, #8
     b30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b32:	4b0e      	ldr	r3, [pc, #56]	; (b6c <sercom_set_gclk_generator+0x40>)
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	2b00      	cmp	r3, #0
     b38:	d007      	beq.n	b4a <sercom_set_gclk_generator+0x1e>
     b3a:	2900      	cmp	r1, #0
     b3c:	d105      	bne.n	b4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b3e:	4b0b      	ldr	r3, [pc, #44]	; (b6c <sercom_set_gclk_generator+0x40>)
     b40:	785b      	ldrb	r3, [r3, #1]
     b42:	4283      	cmp	r3, r0
     b44:	d010      	beq.n	b68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b46:	201d      	movs	r0, #29
     b48:	e00c      	b.n	b64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b4a:	a901      	add	r1, sp, #4
     b4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b4e:	2013      	movs	r0, #19
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <sercom_set_gclk_generator+0x44>)
     b52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b54:	2013      	movs	r0, #19
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <sercom_set_gclk_generator+0x48>)
     b58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b5a:	4b04      	ldr	r3, [pc, #16]	; (b6c <sercom_set_gclk_generator+0x40>)
     b5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b5e:	2201      	movs	r2, #1
     b60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b62:	2000      	movs	r0, #0
}
     b64:	b002      	add	sp, #8
     b66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b68:	2000      	movs	r0, #0
     b6a:	e7fb      	b.n	b64 <sercom_set_gclk_generator+0x38>
     b6c:	20000238 	.word	0x20000238
     b70:	000019b1 	.word	0x000019b1
     b74:	00001925 	.word	0x00001925

00000b78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b78:	4b40      	ldr	r3, [pc, #256]	; (c7c <_sercom_get_default_pad+0x104>)
     b7a:	4298      	cmp	r0, r3
     b7c:	d031      	beq.n	be2 <_sercom_get_default_pad+0x6a>
     b7e:	d90a      	bls.n	b96 <_sercom_get_default_pad+0x1e>
     b80:	4b3f      	ldr	r3, [pc, #252]	; (c80 <_sercom_get_default_pad+0x108>)
     b82:	4298      	cmp	r0, r3
     b84:	d04d      	beq.n	c22 <_sercom_get_default_pad+0xaa>
     b86:	4b3f      	ldr	r3, [pc, #252]	; (c84 <_sercom_get_default_pad+0x10c>)
     b88:	4298      	cmp	r0, r3
     b8a:	d05a      	beq.n	c42 <_sercom_get_default_pad+0xca>
     b8c:	4b3e      	ldr	r3, [pc, #248]	; (c88 <_sercom_get_default_pad+0x110>)
     b8e:	4298      	cmp	r0, r3
     b90:	d037      	beq.n	c02 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b92:	2000      	movs	r0, #0
}
     b94:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b96:	4b3d      	ldr	r3, [pc, #244]	; (c8c <_sercom_get_default_pad+0x114>)
     b98:	4298      	cmp	r0, r3
     b9a:	d00c      	beq.n	bb6 <_sercom_get_default_pad+0x3e>
     b9c:	4b3c      	ldr	r3, [pc, #240]	; (c90 <_sercom_get_default_pad+0x118>)
     b9e:	4298      	cmp	r0, r3
     ba0:	d1f7      	bne.n	b92 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ba2:	2901      	cmp	r1, #1
     ba4:	d017      	beq.n	bd6 <_sercom_get_default_pad+0x5e>
     ba6:	2900      	cmp	r1, #0
     ba8:	d05d      	beq.n	c66 <_sercom_get_default_pad+0xee>
     baa:	2902      	cmp	r1, #2
     bac:	d015      	beq.n	bda <_sercom_get_default_pad+0x62>
     bae:	2903      	cmp	r1, #3
     bb0:	d015      	beq.n	bde <_sercom_get_default_pad+0x66>
	return 0;
     bb2:	2000      	movs	r0, #0
     bb4:	e7ee      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bb6:	2901      	cmp	r1, #1
     bb8:	d007      	beq.n	bca <_sercom_get_default_pad+0x52>
     bba:	2900      	cmp	r1, #0
     bbc:	d051      	beq.n	c62 <_sercom_get_default_pad+0xea>
     bbe:	2902      	cmp	r1, #2
     bc0:	d005      	beq.n	bce <_sercom_get_default_pad+0x56>
     bc2:	2903      	cmp	r1, #3
     bc4:	d005      	beq.n	bd2 <_sercom_get_default_pad+0x5a>
	return 0;
     bc6:	2000      	movs	r0, #0
     bc8:	e7e4      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bca:	4832      	ldr	r0, [pc, #200]	; (c94 <_sercom_get_default_pad+0x11c>)
     bcc:	e7e2      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bce:	4832      	ldr	r0, [pc, #200]	; (c98 <_sercom_get_default_pad+0x120>)
     bd0:	e7e0      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bd2:	4832      	ldr	r0, [pc, #200]	; (c9c <_sercom_get_default_pad+0x124>)
     bd4:	e7de      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bd6:	4832      	ldr	r0, [pc, #200]	; (ca0 <_sercom_get_default_pad+0x128>)
     bd8:	e7dc      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bda:	4832      	ldr	r0, [pc, #200]	; (ca4 <_sercom_get_default_pad+0x12c>)
     bdc:	e7da      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bde:	4832      	ldr	r0, [pc, #200]	; (ca8 <_sercom_get_default_pad+0x130>)
     be0:	e7d8      	b.n	b94 <_sercom_get_default_pad+0x1c>
     be2:	2901      	cmp	r1, #1
     be4:	d007      	beq.n	bf6 <_sercom_get_default_pad+0x7e>
     be6:	2900      	cmp	r1, #0
     be8:	d03f      	beq.n	c6a <_sercom_get_default_pad+0xf2>
     bea:	2902      	cmp	r1, #2
     bec:	d005      	beq.n	bfa <_sercom_get_default_pad+0x82>
     bee:	2903      	cmp	r1, #3
     bf0:	d005      	beq.n	bfe <_sercom_get_default_pad+0x86>
	return 0;
     bf2:	2000      	movs	r0, #0
     bf4:	e7ce      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bf6:	482d      	ldr	r0, [pc, #180]	; (cac <_sercom_get_default_pad+0x134>)
     bf8:	e7cc      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bfa:	482d      	ldr	r0, [pc, #180]	; (cb0 <_sercom_get_default_pad+0x138>)
     bfc:	e7ca      	b.n	b94 <_sercom_get_default_pad+0x1c>
     bfe:	482d      	ldr	r0, [pc, #180]	; (cb4 <_sercom_get_default_pad+0x13c>)
     c00:	e7c8      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c02:	2901      	cmp	r1, #1
     c04:	d007      	beq.n	c16 <_sercom_get_default_pad+0x9e>
     c06:	2900      	cmp	r1, #0
     c08:	d031      	beq.n	c6e <_sercom_get_default_pad+0xf6>
     c0a:	2902      	cmp	r1, #2
     c0c:	d005      	beq.n	c1a <_sercom_get_default_pad+0xa2>
     c0e:	2903      	cmp	r1, #3
     c10:	d005      	beq.n	c1e <_sercom_get_default_pad+0xa6>
	return 0;
     c12:	2000      	movs	r0, #0
     c14:	e7be      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c16:	4828      	ldr	r0, [pc, #160]	; (cb8 <_sercom_get_default_pad+0x140>)
     c18:	e7bc      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c1a:	4828      	ldr	r0, [pc, #160]	; (cbc <_sercom_get_default_pad+0x144>)
     c1c:	e7ba      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c1e:	4828      	ldr	r0, [pc, #160]	; (cc0 <_sercom_get_default_pad+0x148>)
     c20:	e7b8      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c22:	2901      	cmp	r1, #1
     c24:	d007      	beq.n	c36 <_sercom_get_default_pad+0xbe>
     c26:	2900      	cmp	r1, #0
     c28:	d023      	beq.n	c72 <_sercom_get_default_pad+0xfa>
     c2a:	2902      	cmp	r1, #2
     c2c:	d005      	beq.n	c3a <_sercom_get_default_pad+0xc2>
     c2e:	2903      	cmp	r1, #3
     c30:	d005      	beq.n	c3e <_sercom_get_default_pad+0xc6>
	return 0;
     c32:	2000      	movs	r0, #0
     c34:	e7ae      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c36:	4823      	ldr	r0, [pc, #140]	; (cc4 <_sercom_get_default_pad+0x14c>)
     c38:	e7ac      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c3a:	4823      	ldr	r0, [pc, #140]	; (cc8 <_sercom_get_default_pad+0x150>)
     c3c:	e7aa      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c3e:	4823      	ldr	r0, [pc, #140]	; (ccc <_sercom_get_default_pad+0x154>)
     c40:	e7a8      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c42:	2901      	cmp	r1, #1
     c44:	d007      	beq.n	c56 <_sercom_get_default_pad+0xde>
     c46:	2900      	cmp	r1, #0
     c48:	d015      	beq.n	c76 <_sercom_get_default_pad+0xfe>
     c4a:	2902      	cmp	r1, #2
     c4c:	d005      	beq.n	c5a <_sercom_get_default_pad+0xe2>
     c4e:	2903      	cmp	r1, #3
     c50:	d005      	beq.n	c5e <_sercom_get_default_pad+0xe6>
	return 0;
     c52:	2000      	movs	r0, #0
     c54:	e79e      	b.n	b94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c56:	481e      	ldr	r0, [pc, #120]	; (cd0 <_sercom_get_default_pad+0x158>)
     c58:	e79c      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c5a:	481e      	ldr	r0, [pc, #120]	; (cd4 <_sercom_get_default_pad+0x15c>)
     c5c:	e79a      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c5e:	481e      	ldr	r0, [pc, #120]	; (cd8 <_sercom_get_default_pad+0x160>)
     c60:	e798      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c62:	481e      	ldr	r0, [pc, #120]	; (cdc <_sercom_get_default_pad+0x164>)
     c64:	e796      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c66:	2003      	movs	r0, #3
     c68:	e794      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c6a:	481d      	ldr	r0, [pc, #116]	; (ce0 <_sercom_get_default_pad+0x168>)
     c6c:	e792      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c6e:	481d      	ldr	r0, [pc, #116]	; (ce4 <_sercom_get_default_pad+0x16c>)
     c70:	e790      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c72:	481d      	ldr	r0, [pc, #116]	; (ce8 <_sercom_get_default_pad+0x170>)
     c74:	e78e      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c76:	481d      	ldr	r0, [pc, #116]	; (cec <_sercom_get_default_pad+0x174>)
     c78:	e78c      	b.n	b94 <_sercom_get_default_pad+0x1c>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	42001000 	.word	0x42001000
     c80:	42001800 	.word	0x42001800
     c84:	42001c00 	.word	0x42001c00
     c88:	42001400 	.word	0x42001400
     c8c:	42000800 	.word	0x42000800
     c90:	42000c00 	.word	0x42000c00
     c94:	00050003 	.word	0x00050003
     c98:	00060003 	.word	0x00060003
     c9c:	00070003 	.word	0x00070003
     ca0:	00010003 	.word	0x00010003
     ca4:	001e0003 	.word	0x001e0003
     ca8:	001f0003 	.word	0x001f0003
     cac:	00090003 	.word	0x00090003
     cb0:	000a0003 	.word	0x000a0003
     cb4:	000b0003 	.word	0x000b0003
     cb8:	00110003 	.word	0x00110003
     cbc:	00120003 	.word	0x00120003
     cc0:	00130003 	.word	0x00130003
     cc4:	000d0003 	.word	0x000d0003
     cc8:	000e0003 	.word	0x000e0003
     ccc:	000f0003 	.word	0x000f0003
     cd0:	00170003 	.word	0x00170003
     cd4:	00180003 	.word	0x00180003
     cd8:	00190003 	.word	0x00190003
     cdc:	00040003 	.word	0x00040003
     ce0:	00080003 	.word	0x00080003
     ce4:	00100003 	.word	0x00100003
     ce8:	000c0003 	.word	0x000c0003
     cec:	00160003 	.word	0x00160003

00000cf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     cf0:	b530      	push	{r4, r5, lr}
     cf2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     cf4:	4b0b      	ldr	r3, [pc, #44]	; (d24 <_sercom_get_sercom_inst_index+0x34>)
     cf6:	466a      	mov	r2, sp
     cf8:	cb32      	ldmia	r3!, {r1, r4, r5}
     cfa:	c232      	stmia	r2!, {r1, r4, r5}
     cfc:	cb32      	ldmia	r3!, {r1, r4, r5}
     cfe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d00:	9b00      	ldr	r3, [sp, #0]
     d02:	4283      	cmp	r3, r0
     d04:	d00b      	beq.n	d1e <_sercom_get_sercom_inst_index+0x2e>
     d06:	2301      	movs	r3, #1
     d08:	009a      	lsls	r2, r3, #2
     d0a:	4669      	mov	r1, sp
     d0c:	5852      	ldr	r2, [r2, r1]
     d0e:	4282      	cmp	r2, r0
     d10:	d006      	beq.n	d20 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d12:	3301      	adds	r3, #1
     d14:	2b06      	cmp	r3, #6
     d16:	d1f7      	bne.n	d08 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d18:	2000      	movs	r0, #0
}
     d1a:	b007      	add	sp, #28
     d1c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d1e:	2300      	movs	r3, #0
			return i;
     d20:	b2d8      	uxtb	r0, r3
     d22:	e7fa      	b.n	d1a <_sercom_get_sercom_inst_index+0x2a>
     d24:	000042a0 	.word	0x000042a0

00000d28 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d28:	4770      	bx	lr
	...

00000d2c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d2e:	4b0a      	ldr	r3, [pc, #40]	; (d58 <_sercom_set_handler+0x2c>)
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b00      	cmp	r3, #0
     d34:	d10c      	bne.n	d50 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d36:	4f09      	ldr	r7, [pc, #36]	; (d5c <_sercom_set_handler+0x30>)
     d38:	4e09      	ldr	r6, [pc, #36]	; (d60 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d3a:	4d0a      	ldr	r5, [pc, #40]	; (d64 <_sercom_set_handler+0x38>)
     d3c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d3e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d40:	195a      	adds	r2, r3, r5
     d42:	6014      	str	r4, [r2, #0]
     d44:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d46:	2b18      	cmp	r3, #24
     d48:	d1f9      	bne.n	d3e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d4a:	2201      	movs	r2, #1
     d4c:	4b02      	ldr	r3, [pc, #8]	; (d58 <_sercom_set_handler+0x2c>)
     d4e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d50:	0080      	lsls	r0, r0, #2
     d52:	4b02      	ldr	r3, [pc, #8]	; (d5c <_sercom_set_handler+0x30>)
     d54:	50c1      	str	r1, [r0, r3]
}
     d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d58:	2000023a 	.word	0x2000023a
     d5c:	2000023c 	.word	0x2000023c
     d60:	00000d29 	.word	0x00000d29
     d64:	2000038c 	.word	0x2000038c

00000d68 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d68:	b500      	push	{lr}
     d6a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d6c:	2309      	movs	r3, #9
     d6e:	466a      	mov	r2, sp
     d70:	7013      	strb	r3, [r2, #0]
     d72:	3301      	adds	r3, #1
     d74:	7053      	strb	r3, [r2, #1]
     d76:	3301      	adds	r3, #1
     d78:	7093      	strb	r3, [r2, #2]
     d7a:	3301      	adds	r3, #1
     d7c:	70d3      	strb	r3, [r2, #3]
     d7e:	3301      	adds	r3, #1
     d80:	7113      	strb	r3, [r2, #4]
     d82:	3301      	adds	r3, #1
     d84:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d86:	4b03      	ldr	r3, [pc, #12]	; (d94 <_sercom_get_interrupt_vector+0x2c>)
     d88:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d8a:	466b      	mov	r3, sp
     d8c:	5618      	ldrsb	r0, [r3, r0]
}
     d8e:	b003      	add	sp, #12
     d90:	bd00      	pop	{pc}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	00000cf1 	.word	0x00000cf1

00000d98 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d98:	b510      	push	{r4, lr}
     d9a:	4b02      	ldr	r3, [pc, #8]	; (da4 <SERCOM0_Handler+0xc>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	2000      	movs	r0, #0
     da0:	4798      	blx	r3
     da2:	bd10      	pop	{r4, pc}
     da4:	2000023c 	.word	0x2000023c

00000da8 <SERCOM1_Handler>:
     da8:	b510      	push	{r4, lr}
     daa:	4b02      	ldr	r3, [pc, #8]	; (db4 <SERCOM1_Handler+0xc>)
     dac:	685b      	ldr	r3, [r3, #4]
     dae:	2001      	movs	r0, #1
     db0:	4798      	blx	r3
     db2:	bd10      	pop	{r4, pc}
     db4:	2000023c 	.word	0x2000023c

00000db8 <SERCOM2_Handler>:
     db8:	b510      	push	{r4, lr}
     dba:	4b02      	ldr	r3, [pc, #8]	; (dc4 <SERCOM2_Handler+0xc>)
     dbc:	689b      	ldr	r3, [r3, #8]
     dbe:	2002      	movs	r0, #2
     dc0:	4798      	blx	r3
     dc2:	bd10      	pop	{r4, pc}
     dc4:	2000023c 	.word	0x2000023c

00000dc8 <SERCOM3_Handler>:
     dc8:	b510      	push	{r4, lr}
     dca:	4b02      	ldr	r3, [pc, #8]	; (dd4 <SERCOM3_Handler+0xc>)
     dcc:	68db      	ldr	r3, [r3, #12]
     dce:	2003      	movs	r0, #3
     dd0:	4798      	blx	r3
     dd2:	bd10      	pop	{r4, pc}
     dd4:	2000023c 	.word	0x2000023c

00000dd8 <SERCOM4_Handler>:
     dd8:	b510      	push	{r4, lr}
     dda:	4b02      	ldr	r3, [pc, #8]	; (de4 <SERCOM4_Handler+0xc>)
     ddc:	691b      	ldr	r3, [r3, #16]
     dde:	2004      	movs	r0, #4
     de0:	4798      	blx	r3
     de2:	bd10      	pop	{r4, pc}
     de4:	2000023c 	.word	0x2000023c

00000de8 <SERCOM5_Handler>:
     de8:	b510      	push	{r4, lr}
     dea:	4b02      	ldr	r3, [pc, #8]	; (df4 <SERCOM5_Handler+0xc>)
     dec:	695b      	ldr	r3, [r3, #20]
     dee:	2005      	movs	r0, #5
     df0:	4798      	blx	r3
     df2:	bd10      	pop	{r4, pc}
     df4:	2000023c 	.word	0x2000023c

00000df8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b091      	sub	sp, #68	; 0x44
     e06:	0005      	movs	r5, r0
     e08:	000c      	movs	r4, r1
     e0a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e0c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e0e:	0008      	movs	r0, r1
     e10:	4bbc      	ldr	r3, [pc, #752]	; (1104 <usart_init+0x30c>)
     e12:	4798      	blx	r3
     e14:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e16:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e18:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e1a:	07db      	lsls	r3, r3, #31
     e1c:	d506      	bpl.n	e2c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e1e:	b011      	add	sp, #68	; 0x44
     e20:	bc3c      	pop	{r2, r3, r4, r5}
     e22:	4690      	mov	r8, r2
     e24:	4699      	mov	r9, r3
     e26:	46a2      	mov	sl, r4
     e28:	46ab      	mov	fp, r5
     e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e2c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     e2e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e30:	079b      	lsls	r3, r3, #30
     e32:	d4f4      	bmi.n	e1e <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e34:	49b4      	ldr	r1, [pc, #720]	; (1108 <usart_init+0x310>)
     e36:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e38:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e3a:	2301      	movs	r3, #1
     e3c:	40bb      	lsls	r3, r7
     e3e:	4303      	orrs	r3, r0
     e40:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e42:	a90f      	add	r1, sp, #60	; 0x3c
     e44:	272d      	movs	r7, #45	; 0x2d
     e46:	5df3      	ldrb	r3, [r6, r7]
     e48:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e4a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e4c:	b2d3      	uxtb	r3, r2
     e4e:	9302      	str	r3, [sp, #8]
     e50:	0018      	movs	r0, r3
     e52:	4bae      	ldr	r3, [pc, #696]	; (110c <usart_init+0x314>)
     e54:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e56:	9802      	ldr	r0, [sp, #8]
     e58:	4bad      	ldr	r3, [pc, #692]	; (1110 <usart_init+0x318>)
     e5a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e5c:	5df0      	ldrb	r0, [r6, r7]
     e5e:	2100      	movs	r1, #0
     e60:	4bac      	ldr	r3, [pc, #688]	; (1114 <usart_init+0x31c>)
     e62:	4798      	blx	r3
	module->character_size = config->character_size;
     e64:	7af3      	ldrb	r3, [r6, #11]
     e66:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     e68:	2324      	movs	r3, #36	; 0x24
     e6a:	5cf3      	ldrb	r3, [r6, r3]
     e6c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e6e:	2325      	movs	r3, #37	; 0x25
     e70:	5cf3      	ldrb	r3, [r6, r3]
     e72:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     e74:	7ef3      	ldrb	r3, [r6, #27]
     e76:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e78:	7f33      	ldrb	r3, [r6, #28]
     e7a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e7c:	682b      	ldr	r3, [r5, #0]
     e7e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e80:	0018      	movs	r0, r3
     e82:	4ba0      	ldr	r3, [pc, #640]	; (1104 <usart_init+0x30c>)
     e84:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e86:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     e88:	2200      	movs	r2, #0
     e8a:	230e      	movs	r3, #14
     e8c:	a906      	add	r1, sp, #24
     e8e:	468c      	mov	ip, r1
     e90:	4463      	add	r3, ip
     e92:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     e94:	8a32      	ldrh	r2, [r6, #16]
     e96:	9202      	str	r2, [sp, #8]
     e98:	2380      	movs	r3, #128	; 0x80
     e9a:	01db      	lsls	r3, r3, #7
     e9c:	429a      	cmp	r2, r3
     e9e:	d100      	bne.n	ea2 <usart_init+0xaa>
     ea0:	e09e      	b.n	fe0 <usart_init+0x1e8>
     ea2:	d90f      	bls.n	ec4 <usart_init+0xcc>
     ea4:	23c0      	movs	r3, #192	; 0xc0
     ea6:	01db      	lsls	r3, r3, #7
     ea8:	9a02      	ldr	r2, [sp, #8]
     eaa:	429a      	cmp	r2, r3
     eac:	d100      	bne.n	eb0 <usart_init+0xb8>
     eae:	e092      	b.n	fd6 <usart_init+0x1de>
     eb0:	2380      	movs	r3, #128	; 0x80
     eb2:	021b      	lsls	r3, r3, #8
     eb4:	429a      	cmp	r2, r3
     eb6:	d000      	beq.n	eba <usart_init+0xc2>
     eb8:	e11f      	b.n	10fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     eba:	2303      	movs	r3, #3
     ebc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ebe:	2300      	movs	r3, #0
     ec0:	9307      	str	r3, [sp, #28]
     ec2:	e008      	b.n	ed6 <usart_init+0xde>
	switch (config->sample_rate) {
     ec4:	2380      	movs	r3, #128	; 0x80
     ec6:	019b      	lsls	r3, r3, #6
     ec8:	429a      	cmp	r2, r3
     eca:	d000      	beq.n	ece <usart_init+0xd6>
     ecc:	e115      	b.n	10fa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ece:	2310      	movs	r3, #16
     ed0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ed2:	3b0f      	subs	r3, #15
     ed4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     ed6:	6833      	ldr	r3, [r6, #0]
     ed8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     eda:	68f3      	ldr	r3, [r6, #12]
     edc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ede:	6973      	ldr	r3, [r6, #20]
     ee0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ee2:	7e33      	ldrb	r3, [r6, #24]
     ee4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ee6:	2326      	movs	r3, #38	; 0x26
     ee8:	5cf3      	ldrb	r3, [r6, r3]
     eea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     eec:	6873      	ldr	r3, [r6, #4]
     eee:	4699      	mov	r9, r3
	switch (transfer_mode)
     ef0:	2b00      	cmp	r3, #0
     ef2:	d100      	bne.n	ef6 <usart_init+0xfe>
     ef4:	e0a0      	b.n	1038 <usart_init+0x240>
     ef6:	2380      	movs	r3, #128	; 0x80
     ef8:	055b      	lsls	r3, r3, #21
     efa:	4599      	cmp	r9, r3
     efc:	d100      	bne.n	f00 <usart_init+0x108>
     efe:	e084      	b.n	100a <usart_init+0x212>
	if(config->encoding_format_enable) {
     f00:	7e73      	ldrb	r3, [r6, #25]
     f02:	2b00      	cmp	r3, #0
     f04:	d002      	beq.n	f0c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f06:	7eb3      	ldrb	r3, [r6, #26]
     f08:	4642      	mov	r2, r8
     f0a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f0c:	682a      	ldr	r2, [r5, #0]
     f0e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f10:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f12:	2b00      	cmp	r3, #0
     f14:	d1fc      	bne.n	f10 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     f16:	330e      	adds	r3, #14
     f18:	aa06      	add	r2, sp, #24
     f1a:	4694      	mov	ip, r2
     f1c:	4463      	add	r3, ip
     f1e:	881b      	ldrh	r3, [r3, #0]
     f20:	4642      	mov	r2, r8
     f22:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     f24:	9b05      	ldr	r3, [sp, #20]
     f26:	9a03      	ldr	r2, [sp, #12]
     f28:	4313      	orrs	r3, r2
     f2a:	9a04      	ldr	r2, [sp, #16]
     f2c:	4313      	orrs	r3, r2
     f2e:	464a      	mov	r2, r9
     f30:	4313      	orrs	r3, r2
     f32:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f34:	465b      	mov	r3, fp
     f36:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     f38:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f3a:	4653      	mov	r3, sl
     f3c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     f3e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     f40:	2327      	movs	r3, #39	; 0x27
     f42:	5cf3      	ldrb	r3, [r6, r3]
     f44:	2b00      	cmp	r3, #0
     f46:	d101      	bne.n	f4c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f48:	3304      	adds	r3, #4
     f4a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f4c:	7e73      	ldrb	r3, [r6, #25]
     f4e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f50:	7f32      	ldrb	r2, [r6, #28]
     f52:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f54:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f56:	7f72      	ldrb	r2, [r6, #29]
     f58:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f5a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f5c:	2224      	movs	r2, #36	; 0x24
     f5e:	5cb2      	ldrb	r2, [r6, r2]
     f60:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f62:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f64:	2225      	movs	r2, #37	; 0x25
     f66:	5cb2      	ldrb	r2, [r6, r2]
     f68:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f6a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     f6c:	7ab1      	ldrb	r1, [r6, #10]
     f6e:	7af2      	ldrb	r2, [r6, #11]
     f70:	4311      	orrs	r1, r2
     f72:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     f74:	8933      	ldrh	r3, [r6, #8]
     f76:	2bff      	cmp	r3, #255	; 0xff
     f78:	d100      	bne.n	f7c <usart_init+0x184>
     f7a:	e081      	b.n	1080 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f7c:	2280      	movs	r2, #128	; 0x80
     f7e:	0452      	lsls	r2, r2, #17
     f80:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     f82:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     f84:	232c      	movs	r3, #44	; 0x2c
     f86:	5cf3      	ldrb	r3, [r6, r3]
     f88:	2b00      	cmp	r3, #0
     f8a:	d103      	bne.n	f94 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f8c:	4b62      	ldr	r3, [pc, #392]	; (1118 <usart_init+0x320>)
     f8e:	789b      	ldrb	r3, [r3, #2]
     f90:	079b      	lsls	r3, r3, #30
     f92:	d501      	bpl.n	f98 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f94:	2380      	movs	r3, #128	; 0x80
     f96:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     f98:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f9a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     f9c:	2b00      	cmp	r3, #0
     f9e:	d1fc      	bne.n	f9a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     fa0:	4643      	mov	r3, r8
     fa2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fa4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fa6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     fa8:	2b00      	cmp	r3, #0
     faa:	d1fc      	bne.n	fa6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     fac:	4643      	mov	r3, r8
     fae:	601f      	str	r7, [r3, #0]
     fb0:	ab0e      	add	r3, sp, #56	; 0x38
     fb2:	2280      	movs	r2, #128	; 0x80
     fb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     fb6:	2200      	movs	r2, #0
     fb8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     fba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     fbc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     fbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
     fc0:	930a      	str	r3, [sp, #40]	; 0x28
     fc2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     fc4:	930b      	str	r3, [sp, #44]	; 0x2c
     fc6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     fc8:	930c      	str	r3, [sp, #48]	; 0x30
     fca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     fcc:	9302      	str	r3, [sp, #8]
     fce:	930d      	str	r3, [sp, #52]	; 0x34
     fd0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fd2:	ae0a      	add	r6, sp, #40	; 0x28
     fd4:	e063      	b.n	109e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fd6:	2308      	movs	r3, #8
     fd8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fda:	3b07      	subs	r3, #7
     fdc:	9307      	str	r3, [sp, #28]
     fde:	e77a      	b.n	ed6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     fe0:	6833      	ldr	r3, [r6, #0]
     fe2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     fe4:	68f3      	ldr	r3, [r6, #12]
     fe6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     fe8:	6973      	ldr	r3, [r6, #20]
     fea:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fec:	7e33      	ldrb	r3, [r6, #24]
     fee:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ff0:	2326      	movs	r3, #38	; 0x26
     ff2:	5cf3      	ldrb	r3, [r6, r3]
     ff4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ff6:	6873      	ldr	r3, [r6, #4]
     ff8:	4699      	mov	r9, r3
	switch (transfer_mode)
     ffa:	2b00      	cmp	r3, #0
     ffc:	d018      	beq.n	1030 <usart_init+0x238>
     ffe:	2380      	movs	r3, #128	; 0x80
    1000:	055b      	lsls	r3, r3, #21
    1002:	4599      	cmp	r9, r3
    1004:	d001      	beq.n	100a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1006:	2000      	movs	r0, #0
    1008:	e025      	b.n	1056 <usart_init+0x25e>
			if (!config->use_external_clock) {
    100a:	2327      	movs	r3, #39	; 0x27
    100c:	5cf3      	ldrb	r3, [r6, r3]
    100e:	2b00      	cmp	r3, #0
    1010:	d000      	beq.n	1014 <usart_init+0x21c>
    1012:	e775      	b.n	f00 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1014:	6a33      	ldr	r3, [r6, #32]
    1016:	001f      	movs	r7, r3
    1018:	b2c0      	uxtb	r0, r0
    101a:	4b40      	ldr	r3, [pc, #256]	; (111c <usart_init+0x324>)
    101c:	4798      	blx	r3
    101e:	0001      	movs	r1, r0
    1020:	220e      	movs	r2, #14
    1022:	ab06      	add	r3, sp, #24
    1024:	469c      	mov	ip, r3
    1026:	4462      	add	r2, ip
    1028:	0038      	movs	r0, r7
    102a:	4b3d      	ldr	r3, [pc, #244]	; (1120 <usart_init+0x328>)
    102c:	4798      	blx	r3
    102e:	e012      	b.n	1056 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1030:	2308      	movs	r3, #8
    1032:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1034:	2300      	movs	r3, #0
    1036:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1038:	2327      	movs	r3, #39	; 0x27
    103a:	5cf3      	ldrb	r3, [r6, r3]
    103c:	2b00      	cmp	r3, #0
    103e:	d00e      	beq.n	105e <usart_init+0x266>
				status_code =
    1040:	9b06      	ldr	r3, [sp, #24]
    1042:	9300      	str	r3, [sp, #0]
    1044:	9b07      	ldr	r3, [sp, #28]
    1046:	220e      	movs	r2, #14
    1048:	a906      	add	r1, sp, #24
    104a:	468c      	mov	ip, r1
    104c:	4462      	add	r2, ip
    104e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1050:	6a30      	ldr	r0, [r6, #32]
    1052:	4f34      	ldr	r7, [pc, #208]	; (1124 <usart_init+0x32c>)
    1054:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1056:	2800      	cmp	r0, #0
    1058:	d000      	beq.n	105c <usart_init+0x264>
    105a:	e6e0      	b.n	e1e <usart_init+0x26>
    105c:	e750      	b.n	f00 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    105e:	6a33      	ldr	r3, [r6, #32]
    1060:	001f      	movs	r7, r3
    1062:	b2c0      	uxtb	r0, r0
    1064:	4b2d      	ldr	r3, [pc, #180]	; (111c <usart_init+0x324>)
    1066:	4798      	blx	r3
    1068:	0001      	movs	r1, r0
				status_code =
    106a:	9b06      	ldr	r3, [sp, #24]
    106c:	9300      	str	r3, [sp, #0]
    106e:	9b07      	ldr	r3, [sp, #28]
    1070:	220e      	movs	r2, #14
    1072:	a806      	add	r0, sp, #24
    1074:	4684      	mov	ip, r0
    1076:	4462      	add	r2, ip
    1078:	0038      	movs	r0, r7
    107a:	4f2a      	ldr	r7, [pc, #168]	; (1124 <usart_init+0x32c>)
    107c:	47b8      	blx	r7
    107e:	e7ea      	b.n	1056 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1080:	7ef3      	ldrb	r3, [r6, #27]
    1082:	2b00      	cmp	r3, #0
    1084:	d100      	bne.n	1088 <usart_init+0x290>
    1086:	e77d      	b.n	f84 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1088:	2380      	movs	r3, #128	; 0x80
    108a:	04db      	lsls	r3, r3, #19
    108c:	431f      	orrs	r7, r3
    108e:	e779      	b.n	f84 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1090:	0020      	movs	r0, r4
    1092:	4b25      	ldr	r3, [pc, #148]	; (1128 <usart_init+0x330>)
    1094:	4798      	blx	r3
    1096:	e007      	b.n	10a8 <usart_init+0x2b0>
    1098:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    109a:	2f04      	cmp	r7, #4
    109c:	d00d      	beq.n	10ba <usart_init+0x2c2>
    109e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10a0:	00bb      	lsls	r3, r7, #2
    10a2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    10a4:	2800      	cmp	r0, #0
    10a6:	d0f3      	beq.n	1090 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    10a8:	1c43      	adds	r3, r0, #1
    10aa:	d0f5      	beq.n	1098 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10ac:	a90e      	add	r1, sp, #56	; 0x38
    10ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10b0:	0c00      	lsrs	r0, r0, #16
    10b2:	b2c0      	uxtb	r0, r0
    10b4:	4b1d      	ldr	r3, [pc, #116]	; (112c <usart_init+0x334>)
    10b6:	4798      	blx	r3
    10b8:	e7ee      	b.n	1098 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    10ba:	2300      	movs	r3, #0
    10bc:	60eb      	str	r3, [r5, #12]
    10be:	612b      	str	r3, [r5, #16]
    10c0:	616b      	str	r3, [r5, #20]
    10c2:	61ab      	str	r3, [r5, #24]
    10c4:	61eb      	str	r3, [r5, #28]
    10c6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    10c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    10ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    10cc:	2200      	movs	r2, #0
    10ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    10d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    10d2:	3330      	adds	r3, #48	; 0x30
    10d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    10d6:	3301      	adds	r3, #1
    10d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    10da:	3301      	adds	r3, #1
    10dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    10de:	3301      	adds	r3, #1
    10e0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10e2:	6828      	ldr	r0, [r5, #0]
    10e4:	4b07      	ldr	r3, [pc, #28]	; (1104 <usart_init+0x30c>)
    10e6:	4798      	blx	r3
    10e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    10ea:	4911      	ldr	r1, [pc, #68]	; (1130 <usart_init+0x338>)
    10ec:	4b11      	ldr	r3, [pc, #68]	; (1134 <usart_init+0x33c>)
    10ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10f0:	00a4      	lsls	r4, r4, #2
    10f2:	4b11      	ldr	r3, [pc, #68]	; (1138 <usart_init+0x340>)
    10f4:	50e5      	str	r5, [r4, r3]
	return status_code;
    10f6:	2000      	movs	r0, #0
    10f8:	e691      	b.n	e1e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10fa:	2310      	movs	r3, #16
    10fc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10fe:	2300      	movs	r3, #0
    1100:	9307      	str	r3, [sp, #28]
    1102:	e6e8      	b.n	ed6 <usart_init+0xde>
    1104:	00000cf1 	.word	0x00000cf1
    1108:	40000400 	.word	0x40000400
    110c:	000019b1 	.word	0x000019b1
    1110:	00001925 	.word	0x00001925
    1114:	00000b2d 	.word	0x00000b2d
    1118:	41002000 	.word	0x41002000
    111c:	000019cd 	.word	0x000019cd
    1120:	00000a6f 	.word	0x00000a6f
    1124:	00000a99 	.word	0x00000a99
    1128:	00000b79 	.word	0x00000b79
    112c:	00001aa9 	.word	0x00001aa9
    1130:	000011d9 	.word	0x000011d9
    1134:	00000d2d 	.word	0x00000d2d
    1138:	2000038c 	.word	0x2000038c

0000113c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    113c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    113e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1140:	2a00      	cmp	r2, #0
    1142:	d101      	bne.n	1148 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1144:	0018      	movs	r0, r3
    1146:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1148:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    114a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    114c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    114e:	2a00      	cmp	r2, #0
    1150:	d1f8      	bne.n	1144 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1152:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1154:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1156:	2a00      	cmp	r2, #0
    1158:	d1fc      	bne.n	1154 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    115a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    115c:	2102      	movs	r1, #2
    115e:	7e1a      	ldrb	r2, [r3, #24]
    1160:	420a      	tst	r2, r1
    1162:	d0fc      	beq.n	115e <usart_write_wait+0x22>
	return STATUS_OK;
    1164:	2300      	movs	r3, #0
    1166:	e7ed      	b.n	1144 <usart_write_wait+0x8>

00001168 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1168:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    116a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    116c:	2a00      	cmp	r2, #0
    116e:	d101      	bne.n	1174 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1170:	0018      	movs	r0, r3
    1172:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1174:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1176:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1178:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    117a:	2a00      	cmp	r2, #0
    117c:	d1f8      	bne.n	1170 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    117e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1180:	7e10      	ldrb	r0, [r2, #24]
    1182:	0740      	lsls	r0, r0, #29
    1184:	d5f4      	bpl.n	1170 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1186:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1188:	2b00      	cmp	r3, #0
    118a:	d1fc      	bne.n	1186 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    118c:	8b53      	ldrh	r3, [r2, #26]
    118e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1190:	0698      	lsls	r0, r3, #26
    1192:	d01d      	beq.n	11d0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1194:	0798      	lsls	r0, r3, #30
    1196:	d503      	bpl.n	11a0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1198:	2302      	movs	r3, #2
    119a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    119c:	3318      	adds	r3, #24
    119e:	e7e7      	b.n	1170 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    11a0:	0758      	lsls	r0, r3, #29
    11a2:	d503      	bpl.n	11ac <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    11a4:	2304      	movs	r3, #4
    11a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    11a8:	331a      	adds	r3, #26
    11aa:	e7e1      	b.n	1170 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    11ac:	07d8      	lsls	r0, r3, #31
    11ae:	d503      	bpl.n	11b8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    11b0:	2301      	movs	r3, #1
    11b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    11b4:	3312      	adds	r3, #18
    11b6:	e7db      	b.n	1170 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    11b8:	06d8      	lsls	r0, r3, #27
    11ba:	d503      	bpl.n	11c4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    11bc:	2310      	movs	r3, #16
    11be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    11c0:	3332      	adds	r3, #50	; 0x32
    11c2:	e7d5      	b.n	1170 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    11c4:	069b      	lsls	r3, r3, #26
    11c6:	d503      	bpl.n	11d0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    11c8:	2320      	movs	r3, #32
    11ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    11cc:	3321      	adds	r3, #33	; 0x21
    11ce:	e7cf      	b.n	1170 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    11d0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    11d2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    11d4:	2300      	movs	r3, #0
    11d6:	e7cb      	b.n	1170 <usart_read_wait+0x8>

000011d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11da:	0080      	lsls	r0, r0, #2
    11dc:	4b62      	ldr	r3, [pc, #392]	; (1368 <_usart_interrupt_handler+0x190>)
    11de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11e0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11e2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    11e4:	2b00      	cmp	r3, #0
    11e6:	d1fc      	bne.n	11e2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11ea:	7da6      	ldrb	r6, [r4, #22]
    11ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    11ee:	2330      	movs	r3, #48	; 0x30
    11f0:	5ceb      	ldrb	r3, [r5, r3]
    11f2:	2231      	movs	r2, #49	; 0x31
    11f4:	5caf      	ldrb	r7, [r5, r2]
    11f6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11f8:	07f3      	lsls	r3, r6, #31
    11fa:	d522      	bpl.n	1242 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    11fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11fe:	b29b      	uxth	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d01c      	beq.n	123e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1204:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1206:	7813      	ldrb	r3, [r2, #0]
    1208:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    120a:	1c51      	adds	r1, r2, #1
    120c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    120e:	7969      	ldrb	r1, [r5, #5]
    1210:	2901      	cmp	r1, #1
    1212:	d00e      	beq.n	1232 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1214:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1216:	05db      	lsls	r3, r3, #23
    1218:	0ddb      	lsrs	r3, r3, #23
    121a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    121c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    121e:	3b01      	subs	r3, #1
    1220:	b29b      	uxth	r3, r3
    1222:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1224:	2b00      	cmp	r3, #0
    1226:	d10c      	bne.n	1242 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1228:	3301      	adds	r3, #1
    122a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    122c:	3301      	adds	r3, #1
    122e:	75a3      	strb	r3, [r4, #22]
    1230:	e007      	b.n	1242 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1232:	7851      	ldrb	r1, [r2, #1]
    1234:	0209      	lsls	r1, r1, #8
    1236:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1238:	3202      	adds	r2, #2
    123a:	62aa      	str	r2, [r5, #40]	; 0x28
    123c:	e7eb      	b.n	1216 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    123e:	2301      	movs	r3, #1
    1240:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1242:	07b3      	lsls	r3, r6, #30
    1244:	d506      	bpl.n	1254 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1246:	2302      	movs	r3, #2
    1248:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    124a:	2200      	movs	r2, #0
    124c:	3331      	adds	r3, #49	; 0x31
    124e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1250:	07fb      	lsls	r3, r7, #31
    1252:	d41a      	bmi.n	128a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1254:	0773      	lsls	r3, r6, #29
    1256:	d565      	bpl.n	1324 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1258:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    125a:	b29b      	uxth	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	d05f      	beq.n	1320 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1260:	8b63      	ldrh	r3, [r4, #26]
    1262:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1264:	071a      	lsls	r2, r3, #28
    1266:	d414      	bmi.n	1292 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1268:	223f      	movs	r2, #63	; 0x3f
    126a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    126c:	2b00      	cmp	r3, #0
    126e:	d034      	beq.n	12da <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1270:	079a      	lsls	r2, r3, #30
    1272:	d511      	bpl.n	1298 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1274:	221a      	movs	r2, #26
    1276:	2332      	movs	r3, #50	; 0x32
    1278:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    127a:	3b30      	subs	r3, #48	; 0x30
    127c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    127e:	077b      	lsls	r3, r7, #29
    1280:	d550      	bpl.n	1324 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1282:	0028      	movs	r0, r5
    1284:	696b      	ldr	r3, [r5, #20]
    1286:	4798      	blx	r3
    1288:	e04c      	b.n	1324 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    128a:	0028      	movs	r0, r5
    128c:	68eb      	ldr	r3, [r5, #12]
    128e:	4798      	blx	r3
    1290:	e7e0      	b.n	1254 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1292:	2237      	movs	r2, #55	; 0x37
    1294:	4013      	ands	r3, r2
    1296:	e7e9      	b.n	126c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1298:	075a      	lsls	r2, r3, #29
    129a:	d505      	bpl.n	12a8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    129c:	221e      	movs	r2, #30
    129e:	2332      	movs	r3, #50	; 0x32
    12a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12a2:	3b2e      	subs	r3, #46	; 0x2e
    12a4:	8363      	strh	r3, [r4, #26]
    12a6:	e7ea      	b.n	127e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12a8:	07da      	lsls	r2, r3, #31
    12aa:	d505      	bpl.n	12b8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12ac:	2213      	movs	r2, #19
    12ae:	2332      	movs	r3, #50	; 0x32
    12b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12b2:	3b31      	subs	r3, #49	; 0x31
    12b4:	8363      	strh	r3, [r4, #26]
    12b6:	e7e2      	b.n	127e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12b8:	06da      	lsls	r2, r3, #27
    12ba:	d505      	bpl.n	12c8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    12bc:	2242      	movs	r2, #66	; 0x42
    12be:	2332      	movs	r3, #50	; 0x32
    12c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    12c2:	3b22      	subs	r3, #34	; 0x22
    12c4:	8363      	strh	r3, [r4, #26]
    12c6:	e7da      	b.n	127e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    12c8:	2220      	movs	r2, #32
    12ca:	421a      	tst	r2, r3
    12cc:	d0d7      	beq.n	127e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    12ce:	3221      	adds	r2, #33	; 0x21
    12d0:	2332      	movs	r3, #50	; 0x32
    12d2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    12d4:	3b12      	subs	r3, #18
    12d6:	8363      	strh	r3, [r4, #26]
    12d8:	e7d1      	b.n	127e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    12da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    12dc:	05db      	lsls	r3, r3, #23
    12de:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    12e0:	b2da      	uxtb	r2, r3
    12e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    12e4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12e8:	1c51      	adds	r1, r2, #1
    12ea:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12ec:	7969      	ldrb	r1, [r5, #5]
    12ee:	2901      	cmp	r1, #1
    12f0:	d010      	beq.n	1314 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12f4:	3b01      	subs	r3, #1
    12f6:	b29b      	uxth	r3, r3
    12f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    12fa:	2b00      	cmp	r3, #0
    12fc:	d112      	bne.n	1324 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12fe:	3304      	adds	r3, #4
    1300:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1302:	2200      	movs	r2, #0
    1304:	332e      	adds	r3, #46	; 0x2e
    1306:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1308:	07bb      	lsls	r3, r7, #30
    130a:	d50b      	bpl.n	1324 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    130c:	0028      	movs	r0, r5
    130e:	692b      	ldr	r3, [r5, #16]
    1310:	4798      	blx	r3
    1312:	e007      	b.n	1324 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1314:	0a1b      	lsrs	r3, r3, #8
    1316:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1318:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    131a:	3301      	adds	r3, #1
    131c:	626b      	str	r3, [r5, #36]	; 0x24
    131e:	e7e8      	b.n	12f2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1320:	2304      	movs	r3, #4
    1322:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1324:	06f3      	lsls	r3, r6, #27
    1326:	d504      	bpl.n	1332 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1328:	2310      	movs	r3, #16
    132a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    132c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    132e:	06fb      	lsls	r3, r7, #27
    1330:	d40e      	bmi.n	1350 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1332:	06b3      	lsls	r3, r6, #26
    1334:	d504      	bpl.n	1340 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1336:	2320      	movs	r3, #32
    1338:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    133a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    133c:	073b      	lsls	r3, r7, #28
    133e:	d40b      	bmi.n	1358 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1340:	0733      	lsls	r3, r6, #28
    1342:	d504      	bpl.n	134e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1344:	2308      	movs	r3, #8
    1346:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1348:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    134a:	06bb      	lsls	r3, r7, #26
    134c:	d408      	bmi.n	1360 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1350:	0028      	movs	r0, r5
    1352:	69eb      	ldr	r3, [r5, #28]
    1354:	4798      	blx	r3
    1356:	e7ec      	b.n	1332 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1358:	0028      	movs	r0, r5
    135a:	69ab      	ldr	r3, [r5, #24]
    135c:	4798      	blx	r3
    135e:	e7ef      	b.n	1340 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1360:	6a2b      	ldr	r3, [r5, #32]
    1362:	0028      	movs	r0, r5
    1364:	4798      	blx	r3
}
    1366:	e7f2      	b.n	134e <_usart_interrupt_handler+0x176>
    1368:	2000038c 	.word	0x2000038c

0000136c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    136c:	b510      	push	{r4, lr}
	switch (clock_source) {
    136e:	2808      	cmp	r0, #8
    1370:	d803      	bhi.n	137a <system_clock_source_get_hz+0xe>
    1372:	0080      	lsls	r0, r0, #2
    1374:	4b1b      	ldr	r3, [pc, #108]	; (13e4 <system_clock_source_get_hz+0x78>)
    1376:	581b      	ldr	r3, [r3, r0]
    1378:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    137a:	2000      	movs	r0, #0
    137c:	e030      	b.n	13e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    137e:	4b1a      	ldr	r3, [pc, #104]	; (13e8 <system_clock_source_get_hz+0x7c>)
    1380:	6918      	ldr	r0, [r3, #16]
    1382:	e02d      	b.n	13e0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1384:	4b19      	ldr	r3, [pc, #100]	; (13ec <system_clock_source_get_hz+0x80>)
    1386:	6a1b      	ldr	r3, [r3, #32]
    1388:	059b      	lsls	r3, r3, #22
    138a:	0f9b      	lsrs	r3, r3, #30
    138c:	4818      	ldr	r0, [pc, #96]	; (13f0 <system_clock_source_get_hz+0x84>)
    138e:	40d8      	lsrs	r0, r3
    1390:	e026      	b.n	13e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1392:	4b15      	ldr	r3, [pc, #84]	; (13e8 <system_clock_source_get_hz+0x7c>)
    1394:	6958      	ldr	r0, [r3, #20]
    1396:	e023      	b.n	13e0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1398:	4b13      	ldr	r3, [pc, #76]	; (13e8 <system_clock_source_get_hz+0x7c>)
    139a:	681b      	ldr	r3, [r3, #0]
			return 0;
    139c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    139e:	079b      	lsls	r3, r3, #30
    13a0:	d51e      	bpl.n	13e0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13a2:	4912      	ldr	r1, [pc, #72]	; (13ec <system_clock_source_get_hz+0x80>)
    13a4:	2210      	movs	r2, #16
    13a6:	68cb      	ldr	r3, [r1, #12]
    13a8:	421a      	tst	r2, r3
    13aa:	d0fc      	beq.n	13a6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <system_clock_source_get_hz+0x7c>)
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	075b      	lsls	r3, r3, #29
    13b2:	d401      	bmi.n	13b8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    13b4:	480f      	ldr	r0, [pc, #60]	; (13f4 <system_clock_source_get_hz+0x88>)
    13b6:	e013      	b.n	13e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13b8:	2000      	movs	r0, #0
    13ba:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <system_clock_source_get_hz+0x8c>)
    13bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    13be:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <system_clock_source_get_hz+0x7c>)
    13c0:	689b      	ldr	r3, [r3, #8]
    13c2:	041b      	lsls	r3, r3, #16
    13c4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13c6:	4358      	muls	r0, r3
    13c8:	e00a      	b.n	13e0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    13ca:	2350      	movs	r3, #80	; 0x50
    13cc:	4a07      	ldr	r2, [pc, #28]	; (13ec <system_clock_source_get_hz+0x80>)
    13ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    13d0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    13d2:	075b      	lsls	r3, r3, #29
    13d4:	d504      	bpl.n	13e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    13d6:	4b04      	ldr	r3, [pc, #16]	; (13e8 <system_clock_source_get_hz+0x7c>)
    13d8:	68d8      	ldr	r0, [r3, #12]
    13da:	e001      	b.n	13e0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    13dc:	2080      	movs	r0, #128	; 0x80
    13de:	0200      	lsls	r0, r0, #8
	}
}
    13e0:	bd10      	pop	{r4, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	000042b8 	.word	0x000042b8
    13e8:	20000254 	.word	0x20000254
    13ec:	40000800 	.word	0x40000800
    13f0:	007a1200 	.word	0x007a1200
    13f4:	02dc6c00 	.word	0x02dc6c00
    13f8:	000019cd 	.word	0x000019cd

000013fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    13fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    13fe:	490c      	ldr	r1, [pc, #48]	; (1430 <system_clock_source_osc8m_set_config+0x34>)
    1400:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1402:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1404:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1406:	7840      	ldrb	r0, [r0, #1]
    1408:	2201      	movs	r2, #1
    140a:	4010      	ands	r0, r2
    140c:	0180      	lsls	r0, r0, #6
    140e:	2640      	movs	r6, #64	; 0x40
    1410:	43b3      	bics	r3, r6
    1412:	4303      	orrs	r3, r0
    1414:	402a      	ands	r2, r5
    1416:	01d2      	lsls	r2, r2, #7
    1418:	2080      	movs	r0, #128	; 0x80
    141a:	4383      	bics	r3, r0
    141c:	4313      	orrs	r3, r2
    141e:	2203      	movs	r2, #3
    1420:	4022      	ands	r2, r4
    1422:	0212      	lsls	r2, r2, #8
    1424:	4803      	ldr	r0, [pc, #12]	; (1434 <system_clock_source_osc8m_set_config+0x38>)
    1426:	4003      	ands	r3, r0
    1428:	4313      	orrs	r3, r2
    142a:	620b      	str	r3, [r1, #32]
}
    142c:	bd70      	pop	{r4, r5, r6, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	40000800 	.word	0x40000800
    1434:	fffffcff 	.word	0xfffffcff

00001438 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1438:	b5f0      	push	{r4, r5, r6, r7, lr}
    143a:	46de      	mov	lr, fp
    143c:	4657      	mov	r7, sl
    143e:	464e      	mov	r6, r9
    1440:	4645      	mov	r5, r8
    1442:	b5e0      	push	{r5, r6, r7, lr}
    1444:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1446:	4b26      	ldr	r3, [pc, #152]	; (14e0 <system_clock_source_xosc32k_set_config+0xa8>)
    1448:	469b      	mov	fp, r3
    144a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    144c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    144e:	7800      	ldrb	r0, [r0, #0]
    1450:	4242      	negs	r2, r0
    1452:	4142      	adcs	r2, r0
    1454:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1456:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1458:	78ca      	ldrb	r2, [r1, #3]
    145a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    145c:	790a      	ldrb	r2, [r1, #4]
    145e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1460:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1462:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1464:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1466:	688a      	ldr	r2, [r1, #8]
    1468:	491e      	ldr	r1, [pc, #120]	; (14e4 <system_clock_source_xosc32k_set_config+0xac>)
    146a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    146c:	2101      	movs	r1, #1
    146e:	464a      	mov	r2, r9
    1470:	0092      	lsls	r2, r2, #2
    1472:	4691      	mov	r9, r2
    1474:	2204      	movs	r2, #4
    1476:	4393      	bics	r3, r2
    1478:	464a      	mov	r2, r9
    147a:	4313      	orrs	r3, r2
    147c:	4642      	mov	r2, r8
    147e:	400a      	ands	r2, r1
    1480:	00d2      	lsls	r2, r2, #3
    1482:	4690      	mov	r8, r2
    1484:	2208      	movs	r2, #8
    1486:	4393      	bics	r3, r2
    1488:	4642      	mov	r2, r8
    148a:	4313      	orrs	r3, r2
    148c:	4662      	mov	r2, ip
    148e:	400a      	ands	r2, r1
    1490:	0112      	lsls	r2, r2, #4
    1492:	4694      	mov	ip, r2
    1494:	2210      	movs	r2, #16
    1496:	4393      	bics	r3, r2
    1498:	4662      	mov	r2, ip
    149a:	4313      	orrs	r3, r2
    149c:	4008      	ands	r0, r1
    149e:	0140      	lsls	r0, r0, #5
    14a0:	2220      	movs	r2, #32
    14a2:	4393      	bics	r3, r2
    14a4:	4303      	orrs	r3, r0
    14a6:	400f      	ands	r7, r1
    14a8:	01bf      	lsls	r7, r7, #6
    14aa:	2040      	movs	r0, #64	; 0x40
    14ac:	4383      	bics	r3, r0
    14ae:	433b      	orrs	r3, r7
    14b0:	400e      	ands	r6, r1
    14b2:	01f6      	lsls	r6, r6, #7
    14b4:	3040      	adds	r0, #64	; 0x40
    14b6:	4383      	bics	r3, r0
    14b8:	4333      	orrs	r3, r6
    14ba:	3879      	subs	r0, #121	; 0x79
    14bc:	4005      	ands	r5, r0
    14be:	022d      	lsls	r5, r5, #8
    14c0:	4809      	ldr	r0, [pc, #36]	; (14e8 <system_clock_source_xosc32k_set_config+0xb0>)
    14c2:	4003      	ands	r3, r0
    14c4:	432b      	orrs	r3, r5
    14c6:	4021      	ands	r1, r4
    14c8:	0309      	lsls	r1, r1, #12
    14ca:	4808      	ldr	r0, [pc, #32]	; (14ec <system_clock_source_xosc32k_set_config+0xb4>)
    14cc:	4003      	ands	r3, r0
    14ce:	430b      	orrs	r3, r1
    14d0:	465a      	mov	r2, fp
    14d2:	8293      	strh	r3, [r2, #20]
}
    14d4:	bc3c      	pop	{r2, r3, r4, r5}
    14d6:	4690      	mov	r8, r2
    14d8:	4699      	mov	r9, r3
    14da:	46a2      	mov	sl, r4
    14dc:	46ab      	mov	fp, r5
    14de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e0:	40000800 	.word	0x40000800
    14e4:	20000254 	.word	0x20000254
    14e8:	fffff8ff 	.word	0xfffff8ff
    14ec:	ffffefff 	.word	0xffffefff

000014f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    14f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    14f2:	7a03      	ldrb	r3, [r0, #8]
    14f4:	069b      	lsls	r3, r3, #26
    14f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    14f8:	8942      	ldrh	r2, [r0, #10]
    14fa:	0592      	lsls	r2, r2, #22
    14fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    14fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1500:	4918      	ldr	r1, [pc, #96]	; (1564 <system_clock_source_dfll_set_config+0x74>)
    1502:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1504:	7983      	ldrb	r3, [r0, #6]
    1506:	79c2      	ldrb	r2, [r0, #7]
    1508:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    150a:	8842      	ldrh	r2, [r0, #2]
    150c:	8884      	ldrh	r4, [r0, #4]
    150e:	4322      	orrs	r2, r4
    1510:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1512:	7842      	ldrb	r2, [r0, #1]
    1514:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1516:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1518:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    151a:	7803      	ldrb	r3, [r0, #0]
    151c:	2b04      	cmp	r3, #4
    151e:	d011      	beq.n	1544 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1520:	2b20      	cmp	r3, #32
    1522:	d10e      	bne.n	1542 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1524:	7b03      	ldrb	r3, [r0, #12]
    1526:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1528:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    152a:	4313      	orrs	r3, r2
    152c:	89c2      	ldrh	r2, [r0, #14]
    152e:	0412      	lsls	r2, r2, #16
    1530:	490d      	ldr	r1, [pc, #52]	; (1568 <system_clock_source_dfll_set_config+0x78>)
    1532:	400a      	ands	r2, r1
    1534:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1536:	4a0b      	ldr	r2, [pc, #44]	; (1564 <system_clock_source_dfll_set_config+0x74>)
    1538:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    153a:	6811      	ldr	r1, [r2, #0]
    153c:	4b0b      	ldr	r3, [pc, #44]	; (156c <system_clock_source_dfll_set_config+0x7c>)
    153e:	430b      	orrs	r3, r1
    1540:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1542:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1544:	7b03      	ldrb	r3, [r0, #12]
    1546:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1548:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    154a:	4313      	orrs	r3, r2
    154c:	89c2      	ldrh	r2, [r0, #14]
    154e:	0412      	lsls	r2, r2, #16
    1550:	4905      	ldr	r1, [pc, #20]	; (1568 <system_clock_source_dfll_set_config+0x78>)
    1552:	400a      	ands	r2, r1
    1554:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1556:	4a03      	ldr	r2, [pc, #12]	; (1564 <system_clock_source_dfll_set_config+0x74>)
    1558:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    155a:	6813      	ldr	r3, [r2, #0]
    155c:	2104      	movs	r1, #4
    155e:	430b      	orrs	r3, r1
    1560:	6013      	str	r3, [r2, #0]
    1562:	e7ee      	b.n	1542 <system_clock_source_dfll_set_config+0x52>
    1564:	20000254 	.word	0x20000254
    1568:	03ff0000 	.word	0x03ff0000
    156c:	00000424 	.word	0x00000424

00001570 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1570:	2808      	cmp	r0, #8
    1572:	d803      	bhi.n	157c <system_clock_source_enable+0xc>
    1574:	0080      	lsls	r0, r0, #2
    1576:	4b25      	ldr	r3, [pc, #148]	; (160c <system_clock_source_enable+0x9c>)
    1578:	581b      	ldr	r3, [r3, r0]
    157a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    157c:	2017      	movs	r0, #23
    157e:	e044      	b.n	160a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1580:	4a23      	ldr	r2, [pc, #140]	; (1610 <system_clock_source_enable+0xa0>)
    1582:	6a13      	ldr	r3, [r2, #32]
    1584:	2102      	movs	r1, #2
    1586:	430b      	orrs	r3, r1
    1588:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    158a:	2000      	movs	r0, #0
    158c:	e03d      	b.n	160a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    158e:	4a20      	ldr	r2, [pc, #128]	; (1610 <system_clock_source_enable+0xa0>)
    1590:	6993      	ldr	r3, [r2, #24]
    1592:	2102      	movs	r1, #2
    1594:	430b      	orrs	r3, r1
    1596:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1598:	2000      	movs	r0, #0
		break;
    159a:	e036      	b.n	160a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    159c:	4a1c      	ldr	r2, [pc, #112]	; (1610 <system_clock_source_enable+0xa0>)
    159e:	8a13      	ldrh	r3, [r2, #16]
    15a0:	2102      	movs	r1, #2
    15a2:	430b      	orrs	r3, r1
    15a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    15a6:	2000      	movs	r0, #0
		break;
    15a8:	e02f      	b.n	160a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    15aa:	4a19      	ldr	r2, [pc, #100]	; (1610 <system_clock_source_enable+0xa0>)
    15ac:	8a93      	ldrh	r3, [r2, #20]
    15ae:	2102      	movs	r1, #2
    15b0:	430b      	orrs	r3, r1
    15b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    15b4:	2000      	movs	r0, #0
		break;
    15b6:	e028      	b.n	160a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    15b8:	4916      	ldr	r1, [pc, #88]	; (1614 <system_clock_source_enable+0xa4>)
    15ba:	680b      	ldr	r3, [r1, #0]
    15bc:	2202      	movs	r2, #2
    15be:	4313      	orrs	r3, r2
    15c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    15c2:	4b13      	ldr	r3, [pc, #76]	; (1610 <system_clock_source_enable+0xa0>)
    15c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15c6:	0019      	movs	r1, r3
    15c8:	320e      	adds	r2, #14
    15ca:	68cb      	ldr	r3, [r1, #12]
    15cc:	421a      	tst	r2, r3
    15ce:	d0fc      	beq.n	15ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    15d0:	4a10      	ldr	r2, [pc, #64]	; (1614 <system_clock_source_enable+0xa4>)
    15d2:	6891      	ldr	r1, [r2, #8]
    15d4:	4b0e      	ldr	r3, [pc, #56]	; (1610 <system_clock_source_enable+0xa0>)
    15d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    15d8:	6852      	ldr	r2, [r2, #4]
    15da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    15dc:	2200      	movs	r2, #0
    15de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15e0:	0019      	movs	r1, r3
    15e2:	3210      	adds	r2, #16
    15e4:	68cb      	ldr	r3, [r1, #12]
    15e6:	421a      	tst	r2, r3
    15e8:	d0fc      	beq.n	15e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    15ea:	4b0a      	ldr	r3, [pc, #40]	; (1614 <system_clock_source_enable+0xa4>)
    15ec:	681b      	ldr	r3, [r3, #0]
    15ee:	b29b      	uxth	r3, r3
    15f0:	4a07      	ldr	r2, [pc, #28]	; (1610 <system_clock_source_enable+0xa0>)
    15f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    15f4:	2000      	movs	r0, #0
    15f6:	e008      	b.n	160a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    15f8:	4905      	ldr	r1, [pc, #20]	; (1610 <system_clock_source_enable+0xa0>)
    15fa:	2244      	movs	r2, #68	; 0x44
    15fc:	5c8b      	ldrb	r3, [r1, r2]
    15fe:	2002      	movs	r0, #2
    1600:	4303      	orrs	r3, r0
    1602:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1604:	2000      	movs	r0, #0
		break;
    1606:	e000      	b.n	160a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1608:	2000      	movs	r0, #0
}
    160a:	4770      	bx	lr
    160c:	000042dc 	.word	0x000042dc
    1610:	40000800 	.word	0x40000800
    1614:	20000254 	.word	0x20000254

00001618 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    161c:	22c2      	movs	r2, #194	; 0xc2
    161e:	00d2      	lsls	r2, r2, #3
    1620:	4b47      	ldr	r3, [pc, #284]	; (1740 <system_clock_init+0x128>)
    1622:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1624:	4a47      	ldr	r2, [pc, #284]	; (1744 <system_clock_init+0x12c>)
    1626:	6853      	ldr	r3, [r2, #4]
    1628:	211e      	movs	r1, #30
    162a:	438b      	bics	r3, r1
    162c:	391a      	subs	r1, #26
    162e:	430b      	orrs	r3, r1
    1630:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1632:	2202      	movs	r2, #2
    1634:	ab01      	add	r3, sp, #4
    1636:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1638:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    163a:	4d43      	ldr	r5, [pc, #268]	; (1748 <system_clock_init+0x130>)
    163c:	b2e0      	uxtb	r0, r4
    163e:	a901      	add	r1, sp, #4
    1640:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1642:	3401      	adds	r4, #1
    1644:	2c25      	cmp	r4, #37	; 0x25
    1646:	d1f9      	bne.n	163c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1648:	a80a      	add	r0, sp, #40	; 0x28
    164a:	2300      	movs	r3, #0
    164c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    164e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1650:	2280      	movs	r2, #128	; 0x80
    1652:	0212      	lsls	r2, r2, #8
    1654:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1656:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1658:	2201      	movs	r2, #1
    165a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    165c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    165e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1660:	3202      	adds	r2, #2
    1662:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1664:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1666:	4b39      	ldr	r3, [pc, #228]	; (174c <system_clock_init+0x134>)
    1668:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    166a:	2005      	movs	r0, #5
    166c:	4b38      	ldr	r3, [pc, #224]	; (1750 <system_clock_init+0x138>)
    166e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1670:	4933      	ldr	r1, [pc, #204]	; (1740 <system_clock_init+0x128>)
    1672:	2202      	movs	r2, #2
    1674:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1676:	421a      	tst	r2, r3
    1678:	d0fc      	beq.n	1674 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    167a:	4a31      	ldr	r2, [pc, #196]	; (1740 <system_clock_init+0x128>)
    167c:	8a93      	ldrh	r3, [r2, #20]
    167e:	2180      	movs	r1, #128	; 0x80
    1680:	430b      	orrs	r3, r1
    1682:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1684:	ab05      	add	r3, sp, #20
    1686:	2100      	movs	r1, #0
    1688:	2200      	movs	r2, #0
    168a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    168c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    168e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1690:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1692:	313f      	adds	r1, #63	; 0x3f
    1694:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1696:	393b      	subs	r1, #59	; 0x3b
    1698:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    169a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    169c:	4b2d      	ldr	r3, [pc, #180]	; (1754 <system_clock_init+0x13c>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    16a2:	2b3f      	cmp	r3, #63	; 0x3f
    16a4:	d04a      	beq.n	173c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    16a6:	a805      	add	r0, sp, #20
    16a8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    16aa:	4b2b      	ldr	r3, [pc, #172]	; (1758 <system_clock_init+0x140>)
    16ac:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    16ae:	2307      	movs	r3, #7
    16b0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    16b2:	3338      	adds	r3, #56	; 0x38
    16b4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    16b6:	4b29      	ldr	r3, [pc, #164]	; (175c <system_clock_init+0x144>)
    16b8:	4798      	blx	r3
	config->run_in_standby  = false;
    16ba:	a804      	add	r0, sp, #16
    16bc:	2500      	movs	r5, #0
    16be:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    16c0:	2601      	movs	r6, #1
    16c2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16c4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    16c6:	4b26      	ldr	r3, [pc, #152]	; (1760 <system_clock_init+0x148>)
    16c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    16ca:	2006      	movs	r0, #6
    16cc:	4f20      	ldr	r7, [pc, #128]	; (1750 <system_clock_init+0x138>)
    16ce:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    16d0:	4b24      	ldr	r3, [pc, #144]	; (1764 <system_clock_init+0x14c>)
    16d2:	4798      	blx	r3
	config->division_factor    = 1;
    16d4:	ac01      	add	r4, sp, #4
    16d6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    16d8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    16da:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    16dc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    16de:	2305      	movs	r3, #5
    16e0:	7023      	strb	r3, [r4, #0]
    16e2:	0021      	movs	r1, r4
    16e4:	2001      	movs	r0, #1
    16e6:	4b20      	ldr	r3, [pc, #128]	; (1768 <system_clock_init+0x150>)
    16e8:	4798      	blx	r3
    16ea:	2001      	movs	r0, #1
    16ec:	4b1f      	ldr	r3, [pc, #124]	; (176c <system_clock_init+0x154>)
    16ee:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    16f0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    16f2:	0021      	movs	r1, r4
    16f4:	2000      	movs	r0, #0
    16f6:	4b14      	ldr	r3, [pc, #80]	; (1748 <system_clock_init+0x130>)
    16f8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    16fa:	2000      	movs	r0, #0
    16fc:	4b1c      	ldr	r3, [pc, #112]	; (1770 <system_clock_init+0x158>)
    16fe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1700:	2007      	movs	r0, #7
    1702:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1704:	490e      	ldr	r1, [pc, #56]	; (1740 <system_clock_init+0x128>)
    1706:	22d0      	movs	r2, #208	; 0xd0
    1708:	68cb      	ldr	r3, [r1, #12]
    170a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    170c:	2bd0      	cmp	r3, #208	; 0xd0
    170e:	d1fb      	bne.n	1708 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1710:	4a18      	ldr	r2, [pc, #96]	; (1774 <system_clock_init+0x15c>)
    1712:	2300      	movs	r3, #0
    1714:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1716:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1718:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    171a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    171c:	a901      	add	r1, sp, #4
    171e:	2201      	movs	r2, #1
    1720:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1722:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1724:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1726:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1728:	3307      	adds	r3, #7
    172a:	700b      	strb	r3, [r1, #0]
    172c:	2000      	movs	r0, #0
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <system_clock_init+0x150>)
    1730:	4798      	blx	r3
    1732:	2000      	movs	r0, #0
    1734:	4b0d      	ldr	r3, [pc, #52]	; (176c <system_clock_init+0x154>)
    1736:	4798      	blx	r3
#endif
}
    1738:	b00f      	add	sp, #60	; 0x3c
    173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    173c:	3b20      	subs	r3, #32
    173e:	e7b2      	b.n	16a6 <system_clock_init+0x8e>
    1740:	40000800 	.word	0x40000800
    1744:	41004000 	.word	0x41004000
    1748:	000019b1 	.word	0x000019b1
    174c:	00001439 	.word	0x00001439
    1750:	00001571 	.word	0x00001571
    1754:	00806024 	.word	0x00806024
    1758:	000005b9 	.word	0x000005b9
    175c:	000014f1 	.word	0x000014f1
    1760:	000013fd 	.word	0x000013fd
    1764:	00001779 	.word	0x00001779
    1768:	0000179d 	.word	0x0000179d
    176c:	00001855 	.word	0x00001855
    1770:	00001925 	.word	0x00001925
    1774:	40000400 	.word	0x40000400

00001778 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1778:	4a06      	ldr	r2, [pc, #24]	; (1794 <system_gclk_init+0x1c>)
    177a:	6993      	ldr	r3, [r2, #24]
    177c:	2108      	movs	r1, #8
    177e:	430b      	orrs	r3, r1
    1780:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1782:	2201      	movs	r2, #1
    1784:	4b04      	ldr	r3, [pc, #16]	; (1798 <system_gclk_init+0x20>)
    1786:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1788:	0019      	movs	r1, r3
    178a:	780b      	ldrb	r3, [r1, #0]
    178c:	4213      	tst	r3, r2
    178e:	d1fc      	bne.n	178a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1790:	4770      	bx	lr
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	40000400 	.word	0x40000400
    1798:	40000c00 	.word	0x40000c00

0000179c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    179c:	b570      	push	{r4, r5, r6, lr}
    179e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    17a0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17a2:	780d      	ldrb	r5, [r1, #0]
    17a4:	022d      	lsls	r5, r5, #8
    17a6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    17a8:	784b      	ldrb	r3, [r1, #1]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d002      	beq.n	17b4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    17ae:	2380      	movs	r3, #128	; 0x80
    17b0:	02db      	lsls	r3, r3, #11
    17b2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    17b4:	7a4b      	ldrb	r3, [r1, #9]
    17b6:	2b00      	cmp	r3, #0
    17b8:	d002      	beq.n	17c0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    17ba:	2380      	movs	r3, #128	; 0x80
    17bc:	031b      	lsls	r3, r3, #12
    17be:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    17c0:	6848      	ldr	r0, [r1, #4]
    17c2:	2801      	cmp	r0, #1
    17c4:	d910      	bls.n	17e8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17c6:	1e43      	subs	r3, r0, #1
    17c8:	4218      	tst	r0, r3
    17ca:	d134      	bne.n	1836 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17cc:	2802      	cmp	r0, #2
    17ce:	d930      	bls.n	1832 <system_gclk_gen_set_config+0x96>
    17d0:	2302      	movs	r3, #2
    17d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    17d4:	3201      	adds	r2, #1
						mask <<= 1) {
    17d6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    17d8:	4298      	cmp	r0, r3
    17da:	d8fb      	bhi.n	17d4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17dc:	0212      	lsls	r2, r2, #8
    17de:	4332      	orrs	r2, r6
    17e0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17e2:	2380      	movs	r3, #128	; 0x80
    17e4:	035b      	lsls	r3, r3, #13
    17e6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17e8:	7a0b      	ldrb	r3, [r1, #8]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d002      	beq.n	17f4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17ee:	2380      	movs	r3, #128	; 0x80
    17f0:	039b      	lsls	r3, r3, #14
    17f2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17f4:	4a13      	ldr	r2, [pc, #76]	; (1844 <system_gclk_gen_set_config+0xa8>)
    17f6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    17f8:	b25b      	sxtb	r3, r3
    17fa:	2b00      	cmp	r3, #0
    17fc:	dbfb      	blt.n	17f6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    17fe:	4b12      	ldr	r3, [pc, #72]	; (1848 <system_gclk_gen_set_config+0xac>)
    1800:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1802:	4b12      	ldr	r3, [pc, #72]	; (184c <system_gclk_gen_set_config+0xb0>)
    1804:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1806:	4a0f      	ldr	r2, [pc, #60]	; (1844 <system_gclk_gen_set_config+0xa8>)
    1808:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    180a:	b25b      	sxtb	r3, r3
    180c:	2b00      	cmp	r3, #0
    180e:	dbfb      	blt.n	1808 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1810:	4b0c      	ldr	r3, [pc, #48]	; (1844 <system_gclk_gen_set_config+0xa8>)
    1812:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1814:	001a      	movs	r2, r3
    1816:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1818:	b25b      	sxtb	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	dbfb      	blt.n	1816 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    181e:	4a09      	ldr	r2, [pc, #36]	; (1844 <system_gclk_gen_set_config+0xa8>)
    1820:	6853      	ldr	r3, [r2, #4]
    1822:	2180      	movs	r1, #128	; 0x80
    1824:	0249      	lsls	r1, r1, #9
    1826:	400b      	ands	r3, r1
    1828:	431d      	orrs	r5, r3
    182a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    182c:	4b08      	ldr	r3, [pc, #32]	; (1850 <system_gclk_gen_set_config+0xb4>)
    182e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1830:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1832:	2200      	movs	r2, #0
    1834:	e7d2      	b.n	17dc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1836:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1838:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    183a:	2380      	movs	r3, #128	; 0x80
    183c:	029b      	lsls	r3, r3, #10
    183e:	431d      	orrs	r5, r3
    1840:	e7d2      	b.n	17e8 <system_gclk_gen_set_config+0x4c>
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	40000c00 	.word	0x40000c00
    1848:	00000811 	.word	0x00000811
    184c:	40000c08 	.word	0x40000c08
    1850:	00000851 	.word	0x00000851

00001854 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1854:	b510      	push	{r4, lr}
    1856:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1858:	4a0b      	ldr	r2, [pc, #44]	; (1888 <system_gclk_gen_enable+0x34>)
    185a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    185c:	b25b      	sxtb	r3, r3
    185e:	2b00      	cmp	r3, #0
    1860:	dbfb      	blt.n	185a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1862:	4b0a      	ldr	r3, [pc, #40]	; (188c <system_gclk_gen_enable+0x38>)
    1864:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1866:	4b0a      	ldr	r3, [pc, #40]	; (1890 <system_gclk_gen_enable+0x3c>)
    1868:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    186a:	4a07      	ldr	r2, [pc, #28]	; (1888 <system_gclk_gen_enable+0x34>)
    186c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    186e:	b25b      	sxtb	r3, r3
    1870:	2b00      	cmp	r3, #0
    1872:	dbfb      	blt.n	186c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1874:	4a04      	ldr	r2, [pc, #16]	; (1888 <system_gclk_gen_enable+0x34>)
    1876:	6851      	ldr	r1, [r2, #4]
    1878:	2380      	movs	r3, #128	; 0x80
    187a:	025b      	lsls	r3, r3, #9
    187c:	430b      	orrs	r3, r1
    187e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1880:	4b04      	ldr	r3, [pc, #16]	; (1894 <system_gclk_gen_enable+0x40>)
    1882:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1884:	bd10      	pop	{r4, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	40000c00 	.word	0x40000c00
    188c:	00000811 	.word	0x00000811
    1890:	40000c04 	.word	0x40000c04
    1894:	00000851 	.word	0x00000851

00001898 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1898:	b570      	push	{r4, r5, r6, lr}
    189a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    189c:	4a1a      	ldr	r2, [pc, #104]	; (1908 <system_gclk_gen_get_hz+0x70>)
    189e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18a0:	b25b      	sxtb	r3, r3
    18a2:	2b00      	cmp	r3, #0
    18a4:	dbfb      	blt.n	189e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    18a6:	4b19      	ldr	r3, [pc, #100]	; (190c <system_gclk_gen_get_hz+0x74>)
    18a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18aa:	4b19      	ldr	r3, [pc, #100]	; (1910 <system_gclk_gen_get_hz+0x78>)
    18ac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ae:	4a16      	ldr	r2, [pc, #88]	; (1908 <system_gclk_gen_get_hz+0x70>)
    18b0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18b2:	b25b      	sxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	dbfb      	blt.n	18b0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    18b8:	4e13      	ldr	r6, [pc, #76]	; (1908 <system_gclk_gen_get_hz+0x70>)
    18ba:	6870      	ldr	r0, [r6, #4]
    18bc:	04c0      	lsls	r0, r0, #19
    18be:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18c0:	4b14      	ldr	r3, [pc, #80]	; (1914 <system_gclk_gen_get_hz+0x7c>)
    18c2:	4798      	blx	r3
    18c4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18c6:	4b12      	ldr	r3, [pc, #72]	; (1910 <system_gclk_gen_get_hz+0x78>)
    18c8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18ca:	6876      	ldr	r6, [r6, #4]
    18cc:	02f6      	lsls	r6, r6, #11
    18ce:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18d0:	4b11      	ldr	r3, [pc, #68]	; (1918 <system_gclk_gen_get_hz+0x80>)
    18d2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18d4:	4a0c      	ldr	r2, [pc, #48]	; (1908 <system_gclk_gen_get_hz+0x70>)
    18d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18d8:	b25b      	sxtb	r3, r3
    18da:	2b00      	cmp	r3, #0
    18dc:	dbfb      	blt.n	18d6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18de:	4b0a      	ldr	r3, [pc, #40]	; (1908 <system_gclk_gen_get_hz+0x70>)
    18e0:	689c      	ldr	r4, [r3, #8]
    18e2:	0224      	lsls	r4, r4, #8
    18e4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    18e6:	4b0d      	ldr	r3, [pc, #52]	; (191c <system_gclk_gen_get_hz+0x84>)
    18e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18ea:	2e00      	cmp	r6, #0
    18ec:	d107      	bne.n	18fe <system_gclk_gen_get_hz+0x66>
    18ee:	2c01      	cmp	r4, #1
    18f0:	d907      	bls.n	1902 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18f2:	0021      	movs	r1, r4
    18f4:	0028      	movs	r0, r5
    18f6:	4b0a      	ldr	r3, [pc, #40]	; (1920 <system_gclk_gen_get_hz+0x88>)
    18f8:	4798      	blx	r3
    18fa:	0005      	movs	r5, r0
    18fc:	e001      	b.n	1902 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18fe:	3401      	adds	r4, #1
    1900:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1902:	0028      	movs	r0, r5
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	40000c00 	.word	0x40000c00
    190c:	00000811 	.word	0x00000811
    1910:	40000c04 	.word	0x40000c04
    1914:	0000136d 	.word	0x0000136d
    1918:	40000c08 	.word	0x40000c08
    191c:	00000851 	.word	0x00000851
    1920:	00001e51 	.word	0x00001e51

00001924 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1924:	b510      	push	{r4, lr}
    1926:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <system_gclk_chan_enable+0x20>)
    192a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    192c:	4b06      	ldr	r3, [pc, #24]	; (1948 <system_gclk_chan_enable+0x24>)
    192e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1930:	4a06      	ldr	r2, [pc, #24]	; (194c <system_gclk_chan_enable+0x28>)
    1932:	8853      	ldrh	r3, [r2, #2]
    1934:	2180      	movs	r1, #128	; 0x80
    1936:	01c9      	lsls	r1, r1, #7
    1938:	430b      	orrs	r3, r1
    193a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <system_gclk_chan_enable+0x2c>)
    193e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1940:	bd10      	pop	{r4, pc}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	00000811 	.word	0x00000811
    1948:	40000c02 	.word	0x40000c02
    194c:	40000c00 	.word	0x40000c00
    1950:	00000851 	.word	0x00000851

00001954 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1954:	b510      	push	{r4, lr}
    1956:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1958:	4b0f      	ldr	r3, [pc, #60]	; (1998 <system_gclk_chan_disable+0x44>)
    195a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    195c:	4b0f      	ldr	r3, [pc, #60]	; (199c <system_gclk_chan_disable+0x48>)
    195e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1960:	4a0f      	ldr	r2, [pc, #60]	; (19a0 <system_gclk_chan_disable+0x4c>)
    1962:	8853      	ldrh	r3, [r2, #2]
    1964:	051b      	lsls	r3, r3, #20
    1966:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1968:	8853      	ldrh	r3, [r2, #2]
    196a:	490e      	ldr	r1, [pc, #56]	; (19a4 <system_gclk_chan_disable+0x50>)
    196c:	400b      	ands	r3, r1
    196e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1970:	8853      	ldrh	r3, [r2, #2]
    1972:	490d      	ldr	r1, [pc, #52]	; (19a8 <system_gclk_chan_disable+0x54>)
    1974:	400b      	ands	r3, r1
    1976:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1978:	0011      	movs	r1, r2
    197a:	2280      	movs	r2, #128	; 0x80
    197c:	01d2      	lsls	r2, r2, #7
    197e:	884b      	ldrh	r3, [r1, #2]
    1980:	4213      	tst	r3, r2
    1982:	d1fc      	bne.n	197e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1984:	4906      	ldr	r1, [pc, #24]	; (19a0 <system_gclk_chan_disable+0x4c>)
    1986:	884a      	ldrh	r2, [r1, #2]
    1988:	0203      	lsls	r3, r0, #8
    198a:	4806      	ldr	r0, [pc, #24]	; (19a4 <system_gclk_chan_disable+0x50>)
    198c:	4002      	ands	r2, r0
    198e:	4313      	orrs	r3, r2
    1990:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1992:	4b06      	ldr	r3, [pc, #24]	; (19ac <system_gclk_chan_disable+0x58>)
    1994:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1996:	bd10      	pop	{r4, pc}
    1998:	00000811 	.word	0x00000811
    199c:	40000c02 	.word	0x40000c02
    19a0:	40000c00 	.word	0x40000c00
    19a4:	fffff0ff 	.word	0xfffff0ff
    19a8:	ffffbfff 	.word	0xffffbfff
    19ac:	00000851 	.word	0x00000851

000019b0 <system_gclk_chan_set_config>:
{
    19b0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    19b2:	780c      	ldrb	r4, [r1, #0]
    19b4:	0224      	lsls	r4, r4, #8
    19b6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    19b8:	4b02      	ldr	r3, [pc, #8]	; (19c4 <system_gclk_chan_set_config+0x14>)
    19ba:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    19bc:	b2a4      	uxth	r4, r4
    19be:	4b02      	ldr	r3, [pc, #8]	; (19c8 <system_gclk_chan_set_config+0x18>)
    19c0:	805c      	strh	r4, [r3, #2]
}
    19c2:	bd10      	pop	{r4, pc}
    19c4:	00001955 	.word	0x00001955
    19c8:	40000c00 	.word	0x40000c00

000019cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19cc:	b510      	push	{r4, lr}
    19ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19d0:	4b06      	ldr	r3, [pc, #24]	; (19ec <system_gclk_chan_get_hz+0x20>)
    19d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <system_gclk_chan_get_hz+0x24>)
    19d6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <system_gclk_chan_get_hz+0x28>)
    19da:	885c      	ldrh	r4, [r3, #2]
    19dc:	0524      	lsls	r4, r4, #20
    19de:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    19e0:	4b05      	ldr	r3, [pc, #20]	; (19f8 <system_gclk_chan_get_hz+0x2c>)
    19e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19e4:	0020      	movs	r0, r4
    19e6:	4b05      	ldr	r3, [pc, #20]	; (19fc <system_gclk_chan_get_hz+0x30>)
    19e8:	4798      	blx	r3
}
    19ea:	bd10      	pop	{r4, pc}
    19ec:	00000811 	.word	0x00000811
    19f0:	40000c02 	.word	0x40000c02
    19f4:	40000c00 	.word	0x40000c00
    19f8:	00000851 	.word	0x00000851
    19fc:	00001899 	.word	0x00001899

00001a00 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a00:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a02:	78d3      	ldrb	r3, [r2, #3]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d135      	bne.n	1a74 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a08:	7813      	ldrb	r3, [r2, #0]
    1a0a:	2b80      	cmp	r3, #128	; 0x80
    1a0c:	d029      	beq.n	1a62 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a0e:	061b      	lsls	r3, r3, #24
    1a10:	2480      	movs	r4, #128	; 0x80
    1a12:	0264      	lsls	r4, r4, #9
    1a14:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a16:	7854      	ldrb	r4, [r2, #1]
    1a18:	2502      	movs	r5, #2
    1a1a:	43ac      	bics	r4, r5
    1a1c:	d106      	bne.n	1a2c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a1e:	7894      	ldrb	r4, [r2, #2]
    1a20:	2c00      	cmp	r4, #0
    1a22:	d120      	bne.n	1a66 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a24:	2480      	movs	r4, #128	; 0x80
    1a26:	02a4      	lsls	r4, r4, #10
    1a28:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a2a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a2c:	7854      	ldrb	r4, [r2, #1]
    1a2e:	3c01      	subs	r4, #1
    1a30:	2c01      	cmp	r4, #1
    1a32:	d91c      	bls.n	1a6e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a34:	040d      	lsls	r5, r1, #16
    1a36:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a38:	24a0      	movs	r4, #160	; 0xa0
    1a3a:	05e4      	lsls	r4, r4, #23
    1a3c:	432c      	orrs	r4, r5
    1a3e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a40:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a42:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a44:	24d0      	movs	r4, #208	; 0xd0
    1a46:	0624      	lsls	r4, r4, #24
    1a48:	432c      	orrs	r4, r5
    1a4a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a4c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a4e:	78d4      	ldrb	r4, [r2, #3]
    1a50:	2c00      	cmp	r4, #0
    1a52:	d122      	bne.n	1a9a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a54:	035b      	lsls	r3, r3, #13
    1a56:	d51c      	bpl.n	1a92 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a58:	7893      	ldrb	r3, [r2, #2]
    1a5a:	2b01      	cmp	r3, #1
    1a5c:	d01e      	beq.n	1a9c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1a5e:	6141      	str	r1, [r0, #20]
    1a60:	e017      	b.n	1a92 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1a62:	2300      	movs	r3, #0
    1a64:	e7d7      	b.n	1a16 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a66:	24c0      	movs	r4, #192	; 0xc0
    1a68:	02e4      	lsls	r4, r4, #11
    1a6a:	4323      	orrs	r3, r4
    1a6c:	e7dd      	b.n	1a2a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a6e:	4c0d      	ldr	r4, [pc, #52]	; (1aa4 <_system_pinmux_config+0xa4>)
    1a70:	4023      	ands	r3, r4
    1a72:	e7df      	b.n	1a34 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1a74:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a76:	040c      	lsls	r4, r1, #16
    1a78:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a7a:	23a0      	movs	r3, #160	; 0xa0
    1a7c:	05db      	lsls	r3, r3, #23
    1a7e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a80:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a82:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a84:	23d0      	movs	r3, #208	; 0xd0
    1a86:	061b      	lsls	r3, r3, #24
    1a88:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a8a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1a8c:	78d3      	ldrb	r3, [r2, #3]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d103      	bne.n	1a9a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a92:	7853      	ldrb	r3, [r2, #1]
    1a94:	3b01      	subs	r3, #1
    1a96:	2b01      	cmp	r3, #1
    1a98:	d902      	bls.n	1aa0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1a9a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1a9c:	6181      	str	r1, [r0, #24]
    1a9e:	e7f8      	b.n	1a92 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1aa0:	6081      	str	r1, [r0, #8]
}
    1aa2:	e7fa      	b.n	1a9a <_system_pinmux_config+0x9a>
    1aa4:	fffbffff 	.word	0xfffbffff

00001aa8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1aa8:	b510      	push	{r4, lr}
    1aaa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1aac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1aae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1ab0:	2900      	cmp	r1, #0
    1ab2:	d104      	bne.n	1abe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1ab4:	0943      	lsrs	r3, r0, #5
    1ab6:	01db      	lsls	r3, r3, #7
    1ab8:	4905      	ldr	r1, [pc, #20]	; (1ad0 <system_pinmux_pin_set_config+0x28>)
    1aba:	468c      	mov	ip, r1
    1abc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1abe:	241f      	movs	r4, #31
    1ac0:	4020      	ands	r0, r4
    1ac2:	2101      	movs	r1, #1
    1ac4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <system_pinmux_pin_set_config+0x2c>)
    1aca:	4798      	blx	r3
}
    1acc:	bd10      	pop	{r4, pc}
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	41004400 	.word	0x41004400
    1ad4:	00001a01 	.word	0x00001a01

00001ad8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ad8:	4770      	bx	lr
	...

00001adc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1adc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <system_init+0x18>)
    1ae0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <system_init+0x1c>)
    1ae4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ae6:	4b05      	ldr	r3, [pc, #20]	; (1afc <system_init+0x20>)
    1ae8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1aea:	4b05      	ldr	r3, [pc, #20]	; (1b00 <system_init+0x24>)
    1aec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1aee:	4b05      	ldr	r3, [pc, #20]	; (1b04 <system_init+0x28>)
    1af0:	4798      	blx	r3
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	00001619 	.word	0x00001619
    1af8:	00000881 	.word	0x00000881
    1afc:	00001ad9 	.word	0x00001ad9
    1b00:	00000925 	.word	0x00000925
    1b04:	00001ad9 	.word	0x00001ad9

00001b08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b08:	e7fe      	b.n	1b08 <Dummy_Handler>
	...

00001b0c <Reset_Handler>:
{
    1b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b0e:	4a2a      	ldr	r2, [pc, #168]	; (1bb8 <Reset_Handler+0xac>)
    1b10:	4b2a      	ldr	r3, [pc, #168]	; (1bbc <Reset_Handler+0xb0>)
    1b12:	429a      	cmp	r2, r3
    1b14:	d011      	beq.n	1b3a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b16:	001a      	movs	r2, r3
    1b18:	4b29      	ldr	r3, [pc, #164]	; (1bc0 <Reset_Handler+0xb4>)
    1b1a:	429a      	cmp	r2, r3
    1b1c:	d20d      	bcs.n	1b3a <Reset_Handler+0x2e>
    1b1e:	4a29      	ldr	r2, [pc, #164]	; (1bc4 <Reset_Handler+0xb8>)
    1b20:	3303      	adds	r3, #3
    1b22:	1a9b      	subs	r3, r3, r2
    1b24:	089b      	lsrs	r3, r3, #2
    1b26:	3301      	adds	r3, #1
    1b28:	009b      	lsls	r3, r3, #2
    1b2a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b2c:	4823      	ldr	r0, [pc, #140]	; (1bbc <Reset_Handler+0xb0>)
    1b2e:	4922      	ldr	r1, [pc, #136]	; (1bb8 <Reset_Handler+0xac>)
    1b30:	588c      	ldr	r4, [r1, r2]
    1b32:	5084      	str	r4, [r0, r2]
    1b34:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b36:	429a      	cmp	r2, r3
    1b38:	d1fa      	bne.n	1b30 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b3a:	4a23      	ldr	r2, [pc, #140]	; (1bc8 <Reset_Handler+0xbc>)
    1b3c:	4b23      	ldr	r3, [pc, #140]	; (1bcc <Reset_Handler+0xc0>)
    1b3e:	429a      	cmp	r2, r3
    1b40:	d20a      	bcs.n	1b58 <Reset_Handler+0x4c>
    1b42:	43d3      	mvns	r3, r2
    1b44:	4921      	ldr	r1, [pc, #132]	; (1bcc <Reset_Handler+0xc0>)
    1b46:	185b      	adds	r3, r3, r1
    1b48:	2103      	movs	r1, #3
    1b4a:	438b      	bics	r3, r1
    1b4c:	3304      	adds	r3, #4
    1b4e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1b50:	2100      	movs	r1, #0
    1b52:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1b54:	4293      	cmp	r3, r2
    1b56:	d1fc      	bne.n	1b52 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b58:	4a1d      	ldr	r2, [pc, #116]	; (1bd0 <Reset_Handler+0xc4>)
    1b5a:	21ff      	movs	r1, #255	; 0xff
    1b5c:	4b1d      	ldr	r3, [pc, #116]	; (1bd4 <Reset_Handler+0xc8>)
    1b5e:	438b      	bics	r3, r1
    1b60:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b62:	39fd      	subs	r1, #253	; 0xfd
    1b64:	2390      	movs	r3, #144	; 0x90
    1b66:	005b      	lsls	r3, r3, #1
    1b68:	4a1b      	ldr	r2, [pc, #108]	; (1bd8 <Reset_Handler+0xcc>)
    1b6a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1b6c:	4a1b      	ldr	r2, [pc, #108]	; (1bdc <Reset_Handler+0xd0>)
    1b6e:	78d3      	ldrb	r3, [r2, #3]
    1b70:	2503      	movs	r5, #3
    1b72:	43ab      	bics	r3, r5
    1b74:	2402      	movs	r4, #2
    1b76:	4323      	orrs	r3, r4
    1b78:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1b7a:	78d3      	ldrb	r3, [r2, #3]
    1b7c:	270c      	movs	r7, #12
    1b7e:	43bb      	bics	r3, r7
    1b80:	2608      	movs	r6, #8
    1b82:	4333      	orrs	r3, r6
    1b84:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1b86:	4b16      	ldr	r3, [pc, #88]	; (1be0 <Reset_Handler+0xd4>)
    1b88:	7b98      	ldrb	r0, [r3, #14]
    1b8a:	2230      	movs	r2, #48	; 0x30
    1b8c:	4390      	bics	r0, r2
    1b8e:	2220      	movs	r2, #32
    1b90:	4310      	orrs	r0, r2
    1b92:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1b94:	7b99      	ldrb	r1, [r3, #14]
    1b96:	43b9      	bics	r1, r7
    1b98:	4331      	orrs	r1, r6
    1b9a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1b9c:	7b9a      	ldrb	r2, [r3, #14]
    1b9e:	43aa      	bics	r2, r5
    1ba0:	4322      	orrs	r2, r4
    1ba2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1ba4:	4a0f      	ldr	r2, [pc, #60]	; (1be4 <Reset_Handler+0xd8>)
    1ba6:	6853      	ldr	r3, [r2, #4]
    1ba8:	2180      	movs	r1, #128	; 0x80
    1baa:	430b      	orrs	r3, r1
    1bac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1bae:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <Reset_Handler+0xdc>)
    1bb0:	4798      	blx	r3
        main();
    1bb2:	4b0e      	ldr	r3, [pc, #56]	; (1bec <Reset_Handler+0xe0>)
    1bb4:	4798      	blx	r3
    1bb6:	e7fe      	b.n	1bb6 <Reset_Handler+0xaa>
    1bb8:	00004588 	.word	0x00004588
    1bbc:	20000000 	.word	0x20000000
    1bc0:	20000210 	.word	0x20000210
    1bc4:	20000004 	.word	0x20000004
    1bc8:	20000210 	.word	0x20000210
    1bcc:	200003b4 	.word	0x200003b4
    1bd0:	e000ed00 	.word	0xe000ed00
    1bd4:	00000000 	.word	0x00000000
    1bd8:	41007000 	.word	0x41007000
    1bdc:	41005000 	.word	0x41005000
    1be0:	41004800 	.word	0x41004800
    1be4:	41004000 	.word	0x41004000
    1be8:	00001fc9 	.word	0x00001fc9
    1bec:	00001d05 	.word	0x00001d05

00001bf0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf2:	46c6      	mov	lr, r8
    1bf4:	b500      	push	{lr}
    1bf6:	000c      	movs	r4, r1
    1bf8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1bfa:	2800      	cmp	r0, #0
    1bfc:	d10f      	bne.n	1c1e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1bfe:	2a00      	cmp	r2, #0
    1c00:	dd11      	ble.n	1c26 <_read+0x36>
    1c02:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c04:	4e09      	ldr	r6, [pc, #36]	; (1c2c <_read+0x3c>)
    1c06:	4d0a      	ldr	r5, [pc, #40]	; (1c30 <_read+0x40>)
    1c08:	6830      	ldr	r0, [r6, #0]
    1c0a:	0021      	movs	r1, r4
    1c0c:	682b      	ldr	r3, [r5, #0]
    1c0e:	4798      	blx	r3
		ptr++;
    1c10:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1c12:	42bc      	cmp	r4, r7
    1c14:	d1f8      	bne.n	1c08 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1c16:	4640      	mov	r0, r8
    1c18:	bc04      	pop	{r2}
    1c1a:	4690      	mov	r8, r2
    1c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1c1e:	2301      	movs	r3, #1
    1c20:	425b      	negs	r3, r3
    1c22:	4698      	mov	r8, r3
    1c24:	e7f7      	b.n	1c16 <_read+0x26>
	for (; len > 0; --len) {
    1c26:	4680      	mov	r8, r0
    1c28:	e7f5      	b.n	1c16 <_read+0x26>
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	200003ac 	.word	0x200003ac
    1c30:	200003a4 	.word	0x200003a4

00001c34 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c36:	46c6      	mov	lr, r8
    1c38:	b500      	push	{lr}
    1c3a:	000e      	movs	r6, r1
    1c3c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1c3e:	3801      	subs	r0, #1
    1c40:	2802      	cmp	r0, #2
    1c42:	d810      	bhi.n	1c66 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1c44:	2a00      	cmp	r2, #0
    1c46:	d011      	beq.n	1c6c <_write+0x38>
    1c48:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1c4a:	4b0c      	ldr	r3, [pc, #48]	; (1c7c <_write+0x48>)
    1c4c:	4698      	mov	r8, r3
    1c4e:	4f0c      	ldr	r7, [pc, #48]	; (1c80 <_write+0x4c>)
    1c50:	4643      	mov	r3, r8
    1c52:	6818      	ldr	r0, [r3, #0]
    1c54:	5d31      	ldrb	r1, [r6, r4]
    1c56:	683b      	ldr	r3, [r7, #0]
    1c58:	4798      	blx	r3
    1c5a:	2800      	cmp	r0, #0
    1c5c:	db08      	blt.n	1c70 <_write+0x3c>
			return -1;
		}
		++nChars;
    1c5e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1c60:	42a5      	cmp	r5, r4
    1c62:	d1f5      	bne.n	1c50 <_write+0x1c>
    1c64:	e006      	b.n	1c74 <_write+0x40>
		return -1;
    1c66:	2401      	movs	r4, #1
    1c68:	4264      	negs	r4, r4
    1c6a:	e003      	b.n	1c74 <_write+0x40>
	for (; len != 0; --len) {
    1c6c:	0014      	movs	r4, r2
    1c6e:	e001      	b.n	1c74 <_write+0x40>
			return -1;
    1c70:	2401      	movs	r4, #1
    1c72:	4264      	negs	r4, r4
	}
	return nChars;
}
    1c74:	0020      	movs	r0, r4
    1c76:	bc04      	pop	{r2}
    1c78:	4690      	mov	r8, r2
    1c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c7c:	200003ac 	.word	0x200003ac
    1c80:	200003a8 	.word	0x200003a8

00001c84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1c84:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1c86:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <_sbrk+0x1c>)
    1c88:	6812      	ldr	r2, [r2, #0]
    1c8a:	2a00      	cmp	r2, #0
    1c8c:	d004      	beq.n	1c98 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1c8e:	4a04      	ldr	r2, [pc, #16]	; (1ca0 <_sbrk+0x1c>)
    1c90:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1c92:	18c3      	adds	r3, r0, r3
    1c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1c96:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1c98:	4902      	ldr	r1, [pc, #8]	; (1ca4 <_sbrk+0x20>)
    1c9a:	4a01      	ldr	r2, [pc, #4]	; (1ca0 <_sbrk+0x1c>)
    1c9c:	6011      	str	r1, [r2, #0]
    1c9e:	e7f6      	b.n	1c8e <_sbrk+0xa>
    1ca0:	2000026c 	.word	0x2000026c
    1ca4:	200023b8 	.word	0x200023b8

00001ca8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1ca8:	2001      	movs	r0, #1
    1caa:	4240      	negs	r0, r0
    1cac:	4770      	bx	lr

00001cae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1cae:	2380      	movs	r3, #128	; 0x80
    1cb0:	019b      	lsls	r3, r3, #6
    1cb2:	604b      	str	r3, [r1, #4]

	return 0;
}
    1cb4:	2000      	movs	r0, #0
    1cb6:	4770      	bx	lr

00001cb8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1cb8:	2001      	movs	r0, #1
    1cba:	4770      	bx	lr

00001cbc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1cbc:	2000      	movs	r0, #0
    1cbe:	4770      	bx	lr

00001cc0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	b082      	sub	sp, #8
    1cc4:	0005      	movs	r5, r0
    1cc6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1cc8:	2200      	movs	r2, #0
    1cca:	466b      	mov	r3, sp
    1ccc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1cce:	4c06      	ldr	r4, [pc, #24]	; (1ce8 <usart_serial_getchar+0x28>)
    1cd0:	466b      	mov	r3, sp
    1cd2:	1d99      	adds	r1, r3, #6
    1cd4:	0028      	movs	r0, r5
    1cd6:	47a0      	blx	r4
    1cd8:	2800      	cmp	r0, #0
    1cda:	d1f9      	bne.n	1cd0 <usart_serial_getchar+0x10>

	*c = temp;
    1cdc:	466b      	mov	r3, sp
    1cde:	3306      	adds	r3, #6
    1ce0:	881b      	ldrh	r3, [r3, #0]
    1ce2:	7033      	strb	r3, [r6, #0]
}
    1ce4:	b002      	add	sp, #8
    1ce6:	bd70      	pop	{r4, r5, r6, pc}
    1ce8:	00001169 	.word	0x00001169

00001cec <usart_serial_putchar>:
{
    1cec:	b570      	push	{r4, r5, r6, lr}
    1cee:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1cf0:	b28c      	uxth	r4, r1
    1cf2:	4e03      	ldr	r6, [pc, #12]	; (1d00 <usart_serial_putchar+0x14>)
    1cf4:	0021      	movs	r1, r4
    1cf6:	0028      	movs	r0, r5
    1cf8:	47b0      	blx	r6
    1cfa:	2800      	cmp	r0, #0
    1cfc:	d1fa      	bne.n	1cf4 <usart_serial_putchar+0x8>
}
    1cfe:	bd70      	pop	{r4, r5, r6, pc}
    1d00:	0000113d 	.word	0x0000113d

00001d04 <main>:
 * Display WINC1500 chip id and rf revision id.
 *
 * \return program return value.
 */
int main(void)
{
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	b0d1      	sub	sp, #324	; 0x144
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	system_init();
    1d08:	4b38      	ldr	r3, [pc, #224]	; (1dec <main+0xe8>)
    1d0a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d0c:	2380      	movs	r3, #128	; 0x80
    1d0e:	05db      	lsls	r3, r3, #23
    1d10:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d12:	2300      	movs	r3, #0
    1d14:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1d16:	22ff      	movs	r2, #255	; 0xff
    1d18:	4669      	mov	r1, sp
    1d1a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d1c:	2200      	movs	r2, #0
    1d1e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d20:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1d22:	2401      	movs	r4, #1
    1d24:	2124      	movs	r1, #36	; 0x24
    1d26:	4668      	mov	r0, sp
    1d28:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1d2a:	3101      	adds	r1, #1
    1d2c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1d2e:	3101      	adds	r1, #1
    1d30:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1d32:	3101      	adds	r1, #1
    1d34:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1d36:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1d38:	3105      	adds	r1, #5
    1d3a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1d3c:	3101      	adds	r1, #1
    1d3e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1d40:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1d42:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1d44:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1d46:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1d48:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1d4a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1d4c:	2313      	movs	r3, #19
    1d4e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1d50:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1d52:	23c4      	movs	r3, #196	; 0xc4
    1d54:	039b      	lsls	r3, r3, #14
    1d56:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1d58:	2301      	movs	r3, #1
    1d5a:	425b      	negs	r3, r3
    1d5c:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1d5e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1d60:	4b23      	ldr	r3, [pc, #140]	; (1df0 <main+0xec>)
    1d62:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1d64:	4b23      	ldr	r3, [pc, #140]	; (1df4 <main+0xf0>)
    1d66:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    1d68:	23e1      	movs	r3, #225	; 0xe1
    1d6a:	025b      	lsls	r3, r3, #9
    1d6c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1d6e:	4d22      	ldr	r5, [pc, #136]	; (1df8 <main+0xf4>)
    1d70:	4b22      	ldr	r3, [pc, #136]	; (1dfc <main+0xf8>)
    1d72:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1d74:	4a22      	ldr	r2, [pc, #136]	; (1e00 <main+0xfc>)
    1d76:	4b23      	ldr	r3, [pc, #140]	; (1e04 <main+0x100>)
    1d78:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1d7a:	4a23      	ldr	r2, [pc, #140]	; (1e08 <main+0x104>)
    1d7c:	4b23      	ldr	r3, [pc, #140]	; (1e0c <main+0x108>)
    1d7e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1d80:	466a      	mov	r2, sp
    1d82:	4923      	ldr	r1, [pc, #140]	; (1e10 <main+0x10c>)
    1d84:	0028      	movs	r0, r5
    1d86:	4b23      	ldr	r3, [pc, #140]	; (1e14 <main+0x110>)
    1d88:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1d8a:	4f23      	ldr	r7, [pc, #140]	; (1e18 <main+0x114>)
    1d8c:	683b      	ldr	r3, [r7, #0]
    1d8e:	6898      	ldr	r0, [r3, #8]
    1d90:	2100      	movs	r1, #0
    1d92:	4e22      	ldr	r6, [pc, #136]	; (1e1c <main+0x118>)
    1d94:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1d96:	683b      	ldr	r3, [r7, #0]
    1d98:	6858      	ldr	r0, [r3, #4]
    1d9a:	2100      	movs	r1, #0
    1d9c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d9e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1da0:	0030      	movs	r0, r6
    1da2:	4b1f      	ldr	r3, [pc, #124]	; (1e20 <main+0x11c>)
    1da4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1da6:	231f      	movs	r3, #31
    1da8:	4018      	ands	r0, r3
    1daa:	4084      	lsls	r4, r0
    1dac:	4b1d      	ldr	r3, [pc, #116]	; (1e24 <main+0x120>)
    1dae:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1db0:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1db2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1db4:	2a00      	cmp	r2, #0
    1db6:	d1fc      	bne.n	1db2 <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1db8:	6833      	ldr	r3, [r6, #0]
    1dba:	3202      	adds	r2, #2
    1dbc:	4313      	orrs	r3, r2
    1dbe:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    1dc0:	4819      	ldr	r0, [pc, #100]	; (1e28 <main+0x124>)
    1dc2:	4c1a      	ldr	r4, [pc, #104]	; (1e2c <main+0x128>)
    1dc4:	47a0      	blx	r4

	/* Initialize the BSP. */
	nm_bsp_init();
    1dc6:	4b1a      	ldr	r3, [pc, #104]	; (1e30 <main+0x12c>)
    1dc8:	4798      	blx	r3
	
	/* Do our own initilization for CLI */
	init_cmd_list(); // Creates the help struct.
    1dca:	4b1a      	ldr	r3, [pc, #104]	; (1e34 <main+0x130>)
    1dcc:	4798      	blx	r3
	char input[256];
	
	printf("=== DroneDAD CLI Interface ===\r\n");
    1dce:	481a      	ldr	r0, [pc, #104]	; (1e38 <main+0x134>)
    1dd0:	47a0      	blx	r4
	while (1) {
		printf("> ");
    1dd2:	4d1a      	ldr	r5, [pc, #104]	; (1e3c <main+0x138>)
    1dd4:	4e1a      	ldr	r6, [pc, #104]	; (1e40 <main+0x13c>)
		scanf("%[^\r]%*c", input);
    1dd6:	4c1b      	ldr	r4, [pc, #108]	; (1e44 <main+0x140>)
		printf("> ");
    1dd8:	0028      	movs	r0, r5
    1dda:	47b0      	blx	r6
		scanf("%[^\r]%*c", input);
    1ddc:	a910      	add	r1, sp, #64	; 0x40
    1dde:	0020      	movs	r0, r4
    1de0:	4b19      	ldr	r3, [pc, #100]	; (1e48 <main+0x144>)
    1de2:	4798      	blx	r3
		handle_user_input(input);
    1de4:	a810      	add	r0, sp, #64	; 0x40
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <main+0x148>)
    1de8:	4798      	blx	r3
    1dea:	e7f5      	b.n	1dd8 <main+0xd4>
    1dec:	00001add 	.word	0x00001add
    1df0:	002a0003 	.word	0x002a0003
    1df4:	002b0003 	.word	0x002b0003
    1df8:	20000270 	.word	0x20000270
    1dfc:	200003ac 	.word	0x200003ac
    1e00:	00001ced 	.word	0x00001ced
    1e04:	200003a8 	.word	0x200003a8
    1e08:	00001cc1 	.word	0x00001cc1
    1e0c:	200003a4 	.word	0x200003a4
    1e10:	42001800 	.word	0x42001800
    1e14:	00000df9 	.word	0x00000df9
    1e18:	20000040 	.word	0x20000040
    1e1c:	0000215d 	.word	0x0000215d
    1e20:	00000d69 	.word	0x00000d69
    1e24:	e000e100 	.word	0xe000e100
    1e28:	00004300 	.word	0x00004300
    1e2c:	00002115 	.word	0x00002115
    1e30:	00000795 	.word	0x00000795
    1e34:	00000115 	.word	0x00000115
    1e38:	0000436c 	.word	0x0000436c
    1e3c:	0000438c 	.word	0x0000438c
    1e40:	00002021 	.word	0x00002021
    1e44:	00004390 	.word	0x00004390
    1e48:	00002129 	.word	0x00002129
    1e4c:	00000401 	.word	0x00000401

00001e50 <__udivsi3>:
    1e50:	2200      	movs	r2, #0
    1e52:	0843      	lsrs	r3, r0, #1
    1e54:	428b      	cmp	r3, r1
    1e56:	d374      	bcc.n	1f42 <__udivsi3+0xf2>
    1e58:	0903      	lsrs	r3, r0, #4
    1e5a:	428b      	cmp	r3, r1
    1e5c:	d35f      	bcc.n	1f1e <__udivsi3+0xce>
    1e5e:	0a03      	lsrs	r3, r0, #8
    1e60:	428b      	cmp	r3, r1
    1e62:	d344      	bcc.n	1eee <__udivsi3+0x9e>
    1e64:	0b03      	lsrs	r3, r0, #12
    1e66:	428b      	cmp	r3, r1
    1e68:	d328      	bcc.n	1ebc <__udivsi3+0x6c>
    1e6a:	0c03      	lsrs	r3, r0, #16
    1e6c:	428b      	cmp	r3, r1
    1e6e:	d30d      	bcc.n	1e8c <__udivsi3+0x3c>
    1e70:	22ff      	movs	r2, #255	; 0xff
    1e72:	0209      	lsls	r1, r1, #8
    1e74:	ba12      	rev	r2, r2
    1e76:	0c03      	lsrs	r3, r0, #16
    1e78:	428b      	cmp	r3, r1
    1e7a:	d302      	bcc.n	1e82 <__udivsi3+0x32>
    1e7c:	1212      	asrs	r2, r2, #8
    1e7e:	0209      	lsls	r1, r1, #8
    1e80:	d065      	beq.n	1f4e <__udivsi3+0xfe>
    1e82:	0b03      	lsrs	r3, r0, #12
    1e84:	428b      	cmp	r3, r1
    1e86:	d319      	bcc.n	1ebc <__udivsi3+0x6c>
    1e88:	e000      	b.n	1e8c <__udivsi3+0x3c>
    1e8a:	0a09      	lsrs	r1, r1, #8
    1e8c:	0bc3      	lsrs	r3, r0, #15
    1e8e:	428b      	cmp	r3, r1
    1e90:	d301      	bcc.n	1e96 <__udivsi3+0x46>
    1e92:	03cb      	lsls	r3, r1, #15
    1e94:	1ac0      	subs	r0, r0, r3
    1e96:	4152      	adcs	r2, r2
    1e98:	0b83      	lsrs	r3, r0, #14
    1e9a:	428b      	cmp	r3, r1
    1e9c:	d301      	bcc.n	1ea2 <__udivsi3+0x52>
    1e9e:	038b      	lsls	r3, r1, #14
    1ea0:	1ac0      	subs	r0, r0, r3
    1ea2:	4152      	adcs	r2, r2
    1ea4:	0b43      	lsrs	r3, r0, #13
    1ea6:	428b      	cmp	r3, r1
    1ea8:	d301      	bcc.n	1eae <__udivsi3+0x5e>
    1eaa:	034b      	lsls	r3, r1, #13
    1eac:	1ac0      	subs	r0, r0, r3
    1eae:	4152      	adcs	r2, r2
    1eb0:	0b03      	lsrs	r3, r0, #12
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d301      	bcc.n	1eba <__udivsi3+0x6a>
    1eb6:	030b      	lsls	r3, r1, #12
    1eb8:	1ac0      	subs	r0, r0, r3
    1eba:	4152      	adcs	r2, r2
    1ebc:	0ac3      	lsrs	r3, r0, #11
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d301      	bcc.n	1ec6 <__udivsi3+0x76>
    1ec2:	02cb      	lsls	r3, r1, #11
    1ec4:	1ac0      	subs	r0, r0, r3
    1ec6:	4152      	adcs	r2, r2
    1ec8:	0a83      	lsrs	r3, r0, #10
    1eca:	428b      	cmp	r3, r1
    1ecc:	d301      	bcc.n	1ed2 <__udivsi3+0x82>
    1ece:	028b      	lsls	r3, r1, #10
    1ed0:	1ac0      	subs	r0, r0, r3
    1ed2:	4152      	adcs	r2, r2
    1ed4:	0a43      	lsrs	r3, r0, #9
    1ed6:	428b      	cmp	r3, r1
    1ed8:	d301      	bcc.n	1ede <__udivsi3+0x8e>
    1eda:	024b      	lsls	r3, r1, #9
    1edc:	1ac0      	subs	r0, r0, r3
    1ede:	4152      	adcs	r2, r2
    1ee0:	0a03      	lsrs	r3, r0, #8
    1ee2:	428b      	cmp	r3, r1
    1ee4:	d301      	bcc.n	1eea <__udivsi3+0x9a>
    1ee6:	020b      	lsls	r3, r1, #8
    1ee8:	1ac0      	subs	r0, r0, r3
    1eea:	4152      	adcs	r2, r2
    1eec:	d2cd      	bcs.n	1e8a <__udivsi3+0x3a>
    1eee:	09c3      	lsrs	r3, r0, #7
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d301      	bcc.n	1ef8 <__udivsi3+0xa8>
    1ef4:	01cb      	lsls	r3, r1, #7
    1ef6:	1ac0      	subs	r0, r0, r3
    1ef8:	4152      	adcs	r2, r2
    1efa:	0983      	lsrs	r3, r0, #6
    1efc:	428b      	cmp	r3, r1
    1efe:	d301      	bcc.n	1f04 <__udivsi3+0xb4>
    1f00:	018b      	lsls	r3, r1, #6
    1f02:	1ac0      	subs	r0, r0, r3
    1f04:	4152      	adcs	r2, r2
    1f06:	0943      	lsrs	r3, r0, #5
    1f08:	428b      	cmp	r3, r1
    1f0a:	d301      	bcc.n	1f10 <__udivsi3+0xc0>
    1f0c:	014b      	lsls	r3, r1, #5
    1f0e:	1ac0      	subs	r0, r0, r3
    1f10:	4152      	adcs	r2, r2
    1f12:	0903      	lsrs	r3, r0, #4
    1f14:	428b      	cmp	r3, r1
    1f16:	d301      	bcc.n	1f1c <__udivsi3+0xcc>
    1f18:	010b      	lsls	r3, r1, #4
    1f1a:	1ac0      	subs	r0, r0, r3
    1f1c:	4152      	adcs	r2, r2
    1f1e:	08c3      	lsrs	r3, r0, #3
    1f20:	428b      	cmp	r3, r1
    1f22:	d301      	bcc.n	1f28 <__udivsi3+0xd8>
    1f24:	00cb      	lsls	r3, r1, #3
    1f26:	1ac0      	subs	r0, r0, r3
    1f28:	4152      	adcs	r2, r2
    1f2a:	0883      	lsrs	r3, r0, #2
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d301      	bcc.n	1f34 <__udivsi3+0xe4>
    1f30:	008b      	lsls	r3, r1, #2
    1f32:	1ac0      	subs	r0, r0, r3
    1f34:	4152      	adcs	r2, r2
    1f36:	0843      	lsrs	r3, r0, #1
    1f38:	428b      	cmp	r3, r1
    1f3a:	d301      	bcc.n	1f40 <__udivsi3+0xf0>
    1f3c:	004b      	lsls	r3, r1, #1
    1f3e:	1ac0      	subs	r0, r0, r3
    1f40:	4152      	adcs	r2, r2
    1f42:	1a41      	subs	r1, r0, r1
    1f44:	d200      	bcs.n	1f48 <__udivsi3+0xf8>
    1f46:	4601      	mov	r1, r0
    1f48:	4152      	adcs	r2, r2
    1f4a:	4610      	mov	r0, r2
    1f4c:	4770      	bx	lr
    1f4e:	e7ff      	b.n	1f50 <__udivsi3+0x100>
    1f50:	b501      	push	{r0, lr}
    1f52:	2000      	movs	r0, #0
    1f54:	f000 f806 	bl	1f64 <__aeabi_idiv0>
    1f58:	bd02      	pop	{r1, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)

00001f5c <__aeabi_uidivmod>:
    1f5c:	2900      	cmp	r1, #0
    1f5e:	d0f7      	beq.n	1f50 <__udivsi3+0x100>
    1f60:	e776      	b.n	1e50 <__udivsi3>
    1f62:	4770      	bx	lr

00001f64 <__aeabi_idiv0>:
    1f64:	4770      	bx	lr
    1f66:	46c0      	nop			; (mov r8, r8)

00001f68 <__aeabi_lmul>:
    1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6a:	46ce      	mov	lr, r9
    1f6c:	4647      	mov	r7, r8
    1f6e:	0415      	lsls	r5, r2, #16
    1f70:	0c2d      	lsrs	r5, r5, #16
    1f72:	002e      	movs	r6, r5
    1f74:	b580      	push	{r7, lr}
    1f76:	0407      	lsls	r7, r0, #16
    1f78:	0c14      	lsrs	r4, r2, #16
    1f7a:	0c3f      	lsrs	r7, r7, #16
    1f7c:	4699      	mov	r9, r3
    1f7e:	0c03      	lsrs	r3, r0, #16
    1f80:	437e      	muls	r6, r7
    1f82:	435d      	muls	r5, r3
    1f84:	4367      	muls	r7, r4
    1f86:	4363      	muls	r3, r4
    1f88:	197f      	adds	r7, r7, r5
    1f8a:	0c34      	lsrs	r4, r6, #16
    1f8c:	19e4      	adds	r4, r4, r7
    1f8e:	469c      	mov	ip, r3
    1f90:	42a5      	cmp	r5, r4
    1f92:	d903      	bls.n	1f9c <__aeabi_lmul+0x34>
    1f94:	2380      	movs	r3, #128	; 0x80
    1f96:	025b      	lsls	r3, r3, #9
    1f98:	4698      	mov	r8, r3
    1f9a:	44c4      	add	ip, r8
    1f9c:	464b      	mov	r3, r9
    1f9e:	4351      	muls	r1, r2
    1fa0:	4343      	muls	r3, r0
    1fa2:	0436      	lsls	r6, r6, #16
    1fa4:	0c36      	lsrs	r6, r6, #16
    1fa6:	0c25      	lsrs	r5, r4, #16
    1fa8:	0424      	lsls	r4, r4, #16
    1faa:	4465      	add	r5, ip
    1fac:	19a4      	adds	r4, r4, r6
    1fae:	1859      	adds	r1, r3, r1
    1fb0:	1949      	adds	r1, r1, r5
    1fb2:	0020      	movs	r0, r4
    1fb4:	bc0c      	pop	{r2, r3}
    1fb6:	4690      	mov	r8, r2
    1fb8:	4699      	mov	r9, r3
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fbc <atoi>:
    1fbc:	b510      	push	{r4, lr}
    1fbe:	220a      	movs	r2, #10
    1fc0:	2100      	movs	r1, #0
    1fc2:	f000 fa77 	bl	24b4 <strtol>
    1fc6:	bd10      	pop	{r4, pc}

00001fc8 <__libc_init_array>:
    1fc8:	b570      	push	{r4, r5, r6, lr}
    1fca:	2600      	movs	r6, #0
    1fcc:	4d0c      	ldr	r5, [pc, #48]	; (2000 <STACK_SIZE>)
    1fce:	4c0d      	ldr	r4, [pc, #52]	; (2004 <STACK_SIZE+0x4>)
    1fd0:	1b64      	subs	r4, r4, r5
    1fd2:	10a4      	asrs	r4, r4, #2
    1fd4:	42a6      	cmp	r6, r4
    1fd6:	d109      	bne.n	1fec <__libc_init_array+0x24>
    1fd8:	2600      	movs	r6, #0
    1fda:	f002 fac5 	bl	4568 <_init>
    1fde:	4d0a      	ldr	r5, [pc, #40]	; (2008 <STACK_SIZE+0x8>)
    1fe0:	4c0a      	ldr	r4, [pc, #40]	; (200c <STACK_SIZE+0xc>)
    1fe2:	1b64      	subs	r4, r4, r5
    1fe4:	10a4      	asrs	r4, r4, #2
    1fe6:	42a6      	cmp	r6, r4
    1fe8:	d105      	bne.n	1ff6 <__libc_init_array+0x2e>
    1fea:	bd70      	pop	{r4, r5, r6, pc}
    1fec:	00b3      	lsls	r3, r6, #2
    1fee:	58eb      	ldr	r3, [r5, r3]
    1ff0:	4798      	blx	r3
    1ff2:	3601      	adds	r6, #1
    1ff4:	e7ee      	b.n	1fd4 <__libc_init_array+0xc>
    1ff6:	00b3      	lsls	r3, r6, #2
    1ff8:	58eb      	ldr	r3, [r5, r3]
    1ffa:	4798      	blx	r3
    1ffc:	3601      	adds	r6, #1
    1ffe:	e7f2      	b.n	1fe6 <__libc_init_array+0x1e>
    2000:	00004574 	.word	0x00004574
    2004:	00004574 	.word	0x00004574
    2008:	00004574 	.word	0x00004574
    200c:	00004578 	.word	0x00004578

00002010 <memset>:
    2010:	0003      	movs	r3, r0
    2012:	1882      	adds	r2, r0, r2
    2014:	4293      	cmp	r3, r2
    2016:	d100      	bne.n	201a <memset+0xa>
    2018:	4770      	bx	lr
    201a:	7019      	strb	r1, [r3, #0]
    201c:	3301      	adds	r3, #1
    201e:	e7f9      	b.n	2014 <memset+0x4>

00002020 <iprintf>:
    2020:	b40f      	push	{r0, r1, r2, r3}
    2022:	4b0b      	ldr	r3, [pc, #44]	; (2050 <iprintf+0x30>)
    2024:	b513      	push	{r0, r1, r4, lr}
    2026:	681c      	ldr	r4, [r3, #0]
    2028:	2c00      	cmp	r4, #0
    202a:	d005      	beq.n	2038 <iprintf+0x18>
    202c:	69a3      	ldr	r3, [r4, #24]
    202e:	2b00      	cmp	r3, #0
    2030:	d102      	bne.n	2038 <iprintf+0x18>
    2032:	0020      	movs	r0, r4
    2034:	f000 fc2a 	bl	288c <__sinit>
    2038:	ab05      	add	r3, sp, #20
    203a:	9a04      	ldr	r2, [sp, #16]
    203c:	68a1      	ldr	r1, [r4, #8]
    203e:	0020      	movs	r0, r4
    2040:	9301      	str	r3, [sp, #4]
    2042:	f000 fe3d 	bl	2cc0 <_vfiprintf_r>
    2046:	bc16      	pop	{r1, r2, r4}
    2048:	bc08      	pop	{r3}
    204a:	b004      	add	sp, #16
    204c:	4718      	bx	r3
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	20000040 	.word	0x20000040

00002054 <_puts_r>:
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	0005      	movs	r5, r0
    2058:	000e      	movs	r6, r1
    205a:	2800      	cmp	r0, #0
    205c:	d004      	beq.n	2068 <_puts_r+0x14>
    205e:	6983      	ldr	r3, [r0, #24]
    2060:	2b00      	cmp	r3, #0
    2062:	d101      	bne.n	2068 <_puts_r+0x14>
    2064:	f000 fc12 	bl	288c <__sinit>
    2068:	69ab      	ldr	r3, [r5, #24]
    206a:	68ac      	ldr	r4, [r5, #8]
    206c:	2b00      	cmp	r3, #0
    206e:	d102      	bne.n	2076 <_puts_r+0x22>
    2070:	0028      	movs	r0, r5
    2072:	f000 fc0b 	bl	288c <__sinit>
    2076:	4b24      	ldr	r3, [pc, #144]	; (2108 <_puts_r+0xb4>)
    2078:	429c      	cmp	r4, r3
    207a:	d10f      	bne.n	209c <_puts_r+0x48>
    207c:	686c      	ldr	r4, [r5, #4]
    207e:	89a3      	ldrh	r3, [r4, #12]
    2080:	071b      	lsls	r3, r3, #28
    2082:	d502      	bpl.n	208a <_puts_r+0x36>
    2084:	6923      	ldr	r3, [r4, #16]
    2086:	2b00      	cmp	r3, #0
    2088:	d120      	bne.n	20cc <_puts_r+0x78>
    208a:	0021      	movs	r1, r4
    208c:	0028      	movs	r0, r5
    208e:	f000 fa7b 	bl	2588 <__swsetup_r>
    2092:	2800      	cmp	r0, #0
    2094:	d01a      	beq.n	20cc <_puts_r+0x78>
    2096:	2001      	movs	r0, #1
    2098:	4240      	negs	r0, r0
    209a:	bd70      	pop	{r4, r5, r6, pc}
    209c:	4b1b      	ldr	r3, [pc, #108]	; (210c <_puts_r+0xb8>)
    209e:	429c      	cmp	r4, r3
    20a0:	d101      	bne.n	20a6 <_puts_r+0x52>
    20a2:	68ac      	ldr	r4, [r5, #8]
    20a4:	e7eb      	b.n	207e <_puts_r+0x2a>
    20a6:	4b1a      	ldr	r3, [pc, #104]	; (2110 <_puts_r+0xbc>)
    20a8:	429c      	cmp	r4, r3
    20aa:	d1e8      	bne.n	207e <_puts_r+0x2a>
    20ac:	68ec      	ldr	r4, [r5, #12]
    20ae:	e7e6      	b.n	207e <_puts_r+0x2a>
    20b0:	3b01      	subs	r3, #1
    20b2:	3601      	adds	r6, #1
    20b4:	60a3      	str	r3, [r4, #8]
    20b6:	2b00      	cmp	r3, #0
    20b8:	da04      	bge.n	20c4 <_puts_r+0x70>
    20ba:	69a2      	ldr	r2, [r4, #24]
    20bc:	4293      	cmp	r3, r2
    20be:	db16      	blt.n	20ee <_puts_r+0x9a>
    20c0:	290a      	cmp	r1, #10
    20c2:	d014      	beq.n	20ee <_puts_r+0x9a>
    20c4:	6823      	ldr	r3, [r4, #0]
    20c6:	1c5a      	adds	r2, r3, #1
    20c8:	6022      	str	r2, [r4, #0]
    20ca:	7019      	strb	r1, [r3, #0]
    20cc:	7831      	ldrb	r1, [r6, #0]
    20ce:	68a3      	ldr	r3, [r4, #8]
    20d0:	2900      	cmp	r1, #0
    20d2:	d1ed      	bne.n	20b0 <_puts_r+0x5c>
    20d4:	3b01      	subs	r3, #1
    20d6:	60a3      	str	r3, [r4, #8]
    20d8:	2b00      	cmp	r3, #0
    20da:	da0f      	bge.n	20fc <_puts_r+0xa8>
    20dc:	0022      	movs	r2, r4
    20de:	310a      	adds	r1, #10
    20e0:	0028      	movs	r0, r5
    20e2:	f000 f9fb 	bl	24dc <__swbuf_r>
    20e6:	1c43      	adds	r3, r0, #1
    20e8:	d0d5      	beq.n	2096 <_puts_r+0x42>
    20ea:	200a      	movs	r0, #10
    20ec:	e7d5      	b.n	209a <_puts_r+0x46>
    20ee:	0022      	movs	r2, r4
    20f0:	0028      	movs	r0, r5
    20f2:	f000 f9f3 	bl	24dc <__swbuf_r>
    20f6:	1c43      	adds	r3, r0, #1
    20f8:	d1e8      	bne.n	20cc <_puts_r+0x78>
    20fa:	e7cc      	b.n	2096 <_puts_r+0x42>
    20fc:	200a      	movs	r0, #10
    20fe:	6823      	ldr	r3, [r4, #0]
    2100:	1c5a      	adds	r2, r3, #1
    2102:	6022      	str	r2, [r4, #0]
    2104:	7018      	strb	r0, [r3, #0]
    2106:	e7c8      	b.n	209a <_puts_r+0x46>
    2108:	000043c0 	.word	0x000043c0
    210c:	000043e0 	.word	0x000043e0
    2110:	000043a0 	.word	0x000043a0

00002114 <puts>:
    2114:	b510      	push	{r4, lr}
    2116:	4b03      	ldr	r3, [pc, #12]	; (2124 <puts+0x10>)
    2118:	0001      	movs	r1, r0
    211a:	6818      	ldr	r0, [r3, #0]
    211c:	f7ff ff9a 	bl	2054 <_puts_r>
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	20000040 	.word	0x20000040

00002128 <iscanf>:
    2128:	b40f      	push	{r0, r1, r2, r3}
    212a:	4b0b      	ldr	r3, [pc, #44]	; (2158 <iscanf+0x30>)
    212c:	b513      	push	{r0, r1, r4, lr}
    212e:	681c      	ldr	r4, [r3, #0]
    2130:	2c00      	cmp	r4, #0
    2132:	d005      	beq.n	2140 <iscanf+0x18>
    2134:	69a3      	ldr	r3, [r4, #24]
    2136:	2b00      	cmp	r3, #0
    2138:	d102      	bne.n	2140 <iscanf+0x18>
    213a:	0020      	movs	r0, r4
    213c:	f000 fba6 	bl	288c <__sinit>
    2140:	ab05      	add	r3, sp, #20
    2142:	9a04      	ldr	r2, [sp, #16]
    2144:	6861      	ldr	r1, [r4, #4]
    2146:	0020      	movs	r0, r4
    2148:	9301      	str	r3, [sp, #4]
    214a:	f001 f9e3 	bl	3514 <_vfiscanf_r>
    214e:	bc16      	pop	{r1, r2, r4}
    2150:	bc08      	pop	{r3}
    2152:	b004      	add	sp, #16
    2154:	4718      	bx	r3
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	20000040 	.word	0x20000040

0000215c <setbuf>:
    215c:	424a      	negs	r2, r1
    215e:	414a      	adcs	r2, r1
    2160:	2380      	movs	r3, #128	; 0x80
    2162:	b510      	push	{r4, lr}
    2164:	0052      	lsls	r2, r2, #1
    2166:	00db      	lsls	r3, r3, #3
    2168:	f000 f802 	bl	2170 <setvbuf>
    216c:	bd10      	pop	{r4, pc}
	...

00002170 <setvbuf>:
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	001d      	movs	r5, r3
    2174:	4b4f      	ldr	r3, [pc, #316]	; (22b4 <setvbuf+0x144>)
    2176:	b085      	sub	sp, #20
    2178:	681e      	ldr	r6, [r3, #0]
    217a:	0004      	movs	r4, r0
    217c:	000f      	movs	r7, r1
    217e:	9200      	str	r2, [sp, #0]
    2180:	2e00      	cmp	r6, #0
    2182:	d005      	beq.n	2190 <setvbuf+0x20>
    2184:	69b3      	ldr	r3, [r6, #24]
    2186:	2b00      	cmp	r3, #0
    2188:	d102      	bne.n	2190 <setvbuf+0x20>
    218a:	0030      	movs	r0, r6
    218c:	f000 fb7e 	bl	288c <__sinit>
    2190:	4b49      	ldr	r3, [pc, #292]	; (22b8 <setvbuf+0x148>)
    2192:	429c      	cmp	r4, r3
    2194:	d150      	bne.n	2238 <setvbuf+0xc8>
    2196:	6874      	ldr	r4, [r6, #4]
    2198:	9b00      	ldr	r3, [sp, #0]
    219a:	2b02      	cmp	r3, #2
    219c:	d005      	beq.n	21aa <setvbuf+0x3a>
    219e:	2b01      	cmp	r3, #1
    21a0:	d900      	bls.n	21a4 <setvbuf+0x34>
    21a2:	e084      	b.n	22ae <setvbuf+0x13e>
    21a4:	2d00      	cmp	r5, #0
    21a6:	da00      	bge.n	21aa <setvbuf+0x3a>
    21a8:	e081      	b.n	22ae <setvbuf+0x13e>
    21aa:	0021      	movs	r1, r4
    21ac:	0030      	movs	r0, r6
    21ae:	f000 faeb 	bl	2788 <_fflush_r>
    21b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21b4:	2900      	cmp	r1, #0
    21b6:	d008      	beq.n	21ca <setvbuf+0x5a>
    21b8:	0023      	movs	r3, r4
    21ba:	3344      	adds	r3, #68	; 0x44
    21bc:	4299      	cmp	r1, r3
    21be:	d002      	beq.n	21c6 <setvbuf+0x56>
    21c0:	0030      	movs	r0, r6
    21c2:	f000 fcad 	bl	2b20 <_free_r>
    21c6:	2300      	movs	r3, #0
    21c8:	6363      	str	r3, [r4, #52]	; 0x34
    21ca:	2300      	movs	r3, #0
    21cc:	61a3      	str	r3, [r4, #24]
    21ce:	6063      	str	r3, [r4, #4]
    21d0:	89a3      	ldrh	r3, [r4, #12]
    21d2:	061b      	lsls	r3, r3, #24
    21d4:	d503      	bpl.n	21de <setvbuf+0x6e>
    21d6:	6921      	ldr	r1, [r4, #16]
    21d8:	0030      	movs	r0, r6
    21da:	f000 fca1 	bl	2b20 <_free_r>
    21de:	89a3      	ldrh	r3, [r4, #12]
    21e0:	4a36      	ldr	r2, [pc, #216]	; (22bc <setvbuf+0x14c>)
    21e2:	4013      	ands	r3, r2
    21e4:	81a3      	strh	r3, [r4, #12]
    21e6:	9b00      	ldr	r3, [sp, #0]
    21e8:	2b02      	cmp	r3, #2
    21ea:	d05a      	beq.n	22a2 <setvbuf+0x132>
    21ec:	ab03      	add	r3, sp, #12
    21ee:	aa02      	add	r2, sp, #8
    21f0:	0021      	movs	r1, r4
    21f2:	0030      	movs	r0, r6
    21f4:	f000 fc0c 	bl	2a10 <__swhatbuf_r>
    21f8:	89a3      	ldrh	r3, [r4, #12]
    21fa:	4318      	orrs	r0, r3
    21fc:	81a0      	strh	r0, [r4, #12]
    21fe:	2d00      	cmp	r5, #0
    2200:	d124      	bne.n	224c <setvbuf+0xdc>
    2202:	9d02      	ldr	r5, [sp, #8]
    2204:	0028      	movs	r0, r5
    2206:	f000 fc6f 	bl	2ae8 <malloc>
    220a:	9501      	str	r5, [sp, #4]
    220c:	1e07      	subs	r7, r0, #0
    220e:	d142      	bne.n	2296 <setvbuf+0x126>
    2210:	9b02      	ldr	r3, [sp, #8]
    2212:	9301      	str	r3, [sp, #4]
    2214:	42ab      	cmp	r3, r5
    2216:	d139      	bne.n	228c <setvbuf+0x11c>
    2218:	2001      	movs	r0, #1
    221a:	4240      	negs	r0, r0
    221c:	2302      	movs	r3, #2
    221e:	89a2      	ldrh	r2, [r4, #12]
    2220:	4313      	orrs	r3, r2
    2222:	81a3      	strh	r3, [r4, #12]
    2224:	2300      	movs	r3, #0
    2226:	60a3      	str	r3, [r4, #8]
    2228:	0023      	movs	r3, r4
    222a:	3347      	adds	r3, #71	; 0x47
    222c:	6023      	str	r3, [r4, #0]
    222e:	6123      	str	r3, [r4, #16]
    2230:	2301      	movs	r3, #1
    2232:	6163      	str	r3, [r4, #20]
    2234:	b005      	add	sp, #20
    2236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2238:	4b21      	ldr	r3, [pc, #132]	; (22c0 <setvbuf+0x150>)
    223a:	429c      	cmp	r4, r3
    223c:	d101      	bne.n	2242 <setvbuf+0xd2>
    223e:	68b4      	ldr	r4, [r6, #8]
    2240:	e7aa      	b.n	2198 <setvbuf+0x28>
    2242:	4b20      	ldr	r3, [pc, #128]	; (22c4 <setvbuf+0x154>)
    2244:	429c      	cmp	r4, r3
    2246:	d1a7      	bne.n	2198 <setvbuf+0x28>
    2248:	68f4      	ldr	r4, [r6, #12]
    224a:	e7a5      	b.n	2198 <setvbuf+0x28>
    224c:	2f00      	cmp	r7, #0
    224e:	d0d9      	beq.n	2204 <setvbuf+0x94>
    2250:	69b3      	ldr	r3, [r6, #24]
    2252:	2b00      	cmp	r3, #0
    2254:	d102      	bne.n	225c <setvbuf+0xec>
    2256:	0030      	movs	r0, r6
    2258:	f000 fb18 	bl	288c <__sinit>
    225c:	9b00      	ldr	r3, [sp, #0]
    225e:	2b01      	cmp	r3, #1
    2260:	d103      	bne.n	226a <setvbuf+0xfa>
    2262:	89a3      	ldrh	r3, [r4, #12]
    2264:	9a00      	ldr	r2, [sp, #0]
    2266:	431a      	orrs	r2, r3
    2268:	81a2      	strh	r2, [r4, #12]
    226a:	2008      	movs	r0, #8
    226c:	89a3      	ldrh	r3, [r4, #12]
    226e:	6027      	str	r7, [r4, #0]
    2270:	6127      	str	r7, [r4, #16]
    2272:	6165      	str	r5, [r4, #20]
    2274:	4018      	ands	r0, r3
    2276:	d018      	beq.n	22aa <setvbuf+0x13a>
    2278:	2001      	movs	r0, #1
    227a:	4018      	ands	r0, r3
    227c:	2300      	movs	r3, #0
    227e:	4298      	cmp	r0, r3
    2280:	d011      	beq.n	22a6 <setvbuf+0x136>
    2282:	426d      	negs	r5, r5
    2284:	60a3      	str	r3, [r4, #8]
    2286:	61a5      	str	r5, [r4, #24]
    2288:	0018      	movs	r0, r3
    228a:	e7d3      	b.n	2234 <setvbuf+0xc4>
    228c:	9801      	ldr	r0, [sp, #4]
    228e:	f000 fc2b 	bl	2ae8 <malloc>
    2292:	1e07      	subs	r7, r0, #0
    2294:	d0c0      	beq.n	2218 <setvbuf+0xa8>
    2296:	2380      	movs	r3, #128	; 0x80
    2298:	89a2      	ldrh	r2, [r4, #12]
    229a:	9d01      	ldr	r5, [sp, #4]
    229c:	4313      	orrs	r3, r2
    229e:	81a3      	strh	r3, [r4, #12]
    22a0:	e7d6      	b.n	2250 <setvbuf+0xe0>
    22a2:	2000      	movs	r0, #0
    22a4:	e7ba      	b.n	221c <setvbuf+0xac>
    22a6:	60a5      	str	r5, [r4, #8]
    22a8:	e7c4      	b.n	2234 <setvbuf+0xc4>
    22aa:	60a0      	str	r0, [r4, #8]
    22ac:	e7c2      	b.n	2234 <setvbuf+0xc4>
    22ae:	2001      	movs	r0, #1
    22b0:	4240      	negs	r0, r0
    22b2:	e7bf      	b.n	2234 <setvbuf+0xc4>
    22b4:	20000040 	.word	0x20000040
    22b8:	000043c0 	.word	0x000043c0
    22bc:	fffff35c 	.word	0xfffff35c
    22c0:	000043e0 	.word	0x000043e0
    22c4:	000043a0 	.word	0x000043a0

000022c8 <strcmp>:
    22c8:	7802      	ldrb	r2, [r0, #0]
    22ca:	780b      	ldrb	r3, [r1, #0]
    22cc:	2a00      	cmp	r2, #0
    22ce:	d003      	beq.n	22d8 <strcmp+0x10>
    22d0:	3001      	adds	r0, #1
    22d2:	3101      	adds	r1, #1
    22d4:	429a      	cmp	r2, r3
    22d6:	d0f7      	beq.n	22c8 <strcmp>
    22d8:	1ad0      	subs	r0, r2, r3
    22da:	4770      	bx	lr

000022dc <strtok>:
    22dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22de:	4b12      	ldr	r3, [pc, #72]	; (2328 <strtok+0x4c>)
    22e0:	0006      	movs	r6, r0
    22e2:	681d      	ldr	r5, [r3, #0]
    22e4:	000f      	movs	r7, r1
    22e6:	6dac      	ldr	r4, [r5, #88]	; 0x58
    22e8:	2c00      	cmp	r4, #0
    22ea:	d116      	bne.n	231a <strtok+0x3e>
    22ec:	2050      	movs	r0, #80	; 0x50
    22ee:	f000 fbfb 	bl	2ae8 <malloc>
    22f2:	65a8      	str	r0, [r5, #88]	; 0x58
    22f4:	6004      	str	r4, [r0, #0]
    22f6:	6044      	str	r4, [r0, #4]
    22f8:	6084      	str	r4, [r0, #8]
    22fa:	60c4      	str	r4, [r0, #12]
    22fc:	6104      	str	r4, [r0, #16]
    22fe:	6144      	str	r4, [r0, #20]
    2300:	6184      	str	r4, [r0, #24]
    2302:	6284      	str	r4, [r0, #40]	; 0x28
    2304:	62c4      	str	r4, [r0, #44]	; 0x2c
    2306:	6304      	str	r4, [r0, #48]	; 0x30
    2308:	6344      	str	r4, [r0, #52]	; 0x34
    230a:	6384      	str	r4, [r0, #56]	; 0x38
    230c:	63c4      	str	r4, [r0, #60]	; 0x3c
    230e:	6404      	str	r4, [r0, #64]	; 0x40
    2310:	6444      	str	r4, [r0, #68]	; 0x44
    2312:	6484      	str	r4, [r0, #72]	; 0x48
    2314:	64c4      	str	r4, [r0, #76]	; 0x4c
    2316:	7704      	strb	r4, [r0, #28]
    2318:	6244      	str	r4, [r0, #36]	; 0x24
    231a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    231c:	0039      	movs	r1, r7
    231e:	0030      	movs	r0, r6
    2320:	2301      	movs	r3, #1
    2322:	f000 f803 	bl	232c <__strtok_r>
    2326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2328:	20000040 	.word	0x20000040

0000232c <__strtok_r>:
    232c:	b5f0      	push	{r4, r5, r6, r7, lr}
    232e:	2800      	cmp	r0, #0
    2330:	d104      	bne.n	233c <__strtok_r+0x10>
    2332:	6810      	ldr	r0, [r2, #0]
    2334:	2800      	cmp	r0, #0
    2336:	d101      	bne.n	233c <__strtok_r+0x10>
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233a:	0020      	movs	r0, r4
    233c:	000e      	movs	r6, r1
    233e:	7805      	ldrb	r5, [r0, #0]
    2340:	1c44      	adds	r4, r0, #1
    2342:	7837      	ldrb	r7, [r6, #0]
    2344:	2f00      	cmp	r7, #0
    2346:	d104      	bne.n	2352 <__strtok_r+0x26>
    2348:	2d00      	cmp	r5, #0
    234a:	d110      	bne.n	236e <__strtok_r+0x42>
    234c:	6015      	str	r5, [r2, #0]
    234e:	0028      	movs	r0, r5
    2350:	e7f2      	b.n	2338 <__strtok_r+0xc>
    2352:	3601      	adds	r6, #1
    2354:	42bd      	cmp	r5, r7
    2356:	d1f4      	bne.n	2342 <__strtok_r+0x16>
    2358:	2b00      	cmp	r3, #0
    235a:	d1ee      	bne.n	233a <__strtok_r+0xe>
    235c:	6014      	str	r4, [r2, #0]
    235e:	7003      	strb	r3, [r0, #0]
    2360:	e7ea      	b.n	2338 <__strtok_r+0xc>
    2362:	0033      	movs	r3, r6
    2364:	e00e      	b.n	2384 <__strtok_r+0x58>
    2366:	3501      	adds	r5, #1
    2368:	001c      	movs	r4, r3
    236a:	2f00      	cmp	r7, #0
    236c:	d102      	bne.n	2374 <__strtok_r+0x48>
    236e:	000d      	movs	r5, r1
    2370:	7826      	ldrb	r6, [r4, #0]
    2372:	1c63      	adds	r3, r4, #1
    2374:	782f      	ldrb	r7, [r5, #0]
    2376:	42be      	cmp	r6, r7
    2378:	d1f5      	bne.n	2366 <__strtok_r+0x3a>
    237a:	2e00      	cmp	r6, #0
    237c:	d0f1      	beq.n	2362 <__strtok_r+0x36>
    237e:	2400      	movs	r4, #0
    2380:	1e59      	subs	r1, r3, #1
    2382:	700c      	strb	r4, [r1, #0]
    2384:	6013      	str	r3, [r2, #0]
    2386:	e7d7      	b.n	2338 <__strtok_r+0xc>

00002388 <_strtol_l.isra.0>:
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	001f      	movs	r7, r3
    238c:	000e      	movs	r6, r1
    238e:	b087      	sub	sp, #28
    2390:	9005      	str	r0, [sp, #20]
    2392:	9103      	str	r1, [sp, #12]
    2394:	9202      	str	r2, [sp, #8]
    2396:	980c      	ldr	r0, [sp, #48]	; 0x30
    2398:	7834      	ldrb	r4, [r6, #0]
    239a:	f000 fb28 	bl	29ee <__locale_ctype_ptr_l>
    239e:	2208      	movs	r2, #8
    23a0:	1900      	adds	r0, r0, r4
    23a2:	7843      	ldrb	r3, [r0, #1]
    23a4:	1c75      	adds	r5, r6, #1
    23a6:	4013      	ands	r3, r2
    23a8:	d10c      	bne.n	23c4 <_strtol_l.isra.0+0x3c>
    23aa:	2c2d      	cmp	r4, #45	; 0x2d
    23ac:	d10c      	bne.n	23c8 <_strtol_l.isra.0+0x40>
    23ae:	3301      	adds	r3, #1
    23b0:	782c      	ldrb	r4, [r5, #0]
    23b2:	9301      	str	r3, [sp, #4]
    23b4:	1cb5      	adds	r5, r6, #2
    23b6:	2f00      	cmp	r7, #0
    23b8:	d00c      	beq.n	23d4 <_strtol_l.isra.0+0x4c>
    23ba:	2f10      	cmp	r7, #16
    23bc:	d114      	bne.n	23e8 <_strtol_l.isra.0+0x60>
    23be:	2c30      	cmp	r4, #48	; 0x30
    23c0:	d00a      	beq.n	23d8 <_strtol_l.isra.0+0x50>
    23c2:	e011      	b.n	23e8 <_strtol_l.isra.0+0x60>
    23c4:	002e      	movs	r6, r5
    23c6:	e7e6      	b.n	2396 <_strtol_l.isra.0+0xe>
    23c8:	9301      	str	r3, [sp, #4]
    23ca:	2c2b      	cmp	r4, #43	; 0x2b
    23cc:	d1f3      	bne.n	23b6 <_strtol_l.isra.0+0x2e>
    23ce:	782c      	ldrb	r4, [r5, #0]
    23d0:	1cb5      	adds	r5, r6, #2
    23d2:	e7f0      	b.n	23b6 <_strtol_l.isra.0+0x2e>
    23d4:	2c30      	cmp	r4, #48	; 0x30
    23d6:	d12f      	bne.n	2438 <_strtol_l.isra.0+0xb0>
    23d8:	2220      	movs	r2, #32
    23da:	782b      	ldrb	r3, [r5, #0]
    23dc:	4393      	bics	r3, r2
    23de:	2b58      	cmp	r3, #88	; 0x58
    23e0:	d151      	bne.n	2486 <_strtol_l.isra.0+0xfe>
    23e2:	2710      	movs	r7, #16
    23e4:	786c      	ldrb	r4, [r5, #1]
    23e6:	3502      	adds	r5, #2
    23e8:	9b01      	ldr	r3, [sp, #4]
    23ea:	4a29      	ldr	r2, [pc, #164]	; (2490 <_strtol_l.isra.0+0x108>)
    23ec:	0039      	movs	r1, r7
    23ee:	189e      	adds	r6, r3, r2
    23f0:	0030      	movs	r0, r6
    23f2:	f7ff fdb3 	bl	1f5c <__aeabi_uidivmod>
    23f6:	0030      	movs	r0, r6
    23f8:	9104      	str	r1, [sp, #16]
    23fa:	0039      	movs	r1, r7
    23fc:	f7ff fd28 	bl	1e50 <__udivsi3>
    2400:	2101      	movs	r1, #1
    2402:	2300      	movs	r3, #0
    2404:	4249      	negs	r1, r1
    2406:	0002      	movs	r2, r0
    2408:	468c      	mov	ip, r1
    240a:	0018      	movs	r0, r3
    240c:	0021      	movs	r1, r4
    240e:	3930      	subs	r1, #48	; 0x30
    2410:	2909      	cmp	r1, #9
    2412:	d813      	bhi.n	243c <_strtol_l.isra.0+0xb4>
    2414:	000c      	movs	r4, r1
    2416:	42a7      	cmp	r7, r4
    2418:	dd1c      	ble.n	2454 <_strtol_l.isra.0+0xcc>
    241a:	1c59      	adds	r1, r3, #1
    241c:	d009      	beq.n	2432 <_strtol_l.isra.0+0xaa>
    241e:	4663      	mov	r3, ip
    2420:	4282      	cmp	r2, r0
    2422:	d306      	bcc.n	2432 <_strtol_l.isra.0+0xaa>
    2424:	d102      	bne.n	242c <_strtol_l.isra.0+0xa4>
    2426:	9904      	ldr	r1, [sp, #16]
    2428:	42a1      	cmp	r1, r4
    242a:	db02      	blt.n	2432 <_strtol_l.isra.0+0xaa>
    242c:	2301      	movs	r3, #1
    242e:	4378      	muls	r0, r7
    2430:	1820      	adds	r0, r4, r0
    2432:	782c      	ldrb	r4, [r5, #0]
    2434:	3501      	adds	r5, #1
    2436:	e7e9      	b.n	240c <_strtol_l.isra.0+0x84>
    2438:	270a      	movs	r7, #10
    243a:	e7d5      	b.n	23e8 <_strtol_l.isra.0+0x60>
    243c:	0021      	movs	r1, r4
    243e:	3941      	subs	r1, #65	; 0x41
    2440:	2919      	cmp	r1, #25
    2442:	d801      	bhi.n	2448 <_strtol_l.isra.0+0xc0>
    2444:	3c37      	subs	r4, #55	; 0x37
    2446:	e7e6      	b.n	2416 <_strtol_l.isra.0+0x8e>
    2448:	0021      	movs	r1, r4
    244a:	3961      	subs	r1, #97	; 0x61
    244c:	2919      	cmp	r1, #25
    244e:	d801      	bhi.n	2454 <_strtol_l.isra.0+0xcc>
    2450:	3c57      	subs	r4, #87	; 0x57
    2452:	e7e0      	b.n	2416 <_strtol_l.isra.0+0x8e>
    2454:	1c5a      	adds	r2, r3, #1
    2456:	d108      	bne.n	246a <_strtol_l.isra.0+0xe2>
    2458:	9a05      	ldr	r2, [sp, #20]
    245a:	3323      	adds	r3, #35	; 0x23
    245c:	6013      	str	r3, [r2, #0]
    245e:	9b02      	ldr	r3, [sp, #8]
    2460:	0030      	movs	r0, r6
    2462:	2b00      	cmp	r3, #0
    2464:	d10b      	bne.n	247e <_strtol_l.isra.0+0xf6>
    2466:	b007      	add	sp, #28
    2468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    246a:	9a01      	ldr	r2, [sp, #4]
    246c:	2a00      	cmp	r2, #0
    246e:	d000      	beq.n	2472 <_strtol_l.isra.0+0xea>
    2470:	4240      	negs	r0, r0
    2472:	9a02      	ldr	r2, [sp, #8]
    2474:	2a00      	cmp	r2, #0
    2476:	d0f6      	beq.n	2466 <_strtol_l.isra.0+0xde>
    2478:	9a03      	ldr	r2, [sp, #12]
    247a:	2b00      	cmp	r3, #0
    247c:	d000      	beq.n	2480 <_strtol_l.isra.0+0xf8>
    247e:	1e6a      	subs	r2, r5, #1
    2480:	9b02      	ldr	r3, [sp, #8]
    2482:	601a      	str	r2, [r3, #0]
    2484:	e7ef      	b.n	2466 <_strtol_l.isra.0+0xde>
    2486:	2430      	movs	r4, #48	; 0x30
    2488:	2f00      	cmp	r7, #0
    248a:	d1ad      	bne.n	23e8 <_strtol_l.isra.0+0x60>
    248c:	3708      	adds	r7, #8
    248e:	e7ab      	b.n	23e8 <_strtol_l.isra.0+0x60>
    2490:	7fffffff 	.word	0x7fffffff

00002494 <_strtol_r>:
    2494:	b513      	push	{r0, r1, r4, lr}
    2496:	4c05      	ldr	r4, [pc, #20]	; (24ac <_strtol_r+0x18>)
    2498:	6824      	ldr	r4, [r4, #0]
    249a:	6a24      	ldr	r4, [r4, #32]
    249c:	2c00      	cmp	r4, #0
    249e:	d100      	bne.n	24a2 <_strtol_r+0xe>
    24a0:	4c03      	ldr	r4, [pc, #12]	; (24b0 <_strtol_r+0x1c>)
    24a2:	9400      	str	r4, [sp, #0]
    24a4:	f7ff ff70 	bl	2388 <_strtol_l.isra.0>
    24a8:	bd16      	pop	{r1, r2, r4, pc}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	20000040 	.word	0x20000040
    24b0:	200000a4 	.word	0x200000a4

000024b4 <strtol>:
    24b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    24b6:	0013      	movs	r3, r2
    24b8:	4a06      	ldr	r2, [pc, #24]	; (24d4 <strtol+0x20>)
    24ba:	0005      	movs	r5, r0
    24bc:	6810      	ldr	r0, [r2, #0]
    24be:	6a04      	ldr	r4, [r0, #32]
    24c0:	2c00      	cmp	r4, #0
    24c2:	d100      	bne.n	24c6 <strtol+0x12>
    24c4:	4c04      	ldr	r4, [pc, #16]	; (24d8 <strtol+0x24>)
    24c6:	000a      	movs	r2, r1
    24c8:	9400      	str	r4, [sp, #0]
    24ca:	0029      	movs	r1, r5
    24cc:	f7ff ff5c 	bl	2388 <_strtol_l.isra.0>
    24d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	20000040 	.word	0x20000040
    24d8:	200000a4 	.word	0x200000a4

000024dc <__swbuf_r>:
    24dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24de:	0005      	movs	r5, r0
    24e0:	000e      	movs	r6, r1
    24e2:	0014      	movs	r4, r2
    24e4:	2800      	cmp	r0, #0
    24e6:	d004      	beq.n	24f2 <__swbuf_r+0x16>
    24e8:	6983      	ldr	r3, [r0, #24]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d101      	bne.n	24f2 <__swbuf_r+0x16>
    24ee:	f000 f9cd 	bl	288c <__sinit>
    24f2:	4b22      	ldr	r3, [pc, #136]	; (257c <__swbuf_r+0xa0>)
    24f4:	429c      	cmp	r4, r3
    24f6:	d12d      	bne.n	2554 <__swbuf_r+0x78>
    24f8:	686c      	ldr	r4, [r5, #4]
    24fa:	69a3      	ldr	r3, [r4, #24]
    24fc:	60a3      	str	r3, [r4, #8]
    24fe:	89a3      	ldrh	r3, [r4, #12]
    2500:	071b      	lsls	r3, r3, #28
    2502:	d531      	bpl.n	2568 <__swbuf_r+0x8c>
    2504:	6923      	ldr	r3, [r4, #16]
    2506:	2b00      	cmp	r3, #0
    2508:	d02e      	beq.n	2568 <__swbuf_r+0x8c>
    250a:	6823      	ldr	r3, [r4, #0]
    250c:	6922      	ldr	r2, [r4, #16]
    250e:	b2f7      	uxtb	r7, r6
    2510:	1a98      	subs	r0, r3, r2
    2512:	6963      	ldr	r3, [r4, #20]
    2514:	b2f6      	uxtb	r6, r6
    2516:	4298      	cmp	r0, r3
    2518:	db05      	blt.n	2526 <__swbuf_r+0x4a>
    251a:	0021      	movs	r1, r4
    251c:	0028      	movs	r0, r5
    251e:	f000 f933 	bl	2788 <_fflush_r>
    2522:	2800      	cmp	r0, #0
    2524:	d126      	bne.n	2574 <__swbuf_r+0x98>
    2526:	68a3      	ldr	r3, [r4, #8]
    2528:	3001      	adds	r0, #1
    252a:	3b01      	subs	r3, #1
    252c:	60a3      	str	r3, [r4, #8]
    252e:	6823      	ldr	r3, [r4, #0]
    2530:	1c5a      	adds	r2, r3, #1
    2532:	6022      	str	r2, [r4, #0]
    2534:	701f      	strb	r7, [r3, #0]
    2536:	6963      	ldr	r3, [r4, #20]
    2538:	4298      	cmp	r0, r3
    253a:	d004      	beq.n	2546 <__swbuf_r+0x6a>
    253c:	89a3      	ldrh	r3, [r4, #12]
    253e:	07db      	lsls	r3, r3, #31
    2540:	d51a      	bpl.n	2578 <__swbuf_r+0x9c>
    2542:	2e0a      	cmp	r6, #10
    2544:	d118      	bne.n	2578 <__swbuf_r+0x9c>
    2546:	0021      	movs	r1, r4
    2548:	0028      	movs	r0, r5
    254a:	f000 f91d 	bl	2788 <_fflush_r>
    254e:	2800      	cmp	r0, #0
    2550:	d012      	beq.n	2578 <__swbuf_r+0x9c>
    2552:	e00f      	b.n	2574 <__swbuf_r+0x98>
    2554:	4b0a      	ldr	r3, [pc, #40]	; (2580 <__swbuf_r+0xa4>)
    2556:	429c      	cmp	r4, r3
    2558:	d101      	bne.n	255e <__swbuf_r+0x82>
    255a:	68ac      	ldr	r4, [r5, #8]
    255c:	e7cd      	b.n	24fa <__swbuf_r+0x1e>
    255e:	4b09      	ldr	r3, [pc, #36]	; (2584 <__swbuf_r+0xa8>)
    2560:	429c      	cmp	r4, r3
    2562:	d1ca      	bne.n	24fa <__swbuf_r+0x1e>
    2564:	68ec      	ldr	r4, [r5, #12]
    2566:	e7c8      	b.n	24fa <__swbuf_r+0x1e>
    2568:	0021      	movs	r1, r4
    256a:	0028      	movs	r0, r5
    256c:	f000 f80c 	bl	2588 <__swsetup_r>
    2570:	2800      	cmp	r0, #0
    2572:	d0ca      	beq.n	250a <__swbuf_r+0x2e>
    2574:	2601      	movs	r6, #1
    2576:	4276      	negs	r6, r6
    2578:	0030      	movs	r0, r6
    257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    257c:	000043c0 	.word	0x000043c0
    2580:	000043e0 	.word	0x000043e0
    2584:	000043a0 	.word	0x000043a0

00002588 <__swsetup_r>:
    2588:	4b36      	ldr	r3, [pc, #216]	; (2664 <__swsetup_r+0xdc>)
    258a:	b570      	push	{r4, r5, r6, lr}
    258c:	681d      	ldr	r5, [r3, #0]
    258e:	0006      	movs	r6, r0
    2590:	000c      	movs	r4, r1
    2592:	2d00      	cmp	r5, #0
    2594:	d005      	beq.n	25a2 <__swsetup_r+0x1a>
    2596:	69ab      	ldr	r3, [r5, #24]
    2598:	2b00      	cmp	r3, #0
    259a:	d102      	bne.n	25a2 <__swsetup_r+0x1a>
    259c:	0028      	movs	r0, r5
    259e:	f000 f975 	bl	288c <__sinit>
    25a2:	4b31      	ldr	r3, [pc, #196]	; (2668 <__swsetup_r+0xe0>)
    25a4:	429c      	cmp	r4, r3
    25a6:	d10f      	bne.n	25c8 <__swsetup_r+0x40>
    25a8:	686c      	ldr	r4, [r5, #4]
    25aa:	230c      	movs	r3, #12
    25ac:	5ee2      	ldrsh	r2, [r4, r3]
    25ae:	b293      	uxth	r3, r2
    25b0:	0719      	lsls	r1, r3, #28
    25b2:	d42d      	bmi.n	2610 <__swsetup_r+0x88>
    25b4:	06d9      	lsls	r1, r3, #27
    25b6:	d411      	bmi.n	25dc <__swsetup_r+0x54>
    25b8:	2309      	movs	r3, #9
    25ba:	2001      	movs	r0, #1
    25bc:	6033      	str	r3, [r6, #0]
    25be:	3337      	adds	r3, #55	; 0x37
    25c0:	4313      	orrs	r3, r2
    25c2:	81a3      	strh	r3, [r4, #12]
    25c4:	4240      	negs	r0, r0
    25c6:	bd70      	pop	{r4, r5, r6, pc}
    25c8:	4b28      	ldr	r3, [pc, #160]	; (266c <__swsetup_r+0xe4>)
    25ca:	429c      	cmp	r4, r3
    25cc:	d101      	bne.n	25d2 <__swsetup_r+0x4a>
    25ce:	68ac      	ldr	r4, [r5, #8]
    25d0:	e7eb      	b.n	25aa <__swsetup_r+0x22>
    25d2:	4b27      	ldr	r3, [pc, #156]	; (2670 <__swsetup_r+0xe8>)
    25d4:	429c      	cmp	r4, r3
    25d6:	d1e8      	bne.n	25aa <__swsetup_r+0x22>
    25d8:	68ec      	ldr	r4, [r5, #12]
    25da:	e7e6      	b.n	25aa <__swsetup_r+0x22>
    25dc:	075b      	lsls	r3, r3, #29
    25de:	d513      	bpl.n	2608 <__swsetup_r+0x80>
    25e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25e2:	2900      	cmp	r1, #0
    25e4:	d008      	beq.n	25f8 <__swsetup_r+0x70>
    25e6:	0023      	movs	r3, r4
    25e8:	3344      	adds	r3, #68	; 0x44
    25ea:	4299      	cmp	r1, r3
    25ec:	d002      	beq.n	25f4 <__swsetup_r+0x6c>
    25ee:	0030      	movs	r0, r6
    25f0:	f000 fa96 	bl	2b20 <_free_r>
    25f4:	2300      	movs	r3, #0
    25f6:	6363      	str	r3, [r4, #52]	; 0x34
    25f8:	2224      	movs	r2, #36	; 0x24
    25fa:	89a3      	ldrh	r3, [r4, #12]
    25fc:	4393      	bics	r3, r2
    25fe:	81a3      	strh	r3, [r4, #12]
    2600:	2300      	movs	r3, #0
    2602:	6063      	str	r3, [r4, #4]
    2604:	6923      	ldr	r3, [r4, #16]
    2606:	6023      	str	r3, [r4, #0]
    2608:	2308      	movs	r3, #8
    260a:	89a2      	ldrh	r2, [r4, #12]
    260c:	4313      	orrs	r3, r2
    260e:	81a3      	strh	r3, [r4, #12]
    2610:	6923      	ldr	r3, [r4, #16]
    2612:	2b00      	cmp	r3, #0
    2614:	d10b      	bne.n	262e <__swsetup_r+0xa6>
    2616:	21a0      	movs	r1, #160	; 0xa0
    2618:	2280      	movs	r2, #128	; 0x80
    261a:	89a3      	ldrh	r3, [r4, #12]
    261c:	0089      	lsls	r1, r1, #2
    261e:	0092      	lsls	r2, r2, #2
    2620:	400b      	ands	r3, r1
    2622:	4293      	cmp	r3, r2
    2624:	d003      	beq.n	262e <__swsetup_r+0xa6>
    2626:	0021      	movs	r1, r4
    2628:	0030      	movs	r0, r6
    262a:	f000 fa19 	bl	2a60 <__smakebuf_r>
    262e:	2301      	movs	r3, #1
    2630:	89a2      	ldrh	r2, [r4, #12]
    2632:	4013      	ands	r3, r2
    2634:	d011      	beq.n	265a <__swsetup_r+0xd2>
    2636:	2300      	movs	r3, #0
    2638:	60a3      	str	r3, [r4, #8]
    263a:	6963      	ldr	r3, [r4, #20]
    263c:	425b      	negs	r3, r3
    263e:	61a3      	str	r3, [r4, #24]
    2640:	2000      	movs	r0, #0
    2642:	6923      	ldr	r3, [r4, #16]
    2644:	4283      	cmp	r3, r0
    2646:	d1be      	bne.n	25c6 <__swsetup_r+0x3e>
    2648:	230c      	movs	r3, #12
    264a:	5ee2      	ldrsh	r2, [r4, r3]
    264c:	0613      	lsls	r3, r2, #24
    264e:	d5ba      	bpl.n	25c6 <__swsetup_r+0x3e>
    2650:	2340      	movs	r3, #64	; 0x40
    2652:	4313      	orrs	r3, r2
    2654:	81a3      	strh	r3, [r4, #12]
    2656:	3801      	subs	r0, #1
    2658:	e7b5      	b.n	25c6 <__swsetup_r+0x3e>
    265a:	0792      	lsls	r2, r2, #30
    265c:	d400      	bmi.n	2660 <__swsetup_r+0xd8>
    265e:	6963      	ldr	r3, [r4, #20]
    2660:	60a3      	str	r3, [r4, #8]
    2662:	e7ed      	b.n	2640 <__swsetup_r+0xb8>
    2664:	20000040 	.word	0x20000040
    2668:	000043c0 	.word	0x000043c0
    266c:	000043e0 	.word	0x000043e0
    2670:	000043a0 	.word	0x000043a0

00002674 <__sflush_r>:
    2674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2676:	898a      	ldrh	r2, [r1, #12]
    2678:	0005      	movs	r5, r0
    267a:	000c      	movs	r4, r1
    267c:	0713      	lsls	r3, r2, #28
    267e:	d460      	bmi.n	2742 <__sflush_r+0xce>
    2680:	684b      	ldr	r3, [r1, #4]
    2682:	2b00      	cmp	r3, #0
    2684:	dc04      	bgt.n	2690 <__sflush_r+0x1c>
    2686:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2688:	2b00      	cmp	r3, #0
    268a:	dc01      	bgt.n	2690 <__sflush_r+0x1c>
    268c:	2000      	movs	r0, #0
    268e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2690:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2692:	2f00      	cmp	r7, #0
    2694:	d0fa      	beq.n	268c <__sflush_r+0x18>
    2696:	2300      	movs	r3, #0
    2698:	682e      	ldr	r6, [r5, #0]
    269a:	602b      	str	r3, [r5, #0]
    269c:	2380      	movs	r3, #128	; 0x80
    269e:	015b      	lsls	r3, r3, #5
    26a0:	401a      	ands	r2, r3
    26a2:	d034      	beq.n	270e <__sflush_r+0x9a>
    26a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    26a6:	89a3      	ldrh	r3, [r4, #12]
    26a8:	075b      	lsls	r3, r3, #29
    26aa:	d506      	bpl.n	26ba <__sflush_r+0x46>
    26ac:	6863      	ldr	r3, [r4, #4]
    26ae:	1ac0      	subs	r0, r0, r3
    26b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    26b2:	2b00      	cmp	r3, #0
    26b4:	d001      	beq.n	26ba <__sflush_r+0x46>
    26b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    26b8:	1ac0      	subs	r0, r0, r3
    26ba:	0002      	movs	r2, r0
    26bc:	6a21      	ldr	r1, [r4, #32]
    26be:	2300      	movs	r3, #0
    26c0:	0028      	movs	r0, r5
    26c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    26c4:	47b8      	blx	r7
    26c6:	89a1      	ldrh	r1, [r4, #12]
    26c8:	1c43      	adds	r3, r0, #1
    26ca:	d106      	bne.n	26da <__sflush_r+0x66>
    26cc:	682b      	ldr	r3, [r5, #0]
    26ce:	2b1d      	cmp	r3, #29
    26d0:	d831      	bhi.n	2736 <__sflush_r+0xc2>
    26d2:	4a2c      	ldr	r2, [pc, #176]	; (2784 <__sflush_r+0x110>)
    26d4:	40da      	lsrs	r2, r3
    26d6:	07d3      	lsls	r3, r2, #31
    26d8:	d52d      	bpl.n	2736 <__sflush_r+0xc2>
    26da:	2300      	movs	r3, #0
    26dc:	6063      	str	r3, [r4, #4]
    26de:	6923      	ldr	r3, [r4, #16]
    26e0:	6023      	str	r3, [r4, #0]
    26e2:	04cb      	lsls	r3, r1, #19
    26e4:	d505      	bpl.n	26f2 <__sflush_r+0x7e>
    26e6:	1c43      	adds	r3, r0, #1
    26e8:	d102      	bne.n	26f0 <__sflush_r+0x7c>
    26ea:	682b      	ldr	r3, [r5, #0]
    26ec:	2b00      	cmp	r3, #0
    26ee:	d100      	bne.n	26f2 <__sflush_r+0x7e>
    26f0:	6560      	str	r0, [r4, #84]	; 0x54
    26f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26f4:	602e      	str	r6, [r5, #0]
    26f6:	2900      	cmp	r1, #0
    26f8:	d0c8      	beq.n	268c <__sflush_r+0x18>
    26fa:	0023      	movs	r3, r4
    26fc:	3344      	adds	r3, #68	; 0x44
    26fe:	4299      	cmp	r1, r3
    2700:	d002      	beq.n	2708 <__sflush_r+0x94>
    2702:	0028      	movs	r0, r5
    2704:	f000 fa0c 	bl	2b20 <_free_r>
    2708:	2000      	movs	r0, #0
    270a:	6360      	str	r0, [r4, #52]	; 0x34
    270c:	e7bf      	b.n	268e <__sflush_r+0x1a>
    270e:	2301      	movs	r3, #1
    2710:	6a21      	ldr	r1, [r4, #32]
    2712:	0028      	movs	r0, r5
    2714:	47b8      	blx	r7
    2716:	1c43      	adds	r3, r0, #1
    2718:	d1c5      	bne.n	26a6 <__sflush_r+0x32>
    271a:	682b      	ldr	r3, [r5, #0]
    271c:	2b00      	cmp	r3, #0
    271e:	d0c2      	beq.n	26a6 <__sflush_r+0x32>
    2720:	2b1d      	cmp	r3, #29
    2722:	d001      	beq.n	2728 <__sflush_r+0xb4>
    2724:	2b16      	cmp	r3, #22
    2726:	d101      	bne.n	272c <__sflush_r+0xb8>
    2728:	602e      	str	r6, [r5, #0]
    272a:	e7af      	b.n	268c <__sflush_r+0x18>
    272c:	2340      	movs	r3, #64	; 0x40
    272e:	89a2      	ldrh	r2, [r4, #12]
    2730:	4313      	orrs	r3, r2
    2732:	81a3      	strh	r3, [r4, #12]
    2734:	e7ab      	b.n	268e <__sflush_r+0x1a>
    2736:	2340      	movs	r3, #64	; 0x40
    2738:	430b      	orrs	r3, r1
    273a:	2001      	movs	r0, #1
    273c:	81a3      	strh	r3, [r4, #12]
    273e:	4240      	negs	r0, r0
    2740:	e7a5      	b.n	268e <__sflush_r+0x1a>
    2742:	690f      	ldr	r7, [r1, #16]
    2744:	2f00      	cmp	r7, #0
    2746:	d0a1      	beq.n	268c <__sflush_r+0x18>
    2748:	680b      	ldr	r3, [r1, #0]
    274a:	600f      	str	r7, [r1, #0]
    274c:	1bdb      	subs	r3, r3, r7
    274e:	9301      	str	r3, [sp, #4]
    2750:	2300      	movs	r3, #0
    2752:	0792      	lsls	r2, r2, #30
    2754:	d100      	bne.n	2758 <__sflush_r+0xe4>
    2756:	694b      	ldr	r3, [r1, #20]
    2758:	60a3      	str	r3, [r4, #8]
    275a:	9b01      	ldr	r3, [sp, #4]
    275c:	2b00      	cmp	r3, #0
    275e:	dc00      	bgt.n	2762 <__sflush_r+0xee>
    2760:	e794      	b.n	268c <__sflush_r+0x18>
    2762:	9b01      	ldr	r3, [sp, #4]
    2764:	003a      	movs	r2, r7
    2766:	6a21      	ldr	r1, [r4, #32]
    2768:	0028      	movs	r0, r5
    276a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    276c:	47b0      	blx	r6
    276e:	2800      	cmp	r0, #0
    2770:	dc03      	bgt.n	277a <__sflush_r+0x106>
    2772:	2340      	movs	r3, #64	; 0x40
    2774:	89a2      	ldrh	r2, [r4, #12]
    2776:	4313      	orrs	r3, r2
    2778:	e7df      	b.n	273a <__sflush_r+0xc6>
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	183f      	adds	r7, r7, r0
    277e:	1a1b      	subs	r3, r3, r0
    2780:	9301      	str	r3, [sp, #4]
    2782:	e7ea      	b.n	275a <__sflush_r+0xe6>
    2784:	20400001 	.word	0x20400001

00002788 <_fflush_r>:
    2788:	690b      	ldr	r3, [r1, #16]
    278a:	b570      	push	{r4, r5, r6, lr}
    278c:	0005      	movs	r5, r0
    278e:	000c      	movs	r4, r1
    2790:	2b00      	cmp	r3, #0
    2792:	d101      	bne.n	2798 <_fflush_r+0x10>
    2794:	2000      	movs	r0, #0
    2796:	bd70      	pop	{r4, r5, r6, pc}
    2798:	2800      	cmp	r0, #0
    279a:	d004      	beq.n	27a6 <_fflush_r+0x1e>
    279c:	6983      	ldr	r3, [r0, #24]
    279e:	2b00      	cmp	r3, #0
    27a0:	d101      	bne.n	27a6 <_fflush_r+0x1e>
    27a2:	f000 f873 	bl	288c <__sinit>
    27a6:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <_fflush_r+0x4c>)
    27a8:	429c      	cmp	r4, r3
    27aa:	d109      	bne.n	27c0 <_fflush_r+0x38>
    27ac:	686c      	ldr	r4, [r5, #4]
    27ae:	220c      	movs	r2, #12
    27b0:	5ea3      	ldrsh	r3, [r4, r2]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d0ee      	beq.n	2794 <_fflush_r+0xc>
    27b6:	0021      	movs	r1, r4
    27b8:	0028      	movs	r0, r5
    27ba:	f7ff ff5b 	bl	2674 <__sflush_r>
    27be:	e7ea      	b.n	2796 <_fflush_r+0xe>
    27c0:	4b05      	ldr	r3, [pc, #20]	; (27d8 <_fflush_r+0x50>)
    27c2:	429c      	cmp	r4, r3
    27c4:	d101      	bne.n	27ca <_fflush_r+0x42>
    27c6:	68ac      	ldr	r4, [r5, #8]
    27c8:	e7f1      	b.n	27ae <_fflush_r+0x26>
    27ca:	4b04      	ldr	r3, [pc, #16]	; (27dc <_fflush_r+0x54>)
    27cc:	429c      	cmp	r4, r3
    27ce:	d1ee      	bne.n	27ae <_fflush_r+0x26>
    27d0:	68ec      	ldr	r4, [r5, #12]
    27d2:	e7ec      	b.n	27ae <_fflush_r+0x26>
    27d4:	000043c0 	.word	0x000043c0
    27d8:	000043e0 	.word	0x000043e0
    27dc:	000043a0 	.word	0x000043a0

000027e0 <fflush>:
    27e0:	b510      	push	{r4, lr}
    27e2:	1e01      	subs	r1, r0, #0
    27e4:	d105      	bne.n	27f2 <fflush+0x12>
    27e6:	4b05      	ldr	r3, [pc, #20]	; (27fc <fflush+0x1c>)
    27e8:	4905      	ldr	r1, [pc, #20]	; (2800 <fflush+0x20>)
    27ea:	6818      	ldr	r0, [r3, #0]
    27ec:	f000 f8de 	bl	29ac <_fwalk_reent>
    27f0:	bd10      	pop	{r4, pc}
    27f2:	4b04      	ldr	r3, [pc, #16]	; (2804 <fflush+0x24>)
    27f4:	6818      	ldr	r0, [r3, #0]
    27f6:	f7ff ffc7 	bl	2788 <_fflush_r>
    27fa:	e7f9      	b.n	27f0 <fflush+0x10>
    27fc:	0000439c 	.word	0x0000439c
    2800:	00002789 	.word	0x00002789
    2804:	20000040 	.word	0x20000040

00002808 <_cleanup_r>:
    2808:	b510      	push	{r4, lr}
    280a:	4902      	ldr	r1, [pc, #8]	; (2814 <_cleanup_r+0xc>)
    280c:	f000 f8ce 	bl	29ac <_fwalk_reent>
    2810:	bd10      	pop	{r4, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	00002789 	.word	0x00002789

00002818 <std.isra.0>:
    2818:	2300      	movs	r3, #0
    281a:	b510      	push	{r4, lr}
    281c:	0004      	movs	r4, r0
    281e:	6003      	str	r3, [r0, #0]
    2820:	6043      	str	r3, [r0, #4]
    2822:	6083      	str	r3, [r0, #8]
    2824:	8181      	strh	r1, [r0, #12]
    2826:	6643      	str	r3, [r0, #100]	; 0x64
    2828:	81c2      	strh	r2, [r0, #14]
    282a:	6103      	str	r3, [r0, #16]
    282c:	6143      	str	r3, [r0, #20]
    282e:	6183      	str	r3, [r0, #24]
    2830:	0019      	movs	r1, r3
    2832:	2208      	movs	r2, #8
    2834:	305c      	adds	r0, #92	; 0x5c
    2836:	f7ff fbeb 	bl	2010 <memset>
    283a:	4b05      	ldr	r3, [pc, #20]	; (2850 <std.isra.0+0x38>)
    283c:	6224      	str	r4, [r4, #32]
    283e:	6263      	str	r3, [r4, #36]	; 0x24
    2840:	4b04      	ldr	r3, [pc, #16]	; (2854 <std.isra.0+0x3c>)
    2842:	62a3      	str	r3, [r4, #40]	; 0x28
    2844:	4b04      	ldr	r3, [pc, #16]	; (2858 <std.isra.0+0x40>)
    2846:	62e3      	str	r3, [r4, #44]	; 0x2c
    2848:	4b04      	ldr	r3, [pc, #16]	; (285c <std.isra.0+0x44>)
    284a:	6323      	str	r3, [r4, #48]	; 0x30
    284c:	bd10      	pop	{r4, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	000039ed 	.word	0x000039ed
    2854:	00003a15 	.word	0x00003a15
    2858:	00003a4d 	.word	0x00003a4d
    285c:	00003a79 	.word	0x00003a79

00002860 <__sfmoreglue>:
    2860:	b570      	push	{r4, r5, r6, lr}
    2862:	2568      	movs	r5, #104	; 0x68
    2864:	1e4a      	subs	r2, r1, #1
    2866:	4355      	muls	r5, r2
    2868:	000e      	movs	r6, r1
    286a:	0029      	movs	r1, r5
    286c:	3174      	adds	r1, #116	; 0x74
    286e:	f000 f9a1 	bl	2bb4 <_malloc_r>
    2872:	1e04      	subs	r4, r0, #0
    2874:	d008      	beq.n	2888 <__sfmoreglue+0x28>
    2876:	2100      	movs	r1, #0
    2878:	002a      	movs	r2, r5
    287a:	6001      	str	r1, [r0, #0]
    287c:	6046      	str	r6, [r0, #4]
    287e:	300c      	adds	r0, #12
    2880:	60a0      	str	r0, [r4, #8]
    2882:	3268      	adds	r2, #104	; 0x68
    2884:	f7ff fbc4 	bl	2010 <memset>
    2888:	0020      	movs	r0, r4
    288a:	bd70      	pop	{r4, r5, r6, pc}

0000288c <__sinit>:
    288c:	6983      	ldr	r3, [r0, #24]
    288e:	b513      	push	{r0, r1, r4, lr}
    2890:	0004      	movs	r4, r0
    2892:	2b00      	cmp	r3, #0
    2894:	d128      	bne.n	28e8 <__sinit+0x5c>
    2896:	6483      	str	r3, [r0, #72]	; 0x48
    2898:	64c3      	str	r3, [r0, #76]	; 0x4c
    289a:	6503      	str	r3, [r0, #80]	; 0x50
    289c:	4b13      	ldr	r3, [pc, #76]	; (28ec <__sinit+0x60>)
    289e:	4a14      	ldr	r2, [pc, #80]	; (28f0 <__sinit+0x64>)
    28a0:	681b      	ldr	r3, [r3, #0]
    28a2:	6282      	str	r2, [r0, #40]	; 0x28
    28a4:	9301      	str	r3, [sp, #4]
    28a6:	4298      	cmp	r0, r3
    28a8:	d101      	bne.n	28ae <__sinit+0x22>
    28aa:	2301      	movs	r3, #1
    28ac:	6183      	str	r3, [r0, #24]
    28ae:	0020      	movs	r0, r4
    28b0:	f000 f820 	bl	28f4 <__sfp>
    28b4:	6060      	str	r0, [r4, #4]
    28b6:	0020      	movs	r0, r4
    28b8:	f000 f81c 	bl	28f4 <__sfp>
    28bc:	60a0      	str	r0, [r4, #8]
    28be:	0020      	movs	r0, r4
    28c0:	f000 f818 	bl	28f4 <__sfp>
    28c4:	2200      	movs	r2, #0
    28c6:	60e0      	str	r0, [r4, #12]
    28c8:	2104      	movs	r1, #4
    28ca:	6860      	ldr	r0, [r4, #4]
    28cc:	f7ff ffa4 	bl	2818 <std.isra.0>
    28d0:	2201      	movs	r2, #1
    28d2:	2109      	movs	r1, #9
    28d4:	68a0      	ldr	r0, [r4, #8]
    28d6:	f7ff ff9f 	bl	2818 <std.isra.0>
    28da:	2202      	movs	r2, #2
    28dc:	2112      	movs	r1, #18
    28de:	68e0      	ldr	r0, [r4, #12]
    28e0:	f7ff ff9a 	bl	2818 <std.isra.0>
    28e4:	2301      	movs	r3, #1
    28e6:	61a3      	str	r3, [r4, #24]
    28e8:	bd13      	pop	{r0, r1, r4, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	0000439c 	.word	0x0000439c
    28f0:	00002809 	.word	0x00002809

000028f4 <__sfp>:
    28f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28f6:	4b1e      	ldr	r3, [pc, #120]	; (2970 <__sfp+0x7c>)
    28f8:	0007      	movs	r7, r0
    28fa:	681e      	ldr	r6, [r3, #0]
    28fc:	69b3      	ldr	r3, [r6, #24]
    28fe:	2b00      	cmp	r3, #0
    2900:	d102      	bne.n	2908 <__sfp+0x14>
    2902:	0030      	movs	r0, r6
    2904:	f7ff ffc2 	bl	288c <__sinit>
    2908:	3648      	adds	r6, #72	; 0x48
    290a:	68b4      	ldr	r4, [r6, #8]
    290c:	6873      	ldr	r3, [r6, #4]
    290e:	3b01      	subs	r3, #1
    2910:	d504      	bpl.n	291c <__sfp+0x28>
    2912:	6833      	ldr	r3, [r6, #0]
    2914:	2b00      	cmp	r3, #0
    2916:	d007      	beq.n	2928 <__sfp+0x34>
    2918:	6836      	ldr	r6, [r6, #0]
    291a:	e7f6      	b.n	290a <__sfp+0x16>
    291c:	220c      	movs	r2, #12
    291e:	5ea5      	ldrsh	r5, [r4, r2]
    2920:	2d00      	cmp	r5, #0
    2922:	d00d      	beq.n	2940 <__sfp+0x4c>
    2924:	3468      	adds	r4, #104	; 0x68
    2926:	e7f2      	b.n	290e <__sfp+0x1a>
    2928:	2104      	movs	r1, #4
    292a:	0038      	movs	r0, r7
    292c:	f7ff ff98 	bl	2860 <__sfmoreglue>
    2930:	6030      	str	r0, [r6, #0]
    2932:	2800      	cmp	r0, #0
    2934:	d1f0      	bne.n	2918 <__sfp+0x24>
    2936:	230c      	movs	r3, #12
    2938:	0004      	movs	r4, r0
    293a:	603b      	str	r3, [r7, #0]
    293c:	0020      	movs	r0, r4
    293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2940:	2301      	movs	r3, #1
    2942:	0020      	movs	r0, r4
    2944:	425b      	negs	r3, r3
    2946:	81e3      	strh	r3, [r4, #14]
    2948:	3302      	adds	r3, #2
    294a:	81a3      	strh	r3, [r4, #12]
    294c:	6665      	str	r5, [r4, #100]	; 0x64
    294e:	6025      	str	r5, [r4, #0]
    2950:	60a5      	str	r5, [r4, #8]
    2952:	6065      	str	r5, [r4, #4]
    2954:	6125      	str	r5, [r4, #16]
    2956:	6165      	str	r5, [r4, #20]
    2958:	61a5      	str	r5, [r4, #24]
    295a:	2208      	movs	r2, #8
    295c:	0029      	movs	r1, r5
    295e:	305c      	adds	r0, #92	; 0x5c
    2960:	f7ff fb56 	bl	2010 <memset>
    2964:	6365      	str	r5, [r4, #52]	; 0x34
    2966:	63a5      	str	r5, [r4, #56]	; 0x38
    2968:	64a5      	str	r5, [r4, #72]	; 0x48
    296a:	64e5      	str	r5, [r4, #76]	; 0x4c
    296c:	e7e6      	b.n	293c <__sfp+0x48>
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	0000439c 	.word	0x0000439c

00002974 <_fwalk>:
    2974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2976:	3048      	adds	r0, #72	; 0x48
    2978:	0004      	movs	r4, r0
    297a:	2600      	movs	r6, #0
    297c:	9101      	str	r1, [sp, #4]
    297e:	2c00      	cmp	r4, #0
    2980:	d101      	bne.n	2986 <_fwalk+0x12>
    2982:	0030      	movs	r0, r6
    2984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2986:	68a5      	ldr	r5, [r4, #8]
    2988:	6867      	ldr	r7, [r4, #4]
    298a:	3f01      	subs	r7, #1
    298c:	d501      	bpl.n	2992 <_fwalk+0x1e>
    298e:	6824      	ldr	r4, [r4, #0]
    2990:	e7f5      	b.n	297e <_fwalk+0xa>
    2992:	89ab      	ldrh	r3, [r5, #12]
    2994:	2b01      	cmp	r3, #1
    2996:	d907      	bls.n	29a8 <_fwalk+0x34>
    2998:	220e      	movs	r2, #14
    299a:	5eab      	ldrsh	r3, [r5, r2]
    299c:	3301      	adds	r3, #1
    299e:	d003      	beq.n	29a8 <_fwalk+0x34>
    29a0:	0028      	movs	r0, r5
    29a2:	9b01      	ldr	r3, [sp, #4]
    29a4:	4798      	blx	r3
    29a6:	4306      	orrs	r6, r0
    29a8:	3568      	adds	r5, #104	; 0x68
    29aa:	e7ee      	b.n	298a <_fwalk+0x16>

000029ac <_fwalk_reent>:
    29ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29ae:	0004      	movs	r4, r0
    29b0:	0007      	movs	r7, r0
    29b2:	2600      	movs	r6, #0
    29b4:	9101      	str	r1, [sp, #4]
    29b6:	3448      	adds	r4, #72	; 0x48
    29b8:	2c00      	cmp	r4, #0
    29ba:	d101      	bne.n	29c0 <_fwalk_reent+0x14>
    29bc:	0030      	movs	r0, r6
    29be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    29c0:	6863      	ldr	r3, [r4, #4]
    29c2:	68a5      	ldr	r5, [r4, #8]
    29c4:	9300      	str	r3, [sp, #0]
    29c6:	9b00      	ldr	r3, [sp, #0]
    29c8:	3b01      	subs	r3, #1
    29ca:	9300      	str	r3, [sp, #0]
    29cc:	d501      	bpl.n	29d2 <_fwalk_reent+0x26>
    29ce:	6824      	ldr	r4, [r4, #0]
    29d0:	e7f2      	b.n	29b8 <_fwalk_reent+0xc>
    29d2:	89ab      	ldrh	r3, [r5, #12]
    29d4:	2b01      	cmp	r3, #1
    29d6:	d908      	bls.n	29ea <_fwalk_reent+0x3e>
    29d8:	220e      	movs	r2, #14
    29da:	5eab      	ldrsh	r3, [r5, r2]
    29dc:	3301      	adds	r3, #1
    29de:	d004      	beq.n	29ea <_fwalk_reent+0x3e>
    29e0:	0029      	movs	r1, r5
    29e2:	0038      	movs	r0, r7
    29e4:	9b01      	ldr	r3, [sp, #4]
    29e6:	4798      	blx	r3
    29e8:	4306      	orrs	r6, r0
    29ea:	3568      	adds	r5, #104	; 0x68
    29ec:	e7eb      	b.n	29c6 <_fwalk_reent+0x1a>

000029ee <__locale_ctype_ptr_l>:
    29ee:	30ec      	adds	r0, #236	; 0xec
    29f0:	6800      	ldr	r0, [r0, #0]
    29f2:	4770      	bx	lr

000029f4 <__locale_ctype_ptr>:
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <__locale_ctype_ptr+0x14>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	6a1b      	ldr	r3, [r3, #32]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d100      	bne.n	2a00 <__locale_ctype_ptr+0xc>
    29fe:	4b03      	ldr	r3, [pc, #12]	; (2a0c <__locale_ctype_ptr+0x18>)
    2a00:	33ec      	adds	r3, #236	; 0xec
    2a02:	6818      	ldr	r0, [r3, #0]
    2a04:	4770      	bx	lr
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	20000040 	.word	0x20000040
    2a0c:	200000a4 	.word	0x200000a4

00002a10 <__swhatbuf_r>:
    2a10:	b570      	push	{r4, r5, r6, lr}
    2a12:	000e      	movs	r6, r1
    2a14:	001d      	movs	r5, r3
    2a16:	230e      	movs	r3, #14
    2a18:	5ec9      	ldrsh	r1, [r1, r3]
    2a1a:	b090      	sub	sp, #64	; 0x40
    2a1c:	0014      	movs	r4, r2
    2a1e:	2900      	cmp	r1, #0
    2a20:	da07      	bge.n	2a32 <__swhatbuf_r+0x22>
    2a22:	2300      	movs	r3, #0
    2a24:	602b      	str	r3, [r5, #0]
    2a26:	89b3      	ldrh	r3, [r6, #12]
    2a28:	061b      	lsls	r3, r3, #24
    2a2a:	d411      	bmi.n	2a50 <__swhatbuf_r+0x40>
    2a2c:	2380      	movs	r3, #128	; 0x80
    2a2e:	00db      	lsls	r3, r3, #3
    2a30:	e00f      	b.n	2a52 <__swhatbuf_r+0x42>
    2a32:	aa01      	add	r2, sp, #4
    2a34:	f001 f9a0 	bl	3d78 <_fstat_r>
    2a38:	2800      	cmp	r0, #0
    2a3a:	dbf2      	blt.n	2a22 <__swhatbuf_r+0x12>
    2a3c:	22f0      	movs	r2, #240	; 0xf0
    2a3e:	9b02      	ldr	r3, [sp, #8]
    2a40:	0212      	lsls	r2, r2, #8
    2a42:	4013      	ands	r3, r2
    2a44:	4a05      	ldr	r2, [pc, #20]	; (2a5c <__swhatbuf_r+0x4c>)
    2a46:	189b      	adds	r3, r3, r2
    2a48:	425a      	negs	r2, r3
    2a4a:	4153      	adcs	r3, r2
    2a4c:	602b      	str	r3, [r5, #0]
    2a4e:	e7ed      	b.n	2a2c <__swhatbuf_r+0x1c>
    2a50:	2340      	movs	r3, #64	; 0x40
    2a52:	2000      	movs	r0, #0
    2a54:	6023      	str	r3, [r4, #0]
    2a56:	b010      	add	sp, #64	; 0x40
    2a58:	bd70      	pop	{r4, r5, r6, pc}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	ffffe000 	.word	0xffffe000

00002a60 <__smakebuf_r>:
    2a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a62:	2602      	movs	r6, #2
    2a64:	898b      	ldrh	r3, [r1, #12]
    2a66:	0005      	movs	r5, r0
    2a68:	000c      	movs	r4, r1
    2a6a:	4233      	tst	r3, r6
    2a6c:	d006      	beq.n	2a7c <__smakebuf_r+0x1c>
    2a6e:	0023      	movs	r3, r4
    2a70:	3347      	adds	r3, #71	; 0x47
    2a72:	6023      	str	r3, [r4, #0]
    2a74:	6123      	str	r3, [r4, #16]
    2a76:	2301      	movs	r3, #1
    2a78:	6163      	str	r3, [r4, #20]
    2a7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2a7c:	ab01      	add	r3, sp, #4
    2a7e:	466a      	mov	r2, sp
    2a80:	f7ff ffc6 	bl	2a10 <__swhatbuf_r>
    2a84:	9900      	ldr	r1, [sp, #0]
    2a86:	0007      	movs	r7, r0
    2a88:	0028      	movs	r0, r5
    2a8a:	f000 f893 	bl	2bb4 <_malloc_r>
    2a8e:	2800      	cmp	r0, #0
    2a90:	d108      	bne.n	2aa4 <__smakebuf_r+0x44>
    2a92:	220c      	movs	r2, #12
    2a94:	5ea3      	ldrsh	r3, [r4, r2]
    2a96:	059a      	lsls	r2, r3, #22
    2a98:	d4ef      	bmi.n	2a7a <__smakebuf_r+0x1a>
    2a9a:	2203      	movs	r2, #3
    2a9c:	4393      	bics	r3, r2
    2a9e:	431e      	orrs	r6, r3
    2aa0:	81a6      	strh	r6, [r4, #12]
    2aa2:	e7e4      	b.n	2a6e <__smakebuf_r+0xe>
    2aa4:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <__smakebuf_r+0x84>)
    2aa6:	62ab      	str	r3, [r5, #40]	; 0x28
    2aa8:	2380      	movs	r3, #128	; 0x80
    2aaa:	89a2      	ldrh	r2, [r4, #12]
    2aac:	6020      	str	r0, [r4, #0]
    2aae:	4313      	orrs	r3, r2
    2ab0:	81a3      	strh	r3, [r4, #12]
    2ab2:	9b00      	ldr	r3, [sp, #0]
    2ab4:	6120      	str	r0, [r4, #16]
    2ab6:	6163      	str	r3, [r4, #20]
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d00d      	beq.n	2ada <__smakebuf_r+0x7a>
    2abe:	230e      	movs	r3, #14
    2ac0:	5ee1      	ldrsh	r1, [r4, r3]
    2ac2:	0028      	movs	r0, r5
    2ac4:	f001 f96a 	bl	3d9c <_isatty_r>
    2ac8:	2800      	cmp	r0, #0
    2aca:	d006      	beq.n	2ada <__smakebuf_r+0x7a>
    2acc:	2203      	movs	r2, #3
    2ace:	89a3      	ldrh	r3, [r4, #12]
    2ad0:	4393      	bics	r3, r2
    2ad2:	001a      	movs	r2, r3
    2ad4:	2301      	movs	r3, #1
    2ad6:	4313      	orrs	r3, r2
    2ad8:	81a3      	strh	r3, [r4, #12]
    2ada:	89a0      	ldrh	r0, [r4, #12]
    2adc:	4338      	orrs	r0, r7
    2ade:	81a0      	strh	r0, [r4, #12]
    2ae0:	e7cb      	b.n	2a7a <__smakebuf_r+0x1a>
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	00002809 	.word	0x00002809

00002ae8 <malloc>:
    2ae8:	b510      	push	{r4, lr}
    2aea:	4b03      	ldr	r3, [pc, #12]	; (2af8 <malloc+0x10>)
    2aec:	0001      	movs	r1, r0
    2aee:	6818      	ldr	r0, [r3, #0]
    2af0:	f000 f860 	bl	2bb4 <_malloc_r>
    2af4:	bd10      	pop	{r4, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	20000040 	.word	0x20000040

00002afc <__ascii_mbtowc>:
    2afc:	b082      	sub	sp, #8
    2afe:	2900      	cmp	r1, #0
    2b00:	d100      	bne.n	2b04 <__ascii_mbtowc+0x8>
    2b02:	a901      	add	r1, sp, #4
    2b04:	1e10      	subs	r0, r2, #0
    2b06:	d006      	beq.n	2b16 <__ascii_mbtowc+0x1a>
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d006      	beq.n	2b1a <__ascii_mbtowc+0x1e>
    2b0c:	7813      	ldrb	r3, [r2, #0]
    2b0e:	600b      	str	r3, [r1, #0]
    2b10:	7810      	ldrb	r0, [r2, #0]
    2b12:	1e43      	subs	r3, r0, #1
    2b14:	4198      	sbcs	r0, r3
    2b16:	b002      	add	sp, #8
    2b18:	4770      	bx	lr
    2b1a:	2002      	movs	r0, #2
    2b1c:	4240      	negs	r0, r0
    2b1e:	e7fa      	b.n	2b16 <__ascii_mbtowc+0x1a>

00002b20 <_free_r>:
    2b20:	b570      	push	{r4, r5, r6, lr}
    2b22:	0005      	movs	r5, r0
    2b24:	2900      	cmp	r1, #0
    2b26:	d010      	beq.n	2b4a <_free_r+0x2a>
    2b28:	1f0c      	subs	r4, r1, #4
    2b2a:	6823      	ldr	r3, [r4, #0]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	da00      	bge.n	2b32 <_free_r+0x12>
    2b30:	18e4      	adds	r4, r4, r3
    2b32:	0028      	movs	r0, r5
    2b34:	f001 f96c 	bl	3e10 <__malloc_lock>
    2b38:	4a1d      	ldr	r2, [pc, #116]	; (2bb0 <_free_r+0x90>)
    2b3a:	6813      	ldr	r3, [r2, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d105      	bne.n	2b4c <_free_r+0x2c>
    2b40:	6063      	str	r3, [r4, #4]
    2b42:	6014      	str	r4, [r2, #0]
    2b44:	0028      	movs	r0, r5
    2b46:	f001 f964 	bl	3e12 <__malloc_unlock>
    2b4a:	bd70      	pop	{r4, r5, r6, pc}
    2b4c:	42a3      	cmp	r3, r4
    2b4e:	d909      	bls.n	2b64 <_free_r+0x44>
    2b50:	6821      	ldr	r1, [r4, #0]
    2b52:	1860      	adds	r0, r4, r1
    2b54:	4283      	cmp	r3, r0
    2b56:	d1f3      	bne.n	2b40 <_free_r+0x20>
    2b58:	6818      	ldr	r0, [r3, #0]
    2b5a:	685b      	ldr	r3, [r3, #4]
    2b5c:	1841      	adds	r1, r0, r1
    2b5e:	6021      	str	r1, [r4, #0]
    2b60:	e7ee      	b.n	2b40 <_free_r+0x20>
    2b62:	0013      	movs	r3, r2
    2b64:	685a      	ldr	r2, [r3, #4]
    2b66:	2a00      	cmp	r2, #0
    2b68:	d001      	beq.n	2b6e <_free_r+0x4e>
    2b6a:	42a2      	cmp	r2, r4
    2b6c:	d9f9      	bls.n	2b62 <_free_r+0x42>
    2b6e:	6819      	ldr	r1, [r3, #0]
    2b70:	1858      	adds	r0, r3, r1
    2b72:	42a0      	cmp	r0, r4
    2b74:	d10b      	bne.n	2b8e <_free_r+0x6e>
    2b76:	6820      	ldr	r0, [r4, #0]
    2b78:	1809      	adds	r1, r1, r0
    2b7a:	1858      	adds	r0, r3, r1
    2b7c:	6019      	str	r1, [r3, #0]
    2b7e:	4282      	cmp	r2, r0
    2b80:	d1e0      	bne.n	2b44 <_free_r+0x24>
    2b82:	6810      	ldr	r0, [r2, #0]
    2b84:	6852      	ldr	r2, [r2, #4]
    2b86:	1841      	adds	r1, r0, r1
    2b88:	6019      	str	r1, [r3, #0]
    2b8a:	605a      	str	r2, [r3, #4]
    2b8c:	e7da      	b.n	2b44 <_free_r+0x24>
    2b8e:	42a0      	cmp	r0, r4
    2b90:	d902      	bls.n	2b98 <_free_r+0x78>
    2b92:	230c      	movs	r3, #12
    2b94:	602b      	str	r3, [r5, #0]
    2b96:	e7d5      	b.n	2b44 <_free_r+0x24>
    2b98:	6821      	ldr	r1, [r4, #0]
    2b9a:	1860      	adds	r0, r4, r1
    2b9c:	4282      	cmp	r2, r0
    2b9e:	d103      	bne.n	2ba8 <_free_r+0x88>
    2ba0:	6810      	ldr	r0, [r2, #0]
    2ba2:	6852      	ldr	r2, [r2, #4]
    2ba4:	1841      	adds	r1, r0, r1
    2ba6:	6021      	str	r1, [r4, #0]
    2ba8:	6062      	str	r2, [r4, #4]
    2baa:	605c      	str	r4, [r3, #4]
    2bac:	e7ca      	b.n	2b44 <_free_r+0x24>
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	200002a4 	.word	0x200002a4

00002bb4 <_malloc_r>:
    2bb4:	2303      	movs	r3, #3
    2bb6:	b570      	push	{r4, r5, r6, lr}
    2bb8:	1ccd      	adds	r5, r1, #3
    2bba:	439d      	bics	r5, r3
    2bbc:	3508      	adds	r5, #8
    2bbe:	0006      	movs	r6, r0
    2bc0:	2d0c      	cmp	r5, #12
    2bc2:	d21e      	bcs.n	2c02 <_malloc_r+0x4e>
    2bc4:	250c      	movs	r5, #12
    2bc6:	42a9      	cmp	r1, r5
    2bc8:	d81d      	bhi.n	2c06 <_malloc_r+0x52>
    2bca:	0030      	movs	r0, r6
    2bcc:	f001 f920 	bl	3e10 <__malloc_lock>
    2bd0:	4a25      	ldr	r2, [pc, #148]	; (2c68 <_malloc_r+0xb4>)
    2bd2:	6814      	ldr	r4, [r2, #0]
    2bd4:	0021      	movs	r1, r4
    2bd6:	2900      	cmp	r1, #0
    2bd8:	d119      	bne.n	2c0e <_malloc_r+0x5a>
    2bda:	4c24      	ldr	r4, [pc, #144]	; (2c6c <_malloc_r+0xb8>)
    2bdc:	6823      	ldr	r3, [r4, #0]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d103      	bne.n	2bea <_malloc_r+0x36>
    2be2:	0030      	movs	r0, r6
    2be4:	f000 febe 	bl	3964 <_sbrk_r>
    2be8:	6020      	str	r0, [r4, #0]
    2bea:	0029      	movs	r1, r5
    2bec:	0030      	movs	r0, r6
    2bee:	f000 feb9 	bl	3964 <_sbrk_r>
    2bf2:	1c43      	adds	r3, r0, #1
    2bf4:	d12c      	bne.n	2c50 <_malloc_r+0x9c>
    2bf6:	230c      	movs	r3, #12
    2bf8:	0030      	movs	r0, r6
    2bfa:	6033      	str	r3, [r6, #0]
    2bfc:	f001 f909 	bl	3e12 <__malloc_unlock>
    2c00:	e003      	b.n	2c0a <_malloc_r+0x56>
    2c02:	2d00      	cmp	r5, #0
    2c04:	dadf      	bge.n	2bc6 <_malloc_r+0x12>
    2c06:	230c      	movs	r3, #12
    2c08:	6033      	str	r3, [r6, #0]
    2c0a:	2000      	movs	r0, #0
    2c0c:	bd70      	pop	{r4, r5, r6, pc}
    2c0e:	680b      	ldr	r3, [r1, #0]
    2c10:	1b5b      	subs	r3, r3, r5
    2c12:	d41a      	bmi.n	2c4a <_malloc_r+0x96>
    2c14:	2b0b      	cmp	r3, #11
    2c16:	d903      	bls.n	2c20 <_malloc_r+0x6c>
    2c18:	600b      	str	r3, [r1, #0]
    2c1a:	18cc      	adds	r4, r1, r3
    2c1c:	6025      	str	r5, [r4, #0]
    2c1e:	e003      	b.n	2c28 <_malloc_r+0x74>
    2c20:	428c      	cmp	r4, r1
    2c22:	d10e      	bne.n	2c42 <_malloc_r+0x8e>
    2c24:	6863      	ldr	r3, [r4, #4]
    2c26:	6013      	str	r3, [r2, #0]
    2c28:	0030      	movs	r0, r6
    2c2a:	f001 f8f2 	bl	3e12 <__malloc_unlock>
    2c2e:	0020      	movs	r0, r4
    2c30:	2207      	movs	r2, #7
    2c32:	300b      	adds	r0, #11
    2c34:	1d23      	adds	r3, r4, #4
    2c36:	4390      	bics	r0, r2
    2c38:	1ac3      	subs	r3, r0, r3
    2c3a:	d0e7      	beq.n	2c0c <_malloc_r+0x58>
    2c3c:	425a      	negs	r2, r3
    2c3e:	50e2      	str	r2, [r4, r3]
    2c40:	e7e4      	b.n	2c0c <_malloc_r+0x58>
    2c42:	684b      	ldr	r3, [r1, #4]
    2c44:	6063      	str	r3, [r4, #4]
    2c46:	000c      	movs	r4, r1
    2c48:	e7ee      	b.n	2c28 <_malloc_r+0x74>
    2c4a:	000c      	movs	r4, r1
    2c4c:	6849      	ldr	r1, [r1, #4]
    2c4e:	e7c2      	b.n	2bd6 <_malloc_r+0x22>
    2c50:	2303      	movs	r3, #3
    2c52:	1cc4      	adds	r4, r0, #3
    2c54:	439c      	bics	r4, r3
    2c56:	42a0      	cmp	r0, r4
    2c58:	d0e0      	beq.n	2c1c <_malloc_r+0x68>
    2c5a:	1a21      	subs	r1, r4, r0
    2c5c:	0030      	movs	r0, r6
    2c5e:	f000 fe81 	bl	3964 <_sbrk_r>
    2c62:	1c43      	adds	r3, r0, #1
    2c64:	d1da      	bne.n	2c1c <_malloc_r+0x68>
    2c66:	e7c6      	b.n	2bf6 <_malloc_r+0x42>
    2c68:	200002a4 	.word	0x200002a4
    2c6c:	200002a8 	.word	0x200002a8

00002c70 <__sfputc_r>:
    2c70:	6893      	ldr	r3, [r2, #8]
    2c72:	b510      	push	{r4, lr}
    2c74:	3b01      	subs	r3, #1
    2c76:	6093      	str	r3, [r2, #8]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	da05      	bge.n	2c88 <__sfputc_r+0x18>
    2c7c:	6994      	ldr	r4, [r2, #24]
    2c7e:	42a3      	cmp	r3, r4
    2c80:	db08      	blt.n	2c94 <__sfputc_r+0x24>
    2c82:	b2cb      	uxtb	r3, r1
    2c84:	2b0a      	cmp	r3, #10
    2c86:	d005      	beq.n	2c94 <__sfputc_r+0x24>
    2c88:	6813      	ldr	r3, [r2, #0]
    2c8a:	1c58      	adds	r0, r3, #1
    2c8c:	6010      	str	r0, [r2, #0]
    2c8e:	7019      	strb	r1, [r3, #0]
    2c90:	b2c8      	uxtb	r0, r1
    2c92:	bd10      	pop	{r4, pc}
    2c94:	f7ff fc22 	bl	24dc <__swbuf_r>
    2c98:	e7fb      	b.n	2c92 <__sfputc_r+0x22>

00002c9a <__sfputs_r>:
    2c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c9c:	0006      	movs	r6, r0
    2c9e:	000f      	movs	r7, r1
    2ca0:	0014      	movs	r4, r2
    2ca2:	18d5      	adds	r5, r2, r3
    2ca4:	42ac      	cmp	r4, r5
    2ca6:	d101      	bne.n	2cac <__sfputs_r+0x12>
    2ca8:	2000      	movs	r0, #0
    2caa:	e007      	b.n	2cbc <__sfputs_r+0x22>
    2cac:	7821      	ldrb	r1, [r4, #0]
    2cae:	003a      	movs	r2, r7
    2cb0:	0030      	movs	r0, r6
    2cb2:	f7ff ffdd 	bl	2c70 <__sfputc_r>
    2cb6:	3401      	adds	r4, #1
    2cb8:	1c43      	adds	r3, r0, #1
    2cba:	d1f3      	bne.n	2ca4 <__sfputs_r+0xa>
    2cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002cc0 <_vfiprintf_r>:
    2cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc2:	b09f      	sub	sp, #124	; 0x7c
    2cc4:	0006      	movs	r6, r0
    2cc6:	000f      	movs	r7, r1
    2cc8:	0014      	movs	r4, r2
    2cca:	9305      	str	r3, [sp, #20]
    2ccc:	2800      	cmp	r0, #0
    2cce:	d004      	beq.n	2cda <_vfiprintf_r+0x1a>
    2cd0:	6983      	ldr	r3, [r0, #24]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d101      	bne.n	2cda <_vfiprintf_r+0x1a>
    2cd6:	f7ff fdd9 	bl	288c <__sinit>
    2cda:	4b7f      	ldr	r3, [pc, #508]	; (2ed8 <_vfiprintf_r+0x218>)
    2cdc:	429f      	cmp	r7, r3
    2cde:	d15c      	bne.n	2d9a <_vfiprintf_r+0xda>
    2ce0:	6877      	ldr	r7, [r6, #4]
    2ce2:	89bb      	ldrh	r3, [r7, #12]
    2ce4:	071b      	lsls	r3, r3, #28
    2ce6:	d562      	bpl.n	2dae <_vfiprintf_r+0xee>
    2ce8:	693b      	ldr	r3, [r7, #16]
    2cea:	2b00      	cmp	r3, #0
    2cec:	d05f      	beq.n	2dae <_vfiprintf_r+0xee>
    2cee:	2300      	movs	r3, #0
    2cf0:	ad06      	add	r5, sp, #24
    2cf2:	616b      	str	r3, [r5, #20]
    2cf4:	3320      	adds	r3, #32
    2cf6:	766b      	strb	r3, [r5, #25]
    2cf8:	3310      	adds	r3, #16
    2cfa:	76ab      	strb	r3, [r5, #26]
    2cfc:	9402      	str	r4, [sp, #8]
    2cfe:	9c02      	ldr	r4, [sp, #8]
    2d00:	7823      	ldrb	r3, [r4, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d15d      	bne.n	2dc2 <_vfiprintf_r+0x102>
    2d06:	9b02      	ldr	r3, [sp, #8]
    2d08:	1ae3      	subs	r3, r4, r3
    2d0a:	9304      	str	r3, [sp, #16]
    2d0c:	d00d      	beq.n	2d2a <_vfiprintf_r+0x6a>
    2d0e:	9b04      	ldr	r3, [sp, #16]
    2d10:	9a02      	ldr	r2, [sp, #8]
    2d12:	0039      	movs	r1, r7
    2d14:	0030      	movs	r0, r6
    2d16:	f7ff ffc0 	bl	2c9a <__sfputs_r>
    2d1a:	1c43      	adds	r3, r0, #1
    2d1c:	d100      	bne.n	2d20 <_vfiprintf_r+0x60>
    2d1e:	e0cc      	b.n	2eba <_vfiprintf_r+0x1fa>
    2d20:	696a      	ldr	r2, [r5, #20]
    2d22:	9b04      	ldr	r3, [sp, #16]
    2d24:	4694      	mov	ip, r2
    2d26:	4463      	add	r3, ip
    2d28:	616b      	str	r3, [r5, #20]
    2d2a:	7823      	ldrb	r3, [r4, #0]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d100      	bne.n	2d32 <_vfiprintf_r+0x72>
    2d30:	e0c3      	b.n	2eba <_vfiprintf_r+0x1fa>
    2d32:	2201      	movs	r2, #1
    2d34:	2300      	movs	r3, #0
    2d36:	4252      	negs	r2, r2
    2d38:	606a      	str	r2, [r5, #4]
    2d3a:	a902      	add	r1, sp, #8
    2d3c:	3254      	adds	r2, #84	; 0x54
    2d3e:	1852      	adds	r2, r2, r1
    2d40:	3401      	adds	r4, #1
    2d42:	602b      	str	r3, [r5, #0]
    2d44:	60eb      	str	r3, [r5, #12]
    2d46:	60ab      	str	r3, [r5, #8]
    2d48:	7013      	strb	r3, [r2, #0]
    2d4a:	65ab      	str	r3, [r5, #88]	; 0x58
    2d4c:	7821      	ldrb	r1, [r4, #0]
    2d4e:	2205      	movs	r2, #5
    2d50:	4862      	ldr	r0, [pc, #392]	; (2edc <_vfiprintf_r+0x21c>)
    2d52:	f001 f849 	bl	3de8 <memchr>
    2d56:	1c63      	adds	r3, r4, #1
    2d58:	469c      	mov	ip, r3
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d135      	bne.n	2dca <_vfiprintf_r+0x10a>
    2d5e:	6829      	ldr	r1, [r5, #0]
    2d60:	06cb      	lsls	r3, r1, #27
    2d62:	d504      	bpl.n	2d6e <_vfiprintf_r+0xae>
    2d64:	2353      	movs	r3, #83	; 0x53
    2d66:	aa02      	add	r2, sp, #8
    2d68:	3020      	adds	r0, #32
    2d6a:	189b      	adds	r3, r3, r2
    2d6c:	7018      	strb	r0, [r3, #0]
    2d6e:	070b      	lsls	r3, r1, #28
    2d70:	d504      	bpl.n	2d7c <_vfiprintf_r+0xbc>
    2d72:	2353      	movs	r3, #83	; 0x53
    2d74:	202b      	movs	r0, #43	; 0x2b
    2d76:	aa02      	add	r2, sp, #8
    2d78:	189b      	adds	r3, r3, r2
    2d7a:	7018      	strb	r0, [r3, #0]
    2d7c:	7823      	ldrb	r3, [r4, #0]
    2d7e:	2b2a      	cmp	r3, #42	; 0x2a
    2d80:	d02c      	beq.n	2ddc <_vfiprintf_r+0x11c>
    2d82:	2000      	movs	r0, #0
    2d84:	210a      	movs	r1, #10
    2d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d88:	7822      	ldrb	r2, [r4, #0]
    2d8a:	3a30      	subs	r2, #48	; 0x30
    2d8c:	2a09      	cmp	r2, #9
    2d8e:	d800      	bhi.n	2d92 <_vfiprintf_r+0xd2>
    2d90:	e06b      	b.n	2e6a <_vfiprintf_r+0x1aa>
    2d92:	2800      	cmp	r0, #0
    2d94:	d02a      	beq.n	2dec <_vfiprintf_r+0x12c>
    2d96:	9309      	str	r3, [sp, #36]	; 0x24
    2d98:	e028      	b.n	2dec <_vfiprintf_r+0x12c>
    2d9a:	4b51      	ldr	r3, [pc, #324]	; (2ee0 <_vfiprintf_r+0x220>)
    2d9c:	429f      	cmp	r7, r3
    2d9e:	d101      	bne.n	2da4 <_vfiprintf_r+0xe4>
    2da0:	68b7      	ldr	r7, [r6, #8]
    2da2:	e79e      	b.n	2ce2 <_vfiprintf_r+0x22>
    2da4:	4b4f      	ldr	r3, [pc, #316]	; (2ee4 <_vfiprintf_r+0x224>)
    2da6:	429f      	cmp	r7, r3
    2da8:	d19b      	bne.n	2ce2 <_vfiprintf_r+0x22>
    2daa:	68f7      	ldr	r7, [r6, #12]
    2dac:	e799      	b.n	2ce2 <_vfiprintf_r+0x22>
    2dae:	0039      	movs	r1, r7
    2db0:	0030      	movs	r0, r6
    2db2:	f7ff fbe9 	bl	2588 <__swsetup_r>
    2db6:	2800      	cmp	r0, #0
    2db8:	d099      	beq.n	2cee <_vfiprintf_r+0x2e>
    2dba:	2001      	movs	r0, #1
    2dbc:	4240      	negs	r0, r0
    2dbe:	b01f      	add	sp, #124	; 0x7c
    2dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dc2:	2b25      	cmp	r3, #37	; 0x25
    2dc4:	d09f      	beq.n	2d06 <_vfiprintf_r+0x46>
    2dc6:	3401      	adds	r4, #1
    2dc8:	e79a      	b.n	2d00 <_vfiprintf_r+0x40>
    2dca:	4b44      	ldr	r3, [pc, #272]	; (2edc <_vfiprintf_r+0x21c>)
    2dcc:	6829      	ldr	r1, [r5, #0]
    2dce:	1ac0      	subs	r0, r0, r3
    2dd0:	2301      	movs	r3, #1
    2dd2:	4083      	lsls	r3, r0
    2dd4:	430b      	orrs	r3, r1
    2dd6:	602b      	str	r3, [r5, #0]
    2dd8:	4664      	mov	r4, ip
    2dda:	e7b7      	b.n	2d4c <_vfiprintf_r+0x8c>
    2ddc:	9b05      	ldr	r3, [sp, #20]
    2dde:	1d18      	adds	r0, r3, #4
    2de0:	681b      	ldr	r3, [r3, #0]
    2de2:	9005      	str	r0, [sp, #20]
    2de4:	2b00      	cmp	r3, #0
    2de6:	db3a      	blt.n	2e5e <_vfiprintf_r+0x19e>
    2de8:	9309      	str	r3, [sp, #36]	; 0x24
    2dea:	4664      	mov	r4, ip
    2dec:	7823      	ldrb	r3, [r4, #0]
    2dee:	2b2e      	cmp	r3, #46	; 0x2e
    2df0:	d10b      	bne.n	2e0a <_vfiprintf_r+0x14a>
    2df2:	7863      	ldrb	r3, [r4, #1]
    2df4:	1c62      	adds	r2, r4, #1
    2df6:	2b2a      	cmp	r3, #42	; 0x2a
    2df8:	d13f      	bne.n	2e7a <_vfiprintf_r+0x1ba>
    2dfa:	9b05      	ldr	r3, [sp, #20]
    2dfc:	3402      	adds	r4, #2
    2dfe:	1d1a      	adds	r2, r3, #4
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	9205      	str	r2, [sp, #20]
    2e04:	2b00      	cmp	r3, #0
    2e06:	db35      	blt.n	2e74 <_vfiprintf_r+0x1b4>
    2e08:	9307      	str	r3, [sp, #28]
    2e0a:	7821      	ldrb	r1, [r4, #0]
    2e0c:	2203      	movs	r2, #3
    2e0e:	4836      	ldr	r0, [pc, #216]	; (2ee8 <_vfiprintf_r+0x228>)
    2e10:	f000 ffea 	bl	3de8 <memchr>
    2e14:	2800      	cmp	r0, #0
    2e16:	d007      	beq.n	2e28 <_vfiprintf_r+0x168>
    2e18:	4b33      	ldr	r3, [pc, #204]	; (2ee8 <_vfiprintf_r+0x228>)
    2e1a:	682a      	ldr	r2, [r5, #0]
    2e1c:	1ac0      	subs	r0, r0, r3
    2e1e:	2340      	movs	r3, #64	; 0x40
    2e20:	4083      	lsls	r3, r0
    2e22:	4313      	orrs	r3, r2
    2e24:	602b      	str	r3, [r5, #0]
    2e26:	3401      	adds	r4, #1
    2e28:	7821      	ldrb	r1, [r4, #0]
    2e2a:	1c63      	adds	r3, r4, #1
    2e2c:	2206      	movs	r2, #6
    2e2e:	482f      	ldr	r0, [pc, #188]	; (2eec <_vfiprintf_r+0x22c>)
    2e30:	9302      	str	r3, [sp, #8]
    2e32:	7629      	strb	r1, [r5, #24]
    2e34:	f000 ffd8 	bl	3de8 <memchr>
    2e38:	2800      	cmp	r0, #0
    2e3a:	d044      	beq.n	2ec6 <_vfiprintf_r+0x206>
    2e3c:	4b2c      	ldr	r3, [pc, #176]	; (2ef0 <_vfiprintf_r+0x230>)
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d12f      	bne.n	2ea2 <_vfiprintf_r+0x1e2>
    2e42:	6829      	ldr	r1, [r5, #0]
    2e44:	9b05      	ldr	r3, [sp, #20]
    2e46:	2207      	movs	r2, #7
    2e48:	05c9      	lsls	r1, r1, #23
    2e4a:	d528      	bpl.n	2e9e <_vfiprintf_r+0x1de>
    2e4c:	189b      	adds	r3, r3, r2
    2e4e:	4393      	bics	r3, r2
    2e50:	3308      	adds	r3, #8
    2e52:	9305      	str	r3, [sp, #20]
    2e54:	696b      	ldr	r3, [r5, #20]
    2e56:	9a03      	ldr	r2, [sp, #12]
    2e58:	189b      	adds	r3, r3, r2
    2e5a:	616b      	str	r3, [r5, #20]
    2e5c:	e74f      	b.n	2cfe <_vfiprintf_r+0x3e>
    2e5e:	425b      	negs	r3, r3
    2e60:	60eb      	str	r3, [r5, #12]
    2e62:	2302      	movs	r3, #2
    2e64:	430b      	orrs	r3, r1
    2e66:	602b      	str	r3, [r5, #0]
    2e68:	e7bf      	b.n	2dea <_vfiprintf_r+0x12a>
    2e6a:	434b      	muls	r3, r1
    2e6c:	3401      	adds	r4, #1
    2e6e:	189b      	adds	r3, r3, r2
    2e70:	2001      	movs	r0, #1
    2e72:	e789      	b.n	2d88 <_vfiprintf_r+0xc8>
    2e74:	2301      	movs	r3, #1
    2e76:	425b      	negs	r3, r3
    2e78:	e7c6      	b.n	2e08 <_vfiprintf_r+0x148>
    2e7a:	2300      	movs	r3, #0
    2e7c:	0014      	movs	r4, r2
    2e7e:	200a      	movs	r0, #10
    2e80:	001a      	movs	r2, r3
    2e82:	606b      	str	r3, [r5, #4]
    2e84:	7821      	ldrb	r1, [r4, #0]
    2e86:	3930      	subs	r1, #48	; 0x30
    2e88:	2909      	cmp	r1, #9
    2e8a:	d903      	bls.n	2e94 <_vfiprintf_r+0x1d4>
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	d0bc      	beq.n	2e0a <_vfiprintf_r+0x14a>
    2e90:	9207      	str	r2, [sp, #28]
    2e92:	e7ba      	b.n	2e0a <_vfiprintf_r+0x14a>
    2e94:	4342      	muls	r2, r0
    2e96:	3401      	adds	r4, #1
    2e98:	1852      	adds	r2, r2, r1
    2e9a:	2301      	movs	r3, #1
    2e9c:	e7f2      	b.n	2e84 <_vfiprintf_r+0x1c4>
    2e9e:	3307      	adds	r3, #7
    2ea0:	e7d5      	b.n	2e4e <_vfiprintf_r+0x18e>
    2ea2:	ab05      	add	r3, sp, #20
    2ea4:	9300      	str	r3, [sp, #0]
    2ea6:	003a      	movs	r2, r7
    2ea8:	4b12      	ldr	r3, [pc, #72]	; (2ef4 <_vfiprintf_r+0x234>)
    2eaa:	0029      	movs	r1, r5
    2eac:	0030      	movs	r0, r6
    2eae:	e000      	b.n	2eb2 <_vfiprintf_r+0x1f2>
    2eb0:	bf00      	nop
    2eb2:	9003      	str	r0, [sp, #12]
    2eb4:	9b03      	ldr	r3, [sp, #12]
    2eb6:	3301      	adds	r3, #1
    2eb8:	d1cc      	bne.n	2e54 <_vfiprintf_r+0x194>
    2eba:	89bb      	ldrh	r3, [r7, #12]
    2ebc:	065b      	lsls	r3, r3, #25
    2ebe:	d500      	bpl.n	2ec2 <_vfiprintf_r+0x202>
    2ec0:	e77b      	b.n	2dba <_vfiprintf_r+0xfa>
    2ec2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2ec4:	e77b      	b.n	2dbe <_vfiprintf_r+0xfe>
    2ec6:	ab05      	add	r3, sp, #20
    2ec8:	9300      	str	r3, [sp, #0]
    2eca:	003a      	movs	r2, r7
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <_vfiprintf_r+0x234>)
    2ece:	0029      	movs	r1, r5
    2ed0:	0030      	movs	r0, r6
    2ed2:	f000 f87f 	bl	2fd4 <_printf_i>
    2ed6:	e7ec      	b.n	2eb2 <_vfiprintf_r+0x1f2>
    2ed8:	000043c0 	.word	0x000043c0
    2edc:	0000440a 	.word	0x0000440a
    2ee0:	000043e0 	.word	0x000043e0
    2ee4:	000043a0 	.word	0x000043a0
    2ee8:	00004410 	.word	0x00004410
    2eec:	00004414 	.word	0x00004414
    2ef0:	00000000 	.word	0x00000000
    2ef4:	00002c9b 	.word	0x00002c9b

00002ef8 <_printf_common>:
    2ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2efa:	0015      	movs	r5, r2
    2efc:	9301      	str	r3, [sp, #4]
    2efe:	688a      	ldr	r2, [r1, #8]
    2f00:	690b      	ldr	r3, [r1, #16]
    2f02:	9000      	str	r0, [sp, #0]
    2f04:	000c      	movs	r4, r1
    2f06:	4293      	cmp	r3, r2
    2f08:	da00      	bge.n	2f0c <_printf_common+0x14>
    2f0a:	0013      	movs	r3, r2
    2f0c:	0022      	movs	r2, r4
    2f0e:	602b      	str	r3, [r5, #0]
    2f10:	3243      	adds	r2, #67	; 0x43
    2f12:	7812      	ldrb	r2, [r2, #0]
    2f14:	2a00      	cmp	r2, #0
    2f16:	d001      	beq.n	2f1c <_printf_common+0x24>
    2f18:	3301      	adds	r3, #1
    2f1a:	602b      	str	r3, [r5, #0]
    2f1c:	6823      	ldr	r3, [r4, #0]
    2f1e:	069b      	lsls	r3, r3, #26
    2f20:	d502      	bpl.n	2f28 <_printf_common+0x30>
    2f22:	682b      	ldr	r3, [r5, #0]
    2f24:	3302      	adds	r3, #2
    2f26:	602b      	str	r3, [r5, #0]
    2f28:	2706      	movs	r7, #6
    2f2a:	6823      	ldr	r3, [r4, #0]
    2f2c:	401f      	ands	r7, r3
    2f2e:	d027      	beq.n	2f80 <_printf_common+0x88>
    2f30:	0023      	movs	r3, r4
    2f32:	3343      	adds	r3, #67	; 0x43
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	1e5a      	subs	r2, r3, #1
    2f38:	4193      	sbcs	r3, r2
    2f3a:	6822      	ldr	r2, [r4, #0]
    2f3c:	0692      	lsls	r2, r2, #26
    2f3e:	d430      	bmi.n	2fa2 <_printf_common+0xaa>
    2f40:	0022      	movs	r2, r4
    2f42:	9901      	ldr	r1, [sp, #4]
    2f44:	3243      	adds	r2, #67	; 0x43
    2f46:	9800      	ldr	r0, [sp, #0]
    2f48:	9e08      	ldr	r6, [sp, #32]
    2f4a:	47b0      	blx	r6
    2f4c:	1c43      	adds	r3, r0, #1
    2f4e:	d025      	beq.n	2f9c <_printf_common+0xa4>
    2f50:	2306      	movs	r3, #6
    2f52:	6820      	ldr	r0, [r4, #0]
    2f54:	682a      	ldr	r2, [r5, #0]
    2f56:	68e1      	ldr	r1, [r4, #12]
    2f58:	4003      	ands	r3, r0
    2f5a:	2500      	movs	r5, #0
    2f5c:	2b04      	cmp	r3, #4
    2f5e:	d103      	bne.n	2f68 <_printf_common+0x70>
    2f60:	1a8d      	subs	r5, r1, r2
    2f62:	43eb      	mvns	r3, r5
    2f64:	17db      	asrs	r3, r3, #31
    2f66:	401d      	ands	r5, r3
    2f68:	68a3      	ldr	r3, [r4, #8]
    2f6a:	6922      	ldr	r2, [r4, #16]
    2f6c:	4293      	cmp	r3, r2
    2f6e:	dd01      	ble.n	2f74 <_printf_common+0x7c>
    2f70:	1a9b      	subs	r3, r3, r2
    2f72:	18ed      	adds	r5, r5, r3
    2f74:	2700      	movs	r7, #0
    2f76:	42bd      	cmp	r5, r7
    2f78:	d120      	bne.n	2fbc <_printf_common+0xc4>
    2f7a:	2000      	movs	r0, #0
    2f7c:	e010      	b.n	2fa0 <_printf_common+0xa8>
    2f7e:	3701      	adds	r7, #1
    2f80:	68e3      	ldr	r3, [r4, #12]
    2f82:	682a      	ldr	r2, [r5, #0]
    2f84:	1a9b      	subs	r3, r3, r2
    2f86:	429f      	cmp	r7, r3
    2f88:	dad2      	bge.n	2f30 <_printf_common+0x38>
    2f8a:	0022      	movs	r2, r4
    2f8c:	2301      	movs	r3, #1
    2f8e:	3219      	adds	r2, #25
    2f90:	9901      	ldr	r1, [sp, #4]
    2f92:	9800      	ldr	r0, [sp, #0]
    2f94:	9e08      	ldr	r6, [sp, #32]
    2f96:	47b0      	blx	r6
    2f98:	1c43      	adds	r3, r0, #1
    2f9a:	d1f0      	bne.n	2f7e <_printf_common+0x86>
    2f9c:	2001      	movs	r0, #1
    2f9e:	4240      	negs	r0, r0
    2fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2fa2:	2030      	movs	r0, #48	; 0x30
    2fa4:	18e1      	adds	r1, r4, r3
    2fa6:	3143      	adds	r1, #67	; 0x43
    2fa8:	7008      	strb	r0, [r1, #0]
    2faa:	0021      	movs	r1, r4
    2fac:	1c5a      	adds	r2, r3, #1
    2fae:	3145      	adds	r1, #69	; 0x45
    2fb0:	7809      	ldrb	r1, [r1, #0]
    2fb2:	18a2      	adds	r2, r4, r2
    2fb4:	3243      	adds	r2, #67	; 0x43
    2fb6:	3302      	adds	r3, #2
    2fb8:	7011      	strb	r1, [r2, #0]
    2fba:	e7c1      	b.n	2f40 <_printf_common+0x48>
    2fbc:	0022      	movs	r2, r4
    2fbe:	2301      	movs	r3, #1
    2fc0:	321a      	adds	r2, #26
    2fc2:	9901      	ldr	r1, [sp, #4]
    2fc4:	9800      	ldr	r0, [sp, #0]
    2fc6:	9e08      	ldr	r6, [sp, #32]
    2fc8:	47b0      	blx	r6
    2fca:	1c43      	adds	r3, r0, #1
    2fcc:	d0e6      	beq.n	2f9c <_printf_common+0xa4>
    2fce:	3701      	adds	r7, #1
    2fd0:	e7d1      	b.n	2f76 <_printf_common+0x7e>
	...

00002fd4 <_printf_i>:
    2fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd6:	b08b      	sub	sp, #44	; 0x2c
    2fd8:	9206      	str	r2, [sp, #24]
    2fda:	000a      	movs	r2, r1
    2fdc:	3243      	adds	r2, #67	; 0x43
    2fde:	9307      	str	r3, [sp, #28]
    2fe0:	9005      	str	r0, [sp, #20]
    2fe2:	9204      	str	r2, [sp, #16]
    2fe4:	7e0a      	ldrb	r2, [r1, #24]
    2fe6:	000c      	movs	r4, r1
    2fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2fea:	2a6e      	cmp	r2, #110	; 0x6e
    2fec:	d100      	bne.n	2ff0 <_printf_i+0x1c>
    2fee:	e08f      	b.n	3110 <_printf_i+0x13c>
    2ff0:	d817      	bhi.n	3022 <_printf_i+0x4e>
    2ff2:	2a63      	cmp	r2, #99	; 0x63
    2ff4:	d02c      	beq.n	3050 <_printf_i+0x7c>
    2ff6:	d808      	bhi.n	300a <_printf_i+0x36>
    2ff8:	2a00      	cmp	r2, #0
    2ffa:	d100      	bne.n	2ffe <_printf_i+0x2a>
    2ffc:	e099      	b.n	3132 <_printf_i+0x15e>
    2ffe:	2a58      	cmp	r2, #88	; 0x58
    3000:	d054      	beq.n	30ac <_printf_i+0xd8>
    3002:	0026      	movs	r6, r4
    3004:	3642      	adds	r6, #66	; 0x42
    3006:	7032      	strb	r2, [r6, #0]
    3008:	e029      	b.n	305e <_printf_i+0x8a>
    300a:	2a64      	cmp	r2, #100	; 0x64
    300c:	d001      	beq.n	3012 <_printf_i+0x3e>
    300e:	2a69      	cmp	r2, #105	; 0x69
    3010:	d1f7      	bne.n	3002 <_printf_i+0x2e>
    3012:	6821      	ldr	r1, [r4, #0]
    3014:	681a      	ldr	r2, [r3, #0]
    3016:	0608      	lsls	r0, r1, #24
    3018:	d523      	bpl.n	3062 <_printf_i+0x8e>
    301a:	1d11      	adds	r1, r2, #4
    301c:	6019      	str	r1, [r3, #0]
    301e:	6815      	ldr	r5, [r2, #0]
    3020:	e025      	b.n	306e <_printf_i+0x9a>
    3022:	2a73      	cmp	r2, #115	; 0x73
    3024:	d100      	bne.n	3028 <_printf_i+0x54>
    3026:	e088      	b.n	313a <_printf_i+0x166>
    3028:	d808      	bhi.n	303c <_printf_i+0x68>
    302a:	2a6f      	cmp	r2, #111	; 0x6f
    302c:	d029      	beq.n	3082 <_printf_i+0xae>
    302e:	2a70      	cmp	r2, #112	; 0x70
    3030:	d1e7      	bne.n	3002 <_printf_i+0x2e>
    3032:	2220      	movs	r2, #32
    3034:	6809      	ldr	r1, [r1, #0]
    3036:	430a      	orrs	r2, r1
    3038:	6022      	str	r2, [r4, #0]
    303a:	e003      	b.n	3044 <_printf_i+0x70>
    303c:	2a75      	cmp	r2, #117	; 0x75
    303e:	d020      	beq.n	3082 <_printf_i+0xae>
    3040:	2a78      	cmp	r2, #120	; 0x78
    3042:	d1de      	bne.n	3002 <_printf_i+0x2e>
    3044:	0022      	movs	r2, r4
    3046:	2178      	movs	r1, #120	; 0x78
    3048:	3245      	adds	r2, #69	; 0x45
    304a:	7011      	strb	r1, [r2, #0]
    304c:	4a6c      	ldr	r2, [pc, #432]	; (3200 <_printf_i+0x22c>)
    304e:	e030      	b.n	30b2 <_printf_i+0xde>
    3050:	000e      	movs	r6, r1
    3052:	681a      	ldr	r2, [r3, #0]
    3054:	3642      	adds	r6, #66	; 0x42
    3056:	1d11      	adds	r1, r2, #4
    3058:	6019      	str	r1, [r3, #0]
    305a:	6813      	ldr	r3, [r2, #0]
    305c:	7033      	strb	r3, [r6, #0]
    305e:	2301      	movs	r3, #1
    3060:	e079      	b.n	3156 <_printf_i+0x182>
    3062:	0649      	lsls	r1, r1, #25
    3064:	d5d9      	bpl.n	301a <_printf_i+0x46>
    3066:	1d11      	adds	r1, r2, #4
    3068:	6019      	str	r1, [r3, #0]
    306a:	2300      	movs	r3, #0
    306c:	5ed5      	ldrsh	r5, [r2, r3]
    306e:	2d00      	cmp	r5, #0
    3070:	da03      	bge.n	307a <_printf_i+0xa6>
    3072:	232d      	movs	r3, #45	; 0x2d
    3074:	9a04      	ldr	r2, [sp, #16]
    3076:	426d      	negs	r5, r5
    3078:	7013      	strb	r3, [r2, #0]
    307a:	4b62      	ldr	r3, [pc, #392]	; (3204 <_printf_i+0x230>)
    307c:	270a      	movs	r7, #10
    307e:	9303      	str	r3, [sp, #12]
    3080:	e02f      	b.n	30e2 <_printf_i+0x10e>
    3082:	6820      	ldr	r0, [r4, #0]
    3084:	6819      	ldr	r1, [r3, #0]
    3086:	0605      	lsls	r5, r0, #24
    3088:	d503      	bpl.n	3092 <_printf_i+0xbe>
    308a:	1d08      	adds	r0, r1, #4
    308c:	6018      	str	r0, [r3, #0]
    308e:	680d      	ldr	r5, [r1, #0]
    3090:	e005      	b.n	309e <_printf_i+0xca>
    3092:	0640      	lsls	r0, r0, #25
    3094:	d5f9      	bpl.n	308a <_printf_i+0xb6>
    3096:	680d      	ldr	r5, [r1, #0]
    3098:	1d08      	adds	r0, r1, #4
    309a:	6018      	str	r0, [r3, #0]
    309c:	b2ad      	uxth	r5, r5
    309e:	4b59      	ldr	r3, [pc, #356]	; (3204 <_printf_i+0x230>)
    30a0:	2708      	movs	r7, #8
    30a2:	9303      	str	r3, [sp, #12]
    30a4:	2a6f      	cmp	r2, #111	; 0x6f
    30a6:	d018      	beq.n	30da <_printf_i+0x106>
    30a8:	270a      	movs	r7, #10
    30aa:	e016      	b.n	30da <_printf_i+0x106>
    30ac:	3145      	adds	r1, #69	; 0x45
    30ae:	700a      	strb	r2, [r1, #0]
    30b0:	4a54      	ldr	r2, [pc, #336]	; (3204 <_printf_i+0x230>)
    30b2:	9203      	str	r2, [sp, #12]
    30b4:	681a      	ldr	r2, [r3, #0]
    30b6:	6821      	ldr	r1, [r4, #0]
    30b8:	1d10      	adds	r0, r2, #4
    30ba:	6018      	str	r0, [r3, #0]
    30bc:	6815      	ldr	r5, [r2, #0]
    30be:	0608      	lsls	r0, r1, #24
    30c0:	d522      	bpl.n	3108 <_printf_i+0x134>
    30c2:	07cb      	lsls	r3, r1, #31
    30c4:	d502      	bpl.n	30cc <_printf_i+0xf8>
    30c6:	2320      	movs	r3, #32
    30c8:	4319      	orrs	r1, r3
    30ca:	6021      	str	r1, [r4, #0]
    30cc:	2710      	movs	r7, #16
    30ce:	2d00      	cmp	r5, #0
    30d0:	d103      	bne.n	30da <_printf_i+0x106>
    30d2:	2320      	movs	r3, #32
    30d4:	6822      	ldr	r2, [r4, #0]
    30d6:	439a      	bics	r2, r3
    30d8:	6022      	str	r2, [r4, #0]
    30da:	0023      	movs	r3, r4
    30dc:	2200      	movs	r2, #0
    30de:	3343      	adds	r3, #67	; 0x43
    30e0:	701a      	strb	r2, [r3, #0]
    30e2:	6863      	ldr	r3, [r4, #4]
    30e4:	60a3      	str	r3, [r4, #8]
    30e6:	2b00      	cmp	r3, #0
    30e8:	db5c      	blt.n	31a4 <_printf_i+0x1d0>
    30ea:	2204      	movs	r2, #4
    30ec:	6821      	ldr	r1, [r4, #0]
    30ee:	4391      	bics	r1, r2
    30f0:	6021      	str	r1, [r4, #0]
    30f2:	2d00      	cmp	r5, #0
    30f4:	d158      	bne.n	31a8 <_printf_i+0x1d4>
    30f6:	9e04      	ldr	r6, [sp, #16]
    30f8:	2b00      	cmp	r3, #0
    30fa:	d064      	beq.n	31c6 <_printf_i+0x1f2>
    30fc:	0026      	movs	r6, r4
    30fe:	9b03      	ldr	r3, [sp, #12]
    3100:	3642      	adds	r6, #66	; 0x42
    3102:	781b      	ldrb	r3, [r3, #0]
    3104:	7033      	strb	r3, [r6, #0]
    3106:	e05e      	b.n	31c6 <_printf_i+0x1f2>
    3108:	0648      	lsls	r0, r1, #25
    310a:	d5da      	bpl.n	30c2 <_printf_i+0xee>
    310c:	b2ad      	uxth	r5, r5
    310e:	e7d8      	b.n	30c2 <_printf_i+0xee>
    3110:	6809      	ldr	r1, [r1, #0]
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	0608      	lsls	r0, r1, #24
    3116:	d505      	bpl.n	3124 <_printf_i+0x150>
    3118:	1d11      	adds	r1, r2, #4
    311a:	6019      	str	r1, [r3, #0]
    311c:	6813      	ldr	r3, [r2, #0]
    311e:	6962      	ldr	r2, [r4, #20]
    3120:	601a      	str	r2, [r3, #0]
    3122:	e006      	b.n	3132 <_printf_i+0x15e>
    3124:	0649      	lsls	r1, r1, #25
    3126:	d5f7      	bpl.n	3118 <_printf_i+0x144>
    3128:	1d11      	adds	r1, r2, #4
    312a:	6019      	str	r1, [r3, #0]
    312c:	6813      	ldr	r3, [r2, #0]
    312e:	8aa2      	ldrh	r2, [r4, #20]
    3130:	801a      	strh	r2, [r3, #0]
    3132:	2300      	movs	r3, #0
    3134:	9e04      	ldr	r6, [sp, #16]
    3136:	6123      	str	r3, [r4, #16]
    3138:	e054      	b.n	31e4 <_printf_i+0x210>
    313a:	681a      	ldr	r2, [r3, #0]
    313c:	1d11      	adds	r1, r2, #4
    313e:	6019      	str	r1, [r3, #0]
    3140:	6816      	ldr	r6, [r2, #0]
    3142:	2100      	movs	r1, #0
    3144:	6862      	ldr	r2, [r4, #4]
    3146:	0030      	movs	r0, r6
    3148:	f000 fe4e 	bl	3de8 <memchr>
    314c:	2800      	cmp	r0, #0
    314e:	d001      	beq.n	3154 <_printf_i+0x180>
    3150:	1b80      	subs	r0, r0, r6
    3152:	6060      	str	r0, [r4, #4]
    3154:	6863      	ldr	r3, [r4, #4]
    3156:	6123      	str	r3, [r4, #16]
    3158:	2300      	movs	r3, #0
    315a:	9a04      	ldr	r2, [sp, #16]
    315c:	7013      	strb	r3, [r2, #0]
    315e:	e041      	b.n	31e4 <_printf_i+0x210>
    3160:	6923      	ldr	r3, [r4, #16]
    3162:	0032      	movs	r2, r6
    3164:	9906      	ldr	r1, [sp, #24]
    3166:	9805      	ldr	r0, [sp, #20]
    3168:	9d07      	ldr	r5, [sp, #28]
    316a:	47a8      	blx	r5
    316c:	1c43      	adds	r3, r0, #1
    316e:	d043      	beq.n	31f8 <_printf_i+0x224>
    3170:	6823      	ldr	r3, [r4, #0]
    3172:	2500      	movs	r5, #0
    3174:	079b      	lsls	r3, r3, #30
    3176:	d40f      	bmi.n	3198 <_printf_i+0x1c4>
    3178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    317a:	68e0      	ldr	r0, [r4, #12]
    317c:	4298      	cmp	r0, r3
    317e:	da3d      	bge.n	31fc <_printf_i+0x228>
    3180:	0018      	movs	r0, r3
    3182:	e03b      	b.n	31fc <_printf_i+0x228>
    3184:	0022      	movs	r2, r4
    3186:	2301      	movs	r3, #1
    3188:	3219      	adds	r2, #25
    318a:	9906      	ldr	r1, [sp, #24]
    318c:	9805      	ldr	r0, [sp, #20]
    318e:	9e07      	ldr	r6, [sp, #28]
    3190:	47b0      	blx	r6
    3192:	1c43      	adds	r3, r0, #1
    3194:	d030      	beq.n	31f8 <_printf_i+0x224>
    3196:	3501      	adds	r5, #1
    3198:	68e3      	ldr	r3, [r4, #12]
    319a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    319c:	1a9b      	subs	r3, r3, r2
    319e:	429d      	cmp	r5, r3
    31a0:	dbf0      	blt.n	3184 <_printf_i+0x1b0>
    31a2:	e7e9      	b.n	3178 <_printf_i+0x1a4>
    31a4:	2d00      	cmp	r5, #0
    31a6:	d0a9      	beq.n	30fc <_printf_i+0x128>
    31a8:	9e04      	ldr	r6, [sp, #16]
    31aa:	0028      	movs	r0, r5
    31ac:	0039      	movs	r1, r7
    31ae:	f7fe fed5 	bl	1f5c <__aeabi_uidivmod>
    31b2:	9b03      	ldr	r3, [sp, #12]
    31b4:	3e01      	subs	r6, #1
    31b6:	5c5b      	ldrb	r3, [r3, r1]
    31b8:	0028      	movs	r0, r5
    31ba:	7033      	strb	r3, [r6, #0]
    31bc:	0039      	movs	r1, r7
    31be:	f7fe fe47 	bl	1e50 <__udivsi3>
    31c2:	1e05      	subs	r5, r0, #0
    31c4:	d1f1      	bne.n	31aa <_printf_i+0x1d6>
    31c6:	2f08      	cmp	r7, #8
    31c8:	d109      	bne.n	31de <_printf_i+0x20a>
    31ca:	6823      	ldr	r3, [r4, #0]
    31cc:	07db      	lsls	r3, r3, #31
    31ce:	d506      	bpl.n	31de <_printf_i+0x20a>
    31d0:	6863      	ldr	r3, [r4, #4]
    31d2:	6922      	ldr	r2, [r4, #16]
    31d4:	4293      	cmp	r3, r2
    31d6:	dc02      	bgt.n	31de <_printf_i+0x20a>
    31d8:	2330      	movs	r3, #48	; 0x30
    31da:	3e01      	subs	r6, #1
    31dc:	7033      	strb	r3, [r6, #0]
    31de:	9b04      	ldr	r3, [sp, #16]
    31e0:	1b9b      	subs	r3, r3, r6
    31e2:	6123      	str	r3, [r4, #16]
    31e4:	9b07      	ldr	r3, [sp, #28]
    31e6:	aa09      	add	r2, sp, #36	; 0x24
    31e8:	9300      	str	r3, [sp, #0]
    31ea:	0021      	movs	r1, r4
    31ec:	9b06      	ldr	r3, [sp, #24]
    31ee:	9805      	ldr	r0, [sp, #20]
    31f0:	f7ff fe82 	bl	2ef8 <_printf_common>
    31f4:	1c43      	adds	r3, r0, #1
    31f6:	d1b3      	bne.n	3160 <_printf_i+0x18c>
    31f8:	2001      	movs	r0, #1
    31fa:	4240      	negs	r0, r0
    31fc:	b00b      	add	sp, #44	; 0x2c
    31fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3200:	0000442c 	.word	0x0000442c
    3204:	0000441b 	.word	0x0000441b

00003208 <__svfiscanf_r>:
    3208:	b5f0      	push	{r4, r5, r6, r7, lr}
    320a:	4cbd      	ldr	r4, [pc, #756]	; (3500 <__svfiscanf_r+0x2f8>)
    320c:	2586      	movs	r5, #134	; 0x86
    320e:	44a5      	add	sp, r4
    3210:	9303      	str	r3, [sp, #12]
    3212:	2300      	movs	r3, #0
    3214:	9348      	str	r3, [sp, #288]	; 0x120
    3216:	9349      	str	r3, [sp, #292]	; 0x124
    3218:	ab05      	add	r3, sp, #20
    321a:	934a      	str	r3, [sp, #296]	; 0x128
    321c:	23be      	movs	r3, #190	; 0xbe
    321e:	006d      	lsls	r5, r5, #1
    3220:	9000      	str	r0, [sp, #0]
    3222:	000c      	movs	r4, r1
    3224:	a802      	add	r0, sp, #8
    3226:	49b7      	ldr	r1, [pc, #732]	; (3504 <__svfiscanf_r+0x2fc>)
    3228:	005b      	lsls	r3, r3, #1
    322a:	1940      	adds	r0, r0, r5
    322c:	27c0      	movs	r7, #192	; 0xc0
    322e:	50c1      	str	r1, [r0, r3]
    3230:	ab02      	add	r3, sp, #8
    3232:	195b      	adds	r3, r3, r5
    3234:	0015      	movs	r5, r2
    3236:	49b4      	ldr	r1, [pc, #720]	; (3508 <__svfiscanf_r+0x300>)
    3238:	007f      	lsls	r7, r7, #1
    323a:	51d9      	str	r1, [r3, r7]
    323c:	782b      	ldrb	r3, [r5, #0]
    323e:	2b00      	cmp	r3, #0
    3240:	d100      	bne.n	3244 <__svfiscanf_r+0x3c>
    3242:	e15b      	b.n	34fc <__svfiscanf_r+0x2f4>
    3244:	f7ff fbd6 	bl	29f4 <__locale_ctype_ptr>
    3248:	2208      	movs	r2, #8
    324a:	782b      	ldrb	r3, [r5, #0]
    324c:	18c0      	adds	r0, r0, r3
    324e:	9301      	str	r3, [sp, #4]
    3250:	7843      	ldrb	r3, [r0, #1]
    3252:	4013      	ands	r3, r2
    3254:	d141      	bne.n	32da <__svfiscanf_r+0xd2>
    3256:	9a01      	ldr	r2, [sp, #4]
    3258:	1c6e      	adds	r6, r5, #1
    325a:	2a25      	cmp	r2, #37	; 0x25
    325c:	d000      	beq.n	3260 <__svfiscanf_r+0x58>
    325e:	e0a8      	b.n	33b2 <__svfiscanf_r+0x1aa>
    3260:	9347      	str	r3, [sp, #284]	; 0x11c
    3262:	9345      	str	r3, [sp, #276]	; 0x114
    3264:	786b      	ldrb	r3, [r5, #1]
    3266:	2b2a      	cmp	r3, #42	; 0x2a
    3268:	d102      	bne.n	3270 <__svfiscanf_r+0x68>
    326a:	3b1a      	subs	r3, #26
    326c:	9345      	str	r3, [sp, #276]	; 0x114
    326e:	1cae      	adds	r6, r5, #2
    3270:	0035      	movs	r5, r6
    3272:	220a      	movs	r2, #10
    3274:	7829      	ldrb	r1, [r5, #0]
    3276:	000b      	movs	r3, r1
    3278:	3b30      	subs	r3, #48	; 0x30
    327a:	2b09      	cmp	r3, #9
    327c:	d948      	bls.n	3310 <__svfiscanf_r+0x108>
    327e:	4ea3      	ldr	r6, [pc, #652]	; (350c <__svfiscanf_r+0x304>)
    3280:	2203      	movs	r2, #3
    3282:	0030      	movs	r0, r6
    3284:	f000 fdb0 	bl	3de8 <memchr>
    3288:	2800      	cmp	r0, #0
    328a:	d007      	beq.n	329c <__svfiscanf_r+0x94>
    328c:	2301      	movs	r3, #1
    328e:	1b80      	subs	r0, r0, r6
    3290:	4083      	lsls	r3, r0
    3292:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3294:	3501      	adds	r5, #1
    3296:	4313      	orrs	r3, r2
    3298:	9202      	str	r2, [sp, #8]
    329a:	9345      	str	r3, [sp, #276]	; 0x114
    329c:	782b      	ldrb	r3, [r5, #0]
    329e:	1c6e      	adds	r6, r5, #1
    32a0:	2b67      	cmp	r3, #103	; 0x67
    32a2:	d858      	bhi.n	3356 <__svfiscanf_r+0x14e>
    32a4:	2b65      	cmp	r3, #101	; 0x65
    32a6:	d300      	bcc.n	32aa <__svfiscanf_r+0xa2>
    32a8:	e0dd      	b.n	3466 <__svfiscanf_r+0x25e>
    32aa:	2b47      	cmp	r3, #71	; 0x47
    32ac:	d838      	bhi.n	3320 <__svfiscanf_r+0x118>
    32ae:	2b45      	cmp	r3, #69	; 0x45
    32b0:	d300      	bcc.n	32b4 <__svfiscanf_r+0xac>
    32b2:	e0d8      	b.n	3466 <__svfiscanf_r+0x25e>
    32b4:	2b00      	cmp	r3, #0
    32b6:	d100      	bne.n	32ba <__svfiscanf_r+0xb2>
    32b8:	e11d      	b.n	34f6 <__svfiscanf_r+0x2ee>
    32ba:	2b25      	cmp	r3, #37	; 0x25
    32bc:	d079      	beq.n	33b2 <__svfiscanf_r+0x1aa>
    32be:	2303      	movs	r3, #3
    32c0:	934b      	str	r3, [sp, #300]	; 0x12c
    32c2:	3307      	adds	r3, #7
    32c4:	9346      	str	r3, [sp, #280]	; 0x118
    32c6:	e053      	b.n	3370 <__svfiscanf_r+0x168>
    32c8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    32ca:	3301      	adds	r3, #1
    32cc:	9201      	str	r2, [sp, #4]
    32ce:	3201      	adds	r2, #1
    32d0:	9249      	str	r2, [sp, #292]	; 0x124
    32d2:	6862      	ldr	r2, [r4, #4]
    32d4:	6023      	str	r3, [r4, #0]
    32d6:	3a01      	subs	r2, #1
    32d8:	6062      	str	r2, [r4, #4]
    32da:	6863      	ldr	r3, [r4, #4]
    32dc:	2b00      	cmp	r3, #0
    32de:	dd0b      	ble.n	32f8 <__svfiscanf_r+0xf0>
    32e0:	f7ff fb88 	bl	29f4 <__locale_ctype_ptr>
    32e4:	2108      	movs	r1, #8
    32e6:	6823      	ldr	r3, [r4, #0]
    32e8:	781a      	ldrb	r2, [r3, #0]
    32ea:	1880      	adds	r0, r0, r2
    32ec:	7842      	ldrb	r2, [r0, #1]
    32ee:	420a      	tst	r2, r1
    32f0:	d1ea      	bne.n	32c8 <__svfiscanf_r+0xc0>
    32f2:	1c6e      	adds	r6, r5, #1
    32f4:	0035      	movs	r5, r6
    32f6:	e7a1      	b.n	323c <__svfiscanf_r+0x34>
    32f8:	2286      	movs	r2, #134	; 0x86
    32fa:	ab02      	add	r3, sp, #8
    32fc:	0052      	lsls	r2, r2, #1
    32fe:	189b      	adds	r3, r3, r2
    3300:	59db      	ldr	r3, [r3, r7]
    3302:	0021      	movs	r1, r4
    3304:	9800      	ldr	r0, [sp, #0]
    3306:	9301      	str	r3, [sp, #4]
    3308:	4798      	blx	r3
    330a:	2800      	cmp	r0, #0
    330c:	d0e8      	beq.n	32e0 <__svfiscanf_r+0xd8>
    330e:	e7f0      	b.n	32f2 <__svfiscanf_r+0xea>
    3310:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3312:	3501      	adds	r5, #1
    3314:	9302      	str	r3, [sp, #8]
    3316:	4353      	muls	r3, r2
    3318:	3b30      	subs	r3, #48	; 0x30
    331a:	1859      	adds	r1, r3, r1
    331c:	9147      	str	r1, [sp, #284]	; 0x11c
    331e:	e7a9      	b.n	3274 <__svfiscanf_r+0x6c>
    3320:	2b5b      	cmp	r3, #91	; 0x5b
    3322:	d100      	bne.n	3326 <__svfiscanf_r+0x11e>
    3324:	e077      	b.n	3416 <__svfiscanf_r+0x20e>
    3326:	d80f      	bhi.n	3348 <__svfiscanf_r+0x140>
    3328:	2b58      	cmp	r3, #88	; 0x58
    332a:	d1c8      	bne.n	32be <__svfiscanf_r+0xb6>
    332c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    332e:	9201      	str	r2, [sp, #4]
    3330:	2280      	movs	r2, #128	; 0x80
    3332:	9901      	ldr	r1, [sp, #4]
    3334:	0092      	lsls	r2, r2, #2
    3336:	430a      	orrs	r2, r1
    3338:	9245      	str	r2, [sp, #276]	; 0x114
    333a:	2210      	movs	r2, #16
    333c:	9246      	str	r2, [sp, #280]	; 0x118
    333e:	2203      	movs	r2, #3
    3340:	2b6e      	cmp	r3, #110	; 0x6e
    3342:	dd14      	ble.n	336e <__svfiscanf_r+0x166>
    3344:	3201      	adds	r2, #1
    3346:	e012      	b.n	336e <__svfiscanf_r+0x166>
    3348:	2b63      	cmp	r3, #99	; 0x63
    334a:	d100      	bne.n	334e <__svfiscanf_r+0x146>
    334c:	e071      	b.n	3432 <__svfiscanf_r+0x22a>
    334e:	2b64      	cmp	r3, #100	; 0x64
    3350:	d1b5      	bne.n	32be <__svfiscanf_r+0xb6>
    3352:	220a      	movs	r2, #10
    3354:	e7f2      	b.n	333c <__svfiscanf_r+0x134>
    3356:	2b70      	cmp	r3, #112	; 0x70
    3358:	d052      	beq.n	3400 <__svfiscanf_r+0x1f8>
    335a:	d822      	bhi.n	33a2 <__svfiscanf_r+0x19a>
    335c:	2b6e      	cmp	r3, #110	; 0x6e
    335e:	d100      	bne.n	3362 <__svfiscanf_r+0x15a>
    3360:	e06f      	b.n	3442 <__svfiscanf_r+0x23a>
    3362:	d854      	bhi.n	340e <__svfiscanf_r+0x206>
    3364:	2b69      	cmp	r3, #105	; 0x69
    3366:	d1aa      	bne.n	32be <__svfiscanf_r+0xb6>
    3368:	2300      	movs	r3, #0
    336a:	2203      	movs	r2, #3
    336c:	9346      	str	r3, [sp, #280]	; 0x118
    336e:	924b      	str	r2, [sp, #300]	; 0x12c
    3370:	6863      	ldr	r3, [r4, #4]
    3372:	2b00      	cmp	r3, #0
    3374:	dc00      	bgt.n	3378 <__svfiscanf_r+0x170>
    3376:	e078      	b.n	346a <__svfiscanf_r+0x262>
    3378:	9b45      	ldr	r3, [sp, #276]	; 0x114
    337a:	9301      	str	r3, [sp, #4]
    337c:	065b      	lsls	r3, r3, #25
    337e:	d400      	bmi.n	3382 <__svfiscanf_r+0x17a>
    3380:	e08b      	b.n	349a <__svfiscanf_r+0x292>
    3382:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3384:	2b02      	cmp	r3, #2
    3386:	dd00      	ble.n	338a <__svfiscanf_r+0x182>
    3388:	e09d      	b.n	34c6 <__svfiscanf_r+0x2be>
    338a:	ab03      	add	r3, sp, #12
    338c:	0022      	movs	r2, r4
    338e:	a945      	add	r1, sp, #276	; 0x114
    3390:	9800      	ldr	r0, [sp, #0]
    3392:	f000 f8e7 	bl	3564 <_scanf_chars>
    3396:	2801      	cmp	r0, #1
    3398:	d100      	bne.n	339c <__svfiscanf_r+0x194>
    339a:	e0af      	b.n	34fc <__svfiscanf_r+0x2f4>
    339c:	2802      	cmp	r0, #2
    339e:	d1a9      	bne.n	32f4 <__svfiscanf_r+0xec>
    33a0:	e025      	b.n	33ee <__svfiscanf_r+0x1e6>
    33a2:	2b75      	cmp	r3, #117	; 0x75
    33a4:	d0d5      	beq.n	3352 <__svfiscanf_r+0x14a>
    33a6:	2b78      	cmp	r3, #120	; 0x78
    33a8:	d0c0      	beq.n	332c <__svfiscanf_r+0x124>
    33aa:	2b73      	cmp	r3, #115	; 0x73
    33ac:	d187      	bne.n	32be <__svfiscanf_r+0xb6>
    33ae:	2302      	movs	r3, #2
    33b0:	e03d      	b.n	342e <__svfiscanf_r+0x226>
    33b2:	6863      	ldr	r3, [r4, #4]
    33b4:	2b00      	cmp	r3, #0
    33b6:	dd0f      	ble.n	33d8 <__svfiscanf_r+0x1d0>
    33b8:	6823      	ldr	r3, [r4, #0]
    33ba:	9901      	ldr	r1, [sp, #4]
    33bc:	781a      	ldrb	r2, [r3, #0]
    33be:	4291      	cmp	r1, r2
    33c0:	d000      	beq.n	33c4 <__svfiscanf_r+0x1bc>
    33c2:	e09b      	b.n	34fc <__svfiscanf_r+0x2f4>
    33c4:	3301      	adds	r3, #1
    33c6:	6862      	ldr	r2, [r4, #4]
    33c8:	6023      	str	r3, [r4, #0]
    33ca:	9b49      	ldr	r3, [sp, #292]	; 0x124
    33cc:	3a01      	subs	r2, #1
    33ce:	9301      	str	r3, [sp, #4]
    33d0:	3301      	adds	r3, #1
    33d2:	6062      	str	r2, [r4, #4]
    33d4:	9349      	str	r3, [sp, #292]	; 0x124
    33d6:	e78d      	b.n	32f4 <__svfiscanf_r+0xec>
    33d8:	2286      	movs	r2, #134	; 0x86
    33da:	ab02      	add	r3, sp, #8
    33dc:	0052      	lsls	r2, r2, #1
    33de:	189b      	adds	r3, r3, r2
    33e0:	59db      	ldr	r3, [r3, r7]
    33e2:	0021      	movs	r1, r4
    33e4:	9800      	ldr	r0, [sp, #0]
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	4798      	blx	r3
    33ea:	2800      	cmp	r0, #0
    33ec:	d0e4      	beq.n	33b8 <__svfiscanf_r+0x1b0>
    33ee:	9848      	ldr	r0, [sp, #288]	; 0x120
    33f0:	2800      	cmp	r0, #0
    33f2:	d000      	beq.n	33f6 <__svfiscanf_r+0x1ee>
    33f4:	e07b      	b.n	34ee <__svfiscanf_r+0x2e6>
    33f6:	3801      	subs	r0, #1
    33f8:	23a7      	movs	r3, #167	; 0xa7
    33fa:	009b      	lsls	r3, r3, #2
    33fc:	449d      	add	sp, r3
    33fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3400:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3402:	9201      	str	r2, [sp, #4]
    3404:	2220      	movs	r2, #32
    3406:	9901      	ldr	r1, [sp, #4]
    3408:	430a      	orrs	r2, r1
    340a:	9245      	str	r2, [sp, #276]	; 0x114
    340c:	e78e      	b.n	332c <__svfiscanf_r+0x124>
    340e:	2308      	movs	r3, #8
    3410:	2204      	movs	r2, #4
    3412:	9346      	str	r3, [sp, #280]	; 0x118
    3414:	e7ab      	b.n	336e <__svfiscanf_r+0x166>
    3416:	0031      	movs	r1, r6
    3418:	a805      	add	r0, sp, #20
    341a:	f000 fab5 	bl	3988 <__sccl>
    341e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3420:	0006      	movs	r6, r0
    3422:	9301      	str	r3, [sp, #4]
    3424:	2340      	movs	r3, #64	; 0x40
    3426:	9a01      	ldr	r2, [sp, #4]
    3428:	4313      	orrs	r3, r2
    342a:	9345      	str	r3, [sp, #276]	; 0x114
    342c:	2301      	movs	r3, #1
    342e:	934b      	str	r3, [sp, #300]	; 0x12c
    3430:	e79e      	b.n	3370 <__svfiscanf_r+0x168>
    3432:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3434:	9301      	str	r3, [sp, #4]
    3436:	2340      	movs	r3, #64	; 0x40
    3438:	9a01      	ldr	r2, [sp, #4]
    343a:	4313      	orrs	r3, r2
    343c:	9345      	str	r3, [sp, #276]	; 0x114
    343e:	2300      	movs	r3, #0
    3440:	e7f5      	b.n	342e <__svfiscanf_r+0x226>
    3442:	9945      	ldr	r1, [sp, #276]	; 0x114
    3444:	06cb      	lsls	r3, r1, #27
    3446:	d500      	bpl.n	344a <__svfiscanf_r+0x242>
    3448:	e754      	b.n	32f4 <__svfiscanf_r+0xec>
    344a:	9b03      	ldr	r3, [sp, #12]
    344c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    344e:	07c8      	lsls	r0, r1, #31
    3450:	d504      	bpl.n	345c <__svfiscanf_r+0x254>
    3452:	1d19      	adds	r1, r3, #4
    3454:	9103      	str	r1, [sp, #12]
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	801a      	strh	r2, [r3, #0]
    345a:	e74b      	b.n	32f4 <__svfiscanf_r+0xec>
    345c:	1d19      	adds	r1, r3, #4
    345e:	9103      	str	r1, [sp, #12]
    3460:	681b      	ldr	r3, [r3, #0]
    3462:	601a      	str	r2, [r3, #0]
    3464:	e746      	b.n	32f4 <__svfiscanf_r+0xec>
    3466:	2305      	movs	r3, #5
    3468:	e7e1      	b.n	342e <__svfiscanf_r+0x226>
    346a:	2286      	movs	r2, #134	; 0x86
    346c:	ab02      	add	r3, sp, #8
    346e:	0052      	lsls	r2, r2, #1
    3470:	189b      	adds	r3, r3, r2
    3472:	59db      	ldr	r3, [r3, r7]
    3474:	0021      	movs	r1, r4
    3476:	9800      	ldr	r0, [sp, #0]
    3478:	9301      	str	r3, [sp, #4]
    347a:	4798      	blx	r3
    347c:	2800      	cmp	r0, #0
    347e:	d100      	bne.n	3482 <__svfiscanf_r+0x27a>
    3480:	e77a      	b.n	3378 <__svfiscanf_r+0x170>
    3482:	e7b4      	b.n	33ee <__svfiscanf_r+0x1e6>
    3484:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3486:	9201      	str	r2, [sp, #4]
    3488:	3201      	adds	r2, #1
    348a:	9249      	str	r2, [sp, #292]	; 0x124
    348c:	6862      	ldr	r2, [r4, #4]
    348e:	3a01      	subs	r2, #1
    3490:	6062      	str	r2, [r4, #4]
    3492:	2a00      	cmp	r2, #0
    3494:	dd0b      	ble.n	34ae <__svfiscanf_r+0x2a6>
    3496:	3301      	adds	r3, #1
    3498:	6023      	str	r3, [r4, #0]
    349a:	f7ff faab 	bl	29f4 <__locale_ctype_ptr>
    349e:	2108      	movs	r1, #8
    34a0:	6823      	ldr	r3, [r4, #0]
    34a2:	781a      	ldrb	r2, [r3, #0]
    34a4:	1880      	adds	r0, r0, r2
    34a6:	7842      	ldrb	r2, [r0, #1]
    34a8:	420a      	tst	r2, r1
    34aa:	d1eb      	bne.n	3484 <__svfiscanf_r+0x27c>
    34ac:	e769      	b.n	3382 <__svfiscanf_r+0x17a>
    34ae:	2286      	movs	r2, #134	; 0x86
    34b0:	ab02      	add	r3, sp, #8
    34b2:	0052      	lsls	r2, r2, #1
    34b4:	189b      	adds	r3, r3, r2
    34b6:	59db      	ldr	r3, [r3, r7]
    34b8:	0021      	movs	r1, r4
    34ba:	9800      	ldr	r0, [sp, #0]
    34bc:	9301      	str	r3, [sp, #4]
    34be:	4798      	blx	r3
    34c0:	2800      	cmp	r0, #0
    34c2:	d0ea      	beq.n	349a <__svfiscanf_r+0x292>
    34c4:	e793      	b.n	33ee <__svfiscanf_r+0x1e6>
    34c6:	2b04      	cmp	r3, #4
    34c8:	dc06      	bgt.n	34d8 <__svfiscanf_r+0x2d0>
    34ca:	ab03      	add	r3, sp, #12
    34cc:	0022      	movs	r2, r4
    34ce:	a945      	add	r1, sp, #276	; 0x114
    34d0:	9800      	ldr	r0, [sp, #0]
    34d2:	f000 f8ab 	bl	362c <_scanf_i>
    34d6:	e75e      	b.n	3396 <__svfiscanf_r+0x18e>
    34d8:	4b0d      	ldr	r3, [pc, #52]	; (3510 <__svfiscanf_r+0x308>)
    34da:	2b00      	cmp	r3, #0
    34dc:	d100      	bne.n	34e0 <__svfiscanf_r+0x2d8>
    34de:	e709      	b.n	32f4 <__svfiscanf_r+0xec>
    34e0:	ab03      	add	r3, sp, #12
    34e2:	0022      	movs	r2, r4
    34e4:	a945      	add	r1, sp, #276	; 0x114
    34e6:	9800      	ldr	r0, [sp, #0]
    34e8:	e000      	b.n	34ec <__svfiscanf_r+0x2e4>
    34ea:	bf00      	nop
    34ec:	e753      	b.n	3396 <__svfiscanf_r+0x18e>
    34ee:	89a3      	ldrh	r3, [r4, #12]
    34f0:	065b      	lsls	r3, r3, #25
    34f2:	d400      	bmi.n	34f6 <__svfiscanf_r+0x2ee>
    34f4:	e780      	b.n	33f8 <__svfiscanf_r+0x1f0>
    34f6:	2001      	movs	r0, #1
    34f8:	4240      	negs	r0, r0
    34fa:	e77d      	b.n	33f8 <__svfiscanf_r+0x1f0>
    34fc:	9848      	ldr	r0, [sp, #288]	; 0x120
    34fe:	e77b      	b.n	33f8 <__svfiscanf_r+0x1f0>
    3500:	fffffd64 	.word	0xfffffd64
    3504:	00003c31 	.word	0x00003c31
    3508:	00003845 	.word	0x00003845
    350c:	00004410 	.word	0x00004410
    3510:	00000000 	.word	0x00000000

00003514 <_vfiscanf_r>:
    3514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3516:	0004      	movs	r4, r0
    3518:	000d      	movs	r5, r1
    351a:	0016      	movs	r6, r2
    351c:	001f      	movs	r7, r3
    351e:	2800      	cmp	r0, #0
    3520:	d004      	beq.n	352c <_vfiscanf_r+0x18>
    3522:	6983      	ldr	r3, [r0, #24]
    3524:	2b00      	cmp	r3, #0
    3526:	d101      	bne.n	352c <_vfiscanf_r+0x18>
    3528:	f7ff f9b0 	bl	288c <__sinit>
    352c:	4b0a      	ldr	r3, [pc, #40]	; (3558 <_vfiscanf_r+0x44>)
    352e:	429d      	cmp	r5, r3
    3530:	d107      	bne.n	3542 <_vfiscanf_r+0x2e>
    3532:	6865      	ldr	r5, [r4, #4]
    3534:	003b      	movs	r3, r7
    3536:	0032      	movs	r2, r6
    3538:	0029      	movs	r1, r5
    353a:	0020      	movs	r0, r4
    353c:	f7ff fe64 	bl	3208 <__svfiscanf_r>
    3540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3542:	4b06      	ldr	r3, [pc, #24]	; (355c <_vfiscanf_r+0x48>)
    3544:	429d      	cmp	r5, r3
    3546:	d101      	bne.n	354c <_vfiscanf_r+0x38>
    3548:	68a5      	ldr	r5, [r4, #8]
    354a:	e7f3      	b.n	3534 <_vfiscanf_r+0x20>
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <_vfiscanf_r+0x4c>)
    354e:	429d      	cmp	r5, r3
    3550:	d1f0      	bne.n	3534 <_vfiscanf_r+0x20>
    3552:	68e5      	ldr	r5, [r4, #12]
    3554:	e7ee      	b.n	3534 <_vfiscanf_r+0x20>
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	000043c0 	.word	0x000043c0
    355c:	000043e0 	.word	0x000043e0
    3560:	000043a0 	.word	0x000043a0

00003564 <_scanf_chars>:
    3564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3566:	0015      	movs	r5, r2
    3568:	688a      	ldr	r2, [r1, #8]
    356a:	9001      	str	r0, [sp, #4]
    356c:	000c      	movs	r4, r1
    356e:	2a00      	cmp	r2, #0
    3570:	d106      	bne.n	3580 <_scanf_chars+0x1c>
    3572:	698a      	ldr	r2, [r1, #24]
    3574:	1e51      	subs	r1, r2, #1
    3576:	418a      	sbcs	r2, r1
    3578:	2101      	movs	r1, #1
    357a:	4252      	negs	r2, r2
    357c:	430a      	orrs	r2, r1
    357e:	60a2      	str	r2, [r4, #8]
    3580:	6822      	ldr	r2, [r4, #0]
    3582:	06d2      	lsls	r2, r2, #27
    3584:	d403      	bmi.n	358e <_scanf_chars+0x2a>
    3586:	681a      	ldr	r2, [r3, #0]
    3588:	1d11      	adds	r1, r2, #4
    358a:	6019      	str	r1, [r3, #0]
    358c:	6817      	ldr	r7, [r2, #0]
    358e:	2600      	movs	r6, #0
    3590:	69a3      	ldr	r3, [r4, #24]
    3592:	2b00      	cmp	r3, #0
    3594:	d01c      	beq.n	35d0 <_scanf_chars+0x6c>
    3596:	2b01      	cmp	r3, #1
    3598:	d108      	bne.n	35ac <_scanf_chars+0x48>
    359a:	682b      	ldr	r3, [r5, #0]
    359c:	6962      	ldr	r2, [r4, #20]
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	5cd3      	ldrb	r3, [r2, r3]
    35a2:	2b00      	cmp	r3, #0
    35a4:	d114      	bne.n	35d0 <_scanf_chars+0x6c>
    35a6:	2e00      	cmp	r6, #0
    35a8:	d130      	bne.n	360c <_scanf_chars+0xa8>
    35aa:	e006      	b.n	35ba <_scanf_chars+0x56>
    35ac:	2b02      	cmp	r3, #2
    35ae:	d006      	beq.n	35be <_scanf_chars+0x5a>
    35b0:	2e00      	cmp	r6, #0
    35b2:	d12b      	bne.n	360c <_scanf_chars+0xa8>
    35b4:	69a3      	ldr	r3, [r4, #24]
    35b6:	2b01      	cmp	r3, #1
    35b8:	d128      	bne.n	360c <_scanf_chars+0xa8>
    35ba:	2001      	movs	r0, #1
    35bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    35be:	f7ff fa19 	bl	29f4 <__locale_ctype_ptr>
    35c2:	2208      	movs	r2, #8
    35c4:	682b      	ldr	r3, [r5, #0]
    35c6:	781b      	ldrb	r3, [r3, #0]
    35c8:	18c0      	adds	r0, r0, r3
    35ca:	7843      	ldrb	r3, [r0, #1]
    35cc:	4213      	tst	r3, r2
    35ce:	d1ef      	bne.n	35b0 <_scanf_chars+0x4c>
    35d0:	2210      	movs	r2, #16
    35d2:	6823      	ldr	r3, [r4, #0]
    35d4:	3601      	adds	r6, #1
    35d6:	4213      	tst	r3, r2
    35d8:	d103      	bne.n	35e2 <_scanf_chars+0x7e>
    35da:	682b      	ldr	r3, [r5, #0]
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	703b      	strb	r3, [r7, #0]
    35e0:	3701      	adds	r7, #1
    35e2:	682a      	ldr	r2, [r5, #0]
    35e4:	686b      	ldr	r3, [r5, #4]
    35e6:	3201      	adds	r2, #1
    35e8:	602a      	str	r2, [r5, #0]
    35ea:	68a2      	ldr	r2, [r4, #8]
    35ec:	3b01      	subs	r3, #1
    35ee:	3a01      	subs	r2, #1
    35f0:	606b      	str	r3, [r5, #4]
    35f2:	60a2      	str	r2, [r4, #8]
    35f4:	2a00      	cmp	r2, #0
    35f6:	d009      	beq.n	360c <_scanf_chars+0xa8>
    35f8:	2b00      	cmp	r3, #0
    35fa:	dcc9      	bgt.n	3590 <_scanf_chars+0x2c>
    35fc:	23c0      	movs	r3, #192	; 0xc0
    35fe:	005b      	lsls	r3, r3, #1
    3600:	58e3      	ldr	r3, [r4, r3]
    3602:	0029      	movs	r1, r5
    3604:	9801      	ldr	r0, [sp, #4]
    3606:	4798      	blx	r3
    3608:	2800      	cmp	r0, #0
    360a:	d0c1      	beq.n	3590 <_scanf_chars+0x2c>
    360c:	2310      	movs	r3, #16
    360e:	6822      	ldr	r2, [r4, #0]
    3610:	4013      	ands	r3, r2
    3612:	d106      	bne.n	3622 <_scanf_chars+0xbe>
    3614:	68e2      	ldr	r2, [r4, #12]
    3616:	3201      	adds	r2, #1
    3618:	60e2      	str	r2, [r4, #12]
    361a:	69a2      	ldr	r2, [r4, #24]
    361c:	2a00      	cmp	r2, #0
    361e:	d000      	beq.n	3622 <_scanf_chars+0xbe>
    3620:	703b      	strb	r3, [r7, #0]
    3622:	6923      	ldr	r3, [r4, #16]
    3624:	2000      	movs	r0, #0
    3626:	199e      	adds	r6, r3, r6
    3628:	6126      	str	r6, [r4, #16]
    362a:	e7c7      	b.n	35bc <_scanf_chars+0x58>

0000362c <_scanf_i>:
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	000c      	movs	r4, r1
    3630:	b08d      	sub	sp, #52	; 0x34
    3632:	9302      	str	r3, [sp, #8]
    3634:	4b77      	ldr	r3, [pc, #476]	; (3814 <_scanf_i+0x1e8>)
    3636:	9005      	str	r0, [sp, #20]
    3638:	0016      	movs	r6, r2
    363a:	aa09      	add	r2, sp, #36	; 0x24
    363c:	cb23      	ldmia	r3!, {r0, r1, r5}
    363e:	c223      	stmia	r2!, {r0, r1, r5}
    3640:	4b75      	ldr	r3, [pc, #468]	; (3818 <_scanf_i+0x1ec>)
    3642:	9306      	str	r3, [sp, #24]
    3644:	69a3      	ldr	r3, [r4, #24]
    3646:	2b03      	cmp	r3, #3
    3648:	d001      	beq.n	364e <_scanf_i+0x22>
    364a:	4b74      	ldr	r3, [pc, #464]	; (381c <_scanf_i+0x1f0>)
    364c:	9306      	str	r3, [sp, #24]
    364e:	22ae      	movs	r2, #174	; 0xae
    3650:	2000      	movs	r0, #0
    3652:	68a3      	ldr	r3, [r4, #8]
    3654:	0052      	lsls	r2, r2, #1
    3656:	1e59      	subs	r1, r3, #1
    3658:	9004      	str	r0, [sp, #16]
    365a:	4291      	cmp	r1, r2
    365c:	d905      	bls.n	366a <_scanf_i+0x3e>
    365e:	3b5e      	subs	r3, #94	; 0x5e
    3660:	3bff      	subs	r3, #255	; 0xff
    3662:	9304      	str	r3, [sp, #16]
    3664:	235e      	movs	r3, #94	; 0x5e
    3666:	33ff      	adds	r3, #255	; 0xff
    3668:	60a3      	str	r3, [r4, #8]
    366a:	0023      	movs	r3, r4
    366c:	331c      	adds	r3, #28
    366e:	9301      	str	r3, [sp, #4]
    3670:	23d0      	movs	r3, #208	; 0xd0
    3672:	2700      	movs	r7, #0
    3674:	6822      	ldr	r2, [r4, #0]
    3676:	011b      	lsls	r3, r3, #4
    3678:	4313      	orrs	r3, r2
    367a:	6023      	str	r3, [r4, #0]
    367c:	9b01      	ldr	r3, [sp, #4]
    367e:	9303      	str	r3, [sp, #12]
    3680:	6833      	ldr	r3, [r6, #0]
    3682:	a809      	add	r0, sp, #36	; 0x24
    3684:	7819      	ldrb	r1, [r3, #0]
    3686:	00bb      	lsls	r3, r7, #2
    3688:	2202      	movs	r2, #2
    368a:	5818      	ldr	r0, [r3, r0]
    368c:	f000 fbac 	bl	3de8 <memchr>
    3690:	2800      	cmp	r0, #0
    3692:	d02b      	beq.n	36ec <_scanf_i+0xc0>
    3694:	2f01      	cmp	r7, #1
    3696:	d15f      	bne.n	3758 <_scanf_i+0x12c>
    3698:	6863      	ldr	r3, [r4, #4]
    369a:	2b00      	cmp	r3, #0
    369c:	d106      	bne.n	36ac <_scanf_i+0x80>
    369e:	3308      	adds	r3, #8
    36a0:	6822      	ldr	r2, [r4, #0]
    36a2:	6063      	str	r3, [r4, #4]
    36a4:	33f9      	adds	r3, #249	; 0xf9
    36a6:	33ff      	adds	r3, #255	; 0xff
    36a8:	4313      	orrs	r3, r2
    36aa:	6023      	str	r3, [r4, #0]
    36ac:	4b5c      	ldr	r3, [pc, #368]	; (3820 <_scanf_i+0x1f4>)
    36ae:	6822      	ldr	r2, [r4, #0]
    36b0:	4013      	ands	r3, r2
    36b2:	6023      	str	r3, [r4, #0]
    36b4:	68a3      	ldr	r3, [r4, #8]
    36b6:	1e5a      	subs	r2, r3, #1
    36b8:	60a2      	str	r2, [r4, #8]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d016      	beq.n	36ec <_scanf_i+0xc0>
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	1c5d      	adds	r5, r3, #1
    36c2:	6833      	ldr	r3, [r6, #0]
    36c4:	1c5a      	adds	r2, r3, #1
    36c6:	6032      	str	r2, [r6, #0]
    36c8:	781b      	ldrb	r3, [r3, #0]
    36ca:	9a03      	ldr	r2, [sp, #12]
    36cc:	9503      	str	r5, [sp, #12]
    36ce:	7013      	strb	r3, [r2, #0]
    36d0:	6873      	ldr	r3, [r6, #4]
    36d2:	3b01      	subs	r3, #1
    36d4:	6073      	str	r3, [r6, #4]
    36d6:	2b00      	cmp	r3, #0
    36d8:	dc08      	bgt.n	36ec <_scanf_i+0xc0>
    36da:	23c0      	movs	r3, #192	; 0xc0
    36dc:	005b      	lsls	r3, r3, #1
    36de:	58e3      	ldr	r3, [r4, r3]
    36e0:	0031      	movs	r1, r6
    36e2:	9805      	ldr	r0, [sp, #20]
    36e4:	9307      	str	r3, [sp, #28]
    36e6:	4798      	blx	r3
    36e8:	2800      	cmp	r0, #0
    36ea:	d17d      	bne.n	37e8 <_scanf_i+0x1bc>
    36ec:	3701      	adds	r7, #1
    36ee:	2f03      	cmp	r7, #3
    36f0:	d1c6      	bne.n	3680 <_scanf_i+0x54>
    36f2:	6863      	ldr	r3, [r4, #4]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d101      	bne.n	36fc <_scanf_i+0xd0>
    36f8:	330a      	adds	r3, #10
    36fa:	6063      	str	r3, [r4, #4]
    36fc:	2110      	movs	r1, #16
    36fe:	2700      	movs	r7, #0
    3700:	6863      	ldr	r3, [r4, #4]
    3702:	6960      	ldr	r0, [r4, #20]
    3704:	1ac9      	subs	r1, r1, r3
    3706:	4b47      	ldr	r3, [pc, #284]	; (3824 <_scanf_i+0x1f8>)
    3708:	18c9      	adds	r1, r1, r3
    370a:	f000 f93d 	bl	3988 <__sccl>
    370e:	9d03      	ldr	r5, [sp, #12]
    3710:	68a3      	ldr	r3, [r4, #8]
    3712:	2b00      	cmp	r3, #0
    3714:	d041      	beq.n	379a <_scanf_i+0x16e>
    3716:	6832      	ldr	r2, [r6, #0]
    3718:	6960      	ldr	r0, [r4, #20]
    371a:	7811      	ldrb	r1, [r2, #0]
    371c:	5c40      	ldrb	r0, [r0, r1]
    371e:	2800      	cmp	r0, #0
    3720:	d03b      	beq.n	379a <_scanf_i+0x16e>
    3722:	2930      	cmp	r1, #48	; 0x30
    3724:	d128      	bne.n	3778 <_scanf_i+0x14c>
    3726:	2080      	movs	r0, #128	; 0x80
    3728:	6821      	ldr	r1, [r4, #0]
    372a:	0100      	lsls	r0, r0, #4
    372c:	4201      	tst	r1, r0
    372e:	d023      	beq.n	3778 <_scanf_i+0x14c>
    3730:	9a04      	ldr	r2, [sp, #16]
    3732:	3701      	adds	r7, #1
    3734:	2a00      	cmp	r2, #0
    3736:	d003      	beq.n	3740 <_scanf_i+0x114>
    3738:	3a01      	subs	r2, #1
    373a:	3301      	adds	r3, #1
    373c:	9204      	str	r2, [sp, #16]
    373e:	60a3      	str	r3, [r4, #8]
    3740:	6873      	ldr	r3, [r6, #4]
    3742:	3b01      	subs	r3, #1
    3744:	6073      	str	r3, [r6, #4]
    3746:	2b00      	cmp	r3, #0
    3748:	dd1e      	ble.n	3788 <_scanf_i+0x15c>
    374a:	6833      	ldr	r3, [r6, #0]
    374c:	3301      	adds	r3, #1
    374e:	6033      	str	r3, [r6, #0]
    3750:	68a3      	ldr	r3, [r4, #8]
    3752:	3b01      	subs	r3, #1
    3754:	60a3      	str	r3, [r4, #8]
    3756:	e7db      	b.n	3710 <_scanf_i+0xe4>
    3758:	2f02      	cmp	r7, #2
    375a:	d1ab      	bne.n	36b4 <_scanf_i+0x88>
    375c:	21c0      	movs	r1, #192	; 0xc0
    375e:	2380      	movs	r3, #128	; 0x80
    3760:	6822      	ldr	r2, [r4, #0]
    3762:	00c9      	lsls	r1, r1, #3
    3764:	4011      	ands	r1, r2
    3766:	009b      	lsls	r3, r3, #2
    3768:	4299      	cmp	r1, r3
    376a:	d1c2      	bne.n	36f2 <_scanf_i+0xc6>
    376c:	3bf1      	subs	r3, #241	; 0xf1
    376e:	3bff      	subs	r3, #255	; 0xff
    3770:	6063      	str	r3, [r4, #4]
    3772:	33f0      	adds	r3, #240	; 0xf0
    3774:	4313      	orrs	r3, r2
    3776:	e79c      	b.n	36b2 <_scanf_i+0x86>
    3778:	6821      	ldr	r1, [r4, #0]
    377a:	4b2b      	ldr	r3, [pc, #172]	; (3828 <_scanf_i+0x1fc>)
    377c:	400b      	ands	r3, r1
    377e:	6023      	str	r3, [r4, #0]
    3780:	7813      	ldrb	r3, [r2, #0]
    3782:	702b      	strb	r3, [r5, #0]
    3784:	3501      	adds	r5, #1
    3786:	e7db      	b.n	3740 <_scanf_i+0x114>
    3788:	23c0      	movs	r3, #192	; 0xc0
    378a:	005b      	lsls	r3, r3, #1
    378c:	58e3      	ldr	r3, [r4, r3]
    378e:	0031      	movs	r1, r6
    3790:	9805      	ldr	r0, [sp, #20]
    3792:	9303      	str	r3, [sp, #12]
    3794:	4798      	blx	r3
    3796:	2800      	cmp	r0, #0
    3798:	d0da      	beq.n	3750 <_scanf_i+0x124>
    379a:	6823      	ldr	r3, [r4, #0]
    379c:	05db      	lsls	r3, r3, #23
    379e:	d50e      	bpl.n	37be <_scanf_i+0x192>
    37a0:	9b01      	ldr	r3, [sp, #4]
    37a2:	429d      	cmp	r5, r3
    37a4:	d907      	bls.n	37b6 <_scanf_i+0x18a>
    37a6:	23be      	movs	r3, #190	; 0xbe
    37a8:	3d01      	subs	r5, #1
    37aa:	005b      	lsls	r3, r3, #1
    37ac:	7829      	ldrb	r1, [r5, #0]
    37ae:	58e3      	ldr	r3, [r4, r3]
    37b0:	0032      	movs	r2, r6
    37b2:	9805      	ldr	r0, [sp, #20]
    37b4:	4798      	blx	r3
    37b6:	9b01      	ldr	r3, [sp, #4]
    37b8:	2001      	movs	r0, #1
    37ba:	429d      	cmp	r5, r3
    37bc:	d027      	beq.n	380e <_scanf_i+0x1e2>
    37be:	2210      	movs	r2, #16
    37c0:	6823      	ldr	r3, [r4, #0]
    37c2:	401a      	ands	r2, r3
    37c4:	d11c      	bne.n	3800 <_scanf_i+0x1d4>
    37c6:	702a      	strb	r2, [r5, #0]
    37c8:	6863      	ldr	r3, [r4, #4]
    37ca:	9901      	ldr	r1, [sp, #4]
    37cc:	9805      	ldr	r0, [sp, #20]
    37ce:	9e06      	ldr	r6, [sp, #24]
    37d0:	47b0      	blx	r6
    37d2:	9b02      	ldr	r3, [sp, #8]
    37d4:	6822      	ldr	r2, [r4, #0]
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	0691      	lsls	r1, r2, #26
    37da:	d507      	bpl.n	37ec <_scanf_i+0x1c0>
    37dc:	9902      	ldr	r1, [sp, #8]
    37de:	1d1a      	adds	r2, r3, #4
    37e0:	600a      	str	r2, [r1, #0]
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	6018      	str	r0, [r3, #0]
    37e6:	e008      	b.n	37fa <_scanf_i+0x1ce>
    37e8:	2700      	movs	r7, #0
    37ea:	e7d6      	b.n	379a <_scanf_i+0x16e>
    37ec:	07d1      	lsls	r1, r2, #31
    37ee:	d5f5      	bpl.n	37dc <_scanf_i+0x1b0>
    37f0:	9902      	ldr	r1, [sp, #8]
    37f2:	1d1a      	adds	r2, r3, #4
    37f4:	600a      	str	r2, [r1, #0]
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	8018      	strh	r0, [r3, #0]
    37fa:	68e3      	ldr	r3, [r4, #12]
    37fc:	3301      	adds	r3, #1
    37fe:	60e3      	str	r3, [r4, #12]
    3800:	2000      	movs	r0, #0
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	1aed      	subs	r5, r5, r3
    3806:	6923      	ldr	r3, [r4, #16]
    3808:	19ef      	adds	r7, r5, r7
    380a:	19df      	adds	r7, r3, r7
    380c:	6127      	str	r7, [r4, #16]
    380e:	b00d      	add	sp, #52	; 0x34
    3810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	00004440 	.word	0x00004440
    3818:	00002495 	.word	0x00002495
    381c:	00003b95 	.word	0x00003b95
    3820:	fffffaff 	.word	0xfffffaff
    3824:	0000444c 	.word	0x0000444c
    3828:	fffff6ff 	.word	0xfffff6ff

0000382c <lflush>:
    382c:	2209      	movs	r2, #9
    382e:	b510      	push	{r4, lr}
    3830:	8983      	ldrh	r3, [r0, #12]
    3832:	4013      	ands	r3, r2
    3834:	2200      	movs	r2, #0
    3836:	2b09      	cmp	r3, #9
    3838:	d102      	bne.n	3840 <lflush+0x14>
    383a:	f7fe ffd1 	bl	27e0 <fflush>
    383e:	0002      	movs	r2, r0
    3840:	0010      	movs	r0, r2
    3842:	bd10      	pop	{r4, pc}

00003844 <__srefill_r>:
    3844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3846:	0005      	movs	r5, r0
    3848:	000c      	movs	r4, r1
    384a:	2800      	cmp	r0, #0
    384c:	d004      	beq.n	3858 <__srefill_r+0x14>
    384e:	6983      	ldr	r3, [r0, #24]
    3850:	2b00      	cmp	r3, #0
    3852:	d101      	bne.n	3858 <__srefill_r+0x14>
    3854:	f7ff f81a 	bl	288c <__sinit>
    3858:	4b3d      	ldr	r3, [pc, #244]	; (3950 <__srefill_r+0x10c>)
    385a:	429c      	cmp	r4, r3
    385c:	d10a      	bne.n	3874 <__srefill_r+0x30>
    385e:	686c      	ldr	r4, [r5, #4]
    3860:	2300      	movs	r3, #0
    3862:	6063      	str	r3, [r4, #4]
    3864:	230c      	movs	r3, #12
    3866:	5ee2      	ldrsh	r2, [r4, r3]
    3868:	b293      	uxth	r3, r2
    386a:	0699      	lsls	r1, r3, #26
    386c:	d50c      	bpl.n	3888 <__srefill_r+0x44>
    386e:	2001      	movs	r0, #1
    3870:	4240      	negs	r0, r0
    3872:	e068      	b.n	3946 <__srefill_r+0x102>
    3874:	4b37      	ldr	r3, [pc, #220]	; (3954 <__srefill_r+0x110>)
    3876:	429c      	cmp	r4, r3
    3878:	d101      	bne.n	387e <__srefill_r+0x3a>
    387a:	68ac      	ldr	r4, [r5, #8]
    387c:	e7f0      	b.n	3860 <__srefill_r+0x1c>
    387e:	4b36      	ldr	r3, [pc, #216]	; (3958 <__srefill_r+0x114>)
    3880:	429c      	cmp	r4, r3
    3882:	d1ed      	bne.n	3860 <__srefill_r+0x1c>
    3884:	68ec      	ldr	r4, [r5, #12]
    3886:	e7eb      	b.n	3860 <__srefill_r+0x1c>
    3888:	0759      	lsls	r1, r3, #29
    388a:	d44a      	bmi.n	3922 <__srefill_r+0xde>
    388c:	06d9      	lsls	r1, r3, #27
    388e:	d405      	bmi.n	389c <__srefill_r+0x58>
    3890:	2309      	movs	r3, #9
    3892:	602b      	str	r3, [r5, #0]
    3894:	3337      	adds	r3, #55	; 0x37
    3896:	4313      	orrs	r3, r2
    3898:	81a3      	strh	r3, [r4, #12]
    389a:	e7e8      	b.n	386e <__srefill_r+0x2a>
    389c:	2608      	movs	r6, #8
    389e:	4233      	tst	r3, r6
    38a0:	d00a      	beq.n	38b8 <__srefill_r+0x74>
    38a2:	0021      	movs	r1, r4
    38a4:	0028      	movs	r0, r5
    38a6:	f7fe ff6f 	bl	2788 <_fflush_r>
    38aa:	2800      	cmp	r0, #0
    38ac:	d1df      	bne.n	386e <__srefill_r+0x2a>
    38ae:	89a3      	ldrh	r3, [r4, #12]
    38b0:	60a0      	str	r0, [r4, #8]
    38b2:	43b3      	bics	r3, r6
    38b4:	81a3      	strh	r3, [r4, #12]
    38b6:	61a0      	str	r0, [r4, #24]
    38b8:	2304      	movs	r3, #4
    38ba:	89a2      	ldrh	r2, [r4, #12]
    38bc:	4313      	orrs	r3, r2
    38be:	81a3      	strh	r3, [r4, #12]
    38c0:	6923      	ldr	r3, [r4, #16]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d103      	bne.n	38ce <__srefill_r+0x8a>
    38c6:	0021      	movs	r1, r4
    38c8:	0028      	movs	r0, r5
    38ca:	f7ff f8c9 	bl	2a60 <__smakebuf_r>
    38ce:	230c      	movs	r3, #12
    38d0:	5ee7      	ldrsh	r7, [r4, r3]
    38d2:	b2be      	uxth	r6, r7
    38d4:	07b3      	lsls	r3, r6, #30
    38d6:	d00f      	beq.n	38f8 <__srefill_r+0xb4>
    38d8:	2301      	movs	r3, #1
    38da:	81a3      	strh	r3, [r4, #12]
    38dc:	4b1f      	ldr	r3, [pc, #124]	; (395c <__srefill_r+0x118>)
    38de:	4920      	ldr	r1, [pc, #128]	; (3960 <__srefill_r+0x11c>)
    38e0:	6818      	ldr	r0, [r3, #0]
    38e2:	f7ff f847 	bl	2974 <_fwalk>
    38e6:	2309      	movs	r3, #9
    38e8:	81a7      	strh	r7, [r4, #12]
    38ea:	401e      	ands	r6, r3
    38ec:	429e      	cmp	r6, r3
    38ee:	d103      	bne.n	38f8 <__srefill_r+0xb4>
    38f0:	0021      	movs	r1, r4
    38f2:	0028      	movs	r0, r5
    38f4:	f7fe febe 	bl	2674 <__sflush_r>
    38f8:	6923      	ldr	r3, [r4, #16]
    38fa:	6922      	ldr	r2, [r4, #16]
    38fc:	6023      	str	r3, [r4, #0]
    38fe:	0028      	movs	r0, r5
    3900:	6963      	ldr	r3, [r4, #20]
    3902:	6a21      	ldr	r1, [r4, #32]
    3904:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3906:	47a8      	blx	r5
    3908:	0002      	movs	r2, r0
    390a:	6060      	str	r0, [r4, #4]
    390c:	2000      	movs	r0, #0
    390e:	4282      	cmp	r2, r0
    3910:	dc19      	bgt.n	3946 <__srefill_r+0x102>
    3912:	89a1      	ldrh	r1, [r4, #12]
    3914:	4282      	cmp	r2, r0
    3916:	d117      	bne.n	3948 <__srefill_r+0x104>
    3918:	2320      	movs	r3, #32
    391a:	430b      	orrs	r3, r1
    391c:	81a3      	strh	r3, [r4, #12]
    391e:	3801      	subs	r0, #1
    3920:	e011      	b.n	3946 <__srefill_r+0x102>
    3922:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3924:	2900      	cmp	r1, #0
    3926:	d0cb      	beq.n	38c0 <__srefill_r+0x7c>
    3928:	0023      	movs	r3, r4
    392a:	3344      	adds	r3, #68	; 0x44
    392c:	4299      	cmp	r1, r3
    392e:	d002      	beq.n	3936 <__srefill_r+0xf2>
    3930:	0028      	movs	r0, r5
    3932:	f7ff f8f5 	bl	2b20 <_free_r>
    3936:	2000      	movs	r0, #0
    3938:	6c23      	ldr	r3, [r4, #64]	; 0x40
    393a:	6360      	str	r0, [r4, #52]	; 0x34
    393c:	6063      	str	r3, [r4, #4]
    393e:	4283      	cmp	r3, r0
    3940:	d0be      	beq.n	38c0 <__srefill_r+0x7c>
    3942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3944:	6023      	str	r3, [r4, #0]
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3948:	2340      	movs	r3, #64	; 0x40
    394a:	6060      	str	r0, [r4, #4]
    394c:	430b      	orrs	r3, r1
    394e:	e7a3      	b.n	3898 <__srefill_r+0x54>
    3950:	000043c0 	.word	0x000043c0
    3954:	000043e0 	.word	0x000043e0
    3958:	000043a0 	.word	0x000043a0
    395c:	0000439c 	.word	0x0000439c
    3960:	0000382d 	.word	0x0000382d

00003964 <_sbrk_r>:
    3964:	2300      	movs	r3, #0
    3966:	b570      	push	{r4, r5, r6, lr}
    3968:	4c06      	ldr	r4, [pc, #24]	; (3984 <_sbrk_r+0x20>)
    396a:	0005      	movs	r5, r0
    396c:	0008      	movs	r0, r1
    396e:	6023      	str	r3, [r4, #0]
    3970:	f7fe f988 	bl	1c84 <_sbrk>
    3974:	1c43      	adds	r3, r0, #1
    3976:	d103      	bne.n	3980 <_sbrk_r+0x1c>
    3978:	6823      	ldr	r3, [r4, #0]
    397a:	2b00      	cmp	r3, #0
    397c:	d000      	beq.n	3980 <_sbrk_r+0x1c>
    397e:	602b      	str	r3, [r5, #0]
    3980:	bd70      	pop	{r4, r5, r6, pc}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	200003b0 	.word	0x200003b0

00003988 <__sccl>:
    3988:	b570      	push	{r4, r5, r6, lr}
    398a:	780b      	ldrb	r3, [r1, #0]
    398c:	2b5e      	cmp	r3, #94	; 0x5e
    398e:	d00d      	beq.n	39ac <__sccl+0x24>
    3990:	1c4a      	adds	r2, r1, #1
    3992:	2100      	movs	r1, #0
    3994:	0004      	movs	r4, r0
    3996:	1c45      	adds	r5, r0, #1
    3998:	35ff      	adds	r5, #255	; 0xff
    399a:	7021      	strb	r1, [r4, #0]
    399c:	3401      	adds	r4, #1
    399e:	42a5      	cmp	r5, r4
    39a0:	d1fb      	bne.n	399a <__sccl+0x12>
    39a2:	2b00      	cmp	r3, #0
    39a4:	d106      	bne.n	39b4 <__sccl+0x2c>
    39a6:	3a01      	subs	r2, #1
    39a8:	0010      	movs	r0, r2
    39aa:	bd70      	pop	{r4, r5, r6, pc}
    39ac:	1c8a      	adds	r2, r1, #2
    39ae:	784b      	ldrb	r3, [r1, #1]
    39b0:	2101      	movs	r1, #1
    39b2:	e7ef      	b.n	3994 <__sccl+0xc>
    39b4:	2401      	movs	r4, #1
    39b6:	404c      	eors	r4, r1
    39b8:	0011      	movs	r1, r2
    39ba:	54c4      	strb	r4, [r0, r3]
    39bc:	780d      	ldrb	r5, [r1, #0]
    39be:	1c4a      	adds	r2, r1, #1
    39c0:	2d2d      	cmp	r5, #45	; 0x2d
    39c2:	d007      	beq.n	39d4 <__sccl+0x4c>
    39c4:	2d5d      	cmp	r5, #93	; 0x5d
    39c6:	d0ef      	beq.n	39a8 <__sccl+0x20>
    39c8:	2d00      	cmp	r5, #0
    39ca:	d101      	bne.n	39d0 <__sccl+0x48>
    39cc:	000a      	movs	r2, r1
    39ce:	e7eb      	b.n	39a8 <__sccl+0x20>
    39d0:	002b      	movs	r3, r5
    39d2:	e7f1      	b.n	39b8 <__sccl+0x30>
    39d4:	784e      	ldrb	r6, [r1, #1]
    39d6:	2e5d      	cmp	r6, #93	; 0x5d
    39d8:	d0fa      	beq.n	39d0 <__sccl+0x48>
    39da:	42b3      	cmp	r3, r6
    39dc:	dcf8      	bgt.n	39d0 <__sccl+0x48>
    39de:	3102      	adds	r1, #2
    39e0:	3301      	adds	r3, #1
    39e2:	54c4      	strb	r4, [r0, r3]
    39e4:	429e      	cmp	r6, r3
    39e6:	dcfb      	bgt.n	39e0 <__sccl+0x58>
    39e8:	e7e8      	b.n	39bc <__sccl+0x34>
	...

000039ec <__sread>:
    39ec:	b570      	push	{r4, r5, r6, lr}
    39ee:	000c      	movs	r4, r1
    39f0:	250e      	movs	r5, #14
    39f2:	5f49      	ldrsh	r1, [r1, r5]
    39f4:	f000 fa34 	bl	3e60 <_read_r>
    39f8:	2800      	cmp	r0, #0
    39fa:	db03      	blt.n	3a04 <__sread+0x18>
    39fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    39fe:	181b      	adds	r3, r3, r0
    3a00:	6563      	str	r3, [r4, #84]	; 0x54
    3a02:	bd70      	pop	{r4, r5, r6, pc}
    3a04:	89a3      	ldrh	r3, [r4, #12]
    3a06:	4a02      	ldr	r2, [pc, #8]	; (3a10 <__sread+0x24>)
    3a08:	4013      	ands	r3, r2
    3a0a:	81a3      	strh	r3, [r4, #12]
    3a0c:	e7f9      	b.n	3a02 <__sread+0x16>
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	ffffefff 	.word	0xffffefff

00003a14 <__swrite>:
    3a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a16:	001f      	movs	r7, r3
    3a18:	898b      	ldrh	r3, [r1, #12]
    3a1a:	0005      	movs	r5, r0
    3a1c:	000c      	movs	r4, r1
    3a1e:	0016      	movs	r6, r2
    3a20:	05db      	lsls	r3, r3, #23
    3a22:	d505      	bpl.n	3a30 <__swrite+0x1c>
    3a24:	230e      	movs	r3, #14
    3a26:	5ec9      	ldrsh	r1, [r1, r3]
    3a28:	2200      	movs	r2, #0
    3a2a:	2302      	movs	r3, #2
    3a2c:	f000 f9c8 	bl	3dc0 <_lseek_r>
    3a30:	89a3      	ldrh	r3, [r4, #12]
    3a32:	4a05      	ldr	r2, [pc, #20]	; (3a48 <__swrite+0x34>)
    3a34:	0028      	movs	r0, r5
    3a36:	4013      	ands	r3, r2
    3a38:	81a3      	strh	r3, [r4, #12]
    3a3a:	0032      	movs	r2, r6
    3a3c:	230e      	movs	r3, #14
    3a3e:	5ee1      	ldrsh	r1, [r4, r3]
    3a40:	003b      	movs	r3, r7
    3a42:	f000 f973 	bl	3d2c <_write_r>
    3a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a48:	ffffefff 	.word	0xffffefff

00003a4c <__sseek>:
    3a4c:	b570      	push	{r4, r5, r6, lr}
    3a4e:	000c      	movs	r4, r1
    3a50:	250e      	movs	r5, #14
    3a52:	5f49      	ldrsh	r1, [r1, r5]
    3a54:	f000 f9b4 	bl	3dc0 <_lseek_r>
    3a58:	89a3      	ldrh	r3, [r4, #12]
    3a5a:	1c42      	adds	r2, r0, #1
    3a5c:	d103      	bne.n	3a66 <__sseek+0x1a>
    3a5e:	4a05      	ldr	r2, [pc, #20]	; (3a74 <__sseek+0x28>)
    3a60:	4013      	ands	r3, r2
    3a62:	81a3      	strh	r3, [r4, #12]
    3a64:	bd70      	pop	{r4, r5, r6, pc}
    3a66:	2280      	movs	r2, #128	; 0x80
    3a68:	0152      	lsls	r2, r2, #5
    3a6a:	4313      	orrs	r3, r2
    3a6c:	81a3      	strh	r3, [r4, #12]
    3a6e:	6560      	str	r0, [r4, #84]	; 0x54
    3a70:	e7f8      	b.n	3a64 <__sseek+0x18>
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	ffffefff 	.word	0xffffefff

00003a78 <__sclose>:
    3a78:	b510      	push	{r4, lr}
    3a7a:	230e      	movs	r3, #14
    3a7c:	5ec9      	ldrsh	r1, [r1, r3]
    3a7e:	f000 f969 	bl	3d54 <_close_r>
    3a82:	bd10      	pop	{r4, pc}

00003a84 <_strtoul_l.isra.0>:
    3a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a86:	001f      	movs	r7, r3
    3a88:	000e      	movs	r6, r1
    3a8a:	b087      	sub	sp, #28
    3a8c:	9005      	str	r0, [sp, #20]
    3a8e:	9103      	str	r1, [sp, #12]
    3a90:	9201      	str	r2, [sp, #4]
    3a92:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a94:	7834      	ldrb	r4, [r6, #0]
    3a96:	f7fe ffaa 	bl	29ee <__locale_ctype_ptr_l>
    3a9a:	2208      	movs	r2, #8
    3a9c:	1900      	adds	r0, r0, r4
    3a9e:	7843      	ldrb	r3, [r0, #1]
    3aa0:	1c75      	adds	r5, r6, #1
    3aa2:	4013      	ands	r3, r2
    3aa4:	d10c      	bne.n	3ac0 <_strtoul_l.isra.0+0x3c>
    3aa6:	2c2d      	cmp	r4, #45	; 0x2d
    3aa8:	d10c      	bne.n	3ac4 <_strtoul_l.isra.0+0x40>
    3aaa:	3301      	adds	r3, #1
    3aac:	782c      	ldrb	r4, [r5, #0]
    3aae:	9302      	str	r3, [sp, #8]
    3ab0:	1cb5      	adds	r5, r6, #2
    3ab2:	2f00      	cmp	r7, #0
    3ab4:	d00c      	beq.n	3ad0 <_strtoul_l.isra.0+0x4c>
    3ab6:	2f10      	cmp	r7, #16
    3ab8:	d114      	bne.n	3ae4 <_strtoul_l.isra.0+0x60>
    3aba:	2c30      	cmp	r4, #48	; 0x30
    3abc:	d00a      	beq.n	3ad4 <_strtoul_l.isra.0+0x50>
    3abe:	e011      	b.n	3ae4 <_strtoul_l.isra.0+0x60>
    3ac0:	002e      	movs	r6, r5
    3ac2:	e7e6      	b.n	3a92 <_strtoul_l.isra.0+0xe>
    3ac4:	9302      	str	r3, [sp, #8]
    3ac6:	2c2b      	cmp	r4, #43	; 0x2b
    3ac8:	d1f3      	bne.n	3ab2 <_strtoul_l.isra.0+0x2e>
    3aca:	782c      	ldrb	r4, [r5, #0]
    3acc:	1cb5      	adds	r5, r6, #2
    3ace:	e7f0      	b.n	3ab2 <_strtoul_l.isra.0+0x2e>
    3ad0:	2c30      	cmp	r4, #48	; 0x30
    3ad2:	d12f      	bne.n	3b34 <_strtoul_l.isra.0+0xb0>
    3ad4:	2220      	movs	r2, #32
    3ad6:	782b      	ldrb	r3, [r5, #0]
    3ad8:	4393      	bics	r3, r2
    3ada:	2b58      	cmp	r3, #88	; 0x58
    3adc:	d154      	bne.n	3b88 <_strtoul_l.isra.0+0x104>
    3ade:	2710      	movs	r7, #16
    3ae0:	786c      	ldrb	r4, [r5, #1]
    3ae2:	3502      	adds	r5, #2
    3ae4:	2001      	movs	r0, #1
    3ae6:	0039      	movs	r1, r7
    3ae8:	4240      	negs	r0, r0
    3aea:	f7fe f9b1 	bl	1e50 <__udivsi3>
    3aee:	0006      	movs	r6, r0
    3af0:	2001      	movs	r0, #1
    3af2:	0039      	movs	r1, r7
    3af4:	4240      	negs	r0, r0
    3af6:	f7fe fa31 	bl	1f5c <__aeabi_uidivmod>
    3afa:	2300      	movs	r3, #0
    3afc:	9104      	str	r1, [sp, #16]
    3afe:	2101      	movs	r1, #1
    3b00:	2201      	movs	r2, #1
    3b02:	0018      	movs	r0, r3
    3b04:	468c      	mov	ip, r1
    3b06:	4252      	negs	r2, r2
    3b08:	0021      	movs	r1, r4
    3b0a:	3930      	subs	r1, #48	; 0x30
    3b0c:	2909      	cmp	r1, #9
    3b0e:	d813      	bhi.n	3b38 <_strtoul_l.isra.0+0xb4>
    3b10:	000c      	movs	r4, r1
    3b12:	42a7      	cmp	r7, r4
    3b14:	dd1e      	ble.n	3b54 <_strtoul_l.isra.0+0xd0>
    3b16:	2b00      	cmp	r3, #0
    3b18:	db1a      	blt.n	3b50 <_strtoul_l.isra.0+0xcc>
    3b1a:	0013      	movs	r3, r2
    3b1c:	4286      	cmp	r6, r0
    3b1e:	d306      	bcc.n	3b2e <_strtoul_l.isra.0+0xaa>
    3b20:	d102      	bne.n	3b28 <_strtoul_l.isra.0+0xa4>
    3b22:	9904      	ldr	r1, [sp, #16]
    3b24:	42a1      	cmp	r1, r4
    3b26:	db02      	blt.n	3b2e <_strtoul_l.isra.0+0xaa>
    3b28:	4663      	mov	r3, ip
    3b2a:	4378      	muls	r0, r7
    3b2c:	1820      	adds	r0, r4, r0
    3b2e:	782c      	ldrb	r4, [r5, #0]
    3b30:	3501      	adds	r5, #1
    3b32:	e7e9      	b.n	3b08 <_strtoul_l.isra.0+0x84>
    3b34:	270a      	movs	r7, #10
    3b36:	e7d5      	b.n	3ae4 <_strtoul_l.isra.0+0x60>
    3b38:	0021      	movs	r1, r4
    3b3a:	3941      	subs	r1, #65	; 0x41
    3b3c:	2919      	cmp	r1, #25
    3b3e:	d801      	bhi.n	3b44 <_strtoul_l.isra.0+0xc0>
    3b40:	3c37      	subs	r4, #55	; 0x37
    3b42:	e7e6      	b.n	3b12 <_strtoul_l.isra.0+0x8e>
    3b44:	0021      	movs	r1, r4
    3b46:	3961      	subs	r1, #97	; 0x61
    3b48:	2919      	cmp	r1, #25
    3b4a:	d803      	bhi.n	3b54 <_strtoul_l.isra.0+0xd0>
    3b4c:	3c57      	subs	r4, #87	; 0x57
    3b4e:	e7e0      	b.n	3b12 <_strtoul_l.isra.0+0x8e>
    3b50:	0013      	movs	r3, r2
    3b52:	e7ec      	b.n	3b2e <_strtoul_l.isra.0+0xaa>
    3b54:	2b00      	cmp	r3, #0
    3b56:	da09      	bge.n	3b6c <_strtoul_l.isra.0+0xe8>
    3b58:	2322      	movs	r3, #34	; 0x22
    3b5a:	2001      	movs	r0, #1
    3b5c:	9a05      	ldr	r2, [sp, #20]
    3b5e:	4240      	negs	r0, r0
    3b60:	6013      	str	r3, [r2, #0]
    3b62:	9b01      	ldr	r3, [sp, #4]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d10b      	bne.n	3b80 <_strtoul_l.isra.0+0xfc>
    3b68:	b007      	add	sp, #28
    3b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6c:	9a02      	ldr	r2, [sp, #8]
    3b6e:	2a00      	cmp	r2, #0
    3b70:	d000      	beq.n	3b74 <_strtoul_l.isra.0+0xf0>
    3b72:	4240      	negs	r0, r0
    3b74:	9a01      	ldr	r2, [sp, #4]
    3b76:	2a00      	cmp	r2, #0
    3b78:	d0f6      	beq.n	3b68 <_strtoul_l.isra.0+0xe4>
    3b7a:	9a03      	ldr	r2, [sp, #12]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d000      	beq.n	3b82 <_strtoul_l.isra.0+0xfe>
    3b80:	1e6a      	subs	r2, r5, #1
    3b82:	9b01      	ldr	r3, [sp, #4]
    3b84:	601a      	str	r2, [r3, #0]
    3b86:	e7ef      	b.n	3b68 <_strtoul_l.isra.0+0xe4>
    3b88:	2430      	movs	r4, #48	; 0x30
    3b8a:	2f00      	cmp	r7, #0
    3b8c:	d1aa      	bne.n	3ae4 <_strtoul_l.isra.0+0x60>
    3b8e:	3708      	adds	r7, #8
    3b90:	e7a8      	b.n	3ae4 <_strtoul_l.isra.0+0x60>
	...

00003b94 <_strtoul_r>:
    3b94:	b513      	push	{r0, r1, r4, lr}
    3b96:	4c05      	ldr	r4, [pc, #20]	; (3bac <_strtoul_r+0x18>)
    3b98:	6824      	ldr	r4, [r4, #0]
    3b9a:	6a24      	ldr	r4, [r4, #32]
    3b9c:	2c00      	cmp	r4, #0
    3b9e:	d100      	bne.n	3ba2 <_strtoul_r+0xe>
    3ba0:	4c03      	ldr	r4, [pc, #12]	; (3bb0 <_strtoul_r+0x1c>)
    3ba2:	9400      	str	r4, [sp, #0]
    3ba4:	f7ff ff6e 	bl	3a84 <_strtoul_l.isra.0>
    3ba8:	bd16      	pop	{r1, r2, r4, pc}
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	20000040 	.word	0x20000040
    3bb0:	200000a4 	.word	0x200000a4

00003bb4 <__submore>:
    3bb4:	000b      	movs	r3, r1
    3bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bb8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    3bba:	3344      	adds	r3, #68	; 0x44
    3bbc:	000c      	movs	r4, r1
    3bbe:	429d      	cmp	r5, r3
    3bc0:	d11c      	bne.n	3bfc <__submore+0x48>
    3bc2:	2680      	movs	r6, #128	; 0x80
    3bc4:	00f6      	lsls	r6, r6, #3
    3bc6:	0031      	movs	r1, r6
    3bc8:	f7fe fff4 	bl	2bb4 <_malloc_r>
    3bcc:	2800      	cmp	r0, #0
    3bce:	d102      	bne.n	3bd6 <__submore+0x22>
    3bd0:	2001      	movs	r0, #1
    3bd2:	4240      	negs	r0, r0
    3bd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3bd6:	0023      	movs	r3, r4
    3bd8:	6360      	str	r0, [r4, #52]	; 0x34
    3bda:	63a6      	str	r6, [r4, #56]	; 0x38
    3bdc:	3346      	adds	r3, #70	; 0x46
    3bde:	781a      	ldrb	r2, [r3, #0]
    3be0:	4b10      	ldr	r3, [pc, #64]	; (3c24 <__submore+0x70>)
    3be2:	54c2      	strb	r2, [r0, r3]
    3be4:	0023      	movs	r3, r4
    3be6:	3345      	adds	r3, #69	; 0x45
    3be8:	781a      	ldrb	r2, [r3, #0]
    3bea:	4b0f      	ldr	r3, [pc, #60]	; (3c28 <__submore+0x74>)
    3bec:	54c2      	strb	r2, [r0, r3]
    3bee:	782a      	ldrb	r2, [r5, #0]
    3bf0:	4b0e      	ldr	r3, [pc, #56]	; (3c2c <__submore+0x78>)
    3bf2:	54c2      	strb	r2, [r0, r3]
    3bf4:	18c0      	adds	r0, r0, r3
    3bf6:	6020      	str	r0, [r4, #0]
    3bf8:	2000      	movs	r0, #0
    3bfa:	e7eb      	b.n	3bd4 <__submore+0x20>
    3bfc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    3bfe:	0029      	movs	r1, r5
    3c00:	0073      	lsls	r3, r6, #1
    3c02:	001a      	movs	r2, r3
    3c04:	9301      	str	r3, [sp, #4]
    3c06:	f000 f905 	bl	3e14 <_realloc_r>
    3c0a:	1e05      	subs	r5, r0, #0
    3c0c:	d0e0      	beq.n	3bd0 <__submore+0x1c>
    3c0e:	1987      	adds	r7, r0, r6
    3c10:	0001      	movs	r1, r0
    3c12:	0032      	movs	r2, r6
    3c14:	0038      	movs	r0, r7
    3c16:	f000 f8f2 	bl	3dfe <memcpy>
    3c1a:	9b01      	ldr	r3, [sp, #4]
    3c1c:	6027      	str	r7, [r4, #0]
    3c1e:	6365      	str	r5, [r4, #52]	; 0x34
    3c20:	63a3      	str	r3, [r4, #56]	; 0x38
    3c22:	e7e9      	b.n	3bf8 <__submore+0x44>
    3c24:	000003ff 	.word	0x000003ff
    3c28:	000003fe 	.word	0x000003fe
    3c2c:	000003fd 	.word	0x000003fd

00003c30 <_ungetc_r>:
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	0005      	movs	r5, r0
    3c34:	000e      	movs	r6, r1
    3c36:	0014      	movs	r4, r2
    3c38:	1c4b      	adds	r3, r1, #1
    3c3a:	d103      	bne.n	3c44 <_ungetc_r+0x14>
    3c3c:	2601      	movs	r6, #1
    3c3e:	4276      	negs	r6, r6
    3c40:	0030      	movs	r0, r6
    3c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c44:	2800      	cmp	r0, #0
    3c46:	d004      	beq.n	3c52 <_ungetc_r+0x22>
    3c48:	6983      	ldr	r3, [r0, #24]
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d101      	bne.n	3c52 <_ungetc_r+0x22>
    3c4e:	f7fe fe1d 	bl	288c <__sinit>
    3c52:	4b2d      	ldr	r3, [pc, #180]	; (3d08 <_ungetc_r+0xd8>)
    3c54:	429c      	cmp	r4, r3
    3c56:	d12d      	bne.n	3cb4 <_ungetc_r+0x84>
    3c58:	686c      	ldr	r4, [r5, #4]
    3c5a:	2220      	movs	r2, #32
    3c5c:	89a3      	ldrh	r3, [r4, #12]
    3c5e:	4393      	bics	r3, r2
    3c60:	b21b      	sxth	r3, r3
    3c62:	81a3      	strh	r3, [r4, #12]
    3c64:	b29b      	uxth	r3, r3
    3c66:	075a      	lsls	r2, r3, #29
    3c68:	d413      	bmi.n	3c92 <_ungetc_r+0x62>
    3c6a:	06da      	lsls	r2, r3, #27
    3c6c:	d5e6      	bpl.n	3c3c <_ungetc_r+0xc>
    3c6e:	2708      	movs	r7, #8
    3c70:	423b      	tst	r3, r7
    3c72:	d00a      	beq.n	3c8a <_ungetc_r+0x5a>
    3c74:	0021      	movs	r1, r4
    3c76:	0028      	movs	r0, r5
    3c78:	f7fe fd86 	bl	2788 <_fflush_r>
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d1dd      	bne.n	3c3c <_ungetc_r+0xc>
    3c80:	89a3      	ldrh	r3, [r4, #12]
    3c82:	60a0      	str	r0, [r4, #8]
    3c84:	43bb      	bics	r3, r7
    3c86:	81a3      	strh	r3, [r4, #12]
    3c88:	61a0      	str	r0, [r4, #24]
    3c8a:	2304      	movs	r3, #4
    3c8c:	89a2      	ldrh	r2, [r4, #12]
    3c8e:	4313      	orrs	r3, r2
    3c90:	81a3      	strh	r3, [r4, #12]
    3c92:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3c94:	b2f7      	uxtb	r7, r6
    3c96:	6863      	ldr	r3, [r4, #4]
    3c98:	b2f6      	uxtb	r6, r6
    3c9a:	2a00      	cmp	r2, #0
    3c9c:	d01b      	beq.n	3cd6 <_ungetc_r+0xa6>
    3c9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3ca0:	4293      	cmp	r3, r2
    3ca2:	da11      	bge.n	3cc8 <_ungetc_r+0x98>
    3ca4:	6823      	ldr	r3, [r4, #0]
    3ca6:	3b01      	subs	r3, #1
    3ca8:	6023      	str	r3, [r4, #0]
    3caa:	701f      	strb	r7, [r3, #0]
    3cac:	6863      	ldr	r3, [r4, #4]
    3cae:	3301      	adds	r3, #1
    3cb0:	6063      	str	r3, [r4, #4]
    3cb2:	e7c5      	b.n	3c40 <_ungetc_r+0x10>
    3cb4:	4b15      	ldr	r3, [pc, #84]	; (3d0c <_ungetc_r+0xdc>)
    3cb6:	429c      	cmp	r4, r3
    3cb8:	d101      	bne.n	3cbe <_ungetc_r+0x8e>
    3cba:	68ac      	ldr	r4, [r5, #8]
    3cbc:	e7cd      	b.n	3c5a <_ungetc_r+0x2a>
    3cbe:	4b14      	ldr	r3, [pc, #80]	; (3d10 <_ungetc_r+0xe0>)
    3cc0:	429c      	cmp	r4, r3
    3cc2:	d1ca      	bne.n	3c5a <_ungetc_r+0x2a>
    3cc4:	68ec      	ldr	r4, [r5, #12]
    3cc6:	e7c8      	b.n	3c5a <_ungetc_r+0x2a>
    3cc8:	0021      	movs	r1, r4
    3cca:	0028      	movs	r0, r5
    3ccc:	f7ff ff72 	bl	3bb4 <__submore>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d0e7      	beq.n	3ca4 <_ungetc_r+0x74>
    3cd4:	e7b2      	b.n	3c3c <_ungetc_r+0xc>
    3cd6:	6921      	ldr	r1, [r4, #16]
    3cd8:	6822      	ldr	r2, [r4, #0]
    3cda:	2900      	cmp	r1, #0
    3cdc:	d007      	beq.n	3cee <_ungetc_r+0xbe>
    3cde:	4291      	cmp	r1, r2
    3ce0:	d205      	bcs.n	3cee <_ungetc_r+0xbe>
    3ce2:	1e51      	subs	r1, r2, #1
    3ce4:	7808      	ldrb	r0, [r1, #0]
    3ce6:	4286      	cmp	r6, r0
    3ce8:	d101      	bne.n	3cee <_ungetc_r+0xbe>
    3cea:	6021      	str	r1, [r4, #0]
    3cec:	e7df      	b.n	3cae <_ungetc_r+0x7e>
    3cee:	6423      	str	r3, [r4, #64]	; 0x40
    3cf0:	0023      	movs	r3, r4
    3cf2:	3344      	adds	r3, #68	; 0x44
    3cf4:	6363      	str	r3, [r4, #52]	; 0x34
    3cf6:	2303      	movs	r3, #3
    3cf8:	63a3      	str	r3, [r4, #56]	; 0x38
    3cfa:	0023      	movs	r3, r4
    3cfc:	3346      	adds	r3, #70	; 0x46
    3cfe:	63e2      	str	r2, [r4, #60]	; 0x3c
    3d00:	701f      	strb	r7, [r3, #0]
    3d02:	6023      	str	r3, [r4, #0]
    3d04:	2301      	movs	r3, #1
    3d06:	e7d3      	b.n	3cb0 <_ungetc_r+0x80>
    3d08:	000043c0 	.word	0x000043c0
    3d0c:	000043e0 	.word	0x000043e0
    3d10:	000043a0 	.word	0x000043a0

00003d14 <__ascii_wctomb>:
    3d14:	1e0b      	subs	r3, r1, #0
    3d16:	d004      	beq.n	3d22 <__ascii_wctomb+0xe>
    3d18:	2aff      	cmp	r2, #255	; 0xff
    3d1a:	d904      	bls.n	3d26 <__ascii_wctomb+0x12>
    3d1c:	238a      	movs	r3, #138	; 0x8a
    3d1e:	6003      	str	r3, [r0, #0]
    3d20:	3b8b      	subs	r3, #139	; 0x8b
    3d22:	0018      	movs	r0, r3
    3d24:	4770      	bx	lr
    3d26:	700a      	strb	r2, [r1, #0]
    3d28:	2301      	movs	r3, #1
    3d2a:	e7fa      	b.n	3d22 <__ascii_wctomb+0xe>

00003d2c <_write_r>:
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	0005      	movs	r5, r0
    3d30:	0008      	movs	r0, r1
    3d32:	0011      	movs	r1, r2
    3d34:	2200      	movs	r2, #0
    3d36:	4c06      	ldr	r4, [pc, #24]	; (3d50 <_write_r+0x24>)
    3d38:	6022      	str	r2, [r4, #0]
    3d3a:	001a      	movs	r2, r3
    3d3c:	f7fd ff7a 	bl	1c34 <_write>
    3d40:	1c43      	adds	r3, r0, #1
    3d42:	d103      	bne.n	3d4c <_write_r+0x20>
    3d44:	6823      	ldr	r3, [r4, #0]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d000      	beq.n	3d4c <_write_r+0x20>
    3d4a:	602b      	str	r3, [r5, #0]
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	200003b0 	.word	0x200003b0

00003d54 <_close_r>:
    3d54:	2300      	movs	r3, #0
    3d56:	b570      	push	{r4, r5, r6, lr}
    3d58:	4c06      	ldr	r4, [pc, #24]	; (3d74 <_close_r+0x20>)
    3d5a:	0005      	movs	r5, r0
    3d5c:	0008      	movs	r0, r1
    3d5e:	6023      	str	r3, [r4, #0]
    3d60:	f7fd ffa2 	bl	1ca8 <_close>
    3d64:	1c43      	adds	r3, r0, #1
    3d66:	d103      	bne.n	3d70 <_close_r+0x1c>
    3d68:	6823      	ldr	r3, [r4, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d000      	beq.n	3d70 <_close_r+0x1c>
    3d6e:	602b      	str	r3, [r5, #0]
    3d70:	bd70      	pop	{r4, r5, r6, pc}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	200003b0 	.word	0x200003b0

00003d78 <_fstat_r>:
    3d78:	2300      	movs	r3, #0
    3d7a:	b570      	push	{r4, r5, r6, lr}
    3d7c:	4c06      	ldr	r4, [pc, #24]	; (3d98 <_fstat_r+0x20>)
    3d7e:	0005      	movs	r5, r0
    3d80:	0008      	movs	r0, r1
    3d82:	0011      	movs	r1, r2
    3d84:	6023      	str	r3, [r4, #0]
    3d86:	f7fd ff92 	bl	1cae <_fstat>
    3d8a:	1c43      	adds	r3, r0, #1
    3d8c:	d103      	bne.n	3d96 <_fstat_r+0x1e>
    3d8e:	6823      	ldr	r3, [r4, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d000      	beq.n	3d96 <_fstat_r+0x1e>
    3d94:	602b      	str	r3, [r5, #0]
    3d96:	bd70      	pop	{r4, r5, r6, pc}
    3d98:	200003b0 	.word	0x200003b0

00003d9c <_isatty_r>:
    3d9c:	2300      	movs	r3, #0
    3d9e:	b570      	push	{r4, r5, r6, lr}
    3da0:	4c06      	ldr	r4, [pc, #24]	; (3dbc <_isatty_r+0x20>)
    3da2:	0005      	movs	r5, r0
    3da4:	0008      	movs	r0, r1
    3da6:	6023      	str	r3, [r4, #0]
    3da8:	f7fd ff86 	bl	1cb8 <_isatty>
    3dac:	1c43      	adds	r3, r0, #1
    3dae:	d103      	bne.n	3db8 <_isatty_r+0x1c>
    3db0:	6823      	ldr	r3, [r4, #0]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d000      	beq.n	3db8 <_isatty_r+0x1c>
    3db6:	602b      	str	r3, [r5, #0]
    3db8:	bd70      	pop	{r4, r5, r6, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	200003b0 	.word	0x200003b0

00003dc0 <_lseek_r>:
    3dc0:	b570      	push	{r4, r5, r6, lr}
    3dc2:	0005      	movs	r5, r0
    3dc4:	0008      	movs	r0, r1
    3dc6:	0011      	movs	r1, r2
    3dc8:	2200      	movs	r2, #0
    3dca:	4c06      	ldr	r4, [pc, #24]	; (3de4 <_lseek_r+0x24>)
    3dcc:	6022      	str	r2, [r4, #0]
    3dce:	001a      	movs	r2, r3
    3dd0:	f7fd ff74 	bl	1cbc <_lseek>
    3dd4:	1c43      	adds	r3, r0, #1
    3dd6:	d103      	bne.n	3de0 <_lseek_r+0x20>
    3dd8:	6823      	ldr	r3, [r4, #0]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d000      	beq.n	3de0 <_lseek_r+0x20>
    3dde:	602b      	str	r3, [r5, #0]
    3de0:	bd70      	pop	{r4, r5, r6, pc}
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	200003b0 	.word	0x200003b0

00003de8 <memchr>:
    3de8:	b2c9      	uxtb	r1, r1
    3dea:	1882      	adds	r2, r0, r2
    3dec:	4290      	cmp	r0, r2
    3dee:	d101      	bne.n	3df4 <memchr+0xc>
    3df0:	2000      	movs	r0, #0
    3df2:	4770      	bx	lr
    3df4:	7803      	ldrb	r3, [r0, #0]
    3df6:	428b      	cmp	r3, r1
    3df8:	d0fb      	beq.n	3df2 <memchr+0xa>
    3dfa:	3001      	adds	r0, #1
    3dfc:	e7f6      	b.n	3dec <memchr+0x4>

00003dfe <memcpy>:
    3dfe:	2300      	movs	r3, #0
    3e00:	b510      	push	{r4, lr}
    3e02:	429a      	cmp	r2, r3
    3e04:	d100      	bne.n	3e08 <memcpy+0xa>
    3e06:	bd10      	pop	{r4, pc}
    3e08:	5ccc      	ldrb	r4, [r1, r3]
    3e0a:	54c4      	strb	r4, [r0, r3]
    3e0c:	3301      	adds	r3, #1
    3e0e:	e7f8      	b.n	3e02 <memcpy+0x4>

00003e10 <__malloc_lock>:
    3e10:	4770      	bx	lr

00003e12 <__malloc_unlock>:
    3e12:	4770      	bx	lr

00003e14 <_realloc_r>:
    3e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e16:	0007      	movs	r7, r0
    3e18:	000d      	movs	r5, r1
    3e1a:	0016      	movs	r6, r2
    3e1c:	2900      	cmp	r1, #0
    3e1e:	d105      	bne.n	3e2c <_realloc_r+0x18>
    3e20:	0011      	movs	r1, r2
    3e22:	f7fe fec7 	bl	2bb4 <_malloc_r>
    3e26:	0004      	movs	r4, r0
    3e28:	0020      	movs	r0, r4
    3e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e2c:	2a00      	cmp	r2, #0
    3e2e:	d103      	bne.n	3e38 <_realloc_r+0x24>
    3e30:	f7fe fe76 	bl	2b20 <_free_r>
    3e34:	0034      	movs	r4, r6
    3e36:	e7f7      	b.n	3e28 <_realloc_r+0x14>
    3e38:	f000 f826 	bl	3e88 <_malloc_usable_size_r>
    3e3c:	002c      	movs	r4, r5
    3e3e:	4286      	cmp	r6, r0
    3e40:	d9f2      	bls.n	3e28 <_realloc_r+0x14>
    3e42:	0031      	movs	r1, r6
    3e44:	0038      	movs	r0, r7
    3e46:	f7fe feb5 	bl	2bb4 <_malloc_r>
    3e4a:	1e04      	subs	r4, r0, #0
    3e4c:	d0ec      	beq.n	3e28 <_realloc_r+0x14>
    3e4e:	0029      	movs	r1, r5
    3e50:	0032      	movs	r2, r6
    3e52:	f7ff ffd4 	bl	3dfe <memcpy>
    3e56:	0029      	movs	r1, r5
    3e58:	0038      	movs	r0, r7
    3e5a:	f7fe fe61 	bl	2b20 <_free_r>
    3e5e:	e7e3      	b.n	3e28 <_realloc_r+0x14>

00003e60 <_read_r>:
    3e60:	b570      	push	{r4, r5, r6, lr}
    3e62:	0005      	movs	r5, r0
    3e64:	0008      	movs	r0, r1
    3e66:	0011      	movs	r1, r2
    3e68:	2200      	movs	r2, #0
    3e6a:	4c06      	ldr	r4, [pc, #24]	; (3e84 <_read_r+0x24>)
    3e6c:	6022      	str	r2, [r4, #0]
    3e6e:	001a      	movs	r2, r3
    3e70:	f7fd febe 	bl	1bf0 <_read>
    3e74:	1c43      	adds	r3, r0, #1
    3e76:	d103      	bne.n	3e80 <_read_r+0x20>
    3e78:	6823      	ldr	r3, [r4, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d000      	beq.n	3e80 <_read_r+0x20>
    3e7e:	602b      	str	r3, [r5, #0]
    3e80:	bd70      	pop	{r4, r5, r6, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	200003b0 	.word	0x200003b0

00003e88 <_malloc_usable_size_r>:
    3e88:	1f0b      	subs	r3, r1, #4
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	1f18      	subs	r0, r3, #4
    3e8e:	2b00      	cmp	r3, #0
    3e90:	da01      	bge.n	3e96 <_malloc_usable_size_r+0xe>
    3e92:	580b      	ldr	r3, [r1, r0]
    3e94:	18c0      	adds	r0, r0, r3
    3e96:	4770      	bx	lr
    3e98:	20746f4e 	.word	0x20746f4e
    3e9c:	6c706d69 	.word	0x6c706d69
    3ea0:	6e656d65 	.word	0x6e656d65
    3ea4:	20646574 	.word	0x20646574
    3ea8:	21746579 	.word	0x21746579
    3eac:	0000000d 	.word	0x0000000d
    3eb0:	6d6d6f43 	.word	0x6d6d6f43
    3eb4:	20646e61 	.word	0x20646e61
    3eb8:	7473694c 	.word	0x7473694c
    3ebc:	00000d3a 	.word	0x00000d3a
    3ec0:	20732509 	.word	0x20732509
    3ec4:	0a0d7325 	.word	0x0a0d7325
    3ec8:	73250909 	.word	0x73250909
    3ecc:	00000a0d 	.word	0x00000a0d
    3ed0:	2e353532 	.word	0x2e353532
    3ed4:	2e353532 	.word	0x2e353532
    3ed8:	2e353532 	.word	0x2e353532
    3edc:	00353532 	.word	0x00353532
    3ee0:	41205049 	.word	0x41205049
    3ee4:	65726464 	.word	0x65726464
    3ee8:	203a7373 	.word	0x203a7373
    3eec:	0a0d7325 	.word	0x0a0d7325
    3ef0:	00000000 	.word	0x00000000
    3ef4:	323a3130 	.word	0x323a3130
    3ef8:	35343a33 	.word	0x35343a33
    3efc:	3a37363a 	.word	0x3a37363a
    3f00:	613a3938 	.word	0x613a3938
    3f04:	00000062 	.word	0x00000062
    3f08:	2043414d 	.word	0x2043414d
    3f0c:	72646441 	.word	0x72646441
    3f10:	3a737365 	.word	0x3a737365
    3f14:	0d732520 	.word	0x0d732520
    3f18:	0000000a 	.word	0x0000000a
    3f1c:	64616552 	.word	0x64616552
    3f20:	20676e69 	.word	0x20676e69
    3f24:	6d6f7266 	.word	0x6d6f7266
    3f28:	63634120 	.word	0x63634120
    3f2c:	72656c65 	.word	0x72656c65
    3f30:	74656d6f 	.word	0x74656d6f
    3f34:	2e2e7265 	.word	0x2e2e7265
    3f38:	00000d2e 	.word	0x00000d2e
    3f3c:	64616552 	.word	0x64616552
    3f40:	20676e69 	.word	0x20676e69
    3f44:	6d6f7266 	.word	0x6d6f7266
    3f48:	72794720 	.word	0x72794720
    3f4c:	2e2e2e6f 	.word	0x2e2e2e6f
    3f50:	0000000d 	.word	0x0000000d
    3f54:	0a0d6425 	.word	0x0a0d6425
    3f58:	00000000 	.word	0x00000000
    3f5c:	656e6f44 	.word	0x656e6f44
    3f60:	00000d21 	.word	0x00000d21
    3f64:	00000020 	.word	0x00000020
    3f68:	20746f4e 	.word	0x20746f4e
    3f6c:	756f6e65 	.word	0x756f6e65
    3f70:	61206867 	.word	0x61206867
    3f74:	6d756772 	.word	0x6d756772
    3f78:	73746e65 	.word	0x73746e65
    3f7c:	72542021 	.word	0x72542021
    3f80:	68222079 	.word	0x68222079
    3f84:	22706c65 	.word	0x22706c65
    3f88:	00000d2e 	.word	0x00000d2e
    3f8c:	61766e49 	.word	0x61766e49
    3f90:	2064696c 	.word	0x2064696c
    3f94:	6d6d6f63 	.word	0x6d6d6f63
    3f98:	21646e61 	.word	0x21646e61
    3f9c:	70795420 	.word	0x70795420
    3fa0:	68222065 	.word	0x68222065
    3fa4:	22706c65 	.word	0x22706c65
    3fa8:	726f6620 	.word	0x726f6620
    3fac:	6c206120 	.word	0x6c206120
    3fb0:	20747369 	.word	0x20747369
    3fb4:	6120666f 	.word	0x6120666f
    3fb8:	6c696176 	.word	0x6c696176
    3fbc:	656c6261 	.word	0x656c6261
    3fc0:	6d6f6320 	.word	0x6d6f6320
    3fc4:	646e616d 	.word	0x646e616d
    3fc8:	000d2e73 	.word	0x000d2e73
    3fcc:	6c707041 	.word	0x6c707041
    3fd0:	74616369 	.word	0x74616369
    3fd4:	206e6f69 	.word	0x206e6f69
    3fd8:	73726556 	.word	0x73726556
    3fdc:	3a6e6f69 	.word	0x3a6e6f69
    3fe0:	0d732520 	.word	0x0d732520
    3fe4:	0000000a 	.word	0x0000000a
    3fe8:	2e312e30 	.word	0x2e312e30
    3fec:	00000030 	.word	0x00000030
    3ff0:	746f6f42 	.word	0x746f6f42
    3ff4:	64616f6c 	.word	0x64616f6c
    3ff8:	56207265 	.word	0x56207265
    3ffc:	69737265 	.word	0x69737265
    4000:	203a6e6f 	.word	0x203a6e6f
    4004:	0a0d7325 	.word	0x0a0d7325
    4008:	00000000 	.word	0x00000000
    400c:	70736944 	.word	0x70736944
    4010:	2079616c 	.word	0x2079616c
    4014:	206c6c61 	.word	0x206c6c61
    4018:	6d6d6f63 	.word	0x6d6d6f63
    401c:	73646e61 	.word	0x73646e61
    4020:	00000000 	.word	0x00000000
    4024:	6e697250 	.word	0x6e697250
    4028:	6f622074 	.word	0x6f622074
    402c:	6f6c746f 	.word	0x6f6c746f
    4030:	72656461 	.word	0x72656461
    4034:	72696620 	.word	0x72696620
    4038:	7261776d 	.word	0x7261776d
    403c:	6e692065 	.word	0x6e692065
    4040:	6d726f66 	.word	0x6d726f66
    4044:	6f697461 	.word	0x6f697461
    4048:	00002e6e 	.word	0x00002e6e
    404c:	6e697250 	.word	0x6e697250
    4050:	70612074 	.word	0x70612074
    4054:	63696c70 	.word	0x63696c70
    4058:	6f697461 	.word	0x6f697461
    405c:	6576206e 	.word	0x6576206e
    4060:	6f697372 	.word	0x6f697372
    4064:	6e69206e 	.word	0x6e69206e
    4068:	6d726f66 	.word	0x6d726f66
    406c:	6f697461 	.word	0x6f697461
    4070:	00002e6e 	.word	0x00002e6e
    4074:	726f705b 	.word	0x726f705b
    4078:	5b205d74 	.word	0x5b205d74
    407c:	5f6e6970 	.word	0x5f6e6970
    4080:	5d6d756e 	.word	0x5d6d756e
    4084:	00000000 	.word	0x00000000
    4088:	20746553 	.word	0x20746553
    408c:	4f495047 	.word	0x4f495047
    4090:	6e697020 	.word	0x6e697020
    4094:	20746120 	.word	0x20746120
    4098:	69672061 	.word	0x69672061
    409c:	206e6576 	.word	0x206e6576
    40a0:	74726f70 	.word	0x74726f70
    40a4:	67696820 	.word	0x67696820
    40a8:	00002e68 	.word	0x00002e68
    40ac:	20746553 	.word	0x20746553
    40b0:	4f495047 	.word	0x4f495047
    40b4:	6e697020 	.word	0x6e697020
    40b8:	20746120 	.word	0x20746120
    40bc:	69672061 	.word	0x69672061
    40c0:	206e6576 	.word	0x206e6576
    40c4:	74726f70 	.word	0x74726f70
    40c8:	776f6c20 	.word	0x776f6c20
    40cc:	0000002e 	.word	0x0000002e
    40d0:	20746547 	.word	0x20746547
    40d4:	74617473 	.word	0x74617473
    40d8:	666f2065 	.word	0x666f2065
    40dc:	47206120 	.word	0x47206120
    40e0:	204f4950 	.word	0x204f4950
    40e4:	2e6e6970 	.word	0x2e6e6970
    40e8:	00000000 	.word	0x00000000
    40ec:	6e697250 	.word	0x6e697250
    40f0:	68742074 	.word	0x68742074
    40f4:	414d2065 	.word	0x414d2065
    40f8:	64612043 	.word	0x64612043
    40fc:	73657264 	.word	0x73657264
    4100:	00002e73 	.word	0x00002e73
    4104:	6e697250 	.word	0x6e697250
    4108:	68742074 	.word	0x68742074
    410c:	50492065 	.word	0x50492065
    4110:	64644120 	.word	0x64644120
    4114:	73736572 	.word	0x73736572
    4118:	0000002e 	.word	0x0000002e
    411c:	6165725b 	.word	0x6165725b
    4120:	676e6964 	.word	0x676e6964
    4124:	756f6320 	.word	0x756f6320
    4128:	205d746e 	.word	0x205d746e
    412c:	746e695b 	.word	0x746e695b
    4130:	61767265 	.word	0x61767265
    4134:	6e69206c 	.word	0x6e69206c
    4138:	5d736d20 	.word	0x5d736d20
    413c:	00000000 	.word	0x00000000
    4140:	64616552 	.word	0x64616552
    4144:	6f726620 	.word	0x6f726620
    4148:	6874206d 	.word	0x6874206d
    414c:	79472065 	.word	0x79472065
    4150:	63736f72 	.word	0x63736f72
    4154:	2065706f 	.word	0x2065706f
    4158:	736e6573 	.word	0x736e6573
    415c:	002e726f 	.word	0x002e726f
    4160:	64616552 	.word	0x64616552
    4164:	6f726620 	.word	0x6f726620
    4168:	6874206d 	.word	0x6874206d
    416c:	63412065 	.word	0x63412065
    4170:	656c6563 	.word	0x656c6563
    4174:	656d6f72 	.word	0x656d6f72
    4178:	20726574 	.word	0x20726574
    417c:	736e6573 	.word	0x736e6573
    4180:	002e726f 	.word	0x002e726f
    4184:	20746547 	.word	0x20746547
    4188:	20656874 	.word	0x20656874
    418c:	20434441 	.word	0x20434441
    4190:	756c6176 	.word	0x756c6176
    4194:	666f2065 	.word	0x666f2065
    4198:	206e6120 	.word	0x206e6120
    419c:	75706e69 	.word	0x75706e69
    41a0:	69702074 	.word	0x69702074
    41a4:	00002e6e 	.word	0x00002e6e
    41a8:	6e697250 	.word	0x6e697250
    41ac:	68742074 	.word	0x68742074
    41b0:	65742065 	.word	0x65742065
    41b4:	7265706d 	.word	0x7265706d
    41b8:	72757461 	.word	0x72757461
    41bc:	65722065 	.word	0x65722065
    41c0:	6e696461 	.word	0x6e696461
    41c4:	666f2067 	.word	0x666f2067
    41c8:	65687420 	.word	0x65687420
    41cc:	2d6e6f20 	.word	0x2d6e6f20
    41d0:	72616f62 	.word	0x72616f62
    41d4:	434d2064 	.word	0x434d2064
    41d8:	65742055 	.word	0x65742055
    41dc:	7265706d 	.word	0x7265706d
    41e0:	72757461 	.word	0x72757461
    41e4:	65732065 	.word	0x65732065
    41e8:	726f736e 	.word	0x726f736e
    41ec:	0000002e 	.word	0x0000002e
    41f0:	6e697250 	.word	0x6e697250
    41f4:	756f2074 	.word	0x756f2074
    41f8:	696c2074 	.word	0x696c2074
    41fc:	6f207473 	.word	0x6f207473
    4200:	64612066 	.word	0x64612066
    4204:	73657264 	.word	0x73657264
    4208:	20736573 	.word	0x20736573
    420c:	4920666f 	.word	0x4920666f
    4210:	64204332 	.word	0x64204332
    4214:	63697665 	.word	0x63697665
    4218:	6f207365 	.word	0x6f207365
    421c:	7562206e 	.word	0x7562206e
    4220:	00002e73 	.word	0x00002e73
    4224:	5f633269 	.word	0x5f633269
    4228:	6e616373 	.word	0x6e616373
    422c:	00000000 	.word	0x00000000
    4230:	5f75636d 	.word	0x5f75636d
    4234:	706d6574 	.word	0x706d6574
    4238:	00000000 	.word	0x00000000
    423c:	5f636461 	.word	0x5f636461
    4240:	00746567 	.word	0x00746567
    4244:	64616572 	.word	0x64616572
    4248:	6363615f 	.word	0x6363615f
    424c:	00006c65 	.word	0x00006c65
    4250:	64616572 	.word	0x64616572
    4254:	7279675f 	.word	0x7279675f
    4258:	0000006f 	.word	0x0000006f
    425c:	00007069 	.word	0x00007069
    4260:	0063616d 	.word	0x0063616d
    4264:	6f697067 	.word	0x6f697067
    4268:	7465675f 	.word	0x7465675f
    426c:	00000000 	.word	0x00000000
    4270:	6f697067 	.word	0x6f697067
    4274:	656c635f 	.word	0x656c635f
    4278:	00007261 	.word	0x00007261
    427c:	6f697067 	.word	0x6f697067
    4280:	7465735f 	.word	0x7465735f
    4284:	00000000 	.word	0x00000000
    4288:	5f726576 	.word	0x5f726576
    428c:	00707061 	.word	0x00707061
    4290:	5f726576 	.word	0x5f726576
    4294:	00006c62 	.word	0x00006c62
    4298:	706c6568 	.word	0x706c6568
    429c:	00000000 	.word	0x00000000
    42a0:	42000800 	.word	0x42000800
    42a4:	42000c00 	.word	0x42000c00
    42a8:	42001000 	.word	0x42001000
    42ac:	42001400 	.word	0x42001400
    42b0:	42001800 	.word	0x42001800
    42b4:	42001c00 	.word	0x42001c00
    42b8:	0000137e 	.word	0x0000137e
    42bc:	0000137a 	.word	0x0000137a
    42c0:	0000137a 	.word	0x0000137a
    42c4:	000013dc 	.word	0x000013dc
    42c8:	000013dc 	.word	0x000013dc
    42cc:	00001392 	.word	0x00001392
    42d0:	00001384 	.word	0x00001384
    42d4:	00001398 	.word	0x00001398
    42d8:	000013ca 	.word	0x000013ca
    42dc:	0000159c 	.word	0x0000159c
    42e0:	0000157c 	.word	0x0000157c
    42e4:	0000157c 	.word	0x0000157c
    42e8:	00001608 	.word	0x00001608
    42ec:	0000158e 	.word	0x0000158e
    42f0:	000015aa 	.word	0x000015aa
    42f4:	00001580 	.word	0x00001580
    42f8:	000015b8 	.word	0x000015b8
    42fc:	000015f8 	.word	0x000015f8
    4300:	57202d2d 	.word	0x57202d2d
    4304:	31434e49 	.word	0x31434e49
    4308:	20303035 	.word	0x20303035
    430c:	70696863 	.word	0x70696863
    4310:	666e6920 	.word	0x666e6920
    4314:	616d726f 	.word	0x616d726f
    4318:	6e6f6974 	.word	0x6e6f6974
    431c:	61786520 	.word	0x61786520
    4320:	656c706d 	.word	0x656c706d
    4324:	0d2d2d20 	.word	0x0d2d2d20
    4328:	202d2d0a 	.word	0x202d2d0a
    432c:	574d4153 	.word	0x574d4153
    4330:	585f3532 	.word	0x585f3532
    4334:	49414c50 	.word	0x49414c50
    4338:	5f44454e 	.word	0x5f44454e
    433c:	204f5250 	.word	0x204f5250
    4340:	0a0d2d2d 	.word	0x0a0d2d2d
    4344:	43202d2d 	.word	0x43202d2d
    4348:	69706d6f 	.word	0x69706d6f
    434c:	3a64656c 	.word	0x3a64656c
    4350:	6e614a20 	.word	0x6e614a20
    4354:	20343220 	.word	0x20343220
    4358:	38313032 	.word	0x38313032
    435c:	3a303220 	.word	0x3a303220
    4360:	323a3834 	.word	0x323a3834
    4364:	2d2d2038 	.word	0x2d2d2038
    4368:	0000000d 	.word	0x0000000d
    436c:	203d3d3d 	.word	0x203d3d3d
    4370:	6e6f7244 	.word	0x6e6f7244
    4374:	44414465 	.word	0x44414465
    4378:	494c4320 	.word	0x494c4320
    437c:	746e4920 	.word	0x746e4920
    4380:	61667265 	.word	0x61667265
    4384:	3d206563 	.word	0x3d206563
    4388:	000d3d3d 	.word	0x000d3d3d
    438c:	0000203e 	.word	0x0000203e
    4390:	0d5e5b25 	.word	0x0d5e5b25
    4394:	632a255d 	.word	0x632a255d
    4398:	00000000 	.word	0x00000000

0000439c <_global_impure_ptr>:
    439c:	20000044                                D.. 

000043a0 <__sf_fake_stderr>:
	...

000043c0 <__sf_fake_stdin>:
	...

000043e0 <__sf_fake_stdout>:
	...
    4400:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    4410:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    4420:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    4430:	37363534 62613938 66656463 00000000     456789abcdef....
    4440:	0000445e 00004461 00004464 61462d41     ^D..aD..dD..A-Fa
    4450:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    4460:	00303000 00005878                                .00.xX.

00004467 <_ctype_>:
    4467:	20202000 20202020 28282020 20282828     .         ((((( 
    4477:	20202020 20202020 20202020 20202020                     
    4487:	10108820 10101010 10101010 10101010      ...............
    4497:	04040410 04040404 10040404 10101010     ................
    44a7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    44b7:	01010101 01010101 01010101 10101010     ................
    44c7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    44d7:	02020202 02020202 02020202 10101010     ................
    44e7:	00000020 00000000 00000000 00000000      ...............
	...

00004568 <_init>:
    4568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    456e:	bc08      	pop	{r3}
    4570:	469e      	mov	lr, r3
    4572:	4770      	bx	lr

00004574 <__init_array_start>:
    4574:	000000dd 	.word	0x000000dd

00004578 <_fini>:
    4578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    457e:	bc08      	pop	{r3}
    4580:	469e      	mov	lr, r3
    4582:	4770      	bx	lr

00004584 <__fini_array_start>:
    4584:	000000b5 	.word	0x000000b5
