
WINC1500_SERIAL_BRIDGE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040a4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005a4  20000070  00004114  00020070  2**2
                  ALLOC
  3 .stack        00002004  20000614  000046b8  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e863  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ea8  00000000  00000000  0005e954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c390  00000000  00000000  000647fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009e0  00000000  00000000  00070b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e40  00000000  00000000  0007156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e92f  00000000  00000000  000723ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014405  00000000  00000000  00090cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f623  00000000  00000000  000a50e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020c0  00000000  00000000  00134704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 26 00 20 59 28 00 00 55 28 00 00 55 28 00 00     .&. Y(..U(..U(..
	...
      2c:	55 28 00 00 00 00 00 00 00 00 00 00 55 28 00 00     U(..........U(..
      3c:	55 28 00 00 55 28 00 00 55 28 00 00 55 28 00 00     U(..U(..U(..U(..
      4c:	55 28 00 00 59 10 00 00 55 28 00 00 55 28 00 00     U(..Y...U(..U(..
      5c:	55 28 00 00 55 28 00 00 39 15 00 00 49 15 00 00     U(..U(..9...I...
      6c:	59 15 00 00 69 15 00 00 79 15 00 00 89 15 00 00     Y...i...y.......
      7c:	55 28 00 00 55 28 00 00 55 28 00 00 55 28 00 00     U(..U(..U(..U(..
      8c:	55 28 00 00 55 28 00 00 00 00 00 00 00 00 00 00     U(..U(..........
      9c:	55 28 00 00 55 28 00 00 55 28 00 00 55 28 00 00     U(..U(..U(..U(..
      ac:	55 28 00 00 00 00 00 00                             U(......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000040a4 	.word	0x000040a4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000040a4 	.word	0x000040a4
     10c:	000040a4 	.word	0x000040a4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000025e5 	.word	0x000025e5
     140:	00003165 	.word	0x00003165
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     180:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     182:	1e44      	subs	r4, r0, #1
     184:	2800      	cmp	r0, #0
     186:	d004      	beq.n	192 <nm_bsp_sleep+0x12>
		delay_ms(1);
     188:	4d02      	ldr	r5, [pc, #8]	; (194 <nm_bsp_sleep+0x14>)
     18a:	2001      	movs	r0, #1
     18c:	47a8      	blx	r5
	while (u32TimeMsec--) {
     18e:	3c01      	subs	r4, #1
     190:	d2fb      	bcs.n	18a <nm_bsp_sleep+0xa>
	}
}
     192:	bd70      	pop	{r4, r5, r6, pc}
     194:	00000155 	.word	0x00000155

00000198 <nm_bsp_reset>:
{
     198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     19a:	4c07      	ldr	r4, [pc, #28]	; (1b8 <nm_bsp_reset+0x20>)
     19c:	2780      	movs	r7, #128	; 0x80
     19e:	057f      	lsls	r7, r7, #21
     1a0:	6167      	str	r7, [r4, #20]
     1a2:	2580      	movs	r5, #128	; 0x80
     1a4:	052d      	lsls	r5, r5, #20
     1a6:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     1a8:	2001      	movs	r0, #1
     1aa:	4e04      	ldr	r6, [pc, #16]	; (1bc <nm_bsp_reset+0x24>)
     1ac:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     1ae:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     1b0:	200a      	movs	r0, #10
     1b2:	47b0      	blx	r6
     1b4:	61a5      	str	r5, [r4, #24]
}
     1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1b8:	41004400 	.word	0x41004400
     1bc:	00000181 	.word	0x00000181

000001c0 <nm_bsp_init>:
{
     1c0:	b570      	push	{r4, r5, r6, lr}
     1c2:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1c4:	2300      	movs	r3, #0
     1c6:	4a16      	ldr	r2, [pc, #88]	; (220 <nm_bsp_init+0x60>)
     1c8:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1ca:	ac01      	add	r4, sp, #4
     1cc:	2501      	movs	r5, #1
     1ce:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1d0:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1d4:	0021      	movs	r1, r4
     1d6:	201b      	movs	r0, #27
     1d8:	4e12      	ldr	r6, [pc, #72]	; (224 <nm_bsp_init+0x64>)
     1da:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1dc:	0021      	movs	r1, r4
     1de:	201c      	movs	r0, #28
     1e0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1e2:	0021      	movs	r1, r4
     1e4:	2028      	movs	r0, #40	; 0x28
     1e6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     1e8:	4b0f      	ldr	r3, [pc, #60]	; (228 <nm_bsp_init+0x68>)
     1ea:	2280      	movs	r2, #128	; 0x80
     1ec:	0552      	lsls	r2, r2, #21
     1ee:	615a      	str	r2, [r3, #20]
     1f0:	2280      	movs	r2, #128	; 0x80
     1f2:	0512      	lsls	r2, r2, #20
     1f4:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1f6:	4b0d      	ldr	r3, [pc, #52]	; (22c <nm_bsp_init+0x6c>)
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	421d      	tst	r5, r3
     1fc:	d003      	beq.n	206 <nm_bsp_init+0x46>
     1fe:	4b0b      	ldr	r3, [pc, #44]	; (22c <nm_bsp_init+0x6c>)
     200:	681b      	ldr	r3, [r3, #0]
     202:	079b      	lsls	r3, r3, #30
     204:	d401      	bmi.n	20a <nm_bsp_init+0x4a>
	    delay_init();
     206:	4b0a      	ldr	r3, [pc, #40]	; (230 <nm_bsp_init+0x70>)
     208:	4798      	blx	r3
	nm_bsp_reset();
     20a:	4b0a      	ldr	r3, [pc, #40]	; (234 <nm_bsp_init+0x74>)
     20c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     20e:	2201      	movs	r2, #1
     210:	4b09      	ldr	r3, [pc, #36]	; (238 <nm_bsp_init+0x78>)
     212:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     214:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     218:	b662      	cpsie	i
}
     21a:	2000      	movs	r0, #0
     21c:	b002      	add	sp, #8
     21e:	bd70      	pop	{r4, r5, r6, pc}
     220:	2000008c 	.word	0x2000008c
     224:	00001131 	.word	0x00001131
     228:	41004400 	.word	0x41004400
     22c:	e000e010 	.word	0xe000e010
     230:	00000115 	.word	0x00000115
     234:	00000199 	.word	0x00000199
     238:	2000000a 	.word	0x2000000a

0000023c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     23c:	b530      	push	{r4, r5, lr}
     23e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     240:	4c30      	ldr	r4, [pc, #192]	; (304 <nm_bus_init+0xc8>)
     242:	230e      	movs	r3, #14
     244:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     246:	2300      	movs	r3, #0
     248:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     24a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     24c:	a901      	add	r1, sp, #4
     24e:	2201      	movs	r2, #1
     250:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     252:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     254:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     256:	200e      	movs	r0, #14
     258:	4b2b      	ldr	r3, [pc, #172]	; (308 <nm_bus_init+0xcc>)
     25a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     25c:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     25e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     260:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     262:	2900      	cmp	r1, #0
     264:	d104      	bne.n	270 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     266:	0953      	lsrs	r3, r2, #5
     268:	01db      	lsls	r3, r3, #7
     26a:	4928      	ldr	r1, [pc, #160]	; (30c <nm_bus_init+0xd0>)
     26c:	468c      	mov	ip, r1
     26e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     270:	211f      	movs	r1, #31
     272:	4011      	ands	r1, r2
     274:	2201      	movs	r2, #1
     276:	0010      	movs	r0, r2
     278:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     27a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     27c:	ac02      	add	r4, sp, #8
     27e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     280:	2300      	movs	r3, #0
     282:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     284:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     286:	21c0      	movs	r1, #192	; 0xc0
     288:	0389      	lsls	r1, r1, #14
     28a:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     28c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     28e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     290:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     292:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     294:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     296:	3223      	adds	r2, #35	; 0x23
     298:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     29a:	3a18      	subs	r2, #24
     29c:	2100      	movs	r1, #0
     29e:	a808      	add	r0, sp, #32
     2a0:	4b1b      	ldr	r3, [pc, #108]	; (310 <nm_bus_init+0xd4>)
     2a2:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     2a4:	4b1b      	ldr	r3, [pc, #108]	; (314 <nm_bus_init+0xd8>)
     2a6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     2a8:	4b1b      	ldr	r3, [pc, #108]	; (318 <nm_bus_init+0xdc>)
     2aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     2ac:	2301      	movs	r3, #1
     2ae:	425b      	negs	r3, r3
     2b0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     2b2:	4b1a      	ldr	r3, [pc, #104]	; (31c <nm_bus_init+0xe0>)
     2b4:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     2b6:	4b1a      	ldr	r3, [pc, #104]	; (320 <nm_bus_init+0xe4>)
     2b8:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     2ba:	0022      	movs	r2, r4
     2bc:	4919      	ldr	r1, [pc, #100]	; (324 <nm_bus_init+0xe8>)
     2be:	481a      	ldr	r0, [pc, #104]	; (328 <nm_bus_init+0xec>)
     2c0:	4b1a      	ldr	r3, [pc, #104]	; (32c <nm_bus_init+0xf0>)
     2c2:	4798      	blx	r3
     2c4:	2800      	cmp	r0, #0
     2c6:	d11a      	bne.n	2fe <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2c8:	4d17      	ldr	r5, [pc, #92]	; (328 <nm_bus_init+0xec>)
     2ca:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2cc:	0020      	movs	r0, r4
     2ce:	4b18      	ldr	r3, [pc, #96]	; (330 <nm_bus_init+0xf4>)
     2d0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2d2:	231f      	movs	r3, #31
     2d4:	4018      	ands	r0, r3
     2d6:	3b1e      	subs	r3, #30
     2d8:	4083      	lsls	r3, r0
     2da:	4a16      	ldr	r2, [pc, #88]	; (334 <nm_bus_init+0xf8>)
     2dc:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2de:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     2e0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     2e2:	2b00      	cmp	r3, #0
     2e4:	d1fc      	bne.n	2e0 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2e6:	6823      	ldr	r3, [r4, #0]
     2e8:	2202      	movs	r2, #2
     2ea:	4313      	orrs	r3, r2
     2ec:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     2ee:	4b12      	ldr	r3, [pc, #72]	; (338 <nm_bus_init+0xfc>)
     2f0:	4798      	blx	r3
	nm_bsp_sleep(1);
     2f2:	2001      	movs	r0, #1
     2f4:	4b11      	ldr	r3, [pc, #68]	; (33c <nm_bus_init+0x100>)
     2f6:	4798      	blx	r3
#endif
	return result;
     2f8:	2000      	movs	r0, #0
}
     2fa:	b011      	add	sp, #68	; 0x44
     2fc:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     2fe:	2006      	movs	r0, #6
     300:	4240      	negs	r0, r0
     302:	e7fa      	b.n	2fa <nm_bus_init+0xbe>
     304:	20000564 	.word	0x20000564
     308:	00001131 	.word	0x00001131
     30c:	41004400 	.word	0x41004400
     310:	0000332b 	.word	0x0000332b
     314:	000c0002 	.word	0x000c0002
     318:	000d0002 	.word	0x000d0002
     31c:	000f0002 	.word	0x000f0002
     320:	00b71b00 	.word	0x00b71b00
     324:	42001000 	.word	0x42001000
     328:	20000568 	.word	0x20000568
     32c:	00001599 	.word	0x00001599
     330:	00001509 	.word	0x00001509
     334:	e000e100 	.word	0xe000e100
     338:	00000199 	.word	0x00000199
     33c:	00000181 	.word	0x00000181

00000340 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     340:	b5f0      	push	{r4, r5, r6, r7, lr}
     342:	46de      	mov	lr, fp
     344:	4657      	mov	r7, sl
     346:	464e      	mov	r6, r9
     348:	4645      	mov	r5, r8
     34a:	b5e0      	push	{r5, r6, r7, lr}
     34c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     34e:	2803      	cmp	r0, #3
     350:	d000      	beq.n	354 <nm_bus_ioctl+0x14>
     352:	e074      	b.n	43e <nm_bus_ioctl+0xfe>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     354:	680e      	ldr	r6, [r1, #0]
     356:	684d      	ldr	r5, [r1, #4]
     358:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     35a:	2200      	movs	r2, #0
     35c:	466b      	mov	r3, sp
     35e:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     360:	2d00      	cmp	r5, #0
     362:	d026      	beq.n	3b2 <nm_bus_ioctl+0x72>
     364:	2c00      	cmp	r4, #0
     366:	d064      	beq.n	432 <nm_bus_ioctl+0xf2>
	if (pu8Mosi == NULL) {
     368:	2e00      	cmp	r6, #0
     36a:	d06b      	beq.n	444 <nm_bus_ioctl+0x104>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     36c:	2300      	movs	r3, #0
     36e:	4698      	mov	r8, r3
     370:	2300      	movs	r3, #0
     372:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     374:	2201      	movs	r2, #1
     376:	4936      	ldr	r1, [pc, #216]	; (450 <nm_bus_ioctl+0x110>)
     378:	4836      	ldr	r0, [pc, #216]	; (454 <nm_bus_ioctl+0x114>)
     37a:	4b37      	ldr	r3, [pc, #220]	; (458 <nm_bus_ioctl+0x118>)
     37c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     37e:	4b35      	ldr	r3, [pc, #212]	; (454 <nm_bus_ioctl+0x114>)
     380:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     382:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     384:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     386:	4699      	mov	r9, r3
			pu8Miso++;
     388:	4659      	mov	r1, fp
     38a:	424b      	negs	r3, r1
     38c:	4159      	adcs	r1, r3
     38e:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     390:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     392:	4653      	mov	r3, sl
     394:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     396:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     398:	4239      	tst	r1, r7
     39a:	d0fc      	beq.n	396 <nm_bus_ioctl+0x56>
     39c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     39e:	4239      	tst	r1, r7
     3a0:	d0fc      	beq.n	39c <nm_bus_ioctl+0x5c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3a2:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3a4:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     3a6:	4211      	tst	r1, r2
     3a8:	d0fc      	beq.n	3a4 <nm_bus_ioctl+0x64>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3aa:	4649      	mov	r1, r9
     3ac:	7989      	ldrb	r1, [r1, #6]
     3ae:	468c      	mov	ip, r1
     3b0:	e011      	b.n	3d6 <nm_bus_ioctl+0x96>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3b2:	2e00      	cmp	r6, #0
     3b4:	d03a      	beq.n	42c <nm_bus_ioctl+0xec>
     3b6:	2c00      	cmp	r4, #0
     3b8:	d03e      	beq.n	438 <nm_bus_ioctl+0xf8>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3ba:	2300      	movs	r3, #0
     3bc:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     3be:	3301      	adds	r3, #1
     3c0:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     3c2:	466b      	mov	r3, sp
     3c4:	1ddd      	adds	r5, r3, #7
     3c6:	e7d5      	b.n	374 <nm_bus_ioctl+0x34>
     3c8:	4660      	mov	r0, ip
     3ca:	2801      	cmp	r0, #1
     3cc:	d00d      	beq.n	3ea <nm_bus_ioctl+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3d0:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     3d2:	2900      	cmp	r1, #0
     3d4:	d00d      	beq.n	3f2 <nm_bus_ioctl+0xb2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3d6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     3d8:	4211      	tst	r1, r2
     3da:	d0fc      	beq.n	3d6 <nm_bus_ioctl+0x96>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3dc:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     3de:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3e0:	4210      	tst	r0, r2
     3e2:	d0f1      	beq.n	3c8 <nm_bus_ioctl+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     3e4:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     3e6:	311e      	adds	r1, #30
     3e8:	e7ee      	b.n	3c8 <nm_bus_ioctl+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     3ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3ec:	05c0      	lsls	r0, r0, #23
     3ee:	0dc0      	lsrs	r0, r0, #23
     3f0:	e7ef      	b.n	3d2 <nm_bus_ioctl+0x92>
		*pu8Miso = rxd_data;
     3f2:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     3f4:	3c01      	subs	r4, #1
     3f6:	b2a4      	uxth	r4, r4
			pu8Miso++;
     3f8:	445d      	add	r5, fp
			pu8Mosi++;
     3fa:	4643      	mov	r3, r8
     3fc:	4259      	negs	r1, r3
     3fe:	414b      	adcs	r3, r1
     400:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     402:	2c00      	cmp	r4, #0
     404:	d1c4      	bne.n	390 <nm_bus_ioctl+0x50>
	SercomSpi *const spi_module = &(module->hw->SPI);
     406:	4b13      	ldr	r3, [pc, #76]	; (454 <nm_bus_ioctl+0x114>)
     408:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     40a:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     40c:	7e0b      	ldrb	r3, [r1, #24]
     40e:	4213      	tst	r3, r2
     410:	d0fc      	beq.n	40c <nm_bus_ioctl+0xcc>
	spi_select_slave(&master, &slave_inst, false);
     412:	2200      	movs	r2, #0
     414:	490e      	ldr	r1, [pc, #56]	; (450 <nm_bus_ioctl+0x110>)
     416:	480f      	ldr	r0, [pc, #60]	; (454 <nm_bus_ioctl+0x114>)
     418:	4b0f      	ldr	r3, [pc, #60]	; (458 <nm_bus_ioctl+0x118>)
     41a:	4798      	blx	r3
	return M2M_SUCCESS;
     41c:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     41e:	b003      	add	sp, #12
     420:	bc3c      	pop	{r2, r3, r4, r5}
     422:	4690      	mov	r8, r2
     424:	4699      	mov	r9, r3
     426:	46a2      	mov	sl, r4
     428:	46ab      	mov	fp, r5
     42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     42c:	200f      	movs	r0, #15
     42e:	4240      	negs	r0, r0
     430:	e7f5      	b.n	41e <nm_bus_ioctl+0xde>
     432:	200f      	movs	r0, #15
     434:	4240      	negs	r0, r0
     436:	e7f2      	b.n	41e <nm_bus_ioctl+0xde>
     438:	200f      	movs	r0, #15
     43a:	4240      	negs	r0, r0
		break;
     43c:	e7ef      	b.n	41e <nm_bus_ioctl+0xde>
			s8Ret = -1;
     43e:	2001      	movs	r0, #1
     440:	4240      	negs	r0, r0
	return s8Ret;
     442:	e7ec      	b.n	41e <nm_bus_ioctl+0xde>
		u8SkipMosi = 1;
     444:	2301      	movs	r3, #1
     446:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     448:	466b      	mov	r3, sp
     44a:	1dde      	adds	r6, r3, #7
     44c:	e790      	b.n	370 <nm_bus_ioctl+0x30>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	20000564 	.word	0x20000564
     454:	20000568 	.word	0x20000568
     458:	00001771 	.word	0x00001771

0000045c <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
     45c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
     45e:	4b04      	ldr	r3, [pc, #16]	; (470 <m2m_wifi_download_mode+0x14>)
     460:	4798      	blx	r3
     462:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     464:	d001      	beq.n	46a <m2m_wifi_download_mode+0xe>

	enable_interrupts();

_EXIT0:
	return ret;
}
     466:	0020      	movs	r0, r4
     468:	bd10      	pop	{r4, pc}
	enable_interrupts();
     46a:	4b02      	ldr	r3, [pc, #8]	; (474 <m2m_wifi_download_mode+0x18>)
     46c:	4798      	blx	r3
     46e:	e7fa      	b.n	466 <m2m_wifi_download_mode+0xa>
     470:	000007f5 	.word	0x000007f5
     474:	00000479 	.word	0x00000479

00000478 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
     478:	b500      	push	{lr}
     47a:	b083      	sub	sp, #12
	uint32 reg = 0;
     47c:	2300      	movs	r3, #0
     47e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
     480:	a901      	add	r1, sp, #4
     482:	4811      	ldr	r0, [pc, #68]	; (4c8 <enable_interrupts+0x50>)
     484:	4b11      	ldr	r3, [pc, #68]	; (4cc <enable_interrupts+0x54>)
     486:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     488:	2800      	cmp	r0, #0
     48a:	d001      	beq.n	490 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
     48c:	b003      	add	sp, #12
     48e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
     490:	2180      	movs	r1, #128	; 0x80
     492:	0049      	lsls	r1, r1, #1
     494:	9b01      	ldr	r3, [sp, #4]
     496:	4319      	orrs	r1, r3
     498:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
     49a:	480b      	ldr	r0, [pc, #44]	; (4c8 <enable_interrupts+0x50>)
     49c:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <enable_interrupts+0x58>)
     49e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     4a0:	2800      	cmp	r0, #0
     4a2:	d1f3      	bne.n	48c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
     4a4:	a901      	add	r1, sp, #4
     4a6:	20d0      	movs	r0, #208	; 0xd0
     4a8:	0140      	lsls	r0, r0, #5
     4aa:	4b08      	ldr	r3, [pc, #32]	; (4cc <enable_interrupts+0x54>)
     4ac:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
     4ae:	2800      	cmp	r0, #0
     4b0:	d1ec      	bne.n	48c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
     4b2:	2180      	movs	r1, #128	; 0x80
     4b4:	0249      	lsls	r1, r1, #9
     4b6:	9b01      	ldr	r3, [sp, #4]
     4b8:	4319      	orrs	r1, r3
     4ba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
     4bc:	20d0      	movs	r0, #208	; 0xd0
     4be:	0140      	lsls	r0, r0, #5
     4c0:	4b03      	ldr	r3, [pc, #12]	; (4d0 <enable_interrupts+0x58>)
     4c2:	4798      	blx	r3
     4c4:	e7e2      	b.n	48c <enable_interrupts+0x14>
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00001408 	.word	0x00001408
     4cc:	0000070d 	.word	0x0000070d
     4d0:	00000719 	.word	0x00000719

000004d4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
     4d4:	b510      	push	{r4, lr}
     4d6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
     4d8:	4b28      	ldr	r3, [pc, #160]	; (57c <nmi_get_chipid+0xa8>)
     4da:	681c      	ldr	r4, [r3, #0]
     4dc:	2c00      	cmp	r4, #0
     4de:	d004      	beq.n	4ea <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
     4e0:	4b26      	ldr	r3, [pc, #152]	; (57c <nmi_get_chipid+0xa8>)
     4e2:	681c      	ldr	r4, [r3, #0]
}
     4e4:	0020      	movs	r0, r4
     4e6:	b002      	add	sp, #8
     4e8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
     4ea:	0019      	movs	r1, r3
     4ec:	2080      	movs	r0, #128	; 0x80
     4ee:	0140      	lsls	r0, r0, #5
     4f0:	4b23      	ldr	r3, [pc, #140]	; (580 <nmi_get_chipid+0xac>)
     4f2:	4798      	blx	r3
     4f4:	2800      	cmp	r0, #0
     4f6:	d003      	beq.n	500 <nmi_get_chipid+0x2c>
			chipid = 0;
     4f8:	2200      	movs	r2, #0
     4fa:	4b20      	ldr	r3, [pc, #128]	; (57c <nmi_get_chipid+0xa8>)
     4fc:	601a      	str	r2, [r3, #0]
			return 0;
     4fe:	e7f1      	b.n	4e4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     500:	a901      	add	r1, sp, #4
     502:	4820      	ldr	r0, [pc, #128]	; (584 <nmi_get_chipid+0xb0>)
     504:	4b1e      	ldr	r3, [pc, #120]	; (580 <nmi_get_chipid+0xac>)
     506:	4798      	blx	r3
     508:	2800      	cmp	r0, #0
     50a:	d003      	beq.n	514 <nmi_get_chipid+0x40>
			chipid = 0;
     50c:	2200      	movs	r2, #0
     50e:	4b1b      	ldr	r3, [pc, #108]	; (57c <nmi_get_chipid+0xa8>)
     510:	601a      	str	r2, [r3, #0]
			return 0;
     512:	e7e7      	b.n	4e4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
     514:	4b19      	ldr	r3, [pc, #100]	; (57c <nmi_get_chipid+0xa8>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	4a1b      	ldr	r2, [pc, #108]	; (588 <nmi_get_chipid+0xb4>)
     51a:	4293      	cmp	r3, r2
     51c:	d00e      	beq.n	53c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
     51e:	4a1b      	ldr	r2, [pc, #108]	; (58c <nmi_get_chipid+0xb8>)
     520:	4293      	cmp	r3, r2
     522:	d012      	beq.n	54a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
     524:	4a1a      	ldr	r2, [pc, #104]	; (590 <nmi_get_chipid+0xbc>)
     526:	4293      	cmp	r3, r2
     528:	d01c      	beq.n	564 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
     52a:	4914      	ldr	r1, [pc, #80]	; (57c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
     52c:	4a19      	ldr	r2, [pc, #100]	; (594 <nmi_get_chipid+0xc0>)
     52e:	680b      	ldr	r3, [r1, #0]
     530:	401a      	ands	r2, r3
		chipid |= 0x050000;
     532:	23a0      	movs	r3, #160	; 0xa0
     534:	02db      	lsls	r3, r3, #11
     536:	4313      	orrs	r3, r2
     538:	600b      	str	r3, [r1, #0]
     53a:	e7d1      	b.n	4e0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
     53c:	9b01      	ldr	r3, [sp, #4]
     53e:	2b01      	cmp	r3, #1
     540:	d0f3      	beq.n	52a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
     542:	4a15      	ldr	r2, [pc, #84]	; (598 <nmi_get_chipid+0xc4>)
     544:	4b0d      	ldr	r3, [pc, #52]	; (57c <nmi_get_chipid+0xa8>)
     546:	601a      	str	r2, [r3, #0]
     548:	e7ef      	b.n	52a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
     54a:	9b01      	ldr	r3, [sp, #4]
     54c:	2b03      	cmp	r3, #3
     54e:	d0ec      	beq.n	52a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
     550:	2b04      	cmp	r3, #4
     552:	d003      	beq.n	55c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
     554:	4a11      	ldr	r2, [pc, #68]	; (59c <nmi_get_chipid+0xc8>)
     556:	4b09      	ldr	r3, [pc, #36]	; (57c <nmi_get_chipid+0xa8>)
     558:	601a      	str	r2, [r3, #0]
     55a:	e7e6      	b.n	52a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
     55c:	4a10      	ldr	r2, [pc, #64]	; (5a0 <nmi_get_chipid+0xcc>)
     55e:	4b07      	ldr	r3, [pc, #28]	; (57c <nmi_get_chipid+0xa8>)
     560:	601a      	str	r2, [r3, #0]
     562:	e7e2      	b.n	52a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
     564:	4905      	ldr	r1, [pc, #20]	; (57c <nmi_get_chipid+0xa8>)
     566:	20ec      	movs	r0, #236	; 0xec
     568:	0380      	lsls	r0, r0, #14
     56a:	4b05      	ldr	r3, [pc, #20]	; (580 <nmi_get_chipid+0xac>)
     56c:	4798      	blx	r3
     56e:	2800      	cmp	r0, #0
     570:	d0db      	beq.n	52a <nmi_get_chipid+0x56>
			chipid = 0;
     572:	2200      	movs	r2, #0
     574:	4b01      	ldr	r3, [pc, #4]	; (57c <nmi_get_chipid+0xa8>)
     576:	601a      	str	r2, [r3, #0]
			return 0;
     578:	e7b4      	b.n	4e4 <nmi_get_chipid+0x10>
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	20000090 	.word	0x20000090
     580:	0000070d 	.word	0x0000070d
     584:	000013f4 	.word	0x000013f4
     588:	001002a0 	.word	0x001002a0
     58c:	001002b0 	.word	0x001002b0
     590:	001000f0 	.word	0x001000f0
     594:	fff0ffff 	.word	0xfff0ffff
     598:	001002a1 	.word	0x001002a1
     59c:	001002b2 	.word	0x001002b2
     5a0:	001002b1 	.word	0x001002b1

000005a4 <chip_wake>:

ERR1:
	return ret;
}
sint8 chip_wake(void)
{
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
     5a8:	2300      	movs	r3, #0
     5aa:	9301      	str	r3, [sp, #4]
     5ac:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
     5ae:	a901      	add	r1, sp, #4
     5b0:	200b      	movs	r0, #11
     5b2:	4b1b      	ldr	r3, [pc, #108]	; (620 <chip_wake+0x7c>)
     5b4:	4798      	blx	r3
     5b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     5b8:	d124      	bne.n	604 <chip_wake+0x60>
	
	if(!(reg & NBIT0))
     5ba:	9901      	ldr	r1, [sp, #4]
     5bc:	07cb      	lsls	r3, r1, #31
     5be:	d406      	bmi.n	5ce <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
     5c0:	2301      	movs	r3, #1
     5c2:	4319      	orrs	r1, r3
     5c4:	200b      	movs	r0, #11
     5c6:	4b17      	ldr	r3, [pc, #92]	; (624 <chip_wake+0x80>)
     5c8:	4798      	blx	r3
     5ca:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     5cc:	d11a      	bne.n	604 <chip_wake+0x60>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
     5ce:	a901      	add	r1, sp, #4
     5d0:	2001      	movs	r0, #1
     5d2:	4b13      	ldr	r3, [pc, #76]	; (620 <chip_wake+0x7c>)
     5d4:	4798      	blx	r3
     5d6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
     5d8:	d114      	bne.n	604 <chip_wake+0x60>
	/* Set bit 1 */
	if(!(reg & NBIT1))
     5da:	9901      	ldr	r1, [sp, #4]
     5dc:	078b      	lsls	r3, r1, #30
     5de:	d514      	bpl.n	60a <chip_wake+0x66>
{
     5e0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
     5e2:	4f0f      	ldr	r7, [pc, #60]	; (620 <chip_wake+0x7c>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
     5e4:	4e10      	ldr	r6, [pc, #64]	; (628 <chip_wake+0x84>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
     5e6:	4669      	mov	r1, sp
     5e8:	200f      	movs	r0, #15
     5ea:	47b8      	blx	r7
     5ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
     5ee:	d109      	bne.n	604 <chip_wake+0x60>
		if(clk_status_reg & NBIT2) {
     5f0:	9b00      	ldr	r3, [sp, #0]
     5f2:	075b      	lsls	r3, r3, #29
     5f4:	d411      	bmi.n	61a <chip_wake+0x76>
		nm_bsp_sleep(2);
     5f6:	2002      	movs	r0, #2
     5f8:	47b0      	blx	r6
     5fa:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
     5fc:	2d00      	cmp	r5, #0
     5fe:	d1f2      	bne.n	5e6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
     600:	2404      	movs	r4, #4
     602:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
     604:	0020      	movs	r0, r4
     606:	b003      	add	sp, #12
     608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
     60a:	2302      	movs	r3, #2
     60c:	4319      	orrs	r1, r3
     60e:	2001      	movs	r0, #1
     610:	4b04      	ldr	r3, [pc, #16]	; (624 <chip_wake+0x80>)
     612:	4798      	blx	r3
     614:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
     616:	d0e3      	beq.n	5e0 <chip_wake+0x3c>
     618:	e7f4      	b.n	604 <chip_wake+0x60>
	nm_bus_reset();
     61a:	4b04      	ldr	r3, [pc, #16]	; (62c <chip_wake+0x88>)
     61c:	4798      	blx	r3
     61e:	e7f1      	b.n	604 <chip_wake+0x60>
     620:	0000070d 	.word	0x0000070d
     624:	00000719 	.word	0x00000719
     628:	00000181 	.word	0x00000181
     62c:	000006f5 	.word	0x000006f5

00000630 <cpu_halt>:
sint8 cpu_halt(void)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	b082      	sub	sp, #8
	sint8 ret;
	uint32 reg = 0;
     634:	2300      	movs	r3, #0
     636:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(0x1118, &reg);
     638:	4e15      	ldr	r6, [pc, #84]	; (690 <cpu_halt+0x60>)
     63a:	a901      	add	r1, sp, #4
     63c:	0030      	movs	r0, r6
     63e:	4d15      	ldr	r5, [pc, #84]	; (694 <cpu_halt+0x64>)
     640:	47a8      	blx	r5
     642:	0004      	movs	r4, r0
	reg |= (1 << 0);
     644:	2101      	movs	r1, #1
     646:	9b01      	ldr	r3, [sp, #4]
     648:	4319      	orrs	r1, r3
     64a:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(0x1118, reg);
     64c:	0030      	movs	r0, r6
     64e:	4b12      	ldr	r3, [pc, #72]	; (698 <cpu_halt+0x68>)
     650:	4798      	blx	r3
     652:	1904      	adds	r4, r0, r4
     654:	b2e4      	uxtb	r4, r4
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     656:	a901      	add	r1, sp, #4
     658:	20a0      	movs	r0, #160	; 0xa0
     65a:	0140      	lsls	r0, r0, #5
     65c:	47a8      	blx	r5
     65e:	1824      	adds	r4, r4, r0
     660:	b2e4      	uxtb	r4, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
     662:	9901      	ldr	r1, [sp, #4]
     664:	054b      	lsls	r3, r1, #21
     666:	d402      	bmi.n	66e <cpu_halt+0x3e>
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     668:	b260      	sxtb	r0, r4
		reg &= ~(1ul << 10);
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	}
	return ret;
}
     66a:	b002      	add	sp, #8
     66c:	bd70      	pop	{r4, r5, r6, pc}
		reg &= ~(1ul << 10);
     66e:	4b0b      	ldr	r3, [pc, #44]	; (69c <cpu_halt+0x6c>)
     670:	4019      	ands	r1, r3
     672:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
     674:	26a0      	movs	r6, #160	; 0xa0
     676:	0176      	lsls	r6, r6, #5
     678:	0030      	movs	r0, r6
     67a:	4b07      	ldr	r3, [pc, #28]	; (698 <cpu_halt+0x68>)
     67c:	4798      	blx	r3
     67e:	0005      	movs	r5, r0
		ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
     680:	a901      	add	r1, sp, #4
     682:	0030      	movs	r0, r6
     684:	4b03      	ldr	r3, [pc, #12]	; (694 <cpu_halt+0x64>)
     686:	4798      	blx	r3
     688:	1828      	adds	r0, r5, r0
     68a:	1820      	adds	r0, r4, r0
     68c:	b240      	sxtb	r0, r0
     68e:	e7ec      	b.n	66a <cpu_halt+0x3a>
     690:	00001118 	.word	0x00001118
     694:	0000070d 	.word	0x0000070d
     698:	00000719 	.word	0x00000719
     69c:	fffffbff 	.word	0xfffffbff

000006a0 <chip_reset>:
	if(ret != M2M_SUCCESS) goto ERR1;	
ERR1:
	return ret;
}
sint8 chip_reset(void)
{
     6a0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
     6a2:	2100      	movs	r1, #0
     6a4:	20a0      	movs	r0, #160	; 0xa0
     6a6:	0140      	lsls	r0, r0, #5
     6a8:	4b03      	ldr	r3, [pc, #12]	; (6b8 <chip_reset+0x18>)
     6aa:	4798      	blx	r3
     6ac:	0004      	movs	r4, r0
	nm_bsp_sleep(50);
     6ae:	2032      	movs	r0, #50	; 0x32
     6b0:	4b02      	ldr	r3, [pc, #8]	; (6bc <chip_reset+0x1c>)
     6b2:	4798      	blx	r3
	return ret;
}
     6b4:	0020      	movs	r0, r4
     6b6:	bd10      	pop	{r4, pc}
     6b8:	00000719 	.word	0x00000719
     6bc:	00000181 	.word	0x00000181

000006c0 <chip_reset_and_cpu_halt>:
{
     6c0:	b510      	push	{r4, lr}
	ret = chip_wake();
     6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <chip_reset_and_cpu_halt+0x1c>)
     6c4:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto ERR1;
     6c6:	2800      	cmp	r0, #0
     6c8:	d000      	beq.n	6cc <chip_reset_and_cpu_halt+0xc>
}
     6ca:	bd10      	pop	{r4, pc}
	ret = chip_reset();
     6cc:	4b04      	ldr	r3, [pc, #16]	; (6e0 <chip_reset_and_cpu_halt+0x20>)
     6ce:	4798      	blx	r3
	if(ret != M2M_SUCCESS) goto ERR1;
     6d0:	2800      	cmp	r0, #0
     6d2:	d1fa      	bne.n	6ca <chip_reset_and_cpu_halt+0xa>
	ret = cpu_halt();
     6d4:	4b03      	ldr	r3, [pc, #12]	; (6e4 <chip_reset_and_cpu_halt+0x24>)
     6d6:	4798      	blx	r3
     6d8:	e7f7      	b.n	6ca <chip_reset_and_cpu_halt+0xa>
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	000005a5 	.word	0x000005a5
     6e0:	000006a1 	.word	0x000006a1
     6e4:	00000631 	.word	0x00000631

000006e8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
     6e8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
     6ea:	4b01      	ldr	r3, [pc, #4]	; (6f0 <nm_bus_iface_init+0x8>)
     6ec:	4798      	blx	r3
	return ret;
}
     6ee:	bd10      	pop	{r4, pc}
     6f0:	0000023d 	.word	0x0000023d

000006f4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
     6f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
     6f6:	4b01      	ldr	r3, [pc, #4]	; (6fc <nm_bus_reset+0x8>)
     6f8:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
     6fa:	bd10      	pop	{r4, pc}
     6fc:	00000c75 	.word	0x00000c75

00000700 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
     700:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
     702:	4b01      	ldr	r3, [pc, #4]	; (708 <nm_read_reg+0x8>)
     704:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
     706:	bd10      	pop	{r4, pc}
     708:	00000c9d 	.word	0x00000c9d

0000070c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     70c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
     70e:	4b01      	ldr	r3, [pc, #4]	; (714 <nm_read_reg_with_ret+0x8>)
     710:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
     712:	bd10      	pop	{r4, pc}
     714:	00000cb1 	.word	0x00000cb1

00000718 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
     718:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
     71a:	4b01      	ldr	r3, [pc, #4]	; (720 <nm_write_reg+0x8>)
     71c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
     71e:	bd10      	pop	{r4, pc}
     720:	00000cc9 	.word	0x00000cc9

00000724 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	46d6      	mov	lr, sl
     728:	464f      	mov	r7, r9
     72a:	4646      	mov	r6, r8
     72c:	b5c0      	push	{r6, r7, lr}
     72e:	b082      	sub	sp, #8
     730:	4680      	mov	r8, r0
     732:	4689      	mov	r9, r1
     734:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     736:	4b13      	ldr	r3, [pc, #76]	; (784 <nm_read_block+0x60>)
     738:	881f      	ldrh	r7, [r3, #0]
     73a:	3f08      	subs	r7, #8
     73c:	b2bb      	uxth	r3, r7
     73e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     740:	001e      	movs	r6, r3
     742:	0004      	movs	r4, r0
     744:	429a      	cmp	r2, r3
     746:	d91a      	bls.n	77e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     748:	4b0f      	ldr	r3, [pc, #60]	; (788 <nm_read_block+0x64>)
     74a:	469a      	mov	sl, r3
     74c:	1a37      	subs	r7, r6, r0
     74e:	4643      	mov	r3, r8
     750:	1ae1      	subs	r1, r4, r3
     752:	4449      	add	r1, r9
     754:	9a01      	ldr	r2, [sp, #4]
     756:	0020      	movs	r0, r4
     758:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     75a:	2800      	cmp	r0, #0
     75c:	d109      	bne.n	772 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     75e:	1bad      	subs	r5, r5, r6
     760:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     762:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     764:	42b5      	cmp	r5, r6
     766:	d8f2      	bhi.n	74e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     768:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     76a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     76c:	0020      	movs	r0, r4
     76e:	4b06      	ldr	r3, [pc, #24]	; (788 <nm_read_block+0x64>)
     770:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     772:	b002      	add	sp, #8
     774:	bc1c      	pop	{r2, r3, r4}
     776:	4690      	mov	r8, r2
     778:	4699      	mov	r9, r3
     77a:	46a2      	mov	sl, r4
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     77e:	2100      	movs	r1, #0
     780:	e7f2      	b.n	768 <nm_read_block+0x44>
     782:	46c0      	nop			; (mov r8, r8)
     784:	20000008 	.word	0x20000008
     788:	00000d7d 	.word	0x00000d7d

0000078c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     78c:	b5f0      	push	{r4, r5, r6, r7, lr}
     78e:	46d6      	mov	lr, sl
     790:	464f      	mov	r7, r9
     792:	4646      	mov	r6, r8
     794:	b5c0      	push	{r6, r7, lr}
     796:	b082      	sub	sp, #8
     798:	4680      	mov	r8, r0
     79a:	4689      	mov	r9, r1
     79c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     79e:	4b13      	ldr	r3, [pc, #76]	; (7ec <nm_write_block+0x60>)
     7a0:	881f      	ldrh	r7, [r3, #0]
     7a2:	3f08      	subs	r7, #8
     7a4:	b2bb      	uxth	r3, r7
     7a6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     7a8:	001e      	movs	r6, r3
     7aa:	0004      	movs	r4, r0
     7ac:	429a      	cmp	r2, r3
     7ae:	d91a      	bls.n	7e6 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     7b0:	4b0f      	ldr	r3, [pc, #60]	; (7f0 <nm_write_block+0x64>)
     7b2:	469a      	mov	sl, r3
     7b4:	1a37      	subs	r7, r6, r0
     7b6:	4643      	mov	r3, r8
     7b8:	1ae1      	subs	r1, r4, r3
     7ba:	4449      	add	r1, r9
     7bc:	9a01      	ldr	r2, [sp, #4]
     7be:	0020      	movs	r0, r4
     7c0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     7c2:	2800      	cmp	r0, #0
     7c4:	d109      	bne.n	7da <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     7c6:	1bad      	subs	r5, r5, r6
     7c8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     7ca:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     7cc:	42b5      	cmp	r5, r6
     7ce:	d8f2      	bhi.n	7b6 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     7d0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     7d2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     7d4:	0020      	movs	r0, r4
     7d6:	4b06      	ldr	r3, [pc, #24]	; (7f0 <nm_write_block+0x64>)
     7d8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     7da:	b002      	add	sp, #8
     7dc:	bc1c      	pop	{r2, r3, r4}
     7de:	4690      	mov	r8, r2
     7e0:	4699      	mov	r9, r3
     7e2:	46a2      	mov	sl, r4
     7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     7e6:	2100      	movs	r1, #0
     7e8:	e7f2      	b.n	7d0 <nm_write_block+0x44>
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	20000008 	.word	0x20000008
     7f0:	00000e3d 	.word	0x00000e3d

000007f4 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
     7f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	ret = nm_bus_iface_init(NULL);
     7f6:	2000      	movs	r0, #0
     7f8:	4b09      	ldr	r3, [pc, #36]	; (820 <nm_drv_init_download_mode+0x2c>)
     7fa:	4798      	blx	r3
     7fc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
     7fe:	d001      	beq.n	804 <nm_drv_init_download_mode+0x10>
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
     800:	0020      	movs	r0, r4
     802:	bd10      	pop	{r4, pc}
	if(!ISNMC3000(GET_CHIPID()))
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <nm_drv_init_download_mode+0x30>)
     806:	4798      	blx	r3
     808:	0d00      	lsrs	r0, r0, #20
     80a:	2803      	cmp	r0, #3
     80c:	d001      	beq.n	812 <nm_drv_init_download_mode+0x1e>
		chip_reset_and_cpu_halt();
     80e:	4b06      	ldr	r3, [pc, #24]	; (828 <nm_drv_init_download_mode+0x34>)
     810:	4798      	blx	r3
	nm_spi_init();
     812:	4b06      	ldr	r3, [pc, #24]	; (82c <nm_drv_init_download_mode+0x38>)
     814:	4798      	blx	r3
	nm_write_reg(0x20300,0);
     816:	2100      	movs	r1, #0
     818:	4805      	ldr	r0, [pc, #20]	; (830 <nm_drv_init_download_mode+0x3c>)
     81a:	4b06      	ldr	r3, [pc, #24]	; (834 <nm_drv_init_download_mode+0x40>)
     81c:	4798      	blx	r3
     81e:	e7ef      	b.n	800 <nm_drv_init_download_mode+0xc>
     820:	000006e9 	.word	0x000006e9
     824:	000004d5 	.word	0x000004d5
     828:	000006c1 	.word	0x000006c1
     82c:	00000ce1 	.word	0x00000ce1
     830:	00020300 	.word	0x00020300
     834:	00000719 	.word	0x00000719

00000838 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
     838:	b500      	push	{lr}
     83a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
     83c:	ab01      	add	r3, sp, #4
     83e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
     840:	2200      	movs	r2, #0
     842:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
     844:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
     846:	0019      	movs	r1, r3
     848:	2003      	movs	r0, #3
     84a:	4b02      	ldr	r3, [pc, #8]	; (854 <nmi_spi_write+0x1c>)
     84c:	4798      	blx	r3
}
     84e:	b005      	add	sp, #20
     850:	bd00      	pop	{pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	00000341 	.word	0x00000341

00000858 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	b084      	sub	sp, #16
     85c:	ac08      	add	r4, sp, #32
     85e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
     860:	ac01      	add	r4, sp, #4
     862:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
     864:	303f      	adds	r0, #63	; 0x3f
     866:	b2c4      	uxtb	r4, r0
     868:	2c0e      	cmp	r4, #14
     86a:	d876      	bhi.n	95a <spi_cmd+0x102>
     86c:	00a0      	lsls	r0, r4, #2
     86e:	4c48      	ldr	r4, [pc, #288]	; (990 <spi_cmd+0x138>)
     870:	5820      	ldr	r0, [r4, r0]
     872:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
     874:	ab01      	add	r3, sp, #4
     876:	0c0a      	lsrs	r2, r1, #16
     878:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
     87a:	0a0a      	lsrs	r2, r1, #8
     87c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
     87e:	70d9      	strb	r1, [r3, #3]
		len = 5;
     880:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
     882:	4b44      	ldr	r3, [pc, #272]	; (994 <spi_cmd+0x13c>)
     884:	781b      	ldrb	r3, [r3, #0]
     886:	2b00      	cmp	r3, #0
     888:	d069      	beq.n	95e <spi_cmd+0x106>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
     88a:	3901      	subs	r1, #1
     88c:	b2c9      	uxtb	r1, r1
     88e:	e075      	b.n	97c <spi_cmd+0x124>
		bc[1] = (uint8)(adr >> 8);
     890:	0a0b      	lsrs	r3, r1, #8
     892:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
     894:	2d00      	cmp	r5, #0
     896:	d107      	bne.n	8a8 <spi_cmd+0x50>
		bc[1] = (uint8)(adr >> 8);
     898:	aa01      	add	r2, sp, #4
     89a:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
     89c:	ab01      	add	r3, sp, #4
     89e:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
     8a0:	2200      	movs	r2, #0
     8a2:	70da      	strb	r2, [r3, #3]
		len = 5;
     8a4:	2105      	movs	r1, #5
		break;
     8a6:	e7ec      	b.n	882 <spi_cmd+0x2a>
		if(clockless)  bc[1] |= (1 << 7);
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	4252      	negs	r2, r2
     8ac:	4313      	orrs	r3, r2
     8ae:	aa01      	add	r2, sp, #4
     8b0:	7053      	strb	r3, [r2, #1]
     8b2:	e7f3      	b.n	89c <spi_cmd+0x44>
		bc[1] = 0x00;
     8b4:	ab01      	add	r3, sp, #4
     8b6:	2200      	movs	r2, #0
     8b8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
     8ba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
     8bc:	70da      	strb	r2, [r3, #3]
		len = 5;
     8be:	2105      	movs	r1, #5
		break;
     8c0:	e7df      	b.n	882 <spi_cmd+0x2a>
		bc[1] = 0x00;
     8c2:	ab01      	add	r3, sp, #4
     8c4:	2200      	movs	r2, #0
     8c6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
     8c8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
     8ca:	70da      	strb	r2, [r3, #3]
		len = 5;
     8cc:	2105      	movs	r1, #5
		break;
     8ce:	e7d8      	b.n	882 <spi_cmd+0x2a>
		bc[1] = 0xff;
     8d0:	ab01      	add	r3, sp, #4
     8d2:	22ff      	movs	r2, #255	; 0xff
     8d4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
     8d6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
     8d8:	70da      	strb	r2, [r3, #3]
		len = 5;
     8da:	2105      	movs	r1, #5
		break;
     8dc:	e7d1      	b.n	882 <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
     8de:	aa01      	add	r2, sp, #4
     8e0:	0c08      	lsrs	r0, r1, #16
     8e2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
     8e4:	0a08      	lsrs	r0, r1, #8
     8e6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
     8e8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
     8ea:	0a19      	lsrs	r1, r3, #8
     8ec:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
     8ee:	7153      	strb	r3, [r2, #5]
		len = 7;
     8f0:	2107      	movs	r1, #7
		break;
     8f2:	e7c6      	b.n	882 <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
     8f4:	aa01      	add	r2, sp, #4
     8f6:	0c08      	lsrs	r0, r1, #16
     8f8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
     8fa:	0a08      	lsrs	r0, r1, #8
     8fc:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
     8fe:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
     900:	0c19      	lsrs	r1, r3, #16
     902:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
     904:	0a19      	lsrs	r1, r3, #8
     906:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
     908:	7193      	strb	r3, [r2, #6]
		len = 8;
     90a:	2108      	movs	r1, #8
		break;
     90c:	e7b9      	b.n	882 <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 8);
     90e:	0a0b      	lsrs	r3, r1, #8
     910:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
     912:	2d00      	cmp	r5, #0
     914:	d10c      	bne.n	930 <spi_cmd+0xd8>
		bc[1] = (uint8)(adr >> 8);
     916:	a801      	add	r0, sp, #4
     918:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
     91a:	ab01      	add	r3, sp, #4
     91c:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
     91e:	0e11      	lsrs	r1, r2, #24
     920:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
     922:	0c11      	lsrs	r1, r2, #16
     924:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
     926:	0a11      	lsrs	r1, r2, #8
     928:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
     92a:	719a      	strb	r2, [r3, #6]
		len = 8;
     92c:	2108      	movs	r1, #8
		break;
     92e:	e7a8      	b.n	882 <spi_cmd+0x2a>
		if(clockless)  bc[1] |= (1 << 7);
     930:	2080      	movs	r0, #128	; 0x80
     932:	4240      	negs	r0, r0
     934:	4303      	orrs	r3, r0
     936:	a801      	add	r0, sp, #4
     938:	7043      	strb	r3, [r0, #1]
     93a:	e7ee      	b.n	91a <spi_cmd+0xc2>
		bc[1] = (uint8)(adr >> 16);
     93c:	ab01      	add	r3, sp, #4
     93e:	0c08      	lsrs	r0, r1, #16
     940:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
     942:	0a08      	lsrs	r0, r1, #8
     944:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
     946:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
     948:	0e11      	lsrs	r1, r2, #24
     94a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
     94c:	0c11      	lsrs	r1, r2, #16
     94e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
     950:	0a11      	lsrs	r1, r2, #8
     952:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
     954:	71da      	strb	r2, [r3, #7]
		len = 9;
     956:	2109      	movs	r1, #9
		break;
     958:	e793      	b.n	882 <spi_cmd+0x2a>
	switch (cmd) {
     95a:	2000      	movs	r0, #0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
     95c:	e015      	b.n	98a <spi_cmd+0x132>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
     95e:	1e4e      	subs	r6, r1, #1
     960:	aa01      	add	r2, sp, #4
     962:	1995      	adds	r5, r2, r6
     964:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
     966:	4c0c      	ldr	r4, [pc, #48]	; (998 <spi_cmd+0x140>)
     968:	005b      	lsls	r3, r3, #1
     96a:	7810      	ldrb	r0, [r2, #0]
     96c:	4043      	eors	r3, r0
     96e:	5ce3      	ldrb	r3, [r4, r3]
     970:	3201      	adds	r2, #1
	while (len--)
     972:	42aa      	cmp	r2, r5
     974:	d1f8      	bne.n	968 <spi_cmd+0x110>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
     976:	005b      	lsls	r3, r3, #1
     978:	aa01      	add	r2, sp, #4
     97a:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
     97c:	b289      	uxth	r1, r1
     97e:	a801      	add	r0, sp, #4
     980:	4b06      	ldr	r3, [pc, #24]	; (99c <spi_cmd+0x144>)
     982:	4798      	blx	r3
     984:	4243      	negs	r3, r0
     986:	4158      	adcs	r0, r3
     988:	b240      	sxtb	r0, r0
}
     98a:	b004      	add	sp, #16
     98c:	bd70      	pop	{r4, r5, r6, pc}
     98e:	46c0      	nop			; (mov r8, r8)
     990:	00003e10 	.word	0x00003e10
     994:	20000094 	.word	0x20000094
     998:	00003e50 	.word	0x00003e50
     99c:	00000839 	.word	0x00000839

000009a0 <nmi_spi_read>:
{
     9a0:	b500      	push	{lr}
     9a2:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
     9a4:	ab01      	add	r3, sp, #4
     9a6:	2200      	movs	r2, #0
     9a8:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
     9aa:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
     9ac:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
     9ae:	0019      	movs	r1, r3
     9b0:	2003      	movs	r0, #3
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <nmi_spi_read+0x1c>)
     9b4:	4798      	blx	r3
}
     9b6:	b005      	add	sp, #20
     9b8:	bd00      	pop	{pc}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	00000341 	.word	0x00000341

000009c0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
     9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c2:	46c6      	mov	lr, r8
     9c4:	b500      	push	{lr}
     9c6:	b082      	sub	sp, #8
     9c8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
     9ca:	28cf      	cmp	r0, #207	; 0xcf
     9cc:	d02b      	beq.n	a26 <spi_cmd_rsp+0x66>
     9ce:	0003      	movs	r3, r0
     9d0:	333b      	adds	r3, #59	; 0x3b
     9d2:	b2db      	uxtb	r3, r3
     9d4:	2b01      	cmp	r3, #1
     9d6:	d926      	bls.n	a26 <spi_cmd_rsp+0x66>
{
     9d8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     9da:	466b      	mov	r3, sp
     9dc:	1dde      	adds	r6, r3, #7
     9de:	4b19      	ldr	r3, [pc, #100]	; (a44 <spi_cmd_rsp+0x84>)
     9e0:	4698      	mov	r8, r3
     9e2:	2101      	movs	r1, #1
     9e4:	0030      	movs	r0, r6
     9e6:	47c0      	blx	r8
     9e8:	1e05      	subs	r5, r0, #0
     9ea:	d127      	bne.n	a3c <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
     9ec:	7833      	ldrb	r3, [r6, #0]
     9ee:	42bb      	cmp	r3, r7
     9f0:	d022      	beq.n	a38 <spi_cmd_rsp+0x78>
     9f2:	3c01      	subs	r4, #1
     9f4:	b2e4      	uxtb	r4, r4
     9f6:	2c00      	cmp	r4, #0
     9f8:	d1f3      	bne.n	9e2 <spi_cmd_rsp+0x22>
     9fa:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     9fc:	466b      	mov	r3, sp
     9fe:	1dde      	adds	r6, r3, #7
     a00:	4f10      	ldr	r7, [pc, #64]	; (a44 <spi_cmd_rsp+0x84>)
     a02:	2101      	movs	r1, #1
     a04:	0030      	movs	r0, r6
     a06:	47b8      	blx	r7
     a08:	2800      	cmp	r0, #0
     a0a:	d107      	bne.n	a1c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
     a0c:	7833      	ldrb	r3, [r6, #0]
     a0e:	2b00      	cmp	r3, #0
     a10:	d016      	beq.n	a40 <spi_cmd_rsp+0x80>
     a12:	3c01      	subs	r4, #1
     a14:	b2e4      	uxtb	r4, r4
     a16:	2c00      	cmp	r4, #0
     a18:	d1f3      	bne.n	a02 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
     a1a:	2501      	movs	r5, #1

_fail_:

	return result;
}
     a1c:	0028      	movs	r0, r5
     a1e:	b002      	add	sp, #8
     a20:	bc04      	pop	{r2}
     a22:	4690      	mov	r8, r2
     a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     a26:	2101      	movs	r1, #1
     a28:	466b      	mov	r3, sp
     a2a:	1dd8      	adds	r0, r3, #7
     a2c:	4b05      	ldr	r3, [pc, #20]	; (a44 <spi_cmd_rsp+0x84>)
     a2e:	4798      	blx	r3
			result = N_FAIL;
     a30:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     a32:	2800      	cmp	r0, #0
     a34:	d0d0      	beq.n	9d8 <spi_cmd_rsp+0x18>
     a36:	e7f1      	b.n	a1c <spi_cmd_rsp+0x5c>
     a38:	240b      	movs	r4, #11
     a3a:	e7df      	b.n	9fc <spi_cmd_rsp+0x3c>
			result = N_FAIL;
     a3c:	2500      	movs	r5, #0
     a3e:	e7ed      	b.n	a1c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
     a40:	2501      	movs	r5, #1
     a42:	e7eb      	b.n	a1c <spi_cmd_rsp+0x5c>
     a44:	000009a1 	.word	0x000009a1

00000a48 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	46de      	mov	lr, fp
     a4c:	4657      	mov	r7, sl
     a4e:	464e      	mov	r6, r9
     a50:	4645      	mov	r5, r8
     a52:	b5e0      	push	{r5, r6, r7, lr}
     a54:	b087      	sub	sp, #28
     a56:	9001      	str	r0, [sp, #4]
     a58:	4689      	mov	r9, r1
     a5a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
     a5c:	2300      	movs	r3, #0
     a5e:	469a      	mov	sl, r3
     a60:	2380      	movs	r3, #128	; 0x80
     a62:	019b      	lsls	r3, r3, #6
     a64:	469b      	mov	fp, r3
     a66:	466a      	mov	r2, sp
     a68:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     a6a:	4b24      	ldr	r3, [pc, #144]	; (afc <spi_data_read+0xb4>)
     a6c:	4698      	mov	r8, r3
     a6e:	e01a      	b.n	aa6 <spi_data_read+0x5e>
		} while (retry--);

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
     a70:	2c00      	cmp	r4, #0
     a72:	dd2e      	ble.n	ad2 <spi_data_read+0x8a>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
     a74:	9b01      	ldr	r3, [sp, #4]
     a76:	4453      	add	r3, sl
     a78:	0018      	movs	r0, r3
     a7a:	0039      	movs	r1, r7
     a7c:	4b1f      	ldr	r3, [pc, #124]	; (afc <spi_data_read+0xb4>)
     a7e:	4798      	blx	r3
     a80:	1e04      	subs	r4, r0, #0
     a82:	d126      	bne.n	ad2 <spi_data_read+0x8a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
			break;
		}
		if(!clockless)
     a84:	9b02      	ldr	r3, [sp, #8]
     a86:	2b00      	cmp	r3, #0
     a88:	d103      	bne.n	a92 <spi_data_read+0x4a>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
     a8a:	4b1d      	ldr	r3, [pc, #116]	; (b00 <spi_data_read+0xb8>)
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b00      	cmp	r3, #0
     a90:	d027      	beq.n	ae2 <spi_data_read+0x9a>
					result = N_FAIL;
					break;
				}
			}
		}
		ix += nbytes;
     a92:	4653      	mov	r3, sl
     a94:	18fb      	adds	r3, r7, r3
     a96:	b21b      	sxth	r3, r3
     a98:	469a      	mov	sl, r3
		sz -= nbytes;
     a9a:	464b      	mov	r3, r9
     a9c:	1bdf      	subs	r7, r3, r7
     a9e:	b2bb      	uxth	r3, r7
     aa0:	4699      	mov	r9, r3

	} while (sz);
     aa2:	2b00      	cmp	r3, #0
     aa4:	d025      	beq.n	af2 <spi_data_read+0xaa>
     aa6:	464f      	mov	r7, r9
     aa8:	45d9      	cmp	r9, fp
     aaa:	d901      	bls.n	ab0 <spi_data_read+0x68>
     aac:	466b      	mov	r3, sp
     aae:	89df      	ldrh	r7, [r3, #14]
     ab0:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
     ab2:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     ab4:	ab04      	add	r3, sp, #16
     ab6:	1cde      	adds	r6, r3, #3
     ab8:	2101      	movs	r1, #1
     aba:	0030      	movs	r0, r6
     abc:	47c0      	blx	r8
     abe:	1e05      	subs	r5, r0, #0
     ac0:	d119      	bne.n	af6 <spi_data_read+0xae>
			if (((rsp >> 4) & 0xf) == 0xf)
     ac2:	7833      	ldrb	r3, [r6, #0]
     ac4:	091b      	lsrs	r3, r3, #4
     ac6:	2b0f      	cmp	r3, #15
     ac8:	d0d2      	beq.n	a70 <spi_data_read+0x28>
     aca:	3c01      	subs	r4, #1
     acc:	b224      	sxth	r4, r4
		} while (retry--);
     ace:	1c63      	adds	r3, r4, #1
     ad0:	d1f2      	bne.n	ab8 <spi_data_read+0x70>

	return result;
}
     ad2:	0028      	movs	r0, r5
     ad4:	b007      	add	sp, #28
     ad6:	bc3c      	pop	{r2, r3, r4, r5}
     ad8:	4690      	mov	r8, r2
     ada:	4699      	mov	r9, r3
     adc:	46a2      	mov	sl, r4
     ade:	46ab      	mov	fp, r5
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
     ae2:	2102      	movs	r1, #2
     ae4:	a805      	add	r0, sp, #20
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <spi_data_read+0xb4>)
     ae8:	4798      	blx	r3
     aea:	2800      	cmp	r0, #0
     aec:	d0d1      	beq.n	a92 <spi_data_read+0x4a>
					result = N_FAIL;
     aee:	0025      	movs	r5, r4
     af0:	e7ef      	b.n	ad2 <spi_data_read+0x8a>
     af2:	2501      	movs	r5, #1
     af4:	e7ed      	b.n	ad2 <spi_data_read+0x8a>
     af6:	2500      	movs	r5, #0
     af8:	e7eb      	b.n	ad2 <spi_data_read+0x8a>
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	000009a1 	.word	0x000009a1
     b00:	20000094 	.word	0x20000094

00000b04 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46d6      	mov	lr, sl
     b08:	464f      	mov	r7, r9
     b0a:	4646      	mov	r6, r8
     b0c:	b5c0      	push	{r6, r7, lr}
     b0e:	b086      	sub	sp, #24
     b10:	9003      	str	r0, [sp, #12]
     b12:	9105      	str	r1, [sp, #20]
     b14:	2830      	cmp	r0, #48	; 0x30
     b16:	d831      	bhi.n	b7c <spi_write_reg+0x78>
     b18:	4b1d      	ldr	r3, [pc, #116]	; (b90 <spi_write_reg+0x8c>)
     b1a:	781e      	ldrb	r6, [r3, #0]
     b1c:	b2f3      	uxtb	r3, r6
     b1e:	9304      	str	r3, [sp, #16]
     b20:	2300      	movs	r3, #0
     b22:	2230      	movs	r2, #48	; 0x30
     b24:	9903      	ldr	r1, [sp, #12]
     b26:	428a      	cmp	r2, r1
     b28:	415b      	adcs	r3, r3
     b2a:	b2db      	uxtb	r3, r3
     b2c:	469a      	mov	sl, r3
     b2e:	240a      	movs	r4, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
     b30:	4b18      	ldr	r3, [pc, #96]	; (b94 <spi_write_reg+0x90>)
     b32:	4699      	mov	r9, r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
     b34:	4e18      	ldr	r6, [pc, #96]	; (b98 <spi_write_reg+0x94>)
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
     b36:	4653      	mov	r3, sl
     b38:	9300      	str	r3, [sp, #0]
     b3a:	2304      	movs	r3, #4
     b3c:	9a05      	ldr	r2, [sp, #20]
     b3e:	9903      	ldr	r1, [sp, #12]
     b40:	9804      	ldr	r0, [sp, #16]
     b42:	47c8      	blx	r9
     b44:	0005      	movs	r5, r0
	if (result != N_OK) {
     b46:	2801      	cmp	r0, #1
     b48:	d01b      	beq.n	b82 <spi_write_reg+0x7e>
		nm_bsp_sleep(1);
     b4a:	2001      	movs	r0, #1
     b4c:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     b4e:	2300      	movs	r3, #0
     b50:	9300      	str	r3, [sp, #0]
     b52:	2200      	movs	r2, #0
     b54:	2100      	movs	r1, #0
     b56:	20cf      	movs	r0, #207	; 0xcf
     b58:	4f0e      	ldr	r7, [pc, #56]	; (b94 <spi_write_reg+0x90>)
     b5a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
     b5c:	20cf      	movs	r0, #207	; 0xcf
     b5e:	4b0f      	ldr	r3, [pc, #60]	; (b9c <spi_write_reg+0x98>)
     b60:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
     b62:	2001      	movs	r0, #1
     b64:	47b0      	blx	r6
     b66:	3c01      	subs	r4, #1
     b68:	b2e4      	uxtb	r4, r4
		retry--;
		if(retry) goto _RETRY_;
     b6a:	2c00      	cmp	r4, #0
     b6c:	d1e3      	bne.n	b36 <spi_write_reg+0x32>
	}

	return result;
}
     b6e:	0028      	movs	r0, r5
     b70:	b006      	add	sp, #24
     b72:	bc1c      	pop	{r2, r3, r4}
     b74:	4690      	mov	r8, r2
     b76:	4699      	mov	r9, r3
     b78:	46a2      	mov	sl, r4
     b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <spi_write_reg+0x9c>)
     b7e:	781e      	ldrb	r6, [r3, #0]
     b80:	e7cc      	b.n	b1c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
     b82:	9804      	ldr	r0, [sp, #16]
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <spi_write_reg+0x98>)
     b86:	4798      	blx	r3
     b88:	0005      	movs	r5, r0
	if(result != N_OK)
     b8a:	2801      	cmp	r0, #1
     b8c:	d1dd      	bne.n	b4a <spi_write_reg+0x46>
     b8e:	e7ee      	b.n	b6e <spi_write_reg+0x6a>
     b90:	00003e4c 	.word	0x00003e4c
     b94:	00000859 	.word	0x00000859
     b98:	00000181 	.word	0x00000181
     b9c:	000009c1 	.word	0x000009c1
     ba0:	00003e4d 	.word	0x00003e4d

00000ba4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
     ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba6:	46d6      	mov	lr, sl
     ba8:	464f      	mov	r7, r9
     baa:	4646      	mov	r6, r8
     bac:	b5c0      	push	{r6, r7, lr}
     bae:	b088      	sub	sp, #32
     bb0:	9003      	str	r0, [sp, #12]
     bb2:	9105      	str	r1, [sp, #20]
     bb4:	28ff      	cmp	r0, #255	; 0xff
     bb6:	d80e      	bhi.n	bd6 <spi_read_reg+0x32>
     bb8:	4b28      	ldr	r3, [pc, #160]	; (c5c <spi_read_reg+0xb8>)
     bba:	781e      	ldrb	r6, [r3, #0]
     bbc:	b2f3      	uxtb	r3, r6
     bbe:	9304      	str	r3, [sp, #16]
     bc0:	2300      	movs	r3, #0
     bc2:	22ff      	movs	r2, #255	; 0xff
     bc4:	9903      	ldr	r1, [sp, #12]
     bc6:	428a      	cmp	r2, r1
     bc8:	415b      	adcs	r3, r3
     bca:	b2df      	uxtb	r7, r3
     bcc:	240a      	movs	r4, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
     bce:	4b24      	ldr	r3, [pc, #144]	; (c60 <spi_read_reg+0xbc>)
     bd0:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
     bd2:	46ba      	mov	sl, r7
     bd4:	e015      	b.n	c02 <spi_read_reg+0x5e>
     bd6:	4b23      	ldr	r3, [pc, #140]	; (c64 <spi_read_reg+0xc0>)
     bd8:	781e      	ldrb	r6, [r3, #0]
     bda:	e7ef      	b.n	bbc <spi_read_reg+0x18>
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
     bdc:	2001      	movs	r0, #1
     bde:	4e22      	ldr	r6, [pc, #136]	; (c68 <spi_read_reg+0xc4>)
     be0:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     be2:	2300      	movs	r3, #0
     be4:	9300      	str	r3, [sp, #0]
     be6:	2200      	movs	r2, #0
     be8:	2100      	movs	r1, #0
     bea:	20cf      	movs	r0, #207	; 0xcf
     bec:	4f1c      	ldr	r7, [pc, #112]	; (c60 <spi_read_reg+0xbc>)
     bee:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
     bf0:	20cf      	movs	r0, #207	; 0xcf
     bf2:	4b1e      	ldr	r3, [pc, #120]	; (c6c <spi_read_reg+0xc8>)
     bf4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
     bf6:	2001      	movs	r0, #1
     bf8:	47b0      	blx	r6
     bfa:	3c01      	subs	r4, #1
     bfc:	b2e4      	uxtb	r4, r4
		retry--;
		if(retry) goto _RETRY_;
     bfe:	2c00      	cmp	r4, #0
     c00:	d024      	beq.n	c4c <spi_read_reg+0xa8>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
     c02:	4653      	mov	r3, sl
     c04:	9300      	str	r3, [sp, #0]
     c06:	2304      	movs	r3, #4
     c08:	2200      	movs	r2, #0
     c0a:	9903      	ldr	r1, [sp, #12]
     c0c:	9804      	ldr	r0, [sp, #16]
     c0e:	47c0      	blx	r8
     c10:	0005      	movs	r5, r0
	if (result != N_OK) {
     c12:	2801      	cmp	r0, #1
     c14:	d1e2      	bne.n	bdc <spi_read_reg+0x38>
	result = spi_cmd_rsp(cmd);
     c16:	9804      	ldr	r0, [sp, #16]
     c18:	4b14      	ldr	r3, [pc, #80]	; (c6c <spi_read_reg+0xc8>)
     c1a:	4798      	blx	r3
     c1c:	0005      	movs	r5, r0
	if (result != N_OK) {
     c1e:	2801      	cmp	r0, #1
     c20:	d1dc      	bne.n	bdc <spi_read_reg+0x38>
	result = spi_data_read(&tmp[0], 4, clockless);
     c22:	4652      	mov	r2, sl
     c24:	2104      	movs	r1, #4
     c26:	a807      	add	r0, sp, #28
     c28:	4b11      	ldr	r3, [pc, #68]	; (c70 <spi_read_reg+0xcc>)
     c2a:	4798      	blx	r3
     c2c:	0005      	movs	r5, r0
	if (result != N_OK) {
     c2e:	2801      	cmp	r0, #1
     c30:	d1d4      	bne.n	bdc <spi_read_reg+0x38>
		((uint32)tmp[1] << 8) |
     c32:	aa07      	add	r2, sp, #28
     c34:	7853      	ldrb	r3, [r2, #1]
     c36:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
     c38:	7891      	ldrb	r1, [r2, #2]
     c3a:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
     c3c:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
     c3e:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
     c40:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
     c42:	78d2      	ldrb	r2, [r2, #3]
     c44:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
     c46:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
     c48:	9a05      	ldr	r2, [sp, #20]
     c4a:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
     c4c:	0028      	movs	r0, r5
     c4e:	b008      	add	sp, #32
     c50:	bc1c      	pop	{r2, r3, r4}
     c52:	4690      	mov	r8, r2
     c54:	4699      	mov	r9, r3
     c56:	46a2      	mov	sl, r4
     c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	00003e4e 	.word	0x00003e4e
     c60:	00000859 	.word	0x00000859
     c64:	00003e4f 	.word	0x00003e4f
     c68:	00000181 	.word	0x00000181
     c6c:	000009c1 	.word	0x000009c1
     c70:	00000a49 	.word	0x00000a49

00000c74 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
     c74:	b510      	push	{r4, lr}
     c76:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
     c78:	2300      	movs	r3, #0
     c7a:	9300      	str	r3, [sp, #0]
     c7c:	2200      	movs	r2, #0
     c7e:	2100      	movs	r1, #0
     c80:	20cf      	movs	r0, #207	; 0xcf
     c82:	4c04      	ldr	r4, [pc, #16]	; (c94 <nm_spi_reset+0x20>)
     c84:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
     c86:	20cf      	movs	r0, #207	; 0xcf
     c88:	4b03      	ldr	r3, [pc, #12]	; (c98 <nm_spi_reset+0x24>)
     c8a:	4798      	blx	r3
	return M2M_SUCCESS;
}
     c8c:	2000      	movs	r0, #0
     c8e:	b002      	add	sp, #8
     c90:	bd10      	pop	{r4, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00000859 	.word	0x00000859
     c98:	000009c1 	.word	0x000009c1

00000c9c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
     c9c:	b500      	push	{lr}
     c9e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
     ca0:	a901      	add	r1, sp, #4
     ca2:	4b02      	ldr	r3, [pc, #8]	; (cac <nm_spi_read_reg+0x10>)
     ca4:	4798      	blx	r3

	return u32Val;
}
     ca6:	9801      	ldr	r0, [sp, #4]
     ca8:	b003      	add	sp, #12
     caa:	bd00      	pop	{pc}
     cac:	00000ba5 	.word	0x00000ba5

00000cb0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     cb0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
     cb2:	4b04      	ldr	r3, [pc, #16]	; (cc4 <nm_spi_read_reg_with_ret+0x14>)
     cb4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     cb6:	2300      	movs	r3, #0
     cb8:	2801      	cmp	r0, #1
     cba:	d101      	bne.n	cc0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
     cbc:	0018      	movs	r0, r3
     cbe:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
     cc0:	3b06      	subs	r3, #6
     cc2:	e7fb      	b.n	cbc <nm_spi_read_reg_with_ret+0xc>
     cc4:	00000ba5 	.word	0x00000ba5

00000cc8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
     cc8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
     cca:	4b04      	ldr	r3, [pc, #16]	; (cdc <nm_spi_write_reg+0x14>)
     ccc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     cce:	2300      	movs	r3, #0
     cd0:	2801      	cmp	r0, #1
     cd2:	d101      	bne.n	cd8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
     cd4:	0018      	movs	r0, r3
     cd6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
     cd8:	3b06      	subs	r3, #6
     cda:	e7fb      	b.n	cd4 <nm_spi_write_reg+0xc>
     cdc:	00000b05 	.word	0x00000b05

00000ce0 <nm_spi_init>:
{
     ce0:	b510      	push	{r4, lr}
     ce2:	b082      	sub	sp, #8
	uint32 reg = 0;
     ce4:	2300      	movs	r3, #0
     ce6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
     ce8:	4a1e      	ldr	r2, [pc, #120]	; (d64 <nm_spi_init+0x84>)
     cea:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
     cec:	4669      	mov	r1, sp
     cee:	481e      	ldr	r0, [pc, #120]	; (d68 <nm_spi_init+0x88>)
     cf0:	4b1e      	ldr	r3, [pc, #120]	; (d6c <nm_spi_init+0x8c>)
     cf2:	4798      	blx	r3
     cf4:	2800      	cmp	r0, #0
     cf6:	d027      	beq.n	d48 <nm_spi_init+0x68>
	if(gu8Crc_off == 0)
     cf8:	4b1a      	ldr	r3, [pc, #104]	; (d64 <nm_spi_init+0x84>)
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d10d      	bne.n	d1c <nm_spi_init+0x3c>
		reg &= ~0x70;
     d00:	337c      	adds	r3, #124	; 0x7c
     d02:	9900      	ldr	r1, [sp, #0]
     d04:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
     d06:	3b2c      	subs	r3, #44	; 0x2c
     d08:	4319      	orrs	r1, r3
     d0a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
     d0c:	4816      	ldr	r0, [pc, #88]	; (d68 <nm_spi_init+0x88>)
     d0e:	4b18      	ldr	r3, [pc, #96]	; (d70 <nm_spi_init+0x90>)
     d10:	4798      	blx	r3
     d12:	2800      	cmp	r0, #0
     d14:	d016      	beq.n	d44 <nm_spi_init+0x64>
		gu8Crc_off = 1;
     d16:	2201      	movs	r2, #1
     d18:	4b12      	ldr	r3, [pc, #72]	; (d64 <nm_spi_init+0x84>)
     d1a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
     d1c:	a901      	add	r1, sp, #4
     d1e:	2080      	movs	r0, #128	; 0x80
     d20:	0140      	lsls	r0, r0, #5
     d22:	4b12      	ldr	r3, [pc, #72]	; (d6c <nm_spi_init+0x8c>)
     d24:	4798      	blx	r3
     d26:	2800      	cmp	r0, #0
     d28:	d018      	beq.n	d5c <nm_spi_init+0x7c>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
     d2a:	4c0f      	ldr	r4, [pc, #60]	; (d68 <nm_spi_init+0x88>)
     d2c:	0020      	movs	r0, r4
     d2e:	4b11      	ldr	r3, [pc, #68]	; (d74 <nm_spi_init+0x94>)
     d30:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
     d32:	2370      	movs	r3, #112	; 0x70
     d34:	0001      	movs	r1, r0
     d36:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
     d38:	2050      	movs	r0, #80	; 0x50
     d3a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
     d3c:	0020      	movs	r0, r4
     d3e:	4b0e      	ldr	r3, [pc, #56]	; (d78 <nm_spi_init+0x98>)
     d40:	4798      	blx	r3
	return M2M_SUCCESS;
     d42:	2000      	movs	r0, #0
}
     d44:	b002      	add	sp, #8
     d46:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
     d48:	2201      	movs	r2, #1
     d4a:	4b06      	ldr	r3, [pc, #24]	; (d64 <nm_spi_init+0x84>)
     d4c:	701a      	strb	r2, [r3, #0]
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
     d4e:	4669      	mov	r1, sp
     d50:	4805      	ldr	r0, [pc, #20]	; (d68 <nm_spi_init+0x88>)
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <nm_spi_init+0x8c>)
     d54:	4798      	blx	r3
     d56:	2800      	cmp	r0, #0
     d58:	d1ce      	bne.n	cf8 <nm_spi_init+0x18>
     d5a:	e7f3      	b.n	d44 <nm_spi_init+0x64>
		return M2M_ERR_BUS_FAIL;
     d5c:	2006      	movs	r0, #6
     d5e:	4240      	negs	r0, r0
     d60:	e7f0      	b.n	d44 <nm_spi_init+0x64>
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	20000094 	.word	0x20000094
     d68:	0000e824 	.word	0x0000e824
     d6c:	00000ba5 	.word	0x00000ba5
     d70:	00000b05 	.word	0x00000b05
     d74:	00000c9d 	.word	0x00000c9d
     d78:	00000cc9 	.word	0x00000cc9

00000d7c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	46de      	mov	lr, fp
     d80:	4657      	mov	r7, sl
     d82:	464e      	mov	r6, r9
     d84:	4645      	mov	r5, r8
     d86:	b5e0      	push	{r5, r6, r7, lr}
     d88:	b087      	sub	sp, #28
     d8a:	9002      	str	r0, [sp, #8]
     d8c:	9103      	str	r1, [sp, #12]
     d8e:	0017      	movs	r7, r2
     d90:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
     d92:	2300      	movs	r3, #0
     d94:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
     d96:	2400      	movs	r4, #0
     d98:	4b24      	ldr	r3, [pc, #144]	; (e2c <nm_spi_read_block+0xb0>)
     d9a:	4698      	mov	r8, r3
     d9c:	e01b      	b.n	dd6 <nm_spi_read_block+0x5a>
     d9e:	9400      	str	r4, [sp, #0]
     da0:	003b      	movs	r3, r7
     da2:	0022      	movs	r2, r4
     da4:	9902      	ldr	r1, [sp, #8]
     da6:	20c8      	movs	r0, #200	; 0xc8
     da8:	47c0      	blx	r8
	if (result != N_OK) {
     daa:	2801      	cmp	r0, #1
     dac:	d019      	beq.n	de2 <nm_spi_read_block+0x66>
		nm_bsp_sleep(1);
     dae:	2001      	movs	r0, #1
     db0:	4b1f      	ldr	r3, [pc, #124]	; (e30 <nm_spi_read_block+0xb4>)
     db2:	469a      	mov	sl, r3
     db4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     db6:	9400      	str	r4, [sp, #0]
     db8:	0023      	movs	r3, r4
     dba:	0022      	movs	r2, r4
     dbc:	0021      	movs	r1, r4
     dbe:	20cf      	movs	r0, #207	; 0xcf
     dc0:	4e1a      	ldr	r6, [pc, #104]	; (e2c <nm_spi_read_block+0xb0>)
     dc2:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
     dc4:	20cf      	movs	r0, #207	; 0xcf
     dc6:	4b1b      	ldr	r3, [pc, #108]	; (e34 <nm_spi_read_block+0xb8>)
     dc8:	4798      	blx	r3
		nm_bsp_sleep(1);
     dca:	2001      	movs	r0, #1
     dcc:	47d0      	blx	sl
     dce:	3d01      	subs	r5, #1
     dd0:	b2ed      	uxtb	r5, r5
		if(retry) goto _RETRY_;
     dd2:	2d00      	cmp	r5, #0
     dd4:	d020      	beq.n	e18 <nm_spi_read_block+0x9c>
	if (size == 1)
     dd6:	2f01      	cmp	r7, #1
     dd8:	d1e1      	bne.n	d9e <nm_spi_read_block+0x22>
		single_byte_workaround = 1;
     dda:	2301      	movs	r3, #1
     ddc:	469b      	mov	fp, r3
		size = 2;
     dde:	3701      	adds	r7, #1
     de0:	e7dd      	b.n	d9e <nm_spi_read_block+0x22>
	result = spi_cmd_rsp(cmd);
     de2:	30c7      	adds	r0, #199	; 0xc7
     de4:	4b13      	ldr	r3, [pc, #76]	; (e34 <nm_spi_read_block+0xb8>)
     de6:	4798      	blx	r3
	if (result != N_OK) {
     de8:	2801      	cmp	r0, #1
     dea:	d1e0      	bne.n	dae <nm_spi_read_block+0x32>
	if (single_byte_workaround)
     dec:	465b      	mov	r3, fp
     dee:	2b00      	cmp	r3, #0
     df0:	d00c      	beq.n	e0c <nm_spi_read_block+0x90>
		result = spi_data_read(tmp, size,0);
     df2:	ae05      	add	r6, sp, #20
     df4:	0022      	movs	r2, r4
     df6:	0039      	movs	r1, r7
     df8:	0030      	movs	r0, r6
     dfa:	4b0f      	ldr	r3, [pc, #60]	; (e38 <nm_spi_read_block+0xbc>)
     dfc:	4798      	blx	r3
		buf[0] = tmp[0];
     dfe:	7833      	ldrb	r3, [r6, #0]
     e00:	9a03      	ldr	r2, [sp, #12]
     e02:	7013      	strb	r3, [r2, #0]
	if(result != N_OK)
     e04:	2801      	cmp	r0, #1
     e06:	d1d2      	bne.n	dae <nm_spi_read_block+0x32>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     e08:	2000      	movs	r0, #0
     e0a:	e007      	b.n	e1c <nm_spi_read_block+0xa0>
		result = spi_data_read(buf, size,0);
     e0c:	0022      	movs	r2, r4
     e0e:	0039      	movs	r1, r7
     e10:	9803      	ldr	r0, [sp, #12]
     e12:	4b09      	ldr	r3, [pc, #36]	; (e38 <nm_spi_read_block+0xbc>)
     e14:	4798      	blx	r3
     e16:	e7f5      	b.n	e04 <nm_spi_read_block+0x88>
	else s8Ret = M2M_ERR_BUS_FAIL;
     e18:	2006      	movs	r0, #6
     e1a:	4240      	negs	r0, r0

	return s8Ret;
}
     e1c:	b007      	add	sp, #28
     e1e:	bc3c      	pop	{r2, r3, r4, r5}
     e20:	4690      	mov	r8, r2
     e22:	4699      	mov	r9, r3
     e24:	46a2      	mov	sl, r4
     e26:	46ab      	mov	fp, r5
     e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000859 	.word	0x00000859
     e30:	00000181 	.word	0x00000181
     e34:	000009c1 	.word	0x000009c1
     e38:	00000a49 	.word	0x00000a49

00000e3c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
     e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3e:	46de      	mov	lr, fp
     e40:	4657      	mov	r7, sl
     e42:	464e      	mov	r6, r9
     e44:	4645      	mov	r5, r8
     e46:	b5e0      	push	{r5, r6, r7, lr}
     e48:	b087      	sub	sp, #28
     e4a:	9002      	str	r0, [sp, #8]
     e4c:	468b      	mov	fp, r1
     e4e:	0017      	movs	r7, r2
     e50:	240a      	movs	r4, #10
     e52:	2380      	movs	r3, #128	; 0x80
     e54:	019b      	lsls	r3, r3, #6
     e56:	469a      	mov	sl, r3
     e58:	466a      	mov	r2, sp
     e5a:	81d3      	strh	r3, [r2, #14]
     e5c:	e01c      	b.n	e98 <nm_spi_write_block+0x5c>
	result = spi_cmd(cmd, addr, 0, size,0);
     e5e:	2300      	movs	r3, #0
     e60:	9300      	str	r3, [sp, #0]
     e62:	003b      	movs	r3, r7
     e64:	2200      	movs	r2, #0
     e66:	9902      	ldr	r1, [sp, #8]
     e68:	20c7      	movs	r0, #199	; 0xc7
     e6a:	4d4b      	ldr	r5, [pc, #300]	; (f98 <nm_spi_write_block+0x15c>)
     e6c:	47a8      	blx	r5
	if (result != N_OK) {
     e6e:	2801      	cmp	r0, #1
     e70:	d016      	beq.n	ea0 <nm_spi_write_block+0x64>
		nm_bsp_sleep(1);
     e72:	2001      	movs	r0, #1
     e74:	4d49      	ldr	r5, [pc, #292]	; (f9c <nm_spi_write_block+0x160>)
     e76:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
     e78:	2300      	movs	r3, #0
     e7a:	9300      	str	r3, [sp, #0]
     e7c:	2200      	movs	r2, #0
     e7e:	2100      	movs	r1, #0
     e80:	20cf      	movs	r0, #207	; 0xcf
     e82:	4e45      	ldr	r6, [pc, #276]	; (f98 <nm_spi_write_block+0x15c>)
     e84:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
     e86:	20cf      	movs	r0, #207	; 0xcf
     e88:	4b45      	ldr	r3, [pc, #276]	; (fa0 <nm_spi_write_block+0x164>)
     e8a:	4798      	blx	r3
		nm_bsp_sleep(1);
     e8c:	2001      	movs	r0, #1
     e8e:	47a8      	blx	r5
     e90:	3c01      	subs	r4, #1
     e92:	b2e4      	uxtb	r4, r4
		if(retry) goto _RETRY_;
     e94:	2c00      	cmp	r4, #0
     e96:	d050      	beq.n	f3a <nm_spi_write_block+0xfe>
	if (size == 1)
     e98:	2f01      	cmp	r7, #1
     e9a:	d1e0      	bne.n	e5e <nm_spi_write_block+0x22>
		size = 2;
     e9c:	3701      	adds	r7, #1
     e9e:	e7de      	b.n	e5e <nm_spi_write_block+0x22>
	result = spi_cmd_rsp(cmd);
     ea0:	30c6      	adds	r0, #198	; 0xc6
     ea2:	4b3f      	ldr	r3, [pc, #252]	; (fa0 <nm_spi_write_block+0x164>)
     ea4:	4798      	blx	r3
	if (result != N_OK) {
     ea6:	2801      	cmp	r0, #1
     ea8:	d1e3      	bne.n	e72 <nm_spi_write_block+0x36>
	uint8 cmd, order, crc[2] = {0};
     eaa:	2200      	movs	r2, #0
     eac:	ab05      	add	r3, sp, #20
     eae:	801a      	strh	r2, [r3, #0]
     eb0:	003d      	movs	r5, r7
	ix = 0;
     eb2:	2300      	movs	r3, #0
				order = 0x1;
     eb4:	46a0      	mov	r8, r4
     eb6:	46b9      	mov	r9, r7
     eb8:	001c      	movs	r4, r3
     eba:	e022      	b.n	f02 <nm_spi_write_block+0xc6>
				order = 0x2;
     ebc:	2300      	movs	r3, #0
     ebe:	4652      	mov	r2, sl
     ec0:	42aa      	cmp	r2, r5
     ec2:	415b      	adcs	r3, r3
     ec4:	3302      	adds	r3, #2
		cmd |= order;
     ec6:	200b      	movs	r0, #11
     ec8:	aa02      	add	r2, sp, #8
     eca:	4694      	mov	ip, r2
     ecc:	4460      	add	r0, ip
     ece:	2210      	movs	r2, #16
     ed0:	4252      	negs	r2, r2
     ed2:	4313      	orrs	r3, r2
     ed4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
     ed6:	2101      	movs	r1, #1
     ed8:	4b32      	ldr	r3, [pc, #200]	; (fa4 <nm_spi_write_block+0x168>)
     eda:	4798      	blx	r3
     edc:	2800      	cmp	r0, #0
     ede:	d126      	bne.n	f2e <nm_spi_write_block+0xf2>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
     ee0:	465b      	mov	r3, fp
     ee2:	1918      	adds	r0, r3, r4
     ee4:	0031      	movs	r1, r6
     ee6:	4b2f      	ldr	r3, [pc, #188]	; (fa4 <nm_spi_write_block+0x168>)
     ee8:	4798      	blx	r3
     eea:	1e07      	subs	r7, r0, #0
     eec:	d122      	bne.n	f34 <nm_spi_write_block+0xf8>
		if (!gu8Crc_off) {
     eee:	4b2e      	ldr	r3, [pc, #184]	; (fa8 <nm_spi_write_block+0x16c>)
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d012      	beq.n	f1c <nm_spi_write_block+0xe0>
		ix += nbytes;
     ef6:	1934      	adds	r4, r6, r4
     ef8:	b224      	sxth	r4, r4
		sz -= nbytes;
     efa:	1bad      	subs	r5, r5, r6
     efc:	b2ad      	uxth	r5, r5
	} while (sz);
     efe:	2d00      	cmp	r5, #0
     f00:	d024      	beq.n	f4c <nm_spi_write_block+0x110>
     f02:	1c2e      	adds	r6, r5, #0
     f04:	4555      	cmp	r5, sl
     f06:	d901      	bls.n	f0c <nm_spi_write_block+0xd0>
     f08:	466b      	mov	r3, sp
     f0a:	89de      	ldrh	r6, [r3, #14]
     f0c:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
     f0e:	2c00      	cmp	r4, #0
     f10:	d1d4      	bne.n	ebc <nm_spi_write_block+0x80>
				order = 0x3;
     f12:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
     f14:	4555      	cmp	r5, sl
     f16:	d9d6      	bls.n	ec6 <nm_spi_write_block+0x8a>
				order = 0x1;
     f18:	3b02      	subs	r3, #2
     f1a:	e7d4      	b.n	ec6 <nm_spi_write_block+0x8a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
     f1c:	2102      	movs	r1, #2
     f1e:	a805      	add	r0, sp, #20
     f20:	4b20      	ldr	r3, [pc, #128]	; (fa4 <nm_spi_write_block+0x168>)
     f22:	4798      	blx	r3
     f24:	2800      	cmp	r0, #0
     f26:	d0e6      	beq.n	ef6 <nm_spi_write_block+0xba>
     f28:	4644      	mov	r4, r8
     f2a:	464f      	mov	r7, r9
     f2c:	e7a1      	b.n	e72 <nm_spi_write_block+0x36>
     f2e:	4644      	mov	r4, r8
     f30:	464f      	mov	r7, r9
     f32:	e79e      	b.n	e72 <nm_spi_write_block+0x36>
     f34:	4644      	mov	r4, r8
     f36:	464f      	mov	r7, r9
     f38:	e79b      	b.n	e72 <nm_spi_write_block+0x36>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
     f3a:	2006      	movs	r0, #6
     f3c:	4240      	negs	r0, r0

	return s8Ret;
}
     f3e:	b007      	add	sp, #28
     f40:	bc3c      	pop	{r2, r3, r4, r5}
     f42:	4690      	mov	r8, r2
     f44:	4699      	mov	r9, r3
     f46:	46a2      	mov	sl, r4
     f48:	46ab      	mov	fp, r5
     f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f4c:	4644      	mov	r4, r8
     f4e:	464b      	mov	r3, r9
     f50:	46b9      	mov	r9, r7
     f52:	001f      	movs	r7, r3
    if (!gu8Crc_off)
     f54:	4b14      	ldr	r3, [pc, #80]	; (fa8 <nm_spi_write_block+0x16c>)
     f56:	781d      	ldrb	r5, [r3, #0]
		len = 3;
     f58:	1e6b      	subs	r3, r5, #1
     f5a:	419d      	sbcs	r5, r3
     f5c:	3502      	adds	r5, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
     f5e:	b2a9      	uxth	r1, r5
     f60:	a805      	add	r0, sp, #20
     f62:	4b12      	ldr	r3, [pc, #72]	; (fac <nm_spi_write_block+0x170>)
     f64:	4798      	blx	r3
     f66:	2800      	cmp	r0, #0
     f68:	d110      	bne.n	f8c <nm_spi_write_block+0x150>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
     f6a:	ab06      	add	r3, sp, #24
     f6c:	195b      	adds	r3, r3, r5
     f6e:	3b05      	subs	r3, #5
     f70:	781b      	ldrb	r3, [r3, #0]
		result = N_FAIL;
     f72:	4681      	mov	r9, r0
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
     f74:	2b00      	cmp	r3, #0
     f76:	d109      	bne.n	f8c <nm_spi_write_block+0x150>
     f78:	ab06      	add	r3, sp, #24
     f7a:	469c      	mov	ip, r3
     f7c:	4465      	add	r5, ip
     f7e:	3d06      	subs	r5, #6
     f80:	7828      	ldrb	r0, [r5, #0]
     f82:	38c3      	subs	r0, #195	; 0xc3
     f84:	4243      	negs	r3, r0
     f86:	4158      	adcs	r0, r3
		result = N_FAIL;
     f88:	b243      	sxtb	r3, r0
     f8a:	4699      	mov	r9, r3
	if(result != N_OK)
     f8c:	464b      	mov	r3, r9
     f8e:	2b01      	cmp	r3, #1
     f90:	d000      	beq.n	f94 <nm_spi_write_block+0x158>
     f92:	e76e      	b.n	e72 <nm_spi_write_block+0x36>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
     f94:	2000      	movs	r0, #0
	return s8Ret;
     f96:	e7d2      	b.n	f3e <nm_spi_write_block+0x102>
     f98:	00000859 	.word	0x00000859
     f9c:	00000181 	.word	0x00000181
     fa0:	000009c1 	.word	0x000009c1
     fa4:	00000839 	.word	0x00000839
     fa8:	20000094 	.word	0x20000094
     fac:	000009a1 	.word	0x000009a1

00000fb0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <cpu_irq_enter_critical+0x34>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d106      	bne.n	fc6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fb8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     fbc:	2b00      	cmp	r3, #0
     fbe:	d007      	beq.n	fd0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fc0:	2200      	movs	r2, #0
     fc2:	4b09      	ldr	r3, [pc, #36]	; (fe8 <cpu_irq_enter_critical+0x38>)
     fc4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fc6:	4a07      	ldr	r2, [pc, #28]	; (fe4 <cpu_irq_enter_critical+0x34>)
     fc8:	6813      	ldr	r3, [r2, #0]
     fca:	3301      	adds	r3, #1
     fcc:	6013      	str	r3, [r2, #0]
}
     fce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     fd0:	b672      	cpsid	i
     fd2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fd6:	2200      	movs	r2, #0
     fd8:	4b04      	ldr	r3, [pc, #16]	; (fec <cpu_irq_enter_critical+0x3c>)
     fda:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fdc:	3201      	adds	r2, #1
     fde:	4b02      	ldr	r3, [pc, #8]	; (fe8 <cpu_irq_enter_critical+0x38>)
     fe0:	701a      	strb	r2, [r3, #0]
     fe2:	e7f0      	b.n	fc6 <cpu_irq_enter_critical+0x16>
     fe4:	20000098 	.word	0x20000098
     fe8:	2000009c 	.word	0x2000009c
     fec:	2000000a 	.word	0x2000000a

00000ff0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <cpu_irq_leave_critical+0x24>)
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	3a01      	subs	r2, #1
     ff6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d109      	bne.n	1012 <cpu_irq_leave_critical+0x22>
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <cpu_irq_leave_critical+0x28>)
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d005      	beq.n	1012 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1006:	2201      	movs	r2, #1
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <cpu_irq_leave_critical+0x2c>)
    100a:	701a      	strb	r2, [r3, #0]
    100c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1010:	b662      	cpsie	i
	}
}
    1012:	4770      	bx	lr
    1014:	20000098 	.word	0x20000098
    1018:	2000009c 	.word	0x2000009c
    101c:	2000000a 	.word	0x2000000a

00001020 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1020:	b5f0      	push	{r4, r5, r6, r7, lr}
    1022:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1024:	ac01      	add	r4, sp, #4
    1026:	2501      	movs	r5, #1
    1028:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    102a:	2700      	movs	r7, #0
    102c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    102e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1030:	0021      	movs	r1, r4
    1032:	2017      	movs	r0, #23
    1034:	4e06      	ldr	r6, [pc, #24]	; (1050 <system_board_init+0x30>)
    1036:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	0412      	lsls	r2, r2, #16
    103c:	4b05      	ldr	r3, [pc, #20]	; (1054 <system_board_init+0x34>)
    103e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1040:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1042:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1044:	0021      	movs	r1, r4
    1046:	2037      	movs	r0, #55	; 0x37
    1048:	47b0      	blx	r6
}
    104a:	b003      	add	sp, #12
    104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	00001131 	.word	0x00001131
    1054:	41004400 	.word	0x41004400

00001058 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1058:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    105a:	2200      	movs	r2, #0
    105c:	4b10      	ldr	r3, [pc, #64]	; (10a0 <EIC_Handler+0x48>)
    105e:	701a      	strb	r2, [r3, #0]
    1060:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1062:	4910      	ldr	r1, [pc, #64]	; (10a4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1064:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1066:	4e10      	ldr	r6, [pc, #64]	; (10a8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1068:	4c0d      	ldr	r4, [pc, #52]	; (10a0 <EIC_Handler+0x48>)
    106a:	e00a      	b.n	1082 <EIC_Handler+0x2a>
		return eics[eic_index];
    106c:	490d      	ldr	r1, [pc, #52]	; (10a4 <EIC_Handler+0x4c>)
    106e:	e008      	b.n	1082 <EIC_Handler+0x2a>
    1070:	7823      	ldrb	r3, [r4, #0]
    1072:	3301      	adds	r3, #1
    1074:	b2db      	uxtb	r3, r3
    1076:	7023      	strb	r3, [r4, #0]
    1078:	2b0f      	cmp	r3, #15
    107a:	d810      	bhi.n	109e <EIC_Handler+0x46>
		return NULL;
    107c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    107e:	2b1f      	cmp	r3, #31
    1080:	d9f4      	bls.n	106c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1082:	0028      	movs	r0, r5
    1084:	4018      	ands	r0, r3
    1086:	2201      	movs	r2, #1
    1088:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    108a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    108c:	4210      	tst	r0, r2
    108e:	d0ef      	beq.n	1070 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1090:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1092:	009b      	lsls	r3, r3, #2
    1094:	599b      	ldr	r3, [r3, r6]
    1096:	2b00      	cmp	r3, #0
    1098:	d0ea      	beq.n	1070 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    109a:	4798      	blx	r3
    109c:	e7e8      	b.n	1070 <EIC_Handler+0x18>
			}
		}
	}
}
    109e:	bd70      	pop	{r4, r5, r6, pc}
    10a0:	200005a4 	.word	0x200005a4
    10a4:	40001800 	.word	0x40001800
    10a8:	200005a8 	.word	0x200005a8

000010ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    10ac:	4a04      	ldr	r2, [pc, #16]	; (10c0 <_extint_enable+0x14>)
    10ae:	7813      	ldrb	r3, [r2, #0]
    10b0:	2102      	movs	r1, #2
    10b2:	430b      	orrs	r3, r1
    10b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    10b6:	7853      	ldrb	r3, [r2, #1]
    10b8:	b25b      	sxtb	r3, r3
    10ba:	2b00      	cmp	r3, #0
    10bc:	dbfb      	blt.n	10b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    10be:	4770      	bx	lr
    10c0:	40001800 	.word	0x40001800

000010c4 <_system_extint_init>:
{
    10c4:	b500      	push	{lr}
    10c6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    10c8:	4a12      	ldr	r2, [pc, #72]	; (1114 <_system_extint_init+0x50>)
    10ca:	6993      	ldr	r3, [r2, #24]
    10cc:	2140      	movs	r1, #64	; 0x40
    10ce:	430b      	orrs	r3, r1
    10d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    10d2:	a901      	add	r1, sp, #4
    10d4:	2300      	movs	r3, #0
    10d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    10d8:	2005      	movs	r0, #5
    10da:	4b0f      	ldr	r3, [pc, #60]	; (1118 <_system_extint_init+0x54>)
    10dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    10de:	2005      	movs	r0, #5
    10e0:	4b0e      	ldr	r3, [pc, #56]	; (111c <_system_extint_init+0x58>)
    10e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    10e4:	4a0e      	ldr	r2, [pc, #56]	; (1120 <_system_extint_init+0x5c>)
    10e6:	7813      	ldrb	r3, [r2, #0]
    10e8:	2101      	movs	r1, #1
    10ea:	430b      	orrs	r3, r1
    10ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    10ee:	7853      	ldrb	r3, [r2, #1]
    10f0:	b25b      	sxtb	r3, r3
    10f2:	2b00      	cmp	r3, #0
    10f4:	dbfb      	blt.n	10ee <_system_extint_init+0x2a>
    10f6:	4b0b      	ldr	r3, [pc, #44]	; (1124 <_system_extint_init+0x60>)
    10f8:	0019      	movs	r1, r3
    10fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    10fc:	2200      	movs	r2, #0
    10fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1100:	4299      	cmp	r1, r3
    1102:	d1fc      	bne.n	10fe <_system_extint_init+0x3a>
    1104:	2210      	movs	r2, #16
    1106:	4b08      	ldr	r3, [pc, #32]	; (1128 <_system_extint_init+0x64>)
    1108:	601a      	str	r2, [r3, #0]
	_extint_enable();
    110a:	4b08      	ldr	r3, [pc, #32]	; (112c <_system_extint_init+0x68>)
    110c:	4798      	blx	r3
}
    110e:	b003      	add	sp, #12
    1110:	bd00      	pop	{pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	40000400 	.word	0x40000400
    1118:	000026fd 	.word	0x000026fd
    111c:	00002671 	.word	0x00002671
    1120:	40001800 	.word	0x40001800
    1124:	200005a8 	.word	0x200005a8
    1128:	e000e100 	.word	0xe000e100
    112c:	000010ad 	.word	0x000010ad

00001130 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1130:	b500      	push	{lr}
    1132:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1134:	ab01      	add	r3, sp, #4
    1136:	2280      	movs	r2, #128	; 0x80
    1138:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    113a:	780a      	ldrb	r2, [r1, #0]
    113c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    113e:	784a      	ldrb	r2, [r1, #1]
    1140:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1142:	788a      	ldrb	r2, [r1, #2]
    1144:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1146:	0019      	movs	r1, r3
    1148:	4b01      	ldr	r3, [pc, #4]	; (1150 <port_pin_set_config+0x20>)
    114a:	4798      	blx	r3
}
    114c:	b003      	add	sp, #12
    114e:	bd00      	pop	{pc}
    1150:	000027f5 	.word	0x000027f5

00001154 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1154:	b5f0      	push	{r4, r5, r6, r7, lr}
    1156:	46de      	mov	lr, fp
    1158:	4657      	mov	r7, sl
    115a:	464e      	mov	r6, r9
    115c:	4645      	mov	r5, r8
    115e:	b5e0      	push	{r5, r6, r7, lr}
    1160:	b087      	sub	sp, #28
    1162:	4680      	mov	r8, r0
    1164:	9104      	str	r1, [sp, #16]
    1166:	0016      	movs	r6, r2
    1168:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    116a:	2200      	movs	r2, #0
    116c:	2300      	movs	r3, #0
    116e:	2100      	movs	r1, #0
    1170:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1172:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1174:	2001      	movs	r0, #1
    1176:	0021      	movs	r1, r4
    1178:	9600      	str	r6, [sp, #0]
    117a:	9701      	str	r7, [sp, #4]
    117c:	465c      	mov	r4, fp
    117e:	9403      	str	r4, [sp, #12]
    1180:	4644      	mov	r4, r8
    1182:	9405      	str	r4, [sp, #20]
    1184:	e013      	b.n	11ae <long_division+0x5a>
    1186:	2420      	movs	r4, #32
    1188:	1a64      	subs	r4, r4, r1
    118a:	0005      	movs	r5, r0
    118c:	40e5      	lsrs	r5, r4
    118e:	46a8      	mov	r8, r5
    1190:	e014      	b.n	11bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1192:	9c00      	ldr	r4, [sp, #0]
    1194:	9d01      	ldr	r5, [sp, #4]
    1196:	1b12      	subs	r2, r2, r4
    1198:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    119a:	465c      	mov	r4, fp
    119c:	464d      	mov	r5, r9
    119e:	432c      	orrs	r4, r5
    11a0:	46a3      	mov	fp, r4
    11a2:	9c03      	ldr	r4, [sp, #12]
    11a4:	4645      	mov	r5, r8
    11a6:	432c      	orrs	r4, r5
    11a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    11aa:	3901      	subs	r1, #1
    11ac:	d325      	bcc.n	11fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    11ae:	2420      	movs	r4, #32
    11b0:	4264      	negs	r4, r4
    11b2:	190c      	adds	r4, r1, r4
    11b4:	d4e7      	bmi.n	1186 <long_division+0x32>
    11b6:	0005      	movs	r5, r0
    11b8:	40a5      	lsls	r5, r4
    11ba:	46a8      	mov	r8, r5
    11bc:	0004      	movs	r4, r0
    11be:	408c      	lsls	r4, r1
    11c0:	46a1      	mov	r9, r4
		r = r << 1;
    11c2:	1892      	adds	r2, r2, r2
    11c4:	415b      	adcs	r3, r3
    11c6:	0014      	movs	r4, r2
    11c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    11ca:	9e05      	ldr	r6, [sp, #20]
    11cc:	464f      	mov	r7, r9
    11ce:	403e      	ands	r6, r7
    11d0:	46b4      	mov	ip, r6
    11d2:	9e04      	ldr	r6, [sp, #16]
    11d4:	4647      	mov	r7, r8
    11d6:	403e      	ands	r6, r7
    11d8:	46b2      	mov	sl, r6
    11da:	4666      	mov	r6, ip
    11dc:	4657      	mov	r7, sl
    11de:	433e      	orrs	r6, r7
    11e0:	d003      	beq.n	11ea <long_division+0x96>
			r |= 0x01;
    11e2:	0006      	movs	r6, r0
    11e4:	4326      	orrs	r6, r4
    11e6:	0032      	movs	r2, r6
    11e8:	002b      	movs	r3, r5
		if (r >= d) {
    11ea:	9c00      	ldr	r4, [sp, #0]
    11ec:	9d01      	ldr	r5, [sp, #4]
    11ee:	429d      	cmp	r5, r3
    11f0:	d8db      	bhi.n	11aa <long_division+0x56>
    11f2:	d1ce      	bne.n	1192 <long_division+0x3e>
    11f4:	4294      	cmp	r4, r2
    11f6:	d8d8      	bhi.n	11aa <long_division+0x56>
    11f8:	e7cb      	b.n	1192 <long_division+0x3e>
    11fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    11fc:	4658      	mov	r0, fp
    11fe:	0019      	movs	r1, r3
    1200:	b007      	add	sp, #28
    1202:	bc3c      	pop	{r2, r3, r4, r5}
    1204:	4690      	mov	r8, r2
    1206:	4699      	mov	r9, r3
    1208:	46a2      	mov	sl, r4
    120a:	46ab      	mov	fp, r5
    120c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000120e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    120e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1210:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1212:	2340      	movs	r3, #64	; 0x40
    1214:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1216:	4281      	cmp	r1, r0
    1218:	d202      	bcs.n	1220 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    121a:	0018      	movs	r0, r3
    121c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    121e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1220:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1222:	1c63      	adds	r3, r4, #1
    1224:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1226:	4288      	cmp	r0, r1
    1228:	d9f9      	bls.n	121e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    122a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    122c:	2cff      	cmp	r4, #255	; 0xff
    122e:	d8f4      	bhi.n	121a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1230:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1232:	2300      	movs	r3, #0
    1234:	e7f1      	b.n	121a <_sercom_get_sync_baud_val+0xc>
	...

00001238 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1238:	b5f0      	push	{r4, r5, r6, r7, lr}
    123a:	b083      	sub	sp, #12
    123c:	000f      	movs	r7, r1
    123e:	0016      	movs	r6, r2
    1240:	aa08      	add	r2, sp, #32
    1242:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1244:	0004      	movs	r4, r0
    1246:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1248:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    124a:	42bc      	cmp	r4, r7
    124c:	d902      	bls.n	1254 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    124e:	0010      	movs	r0, r2
    1250:	b003      	add	sp, #12
    1252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1254:	2b00      	cmp	r3, #0
    1256:	d114      	bne.n	1282 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1258:	0002      	movs	r2, r0
    125a:	0008      	movs	r0, r1
    125c:	2100      	movs	r1, #0
    125e:	4c19      	ldr	r4, [pc, #100]	; (12c4 <_sercom_get_async_baud_val+0x8c>)
    1260:	47a0      	blx	r4
    1262:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1264:	003a      	movs	r2, r7
    1266:	2300      	movs	r3, #0
    1268:	2000      	movs	r0, #0
    126a:	4c17      	ldr	r4, [pc, #92]	; (12c8 <_sercom_get_async_baud_val+0x90>)
    126c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    126e:	2200      	movs	r2, #0
    1270:	2301      	movs	r3, #1
    1272:	1a12      	subs	r2, r2, r0
    1274:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1276:	0c12      	lsrs	r2, r2, #16
    1278:	041b      	lsls	r3, r3, #16
    127a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    127c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    127e:	2200      	movs	r2, #0
    1280:	e7e5      	b.n	124e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1282:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1284:	2b01      	cmp	r3, #1
    1286:	d1f9      	bne.n	127c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1288:	000a      	movs	r2, r1
    128a:	2300      	movs	r3, #0
    128c:	2100      	movs	r1, #0
    128e:	4c0d      	ldr	r4, [pc, #52]	; (12c4 <_sercom_get_async_baud_val+0x8c>)
    1290:	47a0      	blx	r4
    1292:	0002      	movs	r2, r0
    1294:	000b      	movs	r3, r1
    1296:	9200      	str	r2, [sp, #0]
    1298:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    129a:	0038      	movs	r0, r7
    129c:	2100      	movs	r1, #0
    129e:	4c0a      	ldr	r4, [pc, #40]	; (12c8 <_sercom_get_async_baud_val+0x90>)
    12a0:	47a0      	blx	r4
    12a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    12a4:	2380      	movs	r3, #128	; 0x80
    12a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    12aa:	4298      	cmp	r0, r3
    12ac:	d8cf      	bhi.n	124e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    12ae:	0f79      	lsrs	r1, r7, #29
    12b0:	00f8      	lsls	r0, r7, #3
    12b2:	9a00      	ldr	r2, [sp, #0]
    12b4:	9b01      	ldr	r3, [sp, #4]
    12b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    12b8:	00ea      	lsls	r2, r5, #3
    12ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    12bc:	b2d2      	uxtb	r2, r2
    12be:	0352      	lsls	r2, r2, #13
    12c0:	432a      	orrs	r2, r5
    12c2:	e7db      	b.n	127c <_sercom_get_async_baud_val+0x44>
    12c4:	0000327d 	.word	0x0000327d
    12c8:	00001155 	.word	0x00001155

000012cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    12cc:	b510      	push	{r4, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <sercom_set_gclk_generator+0x40>)
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d007      	beq.n	12ea <sercom_set_gclk_generator+0x1e>
    12da:	2900      	cmp	r1, #0
    12dc:	d105      	bne.n	12ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    12de:	4b0b      	ldr	r3, [pc, #44]	; (130c <sercom_set_gclk_generator+0x40>)
    12e0:	785b      	ldrb	r3, [r3, #1]
    12e2:	4283      	cmp	r3, r0
    12e4:	d010      	beq.n	1308 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    12e6:	201d      	movs	r0, #29
    12e8:	e00c      	b.n	1304 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    12ea:	a901      	add	r1, sp, #4
    12ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    12ee:	2013      	movs	r0, #19
    12f0:	4b07      	ldr	r3, [pc, #28]	; (1310 <sercom_set_gclk_generator+0x44>)
    12f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    12f4:	2013      	movs	r0, #19
    12f6:	4b07      	ldr	r3, [pc, #28]	; (1314 <sercom_set_gclk_generator+0x48>)
    12f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    12fa:	4b04      	ldr	r3, [pc, #16]	; (130c <sercom_set_gclk_generator+0x40>)
    12fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    12fe:	2201      	movs	r2, #1
    1300:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1302:	2000      	movs	r0, #0
}
    1304:	b002      	add	sp, #8
    1306:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1308:	2000      	movs	r0, #0
    130a:	e7fb      	b.n	1304 <sercom_set_gclk_generator+0x38>
    130c:	200000a0 	.word	0x200000a0
    1310:	000026fd 	.word	0x000026fd
    1314:	00002671 	.word	0x00002671

00001318 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1318:	4b40      	ldr	r3, [pc, #256]	; (141c <_sercom_get_default_pad+0x104>)
    131a:	4298      	cmp	r0, r3
    131c:	d031      	beq.n	1382 <_sercom_get_default_pad+0x6a>
    131e:	d90a      	bls.n	1336 <_sercom_get_default_pad+0x1e>
    1320:	4b3f      	ldr	r3, [pc, #252]	; (1420 <_sercom_get_default_pad+0x108>)
    1322:	4298      	cmp	r0, r3
    1324:	d04d      	beq.n	13c2 <_sercom_get_default_pad+0xaa>
    1326:	4b3f      	ldr	r3, [pc, #252]	; (1424 <_sercom_get_default_pad+0x10c>)
    1328:	4298      	cmp	r0, r3
    132a:	d05a      	beq.n	13e2 <_sercom_get_default_pad+0xca>
    132c:	4b3e      	ldr	r3, [pc, #248]	; (1428 <_sercom_get_default_pad+0x110>)
    132e:	4298      	cmp	r0, r3
    1330:	d037      	beq.n	13a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1332:	2000      	movs	r0, #0
}
    1334:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1336:	4b3d      	ldr	r3, [pc, #244]	; (142c <_sercom_get_default_pad+0x114>)
    1338:	4298      	cmp	r0, r3
    133a:	d00c      	beq.n	1356 <_sercom_get_default_pad+0x3e>
    133c:	4b3c      	ldr	r3, [pc, #240]	; (1430 <_sercom_get_default_pad+0x118>)
    133e:	4298      	cmp	r0, r3
    1340:	d1f7      	bne.n	1332 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1342:	2901      	cmp	r1, #1
    1344:	d017      	beq.n	1376 <_sercom_get_default_pad+0x5e>
    1346:	2900      	cmp	r1, #0
    1348:	d05d      	beq.n	1406 <_sercom_get_default_pad+0xee>
    134a:	2902      	cmp	r1, #2
    134c:	d015      	beq.n	137a <_sercom_get_default_pad+0x62>
    134e:	2903      	cmp	r1, #3
    1350:	d015      	beq.n	137e <_sercom_get_default_pad+0x66>
	return 0;
    1352:	2000      	movs	r0, #0
    1354:	e7ee      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1356:	2901      	cmp	r1, #1
    1358:	d007      	beq.n	136a <_sercom_get_default_pad+0x52>
    135a:	2900      	cmp	r1, #0
    135c:	d051      	beq.n	1402 <_sercom_get_default_pad+0xea>
    135e:	2902      	cmp	r1, #2
    1360:	d005      	beq.n	136e <_sercom_get_default_pad+0x56>
    1362:	2903      	cmp	r1, #3
    1364:	d005      	beq.n	1372 <_sercom_get_default_pad+0x5a>
	return 0;
    1366:	2000      	movs	r0, #0
    1368:	e7e4      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    136a:	4832      	ldr	r0, [pc, #200]	; (1434 <_sercom_get_default_pad+0x11c>)
    136c:	e7e2      	b.n	1334 <_sercom_get_default_pad+0x1c>
    136e:	4832      	ldr	r0, [pc, #200]	; (1438 <_sercom_get_default_pad+0x120>)
    1370:	e7e0      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1372:	4832      	ldr	r0, [pc, #200]	; (143c <_sercom_get_default_pad+0x124>)
    1374:	e7de      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1376:	4832      	ldr	r0, [pc, #200]	; (1440 <_sercom_get_default_pad+0x128>)
    1378:	e7dc      	b.n	1334 <_sercom_get_default_pad+0x1c>
    137a:	4832      	ldr	r0, [pc, #200]	; (1444 <_sercom_get_default_pad+0x12c>)
    137c:	e7da      	b.n	1334 <_sercom_get_default_pad+0x1c>
    137e:	4832      	ldr	r0, [pc, #200]	; (1448 <_sercom_get_default_pad+0x130>)
    1380:	e7d8      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1382:	2901      	cmp	r1, #1
    1384:	d007      	beq.n	1396 <_sercom_get_default_pad+0x7e>
    1386:	2900      	cmp	r1, #0
    1388:	d03f      	beq.n	140a <_sercom_get_default_pad+0xf2>
    138a:	2902      	cmp	r1, #2
    138c:	d005      	beq.n	139a <_sercom_get_default_pad+0x82>
    138e:	2903      	cmp	r1, #3
    1390:	d005      	beq.n	139e <_sercom_get_default_pad+0x86>
	return 0;
    1392:	2000      	movs	r0, #0
    1394:	e7ce      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1396:	482d      	ldr	r0, [pc, #180]	; (144c <_sercom_get_default_pad+0x134>)
    1398:	e7cc      	b.n	1334 <_sercom_get_default_pad+0x1c>
    139a:	482d      	ldr	r0, [pc, #180]	; (1450 <_sercom_get_default_pad+0x138>)
    139c:	e7ca      	b.n	1334 <_sercom_get_default_pad+0x1c>
    139e:	482d      	ldr	r0, [pc, #180]	; (1454 <_sercom_get_default_pad+0x13c>)
    13a0:	e7c8      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13a2:	2901      	cmp	r1, #1
    13a4:	d007      	beq.n	13b6 <_sercom_get_default_pad+0x9e>
    13a6:	2900      	cmp	r1, #0
    13a8:	d031      	beq.n	140e <_sercom_get_default_pad+0xf6>
    13aa:	2902      	cmp	r1, #2
    13ac:	d005      	beq.n	13ba <_sercom_get_default_pad+0xa2>
    13ae:	2903      	cmp	r1, #3
    13b0:	d005      	beq.n	13be <_sercom_get_default_pad+0xa6>
	return 0;
    13b2:	2000      	movs	r0, #0
    13b4:	e7be      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13b6:	4828      	ldr	r0, [pc, #160]	; (1458 <_sercom_get_default_pad+0x140>)
    13b8:	e7bc      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13ba:	4828      	ldr	r0, [pc, #160]	; (145c <_sercom_get_default_pad+0x144>)
    13bc:	e7ba      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13be:	4828      	ldr	r0, [pc, #160]	; (1460 <_sercom_get_default_pad+0x148>)
    13c0:	e7b8      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13c2:	2901      	cmp	r1, #1
    13c4:	d007      	beq.n	13d6 <_sercom_get_default_pad+0xbe>
    13c6:	2900      	cmp	r1, #0
    13c8:	d023      	beq.n	1412 <_sercom_get_default_pad+0xfa>
    13ca:	2902      	cmp	r1, #2
    13cc:	d005      	beq.n	13da <_sercom_get_default_pad+0xc2>
    13ce:	2903      	cmp	r1, #3
    13d0:	d005      	beq.n	13de <_sercom_get_default_pad+0xc6>
	return 0;
    13d2:	2000      	movs	r0, #0
    13d4:	e7ae      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13d6:	4823      	ldr	r0, [pc, #140]	; (1464 <_sercom_get_default_pad+0x14c>)
    13d8:	e7ac      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13da:	4823      	ldr	r0, [pc, #140]	; (1468 <_sercom_get_default_pad+0x150>)
    13dc:	e7aa      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13de:	4823      	ldr	r0, [pc, #140]	; (146c <_sercom_get_default_pad+0x154>)
    13e0:	e7a8      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13e2:	2901      	cmp	r1, #1
    13e4:	d007      	beq.n	13f6 <_sercom_get_default_pad+0xde>
    13e6:	2900      	cmp	r1, #0
    13e8:	d015      	beq.n	1416 <_sercom_get_default_pad+0xfe>
    13ea:	2902      	cmp	r1, #2
    13ec:	d005      	beq.n	13fa <_sercom_get_default_pad+0xe2>
    13ee:	2903      	cmp	r1, #3
    13f0:	d005      	beq.n	13fe <_sercom_get_default_pad+0xe6>
	return 0;
    13f2:	2000      	movs	r0, #0
    13f4:	e79e      	b.n	1334 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13f6:	481e      	ldr	r0, [pc, #120]	; (1470 <_sercom_get_default_pad+0x158>)
    13f8:	e79c      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13fa:	481e      	ldr	r0, [pc, #120]	; (1474 <_sercom_get_default_pad+0x15c>)
    13fc:	e79a      	b.n	1334 <_sercom_get_default_pad+0x1c>
    13fe:	481e      	ldr	r0, [pc, #120]	; (1478 <_sercom_get_default_pad+0x160>)
    1400:	e798      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1402:	481e      	ldr	r0, [pc, #120]	; (147c <_sercom_get_default_pad+0x164>)
    1404:	e796      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1406:	2003      	movs	r0, #3
    1408:	e794      	b.n	1334 <_sercom_get_default_pad+0x1c>
    140a:	481d      	ldr	r0, [pc, #116]	; (1480 <_sercom_get_default_pad+0x168>)
    140c:	e792      	b.n	1334 <_sercom_get_default_pad+0x1c>
    140e:	481d      	ldr	r0, [pc, #116]	; (1484 <_sercom_get_default_pad+0x16c>)
    1410:	e790      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1412:	481d      	ldr	r0, [pc, #116]	; (1488 <_sercom_get_default_pad+0x170>)
    1414:	e78e      	b.n	1334 <_sercom_get_default_pad+0x1c>
    1416:	481d      	ldr	r0, [pc, #116]	; (148c <_sercom_get_default_pad+0x174>)
    1418:	e78c      	b.n	1334 <_sercom_get_default_pad+0x1c>
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	42001000 	.word	0x42001000
    1420:	42001800 	.word	0x42001800
    1424:	42001c00 	.word	0x42001c00
    1428:	42001400 	.word	0x42001400
    142c:	42000800 	.word	0x42000800
    1430:	42000c00 	.word	0x42000c00
    1434:	00050003 	.word	0x00050003
    1438:	00060003 	.word	0x00060003
    143c:	00070003 	.word	0x00070003
    1440:	00010003 	.word	0x00010003
    1444:	001e0003 	.word	0x001e0003
    1448:	001f0003 	.word	0x001f0003
    144c:	00090003 	.word	0x00090003
    1450:	000a0003 	.word	0x000a0003
    1454:	000b0003 	.word	0x000b0003
    1458:	00110003 	.word	0x00110003
    145c:	00120003 	.word	0x00120003
    1460:	00130003 	.word	0x00130003
    1464:	000d0003 	.word	0x000d0003
    1468:	000e0003 	.word	0x000e0003
    146c:	000f0003 	.word	0x000f0003
    1470:	00170003 	.word	0x00170003
    1474:	00180003 	.word	0x00180003
    1478:	00190003 	.word	0x00190003
    147c:	00040003 	.word	0x00040003
    1480:	00080003 	.word	0x00080003
    1484:	00100003 	.word	0x00100003
    1488:	000c0003 	.word	0x000c0003
    148c:	00160003 	.word	0x00160003

00001490 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1490:	b530      	push	{r4, r5, lr}
    1492:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1494:	4b0b      	ldr	r3, [pc, #44]	; (14c4 <_sercom_get_sercom_inst_index+0x34>)
    1496:	466a      	mov	r2, sp
    1498:	cb32      	ldmia	r3!, {r1, r4, r5}
    149a:	c232      	stmia	r2!, {r1, r4, r5}
    149c:	cb32      	ldmia	r3!, {r1, r4, r5}
    149e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    14a0:	9b00      	ldr	r3, [sp, #0]
    14a2:	4283      	cmp	r3, r0
    14a4:	d00b      	beq.n	14be <_sercom_get_sercom_inst_index+0x2e>
    14a6:	2301      	movs	r3, #1
    14a8:	009a      	lsls	r2, r3, #2
    14aa:	4669      	mov	r1, sp
    14ac:	5852      	ldr	r2, [r2, r1]
    14ae:	4282      	cmp	r2, r0
    14b0:	d006      	beq.n	14c0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14b2:	3301      	adds	r3, #1
    14b4:	2b06      	cmp	r3, #6
    14b6:	d1f7      	bne.n	14a8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    14b8:	2000      	movs	r0, #0
}
    14ba:	b007      	add	sp, #28
    14bc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14be:	2300      	movs	r3, #0
			return i;
    14c0:	b2d8      	uxtb	r0, r3
    14c2:	e7fa      	b.n	14ba <_sercom_get_sercom_inst_index+0x2a>
    14c4:	00003f50 	.word	0x00003f50

000014c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    14c8:	4770      	bx	lr
	...

000014cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    14cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    14ce:	4b0a      	ldr	r3, [pc, #40]	; (14f8 <_sercom_set_handler+0x2c>)
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d10c      	bne.n	14f0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14d6:	4f09      	ldr	r7, [pc, #36]	; (14fc <_sercom_set_handler+0x30>)
    14d8:	4e09      	ldr	r6, [pc, #36]	; (1500 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    14da:	4d0a      	ldr	r5, [pc, #40]	; (1504 <_sercom_set_handler+0x38>)
    14dc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14de:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    14e0:	195a      	adds	r2, r3, r5
    14e2:	6014      	str	r4, [r2, #0]
    14e4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14e6:	2b18      	cmp	r3, #24
    14e8:	d1f9      	bne.n	14de <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    14ea:	2201      	movs	r2, #1
    14ec:	4b02      	ldr	r3, [pc, #8]	; (14f8 <_sercom_set_handler+0x2c>)
    14ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    14f0:	0080      	lsls	r0, r0, #2
    14f2:	4b02      	ldr	r3, [pc, #8]	; (14fc <_sercom_set_handler+0x30>)
    14f4:	50c1      	str	r1, [r0, r3]
}
    14f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f8:	200000a2 	.word	0x200000a2
    14fc:	200000a4 	.word	0x200000a4
    1500:	000014c9 	.word	0x000014c9
    1504:	200005e8 	.word	0x200005e8

00001508 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1508:	b500      	push	{lr}
    150a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    150c:	2309      	movs	r3, #9
    150e:	466a      	mov	r2, sp
    1510:	7013      	strb	r3, [r2, #0]
    1512:	3301      	adds	r3, #1
    1514:	7053      	strb	r3, [r2, #1]
    1516:	3301      	adds	r3, #1
    1518:	7093      	strb	r3, [r2, #2]
    151a:	3301      	adds	r3, #1
    151c:	70d3      	strb	r3, [r2, #3]
    151e:	3301      	adds	r3, #1
    1520:	7113      	strb	r3, [r2, #4]
    1522:	3301      	adds	r3, #1
    1524:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1526:	4b03      	ldr	r3, [pc, #12]	; (1534 <_sercom_get_interrupt_vector+0x2c>)
    1528:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    152a:	466b      	mov	r3, sp
    152c:	5618      	ldrsb	r0, [r3, r0]
}
    152e:	b003      	add	sp, #12
    1530:	bd00      	pop	{pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	00001491 	.word	0x00001491

00001538 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1538:	b510      	push	{r4, lr}
    153a:	4b02      	ldr	r3, [pc, #8]	; (1544 <SERCOM0_Handler+0xc>)
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	2000      	movs	r0, #0
    1540:	4798      	blx	r3
    1542:	bd10      	pop	{r4, pc}
    1544:	200000a4 	.word	0x200000a4

00001548 <SERCOM1_Handler>:
    1548:	b510      	push	{r4, lr}
    154a:	4b02      	ldr	r3, [pc, #8]	; (1554 <SERCOM1_Handler+0xc>)
    154c:	685b      	ldr	r3, [r3, #4]
    154e:	2001      	movs	r0, #1
    1550:	4798      	blx	r3
    1552:	bd10      	pop	{r4, pc}
    1554:	200000a4 	.word	0x200000a4

00001558 <SERCOM2_Handler>:
    1558:	b510      	push	{r4, lr}
    155a:	4b02      	ldr	r3, [pc, #8]	; (1564 <SERCOM2_Handler+0xc>)
    155c:	689b      	ldr	r3, [r3, #8]
    155e:	2002      	movs	r0, #2
    1560:	4798      	blx	r3
    1562:	bd10      	pop	{r4, pc}
    1564:	200000a4 	.word	0x200000a4

00001568 <SERCOM3_Handler>:
    1568:	b510      	push	{r4, lr}
    156a:	4b02      	ldr	r3, [pc, #8]	; (1574 <SERCOM3_Handler+0xc>)
    156c:	68db      	ldr	r3, [r3, #12]
    156e:	2003      	movs	r0, #3
    1570:	4798      	blx	r3
    1572:	bd10      	pop	{r4, pc}
    1574:	200000a4 	.word	0x200000a4

00001578 <SERCOM4_Handler>:
    1578:	b510      	push	{r4, lr}
    157a:	4b02      	ldr	r3, [pc, #8]	; (1584 <SERCOM4_Handler+0xc>)
    157c:	691b      	ldr	r3, [r3, #16]
    157e:	2004      	movs	r0, #4
    1580:	4798      	blx	r3
    1582:	bd10      	pop	{r4, pc}
    1584:	200000a4 	.word	0x200000a4

00001588 <SERCOM5_Handler>:
    1588:	b510      	push	{r4, lr}
    158a:	4b02      	ldr	r3, [pc, #8]	; (1594 <SERCOM5_Handler+0xc>)
    158c:	695b      	ldr	r3, [r3, #20]
    158e:	2005      	movs	r0, #5
    1590:	4798      	blx	r3
    1592:	bd10      	pop	{r4, pc}
    1594:	200000a4 	.word	0x200000a4

00001598 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1598:	b5f0      	push	{r4, r5, r6, r7, lr}
    159a:	b08b      	sub	sp, #44	; 0x2c
    159c:	0005      	movs	r5, r0
    159e:	000c      	movs	r4, r1
    15a0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    15a2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    15a4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    15a6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    15a8:	079b      	lsls	r3, r3, #30
    15aa:	d501      	bpl.n	15b0 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    15ac:	b00b      	add	sp, #44	; 0x2c
    15ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    15b0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    15b2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    15b4:	07db      	lsls	r3, r3, #31
    15b6:	d4f9      	bmi.n	15ac <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15b8:	0008      	movs	r0, r1
    15ba:	4b60      	ldr	r3, [pc, #384]	; (173c <spi_init+0x1a4>)
    15bc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    15be:	4a60      	ldr	r2, [pc, #384]	; (1740 <spi_init+0x1a8>)
    15c0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    15c2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    15c4:	2301      	movs	r3, #1
    15c6:	40bb      	lsls	r3, r7
    15c8:	430b      	orrs	r3, r1
    15ca:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    15cc:	a909      	add	r1, sp, #36	; 0x24
    15ce:	2724      	movs	r7, #36	; 0x24
    15d0:	5df3      	ldrb	r3, [r6, r7]
    15d2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15d4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    15d6:	b2c3      	uxtb	r3, r0
    15d8:	9301      	str	r3, [sp, #4]
    15da:	0018      	movs	r0, r3
    15dc:	4b59      	ldr	r3, [pc, #356]	; (1744 <spi_init+0x1ac>)
    15de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    15e0:	9801      	ldr	r0, [sp, #4]
    15e2:	4b59      	ldr	r3, [pc, #356]	; (1748 <spi_init+0x1b0>)
    15e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    15e6:	5df0      	ldrb	r0, [r6, r7]
    15e8:	2100      	movs	r1, #0
    15ea:	4b58      	ldr	r3, [pc, #352]	; (174c <spi_init+0x1b4>)
    15ec:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    15ee:	7833      	ldrb	r3, [r6, #0]
    15f0:	2b01      	cmp	r3, #1
    15f2:	d038      	beq.n	1666 <spi_init+0xce>
    15f4:	002b      	movs	r3, r5
    15f6:	330c      	adds	r3, #12
    15f8:	0029      	movs	r1, r5
    15fa:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    15fc:	2200      	movs	r2, #0
    15fe:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1600:	428b      	cmp	r3, r1
    1602:	d1fc      	bne.n	15fe <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1604:	2300      	movs	r3, #0
    1606:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1608:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    160a:	2400      	movs	r4, #0
    160c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    160e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1610:	3336      	adds	r3, #54	; 0x36
    1612:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1614:	3301      	adds	r3, #1
    1616:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1618:	3301      	adds	r3, #1
    161a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    161c:	3b35      	subs	r3, #53	; 0x35
    161e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1620:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1622:	6828      	ldr	r0, [r5, #0]
    1624:	4b45      	ldr	r3, [pc, #276]	; (173c <spi_init+0x1a4>)
    1626:	4798      	blx	r3
    1628:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    162a:	4949      	ldr	r1, [pc, #292]	; (1750 <spi_init+0x1b8>)
    162c:	4b49      	ldr	r3, [pc, #292]	; (1754 <spi_init+0x1bc>)
    162e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1630:	00bf      	lsls	r7, r7, #2
    1632:	4b49      	ldr	r3, [pc, #292]	; (1758 <spi_init+0x1c0>)
    1634:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1636:	682f      	ldr	r7, [r5, #0]
    1638:	ab04      	add	r3, sp, #16
    163a:	2280      	movs	r2, #128	; 0x80
    163c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    163e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1640:	3a7f      	subs	r2, #127	; 0x7f
    1642:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1644:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1646:	7833      	ldrb	r3, [r6, #0]
    1648:	2b00      	cmp	r3, #0
    164a:	d102      	bne.n	1652 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    164c:	2200      	movs	r2, #0
    164e:	ab04      	add	r3, sp, #16
    1650:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1652:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1654:	9305      	str	r3, [sp, #20]
    1656:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1658:	9306      	str	r3, [sp, #24]
    165a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    165c:	9307      	str	r3, [sp, #28]
    165e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1660:	9308      	str	r3, [sp, #32]
    1662:	2400      	movs	r4, #0
    1664:	e00b      	b.n	167e <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1666:	6823      	ldr	r3, [r4, #0]
    1668:	220c      	movs	r2, #12
    166a:	4313      	orrs	r3, r2
    166c:	6023      	str	r3, [r4, #0]
    166e:	e7c1      	b.n	15f4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1670:	0038      	movs	r0, r7
    1672:	4b3a      	ldr	r3, [pc, #232]	; (175c <spi_init+0x1c4>)
    1674:	4798      	blx	r3
    1676:	e00a      	b.n	168e <spi_init+0xf6>
    1678:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    167a:	2c04      	cmp	r4, #4
    167c:	d010      	beq.n	16a0 <spi_init+0x108>
    167e:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1680:	00a3      	lsls	r3, r4, #2
    1682:	aa02      	add	r2, sp, #8
    1684:	200c      	movs	r0, #12
    1686:	1812      	adds	r2, r2, r0
    1688:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    168a:	2800      	cmp	r0, #0
    168c:	d0f0      	beq.n	1670 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    168e:	1c43      	adds	r3, r0, #1
    1690:	d0f2      	beq.n	1678 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1692:	a904      	add	r1, sp, #16
    1694:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1696:	0c00      	lsrs	r0, r0, #16
    1698:	b2c0      	uxtb	r0, r0
    169a:	4b31      	ldr	r3, [pc, #196]	; (1760 <spi_init+0x1c8>)
    169c:	4798      	blx	r3
    169e:	e7eb      	b.n	1678 <spi_init+0xe0>
	module->mode             = config->mode;
    16a0:	7833      	ldrb	r3, [r6, #0]
    16a2:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    16a4:	7c33      	ldrb	r3, [r6, #16]
    16a6:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    16a8:	7cb3      	ldrb	r3, [r6, #18]
    16aa:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    16ac:	7d33      	ldrb	r3, [r6, #20]
    16ae:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    16b0:	2200      	movs	r2, #0
    16b2:	ab02      	add	r3, sp, #8
    16b4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    16b6:	7833      	ldrb	r3, [r6, #0]
    16b8:	2b01      	cmp	r3, #1
    16ba:	d028      	beq.n	170e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    16bc:	6873      	ldr	r3, [r6, #4]
    16be:	68b2      	ldr	r2, [r6, #8]
    16c0:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    16c2:	68f2      	ldr	r2, [r6, #12]
    16c4:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    16c6:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    16c8:	7c72      	ldrb	r2, [r6, #17]
    16ca:	2a00      	cmp	r2, #0
    16cc:	d103      	bne.n	16d6 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    16ce:	4a25      	ldr	r2, [pc, #148]	; (1764 <spi_init+0x1cc>)
    16d0:	7892      	ldrb	r2, [r2, #2]
    16d2:	0792      	lsls	r2, r2, #30
    16d4:	d501      	bpl.n	16da <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    16d6:	2280      	movs	r2, #128	; 0x80
    16d8:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    16da:	7cb2      	ldrb	r2, [r6, #18]
    16dc:	2a00      	cmp	r2, #0
    16de:	d002      	beq.n	16e6 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    16e0:	2280      	movs	r2, #128	; 0x80
    16e2:	0292      	lsls	r2, r2, #10
    16e4:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    16e6:	7cf2      	ldrb	r2, [r6, #19]
    16e8:	2a00      	cmp	r2, #0
    16ea:	d002      	beq.n	16f2 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    16ec:	2280      	movs	r2, #128	; 0x80
    16ee:	0092      	lsls	r2, r2, #2
    16f0:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    16f2:	7d32      	ldrb	r2, [r6, #20]
    16f4:	2a00      	cmp	r2, #0
    16f6:	d002      	beq.n	16fe <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    16f8:	2280      	movs	r2, #128	; 0x80
    16fa:	0192      	lsls	r2, r2, #6
    16fc:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    16fe:	683a      	ldr	r2, [r7, #0]
    1700:	4313      	orrs	r3, r2
    1702:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	430b      	orrs	r3, r1
    1708:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    170a:	2000      	movs	r0, #0
    170c:	e74e      	b.n	15ac <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    170e:	6828      	ldr	r0, [r5, #0]
    1710:	4b0a      	ldr	r3, [pc, #40]	; (173c <spi_init+0x1a4>)
    1712:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1714:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1716:	b2c0      	uxtb	r0, r0
    1718:	4b13      	ldr	r3, [pc, #76]	; (1768 <spi_init+0x1d0>)
    171a:	4798      	blx	r3
    171c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    171e:	ab02      	add	r3, sp, #8
    1720:	1d9a      	adds	r2, r3, #6
    1722:	69b0      	ldr	r0, [r6, #24]
    1724:	4b11      	ldr	r3, [pc, #68]	; (176c <spi_init+0x1d4>)
    1726:	4798      	blx	r3
    1728:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    172a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    172c:	2b00      	cmp	r3, #0
    172e:	d000      	beq.n	1732 <spi_init+0x19a>
    1730:	e73c      	b.n	15ac <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1732:	ab02      	add	r3, sp, #8
    1734:	3306      	adds	r3, #6
    1736:	781b      	ldrb	r3, [r3, #0]
    1738:	733b      	strb	r3, [r7, #12]
    173a:	e7bf      	b.n	16bc <spi_init+0x124>
    173c:	00001491 	.word	0x00001491
    1740:	40000400 	.word	0x40000400
    1744:	000026fd 	.word	0x000026fd
    1748:	00002671 	.word	0x00002671
    174c:	000012cd 	.word	0x000012cd
    1750:	00001865 	.word	0x00001865
    1754:	000014cd 	.word	0x000014cd
    1758:	200005e8 	.word	0x200005e8
    175c:	00001319 	.word	0x00001319
    1760:	000027f5 	.word	0x000027f5
    1764:	41002000 	.word	0x41002000
    1768:	00002719 	.word	0x00002719
    176c:	0000120f 	.word	0x0000120f

00001770 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1770:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1772:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1774:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1776:	2c01      	cmp	r4, #1
    1778:	d001      	beq.n	177e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    177a:	0018      	movs	r0, r3
    177c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    177e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1780:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1782:	2c00      	cmp	r4, #0
    1784:	d1f9      	bne.n	177a <spi_select_slave+0xa>
		if (select) {
    1786:	2a00      	cmp	r2, #0
    1788:	d058      	beq.n	183c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    178a:	784b      	ldrb	r3, [r1, #1]
    178c:	2b00      	cmp	r3, #0
    178e:	d044      	beq.n	181a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1790:	6803      	ldr	r3, [r0, #0]
    1792:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1794:	07db      	lsls	r3, r3, #31
    1796:	d410      	bmi.n	17ba <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1798:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    179a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    179c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    179e:	2900      	cmp	r1, #0
    17a0:	d104      	bne.n	17ac <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    17a2:	0953      	lsrs	r3, r2, #5
    17a4:	01db      	lsls	r3, r3, #7
    17a6:	492e      	ldr	r1, [pc, #184]	; (1860 <spi_select_slave+0xf0>)
    17a8:	468c      	mov	ip, r1
    17aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17ac:	211f      	movs	r1, #31
    17ae:	4011      	ands	r1, r2
    17b0:	2201      	movs	r2, #1
    17b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    17b4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    17b6:	2305      	movs	r3, #5
    17b8:	e7df      	b.n	177a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    17ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17bc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    17be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17c0:	2c00      	cmp	r4, #0
    17c2:	d104      	bne.n	17ce <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    17c4:	0953      	lsrs	r3, r2, #5
    17c6:	01db      	lsls	r3, r3, #7
    17c8:	4c25      	ldr	r4, [pc, #148]	; (1860 <spi_select_slave+0xf0>)
    17ca:	46a4      	mov	ip, r4
    17cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17ce:	241f      	movs	r4, #31
    17d0:	4014      	ands	r4, r2
    17d2:	2201      	movs	r2, #1
    17d4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    17d6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    17d8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    17dc:	07d2      	lsls	r2, r2, #31
    17de:	d501      	bpl.n	17e4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    17e0:	788a      	ldrb	r2, [r1, #2]
    17e2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    17e4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    17e6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    17e8:	2a00      	cmp	r2, #0
    17ea:	d1c6      	bne.n	177a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17ec:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    17ee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    17f0:	7e13      	ldrb	r3, [r2, #24]
    17f2:	420b      	tst	r3, r1
    17f4:	d0fc      	beq.n	17f0 <spi_select_slave+0x80>
    17f6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    17f8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    17fa:	0749      	lsls	r1, r1, #29
    17fc:	d5bd      	bpl.n	177a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17fe:	8b53      	ldrh	r3, [r2, #26]
    1800:	075b      	lsls	r3, r3, #29
    1802:	d501      	bpl.n	1808 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1804:	2304      	movs	r3, #4
    1806:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1808:	7983      	ldrb	r3, [r0, #6]
    180a:	2b01      	cmp	r3, #1
    180c:	d002      	beq.n	1814 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    180e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1810:	2300      	movs	r3, #0
    1812:	e7b2      	b.n	177a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1814:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1816:	2300      	movs	r3, #0
    1818:	e7af      	b.n	177a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    181a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    181c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    181e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1820:	2900      	cmp	r1, #0
    1822:	d104      	bne.n	182e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1824:	0953      	lsrs	r3, r2, #5
    1826:	01db      	lsls	r3, r3, #7
    1828:	490d      	ldr	r1, [pc, #52]	; (1860 <spi_select_slave+0xf0>)
    182a:	468c      	mov	ip, r1
    182c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    182e:	211f      	movs	r1, #31
    1830:	4011      	ands	r1, r2
    1832:	2201      	movs	r2, #1
    1834:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1836:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1838:	2300      	movs	r3, #0
    183a:	e79e      	b.n	177a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    183c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    183e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1840:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1842:	2900      	cmp	r1, #0
    1844:	d104      	bne.n	1850 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1846:	0953      	lsrs	r3, r2, #5
    1848:	01db      	lsls	r3, r3, #7
    184a:	4905      	ldr	r1, [pc, #20]	; (1860 <spi_select_slave+0xf0>)
    184c:	468c      	mov	ip, r1
    184e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1850:	211f      	movs	r1, #31
    1852:	4011      	ands	r1, r2
    1854:	2201      	movs	r2, #1
    1856:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1858:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    185a:	2300      	movs	r3, #0
    185c:	e78d      	b.n	177a <spi_select_slave+0xa>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	41004400 	.word	0x41004400

00001864 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1866:	0080      	lsls	r0, r0, #2
    1868:	4b70      	ldr	r3, [pc, #448]	; (1a2c <_spi_interrupt_handler+0x1c8>)
    186a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    186c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    186e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1870:	5ce7      	ldrb	r7, [r4, r3]
    1872:	2236      	movs	r2, #54	; 0x36
    1874:	5ca2      	ldrb	r2, [r4, r2]
    1876:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1878:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    187a:	7db5      	ldrb	r5, [r6, #22]
    187c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    187e:	07eb      	lsls	r3, r5, #31
    1880:	d502      	bpl.n	1888 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1882:	7963      	ldrb	r3, [r4, #5]
    1884:	2b01      	cmp	r3, #1
    1886:	d01e      	beq.n	18c6 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1888:	076b      	lsls	r3, r5, #29
    188a:	d511      	bpl.n	18b0 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    188c:	8b73      	ldrh	r3, [r6, #26]
    188e:	075b      	lsls	r3, r3, #29
    1890:	d55a      	bpl.n	1948 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1892:	7a63      	ldrb	r3, [r4, #9]
    1894:	2b01      	cmp	r3, #1
    1896:	d008      	beq.n	18aa <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1898:	221e      	movs	r2, #30
    189a:	2338      	movs	r3, #56	; 0x38
    189c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    189e:	3b35      	subs	r3, #53	; 0x35
    18a0:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    18a2:	3302      	adds	r3, #2
    18a4:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    18a6:	073b      	lsls	r3, r7, #28
    18a8:	d44a      	bmi.n	1940 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    18aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    18ac:	2304      	movs	r3, #4
    18ae:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    18b0:	07ab      	lsls	r3, r5, #30
    18b2:	d503      	bpl.n	18bc <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    18b4:	7963      	ldrb	r3, [r4, #5]
    18b6:	2b01      	cmp	r3, #1
    18b8:	d100      	bne.n	18bc <_spi_interrupt_handler+0x58>
    18ba:	e097      	b.n	19ec <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    18bc:	b26d      	sxtb	r5, r5
    18be:	2d00      	cmp	r5, #0
    18c0:	da00      	bge.n	18c4 <_spi_interrupt_handler+0x60>
    18c2:	e0a9      	b.n	1a18 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    18c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    18c6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    18c8:	2b00      	cmp	r3, #0
    18ca:	d022      	beq.n	1912 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    18cc:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    18ce:	2b00      	cmp	r3, #0
    18d0:	d0da      	beq.n	1888 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    18d2:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    18d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    18d6:	7813      	ldrb	r3, [r2, #0]
    18d8:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    18da:	1c50      	adds	r0, r2, #1
    18dc:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18de:	79a0      	ldrb	r0, [r4, #6]
    18e0:	2801      	cmp	r0, #1
    18e2:	d027      	beq.n	1934 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    18e4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    18e6:	05db      	lsls	r3, r3, #23
    18e8:	0ddb      	lsrs	r3, r3, #23
    18ea:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    18ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    18ee:	3b01      	subs	r3, #1
    18f0:	b29b      	uxth	r3, r3
    18f2:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    18f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    18f6:	b29b      	uxth	r3, r3
    18f8:	2b00      	cmp	r3, #0
    18fa:	d1c5      	bne.n	1888 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    18fc:	3301      	adds	r3, #1
    18fe:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1900:	7a63      	ldrb	r3, [r4, #9]
    1902:	2b01      	cmp	r3, #1
    1904:	d1c0      	bne.n	1888 <_spi_interrupt_handler+0x24>
    1906:	79e3      	ldrb	r3, [r4, #7]
    1908:	2b00      	cmp	r3, #0
    190a:	d1bd      	bne.n	1888 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    190c:	3302      	adds	r3, #2
    190e:	75b3      	strb	r3, [r6, #22]
    1910:	e7ba      	b.n	1888 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    1912:	4b47      	ldr	r3, [pc, #284]	; (1a30 <_spi_interrupt_handler+0x1cc>)
    1914:	881b      	ldrh	r3, [r3, #0]
    1916:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1918:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    191a:	3b01      	subs	r3, #1
    191c:	b29b      	uxth	r3, r3
    191e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1920:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1922:	b29b      	uxth	r3, r3
    1924:	2b00      	cmp	r3, #0
    1926:	d101      	bne.n	192c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1928:	3301      	adds	r3, #1
    192a:	7533      	strb	r3, [r6, #20]
		if (0
    192c:	7963      	ldrb	r3, [r4, #5]
    192e:	2b01      	cmp	r3, #1
    1930:	d0cc      	beq.n	18cc <_spi_interrupt_handler+0x68>
    1932:	e7a9      	b.n	1888 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1934:	7850      	ldrb	r0, [r2, #1]
    1936:	0200      	lsls	r0, r0, #8
    1938:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    193a:	3202      	adds	r2, #2
    193c:	62e2      	str	r2, [r4, #44]	; 0x2c
    193e:	e7d2      	b.n	18e6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1940:	0020      	movs	r0, r4
    1942:	69a3      	ldr	r3, [r4, #24]
    1944:	4798      	blx	r3
    1946:	e7b0      	b.n	18aa <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1948:	7a63      	ldrb	r3, [r4, #9]
    194a:	2b01      	cmp	r3, #1
    194c:	d028      	beq.n	19a0 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    194e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1952:	05db      	lsls	r3, r3, #23
    1954:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1956:	b2da      	uxtb	r2, r3
    1958:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    195a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    195c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    195e:	1c51      	adds	r1, r2, #1
    1960:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1962:	79a1      	ldrb	r1, [r4, #6]
    1964:	2901      	cmp	r1, #1
    1966:	d034      	beq.n	19d2 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1968:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    196a:	3b01      	subs	r3, #1
    196c:	b29b      	uxth	r3, r3
    196e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1970:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1972:	b29b      	uxth	r3, r3
    1974:	2b00      	cmp	r3, #0
    1976:	d000      	beq.n	197a <_spi_interrupt_handler+0x116>
    1978:	e79a      	b.n	18b0 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    197a:	2200      	movs	r2, #0
    197c:	3338      	adds	r3, #56	; 0x38
    197e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1980:	3b34      	subs	r3, #52	; 0x34
    1982:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1984:	7a63      	ldrb	r3, [r4, #9]
    1986:	2b02      	cmp	r3, #2
    1988:	d029      	beq.n	19de <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    198a:	7a63      	ldrb	r3, [r4, #9]
    198c:	2b00      	cmp	r3, #0
    198e:	d000      	beq.n	1992 <_spi_interrupt_handler+0x12e>
    1990:	e78e      	b.n	18b0 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1992:	07bb      	lsls	r3, r7, #30
    1994:	d400      	bmi.n	1998 <_spi_interrupt_handler+0x134>
    1996:	e78b      	b.n	18b0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1998:	0020      	movs	r0, r4
    199a:	6923      	ldr	r3, [r4, #16]
    199c:	4798      	blx	r3
    199e:	e787      	b.n	18b0 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    19a0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    19a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    19a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    19a6:	3b01      	subs	r3, #1
    19a8:	b29b      	uxth	r3, r3
    19aa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    19ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    19ae:	b29b      	uxth	r3, r3
    19b0:	2b00      	cmp	r3, #0
    19b2:	d000      	beq.n	19b6 <_spi_interrupt_handler+0x152>
    19b4:	e77c      	b.n	18b0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    19b6:	3304      	adds	r3, #4
    19b8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    19ba:	2200      	movs	r2, #0
    19bc:	3334      	adds	r3, #52	; 0x34
    19be:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    19c0:	3b35      	subs	r3, #53	; 0x35
    19c2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    19c4:	07fb      	lsls	r3, r7, #31
    19c6:	d400      	bmi.n	19ca <_spi_interrupt_handler+0x166>
    19c8:	e772      	b.n	18b0 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    19ca:	0020      	movs	r0, r4
    19cc:	68e3      	ldr	r3, [r4, #12]
    19ce:	4798      	blx	r3
    19d0:	e76e      	b.n	18b0 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    19d2:	0a1b      	lsrs	r3, r3, #8
    19d4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    19d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19d8:	3301      	adds	r3, #1
    19da:	62a3      	str	r3, [r4, #40]	; 0x28
    19dc:	e7c4      	b.n	1968 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    19de:	077b      	lsls	r3, r7, #29
    19e0:	d400      	bmi.n	19e4 <_spi_interrupt_handler+0x180>
    19e2:	e765      	b.n	18b0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    19e4:	0020      	movs	r0, r4
    19e6:	6963      	ldr	r3, [r4, #20]
    19e8:	4798      	blx	r3
    19ea:	e761      	b.n	18b0 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    19ec:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    19ee:	2b01      	cmp	r3, #1
    19f0:	d000      	beq.n	19f4 <_spi_interrupt_handler+0x190>
    19f2:	e763      	b.n	18bc <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    19f4:	79e3      	ldrb	r3, [r4, #7]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d000      	beq.n	19fc <_spi_interrupt_handler+0x198>
    19fa:	e75f      	b.n	18bc <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    19fc:	3302      	adds	r3, #2
    19fe:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1a00:	3301      	adds	r3, #1
    1a02:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1a04:	2200      	movs	r2, #0
    1a06:	3335      	adds	r3, #53	; 0x35
    1a08:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1a0a:	07fb      	lsls	r3, r7, #31
    1a0c:	d400      	bmi.n	1a10 <_spi_interrupt_handler+0x1ac>
    1a0e:	e755      	b.n	18bc <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1a10:	0020      	movs	r0, r4
    1a12:	68e3      	ldr	r3, [r4, #12]
    1a14:	4798      	blx	r3
    1a16:	e751      	b.n	18bc <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1a18:	2380      	movs	r3, #128	; 0x80
    1a1a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1a1c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1a1e:	067b      	lsls	r3, r7, #25
    1a20:	d400      	bmi.n	1a24 <_spi_interrupt_handler+0x1c0>
    1a22:	e74f      	b.n	18c4 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a26:	0020      	movs	r0, r4
    1a28:	4798      	blx	r3
}
    1a2a:	e74b      	b.n	18c4 <_spi_interrupt_handler+0x60>
    1a2c:	200005e8 	.word	0x200005e8
    1a30:	20000600 	.word	0x20000600

00001a34 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a36:	46de      	mov	lr, fp
    1a38:	4657      	mov	r7, sl
    1a3a:	464e      	mov	r6, r9
    1a3c:	4645      	mov	r5, r8
    1a3e:	b5e0      	push	{r5, r6, r7, lr}
    1a40:	b091      	sub	sp, #68	; 0x44
    1a42:	0005      	movs	r5, r0
    1a44:	000c      	movs	r4, r1
    1a46:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a48:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a4a:	0008      	movs	r0, r1
    1a4c:	4bbc      	ldr	r3, [pc, #752]	; (1d40 <usart_init+0x30c>)
    1a4e:	4798      	blx	r3
    1a50:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a52:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a54:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a56:	07db      	lsls	r3, r3, #31
    1a58:	d506      	bpl.n	1a68 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1a5a:	b011      	add	sp, #68	; 0x44
    1a5c:	bc3c      	pop	{r2, r3, r4, r5}
    1a5e:	4690      	mov	r8, r2
    1a60:	4699      	mov	r9, r3
    1a62:	46a2      	mov	sl, r4
    1a64:	46ab      	mov	fp, r5
    1a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a68:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1a6a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a6c:	079b      	lsls	r3, r3, #30
    1a6e:	d4f4      	bmi.n	1a5a <usart_init+0x26>
    1a70:	49b4      	ldr	r1, [pc, #720]	; (1d44 <usart_init+0x310>)
    1a72:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1a74:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1a76:	2301      	movs	r3, #1
    1a78:	40bb      	lsls	r3, r7
    1a7a:	4303      	orrs	r3, r0
    1a7c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1a7e:	a90f      	add	r1, sp, #60	; 0x3c
    1a80:	272d      	movs	r7, #45	; 0x2d
    1a82:	5df3      	ldrb	r3, [r6, r7]
    1a84:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a86:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a88:	b2d3      	uxtb	r3, r2
    1a8a:	9302      	str	r3, [sp, #8]
    1a8c:	0018      	movs	r0, r3
    1a8e:	4bae      	ldr	r3, [pc, #696]	; (1d48 <usart_init+0x314>)
    1a90:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1a92:	9802      	ldr	r0, [sp, #8]
    1a94:	4bad      	ldr	r3, [pc, #692]	; (1d4c <usart_init+0x318>)
    1a96:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1a98:	5df0      	ldrb	r0, [r6, r7]
    1a9a:	2100      	movs	r1, #0
    1a9c:	4bac      	ldr	r3, [pc, #688]	; (1d50 <usart_init+0x31c>)
    1a9e:	4798      	blx	r3
	module->character_size = config->character_size;
    1aa0:	7af3      	ldrb	r3, [r6, #11]
    1aa2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1aa4:	2324      	movs	r3, #36	; 0x24
    1aa6:	5cf3      	ldrb	r3, [r6, r3]
    1aa8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1aaa:	2325      	movs	r3, #37	; 0x25
    1aac:	5cf3      	ldrb	r3, [r6, r3]
    1aae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ab0:	7ef3      	ldrb	r3, [r6, #27]
    1ab2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1ab4:	7f33      	ldrb	r3, [r6, #28]
    1ab6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ab8:	682b      	ldr	r3, [r5, #0]
    1aba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1abc:	0018      	movs	r0, r3
    1abe:	4ba0      	ldr	r3, [pc, #640]	; (1d40 <usart_init+0x30c>)
    1ac0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ac2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1ac4:	2200      	movs	r2, #0
    1ac6:	230e      	movs	r3, #14
    1ac8:	a906      	add	r1, sp, #24
    1aca:	468c      	mov	ip, r1
    1acc:	4463      	add	r3, ip
    1ace:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1ad0:	8a32      	ldrh	r2, [r6, #16]
    1ad2:	9202      	str	r2, [sp, #8]
    1ad4:	2380      	movs	r3, #128	; 0x80
    1ad6:	01db      	lsls	r3, r3, #7
    1ad8:	429a      	cmp	r2, r3
    1ada:	d100      	bne.n	1ade <usart_init+0xaa>
    1adc:	e09e      	b.n	1c1c <usart_init+0x1e8>
    1ade:	d90f      	bls.n	1b00 <usart_init+0xcc>
    1ae0:	23c0      	movs	r3, #192	; 0xc0
    1ae2:	01db      	lsls	r3, r3, #7
    1ae4:	9a02      	ldr	r2, [sp, #8]
    1ae6:	429a      	cmp	r2, r3
    1ae8:	d100      	bne.n	1aec <usart_init+0xb8>
    1aea:	e092      	b.n	1c12 <usart_init+0x1de>
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	021b      	lsls	r3, r3, #8
    1af0:	429a      	cmp	r2, r3
    1af2:	d000      	beq.n	1af6 <usart_init+0xc2>
    1af4:	e11f      	b.n	1d36 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1af6:	2303      	movs	r3, #3
    1af8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1afa:	2300      	movs	r3, #0
    1afc:	9307      	str	r3, [sp, #28]
    1afe:	e008      	b.n	1b12 <usart_init+0xde>
	switch (config->sample_rate) {
    1b00:	2380      	movs	r3, #128	; 0x80
    1b02:	019b      	lsls	r3, r3, #6
    1b04:	429a      	cmp	r2, r3
    1b06:	d000      	beq.n	1b0a <usart_init+0xd6>
    1b08:	e115      	b.n	1d36 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b0a:	2310      	movs	r3, #16
    1b0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b0e:	3b0f      	subs	r3, #15
    1b10:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1b12:	6833      	ldr	r3, [r6, #0]
    1b14:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1b16:	68f3      	ldr	r3, [r6, #12]
    1b18:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1b1a:	6973      	ldr	r3, [r6, #20]
    1b1c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b1e:	7e33      	ldrb	r3, [r6, #24]
    1b20:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b22:	2326      	movs	r3, #38	; 0x26
    1b24:	5cf3      	ldrb	r3, [r6, r3]
    1b26:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1b28:	6873      	ldr	r3, [r6, #4]
    1b2a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d100      	bne.n	1b32 <usart_init+0xfe>
    1b30:	e0a0      	b.n	1c74 <usart_init+0x240>
    1b32:	2380      	movs	r3, #128	; 0x80
    1b34:	055b      	lsls	r3, r3, #21
    1b36:	4599      	cmp	r9, r3
    1b38:	d100      	bne.n	1b3c <usart_init+0x108>
    1b3a:	e084      	b.n	1c46 <usart_init+0x212>
	if(config->encoding_format_enable) {
    1b3c:	7e73      	ldrb	r3, [r6, #25]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d002      	beq.n	1b48 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b42:	7eb3      	ldrb	r3, [r6, #26]
    1b44:	4642      	mov	r2, r8
    1b46:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b48:	682a      	ldr	r2, [r5, #0]
    1b4a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b4c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d1fc      	bne.n	1b4c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1b52:	330e      	adds	r3, #14
    1b54:	aa06      	add	r2, sp, #24
    1b56:	4694      	mov	ip, r2
    1b58:	4463      	add	r3, ip
    1b5a:	881b      	ldrh	r3, [r3, #0]
    1b5c:	4642      	mov	r2, r8
    1b5e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1b60:	9b05      	ldr	r3, [sp, #20]
    1b62:	9a03      	ldr	r2, [sp, #12]
    1b64:	4313      	orrs	r3, r2
    1b66:	9a04      	ldr	r2, [sp, #16]
    1b68:	4313      	orrs	r3, r2
    1b6a:	464a      	mov	r2, r9
    1b6c:	4313      	orrs	r3, r2
    1b6e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b70:	465b      	mov	r3, fp
    1b72:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1b74:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b76:	4653      	mov	r3, sl
    1b78:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1b7a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1b7c:	2327      	movs	r3, #39	; 0x27
    1b7e:	5cf3      	ldrb	r3, [r6, r3]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d101      	bne.n	1b88 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1b84:	3304      	adds	r3, #4
    1b86:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b88:	7e73      	ldrb	r3, [r6, #25]
    1b8a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b8c:	7f32      	ldrb	r2, [r6, #28]
    1b8e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b90:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b92:	7f72      	ldrb	r2, [r6, #29]
    1b94:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b96:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b98:	2224      	movs	r2, #36	; 0x24
    1b9a:	5cb2      	ldrb	r2, [r6, r2]
    1b9c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b9e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1ba0:	2225      	movs	r2, #37	; 0x25
    1ba2:	5cb2      	ldrb	r2, [r6, r2]
    1ba4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1ba6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1ba8:	7ab1      	ldrb	r1, [r6, #10]
    1baa:	7af2      	ldrb	r2, [r6, #11]
    1bac:	4311      	orrs	r1, r2
    1bae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1bb0:	8933      	ldrh	r3, [r6, #8]
    1bb2:	2bff      	cmp	r3, #255	; 0xff
    1bb4:	d100      	bne.n	1bb8 <usart_init+0x184>
    1bb6:	e081      	b.n	1cbc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1bb8:	2280      	movs	r2, #128	; 0x80
    1bba:	0452      	lsls	r2, r2, #17
    1bbc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1bbe:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1bc0:	232c      	movs	r3, #44	; 0x2c
    1bc2:	5cf3      	ldrb	r3, [r6, r3]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d103      	bne.n	1bd0 <usart_init+0x19c>
    1bc8:	4b62      	ldr	r3, [pc, #392]	; (1d54 <usart_init+0x320>)
    1bca:	789b      	ldrb	r3, [r3, #2]
    1bcc:	079b      	lsls	r3, r3, #30
    1bce:	d501      	bpl.n	1bd4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1bd0:	2380      	movs	r3, #128	; 0x80
    1bd2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bd4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bd6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d1fc      	bne.n	1bd6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1bdc:	4643      	mov	r3, r8
    1bde:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1be0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1be2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1be4:	2b00      	cmp	r3, #0
    1be6:	d1fc      	bne.n	1be2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1be8:	4643      	mov	r3, r8
    1bea:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1bec:	ab0e      	add	r3, sp, #56	; 0x38
    1bee:	2280      	movs	r2, #128	; 0x80
    1bf0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1bf2:	2200      	movs	r2, #0
    1bf4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1bf6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1bf8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1bfa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1bfc:	930a      	str	r3, [sp, #40]	; 0x28
    1bfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1c00:	930b      	str	r3, [sp, #44]	; 0x2c
    1c02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1c04:	930c      	str	r3, [sp, #48]	; 0x30
    1c06:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1c08:	9302      	str	r3, [sp, #8]
    1c0a:	930d      	str	r3, [sp, #52]	; 0x34
    1c0c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c0e:	ae0a      	add	r6, sp, #40	; 0x28
    1c10:	e063      	b.n	1cda <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c12:	2308      	movs	r3, #8
    1c14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c16:	3b07      	subs	r3, #7
    1c18:	9307      	str	r3, [sp, #28]
    1c1a:	e77a      	b.n	1b12 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1c1c:	6833      	ldr	r3, [r6, #0]
    1c1e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1c20:	68f3      	ldr	r3, [r6, #12]
    1c22:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1c24:	6973      	ldr	r3, [r6, #20]
    1c26:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c28:	7e33      	ldrb	r3, [r6, #24]
    1c2a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c2c:	2326      	movs	r3, #38	; 0x26
    1c2e:	5cf3      	ldrb	r3, [r6, r3]
    1c30:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1c32:	6873      	ldr	r3, [r6, #4]
    1c34:	4699      	mov	r9, r3
	switch (transfer_mode)
    1c36:	2b00      	cmp	r3, #0
    1c38:	d018      	beq.n	1c6c <usart_init+0x238>
    1c3a:	2380      	movs	r3, #128	; 0x80
    1c3c:	055b      	lsls	r3, r3, #21
    1c3e:	4599      	cmp	r9, r3
    1c40:	d001      	beq.n	1c46 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1c42:	2000      	movs	r0, #0
    1c44:	e025      	b.n	1c92 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1c46:	2327      	movs	r3, #39	; 0x27
    1c48:	5cf3      	ldrb	r3, [r6, r3]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d000      	beq.n	1c50 <usart_init+0x21c>
    1c4e:	e775      	b.n	1b3c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c50:	6a33      	ldr	r3, [r6, #32]
    1c52:	001f      	movs	r7, r3
    1c54:	b2c0      	uxtb	r0, r0
    1c56:	4b40      	ldr	r3, [pc, #256]	; (1d58 <usart_init+0x324>)
    1c58:	4798      	blx	r3
    1c5a:	0001      	movs	r1, r0
    1c5c:	220e      	movs	r2, #14
    1c5e:	ab06      	add	r3, sp, #24
    1c60:	469c      	mov	ip, r3
    1c62:	4462      	add	r2, ip
    1c64:	0038      	movs	r0, r7
    1c66:	4b3d      	ldr	r3, [pc, #244]	; (1d5c <usart_init+0x328>)
    1c68:	4798      	blx	r3
    1c6a:	e012      	b.n	1c92 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c6c:	2308      	movs	r3, #8
    1c6e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c70:	2300      	movs	r3, #0
    1c72:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1c74:	2327      	movs	r3, #39	; 0x27
    1c76:	5cf3      	ldrb	r3, [r6, r3]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d00e      	beq.n	1c9a <usart_init+0x266>
				status_code =
    1c7c:	9b06      	ldr	r3, [sp, #24]
    1c7e:	9300      	str	r3, [sp, #0]
    1c80:	9b07      	ldr	r3, [sp, #28]
    1c82:	220e      	movs	r2, #14
    1c84:	a906      	add	r1, sp, #24
    1c86:	468c      	mov	ip, r1
    1c88:	4462      	add	r2, ip
    1c8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1c8c:	6a30      	ldr	r0, [r6, #32]
    1c8e:	4f34      	ldr	r7, [pc, #208]	; (1d60 <usart_init+0x32c>)
    1c90:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1c92:	2800      	cmp	r0, #0
    1c94:	d000      	beq.n	1c98 <usart_init+0x264>
    1c96:	e6e0      	b.n	1a5a <usart_init+0x26>
    1c98:	e750      	b.n	1b3c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1c9a:	6a33      	ldr	r3, [r6, #32]
    1c9c:	001f      	movs	r7, r3
    1c9e:	b2c0      	uxtb	r0, r0
    1ca0:	4b2d      	ldr	r3, [pc, #180]	; (1d58 <usart_init+0x324>)
    1ca2:	4798      	blx	r3
    1ca4:	0001      	movs	r1, r0
				status_code =
    1ca6:	9b06      	ldr	r3, [sp, #24]
    1ca8:	9300      	str	r3, [sp, #0]
    1caa:	9b07      	ldr	r3, [sp, #28]
    1cac:	220e      	movs	r2, #14
    1cae:	a806      	add	r0, sp, #24
    1cb0:	4684      	mov	ip, r0
    1cb2:	4462      	add	r2, ip
    1cb4:	0038      	movs	r0, r7
    1cb6:	4f2a      	ldr	r7, [pc, #168]	; (1d60 <usart_init+0x32c>)
    1cb8:	47b8      	blx	r7
    1cba:	e7ea      	b.n	1c92 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1cbc:	7ef3      	ldrb	r3, [r6, #27]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d100      	bne.n	1cc4 <usart_init+0x290>
    1cc2:	e77d      	b.n	1bc0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1cc4:	2380      	movs	r3, #128	; 0x80
    1cc6:	04db      	lsls	r3, r3, #19
    1cc8:	431f      	orrs	r7, r3
    1cca:	e779      	b.n	1bc0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1ccc:	0020      	movs	r0, r4
    1cce:	4b25      	ldr	r3, [pc, #148]	; (1d64 <usart_init+0x330>)
    1cd0:	4798      	blx	r3
    1cd2:	e007      	b.n	1ce4 <usart_init+0x2b0>
    1cd4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1cd6:	2f04      	cmp	r7, #4
    1cd8:	d00d      	beq.n	1cf6 <usart_init+0x2c2>
    1cda:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1cdc:	00bb      	lsls	r3, r7, #2
    1cde:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1ce0:	2800      	cmp	r0, #0
    1ce2:	d0f3      	beq.n	1ccc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1ce4:	1c43      	adds	r3, r0, #1
    1ce6:	d0f5      	beq.n	1cd4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1ce8:	a90e      	add	r1, sp, #56	; 0x38
    1cea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1cec:	0c00      	lsrs	r0, r0, #16
    1cee:	b2c0      	uxtb	r0, r0
    1cf0:	4b1d      	ldr	r3, [pc, #116]	; (1d68 <usart_init+0x334>)
    1cf2:	4798      	blx	r3
    1cf4:	e7ee      	b.n	1cd4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1cf6:	2300      	movs	r3, #0
    1cf8:	60eb      	str	r3, [r5, #12]
    1cfa:	612b      	str	r3, [r5, #16]
    1cfc:	616b      	str	r3, [r5, #20]
    1cfe:	61ab      	str	r3, [r5, #24]
    1d00:	61eb      	str	r3, [r5, #28]
    1d02:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1d04:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1d06:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1d08:	2200      	movs	r2, #0
    1d0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1d0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1d0e:	3330      	adds	r3, #48	; 0x30
    1d10:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1d12:	3301      	adds	r3, #1
    1d14:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1d16:	3301      	adds	r3, #1
    1d18:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1d1a:	3301      	adds	r3, #1
    1d1c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1d1e:	6828      	ldr	r0, [r5, #0]
    1d20:	4b07      	ldr	r3, [pc, #28]	; (1d40 <usart_init+0x30c>)
    1d22:	4798      	blx	r3
    1d24:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1d26:	4911      	ldr	r1, [pc, #68]	; (1d6c <usart_init+0x338>)
    1d28:	4b11      	ldr	r3, [pc, #68]	; (1d70 <usart_init+0x33c>)
    1d2a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1d2c:	00a4      	lsls	r4, r4, #2
    1d2e:	4b11      	ldr	r3, [pc, #68]	; (1d74 <usart_init+0x340>)
    1d30:	50e5      	str	r5, [r4, r3]
	return status_code;
    1d32:	2000      	movs	r0, #0
    1d34:	e691      	b.n	1a5a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d36:	2310      	movs	r3, #16
    1d38:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d3a:	2300      	movs	r3, #0
    1d3c:	9307      	str	r3, [sp, #28]
    1d3e:	e6e8      	b.n	1b12 <usart_init+0xde>
    1d40:	00001491 	.word	0x00001491
    1d44:	40000400 	.word	0x40000400
    1d48:	000026fd 	.word	0x000026fd
    1d4c:	00002671 	.word	0x00002671
    1d50:	000012cd 	.word	0x000012cd
    1d54:	41002000 	.word	0x41002000
    1d58:	00002719 	.word	0x00002719
    1d5c:	0000120f 	.word	0x0000120f
    1d60:	00001239 	.word	0x00001239
    1d64:	00001319 	.word	0x00001319
    1d68:	000027f5 	.word	0x000027f5
    1d6c:	00001f25 	.word	0x00001f25
    1d70:	000014cd 	.word	0x000014cd
    1d74:	200005e8 	.word	0x200005e8

00001d78 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d78:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1d7a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1d7c:	2a00      	cmp	r2, #0
    1d7e:	d101      	bne.n	1d84 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1d80:	0018      	movs	r0, r3
    1d82:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1d84:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1d86:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d88:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1d8a:	2a00      	cmp	r2, #0
    1d8c:	d1f8      	bne.n	1d80 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d8e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d90:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d92:	2a00      	cmp	r2, #0
    1d94:	d1fc      	bne.n	1d90 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1d96:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d98:	2102      	movs	r1, #2
    1d9a:	7e1a      	ldrb	r2, [r3, #24]
    1d9c:	420a      	tst	r2, r1
    1d9e:	d0fc      	beq.n	1d9a <usart_write_wait+0x22>
	return STATUS_OK;
    1da0:	2300      	movs	r3, #0
    1da2:	e7ed      	b.n	1d80 <usart_write_wait+0x8>

00001da4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1da4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1da6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1da8:	2a00      	cmp	r2, #0
    1daa:	d101      	bne.n	1db0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1dac:	0018      	movs	r0, r3
    1dae:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1db0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1db2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1db4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1db6:	2a00      	cmp	r2, #0
    1db8:	d1f8      	bne.n	1dac <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dba:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1dbc:	7e10      	ldrb	r0, [r2, #24]
    1dbe:	0740      	lsls	r0, r0, #29
    1dc0:	d5f4      	bpl.n	1dac <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1dc2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d1fc      	bne.n	1dc2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1dc8:	8b53      	ldrh	r3, [r2, #26]
    1dca:	b2db      	uxtb	r3, r3
	if (error_code) {
    1dcc:	0698      	lsls	r0, r3, #26
    1dce:	d01d      	beq.n	1e0c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1dd0:	0798      	lsls	r0, r3, #30
    1dd2:	d503      	bpl.n	1ddc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1dd4:	2302      	movs	r3, #2
    1dd6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1dd8:	3318      	adds	r3, #24
    1dda:	e7e7      	b.n	1dac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ddc:	0758      	lsls	r0, r3, #29
    1dde:	d503      	bpl.n	1de8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1de0:	2304      	movs	r3, #4
    1de2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1de4:	331a      	adds	r3, #26
    1de6:	e7e1      	b.n	1dac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1de8:	07d8      	lsls	r0, r3, #31
    1dea:	d503      	bpl.n	1df4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1dec:	2301      	movs	r3, #1
    1dee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1df0:	3312      	adds	r3, #18
    1df2:	e7db      	b.n	1dac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1df4:	06d8      	lsls	r0, r3, #27
    1df6:	d503      	bpl.n	1e00 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1df8:	2310      	movs	r3, #16
    1dfa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1dfc:	3332      	adds	r3, #50	; 0x32
    1dfe:	e7d5      	b.n	1dac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1e00:	069b      	lsls	r3, r3, #26
    1e02:	d503      	bpl.n	1e0c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1e04:	2320      	movs	r3, #32
    1e06:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1e08:	3321      	adds	r3, #33	; 0x21
    1e0a:	e7cf      	b.n	1dac <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1e0c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1e0e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1e10:	2300      	movs	r3, #0
    1e12:	e7cb      	b.n	1dac <usart_read_wait+0x8>

00001e14 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e16:	0006      	movs	r6, r0
    1e18:	000c      	movs	r4, r1
    1e1a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e1c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1e1e:	4b0a      	ldr	r3, [pc, #40]	; (1e48 <_usart_write_buffer+0x34>)
    1e20:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1e22:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1e24:	b29b      	uxth	r3, r3
    1e26:	2b00      	cmp	r3, #0
    1e28:	d003      	beq.n	1e32 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1e2a:	4b08      	ldr	r3, [pc, #32]	; (1e4c <_usart_write_buffer+0x38>)
    1e2c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1e2e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1e32:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1e34:	4b05      	ldr	r3, [pc, #20]	; (1e4c <_usart_write_buffer+0x38>)
    1e36:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1e38:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1e3a:	2205      	movs	r2, #5
    1e3c:	2333      	movs	r3, #51	; 0x33
    1e3e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1e40:	3b32      	subs	r3, #50	; 0x32
    1e42:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1e44:	2000      	movs	r0, #0
    1e46:	e7f3      	b.n	1e30 <_usart_write_buffer+0x1c>
    1e48:	00000fb1 	.word	0x00000fb1
    1e4c:	00000ff1 	.word	0x00000ff1

00001e50 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e52:	0004      	movs	r4, r0
    1e54:	000d      	movs	r5, r1
    1e56:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e58:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1e5a:	4b0f      	ldr	r3, [pc, #60]	; (1e98 <_usart_read_buffer+0x48>)
    1e5c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1e5e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1e60:	b29b      	uxth	r3, r3
    1e62:	2b00      	cmp	r3, #0
    1e64:	d003      	beq.n	1e6e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1e66:	4b0d      	ldr	r3, [pc, #52]	; (1e9c <_usart_read_buffer+0x4c>)
    1e68:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1e6a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1e6e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1e70:	4b0a      	ldr	r3, [pc, #40]	; (1e9c <_usart_read_buffer+0x4c>)
    1e72:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1e74:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1e76:	2205      	movs	r2, #5
    1e78:	2332      	movs	r3, #50	; 0x32
    1e7a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1e7c:	3b2e      	subs	r3, #46	; 0x2e
    1e7e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1e80:	7a23      	ldrb	r3, [r4, #8]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d001      	beq.n	1e8a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1e86:	2320      	movs	r3, #32
    1e88:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1e8a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1e8c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d0ec      	beq.n	1e6c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1e92:	2308      	movs	r3, #8
    1e94:	75bb      	strb	r3, [r7, #22]
    1e96:	e7e9      	b.n	1e6c <_usart_read_buffer+0x1c>
    1e98:	00000fb1 	.word	0x00000fb1
    1e9c:	00000ff1 	.word	0x00000ff1

00001ea0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1ea0:	1c93      	adds	r3, r2, #2
    1ea2:	009b      	lsls	r3, r3, #2
    1ea4:	18c3      	adds	r3, r0, r3
    1ea6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1ea8:	2130      	movs	r1, #48	; 0x30
    1eaa:	2301      	movs	r3, #1
    1eac:	4093      	lsls	r3, r2
    1eae:	001a      	movs	r2, r3
    1eb0:	5c43      	ldrb	r3, [r0, r1]
    1eb2:	4313      	orrs	r3, r2
    1eb4:	5443      	strb	r3, [r0, r1]
}
    1eb6:	4770      	bx	lr

00001eb8 <usart_write_job>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_job(
		struct usart_module *const module,
		const uint16_t *tx_data)
{
    1eb8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(tx_data);


	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1eba:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1ebc:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1ebe:	2a00      	cmp	r2, #0
    1ec0:	d101      	bne.n	1ec6 <usart_write_job+0xe>
	}

	/* Call internal write buffer function with length 1 */
	return _usart_write_buffer(module, (uint8_t *)tx_data, 1);
}
    1ec2:	0018      	movs	r0, r3
    1ec4:	bd10      	pop	{r4, pc}
	return _usart_write_buffer(module, (uint8_t *)tx_data, 1);
    1ec6:	2201      	movs	r2, #1
    1ec8:	4b01      	ldr	r3, [pc, #4]	; (1ed0 <usart_write_job+0x18>)
    1eca:	4798      	blx	r3
    1ecc:	0003      	movs	r3, r0
    1ece:	e7f8      	b.n	1ec2 <usart_write_job+0xa>
    1ed0:	00001e15 	.word	0x00001e15

00001ed4 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1ed4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    1ed6:	2201      	movs	r2, #1
    1ed8:	4b01      	ldr	r3, [pc, #4]	; (1ee0 <usart_read_job+0xc>)
    1eda:	4798      	blx	r3
}
    1edc:	bd10      	pop	{r4, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00001e51 	.word	0x00001e51

00001ee4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1ee4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1ee6:	2317      	movs	r3, #23
	if (length == 0) {
    1ee8:	2a00      	cmp	r2, #0
    1eea:	d101      	bne.n	1ef0 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1eec:	0018      	movs	r0, r3
    1eee:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    1ef0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1ef2:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    1ef4:	2c00      	cmp	r4, #0
    1ef6:	d0f9      	beq.n	1eec <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1ef8:	4b01      	ldr	r3, [pc, #4]	; (1f00 <usart_write_buffer_job+0x1c>)
    1efa:	4798      	blx	r3
    1efc:	0003      	movs	r3, r0
    1efe:	e7f5      	b.n	1eec <usart_write_buffer_job+0x8>
    1f00:	00001e15 	.word	0x00001e15

00001f04 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1f04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1f06:	2317      	movs	r3, #23
	if (length == 0) {
    1f08:	2a00      	cmp	r2, #0
    1f0a:	d101      	bne.n	1f10 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1f0c:	0018      	movs	r0, r3
    1f0e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1f10:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1f12:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1f14:	2c00      	cmp	r4, #0
    1f16:	d0f9      	beq.n	1f0c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1f18:	4b01      	ldr	r3, [pc, #4]	; (1f20 <usart_read_buffer_job+0x1c>)
    1f1a:	4798      	blx	r3
    1f1c:	0003      	movs	r3, r0
    1f1e:	e7f5      	b.n	1f0c <usart_read_buffer_job+0x8>
    1f20:	00001e51 	.word	0x00001e51

00001f24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f26:	0080      	lsls	r0, r0, #2
    1f28:	4b62      	ldr	r3, [pc, #392]	; (20b4 <STACK_SIZE+0xb4>)
    1f2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f2c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f2e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f30:	2b00      	cmp	r3, #0
    1f32:	d1fc      	bne.n	1f2e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f36:	7da6      	ldrb	r6, [r4, #22]
    1f38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f3a:	2330      	movs	r3, #48	; 0x30
    1f3c:	5ceb      	ldrb	r3, [r5, r3]
    1f3e:	2231      	movs	r2, #49	; 0x31
    1f40:	5caf      	ldrb	r7, [r5, r2]
    1f42:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1f44:	07f3      	lsls	r3, r6, #31
    1f46:	d522      	bpl.n	1f8e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d01c      	beq.n	1f8a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f52:	7813      	ldrb	r3, [r2, #0]
    1f54:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1f56:	1c51      	adds	r1, r2, #1
    1f58:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f5a:	7969      	ldrb	r1, [r5, #5]
    1f5c:	2901      	cmp	r1, #1
    1f5e:	d00e      	beq.n	1f7e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f60:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1f62:	05db      	lsls	r3, r3, #23
    1f64:	0ddb      	lsrs	r3, r3, #23
    1f66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1f68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f6a:	3b01      	subs	r3, #1
    1f6c:	b29b      	uxth	r3, r3
    1f6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1f70:	2b00      	cmp	r3, #0
    1f72:	d10c      	bne.n	1f8e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f74:	3301      	adds	r3, #1
    1f76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1f78:	3301      	adds	r3, #1
    1f7a:	75a3      	strb	r3, [r4, #22]
    1f7c:	e007      	b.n	1f8e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1f7e:	7851      	ldrb	r1, [r2, #1]
    1f80:	0209      	lsls	r1, r1, #8
    1f82:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1f84:	3202      	adds	r2, #2
    1f86:	62aa      	str	r2, [r5, #40]	; 0x28
    1f88:	e7eb      	b.n	1f62 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f8a:	2301      	movs	r3, #1
    1f8c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1f8e:	07b3      	lsls	r3, r6, #30
    1f90:	d506      	bpl.n	1fa0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1f92:	2302      	movs	r3, #2
    1f94:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1f96:	2200      	movs	r2, #0
    1f98:	3331      	adds	r3, #49	; 0x31
    1f9a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1f9c:	07fb      	lsls	r3, r7, #31
    1f9e:	d41a      	bmi.n	1fd6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1fa0:	0773      	lsls	r3, r6, #29
    1fa2:	d565      	bpl.n	2070 <STACK_SIZE+0x70>

		if (module->remaining_rx_buffer_length) {
    1fa4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1fa6:	b29b      	uxth	r3, r3
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d05f      	beq.n	206c <STACK_SIZE+0x6c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1fac:	8b63      	ldrh	r3, [r4, #26]
    1fae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1fb0:	071a      	lsls	r2, r3, #28
    1fb2:	d414      	bmi.n	1fde <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1fb4:	223f      	movs	r2, #63	; 0x3f
    1fb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d034      	beq.n	2026 <STACK_SIZE+0x26>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1fbc:	079a      	lsls	r2, r3, #30
    1fbe:	d511      	bpl.n	1fe4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1fc0:	221a      	movs	r2, #26
    1fc2:	2332      	movs	r3, #50	; 0x32
    1fc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1fc6:	3b30      	subs	r3, #48	; 0x30
    1fc8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1fca:	077b      	lsls	r3, r7, #29
    1fcc:	d550      	bpl.n	2070 <STACK_SIZE+0x70>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1fce:	0028      	movs	r0, r5
    1fd0:	696b      	ldr	r3, [r5, #20]
    1fd2:	4798      	blx	r3
    1fd4:	e04c      	b.n	2070 <STACK_SIZE+0x70>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1fd6:	0028      	movs	r0, r5
    1fd8:	68eb      	ldr	r3, [r5, #12]
    1fda:	4798      	blx	r3
    1fdc:	e7e0      	b.n	1fa0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1fde:	2237      	movs	r2, #55	; 0x37
    1fe0:	4013      	ands	r3, r2
    1fe2:	e7e9      	b.n	1fb8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1fe4:	075a      	lsls	r2, r3, #29
    1fe6:	d505      	bpl.n	1ff4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1fe8:	221e      	movs	r2, #30
    1fea:	2332      	movs	r3, #50	; 0x32
    1fec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1fee:	3b2e      	subs	r3, #46	; 0x2e
    1ff0:	8363      	strh	r3, [r4, #26]
    1ff2:	e7ea      	b.n	1fca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ff4:	07da      	lsls	r2, r3, #31
    1ff6:	d505      	bpl.n	2004 <STACK_SIZE+0x4>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ff8:	2213      	movs	r2, #19
    1ffa:	2332      	movs	r3, #50	; 0x32
    1ffc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ffe:	3b31      	subs	r3, #49	; 0x31
    2000:	8363      	strh	r3, [r4, #26]
    2002:	e7e2      	b.n	1fca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2004:	06da      	lsls	r2, r3, #27
    2006:	d505      	bpl.n	2014 <STACK_SIZE+0x14>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2008:	2242      	movs	r2, #66	; 0x42
    200a:	2332      	movs	r3, #50	; 0x32
    200c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    200e:	3b22      	subs	r3, #34	; 0x22
    2010:	8363      	strh	r3, [r4, #26]
    2012:	e7da      	b.n	1fca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2014:	2220      	movs	r2, #32
    2016:	421a      	tst	r2, r3
    2018:	d0d7      	beq.n	1fca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    201a:	3221      	adds	r2, #33	; 0x21
    201c:	2332      	movs	r3, #50	; 0x32
    201e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2020:	3b12      	subs	r3, #18
    2022:	8363      	strh	r3, [r4, #26]
    2024:	e7d1      	b.n	1fca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2026:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2028:	05db      	lsls	r3, r3, #23
    202a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    202c:	b2da      	uxtb	r2, r3
    202e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2030:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2032:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2034:	1c51      	adds	r1, r2, #1
    2036:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2038:	7969      	ldrb	r1, [r5, #5]
    203a:	2901      	cmp	r1, #1
    203c:	d010      	beq.n	2060 <STACK_SIZE+0x60>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    203e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2040:	3b01      	subs	r3, #1
    2042:	b29b      	uxth	r3, r3
    2044:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2046:	2b00      	cmp	r3, #0
    2048:	d112      	bne.n	2070 <STACK_SIZE+0x70>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    204a:	3304      	adds	r3, #4
    204c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    204e:	2200      	movs	r2, #0
    2050:	332e      	adds	r3, #46	; 0x2e
    2052:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2054:	07bb      	lsls	r3, r7, #30
    2056:	d50b      	bpl.n	2070 <STACK_SIZE+0x70>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2058:	0028      	movs	r0, r5
    205a:	692b      	ldr	r3, [r5, #16]
    205c:	4798      	blx	r3
    205e:	e007      	b.n	2070 <STACK_SIZE+0x70>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2060:	0a1b      	lsrs	r3, r3, #8
    2062:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2064:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2066:	3301      	adds	r3, #1
    2068:	626b      	str	r3, [r5, #36]	; 0x24
    206a:	e7e8      	b.n	203e <STACK_SIZE+0x3e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    206c:	2304      	movs	r3, #4
    206e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2070:	06f3      	lsls	r3, r6, #27
    2072:	d504      	bpl.n	207e <STACK_SIZE+0x7e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2074:	2310      	movs	r3, #16
    2076:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2078:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    207a:	06fb      	lsls	r3, r7, #27
    207c:	d40e      	bmi.n	209c <STACK_SIZE+0x9c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    207e:	06b3      	lsls	r3, r6, #26
    2080:	d504      	bpl.n	208c <STACK_SIZE+0x8c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2082:	2320      	movs	r3, #32
    2084:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2086:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2088:	073b      	lsls	r3, r7, #28
    208a:	d40b      	bmi.n	20a4 <STACK_SIZE+0xa4>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    208c:	0733      	lsls	r3, r6, #28
    208e:	d504      	bpl.n	209a <STACK_SIZE+0x9a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2090:	2308      	movs	r3, #8
    2092:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2094:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2096:	06bb      	lsls	r3, r7, #26
    2098:	d408      	bmi.n	20ac <STACK_SIZE+0xac>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    209c:	0028      	movs	r0, r5
    209e:	69eb      	ldr	r3, [r5, #28]
    20a0:	4798      	blx	r3
    20a2:	e7ec      	b.n	207e <STACK_SIZE+0x7e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    20a4:	0028      	movs	r0, r5
    20a6:	69ab      	ldr	r3, [r5, #24]
    20a8:	4798      	blx	r3
    20aa:	e7ef      	b.n	208c <STACK_SIZE+0x8c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    20ac:	6a2b      	ldr	r3, [r5, #32]
    20ae:	0028      	movs	r0, r5
    20b0:	4798      	blx	r3
}
    20b2:	e7f2      	b.n	209a <STACK_SIZE+0x9a>
    20b4:	200005e8 	.word	0x200005e8

000020b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    20b8:	b510      	push	{r4, lr}
	switch (clock_source) {
    20ba:	2808      	cmp	r0, #8
    20bc:	d803      	bhi.n	20c6 <system_clock_source_get_hz+0xe>
    20be:	0080      	lsls	r0, r0, #2
    20c0:	4b1b      	ldr	r3, [pc, #108]	; (2130 <system_clock_source_get_hz+0x78>)
    20c2:	581b      	ldr	r3, [r3, r0]
    20c4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    20c6:	2000      	movs	r0, #0
    20c8:	e030      	b.n	212c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    20ca:	4b1a      	ldr	r3, [pc, #104]	; (2134 <system_clock_source_get_hz+0x7c>)
    20cc:	6918      	ldr	r0, [r3, #16]
    20ce:	e02d      	b.n	212c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    20d0:	4b19      	ldr	r3, [pc, #100]	; (2138 <system_clock_source_get_hz+0x80>)
    20d2:	6a1b      	ldr	r3, [r3, #32]
    20d4:	059b      	lsls	r3, r3, #22
    20d6:	0f9b      	lsrs	r3, r3, #30
    20d8:	4818      	ldr	r0, [pc, #96]	; (213c <system_clock_source_get_hz+0x84>)
    20da:	40d8      	lsrs	r0, r3
    20dc:	e026      	b.n	212c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    20de:	4b15      	ldr	r3, [pc, #84]	; (2134 <system_clock_source_get_hz+0x7c>)
    20e0:	6958      	ldr	r0, [r3, #20]
    20e2:	e023      	b.n	212c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20e4:	4b13      	ldr	r3, [pc, #76]	; (2134 <system_clock_source_get_hz+0x7c>)
    20e6:	681b      	ldr	r3, [r3, #0]
			return 0;
    20e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20ea:	079b      	lsls	r3, r3, #30
    20ec:	d51e      	bpl.n	212c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20ee:	4912      	ldr	r1, [pc, #72]	; (2138 <system_clock_source_get_hz+0x80>)
    20f0:	2210      	movs	r2, #16
    20f2:	68cb      	ldr	r3, [r1, #12]
    20f4:	421a      	tst	r2, r3
    20f6:	d0fc      	beq.n	20f2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    20f8:	4b0e      	ldr	r3, [pc, #56]	; (2134 <system_clock_source_get_hz+0x7c>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	075b      	lsls	r3, r3, #29
    20fe:	d401      	bmi.n	2104 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2100:	480f      	ldr	r0, [pc, #60]	; (2140 <system_clock_source_get_hz+0x88>)
    2102:	e013      	b.n	212c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2104:	2000      	movs	r0, #0
    2106:	4b0f      	ldr	r3, [pc, #60]	; (2144 <system_clock_source_get_hz+0x8c>)
    2108:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    210a:	4b0a      	ldr	r3, [pc, #40]	; (2134 <system_clock_source_get_hz+0x7c>)
    210c:	689b      	ldr	r3, [r3, #8]
    210e:	041b      	lsls	r3, r3, #16
    2110:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2112:	4358      	muls	r0, r3
    2114:	e00a      	b.n	212c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2116:	2350      	movs	r3, #80	; 0x50
    2118:	4a07      	ldr	r2, [pc, #28]	; (2138 <system_clock_source_get_hz+0x80>)
    211a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    211c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    211e:	075b      	lsls	r3, r3, #29
    2120:	d504      	bpl.n	212c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2122:	4b04      	ldr	r3, [pc, #16]	; (2134 <system_clock_source_get_hz+0x7c>)
    2124:	68d8      	ldr	r0, [r3, #12]
    2126:	e001      	b.n	212c <system_clock_source_get_hz+0x74>
		return 32768UL;
    2128:	2080      	movs	r0, #128	; 0x80
    212a:	0200      	lsls	r0, r0, #8
	}
}
    212c:	bd10      	pop	{r4, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00003f68 	.word	0x00003f68
    2134:	200000bc 	.word	0x200000bc
    2138:	40000800 	.word	0x40000800
    213c:	007a1200 	.word	0x007a1200
    2140:	02dc6c00 	.word	0x02dc6c00
    2144:	00002719 	.word	0x00002719

00002148 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2148:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    214a:	490c      	ldr	r1, [pc, #48]	; (217c <system_clock_source_osc8m_set_config+0x34>)
    214c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    214e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2150:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2152:	7840      	ldrb	r0, [r0, #1]
    2154:	2201      	movs	r2, #1
    2156:	4010      	ands	r0, r2
    2158:	0180      	lsls	r0, r0, #6
    215a:	2640      	movs	r6, #64	; 0x40
    215c:	43b3      	bics	r3, r6
    215e:	4303      	orrs	r3, r0
    2160:	402a      	ands	r2, r5
    2162:	01d2      	lsls	r2, r2, #7
    2164:	2080      	movs	r0, #128	; 0x80
    2166:	4383      	bics	r3, r0
    2168:	4313      	orrs	r3, r2
    216a:	2203      	movs	r2, #3
    216c:	4022      	ands	r2, r4
    216e:	0212      	lsls	r2, r2, #8
    2170:	4803      	ldr	r0, [pc, #12]	; (2180 <system_clock_source_osc8m_set_config+0x38>)
    2172:	4003      	ands	r3, r0
    2174:	4313      	orrs	r3, r2
    2176:	620b      	str	r3, [r1, #32]
}
    2178:	bd70      	pop	{r4, r5, r6, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	40000800 	.word	0x40000800
    2180:	fffffcff 	.word	0xfffffcff

00002184 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	46de      	mov	lr, fp
    2188:	4657      	mov	r7, sl
    218a:	464e      	mov	r6, r9
    218c:	4645      	mov	r5, r8
    218e:	b5e0      	push	{r5, r6, r7, lr}
    2190:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2192:	4b26      	ldr	r3, [pc, #152]	; (222c <system_clock_source_xosc32k_set_config+0xa8>)
    2194:	469b      	mov	fp, r3
    2196:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2198:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    219a:	7800      	ldrb	r0, [r0, #0]
    219c:	4242      	negs	r2, r0
    219e:	4142      	adcs	r2, r0
    21a0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    21a2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    21a4:	78ca      	ldrb	r2, [r1, #3]
    21a6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    21a8:	790a      	ldrb	r2, [r1, #4]
    21aa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    21ac:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    21ae:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    21b0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    21b2:	688a      	ldr	r2, [r1, #8]
    21b4:	491e      	ldr	r1, [pc, #120]	; (2230 <system_clock_source_xosc32k_set_config+0xac>)
    21b6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    21b8:	2101      	movs	r1, #1
    21ba:	464a      	mov	r2, r9
    21bc:	0092      	lsls	r2, r2, #2
    21be:	4691      	mov	r9, r2
    21c0:	2204      	movs	r2, #4
    21c2:	4393      	bics	r3, r2
    21c4:	464a      	mov	r2, r9
    21c6:	4313      	orrs	r3, r2
    21c8:	4642      	mov	r2, r8
    21ca:	400a      	ands	r2, r1
    21cc:	00d2      	lsls	r2, r2, #3
    21ce:	4690      	mov	r8, r2
    21d0:	2208      	movs	r2, #8
    21d2:	4393      	bics	r3, r2
    21d4:	4642      	mov	r2, r8
    21d6:	4313      	orrs	r3, r2
    21d8:	4662      	mov	r2, ip
    21da:	400a      	ands	r2, r1
    21dc:	0112      	lsls	r2, r2, #4
    21de:	4694      	mov	ip, r2
    21e0:	2210      	movs	r2, #16
    21e2:	4393      	bics	r3, r2
    21e4:	4662      	mov	r2, ip
    21e6:	4313      	orrs	r3, r2
    21e8:	4008      	ands	r0, r1
    21ea:	0140      	lsls	r0, r0, #5
    21ec:	2220      	movs	r2, #32
    21ee:	4393      	bics	r3, r2
    21f0:	4303      	orrs	r3, r0
    21f2:	400f      	ands	r7, r1
    21f4:	01bf      	lsls	r7, r7, #6
    21f6:	2040      	movs	r0, #64	; 0x40
    21f8:	4383      	bics	r3, r0
    21fa:	433b      	orrs	r3, r7
    21fc:	400e      	ands	r6, r1
    21fe:	01f6      	lsls	r6, r6, #7
    2200:	3040      	adds	r0, #64	; 0x40
    2202:	4383      	bics	r3, r0
    2204:	4333      	orrs	r3, r6
    2206:	3879      	subs	r0, #121	; 0x79
    2208:	4005      	ands	r5, r0
    220a:	022d      	lsls	r5, r5, #8
    220c:	4809      	ldr	r0, [pc, #36]	; (2234 <system_clock_source_xosc32k_set_config+0xb0>)
    220e:	4003      	ands	r3, r0
    2210:	432b      	orrs	r3, r5
    2212:	4021      	ands	r1, r4
    2214:	0309      	lsls	r1, r1, #12
    2216:	4808      	ldr	r0, [pc, #32]	; (2238 <system_clock_source_xosc32k_set_config+0xb4>)
    2218:	4003      	ands	r3, r0
    221a:	430b      	orrs	r3, r1
    221c:	465a      	mov	r2, fp
    221e:	8293      	strh	r3, [r2, #20]
}
    2220:	bc3c      	pop	{r2, r3, r4, r5}
    2222:	4690      	mov	r8, r2
    2224:	4699      	mov	r9, r3
    2226:	46a2      	mov	sl, r4
    2228:	46ab      	mov	fp, r5
    222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222c:	40000800 	.word	0x40000800
    2230:	200000bc 	.word	0x200000bc
    2234:	fffff8ff 	.word	0xfffff8ff
    2238:	ffffefff 	.word	0xffffefff

0000223c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    223c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    223e:	7a03      	ldrb	r3, [r0, #8]
    2240:	069b      	lsls	r3, r3, #26
    2242:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2244:	8942      	ldrh	r2, [r0, #10]
    2246:	0592      	lsls	r2, r2, #22
    2248:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    224a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    224c:	4918      	ldr	r1, [pc, #96]	; (22b0 <system_clock_source_dfll_set_config+0x74>)
    224e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2250:	7983      	ldrb	r3, [r0, #6]
    2252:	79c2      	ldrb	r2, [r0, #7]
    2254:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2256:	8842      	ldrh	r2, [r0, #2]
    2258:	8884      	ldrh	r4, [r0, #4]
    225a:	4322      	orrs	r2, r4
    225c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    225e:	7842      	ldrb	r2, [r0, #1]
    2260:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2262:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2264:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2266:	7803      	ldrb	r3, [r0, #0]
    2268:	2b04      	cmp	r3, #4
    226a:	d011      	beq.n	2290 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    226c:	2b20      	cmp	r3, #32
    226e:	d10e      	bne.n	228e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2270:	7b03      	ldrb	r3, [r0, #12]
    2272:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2274:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2276:	4313      	orrs	r3, r2
    2278:	89c2      	ldrh	r2, [r0, #14]
    227a:	0412      	lsls	r2, r2, #16
    227c:	490d      	ldr	r1, [pc, #52]	; (22b4 <system_clock_source_dfll_set_config+0x78>)
    227e:	400a      	ands	r2, r1
    2280:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2282:	4a0b      	ldr	r2, [pc, #44]	; (22b0 <system_clock_source_dfll_set_config+0x74>)
    2284:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2286:	6811      	ldr	r1, [r2, #0]
    2288:	4b0b      	ldr	r3, [pc, #44]	; (22b8 <system_clock_source_dfll_set_config+0x7c>)
    228a:	430b      	orrs	r3, r1
    228c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    228e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2290:	7b03      	ldrb	r3, [r0, #12]
    2292:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2294:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2296:	4313      	orrs	r3, r2
    2298:	89c2      	ldrh	r2, [r0, #14]
    229a:	0412      	lsls	r2, r2, #16
    229c:	4905      	ldr	r1, [pc, #20]	; (22b4 <system_clock_source_dfll_set_config+0x78>)
    229e:	400a      	ands	r2, r1
    22a0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    22a2:	4a03      	ldr	r2, [pc, #12]	; (22b0 <system_clock_source_dfll_set_config+0x74>)
    22a4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    22a6:	6813      	ldr	r3, [r2, #0]
    22a8:	2104      	movs	r1, #4
    22aa:	430b      	orrs	r3, r1
    22ac:	6013      	str	r3, [r2, #0]
    22ae:	e7ee      	b.n	228e <system_clock_source_dfll_set_config+0x52>
    22b0:	200000bc 	.word	0x200000bc
    22b4:	03ff0000 	.word	0x03ff0000
    22b8:	00000424 	.word	0x00000424

000022bc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    22bc:	2808      	cmp	r0, #8
    22be:	d803      	bhi.n	22c8 <system_clock_source_enable+0xc>
    22c0:	0080      	lsls	r0, r0, #2
    22c2:	4b25      	ldr	r3, [pc, #148]	; (2358 <system_clock_source_enable+0x9c>)
    22c4:	581b      	ldr	r3, [r3, r0]
    22c6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    22c8:	2017      	movs	r0, #23
    22ca:	e044      	b.n	2356 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    22cc:	4a23      	ldr	r2, [pc, #140]	; (235c <system_clock_source_enable+0xa0>)
    22ce:	6a13      	ldr	r3, [r2, #32]
    22d0:	2102      	movs	r1, #2
    22d2:	430b      	orrs	r3, r1
    22d4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    22d6:	2000      	movs	r0, #0
    22d8:	e03d      	b.n	2356 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    22da:	4a20      	ldr	r2, [pc, #128]	; (235c <system_clock_source_enable+0xa0>)
    22dc:	6993      	ldr	r3, [r2, #24]
    22de:	2102      	movs	r1, #2
    22e0:	430b      	orrs	r3, r1
    22e2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    22e4:	2000      	movs	r0, #0
		break;
    22e6:	e036      	b.n	2356 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    22e8:	4a1c      	ldr	r2, [pc, #112]	; (235c <system_clock_source_enable+0xa0>)
    22ea:	8a13      	ldrh	r3, [r2, #16]
    22ec:	2102      	movs	r1, #2
    22ee:	430b      	orrs	r3, r1
    22f0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    22f2:	2000      	movs	r0, #0
		break;
    22f4:	e02f      	b.n	2356 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    22f6:	4a19      	ldr	r2, [pc, #100]	; (235c <system_clock_source_enable+0xa0>)
    22f8:	8a93      	ldrh	r3, [r2, #20]
    22fa:	2102      	movs	r1, #2
    22fc:	430b      	orrs	r3, r1
    22fe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2300:	2000      	movs	r0, #0
		break;
    2302:	e028      	b.n	2356 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2304:	4916      	ldr	r1, [pc, #88]	; (2360 <system_clock_source_enable+0xa4>)
    2306:	680b      	ldr	r3, [r1, #0]
    2308:	2202      	movs	r2, #2
    230a:	4313      	orrs	r3, r2
    230c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    230e:	4b13      	ldr	r3, [pc, #76]	; (235c <system_clock_source_enable+0xa0>)
    2310:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2312:	0019      	movs	r1, r3
    2314:	320e      	adds	r2, #14
    2316:	68cb      	ldr	r3, [r1, #12]
    2318:	421a      	tst	r2, r3
    231a:	d0fc      	beq.n	2316 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    231c:	4a10      	ldr	r2, [pc, #64]	; (2360 <system_clock_source_enable+0xa4>)
    231e:	6891      	ldr	r1, [r2, #8]
    2320:	4b0e      	ldr	r3, [pc, #56]	; (235c <system_clock_source_enable+0xa0>)
    2322:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2324:	6852      	ldr	r2, [r2, #4]
    2326:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2328:	2200      	movs	r2, #0
    232a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    232c:	0019      	movs	r1, r3
    232e:	3210      	adds	r2, #16
    2330:	68cb      	ldr	r3, [r1, #12]
    2332:	421a      	tst	r2, r3
    2334:	d0fc      	beq.n	2330 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2336:	4b0a      	ldr	r3, [pc, #40]	; (2360 <system_clock_source_enable+0xa4>)
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	b29b      	uxth	r3, r3
    233c:	4a07      	ldr	r2, [pc, #28]	; (235c <system_clock_source_enable+0xa0>)
    233e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2340:	2000      	movs	r0, #0
    2342:	e008      	b.n	2356 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2344:	4905      	ldr	r1, [pc, #20]	; (235c <system_clock_source_enable+0xa0>)
    2346:	2244      	movs	r2, #68	; 0x44
    2348:	5c8b      	ldrb	r3, [r1, r2]
    234a:	2002      	movs	r0, #2
    234c:	4303      	orrs	r3, r0
    234e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2350:	2000      	movs	r0, #0
		break;
    2352:	e000      	b.n	2356 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2354:	2000      	movs	r0, #0
}
    2356:	4770      	bx	lr
    2358:	00003f8c 	.word	0x00003f8c
    235c:	40000800 	.word	0x40000800
    2360:	200000bc 	.word	0x200000bc

00002364 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2364:	b5f0      	push	{r4, r5, r6, r7, lr}
    2366:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2368:	22c2      	movs	r2, #194	; 0xc2
    236a:	00d2      	lsls	r2, r2, #3
    236c:	4b47      	ldr	r3, [pc, #284]	; (248c <system_clock_init+0x128>)
    236e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2370:	4a47      	ldr	r2, [pc, #284]	; (2490 <system_clock_init+0x12c>)
    2372:	6853      	ldr	r3, [r2, #4]
    2374:	211e      	movs	r1, #30
    2376:	438b      	bics	r3, r1
    2378:	391a      	subs	r1, #26
    237a:	430b      	orrs	r3, r1
    237c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    237e:	2202      	movs	r2, #2
    2380:	ab01      	add	r3, sp, #4
    2382:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2384:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2386:	4d43      	ldr	r5, [pc, #268]	; (2494 <system_clock_init+0x130>)
    2388:	b2e0      	uxtb	r0, r4
    238a:	a901      	add	r1, sp, #4
    238c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    238e:	3401      	adds	r4, #1
    2390:	2c25      	cmp	r4, #37	; 0x25
    2392:	d1f9      	bne.n	2388 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2394:	a80a      	add	r0, sp, #40	; 0x28
    2396:	2300      	movs	r3, #0
    2398:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    239a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    239c:	2280      	movs	r2, #128	; 0x80
    239e:	0212      	lsls	r2, r2, #8
    23a0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    23a2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    23a4:	2201      	movs	r2, #1
    23a6:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    23a8:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    23aa:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    23ac:	3202      	adds	r2, #2
    23ae:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    23b0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    23b2:	4b39      	ldr	r3, [pc, #228]	; (2498 <system_clock_init+0x134>)
    23b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    23b6:	2005      	movs	r0, #5
    23b8:	4b38      	ldr	r3, [pc, #224]	; (249c <system_clock_init+0x138>)
    23ba:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    23bc:	4933      	ldr	r1, [pc, #204]	; (248c <system_clock_init+0x128>)
    23be:	2202      	movs	r2, #2
    23c0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    23c2:	421a      	tst	r2, r3
    23c4:	d0fc      	beq.n	23c0 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    23c6:	4a31      	ldr	r2, [pc, #196]	; (248c <system_clock_init+0x128>)
    23c8:	8a93      	ldrh	r3, [r2, #20]
    23ca:	2180      	movs	r1, #128	; 0x80
    23cc:	430b      	orrs	r3, r1
    23ce:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    23d0:	ab05      	add	r3, sp, #20
    23d2:	2100      	movs	r1, #0
    23d4:	2200      	movs	r2, #0
    23d6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    23d8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    23da:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    23dc:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    23de:	313f      	adds	r1, #63	; 0x3f
    23e0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    23e2:	393b      	subs	r1, #59	; 0x3b
    23e4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    23e6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    23e8:	4b2d      	ldr	r3, [pc, #180]	; (24a0 <system_clock_init+0x13c>)
    23ea:	681b      	ldr	r3, [r3, #0]
    23ec:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    23ee:	2b3f      	cmp	r3, #63	; 0x3f
    23f0:	d04a      	beq.n	2488 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    23f2:	a805      	add	r0, sp, #20
    23f4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    23f6:	4b2b      	ldr	r3, [pc, #172]	; (24a4 <system_clock_init+0x140>)
    23f8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    23fa:	2307      	movs	r3, #7
    23fc:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    23fe:	3338      	adds	r3, #56	; 0x38
    2400:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2402:	4b29      	ldr	r3, [pc, #164]	; (24a8 <system_clock_init+0x144>)
    2404:	4798      	blx	r3
	config->run_in_standby  = false;
    2406:	a804      	add	r0, sp, #16
    2408:	2500      	movs	r5, #0
    240a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    240c:	2601      	movs	r6, #1
    240e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2410:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2412:	4b26      	ldr	r3, [pc, #152]	; (24ac <system_clock_init+0x148>)
    2414:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2416:	2006      	movs	r0, #6
    2418:	4f20      	ldr	r7, [pc, #128]	; (249c <system_clock_init+0x138>)
    241a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    241c:	4b24      	ldr	r3, [pc, #144]	; (24b0 <system_clock_init+0x14c>)
    241e:	4798      	blx	r3
	config->division_factor    = 1;
    2420:	ac01      	add	r4, sp, #4
    2422:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2424:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2426:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2428:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    242a:	2305      	movs	r3, #5
    242c:	7023      	strb	r3, [r4, #0]
    242e:	0021      	movs	r1, r4
    2430:	2001      	movs	r0, #1
    2432:	4b20      	ldr	r3, [pc, #128]	; (24b4 <system_clock_init+0x150>)
    2434:	4798      	blx	r3
    2436:	2001      	movs	r0, #1
    2438:	4b1f      	ldr	r3, [pc, #124]	; (24b8 <system_clock_init+0x154>)
    243a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    243c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    243e:	0021      	movs	r1, r4
    2440:	2000      	movs	r0, #0
    2442:	4b14      	ldr	r3, [pc, #80]	; (2494 <system_clock_init+0x130>)
    2444:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2446:	2000      	movs	r0, #0
    2448:	4b1c      	ldr	r3, [pc, #112]	; (24bc <system_clock_init+0x158>)
    244a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    244c:	2007      	movs	r0, #7
    244e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2450:	490e      	ldr	r1, [pc, #56]	; (248c <system_clock_init+0x128>)
    2452:	22d0      	movs	r2, #208	; 0xd0
    2454:	68cb      	ldr	r3, [r1, #12]
    2456:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2458:	2bd0      	cmp	r3, #208	; 0xd0
    245a:	d1fb      	bne.n	2454 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    245c:	4a18      	ldr	r2, [pc, #96]	; (24c0 <system_clock_init+0x15c>)
    245e:	2300      	movs	r3, #0
    2460:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2462:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2464:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2466:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2468:	a901      	add	r1, sp, #4
    246a:	2201      	movs	r2, #1
    246c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    246e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2470:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2472:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2474:	3307      	adds	r3, #7
    2476:	700b      	strb	r3, [r1, #0]
    2478:	2000      	movs	r0, #0
    247a:	4b0e      	ldr	r3, [pc, #56]	; (24b4 <system_clock_init+0x150>)
    247c:	4798      	blx	r3
    247e:	2000      	movs	r0, #0
    2480:	4b0d      	ldr	r3, [pc, #52]	; (24b8 <system_clock_init+0x154>)
    2482:	4798      	blx	r3
#endif
}
    2484:	b00f      	add	sp, #60	; 0x3c
    2486:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2488:	3b20      	subs	r3, #32
    248a:	e7b2      	b.n	23f2 <system_clock_init+0x8e>
    248c:	40000800 	.word	0x40000800
    2490:	41004000 	.word	0x41004000
    2494:	000026fd 	.word	0x000026fd
    2498:	00002185 	.word	0x00002185
    249c:	000022bd 	.word	0x000022bd
    24a0:	00806024 	.word	0x00806024
    24a4:	000005b9 	.word	0x000005b9
    24a8:	0000223d 	.word	0x0000223d
    24ac:	00002149 	.word	0x00002149
    24b0:	000024c5 	.word	0x000024c5
    24b4:	000024e9 	.word	0x000024e9
    24b8:	000025a1 	.word	0x000025a1
    24bc:	00002671 	.word	0x00002671
    24c0:	40000400 	.word	0x40000400

000024c4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    24c4:	4a06      	ldr	r2, [pc, #24]	; (24e0 <system_gclk_init+0x1c>)
    24c6:	6993      	ldr	r3, [r2, #24]
    24c8:	2108      	movs	r1, #8
    24ca:	430b      	orrs	r3, r1
    24cc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    24ce:	2201      	movs	r2, #1
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <system_gclk_init+0x20>)
    24d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    24d4:	0019      	movs	r1, r3
    24d6:	780b      	ldrb	r3, [r1, #0]
    24d8:	4213      	tst	r3, r2
    24da:	d1fc      	bne.n	24d6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    24dc:	4770      	bx	lr
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	40000400 	.word	0x40000400
    24e4:	40000c00 	.word	0x40000c00

000024e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    24e8:	b570      	push	{r4, r5, r6, lr}
    24ea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    24ec:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    24ee:	780d      	ldrb	r5, [r1, #0]
    24f0:	022d      	lsls	r5, r5, #8
    24f2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    24f4:	784b      	ldrb	r3, [r1, #1]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d002      	beq.n	2500 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    24fa:	2380      	movs	r3, #128	; 0x80
    24fc:	02db      	lsls	r3, r3, #11
    24fe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2500:	7a4b      	ldrb	r3, [r1, #9]
    2502:	2b00      	cmp	r3, #0
    2504:	d002      	beq.n	250c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2506:	2380      	movs	r3, #128	; 0x80
    2508:	031b      	lsls	r3, r3, #12
    250a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    250c:	6848      	ldr	r0, [r1, #4]
    250e:	2801      	cmp	r0, #1
    2510:	d910      	bls.n	2534 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2512:	1e43      	subs	r3, r0, #1
    2514:	4218      	tst	r0, r3
    2516:	d134      	bne.n	2582 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2518:	2802      	cmp	r0, #2
    251a:	d930      	bls.n	257e <system_gclk_gen_set_config+0x96>
    251c:	2302      	movs	r3, #2
    251e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2520:	3201      	adds	r2, #1
						mask <<= 1) {
    2522:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2524:	4298      	cmp	r0, r3
    2526:	d8fb      	bhi.n	2520 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2528:	0212      	lsls	r2, r2, #8
    252a:	4332      	orrs	r2, r6
    252c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    252e:	2380      	movs	r3, #128	; 0x80
    2530:	035b      	lsls	r3, r3, #13
    2532:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2534:	7a0b      	ldrb	r3, [r1, #8]
    2536:	2b00      	cmp	r3, #0
    2538:	d002      	beq.n	2540 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    253a:	2380      	movs	r3, #128	; 0x80
    253c:	039b      	lsls	r3, r3, #14
    253e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2540:	4a13      	ldr	r2, [pc, #76]	; (2590 <system_gclk_gen_set_config+0xa8>)
    2542:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2544:	b25b      	sxtb	r3, r3
    2546:	2b00      	cmp	r3, #0
    2548:	dbfb      	blt.n	2542 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    254a:	4b12      	ldr	r3, [pc, #72]	; (2594 <system_gclk_gen_set_config+0xac>)
    254c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    254e:	4b12      	ldr	r3, [pc, #72]	; (2598 <system_gclk_gen_set_config+0xb0>)
    2550:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2552:	4a0f      	ldr	r2, [pc, #60]	; (2590 <system_gclk_gen_set_config+0xa8>)
    2554:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2556:	b25b      	sxtb	r3, r3
    2558:	2b00      	cmp	r3, #0
    255a:	dbfb      	blt.n	2554 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    255c:	4b0c      	ldr	r3, [pc, #48]	; (2590 <system_gclk_gen_set_config+0xa8>)
    255e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2560:	001a      	movs	r2, r3
    2562:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2564:	b25b      	sxtb	r3, r3
    2566:	2b00      	cmp	r3, #0
    2568:	dbfb      	blt.n	2562 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    256a:	4a09      	ldr	r2, [pc, #36]	; (2590 <system_gclk_gen_set_config+0xa8>)
    256c:	6853      	ldr	r3, [r2, #4]
    256e:	2180      	movs	r1, #128	; 0x80
    2570:	0249      	lsls	r1, r1, #9
    2572:	400b      	ands	r3, r1
    2574:	431d      	orrs	r5, r3
    2576:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2578:	4b08      	ldr	r3, [pc, #32]	; (259c <system_gclk_gen_set_config+0xb4>)
    257a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    257c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    257e:	2200      	movs	r2, #0
    2580:	e7d2      	b.n	2528 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2582:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2584:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2586:	2380      	movs	r3, #128	; 0x80
    2588:	029b      	lsls	r3, r3, #10
    258a:	431d      	orrs	r5, r3
    258c:	e7d2      	b.n	2534 <system_gclk_gen_set_config+0x4c>
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	40000c00 	.word	0x40000c00
    2594:	00000fb1 	.word	0x00000fb1
    2598:	40000c08 	.word	0x40000c08
    259c:	00000ff1 	.word	0x00000ff1

000025a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    25a0:	b510      	push	{r4, lr}
    25a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25a4:	4a0b      	ldr	r2, [pc, #44]	; (25d4 <system_gclk_gen_enable+0x34>)
    25a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25a8:	b25b      	sxtb	r3, r3
    25aa:	2b00      	cmp	r3, #0
    25ac:	dbfb      	blt.n	25a6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    25ae:	4b0a      	ldr	r3, [pc, #40]	; (25d8 <system_gclk_gen_enable+0x38>)
    25b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25b2:	4b0a      	ldr	r3, [pc, #40]	; (25dc <system_gclk_gen_enable+0x3c>)
    25b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25b6:	4a07      	ldr	r2, [pc, #28]	; (25d4 <system_gclk_gen_enable+0x34>)
    25b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25ba:	b25b      	sxtb	r3, r3
    25bc:	2b00      	cmp	r3, #0
    25be:	dbfb      	blt.n	25b8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    25c0:	4a04      	ldr	r2, [pc, #16]	; (25d4 <system_gclk_gen_enable+0x34>)
    25c2:	6851      	ldr	r1, [r2, #4]
    25c4:	2380      	movs	r3, #128	; 0x80
    25c6:	025b      	lsls	r3, r3, #9
    25c8:	430b      	orrs	r3, r1
    25ca:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    25cc:	4b04      	ldr	r3, [pc, #16]	; (25e0 <system_gclk_gen_enable+0x40>)
    25ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    25d0:	bd10      	pop	{r4, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	40000c00 	.word	0x40000c00
    25d8:	00000fb1 	.word	0x00000fb1
    25dc:	40000c04 	.word	0x40000c04
    25e0:	00000ff1 	.word	0x00000ff1

000025e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25e8:	4a1a      	ldr	r2, [pc, #104]	; (2654 <system_gclk_gen_get_hz+0x70>)
    25ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25ec:	b25b      	sxtb	r3, r3
    25ee:	2b00      	cmp	r3, #0
    25f0:	dbfb      	blt.n	25ea <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    25f2:	4b19      	ldr	r3, [pc, #100]	; (2658 <system_gclk_gen_get_hz+0x74>)
    25f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25f6:	4b19      	ldr	r3, [pc, #100]	; (265c <system_gclk_gen_get_hz+0x78>)
    25f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25fa:	4a16      	ldr	r2, [pc, #88]	; (2654 <system_gclk_gen_get_hz+0x70>)
    25fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25fe:	b25b      	sxtb	r3, r3
    2600:	2b00      	cmp	r3, #0
    2602:	dbfb      	blt.n	25fc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2604:	4e13      	ldr	r6, [pc, #76]	; (2654 <system_gclk_gen_get_hz+0x70>)
    2606:	6870      	ldr	r0, [r6, #4]
    2608:	04c0      	lsls	r0, r0, #19
    260a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    260c:	4b14      	ldr	r3, [pc, #80]	; (2660 <system_gclk_gen_get_hz+0x7c>)
    260e:	4798      	blx	r3
    2610:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2612:	4b12      	ldr	r3, [pc, #72]	; (265c <system_gclk_gen_get_hz+0x78>)
    2614:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2616:	6876      	ldr	r6, [r6, #4]
    2618:	02f6      	lsls	r6, r6, #11
    261a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    261c:	4b11      	ldr	r3, [pc, #68]	; (2664 <system_gclk_gen_get_hz+0x80>)
    261e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2620:	4a0c      	ldr	r2, [pc, #48]	; (2654 <system_gclk_gen_get_hz+0x70>)
    2622:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2624:	b25b      	sxtb	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	dbfb      	blt.n	2622 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    262a:	4b0a      	ldr	r3, [pc, #40]	; (2654 <system_gclk_gen_get_hz+0x70>)
    262c:	689c      	ldr	r4, [r3, #8]
    262e:	0224      	lsls	r4, r4, #8
    2630:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2632:	4b0d      	ldr	r3, [pc, #52]	; (2668 <system_gclk_gen_get_hz+0x84>)
    2634:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2636:	2e00      	cmp	r6, #0
    2638:	d107      	bne.n	264a <system_gclk_gen_get_hz+0x66>
    263a:	2c01      	cmp	r4, #1
    263c:	d907      	bls.n	264e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    263e:	0021      	movs	r1, r4
    2640:	0028      	movs	r0, r5
    2642:	4b0a      	ldr	r3, [pc, #40]	; (266c <system_gclk_gen_get_hz+0x88>)
    2644:	4798      	blx	r3
    2646:	0005      	movs	r5, r0
    2648:	e001      	b.n	264e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    264a:	3401      	adds	r4, #1
    264c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    264e:	0028      	movs	r0, r5
    2650:	bd70      	pop	{r4, r5, r6, pc}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	40000c00 	.word	0x40000c00
    2658:	00000fb1 	.word	0x00000fb1
    265c:	40000c04 	.word	0x40000c04
    2660:	000020b9 	.word	0x000020b9
    2664:	40000c08 	.word	0x40000c08
    2668:	00000ff1 	.word	0x00000ff1
    266c:	00003165 	.word	0x00003165

00002670 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2670:	b510      	push	{r4, lr}
    2672:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <system_gclk_chan_enable+0x20>)
    2676:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2678:	4b06      	ldr	r3, [pc, #24]	; (2694 <system_gclk_chan_enable+0x24>)
    267a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    267c:	4a06      	ldr	r2, [pc, #24]	; (2698 <system_gclk_chan_enable+0x28>)
    267e:	8853      	ldrh	r3, [r2, #2]
    2680:	2180      	movs	r1, #128	; 0x80
    2682:	01c9      	lsls	r1, r1, #7
    2684:	430b      	orrs	r3, r1
    2686:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2688:	4b04      	ldr	r3, [pc, #16]	; (269c <system_gclk_chan_enable+0x2c>)
    268a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    268c:	bd10      	pop	{r4, pc}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	00000fb1 	.word	0x00000fb1
    2694:	40000c02 	.word	0x40000c02
    2698:	40000c00 	.word	0x40000c00
    269c:	00000ff1 	.word	0x00000ff1

000026a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    26a0:	b510      	push	{r4, lr}
    26a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    26a4:	4b0f      	ldr	r3, [pc, #60]	; (26e4 <system_gclk_chan_disable+0x44>)
    26a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    26a8:	4b0f      	ldr	r3, [pc, #60]	; (26e8 <system_gclk_chan_disable+0x48>)
    26aa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    26ac:	4a0f      	ldr	r2, [pc, #60]	; (26ec <system_gclk_chan_disable+0x4c>)
    26ae:	8853      	ldrh	r3, [r2, #2]
    26b0:	051b      	lsls	r3, r3, #20
    26b2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    26b4:	8853      	ldrh	r3, [r2, #2]
    26b6:	490e      	ldr	r1, [pc, #56]	; (26f0 <system_gclk_chan_disable+0x50>)
    26b8:	400b      	ands	r3, r1
    26ba:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    26bc:	8853      	ldrh	r3, [r2, #2]
    26be:	490d      	ldr	r1, [pc, #52]	; (26f4 <system_gclk_chan_disable+0x54>)
    26c0:	400b      	ands	r3, r1
    26c2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    26c4:	0011      	movs	r1, r2
    26c6:	2280      	movs	r2, #128	; 0x80
    26c8:	01d2      	lsls	r2, r2, #7
    26ca:	884b      	ldrh	r3, [r1, #2]
    26cc:	4213      	tst	r3, r2
    26ce:	d1fc      	bne.n	26ca <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    26d0:	4906      	ldr	r1, [pc, #24]	; (26ec <system_gclk_chan_disable+0x4c>)
    26d2:	884a      	ldrh	r2, [r1, #2]
    26d4:	0203      	lsls	r3, r0, #8
    26d6:	4806      	ldr	r0, [pc, #24]	; (26f0 <system_gclk_chan_disable+0x50>)
    26d8:	4002      	ands	r2, r0
    26da:	4313      	orrs	r3, r2
    26dc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    26de:	4b06      	ldr	r3, [pc, #24]	; (26f8 <system_gclk_chan_disable+0x58>)
    26e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26e2:	bd10      	pop	{r4, pc}
    26e4:	00000fb1 	.word	0x00000fb1
    26e8:	40000c02 	.word	0x40000c02
    26ec:	40000c00 	.word	0x40000c00
    26f0:	fffff0ff 	.word	0xfffff0ff
    26f4:	ffffbfff 	.word	0xffffbfff
    26f8:	00000ff1 	.word	0x00000ff1

000026fc <system_gclk_chan_set_config>:
{
    26fc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    26fe:	780c      	ldrb	r4, [r1, #0]
    2700:	0224      	lsls	r4, r4, #8
    2702:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2704:	4b02      	ldr	r3, [pc, #8]	; (2710 <system_gclk_chan_set_config+0x14>)
    2706:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2708:	b2a4      	uxth	r4, r4
    270a:	4b02      	ldr	r3, [pc, #8]	; (2714 <system_gclk_chan_set_config+0x18>)
    270c:	805c      	strh	r4, [r3, #2]
}
    270e:	bd10      	pop	{r4, pc}
    2710:	000026a1 	.word	0x000026a1
    2714:	40000c00 	.word	0x40000c00

00002718 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2718:	b510      	push	{r4, lr}
    271a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <system_gclk_chan_get_hz+0x20>)
    271e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2720:	4b06      	ldr	r3, [pc, #24]	; (273c <system_gclk_chan_get_hz+0x24>)
    2722:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2724:	4b06      	ldr	r3, [pc, #24]	; (2740 <system_gclk_chan_get_hz+0x28>)
    2726:	885c      	ldrh	r4, [r3, #2]
    2728:	0524      	lsls	r4, r4, #20
    272a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    272c:	4b05      	ldr	r3, [pc, #20]	; (2744 <system_gclk_chan_get_hz+0x2c>)
    272e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2730:	0020      	movs	r0, r4
    2732:	4b05      	ldr	r3, [pc, #20]	; (2748 <system_gclk_chan_get_hz+0x30>)
    2734:	4798      	blx	r3
}
    2736:	bd10      	pop	{r4, pc}
    2738:	00000fb1 	.word	0x00000fb1
    273c:	40000c02 	.word	0x40000c02
    2740:	40000c00 	.word	0x40000c00
    2744:	00000ff1 	.word	0x00000ff1
    2748:	000025e5 	.word	0x000025e5

0000274c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    274c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    274e:	78d3      	ldrb	r3, [r2, #3]
    2750:	2b00      	cmp	r3, #0
    2752:	d135      	bne.n	27c0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2754:	7813      	ldrb	r3, [r2, #0]
    2756:	2b80      	cmp	r3, #128	; 0x80
    2758:	d029      	beq.n	27ae <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    275a:	061b      	lsls	r3, r3, #24
    275c:	2480      	movs	r4, #128	; 0x80
    275e:	0264      	lsls	r4, r4, #9
    2760:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2762:	7854      	ldrb	r4, [r2, #1]
    2764:	2502      	movs	r5, #2
    2766:	43ac      	bics	r4, r5
    2768:	d106      	bne.n	2778 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    276a:	7894      	ldrb	r4, [r2, #2]
    276c:	2c00      	cmp	r4, #0
    276e:	d120      	bne.n	27b2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2770:	2480      	movs	r4, #128	; 0x80
    2772:	02a4      	lsls	r4, r4, #10
    2774:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2776:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2778:	7854      	ldrb	r4, [r2, #1]
    277a:	3c01      	subs	r4, #1
    277c:	2c01      	cmp	r4, #1
    277e:	d91c      	bls.n	27ba <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2780:	040d      	lsls	r5, r1, #16
    2782:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2784:	24a0      	movs	r4, #160	; 0xa0
    2786:	05e4      	lsls	r4, r4, #23
    2788:	432c      	orrs	r4, r5
    278a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    278c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    278e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2790:	24d0      	movs	r4, #208	; 0xd0
    2792:	0624      	lsls	r4, r4, #24
    2794:	432c      	orrs	r4, r5
    2796:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2798:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    279a:	78d4      	ldrb	r4, [r2, #3]
    279c:	2c00      	cmp	r4, #0
    279e:	d122      	bne.n	27e6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    27a0:	035b      	lsls	r3, r3, #13
    27a2:	d51c      	bpl.n	27de <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    27a4:	7893      	ldrb	r3, [r2, #2]
    27a6:	2b01      	cmp	r3, #1
    27a8:	d01e      	beq.n	27e8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    27aa:	6141      	str	r1, [r0, #20]
    27ac:	e017      	b.n	27de <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    27ae:	2300      	movs	r3, #0
    27b0:	e7d7      	b.n	2762 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    27b2:	24c0      	movs	r4, #192	; 0xc0
    27b4:	02e4      	lsls	r4, r4, #11
    27b6:	4323      	orrs	r3, r4
    27b8:	e7dd      	b.n	2776 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    27ba:	4c0d      	ldr	r4, [pc, #52]	; (27f0 <_system_pinmux_config+0xa4>)
    27bc:	4023      	ands	r3, r4
    27be:	e7df      	b.n	2780 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    27c0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    27c2:	040c      	lsls	r4, r1, #16
    27c4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    27c6:	23a0      	movs	r3, #160	; 0xa0
    27c8:	05db      	lsls	r3, r3, #23
    27ca:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27cc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    27ce:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    27d0:	23d0      	movs	r3, #208	; 0xd0
    27d2:	061b      	lsls	r3, r3, #24
    27d4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27d6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    27d8:	78d3      	ldrb	r3, [r2, #3]
    27da:	2b00      	cmp	r3, #0
    27dc:	d103      	bne.n	27e6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    27de:	7853      	ldrb	r3, [r2, #1]
    27e0:	3b01      	subs	r3, #1
    27e2:	2b01      	cmp	r3, #1
    27e4:	d902      	bls.n	27ec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    27e6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    27e8:	6181      	str	r1, [r0, #24]
    27ea:	e7f8      	b.n	27de <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    27ec:	6081      	str	r1, [r0, #8]
}
    27ee:	e7fa      	b.n	27e6 <_system_pinmux_config+0x9a>
    27f0:	fffbffff 	.word	0xfffbffff

000027f4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    27f4:	b510      	push	{r4, lr}
    27f6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    27f8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    27fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    27fc:	2900      	cmp	r1, #0
    27fe:	d104      	bne.n	280a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2800:	0943      	lsrs	r3, r0, #5
    2802:	01db      	lsls	r3, r3, #7
    2804:	4905      	ldr	r1, [pc, #20]	; (281c <system_pinmux_pin_set_config+0x28>)
    2806:	468c      	mov	ip, r1
    2808:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    280a:	241f      	movs	r4, #31
    280c:	4020      	ands	r0, r4
    280e:	2101      	movs	r1, #1
    2810:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2812:	0018      	movs	r0, r3
    2814:	4b02      	ldr	r3, [pc, #8]	; (2820 <system_pinmux_pin_set_config+0x2c>)
    2816:	4798      	blx	r3
}
    2818:	bd10      	pop	{r4, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	41004400 	.word	0x41004400
    2820:	0000274d 	.word	0x0000274d

00002824 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2824:	4770      	bx	lr
	...

00002828 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2828:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    282a:	4b05      	ldr	r3, [pc, #20]	; (2840 <system_init+0x18>)
    282c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    282e:	4b05      	ldr	r3, [pc, #20]	; (2844 <system_init+0x1c>)
    2830:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <system_init+0x20>)
    2834:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2836:	4b05      	ldr	r3, [pc, #20]	; (284c <system_init+0x24>)
    2838:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    283a:	4b05      	ldr	r3, [pc, #20]	; (2850 <system_init+0x28>)
    283c:	4798      	blx	r3
}
    283e:	bd10      	pop	{r4, pc}
    2840:	00002365 	.word	0x00002365
    2844:	00001021 	.word	0x00001021
    2848:	00002825 	.word	0x00002825
    284c:	000010c5 	.word	0x000010c5
    2850:	00002825 	.word	0x00002825

00002854 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2854:	e7fe      	b.n	2854 <Dummy_Handler>
	...

00002858 <Reset_Handler>:
{
    2858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    285a:	4a2a      	ldr	r2, [pc, #168]	; (2904 <Reset_Handler+0xac>)
    285c:	4b2a      	ldr	r3, [pc, #168]	; (2908 <Reset_Handler+0xb0>)
    285e:	429a      	cmp	r2, r3
    2860:	d011      	beq.n	2886 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2862:	001a      	movs	r2, r3
    2864:	4b29      	ldr	r3, [pc, #164]	; (290c <Reset_Handler+0xb4>)
    2866:	429a      	cmp	r2, r3
    2868:	d20d      	bcs.n	2886 <Reset_Handler+0x2e>
    286a:	4a29      	ldr	r2, [pc, #164]	; (2910 <Reset_Handler+0xb8>)
    286c:	3303      	adds	r3, #3
    286e:	1a9b      	subs	r3, r3, r2
    2870:	089b      	lsrs	r3, r3, #2
    2872:	3301      	adds	r3, #1
    2874:	009b      	lsls	r3, r3, #2
    2876:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2878:	4823      	ldr	r0, [pc, #140]	; (2908 <Reset_Handler+0xb0>)
    287a:	4922      	ldr	r1, [pc, #136]	; (2904 <Reset_Handler+0xac>)
    287c:	588c      	ldr	r4, [r1, r2]
    287e:	5084      	str	r4, [r0, r2]
    2880:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2882:	429a      	cmp	r2, r3
    2884:	d1fa      	bne.n	287c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2886:	4a23      	ldr	r2, [pc, #140]	; (2914 <Reset_Handler+0xbc>)
    2888:	4b23      	ldr	r3, [pc, #140]	; (2918 <Reset_Handler+0xc0>)
    288a:	429a      	cmp	r2, r3
    288c:	d20a      	bcs.n	28a4 <Reset_Handler+0x4c>
    288e:	43d3      	mvns	r3, r2
    2890:	4921      	ldr	r1, [pc, #132]	; (2918 <Reset_Handler+0xc0>)
    2892:	185b      	adds	r3, r3, r1
    2894:	2103      	movs	r1, #3
    2896:	438b      	bics	r3, r1
    2898:	3304      	adds	r3, #4
    289a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    289c:	2100      	movs	r1, #0
    289e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    28a0:	4293      	cmp	r3, r2
    28a2:	d1fc      	bne.n	289e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28a4:	4a1d      	ldr	r2, [pc, #116]	; (291c <Reset_Handler+0xc4>)
    28a6:	21ff      	movs	r1, #255	; 0xff
    28a8:	4b1d      	ldr	r3, [pc, #116]	; (2920 <Reset_Handler+0xc8>)
    28aa:	438b      	bics	r3, r1
    28ac:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28ae:	39fd      	subs	r1, #253	; 0xfd
    28b0:	2390      	movs	r3, #144	; 0x90
    28b2:	005b      	lsls	r3, r3, #1
    28b4:	4a1b      	ldr	r2, [pc, #108]	; (2924 <Reset_Handler+0xcc>)
    28b6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28b8:	4a1b      	ldr	r2, [pc, #108]	; (2928 <Reset_Handler+0xd0>)
    28ba:	78d3      	ldrb	r3, [r2, #3]
    28bc:	2503      	movs	r5, #3
    28be:	43ab      	bics	r3, r5
    28c0:	2402      	movs	r4, #2
    28c2:	4323      	orrs	r3, r4
    28c4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    28c6:	78d3      	ldrb	r3, [r2, #3]
    28c8:	270c      	movs	r7, #12
    28ca:	43bb      	bics	r3, r7
    28cc:	2608      	movs	r6, #8
    28ce:	4333      	orrs	r3, r6
    28d0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    28d2:	4b16      	ldr	r3, [pc, #88]	; (292c <Reset_Handler+0xd4>)
    28d4:	7b98      	ldrb	r0, [r3, #14]
    28d6:	2230      	movs	r2, #48	; 0x30
    28d8:	4390      	bics	r0, r2
    28da:	2220      	movs	r2, #32
    28dc:	4310      	orrs	r0, r2
    28de:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    28e0:	7b99      	ldrb	r1, [r3, #14]
    28e2:	43b9      	bics	r1, r7
    28e4:	4331      	orrs	r1, r6
    28e6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    28e8:	7b9a      	ldrb	r2, [r3, #14]
    28ea:	43aa      	bics	r2, r5
    28ec:	4322      	orrs	r2, r4
    28ee:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    28f0:	4a0f      	ldr	r2, [pc, #60]	; (2930 <Reset_Handler+0xd8>)
    28f2:	6853      	ldr	r3, [r2, #4]
    28f4:	2180      	movs	r1, #128	; 0x80
    28f6:	430b      	orrs	r3, r1
    28f8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    28fa:	4b0e      	ldr	r3, [pc, #56]	; (2934 <Reset_Handler+0xdc>)
    28fc:	4798      	blx	r3
        main();
    28fe:	4b0e      	ldr	r3, [pc, #56]	; (2938 <Reset_Handler+0xe0>)
    2900:	4798      	blx	r3
    2902:	e7fe      	b.n	2902 <Reset_Handler+0xaa>
    2904:	000040a4 	.word	0x000040a4
    2908:	20000000 	.word	0x20000000
    290c:	20000070 	.word	0x20000070
    2910:	20000004 	.word	0x20000004
    2914:	20000070 	.word	0x20000070
    2918:	20000614 	.word	0x20000614
    291c:	e000ed00 	.word	0xe000ed00
    2920:	00000000 	.word	0x00000000
    2924:	41007000 	.word	0x41007000
    2928:	41005000 	.word	0x41005000
    292c:	41004800 	.word	0x41004800
    2930:	41004000 	.word	0x41004000
    2934:	000032d1 	.word	0x000032d1
    2938:	00002c2d 	.word	0x00002c2d

0000293c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    293c:	b5f0      	push	{r4, r5, r6, r7, lr}
    293e:	46c6      	mov	lr, r8
    2940:	b500      	push	{lr}
    2942:	000c      	movs	r4, r1
    2944:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2946:	2800      	cmp	r0, #0
    2948:	d10f      	bne.n	296a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    294a:	2a00      	cmp	r2, #0
    294c:	dd11      	ble.n	2972 <_read+0x36>
    294e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2950:	4e09      	ldr	r6, [pc, #36]	; (2978 <_read+0x3c>)
    2952:	4d0a      	ldr	r5, [pc, #40]	; (297c <_read+0x40>)
    2954:	6830      	ldr	r0, [r6, #0]
    2956:	0021      	movs	r1, r4
    2958:	682b      	ldr	r3, [r5, #0]
    295a:	4798      	blx	r3
		ptr++;
    295c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    295e:	42bc      	cmp	r4, r7
    2960:	d1f8      	bne.n	2954 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2962:	4640      	mov	r0, r8
    2964:	bc04      	pop	{r2}
    2966:	4690      	mov	r8, r2
    2968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    296a:	2301      	movs	r3, #1
    296c:	425b      	negs	r3, r3
    296e:	4698      	mov	r8, r3
    2970:	e7f7      	b.n	2962 <_read+0x26>
	for (; len > 0; --len) {
    2972:	4680      	mov	r8, r0
    2974:	e7f5      	b.n	2962 <_read+0x26>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	2000060c 	.word	0x2000060c
    297c:	20000604 	.word	0x20000604

00002980 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
    2982:	46c6      	mov	lr, r8
    2984:	b500      	push	{lr}
    2986:	000e      	movs	r6, r1
    2988:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    298a:	3801      	subs	r0, #1
    298c:	2802      	cmp	r0, #2
    298e:	d810      	bhi.n	29b2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2990:	2a00      	cmp	r2, #0
    2992:	d011      	beq.n	29b8 <_write+0x38>
    2994:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2996:	4b0c      	ldr	r3, [pc, #48]	; (29c8 <_write+0x48>)
    2998:	4698      	mov	r8, r3
    299a:	4f0c      	ldr	r7, [pc, #48]	; (29cc <_write+0x4c>)
    299c:	4643      	mov	r3, r8
    299e:	6818      	ldr	r0, [r3, #0]
    29a0:	5d31      	ldrb	r1, [r6, r4]
    29a2:	683b      	ldr	r3, [r7, #0]
    29a4:	4798      	blx	r3
    29a6:	2800      	cmp	r0, #0
    29a8:	db08      	blt.n	29bc <_write+0x3c>
			return -1;
		}
		++nChars;
    29aa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    29ac:	42a5      	cmp	r5, r4
    29ae:	d1f5      	bne.n	299c <_write+0x1c>
    29b0:	e006      	b.n	29c0 <_write+0x40>
		return -1;
    29b2:	2401      	movs	r4, #1
    29b4:	4264      	negs	r4, r4
    29b6:	e003      	b.n	29c0 <_write+0x40>
	for (; len != 0; --len) {
    29b8:	0014      	movs	r4, r2
    29ba:	e001      	b.n	29c0 <_write+0x40>
			return -1;
    29bc:	2401      	movs	r4, #1
    29be:	4264      	negs	r4, r4
	}
	return nChars;
}
    29c0:	0020      	movs	r0, r4
    29c2:	bc04      	pop	{r2}
    29c4:	4690      	mov	r8, r2
    29c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c8:	2000060c 	.word	0x2000060c
    29cc:	20000608 	.word	0x20000608

000029d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29d2:	4a06      	ldr	r2, [pc, #24]	; (29ec <_sbrk+0x1c>)
    29d4:	6812      	ldr	r2, [r2, #0]
    29d6:	2a00      	cmp	r2, #0
    29d8:	d004      	beq.n	29e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    29da:	4a04      	ldr	r2, [pc, #16]	; (29ec <_sbrk+0x1c>)
    29dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    29de:	18c3      	adds	r3, r0, r3
    29e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    29e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    29e4:	4902      	ldr	r1, [pc, #8]	; (29f0 <_sbrk+0x20>)
    29e6:	4a01      	ldr	r2, [pc, #4]	; (29ec <_sbrk+0x1c>)
    29e8:	6011      	str	r1, [r2, #0]
    29ea:	e7f6      	b.n	29da <_sbrk+0xa>
    29ec:	200000d4 	.word	0x200000d4
    29f0:	20002618 	.word	0x20002618

000029f4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    29f4:	2001      	movs	r0, #1
    29f6:	4240      	negs	r0, r0
    29f8:	4770      	bx	lr

000029fa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    29fa:	2380      	movs	r3, #128	; 0x80
    29fc:	019b      	lsls	r3, r3, #6
    29fe:	604b      	str	r3, [r1, #4]

	return 0;
}
    2a00:	2000      	movs	r0, #0
    2a02:	4770      	bx	lr

00002a04 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2a04:	2001      	movs	r0, #1
    2a06:	4770      	bx	lr

00002a08 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2a08:	2000      	movs	r0, #0
    2a0a:	4770      	bx	lr

00002a0c <usart_rx_complete_handler>:
	}
}

static void usart_rx_complete_handler(struct usart_module *const module)
{
	usart_pkt_received = 1;
    2a0c:	2201      	movs	r2, #1
    2a0e:	4b0a      	ldr	r3, [pc, #40]	; (2a38 <usart_rx_complete_handler+0x2c>)
    2a10:	701a      	strb	r2, [r3, #0]
	usart_pkt = (uint8_t *)(module->rx_buffer_ptr - schedule_rx_length);
    2a12:	4b0a      	ldr	r3, [pc, #40]	; (2a3c <usart_rx_complete_handler+0x30>)
    2a14:	881a      	ldrh	r2, [r3, #0]
    2a16:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2a18:	1a9b      	subs	r3, r3, r2
    2a1a:	4a09      	ldr	r2, [pc, #36]	; (2a40 <usart_rx_complete_handler+0x34>)
    2a1c:	6013      	str	r3, [r2, #0]
	if (change_state) {
    2a1e:	4b09      	ldr	r3, [pc, #36]	; (2a44 <usart_rx_complete_handler+0x38>)
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d006      	beq.n	2a34 <usart_rx_complete_handler+0x28>
		usart_prot_handler_status = new_state;
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <usart_rx_complete_handler+0x3c>)
    2a28:	781a      	ldrb	r2, [r3, #0]
    2a2a:	4b08      	ldr	r3, [pc, #32]	; (2a4c <usart_rx_complete_handler+0x40>)
    2a2c:	701a      	strb	r2, [r3, #0]
		change_state = 0;
    2a2e:	2200      	movs	r2, #0
    2a30:	4b04      	ldr	r3, [pc, #16]	; (2a44 <usart_rx_complete_handler+0x38>)
    2a32:	701a      	strb	r2, [r3, #0]
	}
}
    2a34:	4770      	bx	lr
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	20000548 	.word	0x20000548
    2a3c:	20000118 	.word	0x20000118
    2a40:	20000544 	.word	0x20000544
    2a44:	2000010c 	.word	0x2000010c
    2a48:	2000010d 	.word	0x2000010d
    2a4c:	20000549 	.word	0x20000549

00002a50 <usart_tx_complete_handler>:
{
    2a50:	b510      	push	{r4, lr}
	if (schedule_rx) {
    2a52:	4b10      	ldr	r3, [pc, #64]	; (2a94 <usart_tx_complete_handler+0x44>)
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d00a      	beq.n	2a70 <usart_tx_complete_handler+0x20>
		if (schedule_rx_length == 1) {
    2a5a:	4b0f      	ldr	r3, [pc, #60]	; (2a98 <usart_tx_complete_handler+0x48>)
    2a5c:	881a      	ldrh	r2, [r3, #0]
    2a5e:	2a01      	cmp	r2, #1
    2a60:	d012      	beq.n	2a88 <usart_tx_complete_handler+0x38>
			usart_read_buffer_job((struct usart_module *)module, (uint8_t *)schedule_rx_buffer, schedule_rx_length);
    2a62:	4b0e      	ldr	r3, [pc, #56]	; (2a9c <usart_tx_complete_handler+0x4c>)
    2a64:	6819      	ldr	r1, [r3, #0]
    2a66:	4b0e      	ldr	r3, [pc, #56]	; (2aa0 <usart_tx_complete_handler+0x50>)
    2a68:	4798      	blx	r3
		schedule_rx = 0;
    2a6a:	2200      	movs	r2, #0
    2a6c:	4b09      	ldr	r3, [pc, #36]	; (2a94 <usart_tx_complete_handler+0x44>)
    2a6e:	701a      	strb	r2, [r3, #0]
	if (change_state) {
    2a70:	4b0c      	ldr	r3, [pc, #48]	; (2aa4 <usart_tx_complete_handler+0x54>)
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	2b00      	cmp	r3, #0
    2a76:	d006      	beq.n	2a86 <usart_tx_complete_handler+0x36>
		usart_prot_handler_status = new_state;
    2a78:	4b0b      	ldr	r3, [pc, #44]	; (2aa8 <usart_tx_complete_handler+0x58>)
    2a7a:	781a      	ldrb	r2, [r3, #0]
    2a7c:	4b0b      	ldr	r3, [pc, #44]	; (2aac <usart_tx_complete_handler+0x5c>)
    2a7e:	701a      	strb	r2, [r3, #0]
		change_state = 0;
    2a80:	2200      	movs	r2, #0
    2a82:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <usart_tx_complete_handler+0x54>)
    2a84:	701a      	strb	r2, [r3, #0]
}
    2a86:	bd10      	pop	{r4, pc}
			usart_read_job((struct usart_module *)module, schedule_rx_buffer);
    2a88:	4b04      	ldr	r3, [pc, #16]	; (2a9c <usart_tx_complete_handler+0x4c>)
    2a8a:	6819      	ldr	r1, [r3, #0]
    2a8c:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <usart_tx_complete_handler+0x60>)
    2a8e:	4798      	blx	r3
    2a90:	e7eb      	b.n	2a6a <usart_tx_complete_handler+0x1a>
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000110 	.word	0x20000110
    2a98:	20000118 	.word	0x20000118
    2a9c:	20000114 	.word	0x20000114
    2aa0:	00001f05 	.word	0x00001f05
    2aa4:	2000010c 	.word	0x2000010c
    2aa8:	2000010d 	.word	0x2000010d
    2aac:	20000549 	.word	0x20000549
    2ab0:	00001ed5 	.word	0x00001ed5

00002ab4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	b082      	sub	sp, #8
    2ab8:	0005      	movs	r5, r0
    2aba:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2abc:	2200      	movs	r2, #0
    2abe:	466b      	mov	r3, sp
    2ac0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2ac2:	4c06      	ldr	r4, [pc, #24]	; (2adc <usart_serial_getchar+0x28>)
    2ac4:	466b      	mov	r3, sp
    2ac6:	1d99      	adds	r1, r3, #6
    2ac8:	0028      	movs	r0, r5
    2aca:	47a0      	blx	r4
    2acc:	2800      	cmp	r0, #0
    2ace:	d1f9      	bne.n	2ac4 <usart_serial_getchar+0x10>

	*c = temp;
    2ad0:	466b      	mov	r3, sp
    2ad2:	3306      	adds	r3, #6
    2ad4:	881b      	ldrh	r3, [r3, #0]
    2ad6:	7033      	strb	r3, [r6, #0]
}
    2ad8:	b002      	add	sp, #8
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	00001da5 	.word	0x00001da5

00002ae0 <usart_serial_putchar>:
{
    2ae0:	b570      	push	{r4, r5, r6, lr}
    2ae2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2ae4:	b28c      	uxth	r4, r1
    2ae6:	4e03      	ldr	r6, [pc, #12]	; (2af4 <usart_serial_putchar+0x14>)
    2ae8:	0021      	movs	r1, r4
    2aea:	0028      	movs	r0, r5
    2aec:	47b0      	blx	r6
    2aee:	2800      	cmp	r0, #0
    2af0:	d1fa      	bne.n	2ae8 <usart_serial_putchar+0x8>
}
    2af2:	bd70      	pop	{r4, r5, r6, pc}
    2af4:	00001d79 	.word	0x00001d79

00002af8 <configure_console>:
 * \brief Configure UART console.
 *
 * \param baud UART baudrate to use.
 */
static void configure_console(uint32_t baud)
{
    2af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2afc:	2380      	movs	r3, #128	; 0x80
    2afe:	05db      	lsls	r3, r3, #23
    2b00:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2b02:	2300      	movs	r3, #0
    2b04:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2b06:	22ff      	movs	r2, #255	; 0xff
    2b08:	4669      	mov	r1, sp
    2b0a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2b0c:	2200      	movs	r2, #0
    2b0e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2b10:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2b12:	2501      	movs	r5, #1
    2b14:	2124      	movs	r1, #36	; 0x24
    2b16:	466c      	mov	r4, sp
    2b18:	5465      	strb	r5, [r4, r1]
	config->transmitter_enable = true;
    2b1a:	3101      	adds	r1, #1
    2b1c:	5465      	strb	r5, [r4, r1]
	config->clock_polarity_inverted = false;
    2b1e:	3101      	adds	r1, #1
    2b20:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2b22:	3101      	adds	r1, #1
    2b24:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2b26:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2b28:	3105      	adds	r1, #5
    2b2a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2b2c:	3101      	adds	r1, #1
    2b2e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2b30:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2b32:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2b34:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2b36:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2b38:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2b3a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2b3c:	2313      	movs	r3, #19
    2b3e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2b40:	7762      	strb	r2, [r4, #29]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    2b42:	23c4      	movs	r3, #196	; 0xc4
    2b44:	039b      	lsls	r3, r3, #14
    2b46:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    2b48:	2301      	movs	r3, #1
    2b4a:	425b      	negs	r3, r3
    2b4c:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    2b4e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    2b50:	4b22      	ldr	r3, [pc, #136]	; (2bdc <configure_console+0xe4>)
    2b52:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    2b54:	4b22      	ldr	r3, [pc, #136]	; (2be0 <configure_console+0xe8>)
    2b56:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = baud;
    2b58:	9008      	str	r0, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2b5a:	4c22      	ldr	r4, [pc, #136]	; (2be4 <configure_console+0xec>)
    2b5c:	4b22      	ldr	r3, [pc, #136]	; (2be8 <configure_console+0xf0>)
    2b5e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2b60:	4a22      	ldr	r2, [pc, #136]	; (2bec <configure_console+0xf4>)
    2b62:	4b23      	ldr	r3, [pc, #140]	; (2bf0 <configure_console+0xf8>)
    2b64:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2b66:	4a23      	ldr	r2, [pc, #140]	; (2bf4 <configure_console+0xfc>)
    2b68:	4b23      	ldr	r3, [pc, #140]	; (2bf8 <configure_console+0x100>)
    2b6a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2b6c:	466a      	mov	r2, sp
    2b6e:	4923      	ldr	r1, [pc, #140]	; (2bfc <configure_console+0x104>)
    2b70:	0020      	movs	r0, r4
    2b72:	4b23      	ldr	r3, [pc, #140]	; (2c00 <configure_console+0x108>)
    2b74:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2b76:	4f23      	ldr	r7, [pc, #140]	; (2c04 <configure_console+0x10c>)
    2b78:	683b      	ldr	r3, [r7, #0]
    2b7a:	6898      	ldr	r0, [r3, #8]
    2b7c:	2100      	movs	r1, #0
    2b7e:	4e22      	ldr	r6, [pc, #136]	; (2c08 <configure_console+0x110>)
    2b80:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2b82:	683b      	ldr	r3, [r7, #0]
    2b84:	6858      	ldr	r0, [r3, #4]
    2b86:	2100      	movs	r1, #0
    2b88:	47b0      	blx	r6
	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_register_callback(&cdc_uart_module, usart_rx_complete_handler, USART_CALLBACK_BUFFER_RECEIVED);
    2b8a:	2201      	movs	r2, #1
    2b8c:	491f      	ldr	r1, [pc, #124]	; (2c0c <configure_console+0x114>)
    2b8e:	0020      	movs	r0, r4
    2b90:	4e1f      	ldr	r6, [pc, #124]	; (2c10 <configure_console+0x118>)
    2b92:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, usart_tx_complete_handler, USART_CALLBACK_BUFFER_TRANSMITTED);
    2b94:	2200      	movs	r2, #0
    2b96:	491f      	ldr	r1, [pc, #124]	; (2c14 <configure_console+0x11c>)
    2b98:	0020      	movs	r0, r4
    2b9a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2b9c:	2231      	movs	r2, #49	; 0x31
    2b9e:	5ca3      	ldrb	r3, [r4, r2]
    2ba0:	2103      	movs	r1, #3
    2ba2:	430b      	orrs	r3, r1
    2ba4:	54a3      	strb	r3, [r4, r2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ba6:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2ba8:	0030      	movs	r0, r6
    2baa:	4b1b      	ldr	r3, [pc, #108]	; (2c18 <configure_console+0x120>)
    2bac:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bae:	231f      	movs	r3, #31
    2bb0:	4018      	ands	r0, r3
    2bb2:	4085      	lsls	r5, r0
    2bb4:	4b19      	ldr	r3, [pc, #100]	; (2c1c <configure_console+0x124>)
    2bb6:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bb8:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d1fc      	bne.n	2bba <configure_console+0xc2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2bc0:	6833      	ldr	r3, [r6, #0]
    2bc2:	2202      	movs	r2, #2
    2bc4:	4313      	orrs	r3, r2
    2bc6:	6033      	str	r3, [r6, #0]
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable(&cdc_uart_module);
	schedule_rx_length = 1;
    2bc8:	3a01      	subs	r2, #1
    2bca:	4b15      	ldr	r3, [pc, #84]	; (2c20 <configure_console+0x128>)
    2bcc:	801a      	strh	r2, [r3, #0]
	usart_read_job(&cdc_uart_module, &usart_cmd_recv_buffer[0]);
    2bce:	4915      	ldr	r1, [pc, #84]	; (2c24 <configure_console+0x12c>)
    2bd0:	4804      	ldr	r0, [pc, #16]	; (2be4 <configure_console+0xec>)
    2bd2:	4b15      	ldr	r3, [pc, #84]	; (2c28 <configure_console+0x130>)
    2bd4:	4798      	blx	r3
}
    2bd6:	b011      	add	sp, #68	; 0x44
    2bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	002a0003 	.word	0x002a0003
    2be0:	002b0003 	.word	0x002b0003
    2be4:	200000d8 	.word	0x200000d8
    2be8:	2000060c 	.word	0x2000060c
    2bec:	00002ae1 	.word	0x00002ae1
    2bf0:	20000608 	.word	0x20000608
    2bf4:	00002ab5 	.word	0x00002ab5
    2bf8:	20000604 	.word	0x20000604
    2bfc:	42001800 	.word	0x42001800
    2c00:	00001a35 	.word	0x00001a35
    2c04:	2000000c 	.word	0x2000000c
    2c08:	00003411 	.word	0x00003411
    2c0c:	00002a0d 	.word	0x00002a0d
    2c10:	00001ea1 	.word	0x00001ea1
    2c14:	00002a51 	.word	0x00002a51
    2c18:	00001509 	.word	0x00001509
    2c1c:	e000e100 	.word	0xe000e100
    2c20:	20000118 	.word	0x20000118
    2c24:	20000130 	.word	0x20000130
    2c28:	00001ed5 	.word	0x00001ed5

00002c2c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    2c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2e:	46c6      	mov	lr, r8
    2c30:	b500      	push	{lr}
    2c32:	b084      	sub	sp, #16
	/* Initialize the system. */
	system_init();
    2c34:	4bc8      	ldr	r3, [pc, #800]	; (2f58 <main+0x32c>)
    2c36:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console(CONF_STDIO_BAUDRATE);
    2c38:	20e1      	movs	r0, #225	; 0xe1
    2c3a:	0240      	lsls	r0, r0, #9
    2c3c:	4bc7      	ldr	r3, [pc, #796]	; (2f5c <main+0x330>)
    2c3e:	4798      	blx	r3

	/* Initialize WINC IOs. */
	nm_bsp_init();
    2c40:	4bc7      	ldr	r3, [pc, #796]	; (2f60 <main+0x334>)
    2c42:	4798      	blx	r3
	ret = m2m_wifi_download_mode();
    2c44:	4bc7      	ldr	r3, [pc, #796]	; (2f64 <main+0x338>)
    2c46:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    2c48:	2800      	cmp	r0, #0
    2c4a:	d000      	beq.n	2c4e <main+0x22>
    2c4c:	e252      	b.n	30f4 <main+0x4c8>
		if (usart_pkt_received) {
    2c4e:	4dc6      	ldr	r5, [pc, #792]	; (2f68 <main+0x33c>)
				usart_cmd_recv_buffer_u8[4] = 0xFF;
    2c50:	4bc6      	ldr	r3, [pc, #792]	; (2f6c <main+0x340>)
    2c52:	4698      	mov	r8, r3
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
    2c54:	3304      	adds	r3, #4
    2c56:	9301      	str	r3, [sp, #4]
    2c58:	e1d1      	b.n	2ffe <main+0x3d2>
			usart_pkt_received = 0;
    2c5a:	2200      	movs	r2, #0
    2c5c:	4bc2      	ldr	r3, [pc, #776]	; (2f68 <main+0x33c>)
    2c5e:	701a      	strb	r2, [r3, #0]
	switch (usart_prot_handler_status) {
    2c60:	4bc3      	ldr	r3, [pc, #780]	; (2f70 <main+0x344>)
    2c62:	781a      	ldrb	r2, [r3, #0]
    2c64:	2a04      	cmp	r2, #4
    2c66:	d900      	bls.n	2c6a <main+0x3e>
    2c68:	e117      	b.n	2e9a <main+0x26e>
    2c6a:	0093      	lsls	r3, r2, #2
    2c6c:	4ac1      	ldr	r2, [pc, #772]	; (2f74 <main+0x348>)
    2c6e:	58d3      	ldr	r3, [r2, r3]
    2c70:	469f      	mov	pc, r3
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
    2c72:	4bc1      	ldr	r3, [pc, #772]	; (2f78 <main+0x34c>)
    2c74:	881b      	ldrh	r3, [r3, #0]
    2c76:	2b01      	cmp	r3, #1
    2c78:	d011      	beq.n	2c9e <main+0x72>
			usart_cmd_recv_buffer[0] = 0xFF;
    2c7a:	4bbc      	ldr	r3, [pc, #752]	; (2f6c <main+0x340>)
    2c7c:	22ff      	movs	r2, #255	; 0xff
    2c7e:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2c80:	4abe      	ldr	r2, [pc, #760]	; (2f7c <main+0x350>)
    2c82:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
    2c84:	2201      	movs	r2, #1
    2c86:	4bbc      	ldr	r3, [pc, #752]	; (2f78 <main+0x34c>)
    2c88:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
    2c8a:	4bbd      	ldr	r3, [pc, #756]	; (2f80 <main+0x354>)
    2c8c:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    2c8e:	ab02      	add	r3, sp, #8
    2c90:	1d99      	adds	r1, r3, #6
    2c92:	23ea      	movs	r3, #234	; 0xea
    2c94:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    2c96:	48bb      	ldr	r0, [pc, #748]	; (2f84 <main+0x358>)
    2c98:	4bbb      	ldr	r3, [pc, #748]	; (2f88 <main+0x35c>)
    2c9a:	4798      	blx	r3
    2c9c:	e1b3      	b.n	3006 <main+0x3da>
			if ((usart_pkt[0] == 0x12)) {
    2c9e:	4bbb      	ldr	r3, [pc, #748]	; (2f8c <main+0x360>)
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	781b      	ldrb	r3, [r3, #0]
    2ca4:	2b12      	cmp	r3, #18
    2ca6:	d00e      	beq.n	2cc6 <main+0x9a>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2ca8:	49b0      	ldr	r1, [pc, #704]	; (2f6c <main+0x340>)
    2caa:	4ab4      	ldr	r2, [pc, #720]	; (2f7c <main+0x350>)
    2cac:	6011      	str	r1, [r2, #0]
				schedule_rx_length = 1;
    2cae:	2101      	movs	r1, #1
    2cb0:	4ab1      	ldr	r2, [pc, #708]	; (2f78 <main+0x34c>)
    2cb2:	8011      	strh	r1, [r2, #0]
				schedule_rx = 1;
    2cb4:	4ab2      	ldr	r2, [pc, #712]	; (2f80 <main+0x354>)
    2cb6:	7011      	strb	r1, [r2, #0]
				uartdata = usart_pkt[0];
    2cb8:	aa02      	add	r2, sp, #8
    2cba:	1d91      	adds	r1, r2, #6
    2cbc:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    2cbe:	48b1      	ldr	r0, [pc, #708]	; (2f84 <main+0x358>)
    2cc0:	4bb1      	ldr	r3, [pc, #708]	; (2f88 <main+0x35c>)
    2cc2:	4798      	blx	r3
    2cc4:	e19f      	b.n	3006 <main+0x3da>
				usart_prot_handler_status = WAIT_SYNC;
    2cc6:	3b11      	subs	r3, #17
    2cc8:	4aa9      	ldr	r2, [pc, #676]	; (2f70 <main+0x344>)
    2cca:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    2ccc:	4aa7      	ldr	r2, [pc, #668]	; (2f6c <main+0x340>)
    2cce:	21ff      	movs	r1, #255	; 0xff
    2cd0:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2cd2:	49aa      	ldr	r1, [pc, #680]	; (2f7c <main+0x350>)
    2cd4:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
    2cd6:	4aa8      	ldr	r2, [pc, #672]	; (2f78 <main+0x34c>)
    2cd8:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
    2cda:	4ba9      	ldr	r3, [pc, #676]	; (2f80 <main+0x354>)
    2cdc:	2201      	movs	r2, #1
    2cde:	701a      	strb	r2, [r3, #0]
				uartdata = 0x5B;
    2ce0:	ab02      	add	r3, sp, #8
    2ce2:	1d99      	adds	r1, r3, #6
    2ce4:	235b      	movs	r3, #91	; 0x5b
    2ce6:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    2ce8:	48a6      	ldr	r0, [pc, #664]	; (2f84 <main+0x358>)
    2cea:	4ba7      	ldr	r3, [pc, #668]	; (2f88 <main+0x35c>)
    2cec:	4798      	blx	r3
    2cee:	e18a      	b.n	3006 <main+0x3da>
			if (usart_pkt[0] == 0xA5) {
    2cf0:	4ba6      	ldr	r3, [pc, #664]	; (2f8c <main+0x360>)
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	781b      	ldrb	r3, [r3, #0]
    2cf6:	2ba5      	cmp	r3, #165	; 0xa5
    2cf8:	d017      	beq.n	2d2a <main+0xfe>
			} else if (usart_pkt[0] == 0x12) {
    2cfa:	2b12      	cmp	r3, #18
    2cfc:	d023      	beq.n	2d46 <main+0x11a>
				if (!uart_reconfigure) {
    2cfe:	4ba4      	ldr	r3, [pc, #656]	; (2f90 <main+0x364>)
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d131      	bne.n	2d6a <main+0x13e>
					uartdata = 0x5A;
    2d06:	ab02      	add	r3, sp, #8
    2d08:	1d99      	adds	r1, r3, #6
    2d0a:	235a      	movs	r3, #90	; 0x5a
    2d0c:	800b      	strh	r3, [r1, #0]
					usart_cmd_recv_buffer[0] = 0xFF;
    2d0e:	4b97      	ldr	r3, [pc, #604]	; (2f6c <main+0x340>)
    2d10:	22ff      	movs	r2, #255	; 0xff
    2d12:	801a      	strh	r2, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2d14:	4a99      	ldr	r2, [pc, #612]	; (2f7c <main+0x350>)
    2d16:	6013      	str	r3, [r2, #0]
					schedule_rx_length = 1;
    2d18:	2201      	movs	r2, #1
    2d1a:	4b97      	ldr	r3, [pc, #604]	; (2f78 <main+0x34c>)
    2d1c:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
    2d1e:	4b98      	ldr	r3, [pc, #608]	; (2f80 <main+0x354>)
    2d20:	701a      	strb	r2, [r3, #0]
					usart_write_job(module, &uartdata);
    2d22:	4898      	ldr	r0, [pc, #608]	; (2f84 <main+0x358>)
    2d24:	4b98      	ldr	r3, [pc, #608]	; (2f88 <main+0x35c>)
    2d26:	4798      	blx	r3
    2d28:	e16d      	b.n	3006 <main+0x3da>
				usart_prot_handler_status = WAITING;
    2d2a:	2202      	movs	r2, #2
    2d2c:	4b90      	ldr	r3, [pc, #576]	; (2f70 <main+0x344>)
    2d2e:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer_u8[4] = 0xFF;
    2d30:	23ff      	movs	r3, #255	; 0xff
    2d32:	4642      	mov	r2, r8
    2d34:	7113      	strb	r3, [r2, #4]
				schedule_rx_length = 1;
    2d36:	2201      	movs	r2, #1
    2d38:	4b8f      	ldr	r3, [pc, #572]	; (2f78 <main+0x34c>)
    2d3a:	801a      	strh	r2, [r3, #0]
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
    2d3c:	9901      	ldr	r1, [sp, #4]
    2d3e:	4891      	ldr	r0, [pc, #580]	; (2f84 <main+0x358>)
    2d40:	4b94      	ldr	r3, [pc, #592]	; (2f94 <main+0x368>)
    2d42:	4798      	blx	r3
    2d44:	e15f      	b.n	3006 <main+0x3da>
				uartdata = 0x5B;
    2d46:	ab02      	add	r3, sp, #8
    2d48:	1d99      	adds	r1, r3, #6
    2d4a:	235b      	movs	r3, #91	; 0x5b
    2d4c:	800b      	strh	r3, [r1, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    2d4e:	4b87      	ldr	r3, [pc, #540]	; (2f6c <main+0x340>)
    2d50:	22ff      	movs	r2, #255	; 0xff
    2d52:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2d54:	4a89      	ldr	r2, [pc, #548]	; (2f7c <main+0x350>)
    2d56:	6013      	str	r3, [r2, #0]
				schedule_rx_length = 1;
    2d58:	2201      	movs	r2, #1
    2d5a:	4b87      	ldr	r3, [pc, #540]	; (2f78 <main+0x34c>)
    2d5c:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    2d5e:	4b88      	ldr	r3, [pc, #544]	; (2f80 <main+0x354>)
    2d60:	701a      	strb	r2, [r3, #0]
				usart_write_job(module, &uartdata);
    2d62:	4888      	ldr	r0, [pc, #544]	; (2f84 <main+0x358>)
    2d64:	4b88      	ldr	r3, [pc, #544]	; (2f88 <main+0x35c>)
    2d66:	4798      	blx	r3
    2d68:	e14d      	b.n	3006 <main+0x3da>
					schedule_rx_length = 1;
    2d6a:	2201      	movs	r2, #1
    2d6c:	4b82      	ldr	r3, [pc, #520]	; (2f78 <main+0x34c>)
    2d6e:	801a      	strh	r2, [r3, #0]
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
    2d70:	497e      	ldr	r1, [pc, #504]	; (2f6c <main+0x340>)
    2d72:	4884      	ldr	r0, [pc, #528]	; (2f84 <main+0x358>)
    2d74:	4b87      	ldr	r3, [pc, #540]	; (2f94 <main+0x368>)
    2d76:	4798      	blx	r3
    2d78:	e145      	b.n	3006 <main+0x3da>
			usart_prot_handler_status = COLLECTING_HDR;
    2d7a:	2203      	movs	r2, #3
    2d7c:	4b7c      	ldr	r3, [pc, #496]	; (2f70 <main+0x344>)
    2d7e:	701a      	strb	r2, [r3, #0]
			uart_cmd_buf = usart_pkt;
    2d80:	4b82      	ldr	r3, [pc, #520]	; (2f8c <main+0x360>)
    2d82:	681a      	ldr	r2, [r3, #0]
    2d84:	4b84      	ldr	r3, [pc, #528]	; (2f98 <main+0x36c>)
    2d86:	601a      	str	r2, [r3, #0]
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
    2d88:	220b      	movs	r2, #11
    2d8a:	4b7b      	ldr	r3, [pc, #492]	; (2f78 <main+0x34c>)
    2d8c:	801a      	strh	r2, [r3, #0]
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
    2d8e:	487d      	ldr	r0, [pc, #500]	; (2f84 <main+0x358>)
    2d90:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2d92:	4b82      	ldr	r3, [pc, #520]	; (2f9c <main+0x370>)
    2d94:	4798      	blx	r3
    2d96:	e136      	b.n	3006 <main+0x3da>
				checksum ^= *(((uint8_t *)uart_cmd_buf) + i);
    2d98:	4b7f      	ldr	r3, [pc, #508]	; (2f98 <main+0x36c>)
    2d9a:	681c      	ldr	r4, [r3, #0]
    2d9c:	0023      	movs	r3, r4
    2d9e:	0021      	movs	r1, r4
    2da0:	310c      	adds	r1, #12
    2da2:	2000      	movs	r0, #0
    2da4:	e000      	b.n	2da8 <main+0x17c>
    2da6:	0010      	movs	r0, r2
    2da8:	781f      	ldrb	r7, [r3, #0]
    2daa:	003a      	movs	r2, r7
    2dac:	4042      	eors	r2, r0
    2dae:	b2d2      	uxtb	r2, r2
    2db0:	3301      	adds	r3, #1
			for (i = 0; i < (USART_CMD_HDR_LENGTH); i++) {
    2db2:	428b      	cmp	r3, r1
    2db4:	d1f7      	bne.n	2da6 <main+0x17a>
			if (checksum != 0) {
    2db6:	4287      	cmp	r7, r0
    2db8:	d11b      	bne.n	2df2 <main+0x1c6>
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
    2dba:	4f79      	ldr	r7, [pc, #484]	; (2fa0 <main+0x374>)
    2dbc:	220c      	movs	r2, #12
    2dbe:	0021      	movs	r1, r4
    2dc0:	0038      	movs	r0, r7
    2dc2:	4b78      	ldr	r3, [pc, #480]	; (2fa4 <main+0x378>)
    2dc4:	4798      	blx	r3
				if ((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
    2dc6:	683a      	ldr	r2, [r7, #0]
    2dc8:	783b      	ldrb	r3, [r7, #0]
    2dca:	2b03      	cmp	r3, #3
    2dcc:	d026      	beq.n	2e1c <main+0x1f0>
				} else if ((uart_cmd.cmd & 0xFF) == WRITE_REG) {
    2dce:	2b01      	cmp	r3, #1
    2dd0:	d03a      	beq.n	2e48 <main+0x21c>
					serial_command_pending = 1;
    2dd2:	2301      	movs	r3, #1
    2dd4:	4a74      	ldr	r2, [pc, #464]	; (2fa8 <main+0x37c>)
    2dd6:	7013      	strb	r3, [r2, #0]
					change_state = 1;
    2dd8:	4a74      	ldr	r2, [pc, #464]	; (2fac <main+0x380>)
    2dda:	7013      	strb	r3, [r2, #0]
					new_state = PROCESSING;
    2ddc:	2205      	movs	r2, #5
    2dde:	4b74      	ldr	r3, [pc, #464]	; (2fb0 <main+0x384>)
    2de0:	701a      	strb	r2, [r3, #0]
					uartdata = 0xAC;
    2de2:	ab02      	add	r3, sp, #8
    2de4:	1d99      	adds	r1, r3, #6
    2de6:	23ac      	movs	r3, #172	; 0xac
    2de8:	800b      	strh	r3, [r1, #0]
					usart_write_job(module, &uartdata);
    2dea:	4866      	ldr	r0, [pc, #408]	; (2f84 <main+0x358>)
    2dec:	4b66      	ldr	r3, [pc, #408]	; (2f88 <main+0x35c>)
    2dee:	4798      	blx	r3
    2df0:	e109      	b.n	3006 <main+0x3da>
				usart_prot_handler_status = WAIT_SYNC;
    2df2:	2301      	movs	r3, #1
    2df4:	4a5e      	ldr	r2, [pc, #376]	; (2f70 <main+0x344>)
    2df6:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
    2df8:	4a5c      	ldr	r2, [pc, #368]	; (2f6c <main+0x340>)
    2dfa:	21ff      	movs	r1, #255	; 0xff
    2dfc:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2dfe:	495f      	ldr	r1, [pc, #380]	; (2f7c <main+0x350>)
    2e00:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
    2e02:	4a5d      	ldr	r2, [pc, #372]	; (2f78 <main+0x34c>)
    2e04:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
    2e06:	4b5e      	ldr	r3, [pc, #376]	; (2f80 <main+0x354>)
    2e08:	2201      	movs	r2, #1
    2e0a:	701a      	strb	r2, [r3, #0]
				uartdata = 0x5A;
    2e0c:	ab02      	add	r3, sp, #8
    2e0e:	1d99      	adds	r1, r3, #6
    2e10:	235a      	movs	r3, #90	; 0x5a
    2e12:	800b      	strh	r3, [r1, #0]
				usart_write_job(module, &uartdata);
    2e14:	485b      	ldr	r0, [pc, #364]	; (2f84 <main+0x358>)
    2e16:	4b5c      	ldr	r3, [pc, #368]	; (2f88 <main+0x35c>)
    2e18:	4798      	blx	r3
    2e1a:	e0f4      	b.n	3006 <main+0x3da>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
    2e1c:	2104      	movs	r1, #4
    2e1e:	4b54      	ldr	r3, [pc, #336]	; (2f70 <main+0x344>)
    2e20:	7019      	strb	r1, [r3, #0]
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
    2e22:	0c12      	lsrs	r2, r2, #16
    2e24:	4b63      	ldr	r3, [pc, #396]	; (2fb4 <main+0x388>)
    2e26:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
    2e28:	3903      	subs	r1, #3
    2e2a:	4b55      	ldr	r3, [pc, #340]	; (2f80 <main+0x354>)
    2e2c:	7019      	strb	r1, [r3, #0]
					schedule_rx_buffer = &usart_payload_buffer[0];
    2e2e:	4962      	ldr	r1, [pc, #392]	; (2fb8 <main+0x38c>)
    2e30:	4b52      	ldr	r3, [pc, #328]	; (2f7c <main+0x350>)
    2e32:	6019      	str	r1, [r3, #0]
					schedule_rx_length = payload_length;
    2e34:	4b50      	ldr	r3, [pc, #320]	; (2f78 <main+0x34c>)
    2e36:	801a      	strh	r2, [r3, #0]
					uartdata = 0xAC;
    2e38:	ab02      	add	r3, sp, #8
    2e3a:	1d99      	adds	r1, r3, #6
    2e3c:	23ac      	movs	r3, #172	; 0xac
    2e3e:	800b      	strh	r3, [r1, #0]
					usart_write_job(module, &uartdata);
    2e40:	4850      	ldr	r0, [pc, #320]	; (2f84 <main+0x358>)
    2e42:	4b51      	ldr	r3, [pc, #324]	; (2f88 <main+0x35c>)
    2e44:	4798      	blx	r3
    2e46:	e0de      	b.n	3006 <main+0x3da>
					serial_command_pending = 1;
    2e48:	2201      	movs	r2, #1
    2e4a:	4b57      	ldr	r3, [pc, #348]	; (2fa8 <main+0x37c>)
    2e4c:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = PROCESSING;
    2e4e:	3204      	adds	r2, #4
    2e50:	4b47      	ldr	r3, [pc, #284]	; (2f70 <main+0x344>)
    2e52:	701a      	strb	r2, [r3, #0]
    2e54:	e0d7      	b.n	3006 <main+0x3da>
		if ((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
    2e56:	4b48      	ldr	r3, [pc, #288]	; (2f78 <main+0x34c>)
    2e58:	881a      	ldrh	r2, [r3, #0]
    2e5a:	4b56      	ldr	r3, [pc, #344]	; (2fb4 <main+0x388>)
    2e5c:	881b      	ldrh	r3, [r3, #0]
    2e5e:	429a      	cmp	r2, r3
    2e60:	d014      	beq.n	2e8c <main+0x260>
			usart_prot_handler_status = WAIT_SYNC;
    2e62:	2201      	movs	r2, #1
    2e64:	4b42      	ldr	r3, [pc, #264]	; (2f70 <main+0x344>)
    2e66:	701a      	strb	r2, [r3, #0]
			uartdata = 0x5A;
    2e68:	ab02      	add	r3, sp, #8
    2e6a:	1d99      	adds	r1, r3, #6
    2e6c:	235a      	movs	r3, #90	; 0x5a
    2e6e:	800b      	strh	r3, [r1, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
    2e70:	4b3e      	ldr	r3, [pc, #248]	; (2f6c <main+0x340>)
    2e72:	20ff      	movs	r0, #255	; 0xff
    2e74:	8018      	strh	r0, [r3, #0]
			schedule_rx_length = 1;
    2e76:	4840      	ldr	r0, [pc, #256]	; (2f78 <main+0x34c>)
    2e78:	8002      	strh	r2, [r0, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2e7a:	4a40      	ldr	r2, [pc, #256]	; (2f7c <main+0x350>)
    2e7c:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
    2e7e:	4b40      	ldr	r3, [pc, #256]	; (2f80 <main+0x354>)
    2e80:	2201      	movs	r2, #1
    2e82:	701a      	strb	r2, [r3, #0]
			usart_write_job(module, &uartdata);
    2e84:	483f      	ldr	r0, [pc, #252]	; (2f84 <main+0x358>)
    2e86:	4b40      	ldr	r3, [pc, #256]	; (2f88 <main+0x35c>)
    2e88:	4798      	blx	r3
    2e8a:	e0bc      	b.n	3006 <main+0x3da>
			serial_command_pending = 1;
    2e8c:	2201      	movs	r2, #1
    2e8e:	4b46      	ldr	r3, [pc, #280]	; (2fa8 <main+0x37c>)
    2e90:	701a      	strb	r2, [r3, #0]
			usart_prot_handler_status = PROCESSING;
    2e92:	3204      	adds	r2, #4
    2e94:	4b36      	ldr	r3, [pc, #216]	; (2f70 <main+0x344>)
    2e96:	701a      	strb	r2, [r3, #0]
    2e98:	e0b5      	b.n	3006 <main+0x3da>
		usart_prot_handler_status = WAIT_SYNC;
    2e9a:	2201      	movs	r2, #1
    2e9c:	4b34      	ldr	r3, [pc, #208]	; (2f70 <main+0x344>)
    2e9e:	701a      	strb	r2, [r3, #0]
    2ea0:	e0b1      	b.n	3006 <main+0x3da>
			usart_err_on_reception = 0;
    2ea2:	2200      	movs	r2, #0
    2ea4:	4b45      	ldr	r3, [pc, #276]	; (2fbc <main+0x390>)
    2ea6:	701a      	strb	r2, [r3, #0]
	switch (usart_prot_handler_status) {
    2ea8:	4b31      	ldr	r3, [pc, #196]	; (2f70 <main+0x344>)
    2eaa:	781a      	ldrb	r2, [r3, #0]
    2eac:	2a04      	cmp	r2, #4
    2eae:	d84e      	bhi.n	2f4e <main+0x322>
    2eb0:	0093      	lsls	r3, r2, #2
    2eb2:	4a43      	ldr	r2, [pc, #268]	; (2fc0 <main+0x394>)
    2eb4:	58d3      	ldr	r3, [r2, r3]
    2eb6:	469f      	mov	pc, r3
			usart_cmd_recv_buffer[0] = 0xFF;
    2eb8:	4b2c      	ldr	r3, [pc, #176]	; (2f6c <main+0x340>)
    2eba:	22ff      	movs	r2, #255	; 0xff
    2ebc:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2ebe:	4a2f      	ldr	r2, [pc, #188]	; (2f7c <main+0x350>)
    2ec0:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
    2ec2:	2201      	movs	r2, #1
    2ec4:	4b2c      	ldr	r3, [pc, #176]	; (2f78 <main+0x34c>)
    2ec6:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
    2ec8:	4b2d      	ldr	r3, [pc, #180]	; (2f80 <main+0x354>)
    2eca:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    2ecc:	ab02      	add	r3, sp, #8
    2ece:	1d99      	adds	r1, r3, #6
    2ed0:	23ea      	movs	r3, #234	; 0xea
    2ed2:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    2ed4:	482b      	ldr	r0, [pc, #172]	; (2f84 <main+0x358>)
    2ed6:	4b2c      	ldr	r3, [pc, #176]	; (2f88 <main+0x35c>)
    2ed8:	4798      	blx	r3
    2eda:	e099      	b.n	3010 <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    2edc:	2301      	movs	r3, #1
    2ede:	4a24      	ldr	r2, [pc, #144]	; (2f70 <main+0x344>)
    2ee0:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2ee2:	4922      	ldr	r1, [pc, #136]	; (2f6c <main+0x340>)
    2ee4:	4a25      	ldr	r2, [pc, #148]	; (2f7c <main+0x350>)
    2ee6:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
    2ee8:	4a25      	ldr	r2, [pc, #148]	; (2f80 <main+0x354>)
    2eea:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
    2eec:	4a22      	ldr	r2, [pc, #136]	; (2f78 <main+0x34c>)
    2eee:	8013      	strh	r3, [r2, #0]
			uartdata = 0xEA;
    2ef0:	ab02      	add	r3, sp, #8
    2ef2:	1d99      	adds	r1, r3, #6
    2ef4:	23ea      	movs	r3, #234	; 0xea
    2ef6:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    2ef8:	4822      	ldr	r0, [pc, #136]	; (2f84 <main+0x358>)
    2efa:	4b23      	ldr	r3, [pc, #140]	; (2f88 <main+0x35c>)
    2efc:	4798      	blx	r3
    2efe:	e087      	b.n	3010 <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    2f00:	2301      	movs	r3, #1
    2f02:	4a1b      	ldr	r2, [pc, #108]	; (2f70 <main+0x344>)
    2f04:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2f06:	4919      	ldr	r1, [pc, #100]	; (2f6c <main+0x340>)
    2f08:	4a1c      	ldr	r2, [pc, #112]	; (2f7c <main+0x350>)
    2f0a:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
    2f0c:	4a1c      	ldr	r2, [pc, #112]	; (2f80 <main+0x354>)
    2f0e:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
    2f10:	4a19      	ldr	r2, [pc, #100]	; (2f78 <main+0x34c>)
    2f12:	8013      	strh	r3, [r2, #0]
			uartdata = 0xEA;
    2f14:	ab02      	add	r3, sp, #8
    2f16:	1d99      	adds	r1, r3, #6
    2f18:	23ea      	movs	r3, #234	; 0xea
    2f1a:	800b      	strh	r3, [r1, #0]
			usart_write_job(module, &uartdata);
    2f1c:	4819      	ldr	r0, [pc, #100]	; (2f84 <main+0x358>)
    2f1e:	4b1a      	ldr	r3, [pc, #104]	; (2f88 <main+0x35c>)
    2f20:	4798      	blx	r3
    2f22:	e075      	b.n	3010 <main+0x3e4>
			usart_prot_handler_status = WAIT_SYNC;
    2f24:	2201      	movs	r2, #1
    2f26:	4b12      	ldr	r3, [pc, #72]	; (2f70 <main+0x344>)
    2f28:	701a      	strb	r2, [r3, #0]
			uartdata = 0xEA;
    2f2a:	ab02      	add	r3, sp, #8
    2f2c:	1d99      	adds	r1, r3, #6
    2f2e:	23ea      	movs	r3, #234	; 0xea
    2f30:	800b      	strh	r3, [r1, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
    2f32:	4b0e      	ldr	r3, [pc, #56]	; (2f6c <main+0x340>)
    2f34:	20ff      	movs	r0, #255	; 0xff
    2f36:	8018      	strh	r0, [r3, #0]
			schedule_rx_length = 1;
    2f38:	480f      	ldr	r0, [pc, #60]	; (2f78 <main+0x34c>)
    2f3a:	8002      	strh	r2, [r0, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2f3c:	4a0f      	ldr	r2, [pc, #60]	; (2f7c <main+0x350>)
    2f3e:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
    2f40:	4b0f      	ldr	r3, [pc, #60]	; (2f80 <main+0x354>)
    2f42:	2201      	movs	r2, #1
    2f44:	701a      	strb	r2, [r3, #0]
			usart_write_job(module, &uartdata);
    2f46:	480f      	ldr	r0, [pc, #60]	; (2f84 <main+0x358>)
    2f48:	4b0f      	ldr	r3, [pc, #60]	; (2f88 <main+0x35c>)
    2f4a:	4798      	blx	r3
    2f4c:	e060      	b.n	3010 <main+0x3e4>
		usart_prot_handler_status = WAIT_SYNC;
    2f4e:	2201      	movs	r2, #1
    2f50:	4b07      	ldr	r3, [pc, #28]	; (2f70 <main+0x344>)
    2f52:	701a      	strb	r2, [r3, #0]
    2f54:	e05c      	b.n	3010 <main+0x3e4>
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	00002829 	.word	0x00002829
    2f5c:	00002af9 	.word	0x00002af9
    2f60:	000001c1 	.word	0x000001c1
    2f64:	0000045d 	.word	0x0000045d
    2f68:	20000548 	.word	0x20000548
    2f6c:	20000130 	.word	0x20000130
    2f70:	20000549 	.word	0x20000549
    2f74:	00003fb0 	.word	0x00003fb0
    2f78:	20000118 	.word	0x20000118
    2f7c:	20000114 	.word	0x20000114
    2f80:	20000110 	.word	0x20000110
    2f84:	200000d8 	.word	0x200000d8
    2f88:	00001eb9 	.word	0x00001eb9
    2f8c:	20000544 	.word	0x20000544
    2f90:	2000012c 	.word	0x2000012c
    2f94:	00001ed5 	.word	0x00001ed5
    2f98:	20000128 	.word	0x20000128
    2f9c:	00001f05 	.word	0x00001f05
    2fa0:	2000011c 	.word	0x2000011c
    2fa4:	00003319 	.word	0x00003319
    2fa8:	2000011a 	.word	0x2000011a
    2fac:	2000010c 	.word	0x2000010c
    2fb0:	2000010d 	.word	0x2000010d
    2fb4:	2000010e 	.word	0x2000010e
    2fb8:	20000144 	.word	0x20000144
    2fbc:	20000140 	.word	0x20000140
    2fc0:	00003fc4 	.word	0x00003fc4
				temp = nm_read_reg(uart_cmd.addr);
    2fc4:	4b4f      	ldr	r3, [pc, #316]	; (3104 <main+0x4d8>)
    2fc6:	6858      	ldr	r0, [r3, #4]
    2fc8:	4b4f      	ldr	r3, [pc, #316]	; (3108 <main+0x4dc>)
    2fca:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    2fcc:	4a4f      	ldr	r2, [pc, #316]	; (310c <main+0x4e0>)
    2fce:	4b50      	ldr	r3, [pc, #320]	; (3110 <main+0x4e4>)
    2fd0:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    2fd2:	2201      	movs	r2, #1
    2fd4:	4b4f      	ldr	r3, [pc, #316]	; (3114 <main+0x4e8>)
    2fd6:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    2fd8:	4b4f      	ldr	r3, [pc, #316]	; (3118 <main+0x4ec>)
    2fda:	701a      	strb	r2, [r3, #0]
				usart_prot_handler_status = WAIT_SYNC;
    2fdc:	4b4f      	ldr	r3, [pc, #316]	; (311c <main+0x4f0>)
    2fde:	701a      	strb	r2, [r3, #0]
		tx_data[i] = tx_data[j];
    2fe0:	494f      	ldr	r1, [pc, #316]	; (3120 <main+0x4f4>)
				usart_tx_buffer[3] = (uint8)(temp >> 24);
    2fe2:	0e03      	lsrs	r3, r0, #24
    2fe4:	700b      	strb	r3, [r1, #0]
				usart_tx_buffer[0] = (uint8)(temp >> 0);
    2fe6:	70c8      	strb	r0, [r1, #3]
				usart_tx_buffer[2] = (uint8)(temp >> 16);
    2fe8:	0c03      	lsrs	r3, r0, #16
    2fea:	704b      	strb	r3, [r1, #1]
				usart_tx_buffer[1] = (uint8)(temp >> 8);
    2fec:	0a00      	lsrs	r0, r0, #8
    2fee:	7088      	strb	r0, [r1, #2]
	usart_write_buffer_job(module, tx_data, length);
    2ff0:	2204      	movs	r2, #4
    2ff2:	484c      	ldr	r0, [pc, #304]	; (3124 <main+0x4f8>)
    2ff4:	4b4c      	ldr	r3, [pc, #304]	; (3128 <main+0x4fc>)
    2ff6:	4798      	blx	r3
			serial_command_pending = 0;
    2ff8:	2200      	movs	r2, #0
    2ffa:	4b4c      	ldr	r3, [pc, #304]	; (312c <main+0x500>)
    2ffc:	701a      	strb	r2, [r3, #0]
		if (usart_pkt_received) {
    2ffe:	782b      	ldrb	r3, [r5, #0]
    3000:	2b00      	cmp	r3, #0
    3002:	d000      	beq.n	3006 <main+0x3da>
    3004:	e629      	b.n	2c5a <main+0x2e>
		if (usart_err_on_reception) {
    3006:	4b4a      	ldr	r3, [pc, #296]	; (3130 <main+0x504>)
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	2b00      	cmp	r3, #0
    300c:	d000      	beq.n	3010 <main+0x3e4>
    300e:	e748      	b.n	2ea2 <main+0x276>
		if (serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
    3010:	4b46      	ldr	r3, [pc, #280]	; (312c <main+0x500>)
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	2b00      	cmp	r3, #0
    3016:	d0f2      	beq.n	2ffe <main+0x3d2>
    3018:	4b40      	ldr	r3, [pc, #256]	; (311c <main+0x4f0>)
    301a:	781b      	ldrb	r3, [r3, #0]
    301c:	2b05      	cmp	r3, #5
    301e:	d1ee      	bne.n	2ffe <main+0x3d2>
			switch ((uart_cmd.cmd) & 0xFF) {
    3020:	4b38      	ldr	r3, [pc, #224]	; (3104 <main+0x4d8>)
    3022:	681a      	ldr	r2, [r3, #0]
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	2b05      	cmp	r3, #5
    3028:	d8e6      	bhi.n	2ff8 <main+0x3cc>
    302a:	009b      	lsls	r3, r3, #2
    302c:	4941      	ldr	r1, [pc, #260]	; (3134 <main+0x508>)
    302e:	58cb      	ldr	r3, [r1, r3]
    3030:	469f      	mov	pc, r3
				nm_write_reg(uart_cmd.addr, uart_cmd.val);
    3032:	4b34      	ldr	r3, [pc, #208]	; (3104 <main+0x4d8>)
    3034:	6899      	ldr	r1, [r3, #8]
    3036:	6858      	ldr	r0, [r3, #4]
    3038:	4b3f      	ldr	r3, [pc, #252]	; (3138 <main+0x50c>)
    303a:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    303c:	4a33      	ldr	r2, [pc, #204]	; (310c <main+0x4e0>)
    303e:	4b34      	ldr	r3, [pc, #208]	; (3110 <main+0x4e4>)
    3040:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    3042:	2201      	movs	r2, #1
    3044:	4b33      	ldr	r3, [pc, #204]	; (3114 <main+0x4e8>)
    3046:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    3048:	4b33      	ldr	r3, [pc, #204]	; (3118 <main+0x4ec>)
    304a:	701a      	strb	r2, [r3, #0]
				uartdata = 0xAC;
    304c:	a903      	add	r1, sp, #12
    304e:	23ac      	movs	r3, #172	; 0xac
    3050:	800b      	strh	r3, [r1, #0]
				usart_prot_handler_status = WAIT_SYNC;
    3052:	4b32      	ldr	r3, [pc, #200]	; (311c <main+0x4f0>)
    3054:	701a      	strb	r2, [r3, #0]
				usart_write_job(&cdc_uart_module, &uartdata);
    3056:	4833      	ldr	r0, [pc, #204]	; (3124 <main+0x4f8>)
    3058:	4b38      	ldr	r3, [pc, #224]	; (313c <main+0x510>)
    305a:	4798      	blx	r3
    305c:	e7cc      	b.n	2ff8 <main+0x3cc>
				nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    305e:	0c12      	lsrs	r2, r2, #16
    3060:	4f37      	ldr	r7, [pc, #220]	; (3140 <main+0x514>)
    3062:	4c28      	ldr	r4, [pc, #160]	; (3104 <main+0x4d8>)
    3064:	0039      	movs	r1, r7
    3066:	6860      	ldr	r0, [r4, #4]
    3068:	4b36      	ldr	r3, [pc, #216]	; (3144 <main+0x518>)
    306a:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    306c:	4a27      	ldr	r2, [pc, #156]	; (310c <main+0x4e0>)
    306e:	4b28      	ldr	r3, [pc, #160]	; (3110 <main+0x4e4>)
    3070:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    3072:	2201      	movs	r2, #1
    3074:	4b27      	ldr	r3, [pc, #156]	; (3114 <main+0x4e8>)
    3076:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    3078:	4b27      	ldr	r3, [pc, #156]	; (3118 <main+0x4ec>)
    307a:	701a      	strb	r2, [r3, #0]
				usart_prot_handler_status = WAIT_SYNC;
    307c:	4b27      	ldr	r3, [pc, #156]	; (311c <main+0x4f0>)
    307e:	701a      	strb	r2, [r3, #0]
				usart_write_buffer_job(&cdc_uart_module, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    3080:	8862      	ldrh	r2, [r4, #2]
    3082:	0039      	movs	r1, r7
    3084:	4827      	ldr	r0, [pc, #156]	; (3124 <main+0x4f8>)
    3086:	4b28      	ldr	r3, [pc, #160]	; (3128 <main+0x4fc>)
    3088:	4798      	blx	r3
    308a:	e7b5      	b.n	2ff8 <main+0x3cc>
				nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0], ((uart_cmd.cmd >> 16) & 0xFFFF));
    308c:	0c12      	lsrs	r2, r2, #16
    308e:	4b1d      	ldr	r3, [pc, #116]	; (3104 <main+0x4d8>)
    3090:	6858      	ldr	r0, [r3, #4]
    3092:	492b      	ldr	r1, [pc, #172]	; (3140 <main+0x514>)
    3094:	4b2c      	ldr	r3, [pc, #176]	; (3148 <main+0x51c>)
    3096:	4798      	blx	r3
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
    3098:	4a1c      	ldr	r2, [pc, #112]	; (310c <main+0x4e0>)
    309a:	4b1d      	ldr	r3, [pc, #116]	; (3110 <main+0x4e4>)
    309c:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
    309e:	2201      	movs	r2, #1
    30a0:	4b1c      	ldr	r3, [pc, #112]	; (3114 <main+0x4e8>)
    30a2:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
    30a4:	4b1c      	ldr	r3, [pc, #112]	; (3118 <main+0x4ec>)
    30a6:	701a      	strb	r2, [r3, #0]
				uartdata = 0xAC;
    30a8:	a903      	add	r1, sp, #12
    30aa:	23ac      	movs	r3, #172	; 0xac
    30ac:	800b      	strh	r3, [r1, #0]
				usart_prot_handler_status = WAIT_SYNC;
    30ae:	4b1b      	ldr	r3, [pc, #108]	; (311c <main+0x4f0>)
    30b0:	701a      	strb	r2, [r3, #0]
				usart_write_job(&cdc_uart_module, &uartdata);
    30b2:	481c      	ldr	r0, [pc, #112]	; (3124 <main+0x4f8>)
    30b4:	4b21      	ldr	r3, [pc, #132]	; (313c <main+0x510>)
    30b6:	4798      	blx	r3
    30b8:	e79e      	b.n	2ff8 <main+0x3cc>
				usart_prot_handler_status = WAIT_SYNC;
    30ba:	2701      	movs	r7, #1
    30bc:	4b17      	ldr	r3, [pc, #92]	; (311c <main+0x4f0>)
    30be:	701f      	strb	r7, [r3, #0]
				uart_reconfigure = 1;
    30c0:	4b22      	ldr	r3, [pc, #136]	; (314c <main+0x520>)
    30c2:	701f      	strb	r7, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    30c4:	4e17      	ldr	r6, [pc, #92]	; (3124 <main+0x4f8>)
    30c6:	6834      	ldr	r4, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    30c8:	0020      	movs	r0, r4
    30ca:	4b21      	ldr	r3, [pc, #132]	; (3150 <main+0x524>)
    30cc:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    30ce:	231f      	movs	r3, #31
    30d0:	4018      	ands	r0, r3
    30d2:	4087      	lsls	r7, r0
    30d4:	3361      	adds	r3, #97	; 0x61
    30d6:	4a1f      	ldr	r2, [pc, #124]	; (3154 <main+0x528>)
    30d8:	50d7      	str	r7, [r2, r3]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30da:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    30dc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    30de:	2b00      	cmp	r3, #0
    30e0:	d1fc      	bne.n	30dc <main+0x4b0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    30e2:	6823      	ldr	r3, [r4, #0]
    30e4:	2202      	movs	r2, #2
    30e6:	4393      	bics	r3, r2
    30e8:	6023      	str	r3, [r4, #0]
				configure_console(uart_cmd.val);
    30ea:	4b06      	ldr	r3, [pc, #24]	; (3104 <main+0x4d8>)
    30ec:	6898      	ldr	r0, [r3, #8]
    30ee:	4b1a      	ldr	r3, [pc, #104]	; (3158 <main+0x52c>)
    30f0:	4798      	blx	r3
    30f2:	e781      	b.n	2ff8 <main+0x3cc>
		puts("Failed to put the WiFi Chip in download mode!\n");
    30f4:	4819      	ldr	r0, [pc, #100]	; (315c <main+0x530>)
    30f6:	4b1a      	ldr	r3, [pc, #104]	; (3160 <main+0x534>)
    30f8:	4798      	blx	r3

	/* Enter WiFi firmware download mode. */
	enter_wifi_firmware_download();

	return 0;
}
    30fa:	2000      	movs	r0, #0
    30fc:	b004      	add	sp, #16
    30fe:	bc04      	pop	{r2}
    3100:	4690      	mov	r8, r2
    3102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3104:	2000011c 	.word	0x2000011c
    3108:	00000701 	.word	0x00000701
    310c:	20000130 	.word	0x20000130
    3110:	20000114 	.word	0x20000114
    3114:	20000118 	.word	0x20000118
    3118:	20000110 	.word	0x20000110
    311c:	20000549 	.word	0x20000549
    3120:	2000054c 	.word	0x2000054c
    3124:	200000d8 	.word	0x200000d8
    3128:	00001ee5 	.word	0x00001ee5
    312c:	2000011a 	.word	0x2000011a
    3130:	20000140 	.word	0x20000140
    3134:	00003fd8 	.word	0x00003fd8
    3138:	00000719 	.word	0x00000719
    313c:	00001eb9 	.word	0x00001eb9
    3140:	20000144 	.word	0x20000144
    3144:	00000725 	.word	0x00000725
    3148:	0000078d 	.word	0x0000078d
    314c:	2000012c 	.word	0x2000012c
    3150:	00001509 	.word	0x00001509
    3154:	e000e100 	.word	0xe000e100
    3158:	00002af9 	.word	0x00002af9
    315c:	00003ff0 	.word	0x00003ff0
    3160:	000033fd 	.word	0x000033fd

00003164 <__udivsi3>:
    3164:	2200      	movs	r2, #0
    3166:	0843      	lsrs	r3, r0, #1
    3168:	428b      	cmp	r3, r1
    316a:	d374      	bcc.n	3256 <__udivsi3+0xf2>
    316c:	0903      	lsrs	r3, r0, #4
    316e:	428b      	cmp	r3, r1
    3170:	d35f      	bcc.n	3232 <__udivsi3+0xce>
    3172:	0a03      	lsrs	r3, r0, #8
    3174:	428b      	cmp	r3, r1
    3176:	d344      	bcc.n	3202 <__udivsi3+0x9e>
    3178:	0b03      	lsrs	r3, r0, #12
    317a:	428b      	cmp	r3, r1
    317c:	d328      	bcc.n	31d0 <__udivsi3+0x6c>
    317e:	0c03      	lsrs	r3, r0, #16
    3180:	428b      	cmp	r3, r1
    3182:	d30d      	bcc.n	31a0 <__udivsi3+0x3c>
    3184:	22ff      	movs	r2, #255	; 0xff
    3186:	0209      	lsls	r1, r1, #8
    3188:	ba12      	rev	r2, r2
    318a:	0c03      	lsrs	r3, r0, #16
    318c:	428b      	cmp	r3, r1
    318e:	d302      	bcc.n	3196 <__udivsi3+0x32>
    3190:	1212      	asrs	r2, r2, #8
    3192:	0209      	lsls	r1, r1, #8
    3194:	d065      	beq.n	3262 <__udivsi3+0xfe>
    3196:	0b03      	lsrs	r3, r0, #12
    3198:	428b      	cmp	r3, r1
    319a:	d319      	bcc.n	31d0 <__udivsi3+0x6c>
    319c:	e000      	b.n	31a0 <__udivsi3+0x3c>
    319e:	0a09      	lsrs	r1, r1, #8
    31a0:	0bc3      	lsrs	r3, r0, #15
    31a2:	428b      	cmp	r3, r1
    31a4:	d301      	bcc.n	31aa <__udivsi3+0x46>
    31a6:	03cb      	lsls	r3, r1, #15
    31a8:	1ac0      	subs	r0, r0, r3
    31aa:	4152      	adcs	r2, r2
    31ac:	0b83      	lsrs	r3, r0, #14
    31ae:	428b      	cmp	r3, r1
    31b0:	d301      	bcc.n	31b6 <__udivsi3+0x52>
    31b2:	038b      	lsls	r3, r1, #14
    31b4:	1ac0      	subs	r0, r0, r3
    31b6:	4152      	adcs	r2, r2
    31b8:	0b43      	lsrs	r3, r0, #13
    31ba:	428b      	cmp	r3, r1
    31bc:	d301      	bcc.n	31c2 <__udivsi3+0x5e>
    31be:	034b      	lsls	r3, r1, #13
    31c0:	1ac0      	subs	r0, r0, r3
    31c2:	4152      	adcs	r2, r2
    31c4:	0b03      	lsrs	r3, r0, #12
    31c6:	428b      	cmp	r3, r1
    31c8:	d301      	bcc.n	31ce <__udivsi3+0x6a>
    31ca:	030b      	lsls	r3, r1, #12
    31cc:	1ac0      	subs	r0, r0, r3
    31ce:	4152      	adcs	r2, r2
    31d0:	0ac3      	lsrs	r3, r0, #11
    31d2:	428b      	cmp	r3, r1
    31d4:	d301      	bcc.n	31da <__udivsi3+0x76>
    31d6:	02cb      	lsls	r3, r1, #11
    31d8:	1ac0      	subs	r0, r0, r3
    31da:	4152      	adcs	r2, r2
    31dc:	0a83      	lsrs	r3, r0, #10
    31de:	428b      	cmp	r3, r1
    31e0:	d301      	bcc.n	31e6 <__udivsi3+0x82>
    31e2:	028b      	lsls	r3, r1, #10
    31e4:	1ac0      	subs	r0, r0, r3
    31e6:	4152      	adcs	r2, r2
    31e8:	0a43      	lsrs	r3, r0, #9
    31ea:	428b      	cmp	r3, r1
    31ec:	d301      	bcc.n	31f2 <__udivsi3+0x8e>
    31ee:	024b      	lsls	r3, r1, #9
    31f0:	1ac0      	subs	r0, r0, r3
    31f2:	4152      	adcs	r2, r2
    31f4:	0a03      	lsrs	r3, r0, #8
    31f6:	428b      	cmp	r3, r1
    31f8:	d301      	bcc.n	31fe <__udivsi3+0x9a>
    31fa:	020b      	lsls	r3, r1, #8
    31fc:	1ac0      	subs	r0, r0, r3
    31fe:	4152      	adcs	r2, r2
    3200:	d2cd      	bcs.n	319e <__udivsi3+0x3a>
    3202:	09c3      	lsrs	r3, r0, #7
    3204:	428b      	cmp	r3, r1
    3206:	d301      	bcc.n	320c <__udivsi3+0xa8>
    3208:	01cb      	lsls	r3, r1, #7
    320a:	1ac0      	subs	r0, r0, r3
    320c:	4152      	adcs	r2, r2
    320e:	0983      	lsrs	r3, r0, #6
    3210:	428b      	cmp	r3, r1
    3212:	d301      	bcc.n	3218 <__udivsi3+0xb4>
    3214:	018b      	lsls	r3, r1, #6
    3216:	1ac0      	subs	r0, r0, r3
    3218:	4152      	adcs	r2, r2
    321a:	0943      	lsrs	r3, r0, #5
    321c:	428b      	cmp	r3, r1
    321e:	d301      	bcc.n	3224 <__udivsi3+0xc0>
    3220:	014b      	lsls	r3, r1, #5
    3222:	1ac0      	subs	r0, r0, r3
    3224:	4152      	adcs	r2, r2
    3226:	0903      	lsrs	r3, r0, #4
    3228:	428b      	cmp	r3, r1
    322a:	d301      	bcc.n	3230 <__udivsi3+0xcc>
    322c:	010b      	lsls	r3, r1, #4
    322e:	1ac0      	subs	r0, r0, r3
    3230:	4152      	adcs	r2, r2
    3232:	08c3      	lsrs	r3, r0, #3
    3234:	428b      	cmp	r3, r1
    3236:	d301      	bcc.n	323c <__udivsi3+0xd8>
    3238:	00cb      	lsls	r3, r1, #3
    323a:	1ac0      	subs	r0, r0, r3
    323c:	4152      	adcs	r2, r2
    323e:	0883      	lsrs	r3, r0, #2
    3240:	428b      	cmp	r3, r1
    3242:	d301      	bcc.n	3248 <__udivsi3+0xe4>
    3244:	008b      	lsls	r3, r1, #2
    3246:	1ac0      	subs	r0, r0, r3
    3248:	4152      	adcs	r2, r2
    324a:	0843      	lsrs	r3, r0, #1
    324c:	428b      	cmp	r3, r1
    324e:	d301      	bcc.n	3254 <__udivsi3+0xf0>
    3250:	004b      	lsls	r3, r1, #1
    3252:	1ac0      	subs	r0, r0, r3
    3254:	4152      	adcs	r2, r2
    3256:	1a41      	subs	r1, r0, r1
    3258:	d200      	bcs.n	325c <__udivsi3+0xf8>
    325a:	4601      	mov	r1, r0
    325c:	4152      	adcs	r2, r2
    325e:	4610      	mov	r0, r2
    3260:	4770      	bx	lr
    3262:	e7ff      	b.n	3264 <__udivsi3+0x100>
    3264:	b501      	push	{r0, lr}
    3266:	2000      	movs	r0, #0
    3268:	f000 f806 	bl	3278 <__aeabi_idiv0>
    326c:	bd02      	pop	{r1, pc}
    326e:	46c0      	nop			; (mov r8, r8)

00003270 <__aeabi_uidivmod>:
    3270:	2900      	cmp	r1, #0
    3272:	d0f7      	beq.n	3264 <__udivsi3+0x100>
    3274:	e776      	b.n	3164 <__udivsi3>
    3276:	4770      	bx	lr

00003278 <__aeabi_idiv0>:
    3278:	4770      	bx	lr
    327a:	46c0      	nop			; (mov r8, r8)

0000327c <__aeabi_lmul>:
    327c:	b5f0      	push	{r4, r5, r6, r7, lr}
    327e:	46ce      	mov	lr, r9
    3280:	4647      	mov	r7, r8
    3282:	0415      	lsls	r5, r2, #16
    3284:	0c2d      	lsrs	r5, r5, #16
    3286:	002e      	movs	r6, r5
    3288:	b580      	push	{r7, lr}
    328a:	0407      	lsls	r7, r0, #16
    328c:	0c14      	lsrs	r4, r2, #16
    328e:	0c3f      	lsrs	r7, r7, #16
    3290:	4699      	mov	r9, r3
    3292:	0c03      	lsrs	r3, r0, #16
    3294:	437e      	muls	r6, r7
    3296:	435d      	muls	r5, r3
    3298:	4367      	muls	r7, r4
    329a:	4363      	muls	r3, r4
    329c:	197f      	adds	r7, r7, r5
    329e:	0c34      	lsrs	r4, r6, #16
    32a0:	19e4      	adds	r4, r4, r7
    32a2:	469c      	mov	ip, r3
    32a4:	42a5      	cmp	r5, r4
    32a6:	d903      	bls.n	32b0 <__aeabi_lmul+0x34>
    32a8:	2380      	movs	r3, #128	; 0x80
    32aa:	025b      	lsls	r3, r3, #9
    32ac:	4698      	mov	r8, r3
    32ae:	44c4      	add	ip, r8
    32b0:	464b      	mov	r3, r9
    32b2:	4351      	muls	r1, r2
    32b4:	4343      	muls	r3, r0
    32b6:	0436      	lsls	r6, r6, #16
    32b8:	0c36      	lsrs	r6, r6, #16
    32ba:	0c25      	lsrs	r5, r4, #16
    32bc:	0424      	lsls	r4, r4, #16
    32be:	4465      	add	r5, ip
    32c0:	19a4      	adds	r4, r4, r6
    32c2:	1859      	adds	r1, r3, r1
    32c4:	1949      	adds	r1, r1, r5
    32c6:	0020      	movs	r0, r4
    32c8:	bc0c      	pop	{r2, r3}
    32ca:	4690      	mov	r8, r2
    32cc:	4699      	mov	r9, r3
    32ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032d0 <__libc_init_array>:
    32d0:	b570      	push	{r4, r5, r6, lr}
    32d2:	2600      	movs	r6, #0
    32d4:	4d0c      	ldr	r5, [pc, #48]	; (3308 <__libc_init_array+0x38>)
    32d6:	4c0d      	ldr	r4, [pc, #52]	; (330c <__libc_init_array+0x3c>)
    32d8:	1b64      	subs	r4, r4, r5
    32da:	10a4      	asrs	r4, r4, #2
    32dc:	42a6      	cmp	r6, r4
    32de:	d109      	bne.n	32f4 <__libc_init_array+0x24>
    32e0:	2600      	movs	r6, #0
    32e2:	f000 fecf 	bl	4084 <_init>
    32e6:	4d0a      	ldr	r5, [pc, #40]	; (3310 <__libc_init_array+0x40>)
    32e8:	4c0a      	ldr	r4, [pc, #40]	; (3314 <__libc_init_array+0x44>)
    32ea:	1b64      	subs	r4, r4, r5
    32ec:	10a4      	asrs	r4, r4, #2
    32ee:	42a6      	cmp	r6, r4
    32f0:	d105      	bne.n	32fe <__libc_init_array+0x2e>
    32f2:	bd70      	pop	{r4, r5, r6, pc}
    32f4:	00b3      	lsls	r3, r6, #2
    32f6:	58eb      	ldr	r3, [r5, r3]
    32f8:	4798      	blx	r3
    32fa:	3601      	adds	r6, #1
    32fc:	e7ee      	b.n	32dc <__libc_init_array+0xc>
    32fe:	00b3      	lsls	r3, r6, #2
    3300:	58eb      	ldr	r3, [r5, r3]
    3302:	4798      	blx	r3
    3304:	3601      	adds	r6, #1
    3306:	e7f2      	b.n	32ee <__libc_init_array+0x1e>
    3308:	00004090 	.word	0x00004090
    330c:	00004090 	.word	0x00004090
    3310:	00004090 	.word	0x00004090
    3314:	00004094 	.word	0x00004094

00003318 <memcpy>:
    3318:	2300      	movs	r3, #0
    331a:	b510      	push	{r4, lr}
    331c:	429a      	cmp	r2, r3
    331e:	d100      	bne.n	3322 <memcpy+0xa>
    3320:	bd10      	pop	{r4, pc}
    3322:	5ccc      	ldrb	r4, [r1, r3]
    3324:	54c4      	strb	r4, [r0, r3]
    3326:	3301      	adds	r3, #1
    3328:	e7f8      	b.n	331c <memcpy+0x4>

0000332a <memset>:
    332a:	0003      	movs	r3, r0
    332c:	1882      	adds	r2, r0, r2
    332e:	4293      	cmp	r3, r2
    3330:	d100      	bne.n	3334 <memset+0xa>
    3332:	4770      	bx	lr
    3334:	7019      	strb	r1, [r3, #0]
    3336:	3301      	adds	r3, #1
    3338:	e7f9      	b.n	332e <memset+0x4>
	...

0000333c <_puts_r>:
    333c:	b570      	push	{r4, r5, r6, lr}
    333e:	0005      	movs	r5, r0
    3340:	000e      	movs	r6, r1
    3342:	2800      	cmp	r0, #0
    3344:	d004      	beq.n	3350 <_puts_r+0x14>
    3346:	6983      	ldr	r3, [r0, #24]
    3348:	2b00      	cmp	r3, #0
    334a:	d101      	bne.n	3350 <_puts_r+0x14>
    334c:	f000 fada 	bl	3904 <__sinit>
    3350:	69ab      	ldr	r3, [r5, #24]
    3352:	68ac      	ldr	r4, [r5, #8]
    3354:	2b00      	cmp	r3, #0
    3356:	d102      	bne.n	335e <_puts_r+0x22>
    3358:	0028      	movs	r0, r5
    335a:	f000 fad3 	bl	3904 <__sinit>
    335e:	4b24      	ldr	r3, [pc, #144]	; (33f0 <_puts_r+0xb4>)
    3360:	429c      	cmp	r4, r3
    3362:	d10f      	bne.n	3384 <_puts_r+0x48>
    3364:	686c      	ldr	r4, [r5, #4]
    3366:	89a3      	ldrh	r3, [r4, #12]
    3368:	071b      	lsls	r3, r3, #28
    336a:	d502      	bpl.n	3372 <_puts_r+0x36>
    336c:	6923      	ldr	r3, [r4, #16]
    336e:	2b00      	cmp	r3, #0
    3370:	d120      	bne.n	33b4 <_puts_r+0x78>
    3372:	0021      	movs	r1, r4
    3374:	0028      	movs	r0, r5
    3376:	f000 f957 	bl	3628 <__swsetup_r>
    337a:	2800      	cmp	r0, #0
    337c:	d01a      	beq.n	33b4 <_puts_r+0x78>
    337e:	2001      	movs	r0, #1
    3380:	4240      	negs	r0, r0
    3382:	bd70      	pop	{r4, r5, r6, pc}
    3384:	4b1b      	ldr	r3, [pc, #108]	; (33f4 <_puts_r+0xb8>)
    3386:	429c      	cmp	r4, r3
    3388:	d101      	bne.n	338e <_puts_r+0x52>
    338a:	68ac      	ldr	r4, [r5, #8]
    338c:	e7eb      	b.n	3366 <_puts_r+0x2a>
    338e:	4b1a      	ldr	r3, [pc, #104]	; (33f8 <_puts_r+0xbc>)
    3390:	429c      	cmp	r4, r3
    3392:	d1e8      	bne.n	3366 <_puts_r+0x2a>
    3394:	68ec      	ldr	r4, [r5, #12]
    3396:	e7e6      	b.n	3366 <_puts_r+0x2a>
    3398:	3b01      	subs	r3, #1
    339a:	3601      	adds	r6, #1
    339c:	60a3      	str	r3, [r4, #8]
    339e:	2b00      	cmp	r3, #0
    33a0:	da04      	bge.n	33ac <_puts_r+0x70>
    33a2:	69a2      	ldr	r2, [r4, #24]
    33a4:	4293      	cmp	r3, r2
    33a6:	db16      	blt.n	33d6 <_puts_r+0x9a>
    33a8:	290a      	cmp	r1, #10
    33aa:	d014      	beq.n	33d6 <_puts_r+0x9a>
    33ac:	6823      	ldr	r3, [r4, #0]
    33ae:	1c5a      	adds	r2, r3, #1
    33b0:	6022      	str	r2, [r4, #0]
    33b2:	7019      	strb	r1, [r3, #0]
    33b4:	7831      	ldrb	r1, [r6, #0]
    33b6:	68a3      	ldr	r3, [r4, #8]
    33b8:	2900      	cmp	r1, #0
    33ba:	d1ed      	bne.n	3398 <_puts_r+0x5c>
    33bc:	3b01      	subs	r3, #1
    33be:	60a3      	str	r3, [r4, #8]
    33c0:	2b00      	cmp	r3, #0
    33c2:	da0f      	bge.n	33e4 <_puts_r+0xa8>
    33c4:	0022      	movs	r2, r4
    33c6:	310a      	adds	r1, #10
    33c8:	0028      	movs	r0, r5
    33ca:	f000 f8d7 	bl	357c <__swbuf_r>
    33ce:	1c43      	adds	r3, r0, #1
    33d0:	d0d5      	beq.n	337e <_puts_r+0x42>
    33d2:	200a      	movs	r0, #10
    33d4:	e7d5      	b.n	3382 <_puts_r+0x46>
    33d6:	0022      	movs	r2, r4
    33d8:	0028      	movs	r0, r5
    33da:	f000 f8cf 	bl	357c <__swbuf_r>
    33de:	1c43      	adds	r3, r0, #1
    33e0:	d1e8      	bne.n	33b4 <_puts_r+0x78>
    33e2:	e7cc      	b.n	337e <_puts_r+0x42>
    33e4:	200a      	movs	r0, #10
    33e6:	6823      	ldr	r3, [r4, #0]
    33e8:	1c5a      	adds	r2, r3, #1
    33ea:	6022      	str	r2, [r4, #0]
    33ec:	7018      	strb	r0, [r3, #0]
    33ee:	e7c8      	b.n	3382 <_puts_r+0x46>
    33f0:	00004044 	.word	0x00004044
    33f4:	00004064 	.word	0x00004064
    33f8:	00004024 	.word	0x00004024

000033fc <puts>:
    33fc:	b510      	push	{r4, lr}
    33fe:	4b03      	ldr	r3, [pc, #12]	; (340c <puts+0x10>)
    3400:	0001      	movs	r1, r0
    3402:	6818      	ldr	r0, [r3, #0]
    3404:	f7ff ff9a 	bl	333c <_puts_r>
    3408:	bd10      	pop	{r4, pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	2000000c 	.word	0x2000000c

00003410 <setbuf>:
    3410:	424a      	negs	r2, r1
    3412:	414a      	adcs	r2, r1
    3414:	2380      	movs	r3, #128	; 0x80
    3416:	b510      	push	{r4, lr}
    3418:	0052      	lsls	r2, r2, #1
    341a:	00db      	lsls	r3, r3, #3
    341c:	f000 f802 	bl	3424 <setvbuf>
    3420:	bd10      	pop	{r4, pc}
	...

00003424 <setvbuf>:
    3424:	b5f0      	push	{r4, r5, r6, r7, lr}
    3426:	001d      	movs	r5, r3
    3428:	4b4f      	ldr	r3, [pc, #316]	; (3568 <setvbuf+0x144>)
    342a:	b085      	sub	sp, #20
    342c:	681e      	ldr	r6, [r3, #0]
    342e:	0004      	movs	r4, r0
    3430:	000f      	movs	r7, r1
    3432:	9200      	str	r2, [sp, #0]
    3434:	2e00      	cmp	r6, #0
    3436:	d005      	beq.n	3444 <setvbuf+0x20>
    3438:	69b3      	ldr	r3, [r6, #24]
    343a:	2b00      	cmp	r3, #0
    343c:	d102      	bne.n	3444 <setvbuf+0x20>
    343e:	0030      	movs	r0, r6
    3440:	f000 fa60 	bl	3904 <__sinit>
    3444:	4b49      	ldr	r3, [pc, #292]	; (356c <setvbuf+0x148>)
    3446:	429c      	cmp	r4, r3
    3448:	d150      	bne.n	34ec <setvbuf+0xc8>
    344a:	6874      	ldr	r4, [r6, #4]
    344c:	9b00      	ldr	r3, [sp, #0]
    344e:	2b02      	cmp	r3, #2
    3450:	d005      	beq.n	345e <setvbuf+0x3a>
    3452:	2b01      	cmp	r3, #1
    3454:	d900      	bls.n	3458 <setvbuf+0x34>
    3456:	e084      	b.n	3562 <setvbuf+0x13e>
    3458:	2d00      	cmp	r5, #0
    345a:	da00      	bge.n	345e <setvbuf+0x3a>
    345c:	e081      	b.n	3562 <setvbuf+0x13e>
    345e:	0021      	movs	r1, r4
    3460:	0030      	movs	r0, r6
    3462:	f000 f9e1 	bl	3828 <_fflush_r>
    3466:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3468:	2900      	cmp	r1, #0
    346a:	d008      	beq.n	347e <setvbuf+0x5a>
    346c:	0023      	movs	r3, r4
    346e:	3344      	adds	r3, #68	; 0x44
    3470:	4299      	cmp	r1, r3
    3472:	d002      	beq.n	347a <setvbuf+0x56>
    3474:	0030      	movs	r0, r6
    3476:	f000 fb51 	bl	3b1c <_free_r>
    347a:	2300      	movs	r3, #0
    347c:	6363      	str	r3, [r4, #52]	; 0x34
    347e:	2300      	movs	r3, #0
    3480:	61a3      	str	r3, [r4, #24]
    3482:	6063      	str	r3, [r4, #4]
    3484:	89a3      	ldrh	r3, [r4, #12]
    3486:	061b      	lsls	r3, r3, #24
    3488:	d503      	bpl.n	3492 <setvbuf+0x6e>
    348a:	6921      	ldr	r1, [r4, #16]
    348c:	0030      	movs	r0, r6
    348e:	f000 fb45 	bl	3b1c <_free_r>
    3492:	89a3      	ldrh	r3, [r4, #12]
    3494:	4a36      	ldr	r2, [pc, #216]	; (3570 <setvbuf+0x14c>)
    3496:	4013      	ands	r3, r2
    3498:	81a3      	strh	r3, [r4, #12]
    349a:	9b00      	ldr	r3, [sp, #0]
    349c:	2b02      	cmp	r3, #2
    349e:	d05a      	beq.n	3556 <setvbuf+0x132>
    34a0:	ab03      	add	r3, sp, #12
    34a2:	aa02      	add	r2, sp, #8
    34a4:	0021      	movs	r1, r4
    34a6:	0030      	movs	r0, r6
    34a8:	f000 fac2 	bl	3a30 <__swhatbuf_r>
    34ac:	89a3      	ldrh	r3, [r4, #12]
    34ae:	4318      	orrs	r0, r3
    34b0:	81a0      	strh	r0, [r4, #12]
    34b2:	2d00      	cmp	r5, #0
    34b4:	d124      	bne.n	3500 <setvbuf+0xdc>
    34b6:	9d02      	ldr	r5, [sp, #8]
    34b8:	0028      	movs	r0, r5
    34ba:	f000 fb25 	bl	3b08 <malloc>
    34be:	9501      	str	r5, [sp, #4]
    34c0:	1e07      	subs	r7, r0, #0
    34c2:	d142      	bne.n	354a <setvbuf+0x126>
    34c4:	9b02      	ldr	r3, [sp, #8]
    34c6:	9301      	str	r3, [sp, #4]
    34c8:	42ab      	cmp	r3, r5
    34ca:	d139      	bne.n	3540 <setvbuf+0x11c>
    34cc:	2001      	movs	r0, #1
    34ce:	4240      	negs	r0, r0
    34d0:	2302      	movs	r3, #2
    34d2:	89a2      	ldrh	r2, [r4, #12]
    34d4:	4313      	orrs	r3, r2
    34d6:	81a3      	strh	r3, [r4, #12]
    34d8:	2300      	movs	r3, #0
    34da:	60a3      	str	r3, [r4, #8]
    34dc:	0023      	movs	r3, r4
    34de:	3347      	adds	r3, #71	; 0x47
    34e0:	6023      	str	r3, [r4, #0]
    34e2:	6123      	str	r3, [r4, #16]
    34e4:	2301      	movs	r3, #1
    34e6:	6163      	str	r3, [r4, #20]
    34e8:	b005      	add	sp, #20
    34ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ec:	4b21      	ldr	r3, [pc, #132]	; (3574 <setvbuf+0x150>)
    34ee:	429c      	cmp	r4, r3
    34f0:	d101      	bne.n	34f6 <setvbuf+0xd2>
    34f2:	68b4      	ldr	r4, [r6, #8]
    34f4:	e7aa      	b.n	344c <setvbuf+0x28>
    34f6:	4b20      	ldr	r3, [pc, #128]	; (3578 <setvbuf+0x154>)
    34f8:	429c      	cmp	r4, r3
    34fa:	d1a7      	bne.n	344c <setvbuf+0x28>
    34fc:	68f4      	ldr	r4, [r6, #12]
    34fe:	e7a5      	b.n	344c <setvbuf+0x28>
    3500:	2f00      	cmp	r7, #0
    3502:	d0d9      	beq.n	34b8 <setvbuf+0x94>
    3504:	69b3      	ldr	r3, [r6, #24]
    3506:	2b00      	cmp	r3, #0
    3508:	d102      	bne.n	3510 <setvbuf+0xec>
    350a:	0030      	movs	r0, r6
    350c:	f000 f9fa 	bl	3904 <__sinit>
    3510:	9b00      	ldr	r3, [sp, #0]
    3512:	2b01      	cmp	r3, #1
    3514:	d103      	bne.n	351e <setvbuf+0xfa>
    3516:	89a3      	ldrh	r3, [r4, #12]
    3518:	9a00      	ldr	r2, [sp, #0]
    351a:	431a      	orrs	r2, r3
    351c:	81a2      	strh	r2, [r4, #12]
    351e:	2008      	movs	r0, #8
    3520:	89a3      	ldrh	r3, [r4, #12]
    3522:	6027      	str	r7, [r4, #0]
    3524:	6127      	str	r7, [r4, #16]
    3526:	6165      	str	r5, [r4, #20]
    3528:	4018      	ands	r0, r3
    352a:	d018      	beq.n	355e <setvbuf+0x13a>
    352c:	2001      	movs	r0, #1
    352e:	4018      	ands	r0, r3
    3530:	2300      	movs	r3, #0
    3532:	4298      	cmp	r0, r3
    3534:	d011      	beq.n	355a <setvbuf+0x136>
    3536:	426d      	negs	r5, r5
    3538:	60a3      	str	r3, [r4, #8]
    353a:	61a5      	str	r5, [r4, #24]
    353c:	0018      	movs	r0, r3
    353e:	e7d3      	b.n	34e8 <setvbuf+0xc4>
    3540:	9801      	ldr	r0, [sp, #4]
    3542:	f000 fae1 	bl	3b08 <malloc>
    3546:	1e07      	subs	r7, r0, #0
    3548:	d0c0      	beq.n	34cc <setvbuf+0xa8>
    354a:	2380      	movs	r3, #128	; 0x80
    354c:	89a2      	ldrh	r2, [r4, #12]
    354e:	9d01      	ldr	r5, [sp, #4]
    3550:	4313      	orrs	r3, r2
    3552:	81a3      	strh	r3, [r4, #12]
    3554:	e7d6      	b.n	3504 <setvbuf+0xe0>
    3556:	2000      	movs	r0, #0
    3558:	e7ba      	b.n	34d0 <setvbuf+0xac>
    355a:	60a5      	str	r5, [r4, #8]
    355c:	e7c4      	b.n	34e8 <setvbuf+0xc4>
    355e:	60a0      	str	r0, [r4, #8]
    3560:	e7c2      	b.n	34e8 <setvbuf+0xc4>
    3562:	2001      	movs	r0, #1
    3564:	4240      	negs	r0, r0
    3566:	e7bf      	b.n	34e8 <setvbuf+0xc4>
    3568:	2000000c 	.word	0x2000000c
    356c:	00004044 	.word	0x00004044
    3570:	fffff35c 	.word	0xfffff35c
    3574:	00004064 	.word	0x00004064
    3578:	00004024 	.word	0x00004024

0000357c <__swbuf_r>:
    357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    357e:	0005      	movs	r5, r0
    3580:	000e      	movs	r6, r1
    3582:	0014      	movs	r4, r2
    3584:	2800      	cmp	r0, #0
    3586:	d004      	beq.n	3592 <__swbuf_r+0x16>
    3588:	6983      	ldr	r3, [r0, #24]
    358a:	2b00      	cmp	r3, #0
    358c:	d101      	bne.n	3592 <__swbuf_r+0x16>
    358e:	f000 f9b9 	bl	3904 <__sinit>
    3592:	4b22      	ldr	r3, [pc, #136]	; (361c <__swbuf_r+0xa0>)
    3594:	429c      	cmp	r4, r3
    3596:	d12d      	bne.n	35f4 <__swbuf_r+0x78>
    3598:	686c      	ldr	r4, [r5, #4]
    359a:	69a3      	ldr	r3, [r4, #24]
    359c:	60a3      	str	r3, [r4, #8]
    359e:	89a3      	ldrh	r3, [r4, #12]
    35a0:	071b      	lsls	r3, r3, #28
    35a2:	d531      	bpl.n	3608 <__swbuf_r+0x8c>
    35a4:	6923      	ldr	r3, [r4, #16]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d02e      	beq.n	3608 <__swbuf_r+0x8c>
    35aa:	6823      	ldr	r3, [r4, #0]
    35ac:	6922      	ldr	r2, [r4, #16]
    35ae:	b2f7      	uxtb	r7, r6
    35b0:	1a98      	subs	r0, r3, r2
    35b2:	6963      	ldr	r3, [r4, #20]
    35b4:	b2f6      	uxtb	r6, r6
    35b6:	4298      	cmp	r0, r3
    35b8:	db05      	blt.n	35c6 <__swbuf_r+0x4a>
    35ba:	0021      	movs	r1, r4
    35bc:	0028      	movs	r0, r5
    35be:	f000 f933 	bl	3828 <_fflush_r>
    35c2:	2800      	cmp	r0, #0
    35c4:	d126      	bne.n	3614 <__swbuf_r+0x98>
    35c6:	68a3      	ldr	r3, [r4, #8]
    35c8:	3001      	adds	r0, #1
    35ca:	3b01      	subs	r3, #1
    35cc:	60a3      	str	r3, [r4, #8]
    35ce:	6823      	ldr	r3, [r4, #0]
    35d0:	1c5a      	adds	r2, r3, #1
    35d2:	6022      	str	r2, [r4, #0]
    35d4:	701f      	strb	r7, [r3, #0]
    35d6:	6963      	ldr	r3, [r4, #20]
    35d8:	4298      	cmp	r0, r3
    35da:	d004      	beq.n	35e6 <__swbuf_r+0x6a>
    35dc:	89a3      	ldrh	r3, [r4, #12]
    35de:	07db      	lsls	r3, r3, #31
    35e0:	d51a      	bpl.n	3618 <__swbuf_r+0x9c>
    35e2:	2e0a      	cmp	r6, #10
    35e4:	d118      	bne.n	3618 <__swbuf_r+0x9c>
    35e6:	0021      	movs	r1, r4
    35e8:	0028      	movs	r0, r5
    35ea:	f000 f91d 	bl	3828 <_fflush_r>
    35ee:	2800      	cmp	r0, #0
    35f0:	d012      	beq.n	3618 <__swbuf_r+0x9c>
    35f2:	e00f      	b.n	3614 <__swbuf_r+0x98>
    35f4:	4b0a      	ldr	r3, [pc, #40]	; (3620 <__swbuf_r+0xa4>)
    35f6:	429c      	cmp	r4, r3
    35f8:	d101      	bne.n	35fe <__swbuf_r+0x82>
    35fa:	68ac      	ldr	r4, [r5, #8]
    35fc:	e7cd      	b.n	359a <__swbuf_r+0x1e>
    35fe:	4b09      	ldr	r3, [pc, #36]	; (3624 <__swbuf_r+0xa8>)
    3600:	429c      	cmp	r4, r3
    3602:	d1ca      	bne.n	359a <__swbuf_r+0x1e>
    3604:	68ec      	ldr	r4, [r5, #12]
    3606:	e7c8      	b.n	359a <__swbuf_r+0x1e>
    3608:	0021      	movs	r1, r4
    360a:	0028      	movs	r0, r5
    360c:	f000 f80c 	bl	3628 <__swsetup_r>
    3610:	2800      	cmp	r0, #0
    3612:	d0ca      	beq.n	35aa <__swbuf_r+0x2e>
    3614:	2601      	movs	r6, #1
    3616:	4276      	negs	r6, r6
    3618:	0030      	movs	r0, r6
    361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    361c:	00004044 	.word	0x00004044
    3620:	00004064 	.word	0x00004064
    3624:	00004024 	.word	0x00004024

00003628 <__swsetup_r>:
    3628:	4b36      	ldr	r3, [pc, #216]	; (3704 <__swsetup_r+0xdc>)
    362a:	b570      	push	{r4, r5, r6, lr}
    362c:	681d      	ldr	r5, [r3, #0]
    362e:	0006      	movs	r6, r0
    3630:	000c      	movs	r4, r1
    3632:	2d00      	cmp	r5, #0
    3634:	d005      	beq.n	3642 <__swsetup_r+0x1a>
    3636:	69ab      	ldr	r3, [r5, #24]
    3638:	2b00      	cmp	r3, #0
    363a:	d102      	bne.n	3642 <__swsetup_r+0x1a>
    363c:	0028      	movs	r0, r5
    363e:	f000 f961 	bl	3904 <__sinit>
    3642:	4b31      	ldr	r3, [pc, #196]	; (3708 <__swsetup_r+0xe0>)
    3644:	429c      	cmp	r4, r3
    3646:	d10f      	bne.n	3668 <__swsetup_r+0x40>
    3648:	686c      	ldr	r4, [r5, #4]
    364a:	230c      	movs	r3, #12
    364c:	5ee2      	ldrsh	r2, [r4, r3]
    364e:	b293      	uxth	r3, r2
    3650:	0719      	lsls	r1, r3, #28
    3652:	d42d      	bmi.n	36b0 <__swsetup_r+0x88>
    3654:	06d9      	lsls	r1, r3, #27
    3656:	d411      	bmi.n	367c <__swsetup_r+0x54>
    3658:	2309      	movs	r3, #9
    365a:	2001      	movs	r0, #1
    365c:	6033      	str	r3, [r6, #0]
    365e:	3337      	adds	r3, #55	; 0x37
    3660:	4313      	orrs	r3, r2
    3662:	81a3      	strh	r3, [r4, #12]
    3664:	4240      	negs	r0, r0
    3666:	bd70      	pop	{r4, r5, r6, pc}
    3668:	4b28      	ldr	r3, [pc, #160]	; (370c <__swsetup_r+0xe4>)
    366a:	429c      	cmp	r4, r3
    366c:	d101      	bne.n	3672 <__swsetup_r+0x4a>
    366e:	68ac      	ldr	r4, [r5, #8]
    3670:	e7eb      	b.n	364a <__swsetup_r+0x22>
    3672:	4b27      	ldr	r3, [pc, #156]	; (3710 <__swsetup_r+0xe8>)
    3674:	429c      	cmp	r4, r3
    3676:	d1e8      	bne.n	364a <__swsetup_r+0x22>
    3678:	68ec      	ldr	r4, [r5, #12]
    367a:	e7e6      	b.n	364a <__swsetup_r+0x22>
    367c:	075b      	lsls	r3, r3, #29
    367e:	d513      	bpl.n	36a8 <__swsetup_r+0x80>
    3680:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3682:	2900      	cmp	r1, #0
    3684:	d008      	beq.n	3698 <__swsetup_r+0x70>
    3686:	0023      	movs	r3, r4
    3688:	3344      	adds	r3, #68	; 0x44
    368a:	4299      	cmp	r1, r3
    368c:	d002      	beq.n	3694 <__swsetup_r+0x6c>
    368e:	0030      	movs	r0, r6
    3690:	f000 fa44 	bl	3b1c <_free_r>
    3694:	2300      	movs	r3, #0
    3696:	6363      	str	r3, [r4, #52]	; 0x34
    3698:	2224      	movs	r2, #36	; 0x24
    369a:	89a3      	ldrh	r3, [r4, #12]
    369c:	4393      	bics	r3, r2
    369e:	81a3      	strh	r3, [r4, #12]
    36a0:	2300      	movs	r3, #0
    36a2:	6063      	str	r3, [r4, #4]
    36a4:	6923      	ldr	r3, [r4, #16]
    36a6:	6023      	str	r3, [r4, #0]
    36a8:	2308      	movs	r3, #8
    36aa:	89a2      	ldrh	r2, [r4, #12]
    36ac:	4313      	orrs	r3, r2
    36ae:	81a3      	strh	r3, [r4, #12]
    36b0:	6923      	ldr	r3, [r4, #16]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d10b      	bne.n	36ce <__swsetup_r+0xa6>
    36b6:	21a0      	movs	r1, #160	; 0xa0
    36b8:	2280      	movs	r2, #128	; 0x80
    36ba:	89a3      	ldrh	r3, [r4, #12]
    36bc:	0089      	lsls	r1, r1, #2
    36be:	0092      	lsls	r2, r2, #2
    36c0:	400b      	ands	r3, r1
    36c2:	4293      	cmp	r3, r2
    36c4:	d003      	beq.n	36ce <__swsetup_r+0xa6>
    36c6:	0021      	movs	r1, r4
    36c8:	0030      	movs	r0, r6
    36ca:	f000 f9d9 	bl	3a80 <__smakebuf_r>
    36ce:	2301      	movs	r3, #1
    36d0:	89a2      	ldrh	r2, [r4, #12]
    36d2:	4013      	ands	r3, r2
    36d4:	d011      	beq.n	36fa <__swsetup_r+0xd2>
    36d6:	2300      	movs	r3, #0
    36d8:	60a3      	str	r3, [r4, #8]
    36da:	6963      	ldr	r3, [r4, #20]
    36dc:	425b      	negs	r3, r3
    36de:	61a3      	str	r3, [r4, #24]
    36e0:	2000      	movs	r0, #0
    36e2:	6923      	ldr	r3, [r4, #16]
    36e4:	4283      	cmp	r3, r0
    36e6:	d1be      	bne.n	3666 <__swsetup_r+0x3e>
    36e8:	230c      	movs	r3, #12
    36ea:	5ee2      	ldrsh	r2, [r4, r3]
    36ec:	0613      	lsls	r3, r2, #24
    36ee:	d5ba      	bpl.n	3666 <__swsetup_r+0x3e>
    36f0:	2340      	movs	r3, #64	; 0x40
    36f2:	4313      	orrs	r3, r2
    36f4:	81a3      	strh	r3, [r4, #12]
    36f6:	3801      	subs	r0, #1
    36f8:	e7b5      	b.n	3666 <__swsetup_r+0x3e>
    36fa:	0792      	lsls	r2, r2, #30
    36fc:	d400      	bmi.n	3700 <__swsetup_r+0xd8>
    36fe:	6963      	ldr	r3, [r4, #20]
    3700:	60a3      	str	r3, [r4, #8]
    3702:	e7ed      	b.n	36e0 <__swsetup_r+0xb8>
    3704:	2000000c 	.word	0x2000000c
    3708:	00004044 	.word	0x00004044
    370c:	00004064 	.word	0x00004064
    3710:	00004024 	.word	0x00004024

00003714 <__sflush_r>:
    3714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3716:	898a      	ldrh	r2, [r1, #12]
    3718:	0005      	movs	r5, r0
    371a:	000c      	movs	r4, r1
    371c:	0713      	lsls	r3, r2, #28
    371e:	d460      	bmi.n	37e2 <__sflush_r+0xce>
    3720:	684b      	ldr	r3, [r1, #4]
    3722:	2b00      	cmp	r3, #0
    3724:	dc04      	bgt.n	3730 <__sflush_r+0x1c>
    3726:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3728:	2b00      	cmp	r3, #0
    372a:	dc01      	bgt.n	3730 <__sflush_r+0x1c>
    372c:	2000      	movs	r0, #0
    372e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3730:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3732:	2f00      	cmp	r7, #0
    3734:	d0fa      	beq.n	372c <__sflush_r+0x18>
    3736:	2300      	movs	r3, #0
    3738:	682e      	ldr	r6, [r5, #0]
    373a:	602b      	str	r3, [r5, #0]
    373c:	2380      	movs	r3, #128	; 0x80
    373e:	015b      	lsls	r3, r3, #5
    3740:	401a      	ands	r2, r3
    3742:	d034      	beq.n	37ae <__sflush_r+0x9a>
    3744:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3746:	89a3      	ldrh	r3, [r4, #12]
    3748:	075b      	lsls	r3, r3, #29
    374a:	d506      	bpl.n	375a <__sflush_r+0x46>
    374c:	6863      	ldr	r3, [r4, #4]
    374e:	1ac0      	subs	r0, r0, r3
    3750:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3752:	2b00      	cmp	r3, #0
    3754:	d001      	beq.n	375a <__sflush_r+0x46>
    3756:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3758:	1ac0      	subs	r0, r0, r3
    375a:	0002      	movs	r2, r0
    375c:	6a21      	ldr	r1, [r4, #32]
    375e:	2300      	movs	r3, #0
    3760:	0028      	movs	r0, r5
    3762:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3764:	47b8      	blx	r7
    3766:	89a1      	ldrh	r1, [r4, #12]
    3768:	1c43      	adds	r3, r0, #1
    376a:	d106      	bne.n	377a <__sflush_r+0x66>
    376c:	682b      	ldr	r3, [r5, #0]
    376e:	2b1d      	cmp	r3, #29
    3770:	d831      	bhi.n	37d6 <__sflush_r+0xc2>
    3772:	4a2c      	ldr	r2, [pc, #176]	; (3824 <__sflush_r+0x110>)
    3774:	40da      	lsrs	r2, r3
    3776:	07d3      	lsls	r3, r2, #31
    3778:	d52d      	bpl.n	37d6 <__sflush_r+0xc2>
    377a:	2300      	movs	r3, #0
    377c:	6063      	str	r3, [r4, #4]
    377e:	6923      	ldr	r3, [r4, #16]
    3780:	6023      	str	r3, [r4, #0]
    3782:	04cb      	lsls	r3, r1, #19
    3784:	d505      	bpl.n	3792 <__sflush_r+0x7e>
    3786:	1c43      	adds	r3, r0, #1
    3788:	d102      	bne.n	3790 <__sflush_r+0x7c>
    378a:	682b      	ldr	r3, [r5, #0]
    378c:	2b00      	cmp	r3, #0
    378e:	d100      	bne.n	3792 <__sflush_r+0x7e>
    3790:	6560      	str	r0, [r4, #84]	; 0x54
    3792:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3794:	602e      	str	r6, [r5, #0]
    3796:	2900      	cmp	r1, #0
    3798:	d0c8      	beq.n	372c <__sflush_r+0x18>
    379a:	0023      	movs	r3, r4
    379c:	3344      	adds	r3, #68	; 0x44
    379e:	4299      	cmp	r1, r3
    37a0:	d002      	beq.n	37a8 <__sflush_r+0x94>
    37a2:	0028      	movs	r0, r5
    37a4:	f000 f9ba 	bl	3b1c <_free_r>
    37a8:	2000      	movs	r0, #0
    37aa:	6360      	str	r0, [r4, #52]	; 0x34
    37ac:	e7bf      	b.n	372e <__sflush_r+0x1a>
    37ae:	2301      	movs	r3, #1
    37b0:	6a21      	ldr	r1, [r4, #32]
    37b2:	0028      	movs	r0, r5
    37b4:	47b8      	blx	r7
    37b6:	1c43      	adds	r3, r0, #1
    37b8:	d1c5      	bne.n	3746 <__sflush_r+0x32>
    37ba:	682b      	ldr	r3, [r5, #0]
    37bc:	2b00      	cmp	r3, #0
    37be:	d0c2      	beq.n	3746 <__sflush_r+0x32>
    37c0:	2b1d      	cmp	r3, #29
    37c2:	d001      	beq.n	37c8 <__sflush_r+0xb4>
    37c4:	2b16      	cmp	r3, #22
    37c6:	d101      	bne.n	37cc <__sflush_r+0xb8>
    37c8:	602e      	str	r6, [r5, #0]
    37ca:	e7af      	b.n	372c <__sflush_r+0x18>
    37cc:	2340      	movs	r3, #64	; 0x40
    37ce:	89a2      	ldrh	r2, [r4, #12]
    37d0:	4313      	orrs	r3, r2
    37d2:	81a3      	strh	r3, [r4, #12]
    37d4:	e7ab      	b.n	372e <__sflush_r+0x1a>
    37d6:	2340      	movs	r3, #64	; 0x40
    37d8:	430b      	orrs	r3, r1
    37da:	2001      	movs	r0, #1
    37dc:	81a3      	strh	r3, [r4, #12]
    37de:	4240      	negs	r0, r0
    37e0:	e7a5      	b.n	372e <__sflush_r+0x1a>
    37e2:	690f      	ldr	r7, [r1, #16]
    37e4:	2f00      	cmp	r7, #0
    37e6:	d0a1      	beq.n	372c <__sflush_r+0x18>
    37e8:	680b      	ldr	r3, [r1, #0]
    37ea:	600f      	str	r7, [r1, #0]
    37ec:	1bdb      	subs	r3, r3, r7
    37ee:	9301      	str	r3, [sp, #4]
    37f0:	2300      	movs	r3, #0
    37f2:	0792      	lsls	r2, r2, #30
    37f4:	d100      	bne.n	37f8 <__sflush_r+0xe4>
    37f6:	694b      	ldr	r3, [r1, #20]
    37f8:	60a3      	str	r3, [r4, #8]
    37fa:	9b01      	ldr	r3, [sp, #4]
    37fc:	2b00      	cmp	r3, #0
    37fe:	dc00      	bgt.n	3802 <__sflush_r+0xee>
    3800:	e794      	b.n	372c <__sflush_r+0x18>
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	003a      	movs	r2, r7
    3806:	6a21      	ldr	r1, [r4, #32]
    3808:	0028      	movs	r0, r5
    380a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    380c:	47b0      	blx	r6
    380e:	2800      	cmp	r0, #0
    3810:	dc03      	bgt.n	381a <__sflush_r+0x106>
    3812:	2340      	movs	r3, #64	; 0x40
    3814:	89a2      	ldrh	r2, [r4, #12]
    3816:	4313      	orrs	r3, r2
    3818:	e7df      	b.n	37da <__sflush_r+0xc6>
    381a:	9b01      	ldr	r3, [sp, #4]
    381c:	183f      	adds	r7, r7, r0
    381e:	1a1b      	subs	r3, r3, r0
    3820:	9301      	str	r3, [sp, #4]
    3822:	e7ea      	b.n	37fa <__sflush_r+0xe6>
    3824:	20400001 	.word	0x20400001

00003828 <_fflush_r>:
    3828:	690b      	ldr	r3, [r1, #16]
    382a:	b570      	push	{r4, r5, r6, lr}
    382c:	0005      	movs	r5, r0
    382e:	000c      	movs	r4, r1
    3830:	2b00      	cmp	r3, #0
    3832:	d101      	bne.n	3838 <_fflush_r+0x10>
    3834:	2000      	movs	r0, #0
    3836:	bd70      	pop	{r4, r5, r6, pc}
    3838:	2800      	cmp	r0, #0
    383a:	d004      	beq.n	3846 <_fflush_r+0x1e>
    383c:	6983      	ldr	r3, [r0, #24]
    383e:	2b00      	cmp	r3, #0
    3840:	d101      	bne.n	3846 <_fflush_r+0x1e>
    3842:	f000 f85f 	bl	3904 <__sinit>
    3846:	4b0b      	ldr	r3, [pc, #44]	; (3874 <_fflush_r+0x4c>)
    3848:	429c      	cmp	r4, r3
    384a:	d109      	bne.n	3860 <_fflush_r+0x38>
    384c:	686c      	ldr	r4, [r5, #4]
    384e:	220c      	movs	r2, #12
    3850:	5ea3      	ldrsh	r3, [r4, r2]
    3852:	2b00      	cmp	r3, #0
    3854:	d0ee      	beq.n	3834 <_fflush_r+0xc>
    3856:	0021      	movs	r1, r4
    3858:	0028      	movs	r0, r5
    385a:	f7ff ff5b 	bl	3714 <__sflush_r>
    385e:	e7ea      	b.n	3836 <_fflush_r+0xe>
    3860:	4b05      	ldr	r3, [pc, #20]	; (3878 <_fflush_r+0x50>)
    3862:	429c      	cmp	r4, r3
    3864:	d101      	bne.n	386a <_fflush_r+0x42>
    3866:	68ac      	ldr	r4, [r5, #8]
    3868:	e7f1      	b.n	384e <_fflush_r+0x26>
    386a:	4b04      	ldr	r3, [pc, #16]	; (387c <_fflush_r+0x54>)
    386c:	429c      	cmp	r4, r3
    386e:	d1ee      	bne.n	384e <_fflush_r+0x26>
    3870:	68ec      	ldr	r4, [r5, #12]
    3872:	e7ec      	b.n	384e <_fflush_r+0x26>
    3874:	00004044 	.word	0x00004044
    3878:	00004064 	.word	0x00004064
    387c:	00004024 	.word	0x00004024

00003880 <_cleanup_r>:
    3880:	b510      	push	{r4, lr}
    3882:	4902      	ldr	r1, [pc, #8]	; (388c <_cleanup_r+0xc>)
    3884:	f000 f8b2 	bl	39ec <_fwalk_reent>
    3888:	bd10      	pop	{r4, pc}
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	00003829 	.word	0x00003829

00003890 <std.isra.0>:
    3890:	2300      	movs	r3, #0
    3892:	b510      	push	{r4, lr}
    3894:	0004      	movs	r4, r0
    3896:	6003      	str	r3, [r0, #0]
    3898:	6043      	str	r3, [r0, #4]
    389a:	6083      	str	r3, [r0, #8]
    389c:	8181      	strh	r1, [r0, #12]
    389e:	6643      	str	r3, [r0, #100]	; 0x64
    38a0:	81c2      	strh	r2, [r0, #14]
    38a2:	6103      	str	r3, [r0, #16]
    38a4:	6143      	str	r3, [r0, #20]
    38a6:	6183      	str	r3, [r0, #24]
    38a8:	0019      	movs	r1, r3
    38aa:	2208      	movs	r2, #8
    38ac:	305c      	adds	r0, #92	; 0x5c
    38ae:	f7ff fd3c 	bl	332a <memset>
    38b2:	4b05      	ldr	r3, [pc, #20]	; (38c8 <std.isra.0+0x38>)
    38b4:	6224      	str	r4, [r4, #32]
    38b6:	6263      	str	r3, [r4, #36]	; 0x24
    38b8:	4b04      	ldr	r3, [pc, #16]	; (38cc <std.isra.0+0x3c>)
    38ba:	62a3      	str	r3, [r4, #40]	; 0x28
    38bc:	4b04      	ldr	r3, [pc, #16]	; (38d0 <std.isra.0+0x40>)
    38be:	62e3      	str	r3, [r4, #44]	; 0x2c
    38c0:	4b04      	ldr	r3, [pc, #16]	; (38d4 <std.isra.0+0x44>)
    38c2:	6323      	str	r3, [r4, #48]	; 0x30
    38c4:	bd10      	pop	{r4, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00003c91 	.word	0x00003c91
    38cc:	00003cb9 	.word	0x00003cb9
    38d0:	00003cf1 	.word	0x00003cf1
    38d4:	00003d1d 	.word	0x00003d1d

000038d8 <__sfmoreglue>:
    38d8:	b570      	push	{r4, r5, r6, lr}
    38da:	2568      	movs	r5, #104	; 0x68
    38dc:	1e4a      	subs	r2, r1, #1
    38de:	4355      	muls	r5, r2
    38e0:	000e      	movs	r6, r1
    38e2:	0029      	movs	r1, r5
    38e4:	3174      	adds	r1, #116	; 0x74
    38e6:	f000 f963 	bl	3bb0 <_malloc_r>
    38ea:	1e04      	subs	r4, r0, #0
    38ec:	d008      	beq.n	3900 <__sfmoreglue+0x28>
    38ee:	2100      	movs	r1, #0
    38f0:	002a      	movs	r2, r5
    38f2:	6001      	str	r1, [r0, #0]
    38f4:	6046      	str	r6, [r0, #4]
    38f6:	300c      	adds	r0, #12
    38f8:	60a0      	str	r0, [r4, #8]
    38fa:	3268      	adds	r2, #104	; 0x68
    38fc:	f7ff fd15 	bl	332a <memset>
    3900:	0020      	movs	r0, r4
    3902:	bd70      	pop	{r4, r5, r6, pc}

00003904 <__sinit>:
    3904:	6983      	ldr	r3, [r0, #24]
    3906:	b513      	push	{r0, r1, r4, lr}
    3908:	0004      	movs	r4, r0
    390a:	2b00      	cmp	r3, #0
    390c:	d128      	bne.n	3960 <__sinit+0x5c>
    390e:	6483      	str	r3, [r0, #72]	; 0x48
    3910:	64c3      	str	r3, [r0, #76]	; 0x4c
    3912:	6503      	str	r3, [r0, #80]	; 0x50
    3914:	4b13      	ldr	r3, [pc, #76]	; (3964 <__sinit+0x60>)
    3916:	4a14      	ldr	r2, [pc, #80]	; (3968 <__sinit+0x64>)
    3918:	681b      	ldr	r3, [r3, #0]
    391a:	6282      	str	r2, [r0, #40]	; 0x28
    391c:	9301      	str	r3, [sp, #4]
    391e:	4298      	cmp	r0, r3
    3920:	d101      	bne.n	3926 <__sinit+0x22>
    3922:	2301      	movs	r3, #1
    3924:	6183      	str	r3, [r0, #24]
    3926:	0020      	movs	r0, r4
    3928:	f000 f820 	bl	396c <__sfp>
    392c:	6060      	str	r0, [r4, #4]
    392e:	0020      	movs	r0, r4
    3930:	f000 f81c 	bl	396c <__sfp>
    3934:	60a0      	str	r0, [r4, #8]
    3936:	0020      	movs	r0, r4
    3938:	f000 f818 	bl	396c <__sfp>
    393c:	2200      	movs	r2, #0
    393e:	60e0      	str	r0, [r4, #12]
    3940:	2104      	movs	r1, #4
    3942:	6860      	ldr	r0, [r4, #4]
    3944:	f7ff ffa4 	bl	3890 <std.isra.0>
    3948:	2201      	movs	r2, #1
    394a:	2109      	movs	r1, #9
    394c:	68a0      	ldr	r0, [r4, #8]
    394e:	f7ff ff9f 	bl	3890 <std.isra.0>
    3952:	2202      	movs	r2, #2
    3954:	2112      	movs	r1, #18
    3956:	68e0      	ldr	r0, [r4, #12]
    3958:	f7ff ff9a 	bl	3890 <std.isra.0>
    395c:	2301      	movs	r3, #1
    395e:	61a3      	str	r3, [r4, #24]
    3960:	bd13      	pop	{r0, r1, r4, pc}
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	00004020 	.word	0x00004020
    3968:	00003881 	.word	0x00003881

0000396c <__sfp>:
    396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    396e:	4b1e      	ldr	r3, [pc, #120]	; (39e8 <__sfp+0x7c>)
    3970:	0007      	movs	r7, r0
    3972:	681e      	ldr	r6, [r3, #0]
    3974:	69b3      	ldr	r3, [r6, #24]
    3976:	2b00      	cmp	r3, #0
    3978:	d102      	bne.n	3980 <__sfp+0x14>
    397a:	0030      	movs	r0, r6
    397c:	f7ff ffc2 	bl	3904 <__sinit>
    3980:	3648      	adds	r6, #72	; 0x48
    3982:	68b4      	ldr	r4, [r6, #8]
    3984:	6873      	ldr	r3, [r6, #4]
    3986:	3b01      	subs	r3, #1
    3988:	d504      	bpl.n	3994 <__sfp+0x28>
    398a:	6833      	ldr	r3, [r6, #0]
    398c:	2b00      	cmp	r3, #0
    398e:	d007      	beq.n	39a0 <__sfp+0x34>
    3990:	6836      	ldr	r6, [r6, #0]
    3992:	e7f6      	b.n	3982 <__sfp+0x16>
    3994:	220c      	movs	r2, #12
    3996:	5ea5      	ldrsh	r5, [r4, r2]
    3998:	2d00      	cmp	r5, #0
    399a:	d00d      	beq.n	39b8 <__sfp+0x4c>
    399c:	3468      	adds	r4, #104	; 0x68
    399e:	e7f2      	b.n	3986 <__sfp+0x1a>
    39a0:	2104      	movs	r1, #4
    39a2:	0038      	movs	r0, r7
    39a4:	f7ff ff98 	bl	38d8 <__sfmoreglue>
    39a8:	6030      	str	r0, [r6, #0]
    39aa:	2800      	cmp	r0, #0
    39ac:	d1f0      	bne.n	3990 <__sfp+0x24>
    39ae:	230c      	movs	r3, #12
    39b0:	0004      	movs	r4, r0
    39b2:	603b      	str	r3, [r7, #0]
    39b4:	0020      	movs	r0, r4
    39b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39b8:	2301      	movs	r3, #1
    39ba:	0020      	movs	r0, r4
    39bc:	425b      	negs	r3, r3
    39be:	81e3      	strh	r3, [r4, #14]
    39c0:	3302      	adds	r3, #2
    39c2:	81a3      	strh	r3, [r4, #12]
    39c4:	6665      	str	r5, [r4, #100]	; 0x64
    39c6:	6025      	str	r5, [r4, #0]
    39c8:	60a5      	str	r5, [r4, #8]
    39ca:	6065      	str	r5, [r4, #4]
    39cc:	6125      	str	r5, [r4, #16]
    39ce:	6165      	str	r5, [r4, #20]
    39d0:	61a5      	str	r5, [r4, #24]
    39d2:	2208      	movs	r2, #8
    39d4:	0029      	movs	r1, r5
    39d6:	305c      	adds	r0, #92	; 0x5c
    39d8:	f7ff fca7 	bl	332a <memset>
    39dc:	6365      	str	r5, [r4, #52]	; 0x34
    39de:	63a5      	str	r5, [r4, #56]	; 0x38
    39e0:	64a5      	str	r5, [r4, #72]	; 0x48
    39e2:	64e5      	str	r5, [r4, #76]	; 0x4c
    39e4:	e7e6      	b.n	39b4 <__sfp+0x48>
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	00004020 	.word	0x00004020

000039ec <_fwalk_reent>:
    39ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39ee:	0004      	movs	r4, r0
    39f0:	0007      	movs	r7, r0
    39f2:	2600      	movs	r6, #0
    39f4:	9101      	str	r1, [sp, #4]
    39f6:	3448      	adds	r4, #72	; 0x48
    39f8:	2c00      	cmp	r4, #0
    39fa:	d101      	bne.n	3a00 <_fwalk_reent+0x14>
    39fc:	0030      	movs	r0, r6
    39fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3a00:	6863      	ldr	r3, [r4, #4]
    3a02:	68a5      	ldr	r5, [r4, #8]
    3a04:	9300      	str	r3, [sp, #0]
    3a06:	9b00      	ldr	r3, [sp, #0]
    3a08:	3b01      	subs	r3, #1
    3a0a:	9300      	str	r3, [sp, #0]
    3a0c:	d501      	bpl.n	3a12 <_fwalk_reent+0x26>
    3a0e:	6824      	ldr	r4, [r4, #0]
    3a10:	e7f2      	b.n	39f8 <_fwalk_reent+0xc>
    3a12:	89ab      	ldrh	r3, [r5, #12]
    3a14:	2b01      	cmp	r3, #1
    3a16:	d908      	bls.n	3a2a <_fwalk_reent+0x3e>
    3a18:	220e      	movs	r2, #14
    3a1a:	5eab      	ldrsh	r3, [r5, r2]
    3a1c:	3301      	adds	r3, #1
    3a1e:	d004      	beq.n	3a2a <_fwalk_reent+0x3e>
    3a20:	0029      	movs	r1, r5
    3a22:	0038      	movs	r0, r7
    3a24:	9b01      	ldr	r3, [sp, #4]
    3a26:	4798      	blx	r3
    3a28:	4306      	orrs	r6, r0
    3a2a:	3568      	adds	r5, #104	; 0x68
    3a2c:	e7eb      	b.n	3a06 <_fwalk_reent+0x1a>
	...

00003a30 <__swhatbuf_r>:
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	000e      	movs	r6, r1
    3a34:	001d      	movs	r5, r3
    3a36:	230e      	movs	r3, #14
    3a38:	5ec9      	ldrsh	r1, [r1, r3]
    3a3a:	b090      	sub	sp, #64	; 0x40
    3a3c:	0014      	movs	r4, r2
    3a3e:	2900      	cmp	r1, #0
    3a40:	da07      	bge.n	3a52 <__swhatbuf_r+0x22>
    3a42:	2300      	movs	r3, #0
    3a44:	602b      	str	r3, [r5, #0]
    3a46:	89b3      	ldrh	r3, [r6, #12]
    3a48:	061b      	lsls	r3, r3, #24
    3a4a:	d411      	bmi.n	3a70 <__swhatbuf_r+0x40>
    3a4c:	2380      	movs	r3, #128	; 0x80
    3a4e:	00db      	lsls	r3, r3, #3
    3a50:	e00f      	b.n	3a72 <__swhatbuf_r+0x42>
    3a52:	aa01      	add	r2, sp, #4
    3a54:	f000 f98e 	bl	3d74 <_fstat_r>
    3a58:	2800      	cmp	r0, #0
    3a5a:	dbf2      	blt.n	3a42 <__swhatbuf_r+0x12>
    3a5c:	22f0      	movs	r2, #240	; 0xf0
    3a5e:	9b02      	ldr	r3, [sp, #8]
    3a60:	0212      	lsls	r2, r2, #8
    3a62:	4013      	ands	r3, r2
    3a64:	4a05      	ldr	r2, [pc, #20]	; (3a7c <__swhatbuf_r+0x4c>)
    3a66:	189b      	adds	r3, r3, r2
    3a68:	425a      	negs	r2, r3
    3a6a:	4153      	adcs	r3, r2
    3a6c:	602b      	str	r3, [r5, #0]
    3a6e:	e7ed      	b.n	3a4c <__swhatbuf_r+0x1c>
    3a70:	2340      	movs	r3, #64	; 0x40
    3a72:	2000      	movs	r0, #0
    3a74:	6023      	str	r3, [r4, #0]
    3a76:	b010      	add	sp, #64	; 0x40
    3a78:	bd70      	pop	{r4, r5, r6, pc}
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	ffffe000 	.word	0xffffe000

00003a80 <__smakebuf_r>:
    3a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a82:	2602      	movs	r6, #2
    3a84:	898b      	ldrh	r3, [r1, #12]
    3a86:	0005      	movs	r5, r0
    3a88:	000c      	movs	r4, r1
    3a8a:	4233      	tst	r3, r6
    3a8c:	d006      	beq.n	3a9c <__smakebuf_r+0x1c>
    3a8e:	0023      	movs	r3, r4
    3a90:	3347      	adds	r3, #71	; 0x47
    3a92:	6023      	str	r3, [r4, #0]
    3a94:	6123      	str	r3, [r4, #16]
    3a96:	2301      	movs	r3, #1
    3a98:	6163      	str	r3, [r4, #20]
    3a9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3a9c:	ab01      	add	r3, sp, #4
    3a9e:	466a      	mov	r2, sp
    3aa0:	f7ff ffc6 	bl	3a30 <__swhatbuf_r>
    3aa4:	9900      	ldr	r1, [sp, #0]
    3aa6:	0007      	movs	r7, r0
    3aa8:	0028      	movs	r0, r5
    3aaa:	f000 f881 	bl	3bb0 <_malloc_r>
    3aae:	2800      	cmp	r0, #0
    3ab0:	d108      	bne.n	3ac4 <__smakebuf_r+0x44>
    3ab2:	220c      	movs	r2, #12
    3ab4:	5ea3      	ldrsh	r3, [r4, r2]
    3ab6:	059a      	lsls	r2, r3, #22
    3ab8:	d4ef      	bmi.n	3a9a <__smakebuf_r+0x1a>
    3aba:	2203      	movs	r2, #3
    3abc:	4393      	bics	r3, r2
    3abe:	431e      	orrs	r6, r3
    3ac0:	81a6      	strh	r6, [r4, #12]
    3ac2:	e7e4      	b.n	3a8e <__smakebuf_r+0xe>
    3ac4:	4b0f      	ldr	r3, [pc, #60]	; (3b04 <__smakebuf_r+0x84>)
    3ac6:	62ab      	str	r3, [r5, #40]	; 0x28
    3ac8:	2380      	movs	r3, #128	; 0x80
    3aca:	89a2      	ldrh	r2, [r4, #12]
    3acc:	6020      	str	r0, [r4, #0]
    3ace:	4313      	orrs	r3, r2
    3ad0:	81a3      	strh	r3, [r4, #12]
    3ad2:	9b00      	ldr	r3, [sp, #0]
    3ad4:	6120      	str	r0, [r4, #16]
    3ad6:	6163      	str	r3, [r4, #20]
    3ad8:	9b01      	ldr	r3, [sp, #4]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d00d      	beq.n	3afa <__smakebuf_r+0x7a>
    3ade:	230e      	movs	r3, #14
    3ae0:	5ee1      	ldrsh	r1, [r4, r3]
    3ae2:	0028      	movs	r0, r5
    3ae4:	f000 f958 	bl	3d98 <_isatty_r>
    3ae8:	2800      	cmp	r0, #0
    3aea:	d006      	beq.n	3afa <__smakebuf_r+0x7a>
    3aec:	2203      	movs	r2, #3
    3aee:	89a3      	ldrh	r3, [r4, #12]
    3af0:	4393      	bics	r3, r2
    3af2:	001a      	movs	r2, r3
    3af4:	2301      	movs	r3, #1
    3af6:	4313      	orrs	r3, r2
    3af8:	81a3      	strh	r3, [r4, #12]
    3afa:	89a0      	ldrh	r0, [r4, #12]
    3afc:	4338      	orrs	r0, r7
    3afe:	81a0      	strh	r0, [r4, #12]
    3b00:	e7cb      	b.n	3a9a <__smakebuf_r+0x1a>
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	00003881 	.word	0x00003881

00003b08 <malloc>:
    3b08:	b510      	push	{r4, lr}
    3b0a:	4b03      	ldr	r3, [pc, #12]	; (3b18 <malloc+0x10>)
    3b0c:	0001      	movs	r1, r0
    3b0e:	6818      	ldr	r0, [r3, #0]
    3b10:	f000 f84e 	bl	3bb0 <_malloc_r>
    3b14:	bd10      	pop	{r4, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	2000000c 	.word	0x2000000c

00003b1c <_free_r>:
    3b1c:	b570      	push	{r4, r5, r6, lr}
    3b1e:	0005      	movs	r5, r0
    3b20:	2900      	cmp	r1, #0
    3b22:	d010      	beq.n	3b46 <_free_r+0x2a>
    3b24:	1f0c      	subs	r4, r1, #4
    3b26:	6823      	ldr	r3, [r4, #0]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	da00      	bge.n	3b2e <_free_r+0x12>
    3b2c:	18e4      	adds	r4, r4, r3
    3b2e:	0028      	movs	r0, r5
    3b30:	f000 f958 	bl	3de4 <__malloc_lock>
    3b34:	4a1d      	ldr	r2, [pc, #116]	; (3bac <_free_r+0x90>)
    3b36:	6813      	ldr	r3, [r2, #0]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d105      	bne.n	3b48 <_free_r+0x2c>
    3b3c:	6063      	str	r3, [r4, #4]
    3b3e:	6014      	str	r4, [r2, #0]
    3b40:	0028      	movs	r0, r5
    3b42:	f000 f950 	bl	3de6 <__malloc_unlock>
    3b46:	bd70      	pop	{r4, r5, r6, pc}
    3b48:	42a3      	cmp	r3, r4
    3b4a:	d909      	bls.n	3b60 <_free_r+0x44>
    3b4c:	6821      	ldr	r1, [r4, #0]
    3b4e:	1860      	adds	r0, r4, r1
    3b50:	4283      	cmp	r3, r0
    3b52:	d1f3      	bne.n	3b3c <_free_r+0x20>
    3b54:	6818      	ldr	r0, [r3, #0]
    3b56:	685b      	ldr	r3, [r3, #4]
    3b58:	1841      	adds	r1, r0, r1
    3b5a:	6021      	str	r1, [r4, #0]
    3b5c:	e7ee      	b.n	3b3c <_free_r+0x20>
    3b5e:	0013      	movs	r3, r2
    3b60:	685a      	ldr	r2, [r3, #4]
    3b62:	2a00      	cmp	r2, #0
    3b64:	d001      	beq.n	3b6a <_free_r+0x4e>
    3b66:	42a2      	cmp	r2, r4
    3b68:	d9f9      	bls.n	3b5e <_free_r+0x42>
    3b6a:	6819      	ldr	r1, [r3, #0]
    3b6c:	1858      	adds	r0, r3, r1
    3b6e:	42a0      	cmp	r0, r4
    3b70:	d10b      	bne.n	3b8a <_free_r+0x6e>
    3b72:	6820      	ldr	r0, [r4, #0]
    3b74:	1809      	adds	r1, r1, r0
    3b76:	1858      	adds	r0, r3, r1
    3b78:	6019      	str	r1, [r3, #0]
    3b7a:	4282      	cmp	r2, r0
    3b7c:	d1e0      	bne.n	3b40 <_free_r+0x24>
    3b7e:	6810      	ldr	r0, [r2, #0]
    3b80:	6852      	ldr	r2, [r2, #4]
    3b82:	1841      	adds	r1, r0, r1
    3b84:	6019      	str	r1, [r3, #0]
    3b86:	605a      	str	r2, [r3, #4]
    3b88:	e7da      	b.n	3b40 <_free_r+0x24>
    3b8a:	42a0      	cmp	r0, r4
    3b8c:	d902      	bls.n	3b94 <_free_r+0x78>
    3b8e:	230c      	movs	r3, #12
    3b90:	602b      	str	r3, [r5, #0]
    3b92:	e7d5      	b.n	3b40 <_free_r+0x24>
    3b94:	6821      	ldr	r1, [r4, #0]
    3b96:	1860      	adds	r0, r4, r1
    3b98:	4282      	cmp	r2, r0
    3b9a:	d103      	bne.n	3ba4 <_free_r+0x88>
    3b9c:	6810      	ldr	r0, [r2, #0]
    3b9e:	6852      	ldr	r2, [r2, #4]
    3ba0:	1841      	adds	r1, r0, r1
    3ba2:	6021      	str	r1, [r4, #0]
    3ba4:	6062      	str	r2, [r4, #4]
    3ba6:	605c      	str	r4, [r3, #4]
    3ba8:	e7ca      	b.n	3b40 <_free_r+0x24>
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	2000055c 	.word	0x2000055c

00003bb0 <_malloc_r>:
    3bb0:	2303      	movs	r3, #3
    3bb2:	b570      	push	{r4, r5, r6, lr}
    3bb4:	1ccd      	adds	r5, r1, #3
    3bb6:	439d      	bics	r5, r3
    3bb8:	3508      	adds	r5, #8
    3bba:	0006      	movs	r6, r0
    3bbc:	2d0c      	cmp	r5, #12
    3bbe:	d21e      	bcs.n	3bfe <_malloc_r+0x4e>
    3bc0:	250c      	movs	r5, #12
    3bc2:	42a9      	cmp	r1, r5
    3bc4:	d81d      	bhi.n	3c02 <_malloc_r+0x52>
    3bc6:	0030      	movs	r0, r6
    3bc8:	f000 f90c 	bl	3de4 <__malloc_lock>
    3bcc:	4a25      	ldr	r2, [pc, #148]	; (3c64 <_malloc_r+0xb4>)
    3bce:	6814      	ldr	r4, [r2, #0]
    3bd0:	0021      	movs	r1, r4
    3bd2:	2900      	cmp	r1, #0
    3bd4:	d119      	bne.n	3c0a <_malloc_r+0x5a>
    3bd6:	4c24      	ldr	r4, [pc, #144]	; (3c68 <_malloc_r+0xb8>)
    3bd8:	6823      	ldr	r3, [r4, #0]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d103      	bne.n	3be6 <_malloc_r+0x36>
    3bde:	0030      	movs	r0, r6
    3be0:	f000 f844 	bl	3c6c <_sbrk_r>
    3be4:	6020      	str	r0, [r4, #0]
    3be6:	0029      	movs	r1, r5
    3be8:	0030      	movs	r0, r6
    3bea:	f000 f83f 	bl	3c6c <_sbrk_r>
    3bee:	1c43      	adds	r3, r0, #1
    3bf0:	d12c      	bne.n	3c4c <_malloc_r+0x9c>
    3bf2:	230c      	movs	r3, #12
    3bf4:	0030      	movs	r0, r6
    3bf6:	6033      	str	r3, [r6, #0]
    3bf8:	f000 f8f5 	bl	3de6 <__malloc_unlock>
    3bfc:	e003      	b.n	3c06 <_malloc_r+0x56>
    3bfe:	2d00      	cmp	r5, #0
    3c00:	dadf      	bge.n	3bc2 <_malloc_r+0x12>
    3c02:	230c      	movs	r3, #12
    3c04:	6033      	str	r3, [r6, #0]
    3c06:	2000      	movs	r0, #0
    3c08:	bd70      	pop	{r4, r5, r6, pc}
    3c0a:	680b      	ldr	r3, [r1, #0]
    3c0c:	1b5b      	subs	r3, r3, r5
    3c0e:	d41a      	bmi.n	3c46 <_malloc_r+0x96>
    3c10:	2b0b      	cmp	r3, #11
    3c12:	d903      	bls.n	3c1c <_malloc_r+0x6c>
    3c14:	600b      	str	r3, [r1, #0]
    3c16:	18cc      	adds	r4, r1, r3
    3c18:	6025      	str	r5, [r4, #0]
    3c1a:	e003      	b.n	3c24 <_malloc_r+0x74>
    3c1c:	428c      	cmp	r4, r1
    3c1e:	d10e      	bne.n	3c3e <_malloc_r+0x8e>
    3c20:	6863      	ldr	r3, [r4, #4]
    3c22:	6013      	str	r3, [r2, #0]
    3c24:	0030      	movs	r0, r6
    3c26:	f000 f8de 	bl	3de6 <__malloc_unlock>
    3c2a:	0020      	movs	r0, r4
    3c2c:	2207      	movs	r2, #7
    3c2e:	300b      	adds	r0, #11
    3c30:	1d23      	adds	r3, r4, #4
    3c32:	4390      	bics	r0, r2
    3c34:	1ac3      	subs	r3, r0, r3
    3c36:	d0e7      	beq.n	3c08 <_malloc_r+0x58>
    3c38:	425a      	negs	r2, r3
    3c3a:	50e2      	str	r2, [r4, r3]
    3c3c:	e7e4      	b.n	3c08 <_malloc_r+0x58>
    3c3e:	684b      	ldr	r3, [r1, #4]
    3c40:	6063      	str	r3, [r4, #4]
    3c42:	000c      	movs	r4, r1
    3c44:	e7ee      	b.n	3c24 <_malloc_r+0x74>
    3c46:	000c      	movs	r4, r1
    3c48:	6849      	ldr	r1, [r1, #4]
    3c4a:	e7c2      	b.n	3bd2 <_malloc_r+0x22>
    3c4c:	2303      	movs	r3, #3
    3c4e:	1cc4      	adds	r4, r0, #3
    3c50:	439c      	bics	r4, r3
    3c52:	42a0      	cmp	r0, r4
    3c54:	d0e0      	beq.n	3c18 <_malloc_r+0x68>
    3c56:	1a21      	subs	r1, r4, r0
    3c58:	0030      	movs	r0, r6
    3c5a:	f000 f807 	bl	3c6c <_sbrk_r>
    3c5e:	1c43      	adds	r3, r0, #1
    3c60:	d1da      	bne.n	3c18 <_malloc_r+0x68>
    3c62:	e7c6      	b.n	3bf2 <_malloc_r+0x42>
    3c64:	2000055c 	.word	0x2000055c
    3c68:	20000560 	.word	0x20000560

00003c6c <_sbrk_r>:
    3c6c:	2300      	movs	r3, #0
    3c6e:	b570      	push	{r4, r5, r6, lr}
    3c70:	4c06      	ldr	r4, [pc, #24]	; (3c8c <_sbrk_r+0x20>)
    3c72:	0005      	movs	r5, r0
    3c74:	0008      	movs	r0, r1
    3c76:	6023      	str	r3, [r4, #0]
    3c78:	f7fe feaa 	bl	29d0 <_sbrk>
    3c7c:	1c43      	adds	r3, r0, #1
    3c7e:	d103      	bne.n	3c88 <_sbrk_r+0x1c>
    3c80:	6823      	ldr	r3, [r4, #0]
    3c82:	2b00      	cmp	r3, #0
    3c84:	d000      	beq.n	3c88 <_sbrk_r+0x1c>
    3c86:	602b      	str	r3, [r5, #0]
    3c88:	bd70      	pop	{r4, r5, r6, pc}
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	20000610 	.word	0x20000610

00003c90 <__sread>:
    3c90:	b570      	push	{r4, r5, r6, lr}
    3c92:	000c      	movs	r4, r1
    3c94:	250e      	movs	r5, #14
    3c96:	5f49      	ldrsh	r1, [r1, r5]
    3c98:	f000 f8a6 	bl	3de8 <_read_r>
    3c9c:	2800      	cmp	r0, #0
    3c9e:	db03      	blt.n	3ca8 <__sread+0x18>
    3ca0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3ca2:	181b      	adds	r3, r3, r0
    3ca4:	6563      	str	r3, [r4, #84]	; 0x54
    3ca6:	bd70      	pop	{r4, r5, r6, pc}
    3ca8:	89a3      	ldrh	r3, [r4, #12]
    3caa:	4a02      	ldr	r2, [pc, #8]	; (3cb4 <__sread+0x24>)
    3cac:	4013      	ands	r3, r2
    3cae:	81a3      	strh	r3, [r4, #12]
    3cb0:	e7f9      	b.n	3ca6 <__sread+0x16>
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	ffffefff 	.word	0xffffefff

00003cb8 <__swrite>:
    3cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cba:	001f      	movs	r7, r3
    3cbc:	898b      	ldrh	r3, [r1, #12]
    3cbe:	0005      	movs	r5, r0
    3cc0:	000c      	movs	r4, r1
    3cc2:	0016      	movs	r6, r2
    3cc4:	05db      	lsls	r3, r3, #23
    3cc6:	d505      	bpl.n	3cd4 <__swrite+0x1c>
    3cc8:	230e      	movs	r3, #14
    3cca:	5ec9      	ldrsh	r1, [r1, r3]
    3ccc:	2200      	movs	r2, #0
    3cce:	2302      	movs	r3, #2
    3cd0:	f000 f874 	bl	3dbc <_lseek_r>
    3cd4:	89a3      	ldrh	r3, [r4, #12]
    3cd6:	4a05      	ldr	r2, [pc, #20]	; (3cec <__swrite+0x34>)
    3cd8:	0028      	movs	r0, r5
    3cda:	4013      	ands	r3, r2
    3cdc:	81a3      	strh	r3, [r4, #12]
    3cde:	0032      	movs	r2, r6
    3ce0:	230e      	movs	r3, #14
    3ce2:	5ee1      	ldrsh	r1, [r4, r3]
    3ce4:	003b      	movs	r3, r7
    3ce6:	f000 f81f 	bl	3d28 <_write_r>
    3cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cec:	ffffefff 	.word	0xffffefff

00003cf0 <__sseek>:
    3cf0:	b570      	push	{r4, r5, r6, lr}
    3cf2:	000c      	movs	r4, r1
    3cf4:	250e      	movs	r5, #14
    3cf6:	5f49      	ldrsh	r1, [r1, r5]
    3cf8:	f000 f860 	bl	3dbc <_lseek_r>
    3cfc:	89a3      	ldrh	r3, [r4, #12]
    3cfe:	1c42      	adds	r2, r0, #1
    3d00:	d103      	bne.n	3d0a <__sseek+0x1a>
    3d02:	4a05      	ldr	r2, [pc, #20]	; (3d18 <__sseek+0x28>)
    3d04:	4013      	ands	r3, r2
    3d06:	81a3      	strh	r3, [r4, #12]
    3d08:	bd70      	pop	{r4, r5, r6, pc}
    3d0a:	2280      	movs	r2, #128	; 0x80
    3d0c:	0152      	lsls	r2, r2, #5
    3d0e:	4313      	orrs	r3, r2
    3d10:	81a3      	strh	r3, [r4, #12]
    3d12:	6560      	str	r0, [r4, #84]	; 0x54
    3d14:	e7f8      	b.n	3d08 <__sseek+0x18>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	ffffefff 	.word	0xffffefff

00003d1c <__sclose>:
    3d1c:	b510      	push	{r4, lr}
    3d1e:	230e      	movs	r3, #14
    3d20:	5ec9      	ldrsh	r1, [r1, r3]
    3d22:	f000 f815 	bl	3d50 <_close_r>
    3d26:	bd10      	pop	{r4, pc}

00003d28 <_write_r>:
    3d28:	b570      	push	{r4, r5, r6, lr}
    3d2a:	0005      	movs	r5, r0
    3d2c:	0008      	movs	r0, r1
    3d2e:	0011      	movs	r1, r2
    3d30:	2200      	movs	r2, #0
    3d32:	4c06      	ldr	r4, [pc, #24]	; (3d4c <_write_r+0x24>)
    3d34:	6022      	str	r2, [r4, #0]
    3d36:	001a      	movs	r2, r3
    3d38:	f7fe fe22 	bl	2980 <_write>
    3d3c:	1c43      	adds	r3, r0, #1
    3d3e:	d103      	bne.n	3d48 <_write_r+0x20>
    3d40:	6823      	ldr	r3, [r4, #0]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d000      	beq.n	3d48 <_write_r+0x20>
    3d46:	602b      	str	r3, [r5, #0]
    3d48:	bd70      	pop	{r4, r5, r6, pc}
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	20000610 	.word	0x20000610

00003d50 <_close_r>:
    3d50:	2300      	movs	r3, #0
    3d52:	b570      	push	{r4, r5, r6, lr}
    3d54:	4c06      	ldr	r4, [pc, #24]	; (3d70 <_close_r+0x20>)
    3d56:	0005      	movs	r5, r0
    3d58:	0008      	movs	r0, r1
    3d5a:	6023      	str	r3, [r4, #0]
    3d5c:	f7fe fe4a 	bl	29f4 <_close>
    3d60:	1c43      	adds	r3, r0, #1
    3d62:	d103      	bne.n	3d6c <_close_r+0x1c>
    3d64:	6823      	ldr	r3, [r4, #0]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d000      	beq.n	3d6c <_close_r+0x1c>
    3d6a:	602b      	str	r3, [r5, #0]
    3d6c:	bd70      	pop	{r4, r5, r6, pc}
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	20000610 	.word	0x20000610

00003d74 <_fstat_r>:
    3d74:	2300      	movs	r3, #0
    3d76:	b570      	push	{r4, r5, r6, lr}
    3d78:	4c06      	ldr	r4, [pc, #24]	; (3d94 <_fstat_r+0x20>)
    3d7a:	0005      	movs	r5, r0
    3d7c:	0008      	movs	r0, r1
    3d7e:	0011      	movs	r1, r2
    3d80:	6023      	str	r3, [r4, #0]
    3d82:	f7fe fe3a 	bl	29fa <_fstat>
    3d86:	1c43      	adds	r3, r0, #1
    3d88:	d103      	bne.n	3d92 <_fstat_r+0x1e>
    3d8a:	6823      	ldr	r3, [r4, #0]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d000      	beq.n	3d92 <_fstat_r+0x1e>
    3d90:	602b      	str	r3, [r5, #0]
    3d92:	bd70      	pop	{r4, r5, r6, pc}
    3d94:	20000610 	.word	0x20000610

00003d98 <_isatty_r>:
    3d98:	2300      	movs	r3, #0
    3d9a:	b570      	push	{r4, r5, r6, lr}
    3d9c:	4c06      	ldr	r4, [pc, #24]	; (3db8 <_isatty_r+0x20>)
    3d9e:	0005      	movs	r5, r0
    3da0:	0008      	movs	r0, r1
    3da2:	6023      	str	r3, [r4, #0]
    3da4:	f7fe fe2e 	bl	2a04 <_isatty>
    3da8:	1c43      	adds	r3, r0, #1
    3daa:	d103      	bne.n	3db4 <_isatty_r+0x1c>
    3dac:	6823      	ldr	r3, [r4, #0]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d000      	beq.n	3db4 <_isatty_r+0x1c>
    3db2:	602b      	str	r3, [r5, #0]
    3db4:	bd70      	pop	{r4, r5, r6, pc}
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	20000610 	.word	0x20000610

00003dbc <_lseek_r>:
    3dbc:	b570      	push	{r4, r5, r6, lr}
    3dbe:	0005      	movs	r5, r0
    3dc0:	0008      	movs	r0, r1
    3dc2:	0011      	movs	r1, r2
    3dc4:	2200      	movs	r2, #0
    3dc6:	4c06      	ldr	r4, [pc, #24]	; (3de0 <_lseek_r+0x24>)
    3dc8:	6022      	str	r2, [r4, #0]
    3dca:	001a      	movs	r2, r3
    3dcc:	f7fe fe1c 	bl	2a08 <_lseek>
    3dd0:	1c43      	adds	r3, r0, #1
    3dd2:	d103      	bne.n	3ddc <_lseek_r+0x20>
    3dd4:	6823      	ldr	r3, [r4, #0]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d000      	beq.n	3ddc <_lseek_r+0x20>
    3dda:	602b      	str	r3, [r5, #0]
    3ddc:	bd70      	pop	{r4, r5, r6, pc}
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	20000610 	.word	0x20000610

00003de4 <__malloc_lock>:
    3de4:	4770      	bx	lr

00003de6 <__malloc_unlock>:
    3de6:	4770      	bx	lr

00003de8 <_read_r>:
    3de8:	b570      	push	{r4, r5, r6, lr}
    3dea:	0005      	movs	r5, r0
    3dec:	0008      	movs	r0, r1
    3dee:	0011      	movs	r1, r2
    3df0:	2200      	movs	r2, #0
    3df2:	4c06      	ldr	r4, [pc, #24]	; (3e0c <_read_r+0x24>)
    3df4:	6022      	str	r2, [r4, #0]
    3df6:	001a      	movs	r2, r3
    3df8:	f7fe fda0 	bl	293c <_read>
    3dfc:	1c43      	adds	r3, r0, #1
    3dfe:	d103      	bne.n	3e08 <_read_r+0x20>
    3e00:	6823      	ldr	r3, [r4, #0]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d000      	beq.n	3e08 <_read_r+0x20>
    3e06:	602b      	str	r3, [r5, #0]
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	20000610 	.word	0x20000610
    3e10:	000008de 	.word	0x000008de
    3e14:	000008de 	.word	0x000008de
    3e18:	0000090e 	.word	0x0000090e
    3e1c:	00000890 	.word	0x00000890
    3e20:	000008b4 	.word	0x000008b4
    3e24:	000008c2 	.word	0x000008c2
    3e28:	000008f4 	.word	0x000008f4
    3e2c:	000008f4 	.word	0x000008f4
    3e30:	0000093c 	.word	0x0000093c
    3e34:	00000874 	.word	0x00000874
    3e38:	0000095a 	.word	0x0000095a
    3e3c:	0000095a 	.word	0x0000095a
    3e40:	0000095a 	.word	0x0000095a
    3e44:	0000095a 	.word	0x0000095a
    3e48:	000008d0 	.word	0x000008d0
    3e4c:	c9c3      	.short	0xc9c3
    3e4e:	cac4      	.short	0xcac4

00003e50 <crc7_syndrome_table>:
    3e50:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    3e60:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    3e70:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    3e80:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    3e90:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    3ea0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    3eb0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    3ec0:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    3ed0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    3ee0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    3ef0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    3f00:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    3f10:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    3f20:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    3f30:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    3f40:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    3f50:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    3f60:	1800 4200 1c00 4200 20ca 0000 20c6 0000     ...B...B. ... ..
    3f70:	20c6 0000 2128 0000 2128 0000 20de 0000     . ..(!..(!... ..
    3f80:	20d0 0000 20e4 0000 2116 0000 22e8 0000     . ... ...!..."..
    3f90:	22c8 0000 22c8 0000 2354 0000 22da 0000     ."..."..T#..."..
    3fa0:	22f6 0000 22cc 0000 2304 0000 2344 0000     ."..."...#..D#..
    3fb0:	2c72 0000 2cf0 0000 2d7a 0000 2d98 0000     r,...,..z-...-..
    3fc0:	2e56 0000 2eb8 0000 3010 0000 2edc 0000     V........0......
    3fd0:	2f00 0000 2f24 0000 2fc4 0000 3032 0000     ./..$/.../..20..
    3fe0:	305e 0000 308c 0000 2ff8 0000 30ba 0000     ^0...0.../...0..
    3ff0:	6146 6c69 6465 7420 206f 7570 2074 6874     Failed to put th
    4000:	2065 6957 6946 4320 6968 2070 6e69 6420     e WiFi Chip in d
    4010:	776f 6c6e 616f 2064 6f6d 6564 0a21 0000     ownload mode!...

00004020 <_global_impure_ptr>:
    4020:	0010 2000                                   ... 

00004024 <__sf_fake_stderr>:
	...

00004044 <__sf_fake_stdin>:
	...

00004064 <__sf_fake_stdout>:
	...

00004084 <_init>:
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	bcf8      	pop	{r3, r4, r5, r6, r7}
    408a:	bc08      	pop	{r3}
    408c:	469e      	mov	lr, r3
    408e:	4770      	bx	lr

00004090 <__init_array_start>:
    4090:	000000dd 	.word	0x000000dd

00004094 <_fini>:
    4094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	bcf8      	pop	{r3, r4, r5, r6, r7}
    409a:	bc08      	pop	{r3}
    409c:	469e      	mov	lr, r3
    409e:	4770      	bx	lr

000040a0 <__fini_array_start>:
    40a0:	000000b5 	.word	0x000000b5
