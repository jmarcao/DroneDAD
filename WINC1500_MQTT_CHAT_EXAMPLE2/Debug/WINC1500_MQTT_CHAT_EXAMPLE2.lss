
WINC1500_MQTT_CHAT_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a254  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  0000a254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000448  200001dc  0000a430  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000624  0000a878  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005719e  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007ce0  00000000  00000000  0007746c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001264b  00000000  00000000  0007f14c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000db0  00000000  00000000  00091797  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001378  00000000  00000000  00092547  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021ff7  00000000  00000000  000938bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b04c  00000000  00000000  000b58b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094c98  00000000  00000000  000d0902  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003358  00000000  00000000  0016559c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 26 00 20 69 52 00 00 65 52 00 00 65 52 00 00     (&. iR..eR..eR..
	...
      2c:	65 52 00 00 00 00 00 00 00 00 00 00 65 52 00 00     eR..........eR..
      3c:	65 52 00 00 65 52 00 00 65 52 00 00 65 52 00 00     eR..eR..eR..eR..
      4c:	65 52 00 00 15 34 00 00 65 52 00 00 65 52 00 00     eR...4..eR..eR..
      5c:	65 52 00 00 65 52 00 00 81 39 00 00 91 39 00 00     eR..eR...9...9..
      6c:	a1 39 00 00 b1 39 00 00 c1 39 00 00 d1 39 00 00     .9...9...9...9..
      7c:	35 52 00 00 45 52 00 00 55 52 00 00 65 52 00 00     5R..ER..UR..eR..
      8c:	65 52 00 00 65 52 00 00 00 00 00 00 00 00 00 00     eR..eR..........
      9c:	65 52 00 00 65 52 00 00 65 52 00 00 65 52 00 00     eR..eR..eR..eR..
      ac:	65 52 00 00 00 00 00 00                             eR......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	0000a254 	.word	0x0000a254

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	0000a254 	.word	0x0000a254
     10c:	0000a254 	.word	0x0000a254
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00004995 	.word	0x00004995
     140:	000069c9 	.word	0x000069c9
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     180:	b510      	push	{r4, lr}
	if (gpfIsr) {
     182:	4b03      	ldr	r3, [pc, #12]	; (190 <chip_isr+0x10>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d000      	beq.n	18c <chip_isr+0xc>
		gpfIsr();
     18a:	4798      	blx	r3
	}
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	200001f8 	.word	0x200001f8

00000194 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     194:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     196:	1e44      	subs	r4, r0, #1
     198:	2800      	cmp	r0, #0
     19a:	d004      	beq.n	1a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
     19c:	4d02      	ldr	r5, [pc, #8]	; (1a8 <nm_bsp_sleep+0x14>)
     19e:	2001      	movs	r0, #1
     1a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
     1a2:	3c01      	subs	r4, #1
     1a4:	d2fb      	bcs.n	19e <nm_bsp_sleep+0xa>
	}
}
     1a6:	bd70      	pop	{r4, r5, r6, pc}
     1a8:	00000155 	.word	0x00000155

000001ac <nm_bsp_reset>:
{
     1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1ae:	4c07      	ldr	r4, [pc, #28]	; (1cc <nm_bsp_reset+0x20>)
     1b0:	2780      	movs	r7, #128	; 0x80
     1b2:	057f      	lsls	r7, r7, #21
     1b4:	6167      	str	r7, [r4, #20]
     1b6:	2580      	movs	r5, #128	; 0x80
     1b8:	052d      	lsls	r5, r5, #20
     1ba:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     1bc:	2001      	movs	r0, #1
     1be:	4e04      	ldr	r6, [pc, #16]	; (1d0 <nm_bsp_reset+0x24>)
     1c0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     1c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     1c4:	200a      	movs	r0, #10
     1c6:	47b0      	blx	r6
     1c8:	61a5      	str	r5, [r4, #24]
}
     1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1cc:	41004400 	.word	0x41004400
     1d0:	00000195 	.word	0x00000195

000001d4 <nm_bsp_init>:
{
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1d8:	2300      	movs	r3, #0
     1da:	4a16      	ldr	r2, [pc, #88]	; (234 <nm_bsp_init+0x60>)
     1dc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1de:	ac01      	add	r4, sp, #4
     1e0:	2501      	movs	r5, #1
     1e2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1e6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1e8:	0021      	movs	r1, r4
     1ea:	201b      	movs	r0, #27
     1ec:	4e12      	ldr	r6, [pc, #72]	; (238 <nm_bsp_init+0x64>)
     1ee:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1f0:	0021      	movs	r1, r4
     1f2:	201c      	movs	r0, #28
     1f4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1f6:	0021      	movs	r1, r4
     1f8:	2028      	movs	r0, #40	; 0x28
     1fa:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     1fc:	4b0f      	ldr	r3, [pc, #60]	; (23c <nm_bsp_init+0x68>)
     1fe:	2280      	movs	r2, #128	; 0x80
     200:	0552      	lsls	r2, r2, #21
     202:	615a      	str	r2, [r3, #20]
     204:	2280      	movs	r2, #128	; 0x80
     206:	0512      	lsls	r2, r2, #20
     208:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     20a:	4b0d      	ldr	r3, [pc, #52]	; (240 <nm_bsp_init+0x6c>)
     20c:	681b      	ldr	r3, [r3, #0]
     20e:	421d      	tst	r5, r3
     210:	d003      	beq.n	21a <nm_bsp_init+0x46>
     212:	4b0b      	ldr	r3, [pc, #44]	; (240 <nm_bsp_init+0x6c>)
     214:	681b      	ldr	r3, [r3, #0]
     216:	079b      	lsls	r3, r3, #30
     218:	d401      	bmi.n	21e <nm_bsp_init+0x4a>
	    delay_init();
     21a:	4b0a      	ldr	r3, [pc, #40]	; (244 <nm_bsp_init+0x70>)
     21c:	4798      	blx	r3
	nm_bsp_reset();
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <nm_bsp_init+0x74>)
     220:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     222:	2201      	movs	r2, #1
     224:	4b09      	ldr	r3, [pc, #36]	; (24c <nm_bsp_init+0x78>)
     226:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     228:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     22c:	b662      	cpsie	i
}
     22e:	2000      	movs	r0, #0
     230:	b002      	add	sp, #8
     232:	bd70      	pop	{r4, r5, r6, pc}
     234:	200001f8 	.word	0x200001f8
     238:	00003579 	.word	0x00003579
     23c:	41004400 	.word	0x41004400
     240:	e000e010 	.word	0xe000e010
     244:	00000115 	.word	0x00000115
     248:	000001ad 	.word	0x000001ad
     24c:	2000000a 	.word	0x2000000a

00000250 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     250:	b510      	push	{r4, lr}
     252:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     254:	4b0e      	ldr	r3, [pc, #56]	; (290 <nm_bsp_register_isr+0x40>)
     256:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     258:	ac01      	add	r4, sp, #4
     25a:	0020      	movs	r0, r4
     25c:	4b0d      	ldr	r3, [pc, #52]	; (294 <nm_bsp_register_isr+0x44>)
     25e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     260:	2329      	movs	r3, #41	; 0x29
     262:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     264:	2300      	movs	r3, #0
     266:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     268:	3301      	adds	r3, #1
     26a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     26c:	3301      	adds	r3, #1
     26e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     270:	0021      	movs	r1, r4
     272:	2009      	movs	r0, #9
     274:	4b08      	ldr	r3, [pc, #32]	; (298 <nm_bsp_register_isr+0x48>)
     276:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     278:	2200      	movs	r2, #0
     27a:	2109      	movs	r1, #9
     27c:	4807      	ldr	r0, [pc, #28]	; (29c <nm_bsp_register_isr+0x4c>)
     27e:	4b08      	ldr	r3, [pc, #32]	; (2a0 <nm_bsp_register_isr+0x50>)
     280:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     282:	2100      	movs	r1, #0
     284:	2009      	movs	r0, #9
     286:	4b07      	ldr	r3, [pc, #28]	; (2a4 <nm_bsp_register_isr+0x54>)
     288:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     28a:	b004      	add	sp, #16
     28c:	bd10      	pop	{r4, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	200001f8 	.word	0x200001f8
     294:	000034ed 	.word	0x000034ed
     298:	00003501 	.word	0x00003501
     29c:	00000181 	.word	0x00000181
     2a0:	000033a9 	.word	0x000033a9
     2a4:	000033d5 	.word	0x000033d5

000002a8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     2a8:	b510      	push	{r4, lr}
	if (u8Enable) {
     2aa:	2800      	cmp	r0, #0
     2ac:	d104      	bne.n	2b8 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2ae:	2100      	movs	r1, #0
     2b0:	2009      	movs	r0, #9
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <nm_bsp_interrupt_ctrl+0x1c>)
     2b4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2b6:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2b8:	2100      	movs	r1, #0
     2ba:	2009      	movs	r0, #9
     2bc:	4b02      	ldr	r3, [pc, #8]	; (2c8 <nm_bsp_interrupt_ctrl+0x20>)
     2be:	4798      	blx	r3
     2c0:	e7f9      	b.n	2b6 <nm_bsp_interrupt_ctrl+0xe>
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	000033f5 	.word	0x000033f5
     2c8:	000033d5 	.word	0x000033d5

000002cc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2cc:	b530      	push	{r4, r5, lr}
     2ce:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2d0:	4c30      	ldr	r4, [pc, #192]	; (394 <nm_bus_init+0xc8>)
     2d2:	230e      	movs	r3, #14
     2d4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2d6:	2300      	movs	r3, #0
     2d8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2da:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2dc:	a901      	add	r1, sp, #4
     2de:	2201      	movs	r2, #1
     2e0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2e2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2e4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2e6:	200e      	movs	r0, #14
     2e8:	4b2b      	ldr	r3, [pc, #172]	; (398 <nm_bus_init+0xcc>)
     2ea:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2ec:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ee:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2f2:	2900      	cmp	r1, #0
     2f4:	d104      	bne.n	300 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2f6:	0953      	lsrs	r3, r2, #5
     2f8:	01db      	lsls	r3, r3, #7
     2fa:	4928      	ldr	r1, [pc, #160]	; (39c <nm_bus_init+0xd0>)
     2fc:	468c      	mov	ip, r1
     2fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     300:	211f      	movs	r1, #31
     302:	4011      	ands	r1, r2
     304:	2201      	movs	r2, #1
     306:	0010      	movs	r0, r2
     308:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     30a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     30c:	ac02      	add	r4, sp, #8
     30e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     310:	2300      	movs	r3, #0
     312:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     314:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     316:	21c0      	movs	r1, #192	; 0xc0
     318:	0389      	lsls	r1, r1, #14
     31a:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     31c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     31e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     320:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     322:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     324:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     326:	3223      	adds	r2, #35	; 0x23
     328:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     32a:	3a18      	subs	r2, #24
     32c:	2100      	movs	r1, #0
     32e:	a808      	add	r0, sp, #32
     330:	4b1b      	ldr	r3, [pc, #108]	; (3a0 <nm_bus_init+0xd4>)
     332:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     334:	4b1b      	ldr	r3, [pc, #108]	; (3a4 <nm_bus_init+0xd8>)
     336:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     338:	4b1b      	ldr	r3, [pc, #108]	; (3a8 <nm_bus_init+0xdc>)
     33a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     33c:	2301      	movs	r3, #1
     33e:	425b      	negs	r3, r3
     340:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     342:	4b1a      	ldr	r3, [pc, #104]	; (3ac <nm_bus_init+0xe0>)
     344:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     346:	4b1a      	ldr	r3, [pc, #104]	; (3b0 <nm_bus_init+0xe4>)
     348:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     34a:	0022      	movs	r2, r4
     34c:	4919      	ldr	r1, [pc, #100]	; (3b4 <nm_bus_init+0xe8>)
     34e:	481a      	ldr	r0, [pc, #104]	; (3b8 <nm_bus_init+0xec>)
     350:	4b1a      	ldr	r3, [pc, #104]	; (3bc <nm_bus_init+0xf0>)
     352:	4798      	blx	r3
     354:	2800      	cmp	r0, #0
     356:	d11a      	bne.n	38e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     358:	4d17      	ldr	r5, [pc, #92]	; (3b8 <nm_bus_init+0xec>)
     35a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     35c:	0020      	movs	r0, r4
     35e:	4b18      	ldr	r3, [pc, #96]	; (3c0 <nm_bus_init+0xf4>)
     360:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     362:	231f      	movs	r3, #31
     364:	4018      	ands	r0, r3
     366:	3b1e      	subs	r3, #30
     368:	4083      	lsls	r3, r0
     36a:	4a16      	ldr	r2, [pc, #88]	; (3c4 <nm_bus_init+0xf8>)
     36c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     36e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     370:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     372:	2b00      	cmp	r3, #0
     374:	d1fc      	bne.n	370 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     376:	6823      	ldr	r3, [r4, #0]
     378:	2202      	movs	r2, #2
     37a:	4313      	orrs	r3, r2
     37c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     37e:	4b12      	ldr	r3, [pc, #72]	; (3c8 <nm_bus_init+0xfc>)
     380:	4798      	blx	r3
	nm_bsp_sleep(1);
     382:	2001      	movs	r0, #1
     384:	4b11      	ldr	r3, [pc, #68]	; (3cc <nm_bus_init+0x100>)
     386:	4798      	blx	r3
#endif
	return result;
     388:	2000      	movs	r0, #0
}
     38a:	b011      	add	sp, #68	; 0x44
     38c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     38e:	2006      	movs	r0, #6
     390:	4240      	negs	r0, r0
     392:	e7fa      	b.n	38a <nm_bus_init+0xbe>
     394:	20000428 	.word	0x20000428
     398:	00003579 	.word	0x00003579
     39c:	41004400 	.word	0x41004400
     3a0:	00006d9b 	.word	0x00006d9b
     3a4:	000c0002 	.word	0x000c0002
     3a8:	000d0002 	.word	0x000d0002
     3ac:	000f0002 	.word	0x000f0002
     3b0:	00b71b00 	.word	0x00b71b00
     3b4:	42001000 	.word	0x42001000
     3b8:	2000042c 	.word	0x2000042c
     3bc:	000039e1 	.word	0x000039e1
     3c0:	00003951 	.word	0x00003951
     3c4:	e000e100 	.word	0xe000e100
     3c8:	000001ad 	.word	0x000001ad
     3cc:	00000195 	.word	0x00000195

000003d0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d2:	46de      	mov	lr, fp
     3d4:	4657      	mov	r7, sl
     3d6:	464e      	mov	r6, r9
     3d8:	4645      	mov	r5, r8
     3da:	b5e0      	push	{r5, r6, r7, lr}
     3dc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3de:	2803      	cmp	r0, #3
     3e0:	d000      	beq.n	3e4 <nm_bus_ioctl+0x14>
     3e2:	e075      	b.n	4d0 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3e4:	680e      	ldr	r6, [r1, #0]
     3e6:	684d      	ldr	r5, [r1, #4]
     3e8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     3ea:	2200      	movs	r2, #0
     3ec:	466b      	mov	r3, sp
     3ee:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3f0:	2d00      	cmp	r5, #0
     3f2:	d027      	beq.n	444 <nm_bus_ioctl+0x74>
     3f4:	2c00      	cmp	r4, #0
     3f6:	d065      	beq.n	4c4 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     3f8:	2e00      	cmp	r6, #0
     3fa:	d100      	bne.n	3fe <nm_bus_ioctl+0x2e>
     3fc:	e077      	b.n	4ee <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3fe:	2300      	movs	r3, #0
     400:	4698      	mov	r8, r3
     402:	2300      	movs	r3, #0
     404:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     406:	2201      	movs	r2, #1
     408:	493b      	ldr	r1, [pc, #236]	; (4f8 <nm_bus_ioctl+0x128>)
     40a:	483c      	ldr	r0, [pc, #240]	; (4fc <nm_bus_ioctl+0x12c>)
     40c:	4b3c      	ldr	r3, [pc, #240]	; (500 <nm_bus_ioctl+0x130>)
     40e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     410:	4b3a      	ldr	r3, [pc, #232]	; (4fc <nm_bus_ioctl+0x12c>)
     412:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     414:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     416:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     418:	4699      	mov	r9, r3
			pu8Miso++;
     41a:	4659      	mov	r1, fp
     41c:	424b      	negs	r3, r1
     41e:	4159      	adcs	r1, r3
     420:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     422:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     424:	4653      	mov	r3, sl
     426:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     428:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     42a:	4239      	tst	r1, r7
     42c:	d0fc      	beq.n	428 <nm_bus_ioctl+0x58>
     42e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     430:	4239      	tst	r1, r7
     432:	d0fc      	beq.n	42e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     434:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     436:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     438:	4211      	tst	r1, r2
     43a:	d0fc      	beq.n	436 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     43c:	4649      	mov	r1, r9
     43e:	7989      	ldrb	r1, [r1, #6]
     440:	468c      	mov	ip, r1
     442:	e011      	b.n	468 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     444:	2e00      	cmp	r6, #0
     446:	d03a      	beq.n	4be <nm_bus_ioctl+0xee>
     448:	2c00      	cmp	r4, #0
     44a:	d03e      	beq.n	4ca <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     44c:	2300      	movs	r3, #0
     44e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     450:	3301      	adds	r3, #1
     452:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     454:	466b      	mov	r3, sp
     456:	1ddd      	adds	r5, r3, #7
     458:	e7d5      	b.n	406 <nm_bus_ioctl+0x36>
     45a:	4660      	mov	r0, ip
     45c:	2801      	cmp	r0, #1
     45e:	d00d      	beq.n	47c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     460:	6a98      	ldr	r0, [r3, #40]	; 0x28
     462:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     464:	2900      	cmp	r1, #0
     466:	d00d      	beq.n	484 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     468:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     46a:	4211      	tst	r1, r2
     46c:	d0fc      	beq.n	468 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     46e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     470:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     472:	4210      	tst	r0, r2
     474:	d0f1      	beq.n	45a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     476:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     478:	311e      	adds	r1, #30
     47a:	e7ee      	b.n	45a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     47c:	6a98      	ldr	r0, [r3, #40]	; 0x28
     47e:	05c0      	lsls	r0, r0, #23
     480:	0dc0      	lsrs	r0, r0, #23
     482:	e7ef      	b.n	464 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     484:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     486:	3c01      	subs	r4, #1
     488:	b2a4      	uxth	r4, r4
			pu8Miso++;
     48a:	445d      	add	r5, fp
			pu8Mosi++;
     48c:	4643      	mov	r3, r8
     48e:	4259      	negs	r1, r3
     490:	414b      	adcs	r3, r1
     492:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     494:	2c00      	cmp	r4, #0
     496:	d1c4      	bne.n	422 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     498:	4b18      	ldr	r3, [pc, #96]	; (4fc <nm_bus_ioctl+0x12c>)
     49a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     49c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     49e:	7e0b      	ldrb	r3, [r1, #24]
     4a0:	4213      	tst	r3, r2
     4a2:	d0fc      	beq.n	49e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     4a4:	2200      	movs	r2, #0
     4a6:	4914      	ldr	r1, [pc, #80]	; (4f8 <nm_bus_ioctl+0x128>)
     4a8:	4814      	ldr	r0, [pc, #80]	; (4fc <nm_bus_ioctl+0x12c>)
     4aa:	4b15      	ldr	r3, [pc, #84]	; (500 <nm_bus_ioctl+0x130>)
     4ac:	4798      	blx	r3
	return M2M_SUCCESS;
     4ae:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     4b0:	b003      	add	sp, #12
     4b2:	bc3c      	pop	{r2, r3, r4, r5}
     4b4:	4690      	mov	r8, r2
     4b6:	4699      	mov	r9, r3
     4b8:	46a2      	mov	sl, r4
     4ba:	46ab      	mov	fp, r5
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     4be:	200f      	movs	r0, #15
     4c0:	4240      	negs	r0, r0
     4c2:	e7f5      	b.n	4b0 <nm_bus_ioctl+0xe0>
     4c4:	200f      	movs	r0, #15
     4c6:	4240      	negs	r0, r0
     4c8:	e7f2      	b.n	4b0 <nm_bus_ioctl+0xe0>
     4ca:	200f      	movs	r0, #15
     4cc:	4240      	negs	r0, r0
		break;
     4ce:	e7ef      	b.n	4b0 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     4d0:	220e      	movs	r2, #14
     4d2:	32ff      	adds	r2, #255	; 0xff
     4d4:	490b      	ldr	r1, [pc, #44]	; (504 <nm_bus_ioctl+0x134>)
     4d6:	480c      	ldr	r0, [pc, #48]	; (508 <nm_bus_ioctl+0x138>)
     4d8:	4b0c      	ldr	r3, [pc, #48]	; (50c <nm_bus_ioctl+0x13c>)
     4da:	4798      	blx	r3
     4dc:	480c      	ldr	r0, [pc, #48]	; (510 <nm_bus_ioctl+0x140>)
     4de:	4b0d      	ldr	r3, [pc, #52]	; (514 <nm_bus_ioctl+0x144>)
     4e0:	4798      	blx	r3
     4e2:	200d      	movs	r0, #13
     4e4:	4b0c      	ldr	r3, [pc, #48]	; (518 <nm_bus_ioctl+0x148>)
     4e6:	4798      	blx	r3
			s8Ret = -1;
     4e8:	2001      	movs	r0, #1
     4ea:	4240      	negs	r0, r0
	return s8Ret;
     4ec:	e7e0      	b.n	4b0 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     4ee:	2301      	movs	r3, #1
     4f0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     4f2:	466b      	mov	r3, sp
     4f4:	1dde      	adds	r6, r3, #7
     4f6:	e784      	b.n	402 <nm_bus_ioctl+0x32>
     4f8:	20000428 	.word	0x20000428
     4fc:	2000042c 	.word	0x2000042c
     500:	00003bb9 	.word	0x00003bb9
     504:	00008f14 	.word	0x00008f14
     508:	00008f24 	.word	0x00008f24
     50c:	00006efd 	.word	0x00006efd
     510:	00008f38 	.word	0x00008f38
     514:	00007019 	.word	0x00007019
     518:	00006f31 	.word	0x00006f31

0000051c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     51c:	b530      	push	{r4, r5, lr}
     51e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     520:	ab01      	add	r3, sp, #4
     522:	2200      	movs	r2, #0
     524:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     526:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     528:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     52a:	4d13      	ldr	r5, [pc, #76]	; (578 <nm_bus_deinit+0x5c>)
     52c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     52e:	0020      	movs	r0, r4
     530:	4b12      	ldr	r3, [pc, #72]	; (57c <nm_bus_deinit+0x60>)
     532:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     534:	231f      	movs	r3, #31
     536:	4018      	ands	r0, r3
     538:	3b1e      	subs	r3, #30
     53a:	4083      	lsls	r3, r0
     53c:	2280      	movs	r2, #128	; 0x80
     53e:	4910      	ldr	r1, [pc, #64]	; (580 <nm_bus_deinit+0x64>)
     540:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     542:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     544:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     546:	2b00      	cmp	r3, #0
     548:	d1fc      	bne.n	544 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     54a:	338f      	adds	r3, #143	; 0x8f
     54c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     54e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     550:	6823      	ldr	r3, [r4, #0]
     552:	2202      	movs	r2, #2
     554:	4393      	bics	r3, r2
     556:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     558:	a901      	add	r1, sp, #4
     55a:	200c      	movs	r0, #12
     55c:	4c09      	ldr	r4, [pc, #36]	; (584 <nm_bus_deinit+0x68>)
     55e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     560:	a901      	add	r1, sp, #4
     562:	200f      	movs	r0, #15
     564:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     566:	a901      	add	r1, sp, #4
     568:	200d      	movs	r0, #13
     56a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     56c:	a901      	add	r1, sp, #4
     56e:	200e      	movs	r0, #14
     570:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     572:	2000      	movs	r0, #0
     574:	b003      	add	sp, #12
     576:	bd30      	pop	{r4, r5, pc}
     578:	2000042c 	.word	0x2000042c
     57c:	00003951 	.word	0x00003951
     580:	e000e100 	.word	0xe000e100
     584:	00003579 	.word	0x00003579

00000588 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     588:	2a00      	cmp	r2, #0
     58a:	d006      	beq.n	59a <m2m_memcpy+0x12>
     58c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     58e:	780b      	ldrb	r3, [r1, #0]
     590:	7003      	strb	r3, [r0, #0]
		pDst++;
     592:	3001      	adds	r0, #1
		pSrc++;
     594:	3101      	adds	r1, #1
	}while(--sz);
     596:	4290      	cmp	r0, r2
     598:	d1f9      	bne.n	58e <m2m_memcpy+0x6>
}
     59a:	4770      	bx	lr

0000059c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     59c:	2a00      	cmp	r2, #0
     59e:	d004      	beq.n	5aa <m2m_memset+0xe>
     5a0:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     5a2:	7001      	strb	r1, [r0, #0]
		pBuf++;
     5a4:	3001      	adds	r0, #1
	}while(--sz);
     5a6:	4290      	cmp	r0, r2
     5a8:	d1fb      	bne.n	5a2 <m2m_memset+0x6>
}
     5aa:	4770      	bx	lr

000005ac <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     5ac:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     5ae:	7802      	ldrb	r2, [r0, #0]
     5b0:	2a00      	cmp	r2, #0
     5b2:	d007      	beq.n	5c4 <m2m_strlen+0x18>
     5b4:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     5b6:	3001      	adds	r0, #1
     5b8:	b280      	uxth	r0, r0
		pcStr++;
     5ba:	3301      	adds	r3, #1
	while(*pcStr)
     5bc:	781a      	ldrb	r2, [r3, #0]
     5be:	2a00      	cmp	r2, #0
     5c0:	d1f9      	bne.n	5b6 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     5c2:	4770      	bx	lr
	uint16	u16StrLen = 0;
     5c4:	2000      	movs	r0, #0
     5c6:	e7fc      	b.n	5c2 <m2m_strlen+0x16>

000005c8 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     5c8:	4a02      	ldr	r2, [pc, #8]	; (5d4 <isr+0xc>)
     5ca:	78d3      	ldrb	r3, [r2, #3]
     5cc:	3301      	adds	r3, #1
     5ce:	b2db      	uxtb	r3, r3
     5d0:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     5d2:	4770      	bx	lr
     5d4:	20000468 	.word	0x20000468

000005d8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     5d8:	4770      	bx	lr
	...

000005dc <hif_set_rx_done>:
{
     5dc:	b500      	push	{lr}
     5de:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     5e0:	2200      	movs	r2, #0
     5e2:	4b0a      	ldr	r3, [pc, #40]	; (60c <hif_set_rx_done+0x30>)
     5e4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     5e6:	2001      	movs	r0, #1
     5e8:	4b09      	ldr	r3, [pc, #36]	; (610 <hif_set_rx_done+0x34>)
     5ea:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     5ec:	a901      	add	r1, sp, #4
     5ee:	4809      	ldr	r0, [pc, #36]	; (614 <hif_set_rx_done+0x38>)
     5f0:	4b09      	ldr	r3, [pc, #36]	; (618 <hif_set_rx_done+0x3c>)
     5f2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     5f4:	2800      	cmp	r0, #0
     5f6:	d001      	beq.n	5fc <hif_set_rx_done+0x20>
}
     5f8:	b003      	add	sp, #12
     5fa:	bd00      	pop	{pc}
	reg |= NBIT1;
     5fc:	2102      	movs	r1, #2
     5fe:	9b01      	ldr	r3, [sp, #4]
     600:	4319      	orrs	r1, r3
     602:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     604:	4803      	ldr	r0, [pc, #12]	; (614 <hif_set_rx_done+0x38>)
     606:	4b05      	ldr	r3, [pc, #20]	; (61c <hif_set_rx_done+0x40>)
     608:	4798      	blx	r3
     60a:	e7f5      	b.n	5f8 <hif_set_rx_done+0x1c>
     60c:	20000468 	.word	0x20000468
     610:	000002a9 	.word	0x000002a9
     614:	00001070 	.word	0x00001070
     618:	000019e5 	.word	0x000019e5
     61c:	000019f1 	.word	0x000019f1

00000620 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     620:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
     622:	4b0c      	ldr	r3, [pc, #48]	; (654 <hif_chip_wake+0x34>)
     624:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     626:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     628:	2b00      	cmp	r3, #0
     62a:	d10d      	bne.n	648 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     62c:	4b09      	ldr	r3, [pc, #36]	; (654 <hif_chip_wake+0x34>)
     62e:	785b      	ldrb	r3, [r3, #1]
     630:	2b00      	cmp	r3, #0
     632:	d103      	bne.n	63c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     634:	4b07      	ldr	r3, [pc, #28]	; (654 <hif_chip_wake+0x34>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	2b00      	cmp	r3, #0
     63a:	d106      	bne.n	64a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     63c:	4a05      	ldr	r2, [pc, #20]	; (654 <hif_chip_wake+0x34>)
     63e:	7853      	ldrb	r3, [r2, #1]
     640:	3301      	adds	r3, #1
     642:	b2db      	uxtb	r3, r3
     644:	7053      	strb	r3, [r2, #1]
     646:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     648:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     64a:	4b03      	ldr	r3, [pc, #12]	; (658 <hif_chip_wake+0x38>)
     64c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     64e:	2800      	cmp	r0, #0
     650:	d0f4      	beq.n	63c <hif_chip_wake+0x1c>
     652:	e7f9      	b.n	648 <hif_chip_wake+0x28>
     654:	20000468 	.word	0x20000468
     658:	000016cd 	.word	0x000016cd

0000065c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     65c:	4b05      	ldr	r3, [pc, #20]	; (674 <hif_chip_sleep_sc+0x18>)
     65e:	785b      	ldrb	r3, [r3, #1]
     660:	2b00      	cmp	r3, #0
     662:	d004      	beq.n	66e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     664:	4a03      	ldr	r2, [pc, #12]	; (674 <hif_chip_sleep_sc+0x18>)
     666:	7853      	ldrb	r3, [r2, #1]
     668:	3b01      	subs	r3, #1
     66a:	b2db      	uxtb	r3, r3
     66c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     66e:	2000      	movs	r0, #0
     670:	4770      	bx	lr
     672:	46c0      	nop			; (mov r8, r8)
     674:	20000468 	.word	0x20000468

00000678 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     678:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     67a:	4b0b      	ldr	r3, [pc, #44]	; (6a8 <hif_chip_sleep+0x30>)
     67c:	785b      	ldrb	r3, [r3, #1]
     67e:	2b00      	cmp	r3, #0
     680:	d004      	beq.n	68c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     682:	4a09      	ldr	r2, [pc, #36]	; (6a8 <hif_chip_sleep+0x30>)
     684:	7853      	ldrb	r3, [r2, #1]
     686:	3b01      	subs	r3, #1
     688:	b2db      	uxtb	r3, r3
     68a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <hif_chip_sleep+0x30>)
     68e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     690:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     692:	2b00      	cmp	r3, #0
     694:	d103      	bne.n	69e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     696:	4b04      	ldr	r3, [pc, #16]	; (6a8 <hif_chip_sleep+0x30>)
     698:	781b      	ldrb	r3, [r3, #0]
     69a:	2b00      	cmp	r3, #0
     69c:	d100      	bne.n	6a0 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
     69e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     6a0:	4b02      	ldr	r3, [pc, #8]	; (6ac <hif_chip_sleep+0x34>)
     6a2:	4798      	blx	r3
     6a4:	e7fb      	b.n	69e <hif_chip_sleep+0x26>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	20000468 	.word	0x20000468
     6ac:	00001665 	.word	0x00001665

000006b0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b2:	46de      	mov	lr, fp
     6b4:	4657      	mov	r7, sl
     6b6:	b580      	push	{r7, lr}
     6b8:	b089      	sub	sp, #36	; 0x24
     6ba:	4683      	mov	fp, r0
     6bc:	468a      	mov	sl, r1
     6be:	9201      	str	r2, [sp, #4]
     6c0:	9300      	str	r3, [sp, #0]
     6c2:	ab10      	add	r3, sp, #64	; 0x40
     6c4:	cb80      	ldmia	r3!, {r7}
     6c6:	881e      	ldrh	r6, [r3, #0]
     6c8:	ab12      	add	r3, sp, #72	; 0x48
     6ca:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6cc:	227f      	movs	r2, #127	; 0x7f
     6ce:	400a      	ands	r2, r1
     6d0:	ab07      	add	r3, sp, #28
     6d2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     6d4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6d6:	2208      	movs	r2, #8
     6d8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     6da:	2f00      	cmp	r7, #0
     6dc:	d03d      	beq.n	75a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6de:	885a      	ldrh	r2, [r3, #2]
     6e0:	1992      	adds	r2, r2, r6
     6e2:	18aa      	adds	r2, r5, r2
     6e4:	b292      	uxth	r2, r2
     6e6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
     6e8:	4b69      	ldr	r3, [pc, #420]	; (890 <hif_send+0x1e0>)
     6ea:	4798      	blx	r3
     6ec:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6ee:	d000      	beq.n	6f2 <hif_send+0x42>
     6f0:	e0c1      	b.n	876 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     6f2:	2300      	movs	r3, #0
     6f4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     6f6:	aa02      	add	r2, sp, #8
     6f8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     6fa:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     6fc:	9b04      	ldr	r3, [sp, #16]
     6fe:	465a      	mov	r2, fp
     700:	431a      	orrs	r2, r3
     702:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     704:	9a04      	ldr	r2, [sp, #16]
     706:	4653      	mov	r3, sl
     708:	021b      	lsls	r3, r3, #8
     70a:	4313      	orrs	r3, r2
     70c:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     70e:	ab07      	add	r3, sp, #28
     710:	885b      	ldrh	r3, [r3, #2]
     712:	9a04      	ldr	r2, [sp, #16]
     714:	041b      	lsls	r3, r3, #16
     716:	4313      	orrs	r3, r2
     718:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     71a:	9904      	ldr	r1, [sp, #16]
     71c:	485d      	ldr	r0, [pc, #372]	; (894 <hif_send+0x1e4>)
     71e:	4b5e      	ldr	r3, [pc, #376]	; (898 <hif_send+0x1e8>)
     720:	4798      	blx	r3
     722:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     724:	d157      	bne.n	7d6 <hif_send+0x126>

		reg = 0UL;
     726:	2300      	movs	r3, #0
     728:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     72a:	9b04      	ldr	r3, [sp, #16]
     72c:	2202      	movs	r2, #2
     72e:	4313      	orrs	r3, r2
     730:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     732:	9904      	ldr	r1, [sp, #16]
     734:	4859      	ldr	r0, [pc, #356]	; (89c <hif_send+0x1ec>)
     736:	4b58      	ldr	r3, [pc, #352]	; (898 <hif_send+0x1e8>)
     738:	4798      	blx	r3
     73a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     73c:	d14b      	bne.n	7d6 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     73e:	2200      	movs	r2, #0
     740:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     742:	ab02      	add	r3, sp, #8
     744:	80da      	strh	r2, [r3, #6]
     746:	3306      	adds	r3, #6
     748:	881b      	ldrh	r3, [r3, #0]
     74a:	b29b      	uxth	r3, r3
     74c:	4a54      	ldr	r2, [pc, #336]	; (8a0 <hif_send+0x1f0>)
     74e:	4293      	cmp	r3, r2
     750:	d849      	bhi.n	7e6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     752:	4c54      	ldr	r4, [pc, #336]	; (8a4 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     754:	4b54      	ldr	r3, [pc, #336]	; (8a8 <hif_send+0x1f8>)
     756:	469a      	mov	sl, r3
     758:	e017      	b.n	78a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     75a:	ab07      	add	r3, sp, #28
     75c:	885a      	ldrh	r2, [r3, #2]
     75e:	9900      	ldr	r1, [sp, #0]
     760:	468c      	mov	ip, r1
     762:	4462      	add	r2, ip
     764:	b292      	uxth	r2, r2
     766:	805a      	strh	r2, [r3, #2]
     768:	e7be      	b.n	6e8 <hif_send+0x38>
				nm_bsp_sleep(1);
     76a:	2001      	movs	r0, #1
     76c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
     76e:	9b04      	ldr	r3, [sp, #16]
     770:	079b      	lsls	r3, r3, #30
     772:	d528      	bpl.n	7c6 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     774:	ab02      	add	r3, sp, #8
     776:	88da      	ldrh	r2, [r3, #6]
     778:	3201      	adds	r2, #1
     77a:	b292      	uxth	r2, r2
     77c:	80da      	strh	r2, [r3, #6]
     77e:	3306      	adds	r3, #6
     780:	881b      	ldrh	r3, [r3, #0]
     782:	b29b      	uxth	r3, r3
     784:	4a46      	ldr	r2, [pc, #280]	; (8a0 <hif_send+0x1f0>)
     786:	4293      	cmp	r3, r2
     788:	d82d      	bhi.n	7e6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     78a:	a904      	add	r1, sp, #16
     78c:	4843      	ldr	r0, [pc, #268]	; (89c <hif_send+0x1ec>)
     78e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     790:	2800      	cmp	r0, #0
     792:	d128      	bne.n	7e6 <hif_send+0x136>
			if(cnt >= 500) {
     794:	ab02      	add	r3, sp, #8
     796:	3306      	adds	r3, #6
     798:	881b      	ldrh	r3, [r3, #0]
     79a:	b29b      	uxth	r3, r3
     79c:	22f4      	movs	r2, #244	; 0xf4
     79e:	32ff      	adds	r2, #255	; 0xff
     7a0:	4293      	cmp	r3, r2
     7a2:	d9e4      	bls.n	76e <hif_send+0xbe>
				if(cnt < 501) {
     7a4:	ab02      	add	r3, sp, #8
     7a6:	3306      	adds	r3, #6
     7a8:	881b      	ldrh	r3, [r3, #0]
     7aa:	b29b      	uxth	r3, r3
     7ac:	3201      	adds	r2, #1
     7ae:	4293      	cmp	r3, r2
     7b0:	d8db      	bhi.n	76a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     7b2:	483e      	ldr	r0, [pc, #248]	; (8ac <hif_send+0x1fc>)
     7b4:	4b3e      	ldr	r3, [pc, #248]	; (8b0 <hif_send+0x200>)
     7b6:	4798      	blx	r3
     7b8:	483e      	ldr	r0, [pc, #248]	; (8b4 <hif_send+0x204>)
     7ba:	4b3f      	ldr	r3, [pc, #252]	; (8b8 <hif_send+0x208>)
     7bc:	4798      	blx	r3
     7be:	200d      	movs	r0, #13
     7c0:	4b3e      	ldr	r3, [pc, #248]	; (8bc <hif_send+0x20c>)
     7c2:	4798      	blx	r3
     7c4:	e7d1      	b.n	76a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     7c6:	a905      	add	r1, sp, #20
     7c8:	483d      	ldr	r0, [pc, #244]	; (8c0 <hif_send+0x210>)
     7ca:	4b36      	ldr	r3, [pc, #216]	; (8a4 <hif_send+0x1f4>)
     7cc:	4798      	blx	r3
     7ce:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
     7d0:	d009      	beq.n	7e6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     7d2:	2300      	movs	r3, #0
     7d4:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     7d6:	4b3b      	ldr	r3, [pc, #236]	; (8c4 <hif_send+0x214>)
     7d8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     7da:	0020      	movs	r0, r4
     7dc:	b009      	add	sp, #36	; 0x24
     7de:	bc0c      	pop	{r2, r3}
     7e0:	4692      	mov	sl, r2
     7e2:	469b      	mov	fp, r3
     7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
     7e6:	9b05      	ldr	r3, [sp, #20]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d03f      	beq.n	86c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     7ec:	9b05      	ldr	r3, [sp, #20]
     7ee:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     7f0:	a907      	add	r1, sp, #28
     7f2:	884b      	ldrh	r3, [r1, #2]
     7f4:	b29b      	uxth	r3, r3
     7f6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     7f8:	9806      	ldr	r0, [sp, #24]
     7fa:	2208      	movs	r2, #8
     7fc:	4b32      	ldr	r3, [pc, #200]	; (8c8 <hif_send+0x218>)
     7fe:	4798      	blx	r3
     800:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     802:	d1e8      	bne.n	7d6 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     804:	9b06      	ldr	r3, [sp, #24]
     806:	3308      	adds	r3, #8
     808:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     80a:	9b01      	ldr	r3, [sp, #4]
     80c:	2b00      	cmp	r3, #0
     80e:	d00b      	beq.n	828 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     810:	9806      	ldr	r0, [sp, #24]
     812:	9a00      	ldr	r2, [sp, #0]
     814:	0019      	movs	r1, r3
     816:	4b2c      	ldr	r3, [pc, #176]	; (8c8 <hif_send+0x218>)
     818:	4798      	blx	r3
     81a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     81c:	d1db      	bne.n	7d6 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     81e:	9b06      	ldr	r3, [sp, #24]
     820:	9a00      	ldr	r2, [sp, #0]
     822:	4694      	mov	ip, r2
     824:	4463      	add	r3, ip
     826:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     828:	2f00      	cmp	r7, #0
     82a:	d00e      	beq.n	84a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     82c:	9b06      	ldr	r3, [sp, #24]
     82e:	9a00      	ldr	r2, [sp, #0]
     830:	1aad      	subs	r5, r5, r2
     832:	18ed      	adds	r5, r5, r3
     834:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     836:	9806      	ldr	r0, [sp, #24]
     838:	0032      	movs	r2, r6
     83a:	0039      	movs	r1, r7
     83c:	4b22      	ldr	r3, [pc, #136]	; (8c8 <hif_send+0x218>)
     83e:	4798      	blx	r3
     840:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     842:	d1c8      	bne.n	7d6 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     844:	9b06      	ldr	r3, [sp, #24]
     846:	18f3      	adds	r3, r6, r3
     848:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     84a:	9b05      	ldr	r3, [sp, #20]
     84c:	009b      	lsls	r3, r3, #2
     84e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     850:	9b04      	ldr	r3, [sp, #16]
     852:	2202      	movs	r2, #2
     854:	4313      	orrs	r3, r2
     856:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     858:	9904      	ldr	r1, [sp, #16]
     85a:	481c      	ldr	r0, [pc, #112]	; (8cc <hif_send+0x21c>)
     85c:	4b0e      	ldr	r3, [pc, #56]	; (898 <hif_send+0x1e8>)
     85e:	4798      	blx	r3
     860:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     862:	d1b8      	bne.n	7d6 <hif_send+0x126>
 	ret = hif_chip_sleep();
     864:	4b1a      	ldr	r3, [pc, #104]	; (8d0 <hif_send+0x220>)
     866:	4798      	blx	r3
     868:	0004      	movs	r4, r0
	return ret;
     86a:	e7b6      	b.n	7da <hif_send+0x12a>
			ret = hif_chip_sleep();
     86c:	4b18      	ldr	r3, [pc, #96]	; (8d0 <hif_send+0x220>)
     86e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     870:	2403      	movs	r4, #3
     872:	4264      	negs	r4, r4
			goto ERR2;
     874:	e7b1      	b.n	7da <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     876:	22cb      	movs	r2, #203	; 0xcb
     878:	0052      	lsls	r2, r2, #1
     87a:	4916      	ldr	r1, [pc, #88]	; (8d4 <hif_send+0x224>)
     87c:	4816      	ldr	r0, [pc, #88]	; (8d8 <hif_send+0x228>)
     87e:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <hif_send+0x200>)
     880:	4798      	blx	r3
     882:	4816      	ldr	r0, [pc, #88]	; (8dc <hif_send+0x22c>)
     884:	4b0c      	ldr	r3, [pc, #48]	; (8b8 <hif_send+0x208>)
     886:	4798      	blx	r3
     888:	200d      	movs	r0, #13
     88a:	4b0c      	ldr	r3, [pc, #48]	; (8bc <hif_send+0x20c>)
     88c:	4798      	blx	r3
		goto ERR2;
     88e:	e7a4      	b.n	7da <hif_send+0x12a>
     890:	00000621 	.word	0x00000621
     894:	0000108c 	.word	0x0000108c
     898:	000019f1 	.word	0x000019f1
     89c:	00001078 	.word	0x00001078
     8a0:	000003e7 	.word	0x000003e7
     8a4:	000019e5 	.word	0x000019e5
     8a8:	00000195 	.word	0x00000195
     8ac:	00009254 	.word	0x00009254
     8b0:	00006efd 	.word	0x00006efd
     8b4:	00009260 	.word	0x00009260
     8b8:	00007019 	.word	0x00007019
     8bc:	00006f31 	.word	0x00006f31
     8c0:	00150400 	.word	0x00150400
     8c4:	0000065d 	.word	0x0000065d
     8c8:	00001a65 	.word	0x00001a65
     8cc:	0000106c 	.word	0x0000106c
     8d0:	00000679 	.word	0x00000679
     8d4:	00008f6c 	.word	0x00008f6c
     8d8:	00008f24 	.word	0x00008f24
     8dc:	00009270 	.word	0x00009270

000008e0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e2:	46ce      	mov	lr, r9
     8e4:	4647      	mov	r7, r8
     8e6:	b580      	push	{r7, lr}
     8e8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
     8ea:	4bcf      	ldr	r3, [pc, #828]	; (c28 <hif_handle_isr+0x348>)
     8ec:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     8ee:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
     8f0:	e080      	b.n	9f4 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
     8f2:	4bcd      	ldr	r3, [pc, #820]	; (c28 <hif_handle_isr+0x348>)
     8f4:	9a05      	ldr	r2, [sp, #20]
     8f6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     8f8:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     8fa:	af04      	add	r7, sp, #16
     8fc:	2204      	movs	r2, #4
     8fe:	0039      	movs	r1, r7
     900:	9805      	ldr	r0, [sp, #20]
     902:	4bca      	ldr	r3, [pc, #808]	; (c2c <hif_handle_isr+0x34c>)
     904:	4798      	blx	r3
     906:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     908:	887b      	ldrh	r3, [r7, #2]
     90a:	b29b      	uxth	r3, r3
     90c:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     90e:	2800      	cmp	r0, #0
     910:	d133      	bne.n	97a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
     912:	ab04      	add	r3, sp, #16
     914:	885b      	ldrh	r3, [r3, #2]
     916:	b29b      	uxth	r3, r3
     918:	429d      	cmp	r5, r3
     91a:	d004      	beq.n	926 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     91c:	ab04      	add	r3, sp, #16
     91e:	885b      	ldrh	r3, [r3, #2]
     920:	1aeb      	subs	r3, r5, r3
     922:	2b04      	cmp	r3, #4
     924:	dc39      	bgt.n	99a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     926:	ab04      	add	r3, sp, #16
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	2b01      	cmp	r3, #1
     92c:	d04e      	beq.n	9cc <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     92e:	ab04      	add	r3, sp, #16
     930:	781b      	ldrb	r3, [r3, #0]
     932:	2b02      	cmp	r3, #2
     934:	d078      	beq.n	a28 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     936:	ab04      	add	r3, sp, #16
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	2b04      	cmp	r3, #4
     93c:	d100      	bne.n	940 <hif_handle_isr+0x60>
     93e:	e090      	b.n	a62 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     940:	ab04      	add	r3, sp, #16
     942:	781b      	ldrb	r3, [r3, #0]
     944:	2b06      	cmp	r3, #6
     946:	d100      	bne.n	94a <hif_handle_isr+0x6a>
     948:	e0a8      	b.n	a9c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     94a:	ab04      	add	r3, sp, #16
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	2b07      	cmp	r3, #7
     950:	d100      	bne.n	954 <hif_handle_isr+0x74>
     952:	e0bf      	b.n	ad4 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     954:	ab04      	add	r3, sp, #16
     956:	781b      	ldrb	r3, [r3, #0]
     958:	2b05      	cmp	r3, #5
     95a:	d100      	bne.n	95e <hif_handle_isr+0x7e>
     95c:	e0d6      	b.n	b0c <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
     95e:	4ab4      	ldr	r2, [pc, #720]	; (c30 <hif_handle_isr+0x350>)
     960:	49b4      	ldr	r1, [pc, #720]	; (c34 <hif_handle_isr+0x354>)
     962:	48b5      	ldr	r0, [pc, #724]	; (c38 <hif_handle_isr+0x358>)
     964:	4bb5      	ldr	r3, [pc, #724]	; (c3c <hif_handle_isr+0x35c>)
     966:	4798      	blx	r3
     968:	48b5      	ldr	r0, [pc, #724]	; (c40 <hif_handle_isr+0x360>)
     96a:	4bb6      	ldr	r3, [pc, #728]	; (c44 <hif_handle_isr+0x364>)
     96c:	4798      	blx	r3
     96e:	200d      	movs	r0, #13
     970:	4bb5      	ldr	r3, [pc, #724]	; (c48 <hif_handle_isr+0x368>)
     972:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     974:	2406      	movs	r4, #6
     976:	4264      	negs	r4, r4
     978:	e116      	b.n	ba8 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     97a:	22d2      	movs	r2, #210	; 0xd2
     97c:	32ff      	adds	r2, #255	; 0xff
     97e:	49ad      	ldr	r1, [pc, #692]	; (c34 <hif_handle_isr+0x354>)
     980:	48ad      	ldr	r0, [pc, #692]	; (c38 <hif_handle_isr+0x358>)
     982:	4bae      	ldr	r3, [pc, #696]	; (c3c <hif_handle_isr+0x35c>)
     984:	4798      	blx	r3
     986:	48b1      	ldr	r0, [pc, #708]	; (c4c <hif_handle_isr+0x36c>)
     988:	4bae      	ldr	r3, [pc, #696]	; (c44 <hif_handle_isr+0x364>)
     98a:	4798      	blx	r3
     98c:	200d      	movs	r0, #13
     98e:	4bae      	ldr	r3, [pc, #696]	; (c48 <hif_handle_isr+0x368>)
     990:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     992:	2001      	movs	r0, #1
     994:	4bae      	ldr	r3, [pc, #696]	; (c50 <hif_handle_isr+0x370>)
     996:	4798      	blx	r3
     998:	e106      	b.n	ba8 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     99a:	22ed      	movs	r2, #237	; 0xed
     99c:	0052      	lsls	r2, r2, #1
     99e:	49a5      	ldr	r1, [pc, #660]	; (c34 <hif_handle_isr+0x354>)
     9a0:	48a5      	ldr	r0, [pc, #660]	; (c38 <hif_handle_isr+0x358>)
     9a2:	4ca6      	ldr	r4, [pc, #664]	; (c3c <hif_handle_isr+0x35c>)
     9a4:	47a0      	blx	r4
     9a6:	a904      	add	r1, sp, #16
     9a8:	884a      	ldrh	r2, [r1, #2]
     9aa:	b292      	uxth	r2, r2
     9ac:	780b      	ldrb	r3, [r1, #0]
     9ae:	b2db      	uxtb	r3, r3
     9b0:	7849      	ldrb	r1, [r1, #1]
     9b2:	9100      	str	r1, [sp, #0]
     9b4:	0029      	movs	r1, r5
     9b6:	48a7      	ldr	r0, [pc, #668]	; (c54 <hif_handle_isr+0x374>)
     9b8:	47a0      	blx	r4
     9ba:	200d      	movs	r0, #13
     9bc:	4ba2      	ldr	r3, [pc, #648]	; (c48 <hif_handle_isr+0x368>)
     9be:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     9c0:	2001      	movs	r0, #1
     9c2:	4ba3      	ldr	r3, [pc, #652]	; (c50 <hif_handle_isr+0x370>)
     9c4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     9c6:	2406      	movs	r4, #6
     9c8:	4264      	negs	r4, r4
     9ca:	e0ed      	b.n	ba8 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     9cc:	4b96      	ldr	r3, [pc, #600]	; (c28 <hif_handle_isr+0x348>)
     9ce:	68db      	ldr	r3, [r3, #12]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d01c      	beq.n	a0e <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9d4:	4b94      	ldr	r3, [pc, #592]	; (c28 <hif_handle_isr+0x348>)
     9d6:	68db      	ldr	r3, [r3, #12]
     9d8:	aa04      	add	r2, sp, #16
     9da:	7850      	ldrb	r0, [r2, #1]
     9dc:	b2c0      	uxtb	r0, r0
     9de:	8851      	ldrh	r1, [r2, #2]
     9e0:	9a05      	ldr	r2, [sp, #20]
     9e2:	3208      	adds	r2, #8
     9e4:	3908      	subs	r1, #8
     9e6:	b289      	uxth	r1, r1
     9e8:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     9ea:	4b8f      	ldr	r3, [pc, #572]	; (c28 <hif_handle_isr+0x348>)
     9ec:	789b      	ldrb	r3, [r3, #2]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d000      	beq.n	9f4 <hif_handle_isr+0x114>
     9f2:	e09c      	b.n	b2e <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
     9f4:	4643      	mov	r3, r8
     9f6:	78db      	ldrb	r3, [r3, #3]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d100      	bne.n	9fe <hif_handle_isr+0x11e>
     9fc:	e158      	b.n	cb0 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     9fe:	464b      	mov	r3, r9
     a00:	78db      	ldrb	r3, [r3, #3]
     a02:	3b01      	subs	r3, #1
     a04:	b2db      	uxtb	r3, r3
     a06:	464a      	mov	r2, r9
     a08:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     a0a:	4e93      	ldr	r6, [pc, #588]	; (c58 <hif_handle_isr+0x378>)
     a0c:	e0d7      	b.n	bbe <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     a0e:	22f3      	movs	r2, #243	; 0xf3
     a10:	0052      	lsls	r2, r2, #1
     a12:	4988      	ldr	r1, [pc, #544]	; (c34 <hif_handle_isr+0x354>)
     a14:	4888      	ldr	r0, [pc, #544]	; (c38 <hif_handle_isr+0x358>)
     a16:	4b89      	ldr	r3, [pc, #548]	; (c3c <hif_handle_isr+0x35c>)
     a18:	4798      	blx	r3
     a1a:	4890      	ldr	r0, [pc, #576]	; (c5c <hif_handle_isr+0x37c>)
     a1c:	4b89      	ldr	r3, [pc, #548]	; (c44 <hif_handle_isr+0x364>)
     a1e:	4798      	blx	r3
     a20:	200d      	movs	r0, #13
     a22:	4b89      	ldr	r3, [pc, #548]	; (c48 <hif_handle_isr+0x368>)
     a24:	4798      	blx	r3
     a26:	e7e0      	b.n	9ea <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
     a28:	4b7f      	ldr	r3, [pc, #508]	; (c28 <hif_handle_isr+0x348>)
     a2a:	691b      	ldr	r3, [r3, #16]
     a2c:	2b00      	cmp	r3, #0
     a2e:	d00b      	beq.n	a48 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a30:	4b7d      	ldr	r3, [pc, #500]	; (c28 <hif_handle_isr+0x348>)
     a32:	691b      	ldr	r3, [r3, #16]
     a34:	aa04      	add	r2, sp, #16
     a36:	7850      	ldrb	r0, [r2, #1]
     a38:	b2c0      	uxtb	r0, r0
     a3a:	8851      	ldrh	r1, [r2, #2]
     a3c:	9a05      	ldr	r2, [sp, #20]
     a3e:	3208      	adds	r2, #8
     a40:	3908      	subs	r1, #8
     a42:	b289      	uxth	r1, r1
     a44:	4798      	blx	r3
     a46:	e7d0      	b.n	9ea <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
     a48:	22f7      	movs	r2, #247	; 0xf7
     a4a:	0052      	lsls	r2, r2, #1
     a4c:	4979      	ldr	r1, [pc, #484]	; (c34 <hif_handle_isr+0x354>)
     a4e:	487a      	ldr	r0, [pc, #488]	; (c38 <hif_handle_isr+0x358>)
     a50:	4b7a      	ldr	r3, [pc, #488]	; (c3c <hif_handle_isr+0x35c>)
     a52:	4798      	blx	r3
     a54:	4882      	ldr	r0, [pc, #520]	; (c60 <hif_handle_isr+0x380>)
     a56:	4b7b      	ldr	r3, [pc, #492]	; (c44 <hif_handle_isr+0x364>)
     a58:	4798      	blx	r3
     a5a:	200d      	movs	r0, #13
     a5c:	4b7a      	ldr	r3, [pc, #488]	; (c48 <hif_handle_isr+0x368>)
     a5e:	4798      	blx	r3
     a60:	e7c3      	b.n	9ea <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
     a62:	4b71      	ldr	r3, [pc, #452]	; (c28 <hif_handle_isr+0x348>)
     a64:	695b      	ldr	r3, [r3, #20]
     a66:	2b00      	cmp	r3, #0
     a68:	d00b      	beq.n	a82 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a6a:	4b6f      	ldr	r3, [pc, #444]	; (c28 <hif_handle_isr+0x348>)
     a6c:	695b      	ldr	r3, [r3, #20]
     a6e:	aa04      	add	r2, sp, #16
     a70:	7850      	ldrb	r0, [r2, #1]
     a72:	b2c0      	uxtb	r0, r0
     a74:	8851      	ldrh	r1, [r2, #2]
     a76:	9a05      	ldr	r2, [sp, #20]
     a78:	3208      	adds	r2, #8
     a7a:	3908      	subs	r1, #8
     a7c:	b289      	uxth	r1, r1
     a7e:	4798      	blx	r3
     a80:	e7b3      	b.n	9ea <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
     a82:	22fb      	movs	r2, #251	; 0xfb
     a84:	0052      	lsls	r2, r2, #1
     a86:	496b      	ldr	r1, [pc, #428]	; (c34 <hif_handle_isr+0x354>)
     a88:	486b      	ldr	r0, [pc, #428]	; (c38 <hif_handle_isr+0x358>)
     a8a:	4b6c      	ldr	r3, [pc, #432]	; (c3c <hif_handle_isr+0x35c>)
     a8c:	4798      	blx	r3
     a8e:	4875      	ldr	r0, [pc, #468]	; (c64 <hif_handle_isr+0x384>)
     a90:	4b6c      	ldr	r3, [pc, #432]	; (c44 <hif_handle_isr+0x364>)
     a92:	4798      	blx	r3
     a94:	200d      	movs	r0, #13
     a96:	4b6c      	ldr	r3, [pc, #432]	; (c48 <hif_handle_isr+0x368>)
     a98:	4798      	blx	r3
     a9a:	e7a6      	b.n	9ea <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
     a9c:	4b62      	ldr	r3, [pc, #392]	; (c28 <hif_handle_isr+0x348>)
     a9e:	6a1b      	ldr	r3, [r3, #32]
     aa0:	2b00      	cmp	r3, #0
     aa2:	d00b      	beq.n	abc <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aa4:	4b60      	ldr	r3, [pc, #384]	; (c28 <hif_handle_isr+0x348>)
     aa6:	6a1b      	ldr	r3, [r3, #32]
     aa8:	aa04      	add	r2, sp, #16
     aaa:	7850      	ldrb	r0, [r2, #1]
     aac:	b2c0      	uxtb	r0, r0
     aae:	8851      	ldrh	r1, [r2, #2]
     ab0:	9a05      	ldr	r2, [sp, #20]
     ab2:	3208      	adds	r2, #8
     ab4:	3908      	subs	r1, #8
     ab6:	b289      	uxth	r1, r1
     ab8:	4798      	blx	r3
     aba:	e796      	b.n	9ea <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
     abc:	4a6a      	ldr	r2, [pc, #424]	; (c68 <hif_handle_isr+0x388>)
     abe:	495d      	ldr	r1, [pc, #372]	; (c34 <hif_handle_isr+0x354>)
     ac0:	485d      	ldr	r0, [pc, #372]	; (c38 <hif_handle_isr+0x358>)
     ac2:	4b5e      	ldr	r3, [pc, #376]	; (c3c <hif_handle_isr+0x35c>)
     ac4:	4798      	blx	r3
     ac6:	4869      	ldr	r0, [pc, #420]	; (c6c <hif_handle_isr+0x38c>)
     ac8:	4b5e      	ldr	r3, [pc, #376]	; (c44 <hif_handle_isr+0x364>)
     aca:	4798      	blx	r3
     acc:	200d      	movs	r0, #13
     ace:	4b5e      	ldr	r3, [pc, #376]	; (c48 <hif_handle_isr+0x368>)
     ad0:	4798      	blx	r3
     ad2:	e78a      	b.n	9ea <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
     ad4:	4b54      	ldr	r3, [pc, #336]	; (c28 <hif_handle_isr+0x348>)
     ad6:	699b      	ldr	r3, [r3, #24]
     ad8:	2b00      	cmp	r3, #0
     ada:	d00b      	beq.n	af4 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     adc:	4b52      	ldr	r3, [pc, #328]	; (c28 <hif_handle_isr+0x348>)
     ade:	699b      	ldr	r3, [r3, #24]
     ae0:	aa04      	add	r2, sp, #16
     ae2:	7850      	ldrb	r0, [r2, #1]
     ae4:	b2c0      	uxtb	r0, r0
     ae6:	8851      	ldrh	r1, [r2, #2]
     ae8:	9a05      	ldr	r2, [sp, #20]
     aea:	3208      	adds	r2, #8
     aec:	3908      	subs	r1, #8
     aee:	b289      	uxth	r1, r1
     af0:	4798      	blx	r3
     af2:	e77a      	b.n	9ea <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
     af4:	4a5e      	ldr	r2, [pc, #376]	; (c70 <hif_handle_isr+0x390>)
     af6:	494f      	ldr	r1, [pc, #316]	; (c34 <hif_handle_isr+0x354>)
     af8:	484f      	ldr	r0, [pc, #316]	; (c38 <hif_handle_isr+0x358>)
     afa:	4b50      	ldr	r3, [pc, #320]	; (c3c <hif_handle_isr+0x35c>)
     afc:	4798      	blx	r3
     afe:	485d      	ldr	r0, [pc, #372]	; (c74 <hif_handle_isr+0x394>)
     b00:	4b50      	ldr	r3, [pc, #320]	; (c44 <hif_handle_isr+0x364>)
     b02:	4798      	blx	r3
     b04:	200d      	movs	r0, #13
     b06:	4b50      	ldr	r3, [pc, #320]	; (c48 <hif_handle_isr+0x368>)
     b08:	4798      	blx	r3
     b0a:	e76e      	b.n	9ea <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
     b0c:	4b46      	ldr	r3, [pc, #280]	; (c28 <hif_handle_isr+0x348>)
     b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b10:	2b00      	cmp	r3, #0
     b12:	d100      	bne.n	b16 <hif_handle_isr+0x236>
     b14:	e769      	b.n	9ea <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     b16:	4b44      	ldr	r3, [pc, #272]	; (c28 <hif_handle_isr+0x348>)
     b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b1a:	aa04      	add	r2, sp, #16
     b1c:	7850      	ldrb	r0, [r2, #1]
     b1e:	b2c0      	uxtb	r0, r0
     b20:	8851      	ldrh	r1, [r2, #2]
     b22:	9a05      	ldr	r2, [sp, #20]
     b24:	3208      	adds	r2, #8
     b26:	3908      	subs	r1, #8
     b28:	b289      	uxth	r1, r1
     b2a:	4798      	blx	r3
     b2c:	e75d      	b.n	9ea <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     b2e:	4a52      	ldr	r2, [pc, #328]	; (c78 <hif_handle_isr+0x398>)
     b30:	4940      	ldr	r1, [pc, #256]	; (c34 <hif_handle_isr+0x354>)
     b32:	4841      	ldr	r0, [pc, #260]	; (c38 <hif_handle_isr+0x358>)
     b34:	4c41      	ldr	r4, [pc, #260]	; (c3c <hif_handle_isr+0x35c>)
     b36:	47a0      	blx	r4
     b38:	ab04      	add	r3, sp, #16
     b3a:	7819      	ldrb	r1, [r3, #0]
     b3c:	b2c9      	uxtb	r1, r1
     b3e:	785a      	ldrb	r2, [r3, #1]
     b40:	b2d2      	uxtb	r2, r2
     b42:	484e      	ldr	r0, [pc, #312]	; (c7c <hif_handle_isr+0x39c>)
     b44:	47a0      	blx	r4
     b46:	200d      	movs	r0, #13
     b48:	4b3f      	ldr	r3, [pc, #252]	; (c48 <hif_handle_isr+0x368>)
     b4a:	4798      	blx	r3
					ret = hif_set_rx_done();
     b4c:	4b4c      	ldr	r3, [pc, #304]	; (c80 <hif_handle_isr+0x3a0>)
     b4e:	4798      	blx	r3
     b50:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     b52:	d129      	bne.n	ba8 <hif_handle_isr+0x2c8>
     b54:	e74e      	b.n	9f4 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
     b56:	2287      	movs	r2, #135	; 0x87
     b58:	0092      	lsls	r2, r2, #2
     b5a:	4936      	ldr	r1, [pc, #216]	; (c34 <hif_handle_isr+0x354>)
     b5c:	4836      	ldr	r0, [pc, #216]	; (c38 <hif_handle_isr+0x358>)
     b5e:	4b37      	ldr	r3, [pc, #220]	; (c3c <hif_handle_isr+0x35c>)
     b60:	4798      	blx	r3
     b62:	4848      	ldr	r0, [pc, #288]	; (c84 <hif_handle_isr+0x3a4>)
     b64:	4b37      	ldr	r3, [pc, #220]	; (c44 <hif_handle_isr+0x364>)
     b66:	4798      	blx	r3
     b68:	200d      	movs	r0, #13
     b6a:	4b37      	ldr	r3, [pc, #220]	; (c48 <hif_handle_isr+0x368>)
     b6c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b6e:	2402      	movs	r4, #2
     b70:	4264      	negs	r4, r4
     b72:	e019      	b.n	ba8 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b74:	2289      	movs	r2, #137	; 0x89
     b76:	0092      	lsls	r2, r2, #2
     b78:	492e      	ldr	r1, [pc, #184]	; (c34 <hif_handle_isr+0x354>)
     b7a:	482f      	ldr	r0, [pc, #188]	; (c38 <hif_handle_isr+0x358>)
     b7c:	4c2f      	ldr	r4, [pc, #188]	; (c3c <hif_handle_isr+0x35c>)
     b7e:	47a0      	blx	r4
     b80:	9903      	ldr	r1, [sp, #12]
     b82:	4841      	ldr	r0, [pc, #260]	; (c88 <hif_handle_isr+0x3a8>)
     b84:	47a0      	blx	r4
     b86:	200d      	movs	r0, #13
     b88:	4b2f      	ldr	r3, [pc, #188]	; (c48 <hif_handle_isr+0x368>)
     b8a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b8c:	240c      	movs	r4, #12
     b8e:	4264      	negs	r4, r4
     b90:	e00a      	b.n	ba8 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b92:	4a3e      	ldr	r2, [pc, #248]	; (c8c <hif_handle_isr+0x3ac>)
     b94:	4927      	ldr	r1, [pc, #156]	; (c34 <hif_handle_isr+0x354>)
     b96:	4828      	ldr	r0, [pc, #160]	; (c38 <hif_handle_isr+0x358>)
     b98:	4b28      	ldr	r3, [pc, #160]	; (c3c <hif_handle_isr+0x35c>)
     b9a:	4798      	blx	r3
     b9c:	483c      	ldr	r0, [pc, #240]	; (c90 <hif_handle_isr+0x3b0>)
     b9e:	4b29      	ldr	r3, [pc, #164]	; (c44 <hif_handle_isr+0x364>)
     ba0:	4798      	blx	r3
     ba2:	200d      	movs	r0, #13
     ba4:	4b28      	ldr	r3, [pc, #160]	; (c48 <hif_handle_isr+0x368>)
     ba6:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     ba8:	4a3a      	ldr	r2, [pc, #232]	; (c94 <hif_handle_isr+0x3b4>)
     baa:	493b      	ldr	r1, [pc, #236]	; (c98 <hif_handle_isr+0x3b8>)
     bac:	4822      	ldr	r0, [pc, #136]	; (c38 <hif_handle_isr+0x358>)
     bae:	4f23      	ldr	r7, [pc, #140]	; (c3c <hif_handle_isr+0x35c>)
     bb0:	47b8      	blx	r7
     bb2:	0021      	movs	r1, r4
     bb4:	4839      	ldr	r0, [pc, #228]	; (c9c <hif_handle_isr+0x3bc>)
     bb6:	47b8      	blx	r7
     bb8:	200d      	movs	r0, #13
     bba:	4b23      	ldr	r3, [pc, #140]	; (c48 <hif_handle_isr+0x368>)
     bbc:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     bbe:	a903      	add	r1, sp, #12
     bc0:	4837      	ldr	r0, [pc, #220]	; (ca0 <hif_handle_isr+0x3c0>)
     bc2:	47b0      	blx	r6
     bc4:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     bc6:	d1e4      	bne.n	b92 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     bc8:	9b03      	ldr	r3, [sp, #12]
     bca:	07db      	lsls	r3, r3, #31
     bcc:	d5d2      	bpl.n	b74 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
     bce:	2000      	movs	r0, #0
     bd0:	4b1f      	ldr	r3, [pc, #124]	; (c50 <hif_handle_isr+0x370>)
     bd2:	4798      	blx	r3
			reg &= ~NBIT0;
     bd4:	2301      	movs	r3, #1
     bd6:	9903      	ldr	r1, [sp, #12]
     bd8:	4399      	bics	r1, r3
     bda:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     bdc:	4830      	ldr	r0, [pc, #192]	; (ca0 <hif_handle_isr+0x3c0>)
     bde:	4b31      	ldr	r3, [pc, #196]	; (ca4 <hif_handle_isr+0x3c4>)
     be0:	4798      	blx	r3
     be2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     be4:	d1e0      	bne.n	ba8 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     be6:	2201      	movs	r2, #1
     be8:	4b0f      	ldr	r3, [pc, #60]	; (c28 <hif_handle_isr+0x348>)
     bea:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     bec:	9b03      	ldr	r3, [sp, #12]
     bee:	049d      	lsls	r5, r3, #18
     bf0:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
     bf2:	d0b0      	beq.n	b56 <hif_handle_isr+0x276>
				uint32 address = 0;
     bf4:	2300      	movs	r3, #0
     bf6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     bf8:	a905      	add	r1, sp, #20
     bfa:	482b      	ldr	r0, [pc, #172]	; (ca8 <hif_handle_isr+0x3c8>)
     bfc:	4b16      	ldr	r3, [pc, #88]	; (c58 <hif_handle_isr+0x378>)
     bfe:	4798      	blx	r3
     c00:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     c02:	d100      	bne.n	c06 <hif_handle_isr+0x326>
     c04:	e675      	b.n	8f2 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     c06:	22c8      	movs	r2, #200	; 0xc8
     c08:	32ff      	adds	r2, #255	; 0xff
     c0a:	490a      	ldr	r1, [pc, #40]	; (c34 <hif_handle_isr+0x354>)
     c0c:	480a      	ldr	r0, [pc, #40]	; (c38 <hif_handle_isr+0x358>)
     c0e:	4b0b      	ldr	r3, [pc, #44]	; (c3c <hif_handle_isr+0x35c>)
     c10:	4798      	blx	r3
     c12:	4826      	ldr	r0, [pc, #152]	; (cac <hif_handle_isr+0x3cc>)
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <hif_handle_isr+0x364>)
     c16:	4798      	blx	r3
     c18:	200d      	movs	r0, #13
     c1a:	4b0b      	ldr	r3, [pc, #44]	; (c48 <hif_handle_isr+0x368>)
     c1c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     c1e:	2001      	movs	r0, #1
     c20:	4b0b      	ldr	r3, [pc, #44]	; (c50 <hif_handle_isr+0x370>)
     c22:	4798      	blx	r3
     c24:	e7c0      	b.n	ba8 <hif_handle_isr+0x2c8>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000468 	.word	0x20000468
     c2c:	000019fd 	.word	0x000019fd
     c30:	0000020f 	.word	0x0000020f
     c34:	00008f78 	.word	0x00008f78
     c38:	00008f24 	.word	0x00008f24
     c3c:	00006efd 	.word	0x00006efd
     c40:	000090d4 	.word	0x000090d4
     c44:	00007019 	.word	0x00007019
     c48:	00006f31 	.word	0x00006f31
     c4c:	00008fd0 	.word	0x00008fd0
     c50:	000002a9 	.word	0x000002a9
     c54:	00008fe8 	.word	0x00008fe8
     c58:	000019e5 	.word	0x000019e5
     c5c:	00009028 	.word	0x00009028
     c60:	00009048 	.word	0x00009048
     c64:	0000906c 	.word	0x0000906c
     c68:	000001ff 	.word	0x000001ff
     c6c:	0000908c 	.word	0x0000908c
     c70:	00000206 	.word	0x00000206
     c74:	000090b0 	.word	0x000090b0
     c78:	00000215 	.word	0x00000215
     c7c:	000090ec 	.word	0x000090ec
     c80:	000005dd 	.word	0x000005dd
     c84:	00009118 	.word	0x00009118
     c88:	0000912c 	.word	0x0000912c
     c8c:	0000022d 	.word	0x0000022d
     c90:	00009148 	.word	0x00009148
     c94:	0000024a 	.word	0x0000024a
     c98:	00008f80 	.word	0x00008f80
     c9c:	0000916c 	.word	0x0000916c
     ca0:	00001070 	.word	0x00001070
     ca4:	000019f1 	.word	0x000019f1
     ca8:	00001084 	.word	0x00001084
     cac:	00008fac 	.word	0x00008fac
			}
		}
	}

	return ret;
}
     cb0:	2000      	movs	r0, #0
     cb2:	b007      	add	sp, #28
     cb4:	bc0c      	pop	{r2, r3}
     cb6:	4690      	mov	r8, r2
     cb8:	4699      	mov	r9, r3
     cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cbc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	0014      	movs	r4, r2
     cc0:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     cc2:	2800      	cmp	r0, #0
     cc4:	d003      	beq.n	cce <hif_receive+0x12>
     cc6:	2900      	cmp	r1, #0
     cc8:	d001      	beq.n	cce <hif_receive+0x12>
     cca:	2a00      	cmp	r2, #0
     ccc:	d112      	bne.n	cf4 <hif_receive+0x38>
	{
		if(isDone)
     cce:	2d00      	cmp	r5, #0
     cd0:	d002      	beq.n	cd8 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     cd2:	4b27      	ldr	r3, [pc, #156]	; (d70 <hif_receive+0xb4>)
     cd4:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     cd6:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     cd8:	4a26      	ldr	r2, [pc, #152]	; (d74 <hif_receive+0xb8>)
     cda:	4927      	ldr	r1, [pc, #156]	; (d78 <hif_receive+0xbc>)
     cdc:	4827      	ldr	r0, [pc, #156]	; (d7c <hif_receive+0xc0>)
     cde:	4b28      	ldr	r3, [pc, #160]	; (d80 <hif_receive+0xc4>)
     ce0:	4798      	blx	r3
     ce2:	4828      	ldr	r0, [pc, #160]	; (d84 <hif_receive+0xc8>)
     ce4:	4b28      	ldr	r3, [pc, #160]	; (d88 <hif_receive+0xcc>)
     ce6:	4798      	blx	r3
     ce8:	200d      	movs	r0, #13
     cea:	4b28      	ldr	r3, [pc, #160]	; (d8c <hif_receive+0xd0>)
     cec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     cee:	200c      	movs	r0, #12
     cf0:	4240      	negs	r0, r0
     cf2:	e7f0      	b.n	cd6 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     cf4:	4b26      	ldr	r3, [pc, #152]	; (d90 <hif_receive+0xd4>)
     cf6:	689b      	ldr	r3, [r3, #8]
     cf8:	429a      	cmp	r2, r3
     cfa:	d81a      	bhi.n	d32 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     cfc:	4b24      	ldr	r3, [pc, #144]	; (d90 <hif_receive+0xd4>)
     cfe:	685b      	ldr	r3, [r3, #4]
     d00:	4298      	cmp	r0, r3
     d02:	d326      	bcc.n	d52 <hif_receive+0x96>
     d04:	1886      	adds	r6, r0, r2
     d06:	4a22      	ldr	r2, [pc, #136]	; (d90 <hif_receive+0xd4>)
     d08:	6853      	ldr	r3, [r2, #4]
     d0a:	6892      	ldr	r2, [r2, #8]
     d0c:	189b      	adds	r3, r3, r2
     d0e:	429e      	cmp	r6, r3
     d10:	d81f      	bhi.n	d52 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     d12:	0022      	movs	r2, r4
     d14:	4b1f      	ldr	r3, [pc, #124]	; (d94 <hif_receive+0xd8>)
     d16:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     d18:	2800      	cmp	r0, #0
     d1a:	d1dc      	bne.n	cd6 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     d1c:	4a1c      	ldr	r2, [pc, #112]	; (d90 <hif_receive+0xd4>)
     d1e:	6853      	ldr	r3, [r2, #4]
     d20:	6892      	ldr	r2, [r2, #8]
     d22:	189b      	adds	r3, r3, r2
     d24:	429e      	cmp	r6, r3
     d26:	d001      	beq.n	d2c <hif_receive+0x70>
     d28:	2d00      	cmp	r5, #0
     d2a:	d0d4      	beq.n	cd6 <hif_receive+0x1a>
		ret = hif_set_rx_done();
     d2c:	4b10      	ldr	r3, [pc, #64]	; (d70 <hif_receive+0xb4>)
     d2e:	4798      	blx	r3
     d30:	e7d1      	b.n	cd6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     d32:	4a19      	ldr	r2, [pc, #100]	; (d98 <hif_receive+0xdc>)
     d34:	4910      	ldr	r1, [pc, #64]	; (d78 <hif_receive+0xbc>)
     d36:	4811      	ldr	r0, [pc, #68]	; (d7c <hif_receive+0xc0>)
     d38:	4d11      	ldr	r5, [pc, #68]	; (d80 <hif_receive+0xc4>)
     d3a:	47a8      	blx	r5
     d3c:	4b14      	ldr	r3, [pc, #80]	; (d90 <hif_receive+0xd4>)
     d3e:	689a      	ldr	r2, [r3, #8]
     d40:	0021      	movs	r1, r4
     d42:	4816      	ldr	r0, [pc, #88]	; (d9c <hif_receive+0xe0>)
     d44:	47a8      	blx	r5
     d46:	200d      	movs	r0, #13
     d48:	4b10      	ldr	r3, [pc, #64]	; (d8c <hif_receive+0xd0>)
     d4a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d4c:	200c      	movs	r0, #12
     d4e:	4240      	negs	r0, r0
		goto ERR1;
     d50:	e7c1      	b.n	cd6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     d52:	4a13      	ldr	r2, [pc, #76]	; (da0 <hif_receive+0xe4>)
     d54:	4908      	ldr	r1, [pc, #32]	; (d78 <hif_receive+0xbc>)
     d56:	4809      	ldr	r0, [pc, #36]	; (d7c <hif_receive+0xc0>)
     d58:	4b09      	ldr	r3, [pc, #36]	; (d80 <hif_receive+0xc4>)
     d5a:	4798      	blx	r3
     d5c:	4811      	ldr	r0, [pc, #68]	; (da4 <hif_receive+0xe8>)
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <hif_receive+0xcc>)
     d60:	4798      	blx	r3
     d62:	200d      	movs	r0, #13
     d64:	4b09      	ldr	r3, [pc, #36]	; (d8c <hif_receive+0xd0>)
     d66:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d68:	200c      	movs	r0, #12
     d6a:	4240      	negs	r0, r0
		goto ERR1;
     d6c:	e7b3      	b.n	cd6 <hif_receive+0x1a>
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	000005dd 	.word	0x000005dd
     d74:	0000026b 	.word	0x0000026b
     d78:	00008f90 	.word	0x00008f90
     d7c:	00008f24 	.word	0x00008f24
     d80:	00006efd 	.word	0x00006efd
     d84:	0000919c 	.word	0x0000919c
     d88:	00007019 	.word	0x00007019
     d8c:	00006f31 	.word	0x00006f31
     d90:	20000468 	.word	0x20000468
     d94:	000019fd 	.word	0x000019fd
     d98:	00000273 	.word	0x00000273
     d9c:	000091bc 	.word	0x000091bc
     da0:	00000279 	.word	0x00000279
     da4:	00009204 	.word	0x00009204

00000da8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     dac:	2807      	cmp	r0, #7
     dae:	d81f      	bhi.n	df0 <hif_register_cb+0x48>
     db0:	0083      	lsls	r3, r0, #2
     db2:	4a16      	ldr	r2, [pc, #88]	; (e0c <hif_register_cb+0x64>)
     db4:	58d3      	ldr	r3, [r2, r3]
     db6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     db8:	4b15      	ldr	r3, [pc, #84]	; (e10 <hif_register_cb+0x68>)
     dba:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     dbc:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     dbe:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     dc0:	4b13      	ldr	r3, [pc, #76]	; (e10 <hif_register_cb+0x68>)
     dc2:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     dc4:	2000      	movs	r0, #0
			break;
     dc6:	e7fa      	b.n	dbe <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     dc8:	4b11      	ldr	r3, [pc, #68]	; (e10 <hif_register_cb+0x68>)
     dca:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     dcc:	2000      	movs	r0, #0
			break;
     dce:	e7f6      	b.n	dbe <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     dd0:	4b0f      	ldr	r3, [pc, #60]	; (e10 <hif_register_cb+0x68>)
     dd2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     dd4:	2000      	movs	r0, #0
			break;
     dd6:	e7f2      	b.n	dbe <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     dd8:	4b0d      	ldr	r3, [pc, #52]	; (e10 <hif_register_cb+0x68>)
     dda:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     ddc:	2000      	movs	r0, #0
			break;
     dde:	e7ee      	b.n	dbe <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     de0:	4b0b      	ldr	r3, [pc, #44]	; (e10 <hif_register_cb+0x68>)
     de2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     de4:	2000      	movs	r0, #0
			break;
     de6:	e7ea      	b.n	dbe <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     de8:	4b09      	ldr	r3, [pc, #36]	; (e10 <hif_register_cb+0x68>)
     dea:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     dec:	2000      	movs	r0, #0
			break;
     dee:	e7e6      	b.n	dbe <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     df0:	4a08      	ldr	r2, [pc, #32]	; (e14 <hif_register_cb+0x6c>)
     df2:	4909      	ldr	r1, [pc, #36]	; (e18 <hif_register_cb+0x70>)
     df4:	4809      	ldr	r0, [pc, #36]	; (e1c <hif_register_cb+0x74>)
     df6:	4d0a      	ldr	r5, [pc, #40]	; (e20 <hif_register_cb+0x78>)
     df8:	47a8      	blx	r5
     dfa:	0021      	movs	r1, r4
     dfc:	4809      	ldr	r0, [pc, #36]	; (e24 <hif_register_cb+0x7c>)
     dfe:	47a8      	blx	r5
     e00:	200d      	movs	r0, #13
     e02:	4b09      	ldr	r3, [pc, #36]	; (e28 <hif_register_cb+0x80>)
     e04:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     e06:	200c      	movs	r0, #12
     e08:	4240      	negs	r0, r0
			break;
     e0a:	e7d8      	b.n	dbe <hif_register_cb+0x16>
     e0c:	00008f4c 	.word	0x00008f4c
     e10:	20000468 	.word	0x20000468
     e14:	000002b1 	.word	0x000002b1
     e18:	00008f9c 	.word	0x00008f9c
     e1c:	00008f24 	.word	0x00008f24
     e20:	00006efd 	.word	0x00006efd
     e24:	00009248 	.word	0x00009248
     e28:	00006f31 	.word	0x00006f31

00000e2c <hif_init>:
{
     e2c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e2e:	2228      	movs	r2, #40	; 0x28
     e30:	2100      	movs	r1, #0
     e32:	4806      	ldr	r0, [pc, #24]	; (e4c <hif_init+0x20>)
     e34:	4b06      	ldr	r3, [pc, #24]	; (e50 <hif_init+0x24>)
     e36:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e38:	4806      	ldr	r0, [pc, #24]	; (e54 <hif_init+0x28>)
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <hif_init+0x2c>)
     e3c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e3e:	4907      	ldr	r1, [pc, #28]	; (e5c <hif_init+0x30>)
     e40:	2003      	movs	r0, #3
     e42:	4b07      	ldr	r3, [pc, #28]	; (e60 <hif_init+0x34>)
     e44:	4798      	blx	r3
}
     e46:	2000      	movs	r0, #0
     e48:	bd10      	pop	{r4, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	20000468 	.word	0x20000468
     e50:	0000059d 	.word	0x0000059d
     e54:	000005c9 	.word	0x000005c9
     e58:	00000251 	.word	0x00000251
     e5c:	000005d9 	.word	0x000005d9
     e60:	00000da9 	.word	0x00000da9

00000e64 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     e64:	b530      	push	{r4, r5, lr}
     e66:	b09f      	sub	sp, #124	; 0x7c
     e68:	0004      	movs	r4, r0
     e6a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e6c:	282c      	cmp	r0, #44	; 0x2c
     e6e:	d02f      	beq.n	ed0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e70:	281b      	cmp	r0, #27
     e72:	d03d      	beq.n	ef0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e74:	2806      	cmp	r0, #6
     e76:	d04b      	beq.n	f10 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e78:	280e      	cmp	r0, #14
     e7a:	d027      	beq.n	ecc <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e7c:	2832      	cmp	r0, #50	; 0x32
     e7e:	d057      	beq.n	f30 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e80:	282f      	cmp	r0, #47	; 0x2f
     e82:	d065      	beq.n	f50 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e84:	2834      	cmp	r0, #52	; 0x34
     e86:	d100      	bne.n	e8a <m2m_wifi_cb+0x26>
     e88:	e077      	b.n	f7a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e8a:	2811      	cmp	r0, #17
     e8c:	d100      	bne.n	e90 <m2m_wifi_cb+0x2c>
     e8e:	e096      	b.n	fbe <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e90:	2813      	cmp	r0, #19
     e92:	d100      	bne.n	e96 <m2m_wifi_cb+0x32>
     e94:	e0ac      	b.n	ff0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e96:	2804      	cmp	r0, #4
     e98:	d100      	bne.n	e9c <m2m_wifi_cb+0x38>
     e9a:	e0bb      	b.n	1014 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e9c:	2865      	cmp	r0, #101	; 0x65
     e9e:	d100      	bne.n	ea2 <m2m_wifi_cb+0x3e>
     ea0:	e0ca      	b.n	1038 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     ea2:	2809      	cmp	r0, #9
     ea4:	d100      	bne.n	ea8 <m2m_wifi_cb+0x44>
     ea6:	e0d9      	b.n	105c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     ea8:	282a      	cmp	r0, #42	; 0x2a
     eaa:	d100      	bne.n	eae <m2m_wifi_cb+0x4a>
     eac:	e0e8      	b.n	1080 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     eae:	2820      	cmp	r0, #32
     eb0:	d100      	bne.n	eb4 <m2m_wifi_cb+0x50>
     eb2:	e0f7      	b.n	10a4 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     eb4:	2295      	movs	r2, #149	; 0x95
     eb6:	0052      	lsls	r2, r2, #1
     eb8:	4989      	ldr	r1, [pc, #548]	; (10e0 <m2m_wifi_cb+0x27c>)
     eba:	488a      	ldr	r0, [pc, #552]	; (10e4 <m2m_wifi_cb+0x280>)
     ebc:	4d8a      	ldr	r5, [pc, #552]	; (10e8 <m2m_wifi_cb+0x284>)
     ebe:	47a8      	blx	r5
     ec0:	0021      	movs	r1, r4
     ec2:	488a      	ldr	r0, [pc, #552]	; (10ec <m2m_wifi_cb+0x288>)
     ec4:	47a8      	blx	r5
     ec6:	200d      	movs	r0, #13
     ec8:	4b89      	ldr	r3, [pc, #548]	; (10f0 <m2m_wifi_cb+0x28c>)
     eca:	4798      	blx	r3
	}
}
     ecc:	b01f      	add	sp, #124	; 0x7c
     ece:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     ed0:	2300      	movs	r3, #0
     ed2:	2204      	movs	r2, #4
     ed4:	a903      	add	r1, sp, #12
     ed6:	0028      	movs	r0, r5
     ed8:	4c86      	ldr	r4, [pc, #536]	; (10f4 <m2m_wifi_cb+0x290>)
     eda:	47a0      	blx	r4
     edc:	2800      	cmp	r0, #0
     ede:	d1f5      	bne.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ee0:	4b85      	ldr	r3, [pc, #532]	; (10f8 <m2m_wifi_cb+0x294>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d0f1      	beq.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     ee8:	a903      	add	r1, sp, #12
     eea:	302c      	adds	r0, #44	; 0x2c
     eec:	4798      	blx	r3
     eee:	e7ed      	b.n	ecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     ef0:	2300      	movs	r3, #0
     ef2:	2208      	movs	r2, #8
     ef4:	a903      	add	r1, sp, #12
     ef6:	0028      	movs	r0, r5
     ef8:	4c7e      	ldr	r4, [pc, #504]	; (10f4 <m2m_wifi_cb+0x290>)
     efa:	47a0      	blx	r4
     efc:	2800      	cmp	r0, #0
     efe:	d1e5      	bne.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f00:	4b7d      	ldr	r3, [pc, #500]	; (10f8 <m2m_wifi_cb+0x294>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	2b00      	cmp	r3, #0
     f06:	d0e1      	beq.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     f08:	a903      	add	r1, sp, #12
     f0a:	301b      	adds	r0, #27
     f0c:	4798      	blx	r3
     f0e:	e7dd      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     f10:	2301      	movs	r3, #1
     f12:	2230      	movs	r2, #48	; 0x30
     f14:	a903      	add	r1, sp, #12
     f16:	0028      	movs	r0, r5
     f18:	4c76      	ldr	r4, [pc, #472]	; (10f4 <m2m_wifi_cb+0x290>)
     f1a:	47a0      	blx	r4
     f1c:	2800      	cmp	r0, #0
     f1e:	d1d5      	bne.n	ecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     f20:	4b75      	ldr	r3, [pc, #468]	; (10f8 <m2m_wifi_cb+0x294>)
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	2b00      	cmp	r3, #0
     f26:	d0d1      	beq.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     f28:	a903      	add	r1, sp, #12
     f2a:	3006      	adds	r0, #6
     f2c:	4798      	blx	r3
     f2e:	e7cd      	b.n	ecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     f30:	2300      	movs	r3, #0
     f32:	2214      	movs	r2, #20
     f34:	a903      	add	r1, sp, #12
     f36:	0028      	movs	r0, r5
     f38:	4c6e      	ldr	r4, [pc, #440]	; (10f4 <m2m_wifi_cb+0x290>)
     f3a:	47a0      	blx	r4
     f3c:	2800      	cmp	r0, #0
     f3e:	d1c5      	bne.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f40:	4b6d      	ldr	r3, [pc, #436]	; (10f8 <m2m_wifi_cb+0x294>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	2b00      	cmp	r3, #0
     f46:	d0c1      	beq.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     f48:	a903      	add	r1, sp, #12
     f4a:	3032      	adds	r0, #50	; 0x32
     f4c:	4798      	blx	r3
     f4e:	e7bd      	b.n	ecc <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     f50:	2264      	movs	r2, #100	; 0x64
     f52:	2100      	movs	r1, #0
     f54:	a803      	add	r0, sp, #12
     f56:	4b69      	ldr	r3, [pc, #420]	; (10fc <m2m_wifi_cb+0x298>)
     f58:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     f5a:	2300      	movs	r3, #0
     f5c:	2264      	movs	r2, #100	; 0x64
     f5e:	a903      	add	r1, sp, #12
     f60:	0028      	movs	r0, r5
     f62:	4c64      	ldr	r4, [pc, #400]	; (10f4 <m2m_wifi_cb+0x290>)
     f64:	47a0      	blx	r4
     f66:	2800      	cmp	r0, #0
     f68:	d1b0      	bne.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f6a:	4b63      	ldr	r3, [pc, #396]	; (10f8 <m2m_wifi_cb+0x294>)
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	2b00      	cmp	r3, #0
     f70:	d0ac      	beq.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f72:	a903      	add	r1, sp, #12
     f74:	302f      	adds	r0, #47	; 0x2f
     f76:	4798      	blx	r3
     f78:	e7a8      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f7a:	2300      	movs	r3, #0
     f7c:	2204      	movs	r2, #4
     f7e:	a903      	add	r1, sp, #12
     f80:	0028      	movs	r0, r5
     f82:	4c5c      	ldr	r4, [pc, #368]	; (10f4 <m2m_wifi_cb+0x290>)
     f84:	47a0      	blx	r4
     f86:	2800      	cmp	r0, #0
     f88:	d1a0      	bne.n	ecc <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f8a:	485d      	ldr	r0, [pc, #372]	; (1100 <m2m_wifi_cb+0x29c>)
     f8c:	4d56      	ldr	r5, [pc, #344]	; (10e8 <m2m_wifi_cb+0x284>)
     f8e:	47a8      	blx	r5
     f90:	9c03      	ldr	r4, [sp, #12]
     f92:	0a23      	lsrs	r3, r4, #8
     f94:	20ff      	movs	r0, #255	; 0xff
     f96:	4003      	ands	r3, r0
     f98:	0c22      	lsrs	r2, r4, #16
     f9a:	4002      	ands	r2, r0
     f9c:	0e21      	lsrs	r1, r4, #24
     f9e:	4020      	ands	r0, r4
     fa0:	9000      	str	r0, [sp, #0]
     fa2:	4858      	ldr	r0, [pc, #352]	; (1104 <m2m_wifi_cb+0x2a0>)
     fa4:	47a8      	blx	r5
     fa6:	200d      	movs	r0, #13
     fa8:	4b51      	ldr	r3, [pc, #324]	; (10f0 <m2m_wifi_cb+0x28c>)
     faa:	4798      	blx	r3
			if (gpfAppWifiCb)
     fac:	4b52      	ldr	r3, [pc, #328]	; (10f8 <m2m_wifi_cb+0x294>)
     fae:	681b      	ldr	r3, [r3, #0]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d100      	bne.n	fb6 <m2m_wifi_cb+0x152>
     fb4:	e78a      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     fb6:	2100      	movs	r1, #0
     fb8:	2034      	movs	r0, #52	; 0x34
     fba:	4798      	blx	r3
     fbc:	e786      	b.n	ecc <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     fbe:	2200      	movs	r2, #0
     fc0:	4b51      	ldr	r3, [pc, #324]	; (1108 <m2m_wifi_cb+0x2a4>)
     fc2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     fc4:	2300      	movs	r3, #0
     fc6:	3204      	adds	r2, #4
     fc8:	a903      	add	r1, sp, #12
     fca:	0028      	movs	r0, r5
     fcc:	4c49      	ldr	r4, [pc, #292]	; (10f4 <m2m_wifi_cb+0x290>)
     fce:	47a0      	blx	r4
     fd0:	2800      	cmp	r0, #0
     fd2:	d000      	beq.n	fd6 <m2m_wifi_cb+0x172>
     fd4:	e77a      	b.n	ecc <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     fd6:	ab03      	add	r3, sp, #12
     fd8:	781a      	ldrb	r2, [r3, #0]
     fda:	4b4c      	ldr	r3, [pc, #304]	; (110c <m2m_wifi_cb+0x2a8>)
     fdc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     fde:	4b46      	ldr	r3, [pc, #280]	; (10f8 <m2m_wifi_cb+0x294>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d100      	bne.n	fe8 <m2m_wifi_cb+0x184>
     fe6:	e771      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     fe8:	a903      	add	r1, sp, #12
     fea:	3011      	adds	r0, #17
     fec:	4798      	blx	r3
     fee:	e76d      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     ff0:	2300      	movs	r3, #0
     ff2:	222c      	movs	r2, #44	; 0x2c
     ff4:	a903      	add	r1, sp, #12
     ff6:	0028      	movs	r0, r5
     ff8:	4c3e      	ldr	r4, [pc, #248]	; (10f4 <m2m_wifi_cb+0x290>)
     ffa:	47a0      	blx	r4
     ffc:	2800      	cmp	r0, #0
     ffe:	d000      	beq.n	1002 <m2m_wifi_cb+0x19e>
    1000:	e764      	b.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1002:	4b3d      	ldr	r3, [pc, #244]	; (10f8 <m2m_wifi_cb+0x294>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d100      	bne.n	100c <m2m_wifi_cb+0x1a8>
    100a:	e75f      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    100c:	a903      	add	r1, sp, #12
    100e:	3013      	adds	r0, #19
    1010:	4798      	blx	r3
    1012:	e75b      	b.n	ecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1014:	2300      	movs	r3, #0
    1016:	2204      	movs	r2, #4
    1018:	a91c      	add	r1, sp, #112	; 0x70
    101a:	0028      	movs	r0, r5
    101c:	4c35      	ldr	r4, [pc, #212]	; (10f4 <m2m_wifi_cb+0x290>)
    101e:	47a0      	blx	r4
    1020:	2800      	cmp	r0, #0
    1022:	d000      	beq.n	1026 <m2m_wifi_cb+0x1c2>
    1024:	e752      	b.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1026:	4b34      	ldr	r3, [pc, #208]	; (10f8 <m2m_wifi_cb+0x294>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d100      	bne.n	1030 <m2m_wifi_cb+0x1cc>
    102e:	e74d      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1030:	a91c      	add	r1, sp, #112	; 0x70
    1032:	3004      	adds	r0, #4
    1034:	4798      	blx	r3
    1036:	e749      	b.n	ecc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1038:	2300      	movs	r3, #0
    103a:	2204      	movs	r2, #4
    103c:	a91c      	add	r1, sp, #112	; 0x70
    103e:	0028      	movs	r0, r5
    1040:	4c2c      	ldr	r4, [pc, #176]	; (10f4 <m2m_wifi_cb+0x290>)
    1042:	47a0      	blx	r4
    1044:	2800      	cmp	r0, #0
    1046:	d000      	beq.n	104a <m2m_wifi_cb+0x1e6>
    1048:	e740      	b.n	ecc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    104a:	4b2b      	ldr	r3, [pc, #172]	; (10f8 <m2m_wifi_cb+0x294>)
    104c:	681b      	ldr	r3, [r3, #0]
    104e:	2b00      	cmp	r3, #0
    1050:	d100      	bne.n	1054 <m2m_wifi_cb+0x1f0>
    1052:	e73b      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1054:	a91c      	add	r1, sp, #112	; 0x70
    1056:	3065      	adds	r0, #101	; 0x65
    1058:	4798      	blx	r3
    105a:	e737      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    105c:	2301      	movs	r3, #1
    105e:	2264      	movs	r2, #100	; 0x64
    1060:	a903      	add	r1, sp, #12
    1062:	0028      	movs	r0, r5
    1064:	4c23      	ldr	r4, [pc, #140]	; (10f4 <m2m_wifi_cb+0x290>)
    1066:	47a0      	blx	r4
    1068:	2800      	cmp	r0, #0
    106a:	d000      	beq.n	106e <m2m_wifi_cb+0x20a>
    106c:	e72e      	b.n	ecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    106e:	4b22      	ldr	r3, [pc, #136]	; (10f8 <m2m_wifi_cb+0x294>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	2b00      	cmp	r3, #0
    1074:	d100      	bne.n	1078 <m2m_wifi_cb+0x214>
    1076:	e729      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1078:	a903      	add	r1, sp, #12
    107a:	3009      	adds	r0, #9
    107c:	4798      	blx	r3
    107e:	e725      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1080:	2301      	movs	r3, #1
    1082:	2204      	movs	r2, #4
    1084:	a903      	add	r1, sp, #12
    1086:	0028      	movs	r0, r5
    1088:	4c1a      	ldr	r4, [pc, #104]	; (10f4 <m2m_wifi_cb+0x290>)
    108a:	47a0      	blx	r4
    108c:	2800      	cmp	r0, #0
    108e:	d000      	beq.n	1092 <m2m_wifi_cb+0x22e>
    1090:	e71c      	b.n	ecc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1092:	4b19      	ldr	r3, [pc, #100]	; (10f8 <m2m_wifi_cb+0x294>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	2b00      	cmp	r3, #0
    1098:	d100      	bne.n	109c <m2m_wifi_cb+0x238>
    109a:	e717      	b.n	ecc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    109c:	a903      	add	r1, sp, #12
    109e:	302a      	adds	r0, #42	; 0x2a
    10a0:	4798      	blx	r3
    10a2:	e713      	b.n	ecc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    10a4:	2300      	movs	r3, #0
    10a6:	2208      	movs	r2, #8
    10a8:	a903      	add	r1, sp, #12
    10aa:	0028      	movs	r0, r5
    10ac:	4c11      	ldr	r4, [pc, #68]	; (10f4 <m2m_wifi_cb+0x290>)
    10ae:	47a0      	blx	r4
    10b0:	2800      	cmp	r0, #0
    10b2:	d000      	beq.n	10b6 <m2m_wifi_cb+0x252>
    10b4:	e70a      	b.n	ecc <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    10b6:	ab03      	add	r3, sp, #12
    10b8:	889a      	ldrh	r2, [r3, #4]
    10ba:	0028      	movs	r0, r5
    10bc:	3008      	adds	r0, #8
    10be:	2301      	movs	r3, #1
    10c0:	9903      	ldr	r1, [sp, #12]
    10c2:	4c0c      	ldr	r4, [pc, #48]	; (10f4 <m2m_wifi_cb+0x290>)
    10c4:	47a0      	blx	r4
    10c6:	2800      	cmp	r0, #0
    10c8:	d000      	beq.n	10cc <m2m_wifi_cb+0x268>
    10ca:	e6ff      	b.n	ecc <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    10cc:	4b0a      	ldr	r3, [pc, #40]	; (10f8 <m2m_wifi_cb+0x294>)
    10ce:	681b      	ldr	r3, [r3, #0]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d100      	bne.n	10d6 <m2m_wifi_cb+0x272>
    10d4:	e6fa      	b.n	ecc <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    10d6:	a903      	add	r1, sp, #12
    10d8:	3020      	adds	r0, #32
    10da:	4798      	blx	r3
    10dc:	e6f6      	b.n	ecc <m2m_wifi_cb+0x68>
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	0000928c 	.word	0x0000928c
    10e4:	00008f24 	.word	0x00008f24
    10e8:	00006efd 	.word	0x00006efd
    10ec:	000092dc 	.word	0x000092dc
    10f0:	00006f31 	.word	0x00006f31
    10f4:	00000cbd 	.word	0x00000cbd
    10f8:	200001fc 	.word	0x200001fc
    10fc:	0000059d 	.word	0x0000059d
    1100:	00009254 	.word	0x00009254
    1104:	000092bc 	.word	0x000092bc
    1108:	20000201 	.word	0x20000201
    110c:	20000200 	.word	0x20000200

00001110 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1110:	b5f0      	push	{r4, r5, r6, r7, lr}
    1112:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1114:	2201      	movs	r2, #1
    1116:	230f      	movs	r3, #15
    1118:	446b      	add	r3, sp
    111a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    111c:	2800      	cmp	r0, #0
    111e:	d061      	beq.n	11e4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1120:	6802      	ldr	r2, [r0, #0]
    1122:	4b32      	ldr	r3, [pc, #200]	; (11ec <m2m_wifi_init+0xdc>)
    1124:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1126:	2200      	movs	r2, #0
    1128:	4b31      	ldr	r3, [pc, #196]	; (11f0 <m2m_wifi_init+0xe0>)
    112a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    112c:	200f      	movs	r0, #15
    112e:	4468      	add	r0, sp
    1130:	4b30      	ldr	r3, [pc, #192]	; (11f4 <m2m_wifi_init+0xe4>)
    1132:	4798      	blx	r3
    1134:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1136:	d002      	beq.n	113e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1138:	0020      	movs	r0, r4
    113a:	b00f      	add	sp, #60	; 0x3c
    113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    113e:	2000      	movs	r0, #0
    1140:	4b2d      	ldr	r3, [pc, #180]	; (11f8 <m2m_wifi_init+0xe8>)
    1142:	4798      	blx	r3
    1144:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1146:	d149      	bne.n	11dc <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1148:	492c      	ldr	r1, [pc, #176]	; (11fc <m2m_wifi_init+0xec>)
    114a:	2001      	movs	r0, #1
    114c:	4b2c      	ldr	r3, [pc, #176]	; (1200 <m2m_wifi_init+0xf0>)
    114e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1150:	ae04      	add	r6, sp, #16
    1152:	0030      	movs	r0, r6
    1154:	4b2b      	ldr	r3, [pc, #172]	; (1204 <m2m_wifi_init+0xf4>)
    1156:	4798      	blx	r3
    1158:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    115a:	482b      	ldr	r0, [pc, #172]	; (1208 <m2m_wifi_init+0xf8>)
    115c:	4d2b      	ldr	r5, [pc, #172]	; (120c <m2m_wifi_init+0xfc>)
    115e:	47a8      	blx	r5
    1160:	79b3      	ldrb	r3, [r6, #6]
    1162:	7972      	ldrb	r2, [r6, #5]
    1164:	7931      	ldrb	r1, [r6, #4]
    1166:	8c30      	ldrh	r0, [r6, #32]
    1168:	9000      	str	r0, [sp, #0]
    116a:	4829      	ldr	r0, [pc, #164]	; (1210 <m2m_wifi_init+0x100>)
    116c:	47a8      	blx	r5
    116e:	200d      	movs	r0, #13
    1170:	4f28      	ldr	r7, [pc, #160]	; (1214 <m2m_wifi_init+0x104>)
    1172:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1174:	4824      	ldr	r0, [pc, #144]	; (1208 <m2m_wifi_init+0xf8>)
    1176:	47a8      	blx	r5
    1178:	2226      	movs	r2, #38	; 0x26
    117a:	446a      	add	r2, sp
    117c:	211a      	movs	r1, #26
    117e:	4469      	add	r1, sp
    1180:	4825      	ldr	r0, [pc, #148]	; (1218 <m2m_wifi_init+0x108>)
    1182:	47a8      	blx	r5
    1184:	200d      	movs	r0, #13
    1186:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1188:	481f      	ldr	r0, [pc, #124]	; (1208 <m2m_wifi_init+0xf8>)
    118a:	47a8      	blx	r5
    118c:	7a73      	ldrb	r3, [r6, #9]
    118e:	7a32      	ldrb	r2, [r6, #8]
    1190:	79f1      	ldrb	r1, [r6, #7]
    1192:	4822      	ldr	r0, [pc, #136]	; (121c <m2m_wifi_init+0x10c>)
    1194:	47a8      	blx	r5
    1196:	200d      	movs	r0, #13
    1198:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    119a:	481b      	ldr	r0, [pc, #108]	; (1208 <m2m_wifi_init+0xf8>)
    119c:	47a8      	blx	r5
    119e:	2302      	movs	r3, #2
    11a0:	2205      	movs	r2, #5
    11a2:	2113      	movs	r1, #19
    11a4:	481e      	ldr	r0, [pc, #120]	; (1220 <m2m_wifi_init+0x110>)
    11a6:	47a8      	blx	r5
    11a8:	200d      	movs	r0, #13
    11aa:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    11ac:	4816      	ldr	r0, [pc, #88]	; (1208 <m2m_wifi_init+0xf8>)
    11ae:	47a8      	blx	r5
    11b0:	4a1c      	ldr	r2, [pc, #112]	; (1224 <m2m_wifi_init+0x114>)
    11b2:	491d      	ldr	r1, [pc, #116]	; (1228 <m2m_wifi_init+0x118>)
    11b4:	481d      	ldr	r0, [pc, #116]	; (122c <m2m_wifi_init+0x11c>)
    11b6:	47a8      	blx	r5
    11b8:	200d      	movs	r0, #13
    11ba:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    11bc:	0023      	movs	r3, r4
    11be:	330d      	adds	r3, #13
    11c0:	d1ba      	bne.n	1138 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    11c2:	22ee      	movs	r2, #238	; 0xee
    11c4:	32ff      	adds	r2, #255	; 0xff
    11c6:	491a      	ldr	r1, [pc, #104]	; (1230 <m2m_wifi_init+0x120>)
    11c8:	481a      	ldr	r0, [pc, #104]	; (1234 <m2m_wifi_init+0x124>)
    11ca:	4b10      	ldr	r3, [pc, #64]	; (120c <m2m_wifi_init+0xfc>)
    11cc:	4798      	blx	r3
    11ce:	481a      	ldr	r0, [pc, #104]	; (1238 <m2m_wifi_init+0x128>)
    11d0:	4b1a      	ldr	r3, [pc, #104]	; (123c <m2m_wifi_init+0x12c>)
    11d2:	4798      	blx	r3
    11d4:	200d      	movs	r0, #13
    11d6:	4b0f      	ldr	r3, [pc, #60]	; (1214 <m2m_wifi_init+0x104>)
    11d8:	4798      	blx	r3
    11da:	e7ad      	b.n	1138 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    11dc:	2000      	movs	r0, #0
    11de:	4b18      	ldr	r3, [pc, #96]	; (1240 <m2m_wifi_init+0x130>)
    11e0:	4798      	blx	r3
    11e2:	e7a9      	b.n	1138 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    11e4:	240c      	movs	r4, #12
    11e6:	4264      	negs	r4, r4
    11e8:	e7a6      	b.n	1138 <m2m_wifi_init+0x28>
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	200001fc 	.word	0x200001fc
    11f0:	20000201 	.word	0x20000201
    11f4:	00001bb1 	.word	0x00001bb1
    11f8:	00000e2d 	.word	0x00000e2d
    11fc:	00000e65 	.word	0x00000e65
    1200:	00000da9 	.word	0x00000da9
    1204:	00001acd 	.word	0x00001acd
    1208:	00009254 	.word	0x00009254
    120c:	00006efd 	.word	0x00006efd
    1210:	00009398 	.word	0x00009398
    1214:	00006f31 	.word	0x00006f31
    1218:	000093c0 	.word	0x000093c0
    121c:	000093dc 	.word	0x000093dc
    1220:	00009400 	.word	0x00009400
    1224:	00009418 	.word	0x00009418
    1228:	00009424 	.word	0x00009424
    122c:	00009430 	.word	0x00009430
    1230:	00009298 	.word	0x00009298
    1234:	00008f24 	.word	0x00008f24
    1238:	00009448 	.word	0x00009448
    123c:	00007019 	.word	0x00007019
    1240:	00001c85 	.word	0x00001c85

00001244 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1244:	b510      	push	{r4, lr}
	return hif_handle_isr();
    1246:	4b01      	ldr	r3, [pc, #4]	; (124c <m2m_wifi_handle_events+0x8>)
    1248:	4798      	blx	r3
}
    124a:	bd10      	pop	{r4, pc}
    124c:	000008e1 	.word	0x000008e1

00001250 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	46ce      	mov	lr, r9
    1254:	4647      	mov	r7, r8
    1256:	b580      	push	{r7, lr}
    1258:	b0a3      	sub	sp, #140	; 0x8c
    125a:	9005      	str	r0, [sp, #20]
    125c:	000c      	movs	r4, r1
    125e:	0015      	movs	r5, r2
    1260:	001f      	movs	r7, r3
    1262:	ab2a      	add	r3, sp, #168	; 0xa8
    1264:	881b      	ldrh	r3, [r3, #0]
    1266:	4699      	mov	r9, r3
    1268:	ab2b      	add	r3, sp, #172	; 0xac
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    126e:	2a01      	cmp	r2, #1
    1270:	d003      	beq.n	127a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1272:	2f00      	cmp	r7, #0
    1274:	d040      	beq.n	12f8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1276:	2a02      	cmp	r2, #2
    1278:	d04c      	beq.n	1314 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    127a:	1e63      	subs	r3, r4, #1
    127c:	2b1f      	cmp	r3, #31
    127e:	d900      	bls.n	1282 <m2m_wifi_connect_sc+0x32>
    1280:	e078      	b.n	1374 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1282:	464b      	mov	r3, r9
    1284:	3b01      	subs	r3, #1
    1286:	b29b      	uxth	r3, r3
    1288:	2b0d      	cmp	r3, #13
    128a:	d903      	bls.n	1294 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    128c:	464b      	mov	r3, r9
    128e:	2bff      	cmp	r3, #255	; 0xff
    1290:	d000      	beq.n	1294 <m2m_wifi_connect_sc+0x44>
    1292:	e07d      	b.n	1390 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1294:	ae07      	add	r6, sp, #28
    1296:	0022      	movs	r2, r4
    1298:	9905      	ldr	r1, [sp, #20]
    129a:	205a      	movs	r0, #90	; 0x5a
    129c:	ab02      	add	r3, sp, #8
    129e:	469c      	mov	ip, r3
    12a0:	4460      	add	r0, ip
    12a2:	4b78      	ldr	r3, [pc, #480]	; (1484 <m2m_wifi_connect_sc+0x234>)
    12a4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    12a6:	1934      	adds	r4, r6, r4
    12a8:	3446      	adds	r4, #70	; 0x46
    12aa:	2300      	movs	r3, #0
    12ac:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    12ae:	3344      	adds	r3, #68	; 0x44
    12b0:	464a      	mov	r2, r9
    12b2:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    12b4:	4643      	mov	r3, r8
    12b6:	1e5a      	subs	r2, r3, #1
    12b8:	4193      	sbcs	r3, r2
    12ba:	2267      	movs	r2, #103	; 0x67
    12bc:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    12be:	2341      	movs	r3, #65	; 0x41
    12c0:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    12c2:	2d03      	cmp	r5, #3
    12c4:	d100      	bne.n	12c8 <m2m_wifi_connect_sc+0x78>
    12c6:	e071      	b.n	13ac <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    12c8:	2d02      	cmp	r5, #2
    12ca:	d100      	bne.n	12ce <m2m_wifi_connect_sc+0x7e>
    12cc:	e0ab      	b.n	1426 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    12ce:	2d04      	cmp	r5, #4
    12d0:	d100      	bne.n	12d4 <m2m_wifi_connect_sc+0x84>
    12d2:	e0c3      	b.n	145c <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    12d4:	2d01      	cmp	r5, #1
    12d6:	d000      	beq.n	12da <m2m_wifi_connect_sc+0x8a>
    12d8:	e0c6      	b.n	1468 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    12da:	2300      	movs	r3, #0
    12dc:	9302      	str	r3, [sp, #8]
    12de:	9301      	str	r3, [sp, #4]
    12e0:	9300      	str	r3, [sp, #0]
    12e2:	336c      	adds	r3, #108	; 0x6c
    12e4:	aa07      	add	r2, sp, #28
    12e6:	2128      	movs	r1, #40	; 0x28
    12e8:	2001      	movs	r0, #1
    12ea:	4c67      	ldr	r4, [pc, #412]	; (1488 <m2m_wifi_connect_sc+0x238>)
    12ec:	47a0      	blx	r4

ERR1:
	return ret;
}
    12ee:	b023      	add	sp, #140	; 0x8c
    12f0:	bc0c      	pop	{r2, r3}
    12f2:	4690      	mov	r8, r2
    12f4:	4699      	mov	r9, r3
    12f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    12f8:	4a64      	ldr	r2, [pc, #400]	; (148c <m2m_wifi_connect_sc+0x23c>)
    12fa:	4965      	ldr	r1, [pc, #404]	; (1490 <m2m_wifi_connect_sc+0x240>)
    12fc:	4865      	ldr	r0, [pc, #404]	; (1494 <m2m_wifi_connect_sc+0x244>)
    12fe:	4b66      	ldr	r3, [pc, #408]	; (1498 <m2m_wifi_connect_sc+0x248>)
    1300:	4798      	blx	r3
    1302:	4866      	ldr	r0, [pc, #408]	; (149c <m2m_wifi_connect_sc+0x24c>)
    1304:	4b66      	ldr	r3, [pc, #408]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    1306:	4798      	blx	r3
    1308:	200d      	movs	r0, #13
    130a:	4b66      	ldr	r3, [pc, #408]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    130c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    130e:	200c      	movs	r0, #12
    1310:	4240      	negs	r0, r0
			goto ERR1;
    1312:	e7ec      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1314:	0038      	movs	r0, r7
    1316:	4b64      	ldr	r3, [pc, #400]	; (14a8 <m2m_wifi_connect_sc+0x258>)
    1318:	4798      	blx	r3
    131a:	2840      	cmp	r0, #64	; 0x40
    131c:	d1ad      	bne.n	127a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    131e:	783b      	ldrb	r3, [r7, #0]
    1320:	001a      	movs	r2, r3
    1322:	3a30      	subs	r2, #48	; 0x30
    1324:	2a36      	cmp	r2, #54	; 0x36
    1326:	d817      	bhi.n	1358 <m2m_wifi_connect_sc+0x108>
    1328:	3a0a      	subs	r2, #10
    132a:	2a06      	cmp	r2, #6
    132c:	d914      	bls.n	1358 <m2m_wifi_connect_sc+0x108>
    132e:	3b47      	subs	r3, #71	; 0x47
    1330:	2b19      	cmp	r3, #25
    1332:	d911      	bls.n	1358 <m2m_wifi_connect_sc+0x108>
    1334:	1c7a      	adds	r2, r7, #1
    1336:	0038      	movs	r0, r7
    1338:	3040      	adds	r0, #64	; 0x40
    133a:	7813      	ldrb	r3, [r2, #0]
    133c:	0019      	movs	r1, r3
    133e:	3930      	subs	r1, #48	; 0x30
    1340:	2936      	cmp	r1, #54	; 0x36
    1342:	d809      	bhi.n	1358 <m2m_wifi_connect_sc+0x108>
    1344:	390a      	subs	r1, #10
    1346:	2906      	cmp	r1, #6
    1348:	d906      	bls.n	1358 <m2m_wifi_connect_sc+0x108>
    134a:	3b47      	subs	r3, #71	; 0x47
    134c:	2b19      	cmp	r3, #25
    134e:	d903      	bls.n	1358 <m2m_wifi_connect_sc+0x108>
    1350:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    1352:	4282      	cmp	r2, r0
    1354:	d1f1      	bne.n	133a <m2m_wifi_connect_sc+0xea>
    1356:	e790      	b.n	127a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    1358:	4a54      	ldr	r2, [pc, #336]	; (14ac <m2m_wifi_connect_sc+0x25c>)
    135a:	494d      	ldr	r1, [pc, #308]	; (1490 <m2m_wifi_connect_sc+0x240>)
    135c:	484d      	ldr	r0, [pc, #308]	; (1494 <m2m_wifi_connect_sc+0x244>)
    135e:	4b4e      	ldr	r3, [pc, #312]	; (1498 <m2m_wifi_connect_sc+0x248>)
    1360:	4798      	blx	r3
    1362:	4853      	ldr	r0, [pc, #332]	; (14b0 <m2m_wifi_connect_sc+0x260>)
    1364:	4b4e      	ldr	r3, [pc, #312]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    1366:	4798      	blx	r3
    1368:	200d      	movs	r0, #13
    136a:	4b4e      	ldr	r3, [pc, #312]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    136c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    136e:	200c      	movs	r0, #12
    1370:	4240      	negs	r0, r0
					goto ERR1;
    1372:	e7bc      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1374:	4a4f      	ldr	r2, [pc, #316]	; (14b4 <m2m_wifi_connect_sc+0x264>)
    1376:	4946      	ldr	r1, [pc, #280]	; (1490 <m2m_wifi_connect_sc+0x240>)
    1378:	4846      	ldr	r0, [pc, #280]	; (1494 <m2m_wifi_connect_sc+0x244>)
    137a:	4b47      	ldr	r3, [pc, #284]	; (1498 <m2m_wifi_connect_sc+0x248>)
    137c:	4798      	blx	r3
    137e:	484e      	ldr	r0, [pc, #312]	; (14b8 <m2m_wifi_connect_sc+0x268>)
    1380:	4b47      	ldr	r3, [pc, #284]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    1382:	4798      	blx	r3
    1384:	200d      	movs	r0, #13
    1386:	4b47      	ldr	r3, [pc, #284]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    1388:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    138a:	200c      	movs	r0, #12
    138c:	4240      	negs	r0, r0
		goto ERR1;
    138e:	e7ae      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1390:	4a4a      	ldr	r2, [pc, #296]	; (14bc <m2m_wifi_connect_sc+0x26c>)
    1392:	493f      	ldr	r1, [pc, #252]	; (1490 <m2m_wifi_connect_sc+0x240>)
    1394:	483f      	ldr	r0, [pc, #252]	; (1494 <m2m_wifi_connect_sc+0x244>)
    1396:	4b40      	ldr	r3, [pc, #256]	; (1498 <m2m_wifi_connect_sc+0x248>)
    1398:	4798      	blx	r3
    139a:	4849      	ldr	r0, [pc, #292]	; (14c0 <m2m_wifi_connect_sc+0x270>)
    139c:	4b40      	ldr	r3, [pc, #256]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    139e:	4798      	blx	r3
    13a0:	200d      	movs	r0, #13
    13a2:	4b40      	ldr	r3, [pc, #256]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    13a4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13a6:	200c      	movs	r0, #12
    13a8:	4240      	negs	r0, r0
			goto ERR1;
    13aa:	e7a0      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    13ac:	783b      	ldrb	r3, [r7, #0]
    13ae:	3b01      	subs	r3, #1
    13b0:	b2db      	uxtb	r3, r3
    13b2:	aa07      	add	r2, sp, #28
    13b4:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    13b6:	2b03      	cmp	r3, #3
    13b8:	d818      	bhi.n	13ec <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    13ba:	787a      	ldrb	r2, [r7, #1]
    13bc:	1e51      	subs	r1, r2, #1
    13be:	ab07      	add	r3, sp, #28
    13c0:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    13c2:	2310      	movs	r3, #16
    13c4:	0011      	movs	r1, r2
    13c6:	4399      	bics	r1, r3
    13c8:	290b      	cmp	r1, #11
    13ca:	d01e      	beq.n	140a <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    13cc:	2296      	movs	r2, #150	; 0x96
    13ce:	0092      	lsls	r2, r2, #2
    13d0:	492f      	ldr	r1, [pc, #188]	; (1490 <m2m_wifi_connect_sc+0x240>)
    13d2:	4830      	ldr	r0, [pc, #192]	; (1494 <m2m_wifi_connect_sc+0x244>)
    13d4:	4c30      	ldr	r4, [pc, #192]	; (1498 <m2m_wifi_connect_sc+0x248>)
    13d6:	47a0      	blx	r4
    13d8:	ab07      	add	r3, sp, #28
    13da:	7859      	ldrb	r1, [r3, #1]
    13dc:	4839      	ldr	r0, [pc, #228]	; (14c4 <m2m_wifi_connect_sc+0x274>)
    13de:	47a0      	blx	r4
    13e0:	200d      	movs	r0, #13
    13e2:	4b30      	ldr	r3, [pc, #192]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    13e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13e6:	200c      	movs	r0, #12
    13e8:	4240      	negs	r0, r0
			goto ERR1;
    13ea:	e780      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    13ec:	4a36      	ldr	r2, [pc, #216]	; (14c8 <m2m_wifi_connect_sc+0x278>)
    13ee:	4928      	ldr	r1, [pc, #160]	; (1490 <m2m_wifi_connect_sc+0x240>)
    13f0:	4828      	ldr	r0, [pc, #160]	; (1494 <m2m_wifi_connect_sc+0x244>)
    13f2:	4c29      	ldr	r4, [pc, #164]	; (1498 <m2m_wifi_connect_sc+0x248>)
    13f4:	47a0      	blx	r4
    13f6:	ab07      	add	r3, sp, #28
    13f8:	7819      	ldrb	r1, [r3, #0]
    13fa:	4834      	ldr	r0, [pc, #208]	; (14cc <m2m_wifi_connect_sc+0x27c>)
    13fc:	47a0      	blx	r4
    13fe:	200d      	movs	r0, #13
    1400:	4b28      	ldr	r3, [pc, #160]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    1402:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1404:	200c      	movs	r0, #12
    1406:	4240      	negs	r0, r0
			goto ERR1;
    1408:	e771      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    140a:	1cb9      	adds	r1, r7, #2
    140c:	2016      	movs	r0, #22
    140e:	ab02      	add	r3, sp, #8
    1410:	469c      	mov	ip, r3
    1412:	4460      	add	r0, ip
    1414:	4b1b      	ldr	r3, [pc, #108]	; (1484 <m2m_wifi_connect_sc+0x234>)
    1416:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1418:	787b      	ldrb	r3, [r7, #1]
    141a:	aa07      	add	r2, sp, #28
    141c:	4694      	mov	ip, r2
    141e:	4463      	add	r3, ip
    1420:	2200      	movs	r2, #0
    1422:	709a      	strb	r2, [r3, #2]
    1424:	e759      	b.n	12da <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1426:	0038      	movs	r0, r7
    1428:	4b1f      	ldr	r3, [pc, #124]	; (14a8 <m2m_wifi_connect_sc+0x258>)
    142a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    142c:	1e43      	subs	r3, r0, #1
    142e:	b29b      	uxth	r3, r3
    1430:	2b3f      	cmp	r3, #63	; 0x3f
    1432:	d805      	bhi.n	1440 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1434:	1c42      	adds	r2, r0, #1
    1436:	0039      	movs	r1, r7
    1438:	a807      	add	r0, sp, #28
    143a:	4b12      	ldr	r3, [pc, #72]	; (1484 <m2m_wifi_connect_sc+0x234>)
    143c:	4798      	blx	r3
    143e:	e74c      	b.n	12da <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1440:	4a23      	ldr	r2, [pc, #140]	; (14d0 <m2m_wifi_connect_sc+0x280>)
    1442:	4913      	ldr	r1, [pc, #76]	; (1490 <m2m_wifi_connect_sc+0x240>)
    1444:	4813      	ldr	r0, [pc, #76]	; (1494 <m2m_wifi_connect_sc+0x244>)
    1446:	4b14      	ldr	r3, [pc, #80]	; (1498 <m2m_wifi_connect_sc+0x248>)
    1448:	4798      	blx	r3
    144a:	4822      	ldr	r0, [pc, #136]	; (14d4 <m2m_wifi_connect_sc+0x284>)
    144c:	4b14      	ldr	r3, [pc, #80]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    144e:	4798      	blx	r3
    1450:	200d      	movs	r0, #13
    1452:	4b14      	ldr	r3, [pc, #80]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    1454:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1456:	200c      	movs	r0, #12
    1458:	4240      	negs	r0, r0
			goto ERR1;
    145a:	e748      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    145c:	223e      	movs	r2, #62	; 0x3e
    145e:	0039      	movs	r1, r7
    1460:	a807      	add	r0, sp, #28
    1462:	4b08      	ldr	r3, [pc, #32]	; (1484 <m2m_wifi_connect_sc+0x234>)
    1464:	4798      	blx	r3
    1466:	e738      	b.n	12da <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    1468:	4a1b      	ldr	r2, [pc, #108]	; (14d8 <m2m_wifi_connect_sc+0x288>)
    146a:	4909      	ldr	r1, [pc, #36]	; (1490 <m2m_wifi_connect_sc+0x240>)
    146c:	4809      	ldr	r0, [pc, #36]	; (1494 <m2m_wifi_connect_sc+0x244>)
    146e:	4b0a      	ldr	r3, [pc, #40]	; (1498 <m2m_wifi_connect_sc+0x248>)
    1470:	4798      	blx	r3
    1472:	481a      	ldr	r0, [pc, #104]	; (14dc <m2m_wifi_connect_sc+0x28c>)
    1474:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <m2m_wifi_connect_sc+0x250>)
    1476:	4798      	blx	r3
    1478:	200d      	movs	r0, #13
    147a:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <m2m_wifi_connect_sc+0x254>)
    147c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    147e:	200c      	movs	r0, #12
    1480:	4240      	negs	r0, r0
		goto ERR1;
    1482:	e734      	b.n	12ee <m2m_wifi_connect_sc+0x9e>
    1484:	00000589 	.word	0x00000589
    1488:	000006b1 	.word	0x000006b1
    148c:	0000021b 	.word	0x0000021b
    1490:	000092a8 	.word	0x000092a8
    1494:	00008f24 	.word	0x00008f24
    1498:	00006efd 	.word	0x00006efd
    149c:	000092f0 	.word	0x000092f0
    14a0:	00007019 	.word	0x00007019
    14a4:	00006f31 	.word	0x00006f31
    14a8:	000005ad 	.word	0x000005ad
    14ac:	00000227 	.word	0x00000227
    14b0:	00009304 	.word	0x00009304
    14b4:	00000231 	.word	0x00000231
    14b8:	00009310 	.word	0x00009310
    14bc:	0000023a 	.word	0x0000023a
    14c0:	00009324 	.word	0x00009324
    14c4:	0000934c 	.word	0x0000934c
    14c8:	00000251 	.word	0x00000251
    14cc:	00009330 	.word	0x00009330
    14d0:	00000267 	.word	0x00000267
    14d4:	00009368 	.word	0x00009368
    14d8:	00000277 	.word	0x00000277
    14dc:	00009384 	.word	0x00009384

000014e0 <m2m_wifi_connect>:
{
    14e0:	b530      	push	{r4, r5, lr}
    14e2:	b083      	sub	sp, #12
    14e4:	ac06      	add	r4, sp, #24
    14e6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    14e8:	2500      	movs	r5, #0
    14ea:	9501      	str	r5, [sp, #4]
    14ec:	9400      	str	r4, [sp, #0]
    14ee:	4c02      	ldr	r4, [pc, #8]	; (14f8 <m2m_wifi_connect+0x18>)
    14f0:	47a0      	blx	r4
}
    14f2:	b003      	add	sp, #12
    14f4:	bd30      	pop	{r4, r5, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	00001251 	.word	0x00001251

000014fc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    14fc:	2000      	movs	r0, #0
    14fe:	4770      	bx	lr

00001500 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1500:	b5f0      	push	{r4, r5, r6, r7, lr}
    1502:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    1504:	2580      	movs	r5, #128	; 0x80
    1506:	006d      	lsls	r5, r5, #1
    1508:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    150a:	24a5      	movs	r4, #165	; 0xa5
    150c:	0164      	lsls	r4, r4, #5
    150e:	4f08      	ldr	r7, [pc, #32]	; (1530 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1510:	4e08      	ldr	r6, [pc, #32]	; (1534 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    1512:	0029      	movs	r1, r5
    1514:	0020      	movs	r0, r4
    1516:	47b8      	blx	r7
			uint32 reg = 0;
    1518:	2300      	movs	r3, #0
    151a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    151c:	a901      	add	r1, sp, #4
    151e:	0020      	movs	r0, r4
    1520:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    1522:	2800      	cmp	r0, #0
    1524:	d1f5      	bne.n	1512 <chip_apply_conf+0x12>
				if(reg == val32)
    1526:	9b01      	ldr	r3, [sp, #4]
    1528:	429d      	cmp	r5, r3
    152a:	d1f2      	bne.n	1512 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    152c:	b003      	add	sp, #12
    152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1530:	000019f1 	.word	0x000019f1
    1534:	000019e5 	.word	0x000019e5

00001538 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    1538:	b500      	push	{lr}
    153a:	b083      	sub	sp, #12
	uint32 reg = 0;
    153c:	2300      	movs	r3, #0
    153e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1540:	a901      	add	r1, sp, #4
    1542:	4811      	ldr	r0, [pc, #68]	; (1588 <enable_interrupts+0x50>)
    1544:	4b11      	ldr	r3, [pc, #68]	; (158c <enable_interrupts+0x54>)
    1546:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1548:	2800      	cmp	r0, #0
    154a:	d001      	beq.n	1550 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    154c:	b003      	add	sp, #12
    154e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    1550:	2180      	movs	r1, #128	; 0x80
    1552:	0049      	lsls	r1, r1, #1
    1554:	9b01      	ldr	r3, [sp, #4]
    1556:	4319      	orrs	r1, r3
    1558:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    155a:	480b      	ldr	r0, [pc, #44]	; (1588 <enable_interrupts+0x50>)
    155c:	4b0c      	ldr	r3, [pc, #48]	; (1590 <enable_interrupts+0x58>)
    155e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1560:	2800      	cmp	r0, #0
    1562:	d1f3      	bne.n	154c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1564:	a901      	add	r1, sp, #4
    1566:	20d0      	movs	r0, #208	; 0xd0
    1568:	0140      	lsls	r0, r0, #5
    156a:	4b08      	ldr	r3, [pc, #32]	; (158c <enable_interrupts+0x54>)
    156c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    156e:	2800      	cmp	r0, #0
    1570:	d1ec      	bne.n	154c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    1572:	2180      	movs	r1, #128	; 0x80
    1574:	0249      	lsls	r1, r1, #9
    1576:	9b01      	ldr	r3, [sp, #4]
    1578:	4319      	orrs	r1, r3
    157a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    157c:	20d0      	movs	r0, #208	; 0xd0
    157e:	0140      	lsls	r0, r0, #5
    1580:	4b03      	ldr	r3, [pc, #12]	; (1590 <enable_interrupts+0x58>)
    1582:	4798      	blx	r3
    1584:	e7e2      	b.n	154c <enable_interrupts+0x14>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	00001408 	.word	0x00001408
    158c:	000019e5 	.word	0x000019e5
    1590:	000019f1 	.word	0x000019f1

00001594 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1594:	b510      	push	{r4, lr}
    1596:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1598:	4b28      	ldr	r3, [pc, #160]	; (163c <nmi_get_chipid+0xa8>)
    159a:	681c      	ldr	r4, [r3, #0]
    159c:	2c00      	cmp	r4, #0
    159e:	d004      	beq.n	15aa <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    15a0:	4b26      	ldr	r3, [pc, #152]	; (163c <nmi_get_chipid+0xa8>)
    15a2:	681c      	ldr	r4, [r3, #0]
}
    15a4:	0020      	movs	r0, r4
    15a6:	b002      	add	sp, #8
    15a8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    15aa:	0019      	movs	r1, r3
    15ac:	2080      	movs	r0, #128	; 0x80
    15ae:	0140      	lsls	r0, r0, #5
    15b0:	4b23      	ldr	r3, [pc, #140]	; (1640 <nmi_get_chipid+0xac>)
    15b2:	4798      	blx	r3
    15b4:	2800      	cmp	r0, #0
    15b6:	d003      	beq.n	15c0 <nmi_get_chipid+0x2c>
			chipid = 0;
    15b8:	2200      	movs	r2, #0
    15ba:	4b20      	ldr	r3, [pc, #128]	; (163c <nmi_get_chipid+0xa8>)
    15bc:	601a      	str	r2, [r3, #0]
			return 0;
    15be:	e7f1      	b.n	15a4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    15c0:	a901      	add	r1, sp, #4
    15c2:	4820      	ldr	r0, [pc, #128]	; (1644 <nmi_get_chipid+0xb0>)
    15c4:	4b1e      	ldr	r3, [pc, #120]	; (1640 <nmi_get_chipid+0xac>)
    15c6:	4798      	blx	r3
    15c8:	2800      	cmp	r0, #0
    15ca:	d003      	beq.n	15d4 <nmi_get_chipid+0x40>
			chipid = 0;
    15cc:	2200      	movs	r2, #0
    15ce:	4b1b      	ldr	r3, [pc, #108]	; (163c <nmi_get_chipid+0xa8>)
    15d0:	601a      	str	r2, [r3, #0]
			return 0;
    15d2:	e7e7      	b.n	15a4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    15d4:	4b19      	ldr	r3, [pc, #100]	; (163c <nmi_get_chipid+0xa8>)
    15d6:	681b      	ldr	r3, [r3, #0]
    15d8:	4a1b      	ldr	r2, [pc, #108]	; (1648 <nmi_get_chipid+0xb4>)
    15da:	4293      	cmp	r3, r2
    15dc:	d00e      	beq.n	15fc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    15de:	4a1b      	ldr	r2, [pc, #108]	; (164c <nmi_get_chipid+0xb8>)
    15e0:	4293      	cmp	r3, r2
    15e2:	d012      	beq.n	160a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    15e4:	4a1a      	ldr	r2, [pc, #104]	; (1650 <nmi_get_chipid+0xbc>)
    15e6:	4293      	cmp	r3, r2
    15e8:	d01c      	beq.n	1624 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    15ea:	4914      	ldr	r1, [pc, #80]	; (163c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    15ec:	4a19      	ldr	r2, [pc, #100]	; (1654 <nmi_get_chipid+0xc0>)
    15ee:	680b      	ldr	r3, [r1, #0]
    15f0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    15f2:	23a0      	movs	r3, #160	; 0xa0
    15f4:	02db      	lsls	r3, r3, #11
    15f6:	4313      	orrs	r3, r2
    15f8:	600b      	str	r3, [r1, #0]
    15fa:	e7d1      	b.n	15a0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    15fc:	9b01      	ldr	r3, [sp, #4]
    15fe:	2b01      	cmp	r3, #1
    1600:	d0f3      	beq.n	15ea <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    1602:	4a15      	ldr	r2, [pc, #84]	; (1658 <nmi_get_chipid+0xc4>)
    1604:	4b0d      	ldr	r3, [pc, #52]	; (163c <nmi_get_chipid+0xa8>)
    1606:	601a      	str	r2, [r3, #0]
    1608:	e7ef      	b.n	15ea <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    160a:	9b01      	ldr	r3, [sp, #4]
    160c:	2b03      	cmp	r3, #3
    160e:	d0ec      	beq.n	15ea <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    1610:	2b04      	cmp	r3, #4
    1612:	d003      	beq.n	161c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    1614:	4a11      	ldr	r2, [pc, #68]	; (165c <nmi_get_chipid+0xc8>)
    1616:	4b09      	ldr	r3, [pc, #36]	; (163c <nmi_get_chipid+0xa8>)
    1618:	601a      	str	r2, [r3, #0]
    161a:	e7e6      	b.n	15ea <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    161c:	4a10      	ldr	r2, [pc, #64]	; (1660 <nmi_get_chipid+0xcc>)
    161e:	4b07      	ldr	r3, [pc, #28]	; (163c <nmi_get_chipid+0xa8>)
    1620:	601a      	str	r2, [r3, #0]
    1622:	e7e2      	b.n	15ea <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    1624:	4905      	ldr	r1, [pc, #20]	; (163c <nmi_get_chipid+0xa8>)
    1626:	20ec      	movs	r0, #236	; 0xec
    1628:	0380      	lsls	r0, r0, #14
    162a:	4b05      	ldr	r3, [pc, #20]	; (1640 <nmi_get_chipid+0xac>)
    162c:	4798      	blx	r3
    162e:	2800      	cmp	r0, #0
    1630:	d0db      	beq.n	15ea <nmi_get_chipid+0x56>
			chipid = 0;
    1632:	2200      	movs	r2, #0
    1634:	4b01      	ldr	r3, [pc, #4]	; (163c <nmi_get_chipid+0xa8>)
    1636:	601a      	str	r2, [r3, #0]
			return 0;
    1638:	e7b4      	b.n	15a4 <nmi_get_chipid+0x10>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	20000204 	.word	0x20000204
    1640:	000019e5 	.word	0x000019e5
    1644:	000013f4 	.word	0x000013f4
    1648:	001002a0 	.word	0x001002a0
    164c:	001002b0 	.word	0x001002b0
    1650:	001000f0 	.word	0x001000f0
    1654:	fff0ffff 	.word	0xfff0ffff
    1658:	001002a1 	.word	0x001002a1
    165c:	001002b2 	.word	0x001002b2
    1660:	001002b1 	.word	0x001002b1

00001664 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    1664:	b530      	push	{r4, r5, lr}
    1666:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1668:	4c16      	ldr	r4, [pc, #88]	; (16c4 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    166a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    166c:	a901      	add	r1, sp, #4
    166e:	2010      	movs	r0, #16
    1670:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    1672:	2800      	cmp	r0, #0
    1674:	d11c      	bne.n	16b0 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    1676:	9b01      	ldr	r3, [sp, #4]
    1678:	422b      	tst	r3, r5
    167a:	d1f7      	bne.n	166c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    167c:	a901      	add	r1, sp, #4
    167e:	3001      	adds	r0, #1
    1680:	4b10      	ldr	r3, [pc, #64]	; (16c4 <chip_sleep+0x60>)
    1682:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1684:	2800      	cmp	r0, #0
    1686:	d113      	bne.n	16b0 <chip_sleep+0x4c>
	if(reg & NBIT1)
    1688:	9901      	ldr	r1, [sp, #4]
    168a:	078b      	lsls	r3, r1, #30
    168c:	d507      	bpl.n	169e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    168e:	2302      	movs	r3, #2
    1690:	4399      	bics	r1, r3
    1692:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    1694:	3001      	adds	r0, #1
    1696:	4b0c      	ldr	r3, [pc, #48]	; (16c8 <chip_sleep+0x64>)
    1698:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    169a:	2800      	cmp	r0, #0
    169c:	d108      	bne.n	16b0 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    169e:	a901      	add	r1, sp, #4
    16a0:	200b      	movs	r0, #11
    16a2:	4b08      	ldr	r3, [pc, #32]	; (16c4 <chip_sleep+0x60>)
    16a4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16a6:	2800      	cmp	r0, #0
    16a8:	d102      	bne.n	16b0 <chip_sleep+0x4c>
	if(reg & NBIT0)
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	07cb      	lsls	r3, r1, #31
    16ae:	d401      	bmi.n	16b4 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    16b0:	b003      	add	sp, #12
    16b2:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    16b4:	2301      	movs	r3, #1
    16b6:	4399      	bics	r1, r3
    16b8:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    16ba:	300b      	adds	r0, #11
    16bc:	4b02      	ldr	r3, [pc, #8]	; (16c8 <chip_sleep+0x64>)
    16be:	4798      	blx	r3
    16c0:	e7f6      	b.n	16b0 <chip_sleep+0x4c>
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	000019e5 	.word	0x000019e5
    16c8:	000019f1 	.word	0x000019f1

000016cc <chip_wake>:
sint8 chip_wake(void)
{
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    16d0:	2300      	movs	r3, #0
    16d2:	9301      	str	r3, [sp, #4]
    16d4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    16d6:	a901      	add	r1, sp, #4
    16d8:	200b      	movs	r0, #11
    16da:	4b28      	ldr	r3, [pc, #160]	; (177c <chip_wake+0xb0>)
    16dc:	4798      	blx	r3
    16de:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    16e0:	d130      	bne.n	1744 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    16e2:	9901      	ldr	r1, [sp, #4]
    16e4:	07cb      	lsls	r3, r1, #31
    16e6:	d406      	bmi.n	16f6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    16e8:	2301      	movs	r3, #1
    16ea:	4319      	orrs	r1, r3
    16ec:	200b      	movs	r0, #11
    16ee:	4b24      	ldr	r3, [pc, #144]	; (1780 <chip_wake+0xb4>)
    16f0:	4798      	blx	r3
    16f2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    16f4:	d126      	bne.n	1744 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    16f6:	a901      	add	r1, sp, #4
    16f8:	2001      	movs	r0, #1
    16fa:	4b20      	ldr	r3, [pc, #128]	; (177c <chip_wake+0xb0>)
    16fc:	4798      	blx	r3
    16fe:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1700:	d120      	bne.n	1744 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    1702:	9901      	ldr	r1, [sp, #4]
    1704:	078b      	lsls	r3, r1, #30
    1706:	d520      	bpl.n	174a <chip_wake+0x7e>
{
    1708:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    170a:	4f1c      	ldr	r7, [pc, #112]	; (177c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    170c:	4e1d      	ldr	r6, [pc, #116]	; (1784 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    170e:	4669      	mov	r1, sp
    1710:	200f      	movs	r0, #15
    1712:	47b8      	blx	r7
    1714:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    1716:	d120      	bne.n	175a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    1718:	9b00      	ldr	r3, [sp, #0]
    171a:	075b      	lsls	r3, r3, #29
    171c:	d42b      	bmi.n	1776 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    171e:	2002      	movs	r0, #2
    1720:	47b0      	blx	r6
    1722:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    1724:	2d00      	cmp	r5, #0
    1726:	d1f2      	bne.n	170e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    1728:	22af      	movs	r2, #175	; 0xaf
    172a:	0052      	lsls	r2, r2, #1
    172c:	4916      	ldr	r1, [pc, #88]	; (1788 <chip_wake+0xbc>)
    172e:	4817      	ldr	r0, [pc, #92]	; (178c <chip_wake+0xc0>)
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <chip_wake+0xc4>)
    1732:	4798      	blx	r3
    1734:	4817      	ldr	r0, [pc, #92]	; (1794 <chip_wake+0xc8>)
    1736:	4b18      	ldr	r3, [pc, #96]	; (1798 <chip_wake+0xcc>)
    1738:	4798      	blx	r3
    173a:	200d      	movs	r0, #13
    173c:	4b17      	ldr	r3, [pc, #92]	; (179c <chip_wake+0xd0>)
    173e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    1740:	2404      	movs	r4, #4
    1742:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    1744:	0020      	movs	r0, r4
    1746:	b003      	add	sp, #12
    1748:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    174a:	2302      	movs	r3, #2
    174c:	4319      	orrs	r1, r3
    174e:	2001      	movs	r0, #1
    1750:	4b0b      	ldr	r3, [pc, #44]	; (1780 <chip_wake+0xb4>)
    1752:	4798      	blx	r3
    1754:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    1756:	d0d7      	beq.n	1708 <chip_wake+0x3c>
    1758:	e7f4      	b.n	1744 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    175a:	22aa      	movs	r2, #170	; 0xaa
    175c:	0052      	lsls	r2, r2, #1
    175e:	490a      	ldr	r1, [pc, #40]	; (1788 <chip_wake+0xbc>)
    1760:	480a      	ldr	r0, [pc, #40]	; (178c <chip_wake+0xc0>)
    1762:	4d0b      	ldr	r5, [pc, #44]	; (1790 <chip_wake+0xc4>)
    1764:	47a8      	blx	r5
    1766:	9a00      	ldr	r2, [sp, #0]
    1768:	0021      	movs	r1, r4
    176a:	480d      	ldr	r0, [pc, #52]	; (17a0 <chip_wake+0xd4>)
    176c:	47a8      	blx	r5
    176e:	200d      	movs	r0, #13
    1770:	4b0a      	ldr	r3, [pc, #40]	; (179c <chip_wake+0xd0>)
    1772:	4798      	blx	r3
			goto _WAKE_EXIT;
    1774:	e7e6      	b.n	1744 <chip_wake+0x78>
	nm_bus_reset();
    1776:	4b0b      	ldr	r3, [pc, #44]	; (17a4 <chip_wake+0xd8>)
    1778:	4798      	blx	r3
    177a:	e7e3      	b.n	1744 <chip_wake+0x78>
    177c:	000019e5 	.word	0x000019e5
    1780:	000019f1 	.word	0x000019f1
    1784:	00000195 	.word	0x00000195
    1788:	00009464 	.word	0x00009464
    178c:	00008f24 	.word	0x00008f24
    1790:	00006efd 	.word	0x00006efd
    1794:	000094ac 	.word	0x000094ac
    1798:	00007019 	.word	0x00007019
    179c:	00006f31 	.word	0x00006f31
    17a0:	00009494 	.word	0x00009494
    17a4:	000019cd 	.word	0x000019cd

000017a8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    17a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17aa:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17ac:	4d2d      	ldr	r5, [pc, #180]	; (1864 <wait_for_bootrom+0xbc>)
    17ae:	4c2e      	ldr	r4, [pc, #184]	; (1868 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    17b0:	4e2e      	ldr	r6, [pc, #184]	; (186c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17b2:	0028      	movs	r0, r5
    17b4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    17b6:	2800      	cmp	r0, #0
    17b8:	db02      	blt.n	17c0 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    17ba:	2001      	movs	r0, #1
    17bc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17be:	e7f8      	b.n	17b2 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    17c0:	482b      	ldr	r0, [pc, #172]	; (1870 <wait_for_bootrom+0xc8>)
    17c2:	4b29      	ldr	r3, [pc, #164]	; (1868 <wait_for_bootrom+0xc0>)
    17c4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    17c6:	07c3      	lsls	r3, r0, #31
    17c8:	d409      	bmi.n	17de <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    17ca:	4e28      	ldr	r6, [pc, #160]	; (186c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    17cc:	4c29      	ldr	r4, [pc, #164]	; (1874 <wait_for_bootrom+0xcc>)
    17ce:	4d26      	ldr	r5, [pc, #152]	; (1868 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    17d0:	2001      	movs	r0, #1
    17d2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    17d4:	0020      	movs	r0, r4
    17d6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    17d8:	4b27      	ldr	r3, [pc, #156]	; (1878 <wait_for_bootrom+0xd0>)
    17da:	4298      	cmp	r0, r3
    17dc:	d1f8      	bne.n	17d0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    17de:	2f02      	cmp	r7, #2
    17e0:	d021      	beq.n	1826 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    17e2:	2f03      	cmp	r7, #3
    17e4:	d029      	beq.n	183a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    17e6:	2f04      	cmp	r7, #4
    17e8:	d030      	beq.n	184c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    17ea:	4924      	ldr	r1, [pc, #144]	; (187c <wait_for_bootrom+0xd4>)
    17ec:	4824      	ldr	r0, [pc, #144]	; (1880 <wait_for_bootrom+0xd8>)
    17ee:	4b25      	ldr	r3, [pc, #148]	; (1884 <wait_for_bootrom+0xdc>)
    17f0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    17f2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    17f4:	4b24      	ldr	r3, [pc, #144]	; (1888 <wait_for_bootrom+0xe0>)
    17f6:	4798      	blx	r3
    17f8:	0500      	lsls	r0, r0, #20
    17fa:	0d00      	lsrs	r0, r0, #20
    17fc:	4b23      	ldr	r3, [pc, #140]	; (188c <wait_for_bootrom+0xe4>)
    17fe:	4298      	cmp	r0, r3
    1800:	d82a      	bhi.n	1858 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    1802:	0020      	movs	r0, r4
    1804:	4b22      	ldr	r3, [pc, #136]	; (1890 <wait_for_bootrom+0xe8>)
    1806:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    1808:	4822      	ldr	r0, [pc, #136]	; (1894 <wait_for_bootrom+0xec>)
    180a:	4c23      	ldr	r4, [pc, #140]	; (1898 <wait_for_bootrom+0xf0>)
    180c:	47a0      	blx	r4
    180e:	491b      	ldr	r1, [pc, #108]	; (187c <wait_for_bootrom+0xd4>)
    1810:	4822      	ldr	r0, [pc, #136]	; (189c <wait_for_bootrom+0xf4>)
    1812:	47a0      	blx	r4
    1814:	200d      	movs	r0, #13
    1816:	4b22      	ldr	r3, [pc, #136]	; (18a0 <wait_for_bootrom+0xf8>)
    1818:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    181a:	4922      	ldr	r1, [pc, #136]	; (18a4 <wait_for_bootrom+0xfc>)
    181c:	4815      	ldr	r0, [pc, #84]	; (1874 <wait_for_bootrom+0xcc>)
    181e:	4b19      	ldr	r3, [pc, #100]	; (1884 <wait_for_bootrom+0xdc>)
    1820:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    1822:	2000      	movs	r0, #0
    1824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1826:	4920      	ldr	r1, [pc, #128]	; (18a8 <wait_for_bootrom+0x100>)
    1828:	4820      	ldr	r0, [pc, #128]	; (18ac <wait_for_bootrom+0x104>)
    182a:	4c16      	ldr	r4, [pc, #88]	; (1884 <wait_for_bootrom+0xdc>)
    182c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    182e:	2180      	movs	r1, #128	; 0x80
    1830:	0349      	lsls	r1, r1, #13
    1832:	4813      	ldr	r0, [pc, #76]	; (1880 <wait_for_bootrom+0xd8>)
    1834:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    1836:	2400      	movs	r4, #0
    1838:	e7dc      	b.n	17f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    183a:	491b      	ldr	r1, [pc, #108]	; (18a8 <wait_for_bootrom+0x100>)
    183c:	481b      	ldr	r0, [pc, #108]	; (18ac <wait_for_bootrom+0x104>)
    183e:	4c11      	ldr	r4, [pc, #68]	; (1884 <wait_for_bootrom+0xdc>)
    1840:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    1842:	2100      	movs	r1, #0
    1844:	480e      	ldr	r0, [pc, #56]	; (1880 <wait_for_bootrom+0xd8>)
    1846:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    1848:	2400      	movs	r4, #0
    184a:	e7d3      	b.n	17f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    184c:	490b      	ldr	r1, [pc, #44]	; (187c <wait_for_bootrom+0xd4>)
    184e:	480c      	ldr	r0, [pc, #48]	; (1880 <wait_for_bootrom+0xd8>)
    1850:	4b0c      	ldr	r3, [pc, #48]	; (1884 <wait_for_bootrom+0xdc>)
    1852:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1854:	2480      	movs	r4, #128	; 0x80
    1856:	e7cd      	b.n	17f4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    1858:	2002      	movs	r0, #2
    185a:	4320      	orrs	r0, r4
    185c:	4b0c      	ldr	r3, [pc, #48]	; (1890 <wait_for_bootrom+0xe8>)
    185e:	4798      	blx	r3
    1860:	e7d2      	b.n	1808 <wait_for_bootrom+0x60>
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	00001014 	.word	0x00001014
    1868:	000019d9 	.word	0x000019d9
    186c:	00000195 	.word	0x00000195
    1870:	000207bc 	.word	0x000207bc
    1874:	000c000c 	.word	0x000c000c
    1878:	10add09e 	.word	0x10add09e
    187c:	13521352 	.word	0x13521352
    1880:	0000108c 	.word	0x0000108c
    1884:	000019f1 	.word	0x000019f1
    1888:	00001595 	.word	0x00001595
    188c:	0000039f 	.word	0x0000039f
    1890:	00001501 	.word	0x00001501
    1894:	00009254 	.word	0x00009254
    1898:	00006efd 	.word	0x00006efd
    189c:	000094c8 	.word	0x000094c8
    18a0:	00006f31 	.word	0x00006f31
    18a4:	ef522f61 	.word	0xef522f61
    18a8:	3c1cd57d 	.word	0x3c1cd57d
    18ac:	000207ac 	.word	0x000207ac

000018b0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    18b0:	b570      	push	{r4, r5, r6, lr}
    18b2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    18b4:	4b15      	ldr	r3, [pc, #84]	; (190c <wait_for_firmware_start+0x5c>)
    18b6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    18b8:	4b15      	ldr	r3, [pc, #84]	; (1910 <wait_for_firmware_start+0x60>)
    18ba:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    18bc:	3802      	subs	r0, #2
    18be:	2801      	cmp	r0, #1
    18c0:	d911      	bls.n	18e6 <wait_for_firmware_start+0x36>
{
    18c2:	2401      	movs	r4, #1
    18c4:	4264      	negs	r4, r4
    18c6:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    18c8:	4e12      	ldr	r6, [pc, #72]	; (1914 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    18ca:	4d13      	ldr	r5, [pc, #76]	; (1918 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    18cc:	9b00      	ldr	r3, [sp, #0]
    18ce:	4298      	cmp	r0, r3
    18d0:	d00e      	beq.n	18f0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    18d2:	2002      	movs	r0, #2
    18d4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    18d6:	9801      	ldr	r0, [sp, #4]
    18d8:	47a8      	blx	r5
    18da:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    18dc:	2c00      	cmp	r4, #0
    18de:	d1f5      	bne.n	18cc <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    18e0:	2005      	movs	r0, #5
    18e2:	4240      	negs	r0, r0
    18e4:	e009      	b.n	18fa <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    18e6:	4b0d      	ldr	r3, [pc, #52]	; (191c <wait_for_firmware_start+0x6c>)
    18e8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    18ea:	4b0d      	ldr	r3, [pc, #52]	; (1920 <wait_for_firmware_start+0x70>)
    18ec:	9300      	str	r3, [sp, #0]
    18ee:	e7e8      	b.n	18c2 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    18f0:	9a00      	ldr	r2, [sp, #0]
    18f2:	4b07      	ldr	r3, [pc, #28]	; (1910 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    18f4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    18f6:	429a      	cmp	r2, r3
    18f8:	d001      	beq.n	18fe <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    18fa:	b002      	add	sp, #8
    18fc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    18fe:	2100      	movs	r1, #0
    1900:	4802      	ldr	r0, [pc, #8]	; (190c <wait_for_firmware_start+0x5c>)
    1902:	4b08      	ldr	r3, [pc, #32]	; (1924 <wait_for_firmware_start+0x74>)
    1904:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    1906:	2000      	movs	r0, #0
    1908:	e7f7      	b.n	18fa <wait_for_firmware_start+0x4a>
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	0000108c 	.word	0x0000108c
    1910:	02532636 	.word	0x02532636
    1914:	00000195 	.word	0x00000195
    1918:	000019d9 	.word	0x000019d9
    191c:	000207ac 	.word	0x000207ac
    1920:	d75dc1c3 	.word	0xd75dc1c3
    1924:	000019f1 	.word	0x000019f1

00001928 <chip_deinit>:

sint8 chip_deinit(void)
{
    1928:	b510      	push	{r4, lr}
    192a:	b082      	sub	sp, #8
	uint32 reg = 0;
    192c:	2300      	movs	r3, #0
    192e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1930:	a901      	add	r1, sp, #4
    1932:	20a0      	movs	r0, #160	; 0xa0
    1934:	0140      	lsls	r0, r0, #5
    1936:	4b14      	ldr	r3, [pc, #80]	; (1988 <chip_deinit+0x60>)
    1938:	4798      	blx	r3
    193a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    193c:	d115      	bne.n	196a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    193e:	4913      	ldr	r1, [pc, #76]	; (198c <chip_deinit+0x64>)
    1940:	9b01      	ldr	r3, [sp, #4]
    1942:	4019      	ands	r1, r3
    1944:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1946:	20a0      	movs	r0, #160	; 0xa0
    1948:	0140      	lsls	r0, r0, #5
    194a:	4b11      	ldr	r3, [pc, #68]	; (1990 <chip_deinit+0x68>)
    194c:	4798      	blx	r3
    194e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1950:	d016      	beq.n	1980 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    1952:	4a10      	ldr	r2, [pc, #64]	; (1994 <chip_deinit+0x6c>)
    1954:	4910      	ldr	r1, [pc, #64]	; (1998 <chip_deinit+0x70>)
    1956:	4811      	ldr	r0, [pc, #68]	; (199c <chip_deinit+0x74>)
    1958:	4b11      	ldr	r3, [pc, #68]	; (19a0 <chip_deinit+0x78>)
    195a:	4798      	blx	r3
    195c:	4811      	ldr	r0, [pc, #68]	; (19a4 <chip_deinit+0x7c>)
    195e:	4b12      	ldr	r3, [pc, #72]	; (19a8 <chip_deinit+0x80>)
    1960:	4798      	blx	r3
    1962:	200d      	movs	r0, #13
    1964:	4b11      	ldr	r3, [pc, #68]	; (19ac <chip_deinit+0x84>)
    1966:	4798      	blx	r3
		goto ERR1;
    1968:	e00a      	b.n	1980 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    196a:	4a11      	ldr	r2, [pc, #68]	; (19b0 <chip_deinit+0x88>)
    196c:	490a      	ldr	r1, [pc, #40]	; (1998 <chip_deinit+0x70>)
    196e:	480b      	ldr	r0, [pc, #44]	; (199c <chip_deinit+0x74>)
    1970:	4b0b      	ldr	r3, [pc, #44]	; (19a0 <chip_deinit+0x78>)
    1972:	4798      	blx	r3
    1974:	480b      	ldr	r0, [pc, #44]	; (19a4 <chip_deinit+0x7c>)
    1976:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <chip_deinit+0x80>)
    1978:	4798      	blx	r3
    197a:	200d      	movs	r0, #13
    197c:	4b0b      	ldr	r3, [pc, #44]	; (19ac <chip_deinit+0x84>)
    197e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1980:	0020      	movs	r0, r4
    1982:	b002      	add	sp, #8
    1984:	bd10      	pop	{r4, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000019e5 	.word	0x000019e5
    198c:	fffffbff 	.word	0xfffffbff
    1990:	000019f1 	.word	0x000019f1
    1994:	0000020b 	.word	0x0000020b
    1998:	00009470 	.word	0x00009470
    199c:	00008f24 	.word	0x00008f24
    19a0:	00006efd 	.word	0x00006efd
    19a4:	0000947c 	.word	0x0000947c
    19a8:	00007019 	.word	0x00007019
    19ac:	00006f31 	.word	0x00006f31
    19b0:	00000205 	.word	0x00000205

000019b4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    19b4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    19b6:	4b01      	ldr	r3, [pc, #4]	; (19bc <nm_bus_iface_init+0x8>)
    19b8:	4798      	blx	r3
	return ret;
}
    19ba:	bd10      	pop	{r4, pc}
    19bc:	000002cd 	.word	0x000002cd

000019c0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    19c0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    19c2:	4b01      	ldr	r3, [pc, #4]	; (19c8 <nm_bus_iface_deinit+0x8>)
    19c4:	4798      	blx	r3

	return ret;
}
    19c6:	bd10      	pop	{r4, pc}
    19c8:	0000051d 	.word	0x0000051d

000019cc <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    19cc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    19ce:	4b01      	ldr	r3, [pc, #4]	; (19d4 <nm_bus_reset+0x8>)
    19d0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    19d2:	bd10      	pop	{r4, pc}
    19d4:	0000237d 	.word	0x0000237d

000019d8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    19d8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    19da:	4b01      	ldr	r3, [pc, #4]	; (19e0 <nm_read_reg+0x8>)
    19dc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    19de:	bd10      	pop	{r4, pc}
    19e0:	000023b5 	.word	0x000023b5

000019e4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    19e4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    19e6:	4b01      	ldr	r3, [pc, #4]	; (19ec <nm_read_reg_with_ret+0x8>)
    19e8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    19ea:	bd10      	pop	{r4, pc}
    19ec:	000023c9 	.word	0x000023c9

000019f0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    19f0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    19f2:	4b01      	ldr	r3, [pc, #4]	; (19f8 <nm_write_reg+0x8>)
    19f4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    19f6:	bd10      	pop	{r4, pc}
    19f8:	000023e1 	.word	0x000023e1

000019fc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fe:	46d6      	mov	lr, sl
    1a00:	464f      	mov	r7, r9
    1a02:	4646      	mov	r6, r8
    1a04:	b5c0      	push	{r6, r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	4680      	mov	r8, r0
    1a0a:	4689      	mov	r9, r1
    1a0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a0e:	4b13      	ldr	r3, [pc, #76]	; (1a5c <nm_read_block+0x60>)
    1a10:	881f      	ldrh	r7, [r3, #0]
    1a12:	3f08      	subs	r7, #8
    1a14:	b2bb      	uxth	r3, r7
    1a16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a18:	001e      	movs	r6, r3
    1a1a:	0004      	movs	r4, r0
    1a1c:	429a      	cmp	r2, r3
    1a1e:	d91a      	bls.n	1a56 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a20:	4b0f      	ldr	r3, [pc, #60]	; (1a60 <nm_read_block+0x64>)
    1a22:	469a      	mov	sl, r3
    1a24:	1a37      	subs	r7, r6, r0
    1a26:	4643      	mov	r3, r8
    1a28:	1ae1      	subs	r1, r4, r3
    1a2a:	4449      	add	r1, r9
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	0020      	movs	r0, r4
    1a30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a32:	2800      	cmp	r0, #0
    1a34:	d109      	bne.n	1a4a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a36:	1bad      	subs	r5, r5, r6
    1a38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a3c:	42b5      	cmp	r5, r6
    1a3e:	d8f2      	bhi.n	1a26 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a42:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a44:	0020      	movs	r0, r4
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <nm_read_block+0x64>)
    1a48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a4a:	b002      	add	sp, #8
    1a4c:	bc1c      	pop	{r2, r3, r4}
    1a4e:	4690      	mov	r8, r2
    1a50:	4699      	mov	r9, r3
    1a52:	46a2      	mov	sl, r4
    1a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a56:	2100      	movs	r1, #0
    1a58:	e7f2      	b.n	1a40 <nm_read_block+0x44>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20000008 	.word	0x20000008
    1a60:	00002525 	.word	0x00002525

00001a64 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a66:	46d6      	mov	lr, sl
    1a68:	464f      	mov	r7, r9
    1a6a:	4646      	mov	r6, r8
    1a6c:	b5c0      	push	{r6, r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	4680      	mov	r8, r0
    1a72:	4689      	mov	r9, r1
    1a74:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a76:	4b13      	ldr	r3, [pc, #76]	; (1ac4 <nm_write_block+0x60>)
    1a78:	881f      	ldrh	r7, [r3, #0]
    1a7a:	3f08      	subs	r7, #8
    1a7c:	b2bb      	uxth	r3, r7
    1a7e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a80:	001e      	movs	r6, r3
    1a82:	0004      	movs	r4, r0
    1a84:	429a      	cmp	r2, r3
    1a86:	d91a      	bls.n	1abe <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a88:	4b0f      	ldr	r3, [pc, #60]	; (1ac8 <nm_write_block+0x64>)
    1a8a:	469a      	mov	sl, r3
    1a8c:	1a37      	subs	r7, r6, r0
    1a8e:	4643      	mov	r3, r8
    1a90:	1ae1      	subs	r1, r4, r3
    1a92:	4449      	add	r1, r9
    1a94:	9a01      	ldr	r2, [sp, #4]
    1a96:	0020      	movs	r0, r4
    1a98:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a9a:	2800      	cmp	r0, #0
    1a9c:	d109      	bne.n	1ab2 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a9e:	1bad      	subs	r5, r5, r6
    1aa0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1aa2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1aa4:	42b5      	cmp	r5, r6
    1aa6:	d8f2      	bhi.n	1a8e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1aa8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1aaa:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1aac:	0020      	movs	r0, r4
    1aae:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <nm_write_block+0x64>)
    1ab0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1ab2:	b002      	add	sp, #8
    1ab4:	bc1c      	pop	{r2, r3, r4}
    1ab6:	4690      	mov	r8, r2
    1ab8:	4699      	mov	r9, r3
    1aba:	46a2      	mov	sl, r4
    1abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1abe:	2100      	movs	r1, #0
    1ac0:	e7f2      	b.n	1aa8 <nm_write_block+0x44>
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	20000008 	.word	0x20000008
    1ac8:	00002681 	.word	0x00002681

00001acc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1acc:	b570      	push	{r4, r5, r6, lr}
    1ace:	b084      	sub	sp, #16
    1ad0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1ad2:	2300      	movs	r3, #0
    1ad4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1ad6:	2208      	movs	r2, #8
    1ad8:	2100      	movs	r1, #0
    1ada:	a801      	add	r0, sp, #4
    1adc:	4b2d      	ldr	r3, [pc, #180]	; (1b94 <nm_get_firmware_full_info+0xc8>)
    1ade:	4798      	blx	r3
	if (pstrRev != NULL)
    1ae0:	2c00      	cmp	r4, #0
    1ae2:	d044      	beq.n	1b6e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1ae4:	2228      	movs	r2, #40	; 0x28
    1ae6:	2100      	movs	r1, #0
    1ae8:	0020      	movs	r0, r4
    1aea:	4b2b      	ldr	r3, [pc, #172]	; (1b98 <nm_get_firmware_full_info+0xcc>)
    1aec:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1aee:	a903      	add	r1, sp, #12
    1af0:	482a      	ldr	r0, [pc, #168]	; (1b9c <nm_get_firmware_full_info+0xd0>)
    1af2:	4b2b      	ldr	r3, [pc, #172]	; (1ba0 <nm_get_firmware_full_info+0xd4>)
    1af4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1af6:	2800      	cmp	r0, #0
    1af8:	d13a      	bne.n	1b70 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1afa:	9b03      	ldr	r3, [sp, #12]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d039      	beq.n	1b74 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1b00:	20c0      	movs	r0, #192	; 0xc0
    1b02:	0280      	lsls	r0, r0, #10
    1b04:	4318      	orrs	r0, r3
    1b06:	2208      	movs	r2, #8
    1b08:	a901      	add	r1, sp, #4
    1b0a:	4b26      	ldr	r3, [pc, #152]	; (1ba4 <nm_get_firmware_full_info+0xd8>)
    1b0c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1b0e:	2800      	cmp	r0, #0
    1b10:	d12e      	bne.n	1b70 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1b12:	9b02      	ldr	r3, [sp, #8]
    1b14:	0418      	lsls	r0, r3, #16
    1b16:	0c00      	lsrs	r0, r0, #16
    1b18:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1b1a:	d02e      	beq.n	1b7a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1b1c:	23c0      	movs	r3, #192	; 0xc0
    1b1e:	029b      	lsls	r3, r3, #10
    1b20:	4318      	orrs	r0, r3
    1b22:	2228      	movs	r2, #40	; 0x28
    1b24:	0021      	movs	r1, r4
    1b26:	4b1f      	ldr	r3, [pc, #124]	; (1ba4 <nm_get_firmware_full_info+0xd8>)
    1b28:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1b2a:	2800      	cmp	r0, #0
    1b2c:	d120      	bne.n	1b70 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1b2e:	7921      	ldrb	r1, [r4, #4]
    1b30:	0209      	lsls	r1, r1, #8
    1b32:	79a2      	ldrb	r2, [r4, #6]
    1b34:	230f      	movs	r3, #15
    1b36:	401a      	ands	r2, r3
    1b38:	430a      	orrs	r2, r1
    1b3a:	7961      	ldrb	r1, [r4, #5]
    1b3c:	0109      	lsls	r1, r1, #4
    1b3e:	25ff      	movs	r5, #255	; 0xff
    1b40:	4029      	ands	r1, r5
    1b42:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1b44:	79e1      	ldrb	r1, [r4, #7]
    1b46:	0209      	lsls	r1, r1, #8
    1b48:	7a66      	ldrb	r6, [r4, #9]
    1b4a:	4033      	ands	r3, r6
    1b4c:	430b      	orrs	r3, r1
    1b4e:	7a21      	ldrb	r1, [r4, #8]
    1b50:	0109      	lsls	r1, r1, #4
    1b52:	400d      	ands	r5, r1
    1b54:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1b56:	2a00      	cmp	r2, #0
    1b58:	d012      	beq.n	1b80 <nm_get_firmware_full_info+0xb4>
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d013      	beq.n	1b86 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1b5e:	4912      	ldr	r1, [pc, #72]	; (1ba8 <nm_get_firmware_full_info+0xdc>)
    1b60:	428b      	cmp	r3, r1
    1b62:	d813      	bhi.n	1b8c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1b64:	4b11      	ldr	r3, [pc, #68]	; (1bac <nm_get_firmware_full_info+0xe0>)
    1b66:	429a      	cmp	r2, r3
    1b68:	d802      	bhi.n	1b70 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b6a:	380d      	subs	r0, #13
    1b6c:	e000      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1b6e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1b70:	b004      	add	sp, #16
    1b72:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1b74:	200c      	movs	r0, #12
    1b76:	4240      	negs	r0, r0
    1b78:	e7fa      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1b7a:	200c      	movs	r0, #12
    1b7c:	4240      	negs	r0, r0
    1b7e:	e7f7      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1b80:	200c      	movs	r0, #12
    1b82:	4240      	negs	r0, r0
    1b84:	e7f4      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
    1b86:	200c      	movs	r0, #12
    1b88:	4240      	negs	r0, r0
    1b8a:	e7f1      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b8c:	200d      	movs	r0, #13
    1b8e:	4240      	negs	r0, r0
    1b90:	e7ee      	b.n	1b70 <nm_get_firmware_full_info+0xa4>
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	00006d9b 	.word	0x00006d9b
    1b98:	0000059d 	.word	0x0000059d
    1b9c:	000c0008 	.word	0x000c0008
    1ba0:	000019e5 	.word	0x000019e5
    1ba4:	000019fd 	.word	0x000019fd
    1ba8:	00001352 	.word	0x00001352
    1bac:	00001351 	.word	0x00001351

00001bb0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1bb0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1bb2:	2800      	cmp	r0, #0
    1bb4:	d037      	beq.n	1c26 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    1bb6:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1bb8:	1e6b      	subs	r3, r5, #1
    1bba:	2b03      	cmp	r3, #3
    1bbc:	d900      	bls.n	1bc0 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1bbe:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1bc0:	2000      	movs	r0, #0
    1bc2:	4b20      	ldr	r3, [pc, #128]	; (1c44 <nm_drv_init+0x94>)
    1bc4:	4798      	blx	r3
    1bc6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bc8:	d12f      	bne.n	1c2a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1bca:	481f      	ldr	r0, [pc, #124]	; (1c48 <nm_drv_init+0x98>)
    1bcc:	4c1f      	ldr	r4, [pc, #124]	; (1c4c <nm_drv_init+0x9c>)
    1bce:	47a0      	blx	r4
    1bd0:	4b1f      	ldr	r3, [pc, #124]	; (1c50 <nm_drv_init+0xa0>)
    1bd2:	4798      	blx	r3
    1bd4:	0001      	movs	r1, r0
    1bd6:	481f      	ldr	r0, [pc, #124]	; (1c54 <nm_drv_init+0xa4>)
    1bd8:	47a0      	blx	r4
    1bda:	200d      	movs	r0, #13
    1bdc:	4b1e      	ldr	r3, [pc, #120]	; (1c58 <nm_drv_init+0xa8>)
    1bde:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1be0:	4b1e      	ldr	r3, [pc, #120]	; (1c5c <nm_drv_init+0xac>)
    1be2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1be4:	0028      	movs	r0, r5
    1be6:	4b1e      	ldr	r3, [pc, #120]	; (1c60 <nm_drv_init+0xb0>)
    1be8:	4798      	blx	r3
    1bea:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bec:	d117      	bne.n	1c1e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1bee:	0028      	movs	r0, r5
    1bf0:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <nm_drv_init+0xb4>)
    1bf2:	4798      	blx	r3
    1bf4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bf6:	d112      	bne.n	1c1e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1bf8:	3d02      	subs	r5, #2
    1bfa:	2d01      	cmp	r5, #1
    1bfc:	d911      	bls.n	1c22 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1bfe:	4b1a      	ldr	r3, [pc, #104]	; (1c68 <nm_drv_init+0xb8>)
    1c00:	4798      	blx	r3
    1c02:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c04:	d00d      	beq.n	1c22 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    1c06:	2256      	movs	r2, #86	; 0x56
    1c08:	32ff      	adds	r2, #255	; 0xff
    1c0a:	4918      	ldr	r1, [pc, #96]	; (1c6c <nm_drv_init+0xbc>)
    1c0c:	4818      	ldr	r0, [pc, #96]	; (1c70 <nm_drv_init+0xc0>)
    1c0e:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <nm_drv_init+0x9c>)
    1c10:	4798      	blx	r3
    1c12:	4818      	ldr	r0, [pc, #96]	; (1c74 <nm_drv_init+0xc4>)
    1c14:	4b18      	ldr	r3, [pc, #96]	; (1c78 <nm_drv_init+0xc8>)
    1c16:	4798      	blx	r3
    1c18:	200d      	movs	r0, #13
    1c1a:	4b0f      	ldr	r3, [pc, #60]	; (1c58 <nm_drv_init+0xa8>)
    1c1c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1c1e:	4b17      	ldr	r3, [pc, #92]	; (1c7c <nm_drv_init+0xcc>)
    1c20:	4798      	blx	r3
ERR1:
	return ret;
}
    1c22:	0020      	movs	r0, r4
    1c24:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1c26:	2501      	movs	r5, #1
    1c28:	e7ca      	b.n	1bc0 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c2a:	2228      	movs	r2, #40	; 0x28
    1c2c:	32ff      	adds	r2, #255	; 0xff
    1c2e:	490f      	ldr	r1, [pc, #60]	; (1c6c <nm_drv_init+0xbc>)
    1c30:	480f      	ldr	r0, [pc, #60]	; (1c70 <nm_drv_init+0xc0>)
    1c32:	4b06      	ldr	r3, [pc, #24]	; (1c4c <nm_drv_init+0x9c>)
    1c34:	4798      	blx	r3
    1c36:	4812      	ldr	r0, [pc, #72]	; (1c80 <nm_drv_init+0xd0>)
    1c38:	4b0f      	ldr	r3, [pc, #60]	; (1c78 <nm_drv_init+0xc8>)
    1c3a:	4798      	blx	r3
    1c3c:	200d      	movs	r0, #13
    1c3e:	4b06      	ldr	r3, [pc, #24]	; (1c58 <nm_drv_init+0xa8>)
    1c40:	4798      	blx	r3
		goto ERR1;
    1c42:	e7ee      	b.n	1c22 <nm_drv_init+0x72>
    1c44:	000019b5 	.word	0x000019b5
    1c48:	00009254 	.word	0x00009254
    1c4c:	00006efd 	.word	0x00006efd
    1c50:	00001595 	.word	0x00001595
    1c54:	00009598 	.word	0x00009598
    1c58:	00006f31 	.word	0x00006f31
    1c5c:	000023f9 	.word	0x000023f9
    1c60:	000017a9 	.word	0x000017a9
    1c64:	000018b1 	.word	0x000018b1
    1c68:	00001539 	.word	0x00001539
    1c6c:	000094e0 	.word	0x000094e0
    1c70:	00008f24 	.word	0x00008f24
    1c74:	0000955c 	.word	0x0000955c
    1c78:	00007019 	.word	0x00007019
    1c7c:	000019c1 	.word	0x000019c1
    1c80:	0000957c 	.word	0x0000957c

00001c84 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c84:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c86:	4b1c      	ldr	r3, [pc, #112]	; (1cf8 <nm_drv_deinit+0x74>)
    1c88:	4798      	blx	r3
    1c8a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c8c:	d10b      	bne.n	1ca6 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c8e:	2000      	movs	r0, #0
    1c90:	4b1a      	ldr	r3, [pc, #104]	; (1cfc <nm_drv_deinit+0x78>)
    1c92:	4798      	blx	r3
    1c94:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c96:	d114      	bne.n	1cc2 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c98:	4b19      	ldr	r3, [pc, #100]	; (1d00 <nm_drv_deinit+0x7c>)
    1c9a:	4798      	blx	r3
    1c9c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c9e:	d11d      	bne.n	1cdc <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1ca0:	4b18      	ldr	r3, [pc, #96]	; (1d04 <nm_drv_deinit+0x80>)
    1ca2:	4798      	blx	r3
    1ca4:	e00b      	b.n	1cbe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1ca6:	22b6      	movs	r2, #182	; 0xb6
    1ca8:	0052      	lsls	r2, r2, #1
    1caa:	4917      	ldr	r1, [pc, #92]	; (1d08 <nm_drv_deinit+0x84>)
    1cac:	4817      	ldr	r0, [pc, #92]	; (1d0c <nm_drv_deinit+0x88>)
    1cae:	4b18      	ldr	r3, [pc, #96]	; (1d10 <nm_drv_deinit+0x8c>)
    1cb0:	4798      	blx	r3
    1cb2:	4818      	ldr	r0, [pc, #96]	; (1d14 <nm_drv_deinit+0x90>)
    1cb4:	4b18      	ldr	r3, [pc, #96]	; (1d18 <nm_drv_deinit+0x94>)
    1cb6:	4798      	blx	r3
    1cb8:	200d      	movs	r0, #13
    1cba:	4b18      	ldr	r3, [pc, #96]	; (1d1c <nm_drv_deinit+0x98>)
    1cbc:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1cbe:	0020      	movs	r0, r4
    1cc0:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1cc2:	2274      	movs	r2, #116	; 0x74
    1cc4:	32ff      	adds	r2, #255	; 0xff
    1cc6:	4910      	ldr	r1, [pc, #64]	; (1d08 <nm_drv_deinit+0x84>)
    1cc8:	4810      	ldr	r0, [pc, #64]	; (1d0c <nm_drv_deinit+0x88>)
    1cca:	4b11      	ldr	r3, [pc, #68]	; (1d10 <nm_drv_deinit+0x8c>)
    1ccc:	4798      	blx	r3
    1cce:	4814      	ldr	r0, [pc, #80]	; (1d20 <nm_drv_deinit+0x9c>)
    1cd0:	4b11      	ldr	r3, [pc, #68]	; (1d18 <nm_drv_deinit+0x94>)
    1cd2:	4798      	blx	r3
    1cd4:	200d      	movs	r0, #13
    1cd6:	4b11      	ldr	r3, [pc, #68]	; (1d1c <nm_drv_deinit+0x98>)
    1cd8:	4798      	blx	r3
		goto ERR1;
    1cda:	e7f0      	b.n	1cbe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1cdc:	227a      	movs	r2, #122	; 0x7a
    1cde:	32ff      	adds	r2, #255	; 0xff
    1ce0:	4909      	ldr	r1, [pc, #36]	; (1d08 <nm_drv_deinit+0x84>)
    1ce2:	480a      	ldr	r0, [pc, #40]	; (1d0c <nm_drv_deinit+0x88>)
    1ce4:	4b0a      	ldr	r3, [pc, #40]	; (1d10 <nm_drv_deinit+0x8c>)
    1ce6:	4798      	blx	r3
    1ce8:	480e      	ldr	r0, [pc, #56]	; (1d24 <nm_drv_deinit+0xa0>)
    1cea:	4b0b      	ldr	r3, [pc, #44]	; (1d18 <nm_drv_deinit+0x94>)
    1cec:	4798      	blx	r3
    1cee:	200d      	movs	r0, #13
    1cf0:	4b0a      	ldr	r3, [pc, #40]	; (1d1c <nm_drv_deinit+0x98>)
    1cf2:	4798      	blx	r3
		goto ERR1;
    1cf4:	e7e3      	b.n	1cbe <nm_drv_deinit+0x3a>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00001929 	.word	0x00001929
    1cfc:	00003219 	.word	0x00003219
    1d00:	000019c1 	.word	0x000019c1
    1d04:	000023a5 	.word	0x000023a5
    1d08:	000094ec 	.word	0x000094ec
    1d0c:	00008f24 	.word	0x00008f24
    1d10:	00006efd 	.word	0x00006efd
    1d14:	000094fc 	.word	0x000094fc
    1d18:	00007019 	.word	0x00007019
    1d1c:	00006f31 	.word	0x00006f31
    1d20:	0000951c 	.word	0x0000951c
    1d24:	00009540 	.word	0x00009540

00001d28 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1d28:	b500      	push	{lr}
    1d2a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1d2c:	ab01      	add	r3, sp, #4
    1d2e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1d30:	2200      	movs	r2, #0
    1d32:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1d34:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d36:	0019      	movs	r1, r3
    1d38:	2003      	movs	r0, #3
    1d3a:	4b02      	ldr	r3, [pc, #8]	; (1d44 <nmi_spi_write+0x1c>)
    1d3c:	4798      	blx	r3
}
    1d3e:	b005      	add	sp, #20
    1d40:	bd00      	pop	{pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	000003d1 	.word	0x000003d1

00001d48 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1d48:	b570      	push	{r4, r5, r6, lr}
    1d4a:	b084      	sub	sp, #16
    1d4c:	ac08      	add	r4, sp, #32
    1d4e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1d50:	ac01      	add	r4, sp, #4
    1d52:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1d54:	303f      	adds	r0, #63	; 0x3f
    1d56:	b2c4      	uxtb	r4, r0
    1d58:	2c0e      	cmp	r4, #14
    1d5a:	d900      	bls.n	1d5e <spi_cmd+0x16>
    1d5c:	e084      	b.n	1e68 <spi_cmd+0x120>
    1d5e:	00a0      	lsls	r0, r4, #2
    1d60:	4c4f      	ldr	r4, [pc, #316]	; (1ea0 <spi_cmd+0x158>)
    1d62:	5820      	ldr	r0, [r4, r0]
    1d64:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1d66:	ab01      	add	r3, sp, #4
    1d68:	0c0a      	lsrs	r2, r1, #16
    1d6a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1d6c:	0a0a      	lsrs	r2, r1, #8
    1d6e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1d70:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1d72:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    1d74:	4b4b      	ldr	r3, [pc, #300]	; (1ea4 <spi_cmd+0x15c>)
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d077      	beq.n	1e6c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1d7c:	3901      	subs	r1, #1
    1d7e:	b2c9      	uxtb	r1, r1
    1d80:	e083      	b.n	1e8a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    1d82:	0a0b      	lsrs	r3, r1, #8
    1d84:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1d86:	2d00      	cmp	r5, #0
    1d88:	d107      	bne.n	1d9a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1d8a:	aa01      	add	r2, sp, #4
    1d8c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1d8e:	ab01      	add	r3, sp, #4
    1d90:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1d92:	2200      	movs	r2, #0
    1d94:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d96:	2105      	movs	r1, #5
		break;
    1d98:	e7ec      	b.n	1d74 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1d9a:	2280      	movs	r2, #128	; 0x80
    1d9c:	4252      	negs	r2, r2
    1d9e:	4313      	orrs	r3, r2
    1da0:	aa01      	add	r2, sp, #4
    1da2:	7053      	strb	r3, [r2, #1]
    1da4:	e7f3      	b.n	1d8e <spi_cmd+0x46>
		bc[1] = 0x00;
    1da6:	ab01      	add	r3, sp, #4
    1da8:	2200      	movs	r2, #0
    1daa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1dac:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1dae:	70da      	strb	r2, [r3, #3]
		len = 5;
    1db0:	2105      	movs	r1, #5
		break;
    1db2:	e7df      	b.n	1d74 <spi_cmd+0x2c>
		bc[1] = 0x00;
    1db4:	ab01      	add	r3, sp, #4
    1db6:	2200      	movs	r2, #0
    1db8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1dba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1dbc:	70da      	strb	r2, [r3, #3]
		len = 5;
    1dbe:	2105      	movs	r1, #5
		break;
    1dc0:	e7d8      	b.n	1d74 <spi_cmd+0x2c>
		bc[1] = 0xff;
    1dc2:	ab01      	add	r3, sp, #4
    1dc4:	22ff      	movs	r2, #255	; 0xff
    1dc6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1dc8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1dca:	70da      	strb	r2, [r3, #3]
		len = 5;
    1dcc:	2105      	movs	r1, #5
		break;
    1dce:	e7d1      	b.n	1d74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1dd0:	aa01      	add	r2, sp, #4
    1dd2:	0c08      	lsrs	r0, r1, #16
    1dd4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1dd6:	0a08      	lsrs	r0, r1, #8
    1dd8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1dda:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1ddc:	0a19      	lsrs	r1, r3, #8
    1dde:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1de0:	7153      	strb	r3, [r2, #5]
		len = 7;
    1de2:	2107      	movs	r1, #7
		break;
    1de4:	e7c6      	b.n	1d74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1de6:	aa01      	add	r2, sp, #4
    1de8:	0c08      	lsrs	r0, r1, #16
    1dea:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1dec:	0a08      	lsrs	r0, r1, #8
    1dee:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1df0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1df2:	0c19      	lsrs	r1, r3, #16
    1df4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1df6:	0a19      	lsrs	r1, r3, #8
    1df8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1dfa:	7193      	strb	r3, [r2, #6]
		len = 8;
    1dfc:	2108      	movs	r1, #8
		break;
    1dfe:	e7b9      	b.n	1d74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1e00:	0a0b      	lsrs	r3, r1, #8
    1e02:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1e04:	2d00      	cmp	r5, #0
    1e06:	d10c      	bne.n	1e22 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1e08:	a801      	add	r0, sp, #4
    1e0a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1e0c:	ab01      	add	r3, sp, #4
    1e0e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1e10:	0e11      	lsrs	r1, r2, #24
    1e12:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1e14:	0c11      	lsrs	r1, r2, #16
    1e16:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1e18:	0a11      	lsrs	r1, r2, #8
    1e1a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1e1c:	719a      	strb	r2, [r3, #6]
		len = 8;
    1e1e:	2108      	movs	r1, #8
		break;
    1e20:	e7a8      	b.n	1d74 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1e22:	2080      	movs	r0, #128	; 0x80
    1e24:	4240      	negs	r0, r0
    1e26:	4303      	orrs	r3, r0
    1e28:	a801      	add	r0, sp, #4
    1e2a:	7043      	strb	r3, [r0, #1]
    1e2c:	e7ee      	b.n	1e0c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1e2e:	ab01      	add	r3, sp, #4
    1e30:	0c08      	lsrs	r0, r1, #16
    1e32:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e34:	0a08      	lsrs	r0, r1, #8
    1e36:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1e38:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1e3a:	0e11      	lsrs	r1, r2, #24
    1e3c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1e3e:	0c11      	lsrs	r1, r2, #16
    1e40:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    1e42:	0a11      	lsrs	r1, r2, #8
    1e44:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    1e46:	71da      	strb	r2, [r3, #7]
		len = 9;
    1e48:	2109      	movs	r1, #9
		break;
    1e4a:	e793      	b.n	1d74 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1e4c:	2228      	movs	r2, #40	; 0x28
    1e4e:	32ff      	adds	r2, #255	; 0xff
    1e50:	4915      	ldr	r1, [pc, #84]	; (1ea8 <spi_cmd+0x160>)
    1e52:	4816      	ldr	r0, [pc, #88]	; (1eac <spi_cmd+0x164>)
    1e54:	4b16      	ldr	r3, [pc, #88]	; (1eb0 <spi_cmd+0x168>)
    1e56:	4798      	blx	r3
    1e58:	4816      	ldr	r0, [pc, #88]	; (1eb4 <spi_cmd+0x16c>)
    1e5a:	4b17      	ldr	r3, [pc, #92]	; (1eb8 <spi_cmd+0x170>)
    1e5c:	4798      	blx	r3
    1e5e:	200d      	movs	r0, #13
    1e60:	4b16      	ldr	r3, [pc, #88]	; (1ebc <spi_cmd+0x174>)
    1e62:	4798      	blx	r3
			result = N_FAIL;
    1e64:	2300      	movs	r3, #0
    1e66:	e017      	b.n	1e98 <spi_cmd+0x150>
	switch (cmd) {
    1e68:	2300      	movs	r3, #0
    1e6a:	e015      	b.n	1e98 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e6c:	1e4e      	subs	r6, r1, #1
    1e6e:	aa01      	add	r2, sp, #4
    1e70:	1995      	adds	r5, r2, r6
    1e72:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1e74:	4c12      	ldr	r4, [pc, #72]	; (1ec0 <spi_cmd+0x178>)
    1e76:	005b      	lsls	r3, r3, #1
    1e78:	7810      	ldrb	r0, [r2, #0]
    1e7a:	4043      	eors	r3, r0
    1e7c:	5ce3      	ldrb	r3, [r4, r3]
    1e7e:	3201      	adds	r2, #1
	while (len--)
    1e80:	42aa      	cmp	r2, r5
    1e82:	d1f8      	bne.n	1e76 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e84:	005b      	lsls	r3, r3, #1
    1e86:	aa01      	add	r2, sp, #4
    1e88:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1e8a:	b289      	uxth	r1, r1
    1e8c:	a801      	add	r0, sp, #4
    1e8e:	4b0d      	ldr	r3, [pc, #52]	; (1ec4 <spi_cmd+0x17c>)
    1e90:	4798      	blx	r3
    1e92:	2301      	movs	r3, #1
    1e94:	2800      	cmp	r0, #0
    1e96:	d1d9      	bne.n	1e4c <spi_cmd+0x104>
		}
	}

	return result;
}
    1e98:	0018      	movs	r0, r3
    1e9a:	b004      	add	sp, #16
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	000095a8 	.word	0x000095a8
    1ea4:	20000208 	.word	0x20000208
    1ea8:	000095e8 	.word	0x000095e8
    1eac:	00008f24 	.word	0x00008f24
    1eb0:	00006efd 	.word	0x00006efd
    1eb4:	00009a78 	.word	0x00009a78
    1eb8:	00007019 	.word	0x00007019
    1ebc:	00006f31 	.word	0x00006f31
    1ec0:	00009674 	.word	0x00009674
    1ec4:	00001d29 	.word	0x00001d29

00001ec8 <nmi_spi_read>:
{
    1ec8:	b500      	push	{lr}
    1eca:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1ecc:	ab01      	add	r3, sp, #4
    1ece:	2200      	movs	r2, #0
    1ed0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1ed2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1ed4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1ed6:	0019      	movs	r1, r3
    1ed8:	2003      	movs	r0, #3
    1eda:	4b02      	ldr	r3, [pc, #8]	; (1ee4 <nmi_spi_read+0x1c>)
    1edc:	4798      	blx	r3
}
    1ede:	b005      	add	sp, #20
    1ee0:	bd00      	pop	{pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	000003d1 	.word	0x000003d1

00001ee8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eea:	46c6      	mov	lr, r8
    1eec:	b500      	push	{lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1ef2:	28cf      	cmp	r0, #207	; 0xcf
    1ef4:	d02b      	beq.n	1f4e <spi_cmd_rsp+0x66>
    1ef6:	0003      	movs	r3, r0
    1ef8:	333b      	adds	r3, #59	; 0x3b
    1efa:	b2db      	uxtb	r3, r3
    1efc:	2b01      	cmp	r3, #1
    1efe:	d926      	bls.n	1f4e <spi_cmd_rsp+0x66>
{
    1f00:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f02:	466b      	mov	r3, sp
    1f04:	1dde      	adds	r6, r3, #7
    1f06:	4b26      	ldr	r3, [pc, #152]	; (1fa0 <spi_cmd_rsp+0xb8>)
    1f08:	4698      	mov	r8, r3
    1f0a:	2101      	movs	r1, #1
    1f0c:	0030      	movs	r0, r6
    1f0e:	47c0      	blx	r8
    1f10:	1e05      	subs	r5, r0, #0
    1f12:	d125      	bne.n	1f60 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1f14:	7833      	ldrb	r3, [r6, #0]
    1f16:	42bb      	cmp	r3, r7
    1f18:	d030      	beq.n	1f7c <spi_cmd_rsp+0x94>
    1f1a:	3c01      	subs	r4, #1
    1f1c:	b2e4      	uxtb	r4, r4
    1f1e:	2c00      	cmp	r4, #0
    1f20:	d1f3      	bne.n	1f0a <spi_cmd_rsp+0x22>
    1f22:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f24:	466b      	mov	r3, sp
    1f26:	1dde      	adds	r6, r3, #7
    1f28:	4f1d      	ldr	r7, [pc, #116]	; (1fa0 <spi_cmd_rsp+0xb8>)
    1f2a:	2101      	movs	r1, #1
    1f2c:	0030      	movs	r0, r6
    1f2e:	47b8      	blx	r7
    1f30:	2800      	cmp	r0, #0
    1f32:	d125      	bne.n	1f80 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1f34:	7833      	ldrb	r3, [r6, #0]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d02f      	beq.n	1f9a <spi_cmd_rsp+0xb2>
    1f3a:	3c01      	subs	r4, #1
    1f3c:	b2e4      	uxtb	r4, r4
    1f3e:	2c00      	cmp	r4, #0
    1f40:	d1f3      	bne.n	1f2a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1f42:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1f44:	0028      	movs	r0, r5
    1f46:	b002      	add	sp, #8
    1f48:	bc04      	pop	{r2}
    1f4a:	4690      	mov	r8, r2
    1f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f4e:	2101      	movs	r1, #1
    1f50:	466b      	mov	r3, sp
    1f52:	1dd8      	adds	r0, r3, #7
    1f54:	4b12      	ldr	r3, [pc, #72]	; (1fa0 <spi_cmd_rsp+0xb8>)
    1f56:	4798      	blx	r3
			result = N_FAIL;
    1f58:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d0d0      	beq.n	1f00 <spi_cmd_rsp+0x18>
    1f5e:	e7f1      	b.n	1f44 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f60:	22b1      	movs	r2, #177	; 0xb1
    1f62:	0052      	lsls	r2, r2, #1
    1f64:	490f      	ldr	r1, [pc, #60]	; (1fa4 <spi_cmd_rsp+0xbc>)
    1f66:	4810      	ldr	r0, [pc, #64]	; (1fa8 <spi_cmd_rsp+0xc0>)
    1f68:	4b10      	ldr	r3, [pc, #64]	; (1fac <spi_cmd_rsp+0xc4>)
    1f6a:	4798      	blx	r3
    1f6c:	4810      	ldr	r0, [pc, #64]	; (1fb0 <spi_cmd_rsp+0xc8>)
    1f6e:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <spi_cmd_rsp+0xcc>)
    1f70:	4798      	blx	r3
    1f72:	200d      	movs	r0, #13
    1f74:	4b10      	ldr	r3, [pc, #64]	; (1fb8 <spi_cmd_rsp+0xd0>)
    1f76:	4798      	blx	r3
			result = N_FAIL;
    1f78:	2500      	movs	r5, #0
			goto _fail_;
    1f7a:	e7e3      	b.n	1f44 <spi_cmd_rsp+0x5c>
    1f7c:	240b      	movs	r4, #11
    1f7e:	e7d1      	b.n	1f24 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f80:	22b8      	movs	r2, #184	; 0xb8
    1f82:	0052      	lsls	r2, r2, #1
    1f84:	4907      	ldr	r1, [pc, #28]	; (1fa4 <spi_cmd_rsp+0xbc>)
    1f86:	4808      	ldr	r0, [pc, #32]	; (1fa8 <spi_cmd_rsp+0xc0>)
    1f88:	4b08      	ldr	r3, [pc, #32]	; (1fac <spi_cmd_rsp+0xc4>)
    1f8a:	4798      	blx	r3
    1f8c:	4808      	ldr	r0, [pc, #32]	; (1fb0 <spi_cmd_rsp+0xc8>)
    1f8e:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <spi_cmd_rsp+0xcc>)
    1f90:	4798      	blx	r3
    1f92:	200d      	movs	r0, #13
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <spi_cmd_rsp+0xd0>)
    1f96:	4798      	blx	r3
			goto _fail_;
    1f98:	e7d4      	b.n	1f44 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f9a:	2501      	movs	r5, #1
    1f9c:	e7d2      	b.n	1f44 <spi_cmd_rsp+0x5c>
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00001ec9 	.word	0x00001ec9
    1fa4:	00009600 	.word	0x00009600
    1fa8:	00008f24 	.word	0x00008f24
    1fac:	00006efd 	.word	0x00006efd
    1fb0:	00009aa4 	.word	0x00009aa4
    1fb4:	00007019 	.word	0x00007019
    1fb8:	00006f31 	.word	0x00006f31

00001fbc <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fbe:	46de      	mov	lr, fp
    1fc0:	4657      	mov	r7, sl
    1fc2:	464e      	mov	r6, r9
    1fc4:	4645      	mov	r5, r8
    1fc6:	b5e0      	push	{r5, r6, r7, lr}
    1fc8:	b087      	sub	sp, #28
    1fca:	9001      	str	r0, [sp, #4]
    1fcc:	4689      	mov	r9, r1
    1fce:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1fd0:	2300      	movs	r3, #0
    1fd2:	469a      	mov	sl, r3
    1fd4:	2380      	movs	r3, #128	; 0x80
    1fd6:	019b      	lsls	r3, r3, #6
    1fd8:	469b      	mov	fp, r3
    1fda:	466a      	mov	r2, sp
    1fdc:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1fde:	4b3b      	ldr	r3, [pc, #236]	; (20cc <STACK_SIZE+0xcc>)
    1fe0:	4698      	mov	r8, r3
    1fe2:	e02e      	b.n	2042 <STACK_SIZE+0x42>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1fe4:	4a3a      	ldr	r2, [pc, #232]	; (20d0 <STACK_SIZE+0xd0>)
    1fe6:	493b      	ldr	r1, [pc, #236]	; (20d4 <STACK_SIZE+0xd4>)
    1fe8:	483b      	ldr	r0, [pc, #236]	; (20d8 <STACK_SIZE+0xd8>)
    1fea:	4b3c      	ldr	r3, [pc, #240]	; (20dc <STACK_SIZE+0xdc>)
    1fec:	4798      	blx	r3
    1fee:	483c      	ldr	r0, [pc, #240]	; (20e0 <STACK_SIZE+0xe0>)
    1ff0:	4b3c      	ldr	r3, [pc, #240]	; (20e4 <STACK_SIZE+0xe4>)
    1ff2:	4798      	blx	r3
    1ff4:	200d      	movs	r0, #13
    1ff6:	4b3c      	ldr	r3, [pc, #240]	; (20e8 <STACK_SIZE+0xe8>)
    1ff8:	4798      	blx	r3
    1ffa:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    1ffc:	0028      	movs	r0, r5
    1ffe:	b007      	add	sp, #28
    2000:	bc3c      	pop	{r2, r3, r4, r5}
    2002:	4690      	mov	r8, r2
    2004:	4699      	mov	r9, r3
    2006:	46a2      	mov	sl, r4
    2008:	46ab      	mov	fp, r5
    200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    200c:	2c00      	cmp	r4, #0
    200e:	dd2e      	ble.n	206e <STACK_SIZE+0x6e>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2010:	9b01      	ldr	r3, [sp, #4]
    2012:	4453      	add	r3, sl
    2014:	0018      	movs	r0, r3
    2016:	0039      	movs	r1, r7
    2018:	4b2c      	ldr	r3, [pc, #176]	; (20cc <STACK_SIZE+0xcc>)
    201a:	4798      	blx	r3
    201c:	1e04      	subs	r4, r0, #0
    201e:	d133      	bne.n	2088 <STACK_SIZE+0x88>
		if(!clockless)
    2020:	9b02      	ldr	r3, [sp, #8]
    2022:	2b00      	cmp	r3, #0
    2024:	d103      	bne.n	202e <STACK_SIZE+0x2e>
			if (!gu8Crc_off) {
    2026:	4b31      	ldr	r3, [pc, #196]	; (20ec <STACK_SIZE+0xec>)
    2028:	781b      	ldrb	r3, [r3, #0]
    202a:	2b00      	cmp	r3, #0
    202c:	d039      	beq.n	20a2 <STACK_SIZE+0xa2>
		ix += nbytes;
    202e:	4653      	mov	r3, sl
    2030:	18fb      	adds	r3, r7, r3
    2032:	b21b      	sxth	r3, r3
    2034:	469a      	mov	sl, r3
		sz -= nbytes;
    2036:	464b      	mov	r3, r9
    2038:	1bdf      	subs	r7, r3, r7
    203a:	b2bb      	uxth	r3, r7
    203c:	4699      	mov	r9, r3
	} while (sz);
    203e:	2b00      	cmp	r3, #0
    2040:	d042      	beq.n	20c8 <STACK_SIZE+0xc8>
    2042:	464f      	mov	r7, r9
    2044:	45d9      	cmp	r9, fp
    2046:	d901      	bls.n	204c <STACK_SIZE+0x4c>
    2048:	466b      	mov	r3, sp
    204a:	89df      	ldrh	r7, [r3, #14]
    204c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    204e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2050:	ab04      	add	r3, sp, #16
    2052:	1cde      	adds	r6, r3, #3
    2054:	2101      	movs	r1, #1
    2056:	0030      	movs	r0, r6
    2058:	47c0      	blx	r8
    205a:	1e05      	subs	r5, r0, #0
    205c:	d1c2      	bne.n	1fe4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    205e:	7833      	ldrb	r3, [r6, #0]
    2060:	091b      	lsrs	r3, r3, #4
    2062:	2b0f      	cmp	r3, #15
    2064:	d0d2      	beq.n	200c <STACK_SIZE+0xc>
    2066:	3c01      	subs	r4, #1
    2068:	b224      	sxth	r4, r4
		} while (retry--);
    206a:	1c63      	adds	r3, r4, #1
    206c:	d1f2      	bne.n	2054 <STACK_SIZE+0x54>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    206e:	4a20      	ldr	r2, [pc, #128]	; (20f0 <STACK_SIZE+0xf0>)
    2070:	4918      	ldr	r1, [pc, #96]	; (20d4 <STACK_SIZE+0xd4>)
    2072:	4819      	ldr	r0, [pc, #100]	; (20d8 <STACK_SIZE+0xd8>)
    2074:	4c19      	ldr	r4, [pc, #100]	; (20dc <STACK_SIZE+0xdc>)
    2076:	47a0      	blx	r4
    2078:	ab04      	add	r3, sp, #16
    207a:	78d9      	ldrb	r1, [r3, #3]
    207c:	481d      	ldr	r0, [pc, #116]	; (20f4 <STACK_SIZE+0xf4>)
    207e:	47a0      	blx	r4
    2080:	200d      	movs	r0, #13
    2082:	4b19      	ldr	r3, [pc, #100]	; (20e8 <STACK_SIZE+0xe8>)
    2084:	4798      	blx	r3
			break;
    2086:	e7b9      	b.n	1ffc <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2088:	22c5      	movs	r2, #197	; 0xc5
    208a:	0092      	lsls	r2, r2, #2
    208c:	4911      	ldr	r1, [pc, #68]	; (20d4 <STACK_SIZE+0xd4>)
    208e:	4812      	ldr	r0, [pc, #72]	; (20d8 <STACK_SIZE+0xd8>)
    2090:	4b12      	ldr	r3, [pc, #72]	; (20dc <STACK_SIZE+0xdc>)
    2092:	4798      	blx	r3
    2094:	4818      	ldr	r0, [pc, #96]	; (20f8 <STACK_SIZE+0xf8>)
    2096:	4b13      	ldr	r3, [pc, #76]	; (20e4 <STACK_SIZE+0xe4>)
    2098:	4798      	blx	r3
    209a:	200d      	movs	r0, #13
    209c:	4b12      	ldr	r3, [pc, #72]	; (20e8 <STACK_SIZE+0xe8>)
    209e:	4798      	blx	r3
			break;
    20a0:	e7ac      	b.n	1ffc <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    20a2:	2102      	movs	r1, #2
    20a4:	a805      	add	r0, sp, #20
    20a6:	4b09      	ldr	r3, [pc, #36]	; (20cc <STACK_SIZE+0xcc>)
    20a8:	4798      	blx	r3
    20aa:	2800      	cmp	r0, #0
    20ac:	d0bf      	beq.n	202e <STACK_SIZE+0x2e>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    20ae:	4a13      	ldr	r2, [pc, #76]	; (20fc <STACK_SIZE+0xfc>)
    20b0:	4908      	ldr	r1, [pc, #32]	; (20d4 <STACK_SIZE+0xd4>)
    20b2:	4809      	ldr	r0, [pc, #36]	; (20d8 <STACK_SIZE+0xd8>)
    20b4:	4b09      	ldr	r3, [pc, #36]	; (20dc <STACK_SIZE+0xdc>)
    20b6:	4798      	blx	r3
    20b8:	4811      	ldr	r0, [pc, #68]	; (2100 <STACK_SIZE+0x100>)
    20ba:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <STACK_SIZE+0xe4>)
    20bc:	4798      	blx	r3
    20be:	200d      	movs	r0, #13
    20c0:	4b09      	ldr	r3, [pc, #36]	; (20e8 <STACK_SIZE+0xe8>)
    20c2:	4798      	blx	r3
					result = N_FAIL;
    20c4:	0025      	movs	r5, r4
					break;
    20c6:	e799      	b.n	1ffc <spi_data_read+0x40>
    20c8:	2501      	movs	r5, #1
    20ca:	e797      	b.n	1ffc <spi_data_read+0x40>
    20cc:	00001ec9 	.word	0x00001ec9
    20d0:	000002ff 	.word	0x000002ff
    20d4:	0000960c 	.word	0x0000960c
    20d8:	00008f24 	.word	0x00008f24
    20dc:	00006efd 	.word	0x00006efd
    20e0:	00009ad8 	.word	0x00009ad8
    20e4:	00007019 	.word	0x00007019
    20e8:	00006f31 	.word	0x00006f31
    20ec:	20000208 	.word	0x20000208
    20f0:	0000030b 	.word	0x0000030b
    20f4:	00009b0c 	.word	0x00009b0c
    20f8:	00009b3c 	.word	0x00009b3c
    20fc:	0000031f 	.word	0x0000031f
    2100:	00009b6c 	.word	0x00009b6c

00002104 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2104:	b5f0      	push	{r4, r5, r6, r7, lr}
    2106:	46d6      	mov	lr, sl
    2108:	464f      	mov	r7, r9
    210a:	4646      	mov	r6, r8
    210c:	b5c0      	push	{r6, r7, lr}
    210e:	b086      	sub	sp, #24
    2110:	9003      	str	r0, [sp, #12]
    2112:	9104      	str	r1, [sp, #16]
    2114:	2830      	cmp	r0, #48	; 0x30
    2116:	d80f      	bhi.n	2138 <spi_write_reg+0x34>
    2118:	4b30      	ldr	r3, [pc, #192]	; (21dc <spi_write_reg+0xd8>)
    211a:	781f      	ldrb	r7, [r3, #0]
    211c:	b2fb      	uxtb	r3, r7
    211e:	9305      	str	r3, [sp, #20]
    2120:	2300      	movs	r3, #0
    2122:	2230      	movs	r2, #48	; 0x30
    2124:	9903      	ldr	r1, [sp, #12]
    2126:	428a      	cmp	r2, r1
    2128:	415b      	adcs	r3, r3
    212a:	b2db      	uxtb	r3, r3
    212c:	469a      	mov	sl, r3
    212e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2130:	4b2b      	ldr	r3, [pc, #172]	; (21e0 <spi_write_reg+0xdc>)
    2132:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2134:	46d1      	mov	r9, sl
    2136:	e033      	b.n	21a0 <spi_write_reg+0x9c>
    2138:	4b2a      	ldr	r3, [pc, #168]	; (21e4 <spi_write_reg+0xe0>)
    213a:	781f      	ldrb	r7, [r3, #0]
    213c:	e7ee      	b.n	211c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    213e:	9805      	ldr	r0, [sp, #20]
    2140:	4b29      	ldr	r3, [pc, #164]	; (21e8 <spi_write_reg+0xe4>)
    2142:	4798      	blx	r3
    2144:	0004      	movs	r4, r0
	if (result != N_OK) {
    2146:	2801      	cmp	r0, #1
    2148:	d041      	beq.n	21ce <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    214a:	22e7      	movs	r2, #231	; 0xe7
    214c:	0092      	lsls	r2, r2, #2
    214e:	4927      	ldr	r1, [pc, #156]	; (21ec <spi_write_reg+0xe8>)
    2150:	4827      	ldr	r0, [pc, #156]	; (21f0 <spi_write_reg+0xec>)
    2152:	4e28      	ldr	r6, [pc, #160]	; (21f4 <spi_write_reg+0xf0>)
    2154:	47b0      	blx	r6
    2156:	9903      	ldr	r1, [sp, #12]
    2158:	4827      	ldr	r0, [pc, #156]	; (21f8 <spi_write_reg+0xf4>)
    215a:	47b0      	blx	r6
    215c:	200d      	movs	r0, #13
    215e:	4b27      	ldr	r3, [pc, #156]	; (21fc <spi_write_reg+0xf8>)
    2160:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2162:	2001      	movs	r0, #1
    2164:	4e26      	ldr	r6, [pc, #152]	; (2200 <spi_write_reg+0xfc>)
    2166:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2168:	2300      	movs	r3, #0
    216a:	9300      	str	r3, [sp, #0]
    216c:	2200      	movs	r2, #0
    216e:	2100      	movs	r1, #0
    2170:	20cf      	movs	r0, #207	; 0xcf
    2172:	4f1b      	ldr	r7, [pc, #108]	; (21e0 <spi_write_reg+0xdc>)
    2174:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2176:	20cf      	movs	r0, #207	; 0xcf
    2178:	4b1b      	ldr	r3, [pc, #108]	; (21e8 <spi_write_reg+0xe4>)
    217a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    217c:	4a21      	ldr	r2, [pc, #132]	; (2204 <spi_write_reg+0x100>)
    217e:	491b      	ldr	r1, [pc, #108]	; (21ec <spi_write_reg+0xe8>)
    2180:	481b      	ldr	r0, [pc, #108]	; (21f0 <spi_write_reg+0xec>)
    2182:	4f1c      	ldr	r7, [pc, #112]	; (21f4 <spi_write_reg+0xf0>)
    2184:	47b8      	blx	r7
    2186:	9b04      	ldr	r3, [sp, #16]
    2188:	9a03      	ldr	r2, [sp, #12]
    218a:	0029      	movs	r1, r5
    218c:	481e      	ldr	r0, [pc, #120]	; (2208 <spi_write_reg+0x104>)
    218e:	47b8      	blx	r7
    2190:	200d      	movs	r0, #13
    2192:	4b1a      	ldr	r3, [pc, #104]	; (21fc <spi_write_reg+0xf8>)
    2194:	4798      	blx	r3
		nm_bsp_sleep(1);
    2196:	2001      	movs	r0, #1
    2198:	47b0      	blx	r6
    219a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    219c:	2d00      	cmp	r5, #0
    219e:	d016      	beq.n	21ce <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    21a0:	464b      	mov	r3, r9
    21a2:	9300      	str	r3, [sp, #0]
    21a4:	2304      	movs	r3, #4
    21a6:	9a04      	ldr	r2, [sp, #16]
    21a8:	9f03      	ldr	r7, [sp, #12]
    21aa:	0039      	movs	r1, r7
    21ac:	9805      	ldr	r0, [sp, #20]
    21ae:	47c0      	blx	r8
    21b0:	0004      	movs	r4, r0
	if (result != N_OK) {
    21b2:	2801      	cmp	r0, #1
    21b4:	d0c3      	beq.n	213e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    21b6:	4a15      	ldr	r2, [pc, #84]	; (220c <spi_write_reg+0x108>)
    21b8:	490c      	ldr	r1, [pc, #48]	; (21ec <spi_write_reg+0xe8>)
    21ba:	480d      	ldr	r0, [pc, #52]	; (21f0 <spi_write_reg+0xec>)
    21bc:	4e0d      	ldr	r6, [pc, #52]	; (21f4 <spi_write_reg+0xf0>)
    21be:	47b0      	blx	r6
    21c0:	0039      	movs	r1, r7
    21c2:	4813      	ldr	r0, [pc, #76]	; (2210 <spi_write_reg+0x10c>)
    21c4:	47b0      	blx	r6
    21c6:	200d      	movs	r0, #13
    21c8:	4b0c      	ldr	r3, [pc, #48]	; (21fc <spi_write_reg+0xf8>)
    21ca:	4798      	blx	r3
		goto _FAIL_;
    21cc:	e7c9      	b.n	2162 <spi_write_reg+0x5e>
	}

	return result;
}
    21ce:	0020      	movs	r0, r4
    21d0:	b006      	add	sp, #24
    21d2:	bc1c      	pop	{r2, r3, r4}
    21d4:	4690      	mov	r8, r2
    21d6:	4699      	mov	r9, r3
    21d8:	46a2      	mov	sl, r4
    21da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21dc:	000095e4 	.word	0x000095e4
    21e0:	00001d49 	.word	0x00001d49
    21e4:	000095e5 	.word	0x000095e5
    21e8:	00001ee9 	.word	0x00001ee9
    21ec:	0000962c 	.word	0x0000962c
    21f0:	00008f24 	.word	0x00008f24
    21f4:	00006efd 	.word	0x00006efd
    21f8:	00009c64 	.word	0x00009c64
    21fc:	00006f31 	.word	0x00006f31
    2200:	00000195 	.word	0x00000195
    2204:	000003af 	.word	0x000003af
    2208:	00009c9c 	.word	0x00009c9c
    220c:	00000396 	.word	0x00000396
    2210:	00009c38 	.word	0x00009c38

00002214 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2214:	b5f0      	push	{r4, r5, r6, r7, lr}
    2216:	46de      	mov	lr, fp
    2218:	4657      	mov	r7, sl
    221a:	464e      	mov	r6, r9
    221c:	4645      	mov	r5, r8
    221e:	b5e0      	push	{r5, r6, r7, lr}
    2220:	b087      	sub	sp, #28
    2222:	9002      	str	r0, [sp, #8]
    2224:	468b      	mov	fp, r1
    2226:	28ff      	cmp	r0, #255	; 0xff
    2228:	d80f      	bhi.n	224a <spi_read_reg+0x36>
    222a:	4b41      	ldr	r3, [pc, #260]	; (2330 <spi_read_reg+0x11c>)
    222c:	781f      	ldrb	r7, [r3, #0]
    222e:	b2fb      	uxtb	r3, r7
    2230:	9303      	str	r3, [sp, #12]
    2232:	2300      	movs	r3, #0
    2234:	22ff      	movs	r2, #255	; 0xff
    2236:	9902      	ldr	r1, [sp, #8]
    2238:	428a      	cmp	r2, r1
    223a:	415b      	adcs	r3, r3
    223c:	b2db      	uxtb	r3, r3
    223e:	469a      	mov	sl, r3
    2240:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2242:	4b3c      	ldr	r3, [pc, #240]	; (2334 <spi_read_reg+0x120>)
    2244:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2246:	46d1      	mov	r9, sl
    2248:	e031      	b.n	22ae <spi_read_reg+0x9a>
    224a:	4b3b      	ldr	r3, [pc, #236]	; (2338 <spi_read_reg+0x124>)
    224c:	781f      	ldrb	r7, [r3, #0]
    224e:	e7ee      	b.n	222e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2250:	9803      	ldr	r0, [sp, #12]
    2252:	4b3a      	ldr	r3, [pc, #232]	; (233c <spi_read_reg+0x128>)
    2254:	4798      	blx	r3
    2256:	0004      	movs	r4, r0
	if (result != N_OK) {
    2258:	2801      	cmp	r0, #1
    225a:	d03f      	beq.n	22dc <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    225c:	4a38      	ldr	r2, [pc, #224]	; (2340 <spi_read_reg+0x12c>)
    225e:	4939      	ldr	r1, [pc, #228]	; (2344 <spi_read_reg+0x130>)
    2260:	4839      	ldr	r0, [pc, #228]	; (2348 <spi_read_reg+0x134>)
    2262:	4e3a      	ldr	r6, [pc, #232]	; (234c <spi_read_reg+0x138>)
    2264:	47b0      	blx	r6
    2266:	9902      	ldr	r1, [sp, #8]
    2268:	4839      	ldr	r0, [pc, #228]	; (2350 <spi_read_reg+0x13c>)
    226a:	47b0      	blx	r6
    226c:	200d      	movs	r0, #13
    226e:	4b39      	ldr	r3, [pc, #228]	; (2354 <spi_read_reg+0x140>)
    2270:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2272:	2001      	movs	r0, #1
    2274:	4e38      	ldr	r6, [pc, #224]	; (2358 <spi_read_reg+0x144>)
    2276:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2278:	2300      	movs	r3, #0
    227a:	9300      	str	r3, [sp, #0]
    227c:	2200      	movs	r2, #0
    227e:	2100      	movs	r1, #0
    2280:	20cf      	movs	r0, #207	; 0xcf
    2282:	4f2c      	ldr	r7, [pc, #176]	; (2334 <spi_read_reg+0x120>)
    2284:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2286:	20cf      	movs	r0, #207	; 0xcf
    2288:	4b2c      	ldr	r3, [pc, #176]	; (233c <spi_read_reg+0x128>)
    228a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    228c:	4a33      	ldr	r2, [pc, #204]	; (235c <spi_read_reg+0x148>)
    228e:	492d      	ldr	r1, [pc, #180]	; (2344 <spi_read_reg+0x130>)
    2290:	482d      	ldr	r0, [pc, #180]	; (2348 <spi_read_reg+0x134>)
    2292:	4f2e      	ldr	r7, [pc, #184]	; (234c <spi_read_reg+0x138>)
    2294:	47b8      	blx	r7
    2296:	9a02      	ldr	r2, [sp, #8]
    2298:	0029      	movs	r1, r5
    229a:	4831      	ldr	r0, [pc, #196]	; (2360 <spi_read_reg+0x14c>)
    229c:	47b8      	blx	r7
    229e:	200d      	movs	r0, #13
    22a0:	4b2c      	ldr	r3, [pc, #176]	; (2354 <spi_read_reg+0x140>)
    22a2:	4798      	blx	r3
		nm_bsp_sleep(1);
    22a4:	2001      	movs	r0, #1
    22a6:	47b0      	blx	r6
    22a8:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    22aa:	2d00      	cmp	r5, #0
    22ac:	d037      	beq.n	231e <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    22ae:	464b      	mov	r3, r9
    22b0:	9300      	str	r3, [sp, #0]
    22b2:	2304      	movs	r3, #4
    22b4:	2200      	movs	r2, #0
    22b6:	9f02      	ldr	r7, [sp, #8]
    22b8:	0039      	movs	r1, r7
    22ba:	9803      	ldr	r0, [sp, #12]
    22bc:	47c0      	blx	r8
    22be:	0004      	movs	r4, r0
	if (result != N_OK) {
    22c0:	2801      	cmp	r0, #1
    22c2:	d0c5      	beq.n	2250 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    22c4:	4a27      	ldr	r2, [pc, #156]	; (2364 <spi_read_reg+0x150>)
    22c6:	491f      	ldr	r1, [pc, #124]	; (2344 <spi_read_reg+0x130>)
    22c8:	481f      	ldr	r0, [pc, #124]	; (2348 <spi_read_reg+0x134>)
    22ca:	4e20      	ldr	r6, [pc, #128]	; (234c <spi_read_reg+0x138>)
    22cc:	47b0      	blx	r6
    22ce:	0039      	movs	r1, r7
    22d0:	4825      	ldr	r0, [pc, #148]	; (2368 <spi_read_reg+0x154>)
    22d2:	47b0      	blx	r6
    22d4:	200d      	movs	r0, #13
    22d6:	4b1f      	ldr	r3, [pc, #124]	; (2354 <spi_read_reg+0x140>)
    22d8:	4798      	blx	r3
		goto _FAIL_;
    22da:	e7ca      	b.n	2272 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    22dc:	464a      	mov	r2, r9
    22de:	2104      	movs	r1, #4
    22e0:	a805      	add	r0, sp, #20
    22e2:	4b22      	ldr	r3, [pc, #136]	; (236c <spi_read_reg+0x158>)
    22e4:	4798      	blx	r3
    22e6:	0004      	movs	r4, r0
	if (result != N_OK) {
    22e8:	2801      	cmp	r0, #1
    22ea:	d00b      	beq.n	2304 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    22ec:	4a20      	ldr	r2, [pc, #128]	; (2370 <spi_read_reg+0x15c>)
    22ee:	4915      	ldr	r1, [pc, #84]	; (2344 <spi_read_reg+0x130>)
    22f0:	4815      	ldr	r0, [pc, #84]	; (2348 <spi_read_reg+0x134>)
    22f2:	4b16      	ldr	r3, [pc, #88]	; (234c <spi_read_reg+0x138>)
    22f4:	4798      	blx	r3
    22f6:	481f      	ldr	r0, [pc, #124]	; (2374 <spi_read_reg+0x160>)
    22f8:	4b1f      	ldr	r3, [pc, #124]	; (2378 <spi_read_reg+0x164>)
    22fa:	4798      	blx	r3
    22fc:	200d      	movs	r0, #13
    22fe:	4b15      	ldr	r3, [pc, #84]	; (2354 <spi_read_reg+0x140>)
    2300:	4798      	blx	r3
		goto _FAIL_;
    2302:	e7b6      	b.n	2272 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2304:	aa05      	add	r2, sp, #20
    2306:	7853      	ldrb	r3, [r2, #1]
    2308:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    230a:	7891      	ldrb	r1, [r2, #2]
    230c:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    230e:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2310:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2312:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2314:	78d2      	ldrb	r2, [r2, #3]
    2316:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    2318:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    231a:	465a      	mov	r2, fp
    231c:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    231e:	0020      	movs	r0, r4
    2320:	b007      	add	sp, #28
    2322:	bc3c      	pop	{r2, r3, r4, r5}
    2324:	4690      	mov	r8, r2
    2326:	4699      	mov	r9, r3
    2328:	46a2      	mov	sl, r4
    232a:	46ab      	mov	fp, r5
    232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	000095e6 	.word	0x000095e6
    2334:	00001d49 	.word	0x00001d49
    2338:	000095e7 	.word	0x000095e7
    233c:	00001ee9 	.word	0x00001ee9
    2340:	0000041d 	.word	0x0000041d
    2344:	0000964c 	.word	0x0000964c
    2348:	00008f24 	.word	0x00008f24
    234c:	00006efd 	.word	0x00006efd
    2350:	00009bcc 	.word	0x00009bcc
    2354:	00006f31 	.word	0x00006f31
    2358:	00000195 	.word	0x00000195
    235c:	0000043c 	.word	0x0000043c
    2360:	00009c20 	.word	0x00009c20
    2364:	00000417 	.word	0x00000417
    2368:	00009ba0 	.word	0x00009ba0
    236c:	00001fbd 	.word	0x00001fbd
    2370:	00000424 	.word	0x00000424
    2374:	00009c00 	.word	0x00009c00
    2378:	00007019 	.word	0x00007019

0000237c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    237c:	b510      	push	{r4, lr}
    237e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2380:	2300      	movs	r3, #0
    2382:	9300      	str	r3, [sp, #0]
    2384:	2200      	movs	r2, #0
    2386:	2100      	movs	r1, #0
    2388:	20cf      	movs	r0, #207	; 0xcf
    238a:	4c04      	ldr	r4, [pc, #16]	; (239c <nm_spi_reset+0x20>)
    238c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    238e:	20cf      	movs	r0, #207	; 0xcf
    2390:	4b03      	ldr	r3, [pc, #12]	; (23a0 <nm_spi_reset+0x24>)
    2392:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2394:	2000      	movs	r0, #0
    2396:	b002      	add	sp, #8
    2398:	bd10      	pop	{r4, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00001d49 	.word	0x00001d49
    23a0:	00001ee9 	.word	0x00001ee9

000023a4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    23a4:	2200      	movs	r2, #0
    23a6:	4b02      	ldr	r3, [pc, #8]	; (23b0 <nm_spi_deinit+0xc>)
    23a8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    23aa:	2000      	movs	r0, #0
    23ac:	4770      	bx	lr
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	20000208 	.word	0x20000208

000023b4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    23b4:	b500      	push	{lr}
    23b6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    23b8:	a901      	add	r1, sp, #4
    23ba:	4b02      	ldr	r3, [pc, #8]	; (23c4 <nm_spi_read_reg+0x10>)
    23bc:	4798      	blx	r3

	return u32Val;
}
    23be:	9801      	ldr	r0, [sp, #4]
    23c0:	b003      	add	sp, #12
    23c2:	bd00      	pop	{pc}
    23c4:	00002215 	.word	0x00002215

000023c8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    23c8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    23ca:	4b04      	ldr	r3, [pc, #16]	; (23dc <nm_spi_read_reg_with_ret+0x14>)
    23cc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    23ce:	2300      	movs	r3, #0
    23d0:	2801      	cmp	r0, #1
    23d2:	d101      	bne.n	23d8 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    23d4:	0018      	movs	r0, r3
    23d6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    23d8:	3b06      	subs	r3, #6
    23da:	e7fb      	b.n	23d4 <nm_spi_read_reg_with_ret+0xc>
    23dc:	00002215 	.word	0x00002215

000023e0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    23e0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    23e2:	4b04      	ldr	r3, [pc, #16]	; (23f4 <nm_spi_write_reg+0x14>)
    23e4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    23e6:	2300      	movs	r3, #0
    23e8:	2801      	cmp	r0, #1
    23ea:	d101      	bne.n	23f0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    23ec:	0018      	movs	r0, r3
    23ee:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    23f0:	3b06      	subs	r3, #6
    23f2:	e7fb      	b.n	23ec <nm_spi_write_reg+0xc>
    23f4:	00002105 	.word	0x00002105

000023f8 <nm_spi_init>:
{
    23f8:	b510      	push	{r4, lr}
    23fa:	b082      	sub	sp, #8
	uint32 reg = 0;
    23fc:	2300      	movs	r3, #0
    23fe:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2400:	4a35      	ldr	r2, [pc, #212]	; (24d8 <nm_spi_init+0xe0>)
    2402:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2404:	4669      	mov	r1, sp
    2406:	4835      	ldr	r0, [pc, #212]	; (24dc <nm_spi_init+0xe4>)
    2408:	4b35      	ldr	r3, [pc, #212]	; (24e0 <nm_spi_init+0xe8>)
    240a:	4798      	blx	r3
    240c:	2800      	cmp	r0, #0
    240e:	d028      	beq.n	2462 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2410:	4b31      	ldr	r3, [pc, #196]	; (24d8 <nm_spi_init+0xe0>)
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d10d      	bne.n	2434 <nm_spi_init+0x3c>
		reg &= ~0x70;
    2418:	337c      	adds	r3, #124	; 0x7c
    241a:	9900      	ldr	r1, [sp, #0]
    241c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    241e:	3b2c      	subs	r3, #44	; 0x2c
    2420:	4319      	orrs	r1, r3
    2422:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2424:	482d      	ldr	r0, [pc, #180]	; (24dc <nm_spi_init+0xe4>)
    2426:	4b2f      	ldr	r3, [pc, #188]	; (24e4 <nm_spi_init+0xec>)
    2428:	4798      	blx	r3
    242a:	1e04      	subs	r4, r0, #0
    242c:	d039      	beq.n	24a2 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    242e:	2201      	movs	r2, #1
    2430:	4b29      	ldr	r3, [pc, #164]	; (24d8 <nm_spi_init+0xe0>)
    2432:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2434:	a901      	add	r1, sp, #4
    2436:	2080      	movs	r0, #128	; 0x80
    2438:	0140      	lsls	r0, r0, #5
    243a:	4b29      	ldr	r3, [pc, #164]	; (24e0 <nm_spi_init+0xe8>)
    243c:	4798      	blx	r3
    243e:	2800      	cmp	r0, #0
    2440:	d03b      	beq.n	24ba <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2442:	4c26      	ldr	r4, [pc, #152]	; (24dc <nm_spi_init+0xe4>)
    2444:	0020      	movs	r0, r4
    2446:	4b28      	ldr	r3, [pc, #160]	; (24e8 <nm_spi_init+0xf0>)
    2448:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    244a:	2370      	movs	r3, #112	; 0x70
    244c:	0001      	movs	r1, r0
    244e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2450:	2050      	movs	r0, #80	; 0x50
    2452:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2454:	0020      	movs	r0, r4
    2456:	4b25      	ldr	r3, [pc, #148]	; (24ec <nm_spi_init+0xf4>)
    2458:	4798      	blx	r3
	return M2M_SUCCESS;
    245a:	2400      	movs	r4, #0
}
    245c:	0020      	movs	r0, r4
    245e:	b002      	add	sp, #8
    2460:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2462:	2201      	movs	r2, #1
    2464:	4b1c      	ldr	r3, [pc, #112]	; (24d8 <nm_spi_init+0xe0>)
    2466:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2468:	4a21      	ldr	r2, [pc, #132]	; (24f0 <nm_spi_init+0xf8>)
    246a:	4922      	ldr	r1, [pc, #136]	; (24f4 <nm_spi_init+0xfc>)
    246c:	4822      	ldr	r0, [pc, #136]	; (24f8 <nm_spi_init+0x100>)
    246e:	4b23      	ldr	r3, [pc, #140]	; (24fc <nm_spi_init+0x104>)
    2470:	4798      	blx	r3
    2472:	4823      	ldr	r0, [pc, #140]	; (2500 <nm_spi_init+0x108>)
    2474:	4b23      	ldr	r3, [pc, #140]	; (2504 <nm_spi_init+0x10c>)
    2476:	4798      	blx	r3
    2478:	200d      	movs	r0, #13
    247a:	4b23      	ldr	r3, [pc, #140]	; (2508 <nm_spi_init+0x110>)
    247c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    247e:	4669      	mov	r1, sp
    2480:	4816      	ldr	r0, [pc, #88]	; (24dc <nm_spi_init+0xe4>)
    2482:	4b17      	ldr	r3, [pc, #92]	; (24e0 <nm_spi_init+0xe8>)
    2484:	4798      	blx	r3
    2486:	1e04      	subs	r4, r0, #0
    2488:	d1c2      	bne.n	2410 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    248a:	4a20      	ldr	r2, [pc, #128]	; (250c <nm_spi_init+0x114>)
    248c:	4919      	ldr	r1, [pc, #100]	; (24f4 <nm_spi_init+0xfc>)
    248e:	481a      	ldr	r0, [pc, #104]	; (24f8 <nm_spi_init+0x100>)
    2490:	4b1a      	ldr	r3, [pc, #104]	; (24fc <nm_spi_init+0x104>)
    2492:	4798      	blx	r3
    2494:	481e      	ldr	r0, [pc, #120]	; (2510 <nm_spi_init+0x118>)
    2496:	4b1b      	ldr	r3, [pc, #108]	; (2504 <nm_spi_init+0x10c>)
    2498:	4798      	blx	r3
    249a:	200d      	movs	r0, #13
    249c:	4b1a      	ldr	r3, [pc, #104]	; (2508 <nm_spi_init+0x110>)
    249e:	4798      	blx	r3
			return 0;
    24a0:	e7dc      	b.n	245c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    24a2:	4a1c      	ldr	r2, [pc, #112]	; (2514 <nm_spi_init+0x11c>)
    24a4:	4913      	ldr	r1, [pc, #76]	; (24f4 <nm_spi_init+0xfc>)
    24a6:	4814      	ldr	r0, [pc, #80]	; (24f8 <nm_spi_init+0x100>)
    24a8:	4b14      	ldr	r3, [pc, #80]	; (24fc <nm_spi_init+0x104>)
    24aa:	4798      	blx	r3
    24ac:	481a      	ldr	r0, [pc, #104]	; (2518 <nm_spi_init+0x120>)
    24ae:	4b15      	ldr	r3, [pc, #84]	; (2504 <nm_spi_init+0x10c>)
    24b0:	4798      	blx	r3
    24b2:	200d      	movs	r0, #13
    24b4:	4b14      	ldr	r3, [pc, #80]	; (2508 <nm_spi_init+0x110>)
    24b6:	4798      	blx	r3
			return 0;
    24b8:	e7d0      	b.n	245c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    24ba:	4a18      	ldr	r2, [pc, #96]	; (251c <nm_spi_init+0x124>)
    24bc:	490d      	ldr	r1, [pc, #52]	; (24f4 <nm_spi_init+0xfc>)
    24be:	480e      	ldr	r0, [pc, #56]	; (24f8 <nm_spi_init+0x100>)
    24c0:	4b0e      	ldr	r3, [pc, #56]	; (24fc <nm_spi_init+0x104>)
    24c2:	4798      	blx	r3
    24c4:	4816      	ldr	r0, [pc, #88]	; (2520 <nm_spi_init+0x128>)
    24c6:	4b0f      	ldr	r3, [pc, #60]	; (2504 <nm_spi_init+0x10c>)
    24c8:	4798      	blx	r3
    24ca:	200d      	movs	r0, #13
    24cc:	4b0e      	ldr	r3, [pc, #56]	; (2508 <nm_spi_init+0x110>)
    24ce:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    24d0:	2406      	movs	r4, #6
    24d2:	4264      	negs	r4, r4
    24d4:	e7c2      	b.n	245c <nm_spi_init+0x64>
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	20000208 	.word	0x20000208
    24dc:	0000e824 	.word	0x0000e824
    24e0:	00002215 	.word	0x00002215
    24e4:	00002105 	.word	0x00002105
    24e8:	000023b5 	.word	0x000023b5
    24ec:	000023e1 	.word	0x000023e1
    24f0:	000004c7 	.word	0x000004c7
    24f4:	00009668 	.word	0x00009668
    24f8:	00008f24 	.word	0x00008f24
    24fc:	00006efd 	.word	0x00006efd
    2500:	00009774 	.word	0x00009774
    2504:	00007019 	.word	0x00007019
    2508:	00006f31 	.word	0x00006f31
    250c:	000004ca 	.word	0x000004ca
    2510:	000097c4 	.word	0x000097c4
    2514:	000004d4 	.word	0x000004d4
    2518:	000097f0 	.word	0x000097f0
    251c:	000004de 	.word	0x000004de
    2520:	00009824 	.word	0x00009824

00002524 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2524:	b5f0      	push	{r4, r5, r6, r7, lr}
    2526:	46de      	mov	lr, fp
    2528:	4657      	mov	r7, sl
    252a:	464e      	mov	r6, r9
    252c:	4645      	mov	r5, r8
    252e:	b5e0      	push	{r5, r6, r7, lr}
    2530:	b087      	sub	sp, #28
    2532:	9002      	str	r0, [sp, #8]
    2534:	9103      	str	r1, [sp, #12]
    2536:	0016      	movs	r6, r2
    2538:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    253a:	2300      	movs	r3, #0
    253c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    253e:	2400      	movs	r4, #0
    2540:	4b3e      	ldr	r3, [pc, #248]	; (263c <nm_spi_read_block+0x118>)
    2542:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    2544:	46a9      	mov	r9, r5
    2546:	e037      	b.n	25b8 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    2548:	2301      	movs	r3, #1
    254a:	469b      	mov	fp, r3
		size = 2;
    254c:	3601      	adds	r6, #1
    254e:	e035      	b.n	25bc <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    2550:	20c8      	movs	r0, #200	; 0xc8
    2552:	4b3b      	ldr	r3, [pc, #236]	; (2640 <nm_spi_read_block+0x11c>)
    2554:	4798      	blx	r3
	if (result != N_OK) {
    2556:	2801      	cmp	r0, #1
    2558:	d045      	beq.n	25e6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    255a:	4a3a      	ldr	r2, [pc, #232]	; (2644 <nm_spi_read_block+0x120>)
    255c:	493a      	ldr	r1, [pc, #232]	; (2648 <nm_spi_read_block+0x124>)
    255e:	483b      	ldr	r0, [pc, #236]	; (264c <nm_spi_read_block+0x128>)
    2560:	4f3b      	ldr	r7, [pc, #236]	; (2650 <nm_spi_read_block+0x12c>)
    2562:	47b8      	blx	r7
    2564:	9902      	ldr	r1, [sp, #8]
    2566:	483b      	ldr	r0, [pc, #236]	; (2654 <nm_spi_read_block+0x130>)
    2568:	47b8      	blx	r7
    256a:	200d      	movs	r0, #13
    256c:	4b3a      	ldr	r3, [pc, #232]	; (2658 <nm_spi_read_block+0x134>)
    256e:	4798      	blx	r3
		nm_bsp_sleep(1);
    2570:	2001      	movs	r0, #1
    2572:	4f3a      	ldr	r7, [pc, #232]	; (265c <nm_spi_read_block+0x138>)
    2574:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2576:	9400      	str	r4, [sp, #0]
    2578:	0023      	movs	r3, r4
    257a:	0022      	movs	r2, r4
    257c:	0021      	movs	r1, r4
    257e:	20cf      	movs	r0, #207	; 0xcf
    2580:	4d2e      	ldr	r5, [pc, #184]	; (263c <nm_spi_read_block+0x118>)
    2582:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    2584:	20cf      	movs	r0, #207	; 0xcf
    2586:	4b2e      	ldr	r3, [pc, #184]	; (2640 <nm_spi_read_block+0x11c>)
    2588:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    258a:	4a35      	ldr	r2, [pc, #212]	; (2660 <nm_spi_read_block+0x13c>)
    258c:	492e      	ldr	r1, [pc, #184]	; (2648 <nm_spi_read_block+0x124>)
    258e:	482f      	ldr	r0, [pc, #188]	; (264c <nm_spi_read_block+0x128>)
    2590:	4b2f      	ldr	r3, [pc, #188]	; (2650 <nm_spi_read_block+0x12c>)
    2592:	469a      	mov	sl, r3
    2594:	4798      	blx	r3
    2596:	0033      	movs	r3, r6
    2598:	9a02      	ldr	r2, [sp, #8]
    259a:	4649      	mov	r1, r9
    259c:	4831      	ldr	r0, [pc, #196]	; (2664 <nm_spi_read_block+0x140>)
    259e:	47d0      	blx	sl
    25a0:	200d      	movs	r0, #13
    25a2:	4b2d      	ldr	r3, [pc, #180]	; (2658 <nm_spi_read_block+0x134>)
    25a4:	4798      	blx	r3
		nm_bsp_sleep(1);
    25a6:	2001      	movs	r0, #1
    25a8:	47b8      	blx	r7
    25aa:	2301      	movs	r3, #1
    25ac:	425b      	negs	r3, r3
    25ae:	469c      	mov	ip, r3
    25b0:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    25b2:	464b      	mov	r3, r9
    25b4:	2b00      	cmp	r3, #0
    25b6:	d038      	beq.n	262a <nm_spi_read_block+0x106>
	if (size == 1)
    25b8:	2e01      	cmp	r6, #1
    25ba:	d0c5      	beq.n	2548 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    25bc:	9400      	str	r4, [sp, #0]
    25be:	0033      	movs	r3, r6
    25c0:	0022      	movs	r2, r4
    25c2:	9d02      	ldr	r5, [sp, #8]
    25c4:	0029      	movs	r1, r5
    25c6:	20c8      	movs	r0, #200	; 0xc8
    25c8:	47c0      	blx	r8
	if (result != N_OK) {
    25ca:	2801      	cmp	r0, #1
    25cc:	d0c0      	beq.n	2550 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    25ce:	4a26      	ldr	r2, [pc, #152]	; (2668 <nm_spi_read_block+0x144>)
    25d0:	491d      	ldr	r1, [pc, #116]	; (2648 <nm_spi_read_block+0x124>)
    25d2:	481e      	ldr	r0, [pc, #120]	; (264c <nm_spi_read_block+0x128>)
    25d4:	4f1e      	ldr	r7, [pc, #120]	; (2650 <nm_spi_read_block+0x12c>)
    25d6:	47b8      	blx	r7
    25d8:	0029      	movs	r1, r5
    25da:	4824      	ldr	r0, [pc, #144]	; (266c <nm_spi_read_block+0x148>)
    25dc:	47b8      	blx	r7
    25de:	200d      	movs	r0, #13
    25e0:	4b1d      	ldr	r3, [pc, #116]	; (2658 <nm_spi_read_block+0x134>)
    25e2:	4798      	blx	r3
    25e4:	e7c4      	b.n	2570 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    25e6:	465b      	mov	r3, fp
    25e8:	2b00      	cmp	r3, #0
    25ea:	d016      	beq.n	261a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    25ec:	af05      	add	r7, sp, #20
    25ee:	0022      	movs	r2, r4
    25f0:	0031      	movs	r1, r6
    25f2:	0038      	movs	r0, r7
    25f4:	4b1e      	ldr	r3, [pc, #120]	; (2670 <nm_spi_read_block+0x14c>)
    25f6:	4798      	blx	r3
		buf[0] = tmp[0];
    25f8:	783b      	ldrb	r3, [r7, #0]
    25fa:	9a03      	ldr	r2, [sp, #12]
    25fc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    25fe:	2801      	cmp	r0, #1
    2600:	d011      	beq.n	2626 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2602:	4a1c      	ldr	r2, [pc, #112]	; (2674 <nm_spi_read_block+0x150>)
    2604:	4910      	ldr	r1, [pc, #64]	; (2648 <nm_spi_read_block+0x124>)
    2606:	4811      	ldr	r0, [pc, #68]	; (264c <nm_spi_read_block+0x128>)
    2608:	4b11      	ldr	r3, [pc, #68]	; (2650 <nm_spi_read_block+0x12c>)
    260a:	4798      	blx	r3
    260c:	481a      	ldr	r0, [pc, #104]	; (2678 <nm_spi_read_block+0x154>)
    260e:	4b1b      	ldr	r3, [pc, #108]	; (267c <nm_spi_read_block+0x158>)
    2610:	4798      	blx	r3
    2612:	200d      	movs	r0, #13
    2614:	4b10      	ldr	r3, [pc, #64]	; (2658 <nm_spi_read_block+0x134>)
    2616:	4798      	blx	r3
    2618:	e7aa      	b.n	2570 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    261a:	0022      	movs	r2, r4
    261c:	0031      	movs	r1, r6
    261e:	9803      	ldr	r0, [sp, #12]
    2620:	4b13      	ldr	r3, [pc, #76]	; (2670 <nm_spi_read_block+0x14c>)
    2622:	4798      	blx	r3
    2624:	e7eb      	b.n	25fe <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2626:	2000      	movs	r0, #0
    2628:	e001      	b.n	262e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    262a:	2006      	movs	r0, #6
    262c:	4240      	negs	r0, r0

	return s8Ret;
}
    262e:	b007      	add	sp, #28
    2630:	bc3c      	pop	{r2, r3, r4, r5}
    2632:	4690      	mov	r8, r2
    2634:	4699      	mov	r9, r3
    2636:	46a2      	mov	sl, r4
    2638:	46ab      	mov	fp, r5
    263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    263c:	00001d49 	.word	0x00001d49
    2640:	00001ee9 	.word	0x00001ee9
    2644:	00000463 	.word	0x00000463
    2648:	0000965c 	.word	0x0000965c
    264c:	00008f24 	.word	0x00008f24
    2650:	00006efd 	.word	0x00006efd
    2654:	00009878 	.word	0x00009878
    2658:	00006f31 	.word	0x00006f31
    265c:	00000195 	.word	0x00000195
    2660:	00000484 	.word	0x00000484
    2664:	000098d8 	.word	0x000098d8
    2668:	0000045d 	.word	0x0000045d
    266c:	00009848 	.word	0x00009848
    2670:	00001fbd 	.word	0x00001fbd
    2674:	00000473 	.word	0x00000473
    2678:	000098b0 	.word	0x000098b0
    267c:	00007019 	.word	0x00007019

00002680 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2680:	b5f0      	push	{r4, r5, r6, r7, lr}
    2682:	46de      	mov	lr, fp
    2684:	4647      	mov	r7, r8
    2686:	b580      	push	{r7, lr}
    2688:	b089      	sub	sp, #36	; 0x24
    268a:	9004      	str	r0, [sp, #16]
    268c:	468b      	mov	fp, r1
    268e:	9203      	str	r2, [sp, #12]
    2690:	260a      	movs	r6, #10
    2692:	2780      	movs	r7, #128	; 0x80
    2694:	01bf      	lsls	r7, r7, #6
    2696:	466b      	mov	r3, sp
    2698:	82df      	strh	r7, [r3, #22]
    269a:	0035      	movs	r5, r6
    269c:	e02d      	b.n	26fa <nm_spi_write_block+0x7a>
		size = 2;
    269e:	3301      	adds	r3, #1
    26a0:	9303      	str	r3, [sp, #12]
    26a2:	e02d      	b.n	2700 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    26a4:	4a83      	ldr	r2, [pc, #524]	; (28b4 <nm_spi_write_block+0x234>)
    26a6:	4984      	ldr	r1, [pc, #528]	; (28b8 <nm_spi_write_block+0x238>)
    26a8:	4884      	ldr	r0, [pc, #528]	; (28bc <nm_spi_write_block+0x23c>)
    26aa:	4c85      	ldr	r4, [pc, #532]	; (28c0 <nm_spi_write_block+0x240>)
    26ac:	47a0      	blx	r4
    26ae:	0031      	movs	r1, r6
    26b0:	4884      	ldr	r0, [pc, #528]	; (28c4 <nm_spi_write_block+0x244>)
    26b2:	47a0      	blx	r4
    26b4:	200d      	movs	r0, #13
    26b6:	4b84      	ldr	r3, [pc, #528]	; (28c8 <nm_spi_write_block+0x248>)
    26b8:	4798      	blx	r3
		nm_bsp_sleep(1);
    26ba:	2001      	movs	r0, #1
    26bc:	4c83      	ldr	r4, [pc, #524]	; (28cc <nm_spi_write_block+0x24c>)
    26be:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    26c0:	2300      	movs	r3, #0
    26c2:	9300      	str	r3, [sp, #0]
    26c4:	2200      	movs	r2, #0
    26c6:	2100      	movs	r1, #0
    26c8:	20cf      	movs	r0, #207	; 0xcf
    26ca:	4e81      	ldr	r6, [pc, #516]	; (28d0 <nm_spi_write_block+0x250>)
    26cc:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    26ce:	20cf      	movs	r0, #207	; 0xcf
    26d0:	4b80      	ldr	r3, [pc, #512]	; (28d4 <nm_spi_write_block+0x254>)
    26d2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    26d4:	4a80      	ldr	r2, [pc, #512]	; (28d8 <nm_spi_write_block+0x258>)
    26d6:	4978      	ldr	r1, [pc, #480]	; (28b8 <nm_spi_write_block+0x238>)
    26d8:	4878      	ldr	r0, [pc, #480]	; (28bc <nm_spi_write_block+0x23c>)
    26da:	4e79      	ldr	r6, [pc, #484]	; (28c0 <nm_spi_write_block+0x240>)
    26dc:	47b0      	blx	r6
    26de:	9b03      	ldr	r3, [sp, #12]
    26e0:	9a04      	ldr	r2, [sp, #16]
    26e2:	0029      	movs	r1, r5
    26e4:	487d      	ldr	r0, [pc, #500]	; (28dc <nm_spi_write_block+0x25c>)
    26e6:	47b0      	blx	r6
    26e8:	200d      	movs	r0, #13
    26ea:	4b77      	ldr	r3, [pc, #476]	; (28c8 <nm_spi_write_block+0x248>)
    26ec:	4798      	blx	r3
		nm_bsp_sleep(1);
    26ee:	2001      	movs	r0, #1
    26f0:	47a0      	blx	r4
    26f2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    26f4:	2d00      	cmp	r5, #0
    26f6:	d100      	bne.n	26fa <nm_spi_write_block+0x7a>
    26f8:	e0d5      	b.n	28a6 <nm_spi_write_block+0x226>
	if (size == 1)
    26fa:	9b03      	ldr	r3, [sp, #12]
    26fc:	2b01      	cmp	r3, #1
    26fe:	d0ce      	beq.n	269e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2700:	2300      	movs	r3, #0
    2702:	9300      	str	r3, [sp, #0]
    2704:	9b03      	ldr	r3, [sp, #12]
    2706:	2200      	movs	r2, #0
    2708:	9e04      	ldr	r6, [sp, #16]
    270a:	0031      	movs	r1, r6
    270c:	20c7      	movs	r0, #199	; 0xc7
    270e:	4c70      	ldr	r4, [pc, #448]	; (28d0 <nm_spi_write_block+0x250>)
    2710:	47a0      	blx	r4
	if (result != N_OK) {
    2712:	2801      	cmp	r0, #1
    2714:	d1c6      	bne.n	26a4 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    2716:	20c7      	movs	r0, #199	; 0xc7
    2718:	4b6e      	ldr	r3, [pc, #440]	; (28d4 <nm_spi_write_block+0x254>)
    271a:	4798      	blx	r3
	if (result != N_OK) {
    271c:	2801      	cmp	r0, #1
    271e:	d00c      	beq.n	273a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2720:	22f4      	movs	r2, #244	; 0xf4
    2722:	0092      	lsls	r2, r2, #2
    2724:	4964      	ldr	r1, [pc, #400]	; (28b8 <nm_spi_write_block+0x238>)
    2726:	4865      	ldr	r0, [pc, #404]	; (28bc <nm_spi_write_block+0x23c>)
    2728:	4c65      	ldr	r4, [pc, #404]	; (28c0 <nm_spi_write_block+0x240>)
    272a:	47a0      	blx	r4
    272c:	9904      	ldr	r1, [sp, #16]
    272e:	486c      	ldr	r0, [pc, #432]	; (28e0 <nm_spi_write_block+0x260>)
    2730:	47a0      	blx	r4
    2732:	200d      	movs	r0, #13
    2734:	4b64      	ldr	r3, [pc, #400]	; (28c8 <nm_spi_write_block+0x248>)
    2736:	4798      	blx	r3
    2738:	e7bf      	b.n	26ba <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    273a:	2200      	movs	r2, #0
    273c:	ab07      	add	r3, sp, #28
    273e:	801a      	strh	r2, [r3, #0]
    2740:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    2742:	2600      	movs	r6, #0
				order = 0x1;
    2744:	46a8      	mov	r8, r5
    2746:	0035      	movs	r5, r6
    2748:	0026      	movs	r6, r4
    274a:	e021      	b.n	2790 <nm_spi_write_block+0x110>
				order = 0x2;
    274c:	2300      	movs	r3, #0
    274e:	42b7      	cmp	r7, r6
    2750:	415b      	adcs	r3, r3
    2752:	3302      	adds	r3, #2
		cmd |= order;
    2754:	200b      	movs	r0, #11
    2756:	aa04      	add	r2, sp, #16
    2758:	4694      	mov	ip, r2
    275a:	4460      	add	r0, ip
    275c:	2210      	movs	r2, #16
    275e:	4252      	negs	r2, r2
    2760:	4313      	orrs	r3, r2
    2762:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2764:	2101      	movs	r1, #1
    2766:	4b5f      	ldr	r3, [pc, #380]	; (28e4 <nm_spi_write_block+0x264>)
    2768:	4798      	blx	r3
    276a:	2800      	cmp	r0, #0
    276c:	d11d      	bne.n	27aa <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    276e:	465b      	mov	r3, fp
    2770:	1958      	adds	r0, r3, r5
    2772:	0021      	movs	r1, r4
    2774:	4b5b      	ldr	r3, [pc, #364]	; (28e4 <nm_spi_write_block+0x264>)
    2776:	4798      	blx	r3
    2778:	2800      	cmp	r0, #0
    277a:	d130      	bne.n	27de <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    277c:	4b5a      	ldr	r3, [pc, #360]	; (28e8 <nm_spi_write_block+0x268>)
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	2b00      	cmp	r3, #0
    2782:	d039      	beq.n	27f8 <nm_spi_write_block+0x178>
		ix += nbytes;
    2784:	1965      	adds	r5, r4, r5
    2786:	b22d      	sxth	r5, r5
		sz -= nbytes;
    2788:	1b36      	subs	r6, r6, r4
    278a:	b2b6      	uxth	r6, r6
	} while (sz);
    278c:	2e00      	cmp	r6, #0
    278e:	d053      	beq.n	2838 <nm_spi_write_block+0x1b8>
    2790:	1c34      	adds	r4, r6, #0
    2792:	42be      	cmp	r6, r7
    2794:	d901      	bls.n	279a <nm_spi_write_block+0x11a>
    2796:	466b      	mov	r3, sp
    2798:	8adc      	ldrh	r4, [r3, #22]
    279a:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    279c:	2d00      	cmp	r5, #0
    279e:	d1d5      	bne.n	274c <nm_spi_write_block+0xcc>
				order = 0x3;
    27a0:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    27a2:	42be      	cmp	r6, r7
    27a4:	d9d6      	bls.n	2754 <nm_spi_write_block+0xd4>
				order = 0x1;
    27a6:	3b02      	subs	r3, #2
    27a8:	e7d4      	b.n	2754 <nm_spi_write_block+0xd4>
    27aa:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    27ac:	22d4      	movs	r2, #212	; 0xd4
    27ae:	0092      	lsls	r2, r2, #2
    27b0:	494e      	ldr	r1, [pc, #312]	; (28ec <nm_spi_write_block+0x26c>)
    27b2:	4842      	ldr	r0, [pc, #264]	; (28bc <nm_spi_write_block+0x23c>)
    27b4:	4b42      	ldr	r3, [pc, #264]	; (28c0 <nm_spi_write_block+0x240>)
    27b6:	4798      	blx	r3
    27b8:	484d      	ldr	r0, [pc, #308]	; (28f0 <nm_spi_write_block+0x270>)
    27ba:	4b4e      	ldr	r3, [pc, #312]	; (28f4 <nm_spi_write_block+0x274>)
    27bc:	4798      	blx	r3
    27be:	200d      	movs	r0, #13
    27c0:	4b41      	ldr	r3, [pc, #260]	; (28c8 <nm_spi_write_block+0x248>)
    27c2:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    27c4:	22f8      	movs	r2, #248	; 0xf8
    27c6:	0092      	lsls	r2, r2, #2
    27c8:	493b      	ldr	r1, [pc, #236]	; (28b8 <nm_spi_write_block+0x238>)
    27ca:	483c      	ldr	r0, [pc, #240]	; (28bc <nm_spi_write_block+0x23c>)
    27cc:	4b3c      	ldr	r3, [pc, #240]	; (28c0 <nm_spi_write_block+0x240>)
    27ce:	4798      	blx	r3
    27d0:	4849      	ldr	r0, [pc, #292]	; (28f8 <nm_spi_write_block+0x278>)
    27d2:	4b48      	ldr	r3, [pc, #288]	; (28f4 <nm_spi_write_block+0x274>)
    27d4:	4798      	blx	r3
    27d6:	200d      	movs	r0, #13
    27d8:	4b3b      	ldr	r3, [pc, #236]	; (28c8 <nm_spi_write_block+0x248>)
    27da:	4798      	blx	r3
    27dc:	e76d      	b.n	26ba <nm_spi_write_block+0x3a>
    27de:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    27e0:	4a46      	ldr	r2, [pc, #280]	; (28fc <nm_spi_write_block+0x27c>)
    27e2:	4942      	ldr	r1, [pc, #264]	; (28ec <nm_spi_write_block+0x26c>)
    27e4:	4835      	ldr	r0, [pc, #212]	; (28bc <nm_spi_write_block+0x23c>)
    27e6:	4b36      	ldr	r3, [pc, #216]	; (28c0 <nm_spi_write_block+0x240>)
    27e8:	4798      	blx	r3
    27ea:	4845      	ldr	r0, [pc, #276]	; (2900 <nm_spi_write_block+0x280>)
    27ec:	4b41      	ldr	r3, [pc, #260]	; (28f4 <nm_spi_write_block+0x274>)
    27ee:	4798      	blx	r3
    27f0:	200d      	movs	r0, #13
    27f2:	4b35      	ldr	r3, [pc, #212]	; (28c8 <nm_spi_write_block+0x248>)
    27f4:	4798      	blx	r3
    27f6:	e7e5      	b.n	27c4 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    27f8:	2102      	movs	r1, #2
    27fa:	a807      	add	r0, sp, #28
    27fc:	4b39      	ldr	r3, [pc, #228]	; (28e4 <nm_spi_write_block+0x264>)
    27fe:	4798      	blx	r3
    2800:	2800      	cmp	r0, #0
    2802:	d0bf      	beq.n	2784 <nm_spi_write_block+0x104>
    2804:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2806:	4a3f      	ldr	r2, [pc, #252]	; (2904 <nm_spi_write_block+0x284>)
    2808:	4938      	ldr	r1, [pc, #224]	; (28ec <nm_spi_write_block+0x26c>)
    280a:	482c      	ldr	r0, [pc, #176]	; (28bc <nm_spi_write_block+0x23c>)
    280c:	4b2c      	ldr	r3, [pc, #176]	; (28c0 <nm_spi_write_block+0x240>)
    280e:	4798      	blx	r3
    2810:	483d      	ldr	r0, [pc, #244]	; (2908 <nm_spi_write_block+0x288>)
    2812:	4b38      	ldr	r3, [pc, #224]	; (28f4 <nm_spi_write_block+0x274>)
    2814:	4798      	blx	r3
    2816:	200d      	movs	r0, #13
    2818:	4b2b      	ldr	r3, [pc, #172]	; (28c8 <nm_spi_write_block+0x248>)
    281a:	4798      	blx	r3
    281c:	e7d2      	b.n	27c4 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    281e:	223c      	movs	r2, #60	; 0x3c
    2820:	32ff      	adds	r2, #255	; 0xff
    2822:	493a      	ldr	r1, [pc, #232]	; (290c <nm_spi_write_block+0x28c>)
    2824:	4825      	ldr	r0, [pc, #148]	; (28bc <nm_spi_write_block+0x23c>)
    2826:	4b26      	ldr	r3, [pc, #152]	; (28c0 <nm_spi_write_block+0x240>)
    2828:	4798      	blx	r3
    282a:	4839      	ldr	r0, [pc, #228]	; (2910 <nm_spi_write_block+0x290>)
    282c:	4b31      	ldr	r3, [pc, #196]	; (28f4 <nm_spi_write_block+0x274>)
    282e:	4798      	blx	r3
    2830:	200d      	movs	r0, #13
    2832:	4b25      	ldr	r3, [pc, #148]	; (28c8 <nm_spi_write_block+0x248>)
    2834:	4798      	blx	r3
    2836:	e027      	b.n	2888 <nm_spi_write_block+0x208>
    2838:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    283a:	4b2b      	ldr	r3, [pc, #172]	; (28e8 <nm_spi_write_block+0x268>)
    283c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    283e:	1e63      	subs	r3, r4, #1
    2840:	419c      	sbcs	r4, r3
    2842:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    2844:	b2a1      	uxth	r1, r4
    2846:	a807      	add	r0, sp, #28
    2848:	4b32      	ldr	r3, [pc, #200]	; (2914 <nm_spi_write_block+0x294>)
    284a:	4798      	blx	r3
    284c:	2800      	cmp	r0, #0
    284e:	d1e6      	bne.n	281e <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    2850:	ab08      	add	r3, sp, #32
    2852:	191b      	adds	r3, r3, r4
    2854:	3b05      	subs	r3, #5
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d106      	bne.n	286a <nm_spi_write_block+0x1ea>
    285c:	ab08      	add	r3, sp, #32
    285e:	469c      	mov	ip, r3
    2860:	4464      	add	r4, ip
    2862:	3c06      	subs	r4, #6
    2864:	7823      	ldrb	r3, [r4, #0]
    2866:	2bc3      	cmp	r3, #195	; 0xc3
    2868:	d01b      	beq.n	28a2 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    286a:	22a1      	movs	r2, #161	; 0xa1
    286c:	0052      	lsls	r2, r2, #1
    286e:	4927      	ldr	r1, [pc, #156]	; (290c <nm_spi_write_block+0x28c>)
    2870:	4812      	ldr	r0, [pc, #72]	; (28bc <nm_spi_write_block+0x23c>)
    2872:	4c13      	ldr	r4, [pc, #76]	; (28c0 <nm_spi_write_block+0x240>)
    2874:	47a0      	blx	r4
    2876:	a907      	add	r1, sp, #28
    2878:	788b      	ldrb	r3, [r1, #2]
    287a:	784a      	ldrb	r2, [r1, #1]
    287c:	7809      	ldrb	r1, [r1, #0]
    287e:	4826      	ldr	r0, [pc, #152]	; (2918 <nm_spi_write_block+0x298>)
    2880:	47a0      	blx	r4
    2882:	200d      	movs	r0, #13
    2884:	4b10      	ldr	r3, [pc, #64]	; (28c8 <nm_spi_write_block+0x248>)
    2886:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2888:	22fa      	movs	r2, #250	; 0xfa
    288a:	0092      	lsls	r2, r2, #2
    288c:	490a      	ldr	r1, [pc, #40]	; (28b8 <nm_spi_write_block+0x238>)
    288e:	480b      	ldr	r0, [pc, #44]	; (28bc <nm_spi_write_block+0x23c>)
    2890:	4b0b      	ldr	r3, [pc, #44]	; (28c0 <nm_spi_write_block+0x240>)
    2892:	4798      	blx	r3
    2894:	4818      	ldr	r0, [pc, #96]	; (28f8 <nm_spi_write_block+0x278>)
    2896:	4b17      	ldr	r3, [pc, #92]	; (28f4 <nm_spi_write_block+0x274>)
    2898:	4798      	blx	r3
    289a:	200d      	movs	r0, #13
    289c:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <nm_spi_write_block+0x248>)
    289e:	4798      	blx	r3
    28a0:	e70b      	b.n	26ba <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    28a2:	2000      	movs	r0, #0
    28a4:	e001      	b.n	28aa <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    28a6:	2006      	movs	r0, #6
    28a8:	4240      	negs	r0, r0

	return s8Ret;
}
    28aa:	b009      	add	sp, #36	; 0x24
    28ac:	bc0c      	pop	{r2, r3}
    28ae:	4690      	mov	r8, r2
    28b0:	469b      	mov	fp, r3
    28b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b4:	000003ca 	.word	0x000003ca
    28b8:	0000963c 	.word	0x0000963c
    28bc:	00008f24 	.word	0x00008f24
    28c0:	00006efd 	.word	0x00006efd
    28c4:	000098f4 	.word	0x000098f4
    28c8:	00006f31 	.word	0x00006f31
    28cc:	00000195 	.word	0x00000195
    28d0:	00001d49 	.word	0x00001d49
    28d4:	00001ee9 	.word	0x00001ee9
    28d8:	000003f2 	.word	0x000003f2
    28dc:	000098d8 	.word	0x000098d8
    28e0:	00009924 	.word	0x00009924
    28e4:	00001d29 	.word	0x00001d29
    28e8:	20000208 	.word	0x20000208
    28ec:	0000961c 	.word	0x0000961c
    28f0:	0000995c 	.word	0x0000995c
    28f4:	00007019 	.word	0x00007019
    28f8:	00009a50 	.word	0x00009a50
    28fc:	00000359 	.word	0x00000359
    2900:	00009994 	.word	0x00009994
    2904:	00000363 	.word	0x00000363
    2908:	000099c8 	.word	0x000099c8
    290c:	000095f0 	.word	0x000095f0
    2910:	00009a00 	.word	0x00009a00
    2914:	00001ec9 	.word	0x00001ec9
    2918:	00009a20 	.word	0x00009a20

0000291c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    291c:	b5f0      	push	{r4, r5, r6, r7, lr}
    291e:	46de      	mov	lr, fp
    2920:	4657      	mov	r7, sl
    2922:	464e      	mov	r6, r9
    2924:	4645      	mov	r5, r8
    2926:	b5e0      	push	{r5, r6, r7, lr}
    2928:	b085      	sub	sp, #20
    292a:	9001      	str	r0, [sp, #4]
    292c:	000e      	movs	r6, r1
    292e:	9202      	str	r2, [sp, #8]
    2930:	001d      	movs	r5, r3
    2932:	ab0e      	add	r3, sp, #56	; 0x38
    2934:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    2936:	2c00      	cmp	r4, #0
    2938:	d064      	beq.n	2a04 <Socket_ReadSocketData+0xe8>
    293a:	0103      	lsls	r3, r0, #4
    293c:	4935      	ldr	r1, [pc, #212]	; (2a14 <Socket_ReadSocketData+0xf8>)
    293e:	585b      	ldr	r3, [r3, r1]
    2940:	2b00      	cmp	r3, #0
    2942:	d05f      	beq.n	2a04 <Socket_ReadSocketData+0xe8>
    2944:	0101      	lsls	r1, r0, #4
    2946:	4b33      	ldr	r3, [pc, #204]	; (2a14 <Socket_ReadSocketData+0xf8>)
    2948:	185b      	adds	r3, r3, r1
    294a:	889b      	ldrh	r3, [r3, #4]
    294c:	b29b      	uxth	r3, r3
    294e:	2b00      	cmp	r3, #0
    2950:	d058      	beq.n	2a04 <Socket_ReadSocketData+0xe8>
    2952:	4b30      	ldr	r3, [pc, #192]	; (2a14 <Socket_ReadSocketData+0xf8>)
    2954:	185b      	adds	r3, r3, r1
    2956:	7a9b      	ldrb	r3, [r3, #10]
    2958:	2b01      	cmp	r3, #1
    295a:	d153      	bne.n	2a04 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    295c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    295e:	4b2d      	ldr	r3, [pc, #180]	; (2a14 <Socket_ReadSocketData+0xf8>)
    2960:	469b      	mov	fp, r3
    2962:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2964:	465b      	mov	r3, fp
    2966:	220a      	movs	r2, #10
    2968:	4690      	mov	r8, r2
    296a:	44d8      	add	r8, fp
    296c:	468a      	mov	sl, r1
    296e:	9500      	str	r5, [sp, #0]
    2970:	9303      	str	r3, [sp, #12]
    2972:	e015      	b.n	29a0 <Socket_ReadSocketData+0x84>
    2974:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    2976:	2301      	movs	r3, #1
    2978:	e01c      	b.n	29b4 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    297a:	3301      	adds	r3, #1
    297c:	2200      	movs	r2, #0
    297e:	2100      	movs	r1, #0
    2980:	2000      	movs	r0, #0
    2982:	4c25      	ldr	r4, [pc, #148]	; (2a18 <Socket_ReadSocketData+0xfc>)
    2984:	47a0      	blx	r4
    2986:	e03d      	b.n	2a04 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2988:	4824      	ldr	r0, [pc, #144]	; (2a1c <Socket_ReadSocketData+0x100>)
    298a:	4d25      	ldr	r5, [pc, #148]	; (2a20 <Socket_ReadSocketData+0x104>)
    298c:	47a8      	blx	r5
    298e:	0021      	movs	r1, r4
    2990:	4824      	ldr	r0, [pc, #144]	; (2a24 <Socket_ReadSocketData+0x108>)
    2992:	47a8      	blx	r5
    2994:	200d      	movs	r0, #13
    2996:	4b24      	ldr	r3, [pc, #144]	; (2a28 <Socket_ReadSocketData+0x10c>)
    2998:	4798      	blx	r3
				break;
    299a:	e033      	b.n	2a04 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    299c:	2c00      	cmp	r4, #0
    299e:	d031      	beq.n	2a04 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    29a0:	465b      	mov	r3, fp
    29a2:	889b      	ldrh	r3, [r3, #4]
    29a4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    29a6:	b21b      	sxth	r3, r3
    29a8:	2b00      	cmp	r3, #0
    29aa:	dde3      	ble.n	2974 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    29ac:	9b03      	ldr	r3, [sp, #12]
    29ae:	889d      	ldrh	r5, [r3, #4]
    29b0:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    29b2:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    29b4:	4a17      	ldr	r2, [pc, #92]	; (2a14 <Socket_ReadSocketData+0xf8>)
    29b6:	4651      	mov	r1, sl
    29b8:	5889      	ldr	r1, [r1, r2]
    29ba:	002a      	movs	r2, r5
    29bc:	9800      	ldr	r0, [sp, #0]
    29be:	4f16      	ldr	r7, [pc, #88]	; (2a18 <Socket_ReadSocketData+0xfc>)
    29c0:	47b8      	blx	r7
    29c2:	2800      	cmp	r0, #0
    29c4:	d1e0      	bne.n	2988 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    29c6:	4b13      	ldr	r3, [pc, #76]	; (2a14 <Socket_ReadSocketData+0xf8>)
    29c8:	4652      	mov	r2, sl
    29ca:	58d3      	ldr	r3, [r2, r3]
    29cc:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    29ce:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    29d0:	88f3      	ldrh	r3, [r6, #6]
    29d2:	1b5b      	subs	r3, r3, r5
    29d4:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    29d6:	4b15      	ldr	r3, [pc, #84]	; (2a2c <Socket_ReadSocketData+0x110>)
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	2b00      	cmp	r3, #0
    29dc:	d005      	beq.n	29ea <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    29de:	4b13      	ldr	r3, [pc, #76]	; (2a2c <Socket_ReadSocketData+0x110>)
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	0032      	movs	r2, r6
    29e4:	9902      	ldr	r1, [sp, #8]
    29e6:	9801      	ldr	r0, [sp, #4]
    29e8:	4798      	blx	r3
				u16ReadCount -= u16Read;
    29ea:	1b64      	subs	r4, r4, r5
    29ec:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    29ee:	9b00      	ldr	r3, [sp, #0]
    29f0:	469c      	mov	ip, r3
    29f2:	44ac      	add	ip, r5
    29f4:	4663      	mov	r3, ip
    29f6:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    29f8:	4643      	mov	r3, r8
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	2b00      	cmp	r3, #0
    29fe:	d1cd      	bne.n	299c <Socket_ReadSocketData+0x80>
    2a00:	2c00      	cmp	r4, #0
    2a02:	d1ba      	bne.n	297a <Socket_ReadSocketData+0x5e>
	}
}
    2a04:	b005      	add	sp, #20
    2a06:	bc3c      	pop	{r2, r3, r4, r5}
    2a08:	4690      	mov	r8, r2
    2a0a:	4699      	mov	r9, r3
    2a0c:	46a2      	mov	sl, r4
    2a0e:	46ab      	mov	fp, r5
    2a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	20000494 	.word	0x20000494
    2a18:	00000cbd 	.word	0x00000cbd
    2a1c:	00009254 	.word	0x00009254
    2a20:	00006efd 	.word	0x00006efd
    2a24:	00009cb8 	.word	0x00009cb8
    2a28:	00006f31 	.word	0x00006f31
    2a2c:	20000544 	.word	0x20000544

00002a30 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46d6      	mov	lr, sl
    2a34:	464f      	mov	r7, r9
    2a36:	4646      	mov	r6, r8
    2a38:	b5c0      	push	{r6, r7, lr}
    2a3a:	b09a      	sub	sp, #104	; 0x68
    2a3c:	000d      	movs	r5, r1
    2a3e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    2a40:	2841      	cmp	r0, #65	; 0x41
    2a42:	d039      	beq.n	2ab8 <m2m_ip_cb+0x88>
    2a44:	2854      	cmp	r0, #84	; 0x54
    2a46:	d037      	beq.n	2ab8 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2a48:	2842      	cmp	r0, #66	; 0x42
    2a4a:	d053      	beq.n	2af4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2a4c:	2843      	cmp	r0, #67	; 0x43
    2a4e:	d06a      	beq.n	2b26 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2a50:	2844      	cmp	r0, #68	; 0x44
    2a52:	d100      	bne.n	2a56 <m2m_ip_cb+0x26>
    2a54:	e0af      	b.n	2bb6 <m2m_ip_cb+0x186>
    2a56:	284b      	cmp	r0, #75	; 0x4b
    2a58:	d100      	bne.n	2a5c <m2m_ip_cb+0x2c>
    2a5a:	e0ac      	b.n	2bb6 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2a5c:	284a      	cmp	r0, #74	; 0x4a
    2a5e:	d100      	bne.n	2a62 <m2m_ip_cb+0x32>
    2a60:	e0cf      	b.n	2c02 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2a62:	2846      	cmp	r0, #70	; 0x46
    2a64:	d100      	bne.n	2a68 <m2m_ip_cb+0x38>
    2a66:	e0e5      	b.n	2c34 <m2m_ip_cb+0x204>
    2a68:	2848      	cmp	r0, #72	; 0x48
    2a6a:	d100      	bne.n	2a6e <m2m_ip_cb+0x3e>
    2a6c:	e10e      	b.n	2c8c <m2m_ip_cb+0x25c>
    2a6e:	284d      	cmp	r0, #77	; 0x4d
    2a70:	d100      	bne.n	2a74 <m2m_ip_cb+0x44>
    2a72:	e0dc      	b.n	2c2e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a74:	2845      	cmp	r0, #69	; 0x45
    2a76:	d100      	bne.n	2a7a <m2m_ip_cb+0x4a>
    2a78:	e12c      	b.n	2cd4 <m2m_ip_cb+0x2a4>
    2a7a:	2847      	cmp	r0, #71	; 0x47
    2a7c:	d100      	bne.n	2a80 <m2m_ip_cb+0x50>
    2a7e:	e14d      	b.n	2d1c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2a80:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a82:	284c      	cmp	r0, #76	; 0x4c
    2a84:	d100      	bne.n	2a88 <m2m_ip_cb+0x58>
    2a86:	e126      	b.n	2cd6 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2a88:	2852      	cmp	r0, #82	; 0x52
    2a8a:	d12d      	bne.n	2ae8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2a8c:	2301      	movs	r3, #1
    2a8e:	2214      	movs	r2, #20
    2a90:	a909      	add	r1, sp, #36	; 0x24
    2a92:	0020      	movs	r0, r4
    2a94:	4ca2      	ldr	r4, [pc, #648]	; (2d20 <m2m_ip_cb+0x2f0>)
    2a96:	47a0      	blx	r4
    2a98:	2800      	cmp	r0, #0
    2a9a:	d125      	bne.n	2ae8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2a9c:	4ba1      	ldr	r3, [pc, #644]	; (2d24 <m2m_ip_cb+0x2f4>)
    2a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2aa0:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2aa2:	681b      	ldr	r3, [r3, #0]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d01f      	beq.n	2ae8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2aa8:	4b9e      	ldr	r3, [pc, #632]	; (2d24 <m2m_ip_cb+0x2f4>)
    2aaa:	681c      	ldr	r4, [r3, #0]
    2aac:	ab09      	add	r3, sp, #36	; 0x24
    2aae:	7c1a      	ldrb	r2, [r3, #16]
    2ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ab4:	47a0      	blx	r4
			}
		}
	}
}
    2ab6:	e017      	b.n	2ae8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2ab8:	2300      	movs	r3, #0
    2aba:	2204      	movs	r2, #4
    2abc:	a909      	add	r1, sp, #36	; 0x24
    2abe:	0020      	movs	r0, r4
    2ac0:	4c97      	ldr	r4, [pc, #604]	; (2d20 <m2m_ip_cb+0x2f0>)
    2ac2:	47a0      	blx	r4
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d10f      	bne.n	2ae8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2ac8:	ab09      	add	r3, sp, #36	; 0x24
    2aca:	785a      	ldrb	r2, [r3, #1]
    2acc:	ab05      	add	r3, sp, #20
    2ace:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2ad0:	4b95      	ldr	r3, [pc, #596]	; (2d28 <m2m_ip_cb+0x2f8>)
    2ad2:	681b      	ldr	r3, [r3, #0]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d007      	beq.n	2ae8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2ad8:	4b93      	ldr	r3, [pc, #588]	; (2d28 <m2m_ip_cb+0x2f8>)
    2ada:	681b      	ldr	r3, [r3, #0]
    2adc:	aa09      	add	r2, sp, #36	; 0x24
    2ade:	2000      	movs	r0, #0
    2ae0:	5610      	ldrsb	r0, [r2, r0]
    2ae2:	aa05      	add	r2, sp, #20
    2ae4:	2101      	movs	r1, #1
    2ae6:	4798      	blx	r3
}
    2ae8:	b01a      	add	sp, #104	; 0x68
    2aea:	bc1c      	pop	{r2, r3, r4}
    2aec:	4690      	mov	r8, r2
    2aee:	4699      	mov	r9, r3
    2af0:	46a2      	mov	sl, r4
    2af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2af4:	2300      	movs	r3, #0
    2af6:	2204      	movs	r2, #4
    2af8:	a909      	add	r1, sp, #36	; 0x24
    2afa:	0020      	movs	r0, r4
    2afc:	4c88      	ldr	r4, [pc, #544]	; (2d20 <m2m_ip_cb+0x2f0>)
    2afe:	47a0      	blx	r4
    2b00:	2800      	cmp	r0, #0
    2b02:	d1f1      	bne.n	2ae8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2b04:	ab09      	add	r3, sp, #36	; 0x24
    2b06:	785a      	ldrb	r2, [r3, #1]
    2b08:	ab05      	add	r3, sp, #20
    2b0a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2b0c:	4b86      	ldr	r3, [pc, #536]	; (2d28 <m2m_ip_cb+0x2f8>)
    2b0e:	681b      	ldr	r3, [r3, #0]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d0e9      	beq.n	2ae8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2b14:	4b84      	ldr	r3, [pc, #528]	; (2d28 <m2m_ip_cb+0x2f8>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	aa09      	add	r2, sp, #36	; 0x24
    2b1a:	2000      	movs	r0, #0
    2b1c:	5610      	ldrsb	r0, [r2, r0]
    2b1e:	aa05      	add	r2, sp, #20
    2b20:	2102      	movs	r1, #2
    2b22:	4798      	blx	r3
    2b24:	e7e0      	b.n	2ae8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2b26:	2300      	movs	r3, #0
    2b28:	220c      	movs	r2, #12
    2b2a:	a905      	add	r1, sp, #20
    2b2c:	0020      	movs	r0, r4
    2b2e:	4c7c      	ldr	r4, [pc, #496]	; (2d20 <m2m_ip_cb+0x2f0>)
    2b30:	47a0      	blx	r4
    2b32:	2800      	cmp	r0, #0
    2b34:	d1d8      	bne.n	2ae8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2b36:	ab05      	add	r3, sp, #20
    2b38:	2209      	movs	r2, #9
    2b3a:	569a      	ldrsb	r2, [r3, r2]
    2b3c:	2a00      	cmp	r2, #0
    2b3e:	db24      	blt.n	2b8a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2b40:	0018      	movs	r0, r3
    2b42:	2108      	movs	r1, #8
    2b44:	5659      	ldrsb	r1, [r3, r1]
    2b46:	4b79      	ldr	r3, [pc, #484]	; (2d2c <m2m_ip_cb+0x2fc>)
    2b48:	0109      	lsls	r1, r1, #4
    2b4a:	1859      	adds	r1, r3, r1
    2b4c:	7ac9      	ldrb	r1, [r1, #11]
    2b4e:	b2c9      	uxtb	r1, r1
    2b50:	0114      	lsls	r4, r2, #4
    2b52:	191b      	adds	r3, r3, r4
    2b54:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2b56:	2101      	movs	r1, #1
    2b58:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2b5a:	8941      	ldrh	r1, [r0, #10]
    2b5c:	3908      	subs	r1, #8
    2b5e:	b289      	uxth	r1, r1
    2b60:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2b62:	4973      	ldr	r1, [pc, #460]	; (2d30 <m2m_ip_cb+0x300>)
    2b64:	880b      	ldrh	r3, [r1, #0]
    2b66:	3301      	adds	r3, #1
    2b68:	b29b      	uxth	r3, r3
    2b6a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2b6c:	880b      	ldrh	r3, [r1, #0]
    2b6e:	b29b      	uxth	r3, r3
    2b70:	2b00      	cmp	r3, #0
    2b72:	d103      	bne.n	2b7c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2b74:	880b      	ldrh	r3, [r1, #0]
    2b76:	3301      	adds	r3, #1
    2b78:	b29b      	uxth	r3, r3
    2b7a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2b7c:	4b6c      	ldr	r3, [pc, #432]	; (2d30 <m2m_ip_cb+0x300>)
    2b7e:	8819      	ldrh	r1, [r3, #0]
    2b80:	b289      	uxth	r1, r1
    2b82:	0110      	lsls	r0, r2, #4
    2b84:	4b69      	ldr	r3, [pc, #420]	; (2d2c <m2m_ip_cb+0x2fc>)
    2b86:	181b      	adds	r3, r3, r0
    2b88:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2b8a:	ab09      	add	r3, sp, #36	; 0x24
    2b8c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2b8e:	2202      	movs	r2, #2
    2b90:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2b92:	aa05      	add	r2, sp, #20
    2b94:	8851      	ldrh	r1, [r2, #2]
    2b96:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2b98:	9a06      	ldr	r2, [sp, #24]
    2b9a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2b9c:	4b62      	ldr	r3, [pc, #392]	; (2d28 <m2m_ip_cb+0x2f8>)
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d0a1      	beq.n	2ae8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2ba4:	4b60      	ldr	r3, [pc, #384]	; (2d28 <m2m_ip_cb+0x2f8>)
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	aa05      	add	r2, sp, #20
    2baa:	2008      	movs	r0, #8
    2bac:	5610      	ldrsb	r0, [r2, r0]
    2bae:	aa09      	add	r2, sp, #36	; 0x24
    2bb0:	2104      	movs	r1, #4
    2bb2:	4798      	blx	r3
    2bb4:	e798      	b.n	2ae8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2bb6:	2300      	movs	r3, #0
    2bb8:	2204      	movs	r2, #4
    2bba:	a909      	add	r1, sp, #36	; 0x24
    2bbc:	0020      	movs	r0, r4
    2bbe:	4c58      	ldr	r4, [pc, #352]	; (2d20 <m2m_ip_cb+0x2f0>)
    2bc0:	47a0      	blx	r4
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d000      	beq.n	2bc8 <m2m_ip_cb+0x198>
    2bc6:	e78f      	b.n	2ae8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2bc8:	ab09      	add	r3, sp, #36	; 0x24
    2bca:	2000      	movs	r0, #0
    2bcc:	5618      	ldrsb	r0, [r3, r0]
    2bce:	aa05      	add	r2, sp, #20
    2bd0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2bd2:	785b      	ldrb	r3, [r3, #1]
    2bd4:	b25b      	sxtb	r3, r3
    2bd6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d107      	bne.n	2bec <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2bdc:	ab09      	add	r3, sp, #36	; 0x24
    2bde:	885b      	ldrh	r3, [r3, #2]
    2be0:	3b08      	subs	r3, #8
    2be2:	b29b      	uxth	r3, r3
    2be4:	0101      	lsls	r1, r0, #4
    2be6:	4a51      	ldr	r2, [pc, #324]	; (2d2c <m2m_ip_cb+0x2fc>)
    2be8:	1852      	adds	r2, r2, r1
    2bea:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2bec:	4b4e      	ldr	r3, [pc, #312]	; (2d28 <m2m_ip_cb+0x2f8>)
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d100      	bne.n	2bf6 <m2m_ip_cb+0x1c6>
    2bf4:	e778      	b.n	2ae8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2bf6:	4b4c      	ldr	r3, [pc, #304]	; (2d28 <m2m_ip_cb+0x2f8>)
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	aa05      	add	r2, sp, #20
    2bfc:	2105      	movs	r1, #5
    2bfe:	4798      	blx	r3
	{
    2c00:	e772      	b.n	2ae8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2c02:	2300      	movs	r3, #0
    2c04:	2244      	movs	r2, #68	; 0x44
    2c06:	a909      	add	r1, sp, #36	; 0x24
    2c08:	0020      	movs	r0, r4
    2c0a:	4c45      	ldr	r4, [pc, #276]	; (2d20 <m2m_ip_cb+0x2f0>)
    2c0c:	47a0      	blx	r4
    2c0e:	2800      	cmp	r0, #0
    2c10:	d000      	beq.n	2c14 <m2m_ip_cb+0x1e4>
    2c12:	e769      	b.n	2ae8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2c14:	4b47      	ldr	r3, [pc, #284]	; (2d34 <m2m_ip_cb+0x304>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d100      	bne.n	2c1e <m2m_ip_cb+0x1ee>
    2c1c:	e764      	b.n	2ae8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2c1e:	4b45      	ldr	r3, [pc, #276]	; (2d34 <m2m_ip_cb+0x304>)
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2c24:	9203      	str	r2, [sp, #12]
    2c26:	0011      	movs	r1, r2
    2c28:	a809      	add	r0, sp, #36	; 0x24
    2c2a:	4798      	blx	r3
    2c2c:	e75c      	b.n	2ae8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2c2e:	2306      	movs	r3, #6
    2c30:	469a      	mov	sl, r3
    2c32:	e001      	b.n	2c38 <m2m_ip_cb+0x208>
    2c34:	2306      	movs	r3, #6
    2c36:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2c38:	2300      	movs	r3, #0
    2c3a:	2210      	movs	r2, #16
    2c3c:	a905      	add	r1, sp, #20
    2c3e:	0020      	movs	r0, r4
    2c40:	4f37      	ldr	r7, [pc, #220]	; (2d20 <m2m_ip_cb+0x2f0>)
    2c42:	47b8      	blx	r7
    2c44:	2800      	cmp	r0, #0
    2c46:	d000      	beq.n	2c4a <m2m_ip_cb+0x21a>
    2c48:	e74e      	b.n	2ae8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2c4a:	aa05      	add	r2, sp, #20
    2c4c:	200c      	movs	r0, #12
    2c4e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2c50:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2c52:	0107      	lsls	r7, r0, #4
    2c54:	4935      	ldr	r1, [pc, #212]	; (2d2c <m2m_ip_cb+0x2fc>)
    2c56:	19c9      	adds	r1, r1, r7
    2c58:	2700      	movs	r7, #0
    2c5a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2c5c:	2608      	movs	r6, #8
    2c5e:	5f97      	ldrsh	r7, [r2, r6]
    2c60:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2c62:	8957      	ldrh	r7, [r2, #10]
    2c64:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2c66:	af09      	add	r7, sp, #36	; 0x24
    2c68:	8856      	ldrh	r6, [r2, #2]
    2c6a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2c6c:	9a06      	ldr	r2, [sp, #24]
    2c6e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c70:	88ca      	ldrh	r2, [r1, #6]
    2c72:	b292      	uxth	r2, r2
    2c74:	4293      	cmp	r3, r2
    2c76:	d00c      	beq.n	2c92 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2c78:	2d10      	cmp	r5, #16
    2c7a:	d800      	bhi.n	2c7e <m2m_ip_cb+0x24e>
    2c7c:	e734      	b.n	2ae8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2c7e:	2301      	movs	r3, #1
    2c80:	2200      	movs	r2, #0
    2c82:	2100      	movs	r1, #0
    2c84:	2000      	movs	r0, #0
    2c86:	4c26      	ldr	r4, [pc, #152]	; (2d20 <m2m_ip_cb+0x2f0>)
    2c88:	47a0      	blx	r4
	{
    2c8a:	e72d      	b.n	2ae8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2c8c:	2309      	movs	r3, #9
    2c8e:	469a      	mov	sl, r3
    2c90:	e7d2      	b.n	2c38 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2c92:	4643      	mov	r3, r8
    2c94:	2b00      	cmp	r3, #0
    2c96:	dd01      	ble.n	2c9c <m2m_ip_cb+0x26c>
    2c98:	45a8      	cmp	r8, r5
    2c9a:	db0f      	blt.n	2cbc <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2c9c:	ab09      	add	r3, sp, #36	; 0x24
    2c9e:	4642      	mov	r2, r8
    2ca0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2ca2:	2300      	movs	r3, #0
    2ca4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2ca6:	4b20      	ldr	r3, [pc, #128]	; (2d28 <m2m_ip_cb+0x2f8>)
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d100      	bne.n	2cb0 <m2m_ip_cb+0x280>
    2cae:	e71b      	b.n	2ae8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2cb0:	4b1d      	ldr	r3, [pc, #116]	; (2d28 <m2m_ip_cb+0x2f8>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	aa09      	add	r2, sp, #36	; 0x24
    2cb6:	4651      	mov	r1, sl
    2cb8:	4798      	blx	r3
    2cba:	e715      	b.n	2ae8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2cbc:	0023      	movs	r3, r4
    2cbe:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2cc0:	4642      	mov	r2, r8
    2cc2:	4669      	mov	r1, sp
    2cc4:	818a      	strh	r2, [r1, #12]
    2cc6:	898a      	ldrh	r2, [r1, #12]
    2cc8:	9200      	str	r2, [sp, #0]
    2cca:	4652      	mov	r2, sl
    2ccc:	0039      	movs	r1, r7
    2cce:	4c1a      	ldr	r4, [pc, #104]	; (2d38 <m2m_ip_cb+0x308>)
    2cd0:	47a0      	blx	r4
    2cd2:	e709      	b.n	2ae8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2cd4:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2cd6:	2300      	movs	r3, #0
    2cd8:	2208      	movs	r2, #8
    2cda:	a909      	add	r1, sp, #36	; 0x24
    2cdc:	0020      	movs	r0, r4
    2cde:	4c10      	ldr	r4, [pc, #64]	; (2d20 <m2m_ip_cb+0x2f0>)
    2ce0:	47a0      	blx	r4
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d000      	beq.n	2ce8 <m2m_ip_cb+0x2b8>
    2ce6:	e6ff      	b.n	2ae8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2ce8:	ab09      	add	r3, sp, #36	; 0x24
    2cea:	2000      	movs	r0, #0
    2cec:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2cee:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2cf0:	8859      	ldrh	r1, [r3, #2]
    2cf2:	ab05      	add	r3, sp, #20
    2cf4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2cf6:	0101      	lsls	r1, r0, #4
    2cf8:	4b0c      	ldr	r3, [pc, #48]	; (2d2c <m2m_ip_cb+0x2fc>)
    2cfa:	185b      	adds	r3, r3, r1
    2cfc:	88db      	ldrh	r3, [r3, #6]
    2cfe:	b29b      	uxth	r3, r3
    2d00:	429a      	cmp	r2, r3
    2d02:	d000      	beq.n	2d06 <m2m_ip_cb+0x2d6>
    2d04:	e6f0      	b.n	2ae8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2d06:	4b08      	ldr	r3, [pc, #32]	; (2d28 <m2m_ip_cb+0x2f8>)
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d100      	bne.n	2d10 <m2m_ip_cb+0x2e0>
    2d0e:	e6eb      	b.n	2ae8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2d10:	4b05      	ldr	r3, [pc, #20]	; (2d28 <m2m_ip_cb+0x2f8>)
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	aa05      	add	r2, sp, #20
    2d16:	0029      	movs	r1, r5
    2d18:	4798      	blx	r3
	{
    2d1a:	e6e5      	b.n	2ae8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2d1c:	2508      	movs	r5, #8
    2d1e:	e7da      	b.n	2cd6 <m2m_ip_cb+0x2a6>
    2d20:	00000cbd 	.word	0x00000cbd
    2d24:	20000548 	.word	0x20000548
    2d28:	20000544 	.word	0x20000544
    2d2c:	20000494 	.word	0x20000494
    2d30:	2000020a 	.word	0x2000020a
    2d34:	2000054c 	.word	0x2000054c
    2d38:	0000291d 	.word	0x0000291d

00002d3c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2d3c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2d3e:	4b0a      	ldr	r3, [pc, #40]	; (2d68 <socketInit+0x2c>)
    2d40:	781b      	ldrb	r3, [r3, #0]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d000      	beq.n	2d48 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2d46:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2d48:	22b0      	movs	r2, #176	; 0xb0
    2d4a:	2100      	movs	r1, #0
    2d4c:	4807      	ldr	r0, [pc, #28]	; (2d6c <socketInit+0x30>)
    2d4e:	4b08      	ldr	r3, [pc, #32]	; (2d70 <socketInit+0x34>)
    2d50:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2d52:	4908      	ldr	r1, [pc, #32]	; (2d74 <socketInit+0x38>)
    2d54:	2002      	movs	r0, #2
    2d56:	4b08      	ldr	r3, [pc, #32]	; (2d78 <socketInit+0x3c>)
    2d58:	4798      	blx	r3
		gbSocketInit	= 1;
    2d5a:	2201      	movs	r2, #1
    2d5c:	4b02      	ldr	r3, [pc, #8]	; (2d68 <socketInit+0x2c>)
    2d5e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2d60:	2200      	movs	r2, #0
    2d62:	4b06      	ldr	r3, [pc, #24]	; (2d7c <socketInit+0x40>)
    2d64:	801a      	strh	r2, [r3, #0]
}
    2d66:	e7ee      	b.n	2d46 <socketInit+0xa>
    2d68:	20000209 	.word	0x20000209
    2d6c:	20000494 	.word	0x20000494
    2d70:	0000059d 	.word	0x0000059d
    2d74:	00002a31 	.word	0x00002a31
    2d78:	00000da9 	.word	0x00000da9
    2d7c:	2000020a 	.word	0x2000020a

00002d80 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2d80:	4b02      	ldr	r3, [pc, #8]	; (2d8c <registerSocketCallback+0xc>)
    2d82:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2d84:	4b02      	ldr	r3, [pc, #8]	; (2d90 <registerSocketCallback+0x10>)
    2d86:	6019      	str	r1, [r3, #0]
}
    2d88:	4770      	bx	lr
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	20000544 	.word	0x20000544
    2d90:	2000054c 	.word	0x2000054c

00002d94 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d96:	46d6      	mov	lr, sl
    2d98:	4647      	mov	r7, r8
    2d9a:	b580      	push	{r7, lr}
    2d9c:	b089      	sub	sp, #36	; 0x24
    2d9e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2da0:	2802      	cmp	r0, #2
    2da2:	d000      	beq.n	2da6 <socket+0x12>
    2da4:	e09c      	b.n	2ee0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2da6:	2901      	cmp	r1, #1
    2da8:	d00a      	beq.n	2dc0 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2daa:	2902      	cmp	r1, #2
    2dac:	d100      	bne.n	2db0 <socket+0x1c>
    2dae:	e070      	b.n	2e92 <socket+0xfe>
	SOCKET					sock = -1;
    2db0:	2501      	movs	r5, #1
    2db2:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2db4:	0028      	movs	r0, r5
    2db6:	b009      	add	sp, #36	; 0x24
    2db8:	bc0c      	pop	{r2, r3}
    2dba:	4690      	mov	r8, r2
    2dbc:	469a      	mov	sl, r3
    2dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2dc0:	4c49      	ldr	r4, [pc, #292]	; (2ee8 <socket+0x154>)
    2dc2:	7827      	ldrb	r7, [r4, #0]
    2dc4:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2dc6:	7826      	ldrb	r6, [r4, #0]
    2dc8:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2dca:	7820      	ldrb	r0, [r4, #0]
    2dcc:	3001      	adds	r0, #1
    2dce:	3106      	adds	r1, #6
    2dd0:	4b46      	ldr	r3, [pc, #280]	; (2eec <socket+0x158>)
    2dd2:	4798      	blx	r3
    2dd4:	b2c9      	uxtb	r1, r1
    2dd6:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2dd8:	0132      	lsls	r2, r6, #4
    2dda:	4b45      	ldr	r3, [pc, #276]	; (2ef0 <socket+0x15c>)
    2ddc:	189b      	adds	r3, r3, r2
    2dde:	7a9b      	ldrb	r3, [r3, #10]
    2de0:	2506      	movs	r5, #6
    2de2:	2b00      	cmp	r3, #0
    2de4:	d018      	beq.n	2e18 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2de6:	4e40      	ldr	r6, [pc, #256]	; (2ee8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2de8:	4b40      	ldr	r3, [pc, #256]	; (2eec <socket+0x158>)
    2dea:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2dec:	4b40      	ldr	r3, [pc, #256]	; (2ef0 <socket+0x15c>)
    2dee:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2df0:	7837      	ldrb	r7, [r6, #0]
    2df2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2df4:	7834      	ldrb	r4, [r6, #0]
    2df6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2df8:	7830      	ldrb	r0, [r6, #0]
    2dfa:	3001      	adds	r0, #1
    2dfc:	2107      	movs	r1, #7
    2dfe:	47d0      	blx	sl
    2e00:	b2c9      	uxtb	r1, r1
    2e02:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2e04:	0123      	lsls	r3, r4, #4
    2e06:	4443      	add	r3, r8
    2e08:	7a9b      	ldrb	r3, [r3, #10]
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d007      	beq.n	2e1e <socket+0x8a>
    2e0e:	3d01      	subs	r5, #1
    2e10:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2e12:	2d00      	cmp	r5, #0
    2e14:	d1ec      	bne.n	2df0 <socket+0x5c>
    2e16:	e7cb      	b.n	2db0 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2e18:	4b35      	ldr	r3, [pc, #212]	; (2ef0 <socket+0x15c>)
    2e1a:	18d4      	adds	r4, r2, r3
    2e1c:	e002      	b.n	2e24 <socket+0x90>
    2e1e:	0124      	lsls	r4, r4, #4
    2e20:	4b33      	ldr	r3, [pc, #204]	; (2ef0 <socket+0x15c>)
    2e22:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2e24:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2e26:	2d00      	cmp	r5, #0
    2e28:	dbc4      	blt.n	2db4 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2e2a:	2210      	movs	r2, #16
    2e2c:	2100      	movs	r1, #0
    2e2e:	0020      	movs	r0, r4
    2e30:	4b30      	ldr	r3, [pc, #192]	; (2ef4 <socket+0x160>)
    2e32:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2e34:	2301      	movs	r3, #1
    2e36:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2e38:	4a2f      	ldr	r2, [pc, #188]	; (2ef8 <socket+0x164>)
    2e3a:	8813      	ldrh	r3, [r2, #0]
    2e3c:	3301      	adds	r3, #1
    2e3e:	b29b      	uxth	r3, r3
    2e40:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2e42:	8813      	ldrh	r3, [r2, #0]
    2e44:	b29b      	uxth	r3, r3
    2e46:	2b00      	cmp	r3, #0
    2e48:	d103      	bne.n	2e52 <socket+0xbe>
				++gu16SessionID;
    2e4a:	8813      	ldrh	r3, [r2, #0]
    2e4c:	3301      	adds	r3, #1
    2e4e:	b29b      	uxth	r3, r3
    2e50:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2e52:	4e29      	ldr	r6, [pc, #164]	; (2ef8 <socket+0x164>)
    2e54:	8833      	ldrh	r3, [r6, #0]
    2e56:	b29b      	uxth	r3, r3
    2e58:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2e5a:	4828      	ldr	r0, [pc, #160]	; (2efc <socket+0x168>)
    2e5c:	4f28      	ldr	r7, [pc, #160]	; (2f00 <socket+0x16c>)
    2e5e:	47b8      	blx	r7
    2e60:	8832      	ldrh	r2, [r6, #0]
    2e62:	b292      	uxth	r2, r2
    2e64:	0029      	movs	r1, r5
    2e66:	4827      	ldr	r0, [pc, #156]	; (2f04 <socket+0x170>)
    2e68:	47b8      	blx	r7
    2e6a:	200d      	movs	r0, #13
    2e6c:	4b26      	ldr	r3, [pc, #152]	; (2f08 <socket+0x174>)
    2e6e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2e70:	9b05      	ldr	r3, [sp, #20]
    2e72:	07db      	lsls	r3, r3, #31
    2e74:	d59e      	bpl.n	2db4 <socket+0x20>
				strSSLCreate.sslSock = sock;
    2e76:	aa07      	add	r2, sp, #28
    2e78:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2e7a:	2321      	movs	r3, #33	; 0x21
    2e7c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e7e:	2300      	movs	r3, #0
    2e80:	9302      	str	r3, [sp, #8]
    2e82:	9301      	str	r3, [sp, #4]
    2e84:	9300      	str	r3, [sp, #0]
    2e86:	3304      	adds	r3, #4
    2e88:	2150      	movs	r1, #80	; 0x50
    2e8a:	2002      	movs	r0, #2
    2e8c:	4c1f      	ldr	r4, [pc, #124]	; (2f0c <socket+0x178>)
    2e8e:	47a0      	blx	r4
    2e90:	e790      	b.n	2db4 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2e92:	4b1f      	ldr	r3, [pc, #124]	; (2f10 <socket+0x17c>)
    2e94:	781d      	ldrb	r5, [r3, #0]
    2e96:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e98:	781c      	ldrb	r4, [r3, #0]
    2e9a:	0124      	lsls	r4, r4, #4
    2e9c:	4a1d      	ldr	r2, [pc, #116]	; (2f14 <socket+0x180>)
    2e9e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2ea0:	7819      	ldrb	r1, [r3, #0]
    2ea2:	3101      	adds	r1, #1
    2ea4:	2203      	movs	r2, #3
    2ea6:	400a      	ands	r2, r1
    2ea8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2eaa:	7aa3      	ldrb	r3, [r4, #10]
    2eac:	2b00      	cmp	r3, #0
    2eae:	d014      	beq.n	2eda <socket+0x146>
    2eb0:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2eb2:	4917      	ldr	r1, [pc, #92]	; (2f10 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2eb4:	4f17      	ldr	r7, [pc, #92]	; (2f14 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2eb6:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2eb8:	780d      	ldrb	r5, [r1, #0]
    2eba:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2ebc:	780c      	ldrb	r4, [r1, #0]
    2ebe:	0124      	lsls	r4, r4, #4
    2ec0:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2ec2:	780b      	ldrb	r3, [r1, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	4003      	ands	r3, r0
    2ec8:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2eca:	7aa3      	ldrb	r3, [r4, #10]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d004      	beq.n	2eda <socket+0x146>
    2ed0:	3a01      	subs	r2, #1
    2ed2:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2ed4:	2a00      	cmp	r2, #0
    2ed6:	d1ef      	bne.n	2eb8 <socket+0x124>
    2ed8:	e76a      	b.n	2db0 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2eda:	3507      	adds	r5, #7
    2edc:	b26d      	sxtb	r5, r5
					break;
    2ede:	e7a2      	b.n	2e26 <socket+0x92>
	SOCKET					sock = -1;
    2ee0:	2501      	movs	r5, #1
    2ee2:	426d      	negs	r5, r5
    2ee4:	e766      	b.n	2db4 <socket+0x20>
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	2000020c 	.word	0x2000020c
    2eec:	00006ca9 	.word	0x00006ca9
    2ef0:	20000494 	.word	0x20000494
    2ef4:	0000059d 	.word	0x0000059d
    2ef8:	2000020a 	.word	0x2000020a
    2efc:	00009254 	.word	0x00009254
    2f00:	00006efd 	.word	0x00006efd
    2f04:	00009ce4 	.word	0x00009ce4
    2f08:	00006f31 	.word	0x00006f31
    2f0c:	000006b1 	.word	0x000006b1
    2f10:	2000020d 	.word	0x2000020d
    2f14:	20000504 	.word	0x20000504

00002f18 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	b088      	sub	sp, #32
    2f1c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2f1e:	db30      	blt.n	2f82 <connect+0x6a>
    2f20:	2900      	cmp	r1, #0
    2f22:	d031      	beq.n	2f88 <connect+0x70>
    2f24:	0100      	lsls	r0, r0, #4
    2f26:	4b1d      	ldr	r3, [pc, #116]	; (2f9c <connect+0x84>)
    2f28:	181b      	adds	r3, r3, r0
    2f2a:	7a9b      	ldrb	r3, [r3, #10]
    2f2c:	2b01      	cmp	r3, #1
    2f2e:	d12e      	bne.n	2f8e <connect+0x76>
    2f30:	2a00      	cmp	r2, #0
    2f32:	d02f      	beq.n	2f94 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f34:	4b19      	ldr	r3, [pc, #100]	; (2f9c <connect+0x84>)
    2f36:	181b      	adds	r3, r3, r0
    2f38:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2f3a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f3c:	07db      	lsls	r3, r3, #31
    2f3e:	d505      	bpl.n	2f4c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2f40:	4b16      	ldr	r3, [pc, #88]	; (2f9c <connect+0x84>)
    2f42:	181b      	adds	r3, r3, r0
    2f44:	7ada      	ldrb	r2, [r3, #11]
    2f46:	ab05      	add	r3, sp, #20
    2f48:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2f4a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    2f4c:	ad05      	add	r5, sp, #20
    2f4e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2f50:	2208      	movs	r2, #8
    2f52:	0028      	movs	r0, r5
    2f54:	4b12      	ldr	r3, [pc, #72]	; (2fa0 <connect+0x88>)
    2f56:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f58:	0124      	lsls	r4, r4, #4
    2f5a:	4b10      	ldr	r3, [pc, #64]	; (2f9c <connect+0x84>)
    2f5c:	191c      	adds	r4, r3, r4
    2f5e:	88e3      	ldrh	r3, [r4, #6]
    2f60:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2f62:	2300      	movs	r3, #0
    2f64:	9302      	str	r3, [sp, #8]
    2f66:	9301      	str	r3, [sp, #4]
    2f68:	9300      	str	r3, [sp, #0]
    2f6a:	330c      	adds	r3, #12
    2f6c:	002a      	movs	r2, r5
    2f6e:	0031      	movs	r1, r6
    2f70:	2002      	movs	r0, #2
    2f72:	4c0c      	ldr	r4, [pc, #48]	; (2fa4 <connect+0x8c>)
    2f74:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f76:	2800      	cmp	r0, #0
    2f78:	d001      	beq.n	2f7e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f7a:	2009      	movs	r0, #9
    2f7c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f7e:	b008      	add	sp, #32
    2f80:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f82:	2006      	movs	r0, #6
    2f84:	4240      	negs	r0, r0
    2f86:	e7fa      	b.n	2f7e <connect+0x66>
    2f88:	2006      	movs	r0, #6
    2f8a:	4240      	negs	r0, r0
    2f8c:	e7f7      	b.n	2f7e <connect+0x66>
    2f8e:	2006      	movs	r0, #6
    2f90:	4240      	negs	r0, r0
    2f92:	e7f4      	b.n	2f7e <connect+0x66>
    2f94:	2006      	movs	r0, #6
    2f96:	4240      	negs	r0, r0
    2f98:	e7f1      	b.n	2f7e <connect+0x66>
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	20000494 	.word	0x20000494
    2fa0:	00000589 	.word	0x00000589
    2fa4:	000006b1 	.word	0x000006b1

00002fa8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2fa8:	b530      	push	{r4, r5, lr}
    2faa:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2fac:	2800      	cmp	r0, #0
    2fae:	db36      	blt.n	301e <send+0x76>
    2fb0:	2900      	cmp	r1, #0
    2fb2:	d037      	beq.n	3024 <send+0x7c>
    2fb4:	23af      	movs	r3, #175	; 0xaf
    2fb6:	00db      	lsls	r3, r3, #3
    2fb8:	429a      	cmp	r2, r3
    2fba:	d836      	bhi.n	302a <send+0x82>
    2fbc:	0104      	lsls	r4, r0, #4
    2fbe:	4b1e      	ldr	r3, [pc, #120]	; (3038 <send+0x90>)
    2fc0:	191b      	adds	r3, r3, r4
    2fc2:	7a9b      	ldrb	r3, [r3, #10]
    2fc4:	2b01      	cmp	r3, #1
    2fc6:	d133      	bne.n	3030 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    2fc8:	ab04      	add	r3, sp, #16
    2fca:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    2fcc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    2fce:	0025      	movs	r5, r4
    2fd0:	4c19      	ldr	r4, [pc, #100]	; (3038 <send+0x90>)
    2fd2:	1964      	adds	r4, r4, r5
    2fd4:	88e4      	ldrh	r4, [r4, #6]
    2fd6:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2fd8:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    2fda:	2806      	cmp	r0, #6
    2fdc:	dd00      	ble.n	2fe0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2fde:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fe0:	0104      	lsls	r4, r0, #4
    2fe2:	4b15      	ldr	r3, [pc, #84]	; (3038 <send+0x90>)
    2fe4:	191b      	adds	r3, r3, r4
    2fe6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    2fe8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fea:	07e4      	lsls	r4, r4, #31
    2fec:	d505      	bpl.n	2ffa <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    2fee:	0100      	lsls	r0, r0, #4
    2ff0:	4b11      	ldr	r3, [pc, #68]	; (3038 <send+0x90>)
    2ff2:	1818      	adds	r0, r3, r0
    2ff4:	8905      	ldrh	r5, [r0, #8]
    2ff6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    2ff8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    2ffa:	2080      	movs	r0, #128	; 0x80
    2ffc:	4318      	orrs	r0, r3
    2ffe:	9502      	str	r5, [sp, #8]
    3000:	9201      	str	r2, [sp, #4]
    3002:	9100      	str	r1, [sp, #0]
    3004:	2310      	movs	r3, #16
    3006:	aa04      	add	r2, sp, #16
    3008:	0001      	movs	r1, r0
    300a:	2002      	movs	r0, #2
    300c:	4c0b      	ldr	r4, [pc, #44]	; (303c <send+0x94>)
    300e:	47a0      	blx	r4
    3010:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3012:	2800      	cmp	r0, #0
    3014:	d000      	beq.n	3018 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3016:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3018:	0018      	movs	r0, r3
    301a:	b009      	add	sp, #36	; 0x24
    301c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    301e:	2306      	movs	r3, #6
    3020:	425b      	negs	r3, r3
    3022:	e7f9      	b.n	3018 <send+0x70>
    3024:	2306      	movs	r3, #6
    3026:	425b      	negs	r3, r3
    3028:	e7f6      	b.n	3018 <send+0x70>
    302a:	2306      	movs	r3, #6
    302c:	425b      	negs	r3, r3
    302e:	e7f3      	b.n	3018 <send+0x70>
    3030:	2306      	movs	r3, #6
    3032:	425b      	negs	r3, r3
    3034:	e7f0      	b.n	3018 <send+0x70>
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	20000494 	.word	0x20000494
    303c:	000006b1 	.word	0x000006b1

00003040 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3040:	b530      	push	{r4, r5, lr}
    3042:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3044:	2800      	cmp	r0, #0
    3046:	db34      	blt.n	30b2 <recv+0x72>
    3048:	2900      	cmp	r1, #0
    304a:	d035      	beq.n	30b8 <recv+0x78>
    304c:	2a00      	cmp	r2, #0
    304e:	d036      	beq.n	30be <recv+0x7e>
    3050:	0105      	lsls	r5, r0, #4
    3052:	4c1e      	ldr	r4, [pc, #120]	; (30cc <recv+0x8c>)
    3054:	1964      	adds	r4, r4, r5
    3056:	7aa4      	ldrb	r4, [r4, #10]
    3058:	2c01      	cmp	r4, #1
    305a:	d133      	bne.n	30c4 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    305c:	4c1b      	ldr	r4, [pc, #108]	; (30cc <recv+0x8c>)
    305e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3060:	1964      	adds	r4, r4, r5
    3062:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3064:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3066:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3068:	2900      	cmp	r1, #0
    306a:	d11d      	bne.n	30a8 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    306c:	2101      	movs	r1, #1
    306e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3070:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3072:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3074:	07d2      	lsls	r2, r2, #31
    3076:	d500      	bpl.n	307a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3078:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    307a:	2b00      	cmp	r3, #0
    307c:	d117      	bne.n	30ae <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    307e:	3b01      	subs	r3, #1
    3080:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3082:	aa04      	add	r2, sp, #16
    3084:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3086:	0100      	lsls	r0, r0, #4
    3088:	4b10      	ldr	r3, [pc, #64]	; (30cc <recv+0x8c>)
    308a:	1818      	adds	r0, r3, r0
    308c:	88c3      	ldrh	r3, [r0, #6]
    308e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3090:	2300      	movs	r3, #0
    3092:	9302      	str	r3, [sp, #8]
    3094:	9301      	str	r3, [sp, #4]
    3096:	9300      	str	r3, [sp, #0]
    3098:	3308      	adds	r3, #8
    309a:	2002      	movs	r0, #2
    309c:	4c0c      	ldr	r4, [pc, #48]	; (30d0 <recv+0x90>)
    309e:	47a0      	blx	r4
    30a0:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    30a2:	2800      	cmp	r0, #0
    30a4:	d000      	beq.n	30a8 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    30a6:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    30a8:	0010      	movs	r0, r2
    30aa:	b007      	add	sp, #28
    30ac:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30ae:	9304      	str	r3, [sp, #16]
    30b0:	e7e7      	b.n	3082 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30b2:	2206      	movs	r2, #6
    30b4:	4252      	negs	r2, r2
    30b6:	e7f7      	b.n	30a8 <recv+0x68>
    30b8:	2206      	movs	r2, #6
    30ba:	4252      	negs	r2, r2
    30bc:	e7f4      	b.n	30a8 <recv+0x68>
    30be:	2206      	movs	r2, #6
    30c0:	4252      	negs	r2, r2
    30c2:	e7f1      	b.n	30a8 <recv+0x68>
    30c4:	2206      	movs	r2, #6
    30c6:	4252      	negs	r2, r2
    30c8:	e7ee      	b.n	30a8 <recv+0x68>
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	20000494 	.word	0x20000494
    30d0:	000006b1 	.word	0x000006b1

000030d4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    30d4:	b530      	push	{r4, r5, lr}
    30d6:	b087      	sub	sp, #28
    30d8:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    30da:	481e      	ldr	r0, [pc, #120]	; (3154 <close+0x80>)
    30dc:	4d1e      	ldr	r5, [pc, #120]	; (3158 <close+0x84>)
    30de:	47a8      	blx	r5
    30e0:	0021      	movs	r1, r4
    30e2:	481e      	ldr	r0, [pc, #120]	; (315c <close+0x88>)
    30e4:	47a8      	blx	r5
    30e6:	200d      	movs	r0, #13
    30e8:	4b1d      	ldr	r3, [pc, #116]	; (3160 <close+0x8c>)
    30ea:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    30ec:	2c00      	cmp	r4, #0
    30ee:	db2a      	blt.n	3146 <close+0x72>
    30f0:	0122      	lsls	r2, r4, #4
    30f2:	4b1c      	ldr	r3, [pc, #112]	; (3164 <close+0x90>)
    30f4:	189b      	adds	r3, r3, r2
    30f6:	7a9b      	ldrb	r3, [r3, #10]
    30f8:	2b01      	cmp	r3, #1
    30fa:	d127      	bne.n	314c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    30fc:	a905      	add	r1, sp, #20
    30fe:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3100:	4b18      	ldr	r3, [pc, #96]	; (3164 <close+0x90>)
    3102:	189b      	adds	r3, r3, r2
    3104:	88da      	ldrh	r2, [r3, #6]
    3106:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3108:	2200      	movs	r2, #0
    310a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    310c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    310e:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3110:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3112:	07db      	lsls	r3, r3, #31
    3114:	d500      	bpl.n	3118 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3116:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3118:	2300      	movs	r3, #0
    311a:	9302      	str	r3, [sp, #8]
    311c:	9301      	str	r3, [sp, #4]
    311e:	9300      	str	r3, [sp, #0]
    3120:	3304      	adds	r3, #4
    3122:	aa05      	add	r2, sp, #20
    3124:	2002      	movs	r0, #2
    3126:	4d10      	ldr	r5, [pc, #64]	; (3168 <close+0x94>)
    3128:	47a8      	blx	r5
    312a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    312c:	d001      	beq.n	3132 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    312e:	2509      	movs	r5, #9
    3130:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3132:	0124      	lsls	r4, r4, #4
    3134:	480b      	ldr	r0, [pc, #44]	; (3164 <close+0x90>)
    3136:	1820      	adds	r0, r4, r0
    3138:	2210      	movs	r2, #16
    313a:	2100      	movs	r1, #0
    313c:	4b0b      	ldr	r3, [pc, #44]	; (316c <close+0x98>)
    313e:	4798      	blx	r3
	}
	return s8Ret;
}
    3140:	0028      	movs	r0, r5
    3142:	b007      	add	sp, #28
    3144:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3146:	2506      	movs	r5, #6
    3148:	426d      	negs	r5, r5
    314a:	e7f9      	b.n	3140 <close+0x6c>
    314c:	2506      	movs	r5, #6
    314e:	426d      	negs	r5, r5
    3150:	e7f6      	b.n	3140 <close+0x6c>
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	00009254 	.word	0x00009254
    3158:	00006efd 	.word	0x00006efd
    315c:	00009ccc 	.word	0x00009ccc
    3160:	00006f31 	.word	0x00006f31
    3164:	20000494 	.word	0x20000494
    3168:	000006b1 	.word	0x000006b1
    316c:	0000059d 	.word	0x0000059d

00003170 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3170:	b570      	push	{r4, r5, r6, lr}
    3172:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3174:	2300      	movs	r3, #0
    3176:	9301      	str	r3, [sp, #4]
    3178:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    317a:	2100      	movs	r1, #0
    317c:	7802      	ldrb	r2, [r0, #0]
    317e:	1c44      	adds	r4, r0, #1
    3180:	3005      	adds	r0, #5
    3182:	000b      	movs	r3, r1
    3184:	e009      	b.n	319a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3186:	009d      	lsls	r5, r3, #2
    3188:	195b      	adds	r3, r3, r5
    318a:	005b      	lsls	r3, r3, #1
    318c:	189b      	adds	r3, r3, r2
    318e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3190:	0022      	movs	r2, r4
    3192:	3401      	adds	r4, #1
			if(j > 4)
    3194:	42a0      	cmp	r0, r4
    3196:	d00a      	beq.n	31ae <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3198:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    319a:	2a2e      	cmp	r2, #46	; 0x2e
    319c:	d00a      	beq.n	31b4 <nmi_inet_addr+0x44>
    319e:	2a00      	cmp	r2, #0
    31a0:	d00c      	beq.n	31bc <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    31a2:	3a30      	subs	r2, #48	; 0x30
    31a4:	b2d2      	uxtb	r2, r2
    31a6:	2a09      	cmp	r2, #9
    31a8:	d9ed      	bls.n	3186 <nmi_inet_addr+0x16>
				return 0;
    31aa:	2000      	movs	r0, #0
    31ac:	e000      	b.n	31b0 <nmi_inet_addr+0x40>
				return 0;
    31ae:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    31b0:	b002      	add	sp, #8
    31b2:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    31b4:	466a      	mov	r2, sp
    31b6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    31b8:	0020      	movs	r0, r4
    31ba:	e002      	b.n	31c2 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    31bc:	466a      	mov	r2, sp
    31be:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    31c0:	0020      	movs	r0, r4
    31c2:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    31c4:	2e04      	cmp	r6, #4
    31c6:	d1d9      	bne.n	317c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    31c8:	2204      	movs	r2, #4
    31ca:	4669      	mov	r1, sp
    31cc:	a801      	add	r0, sp, #4
    31ce:	4b02      	ldr	r3, [pc, #8]	; (31d8 <nmi_inet_addr+0x68>)
    31d0:	4798      	blx	r3
	return u32IP;
    31d2:	9801      	ldr	r0, [sp, #4]
    31d4:	e7ec      	b.n	31b0 <nmi_inet_addr+0x40>
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00000589 	.word	0x00000589

000031dc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    31dc:	b510      	push	{r4, lr}
    31de:	b084      	sub	sp, #16
    31e0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    31e2:	4b0b      	ldr	r3, [pc, #44]	; (3210 <gethostbyname+0x34>)
    31e4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    31e6:	b2c3      	uxtb	r3, r0
    31e8:	2b40      	cmp	r3, #64	; 0x40
    31ea:	d80d      	bhi.n	3208 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    31ec:	23ff      	movs	r3, #255	; 0xff
    31ee:	4003      	ands	r3, r0
    31f0:	3301      	adds	r3, #1
    31f2:	2200      	movs	r2, #0
    31f4:	9202      	str	r2, [sp, #8]
    31f6:	9201      	str	r2, [sp, #4]
    31f8:	9200      	str	r2, [sp, #0]
    31fa:	0022      	movs	r2, r4
    31fc:	214a      	movs	r1, #74	; 0x4a
    31fe:	2002      	movs	r0, #2
    3200:	4c04      	ldr	r4, [pc, #16]	; (3214 <gethostbyname+0x38>)
    3202:	47a0      	blx	r4
	}
	return s8Err;
}
    3204:	b004      	add	sp, #16
    3206:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3208:	2006      	movs	r0, #6
    320a:	4240      	negs	r0, r0
    320c:	e7fa      	b.n	3204 <gethostbyname+0x28>
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	000005ad 	.word	0x000005ad
    3214:	000006b1 	.word	0x000006b1

00003218 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3218:	b570      	push	{r4, r5, r6, lr}
    321a:	b082      	sub	sp, #8
    321c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    321e:	4b2a      	ldr	r3, [pc, #168]	; (32c8 <spi_flash_enable+0xb0>)
    3220:	4798      	blx	r3
    3222:	0500      	lsls	r0, r0, #20
    3224:	0d00      	lsrs	r0, r0, #20
    3226:	4b29      	ldr	r3, [pc, #164]	; (32cc <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3228:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    322a:	4298      	cmp	r0, r3
    322c:	d802      	bhi.n	3234 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    322e:	0028      	movs	r0, r5
    3230:	b002      	add	sp, #8
    3232:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3234:	a901      	add	r1, sp, #4
    3236:	4826      	ldr	r0, [pc, #152]	; (32d0 <spi_flash_enable+0xb8>)
    3238:	4b26      	ldr	r3, [pc, #152]	; (32d4 <spi_flash_enable+0xbc>)
    323a:	4798      	blx	r3
    323c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    323e:	d1f6      	bne.n	322e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3240:	4b25      	ldr	r3, [pc, #148]	; (32d8 <spi_flash_enable+0xc0>)
    3242:	9a01      	ldr	r2, [sp, #4]
    3244:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3246:	4925      	ldr	r1, [pc, #148]	; (32dc <spi_flash_enable+0xc4>)
    3248:	4319      	orrs	r1, r3
    324a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    324c:	4820      	ldr	r0, [pc, #128]	; (32d0 <spi_flash_enable+0xb8>)
    324e:	4b24      	ldr	r3, [pc, #144]	; (32e0 <spi_flash_enable+0xc8>)
    3250:	4798      	blx	r3
		if(enable) {
    3252:	2c00      	cmp	r4, #0
    3254:	d020      	beq.n	3298 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3256:	2100      	movs	r1, #0
    3258:	4822      	ldr	r0, [pc, #136]	; (32e4 <spi_flash_enable+0xcc>)
    325a:	4c21      	ldr	r4, [pc, #132]	; (32e0 <spi_flash_enable+0xc8>)
    325c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    325e:	21ab      	movs	r1, #171	; 0xab
    3260:	4821      	ldr	r0, [pc, #132]	; (32e8 <spi_flash_enable+0xd0>)
    3262:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3264:	2101      	movs	r1, #1
    3266:	4821      	ldr	r0, [pc, #132]	; (32ec <spi_flash_enable+0xd4>)
    3268:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    326a:	2100      	movs	r1, #0
    326c:	4820      	ldr	r0, [pc, #128]	; (32f0 <spi_flash_enable+0xd8>)
    326e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3270:	2181      	movs	r1, #129	; 0x81
    3272:	4820      	ldr	r0, [pc, #128]	; (32f4 <spi_flash_enable+0xdc>)
    3274:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3276:	4e20      	ldr	r6, [pc, #128]	; (32f8 <spi_flash_enable+0xe0>)
    3278:	4c20      	ldr	r4, [pc, #128]	; (32fc <spi_flash_enable+0xe4>)
    327a:	0030      	movs	r0, r6
    327c:	47a0      	blx	r4
    327e:	2801      	cmp	r0, #1
    3280:	d1fb      	bne.n	327a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3282:	4b15      	ldr	r3, [pc, #84]	; (32d8 <spi_flash_enable+0xc0>)
    3284:	9a01      	ldr	r2, [sp, #4]
    3286:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3288:	2180      	movs	r1, #128	; 0x80
    328a:	0249      	lsls	r1, r1, #9
    328c:	4319      	orrs	r1, r3
    328e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3290:	480f      	ldr	r0, [pc, #60]	; (32d0 <spi_flash_enable+0xb8>)
    3292:	4b13      	ldr	r3, [pc, #76]	; (32e0 <spi_flash_enable+0xc8>)
    3294:	4798      	blx	r3
    3296:	e7ca      	b.n	322e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3298:	2100      	movs	r1, #0
    329a:	4812      	ldr	r0, [pc, #72]	; (32e4 <spi_flash_enable+0xcc>)
    329c:	4c10      	ldr	r4, [pc, #64]	; (32e0 <spi_flash_enable+0xc8>)
    329e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    32a0:	21b9      	movs	r1, #185	; 0xb9
    32a2:	4811      	ldr	r0, [pc, #68]	; (32e8 <spi_flash_enable+0xd0>)
    32a4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    32a6:	2101      	movs	r1, #1
    32a8:	4810      	ldr	r0, [pc, #64]	; (32ec <spi_flash_enable+0xd4>)
    32aa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    32ac:	2100      	movs	r1, #0
    32ae:	4810      	ldr	r0, [pc, #64]	; (32f0 <spi_flash_enable+0xd8>)
    32b0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    32b2:	2181      	movs	r1, #129	; 0x81
    32b4:	480f      	ldr	r0, [pc, #60]	; (32f4 <spi_flash_enable+0xdc>)
    32b6:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    32b8:	4e0f      	ldr	r6, [pc, #60]	; (32f8 <spi_flash_enable+0xe0>)
    32ba:	4c10      	ldr	r4, [pc, #64]	; (32fc <spi_flash_enable+0xe4>)
    32bc:	0030      	movs	r0, r6
    32be:	47a0      	blx	r4
    32c0:	2801      	cmp	r0, #1
    32c2:	d1fb      	bne.n	32bc <spi_flash_enable+0xa4>
    32c4:	e7dd      	b.n	3282 <spi_flash_enable+0x6a>
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	00001595 	.word	0x00001595
    32cc:	0000039f 	.word	0x0000039f
    32d0:	00001410 	.word	0x00001410
    32d4:	000019e5 	.word	0x000019e5
    32d8:	f8888fff 	.word	0xf8888fff
    32dc:	01111000 	.word	0x01111000
    32e0:	000019f1 	.word	0x000019f1
    32e4:	00010208 	.word	0x00010208
    32e8:	0001020c 	.word	0x0001020c
    32ec:	00010214 	.word	0x00010214
    32f0:	0001021c 	.word	0x0001021c
    32f4:	00010204 	.word	0x00010204
    32f8:	00010218 	.word	0x00010218
    32fc:	000019d9 	.word	0x000019d9

00003300 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3300:	4b0c      	ldr	r3, [pc, #48]	; (3334 <cpu_irq_enter_critical+0x34>)
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	2b00      	cmp	r3, #0
    3306:	d106      	bne.n	3316 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3308:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    330c:	2b00      	cmp	r3, #0
    330e:	d007      	beq.n	3320 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3310:	2200      	movs	r2, #0
    3312:	4b09      	ldr	r3, [pc, #36]	; (3338 <cpu_irq_enter_critical+0x38>)
    3314:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3316:	4a07      	ldr	r2, [pc, #28]	; (3334 <cpu_irq_enter_critical+0x34>)
    3318:	6813      	ldr	r3, [r2, #0]
    331a:	3301      	adds	r3, #1
    331c:	6013      	str	r3, [r2, #0]
}
    331e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3320:	b672      	cpsid	i
    3322:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3326:	2200      	movs	r2, #0
    3328:	4b04      	ldr	r3, [pc, #16]	; (333c <cpu_irq_enter_critical+0x3c>)
    332a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    332c:	3201      	adds	r2, #1
    332e:	4b02      	ldr	r3, [pc, #8]	; (3338 <cpu_irq_enter_critical+0x38>)
    3330:	701a      	strb	r2, [r3, #0]
    3332:	e7f0      	b.n	3316 <cpu_irq_enter_critical+0x16>
    3334:	20000210 	.word	0x20000210
    3338:	20000214 	.word	0x20000214
    333c:	2000000a 	.word	0x2000000a

00003340 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3340:	4b08      	ldr	r3, [pc, #32]	; (3364 <cpu_irq_leave_critical+0x24>)
    3342:	681a      	ldr	r2, [r3, #0]
    3344:	3a01      	subs	r2, #1
    3346:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	2b00      	cmp	r3, #0
    334c:	d109      	bne.n	3362 <cpu_irq_leave_critical+0x22>
    334e:	4b06      	ldr	r3, [pc, #24]	; (3368 <cpu_irq_leave_critical+0x28>)
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	2b00      	cmp	r3, #0
    3354:	d005      	beq.n	3362 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3356:	2201      	movs	r2, #1
    3358:	4b04      	ldr	r3, [pc, #16]	; (336c <cpu_irq_leave_critical+0x2c>)
    335a:	701a      	strb	r2, [r3, #0]
    335c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3360:	b662      	cpsie	i
	}
}
    3362:	4770      	bx	lr
    3364:	20000210 	.word	0x20000210
    3368:	20000214 	.word	0x20000214
    336c:	2000000a 	.word	0x2000000a

00003370 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3370:	b5f0      	push	{r4, r5, r6, r7, lr}
    3372:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3374:	ac01      	add	r4, sp, #4
    3376:	2501      	movs	r5, #1
    3378:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    337a:	2700      	movs	r7, #0
    337c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    337e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3380:	0021      	movs	r1, r4
    3382:	2017      	movs	r0, #23
    3384:	4e06      	ldr	r6, [pc, #24]	; (33a0 <system_board_init+0x30>)
    3386:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3388:	2280      	movs	r2, #128	; 0x80
    338a:	0412      	lsls	r2, r2, #16
    338c:	4b05      	ldr	r3, [pc, #20]	; (33a4 <system_board_init+0x34>)
    338e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3390:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3392:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3394:	0021      	movs	r1, r4
    3396:	2037      	movs	r0, #55	; 0x37
    3398:	47b0      	blx	r6
}
    339a:	b003      	add	sp, #12
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	00003579 	.word	0x00003579
    33a4:	41004400 	.word	0x41004400

000033a8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33a8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    33aa:	2a00      	cmp	r2, #0
    33ac:	d001      	beq.n	33b2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    33ae:	0018      	movs	r0, r3
    33b0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    33b2:	008b      	lsls	r3, r1, #2
    33b4:	4a06      	ldr	r2, [pc, #24]	; (33d0 <extint_register_callback+0x28>)
    33b6:	589b      	ldr	r3, [r3, r2]
    33b8:	2b00      	cmp	r3, #0
    33ba:	d003      	beq.n	33c4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    33bc:	4283      	cmp	r3, r0
    33be:	d005      	beq.n	33cc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    33c0:	231d      	movs	r3, #29
    33c2:	e7f4      	b.n	33ae <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    33c4:	0089      	lsls	r1, r1, #2
    33c6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    33c8:	2300      	movs	r3, #0
    33ca:	e7f0      	b.n	33ae <extint_register_callback+0x6>
		return STATUS_OK;
    33cc:	2300      	movs	r3, #0
    33ce:	e7ee      	b.n	33ae <extint_register_callback+0x6>
    33d0:	20000554 	.word	0x20000554

000033d4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33d4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33d6:	2900      	cmp	r1, #0
    33d8:	d001      	beq.n	33de <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    33da:	0018      	movs	r0, r3
    33dc:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    33de:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    33e0:	281f      	cmp	r0, #31
    33e2:	d800      	bhi.n	33e6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    33e4:	4a02      	ldr	r2, [pc, #8]	; (33f0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    33e6:	2301      	movs	r3, #1
    33e8:	4083      	lsls	r3, r0
    33ea:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    33ec:	2300      	movs	r3, #0
    33ee:	e7f4      	b.n	33da <extint_chan_enable_callback+0x6>
    33f0:	40001800 	.word	0x40001800

000033f4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33f4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    33f6:	2900      	cmp	r1, #0
    33f8:	d001      	beq.n	33fe <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    33fa:	0018      	movs	r0, r3
    33fc:	4770      	bx	lr
		return NULL;
    33fe:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3400:	281f      	cmp	r0, #31
    3402:	d800      	bhi.n	3406 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3404:	4a02      	ldr	r2, [pc, #8]	; (3410 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    3406:	2301      	movs	r3, #1
    3408:	4083      	lsls	r3, r0
    340a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    340c:	2300      	movs	r3, #0
    340e:	e7f4      	b.n	33fa <extint_chan_disable_callback+0x6>
    3410:	40001800 	.word	0x40001800

00003414 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3414:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3416:	2200      	movs	r2, #0
    3418:	4b10      	ldr	r3, [pc, #64]	; (345c <EIC_Handler+0x48>)
    341a:	701a      	strb	r2, [r3, #0]
    341c:	2300      	movs	r3, #0
    341e:	4910      	ldr	r1, [pc, #64]	; (3460 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3420:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3422:	4e10      	ldr	r6, [pc, #64]	; (3464 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3424:	4c0d      	ldr	r4, [pc, #52]	; (345c <EIC_Handler+0x48>)
    3426:	e00a      	b.n	343e <EIC_Handler+0x2a>
		return eics[eic_index];
    3428:	490d      	ldr	r1, [pc, #52]	; (3460 <EIC_Handler+0x4c>)
    342a:	e008      	b.n	343e <EIC_Handler+0x2a>
    342c:	7823      	ldrb	r3, [r4, #0]
    342e:	3301      	adds	r3, #1
    3430:	b2db      	uxtb	r3, r3
    3432:	7023      	strb	r3, [r4, #0]
    3434:	2b0f      	cmp	r3, #15
    3436:	d810      	bhi.n	345a <EIC_Handler+0x46>
		return NULL;
    3438:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    343a:	2b1f      	cmp	r3, #31
    343c:	d9f4      	bls.n	3428 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    343e:	0028      	movs	r0, r5
    3440:	4018      	ands	r0, r3
    3442:	2201      	movs	r2, #1
    3444:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3446:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3448:	4210      	tst	r0, r2
    344a:	d0ef      	beq.n	342c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    344c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    344e:	009b      	lsls	r3, r3, #2
    3450:	599b      	ldr	r3, [r3, r6]
    3452:	2b00      	cmp	r3, #0
    3454:	d0ea      	beq.n	342c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3456:	4798      	blx	r3
    3458:	e7e8      	b.n	342c <EIC_Handler+0x18>
			}
		}
	}
}
    345a:	bd70      	pop	{r4, r5, r6, pc}
    345c:	20000550 	.word	0x20000550
    3460:	40001800 	.word	0x40001800
    3464:	20000554 	.word	0x20000554

00003468 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3468:	4a04      	ldr	r2, [pc, #16]	; (347c <_extint_enable+0x14>)
    346a:	7813      	ldrb	r3, [r2, #0]
    346c:	2102      	movs	r1, #2
    346e:	430b      	orrs	r3, r1
    3470:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3472:	7853      	ldrb	r3, [r2, #1]
    3474:	b25b      	sxtb	r3, r3
    3476:	2b00      	cmp	r3, #0
    3478:	dbfb      	blt.n	3472 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    347a:	4770      	bx	lr
    347c:	40001800 	.word	0x40001800

00003480 <_system_extint_init>:
{
    3480:	b500      	push	{lr}
    3482:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3484:	4a12      	ldr	r2, [pc, #72]	; (34d0 <_system_extint_init+0x50>)
    3486:	6993      	ldr	r3, [r2, #24]
    3488:	2140      	movs	r1, #64	; 0x40
    348a:	430b      	orrs	r3, r1
    348c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    348e:	a901      	add	r1, sp, #4
    3490:	2300      	movs	r3, #0
    3492:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3494:	2005      	movs	r0, #5
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <_system_extint_init+0x54>)
    3498:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    349a:	2005      	movs	r0, #5
    349c:	4b0e      	ldr	r3, [pc, #56]	; (34d8 <_system_extint_init+0x58>)
    349e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    34a0:	4a0e      	ldr	r2, [pc, #56]	; (34dc <_system_extint_init+0x5c>)
    34a2:	7813      	ldrb	r3, [r2, #0]
    34a4:	2101      	movs	r1, #1
    34a6:	430b      	orrs	r3, r1
    34a8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34aa:	7853      	ldrb	r3, [r2, #1]
    34ac:	b25b      	sxtb	r3, r3
    34ae:	2b00      	cmp	r3, #0
    34b0:	dbfb      	blt.n	34aa <_system_extint_init+0x2a>
    34b2:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <_system_extint_init+0x60>)
    34b4:	0019      	movs	r1, r3
    34b6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    34b8:	2200      	movs	r2, #0
    34ba:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    34bc:	4299      	cmp	r1, r3
    34be:	d1fc      	bne.n	34ba <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34c0:	2210      	movs	r2, #16
    34c2:	4b08      	ldr	r3, [pc, #32]	; (34e4 <_system_extint_init+0x64>)
    34c4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    34c6:	4b08      	ldr	r3, [pc, #32]	; (34e8 <_system_extint_init+0x68>)
    34c8:	4798      	blx	r3
}
    34ca:	b003      	add	sp, #12
    34cc:	bd00      	pop	{pc}
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	40000400 	.word	0x40000400
    34d4:	00004aad 	.word	0x00004aad
    34d8:	00004a21 	.word	0x00004a21
    34dc:	40001800 	.word	0x40001800
    34e0:	20000554 	.word	0x20000554
    34e4:	e000e100 	.word	0xe000e100
    34e8:	00003469 	.word	0x00003469

000034ec <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    34ec:	2300      	movs	r3, #0
    34ee:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    34f0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    34f2:	2201      	movs	r2, #1
    34f4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    34f6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    34f8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    34fa:	3302      	adds	r3, #2
    34fc:	72c3      	strb	r3, [r0, #11]
}
    34fe:	4770      	bx	lr

00003500 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3500:	b5f0      	push	{r4, r5, r6, r7, lr}
    3502:	b083      	sub	sp, #12
    3504:	0005      	movs	r5, r0
    3506:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3508:	a901      	add	r1, sp, #4
    350a:	2300      	movs	r3, #0
    350c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    350e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3510:	7923      	ldrb	r3, [r4, #4]
    3512:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3514:	7a23      	ldrb	r3, [r4, #8]
    3516:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3518:	7820      	ldrb	r0, [r4, #0]
    351a:	4b15      	ldr	r3, [pc, #84]	; (3570 <extint_chan_set_config+0x70>)
    351c:	4798      	blx	r3
		return NULL;
    351e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    3520:	2d1f      	cmp	r5, #31
    3522:	d800      	bhi.n	3526 <extint_chan_set_config+0x26>
		return eics[eic_index];
    3524:	4813      	ldr	r0, [pc, #76]	; (3574 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    3526:	2207      	movs	r2, #7
    3528:	402a      	ands	r2, r5
    352a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    352c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    352e:	7aa3      	ldrb	r3, [r4, #10]
    3530:	2b00      	cmp	r3, #0
    3532:	d001      	beq.n	3538 <extint_chan_set_config+0x38>
    3534:	2308      	movs	r3, #8
    3536:	431f      	orrs	r7, r3
    3538:	08eb      	lsrs	r3, r5, #3
    353a:	009b      	lsls	r3, r3, #2
    353c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    353e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3540:	260f      	movs	r6, #15
    3542:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    3544:	43b1      	bics	r1, r6
			(new_config << config_pos);
    3546:	4097      	lsls	r7, r2
    3548:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    354a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    354c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    354e:	7a63      	ldrb	r3, [r4, #9]
    3550:	2b00      	cmp	r3, #0
    3552:	d106      	bne.n	3562 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    3554:	6943      	ldr	r3, [r0, #20]
    3556:	2201      	movs	r2, #1
    3558:	40aa      	lsls	r2, r5
    355a:	4393      	bics	r3, r2
    355c:	6143      	str	r3, [r0, #20]
	}
}
    355e:	b003      	add	sp, #12
    3560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3562:	6942      	ldr	r2, [r0, #20]
    3564:	2301      	movs	r3, #1
    3566:	40ab      	lsls	r3, r5
    3568:	4313      	orrs	r3, r2
    356a:	6143      	str	r3, [r0, #20]
    356c:	e7f7      	b.n	355e <extint_chan_set_config+0x5e>
    356e:	46c0      	nop			; (mov r8, r8)
    3570:	00004ba5 	.word	0x00004ba5
    3574:	40001800 	.word	0x40001800

00003578 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3578:	b500      	push	{lr}
    357a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    357c:	ab01      	add	r3, sp, #4
    357e:	2280      	movs	r2, #128	; 0x80
    3580:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3582:	780a      	ldrb	r2, [r1, #0]
    3584:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3586:	784a      	ldrb	r2, [r1, #1]
    3588:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    358a:	788a      	ldrb	r2, [r1, #2]
    358c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    358e:	0019      	movs	r1, r3
    3590:	4b01      	ldr	r3, [pc, #4]	; (3598 <port_pin_set_config+0x20>)
    3592:	4798      	blx	r3
}
    3594:	b003      	add	sp, #12
    3596:	bd00      	pop	{pc}
    3598:	00004ba5 	.word	0x00004ba5

0000359c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    359c:	b5f0      	push	{r4, r5, r6, r7, lr}
    359e:	46de      	mov	lr, fp
    35a0:	4657      	mov	r7, sl
    35a2:	464e      	mov	r6, r9
    35a4:	4645      	mov	r5, r8
    35a6:	b5e0      	push	{r5, r6, r7, lr}
    35a8:	b087      	sub	sp, #28
    35aa:	4680      	mov	r8, r0
    35ac:	9104      	str	r1, [sp, #16]
    35ae:	0016      	movs	r6, r2
    35b0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    35b2:	2200      	movs	r2, #0
    35b4:	2300      	movs	r3, #0
    35b6:	2100      	movs	r1, #0
    35b8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    35ba:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    35bc:	2001      	movs	r0, #1
    35be:	0021      	movs	r1, r4
    35c0:	9600      	str	r6, [sp, #0]
    35c2:	9701      	str	r7, [sp, #4]
    35c4:	465c      	mov	r4, fp
    35c6:	9403      	str	r4, [sp, #12]
    35c8:	4644      	mov	r4, r8
    35ca:	9405      	str	r4, [sp, #20]
    35cc:	e013      	b.n	35f6 <long_division+0x5a>
    35ce:	2420      	movs	r4, #32
    35d0:	1a64      	subs	r4, r4, r1
    35d2:	0005      	movs	r5, r0
    35d4:	40e5      	lsrs	r5, r4
    35d6:	46a8      	mov	r8, r5
    35d8:	e014      	b.n	3604 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    35da:	9c00      	ldr	r4, [sp, #0]
    35dc:	9d01      	ldr	r5, [sp, #4]
    35de:	1b12      	subs	r2, r2, r4
    35e0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    35e2:	465c      	mov	r4, fp
    35e4:	464d      	mov	r5, r9
    35e6:	432c      	orrs	r4, r5
    35e8:	46a3      	mov	fp, r4
    35ea:	9c03      	ldr	r4, [sp, #12]
    35ec:	4645      	mov	r5, r8
    35ee:	432c      	orrs	r4, r5
    35f0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    35f2:	3901      	subs	r1, #1
    35f4:	d325      	bcc.n	3642 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    35f6:	2420      	movs	r4, #32
    35f8:	4264      	negs	r4, r4
    35fa:	190c      	adds	r4, r1, r4
    35fc:	d4e7      	bmi.n	35ce <long_division+0x32>
    35fe:	0005      	movs	r5, r0
    3600:	40a5      	lsls	r5, r4
    3602:	46a8      	mov	r8, r5
    3604:	0004      	movs	r4, r0
    3606:	408c      	lsls	r4, r1
    3608:	46a1      	mov	r9, r4
		r = r << 1;
    360a:	1892      	adds	r2, r2, r2
    360c:	415b      	adcs	r3, r3
    360e:	0014      	movs	r4, r2
    3610:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3612:	9e05      	ldr	r6, [sp, #20]
    3614:	464f      	mov	r7, r9
    3616:	403e      	ands	r6, r7
    3618:	46b4      	mov	ip, r6
    361a:	9e04      	ldr	r6, [sp, #16]
    361c:	4647      	mov	r7, r8
    361e:	403e      	ands	r6, r7
    3620:	46b2      	mov	sl, r6
    3622:	4666      	mov	r6, ip
    3624:	4657      	mov	r7, sl
    3626:	433e      	orrs	r6, r7
    3628:	d003      	beq.n	3632 <long_division+0x96>
			r |= 0x01;
    362a:	0006      	movs	r6, r0
    362c:	4326      	orrs	r6, r4
    362e:	0032      	movs	r2, r6
    3630:	002b      	movs	r3, r5
		if (r >= d) {
    3632:	9c00      	ldr	r4, [sp, #0]
    3634:	9d01      	ldr	r5, [sp, #4]
    3636:	429d      	cmp	r5, r3
    3638:	d8db      	bhi.n	35f2 <long_division+0x56>
    363a:	d1ce      	bne.n	35da <long_division+0x3e>
    363c:	4294      	cmp	r4, r2
    363e:	d8d8      	bhi.n	35f2 <long_division+0x56>
    3640:	e7cb      	b.n	35da <long_division+0x3e>
    3642:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    3644:	4658      	mov	r0, fp
    3646:	0019      	movs	r1, r3
    3648:	b007      	add	sp, #28
    364a:	bc3c      	pop	{r2, r3, r4, r5}
    364c:	4690      	mov	r8, r2
    364e:	4699      	mov	r9, r3
    3650:	46a2      	mov	sl, r4
    3652:	46ab      	mov	fp, r5
    3654:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003656 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3656:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3658:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    365a:	2340      	movs	r3, #64	; 0x40
    365c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    365e:	4281      	cmp	r1, r0
    3660:	d202      	bcs.n	3668 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3662:	0018      	movs	r0, r3
    3664:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3666:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    3668:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    366a:	1c63      	adds	r3, r4, #1
    366c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    366e:	4288      	cmp	r0, r1
    3670:	d9f9      	bls.n	3666 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3672:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3674:	2cff      	cmp	r4, #255	; 0xff
    3676:	d8f4      	bhi.n	3662 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    3678:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    367a:	2300      	movs	r3, #0
    367c:	e7f1      	b.n	3662 <_sercom_get_sync_baud_val+0xc>
	...

00003680 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3680:	b5f0      	push	{r4, r5, r6, r7, lr}
    3682:	b083      	sub	sp, #12
    3684:	000f      	movs	r7, r1
    3686:	0016      	movs	r6, r2
    3688:	aa08      	add	r2, sp, #32
    368a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    368c:	0004      	movs	r4, r0
    368e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3690:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3692:	42bc      	cmp	r4, r7
    3694:	d902      	bls.n	369c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3696:	0010      	movs	r0, r2
    3698:	b003      	add	sp, #12
    369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    369c:	2b00      	cmp	r3, #0
    369e:	d114      	bne.n	36ca <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    36a0:	0002      	movs	r2, r0
    36a2:	0008      	movs	r0, r1
    36a4:	2100      	movs	r1, #0
    36a6:	4c19      	ldr	r4, [pc, #100]	; (370c <_sercom_get_async_baud_val+0x8c>)
    36a8:	47a0      	blx	r4
    36aa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    36ac:	003a      	movs	r2, r7
    36ae:	2300      	movs	r3, #0
    36b0:	2000      	movs	r0, #0
    36b2:	4c17      	ldr	r4, [pc, #92]	; (3710 <_sercom_get_async_baud_val+0x90>)
    36b4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    36b6:	2200      	movs	r2, #0
    36b8:	2301      	movs	r3, #1
    36ba:	1a12      	subs	r2, r2, r0
    36bc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    36be:	0c12      	lsrs	r2, r2, #16
    36c0:	041b      	lsls	r3, r3, #16
    36c2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    36c4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    36c6:	2200      	movs	r2, #0
    36c8:	e7e5      	b.n	3696 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    36ca:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    36cc:	2b01      	cmp	r3, #1
    36ce:	d1f9      	bne.n	36c4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    36d0:	000a      	movs	r2, r1
    36d2:	2300      	movs	r3, #0
    36d4:	2100      	movs	r1, #0
    36d6:	4c0d      	ldr	r4, [pc, #52]	; (370c <_sercom_get_async_baud_val+0x8c>)
    36d8:	47a0      	blx	r4
    36da:	0002      	movs	r2, r0
    36dc:	000b      	movs	r3, r1
    36de:	9200      	str	r2, [sp, #0]
    36e0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    36e2:	0038      	movs	r0, r7
    36e4:	2100      	movs	r1, #0
    36e6:	4c0a      	ldr	r4, [pc, #40]	; (3710 <_sercom_get_async_baud_val+0x90>)
    36e8:	47a0      	blx	r4
    36ea:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    36ec:	2380      	movs	r3, #128	; 0x80
    36ee:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    36f0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    36f2:	4298      	cmp	r0, r3
    36f4:	d8cf      	bhi.n	3696 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    36f6:	0f79      	lsrs	r1, r7, #29
    36f8:	00f8      	lsls	r0, r7, #3
    36fa:	9a00      	ldr	r2, [sp, #0]
    36fc:	9b01      	ldr	r3, [sp, #4]
    36fe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3700:	00ea      	lsls	r2, r5, #3
    3702:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    3704:	b2d2      	uxtb	r2, r2
    3706:	0352      	lsls	r2, r2, #13
    3708:	432a      	orrs	r2, r5
    370a:	e7db      	b.n	36c4 <_sercom_get_async_baud_val+0x44>
    370c:	00006cb5 	.word	0x00006cb5
    3710:	0000359d 	.word	0x0000359d

00003714 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3714:	b510      	push	{r4, lr}
    3716:	b082      	sub	sp, #8
    3718:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    371a:	4b0e      	ldr	r3, [pc, #56]	; (3754 <sercom_set_gclk_generator+0x40>)
    371c:	781b      	ldrb	r3, [r3, #0]
    371e:	2b00      	cmp	r3, #0
    3720:	d007      	beq.n	3732 <sercom_set_gclk_generator+0x1e>
    3722:	2900      	cmp	r1, #0
    3724:	d105      	bne.n	3732 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3726:	4b0b      	ldr	r3, [pc, #44]	; (3754 <sercom_set_gclk_generator+0x40>)
    3728:	785b      	ldrb	r3, [r3, #1]
    372a:	4283      	cmp	r3, r0
    372c:	d010      	beq.n	3750 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    372e:	201d      	movs	r0, #29
    3730:	e00c      	b.n	374c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3732:	a901      	add	r1, sp, #4
    3734:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3736:	2013      	movs	r0, #19
    3738:	4b07      	ldr	r3, [pc, #28]	; (3758 <sercom_set_gclk_generator+0x44>)
    373a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    373c:	2013      	movs	r0, #19
    373e:	4b07      	ldr	r3, [pc, #28]	; (375c <sercom_set_gclk_generator+0x48>)
    3740:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3742:	4b04      	ldr	r3, [pc, #16]	; (3754 <sercom_set_gclk_generator+0x40>)
    3744:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3746:	2201      	movs	r2, #1
    3748:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    374a:	2000      	movs	r0, #0
}
    374c:	b002      	add	sp, #8
    374e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3750:	2000      	movs	r0, #0
    3752:	e7fb      	b.n	374c <sercom_set_gclk_generator+0x38>
    3754:	20000218 	.word	0x20000218
    3758:	00004aad 	.word	0x00004aad
    375c:	00004a21 	.word	0x00004a21

00003760 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3760:	4b40      	ldr	r3, [pc, #256]	; (3864 <_sercom_get_default_pad+0x104>)
    3762:	4298      	cmp	r0, r3
    3764:	d031      	beq.n	37ca <_sercom_get_default_pad+0x6a>
    3766:	d90a      	bls.n	377e <_sercom_get_default_pad+0x1e>
    3768:	4b3f      	ldr	r3, [pc, #252]	; (3868 <_sercom_get_default_pad+0x108>)
    376a:	4298      	cmp	r0, r3
    376c:	d04d      	beq.n	380a <_sercom_get_default_pad+0xaa>
    376e:	4b3f      	ldr	r3, [pc, #252]	; (386c <_sercom_get_default_pad+0x10c>)
    3770:	4298      	cmp	r0, r3
    3772:	d05a      	beq.n	382a <_sercom_get_default_pad+0xca>
    3774:	4b3e      	ldr	r3, [pc, #248]	; (3870 <_sercom_get_default_pad+0x110>)
    3776:	4298      	cmp	r0, r3
    3778:	d037      	beq.n	37ea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    377a:	2000      	movs	r0, #0
}
    377c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    377e:	4b3d      	ldr	r3, [pc, #244]	; (3874 <_sercom_get_default_pad+0x114>)
    3780:	4298      	cmp	r0, r3
    3782:	d00c      	beq.n	379e <_sercom_get_default_pad+0x3e>
    3784:	4b3c      	ldr	r3, [pc, #240]	; (3878 <_sercom_get_default_pad+0x118>)
    3786:	4298      	cmp	r0, r3
    3788:	d1f7      	bne.n	377a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    378a:	2901      	cmp	r1, #1
    378c:	d017      	beq.n	37be <_sercom_get_default_pad+0x5e>
    378e:	2900      	cmp	r1, #0
    3790:	d05d      	beq.n	384e <_sercom_get_default_pad+0xee>
    3792:	2902      	cmp	r1, #2
    3794:	d015      	beq.n	37c2 <_sercom_get_default_pad+0x62>
    3796:	2903      	cmp	r1, #3
    3798:	d015      	beq.n	37c6 <_sercom_get_default_pad+0x66>
	return 0;
    379a:	2000      	movs	r0, #0
    379c:	e7ee      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    379e:	2901      	cmp	r1, #1
    37a0:	d007      	beq.n	37b2 <_sercom_get_default_pad+0x52>
    37a2:	2900      	cmp	r1, #0
    37a4:	d051      	beq.n	384a <_sercom_get_default_pad+0xea>
    37a6:	2902      	cmp	r1, #2
    37a8:	d005      	beq.n	37b6 <_sercom_get_default_pad+0x56>
    37aa:	2903      	cmp	r1, #3
    37ac:	d005      	beq.n	37ba <_sercom_get_default_pad+0x5a>
	return 0;
    37ae:	2000      	movs	r0, #0
    37b0:	e7e4      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37b2:	4832      	ldr	r0, [pc, #200]	; (387c <_sercom_get_default_pad+0x11c>)
    37b4:	e7e2      	b.n	377c <_sercom_get_default_pad+0x1c>
    37b6:	4832      	ldr	r0, [pc, #200]	; (3880 <_sercom_get_default_pad+0x120>)
    37b8:	e7e0      	b.n	377c <_sercom_get_default_pad+0x1c>
    37ba:	4832      	ldr	r0, [pc, #200]	; (3884 <_sercom_get_default_pad+0x124>)
    37bc:	e7de      	b.n	377c <_sercom_get_default_pad+0x1c>
    37be:	4832      	ldr	r0, [pc, #200]	; (3888 <_sercom_get_default_pad+0x128>)
    37c0:	e7dc      	b.n	377c <_sercom_get_default_pad+0x1c>
    37c2:	4832      	ldr	r0, [pc, #200]	; (388c <_sercom_get_default_pad+0x12c>)
    37c4:	e7da      	b.n	377c <_sercom_get_default_pad+0x1c>
    37c6:	4832      	ldr	r0, [pc, #200]	; (3890 <_sercom_get_default_pad+0x130>)
    37c8:	e7d8      	b.n	377c <_sercom_get_default_pad+0x1c>
    37ca:	2901      	cmp	r1, #1
    37cc:	d007      	beq.n	37de <_sercom_get_default_pad+0x7e>
    37ce:	2900      	cmp	r1, #0
    37d0:	d03f      	beq.n	3852 <_sercom_get_default_pad+0xf2>
    37d2:	2902      	cmp	r1, #2
    37d4:	d005      	beq.n	37e2 <_sercom_get_default_pad+0x82>
    37d6:	2903      	cmp	r1, #3
    37d8:	d005      	beq.n	37e6 <_sercom_get_default_pad+0x86>
	return 0;
    37da:	2000      	movs	r0, #0
    37dc:	e7ce      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37de:	482d      	ldr	r0, [pc, #180]	; (3894 <_sercom_get_default_pad+0x134>)
    37e0:	e7cc      	b.n	377c <_sercom_get_default_pad+0x1c>
    37e2:	482d      	ldr	r0, [pc, #180]	; (3898 <_sercom_get_default_pad+0x138>)
    37e4:	e7ca      	b.n	377c <_sercom_get_default_pad+0x1c>
    37e6:	482d      	ldr	r0, [pc, #180]	; (389c <_sercom_get_default_pad+0x13c>)
    37e8:	e7c8      	b.n	377c <_sercom_get_default_pad+0x1c>
    37ea:	2901      	cmp	r1, #1
    37ec:	d007      	beq.n	37fe <_sercom_get_default_pad+0x9e>
    37ee:	2900      	cmp	r1, #0
    37f0:	d031      	beq.n	3856 <_sercom_get_default_pad+0xf6>
    37f2:	2902      	cmp	r1, #2
    37f4:	d005      	beq.n	3802 <_sercom_get_default_pad+0xa2>
    37f6:	2903      	cmp	r1, #3
    37f8:	d005      	beq.n	3806 <_sercom_get_default_pad+0xa6>
	return 0;
    37fa:	2000      	movs	r0, #0
    37fc:	e7be      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37fe:	4828      	ldr	r0, [pc, #160]	; (38a0 <_sercom_get_default_pad+0x140>)
    3800:	e7bc      	b.n	377c <_sercom_get_default_pad+0x1c>
    3802:	4828      	ldr	r0, [pc, #160]	; (38a4 <_sercom_get_default_pad+0x144>)
    3804:	e7ba      	b.n	377c <_sercom_get_default_pad+0x1c>
    3806:	4828      	ldr	r0, [pc, #160]	; (38a8 <_sercom_get_default_pad+0x148>)
    3808:	e7b8      	b.n	377c <_sercom_get_default_pad+0x1c>
    380a:	2901      	cmp	r1, #1
    380c:	d007      	beq.n	381e <_sercom_get_default_pad+0xbe>
    380e:	2900      	cmp	r1, #0
    3810:	d023      	beq.n	385a <_sercom_get_default_pad+0xfa>
    3812:	2902      	cmp	r1, #2
    3814:	d005      	beq.n	3822 <_sercom_get_default_pad+0xc2>
    3816:	2903      	cmp	r1, #3
    3818:	d005      	beq.n	3826 <_sercom_get_default_pad+0xc6>
	return 0;
    381a:	2000      	movs	r0, #0
    381c:	e7ae      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    381e:	4823      	ldr	r0, [pc, #140]	; (38ac <_sercom_get_default_pad+0x14c>)
    3820:	e7ac      	b.n	377c <_sercom_get_default_pad+0x1c>
    3822:	4823      	ldr	r0, [pc, #140]	; (38b0 <_sercom_get_default_pad+0x150>)
    3824:	e7aa      	b.n	377c <_sercom_get_default_pad+0x1c>
    3826:	4823      	ldr	r0, [pc, #140]	; (38b4 <_sercom_get_default_pad+0x154>)
    3828:	e7a8      	b.n	377c <_sercom_get_default_pad+0x1c>
    382a:	2901      	cmp	r1, #1
    382c:	d007      	beq.n	383e <_sercom_get_default_pad+0xde>
    382e:	2900      	cmp	r1, #0
    3830:	d015      	beq.n	385e <_sercom_get_default_pad+0xfe>
    3832:	2902      	cmp	r1, #2
    3834:	d005      	beq.n	3842 <_sercom_get_default_pad+0xe2>
    3836:	2903      	cmp	r1, #3
    3838:	d005      	beq.n	3846 <_sercom_get_default_pad+0xe6>
	return 0;
    383a:	2000      	movs	r0, #0
    383c:	e79e      	b.n	377c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    383e:	481e      	ldr	r0, [pc, #120]	; (38b8 <_sercom_get_default_pad+0x158>)
    3840:	e79c      	b.n	377c <_sercom_get_default_pad+0x1c>
    3842:	481e      	ldr	r0, [pc, #120]	; (38bc <_sercom_get_default_pad+0x15c>)
    3844:	e79a      	b.n	377c <_sercom_get_default_pad+0x1c>
    3846:	481e      	ldr	r0, [pc, #120]	; (38c0 <_sercom_get_default_pad+0x160>)
    3848:	e798      	b.n	377c <_sercom_get_default_pad+0x1c>
    384a:	481e      	ldr	r0, [pc, #120]	; (38c4 <_sercom_get_default_pad+0x164>)
    384c:	e796      	b.n	377c <_sercom_get_default_pad+0x1c>
    384e:	2003      	movs	r0, #3
    3850:	e794      	b.n	377c <_sercom_get_default_pad+0x1c>
    3852:	481d      	ldr	r0, [pc, #116]	; (38c8 <_sercom_get_default_pad+0x168>)
    3854:	e792      	b.n	377c <_sercom_get_default_pad+0x1c>
    3856:	481d      	ldr	r0, [pc, #116]	; (38cc <_sercom_get_default_pad+0x16c>)
    3858:	e790      	b.n	377c <_sercom_get_default_pad+0x1c>
    385a:	481d      	ldr	r0, [pc, #116]	; (38d0 <_sercom_get_default_pad+0x170>)
    385c:	e78e      	b.n	377c <_sercom_get_default_pad+0x1c>
    385e:	481d      	ldr	r0, [pc, #116]	; (38d4 <_sercom_get_default_pad+0x174>)
    3860:	e78c      	b.n	377c <_sercom_get_default_pad+0x1c>
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	42001000 	.word	0x42001000
    3868:	42001800 	.word	0x42001800
    386c:	42001c00 	.word	0x42001c00
    3870:	42001400 	.word	0x42001400
    3874:	42000800 	.word	0x42000800
    3878:	42000c00 	.word	0x42000c00
    387c:	00050003 	.word	0x00050003
    3880:	00060003 	.word	0x00060003
    3884:	00070003 	.word	0x00070003
    3888:	00010003 	.word	0x00010003
    388c:	001e0003 	.word	0x001e0003
    3890:	001f0003 	.word	0x001f0003
    3894:	00090003 	.word	0x00090003
    3898:	000a0003 	.word	0x000a0003
    389c:	000b0003 	.word	0x000b0003
    38a0:	00110003 	.word	0x00110003
    38a4:	00120003 	.word	0x00120003
    38a8:	00130003 	.word	0x00130003
    38ac:	000d0003 	.word	0x000d0003
    38b0:	000e0003 	.word	0x000e0003
    38b4:	000f0003 	.word	0x000f0003
    38b8:	00170003 	.word	0x00170003
    38bc:	00180003 	.word	0x00180003
    38c0:	00190003 	.word	0x00190003
    38c4:	00040003 	.word	0x00040003
    38c8:	00080003 	.word	0x00080003
    38cc:	00100003 	.word	0x00100003
    38d0:	000c0003 	.word	0x000c0003
    38d4:	00160003 	.word	0x00160003

000038d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    38d8:	b530      	push	{r4, r5, lr}
    38da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    38dc:	4b0b      	ldr	r3, [pc, #44]	; (390c <_sercom_get_sercom_inst_index+0x34>)
    38de:	466a      	mov	r2, sp
    38e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    38e2:	c232      	stmia	r2!, {r1, r4, r5}
    38e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    38e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    38e8:	9b00      	ldr	r3, [sp, #0]
    38ea:	4283      	cmp	r3, r0
    38ec:	d00b      	beq.n	3906 <_sercom_get_sercom_inst_index+0x2e>
    38ee:	2301      	movs	r3, #1
    38f0:	009a      	lsls	r2, r3, #2
    38f2:	4669      	mov	r1, sp
    38f4:	5852      	ldr	r2, [r2, r1]
    38f6:	4282      	cmp	r2, r0
    38f8:	d006      	beq.n	3908 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    38fa:	3301      	adds	r3, #1
    38fc:	2b06      	cmp	r3, #6
    38fe:	d1f7      	bne.n	38f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3900:	2000      	movs	r0, #0
}
    3902:	b007      	add	sp, #28
    3904:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3906:	2300      	movs	r3, #0
			return i;
    3908:	b2d8      	uxtb	r0, r3
    390a:	e7fa      	b.n	3902 <_sercom_get_sercom_inst_index+0x2a>
    390c:	00009d00 	.word	0x00009d00

00003910 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3910:	4770      	bx	lr
	...

00003914 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3914:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3916:	4b0a      	ldr	r3, [pc, #40]	; (3940 <_sercom_set_handler+0x2c>)
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	2b00      	cmp	r3, #0
    391c:	d10c      	bne.n	3938 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    391e:	4f09      	ldr	r7, [pc, #36]	; (3944 <_sercom_set_handler+0x30>)
    3920:	4e09      	ldr	r6, [pc, #36]	; (3948 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3922:	4d0a      	ldr	r5, [pc, #40]	; (394c <_sercom_set_handler+0x38>)
    3924:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3926:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3928:	195a      	adds	r2, r3, r5
    392a:	6014      	str	r4, [r2, #0]
    392c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    392e:	2b18      	cmp	r3, #24
    3930:	d1f9      	bne.n	3926 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3932:	2201      	movs	r2, #1
    3934:	4b02      	ldr	r3, [pc, #8]	; (3940 <_sercom_set_handler+0x2c>)
    3936:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3938:	0080      	lsls	r0, r0, #2
    393a:	4b02      	ldr	r3, [pc, #8]	; (3944 <_sercom_set_handler+0x30>)
    393c:	50c1      	str	r1, [r0, r3]
}
    393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3940:	2000021a 	.word	0x2000021a
    3944:	2000021c 	.word	0x2000021c
    3948:	00003911 	.word	0x00003911
    394c:	20000594 	.word	0x20000594

00003950 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3950:	b500      	push	{lr}
    3952:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3954:	2309      	movs	r3, #9
    3956:	466a      	mov	r2, sp
    3958:	7013      	strb	r3, [r2, #0]
    395a:	3301      	adds	r3, #1
    395c:	7053      	strb	r3, [r2, #1]
    395e:	3301      	adds	r3, #1
    3960:	7093      	strb	r3, [r2, #2]
    3962:	3301      	adds	r3, #1
    3964:	70d3      	strb	r3, [r2, #3]
    3966:	3301      	adds	r3, #1
    3968:	7113      	strb	r3, [r2, #4]
    396a:	3301      	adds	r3, #1
    396c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    396e:	4b03      	ldr	r3, [pc, #12]	; (397c <_sercom_get_interrupt_vector+0x2c>)
    3970:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3972:	466b      	mov	r3, sp
    3974:	5618      	ldrsb	r0, [r3, r0]
}
    3976:	b003      	add	sp, #12
    3978:	bd00      	pop	{pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	000038d9 	.word	0x000038d9

00003980 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3980:	b510      	push	{r4, lr}
    3982:	4b02      	ldr	r3, [pc, #8]	; (398c <SERCOM0_Handler+0xc>)
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	2000      	movs	r0, #0
    3988:	4798      	blx	r3
    398a:	bd10      	pop	{r4, pc}
    398c:	2000021c 	.word	0x2000021c

00003990 <SERCOM1_Handler>:
    3990:	b510      	push	{r4, lr}
    3992:	4b02      	ldr	r3, [pc, #8]	; (399c <SERCOM1_Handler+0xc>)
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	2001      	movs	r0, #1
    3998:	4798      	blx	r3
    399a:	bd10      	pop	{r4, pc}
    399c:	2000021c 	.word	0x2000021c

000039a0 <SERCOM2_Handler>:
    39a0:	b510      	push	{r4, lr}
    39a2:	4b02      	ldr	r3, [pc, #8]	; (39ac <SERCOM2_Handler+0xc>)
    39a4:	689b      	ldr	r3, [r3, #8]
    39a6:	2002      	movs	r0, #2
    39a8:	4798      	blx	r3
    39aa:	bd10      	pop	{r4, pc}
    39ac:	2000021c 	.word	0x2000021c

000039b0 <SERCOM3_Handler>:
    39b0:	b510      	push	{r4, lr}
    39b2:	4b02      	ldr	r3, [pc, #8]	; (39bc <SERCOM3_Handler+0xc>)
    39b4:	68db      	ldr	r3, [r3, #12]
    39b6:	2003      	movs	r0, #3
    39b8:	4798      	blx	r3
    39ba:	bd10      	pop	{r4, pc}
    39bc:	2000021c 	.word	0x2000021c

000039c0 <SERCOM4_Handler>:
    39c0:	b510      	push	{r4, lr}
    39c2:	4b02      	ldr	r3, [pc, #8]	; (39cc <SERCOM4_Handler+0xc>)
    39c4:	691b      	ldr	r3, [r3, #16]
    39c6:	2004      	movs	r0, #4
    39c8:	4798      	blx	r3
    39ca:	bd10      	pop	{r4, pc}
    39cc:	2000021c 	.word	0x2000021c

000039d0 <SERCOM5_Handler>:
    39d0:	b510      	push	{r4, lr}
    39d2:	4b02      	ldr	r3, [pc, #8]	; (39dc <SERCOM5_Handler+0xc>)
    39d4:	695b      	ldr	r3, [r3, #20]
    39d6:	2005      	movs	r0, #5
    39d8:	4798      	blx	r3
    39da:	bd10      	pop	{r4, pc}
    39dc:	2000021c 	.word	0x2000021c

000039e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    39e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e2:	b08b      	sub	sp, #44	; 0x2c
    39e4:	0005      	movs	r5, r0
    39e6:	000c      	movs	r4, r1
    39e8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    39ea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    39ec:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    39ee:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    39f0:	079b      	lsls	r3, r3, #30
    39f2:	d501      	bpl.n	39f8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    39f4:	b00b      	add	sp, #44	; 0x2c
    39f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    39f8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    39fa:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    39fc:	07db      	lsls	r3, r3, #31
    39fe:	d4f9      	bmi.n	39f4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a00:	0008      	movs	r0, r1
    3a02:	4b60      	ldr	r3, [pc, #384]	; (3b84 <spi_init+0x1a4>)
    3a04:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3a06:	4a60      	ldr	r2, [pc, #384]	; (3b88 <spi_init+0x1a8>)
    3a08:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3a0a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3a0c:	2301      	movs	r3, #1
    3a0e:	40bb      	lsls	r3, r7
    3a10:	430b      	orrs	r3, r1
    3a12:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3a14:	a909      	add	r1, sp, #36	; 0x24
    3a16:	2724      	movs	r7, #36	; 0x24
    3a18:	5df3      	ldrb	r3, [r6, r7]
    3a1a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3a1c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3a1e:	b2c3      	uxtb	r3, r0
    3a20:	9301      	str	r3, [sp, #4]
    3a22:	0018      	movs	r0, r3
    3a24:	4b59      	ldr	r3, [pc, #356]	; (3b8c <spi_init+0x1ac>)
    3a26:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3a28:	9801      	ldr	r0, [sp, #4]
    3a2a:	4b59      	ldr	r3, [pc, #356]	; (3b90 <spi_init+0x1b0>)
    3a2c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3a2e:	5df0      	ldrb	r0, [r6, r7]
    3a30:	2100      	movs	r1, #0
    3a32:	4b58      	ldr	r3, [pc, #352]	; (3b94 <spi_init+0x1b4>)
    3a34:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3a36:	7833      	ldrb	r3, [r6, #0]
    3a38:	2b01      	cmp	r3, #1
    3a3a:	d038      	beq.n	3aae <spi_init+0xce>
    3a3c:	002b      	movs	r3, r5
    3a3e:	330c      	adds	r3, #12
    3a40:	0029      	movs	r1, r5
    3a42:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3a44:	2200      	movs	r2, #0
    3a46:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3a48:	428b      	cmp	r3, r1
    3a4a:	d1fc      	bne.n	3a46 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    3a4c:	2300      	movs	r3, #0
    3a4e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3a50:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3a52:	2400      	movs	r4, #0
    3a54:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3a56:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3a58:	3336      	adds	r3, #54	; 0x36
    3a5a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3a5c:	3301      	adds	r3, #1
    3a5e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3a60:	3301      	adds	r3, #1
    3a62:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3a64:	3b35      	subs	r3, #53	; 0x35
    3a66:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3a68:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3a6a:	6828      	ldr	r0, [r5, #0]
    3a6c:	4b45      	ldr	r3, [pc, #276]	; (3b84 <spi_init+0x1a4>)
    3a6e:	4798      	blx	r3
    3a70:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3a72:	4949      	ldr	r1, [pc, #292]	; (3b98 <spi_init+0x1b8>)
    3a74:	4b49      	ldr	r3, [pc, #292]	; (3b9c <spi_init+0x1bc>)
    3a76:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3a78:	00bf      	lsls	r7, r7, #2
    3a7a:	4b49      	ldr	r3, [pc, #292]	; (3ba0 <spi_init+0x1c0>)
    3a7c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a7e:	682f      	ldr	r7, [r5, #0]
    3a80:	ab04      	add	r3, sp, #16
    3a82:	2280      	movs	r2, #128	; 0x80
    3a84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a86:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3a88:	3a7f      	subs	r2, #127	; 0x7f
    3a8a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3a8c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3a8e:	7833      	ldrb	r3, [r6, #0]
    3a90:	2b00      	cmp	r3, #0
    3a92:	d102      	bne.n	3a9a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3a94:	2200      	movs	r2, #0
    3a96:	ab04      	add	r3, sp, #16
    3a98:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3a9a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3a9c:	9305      	str	r3, [sp, #20]
    3a9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3aa0:	9306      	str	r3, [sp, #24]
    3aa2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3aa4:	9307      	str	r3, [sp, #28]
    3aa6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3aa8:	9308      	str	r3, [sp, #32]
    3aaa:	2400      	movs	r4, #0
    3aac:	e00b      	b.n	3ac6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3aae:	6823      	ldr	r3, [r4, #0]
    3ab0:	220c      	movs	r2, #12
    3ab2:	4313      	orrs	r3, r2
    3ab4:	6023      	str	r3, [r4, #0]
    3ab6:	e7c1      	b.n	3a3c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3ab8:	0038      	movs	r0, r7
    3aba:	4b3a      	ldr	r3, [pc, #232]	; (3ba4 <spi_init+0x1c4>)
    3abc:	4798      	blx	r3
    3abe:	e00a      	b.n	3ad6 <spi_init+0xf6>
    3ac0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3ac2:	2c04      	cmp	r4, #4
    3ac4:	d010      	beq.n	3ae8 <spi_init+0x108>
    3ac6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ac8:	00a3      	lsls	r3, r4, #2
    3aca:	aa02      	add	r2, sp, #8
    3acc:	200c      	movs	r0, #12
    3ace:	1812      	adds	r2, r2, r0
    3ad0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d0f0      	beq.n	3ab8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    3ad6:	1c43      	adds	r3, r0, #1
    3ad8:	d0f2      	beq.n	3ac0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3ada:	a904      	add	r1, sp, #16
    3adc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3ade:	0c00      	lsrs	r0, r0, #16
    3ae0:	b2c0      	uxtb	r0, r0
    3ae2:	4b31      	ldr	r3, [pc, #196]	; (3ba8 <spi_init+0x1c8>)
    3ae4:	4798      	blx	r3
    3ae6:	e7eb      	b.n	3ac0 <spi_init+0xe0>
	module->mode             = config->mode;
    3ae8:	7833      	ldrb	r3, [r6, #0]
    3aea:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3aec:	7c33      	ldrb	r3, [r6, #16]
    3aee:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3af0:	7cb3      	ldrb	r3, [r6, #18]
    3af2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3af4:	7d33      	ldrb	r3, [r6, #20]
    3af6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    3af8:	2200      	movs	r2, #0
    3afa:	ab02      	add	r3, sp, #8
    3afc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3afe:	7833      	ldrb	r3, [r6, #0]
    3b00:	2b01      	cmp	r3, #1
    3b02:	d028      	beq.n	3b56 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    3b04:	6873      	ldr	r3, [r6, #4]
    3b06:	68b2      	ldr	r2, [r6, #8]
    3b08:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    3b0a:	68f2      	ldr	r2, [r6, #12]
    3b0c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3b0e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3b10:	7c72      	ldrb	r2, [r6, #17]
    3b12:	2a00      	cmp	r2, #0
    3b14:	d103      	bne.n	3b1e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3b16:	4a25      	ldr	r2, [pc, #148]	; (3bac <spi_init+0x1cc>)
    3b18:	7892      	ldrb	r2, [r2, #2]
    3b1a:	0792      	lsls	r2, r2, #30
    3b1c:	d501      	bpl.n	3b22 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3b1e:	2280      	movs	r2, #128	; 0x80
    3b20:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3b22:	7cb2      	ldrb	r2, [r6, #18]
    3b24:	2a00      	cmp	r2, #0
    3b26:	d002      	beq.n	3b2e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3b28:	2280      	movs	r2, #128	; 0x80
    3b2a:	0292      	lsls	r2, r2, #10
    3b2c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    3b2e:	7cf2      	ldrb	r2, [r6, #19]
    3b30:	2a00      	cmp	r2, #0
    3b32:	d002      	beq.n	3b3a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3b34:	2280      	movs	r2, #128	; 0x80
    3b36:	0092      	lsls	r2, r2, #2
    3b38:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    3b3a:	7d32      	ldrb	r2, [r6, #20]
    3b3c:	2a00      	cmp	r2, #0
    3b3e:	d002      	beq.n	3b46 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3b40:	2280      	movs	r2, #128	; 0x80
    3b42:	0192      	lsls	r2, r2, #6
    3b44:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    3b46:	683a      	ldr	r2, [r7, #0]
    3b48:	4313      	orrs	r3, r2
    3b4a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3b4c:	687b      	ldr	r3, [r7, #4]
    3b4e:	430b      	orrs	r3, r1
    3b50:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    3b52:	2000      	movs	r0, #0
    3b54:	e74e      	b.n	39f4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b56:	6828      	ldr	r0, [r5, #0]
    3b58:	4b0a      	ldr	r3, [pc, #40]	; (3b84 <spi_init+0x1a4>)
    3b5a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b5c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3b5e:	b2c0      	uxtb	r0, r0
    3b60:	4b13      	ldr	r3, [pc, #76]	; (3bb0 <spi_init+0x1d0>)
    3b62:	4798      	blx	r3
    3b64:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3b66:	ab02      	add	r3, sp, #8
    3b68:	1d9a      	adds	r2, r3, #6
    3b6a:	69b0      	ldr	r0, [r6, #24]
    3b6c:	4b11      	ldr	r3, [pc, #68]	; (3bb4 <spi_init+0x1d4>)
    3b6e:	4798      	blx	r3
    3b70:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3b72:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3b74:	2b00      	cmp	r3, #0
    3b76:	d000      	beq.n	3b7a <spi_init+0x19a>
    3b78:	e73c      	b.n	39f4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    3b7a:	ab02      	add	r3, sp, #8
    3b7c:	3306      	adds	r3, #6
    3b7e:	781b      	ldrb	r3, [r3, #0]
    3b80:	733b      	strb	r3, [r7, #12]
    3b82:	e7bf      	b.n	3b04 <spi_init+0x124>
    3b84:	000038d9 	.word	0x000038d9
    3b88:	40000400 	.word	0x40000400
    3b8c:	00004aad 	.word	0x00004aad
    3b90:	00004a21 	.word	0x00004a21
    3b94:	00003715 	.word	0x00003715
    3b98:	00003cad 	.word	0x00003cad
    3b9c:	00003915 	.word	0x00003915
    3ba0:	20000594 	.word	0x20000594
    3ba4:	00003761 	.word	0x00003761
    3ba8:	00004ba5 	.word	0x00004ba5
    3bac:	41002000 	.word	0x41002000
    3bb0:	00004ac9 	.word	0x00004ac9
    3bb4:	00003657 	.word	0x00003657

00003bb8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3bb8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3bba:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3bbc:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3bbe:	2c01      	cmp	r4, #1
    3bc0:	d001      	beq.n	3bc6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3bc2:	0018      	movs	r0, r3
    3bc4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    3bc6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    3bc8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    3bca:	2c00      	cmp	r4, #0
    3bcc:	d1f9      	bne.n	3bc2 <spi_select_slave+0xa>
		if (select) {
    3bce:	2a00      	cmp	r2, #0
    3bd0:	d058      	beq.n	3c84 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3bd2:	784b      	ldrb	r3, [r1, #1]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d044      	beq.n	3c62 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bd8:	6803      	ldr	r3, [r0, #0]
    3bda:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3bdc:	07db      	lsls	r3, r3, #31
    3bde:	d410      	bmi.n	3c02 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3be0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3be2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3be4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3be6:	2900      	cmp	r1, #0
    3be8:	d104      	bne.n	3bf4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3bea:	0953      	lsrs	r3, r2, #5
    3bec:	01db      	lsls	r3, r3, #7
    3bee:	492e      	ldr	r1, [pc, #184]	; (3ca8 <spi_select_slave+0xf0>)
    3bf0:	468c      	mov	ip, r1
    3bf2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3bf4:	211f      	movs	r1, #31
    3bf6:	4011      	ands	r1, r2
    3bf8:	2201      	movs	r2, #1
    3bfa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3bfc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3bfe:	2305      	movs	r3, #5
    3c00:	e7df      	b.n	3bc2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3c02:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c04:	09d4      	lsrs	r4, r2, #7
		return NULL;
    3c06:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c08:	2c00      	cmp	r4, #0
    3c0a:	d104      	bne.n	3c16 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3c0c:	0953      	lsrs	r3, r2, #5
    3c0e:	01db      	lsls	r3, r3, #7
    3c10:	4c25      	ldr	r4, [pc, #148]	; (3ca8 <spi_select_slave+0xf0>)
    3c12:	46a4      	mov	ip, r4
    3c14:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c16:	241f      	movs	r4, #31
    3c18:	4014      	ands	r4, r2
    3c1a:	2201      	movs	r2, #1
    3c1c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    3c1e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c20:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c22:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3c24:	07d2      	lsls	r2, r2, #31
    3c26:	d501      	bpl.n	3c2c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c28:	788a      	ldrb	r2, [r1, #2]
    3c2a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    3c2c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    3c2e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    3c30:	2a00      	cmp	r2, #0
    3c32:	d1c6      	bne.n	3bc2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c34:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    3c36:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c38:	7e13      	ldrb	r3, [r2, #24]
    3c3a:	420b      	tst	r3, r1
    3c3c:	d0fc      	beq.n	3c38 <spi_select_slave+0x80>
    3c3e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    3c40:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    3c42:	0749      	lsls	r1, r1, #29
    3c44:	d5bd      	bpl.n	3bc2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c46:	8b53      	ldrh	r3, [r2, #26]
    3c48:	075b      	lsls	r3, r3, #29
    3c4a:	d501      	bpl.n	3c50 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3c4c:	2304      	movs	r3, #4
    3c4e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c50:	7983      	ldrb	r3, [r0, #6]
    3c52:	2b01      	cmp	r3, #1
    3c54:	d002      	beq.n	3c5c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c58:	2300      	movs	r3, #0
    3c5a:	e7b2      	b.n	3bc2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c5e:	2300      	movs	r3, #0
    3c60:	e7af      	b.n	3bc2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3c62:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c64:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3c66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c68:	2900      	cmp	r1, #0
    3c6a:	d104      	bne.n	3c76 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    3c6c:	0953      	lsrs	r3, r2, #5
    3c6e:	01db      	lsls	r3, r3, #7
    3c70:	490d      	ldr	r1, [pc, #52]	; (3ca8 <spi_select_slave+0xf0>)
    3c72:	468c      	mov	ip, r1
    3c74:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c76:	211f      	movs	r1, #31
    3c78:	4011      	ands	r1, r2
    3c7a:	2201      	movs	r2, #1
    3c7c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3c7e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3c80:	2300      	movs	r3, #0
    3c82:	e79e      	b.n	3bc2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    3c84:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c86:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3c88:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c8a:	2900      	cmp	r1, #0
    3c8c:	d104      	bne.n	3c98 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3c8e:	0953      	lsrs	r3, r2, #5
    3c90:	01db      	lsls	r3, r3, #7
    3c92:	4905      	ldr	r1, [pc, #20]	; (3ca8 <spi_select_slave+0xf0>)
    3c94:	468c      	mov	ip, r1
    3c96:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c98:	211f      	movs	r1, #31
    3c9a:	4011      	ands	r1, r2
    3c9c:	2201      	movs	r2, #1
    3c9e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3ca0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3ca2:	2300      	movs	r3, #0
    3ca4:	e78d      	b.n	3bc2 <spi_select_slave+0xa>
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	41004400 	.word	0x41004400

00003cac <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3cae:	0080      	lsls	r0, r0, #2
    3cb0:	4b70      	ldr	r3, [pc, #448]	; (3e74 <_spi_interrupt_handler+0x1c8>)
    3cb2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3cb4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3cb6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    3cb8:	5ce7      	ldrb	r7, [r4, r3]
    3cba:	2236      	movs	r2, #54	; 0x36
    3cbc:	5ca2      	ldrb	r2, [r4, r2]
    3cbe:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3cc0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3cc2:	7db5      	ldrb	r5, [r6, #22]
    3cc4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3cc6:	07eb      	lsls	r3, r5, #31
    3cc8:	d502      	bpl.n	3cd0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3cca:	7963      	ldrb	r3, [r4, #5]
    3ccc:	2b01      	cmp	r3, #1
    3cce:	d01e      	beq.n	3d0e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3cd0:	076b      	lsls	r3, r5, #29
    3cd2:	d511      	bpl.n	3cf8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cd4:	8b73      	ldrh	r3, [r6, #26]
    3cd6:	075b      	lsls	r3, r3, #29
    3cd8:	d55a      	bpl.n	3d90 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3cda:	7a63      	ldrb	r3, [r4, #9]
    3cdc:	2b01      	cmp	r3, #1
    3cde:	d008      	beq.n	3cf2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3ce0:	221e      	movs	r2, #30
    3ce2:	2338      	movs	r3, #56	; 0x38
    3ce4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3ce6:	3b35      	subs	r3, #53	; 0x35
    3ce8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3cea:	3302      	adds	r3, #2
    3cec:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3cee:	073b      	lsls	r3, r7, #28
    3cf0:	d44a      	bmi.n	3d88 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3cf2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cf4:	2304      	movs	r3, #4
    3cf6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3cf8:	07ab      	lsls	r3, r5, #30
    3cfa:	d503      	bpl.n	3d04 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3cfc:	7963      	ldrb	r3, [r4, #5]
    3cfe:	2b01      	cmp	r3, #1
    3d00:	d100      	bne.n	3d04 <_spi_interrupt_handler+0x58>
    3d02:	e097      	b.n	3e34 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3d04:	b26d      	sxtb	r5, r5
    3d06:	2d00      	cmp	r5, #0
    3d08:	da00      	bge.n	3d0c <_spi_interrupt_handler+0x60>
    3d0a:	e0a9      	b.n	3e60 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    3d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    3d0e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3d10:	2b00      	cmp	r3, #0
    3d12:	d022      	beq.n	3d5a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    3d14:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3d16:	2b00      	cmp	r3, #0
    3d18:	d0da      	beq.n	3cd0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d1a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3d1e:	7813      	ldrb	r3, [r2, #0]
    3d20:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3d22:	1c50      	adds	r0, r2, #1
    3d24:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d26:	79a0      	ldrb	r0, [r4, #6]
    3d28:	2801      	cmp	r0, #1
    3d2a:	d027      	beq.n	3d7c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3d2c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3d2e:	05db      	lsls	r3, r3, #23
    3d30:	0ddb      	lsrs	r3, r3, #23
    3d32:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3d34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d36:	3b01      	subs	r3, #1
    3d38:	b29b      	uxth	r3, r3
    3d3a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    3d3c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3d3e:	b29b      	uxth	r3, r3
    3d40:	2b00      	cmp	r3, #0
    3d42:	d1c5      	bne.n	3cd0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d44:	3301      	adds	r3, #1
    3d46:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    3d48:	7a63      	ldrb	r3, [r4, #9]
    3d4a:	2b01      	cmp	r3, #1
    3d4c:	d1c0      	bne.n	3cd0 <_spi_interrupt_handler+0x24>
    3d4e:	79e3      	ldrb	r3, [r4, #7]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d1bd      	bne.n	3cd0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3d54:	3302      	adds	r3, #2
    3d56:	75b3      	strb	r3, [r6, #22]
    3d58:	e7ba      	b.n	3cd0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    3d5a:	4b47      	ldr	r3, [pc, #284]	; (3e78 <_spi_interrupt_handler+0x1cc>)
    3d5c:	881b      	ldrh	r3, [r3, #0]
    3d5e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3d60:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d62:	3b01      	subs	r3, #1
    3d64:	b29b      	uxth	r3, r3
    3d66:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3d68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3d6a:	b29b      	uxth	r3, r3
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d101      	bne.n	3d74 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3d70:	3301      	adds	r3, #1
    3d72:	7533      	strb	r3, [r6, #20]
		if (0
    3d74:	7963      	ldrb	r3, [r4, #5]
    3d76:	2b01      	cmp	r3, #1
    3d78:	d0cc      	beq.n	3d14 <_spi_interrupt_handler+0x68>
    3d7a:	e7a9      	b.n	3cd0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3d7c:	7850      	ldrb	r0, [r2, #1]
    3d7e:	0200      	lsls	r0, r0, #8
    3d80:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    3d82:	3202      	adds	r2, #2
    3d84:	62e2      	str	r2, [r4, #44]	; 0x2c
    3d86:	e7d2      	b.n	3d2e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3d88:	0020      	movs	r0, r4
    3d8a:	69a3      	ldr	r3, [r4, #24]
    3d8c:	4798      	blx	r3
    3d8e:	e7b0      	b.n	3cf2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3d90:	7a63      	ldrb	r3, [r4, #9]
    3d92:	2b01      	cmp	r3, #1
    3d94:	d028      	beq.n	3de8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3d96:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d9a:	05db      	lsls	r3, r3, #23
    3d9c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3d9e:	b2da      	uxtb	r2, r3
    3da0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3da2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    3da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3da6:	1c51      	adds	r1, r2, #1
    3da8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3daa:	79a1      	ldrb	r1, [r4, #6]
    3dac:	2901      	cmp	r1, #1
    3dae:	d034      	beq.n	3e1a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    3db0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3db2:	3b01      	subs	r3, #1
    3db4:	b29b      	uxth	r3, r3
    3db6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3db8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3dba:	b29b      	uxth	r3, r3
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d000      	beq.n	3dc2 <_spi_interrupt_handler+0x116>
    3dc0:	e79a      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    3dc2:	2200      	movs	r2, #0
    3dc4:	3338      	adds	r3, #56	; 0x38
    3dc6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3dc8:	3b34      	subs	r3, #52	; 0x34
    3dca:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3dcc:	7a63      	ldrb	r3, [r4, #9]
    3dce:	2b02      	cmp	r3, #2
    3dd0:	d029      	beq.n	3e26 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    3dd2:	7a63      	ldrb	r3, [r4, #9]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d000      	beq.n	3dda <_spi_interrupt_handler+0x12e>
    3dd8:	e78e      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3dda:	07bb      	lsls	r3, r7, #30
    3ddc:	d400      	bmi.n	3de0 <_spi_interrupt_handler+0x134>
    3dde:	e78b      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3de0:	0020      	movs	r0, r4
    3de2:	6923      	ldr	r3, [r4, #16]
    3de4:	4798      	blx	r3
    3de6:	e787      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3de8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    3dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3dec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3dee:	3b01      	subs	r3, #1
    3df0:	b29b      	uxth	r3, r3
    3df2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3df4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3df6:	b29b      	uxth	r3, r3
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d000      	beq.n	3dfe <_spi_interrupt_handler+0x152>
    3dfc:	e77c      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3dfe:	3304      	adds	r3, #4
    3e00:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3e02:	2200      	movs	r2, #0
    3e04:	3334      	adds	r3, #52	; 0x34
    3e06:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3e08:	3b35      	subs	r3, #53	; 0x35
    3e0a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    3e0c:	07fb      	lsls	r3, r7, #31
    3e0e:	d400      	bmi.n	3e12 <_spi_interrupt_handler+0x166>
    3e10:	e772      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3e12:	0020      	movs	r0, r4
    3e14:	68e3      	ldr	r3, [r4, #12]
    3e16:	4798      	blx	r3
    3e18:	e76e      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3e1a:	0a1b      	lsrs	r3, r3, #8
    3e1c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    3e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e20:	3301      	adds	r3, #1
    3e22:	62a3      	str	r3, [r4, #40]	; 0x28
    3e24:	e7c4      	b.n	3db0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3e26:	077b      	lsls	r3, r7, #29
    3e28:	d400      	bmi.n	3e2c <_spi_interrupt_handler+0x180>
    3e2a:	e765      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3e2c:	0020      	movs	r0, r4
    3e2e:	6963      	ldr	r3, [r4, #20]
    3e30:	4798      	blx	r3
    3e32:	e761      	b.n	3cf8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e34:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3e36:	2b01      	cmp	r3, #1
    3e38:	d000      	beq.n	3e3c <_spi_interrupt_handler+0x190>
    3e3a:	e763      	b.n	3d04 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e3c:	79e3      	ldrb	r3, [r4, #7]
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d000      	beq.n	3e44 <_spi_interrupt_handler+0x198>
    3e42:	e75f      	b.n	3d04 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e44:	3302      	adds	r3, #2
    3e46:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3e48:	3301      	adds	r3, #1
    3e4a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3e4c:	2200      	movs	r2, #0
    3e4e:	3335      	adds	r3, #53	; 0x35
    3e50:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3e52:	07fb      	lsls	r3, r7, #31
    3e54:	d400      	bmi.n	3e58 <_spi_interrupt_handler+0x1ac>
    3e56:	e755      	b.n	3d04 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3e58:	0020      	movs	r0, r4
    3e5a:	68e3      	ldr	r3, [r4, #12]
    3e5c:	4798      	blx	r3
    3e5e:	e751      	b.n	3d04 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3e60:	2380      	movs	r3, #128	; 0x80
    3e62:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3e64:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3e66:	067b      	lsls	r3, r7, #25
    3e68:	d400      	bmi.n	3e6c <_spi_interrupt_handler+0x1c0>
    3e6a:	e74f      	b.n	3d0c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e6e:	0020      	movs	r0, r4
    3e70:	4798      	blx	r3
}
    3e72:	e74b      	b.n	3d0c <_spi_interrupt_handler+0x60>
    3e74:	20000594 	.word	0x20000594
    3e78:	200005ac 	.word	0x200005ac

00003e7c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7e:	46de      	mov	lr, fp
    3e80:	4657      	mov	r7, sl
    3e82:	464e      	mov	r6, r9
    3e84:	4645      	mov	r5, r8
    3e86:	b5e0      	push	{r5, r6, r7, lr}
    3e88:	b091      	sub	sp, #68	; 0x44
    3e8a:	0005      	movs	r5, r0
    3e8c:	000c      	movs	r4, r1
    3e8e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3e90:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3e92:	0008      	movs	r0, r1
    3e94:	4bbc      	ldr	r3, [pc, #752]	; (4188 <usart_init+0x30c>)
    3e96:	4798      	blx	r3
    3e98:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e9a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3e9c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e9e:	07db      	lsls	r3, r3, #31
    3ea0:	d506      	bpl.n	3eb0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3ea2:	b011      	add	sp, #68	; 0x44
    3ea4:	bc3c      	pop	{r2, r3, r4, r5}
    3ea6:	4690      	mov	r8, r2
    3ea8:	4699      	mov	r9, r3
    3eaa:	46a2      	mov	sl, r4
    3eac:	46ab      	mov	fp, r5
    3eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3eb0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3eb2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3eb4:	079b      	lsls	r3, r3, #30
    3eb6:	d4f4      	bmi.n	3ea2 <usart_init+0x26>
    3eb8:	49b4      	ldr	r1, [pc, #720]	; (418c <usart_init+0x310>)
    3eba:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3ebc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3ebe:	2301      	movs	r3, #1
    3ec0:	40bb      	lsls	r3, r7
    3ec2:	4303      	orrs	r3, r0
    3ec4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3ec6:	a90f      	add	r1, sp, #60	; 0x3c
    3ec8:	272d      	movs	r7, #45	; 0x2d
    3eca:	5df3      	ldrb	r3, [r6, r7]
    3ecc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ece:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3ed0:	b2d3      	uxtb	r3, r2
    3ed2:	9302      	str	r3, [sp, #8]
    3ed4:	0018      	movs	r0, r3
    3ed6:	4bae      	ldr	r3, [pc, #696]	; (4190 <usart_init+0x314>)
    3ed8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3eda:	9802      	ldr	r0, [sp, #8]
    3edc:	4bad      	ldr	r3, [pc, #692]	; (4194 <usart_init+0x318>)
    3ede:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3ee0:	5df0      	ldrb	r0, [r6, r7]
    3ee2:	2100      	movs	r1, #0
    3ee4:	4bac      	ldr	r3, [pc, #688]	; (4198 <usart_init+0x31c>)
    3ee6:	4798      	blx	r3
	module->character_size = config->character_size;
    3ee8:	7af3      	ldrb	r3, [r6, #11]
    3eea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3eec:	2324      	movs	r3, #36	; 0x24
    3eee:	5cf3      	ldrb	r3, [r6, r3]
    3ef0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3ef2:	2325      	movs	r3, #37	; 0x25
    3ef4:	5cf3      	ldrb	r3, [r6, r3]
    3ef6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3ef8:	7ef3      	ldrb	r3, [r6, #27]
    3efa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3efc:	7f33      	ldrb	r3, [r6, #28]
    3efe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f00:	682b      	ldr	r3, [r5, #0]
    3f02:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f04:	0018      	movs	r0, r3
    3f06:	4ba0      	ldr	r3, [pc, #640]	; (4188 <usart_init+0x30c>)
    3f08:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f0a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    3f0c:	2200      	movs	r2, #0
    3f0e:	230e      	movs	r3, #14
    3f10:	a906      	add	r1, sp, #24
    3f12:	468c      	mov	ip, r1
    3f14:	4463      	add	r3, ip
    3f16:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3f18:	8a32      	ldrh	r2, [r6, #16]
    3f1a:	9202      	str	r2, [sp, #8]
    3f1c:	2380      	movs	r3, #128	; 0x80
    3f1e:	01db      	lsls	r3, r3, #7
    3f20:	429a      	cmp	r2, r3
    3f22:	d100      	bne.n	3f26 <usart_init+0xaa>
    3f24:	e09e      	b.n	4064 <usart_init+0x1e8>
    3f26:	d90f      	bls.n	3f48 <usart_init+0xcc>
    3f28:	23c0      	movs	r3, #192	; 0xc0
    3f2a:	01db      	lsls	r3, r3, #7
    3f2c:	9a02      	ldr	r2, [sp, #8]
    3f2e:	429a      	cmp	r2, r3
    3f30:	d100      	bne.n	3f34 <usart_init+0xb8>
    3f32:	e092      	b.n	405a <usart_init+0x1de>
    3f34:	2380      	movs	r3, #128	; 0x80
    3f36:	021b      	lsls	r3, r3, #8
    3f38:	429a      	cmp	r2, r3
    3f3a:	d000      	beq.n	3f3e <usart_init+0xc2>
    3f3c:	e11f      	b.n	417e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3f3e:	2303      	movs	r3, #3
    3f40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f42:	2300      	movs	r3, #0
    3f44:	9307      	str	r3, [sp, #28]
    3f46:	e008      	b.n	3f5a <usart_init+0xde>
	switch (config->sample_rate) {
    3f48:	2380      	movs	r3, #128	; 0x80
    3f4a:	019b      	lsls	r3, r3, #6
    3f4c:	429a      	cmp	r2, r3
    3f4e:	d000      	beq.n	3f52 <usart_init+0xd6>
    3f50:	e115      	b.n	417e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f52:	2310      	movs	r3, #16
    3f54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f56:	3b0f      	subs	r3, #15
    3f58:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3f5a:	6833      	ldr	r3, [r6, #0]
    3f5c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3f5e:	68f3      	ldr	r3, [r6, #12]
    3f60:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    3f62:	6973      	ldr	r3, [r6, #20]
    3f64:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3f66:	7e33      	ldrb	r3, [r6, #24]
    3f68:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3f6a:	2326      	movs	r3, #38	; 0x26
    3f6c:	5cf3      	ldrb	r3, [r6, r3]
    3f6e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3f70:	6873      	ldr	r3, [r6, #4]
    3f72:	4699      	mov	r9, r3
	switch (transfer_mode)
    3f74:	2b00      	cmp	r3, #0
    3f76:	d100      	bne.n	3f7a <usart_init+0xfe>
    3f78:	e0a0      	b.n	40bc <usart_init+0x240>
    3f7a:	2380      	movs	r3, #128	; 0x80
    3f7c:	055b      	lsls	r3, r3, #21
    3f7e:	4599      	cmp	r9, r3
    3f80:	d100      	bne.n	3f84 <usart_init+0x108>
    3f82:	e084      	b.n	408e <usart_init+0x212>
	if(config->encoding_format_enable) {
    3f84:	7e73      	ldrb	r3, [r6, #25]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d002      	beq.n	3f90 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3f8a:	7eb3      	ldrb	r3, [r6, #26]
    3f8c:	4642      	mov	r2, r8
    3f8e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3f90:	682a      	ldr	r2, [r5, #0]
    3f92:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3f94:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3f96:	2b00      	cmp	r3, #0
    3f98:	d1fc      	bne.n	3f94 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    3f9a:	330e      	adds	r3, #14
    3f9c:	aa06      	add	r2, sp, #24
    3f9e:	4694      	mov	ip, r2
    3fa0:	4463      	add	r3, ip
    3fa2:	881b      	ldrh	r3, [r3, #0]
    3fa4:	4642      	mov	r2, r8
    3fa6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3fa8:	9b05      	ldr	r3, [sp, #20]
    3faa:	9a03      	ldr	r2, [sp, #12]
    3fac:	4313      	orrs	r3, r2
    3fae:	9a04      	ldr	r2, [sp, #16]
    3fb0:	4313      	orrs	r3, r2
    3fb2:	464a      	mov	r2, r9
    3fb4:	4313      	orrs	r3, r2
    3fb6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3fb8:	465b      	mov	r3, fp
    3fba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3fbc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3fbe:	4653      	mov	r3, sl
    3fc0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3fc2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3fc4:	2327      	movs	r3, #39	; 0x27
    3fc6:	5cf3      	ldrb	r3, [r6, r3]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d101      	bne.n	3fd0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3fcc:	3304      	adds	r3, #4
    3fce:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3fd0:	7e73      	ldrb	r3, [r6, #25]
    3fd2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3fd4:	7f32      	ldrb	r2, [r6, #28]
    3fd6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3fd8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3fda:	7f72      	ldrb	r2, [r6, #29]
    3fdc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3fde:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3fe0:	2224      	movs	r2, #36	; 0x24
    3fe2:	5cb2      	ldrb	r2, [r6, r2]
    3fe4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3fe6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3fe8:	2225      	movs	r2, #37	; 0x25
    3fea:	5cb2      	ldrb	r2, [r6, r2]
    3fec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3fee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    3ff0:	7ab1      	ldrb	r1, [r6, #10]
    3ff2:	7af2      	ldrb	r2, [r6, #11]
    3ff4:	4311      	orrs	r1, r2
    3ff6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    3ff8:	8933      	ldrh	r3, [r6, #8]
    3ffa:	2bff      	cmp	r3, #255	; 0xff
    3ffc:	d100      	bne.n	4000 <usart_init+0x184>
    3ffe:	e081      	b.n	4104 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4000:	2280      	movs	r2, #128	; 0x80
    4002:	0452      	lsls	r2, r2, #17
    4004:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4006:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4008:	232c      	movs	r3, #44	; 0x2c
    400a:	5cf3      	ldrb	r3, [r6, r3]
    400c:	2b00      	cmp	r3, #0
    400e:	d103      	bne.n	4018 <usart_init+0x19c>
    4010:	4b62      	ldr	r3, [pc, #392]	; (419c <usart_init+0x320>)
    4012:	789b      	ldrb	r3, [r3, #2]
    4014:	079b      	lsls	r3, r3, #30
    4016:	d501      	bpl.n	401c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4018:	2380      	movs	r3, #128	; 0x80
    401a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    401c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    401e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4020:	2b00      	cmp	r3, #0
    4022:	d1fc      	bne.n	401e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4024:	4643      	mov	r3, r8
    4026:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4028:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    402a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    402c:	2b00      	cmp	r3, #0
    402e:	d1fc      	bne.n	402a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4030:	4643      	mov	r3, r8
    4032:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4034:	ab0e      	add	r3, sp, #56	; 0x38
    4036:	2280      	movs	r2, #128	; 0x80
    4038:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    403a:	2200      	movs	r2, #0
    403c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    403e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4040:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4042:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4044:	930a      	str	r3, [sp, #40]	; 0x28
    4046:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4048:	930b      	str	r3, [sp, #44]	; 0x2c
    404a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    404c:	930c      	str	r3, [sp, #48]	; 0x30
    404e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4050:	9302      	str	r3, [sp, #8]
    4052:	930d      	str	r3, [sp, #52]	; 0x34
    4054:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4056:	ae0a      	add	r6, sp, #40	; 0x28
    4058:	e063      	b.n	4122 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    405a:	2308      	movs	r3, #8
    405c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    405e:	3b07      	subs	r3, #7
    4060:	9307      	str	r3, [sp, #28]
    4062:	e77a      	b.n	3f5a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4064:	6833      	ldr	r3, [r6, #0]
    4066:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4068:	68f3      	ldr	r3, [r6, #12]
    406a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    406c:	6973      	ldr	r3, [r6, #20]
    406e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4070:	7e33      	ldrb	r3, [r6, #24]
    4072:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4074:	2326      	movs	r3, #38	; 0x26
    4076:	5cf3      	ldrb	r3, [r6, r3]
    4078:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    407a:	6873      	ldr	r3, [r6, #4]
    407c:	4699      	mov	r9, r3
	switch (transfer_mode)
    407e:	2b00      	cmp	r3, #0
    4080:	d018      	beq.n	40b4 <usart_init+0x238>
    4082:	2380      	movs	r3, #128	; 0x80
    4084:	055b      	lsls	r3, r3, #21
    4086:	4599      	cmp	r9, r3
    4088:	d001      	beq.n	408e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    408a:	2000      	movs	r0, #0
    408c:	e025      	b.n	40da <usart_init+0x25e>
			if (!config->use_external_clock) {
    408e:	2327      	movs	r3, #39	; 0x27
    4090:	5cf3      	ldrb	r3, [r6, r3]
    4092:	2b00      	cmp	r3, #0
    4094:	d000      	beq.n	4098 <usart_init+0x21c>
    4096:	e775      	b.n	3f84 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4098:	6a33      	ldr	r3, [r6, #32]
    409a:	001f      	movs	r7, r3
    409c:	b2c0      	uxtb	r0, r0
    409e:	4b40      	ldr	r3, [pc, #256]	; (41a0 <usart_init+0x324>)
    40a0:	4798      	blx	r3
    40a2:	0001      	movs	r1, r0
    40a4:	220e      	movs	r2, #14
    40a6:	ab06      	add	r3, sp, #24
    40a8:	469c      	mov	ip, r3
    40aa:	4462      	add	r2, ip
    40ac:	0038      	movs	r0, r7
    40ae:	4b3d      	ldr	r3, [pc, #244]	; (41a4 <usart_init+0x328>)
    40b0:	4798      	blx	r3
    40b2:	e012      	b.n	40da <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40b4:	2308      	movs	r3, #8
    40b6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40b8:	2300      	movs	r3, #0
    40ba:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    40bc:	2327      	movs	r3, #39	; 0x27
    40be:	5cf3      	ldrb	r3, [r6, r3]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d00e      	beq.n	40e2 <usart_init+0x266>
				status_code =
    40c4:	9b06      	ldr	r3, [sp, #24]
    40c6:	9300      	str	r3, [sp, #0]
    40c8:	9b07      	ldr	r3, [sp, #28]
    40ca:	220e      	movs	r2, #14
    40cc:	a906      	add	r1, sp, #24
    40ce:	468c      	mov	ip, r1
    40d0:	4462      	add	r2, ip
    40d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    40d4:	6a30      	ldr	r0, [r6, #32]
    40d6:	4f34      	ldr	r7, [pc, #208]	; (41a8 <usart_init+0x32c>)
    40d8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    40da:	2800      	cmp	r0, #0
    40dc:	d000      	beq.n	40e0 <usart_init+0x264>
    40de:	e6e0      	b.n	3ea2 <usart_init+0x26>
    40e0:	e750      	b.n	3f84 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    40e2:	6a33      	ldr	r3, [r6, #32]
    40e4:	001f      	movs	r7, r3
    40e6:	b2c0      	uxtb	r0, r0
    40e8:	4b2d      	ldr	r3, [pc, #180]	; (41a0 <usart_init+0x324>)
    40ea:	4798      	blx	r3
    40ec:	0001      	movs	r1, r0
				status_code =
    40ee:	9b06      	ldr	r3, [sp, #24]
    40f0:	9300      	str	r3, [sp, #0]
    40f2:	9b07      	ldr	r3, [sp, #28]
    40f4:	220e      	movs	r2, #14
    40f6:	a806      	add	r0, sp, #24
    40f8:	4684      	mov	ip, r0
    40fa:	4462      	add	r2, ip
    40fc:	0038      	movs	r0, r7
    40fe:	4f2a      	ldr	r7, [pc, #168]	; (41a8 <usart_init+0x32c>)
    4100:	47b8      	blx	r7
    4102:	e7ea      	b.n	40da <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4104:	7ef3      	ldrb	r3, [r6, #27]
    4106:	2b00      	cmp	r3, #0
    4108:	d100      	bne.n	410c <usart_init+0x290>
    410a:	e77d      	b.n	4008 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    410c:	2380      	movs	r3, #128	; 0x80
    410e:	04db      	lsls	r3, r3, #19
    4110:	431f      	orrs	r7, r3
    4112:	e779      	b.n	4008 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4114:	0020      	movs	r0, r4
    4116:	4b25      	ldr	r3, [pc, #148]	; (41ac <usart_init+0x330>)
    4118:	4798      	blx	r3
    411a:	e007      	b.n	412c <usart_init+0x2b0>
    411c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    411e:	2f04      	cmp	r7, #4
    4120:	d00d      	beq.n	413e <usart_init+0x2c2>
    4122:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4124:	00bb      	lsls	r3, r7, #2
    4126:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4128:	2800      	cmp	r0, #0
    412a:	d0f3      	beq.n	4114 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    412c:	1c43      	adds	r3, r0, #1
    412e:	d0f5      	beq.n	411c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4130:	a90e      	add	r1, sp, #56	; 0x38
    4132:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4134:	0c00      	lsrs	r0, r0, #16
    4136:	b2c0      	uxtb	r0, r0
    4138:	4b1d      	ldr	r3, [pc, #116]	; (41b0 <usart_init+0x334>)
    413a:	4798      	blx	r3
    413c:	e7ee      	b.n	411c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    413e:	2300      	movs	r3, #0
    4140:	60eb      	str	r3, [r5, #12]
    4142:	612b      	str	r3, [r5, #16]
    4144:	616b      	str	r3, [r5, #20]
    4146:	61ab      	str	r3, [r5, #24]
    4148:	61eb      	str	r3, [r5, #28]
    414a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    414c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    414e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4150:	2200      	movs	r2, #0
    4152:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4154:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4156:	3330      	adds	r3, #48	; 0x30
    4158:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    415a:	3301      	adds	r3, #1
    415c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    415e:	3301      	adds	r3, #1
    4160:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4162:	3301      	adds	r3, #1
    4164:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4166:	6828      	ldr	r0, [r5, #0]
    4168:	4b07      	ldr	r3, [pc, #28]	; (4188 <usart_init+0x30c>)
    416a:	4798      	blx	r3
    416c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    416e:	4911      	ldr	r1, [pc, #68]	; (41b4 <usart_init+0x338>)
    4170:	4b11      	ldr	r3, [pc, #68]	; (41b8 <usart_init+0x33c>)
    4172:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4174:	00a4      	lsls	r4, r4, #2
    4176:	4b11      	ldr	r3, [pc, #68]	; (41bc <usart_init+0x340>)
    4178:	50e5      	str	r5, [r4, r3]
	return status_code;
    417a:	2000      	movs	r0, #0
    417c:	e691      	b.n	3ea2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    417e:	2310      	movs	r3, #16
    4180:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4182:	2300      	movs	r3, #0
    4184:	9307      	str	r3, [sp, #28]
    4186:	e6e8      	b.n	3f5a <usart_init+0xde>
    4188:	000038d9 	.word	0x000038d9
    418c:	40000400 	.word	0x40000400
    4190:	00004aad 	.word	0x00004aad
    4194:	00004a21 	.word	0x00004a21
    4198:	00003715 	.word	0x00003715
    419c:	41002000 	.word	0x41002000
    41a0:	00004ac9 	.word	0x00004ac9
    41a4:	00003657 	.word	0x00003657
    41a8:	00003681 	.word	0x00003681
    41ac:	00003761 	.word	0x00003761
    41b0:	00004ba5 	.word	0x00004ba5
    41b4:	000042d5 	.word	0x000042d5
    41b8:	00003915 	.word	0x00003915
    41bc:	20000594 	.word	0x20000594

000041c0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    41c0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    41c2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    41c4:	2a00      	cmp	r2, #0
    41c6:	d101      	bne.n	41cc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    41c8:	0018      	movs	r0, r3
    41ca:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    41cc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    41ce:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    41d0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    41d2:	2a00      	cmp	r2, #0
    41d4:	d1f8      	bne.n	41c8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    41d6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    41d8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    41da:	2a00      	cmp	r2, #0
    41dc:	d1fc      	bne.n	41d8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    41de:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    41e0:	2102      	movs	r1, #2
    41e2:	7e1a      	ldrb	r2, [r3, #24]
    41e4:	420a      	tst	r2, r1
    41e6:	d0fc      	beq.n	41e2 <usart_write_wait+0x22>
	return STATUS_OK;
    41e8:	2300      	movs	r3, #0
    41ea:	e7ed      	b.n	41c8 <usart_write_wait+0x8>

000041ec <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    41ec:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    41ee:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    41f0:	2a00      	cmp	r2, #0
    41f2:	d101      	bne.n	41f8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    41f4:	0018      	movs	r0, r3
    41f6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    41f8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    41fa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    41fc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    41fe:	2a00      	cmp	r2, #0
    4200:	d1f8      	bne.n	41f4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4202:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4204:	7e10      	ldrb	r0, [r2, #24]
    4206:	0740      	lsls	r0, r0, #29
    4208:	d5f4      	bpl.n	41f4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    420a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    420c:	2b00      	cmp	r3, #0
    420e:	d1fc      	bne.n	420a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4210:	8b53      	ldrh	r3, [r2, #26]
    4212:	b2db      	uxtb	r3, r3
	if (error_code) {
    4214:	0698      	lsls	r0, r3, #26
    4216:	d01d      	beq.n	4254 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4218:	0798      	lsls	r0, r3, #30
    421a:	d503      	bpl.n	4224 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    421c:	2302      	movs	r3, #2
    421e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4220:	3318      	adds	r3, #24
    4222:	e7e7      	b.n	41f4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4224:	0758      	lsls	r0, r3, #29
    4226:	d503      	bpl.n	4230 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4228:	2304      	movs	r3, #4
    422a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    422c:	331a      	adds	r3, #26
    422e:	e7e1      	b.n	41f4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4230:	07d8      	lsls	r0, r3, #31
    4232:	d503      	bpl.n	423c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4234:	2301      	movs	r3, #1
    4236:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4238:	3312      	adds	r3, #18
    423a:	e7db      	b.n	41f4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    423c:	06d8      	lsls	r0, r3, #27
    423e:	d503      	bpl.n	4248 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4240:	2310      	movs	r3, #16
    4242:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4244:	3332      	adds	r3, #50	; 0x32
    4246:	e7d5      	b.n	41f4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4248:	069b      	lsls	r3, r3, #26
    424a:	d503      	bpl.n	4254 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    424c:	2320      	movs	r3, #32
    424e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4250:	3321      	adds	r3, #33	; 0x21
    4252:	e7cf      	b.n	41f4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4254:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4256:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4258:	2300      	movs	r3, #0
    425a:	e7cb      	b.n	41f4 <usart_read_wait+0x8>

0000425c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    425e:	0004      	movs	r4, r0
    4260:	000d      	movs	r5, r1
    4262:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4264:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    4266:	4b0f      	ldr	r3, [pc, #60]	; (42a4 <_usart_read_buffer+0x48>)
    4268:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    426a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    426c:	b29b      	uxth	r3, r3
    426e:	2b00      	cmp	r3, #0
    4270:	d003      	beq.n	427a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    4272:	4b0d      	ldr	r3, [pc, #52]	; (42a8 <_usart_read_buffer+0x4c>)
    4274:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    4276:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    4278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    427a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    427c:	4b0a      	ldr	r3, [pc, #40]	; (42a8 <_usart_read_buffer+0x4c>)
    427e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    4280:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    4282:	2205      	movs	r2, #5
    4284:	2332      	movs	r3, #50	; 0x32
    4286:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4288:	3b2e      	subs	r3, #46	; 0x2e
    428a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    428c:	7a23      	ldrb	r3, [r4, #8]
    428e:	2b00      	cmp	r3, #0
    4290:	d001      	beq.n	4296 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    4292:	2320      	movs	r3, #32
    4294:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    4296:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    4298:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    429a:	2b00      	cmp	r3, #0
    429c:	d0ec      	beq.n	4278 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    429e:	2308      	movs	r3, #8
    42a0:	75bb      	strb	r3, [r7, #22]
    42a2:	e7e9      	b.n	4278 <_usart_read_buffer+0x1c>
    42a4:	00003301 	.word	0x00003301
    42a8:	00003341 	.word	0x00003341

000042ac <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    42ac:	1c93      	adds	r3, r2, #2
    42ae:	009b      	lsls	r3, r3, #2
    42b0:	18c3      	adds	r3, r0, r3
    42b2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    42b4:	2130      	movs	r1, #48	; 0x30
    42b6:	2301      	movs	r3, #1
    42b8:	4093      	lsls	r3, r2
    42ba:	001a      	movs	r2, r3
    42bc:	5c43      	ldrb	r3, [r0, r1]
    42be:	4313      	orrs	r3, r2
    42c0:	5443      	strb	r3, [r0, r1]
}
    42c2:	4770      	bx	lr

000042c4 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    42c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    42c6:	2201      	movs	r2, #1
    42c8:	4b01      	ldr	r3, [pc, #4]	; (42d0 <usart_read_job+0xc>)
    42ca:	4798      	blx	r3
}
    42cc:	bd10      	pop	{r4, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	0000425d 	.word	0x0000425d

000042d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    42d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    42d6:	0080      	lsls	r0, r0, #2
    42d8:	4b62      	ldr	r3, [pc, #392]	; (4464 <_usart_interrupt_handler+0x190>)
    42da:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    42dc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    42de:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    42e0:	2b00      	cmp	r3, #0
    42e2:	d1fc      	bne.n	42de <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    42e4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    42e6:	7da6      	ldrb	r6, [r4, #22]
    42e8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    42ea:	2330      	movs	r3, #48	; 0x30
    42ec:	5ceb      	ldrb	r3, [r5, r3]
    42ee:	2231      	movs	r2, #49	; 0x31
    42f0:	5caf      	ldrb	r7, [r5, r2]
    42f2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    42f4:	07f3      	lsls	r3, r6, #31
    42f6:	d522      	bpl.n	433e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    42f8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    42fa:	b29b      	uxth	r3, r3
    42fc:	2b00      	cmp	r3, #0
    42fe:	d01c      	beq.n	433a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4300:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4302:	7813      	ldrb	r3, [r2, #0]
    4304:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4306:	1c51      	adds	r1, r2, #1
    4308:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    430a:	7969      	ldrb	r1, [r5, #5]
    430c:	2901      	cmp	r1, #1
    430e:	d00e      	beq.n	432e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4310:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4312:	05db      	lsls	r3, r3, #23
    4314:	0ddb      	lsrs	r3, r3, #23
    4316:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4318:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    431a:	3b01      	subs	r3, #1
    431c:	b29b      	uxth	r3, r3
    431e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4320:	2b00      	cmp	r3, #0
    4322:	d10c      	bne.n	433e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4324:	3301      	adds	r3, #1
    4326:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4328:	3301      	adds	r3, #1
    432a:	75a3      	strb	r3, [r4, #22]
    432c:	e007      	b.n	433e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    432e:	7851      	ldrb	r1, [r2, #1]
    4330:	0209      	lsls	r1, r1, #8
    4332:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4334:	3202      	adds	r2, #2
    4336:	62aa      	str	r2, [r5, #40]	; 0x28
    4338:	e7eb      	b.n	4312 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    433a:	2301      	movs	r3, #1
    433c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    433e:	07b3      	lsls	r3, r6, #30
    4340:	d506      	bpl.n	4350 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4342:	2302      	movs	r3, #2
    4344:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4346:	2200      	movs	r2, #0
    4348:	3331      	adds	r3, #49	; 0x31
    434a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    434c:	07fb      	lsls	r3, r7, #31
    434e:	d41a      	bmi.n	4386 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4350:	0773      	lsls	r3, r6, #29
    4352:	d565      	bpl.n	4420 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4354:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4356:	b29b      	uxth	r3, r3
    4358:	2b00      	cmp	r3, #0
    435a:	d05f      	beq.n	441c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    435c:	8b63      	ldrh	r3, [r4, #26]
    435e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4360:	071a      	lsls	r2, r3, #28
    4362:	d414      	bmi.n	438e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4364:	223f      	movs	r2, #63	; 0x3f
    4366:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4368:	2b00      	cmp	r3, #0
    436a:	d034      	beq.n	43d6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    436c:	079a      	lsls	r2, r3, #30
    436e:	d511      	bpl.n	4394 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4370:	221a      	movs	r2, #26
    4372:	2332      	movs	r3, #50	; 0x32
    4374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4376:	3b30      	subs	r3, #48	; 0x30
    4378:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    437a:	077b      	lsls	r3, r7, #29
    437c:	d550      	bpl.n	4420 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    437e:	0028      	movs	r0, r5
    4380:	696b      	ldr	r3, [r5, #20]
    4382:	4798      	blx	r3
    4384:	e04c      	b.n	4420 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4386:	0028      	movs	r0, r5
    4388:	68eb      	ldr	r3, [r5, #12]
    438a:	4798      	blx	r3
    438c:	e7e0      	b.n	4350 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    438e:	2237      	movs	r2, #55	; 0x37
    4390:	4013      	ands	r3, r2
    4392:	e7e9      	b.n	4368 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4394:	075a      	lsls	r2, r3, #29
    4396:	d505      	bpl.n	43a4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4398:	221e      	movs	r2, #30
    439a:	2332      	movs	r3, #50	; 0x32
    439c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    439e:	3b2e      	subs	r3, #46	; 0x2e
    43a0:	8363      	strh	r3, [r4, #26]
    43a2:	e7ea      	b.n	437a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    43a4:	07da      	lsls	r2, r3, #31
    43a6:	d505      	bpl.n	43b4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    43a8:	2213      	movs	r2, #19
    43aa:	2332      	movs	r3, #50	; 0x32
    43ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    43ae:	3b31      	subs	r3, #49	; 0x31
    43b0:	8363      	strh	r3, [r4, #26]
    43b2:	e7e2      	b.n	437a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    43b4:	06da      	lsls	r2, r3, #27
    43b6:	d505      	bpl.n	43c4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    43b8:	2242      	movs	r2, #66	; 0x42
    43ba:	2332      	movs	r3, #50	; 0x32
    43bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    43be:	3b22      	subs	r3, #34	; 0x22
    43c0:	8363      	strh	r3, [r4, #26]
    43c2:	e7da      	b.n	437a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    43c4:	2220      	movs	r2, #32
    43c6:	421a      	tst	r2, r3
    43c8:	d0d7      	beq.n	437a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    43ca:	3221      	adds	r2, #33	; 0x21
    43cc:	2332      	movs	r3, #50	; 0x32
    43ce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    43d0:	3b12      	subs	r3, #18
    43d2:	8363      	strh	r3, [r4, #26]
    43d4:	e7d1      	b.n	437a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    43d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    43d8:	05db      	lsls	r3, r3, #23
    43da:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    43dc:	b2da      	uxtb	r2, r3
    43de:	6a69      	ldr	r1, [r5, #36]	; 0x24
    43e0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    43e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    43e4:	1c51      	adds	r1, r2, #1
    43e6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43e8:	7969      	ldrb	r1, [r5, #5]
    43ea:	2901      	cmp	r1, #1
    43ec:	d010      	beq.n	4410 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    43ee:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    43f0:	3b01      	subs	r3, #1
    43f2:	b29b      	uxth	r3, r3
    43f4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    43f6:	2b00      	cmp	r3, #0
    43f8:	d112      	bne.n	4420 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    43fa:	3304      	adds	r3, #4
    43fc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    43fe:	2200      	movs	r2, #0
    4400:	332e      	adds	r3, #46	; 0x2e
    4402:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4404:	07bb      	lsls	r3, r7, #30
    4406:	d50b      	bpl.n	4420 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4408:	0028      	movs	r0, r5
    440a:	692b      	ldr	r3, [r5, #16]
    440c:	4798      	blx	r3
    440e:	e007      	b.n	4420 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4410:	0a1b      	lsrs	r3, r3, #8
    4412:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4414:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4416:	3301      	adds	r3, #1
    4418:	626b      	str	r3, [r5, #36]	; 0x24
    441a:	e7e8      	b.n	43ee <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    441c:	2304      	movs	r3, #4
    441e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4420:	06f3      	lsls	r3, r6, #27
    4422:	d504      	bpl.n	442e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4424:	2310      	movs	r3, #16
    4426:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4428:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    442a:	06fb      	lsls	r3, r7, #27
    442c:	d40e      	bmi.n	444c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    442e:	06b3      	lsls	r3, r6, #26
    4430:	d504      	bpl.n	443c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4432:	2320      	movs	r3, #32
    4434:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4436:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4438:	073b      	lsls	r3, r7, #28
    443a:	d40b      	bmi.n	4454 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    443c:	0733      	lsls	r3, r6, #28
    443e:	d504      	bpl.n	444a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4440:	2308      	movs	r3, #8
    4442:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4444:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4446:	06bb      	lsls	r3, r7, #26
    4448:	d408      	bmi.n	445c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    444c:	0028      	movs	r0, r5
    444e:	69eb      	ldr	r3, [r5, #28]
    4450:	4798      	blx	r3
    4452:	e7ec      	b.n	442e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4454:	0028      	movs	r0, r5
    4456:	69ab      	ldr	r3, [r5, #24]
    4458:	4798      	blx	r3
    445a:	e7ef      	b.n	443c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    445c:	6a2b      	ldr	r3, [r5, #32]
    445e:	0028      	movs	r0, r5
    4460:	4798      	blx	r3
}
    4462:	e7f2      	b.n	444a <_usart_interrupt_handler+0x176>
    4464:	20000594 	.word	0x20000594

00004468 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4468:	b510      	push	{r4, lr}
	switch (clock_source) {
    446a:	2808      	cmp	r0, #8
    446c:	d803      	bhi.n	4476 <system_clock_source_get_hz+0xe>
    446e:	0080      	lsls	r0, r0, #2
    4470:	4b1b      	ldr	r3, [pc, #108]	; (44e0 <system_clock_source_get_hz+0x78>)
    4472:	581b      	ldr	r3, [r3, r0]
    4474:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4476:	2000      	movs	r0, #0
    4478:	e030      	b.n	44dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    447a:	4b1a      	ldr	r3, [pc, #104]	; (44e4 <system_clock_source_get_hz+0x7c>)
    447c:	6918      	ldr	r0, [r3, #16]
    447e:	e02d      	b.n	44dc <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4480:	4b19      	ldr	r3, [pc, #100]	; (44e8 <system_clock_source_get_hz+0x80>)
    4482:	6a1b      	ldr	r3, [r3, #32]
    4484:	059b      	lsls	r3, r3, #22
    4486:	0f9b      	lsrs	r3, r3, #30
    4488:	4818      	ldr	r0, [pc, #96]	; (44ec <system_clock_source_get_hz+0x84>)
    448a:	40d8      	lsrs	r0, r3
    448c:	e026      	b.n	44dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    448e:	4b15      	ldr	r3, [pc, #84]	; (44e4 <system_clock_source_get_hz+0x7c>)
    4490:	6958      	ldr	r0, [r3, #20]
    4492:	e023      	b.n	44dc <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4494:	4b13      	ldr	r3, [pc, #76]	; (44e4 <system_clock_source_get_hz+0x7c>)
    4496:	681b      	ldr	r3, [r3, #0]
			return 0;
    4498:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    449a:	079b      	lsls	r3, r3, #30
    449c:	d51e      	bpl.n	44dc <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    449e:	4912      	ldr	r1, [pc, #72]	; (44e8 <system_clock_source_get_hz+0x80>)
    44a0:	2210      	movs	r2, #16
    44a2:	68cb      	ldr	r3, [r1, #12]
    44a4:	421a      	tst	r2, r3
    44a6:	d0fc      	beq.n	44a2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    44a8:	4b0e      	ldr	r3, [pc, #56]	; (44e4 <system_clock_source_get_hz+0x7c>)
    44aa:	681b      	ldr	r3, [r3, #0]
    44ac:	075b      	lsls	r3, r3, #29
    44ae:	d401      	bmi.n	44b4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    44b0:	480f      	ldr	r0, [pc, #60]	; (44f0 <system_clock_source_get_hz+0x88>)
    44b2:	e013      	b.n	44dc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    44b4:	2000      	movs	r0, #0
    44b6:	4b0f      	ldr	r3, [pc, #60]	; (44f4 <system_clock_source_get_hz+0x8c>)
    44b8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    44ba:	4b0a      	ldr	r3, [pc, #40]	; (44e4 <system_clock_source_get_hz+0x7c>)
    44bc:	689b      	ldr	r3, [r3, #8]
    44be:	041b      	lsls	r3, r3, #16
    44c0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    44c2:	4358      	muls	r0, r3
    44c4:	e00a      	b.n	44dc <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    44c6:	2350      	movs	r3, #80	; 0x50
    44c8:	4a07      	ldr	r2, [pc, #28]	; (44e8 <system_clock_source_get_hz+0x80>)
    44ca:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    44cc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    44ce:	075b      	lsls	r3, r3, #29
    44d0:	d504      	bpl.n	44dc <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    44d2:	4b04      	ldr	r3, [pc, #16]	; (44e4 <system_clock_source_get_hz+0x7c>)
    44d4:	68d8      	ldr	r0, [r3, #12]
    44d6:	e001      	b.n	44dc <system_clock_source_get_hz+0x74>
		return 32768UL;
    44d8:	2080      	movs	r0, #128	; 0x80
    44da:	0200      	lsls	r0, r0, #8
	}
}
    44dc:	bd10      	pop	{r4, pc}
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	00009d18 	.word	0x00009d18
    44e4:	20000234 	.word	0x20000234
    44e8:	40000800 	.word	0x40000800
    44ec:	007a1200 	.word	0x007a1200
    44f0:	02dc6c00 	.word	0x02dc6c00
    44f4:	00004ac9 	.word	0x00004ac9

000044f8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    44f8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    44fa:	490c      	ldr	r1, [pc, #48]	; (452c <system_clock_source_osc8m_set_config+0x34>)
    44fc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    44fe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4500:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4502:	7840      	ldrb	r0, [r0, #1]
    4504:	2201      	movs	r2, #1
    4506:	4010      	ands	r0, r2
    4508:	0180      	lsls	r0, r0, #6
    450a:	2640      	movs	r6, #64	; 0x40
    450c:	43b3      	bics	r3, r6
    450e:	4303      	orrs	r3, r0
    4510:	402a      	ands	r2, r5
    4512:	01d2      	lsls	r2, r2, #7
    4514:	2080      	movs	r0, #128	; 0x80
    4516:	4383      	bics	r3, r0
    4518:	4313      	orrs	r3, r2
    451a:	2203      	movs	r2, #3
    451c:	4022      	ands	r2, r4
    451e:	0212      	lsls	r2, r2, #8
    4520:	4803      	ldr	r0, [pc, #12]	; (4530 <system_clock_source_osc8m_set_config+0x38>)
    4522:	4003      	ands	r3, r0
    4524:	4313      	orrs	r3, r2
    4526:	620b      	str	r3, [r1, #32]
}
    4528:	bd70      	pop	{r4, r5, r6, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	40000800 	.word	0x40000800
    4530:	fffffcff 	.word	0xfffffcff

00004534 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4534:	b5f0      	push	{r4, r5, r6, r7, lr}
    4536:	46de      	mov	lr, fp
    4538:	4657      	mov	r7, sl
    453a:	464e      	mov	r6, r9
    453c:	4645      	mov	r5, r8
    453e:	b5e0      	push	{r5, r6, r7, lr}
    4540:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4542:	4b26      	ldr	r3, [pc, #152]	; (45dc <system_clock_source_xosc32k_set_config+0xa8>)
    4544:	469b      	mov	fp, r3
    4546:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    4548:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    454a:	7800      	ldrb	r0, [r0, #0]
    454c:	4242      	negs	r2, r0
    454e:	4142      	adcs	r2, r0
    4550:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4552:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    4554:	78ca      	ldrb	r2, [r1, #3]
    4556:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    4558:	790a      	ldrb	r2, [r1, #4]
    455a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    455c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    455e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    4560:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4562:	688a      	ldr	r2, [r1, #8]
    4564:	491e      	ldr	r1, [pc, #120]	; (45e0 <system_clock_source_xosc32k_set_config+0xac>)
    4566:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    4568:	2101      	movs	r1, #1
    456a:	464a      	mov	r2, r9
    456c:	0092      	lsls	r2, r2, #2
    456e:	4691      	mov	r9, r2
    4570:	2204      	movs	r2, #4
    4572:	4393      	bics	r3, r2
    4574:	464a      	mov	r2, r9
    4576:	4313      	orrs	r3, r2
    4578:	4642      	mov	r2, r8
    457a:	400a      	ands	r2, r1
    457c:	00d2      	lsls	r2, r2, #3
    457e:	4690      	mov	r8, r2
    4580:	2208      	movs	r2, #8
    4582:	4393      	bics	r3, r2
    4584:	4642      	mov	r2, r8
    4586:	4313      	orrs	r3, r2
    4588:	4662      	mov	r2, ip
    458a:	400a      	ands	r2, r1
    458c:	0112      	lsls	r2, r2, #4
    458e:	4694      	mov	ip, r2
    4590:	2210      	movs	r2, #16
    4592:	4393      	bics	r3, r2
    4594:	4662      	mov	r2, ip
    4596:	4313      	orrs	r3, r2
    4598:	4008      	ands	r0, r1
    459a:	0140      	lsls	r0, r0, #5
    459c:	2220      	movs	r2, #32
    459e:	4393      	bics	r3, r2
    45a0:	4303      	orrs	r3, r0
    45a2:	400f      	ands	r7, r1
    45a4:	01bf      	lsls	r7, r7, #6
    45a6:	2040      	movs	r0, #64	; 0x40
    45a8:	4383      	bics	r3, r0
    45aa:	433b      	orrs	r3, r7
    45ac:	400e      	ands	r6, r1
    45ae:	01f6      	lsls	r6, r6, #7
    45b0:	3040      	adds	r0, #64	; 0x40
    45b2:	4383      	bics	r3, r0
    45b4:	4333      	orrs	r3, r6
    45b6:	3879      	subs	r0, #121	; 0x79
    45b8:	4005      	ands	r5, r0
    45ba:	022d      	lsls	r5, r5, #8
    45bc:	4809      	ldr	r0, [pc, #36]	; (45e4 <system_clock_source_xosc32k_set_config+0xb0>)
    45be:	4003      	ands	r3, r0
    45c0:	432b      	orrs	r3, r5
    45c2:	4021      	ands	r1, r4
    45c4:	0309      	lsls	r1, r1, #12
    45c6:	4808      	ldr	r0, [pc, #32]	; (45e8 <system_clock_source_xosc32k_set_config+0xb4>)
    45c8:	4003      	ands	r3, r0
    45ca:	430b      	orrs	r3, r1
    45cc:	465a      	mov	r2, fp
    45ce:	8293      	strh	r3, [r2, #20]
}
    45d0:	bc3c      	pop	{r2, r3, r4, r5}
    45d2:	4690      	mov	r8, r2
    45d4:	4699      	mov	r9, r3
    45d6:	46a2      	mov	sl, r4
    45d8:	46ab      	mov	fp, r5
    45da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45dc:	40000800 	.word	0x40000800
    45e0:	20000234 	.word	0x20000234
    45e4:	fffff8ff 	.word	0xfffff8ff
    45e8:	ffffefff 	.word	0xffffefff

000045ec <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    45ec:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45ee:	7a03      	ldrb	r3, [r0, #8]
    45f0:	069b      	lsls	r3, r3, #26
    45f2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    45f4:	8942      	ldrh	r2, [r0, #10]
    45f6:	0592      	lsls	r2, r2, #22
    45f8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    45fa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    45fc:	4918      	ldr	r1, [pc, #96]	; (4660 <system_clock_source_dfll_set_config+0x74>)
    45fe:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4600:	7983      	ldrb	r3, [r0, #6]
    4602:	79c2      	ldrb	r2, [r0, #7]
    4604:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4606:	8842      	ldrh	r2, [r0, #2]
    4608:	8884      	ldrh	r4, [r0, #4]
    460a:	4322      	orrs	r2, r4
    460c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    460e:	7842      	ldrb	r2, [r0, #1]
    4610:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4612:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4614:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4616:	7803      	ldrb	r3, [r0, #0]
    4618:	2b04      	cmp	r3, #4
    461a:	d011      	beq.n	4640 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    461c:	2b20      	cmp	r3, #32
    461e:	d10e      	bne.n	463e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4620:	7b03      	ldrb	r3, [r0, #12]
    4622:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4624:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4626:	4313      	orrs	r3, r2
    4628:	89c2      	ldrh	r2, [r0, #14]
    462a:	0412      	lsls	r2, r2, #16
    462c:	490d      	ldr	r1, [pc, #52]	; (4664 <system_clock_source_dfll_set_config+0x78>)
    462e:	400a      	ands	r2, r1
    4630:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4632:	4a0b      	ldr	r2, [pc, #44]	; (4660 <system_clock_source_dfll_set_config+0x74>)
    4634:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4636:	6811      	ldr	r1, [r2, #0]
    4638:	4b0b      	ldr	r3, [pc, #44]	; (4668 <system_clock_source_dfll_set_config+0x7c>)
    463a:	430b      	orrs	r3, r1
    463c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    463e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4640:	7b03      	ldrb	r3, [r0, #12]
    4642:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4644:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4646:	4313      	orrs	r3, r2
    4648:	89c2      	ldrh	r2, [r0, #14]
    464a:	0412      	lsls	r2, r2, #16
    464c:	4905      	ldr	r1, [pc, #20]	; (4664 <system_clock_source_dfll_set_config+0x78>)
    464e:	400a      	ands	r2, r1
    4650:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4652:	4a03      	ldr	r2, [pc, #12]	; (4660 <system_clock_source_dfll_set_config+0x74>)
    4654:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4656:	6813      	ldr	r3, [r2, #0]
    4658:	2104      	movs	r1, #4
    465a:	430b      	orrs	r3, r1
    465c:	6013      	str	r3, [r2, #0]
    465e:	e7ee      	b.n	463e <system_clock_source_dfll_set_config+0x52>
    4660:	20000234 	.word	0x20000234
    4664:	03ff0000 	.word	0x03ff0000
    4668:	00000424 	.word	0x00000424

0000466c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    466c:	2808      	cmp	r0, #8
    466e:	d803      	bhi.n	4678 <system_clock_source_enable+0xc>
    4670:	0080      	lsls	r0, r0, #2
    4672:	4b25      	ldr	r3, [pc, #148]	; (4708 <system_clock_source_enable+0x9c>)
    4674:	581b      	ldr	r3, [r3, r0]
    4676:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4678:	2017      	movs	r0, #23
    467a:	e044      	b.n	4706 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    467c:	4a23      	ldr	r2, [pc, #140]	; (470c <system_clock_source_enable+0xa0>)
    467e:	6a13      	ldr	r3, [r2, #32]
    4680:	2102      	movs	r1, #2
    4682:	430b      	orrs	r3, r1
    4684:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4686:	2000      	movs	r0, #0
    4688:	e03d      	b.n	4706 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    468a:	4a20      	ldr	r2, [pc, #128]	; (470c <system_clock_source_enable+0xa0>)
    468c:	6993      	ldr	r3, [r2, #24]
    468e:	2102      	movs	r1, #2
    4690:	430b      	orrs	r3, r1
    4692:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4694:	2000      	movs	r0, #0
		break;
    4696:	e036      	b.n	4706 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4698:	4a1c      	ldr	r2, [pc, #112]	; (470c <system_clock_source_enable+0xa0>)
    469a:	8a13      	ldrh	r3, [r2, #16]
    469c:	2102      	movs	r1, #2
    469e:	430b      	orrs	r3, r1
    46a0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    46a2:	2000      	movs	r0, #0
		break;
    46a4:	e02f      	b.n	4706 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    46a6:	4a19      	ldr	r2, [pc, #100]	; (470c <system_clock_source_enable+0xa0>)
    46a8:	8a93      	ldrh	r3, [r2, #20]
    46aa:	2102      	movs	r1, #2
    46ac:	430b      	orrs	r3, r1
    46ae:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    46b0:	2000      	movs	r0, #0
		break;
    46b2:	e028      	b.n	4706 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    46b4:	4916      	ldr	r1, [pc, #88]	; (4710 <system_clock_source_enable+0xa4>)
    46b6:	680b      	ldr	r3, [r1, #0]
    46b8:	2202      	movs	r2, #2
    46ba:	4313      	orrs	r3, r2
    46bc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    46be:	4b13      	ldr	r3, [pc, #76]	; (470c <system_clock_source_enable+0xa0>)
    46c0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46c2:	0019      	movs	r1, r3
    46c4:	320e      	adds	r2, #14
    46c6:	68cb      	ldr	r3, [r1, #12]
    46c8:	421a      	tst	r2, r3
    46ca:	d0fc      	beq.n	46c6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    46cc:	4a10      	ldr	r2, [pc, #64]	; (4710 <system_clock_source_enable+0xa4>)
    46ce:	6891      	ldr	r1, [r2, #8]
    46d0:	4b0e      	ldr	r3, [pc, #56]	; (470c <system_clock_source_enable+0xa0>)
    46d2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    46d4:	6852      	ldr	r2, [r2, #4]
    46d6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    46d8:	2200      	movs	r2, #0
    46da:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    46dc:	0019      	movs	r1, r3
    46de:	3210      	adds	r2, #16
    46e0:	68cb      	ldr	r3, [r1, #12]
    46e2:	421a      	tst	r2, r3
    46e4:	d0fc      	beq.n	46e0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    46e6:	4b0a      	ldr	r3, [pc, #40]	; (4710 <system_clock_source_enable+0xa4>)
    46e8:	681b      	ldr	r3, [r3, #0]
    46ea:	b29b      	uxth	r3, r3
    46ec:	4a07      	ldr	r2, [pc, #28]	; (470c <system_clock_source_enable+0xa0>)
    46ee:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    46f0:	2000      	movs	r0, #0
    46f2:	e008      	b.n	4706 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46f4:	4905      	ldr	r1, [pc, #20]	; (470c <system_clock_source_enable+0xa0>)
    46f6:	2244      	movs	r2, #68	; 0x44
    46f8:	5c8b      	ldrb	r3, [r1, r2]
    46fa:	2002      	movs	r0, #2
    46fc:	4303      	orrs	r3, r0
    46fe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4700:	2000      	movs	r0, #0
		break;
    4702:	e000      	b.n	4706 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4704:	2000      	movs	r0, #0
}
    4706:	4770      	bx	lr
    4708:	00009d3c 	.word	0x00009d3c
    470c:	40000800 	.word	0x40000800
    4710:	20000234 	.word	0x20000234

00004714 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    4716:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4718:	22c2      	movs	r2, #194	; 0xc2
    471a:	00d2      	lsls	r2, r2, #3
    471c:	4b47      	ldr	r3, [pc, #284]	; (483c <system_clock_init+0x128>)
    471e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4720:	4a47      	ldr	r2, [pc, #284]	; (4840 <system_clock_init+0x12c>)
    4722:	6853      	ldr	r3, [r2, #4]
    4724:	211e      	movs	r1, #30
    4726:	438b      	bics	r3, r1
    4728:	391a      	subs	r1, #26
    472a:	430b      	orrs	r3, r1
    472c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    472e:	2202      	movs	r2, #2
    4730:	ab01      	add	r3, sp, #4
    4732:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4734:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4736:	4d43      	ldr	r5, [pc, #268]	; (4844 <system_clock_init+0x130>)
    4738:	b2e0      	uxtb	r0, r4
    473a:	a901      	add	r1, sp, #4
    473c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    473e:	3401      	adds	r4, #1
    4740:	2c25      	cmp	r4, #37	; 0x25
    4742:	d1f9      	bne.n	4738 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4744:	a80a      	add	r0, sp, #40	; 0x28
    4746:	2300      	movs	r3, #0
    4748:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    474a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    474c:	2280      	movs	r2, #128	; 0x80
    474e:	0212      	lsls	r2, r2, #8
    4750:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4752:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4754:	2201      	movs	r2, #1
    4756:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4758:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    475a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    475c:	3202      	adds	r2, #2
    475e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4760:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4762:	4b39      	ldr	r3, [pc, #228]	; (4848 <system_clock_init+0x134>)
    4764:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4766:	2005      	movs	r0, #5
    4768:	4b38      	ldr	r3, [pc, #224]	; (484c <system_clock_init+0x138>)
    476a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    476c:	4933      	ldr	r1, [pc, #204]	; (483c <system_clock_init+0x128>)
    476e:	2202      	movs	r2, #2
    4770:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4772:	421a      	tst	r2, r3
    4774:	d0fc      	beq.n	4770 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4776:	4a31      	ldr	r2, [pc, #196]	; (483c <system_clock_init+0x128>)
    4778:	8a93      	ldrh	r3, [r2, #20]
    477a:	2180      	movs	r1, #128	; 0x80
    477c:	430b      	orrs	r3, r1
    477e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4780:	ab05      	add	r3, sp, #20
    4782:	2100      	movs	r1, #0
    4784:	2200      	movs	r2, #0
    4786:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4788:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    478a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    478c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    478e:	313f      	adds	r1, #63	; 0x3f
    4790:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4792:	393b      	subs	r1, #59	; 0x3b
    4794:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4796:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4798:	4b2d      	ldr	r3, [pc, #180]	; (4850 <system_clock_init+0x13c>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    479e:	2b3f      	cmp	r3, #63	; 0x3f
    47a0:	d04a      	beq.n	4838 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    47a2:	a805      	add	r0, sp, #20
    47a4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    47a6:	4b2b      	ldr	r3, [pc, #172]	; (4854 <system_clock_init+0x140>)
    47a8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    47aa:	2307      	movs	r3, #7
    47ac:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    47ae:	3338      	adds	r3, #56	; 0x38
    47b0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    47b2:	4b29      	ldr	r3, [pc, #164]	; (4858 <system_clock_init+0x144>)
    47b4:	4798      	blx	r3
	config->run_in_standby  = false;
    47b6:	a804      	add	r0, sp, #16
    47b8:	2500      	movs	r5, #0
    47ba:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    47bc:	2601      	movs	r6, #1
    47be:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    47c0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    47c2:	4b26      	ldr	r3, [pc, #152]	; (485c <system_clock_init+0x148>)
    47c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    47c6:	2006      	movs	r0, #6
    47c8:	4f20      	ldr	r7, [pc, #128]	; (484c <system_clock_init+0x138>)
    47ca:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    47cc:	4b24      	ldr	r3, [pc, #144]	; (4860 <system_clock_init+0x14c>)
    47ce:	4798      	blx	r3
	config->division_factor    = 1;
    47d0:	ac01      	add	r4, sp, #4
    47d2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    47d4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    47d6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    47d8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    47da:	2305      	movs	r3, #5
    47dc:	7023      	strb	r3, [r4, #0]
    47de:	0021      	movs	r1, r4
    47e0:	2001      	movs	r0, #1
    47e2:	4b20      	ldr	r3, [pc, #128]	; (4864 <system_clock_init+0x150>)
    47e4:	4798      	blx	r3
    47e6:	2001      	movs	r0, #1
    47e8:	4b1f      	ldr	r3, [pc, #124]	; (4868 <system_clock_init+0x154>)
    47ea:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    47ec:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    47ee:	0021      	movs	r1, r4
    47f0:	2000      	movs	r0, #0
    47f2:	4b14      	ldr	r3, [pc, #80]	; (4844 <system_clock_init+0x130>)
    47f4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    47f6:	2000      	movs	r0, #0
    47f8:	4b1c      	ldr	r3, [pc, #112]	; (486c <system_clock_init+0x158>)
    47fa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    47fc:	2007      	movs	r0, #7
    47fe:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4800:	490e      	ldr	r1, [pc, #56]	; (483c <system_clock_init+0x128>)
    4802:	22d0      	movs	r2, #208	; 0xd0
    4804:	68cb      	ldr	r3, [r1, #12]
    4806:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4808:	2bd0      	cmp	r3, #208	; 0xd0
    480a:	d1fb      	bne.n	4804 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    480c:	4a18      	ldr	r2, [pc, #96]	; (4870 <system_clock_init+0x15c>)
    480e:	2300      	movs	r3, #0
    4810:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4812:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4814:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4816:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    4818:	a901      	add	r1, sp, #4
    481a:	2201      	movs	r2, #1
    481c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    481e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4820:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4822:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4824:	3307      	adds	r3, #7
    4826:	700b      	strb	r3, [r1, #0]
    4828:	2000      	movs	r0, #0
    482a:	4b0e      	ldr	r3, [pc, #56]	; (4864 <system_clock_init+0x150>)
    482c:	4798      	blx	r3
    482e:	2000      	movs	r0, #0
    4830:	4b0d      	ldr	r3, [pc, #52]	; (4868 <system_clock_init+0x154>)
    4832:	4798      	blx	r3
#endif
}
    4834:	b00f      	add	sp, #60	; 0x3c
    4836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4838:	3b20      	subs	r3, #32
    483a:	e7b2      	b.n	47a2 <system_clock_init+0x8e>
    483c:	40000800 	.word	0x40000800
    4840:	41004000 	.word	0x41004000
    4844:	00004aad 	.word	0x00004aad
    4848:	00004535 	.word	0x00004535
    484c:	0000466d 	.word	0x0000466d
    4850:	00806024 	.word	0x00806024
    4854:	000005b9 	.word	0x000005b9
    4858:	000045ed 	.word	0x000045ed
    485c:	000044f9 	.word	0x000044f9
    4860:	00004875 	.word	0x00004875
    4864:	00004899 	.word	0x00004899
    4868:	00004951 	.word	0x00004951
    486c:	00004a21 	.word	0x00004a21
    4870:	40000400 	.word	0x40000400

00004874 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4874:	4a06      	ldr	r2, [pc, #24]	; (4890 <system_gclk_init+0x1c>)
    4876:	6993      	ldr	r3, [r2, #24]
    4878:	2108      	movs	r1, #8
    487a:	430b      	orrs	r3, r1
    487c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    487e:	2201      	movs	r2, #1
    4880:	4b04      	ldr	r3, [pc, #16]	; (4894 <system_gclk_init+0x20>)
    4882:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4884:	0019      	movs	r1, r3
    4886:	780b      	ldrb	r3, [r1, #0]
    4888:	4213      	tst	r3, r2
    488a:	d1fc      	bne.n	4886 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    488c:	4770      	bx	lr
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	40000400 	.word	0x40000400
    4894:	40000c00 	.word	0x40000c00

00004898 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4898:	b570      	push	{r4, r5, r6, lr}
    489a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    489c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    489e:	780d      	ldrb	r5, [r1, #0]
    48a0:	022d      	lsls	r5, r5, #8
    48a2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    48a4:	784b      	ldrb	r3, [r1, #1]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d002      	beq.n	48b0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    48aa:	2380      	movs	r3, #128	; 0x80
    48ac:	02db      	lsls	r3, r3, #11
    48ae:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    48b0:	7a4b      	ldrb	r3, [r1, #9]
    48b2:	2b00      	cmp	r3, #0
    48b4:	d002      	beq.n	48bc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    48b6:	2380      	movs	r3, #128	; 0x80
    48b8:	031b      	lsls	r3, r3, #12
    48ba:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    48bc:	6848      	ldr	r0, [r1, #4]
    48be:	2801      	cmp	r0, #1
    48c0:	d910      	bls.n	48e4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    48c2:	1e43      	subs	r3, r0, #1
    48c4:	4218      	tst	r0, r3
    48c6:	d134      	bne.n	4932 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    48c8:	2802      	cmp	r0, #2
    48ca:	d930      	bls.n	492e <system_gclk_gen_set_config+0x96>
    48cc:	2302      	movs	r3, #2
    48ce:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    48d0:	3201      	adds	r2, #1
						mask <<= 1) {
    48d2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    48d4:	4298      	cmp	r0, r3
    48d6:	d8fb      	bhi.n	48d0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    48d8:	0212      	lsls	r2, r2, #8
    48da:	4332      	orrs	r2, r6
    48dc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    48de:	2380      	movs	r3, #128	; 0x80
    48e0:	035b      	lsls	r3, r3, #13
    48e2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    48e4:	7a0b      	ldrb	r3, [r1, #8]
    48e6:	2b00      	cmp	r3, #0
    48e8:	d002      	beq.n	48f0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    48ea:	2380      	movs	r3, #128	; 0x80
    48ec:	039b      	lsls	r3, r3, #14
    48ee:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    48f0:	4a13      	ldr	r2, [pc, #76]	; (4940 <system_gclk_gen_set_config+0xa8>)
    48f2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    48f4:	b25b      	sxtb	r3, r3
    48f6:	2b00      	cmp	r3, #0
    48f8:	dbfb      	blt.n	48f2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    48fa:	4b12      	ldr	r3, [pc, #72]	; (4944 <system_gclk_gen_set_config+0xac>)
    48fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    48fe:	4b12      	ldr	r3, [pc, #72]	; (4948 <system_gclk_gen_set_config+0xb0>)
    4900:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4902:	4a0f      	ldr	r2, [pc, #60]	; (4940 <system_gclk_gen_set_config+0xa8>)
    4904:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4906:	b25b      	sxtb	r3, r3
    4908:	2b00      	cmp	r3, #0
    490a:	dbfb      	blt.n	4904 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    490c:	4b0c      	ldr	r3, [pc, #48]	; (4940 <system_gclk_gen_set_config+0xa8>)
    490e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4910:	001a      	movs	r2, r3
    4912:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4914:	b25b      	sxtb	r3, r3
    4916:	2b00      	cmp	r3, #0
    4918:	dbfb      	blt.n	4912 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    491a:	4a09      	ldr	r2, [pc, #36]	; (4940 <system_gclk_gen_set_config+0xa8>)
    491c:	6853      	ldr	r3, [r2, #4]
    491e:	2180      	movs	r1, #128	; 0x80
    4920:	0249      	lsls	r1, r1, #9
    4922:	400b      	ands	r3, r1
    4924:	431d      	orrs	r5, r3
    4926:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4928:	4b08      	ldr	r3, [pc, #32]	; (494c <system_gclk_gen_set_config+0xb4>)
    492a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    492c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    492e:	2200      	movs	r2, #0
    4930:	e7d2      	b.n	48d8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4932:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4934:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4936:	2380      	movs	r3, #128	; 0x80
    4938:	029b      	lsls	r3, r3, #10
    493a:	431d      	orrs	r5, r3
    493c:	e7d2      	b.n	48e4 <system_gclk_gen_set_config+0x4c>
    493e:	46c0      	nop			; (mov r8, r8)
    4940:	40000c00 	.word	0x40000c00
    4944:	00003301 	.word	0x00003301
    4948:	40000c08 	.word	0x40000c08
    494c:	00003341 	.word	0x00003341

00004950 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4950:	b510      	push	{r4, lr}
    4952:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4954:	4a0b      	ldr	r2, [pc, #44]	; (4984 <system_gclk_gen_enable+0x34>)
    4956:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4958:	b25b      	sxtb	r3, r3
    495a:	2b00      	cmp	r3, #0
    495c:	dbfb      	blt.n	4956 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    495e:	4b0a      	ldr	r3, [pc, #40]	; (4988 <system_gclk_gen_enable+0x38>)
    4960:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4962:	4b0a      	ldr	r3, [pc, #40]	; (498c <system_gclk_gen_enable+0x3c>)
    4964:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4966:	4a07      	ldr	r2, [pc, #28]	; (4984 <system_gclk_gen_enable+0x34>)
    4968:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    496a:	b25b      	sxtb	r3, r3
    496c:	2b00      	cmp	r3, #0
    496e:	dbfb      	blt.n	4968 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4970:	4a04      	ldr	r2, [pc, #16]	; (4984 <system_gclk_gen_enable+0x34>)
    4972:	6851      	ldr	r1, [r2, #4]
    4974:	2380      	movs	r3, #128	; 0x80
    4976:	025b      	lsls	r3, r3, #9
    4978:	430b      	orrs	r3, r1
    497a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    497c:	4b04      	ldr	r3, [pc, #16]	; (4990 <system_gclk_gen_enable+0x40>)
    497e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4980:	bd10      	pop	{r4, pc}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	40000c00 	.word	0x40000c00
    4988:	00003301 	.word	0x00003301
    498c:	40000c04 	.word	0x40000c04
    4990:	00003341 	.word	0x00003341

00004994 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4998:	4a1a      	ldr	r2, [pc, #104]	; (4a04 <system_gclk_gen_get_hz+0x70>)
    499a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    499c:	b25b      	sxtb	r3, r3
    499e:	2b00      	cmp	r3, #0
    49a0:	dbfb      	blt.n	499a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    49a2:	4b19      	ldr	r3, [pc, #100]	; (4a08 <system_gclk_gen_get_hz+0x74>)
    49a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49a6:	4b19      	ldr	r3, [pc, #100]	; (4a0c <system_gclk_gen_get_hz+0x78>)
    49a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49aa:	4a16      	ldr	r2, [pc, #88]	; (4a04 <system_gclk_gen_get_hz+0x70>)
    49ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49ae:	b25b      	sxtb	r3, r3
    49b0:	2b00      	cmp	r3, #0
    49b2:	dbfb      	blt.n	49ac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    49b4:	4e13      	ldr	r6, [pc, #76]	; (4a04 <system_gclk_gen_get_hz+0x70>)
    49b6:	6870      	ldr	r0, [r6, #4]
    49b8:	04c0      	lsls	r0, r0, #19
    49ba:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    49bc:	4b14      	ldr	r3, [pc, #80]	; (4a10 <system_gclk_gen_get_hz+0x7c>)
    49be:	4798      	blx	r3
    49c0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    49c2:	4b12      	ldr	r3, [pc, #72]	; (4a0c <system_gclk_gen_get_hz+0x78>)
    49c4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    49c6:	6876      	ldr	r6, [r6, #4]
    49c8:	02f6      	lsls	r6, r6, #11
    49ca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49cc:	4b11      	ldr	r3, [pc, #68]	; (4a14 <system_gclk_gen_get_hz+0x80>)
    49ce:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49d0:	4a0c      	ldr	r2, [pc, #48]	; (4a04 <system_gclk_gen_get_hz+0x70>)
    49d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    49d4:	b25b      	sxtb	r3, r3
    49d6:	2b00      	cmp	r3, #0
    49d8:	dbfb      	blt.n	49d2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    49da:	4b0a      	ldr	r3, [pc, #40]	; (4a04 <system_gclk_gen_get_hz+0x70>)
    49dc:	689c      	ldr	r4, [r3, #8]
    49de:	0224      	lsls	r4, r4, #8
    49e0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    49e2:	4b0d      	ldr	r3, [pc, #52]	; (4a18 <system_gclk_gen_get_hz+0x84>)
    49e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    49e6:	2e00      	cmp	r6, #0
    49e8:	d107      	bne.n	49fa <system_gclk_gen_get_hz+0x66>
    49ea:	2c01      	cmp	r4, #1
    49ec:	d907      	bls.n	49fe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    49ee:	0021      	movs	r1, r4
    49f0:	0028      	movs	r0, r5
    49f2:	4b0a      	ldr	r3, [pc, #40]	; (4a1c <system_gclk_gen_get_hz+0x88>)
    49f4:	4798      	blx	r3
    49f6:	0005      	movs	r5, r0
    49f8:	e001      	b.n	49fe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    49fa:	3401      	adds	r4, #1
    49fc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    49fe:	0028      	movs	r0, r5
    4a00:	bd70      	pop	{r4, r5, r6, pc}
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	40000c00 	.word	0x40000c00
    4a08:	00003301 	.word	0x00003301
    4a0c:	40000c04 	.word	0x40000c04
    4a10:	00004469 	.word	0x00004469
    4a14:	40000c08 	.word	0x40000c08
    4a18:	00003341 	.word	0x00003341
    4a1c:	000069c9 	.word	0x000069c9

00004a20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4a20:	b510      	push	{r4, lr}
    4a22:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a24:	4b06      	ldr	r3, [pc, #24]	; (4a40 <system_gclk_chan_enable+0x20>)
    4a26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a28:	4b06      	ldr	r3, [pc, #24]	; (4a44 <system_gclk_chan_enable+0x24>)
    4a2a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4a2c:	4a06      	ldr	r2, [pc, #24]	; (4a48 <system_gclk_chan_enable+0x28>)
    4a2e:	8853      	ldrh	r3, [r2, #2]
    4a30:	2180      	movs	r1, #128	; 0x80
    4a32:	01c9      	lsls	r1, r1, #7
    4a34:	430b      	orrs	r3, r1
    4a36:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4a38:	4b04      	ldr	r3, [pc, #16]	; (4a4c <system_gclk_chan_enable+0x2c>)
    4a3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a3c:	bd10      	pop	{r4, pc}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	00003301 	.word	0x00003301
    4a44:	40000c02 	.word	0x40000c02
    4a48:	40000c00 	.word	0x40000c00
    4a4c:	00003341 	.word	0x00003341

00004a50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4a50:	b510      	push	{r4, lr}
    4a52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4a54:	4b0f      	ldr	r3, [pc, #60]	; (4a94 <system_gclk_chan_disable+0x44>)
    4a56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a58:	4b0f      	ldr	r3, [pc, #60]	; (4a98 <system_gclk_chan_disable+0x48>)
    4a5a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4a5c:	4a0f      	ldr	r2, [pc, #60]	; (4a9c <system_gclk_chan_disable+0x4c>)
    4a5e:	8853      	ldrh	r3, [r2, #2]
    4a60:	051b      	lsls	r3, r3, #20
    4a62:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4a64:	8853      	ldrh	r3, [r2, #2]
    4a66:	490e      	ldr	r1, [pc, #56]	; (4aa0 <system_gclk_chan_disable+0x50>)
    4a68:	400b      	ands	r3, r1
    4a6a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4a6c:	8853      	ldrh	r3, [r2, #2]
    4a6e:	490d      	ldr	r1, [pc, #52]	; (4aa4 <system_gclk_chan_disable+0x54>)
    4a70:	400b      	ands	r3, r1
    4a72:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a74:	0011      	movs	r1, r2
    4a76:	2280      	movs	r2, #128	; 0x80
    4a78:	01d2      	lsls	r2, r2, #7
    4a7a:	884b      	ldrh	r3, [r1, #2]
    4a7c:	4213      	tst	r3, r2
    4a7e:	d1fc      	bne.n	4a7a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a80:	4906      	ldr	r1, [pc, #24]	; (4a9c <system_gclk_chan_disable+0x4c>)
    4a82:	884a      	ldrh	r2, [r1, #2]
    4a84:	0203      	lsls	r3, r0, #8
    4a86:	4806      	ldr	r0, [pc, #24]	; (4aa0 <system_gclk_chan_disable+0x50>)
    4a88:	4002      	ands	r2, r0
    4a8a:	4313      	orrs	r3, r2
    4a8c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4a8e:	4b06      	ldr	r3, [pc, #24]	; (4aa8 <system_gclk_chan_disable+0x58>)
    4a90:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a92:	bd10      	pop	{r4, pc}
    4a94:	00003301 	.word	0x00003301
    4a98:	40000c02 	.word	0x40000c02
    4a9c:	40000c00 	.word	0x40000c00
    4aa0:	fffff0ff 	.word	0xfffff0ff
    4aa4:	ffffbfff 	.word	0xffffbfff
    4aa8:	00003341 	.word	0x00003341

00004aac <system_gclk_chan_set_config>:
{
    4aac:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4aae:	780c      	ldrb	r4, [r1, #0]
    4ab0:	0224      	lsls	r4, r4, #8
    4ab2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4ab4:	4b02      	ldr	r3, [pc, #8]	; (4ac0 <system_gclk_chan_set_config+0x14>)
    4ab6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ab8:	b2a4      	uxth	r4, r4
    4aba:	4b02      	ldr	r3, [pc, #8]	; (4ac4 <system_gclk_chan_set_config+0x18>)
    4abc:	805c      	strh	r4, [r3, #2]
}
    4abe:	bd10      	pop	{r4, pc}
    4ac0:	00004a51 	.word	0x00004a51
    4ac4:	40000c00 	.word	0x40000c00

00004ac8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ac8:	b510      	push	{r4, lr}
    4aca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4acc:	4b06      	ldr	r3, [pc, #24]	; (4ae8 <system_gclk_chan_get_hz+0x20>)
    4ace:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ad0:	4b06      	ldr	r3, [pc, #24]	; (4aec <system_gclk_chan_get_hz+0x24>)
    4ad2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4ad4:	4b06      	ldr	r3, [pc, #24]	; (4af0 <system_gclk_chan_get_hz+0x28>)
    4ad6:	885c      	ldrh	r4, [r3, #2]
    4ad8:	0524      	lsls	r4, r4, #20
    4ada:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4adc:	4b05      	ldr	r3, [pc, #20]	; (4af4 <system_gclk_chan_get_hz+0x2c>)
    4ade:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ae0:	0020      	movs	r0, r4
    4ae2:	4b05      	ldr	r3, [pc, #20]	; (4af8 <system_gclk_chan_get_hz+0x30>)
    4ae4:	4798      	blx	r3
}
    4ae6:	bd10      	pop	{r4, pc}
    4ae8:	00003301 	.word	0x00003301
    4aec:	40000c02 	.word	0x40000c02
    4af0:	40000c00 	.word	0x40000c00
    4af4:	00003341 	.word	0x00003341
    4af8:	00004995 	.word	0x00004995

00004afc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4afc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4afe:	78d3      	ldrb	r3, [r2, #3]
    4b00:	2b00      	cmp	r3, #0
    4b02:	d135      	bne.n	4b70 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4b04:	7813      	ldrb	r3, [r2, #0]
    4b06:	2b80      	cmp	r3, #128	; 0x80
    4b08:	d029      	beq.n	4b5e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4b0a:	061b      	lsls	r3, r3, #24
    4b0c:	2480      	movs	r4, #128	; 0x80
    4b0e:	0264      	lsls	r4, r4, #9
    4b10:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b12:	7854      	ldrb	r4, [r2, #1]
    4b14:	2502      	movs	r5, #2
    4b16:	43ac      	bics	r4, r5
    4b18:	d106      	bne.n	4b28 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b1a:	7894      	ldrb	r4, [r2, #2]
    4b1c:	2c00      	cmp	r4, #0
    4b1e:	d120      	bne.n	4b62 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b20:	2480      	movs	r4, #128	; 0x80
    4b22:	02a4      	lsls	r4, r4, #10
    4b24:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b26:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b28:	7854      	ldrb	r4, [r2, #1]
    4b2a:	3c01      	subs	r4, #1
    4b2c:	2c01      	cmp	r4, #1
    4b2e:	d91c      	bls.n	4b6a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b30:	040d      	lsls	r5, r1, #16
    4b32:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b34:	24a0      	movs	r4, #160	; 0xa0
    4b36:	05e4      	lsls	r4, r4, #23
    4b38:	432c      	orrs	r4, r5
    4b3a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b3c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b3e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b40:	24d0      	movs	r4, #208	; 0xd0
    4b42:	0624      	lsls	r4, r4, #24
    4b44:	432c      	orrs	r4, r5
    4b46:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b48:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4b4a:	78d4      	ldrb	r4, [r2, #3]
    4b4c:	2c00      	cmp	r4, #0
    4b4e:	d122      	bne.n	4b96 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4b50:	035b      	lsls	r3, r3, #13
    4b52:	d51c      	bpl.n	4b8e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4b54:	7893      	ldrb	r3, [r2, #2]
    4b56:	2b01      	cmp	r3, #1
    4b58:	d01e      	beq.n	4b98 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4b5a:	6141      	str	r1, [r0, #20]
    4b5c:	e017      	b.n	4b8e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4b5e:	2300      	movs	r3, #0
    4b60:	e7d7      	b.n	4b12 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b62:	24c0      	movs	r4, #192	; 0xc0
    4b64:	02e4      	lsls	r4, r4, #11
    4b66:	4323      	orrs	r3, r4
    4b68:	e7dd      	b.n	4b26 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b6a:	4c0d      	ldr	r4, [pc, #52]	; (4ba0 <_system_pinmux_config+0xa4>)
    4b6c:	4023      	ands	r3, r4
    4b6e:	e7df      	b.n	4b30 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4b70:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b72:	040c      	lsls	r4, r1, #16
    4b74:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b76:	23a0      	movs	r3, #160	; 0xa0
    4b78:	05db      	lsls	r3, r3, #23
    4b7a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b7c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b7e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4b80:	23d0      	movs	r3, #208	; 0xd0
    4b82:	061b      	lsls	r3, r3, #24
    4b84:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b86:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4b88:	78d3      	ldrb	r3, [r2, #3]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d103      	bne.n	4b96 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b8e:	7853      	ldrb	r3, [r2, #1]
    4b90:	3b01      	subs	r3, #1
    4b92:	2b01      	cmp	r3, #1
    4b94:	d902      	bls.n	4b9c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4b96:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4b98:	6181      	str	r1, [r0, #24]
    4b9a:	e7f8      	b.n	4b8e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4b9c:	6081      	str	r1, [r0, #8]
}
    4b9e:	e7fa      	b.n	4b96 <_system_pinmux_config+0x9a>
    4ba0:	fffbffff 	.word	0xfffbffff

00004ba4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4ba4:	b510      	push	{r4, lr}
    4ba6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    4ba8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4baa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bac:	2900      	cmp	r1, #0
    4bae:	d104      	bne.n	4bba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4bb0:	0943      	lsrs	r3, r0, #5
    4bb2:	01db      	lsls	r3, r3, #7
    4bb4:	4905      	ldr	r1, [pc, #20]	; (4bcc <system_pinmux_pin_set_config+0x28>)
    4bb6:	468c      	mov	ip, r1
    4bb8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4bba:	241f      	movs	r4, #31
    4bbc:	4020      	ands	r0, r4
    4bbe:	2101      	movs	r1, #1
    4bc0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4bc2:	0018      	movs	r0, r3
    4bc4:	4b02      	ldr	r3, [pc, #8]	; (4bd0 <system_pinmux_pin_set_config+0x2c>)
    4bc6:	4798      	blx	r3
}
    4bc8:	bd10      	pop	{r4, pc}
    4bca:	46c0      	nop			; (mov r8, r8)
    4bcc:	41004400 	.word	0x41004400
    4bd0:	00004afd 	.word	0x00004afd

00004bd4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4bd4:	4770      	bx	lr
	...

00004bd8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4bd8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4bda:	4b05      	ldr	r3, [pc, #20]	; (4bf0 <system_init+0x18>)
    4bdc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4bde:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <system_init+0x1c>)
    4be0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4be2:	4b05      	ldr	r3, [pc, #20]	; (4bf8 <system_init+0x20>)
    4be4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4be6:	4b05      	ldr	r3, [pc, #20]	; (4bfc <system_init+0x24>)
    4be8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4bea:	4b05      	ldr	r3, [pc, #20]	; (4c00 <system_init+0x28>)
    4bec:	4798      	blx	r3
}
    4bee:	bd10      	pop	{r4, pc}
    4bf0:	00004715 	.word	0x00004715
    4bf4:	00003371 	.word	0x00003371
    4bf8:	00004bd5 	.word	0x00004bd5
    4bfc:	00003481 	.word	0x00003481
    4c00:	00004bd5 	.word	0x00004bd5

00004c04 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4c04:	4b09      	ldr	r3, [pc, #36]	; (4c2c <_tcc_get_inst_index+0x28>)
    4c06:	4298      	cmp	r0, r3
    4c08:	d00c      	beq.n	4c24 <_tcc_get_inst_index+0x20>
    4c0a:	4b09      	ldr	r3, [pc, #36]	; (4c30 <_tcc_get_inst_index+0x2c>)
    4c0c:	4298      	cmp	r0, r3
    4c0e:	d007      	beq.n	4c20 <_tcc_get_inst_index+0x1c>
    4c10:	4a08      	ldr	r2, [pc, #32]	; (4c34 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c12:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    4c14:	4290      	cmp	r0, r2
    4c16:	d001      	beq.n	4c1c <_tcc_get_inst_index+0x18>
}
    4c18:	0018      	movs	r0, r3
    4c1a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c1c:	3302      	adds	r3, #2
    4c1e:	e002      	b.n	4c26 <_tcc_get_inst_index+0x22>
    4c20:	2301      	movs	r3, #1
    4c22:	e000      	b.n	4c26 <_tcc_get_inst_index+0x22>
    4c24:	2300      	movs	r3, #0
			return i;
    4c26:	b2db      	uxtb	r3, r3
    4c28:	e7f6      	b.n	4c18 <_tcc_get_inst_index+0x14>
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	42002000 	.word	0x42002000
    4c30:	42002400 	.word	0x42002400
    4c34:	42002800 	.word	0x42002800

00004c38 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c38:	b510      	push	{r4, lr}
    4c3a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c3c:	0008      	movs	r0, r1
    4c3e:	4b4f      	ldr	r3, [pc, #316]	; (4d7c <tcc_get_config_defaults+0x144>)
    4c40:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	2300      	movs	r3, #0
    4c44:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c46:	0080      	lsls	r0, r0, #2
    4c48:	4a4d      	ldr	r2, [pc, #308]	; (4d80 <tcc_get_config_defaults+0x148>)
    4c4a:	5882      	ldr	r2, [r0, r2]
    4c4c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c4e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c50:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c52:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c54:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    4c56:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c58:	61e3      	str	r3, [r4, #28]
    4c5a:	6223      	str	r3, [r4, #32]
    4c5c:	6263      	str	r3, [r4, #36]	; 0x24
    4c5e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c60:	7523      	strb	r3, [r4, #20]
    4c62:	7563      	strb	r3, [r4, #21]
    4c64:	75a3      	strb	r3, [r4, #22]
    4c66:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4c68:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4c6a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c6c:	7423      	strb	r3, [r4, #16]
    4c6e:	7463      	strb	r3, [r4, #17]
    4c70:	74a3      	strb	r3, [r4, #18]
    4c72:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4c74:	222c      	movs	r2, #44	; 0x2c
    4c76:	54a3      	strb	r3, [r4, r2]
    4c78:	3201      	adds	r2, #1
    4c7a:	54a3      	strb	r3, [r4, r2]
    4c7c:	3201      	adds	r2, #1
    4c7e:	54a3      	strb	r3, [r4, r2]
    4c80:	3201      	adds	r2, #1
    4c82:	54a3      	strb	r3, [r4, r2]
    4c84:	3201      	adds	r2, #1
    4c86:	54a3      	strb	r3, [r4, r2]
    4c88:	3201      	adds	r2, #1
    4c8a:	54a3      	strb	r3, [r4, r2]
    4c8c:	3201      	adds	r2, #1
    4c8e:	54a3      	strb	r3, [r4, r2]
    4c90:	3201      	adds	r2, #1
    4c92:	54a3      	strb	r3, [r4, r2]
    4c94:	3201      	adds	r2, #1
    4c96:	54a3      	strb	r3, [r4, r2]
    4c98:	3201      	adds	r2, #1
    4c9a:	54a3      	strb	r3, [r4, r2]
    4c9c:	3201      	adds	r2, #1
    4c9e:	54a3      	strb	r3, [r4, r2]
    4ca0:	3201      	adds	r2, #1
    4ca2:	54a3      	strb	r3, [r4, r2]
    4ca4:	3201      	adds	r2, #1
    4ca6:	54a3      	strb	r3, [r4, r2]
    4ca8:	3201      	adds	r2, #1
    4caa:	54a3      	strb	r3, [r4, r2]
    4cac:	3201      	adds	r2, #1
    4cae:	54a3      	strb	r3, [r4, r2]
    4cb0:	3201      	adds	r2, #1
    4cb2:	54a3      	strb	r3, [r4, r2]
    4cb4:	3201      	adds	r2, #1
    4cb6:	54a3      	strb	r3, [r4, r2]
    4cb8:	3201      	adds	r2, #1
    4cba:	54a3      	strb	r3, [r4, r2]
    4cbc:	3201      	adds	r2, #1
    4cbe:	54a3      	strb	r3, [r4, r2]
    4cc0:	3201      	adds	r2, #1
    4cc2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4cc4:	3201      	adds	r2, #1
    4cc6:	54a3      	strb	r3, [r4, r2]
    4cc8:	3201      	adds	r2, #1
    4cca:	54a3      	strb	r3, [r4, r2]
    4ccc:	3201      	adds	r2, #1
    4cce:	54a3      	strb	r3, [r4, r2]
    4cd0:	3201      	adds	r2, #1
    4cd2:	54a3      	strb	r3, [r4, r2]
    4cd4:	3201      	adds	r2, #1
    4cd6:	54a3      	strb	r3, [r4, r2]
    4cd8:	3201      	adds	r2, #1
    4cda:	54a3      	strb	r3, [r4, r2]
    4cdc:	3201      	adds	r2, #1
    4cde:	54a3      	strb	r3, [r4, r2]
    4ce0:	3201      	adds	r2, #1
    4ce2:	54a3      	strb	r3, [r4, r2]
    4ce4:	3201      	adds	r2, #1
    4ce6:	54a3      	strb	r3, [r4, r2]
    4ce8:	3201      	adds	r2, #1
    4cea:	54a3      	strb	r3, [r4, r2]
    4cec:	3201      	adds	r2, #1
    4cee:	54a3      	strb	r3, [r4, r2]
    4cf0:	3201      	adds	r2, #1
    4cf2:	54a3      	strb	r3, [r4, r2]
    4cf4:	3201      	adds	r2, #1
    4cf6:	54a3      	strb	r3, [r4, r2]
    4cf8:	3201      	adds	r2, #1
    4cfa:	54a3      	strb	r3, [r4, r2]
    4cfc:	3201      	adds	r2, #1
    4cfe:	54a3      	strb	r3, [r4, r2]
    4d00:	3201      	adds	r2, #1
    4d02:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4d04:	3201      	adds	r2, #1
    4d06:	54a3      	strb	r3, [r4, r2]
    4d08:	3201      	adds	r2, #1
    4d0a:	54a3      	strb	r3, [r4, r2]
    4d0c:	3201      	adds	r2, #1
    4d0e:	54a3      	strb	r3, [r4, r2]
    4d10:	3201      	adds	r2, #1
    4d12:	54a3      	strb	r3, [r4, r2]
    4d14:	3201      	adds	r2, #1
    4d16:	54a3      	strb	r3, [r4, r2]
    4d18:	3201      	adds	r2, #1
    4d1a:	54a3      	strb	r3, [r4, r2]
    4d1c:	3201      	adds	r2, #1
    4d1e:	54a3      	strb	r3, [r4, r2]
    4d20:	3201      	adds	r2, #1
    4d22:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4d24:	3241      	adds	r2, #65	; 0x41
    4d26:	54a3      	strb	r3, [r4, r2]
    4d28:	65a3      	str	r3, [r4, #88]	; 0x58
    4d2a:	67a3      	str	r3, [r4, #120]	; 0x78
    4d2c:	3201      	adds	r2, #1
    4d2e:	54a3      	strb	r3, [r4, r2]
    4d30:	65e3      	str	r3, [r4, #92]	; 0x5c
    4d32:	67e3      	str	r3, [r4, #124]	; 0x7c
    4d34:	3201      	adds	r2, #1
    4d36:	54a3      	strb	r3, [r4, r2]
    4d38:	6623      	str	r3, [r4, #96]	; 0x60
    4d3a:	3a1a      	subs	r2, #26
    4d3c:	50a3      	str	r3, [r4, r2]
    4d3e:	321b      	adds	r2, #27
    4d40:	54a3      	strb	r3, [r4, r2]
    4d42:	6663      	str	r3, [r4, #100]	; 0x64
    4d44:	3a17      	subs	r2, #23
    4d46:	50a3      	str	r3, [r4, r2]
    4d48:	3218      	adds	r2, #24
    4d4a:	54a3      	strb	r3, [r4, r2]
    4d4c:	66a3      	str	r3, [r4, #104]	; 0x68
    4d4e:	3a14      	subs	r2, #20
    4d50:	50a3      	str	r3, [r4, r2]
    4d52:	3215      	adds	r2, #21
    4d54:	54a3      	strb	r3, [r4, r2]
    4d56:	66e3      	str	r3, [r4, #108]	; 0x6c
    4d58:	3a11      	subs	r2, #17
    4d5a:	50a3      	str	r3, [r4, r2]
    4d5c:	3212      	adds	r2, #18
    4d5e:	54a3      	strb	r3, [r4, r2]
    4d60:	6723      	str	r3, [r4, #112]	; 0x70
    4d62:	3a0e      	subs	r2, #14
    4d64:	50a3      	str	r3, [r4, r2]
    4d66:	320f      	adds	r2, #15
    4d68:	54a3      	strb	r3, [r4, r2]
    4d6a:	6763      	str	r3, [r4, #116]	; 0x74
    4d6c:	3a0b      	subs	r2, #11
    4d6e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4d70:	2101      	movs	r1, #1
    4d72:	320c      	adds	r2, #12
    4d74:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    4d76:	3201      	adds	r2, #1
    4d78:	54a3      	strb	r3, [r4, r2]
}
    4d7a:	bd10      	pop	{r4, pc}
    4d7c:	00004c05 	.word	0x00004c05
    4d80:	00009d74 	.word	0x00009d74

00004d84 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d86:	46de      	mov	lr, fp
    4d88:	4657      	mov	r7, sl
    4d8a:	464e      	mov	r6, r9
    4d8c:	4645      	mov	r5, r8
    4d8e:	b5e0      	push	{r5, r6, r7, lr}
    4d90:	b091      	sub	sp, #68	; 0x44
    4d92:	9001      	str	r0, [sp, #4]
    4d94:	000c      	movs	r4, r1
    4d96:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4d98:	0008      	movs	r0, r1
    4d9a:	4bc3      	ldr	r3, [pc, #780]	; (50a8 <tcc_init+0x324>)
    4d9c:	4798      	blx	r3
    4d9e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4da0:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    4da2:	48c2      	ldr	r0, [pc, #776]	; (50ac <tcc_init+0x328>)
    4da4:	6a02      	ldr	r2, [r0, #32]
    4da6:	009e      	lsls	r6, r3, #2
    4da8:	4fc1      	ldr	r7, [pc, #772]	; (50b0 <tcc_init+0x32c>)
    4daa:	59f7      	ldr	r7, [r6, r7]
    4dac:	433a      	orrs	r2, r7
    4dae:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4db0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    4db2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4db4:	0792      	lsls	r2, r2, #30
    4db6:	d506      	bpl.n	4dc6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    4db8:	b011      	add	sp, #68	; 0x44
    4dba:	bc3c      	pop	{r2, r3, r4, r5}
    4dbc:	4690      	mov	r8, r2
    4dbe:	4699      	mov	r9, r3
    4dc0:	46a2      	mov	sl, r4
    4dc2:	46ab      	mov	fp, r5
    4dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    4dc6:	6822      	ldr	r2, [r4, #0]
    4dc8:	2701      	movs	r7, #1
    4dca:	4017      	ands	r7, r2
    4dcc:	d1f4      	bne.n	4db8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    4dce:	48b9      	ldr	r0, [pc, #740]	; (50b4 <tcc_init+0x330>)
    4dd0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    4dd2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    4dd4:	682e      	ldr	r6, [r5, #0]
    4dd6:	42b2      	cmp	r2, r6
    4dd8:	d3ee      	bcc.n	4db8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    4dda:	686e      	ldr	r6, [r5, #4]
    4ddc:	42b2      	cmp	r2, r6
    4dde:	d3eb      	bcc.n	4db8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    4de0:	69e8      	ldr	r0, [r5, #28]
    4de2:	4282      	cmp	r2, r0
    4de4:	d200      	bcs.n	4de8 <tcc_init+0x64>
    4de6:	e1b9      	b.n	515c <tcc_init+0x3d8>
    4de8:	6a28      	ldr	r0, [r5, #32]
    4dea:	4282      	cmp	r2, r0
    4dec:	d200      	bcs.n	4df0 <tcc_init+0x6c>
    4dee:	e1b7      	b.n	5160 <tcc_init+0x3dc>
    4df0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4df2:	4282      	cmp	r2, r0
    4df4:	d200      	bcs.n	4df8 <tcc_init+0x74>
    4df6:	e1b5      	b.n	5164 <tcc_init+0x3e0>
    4df8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4dfa:	4282      	cmp	r2, r0
    4dfc:	d200      	bcs.n	4e00 <tcc_init+0x7c>
    4dfe:	e1b3      	b.n	5168 <tcc_init+0x3e4>
    4e00:	2298      	movs	r2, #152	; 0x98
    4e02:	4694      	mov	ip, r2
    4e04:	44ac      	add	ip, r5
    4e06:	4662      	mov	r2, ip
    4e08:	9208      	str	r2, [sp, #32]
    4e0a:	2000      	movs	r0, #0
    4e0c:	e003      	b.n	4e16 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4e0e:	3001      	adds	r0, #1
    4e10:	3201      	adds	r2, #1
    4e12:	2808      	cmp	r0, #8
    4e14:	d008      	beq.n	4e28 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    4e16:	7816      	ldrb	r6, [r2, #0]
    4e18:	2e00      	cmp	r6, #0
    4e1a:	d0f8      	beq.n	4e0e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    4e1c:	4ea6      	ldr	r6, [pc, #664]	; (50b8 <tcc_init+0x334>)
    4e1e:	5c76      	ldrb	r6, [r6, r1]
    4e20:	4286      	cmp	r6, r0
    4e22:	dcf4      	bgt.n	4e0e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    4e24:	2017      	movs	r0, #23
    4e26:	e7c7      	b.n	4db8 <tcc_init+0x34>
    4e28:	2200      	movs	r2, #0
    4e2a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e2c:	2080      	movs	r0, #128	; 0x80
    4e2e:	0440      	lsls	r0, r0, #17
    4e30:	4684      	mov	ip, r0
    4e32:	e002      	b.n	4e3a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4e34:	3201      	adds	r2, #1
    4e36:	2a04      	cmp	r2, #4
    4e38:	d00e      	beq.n	4e58 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    4e3a:	18a8      	adds	r0, r5, r2
    4e3c:	7c00      	ldrb	r0, [r0, #16]
    4e3e:	2801      	cmp	r0, #1
    4e40:	d1f8      	bne.n	4e34 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    4e42:	489e      	ldr	r0, [pc, #632]	; (50bc <tcc_init+0x338>)
    4e44:	5c40      	ldrb	r0, [r0, r1]
    4e46:	4290      	cmp	r0, r2
    4e48:	da00      	bge.n	4e4c <tcc_init+0xc8>
    4e4a:	e18f      	b.n	516c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4e4c:	4660      	mov	r0, ip
    4e4e:	4090      	lsls	r0, r2
    4e50:	9e02      	ldr	r6, [sp, #8]
    4e52:	4306      	orrs	r6, r0
    4e54:	9602      	str	r6, [sp, #8]
    4e56:	e7ed      	b.n	4e34 <tcc_init+0xb0>
	if (config->run_in_standby) {
    4e58:	329d      	adds	r2, #157	; 0x9d
    4e5a:	5caa      	ldrb	r2, [r5, r2]
    4e5c:	2a00      	cmp	r2, #0
    4e5e:	d004      	beq.n	4e6a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4e60:	2280      	movs	r2, #128	; 0x80
    4e62:	0112      	lsls	r2, r2, #4
    4e64:	9902      	ldr	r1, [sp, #8]
    4e66:	4311      	orrs	r1, r2
    4e68:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    4e6a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4e6c:	1e51      	subs	r1, r2, #1
    4e6e:	418a      	sbcs	r2, r1
    4e70:	0092      	lsls	r2, r2, #2
    4e72:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4e74:	7a6a      	ldrb	r2, [r5, #9]
    4e76:	2a01      	cmp	r2, #1
    4e78:	d022      	beq.n	4ec0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    4e7a:	4a90      	ldr	r2, [pc, #576]	; (50bc <tcc_init+0x338>)
    4e7c:	5cd2      	ldrb	r2, [r2, r3]
    4e7e:	0011      	movs	r1, r2
    4e80:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    4e82:	2235      	movs	r2, #53	; 0x35
    4e84:	5caa      	ldrb	r2, [r5, r2]
    4e86:	428a      	cmp	r2, r1
    4e88:	d300      	bcc.n	4e8c <tcc_init+0x108>
    4e8a:	e179      	b.n	5180 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4e8c:	212c      	movs	r1, #44	; 0x2c
    4e8e:	5c69      	ldrb	r1, [r5, r1]
    4e90:	290f      	cmp	r1, #15
    4e92:	d900      	bls.n	4e96 <tcc_init+0x112>
    4e94:	e174      	b.n	5180 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4e96:	7b28      	ldrb	r0, [r5, #12]
    4e98:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4e9a:	7ae8      	ldrb	r0, [r5, #11]
    4e9c:	900b      	str	r0, [sp, #44]	; 0x2c
    4e9e:	202d      	movs	r0, #45	; 0x2d
    4ea0:	4682      	mov	sl, r0
    4ea2:	44aa      	add	sl, r5
    4ea4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4ea6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    4ea8:	ae0e      	add	r6, sp, #56	; 0x38
    4eaa:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4eac:	26c0      	movs	r6, #192	; 0xc0
    4eae:	0136      	lsls	r6, r6, #4
    4eb0:	46b1      	mov	r9, r6
    4eb2:	4684      	mov	ip, r0
    4eb4:	46a0      	mov	r8, r4
    4eb6:	0028      	movs	r0, r5
    4eb8:	4655      	mov	r5, sl
    4eba:	9309      	str	r3, [sp, #36]	; 0x24
    4ebc:	4682      	mov	sl, r0
    4ebe:	e035      	b.n	4f2c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    4ec0:	9906      	ldr	r1, [sp, #24]
    4ec2:	4311      	orrs	r1, r2
    4ec4:	9106      	str	r1, [sp, #24]
    4ec6:	e7d8      	b.n	4e7a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4ec8:	0292      	lsls	r2, r2, #10
    4eca:	464f      	mov	r7, r9
    4ecc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ece:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    4ed0:	7919      	ldrb	r1, [r3, #4]
    4ed2:	468b      	mov	fp, r1
    4ed4:	2103      	movs	r1, #3
    4ed6:	465f      	mov	r7, fp
    4ed8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4eda:	430a      	orrs	r2, r1
    4edc:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4ede:	795a      	ldrb	r2, [r3, #5]
    4ee0:	0152      	lsls	r2, r2, #5
    4ee2:	2160      	movs	r1, #96	; 0x60
    4ee4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ee6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    4ee8:	7999      	ldrb	r1, [r3, #6]
    4eea:	0209      	lsls	r1, r1, #8
    4eec:	26c0      	movs	r6, #192	; 0xc0
    4eee:	00b6      	lsls	r6, r6, #2
    4ef0:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4ef2:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4ef4:	79da      	ldrb	r2, [r3, #7]
    4ef6:	0312      	lsls	r2, r2, #12
    4ef8:	21e0      	movs	r1, #224	; 0xe0
    4efa:	01c9      	lsls	r1, r1, #7
    4efc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4efe:	4316      	orrs	r6, r2
    4f00:	4334      	orrs	r4, r6
    4f02:	9a03      	ldr	r2, [sp, #12]
    4f04:	4314      	orrs	r4, r2
    4f06:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    4f08:	4662      	mov	r2, ip
    4f0a:	9907      	ldr	r1, [sp, #28]
    4f0c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    4f0e:	2a04      	cmp	r2, #4
    4f10:	d02a      	beq.n	4f68 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    4f12:	7c9a      	ldrb	r2, [r3, #18]
    4f14:	9905      	ldr	r1, [sp, #20]
    4f16:	4291      	cmp	r1, r2
    4f18:	d800      	bhi.n	4f1c <tcc_init+0x198>
    4f1a:	e131      	b.n	5180 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4f1c:	7a59      	ldrb	r1, [r3, #9]
    4f1e:	350a      	adds	r5, #10
    4f20:	2304      	movs	r3, #4
    4f22:	469b      	mov	fp, r3
    4f24:	44dc      	add	ip, fp
    4f26:	290f      	cmp	r1, #15
    4f28:	d900      	bls.n	4f2c <tcc_init+0x1a8>
    4f2a:	e129      	b.n	5180 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4f2c:	0609      	lsls	r1, r1, #24
    4f2e:	23f0      	movs	r3, #240	; 0xf0
    4f30:	051b      	lsls	r3, r3, #20
    4f32:	4019      	ands	r1, r3
    4f34:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4f36:	782e      	ldrb	r6, [r5, #0]
    4f38:	0436      	lsls	r6, r6, #16
    4f3a:	20ff      	movs	r0, #255	; 0xff
    4f3c:	0400      	lsls	r0, r0, #16
    4f3e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4f40:	7868      	ldrb	r0, [r5, #1]
    4f42:	2480      	movs	r4, #128	; 0x80
    4f44:	2800      	cmp	r0, #0
    4f46:	d100      	bne.n	4f4a <tcc_init+0x1c6>
    4f48:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4f4a:	7898      	ldrb	r0, [r3, #2]
    4f4c:	2708      	movs	r7, #8
    4f4e:	9703      	str	r7, [sp, #12]
    4f50:	2800      	cmp	r0, #0
    4f52:	d101      	bne.n	4f58 <tcc_init+0x1d4>
    4f54:	9804      	ldr	r0, [sp, #16]
    4f56:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4f58:	78d8      	ldrb	r0, [r3, #3]
    4f5a:	4683      	mov	fp, r0
    4f5c:	2010      	movs	r0, #16
    4f5e:	465f      	mov	r7, fp
    4f60:	2f00      	cmp	r7, #0
    4f62:	d1b1      	bne.n	4ec8 <tcc_init+0x144>
    4f64:	9804      	ldr	r0, [sp, #16]
    4f66:	e7af      	b.n	4ec8 <tcc_init+0x144>
    4f68:	4644      	mov	r4, r8
    4f6a:	4655      	mov	r5, sl
    4f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    4f6e:	4a52      	ldr	r2, [pc, #328]	; (50b8 <tcc_init+0x334>)
    4f70:	5cd2      	ldrb	r2, [r2, r3]
    4f72:	4691      	mov	r9, r2
    4f74:	4651      	mov	r1, sl
    4f76:	3150      	adds	r1, #80	; 0x50
    4f78:	4650      	mov	r0, sl
    4f7a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    4f7c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4f7e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4f80:	2601      	movs	r6, #1
    4f82:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4f84:	2602      	movs	r6, #2
    4f86:	36ff      	adds	r6, #255	; 0xff
    4f88:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4f8a:	2680      	movs	r6, #128	; 0x80
    4f8c:	0276      	lsls	r6, r6, #9
    4f8e:	46b0      	mov	r8, r6
    4f90:	46a4      	mov	ip, r4
    4f92:	001c      	movs	r4, r3
    4f94:	464b      	mov	r3, r9
    4f96:	e00f      	b.n	4fb8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4f98:	7806      	ldrb	r6, [r0, #0]
    4f9a:	2e00      	cmp	r6, #0
    4f9c:	d007      	beq.n	4fae <tcc_init+0x22a>
			if (i >= ow_num) {
    4f9e:	4293      	cmp	r3, r2
    4fa0:	d800      	bhi.n	4fa4 <tcc_init+0x220>
    4fa2:	e0e7      	b.n	5174 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4fa4:	2e02      	cmp	r6, #2
    4fa6:	d014      	beq.n	4fd2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4fa8:	4656      	mov	r6, sl
    4faa:	4096      	lsls	r6, r2
    4fac:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4fae:	3201      	adds	r2, #1
    4fb0:	3101      	adds	r1, #1
    4fb2:	3002      	adds	r0, #2
    4fb4:	2a08      	cmp	r2, #8
    4fb6:	d010      	beq.n	4fda <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    4fb8:	780e      	ldrb	r6, [r1, #0]
    4fba:	2e00      	cmp	r6, #0
    4fbc:	d0ec      	beq.n	4f98 <tcc_init+0x214>
			if (i >= ow_num) {
    4fbe:	4293      	cmp	r3, r2
    4fc0:	d800      	bhi.n	4fc4 <tcc_init+0x240>
    4fc2:	e0d5      	b.n	5170 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4fc4:	4646      	mov	r6, r8
    4fc6:	4096      	lsls	r6, r2
    4fc8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4fca:	7806      	ldrb	r6, [r0, #0]
    4fcc:	2e00      	cmp	r6, #0
    4fce:	d1e9      	bne.n	4fa4 <tcc_init+0x220>
    4fd0:	e7ed      	b.n	4fae <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4fd2:	465e      	mov	r6, fp
    4fd4:	4096      	lsls	r6, r2
    4fd6:	4337      	orrs	r7, r6
    4fd8:	e7e9      	b.n	4fae <tcc_init+0x22a>
    4fda:	4699      	mov	r9, r3
    4fdc:	0023      	movs	r3, r4
    4fde:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fe0:	7e6a      	ldrb	r2, [r5, #25]
    4fe2:	0112      	lsls	r2, r2, #4
    4fe4:	2130      	movs	r1, #48	; 0x30
    4fe6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    4fe8:	7e28      	ldrb	r0, [r5, #24]
    4fea:	2207      	movs	r2, #7
    4fec:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4fee:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4ff0:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    4ff2:	2080      	movs	r0, #128	; 0x80
    4ff4:	0240      	lsls	r0, r0, #9
    4ff6:	000e      	movs	r6, r1
    4ff8:	e002      	b.n	5000 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4ffa:	3201      	adds	r2, #1
    4ffc:	2a04      	cmp	r2, #4
    4ffe:	d00b      	beq.n	5018 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5000:	18a9      	adds	r1, r5, r2
    5002:	7d09      	ldrb	r1, [r1, #20]
    5004:	2900      	cmp	r1, #0
    5006:	d0f8      	beq.n	4ffa <tcc_init+0x276>
			if (n >= cc_num) {
    5008:	9905      	ldr	r1, [sp, #20]
    500a:	4291      	cmp	r1, r2
    500c:	dc00      	bgt.n	5010 <tcc_init+0x28c>
    500e:	e0b3      	b.n	5178 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5010:	0001      	movs	r1, r0
    5012:	4091      	lsls	r1, r2
    5014:	430e      	orrs	r6, r1
    5016:	e7f0      	b.n	4ffa <tcc_init+0x276>
    5018:	46b2      	mov	sl, r6
    501a:	9801      	ldr	r0, [sp, #4]
    501c:	0002      	movs	r2, r0
    501e:	3204      	adds	r2, #4
    5020:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5022:	2100      	movs	r1, #0
    5024:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5026:	4282      	cmp	r2, r0
    5028:	d1fc      	bne.n	5024 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    502a:	2200      	movs	r2, #0
    502c:	9801      	ldr	r0, [sp, #4]
    502e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5030:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5032:	0099      	lsls	r1, r3, #2
    5034:	4a22      	ldr	r2, [pc, #136]	; (50c0 <tcc_init+0x33c>)
    5036:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5038:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    503a:	22a0      	movs	r2, #160	; 0xa0
    503c:	5ca9      	ldrb	r1, [r5, r2]
    503e:	3a64      	subs	r2, #100	; 0x64
    5040:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5042:	a90d      	add	r1, sp, #52	; 0x34
    5044:	7aaa      	ldrb	r2, [r5, #10]
    5046:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5048:	4a1e      	ldr	r2, [pc, #120]	; (50c4 <tcc_init+0x340>)
    504a:	5cd6      	ldrb	r6, [r2, r3]
    504c:	0030      	movs	r0, r6
    504e:	4b1e      	ldr	r3, [pc, #120]	; (50c8 <tcc_init+0x344>)
    5050:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5052:	0030      	movs	r0, r6
    5054:	4b1d      	ldr	r3, [pc, #116]	; (50cc <tcc_init+0x348>)
    5056:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5058:	464b      	mov	r3, r9
    505a:	2b00      	cmp	r3, #0
    505c:	dd3c      	ble.n	50d8 <tcc_init+0x354>
    505e:	002e      	movs	r6, r5
    5060:	3658      	adds	r6, #88	; 0x58
    5062:	3398      	adds	r3, #152	; 0x98
    5064:	4698      	mov	r8, r3
    5066:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5068:	2301      	movs	r3, #1
    506a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    506c:	46ab      	mov	fp, r5
    506e:	4645      	mov	r5, r8
    5070:	46a0      	mov	r8, r4
    5072:	9c08      	ldr	r4, [sp, #32]
    5074:	e003      	b.n	507e <tcc_init+0x2fa>
    5076:	3401      	adds	r4, #1
    5078:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    507a:	42ac      	cmp	r4, r5
    507c:	d02a      	beq.n	50d4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    507e:	7823      	ldrb	r3, [r4, #0]
    5080:	2b00      	cmp	r3, #0
    5082:	d0f8      	beq.n	5076 <tcc_init+0x2f2>
    5084:	ab0c      	add	r3, sp, #48	; 0x30
    5086:	464a      	mov	r2, r9
    5088:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    508a:	2300      	movs	r3, #0
    508c:	aa0c      	add	r2, sp, #48	; 0x30
    508e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5090:	0013      	movs	r3, r2
    5092:	2220      	movs	r2, #32
    5094:	18b2      	adds	r2, r6, r2
    5096:	7812      	ldrb	r2, [r2, #0]
    5098:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    509a:	464a      	mov	r2, r9
    509c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    509e:	7830      	ldrb	r0, [r6, #0]
    50a0:	0019      	movs	r1, r3
    50a2:	4b0b      	ldr	r3, [pc, #44]	; (50d0 <tcc_init+0x34c>)
    50a4:	4798      	blx	r3
    50a6:	e7e6      	b.n	5076 <tcc_init+0x2f2>
    50a8:	00004c05 	.word	0x00004c05
    50ac:	40000400 	.word	0x40000400
    50b0:	00009d60 	.word	0x00009d60
    50b4:	00009d74 	.word	0x00009d74
    50b8:	00009d80 	.word	0x00009d80
    50bc:	00009d6c 	.word	0x00009d6c
    50c0:	200005b0 	.word	0x200005b0
    50c4:	00009d70 	.word	0x00009d70
    50c8:	00004aad 	.word	0x00004aad
    50cc:	00004a21 	.word	0x00004a21
    50d0:	00004ba5 	.word	0x00004ba5
    50d4:	4644      	mov	r4, r8
    50d6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    50d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    50da:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    50dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    50de:	0212      	lsls	r2, r2, #8
    50e0:	4313      	orrs	r3, r2
    50e2:	9a02      	ldr	r2, [sp, #8]
    50e4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    50e6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    50e8:	2204      	movs	r2, #4
    50ea:	68a3      	ldr	r3, [r4, #8]
    50ec:	421a      	tst	r2, r3
    50ee:	d1fc      	bne.n	50ea <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    50f0:	23ff      	movs	r3, #255	; 0xff
    50f2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    50f4:	2204      	movs	r2, #4
    50f6:	68a3      	ldr	r3, [r4, #8]
    50f8:	421a      	tst	r2, r3
    50fa:	d1fc      	bne.n	50f6 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    50fc:	466b      	mov	r3, sp
    50fe:	7e1b      	ldrb	r3, [r3, #24]
    5100:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    5102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5104:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    5106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5108:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    510a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    510c:	4a1d      	ldr	r2, [pc, #116]	; (5184 <tcc_init+0x400>)
    510e:	68a3      	ldr	r3, [r4, #8]
    5110:	4213      	tst	r3, r2
    5112:	d1fc      	bne.n	510e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    5114:	4653      	mov	r3, sl
    5116:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5118:	2210      	movs	r2, #16
    511a:	68a3      	ldr	r3, [r4, #8]
    511c:	421a      	tst	r2, r3
    511e:	d1fc      	bne.n	511a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5120:	682b      	ldr	r3, [r5, #0]
    5122:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5124:	4a18      	ldr	r2, [pc, #96]	; (5188 <tcc_init+0x404>)
    5126:	68a3      	ldr	r3, [r4, #8]
    5128:	4213      	tst	r3, r2
    512a:	d1fc      	bne.n	5126 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    512c:	686b      	ldr	r3, [r5, #4]
    512e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5130:	9805      	ldr	r0, [sp, #20]
    5132:	2800      	cmp	r0, #0
    5134:	dd22      	ble.n	517c <tcc_init+0x3f8>
    5136:	351c      	adds	r5, #28
    5138:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    513a:	4e14      	ldr	r6, [pc, #80]	; (518c <tcc_init+0x408>)
    513c:	0032      	movs	r2, r6
    513e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5140:	68a3      	ldr	r3, [r4, #8]
    5142:	421a      	tst	r2, r3
    5144:	d1fc      	bne.n	5140 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    5146:	cd04      	ldmia	r5!, {r2}
    5148:	000b      	movs	r3, r1
    514a:	3310      	adds	r3, #16
    514c:	009b      	lsls	r3, r3, #2
    514e:	18e3      	adds	r3, r4, r3
    5150:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5152:	3101      	adds	r1, #1
    5154:	4288      	cmp	r0, r1
    5156:	dcf1      	bgt.n	513c <tcc_init+0x3b8>
	return STATUS_OK;
    5158:	2000      	movs	r0, #0
    515a:	e62d      	b.n	4db8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    515c:	2017      	movs	r0, #23
    515e:	e62b      	b.n	4db8 <tcc_init+0x34>
    5160:	2017      	movs	r0, #23
    5162:	e629      	b.n	4db8 <tcc_init+0x34>
    5164:	2017      	movs	r0, #23
    5166:	e627      	b.n	4db8 <tcc_init+0x34>
    5168:	2017      	movs	r0, #23
    516a:	e625      	b.n	4db8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    516c:	2017      	movs	r0, #23
    516e:	e623      	b.n	4db8 <tcc_init+0x34>
			if (i >= ow_num) {
    5170:	2017      	movs	r0, #23
    5172:	e621      	b.n	4db8 <tcc_init+0x34>
			if (i >= ow_num) {
    5174:	2017      	movs	r0, #23
    5176:	e61f      	b.n	4db8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5178:	2017      	movs	r0, #23
    517a:	e61d      	b.n	4db8 <tcc_init+0x34>
	return STATUS_OK;
    517c:	2000      	movs	r0, #0
    517e:	e61b      	b.n	4db8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5180:	2017      	movs	r0, #23
    5182:	e619      	b.n	4db8 <tcc_init+0x34>
    5184:	00020040 	.word	0x00020040
    5188:	00040080 	.word	0x00040080
    518c:	00080100 	.word	0x00080100

00005190 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5190:	0092      	lsls	r2, r2, #2
    5192:	1883      	adds	r3, r0, r2
    5194:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    5196:	4b03      	ldr	r3, [pc, #12]	; (51a4 <tcc_register_callback+0x14>)
    5198:	58d3      	ldr	r3, [r2, r3]
    519a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    519c:	4313      	orrs	r3, r2
    519e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    51a0:	2000      	movs	r0, #0
    51a2:	4770      	bx	lr
    51a4:	00009d84 	.word	0x00009d84

000051a8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	0004      	movs	r4, r0
    51ac:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    51ae:	6800      	ldr	r0, [r0, #0]
    51b0:	4b09      	ldr	r3, [pc, #36]	; (51d8 <tcc_enable_callback+0x30>)
    51b2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    51b4:	4b09      	ldr	r3, [pc, #36]	; (51dc <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    51b6:	5c1b      	ldrb	r3, [r3, r0]
    51b8:	221f      	movs	r2, #31
    51ba:	401a      	ands	r2, r3
    51bc:	2301      	movs	r3, #1
    51be:	4093      	lsls	r3, r2
    51c0:	4a07      	ldr	r2, [pc, #28]	; (51e0 <tcc_enable_callback+0x38>)
    51c2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    51c4:	00ad      	lsls	r5, r5, #2
    51c6:	4b07      	ldr	r3, [pc, #28]	; (51e4 <tcc_enable_callback+0x3c>)
    51c8:	58ea      	ldr	r2, [r5, r3]
    51ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51cc:	4313      	orrs	r3, r2
    51ce:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    51d0:	6823      	ldr	r3, [r4, #0]
    51d2:	629a      	str	r2, [r3, #40]	; 0x28
}
    51d4:	bd70      	pop	{r4, r5, r6, pc}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	00004c05 	.word	0x00004c05
    51dc:	00009db4 	.word	0x00009db4
    51e0:	e000e100 	.word	0xe000e100
    51e4:	00009d84 	.word	0x00009d84

000051e8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    51e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ea:	46c6      	mov	lr, r8
    51ec:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    51ee:	0080      	lsls	r0, r0, #2
    51f0:	4b0e      	ldr	r3, [pc, #56]	; (522c <_tcc_interrupt_handler+0x44>)
    51f2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    51f4:	683b      	ldr	r3, [r7, #0]
    51f6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    51f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    51fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    51fc:	4013      	ands	r3, r2
    51fe:	401e      	ands	r6, r3
    5200:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5202:	4b0b      	ldr	r3, [pc, #44]	; (5230 <_tcc_interrupt_handler+0x48>)
    5204:	4698      	mov	r8, r3
    5206:	e002      	b.n	520e <_tcc_interrupt_handler+0x26>
    5208:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    520a:	2c30      	cmp	r4, #48	; 0x30
    520c:	d00a      	beq.n	5224 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    520e:	4643      	mov	r3, r8
    5210:	58e5      	ldr	r5, [r4, r3]
    5212:	4235      	tst	r5, r6
    5214:	d0f8      	beq.n	5208 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5216:	193b      	adds	r3, r7, r4
    5218:	685b      	ldr	r3, [r3, #4]
    521a:	0038      	movs	r0, r7
    521c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    521e:	683b      	ldr	r3, [r7, #0]
    5220:	62dd      	str	r5, [r3, #44]	; 0x2c
    5222:	e7f1      	b.n	5208 <_tcc_interrupt_handler+0x20>
		}
	}
}
    5224:	bc04      	pop	{r2}
    5226:	4690      	mov	r8, r2
    5228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	200005b0 	.word	0x200005b0
    5230:	00009d84 	.word	0x00009d84

00005234 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5234:	b510      	push	{r4, lr}
    5236:	2000      	movs	r0, #0
    5238:	4b01      	ldr	r3, [pc, #4]	; (5240 <TCC0_Handler+0xc>)
    523a:	4798      	blx	r3
    523c:	bd10      	pop	{r4, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	000051e9 	.word	0x000051e9

00005244 <TCC1_Handler>:
    5244:	b510      	push	{r4, lr}
    5246:	2001      	movs	r0, #1
    5248:	4b01      	ldr	r3, [pc, #4]	; (5250 <TCC1_Handler+0xc>)
    524a:	4798      	blx	r3
    524c:	bd10      	pop	{r4, pc}
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	000051e9 	.word	0x000051e9

00005254 <TCC2_Handler>:
    5254:	b510      	push	{r4, lr}
    5256:	2002      	movs	r0, #2
    5258:	4b01      	ldr	r3, [pc, #4]	; (5260 <TCC2_Handler+0xc>)
    525a:	4798      	blx	r3
    525c:	bd10      	pop	{r4, pc}
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	000051e9 	.word	0x000051e9

00005264 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5264:	e7fe      	b.n	5264 <Dummy_Handler>
	...

00005268 <Reset_Handler>:
{
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    526a:	4a2a      	ldr	r2, [pc, #168]	; (5314 <Reset_Handler+0xac>)
    526c:	4b2a      	ldr	r3, [pc, #168]	; (5318 <Reset_Handler+0xb0>)
    526e:	429a      	cmp	r2, r3
    5270:	d011      	beq.n	5296 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5272:	001a      	movs	r2, r3
    5274:	4b29      	ldr	r3, [pc, #164]	; (531c <Reset_Handler+0xb4>)
    5276:	429a      	cmp	r2, r3
    5278:	d20d      	bcs.n	5296 <Reset_Handler+0x2e>
    527a:	4a29      	ldr	r2, [pc, #164]	; (5320 <Reset_Handler+0xb8>)
    527c:	3303      	adds	r3, #3
    527e:	1a9b      	subs	r3, r3, r2
    5280:	089b      	lsrs	r3, r3, #2
    5282:	3301      	adds	r3, #1
    5284:	009b      	lsls	r3, r3, #2
    5286:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5288:	4823      	ldr	r0, [pc, #140]	; (5318 <Reset_Handler+0xb0>)
    528a:	4922      	ldr	r1, [pc, #136]	; (5314 <Reset_Handler+0xac>)
    528c:	588c      	ldr	r4, [r1, r2]
    528e:	5084      	str	r4, [r0, r2]
    5290:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5292:	429a      	cmp	r2, r3
    5294:	d1fa      	bne.n	528c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5296:	4a23      	ldr	r2, [pc, #140]	; (5324 <Reset_Handler+0xbc>)
    5298:	4b23      	ldr	r3, [pc, #140]	; (5328 <Reset_Handler+0xc0>)
    529a:	429a      	cmp	r2, r3
    529c:	d20a      	bcs.n	52b4 <Reset_Handler+0x4c>
    529e:	43d3      	mvns	r3, r2
    52a0:	4921      	ldr	r1, [pc, #132]	; (5328 <Reset_Handler+0xc0>)
    52a2:	185b      	adds	r3, r3, r1
    52a4:	2103      	movs	r1, #3
    52a6:	438b      	bics	r3, r1
    52a8:	3304      	adds	r3, #4
    52aa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    52ac:	2100      	movs	r1, #0
    52ae:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    52b0:	4293      	cmp	r3, r2
    52b2:	d1fc      	bne.n	52ae <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    52b4:	4a1d      	ldr	r2, [pc, #116]	; (532c <Reset_Handler+0xc4>)
    52b6:	21ff      	movs	r1, #255	; 0xff
    52b8:	4b1d      	ldr	r3, [pc, #116]	; (5330 <Reset_Handler+0xc8>)
    52ba:	438b      	bics	r3, r1
    52bc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    52be:	39fd      	subs	r1, #253	; 0xfd
    52c0:	2390      	movs	r3, #144	; 0x90
    52c2:	005b      	lsls	r3, r3, #1
    52c4:	4a1b      	ldr	r2, [pc, #108]	; (5334 <Reset_Handler+0xcc>)
    52c6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    52c8:	4a1b      	ldr	r2, [pc, #108]	; (5338 <Reset_Handler+0xd0>)
    52ca:	78d3      	ldrb	r3, [r2, #3]
    52cc:	2503      	movs	r5, #3
    52ce:	43ab      	bics	r3, r5
    52d0:	2402      	movs	r4, #2
    52d2:	4323      	orrs	r3, r4
    52d4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    52d6:	78d3      	ldrb	r3, [r2, #3]
    52d8:	270c      	movs	r7, #12
    52da:	43bb      	bics	r3, r7
    52dc:	2608      	movs	r6, #8
    52de:	4333      	orrs	r3, r6
    52e0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    52e2:	4b16      	ldr	r3, [pc, #88]	; (533c <Reset_Handler+0xd4>)
    52e4:	7b98      	ldrb	r0, [r3, #14]
    52e6:	2230      	movs	r2, #48	; 0x30
    52e8:	4390      	bics	r0, r2
    52ea:	2220      	movs	r2, #32
    52ec:	4310      	orrs	r0, r2
    52ee:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    52f0:	7b99      	ldrb	r1, [r3, #14]
    52f2:	43b9      	bics	r1, r7
    52f4:	4331      	orrs	r1, r6
    52f6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    52f8:	7b9a      	ldrb	r2, [r3, #14]
    52fa:	43aa      	bics	r2, r5
    52fc:	4322      	orrs	r2, r4
    52fe:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5300:	4a0f      	ldr	r2, [pc, #60]	; (5340 <Reset_Handler+0xd8>)
    5302:	6853      	ldr	r3, [r2, #4]
    5304:	2180      	movs	r1, #128	; 0x80
    5306:	430b      	orrs	r3, r1
    5308:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    530a:	4b0e      	ldr	r3, [pc, #56]	; (5344 <Reset_Handler+0xdc>)
    530c:	4798      	blx	r3
        main();
    530e:	4b0e      	ldr	r3, [pc, #56]	; (5348 <Reset_Handler+0xe0>)
    5310:	4798      	blx	r3
    5312:	e7fe      	b.n	5312 <Reset_Handler+0xaa>
    5314:	0000a254 	.word	0x0000a254
    5318:	20000000 	.word	0x20000000
    531c:	200001dc 	.word	0x200001dc
    5320:	20000004 	.word	0x20000004
    5324:	200001dc 	.word	0x200001dc
    5328:	20000624 	.word	0x20000624
    532c:	e000ed00 	.word	0xe000ed00
    5330:	00000000 	.word	0x00000000
    5334:	41007000 	.word	0x41007000
    5338:	41005000 	.word	0x41005000
    533c:	41004800 	.word	0x41004800
    5340:	41004000 	.word	0x41004000
    5344:	00006d09 	.word	0x00006d09
    5348:	0000589d 	.word	0x0000589d

0000534c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    534c:	b5f0      	push	{r4, r5, r6, r7, lr}
    534e:	46c6      	mov	lr, r8
    5350:	b500      	push	{lr}
    5352:	000c      	movs	r4, r1
    5354:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5356:	2800      	cmp	r0, #0
    5358:	d10f      	bne.n	537a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    535a:	2a00      	cmp	r2, #0
    535c:	dd11      	ble.n	5382 <_read+0x36>
    535e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5360:	4e09      	ldr	r6, [pc, #36]	; (5388 <_read+0x3c>)
    5362:	4d0a      	ldr	r5, [pc, #40]	; (538c <_read+0x40>)
    5364:	6830      	ldr	r0, [r6, #0]
    5366:	0021      	movs	r1, r4
    5368:	682b      	ldr	r3, [r5, #0]
    536a:	4798      	blx	r3
		ptr++;
    536c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    536e:	42bc      	cmp	r4, r7
    5370:	d1f8      	bne.n	5364 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    5372:	4640      	mov	r0, r8
    5374:	bc04      	pop	{r2}
    5376:	4690      	mov	r8, r2
    5378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    537a:	2301      	movs	r3, #1
    537c:	425b      	negs	r3, r3
    537e:	4698      	mov	r8, r3
    5380:	e7f7      	b.n	5372 <_read+0x26>
	for (; len > 0; --len) {
    5382:	4680      	mov	r8, r0
    5384:	e7f5      	b.n	5372 <_read+0x26>
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	200005c4 	.word	0x200005c4
    538c:	200005bc 	.word	0x200005bc

00005390 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5390:	b5f0      	push	{r4, r5, r6, r7, lr}
    5392:	46c6      	mov	lr, r8
    5394:	b500      	push	{lr}
    5396:	000e      	movs	r6, r1
    5398:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    539a:	3801      	subs	r0, #1
    539c:	2802      	cmp	r0, #2
    539e:	d810      	bhi.n	53c2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    53a0:	2a00      	cmp	r2, #0
    53a2:	d011      	beq.n	53c8 <_write+0x38>
    53a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    53a6:	4b0c      	ldr	r3, [pc, #48]	; (53d8 <_write+0x48>)
    53a8:	4698      	mov	r8, r3
    53aa:	4f0c      	ldr	r7, [pc, #48]	; (53dc <_write+0x4c>)
    53ac:	4643      	mov	r3, r8
    53ae:	6818      	ldr	r0, [r3, #0]
    53b0:	5d31      	ldrb	r1, [r6, r4]
    53b2:	683b      	ldr	r3, [r7, #0]
    53b4:	4798      	blx	r3
    53b6:	2800      	cmp	r0, #0
    53b8:	db08      	blt.n	53cc <_write+0x3c>
			return -1;
		}
		++nChars;
    53ba:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    53bc:	42a5      	cmp	r5, r4
    53be:	d1f5      	bne.n	53ac <_write+0x1c>
    53c0:	e006      	b.n	53d0 <_write+0x40>
		return -1;
    53c2:	2401      	movs	r4, #1
    53c4:	4264      	negs	r4, r4
    53c6:	e003      	b.n	53d0 <_write+0x40>
	for (; len != 0; --len) {
    53c8:	0014      	movs	r4, r2
    53ca:	e001      	b.n	53d0 <_write+0x40>
			return -1;
    53cc:	2401      	movs	r4, #1
    53ce:	4264      	negs	r4, r4
	}
	return nChars;
}
    53d0:	0020      	movs	r0, r4
    53d2:	bc04      	pop	{r2}
    53d4:	4690      	mov	r8, r2
    53d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d8:	200005c4 	.word	0x200005c4
    53dc:	200005c0 	.word	0x200005c0

000053e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    53e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    53e2:	4a06      	ldr	r2, [pc, #24]	; (53fc <_sbrk+0x1c>)
    53e4:	6812      	ldr	r2, [r2, #0]
    53e6:	2a00      	cmp	r2, #0
    53e8:	d004      	beq.n	53f4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    53ea:	4a04      	ldr	r2, [pc, #16]	; (53fc <_sbrk+0x1c>)
    53ec:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    53ee:	18c3      	adds	r3, r0, r3
    53f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    53f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    53f4:	4902      	ldr	r1, [pc, #8]	; (5400 <_sbrk+0x20>)
    53f6:	4a01      	ldr	r2, [pc, #4]	; (53fc <_sbrk+0x1c>)
    53f8:	6011      	str	r1, [r2, #0]
    53fa:	e7f6      	b.n	53ea <_sbrk+0xa>
    53fc:	2000024c 	.word	0x2000024c
    5400:	20002628 	.word	0x20002628

00005404 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5404:	2001      	movs	r0, #1
    5406:	4240      	negs	r0, r0
    5408:	4770      	bx	lr

0000540a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    540a:	2380      	movs	r3, #128	; 0x80
    540c:	019b      	lsls	r3, r3, #6
    540e:	604b      	str	r3, [r1, #4]

	return 0;
}
    5410:	2000      	movs	r0, #0
    5412:	4770      	bx	lr

00005414 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5414:	2001      	movs	r0, #1
    5416:	4770      	bx	lr

00005418 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5418:	2000      	movs	r0, #0
    541a:	4770      	bx	lr

0000541c <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    541c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    541e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5420:	2200      	movs	r2, #0
    5422:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    5424:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    5426:	9b00      	ldr	r3, [sp, #0]
    5428:	60c3      	str	r3, [r0, #12]
}
    542a:	4770      	bx	lr

0000542c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    542c:	b510      	push	{r4, lr}
    542e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    5430:	6842      	ldr	r2, [r0, #4]
    5432:	2a00      	cmp	r2, #0
    5434:	d100      	bne.n	5438 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    5436:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    5438:	6901      	ldr	r1, [r0, #16]
    543a:	68c0      	ldr	r0, [r0, #12]
    543c:	68a3      	ldr	r3, [r4, #8]
    543e:	4798      	blx	r3
		writer->written = 0;
    5440:	2300      	movs	r3, #0
    5442:	6063      	str	r3, [r4, #4]
}
    5444:	e7f7      	b.n	5436 <stream_writer_send_remain+0xa>
	...

00005448 <stream_writer_send_8>:
{
    5448:	b570      	push	{r4, r5, r6, lr}
    544a:	0004      	movs	r4, r0
    544c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    544e:	6803      	ldr	r3, [r0, #0]
    5450:	6842      	ldr	r2, [r0, #4]
    5452:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    5454:	2b00      	cmp	r3, #0
    5456:	dd05      	ble.n	5464 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    5458:	6922      	ldr	r2, [r4, #16]
    545a:	6863      	ldr	r3, [r4, #4]
    545c:	1c59      	adds	r1, r3, #1
    545e:	6061      	str	r1, [r4, #4]
    5460:	54d5      	strb	r5, [r2, r3]
}
    5462:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    5464:	4b01      	ldr	r3, [pc, #4]	; (546c <stream_writer_send_8+0x24>)
    5466:	4798      	blx	r3
    5468:	e7f6      	b.n	5458 <stream_writer_send_8+0x10>
    546a:	46c0      	nop			; (mov r8, r8)
    546c:	0000542d 	.word	0x0000542d

00005470 <stream_writer_send_16BE>:
{
    5470:	b570      	push	{r4, r5, r6, lr}
    5472:	0006      	movs	r6, r0
    5474:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    5476:	1209      	asrs	r1, r1, #8
    5478:	4d02      	ldr	r5, [pc, #8]	; (5484 <stream_writer_send_16BE+0x14>)
    547a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    547c:	b261      	sxtb	r1, r4
    547e:	0030      	movs	r0, r6
    5480:	47a8      	blx	r5
}
    5482:	bd70      	pop	{r4, r5, r6, pc}
    5484:	00005449 	.word	0x00005449

00005488 <stream_writer_send_buffer>:
{
    5488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    548a:	0006      	movs	r6, r0
    548c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    548e:	2a00      	cmp	r2, #0
    5490:	d008      	beq.n	54a4 <stream_writer_send_buffer+0x1c>
    5492:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    5494:	4f04      	ldr	r7, [pc, #16]	; (54a8 <stream_writer_send_buffer+0x20>)
    5496:	2100      	movs	r1, #0
    5498:	5661      	ldrsb	r1, [r4, r1]
    549a:	0030      	movs	r0, r6
    549c:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    549e:	3401      	adds	r4, #1
    54a0:	42a5      	cmp	r5, r4
    54a2:	d1f8      	bne.n	5496 <stream_writer_send_buffer+0xe>
}
    54a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54a6:	46c0      	nop			; (mov r8, r8)
    54a8:	00005449 	.word	0x00005449

000054ac <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    54ac:	4a02      	ldr	r2, [pc, #8]	; (54b8 <sw_timer_tcc_callback+0xc>)
    54ae:	6813      	ldr	r3, [r2, #0]
    54b0:	3301      	adds	r3, #1
    54b2:	6013      	str	r3, [r2, #0]
}
    54b4:	4770      	bx	lr
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	20000250 	.word	0x20000250

000054bc <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    54bc:	2364      	movs	r3, #100	; 0x64
    54be:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    54c0:	2300      	movs	r3, #0
    54c2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    54c4:	7043      	strb	r3, [r0, #1]
}
    54c6:	4770      	bx	lr

000054c8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    54c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ca:	46c6      	mov	lr, r8
    54cc:	b500      	push	{lr}
    54ce:	b0ac      	sub	sp, #176	; 0xb0
    54d0:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    54d2:	466e      	mov	r6, sp
    54d4:	4b1d      	ldr	r3, [pc, #116]	; (554c <sw_timer_init+0x84>)
    54d6:	466a      	mov	r2, sp
    54d8:	cb92      	ldmia	r3!, {r1, r4, r7}
    54da:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    54dc:	886b      	ldrh	r3, [r5, #2]
    54de:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    54e0:	3014      	adds	r0, #20
    54e2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    54e4:	782b      	ldrb	r3, [r5, #0]
    54e6:	009b      	lsls	r3, r3, #2
    54e8:	5999      	ldr	r1, [r3, r6]
    54ea:	0017      	movs	r7, r2
    54ec:	0010      	movs	r0, r2
    54ee:	4b18      	ldr	r3, [pc, #96]	; (5550 <sw_timer_init+0x88>)
    54f0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    54f2:	2000      	movs	r0, #0
    54f4:	4b17      	ldr	r3, [pc, #92]	; (5554 <sw_timer_init+0x8c>)
    54f6:	4798      	blx	r3
    54f8:	4b17      	ldr	r3, [pc, #92]	; (5558 <sw_timer_init+0x90>)
    54fa:	7a1b      	ldrb	r3, [r3, #8]
    54fc:	b2db      	uxtb	r3, r3
    54fe:	40d8      	lsrs	r0, r3
    5500:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    5502:	8869      	ldrh	r1, [r5, #2]
    5504:	20fa      	movs	r0, #250	; 0xfa
    5506:	0200      	lsls	r0, r0, #8
    5508:	4b14      	ldr	r3, [pc, #80]	; (555c <sw_timer_init+0x94>)
    550a:	4798      	blx	r3
    550c:	0001      	movs	r1, r0
    550e:	4640      	mov	r0, r8
    5510:	4b13      	ldr	r3, [pc, #76]	; (5560 <sw_timer_init+0x98>)
    5512:	4798      	blx	r3
    5514:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    5516:	2305      	movs	r3, #5
    5518:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    551a:	782b      	ldrb	r3, [r5, #0]
    551c:	009b      	lsls	r3, r3, #2
    551e:	5999      	ldr	r1, [r3, r6]
    5520:	003a      	movs	r2, r7
    5522:	0020      	movs	r0, r4
    5524:	4b0f      	ldr	r3, [pc, #60]	; (5564 <sw_timer_init+0x9c>)
    5526:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5528:	786a      	ldrb	r2, [r5, #1]
    552a:	3208      	adds	r2, #8
    552c:	b2d2      	uxtb	r2, r2
    552e:	490e      	ldr	r1, [pc, #56]	; (5568 <sw_timer_init+0xa0>)
    5530:	0020      	movs	r0, r4
    5532:	4b0e      	ldr	r3, [pc, #56]	; (556c <sw_timer_init+0xa4>)
    5534:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5536:	7869      	ldrb	r1, [r5, #1]
    5538:	3108      	adds	r1, #8
    553a:	b2c9      	uxtb	r1, r1
    553c:	0020      	movs	r0, r4
    553e:	4b0c      	ldr	r3, [pc, #48]	; (5570 <sw_timer_init+0xa8>)
    5540:	4798      	blx	r3
}
    5542:	b02c      	add	sp, #176	; 0xb0
    5544:	bc04      	pop	{r2}
    5546:	4690      	mov	r8, r2
    5548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	00009db8 	.word	0x00009db8
    5550:	00004c39 	.word	0x00004c39
    5554:	00004995 	.word	0x00004995
    5558:	40000400 	.word	0x40000400
    555c:	00006add 	.word	0x00006add
    5560:	000069c9 	.word	0x000069c9
    5564:	00004d85 	.word	0x00004d85
    5568:	000054ad 	.word	0x000054ad
    556c:	00005191 	.word	0x00005191
    5570:	000051a9 	.word	0x000051a9

00005574 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5574:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5576:	2102      	movs	r1, #2
    5578:	6893      	ldr	r3, [r2, #8]
    557a:	4219      	tst	r1, r3
    557c:	d1fc      	bne.n	5578 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    557e:	6813      	ldr	r3, [r2, #0]
    5580:	2102      	movs	r1, #2
    5582:	430b      	orrs	r3, r1
    5584:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    5586:	4770      	bx	lr

00005588 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    5588:	b570      	push	{r4, r5, r6, lr}
    558a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    558c:	7805      	ldrb	r5, [r0, #0]
    558e:	07e8      	lsls	r0, r5, #31
    5590:	d502      	bpl.n	5598 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    5592:	2001      	movs	r0, #1
    5594:	4240      	negs	r0, r0
}
    5596:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    5598:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    559a:	0029      	movs	r1, r5
    559c:	2002      	movs	r0, #2
    559e:	4381      	bics	r1, r0
    55a0:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    55a2:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    55a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    55a6:	0018      	movs	r0, r3
    55a8:	4b04      	ldr	r3, [pc, #16]	; (55bc <sw_timer_register_callback+0x34>)
    55aa:	4798      	blx	r3
    55ac:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    55ae:	7823      	ldrb	r3, [r4, #0]
    55b0:	2201      	movs	r2, #1
    55b2:	4313      	orrs	r3, r2
    55b4:	7023      	strb	r3, [r4, #0]
			return index;
    55b6:	2000      	movs	r0, #0
    55b8:	e7ed      	b.n	5596 <sw_timer_register_callback+0xe>
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	000069c9 	.word	0x000069c9

000055c0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    55c0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    55c2:	008b      	lsls	r3, r1, #2
    55c4:	185d      	adds	r5, r3, r1
    55c6:	00ad      	lsls	r5, r5, #2
    55c8:	5c29      	ldrb	r1, [r5, r0]
    55ca:	2602      	movs	r6, #2
    55cc:	4331      	orrs	r1, r6
    55ce:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    55d0:	1944      	adds	r4, r0, r5
    55d2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    55d4:	0010      	movs	r0, r2
    55d6:	4b03      	ldr	r3, [pc, #12]	; (55e4 <sw_timer_enable_callback+0x24>)
    55d8:	4798      	blx	r3
    55da:	4b03      	ldr	r3, [pc, #12]	; (55e8 <sw_timer_enable_callback+0x28>)
    55dc:	681b      	ldr	r3, [r3, #0]
    55de:	18c0      	adds	r0, r0, r3
    55e0:	6120      	str	r0, [r4, #16]
}
    55e2:	bd70      	pop	{r4, r5, r6, pc}
    55e4:	000069c9 	.word	0x000069c9
    55e8:	20000250 	.word	0x20000250

000055ec <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    55ec:	008b      	lsls	r3, r1, #2
    55ee:	1859      	adds	r1, r3, r1
    55f0:	0089      	lsls	r1, r1, #2
    55f2:	5c0b      	ldrb	r3, [r1, r0]
    55f4:	2202      	movs	r2, #2
    55f6:	4393      	bics	r3, r2
    55f8:	540b      	strb	r3, [r1, r0]
}
    55fa:	4770      	bx	lr

000055fc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    5600:	7803      	ldrb	r3, [r0, #0]
    5602:	07db      	lsls	r3, r3, #31
    5604:	d507      	bpl.n	5616 <sw_timer_task+0x1a>
    5606:	7803      	ldrb	r3, [r0, #0]
    5608:	079b      	lsls	r3, r3, #30
    560a:	d504      	bpl.n	5616 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    560c:	4b11      	ldr	r3, [pc, #68]	; (5654 <sw_timer_task+0x58>)
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	6902      	ldr	r2, [r0, #16]
    5612:	1ad3      	subs	r3, r2, r3
    5614:	d400      	bmi.n	5618 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    5616:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    5618:	7803      	ldrb	r3, [r0, #0]
    561a:	075b      	lsls	r3, r3, #29
    561c:	d4fb      	bmi.n	5616 <sw_timer_task+0x1a>
				handler->busy = 1;
    561e:	7803      	ldrb	r3, [r0, #0]
    5620:	2204      	movs	r2, #4
    5622:	4313      	orrs	r3, r2
    5624:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    5626:	68c3      	ldr	r3, [r0, #12]
    5628:	6882      	ldr	r2, [r0, #8]
    562a:	2100      	movs	r1, #0
    562c:	6845      	ldr	r5, [r0, #4]
    562e:	47a8      	blx	r5
				if (handler->period > 0) {
    5630:	68e3      	ldr	r3, [r4, #12]
    5632:	2b00      	cmp	r3, #0
    5634:	d008      	beq.n	5648 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    5636:	4a07      	ldr	r2, [pc, #28]	; (5654 <sw_timer_task+0x58>)
    5638:	6812      	ldr	r2, [r2, #0]
    563a:	18d3      	adds	r3, r2, r3
    563c:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    563e:	7823      	ldrb	r3, [r4, #0]
    5640:	2204      	movs	r2, #4
    5642:	4393      	bics	r3, r2
    5644:	7023      	strb	r3, [r4, #0]
}
    5646:	e7e6      	b.n	5616 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    5648:	7823      	ldrb	r3, [r4, #0]
    564a:	2202      	movs	r2, #2
    564c:	4393      	bics	r3, r2
    564e:	7023      	strb	r3, [r4, #0]
    5650:	e7f5      	b.n	563e <sw_timer_task+0x42>
    5652:	46c0      	nop			; (mov r8, r8)
    5654:	20000250 	.word	0x20000250

00005658 <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    5658:	4b05      	ldr	r3, [pc, #20]	; (5670 <uart_callback+0x18>)
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	2b3f      	cmp	r3, #63	; 0x3f
    565e:	dc06      	bgt.n	566e <uart_callback+0x16>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    5660:	1c59      	adds	r1, r3, #1
    5662:	4a03      	ldr	r2, [pc, #12]	; (5670 <uart_callback+0x18>)
    5664:	6011      	str	r1, [r2, #0]
    5666:	4a03      	ldr	r2, [pc, #12]	; (5674 <uart_callback+0x1c>)
    5668:	8811      	ldrh	r1, [r2, #0]
    566a:	4a03      	ldr	r2, [pc, #12]	; (5678 <uart_callback+0x20>)
    566c:	54d1      	strb	r1, [r2, r3]
	}
}
    566e:	4770      	bx	lr
    5670:	200003fc 	.word	0x200003fc
    5674:	20000400 	.word	0x20000400
    5678:	200003bc 	.word	0x200003bc

0000567c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    567c:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    567e:	4b01      	ldr	r3, [pc, #4]	; (5684 <socket_resolve_handler+0x8>)
    5680:	4798      	blx	r3
}
    5682:	bd10      	pop	{r4, pc}
    5684:	00005d15 	.word	0x00005d15

00005688 <socket_event_handler>:
{
    5688:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    568a:	4b01      	ldr	r3, [pc, #4]	; (5690 <socket_event_handler+0x8>)
    568c:	4798      	blx	r3
}
    568e:	bd10      	pop	{r4, pc}
    5690:	000068b5 	.word	0x000068b5

00005694 <wifi_callback>:
{
    5694:	b510      	push	{r4, lr}
    5696:	b082      	sub	sp, #8
	switch (msg_type) {
    5698:	282c      	cmp	r0, #44	; 0x2c
    569a:	d003      	beq.n	56a4 <wifi_callback+0x10>
    569c:	2832      	cmp	r0, #50	; 0x32
    569e:	d01c      	beq.n	56da <wifi_callback+0x46>
}
    56a0:	b002      	add	sp, #8
    56a2:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    56a4:	780b      	ldrb	r3, [r1, #0]
    56a6:	2b01      	cmp	r3, #1
    56a8:	d011      	beq.n	56ce <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    56aa:	2b00      	cmp	r3, #0
    56ac:	d1f8      	bne.n	56a0 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    56ae:	4812      	ldr	r0, [pc, #72]	; (56f8 <wifi_callback+0x64>)
    56b0:	4b12      	ldr	r3, [pc, #72]	; (56fc <wifi_callback+0x68>)
    56b2:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    56b4:	23ff      	movs	r3, #255	; 0xff
    56b6:	9300      	str	r3, [sp, #0]
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <wifi_callback+0x6c>)
    56ba:	2202      	movs	r2, #2
    56bc:	2108      	movs	r1, #8
    56be:	4811      	ldr	r0, [pc, #68]	; (5704 <wifi_callback+0x70>)
    56c0:	4c11      	ldr	r4, [pc, #68]	; (5708 <wifi_callback+0x74>)
    56c2:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    56c4:	2101      	movs	r1, #1
    56c6:	4811      	ldr	r0, [pc, #68]	; (570c <wifi_callback+0x78>)
    56c8:	4b11      	ldr	r3, [pc, #68]	; (5710 <wifi_callback+0x7c>)
    56ca:	4798      	blx	r3
    56cc:	e7e8      	b.n	56a0 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    56ce:	4811      	ldr	r0, [pc, #68]	; (5714 <wifi_callback+0x80>)
    56d0:	4b0a      	ldr	r3, [pc, #40]	; (56fc <wifi_callback+0x68>)
    56d2:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    56d4:	4b10      	ldr	r3, [pc, #64]	; (5718 <wifi_callback+0x84>)
    56d6:	4798      	blx	r3
    56d8:	e7e2      	b.n	56a0 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    56da:	788b      	ldrb	r3, [r1, #2]
    56dc:	784a      	ldrb	r2, [r1, #1]
    56de:	7808      	ldrb	r0, [r1, #0]
    56e0:	78c9      	ldrb	r1, [r1, #3]
    56e2:	9100      	str	r1, [sp, #0]
    56e4:	0001      	movs	r1, r0
    56e6:	480d      	ldr	r0, [pc, #52]	; (571c <wifi_callback+0x88>)
    56e8:	4c0d      	ldr	r4, [pc, #52]	; (5720 <wifi_callback+0x8c>)
    56ea:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    56ec:	490d      	ldr	r1, [pc, #52]	; (5724 <wifi_callback+0x90>)
    56ee:	4807      	ldr	r0, [pc, #28]	; (570c <wifi_callback+0x78>)
    56f0:	4b0d      	ldr	r3, [pc, #52]	; (5728 <wifi_callback+0x94>)
    56f2:	4798      	blx	r3
}
    56f4:	e7d4      	b.n	56a0 <wifi_callback+0xc>
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	0000a01c 	.word	0x0000a01c
    56fc:	00007019 	.word	0x00007019
    5700:	0000a030 	.word	0x0000a030
    5704:	0000a03c 	.word	0x0000a03c
    5708:	000014e1 	.word	0x000014e1
    570c:	20000308 	.word	0x20000308
    5710:	00006575 	.word	0x00006575
    5714:	0000a008 	.word	0x0000a008
    5718:	000014fd 	.word	0x000014fd
    571c:	0000a044 	.word	0x0000a044
    5720:	00006efd 	.word	0x00006efd
    5724:	00009f08 	.word	0x00009f08
    5728:	00005d69 	.word	0x00005d69

0000572c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    572c:	b570      	push	{r4, r5, r6, lr}
    572e:	b082      	sub	sp, #8
    5730:	0005      	movs	r5, r0
    5732:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5734:	2200      	movs	r2, #0
    5736:	466b      	mov	r3, sp
    5738:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    573a:	4c06      	ldr	r4, [pc, #24]	; (5754 <usart_serial_getchar+0x28>)
    573c:	466b      	mov	r3, sp
    573e:	1d99      	adds	r1, r3, #6
    5740:	0028      	movs	r0, r5
    5742:	47a0      	blx	r4
    5744:	2800      	cmp	r0, #0
    5746:	d1f9      	bne.n	573c <usart_serial_getchar+0x10>

	*c = temp;
    5748:	466b      	mov	r3, sp
    574a:	3306      	adds	r3, #6
    574c:	881b      	ldrh	r3, [r3, #0]
    574e:	7033      	strb	r3, [r6, #0]
}
    5750:	b002      	add	sp, #8
    5752:	bd70      	pop	{r4, r5, r6, pc}
    5754:	000041ed 	.word	0x000041ed

00005758 <usart_serial_putchar>:
{
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    575c:	b28c      	uxth	r4, r1
    575e:	4e03      	ldr	r6, [pc, #12]	; (576c <usart_serial_putchar+0x14>)
    5760:	0021      	movs	r1, r4
    5762:	0028      	movs	r0, r5
    5764:	47b0      	blx	r6
    5766:	2800      	cmp	r0, #0
    5768:	d1fa      	bne.n	5760 <usart_serial_putchar+0x8>
}
    576a:	bd70      	pop	{r4, r5, r6, pc}
    576c:	000041c1 	.word	0x000041c1

00005770 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5770:	b5f0      	push	{r4, r5, r6, r7, lr}
    5772:	b087      	sub	sp, #28
    5774:	0005      	movs	r5, r0
    5776:	0014      	movs	r4, r2
	switch (type) {
    5778:	2901      	cmp	r1, #1
    577a:	d04b      	beq.n	5814 <mqtt_callback+0xa4>
    577c:	dd2d      	ble.n	57da <mqtt_callback+0x6a>
    577e:	2905      	cmp	r1, #5
    5780:	d05d      	beq.n	583e <mqtt_callback+0xce>
    5782:	2906      	cmp	r1, #6
    5784:	d164      	bne.n	5850 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    5786:	6810      	ldr	r0, [r2, #0]
    5788:	2800      	cmp	r0, #0
    578a:	d061      	beq.n	5850 <mqtt_callback+0xe0>
    578c:	6893      	ldr	r3, [r2, #8]
    578e:	2b00      	cmp	r3, #0
    5790:	d05e      	beq.n	5850 <mqtt_callback+0xe0>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    5792:	2217      	movs	r2, #23
    5794:	492f      	ldr	r1, [pc, #188]	; (5854 <mqtt_callback+0xe4>)
    5796:	4b30      	ldr	r3, [pc, #192]	; (5858 <mqtt_callback+0xe8>)
    5798:	4798      	blx	r3
    579a:	1e05      	subs	r5, r0, #0
    579c:	d158      	bne.n	5850 <mqtt_callback+0xe0>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    579e:	6863      	ldr	r3, [r4, #4]
    57a0:	2b17      	cmp	r3, #23
    57a2:	dd08      	ble.n	57b6 <mqtt_callback+0x46>
    57a4:	2617      	movs	r6, #23
					printf("%c", data->recv_publish.topic[i]);
    57a6:	4f2d      	ldr	r7, [pc, #180]	; (585c <mqtt_callback+0xec>)
    57a8:	6823      	ldr	r3, [r4, #0]
    57aa:	5d98      	ldrb	r0, [r3, r6]
    57ac:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    57ae:	3601      	adds	r6, #1
    57b0:	6863      	ldr	r3, [r4, #4]
    57b2:	42b3      	cmp	r3, r6
    57b4:	dcf8      	bgt.n	57a8 <mqtt_callback+0x38>
				}
				printf(" >> ");
    57b6:	482a      	ldr	r0, [pc, #168]	; (5860 <mqtt_callback+0xf0>)
    57b8:	4b2a      	ldr	r3, [pc, #168]	; (5864 <mqtt_callback+0xf4>)
    57ba:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    57bc:	68e3      	ldr	r3, [r4, #12]
    57be:	2b00      	cmp	r3, #0
    57c0:	dd07      	ble.n	57d2 <mqtt_callback+0x62>
					printf("%c", data->recv_publish.msg[i]);
    57c2:	4e26      	ldr	r6, [pc, #152]	; (585c <mqtt_callback+0xec>)
    57c4:	68a3      	ldr	r3, [r4, #8]
    57c6:	5d58      	ldrb	r0, [r3, r5]
    57c8:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    57ca:	3501      	adds	r5, #1
    57cc:	68e3      	ldr	r3, [r4, #12]
    57ce:	42ab      	cmp	r3, r5
    57d0:	dcf8      	bgt.n	57c4 <mqtt_callback+0x54>
				}
				printf("\r\n");
    57d2:	4825      	ldr	r0, [pc, #148]	; (5868 <mqtt_callback+0xf8>)
    57d4:	4b25      	ldr	r3, [pc, #148]	; (586c <mqtt_callback+0xfc>)
    57d6:	4798      	blx	r3
    57d8:	e03a      	b.n	5850 <mqtt_callback+0xe0>
	switch (type) {
    57da:	2900      	cmp	r1, #0
    57dc:	d138      	bne.n	5850 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
    57de:	6813      	ldr	r3, [r2, #0]
    57e0:	2b00      	cmp	r3, #0
    57e2:	db0d      	blt.n	5800 <mqtt_callback+0x90>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
    57e4:	2300      	movs	r3, #0
    57e6:	9305      	str	r3, [sp, #20]
    57e8:	9304      	str	r3, [sp, #16]
    57ea:	9303      	str	r3, [sp, #12]
    57ec:	9302      	str	r3, [sp, #8]
    57ee:	9301      	str	r3, [sp, #4]
    57f0:	4b1f      	ldr	r3, [pc, #124]	; (5870 <mqtt_callback+0x100>)
    57f2:	9300      	str	r3, [sp, #0]
    57f4:	2300      	movs	r3, #0
    57f6:	2200      	movs	r2, #0
    57f8:	2101      	movs	r1, #1
    57fa:	4c1e      	ldr	r4, [pc, #120]	; (5874 <mqtt_callback+0x104>)
    57fc:	47a0      	blx	r4
    57fe:	e027      	b.n	5850 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    5800:	4c1d      	ldr	r4, [pc, #116]	; (5878 <mqtt_callback+0x108>)
    5802:	0021      	movs	r1, r4
    5804:	481d      	ldr	r0, [pc, #116]	; (587c <mqtt_callback+0x10c>)
    5806:	4b17      	ldr	r3, [pc, #92]	; (5864 <mqtt_callback+0xf4>)
    5808:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    580a:	0021      	movs	r1, r4
    580c:	0028      	movs	r0, r5
    580e:	4b1c      	ldr	r3, [pc, #112]	; (5880 <mqtt_callback+0x110>)
    5810:	4798      	blx	r3
    5812:	e01d      	b.n	5850 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    5814:	7811      	ldrb	r1, [r2, #0]
    5816:	2900      	cmp	r1, #0
    5818:	d10d      	bne.n	5836 <mqtt_callback+0xc6>
			mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC "#", 0);
    581a:	2200      	movs	r2, #0
    581c:	4919      	ldr	r1, [pc, #100]	; (5884 <mqtt_callback+0x114>)
    581e:	4b1a      	ldr	r3, [pc, #104]	; (5888 <mqtt_callback+0x118>)
    5820:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    5822:	491a      	ldr	r1, [pc, #104]	; (588c <mqtt_callback+0x11c>)
    5824:	2231      	movs	r2, #49	; 0x31
    5826:	5c8b      	ldrb	r3, [r1, r2]
    5828:	2002      	movs	r0, #2
    582a:	4303      	orrs	r3, r0
    582c:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    582e:	4818      	ldr	r0, [pc, #96]	; (5890 <mqtt_callback+0x120>)
    5830:	4b0e      	ldr	r3, [pc, #56]	; (586c <mqtt_callback+0xfc>)
    5832:	4798      	blx	r3
    5834:	e00c      	b.n	5850 <mqtt_callback+0xe0>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    5836:	4817      	ldr	r0, [pc, #92]	; (5894 <mqtt_callback+0x124>)
    5838:	4b0a      	ldr	r3, [pc, #40]	; (5864 <mqtt_callback+0xf4>)
    583a:	4798      	blx	r3
    583c:	e008      	b.n	5850 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    583e:	4816      	ldr	r0, [pc, #88]	; (5898 <mqtt_callback+0x128>)
    5840:	4b0a      	ldr	r3, [pc, #40]	; (586c <mqtt_callback+0xfc>)
    5842:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    5844:	4911      	ldr	r1, [pc, #68]	; (588c <mqtt_callback+0x11c>)
    5846:	2231      	movs	r2, #49	; 0x31
    5848:	5c8b      	ldrb	r3, [r1, r2]
    584a:	2002      	movs	r0, #2
    584c:	4383      	bics	r3, r0
    584e:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    5850:	b007      	add	sp, #28
    5852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5854:	00009fd0 	.word	0x00009fd0
    5858:	00007267 	.word	0x00007267
    585c:	00006f31 	.word	0x00006f31
    5860:	00009fe8 	.word	0x00009fe8
    5864:	00006efd 	.word	0x00006efd
    5868:	00009ff0 	.word	0x00009ff0
    586c:	00007019 	.word	0x00007019
    5870:	2000037c 	.word	0x2000037c
    5874:	00005e7d 	.word	0x00005e7d
    5878:	00009f08 	.word	0x00009f08
    587c:	00009f18 	.word	0x00009f18
    5880:	00005d69 	.word	0x00005d69
    5884:	00009f50 	.word	0x00009f50
    5888:	000062d5 	.word	0x000062d5
    588c:	20000254 	.word	0x20000254
    5890:	00009f6c 	.word	0x00009f6c
    5894:	00009f9c 	.word	0x00009f9c
    5898:	00009ff4 	.word	0x00009ff4

0000589c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    589c:	b5f0      	push	{r4, r5, r6, r7, lr}
    589e:	b09f      	sub	sp, #124	; 0x7c
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];

	/* Initialize the board. */
	system_init();
    58a0:	4b84      	ldr	r3, [pc, #528]	; (5ab4 <main+0x218>)
    58a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    58a4:	aa02      	add	r2, sp, #8
    58a6:	2380      	movs	r3, #128	; 0x80
    58a8:	05db      	lsls	r3, r3, #23
    58aa:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    58ac:	2300      	movs	r3, #0
    58ae:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    58b0:	21ff      	movs	r1, #255	; 0xff
    58b2:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    58b4:	2100      	movs	r1, #0
    58b6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    58b8:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    58ba:	2501      	movs	r5, #1
    58bc:	2024      	movs	r0, #36	; 0x24
    58be:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    58c0:	3001      	adds	r0, #1
    58c2:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    58c4:	3001      	adds	r0, #1
    58c6:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    58c8:	3001      	adds	r0, #1
    58ca:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    58cc:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    58ce:	3005      	adds	r0, #5
    58d0:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    58d2:	3001      	adds	r0, #1
    58d4:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    58d6:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    58d8:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    58da:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    58dc:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    58de:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    58e0:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    58e2:	2313      	movs	r3, #19
    58e4:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    58e6:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    58e8:	23c4      	movs	r3, #196	; 0xc4
    58ea:	039b      	lsls	r3, r3, #14
    58ec:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    58ee:	2301      	movs	r3, #1
    58f0:	425b      	negs	r3, r3
    58f2:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    58f4:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    58f6:	4b70      	ldr	r3, [pc, #448]	; (5ab8 <main+0x21c>)
    58f8:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    58fa:	4b70      	ldr	r3, [pc, #448]	; (5abc <main+0x220>)
    58fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    58fe:	23e1      	movs	r3, #225	; 0xe1
    5900:	025b      	lsls	r3, r3, #9
    5902:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5904:	4c6e      	ldr	r4, [pc, #440]	; (5ac0 <main+0x224>)
    5906:	4b6f      	ldr	r3, [pc, #444]	; (5ac4 <main+0x228>)
    5908:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    590a:	496f      	ldr	r1, [pc, #444]	; (5ac8 <main+0x22c>)
    590c:	4b6f      	ldr	r3, [pc, #444]	; (5acc <main+0x230>)
    590e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5910:	496f      	ldr	r1, [pc, #444]	; (5ad0 <main+0x234>)
    5912:	4b70      	ldr	r3, [pc, #448]	; (5ad4 <main+0x238>)
    5914:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5916:	4970      	ldr	r1, [pc, #448]	; (5ad8 <main+0x23c>)
    5918:	0020      	movs	r0, r4
    591a:	4b70      	ldr	r3, [pc, #448]	; (5adc <main+0x240>)
    591c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    591e:	4f70      	ldr	r7, [pc, #448]	; (5ae0 <main+0x244>)
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	6898      	ldr	r0, [r3, #8]
    5924:	2100      	movs	r1, #0
    5926:	4e6f      	ldr	r6, [pc, #444]	; (5ae4 <main+0x248>)
    5928:	47b0      	blx	r6
	setbuf(stdin, NULL);
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	6858      	ldr	r0, [r3, #4]
    592e:	2100      	movs	r1, #0
    5930:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    5932:	2201      	movs	r2, #1
    5934:	496c      	ldr	r1, [pc, #432]	; (5ae8 <main+0x24c>)
    5936:	0020      	movs	r0, r4
    5938:	4b6c      	ldr	r3, [pc, #432]	; (5aec <main+0x250>)
    593a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    593c:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    593e:	0030      	movs	r0, r6
    5940:	4b6b      	ldr	r3, [pc, #428]	; (5af0 <main+0x254>)
    5942:	4798      	blx	r3
    5944:	231f      	movs	r3, #31
    5946:	4018      	ands	r0, r3
    5948:	4085      	lsls	r5, r0
    594a:	4b6a      	ldr	r3, [pc, #424]	; (5af4 <main+0x258>)
    594c:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    594e:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    5950:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5952:	2a00      	cmp	r2, #0
    5954:	d1fc      	bne.n	5950 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5956:	6833      	ldr	r3, [r6, #0]
    5958:	3202      	adds	r2, #2
    595a:	4313      	orrs	r3, r2
    595c:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();

	/* Output example information */
	printf(STRING_HEADER);
    595e:	4866      	ldr	r0, [pc, #408]	; (5af8 <main+0x25c>)
    5960:	4b66      	ldr	r3, [pc, #408]	; (5afc <main+0x260>)
    5962:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    5964:	a802      	add	r0, sp, #8
    5966:	4b66      	ldr	r3, [pc, #408]	; (5b00 <main+0x264>)
    5968:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    596a:	4c66      	ldr	r4, [pc, #408]	; (5b04 <main+0x268>)
    596c:	a902      	add	r1, sp, #8
    596e:	0020      	movs	r0, r4
    5970:	4b65      	ldr	r3, [pc, #404]	; (5b08 <main+0x26c>)
    5972:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    5974:	0020      	movs	r0, r4
    5976:	4b65      	ldr	r3, [pc, #404]	; (5b0c <main+0x270>)
    5978:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    597a:	a802      	add	r0, sp, #8
    597c:	4b64      	ldr	r3, [pc, #400]	; (5b10 <main+0x274>)
    597e:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    5980:	9403      	str	r4, [sp, #12]
	mqtt_conf.recv_buffer = mqtt_buffer;
    5982:	4b64      	ldr	r3, [pc, #400]	; (5b14 <main+0x278>)
    5984:	9305      	str	r3, [sp, #20]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    5986:	2380      	movs	r3, #128	; 0x80
    5988:	9306      	str	r3, [sp, #24]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    598a:	a902      	add	r1, sp, #8
    598c:	4862      	ldr	r0, [pc, #392]	; (5b18 <main+0x27c>)
    598e:	4b63      	ldr	r3, [pc, #396]	; (5b1c <main+0x280>)
    5990:	4798      	blx	r3
    5992:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5994:	da03      	bge.n	599e <main+0x102>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    5996:	4862      	ldr	r0, [pc, #392]	; (5b20 <main+0x284>)
    5998:	4b62      	ldr	r3, [pc, #392]	; (5b24 <main+0x288>)
    599a:	4798      	blx	r3
    599c:	e7fe      	b.n	599c <main+0x100>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    599e:	4962      	ldr	r1, [pc, #392]	; (5b28 <main+0x28c>)
    59a0:	485d      	ldr	r0, [pc, #372]	; (5b18 <main+0x27c>)
    59a2:	4b62      	ldr	r3, [pc, #392]	; (5b2c <main+0x290>)
    59a4:	4798      	blx	r3
    59a6:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    59a8:	da03      	bge.n	59b2 <main+0x116>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    59aa:	4861      	ldr	r0, [pc, #388]	; (5b30 <main+0x294>)
    59ac:	4b5d      	ldr	r3, [pc, #372]	; (5b24 <main+0x288>)
    59ae:	4798      	blx	r3
    59b0:	e7fe      	b.n	59b0 <main+0x114>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    59b2:	4b60      	ldr	r3, [pc, #384]	; (5b34 <main+0x298>)
    59b4:	4798      	blx	r3

	/* Setup user name first */
	printf("Enter the user name (Max %d characters)\r\n", MAIN_CHAT_USER_NAME_SIZE);
    59b6:	2140      	movs	r1, #64	; 0x40
    59b8:	485f      	ldr	r0, [pc, #380]	; (5b38 <main+0x29c>)
    59ba:	4d5a      	ldr	r5, [pc, #360]	; (5b24 <main+0x288>)
    59bc:	47a8      	blx	r5
	scanf("%64s", mqtt_user);
    59be:	4c5f      	ldr	r4, [pc, #380]	; (5b3c <main+0x2a0>)
    59c0:	0021      	movs	r1, r4
    59c2:	485f      	ldr	r0, [pc, #380]	; (5b40 <main+0x2a4>)
    59c4:	4b5f      	ldr	r3, [pc, #380]	; (5b44 <main+0x2a8>)
    59c6:	4798      	blx	r3
	printf("User : %s\r\n", mqtt_user);
    59c8:	0021      	movs	r1, r4
    59ca:	485f      	ldr	r0, [pc, #380]	; (5b48 <main+0x2ac>)
    59cc:	47a8      	blx	r5
	sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user);
    59ce:	0023      	movs	r3, r4
    59d0:	4a5e      	ldr	r2, [pc, #376]	; (5b4c <main+0x2b0>)
    59d2:	495f      	ldr	r1, [pc, #380]	; (5b50 <main+0x2b4>)
    59d4:	a802      	add	r0, sp, #8
    59d6:	4c5f      	ldr	r4, [pc, #380]	; (5b54 <main+0x2b8>)
    59d8:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    59da:	2218      	movs	r2, #24
    59dc:	2100      	movs	r1, #0
    59de:	a818      	add	r0, sp, #96	; 0x60
    59e0:	4b5d      	ldr	r3, [pc, #372]	; (5b58 <main+0x2bc>)
    59e2:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    59e4:	4b5d      	ldr	r3, [pc, #372]	; (5b5c <main+0x2c0>)
    59e6:	9318      	str	r3, [sp, #96]	; 0x60
	ret = m2m_wifi_init(&param);
    59e8:	a818      	add	r0, sp, #96	; 0x60
    59ea:	4b5d      	ldr	r3, [pc, #372]	; (5b60 <main+0x2c4>)
    59ec:	4798      	blx	r3
    59ee:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    59f0:	d003      	beq.n	59fa <main+0x15e>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    59f2:	485c      	ldr	r0, [pc, #368]	; (5b64 <main+0x2c8>)
    59f4:	4b4b      	ldr	r3, [pc, #300]	; (5b24 <main+0x288>)
    59f6:	4798      	blx	r3
    59f8:	e7fe      	b.n	59f8 <main+0x15c>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    59fa:	4b5b      	ldr	r3, [pc, #364]	; (5b68 <main+0x2cc>)
    59fc:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    59fe:	495b      	ldr	r1, [pc, #364]	; (5b6c <main+0x2d0>)
    5a00:	485b      	ldr	r0, [pc, #364]	; (5b70 <main+0x2d4>)
    5a02:	4b5c      	ldr	r3, [pc, #368]	; (5b74 <main+0x2d8>)
    5a04:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5a06:	23ff      	movs	r3, #255	; 0xff
    5a08:	9300      	str	r3, [sp, #0]
    5a0a:	4b5b      	ldr	r3, [pc, #364]	; (5b78 <main+0x2dc>)
    5a0c:	2202      	movs	r2, #2
    5a0e:	2108      	movs	r1, #8
    5a10:	485a      	ldr	r0, [pc, #360]	; (5b7c <main+0x2e0>)
    5a12:	4c5b      	ldr	r4, [pc, #364]	; (5b80 <main+0x2e4>)
    5a14:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    5a16:	4e5b      	ldr	r6, [pc, #364]	; (5b84 <main+0x2e8>)
			if (uart_buffer[i] == '\n') {
    5a18:	4d5b      	ldr	r5, [pc, #364]	; (5b88 <main+0x2ec>)
    5a1a:	e022      	b.n	5a62 <main+0x1c6>
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
    5a1c:	2400      	movs	r4, #0
    5a1e:	9401      	str	r4, [sp, #4]
    5a20:	9400      	str	r4, [sp, #0]
    5a22:	2340      	movs	r3, #64	; 0x40
    5a24:	4a58      	ldr	r2, [pc, #352]	; (5b88 <main+0x2ec>)
    5a26:	a902      	add	r1, sp, #8
    5a28:	483b      	ldr	r0, [pc, #236]	; (5b18 <main+0x27c>)
    5a2a:	4f58      	ldr	r7, [pc, #352]	; (5b8c <main+0x2f0>)
    5a2c:	47b8      	blx	r7
		uart_buffer_written = 0;
    5a2e:	4b58      	ldr	r3, [pc, #352]	; (5b90 <main+0x2f4>)
    5a30:	601c      	str	r4, [r3, #0]
    5a32:	e016      	b.n	5a62 <main+0x1c6>
				mqtt_publish(&mqtt_inst, topic, uart_buffer, (i > 0 && uart_buffer[i - 1] == '\r') ? i - 1 : i, 0, 0);
    5a34:	2c00      	cmp	r4, #0
    5a36:	dd03      	ble.n	5a40 <main+0x1a4>
    5a38:	4a53      	ldr	r2, [pc, #332]	; (5b88 <main+0x2ec>)
    5a3a:	5cd2      	ldrb	r2, [r2, r3]
    5a3c:	2a0d      	cmp	r2, #13
    5a3e:	d000      	beq.n	5a42 <main+0x1a6>
    5a40:	0023      	movs	r3, r4
    5a42:	2200      	movs	r2, #0
    5a44:	9201      	str	r2, [sp, #4]
    5a46:	9200      	str	r2, [sp, #0]
    5a48:	4a4f      	ldr	r2, [pc, #316]	; (5b88 <main+0x2ec>)
    5a4a:	a902      	add	r1, sp, #8
    5a4c:	4832      	ldr	r0, [pc, #200]	; (5b18 <main+0x27c>)
    5a4e:	4f4f      	ldr	r7, [pc, #316]	; (5b8c <main+0x2f0>)
    5a50:	47b8      	blx	r7
				if (uart_buffer_written > i + 1) {
    5a52:	4b4f      	ldr	r3, [pc, #316]	; (5b90 <main+0x2f4>)
    5a54:	681f      	ldr	r7, [r3, #0]
    5a56:	1c63      	adds	r3, r4, #1
    5a58:	42bb      	cmp	r3, r7
    5a5a:	db20      	blt.n	5a9e <main+0x202>
					uart_buffer_written = 0;
    5a5c:	2200      	movs	r2, #0
    5a5e:	4b4c      	ldr	r3, [pc, #304]	; (5b90 <main+0x2f4>)
    5a60:	601a      	str	r2, [r3, #0]
		m2m_wifi_handle_events(NULL);
    5a62:	2000      	movs	r0, #0
    5a64:	47b0      	blx	r6
		/* Try to read user input from USART. */
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    5a66:	494b      	ldr	r1, [pc, #300]	; (5b94 <main+0x2f8>)
    5a68:	4815      	ldr	r0, [pc, #84]	; (5ac0 <main+0x224>)
    5a6a:	4b4b      	ldr	r3, [pc, #300]	; (5b98 <main+0x2fc>)
    5a6c:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    5a6e:	4825      	ldr	r0, [pc, #148]	; (5b04 <main+0x268>)
    5a70:	4b4a      	ldr	r3, [pc, #296]	; (5b9c <main+0x300>)
    5a72:	4798      	blx	r3
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
    5a74:	4b46      	ldr	r3, [pc, #280]	; (5b90 <main+0x2f4>)
    5a76:	6819      	ldr	r1, [r3, #0]
    5a78:	293f      	cmp	r1, #63	; 0x3f
    5a7a:	dccf      	bgt.n	5a1c <main+0x180>
		for (i = 0; i < uart_buffer_written; i++) {
    5a7c:	2900      	cmp	r1, #0
    5a7e:	ddf0      	ble.n	5a62 <main+0x1c6>
			if (uart_buffer[i] == '\n') {
    5a80:	4b41      	ldr	r3, [pc, #260]	; (5b88 <main+0x2ec>)
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	2b0a      	cmp	r3, #10
    5a86:	d008      	beq.n	5a9a <main+0x1fe>
    5a88:	2300      	movs	r3, #0
		for (i = 0; i < uart_buffer_written; i++) {
    5a8a:	1c5c      	adds	r4, r3, #1
    5a8c:	42a1      	cmp	r1, r4
    5a8e:	d0e8      	beq.n	5a62 <main+0x1c6>
			if (uart_buffer[i] == '\n') {
    5a90:	5d62      	ldrb	r2, [r4, r5]
    5a92:	2a0a      	cmp	r2, #10
    5a94:	d0ce      	beq.n	5a34 <main+0x198>
		for (i = 0; i < uart_buffer_written; i++) {
    5a96:	0023      	movs	r3, r4
    5a98:	e7f7      	b.n	5a8a <main+0x1ee>
			if (uart_buffer[i] == '\n') {
    5a9a:	2400      	movs	r4, #0
    5a9c:	e7d0      	b.n	5a40 <main+0x1a4>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
    5a9e:	1b3f      	subs	r7, r7, r4
    5aa0:	3f01      	subs	r7, #1
    5aa2:	4839      	ldr	r0, [pc, #228]	; (5b88 <main+0x2ec>)
    5aa4:	18c1      	adds	r1, r0, r3
    5aa6:	003a      	movs	r2, r7
    5aa8:	4b3d      	ldr	r3, [pc, #244]	; (5ba0 <main+0x304>)
    5aaa:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
    5aac:	4b38      	ldr	r3, [pc, #224]	; (5b90 <main+0x2f4>)
    5aae:	601f      	str	r7, [r3, #0]
    5ab0:	e7d7      	b.n	5a62 <main+0x1c6>
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	00004bd9 	.word	0x00004bd9
    5ab8:	002a0003 	.word	0x002a0003
    5abc:	002b0003 	.word	0x002b0003
    5ac0:	20000254 	.word	0x20000254
    5ac4:	200005c4 	.word	0x200005c4
    5ac8:	00005759 	.word	0x00005759
    5acc:	200005c0 	.word	0x200005c0
    5ad0:	0000572d 	.word	0x0000572d
    5ad4:	200005bc 	.word	0x200005bc
    5ad8:	42001800 	.word	0x42001800
    5adc:	00003e7d 	.word	0x00003e7d
    5ae0:	2000000c 	.word	0x2000000c
    5ae4:	00007085 	.word	0x00007085
    5ae8:	00005659 	.word	0x00005659
    5aec:	000042ad 	.word	0x000042ad
    5af0:	00003951 	.word	0x00003951
    5af4:	e000e100 	.word	0xe000e100
    5af8:	00009dc4 	.word	0x00009dc4
    5afc:	00007019 	.word	0x00007019
    5b00:	000054bd 	.word	0x000054bd
    5b04:	200005c8 	.word	0x200005c8
    5b08:	000054c9 	.word	0x000054c9
    5b0c:	00005575 	.word	0x00005575
    5b10:	00005c55 	.word	0x00005c55
    5b14:	20000288 	.word	0x20000288
    5b18:	20000308 	.word	0x20000308
    5b1c:	00005c79 	.word	0x00005c79
    5b20:	00009e30 	.word	0x00009e30
    5b24:	00006efd 	.word	0x00006efd
    5b28:	00005771 	.word	0x00005771
    5b2c:	00005d05 	.word	0x00005d05
    5b30:	00009e64 	.word	0x00009e64
    5b34:	000001d5 	.word	0x000001d5
    5b38:	00009e98 	.word	0x00009e98
    5b3c:	2000037c 	.word	0x2000037c
    5b40:	00009ec4 	.word	0x00009ec4
    5b44:	00007051 	.word	0x00007051
    5b48:	00009ecc 	.word	0x00009ecc
    5b4c:	00009fd0 	.word	0x00009fd0
    5b50:	00009ed8 	.word	0x00009ed8
    5b54:	000071f1 	.word	0x000071f1
    5b58:	00006d9b 	.word	0x00006d9b
    5b5c:	00005695 	.word	0x00005695
    5b60:	00001111 	.word	0x00001111
    5b64:	00009ee0 	.word	0x00009ee0
    5b68:	00002d3d 	.word	0x00002d3d
    5b6c:	0000567d 	.word	0x0000567d
    5b70:	00005689 	.word	0x00005689
    5b74:	00002d81 	.word	0x00002d81
    5b78:	0000a030 	.word	0x0000a030
    5b7c:	0000a03c 	.word	0x0000a03c
    5b80:	000014e1 	.word	0x000014e1
    5b84:	00001245 	.word	0x00001245
    5b88:	200003bc 	.word	0x200003bc
    5b8c:	0000612d 	.word	0x0000612d
    5b90:	200003fc 	.word	0x200003fc
    5b94:	20000400 	.word	0x20000400
    5b98:	000042c5 	.word	0x000042c5
    5b9c:	000055fd 	.word	0x000055fd
    5ba0:	00006d77 	.word	0x00006d77

00005ba4 <_hwerr_to_stderr>:
    5ba4:	1c03      	adds	r3, r0, #0
    5ba6:	300e      	adds	r0, #14
    5ba8:	b500      	push	{lr}
    5baa:	280e      	cmp	r0, #14
    5bac:	d819      	bhi.n	5be2 <_hwerr_to_stderr+0x3e>
    5bae:	f000 ff01 	bl	69b4 <__gnu_thumb1_case_uqi>
    5bb2:	1416      	.short	0x1416
    5bb4:	1b181012 	.word	0x1b181012
    5bb8:	180c0e18 	.word	0x180c0e18
    5bbc:	1d0a0e0e 	.word	0x1d0a0e0e
    5bc0:	08          	.byte	0x08
    5bc1:	00          	.byte	0x00
    5bc2:	2000      	movs	r0, #0
    5bc4:	e014      	b.n	5bf0 <_hwerr_to_stderr+0x4c>
    5bc6:	2070      	movs	r0, #112	; 0x70
    5bc8:	e011      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bca:	2016      	movs	r0, #22
    5bcc:	e00f      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bce:	200c      	movs	r0, #12
    5bd0:	e00d      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bd2:	2079      	movs	r0, #121	; 0x79
    5bd4:	e00b      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bd6:	2068      	movs	r0, #104	; 0x68
    5bd8:	e009      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bda:	200b      	movs	r0, #11
    5bdc:	e007      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bde:	2010      	movs	r0, #16
    5be0:	e005      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5be2:	2000      	movs	r0, #0
    5be4:	4283      	cmp	r3, r0
    5be6:	da03      	bge.n	5bf0 <_hwerr_to_stderr+0x4c>
    5be8:	2005      	movs	r0, #5
    5bea:	e000      	b.n	5bee <_hwerr_to_stderr+0x4a>
    5bec:	2002      	movs	r0, #2
    5bee:	4240      	negs	r0, r0
    5bf0:	bd00      	pop	{pc}
	...

00005bf4 <_mqtt_send_wait>:
    5bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bf6:	1c04      	adds	r4, r0, #0
    5bf8:	3443      	adds	r4, #67	; 0x43
    5bfa:	7823      	ldrb	r3, [r4, #0]
    5bfc:	1c05      	adds	r5, r0, #0
    5bfe:	07d8      	lsls	r0, r3, #31
    5c00:	d51c      	bpl.n	5c3c <_mqtt_send_wait+0x48>
    5c02:	2604      	movs	r6, #4
    5c04:	4333      	orrs	r3, r6
    5c06:	7023      	strb	r3, [r4, #0]
    5c08:	2002      	movs	r0, #2
    5c0a:	5628      	ldrsb	r0, [r5, r0]
    5c0c:	b292      	uxth	r2, r2
    5c0e:	2300      	movs	r3, #0
    5c10:	4f0c      	ldr	r7, [pc, #48]	; (5c44 <_mqtt_send_wait+0x50>)
    5c12:	47b8      	blx	r7
    5c14:	2800      	cmp	r0, #0
    5c16:	da05      	bge.n	5c24 <_mqtt_send_wait+0x30>
    5c18:	7823      	ldrb	r3, [r4, #0]
    5c1a:	43b3      	bics	r3, r6
    5c1c:	7023      	strb	r3, [r4, #0]
    5c1e:	4b0a      	ldr	r3, [pc, #40]	; (5c48 <_mqtt_send_wait+0x54>)
    5c20:	4798      	blx	r3
    5c22:	e00d      	b.n	5c40 <_mqtt_send_wait+0x4c>
    5c24:	7822      	ldrb	r2, [r4, #0]
    5c26:	2314      	movs	r3, #20
    5c28:	4013      	ands	r3, r2
    5c2a:	2000      	movs	r0, #0
    5c2c:	2b04      	cmp	r3, #4
    5c2e:	d107      	bne.n	5c40 <_mqtt_send_wait+0x4c>
    5c30:	4b06      	ldr	r3, [pc, #24]	; (5c4c <_mqtt_send_wait+0x58>)
    5c32:	4798      	blx	r3
    5c34:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    5c36:	4b06      	ldr	r3, [pc, #24]	; (5c50 <_mqtt_send_wait+0x5c>)
    5c38:	4798      	blx	r3
    5c3a:	e7f3      	b.n	5c24 <_mqtt_send_wait+0x30>
    5c3c:	2001      	movs	r0, #1
    5c3e:	4240      	negs	r0, r0
    5c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c42:	46c0      	nop			; (mov r8, r8)
    5c44:	00002fa9 	.word	0x00002fa9
    5c48:	00005ba5 	.word	0x00005ba5
    5c4c:	00001245 	.word	0x00001245
    5c50:	000055fd 	.word	0x000055fd

00005c54 <mqtt_get_config_defaults>:
    5c54:	4b07      	ldr	r3, [pc, #28]	; (5c74 <mqtt_get_config_defaults+0x20>)
    5c56:	2240      	movs	r2, #64	; 0x40
    5c58:	8003      	strh	r3, [r0, #0]
    5c5a:	2396      	movs	r3, #150	; 0x96
    5c5c:	009b      	lsls	r3, r3, #2
    5c5e:	8103      	strh	r3, [r0, #8]
    5c60:	6102      	str	r2, [r0, #16]
    5c62:	2300      	movs	r3, #0
    5c64:	2220      	movs	r2, #32
    5c66:	7083      	strb	r3, [r0, #2]
    5c68:	6043      	str	r3, [r0, #4]
    5c6a:	60c3      	str	r3, [r0, #12]
    5c6c:	6142      	str	r2, [r0, #20]
    5c6e:	7603      	strb	r3, [r0, #24]
    5c70:	4770      	bx	lr
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	0000075b 	.word	0x0000075b

00005c78 <mqtt_init>:
    5c78:	b538      	push	{r3, r4, r5, lr}
    5c7a:	1c04      	adds	r4, r0, #0
    5c7c:	1c0d      	adds	r5, r1, #0
    5c7e:	2800      	cmp	r0, #0
    5c80:	d030      	beq.n	5ce4 <mqtt_init+0x6c>
    5c82:	2900      	cmp	r1, #0
    5c84:	d02e      	beq.n	5ce4 <mqtt_init+0x6c>
    5c86:	690b      	ldr	r3, [r1, #16]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d02b      	beq.n	5ce4 <mqtt_init+0x6c>
    5c8c:	684b      	ldr	r3, [r1, #4]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d028      	beq.n	5ce4 <mqtt_init+0x6c>
    5c92:	2100      	movs	r1, #0
    5c94:	2274      	movs	r2, #116	; 0x74
    5c96:	4b16      	ldr	r3, [pc, #88]	; (5cf0 <mqtt_init+0x78>)
    5c98:	4798      	blx	r3
    5c9a:	1c20      	adds	r0, r4, #0
    5c9c:	4b15      	ldr	r3, [pc, #84]	; (5cf4 <mqtt_init+0x7c>)
    5c9e:	3058      	adds	r0, #88	; 0x58
    5ca0:	1c29      	adds	r1, r5, #0
    5ca2:	221c      	movs	r2, #28
    5ca4:	4798      	blx	r3
    5ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5ca8:	2b00      	cmp	r3, #0
    5caa:	d10b      	bne.n	5cc4 <mqtt_init+0x4c>
    5cac:	6928      	ldr	r0, [r5, #16]
    5cae:	4b12      	ldr	r3, [pc, #72]	; (5cf8 <mqtt_init+0x80>)
    5cb0:	4798      	blx	r3
    5cb2:	6660      	str	r0, [r4, #100]	; 0x64
    5cb4:	2800      	cmp	r0, #0
    5cb6:	d017      	beq.n	5ce8 <mqtt_init+0x70>
    5cb8:	1c23      	adds	r3, r4, #0
    5cba:	3343      	adds	r3, #67	; 0x43
    5cbc:	781a      	ldrb	r2, [r3, #0]
    5cbe:	2120      	movs	r1, #32
    5cc0:	430a      	orrs	r2, r1
    5cc2:	701a      	strb	r2, [r3, #0]
    5cc4:	892a      	ldrh	r2, [r5, #8]
    5cc6:	23fa      	movs	r3, #250	; 0xfa
    5cc8:	005b      	lsls	r3, r3, #1
    5cca:	4353      	muls	r3, r2
    5ccc:	6868      	ldr	r0, [r5, #4]
    5cce:	490b      	ldr	r1, [pc, #44]	; (5cfc <mqtt_init+0x84>)
    5cd0:	1c22      	adds	r2, r4, #0
    5cd2:	4d0b      	ldr	r5, [pc, #44]	; (5d00 <mqtt_init+0x88>)
    5cd4:	47a8      	blx	r5
    5cd6:	1c03      	adds	r3, r0, #0
    5cd8:	6520      	str	r0, [r4, #80]	; 0x50
    5cda:	2000      	movs	r0, #0
    5cdc:	4283      	cmp	r3, r0
    5cde:	da05      	bge.n	5cec <mqtt_init+0x74>
    5ce0:	201c      	movs	r0, #28
    5ce2:	e002      	b.n	5cea <mqtt_init+0x72>
    5ce4:	2016      	movs	r0, #22
    5ce6:	e000      	b.n	5cea <mqtt_init+0x72>
    5ce8:	200c      	movs	r0, #12
    5cea:	4240      	negs	r0, r0
    5cec:	bd38      	pop	{r3, r4, r5, pc}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	00006d9b 	.word	0x00006d9b
    5cf4:	00006d65 	.word	0x00006d65
    5cf8:	00006d51 	.word	0x00006d51
    5cfc:	00006481 	.word	0x00006481
    5d00:	00005589 	.word	0x00005589

00005d04 <mqtt_register_callback>:
    5d04:	2800      	cmp	r0, #0
    5d06:	d002      	beq.n	5d0e <mqtt_register_callback+0xa>
    5d08:	6541      	str	r1, [r0, #84]	; 0x54
    5d0a:	2000      	movs	r0, #0
    5d0c:	e001      	b.n	5d12 <mqtt_register_callback+0xe>
    5d0e:	2016      	movs	r0, #22
    5d10:	4240      	negs	r0, r0
    5d12:	4770      	bx	lr

00005d14 <mqtt_socket_resolve_handler>:
    5d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d16:	1c06      	adds	r6, r0, #0
    5d18:	b085      	sub	sp, #20
    5d1a:	1c0f      	adds	r7, r1, #0
    5d1c:	2400      	movs	r4, #0
    5d1e:	4b0f      	ldr	r3, [pc, #60]	; (5d5c <mqtt_socket_resolve_handler+0x48>)
    5d20:	58e5      	ldr	r5, [r4, r3]
    5d22:	2d00      	cmp	r5, #0
    5d24:	d015      	beq.n	5d52 <mqtt_socket_resolve_handler+0x3e>
    5d26:	1ce9      	adds	r1, r5, #3
    5d28:	1c30      	adds	r0, r6, #0
    5d2a:	4b0d      	ldr	r3, [pc, #52]	; (5d60 <mqtt_socket_resolve_handler+0x4c>)
    5d2c:	4798      	blx	r3
    5d2e:	2800      	cmp	r0, #0
    5d30:	d10f      	bne.n	5d52 <mqtt_socket_resolve_handler+0x3e>
    5d32:	466a      	mov	r2, sp
    5d34:	2302      	movs	r3, #2
    5d36:	8013      	strh	r3, [r2, #0]
    5d38:	1c2b      	adds	r3, r5, #0
    5d3a:	3358      	adds	r3, #88	; 0x58
    5d3c:	881b      	ldrh	r3, [r3, #0]
    5d3e:	9701      	str	r7, [sp, #4]
    5d40:	ba5b      	rev16	r3, r3
    5d42:	8053      	strh	r3, [r2, #2]
    5d44:	2002      	movs	r0, #2
    5d46:	5628      	ldrsb	r0, [r5, r0]
    5d48:	4669      	mov	r1, sp
    5d4a:	2210      	movs	r2, #16
    5d4c:	4b05      	ldr	r3, [pc, #20]	; (5d64 <mqtt_socket_resolve_handler+0x50>)
    5d4e:	4798      	blx	r3
    5d50:	e002      	b.n	5d58 <mqtt_socket_resolve_handler+0x44>
    5d52:	3404      	adds	r4, #4
    5d54:	2c1c      	cmp	r4, #28
    5d56:	d1e2      	bne.n	5d1e <mqtt_socket_resolve_handler+0xa>
    5d58:	b005      	add	sp, #20
    5d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d5c:	20000404 	.word	0x20000404
    5d60:	00007235 	.word	0x00007235
    5d64:	00002f19 	.word	0x00002f19

00005d68 <mqtt_connect>:
    5d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d6a:	1c04      	adds	r4, r0, #0
    5d6c:	b089      	sub	sp, #36	; 0x24
    5d6e:	1c0d      	adds	r5, r1, #0
    5d70:	2800      	cmp	r0, #0
    5d72:	d051      	beq.n	5e18 <mqtt_connect+0xb0>
    5d74:	2900      	cmp	r1, #0
    5d76:	d04f      	beq.n	5e18 <mqtt_connect+0xb0>
    5d78:	1c08      	adds	r0, r1, #0
    5d7a:	4b39      	ldr	r3, [pc, #228]	; (5e60 <mqtt_connect+0xf8>)
    5d7c:	4798      	blx	r3
    5d7e:	2840      	cmp	r0, #64	; 0x40
    5d80:	d84c      	bhi.n	5e1c <mqtt_connect+0xb4>
    5d82:	1c21      	adds	r1, r4, #0
    5d84:	3143      	adds	r1, #67	; 0x43
    5d86:	780b      	ldrb	r3, [r1, #0]
    5d88:	9101      	str	r1, [sp, #4]
    5d8a:	07db      	lsls	r3, r3, #31
    5d8c:	0fd9      	lsrs	r1, r3, #31
    5d8e:	466a      	mov	r2, sp
    5d90:	b2ce      	uxtb	r6, r1
    5d92:	1ce0      	adds	r0, r4, #3
    5d94:	7211      	strb	r1, [r2, #8]
    5d96:	2e00      	cmp	r6, #0
    5d98:	d142      	bne.n	5e20 <mqtt_connect+0xb8>
    5d9a:	2701      	movs	r7, #1
    5d9c:	1c29      	adds	r1, r5, #0
    5d9e:	4b31      	ldr	r3, [pc, #196]	; (5e64 <mqtt_connect+0xfc>)
    5da0:	8027      	strh	r7, [r4, #0]
    5da2:	4798      	blx	r3
    5da4:	9a01      	ldr	r2, [sp, #4]
    5da6:	2002      	movs	r0, #2
    5da8:	7813      	ldrb	r3, [r2, #0]
    5daa:	9901      	ldr	r1, [sp, #4]
    5dac:	43bb      	bics	r3, r7
    5dae:	4383      	bics	r3, r0
    5db0:	22e3      	movs	r2, #227	; 0xe3
    5db2:	4013      	ands	r3, r2
    5db4:	466a      	mov	r2, sp
    5db6:	700b      	strb	r3, [r1, #0]
    5db8:	7a12      	ldrb	r2, [r2, #8]
    5dba:	1c23      	adds	r3, r4, #0
    5dbc:	3348      	adds	r3, #72	; 0x48
    5dbe:	6466      	str	r6, [r4, #68]	; 0x44
    5dc0:	701a      	strb	r2, [r3, #0]
    5dc2:	7c9a      	ldrb	r2, [r3, #18]
    5dc4:	805e      	strh	r6, [r3, #2]
    5dc6:	1e53      	subs	r3, r2, #1
    5dc8:	419a      	sbcs	r2, r3
    5dca:	b2d2      	uxtb	r2, r2
    5dcc:	1c39      	adds	r1, r7, #0
    5dce:	4b26      	ldr	r3, [pc, #152]	; (5e68 <mqtt_connect+0x100>)
    5dd0:	4798      	blx	r3
    5dd2:	70a0      	strb	r0, [r4, #2]
    5dd4:	2800      	cmp	r0, #0
    5dd6:	db25      	blt.n	5e24 <mqtt_connect+0xbc>
    5dd8:	4b24      	ldr	r3, [pc, #144]	; (5e6c <mqtt_connect+0x104>)
    5dda:	0080      	lsls	r0, r0, #2
    5ddc:	50c4      	str	r4, [r0, r3]
    5dde:	1c2b      	adds	r3, r5, #0
    5de0:	781f      	ldrb	r7, [r3, #0]
    5de2:	2f00      	cmp	r7, #0
    5de4:	d026      	beq.n	5e34 <mqtt_connect+0xcc>
    5de6:	2220      	movs	r2, #32
    5de8:	1c39      	adds	r1, r7, #0
    5dea:	4391      	bics	r1, r2
    5dec:	1c0a      	adds	r2, r1, #0
    5dee:	3a41      	subs	r2, #65	; 0x41
    5df0:	b2d2      	uxtb	r2, r2
    5df2:	3301      	adds	r3, #1
    5df4:	2a05      	cmp	r2, #5
    5df6:	d90d      	bls.n	5e14 <mqtt_connect+0xac>
    5df8:	2f3a      	cmp	r7, #58	; 0x3a
    5dfa:	d00b      	beq.n	5e14 <mqtt_connect+0xac>
    5dfc:	2f2f      	cmp	r7, #47	; 0x2f
    5dfe:	d009      	beq.n	5e14 <mqtt_connect+0xac>
    5e00:	2f2e      	cmp	r7, #46	; 0x2e
    5e02:	d102      	bne.n	5e0a <mqtt_connect+0xa2>
    5e04:	2e00      	cmp	r6, #0
    5e06:	d0eb      	beq.n	5de0 <mqtt_connect+0x78>
    5e08:	e00f      	b.n	5e2a <mqtt_connect+0xc2>
    5e0a:	2230      	movs	r2, #48	; 0x30
    5e0c:	4017      	ands	r7, r2
    5e0e:	4297      	cmp	r7, r2
    5e10:	d0e6      	beq.n	5de0 <mqtt_connect+0x78>
    5e12:	e00a      	b.n	5e2a <mqtt_connect+0xc2>
    5e14:	2601      	movs	r6, #1
    5e16:	e7e3      	b.n	5de0 <mqtt_connect+0x78>
    5e18:	2016      	movs	r0, #22
    5e1a:	e004      	b.n	5e26 <mqtt_connect+0xbe>
    5e1c:	205b      	movs	r0, #91	; 0x5b
    5e1e:	e002      	b.n	5e26 <mqtt_connect+0xbe>
    5e20:	2078      	movs	r0, #120	; 0x78
    5e22:	e000      	b.n	5e26 <mqtt_connect+0xbe>
    5e24:	201c      	movs	r0, #28
    5e26:	4240      	negs	r0, r0
    5e28:	e017      	b.n	5e5a <mqtt_connect+0xf2>
    5e2a:	1c28      	adds	r0, r5, #0
    5e2c:	4b10      	ldr	r3, [pc, #64]	; (5e70 <mqtt_connect+0x108>)
    5e2e:	4798      	blx	r3
    5e30:	2000      	movs	r0, #0
    5e32:	e012      	b.n	5e5a <mqtt_connect+0xf2>
    5e34:	466a      	mov	r2, sp
    5e36:	2302      	movs	r3, #2
    5e38:	8213      	strh	r3, [r2, #16]
    5e3a:	1c23      	adds	r3, r4, #0
    5e3c:	3358      	adds	r3, #88	; 0x58
    5e3e:	881b      	ldrh	r3, [r3, #0]
    5e40:	1c28      	adds	r0, r5, #0
    5e42:	ba5b      	rev16	r3, r3
    5e44:	8253      	strh	r3, [r2, #18]
    5e46:	4b0b      	ldr	r3, [pc, #44]	; (5e74 <mqtt_connect+0x10c>)
    5e48:	4798      	blx	r3
    5e4a:	9005      	str	r0, [sp, #20]
    5e4c:	2002      	movs	r0, #2
    5e4e:	5620      	ldrsb	r0, [r4, r0]
    5e50:	a904      	add	r1, sp, #16
    5e52:	2210      	movs	r2, #16
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <mqtt_connect+0x110>)
    5e56:	4798      	blx	r3
    5e58:	1c38      	adds	r0, r7, #0
    5e5a:	b009      	add	sp, #36	; 0x24
    5e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	00007259 	.word	0x00007259
    5e64:	00007249 	.word	0x00007249
    5e68:	00002d95 	.word	0x00002d95
    5e6c:	20000404 	.word	0x20000404
    5e70:	000031dd 	.word	0x000031dd
    5e74:	00003171 	.word	0x00003171
    5e78:	00002f19 	.word	0x00002f19

00005e7c <mqtt_connect_broker>:
    5e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e7e:	b095      	sub	sp, #84	; 0x54
    5e80:	af02      	add	r7, sp, #8
    5e82:	617b      	str	r3, [r7, #20]
    5e84:	1c3b      	adds	r3, r7, #0
    5e86:	3370      	adds	r3, #112	; 0x70
    5e88:	781b      	ldrb	r3, [r3, #0]
    5e8a:	1c05      	adds	r5, r0, #0
    5e8c:	60fb      	str	r3, [r7, #12]
    5e8e:	1c3b      	adds	r3, r7, #0
    5e90:	3374      	adds	r3, #116	; 0x74
    5e92:	781b      	ldrb	r3, [r3, #0]
    5e94:	6139      	str	r1, [r7, #16]
    5e96:	61fa      	str	r2, [r7, #28]
    5e98:	60bb      	str	r3, [r7, #8]
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d101      	bne.n	5ea2 <mqtt_connect_broker+0x26>
    5e9e:	2016      	movs	r0, #22
    5ea0:	e129      	b.n	60f6 <mqtt_connect_broker+0x27a>
    5ea2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    5ea4:	4668      	mov	r0, sp
    5ea6:	3307      	adds	r3, #7
    5ea8:	08db      	lsrs	r3, r3, #3
    5eaa:	00db      	lsls	r3, r3, #3
    5eac:	1ac0      	subs	r0, r0, r3
    5eae:	4685      	mov	sp, r0
    5eb0:	ac02      	add	r4, sp, #8
    5eb2:	607c      	str	r4, [r7, #4]
    5eb4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    5eb6:	2c00      	cmp	r4, #0
    5eb8:	d0f1      	beq.n	5e9e <mqtt_connect_broker+0x22>
    5eba:	1c2b      	adds	r3, r5, #0
    5ebc:	3343      	adds	r3, #67	; 0x43
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	07d8      	lsls	r0, r3, #31
    5ec2:	d400      	bmi.n	5ec6 <mqtt_connect_broker+0x4a>
    5ec4:	e112      	b.n	60ec <mqtt_connect_broker+0x270>
    5ec6:	079a      	lsls	r2, r3, #30
    5ec8:	d500      	bpl.n	5ecc <mqtt_connect_broker+0x50>
    5eca:	e111      	b.n	60f0 <mqtt_connect_broker+0x274>
    5ecc:	071c      	lsls	r4, r3, #28
    5ece:	d40b      	bmi.n	5ee8 <mqtt_connect_broker+0x6c>
    5ed0:	4e8b      	ldr	r6, [pc, #556]	; (6100 <mqtt_connect_broker+0x284>)
    5ed2:	6e38      	ldr	r0, [r7, #96]	; 0x60
    5ed4:	47b0      	blx	r6
    5ed6:	1c03      	adds	r3, r0, #0
    5ed8:	61b8      	str	r0, [r7, #24]
    5eda:	69f8      	ldr	r0, [r7, #28]
    5edc:	330e      	adds	r3, #14
    5ede:	1c34      	adds	r4, r6, #0
    5ee0:	2800      	cmp	r0, #0
    5ee2:	d113      	bne.n	5f0c <mqtt_connect_broker+0x90>
    5ee4:	1c1e      	adds	r6, r3, #0
    5ee6:	e01d      	b.n	5f24 <mqtt_connect_broker+0xa8>
    5ee8:	1c2b      	adds	r3, r5, #0
    5eea:	3370      	adds	r3, #112	; 0x70
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d000      	beq.n	5ef4 <mqtt_connect_broker+0x78>
    5ef2:	e0ff      	b.n	60f4 <mqtt_connect_broker+0x278>
    5ef4:	1c2b      	adds	r3, r5, #0
    5ef6:	3343      	adds	r3, #67	; 0x43
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	071a      	lsls	r2, r3, #28
    5efc:	d5e8      	bpl.n	5ed0 <mqtt_connect_broker+0x54>
    5efe:	4b81      	ldr	r3, [pc, #516]	; (6104 <mqtt_connect_broker+0x288>)
    5f00:	2000      	movs	r0, #0
    5f02:	4798      	blx	r3
    5f04:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    5f06:	4b80      	ldr	r3, [pc, #512]	; (6108 <mqtt_connect_broker+0x28c>)
    5f08:	4798      	blx	r3
    5f0a:	e7f3      	b.n	5ef4 <mqtt_connect_broker+0x78>
    5f0c:	69f8      	ldr	r0, [r7, #28]
    5f0e:	47b0      	blx	r6
    5f10:	69be      	ldr	r6, [r7, #24]
    5f12:	697b      	ldr	r3, [r7, #20]
    5f14:	3610      	adds	r6, #16
    5f16:	1836      	adds	r6, r6, r0
    5f18:	2b00      	cmp	r3, #0
    5f1a:	d003      	beq.n	5f24 <mqtt_connect_broker+0xa8>
    5f1c:	1c18      	adds	r0, r3, #0
    5f1e:	47a0      	blx	r4
    5f20:	3602      	adds	r6, #2
    5f22:	1836      	adds	r6, r6, r0
    5f24:	6e78      	ldr	r0, [r7, #100]	; 0x64
    5f26:	2800      	cmp	r0, #0
    5f28:	d007      	beq.n	5f3a <mqtt_connect_broker+0xbe>
    5f2a:	47a0      	blx	r4
    5f2c:	3602      	adds	r6, #2
    5f2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    5f30:	1830      	adds	r0, r6, r0
    5f32:	1906      	adds	r6, r0, r4
    5f34:	2c00      	cmp	r4, #0
    5f36:	d100      	bne.n	5f3a <mqtt_connect_broker+0xbe>
    5f38:	1c06      	adds	r6, r0, #0
    5f3a:	69fc      	ldr	r4, [r7, #28]
    5f3c:	2c00      	cmp	r4, #0
    5f3e:	d006      	beq.n	5f4e <mqtt_connect_broker+0xd2>
    5f40:	24c0      	movs	r4, #192	; 0xc0
    5f42:	61bc      	str	r4, [r7, #24]
    5f44:	697c      	ldr	r4, [r7, #20]
    5f46:	2c00      	cmp	r4, #0
    5f48:	d103      	bne.n	5f52 <mqtt_connect_broker+0xd6>
    5f4a:	2480      	movs	r4, #128	; 0x80
    5f4c:	e000      	b.n	5f50 <mqtt_connect_broker+0xd4>
    5f4e:	69fc      	ldr	r4, [r7, #28]
    5f50:	61bc      	str	r4, [r7, #24]
    5f52:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    5f54:	2c00      	cmp	r4, #0
    5f56:	d00f      	beq.n	5f78 <mqtt_connect_broker+0xfc>
    5f58:	68bc      	ldr	r4, [r7, #8]
    5f5a:	2c00      	cmp	r4, #0
    5f5c:	d003      	beq.n	5f66 <mqtt_connect_broker+0xea>
    5f5e:	69bc      	ldr	r4, [r7, #24]
    5f60:	2320      	movs	r3, #32
    5f62:	431c      	orrs	r4, r3
    5f64:	61bc      	str	r4, [r7, #24]
    5f66:	68fc      	ldr	r4, [r7, #12]
    5f68:	2303      	movs	r3, #3
    5f6a:	4023      	ands	r3, r4
    5f6c:	00db      	lsls	r3, r3, #3
    5f6e:	69bc      	ldr	r4, [r7, #24]
    5f70:	2204      	movs	r2, #4
    5f72:	4313      	orrs	r3, r2
    5f74:	431c      	orrs	r4, r3
    5f76:	61bc      	str	r4, [r7, #24]
    5f78:	693c      	ldr	r4, [r7, #16]
    5f7a:	2c00      	cmp	r4, #0
    5f7c:	d003      	beq.n	5f86 <mqtt_connect_broker+0x10a>
    5f7e:	69bc      	ldr	r4, [r7, #24]
    5f80:	2302      	movs	r3, #2
    5f82:	431c      	orrs	r4, r3
    5f84:	61bc      	str	r4, [r7, #24]
    5f86:	1c2b      	adds	r3, r5, #0
    5f88:	3343      	adds	r3, #67	; 0x43
    5f8a:	781a      	ldrb	r2, [r3, #0]
    5f8c:	2108      	movs	r1, #8
    5f8e:	430a      	orrs	r2, r1
    5f90:	701a      	strb	r2, [r3, #0]
    5f92:	1c38      	adds	r0, r7, #0
    5f94:	9500      	str	r5, [sp, #0]
    5f96:	3020      	adds	r0, #32
    5f98:	6879      	ldr	r1, [r7, #4]
    5f9a:	4b5c      	ldr	r3, [pc, #368]	; (610c <mqtt_connect_broker+0x290>)
    5f9c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    5f9e:	4c5c      	ldr	r4, [pc, #368]	; (6110 <mqtt_connect_broker+0x294>)
    5fa0:	47a0      	blx	r4
    5fa2:	1c38      	adds	r0, r7, #0
    5fa4:	3020      	adds	r0, #32
    5fa6:	2110      	movs	r1, #16
    5fa8:	4b5a      	ldr	r3, [pc, #360]	; (6114 <mqtt_connect_broker+0x298>)
    5faa:	4798      	blx	r3
    5fac:	2e80      	cmp	r6, #128	; 0x80
    5fae:	dd09      	ble.n	5fc4 <mqtt_connect_broker+0x148>
    5fb0:	2180      	movs	r1, #128	; 0x80
    5fb2:	4249      	negs	r1, r1
    5fb4:	4331      	orrs	r1, r6
    5fb6:	1c38      	adds	r0, r7, #0
    5fb8:	b249      	sxtb	r1, r1
    5fba:	3020      	adds	r0, #32
    5fbc:	4c55      	ldr	r4, [pc, #340]	; (6114 <mqtt_connect_broker+0x298>)
    5fbe:	47a0      	blx	r4
    5fc0:	11f6      	asrs	r6, r6, #7
    5fc2:	e7f3      	b.n	5fac <mqtt_connect_broker+0x130>
    5fc4:	4b54      	ldr	r3, [pc, #336]	; (6118 <mqtt_connect_broker+0x29c>)
    5fc6:	401e      	ands	r6, r3
    5fc8:	d504      	bpl.n	5fd4 <mqtt_connect_broker+0x158>
    5fca:	2380      	movs	r3, #128	; 0x80
    5fcc:	3e01      	subs	r6, #1
    5fce:	425b      	negs	r3, r3
    5fd0:	431e      	orrs	r6, r3
    5fd2:	3601      	adds	r6, #1
    5fd4:	1c38      	adds	r0, r7, #0
    5fd6:	b271      	sxtb	r1, r6
    5fd8:	3020      	adds	r0, #32
    5fda:	4c4e      	ldr	r4, [pc, #312]	; (6114 <mqtt_connect_broker+0x298>)
    5fdc:	47a0      	blx	r4
    5fde:	1c38      	adds	r0, r7, #0
    5fe0:	4c4e      	ldr	r4, [pc, #312]	; (611c <mqtt_connect_broker+0x2a0>)
    5fe2:	3020      	adds	r0, #32
    5fe4:	2106      	movs	r1, #6
    5fe6:	47a0      	blx	r4
    5fe8:	1c38      	adds	r0, r7, #0
    5fea:	4b4d      	ldr	r3, [pc, #308]	; (6120 <mqtt_connect_broker+0x2a4>)
    5fec:	3020      	adds	r0, #32
    5fee:	494d      	ldr	r1, [pc, #308]	; (6124 <mqtt_connect_broker+0x2a8>)
    5ff0:	2206      	movs	r2, #6
    5ff2:	4798      	blx	r3
    5ff4:	1c38      	adds	r0, r7, #0
    5ff6:	3020      	adds	r0, #32
    5ff8:	2103      	movs	r1, #3
    5ffa:	4a46      	ldr	r2, [pc, #280]	; (6114 <mqtt_connect_broker+0x298>)
    5ffc:	4790      	blx	r2
    5ffe:	69bb      	ldr	r3, [r7, #24]
    6000:	1c38      	adds	r0, r7, #0
    6002:	4a44      	ldr	r2, [pc, #272]	; (6114 <mqtt_connect_broker+0x298>)
    6004:	b259      	sxtb	r1, r3
    6006:	3020      	adds	r0, #32
    6008:	4790      	blx	r2
    600a:	1c2b      	adds	r3, r5, #0
    600c:	3360      	adds	r3, #96	; 0x60
    600e:	2000      	movs	r0, #0
    6010:	5e19      	ldrsh	r1, [r3, r0]
    6012:	1c38      	adds	r0, r7, #0
    6014:	3020      	adds	r0, #32
    6016:	47a0      	blx	r4
    6018:	4e39      	ldr	r6, [pc, #228]	; (6100 <mqtt_connect_broker+0x284>)
    601a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    601c:	47b0      	blx	r6
    601e:	b201      	sxth	r1, r0
    6020:	1c38      	adds	r0, r7, #0
    6022:	3020      	adds	r0, #32
    6024:	47a0      	blx	r4
    6026:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6028:	47b0      	blx	r6
    602a:	1c02      	adds	r2, r0, #0
    602c:	1c38      	adds	r0, r7, #0
    602e:	3020      	adds	r0, #32
    6030:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6032:	4b3b      	ldr	r3, [pc, #236]	; (6120 <mqtt_connect_broker+0x2a4>)
    6034:	4798      	blx	r3
    6036:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6038:	2800      	cmp	r0, #0
    603a:	d015      	beq.n	6068 <mqtt_connect_broker+0x1ec>
    603c:	47b0      	blx	r6
    603e:	b201      	sxth	r1, r0
    6040:	1c38      	adds	r0, r7, #0
    6042:	3020      	adds	r0, #32
    6044:	47a0      	blx	r4
    6046:	6e78      	ldr	r0, [r7, #100]	; 0x64
    6048:	47b0      	blx	r6
    604a:	1c02      	adds	r2, r0, #0
    604c:	1c38      	adds	r0, r7, #0
    604e:	4c34      	ldr	r4, [pc, #208]	; (6120 <mqtt_connect_broker+0x2a4>)
    6050:	3020      	adds	r0, #32
    6052:	6e79      	ldr	r1, [r7, #100]	; 0x64
    6054:	47a0      	blx	r4
    6056:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    6058:	2c00      	cmp	r4, #0
    605a:	d005      	beq.n	6068 <mqtt_connect_broker+0x1ec>
    605c:	1c38      	adds	r0, r7, #0
    605e:	1c21      	adds	r1, r4, #0
    6060:	3020      	adds	r0, #32
    6062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6064:	4c2e      	ldr	r4, [pc, #184]	; (6120 <mqtt_connect_broker+0x2a4>)
    6066:	47a0      	blx	r4
    6068:	69fc      	ldr	r4, [r7, #28]
    606a:	2c00      	cmp	r4, #0
    606c:	d01f      	beq.n	60ae <mqtt_connect_broker+0x232>
    606e:	4e24      	ldr	r6, [pc, #144]	; (6100 <mqtt_connect_broker+0x284>)
    6070:	1c20      	adds	r0, r4, #0
    6072:	47b0      	blx	r6
    6074:	b201      	sxth	r1, r0
    6076:	1c38      	adds	r0, r7, #0
    6078:	3020      	adds	r0, #32
    607a:	4c28      	ldr	r4, [pc, #160]	; (611c <mqtt_connect_broker+0x2a0>)
    607c:	47a0      	blx	r4
    607e:	69f8      	ldr	r0, [r7, #28]
    6080:	47b0      	blx	r6
    6082:	1c02      	adds	r2, r0, #0
    6084:	1c38      	adds	r0, r7, #0
    6086:	3020      	adds	r0, #32
    6088:	69f9      	ldr	r1, [r7, #28]
    608a:	4c25      	ldr	r4, [pc, #148]	; (6120 <mqtt_connect_broker+0x2a4>)
    608c:	47a0      	blx	r4
    608e:	6978      	ldr	r0, [r7, #20]
    6090:	2800      	cmp	r0, #0
    6092:	d00c      	beq.n	60ae <mqtt_connect_broker+0x232>
    6094:	47b0      	blx	r6
    6096:	b201      	sxth	r1, r0
    6098:	1c38      	adds	r0, r7, #0
    609a:	4a20      	ldr	r2, [pc, #128]	; (611c <mqtt_connect_broker+0x2a0>)
    609c:	3020      	adds	r0, #32
    609e:	4790      	blx	r2
    60a0:	6978      	ldr	r0, [r7, #20]
    60a2:	47b0      	blx	r6
    60a4:	1c02      	adds	r2, r0, #0
    60a6:	1c38      	adds	r0, r7, #0
    60a8:	3020      	adds	r0, #32
    60aa:	6979      	ldr	r1, [r7, #20]
    60ac:	47a0      	blx	r4
    60ae:	1c38      	adds	r0, r7, #0
    60b0:	1c2c      	adds	r4, r5, #0
    60b2:	3020      	adds	r0, #32
    60b4:	4b1c      	ldr	r3, [pc, #112]	; (6128 <mqtt_connect_broker+0x2ac>)
    60b6:	3443      	adds	r4, #67	; 0x43
    60b8:	4798      	blx	r3
    60ba:	7821      	ldrb	r1, [r4, #0]
    60bc:	0789      	lsls	r1, r1, #30
    60be:	0fc9      	lsrs	r1, r1, #31
    60c0:	2901      	cmp	r1, #1
    60c2:	d10b      	bne.n	60dc <mqtt_connect_broker+0x260>
    60c4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    60c6:	2a00      	cmp	r2, #0
    60c8:	d108      	bne.n	60dc <mqtt_connect_broker+0x260>
    60ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    60cc:	2b00      	cmp	r3, #0
    60ce:	d005      	beq.n	60dc <mqtt_connect_broker+0x260>
    60d0:	2034      	movs	r0, #52	; 0x34
    60d2:	55c2      	strb	r2, [r0, r7]
    60d4:	1c3a      	adds	r2, r7, #0
    60d6:	1c28      	adds	r0, r5, #0
    60d8:	3234      	adds	r2, #52	; 0x34
    60da:	4798      	blx	r3
    60dc:	7823      	ldrb	r3, [r4, #0]
    60de:	2202      	movs	r2, #2
    60e0:	4313      	orrs	r3, r2
    60e2:	2208      	movs	r2, #8
    60e4:	4393      	bics	r3, r2
    60e6:	7023      	strb	r3, [r4, #0]
    60e8:	2000      	movs	r0, #0
    60ea:	e005      	b.n	60f8 <mqtt_connect_broker+0x27c>
    60ec:	2080      	movs	r0, #128	; 0x80
    60ee:	e002      	b.n	60f6 <mqtt_connect_broker+0x27a>
    60f0:	2078      	movs	r0, #120	; 0x78
    60f2:	e000      	b.n	60f6 <mqtt_connect_broker+0x27a>
    60f4:	200b      	movs	r0, #11
    60f6:	4240      	negs	r0, r0
    60f8:	46bd      	mov	sp, r7
    60fa:	b013      	add	sp, #76	; 0x4c
    60fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	00007259 	.word	0x00007259
    6104:	00001245 	.word	0x00001245
    6108:	000055fd 	.word	0x000055fd
    610c:	00005bf5 	.word	0x00005bf5
    6110:	0000541d 	.word	0x0000541d
    6114:	00005449 	.word	0x00005449
    6118:	8000007f 	.word	0x8000007f
    611c:	00005471 	.word	0x00005471
    6120:	00005489 	.word	0x00005489
    6124:	0000a060 	.word	0x0000a060
    6128:	0000542d 	.word	0x0000542d

0000612c <mqtt_publish>:
    612c:	b5f0      	push	{r4, r5, r6, r7, lr}
    612e:	b093      	sub	sp, #76	; 0x4c
    6130:	af02      	add	r7, sp, #8
    6132:	60fb      	str	r3, [r7, #12]
    6134:	1c3b      	adds	r3, r7, #0
    6136:	3358      	adds	r3, #88	; 0x58
    6138:	781b      	ldrb	r3, [r3, #0]
    613a:	1c04      	adds	r4, r0, #0
    613c:	613b      	str	r3, [r7, #16]
    613e:	1c3b      	adds	r3, r7, #0
    6140:	335c      	adds	r3, #92	; 0x5c
    6142:	781b      	ldrb	r3, [r3, #0]
    6144:	6179      	str	r1, [r7, #20]
    6146:	60ba      	str	r2, [r7, #8]
    6148:	607b      	str	r3, [r7, #4]
    614a:	2800      	cmp	r0, #0
    614c:	d101      	bne.n	6152 <mqtt_publish+0x26>
    614e:	2516      	movs	r5, #22
    6150:	e0a7      	b.n	62a2 <mqtt_publish+0x176>
    6152:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6154:	466a      	mov	r2, sp
    6156:	3307      	adds	r3, #7
    6158:	08db      	lsrs	r3, r3, #3
    615a:	00db      	lsls	r3, r3, #3
    615c:	1ad2      	subs	r2, r2, r3
    615e:	697b      	ldr	r3, [r7, #20]
    6160:	4695      	mov	sp, r2
    6162:	ae02      	add	r6, sp, #8
    6164:	2b00      	cmp	r3, #0
    6166:	d0f2      	beq.n	614e <mqtt_publish+0x22>
    6168:	693a      	ldr	r2, [r7, #16]
    616a:	2a02      	cmp	r2, #2
    616c:	d8ef      	bhi.n	614e <mqtt_publish+0x22>
    616e:	1c05      	adds	r5, r0, #0
    6170:	3543      	adds	r5, #67	; 0x43
    6172:	782b      	ldrb	r3, [r5, #0]
    6174:	079a      	lsls	r2, r3, #30
    6176:	d400      	bmi.n	617a <mqtt_publish+0x4e>
    6178:	e090      	b.n	629c <mqtt_publish+0x170>
    617a:	071a      	lsls	r2, r3, #28
    617c:	d40a      	bmi.n	6194 <mqtt_publish+0x68>
    617e:	4b4b      	ldr	r3, [pc, #300]	; (62ac <mqtt_publish+0x180>)
    6180:	6978      	ldr	r0, [r7, #20]
    6182:	4798      	blx	r3
    6184:	68fd      	ldr	r5, [r7, #12]
    6186:	693b      	ldr	r3, [r7, #16]
    6188:	3502      	adds	r5, #2
    618a:	182d      	adds	r5, r5, r0
    618c:	2b00      	cmp	r3, #0
    618e:	d011      	beq.n	61b4 <mqtt_publish+0x88>
    6190:	3502      	adds	r5, #2
    6192:	e00f      	b.n	61b4 <mqtt_publish+0x88>
    6194:	1c03      	adds	r3, r0, #0
    6196:	3370      	adds	r3, #112	; 0x70
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	2b00      	cmp	r3, #0
    619c:	d000      	beq.n	61a0 <mqtt_publish+0x74>
    619e:	e07f      	b.n	62a0 <mqtt_publish+0x174>
    61a0:	782b      	ldrb	r3, [r5, #0]
    61a2:	071a      	lsls	r2, r3, #28
    61a4:	d5eb      	bpl.n	617e <mqtt_publish+0x52>
    61a6:	4b42      	ldr	r3, [pc, #264]	; (62b0 <mqtt_publish+0x184>)
    61a8:	2000      	movs	r0, #0
    61aa:	4798      	blx	r3
    61ac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    61ae:	4b41      	ldr	r3, [pc, #260]	; (62b4 <mqtt_publish+0x188>)
    61b0:	4798      	blx	r3
    61b2:	e7f5      	b.n	61a0 <mqtt_publish+0x74>
    61b4:	1c23      	adds	r3, r4, #0
    61b6:	3343      	adds	r3, #67	; 0x43
    61b8:	781a      	ldrb	r2, [r3, #0]
    61ba:	2108      	movs	r1, #8
    61bc:	430a      	orrs	r2, r1
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	1c38      	adds	r0, r7, #0
    61c2:	9400      	str	r4, [sp, #0]
    61c4:	1c31      	adds	r1, r6, #0
    61c6:	302c      	adds	r0, #44	; 0x2c
    61c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    61ca:	4b3b      	ldr	r3, [pc, #236]	; (62b8 <mqtt_publish+0x18c>)
    61cc:	4e3b      	ldr	r6, [pc, #236]	; (62bc <mqtt_publish+0x190>)
    61ce:	47b0      	blx	r6
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	2101      	movs	r1, #1
    61d4:	4019      	ands	r1, r3
    61d6:	2330      	movs	r3, #48	; 0x30
    61d8:	4319      	orrs	r1, r3
    61da:	693b      	ldr	r3, [r7, #16]
    61dc:	1c38      	adds	r0, r7, #0
    61de:	005a      	lsls	r2, r3, #1
    61e0:	2306      	movs	r3, #6
    61e2:	4013      	ands	r3, r2
    61e4:	4319      	orrs	r1, r3
    61e6:	302c      	adds	r0, #44	; 0x2c
    61e8:	4b35      	ldr	r3, [pc, #212]	; (62c0 <mqtt_publish+0x194>)
    61ea:	4798      	blx	r3
    61ec:	4b34      	ldr	r3, [pc, #208]	; (62c0 <mqtt_publish+0x194>)
    61ee:	2d80      	cmp	r5, #128	; 0x80
    61f0:	dd08      	ble.n	6204 <mqtt_publish+0xd8>
    61f2:	2180      	movs	r1, #128	; 0x80
    61f4:	4249      	negs	r1, r1
    61f6:	4329      	orrs	r1, r5
    61f8:	1c38      	adds	r0, r7, #0
    61fa:	b249      	sxtb	r1, r1
    61fc:	302c      	adds	r0, #44	; 0x2c
    61fe:	4798      	blx	r3
    6200:	11ed      	asrs	r5, r5, #7
    6202:	e7f3      	b.n	61ec <mqtt_publish+0xc0>
    6204:	4a2f      	ldr	r2, [pc, #188]	; (62c4 <mqtt_publish+0x198>)
    6206:	4015      	ands	r5, r2
    6208:	d504      	bpl.n	6214 <mqtt_publish+0xe8>
    620a:	2280      	movs	r2, #128	; 0x80
    620c:	3d01      	subs	r5, #1
    620e:	4252      	negs	r2, r2
    6210:	4315      	orrs	r5, r2
    6212:	3501      	adds	r5, #1
    6214:	1c38      	adds	r0, r7, #0
    6216:	b269      	sxtb	r1, r5
    6218:	302c      	adds	r0, #44	; 0x2c
    621a:	4798      	blx	r3
    621c:	4e23      	ldr	r6, [pc, #140]	; (62ac <mqtt_publish+0x180>)
    621e:	6978      	ldr	r0, [r7, #20]
    6220:	47b0      	blx	r6
    6222:	b201      	sxth	r1, r0
    6224:	1c38      	adds	r0, r7, #0
    6226:	302c      	adds	r0, #44	; 0x2c
    6228:	4d27      	ldr	r5, [pc, #156]	; (62c8 <mqtt_publish+0x19c>)
    622a:	47a8      	blx	r5
    622c:	6978      	ldr	r0, [r7, #20]
    622e:	47b0      	blx	r6
    6230:	1c02      	adds	r2, r0, #0
    6232:	1c38      	adds	r0, r7, #0
    6234:	302c      	adds	r0, #44	; 0x2c
    6236:	6979      	ldr	r1, [r7, #20]
    6238:	4e24      	ldr	r6, [pc, #144]	; (62cc <mqtt_publish+0x1a0>)
    623a:	47b0      	blx	r6
    623c:	693a      	ldr	r2, [r7, #16]
    623e:	2a00      	cmp	r2, #0
    6240:	d006      	beq.n	6250 <mqtt_publish+0x124>
    6242:	8821      	ldrh	r1, [r4, #0]
    6244:	1c38      	adds	r0, r7, #0
    6246:	1c4b      	adds	r3, r1, #1
    6248:	8023      	strh	r3, [r4, #0]
    624a:	b209      	sxth	r1, r1
    624c:	302c      	adds	r0, #44	; 0x2c
    624e:	47a8      	blx	r5
    6250:	8823      	ldrh	r3, [r4, #0]
    6252:	2b00      	cmp	r3, #0
    6254:	d101      	bne.n	625a <mqtt_publish+0x12e>
    6256:	2301      	movs	r3, #1
    6258:	8023      	strh	r3, [r4, #0]
    625a:	68bb      	ldr	r3, [r7, #8]
    625c:	2b00      	cmp	r3, #0
    625e:	d006      	beq.n	626e <mqtt_publish+0x142>
    6260:	68fa      	ldr	r2, [r7, #12]
    6262:	2a00      	cmp	r2, #0
    6264:	d003      	beq.n	626e <mqtt_publish+0x142>
    6266:	1c38      	adds	r0, r7, #0
    6268:	302c      	adds	r0, #44	; 0x2c
    626a:	1c19      	adds	r1, r3, #0
    626c:	47b0      	blx	r6
    626e:	1c38      	adds	r0, r7, #0
    6270:	4b17      	ldr	r3, [pc, #92]	; (62d0 <mqtt_publish+0x1a4>)
    6272:	302c      	adds	r0, #44	; 0x2c
    6274:	4798      	blx	r3
    6276:	1c23      	adds	r3, r4, #0
    6278:	3343      	adds	r3, #67	; 0x43
    627a:	781a      	ldrb	r2, [r3, #0]
    627c:	2108      	movs	r1, #8
    627e:	438a      	bics	r2, r1
    6280:	701a      	strb	r2, [r3, #0]
    6282:	693b      	ldr	r3, [r7, #16]
    6284:	2500      	movs	r5, #0
    6286:	42ab      	cmp	r3, r5
    6288:	d10c      	bne.n	62a4 <mqtt_publish+0x178>
    628a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    628c:	42ab      	cmp	r3, r5
    628e:	d009      	beq.n	62a4 <mqtt_publish+0x178>
    6290:	1c3a      	adds	r2, r7, #0
    6292:	1c20      	adds	r0, r4, #0
    6294:	2102      	movs	r1, #2
    6296:	3218      	adds	r2, #24
    6298:	4798      	blx	r3
    629a:	e003      	b.n	62a4 <mqtt_publish+0x178>
    629c:	2580      	movs	r5, #128	; 0x80
    629e:	e000      	b.n	62a2 <mqtt_publish+0x176>
    62a0:	250b      	movs	r5, #11
    62a2:	426d      	negs	r5, r5
    62a4:	1c28      	adds	r0, r5, #0
    62a6:	46bd      	mov	sp, r7
    62a8:	b011      	add	sp, #68	; 0x44
    62aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62ac:	00007259 	.word	0x00007259
    62b0:	00001245 	.word	0x00001245
    62b4:	000055fd 	.word	0x000055fd
    62b8:	00005bf5 	.word	0x00005bf5
    62bc:	0000541d 	.word	0x0000541d
    62c0:	00005449 	.word	0x00005449
    62c4:	8000007f 	.word	0x8000007f
    62c8:	00005471 	.word	0x00005471
    62cc:	00005489 	.word	0x00005489
    62d0:	0000542d 	.word	0x0000542d

000062d4 <mqtt_subscribe>:
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	b08d      	sub	sp, #52	; 0x34
    62d8:	af02      	add	r7, sp, #8
    62da:	1c04      	adds	r4, r0, #0
    62dc:	60b9      	str	r1, [r7, #8]
    62de:	607a      	str	r2, [r7, #4]
    62e0:	d101      	bne.n	62e6 <mqtt_subscribe+0x12>
    62e2:	2016      	movs	r0, #22
    62e4:	e086      	b.n	63f4 <mqtt_subscribe+0x120>
    62e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    62e8:	466a      	mov	r2, sp
    62ea:	3307      	adds	r3, #7
    62ec:	08db      	lsrs	r3, r3, #3
    62ee:	00db      	lsls	r3, r3, #3
    62f0:	1ad2      	subs	r2, r2, r3
    62f2:	4695      	mov	sp, r2
    62f4:	ad02      	add	r5, sp, #8
    62f6:	603d      	str	r5, [r7, #0]
    62f8:	68bd      	ldr	r5, [r7, #8]
    62fa:	2d00      	cmp	r5, #0
    62fc:	d0f1      	beq.n	62e2 <mqtt_subscribe+0xe>
    62fe:	687d      	ldr	r5, [r7, #4]
    6300:	2d02      	cmp	r5, #2
    6302:	d8ee      	bhi.n	62e2 <mqtt_subscribe+0xe>
    6304:	1c05      	adds	r5, r0, #0
    6306:	3543      	adds	r5, #67	; 0x43
    6308:	782b      	ldrb	r3, [r5, #0]
    630a:	079a      	lsls	r2, r3, #30
    630c:	d56f      	bpl.n	63ee <mqtt_subscribe+0x11a>
    630e:	071a      	lsls	r2, r3, #28
    6310:	d41a      	bmi.n	6348 <mqtt_subscribe+0x74>
    6312:	68b8      	ldr	r0, [r7, #8]
    6314:	4d39      	ldr	r5, [pc, #228]	; (63fc <mqtt_subscribe+0x128>)
    6316:	47a8      	blx	r5
    6318:	1c25      	adds	r5, r4, #0
    631a:	3543      	adds	r5, #67	; 0x43
    631c:	782b      	ldrb	r3, [r5, #0]
    631e:	2208      	movs	r2, #8
    6320:	4313      	orrs	r3, r2
    6322:	702b      	strb	r3, [r5, #0]
    6324:	60fd      	str	r5, [r7, #12]
    6326:	1d46      	adds	r6, r0, #5
    6328:	9400      	str	r4, [sp, #0]
    632a:	1c38      	adds	r0, r7, #0
    632c:	3014      	adds	r0, #20
    632e:	6839      	ldr	r1, [r7, #0]
    6330:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6332:	4b33      	ldr	r3, [pc, #204]	; (6400 <mqtt_subscribe+0x12c>)
    6334:	4d33      	ldr	r5, [pc, #204]	; (6404 <mqtt_subscribe+0x130>)
    6336:	47a8      	blx	r5
    6338:	1c38      	adds	r0, r7, #0
    633a:	217e      	movs	r1, #126	; 0x7e
    633c:	3014      	adds	r0, #20
    633e:	4249      	negs	r1, r1
    6340:	4b31      	ldr	r3, [pc, #196]	; (6408 <mqtt_subscribe+0x134>)
    6342:	4798      	blx	r3
    6344:	4d2d      	ldr	r5, [pc, #180]	; (63fc <mqtt_subscribe+0x128>)
    6346:	e00e      	b.n	6366 <mqtt_subscribe+0x92>
    6348:	1c03      	adds	r3, r0, #0
    634a:	3370      	adds	r3, #112	; 0x70
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	2b00      	cmp	r3, #0
    6350:	d14f      	bne.n	63f2 <mqtt_subscribe+0x11e>
    6352:	782b      	ldrb	r3, [r5, #0]
    6354:	071a      	lsls	r2, r3, #28
    6356:	d5dc      	bpl.n	6312 <mqtt_subscribe+0x3e>
    6358:	4b2c      	ldr	r3, [pc, #176]	; (640c <mqtt_subscribe+0x138>)
    635a:	2000      	movs	r0, #0
    635c:	4798      	blx	r3
    635e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6360:	4b2b      	ldr	r3, [pc, #172]	; (6410 <mqtt_subscribe+0x13c>)
    6362:	4798      	blx	r3
    6364:	e7f5      	b.n	6352 <mqtt_subscribe+0x7e>
    6366:	4b28      	ldr	r3, [pc, #160]	; (6408 <mqtt_subscribe+0x134>)
    6368:	2e80      	cmp	r6, #128	; 0x80
    636a:	dd08      	ble.n	637e <mqtt_subscribe+0xaa>
    636c:	2180      	movs	r1, #128	; 0x80
    636e:	4249      	negs	r1, r1
    6370:	4331      	orrs	r1, r6
    6372:	1c38      	adds	r0, r7, #0
    6374:	b249      	sxtb	r1, r1
    6376:	3014      	adds	r0, #20
    6378:	4798      	blx	r3
    637a:	11f6      	asrs	r6, r6, #7
    637c:	e7f3      	b.n	6366 <mqtt_subscribe+0x92>
    637e:	4925      	ldr	r1, [pc, #148]	; (6414 <mqtt_subscribe+0x140>)
    6380:	4031      	ands	r1, r6
    6382:	d504      	bpl.n	638e <mqtt_subscribe+0xba>
    6384:	2280      	movs	r2, #128	; 0x80
    6386:	3901      	subs	r1, #1
    6388:	4252      	negs	r2, r2
    638a:	4311      	orrs	r1, r2
    638c:	3101      	adds	r1, #1
    638e:	1c38      	adds	r0, r7, #0
    6390:	b249      	sxtb	r1, r1
    6392:	3014      	adds	r0, #20
    6394:	4798      	blx	r3
    6396:	8821      	ldrh	r1, [r4, #0]
    6398:	1c38      	adds	r0, r7, #0
    639a:	1c4b      	adds	r3, r1, #1
    639c:	8023      	strh	r3, [r4, #0]
    639e:	b209      	sxth	r1, r1
    63a0:	3014      	adds	r0, #20
    63a2:	4e1d      	ldr	r6, [pc, #116]	; (6418 <mqtt_subscribe+0x144>)
    63a4:	47b0      	blx	r6
    63a6:	8823      	ldrh	r3, [r4, #0]
    63a8:	2b00      	cmp	r3, #0
    63aa:	d101      	bne.n	63b0 <mqtt_subscribe+0xdc>
    63ac:	2301      	movs	r3, #1
    63ae:	8023      	strh	r3, [r4, #0]
    63b0:	68b8      	ldr	r0, [r7, #8]
    63b2:	47a8      	blx	r5
    63b4:	b201      	sxth	r1, r0
    63b6:	1c38      	adds	r0, r7, #0
    63b8:	3014      	adds	r0, #20
    63ba:	47b0      	blx	r6
    63bc:	68b8      	ldr	r0, [r7, #8]
    63be:	47a8      	blx	r5
    63c0:	1c02      	adds	r2, r0, #0
    63c2:	1c38      	adds	r0, r7, #0
    63c4:	3014      	adds	r0, #20
    63c6:	68b9      	ldr	r1, [r7, #8]
    63c8:	4b14      	ldr	r3, [pc, #80]	; (641c <mqtt_subscribe+0x148>)
    63ca:	4798      	blx	r3
    63cc:	687d      	ldr	r5, [r7, #4]
    63ce:	1c38      	adds	r0, r7, #0
    63d0:	b269      	sxtb	r1, r5
    63d2:	3014      	adds	r0, #20
    63d4:	4b0c      	ldr	r3, [pc, #48]	; (6408 <mqtt_subscribe+0x134>)
    63d6:	4798      	blx	r3
    63d8:	1c38      	adds	r0, r7, #0
    63da:	3014      	adds	r0, #20
    63dc:	4b10      	ldr	r3, [pc, #64]	; (6420 <mqtt_subscribe+0x14c>)
    63de:	4798      	blx	r3
    63e0:	68fd      	ldr	r5, [r7, #12]
    63e2:	2208      	movs	r2, #8
    63e4:	782b      	ldrb	r3, [r5, #0]
    63e6:	2000      	movs	r0, #0
    63e8:	4393      	bics	r3, r2
    63ea:	702b      	strb	r3, [r5, #0]
    63ec:	e003      	b.n	63f6 <mqtt_subscribe+0x122>
    63ee:	2080      	movs	r0, #128	; 0x80
    63f0:	e000      	b.n	63f4 <mqtt_subscribe+0x120>
    63f2:	200b      	movs	r0, #11
    63f4:	4240      	negs	r0, r0
    63f6:	46bd      	mov	sp, r7
    63f8:	b00b      	add	sp, #44	; 0x2c
    63fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63fc:	00007259 	.word	0x00007259
    6400:	00005bf5 	.word	0x00005bf5
    6404:	0000541d 	.word	0x0000541d
    6408:	00005449 	.word	0x00005449
    640c:	00001245 	.word	0x00001245
    6410:	000055fd 	.word	0x000055fd
    6414:	8000007f 	.word	0x8000007f
    6418:	00005471 	.word	0x00005471
    641c:	00005489 	.word	0x00005489
    6420:	0000542d 	.word	0x0000542d

00006424 <_mqtt_ping>:
    6424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6426:	23c0      	movs	r3, #192	; 0xc0
    6428:	a901      	add	r1, sp, #4
    642a:	2500      	movs	r5, #0
    642c:	700b      	strb	r3, [r1, #0]
    642e:	704d      	strb	r5, [r1, #1]
    6430:	42a8      	cmp	r0, r5
    6432:	d019      	beq.n	6468 <_mqtt_ping+0x44>
    6434:	1c04      	adds	r4, r0, #0
    6436:	3443      	adds	r4, #67	; 0x43
    6438:	7823      	ldrb	r3, [r4, #0]
    643a:	079a      	lsls	r2, r3, #30
    643c:	d516      	bpl.n	646c <_mqtt_ping+0x48>
    643e:	071a      	lsls	r2, r3, #28
    6440:	d416      	bmi.n	6470 <_mqtt_ping+0x4c>
    6442:	2608      	movs	r6, #8
    6444:	4333      	orrs	r3, r6
    6446:	7023      	strb	r3, [r4, #0]
    6448:	7880      	ldrb	r0, [r0, #2]
    644a:	1c2b      	adds	r3, r5, #0
    644c:	b240      	sxtb	r0, r0
    644e:	2202      	movs	r2, #2
    6450:	4f09      	ldr	r7, [pc, #36]	; (6478 <_mqtt_ping+0x54>)
    6452:	47b8      	blx	r7
    6454:	1c2b      	adds	r3, r5, #0
    6456:	42a8      	cmp	r0, r5
    6458:	da0c      	bge.n	6474 <_mqtt_ping+0x50>
    645a:	7823      	ldrb	r3, [r4, #0]
    645c:	43b3      	bics	r3, r6
    645e:	7023      	strb	r3, [r4, #0]
    6460:	4b06      	ldr	r3, [pc, #24]	; (647c <_mqtt_ping+0x58>)
    6462:	4798      	blx	r3
    6464:	1c03      	adds	r3, r0, #0
    6466:	e005      	b.n	6474 <_mqtt_ping+0x50>
    6468:	2316      	movs	r3, #22
    646a:	e002      	b.n	6472 <_mqtt_ping+0x4e>
    646c:	2380      	movs	r3, #128	; 0x80
    646e:	e000      	b.n	6472 <_mqtt_ping+0x4e>
    6470:	230b      	movs	r3, #11
    6472:	425b      	negs	r3, r3
    6474:	1c18      	adds	r0, r3, #0
    6476:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6478:	00002fa9 	.word	0x00002fa9
    647c:	00005ba5 	.word	0x00005ba5

00006480 <mqtt_timer_callback>:
    6480:	b570      	push	{r4, r5, r6, lr}
    6482:	1c05      	adds	r5, r0, #0
    6484:	b086      	sub	sp, #24
    6486:	1c0e      	adds	r6, r1, #0
    6488:	1c14      	adds	r4, r2, #0
    648a:	2800      	cmp	r0, #0
    648c:	d012      	beq.n	64b4 <mqtt_timer_callback+0x34>
    648e:	2a00      	cmp	r2, #0
    6490:	d010      	beq.n	64b4 <mqtt_timer_callback+0x34>
    6492:	1c10      	adds	r0, r2, #0
    6494:	4b08      	ldr	r3, [pc, #32]	; (64b8 <mqtt_timer_callback+0x38>)
    6496:	4798      	blx	r3
    6498:	2800      	cmp	r0, #0
    649a:	da04      	bge.n	64a6 <mqtt_timer_callback+0x26>
    649c:	1c28      	adds	r0, r5, #0
    649e:	1c31      	adds	r1, r6, #0
    64a0:	2200      	movs	r2, #0
    64a2:	4b06      	ldr	r3, [pc, #24]	; (64bc <mqtt_timer_callback+0x3c>)
    64a4:	e005      	b.n	64b2 <mqtt_timer_callback+0x32>
    64a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    64a8:	2b00      	cmp	r3, #0
    64aa:	d003      	beq.n	64b4 <mqtt_timer_callback+0x34>
    64ac:	1c20      	adds	r0, r4, #0
    64ae:	2107      	movs	r1, #7
    64b0:	aa01      	add	r2, sp, #4
    64b2:	4798      	blx	r3
    64b4:	b006      	add	sp, #24
    64b6:	bd70      	pop	{r4, r5, r6, pc}
    64b8:	00006425 	.word	0x00006425
    64bc:	000055c1 	.word	0x000055c1

000064c0 <_mqtt_puback>:
    64c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64c2:	2302      	movs	r3, #2
    64c4:	ac01      	add	r4, sp, #4
    64c6:	2700      	movs	r7, #0
    64c8:	7063      	strb	r3, [r4, #1]
    64ca:	42b8      	cmp	r0, r7
    64cc:	d01e      	beq.n	650c <_mqtt_puback+0x4c>
    64ce:	1c05      	adds	r5, r0, #0
    64d0:	3543      	adds	r5, #67	; 0x43
    64d2:	782b      	ldrb	r3, [r5, #0]
    64d4:	079e      	lsls	r6, r3, #30
    64d6:	d51b      	bpl.n	6510 <_mqtt_puback+0x50>
    64d8:	071e      	lsls	r6, r3, #28
    64da:	d41b      	bmi.n	6514 <_mqtt_puback+0x54>
    64dc:	2608      	movs	r6, #8
    64de:	4333      	orrs	r3, r6
    64e0:	702b      	strb	r3, [r5, #0]
    64e2:	7880      	ldrb	r0, [r0, #2]
    64e4:	7021      	strb	r1, [r4, #0]
    64e6:	0a11      	lsrs	r1, r2, #8
    64e8:	70a1      	strb	r1, [r4, #2]
    64ea:	70e2      	strb	r2, [r4, #3]
    64ec:	1c21      	adds	r1, r4, #0
    64ee:	1c3b      	adds	r3, r7, #0
    64f0:	b240      	sxtb	r0, r0
    64f2:	2204      	movs	r2, #4
    64f4:	4c09      	ldr	r4, [pc, #36]	; (651c <_mqtt_puback+0x5c>)
    64f6:	47a0      	blx	r4
    64f8:	1c3b      	adds	r3, r7, #0
    64fa:	42b8      	cmp	r0, r7
    64fc:	da0c      	bge.n	6518 <_mqtt_puback+0x58>
    64fe:	782b      	ldrb	r3, [r5, #0]
    6500:	43b3      	bics	r3, r6
    6502:	702b      	strb	r3, [r5, #0]
    6504:	4b06      	ldr	r3, [pc, #24]	; (6520 <_mqtt_puback+0x60>)
    6506:	4798      	blx	r3
    6508:	1c03      	adds	r3, r0, #0
    650a:	e005      	b.n	6518 <_mqtt_puback+0x58>
    650c:	2316      	movs	r3, #22
    650e:	e002      	b.n	6516 <_mqtt_puback+0x56>
    6510:	2380      	movs	r3, #128	; 0x80
    6512:	e000      	b.n	6516 <_mqtt_puback+0x56>
    6514:	230b      	movs	r3, #11
    6516:	425b      	negs	r3, r3
    6518:	1c18      	adds	r0, r3, #0
    651a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    651c:	00002fa9 	.word	0x00002fa9
    6520:	00005ba5 	.word	0x00005ba5

00006524 <mqtt_clear_conn>:
    6524:	b530      	push	{r4, r5, lr}
    6526:	1c04      	adds	r4, r0, #0
    6528:	b087      	sub	sp, #28
    652a:	2800      	cmp	r0, #0
    652c:	d01c      	beq.n	6568 <mqtt_clear_conn+0x44>
    652e:	2002      	movs	r0, #2
    6530:	4b0e      	ldr	r3, [pc, #56]	; (656c <mqtt_clear_conn+0x48>)
    6532:	5620      	ldrsb	r0, [r4, r0]
    6534:	4798      	blx	r3
    6536:	1c23      	adds	r3, r4, #0
    6538:	3343      	adds	r3, #67	; 0x43
    653a:	781a      	ldrb	r2, [r3, #0]
    653c:	21fc      	movs	r1, #252	; 0xfc
    653e:	0795      	lsls	r5, r2, #30
    6540:	400a      	ands	r2, r1
    6542:	701a      	strb	r2, [r3, #0]
    6544:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6546:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6548:	9301      	str	r3, [sp, #4]
    654a:	2300      	movs	r3, #0
    654c:	64e3      	str	r3, [r4, #76]	; 0x4c
    654e:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6550:	4b07      	ldr	r3, [pc, #28]	; (6570 <mqtt_clear_conn+0x4c>)
    6552:	4798      	blx	r3
    6554:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6556:	0fed      	lsrs	r5, r5, #31
    6558:	2b00      	cmp	r3, #0
    655a:	d005      	beq.n	6568 <mqtt_clear_conn+0x44>
    655c:	2d00      	cmp	r5, #0
    655e:	d003      	beq.n	6568 <mqtt_clear_conn+0x44>
    6560:	1c20      	adds	r0, r4, #0
    6562:	2105      	movs	r1, #5
    6564:	aa01      	add	r2, sp, #4
    6566:	4798      	blx	r3
    6568:	b007      	add	sp, #28
    656a:	bd30      	pop	{r4, r5, pc}
    656c:	000030d5 	.word	0x000030d5
    6570:	000055ed 	.word	0x000055ed

00006574 <mqtt_disconnect>:
    6574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6576:	23e0      	movs	r3, #224	; 0xe0
    6578:	ae01      	add	r6, sp, #4
    657a:	2700      	movs	r7, #0
    657c:	1c05      	adds	r5, r0, #0
    657e:	7033      	strb	r3, [r6, #0]
    6580:	7077      	strb	r7, [r6, #1]
    6582:	42b8      	cmp	r0, r7
    6584:	d036      	beq.n	65f4 <mqtt_disconnect+0x80>
    6586:	1c04      	adds	r4, r0, #0
    6588:	3443      	adds	r4, #67	; 0x43
    658a:	7823      	ldrb	r3, [r4, #0]
    658c:	079a      	lsls	r2, r3, #30
    658e:	d533      	bpl.n	65f8 <mqtt_disconnect+0x84>
    6590:	42b9      	cmp	r1, r7
    6592:	d12b      	bne.n	65ec <mqtt_disconnect+0x78>
    6594:	071a      	lsls	r2, r3, #28
    6596:	d414      	bmi.n	65c2 <mqtt_disconnect+0x4e>
    6598:	7823      	ldrb	r3, [r4, #0]
    659a:	2210      	movs	r2, #16
    659c:	4313      	orrs	r3, r2
    659e:	2708      	movs	r7, #8
    65a0:	433b      	orrs	r3, r7
    65a2:	7023      	strb	r3, [r4, #0]
    65a4:	2002      	movs	r0, #2
    65a6:	5628      	ldrsb	r0, [r5, r0]
    65a8:	1c31      	adds	r1, r6, #0
    65aa:	2202      	movs	r2, #2
    65ac:	2300      	movs	r3, #0
    65ae:	4d15      	ldr	r5, [pc, #84]	; (6604 <mqtt_disconnect+0x90>)
    65b0:	47a8      	blx	r5
    65b2:	2800      	cmp	r0, #0
    65b4:	da14      	bge.n	65e0 <mqtt_disconnect+0x6c>
    65b6:	7823      	ldrb	r3, [r4, #0]
    65b8:	43bb      	bics	r3, r7
    65ba:	7023      	strb	r3, [r4, #0]
    65bc:	4b12      	ldr	r3, [pc, #72]	; (6608 <mqtt_disconnect+0x94>)
    65be:	4798      	blx	r3
    65c0:	e01e      	b.n	6600 <mqtt_disconnect+0x8c>
    65c2:	1c03      	adds	r3, r0, #0
    65c4:	3370      	adds	r3, #112	; 0x70
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	2b00      	cmp	r3, #0
    65ca:	d117      	bne.n	65fc <mqtt_disconnect+0x88>
    65cc:	7823      	ldrb	r3, [r4, #0]
    65ce:	071a      	lsls	r2, r3, #28
    65d0:	d5e2      	bpl.n	6598 <mqtt_disconnect+0x24>
    65d2:	4b0e      	ldr	r3, [pc, #56]	; (660c <mqtt_disconnect+0x98>)
    65d4:	2000      	movs	r0, #0
    65d6:	4798      	blx	r3
    65d8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    65da:	4b0d      	ldr	r3, [pc, #52]	; (6610 <mqtt_disconnect+0x9c>)
    65dc:	4798      	blx	r3
    65de:	e7f5      	b.n	65cc <mqtt_disconnect+0x58>
    65e0:	7823      	ldrb	r3, [r4, #0]
    65e2:	2202      	movs	r2, #2
    65e4:	4393      	bics	r3, r2
    65e6:	7023      	strb	r3, [r4, #0]
    65e8:	2000      	movs	r0, #0
    65ea:	e009      	b.n	6600 <mqtt_disconnect+0x8c>
    65ec:	4b09      	ldr	r3, [pc, #36]	; (6614 <mqtt_disconnect+0xa0>)
    65ee:	4798      	blx	r3
    65f0:	1c38      	adds	r0, r7, #0
    65f2:	e005      	b.n	6600 <mqtt_disconnect+0x8c>
    65f4:	2016      	movs	r0, #22
    65f6:	e002      	b.n	65fe <mqtt_disconnect+0x8a>
    65f8:	2080      	movs	r0, #128	; 0x80
    65fa:	e000      	b.n	65fe <mqtt_disconnect+0x8a>
    65fc:	200b      	movs	r0, #11
    65fe:	4240      	negs	r0, r0
    6600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6602:	46c0      	nop			; (mov r8, r8)
    6604:	00002fa9 	.word	0x00002fa9
    6608:	00005ba5 	.word	0x00005ba5
    660c:	00001245 	.word	0x00001245
    6610:	000055fd 	.word	0x000055fd
    6614:	00006525 	.word	0x00006525

00006618 <_mqtt_recv_handler>:
    6618:	b5f0      	push	{r4, r5, r6, r7, lr}
    661a:	1c04      	adds	r4, r0, #0
    661c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    661e:	230f      	movs	r3, #15
    6620:	7802      	ldrb	r2, [r0, #0]
    6622:	b087      	sub	sp, #28
    6624:	1c15      	adds	r5, r2, #0
    6626:	439d      	bics	r5, r3
    6628:	2d50      	cmp	r5, #80	; 0x50
    662a:	d100      	bne.n	662e <_mqtt_recv_handler+0x16>
    662c:	e098      	b.n	6760 <_mqtt_recv_handler+0x148>
    662e:	d808      	bhi.n	6642 <_mqtt_recv_handler+0x2a>
    6630:	2d30      	cmp	r5, #48	; 0x30
    6632:	d03f      	beq.n	66b4 <_mqtt_recv_handler+0x9c>
    6634:	2d40      	cmp	r5, #64	; 0x40
    6636:	d100      	bne.n	663a <_mqtt_recv_handler+0x22>
    6638:	e0b3      	b.n	67a2 <_mqtt_recv_handler+0x18a>
    663a:	2d20      	cmp	r5, #32
    663c:	d000      	beq.n	6640 <_mqtt_recv_handler+0x28>
    663e:	e0c3      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    6640:	e00e      	b.n	6660 <_mqtt_recv_handler+0x48>
    6642:	2d70      	cmp	r5, #112	; 0x70
    6644:	d100      	bne.n	6648 <_mqtt_recv_handler+0x30>
    6646:	e0ac      	b.n	67a2 <_mqtt_recv_handler+0x18a>
    6648:	d803      	bhi.n	6652 <_mqtt_recv_handler+0x3a>
    664a:	2d60      	cmp	r5, #96	; 0x60
    664c:	d100      	bne.n	6650 <_mqtt_recv_handler+0x38>
    664e:	e096      	b.n	677e <_mqtt_recv_handler+0x166>
    6650:	e0ba      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    6652:	2d90      	cmp	r5, #144	; 0x90
    6654:	d100      	bne.n	6658 <_mqtt_recv_handler+0x40>
    6656:	e0aa      	b.n	67ae <_mqtt_recv_handler+0x196>
    6658:	2db0      	cmp	r5, #176	; 0xb0
    665a:	d100      	bne.n	665e <_mqtt_recv_handler+0x46>
    665c:	e0ad      	b.n	67ba <_mqtt_recv_handler+0x1a2>
    665e:	e0b3      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    6660:	aa01      	add	r2, sp, #4
    6662:	2303      	movs	r3, #3
    6664:	2901      	cmp	r1, #1
    6666:	d900      	bls.n	666a <_mqtt_recv_handler+0x52>
    6668:	78c3      	ldrb	r3, [r0, #3]
    666a:	7013      	strb	r3, [r2, #0]
    666c:	7813      	ldrb	r3, [r2, #0]
    666e:	2b00      	cmp	r3, #0
    6670:	d00d      	beq.n	668e <_mqtt_recv_handler+0x76>
    6672:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6674:	2b00      	cmp	r3, #0
    6676:	d002      	beq.n	667e <_mqtt_recv_handler+0x66>
    6678:	1c20      	adds	r0, r4, #0
    667a:	2101      	movs	r1, #1
    667c:	4798      	blx	r3
    667e:	236f      	movs	r3, #111	; 0x6f
    6680:	425b      	negs	r3, r3
    6682:	64e3      	str	r3, [r4, #76]	; 0x4c
    6684:	1c20      	adds	r0, r4, #0
    6686:	2100      	movs	r1, #0
    6688:	4b50      	ldr	r3, [pc, #320]	; (67cc <_mqtt_recv_handler+0x1b4>)
    668a:	4798      	blx	r3
    668c:	e09c      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    668e:	1c23      	adds	r3, r4, #0
    6690:	3343      	adds	r3, #67	; 0x43
    6692:	7819      	ldrb	r1, [r3, #0]
    6694:	0789      	lsls	r1, r1, #30
    6696:	0fc9      	lsrs	r1, r1, #31
    6698:	d105      	bne.n	66a6 <_mqtt_recv_handler+0x8e>
    669a:	781a      	ldrb	r2, [r3, #0]
    669c:	64e1      	str	r1, [r4, #76]	; 0x4c
    669e:	2102      	movs	r1, #2
    66a0:	430a      	orrs	r2, r1
    66a2:	701a      	strb	r2, [r3, #0]
    66a4:	e090      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    66a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    66a8:	2b00      	cmp	r3, #0
    66aa:	d100      	bne.n	66ae <_mqtt_recv_handler+0x96>
    66ac:	e08c      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    66ae:	1c20      	adds	r0, r4, #0
    66b0:	2101      	movs	r1, #1
    66b2:	e088      	b.n	67c6 <_mqtt_recv_handler+0x1ae>
    66b4:	ad01      	add	r5, sp, #4
    66b6:	0713      	lsls	r3, r2, #28
    66b8:	7c2a      	ldrb	r2, [r5, #16]
    66ba:	0fdb      	lsrs	r3, r3, #31
    66bc:	2604      	movs	r6, #4
    66be:	009b      	lsls	r3, r3, #2
    66c0:	43b2      	bics	r2, r6
    66c2:	431a      	orrs	r2, r3
    66c4:	742a      	strb	r2, [r5, #16]
    66c6:	7807      	ldrb	r7, [r0, #0]
    66c8:	2303      	movs	r3, #3
    66ca:	b2d2      	uxtb	r2, r2
    66cc:	087f      	lsrs	r7, r7, #1
    66ce:	439a      	bics	r2, r3
    66d0:	401f      	ands	r7, r3
    66d2:	1c13      	adds	r3, r2, #0
    66d4:	433b      	orrs	r3, r7
    66d6:	742b      	strb	r3, [r5, #16]
    66d8:	1c43      	adds	r3, r0, #1
    66da:	7818      	ldrb	r0, [r3, #0]
    66dc:	1c5a      	adds	r2, r3, #1
    66de:	287f      	cmp	r0, #127	; 0x7f
    66e0:	d901      	bls.n	66e6 <_mqtt_recv_handler+0xce>
    66e2:	1c13      	adds	r3, r2, #0
    66e4:	e7f9      	b.n	66da <_mqtt_recv_handler+0xc2>
    66e6:	7858      	ldrb	r0, [r3, #1]
    66e8:	789e      	ldrb	r6, [r3, #2]
    66ea:	0200      	lsls	r0, r0, #8
    66ec:	4330      	orrs	r0, r6
    66ee:	3303      	adds	r3, #3
    66f0:	2600      	movs	r6, #0
    66f2:	6068      	str	r0, [r5, #4]
    66f4:	9301      	str	r3, [sp, #4]
    66f6:	1818      	adds	r0, r3, r0
    66f8:	42b7      	cmp	r7, r6
    66fa:	d004      	beq.n	6706 <_mqtt_recv_handler+0xee>
    66fc:	7806      	ldrb	r6, [r0, #0]
    66fe:	7843      	ldrb	r3, [r0, #1]
    6700:	0236      	lsls	r6, r6, #8
    6702:	431e      	orrs	r6, r3
    6704:	3002      	adds	r0, #2
    6706:	1851      	adds	r1, r2, r1
    6708:	6d63      	ldr	r3, [r4, #84]	; 0x54
    670a:	60a8      	str	r0, [r5, #8]
    670c:	1a08      	subs	r0, r1, r0
    670e:	60e8      	str	r0, [r5, #12]
    6710:	2b00      	cmp	r3, #0
    6712:	d003      	beq.n	671c <_mqtt_recv_handler+0x104>
    6714:	1c20      	adds	r0, r4, #0
    6716:	2106      	movs	r1, #6
    6718:	1c2a      	adds	r2, r5, #0
    671a:	4798      	blx	r3
    671c:	7c2b      	ldrb	r3, [r5, #16]
    671e:	079b      	lsls	r3, r3, #30
    6720:	0f9b      	lsrs	r3, r3, #30
    6722:	2b01      	cmp	r3, #1
    6724:	d10b      	bne.n	673e <_mqtt_recv_handler+0x126>
    6726:	b2b6      	uxth	r6, r6
    6728:	1c20      	adds	r0, r4, #0
    672a:	2140      	movs	r1, #64	; 0x40
    672c:	1c32      	adds	r2, r6, #0
    672e:	4b28      	ldr	r3, [pc, #160]	; (67d0 <_mqtt_recv_handler+0x1b8>)
    6730:	4798      	blx	r3
    6732:	2800      	cmp	r0, #0
    6734:	d048      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    6736:	1c23      	adds	r3, r4, #0
    6738:	3348      	adds	r3, #72	; 0x48
    673a:	2240      	movs	r2, #64	; 0x40
    673c:	e00c      	b.n	6758 <_mqtt_recv_handler+0x140>
    673e:	2b02      	cmp	r3, #2
    6740:	d142      	bne.n	67c8 <_mqtt_recv_handler+0x1b0>
    6742:	b2b6      	uxth	r6, r6
    6744:	1c20      	adds	r0, r4, #0
    6746:	2150      	movs	r1, #80	; 0x50
    6748:	1c32      	adds	r2, r6, #0
    674a:	4b21      	ldr	r3, [pc, #132]	; (67d0 <_mqtt_recv_handler+0x1b8>)
    674c:	4798      	blx	r3
    674e:	2800      	cmp	r0, #0
    6750:	d03a      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    6752:	1c23      	adds	r3, r4, #0
    6754:	3348      	adds	r3, #72	; 0x48
    6756:	2250      	movs	r2, #80	; 0x50
    6758:	344a      	adds	r4, #74	; 0x4a
    675a:	701a      	strb	r2, [r3, #0]
    675c:	8026      	strh	r6, [r4, #0]
    675e:	e033      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    6760:	7885      	ldrb	r5, [r0, #2]
    6762:	78c3      	ldrb	r3, [r0, #3]
    6764:	022d      	lsls	r5, r5, #8
    6766:	431d      	orrs	r5, r3
    6768:	1c20      	adds	r0, r4, #0
    676a:	2162      	movs	r1, #98	; 0x62
    676c:	1c2a      	adds	r2, r5, #0
    676e:	4b18      	ldr	r3, [pc, #96]	; (67d0 <_mqtt_recv_handler+0x1b8>)
    6770:	4798      	blx	r3
    6772:	2800      	cmp	r0, #0
    6774:	d028      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    6776:	1c23      	adds	r3, r4, #0
    6778:	3348      	adds	r3, #72	; 0x48
    677a:	2260      	movs	r2, #96	; 0x60
    677c:	e00d      	b.n	679a <_mqtt_recv_handler+0x182>
    677e:	7885      	ldrb	r5, [r0, #2]
    6780:	78c3      	ldrb	r3, [r0, #3]
    6782:	022d      	lsls	r5, r5, #8
    6784:	431d      	orrs	r5, r3
    6786:	1c20      	adds	r0, r4, #0
    6788:	2170      	movs	r1, #112	; 0x70
    678a:	1c2a      	adds	r2, r5, #0
    678c:	4b10      	ldr	r3, [pc, #64]	; (67d0 <_mqtt_recv_handler+0x1b8>)
    678e:	4798      	blx	r3
    6790:	2800      	cmp	r0, #0
    6792:	d019      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    6794:	1c23      	adds	r3, r4, #0
    6796:	3348      	adds	r3, #72	; 0x48
    6798:	2270      	movs	r2, #112	; 0x70
    679a:	344a      	adds	r4, #74	; 0x4a
    679c:	701a      	strb	r2, [r3, #0]
    679e:	8025      	strh	r5, [r4, #0]
    67a0:	e012      	b.n	67c8 <_mqtt_recv_handler+0x1b0>
    67a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67a4:	2b00      	cmp	r3, #0
    67a6:	d00f      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    67a8:	1c20      	adds	r0, r4, #0
    67aa:	2102      	movs	r1, #2
    67ac:	e00a      	b.n	67c4 <_mqtt_recv_handler+0x1ac>
    67ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67b0:	2b00      	cmp	r3, #0
    67b2:	d009      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    67b4:	1c20      	adds	r0, r4, #0
    67b6:	2103      	movs	r1, #3
    67b8:	e004      	b.n	67c4 <_mqtt_recv_handler+0x1ac>
    67ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    67bc:	2b00      	cmp	r3, #0
    67be:	d003      	beq.n	67c8 <_mqtt_recv_handler+0x1b0>
    67c0:	1c20      	adds	r0, r4, #0
    67c2:	2104      	movs	r1, #4
    67c4:	aa01      	add	r2, sp, #4
    67c6:	4798      	blx	r3
    67c8:	b007      	add	sp, #28
    67ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67cc:	00006575 	.word	0x00006575
    67d0:	000064c1 	.word	0x000064c1

000067d4 <mqtt_recv_packet>:
    67d4:	b538      	push	{r3, r4, r5, lr}
    67d6:	1e04      	subs	r4, r0, #0
    67d8:	d017      	beq.n	680a <mqtt_recv_packet+0x36>
    67da:	6c42      	ldr	r2, [r0, #68]	; 0x44
    67dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
    67de:	429a      	cmp	r2, r3
    67e0:	d906      	bls.n	67f0 <mqtt_recv_packet+0x1c>
    67e2:	238b      	movs	r3, #139	; 0x8b
    67e4:	425b      	negs	r3, r3
    67e6:	64c3      	str	r3, [r0, #76]	; 0x4c
    67e8:	2100      	movs	r1, #0
    67ea:	4b08      	ldr	r3, [pc, #32]	; (680c <mqtt_recv_packet+0x38>)
    67ec:	4798      	blx	r3
    67ee:	e00c      	b.n	680a <mqtt_recv_packet+0x36>
    67f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    67f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    67f4:	2002      	movs	r0, #2
    67f6:	1899      	adds	r1, r3, r2
    67f8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    67fa:	5620      	ldrsb	r0, [r4, r0]
    67fc:	1a9a      	subs	r2, r3, r2
    67fe:	b292      	uxth	r2, r2
    6800:	2300      	movs	r3, #0
    6802:	4d03      	ldr	r5, [pc, #12]	; (6810 <mqtt_recv_packet+0x3c>)
    6804:	47a8      	blx	r5
    6806:	2800      	cmp	r0, #0
    6808:	d1f2      	bne.n	67f0 <mqtt_recv_packet+0x1c>
    680a:	bd38      	pop	{r3, r4, r5, pc}
    680c:	00006575 	.word	0x00006575
    6810:	00003041 	.word	0x00003041

00006814 <mqtt_recved_packet>:
    6814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6816:	1e04      	subs	r4, r0, #0
    6818:	d042      	beq.n	68a0 <mqtt_recved_packet+0x8c>
    681a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    681c:	6e67      	ldr	r7, [r4, #100]	; 0x64
    681e:	18ca      	adds	r2, r1, r3
    6820:	2301      	movs	r3, #1
    6822:	9701      	str	r7, [sp, #4]
    6824:	6462      	str	r2, [r4, #68]	; 0x44
    6826:	2600      	movs	r6, #0
    6828:	1c1d      	adds	r5, r3, #0
    682a:	42a9      	cmp	r1, r5
    682c:	dc03      	bgt.n	6836 <mqtt_recved_packet+0x22>
    682e:	1c20      	adds	r0, r4, #0
    6830:	4b1c      	ldr	r3, [pc, #112]	; (68a4 <mqtt_recved_packet+0x90>)
    6832:	4798      	blx	r3
    6834:	e034      	b.n	68a0 <mqtt_recved_packet+0x8c>
    6836:	9f01      	ldr	r7, [sp, #4]
    6838:	5d78      	ldrb	r0, [r7, r5]
    683a:	01df      	lsls	r7, r3, #7
    683c:	46bc      	mov	ip, r7
    683e:	2d03      	cmp	r5, #3
    6840:	d101      	bne.n	6846 <mqtt_recved_packet+0x32>
    6842:	234d      	movs	r3, #77	; 0x4d
    6844:	e00e      	b.n	6864 <mqtt_recved_packet+0x50>
    6846:	277f      	movs	r7, #127	; 0x7f
    6848:	4007      	ands	r7, r0
    684a:	437b      	muls	r3, r7
    684c:	b240      	sxtb	r0, r0
    684e:	3501      	adds	r5, #1
    6850:	18f6      	adds	r6, r6, r3
    6852:	2800      	cmp	r0, #0
    6854:	da01      	bge.n	685a <mqtt_recved_packet+0x46>
    6856:	4663      	mov	r3, ip
    6858:	e7e7      	b.n	682a <mqtt_recved_packet+0x16>
    685a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    685c:	19af      	adds	r7, r5, r6
    685e:	429f      	cmp	r7, r3
    6860:	d907      	bls.n	6872 <mqtt_recved_packet+0x5e>
    6862:	238b      	movs	r3, #139	; 0x8b
    6864:	425b      	negs	r3, r3
    6866:	64e3      	str	r3, [r4, #76]	; 0x4c
    6868:	1c20      	adds	r0, r4, #0
    686a:	2100      	movs	r1, #0
    686c:	4b0e      	ldr	r3, [pc, #56]	; (68a8 <mqtt_recved_packet+0x94>)
    686e:	4798      	blx	r3
    6870:	e016      	b.n	68a0 <mqtt_recved_packet+0x8c>
    6872:	42ba      	cmp	r2, r7
    6874:	d314      	bcc.n	68a0 <mqtt_recved_packet+0x8c>
    6876:	4b0d      	ldr	r3, [pc, #52]	; (68ac <mqtt_recved_packet+0x98>)
    6878:	1c20      	adds	r0, r4, #0
    687a:	1c31      	adds	r1, r6, #0
    687c:	4798      	blx	r3
    687e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6880:	42bb      	cmp	r3, r7
    6882:	d102      	bne.n	688a <mqtt_recved_packet+0x76>
    6884:	2300      	movs	r3, #0
    6886:	6463      	str	r3, [r4, #68]	; 0x44
    6888:	e00a      	b.n	68a0 <mqtt_recved_packet+0x8c>
    688a:	1b9e      	subs	r6, r3, r6
    688c:	9b01      	ldr	r3, [sp, #4]
    688e:	1b75      	subs	r5, r6, r5
    6890:	19d9      	adds	r1, r3, r7
    6892:	1c18      	adds	r0, r3, #0
    6894:	1c2a      	adds	r2, r5, #0
    6896:	4b06      	ldr	r3, [pc, #24]	; (68b0 <mqtt_recved_packet+0x9c>)
    6898:	4798      	blx	r3
    689a:	6465      	str	r5, [r4, #68]	; 0x44
    689c:	2100      	movs	r1, #0
    689e:	e7bc      	b.n	681a <mqtt_recved_packet+0x6>
    68a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	000067d5 	.word	0x000067d5
    68a8:	00006575 	.word	0x00006575
    68ac:	00006619 	.word	0x00006619
    68b0:	00006d77 	.word	0x00006d77

000068b4 <mqtt_socket_event_handler>:
    68b4:	b570      	push	{r4, r5, r6, lr}
    68b6:	4d37      	ldr	r5, [pc, #220]	; (6994 <mqtt_socket_event_handler+0xe0>)
    68b8:	0086      	lsls	r6, r0, #2
    68ba:	5974      	ldr	r4, [r6, r5]
    68bc:	b086      	sub	sp, #24
    68be:	2c00      	cmp	r4, #0
    68c0:	d066      	beq.n	6990 <mqtt_socket_event_handler+0xdc>
    68c2:	2906      	cmp	r1, #6
    68c4:	d02b      	beq.n	691e <mqtt_socket_event_handler+0x6a>
    68c6:	2907      	cmp	r1, #7
    68c8:	d039      	beq.n	693e <mqtt_socket_event_handler+0x8a>
    68ca:	2905      	cmp	r1, #5
    68cc:	d160      	bne.n	6990 <mqtt_socket_event_handler+0xdc>
    68ce:	2001      	movs	r0, #1
    68d0:	5610      	ldrsb	r0, [r2, r0]
    68d2:	4b31      	ldr	r3, [pc, #196]	; (6998 <mqtt_socket_event_handler+0xe4>)
    68d4:	4798      	blx	r3
    68d6:	9001      	str	r0, [sp, #4]
    68d8:	2800      	cmp	r0, #0
    68da:	da06      	bge.n	68ea <mqtt_socket_event_handler+0x36>
    68dc:	2002      	movs	r0, #2
    68de:	4b2f      	ldr	r3, [pc, #188]	; (699c <mqtt_socket_event_handler+0xe8>)
    68e0:	5620      	ldrsb	r0, [r4, r0]
    68e2:	4798      	blx	r3
    68e4:	2300      	movs	r3, #0
    68e6:	5173      	str	r3, [r6, r5]
    68e8:	e011      	b.n	690e <mqtt_socket_event_handler+0x5a>
    68ea:	1c23      	adds	r3, r4, #0
    68ec:	3343      	adds	r3, #67	; 0x43
    68ee:	781a      	ldrb	r2, [r3, #0]
    68f0:	2101      	movs	r1, #1
    68f2:	430a      	orrs	r2, r1
    68f4:	701a      	strb	r2, [r3, #0]
    68f6:	331d      	adds	r3, #29
    68f8:	881b      	ldrh	r3, [r3, #0]
    68fa:	2b00      	cmp	r3, #0
    68fc:	d004      	beq.n	6908 <mqtt_socket_event_handler+0x54>
    68fe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6900:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6902:	2200      	movs	r2, #0
    6904:	4b26      	ldr	r3, [pc, #152]	; (69a0 <mqtt_socket_event_handler+0xec>)
    6906:	4798      	blx	r3
    6908:	1c20      	adds	r0, r4, #0
    690a:	4b26      	ldr	r3, [pc, #152]	; (69a4 <mqtt_socket_event_handler+0xf0>)
    690c:	4798      	blx	r3
    690e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6910:	2b00      	cmp	r3, #0
    6912:	d03d      	beq.n	6990 <mqtt_socket_event_handler+0xdc>
    6914:	1c20      	adds	r0, r4, #0
    6916:	2100      	movs	r1, #0
    6918:	aa01      	add	r2, sp, #4
    691a:	4798      	blx	r3
    691c:	e038      	b.n	6990 <mqtt_socket_event_handler+0xdc>
    691e:	2304      	movs	r3, #4
    6920:	5ed1      	ldrsh	r1, [r2, r3]
    6922:	2900      	cmp	r1, #0
    6924:	dd03      	ble.n	692e <mqtt_socket_event_handler+0x7a>
    6926:	1c20      	adds	r0, r4, #0
    6928:	4b1f      	ldr	r3, [pc, #124]	; (69a8 <mqtt_socket_event_handler+0xf4>)
    692a:	4798      	blx	r3
    692c:	e003      	b.n	6936 <mqtt_socket_event_handler+0x82>
    692e:	1c0b      	adds	r3, r1, #0
    6930:	1c08      	adds	r0, r1, #0
    6932:	330d      	adds	r3, #13
    6934:	d11a      	bne.n	696c <mqtt_socket_event_handler+0xb8>
    6936:	4b1b      	ldr	r3, [pc, #108]	; (69a4 <mqtt_socket_event_handler+0xf0>)
    6938:	1c20      	adds	r0, r4, #0
    693a:	4798      	blx	r3
    693c:	e028      	b.n	6990 <mqtt_socket_event_handler+0xdc>
    693e:	1c23      	adds	r3, r4, #0
    6940:	3343      	adds	r3, #67	; 0x43
    6942:	8810      	ldrh	r0, [r2, #0]
    6944:	781a      	ldrb	r2, [r3, #0]
    6946:	0751      	lsls	r1, r2, #29
    6948:	d402      	bmi.n	6950 <mqtt_socket_event_handler+0x9c>
    694a:	2108      	movs	r1, #8
    694c:	438a      	bics	r2, r1
    694e:	701a      	strb	r2, [r3, #0]
    6950:	781a      	ldrb	r2, [r3, #0]
    6952:	2104      	movs	r1, #4
    6954:	438a      	bics	r2, r1
    6956:	701a      	strb	r2, [r3, #0]
    6958:	06d3      	lsls	r3, r2, #27
    695a:	0fde      	lsrs	r6, r3, #31
    695c:	b200      	sxth	r0, r0
    695e:	2b00      	cmp	r3, #0
    6960:	db02      	blt.n	6968 <mqtt_socket_event_handler+0xb4>
    6962:	2800      	cmp	r0, #0
    6964:	da08      	bge.n	6978 <mqtt_socket_event_handler+0xc4>
    6966:	e001      	b.n	696c <mqtt_socket_event_handler+0xb8>
    6968:	2800      	cmp	r0, #0
    696a:	da02      	bge.n	6972 <mqtt_socket_event_handler+0xbe>
    696c:	4b0a      	ldr	r3, [pc, #40]	; (6998 <mqtt_socket_event_handler+0xe4>)
    696e:	4798      	blx	r3
    6970:	64e0      	str	r0, [r4, #76]	; 0x4c
    6972:	1c20      	adds	r0, r4, #0
    6974:	4b0d      	ldr	r3, [pc, #52]	; (69ac <mqtt_socket_event_handler+0xf8>)
    6976:	e7e0      	b.n	693a <mqtt_socket_event_handler+0x86>
    6978:	1c25      	adds	r5, r4, #0
    697a:	3548      	adds	r5, #72	; 0x48
    697c:	7829      	ldrb	r1, [r5, #0]
    697e:	2900      	cmp	r1, #0
    6980:	d006      	beq.n	6990 <mqtt_socket_event_handler+0xdc>
    6982:	1c23      	adds	r3, r4, #0
    6984:	334a      	adds	r3, #74	; 0x4a
    6986:	881a      	ldrh	r2, [r3, #0]
    6988:	1c20      	adds	r0, r4, #0
    698a:	4b09      	ldr	r3, [pc, #36]	; (69b0 <mqtt_socket_event_handler+0xfc>)
    698c:	4798      	blx	r3
    698e:	702e      	strb	r6, [r5, #0]
    6990:	b006      	add	sp, #24
    6992:	bd70      	pop	{r4, r5, r6, pc}
    6994:	20000404 	.word	0x20000404
    6998:	00005ba5 	.word	0x00005ba5
    699c:	000030d5 	.word	0x000030d5
    69a0:	000055c1 	.word	0x000055c1
    69a4:	000067d5 	.word	0x000067d5
    69a8:	00006815 	.word	0x00006815
    69ac:	00006525 	.word	0x00006525
    69b0:	000064c1 	.word	0x000064c1

000069b4 <__gnu_thumb1_case_uqi>:
    69b4:	b402      	push	{r1}
    69b6:	4671      	mov	r1, lr
    69b8:	0849      	lsrs	r1, r1, #1
    69ba:	0049      	lsls	r1, r1, #1
    69bc:	5c09      	ldrb	r1, [r1, r0]
    69be:	0049      	lsls	r1, r1, #1
    69c0:	448e      	add	lr, r1
    69c2:	bc02      	pop	{r1}
    69c4:	4770      	bx	lr
    69c6:	46c0      	nop			; (mov r8, r8)

000069c8 <__udivsi3>:
    69c8:	2200      	movs	r2, #0
    69ca:	0843      	lsrs	r3, r0, #1
    69cc:	428b      	cmp	r3, r1
    69ce:	d374      	bcc.n	6aba <__udivsi3+0xf2>
    69d0:	0903      	lsrs	r3, r0, #4
    69d2:	428b      	cmp	r3, r1
    69d4:	d35f      	bcc.n	6a96 <__udivsi3+0xce>
    69d6:	0a03      	lsrs	r3, r0, #8
    69d8:	428b      	cmp	r3, r1
    69da:	d344      	bcc.n	6a66 <__udivsi3+0x9e>
    69dc:	0b03      	lsrs	r3, r0, #12
    69de:	428b      	cmp	r3, r1
    69e0:	d328      	bcc.n	6a34 <__udivsi3+0x6c>
    69e2:	0c03      	lsrs	r3, r0, #16
    69e4:	428b      	cmp	r3, r1
    69e6:	d30d      	bcc.n	6a04 <__udivsi3+0x3c>
    69e8:	22ff      	movs	r2, #255	; 0xff
    69ea:	0209      	lsls	r1, r1, #8
    69ec:	ba12      	rev	r2, r2
    69ee:	0c03      	lsrs	r3, r0, #16
    69f0:	428b      	cmp	r3, r1
    69f2:	d302      	bcc.n	69fa <__udivsi3+0x32>
    69f4:	1212      	asrs	r2, r2, #8
    69f6:	0209      	lsls	r1, r1, #8
    69f8:	d065      	beq.n	6ac6 <__udivsi3+0xfe>
    69fa:	0b03      	lsrs	r3, r0, #12
    69fc:	428b      	cmp	r3, r1
    69fe:	d319      	bcc.n	6a34 <__udivsi3+0x6c>
    6a00:	e000      	b.n	6a04 <__udivsi3+0x3c>
    6a02:	0a09      	lsrs	r1, r1, #8
    6a04:	0bc3      	lsrs	r3, r0, #15
    6a06:	428b      	cmp	r3, r1
    6a08:	d301      	bcc.n	6a0e <__udivsi3+0x46>
    6a0a:	03cb      	lsls	r3, r1, #15
    6a0c:	1ac0      	subs	r0, r0, r3
    6a0e:	4152      	adcs	r2, r2
    6a10:	0b83      	lsrs	r3, r0, #14
    6a12:	428b      	cmp	r3, r1
    6a14:	d301      	bcc.n	6a1a <__udivsi3+0x52>
    6a16:	038b      	lsls	r3, r1, #14
    6a18:	1ac0      	subs	r0, r0, r3
    6a1a:	4152      	adcs	r2, r2
    6a1c:	0b43      	lsrs	r3, r0, #13
    6a1e:	428b      	cmp	r3, r1
    6a20:	d301      	bcc.n	6a26 <__udivsi3+0x5e>
    6a22:	034b      	lsls	r3, r1, #13
    6a24:	1ac0      	subs	r0, r0, r3
    6a26:	4152      	adcs	r2, r2
    6a28:	0b03      	lsrs	r3, r0, #12
    6a2a:	428b      	cmp	r3, r1
    6a2c:	d301      	bcc.n	6a32 <__udivsi3+0x6a>
    6a2e:	030b      	lsls	r3, r1, #12
    6a30:	1ac0      	subs	r0, r0, r3
    6a32:	4152      	adcs	r2, r2
    6a34:	0ac3      	lsrs	r3, r0, #11
    6a36:	428b      	cmp	r3, r1
    6a38:	d301      	bcc.n	6a3e <__udivsi3+0x76>
    6a3a:	02cb      	lsls	r3, r1, #11
    6a3c:	1ac0      	subs	r0, r0, r3
    6a3e:	4152      	adcs	r2, r2
    6a40:	0a83      	lsrs	r3, r0, #10
    6a42:	428b      	cmp	r3, r1
    6a44:	d301      	bcc.n	6a4a <__udivsi3+0x82>
    6a46:	028b      	lsls	r3, r1, #10
    6a48:	1ac0      	subs	r0, r0, r3
    6a4a:	4152      	adcs	r2, r2
    6a4c:	0a43      	lsrs	r3, r0, #9
    6a4e:	428b      	cmp	r3, r1
    6a50:	d301      	bcc.n	6a56 <__udivsi3+0x8e>
    6a52:	024b      	lsls	r3, r1, #9
    6a54:	1ac0      	subs	r0, r0, r3
    6a56:	4152      	adcs	r2, r2
    6a58:	0a03      	lsrs	r3, r0, #8
    6a5a:	428b      	cmp	r3, r1
    6a5c:	d301      	bcc.n	6a62 <__udivsi3+0x9a>
    6a5e:	020b      	lsls	r3, r1, #8
    6a60:	1ac0      	subs	r0, r0, r3
    6a62:	4152      	adcs	r2, r2
    6a64:	d2cd      	bcs.n	6a02 <__udivsi3+0x3a>
    6a66:	09c3      	lsrs	r3, r0, #7
    6a68:	428b      	cmp	r3, r1
    6a6a:	d301      	bcc.n	6a70 <__udivsi3+0xa8>
    6a6c:	01cb      	lsls	r3, r1, #7
    6a6e:	1ac0      	subs	r0, r0, r3
    6a70:	4152      	adcs	r2, r2
    6a72:	0983      	lsrs	r3, r0, #6
    6a74:	428b      	cmp	r3, r1
    6a76:	d301      	bcc.n	6a7c <__udivsi3+0xb4>
    6a78:	018b      	lsls	r3, r1, #6
    6a7a:	1ac0      	subs	r0, r0, r3
    6a7c:	4152      	adcs	r2, r2
    6a7e:	0943      	lsrs	r3, r0, #5
    6a80:	428b      	cmp	r3, r1
    6a82:	d301      	bcc.n	6a88 <__udivsi3+0xc0>
    6a84:	014b      	lsls	r3, r1, #5
    6a86:	1ac0      	subs	r0, r0, r3
    6a88:	4152      	adcs	r2, r2
    6a8a:	0903      	lsrs	r3, r0, #4
    6a8c:	428b      	cmp	r3, r1
    6a8e:	d301      	bcc.n	6a94 <__udivsi3+0xcc>
    6a90:	010b      	lsls	r3, r1, #4
    6a92:	1ac0      	subs	r0, r0, r3
    6a94:	4152      	adcs	r2, r2
    6a96:	08c3      	lsrs	r3, r0, #3
    6a98:	428b      	cmp	r3, r1
    6a9a:	d301      	bcc.n	6aa0 <__udivsi3+0xd8>
    6a9c:	00cb      	lsls	r3, r1, #3
    6a9e:	1ac0      	subs	r0, r0, r3
    6aa0:	4152      	adcs	r2, r2
    6aa2:	0883      	lsrs	r3, r0, #2
    6aa4:	428b      	cmp	r3, r1
    6aa6:	d301      	bcc.n	6aac <__udivsi3+0xe4>
    6aa8:	008b      	lsls	r3, r1, #2
    6aaa:	1ac0      	subs	r0, r0, r3
    6aac:	4152      	adcs	r2, r2
    6aae:	0843      	lsrs	r3, r0, #1
    6ab0:	428b      	cmp	r3, r1
    6ab2:	d301      	bcc.n	6ab8 <__udivsi3+0xf0>
    6ab4:	004b      	lsls	r3, r1, #1
    6ab6:	1ac0      	subs	r0, r0, r3
    6ab8:	4152      	adcs	r2, r2
    6aba:	1a41      	subs	r1, r0, r1
    6abc:	d200      	bcs.n	6ac0 <__udivsi3+0xf8>
    6abe:	4601      	mov	r1, r0
    6ac0:	4152      	adcs	r2, r2
    6ac2:	4610      	mov	r0, r2
    6ac4:	4770      	bx	lr
    6ac6:	e7ff      	b.n	6ac8 <__udivsi3+0x100>
    6ac8:	b501      	push	{r0, lr}
    6aca:	2000      	movs	r0, #0
    6acc:	f000 f8f0 	bl	6cb0 <__aeabi_idiv0>
    6ad0:	bd02      	pop	{r1, pc}
    6ad2:	46c0      	nop			; (mov r8, r8)

00006ad4 <__aeabi_uidivmod>:
    6ad4:	2900      	cmp	r1, #0
    6ad6:	d0f7      	beq.n	6ac8 <__udivsi3+0x100>
    6ad8:	e776      	b.n	69c8 <__udivsi3>
    6ada:	4770      	bx	lr

00006adc <__divsi3>:
    6adc:	4603      	mov	r3, r0
    6ade:	430b      	orrs	r3, r1
    6ae0:	d47f      	bmi.n	6be2 <__divsi3+0x106>
    6ae2:	2200      	movs	r2, #0
    6ae4:	0843      	lsrs	r3, r0, #1
    6ae6:	428b      	cmp	r3, r1
    6ae8:	d374      	bcc.n	6bd4 <__divsi3+0xf8>
    6aea:	0903      	lsrs	r3, r0, #4
    6aec:	428b      	cmp	r3, r1
    6aee:	d35f      	bcc.n	6bb0 <__divsi3+0xd4>
    6af0:	0a03      	lsrs	r3, r0, #8
    6af2:	428b      	cmp	r3, r1
    6af4:	d344      	bcc.n	6b80 <__divsi3+0xa4>
    6af6:	0b03      	lsrs	r3, r0, #12
    6af8:	428b      	cmp	r3, r1
    6afa:	d328      	bcc.n	6b4e <__divsi3+0x72>
    6afc:	0c03      	lsrs	r3, r0, #16
    6afe:	428b      	cmp	r3, r1
    6b00:	d30d      	bcc.n	6b1e <__divsi3+0x42>
    6b02:	22ff      	movs	r2, #255	; 0xff
    6b04:	0209      	lsls	r1, r1, #8
    6b06:	ba12      	rev	r2, r2
    6b08:	0c03      	lsrs	r3, r0, #16
    6b0a:	428b      	cmp	r3, r1
    6b0c:	d302      	bcc.n	6b14 <__divsi3+0x38>
    6b0e:	1212      	asrs	r2, r2, #8
    6b10:	0209      	lsls	r1, r1, #8
    6b12:	d065      	beq.n	6be0 <__divsi3+0x104>
    6b14:	0b03      	lsrs	r3, r0, #12
    6b16:	428b      	cmp	r3, r1
    6b18:	d319      	bcc.n	6b4e <__divsi3+0x72>
    6b1a:	e000      	b.n	6b1e <__divsi3+0x42>
    6b1c:	0a09      	lsrs	r1, r1, #8
    6b1e:	0bc3      	lsrs	r3, r0, #15
    6b20:	428b      	cmp	r3, r1
    6b22:	d301      	bcc.n	6b28 <__divsi3+0x4c>
    6b24:	03cb      	lsls	r3, r1, #15
    6b26:	1ac0      	subs	r0, r0, r3
    6b28:	4152      	adcs	r2, r2
    6b2a:	0b83      	lsrs	r3, r0, #14
    6b2c:	428b      	cmp	r3, r1
    6b2e:	d301      	bcc.n	6b34 <__divsi3+0x58>
    6b30:	038b      	lsls	r3, r1, #14
    6b32:	1ac0      	subs	r0, r0, r3
    6b34:	4152      	adcs	r2, r2
    6b36:	0b43      	lsrs	r3, r0, #13
    6b38:	428b      	cmp	r3, r1
    6b3a:	d301      	bcc.n	6b40 <__divsi3+0x64>
    6b3c:	034b      	lsls	r3, r1, #13
    6b3e:	1ac0      	subs	r0, r0, r3
    6b40:	4152      	adcs	r2, r2
    6b42:	0b03      	lsrs	r3, r0, #12
    6b44:	428b      	cmp	r3, r1
    6b46:	d301      	bcc.n	6b4c <__divsi3+0x70>
    6b48:	030b      	lsls	r3, r1, #12
    6b4a:	1ac0      	subs	r0, r0, r3
    6b4c:	4152      	adcs	r2, r2
    6b4e:	0ac3      	lsrs	r3, r0, #11
    6b50:	428b      	cmp	r3, r1
    6b52:	d301      	bcc.n	6b58 <__divsi3+0x7c>
    6b54:	02cb      	lsls	r3, r1, #11
    6b56:	1ac0      	subs	r0, r0, r3
    6b58:	4152      	adcs	r2, r2
    6b5a:	0a83      	lsrs	r3, r0, #10
    6b5c:	428b      	cmp	r3, r1
    6b5e:	d301      	bcc.n	6b64 <__divsi3+0x88>
    6b60:	028b      	lsls	r3, r1, #10
    6b62:	1ac0      	subs	r0, r0, r3
    6b64:	4152      	adcs	r2, r2
    6b66:	0a43      	lsrs	r3, r0, #9
    6b68:	428b      	cmp	r3, r1
    6b6a:	d301      	bcc.n	6b70 <__divsi3+0x94>
    6b6c:	024b      	lsls	r3, r1, #9
    6b6e:	1ac0      	subs	r0, r0, r3
    6b70:	4152      	adcs	r2, r2
    6b72:	0a03      	lsrs	r3, r0, #8
    6b74:	428b      	cmp	r3, r1
    6b76:	d301      	bcc.n	6b7c <__divsi3+0xa0>
    6b78:	020b      	lsls	r3, r1, #8
    6b7a:	1ac0      	subs	r0, r0, r3
    6b7c:	4152      	adcs	r2, r2
    6b7e:	d2cd      	bcs.n	6b1c <__divsi3+0x40>
    6b80:	09c3      	lsrs	r3, r0, #7
    6b82:	428b      	cmp	r3, r1
    6b84:	d301      	bcc.n	6b8a <__divsi3+0xae>
    6b86:	01cb      	lsls	r3, r1, #7
    6b88:	1ac0      	subs	r0, r0, r3
    6b8a:	4152      	adcs	r2, r2
    6b8c:	0983      	lsrs	r3, r0, #6
    6b8e:	428b      	cmp	r3, r1
    6b90:	d301      	bcc.n	6b96 <__divsi3+0xba>
    6b92:	018b      	lsls	r3, r1, #6
    6b94:	1ac0      	subs	r0, r0, r3
    6b96:	4152      	adcs	r2, r2
    6b98:	0943      	lsrs	r3, r0, #5
    6b9a:	428b      	cmp	r3, r1
    6b9c:	d301      	bcc.n	6ba2 <__divsi3+0xc6>
    6b9e:	014b      	lsls	r3, r1, #5
    6ba0:	1ac0      	subs	r0, r0, r3
    6ba2:	4152      	adcs	r2, r2
    6ba4:	0903      	lsrs	r3, r0, #4
    6ba6:	428b      	cmp	r3, r1
    6ba8:	d301      	bcc.n	6bae <__divsi3+0xd2>
    6baa:	010b      	lsls	r3, r1, #4
    6bac:	1ac0      	subs	r0, r0, r3
    6bae:	4152      	adcs	r2, r2
    6bb0:	08c3      	lsrs	r3, r0, #3
    6bb2:	428b      	cmp	r3, r1
    6bb4:	d301      	bcc.n	6bba <__divsi3+0xde>
    6bb6:	00cb      	lsls	r3, r1, #3
    6bb8:	1ac0      	subs	r0, r0, r3
    6bba:	4152      	adcs	r2, r2
    6bbc:	0883      	lsrs	r3, r0, #2
    6bbe:	428b      	cmp	r3, r1
    6bc0:	d301      	bcc.n	6bc6 <__divsi3+0xea>
    6bc2:	008b      	lsls	r3, r1, #2
    6bc4:	1ac0      	subs	r0, r0, r3
    6bc6:	4152      	adcs	r2, r2
    6bc8:	0843      	lsrs	r3, r0, #1
    6bca:	428b      	cmp	r3, r1
    6bcc:	d301      	bcc.n	6bd2 <__divsi3+0xf6>
    6bce:	004b      	lsls	r3, r1, #1
    6bd0:	1ac0      	subs	r0, r0, r3
    6bd2:	4152      	adcs	r2, r2
    6bd4:	1a41      	subs	r1, r0, r1
    6bd6:	d200      	bcs.n	6bda <__divsi3+0xfe>
    6bd8:	4601      	mov	r1, r0
    6bda:	4152      	adcs	r2, r2
    6bdc:	4610      	mov	r0, r2
    6bde:	4770      	bx	lr
    6be0:	e05d      	b.n	6c9e <__divsi3+0x1c2>
    6be2:	0fca      	lsrs	r2, r1, #31
    6be4:	d000      	beq.n	6be8 <__divsi3+0x10c>
    6be6:	4249      	negs	r1, r1
    6be8:	1003      	asrs	r3, r0, #32
    6bea:	d300      	bcc.n	6bee <__divsi3+0x112>
    6bec:	4240      	negs	r0, r0
    6bee:	4053      	eors	r3, r2
    6bf0:	2200      	movs	r2, #0
    6bf2:	469c      	mov	ip, r3
    6bf4:	0903      	lsrs	r3, r0, #4
    6bf6:	428b      	cmp	r3, r1
    6bf8:	d32d      	bcc.n	6c56 <__divsi3+0x17a>
    6bfa:	0a03      	lsrs	r3, r0, #8
    6bfc:	428b      	cmp	r3, r1
    6bfe:	d312      	bcc.n	6c26 <__divsi3+0x14a>
    6c00:	22fc      	movs	r2, #252	; 0xfc
    6c02:	0189      	lsls	r1, r1, #6
    6c04:	ba12      	rev	r2, r2
    6c06:	0a03      	lsrs	r3, r0, #8
    6c08:	428b      	cmp	r3, r1
    6c0a:	d30c      	bcc.n	6c26 <__divsi3+0x14a>
    6c0c:	0189      	lsls	r1, r1, #6
    6c0e:	1192      	asrs	r2, r2, #6
    6c10:	428b      	cmp	r3, r1
    6c12:	d308      	bcc.n	6c26 <__divsi3+0x14a>
    6c14:	0189      	lsls	r1, r1, #6
    6c16:	1192      	asrs	r2, r2, #6
    6c18:	428b      	cmp	r3, r1
    6c1a:	d304      	bcc.n	6c26 <__divsi3+0x14a>
    6c1c:	0189      	lsls	r1, r1, #6
    6c1e:	d03a      	beq.n	6c96 <__divsi3+0x1ba>
    6c20:	1192      	asrs	r2, r2, #6
    6c22:	e000      	b.n	6c26 <__divsi3+0x14a>
    6c24:	0989      	lsrs	r1, r1, #6
    6c26:	09c3      	lsrs	r3, r0, #7
    6c28:	428b      	cmp	r3, r1
    6c2a:	d301      	bcc.n	6c30 <__divsi3+0x154>
    6c2c:	01cb      	lsls	r3, r1, #7
    6c2e:	1ac0      	subs	r0, r0, r3
    6c30:	4152      	adcs	r2, r2
    6c32:	0983      	lsrs	r3, r0, #6
    6c34:	428b      	cmp	r3, r1
    6c36:	d301      	bcc.n	6c3c <__divsi3+0x160>
    6c38:	018b      	lsls	r3, r1, #6
    6c3a:	1ac0      	subs	r0, r0, r3
    6c3c:	4152      	adcs	r2, r2
    6c3e:	0943      	lsrs	r3, r0, #5
    6c40:	428b      	cmp	r3, r1
    6c42:	d301      	bcc.n	6c48 <__divsi3+0x16c>
    6c44:	014b      	lsls	r3, r1, #5
    6c46:	1ac0      	subs	r0, r0, r3
    6c48:	4152      	adcs	r2, r2
    6c4a:	0903      	lsrs	r3, r0, #4
    6c4c:	428b      	cmp	r3, r1
    6c4e:	d301      	bcc.n	6c54 <__divsi3+0x178>
    6c50:	010b      	lsls	r3, r1, #4
    6c52:	1ac0      	subs	r0, r0, r3
    6c54:	4152      	adcs	r2, r2
    6c56:	08c3      	lsrs	r3, r0, #3
    6c58:	428b      	cmp	r3, r1
    6c5a:	d301      	bcc.n	6c60 <__divsi3+0x184>
    6c5c:	00cb      	lsls	r3, r1, #3
    6c5e:	1ac0      	subs	r0, r0, r3
    6c60:	4152      	adcs	r2, r2
    6c62:	0883      	lsrs	r3, r0, #2
    6c64:	428b      	cmp	r3, r1
    6c66:	d301      	bcc.n	6c6c <__divsi3+0x190>
    6c68:	008b      	lsls	r3, r1, #2
    6c6a:	1ac0      	subs	r0, r0, r3
    6c6c:	4152      	adcs	r2, r2
    6c6e:	d2d9      	bcs.n	6c24 <__divsi3+0x148>
    6c70:	0843      	lsrs	r3, r0, #1
    6c72:	428b      	cmp	r3, r1
    6c74:	d301      	bcc.n	6c7a <__divsi3+0x19e>
    6c76:	004b      	lsls	r3, r1, #1
    6c78:	1ac0      	subs	r0, r0, r3
    6c7a:	4152      	adcs	r2, r2
    6c7c:	1a41      	subs	r1, r0, r1
    6c7e:	d200      	bcs.n	6c82 <__divsi3+0x1a6>
    6c80:	4601      	mov	r1, r0
    6c82:	4663      	mov	r3, ip
    6c84:	4152      	adcs	r2, r2
    6c86:	105b      	asrs	r3, r3, #1
    6c88:	4610      	mov	r0, r2
    6c8a:	d301      	bcc.n	6c90 <__divsi3+0x1b4>
    6c8c:	4240      	negs	r0, r0
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d500      	bpl.n	6c94 <__divsi3+0x1b8>
    6c92:	4249      	negs	r1, r1
    6c94:	4770      	bx	lr
    6c96:	4663      	mov	r3, ip
    6c98:	105b      	asrs	r3, r3, #1
    6c9a:	d300      	bcc.n	6c9e <__divsi3+0x1c2>
    6c9c:	4240      	negs	r0, r0
    6c9e:	b501      	push	{r0, lr}
    6ca0:	2000      	movs	r0, #0
    6ca2:	f000 f805 	bl	6cb0 <__aeabi_idiv0>
    6ca6:	bd02      	pop	{r1, pc}

00006ca8 <__aeabi_idivmod>:
    6ca8:	2900      	cmp	r1, #0
    6caa:	d0f8      	beq.n	6c9e <__divsi3+0x1c2>
    6cac:	e716      	b.n	6adc <__divsi3>
    6cae:	4770      	bx	lr

00006cb0 <__aeabi_idiv0>:
    6cb0:	4770      	bx	lr
    6cb2:	46c0      	nop			; (mov r8, r8)

00006cb4 <__aeabi_lmul>:
    6cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cb6:	46ce      	mov	lr, r9
    6cb8:	4647      	mov	r7, r8
    6cba:	0415      	lsls	r5, r2, #16
    6cbc:	0c2d      	lsrs	r5, r5, #16
    6cbe:	002e      	movs	r6, r5
    6cc0:	b580      	push	{r7, lr}
    6cc2:	0407      	lsls	r7, r0, #16
    6cc4:	0c14      	lsrs	r4, r2, #16
    6cc6:	0c3f      	lsrs	r7, r7, #16
    6cc8:	4699      	mov	r9, r3
    6cca:	0c03      	lsrs	r3, r0, #16
    6ccc:	437e      	muls	r6, r7
    6cce:	435d      	muls	r5, r3
    6cd0:	4367      	muls	r7, r4
    6cd2:	4363      	muls	r3, r4
    6cd4:	197f      	adds	r7, r7, r5
    6cd6:	0c34      	lsrs	r4, r6, #16
    6cd8:	19e4      	adds	r4, r4, r7
    6cda:	469c      	mov	ip, r3
    6cdc:	42a5      	cmp	r5, r4
    6cde:	d903      	bls.n	6ce8 <__aeabi_lmul+0x34>
    6ce0:	2380      	movs	r3, #128	; 0x80
    6ce2:	025b      	lsls	r3, r3, #9
    6ce4:	4698      	mov	r8, r3
    6ce6:	44c4      	add	ip, r8
    6ce8:	464b      	mov	r3, r9
    6cea:	4351      	muls	r1, r2
    6cec:	4343      	muls	r3, r0
    6cee:	0436      	lsls	r6, r6, #16
    6cf0:	0c36      	lsrs	r6, r6, #16
    6cf2:	0c25      	lsrs	r5, r4, #16
    6cf4:	0424      	lsls	r4, r4, #16
    6cf6:	4465      	add	r5, ip
    6cf8:	19a4      	adds	r4, r4, r6
    6cfa:	1859      	adds	r1, r3, r1
    6cfc:	1949      	adds	r1, r1, r5
    6cfe:	0020      	movs	r0, r4
    6d00:	bc0c      	pop	{r2, r3}
    6d02:	4690      	mov	r8, r2
    6d04:	4699      	mov	r9, r3
    6d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d08 <__libc_init_array>:
    6d08:	b570      	push	{r4, r5, r6, lr}
    6d0a:	2600      	movs	r6, #0
    6d0c:	4d0c      	ldr	r5, [pc, #48]	; (6d40 <__libc_init_array+0x38>)
    6d0e:	4c0d      	ldr	r4, [pc, #52]	; (6d44 <__libc_init_array+0x3c>)
    6d10:	1b64      	subs	r4, r4, r5
    6d12:	10a4      	asrs	r4, r4, #2
    6d14:	42a6      	cmp	r6, r4
    6d16:	d109      	bne.n	6d2c <__libc_init_array+0x24>
    6d18:	2600      	movs	r6, #0
    6d1a:	f003 fa8b 	bl	a234 <_init>
    6d1e:	4d0a      	ldr	r5, [pc, #40]	; (6d48 <__libc_init_array+0x40>)
    6d20:	4c0a      	ldr	r4, [pc, #40]	; (6d4c <__libc_init_array+0x44>)
    6d22:	1b64      	subs	r4, r4, r5
    6d24:	10a4      	asrs	r4, r4, #2
    6d26:	42a6      	cmp	r6, r4
    6d28:	d105      	bne.n	6d36 <__libc_init_array+0x2e>
    6d2a:	bd70      	pop	{r4, r5, r6, pc}
    6d2c:	00b3      	lsls	r3, r6, #2
    6d2e:	58eb      	ldr	r3, [r5, r3]
    6d30:	4798      	blx	r3
    6d32:	3601      	adds	r6, #1
    6d34:	e7ee      	b.n	6d14 <__libc_init_array+0xc>
    6d36:	00b3      	lsls	r3, r6, #2
    6d38:	58eb      	ldr	r3, [r5, r3]
    6d3a:	4798      	blx	r3
    6d3c:	3601      	adds	r6, #1
    6d3e:	e7f2      	b.n	6d26 <__libc_init_array+0x1e>
    6d40:	0000a240 	.word	0x0000a240
    6d44:	0000a240 	.word	0x0000a240
    6d48:	0000a240 	.word	0x0000a240
    6d4c:	0000a244 	.word	0x0000a244

00006d50 <malloc>:
    6d50:	b510      	push	{r4, lr}
    6d52:	4b03      	ldr	r3, [pc, #12]	; (6d60 <malloc+0x10>)
    6d54:	0001      	movs	r1, r0
    6d56:	6818      	ldr	r0, [r3, #0]
    6d58:	f000 f872 	bl	6e40 <_malloc_r>
    6d5c:	bd10      	pop	{r4, pc}
    6d5e:	46c0      	nop			; (mov r8, r8)
    6d60:	2000000c 	.word	0x2000000c

00006d64 <memcpy>:
    6d64:	2300      	movs	r3, #0
    6d66:	b510      	push	{r4, lr}
    6d68:	429a      	cmp	r2, r3
    6d6a:	d100      	bne.n	6d6e <memcpy+0xa>
    6d6c:	bd10      	pop	{r4, pc}
    6d6e:	5ccc      	ldrb	r4, [r1, r3]
    6d70:	54c4      	strb	r4, [r0, r3]
    6d72:	3301      	adds	r3, #1
    6d74:	e7f8      	b.n	6d68 <memcpy+0x4>

00006d76 <memmove>:
    6d76:	b510      	push	{r4, lr}
    6d78:	4288      	cmp	r0, r1
    6d7a:	d902      	bls.n	6d82 <memmove+0xc>
    6d7c:	188b      	adds	r3, r1, r2
    6d7e:	4298      	cmp	r0, r3
    6d80:	d308      	bcc.n	6d94 <memmove+0x1e>
    6d82:	2300      	movs	r3, #0
    6d84:	429a      	cmp	r2, r3
    6d86:	d007      	beq.n	6d98 <memmove+0x22>
    6d88:	5ccc      	ldrb	r4, [r1, r3]
    6d8a:	54c4      	strb	r4, [r0, r3]
    6d8c:	3301      	adds	r3, #1
    6d8e:	e7f9      	b.n	6d84 <memmove+0xe>
    6d90:	5c8b      	ldrb	r3, [r1, r2]
    6d92:	5483      	strb	r3, [r0, r2]
    6d94:	3a01      	subs	r2, #1
    6d96:	d2fb      	bcs.n	6d90 <memmove+0x1a>
    6d98:	bd10      	pop	{r4, pc}

00006d9a <memset>:
    6d9a:	0003      	movs	r3, r0
    6d9c:	1882      	adds	r2, r0, r2
    6d9e:	4293      	cmp	r3, r2
    6da0:	d100      	bne.n	6da4 <memset+0xa>
    6da2:	4770      	bx	lr
    6da4:	7019      	strb	r1, [r3, #0]
    6da6:	3301      	adds	r3, #1
    6da8:	e7f9      	b.n	6d9e <memset+0x4>
	...

00006dac <_free_r>:
    6dac:	b570      	push	{r4, r5, r6, lr}
    6dae:	0005      	movs	r5, r0
    6db0:	2900      	cmp	r1, #0
    6db2:	d010      	beq.n	6dd6 <_free_r+0x2a>
    6db4:	1f0c      	subs	r4, r1, #4
    6db6:	6823      	ldr	r3, [r4, #0]
    6db8:	2b00      	cmp	r3, #0
    6dba:	da00      	bge.n	6dbe <_free_r+0x12>
    6dbc:	18e4      	adds	r4, r4, r3
    6dbe:	0028      	movs	r0, r5
    6dc0:	f000 fd58 	bl	7874 <__malloc_lock>
    6dc4:	4a1d      	ldr	r2, [pc, #116]	; (6e3c <_free_r+0x90>)
    6dc6:	6813      	ldr	r3, [r2, #0]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d105      	bne.n	6dd8 <_free_r+0x2c>
    6dcc:	6063      	str	r3, [r4, #4]
    6dce:	6014      	str	r4, [r2, #0]
    6dd0:	0028      	movs	r0, r5
    6dd2:	f000 fd50 	bl	7876 <__malloc_unlock>
    6dd6:	bd70      	pop	{r4, r5, r6, pc}
    6dd8:	42a3      	cmp	r3, r4
    6dda:	d909      	bls.n	6df0 <_free_r+0x44>
    6ddc:	6821      	ldr	r1, [r4, #0]
    6dde:	1860      	adds	r0, r4, r1
    6de0:	4283      	cmp	r3, r0
    6de2:	d1f3      	bne.n	6dcc <_free_r+0x20>
    6de4:	6818      	ldr	r0, [r3, #0]
    6de6:	685b      	ldr	r3, [r3, #4]
    6de8:	1841      	adds	r1, r0, r1
    6dea:	6021      	str	r1, [r4, #0]
    6dec:	e7ee      	b.n	6dcc <_free_r+0x20>
    6dee:	0013      	movs	r3, r2
    6df0:	685a      	ldr	r2, [r3, #4]
    6df2:	2a00      	cmp	r2, #0
    6df4:	d001      	beq.n	6dfa <_free_r+0x4e>
    6df6:	42a2      	cmp	r2, r4
    6df8:	d9f9      	bls.n	6dee <_free_r+0x42>
    6dfa:	6819      	ldr	r1, [r3, #0]
    6dfc:	1858      	adds	r0, r3, r1
    6dfe:	42a0      	cmp	r0, r4
    6e00:	d10b      	bne.n	6e1a <_free_r+0x6e>
    6e02:	6820      	ldr	r0, [r4, #0]
    6e04:	1809      	adds	r1, r1, r0
    6e06:	1858      	adds	r0, r3, r1
    6e08:	6019      	str	r1, [r3, #0]
    6e0a:	4282      	cmp	r2, r0
    6e0c:	d1e0      	bne.n	6dd0 <_free_r+0x24>
    6e0e:	6810      	ldr	r0, [r2, #0]
    6e10:	6852      	ldr	r2, [r2, #4]
    6e12:	1841      	adds	r1, r0, r1
    6e14:	6019      	str	r1, [r3, #0]
    6e16:	605a      	str	r2, [r3, #4]
    6e18:	e7da      	b.n	6dd0 <_free_r+0x24>
    6e1a:	42a0      	cmp	r0, r4
    6e1c:	d902      	bls.n	6e24 <_free_r+0x78>
    6e1e:	230c      	movs	r3, #12
    6e20:	602b      	str	r3, [r5, #0]
    6e22:	e7d5      	b.n	6dd0 <_free_r+0x24>
    6e24:	6821      	ldr	r1, [r4, #0]
    6e26:	1860      	adds	r0, r4, r1
    6e28:	4282      	cmp	r2, r0
    6e2a:	d103      	bne.n	6e34 <_free_r+0x88>
    6e2c:	6810      	ldr	r0, [r2, #0]
    6e2e:	6852      	ldr	r2, [r2, #4]
    6e30:	1841      	adds	r1, r0, r1
    6e32:	6021      	str	r1, [r4, #0]
    6e34:	6062      	str	r2, [r4, #4]
    6e36:	605c      	str	r4, [r3, #4]
    6e38:	e7ca      	b.n	6dd0 <_free_r+0x24>
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	20000420 	.word	0x20000420

00006e40 <_malloc_r>:
    6e40:	2303      	movs	r3, #3
    6e42:	b570      	push	{r4, r5, r6, lr}
    6e44:	1ccd      	adds	r5, r1, #3
    6e46:	439d      	bics	r5, r3
    6e48:	3508      	adds	r5, #8
    6e4a:	0006      	movs	r6, r0
    6e4c:	2d0c      	cmp	r5, #12
    6e4e:	d21e      	bcs.n	6e8e <_malloc_r+0x4e>
    6e50:	250c      	movs	r5, #12
    6e52:	42a9      	cmp	r1, r5
    6e54:	d81d      	bhi.n	6e92 <_malloc_r+0x52>
    6e56:	0030      	movs	r0, r6
    6e58:	f000 fd0c 	bl	7874 <__malloc_lock>
    6e5c:	4a25      	ldr	r2, [pc, #148]	; (6ef4 <_malloc_r+0xb4>)
    6e5e:	6814      	ldr	r4, [r2, #0]
    6e60:	0021      	movs	r1, r4
    6e62:	2900      	cmp	r1, #0
    6e64:	d119      	bne.n	6e9a <_malloc_r+0x5a>
    6e66:	4c24      	ldr	r4, [pc, #144]	; (6ef8 <_malloc_r+0xb8>)
    6e68:	6823      	ldr	r3, [r4, #0]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d103      	bne.n	6e76 <_malloc_r+0x36>
    6e6e:	0030      	movs	r0, r6
    6e70:	f000 f8dc 	bl	702c <_sbrk_r>
    6e74:	6020      	str	r0, [r4, #0]
    6e76:	0029      	movs	r1, r5
    6e78:	0030      	movs	r0, r6
    6e7a:	f000 f8d7 	bl	702c <_sbrk_r>
    6e7e:	1c43      	adds	r3, r0, #1
    6e80:	d12c      	bne.n	6edc <_malloc_r+0x9c>
    6e82:	230c      	movs	r3, #12
    6e84:	0030      	movs	r0, r6
    6e86:	6033      	str	r3, [r6, #0]
    6e88:	f000 fcf5 	bl	7876 <__malloc_unlock>
    6e8c:	e003      	b.n	6e96 <_malloc_r+0x56>
    6e8e:	2d00      	cmp	r5, #0
    6e90:	dadf      	bge.n	6e52 <_malloc_r+0x12>
    6e92:	230c      	movs	r3, #12
    6e94:	6033      	str	r3, [r6, #0]
    6e96:	2000      	movs	r0, #0
    6e98:	bd70      	pop	{r4, r5, r6, pc}
    6e9a:	680b      	ldr	r3, [r1, #0]
    6e9c:	1b5b      	subs	r3, r3, r5
    6e9e:	d41a      	bmi.n	6ed6 <_malloc_r+0x96>
    6ea0:	2b0b      	cmp	r3, #11
    6ea2:	d903      	bls.n	6eac <_malloc_r+0x6c>
    6ea4:	600b      	str	r3, [r1, #0]
    6ea6:	18cc      	adds	r4, r1, r3
    6ea8:	6025      	str	r5, [r4, #0]
    6eaa:	e003      	b.n	6eb4 <_malloc_r+0x74>
    6eac:	428c      	cmp	r4, r1
    6eae:	d10e      	bne.n	6ece <_malloc_r+0x8e>
    6eb0:	6863      	ldr	r3, [r4, #4]
    6eb2:	6013      	str	r3, [r2, #0]
    6eb4:	0030      	movs	r0, r6
    6eb6:	f000 fcde 	bl	7876 <__malloc_unlock>
    6eba:	0020      	movs	r0, r4
    6ebc:	2207      	movs	r2, #7
    6ebe:	300b      	adds	r0, #11
    6ec0:	1d23      	adds	r3, r4, #4
    6ec2:	4390      	bics	r0, r2
    6ec4:	1ac3      	subs	r3, r0, r3
    6ec6:	d0e7      	beq.n	6e98 <_malloc_r+0x58>
    6ec8:	425a      	negs	r2, r3
    6eca:	50e2      	str	r2, [r4, r3]
    6ecc:	e7e4      	b.n	6e98 <_malloc_r+0x58>
    6ece:	684b      	ldr	r3, [r1, #4]
    6ed0:	6063      	str	r3, [r4, #4]
    6ed2:	000c      	movs	r4, r1
    6ed4:	e7ee      	b.n	6eb4 <_malloc_r+0x74>
    6ed6:	000c      	movs	r4, r1
    6ed8:	6849      	ldr	r1, [r1, #4]
    6eda:	e7c2      	b.n	6e62 <_malloc_r+0x22>
    6edc:	2303      	movs	r3, #3
    6ede:	1cc4      	adds	r4, r0, #3
    6ee0:	439c      	bics	r4, r3
    6ee2:	42a0      	cmp	r0, r4
    6ee4:	d0e0      	beq.n	6ea8 <_malloc_r+0x68>
    6ee6:	1a21      	subs	r1, r4, r0
    6ee8:	0030      	movs	r0, r6
    6eea:	f000 f89f 	bl	702c <_sbrk_r>
    6eee:	1c43      	adds	r3, r0, #1
    6ef0:	d1da      	bne.n	6ea8 <_malloc_r+0x68>
    6ef2:	e7c6      	b.n	6e82 <_malloc_r+0x42>
    6ef4:	20000420 	.word	0x20000420
    6ef8:	20000424 	.word	0x20000424

00006efc <iprintf>:
    6efc:	b40f      	push	{r0, r1, r2, r3}
    6efe:	4b0b      	ldr	r3, [pc, #44]	; (6f2c <iprintf+0x30>)
    6f00:	b513      	push	{r0, r1, r4, lr}
    6f02:	681c      	ldr	r4, [r3, #0]
    6f04:	2c00      	cmp	r4, #0
    6f06:	d005      	beq.n	6f14 <iprintf+0x18>
    6f08:	69a3      	ldr	r3, [r4, #24]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d102      	bne.n	6f14 <iprintf+0x18>
    6f0e:	0020      	movs	r0, r4
    6f10:	f000 fb92 	bl	7638 <__sinit>
    6f14:	ab05      	add	r3, sp, #20
    6f16:	9a04      	ldr	r2, [sp, #16]
    6f18:	68a1      	ldr	r1, [r4, #8]
    6f1a:	0020      	movs	r0, r4
    6f1c:	9301      	str	r3, [sp, #4]
    6f1e:	f000 fe39 	bl	7b94 <_vfiprintf_r>
    6f22:	bc16      	pop	{r1, r2, r4}
    6f24:	bc08      	pop	{r3}
    6f26:	b004      	add	sp, #16
    6f28:	4718      	bx	r3
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	2000000c 	.word	0x2000000c

00006f30 <putchar>:
    6f30:	4b08      	ldr	r3, [pc, #32]	; (6f54 <putchar+0x24>)
    6f32:	b570      	push	{r4, r5, r6, lr}
    6f34:	681c      	ldr	r4, [r3, #0]
    6f36:	0005      	movs	r5, r0
    6f38:	2c00      	cmp	r4, #0
    6f3a:	d005      	beq.n	6f48 <putchar+0x18>
    6f3c:	69a3      	ldr	r3, [r4, #24]
    6f3e:	2b00      	cmp	r3, #0
    6f40:	d102      	bne.n	6f48 <putchar+0x18>
    6f42:	0020      	movs	r0, r4
    6f44:	f000 fb78 	bl	7638 <__sinit>
    6f48:	0029      	movs	r1, r5
    6f4a:	68a2      	ldr	r2, [r4, #8]
    6f4c:	0020      	movs	r0, r4
    6f4e:	f001 fbd7 	bl	8700 <_putc_r>
    6f52:	bd70      	pop	{r4, r5, r6, pc}
    6f54:	2000000c 	.word	0x2000000c

00006f58 <_puts_r>:
    6f58:	b570      	push	{r4, r5, r6, lr}
    6f5a:	0005      	movs	r5, r0
    6f5c:	000e      	movs	r6, r1
    6f5e:	2800      	cmp	r0, #0
    6f60:	d004      	beq.n	6f6c <_puts_r+0x14>
    6f62:	6983      	ldr	r3, [r0, #24]
    6f64:	2b00      	cmp	r3, #0
    6f66:	d101      	bne.n	6f6c <_puts_r+0x14>
    6f68:	f000 fb66 	bl	7638 <__sinit>
    6f6c:	69ab      	ldr	r3, [r5, #24]
    6f6e:	68ac      	ldr	r4, [r5, #8]
    6f70:	2b00      	cmp	r3, #0
    6f72:	d102      	bne.n	6f7a <_puts_r+0x22>
    6f74:	0028      	movs	r0, r5
    6f76:	f000 fb5f 	bl	7638 <__sinit>
    6f7a:	4b24      	ldr	r3, [pc, #144]	; (700c <_puts_r+0xb4>)
    6f7c:	429c      	cmp	r4, r3
    6f7e:	d10f      	bne.n	6fa0 <_puts_r+0x48>
    6f80:	686c      	ldr	r4, [r5, #4]
    6f82:	89a3      	ldrh	r3, [r4, #12]
    6f84:	071b      	lsls	r3, r3, #28
    6f86:	d502      	bpl.n	6f8e <_puts_r+0x36>
    6f88:	6923      	ldr	r3, [r4, #16]
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d120      	bne.n	6fd0 <_puts_r+0x78>
    6f8e:	0021      	movs	r1, r4
    6f90:	0028      	movs	r0, r5
    6f92:	f000 f9cf 	bl	7334 <__swsetup_r>
    6f96:	2800      	cmp	r0, #0
    6f98:	d01a      	beq.n	6fd0 <_puts_r+0x78>
    6f9a:	2001      	movs	r0, #1
    6f9c:	4240      	negs	r0, r0
    6f9e:	bd70      	pop	{r4, r5, r6, pc}
    6fa0:	4b1b      	ldr	r3, [pc, #108]	; (7010 <_puts_r+0xb8>)
    6fa2:	429c      	cmp	r4, r3
    6fa4:	d101      	bne.n	6faa <_puts_r+0x52>
    6fa6:	68ac      	ldr	r4, [r5, #8]
    6fa8:	e7eb      	b.n	6f82 <_puts_r+0x2a>
    6faa:	4b1a      	ldr	r3, [pc, #104]	; (7014 <_puts_r+0xbc>)
    6fac:	429c      	cmp	r4, r3
    6fae:	d1e8      	bne.n	6f82 <_puts_r+0x2a>
    6fb0:	68ec      	ldr	r4, [r5, #12]
    6fb2:	e7e6      	b.n	6f82 <_puts_r+0x2a>
    6fb4:	3b01      	subs	r3, #1
    6fb6:	3601      	adds	r6, #1
    6fb8:	60a3      	str	r3, [r4, #8]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	da04      	bge.n	6fc8 <_puts_r+0x70>
    6fbe:	69a2      	ldr	r2, [r4, #24]
    6fc0:	4293      	cmp	r3, r2
    6fc2:	db16      	blt.n	6ff2 <_puts_r+0x9a>
    6fc4:	290a      	cmp	r1, #10
    6fc6:	d014      	beq.n	6ff2 <_puts_r+0x9a>
    6fc8:	6823      	ldr	r3, [r4, #0]
    6fca:	1c5a      	adds	r2, r3, #1
    6fcc:	6022      	str	r2, [r4, #0]
    6fce:	7019      	strb	r1, [r3, #0]
    6fd0:	7831      	ldrb	r1, [r6, #0]
    6fd2:	68a3      	ldr	r3, [r4, #8]
    6fd4:	2900      	cmp	r1, #0
    6fd6:	d1ed      	bne.n	6fb4 <_puts_r+0x5c>
    6fd8:	3b01      	subs	r3, #1
    6fda:	60a3      	str	r3, [r4, #8]
    6fdc:	2b00      	cmp	r3, #0
    6fde:	da0f      	bge.n	7000 <_puts_r+0xa8>
    6fe0:	0022      	movs	r2, r4
    6fe2:	310a      	adds	r1, #10
    6fe4:	0028      	movs	r0, r5
    6fe6:	f000 f94f 	bl	7288 <__swbuf_r>
    6fea:	1c43      	adds	r3, r0, #1
    6fec:	d0d5      	beq.n	6f9a <_puts_r+0x42>
    6fee:	200a      	movs	r0, #10
    6ff0:	e7d5      	b.n	6f9e <_puts_r+0x46>
    6ff2:	0022      	movs	r2, r4
    6ff4:	0028      	movs	r0, r5
    6ff6:	f000 f947 	bl	7288 <__swbuf_r>
    6ffa:	1c43      	adds	r3, r0, #1
    6ffc:	d1e8      	bne.n	6fd0 <_puts_r+0x78>
    6ffe:	e7cc      	b.n	6f9a <_puts_r+0x42>
    7000:	200a      	movs	r0, #10
    7002:	6823      	ldr	r3, [r4, #0]
    7004:	1c5a      	adds	r2, r3, #1
    7006:	6022      	str	r2, [r4, #0]
    7008:	7018      	strb	r0, [r3, #0]
    700a:	e7c8      	b.n	6f9e <_puts_r+0x46>
    700c:	0000a08c 	.word	0x0000a08c
    7010:	0000a0ac 	.word	0x0000a0ac
    7014:	0000a06c 	.word	0x0000a06c

00007018 <puts>:
    7018:	b510      	push	{r4, lr}
    701a:	4b03      	ldr	r3, [pc, #12]	; (7028 <puts+0x10>)
    701c:	0001      	movs	r1, r0
    701e:	6818      	ldr	r0, [r3, #0]
    7020:	f7ff ff9a 	bl	6f58 <_puts_r>
    7024:	bd10      	pop	{r4, pc}
    7026:	46c0      	nop			; (mov r8, r8)
    7028:	2000000c 	.word	0x2000000c

0000702c <_sbrk_r>:
    702c:	2300      	movs	r3, #0
    702e:	b570      	push	{r4, r5, r6, lr}
    7030:	4c06      	ldr	r4, [pc, #24]	; (704c <_sbrk_r+0x20>)
    7032:	0005      	movs	r5, r0
    7034:	0008      	movs	r0, r1
    7036:	6023      	str	r3, [r4, #0]
    7038:	f7fe f9d2 	bl	53e0 <_sbrk>
    703c:	1c43      	adds	r3, r0, #1
    703e:	d103      	bne.n	7048 <_sbrk_r+0x1c>
    7040:	6823      	ldr	r3, [r4, #0]
    7042:	2b00      	cmp	r3, #0
    7044:	d000      	beq.n	7048 <_sbrk_r+0x1c>
    7046:	602b      	str	r3, [r5, #0]
    7048:	bd70      	pop	{r4, r5, r6, pc}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	20000620 	.word	0x20000620

00007050 <iscanf>:
    7050:	b40f      	push	{r0, r1, r2, r3}
    7052:	4b0b      	ldr	r3, [pc, #44]	; (7080 <iscanf+0x30>)
    7054:	b513      	push	{r0, r1, r4, lr}
    7056:	681c      	ldr	r4, [r3, #0]
    7058:	2c00      	cmp	r4, #0
    705a:	d005      	beq.n	7068 <iscanf+0x18>
    705c:	69a3      	ldr	r3, [r4, #24]
    705e:	2b00      	cmp	r3, #0
    7060:	d102      	bne.n	7068 <iscanf+0x18>
    7062:	0020      	movs	r0, r4
    7064:	f000 fae8 	bl	7638 <__sinit>
    7068:	ab05      	add	r3, sp, #20
    706a:	9a04      	ldr	r2, [sp, #16]
    706c:	6861      	ldr	r1, [r4, #4]
    706e:	0020      	movs	r0, r4
    7070:	9301      	str	r3, [sp, #4]
    7072:	f001 f9b9 	bl	83e8 <_vfiscanf_r>
    7076:	bc16      	pop	{r1, r2, r4}
    7078:	bc08      	pop	{r3}
    707a:	b004      	add	sp, #16
    707c:	4718      	bx	r3
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	2000000c 	.word	0x2000000c

00007084 <setbuf>:
    7084:	424a      	negs	r2, r1
    7086:	414a      	adcs	r2, r1
    7088:	2380      	movs	r3, #128	; 0x80
    708a:	b510      	push	{r4, lr}
    708c:	0052      	lsls	r2, r2, #1
    708e:	00db      	lsls	r3, r3, #3
    7090:	f000 f802 	bl	7098 <setvbuf>
    7094:	bd10      	pop	{r4, pc}
	...

00007098 <setvbuf>:
    7098:	b5f0      	push	{r4, r5, r6, r7, lr}
    709a:	001d      	movs	r5, r3
    709c:	4b4f      	ldr	r3, [pc, #316]	; (71dc <setvbuf+0x144>)
    709e:	b085      	sub	sp, #20
    70a0:	681e      	ldr	r6, [r3, #0]
    70a2:	0004      	movs	r4, r0
    70a4:	000f      	movs	r7, r1
    70a6:	9200      	str	r2, [sp, #0]
    70a8:	2e00      	cmp	r6, #0
    70aa:	d005      	beq.n	70b8 <setvbuf+0x20>
    70ac:	69b3      	ldr	r3, [r6, #24]
    70ae:	2b00      	cmp	r3, #0
    70b0:	d102      	bne.n	70b8 <setvbuf+0x20>
    70b2:	0030      	movs	r0, r6
    70b4:	f000 fac0 	bl	7638 <__sinit>
    70b8:	4b49      	ldr	r3, [pc, #292]	; (71e0 <setvbuf+0x148>)
    70ba:	429c      	cmp	r4, r3
    70bc:	d150      	bne.n	7160 <setvbuf+0xc8>
    70be:	6874      	ldr	r4, [r6, #4]
    70c0:	9b00      	ldr	r3, [sp, #0]
    70c2:	2b02      	cmp	r3, #2
    70c4:	d005      	beq.n	70d2 <setvbuf+0x3a>
    70c6:	2b01      	cmp	r3, #1
    70c8:	d900      	bls.n	70cc <setvbuf+0x34>
    70ca:	e084      	b.n	71d6 <setvbuf+0x13e>
    70cc:	2d00      	cmp	r5, #0
    70ce:	da00      	bge.n	70d2 <setvbuf+0x3a>
    70d0:	e081      	b.n	71d6 <setvbuf+0x13e>
    70d2:	0021      	movs	r1, r4
    70d4:	0030      	movs	r0, r6
    70d6:	f000 fa2d 	bl	7534 <_fflush_r>
    70da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70dc:	2900      	cmp	r1, #0
    70de:	d008      	beq.n	70f2 <setvbuf+0x5a>
    70e0:	0023      	movs	r3, r4
    70e2:	3344      	adds	r3, #68	; 0x44
    70e4:	4299      	cmp	r1, r3
    70e6:	d002      	beq.n	70ee <setvbuf+0x56>
    70e8:	0030      	movs	r0, r6
    70ea:	f7ff fe5f 	bl	6dac <_free_r>
    70ee:	2300      	movs	r3, #0
    70f0:	6363      	str	r3, [r4, #52]	; 0x34
    70f2:	2300      	movs	r3, #0
    70f4:	61a3      	str	r3, [r4, #24]
    70f6:	6063      	str	r3, [r4, #4]
    70f8:	89a3      	ldrh	r3, [r4, #12]
    70fa:	061b      	lsls	r3, r3, #24
    70fc:	d503      	bpl.n	7106 <setvbuf+0x6e>
    70fe:	6921      	ldr	r1, [r4, #16]
    7100:	0030      	movs	r0, r6
    7102:	f7ff fe53 	bl	6dac <_free_r>
    7106:	89a3      	ldrh	r3, [r4, #12]
    7108:	4a36      	ldr	r2, [pc, #216]	; (71e4 <setvbuf+0x14c>)
    710a:	4013      	ands	r3, r2
    710c:	81a3      	strh	r3, [r4, #12]
    710e:	9b00      	ldr	r3, [sp, #0]
    7110:	2b02      	cmp	r3, #2
    7112:	d05a      	beq.n	71ca <setvbuf+0x132>
    7114:	ab03      	add	r3, sp, #12
    7116:	aa02      	add	r2, sp, #8
    7118:	0021      	movs	r1, r4
    711a:	0030      	movs	r0, r6
    711c:	f000 fb3e 	bl	779c <__swhatbuf_r>
    7120:	89a3      	ldrh	r3, [r4, #12]
    7122:	4318      	orrs	r0, r3
    7124:	81a0      	strh	r0, [r4, #12]
    7126:	2d00      	cmp	r5, #0
    7128:	d124      	bne.n	7174 <setvbuf+0xdc>
    712a:	9d02      	ldr	r5, [sp, #8]
    712c:	0028      	movs	r0, r5
    712e:	f7ff fe0f 	bl	6d50 <malloc>
    7132:	9501      	str	r5, [sp, #4]
    7134:	1e07      	subs	r7, r0, #0
    7136:	d142      	bne.n	71be <setvbuf+0x126>
    7138:	9b02      	ldr	r3, [sp, #8]
    713a:	9301      	str	r3, [sp, #4]
    713c:	42ab      	cmp	r3, r5
    713e:	d139      	bne.n	71b4 <setvbuf+0x11c>
    7140:	2001      	movs	r0, #1
    7142:	4240      	negs	r0, r0
    7144:	2302      	movs	r3, #2
    7146:	89a2      	ldrh	r2, [r4, #12]
    7148:	4313      	orrs	r3, r2
    714a:	81a3      	strh	r3, [r4, #12]
    714c:	2300      	movs	r3, #0
    714e:	60a3      	str	r3, [r4, #8]
    7150:	0023      	movs	r3, r4
    7152:	3347      	adds	r3, #71	; 0x47
    7154:	6023      	str	r3, [r4, #0]
    7156:	6123      	str	r3, [r4, #16]
    7158:	2301      	movs	r3, #1
    715a:	6163      	str	r3, [r4, #20]
    715c:	b005      	add	sp, #20
    715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7160:	4b21      	ldr	r3, [pc, #132]	; (71e8 <setvbuf+0x150>)
    7162:	429c      	cmp	r4, r3
    7164:	d101      	bne.n	716a <setvbuf+0xd2>
    7166:	68b4      	ldr	r4, [r6, #8]
    7168:	e7aa      	b.n	70c0 <setvbuf+0x28>
    716a:	4b20      	ldr	r3, [pc, #128]	; (71ec <setvbuf+0x154>)
    716c:	429c      	cmp	r4, r3
    716e:	d1a7      	bne.n	70c0 <setvbuf+0x28>
    7170:	68f4      	ldr	r4, [r6, #12]
    7172:	e7a5      	b.n	70c0 <setvbuf+0x28>
    7174:	2f00      	cmp	r7, #0
    7176:	d0d9      	beq.n	712c <setvbuf+0x94>
    7178:	69b3      	ldr	r3, [r6, #24]
    717a:	2b00      	cmp	r3, #0
    717c:	d102      	bne.n	7184 <setvbuf+0xec>
    717e:	0030      	movs	r0, r6
    7180:	f000 fa5a 	bl	7638 <__sinit>
    7184:	9b00      	ldr	r3, [sp, #0]
    7186:	2b01      	cmp	r3, #1
    7188:	d103      	bne.n	7192 <setvbuf+0xfa>
    718a:	89a3      	ldrh	r3, [r4, #12]
    718c:	9a00      	ldr	r2, [sp, #0]
    718e:	431a      	orrs	r2, r3
    7190:	81a2      	strh	r2, [r4, #12]
    7192:	2008      	movs	r0, #8
    7194:	89a3      	ldrh	r3, [r4, #12]
    7196:	6027      	str	r7, [r4, #0]
    7198:	6127      	str	r7, [r4, #16]
    719a:	6165      	str	r5, [r4, #20]
    719c:	4018      	ands	r0, r3
    719e:	d018      	beq.n	71d2 <setvbuf+0x13a>
    71a0:	2001      	movs	r0, #1
    71a2:	4018      	ands	r0, r3
    71a4:	2300      	movs	r3, #0
    71a6:	4298      	cmp	r0, r3
    71a8:	d011      	beq.n	71ce <setvbuf+0x136>
    71aa:	426d      	negs	r5, r5
    71ac:	60a3      	str	r3, [r4, #8]
    71ae:	61a5      	str	r5, [r4, #24]
    71b0:	0018      	movs	r0, r3
    71b2:	e7d3      	b.n	715c <setvbuf+0xc4>
    71b4:	9801      	ldr	r0, [sp, #4]
    71b6:	f7ff fdcb 	bl	6d50 <malloc>
    71ba:	1e07      	subs	r7, r0, #0
    71bc:	d0c0      	beq.n	7140 <setvbuf+0xa8>
    71be:	2380      	movs	r3, #128	; 0x80
    71c0:	89a2      	ldrh	r2, [r4, #12]
    71c2:	9d01      	ldr	r5, [sp, #4]
    71c4:	4313      	orrs	r3, r2
    71c6:	81a3      	strh	r3, [r4, #12]
    71c8:	e7d6      	b.n	7178 <setvbuf+0xe0>
    71ca:	2000      	movs	r0, #0
    71cc:	e7ba      	b.n	7144 <setvbuf+0xac>
    71ce:	60a5      	str	r5, [r4, #8]
    71d0:	e7c4      	b.n	715c <setvbuf+0xc4>
    71d2:	60a0      	str	r0, [r4, #8]
    71d4:	e7c2      	b.n	715c <setvbuf+0xc4>
    71d6:	2001      	movs	r0, #1
    71d8:	4240      	negs	r0, r0
    71da:	e7bf      	b.n	715c <setvbuf+0xc4>
    71dc:	2000000c 	.word	0x2000000c
    71e0:	0000a08c 	.word	0x0000a08c
    71e4:	fffff35c 	.word	0xfffff35c
    71e8:	0000a0ac 	.word	0x0000a0ac
    71ec:	0000a06c 	.word	0x0000a06c

000071f0 <siprintf>:
    71f0:	b40e      	push	{r1, r2, r3}
    71f2:	b510      	push	{r4, lr}
    71f4:	b09d      	sub	sp, #116	; 0x74
    71f6:	a902      	add	r1, sp, #8
    71f8:	9002      	str	r0, [sp, #8]
    71fa:	6108      	str	r0, [r1, #16]
    71fc:	480b      	ldr	r0, [pc, #44]	; (722c <siprintf+0x3c>)
    71fe:	2482      	movs	r4, #130	; 0x82
    7200:	6088      	str	r0, [r1, #8]
    7202:	6148      	str	r0, [r1, #20]
    7204:	2001      	movs	r0, #1
    7206:	4240      	negs	r0, r0
    7208:	ab1f      	add	r3, sp, #124	; 0x7c
    720a:	81c8      	strh	r0, [r1, #14]
    720c:	4808      	ldr	r0, [pc, #32]	; (7230 <siprintf+0x40>)
    720e:	cb04      	ldmia	r3!, {r2}
    7210:	00a4      	lsls	r4, r4, #2
    7212:	6800      	ldr	r0, [r0, #0]
    7214:	9301      	str	r3, [sp, #4]
    7216:	818c      	strh	r4, [r1, #12]
    7218:	f000 fb90 	bl	793c <_svfiprintf_r>
    721c:	2300      	movs	r3, #0
    721e:	9a02      	ldr	r2, [sp, #8]
    7220:	7013      	strb	r3, [r2, #0]
    7222:	b01d      	add	sp, #116	; 0x74
    7224:	bc10      	pop	{r4}
    7226:	bc08      	pop	{r3}
    7228:	b003      	add	sp, #12
    722a:	4718      	bx	r3
    722c:	7fffffff 	.word	0x7fffffff
    7230:	2000000c 	.word	0x2000000c

00007234 <strcmp>:
    7234:	7802      	ldrb	r2, [r0, #0]
    7236:	780b      	ldrb	r3, [r1, #0]
    7238:	2a00      	cmp	r2, #0
    723a:	d003      	beq.n	7244 <strcmp+0x10>
    723c:	3001      	adds	r0, #1
    723e:	3101      	adds	r1, #1
    7240:	429a      	cmp	r2, r3
    7242:	d0f7      	beq.n	7234 <strcmp>
    7244:	1ad0      	subs	r0, r2, r3
    7246:	4770      	bx	lr

00007248 <strcpy>:
    7248:	1c03      	adds	r3, r0, #0
    724a:	780a      	ldrb	r2, [r1, #0]
    724c:	3101      	adds	r1, #1
    724e:	701a      	strb	r2, [r3, #0]
    7250:	3301      	adds	r3, #1
    7252:	2a00      	cmp	r2, #0
    7254:	d1f9      	bne.n	724a <strcpy+0x2>
    7256:	4770      	bx	lr

00007258 <strlen>:
    7258:	2300      	movs	r3, #0
    725a:	5cc2      	ldrb	r2, [r0, r3]
    725c:	3301      	adds	r3, #1
    725e:	2a00      	cmp	r2, #0
    7260:	d1fb      	bne.n	725a <strlen+0x2>
    7262:	1e58      	subs	r0, r3, #1
    7264:	4770      	bx	lr

00007266 <strncmp>:
    7266:	2300      	movs	r3, #0
    7268:	b530      	push	{r4, r5, lr}
    726a:	429a      	cmp	r2, r3
    726c:	d00a      	beq.n	7284 <strncmp+0x1e>
    726e:	3a01      	subs	r2, #1
    7270:	5cc4      	ldrb	r4, [r0, r3]
    7272:	5ccd      	ldrb	r5, [r1, r3]
    7274:	42ac      	cmp	r4, r5
    7276:	d104      	bne.n	7282 <strncmp+0x1c>
    7278:	429a      	cmp	r2, r3
    727a:	d002      	beq.n	7282 <strncmp+0x1c>
    727c:	3301      	adds	r3, #1
    727e:	2c00      	cmp	r4, #0
    7280:	d1f6      	bne.n	7270 <strncmp+0xa>
    7282:	1b63      	subs	r3, r4, r5
    7284:	0018      	movs	r0, r3
    7286:	bd30      	pop	{r4, r5, pc}

00007288 <__swbuf_r>:
    7288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    728a:	0005      	movs	r5, r0
    728c:	000e      	movs	r6, r1
    728e:	0014      	movs	r4, r2
    7290:	2800      	cmp	r0, #0
    7292:	d004      	beq.n	729e <__swbuf_r+0x16>
    7294:	6983      	ldr	r3, [r0, #24]
    7296:	2b00      	cmp	r3, #0
    7298:	d101      	bne.n	729e <__swbuf_r+0x16>
    729a:	f000 f9cd 	bl	7638 <__sinit>
    729e:	4b22      	ldr	r3, [pc, #136]	; (7328 <__swbuf_r+0xa0>)
    72a0:	429c      	cmp	r4, r3
    72a2:	d12d      	bne.n	7300 <__swbuf_r+0x78>
    72a4:	686c      	ldr	r4, [r5, #4]
    72a6:	69a3      	ldr	r3, [r4, #24]
    72a8:	60a3      	str	r3, [r4, #8]
    72aa:	89a3      	ldrh	r3, [r4, #12]
    72ac:	071b      	lsls	r3, r3, #28
    72ae:	d531      	bpl.n	7314 <__swbuf_r+0x8c>
    72b0:	6923      	ldr	r3, [r4, #16]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d02e      	beq.n	7314 <__swbuf_r+0x8c>
    72b6:	6823      	ldr	r3, [r4, #0]
    72b8:	6922      	ldr	r2, [r4, #16]
    72ba:	b2f7      	uxtb	r7, r6
    72bc:	1a98      	subs	r0, r3, r2
    72be:	6963      	ldr	r3, [r4, #20]
    72c0:	b2f6      	uxtb	r6, r6
    72c2:	4298      	cmp	r0, r3
    72c4:	db05      	blt.n	72d2 <__swbuf_r+0x4a>
    72c6:	0021      	movs	r1, r4
    72c8:	0028      	movs	r0, r5
    72ca:	f000 f933 	bl	7534 <_fflush_r>
    72ce:	2800      	cmp	r0, #0
    72d0:	d126      	bne.n	7320 <__swbuf_r+0x98>
    72d2:	68a3      	ldr	r3, [r4, #8]
    72d4:	3001      	adds	r0, #1
    72d6:	3b01      	subs	r3, #1
    72d8:	60a3      	str	r3, [r4, #8]
    72da:	6823      	ldr	r3, [r4, #0]
    72dc:	1c5a      	adds	r2, r3, #1
    72de:	6022      	str	r2, [r4, #0]
    72e0:	701f      	strb	r7, [r3, #0]
    72e2:	6963      	ldr	r3, [r4, #20]
    72e4:	4298      	cmp	r0, r3
    72e6:	d004      	beq.n	72f2 <__swbuf_r+0x6a>
    72e8:	89a3      	ldrh	r3, [r4, #12]
    72ea:	07db      	lsls	r3, r3, #31
    72ec:	d51a      	bpl.n	7324 <__swbuf_r+0x9c>
    72ee:	2e0a      	cmp	r6, #10
    72f0:	d118      	bne.n	7324 <__swbuf_r+0x9c>
    72f2:	0021      	movs	r1, r4
    72f4:	0028      	movs	r0, r5
    72f6:	f000 f91d 	bl	7534 <_fflush_r>
    72fa:	2800      	cmp	r0, #0
    72fc:	d012      	beq.n	7324 <__swbuf_r+0x9c>
    72fe:	e00f      	b.n	7320 <__swbuf_r+0x98>
    7300:	4b0a      	ldr	r3, [pc, #40]	; (732c <__swbuf_r+0xa4>)
    7302:	429c      	cmp	r4, r3
    7304:	d101      	bne.n	730a <__swbuf_r+0x82>
    7306:	68ac      	ldr	r4, [r5, #8]
    7308:	e7cd      	b.n	72a6 <__swbuf_r+0x1e>
    730a:	4b09      	ldr	r3, [pc, #36]	; (7330 <__swbuf_r+0xa8>)
    730c:	429c      	cmp	r4, r3
    730e:	d1ca      	bne.n	72a6 <__swbuf_r+0x1e>
    7310:	68ec      	ldr	r4, [r5, #12]
    7312:	e7c8      	b.n	72a6 <__swbuf_r+0x1e>
    7314:	0021      	movs	r1, r4
    7316:	0028      	movs	r0, r5
    7318:	f000 f80c 	bl	7334 <__swsetup_r>
    731c:	2800      	cmp	r0, #0
    731e:	d0ca      	beq.n	72b6 <__swbuf_r+0x2e>
    7320:	2601      	movs	r6, #1
    7322:	4276      	negs	r6, r6
    7324:	0030      	movs	r0, r6
    7326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7328:	0000a08c 	.word	0x0000a08c
    732c:	0000a0ac 	.word	0x0000a0ac
    7330:	0000a06c 	.word	0x0000a06c

00007334 <__swsetup_r>:
    7334:	4b36      	ldr	r3, [pc, #216]	; (7410 <__swsetup_r+0xdc>)
    7336:	b570      	push	{r4, r5, r6, lr}
    7338:	681d      	ldr	r5, [r3, #0]
    733a:	0006      	movs	r6, r0
    733c:	000c      	movs	r4, r1
    733e:	2d00      	cmp	r5, #0
    7340:	d005      	beq.n	734e <__swsetup_r+0x1a>
    7342:	69ab      	ldr	r3, [r5, #24]
    7344:	2b00      	cmp	r3, #0
    7346:	d102      	bne.n	734e <__swsetup_r+0x1a>
    7348:	0028      	movs	r0, r5
    734a:	f000 f975 	bl	7638 <__sinit>
    734e:	4b31      	ldr	r3, [pc, #196]	; (7414 <__swsetup_r+0xe0>)
    7350:	429c      	cmp	r4, r3
    7352:	d10f      	bne.n	7374 <__swsetup_r+0x40>
    7354:	686c      	ldr	r4, [r5, #4]
    7356:	230c      	movs	r3, #12
    7358:	5ee2      	ldrsh	r2, [r4, r3]
    735a:	b293      	uxth	r3, r2
    735c:	0719      	lsls	r1, r3, #28
    735e:	d42d      	bmi.n	73bc <__swsetup_r+0x88>
    7360:	06d9      	lsls	r1, r3, #27
    7362:	d411      	bmi.n	7388 <__swsetup_r+0x54>
    7364:	2309      	movs	r3, #9
    7366:	2001      	movs	r0, #1
    7368:	6033      	str	r3, [r6, #0]
    736a:	3337      	adds	r3, #55	; 0x37
    736c:	4313      	orrs	r3, r2
    736e:	81a3      	strh	r3, [r4, #12]
    7370:	4240      	negs	r0, r0
    7372:	bd70      	pop	{r4, r5, r6, pc}
    7374:	4b28      	ldr	r3, [pc, #160]	; (7418 <__swsetup_r+0xe4>)
    7376:	429c      	cmp	r4, r3
    7378:	d101      	bne.n	737e <__swsetup_r+0x4a>
    737a:	68ac      	ldr	r4, [r5, #8]
    737c:	e7eb      	b.n	7356 <__swsetup_r+0x22>
    737e:	4b27      	ldr	r3, [pc, #156]	; (741c <__swsetup_r+0xe8>)
    7380:	429c      	cmp	r4, r3
    7382:	d1e8      	bne.n	7356 <__swsetup_r+0x22>
    7384:	68ec      	ldr	r4, [r5, #12]
    7386:	e7e6      	b.n	7356 <__swsetup_r+0x22>
    7388:	075b      	lsls	r3, r3, #29
    738a:	d513      	bpl.n	73b4 <__swsetup_r+0x80>
    738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    738e:	2900      	cmp	r1, #0
    7390:	d008      	beq.n	73a4 <__swsetup_r+0x70>
    7392:	0023      	movs	r3, r4
    7394:	3344      	adds	r3, #68	; 0x44
    7396:	4299      	cmp	r1, r3
    7398:	d002      	beq.n	73a0 <__swsetup_r+0x6c>
    739a:	0030      	movs	r0, r6
    739c:	f7ff fd06 	bl	6dac <_free_r>
    73a0:	2300      	movs	r3, #0
    73a2:	6363      	str	r3, [r4, #52]	; 0x34
    73a4:	2224      	movs	r2, #36	; 0x24
    73a6:	89a3      	ldrh	r3, [r4, #12]
    73a8:	4393      	bics	r3, r2
    73aa:	81a3      	strh	r3, [r4, #12]
    73ac:	2300      	movs	r3, #0
    73ae:	6063      	str	r3, [r4, #4]
    73b0:	6923      	ldr	r3, [r4, #16]
    73b2:	6023      	str	r3, [r4, #0]
    73b4:	2308      	movs	r3, #8
    73b6:	89a2      	ldrh	r2, [r4, #12]
    73b8:	4313      	orrs	r3, r2
    73ba:	81a3      	strh	r3, [r4, #12]
    73bc:	6923      	ldr	r3, [r4, #16]
    73be:	2b00      	cmp	r3, #0
    73c0:	d10b      	bne.n	73da <__swsetup_r+0xa6>
    73c2:	21a0      	movs	r1, #160	; 0xa0
    73c4:	2280      	movs	r2, #128	; 0x80
    73c6:	89a3      	ldrh	r3, [r4, #12]
    73c8:	0089      	lsls	r1, r1, #2
    73ca:	0092      	lsls	r2, r2, #2
    73cc:	400b      	ands	r3, r1
    73ce:	4293      	cmp	r3, r2
    73d0:	d003      	beq.n	73da <__swsetup_r+0xa6>
    73d2:	0021      	movs	r1, r4
    73d4:	0030      	movs	r0, r6
    73d6:	f000 fa09 	bl	77ec <__smakebuf_r>
    73da:	2301      	movs	r3, #1
    73dc:	89a2      	ldrh	r2, [r4, #12]
    73de:	4013      	ands	r3, r2
    73e0:	d011      	beq.n	7406 <__swsetup_r+0xd2>
    73e2:	2300      	movs	r3, #0
    73e4:	60a3      	str	r3, [r4, #8]
    73e6:	6963      	ldr	r3, [r4, #20]
    73e8:	425b      	negs	r3, r3
    73ea:	61a3      	str	r3, [r4, #24]
    73ec:	2000      	movs	r0, #0
    73ee:	6923      	ldr	r3, [r4, #16]
    73f0:	4283      	cmp	r3, r0
    73f2:	d1be      	bne.n	7372 <__swsetup_r+0x3e>
    73f4:	230c      	movs	r3, #12
    73f6:	5ee2      	ldrsh	r2, [r4, r3]
    73f8:	0613      	lsls	r3, r2, #24
    73fa:	d5ba      	bpl.n	7372 <__swsetup_r+0x3e>
    73fc:	2340      	movs	r3, #64	; 0x40
    73fe:	4313      	orrs	r3, r2
    7400:	81a3      	strh	r3, [r4, #12]
    7402:	3801      	subs	r0, #1
    7404:	e7b5      	b.n	7372 <__swsetup_r+0x3e>
    7406:	0792      	lsls	r2, r2, #30
    7408:	d400      	bmi.n	740c <__swsetup_r+0xd8>
    740a:	6963      	ldr	r3, [r4, #20]
    740c:	60a3      	str	r3, [r4, #8]
    740e:	e7ed      	b.n	73ec <__swsetup_r+0xb8>
    7410:	2000000c 	.word	0x2000000c
    7414:	0000a08c 	.word	0x0000a08c
    7418:	0000a0ac 	.word	0x0000a0ac
    741c:	0000a06c 	.word	0x0000a06c

00007420 <__sflush_r>:
    7420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7422:	898a      	ldrh	r2, [r1, #12]
    7424:	0005      	movs	r5, r0
    7426:	000c      	movs	r4, r1
    7428:	0713      	lsls	r3, r2, #28
    742a:	d460      	bmi.n	74ee <__sflush_r+0xce>
    742c:	684b      	ldr	r3, [r1, #4]
    742e:	2b00      	cmp	r3, #0
    7430:	dc04      	bgt.n	743c <__sflush_r+0x1c>
    7432:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7434:	2b00      	cmp	r3, #0
    7436:	dc01      	bgt.n	743c <__sflush_r+0x1c>
    7438:	2000      	movs	r0, #0
    743a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    743c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    743e:	2f00      	cmp	r7, #0
    7440:	d0fa      	beq.n	7438 <__sflush_r+0x18>
    7442:	2300      	movs	r3, #0
    7444:	682e      	ldr	r6, [r5, #0]
    7446:	602b      	str	r3, [r5, #0]
    7448:	2380      	movs	r3, #128	; 0x80
    744a:	015b      	lsls	r3, r3, #5
    744c:	401a      	ands	r2, r3
    744e:	d034      	beq.n	74ba <__sflush_r+0x9a>
    7450:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7452:	89a3      	ldrh	r3, [r4, #12]
    7454:	075b      	lsls	r3, r3, #29
    7456:	d506      	bpl.n	7466 <__sflush_r+0x46>
    7458:	6863      	ldr	r3, [r4, #4]
    745a:	1ac0      	subs	r0, r0, r3
    745c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    745e:	2b00      	cmp	r3, #0
    7460:	d001      	beq.n	7466 <__sflush_r+0x46>
    7462:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7464:	1ac0      	subs	r0, r0, r3
    7466:	0002      	movs	r2, r0
    7468:	6a21      	ldr	r1, [r4, #32]
    746a:	2300      	movs	r3, #0
    746c:	0028      	movs	r0, r5
    746e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7470:	47b8      	blx	r7
    7472:	89a1      	ldrh	r1, [r4, #12]
    7474:	1c43      	adds	r3, r0, #1
    7476:	d106      	bne.n	7486 <__sflush_r+0x66>
    7478:	682b      	ldr	r3, [r5, #0]
    747a:	2b1d      	cmp	r3, #29
    747c:	d831      	bhi.n	74e2 <__sflush_r+0xc2>
    747e:	4a2c      	ldr	r2, [pc, #176]	; (7530 <__sflush_r+0x110>)
    7480:	40da      	lsrs	r2, r3
    7482:	07d3      	lsls	r3, r2, #31
    7484:	d52d      	bpl.n	74e2 <__sflush_r+0xc2>
    7486:	2300      	movs	r3, #0
    7488:	6063      	str	r3, [r4, #4]
    748a:	6923      	ldr	r3, [r4, #16]
    748c:	6023      	str	r3, [r4, #0]
    748e:	04cb      	lsls	r3, r1, #19
    7490:	d505      	bpl.n	749e <__sflush_r+0x7e>
    7492:	1c43      	adds	r3, r0, #1
    7494:	d102      	bne.n	749c <__sflush_r+0x7c>
    7496:	682b      	ldr	r3, [r5, #0]
    7498:	2b00      	cmp	r3, #0
    749a:	d100      	bne.n	749e <__sflush_r+0x7e>
    749c:	6560      	str	r0, [r4, #84]	; 0x54
    749e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    74a0:	602e      	str	r6, [r5, #0]
    74a2:	2900      	cmp	r1, #0
    74a4:	d0c8      	beq.n	7438 <__sflush_r+0x18>
    74a6:	0023      	movs	r3, r4
    74a8:	3344      	adds	r3, #68	; 0x44
    74aa:	4299      	cmp	r1, r3
    74ac:	d002      	beq.n	74b4 <__sflush_r+0x94>
    74ae:	0028      	movs	r0, r5
    74b0:	f7ff fc7c 	bl	6dac <_free_r>
    74b4:	2000      	movs	r0, #0
    74b6:	6360      	str	r0, [r4, #52]	; 0x34
    74b8:	e7bf      	b.n	743a <__sflush_r+0x1a>
    74ba:	2301      	movs	r3, #1
    74bc:	6a21      	ldr	r1, [r4, #32]
    74be:	0028      	movs	r0, r5
    74c0:	47b8      	blx	r7
    74c2:	1c43      	adds	r3, r0, #1
    74c4:	d1c5      	bne.n	7452 <__sflush_r+0x32>
    74c6:	682b      	ldr	r3, [r5, #0]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d0c2      	beq.n	7452 <__sflush_r+0x32>
    74cc:	2b1d      	cmp	r3, #29
    74ce:	d001      	beq.n	74d4 <__sflush_r+0xb4>
    74d0:	2b16      	cmp	r3, #22
    74d2:	d101      	bne.n	74d8 <__sflush_r+0xb8>
    74d4:	602e      	str	r6, [r5, #0]
    74d6:	e7af      	b.n	7438 <__sflush_r+0x18>
    74d8:	2340      	movs	r3, #64	; 0x40
    74da:	89a2      	ldrh	r2, [r4, #12]
    74dc:	4313      	orrs	r3, r2
    74de:	81a3      	strh	r3, [r4, #12]
    74e0:	e7ab      	b.n	743a <__sflush_r+0x1a>
    74e2:	2340      	movs	r3, #64	; 0x40
    74e4:	430b      	orrs	r3, r1
    74e6:	2001      	movs	r0, #1
    74e8:	81a3      	strh	r3, [r4, #12]
    74ea:	4240      	negs	r0, r0
    74ec:	e7a5      	b.n	743a <__sflush_r+0x1a>
    74ee:	690f      	ldr	r7, [r1, #16]
    74f0:	2f00      	cmp	r7, #0
    74f2:	d0a1      	beq.n	7438 <__sflush_r+0x18>
    74f4:	680b      	ldr	r3, [r1, #0]
    74f6:	600f      	str	r7, [r1, #0]
    74f8:	1bdb      	subs	r3, r3, r7
    74fa:	9301      	str	r3, [sp, #4]
    74fc:	2300      	movs	r3, #0
    74fe:	0792      	lsls	r2, r2, #30
    7500:	d100      	bne.n	7504 <__sflush_r+0xe4>
    7502:	694b      	ldr	r3, [r1, #20]
    7504:	60a3      	str	r3, [r4, #8]
    7506:	9b01      	ldr	r3, [sp, #4]
    7508:	2b00      	cmp	r3, #0
    750a:	dc00      	bgt.n	750e <__sflush_r+0xee>
    750c:	e794      	b.n	7438 <__sflush_r+0x18>
    750e:	9b01      	ldr	r3, [sp, #4]
    7510:	003a      	movs	r2, r7
    7512:	6a21      	ldr	r1, [r4, #32]
    7514:	0028      	movs	r0, r5
    7516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7518:	47b0      	blx	r6
    751a:	2800      	cmp	r0, #0
    751c:	dc03      	bgt.n	7526 <__sflush_r+0x106>
    751e:	2340      	movs	r3, #64	; 0x40
    7520:	89a2      	ldrh	r2, [r4, #12]
    7522:	4313      	orrs	r3, r2
    7524:	e7df      	b.n	74e6 <__sflush_r+0xc6>
    7526:	9b01      	ldr	r3, [sp, #4]
    7528:	183f      	adds	r7, r7, r0
    752a:	1a1b      	subs	r3, r3, r0
    752c:	9301      	str	r3, [sp, #4]
    752e:	e7ea      	b.n	7506 <__sflush_r+0xe6>
    7530:	20400001 	.word	0x20400001

00007534 <_fflush_r>:
    7534:	690b      	ldr	r3, [r1, #16]
    7536:	b570      	push	{r4, r5, r6, lr}
    7538:	0005      	movs	r5, r0
    753a:	000c      	movs	r4, r1
    753c:	2b00      	cmp	r3, #0
    753e:	d101      	bne.n	7544 <_fflush_r+0x10>
    7540:	2000      	movs	r0, #0
    7542:	bd70      	pop	{r4, r5, r6, pc}
    7544:	2800      	cmp	r0, #0
    7546:	d004      	beq.n	7552 <_fflush_r+0x1e>
    7548:	6983      	ldr	r3, [r0, #24]
    754a:	2b00      	cmp	r3, #0
    754c:	d101      	bne.n	7552 <_fflush_r+0x1e>
    754e:	f000 f873 	bl	7638 <__sinit>
    7552:	4b0b      	ldr	r3, [pc, #44]	; (7580 <_fflush_r+0x4c>)
    7554:	429c      	cmp	r4, r3
    7556:	d109      	bne.n	756c <_fflush_r+0x38>
    7558:	686c      	ldr	r4, [r5, #4]
    755a:	220c      	movs	r2, #12
    755c:	5ea3      	ldrsh	r3, [r4, r2]
    755e:	2b00      	cmp	r3, #0
    7560:	d0ee      	beq.n	7540 <_fflush_r+0xc>
    7562:	0021      	movs	r1, r4
    7564:	0028      	movs	r0, r5
    7566:	f7ff ff5b 	bl	7420 <__sflush_r>
    756a:	e7ea      	b.n	7542 <_fflush_r+0xe>
    756c:	4b05      	ldr	r3, [pc, #20]	; (7584 <_fflush_r+0x50>)
    756e:	429c      	cmp	r4, r3
    7570:	d101      	bne.n	7576 <_fflush_r+0x42>
    7572:	68ac      	ldr	r4, [r5, #8]
    7574:	e7f1      	b.n	755a <_fflush_r+0x26>
    7576:	4b04      	ldr	r3, [pc, #16]	; (7588 <_fflush_r+0x54>)
    7578:	429c      	cmp	r4, r3
    757a:	d1ee      	bne.n	755a <_fflush_r+0x26>
    757c:	68ec      	ldr	r4, [r5, #12]
    757e:	e7ec      	b.n	755a <_fflush_r+0x26>
    7580:	0000a08c 	.word	0x0000a08c
    7584:	0000a0ac 	.word	0x0000a0ac
    7588:	0000a06c 	.word	0x0000a06c

0000758c <fflush>:
    758c:	b510      	push	{r4, lr}
    758e:	1e01      	subs	r1, r0, #0
    7590:	d105      	bne.n	759e <fflush+0x12>
    7592:	4b05      	ldr	r3, [pc, #20]	; (75a8 <fflush+0x1c>)
    7594:	4905      	ldr	r1, [pc, #20]	; (75ac <fflush+0x20>)
    7596:	6818      	ldr	r0, [r3, #0]
    7598:	f000 f8de 	bl	7758 <_fwalk_reent>
    759c:	bd10      	pop	{r4, pc}
    759e:	4b04      	ldr	r3, [pc, #16]	; (75b0 <fflush+0x24>)
    75a0:	6818      	ldr	r0, [r3, #0]
    75a2:	f7ff ffc7 	bl	7534 <_fflush_r>
    75a6:	e7f9      	b.n	759c <fflush+0x10>
    75a8:	0000a068 	.word	0x0000a068
    75ac:	00007535 	.word	0x00007535
    75b0:	2000000c 	.word	0x2000000c

000075b4 <_cleanup_r>:
    75b4:	b510      	push	{r4, lr}
    75b6:	4902      	ldr	r1, [pc, #8]	; (75c0 <_cleanup_r+0xc>)
    75b8:	f000 f8ce 	bl	7758 <_fwalk_reent>
    75bc:	bd10      	pop	{r4, pc}
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	00007535 	.word	0x00007535

000075c4 <std.isra.0>:
    75c4:	2300      	movs	r3, #0
    75c6:	b510      	push	{r4, lr}
    75c8:	0004      	movs	r4, r0
    75ca:	6003      	str	r3, [r0, #0]
    75cc:	6043      	str	r3, [r0, #4]
    75ce:	6083      	str	r3, [r0, #8]
    75d0:	8181      	strh	r1, [r0, #12]
    75d2:	6643      	str	r3, [r0, #100]	; 0x64
    75d4:	81c2      	strh	r2, [r0, #14]
    75d6:	6103      	str	r3, [r0, #16]
    75d8:	6143      	str	r3, [r0, #20]
    75da:	6183      	str	r3, [r0, #24]
    75dc:	0019      	movs	r1, r3
    75de:	2208      	movs	r2, #8
    75e0:	305c      	adds	r0, #92	; 0x5c
    75e2:	f7ff fbda 	bl	6d9a <memset>
    75e6:	4b05      	ldr	r3, [pc, #20]	; (75fc <std.isra.0+0x38>)
    75e8:	6224      	str	r4, [r4, #32]
    75ea:	6263      	str	r3, [r4, #36]	; 0x24
    75ec:	4b04      	ldr	r3, [pc, #16]	; (7600 <std.isra.0+0x3c>)
    75ee:	62a3      	str	r3, [r4, #40]	; 0x28
    75f0:	4b04      	ldr	r3, [pc, #16]	; (7604 <std.isra.0+0x40>)
    75f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    75f4:	4b04      	ldr	r3, [pc, #16]	; (7608 <std.isra.0+0x44>)
    75f6:	6323      	str	r3, [r4, #48]	; 0x30
    75f8:	bd10      	pop	{r4, pc}
    75fa:	46c0      	nop			; (mov r8, r8)
    75fc:	00008909 	.word	0x00008909
    7600:	00008931 	.word	0x00008931
    7604:	00008969 	.word	0x00008969
    7608:	00008995 	.word	0x00008995

0000760c <__sfmoreglue>:
    760c:	b570      	push	{r4, r5, r6, lr}
    760e:	2568      	movs	r5, #104	; 0x68
    7610:	1e4a      	subs	r2, r1, #1
    7612:	4355      	muls	r5, r2
    7614:	000e      	movs	r6, r1
    7616:	0029      	movs	r1, r5
    7618:	3174      	adds	r1, #116	; 0x74
    761a:	f7ff fc11 	bl	6e40 <_malloc_r>
    761e:	1e04      	subs	r4, r0, #0
    7620:	d008      	beq.n	7634 <__sfmoreglue+0x28>
    7622:	2100      	movs	r1, #0
    7624:	002a      	movs	r2, r5
    7626:	6001      	str	r1, [r0, #0]
    7628:	6046      	str	r6, [r0, #4]
    762a:	300c      	adds	r0, #12
    762c:	60a0      	str	r0, [r4, #8]
    762e:	3268      	adds	r2, #104	; 0x68
    7630:	f7ff fbb3 	bl	6d9a <memset>
    7634:	0020      	movs	r0, r4
    7636:	bd70      	pop	{r4, r5, r6, pc}

00007638 <__sinit>:
    7638:	6983      	ldr	r3, [r0, #24]
    763a:	b513      	push	{r0, r1, r4, lr}
    763c:	0004      	movs	r4, r0
    763e:	2b00      	cmp	r3, #0
    7640:	d128      	bne.n	7694 <__sinit+0x5c>
    7642:	6483      	str	r3, [r0, #72]	; 0x48
    7644:	64c3      	str	r3, [r0, #76]	; 0x4c
    7646:	6503      	str	r3, [r0, #80]	; 0x50
    7648:	4b13      	ldr	r3, [pc, #76]	; (7698 <__sinit+0x60>)
    764a:	4a14      	ldr	r2, [pc, #80]	; (769c <__sinit+0x64>)
    764c:	681b      	ldr	r3, [r3, #0]
    764e:	6282      	str	r2, [r0, #40]	; 0x28
    7650:	9301      	str	r3, [sp, #4]
    7652:	4298      	cmp	r0, r3
    7654:	d101      	bne.n	765a <__sinit+0x22>
    7656:	2301      	movs	r3, #1
    7658:	6183      	str	r3, [r0, #24]
    765a:	0020      	movs	r0, r4
    765c:	f000 f820 	bl	76a0 <__sfp>
    7660:	6060      	str	r0, [r4, #4]
    7662:	0020      	movs	r0, r4
    7664:	f000 f81c 	bl	76a0 <__sfp>
    7668:	60a0      	str	r0, [r4, #8]
    766a:	0020      	movs	r0, r4
    766c:	f000 f818 	bl	76a0 <__sfp>
    7670:	2200      	movs	r2, #0
    7672:	60e0      	str	r0, [r4, #12]
    7674:	2104      	movs	r1, #4
    7676:	6860      	ldr	r0, [r4, #4]
    7678:	f7ff ffa4 	bl	75c4 <std.isra.0>
    767c:	2201      	movs	r2, #1
    767e:	2109      	movs	r1, #9
    7680:	68a0      	ldr	r0, [r4, #8]
    7682:	f7ff ff9f 	bl	75c4 <std.isra.0>
    7686:	2202      	movs	r2, #2
    7688:	2112      	movs	r1, #18
    768a:	68e0      	ldr	r0, [r4, #12]
    768c:	f7ff ff9a 	bl	75c4 <std.isra.0>
    7690:	2301      	movs	r3, #1
    7692:	61a3      	str	r3, [r4, #24]
    7694:	bd13      	pop	{r0, r1, r4, pc}
    7696:	46c0      	nop			; (mov r8, r8)
    7698:	0000a068 	.word	0x0000a068
    769c:	000075b5 	.word	0x000075b5

000076a0 <__sfp>:
    76a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76a2:	4b1e      	ldr	r3, [pc, #120]	; (771c <__sfp+0x7c>)
    76a4:	0007      	movs	r7, r0
    76a6:	681e      	ldr	r6, [r3, #0]
    76a8:	69b3      	ldr	r3, [r6, #24]
    76aa:	2b00      	cmp	r3, #0
    76ac:	d102      	bne.n	76b4 <__sfp+0x14>
    76ae:	0030      	movs	r0, r6
    76b0:	f7ff ffc2 	bl	7638 <__sinit>
    76b4:	3648      	adds	r6, #72	; 0x48
    76b6:	68b4      	ldr	r4, [r6, #8]
    76b8:	6873      	ldr	r3, [r6, #4]
    76ba:	3b01      	subs	r3, #1
    76bc:	d504      	bpl.n	76c8 <__sfp+0x28>
    76be:	6833      	ldr	r3, [r6, #0]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d007      	beq.n	76d4 <__sfp+0x34>
    76c4:	6836      	ldr	r6, [r6, #0]
    76c6:	e7f6      	b.n	76b6 <__sfp+0x16>
    76c8:	220c      	movs	r2, #12
    76ca:	5ea5      	ldrsh	r5, [r4, r2]
    76cc:	2d00      	cmp	r5, #0
    76ce:	d00d      	beq.n	76ec <__sfp+0x4c>
    76d0:	3468      	adds	r4, #104	; 0x68
    76d2:	e7f2      	b.n	76ba <__sfp+0x1a>
    76d4:	2104      	movs	r1, #4
    76d6:	0038      	movs	r0, r7
    76d8:	f7ff ff98 	bl	760c <__sfmoreglue>
    76dc:	6030      	str	r0, [r6, #0]
    76de:	2800      	cmp	r0, #0
    76e0:	d1f0      	bne.n	76c4 <__sfp+0x24>
    76e2:	230c      	movs	r3, #12
    76e4:	0004      	movs	r4, r0
    76e6:	603b      	str	r3, [r7, #0]
    76e8:	0020      	movs	r0, r4
    76ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76ec:	2301      	movs	r3, #1
    76ee:	0020      	movs	r0, r4
    76f0:	425b      	negs	r3, r3
    76f2:	81e3      	strh	r3, [r4, #14]
    76f4:	3302      	adds	r3, #2
    76f6:	81a3      	strh	r3, [r4, #12]
    76f8:	6665      	str	r5, [r4, #100]	; 0x64
    76fa:	6025      	str	r5, [r4, #0]
    76fc:	60a5      	str	r5, [r4, #8]
    76fe:	6065      	str	r5, [r4, #4]
    7700:	6125      	str	r5, [r4, #16]
    7702:	6165      	str	r5, [r4, #20]
    7704:	61a5      	str	r5, [r4, #24]
    7706:	2208      	movs	r2, #8
    7708:	0029      	movs	r1, r5
    770a:	305c      	adds	r0, #92	; 0x5c
    770c:	f7ff fb45 	bl	6d9a <memset>
    7710:	6365      	str	r5, [r4, #52]	; 0x34
    7712:	63a5      	str	r5, [r4, #56]	; 0x38
    7714:	64a5      	str	r5, [r4, #72]	; 0x48
    7716:	64e5      	str	r5, [r4, #76]	; 0x4c
    7718:	e7e6      	b.n	76e8 <__sfp+0x48>
    771a:	46c0      	nop			; (mov r8, r8)
    771c:	0000a068 	.word	0x0000a068

00007720 <_fwalk>:
    7720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7722:	3048      	adds	r0, #72	; 0x48
    7724:	0004      	movs	r4, r0
    7726:	2600      	movs	r6, #0
    7728:	9101      	str	r1, [sp, #4]
    772a:	2c00      	cmp	r4, #0
    772c:	d101      	bne.n	7732 <_fwalk+0x12>
    772e:	0030      	movs	r0, r6
    7730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7732:	68a5      	ldr	r5, [r4, #8]
    7734:	6867      	ldr	r7, [r4, #4]
    7736:	3f01      	subs	r7, #1
    7738:	d501      	bpl.n	773e <_fwalk+0x1e>
    773a:	6824      	ldr	r4, [r4, #0]
    773c:	e7f5      	b.n	772a <_fwalk+0xa>
    773e:	89ab      	ldrh	r3, [r5, #12]
    7740:	2b01      	cmp	r3, #1
    7742:	d907      	bls.n	7754 <_fwalk+0x34>
    7744:	220e      	movs	r2, #14
    7746:	5eab      	ldrsh	r3, [r5, r2]
    7748:	3301      	adds	r3, #1
    774a:	d003      	beq.n	7754 <_fwalk+0x34>
    774c:	0028      	movs	r0, r5
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	4798      	blx	r3
    7752:	4306      	orrs	r6, r0
    7754:	3568      	adds	r5, #104	; 0x68
    7756:	e7ee      	b.n	7736 <_fwalk+0x16>

00007758 <_fwalk_reent>:
    7758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    775a:	0004      	movs	r4, r0
    775c:	0007      	movs	r7, r0
    775e:	2600      	movs	r6, #0
    7760:	9101      	str	r1, [sp, #4]
    7762:	3448      	adds	r4, #72	; 0x48
    7764:	2c00      	cmp	r4, #0
    7766:	d101      	bne.n	776c <_fwalk_reent+0x14>
    7768:	0030      	movs	r0, r6
    776a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    776c:	6863      	ldr	r3, [r4, #4]
    776e:	68a5      	ldr	r5, [r4, #8]
    7770:	9300      	str	r3, [sp, #0]
    7772:	9b00      	ldr	r3, [sp, #0]
    7774:	3b01      	subs	r3, #1
    7776:	9300      	str	r3, [sp, #0]
    7778:	d501      	bpl.n	777e <_fwalk_reent+0x26>
    777a:	6824      	ldr	r4, [r4, #0]
    777c:	e7f2      	b.n	7764 <_fwalk_reent+0xc>
    777e:	89ab      	ldrh	r3, [r5, #12]
    7780:	2b01      	cmp	r3, #1
    7782:	d908      	bls.n	7796 <_fwalk_reent+0x3e>
    7784:	220e      	movs	r2, #14
    7786:	5eab      	ldrsh	r3, [r5, r2]
    7788:	3301      	adds	r3, #1
    778a:	d004      	beq.n	7796 <_fwalk_reent+0x3e>
    778c:	0029      	movs	r1, r5
    778e:	0038      	movs	r0, r7
    7790:	9b01      	ldr	r3, [sp, #4]
    7792:	4798      	blx	r3
    7794:	4306      	orrs	r6, r0
    7796:	3568      	adds	r5, #104	; 0x68
    7798:	e7eb      	b.n	7772 <_fwalk_reent+0x1a>
	...

0000779c <__swhatbuf_r>:
    779c:	b570      	push	{r4, r5, r6, lr}
    779e:	000e      	movs	r6, r1
    77a0:	001d      	movs	r5, r3
    77a2:	230e      	movs	r3, #14
    77a4:	5ec9      	ldrsh	r1, [r1, r3]
    77a6:	b090      	sub	sp, #64	; 0x40
    77a8:	0014      	movs	r4, r2
    77aa:	2900      	cmp	r1, #0
    77ac:	da07      	bge.n	77be <__swhatbuf_r+0x22>
    77ae:	2300      	movs	r3, #0
    77b0:	602b      	str	r3, [r5, #0]
    77b2:	89b3      	ldrh	r3, [r6, #12]
    77b4:	061b      	lsls	r3, r3, #24
    77b6:	d411      	bmi.n	77dc <__swhatbuf_r+0x40>
    77b8:	2380      	movs	r3, #128	; 0x80
    77ba:	00db      	lsls	r3, r3, #3
    77bc:	e00f      	b.n	77de <__swhatbuf_r+0x42>
    77be:	aa01      	add	r2, sp, #4
    77c0:	f001 faf2 	bl	8da8 <_fstat_r>
    77c4:	2800      	cmp	r0, #0
    77c6:	dbf2      	blt.n	77ae <__swhatbuf_r+0x12>
    77c8:	22f0      	movs	r2, #240	; 0xf0
    77ca:	9b02      	ldr	r3, [sp, #8]
    77cc:	0212      	lsls	r2, r2, #8
    77ce:	4013      	ands	r3, r2
    77d0:	4a05      	ldr	r2, [pc, #20]	; (77e8 <__swhatbuf_r+0x4c>)
    77d2:	189b      	adds	r3, r3, r2
    77d4:	425a      	negs	r2, r3
    77d6:	4153      	adcs	r3, r2
    77d8:	602b      	str	r3, [r5, #0]
    77da:	e7ed      	b.n	77b8 <__swhatbuf_r+0x1c>
    77dc:	2340      	movs	r3, #64	; 0x40
    77de:	2000      	movs	r0, #0
    77e0:	6023      	str	r3, [r4, #0]
    77e2:	b010      	add	sp, #64	; 0x40
    77e4:	bd70      	pop	{r4, r5, r6, pc}
    77e6:	46c0      	nop			; (mov r8, r8)
    77e8:	ffffe000 	.word	0xffffe000

000077ec <__smakebuf_r>:
    77ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    77ee:	2602      	movs	r6, #2
    77f0:	898b      	ldrh	r3, [r1, #12]
    77f2:	0005      	movs	r5, r0
    77f4:	000c      	movs	r4, r1
    77f6:	4233      	tst	r3, r6
    77f8:	d006      	beq.n	7808 <__smakebuf_r+0x1c>
    77fa:	0023      	movs	r3, r4
    77fc:	3347      	adds	r3, #71	; 0x47
    77fe:	6023      	str	r3, [r4, #0]
    7800:	6123      	str	r3, [r4, #16]
    7802:	2301      	movs	r3, #1
    7804:	6163      	str	r3, [r4, #20]
    7806:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7808:	ab01      	add	r3, sp, #4
    780a:	466a      	mov	r2, sp
    780c:	f7ff ffc6 	bl	779c <__swhatbuf_r>
    7810:	9900      	ldr	r1, [sp, #0]
    7812:	0007      	movs	r7, r0
    7814:	0028      	movs	r0, r5
    7816:	f7ff fb13 	bl	6e40 <_malloc_r>
    781a:	2800      	cmp	r0, #0
    781c:	d108      	bne.n	7830 <__smakebuf_r+0x44>
    781e:	220c      	movs	r2, #12
    7820:	5ea3      	ldrsh	r3, [r4, r2]
    7822:	059a      	lsls	r2, r3, #22
    7824:	d4ef      	bmi.n	7806 <__smakebuf_r+0x1a>
    7826:	2203      	movs	r2, #3
    7828:	4393      	bics	r3, r2
    782a:	431e      	orrs	r6, r3
    782c:	81a6      	strh	r6, [r4, #12]
    782e:	e7e4      	b.n	77fa <__smakebuf_r+0xe>
    7830:	4b0f      	ldr	r3, [pc, #60]	; (7870 <__smakebuf_r+0x84>)
    7832:	62ab      	str	r3, [r5, #40]	; 0x28
    7834:	2380      	movs	r3, #128	; 0x80
    7836:	89a2      	ldrh	r2, [r4, #12]
    7838:	6020      	str	r0, [r4, #0]
    783a:	4313      	orrs	r3, r2
    783c:	81a3      	strh	r3, [r4, #12]
    783e:	9b00      	ldr	r3, [sp, #0]
    7840:	6120      	str	r0, [r4, #16]
    7842:	6163      	str	r3, [r4, #20]
    7844:	9b01      	ldr	r3, [sp, #4]
    7846:	2b00      	cmp	r3, #0
    7848:	d00d      	beq.n	7866 <__smakebuf_r+0x7a>
    784a:	230e      	movs	r3, #14
    784c:	5ee1      	ldrsh	r1, [r4, r3]
    784e:	0028      	movs	r0, r5
    7850:	f001 fabc 	bl	8dcc <_isatty_r>
    7854:	2800      	cmp	r0, #0
    7856:	d006      	beq.n	7866 <__smakebuf_r+0x7a>
    7858:	2203      	movs	r2, #3
    785a:	89a3      	ldrh	r3, [r4, #12]
    785c:	4393      	bics	r3, r2
    785e:	001a      	movs	r2, r3
    7860:	2301      	movs	r3, #1
    7862:	4313      	orrs	r3, r2
    7864:	81a3      	strh	r3, [r4, #12]
    7866:	89a0      	ldrh	r0, [r4, #12]
    7868:	4338      	orrs	r0, r7
    786a:	81a0      	strh	r0, [r4, #12]
    786c:	e7cb      	b.n	7806 <__smakebuf_r+0x1a>
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	000075b5 	.word	0x000075b5

00007874 <__malloc_lock>:
    7874:	4770      	bx	lr

00007876 <__malloc_unlock>:
    7876:	4770      	bx	lr

00007878 <__ssputs_r>:
    7878:	b5f0      	push	{r4, r5, r6, r7, lr}
    787a:	688e      	ldr	r6, [r1, #8]
    787c:	b085      	sub	sp, #20
    787e:	0007      	movs	r7, r0
    7880:	000c      	movs	r4, r1
    7882:	9203      	str	r2, [sp, #12]
    7884:	9301      	str	r3, [sp, #4]
    7886:	429e      	cmp	r6, r3
    7888:	d839      	bhi.n	78fe <__ssputs_r+0x86>
    788a:	2390      	movs	r3, #144	; 0x90
    788c:	898a      	ldrh	r2, [r1, #12]
    788e:	00db      	lsls	r3, r3, #3
    7890:	421a      	tst	r2, r3
    7892:	d034      	beq.n	78fe <__ssputs_r+0x86>
    7894:	2503      	movs	r5, #3
    7896:	6909      	ldr	r1, [r1, #16]
    7898:	6823      	ldr	r3, [r4, #0]
    789a:	1a5b      	subs	r3, r3, r1
    789c:	9302      	str	r3, [sp, #8]
    789e:	6963      	ldr	r3, [r4, #20]
    78a0:	9802      	ldr	r0, [sp, #8]
    78a2:	435d      	muls	r5, r3
    78a4:	0feb      	lsrs	r3, r5, #31
    78a6:	195d      	adds	r5, r3, r5
    78a8:	9b01      	ldr	r3, [sp, #4]
    78aa:	106d      	asrs	r5, r5, #1
    78ac:	3301      	adds	r3, #1
    78ae:	181b      	adds	r3, r3, r0
    78b0:	42ab      	cmp	r3, r5
    78b2:	d900      	bls.n	78b6 <__ssputs_r+0x3e>
    78b4:	001d      	movs	r5, r3
    78b6:	0553      	lsls	r3, r2, #21
    78b8:	d532      	bpl.n	7920 <__ssputs_r+0xa8>
    78ba:	0029      	movs	r1, r5
    78bc:	0038      	movs	r0, r7
    78be:	f7ff fabf 	bl	6e40 <_malloc_r>
    78c2:	1e06      	subs	r6, r0, #0
    78c4:	d109      	bne.n	78da <__ssputs_r+0x62>
    78c6:	230c      	movs	r3, #12
    78c8:	603b      	str	r3, [r7, #0]
    78ca:	2340      	movs	r3, #64	; 0x40
    78cc:	2001      	movs	r0, #1
    78ce:	89a2      	ldrh	r2, [r4, #12]
    78d0:	4240      	negs	r0, r0
    78d2:	4313      	orrs	r3, r2
    78d4:	81a3      	strh	r3, [r4, #12]
    78d6:	b005      	add	sp, #20
    78d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78da:	9a02      	ldr	r2, [sp, #8]
    78dc:	6921      	ldr	r1, [r4, #16]
    78de:	f7ff fa41 	bl	6d64 <memcpy>
    78e2:	89a3      	ldrh	r3, [r4, #12]
    78e4:	4a14      	ldr	r2, [pc, #80]	; (7938 <__ssputs_r+0xc0>)
    78e6:	401a      	ands	r2, r3
    78e8:	2380      	movs	r3, #128	; 0x80
    78ea:	4313      	orrs	r3, r2
    78ec:	81a3      	strh	r3, [r4, #12]
    78ee:	9b02      	ldr	r3, [sp, #8]
    78f0:	6126      	str	r6, [r4, #16]
    78f2:	18f6      	adds	r6, r6, r3
    78f4:	6026      	str	r6, [r4, #0]
    78f6:	6165      	str	r5, [r4, #20]
    78f8:	9e01      	ldr	r6, [sp, #4]
    78fa:	1aed      	subs	r5, r5, r3
    78fc:	60a5      	str	r5, [r4, #8]
    78fe:	9b01      	ldr	r3, [sp, #4]
    7900:	42b3      	cmp	r3, r6
    7902:	d200      	bcs.n	7906 <__ssputs_r+0x8e>
    7904:	001e      	movs	r6, r3
    7906:	0032      	movs	r2, r6
    7908:	9903      	ldr	r1, [sp, #12]
    790a:	6820      	ldr	r0, [r4, #0]
    790c:	f7ff fa33 	bl	6d76 <memmove>
    7910:	68a3      	ldr	r3, [r4, #8]
    7912:	2000      	movs	r0, #0
    7914:	1b9b      	subs	r3, r3, r6
    7916:	60a3      	str	r3, [r4, #8]
    7918:	6823      	ldr	r3, [r4, #0]
    791a:	199e      	adds	r6, r3, r6
    791c:	6026      	str	r6, [r4, #0]
    791e:	e7da      	b.n	78d6 <__ssputs_r+0x5e>
    7920:	002a      	movs	r2, r5
    7922:	0038      	movs	r0, r7
    7924:	f001 faa7 	bl	8e76 <_realloc_r>
    7928:	1e06      	subs	r6, r0, #0
    792a:	d1e0      	bne.n	78ee <__ssputs_r+0x76>
    792c:	6921      	ldr	r1, [r4, #16]
    792e:	0038      	movs	r0, r7
    7930:	f7ff fa3c 	bl	6dac <_free_r>
    7934:	e7c7      	b.n	78c6 <__ssputs_r+0x4e>
    7936:	46c0      	nop			; (mov r8, r8)
    7938:	fffffb7f 	.word	0xfffffb7f

0000793c <_svfiprintf_r>:
    793c:	b5f0      	push	{r4, r5, r6, r7, lr}
    793e:	b09f      	sub	sp, #124	; 0x7c
    7940:	9002      	str	r0, [sp, #8]
    7942:	9305      	str	r3, [sp, #20]
    7944:	898b      	ldrh	r3, [r1, #12]
    7946:	000f      	movs	r7, r1
    7948:	0016      	movs	r6, r2
    794a:	061b      	lsls	r3, r3, #24
    794c:	d511      	bpl.n	7972 <_svfiprintf_r+0x36>
    794e:	690b      	ldr	r3, [r1, #16]
    7950:	2b00      	cmp	r3, #0
    7952:	d10e      	bne.n	7972 <_svfiprintf_r+0x36>
    7954:	2140      	movs	r1, #64	; 0x40
    7956:	f7ff fa73 	bl	6e40 <_malloc_r>
    795a:	6038      	str	r0, [r7, #0]
    795c:	6138      	str	r0, [r7, #16]
    795e:	2800      	cmp	r0, #0
    7960:	d105      	bne.n	796e <_svfiprintf_r+0x32>
    7962:	230c      	movs	r3, #12
    7964:	9a02      	ldr	r2, [sp, #8]
    7966:	3801      	subs	r0, #1
    7968:	6013      	str	r3, [r2, #0]
    796a:	b01f      	add	sp, #124	; 0x7c
    796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    796e:	2340      	movs	r3, #64	; 0x40
    7970:	617b      	str	r3, [r7, #20]
    7972:	2300      	movs	r3, #0
    7974:	ad06      	add	r5, sp, #24
    7976:	616b      	str	r3, [r5, #20]
    7978:	3320      	adds	r3, #32
    797a:	766b      	strb	r3, [r5, #25]
    797c:	3310      	adds	r3, #16
    797e:	76ab      	strb	r3, [r5, #26]
    7980:	0034      	movs	r4, r6
    7982:	7823      	ldrb	r3, [r4, #0]
    7984:	2b00      	cmp	r3, #0
    7986:	d147      	bne.n	7a18 <_svfiprintf_r+0xdc>
    7988:	1ba3      	subs	r3, r4, r6
    798a:	9304      	str	r3, [sp, #16]
    798c:	d00d      	beq.n	79aa <_svfiprintf_r+0x6e>
    798e:	1ba3      	subs	r3, r4, r6
    7990:	0032      	movs	r2, r6
    7992:	0039      	movs	r1, r7
    7994:	9802      	ldr	r0, [sp, #8]
    7996:	f7ff ff6f 	bl	7878 <__ssputs_r>
    799a:	1c43      	adds	r3, r0, #1
    799c:	d100      	bne.n	79a0 <_svfiprintf_r+0x64>
    799e:	e0b5      	b.n	7b0c <_svfiprintf_r+0x1d0>
    79a0:	696a      	ldr	r2, [r5, #20]
    79a2:	9b04      	ldr	r3, [sp, #16]
    79a4:	4694      	mov	ip, r2
    79a6:	4463      	add	r3, ip
    79a8:	616b      	str	r3, [r5, #20]
    79aa:	7823      	ldrb	r3, [r4, #0]
    79ac:	2b00      	cmp	r3, #0
    79ae:	d100      	bne.n	79b2 <_svfiprintf_r+0x76>
    79b0:	e0ac      	b.n	7b0c <_svfiprintf_r+0x1d0>
    79b2:	2201      	movs	r2, #1
    79b4:	2300      	movs	r3, #0
    79b6:	4252      	negs	r2, r2
    79b8:	606a      	str	r2, [r5, #4]
    79ba:	a902      	add	r1, sp, #8
    79bc:	3254      	adds	r2, #84	; 0x54
    79be:	1852      	adds	r2, r2, r1
    79c0:	3401      	adds	r4, #1
    79c2:	602b      	str	r3, [r5, #0]
    79c4:	60eb      	str	r3, [r5, #12]
    79c6:	60ab      	str	r3, [r5, #8]
    79c8:	7013      	strb	r3, [r2, #0]
    79ca:	65ab      	str	r3, [r5, #88]	; 0x58
    79cc:	4e58      	ldr	r6, [pc, #352]	; (7b30 <_svfiprintf_r+0x1f4>)
    79ce:	2205      	movs	r2, #5
    79d0:	7821      	ldrb	r1, [r4, #0]
    79d2:	0030      	movs	r0, r6
    79d4:	f001 fa44 	bl	8e60 <memchr>
    79d8:	1c62      	adds	r2, r4, #1
    79da:	2800      	cmp	r0, #0
    79dc:	d120      	bne.n	7a20 <_svfiprintf_r+0xe4>
    79de:	6829      	ldr	r1, [r5, #0]
    79e0:	06cb      	lsls	r3, r1, #27
    79e2:	d504      	bpl.n	79ee <_svfiprintf_r+0xb2>
    79e4:	2353      	movs	r3, #83	; 0x53
    79e6:	ae02      	add	r6, sp, #8
    79e8:	3020      	adds	r0, #32
    79ea:	199b      	adds	r3, r3, r6
    79ec:	7018      	strb	r0, [r3, #0]
    79ee:	070b      	lsls	r3, r1, #28
    79f0:	d504      	bpl.n	79fc <_svfiprintf_r+0xc0>
    79f2:	2353      	movs	r3, #83	; 0x53
    79f4:	202b      	movs	r0, #43	; 0x2b
    79f6:	ae02      	add	r6, sp, #8
    79f8:	199b      	adds	r3, r3, r6
    79fa:	7018      	strb	r0, [r3, #0]
    79fc:	7823      	ldrb	r3, [r4, #0]
    79fe:	2b2a      	cmp	r3, #42	; 0x2a
    7a00:	d016      	beq.n	7a30 <_svfiprintf_r+0xf4>
    7a02:	2000      	movs	r0, #0
    7a04:	210a      	movs	r1, #10
    7a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a08:	7822      	ldrb	r2, [r4, #0]
    7a0a:	3a30      	subs	r2, #48	; 0x30
    7a0c:	2a09      	cmp	r2, #9
    7a0e:	d955      	bls.n	7abc <_svfiprintf_r+0x180>
    7a10:	2800      	cmp	r0, #0
    7a12:	d015      	beq.n	7a40 <_svfiprintf_r+0x104>
    7a14:	9309      	str	r3, [sp, #36]	; 0x24
    7a16:	e013      	b.n	7a40 <_svfiprintf_r+0x104>
    7a18:	2b25      	cmp	r3, #37	; 0x25
    7a1a:	d0b5      	beq.n	7988 <_svfiprintf_r+0x4c>
    7a1c:	3401      	adds	r4, #1
    7a1e:	e7b0      	b.n	7982 <_svfiprintf_r+0x46>
    7a20:	2301      	movs	r3, #1
    7a22:	1b80      	subs	r0, r0, r6
    7a24:	4083      	lsls	r3, r0
    7a26:	6829      	ldr	r1, [r5, #0]
    7a28:	0014      	movs	r4, r2
    7a2a:	430b      	orrs	r3, r1
    7a2c:	602b      	str	r3, [r5, #0]
    7a2e:	e7cd      	b.n	79cc <_svfiprintf_r+0x90>
    7a30:	9b05      	ldr	r3, [sp, #20]
    7a32:	1d18      	adds	r0, r3, #4
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	9005      	str	r0, [sp, #20]
    7a38:	2b00      	cmp	r3, #0
    7a3a:	db39      	blt.n	7ab0 <_svfiprintf_r+0x174>
    7a3c:	9309      	str	r3, [sp, #36]	; 0x24
    7a3e:	0014      	movs	r4, r2
    7a40:	7823      	ldrb	r3, [r4, #0]
    7a42:	2b2e      	cmp	r3, #46	; 0x2e
    7a44:	d10b      	bne.n	7a5e <_svfiprintf_r+0x122>
    7a46:	7863      	ldrb	r3, [r4, #1]
    7a48:	1c62      	adds	r2, r4, #1
    7a4a:	2b2a      	cmp	r3, #42	; 0x2a
    7a4c:	d13e      	bne.n	7acc <_svfiprintf_r+0x190>
    7a4e:	9b05      	ldr	r3, [sp, #20]
    7a50:	3402      	adds	r4, #2
    7a52:	1d1a      	adds	r2, r3, #4
    7a54:	681b      	ldr	r3, [r3, #0]
    7a56:	9205      	str	r2, [sp, #20]
    7a58:	2b00      	cmp	r3, #0
    7a5a:	db34      	blt.n	7ac6 <_svfiprintf_r+0x18a>
    7a5c:	9307      	str	r3, [sp, #28]
    7a5e:	4e35      	ldr	r6, [pc, #212]	; (7b34 <_svfiprintf_r+0x1f8>)
    7a60:	7821      	ldrb	r1, [r4, #0]
    7a62:	2203      	movs	r2, #3
    7a64:	0030      	movs	r0, r6
    7a66:	f001 f9fb 	bl	8e60 <memchr>
    7a6a:	2800      	cmp	r0, #0
    7a6c:	d006      	beq.n	7a7c <_svfiprintf_r+0x140>
    7a6e:	2340      	movs	r3, #64	; 0x40
    7a70:	1b80      	subs	r0, r0, r6
    7a72:	4083      	lsls	r3, r0
    7a74:	682a      	ldr	r2, [r5, #0]
    7a76:	3401      	adds	r4, #1
    7a78:	4313      	orrs	r3, r2
    7a7a:	602b      	str	r3, [r5, #0]
    7a7c:	7821      	ldrb	r1, [r4, #0]
    7a7e:	2206      	movs	r2, #6
    7a80:	482d      	ldr	r0, [pc, #180]	; (7b38 <_svfiprintf_r+0x1fc>)
    7a82:	1c66      	adds	r6, r4, #1
    7a84:	7629      	strb	r1, [r5, #24]
    7a86:	f001 f9eb 	bl	8e60 <memchr>
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d046      	beq.n	7b1c <_svfiprintf_r+0x1e0>
    7a8e:	4b2b      	ldr	r3, [pc, #172]	; (7b3c <_svfiprintf_r+0x200>)
    7a90:	2b00      	cmp	r3, #0
    7a92:	d12f      	bne.n	7af4 <_svfiprintf_r+0x1b8>
    7a94:	6829      	ldr	r1, [r5, #0]
    7a96:	9b05      	ldr	r3, [sp, #20]
    7a98:	2207      	movs	r2, #7
    7a9a:	05c9      	lsls	r1, r1, #23
    7a9c:	d528      	bpl.n	7af0 <_svfiprintf_r+0x1b4>
    7a9e:	189b      	adds	r3, r3, r2
    7aa0:	4393      	bics	r3, r2
    7aa2:	3308      	adds	r3, #8
    7aa4:	9305      	str	r3, [sp, #20]
    7aa6:	696b      	ldr	r3, [r5, #20]
    7aa8:	9a03      	ldr	r2, [sp, #12]
    7aaa:	189b      	adds	r3, r3, r2
    7aac:	616b      	str	r3, [r5, #20]
    7aae:	e767      	b.n	7980 <_svfiprintf_r+0x44>
    7ab0:	425b      	negs	r3, r3
    7ab2:	60eb      	str	r3, [r5, #12]
    7ab4:	2302      	movs	r3, #2
    7ab6:	430b      	orrs	r3, r1
    7ab8:	602b      	str	r3, [r5, #0]
    7aba:	e7c0      	b.n	7a3e <_svfiprintf_r+0x102>
    7abc:	434b      	muls	r3, r1
    7abe:	3401      	adds	r4, #1
    7ac0:	189b      	adds	r3, r3, r2
    7ac2:	2001      	movs	r0, #1
    7ac4:	e7a0      	b.n	7a08 <_svfiprintf_r+0xcc>
    7ac6:	2301      	movs	r3, #1
    7ac8:	425b      	negs	r3, r3
    7aca:	e7c7      	b.n	7a5c <_svfiprintf_r+0x120>
    7acc:	2300      	movs	r3, #0
    7ace:	0014      	movs	r4, r2
    7ad0:	200a      	movs	r0, #10
    7ad2:	001a      	movs	r2, r3
    7ad4:	606b      	str	r3, [r5, #4]
    7ad6:	7821      	ldrb	r1, [r4, #0]
    7ad8:	3930      	subs	r1, #48	; 0x30
    7ada:	2909      	cmp	r1, #9
    7adc:	d903      	bls.n	7ae6 <_svfiprintf_r+0x1aa>
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d0bd      	beq.n	7a5e <_svfiprintf_r+0x122>
    7ae2:	9207      	str	r2, [sp, #28]
    7ae4:	e7bb      	b.n	7a5e <_svfiprintf_r+0x122>
    7ae6:	4342      	muls	r2, r0
    7ae8:	3401      	adds	r4, #1
    7aea:	1852      	adds	r2, r2, r1
    7aec:	2301      	movs	r3, #1
    7aee:	e7f2      	b.n	7ad6 <_svfiprintf_r+0x19a>
    7af0:	3307      	adds	r3, #7
    7af2:	e7d5      	b.n	7aa0 <_svfiprintf_r+0x164>
    7af4:	ab05      	add	r3, sp, #20
    7af6:	9300      	str	r3, [sp, #0]
    7af8:	003a      	movs	r2, r7
    7afa:	4b11      	ldr	r3, [pc, #68]	; (7b40 <_svfiprintf_r+0x204>)
    7afc:	0029      	movs	r1, r5
    7afe:	9802      	ldr	r0, [sp, #8]
    7b00:	e000      	b.n	7b04 <_svfiprintf_r+0x1c8>
    7b02:	bf00      	nop
    7b04:	9003      	str	r0, [sp, #12]
    7b06:	9b03      	ldr	r3, [sp, #12]
    7b08:	3301      	adds	r3, #1
    7b0a:	d1cc      	bne.n	7aa6 <_svfiprintf_r+0x16a>
    7b0c:	89bb      	ldrh	r3, [r7, #12]
    7b0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7b10:	065b      	lsls	r3, r3, #25
    7b12:	d400      	bmi.n	7b16 <_svfiprintf_r+0x1da>
    7b14:	e729      	b.n	796a <_svfiprintf_r+0x2e>
    7b16:	2001      	movs	r0, #1
    7b18:	4240      	negs	r0, r0
    7b1a:	e726      	b.n	796a <_svfiprintf_r+0x2e>
    7b1c:	ab05      	add	r3, sp, #20
    7b1e:	9300      	str	r3, [sp, #0]
    7b20:	003a      	movs	r2, r7
    7b22:	4b07      	ldr	r3, [pc, #28]	; (7b40 <_svfiprintf_r+0x204>)
    7b24:	0029      	movs	r1, r5
    7b26:	9802      	ldr	r0, [sp, #8]
    7b28:	f000 f9be 	bl	7ea8 <_printf_i>
    7b2c:	e7ea      	b.n	7b04 <_svfiprintf_r+0x1c8>
    7b2e:	46c0      	nop			; (mov r8, r8)
    7b30:	0000a0cc 	.word	0x0000a0cc
    7b34:	0000a0d2 	.word	0x0000a0d2
    7b38:	0000a0d6 	.word	0x0000a0d6
    7b3c:	00000000 	.word	0x00000000
    7b40:	00007879 	.word	0x00007879

00007b44 <__sfputc_r>:
    7b44:	6893      	ldr	r3, [r2, #8]
    7b46:	b510      	push	{r4, lr}
    7b48:	3b01      	subs	r3, #1
    7b4a:	6093      	str	r3, [r2, #8]
    7b4c:	2b00      	cmp	r3, #0
    7b4e:	da05      	bge.n	7b5c <__sfputc_r+0x18>
    7b50:	6994      	ldr	r4, [r2, #24]
    7b52:	42a3      	cmp	r3, r4
    7b54:	db08      	blt.n	7b68 <__sfputc_r+0x24>
    7b56:	b2cb      	uxtb	r3, r1
    7b58:	2b0a      	cmp	r3, #10
    7b5a:	d005      	beq.n	7b68 <__sfputc_r+0x24>
    7b5c:	6813      	ldr	r3, [r2, #0]
    7b5e:	1c58      	adds	r0, r3, #1
    7b60:	6010      	str	r0, [r2, #0]
    7b62:	7019      	strb	r1, [r3, #0]
    7b64:	b2c8      	uxtb	r0, r1
    7b66:	bd10      	pop	{r4, pc}
    7b68:	f7ff fb8e 	bl	7288 <__swbuf_r>
    7b6c:	e7fb      	b.n	7b66 <__sfputc_r+0x22>

00007b6e <__sfputs_r>:
    7b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b70:	0006      	movs	r6, r0
    7b72:	000f      	movs	r7, r1
    7b74:	0014      	movs	r4, r2
    7b76:	18d5      	adds	r5, r2, r3
    7b78:	42ac      	cmp	r4, r5
    7b7a:	d101      	bne.n	7b80 <__sfputs_r+0x12>
    7b7c:	2000      	movs	r0, #0
    7b7e:	e007      	b.n	7b90 <__sfputs_r+0x22>
    7b80:	7821      	ldrb	r1, [r4, #0]
    7b82:	003a      	movs	r2, r7
    7b84:	0030      	movs	r0, r6
    7b86:	f7ff ffdd 	bl	7b44 <__sfputc_r>
    7b8a:	3401      	adds	r4, #1
    7b8c:	1c43      	adds	r3, r0, #1
    7b8e:	d1f3      	bne.n	7b78 <__sfputs_r+0xa>
    7b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007b94 <_vfiprintf_r>:
    7b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b96:	b09f      	sub	sp, #124	; 0x7c
    7b98:	0006      	movs	r6, r0
    7b9a:	000f      	movs	r7, r1
    7b9c:	0014      	movs	r4, r2
    7b9e:	9305      	str	r3, [sp, #20]
    7ba0:	2800      	cmp	r0, #0
    7ba2:	d004      	beq.n	7bae <_vfiprintf_r+0x1a>
    7ba4:	6983      	ldr	r3, [r0, #24]
    7ba6:	2b00      	cmp	r3, #0
    7ba8:	d101      	bne.n	7bae <_vfiprintf_r+0x1a>
    7baa:	f7ff fd45 	bl	7638 <__sinit>
    7bae:	4b7f      	ldr	r3, [pc, #508]	; (7dac <_vfiprintf_r+0x218>)
    7bb0:	429f      	cmp	r7, r3
    7bb2:	d15c      	bne.n	7c6e <_vfiprintf_r+0xda>
    7bb4:	6877      	ldr	r7, [r6, #4]
    7bb6:	89bb      	ldrh	r3, [r7, #12]
    7bb8:	071b      	lsls	r3, r3, #28
    7bba:	d562      	bpl.n	7c82 <_vfiprintf_r+0xee>
    7bbc:	693b      	ldr	r3, [r7, #16]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d05f      	beq.n	7c82 <_vfiprintf_r+0xee>
    7bc2:	2300      	movs	r3, #0
    7bc4:	ad06      	add	r5, sp, #24
    7bc6:	616b      	str	r3, [r5, #20]
    7bc8:	3320      	adds	r3, #32
    7bca:	766b      	strb	r3, [r5, #25]
    7bcc:	3310      	adds	r3, #16
    7bce:	76ab      	strb	r3, [r5, #26]
    7bd0:	9402      	str	r4, [sp, #8]
    7bd2:	9c02      	ldr	r4, [sp, #8]
    7bd4:	7823      	ldrb	r3, [r4, #0]
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	d15d      	bne.n	7c96 <_vfiprintf_r+0x102>
    7bda:	9b02      	ldr	r3, [sp, #8]
    7bdc:	1ae3      	subs	r3, r4, r3
    7bde:	9304      	str	r3, [sp, #16]
    7be0:	d00d      	beq.n	7bfe <_vfiprintf_r+0x6a>
    7be2:	9b04      	ldr	r3, [sp, #16]
    7be4:	9a02      	ldr	r2, [sp, #8]
    7be6:	0039      	movs	r1, r7
    7be8:	0030      	movs	r0, r6
    7bea:	f7ff ffc0 	bl	7b6e <__sfputs_r>
    7bee:	1c43      	adds	r3, r0, #1
    7bf0:	d100      	bne.n	7bf4 <_vfiprintf_r+0x60>
    7bf2:	e0cc      	b.n	7d8e <_vfiprintf_r+0x1fa>
    7bf4:	696a      	ldr	r2, [r5, #20]
    7bf6:	9b04      	ldr	r3, [sp, #16]
    7bf8:	4694      	mov	ip, r2
    7bfa:	4463      	add	r3, ip
    7bfc:	616b      	str	r3, [r5, #20]
    7bfe:	7823      	ldrb	r3, [r4, #0]
    7c00:	2b00      	cmp	r3, #0
    7c02:	d100      	bne.n	7c06 <_vfiprintf_r+0x72>
    7c04:	e0c3      	b.n	7d8e <_vfiprintf_r+0x1fa>
    7c06:	2201      	movs	r2, #1
    7c08:	2300      	movs	r3, #0
    7c0a:	4252      	negs	r2, r2
    7c0c:	606a      	str	r2, [r5, #4]
    7c0e:	a902      	add	r1, sp, #8
    7c10:	3254      	adds	r2, #84	; 0x54
    7c12:	1852      	adds	r2, r2, r1
    7c14:	3401      	adds	r4, #1
    7c16:	602b      	str	r3, [r5, #0]
    7c18:	60eb      	str	r3, [r5, #12]
    7c1a:	60ab      	str	r3, [r5, #8]
    7c1c:	7013      	strb	r3, [r2, #0]
    7c1e:	65ab      	str	r3, [r5, #88]	; 0x58
    7c20:	7821      	ldrb	r1, [r4, #0]
    7c22:	2205      	movs	r2, #5
    7c24:	4862      	ldr	r0, [pc, #392]	; (7db0 <_vfiprintf_r+0x21c>)
    7c26:	f001 f91b 	bl	8e60 <memchr>
    7c2a:	1c63      	adds	r3, r4, #1
    7c2c:	469c      	mov	ip, r3
    7c2e:	2800      	cmp	r0, #0
    7c30:	d135      	bne.n	7c9e <_vfiprintf_r+0x10a>
    7c32:	6829      	ldr	r1, [r5, #0]
    7c34:	06cb      	lsls	r3, r1, #27
    7c36:	d504      	bpl.n	7c42 <_vfiprintf_r+0xae>
    7c38:	2353      	movs	r3, #83	; 0x53
    7c3a:	aa02      	add	r2, sp, #8
    7c3c:	3020      	adds	r0, #32
    7c3e:	189b      	adds	r3, r3, r2
    7c40:	7018      	strb	r0, [r3, #0]
    7c42:	070b      	lsls	r3, r1, #28
    7c44:	d504      	bpl.n	7c50 <_vfiprintf_r+0xbc>
    7c46:	2353      	movs	r3, #83	; 0x53
    7c48:	202b      	movs	r0, #43	; 0x2b
    7c4a:	aa02      	add	r2, sp, #8
    7c4c:	189b      	adds	r3, r3, r2
    7c4e:	7018      	strb	r0, [r3, #0]
    7c50:	7823      	ldrb	r3, [r4, #0]
    7c52:	2b2a      	cmp	r3, #42	; 0x2a
    7c54:	d02c      	beq.n	7cb0 <_vfiprintf_r+0x11c>
    7c56:	2000      	movs	r0, #0
    7c58:	210a      	movs	r1, #10
    7c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c5c:	7822      	ldrb	r2, [r4, #0]
    7c5e:	3a30      	subs	r2, #48	; 0x30
    7c60:	2a09      	cmp	r2, #9
    7c62:	d800      	bhi.n	7c66 <_vfiprintf_r+0xd2>
    7c64:	e06b      	b.n	7d3e <_vfiprintf_r+0x1aa>
    7c66:	2800      	cmp	r0, #0
    7c68:	d02a      	beq.n	7cc0 <_vfiprintf_r+0x12c>
    7c6a:	9309      	str	r3, [sp, #36]	; 0x24
    7c6c:	e028      	b.n	7cc0 <_vfiprintf_r+0x12c>
    7c6e:	4b51      	ldr	r3, [pc, #324]	; (7db4 <_vfiprintf_r+0x220>)
    7c70:	429f      	cmp	r7, r3
    7c72:	d101      	bne.n	7c78 <_vfiprintf_r+0xe4>
    7c74:	68b7      	ldr	r7, [r6, #8]
    7c76:	e79e      	b.n	7bb6 <_vfiprintf_r+0x22>
    7c78:	4b4f      	ldr	r3, [pc, #316]	; (7db8 <_vfiprintf_r+0x224>)
    7c7a:	429f      	cmp	r7, r3
    7c7c:	d19b      	bne.n	7bb6 <_vfiprintf_r+0x22>
    7c7e:	68f7      	ldr	r7, [r6, #12]
    7c80:	e799      	b.n	7bb6 <_vfiprintf_r+0x22>
    7c82:	0039      	movs	r1, r7
    7c84:	0030      	movs	r0, r6
    7c86:	f7ff fb55 	bl	7334 <__swsetup_r>
    7c8a:	2800      	cmp	r0, #0
    7c8c:	d099      	beq.n	7bc2 <_vfiprintf_r+0x2e>
    7c8e:	2001      	movs	r0, #1
    7c90:	4240      	negs	r0, r0
    7c92:	b01f      	add	sp, #124	; 0x7c
    7c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c96:	2b25      	cmp	r3, #37	; 0x25
    7c98:	d09f      	beq.n	7bda <_vfiprintf_r+0x46>
    7c9a:	3401      	adds	r4, #1
    7c9c:	e79a      	b.n	7bd4 <_vfiprintf_r+0x40>
    7c9e:	4b44      	ldr	r3, [pc, #272]	; (7db0 <_vfiprintf_r+0x21c>)
    7ca0:	6829      	ldr	r1, [r5, #0]
    7ca2:	1ac0      	subs	r0, r0, r3
    7ca4:	2301      	movs	r3, #1
    7ca6:	4083      	lsls	r3, r0
    7ca8:	430b      	orrs	r3, r1
    7caa:	602b      	str	r3, [r5, #0]
    7cac:	4664      	mov	r4, ip
    7cae:	e7b7      	b.n	7c20 <_vfiprintf_r+0x8c>
    7cb0:	9b05      	ldr	r3, [sp, #20]
    7cb2:	1d18      	adds	r0, r3, #4
    7cb4:	681b      	ldr	r3, [r3, #0]
    7cb6:	9005      	str	r0, [sp, #20]
    7cb8:	2b00      	cmp	r3, #0
    7cba:	db3a      	blt.n	7d32 <_vfiprintf_r+0x19e>
    7cbc:	9309      	str	r3, [sp, #36]	; 0x24
    7cbe:	4664      	mov	r4, ip
    7cc0:	7823      	ldrb	r3, [r4, #0]
    7cc2:	2b2e      	cmp	r3, #46	; 0x2e
    7cc4:	d10b      	bne.n	7cde <_vfiprintf_r+0x14a>
    7cc6:	7863      	ldrb	r3, [r4, #1]
    7cc8:	1c62      	adds	r2, r4, #1
    7cca:	2b2a      	cmp	r3, #42	; 0x2a
    7ccc:	d13f      	bne.n	7d4e <_vfiprintf_r+0x1ba>
    7cce:	9b05      	ldr	r3, [sp, #20]
    7cd0:	3402      	adds	r4, #2
    7cd2:	1d1a      	adds	r2, r3, #4
    7cd4:	681b      	ldr	r3, [r3, #0]
    7cd6:	9205      	str	r2, [sp, #20]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	db35      	blt.n	7d48 <_vfiprintf_r+0x1b4>
    7cdc:	9307      	str	r3, [sp, #28]
    7cde:	7821      	ldrb	r1, [r4, #0]
    7ce0:	2203      	movs	r2, #3
    7ce2:	4836      	ldr	r0, [pc, #216]	; (7dbc <_vfiprintf_r+0x228>)
    7ce4:	f001 f8bc 	bl	8e60 <memchr>
    7ce8:	2800      	cmp	r0, #0
    7cea:	d007      	beq.n	7cfc <_vfiprintf_r+0x168>
    7cec:	4b33      	ldr	r3, [pc, #204]	; (7dbc <_vfiprintf_r+0x228>)
    7cee:	682a      	ldr	r2, [r5, #0]
    7cf0:	1ac0      	subs	r0, r0, r3
    7cf2:	2340      	movs	r3, #64	; 0x40
    7cf4:	4083      	lsls	r3, r0
    7cf6:	4313      	orrs	r3, r2
    7cf8:	602b      	str	r3, [r5, #0]
    7cfa:	3401      	adds	r4, #1
    7cfc:	7821      	ldrb	r1, [r4, #0]
    7cfe:	1c63      	adds	r3, r4, #1
    7d00:	2206      	movs	r2, #6
    7d02:	482f      	ldr	r0, [pc, #188]	; (7dc0 <_vfiprintf_r+0x22c>)
    7d04:	9302      	str	r3, [sp, #8]
    7d06:	7629      	strb	r1, [r5, #24]
    7d08:	f001 f8aa 	bl	8e60 <memchr>
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d044      	beq.n	7d9a <_vfiprintf_r+0x206>
    7d10:	4b2c      	ldr	r3, [pc, #176]	; (7dc4 <_vfiprintf_r+0x230>)
    7d12:	2b00      	cmp	r3, #0
    7d14:	d12f      	bne.n	7d76 <_vfiprintf_r+0x1e2>
    7d16:	6829      	ldr	r1, [r5, #0]
    7d18:	9b05      	ldr	r3, [sp, #20]
    7d1a:	2207      	movs	r2, #7
    7d1c:	05c9      	lsls	r1, r1, #23
    7d1e:	d528      	bpl.n	7d72 <_vfiprintf_r+0x1de>
    7d20:	189b      	adds	r3, r3, r2
    7d22:	4393      	bics	r3, r2
    7d24:	3308      	adds	r3, #8
    7d26:	9305      	str	r3, [sp, #20]
    7d28:	696b      	ldr	r3, [r5, #20]
    7d2a:	9a03      	ldr	r2, [sp, #12]
    7d2c:	189b      	adds	r3, r3, r2
    7d2e:	616b      	str	r3, [r5, #20]
    7d30:	e74f      	b.n	7bd2 <_vfiprintf_r+0x3e>
    7d32:	425b      	negs	r3, r3
    7d34:	60eb      	str	r3, [r5, #12]
    7d36:	2302      	movs	r3, #2
    7d38:	430b      	orrs	r3, r1
    7d3a:	602b      	str	r3, [r5, #0]
    7d3c:	e7bf      	b.n	7cbe <_vfiprintf_r+0x12a>
    7d3e:	434b      	muls	r3, r1
    7d40:	3401      	adds	r4, #1
    7d42:	189b      	adds	r3, r3, r2
    7d44:	2001      	movs	r0, #1
    7d46:	e789      	b.n	7c5c <_vfiprintf_r+0xc8>
    7d48:	2301      	movs	r3, #1
    7d4a:	425b      	negs	r3, r3
    7d4c:	e7c6      	b.n	7cdc <_vfiprintf_r+0x148>
    7d4e:	2300      	movs	r3, #0
    7d50:	0014      	movs	r4, r2
    7d52:	200a      	movs	r0, #10
    7d54:	001a      	movs	r2, r3
    7d56:	606b      	str	r3, [r5, #4]
    7d58:	7821      	ldrb	r1, [r4, #0]
    7d5a:	3930      	subs	r1, #48	; 0x30
    7d5c:	2909      	cmp	r1, #9
    7d5e:	d903      	bls.n	7d68 <_vfiprintf_r+0x1d4>
    7d60:	2b00      	cmp	r3, #0
    7d62:	d0bc      	beq.n	7cde <_vfiprintf_r+0x14a>
    7d64:	9207      	str	r2, [sp, #28]
    7d66:	e7ba      	b.n	7cde <_vfiprintf_r+0x14a>
    7d68:	4342      	muls	r2, r0
    7d6a:	3401      	adds	r4, #1
    7d6c:	1852      	adds	r2, r2, r1
    7d6e:	2301      	movs	r3, #1
    7d70:	e7f2      	b.n	7d58 <_vfiprintf_r+0x1c4>
    7d72:	3307      	adds	r3, #7
    7d74:	e7d5      	b.n	7d22 <_vfiprintf_r+0x18e>
    7d76:	ab05      	add	r3, sp, #20
    7d78:	9300      	str	r3, [sp, #0]
    7d7a:	003a      	movs	r2, r7
    7d7c:	4b12      	ldr	r3, [pc, #72]	; (7dc8 <_vfiprintf_r+0x234>)
    7d7e:	0029      	movs	r1, r5
    7d80:	0030      	movs	r0, r6
    7d82:	e000      	b.n	7d86 <_vfiprintf_r+0x1f2>
    7d84:	bf00      	nop
    7d86:	9003      	str	r0, [sp, #12]
    7d88:	9b03      	ldr	r3, [sp, #12]
    7d8a:	3301      	adds	r3, #1
    7d8c:	d1cc      	bne.n	7d28 <_vfiprintf_r+0x194>
    7d8e:	89bb      	ldrh	r3, [r7, #12]
    7d90:	065b      	lsls	r3, r3, #25
    7d92:	d500      	bpl.n	7d96 <_vfiprintf_r+0x202>
    7d94:	e77b      	b.n	7c8e <_vfiprintf_r+0xfa>
    7d96:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7d98:	e77b      	b.n	7c92 <_vfiprintf_r+0xfe>
    7d9a:	ab05      	add	r3, sp, #20
    7d9c:	9300      	str	r3, [sp, #0]
    7d9e:	003a      	movs	r2, r7
    7da0:	4b09      	ldr	r3, [pc, #36]	; (7dc8 <_vfiprintf_r+0x234>)
    7da2:	0029      	movs	r1, r5
    7da4:	0030      	movs	r0, r6
    7da6:	f000 f87f 	bl	7ea8 <_printf_i>
    7daa:	e7ec      	b.n	7d86 <_vfiprintf_r+0x1f2>
    7dac:	0000a08c 	.word	0x0000a08c
    7db0:	0000a0cc 	.word	0x0000a0cc
    7db4:	0000a0ac 	.word	0x0000a0ac
    7db8:	0000a06c 	.word	0x0000a06c
    7dbc:	0000a0d2 	.word	0x0000a0d2
    7dc0:	0000a0d6 	.word	0x0000a0d6
    7dc4:	00000000 	.word	0x00000000
    7dc8:	00007b6f 	.word	0x00007b6f

00007dcc <_printf_common>:
    7dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7dce:	0015      	movs	r5, r2
    7dd0:	9301      	str	r3, [sp, #4]
    7dd2:	688a      	ldr	r2, [r1, #8]
    7dd4:	690b      	ldr	r3, [r1, #16]
    7dd6:	9000      	str	r0, [sp, #0]
    7dd8:	000c      	movs	r4, r1
    7dda:	4293      	cmp	r3, r2
    7ddc:	da00      	bge.n	7de0 <_printf_common+0x14>
    7dde:	0013      	movs	r3, r2
    7de0:	0022      	movs	r2, r4
    7de2:	602b      	str	r3, [r5, #0]
    7de4:	3243      	adds	r2, #67	; 0x43
    7de6:	7812      	ldrb	r2, [r2, #0]
    7de8:	2a00      	cmp	r2, #0
    7dea:	d001      	beq.n	7df0 <_printf_common+0x24>
    7dec:	3301      	adds	r3, #1
    7dee:	602b      	str	r3, [r5, #0]
    7df0:	6823      	ldr	r3, [r4, #0]
    7df2:	069b      	lsls	r3, r3, #26
    7df4:	d502      	bpl.n	7dfc <_printf_common+0x30>
    7df6:	682b      	ldr	r3, [r5, #0]
    7df8:	3302      	adds	r3, #2
    7dfa:	602b      	str	r3, [r5, #0]
    7dfc:	2706      	movs	r7, #6
    7dfe:	6823      	ldr	r3, [r4, #0]
    7e00:	401f      	ands	r7, r3
    7e02:	d027      	beq.n	7e54 <_printf_common+0x88>
    7e04:	0023      	movs	r3, r4
    7e06:	3343      	adds	r3, #67	; 0x43
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	1e5a      	subs	r2, r3, #1
    7e0c:	4193      	sbcs	r3, r2
    7e0e:	6822      	ldr	r2, [r4, #0]
    7e10:	0692      	lsls	r2, r2, #26
    7e12:	d430      	bmi.n	7e76 <_printf_common+0xaa>
    7e14:	0022      	movs	r2, r4
    7e16:	9901      	ldr	r1, [sp, #4]
    7e18:	3243      	adds	r2, #67	; 0x43
    7e1a:	9800      	ldr	r0, [sp, #0]
    7e1c:	9e08      	ldr	r6, [sp, #32]
    7e1e:	47b0      	blx	r6
    7e20:	1c43      	adds	r3, r0, #1
    7e22:	d025      	beq.n	7e70 <_printf_common+0xa4>
    7e24:	2306      	movs	r3, #6
    7e26:	6820      	ldr	r0, [r4, #0]
    7e28:	682a      	ldr	r2, [r5, #0]
    7e2a:	68e1      	ldr	r1, [r4, #12]
    7e2c:	4003      	ands	r3, r0
    7e2e:	2500      	movs	r5, #0
    7e30:	2b04      	cmp	r3, #4
    7e32:	d103      	bne.n	7e3c <_printf_common+0x70>
    7e34:	1a8d      	subs	r5, r1, r2
    7e36:	43eb      	mvns	r3, r5
    7e38:	17db      	asrs	r3, r3, #31
    7e3a:	401d      	ands	r5, r3
    7e3c:	68a3      	ldr	r3, [r4, #8]
    7e3e:	6922      	ldr	r2, [r4, #16]
    7e40:	4293      	cmp	r3, r2
    7e42:	dd01      	ble.n	7e48 <_printf_common+0x7c>
    7e44:	1a9b      	subs	r3, r3, r2
    7e46:	18ed      	adds	r5, r5, r3
    7e48:	2700      	movs	r7, #0
    7e4a:	42bd      	cmp	r5, r7
    7e4c:	d120      	bne.n	7e90 <_printf_common+0xc4>
    7e4e:	2000      	movs	r0, #0
    7e50:	e010      	b.n	7e74 <_printf_common+0xa8>
    7e52:	3701      	adds	r7, #1
    7e54:	68e3      	ldr	r3, [r4, #12]
    7e56:	682a      	ldr	r2, [r5, #0]
    7e58:	1a9b      	subs	r3, r3, r2
    7e5a:	429f      	cmp	r7, r3
    7e5c:	dad2      	bge.n	7e04 <_printf_common+0x38>
    7e5e:	0022      	movs	r2, r4
    7e60:	2301      	movs	r3, #1
    7e62:	3219      	adds	r2, #25
    7e64:	9901      	ldr	r1, [sp, #4]
    7e66:	9800      	ldr	r0, [sp, #0]
    7e68:	9e08      	ldr	r6, [sp, #32]
    7e6a:	47b0      	blx	r6
    7e6c:	1c43      	adds	r3, r0, #1
    7e6e:	d1f0      	bne.n	7e52 <_printf_common+0x86>
    7e70:	2001      	movs	r0, #1
    7e72:	4240      	negs	r0, r0
    7e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e76:	2030      	movs	r0, #48	; 0x30
    7e78:	18e1      	adds	r1, r4, r3
    7e7a:	3143      	adds	r1, #67	; 0x43
    7e7c:	7008      	strb	r0, [r1, #0]
    7e7e:	0021      	movs	r1, r4
    7e80:	1c5a      	adds	r2, r3, #1
    7e82:	3145      	adds	r1, #69	; 0x45
    7e84:	7809      	ldrb	r1, [r1, #0]
    7e86:	18a2      	adds	r2, r4, r2
    7e88:	3243      	adds	r2, #67	; 0x43
    7e8a:	3302      	adds	r3, #2
    7e8c:	7011      	strb	r1, [r2, #0]
    7e8e:	e7c1      	b.n	7e14 <_printf_common+0x48>
    7e90:	0022      	movs	r2, r4
    7e92:	2301      	movs	r3, #1
    7e94:	321a      	adds	r2, #26
    7e96:	9901      	ldr	r1, [sp, #4]
    7e98:	9800      	ldr	r0, [sp, #0]
    7e9a:	9e08      	ldr	r6, [sp, #32]
    7e9c:	47b0      	blx	r6
    7e9e:	1c43      	adds	r3, r0, #1
    7ea0:	d0e6      	beq.n	7e70 <_printf_common+0xa4>
    7ea2:	3701      	adds	r7, #1
    7ea4:	e7d1      	b.n	7e4a <_printf_common+0x7e>
	...

00007ea8 <_printf_i>:
    7ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eaa:	b08b      	sub	sp, #44	; 0x2c
    7eac:	9206      	str	r2, [sp, #24]
    7eae:	000a      	movs	r2, r1
    7eb0:	3243      	adds	r2, #67	; 0x43
    7eb2:	9307      	str	r3, [sp, #28]
    7eb4:	9005      	str	r0, [sp, #20]
    7eb6:	9204      	str	r2, [sp, #16]
    7eb8:	7e0a      	ldrb	r2, [r1, #24]
    7eba:	000c      	movs	r4, r1
    7ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7ebe:	2a6e      	cmp	r2, #110	; 0x6e
    7ec0:	d100      	bne.n	7ec4 <_printf_i+0x1c>
    7ec2:	e08f      	b.n	7fe4 <_printf_i+0x13c>
    7ec4:	d817      	bhi.n	7ef6 <_printf_i+0x4e>
    7ec6:	2a63      	cmp	r2, #99	; 0x63
    7ec8:	d02c      	beq.n	7f24 <_printf_i+0x7c>
    7eca:	d808      	bhi.n	7ede <_printf_i+0x36>
    7ecc:	2a00      	cmp	r2, #0
    7ece:	d100      	bne.n	7ed2 <_printf_i+0x2a>
    7ed0:	e099      	b.n	8006 <_printf_i+0x15e>
    7ed2:	2a58      	cmp	r2, #88	; 0x58
    7ed4:	d054      	beq.n	7f80 <_printf_i+0xd8>
    7ed6:	0026      	movs	r6, r4
    7ed8:	3642      	adds	r6, #66	; 0x42
    7eda:	7032      	strb	r2, [r6, #0]
    7edc:	e029      	b.n	7f32 <_printf_i+0x8a>
    7ede:	2a64      	cmp	r2, #100	; 0x64
    7ee0:	d001      	beq.n	7ee6 <_printf_i+0x3e>
    7ee2:	2a69      	cmp	r2, #105	; 0x69
    7ee4:	d1f7      	bne.n	7ed6 <_printf_i+0x2e>
    7ee6:	6821      	ldr	r1, [r4, #0]
    7ee8:	681a      	ldr	r2, [r3, #0]
    7eea:	0608      	lsls	r0, r1, #24
    7eec:	d523      	bpl.n	7f36 <_printf_i+0x8e>
    7eee:	1d11      	adds	r1, r2, #4
    7ef0:	6019      	str	r1, [r3, #0]
    7ef2:	6815      	ldr	r5, [r2, #0]
    7ef4:	e025      	b.n	7f42 <_printf_i+0x9a>
    7ef6:	2a73      	cmp	r2, #115	; 0x73
    7ef8:	d100      	bne.n	7efc <_printf_i+0x54>
    7efa:	e088      	b.n	800e <_printf_i+0x166>
    7efc:	d808      	bhi.n	7f10 <_printf_i+0x68>
    7efe:	2a6f      	cmp	r2, #111	; 0x6f
    7f00:	d029      	beq.n	7f56 <_printf_i+0xae>
    7f02:	2a70      	cmp	r2, #112	; 0x70
    7f04:	d1e7      	bne.n	7ed6 <_printf_i+0x2e>
    7f06:	2220      	movs	r2, #32
    7f08:	6809      	ldr	r1, [r1, #0]
    7f0a:	430a      	orrs	r2, r1
    7f0c:	6022      	str	r2, [r4, #0]
    7f0e:	e003      	b.n	7f18 <_printf_i+0x70>
    7f10:	2a75      	cmp	r2, #117	; 0x75
    7f12:	d020      	beq.n	7f56 <_printf_i+0xae>
    7f14:	2a78      	cmp	r2, #120	; 0x78
    7f16:	d1de      	bne.n	7ed6 <_printf_i+0x2e>
    7f18:	0022      	movs	r2, r4
    7f1a:	2178      	movs	r1, #120	; 0x78
    7f1c:	3245      	adds	r2, #69	; 0x45
    7f1e:	7011      	strb	r1, [r2, #0]
    7f20:	4a6c      	ldr	r2, [pc, #432]	; (80d4 <_printf_i+0x22c>)
    7f22:	e030      	b.n	7f86 <_printf_i+0xde>
    7f24:	000e      	movs	r6, r1
    7f26:	681a      	ldr	r2, [r3, #0]
    7f28:	3642      	adds	r6, #66	; 0x42
    7f2a:	1d11      	adds	r1, r2, #4
    7f2c:	6019      	str	r1, [r3, #0]
    7f2e:	6813      	ldr	r3, [r2, #0]
    7f30:	7033      	strb	r3, [r6, #0]
    7f32:	2301      	movs	r3, #1
    7f34:	e079      	b.n	802a <_printf_i+0x182>
    7f36:	0649      	lsls	r1, r1, #25
    7f38:	d5d9      	bpl.n	7eee <_printf_i+0x46>
    7f3a:	1d11      	adds	r1, r2, #4
    7f3c:	6019      	str	r1, [r3, #0]
    7f3e:	2300      	movs	r3, #0
    7f40:	5ed5      	ldrsh	r5, [r2, r3]
    7f42:	2d00      	cmp	r5, #0
    7f44:	da03      	bge.n	7f4e <_printf_i+0xa6>
    7f46:	232d      	movs	r3, #45	; 0x2d
    7f48:	9a04      	ldr	r2, [sp, #16]
    7f4a:	426d      	negs	r5, r5
    7f4c:	7013      	strb	r3, [r2, #0]
    7f4e:	4b62      	ldr	r3, [pc, #392]	; (80d8 <_printf_i+0x230>)
    7f50:	270a      	movs	r7, #10
    7f52:	9303      	str	r3, [sp, #12]
    7f54:	e02f      	b.n	7fb6 <_printf_i+0x10e>
    7f56:	6820      	ldr	r0, [r4, #0]
    7f58:	6819      	ldr	r1, [r3, #0]
    7f5a:	0605      	lsls	r5, r0, #24
    7f5c:	d503      	bpl.n	7f66 <_printf_i+0xbe>
    7f5e:	1d08      	adds	r0, r1, #4
    7f60:	6018      	str	r0, [r3, #0]
    7f62:	680d      	ldr	r5, [r1, #0]
    7f64:	e005      	b.n	7f72 <_printf_i+0xca>
    7f66:	0640      	lsls	r0, r0, #25
    7f68:	d5f9      	bpl.n	7f5e <_printf_i+0xb6>
    7f6a:	680d      	ldr	r5, [r1, #0]
    7f6c:	1d08      	adds	r0, r1, #4
    7f6e:	6018      	str	r0, [r3, #0]
    7f70:	b2ad      	uxth	r5, r5
    7f72:	4b59      	ldr	r3, [pc, #356]	; (80d8 <_printf_i+0x230>)
    7f74:	2708      	movs	r7, #8
    7f76:	9303      	str	r3, [sp, #12]
    7f78:	2a6f      	cmp	r2, #111	; 0x6f
    7f7a:	d018      	beq.n	7fae <_printf_i+0x106>
    7f7c:	270a      	movs	r7, #10
    7f7e:	e016      	b.n	7fae <_printf_i+0x106>
    7f80:	3145      	adds	r1, #69	; 0x45
    7f82:	700a      	strb	r2, [r1, #0]
    7f84:	4a54      	ldr	r2, [pc, #336]	; (80d8 <_printf_i+0x230>)
    7f86:	9203      	str	r2, [sp, #12]
    7f88:	681a      	ldr	r2, [r3, #0]
    7f8a:	6821      	ldr	r1, [r4, #0]
    7f8c:	1d10      	adds	r0, r2, #4
    7f8e:	6018      	str	r0, [r3, #0]
    7f90:	6815      	ldr	r5, [r2, #0]
    7f92:	0608      	lsls	r0, r1, #24
    7f94:	d522      	bpl.n	7fdc <_printf_i+0x134>
    7f96:	07cb      	lsls	r3, r1, #31
    7f98:	d502      	bpl.n	7fa0 <_printf_i+0xf8>
    7f9a:	2320      	movs	r3, #32
    7f9c:	4319      	orrs	r1, r3
    7f9e:	6021      	str	r1, [r4, #0]
    7fa0:	2710      	movs	r7, #16
    7fa2:	2d00      	cmp	r5, #0
    7fa4:	d103      	bne.n	7fae <_printf_i+0x106>
    7fa6:	2320      	movs	r3, #32
    7fa8:	6822      	ldr	r2, [r4, #0]
    7faa:	439a      	bics	r2, r3
    7fac:	6022      	str	r2, [r4, #0]
    7fae:	0023      	movs	r3, r4
    7fb0:	2200      	movs	r2, #0
    7fb2:	3343      	adds	r3, #67	; 0x43
    7fb4:	701a      	strb	r2, [r3, #0]
    7fb6:	6863      	ldr	r3, [r4, #4]
    7fb8:	60a3      	str	r3, [r4, #8]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	db5c      	blt.n	8078 <_printf_i+0x1d0>
    7fbe:	2204      	movs	r2, #4
    7fc0:	6821      	ldr	r1, [r4, #0]
    7fc2:	4391      	bics	r1, r2
    7fc4:	6021      	str	r1, [r4, #0]
    7fc6:	2d00      	cmp	r5, #0
    7fc8:	d158      	bne.n	807c <_printf_i+0x1d4>
    7fca:	9e04      	ldr	r6, [sp, #16]
    7fcc:	2b00      	cmp	r3, #0
    7fce:	d064      	beq.n	809a <_printf_i+0x1f2>
    7fd0:	0026      	movs	r6, r4
    7fd2:	9b03      	ldr	r3, [sp, #12]
    7fd4:	3642      	adds	r6, #66	; 0x42
    7fd6:	781b      	ldrb	r3, [r3, #0]
    7fd8:	7033      	strb	r3, [r6, #0]
    7fda:	e05e      	b.n	809a <_printf_i+0x1f2>
    7fdc:	0648      	lsls	r0, r1, #25
    7fde:	d5da      	bpl.n	7f96 <_printf_i+0xee>
    7fe0:	b2ad      	uxth	r5, r5
    7fe2:	e7d8      	b.n	7f96 <_printf_i+0xee>
    7fe4:	6809      	ldr	r1, [r1, #0]
    7fe6:	681a      	ldr	r2, [r3, #0]
    7fe8:	0608      	lsls	r0, r1, #24
    7fea:	d505      	bpl.n	7ff8 <_printf_i+0x150>
    7fec:	1d11      	adds	r1, r2, #4
    7fee:	6019      	str	r1, [r3, #0]
    7ff0:	6813      	ldr	r3, [r2, #0]
    7ff2:	6962      	ldr	r2, [r4, #20]
    7ff4:	601a      	str	r2, [r3, #0]
    7ff6:	e006      	b.n	8006 <_printf_i+0x15e>
    7ff8:	0649      	lsls	r1, r1, #25
    7ffa:	d5f7      	bpl.n	7fec <_printf_i+0x144>
    7ffc:	1d11      	adds	r1, r2, #4
    7ffe:	6019      	str	r1, [r3, #0]
    8000:	6813      	ldr	r3, [r2, #0]
    8002:	8aa2      	ldrh	r2, [r4, #20]
    8004:	801a      	strh	r2, [r3, #0]
    8006:	2300      	movs	r3, #0
    8008:	9e04      	ldr	r6, [sp, #16]
    800a:	6123      	str	r3, [r4, #16]
    800c:	e054      	b.n	80b8 <_printf_i+0x210>
    800e:	681a      	ldr	r2, [r3, #0]
    8010:	1d11      	adds	r1, r2, #4
    8012:	6019      	str	r1, [r3, #0]
    8014:	6816      	ldr	r6, [r2, #0]
    8016:	2100      	movs	r1, #0
    8018:	6862      	ldr	r2, [r4, #4]
    801a:	0030      	movs	r0, r6
    801c:	f000 ff20 	bl	8e60 <memchr>
    8020:	2800      	cmp	r0, #0
    8022:	d001      	beq.n	8028 <_printf_i+0x180>
    8024:	1b80      	subs	r0, r0, r6
    8026:	6060      	str	r0, [r4, #4]
    8028:	6863      	ldr	r3, [r4, #4]
    802a:	6123      	str	r3, [r4, #16]
    802c:	2300      	movs	r3, #0
    802e:	9a04      	ldr	r2, [sp, #16]
    8030:	7013      	strb	r3, [r2, #0]
    8032:	e041      	b.n	80b8 <_printf_i+0x210>
    8034:	6923      	ldr	r3, [r4, #16]
    8036:	0032      	movs	r2, r6
    8038:	9906      	ldr	r1, [sp, #24]
    803a:	9805      	ldr	r0, [sp, #20]
    803c:	9d07      	ldr	r5, [sp, #28]
    803e:	47a8      	blx	r5
    8040:	1c43      	adds	r3, r0, #1
    8042:	d043      	beq.n	80cc <_printf_i+0x224>
    8044:	6823      	ldr	r3, [r4, #0]
    8046:	2500      	movs	r5, #0
    8048:	079b      	lsls	r3, r3, #30
    804a:	d40f      	bmi.n	806c <_printf_i+0x1c4>
    804c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    804e:	68e0      	ldr	r0, [r4, #12]
    8050:	4298      	cmp	r0, r3
    8052:	da3d      	bge.n	80d0 <_printf_i+0x228>
    8054:	0018      	movs	r0, r3
    8056:	e03b      	b.n	80d0 <_printf_i+0x228>
    8058:	0022      	movs	r2, r4
    805a:	2301      	movs	r3, #1
    805c:	3219      	adds	r2, #25
    805e:	9906      	ldr	r1, [sp, #24]
    8060:	9805      	ldr	r0, [sp, #20]
    8062:	9e07      	ldr	r6, [sp, #28]
    8064:	47b0      	blx	r6
    8066:	1c43      	adds	r3, r0, #1
    8068:	d030      	beq.n	80cc <_printf_i+0x224>
    806a:	3501      	adds	r5, #1
    806c:	68e3      	ldr	r3, [r4, #12]
    806e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8070:	1a9b      	subs	r3, r3, r2
    8072:	429d      	cmp	r5, r3
    8074:	dbf0      	blt.n	8058 <_printf_i+0x1b0>
    8076:	e7e9      	b.n	804c <_printf_i+0x1a4>
    8078:	2d00      	cmp	r5, #0
    807a:	d0a9      	beq.n	7fd0 <_printf_i+0x128>
    807c:	9e04      	ldr	r6, [sp, #16]
    807e:	0028      	movs	r0, r5
    8080:	0039      	movs	r1, r7
    8082:	f7fe fd27 	bl	6ad4 <__aeabi_uidivmod>
    8086:	9b03      	ldr	r3, [sp, #12]
    8088:	3e01      	subs	r6, #1
    808a:	5c5b      	ldrb	r3, [r3, r1]
    808c:	0028      	movs	r0, r5
    808e:	7033      	strb	r3, [r6, #0]
    8090:	0039      	movs	r1, r7
    8092:	f7fe fc99 	bl	69c8 <__udivsi3>
    8096:	1e05      	subs	r5, r0, #0
    8098:	d1f1      	bne.n	807e <_printf_i+0x1d6>
    809a:	2f08      	cmp	r7, #8
    809c:	d109      	bne.n	80b2 <_printf_i+0x20a>
    809e:	6823      	ldr	r3, [r4, #0]
    80a0:	07db      	lsls	r3, r3, #31
    80a2:	d506      	bpl.n	80b2 <_printf_i+0x20a>
    80a4:	6863      	ldr	r3, [r4, #4]
    80a6:	6922      	ldr	r2, [r4, #16]
    80a8:	4293      	cmp	r3, r2
    80aa:	dc02      	bgt.n	80b2 <_printf_i+0x20a>
    80ac:	2330      	movs	r3, #48	; 0x30
    80ae:	3e01      	subs	r6, #1
    80b0:	7033      	strb	r3, [r6, #0]
    80b2:	9b04      	ldr	r3, [sp, #16]
    80b4:	1b9b      	subs	r3, r3, r6
    80b6:	6123      	str	r3, [r4, #16]
    80b8:	9b07      	ldr	r3, [sp, #28]
    80ba:	aa09      	add	r2, sp, #36	; 0x24
    80bc:	9300      	str	r3, [sp, #0]
    80be:	0021      	movs	r1, r4
    80c0:	9b06      	ldr	r3, [sp, #24]
    80c2:	9805      	ldr	r0, [sp, #20]
    80c4:	f7ff fe82 	bl	7dcc <_printf_common>
    80c8:	1c43      	adds	r3, r0, #1
    80ca:	d1b3      	bne.n	8034 <_printf_i+0x18c>
    80cc:	2001      	movs	r0, #1
    80ce:	4240      	negs	r0, r0
    80d0:	b00b      	add	sp, #44	; 0x2c
    80d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80d4:	0000a0ee 	.word	0x0000a0ee
    80d8:	0000a0dd 	.word	0x0000a0dd

000080dc <__svfiscanf_r>:
    80dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    80de:	4cbd      	ldr	r4, [pc, #756]	; (83d4 <__svfiscanf_r+0x2f8>)
    80e0:	2586      	movs	r5, #134	; 0x86
    80e2:	44a5      	add	sp, r4
    80e4:	9303      	str	r3, [sp, #12]
    80e6:	2300      	movs	r3, #0
    80e8:	9348      	str	r3, [sp, #288]	; 0x120
    80ea:	9349      	str	r3, [sp, #292]	; 0x124
    80ec:	ab05      	add	r3, sp, #20
    80ee:	934a      	str	r3, [sp, #296]	; 0x128
    80f0:	23be      	movs	r3, #190	; 0xbe
    80f2:	006d      	lsls	r5, r5, #1
    80f4:	9000      	str	r0, [sp, #0]
    80f6:	000c      	movs	r4, r1
    80f8:	a802      	add	r0, sp, #8
    80fa:	49b7      	ldr	r1, [pc, #732]	; (83d8 <__svfiscanf_r+0x2fc>)
    80fc:	005b      	lsls	r3, r3, #1
    80fe:	1940      	adds	r0, r0, r5
    8100:	27c0      	movs	r7, #192	; 0xc0
    8102:	50c1      	str	r1, [r0, r3]
    8104:	ab02      	add	r3, sp, #8
    8106:	195b      	adds	r3, r3, r5
    8108:	0015      	movs	r5, r2
    810a:	49b4      	ldr	r1, [pc, #720]	; (83dc <__svfiscanf_r+0x300>)
    810c:	007f      	lsls	r7, r7, #1
    810e:	51d9      	str	r1, [r3, r7]
    8110:	782b      	ldrb	r3, [r5, #0]
    8112:	2b00      	cmp	r3, #0
    8114:	d100      	bne.n	8118 <__svfiscanf_r+0x3c>
    8116:	e15b      	b.n	83d0 <__svfiscanf_r+0x2f4>
    8118:	f000 fe6e 	bl	8df8 <__locale_ctype_ptr>
    811c:	2208      	movs	r2, #8
    811e:	782b      	ldrb	r3, [r5, #0]
    8120:	18c0      	adds	r0, r0, r3
    8122:	9301      	str	r3, [sp, #4]
    8124:	7843      	ldrb	r3, [r0, #1]
    8126:	4013      	ands	r3, r2
    8128:	d141      	bne.n	81ae <__svfiscanf_r+0xd2>
    812a:	9a01      	ldr	r2, [sp, #4]
    812c:	1c6e      	adds	r6, r5, #1
    812e:	2a25      	cmp	r2, #37	; 0x25
    8130:	d000      	beq.n	8134 <__svfiscanf_r+0x58>
    8132:	e0a8      	b.n	8286 <__svfiscanf_r+0x1aa>
    8134:	9347      	str	r3, [sp, #284]	; 0x11c
    8136:	9345      	str	r3, [sp, #276]	; 0x114
    8138:	786b      	ldrb	r3, [r5, #1]
    813a:	2b2a      	cmp	r3, #42	; 0x2a
    813c:	d102      	bne.n	8144 <__svfiscanf_r+0x68>
    813e:	3b1a      	subs	r3, #26
    8140:	9345      	str	r3, [sp, #276]	; 0x114
    8142:	1cae      	adds	r6, r5, #2
    8144:	0035      	movs	r5, r6
    8146:	220a      	movs	r2, #10
    8148:	7829      	ldrb	r1, [r5, #0]
    814a:	000b      	movs	r3, r1
    814c:	3b30      	subs	r3, #48	; 0x30
    814e:	2b09      	cmp	r3, #9
    8150:	d948      	bls.n	81e4 <__svfiscanf_r+0x108>
    8152:	4ea3      	ldr	r6, [pc, #652]	; (83e0 <__svfiscanf_r+0x304>)
    8154:	2203      	movs	r2, #3
    8156:	0030      	movs	r0, r6
    8158:	f000 fe82 	bl	8e60 <memchr>
    815c:	2800      	cmp	r0, #0
    815e:	d007      	beq.n	8170 <__svfiscanf_r+0x94>
    8160:	2301      	movs	r3, #1
    8162:	1b80      	subs	r0, r0, r6
    8164:	4083      	lsls	r3, r0
    8166:	9a45      	ldr	r2, [sp, #276]	; 0x114
    8168:	3501      	adds	r5, #1
    816a:	4313      	orrs	r3, r2
    816c:	9202      	str	r2, [sp, #8]
    816e:	9345      	str	r3, [sp, #276]	; 0x114
    8170:	782b      	ldrb	r3, [r5, #0]
    8172:	1c6e      	adds	r6, r5, #1
    8174:	2b67      	cmp	r3, #103	; 0x67
    8176:	d858      	bhi.n	822a <__svfiscanf_r+0x14e>
    8178:	2b65      	cmp	r3, #101	; 0x65
    817a:	d300      	bcc.n	817e <__svfiscanf_r+0xa2>
    817c:	e0dd      	b.n	833a <__svfiscanf_r+0x25e>
    817e:	2b47      	cmp	r3, #71	; 0x47
    8180:	d838      	bhi.n	81f4 <__svfiscanf_r+0x118>
    8182:	2b45      	cmp	r3, #69	; 0x45
    8184:	d300      	bcc.n	8188 <__svfiscanf_r+0xac>
    8186:	e0d8      	b.n	833a <__svfiscanf_r+0x25e>
    8188:	2b00      	cmp	r3, #0
    818a:	d100      	bne.n	818e <__svfiscanf_r+0xb2>
    818c:	e11d      	b.n	83ca <__svfiscanf_r+0x2ee>
    818e:	2b25      	cmp	r3, #37	; 0x25
    8190:	d079      	beq.n	8286 <__svfiscanf_r+0x1aa>
    8192:	2303      	movs	r3, #3
    8194:	934b      	str	r3, [sp, #300]	; 0x12c
    8196:	3307      	adds	r3, #7
    8198:	9346      	str	r3, [sp, #280]	; 0x118
    819a:	e053      	b.n	8244 <__svfiscanf_r+0x168>
    819c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    819e:	3301      	adds	r3, #1
    81a0:	9201      	str	r2, [sp, #4]
    81a2:	3201      	adds	r2, #1
    81a4:	9249      	str	r2, [sp, #292]	; 0x124
    81a6:	6862      	ldr	r2, [r4, #4]
    81a8:	6023      	str	r3, [r4, #0]
    81aa:	3a01      	subs	r2, #1
    81ac:	6062      	str	r2, [r4, #4]
    81ae:	6863      	ldr	r3, [r4, #4]
    81b0:	2b00      	cmp	r3, #0
    81b2:	dd0b      	ble.n	81cc <__svfiscanf_r+0xf0>
    81b4:	f000 fe20 	bl	8df8 <__locale_ctype_ptr>
    81b8:	2108      	movs	r1, #8
    81ba:	6823      	ldr	r3, [r4, #0]
    81bc:	781a      	ldrb	r2, [r3, #0]
    81be:	1880      	adds	r0, r0, r2
    81c0:	7842      	ldrb	r2, [r0, #1]
    81c2:	420a      	tst	r2, r1
    81c4:	d1ea      	bne.n	819c <__svfiscanf_r+0xc0>
    81c6:	1c6e      	adds	r6, r5, #1
    81c8:	0035      	movs	r5, r6
    81ca:	e7a1      	b.n	8110 <__svfiscanf_r+0x34>
    81cc:	2286      	movs	r2, #134	; 0x86
    81ce:	ab02      	add	r3, sp, #8
    81d0:	0052      	lsls	r2, r2, #1
    81d2:	189b      	adds	r3, r3, r2
    81d4:	59db      	ldr	r3, [r3, r7]
    81d6:	0021      	movs	r1, r4
    81d8:	9800      	ldr	r0, [sp, #0]
    81da:	9301      	str	r3, [sp, #4]
    81dc:	4798      	blx	r3
    81de:	2800      	cmp	r0, #0
    81e0:	d0e8      	beq.n	81b4 <__svfiscanf_r+0xd8>
    81e2:	e7f0      	b.n	81c6 <__svfiscanf_r+0xea>
    81e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    81e6:	3501      	adds	r5, #1
    81e8:	9302      	str	r3, [sp, #8]
    81ea:	4353      	muls	r3, r2
    81ec:	3b30      	subs	r3, #48	; 0x30
    81ee:	1859      	adds	r1, r3, r1
    81f0:	9147      	str	r1, [sp, #284]	; 0x11c
    81f2:	e7a9      	b.n	8148 <__svfiscanf_r+0x6c>
    81f4:	2b5b      	cmp	r3, #91	; 0x5b
    81f6:	d100      	bne.n	81fa <__svfiscanf_r+0x11e>
    81f8:	e077      	b.n	82ea <__svfiscanf_r+0x20e>
    81fa:	d80f      	bhi.n	821c <__svfiscanf_r+0x140>
    81fc:	2b58      	cmp	r3, #88	; 0x58
    81fe:	d1c8      	bne.n	8192 <__svfiscanf_r+0xb6>
    8200:	9a45      	ldr	r2, [sp, #276]	; 0x114
    8202:	9201      	str	r2, [sp, #4]
    8204:	2280      	movs	r2, #128	; 0x80
    8206:	9901      	ldr	r1, [sp, #4]
    8208:	0092      	lsls	r2, r2, #2
    820a:	430a      	orrs	r2, r1
    820c:	9245      	str	r2, [sp, #276]	; 0x114
    820e:	2210      	movs	r2, #16
    8210:	9246      	str	r2, [sp, #280]	; 0x118
    8212:	2203      	movs	r2, #3
    8214:	2b6e      	cmp	r3, #110	; 0x6e
    8216:	dd14      	ble.n	8242 <__svfiscanf_r+0x166>
    8218:	3201      	adds	r2, #1
    821a:	e012      	b.n	8242 <__svfiscanf_r+0x166>
    821c:	2b63      	cmp	r3, #99	; 0x63
    821e:	d100      	bne.n	8222 <__svfiscanf_r+0x146>
    8220:	e071      	b.n	8306 <__svfiscanf_r+0x22a>
    8222:	2b64      	cmp	r3, #100	; 0x64
    8224:	d1b5      	bne.n	8192 <__svfiscanf_r+0xb6>
    8226:	220a      	movs	r2, #10
    8228:	e7f2      	b.n	8210 <__svfiscanf_r+0x134>
    822a:	2b70      	cmp	r3, #112	; 0x70
    822c:	d052      	beq.n	82d4 <__svfiscanf_r+0x1f8>
    822e:	d822      	bhi.n	8276 <__svfiscanf_r+0x19a>
    8230:	2b6e      	cmp	r3, #110	; 0x6e
    8232:	d100      	bne.n	8236 <__svfiscanf_r+0x15a>
    8234:	e06f      	b.n	8316 <__svfiscanf_r+0x23a>
    8236:	d854      	bhi.n	82e2 <__svfiscanf_r+0x206>
    8238:	2b69      	cmp	r3, #105	; 0x69
    823a:	d1aa      	bne.n	8192 <__svfiscanf_r+0xb6>
    823c:	2300      	movs	r3, #0
    823e:	2203      	movs	r2, #3
    8240:	9346      	str	r3, [sp, #280]	; 0x118
    8242:	924b      	str	r2, [sp, #300]	; 0x12c
    8244:	6863      	ldr	r3, [r4, #4]
    8246:	2b00      	cmp	r3, #0
    8248:	dc00      	bgt.n	824c <__svfiscanf_r+0x170>
    824a:	e078      	b.n	833e <__svfiscanf_r+0x262>
    824c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    824e:	9301      	str	r3, [sp, #4]
    8250:	065b      	lsls	r3, r3, #25
    8252:	d400      	bmi.n	8256 <__svfiscanf_r+0x17a>
    8254:	e08b      	b.n	836e <__svfiscanf_r+0x292>
    8256:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    8258:	2b02      	cmp	r3, #2
    825a:	dd00      	ble.n	825e <__svfiscanf_r+0x182>
    825c:	e09d      	b.n	839a <__svfiscanf_r+0x2be>
    825e:	ab03      	add	r3, sp, #12
    8260:	0022      	movs	r2, r4
    8262:	a945      	add	r1, sp, #276	; 0x114
    8264:	9800      	ldr	r0, [sp, #0]
    8266:	f000 f8e7 	bl	8438 <_scanf_chars>
    826a:	2801      	cmp	r0, #1
    826c:	d100      	bne.n	8270 <__svfiscanf_r+0x194>
    826e:	e0af      	b.n	83d0 <__svfiscanf_r+0x2f4>
    8270:	2802      	cmp	r0, #2
    8272:	d1a9      	bne.n	81c8 <__svfiscanf_r+0xec>
    8274:	e025      	b.n	82c2 <__svfiscanf_r+0x1e6>
    8276:	2b75      	cmp	r3, #117	; 0x75
    8278:	d0d5      	beq.n	8226 <__svfiscanf_r+0x14a>
    827a:	2b78      	cmp	r3, #120	; 0x78
    827c:	d0c0      	beq.n	8200 <__svfiscanf_r+0x124>
    827e:	2b73      	cmp	r3, #115	; 0x73
    8280:	d187      	bne.n	8192 <__svfiscanf_r+0xb6>
    8282:	2302      	movs	r3, #2
    8284:	e03d      	b.n	8302 <__svfiscanf_r+0x226>
    8286:	6863      	ldr	r3, [r4, #4]
    8288:	2b00      	cmp	r3, #0
    828a:	dd0f      	ble.n	82ac <__svfiscanf_r+0x1d0>
    828c:	6823      	ldr	r3, [r4, #0]
    828e:	9901      	ldr	r1, [sp, #4]
    8290:	781a      	ldrb	r2, [r3, #0]
    8292:	4291      	cmp	r1, r2
    8294:	d000      	beq.n	8298 <__svfiscanf_r+0x1bc>
    8296:	e09b      	b.n	83d0 <__svfiscanf_r+0x2f4>
    8298:	3301      	adds	r3, #1
    829a:	6862      	ldr	r2, [r4, #4]
    829c:	6023      	str	r3, [r4, #0]
    829e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    82a0:	3a01      	subs	r2, #1
    82a2:	9301      	str	r3, [sp, #4]
    82a4:	3301      	adds	r3, #1
    82a6:	6062      	str	r2, [r4, #4]
    82a8:	9349      	str	r3, [sp, #292]	; 0x124
    82aa:	e78d      	b.n	81c8 <__svfiscanf_r+0xec>
    82ac:	2286      	movs	r2, #134	; 0x86
    82ae:	ab02      	add	r3, sp, #8
    82b0:	0052      	lsls	r2, r2, #1
    82b2:	189b      	adds	r3, r3, r2
    82b4:	59db      	ldr	r3, [r3, r7]
    82b6:	0021      	movs	r1, r4
    82b8:	9800      	ldr	r0, [sp, #0]
    82ba:	9302      	str	r3, [sp, #8]
    82bc:	4798      	blx	r3
    82be:	2800      	cmp	r0, #0
    82c0:	d0e4      	beq.n	828c <__svfiscanf_r+0x1b0>
    82c2:	9848      	ldr	r0, [sp, #288]	; 0x120
    82c4:	2800      	cmp	r0, #0
    82c6:	d000      	beq.n	82ca <__svfiscanf_r+0x1ee>
    82c8:	e07b      	b.n	83c2 <__svfiscanf_r+0x2e6>
    82ca:	3801      	subs	r0, #1
    82cc:	23a7      	movs	r3, #167	; 0xa7
    82ce:	009b      	lsls	r3, r3, #2
    82d0:	449d      	add	sp, r3
    82d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    82d6:	9201      	str	r2, [sp, #4]
    82d8:	2220      	movs	r2, #32
    82da:	9901      	ldr	r1, [sp, #4]
    82dc:	430a      	orrs	r2, r1
    82de:	9245      	str	r2, [sp, #276]	; 0x114
    82e0:	e78e      	b.n	8200 <__svfiscanf_r+0x124>
    82e2:	2308      	movs	r3, #8
    82e4:	2204      	movs	r2, #4
    82e6:	9346      	str	r3, [sp, #280]	; 0x118
    82e8:	e7ab      	b.n	8242 <__svfiscanf_r+0x166>
    82ea:	0031      	movs	r1, r6
    82ec:	a805      	add	r0, sp, #20
    82ee:	f000 fad9 	bl	88a4 <__sccl>
    82f2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    82f4:	0006      	movs	r6, r0
    82f6:	9301      	str	r3, [sp, #4]
    82f8:	2340      	movs	r3, #64	; 0x40
    82fa:	9a01      	ldr	r2, [sp, #4]
    82fc:	4313      	orrs	r3, r2
    82fe:	9345      	str	r3, [sp, #276]	; 0x114
    8300:	2301      	movs	r3, #1
    8302:	934b      	str	r3, [sp, #300]	; 0x12c
    8304:	e79e      	b.n	8244 <__svfiscanf_r+0x168>
    8306:	9b45      	ldr	r3, [sp, #276]	; 0x114
    8308:	9301      	str	r3, [sp, #4]
    830a:	2340      	movs	r3, #64	; 0x40
    830c:	9a01      	ldr	r2, [sp, #4]
    830e:	4313      	orrs	r3, r2
    8310:	9345      	str	r3, [sp, #276]	; 0x114
    8312:	2300      	movs	r3, #0
    8314:	e7f5      	b.n	8302 <__svfiscanf_r+0x226>
    8316:	9945      	ldr	r1, [sp, #276]	; 0x114
    8318:	06cb      	lsls	r3, r1, #27
    831a:	d500      	bpl.n	831e <__svfiscanf_r+0x242>
    831c:	e754      	b.n	81c8 <__svfiscanf_r+0xec>
    831e:	9b03      	ldr	r3, [sp, #12]
    8320:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8322:	07c8      	lsls	r0, r1, #31
    8324:	d504      	bpl.n	8330 <__svfiscanf_r+0x254>
    8326:	1d19      	adds	r1, r3, #4
    8328:	9103      	str	r1, [sp, #12]
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	801a      	strh	r2, [r3, #0]
    832e:	e74b      	b.n	81c8 <__svfiscanf_r+0xec>
    8330:	1d19      	adds	r1, r3, #4
    8332:	9103      	str	r1, [sp, #12]
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	601a      	str	r2, [r3, #0]
    8338:	e746      	b.n	81c8 <__svfiscanf_r+0xec>
    833a:	2305      	movs	r3, #5
    833c:	e7e1      	b.n	8302 <__svfiscanf_r+0x226>
    833e:	2286      	movs	r2, #134	; 0x86
    8340:	ab02      	add	r3, sp, #8
    8342:	0052      	lsls	r2, r2, #1
    8344:	189b      	adds	r3, r3, r2
    8346:	59db      	ldr	r3, [r3, r7]
    8348:	0021      	movs	r1, r4
    834a:	9800      	ldr	r0, [sp, #0]
    834c:	9301      	str	r3, [sp, #4]
    834e:	4798      	blx	r3
    8350:	2800      	cmp	r0, #0
    8352:	d100      	bne.n	8356 <__svfiscanf_r+0x27a>
    8354:	e77a      	b.n	824c <__svfiscanf_r+0x170>
    8356:	e7b4      	b.n	82c2 <__svfiscanf_r+0x1e6>
    8358:	9a49      	ldr	r2, [sp, #292]	; 0x124
    835a:	9201      	str	r2, [sp, #4]
    835c:	3201      	adds	r2, #1
    835e:	9249      	str	r2, [sp, #292]	; 0x124
    8360:	6862      	ldr	r2, [r4, #4]
    8362:	3a01      	subs	r2, #1
    8364:	6062      	str	r2, [r4, #4]
    8366:	2a00      	cmp	r2, #0
    8368:	dd0b      	ble.n	8382 <__svfiscanf_r+0x2a6>
    836a:	3301      	adds	r3, #1
    836c:	6023      	str	r3, [r4, #0]
    836e:	f000 fd43 	bl	8df8 <__locale_ctype_ptr>
    8372:	2108      	movs	r1, #8
    8374:	6823      	ldr	r3, [r4, #0]
    8376:	781a      	ldrb	r2, [r3, #0]
    8378:	1880      	adds	r0, r0, r2
    837a:	7842      	ldrb	r2, [r0, #1]
    837c:	420a      	tst	r2, r1
    837e:	d1eb      	bne.n	8358 <__svfiscanf_r+0x27c>
    8380:	e769      	b.n	8256 <__svfiscanf_r+0x17a>
    8382:	2286      	movs	r2, #134	; 0x86
    8384:	ab02      	add	r3, sp, #8
    8386:	0052      	lsls	r2, r2, #1
    8388:	189b      	adds	r3, r3, r2
    838a:	59db      	ldr	r3, [r3, r7]
    838c:	0021      	movs	r1, r4
    838e:	9800      	ldr	r0, [sp, #0]
    8390:	9301      	str	r3, [sp, #4]
    8392:	4798      	blx	r3
    8394:	2800      	cmp	r0, #0
    8396:	d0ea      	beq.n	836e <__svfiscanf_r+0x292>
    8398:	e793      	b.n	82c2 <__svfiscanf_r+0x1e6>
    839a:	2b04      	cmp	r3, #4
    839c:	dc06      	bgt.n	83ac <__svfiscanf_r+0x2d0>
    839e:	ab03      	add	r3, sp, #12
    83a0:	0022      	movs	r2, r4
    83a2:	a945      	add	r1, sp, #276	; 0x114
    83a4:	9800      	ldr	r0, [sp, #0]
    83a6:	f000 f8ab 	bl	8500 <_scanf_i>
    83aa:	e75e      	b.n	826a <__svfiscanf_r+0x18e>
    83ac:	4b0d      	ldr	r3, [pc, #52]	; (83e4 <__svfiscanf_r+0x308>)
    83ae:	2b00      	cmp	r3, #0
    83b0:	d100      	bne.n	83b4 <__svfiscanf_r+0x2d8>
    83b2:	e709      	b.n	81c8 <__svfiscanf_r+0xec>
    83b4:	ab03      	add	r3, sp, #12
    83b6:	0022      	movs	r2, r4
    83b8:	a945      	add	r1, sp, #276	; 0x114
    83ba:	9800      	ldr	r0, [sp, #0]
    83bc:	e000      	b.n	83c0 <__svfiscanf_r+0x2e4>
    83be:	bf00      	nop
    83c0:	e753      	b.n	826a <__svfiscanf_r+0x18e>
    83c2:	89a3      	ldrh	r3, [r4, #12]
    83c4:	065b      	lsls	r3, r3, #25
    83c6:	d400      	bmi.n	83ca <__svfiscanf_r+0x2ee>
    83c8:	e780      	b.n	82cc <__svfiscanf_r+0x1f0>
    83ca:	2001      	movs	r0, #1
    83cc:	4240      	negs	r0, r0
    83ce:	e77d      	b.n	82cc <__svfiscanf_r+0x1f0>
    83d0:	9848      	ldr	r0, [sp, #288]	; 0x120
    83d2:	e77b      	b.n	82cc <__svfiscanf_r+0x1f0>
    83d4:	fffffd64 	.word	0xfffffd64
    83d8:	00008c79 	.word	0x00008c79
    83dc:	00008785 	.word	0x00008785
    83e0:	0000a0d2 	.word	0x0000a0d2
    83e4:	00000000 	.word	0x00000000

000083e8 <_vfiscanf_r>:
    83e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83ea:	0004      	movs	r4, r0
    83ec:	000d      	movs	r5, r1
    83ee:	0016      	movs	r6, r2
    83f0:	001f      	movs	r7, r3
    83f2:	2800      	cmp	r0, #0
    83f4:	d004      	beq.n	8400 <_vfiscanf_r+0x18>
    83f6:	6983      	ldr	r3, [r0, #24]
    83f8:	2b00      	cmp	r3, #0
    83fa:	d101      	bne.n	8400 <_vfiscanf_r+0x18>
    83fc:	f7ff f91c 	bl	7638 <__sinit>
    8400:	4b0a      	ldr	r3, [pc, #40]	; (842c <_vfiscanf_r+0x44>)
    8402:	429d      	cmp	r5, r3
    8404:	d107      	bne.n	8416 <_vfiscanf_r+0x2e>
    8406:	6865      	ldr	r5, [r4, #4]
    8408:	003b      	movs	r3, r7
    840a:	0032      	movs	r2, r6
    840c:	0029      	movs	r1, r5
    840e:	0020      	movs	r0, r4
    8410:	f7ff fe64 	bl	80dc <__svfiscanf_r>
    8414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8416:	4b06      	ldr	r3, [pc, #24]	; (8430 <_vfiscanf_r+0x48>)
    8418:	429d      	cmp	r5, r3
    841a:	d101      	bne.n	8420 <_vfiscanf_r+0x38>
    841c:	68a5      	ldr	r5, [r4, #8]
    841e:	e7f3      	b.n	8408 <_vfiscanf_r+0x20>
    8420:	4b04      	ldr	r3, [pc, #16]	; (8434 <_vfiscanf_r+0x4c>)
    8422:	429d      	cmp	r5, r3
    8424:	d1f0      	bne.n	8408 <_vfiscanf_r+0x20>
    8426:	68e5      	ldr	r5, [r4, #12]
    8428:	e7ee      	b.n	8408 <_vfiscanf_r+0x20>
    842a:	46c0      	nop			; (mov r8, r8)
    842c:	0000a08c 	.word	0x0000a08c
    8430:	0000a0ac 	.word	0x0000a0ac
    8434:	0000a06c 	.word	0x0000a06c

00008438 <_scanf_chars>:
    8438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    843a:	0015      	movs	r5, r2
    843c:	688a      	ldr	r2, [r1, #8]
    843e:	9001      	str	r0, [sp, #4]
    8440:	000c      	movs	r4, r1
    8442:	2a00      	cmp	r2, #0
    8444:	d106      	bne.n	8454 <_scanf_chars+0x1c>
    8446:	698a      	ldr	r2, [r1, #24]
    8448:	1e51      	subs	r1, r2, #1
    844a:	418a      	sbcs	r2, r1
    844c:	2101      	movs	r1, #1
    844e:	4252      	negs	r2, r2
    8450:	430a      	orrs	r2, r1
    8452:	60a2      	str	r2, [r4, #8]
    8454:	6822      	ldr	r2, [r4, #0]
    8456:	06d2      	lsls	r2, r2, #27
    8458:	d403      	bmi.n	8462 <_scanf_chars+0x2a>
    845a:	681a      	ldr	r2, [r3, #0]
    845c:	1d11      	adds	r1, r2, #4
    845e:	6019      	str	r1, [r3, #0]
    8460:	6817      	ldr	r7, [r2, #0]
    8462:	2600      	movs	r6, #0
    8464:	69a3      	ldr	r3, [r4, #24]
    8466:	2b00      	cmp	r3, #0
    8468:	d01c      	beq.n	84a4 <_scanf_chars+0x6c>
    846a:	2b01      	cmp	r3, #1
    846c:	d108      	bne.n	8480 <_scanf_chars+0x48>
    846e:	682b      	ldr	r3, [r5, #0]
    8470:	6962      	ldr	r2, [r4, #20]
    8472:	781b      	ldrb	r3, [r3, #0]
    8474:	5cd3      	ldrb	r3, [r2, r3]
    8476:	2b00      	cmp	r3, #0
    8478:	d114      	bne.n	84a4 <_scanf_chars+0x6c>
    847a:	2e00      	cmp	r6, #0
    847c:	d130      	bne.n	84e0 <_scanf_chars+0xa8>
    847e:	e006      	b.n	848e <_scanf_chars+0x56>
    8480:	2b02      	cmp	r3, #2
    8482:	d006      	beq.n	8492 <_scanf_chars+0x5a>
    8484:	2e00      	cmp	r6, #0
    8486:	d12b      	bne.n	84e0 <_scanf_chars+0xa8>
    8488:	69a3      	ldr	r3, [r4, #24]
    848a:	2b01      	cmp	r3, #1
    848c:	d128      	bne.n	84e0 <_scanf_chars+0xa8>
    848e:	2001      	movs	r0, #1
    8490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8492:	f000 fcb1 	bl	8df8 <__locale_ctype_ptr>
    8496:	2208      	movs	r2, #8
    8498:	682b      	ldr	r3, [r5, #0]
    849a:	781b      	ldrb	r3, [r3, #0]
    849c:	18c0      	adds	r0, r0, r3
    849e:	7843      	ldrb	r3, [r0, #1]
    84a0:	4213      	tst	r3, r2
    84a2:	d1ef      	bne.n	8484 <_scanf_chars+0x4c>
    84a4:	2210      	movs	r2, #16
    84a6:	6823      	ldr	r3, [r4, #0]
    84a8:	3601      	adds	r6, #1
    84aa:	4213      	tst	r3, r2
    84ac:	d103      	bne.n	84b6 <_scanf_chars+0x7e>
    84ae:	682b      	ldr	r3, [r5, #0]
    84b0:	781b      	ldrb	r3, [r3, #0]
    84b2:	703b      	strb	r3, [r7, #0]
    84b4:	3701      	adds	r7, #1
    84b6:	682a      	ldr	r2, [r5, #0]
    84b8:	686b      	ldr	r3, [r5, #4]
    84ba:	3201      	adds	r2, #1
    84bc:	602a      	str	r2, [r5, #0]
    84be:	68a2      	ldr	r2, [r4, #8]
    84c0:	3b01      	subs	r3, #1
    84c2:	3a01      	subs	r2, #1
    84c4:	606b      	str	r3, [r5, #4]
    84c6:	60a2      	str	r2, [r4, #8]
    84c8:	2a00      	cmp	r2, #0
    84ca:	d009      	beq.n	84e0 <_scanf_chars+0xa8>
    84cc:	2b00      	cmp	r3, #0
    84ce:	dcc9      	bgt.n	8464 <_scanf_chars+0x2c>
    84d0:	23c0      	movs	r3, #192	; 0xc0
    84d2:	005b      	lsls	r3, r3, #1
    84d4:	58e3      	ldr	r3, [r4, r3]
    84d6:	0029      	movs	r1, r5
    84d8:	9801      	ldr	r0, [sp, #4]
    84da:	4798      	blx	r3
    84dc:	2800      	cmp	r0, #0
    84de:	d0c1      	beq.n	8464 <_scanf_chars+0x2c>
    84e0:	2310      	movs	r3, #16
    84e2:	6822      	ldr	r2, [r4, #0]
    84e4:	4013      	ands	r3, r2
    84e6:	d106      	bne.n	84f6 <_scanf_chars+0xbe>
    84e8:	68e2      	ldr	r2, [r4, #12]
    84ea:	3201      	adds	r2, #1
    84ec:	60e2      	str	r2, [r4, #12]
    84ee:	69a2      	ldr	r2, [r4, #24]
    84f0:	2a00      	cmp	r2, #0
    84f2:	d000      	beq.n	84f6 <_scanf_chars+0xbe>
    84f4:	703b      	strb	r3, [r7, #0]
    84f6:	6923      	ldr	r3, [r4, #16]
    84f8:	2000      	movs	r0, #0
    84fa:	199e      	adds	r6, r3, r6
    84fc:	6126      	str	r6, [r4, #16]
    84fe:	e7c7      	b.n	8490 <_scanf_chars+0x58>

00008500 <_scanf_i>:
    8500:	b5f0      	push	{r4, r5, r6, r7, lr}
    8502:	000c      	movs	r4, r1
    8504:	b08d      	sub	sp, #52	; 0x34
    8506:	9302      	str	r3, [sp, #8]
    8508:	4b77      	ldr	r3, [pc, #476]	; (86e8 <_scanf_i+0x1e8>)
    850a:	9005      	str	r0, [sp, #20]
    850c:	0016      	movs	r6, r2
    850e:	aa09      	add	r2, sp, #36	; 0x24
    8510:	cb23      	ldmia	r3!, {r0, r1, r5}
    8512:	c223      	stmia	r2!, {r0, r1, r5}
    8514:	4b75      	ldr	r3, [pc, #468]	; (86ec <_scanf_i+0x1ec>)
    8516:	9306      	str	r3, [sp, #24]
    8518:	69a3      	ldr	r3, [r4, #24]
    851a:	2b03      	cmp	r3, #3
    851c:	d001      	beq.n	8522 <_scanf_i+0x22>
    851e:	4b74      	ldr	r3, [pc, #464]	; (86f0 <_scanf_i+0x1f0>)
    8520:	9306      	str	r3, [sp, #24]
    8522:	22ae      	movs	r2, #174	; 0xae
    8524:	2000      	movs	r0, #0
    8526:	68a3      	ldr	r3, [r4, #8]
    8528:	0052      	lsls	r2, r2, #1
    852a:	1e59      	subs	r1, r3, #1
    852c:	9004      	str	r0, [sp, #16]
    852e:	4291      	cmp	r1, r2
    8530:	d905      	bls.n	853e <_scanf_i+0x3e>
    8532:	3b5e      	subs	r3, #94	; 0x5e
    8534:	3bff      	subs	r3, #255	; 0xff
    8536:	9304      	str	r3, [sp, #16]
    8538:	235e      	movs	r3, #94	; 0x5e
    853a:	33ff      	adds	r3, #255	; 0xff
    853c:	60a3      	str	r3, [r4, #8]
    853e:	0023      	movs	r3, r4
    8540:	331c      	adds	r3, #28
    8542:	9301      	str	r3, [sp, #4]
    8544:	23d0      	movs	r3, #208	; 0xd0
    8546:	2700      	movs	r7, #0
    8548:	6822      	ldr	r2, [r4, #0]
    854a:	011b      	lsls	r3, r3, #4
    854c:	4313      	orrs	r3, r2
    854e:	6023      	str	r3, [r4, #0]
    8550:	9b01      	ldr	r3, [sp, #4]
    8552:	9303      	str	r3, [sp, #12]
    8554:	6833      	ldr	r3, [r6, #0]
    8556:	a809      	add	r0, sp, #36	; 0x24
    8558:	7819      	ldrb	r1, [r3, #0]
    855a:	00bb      	lsls	r3, r7, #2
    855c:	2202      	movs	r2, #2
    855e:	5818      	ldr	r0, [r3, r0]
    8560:	f000 fc7e 	bl	8e60 <memchr>
    8564:	2800      	cmp	r0, #0
    8566:	d02b      	beq.n	85c0 <_scanf_i+0xc0>
    8568:	2f01      	cmp	r7, #1
    856a:	d15f      	bne.n	862c <_scanf_i+0x12c>
    856c:	6863      	ldr	r3, [r4, #4]
    856e:	2b00      	cmp	r3, #0
    8570:	d106      	bne.n	8580 <_scanf_i+0x80>
    8572:	3308      	adds	r3, #8
    8574:	6822      	ldr	r2, [r4, #0]
    8576:	6063      	str	r3, [r4, #4]
    8578:	33f9      	adds	r3, #249	; 0xf9
    857a:	33ff      	adds	r3, #255	; 0xff
    857c:	4313      	orrs	r3, r2
    857e:	6023      	str	r3, [r4, #0]
    8580:	4b5c      	ldr	r3, [pc, #368]	; (86f4 <_scanf_i+0x1f4>)
    8582:	6822      	ldr	r2, [r4, #0]
    8584:	4013      	ands	r3, r2
    8586:	6023      	str	r3, [r4, #0]
    8588:	68a3      	ldr	r3, [r4, #8]
    858a:	1e5a      	subs	r2, r3, #1
    858c:	60a2      	str	r2, [r4, #8]
    858e:	2b00      	cmp	r3, #0
    8590:	d016      	beq.n	85c0 <_scanf_i+0xc0>
    8592:	9b03      	ldr	r3, [sp, #12]
    8594:	1c5d      	adds	r5, r3, #1
    8596:	6833      	ldr	r3, [r6, #0]
    8598:	1c5a      	adds	r2, r3, #1
    859a:	6032      	str	r2, [r6, #0]
    859c:	781b      	ldrb	r3, [r3, #0]
    859e:	9a03      	ldr	r2, [sp, #12]
    85a0:	9503      	str	r5, [sp, #12]
    85a2:	7013      	strb	r3, [r2, #0]
    85a4:	6873      	ldr	r3, [r6, #4]
    85a6:	3b01      	subs	r3, #1
    85a8:	6073      	str	r3, [r6, #4]
    85aa:	2b00      	cmp	r3, #0
    85ac:	dc08      	bgt.n	85c0 <_scanf_i+0xc0>
    85ae:	23c0      	movs	r3, #192	; 0xc0
    85b0:	005b      	lsls	r3, r3, #1
    85b2:	58e3      	ldr	r3, [r4, r3]
    85b4:	0031      	movs	r1, r6
    85b6:	9805      	ldr	r0, [sp, #20]
    85b8:	9307      	str	r3, [sp, #28]
    85ba:	4798      	blx	r3
    85bc:	2800      	cmp	r0, #0
    85be:	d17d      	bne.n	86bc <_scanf_i+0x1bc>
    85c0:	3701      	adds	r7, #1
    85c2:	2f03      	cmp	r7, #3
    85c4:	d1c6      	bne.n	8554 <_scanf_i+0x54>
    85c6:	6863      	ldr	r3, [r4, #4]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d101      	bne.n	85d0 <_scanf_i+0xd0>
    85cc:	330a      	adds	r3, #10
    85ce:	6063      	str	r3, [r4, #4]
    85d0:	2110      	movs	r1, #16
    85d2:	2700      	movs	r7, #0
    85d4:	6863      	ldr	r3, [r4, #4]
    85d6:	6960      	ldr	r0, [r4, #20]
    85d8:	1ac9      	subs	r1, r1, r3
    85da:	4b47      	ldr	r3, [pc, #284]	; (86f8 <_scanf_i+0x1f8>)
    85dc:	18c9      	adds	r1, r1, r3
    85de:	f000 f961 	bl	88a4 <__sccl>
    85e2:	9d03      	ldr	r5, [sp, #12]
    85e4:	68a3      	ldr	r3, [r4, #8]
    85e6:	2b00      	cmp	r3, #0
    85e8:	d041      	beq.n	866e <_scanf_i+0x16e>
    85ea:	6832      	ldr	r2, [r6, #0]
    85ec:	6960      	ldr	r0, [r4, #20]
    85ee:	7811      	ldrb	r1, [r2, #0]
    85f0:	5c40      	ldrb	r0, [r0, r1]
    85f2:	2800      	cmp	r0, #0
    85f4:	d03b      	beq.n	866e <_scanf_i+0x16e>
    85f6:	2930      	cmp	r1, #48	; 0x30
    85f8:	d128      	bne.n	864c <_scanf_i+0x14c>
    85fa:	2080      	movs	r0, #128	; 0x80
    85fc:	6821      	ldr	r1, [r4, #0]
    85fe:	0100      	lsls	r0, r0, #4
    8600:	4201      	tst	r1, r0
    8602:	d023      	beq.n	864c <_scanf_i+0x14c>
    8604:	9a04      	ldr	r2, [sp, #16]
    8606:	3701      	adds	r7, #1
    8608:	2a00      	cmp	r2, #0
    860a:	d003      	beq.n	8614 <_scanf_i+0x114>
    860c:	3a01      	subs	r2, #1
    860e:	3301      	adds	r3, #1
    8610:	9204      	str	r2, [sp, #16]
    8612:	60a3      	str	r3, [r4, #8]
    8614:	6873      	ldr	r3, [r6, #4]
    8616:	3b01      	subs	r3, #1
    8618:	6073      	str	r3, [r6, #4]
    861a:	2b00      	cmp	r3, #0
    861c:	dd1e      	ble.n	865c <_scanf_i+0x15c>
    861e:	6833      	ldr	r3, [r6, #0]
    8620:	3301      	adds	r3, #1
    8622:	6033      	str	r3, [r6, #0]
    8624:	68a3      	ldr	r3, [r4, #8]
    8626:	3b01      	subs	r3, #1
    8628:	60a3      	str	r3, [r4, #8]
    862a:	e7db      	b.n	85e4 <_scanf_i+0xe4>
    862c:	2f02      	cmp	r7, #2
    862e:	d1ab      	bne.n	8588 <_scanf_i+0x88>
    8630:	21c0      	movs	r1, #192	; 0xc0
    8632:	2380      	movs	r3, #128	; 0x80
    8634:	6822      	ldr	r2, [r4, #0]
    8636:	00c9      	lsls	r1, r1, #3
    8638:	4011      	ands	r1, r2
    863a:	009b      	lsls	r3, r3, #2
    863c:	4299      	cmp	r1, r3
    863e:	d1c2      	bne.n	85c6 <_scanf_i+0xc6>
    8640:	3bf1      	subs	r3, #241	; 0xf1
    8642:	3bff      	subs	r3, #255	; 0xff
    8644:	6063      	str	r3, [r4, #4]
    8646:	33f0      	adds	r3, #240	; 0xf0
    8648:	4313      	orrs	r3, r2
    864a:	e79c      	b.n	8586 <_scanf_i+0x86>
    864c:	6821      	ldr	r1, [r4, #0]
    864e:	4b2b      	ldr	r3, [pc, #172]	; (86fc <_scanf_i+0x1fc>)
    8650:	400b      	ands	r3, r1
    8652:	6023      	str	r3, [r4, #0]
    8654:	7813      	ldrb	r3, [r2, #0]
    8656:	702b      	strb	r3, [r5, #0]
    8658:	3501      	adds	r5, #1
    865a:	e7db      	b.n	8614 <_scanf_i+0x114>
    865c:	23c0      	movs	r3, #192	; 0xc0
    865e:	005b      	lsls	r3, r3, #1
    8660:	58e3      	ldr	r3, [r4, r3]
    8662:	0031      	movs	r1, r6
    8664:	9805      	ldr	r0, [sp, #20]
    8666:	9303      	str	r3, [sp, #12]
    8668:	4798      	blx	r3
    866a:	2800      	cmp	r0, #0
    866c:	d0da      	beq.n	8624 <_scanf_i+0x124>
    866e:	6823      	ldr	r3, [r4, #0]
    8670:	05db      	lsls	r3, r3, #23
    8672:	d50e      	bpl.n	8692 <_scanf_i+0x192>
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	429d      	cmp	r5, r3
    8678:	d907      	bls.n	868a <_scanf_i+0x18a>
    867a:	23be      	movs	r3, #190	; 0xbe
    867c:	3d01      	subs	r5, #1
    867e:	005b      	lsls	r3, r3, #1
    8680:	7829      	ldrb	r1, [r5, #0]
    8682:	58e3      	ldr	r3, [r4, r3]
    8684:	0032      	movs	r2, r6
    8686:	9805      	ldr	r0, [sp, #20]
    8688:	4798      	blx	r3
    868a:	9b01      	ldr	r3, [sp, #4]
    868c:	2001      	movs	r0, #1
    868e:	429d      	cmp	r5, r3
    8690:	d027      	beq.n	86e2 <_scanf_i+0x1e2>
    8692:	2210      	movs	r2, #16
    8694:	6823      	ldr	r3, [r4, #0]
    8696:	401a      	ands	r2, r3
    8698:	d11c      	bne.n	86d4 <_scanf_i+0x1d4>
    869a:	702a      	strb	r2, [r5, #0]
    869c:	6863      	ldr	r3, [r4, #4]
    869e:	9901      	ldr	r1, [sp, #4]
    86a0:	9805      	ldr	r0, [sp, #20]
    86a2:	9e06      	ldr	r6, [sp, #24]
    86a4:	47b0      	blx	r6
    86a6:	9b02      	ldr	r3, [sp, #8]
    86a8:	6822      	ldr	r2, [r4, #0]
    86aa:	681b      	ldr	r3, [r3, #0]
    86ac:	0691      	lsls	r1, r2, #26
    86ae:	d507      	bpl.n	86c0 <_scanf_i+0x1c0>
    86b0:	9902      	ldr	r1, [sp, #8]
    86b2:	1d1a      	adds	r2, r3, #4
    86b4:	600a      	str	r2, [r1, #0]
    86b6:	681b      	ldr	r3, [r3, #0]
    86b8:	6018      	str	r0, [r3, #0]
    86ba:	e008      	b.n	86ce <_scanf_i+0x1ce>
    86bc:	2700      	movs	r7, #0
    86be:	e7d6      	b.n	866e <_scanf_i+0x16e>
    86c0:	07d1      	lsls	r1, r2, #31
    86c2:	d5f5      	bpl.n	86b0 <_scanf_i+0x1b0>
    86c4:	9902      	ldr	r1, [sp, #8]
    86c6:	1d1a      	adds	r2, r3, #4
    86c8:	600a      	str	r2, [r1, #0]
    86ca:	681b      	ldr	r3, [r3, #0]
    86cc:	8018      	strh	r0, [r3, #0]
    86ce:	68e3      	ldr	r3, [r4, #12]
    86d0:	3301      	adds	r3, #1
    86d2:	60e3      	str	r3, [r4, #12]
    86d4:	2000      	movs	r0, #0
    86d6:	9b01      	ldr	r3, [sp, #4]
    86d8:	1aed      	subs	r5, r5, r3
    86da:	6923      	ldr	r3, [r4, #16]
    86dc:	19ef      	adds	r7, r5, r7
    86de:	19df      	adds	r7, r3, r7
    86e0:	6127      	str	r7, [r4, #16]
    86e2:	b00d      	add	sp, #52	; 0x34
    86e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86e6:	46c0      	nop			; (mov r8, r8)
    86e8:	0000a100 	.word	0x0000a100
    86ec:	00008aad 	.word	0x00008aad
    86f0:	00008bdd 	.word	0x00008bdd
    86f4:	fffffaff 	.word	0xfffffaff
    86f8:	0000a10c 	.word	0x0000a10c
    86fc:	fffff6ff 	.word	0xfffff6ff

00008700 <_putc_r>:
    8700:	b570      	push	{r4, r5, r6, lr}
    8702:	0006      	movs	r6, r0
    8704:	000d      	movs	r5, r1
    8706:	0014      	movs	r4, r2
    8708:	2800      	cmp	r0, #0
    870a:	d004      	beq.n	8716 <_putc_r+0x16>
    870c:	6983      	ldr	r3, [r0, #24]
    870e:	2b00      	cmp	r3, #0
    8710:	d101      	bne.n	8716 <_putc_r+0x16>
    8712:	f7fe ff91 	bl	7638 <__sinit>
    8716:	4b12      	ldr	r3, [pc, #72]	; (8760 <_putc_r+0x60>)
    8718:	429c      	cmp	r4, r3
    871a:	d111      	bne.n	8740 <_putc_r+0x40>
    871c:	6874      	ldr	r4, [r6, #4]
    871e:	68a3      	ldr	r3, [r4, #8]
    8720:	3b01      	subs	r3, #1
    8722:	60a3      	str	r3, [r4, #8]
    8724:	2b00      	cmp	r3, #0
    8726:	da05      	bge.n	8734 <_putc_r+0x34>
    8728:	69a2      	ldr	r2, [r4, #24]
    872a:	4293      	cmp	r3, r2
    872c:	db12      	blt.n	8754 <_putc_r+0x54>
    872e:	b2eb      	uxtb	r3, r5
    8730:	2b0a      	cmp	r3, #10
    8732:	d00f      	beq.n	8754 <_putc_r+0x54>
    8734:	6823      	ldr	r3, [r4, #0]
    8736:	b2e8      	uxtb	r0, r5
    8738:	1c5a      	adds	r2, r3, #1
    873a:	6022      	str	r2, [r4, #0]
    873c:	701d      	strb	r5, [r3, #0]
    873e:	bd70      	pop	{r4, r5, r6, pc}
    8740:	4b08      	ldr	r3, [pc, #32]	; (8764 <_putc_r+0x64>)
    8742:	429c      	cmp	r4, r3
    8744:	d101      	bne.n	874a <_putc_r+0x4a>
    8746:	68b4      	ldr	r4, [r6, #8]
    8748:	e7e9      	b.n	871e <_putc_r+0x1e>
    874a:	4b07      	ldr	r3, [pc, #28]	; (8768 <_putc_r+0x68>)
    874c:	429c      	cmp	r4, r3
    874e:	d1e6      	bne.n	871e <_putc_r+0x1e>
    8750:	68f4      	ldr	r4, [r6, #12]
    8752:	e7e4      	b.n	871e <_putc_r+0x1e>
    8754:	0022      	movs	r2, r4
    8756:	0029      	movs	r1, r5
    8758:	0030      	movs	r0, r6
    875a:	f7fe fd95 	bl	7288 <__swbuf_r>
    875e:	e7ee      	b.n	873e <_putc_r+0x3e>
    8760:	0000a08c 	.word	0x0000a08c
    8764:	0000a0ac 	.word	0x0000a0ac
    8768:	0000a06c 	.word	0x0000a06c

0000876c <lflush>:
    876c:	2209      	movs	r2, #9
    876e:	b510      	push	{r4, lr}
    8770:	8983      	ldrh	r3, [r0, #12]
    8772:	4013      	ands	r3, r2
    8774:	2200      	movs	r2, #0
    8776:	2b09      	cmp	r3, #9
    8778:	d102      	bne.n	8780 <lflush+0x14>
    877a:	f7fe ff07 	bl	758c <fflush>
    877e:	0002      	movs	r2, r0
    8780:	0010      	movs	r0, r2
    8782:	bd10      	pop	{r4, pc}

00008784 <__srefill_r>:
    8784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8786:	0005      	movs	r5, r0
    8788:	000c      	movs	r4, r1
    878a:	2800      	cmp	r0, #0
    878c:	d004      	beq.n	8798 <__srefill_r+0x14>
    878e:	6983      	ldr	r3, [r0, #24]
    8790:	2b00      	cmp	r3, #0
    8792:	d101      	bne.n	8798 <__srefill_r+0x14>
    8794:	f7fe ff50 	bl	7638 <__sinit>
    8798:	4b3d      	ldr	r3, [pc, #244]	; (8890 <__srefill_r+0x10c>)
    879a:	429c      	cmp	r4, r3
    879c:	d10a      	bne.n	87b4 <__srefill_r+0x30>
    879e:	686c      	ldr	r4, [r5, #4]
    87a0:	2300      	movs	r3, #0
    87a2:	6063      	str	r3, [r4, #4]
    87a4:	230c      	movs	r3, #12
    87a6:	5ee2      	ldrsh	r2, [r4, r3]
    87a8:	b293      	uxth	r3, r2
    87aa:	0699      	lsls	r1, r3, #26
    87ac:	d50c      	bpl.n	87c8 <__srefill_r+0x44>
    87ae:	2001      	movs	r0, #1
    87b0:	4240      	negs	r0, r0
    87b2:	e068      	b.n	8886 <__srefill_r+0x102>
    87b4:	4b37      	ldr	r3, [pc, #220]	; (8894 <__srefill_r+0x110>)
    87b6:	429c      	cmp	r4, r3
    87b8:	d101      	bne.n	87be <__srefill_r+0x3a>
    87ba:	68ac      	ldr	r4, [r5, #8]
    87bc:	e7f0      	b.n	87a0 <__srefill_r+0x1c>
    87be:	4b36      	ldr	r3, [pc, #216]	; (8898 <__srefill_r+0x114>)
    87c0:	429c      	cmp	r4, r3
    87c2:	d1ed      	bne.n	87a0 <__srefill_r+0x1c>
    87c4:	68ec      	ldr	r4, [r5, #12]
    87c6:	e7eb      	b.n	87a0 <__srefill_r+0x1c>
    87c8:	0759      	lsls	r1, r3, #29
    87ca:	d44a      	bmi.n	8862 <__srefill_r+0xde>
    87cc:	06d9      	lsls	r1, r3, #27
    87ce:	d405      	bmi.n	87dc <__srefill_r+0x58>
    87d0:	2309      	movs	r3, #9
    87d2:	602b      	str	r3, [r5, #0]
    87d4:	3337      	adds	r3, #55	; 0x37
    87d6:	4313      	orrs	r3, r2
    87d8:	81a3      	strh	r3, [r4, #12]
    87da:	e7e8      	b.n	87ae <__srefill_r+0x2a>
    87dc:	2608      	movs	r6, #8
    87de:	4233      	tst	r3, r6
    87e0:	d00a      	beq.n	87f8 <__srefill_r+0x74>
    87e2:	0021      	movs	r1, r4
    87e4:	0028      	movs	r0, r5
    87e6:	f7fe fea5 	bl	7534 <_fflush_r>
    87ea:	2800      	cmp	r0, #0
    87ec:	d1df      	bne.n	87ae <__srefill_r+0x2a>
    87ee:	89a3      	ldrh	r3, [r4, #12]
    87f0:	60a0      	str	r0, [r4, #8]
    87f2:	43b3      	bics	r3, r6
    87f4:	81a3      	strh	r3, [r4, #12]
    87f6:	61a0      	str	r0, [r4, #24]
    87f8:	2304      	movs	r3, #4
    87fa:	89a2      	ldrh	r2, [r4, #12]
    87fc:	4313      	orrs	r3, r2
    87fe:	81a3      	strh	r3, [r4, #12]
    8800:	6923      	ldr	r3, [r4, #16]
    8802:	2b00      	cmp	r3, #0
    8804:	d103      	bne.n	880e <__srefill_r+0x8a>
    8806:	0021      	movs	r1, r4
    8808:	0028      	movs	r0, r5
    880a:	f7fe ffef 	bl	77ec <__smakebuf_r>
    880e:	230c      	movs	r3, #12
    8810:	5ee7      	ldrsh	r7, [r4, r3]
    8812:	b2be      	uxth	r6, r7
    8814:	07b3      	lsls	r3, r6, #30
    8816:	d00f      	beq.n	8838 <__srefill_r+0xb4>
    8818:	2301      	movs	r3, #1
    881a:	81a3      	strh	r3, [r4, #12]
    881c:	4b1f      	ldr	r3, [pc, #124]	; (889c <__srefill_r+0x118>)
    881e:	4920      	ldr	r1, [pc, #128]	; (88a0 <__srefill_r+0x11c>)
    8820:	6818      	ldr	r0, [r3, #0]
    8822:	f7fe ff7d 	bl	7720 <_fwalk>
    8826:	2309      	movs	r3, #9
    8828:	81a7      	strh	r7, [r4, #12]
    882a:	401e      	ands	r6, r3
    882c:	429e      	cmp	r6, r3
    882e:	d103      	bne.n	8838 <__srefill_r+0xb4>
    8830:	0021      	movs	r1, r4
    8832:	0028      	movs	r0, r5
    8834:	f7fe fdf4 	bl	7420 <__sflush_r>
    8838:	6923      	ldr	r3, [r4, #16]
    883a:	6922      	ldr	r2, [r4, #16]
    883c:	6023      	str	r3, [r4, #0]
    883e:	0028      	movs	r0, r5
    8840:	6963      	ldr	r3, [r4, #20]
    8842:	6a21      	ldr	r1, [r4, #32]
    8844:	6a65      	ldr	r5, [r4, #36]	; 0x24
    8846:	47a8      	blx	r5
    8848:	0002      	movs	r2, r0
    884a:	6060      	str	r0, [r4, #4]
    884c:	2000      	movs	r0, #0
    884e:	4282      	cmp	r2, r0
    8850:	dc19      	bgt.n	8886 <__srefill_r+0x102>
    8852:	89a1      	ldrh	r1, [r4, #12]
    8854:	4282      	cmp	r2, r0
    8856:	d117      	bne.n	8888 <__srefill_r+0x104>
    8858:	2320      	movs	r3, #32
    885a:	430b      	orrs	r3, r1
    885c:	81a3      	strh	r3, [r4, #12]
    885e:	3801      	subs	r0, #1
    8860:	e011      	b.n	8886 <__srefill_r+0x102>
    8862:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8864:	2900      	cmp	r1, #0
    8866:	d0cb      	beq.n	8800 <__srefill_r+0x7c>
    8868:	0023      	movs	r3, r4
    886a:	3344      	adds	r3, #68	; 0x44
    886c:	4299      	cmp	r1, r3
    886e:	d002      	beq.n	8876 <__srefill_r+0xf2>
    8870:	0028      	movs	r0, r5
    8872:	f7fe fa9b 	bl	6dac <_free_r>
    8876:	2000      	movs	r0, #0
    8878:	6c23      	ldr	r3, [r4, #64]	; 0x40
    887a:	6360      	str	r0, [r4, #52]	; 0x34
    887c:	6063      	str	r3, [r4, #4]
    887e:	4283      	cmp	r3, r0
    8880:	d0be      	beq.n	8800 <__srefill_r+0x7c>
    8882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8884:	6023      	str	r3, [r4, #0]
    8886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8888:	2340      	movs	r3, #64	; 0x40
    888a:	6060      	str	r0, [r4, #4]
    888c:	430b      	orrs	r3, r1
    888e:	e7a3      	b.n	87d8 <__srefill_r+0x54>
    8890:	0000a08c 	.word	0x0000a08c
    8894:	0000a0ac 	.word	0x0000a0ac
    8898:	0000a06c 	.word	0x0000a06c
    889c:	0000a068 	.word	0x0000a068
    88a0:	0000876d 	.word	0x0000876d

000088a4 <__sccl>:
    88a4:	b570      	push	{r4, r5, r6, lr}
    88a6:	780b      	ldrb	r3, [r1, #0]
    88a8:	2b5e      	cmp	r3, #94	; 0x5e
    88aa:	d00d      	beq.n	88c8 <__sccl+0x24>
    88ac:	1c4a      	adds	r2, r1, #1
    88ae:	2100      	movs	r1, #0
    88b0:	0004      	movs	r4, r0
    88b2:	1c45      	adds	r5, r0, #1
    88b4:	35ff      	adds	r5, #255	; 0xff
    88b6:	7021      	strb	r1, [r4, #0]
    88b8:	3401      	adds	r4, #1
    88ba:	42a5      	cmp	r5, r4
    88bc:	d1fb      	bne.n	88b6 <__sccl+0x12>
    88be:	2b00      	cmp	r3, #0
    88c0:	d106      	bne.n	88d0 <__sccl+0x2c>
    88c2:	3a01      	subs	r2, #1
    88c4:	0010      	movs	r0, r2
    88c6:	bd70      	pop	{r4, r5, r6, pc}
    88c8:	1c8a      	adds	r2, r1, #2
    88ca:	784b      	ldrb	r3, [r1, #1]
    88cc:	2101      	movs	r1, #1
    88ce:	e7ef      	b.n	88b0 <__sccl+0xc>
    88d0:	2401      	movs	r4, #1
    88d2:	404c      	eors	r4, r1
    88d4:	0011      	movs	r1, r2
    88d6:	54c4      	strb	r4, [r0, r3]
    88d8:	780d      	ldrb	r5, [r1, #0]
    88da:	1c4a      	adds	r2, r1, #1
    88dc:	2d2d      	cmp	r5, #45	; 0x2d
    88de:	d007      	beq.n	88f0 <__sccl+0x4c>
    88e0:	2d5d      	cmp	r5, #93	; 0x5d
    88e2:	d0ef      	beq.n	88c4 <__sccl+0x20>
    88e4:	2d00      	cmp	r5, #0
    88e6:	d101      	bne.n	88ec <__sccl+0x48>
    88e8:	000a      	movs	r2, r1
    88ea:	e7eb      	b.n	88c4 <__sccl+0x20>
    88ec:	002b      	movs	r3, r5
    88ee:	e7f1      	b.n	88d4 <__sccl+0x30>
    88f0:	784e      	ldrb	r6, [r1, #1]
    88f2:	2e5d      	cmp	r6, #93	; 0x5d
    88f4:	d0fa      	beq.n	88ec <__sccl+0x48>
    88f6:	42b3      	cmp	r3, r6
    88f8:	dcf8      	bgt.n	88ec <__sccl+0x48>
    88fa:	3102      	adds	r1, #2
    88fc:	3301      	adds	r3, #1
    88fe:	54c4      	strb	r4, [r0, r3]
    8900:	429e      	cmp	r6, r3
    8902:	dcfb      	bgt.n	88fc <__sccl+0x58>
    8904:	e7e8      	b.n	88d8 <__sccl+0x34>
	...

00008908 <__sread>:
    8908:	b570      	push	{r4, r5, r6, lr}
    890a:	000c      	movs	r4, r1
    890c:	250e      	movs	r5, #14
    890e:	5f49      	ldrsh	r1, [r1, r5]
    8910:	f000 fad8 	bl	8ec4 <_read_r>
    8914:	2800      	cmp	r0, #0
    8916:	db03      	blt.n	8920 <__sread+0x18>
    8918:	6d63      	ldr	r3, [r4, #84]	; 0x54
    891a:	181b      	adds	r3, r3, r0
    891c:	6563      	str	r3, [r4, #84]	; 0x54
    891e:	bd70      	pop	{r4, r5, r6, pc}
    8920:	89a3      	ldrh	r3, [r4, #12]
    8922:	4a02      	ldr	r2, [pc, #8]	; (892c <__sread+0x24>)
    8924:	4013      	ands	r3, r2
    8926:	81a3      	strh	r3, [r4, #12]
    8928:	e7f9      	b.n	891e <__sread+0x16>
    892a:	46c0      	nop			; (mov r8, r8)
    892c:	ffffefff 	.word	0xffffefff

00008930 <__swrite>:
    8930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8932:	001f      	movs	r7, r3
    8934:	898b      	ldrh	r3, [r1, #12]
    8936:	0005      	movs	r5, r0
    8938:	000c      	movs	r4, r1
    893a:	0016      	movs	r6, r2
    893c:	05db      	lsls	r3, r3, #23
    893e:	d505      	bpl.n	894c <__swrite+0x1c>
    8940:	230e      	movs	r3, #14
    8942:	5ec9      	ldrsh	r1, [r1, r3]
    8944:	2200      	movs	r2, #0
    8946:	2302      	movs	r3, #2
    8948:	f000 fa64 	bl	8e14 <_lseek_r>
    894c:	89a3      	ldrh	r3, [r4, #12]
    894e:	4a05      	ldr	r2, [pc, #20]	; (8964 <__swrite+0x34>)
    8950:	0028      	movs	r0, r5
    8952:	4013      	ands	r3, r2
    8954:	81a3      	strh	r3, [r4, #12]
    8956:	0032      	movs	r2, r6
    8958:	230e      	movs	r3, #14
    895a:	5ee1      	ldrsh	r1, [r4, r3]
    895c:	003b      	movs	r3, r7
    895e:	f000 f9fd 	bl	8d5c <_write_r>
    8962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8964:	ffffefff 	.word	0xffffefff

00008968 <__sseek>:
    8968:	b570      	push	{r4, r5, r6, lr}
    896a:	000c      	movs	r4, r1
    896c:	250e      	movs	r5, #14
    896e:	5f49      	ldrsh	r1, [r1, r5]
    8970:	f000 fa50 	bl	8e14 <_lseek_r>
    8974:	89a3      	ldrh	r3, [r4, #12]
    8976:	1c42      	adds	r2, r0, #1
    8978:	d103      	bne.n	8982 <__sseek+0x1a>
    897a:	4a05      	ldr	r2, [pc, #20]	; (8990 <__sseek+0x28>)
    897c:	4013      	ands	r3, r2
    897e:	81a3      	strh	r3, [r4, #12]
    8980:	bd70      	pop	{r4, r5, r6, pc}
    8982:	2280      	movs	r2, #128	; 0x80
    8984:	0152      	lsls	r2, r2, #5
    8986:	4313      	orrs	r3, r2
    8988:	81a3      	strh	r3, [r4, #12]
    898a:	6560      	str	r0, [r4, #84]	; 0x54
    898c:	e7f8      	b.n	8980 <__sseek+0x18>
    898e:	46c0      	nop			; (mov r8, r8)
    8990:	ffffefff 	.word	0xffffefff

00008994 <__sclose>:
    8994:	b510      	push	{r4, lr}
    8996:	230e      	movs	r3, #14
    8998:	5ec9      	ldrsh	r1, [r1, r3]
    899a:	f000 f9f3 	bl	8d84 <_close_r>
    899e:	bd10      	pop	{r4, pc}

000089a0 <_strtol_l.isra.0>:
    89a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89a2:	001f      	movs	r7, r3
    89a4:	000e      	movs	r6, r1
    89a6:	b087      	sub	sp, #28
    89a8:	9005      	str	r0, [sp, #20]
    89aa:	9103      	str	r1, [sp, #12]
    89ac:	9202      	str	r2, [sp, #8]
    89ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    89b0:	7834      	ldrb	r4, [r6, #0]
    89b2:	f000 fa1d 	bl	8df0 <__locale_ctype_ptr_l>
    89b6:	2208      	movs	r2, #8
    89b8:	1900      	adds	r0, r0, r4
    89ba:	7843      	ldrb	r3, [r0, #1]
    89bc:	1c75      	adds	r5, r6, #1
    89be:	4013      	ands	r3, r2
    89c0:	d10c      	bne.n	89dc <_strtol_l.isra.0+0x3c>
    89c2:	2c2d      	cmp	r4, #45	; 0x2d
    89c4:	d10c      	bne.n	89e0 <_strtol_l.isra.0+0x40>
    89c6:	3301      	adds	r3, #1
    89c8:	782c      	ldrb	r4, [r5, #0]
    89ca:	9301      	str	r3, [sp, #4]
    89cc:	1cb5      	adds	r5, r6, #2
    89ce:	2f00      	cmp	r7, #0
    89d0:	d00c      	beq.n	89ec <_strtol_l.isra.0+0x4c>
    89d2:	2f10      	cmp	r7, #16
    89d4:	d114      	bne.n	8a00 <_strtol_l.isra.0+0x60>
    89d6:	2c30      	cmp	r4, #48	; 0x30
    89d8:	d00a      	beq.n	89f0 <_strtol_l.isra.0+0x50>
    89da:	e011      	b.n	8a00 <_strtol_l.isra.0+0x60>
    89dc:	002e      	movs	r6, r5
    89de:	e7e6      	b.n	89ae <_strtol_l.isra.0+0xe>
    89e0:	9301      	str	r3, [sp, #4]
    89e2:	2c2b      	cmp	r4, #43	; 0x2b
    89e4:	d1f3      	bne.n	89ce <_strtol_l.isra.0+0x2e>
    89e6:	782c      	ldrb	r4, [r5, #0]
    89e8:	1cb5      	adds	r5, r6, #2
    89ea:	e7f0      	b.n	89ce <_strtol_l.isra.0+0x2e>
    89ec:	2c30      	cmp	r4, #48	; 0x30
    89ee:	d12f      	bne.n	8a50 <_strtol_l.isra.0+0xb0>
    89f0:	2220      	movs	r2, #32
    89f2:	782b      	ldrb	r3, [r5, #0]
    89f4:	4393      	bics	r3, r2
    89f6:	2b58      	cmp	r3, #88	; 0x58
    89f8:	d151      	bne.n	8a9e <_strtol_l.isra.0+0xfe>
    89fa:	2710      	movs	r7, #16
    89fc:	786c      	ldrb	r4, [r5, #1]
    89fe:	3502      	adds	r5, #2
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	4a29      	ldr	r2, [pc, #164]	; (8aa8 <_strtol_l.isra.0+0x108>)
    8a04:	0039      	movs	r1, r7
    8a06:	189e      	adds	r6, r3, r2
    8a08:	0030      	movs	r0, r6
    8a0a:	f7fe f863 	bl	6ad4 <__aeabi_uidivmod>
    8a0e:	0030      	movs	r0, r6
    8a10:	9104      	str	r1, [sp, #16]
    8a12:	0039      	movs	r1, r7
    8a14:	f7fd ffd8 	bl	69c8 <__udivsi3>
    8a18:	2101      	movs	r1, #1
    8a1a:	2300      	movs	r3, #0
    8a1c:	4249      	negs	r1, r1
    8a1e:	0002      	movs	r2, r0
    8a20:	468c      	mov	ip, r1
    8a22:	0018      	movs	r0, r3
    8a24:	0021      	movs	r1, r4
    8a26:	3930      	subs	r1, #48	; 0x30
    8a28:	2909      	cmp	r1, #9
    8a2a:	d813      	bhi.n	8a54 <_strtol_l.isra.0+0xb4>
    8a2c:	000c      	movs	r4, r1
    8a2e:	42a7      	cmp	r7, r4
    8a30:	dd1c      	ble.n	8a6c <_strtol_l.isra.0+0xcc>
    8a32:	1c59      	adds	r1, r3, #1
    8a34:	d009      	beq.n	8a4a <_strtol_l.isra.0+0xaa>
    8a36:	4663      	mov	r3, ip
    8a38:	4282      	cmp	r2, r0
    8a3a:	d306      	bcc.n	8a4a <_strtol_l.isra.0+0xaa>
    8a3c:	d102      	bne.n	8a44 <_strtol_l.isra.0+0xa4>
    8a3e:	9904      	ldr	r1, [sp, #16]
    8a40:	42a1      	cmp	r1, r4
    8a42:	db02      	blt.n	8a4a <_strtol_l.isra.0+0xaa>
    8a44:	2301      	movs	r3, #1
    8a46:	4378      	muls	r0, r7
    8a48:	1820      	adds	r0, r4, r0
    8a4a:	782c      	ldrb	r4, [r5, #0]
    8a4c:	3501      	adds	r5, #1
    8a4e:	e7e9      	b.n	8a24 <_strtol_l.isra.0+0x84>
    8a50:	270a      	movs	r7, #10
    8a52:	e7d5      	b.n	8a00 <_strtol_l.isra.0+0x60>
    8a54:	0021      	movs	r1, r4
    8a56:	3941      	subs	r1, #65	; 0x41
    8a58:	2919      	cmp	r1, #25
    8a5a:	d801      	bhi.n	8a60 <_strtol_l.isra.0+0xc0>
    8a5c:	3c37      	subs	r4, #55	; 0x37
    8a5e:	e7e6      	b.n	8a2e <_strtol_l.isra.0+0x8e>
    8a60:	0021      	movs	r1, r4
    8a62:	3961      	subs	r1, #97	; 0x61
    8a64:	2919      	cmp	r1, #25
    8a66:	d801      	bhi.n	8a6c <_strtol_l.isra.0+0xcc>
    8a68:	3c57      	subs	r4, #87	; 0x57
    8a6a:	e7e0      	b.n	8a2e <_strtol_l.isra.0+0x8e>
    8a6c:	1c5a      	adds	r2, r3, #1
    8a6e:	d108      	bne.n	8a82 <_strtol_l.isra.0+0xe2>
    8a70:	9a05      	ldr	r2, [sp, #20]
    8a72:	3323      	adds	r3, #35	; 0x23
    8a74:	6013      	str	r3, [r2, #0]
    8a76:	9b02      	ldr	r3, [sp, #8]
    8a78:	0030      	movs	r0, r6
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	d10b      	bne.n	8a96 <_strtol_l.isra.0+0xf6>
    8a7e:	b007      	add	sp, #28
    8a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a82:	9a01      	ldr	r2, [sp, #4]
    8a84:	2a00      	cmp	r2, #0
    8a86:	d000      	beq.n	8a8a <_strtol_l.isra.0+0xea>
    8a88:	4240      	negs	r0, r0
    8a8a:	9a02      	ldr	r2, [sp, #8]
    8a8c:	2a00      	cmp	r2, #0
    8a8e:	d0f6      	beq.n	8a7e <_strtol_l.isra.0+0xde>
    8a90:	9a03      	ldr	r2, [sp, #12]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d000      	beq.n	8a98 <_strtol_l.isra.0+0xf8>
    8a96:	1e6a      	subs	r2, r5, #1
    8a98:	9b02      	ldr	r3, [sp, #8]
    8a9a:	601a      	str	r2, [r3, #0]
    8a9c:	e7ef      	b.n	8a7e <_strtol_l.isra.0+0xde>
    8a9e:	2430      	movs	r4, #48	; 0x30
    8aa0:	2f00      	cmp	r7, #0
    8aa2:	d1ad      	bne.n	8a00 <_strtol_l.isra.0+0x60>
    8aa4:	3708      	adds	r7, #8
    8aa6:	e7ab      	b.n	8a00 <_strtol_l.isra.0+0x60>
    8aa8:	7fffffff 	.word	0x7fffffff

00008aac <_strtol_r>:
    8aac:	b513      	push	{r0, r1, r4, lr}
    8aae:	4c05      	ldr	r4, [pc, #20]	; (8ac4 <_strtol_r+0x18>)
    8ab0:	6824      	ldr	r4, [r4, #0]
    8ab2:	6a24      	ldr	r4, [r4, #32]
    8ab4:	2c00      	cmp	r4, #0
    8ab6:	d100      	bne.n	8aba <_strtol_r+0xe>
    8ab8:	4c03      	ldr	r4, [pc, #12]	; (8ac8 <_strtol_r+0x1c>)
    8aba:	9400      	str	r4, [sp, #0]
    8abc:	f7ff ff70 	bl	89a0 <_strtol_l.isra.0>
    8ac0:	bd16      	pop	{r1, r2, r4, pc}
    8ac2:	46c0      	nop			; (mov r8, r8)
    8ac4:	2000000c 	.word	0x2000000c
    8ac8:	20000070 	.word	0x20000070

00008acc <_strtoul_l.isra.0>:
    8acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ace:	001f      	movs	r7, r3
    8ad0:	000e      	movs	r6, r1
    8ad2:	b087      	sub	sp, #28
    8ad4:	9005      	str	r0, [sp, #20]
    8ad6:	9103      	str	r1, [sp, #12]
    8ad8:	9201      	str	r2, [sp, #4]
    8ada:	980c      	ldr	r0, [sp, #48]	; 0x30
    8adc:	7834      	ldrb	r4, [r6, #0]
    8ade:	f000 f987 	bl	8df0 <__locale_ctype_ptr_l>
    8ae2:	2208      	movs	r2, #8
    8ae4:	1900      	adds	r0, r0, r4
    8ae6:	7843      	ldrb	r3, [r0, #1]
    8ae8:	1c75      	adds	r5, r6, #1
    8aea:	4013      	ands	r3, r2
    8aec:	d10c      	bne.n	8b08 <_strtoul_l.isra.0+0x3c>
    8aee:	2c2d      	cmp	r4, #45	; 0x2d
    8af0:	d10c      	bne.n	8b0c <_strtoul_l.isra.0+0x40>
    8af2:	3301      	adds	r3, #1
    8af4:	782c      	ldrb	r4, [r5, #0]
    8af6:	9302      	str	r3, [sp, #8]
    8af8:	1cb5      	adds	r5, r6, #2
    8afa:	2f00      	cmp	r7, #0
    8afc:	d00c      	beq.n	8b18 <_strtoul_l.isra.0+0x4c>
    8afe:	2f10      	cmp	r7, #16
    8b00:	d114      	bne.n	8b2c <_strtoul_l.isra.0+0x60>
    8b02:	2c30      	cmp	r4, #48	; 0x30
    8b04:	d00a      	beq.n	8b1c <_strtoul_l.isra.0+0x50>
    8b06:	e011      	b.n	8b2c <_strtoul_l.isra.0+0x60>
    8b08:	002e      	movs	r6, r5
    8b0a:	e7e6      	b.n	8ada <_strtoul_l.isra.0+0xe>
    8b0c:	9302      	str	r3, [sp, #8]
    8b0e:	2c2b      	cmp	r4, #43	; 0x2b
    8b10:	d1f3      	bne.n	8afa <_strtoul_l.isra.0+0x2e>
    8b12:	782c      	ldrb	r4, [r5, #0]
    8b14:	1cb5      	adds	r5, r6, #2
    8b16:	e7f0      	b.n	8afa <_strtoul_l.isra.0+0x2e>
    8b18:	2c30      	cmp	r4, #48	; 0x30
    8b1a:	d12f      	bne.n	8b7c <_strtoul_l.isra.0+0xb0>
    8b1c:	2220      	movs	r2, #32
    8b1e:	782b      	ldrb	r3, [r5, #0]
    8b20:	4393      	bics	r3, r2
    8b22:	2b58      	cmp	r3, #88	; 0x58
    8b24:	d154      	bne.n	8bd0 <_strtoul_l.isra.0+0x104>
    8b26:	2710      	movs	r7, #16
    8b28:	786c      	ldrb	r4, [r5, #1]
    8b2a:	3502      	adds	r5, #2
    8b2c:	2001      	movs	r0, #1
    8b2e:	0039      	movs	r1, r7
    8b30:	4240      	negs	r0, r0
    8b32:	f7fd ff49 	bl	69c8 <__udivsi3>
    8b36:	0006      	movs	r6, r0
    8b38:	2001      	movs	r0, #1
    8b3a:	0039      	movs	r1, r7
    8b3c:	4240      	negs	r0, r0
    8b3e:	f7fd ffc9 	bl	6ad4 <__aeabi_uidivmod>
    8b42:	2300      	movs	r3, #0
    8b44:	9104      	str	r1, [sp, #16]
    8b46:	2101      	movs	r1, #1
    8b48:	2201      	movs	r2, #1
    8b4a:	0018      	movs	r0, r3
    8b4c:	468c      	mov	ip, r1
    8b4e:	4252      	negs	r2, r2
    8b50:	0021      	movs	r1, r4
    8b52:	3930      	subs	r1, #48	; 0x30
    8b54:	2909      	cmp	r1, #9
    8b56:	d813      	bhi.n	8b80 <_strtoul_l.isra.0+0xb4>
    8b58:	000c      	movs	r4, r1
    8b5a:	42a7      	cmp	r7, r4
    8b5c:	dd1e      	ble.n	8b9c <_strtoul_l.isra.0+0xd0>
    8b5e:	2b00      	cmp	r3, #0
    8b60:	db1a      	blt.n	8b98 <_strtoul_l.isra.0+0xcc>
    8b62:	0013      	movs	r3, r2
    8b64:	4286      	cmp	r6, r0
    8b66:	d306      	bcc.n	8b76 <_strtoul_l.isra.0+0xaa>
    8b68:	d102      	bne.n	8b70 <_strtoul_l.isra.0+0xa4>
    8b6a:	9904      	ldr	r1, [sp, #16]
    8b6c:	42a1      	cmp	r1, r4
    8b6e:	db02      	blt.n	8b76 <_strtoul_l.isra.0+0xaa>
    8b70:	4663      	mov	r3, ip
    8b72:	4378      	muls	r0, r7
    8b74:	1820      	adds	r0, r4, r0
    8b76:	782c      	ldrb	r4, [r5, #0]
    8b78:	3501      	adds	r5, #1
    8b7a:	e7e9      	b.n	8b50 <_strtoul_l.isra.0+0x84>
    8b7c:	270a      	movs	r7, #10
    8b7e:	e7d5      	b.n	8b2c <_strtoul_l.isra.0+0x60>
    8b80:	0021      	movs	r1, r4
    8b82:	3941      	subs	r1, #65	; 0x41
    8b84:	2919      	cmp	r1, #25
    8b86:	d801      	bhi.n	8b8c <_strtoul_l.isra.0+0xc0>
    8b88:	3c37      	subs	r4, #55	; 0x37
    8b8a:	e7e6      	b.n	8b5a <_strtoul_l.isra.0+0x8e>
    8b8c:	0021      	movs	r1, r4
    8b8e:	3961      	subs	r1, #97	; 0x61
    8b90:	2919      	cmp	r1, #25
    8b92:	d803      	bhi.n	8b9c <_strtoul_l.isra.0+0xd0>
    8b94:	3c57      	subs	r4, #87	; 0x57
    8b96:	e7e0      	b.n	8b5a <_strtoul_l.isra.0+0x8e>
    8b98:	0013      	movs	r3, r2
    8b9a:	e7ec      	b.n	8b76 <_strtoul_l.isra.0+0xaa>
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	da09      	bge.n	8bb4 <_strtoul_l.isra.0+0xe8>
    8ba0:	2322      	movs	r3, #34	; 0x22
    8ba2:	2001      	movs	r0, #1
    8ba4:	9a05      	ldr	r2, [sp, #20]
    8ba6:	4240      	negs	r0, r0
    8ba8:	6013      	str	r3, [r2, #0]
    8baa:	9b01      	ldr	r3, [sp, #4]
    8bac:	2b00      	cmp	r3, #0
    8bae:	d10b      	bne.n	8bc8 <_strtoul_l.isra.0+0xfc>
    8bb0:	b007      	add	sp, #28
    8bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bb4:	9a02      	ldr	r2, [sp, #8]
    8bb6:	2a00      	cmp	r2, #0
    8bb8:	d000      	beq.n	8bbc <_strtoul_l.isra.0+0xf0>
    8bba:	4240      	negs	r0, r0
    8bbc:	9a01      	ldr	r2, [sp, #4]
    8bbe:	2a00      	cmp	r2, #0
    8bc0:	d0f6      	beq.n	8bb0 <_strtoul_l.isra.0+0xe4>
    8bc2:	9a03      	ldr	r2, [sp, #12]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d000      	beq.n	8bca <_strtoul_l.isra.0+0xfe>
    8bc8:	1e6a      	subs	r2, r5, #1
    8bca:	9b01      	ldr	r3, [sp, #4]
    8bcc:	601a      	str	r2, [r3, #0]
    8bce:	e7ef      	b.n	8bb0 <_strtoul_l.isra.0+0xe4>
    8bd0:	2430      	movs	r4, #48	; 0x30
    8bd2:	2f00      	cmp	r7, #0
    8bd4:	d1aa      	bne.n	8b2c <_strtoul_l.isra.0+0x60>
    8bd6:	3708      	adds	r7, #8
    8bd8:	e7a8      	b.n	8b2c <_strtoul_l.isra.0+0x60>
	...

00008bdc <_strtoul_r>:
    8bdc:	b513      	push	{r0, r1, r4, lr}
    8bde:	4c05      	ldr	r4, [pc, #20]	; (8bf4 <_strtoul_r+0x18>)
    8be0:	6824      	ldr	r4, [r4, #0]
    8be2:	6a24      	ldr	r4, [r4, #32]
    8be4:	2c00      	cmp	r4, #0
    8be6:	d100      	bne.n	8bea <_strtoul_r+0xe>
    8be8:	4c03      	ldr	r4, [pc, #12]	; (8bf8 <_strtoul_r+0x1c>)
    8bea:	9400      	str	r4, [sp, #0]
    8bec:	f7ff ff6e 	bl	8acc <_strtoul_l.isra.0>
    8bf0:	bd16      	pop	{r1, r2, r4, pc}
    8bf2:	46c0      	nop			; (mov r8, r8)
    8bf4:	2000000c 	.word	0x2000000c
    8bf8:	20000070 	.word	0x20000070

00008bfc <__submore>:
    8bfc:	000b      	movs	r3, r1
    8bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8c00:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    8c02:	3344      	adds	r3, #68	; 0x44
    8c04:	000c      	movs	r4, r1
    8c06:	429d      	cmp	r5, r3
    8c08:	d11c      	bne.n	8c44 <__submore+0x48>
    8c0a:	2680      	movs	r6, #128	; 0x80
    8c0c:	00f6      	lsls	r6, r6, #3
    8c0e:	0031      	movs	r1, r6
    8c10:	f7fe f916 	bl	6e40 <_malloc_r>
    8c14:	2800      	cmp	r0, #0
    8c16:	d102      	bne.n	8c1e <__submore+0x22>
    8c18:	2001      	movs	r0, #1
    8c1a:	4240      	negs	r0, r0
    8c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c1e:	0023      	movs	r3, r4
    8c20:	6360      	str	r0, [r4, #52]	; 0x34
    8c22:	63a6      	str	r6, [r4, #56]	; 0x38
    8c24:	3346      	adds	r3, #70	; 0x46
    8c26:	781a      	ldrb	r2, [r3, #0]
    8c28:	4b10      	ldr	r3, [pc, #64]	; (8c6c <__submore+0x70>)
    8c2a:	54c2      	strb	r2, [r0, r3]
    8c2c:	0023      	movs	r3, r4
    8c2e:	3345      	adds	r3, #69	; 0x45
    8c30:	781a      	ldrb	r2, [r3, #0]
    8c32:	4b0f      	ldr	r3, [pc, #60]	; (8c70 <__submore+0x74>)
    8c34:	54c2      	strb	r2, [r0, r3]
    8c36:	782a      	ldrb	r2, [r5, #0]
    8c38:	4b0e      	ldr	r3, [pc, #56]	; (8c74 <__submore+0x78>)
    8c3a:	54c2      	strb	r2, [r0, r3]
    8c3c:	18c0      	adds	r0, r0, r3
    8c3e:	6020      	str	r0, [r4, #0]
    8c40:	2000      	movs	r0, #0
    8c42:	e7eb      	b.n	8c1c <__submore+0x20>
    8c44:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    8c46:	0029      	movs	r1, r5
    8c48:	0073      	lsls	r3, r6, #1
    8c4a:	001a      	movs	r2, r3
    8c4c:	9301      	str	r3, [sp, #4]
    8c4e:	f000 f912 	bl	8e76 <_realloc_r>
    8c52:	1e05      	subs	r5, r0, #0
    8c54:	d0e0      	beq.n	8c18 <__submore+0x1c>
    8c56:	1987      	adds	r7, r0, r6
    8c58:	0001      	movs	r1, r0
    8c5a:	0032      	movs	r2, r6
    8c5c:	0038      	movs	r0, r7
    8c5e:	f7fe f881 	bl	6d64 <memcpy>
    8c62:	9b01      	ldr	r3, [sp, #4]
    8c64:	6027      	str	r7, [r4, #0]
    8c66:	6365      	str	r5, [r4, #52]	; 0x34
    8c68:	63a3      	str	r3, [r4, #56]	; 0x38
    8c6a:	e7e9      	b.n	8c40 <__submore+0x44>
    8c6c:	000003ff 	.word	0x000003ff
    8c70:	000003fe 	.word	0x000003fe
    8c74:	000003fd 	.word	0x000003fd

00008c78 <_ungetc_r>:
    8c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c7a:	0005      	movs	r5, r0
    8c7c:	000e      	movs	r6, r1
    8c7e:	0014      	movs	r4, r2
    8c80:	1c4b      	adds	r3, r1, #1
    8c82:	d103      	bne.n	8c8c <_ungetc_r+0x14>
    8c84:	2601      	movs	r6, #1
    8c86:	4276      	negs	r6, r6
    8c88:	0030      	movs	r0, r6
    8c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c8c:	2800      	cmp	r0, #0
    8c8e:	d004      	beq.n	8c9a <_ungetc_r+0x22>
    8c90:	6983      	ldr	r3, [r0, #24]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d101      	bne.n	8c9a <_ungetc_r+0x22>
    8c96:	f7fe fccf 	bl	7638 <__sinit>
    8c9a:	4b2d      	ldr	r3, [pc, #180]	; (8d50 <_ungetc_r+0xd8>)
    8c9c:	429c      	cmp	r4, r3
    8c9e:	d12d      	bne.n	8cfc <_ungetc_r+0x84>
    8ca0:	686c      	ldr	r4, [r5, #4]
    8ca2:	2220      	movs	r2, #32
    8ca4:	89a3      	ldrh	r3, [r4, #12]
    8ca6:	4393      	bics	r3, r2
    8ca8:	b21b      	sxth	r3, r3
    8caa:	81a3      	strh	r3, [r4, #12]
    8cac:	b29b      	uxth	r3, r3
    8cae:	075a      	lsls	r2, r3, #29
    8cb0:	d413      	bmi.n	8cda <_ungetc_r+0x62>
    8cb2:	06da      	lsls	r2, r3, #27
    8cb4:	d5e6      	bpl.n	8c84 <_ungetc_r+0xc>
    8cb6:	2708      	movs	r7, #8
    8cb8:	423b      	tst	r3, r7
    8cba:	d00a      	beq.n	8cd2 <_ungetc_r+0x5a>
    8cbc:	0021      	movs	r1, r4
    8cbe:	0028      	movs	r0, r5
    8cc0:	f7fe fc38 	bl	7534 <_fflush_r>
    8cc4:	2800      	cmp	r0, #0
    8cc6:	d1dd      	bne.n	8c84 <_ungetc_r+0xc>
    8cc8:	89a3      	ldrh	r3, [r4, #12]
    8cca:	60a0      	str	r0, [r4, #8]
    8ccc:	43bb      	bics	r3, r7
    8cce:	81a3      	strh	r3, [r4, #12]
    8cd0:	61a0      	str	r0, [r4, #24]
    8cd2:	2304      	movs	r3, #4
    8cd4:	89a2      	ldrh	r2, [r4, #12]
    8cd6:	4313      	orrs	r3, r2
    8cd8:	81a3      	strh	r3, [r4, #12]
    8cda:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8cdc:	b2f7      	uxtb	r7, r6
    8cde:	6863      	ldr	r3, [r4, #4]
    8ce0:	b2f6      	uxtb	r6, r6
    8ce2:	2a00      	cmp	r2, #0
    8ce4:	d01b      	beq.n	8d1e <_ungetc_r+0xa6>
    8ce6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8ce8:	4293      	cmp	r3, r2
    8cea:	da11      	bge.n	8d10 <_ungetc_r+0x98>
    8cec:	6823      	ldr	r3, [r4, #0]
    8cee:	3b01      	subs	r3, #1
    8cf0:	6023      	str	r3, [r4, #0]
    8cf2:	701f      	strb	r7, [r3, #0]
    8cf4:	6863      	ldr	r3, [r4, #4]
    8cf6:	3301      	adds	r3, #1
    8cf8:	6063      	str	r3, [r4, #4]
    8cfa:	e7c5      	b.n	8c88 <_ungetc_r+0x10>
    8cfc:	4b15      	ldr	r3, [pc, #84]	; (8d54 <_ungetc_r+0xdc>)
    8cfe:	429c      	cmp	r4, r3
    8d00:	d101      	bne.n	8d06 <_ungetc_r+0x8e>
    8d02:	68ac      	ldr	r4, [r5, #8]
    8d04:	e7cd      	b.n	8ca2 <_ungetc_r+0x2a>
    8d06:	4b14      	ldr	r3, [pc, #80]	; (8d58 <_ungetc_r+0xe0>)
    8d08:	429c      	cmp	r4, r3
    8d0a:	d1ca      	bne.n	8ca2 <_ungetc_r+0x2a>
    8d0c:	68ec      	ldr	r4, [r5, #12]
    8d0e:	e7c8      	b.n	8ca2 <_ungetc_r+0x2a>
    8d10:	0021      	movs	r1, r4
    8d12:	0028      	movs	r0, r5
    8d14:	f7ff ff72 	bl	8bfc <__submore>
    8d18:	2800      	cmp	r0, #0
    8d1a:	d0e7      	beq.n	8cec <_ungetc_r+0x74>
    8d1c:	e7b2      	b.n	8c84 <_ungetc_r+0xc>
    8d1e:	6921      	ldr	r1, [r4, #16]
    8d20:	6822      	ldr	r2, [r4, #0]
    8d22:	2900      	cmp	r1, #0
    8d24:	d007      	beq.n	8d36 <_ungetc_r+0xbe>
    8d26:	4291      	cmp	r1, r2
    8d28:	d205      	bcs.n	8d36 <_ungetc_r+0xbe>
    8d2a:	1e51      	subs	r1, r2, #1
    8d2c:	7808      	ldrb	r0, [r1, #0]
    8d2e:	4286      	cmp	r6, r0
    8d30:	d101      	bne.n	8d36 <_ungetc_r+0xbe>
    8d32:	6021      	str	r1, [r4, #0]
    8d34:	e7df      	b.n	8cf6 <_ungetc_r+0x7e>
    8d36:	6423      	str	r3, [r4, #64]	; 0x40
    8d38:	0023      	movs	r3, r4
    8d3a:	3344      	adds	r3, #68	; 0x44
    8d3c:	6363      	str	r3, [r4, #52]	; 0x34
    8d3e:	2303      	movs	r3, #3
    8d40:	63a3      	str	r3, [r4, #56]	; 0x38
    8d42:	0023      	movs	r3, r4
    8d44:	3346      	adds	r3, #70	; 0x46
    8d46:	63e2      	str	r2, [r4, #60]	; 0x3c
    8d48:	701f      	strb	r7, [r3, #0]
    8d4a:	6023      	str	r3, [r4, #0]
    8d4c:	2301      	movs	r3, #1
    8d4e:	e7d3      	b.n	8cf8 <_ungetc_r+0x80>
    8d50:	0000a08c 	.word	0x0000a08c
    8d54:	0000a0ac 	.word	0x0000a0ac
    8d58:	0000a06c 	.word	0x0000a06c

00008d5c <_write_r>:
    8d5c:	b570      	push	{r4, r5, r6, lr}
    8d5e:	0005      	movs	r5, r0
    8d60:	0008      	movs	r0, r1
    8d62:	0011      	movs	r1, r2
    8d64:	2200      	movs	r2, #0
    8d66:	4c06      	ldr	r4, [pc, #24]	; (8d80 <_write_r+0x24>)
    8d68:	6022      	str	r2, [r4, #0]
    8d6a:	001a      	movs	r2, r3
    8d6c:	f7fc fb10 	bl	5390 <_write>
    8d70:	1c43      	adds	r3, r0, #1
    8d72:	d103      	bne.n	8d7c <_write_r+0x20>
    8d74:	6823      	ldr	r3, [r4, #0]
    8d76:	2b00      	cmp	r3, #0
    8d78:	d000      	beq.n	8d7c <_write_r+0x20>
    8d7a:	602b      	str	r3, [r5, #0]
    8d7c:	bd70      	pop	{r4, r5, r6, pc}
    8d7e:	46c0      	nop			; (mov r8, r8)
    8d80:	20000620 	.word	0x20000620

00008d84 <_close_r>:
    8d84:	2300      	movs	r3, #0
    8d86:	b570      	push	{r4, r5, r6, lr}
    8d88:	4c06      	ldr	r4, [pc, #24]	; (8da4 <_close_r+0x20>)
    8d8a:	0005      	movs	r5, r0
    8d8c:	0008      	movs	r0, r1
    8d8e:	6023      	str	r3, [r4, #0]
    8d90:	f7fc fb38 	bl	5404 <_close>
    8d94:	1c43      	adds	r3, r0, #1
    8d96:	d103      	bne.n	8da0 <_close_r+0x1c>
    8d98:	6823      	ldr	r3, [r4, #0]
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d000      	beq.n	8da0 <_close_r+0x1c>
    8d9e:	602b      	str	r3, [r5, #0]
    8da0:	bd70      	pop	{r4, r5, r6, pc}
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	20000620 	.word	0x20000620

00008da8 <_fstat_r>:
    8da8:	2300      	movs	r3, #0
    8daa:	b570      	push	{r4, r5, r6, lr}
    8dac:	4c06      	ldr	r4, [pc, #24]	; (8dc8 <_fstat_r+0x20>)
    8dae:	0005      	movs	r5, r0
    8db0:	0008      	movs	r0, r1
    8db2:	0011      	movs	r1, r2
    8db4:	6023      	str	r3, [r4, #0]
    8db6:	f7fc fb28 	bl	540a <_fstat>
    8dba:	1c43      	adds	r3, r0, #1
    8dbc:	d103      	bne.n	8dc6 <_fstat_r+0x1e>
    8dbe:	6823      	ldr	r3, [r4, #0]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d000      	beq.n	8dc6 <_fstat_r+0x1e>
    8dc4:	602b      	str	r3, [r5, #0]
    8dc6:	bd70      	pop	{r4, r5, r6, pc}
    8dc8:	20000620 	.word	0x20000620

00008dcc <_isatty_r>:
    8dcc:	2300      	movs	r3, #0
    8dce:	b570      	push	{r4, r5, r6, lr}
    8dd0:	4c06      	ldr	r4, [pc, #24]	; (8dec <_isatty_r+0x20>)
    8dd2:	0005      	movs	r5, r0
    8dd4:	0008      	movs	r0, r1
    8dd6:	6023      	str	r3, [r4, #0]
    8dd8:	f7fc fb1c 	bl	5414 <_isatty>
    8ddc:	1c43      	adds	r3, r0, #1
    8dde:	d103      	bne.n	8de8 <_isatty_r+0x1c>
    8de0:	6823      	ldr	r3, [r4, #0]
    8de2:	2b00      	cmp	r3, #0
    8de4:	d000      	beq.n	8de8 <_isatty_r+0x1c>
    8de6:	602b      	str	r3, [r5, #0]
    8de8:	bd70      	pop	{r4, r5, r6, pc}
    8dea:	46c0      	nop			; (mov r8, r8)
    8dec:	20000620 	.word	0x20000620

00008df0 <__locale_ctype_ptr_l>:
    8df0:	30ec      	adds	r0, #236	; 0xec
    8df2:	6800      	ldr	r0, [r0, #0]
    8df4:	4770      	bx	lr
	...

00008df8 <__locale_ctype_ptr>:
    8df8:	4b04      	ldr	r3, [pc, #16]	; (8e0c <__locale_ctype_ptr+0x14>)
    8dfa:	681b      	ldr	r3, [r3, #0]
    8dfc:	6a1b      	ldr	r3, [r3, #32]
    8dfe:	2b00      	cmp	r3, #0
    8e00:	d100      	bne.n	8e04 <__locale_ctype_ptr+0xc>
    8e02:	4b03      	ldr	r3, [pc, #12]	; (8e10 <__locale_ctype_ptr+0x18>)
    8e04:	33ec      	adds	r3, #236	; 0xec
    8e06:	6818      	ldr	r0, [r3, #0]
    8e08:	4770      	bx	lr
    8e0a:	46c0      	nop			; (mov r8, r8)
    8e0c:	2000000c 	.word	0x2000000c
    8e10:	20000070 	.word	0x20000070

00008e14 <_lseek_r>:
    8e14:	b570      	push	{r4, r5, r6, lr}
    8e16:	0005      	movs	r5, r0
    8e18:	0008      	movs	r0, r1
    8e1a:	0011      	movs	r1, r2
    8e1c:	2200      	movs	r2, #0
    8e1e:	4c06      	ldr	r4, [pc, #24]	; (8e38 <_lseek_r+0x24>)
    8e20:	6022      	str	r2, [r4, #0]
    8e22:	001a      	movs	r2, r3
    8e24:	f7fc faf8 	bl	5418 <_lseek>
    8e28:	1c43      	adds	r3, r0, #1
    8e2a:	d103      	bne.n	8e34 <_lseek_r+0x20>
    8e2c:	6823      	ldr	r3, [r4, #0]
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d000      	beq.n	8e34 <_lseek_r+0x20>
    8e32:	602b      	str	r3, [r5, #0]
    8e34:	bd70      	pop	{r4, r5, r6, pc}
    8e36:	46c0      	nop			; (mov r8, r8)
    8e38:	20000620 	.word	0x20000620

00008e3c <__ascii_mbtowc>:
    8e3c:	b082      	sub	sp, #8
    8e3e:	2900      	cmp	r1, #0
    8e40:	d100      	bne.n	8e44 <__ascii_mbtowc+0x8>
    8e42:	a901      	add	r1, sp, #4
    8e44:	1e10      	subs	r0, r2, #0
    8e46:	d006      	beq.n	8e56 <__ascii_mbtowc+0x1a>
    8e48:	2b00      	cmp	r3, #0
    8e4a:	d006      	beq.n	8e5a <__ascii_mbtowc+0x1e>
    8e4c:	7813      	ldrb	r3, [r2, #0]
    8e4e:	600b      	str	r3, [r1, #0]
    8e50:	7810      	ldrb	r0, [r2, #0]
    8e52:	1e43      	subs	r3, r0, #1
    8e54:	4198      	sbcs	r0, r3
    8e56:	b002      	add	sp, #8
    8e58:	4770      	bx	lr
    8e5a:	2002      	movs	r0, #2
    8e5c:	4240      	negs	r0, r0
    8e5e:	e7fa      	b.n	8e56 <__ascii_mbtowc+0x1a>

00008e60 <memchr>:
    8e60:	b2c9      	uxtb	r1, r1
    8e62:	1882      	adds	r2, r0, r2
    8e64:	4290      	cmp	r0, r2
    8e66:	d101      	bne.n	8e6c <memchr+0xc>
    8e68:	2000      	movs	r0, #0
    8e6a:	4770      	bx	lr
    8e6c:	7803      	ldrb	r3, [r0, #0]
    8e6e:	428b      	cmp	r3, r1
    8e70:	d0fb      	beq.n	8e6a <memchr+0xa>
    8e72:	3001      	adds	r0, #1
    8e74:	e7f6      	b.n	8e64 <memchr+0x4>

00008e76 <_realloc_r>:
    8e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e78:	0007      	movs	r7, r0
    8e7a:	000d      	movs	r5, r1
    8e7c:	0016      	movs	r6, r2
    8e7e:	2900      	cmp	r1, #0
    8e80:	d105      	bne.n	8e8e <_realloc_r+0x18>
    8e82:	0011      	movs	r1, r2
    8e84:	f7fd ffdc 	bl	6e40 <_malloc_r>
    8e88:	0004      	movs	r4, r0
    8e8a:	0020      	movs	r0, r4
    8e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e8e:	2a00      	cmp	r2, #0
    8e90:	d103      	bne.n	8e9a <_realloc_r+0x24>
    8e92:	f7fd ff8b 	bl	6dac <_free_r>
    8e96:	0034      	movs	r4, r6
    8e98:	e7f7      	b.n	8e8a <_realloc_r+0x14>
    8e9a:	f000 f833 	bl	8f04 <_malloc_usable_size_r>
    8e9e:	002c      	movs	r4, r5
    8ea0:	4286      	cmp	r6, r0
    8ea2:	d9f2      	bls.n	8e8a <_realloc_r+0x14>
    8ea4:	0031      	movs	r1, r6
    8ea6:	0038      	movs	r0, r7
    8ea8:	f7fd ffca 	bl	6e40 <_malloc_r>
    8eac:	1e04      	subs	r4, r0, #0
    8eae:	d0ec      	beq.n	8e8a <_realloc_r+0x14>
    8eb0:	0029      	movs	r1, r5
    8eb2:	0032      	movs	r2, r6
    8eb4:	f7fd ff56 	bl	6d64 <memcpy>
    8eb8:	0029      	movs	r1, r5
    8eba:	0038      	movs	r0, r7
    8ebc:	f7fd ff76 	bl	6dac <_free_r>
    8ec0:	e7e3      	b.n	8e8a <_realloc_r+0x14>
	...

00008ec4 <_read_r>:
    8ec4:	b570      	push	{r4, r5, r6, lr}
    8ec6:	0005      	movs	r5, r0
    8ec8:	0008      	movs	r0, r1
    8eca:	0011      	movs	r1, r2
    8ecc:	2200      	movs	r2, #0
    8ece:	4c06      	ldr	r4, [pc, #24]	; (8ee8 <_read_r+0x24>)
    8ed0:	6022      	str	r2, [r4, #0]
    8ed2:	001a      	movs	r2, r3
    8ed4:	f7fc fa3a 	bl	534c <_read>
    8ed8:	1c43      	adds	r3, r0, #1
    8eda:	d103      	bne.n	8ee4 <_read_r+0x20>
    8edc:	6823      	ldr	r3, [r4, #0]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d000      	beq.n	8ee4 <_read_r+0x20>
    8ee2:	602b      	str	r3, [r5, #0]
    8ee4:	bd70      	pop	{r4, r5, r6, pc}
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	20000620 	.word	0x20000620

00008eec <__ascii_wctomb>:
    8eec:	1e0b      	subs	r3, r1, #0
    8eee:	d004      	beq.n	8efa <__ascii_wctomb+0xe>
    8ef0:	2aff      	cmp	r2, #255	; 0xff
    8ef2:	d904      	bls.n	8efe <__ascii_wctomb+0x12>
    8ef4:	238a      	movs	r3, #138	; 0x8a
    8ef6:	6003      	str	r3, [r0, #0]
    8ef8:	3b8b      	subs	r3, #139	; 0x8b
    8efa:	0018      	movs	r0, r3
    8efc:	4770      	bx	lr
    8efe:	700a      	strb	r2, [r1, #0]
    8f00:	2301      	movs	r3, #1
    8f02:	e7fa      	b.n	8efa <__ascii_wctomb+0xe>

00008f04 <_malloc_usable_size_r>:
    8f04:	1f0b      	subs	r3, r1, #4
    8f06:	681b      	ldr	r3, [r3, #0]
    8f08:	1f18      	subs	r0, r3, #4
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	da01      	bge.n	8f12 <_malloc_usable_size_r+0xe>
    8f0e:	580b      	ldr	r3, [r1, r0]
    8f10:	18c0      	adds	r0, r0, r3
    8f12:	4770      	bx	lr

00008f14 <__FUNCTION__.14021>:
    8f14:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    8f24:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    8f34:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    8f44:	746c 6320 646d 0000 0df0 0000 0dc0 0000     lt cmd..........
    8f54:	0db8 0000 0dd0 0000 0dc8 0000 0de8 0000     ................
    8f64:	0dd8 0000 0de0 0000                         ........

00008f6c <__FUNCTION__.13073>:
    8f6c:	6968 5f66 6573 646e 0000 0000               hif_send....

00008f78 <__FUNCTION__.13083>:
    8f78:	6968 5f66 7369 0072                         hif_isr.

00008f80 <__FUNCTION__.13089>:
    8f80:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00008f90 <__FUNCTION__.13101>:
    8f90:	6968 5f66 6572 6563 7669 0065               hif_receive.

00008f9c <__FUNCTION__.13117>:
    8f9c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    8fac:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    8fbc:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    8fcc:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    8fdc:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    8fec:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    8ffc:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    900c:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    901c:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    902c:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    903c:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    904c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    905c:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    906c:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    907c:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    908c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    909c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    90ac:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    90bc:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    90cc:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    90dc:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    90ec:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    90fc:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    910c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    911c:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    912c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    913c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    914c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    915c:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    916c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    917c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    918c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    919c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    91ac:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    91bc:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    91cc:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    91dc:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    91ec:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    91fc:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    920c:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    921c:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    922c:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    923c:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    924c:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    925c:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    926c:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    927c:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000928c <__FUNCTION__.13052>:
    928c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00009298 <__FUNCTION__.13081>:
    9298:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000092a8 <__FUNCTION__.13109>:
    92a8:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    92b8:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    92c8:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    92d8:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    92e8:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    92f8:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    9308:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    9318:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    9328:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    9338:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    9348:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    9358:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    9368:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    9378:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    9388:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    9398:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    93a8:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    93b8:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    93c8:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    93d8:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    93e8:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    93f8:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    9408:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    9418:	3032 313a 3a35 3330 0000 0000 7041 2072     20:15:03....Apr 
    9428:	3831 3220 3130 0038 7244 7669 7265 6220     18 2018.Driver b
    9438:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    9448:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    9458:	2065 6556 7372 6f69 006e 0000               e Version...

00009464 <__FUNCTION__.12915>:
    9464:	6863 7069 775f 6b61 0065 0000               chip_wake...

00009470 <__FUNCTION__.12964>:
    9470:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    9480:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    9490:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    94a0:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    94b0:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    94c0:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    94d0:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

000094e0 <__FUNCTION__.12962>:
    94e0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000094ec <__FUNCTION__.12969>:
    94ec:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    94fc:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    950c:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    951c:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    952c:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    953c:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    954c:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    955c:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    956c:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    957c:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    958c:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    959c:	4920 2044 6c25 0a78 0000 0000 1dd0 0000      ID %lx.........
    95ac:	1dd0 0000 1e00 0000 1d82 0000 1da6 0000     ................
    95bc:	1db4 0000 1de6 0000 1de6 0000 1e2e 0000     ................
    95cc:	1d66 0000 1e68 0000 1e68 0000 1e68 0000     f...h...h...h...
    95dc:	1e68 0000 1dc2 0000 c9c3 cac4               h...........

000095e8 <__FUNCTION__.12268>:
    95e8:	7073 5f69 6d63 0064                         spi_cmd.

000095f0 <__FUNCTION__.12275>:
    95f0:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00009600 <__FUNCTION__.12284>:
    9600:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000960c <__FUNCTION__.12300>:
    960c:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000961c <__FUNCTION__.12315>:
    961c:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000962c <__FUNCTION__.12327>:
    962c:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000963c <__FUNCTION__.12338>:
    963c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000964c <__FUNCTION__.12350>:
    964c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000965c <__FUNCTION__.12363>:
    965c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00009668 <__FUNCTION__.12384>:
    9668:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00009674 <crc7_syndrome_table>:
    9674:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    9684:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    9694:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    96a4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    96b4:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    96c4:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    96d4:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    96e4:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    96f4:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    9704:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    9714:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    9724:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    9734:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    9744:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    9754:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    9764:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    9774:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    9784:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    9794:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    97a4:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    97b4:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    97c4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    97d4:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    97e4:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    97f4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    9804:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    9814:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    9824:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    9834:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    9844:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    9854:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    9864:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    9874:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    9884:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    9894:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    98a4:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    98b4:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    98c4:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    98d4:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    98e4:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    98f4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    9904:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    9914:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    9924:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    9934:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    9944:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    9954:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    9964:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    9974:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    9984:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    9994:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    99a4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    99b4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    99c4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    99d4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    99e4:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    99f4:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    9a04:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    9a14:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    9a24:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    9a34:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    9a44:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    9a54:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    9a64:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    9a74:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    9a84:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    9a94:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    9aa4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    9ab4:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    9ac4:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    9ad4:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    9ae4:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    9af4:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    9b04:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    9b14:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    9b24:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    9b34:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    9b44:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    9b54:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    9b64:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    9b74:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    9b84:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    9b94:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    9ba4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    9bb4:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    9bc4:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    9bd4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    9be4:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    9bf4:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    9c04:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    9c14:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    9c24:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    9c34:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    9c44:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    9c54:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    9c64:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    9c74:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    9c84:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    9c94:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    9ca4:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    9cb4:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    9cc4:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    9cd4:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    9ce4:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    9cf4:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    9d04:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    9d14:	1c00 4200 447a 0000 4476 0000 4476 0000     ...BzD..vD..vD..
    9d24:	44d8 0000 44d8 0000 448e 0000 4480 0000     .D...D...D...D..
    9d34:	4494 0000 44c6 0000 4698 0000 4678 0000     .D...D...F..xF..
    9d44:	4678 0000 4704 0000 468a 0000 46a6 0000     xF...G...F...F..
    9d54:	467c 0000 46b4 0000 46f4 0000               |F...F...F..

00009d60 <_tcc_apbcmasks>:
    9d60:	0100 0000 0200 0000 0400 0000               ............

00009d6c <_tcc_cc_nums>:
    9d6c:	0204 0002                                   ....

00009d70 <_tcc_gclk_ids>:
    9d70:	1a1a 001b                                   ....

00009d74 <_tcc_maxs>:
    9d74:	ffff 00ff ffff 00ff ffff 0000               ............

00009d80 <_tcc_ow_nums>:
    9d80:	0408 0002                                   ....

00009d84 <_tcc_intflag>:
    9d84:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    9d94:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    9da4:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00009db4 <tcc_interrupt_vectors.12458>:
    9db4:	100f 0011 2000 4200 2400 4200 2800 4200     ..... .B.$.B.(.B
    9dc4:	2d2d 5720 4e49 3143 3035 2030 6957 462d     -- WINC1500 Wi-F
    9dd4:	2069 514d 5454 6320 6168 2074 7865 6d61     i MQTT chat exam
    9de4:	6c70 2065 2d2d 0a0d 2d2d 5320 4d41 3257     ple --..-- SAMW2
    9df4:	5f35 5058 414c 4e49 4445 505f 4f52 2d20     5_XPLAINED_PRO -
    9e04:	0d2d 2d0a 202d 6f43 706d 6c69 6465 203a     -..-- Compiled: 
    9e14:	7041 2072 3831 3220 3130 2038 3032 313a     Apr 18 2018 20:1
    9e24:	3a35 3131 2d20 0d2d 0000 0000 514d 5454     5:11 --.....MQTT
    9e34:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
    9e44:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
    9e54:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
    9e64:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
    9e74:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
    9e84:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
    9e94:	0d29 000a 6e45 6574 2072 6874 2065 7375     )...Enter the us
    9ea4:	7265 6e20 6d61 2065 4d28 7861 2520 2064     er name (Max %d 
    9eb4:	6863 7261 6361 6574 7372 0d29 000a 0000     characters).....
    9ec4:	3625 7334 0000 0000 7355 7265 3a20 2520     %64s....User : %
    9ed4:	0d73 000a 7325 7325 0000 0000 616d 6e69     s...%s%s....main
    9ee4:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
    9ef4:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
    9f04:	000a 0000                                   ....

00009f08 <main_mqtt_broker>:
    9f08:	326d 2e6d 6365 696c 7370 2e65 726f 0067     m2m.eclipse.org.
    9f18:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    9f28:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    9f38:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    9f48:	796c 0d2e 000a 0000 7461 656d 2f6c 6173     ly......atmel/sa
    9f58:	706d 656c 632f 6168 5f74 6564 6f6d 232f     mple/chat_demo/#
    9f68:	0000 0000 7250 7065 7261 7461 6f69 206e     ....Preparation 
    9f78:	666f 7420 6568 6320 6168 2074 6168 2073     of the chat has 
    9f88:	6562 6e65 6320 6d6f 6c70 7465 6465 0d2e     been completed..
    9f98:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
    9fa8:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    9fb8:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    9fc8:	6425 0a0d 0000 0000 7461 656d 2f6c 6173     %d......atmel/sa
    9fd8:	706d 656c 632f 6168 5f74 6564 6f6d 002f     mple/chat_demo/.
    9fe8:	3e20 203e 0000 0000 000d 0000 514d 5454      >> ........MQTT
    9ff8:	6420 7369 6f63 6e6e 6365 6574 0d64 0000      disconnected...
    a008:	6957 462d 2069 6f63 6e6e 6365 6574 0d64     Wi-Fi connected.
    a018:	0000 0000 6957 462d 2069 6964 6373 6e6f     ....Wi-Fi discon
    a028:	656e 7463 6465 000d 3231 3433 3635 3837     nected..12345678
    a038:	0000 0000 4544 4f4d 415f 0050 6957 462d     ....DEMO_AP.Wi-F
    a048:	2069 5049 6920 2073 7525 252e 2e75 7525     i IP is %u.%u.%u
    a058:	252e 0d75 000a 0000 514d 7349 7064 0000     .%u.....MQIsdp..

0000a068 <_global_impure_ptr>:
    a068:	0010 2000                                   ... 

0000a06c <__sf_fake_stderr>:
	...

0000a08c <__sf_fake_stdin>:
	...

0000a0ac <__sf_fake_stdout>:
	...
    a0cc:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    a0dc:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    a0ec:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    a0fc:	6665 0000 a11e 0000 a121 0000 a124 0000     ef......!...$...
    a10c:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
    a11c:	005d 2d2b 3000 0030 5878 4300 5000 534f     ].+-.00.xX.C.POS
    a12c:	5849 2e00 0000                                   IX...

0000a131 <_ctype_>:
    a131:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    a141:	2020 2020 2020 2020 2020 2020 2020 2020                     
    a151:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    a161:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    a171:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    a181:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    a191:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    a1a1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    a1b1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000a234 <_init>:
    a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a236:	46c0      	nop			; (mov r8, r8)
    a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a23a:	bc08      	pop	{r3}
    a23c:	469e      	mov	lr, r3
    a23e:	4770      	bx	lr

0000a240 <__init_array_start>:
    a240:	000000dd 	.word	0x000000dd

0000a244 <_fini>:
    a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a246:	46c0      	nop			; (mov r8, r8)
    a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a24a:	bc08      	pop	{r3}
    a24c:	469e      	mov	lr, r3
    a24e:	4770      	bx	lr

0000a250 <__fini_array_start>:
    a250:	000000b5 	.word	0x000000b5
