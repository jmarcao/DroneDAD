
DroneDADApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006750  00003000  00003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00009750  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000510  20000068  000097b8  00010068  2**2
                  ALLOC
  3 .stack        00002000  20000578  00009cc8  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   000337a7  00000000  00000000  000100e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e36  00000000  00000000  00043890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002fca  00000000  00000000  000476c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000910  00000000  00000000  0004a690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007b0  00000000  00000000  0004afa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b4a9  00000000  00000000  0004b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f9ca  00000000  00000000  00066bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088a29  00000000  00000000  000765c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000255c  00000000  00000000  000fefec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <exception_table>:
    3000:	78 25 00 20 4d 74 00 00 45 75 00 00 45 75 00 00     x%. Mt..Eu..Eu..
	...
    302c:	45 75 00 00 00 00 00 00 00 00 00 00 45 75 00 00     Eu..........Eu..
    303c:	45 75 00 00 45 75 00 00 45 75 00 00 45 75 00 00     Eu..Eu..Eu..Eu..
    304c:	45 75 00 00 45 75 00 00 45 75 00 00 45 75 00 00     Eu..Eu..Eu..Eu..
    305c:	45 75 00 00 45 75 00 00 5d 4e 00 00 75 4e 00 00     Eu..Eu..]N..uN..
    306c:	8d 4e 00 00 a5 4e 00 00 bd 4e 00 00 d5 4e 00 00     .N...N...N...N..
    307c:	45 75 00 00 45 75 00 00 45 75 00 00 45 75 00 00     Eu..Eu..Eu..Eu..
    308c:	45 75 00 00 45 75 00 00 00 00 00 00 00 00 00 00     Eu..Eu..........
    309c:	45 75 00 00 45 75 00 00 45 75 00 00 45 75 00 00     Eu..Eu..Eu..Eu..
    30ac:	45 75 00 00 00 00 00 00                             Eu......

000030b4 <__do_global_dtors_aux>:
    30b4:	b510      	push	{r4, lr}
    30b6:	4c06      	ldr	r4, [pc, #24]	; (30d0 <__do_global_dtors_aux+0x1c>)
    30b8:	7823      	ldrb	r3, [r4, #0]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d107      	bne.n	30ce <__do_global_dtors_aux+0x1a>
    30be:	4b05      	ldr	r3, [pc, #20]	; (30d4 <__do_global_dtors_aux+0x20>)
    30c0:	2b00      	cmp	r3, #0
    30c2:	d002      	beq.n	30ca <__do_global_dtors_aux+0x16>
    30c4:	4804      	ldr	r0, [pc, #16]	; (30d8 <__do_global_dtors_aux+0x24>)
    30c6:	e000      	b.n	30ca <__do_global_dtors_aux+0x16>
    30c8:	bf00      	nop
    30ca:	2301      	movs	r3, #1
    30cc:	7023      	strb	r3, [r4, #0]
    30ce:	bd10      	pop	{r4, pc}
    30d0:	20000068 	.word	0x20000068
    30d4:	00000000 	.word	0x00000000
    30d8:	00009750 	.word	0x00009750

000030dc <frame_dummy>:
    30dc:	4b08      	ldr	r3, [pc, #32]	; (3100 <frame_dummy+0x24>)
    30de:	b510      	push	{r4, lr}
    30e0:	2b00      	cmp	r3, #0
    30e2:	d003      	beq.n	30ec <frame_dummy+0x10>
    30e4:	4907      	ldr	r1, [pc, #28]	; (3104 <frame_dummy+0x28>)
    30e6:	4808      	ldr	r0, [pc, #32]	; (3108 <frame_dummy+0x2c>)
    30e8:	e000      	b.n	30ec <frame_dummy+0x10>
    30ea:	bf00      	nop
    30ec:	4807      	ldr	r0, [pc, #28]	; (310c <frame_dummy+0x30>)
    30ee:	6803      	ldr	r3, [r0, #0]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d100      	bne.n	30f6 <frame_dummy+0x1a>
    30f4:	bd10      	pop	{r4, pc}
    30f6:	4b06      	ldr	r3, [pc, #24]	; (3110 <frame_dummy+0x34>)
    30f8:	2b00      	cmp	r3, #0
    30fa:	d0fb      	beq.n	30f4 <frame_dummy+0x18>
    30fc:	4798      	blx	r3
    30fe:	e7f9      	b.n	30f4 <frame_dummy+0x18>
    3100:	00000000 	.word	0x00000000
    3104:	2000006c 	.word	0x2000006c
    3108:	00009750 	.word	0x00009750
    310c:	00009750 	.word	0x00009750
    3110:	00000000 	.word	0x00000000

00003114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3114:	b580      	push	{r7, lr}
    3116:	b084      	sub	sp, #16
    3118:	af00      	add	r7, sp, #0
    311a:	0002      	movs	r2, r0
    311c:	1dfb      	adds	r3, r7, #7
    311e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3120:	230f      	movs	r3, #15
    3122:	18fb      	adds	r3, r7, r3
    3124:	1dfa      	adds	r2, r7, #7
    3126:	7812      	ldrb	r2, [r2, #0]
    3128:	09d2      	lsrs	r2, r2, #7
    312a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    312c:	230e      	movs	r3, #14
    312e:	18fb      	adds	r3, r7, r3
    3130:	1dfa      	adds	r2, r7, #7
    3132:	7812      	ldrb	r2, [r2, #0]
    3134:	0952      	lsrs	r2, r2, #5
    3136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3138:	4b0d      	ldr	r3, [pc, #52]	; (3170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    313a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    313c:	230f      	movs	r3, #15
    313e:	18fb      	adds	r3, r7, r3
    3140:	781b      	ldrb	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d10f      	bne.n	3166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3146:	230f      	movs	r3, #15
    3148:	18fb      	adds	r3, r7, r3
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	009b      	lsls	r3, r3, #2
    314e:	2210      	movs	r2, #16
    3150:	4694      	mov	ip, r2
    3152:	44bc      	add	ip, r7
    3154:	4463      	add	r3, ip
    3156:	3b08      	subs	r3, #8
    3158:	681a      	ldr	r2, [r3, #0]
    315a:	230e      	movs	r3, #14
    315c:	18fb      	adds	r3, r7, r3
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	01db      	lsls	r3, r3, #7
    3162:	18d3      	adds	r3, r2, r3
    3164:	e000      	b.n	3168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3166:	2300      	movs	r3, #0
	}
}
    3168:	0018      	movs	r0, r3
    316a:	46bd      	mov	sp, r7
    316c:	b004      	add	sp, #16
    316e:	bd80      	pop	{r7, pc}
    3170:	41004400 	.word	0x41004400

00003174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3174:	b580      	push	{r7, lr}
    3176:	b082      	sub	sp, #8
    3178:	af00      	add	r7, sp, #0
    317a:	0002      	movs	r2, r0
    317c:	1dfb      	adds	r3, r7, #7
    317e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3180:	1dfb      	adds	r3, r7, #7
    3182:	781b      	ldrb	r3, [r3, #0]
    3184:	0018      	movs	r0, r3
    3186:	4b03      	ldr	r3, [pc, #12]	; (3194 <port_get_group_from_gpio_pin+0x20>)
    3188:	4798      	blx	r3
    318a:	0003      	movs	r3, r0
}
    318c:	0018      	movs	r0, r3
    318e:	46bd      	mov	sp, r7
    3190:	b002      	add	sp, #8
    3192:	bd80      	pop	{r7, pc}
    3194:	00003115 	.word	0x00003115

00003198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3198:	b580      	push	{r7, lr}
    319a:	b084      	sub	sp, #16
    319c:	af00      	add	r7, sp, #0
    319e:	0002      	movs	r2, r0
    31a0:	1dfb      	adds	r3, r7, #7
    31a2:	701a      	strb	r2, [r3, #0]
    31a4:	1dbb      	adds	r3, r7, #6
    31a6:	1c0a      	adds	r2, r1, #0
    31a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    31aa:	1dfb      	adds	r3, r7, #7
    31ac:	781b      	ldrb	r3, [r3, #0]
    31ae:	0018      	movs	r0, r3
    31b0:	4b0d      	ldr	r3, [pc, #52]	; (31e8 <port_pin_set_output_level+0x50>)
    31b2:	4798      	blx	r3
    31b4:	0003      	movs	r3, r0
    31b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    31b8:	1dfb      	adds	r3, r7, #7
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	221f      	movs	r2, #31
    31be:	4013      	ands	r3, r2
    31c0:	2201      	movs	r2, #1
    31c2:	409a      	lsls	r2, r3
    31c4:	0013      	movs	r3, r2
    31c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    31c8:	1dbb      	adds	r3, r7, #6
    31ca:	781b      	ldrb	r3, [r3, #0]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d003      	beq.n	31d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	68ba      	ldr	r2, [r7, #8]
    31d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    31d6:	e002      	b.n	31de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    31d8:	68fb      	ldr	r3, [r7, #12]
    31da:	68ba      	ldr	r2, [r7, #8]
    31dc:	615a      	str	r2, [r3, #20]
}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	46bd      	mov	sp, r7
    31e2:	b004      	add	sp, #16
    31e4:	bd80      	pop	{r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00003175 	.word	0x00003175

000031ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    31f0:	4b02      	ldr	r3, [pc, #8]	; (31fc <system_interrupt_enter_critical_section+0x10>)
    31f2:	4798      	blx	r3
}
    31f4:	46c0      	nop			; (mov r8, r8)
    31f6:	46bd      	mov	sp, r7
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00004739 	.word	0x00004739

00003200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    3200:	b580      	push	{r7, lr}
    3202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3204:	4b02      	ldr	r3, [pc, #8]	; (3210 <system_interrupt_leave_critical_section+0x10>)
    3206:	4798      	blx	r3
}
    3208:	46c0      	nop			; (mov r8, r8)
    320a:	46bd      	mov	sp, r7
    320c:	bd80      	pop	{r7, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	0000478d 	.word	0x0000478d

00003214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
    3214:	b580      	push	{r7, lr}
    3216:	b084      	sub	sp, #16
    3218:	af00      	add	r7, sp, #0
    321a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
    321c:	4b0d      	ldr	r3, [pc, #52]	; (3254 <spi_lock+0x40>)
    321e:	4798      	blx	r3

	if (module->locked) {
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	791b      	ldrb	r3, [r3, #4]
    3224:	b2db      	uxtb	r3, r3
    3226:	2b00      	cmp	r3, #0
    3228:	d004      	beq.n	3234 <spi_lock+0x20>
		status = STATUS_BUSY;
    322a:	230f      	movs	r3, #15
    322c:	18fb      	adds	r3, r7, r3
    322e:	2205      	movs	r2, #5
    3230:	701a      	strb	r2, [r3, #0]
    3232:	e006      	b.n	3242 <spi_lock+0x2e>
	} else {
		module->locked = true;
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	2201      	movs	r2, #1
    3238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
    323a:	230f      	movs	r3, #15
    323c:	18fb      	adds	r3, r7, r3
    323e:	2200      	movs	r2, #0
    3240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
    3242:	4b05      	ldr	r3, [pc, #20]	; (3258 <spi_lock+0x44>)
    3244:	4798      	blx	r3

	return status;
    3246:	230f      	movs	r3, #15
    3248:	18fb      	adds	r3, r7, r3
    324a:	781b      	ldrb	r3, [r3, #0]
}
    324c:	0018      	movs	r0, r3
    324e:	46bd      	mov	sp, r7
    3250:	b004      	add	sp, #16
    3252:	bd80      	pop	{r7, pc}
    3254:	000031ed 	.word	0x000031ed
    3258:	00003201 	.word	0x00003201

0000325c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
    325c:	b580      	push	{r7, lr}
    325e:	b082      	sub	sp, #8
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
	module->locked = false;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	2200      	movs	r2, #0
    3268:	711a      	strb	r2, [r3, #4]
}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	46bd      	mov	sp, r7
    326e:	b002      	add	sp, #8
    3270:	bd80      	pop	{r7, pc}

00003272 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3272:	b580      	push	{r7, lr}
    3274:	b084      	sub	sp, #16
    3276:	af00      	add	r7, sp, #0
    3278:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	681b      	ldr	r3, [r3, #0]
    327e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	7e1b      	ldrb	r3, [r3, #24]
    3284:	b2db      	uxtb	r3, r3
    3286:	001a      	movs	r2, r3
    3288:	2301      	movs	r3, #1
    328a:	4013      	ands	r3, r2
    328c:	1e5a      	subs	r2, r3, #1
    328e:	4193      	sbcs	r3, r2
    3290:	b2db      	uxtb	r3, r3
}
    3292:	0018      	movs	r0, r3
    3294:	46bd      	mov	sp, r7
    3296:	b004      	add	sp, #16
    3298:	bd80      	pop	{r7, pc}

0000329a <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    329a:	b580      	push	{r7, lr}
    329c:	b084      	sub	sp, #16
    329e:	af00      	add	r7, sp, #0
    32a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	681b      	ldr	r3, [r3, #0]
    32a6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32a8:	68fb      	ldr	r3, [r7, #12]
    32aa:	7e1b      	ldrb	r3, [r3, #24]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2304      	movs	r3, #4
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	b004      	add	sp, #16
    32c0:	bd80      	pop	{r7, pc}
	...

000032c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
    32cc:	000a      	movs	r2, r1
    32ce:	1cbb      	adds	r3, r7, #2
    32d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	0018      	movs	r0, r3
    32dc:	4b0a      	ldr	r3, [pc, #40]	; (3308 <spi_write+0x44>)
    32de:	4798      	blx	r3
    32e0:	0003      	movs	r3, r0
    32e2:	001a      	movs	r2, r3
    32e4:	2301      	movs	r3, #1
    32e6:	4053      	eors	r3, r2
    32e8:	b2db      	uxtb	r3, r3
    32ea:	2b00      	cmp	r3, #0
    32ec:	d001      	beq.n	32f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    32ee:	2305      	movs	r3, #5
    32f0:	e006      	b.n	3300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    32f2:	1cbb      	adds	r3, r7, #2
    32f4:	881b      	ldrh	r3, [r3, #0]
    32f6:	05db      	lsls	r3, r3, #23
    32f8:	0dda      	lsrs	r2, r3, #23
    32fa:	68fb      	ldr	r3, [r7, #12]
    32fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    32fe:	2300      	movs	r3, #0
}
    3300:	0018      	movs	r0, r3
    3302:	46bd      	mov	sp, r7
    3304:	b004      	add	sp, #16
    3306:	bd80      	pop	{r7, pc}
    3308:	00003273 	.word	0x00003273

0000330c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    330c:	b580      	push	{r7, lr}
    330e:	b084      	sub	sp, #16
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	0018      	movs	r0, r3
    3320:	4b1b      	ldr	r3, [pc, #108]	; (3390 <spi_read+0x84>)
    3322:	4798      	blx	r3
    3324:	0003      	movs	r3, r0
    3326:	001a      	movs	r2, r3
    3328:	2301      	movs	r3, #1
    332a:	4053      	eors	r3, r2
    332c:	b2db      	uxtb	r3, r3
    332e:	2b00      	cmp	r3, #0
    3330:	d001      	beq.n	3336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3332:	2310      	movs	r3, #16
    3334:	e027      	b.n	3386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3336:	230f      	movs	r3, #15
    3338:	18fb      	adds	r3, r7, r3
    333a:	2200      	movs	r2, #0
    333c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    333e:	68bb      	ldr	r3, [r7, #8]
    3340:	8b5b      	ldrh	r3, [r3, #26]
    3342:	b29b      	uxth	r3, r3
    3344:	001a      	movs	r2, r3
    3346:	2304      	movs	r3, #4
    3348:	4013      	ands	r3, r2
    334a:	d006      	beq.n	335a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    334c:	230f      	movs	r3, #15
    334e:	18fb      	adds	r3, r7, r3
    3350:	221e      	movs	r2, #30
    3352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3354:	68bb      	ldr	r3, [r7, #8]
    3356:	2204      	movs	r2, #4
    3358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	799b      	ldrb	r3, [r3, #6]
    335e:	2b01      	cmp	r3, #1
    3360:	d108      	bne.n	3374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3362:	68bb      	ldr	r3, [r7, #8]
    3364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3366:	b29b      	uxth	r3, r3
    3368:	05db      	lsls	r3, r3, #23
    336a:	0ddb      	lsrs	r3, r3, #23
    336c:	b29a      	uxth	r2, r3
    336e:	683b      	ldr	r3, [r7, #0]
    3370:	801a      	strh	r2, [r3, #0]
    3372:	e005      	b.n	3380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3374:	68bb      	ldr	r3, [r7, #8]
    3376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3378:	b2db      	uxtb	r3, r3
    337a:	b29a      	uxth	r2, r3
    337c:	683b      	ldr	r3, [r7, #0]
    337e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3380:	230f      	movs	r3, #15
    3382:	18fb      	adds	r3, r7, r3
    3384:	781b      	ldrb	r3, [r3, #0]
}
    3386:	0018      	movs	r0, r3
    3388:	46bd      	mov	sp, r7
    338a:	b004      	add	sp, #16
    338c:	bd80      	pop	{r7, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	0000329b 	.word	0x0000329b

00003394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
    339a:	0002      	movs	r2, r0
    339c:	1dfb      	adds	r3, r7, #7
    339e:	701a      	strb	r2, [r3, #0]
	switch (type) {
    33a0:	1dfb      	adds	r3, r7, #7
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	2b09      	cmp	r3, #9
    33a6:	d818      	bhi.n	33da <_at25dfx_get_device_id+0x46>
    33a8:	009a      	lsls	r2, r3, #2
    33aa:	4b0e      	ldr	r3, [pc, #56]	; (33e4 <_at25dfx_get_device_id+0x50>)
    33ac:	18d3      	adds	r3, r2, r3
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
    33b2:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <_at25dfx_get_device_id+0x54>)
    33b4:	e012      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
    33b6:	4b0d      	ldr	r3, [pc, #52]	; (33ec <_at25dfx_get_device_id+0x58>)
    33b8:	e010      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
    33ba:	4b0d      	ldr	r3, [pc, #52]	; (33f0 <_at25dfx_get_device_id+0x5c>)
    33bc:	e00e      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
    33be:	4b0d      	ldr	r3, [pc, #52]	; (33f4 <_at25dfx_get_device_id+0x60>)
    33c0:	e00c      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
    33c2:	4b0d      	ldr	r3, [pc, #52]	; (33f8 <_at25dfx_get_device_id+0x64>)
    33c4:	e00a      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
    33c6:	4b0d      	ldr	r3, [pc, #52]	; (33fc <_at25dfx_get_device_id+0x68>)
    33c8:	e008      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
    33ca:	4b0d      	ldr	r3, [pc, #52]	; (3400 <_at25dfx_get_device_id+0x6c>)
    33cc:	e006      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
    33ce:	4b0d      	ldr	r3, [pc, #52]	; (3404 <_at25dfx_get_device_id+0x70>)
    33d0:	e004      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
    33d2:	4b0d      	ldr	r3, [pc, #52]	; (3408 <_at25dfx_get_device_id+0x74>)
    33d4:	e002      	b.n	33dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
    33d6:	4b0d      	ldr	r3, [pc, #52]	; (340c <_at25dfx_get_device_id+0x78>)
    33d8:	e000      	b.n	33dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
    33da:	2300      	movs	r3, #0
	}
}
    33dc:	0018      	movs	r0, r3
    33de:	46bd      	mov	sp, r7
    33e0:	b002      	add	sp, #8
    33e2:	bd80      	pop	{r7, pc}
    33e4:	000093f0 	.word	0x000093f0
    33e8:	0000651f 	.word	0x0000651f
    33ec:	0000431f 	.word	0x0000431f
    33f0:	0001441f 	.word	0x0001441f
    33f4:	0002451f 	.word	0x0002451f
    33f8:	0001451f 	.word	0x0001451f
    33fc:	0002461f 	.word	0x0002461f
    3400:	0003461f 	.word	0x0003461f
    3404:	0000861f 	.word	0x0000861f
    3408:	0001471f 	.word	0x0001471f
    340c:	0000481f 	.word	0x0000481f

00003410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
    3410:	b580      	push	{r7, lr}
    3412:	b082      	sub	sp, #8
    3414:	af00      	add	r7, sp, #0
    3416:	0002      	movs	r2, r0
    3418:	1dfb      	adds	r3, r7, #7
    341a:	701a      	strb	r2, [r3, #0]
	switch (type) {
    341c:	1dfb      	adds	r3, r7, #7
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	2b09      	cmp	r3, #9
    3422:	d819      	bhi.n	3458 <_at25dfx_get_device_size+0x48>
    3424:	009a      	lsls	r2, r3, #2
    3426:	4b0f      	ldr	r3, [pc, #60]	; (3464 <_at25dfx_get_device_size+0x54>)
    3428:	18d3      	adds	r3, r2, r3
    342a:	681b      	ldr	r3, [r3, #0]
    342c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
    342e:	2380      	movs	r3, #128	; 0x80
    3430:	025b      	lsls	r3, r3, #9
    3432:	e012      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
    3434:	2380      	movs	r3, #128	; 0x80
    3436:	02db      	lsls	r3, r3, #11
    3438:	e00f      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
    343a:	2380      	movs	r3, #128	; 0x80
    343c:	031b      	lsls	r3, r3, #12
    343e:	e00c      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    3440:	2380      	movs	r3, #128	; 0x80
    3442:	035b      	lsls	r3, r3, #13
    3444:	e009      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    3446:	2380      	movs	r3, #128	; 0x80
    3448:	039b      	lsls	r3, r3, #14
    344a:	e006      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    344c:	2380      	movs	r3, #128	; 0x80
    344e:	03db      	lsls	r3, r3, #15
    3450:	e003      	b.n	345a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
    3452:	2380      	movs	r3, #128	; 0x80
    3454:	041b      	lsls	r3, r3, #16
    3456:	e000      	b.n	345a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
    3458:	2300      	movs	r3, #0
	}
}
    345a:	0018      	movs	r0, r3
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	00009418 	.word	0x00009418

00003468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
    3468:	b580      	push	{r7, lr}
    346a:	b082      	sub	sp, #8
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	795b      	ldrb	r3, [r3, #5]
    3474:	2100      	movs	r1, #0
    3476:	0018      	movs	r0, r3
    3478:	4b02      	ldr	r3, [pc, #8]	; (3484 <_at25dfx_chip_select+0x1c>)
    347a:	4798      	blx	r3
}
    347c:	46c0      	nop			; (mov r8, r8)
    347e:	46bd      	mov	sp, r7
    3480:	b002      	add	sp, #8
    3482:	bd80      	pop	{r7, pc}
    3484:	00003199 	.word	0x00003199

00003488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	795b      	ldrb	r3, [r3, #5]
    3494:	2101      	movs	r1, #1
    3496:	0018      	movs	r0, r3
    3498:	4b02      	ldr	r3, [pc, #8]	; (34a4 <_at25dfx_chip_deselect+0x1c>)
    349a:	4798      	blx	r3
}
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	46bd      	mov	sp, r7
    34a0:	b002      	add	sp, #8
    34a2:	bd80      	pop	{r7, pc}
    34a4:	00003199 	.word	0x00003199

000034a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    34a8:	b084      	sub	sp, #16
    34aa:	b5b0      	push	{r4, r5, r7, lr}
    34ac:	b084      	sub	sp, #16
    34ae:	af00      	add	r7, sp, #0
    34b0:	6078      	str	r0, [r7, #4]
    34b2:	2004      	movs	r0, #4
    34b4:	2420      	movs	r4, #32
    34b6:	46a4      	mov	ip, r4
    34b8:	44bc      	add	ip, r7
    34ba:	4460      	add	r0, ip
    34bc:	6001      	str	r1, [r0, #0]
    34be:	6042      	str	r2, [r0, #4]
    34c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    34c2:	2304      	movs	r3, #4
    34c4:	2220      	movs	r2, #32
    34c6:	4694      	mov	ip, r2
    34c8:	44bc      	add	ip, r7
    34ca:	4463      	add	r3, ip
    34cc:	781a      	ldrb	r2, [r3, #0]
    34ce:	2308      	movs	r3, #8
    34d0:	18fb      	adds	r3, r7, r3
    34d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    34d4:	2304      	movs	r3, #4
    34d6:	2220      	movs	r2, #32
    34d8:	4694      	mov	ip, r2
    34da:	44bc      	add	ip, r7
    34dc:	4463      	add	r3, ip
    34de:	785b      	ldrb	r3, [r3, #1]
    34e0:	2b01      	cmp	r3, #1
    34e2:	d91f      	bls.n	3524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    34e4:	2304      	movs	r3, #4
    34e6:	2220      	movs	r2, #32
    34e8:	4694      	mov	ip, r2
    34ea:	44bc      	add	ip, r7
    34ec:	4463      	add	r3, ip
    34ee:	685b      	ldr	r3, [r3, #4]
    34f0:	b2da      	uxtb	r2, r3
    34f2:	2308      	movs	r3, #8
    34f4:	18fb      	adds	r3, r7, r3
    34f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    34f8:	2304      	movs	r3, #4
    34fa:	2220      	movs	r2, #32
    34fc:	4694      	mov	ip, r2
    34fe:	44bc      	add	ip, r7
    3500:	4463      	add	r3, ip
    3502:	685b      	ldr	r3, [r3, #4]
    3504:	0a1b      	lsrs	r3, r3, #8
    3506:	b2da      	uxtb	r2, r3
    3508:	2308      	movs	r3, #8
    350a:	18fb      	adds	r3, r7, r3
    350c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    350e:	2304      	movs	r3, #4
    3510:	2220      	movs	r2, #32
    3512:	4694      	mov	ip, r2
    3514:	44bc      	add	ip, r7
    3516:	4463      	add	r3, ip
    3518:	685b      	ldr	r3, [r3, #4]
    351a:	0c1b      	lsrs	r3, r3, #16
    351c:	b2da      	uxtb	r2, r3
    351e:	2308      	movs	r3, #8
    3520:	18fb      	adds	r3, r7, r3
    3522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	0018      	movs	r0, r3
    3528:	4b1d      	ldr	r3, [pc, #116]	; (35a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
    352a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	6818      	ldr	r0, [r3, #0]
    3530:	2304      	movs	r3, #4
    3532:	2220      	movs	r2, #32
    3534:	4694      	mov	ip, r2
    3536:	44bc      	add	ip, r7
    3538:	4463      	add	r3, ip
    353a:	785b      	ldrb	r3, [r3, #1]
    353c:	b29a      	uxth	r2, r3
    353e:	230f      	movs	r3, #15
    3540:	18fc      	adds	r4, r7, r3
    3542:	2308      	movs	r3, #8
    3544:	18fb      	adds	r3, r7, r3
    3546:	0019      	movs	r1, r3
    3548:	4b16      	ldr	r3, [pc, #88]	; (35a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
    354a:	4798      	blx	r3
    354c:	0003      	movs	r3, r0
    354e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    3550:	2304      	movs	r3, #4
    3552:	2220      	movs	r2, #32
    3554:	4694      	mov	ip, r2
    3556:	44bc      	add	ip, r7
    3558:	4463      	add	r3, ip
    355a:	899b      	ldrh	r3, [r3, #12]
    355c:	2b00      	cmp	r3, #0
    355e:	d014      	beq.n	358a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	6818      	ldr	r0, [r3, #0]
    3564:	2304      	movs	r3, #4
    3566:	2220      	movs	r2, #32
    3568:	4694      	mov	ip, r2
    356a:	44bc      	add	ip, r7
    356c:	4463      	add	r3, ip
    356e:	6899      	ldr	r1, [r3, #8]
    3570:	2304      	movs	r3, #4
    3572:	2220      	movs	r2, #32
    3574:	4694      	mov	ip, r2
    3576:	44bc      	add	ip, r7
    3578:	4463      	add	r3, ip
    357a:	899a      	ldrh	r2, [r3, #12]
    357c:	230f      	movs	r3, #15
    357e:	18fc      	adds	r4, r7, r3
    3580:	2300      	movs	r3, #0
    3582:	4d09      	ldr	r5, [pc, #36]	; (35a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
    3584:	47a8      	blx	r5
    3586:	0003      	movs	r3, r0
    3588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    358a:	687b      	ldr	r3, [r7, #4]
    358c:	0018      	movs	r0, r3
    358e:	4b07      	ldr	r3, [pc, #28]	; (35ac <_at25dfx_chip_issue_read_command_wait+0x104>)
    3590:	4798      	blx	r3
}
    3592:	46c0      	nop			; (mov r8, r8)
    3594:	46bd      	mov	sp, r7
    3596:	b004      	add	sp, #16
    3598:	bcb0      	pop	{r4, r5, r7}
    359a:	bc08      	pop	{r3}
    359c:	b004      	add	sp, #16
    359e:	4718      	bx	r3
    35a0:	00003469 	.word	0x00003469
    35a4:	000056bd 	.word	0x000056bd
    35a8:	00005501 	.word	0x00005501
    35ac:	00003489 	.word	0x00003489

000035b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    35b0:	b084      	sub	sp, #16
    35b2:	b590      	push	{r4, r7, lr}
    35b4:	b085      	sub	sp, #20
    35b6:	af00      	add	r7, sp, #0
    35b8:	6078      	str	r0, [r7, #4]
    35ba:	2004      	movs	r0, #4
    35bc:	2420      	movs	r4, #32
    35be:	46a4      	mov	ip, r4
    35c0:	44bc      	add	ip, r7
    35c2:	4460      	add	r0, ip
    35c4:	6001      	str	r1, [r0, #0]
    35c6:	6042      	str	r2, [r0, #4]
    35c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    35ca:	2304      	movs	r3, #4
    35cc:	2220      	movs	r2, #32
    35ce:	4694      	mov	ip, r2
    35d0:	44bc      	add	ip, r7
    35d2:	4463      	add	r3, ip
    35d4:	781a      	ldrb	r2, [r3, #0]
    35d6:	2308      	movs	r3, #8
    35d8:	18fb      	adds	r3, r7, r3
    35da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    35dc:	2304      	movs	r3, #4
    35de:	2220      	movs	r2, #32
    35e0:	4694      	mov	ip, r2
    35e2:	44bc      	add	ip, r7
    35e4:	4463      	add	r3, ip
    35e6:	785b      	ldrb	r3, [r3, #1]
    35e8:	2b01      	cmp	r3, #1
    35ea:	d91f      	bls.n	362c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    35ec:	2304      	movs	r3, #4
    35ee:	2220      	movs	r2, #32
    35f0:	4694      	mov	ip, r2
    35f2:	44bc      	add	ip, r7
    35f4:	4463      	add	r3, ip
    35f6:	685b      	ldr	r3, [r3, #4]
    35f8:	b2da      	uxtb	r2, r3
    35fa:	2308      	movs	r3, #8
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    3600:	2304      	movs	r3, #4
    3602:	2220      	movs	r2, #32
    3604:	4694      	mov	ip, r2
    3606:	44bc      	add	ip, r7
    3608:	4463      	add	r3, ip
    360a:	685b      	ldr	r3, [r3, #4]
    360c:	0a1b      	lsrs	r3, r3, #8
    360e:	b2da      	uxtb	r2, r3
    3610:	2308      	movs	r3, #8
    3612:	18fb      	adds	r3, r7, r3
    3614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    3616:	2304      	movs	r3, #4
    3618:	2220      	movs	r2, #32
    361a:	4694      	mov	ip, r2
    361c:	44bc      	add	ip, r7
    361e:	4463      	add	r3, ip
    3620:	685b      	ldr	r3, [r3, #4]
    3622:	0c1b      	lsrs	r3, r3, #16
    3624:	b2da      	uxtb	r2, r3
    3626:	2308      	movs	r3, #8
    3628:	18fb      	adds	r3, r7, r3
    362a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	0018      	movs	r0, r3
    3630:	4b1d      	ldr	r3, [pc, #116]	; (36a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
    3632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	6818      	ldr	r0, [r3, #0]
    3638:	2304      	movs	r3, #4
    363a:	2220      	movs	r2, #32
    363c:	4694      	mov	ip, r2
    363e:	44bc      	add	ip, r7
    3640:	4463      	add	r3, ip
    3642:	785b      	ldrb	r3, [r3, #1]
    3644:	b29a      	uxth	r2, r3
    3646:	230f      	movs	r3, #15
    3648:	18fc      	adds	r4, r7, r3
    364a:	2308      	movs	r3, #8
    364c:	18fb      	adds	r3, r7, r3
    364e:	0019      	movs	r1, r3
    3650:	4b16      	ldr	r3, [pc, #88]	; (36ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
    3652:	4798      	blx	r3
    3654:	0003      	movs	r3, r0
    3656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    3658:	2304      	movs	r3, #4
    365a:	2220      	movs	r2, #32
    365c:	4694      	mov	ip, r2
    365e:	44bc      	add	ip, r7
    3660:	4463      	add	r3, ip
    3662:	899b      	ldrh	r3, [r3, #12]
    3664:	2b00      	cmp	r3, #0
    3666:	d014      	beq.n	3692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	6818      	ldr	r0, [r3, #0]
    366c:	2304      	movs	r3, #4
    366e:	2220      	movs	r2, #32
    3670:	4694      	mov	ip, r2
    3672:	44bc      	add	ip, r7
    3674:	4463      	add	r3, ip
    3676:	6899      	ldr	r1, [r3, #8]
    3678:	2304      	movs	r3, #4
    367a:	2220      	movs	r2, #32
    367c:	4694      	mov	ip, r2
    367e:	44bc      	add	ip, r7
    3680:	4463      	add	r3, ip
    3682:	899b      	ldrh	r3, [r3, #12]
    3684:	220f      	movs	r2, #15
    3686:	18bc      	adds	r4, r7, r2
    3688:	001a      	movs	r2, r3
    368a:	4b08      	ldr	r3, [pc, #32]	; (36ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
    368c:	4798      	blx	r3
    368e:	0003      	movs	r3, r0
    3690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	0018      	movs	r0, r3
    3696:	4b06      	ldr	r3, [pc, #24]	; (36b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
    3698:	4798      	blx	r3
}
    369a:	46c0      	nop			; (mov r8, r8)
    369c:	46bd      	mov	sp, r7
    369e:	b005      	add	sp, #20
    36a0:	bc90      	pop	{r4, r7}
    36a2:	bc08      	pop	{r3}
    36a4:	b004      	add	sp, #16
    36a6:	4718      	bx	r3
    36a8:	00003469 	.word	0x00003469
    36ac:	000056bd 	.word	0x000056bd
    36b0:	00003489 	.word	0x00003489

000036b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    36b4:	b590      	push	{r4, r7, lr}
    36b6:	b085      	sub	sp, #20
    36b8:	af00      	add	r7, sp, #0
    36ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
    36bc:	230c      	movs	r3, #12
    36be:	18fb      	adds	r3, r7, r3
    36c0:	2200      	movs	r2, #0
    36c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    36c4:	46c0      	nop			; (mov r8, r8)
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	0018      	movs	r0, r3
    36cc:	4b3c      	ldr	r3, [pc, #240]	; (37c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    36ce:	4798      	blx	r3
    36d0:	0003      	movs	r3, r0
    36d2:	001a      	movs	r2, r3
    36d4:	2301      	movs	r3, #1
    36d6:	4053      	eors	r3, r2
    36d8:	b2db      	uxtb	r3, r3
    36da:	2b00      	cmp	r3, #0
    36dc:	d1f3      	bne.n	36c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	0018      	movs	r0, r3
    36e2:	4b38      	ldr	r3, [pc, #224]	; (37c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
    36e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	220f      	movs	r2, #15
    36ec:	18bc      	adds	r4, r7, r2
    36ee:	2105      	movs	r1, #5
    36f0:	0018      	movs	r0, r3
    36f2:	4b35      	ldr	r3, [pc, #212]	; (37c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
    36f4:	4798      	blx	r3
    36f6:	0003      	movs	r3, r0
    36f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	687b      	ldr	r3, [r7, #4]
    36fe:	681b      	ldr	r3, [r3, #0]
    3700:	0018      	movs	r0, r3
    3702:	4b32      	ldr	r3, [pc, #200]	; (37cc <_at25dfx_chip_get_nonbusy_status+0x118>)
    3704:	4798      	blx	r3
    3706:	0003      	movs	r3, r0
    3708:	001a      	movs	r2, r3
    370a:	2301      	movs	r3, #1
    370c:	4053      	eors	r3, r2
    370e:	b2db      	uxtb	r3, r3
    3710:	2b00      	cmp	r3, #0
    3712:	d1f3      	bne.n	36fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
    3714:	687b      	ldr	r3, [r7, #4]
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	220f      	movs	r2, #15
    371a:	18bc      	adds	r4, r7, r2
    371c:	220c      	movs	r2, #12
    371e:	18ba      	adds	r2, r7, r2
    3720:	0011      	movs	r1, r2
    3722:	0018      	movs	r0, r3
    3724:	4b2a      	ldr	r3, [pc, #168]	; (37d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    3726:	4798      	blx	r3
    3728:	0003      	movs	r3, r0
    372a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    372c:	46c0      	nop			; (mov r8, r8)
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	0018      	movs	r0, r3
    3734:	4b22      	ldr	r3, [pc, #136]	; (37c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    3736:	4798      	blx	r3
    3738:	0003      	movs	r3, r0
    373a:	001a      	movs	r2, r3
    373c:	2301      	movs	r3, #1
    373e:	4053      	eors	r3, r2
    3740:	b2db      	uxtb	r3, r3
    3742:	2b00      	cmp	r3, #0
    3744:	d1f3      	bne.n	372e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	220f      	movs	r2, #15
    374c:	18bc      	adds	r4, r7, r2
    374e:	2100      	movs	r1, #0
    3750:	0018      	movs	r0, r3
    3752:	4b1d      	ldr	r3, [pc, #116]	; (37c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
    3754:	4798      	blx	r3
    3756:	0003      	movs	r3, r0
    3758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	0018      	movs	r0, r3
    3762:	4b1a      	ldr	r3, [pc, #104]	; (37cc <_at25dfx_chip_get_nonbusy_status+0x118>)
    3764:	4798      	blx	r3
    3766:	0003      	movs	r3, r0
    3768:	001a      	movs	r2, r3
    376a:	2301      	movs	r3, #1
    376c:	4053      	eors	r3, r2
    376e:	b2db      	uxtb	r3, r3
    3770:	2b00      	cmp	r3, #0
    3772:	d1f3      	bne.n	375c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	220f      	movs	r2, #15
    377a:	18bc      	adds	r4, r7, r2
    377c:	220c      	movs	r2, #12
    377e:	18ba      	adds	r2, r7, r2
    3780:	0011      	movs	r1, r2
    3782:	0018      	movs	r0, r3
    3784:	4b12      	ldr	r3, [pc, #72]	; (37d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    3786:	4798      	blx	r3
    3788:	0003      	movs	r3, r0
    378a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    378c:	230c      	movs	r3, #12
    378e:	18fb      	adds	r3, r7, r3
    3790:	881b      	ldrh	r3, [r3, #0]
    3792:	001a      	movs	r2, r3
    3794:	2301      	movs	r3, #1
    3796:	4013      	ands	r3, r2
    3798:	d1c8      	bne.n	372c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	0018      	movs	r0, r3
    379e:	4b0d      	ldr	r3, [pc, #52]	; (37d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
    37a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    37a2:	230c      	movs	r3, #12
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	881b      	ldrh	r3, [r3, #0]
    37a8:	001a      	movs	r2, r3
    37aa:	2320      	movs	r3, #32
    37ac:	4013      	ands	r3, r2
    37ae:	d001      	beq.n	37b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
    37b0:	2310      	movs	r3, #16
    37b2:	e000      	b.n	37b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
    37b4:	2300      	movs	r3, #0
}
    37b6:	0018      	movs	r0, r3
    37b8:	46bd      	mov	sp, r7
    37ba:	b005      	add	sp, #20
    37bc:	bd90      	pop	{r4, r7, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	00003273 	.word	0x00003273
    37c4:	00003469 	.word	0x00003469
    37c8:	000032c5 	.word	0x000032c5
    37cc:	0000329b 	.word	0x0000329b
    37d0:	0000330d 	.word	0x0000330d
    37d4:	00003489 	.word	0x00003489

000037d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
    37d8:	b590      	push	{r4, r7, lr}
    37da:	b089      	sub	sp, #36	; 0x24
    37dc:	af02      	add	r7, sp, #8
    37de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
    37e0:	2308      	movs	r3, #8
    37e2:	18fb      	adds	r3, r7, r3
    37e4:	2206      	movs	r2, #6
    37e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    37e8:	2308      	movs	r3, #8
    37ea:	18fb      	adds	r3, r7, r3
    37ec:	2201      	movs	r2, #1
    37ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    37f0:	2308      	movs	r3, #8
    37f2:	18fb      	adds	r3, r7, r3
    37f4:	2200      	movs	r2, #0
    37f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    37f8:	2308      	movs	r3, #8
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	2200      	movs	r2, #0
    37fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    3800:	2308      	movs	r3, #8
    3802:	18fb      	adds	r3, r7, r3
    3804:	2200      	movs	r2, #0
    3806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3808:	2308      	movs	r3, #8
    380a:	18fb      	adds	r3, r7, r3
    380c:	6878      	ldr	r0, [r7, #4]
    380e:	466a      	mov	r2, sp
    3810:	68d9      	ldr	r1, [r3, #12]
    3812:	6011      	str	r1, [r2, #0]
    3814:	6819      	ldr	r1, [r3, #0]
    3816:	685a      	ldr	r2, [r3, #4]
    3818:	689b      	ldr	r3, [r3, #8]
    381a:	4c03      	ldr	r4, [pc, #12]	; (3828 <_at25dfx_chip_enable_write+0x50>)
    381c:	47a0      	blx	r4
}
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	46bd      	mov	sp, r7
    3822:	b007      	add	sp, #28
    3824:	bd90      	pop	{r4, r7, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	000035b1 	.word	0x000035b1

0000382c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    382c:	b590      	push	{r4, r7, lr}
    382e:	b08b      	sub	sp, #44	; 0x2c
    3830:	af02      	add	r7, sp, #8
    3832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    3834:	2300      	movs	r3, #0
    3836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	221f      	movs	r2, #31
    383e:	18bc      	adds	r4, r7, r2
    3840:	0018      	movs	r0, r3
    3842:	4b21      	ldr	r3, [pc, #132]	; (38c8 <at25dfx_chip_check_presence+0x9c>)
    3844:	4798      	blx	r3
    3846:	0003      	movs	r3, r0
    3848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    384a:	231f      	movs	r3, #31
    384c:	18fb      	adds	r3, r7, r3
    384e:	781b      	ldrb	r3, [r3, #0]
    3850:	2b05      	cmp	r3, #5
    3852:	d103      	bne.n	385c <at25dfx_chip_check_presence+0x30>
		return status;
    3854:	231f      	movs	r3, #31
    3856:	18fb      	adds	r3, r7, r3
    3858:	781b      	ldrb	r3, [r3, #0]
    385a:	e030      	b.n	38be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
    385c:	230c      	movs	r3, #12
    385e:	18fb      	adds	r3, r7, r3
    3860:	229f      	movs	r2, #159	; 0x9f
    3862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3864:	230c      	movs	r3, #12
    3866:	18fb      	adds	r3, r7, r3
    3868:	2201      	movs	r2, #1
    386a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
    386c:	230c      	movs	r3, #12
    386e:	18fb      	adds	r3, r7, r3
    3870:	2208      	movs	r2, #8
    3872:	18ba      	adds	r2, r7, r2
    3874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
    3876:	230c      	movs	r3, #12
    3878:	18fb      	adds	r3, r7, r3
    387a:	2203      	movs	r2, #3
    387c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    387e:	230c      	movs	r3, #12
    3880:	18fb      	adds	r3, r7, r3
    3882:	2200      	movs	r2, #0
    3884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    3886:	230c      	movs	r3, #12
    3888:	18fb      	adds	r3, r7, r3
    388a:	6878      	ldr	r0, [r7, #4]
    388c:	466a      	mov	r2, sp
    388e:	68d9      	ldr	r1, [r3, #12]
    3890:	6011      	str	r1, [r2, #0]
    3892:	6819      	ldr	r1, [r3, #0]
    3894:	685a      	ldr	r2, [r3, #4]
    3896:	689b      	ldr	r3, [r3, #8]
    3898:	4c0c      	ldr	r4, [pc, #48]	; (38cc <at25dfx_chip_check_presence+0xa0>)
    389a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	0018      	movs	r0, r3
    38a2:	4b0b      	ldr	r3, [pc, #44]	; (38d0 <at25dfx_chip_check_presence+0xa4>)
    38a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	791b      	ldrb	r3, [r3, #4]
    38aa:	0018      	movs	r0, r3
    38ac:	4b09      	ldr	r3, [pc, #36]	; (38d4 <at25dfx_chip_check_presence+0xa8>)
    38ae:	4798      	blx	r3
    38b0:	0002      	movs	r2, r0
    38b2:	68bb      	ldr	r3, [r7, #8]
    38b4:	429a      	cmp	r2, r3
    38b6:	d101      	bne.n	38bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
    38b8:	2300      	movs	r3, #0
    38ba:	e000      	b.n	38be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
    38bc:	2314      	movs	r3, #20
	}
}
    38be:	0018      	movs	r0, r3
    38c0:	46bd      	mov	sp, r7
    38c2:	b009      	add	sp, #36	; 0x24
    38c4:	bd90      	pop	{r4, r7, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00003215 	.word	0x00003215
    38cc:	000034a9 	.word	0x000034a9
    38d0:	0000325d 	.word	0x0000325d
    38d4:	00003395 	.word	0x00003395

000038d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    38d8:	b590      	push	{r4, r7, lr}
    38da:	b08d      	sub	sp, #52	; 0x34
    38dc:	af02      	add	r7, sp, #8
    38de:	60f8      	str	r0, [r7, #12]
    38e0:	60b9      	str	r1, [r7, #8]
    38e2:	607a      	str	r2, [r7, #4]
    38e4:	001a      	movs	r2, r3
    38e6:	1cbb      	adds	r3, r7, #2
    38e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    38ea:	1cbb      	adds	r3, r7, #2
    38ec:	881a      	ldrh	r2, [r3, #0]
    38ee:	68bb      	ldr	r3, [r7, #8]
    38f0:	18d4      	adds	r4, r2, r3
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	791b      	ldrb	r3, [r3, #4]
    38f6:	0018      	movs	r0, r3
    38f8:	4b21      	ldr	r3, [pc, #132]	; (3980 <at25dfx_chip_read_buffer+0xa8>)
    38fa:	4798      	blx	r3
    38fc:	0003      	movs	r3, r0
    38fe:	429c      	cmp	r4, r3
    3900:	d901      	bls.n	3906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    3902:	2317      	movs	r3, #23
    3904:	e037      	b.n	3976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	2227      	movs	r2, #39	; 0x27
    390c:	18bc      	adds	r4, r7, r2
    390e:	0018      	movs	r0, r3
    3910:	4b1c      	ldr	r3, [pc, #112]	; (3984 <at25dfx_chip_read_buffer+0xac>)
    3912:	4798      	blx	r3
    3914:	0003      	movs	r3, r0
    3916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3918:	2327      	movs	r3, #39	; 0x27
    391a:	18fb      	adds	r3, r7, r3
    391c:	781b      	ldrb	r3, [r3, #0]
    391e:	2b05      	cmp	r3, #5
    3920:	d103      	bne.n	392a <at25dfx_chip_read_buffer+0x52>
		return status;
    3922:	2327      	movs	r3, #39	; 0x27
    3924:	18fb      	adds	r3, r7, r3
    3926:	781b      	ldrb	r3, [r3, #0]
    3928:	e025      	b.n	3976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
    392a:	2314      	movs	r3, #20
    392c:	18fb      	adds	r3, r7, r3
    392e:	220b      	movs	r2, #11
    3930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
    3932:	2314      	movs	r3, #20
    3934:	18fb      	adds	r3, r7, r3
    3936:	2205      	movs	r2, #5
    3938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    393a:	2314      	movs	r3, #20
    393c:	18fb      	adds	r3, r7, r3
    393e:	68ba      	ldr	r2, [r7, #8]
    3940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
    3942:	2314      	movs	r3, #20
    3944:	18fb      	adds	r3, r7, r3
    3946:	687a      	ldr	r2, [r7, #4]
    3948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
    394a:	2314      	movs	r3, #20
    394c:	18fb      	adds	r3, r7, r3
    394e:	1cba      	adds	r2, r7, #2
    3950:	8812      	ldrh	r2, [r2, #0]
    3952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	68f8      	ldr	r0, [r7, #12]
    395a:	466a      	mov	r2, sp
    395c:	68d9      	ldr	r1, [r3, #12]
    395e:	6011      	str	r1, [r2, #0]
    3960:	6819      	ldr	r1, [r3, #0]
    3962:	685a      	ldr	r2, [r3, #4]
    3964:	689b      	ldr	r3, [r3, #8]
    3966:	4c08      	ldr	r4, [pc, #32]	; (3988 <at25dfx_chip_read_buffer+0xb0>)
    3968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	0018      	movs	r0, r3
    3970:	4b06      	ldr	r3, [pc, #24]	; (398c <at25dfx_chip_read_buffer+0xb4>)
    3972:	4798      	blx	r3

	return STATUS_OK;
    3974:	2300      	movs	r3, #0
}
    3976:	0018      	movs	r0, r3
    3978:	46bd      	mov	sp, r7
    397a:	b00b      	add	sp, #44	; 0x2c
    397c:	bd90      	pop	{r4, r7, pc}
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	00003411 	.word	0x00003411
    3984:	00003215 	.word	0x00003215
    3988:	000034a9 	.word	0x000034a9
    398c:	0000325d 	.word	0x0000325d

00003990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    3990:	b590      	push	{r4, r7, lr}
    3992:	b08d      	sub	sp, #52	; 0x34
    3994:	af02      	add	r7, sp, #8
    3996:	60f8      	str	r0, [r7, #12]
    3998:	60b9      	str	r1, [r7, #8]
    399a:	607a      	str	r2, [r7, #4]
    399c:	001a      	movs	r2, r3
    399e:	1cbb      	adds	r3, r7, #2
    39a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    39a2:	1cbb      	adds	r3, r7, #2
    39a4:	881a      	ldrh	r2, [r3, #0]
    39a6:	68bb      	ldr	r3, [r7, #8]
    39a8:	18d4      	adds	r4, r2, r3
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	791b      	ldrb	r3, [r3, #4]
    39ae:	0018      	movs	r0, r3
    39b0:	4b5b      	ldr	r3, [pc, #364]	; (3b20 <at25dfx_chip_write_buffer+0x190>)
    39b2:	4798      	blx	r3
    39b4:	0003      	movs	r3, r0
    39b6:	429c      	cmp	r4, r3
    39b8:	d901      	bls.n	39be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    39ba:	2317      	movs	r3, #23
    39bc:	e0ab      	b.n	3b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	2227      	movs	r2, #39	; 0x27
    39c4:	18bc      	adds	r4, r7, r2
    39c6:	0018      	movs	r0, r3
    39c8:	4b56      	ldr	r3, [pc, #344]	; (3b24 <at25dfx_chip_write_buffer+0x194>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    39d0:	2327      	movs	r3, #39	; 0x27
    39d2:	18fb      	adds	r3, r7, r3
    39d4:	781b      	ldrb	r3, [r3, #0]
    39d6:	2b05      	cmp	r3, #5
    39d8:	d103      	bne.n	39e2 <at25dfx_chip_write_buffer+0x52>
		return status;
    39da:	2327      	movs	r3, #39	; 0x27
    39dc:	18fb      	adds	r3, r7, r3
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	e099      	b.n	3b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	0018      	movs	r0, r3
    39e6:	4b50      	ldr	r3, [pc, #320]	; (3b28 <at25dfx_chip_write_buffer+0x198>)
    39e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
    39ea:	2314      	movs	r3, #20
    39ec:	18fb      	adds	r3, r7, r3
    39ee:	2202      	movs	r2, #2
    39f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    39f2:	2314      	movs	r3, #20
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	2204      	movs	r2, #4
    39f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    39fa:	2314      	movs	r3, #20
    39fc:	18fb      	adds	r3, r7, r3
    39fe:	68ba      	ldr	r2, [r7, #8]
    3a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
    3a02:	2314      	movs	r3, #20
    3a04:	18fb      	adds	r3, r7, r3
    3a06:	687a      	ldr	r2, [r7, #4]
    3a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    3a0a:	68bb      	ldr	r3, [r7, #8]
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	22ff      	movs	r2, #255	; 0xff
    3a10:	4013      	ands	r3, r2
    3a12:	b29a      	uxth	r2, r3
    3a14:	2324      	movs	r3, #36	; 0x24
    3a16:	18fb      	adds	r3, r7, r3
    3a18:	2180      	movs	r1, #128	; 0x80
    3a1a:	0049      	lsls	r1, r1, #1
    3a1c:	1a8a      	subs	r2, r1, r2
    3a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
    3a20:	1cbb      	adds	r3, r7, #2
    3a22:	2224      	movs	r2, #36	; 0x24
    3a24:	18ba      	adds	r2, r7, r2
    3a26:	8810      	ldrh	r0, [r2, #0]
    3a28:	881b      	ldrh	r3, [r3, #0]
    3a2a:	b299      	uxth	r1, r3
    3a2c:	b282      	uxth	r2, r0
    3a2e:	4291      	cmp	r1, r2
    3a30:	d900      	bls.n	3a34 <at25dfx_chip_write_buffer+0xa4>
    3a32:	1c03      	adds	r3, r0, #0
    3a34:	b29a      	uxth	r2, r3
    3a36:	2314      	movs	r3, #20
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3a3c:	2314      	movs	r3, #20
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	68f8      	ldr	r0, [r7, #12]
    3a42:	466a      	mov	r2, sp
    3a44:	68d9      	ldr	r1, [r3, #12]
    3a46:	6011      	str	r1, [r2, #0]
    3a48:	6819      	ldr	r1, [r3, #0]
    3a4a:	685a      	ldr	r2, [r3, #4]
    3a4c:	689b      	ldr	r3, [r3, #8]
    3a4e:	4c37      	ldr	r4, [pc, #220]	; (3b2c <at25dfx_chip_write_buffer+0x19c>)
    3a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    3a52:	2327      	movs	r3, #39	; 0x27
    3a54:	18fc      	adds	r4, r7, r3
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	0018      	movs	r0, r3
    3a5a:	4b35      	ldr	r3, [pc, #212]	; (3b30 <at25dfx_chip_write_buffer+0x1a0>)
    3a5c:	4798      	blx	r3
    3a5e:	0003      	movs	r3, r0
    3a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
    3a62:	2314      	movs	r3, #20
    3a64:	18fb      	adds	r3, r7, r3
    3a66:	899a      	ldrh	r2, [r3, #12]
    3a68:	1cbb      	adds	r3, r7, #2
    3a6a:	1cb9      	adds	r1, r7, #2
    3a6c:	8809      	ldrh	r1, [r1, #0]
    3a6e:	1a8a      	subs	r2, r1, r2
    3a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
    3a72:	e03f      	b.n	3af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
    3a74:	68fb      	ldr	r3, [r7, #12]
    3a76:	0018      	movs	r0, r3
    3a78:	4b2b      	ldr	r3, [pc, #172]	; (3b28 <at25dfx_chip_write_buffer+0x198>)
    3a7a:	4798      	blx	r3

		cmd.address += cmd.length;
    3a7c:	2314      	movs	r3, #20
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	685b      	ldr	r3, [r3, #4]
    3a82:	2214      	movs	r2, #20
    3a84:	18ba      	adds	r2, r7, r2
    3a86:	8992      	ldrh	r2, [r2, #12]
    3a88:	189a      	adds	r2, r3, r2
    3a8a:	2314      	movs	r3, #20
    3a8c:	18fb      	adds	r3, r7, r3
    3a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
    3a90:	2314      	movs	r3, #20
    3a92:	18fb      	adds	r3, r7, r3
    3a94:	689b      	ldr	r3, [r3, #8]
    3a96:	2214      	movs	r2, #20
    3a98:	18ba      	adds	r2, r7, r2
    3a9a:	8992      	ldrh	r2, [r2, #12]
    3a9c:	189a      	adds	r2, r3, r2
    3a9e:	2314      	movs	r3, #20
    3aa0:	18fb      	adds	r3, r7, r3
    3aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    3aa4:	1cbb      	adds	r3, r7, #2
    3aa6:	881b      	ldrh	r3, [r3, #0]
    3aa8:	b299      	uxth	r1, r3
    3aaa:	2280      	movs	r2, #128	; 0x80
    3aac:	0052      	lsls	r2, r2, #1
    3aae:	4291      	cmp	r1, r2
    3ab0:	d901      	bls.n	3ab6 <at25dfx_chip_write_buffer+0x126>
    3ab2:	2380      	movs	r3, #128	; 0x80
    3ab4:	005b      	lsls	r3, r3, #1
    3ab6:	b29a      	uxth	r2, r3
    3ab8:	2314      	movs	r3, #20
    3aba:	18fb      	adds	r3, r7, r3
    3abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3abe:	2314      	movs	r3, #20
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	68f8      	ldr	r0, [r7, #12]
    3ac4:	466a      	mov	r2, sp
    3ac6:	68d9      	ldr	r1, [r3, #12]
    3ac8:	6011      	str	r1, [r2, #0]
    3aca:	6819      	ldr	r1, [r3, #0]
    3acc:	685a      	ldr	r2, [r3, #4]
    3ace:	689b      	ldr	r3, [r3, #8]
    3ad0:	4c16      	ldr	r4, [pc, #88]	; (3b2c <at25dfx_chip_write_buffer+0x19c>)
    3ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
    3ad4:	2327      	movs	r3, #39	; 0x27
    3ad6:	18fc      	adds	r4, r7, r3
    3ad8:	68fb      	ldr	r3, [r7, #12]
    3ada:	0018      	movs	r0, r3
    3adc:	4b14      	ldr	r3, [pc, #80]	; (3b30 <at25dfx_chip_write_buffer+0x1a0>)
    3ade:	4798      	blx	r3
    3ae0:	0003      	movs	r3, r0
    3ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
    3ae4:	2314      	movs	r3, #20
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	899a      	ldrh	r2, [r3, #12]
    3aea:	1cbb      	adds	r3, r7, #2
    3aec:	1cb9      	adds	r1, r7, #2
    3aee:	8809      	ldrh	r1, [r1, #0]
    3af0:	1a8a      	subs	r2, r1, r2
    3af2:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
    3af4:	1cbb      	adds	r3, r7, #2
    3af6:	881b      	ldrh	r3, [r3, #0]
    3af8:	2b00      	cmp	r3, #0
    3afa:	d004      	beq.n	3b06 <at25dfx_chip_write_buffer+0x176>
    3afc:	2327      	movs	r3, #39	; 0x27
    3afe:	18fb      	adds	r3, r7, r3
    3b00:	781b      	ldrb	r3, [r3, #0]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d0b6      	beq.n	3a74 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	0018      	movs	r0, r3
    3b0c:	4b09      	ldr	r3, [pc, #36]	; (3b34 <at25dfx_chip_write_buffer+0x1a4>)
    3b0e:	4798      	blx	r3

	return status;
    3b10:	2327      	movs	r3, #39	; 0x27
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	781b      	ldrb	r3, [r3, #0]
}
    3b16:	0018      	movs	r0, r3
    3b18:	46bd      	mov	sp, r7
    3b1a:	b00b      	add	sp, #44	; 0x2c
    3b1c:	bd90      	pop	{r4, r7, pc}
    3b1e:	46c0      	nop			; (mov r8, r8)
    3b20:	00003411 	.word	0x00003411
    3b24:	00003215 	.word	0x00003215
    3b28:	000037d9 	.word	0x000037d9
    3b2c:	000035b1 	.word	0x000035b1
    3b30:	000036b5 	.word	0x000036b5
    3b34:	0000325d 	.word	0x0000325d

00003b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    3b38:	b590      	push	{r4, r7, lr}
    3b3a:	b08d      	sub	sp, #52	; 0x34
    3b3c:	af02      	add	r7, sp, #8
    3b3e:	60f8      	str	r0, [r7, #12]
    3b40:	60b9      	str	r1, [r7, #8]
    3b42:	1dfb      	adds	r3, r7, #7
    3b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	791b      	ldrb	r3, [r3, #4]
    3b4a:	0018      	movs	r0, r3
    3b4c:	4b33      	ldr	r3, [pc, #204]	; (3c1c <at25dfx_chip_erase_block+0xe4>)
    3b4e:	4798      	blx	r3
    3b50:	0002      	movs	r2, r0
    3b52:	68bb      	ldr	r3, [r7, #8]
    3b54:	429a      	cmp	r2, r3
    3b56:	d801      	bhi.n	3b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
    3b58:	2317      	movs	r3, #23
    3b5a:	e05b      	b.n	3c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
    3b5c:	68fb      	ldr	r3, [r7, #12]
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	2227      	movs	r2, #39	; 0x27
    3b62:	18bc      	adds	r4, r7, r2
    3b64:	0018      	movs	r0, r3
    3b66:	4b2e      	ldr	r3, [pc, #184]	; (3c20 <at25dfx_chip_erase_block+0xe8>)
    3b68:	4798      	blx	r3
    3b6a:	0003      	movs	r3, r0
    3b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3b6e:	2327      	movs	r3, #39	; 0x27
    3b70:	18fb      	adds	r3, r7, r3
    3b72:	781b      	ldrb	r3, [r3, #0]
    3b74:	2b05      	cmp	r3, #5
    3b76:	d103      	bne.n	3b80 <at25dfx_chip_erase_block+0x48>
		return status;
    3b78:	2327      	movs	r3, #39	; 0x27
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	e049      	b.n	3c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
    3b80:	68fb      	ldr	r3, [r7, #12]
    3b82:	0018      	movs	r0, r3
    3b84:	4b27      	ldr	r3, [pc, #156]	; (3c24 <at25dfx_chip_erase_block+0xec>)
    3b86:	4798      	blx	r3

	switch (block_size) {
    3b88:	1dfb      	adds	r3, r7, #7
    3b8a:	781b      	ldrb	r3, [r3, #0]
    3b8c:	2b01      	cmp	r3, #1
    3b8e:	d008      	beq.n	3ba2 <at25dfx_chip_erase_block+0x6a>
    3b90:	2b02      	cmp	r3, #2
    3b92:	d00b      	beq.n	3bac <at25dfx_chip_erase_block+0x74>
    3b94:	2b00      	cmp	r3, #0
    3b96:	d10e      	bne.n	3bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    3b98:	2314      	movs	r3, #20
    3b9a:	18fb      	adds	r3, r7, r3
    3b9c:	2220      	movs	r2, #32
    3b9e:	701a      	strb	r2, [r3, #0]
		break;
    3ba0:	e00d      	b.n	3bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    3ba2:	2314      	movs	r3, #20
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	2252      	movs	r2, #82	; 0x52
    3ba8:	701a      	strb	r2, [r3, #0]
		break;
    3baa:	e008      	b.n	3bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    3bac:	2314      	movs	r3, #20
    3bae:	18fb      	adds	r3, r7, r3
    3bb0:	22d8      	movs	r2, #216	; 0xd8
    3bb2:	701a      	strb	r2, [r3, #0]
		break;
    3bb4:	e003      	b.n	3bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    3bb6:	2314      	movs	r3, #20
    3bb8:	18fb      	adds	r3, r7, r3
    3bba:	2200      	movs	r2, #0
    3bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
    3bbe:	2314      	movs	r3, #20
    3bc0:	18fb      	adds	r3, r7, r3
    3bc2:	2204      	movs	r2, #4
    3bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    3bc6:	2314      	movs	r3, #20
    3bc8:	18fb      	adds	r3, r7, r3
    3bca:	68ba      	ldr	r2, [r7, #8]
    3bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    3bce:	2314      	movs	r3, #20
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	2200      	movs	r2, #0
    3bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    3bd6:	2314      	movs	r3, #20
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	2200      	movs	r2, #0
    3bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3bde:	2314      	movs	r3, #20
    3be0:	18fb      	adds	r3, r7, r3
    3be2:	68f8      	ldr	r0, [r7, #12]
    3be4:	466a      	mov	r2, sp
    3be6:	68d9      	ldr	r1, [r3, #12]
    3be8:	6011      	str	r1, [r2, #0]
    3bea:	6819      	ldr	r1, [r3, #0]
    3bec:	685a      	ldr	r2, [r3, #4]
    3bee:	689b      	ldr	r3, [r3, #8]
    3bf0:	4c0d      	ldr	r4, [pc, #52]	; (3c28 <at25dfx_chip_erase_block+0xf0>)
    3bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    3bf4:	2327      	movs	r3, #39	; 0x27
    3bf6:	18fc      	adds	r4, r7, r3
    3bf8:	68fb      	ldr	r3, [r7, #12]
    3bfa:	0018      	movs	r0, r3
    3bfc:	4b0b      	ldr	r3, [pc, #44]	; (3c2c <at25dfx_chip_erase_block+0xf4>)
    3bfe:	4798      	blx	r3
    3c00:	0003      	movs	r3, r0
    3c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	681b      	ldr	r3, [r3, #0]
    3c08:	0018      	movs	r0, r3
    3c0a:	4b09      	ldr	r3, [pc, #36]	; (3c30 <at25dfx_chip_erase_block+0xf8>)
    3c0c:	4798      	blx	r3

	return status;
    3c0e:	2327      	movs	r3, #39	; 0x27
    3c10:	18fb      	adds	r3, r7, r3
    3c12:	781b      	ldrb	r3, [r3, #0]
}
    3c14:	0018      	movs	r0, r3
    3c16:	46bd      	mov	sp, r7
    3c18:	b00b      	add	sp, #44	; 0x2c
    3c1a:	bd90      	pop	{r4, r7, pc}
    3c1c:	00003411 	.word	0x00003411
    3c20:	00003215 	.word	0x00003215
    3c24:	000037d9 	.word	0x000037d9
    3c28:	000035b1 	.word	0x000035b1
    3c2c:	000036b5 	.word	0x000036b5
    3c30:	0000325d 	.word	0x0000325d

00003c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    3c34:	b590      	push	{r4, r7, lr}
    3c36:	b08b      	sub	sp, #44	; 0x2c
    3c38:	af02      	add	r7, sp, #8
    3c3a:	6078      	str	r0, [r7, #4]
    3c3c:	000a      	movs	r2, r1
    3c3e:	1cfb      	adds	r3, r7, #3
    3c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	681b      	ldr	r3, [r3, #0]
    3c46:	221f      	movs	r2, #31
    3c48:	18bc      	adds	r4, r7, r2
    3c4a:	0018      	movs	r0, r3
    3c4c:	4b22      	ldr	r3, [pc, #136]	; (3cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
    3c4e:	4798      	blx	r3
    3c50:	0003      	movs	r3, r0
    3c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3c54:	231f      	movs	r3, #31
    3c56:	18fb      	adds	r3, r7, r3
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	2b05      	cmp	r3, #5
    3c5c:	d103      	bne.n	3c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
    3c5e:	231f      	movs	r3, #31
    3c60:	18fb      	adds	r3, r7, r3
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	e033      	b.n	3cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	0018      	movs	r0, r3
    3c6a:	4b1c      	ldr	r3, [pc, #112]	; (3cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
    3c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    3c6e:	1cfb      	adds	r3, r7, #3
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d001      	beq.n	3c7a <at25dfx_chip_set_global_sector_protect+0x46>
    3c76:	223c      	movs	r2, #60	; 0x3c
    3c78:	e000      	b.n	3c7c <at25dfx_chip_set_global_sector_protect+0x48>
    3c7a:	2200      	movs	r2, #0
    3c7c:	230b      	movs	r3, #11
    3c7e:	18fb      	adds	r3, r7, r3
    3c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
    3c82:	230c      	movs	r3, #12
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	2201      	movs	r2, #1
    3c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3c8a:	230c      	movs	r3, #12
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	2201      	movs	r2, #1
    3c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
    3c92:	230c      	movs	r3, #12
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	2201      	movs	r2, #1
    3c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
    3c9a:	230c      	movs	r3, #12
    3c9c:	18fb      	adds	r3, r7, r3
    3c9e:	220b      	movs	r2, #11
    3ca0:	18ba      	adds	r2, r7, r2
    3ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3ca4:	230c      	movs	r3, #12
    3ca6:	18fb      	adds	r3, r7, r3
    3ca8:	2200      	movs	r2, #0
    3caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3cac:	230c      	movs	r3, #12
    3cae:	18fb      	adds	r3, r7, r3
    3cb0:	6878      	ldr	r0, [r7, #4]
    3cb2:	466a      	mov	r2, sp
    3cb4:	68d9      	ldr	r1, [r3, #12]
    3cb6:	6011      	str	r1, [r2, #0]
    3cb8:	6819      	ldr	r1, [r3, #0]
    3cba:	685a      	ldr	r2, [r3, #4]
    3cbc:	689b      	ldr	r3, [r3, #8]
    3cbe:	4c08      	ldr	r4, [pc, #32]	; (3ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
    3cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
    3cca:	4798      	blx	r3

	return STATUS_OK;
    3ccc:	2300      	movs	r3, #0
}
    3cce:	0018      	movs	r0, r3
    3cd0:	46bd      	mov	sp, r7
    3cd2:	b009      	add	sp, #36	; 0x24
    3cd4:	bd90      	pop	{r4, r7, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	00003215 	.word	0x00003215
    3cdc:	000037d9 	.word	0x000037d9
    3ce0:	000035b1 	.word	0x000035b1
    3ce4:	0000325d 	.word	0x0000325d

00003ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
    3ce8:	b590      	push	{r4, r7, lr}
    3cea:	b08d      	sub	sp, #52	; 0x34
    3cec:	af02      	add	r7, sp, #8
    3cee:	60f8      	str	r0, [r7, #12]
    3cf0:	60b9      	str	r1, [r7, #8]
    3cf2:	1dfb      	adds	r3, r7, #7
    3cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	791b      	ldrb	r3, [r3, #4]
    3cfa:	0018      	movs	r0, r3
    3cfc:	4b26      	ldr	r3, [pc, #152]	; (3d98 <at25dfx_chip_set_sector_protect+0xb0>)
    3cfe:	4798      	blx	r3
    3d00:	0002      	movs	r2, r0
    3d02:	68bb      	ldr	r3, [r7, #8]
    3d04:	429a      	cmp	r2, r3
    3d06:	d801      	bhi.n	3d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
    3d08:	2317      	movs	r3, #23
    3d0a:	e040      	b.n	3d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
    3d0c:	68fb      	ldr	r3, [r7, #12]
    3d0e:	681b      	ldr	r3, [r3, #0]
    3d10:	2227      	movs	r2, #39	; 0x27
    3d12:	18bc      	adds	r4, r7, r2
    3d14:	0018      	movs	r0, r3
    3d16:	4b21      	ldr	r3, [pc, #132]	; (3d9c <at25dfx_chip_set_sector_protect+0xb4>)
    3d18:	4798      	blx	r3
    3d1a:	0003      	movs	r3, r0
    3d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3d1e:	2327      	movs	r3, #39	; 0x27
    3d20:	18fb      	adds	r3, r7, r3
    3d22:	781b      	ldrb	r3, [r3, #0]
    3d24:	2b05      	cmp	r3, #5
    3d26:	d103      	bne.n	3d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
    3d28:	2327      	movs	r3, #39	; 0x27
    3d2a:	18fb      	adds	r3, r7, r3
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	e02e      	b.n	3d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
    3d30:	68fb      	ldr	r3, [r7, #12]
    3d32:	0018      	movs	r0, r3
    3d34:	4b1a      	ldr	r3, [pc, #104]	; (3da0 <at25dfx_chip_set_sector_protect+0xb8>)
    3d36:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
    3d38:	1dfb      	adds	r3, r7, #7
    3d3a:	781b      	ldrb	r3, [r3, #0]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d001      	beq.n	3d44 <at25dfx_chip_set_sector_protect+0x5c>
    3d40:	2236      	movs	r2, #54	; 0x36
    3d42:	e000      	b.n	3d46 <at25dfx_chip_set_sector_protect+0x5e>
    3d44:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
    3d46:	2314      	movs	r3, #20
    3d48:	18fb      	adds	r3, r7, r3
    3d4a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    3d4c:	2314      	movs	r3, #20
    3d4e:	18fb      	adds	r3, r7, r3
    3d50:	2204      	movs	r2, #4
    3d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    3d54:	2314      	movs	r3, #20
    3d56:	18fb      	adds	r3, r7, r3
    3d58:	68ba      	ldr	r2, [r7, #8]
    3d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    3d5c:	2314      	movs	r3, #20
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	2200      	movs	r2, #0
    3d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    3d64:	2314      	movs	r3, #20
    3d66:	18fb      	adds	r3, r7, r3
    3d68:	2200      	movs	r2, #0
    3d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3d6c:	2314      	movs	r3, #20
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	68f8      	ldr	r0, [r7, #12]
    3d72:	466a      	mov	r2, sp
    3d74:	68d9      	ldr	r1, [r3, #12]
    3d76:	6011      	str	r1, [r2, #0]
    3d78:	6819      	ldr	r1, [r3, #0]
    3d7a:	685a      	ldr	r2, [r3, #4]
    3d7c:	689b      	ldr	r3, [r3, #8]
    3d7e:	4c09      	ldr	r4, [pc, #36]	; (3da4 <at25dfx_chip_set_sector_protect+0xbc>)
    3d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    3d82:	68fb      	ldr	r3, [r7, #12]
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	0018      	movs	r0, r3
    3d88:	4b07      	ldr	r3, [pc, #28]	; (3da8 <at25dfx_chip_set_sector_protect+0xc0>)
    3d8a:	4798      	blx	r3

	return STATUS_OK;
    3d8c:	2300      	movs	r3, #0
}
    3d8e:	0018      	movs	r0, r3
    3d90:	46bd      	mov	sp, r7
    3d92:	b00b      	add	sp, #44	; 0x2c
    3d94:	bd90      	pop	{r4, r7, pc}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	00003411 	.word	0x00003411
    3d9c:	00003215 	.word	0x00003215
    3da0:	000037d9 	.word	0x000037d9
    3da4:	000035b1 	.word	0x000035b1
    3da8:	0000325d 	.word	0x0000325d

00003dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    3dac:	b590      	push	{r4, r7, lr}
    3dae:	b08b      	sub	sp, #44	; 0x2c
    3db0:	af02      	add	r7, sp, #8
    3db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	221f      	movs	r2, #31
    3dba:	18bc      	adds	r4, r7, r2
    3dbc:	0018      	movs	r0, r3
    3dbe:	4b1b      	ldr	r3, [pc, #108]	; (3e2c <at25dfx_chip_sleep+0x80>)
    3dc0:	4798      	blx	r3
    3dc2:	0003      	movs	r3, r0
    3dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3dc6:	231f      	movs	r3, #31
    3dc8:	18fb      	adds	r3, r7, r3
    3dca:	781b      	ldrb	r3, [r3, #0]
    3dcc:	2b05      	cmp	r3, #5
    3dce:	d103      	bne.n	3dd8 <at25dfx_chip_sleep+0x2c>
		return status;
    3dd0:	231f      	movs	r3, #31
    3dd2:	18fb      	adds	r3, r7, r3
    3dd4:	781b      	ldrb	r3, [r3, #0]
    3dd6:	e024      	b.n	3e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
    3dd8:	230c      	movs	r3, #12
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	22b9      	movs	r2, #185	; 0xb9
    3dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3de0:	230c      	movs	r3, #12
    3de2:	18fb      	adds	r3, r7, r3
    3de4:	2201      	movs	r2, #1
    3de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    3de8:	230c      	movs	r3, #12
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	2200      	movs	r2, #0
    3dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3df0:	230c      	movs	r3, #12
    3df2:	18fb      	adds	r3, r7, r3
    3df4:	2200      	movs	r2, #0
    3df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    3df8:	230c      	movs	r3, #12
    3dfa:	18fb      	adds	r3, r7, r3
    3dfc:	2200      	movs	r2, #0
    3dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3e00:	230c      	movs	r3, #12
    3e02:	18fb      	adds	r3, r7, r3
    3e04:	6878      	ldr	r0, [r7, #4]
    3e06:	466a      	mov	r2, sp
    3e08:	68d9      	ldr	r1, [r3, #12]
    3e0a:	6011      	str	r1, [r2, #0]
    3e0c:	6819      	ldr	r1, [r3, #0]
    3e0e:	685a      	ldr	r2, [r3, #4]
    3e10:	689b      	ldr	r3, [r3, #8]
    3e12:	4c07      	ldr	r4, [pc, #28]	; (3e30 <at25dfx_chip_sleep+0x84>)
    3e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	0018      	movs	r0, r3
    3e1c:	4b05      	ldr	r3, [pc, #20]	; (3e34 <at25dfx_chip_sleep+0x88>)
    3e1e:	4798      	blx	r3

	return STATUS_OK;
    3e20:	2300      	movs	r3, #0
}
    3e22:	0018      	movs	r0, r3
    3e24:	46bd      	mov	sp, r7
    3e26:	b009      	add	sp, #36	; 0x24
    3e28:	bd90      	pop	{r4, r7, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	00003215 	.word	0x00003215
    3e30:	000035b1 	.word	0x000035b1
    3e34:	0000325d 	.word	0x0000325d

00003e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    3e38:	b590      	push	{r4, r7, lr}
    3e3a:	b08b      	sub	sp, #44	; 0x2c
    3e3c:	af02      	add	r7, sp, #8
    3e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	681b      	ldr	r3, [r3, #0]
    3e44:	221f      	movs	r2, #31
    3e46:	18bc      	adds	r4, r7, r2
    3e48:	0018      	movs	r0, r3
    3e4a:	4b1b      	ldr	r3, [pc, #108]	; (3eb8 <at25dfx_chip_wake+0x80>)
    3e4c:	4798      	blx	r3
    3e4e:	0003      	movs	r3, r0
    3e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3e52:	231f      	movs	r3, #31
    3e54:	18fb      	adds	r3, r7, r3
    3e56:	781b      	ldrb	r3, [r3, #0]
    3e58:	2b05      	cmp	r3, #5
    3e5a:	d103      	bne.n	3e64 <at25dfx_chip_wake+0x2c>
		return status;
    3e5c:	231f      	movs	r3, #31
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	e024      	b.n	3eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
    3e64:	230c      	movs	r3, #12
    3e66:	18fb      	adds	r3, r7, r3
    3e68:	22ab      	movs	r2, #171	; 0xab
    3e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3e6c:	230c      	movs	r3, #12
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	2201      	movs	r2, #1
    3e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    3e74:	230c      	movs	r3, #12
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	2200      	movs	r2, #0
    3e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3e7c:	230c      	movs	r3, #12
    3e7e:	18fb      	adds	r3, r7, r3
    3e80:	2200      	movs	r2, #0
    3e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    3e84:	230c      	movs	r3, #12
    3e86:	18fb      	adds	r3, r7, r3
    3e88:	2200      	movs	r2, #0
    3e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3e8c:	230c      	movs	r3, #12
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	6878      	ldr	r0, [r7, #4]
    3e92:	466a      	mov	r2, sp
    3e94:	68d9      	ldr	r1, [r3, #12]
    3e96:	6011      	str	r1, [r2, #0]
    3e98:	6819      	ldr	r1, [r3, #0]
    3e9a:	685a      	ldr	r2, [r3, #4]
    3e9c:	689b      	ldr	r3, [r3, #8]
    3e9e:	4c07      	ldr	r4, [pc, #28]	; (3ebc <at25dfx_chip_wake+0x84>)
    3ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	681b      	ldr	r3, [r3, #0]
    3ea6:	0018      	movs	r0, r3
    3ea8:	4b05      	ldr	r3, [pc, #20]	; (3ec0 <at25dfx_chip_wake+0x88>)
    3eaa:	4798      	blx	r3

	return STATUS_OK;
    3eac:	2300      	movs	r3, #0
    3eae:	0018      	movs	r0, r3
    3eb0:	46bd      	mov	sp, r7
    3eb2:	b009      	add	sp, #36	; 0x24
    3eb4:	bd90      	pop	{r4, r7, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	00003215 	.word	0x00003215
    3ebc:	000035b1 	.word	0x000035b1
    3ec0:	0000325d 	.word	0x0000325d

00003ec4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3ec8:	4b04      	ldr	r3, [pc, #16]	; (3edc <system_interrupt_enable_global+0x18>)
    3eca:	2201      	movs	r2, #1
    3ecc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3ece:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3ed2:	b662      	cpsie	i
}
    3ed4:	46c0      	nop			; (mov r8, r8)
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	20000000 	.word	0x20000000

00003ee0 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3ee4:	b672      	cpsid	i
    3ee6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3eea:	4b03      	ldr	r3, [pc, #12]	; (3ef8 <system_interrupt_disable_global+0x18>)
    3eec:	2200      	movs	r2, #0
    3eee:	701a      	strb	r2, [r3, #0]
}
    3ef0:	46c0      	nop			; (mov r8, r8)
    3ef2:	46bd      	mov	sp, r7
    3ef4:	bd80      	pop	{r7, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	20000000 	.word	0x20000000

00003efc <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b084      	sub	sp, #16
    3f00:	af00      	add	r7, sp, #0
    3f02:	60f8      	str	r0, [r7, #12]
    3f04:	60b9      	str	r1, [r7, #8]
    3f06:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
    3f08:	68fb      	ldr	r3, [r7, #12]
    3f0a:	2203      	movs	r2, #3
    3f0c:	4013      	ands	r3, r2
    3f0e:	d001      	beq.n	3f14 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
    3f10:	2318      	movs	r3, #24
    3f12:	e040      	b.n	3f96 <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
    3f14:	4b22      	ldr	r3, [pc, #136]	; (3fa0 <dsu_crc32_cal+0xa4>)
    3f16:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
    3f18:	2322      	movs	r3, #34	; 0x22
    3f1a:	425b      	negs	r3, r3
    3f1c:	0019      	movs	r1, r3
    3f1e:	2021      	movs	r0, #33	; 0x21
    3f20:	4b20      	ldr	r3, [pc, #128]	; (3fa4 <dsu_crc32_cal+0xa8>)
    3f22:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
    3f24:	4a20      	ldr	r2, [pc, #128]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
    3f2c:	4b1e      	ldr	r3, [pc, #120]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f2e:	68fa      	ldr	r2, [r7, #12]
    3f30:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
    3f32:	4b1d      	ldr	r3, [pc, #116]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f34:	68ba      	ldr	r2, [r7, #8]
    3f36:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
    3f38:	4a1b      	ldr	r2, [pc, #108]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f3a:	7813      	ldrb	r3, [r2, #0]
    3f3c:	2104      	movs	r1, #4
    3f3e:	430b      	orrs	r3, r1
    3f40:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	4b18      	ldr	r3, [pc, #96]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f46:	785b      	ldrb	r3, [r3, #1]
    3f48:	b2db      	uxtb	r3, r3
    3f4a:	001a      	movs	r2, r3
    3f4c:	2301      	movs	r3, #1
    3f4e:	4013      	ands	r3, r2
    3f50:	2b01      	cmp	r3, #1
    3f52:	d1f7      	bne.n	3f44 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
    3f54:	4b14      	ldr	r3, [pc, #80]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f56:	785b      	ldrb	r3, [r3, #1]
    3f58:	b2db      	uxtb	r3, r3
    3f5a:	001a      	movs	r2, r3
    3f5c:	2304      	movs	r3, #4
    3f5e:	4013      	ands	r3, r2
    3f60:	d009      	beq.n	3f76 <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
    3f62:	2322      	movs	r3, #34	; 0x22
    3f64:	425b      	negs	r3, r3
    3f66:	0019      	movs	r1, r3
    3f68:	2021      	movs	r0, #33	; 0x21
    3f6a:	4b10      	ldr	r3, [pc, #64]	; (3fac <dsu_crc32_cal+0xb0>)
    3f6c:	4798      	blx	r3
		system_interrupt_enable_global();
    3f6e:	4b10      	ldr	r3, [pc, #64]	; (3fb0 <dsu_crc32_cal+0xb4>)
    3f70:	4798      	blx	r3
		return STATUS_ERR_IO;
    3f72:	2310      	movs	r3, #16
    3f74:	e00f      	b.n	3f96 <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
    3f76:	4b0c      	ldr	r3, [pc, #48]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f78:	68da      	ldr	r2, [r3, #12]
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
    3f7e:	4b0a      	ldr	r3, [pc, #40]	; (3fa8 <dsu_crc32_cal+0xac>)
    3f80:	2201      	movs	r2, #1
    3f82:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
    3f84:	2322      	movs	r3, #34	; 0x22
    3f86:	425b      	negs	r3, r3
    3f88:	0019      	movs	r1, r3
    3f8a:	2021      	movs	r0, #33	; 0x21
    3f8c:	4b07      	ldr	r3, [pc, #28]	; (3fac <dsu_crc32_cal+0xb0>)
    3f8e:	4798      	blx	r3
	system_interrupt_enable_global();
    3f90:	4b07      	ldr	r3, [pc, #28]	; (3fb0 <dsu_crc32_cal+0xb4>)
    3f92:	4798      	blx	r3
	return STATUS_OK;
    3f94:	2300      	movs	r3, #0
    3f96:	0018      	movs	r0, r3
    3f98:	46bd      	mov	sp, r7
    3f9a:	b004      	add	sp, #16
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	00003ee1 	.word	0x00003ee1
    3fa4:	0000460d 	.word	0x0000460d
    3fa8:	41002000 	.word	0x41002000
    3fac:	00004575 	.word	0x00004575
    3fb0:	00003ec5 	.word	0x00003ec5

00003fb4 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	b082      	sub	sp, #8
    3fb8:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    3fba:	4b07      	ldr	r3, [pc, #28]	; (3fd8 <nvm_is_ready+0x24>)
    3fbc:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	7d1b      	ldrb	r3, [r3, #20]
    3fc2:	b2db      	uxtb	r3, r3
    3fc4:	001a      	movs	r2, r3
    3fc6:	2301      	movs	r3, #1
    3fc8:	4013      	ands	r3, r2
    3fca:	1e5a      	subs	r2, r3, #1
    3fcc:	4193      	sbcs	r3, r2
    3fce:	b2db      	uxtb	r3, r3
}
    3fd0:	0018      	movs	r0, r3
    3fd2:	46bd      	mov	sp, r7
    3fd4:	b002      	add	sp, #8
    3fd6:	bd80      	pop	{r7, pc}
    3fd8:	41004000 	.word	0x41004000

00003fdc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	0002      	movs	r2, r0
    3fe4:	6039      	str	r1, [r7, #0]
    3fe6:	1dfb      	adds	r3, r7, #7
    3fe8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3fea:	1dfb      	adds	r3, r7, #7
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	2b01      	cmp	r3, #1
    3ff0:	d00a      	beq.n	4008 <system_apb_clock_set_mask+0x2c>
    3ff2:	2b02      	cmp	r3, #2
    3ff4:	d00f      	beq.n	4016 <system_apb_clock_set_mask+0x3a>
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d114      	bne.n	4024 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ffa:	4b0e      	ldr	r3, [pc, #56]	; (4034 <system_apb_clock_set_mask+0x58>)
    3ffc:	4a0d      	ldr	r2, [pc, #52]	; (4034 <system_apb_clock_set_mask+0x58>)
    3ffe:	6991      	ldr	r1, [r2, #24]
    4000:	683a      	ldr	r2, [r7, #0]
    4002:	430a      	orrs	r2, r1
    4004:	619a      	str	r2, [r3, #24]
			break;
    4006:	e00f      	b.n	4028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4008:	4b0a      	ldr	r3, [pc, #40]	; (4034 <system_apb_clock_set_mask+0x58>)
    400a:	4a0a      	ldr	r2, [pc, #40]	; (4034 <system_apb_clock_set_mask+0x58>)
    400c:	69d1      	ldr	r1, [r2, #28]
    400e:	683a      	ldr	r2, [r7, #0]
    4010:	430a      	orrs	r2, r1
    4012:	61da      	str	r2, [r3, #28]
			break;
    4014:	e008      	b.n	4028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4016:	4b07      	ldr	r3, [pc, #28]	; (4034 <system_apb_clock_set_mask+0x58>)
    4018:	4a06      	ldr	r2, [pc, #24]	; (4034 <system_apb_clock_set_mask+0x58>)
    401a:	6a11      	ldr	r1, [r2, #32]
    401c:	683a      	ldr	r2, [r7, #0]
    401e:	430a      	orrs	r2, r1
    4020:	621a      	str	r2, [r3, #32]
			break;
    4022:	e001      	b.n	4028 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4024:	2317      	movs	r3, #23
    4026:	e000      	b.n	402a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4028:	2300      	movs	r3, #0
}
    402a:	0018      	movs	r0, r3
    402c:	46bd      	mov	sp, r7
    402e:	b002      	add	sp, #8
    4030:	bd80      	pop	{r7, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	40000400 	.word	0x40000400

00004038 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    4040:	4b2f      	ldr	r3, [pc, #188]	; (4100 <nvm_set_config+0xc8>)
    4042:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    4044:	2104      	movs	r1, #4
    4046:	2001      	movs	r0, #1
    4048:	4b2e      	ldr	r3, [pc, #184]	; (4104 <nvm_set_config+0xcc>)
    404a:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    404c:	68fb      	ldr	r3, [r7, #12]
    404e:	2220      	movs	r2, #32
    4050:	32ff      	adds	r2, #255	; 0xff
    4052:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4054:	4b2c      	ldr	r3, [pc, #176]	; (4108 <nvm_set_config+0xd0>)
    4056:	4798      	blx	r3
    4058:	0003      	movs	r3, r0
    405a:	001a      	movs	r2, r3
    405c:	2301      	movs	r3, #1
    405e:	4053      	eors	r3, r2
    4060:	b2db      	uxtb	r3, r3
    4062:	2b00      	cmp	r3, #0
    4064:	d001      	beq.n	406a <nvm_set_config+0x32>
		return STATUS_BUSY;
    4066:	2305      	movs	r3, #5
    4068:	e045      	b.n	40f6 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	021b      	lsls	r3, r3, #8
    4070:	001a      	movs	r2, r3
    4072:	23c0      	movs	r3, #192	; 0xc0
    4074:	009b      	lsls	r3, r3, #2
    4076:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	785b      	ldrb	r3, [r3, #1]
    407c:	01db      	lsls	r3, r3, #7
    407e:	0019      	movs	r1, r3
    4080:	23ff      	movs	r3, #255	; 0xff
    4082:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4084:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	789b      	ldrb	r3, [r3, #2]
    408a:	005b      	lsls	r3, r3, #1
    408c:	0019      	movs	r1, r3
    408e:	231e      	movs	r3, #30
    4090:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4092:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4094:	687b      	ldr	r3, [r7, #4]
    4096:	78db      	ldrb	r3, [r3, #3]
    4098:	049b      	lsls	r3, r3, #18
    409a:	0019      	movs	r1, r3
    409c:	2380      	movs	r3, #128	; 0x80
    409e:	02db      	lsls	r3, r3, #11
    40a0:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    40a2:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	791b      	ldrb	r3, [r3, #4]
    40a8:	041b      	lsls	r3, r3, #16
    40aa:	0019      	movs	r1, r3
    40ac:	23c0      	movs	r3, #192	; 0xc0
    40ae:	029b      	lsls	r3, r3, #10
    40b0:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    40b2:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	689b      	ldr	r3, [r3, #8]
    40bc:	035b      	lsls	r3, r3, #13
    40be:	0f5b      	lsrs	r3, r3, #29
    40c0:	b2db      	uxtb	r3, r3
    40c2:	001a      	movs	r2, r3
    40c4:	2308      	movs	r3, #8
    40c6:	4093      	lsls	r3, r2
    40c8:	b29a      	uxth	r2, r3
    40ca:	4b10      	ldr	r3, [pc, #64]	; (410c <nvm_set_config+0xd4>)
    40cc:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    40ce:	68fb      	ldr	r3, [r7, #12]
    40d0:	689b      	ldr	r3, [r3, #8]
    40d2:	b29a      	uxth	r2, r3
    40d4:	4b0d      	ldr	r3, [pc, #52]	; (410c <nvm_set_config+0xd4>)
    40d6:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	785a      	ldrb	r2, [r3, #1]
    40dc:	4b0b      	ldr	r3, [pc, #44]	; (410c <nvm_set_config+0xd4>)
    40de:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    40e0:	68fb      	ldr	r3, [r7, #12]
    40e2:	8b1b      	ldrh	r3, [r3, #24]
    40e4:	b29b      	uxth	r3, r3
    40e6:	001a      	movs	r2, r3
    40e8:	2380      	movs	r3, #128	; 0x80
    40ea:	005b      	lsls	r3, r3, #1
    40ec:	4013      	ands	r3, r2
    40ee:	d001      	beq.n	40f4 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    40f0:	2310      	movs	r3, #16
    40f2:	e000      	b.n	40f6 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    40f4:	2300      	movs	r3, #0
}
    40f6:	0018      	movs	r0, r3
    40f8:	46bd      	mov	sp, r7
    40fa:	b004      	add	sp, #16
    40fc:	bd80      	pop	{r7, pc}
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	41004000 	.word	0x41004000
    4104:	00003fdd 	.word	0x00003fdd
    4108:	00003fb5 	.word	0x00003fb5
    410c:	20000084 	.word	0x20000084

00004110 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4110:	b580      	push	{r7, lr}
    4112:	b086      	sub	sp, #24
    4114:	af00      	add	r7, sp, #0
    4116:	60b9      	str	r1, [r7, #8]
    4118:	607a      	str	r2, [r7, #4]
    411a:	230f      	movs	r3, #15
    411c:	18fb      	adds	r3, r7, r3
    411e:	1c02      	adds	r2, r0, #0
    4120:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4122:	4b3a      	ldr	r3, [pc, #232]	; (420c <nvm_execute_command+0xfc>)
    4124:	881b      	ldrh	r3, [r3, #0]
    4126:	001a      	movs	r2, r3
    4128:	4b38      	ldr	r3, [pc, #224]	; (420c <nvm_execute_command+0xfc>)
    412a:	885b      	ldrh	r3, [r3, #2]
    412c:	435a      	muls	r2, r3
    412e:	68bb      	ldr	r3, [r7, #8]
    4130:	429a      	cmp	r2, r3
    4132:	d209      	bcs.n	4148 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4134:	68bb      	ldr	r3, [r7, #8]
    4136:	4a36      	ldr	r2, [pc, #216]	; (4210 <nvm_execute_command+0x100>)
    4138:	4293      	cmp	r3, r2
    413a:	d903      	bls.n	4144 <nvm_execute_command+0x34>
    413c:	68bb      	ldr	r3, [r7, #8]
    413e:	4a35      	ldr	r2, [pc, #212]	; (4214 <nvm_execute_command+0x104>)
    4140:	4293      	cmp	r3, r2
    4142:	d901      	bls.n	4148 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    4144:	2318      	movs	r3, #24
    4146:	e05c      	b.n	4202 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    4148:	4b33      	ldr	r3, [pc, #204]	; (4218 <nvm_execute_command+0x108>)
    414a:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    414c:	697b      	ldr	r3, [r7, #20]
    414e:	685b      	ldr	r3, [r3, #4]
    4150:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4152:	693b      	ldr	r3, [r7, #16]
    4154:	2280      	movs	r2, #128	; 0x80
    4156:	02d2      	lsls	r2, r2, #11
    4158:	431a      	orrs	r2, r3
    415a:	697b      	ldr	r3, [r7, #20]
    415c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    415e:	697b      	ldr	r3, [r7, #20]
    4160:	2220      	movs	r2, #32
    4162:	32ff      	adds	r2, #255	; 0xff
    4164:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4166:	4b2d      	ldr	r3, [pc, #180]	; (421c <nvm_execute_command+0x10c>)
    4168:	4798      	blx	r3
    416a:	0003      	movs	r3, r0
    416c:	001a      	movs	r2, r3
    416e:	2301      	movs	r3, #1
    4170:	4053      	eors	r3, r2
    4172:	b2db      	uxtb	r3, r3
    4174:	2b00      	cmp	r3, #0
    4176:	d004      	beq.n	4182 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4178:	697b      	ldr	r3, [r7, #20]
    417a:	693a      	ldr	r2, [r7, #16]
    417c:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    417e:	2305      	movs	r3, #5
    4180:	e03f      	b.n	4202 <nvm_execute_command+0xf2>
	}

	switch (command) {
    4182:	230f      	movs	r3, #15
    4184:	18fb      	adds	r3, r7, r3
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	2b45      	cmp	r3, #69	; 0x45
    418a:	d81d      	bhi.n	41c8 <nvm_execute_command+0xb8>
    418c:	009a      	lsls	r2, r3, #2
    418e:	4b24      	ldr	r3, [pc, #144]	; (4220 <nvm_execute_command+0x110>)
    4190:	18d3      	adds	r3, r2, r3
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4196:	697b      	ldr	r3, [r7, #20]
    4198:	8b1b      	ldrh	r3, [r3, #24]
    419a:	b29b      	uxth	r3, r3
    419c:	001a      	movs	r2, r3
    419e:	2380      	movs	r3, #128	; 0x80
    41a0:	005b      	lsls	r3, r3, #1
    41a2:	4013      	ands	r3, r2
    41a4:	d004      	beq.n	41b0 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    41a6:	697b      	ldr	r3, [r7, #20]
    41a8:	693a      	ldr	r2, [r7, #16]
    41aa:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    41ac:	2310      	movs	r3, #16
    41ae:	e028      	b.n	4202 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    41b0:	68bb      	ldr	r3, [r7, #8]
    41b2:	089b      	lsrs	r3, r3, #2
    41b4:	005a      	lsls	r2, r3, #1
    41b6:	697b      	ldr	r3, [r7, #20]
    41b8:	61da      	str	r2, [r3, #28]
			break;
    41ba:	e00b      	b.n	41d4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    41bc:	68bb      	ldr	r3, [r7, #8]
    41be:	089b      	lsrs	r3, r3, #2
    41c0:	005a      	lsls	r2, r3, #1
    41c2:	697b      	ldr	r3, [r7, #20]
    41c4:	61da      	str	r2, [r3, #28]
			break;
    41c6:	e005      	b.n	41d4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    41c8:	697b      	ldr	r3, [r7, #20]
    41ca:	693a      	ldr	r2, [r7, #16]
    41cc:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    41ce:	2317      	movs	r3, #23
    41d0:	e017      	b.n	4202 <nvm_execute_command+0xf2>
			break;
    41d2:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    41d4:	230f      	movs	r3, #15
    41d6:	18fb      	adds	r3, r7, r3
    41d8:	781b      	ldrb	r3, [r3, #0]
    41da:	b29b      	uxth	r3, r3
    41dc:	4a11      	ldr	r2, [pc, #68]	; (4224 <nvm_execute_command+0x114>)
    41de:	4313      	orrs	r3, r2
    41e0:	b29a      	uxth	r2, r3
    41e2:	697b      	ldr	r3, [r7, #20]
    41e4:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	4b0c      	ldr	r3, [pc, #48]	; (421c <nvm_execute_command+0x10c>)
    41ea:	4798      	blx	r3
    41ec:	0003      	movs	r3, r0
    41ee:	001a      	movs	r2, r3
    41f0:	2301      	movs	r3, #1
    41f2:	4053      	eors	r3, r2
    41f4:	b2db      	uxtb	r3, r3
    41f6:	2b00      	cmp	r3, #0
    41f8:	d1f6      	bne.n	41e8 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    41fa:	697b      	ldr	r3, [r7, #20]
    41fc:	693a      	ldr	r2, [r7, #16]
    41fe:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4200:	2300      	movs	r3, #0
}
    4202:	0018      	movs	r0, r3
    4204:	46bd      	mov	sp, r7
    4206:	b006      	add	sp, #24
    4208:	bd80      	pop	{r7, pc}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	20000084 	.word	0x20000084
    4210:	00803fff 	.word	0x00803fff
    4214:	00806000 	.word	0x00806000
    4218:	41004000 	.word	0x41004000
    421c:	00003fb5 	.word	0x00003fb5
    4220:	00009440 	.word	0x00009440
    4224:	ffffa500 	.word	0xffffa500

00004228 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4228:	b580      	push	{r7, lr}
    422a:	b088      	sub	sp, #32
    422c:	af00      	add	r7, sp, #0
    422e:	60f8      	str	r0, [r7, #12]
    4230:	60b9      	str	r1, [r7, #8]
    4232:	1dbb      	adds	r3, r7, #6
    4234:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4236:	4b4a      	ldr	r3, [pc, #296]	; (4360 <nvm_write_buffer+0x138>)
    4238:	881b      	ldrh	r3, [r3, #0]
    423a:	001a      	movs	r2, r3
    423c:	4b48      	ldr	r3, [pc, #288]	; (4360 <nvm_write_buffer+0x138>)
    423e:	885b      	ldrh	r3, [r3, #2]
    4240:	435a      	muls	r2, r3
	if (destination_address >
    4242:	68fb      	ldr	r3, [r7, #12]
    4244:	429a      	cmp	r2, r3
    4246:	d201      	bcs.n	424c <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    4248:	2318      	movs	r3, #24
    424a:	e084      	b.n	4356 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    424c:	4b44      	ldr	r3, [pc, #272]	; (4360 <nvm_write_buffer+0x138>)
    424e:	881b      	ldrh	r3, [r3, #0]
    4250:	3b01      	subs	r3, #1
    4252:	001a      	movs	r2, r3
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	4013      	ands	r3, r2
    4258:	d001      	beq.n	425e <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    425a:	2318      	movs	r3, #24
    425c:	e07b      	b.n	4356 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    425e:	4b40      	ldr	r3, [pc, #256]	; (4360 <nvm_write_buffer+0x138>)
    4260:	881b      	ldrh	r3, [r3, #0]
    4262:	1dba      	adds	r2, r7, #6
    4264:	8812      	ldrh	r2, [r2, #0]
    4266:	429a      	cmp	r2, r3
    4268:	d901      	bls.n	426e <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    426a:	2317      	movs	r3, #23
    426c:	e073      	b.n	4356 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    426e:	4b3d      	ldr	r3, [pc, #244]	; (4364 <nvm_write_buffer+0x13c>)
    4270:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4272:	4b3d      	ldr	r3, [pc, #244]	; (4368 <nvm_write_buffer+0x140>)
    4274:	4798      	blx	r3
    4276:	0003      	movs	r3, r0
    4278:	001a      	movs	r2, r3
    427a:	2301      	movs	r3, #1
    427c:	4053      	eors	r3, r2
    427e:	b2db      	uxtb	r3, r3
    4280:	2b00      	cmp	r3, #0
    4282:	d001      	beq.n	4288 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    4284:	2305      	movs	r3, #5
    4286:	e066      	b.n	4356 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4288:	697b      	ldr	r3, [r7, #20]
    428a:	4a38      	ldr	r2, [pc, #224]	; (436c <nvm_write_buffer+0x144>)
    428c:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	4b35      	ldr	r3, [pc, #212]	; (4368 <nvm_write_buffer+0x140>)
    4292:	4798      	blx	r3
    4294:	0003      	movs	r3, r0
    4296:	001a      	movs	r2, r3
    4298:	2301      	movs	r3, #1
    429a:	4053      	eors	r3, r2
    429c:	b2db      	uxtb	r3, r3
    429e:	2b00      	cmp	r3, #0
    42a0:	d1f6      	bne.n	4290 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    42a2:	697b      	ldr	r3, [r7, #20]
    42a4:	2220      	movs	r2, #32
    42a6:	32ff      	adds	r2, #255	; 0xff
    42a8:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    42aa:	68fb      	ldr	r3, [r7, #12]
    42ac:	085b      	lsrs	r3, r3, #1
    42ae:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    42b0:	231a      	movs	r3, #26
    42b2:	18fb      	adds	r3, r7, r3
    42b4:	2200      	movs	r2, #0
    42b6:	801a      	strh	r2, [r3, #0]
    42b8:	e032      	b.n	4320 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    42ba:	231a      	movs	r3, #26
    42bc:	18fb      	adds	r3, r7, r3
    42be:	881b      	ldrh	r3, [r3, #0]
    42c0:	68ba      	ldr	r2, [r7, #8]
    42c2:	18d3      	adds	r3, r2, r3
    42c4:	781a      	ldrb	r2, [r3, #0]
    42c6:	2318      	movs	r3, #24
    42c8:	18fb      	adds	r3, r7, r3
    42ca:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    42cc:	231a      	movs	r3, #26
    42ce:	18fb      	adds	r3, r7, r3
    42d0:	881a      	ldrh	r2, [r3, #0]
    42d2:	1dbb      	adds	r3, r7, #6
    42d4:	881b      	ldrh	r3, [r3, #0]
    42d6:	3b01      	subs	r3, #1
    42d8:	429a      	cmp	r2, r3
    42da:	da11      	bge.n	4300 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    42dc:	231a      	movs	r3, #26
    42de:	18fb      	adds	r3, r7, r3
    42e0:	881b      	ldrh	r3, [r3, #0]
    42e2:	3301      	adds	r3, #1
    42e4:	68ba      	ldr	r2, [r7, #8]
    42e6:	18d3      	adds	r3, r2, r3
    42e8:	781b      	ldrb	r3, [r3, #0]
    42ea:	021b      	lsls	r3, r3, #8
    42ec:	b21a      	sxth	r2, r3
    42ee:	2318      	movs	r3, #24
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	2100      	movs	r1, #0
    42f4:	5e5b      	ldrsh	r3, [r3, r1]
    42f6:	4313      	orrs	r3, r2
    42f8:	b21a      	sxth	r2, r3
    42fa:	2318      	movs	r3, #24
    42fc:	18fb      	adds	r3, r7, r3
    42fe:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    4300:	69fb      	ldr	r3, [r7, #28]
    4302:	1c5a      	adds	r2, r3, #1
    4304:	61fa      	str	r2, [r7, #28]
    4306:	005b      	lsls	r3, r3, #1
    4308:	001a      	movs	r2, r3
    430a:	2318      	movs	r3, #24
    430c:	18fb      	adds	r3, r7, r3
    430e:	881b      	ldrh	r3, [r3, #0]
    4310:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4312:	231a      	movs	r3, #26
    4314:	18fb      	adds	r3, r7, r3
    4316:	221a      	movs	r2, #26
    4318:	18ba      	adds	r2, r7, r2
    431a:	8812      	ldrh	r2, [r2, #0]
    431c:	3202      	adds	r2, #2
    431e:	801a      	strh	r2, [r3, #0]
    4320:	231a      	movs	r3, #26
    4322:	18fa      	adds	r2, r7, r3
    4324:	1dbb      	adds	r3, r7, #6
    4326:	8812      	ldrh	r2, [r2, #0]
    4328:	881b      	ldrh	r3, [r3, #0]
    432a:	429a      	cmp	r2, r3
    432c:	d3c5      	bcc.n	42ba <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    432e:	4b0c      	ldr	r3, [pc, #48]	; (4360 <nvm_write_buffer+0x138>)
    4330:	791b      	ldrb	r3, [r3, #4]
    4332:	2201      	movs	r2, #1
    4334:	4053      	eors	r3, r2
    4336:	b2db      	uxtb	r3, r3
    4338:	2b00      	cmp	r3, #0
    433a:	d00b      	beq.n	4354 <nvm_write_buffer+0x12c>
    433c:	1dbb      	adds	r3, r7, #6
    433e:	881b      	ldrh	r3, [r3, #0]
    4340:	2b3f      	cmp	r3, #63	; 0x3f
    4342:	d807      	bhi.n	4354 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    4344:	68fb      	ldr	r3, [r7, #12]
    4346:	2200      	movs	r2, #0
    4348:	0019      	movs	r1, r3
    434a:	2004      	movs	r0, #4
    434c:	4b08      	ldr	r3, [pc, #32]	; (4370 <nvm_write_buffer+0x148>)
    434e:	4798      	blx	r3
    4350:	0003      	movs	r3, r0
    4352:	e000      	b.n	4356 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    4354:	2300      	movs	r3, #0
}
    4356:	0018      	movs	r0, r3
    4358:	46bd      	mov	sp, r7
    435a:	b008      	add	sp, #32
    435c:	bd80      	pop	{r7, pc}
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	20000084 	.word	0x20000084
    4364:	41004000 	.word	0x41004000
    4368:	00003fb5 	.word	0x00003fb5
    436c:	ffffa544 	.word	0xffffa544
    4370:	00004111 	.word	0x00004111

00004374 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4374:	b580      	push	{r7, lr}
    4376:	b088      	sub	sp, #32
    4378:	af00      	add	r7, sp, #0
    437a:	60f8      	str	r0, [r7, #12]
    437c:	60b9      	str	r1, [r7, #8]
    437e:	1dbb      	adds	r3, r7, #6
    4380:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4382:	4b38      	ldr	r3, [pc, #224]	; (4464 <nvm_read_buffer+0xf0>)
    4384:	881b      	ldrh	r3, [r3, #0]
    4386:	001a      	movs	r2, r3
    4388:	4b36      	ldr	r3, [pc, #216]	; (4464 <nvm_read_buffer+0xf0>)
    438a:	885b      	ldrh	r3, [r3, #2]
    438c:	435a      	muls	r2, r3
	if (source_address >
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	429a      	cmp	r2, r3
    4392:	d201      	bcs.n	4398 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    4394:	2318      	movs	r3, #24
    4396:	e060      	b.n	445a <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4398:	4b32      	ldr	r3, [pc, #200]	; (4464 <nvm_read_buffer+0xf0>)
    439a:	881b      	ldrh	r3, [r3, #0]
    439c:	3b01      	subs	r3, #1
    439e:	001a      	movs	r2, r3
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	4013      	ands	r3, r2
    43a4:	d001      	beq.n	43aa <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    43a6:	2318      	movs	r3, #24
    43a8:	e057      	b.n	445a <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    43aa:	4b2e      	ldr	r3, [pc, #184]	; (4464 <nvm_read_buffer+0xf0>)
    43ac:	881b      	ldrh	r3, [r3, #0]
    43ae:	1dba      	adds	r2, r7, #6
    43b0:	8812      	ldrh	r2, [r2, #0]
    43b2:	429a      	cmp	r2, r3
    43b4:	d901      	bls.n	43ba <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    43b6:	2317      	movs	r3, #23
    43b8:	e04f      	b.n	445a <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    43ba:	4b2b      	ldr	r3, [pc, #172]	; (4468 <nvm_read_buffer+0xf4>)
    43bc:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    43be:	4b2b      	ldr	r3, [pc, #172]	; (446c <nvm_read_buffer+0xf8>)
    43c0:	4798      	blx	r3
    43c2:	0003      	movs	r3, r0
    43c4:	001a      	movs	r2, r3
    43c6:	2301      	movs	r3, #1
    43c8:	4053      	eors	r3, r2
    43ca:	b2db      	uxtb	r3, r3
    43cc:	2b00      	cmp	r3, #0
    43ce:	d001      	beq.n	43d4 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    43d0:	2305      	movs	r3, #5
    43d2:	e042      	b.n	445a <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    43d4:	697b      	ldr	r3, [r7, #20]
    43d6:	2220      	movs	r2, #32
    43d8:	32ff      	adds	r2, #255	; 0xff
    43da:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	085b      	lsrs	r3, r3, #1
    43e0:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    43e2:	231a      	movs	r3, #26
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2200      	movs	r2, #0
    43e8:	801a      	strh	r2, [r3, #0]
    43ea:	e02e      	b.n	444a <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    43ec:	69fb      	ldr	r3, [r7, #28]
    43ee:	1c5a      	adds	r2, r3, #1
    43f0:	61fa      	str	r2, [r7, #28]
    43f2:	005b      	lsls	r3, r3, #1
    43f4:	001a      	movs	r2, r3
    43f6:	2312      	movs	r3, #18
    43f8:	18fb      	adds	r3, r7, r3
    43fa:	8812      	ldrh	r2, [r2, #0]
    43fc:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    43fe:	231a      	movs	r3, #26
    4400:	18fb      	adds	r3, r7, r3
    4402:	881b      	ldrh	r3, [r3, #0]
    4404:	68ba      	ldr	r2, [r7, #8]
    4406:	18d3      	adds	r3, r2, r3
    4408:	2212      	movs	r2, #18
    440a:	18ba      	adds	r2, r7, r2
    440c:	8812      	ldrh	r2, [r2, #0]
    440e:	b2d2      	uxtb	r2, r2
    4410:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    4412:	231a      	movs	r3, #26
    4414:	18fb      	adds	r3, r7, r3
    4416:	881a      	ldrh	r2, [r3, #0]
    4418:	1dbb      	adds	r3, r7, #6
    441a:	881b      	ldrh	r3, [r3, #0]
    441c:	3b01      	subs	r3, #1
    441e:	429a      	cmp	r2, r3
    4420:	da0c      	bge.n	443c <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    4422:	231a      	movs	r3, #26
    4424:	18fb      	adds	r3, r7, r3
    4426:	881b      	ldrh	r3, [r3, #0]
    4428:	3301      	adds	r3, #1
    442a:	68ba      	ldr	r2, [r7, #8]
    442c:	18d3      	adds	r3, r2, r3
    442e:	2212      	movs	r2, #18
    4430:	18ba      	adds	r2, r7, r2
    4432:	8812      	ldrh	r2, [r2, #0]
    4434:	0a12      	lsrs	r2, r2, #8
    4436:	b292      	uxth	r2, r2
    4438:	b2d2      	uxtb	r2, r2
    443a:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    443c:	231a      	movs	r3, #26
    443e:	18fb      	adds	r3, r7, r3
    4440:	221a      	movs	r2, #26
    4442:	18ba      	adds	r2, r7, r2
    4444:	8812      	ldrh	r2, [r2, #0]
    4446:	3202      	adds	r2, #2
    4448:	801a      	strh	r2, [r3, #0]
    444a:	231a      	movs	r3, #26
    444c:	18fa      	adds	r2, r7, r3
    444e:	1dbb      	adds	r3, r7, #6
    4450:	8812      	ldrh	r2, [r2, #0]
    4452:	881b      	ldrh	r3, [r3, #0]
    4454:	429a      	cmp	r2, r3
    4456:	d3c9      	bcc.n	43ec <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    4458:	2300      	movs	r3, #0
}
    445a:	0018      	movs	r0, r3
    445c:	46bd      	mov	sp, r7
    445e:	b008      	add	sp, #32
    4460:	bd80      	pop	{r7, pc}
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	20000084 	.word	0x20000084
    4468:	41004000 	.word	0x41004000
    446c:	00003fb5 	.word	0x00003fb5

00004470 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4470:	b580      	push	{r7, lr}
    4472:	b084      	sub	sp, #16
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4478:	4b23      	ldr	r3, [pc, #140]	; (4508 <nvm_erase_row+0x98>)
    447a:	881b      	ldrh	r3, [r3, #0]
    447c:	001a      	movs	r2, r3
    447e:	4b22      	ldr	r3, [pc, #136]	; (4508 <nvm_erase_row+0x98>)
    4480:	885b      	ldrh	r3, [r3, #2]
    4482:	435a      	muls	r2, r3
	if (row_address >
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	429a      	cmp	r2, r3
    4488:	d201      	bcs.n	448e <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    448a:	2318      	movs	r3, #24
    448c:	e037      	b.n	44fe <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    448e:	4b1e      	ldr	r3, [pc, #120]	; (4508 <nvm_erase_row+0x98>)
    4490:	881b      	ldrh	r3, [r3, #0]
    4492:	009b      	lsls	r3, r3, #2
    4494:	3b01      	subs	r3, #1
    4496:	001a      	movs	r2, r3
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	4013      	ands	r3, r2
    449c:	d001      	beq.n	44a2 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    449e:	2318      	movs	r3, #24
    44a0:	e02d      	b.n	44fe <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    44a2:	4b1a      	ldr	r3, [pc, #104]	; (450c <nvm_erase_row+0x9c>)
    44a4:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    44a6:	4b1a      	ldr	r3, [pc, #104]	; (4510 <nvm_erase_row+0xa0>)
    44a8:	4798      	blx	r3
    44aa:	0003      	movs	r3, r0
    44ac:	001a      	movs	r2, r3
    44ae:	2301      	movs	r3, #1
    44b0:	4053      	eors	r3, r2
    44b2:	b2db      	uxtb	r3, r3
    44b4:	2b00      	cmp	r3, #0
    44b6:	d001      	beq.n	44bc <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    44b8:	2305      	movs	r3, #5
    44ba:	e020      	b.n	44fe <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	2220      	movs	r2, #32
    44c0:	32ff      	adds	r2, #255	; 0xff
    44c2:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	089b      	lsrs	r3, r3, #2
    44c8:	005a      	lsls	r2, r3, #1
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    44ce:	68fb      	ldr	r3, [r7, #12]
    44d0:	4a10      	ldr	r2, [pc, #64]	; (4514 <nvm_erase_row+0xa4>)
    44d2:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    44d4:	46c0      	nop			; (mov r8, r8)
    44d6:	4b0e      	ldr	r3, [pc, #56]	; (4510 <nvm_erase_row+0xa0>)
    44d8:	4798      	blx	r3
    44da:	0003      	movs	r3, r0
    44dc:	001a      	movs	r2, r3
    44de:	2301      	movs	r3, #1
    44e0:	4053      	eors	r3, r2
    44e2:	b2db      	uxtb	r3, r3
    44e4:	2b00      	cmp	r3, #0
    44e6:	d1f6      	bne.n	44d6 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	8b1b      	ldrh	r3, [r3, #24]
    44ec:	b29b      	uxth	r3, r3
    44ee:	b2db      	uxtb	r3, r3
    44f0:	001a      	movs	r2, r3
    44f2:	231c      	movs	r3, #28
    44f4:	4013      	ands	r3, r2
    44f6:	d001      	beq.n	44fc <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    44f8:	2304      	movs	r3, #4
    44fa:	e000      	b.n	44fe <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    44fc:	2300      	movs	r3, #0
}
    44fe:	0018      	movs	r0, r3
    4500:	46bd      	mov	sp, r7
    4502:	b004      	add	sp, #16
    4504:	bd80      	pop	{r7, pc}
    4506:	46c0      	nop			; (mov r8, r8)
    4508:	20000084 	.word	0x20000084
    450c:	41004000 	.word	0x41004000
    4510:	00003fb5 	.word	0x00003fb5
    4514:	ffffa502 	.word	0xffffa502

00004518 <system_apb_clock_set_mask>:
{
    4518:	b580      	push	{r7, lr}
    451a:	b082      	sub	sp, #8
    451c:	af00      	add	r7, sp, #0
    451e:	0002      	movs	r2, r0
    4520:	6039      	str	r1, [r7, #0]
    4522:	1dfb      	adds	r3, r7, #7
    4524:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4526:	1dfb      	adds	r3, r7, #7
    4528:	781b      	ldrb	r3, [r3, #0]
    452a:	2b01      	cmp	r3, #1
    452c:	d00a      	beq.n	4544 <system_apb_clock_set_mask+0x2c>
    452e:	2b02      	cmp	r3, #2
    4530:	d00f      	beq.n	4552 <system_apb_clock_set_mask+0x3a>
    4532:	2b00      	cmp	r3, #0
    4534:	d114      	bne.n	4560 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4536:	4b0e      	ldr	r3, [pc, #56]	; (4570 <system_apb_clock_set_mask+0x58>)
    4538:	4a0d      	ldr	r2, [pc, #52]	; (4570 <system_apb_clock_set_mask+0x58>)
    453a:	6991      	ldr	r1, [r2, #24]
    453c:	683a      	ldr	r2, [r7, #0]
    453e:	430a      	orrs	r2, r1
    4540:	619a      	str	r2, [r3, #24]
			break;
    4542:	e00f      	b.n	4564 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4544:	4b0a      	ldr	r3, [pc, #40]	; (4570 <system_apb_clock_set_mask+0x58>)
    4546:	4a0a      	ldr	r2, [pc, #40]	; (4570 <system_apb_clock_set_mask+0x58>)
    4548:	69d1      	ldr	r1, [r2, #28]
    454a:	683a      	ldr	r2, [r7, #0]
    454c:	430a      	orrs	r2, r1
    454e:	61da      	str	r2, [r3, #28]
			break;
    4550:	e008      	b.n	4564 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4552:	4b07      	ldr	r3, [pc, #28]	; (4570 <system_apb_clock_set_mask+0x58>)
    4554:	4a06      	ldr	r2, [pc, #24]	; (4570 <system_apb_clock_set_mask+0x58>)
    4556:	6a11      	ldr	r1, [r2, #32]
    4558:	683a      	ldr	r2, [r7, #0]
    455a:	430a      	orrs	r2, r1
    455c:	621a      	str	r2, [r3, #32]
			break;
    455e:	e001      	b.n	4564 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4560:	2317      	movs	r3, #23
    4562:	e000      	b.n	4566 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4564:	2300      	movs	r3, #0
}
    4566:	0018      	movs	r0, r3
    4568:	46bd      	mov	sp, r7
    456a:	b002      	add	sp, #8
    456c:	bd80      	pop	{r7, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	40000400 	.word	0x40000400

00004574 <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
    4574:	b580      	push	{r7, lr}
    4576:	b084      	sub	sp, #16
    4578:	af00      	add	r7, sp, #0
    457a:	6078      	str	r0, [r7, #4]
    457c:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	b2da      	uxtb	r2, r3
    4582:	230f      	movs	r3, #15
    4584:	18fb      	adds	r3, r7, r3
    4586:	211f      	movs	r1, #31
    4588:	400a      	ands	r2, r1
    458a:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	095a      	lsrs	r2, r3, #5
    4590:	230e      	movs	r3, #14
    4592:	18fb      	adds	r3, r7, r3
    4594:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	43da      	mvns	r2, r3
    459a:	683b      	ldr	r3, [r7, #0]
    459c:	429a      	cmp	r2, r3
    459e:	d001      	beq.n	45a4 <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    45a0:	2317      	movs	r3, #23
    45a2:	e02d      	b.n	4600 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
    45a4:	230e      	movs	r3, #14
    45a6:	18fb      	adds	r3, r7, r3
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2b01      	cmp	r3, #1
    45ac:	d00d      	beq.n	45ca <system_peripheral_lock+0x56>
    45ae:	2b02      	cmp	r3, #2
    45b0:	d015      	beq.n	45de <system_peripheral_lock+0x6a>
    45b2:	2b00      	cmp	r3, #0
    45b4:	d121      	bne.n	45fa <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
    45b6:	2380      	movs	r3, #128	; 0x80
    45b8:	05db      	lsls	r3, r3, #23
    45ba:	220f      	movs	r2, #15
    45bc:	18ba      	adds	r2, r7, r2
    45be:	7812      	ldrb	r2, [r2, #0]
    45c0:	2101      	movs	r1, #1
    45c2:	4091      	lsls	r1, r2
    45c4:	000a      	movs	r2, r1
    45c6:	605a      	str	r2, [r3, #4]
			break;
    45c8:	e019      	b.n	45fe <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
    45ca:	2382      	movs	r3, #130	; 0x82
    45cc:	05db      	lsls	r3, r3, #23
    45ce:	220f      	movs	r2, #15
    45d0:	18ba      	adds	r2, r7, r2
    45d2:	7812      	ldrb	r2, [r2, #0]
    45d4:	2101      	movs	r1, #1
    45d6:	4091      	lsls	r1, r2
    45d8:	000a      	movs	r2, r1
    45da:	605a      	str	r2, [r3, #4]
			break;
    45dc:	e00f      	b.n	45fe <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
    45de:	2101      	movs	r1, #1
    45e0:	2002      	movs	r0, #2
    45e2:	4b09      	ldr	r3, [pc, #36]	; (4608 <system_peripheral_lock+0x94>)
    45e4:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
    45e6:	2384      	movs	r3, #132	; 0x84
    45e8:	05db      	lsls	r3, r3, #23
    45ea:	220f      	movs	r2, #15
    45ec:	18ba      	adds	r2, r7, r2
    45ee:	7812      	ldrb	r2, [r2, #0]
    45f0:	2101      	movs	r1, #1
    45f2:	4091      	lsls	r1, r2
    45f4:	000a      	movs	r2, r1
    45f6:	605a      	str	r2, [r3, #4]
			break;
    45f8:	e001      	b.n	45fe <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    45fa:	2317      	movs	r3, #23
    45fc:	e000      	b.n	4600 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
    45fe:	2300      	movs	r3, #0
}
    4600:	0018      	movs	r0, r3
    4602:	46bd      	mov	sp, r7
    4604:	b004      	add	sp, #16
    4606:	bd80      	pop	{r7, pc}
    4608:	00004519 	.word	0x00004519

0000460c <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
    460c:	b580      	push	{r7, lr}
    460e:	b084      	sub	sp, #16
    4610:	af00      	add	r7, sp, #0
    4612:	6078      	str	r0, [r7, #4]
    4614:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	b2da      	uxtb	r2, r3
    461a:	230f      	movs	r3, #15
    461c:	18fb      	adds	r3, r7, r3
    461e:	211f      	movs	r1, #31
    4620:	400a      	ands	r2, r1
    4622:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	095a      	lsrs	r2, r3, #5
    4628:	230e      	movs	r3, #14
    462a:	18fb      	adds	r3, r7, r3
    462c:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	43da      	mvns	r2, r3
    4632:	683b      	ldr	r3, [r7, #0]
    4634:	429a      	cmp	r2, r3
    4636:	d001      	beq.n	463c <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4638:	2317      	movs	r3, #23
    463a:	e02d      	b.n	4698 <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
    463c:	230e      	movs	r3, #14
    463e:	18fb      	adds	r3, r7, r3
    4640:	781b      	ldrb	r3, [r3, #0]
    4642:	2b01      	cmp	r3, #1
    4644:	d00d      	beq.n	4662 <system_peripheral_unlock+0x56>
    4646:	2b02      	cmp	r3, #2
    4648:	d015      	beq.n	4676 <system_peripheral_unlock+0x6a>
    464a:	2b00      	cmp	r3, #0
    464c:	d121      	bne.n	4692 <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
    464e:	2380      	movs	r3, #128	; 0x80
    4650:	05db      	lsls	r3, r3, #23
    4652:	220f      	movs	r2, #15
    4654:	18ba      	adds	r2, r7, r2
    4656:	7812      	ldrb	r2, [r2, #0]
    4658:	2101      	movs	r1, #1
    465a:	4091      	lsls	r1, r2
    465c:	000a      	movs	r2, r1
    465e:	601a      	str	r2, [r3, #0]
			break;
    4660:	e019      	b.n	4696 <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
    4662:	2382      	movs	r3, #130	; 0x82
    4664:	05db      	lsls	r3, r3, #23
    4666:	220f      	movs	r2, #15
    4668:	18ba      	adds	r2, r7, r2
    466a:	7812      	ldrb	r2, [r2, #0]
    466c:	2101      	movs	r1, #1
    466e:	4091      	lsls	r1, r2
    4670:	000a      	movs	r2, r1
    4672:	601a      	str	r2, [r3, #0]
			break;
    4674:	e00f      	b.n	4696 <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
    4676:	2101      	movs	r1, #1
    4678:	2002      	movs	r0, #2
    467a:	4b09      	ldr	r3, [pc, #36]	; (46a0 <system_peripheral_unlock+0x94>)
    467c:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
    467e:	2384      	movs	r3, #132	; 0x84
    4680:	05db      	lsls	r3, r3, #23
    4682:	220f      	movs	r2, #15
    4684:	18ba      	adds	r2, r7, r2
    4686:	7812      	ldrb	r2, [r2, #0]
    4688:	2101      	movs	r1, #1
    468a:	4091      	lsls	r1, r2
    468c:	000a      	movs	r2, r1
    468e:	601a      	str	r2, [r3, #0]
			break;
    4690:	e001      	b.n	4696 <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4692:	2317      	movs	r3, #23
    4694:	e000      	b.n	4698 <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
    4696:	2300      	movs	r3, #0
}
    4698:	0018      	movs	r0, r3
    469a:	46bd      	mov	sp, r7
    469c:	b004      	add	sp, #16
    469e:	bd80      	pop	{r7, pc}
    46a0:	00004519 	.word	0x00004519

000046a4 <system_pinmux_get_config_defaults>:
{
    46a4:	b580      	push	{r7, lr}
    46a6:	b082      	sub	sp, #8
    46a8:	af00      	add	r7, sp, #0
    46aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    46ac:	687b      	ldr	r3, [r7, #4]
    46ae:	2280      	movs	r2, #128	; 0x80
    46b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	2200      	movs	r2, #0
    46b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	2201      	movs	r2, #1
    46bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	2200      	movs	r2, #0
    46c2:	70da      	strb	r2, [r3, #3]
}
    46c4:	46c0      	nop			; (mov r8, r8)
    46c6:	46bd      	mov	sp, r7
    46c8:	b002      	add	sp, #8
    46ca:	bd80      	pop	{r7, pc}

000046cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    46cc:	b580      	push	{r7, lr}
    46ce:	b084      	sub	sp, #16
    46d0:	af00      	add	r7, sp, #0
    46d2:	0002      	movs	r2, r0
    46d4:	6039      	str	r1, [r7, #0]
    46d6:	1dfb      	adds	r3, r7, #7
    46d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    46da:	230c      	movs	r3, #12
    46dc:	18fb      	adds	r3, r7, r3
    46de:	0018      	movs	r0, r3
    46e0:	4b10      	ldr	r3, [pc, #64]	; (4724 <port_pin_set_config+0x58>)
    46e2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    46e4:	230c      	movs	r3, #12
    46e6:	18fb      	adds	r3, r7, r3
    46e8:	2280      	movs	r2, #128	; 0x80
    46ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    46ec:	683b      	ldr	r3, [r7, #0]
    46ee:	781a      	ldrb	r2, [r3, #0]
    46f0:	230c      	movs	r3, #12
    46f2:	18fb      	adds	r3, r7, r3
    46f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    46f6:	683b      	ldr	r3, [r7, #0]
    46f8:	785a      	ldrb	r2, [r3, #1]
    46fa:	230c      	movs	r3, #12
    46fc:	18fb      	adds	r3, r7, r3
    46fe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4700:	683b      	ldr	r3, [r7, #0]
    4702:	789a      	ldrb	r2, [r3, #2]
    4704:	230c      	movs	r3, #12
    4706:	18fb      	adds	r3, r7, r3
    4708:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    470a:	230c      	movs	r3, #12
    470c:	18fa      	adds	r2, r7, r3
    470e:	1dfb      	adds	r3, r7, #7
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	0011      	movs	r1, r2
    4714:	0018      	movs	r0, r3
    4716:	4b04      	ldr	r3, [pc, #16]	; (4728 <port_pin_set_config+0x5c>)
    4718:	4798      	blx	r3
}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	46bd      	mov	sp, r7
    471e:	b004      	add	sp, #16
    4720:	bd80      	pop	{r7, pc}
    4722:	46c0      	nop			; (mov r8, r8)
    4724:	000046a5 	.word	0x000046a5
    4728:	000073c5 	.word	0x000073c5

0000472c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    472c:	b580      	push	{r7, lr}
    472e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4730:	46c0      	nop			; (mov r8, r8)
    4732:	46bd      	mov	sp, r7
    4734:	bd80      	pop	{r7, pc}
	...

00004738 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    473e:	4b10      	ldr	r3, [pc, #64]	; (4780 <cpu_irq_enter_critical+0x48>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	2b00      	cmp	r3, #0
    4744:	d112      	bne.n	476c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4746:	f3ef 8310 	mrs	r3, PRIMASK
    474a:	607b      	str	r3, [r7, #4]
  return(result);
    474c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    474e:	2b00      	cmp	r3, #0
    4750:	d109      	bne.n	4766 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    4752:	b672      	cpsid	i
    4754:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4758:	4b0a      	ldr	r3, [pc, #40]	; (4784 <cpu_irq_enter_critical+0x4c>)
    475a:	2200      	movs	r2, #0
    475c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    475e:	4b0a      	ldr	r3, [pc, #40]	; (4788 <cpu_irq_enter_critical+0x50>)
    4760:	2201      	movs	r2, #1
    4762:	701a      	strb	r2, [r3, #0]
    4764:	e002      	b.n	476c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4766:	4b08      	ldr	r3, [pc, #32]	; (4788 <cpu_irq_enter_critical+0x50>)
    4768:	2200      	movs	r2, #0
    476a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    476c:	4b04      	ldr	r3, [pc, #16]	; (4780 <cpu_irq_enter_critical+0x48>)
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	1c5a      	adds	r2, r3, #1
    4772:	4b03      	ldr	r3, [pc, #12]	; (4780 <cpu_irq_enter_critical+0x48>)
    4774:	601a      	str	r2, [r3, #0]
}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	46bd      	mov	sp, r7
    477a:	b002      	add	sp, #8
    477c:	bd80      	pop	{r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	2000008c 	.word	0x2000008c
    4784:	20000000 	.word	0x20000000
    4788:	20000090 	.word	0x20000090

0000478c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    478c:	b580      	push	{r7, lr}
    478e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4790:	4b0b      	ldr	r3, [pc, #44]	; (47c0 <cpu_irq_leave_critical+0x34>)
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	1e5a      	subs	r2, r3, #1
    4796:	4b0a      	ldr	r3, [pc, #40]	; (47c0 <cpu_irq_leave_critical+0x34>)
    4798:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    479a:	4b09      	ldr	r3, [pc, #36]	; (47c0 <cpu_irq_leave_critical+0x34>)
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	2b00      	cmp	r3, #0
    47a0:	d10a      	bne.n	47b8 <cpu_irq_leave_critical+0x2c>
    47a2:	4b08      	ldr	r3, [pc, #32]	; (47c4 <cpu_irq_leave_critical+0x38>)
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	b2db      	uxtb	r3, r3
    47a8:	2b00      	cmp	r3, #0
    47aa:	d005      	beq.n	47b8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    47ac:	4b06      	ldr	r3, [pc, #24]	; (47c8 <cpu_irq_leave_critical+0x3c>)
    47ae:	2201      	movs	r2, #1
    47b0:	701a      	strb	r2, [r3, #0]
    47b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    47b6:	b662      	cpsie	i
	}
}
    47b8:	46c0      	nop			; (mov r8, r8)
    47ba:	46bd      	mov	sp, r7
    47bc:	bd80      	pop	{r7, pc}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	2000008c 	.word	0x2000008c
    47c4:	20000090 	.word	0x20000090
    47c8:	20000000 	.word	0x20000000

000047cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	2200      	movs	r2, #0
    47d8:	701a      	strb	r2, [r3, #0]
}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	46bd      	mov	sp, r7
    47de:	b002      	add	sp, #8
    47e0:	bd80      	pop	{r7, pc}

000047e2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    47e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e4:	b08d      	sub	sp, #52	; 0x34
    47e6:	af00      	add	r7, sp, #0
    47e8:	60b8      	str	r0, [r7, #8]
    47ea:	60f9      	str	r1, [r7, #12]
    47ec:	603a      	str	r2, [r7, #0]
    47ee:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    47f0:	2300      	movs	r3, #0
    47f2:	2400      	movs	r4, #0
    47f4:	623b      	str	r3, [r7, #32]
    47f6:	627c      	str	r4, [r7, #36]	; 0x24
    47f8:	2300      	movs	r3, #0
    47fa:	2400      	movs	r4, #0
    47fc:	61bb      	str	r3, [r7, #24]
    47fe:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    4800:	233f      	movs	r3, #63	; 0x3f
    4802:	62fb      	str	r3, [r7, #44]	; 0x2c
    4804:	e053      	b.n	48ae <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    4806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4808:	3b20      	subs	r3, #32
    480a:	2b00      	cmp	r3, #0
    480c:	db04      	blt.n	4818 <long_division+0x36>
    480e:	2201      	movs	r2, #1
    4810:	409a      	lsls	r2, r3
    4812:	0013      	movs	r3, r2
    4814:	617b      	str	r3, [r7, #20]
    4816:	e00b      	b.n	4830 <long_division+0x4e>
    4818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    481a:	2220      	movs	r2, #32
    481c:	1ad3      	subs	r3, r2, r3
    481e:	2201      	movs	r2, #1
    4820:	40da      	lsrs	r2, r3
    4822:	0013      	movs	r3, r2
    4824:	2100      	movs	r1, #0
    4826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4828:	4091      	lsls	r1, r2
    482a:	000a      	movs	r2, r1
    482c:	4313      	orrs	r3, r2
    482e:	617b      	str	r3, [r7, #20]
    4830:	2201      	movs	r2, #1
    4832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4834:	409a      	lsls	r2, r3
    4836:	0013      	movs	r3, r2
    4838:	613b      	str	r3, [r7, #16]

		r = r << 1;
    483a:	69bb      	ldr	r3, [r7, #24]
    483c:	69fc      	ldr	r4, [r7, #28]
    483e:	18db      	adds	r3, r3, r3
    4840:	4164      	adcs	r4, r4
    4842:	61bb      	str	r3, [r7, #24]
    4844:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    4846:	68bb      	ldr	r3, [r7, #8]
    4848:	693a      	ldr	r2, [r7, #16]
    484a:	401a      	ands	r2, r3
    484c:	0015      	movs	r5, r2
    484e:	68fb      	ldr	r3, [r7, #12]
    4850:	697a      	ldr	r2, [r7, #20]
    4852:	401a      	ands	r2, r3
    4854:	0016      	movs	r6, r2
    4856:	002b      	movs	r3, r5
    4858:	4333      	orrs	r3, r6
    485a:	d007      	beq.n	486c <long_division+0x8a>
			r |= 0x01;
    485c:	69bb      	ldr	r3, [r7, #24]
    485e:	2201      	movs	r2, #1
    4860:	4313      	orrs	r3, r2
    4862:	61bb      	str	r3, [r7, #24]
    4864:	69fb      	ldr	r3, [r7, #28]
    4866:	2200      	movs	r2, #0
    4868:	4313      	orrs	r3, r2
    486a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    486c:	687a      	ldr	r2, [r7, #4]
    486e:	69fb      	ldr	r3, [r7, #28]
    4870:	429a      	cmp	r2, r3
    4872:	d819      	bhi.n	48a8 <long_division+0xc6>
    4874:	687a      	ldr	r2, [r7, #4]
    4876:	69fb      	ldr	r3, [r7, #28]
    4878:	429a      	cmp	r2, r3
    487a:	d103      	bne.n	4884 <long_division+0xa2>
    487c:	683a      	ldr	r2, [r7, #0]
    487e:	69bb      	ldr	r3, [r7, #24]
    4880:	429a      	cmp	r2, r3
    4882:	d811      	bhi.n	48a8 <long_division+0xc6>
			r = r - d;
    4884:	69b9      	ldr	r1, [r7, #24]
    4886:	69fa      	ldr	r2, [r7, #28]
    4888:	683b      	ldr	r3, [r7, #0]
    488a:	687c      	ldr	r4, [r7, #4]
    488c:	1ac9      	subs	r1, r1, r3
    488e:	41a2      	sbcs	r2, r4
    4890:	000b      	movs	r3, r1
    4892:	0014      	movs	r4, r2
    4894:	61bb      	str	r3, [r7, #24]
    4896:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    4898:	6a3a      	ldr	r2, [r7, #32]
    489a:	693b      	ldr	r3, [r7, #16]
    489c:	4313      	orrs	r3, r2
    489e:	623b      	str	r3, [r7, #32]
    48a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    48a2:	697b      	ldr	r3, [r7, #20]
    48a4:	4313      	orrs	r3, r2
    48a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    48a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48aa:	3b01      	subs	r3, #1
    48ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    48ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48b0:	2b00      	cmp	r3, #0
    48b2:	daa8      	bge.n	4806 <long_division+0x24>
		}
	}

	return q;
    48b4:	6a3b      	ldr	r3, [r7, #32]
    48b6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    48b8:	0018      	movs	r0, r3
    48ba:	0021      	movs	r1, r4
    48bc:	46bd      	mov	sp, r7
    48be:	b00d      	add	sp, #52	; 0x34
    48c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000048c2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    48c2:	b580      	push	{r7, lr}
    48c4:	b086      	sub	sp, #24
    48c6:	af00      	add	r7, sp, #0
    48c8:	60f8      	str	r0, [r7, #12]
    48ca:	60b9      	str	r1, [r7, #8]
    48cc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    48ce:	2316      	movs	r3, #22
    48d0:	18fb      	adds	r3, r7, r3
    48d2:	2200      	movs	r2, #0
    48d4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    48d6:	68bb      	ldr	r3, [r7, #8]
    48d8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    48da:	68bb      	ldr	r3, [r7, #8]
    48dc:	085a      	lsrs	r2, r3, #1
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	429a      	cmp	r2, r3
    48e2:	d201      	bcs.n	48e8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    48e4:	2340      	movs	r3, #64	; 0x40
    48e6:	e026      	b.n	4936 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    48e8:	68bb      	ldr	r3, [r7, #8]
    48ea:	085b      	lsrs	r3, r3, #1
    48ec:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    48ee:	e00a      	b.n	4906 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    48f0:	693a      	ldr	r2, [r7, #16]
    48f2:	68fb      	ldr	r3, [r7, #12]
    48f4:	1ad3      	subs	r3, r2, r3
    48f6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    48f8:	2316      	movs	r3, #22
    48fa:	18fb      	adds	r3, r7, r3
    48fc:	881a      	ldrh	r2, [r3, #0]
    48fe:	2316      	movs	r3, #22
    4900:	18fb      	adds	r3, r7, r3
    4902:	3201      	adds	r2, #1
    4904:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    4906:	693a      	ldr	r2, [r7, #16]
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	429a      	cmp	r2, r3
    490c:	d2f0      	bcs.n	48f0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    490e:	2316      	movs	r3, #22
    4910:	18fb      	adds	r3, r7, r3
    4912:	2216      	movs	r2, #22
    4914:	18ba      	adds	r2, r7, r2
    4916:	8812      	ldrh	r2, [r2, #0]
    4918:	3a01      	subs	r2, #1
    491a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    491c:	2316      	movs	r3, #22
    491e:	18fb      	adds	r3, r7, r3
    4920:	881b      	ldrh	r3, [r3, #0]
    4922:	2bff      	cmp	r3, #255	; 0xff
    4924:	d901      	bls.n	492a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4926:	2340      	movs	r3, #64	; 0x40
    4928:	e005      	b.n	4936 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	2216      	movs	r2, #22
    492e:	18ba      	adds	r2, r7, r2
    4930:	8812      	ldrh	r2, [r2, #0]
    4932:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4934:	2300      	movs	r3, #0
	}
}
    4936:	0018      	movs	r0, r3
    4938:	46bd      	mov	sp, r7
    493a:	b006      	add	sp, #24
    493c:	bd80      	pop	{r7, pc}
	...

00004940 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4940:	b5f0      	push	{r4, r5, r6, r7, lr}
    4942:	b0a1      	sub	sp, #132	; 0x84
    4944:	af00      	add	r7, sp, #0
    4946:	64f8      	str	r0, [r7, #76]	; 0x4c
    4948:	64b9      	str	r1, [r7, #72]	; 0x48
    494a:	647a      	str	r2, [r7, #68]	; 0x44
    494c:	2243      	movs	r2, #67	; 0x43
    494e:	18ba      	adds	r2, r7, r2
    4950:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    4952:	2300      	movs	r3, #0
    4954:	2400      	movs	r4, #0
    4956:	673b      	str	r3, [r7, #112]	; 0x70
    4958:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    495a:	2300      	movs	r3, #0
    495c:	2400      	movs	r4, #0
    495e:	66bb      	str	r3, [r7, #104]	; 0x68
    4960:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    4962:	2300      	movs	r3, #0
    4964:	2400      	movs	r4, #0
    4966:	67bb      	str	r3, [r7, #120]	; 0x78
    4968:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    496a:	2300      	movs	r3, #0
    496c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    496e:	2358      	movs	r3, #88	; 0x58
    4970:	2240      	movs	r2, #64	; 0x40
    4972:	4694      	mov	ip, r2
    4974:	44bc      	add	ip, r7
    4976:	4463      	add	r3, ip
    4978:	781a      	ldrb	r2, [r3, #0]
    497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    497c:	435a      	muls	r2, r3
    497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4980:	429a      	cmp	r2, r3
    4982:	d901      	bls.n	4988 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4984:	2340      	movs	r3, #64	; 0x40
    4986:	e0b3      	b.n	4af0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4988:	2343      	movs	r3, #67	; 0x43
    498a:	18fb      	adds	r3, r7, r3
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	2b00      	cmp	r3, #0
    4990:	d13d      	bne.n	4a0e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4992:	2358      	movs	r3, #88	; 0x58
    4994:	2240      	movs	r2, #64	; 0x40
    4996:	4694      	mov	ip, r2
    4998:	44bc      	add	ip, r7
    499a:	4463      	add	r3, ip
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	b2db      	uxtb	r3, r3
    49a0:	613b      	str	r3, [r7, #16]
    49a2:	2300      	movs	r3, #0
    49a4:	617b      	str	r3, [r7, #20]
    49a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    49a8:	60bb      	str	r3, [r7, #8]
    49aa:	2300      	movs	r3, #0
    49ac:	60fb      	str	r3, [r7, #12]
    49ae:	4c52      	ldr	r4, [pc, #328]	; (4af8 <_sercom_get_async_baud_val+0x1b8>)
    49b0:	68ba      	ldr	r2, [r7, #8]
    49b2:	68fb      	ldr	r3, [r7, #12]
    49b4:	6938      	ldr	r0, [r7, #16]
    49b6:	6979      	ldr	r1, [r7, #20]
    49b8:	47a0      	blx	r4
    49ba:	0003      	movs	r3, r0
    49bc:	000c      	movs	r4, r1
    49be:	001b      	movs	r3, r3
    49c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    49c2:	2300      	movs	r3, #0
    49c4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    49c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    49c8:	603b      	str	r3, [r7, #0]
    49ca:	2300      	movs	r3, #0
    49cc:	607b      	str	r3, [r7, #4]
    49ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
    49d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    49d2:	683a      	ldr	r2, [r7, #0]
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	4c49      	ldr	r4, [pc, #292]	; (4afc <_sercom_get_async_baud_val+0x1bc>)
    49d8:	47a0      	blx	r4
    49da:	0003      	movs	r3, r0
    49dc:	000c      	movs	r4, r1
    49de:	673b      	str	r3, [r7, #112]	; 0x70
    49e0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    49e2:	2100      	movs	r1, #0
    49e4:	2201      	movs	r2, #1
    49e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    49e8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    49ea:	1ac9      	subs	r1, r1, r3
    49ec:	41a2      	sbcs	r2, r4
    49ee:	000b      	movs	r3, r1
    49f0:	0014      	movs	r4, r2
    49f2:	66bb      	str	r3, [r7, #104]	; 0x68
    49f4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    49f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    49f8:	0c1b      	lsrs	r3, r3, #16
    49fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    49fc:	0416      	lsls	r6, r2, #16
    49fe:	431e      	orrs	r6, r3
    4a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4a02:	041d      	lsls	r5, r3, #16
    4a04:	0033      	movs	r3, r6
    4a06:	67bb      	str	r3, [r7, #120]	; 0x78
    4a08:	2300      	movs	r3, #0
    4a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    4a0c:	e06a      	b.n	4ae4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4a0e:	2343      	movs	r3, #67	; 0x43
    4a10:	18fb      	adds	r3, r7, r3
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	2b01      	cmp	r3, #1
    4a16:	d165      	bne.n	4ae4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    4a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4a1a:	633b      	str	r3, [r7, #48]	; 0x30
    4a1c:	2300      	movs	r3, #0
    4a1e:	637b      	str	r3, [r7, #52]	; 0x34
    4a20:	2358      	movs	r3, #88	; 0x58
    4a22:	2240      	movs	r2, #64	; 0x40
    4a24:	4694      	mov	ip, r2
    4a26:	44bc      	add	ip, r7
    4a28:	4463      	add	r3, ip
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	b2db      	uxtb	r3, r3
    4a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    4a30:	2300      	movs	r3, #0
    4a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    4a34:	4c30      	ldr	r4, [pc, #192]	; (4af8 <_sercom_get_async_baud_val+0x1b8>)
    4a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    4a3e:	47a0      	blx	r4
    4a40:	0003      	movs	r3, r0
    4a42:	000c      	movs	r4, r1
    4a44:	65bb      	str	r3, [r7, #88]	; 0x58
    4a46:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    4a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a4a:	623b      	str	r3, [r7, #32]
    4a4c:	2300      	movs	r3, #0
    4a4e:	627b      	str	r3, [r7, #36]	; 0x24
    4a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a52:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4a54:	001a      	movs	r2, r3
    4a56:	0023      	movs	r3, r4
    4a58:	6a38      	ldr	r0, [r7, #32]
    4a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4a5c:	4c27      	ldr	r4, [pc, #156]	; (4afc <_sercom_get_async_baud_val+0x1bc>)
    4a5e:	47a0      	blx	r4
    4a60:	0003      	movs	r3, r0
    4a62:	000c      	movs	r4, r1
    4a64:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    4a66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4a68:	2380      	movs	r3, #128	; 0x80
    4a6a:	019b      	lsls	r3, r3, #6
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d901      	bls.n	4a74 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a70:	2340      	movs	r3, #64	; 0x40
    4a72:	e03d      	b.n	4af0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a76:	61bb      	str	r3, [r7, #24]
    4a78:	2300      	movs	r3, #0
    4a7a:	61fb      	str	r3, [r7, #28]
    4a7c:	69b9      	ldr	r1, [r7, #24]
    4a7e:	69fa      	ldr	r2, [r7, #28]
    4a80:	000b      	movs	r3, r1
    4a82:	0f5b      	lsrs	r3, r3, #29
    4a84:	0010      	movs	r0, r2
    4a86:	00c0      	lsls	r0, r0, #3
    4a88:	63f8      	str	r0, [r7, #60]	; 0x3c
    4a8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4a8c:	4318      	orrs	r0, r3
    4a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    4a90:	000b      	movs	r3, r1
    4a92:	00db      	lsls	r3, r3, #3
    4a94:	63bb      	str	r3, [r7, #56]	; 0x38
    4a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a98:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4a9a:	001a      	movs	r2, r3
    4a9c:	0023      	movs	r3, r4
    4a9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    4aa2:	4c16      	ldr	r4, [pc, #88]	; (4afc <_sercom_get_async_baud_val+0x1bc>)
    4aa4:	47a0      	blx	r4
    4aa6:	0003      	movs	r3, r0
    4aa8:	000c      	movs	r4, r1
    4aaa:	65bb      	str	r3, [r7, #88]	; 0x58
    4aac:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    4aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4ab0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4ab2:	b2d9      	uxtb	r1, r3
    4ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4ab6:	b2db      	uxtb	r3, r3
    4ab8:	00db      	lsls	r3, r3, #3
    4aba:	b2da      	uxtb	r2, r3
    4abc:	2317      	movs	r3, #23
    4abe:	2040      	movs	r0, #64	; 0x40
    4ac0:	4684      	mov	ip, r0
    4ac2:	44bc      	add	ip, r7
    4ac4:	4463      	add	r3, ip
    4ac6:	1a8a      	subs	r2, r1, r2
    4ac8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    4aca:	2317      	movs	r3, #23
    4acc:	2240      	movs	r2, #64	; 0x40
    4ace:	4694      	mov	ip, r2
    4ad0:	44bc      	add	ip, r7
    4ad2:	4463      	add	r3, ip
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	035b      	lsls	r3, r3, #13
    4ad8:	001a      	movs	r2, r3
    4ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4adc:	4313      	orrs	r3, r2
    4ade:	67bb      	str	r3, [r7, #120]	; 0x78
    4ae0:	2300      	movs	r3, #0
    4ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    4ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4ae6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    4ae8:	b29a      	uxth	r2, r3
    4aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4aec:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4aee:	2300      	movs	r3, #0
}
    4af0:	0018      	movs	r0, r3
    4af2:	46bd      	mov	sp, r7
    4af4:	b021      	add	sp, #132	; 0x84
    4af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4af8:	00008261 	.word	0x00008261
    4afc:	000047e3 	.word	0x000047e3

00004b00 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b084      	sub	sp, #16
    4b04:	af00      	add	r7, sp, #0
    4b06:	0002      	movs	r2, r0
    4b08:	1dfb      	adds	r3, r7, #7
    4b0a:	701a      	strb	r2, [r3, #0]
    4b0c:	1dbb      	adds	r3, r7, #6
    4b0e:	1c0a      	adds	r2, r1, #0
    4b10:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4b12:	4b1a      	ldr	r3, [pc, #104]	; (4b7c <sercom_set_gclk_generator+0x7c>)
    4b14:	781b      	ldrb	r3, [r3, #0]
    4b16:	2201      	movs	r2, #1
    4b18:	4053      	eors	r3, r2
    4b1a:	b2db      	uxtb	r3, r3
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d103      	bne.n	4b28 <sercom_set_gclk_generator+0x28>
    4b20:	1dbb      	adds	r3, r7, #6
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d01b      	beq.n	4b60 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4b28:	230c      	movs	r3, #12
    4b2a:	18fb      	adds	r3, r7, r3
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b14      	ldr	r3, [pc, #80]	; (4b80 <sercom_set_gclk_generator+0x80>)
    4b30:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4b32:	230c      	movs	r3, #12
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	1dfa      	adds	r2, r7, #7
    4b38:	7812      	ldrb	r2, [r2, #0]
    4b3a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4b3c:	230c      	movs	r3, #12
    4b3e:	18fb      	adds	r3, r7, r3
    4b40:	0019      	movs	r1, r3
    4b42:	2013      	movs	r0, #19
    4b44:	4b0f      	ldr	r3, [pc, #60]	; (4b84 <sercom_set_gclk_generator+0x84>)
    4b46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4b48:	2013      	movs	r0, #19
    4b4a:	4b0f      	ldr	r3, [pc, #60]	; (4b88 <sercom_set_gclk_generator+0x88>)
    4b4c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    4b4e:	4b0b      	ldr	r3, [pc, #44]	; (4b7c <sercom_set_gclk_generator+0x7c>)
    4b50:	1dfa      	adds	r2, r7, #7
    4b52:	7812      	ldrb	r2, [r2, #0]
    4b54:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4b56:	4b09      	ldr	r3, [pc, #36]	; (4b7c <sercom_set_gclk_generator+0x7c>)
    4b58:	2201      	movs	r2, #1
    4b5a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4b5c:	2300      	movs	r3, #0
    4b5e:	e008      	b.n	4b72 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4b60:	4b06      	ldr	r3, [pc, #24]	; (4b7c <sercom_set_gclk_generator+0x7c>)
    4b62:	785b      	ldrb	r3, [r3, #1]
    4b64:	1dfa      	adds	r2, r7, #7
    4b66:	7812      	ldrb	r2, [r2, #0]
    4b68:	429a      	cmp	r2, r3
    4b6a:	d101      	bne.n	4b70 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    4b6c:	2300      	movs	r3, #0
    4b6e:	e000      	b.n	4b72 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4b70:	231d      	movs	r3, #29
}
    4b72:	0018      	movs	r0, r3
    4b74:	46bd      	mov	sp, r7
    4b76:	b004      	add	sp, #16
    4b78:	bd80      	pop	{r7, pc}
    4b7a:	46c0      	nop			; (mov r8, r8)
    4b7c:	20000094 	.word	0x20000094
    4b80:	000047cd 	.word	0x000047cd
    4b84:	000070d9 	.word	0x000070d9
    4b88:	0000711d 	.word	0x0000711d

00004b8c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4b8c:	b580      	push	{r7, lr}
    4b8e:	b082      	sub	sp, #8
    4b90:	af00      	add	r7, sp, #0
    4b92:	6078      	str	r0, [r7, #4]
    4b94:	000a      	movs	r2, r1
    4b96:	1cfb      	adds	r3, r7, #3
    4b98:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4b9a:	687b      	ldr	r3, [r7, #4]
    4b9c:	4a4d      	ldr	r2, [pc, #308]	; (4cd4 <_sercom_get_default_pad+0x148>)
    4b9e:	4293      	cmp	r3, r2
    4ba0:	d03f      	beq.n	4c22 <_sercom_get_default_pad+0x96>
    4ba2:	4a4c      	ldr	r2, [pc, #304]	; (4cd4 <_sercom_get_default_pad+0x148>)
    4ba4:	4293      	cmp	r3, r2
    4ba6:	d806      	bhi.n	4bb6 <_sercom_get_default_pad+0x2a>
    4ba8:	4a4b      	ldr	r2, [pc, #300]	; (4cd8 <_sercom_get_default_pad+0x14c>)
    4baa:	4293      	cmp	r3, r2
    4bac:	d00f      	beq.n	4bce <_sercom_get_default_pad+0x42>
    4bae:	4a4b      	ldr	r2, [pc, #300]	; (4cdc <_sercom_get_default_pad+0x150>)
    4bb0:	4293      	cmp	r3, r2
    4bb2:	d021      	beq.n	4bf8 <_sercom_get_default_pad+0x6c>
    4bb4:	e089      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4bb6:	4a4a      	ldr	r2, [pc, #296]	; (4ce0 <_sercom_get_default_pad+0x154>)
    4bb8:	4293      	cmp	r3, r2
    4bba:	d100      	bne.n	4bbe <_sercom_get_default_pad+0x32>
    4bbc:	e05b      	b.n	4c76 <_sercom_get_default_pad+0xea>
    4bbe:	4a49      	ldr	r2, [pc, #292]	; (4ce4 <_sercom_get_default_pad+0x158>)
    4bc0:	4293      	cmp	r3, r2
    4bc2:	d100      	bne.n	4bc6 <_sercom_get_default_pad+0x3a>
    4bc4:	e06c      	b.n	4ca0 <_sercom_get_default_pad+0x114>
    4bc6:	4a48      	ldr	r2, [pc, #288]	; (4ce8 <_sercom_get_default_pad+0x15c>)
    4bc8:	4293      	cmp	r3, r2
    4bca:	d03f      	beq.n	4c4c <_sercom_get_default_pad+0xc0>
    4bcc:	e07d      	b.n	4cca <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4bce:	1cfb      	adds	r3, r7, #3
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	2b01      	cmp	r3, #1
    4bd4:	d00a      	beq.n	4bec <_sercom_get_default_pad+0x60>
    4bd6:	dc02      	bgt.n	4bde <_sercom_get_default_pad+0x52>
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d005      	beq.n	4be8 <_sercom_get_default_pad+0x5c>
    4bdc:	e075      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4bde:	2b02      	cmp	r3, #2
    4be0:	d006      	beq.n	4bf0 <_sercom_get_default_pad+0x64>
    4be2:	2b03      	cmp	r3, #3
    4be4:	d006      	beq.n	4bf4 <_sercom_get_default_pad+0x68>
    4be6:	e070      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4be8:	4b40      	ldr	r3, [pc, #256]	; (4cec <_sercom_get_default_pad+0x160>)
    4bea:	e06f      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4bec:	4b40      	ldr	r3, [pc, #256]	; (4cf0 <_sercom_get_default_pad+0x164>)
    4bee:	e06d      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4bf0:	4b40      	ldr	r3, [pc, #256]	; (4cf4 <_sercom_get_default_pad+0x168>)
    4bf2:	e06b      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4bf4:	4b40      	ldr	r3, [pc, #256]	; (4cf8 <_sercom_get_default_pad+0x16c>)
    4bf6:	e069      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4bf8:	1cfb      	adds	r3, r7, #3
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	2b01      	cmp	r3, #1
    4bfe:	d00a      	beq.n	4c16 <_sercom_get_default_pad+0x8a>
    4c00:	dc02      	bgt.n	4c08 <_sercom_get_default_pad+0x7c>
    4c02:	2b00      	cmp	r3, #0
    4c04:	d005      	beq.n	4c12 <_sercom_get_default_pad+0x86>
    4c06:	e060      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c08:	2b02      	cmp	r3, #2
    4c0a:	d006      	beq.n	4c1a <_sercom_get_default_pad+0x8e>
    4c0c:	2b03      	cmp	r3, #3
    4c0e:	d006      	beq.n	4c1e <_sercom_get_default_pad+0x92>
    4c10:	e05b      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c12:	2303      	movs	r3, #3
    4c14:	e05a      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c16:	4b39      	ldr	r3, [pc, #228]	; (4cfc <_sercom_get_default_pad+0x170>)
    4c18:	e058      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c1a:	4b39      	ldr	r3, [pc, #228]	; (4d00 <_sercom_get_default_pad+0x174>)
    4c1c:	e056      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c1e:	4b39      	ldr	r3, [pc, #228]	; (4d04 <_sercom_get_default_pad+0x178>)
    4c20:	e054      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c22:	1cfb      	adds	r3, r7, #3
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	2b01      	cmp	r3, #1
    4c28:	d00a      	beq.n	4c40 <_sercom_get_default_pad+0xb4>
    4c2a:	dc02      	bgt.n	4c32 <_sercom_get_default_pad+0xa6>
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d005      	beq.n	4c3c <_sercom_get_default_pad+0xb0>
    4c30:	e04b      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c32:	2b02      	cmp	r3, #2
    4c34:	d006      	beq.n	4c44 <_sercom_get_default_pad+0xb8>
    4c36:	2b03      	cmp	r3, #3
    4c38:	d006      	beq.n	4c48 <_sercom_get_default_pad+0xbc>
    4c3a:	e046      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c3c:	4b32      	ldr	r3, [pc, #200]	; (4d08 <_sercom_get_default_pad+0x17c>)
    4c3e:	e045      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c40:	4b32      	ldr	r3, [pc, #200]	; (4d0c <_sercom_get_default_pad+0x180>)
    4c42:	e043      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c44:	4b32      	ldr	r3, [pc, #200]	; (4d10 <_sercom_get_default_pad+0x184>)
    4c46:	e041      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c48:	4b32      	ldr	r3, [pc, #200]	; (4d14 <_sercom_get_default_pad+0x188>)
    4c4a:	e03f      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c4c:	1cfb      	adds	r3, r7, #3
    4c4e:	781b      	ldrb	r3, [r3, #0]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d00a      	beq.n	4c6a <_sercom_get_default_pad+0xde>
    4c54:	dc02      	bgt.n	4c5c <_sercom_get_default_pad+0xd0>
    4c56:	2b00      	cmp	r3, #0
    4c58:	d005      	beq.n	4c66 <_sercom_get_default_pad+0xda>
    4c5a:	e036      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c5c:	2b02      	cmp	r3, #2
    4c5e:	d006      	beq.n	4c6e <_sercom_get_default_pad+0xe2>
    4c60:	2b03      	cmp	r3, #3
    4c62:	d006      	beq.n	4c72 <_sercom_get_default_pad+0xe6>
    4c64:	e031      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c66:	4b2c      	ldr	r3, [pc, #176]	; (4d18 <_sercom_get_default_pad+0x18c>)
    4c68:	e030      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c6a:	4b2c      	ldr	r3, [pc, #176]	; (4d1c <_sercom_get_default_pad+0x190>)
    4c6c:	e02e      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c6e:	4b2c      	ldr	r3, [pc, #176]	; (4d20 <_sercom_get_default_pad+0x194>)
    4c70:	e02c      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c72:	4b2c      	ldr	r3, [pc, #176]	; (4d24 <_sercom_get_default_pad+0x198>)
    4c74:	e02a      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c76:	1cfb      	adds	r3, r7, #3
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	2b01      	cmp	r3, #1
    4c7c:	d00a      	beq.n	4c94 <_sercom_get_default_pad+0x108>
    4c7e:	dc02      	bgt.n	4c86 <_sercom_get_default_pad+0xfa>
    4c80:	2b00      	cmp	r3, #0
    4c82:	d005      	beq.n	4c90 <_sercom_get_default_pad+0x104>
    4c84:	e021      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c86:	2b02      	cmp	r3, #2
    4c88:	d006      	beq.n	4c98 <_sercom_get_default_pad+0x10c>
    4c8a:	2b03      	cmp	r3, #3
    4c8c:	d006      	beq.n	4c9c <_sercom_get_default_pad+0x110>
    4c8e:	e01c      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4c90:	4b25      	ldr	r3, [pc, #148]	; (4d28 <_sercom_get_default_pad+0x19c>)
    4c92:	e01b      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c94:	4b25      	ldr	r3, [pc, #148]	; (4d2c <_sercom_get_default_pad+0x1a0>)
    4c96:	e019      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c98:	4b25      	ldr	r3, [pc, #148]	; (4d30 <_sercom_get_default_pad+0x1a4>)
    4c9a:	e017      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4c9c:	4b25      	ldr	r3, [pc, #148]	; (4d34 <_sercom_get_default_pad+0x1a8>)
    4c9e:	e015      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4ca0:	1cfb      	adds	r3, r7, #3
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	2b01      	cmp	r3, #1
    4ca6:	d00a      	beq.n	4cbe <_sercom_get_default_pad+0x132>
    4ca8:	dc02      	bgt.n	4cb0 <_sercom_get_default_pad+0x124>
    4caa:	2b00      	cmp	r3, #0
    4cac:	d005      	beq.n	4cba <_sercom_get_default_pad+0x12e>
    4cae:	e00c      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4cb0:	2b02      	cmp	r3, #2
    4cb2:	d006      	beq.n	4cc2 <_sercom_get_default_pad+0x136>
    4cb4:	2b03      	cmp	r3, #3
    4cb6:	d006      	beq.n	4cc6 <_sercom_get_default_pad+0x13a>
    4cb8:	e007      	b.n	4cca <_sercom_get_default_pad+0x13e>
    4cba:	4b1f      	ldr	r3, [pc, #124]	; (4d38 <_sercom_get_default_pad+0x1ac>)
    4cbc:	e006      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4cbe:	4b1f      	ldr	r3, [pc, #124]	; (4d3c <_sercom_get_default_pad+0x1b0>)
    4cc0:	e004      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4cc2:	4b1f      	ldr	r3, [pc, #124]	; (4d40 <_sercom_get_default_pad+0x1b4>)
    4cc4:	e002      	b.n	4ccc <_sercom_get_default_pad+0x140>
    4cc6:	4b1f      	ldr	r3, [pc, #124]	; (4d44 <_sercom_get_default_pad+0x1b8>)
    4cc8:	e000      	b.n	4ccc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4cca:	2300      	movs	r3, #0
}
    4ccc:	0018      	movs	r0, r3
    4cce:	46bd      	mov	sp, r7
    4cd0:	b002      	add	sp, #8
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	42001000 	.word	0x42001000
    4cd8:	42000800 	.word	0x42000800
    4cdc:	42000c00 	.word	0x42000c00
    4ce0:	42001800 	.word	0x42001800
    4ce4:	42001c00 	.word	0x42001c00
    4ce8:	42001400 	.word	0x42001400
    4cec:	00040003 	.word	0x00040003
    4cf0:	00050003 	.word	0x00050003
    4cf4:	00060003 	.word	0x00060003
    4cf8:	00070003 	.word	0x00070003
    4cfc:	00010003 	.word	0x00010003
    4d00:	001e0003 	.word	0x001e0003
    4d04:	001f0003 	.word	0x001f0003
    4d08:	00080003 	.word	0x00080003
    4d0c:	00090003 	.word	0x00090003
    4d10:	000a0003 	.word	0x000a0003
    4d14:	000b0003 	.word	0x000b0003
    4d18:	00100003 	.word	0x00100003
    4d1c:	00110003 	.word	0x00110003
    4d20:	00120003 	.word	0x00120003
    4d24:	00130003 	.word	0x00130003
    4d28:	000c0003 	.word	0x000c0003
    4d2c:	000d0003 	.word	0x000d0003
    4d30:	000e0003 	.word	0x000e0003
    4d34:	000f0003 	.word	0x000f0003
    4d38:	00160003 	.word	0x00160003
    4d3c:	00170003 	.word	0x00170003
    4d40:	00180003 	.word	0x00180003
    4d44:	00190003 	.word	0x00190003

00004d48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4d48:	b590      	push	{r4, r7, lr}
    4d4a:	b08b      	sub	sp, #44	; 0x2c
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4d50:	230c      	movs	r3, #12
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	4a0f      	ldr	r2, [pc, #60]	; (4d94 <_sercom_get_sercom_inst_index+0x4c>)
    4d56:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d58:	c313      	stmia	r3!, {r0, r1, r4}
    4d5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d5c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d5e:	2300      	movs	r3, #0
    4d60:	627b      	str	r3, [r7, #36]	; 0x24
    4d62:	e00e      	b.n	4d82 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4d64:	230c      	movs	r3, #12
    4d66:	18fb      	adds	r3, r7, r3
    4d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d6a:	0092      	lsls	r2, r2, #2
    4d6c:	58d3      	ldr	r3, [r2, r3]
    4d6e:	001a      	movs	r2, r3
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	429a      	cmp	r2, r3
    4d74:	d102      	bne.n	4d7c <_sercom_get_sercom_inst_index+0x34>
			return i;
    4d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d78:	b2db      	uxtb	r3, r3
    4d7a:	e006      	b.n	4d8a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d7e:	3301      	adds	r3, #1
    4d80:	627b      	str	r3, [r7, #36]	; 0x24
    4d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d84:	2b05      	cmp	r3, #5
    4d86:	d9ed      	bls.n	4d64 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4d88:	2300      	movs	r3, #0
}
    4d8a:	0018      	movs	r0, r3
    4d8c:	46bd      	mov	sp, r7
    4d8e:	b00b      	add	sp, #44	; 0x2c
    4d90:	bd90      	pop	{r4, r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	00009558 	.word	0x00009558

00004d98 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b082      	sub	sp, #8
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	0002      	movs	r2, r0
    4da0:	1dfb      	adds	r3, r7, #7
    4da2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4da4:	46c0      	nop			; (mov r8, r8)
    4da6:	46bd      	mov	sp, r7
    4da8:	b002      	add	sp, #8
    4daa:	bd80      	pop	{r7, pc}

00004dac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4dac:	b580      	push	{r7, lr}
    4dae:	b084      	sub	sp, #16
    4db0:	af00      	add	r7, sp, #0
    4db2:	0002      	movs	r2, r0
    4db4:	6039      	str	r1, [r7, #0]
    4db6:	1dfb      	adds	r3, r7, #7
    4db8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4dba:	4b13      	ldr	r3, [pc, #76]	; (4e08 <_sercom_set_handler+0x5c>)
    4dbc:	781b      	ldrb	r3, [r3, #0]
    4dbe:	2201      	movs	r2, #1
    4dc0:	4053      	eors	r3, r2
    4dc2:	b2db      	uxtb	r3, r3
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d015      	beq.n	4df4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4dc8:	2300      	movs	r3, #0
    4dca:	60fb      	str	r3, [r7, #12]
    4dcc:	e00c      	b.n	4de8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4dce:	4b0f      	ldr	r3, [pc, #60]	; (4e0c <_sercom_set_handler+0x60>)
    4dd0:	68fa      	ldr	r2, [r7, #12]
    4dd2:	0092      	lsls	r2, r2, #2
    4dd4:	490e      	ldr	r1, [pc, #56]	; (4e10 <_sercom_set_handler+0x64>)
    4dd6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4dd8:	4b0e      	ldr	r3, [pc, #56]	; (4e14 <_sercom_set_handler+0x68>)
    4dda:	68fa      	ldr	r2, [r7, #12]
    4ddc:	0092      	lsls	r2, r2, #2
    4dde:	2100      	movs	r1, #0
    4de0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	3301      	adds	r3, #1
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	68fb      	ldr	r3, [r7, #12]
    4dea:	2b05      	cmp	r3, #5
    4dec:	d9ef      	bls.n	4dce <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4dee:	4b06      	ldr	r3, [pc, #24]	; (4e08 <_sercom_set_handler+0x5c>)
    4df0:	2201      	movs	r2, #1
    4df2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4df4:	1dfb      	adds	r3, r7, #7
    4df6:	781a      	ldrb	r2, [r3, #0]
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <_sercom_set_handler+0x60>)
    4dfa:	0092      	lsls	r2, r2, #2
    4dfc:	6839      	ldr	r1, [r7, #0]
    4dfe:	50d1      	str	r1, [r2, r3]
}
    4e00:	46c0      	nop			; (mov r8, r8)
    4e02:	46bd      	mov	sp, r7
    4e04:	b004      	add	sp, #16
    4e06:	bd80      	pop	{r7, pc}
    4e08:	20000096 	.word	0x20000096
    4e0c:	20000098 	.word	0x20000098
    4e10:	00004d99 	.word	0x00004d99
    4e14:	20000508 	.word	0x20000508

00004e18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4e18:	b590      	push	{r4, r7, lr}
    4e1a:	b085      	sub	sp, #20
    4e1c:	af00      	add	r7, sp, #0
    4e1e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4e20:	2308      	movs	r3, #8
    4e22:	18fb      	adds	r3, r7, r3
    4e24:	4a0b      	ldr	r2, [pc, #44]	; (4e54 <_sercom_get_interrupt_vector+0x3c>)
    4e26:	6811      	ldr	r1, [r2, #0]
    4e28:	6019      	str	r1, [r3, #0]
    4e2a:	8892      	ldrh	r2, [r2, #4]
    4e2c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4e2e:	230f      	movs	r3, #15
    4e30:	18fc      	adds	r4, r7, r3
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	0018      	movs	r0, r3
    4e36:	4b08      	ldr	r3, [pc, #32]	; (4e58 <_sercom_get_interrupt_vector+0x40>)
    4e38:	4798      	blx	r3
    4e3a:	0003      	movs	r3, r0
    4e3c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4e3e:	230f      	movs	r3, #15
    4e40:	18fb      	adds	r3, r7, r3
    4e42:	781b      	ldrb	r3, [r3, #0]
    4e44:	2208      	movs	r2, #8
    4e46:	18ba      	adds	r2, r7, r2
    4e48:	5cd3      	ldrb	r3, [r2, r3]
    4e4a:	b25b      	sxtb	r3, r3
}
    4e4c:	0018      	movs	r0, r3
    4e4e:	46bd      	mov	sp, r7
    4e50:	b005      	add	sp, #20
    4e52:	bd90      	pop	{r4, r7, pc}
    4e54:	00009570 	.word	0x00009570
    4e58:	00004d49 	.word	0x00004d49

00004e5c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4e5c:	b580      	push	{r7, lr}
    4e5e:	af00      	add	r7, sp, #0
    4e60:	4b03      	ldr	r3, [pc, #12]	; (4e70 <SERCOM0_Handler+0x14>)
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	2000      	movs	r0, #0
    4e66:	4798      	blx	r3
    4e68:	46c0      	nop			; (mov r8, r8)
    4e6a:	46bd      	mov	sp, r7
    4e6c:	bd80      	pop	{r7, pc}
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	20000098 	.word	0x20000098

00004e74 <SERCOM1_Handler>:
    4e74:	b580      	push	{r7, lr}
    4e76:	af00      	add	r7, sp, #0
    4e78:	4b03      	ldr	r3, [pc, #12]	; (4e88 <SERCOM1_Handler+0x14>)
    4e7a:	685b      	ldr	r3, [r3, #4]
    4e7c:	2001      	movs	r0, #1
    4e7e:	4798      	blx	r3
    4e80:	46c0      	nop			; (mov r8, r8)
    4e82:	46bd      	mov	sp, r7
    4e84:	bd80      	pop	{r7, pc}
    4e86:	46c0      	nop			; (mov r8, r8)
    4e88:	20000098 	.word	0x20000098

00004e8c <SERCOM2_Handler>:
    4e8c:	b580      	push	{r7, lr}
    4e8e:	af00      	add	r7, sp, #0
    4e90:	4b03      	ldr	r3, [pc, #12]	; (4ea0 <SERCOM2_Handler+0x14>)
    4e92:	689b      	ldr	r3, [r3, #8]
    4e94:	2002      	movs	r0, #2
    4e96:	4798      	blx	r3
    4e98:	46c0      	nop			; (mov r8, r8)
    4e9a:	46bd      	mov	sp, r7
    4e9c:	bd80      	pop	{r7, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	20000098 	.word	0x20000098

00004ea4 <SERCOM3_Handler>:
    4ea4:	b580      	push	{r7, lr}
    4ea6:	af00      	add	r7, sp, #0
    4ea8:	4b03      	ldr	r3, [pc, #12]	; (4eb8 <SERCOM3_Handler+0x14>)
    4eaa:	68db      	ldr	r3, [r3, #12]
    4eac:	2003      	movs	r0, #3
    4eae:	4798      	blx	r3
    4eb0:	46c0      	nop			; (mov r8, r8)
    4eb2:	46bd      	mov	sp, r7
    4eb4:	bd80      	pop	{r7, pc}
    4eb6:	46c0      	nop			; (mov r8, r8)
    4eb8:	20000098 	.word	0x20000098

00004ebc <SERCOM4_Handler>:
    4ebc:	b580      	push	{r7, lr}
    4ebe:	af00      	add	r7, sp, #0
    4ec0:	4b03      	ldr	r3, [pc, #12]	; (4ed0 <SERCOM4_Handler+0x14>)
    4ec2:	691b      	ldr	r3, [r3, #16]
    4ec4:	2004      	movs	r0, #4
    4ec6:	4798      	blx	r3
    4ec8:	46c0      	nop			; (mov r8, r8)
    4eca:	46bd      	mov	sp, r7
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	20000098 	.word	0x20000098

00004ed4 <SERCOM5_Handler>:
    4ed4:	b580      	push	{r7, lr}
    4ed6:	af00      	add	r7, sp, #0
    4ed8:	4b03      	ldr	r3, [pc, #12]	; (4ee8 <SERCOM5_Handler+0x14>)
    4eda:	695b      	ldr	r3, [r3, #20]
    4edc:	2005      	movs	r0, #5
    4ede:	4798      	blx	r3
    4ee0:	46c0      	nop			; (mov r8, r8)
    4ee2:	46bd      	mov	sp, r7
    4ee4:	bd80      	pop	{r7, pc}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	20000098 	.word	0x20000098

00004eec <system_pinmux_get_config_defaults>:
{
    4eec:	b580      	push	{r7, lr}
    4eee:	b082      	sub	sp, #8
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	2280      	movs	r2, #128	; 0x80
    4ef8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	2200      	movs	r2, #0
    4efe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	2201      	movs	r2, #1
    4f04:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4f06:	687b      	ldr	r3, [r7, #4]
    4f08:	2200      	movs	r2, #0
    4f0a:	70da      	strb	r2, [r3, #3]
}
    4f0c:	46c0      	nop			; (mov r8, r8)
    4f0e:	46bd      	mov	sp, r7
    4f10:	b002      	add	sp, #8
    4f12:	bd80      	pop	{r7, pc}

00004f14 <system_gclk_chan_get_config_defaults>:
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b082      	sub	sp, #8
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	2200      	movs	r2, #0
    4f20:	701a      	strb	r2, [r3, #0]
}
    4f22:	46c0      	nop			; (mov r8, r8)
    4f24:	46bd      	mov	sp, r7
    4f26:	b002      	add	sp, #8
    4f28:	bd80      	pop	{r7, pc}
	...

00004f2c <system_apb_clock_set_mask>:
{
    4f2c:	b580      	push	{r7, lr}
    4f2e:	b082      	sub	sp, #8
    4f30:	af00      	add	r7, sp, #0
    4f32:	0002      	movs	r2, r0
    4f34:	6039      	str	r1, [r7, #0]
    4f36:	1dfb      	adds	r3, r7, #7
    4f38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4f3a:	1dfb      	adds	r3, r7, #7
    4f3c:	781b      	ldrb	r3, [r3, #0]
    4f3e:	2b01      	cmp	r3, #1
    4f40:	d00a      	beq.n	4f58 <system_apb_clock_set_mask+0x2c>
    4f42:	2b02      	cmp	r3, #2
    4f44:	d00f      	beq.n	4f66 <system_apb_clock_set_mask+0x3a>
    4f46:	2b00      	cmp	r3, #0
    4f48:	d114      	bne.n	4f74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4f4a:	4b0e      	ldr	r3, [pc, #56]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f4c:	4a0d      	ldr	r2, [pc, #52]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f4e:	6991      	ldr	r1, [r2, #24]
    4f50:	683a      	ldr	r2, [r7, #0]
    4f52:	430a      	orrs	r2, r1
    4f54:	619a      	str	r2, [r3, #24]
			break;
    4f56:	e00f      	b.n	4f78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4f58:	4b0a      	ldr	r3, [pc, #40]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f5a:	4a0a      	ldr	r2, [pc, #40]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f5c:	69d1      	ldr	r1, [r2, #28]
    4f5e:	683a      	ldr	r2, [r7, #0]
    4f60:	430a      	orrs	r2, r1
    4f62:	61da      	str	r2, [r3, #28]
			break;
    4f64:	e008      	b.n	4f78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4f66:	4b07      	ldr	r3, [pc, #28]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f68:	4a06      	ldr	r2, [pc, #24]	; (4f84 <system_apb_clock_set_mask+0x58>)
    4f6a:	6a11      	ldr	r1, [r2, #32]
    4f6c:	683a      	ldr	r2, [r7, #0]
    4f6e:	430a      	orrs	r2, r1
    4f70:	621a      	str	r2, [r3, #32]
			break;
    4f72:	e001      	b.n	4f78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4f74:	2317      	movs	r3, #23
    4f76:	e000      	b.n	4f7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4f78:	2300      	movs	r3, #0
}
    4f7a:	0018      	movs	r0, r3
    4f7c:	46bd      	mov	sp, r7
    4f7e:	b002      	add	sp, #8
    4f80:	bd80      	pop	{r7, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	40000400 	.word	0x40000400

00004f88 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4f88:	b580      	push	{r7, lr}
    4f8a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4f8c:	4b05      	ldr	r3, [pc, #20]	; (4fa4 <system_is_debugger_present+0x1c>)
    4f8e:	789b      	ldrb	r3, [r3, #2]
    4f90:	b2db      	uxtb	r3, r3
    4f92:	001a      	movs	r2, r3
    4f94:	2302      	movs	r3, #2
    4f96:	4013      	ands	r3, r2
    4f98:	1e5a      	subs	r2, r3, #1
    4f9a:	4193      	sbcs	r3, r2
    4f9c:	b2db      	uxtb	r3, r3
}
    4f9e:	0018      	movs	r0, r3
    4fa0:	46bd      	mov	sp, r7
    4fa2:	bd80      	pop	{r7, pc}
    4fa4:	41002000 	.word	0x41002000

00004fa8 <spi_is_write_complete>:
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b084      	sub	sp, #16
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	681b      	ldr	r3, [r3, #0]
    4fb4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4fb6:	68fb      	ldr	r3, [r7, #12]
    4fb8:	7e1b      	ldrb	r3, [r3, #24]
    4fba:	b2db      	uxtb	r3, r3
    4fbc:	001a      	movs	r2, r3
    4fbe:	2302      	movs	r3, #2
    4fc0:	4013      	ands	r3, r2
    4fc2:	1e5a      	subs	r2, r3, #1
    4fc4:	4193      	sbcs	r3, r2
    4fc6:	b2db      	uxtb	r3, r3
}
    4fc8:	0018      	movs	r0, r3
    4fca:	46bd      	mov	sp, r7
    4fcc:	b004      	add	sp, #16
    4fce:	bd80      	pop	{r7, pc}

00004fd0 <spi_is_ready_to_write>:
{
    4fd0:	b580      	push	{r7, lr}
    4fd2:	b084      	sub	sp, #16
    4fd4:	af00      	add	r7, sp, #0
    4fd6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fde:	68fb      	ldr	r3, [r7, #12]
    4fe0:	7e1b      	ldrb	r3, [r3, #24]
    4fe2:	b2db      	uxtb	r3, r3
    4fe4:	001a      	movs	r2, r3
    4fe6:	2301      	movs	r3, #1
    4fe8:	4013      	ands	r3, r2
    4fea:	1e5a      	subs	r2, r3, #1
    4fec:	4193      	sbcs	r3, r2
    4fee:	b2db      	uxtb	r3, r3
}
    4ff0:	0018      	movs	r0, r3
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b004      	add	sp, #16
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <spi_is_ready_to_read>:
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b084      	sub	sp, #16
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	681b      	ldr	r3, [r3, #0]
    5004:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5006:	68fb      	ldr	r3, [r7, #12]
    5008:	7e1b      	ldrb	r3, [r3, #24]
    500a:	b2db      	uxtb	r3, r3
    500c:	001a      	movs	r2, r3
    500e:	2304      	movs	r3, #4
    5010:	4013      	ands	r3, r2
    5012:	1e5a      	subs	r2, r3, #1
    5014:	4193      	sbcs	r3, r2
    5016:	b2db      	uxtb	r3, r3
}
    5018:	0018      	movs	r0, r3
    501a:	46bd      	mov	sp, r7
    501c:	b004      	add	sp, #16
    501e:	bd80      	pop	{r7, pc}

00005020 <spi_write>:
{
    5020:	b580      	push	{r7, lr}
    5022:	b084      	sub	sp, #16
    5024:	af00      	add	r7, sp, #0
    5026:	6078      	str	r0, [r7, #4]
    5028:	000a      	movs	r2, r1
    502a:	1cbb      	adds	r3, r7, #2
    502c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    502e:	687b      	ldr	r3, [r7, #4]
    5030:	681b      	ldr	r3, [r3, #0]
    5032:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	0018      	movs	r0, r3
    5038:	4b0a      	ldr	r3, [pc, #40]	; (5064 <spi_write+0x44>)
    503a:	4798      	blx	r3
    503c:	0003      	movs	r3, r0
    503e:	001a      	movs	r2, r3
    5040:	2301      	movs	r3, #1
    5042:	4053      	eors	r3, r2
    5044:	b2db      	uxtb	r3, r3
    5046:	2b00      	cmp	r3, #0
    5048:	d001      	beq.n	504e <spi_write+0x2e>
		return STATUS_BUSY;
    504a:	2305      	movs	r3, #5
    504c:	e006      	b.n	505c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    504e:	1cbb      	adds	r3, r7, #2
    5050:	881b      	ldrh	r3, [r3, #0]
    5052:	05db      	lsls	r3, r3, #23
    5054:	0dda      	lsrs	r2, r3, #23
    5056:	68fb      	ldr	r3, [r7, #12]
    5058:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    505a:	2300      	movs	r3, #0
}
    505c:	0018      	movs	r0, r3
    505e:	46bd      	mov	sp, r7
    5060:	b004      	add	sp, #16
    5062:	bd80      	pop	{r7, pc}
    5064:	00004fd1 	.word	0x00004fd1

00005068 <spi_read>:
{
    5068:	b580      	push	{r7, lr}
    506a:	b084      	sub	sp, #16
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	681b      	ldr	r3, [r3, #0]
    5076:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	0018      	movs	r0, r3
    507c:	4b1b      	ldr	r3, [pc, #108]	; (50ec <spi_read+0x84>)
    507e:	4798      	blx	r3
    5080:	0003      	movs	r3, r0
    5082:	001a      	movs	r2, r3
    5084:	2301      	movs	r3, #1
    5086:	4053      	eors	r3, r2
    5088:	b2db      	uxtb	r3, r3
    508a:	2b00      	cmp	r3, #0
    508c:	d001      	beq.n	5092 <spi_read+0x2a>
		return STATUS_ERR_IO;
    508e:	2310      	movs	r3, #16
    5090:	e027      	b.n	50e2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    5092:	230f      	movs	r3, #15
    5094:	18fb      	adds	r3, r7, r3
    5096:	2200      	movs	r2, #0
    5098:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    509a:	68bb      	ldr	r3, [r7, #8]
    509c:	8b5b      	ldrh	r3, [r3, #26]
    509e:	b29b      	uxth	r3, r3
    50a0:	001a      	movs	r2, r3
    50a2:	2304      	movs	r3, #4
    50a4:	4013      	ands	r3, r2
    50a6:	d006      	beq.n	50b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    50a8:	230f      	movs	r3, #15
    50aa:	18fb      	adds	r3, r7, r3
    50ac:	221e      	movs	r2, #30
    50ae:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    50b0:	68bb      	ldr	r3, [r7, #8]
    50b2:	2204      	movs	r2, #4
    50b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50b6:	687b      	ldr	r3, [r7, #4]
    50b8:	799b      	ldrb	r3, [r3, #6]
    50ba:	2b01      	cmp	r3, #1
    50bc:	d108      	bne.n	50d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    50be:	68bb      	ldr	r3, [r7, #8]
    50c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50c2:	b29b      	uxth	r3, r3
    50c4:	05db      	lsls	r3, r3, #23
    50c6:	0ddb      	lsrs	r3, r3, #23
    50c8:	b29a      	uxth	r2, r3
    50ca:	683b      	ldr	r3, [r7, #0]
    50cc:	801a      	strh	r2, [r3, #0]
    50ce:	e005      	b.n	50dc <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    50d0:	68bb      	ldr	r3, [r7, #8]
    50d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50d4:	b2db      	uxtb	r3, r3
    50d6:	b29a      	uxth	r2, r3
    50d8:	683b      	ldr	r3, [r7, #0]
    50da:	801a      	strh	r2, [r3, #0]
	return retval;
    50dc:	230f      	movs	r3, #15
    50de:	18fb      	adds	r3, r7, r3
    50e0:	781b      	ldrb	r3, [r3, #0]
}
    50e2:	0018      	movs	r0, r3
    50e4:	46bd      	mov	sp, r7
    50e6:	b004      	add	sp, #16
    50e8:	bd80      	pop	{r7, pc}
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	00004ff9 	.word	0x00004ff9

000050f0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    50f0:	b580      	push	{r7, lr}
    50f2:	b084      	sub	sp, #16
    50f4:	af00      	add	r7, sp, #0
    50f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	681b      	ldr	r3, [r3, #0]
    50fc:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    50fe:	68fb      	ldr	r3, [r7, #12]
    5100:	2202      	movs	r2, #2
    5102:	761a      	strb	r2, [r3, #24]
}
    5104:	46c0      	nop			; (mov r8, r8)
    5106:	46bd      	mov	sp, r7
    5108:	b004      	add	sp, #16
    510a:	bd80      	pop	{r7, pc}

0000510c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    510c:	b590      	push	{r4, r7, lr}
    510e:	b093      	sub	sp, #76	; 0x4c
    5110:	af00      	add	r7, sp, #0
    5112:	6078      	str	r0, [r7, #4]
    5114:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5116:	687b      	ldr	r3, [r7, #4]
    5118:	681b      	ldr	r3, [r3, #0]
    511a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5122:	231c      	movs	r3, #28
    5124:	18fb      	adds	r3, r7, r3
    5126:	0018      	movs	r0, r3
    5128:	4b85      	ldr	r3, [pc, #532]	; (5340 <_spi_set_config+0x234>)
    512a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    512c:	231c      	movs	r3, #28
    512e:	18fb      	adds	r3, r7, r3
    5130:	2200      	movs	r2, #0
    5132:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    5134:	683b      	ldr	r3, [r7, #0]
    5136:	781b      	ldrb	r3, [r3, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d103      	bne.n	5144 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    513c:	231c      	movs	r3, #28
    513e:	18fb      	adds	r3, r7, r3
    5140:	2200      	movs	r2, #0
    5142:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5144:	683b      	ldr	r3, [r7, #0]
    5146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    5148:	230c      	movs	r3, #12
    514a:	18fb      	adds	r3, r7, r3
    514c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    514e:	683b      	ldr	r3, [r7, #0]
    5150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    5152:	230c      	movs	r3, #12
    5154:	18fb      	adds	r3, r7, r3
    5156:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5158:	683b      	ldr	r3, [r7, #0]
    515a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    515c:	230c      	movs	r3, #12
    515e:	18fb      	adds	r3, r7, r3
    5160:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    5162:	683b      	ldr	r3, [r7, #0]
    5164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    5166:	230c      	movs	r3, #12
    5168:	18fb      	adds	r3, r7, r3
    516a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    516c:	2347      	movs	r3, #71	; 0x47
    516e:	18fb      	adds	r3, r7, r3
    5170:	2200      	movs	r2, #0
    5172:	701a      	strb	r2, [r3, #0]
    5174:	e02c      	b.n	51d0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5176:	2347      	movs	r3, #71	; 0x47
    5178:	18fb      	adds	r3, r7, r3
    517a:	781a      	ldrb	r2, [r3, #0]
    517c:	230c      	movs	r3, #12
    517e:	18fb      	adds	r3, r7, r3
    5180:	0092      	lsls	r2, r2, #2
    5182:	58d3      	ldr	r3, [r2, r3]
    5184:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5188:	2b00      	cmp	r3, #0
    518a:	d109      	bne.n	51a0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    518c:	2347      	movs	r3, #71	; 0x47
    518e:	18fb      	adds	r3, r7, r3
    5190:	781a      	ldrb	r2, [r3, #0]
    5192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5194:	0011      	movs	r1, r2
    5196:	0018      	movs	r0, r3
    5198:	4b6a      	ldr	r3, [pc, #424]	; (5344 <_spi_set_config+0x238>)
    519a:	4798      	blx	r3
    519c:	0003      	movs	r3, r0
    519e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    51a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51a2:	3301      	adds	r3, #1
    51a4:	d00d      	beq.n	51c2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    51a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51a8:	b2da      	uxtb	r2, r3
    51aa:	231c      	movs	r3, #28
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    51b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51b2:	0c1b      	lsrs	r3, r3, #16
    51b4:	b2db      	uxtb	r3, r3
    51b6:	221c      	movs	r2, #28
    51b8:	18ba      	adds	r2, r7, r2
    51ba:	0011      	movs	r1, r2
    51bc:	0018      	movs	r0, r3
    51be:	4b62      	ldr	r3, [pc, #392]	; (5348 <_spi_set_config+0x23c>)
    51c0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    51c2:	2347      	movs	r3, #71	; 0x47
    51c4:	18fb      	adds	r3, r7, r3
    51c6:	781a      	ldrb	r2, [r3, #0]
    51c8:	2347      	movs	r3, #71	; 0x47
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	3201      	adds	r2, #1
    51ce:	701a      	strb	r2, [r3, #0]
    51d0:	2347      	movs	r3, #71	; 0x47
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	2b03      	cmp	r3, #3
    51d8:	d9cd      	bls.n	5176 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    51da:	683b      	ldr	r3, [r7, #0]
    51dc:	781a      	ldrb	r2, [r3, #0]
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    51e2:	683b      	ldr	r3, [r7, #0]
    51e4:	7c1a      	ldrb	r2, [r3, #16]
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    51ea:	683b      	ldr	r3, [r7, #0]
    51ec:	7c9a      	ldrb	r2, [r3, #18]
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    51f2:	683b      	ldr	r3, [r7, #0]
    51f4:	7d1a      	ldrb	r2, [r3, #20]
    51f6:	687b      	ldr	r3, [r7, #4]
    51f8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    51fa:	230a      	movs	r3, #10
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	2200      	movs	r2, #0
    5200:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    5202:	2300      	movs	r3, #0
    5204:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    5206:	2300      	movs	r3, #0
    5208:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    520a:	683b      	ldr	r3, [r7, #0]
    520c:	781b      	ldrb	r3, [r3, #0]
    520e:	2b01      	cmp	r3, #1
    5210:	d129      	bne.n	5266 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5212:	687b      	ldr	r3, [r7, #4]
    5214:	681b      	ldr	r3, [r3, #0]
    5216:	0018      	movs	r0, r3
    5218:	4b4c      	ldr	r3, [pc, #304]	; (534c <_spi_set_config+0x240>)
    521a:	4798      	blx	r3
    521c:	0003      	movs	r3, r0
    521e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5222:	3314      	adds	r3, #20
    5224:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5226:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5228:	b2db      	uxtb	r3, r3
    522a:	0018      	movs	r0, r3
    522c:	4b48      	ldr	r3, [pc, #288]	; (5350 <_spi_set_config+0x244>)
    522e:	4798      	blx	r3
    5230:	0003      	movs	r3, r0
    5232:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    5234:	683b      	ldr	r3, [r7, #0]
    5236:	699b      	ldr	r3, [r3, #24]
    5238:	2223      	movs	r2, #35	; 0x23
    523a:	18bc      	adds	r4, r7, r2
    523c:	220a      	movs	r2, #10
    523e:	18ba      	adds	r2, r7, r2
    5240:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5242:	0018      	movs	r0, r3
    5244:	4b43      	ldr	r3, [pc, #268]	; (5354 <_spi_set_config+0x248>)
    5246:	4798      	blx	r3
    5248:	0003      	movs	r3, r0
    524a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    524c:	2323      	movs	r3, #35	; 0x23
    524e:	18fb      	adds	r3, r7, r3
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	2b00      	cmp	r3, #0
    5254:	d001      	beq.n	525a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    5256:	2317      	movs	r3, #23
    5258:	e06d      	b.n	5336 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    525a:	230a      	movs	r3, #10
    525c:	18fb      	adds	r3, r7, r3
    525e:	881b      	ldrh	r3, [r3, #0]
    5260:	b2da      	uxtb	r2, r3
    5262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5264:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    5266:	683b      	ldr	r3, [r7, #0]
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	2b00      	cmp	r3, #0
    526c:	d11a      	bne.n	52a4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    526e:	683b      	ldr	r3, [r7, #0]
    5270:	699b      	ldr	r3, [r3, #24]
    5272:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	8b9b      	ldrh	r3, [r3, #28]
    5278:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    527e:	683a      	ldr	r2, [r7, #0]
    5280:	7f92      	ldrb	r2, [r2, #30]
    5282:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5284:	683a      	ldr	r2, [r7, #0]
    5286:	7fd2      	ldrb	r2, [r2, #31]
    5288:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    528a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    528c:	431a      	orrs	r2, r3
    528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5290:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    5292:	683b      	ldr	r3, [r7, #0]
    5294:	2220      	movs	r2, #32
    5296:	5c9b      	ldrb	r3, [r3, r2]
    5298:	2b00      	cmp	r3, #0
    529a:	d003      	beq.n	52a4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    529e:	2240      	movs	r2, #64	; 0x40
    52a0:	4313      	orrs	r3, r2
    52a2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    52a4:	683b      	ldr	r3, [r7, #0]
    52a6:	685b      	ldr	r3, [r3, #4]
    52a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52aa:	4313      	orrs	r3, r2
    52ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    52ae:	683b      	ldr	r3, [r7, #0]
    52b0:	689b      	ldr	r3, [r3, #8]
    52b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52b4:	4313      	orrs	r3, r2
    52b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	68db      	ldr	r3, [r3, #12]
    52bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52be:	4313      	orrs	r3, r2
    52c0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	7c1b      	ldrb	r3, [r3, #16]
    52c6:	001a      	movs	r2, r3
    52c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    52ca:	4313      	orrs	r3, r2
    52cc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	7c5b      	ldrb	r3, [r3, #17]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d103      	bne.n	52de <_spi_set_config+0x1d2>
    52d6:	4b20      	ldr	r3, [pc, #128]	; (5358 <_spi_set_config+0x24c>)
    52d8:	4798      	blx	r3
    52da:	1e03      	subs	r3, r0, #0
    52dc:	d003      	beq.n	52e6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    52de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52e0:	2280      	movs	r2, #128	; 0x80
    52e2:	4313      	orrs	r3, r2
    52e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    52e6:	683b      	ldr	r3, [r7, #0]
    52e8:	7c9b      	ldrb	r3, [r3, #18]
    52ea:	2b00      	cmp	r3, #0
    52ec:	d004      	beq.n	52f8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    52ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    52f0:	2280      	movs	r2, #128	; 0x80
    52f2:	0292      	lsls	r2, r2, #10
    52f4:	4313      	orrs	r3, r2
    52f6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    52f8:	683b      	ldr	r3, [r7, #0]
    52fa:	7cdb      	ldrb	r3, [r3, #19]
    52fc:	2b00      	cmp	r3, #0
    52fe:	d004      	beq.n	530a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5302:	2280      	movs	r2, #128	; 0x80
    5304:	0092      	lsls	r2, r2, #2
    5306:	4313      	orrs	r3, r2
    5308:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    530a:	683b      	ldr	r3, [r7, #0]
    530c:	7d1b      	ldrb	r3, [r3, #20]
    530e:	2b00      	cmp	r3, #0
    5310:	d004      	beq.n	531c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5314:	2280      	movs	r2, #128	; 0x80
    5316:	0192      	lsls	r2, r2, #6
    5318:	4313      	orrs	r3, r2
    531a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    531e:	681a      	ldr	r2, [r3, #0]
    5320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5322:	431a      	orrs	r2, r3
    5324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5326:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    5328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    532a:	685a      	ldr	r2, [r3, #4]
    532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    532e:	431a      	orrs	r2, r3
    5330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5332:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    5334:	2300      	movs	r3, #0
}
    5336:	0018      	movs	r0, r3
    5338:	46bd      	mov	sp, r7
    533a:	b013      	add	sp, #76	; 0x4c
    533c:	bd90      	pop	{r4, r7, pc}
    533e:	46c0      	nop			; (mov r8, r8)
    5340:	00004eed 	.word	0x00004eed
    5344:	00004b8d 	.word	0x00004b8d
    5348:	000073c5 	.word	0x000073c5
    534c:	00004d49 	.word	0x00004d49
    5350:	000071fd 	.word	0x000071fd
    5354:	000048c3 	.word	0x000048c3
    5358:	00004f89 	.word	0x00004f89

0000535c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    535c:	b590      	push	{r4, r7, lr}
    535e:	b08b      	sub	sp, #44	; 0x2c
    5360:	af00      	add	r7, sp, #0
    5362:	60f8      	str	r0, [r7, #12]
    5364:	60b9      	str	r1, [r7, #8]
    5366:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	68ba      	ldr	r2, [r7, #8]
    536c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5374:	6a3b      	ldr	r3, [r7, #32]
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	2202      	movs	r2, #2
    537a:	4013      	ands	r3, r2
    537c:	d001      	beq.n	5382 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    537e:	231c      	movs	r3, #28
    5380:	e0a6      	b.n	54d0 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5382:	6a3b      	ldr	r3, [r7, #32]
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	2201      	movs	r2, #1
    5388:	4013      	ands	r3, r2
    538a:	d001      	beq.n	5390 <spi_init+0x34>
		return STATUS_BUSY;
    538c:	2305      	movs	r3, #5
    538e:	e09f      	b.n	54d0 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5390:	68fb      	ldr	r3, [r7, #12]
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	0018      	movs	r0, r3
    5396:	4b50      	ldr	r3, [pc, #320]	; (54d8 <spi_init+0x17c>)
    5398:	4798      	blx	r3
    539a:	0003      	movs	r3, r0
    539c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    539e:	69fb      	ldr	r3, [r7, #28]
    53a0:	3302      	adds	r3, #2
    53a2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    53a4:	69fb      	ldr	r3, [r7, #28]
    53a6:	3314      	adds	r3, #20
    53a8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    53aa:	2201      	movs	r2, #1
    53ac:	69bb      	ldr	r3, [r7, #24]
    53ae:	409a      	lsls	r2, r3
    53b0:	0013      	movs	r3, r2
    53b2:	0019      	movs	r1, r3
    53b4:	2002      	movs	r0, #2
    53b6:	4b49      	ldr	r3, [pc, #292]	; (54dc <spi_init+0x180>)
    53b8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    53ba:	2310      	movs	r3, #16
    53bc:	18fb      	adds	r3, r7, r3
    53be:	0018      	movs	r0, r3
    53c0:	4b47      	ldr	r3, [pc, #284]	; (54e0 <spi_init+0x184>)
    53c2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	2224      	movs	r2, #36	; 0x24
    53c8:	5c9a      	ldrb	r2, [r3, r2]
    53ca:	2310      	movs	r3, #16
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    53d0:	697b      	ldr	r3, [r7, #20]
    53d2:	b2db      	uxtb	r3, r3
    53d4:	2210      	movs	r2, #16
    53d6:	18ba      	adds	r2, r7, r2
    53d8:	0011      	movs	r1, r2
    53da:	0018      	movs	r0, r3
    53dc:	4b41      	ldr	r3, [pc, #260]	; (54e4 <spi_init+0x188>)
    53de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    53e0:	697b      	ldr	r3, [r7, #20]
    53e2:	b2db      	uxtb	r3, r3
    53e4:	0018      	movs	r0, r3
    53e6:	4b40      	ldr	r3, [pc, #256]	; (54e8 <spi_init+0x18c>)
    53e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	2224      	movs	r2, #36	; 0x24
    53ee:	5c9b      	ldrb	r3, [r3, r2]
    53f0:	2100      	movs	r1, #0
    53f2:	0018      	movs	r0, r3
    53f4:	4b3d      	ldr	r3, [pc, #244]	; (54ec <spi_init+0x190>)
    53f6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	2b01      	cmp	r3, #1
    53fe:	d105      	bne.n	540c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5400:	6a3b      	ldr	r3, [r7, #32]
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	220c      	movs	r2, #12
    5406:	431a      	orrs	r2, r3
    5408:	6a3b      	ldr	r3, [r7, #32]
    540a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    540c:	687b      	ldr	r3, [r7, #4]
    540e:	781b      	ldrb	r3, [r3, #0]
    5410:	2b00      	cmp	r3, #0
    5412:	d105      	bne.n	5420 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5414:	6a3b      	ldr	r3, [r7, #32]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	2208      	movs	r2, #8
    541a:	431a      	orrs	r2, r3
    541c:	6a3b      	ldr	r3, [r7, #32]
    541e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5420:	2327      	movs	r3, #39	; 0x27
    5422:	18fb      	adds	r3, r7, r3
    5424:	2200      	movs	r2, #0
    5426:	701a      	strb	r2, [r3, #0]
    5428:	e010      	b.n	544c <spi_init+0xf0>
		module->callback[i]        = NULL;
    542a:	2327      	movs	r3, #39	; 0x27
    542c:	18fb      	adds	r3, r7, r3
    542e:	781b      	ldrb	r3, [r3, #0]
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	3302      	adds	r3, #2
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    543e:	2327      	movs	r3, #39	; 0x27
    5440:	18fb      	adds	r3, r7, r3
    5442:	781a      	ldrb	r2, [r3, #0]
    5444:	2327      	movs	r3, #39	; 0x27
    5446:	18fb      	adds	r3, r7, r3
    5448:	3201      	adds	r2, #1
    544a:	701a      	strb	r2, [r3, #0]
    544c:	2327      	movs	r3, #39	; 0x27
    544e:	18fb      	adds	r3, r7, r3
    5450:	781b      	ldrb	r3, [r3, #0]
    5452:	2b06      	cmp	r3, #6
    5454:	d9e9      	bls.n	542a <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    5456:	68fb      	ldr	r3, [r7, #12]
    5458:	2200      	movs	r2, #0
    545a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	2200      	movs	r2, #0
    5460:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    5462:	68fb      	ldr	r3, [r7, #12]
    5464:	2200      	movs	r2, #0
    5466:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    5468:	68fb      	ldr	r3, [r7, #12]
    546a:	2200      	movs	r2, #0
    546c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    546e:	68fb      	ldr	r3, [r7, #12]
    5470:	2236      	movs	r2, #54	; 0x36
    5472:	2100      	movs	r1, #0
    5474:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    5476:	68fb      	ldr	r3, [r7, #12]
    5478:	2237      	movs	r2, #55	; 0x37
    547a:	2100      	movs	r1, #0
    547c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    547e:	68fb      	ldr	r3, [r7, #12]
    5480:	2238      	movs	r2, #56	; 0x38
    5482:	2100      	movs	r1, #0
    5484:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    5486:	68fb      	ldr	r3, [r7, #12]
    5488:	2203      	movs	r2, #3
    548a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	2200      	movs	r2, #0
    5490:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    5492:	68fb      	ldr	r3, [r7, #12]
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	2213      	movs	r2, #19
    5498:	18bc      	adds	r4, r7, r2
    549a:	0018      	movs	r0, r3
    549c:	4b0e      	ldr	r3, [pc, #56]	; (54d8 <spi_init+0x17c>)
    549e:	4798      	blx	r3
    54a0:	0003      	movs	r3, r0
    54a2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    54a4:	4a12      	ldr	r2, [pc, #72]	; (54f0 <spi_init+0x194>)
    54a6:	2313      	movs	r3, #19
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	0011      	movs	r1, r2
    54ae:	0018      	movs	r0, r3
    54b0:	4b10      	ldr	r3, [pc, #64]	; (54f4 <spi_init+0x198>)
    54b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    54b4:	2313      	movs	r3, #19
    54b6:	18fb      	adds	r3, r7, r3
    54b8:	781a      	ldrb	r2, [r3, #0]
    54ba:	4b0f      	ldr	r3, [pc, #60]	; (54f8 <spi_init+0x19c>)
    54bc:	0092      	lsls	r2, r2, #2
    54be:	68f9      	ldr	r1, [r7, #12]
    54c0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    54c2:	687a      	ldr	r2, [r7, #4]
    54c4:	68fb      	ldr	r3, [r7, #12]
    54c6:	0011      	movs	r1, r2
    54c8:	0018      	movs	r0, r3
    54ca:	4b0c      	ldr	r3, [pc, #48]	; (54fc <spi_init+0x1a0>)
    54cc:	4798      	blx	r3
    54ce:	0003      	movs	r3, r0
}
    54d0:	0018      	movs	r0, r3
    54d2:	46bd      	mov	sp, r7
    54d4:	b00b      	add	sp, #44	; 0x2c
    54d6:	bd90      	pop	{r4, r7, pc}
    54d8:	00004d49 	.word	0x00004d49
    54dc:	00004f2d 	.word	0x00004f2d
    54e0:	00004f15 	.word	0x00004f15
    54e4:	000070d9 	.word	0x000070d9
    54e8:	0000711d 	.word	0x0000711d
    54ec:	00004b01 	.word	0x00004b01
    54f0:	00005b39 	.word	0x00005b39
    54f4:	00004dad 	.word	0x00004dad
    54f8:	20000508 	.word	0x20000508
    54fc:	0000510d 	.word	0x0000510d

00005500 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5500:	b590      	push	{r4, r7, lr}
    5502:	b089      	sub	sp, #36	; 0x24
    5504:	af00      	add	r7, sp, #0
    5506:	60f8      	str	r0, [r7, #12]
    5508:	60b9      	str	r1, [r7, #8]
    550a:	0019      	movs	r1, r3
    550c:	1dbb      	adds	r3, r7, #6
    550e:	801a      	strh	r2, [r3, #0]
    5510:	1d3b      	adds	r3, r7, #4
    5512:	1c0a      	adds	r2, r1, #0
    5514:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5516:	68fb      	ldr	r3, [r7, #12]
    5518:	2238      	movs	r2, #56	; 0x38
    551a:	5c9b      	ldrb	r3, [r3, r2]
    551c:	b2db      	uxtb	r3, r3
    551e:	2b05      	cmp	r3, #5
    5520:	d101      	bne.n	5526 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5522:	2305      	movs	r3, #5
    5524:	e0b8      	b.n	5698 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    5526:	1dbb      	adds	r3, r7, #6
    5528:	881b      	ldrh	r3, [r3, #0]
    552a:	2b00      	cmp	r3, #0
    552c:	d101      	bne.n	5532 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    552e:	2317      	movs	r3, #23
    5530:	e0b2      	b.n	5698 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    5532:	68fb      	ldr	r3, [r7, #12]
    5534:	79db      	ldrb	r3, [r3, #7]
    5536:	2201      	movs	r2, #1
    5538:	4053      	eors	r3, r2
    553a:	b2db      	uxtb	r3, r3
    553c:	2b00      	cmp	r3, #0
    553e:	d001      	beq.n	5544 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    5540:	231c      	movs	r3, #28
    5542:	e0a9      	b.n	5698 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	795b      	ldrb	r3, [r3, #5]
    5548:	2b00      	cmp	r3, #0
    554a:	d109      	bne.n	5560 <spi_read_buffer_wait+0x60>
    554c:	68fb      	ldr	r3, [r7, #12]
    554e:	0018      	movs	r0, r3
    5550:	4b53      	ldr	r3, [pc, #332]	; (56a0 <spi_read_buffer_wait+0x1a0>)
    5552:	4798      	blx	r3
    5554:	1e03      	subs	r3, r0, #0
    5556:	d003      	beq.n	5560 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    5558:	68fb      	ldr	r3, [r7, #12]
    555a:	0018      	movs	r0, r3
    555c:	4b51      	ldr	r3, [pc, #324]	; (56a4 <spi_read_buffer_wait+0x1a4>)
    555e:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    5560:	231e      	movs	r3, #30
    5562:	18fb      	adds	r3, r7, r3
    5564:	2200      	movs	r2, #0
    5566:	801a      	strh	r2, [r3, #0]

	while (length--) {
    5568:	e08d      	b.n	5686 <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    556a:	68fb      	ldr	r3, [r7, #12]
    556c:	795b      	ldrb	r3, [r3, #5]
    556e:	2b01      	cmp	r3, #1
    5570:	d112      	bne.n	5598 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    5572:	46c0      	nop			; (mov r8, r8)
    5574:	68fb      	ldr	r3, [r7, #12]
    5576:	0018      	movs	r0, r3
    5578:	4b4b      	ldr	r3, [pc, #300]	; (56a8 <spi_read_buffer_wait+0x1a8>)
    557a:	4798      	blx	r3
    557c:	0003      	movs	r3, r0
    557e:	001a      	movs	r2, r3
    5580:	2301      	movs	r3, #1
    5582:	4053      	eors	r3, r2
    5584:	b2db      	uxtb	r3, r3
    5586:	2b00      	cmp	r3, #0
    5588:	d1f4      	bne.n	5574 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    558a:	1d3b      	adds	r3, r7, #4
    558c:	881a      	ldrh	r2, [r3, #0]
    558e:	68fb      	ldr	r3, [r7, #12]
    5590:	0011      	movs	r1, r2
    5592:	0018      	movs	r0, r3
    5594:	4b45      	ldr	r3, [pc, #276]	; (56ac <spi_read_buffer_wait+0x1ac>)
    5596:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    5598:	68fb      	ldr	r3, [r7, #12]
    559a:	795b      	ldrb	r3, [r3, #5]
    559c:	2b00      	cmp	r3, #0
    559e:	d12a      	bne.n	55f6 <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    55a0:	2300      	movs	r3, #0
    55a2:	61bb      	str	r3, [r7, #24]
    55a4:	e008      	b.n	55b8 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    55a6:	68fb      	ldr	r3, [r7, #12]
    55a8:	0018      	movs	r0, r3
    55aa:	4b41      	ldr	r3, [pc, #260]	; (56b0 <spi_read_buffer_wait+0x1b0>)
    55ac:	4798      	blx	r3
    55ae:	1e03      	subs	r3, r0, #0
    55b0:	d107      	bne.n	55c2 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    55b2:	69bb      	ldr	r3, [r7, #24]
    55b4:	3301      	adds	r3, #1
    55b6:	61bb      	str	r3, [r7, #24]
    55b8:	69bb      	ldr	r3, [r7, #24]
    55ba:	4a3e      	ldr	r2, [pc, #248]	; (56b4 <spi_read_buffer_wait+0x1b4>)
    55bc:	4293      	cmp	r3, r2
    55be:	d9f2      	bls.n	55a6 <spi_read_buffer_wait+0xa6>
    55c0:	e000      	b.n	55c4 <spi_read_buffer_wait+0xc4>
					break;
    55c2:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    55c4:	68fb      	ldr	r3, [r7, #12]
    55c6:	0018      	movs	r0, r3
    55c8:	4b35      	ldr	r3, [pc, #212]	; (56a0 <spi_read_buffer_wait+0x1a0>)
    55ca:	4798      	blx	r3
    55cc:	1e03      	subs	r3, r0, #0
    55ce:	d005      	beq.n	55dc <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    55d0:	68fb      	ldr	r3, [r7, #12]
    55d2:	0018      	movs	r0, r3
    55d4:	4b33      	ldr	r3, [pc, #204]	; (56a4 <spi_read_buffer_wait+0x1a4>)
    55d6:	4798      	blx	r3
				return STATUS_ABORTED;
    55d8:	2304      	movs	r3, #4
    55da:	e05d      	b.n	5698 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    55dc:	68fb      	ldr	r3, [r7, #12]
    55de:	0018      	movs	r0, r3
    55e0:	4b33      	ldr	r3, [pc, #204]	; (56b0 <spi_read_buffer_wait+0x1b0>)
    55e2:	4798      	blx	r3
    55e4:	0003      	movs	r3, r0
    55e6:	001a      	movs	r2, r3
    55e8:	2301      	movs	r3, #1
    55ea:	4053      	eors	r3, r2
    55ec:	b2db      	uxtb	r3, r3
    55ee:	2b00      	cmp	r3, #0
    55f0:	d001      	beq.n	55f6 <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    55f2:	2312      	movs	r3, #18
    55f4:	e050      	b.n	5698 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	68fb      	ldr	r3, [r7, #12]
    55fa:	0018      	movs	r0, r3
    55fc:	4b2c      	ldr	r3, [pc, #176]	; (56b0 <spi_read_buffer_wait+0x1b0>)
    55fe:	4798      	blx	r3
    5600:	0003      	movs	r3, r0
    5602:	001a      	movs	r2, r3
    5604:	2301      	movs	r3, #1
    5606:	4053      	eors	r3, r2
    5608:	b2db      	uxtb	r3, r3
    560a:	2b00      	cmp	r3, #0
    560c:	d1f4      	bne.n	55f8 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    560e:	2314      	movs	r3, #20
    5610:	18fb      	adds	r3, r7, r3
    5612:	2200      	movs	r2, #0
    5614:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    5616:	2317      	movs	r3, #23
    5618:	18fc      	adds	r4, r7, r3
    561a:	2314      	movs	r3, #20
    561c:	18fa      	adds	r2, r7, r3
    561e:	68fb      	ldr	r3, [r7, #12]
    5620:	0011      	movs	r1, r2
    5622:	0018      	movs	r0, r3
    5624:	4b24      	ldr	r3, [pc, #144]	; (56b8 <spi_read_buffer_wait+0x1b8>)
    5626:	4798      	blx	r3
    5628:	0003      	movs	r3, r0
    562a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    562c:	2317      	movs	r3, #23
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	2b00      	cmp	r3, #0
    5634:	d003      	beq.n	563e <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    5636:	2317      	movs	r3, #23
    5638:	18fb      	adds	r3, r7, r3
    563a:	781b      	ldrb	r3, [r3, #0]
    563c:	e02c      	b.n	5698 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    563e:	231e      	movs	r3, #30
    5640:	18fb      	adds	r3, r7, r3
    5642:	881b      	ldrh	r3, [r3, #0]
    5644:	221e      	movs	r2, #30
    5646:	18ba      	adds	r2, r7, r2
    5648:	1c59      	adds	r1, r3, #1
    564a:	8011      	strh	r1, [r2, #0]
    564c:	001a      	movs	r2, r3
    564e:	68bb      	ldr	r3, [r7, #8]
    5650:	189b      	adds	r3, r3, r2
    5652:	2214      	movs	r2, #20
    5654:	18ba      	adds	r2, r7, r2
    5656:	8812      	ldrh	r2, [r2, #0]
    5658:	b2d2      	uxtb	r2, r2
    565a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	799b      	ldrb	r3, [r3, #6]
    5660:	2b01      	cmp	r3, #1
    5662:	d110      	bne.n	5686 <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    5664:	231e      	movs	r3, #30
    5666:	18fb      	adds	r3, r7, r3
    5668:	881b      	ldrh	r3, [r3, #0]
    566a:	221e      	movs	r2, #30
    566c:	18ba      	adds	r2, r7, r2
    566e:	1c59      	adds	r1, r3, #1
    5670:	8011      	strh	r1, [r2, #0]
    5672:	001a      	movs	r2, r3
    5674:	68bb      	ldr	r3, [r7, #8]
    5676:	189b      	adds	r3, r3, r2
    5678:	2214      	movs	r2, #20
    567a:	18ba      	adds	r2, r7, r2
    567c:	8812      	ldrh	r2, [r2, #0]
    567e:	0a12      	lsrs	r2, r2, #8
    5680:	b292      	uxth	r2, r2
    5682:	b2d2      	uxtb	r2, r2
    5684:	701a      	strb	r2, [r3, #0]
	while (length--) {
    5686:	1dbb      	adds	r3, r7, #6
    5688:	881b      	ldrh	r3, [r3, #0]
    568a:	1dba      	adds	r2, r7, #6
    568c:	1e59      	subs	r1, r3, #1
    568e:	8011      	strh	r1, [r2, #0]
    5690:	2b00      	cmp	r3, #0
    5692:	d000      	beq.n	5696 <spi_read_buffer_wait+0x196>
    5694:	e769      	b.n	556a <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    5696:	2300      	movs	r3, #0
}
    5698:	0018      	movs	r0, r3
    569a:	46bd      	mov	sp, r7
    569c:	b009      	add	sp, #36	; 0x24
    569e:	bd90      	pop	{r4, r7, pc}
    56a0:	00004fa9 	.word	0x00004fa9
    56a4:	000050f1 	.word	0x000050f1
    56a8:	00004fd1 	.word	0x00004fd1
    56ac:	00005021 	.word	0x00005021
    56b0:	00004ff9 	.word	0x00004ff9
    56b4:	00002710 	.word	0x00002710
    56b8:	00005069 	.word	0x00005069

000056bc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b08a      	sub	sp, #40	; 0x28
    56c0:	af00      	add	r7, sp, #0
    56c2:	60f8      	str	r0, [r7, #12]
    56c4:	60b9      	str	r1, [r7, #8]
    56c6:	1dbb      	adds	r3, r7, #6
    56c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    56ca:	68fb      	ldr	r3, [r7, #12]
    56cc:	2238      	movs	r2, #56	; 0x38
    56ce:	5c9b      	ldrb	r3, [r3, r2]
    56d0:	b2db      	uxtb	r3, r3
    56d2:	2b05      	cmp	r3, #5
    56d4:	d101      	bne.n	56da <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    56d6:	2305      	movs	r3, #5
    56d8:	e170      	b.n	59bc <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    56da:	1dbb      	adds	r3, r7, #6
    56dc:	881b      	ldrh	r3, [r3, #0]
    56de:	2b00      	cmp	r3, #0
    56e0:	d101      	bne.n	56e6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    56e2:	2317      	movs	r3, #23
    56e4:	e16a      	b.n	59bc <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    56e6:	68fb      	ldr	r3, [r7, #12]
    56e8:	795b      	ldrb	r3, [r3, #5]
    56ea:	2b00      	cmp	r3, #0
    56ec:	d109      	bne.n	5702 <spi_write_buffer_wait+0x46>
    56ee:	68fb      	ldr	r3, [r7, #12]
    56f0:	0018      	movs	r0, r3
    56f2:	4bb4      	ldr	r3, [pc, #720]	; (59c4 <spi_write_buffer_wait+0x308>)
    56f4:	4798      	blx	r3
    56f6:	1e03      	subs	r3, r0, #0
    56f8:	d003      	beq.n	5702 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	0018      	movs	r0, r3
    56fe:	4bb2      	ldr	r3, [pc, #712]	; (59c8 <spi_write_buffer_wait+0x30c>)
    5700:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    5702:	2326      	movs	r3, #38	; 0x26
    5704:	18fb      	adds	r3, r7, r3
    5706:	2200      	movs	r2, #0
    5708:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    570a:	2324      	movs	r3, #36	; 0x24
    570c:	18fb      	adds	r3, r7, r3
    570e:	1dba      	adds	r2, r7, #6
    5710:	8812      	ldrh	r2, [r2, #0]
    5712:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    5714:	e0fe      	b.n	5914 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	795b      	ldrb	r3, [r3, #5]
    571a:	2b00      	cmp	r3, #0
    571c:	d12a      	bne.n	5774 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    571e:	2300      	movs	r3, #0
    5720:	623b      	str	r3, [r7, #32]
    5722:	e008      	b.n	5736 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    5724:	68fb      	ldr	r3, [r7, #12]
    5726:	0018      	movs	r0, r3
    5728:	4ba8      	ldr	r3, [pc, #672]	; (59cc <spi_write_buffer_wait+0x310>)
    572a:	4798      	blx	r3
    572c:	1e03      	subs	r3, r0, #0
    572e:	d107      	bne.n	5740 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5730:	6a3b      	ldr	r3, [r7, #32]
    5732:	3301      	adds	r3, #1
    5734:	623b      	str	r3, [r7, #32]
    5736:	6a3b      	ldr	r3, [r7, #32]
    5738:	4aa5      	ldr	r2, [pc, #660]	; (59d0 <spi_write_buffer_wait+0x314>)
    573a:	4293      	cmp	r3, r2
    573c:	d9f2      	bls.n	5724 <spi_write_buffer_wait+0x68>
    573e:	e000      	b.n	5742 <spi_write_buffer_wait+0x86>
					break;
    5740:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	0018      	movs	r0, r3
    5746:	4b9f      	ldr	r3, [pc, #636]	; (59c4 <spi_write_buffer_wait+0x308>)
    5748:	4798      	blx	r3
    574a:	1e03      	subs	r3, r0, #0
    574c:	d005      	beq.n	575a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    574e:	68fb      	ldr	r3, [r7, #12]
    5750:	0018      	movs	r0, r3
    5752:	4b9d      	ldr	r3, [pc, #628]	; (59c8 <spi_write_buffer_wait+0x30c>)
    5754:	4798      	blx	r3
				return STATUS_ABORTED;
    5756:	2304      	movs	r3, #4
    5758:	e130      	b.n	59bc <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    575a:	68fb      	ldr	r3, [r7, #12]
    575c:	0018      	movs	r0, r3
    575e:	4b9b      	ldr	r3, [pc, #620]	; (59cc <spi_write_buffer_wait+0x310>)
    5760:	4798      	blx	r3
    5762:	0003      	movs	r3, r0
    5764:	001a      	movs	r2, r3
    5766:	2301      	movs	r3, #1
    5768:	4053      	eors	r3, r2
    576a:	b2db      	uxtb	r3, r3
    576c:	2b00      	cmp	r3, #0
    576e:	d001      	beq.n	5774 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    5770:	2312      	movs	r3, #18
    5772:	e123      	b.n	59bc <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    5774:	46c0      	nop			; (mov r8, r8)
    5776:	68fb      	ldr	r3, [r7, #12]
    5778:	0018      	movs	r0, r3
    577a:	4b94      	ldr	r3, [pc, #592]	; (59cc <spi_write_buffer_wait+0x310>)
    577c:	4798      	blx	r3
    577e:	0003      	movs	r3, r0
    5780:	001a      	movs	r2, r3
    5782:	2301      	movs	r3, #1
    5784:	4053      	eors	r3, r2
    5786:	b2db      	uxtb	r3, r3
    5788:	2b00      	cmp	r3, #0
    578a:	d1f4      	bne.n	5776 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    578c:	2326      	movs	r3, #38	; 0x26
    578e:	18fb      	adds	r3, r7, r3
    5790:	881b      	ldrh	r3, [r3, #0]
    5792:	2226      	movs	r2, #38	; 0x26
    5794:	18ba      	adds	r2, r7, r2
    5796:	1c59      	adds	r1, r3, #1
    5798:	8011      	strh	r1, [r2, #0]
    579a:	001a      	movs	r2, r3
    579c:	68bb      	ldr	r3, [r7, #8]
    579e:	189b      	adds	r3, r3, r2
    57a0:	781a      	ldrb	r2, [r3, #0]
    57a2:	231e      	movs	r3, #30
    57a4:	18fb      	adds	r3, r7, r3
    57a6:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    57a8:	68fb      	ldr	r3, [r7, #12]
    57aa:	799b      	ldrb	r3, [r3, #6]
    57ac:	2b01      	cmp	r3, #1
    57ae:	d115      	bne.n	57dc <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    57b0:	2326      	movs	r3, #38	; 0x26
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	881b      	ldrh	r3, [r3, #0]
    57b6:	2226      	movs	r2, #38	; 0x26
    57b8:	18ba      	adds	r2, r7, r2
    57ba:	1c59      	adds	r1, r3, #1
    57bc:	8011      	strh	r1, [r2, #0]
    57be:	001a      	movs	r2, r3
    57c0:	68bb      	ldr	r3, [r7, #8]
    57c2:	189b      	adds	r3, r3, r2
    57c4:	781b      	ldrb	r3, [r3, #0]
    57c6:	021b      	lsls	r3, r3, #8
    57c8:	b21a      	sxth	r2, r3
    57ca:	231e      	movs	r3, #30
    57cc:	18fb      	adds	r3, r7, r3
    57ce:	2100      	movs	r1, #0
    57d0:	5e5b      	ldrsh	r3, [r3, r1]
    57d2:	4313      	orrs	r3, r2
    57d4:	b21a      	sxth	r2, r3
    57d6:	231e      	movs	r3, #30
    57d8:	18fb      	adds	r3, r7, r3
    57da:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    57dc:	231e      	movs	r3, #30
    57de:	18fb      	adds	r3, r7, r3
    57e0:	881a      	ldrh	r2, [r3, #0]
    57e2:	68fb      	ldr	r3, [r7, #12]
    57e4:	0011      	movs	r1, r2
    57e6:	0018      	movs	r0, r3
    57e8:	4b7a      	ldr	r3, [pc, #488]	; (59d4 <spi_write_buffer_wait+0x318>)
    57ea:	4798      	blx	r3

		if (module->receiver_enabled) {
    57ec:	68fb      	ldr	r3, [r7, #12]
    57ee:	79db      	ldrb	r3, [r3, #7]
    57f0:	2224      	movs	r2, #36	; 0x24
    57f2:	18ba      	adds	r2, r7, r2
    57f4:	2124      	movs	r1, #36	; 0x24
    57f6:	1879      	adds	r1, r7, r1
    57f8:	8809      	ldrh	r1, [r1, #0]
    57fa:	8011      	strh	r1, [r2, #0]
    57fc:	2b00      	cmp	r3, #0
    57fe:	d100      	bne.n	5802 <spi_write_buffer_wait+0x146>
    5800:	e088      	b.n	5914 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    5802:	68fb      	ldr	r3, [r7, #12]
    5804:	795b      	ldrb	r3, [r3, #5]
    5806:	2b00      	cmp	r3, #0
    5808:	d000      	beq.n	580c <spi_write_buffer_wait+0x150>
    580a:	e069      	b.n	58e0 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    580c:	2300      	movs	r3, #0
    580e:	61bb      	str	r3, [r7, #24]
    5810:	e047      	b.n	58a2 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    5812:	1dbb      	adds	r3, r7, #6
    5814:	881b      	ldrh	r3, [r3, #0]
    5816:	2b00      	cmp	r3, #0
    5818:	d03a      	beq.n	5890 <spi_write_buffer_wait+0x1d4>
    581a:	68fb      	ldr	r3, [r7, #12]
    581c:	0018      	movs	r0, r3
    581e:	4b6b      	ldr	r3, [pc, #428]	; (59cc <spi_write_buffer_wait+0x310>)
    5820:	4798      	blx	r3
    5822:	1e03      	subs	r3, r0, #0
    5824:	d034      	beq.n	5890 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    5826:	2326      	movs	r3, #38	; 0x26
    5828:	18fb      	adds	r3, r7, r3
    582a:	881b      	ldrh	r3, [r3, #0]
    582c:	2226      	movs	r2, #38	; 0x26
    582e:	18ba      	adds	r2, r7, r2
    5830:	1c59      	adds	r1, r3, #1
    5832:	8011      	strh	r1, [r2, #0]
    5834:	001a      	movs	r2, r3
    5836:	68bb      	ldr	r3, [r7, #8]
    5838:	189b      	adds	r3, r3, r2
    583a:	781a      	ldrb	r2, [r3, #0]
    583c:	231e      	movs	r3, #30
    583e:	18fb      	adds	r3, r7, r3
    5840:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5842:	68fb      	ldr	r3, [r7, #12]
    5844:	799b      	ldrb	r3, [r3, #6]
    5846:	2b01      	cmp	r3, #1
    5848:	d115      	bne.n	5876 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    584a:	2326      	movs	r3, #38	; 0x26
    584c:	18fb      	adds	r3, r7, r3
    584e:	881b      	ldrh	r3, [r3, #0]
    5850:	2226      	movs	r2, #38	; 0x26
    5852:	18ba      	adds	r2, r7, r2
    5854:	1c59      	adds	r1, r3, #1
    5856:	8011      	strh	r1, [r2, #0]
    5858:	001a      	movs	r2, r3
    585a:	68bb      	ldr	r3, [r7, #8]
    585c:	189b      	adds	r3, r3, r2
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	021b      	lsls	r3, r3, #8
    5862:	b21a      	sxth	r2, r3
    5864:	231e      	movs	r3, #30
    5866:	18fb      	adds	r3, r7, r3
    5868:	2100      	movs	r1, #0
    586a:	5e5b      	ldrsh	r3, [r3, r1]
    586c:	4313      	orrs	r3, r2
    586e:	b21a      	sxth	r2, r3
    5870:	231e      	movs	r3, #30
    5872:	18fb      	adds	r3, r7, r3
    5874:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    5876:	231e      	movs	r3, #30
    5878:	18fb      	adds	r3, r7, r3
    587a:	881a      	ldrh	r2, [r3, #0]
    587c:	68fb      	ldr	r3, [r7, #12]
    587e:	0011      	movs	r1, r2
    5880:	0018      	movs	r0, r3
    5882:	4b54      	ldr	r3, [pc, #336]	; (59d4 <spi_write_buffer_wait+0x318>)
    5884:	4798      	blx	r3
						length--;
    5886:	1dbb      	adds	r3, r7, #6
    5888:	881a      	ldrh	r2, [r3, #0]
    588a:	1dbb      	adds	r3, r7, #6
    588c:	3a01      	subs	r2, #1
    588e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	0018      	movs	r0, r3
    5894:	4b50      	ldr	r3, [pc, #320]	; (59d8 <spi_write_buffer_wait+0x31c>)
    5896:	4798      	blx	r3
    5898:	1e03      	subs	r3, r0, #0
    589a:	d107      	bne.n	58ac <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    589c:	69bb      	ldr	r3, [r7, #24]
    589e:	3301      	adds	r3, #1
    58a0:	61bb      	str	r3, [r7, #24]
    58a2:	69bb      	ldr	r3, [r7, #24]
    58a4:	4a4a      	ldr	r2, [pc, #296]	; (59d0 <spi_write_buffer_wait+0x314>)
    58a6:	4293      	cmp	r3, r2
    58a8:	d9b3      	bls.n	5812 <spi_write_buffer_wait+0x156>
    58aa:	e000      	b.n	58ae <spi_write_buffer_wait+0x1f2>
						break;
    58ac:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    58ae:	68fb      	ldr	r3, [r7, #12]
    58b0:	0018      	movs	r0, r3
    58b2:	4b44      	ldr	r3, [pc, #272]	; (59c4 <spi_write_buffer_wait+0x308>)
    58b4:	4798      	blx	r3
    58b6:	1e03      	subs	r3, r0, #0
    58b8:	d005      	beq.n	58c6 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    58ba:	68fb      	ldr	r3, [r7, #12]
    58bc:	0018      	movs	r0, r3
    58be:	4b42      	ldr	r3, [pc, #264]	; (59c8 <spi_write_buffer_wait+0x30c>)
    58c0:	4798      	blx	r3
					return STATUS_ABORTED;
    58c2:	2304      	movs	r3, #4
    58c4:	e07a      	b.n	59bc <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	0018      	movs	r0, r3
    58ca:	4b43      	ldr	r3, [pc, #268]	; (59d8 <spi_write_buffer_wait+0x31c>)
    58cc:	4798      	blx	r3
    58ce:	0003      	movs	r3, r0
    58d0:	001a      	movs	r2, r3
    58d2:	2301      	movs	r3, #1
    58d4:	4053      	eors	r3, r2
    58d6:	b2db      	uxtb	r3, r3
    58d8:	2b00      	cmp	r3, #0
    58da:	d001      	beq.n	58e0 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    58dc:	2312      	movs	r3, #18
    58de:	e06d      	b.n	59bc <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    58e0:	46c0      	nop			; (mov r8, r8)
    58e2:	68fb      	ldr	r3, [r7, #12]
    58e4:	0018      	movs	r0, r3
    58e6:	4b3c      	ldr	r3, [pc, #240]	; (59d8 <spi_write_buffer_wait+0x31c>)
    58e8:	4798      	blx	r3
    58ea:	0003      	movs	r3, r0
    58ec:	001a      	movs	r2, r3
    58ee:	2301      	movs	r3, #1
    58f0:	4053      	eors	r3, r2
    58f2:	b2db      	uxtb	r3, r3
    58f4:	2b00      	cmp	r3, #0
    58f6:	d1f4      	bne.n	58e2 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    58f8:	2312      	movs	r3, #18
    58fa:	18fa      	adds	r2, r7, r3
    58fc:	68fb      	ldr	r3, [r7, #12]
    58fe:	0011      	movs	r1, r2
    5900:	0018      	movs	r0, r3
    5902:	4b36      	ldr	r3, [pc, #216]	; (59dc <spi_write_buffer_wait+0x320>)
    5904:	4798      	blx	r3
			flush_length--;
    5906:	2324      	movs	r3, #36	; 0x24
    5908:	18fb      	adds	r3, r7, r3
    590a:	881a      	ldrh	r2, [r3, #0]
    590c:	2324      	movs	r3, #36	; 0x24
    590e:	18fb      	adds	r3, r7, r3
    5910:	3a01      	subs	r2, #1
    5912:	801a      	strh	r2, [r3, #0]
	while (length--) {
    5914:	1dbb      	adds	r3, r7, #6
    5916:	881b      	ldrh	r3, [r3, #0]
    5918:	1dba      	adds	r2, r7, #6
    591a:	1e59      	subs	r1, r3, #1
    591c:	8011      	strh	r1, [r2, #0]
    591e:	2b00      	cmp	r3, #0
    5920:	d000      	beq.n	5924 <spi_write_buffer_wait+0x268>
    5922:	e6f8      	b.n	5716 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    5924:	68fb      	ldr	r3, [r7, #12]
    5926:	795b      	ldrb	r3, [r3, #5]
    5928:	2b01      	cmp	r3, #1
    592a:	d10b      	bne.n	5944 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    592c:	46c0      	nop			; (mov r8, r8)
    592e:	68fb      	ldr	r3, [r7, #12]
    5930:	0018      	movs	r0, r3
    5932:	4b24      	ldr	r3, [pc, #144]	; (59c4 <spi_write_buffer_wait+0x308>)
    5934:	4798      	blx	r3
    5936:	0003      	movs	r3, r0
    5938:	001a      	movs	r2, r3
    593a:	2301      	movs	r3, #1
    593c:	4053      	eors	r3, r2
    593e:	b2db      	uxtb	r3, r3
    5940:	2b00      	cmp	r3, #0
    5942:	d1f4      	bne.n	592e <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    5944:	68fb      	ldr	r3, [r7, #12]
    5946:	795b      	ldrb	r3, [r3, #5]
    5948:	2b00      	cmp	r3, #0
    594a:	d136      	bne.n	59ba <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    594c:	68fb      	ldr	r3, [r7, #12]
    594e:	79db      	ldrb	r3, [r3, #7]
    5950:	2b00      	cmp	r3, #0
    5952:	d032      	beq.n	59ba <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    5954:	e02c      	b.n	59b0 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5956:	2300      	movs	r3, #0
    5958:	617b      	str	r3, [r7, #20]
    595a:	e008      	b.n	596e <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	0018      	movs	r0, r3
    5960:	4b1d      	ldr	r3, [pc, #116]	; (59d8 <spi_write_buffer_wait+0x31c>)
    5962:	4798      	blx	r3
    5964:	1e03      	subs	r3, r0, #0
    5966:	d107      	bne.n	5978 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5968:	697b      	ldr	r3, [r7, #20]
    596a:	3301      	adds	r3, #1
    596c:	617b      	str	r3, [r7, #20]
    596e:	697b      	ldr	r3, [r7, #20]
    5970:	4a17      	ldr	r2, [pc, #92]	; (59d0 <spi_write_buffer_wait+0x314>)
    5972:	4293      	cmp	r3, r2
    5974:	d9f2      	bls.n	595c <spi_write_buffer_wait+0x2a0>
    5976:	e000      	b.n	597a <spi_write_buffer_wait+0x2be>
						break;
    5978:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	0018      	movs	r0, r3
    597e:	4b16      	ldr	r3, [pc, #88]	; (59d8 <spi_write_buffer_wait+0x31c>)
    5980:	4798      	blx	r3
    5982:	0003      	movs	r3, r0
    5984:	001a      	movs	r2, r3
    5986:	2301      	movs	r3, #1
    5988:	4053      	eors	r3, r2
    598a:	b2db      	uxtb	r3, r3
    598c:	2b00      	cmp	r3, #0
    598e:	d001      	beq.n	5994 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    5990:	2312      	movs	r3, #18
    5992:	e013      	b.n	59bc <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    5994:	2310      	movs	r3, #16
    5996:	18fa      	adds	r2, r7, r3
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b0f      	ldr	r3, [pc, #60]	; (59dc <spi_write_buffer_wait+0x320>)
    59a0:	4798      	blx	r3
				flush_length--;
    59a2:	2324      	movs	r3, #36	; 0x24
    59a4:	18fb      	adds	r3, r7, r3
    59a6:	881a      	ldrh	r2, [r3, #0]
    59a8:	2324      	movs	r3, #36	; 0x24
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	3a01      	subs	r2, #1
    59ae:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    59b0:	2324      	movs	r3, #36	; 0x24
    59b2:	18fb      	adds	r3, r7, r3
    59b4:	881b      	ldrh	r3, [r3, #0]
    59b6:	2b00      	cmp	r3, #0
    59b8:	d1cd      	bne.n	5956 <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    59ba:	2300      	movs	r3, #0
}
    59bc:	0018      	movs	r0, r3
    59be:	46bd      	mov	sp, r7
    59c0:	b00a      	add	sp, #40	; 0x28
    59c2:	bd80      	pop	{r7, pc}
    59c4:	00004fa9 	.word	0x00004fa9
    59c8:	000050f1 	.word	0x000050f1
    59cc:	00004fd1 	.word	0x00004fd1
    59d0:	00002710 	.word	0x00002710
    59d4:	00005021 	.word	0x00005021
    59d8:	00004ff9 	.word	0x00004ff9
    59dc:	00005069 	.word	0x00005069

000059e0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    59e0:	b580      	push	{r7, lr}
    59e2:	b084      	sub	sp, #16
    59e4:	af00      	add	r7, sp, #0
    59e6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	681b      	ldr	r3, [r3, #0]
    59ec:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	b2da      	uxtb	r2, r3
    59f6:	230e      	movs	r3, #14
    59f8:	18fb      	adds	r3, r7, r3
    59fa:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a00:	1c5a      	adds	r2, r3, #1
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	799b      	ldrb	r3, [r3, #6]
    5a0a:	2b01      	cmp	r3, #1
    5a0c:	d113      	bne.n	5a36 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a12:	781b      	ldrb	r3, [r3, #0]
    5a14:	b2db      	uxtb	r3, r3
    5a16:	021b      	lsls	r3, r3, #8
    5a18:	b21a      	sxth	r2, r3
    5a1a:	230e      	movs	r3, #14
    5a1c:	18fb      	adds	r3, r7, r3
    5a1e:	2100      	movs	r1, #0
    5a20:	5e5b      	ldrsh	r3, [r3, r1]
    5a22:	4313      	orrs	r3, r2
    5a24:	b21a      	sxth	r2, r3
    5a26:	230e      	movs	r3, #14
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a30:	1c5a      	adds	r2, r3, #1
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    5a36:	230e      	movs	r3, #14
    5a38:	18fb      	adds	r3, r7, r3
    5a3a:	881b      	ldrh	r3, [r3, #0]
    5a3c:	05db      	lsls	r3, r3, #23
    5a3e:	0dda      	lsrs	r2, r3, #23
    5a40:	68bb      	ldr	r3, [r7, #8]
    5a42:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5a48:	b29b      	uxth	r3, r3
    5a4a:	3b01      	subs	r3, #1
    5a4c:	b29a      	uxth	r2, r3
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	869a      	strh	r2, [r3, #52]	; 0x34
}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	46bd      	mov	sp, r7
    5a56:	b004      	add	sp, #16
    5a58:	bd80      	pop	{r7, pc}
	...

00005a5c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b084      	sub	sp, #16
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	681b      	ldr	r3, [r3, #0]
    5a68:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    5a6a:	4b08      	ldr	r3, [pc, #32]	; (5a8c <_spi_write_dummy+0x30>)
    5a6c:	881b      	ldrh	r3, [r3, #0]
    5a6e:	001a      	movs	r2, r3
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5a78:	b29b      	uxth	r3, r3
    5a7a:	3b01      	subs	r3, #1
    5a7c:	b29a      	uxth	r2, r3
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	46bd      	mov	sp, r7
    5a86:	b004      	add	sp, #16
    5a88:	bd80      	pop	{r7, pc}
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	20000520 	.word	0x20000520

00005a90 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    5a90:	b580      	push	{r7, lr}
    5a92:	b084      	sub	sp, #16
    5a94:	af00      	add	r7, sp, #0
    5a96:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    5a9e:	230a      	movs	r3, #10
    5aa0:	18fb      	adds	r3, r7, r3
    5aa2:	2200      	movs	r2, #0
    5aa4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5aaa:	230a      	movs	r3, #10
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5ab4:	b29b      	uxth	r3, r3
    5ab6:	3b01      	subs	r3, #1
    5ab8:	b29a      	uxth	r2, r3
    5aba:	687b      	ldr	r3, [r7, #4]
    5abc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	46bd      	mov	sp, r7
    5ac2:	b004      	add	sp, #16
    5ac4:	bd80      	pop	{r7, pc}

00005ac6 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    5ac6:	b580      	push	{r7, lr}
    5ac8:	b084      	sub	sp, #16
    5aca:	af00      	add	r7, sp, #0
    5acc:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ad8:	b29a      	uxth	r2, r3
    5ada:	230a      	movs	r3, #10
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	05d2      	lsls	r2, r2, #23
    5ae0:	0dd2      	lsrs	r2, r2, #23
    5ae2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ae8:	220a      	movs	r2, #10
    5aea:	18ba      	adds	r2, r7, r2
    5aec:	8812      	ldrh	r2, [r2, #0]
    5aee:	b2d2      	uxtb	r2, r2
    5af0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5af6:	1c5a      	adds	r2, r3, #1
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	799b      	ldrb	r3, [r3, #6]
    5b00:	2b01      	cmp	r3, #1
    5b02:	d10d      	bne.n	5b20 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b08:	220a      	movs	r2, #10
    5b0a:	18ba      	adds	r2, r7, r2
    5b0c:	8812      	ldrh	r2, [r2, #0]
    5b0e:	0a12      	lsrs	r2, r2, #8
    5b10:	b292      	uxth	r2, r2
    5b12:	b2d2      	uxtb	r2, r2
    5b14:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    5b16:	687b      	ldr	r3, [r7, #4]
    5b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b1a:	1c5a      	adds	r2, r3, #1
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5b24:	b29b      	uxth	r3, r3
    5b26:	3b01      	subs	r3, #1
    5b28:	b29a      	uxth	r2, r3
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5b2e:	46c0      	nop			; (mov r8, r8)
    5b30:	46bd      	mov	sp, r7
    5b32:	b004      	add	sp, #16
    5b34:	bd80      	pop	{r7, pc}
	...

00005b38 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b086      	sub	sp, #24
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	0002      	movs	r2, r0
    5b40:	1dfb      	adds	r3, r7, #7
    5b42:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    5b44:	1dfb      	adds	r3, r7, #7
    5b46:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    5b48:	4bb9      	ldr	r3, [pc, #740]	; (5e30 <_spi_interrupt_handler+0x2f8>)
    5b4a:	0092      	lsls	r2, r2, #2
    5b4c:	58d3      	ldr	r3, [r2, r3]
    5b4e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5b50:	697b      	ldr	r3, [r7, #20]
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    5b56:	697b      	ldr	r3, [r7, #20]
    5b58:	2237      	movs	r2, #55	; 0x37
    5b5a:	5c9a      	ldrb	r2, [r3, r2]
    5b5c:	697b      	ldr	r3, [r7, #20]
    5b5e:	2136      	movs	r1, #54	; 0x36
    5b60:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    5b62:	230f      	movs	r3, #15
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	400a      	ands	r2, r1
    5b68:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5b6a:	693b      	ldr	r3, [r7, #16]
    5b6c:	7e1b      	ldrb	r3, [r3, #24]
    5b6e:	b2da      	uxtb	r2, r3
    5b70:	230c      	movs	r3, #12
    5b72:	18fb      	adds	r3, r7, r3
    5b74:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    5b76:	693b      	ldr	r3, [r7, #16]
    5b78:	7d9b      	ldrb	r3, [r3, #22]
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	b29a      	uxth	r2, r3
    5b7e:	230c      	movs	r3, #12
    5b80:	18fb      	adds	r3, r7, r3
    5b82:	210c      	movs	r1, #12
    5b84:	1879      	adds	r1, r7, r1
    5b86:	8809      	ldrh	r1, [r1, #0]
    5b88:	400a      	ands	r2, r1
    5b8a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5b8c:	230c      	movs	r3, #12
    5b8e:	18fb      	adds	r3, r7, r3
    5b90:	881b      	ldrh	r3, [r3, #0]
    5b92:	2201      	movs	r2, #1
    5b94:	4013      	ands	r3, r2
    5b96:	d041      	beq.n	5c1c <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5b98:	697b      	ldr	r3, [r7, #20]
    5b9a:	795b      	ldrb	r3, [r3, #5]
    5b9c:	2b01      	cmp	r3, #1
    5b9e:	d110      	bne.n	5bc2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    5ba0:	697b      	ldr	r3, [r7, #20]
    5ba2:	7a5b      	ldrb	r3, [r3, #9]
    5ba4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d10b      	bne.n	5bc2 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    5baa:	697b      	ldr	r3, [r7, #20]
    5bac:	0018      	movs	r0, r3
    5bae:	4ba1      	ldr	r3, [pc, #644]	; (5e34 <_spi_interrupt_handler+0x2fc>)
    5bb0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    5bb2:	697b      	ldr	r3, [r7, #20]
    5bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5bb6:	b29b      	uxth	r3, r3
    5bb8:	2b00      	cmp	r3, #0
    5bba:	d102      	bne.n	5bc2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5bbc:	693b      	ldr	r3, [r7, #16]
    5bbe:	2201      	movs	r2, #1
    5bc0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5bc2:	697b      	ldr	r3, [r7, #20]
    5bc4:	795b      	ldrb	r3, [r3, #5]
		if (0
    5bc6:	2b01      	cmp	r3, #1
    5bc8:	d104      	bne.n	5bd4 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    5bca:	697b      	ldr	r3, [r7, #20]
    5bcc:	7a5b      	ldrb	r3, [r3, #9]
    5bce:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d108      	bne.n	5be6 <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    5bd4:	697b      	ldr	r3, [r7, #20]
    5bd6:	795b      	ldrb	r3, [r3, #5]
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d11f      	bne.n	5c1c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    5bdc:	697b      	ldr	r3, [r7, #20]
    5bde:	7a5b      	ldrb	r3, [r3, #9]
    5be0:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    5be2:	2b00      	cmp	r3, #0
    5be4:	d01a      	beq.n	5c1c <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    5be6:	697b      	ldr	r3, [r7, #20]
    5be8:	0018      	movs	r0, r3
    5bea:	4b93      	ldr	r3, [pc, #588]	; (5e38 <_spi_interrupt_handler+0x300>)
    5bec:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    5bee:	697b      	ldr	r3, [r7, #20]
    5bf0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5bf2:	b29b      	uxth	r3, r3
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d111      	bne.n	5c1c <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5bf8:	693b      	ldr	r3, [r7, #16]
    5bfa:	2201      	movs	r2, #1
    5bfc:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5bfe:	697b      	ldr	r3, [r7, #20]
    5c00:	7a5b      	ldrb	r3, [r3, #9]
    5c02:	b2db      	uxtb	r3, r3
    5c04:	2b01      	cmp	r3, #1
    5c06:	d109      	bne.n	5c1c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    5c08:	697b      	ldr	r3, [r7, #20]
    5c0a:	79db      	ldrb	r3, [r3, #7]
    5c0c:	2201      	movs	r2, #1
    5c0e:	4053      	eors	r3, r2
    5c10:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    5c12:	2b00      	cmp	r3, #0
    5c14:	d002      	beq.n	5c1c <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5c16:	693b      	ldr	r3, [r7, #16]
    5c18:	2202      	movs	r2, #2
    5c1a:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5c1c:	230c      	movs	r3, #12
    5c1e:	18fb      	adds	r3, r7, r3
    5c20:	881b      	ldrh	r3, [r3, #0]
    5c22:	2204      	movs	r2, #4
    5c24:	4013      	ands	r3, r2
    5c26:	d100      	bne.n	5c2a <_spi_interrupt_handler+0xf2>
    5c28:	e07e      	b.n	5d28 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c2a:	693b      	ldr	r3, [r7, #16]
    5c2c:	8b5b      	ldrh	r3, [r3, #26]
    5c2e:	b29b      	uxth	r3, r3
    5c30:	001a      	movs	r2, r3
    5c32:	2304      	movs	r3, #4
    5c34:	4013      	ands	r3, r2
    5c36:	d022      	beq.n	5c7e <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    5c38:	697b      	ldr	r3, [r7, #20]
    5c3a:	7a5b      	ldrb	r3, [r3, #9]
    5c3c:	b2db      	uxtb	r3, r3
    5c3e:	2b01      	cmp	r3, #1
    5c40:	d014      	beq.n	5c6c <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5c42:	697b      	ldr	r3, [r7, #20]
    5c44:	2238      	movs	r2, #56	; 0x38
    5c46:	211e      	movs	r1, #30
    5c48:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5c4a:	697b      	ldr	r3, [r7, #20]
    5c4c:	2203      	movs	r2, #3
    5c4e:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5c50:	693b      	ldr	r3, [r7, #16]
    5c52:	2205      	movs	r2, #5
    5c54:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5c56:	230f      	movs	r3, #15
    5c58:	18fb      	adds	r3, r7, r3
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	2208      	movs	r2, #8
    5c5e:	4013      	ands	r3, r2
    5c60:	d004      	beq.n	5c6c <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5c62:	697b      	ldr	r3, [r7, #20]
    5c64:	699b      	ldr	r3, [r3, #24]
    5c66:	697a      	ldr	r2, [r7, #20]
    5c68:	0010      	movs	r0, r2
    5c6a:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5c6c:	693b      	ldr	r3, [r7, #16]
    5c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c70:	230a      	movs	r3, #10
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c76:	693b      	ldr	r3, [r7, #16]
    5c78:	2204      	movs	r2, #4
    5c7a:	835a      	strh	r2, [r3, #26]
    5c7c:	e054      	b.n	5d28 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5c7e:	697b      	ldr	r3, [r7, #20]
    5c80:	7a5b      	ldrb	r3, [r3, #9]
    5c82:	b2db      	uxtb	r3, r3
    5c84:	2b01      	cmp	r3, #1
    5c86:	d11e      	bne.n	5cc6 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    5c88:	697b      	ldr	r3, [r7, #20]
    5c8a:	0018      	movs	r0, r3
    5c8c:	4b6b      	ldr	r3, [pc, #428]	; (5e3c <_spi_interrupt_handler+0x304>)
    5c8e:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    5c90:	697b      	ldr	r3, [r7, #20]
    5c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5c94:	b29b      	uxth	r3, r3
    5c96:	2b00      	cmp	r3, #0
    5c98:	d146      	bne.n	5d28 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5c9a:	693b      	ldr	r3, [r7, #16]
    5c9c:	2204      	movs	r2, #4
    5c9e:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    5ca0:	697b      	ldr	r3, [r7, #20]
    5ca2:	2238      	movs	r2, #56	; 0x38
    5ca4:	2100      	movs	r1, #0
    5ca6:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    5ca8:	697b      	ldr	r3, [r7, #20]
    5caa:	2203      	movs	r2, #3
    5cac:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5cae:	230f      	movs	r3, #15
    5cb0:	18fb      	adds	r3, r7, r3
    5cb2:	781b      	ldrb	r3, [r3, #0]
    5cb4:	2201      	movs	r2, #1
    5cb6:	4013      	ands	r3, r2
    5cb8:	d036      	beq.n	5d28 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5cba:	697b      	ldr	r3, [r7, #20]
    5cbc:	68db      	ldr	r3, [r3, #12]
    5cbe:	697a      	ldr	r2, [r7, #20]
    5cc0:	0010      	movs	r0, r2
    5cc2:	4798      	blx	r3
    5cc4:	e030      	b.n	5d28 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5cc6:	697b      	ldr	r3, [r7, #20]
    5cc8:	0018      	movs	r0, r3
    5cca:	4b5d      	ldr	r3, [pc, #372]	; (5e40 <_spi_interrupt_handler+0x308>)
    5ccc:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5cce:	697b      	ldr	r3, [r7, #20]
    5cd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5cd2:	b29b      	uxth	r3, r3
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d127      	bne.n	5d28 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    5cd8:	697b      	ldr	r3, [r7, #20]
    5cda:	2238      	movs	r2, #56	; 0x38
    5cdc:	2100      	movs	r1, #0
    5cde:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5ce0:	693b      	ldr	r3, [r7, #16]
    5ce2:	2204      	movs	r2, #4
    5ce4:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5ce6:	697b      	ldr	r3, [r7, #20]
    5ce8:	7a5b      	ldrb	r3, [r3, #9]
    5cea:	b2db      	uxtb	r3, r3
    5cec:	2b02      	cmp	r3, #2
    5cee:	d10b      	bne.n	5d08 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5cf0:	230f      	movs	r3, #15
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	2204      	movs	r2, #4
    5cf8:	4013      	ands	r3, r2
    5cfa:	d015      	beq.n	5d28 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5cfc:	697b      	ldr	r3, [r7, #20]
    5cfe:	695b      	ldr	r3, [r3, #20]
    5d00:	697a      	ldr	r2, [r7, #20]
    5d02:	0010      	movs	r0, r2
    5d04:	4798      	blx	r3
    5d06:	e00f      	b.n	5d28 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    5d08:	697b      	ldr	r3, [r7, #20]
    5d0a:	7a5b      	ldrb	r3, [r3, #9]
    5d0c:	b2db      	uxtb	r3, r3
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d10a      	bne.n	5d28 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5d12:	230f      	movs	r3, #15
    5d14:	18fb      	adds	r3, r7, r3
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	2202      	movs	r2, #2
    5d1a:	4013      	ands	r3, r2
    5d1c:	d004      	beq.n	5d28 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5d1e:	697b      	ldr	r3, [r7, #20]
    5d20:	691b      	ldr	r3, [r3, #16]
    5d22:	697a      	ldr	r2, [r7, #20]
    5d24:	0010      	movs	r0, r2
    5d26:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5d28:	230c      	movs	r3, #12
    5d2a:	18fb      	adds	r3, r7, r3
    5d2c:	881b      	ldrh	r3, [r3, #0]
    5d2e:	2202      	movs	r2, #2
    5d30:	4013      	ands	r3, r2
    5d32:	d046      	beq.n	5dc2 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    5d34:	697b      	ldr	r3, [r7, #20]
    5d36:	795b      	ldrb	r3, [r3, #5]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d11d      	bne.n	5d78 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    5d3c:	693b      	ldr	r3, [r7, #16]
    5d3e:	2207      	movs	r2, #7
    5d40:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5d42:	693b      	ldr	r3, [r7, #16]
    5d44:	2202      	movs	r2, #2
    5d46:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    5d48:	697b      	ldr	r3, [r7, #20]
    5d4a:	2203      	movs	r2, #3
    5d4c:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    5d4e:	697b      	ldr	r3, [r7, #20]
    5d50:	2200      	movs	r2, #0
    5d52:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    5d54:	697b      	ldr	r3, [r7, #20]
    5d56:	2200      	movs	r2, #0
    5d58:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    5d5a:	697b      	ldr	r3, [r7, #20]
    5d5c:	2238      	movs	r2, #56	; 0x38
    5d5e:	2100      	movs	r1, #0
    5d60:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    5d62:	230f      	movs	r3, #15
    5d64:	18fb      	adds	r3, r7, r3
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	2210      	movs	r2, #16
    5d6a:	4013      	ands	r3, r2
    5d6c:	d004      	beq.n	5d78 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    5d6e:	697b      	ldr	r3, [r7, #20]
    5d70:	69db      	ldr	r3, [r3, #28]
    5d72:	697a      	ldr	r2, [r7, #20]
    5d74:	0010      	movs	r0, r2
    5d76:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5d78:	697b      	ldr	r3, [r7, #20]
    5d7a:	795b      	ldrb	r3, [r3, #5]
    5d7c:	2b01      	cmp	r3, #1
    5d7e:	d120      	bne.n	5dc2 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5d80:	697b      	ldr	r3, [r7, #20]
    5d82:	7a5b      	ldrb	r3, [r3, #9]
    5d84:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5d86:	2b01      	cmp	r3, #1
    5d88:	d11b      	bne.n	5dc2 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5d8a:	697b      	ldr	r3, [r7, #20]
    5d8c:	79db      	ldrb	r3, [r3, #7]
    5d8e:	2201      	movs	r2, #1
    5d90:	4053      	eors	r3, r2
    5d92:	b2db      	uxtb	r3, r3
    5d94:	2b00      	cmp	r3, #0
    5d96:	d014      	beq.n	5dc2 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5d98:	693b      	ldr	r3, [r7, #16]
    5d9a:	2202      	movs	r2, #2
    5d9c:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5d9e:	697b      	ldr	r3, [r7, #20]
    5da0:	2203      	movs	r2, #3
    5da2:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    5da4:	697b      	ldr	r3, [r7, #20]
    5da6:	2238      	movs	r2, #56	; 0x38
    5da8:	2100      	movs	r1, #0
    5daa:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5dac:	230f      	movs	r3, #15
    5dae:	18fb      	adds	r3, r7, r3
    5db0:	781b      	ldrb	r3, [r3, #0]
    5db2:	2201      	movs	r2, #1
    5db4:	4013      	ands	r3, r2
    5db6:	d004      	beq.n	5dc2 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5db8:	697b      	ldr	r3, [r7, #20]
    5dba:	68db      	ldr	r3, [r3, #12]
    5dbc:	697a      	ldr	r2, [r7, #20]
    5dbe:	0010      	movs	r0, r2
    5dc0:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    5dc2:	230c      	movs	r3, #12
    5dc4:	18fb      	adds	r3, r7, r3
    5dc6:	881b      	ldrh	r3, [r3, #0]
    5dc8:	2208      	movs	r2, #8
    5dca:	4013      	ands	r3, r2
    5dcc:	d014      	beq.n	5df8 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    5dce:	697b      	ldr	r3, [r7, #20]
    5dd0:	795b      	ldrb	r3, [r3, #5]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d110      	bne.n	5df8 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    5dd6:	693b      	ldr	r3, [r7, #16]
    5dd8:	2208      	movs	r2, #8
    5dda:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    5ddc:	693b      	ldr	r3, [r7, #16]
    5dde:	2208      	movs	r2, #8
    5de0:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    5de2:	230f      	movs	r3, #15
    5de4:	18fb      	adds	r3, r7, r3
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2220      	movs	r2, #32
    5dea:	4013      	ands	r3, r2
    5dec:	d004      	beq.n	5df8 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    5dee:	697b      	ldr	r3, [r7, #20]
    5df0:	6a1b      	ldr	r3, [r3, #32]
    5df2:	697a      	ldr	r2, [r7, #20]
    5df4:	0010      	movs	r0, r2
    5df6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5df8:	230c      	movs	r3, #12
    5dfa:	18fb      	adds	r3, r7, r3
    5dfc:	881b      	ldrh	r3, [r3, #0]
    5dfe:	2280      	movs	r2, #128	; 0x80
    5e00:	4013      	ands	r3, r2
    5e02:	d010      	beq.n	5e26 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5e04:	693b      	ldr	r3, [r7, #16]
    5e06:	2280      	movs	r2, #128	; 0x80
    5e08:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5e0a:	693b      	ldr	r3, [r7, #16]
    5e0c:	2280      	movs	r2, #128	; 0x80
    5e0e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5e10:	230f      	movs	r3, #15
    5e12:	18fb      	adds	r3, r7, r3
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	2240      	movs	r2, #64	; 0x40
    5e18:	4013      	ands	r3, r2
    5e1a:	d004      	beq.n	5e26 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5e1c:	697b      	ldr	r3, [r7, #20]
    5e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e20:	697a      	ldr	r2, [r7, #20]
    5e22:	0010      	movs	r0, r2
    5e24:	4798      	blx	r3
		}
	}
#  endif
}
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	46bd      	mov	sp, r7
    5e2a:	b006      	add	sp, #24
    5e2c:	bd80      	pop	{r7, pc}
    5e2e:	46c0      	nop			; (mov r8, r8)
    5e30:	20000508 	.word	0x20000508
    5e34:	00005a5d 	.word	0x00005a5d
    5e38:	000059e1 	.word	0x000059e1
    5e3c:	00005a91 	.word	0x00005a91
    5e40:	00005ac7 	.word	0x00005ac7

00005e44 <system_gclk_chan_get_config_defaults>:
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b082      	sub	sp, #8
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5e4c:	687b      	ldr	r3, [r7, #4]
    5e4e:	2200      	movs	r2, #0
    5e50:	701a      	strb	r2, [r3, #0]
}
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	46bd      	mov	sp, r7
    5e56:	b002      	add	sp, #8
    5e58:	bd80      	pop	{r7, pc}
	...

00005e5c <system_apb_clock_set_mask>:
{
    5e5c:	b580      	push	{r7, lr}
    5e5e:	b082      	sub	sp, #8
    5e60:	af00      	add	r7, sp, #0
    5e62:	0002      	movs	r2, r0
    5e64:	6039      	str	r1, [r7, #0]
    5e66:	1dfb      	adds	r3, r7, #7
    5e68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5e6a:	1dfb      	adds	r3, r7, #7
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	2b01      	cmp	r3, #1
    5e70:	d00a      	beq.n	5e88 <system_apb_clock_set_mask+0x2c>
    5e72:	2b02      	cmp	r3, #2
    5e74:	d00f      	beq.n	5e96 <system_apb_clock_set_mask+0x3a>
    5e76:	2b00      	cmp	r3, #0
    5e78:	d114      	bne.n	5ea4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5e7a:	4b0e      	ldr	r3, [pc, #56]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e7c:	4a0d      	ldr	r2, [pc, #52]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e7e:	6991      	ldr	r1, [r2, #24]
    5e80:	683a      	ldr	r2, [r7, #0]
    5e82:	430a      	orrs	r2, r1
    5e84:	619a      	str	r2, [r3, #24]
			break;
    5e86:	e00f      	b.n	5ea8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5e88:	4b0a      	ldr	r3, [pc, #40]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e8a:	4a0a      	ldr	r2, [pc, #40]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e8c:	69d1      	ldr	r1, [r2, #28]
    5e8e:	683a      	ldr	r2, [r7, #0]
    5e90:	430a      	orrs	r2, r1
    5e92:	61da      	str	r2, [r3, #28]
			break;
    5e94:	e008      	b.n	5ea8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5e96:	4b07      	ldr	r3, [pc, #28]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e98:	4a06      	ldr	r2, [pc, #24]	; (5eb4 <system_apb_clock_set_mask+0x58>)
    5e9a:	6a11      	ldr	r1, [r2, #32]
    5e9c:	683a      	ldr	r2, [r7, #0]
    5e9e:	430a      	orrs	r2, r1
    5ea0:	621a      	str	r2, [r3, #32]
			break;
    5ea2:	e001      	b.n	5ea8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5ea4:	2317      	movs	r3, #23
    5ea6:	e000      	b.n	5eaa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5ea8:	2300      	movs	r3, #0
}
    5eaa:	0018      	movs	r0, r3
    5eac:	46bd      	mov	sp, r7
    5eae:	b002      	add	sp, #8
    5eb0:	bd80      	pop	{r7, pc}
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	40000400 	.word	0x40000400

00005eb8 <system_pinmux_get_config_defaults>:
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	b082      	sub	sp, #8
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	2280      	movs	r2, #128	; 0x80
    5ec4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	2200      	movs	r2, #0
    5eca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	2201      	movs	r2, #1
    5ed0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	2200      	movs	r2, #0
    5ed6:	70da      	strb	r2, [r3, #3]
}
    5ed8:	46c0      	nop			; (mov r8, r8)
    5eda:	46bd      	mov	sp, r7
    5edc:	b002      	add	sp, #8
    5ede:	bd80      	pop	{r7, pc}

00005ee0 <system_is_debugger_present>:
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5ee4:	4b05      	ldr	r3, [pc, #20]	; (5efc <system_is_debugger_present+0x1c>)
    5ee6:	789b      	ldrb	r3, [r3, #2]
    5ee8:	b2db      	uxtb	r3, r3
    5eea:	001a      	movs	r2, r3
    5eec:	2302      	movs	r3, #2
    5eee:	4013      	ands	r3, r2
    5ef0:	1e5a      	subs	r2, r3, #1
    5ef2:	4193      	sbcs	r3, r2
    5ef4:	b2db      	uxtb	r3, r3
}
    5ef6:	0018      	movs	r0, r3
    5ef8:	46bd      	mov	sp, r7
    5efa:	bd80      	pop	{r7, pc}
    5efc:	41002000 	.word	0x41002000

00005f00 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b084      	sub	sp, #16
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	681b      	ldr	r3, [r3, #0]
    5f0c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5f0e:	68fb      	ldr	r3, [r7, #12]
    5f10:	69db      	ldr	r3, [r3, #28]
    5f12:	1e5a      	subs	r2, r3, #1
    5f14:	4193      	sbcs	r3, r2
    5f16:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5f18:	0018      	movs	r0, r3
    5f1a:	46bd      	mov	sp, r7
    5f1c:	b004      	add	sp, #16
    5f1e:	bd80      	pop	{r7, pc}

00005f20 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5f28:	46c0      	nop			; (mov r8, r8)
    5f2a:	687b      	ldr	r3, [r7, #4]
    5f2c:	0018      	movs	r0, r3
    5f2e:	4b04      	ldr	r3, [pc, #16]	; (5f40 <_usart_wait_for_sync+0x20>)
    5f30:	4798      	blx	r3
    5f32:	1e03      	subs	r3, r0, #0
    5f34:	d1f9      	bne.n	5f2a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	46bd      	mov	sp, r7
    5f3a:	b002      	add	sp, #8
    5f3c:	bd80      	pop	{r7, pc}
    5f3e:	46c0      	nop			; (mov r8, r8)
    5f40:	00005f01 	.word	0x00005f01

00005f44 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5f44:	b5b0      	push	{r4, r5, r7, lr}
    5f46:	b08c      	sub	sp, #48	; 0x30
    5f48:	af02      	add	r7, sp, #8
    5f4a:	6078      	str	r0, [r7, #4]
    5f4c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	681b      	ldr	r3, [r3, #0]
    5f58:	0018      	movs	r0, r3
    5f5a:	4bab      	ldr	r3, [pc, #684]	; (6208 <_usart_set_config+0x2c4>)
    5f5c:	4798      	blx	r3
    5f5e:	0003      	movs	r3, r0
    5f60:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5f62:	697b      	ldr	r3, [r7, #20]
    5f64:	3314      	adds	r3, #20
    5f66:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5f68:	2300      	movs	r3, #0
    5f6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5f6c:	2300      	movs	r3, #0
    5f6e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5f70:	230a      	movs	r3, #10
    5f72:	18fb      	adds	r3, r7, r3
    5f74:	2200      	movs	r2, #0
    5f76:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	2200      	movs	r2, #0
    5f7e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5f80:	231e      	movs	r3, #30
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	2210      	movs	r2, #16
    5f86:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5f88:	683b      	ldr	r3, [r7, #0]
    5f8a:	8a1b      	ldrh	r3, [r3, #16]
    5f8c:	2280      	movs	r2, #128	; 0x80
    5f8e:	01d2      	lsls	r2, r2, #7
    5f90:	4293      	cmp	r3, r2
    5f92:	d01c      	beq.n	5fce <_usart_set_config+0x8a>
    5f94:	2280      	movs	r2, #128	; 0x80
    5f96:	01d2      	lsls	r2, r2, #7
    5f98:	4293      	cmp	r3, r2
    5f9a:	dc06      	bgt.n	5faa <_usart_set_config+0x66>
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d00d      	beq.n	5fbc <_usart_set_config+0x78>
    5fa0:	2280      	movs	r2, #128	; 0x80
    5fa2:	0192      	lsls	r2, r2, #6
    5fa4:	4293      	cmp	r3, r2
    5fa6:	d024      	beq.n	5ff2 <_usart_set_config+0xae>
    5fa8:	e035      	b.n	6016 <_usart_set_config+0xd2>
    5faa:	22c0      	movs	r2, #192	; 0xc0
    5fac:	01d2      	lsls	r2, r2, #7
    5fae:	4293      	cmp	r3, r2
    5fb0:	d028      	beq.n	6004 <_usart_set_config+0xc0>
    5fb2:	2280      	movs	r2, #128	; 0x80
    5fb4:	0212      	lsls	r2, r2, #8
    5fb6:	4293      	cmp	r3, r2
    5fb8:	d012      	beq.n	5fe0 <_usart_set_config+0x9c>
    5fba:	e02c      	b.n	6016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fbc:	231f      	movs	r3, #31
    5fbe:	18fb      	adds	r3, r7, r3
    5fc0:	2200      	movs	r2, #0
    5fc2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5fc4:	231e      	movs	r3, #30
    5fc6:	18fb      	adds	r3, r7, r3
    5fc8:	2210      	movs	r2, #16
    5fca:	701a      	strb	r2, [r3, #0]
			break;
    5fcc:	e023      	b.n	6016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fce:	231f      	movs	r3, #31
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	2200      	movs	r2, #0
    5fd4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5fd6:	231e      	movs	r3, #30
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	2208      	movs	r2, #8
    5fdc:	701a      	strb	r2, [r3, #0]
			break;
    5fde:	e01a      	b.n	6016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5fe0:	231f      	movs	r3, #31
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2200      	movs	r2, #0
    5fe6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5fe8:	231e      	movs	r3, #30
    5fea:	18fb      	adds	r3, r7, r3
    5fec:	2203      	movs	r2, #3
    5fee:	701a      	strb	r2, [r3, #0]
			break;
    5ff0:	e011      	b.n	6016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ff2:	231f      	movs	r3, #31
    5ff4:	18fb      	adds	r3, r7, r3
    5ff6:	2201      	movs	r2, #1
    5ff8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5ffa:	231e      	movs	r3, #30
    5ffc:	18fb      	adds	r3, r7, r3
    5ffe:	2210      	movs	r2, #16
    6000:	701a      	strb	r2, [r3, #0]
			break;
    6002:	e008      	b.n	6016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6004:	231f      	movs	r3, #31
    6006:	18fb      	adds	r3, r7, r3
    6008:	2201      	movs	r2, #1
    600a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    600c:	231e      	movs	r3, #30
    600e:	18fb      	adds	r3, r7, r3
    6010:	2208      	movs	r2, #8
    6012:	701a      	strb	r2, [r3, #0]
			break;
    6014:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    6016:	683b      	ldr	r3, [r7, #0]
    6018:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    601a:	683b      	ldr	r3, [r7, #0]
    601c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    601e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    6024:	4313      	orrs	r3, r2
		config->sample_rate |
    6026:	683a      	ldr	r2, [r7, #0]
    6028:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    602a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    602c:	683a      	ldr	r2, [r7, #0]
    602e:	7e12      	ldrb	r2, [r2, #24]
    6030:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    6032:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6034:	683a      	ldr	r2, [r7, #0]
    6036:	2126      	movs	r1, #38	; 0x26
    6038:	5c52      	ldrb	r2, [r2, r1]
    603a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    603c:	4313      	orrs	r3, r2
    603e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    6040:	231d      	movs	r3, #29
    6042:	18fb      	adds	r3, r7, r3
    6044:	2200      	movs	r2, #0
    6046:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    6048:	683b      	ldr	r3, [r7, #0]
    604a:	685b      	ldr	r3, [r3, #4]
    604c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    604e:	68fb      	ldr	r3, [r7, #12]
    6050:	2b00      	cmp	r3, #0
    6052:	d01e      	beq.n	6092 <_usart_set_config+0x14e>
    6054:	2280      	movs	r2, #128	; 0x80
    6056:	0552      	lsls	r2, r2, #21
    6058:	4293      	cmp	r3, r2
    605a:	d14f      	bne.n	60fc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    605c:	683b      	ldr	r3, [r7, #0]
    605e:	2227      	movs	r2, #39	; 0x27
    6060:	5c9b      	ldrb	r3, [r3, r2]
    6062:	2201      	movs	r2, #1
    6064:	4053      	eors	r3, r2
    6066:	b2db      	uxtb	r3, r3
    6068:	2b00      	cmp	r3, #0
    606a:	d046      	beq.n	60fa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    606c:	683b      	ldr	r3, [r7, #0]
    606e:	6a1d      	ldr	r5, [r3, #32]
    6070:	693b      	ldr	r3, [r7, #16]
    6072:	b2db      	uxtb	r3, r3
    6074:	0018      	movs	r0, r3
    6076:	4b65      	ldr	r3, [pc, #404]	; (620c <_usart_set_config+0x2c8>)
    6078:	4798      	blx	r3
    607a:	0001      	movs	r1, r0
    607c:	231d      	movs	r3, #29
    607e:	18fc      	adds	r4, r7, r3
    6080:	230a      	movs	r3, #10
    6082:	18fb      	adds	r3, r7, r3
    6084:	001a      	movs	r2, r3
    6086:	0028      	movs	r0, r5
    6088:	4b61      	ldr	r3, [pc, #388]	; (6210 <_usart_set_config+0x2cc>)
    608a:	4798      	blx	r3
    608c:	0003      	movs	r3, r0
    608e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    6090:	e033      	b.n	60fa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    6092:	683b      	ldr	r3, [r7, #0]
    6094:	2227      	movs	r2, #39	; 0x27
    6096:	5c9b      	ldrb	r3, [r3, r2]
    6098:	2b00      	cmp	r3, #0
    609a:	d014      	beq.n	60c6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    609c:	683b      	ldr	r3, [r7, #0]
    609e:	6a18      	ldr	r0, [r3, #32]
    60a0:	683b      	ldr	r3, [r7, #0]
    60a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    60a4:	231d      	movs	r3, #29
    60a6:	18fc      	adds	r4, r7, r3
    60a8:	231f      	movs	r3, #31
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781d      	ldrb	r5, [r3, #0]
    60ae:	230a      	movs	r3, #10
    60b0:	18fa      	adds	r2, r7, r3
    60b2:	231e      	movs	r3, #30
    60b4:	18fb      	adds	r3, r7, r3
    60b6:	781b      	ldrb	r3, [r3, #0]
    60b8:	9300      	str	r3, [sp, #0]
    60ba:	002b      	movs	r3, r5
    60bc:	4d55      	ldr	r5, [pc, #340]	; (6214 <_usart_set_config+0x2d0>)
    60be:	47a8      	blx	r5
    60c0:	0003      	movs	r3, r0
    60c2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    60c4:	e01a      	b.n	60fc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    60c6:	683b      	ldr	r3, [r7, #0]
    60c8:	6a1d      	ldr	r5, [r3, #32]
    60ca:	693b      	ldr	r3, [r7, #16]
    60cc:	b2db      	uxtb	r3, r3
    60ce:	0018      	movs	r0, r3
    60d0:	4b4e      	ldr	r3, [pc, #312]	; (620c <_usart_set_config+0x2c8>)
    60d2:	4798      	blx	r3
				status_code =
    60d4:	231d      	movs	r3, #29
    60d6:	18fc      	adds	r4, r7, r3
    60d8:	231f      	movs	r3, #31
    60da:	18fb      	adds	r3, r7, r3
    60dc:	7819      	ldrb	r1, [r3, #0]
    60de:	230a      	movs	r3, #10
    60e0:	18fa      	adds	r2, r7, r3
    60e2:	231e      	movs	r3, #30
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	9300      	str	r3, [sp, #0]
    60ea:	000b      	movs	r3, r1
    60ec:	0001      	movs	r1, r0
    60ee:	0028      	movs	r0, r5
    60f0:	4d48      	ldr	r5, [pc, #288]	; (6214 <_usart_set_config+0x2d0>)
    60f2:	47a8      	blx	r5
    60f4:	0003      	movs	r3, r0
    60f6:	7023      	strb	r3, [r4, #0]
			break;
    60f8:	e000      	b.n	60fc <_usart_set_config+0x1b8>
			break;
    60fa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    60fc:	231d      	movs	r3, #29
    60fe:	18fb      	adds	r3, r7, r3
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	2b00      	cmp	r3, #0
    6104:	d003      	beq.n	610e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    6106:	231d      	movs	r3, #29
    6108:	18fb      	adds	r3, r7, r3
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	e077      	b.n	61fe <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    610e:	683b      	ldr	r3, [r7, #0]
    6110:	7e5b      	ldrb	r3, [r3, #25]
    6112:	2b00      	cmp	r3, #0
    6114:	d003      	beq.n	611e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    6116:	683b      	ldr	r3, [r7, #0]
    6118:	7e9a      	ldrb	r2, [r3, #26]
    611a:	69bb      	ldr	r3, [r7, #24]
    611c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	0018      	movs	r0, r3
    6122:	4b3d      	ldr	r3, [pc, #244]	; (6218 <_usart_set_config+0x2d4>)
    6124:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    6126:	230a      	movs	r3, #10
    6128:	18fb      	adds	r3, r7, r3
    612a:	881a      	ldrh	r2, [r3, #0]
    612c:	69bb      	ldr	r3, [r7, #24]
    612e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	4313      	orrs	r3, r2
    6136:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6138:	683b      	ldr	r3, [r7, #0]
    613a:	2227      	movs	r2, #39	; 0x27
    613c:	5c9b      	ldrb	r3, [r3, r2]
    613e:	2201      	movs	r2, #1
    6140:	4053      	eors	r3, r2
    6142:	b2db      	uxtb	r3, r3
    6144:	2b00      	cmp	r3, #0
    6146:	d003      	beq.n	6150 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    614a:	2204      	movs	r2, #4
    614c:	4313      	orrs	r3, r2
    614e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6150:	683b      	ldr	r3, [r7, #0]
    6152:	7e5b      	ldrb	r3, [r3, #25]
    6154:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6156:	683b      	ldr	r3, [r7, #0]
    6158:	7f1b      	ldrb	r3, [r3, #28]
    615a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    615c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    615e:	683b      	ldr	r3, [r7, #0]
    6160:	7f5b      	ldrb	r3, [r3, #29]
    6162:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6164:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6166:	683b      	ldr	r3, [r7, #0]
    6168:	2124      	movs	r1, #36	; 0x24
    616a:	5c5b      	ldrb	r3, [r3, r1]
    616c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    616e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6170:	683b      	ldr	r3, [r7, #0]
    6172:	2125      	movs	r1, #37	; 0x25
    6174:	5c5b      	ldrb	r3, [r3, r1]
    6176:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6178:	4313      	orrs	r3, r2
	ctrlb =  
    617a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    617c:	683b      	ldr	r3, [r7, #0]
    617e:	7a9b      	ldrb	r3, [r3, #10]
    6180:	001a      	movs	r2, r3
    6182:	6a3b      	ldr	r3, [r7, #32]
    6184:	4313      	orrs	r3, r2
    6186:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    6188:	683b      	ldr	r3, [r7, #0]
    618a:	7adb      	ldrb	r3, [r3, #11]
    618c:	001a      	movs	r2, r3
    618e:	6a3b      	ldr	r3, [r7, #32]
    6190:	4313      	orrs	r3, r2
    6192:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6194:	683b      	ldr	r3, [r7, #0]
    6196:	891b      	ldrh	r3, [r3, #8]
    6198:	2bff      	cmp	r3, #255	; 0xff
    619a:	d00b      	beq.n	61b4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    619e:	2280      	movs	r2, #128	; 0x80
    61a0:	0452      	lsls	r2, r2, #17
    61a2:	4313      	orrs	r3, r2
    61a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    61a6:	683b      	ldr	r3, [r7, #0]
    61a8:	891b      	ldrh	r3, [r3, #8]
    61aa:	001a      	movs	r2, r3
    61ac:	6a3b      	ldr	r3, [r7, #32]
    61ae:	4313      	orrs	r3, r2
    61b0:	623b      	str	r3, [r7, #32]
    61b2:	e008      	b.n	61c6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    61b4:	683b      	ldr	r3, [r7, #0]
    61b6:	7edb      	ldrb	r3, [r3, #27]
    61b8:	2b00      	cmp	r3, #0
    61ba:	d004      	beq.n	61c6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    61bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61be:	2280      	movs	r2, #128	; 0x80
    61c0:	04d2      	lsls	r2, r2, #19
    61c2:	4313      	orrs	r3, r2
    61c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    61c6:	683b      	ldr	r3, [r7, #0]
    61c8:	222c      	movs	r2, #44	; 0x2c
    61ca:	5c9b      	ldrb	r3, [r3, r2]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d103      	bne.n	61d8 <_usart_set_config+0x294>
    61d0:	4b12      	ldr	r3, [pc, #72]	; (621c <_usart_set_config+0x2d8>)
    61d2:	4798      	blx	r3
    61d4:	1e03      	subs	r3, r0, #0
    61d6:	d003      	beq.n	61e0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    61d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61da:	2280      	movs	r2, #128	; 0x80
    61dc:	4313      	orrs	r3, r2
    61de:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	0018      	movs	r0, r3
    61e4:	4b0c      	ldr	r3, [pc, #48]	; (6218 <_usart_set_config+0x2d4>)
    61e6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    61e8:	69bb      	ldr	r3, [r7, #24]
    61ea:	6a3a      	ldr	r2, [r7, #32]
    61ec:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	0018      	movs	r0, r3
    61f2:	4b09      	ldr	r3, [pc, #36]	; (6218 <_usart_set_config+0x2d4>)
    61f4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    61f6:	69bb      	ldr	r3, [r7, #24]
    61f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    61fa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    61fc:	2300      	movs	r3, #0
}
    61fe:	0018      	movs	r0, r3
    6200:	46bd      	mov	sp, r7
    6202:	b00a      	add	sp, #40	; 0x28
    6204:	bdb0      	pop	{r4, r5, r7, pc}
    6206:	46c0      	nop			; (mov r8, r8)
    6208:	00004d49 	.word	0x00004d49
    620c:	000071fd 	.word	0x000071fd
    6210:	000048c3 	.word	0x000048c3
    6214:	00004941 	.word	0x00004941
    6218:	00005f21 	.word	0x00005f21
    621c:	00005ee1 	.word	0x00005ee1

00006220 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6220:	b590      	push	{r4, r7, lr}
    6222:	b093      	sub	sp, #76	; 0x4c
    6224:	af00      	add	r7, sp, #0
    6226:	60f8      	str	r0, [r7, #12]
    6228:	60b9      	str	r1, [r7, #8]
    622a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    622c:	233b      	movs	r3, #59	; 0x3b
    622e:	18fb      	adds	r3, r7, r3
    6230:	2200      	movs	r2, #0
    6232:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6234:	68fb      	ldr	r3, [r7, #12]
    6236:	68ba      	ldr	r2, [r7, #8]
    6238:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    623a:	68fb      	ldr	r3, [r7, #12]
    623c:	681b      	ldr	r3, [r3, #0]
    623e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6240:	68fb      	ldr	r3, [r7, #12]
    6242:	681b      	ldr	r3, [r3, #0]
    6244:	0018      	movs	r0, r3
    6246:	4b86      	ldr	r3, [pc, #536]	; (6460 <usart_init+0x240>)
    6248:	4798      	blx	r3
    624a:	0003      	movs	r3, r0
    624c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6250:	3302      	adds	r3, #2
    6252:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6256:	3314      	adds	r3, #20
    6258:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    625c:	681b      	ldr	r3, [r3, #0]
    625e:	2201      	movs	r2, #1
    6260:	4013      	ands	r3, r2
    6262:	d001      	beq.n	6268 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6264:	2305      	movs	r3, #5
    6266:	e0f6      	b.n	6456 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    6268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    626a:	681b      	ldr	r3, [r3, #0]
    626c:	2202      	movs	r2, #2
    626e:	4013      	ands	r3, r2
    6270:	d001      	beq.n	6276 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6272:	231c      	movs	r3, #28
    6274:	e0ef      	b.n	6456 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6276:	2201      	movs	r2, #1
    6278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    627a:	409a      	lsls	r2, r3
    627c:	0013      	movs	r3, r2
    627e:	0019      	movs	r1, r3
    6280:	2002      	movs	r0, #2
    6282:	4b78      	ldr	r3, [pc, #480]	; (6464 <usart_init+0x244>)
    6284:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6286:	2324      	movs	r3, #36	; 0x24
    6288:	18fb      	adds	r3, r7, r3
    628a:	0018      	movs	r0, r3
    628c:	4b76      	ldr	r3, [pc, #472]	; (6468 <usart_init+0x248>)
    628e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	222d      	movs	r2, #45	; 0x2d
    6294:	5c9a      	ldrb	r2, [r3, r2]
    6296:	2324      	movs	r3, #36	; 0x24
    6298:	18fb      	adds	r3, r7, r3
    629a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    629e:	b2db      	uxtb	r3, r3
    62a0:	2224      	movs	r2, #36	; 0x24
    62a2:	18ba      	adds	r2, r7, r2
    62a4:	0011      	movs	r1, r2
    62a6:	0018      	movs	r0, r3
    62a8:	4b70      	ldr	r3, [pc, #448]	; (646c <usart_init+0x24c>)
    62aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    62ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    62ae:	b2db      	uxtb	r3, r3
    62b0:	0018      	movs	r0, r3
    62b2:	4b6f      	ldr	r3, [pc, #444]	; (6470 <usart_init+0x250>)
    62b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    62b6:	687b      	ldr	r3, [r7, #4]
    62b8:	222d      	movs	r2, #45	; 0x2d
    62ba:	5c9b      	ldrb	r3, [r3, r2]
    62bc:	2100      	movs	r1, #0
    62be:	0018      	movs	r0, r3
    62c0:	4b6c      	ldr	r3, [pc, #432]	; (6474 <usart_init+0x254>)
    62c2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	7ada      	ldrb	r2, [r3, #11]
    62c8:	68fb      	ldr	r3, [r7, #12]
    62ca:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	2224      	movs	r2, #36	; 0x24
    62d0:	5c9a      	ldrb	r2, [r3, r2]
    62d2:	68fb      	ldr	r3, [r7, #12]
    62d4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	2225      	movs	r2, #37	; 0x25
    62da:	5c9a      	ldrb	r2, [r3, r2]
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	7eda      	ldrb	r2, [r3, #27]
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	7f1a      	ldrb	r2, [r3, #28]
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    62f0:	233b      	movs	r3, #59	; 0x3b
    62f2:	18fc      	adds	r4, r7, r3
    62f4:	687a      	ldr	r2, [r7, #4]
    62f6:	68fb      	ldr	r3, [r7, #12]
    62f8:	0011      	movs	r1, r2
    62fa:	0018      	movs	r0, r3
    62fc:	4b5e      	ldr	r3, [pc, #376]	; (6478 <usart_init+0x258>)
    62fe:	4798      	blx	r3
    6300:	0003      	movs	r3, r0
    6302:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    6304:	233b      	movs	r3, #59	; 0x3b
    6306:	18fb      	adds	r3, r7, r3
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	2b00      	cmp	r3, #0
    630c:	d003      	beq.n	6316 <usart_init+0xf6>
		return status_code;
    630e:	233b      	movs	r3, #59	; 0x3b
    6310:	18fb      	adds	r3, r7, r3
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	e09f      	b.n	6456 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6316:	2320      	movs	r3, #32
    6318:	18fb      	adds	r3, r7, r3
    631a:	0018      	movs	r0, r3
    631c:	4b57      	ldr	r3, [pc, #348]	; (647c <usart_init+0x25c>)
    631e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6320:	2320      	movs	r3, #32
    6322:	18fb      	adds	r3, r7, r3
    6324:	2200      	movs	r2, #0
    6326:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6328:	2320      	movs	r3, #32
    632a:	18fb      	adds	r3, r7, r3
    632c:	2200      	movs	r2, #0
    632e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6334:	2310      	movs	r3, #16
    6336:	18fb      	adds	r3, r7, r3
    6338:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    633a:	687b      	ldr	r3, [r7, #4]
    633c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    633e:	2310      	movs	r3, #16
    6340:	18fb      	adds	r3, r7, r3
    6342:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    6348:	2310      	movs	r3, #16
    634a:	18fb      	adds	r3, r7, r3
    634c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6352:	2310      	movs	r3, #16
    6354:	18fb      	adds	r3, r7, r3
    6356:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6358:	2347      	movs	r3, #71	; 0x47
    635a:	18fb      	adds	r3, r7, r3
    635c:	2200      	movs	r2, #0
    635e:	701a      	strb	r2, [r3, #0]
    6360:	e02c      	b.n	63bc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6362:	2347      	movs	r3, #71	; 0x47
    6364:	18fb      	adds	r3, r7, r3
    6366:	781a      	ldrb	r2, [r3, #0]
    6368:	2310      	movs	r3, #16
    636a:	18fb      	adds	r3, r7, r3
    636c:	0092      	lsls	r2, r2, #2
    636e:	58d3      	ldr	r3, [r2, r3]
    6370:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6374:	2b00      	cmp	r3, #0
    6376:	d109      	bne.n	638c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6378:	2347      	movs	r3, #71	; 0x47
    637a:	18fb      	adds	r3, r7, r3
    637c:	781a      	ldrb	r2, [r3, #0]
    637e:	68bb      	ldr	r3, [r7, #8]
    6380:	0011      	movs	r1, r2
    6382:	0018      	movs	r0, r3
    6384:	4b3e      	ldr	r3, [pc, #248]	; (6480 <usart_init+0x260>)
    6386:	4798      	blx	r3
    6388:	0003      	movs	r3, r0
    638a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    638c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    638e:	3301      	adds	r3, #1
    6390:	d00d      	beq.n	63ae <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6394:	b2da      	uxtb	r2, r3
    6396:	2320      	movs	r3, #32
    6398:	18fb      	adds	r3, r7, r3
    639a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    639e:	0c1b      	lsrs	r3, r3, #16
    63a0:	b2db      	uxtb	r3, r3
    63a2:	2220      	movs	r2, #32
    63a4:	18ba      	adds	r2, r7, r2
    63a6:	0011      	movs	r1, r2
    63a8:	0018      	movs	r0, r3
    63aa:	4b36      	ldr	r3, [pc, #216]	; (6484 <usart_init+0x264>)
    63ac:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    63ae:	2347      	movs	r3, #71	; 0x47
    63b0:	18fb      	adds	r3, r7, r3
    63b2:	781a      	ldrb	r2, [r3, #0]
    63b4:	2347      	movs	r3, #71	; 0x47
    63b6:	18fb      	adds	r3, r7, r3
    63b8:	3201      	adds	r2, #1
    63ba:	701a      	strb	r2, [r3, #0]
    63bc:	2347      	movs	r3, #71	; 0x47
    63be:	18fb      	adds	r3, r7, r3
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	2b03      	cmp	r3, #3
    63c4:	d9cd      	bls.n	6362 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    63c6:	2300      	movs	r3, #0
    63c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    63ca:	e00a      	b.n	63e2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    63cc:	68fa      	ldr	r2, [r7, #12]
    63ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63d0:	3302      	adds	r3, #2
    63d2:	009b      	lsls	r3, r3, #2
    63d4:	18d3      	adds	r3, r2, r3
    63d6:	3304      	adds	r3, #4
    63d8:	2200      	movs	r2, #0
    63da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    63dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63de:	3301      	adds	r3, #1
    63e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    63e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63e4:	2b05      	cmp	r3, #5
    63e6:	d9f1      	bls.n	63cc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	2200      	movs	r2, #0
    63ec:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	2200      	movs	r2, #0
    63f2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    63f4:	68fb      	ldr	r3, [r7, #12]
    63f6:	2200      	movs	r2, #0
    63f8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    63fa:	68fb      	ldr	r3, [r7, #12]
    63fc:	2200      	movs	r2, #0
    63fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6400:	68fb      	ldr	r3, [r7, #12]
    6402:	2230      	movs	r2, #48	; 0x30
    6404:	2100      	movs	r1, #0
    6406:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    6408:	68fb      	ldr	r3, [r7, #12]
    640a:	2231      	movs	r2, #49	; 0x31
    640c:	2100      	movs	r1, #0
    640e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    6410:	68fb      	ldr	r3, [r7, #12]
    6412:	2232      	movs	r2, #50	; 0x32
    6414:	2100      	movs	r1, #0
    6416:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	2233      	movs	r2, #51	; 0x33
    641c:	2100      	movs	r1, #0
    641e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6420:	68fb      	ldr	r3, [r7, #12]
    6422:	681b      	ldr	r3, [r3, #0]
    6424:	2227      	movs	r2, #39	; 0x27
    6426:	18bc      	adds	r4, r7, r2
    6428:	0018      	movs	r0, r3
    642a:	4b0d      	ldr	r3, [pc, #52]	; (6460 <usart_init+0x240>)
    642c:	4798      	blx	r3
    642e:	0003      	movs	r3, r0
    6430:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6432:	4a15      	ldr	r2, [pc, #84]	; (6488 <usart_init+0x268>)
    6434:	2327      	movs	r3, #39	; 0x27
    6436:	18fb      	adds	r3, r7, r3
    6438:	781b      	ldrb	r3, [r3, #0]
    643a:	0011      	movs	r1, r2
    643c:	0018      	movs	r0, r3
    643e:	4b13      	ldr	r3, [pc, #76]	; (648c <usart_init+0x26c>)
    6440:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6442:	2327      	movs	r3, #39	; 0x27
    6444:	18fb      	adds	r3, r7, r3
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	4b11      	ldr	r3, [pc, #68]	; (6490 <usart_init+0x270>)
    644a:	0092      	lsls	r2, r2, #2
    644c:	68f9      	ldr	r1, [r7, #12]
    644e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6450:	233b      	movs	r3, #59	; 0x3b
    6452:	18fb      	adds	r3, r7, r3
    6454:	781b      	ldrb	r3, [r3, #0]
}
    6456:	0018      	movs	r0, r3
    6458:	46bd      	mov	sp, r7
    645a:	b013      	add	sp, #76	; 0x4c
    645c:	bd90      	pop	{r4, r7, pc}
    645e:	46c0      	nop			; (mov r8, r8)
    6460:	00004d49 	.word	0x00004d49
    6464:	00005e5d 	.word	0x00005e5d
    6468:	00005e45 	.word	0x00005e45
    646c:	000070d9 	.word	0x000070d9
    6470:	0000711d 	.word	0x0000711d
    6474:	00004b01 	.word	0x00004b01
    6478:	00005f45 	.word	0x00005f45
    647c:	00005eb9 	.word	0x00005eb9
    6480:	00004b8d 	.word	0x00004b8d
    6484:	000073c5 	.word	0x000073c5
    6488:	00006629 	.word	0x00006629
    648c:	00004dad 	.word	0x00004dad
    6490:	20000508 	.word	0x20000508

00006494 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6494:	b580      	push	{r7, lr}
    6496:	b084      	sub	sp, #16
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	000a      	movs	r2, r1
    649e:	1cbb      	adds	r3, r7, #2
    64a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	681b      	ldr	r3, [r3, #0]
    64a6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	79db      	ldrb	r3, [r3, #7]
    64ac:	2201      	movs	r2, #1
    64ae:	4053      	eors	r3, r2
    64b0:	b2db      	uxtb	r3, r3
    64b2:	2b00      	cmp	r3, #0
    64b4:	d001      	beq.n	64ba <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    64b6:	231c      	movs	r3, #28
    64b8:	e017      	b.n	64ea <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    64be:	b29b      	uxth	r3, r3
    64c0:	2b00      	cmp	r3, #0
    64c2:	d001      	beq.n	64c8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    64c4:	2305      	movs	r3, #5
    64c6:	e010      	b.n	64ea <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    64c8:	687b      	ldr	r3, [r7, #4]
    64ca:	0018      	movs	r0, r3
    64cc:	4b09      	ldr	r3, [pc, #36]	; (64f4 <usart_write_wait+0x60>)
    64ce:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    64d0:	68fb      	ldr	r3, [r7, #12]
    64d2:	1cba      	adds	r2, r7, #2
    64d4:	8812      	ldrh	r2, [r2, #0]
    64d6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    64d8:	46c0      	nop			; (mov r8, r8)
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	7e1b      	ldrb	r3, [r3, #24]
    64de:	b2db      	uxtb	r3, r3
    64e0:	001a      	movs	r2, r3
    64e2:	2302      	movs	r3, #2
    64e4:	4013      	ands	r3, r2
    64e6:	d0f8      	beq.n	64da <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    64e8:	2300      	movs	r3, #0
}
    64ea:	0018      	movs	r0, r3
    64ec:	46bd      	mov	sp, r7
    64ee:	b004      	add	sp, #16
    64f0:	bd80      	pop	{r7, pc}
    64f2:	46c0      	nop			; (mov r8, r8)
    64f4:	00005f21 	.word	0x00005f21

000064f8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	b084      	sub	sp, #16
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
    6500:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6502:	687b      	ldr	r3, [r7, #4]
    6504:	681b      	ldr	r3, [r3, #0]
    6506:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	799b      	ldrb	r3, [r3, #6]
    650c:	2201      	movs	r2, #1
    650e:	4053      	eors	r3, r2
    6510:	b2db      	uxtb	r3, r3
    6512:	2b00      	cmp	r3, #0
    6514:	d001      	beq.n	651a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    6516:	231c      	movs	r3, #28
    6518:	e05e      	b.n	65d8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    651e:	b29b      	uxth	r3, r3
    6520:	2b00      	cmp	r3, #0
    6522:	d001      	beq.n	6528 <usart_read_wait+0x30>
		return STATUS_BUSY;
    6524:	2305      	movs	r3, #5
    6526:	e057      	b.n	65d8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	7e1b      	ldrb	r3, [r3, #24]
    652c:	b2db      	uxtb	r3, r3
    652e:	001a      	movs	r2, r3
    6530:	2304      	movs	r3, #4
    6532:	4013      	ands	r3, r2
    6534:	d101      	bne.n	653a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    6536:	2305      	movs	r3, #5
    6538:	e04e      	b.n	65d8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b28      	ldr	r3, [pc, #160]	; (65e0 <usart_read_wait+0xe8>)
    6540:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6542:	68fb      	ldr	r3, [r7, #12]
    6544:	8b5b      	ldrh	r3, [r3, #26]
    6546:	b29b      	uxth	r3, r3
    6548:	b2da      	uxtb	r2, r3
    654a:	230b      	movs	r3, #11
    654c:	18fb      	adds	r3, r7, r3
    654e:	213f      	movs	r1, #63	; 0x3f
    6550:	400a      	ands	r2, r1
    6552:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    6554:	230b      	movs	r3, #11
    6556:	18fb      	adds	r3, r7, r3
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	2b00      	cmp	r3, #0
    655c:	d036      	beq.n	65cc <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    655e:	230b      	movs	r3, #11
    6560:	18fb      	adds	r3, r7, r3
    6562:	781b      	ldrb	r3, [r3, #0]
    6564:	2202      	movs	r2, #2
    6566:	4013      	ands	r3, r2
    6568:	d004      	beq.n	6574 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    656a:	68fb      	ldr	r3, [r7, #12]
    656c:	2202      	movs	r2, #2
    656e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    6570:	231a      	movs	r3, #26
    6572:	e031      	b.n	65d8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6574:	230b      	movs	r3, #11
    6576:	18fb      	adds	r3, r7, r3
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	2204      	movs	r2, #4
    657c:	4013      	ands	r3, r2
    657e:	d004      	beq.n	658a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6580:	68fb      	ldr	r3, [r7, #12]
    6582:	2204      	movs	r2, #4
    6584:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    6586:	231e      	movs	r3, #30
    6588:	e026      	b.n	65d8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    658a:	230b      	movs	r3, #11
    658c:	18fb      	adds	r3, r7, r3
    658e:	781b      	ldrb	r3, [r3, #0]
    6590:	2201      	movs	r2, #1
    6592:	4013      	ands	r3, r2
    6594:	d004      	beq.n	65a0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6596:	68fb      	ldr	r3, [r7, #12]
    6598:	2201      	movs	r2, #1
    659a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    659c:	2313      	movs	r3, #19
    659e:	e01b      	b.n	65d8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    65a0:	230b      	movs	r3, #11
    65a2:	18fb      	adds	r3, r7, r3
    65a4:	781b      	ldrb	r3, [r3, #0]
    65a6:	2210      	movs	r2, #16
    65a8:	4013      	ands	r3, r2
    65aa:	d004      	beq.n	65b6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    65ac:	68fb      	ldr	r3, [r7, #12]
    65ae:	2210      	movs	r2, #16
    65b0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    65b2:	2342      	movs	r3, #66	; 0x42
    65b4:	e010      	b.n	65d8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    65b6:	230b      	movs	r3, #11
    65b8:	18fb      	adds	r3, r7, r3
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	2220      	movs	r2, #32
    65be:	4013      	ands	r3, r2
    65c0:	d004      	beq.n	65cc <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    65c2:	68fb      	ldr	r3, [r7, #12]
    65c4:	2220      	movs	r2, #32
    65c6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    65c8:	2341      	movs	r3, #65	; 0x41
    65ca:	e005      	b.n	65d8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    65cc:	68fb      	ldr	r3, [r7, #12]
    65ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    65d0:	b29a      	uxth	r2, r3
    65d2:	683b      	ldr	r3, [r7, #0]
    65d4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    65d6:	2300      	movs	r3, #0
}
    65d8:	0018      	movs	r0, r3
    65da:	46bd      	mov	sp, r7
    65dc:	b004      	add	sp, #16
    65de:	bd80      	pop	{r7, pc}
    65e0:	00005f21 	.word	0x00005f21

000065e4 <usart_is_syncing>:
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b084      	sub	sp, #16
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    65f2:	68fb      	ldr	r3, [r7, #12]
    65f4:	69db      	ldr	r3, [r3, #28]
    65f6:	1e5a      	subs	r2, r3, #1
    65f8:	4193      	sbcs	r3, r2
    65fa:	b2db      	uxtb	r3, r3
}
    65fc:	0018      	movs	r0, r3
    65fe:	46bd      	mov	sp, r7
    6600:	b004      	add	sp, #16
    6602:	bd80      	pop	{r7, pc}

00006604 <_usart_wait_for_sync>:
{
    6604:	b580      	push	{r7, lr}
    6606:	b082      	sub	sp, #8
    6608:	af00      	add	r7, sp, #0
    660a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    660c:	46c0      	nop			; (mov r8, r8)
    660e:	687b      	ldr	r3, [r7, #4]
    6610:	0018      	movs	r0, r3
    6612:	4b04      	ldr	r3, [pc, #16]	; (6624 <_usart_wait_for_sync+0x20>)
    6614:	4798      	blx	r3
    6616:	1e03      	subs	r3, r0, #0
    6618:	d1f9      	bne.n	660e <_usart_wait_for_sync+0xa>
}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	46bd      	mov	sp, r7
    661e:	b002      	add	sp, #8
    6620:	bd80      	pop	{r7, pc}
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	000065e5 	.word	0x000065e5

00006628 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6628:	b580      	push	{r7, lr}
    662a:	b088      	sub	sp, #32
    662c:	af00      	add	r7, sp, #0
    662e:	0002      	movs	r2, r0
    6630:	1dfb      	adds	r3, r7, #7
    6632:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6634:	1dfb      	adds	r3, r7, #7
    6636:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    6638:	4ba3      	ldr	r3, [pc, #652]	; (68c8 <_usart_interrupt_handler+0x2a0>)
    663a:	0092      	lsls	r2, r2, #2
    663c:	58d3      	ldr	r3, [r2, r3]
    663e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6640:	69bb      	ldr	r3, [r7, #24]
    6642:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6644:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    6646:	69bb      	ldr	r3, [r7, #24]
    6648:	0018      	movs	r0, r3
    664a:	4ba0      	ldr	r3, [pc, #640]	; (68cc <_usart_interrupt_handler+0x2a4>)
    664c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    664e:	697b      	ldr	r3, [r7, #20]
    6650:	7e1b      	ldrb	r3, [r3, #24]
    6652:	b2da      	uxtb	r2, r3
    6654:	2312      	movs	r3, #18
    6656:	18fb      	adds	r3, r7, r3
    6658:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    665a:	697b      	ldr	r3, [r7, #20]
    665c:	7d9b      	ldrb	r3, [r3, #22]
    665e:	b2db      	uxtb	r3, r3
    6660:	b29a      	uxth	r2, r3
    6662:	2312      	movs	r3, #18
    6664:	18fb      	adds	r3, r7, r3
    6666:	2112      	movs	r1, #18
    6668:	1879      	adds	r1, r7, r1
    666a:	8809      	ldrh	r1, [r1, #0]
    666c:	400a      	ands	r2, r1
    666e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    6670:	69bb      	ldr	r3, [r7, #24]
    6672:	2230      	movs	r2, #48	; 0x30
    6674:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    6676:	69ba      	ldr	r2, [r7, #24]
    6678:	2131      	movs	r1, #49	; 0x31
    667a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    667c:	4013      	ands	r3, r2
    667e:	b2da      	uxtb	r2, r3
    6680:	2310      	movs	r3, #16
    6682:	18fb      	adds	r3, r7, r3
    6684:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6686:	2312      	movs	r3, #18
    6688:	18fb      	adds	r3, r7, r3
    668a:	881b      	ldrh	r3, [r3, #0]
    668c:	2201      	movs	r2, #1
    668e:	4013      	ands	r3, r2
    6690:	d044      	beq.n	671c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    6692:	69bb      	ldr	r3, [r7, #24]
    6694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6696:	b29b      	uxth	r3, r3
    6698:	2b00      	cmp	r3, #0
    669a:	d03c      	beq.n	6716 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    669c:	69bb      	ldr	r3, [r7, #24]
    669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	b2da      	uxtb	r2, r3
    66a4:	231c      	movs	r3, #28
    66a6:	18fb      	adds	r3, r7, r3
    66a8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    66aa:	69bb      	ldr	r3, [r7, #24]
    66ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66ae:	1c5a      	adds	r2, r3, #1
    66b0:	69bb      	ldr	r3, [r7, #24]
    66b2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    66b4:	69bb      	ldr	r3, [r7, #24]
    66b6:	795b      	ldrb	r3, [r3, #5]
    66b8:	2b01      	cmp	r3, #1
    66ba:	d113      	bne.n	66e4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    66bc:	69bb      	ldr	r3, [r7, #24]
    66be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	b2db      	uxtb	r3, r3
    66c4:	021b      	lsls	r3, r3, #8
    66c6:	b21a      	sxth	r2, r3
    66c8:	231c      	movs	r3, #28
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	2100      	movs	r1, #0
    66ce:	5e5b      	ldrsh	r3, [r3, r1]
    66d0:	4313      	orrs	r3, r2
    66d2:	b21a      	sxth	r2, r3
    66d4:	231c      	movs	r3, #28
    66d6:	18fb      	adds	r3, r7, r3
    66d8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    66da:	69bb      	ldr	r3, [r7, #24]
    66dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66de:	1c5a      	adds	r2, r3, #1
    66e0:	69bb      	ldr	r3, [r7, #24]
    66e2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    66e4:	231c      	movs	r3, #28
    66e6:	18fb      	adds	r3, r7, r3
    66e8:	881b      	ldrh	r3, [r3, #0]
    66ea:	05db      	lsls	r3, r3, #23
    66ec:	0ddb      	lsrs	r3, r3, #23
    66ee:	b29a      	uxth	r2, r3
    66f0:	697b      	ldr	r3, [r7, #20]
    66f2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    66f4:	69bb      	ldr	r3, [r7, #24]
    66f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    66f8:	b29b      	uxth	r3, r3
    66fa:	3b01      	subs	r3, #1
    66fc:	b29b      	uxth	r3, r3
    66fe:	69ba      	ldr	r2, [r7, #24]
    6700:	1c19      	adds	r1, r3, #0
    6702:	85d1      	strh	r1, [r2, #46]	; 0x2e
    6704:	2b00      	cmp	r3, #0
    6706:	d109      	bne.n	671c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6708:	697b      	ldr	r3, [r7, #20]
    670a:	2201      	movs	r2, #1
    670c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    670e:	697b      	ldr	r3, [r7, #20]
    6710:	2202      	movs	r2, #2
    6712:	759a      	strb	r2, [r3, #22]
    6714:	e002      	b.n	671c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6716:	697b      	ldr	r3, [r7, #20]
    6718:	2201      	movs	r2, #1
    671a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    671c:	2312      	movs	r3, #18
    671e:	18fb      	adds	r3, r7, r3
    6720:	881b      	ldrh	r3, [r3, #0]
    6722:	2202      	movs	r2, #2
    6724:	4013      	ands	r3, r2
    6726:	d011      	beq.n	674c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6728:	697b      	ldr	r3, [r7, #20]
    672a:	2202      	movs	r2, #2
    672c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    672e:	69bb      	ldr	r3, [r7, #24]
    6730:	2233      	movs	r2, #51	; 0x33
    6732:	2100      	movs	r1, #0
    6734:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6736:	2310      	movs	r3, #16
    6738:	18fb      	adds	r3, r7, r3
    673a:	881b      	ldrh	r3, [r3, #0]
    673c:	2201      	movs	r2, #1
    673e:	4013      	ands	r3, r2
    6740:	d004      	beq.n	674c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6742:	69bb      	ldr	r3, [r7, #24]
    6744:	68db      	ldr	r3, [r3, #12]
    6746:	69ba      	ldr	r2, [r7, #24]
    6748:	0010      	movs	r0, r2
    674a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    674c:	2312      	movs	r3, #18
    674e:	18fb      	adds	r3, r7, r3
    6750:	881b      	ldrh	r3, [r3, #0]
    6752:	2204      	movs	r2, #4
    6754:	4013      	ands	r3, r2
    6756:	d100      	bne.n	675a <_usart_interrupt_handler+0x132>
    6758:	e0bd      	b.n	68d6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    675a:	69bb      	ldr	r3, [r7, #24]
    675c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    675e:	b29b      	uxth	r3, r3
    6760:	2b00      	cmp	r3, #0
    6762:	d100      	bne.n	6766 <_usart_interrupt_handler+0x13e>
    6764:	e0b4      	b.n	68d0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6766:	697b      	ldr	r3, [r7, #20]
    6768:	8b5b      	ldrh	r3, [r3, #26]
    676a:	b29b      	uxth	r3, r3
    676c:	b2da      	uxtb	r2, r3
    676e:	231f      	movs	r3, #31
    6770:	18fb      	adds	r3, r7, r3
    6772:	213f      	movs	r1, #63	; 0x3f
    6774:	400a      	ands	r2, r1
    6776:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6778:	231f      	movs	r3, #31
    677a:	18fb      	adds	r3, r7, r3
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	2208      	movs	r2, #8
    6780:	4013      	ands	r3, r2
    6782:	d007      	beq.n	6794 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6784:	231f      	movs	r3, #31
    6786:	18fb      	adds	r3, r7, r3
    6788:	221f      	movs	r2, #31
    678a:	18ba      	adds	r2, r7, r2
    678c:	7812      	ldrb	r2, [r2, #0]
    678e:	2108      	movs	r1, #8
    6790:	438a      	bics	r2, r1
    6792:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6794:	231f      	movs	r3, #31
    6796:	18fb      	adds	r3, r7, r3
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	2b00      	cmp	r3, #0
    679c:	d050      	beq.n	6840 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    679e:	231f      	movs	r3, #31
    67a0:	18fb      	adds	r3, r7, r3
    67a2:	781b      	ldrb	r3, [r3, #0]
    67a4:	2202      	movs	r2, #2
    67a6:	4013      	ands	r3, r2
    67a8:	d007      	beq.n	67ba <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    67aa:	69bb      	ldr	r3, [r7, #24]
    67ac:	2232      	movs	r2, #50	; 0x32
    67ae:	211a      	movs	r1, #26
    67b0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67b2:	697b      	ldr	r3, [r7, #20]
    67b4:	2202      	movs	r2, #2
    67b6:	835a      	strh	r2, [r3, #26]
    67b8:	e036      	b.n	6828 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67ba:	231f      	movs	r3, #31
    67bc:	18fb      	adds	r3, r7, r3
    67be:	781b      	ldrb	r3, [r3, #0]
    67c0:	2204      	movs	r2, #4
    67c2:	4013      	ands	r3, r2
    67c4:	d007      	beq.n	67d6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    67c6:	69bb      	ldr	r3, [r7, #24]
    67c8:	2232      	movs	r2, #50	; 0x32
    67ca:	211e      	movs	r1, #30
    67cc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    67ce:	697b      	ldr	r3, [r7, #20]
    67d0:	2204      	movs	r2, #4
    67d2:	835a      	strh	r2, [r3, #26]
    67d4:	e028      	b.n	6828 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    67d6:	231f      	movs	r3, #31
    67d8:	18fb      	adds	r3, r7, r3
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	2201      	movs	r2, #1
    67de:	4013      	ands	r3, r2
    67e0:	d007      	beq.n	67f2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    67e2:	69bb      	ldr	r3, [r7, #24]
    67e4:	2232      	movs	r2, #50	; 0x32
    67e6:	2113      	movs	r1, #19
    67e8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    67ea:	697b      	ldr	r3, [r7, #20]
    67ec:	2201      	movs	r2, #1
    67ee:	835a      	strh	r2, [r3, #26]
    67f0:	e01a      	b.n	6828 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    67f2:	231f      	movs	r3, #31
    67f4:	18fb      	adds	r3, r7, r3
    67f6:	781b      	ldrb	r3, [r3, #0]
    67f8:	2210      	movs	r2, #16
    67fa:	4013      	ands	r3, r2
    67fc:	d007      	beq.n	680e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    67fe:	69bb      	ldr	r3, [r7, #24]
    6800:	2232      	movs	r2, #50	; 0x32
    6802:	2142      	movs	r1, #66	; 0x42
    6804:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6806:	697b      	ldr	r3, [r7, #20]
    6808:	2210      	movs	r2, #16
    680a:	835a      	strh	r2, [r3, #26]
    680c:	e00c      	b.n	6828 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    680e:	231f      	movs	r3, #31
    6810:	18fb      	adds	r3, r7, r3
    6812:	781b      	ldrb	r3, [r3, #0]
    6814:	2220      	movs	r2, #32
    6816:	4013      	ands	r3, r2
    6818:	d006      	beq.n	6828 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    681a:	69bb      	ldr	r3, [r7, #24]
    681c:	2232      	movs	r2, #50	; 0x32
    681e:	2141      	movs	r1, #65	; 0x41
    6820:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6822:	697b      	ldr	r3, [r7, #20]
    6824:	2220      	movs	r2, #32
    6826:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6828:	2310      	movs	r3, #16
    682a:	18fb      	adds	r3, r7, r3
    682c:	881b      	ldrh	r3, [r3, #0]
    682e:	2204      	movs	r2, #4
    6830:	4013      	ands	r3, r2
				if (callback_status
    6832:	d050      	beq.n	68d6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6834:	69bb      	ldr	r3, [r7, #24]
    6836:	695b      	ldr	r3, [r3, #20]
    6838:	69ba      	ldr	r2, [r7, #24]
    683a:	0010      	movs	r0, r2
    683c:	4798      	blx	r3
    683e:	e04a      	b.n	68d6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6840:	697b      	ldr	r3, [r7, #20]
    6842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6844:	b29a      	uxth	r2, r3
    6846:	230e      	movs	r3, #14
    6848:	18fb      	adds	r3, r7, r3
    684a:	05d2      	lsls	r2, r2, #23
    684c:	0dd2      	lsrs	r2, r2, #23
    684e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6850:	69bb      	ldr	r3, [r7, #24]
    6852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6854:	220e      	movs	r2, #14
    6856:	18ba      	adds	r2, r7, r2
    6858:	8812      	ldrh	r2, [r2, #0]
    685a:	b2d2      	uxtb	r2, r2
    685c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    685e:	69bb      	ldr	r3, [r7, #24]
    6860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6862:	1c5a      	adds	r2, r3, #1
    6864:	69bb      	ldr	r3, [r7, #24]
    6866:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6868:	69bb      	ldr	r3, [r7, #24]
    686a:	795b      	ldrb	r3, [r3, #5]
    686c:	2b01      	cmp	r3, #1
    686e:	d10d      	bne.n	688c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6870:	69bb      	ldr	r3, [r7, #24]
    6872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6874:	220e      	movs	r2, #14
    6876:	18ba      	adds	r2, r7, r2
    6878:	8812      	ldrh	r2, [r2, #0]
    687a:	0a12      	lsrs	r2, r2, #8
    687c:	b292      	uxth	r2, r2
    687e:	b2d2      	uxtb	r2, r2
    6880:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    6882:	69bb      	ldr	r3, [r7, #24]
    6884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6886:	1c5a      	adds	r2, r3, #1
    6888:	69bb      	ldr	r3, [r7, #24]
    688a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    688c:	69bb      	ldr	r3, [r7, #24]
    688e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6890:	b29b      	uxth	r3, r3
    6892:	3b01      	subs	r3, #1
    6894:	b29b      	uxth	r3, r3
    6896:	69ba      	ldr	r2, [r7, #24]
    6898:	1c19      	adds	r1, r3, #0
    689a:	8591      	strh	r1, [r2, #44]	; 0x2c
    689c:	2b00      	cmp	r3, #0
    689e:	d11a      	bne.n	68d6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68a0:	697b      	ldr	r3, [r7, #20]
    68a2:	2204      	movs	r2, #4
    68a4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    68a6:	69bb      	ldr	r3, [r7, #24]
    68a8:	2232      	movs	r2, #50	; 0x32
    68aa:	2100      	movs	r1, #0
    68ac:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    68ae:	2310      	movs	r3, #16
    68b0:	18fb      	adds	r3, r7, r3
    68b2:	881b      	ldrh	r3, [r3, #0]
    68b4:	2202      	movs	r2, #2
    68b6:	4013      	ands	r3, r2
					if (callback_status
    68b8:	d00d      	beq.n	68d6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    68ba:	69bb      	ldr	r3, [r7, #24]
    68bc:	691b      	ldr	r3, [r3, #16]
    68be:	69ba      	ldr	r2, [r7, #24]
    68c0:	0010      	movs	r0, r2
    68c2:	4798      	blx	r3
    68c4:	e007      	b.n	68d6 <_usart_interrupt_handler+0x2ae>
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	20000508 	.word	0x20000508
    68cc:	00006605 	.word	0x00006605
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68d0:	697b      	ldr	r3, [r7, #20]
    68d2:	2204      	movs	r2, #4
    68d4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    68d6:	2312      	movs	r3, #18
    68d8:	18fb      	adds	r3, r7, r3
    68da:	881b      	ldrh	r3, [r3, #0]
    68dc:	2210      	movs	r2, #16
    68de:	4013      	ands	r3, r2
    68e0:	d010      	beq.n	6904 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    68e2:	697b      	ldr	r3, [r7, #20]
    68e4:	2210      	movs	r2, #16
    68e6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    68e8:	697b      	ldr	r3, [r7, #20]
    68ea:	2210      	movs	r2, #16
    68ec:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    68ee:	2310      	movs	r3, #16
    68f0:	18fb      	adds	r3, r7, r3
    68f2:	881b      	ldrh	r3, [r3, #0]
    68f4:	2210      	movs	r2, #16
    68f6:	4013      	ands	r3, r2
    68f8:	d004      	beq.n	6904 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    68fa:	69bb      	ldr	r3, [r7, #24]
    68fc:	69db      	ldr	r3, [r3, #28]
    68fe:	69ba      	ldr	r2, [r7, #24]
    6900:	0010      	movs	r0, r2
    6902:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6904:	2312      	movs	r3, #18
    6906:	18fb      	adds	r3, r7, r3
    6908:	881b      	ldrh	r3, [r3, #0]
    690a:	2220      	movs	r2, #32
    690c:	4013      	ands	r3, r2
    690e:	d010      	beq.n	6932 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6910:	697b      	ldr	r3, [r7, #20]
    6912:	2220      	movs	r2, #32
    6914:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6916:	697b      	ldr	r3, [r7, #20]
    6918:	2220      	movs	r2, #32
    691a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    691c:	2310      	movs	r3, #16
    691e:	18fb      	adds	r3, r7, r3
    6920:	881b      	ldrh	r3, [r3, #0]
    6922:	2208      	movs	r2, #8
    6924:	4013      	ands	r3, r2
    6926:	d004      	beq.n	6932 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6928:	69bb      	ldr	r3, [r7, #24]
    692a:	699b      	ldr	r3, [r3, #24]
    692c:	69ba      	ldr	r2, [r7, #24]
    692e:	0010      	movs	r0, r2
    6930:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6932:	2312      	movs	r3, #18
    6934:	18fb      	adds	r3, r7, r3
    6936:	881b      	ldrh	r3, [r3, #0]
    6938:	2208      	movs	r2, #8
    693a:	4013      	ands	r3, r2
    693c:	d010      	beq.n	6960 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    693e:	697b      	ldr	r3, [r7, #20]
    6940:	2208      	movs	r2, #8
    6942:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	2208      	movs	r2, #8
    6948:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    694a:	2310      	movs	r3, #16
    694c:	18fb      	adds	r3, r7, r3
    694e:	881b      	ldrh	r3, [r3, #0]
    6950:	2220      	movs	r2, #32
    6952:	4013      	ands	r3, r2
    6954:	d004      	beq.n	6960 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6956:	69bb      	ldr	r3, [r7, #24]
    6958:	6a1b      	ldr	r3, [r3, #32]
    695a:	69ba      	ldr	r2, [r7, #24]
    695c:	0010      	movs	r0, r2
    695e:	4798      	blx	r3
		}
	}
#endif
}
    6960:	46c0      	nop			; (mov r8, r8)
    6962:	46bd      	mov	sp, r7
    6964:	b008      	add	sp, #32
    6966:	bd80      	pop	{r7, pc}

00006968 <system_gclk_gen_get_config_defaults>:
{
    6968:	b580      	push	{r7, lr}
    696a:	b082      	sub	sp, #8
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	2201      	movs	r2, #1
    6974:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6976:	687b      	ldr	r3, [r7, #4]
    6978:	2200      	movs	r2, #0
    697a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    697c:	687b      	ldr	r3, [r7, #4]
    697e:	2206      	movs	r2, #6
    6980:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	2200      	movs	r2, #0
    6986:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6988:	687b      	ldr	r3, [r7, #4]
    698a:	2200      	movs	r2, #0
    698c:	725a      	strb	r2, [r3, #9]
}
    698e:	46c0      	nop			; (mov r8, r8)
    6990:	46bd      	mov	sp, r7
    6992:	b002      	add	sp, #8
    6994:	bd80      	pop	{r7, pc}

00006996 <system_clock_source_osc8m_get_config_defaults>:
{
    6996:	b580      	push	{r7, lr}
    6998:	b082      	sub	sp, #8
    699a:	af00      	add	r7, sp, #0
    699c:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	2203      	movs	r2, #3
    69a2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	2200      	movs	r2, #0
    69a8:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	2201      	movs	r2, #1
    69ae:	709a      	strb	r2, [r3, #2]
}
    69b0:	46c0      	nop			; (mov r8, r8)
    69b2:	46bd      	mov	sp, r7
    69b4:	b002      	add	sp, #8
    69b6:	bd80      	pop	{r7, pc}

000069b8 <system_cpu_clock_set_divider>:
{
    69b8:	b580      	push	{r7, lr}
    69ba:	b082      	sub	sp, #8
    69bc:	af00      	add	r7, sp, #0
    69be:	0002      	movs	r2, r0
    69c0:	1dfb      	adds	r3, r7, #7
    69c2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    69c4:	4a03      	ldr	r2, [pc, #12]	; (69d4 <system_cpu_clock_set_divider+0x1c>)
    69c6:	1dfb      	adds	r3, r7, #7
    69c8:	781b      	ldrb	r3, [r3, #0]
    69ca:	7213      	strb	r3, [r2, #8]
}
    69cc:	46c0      	nop			; (mov r8, r8)
    69ce:	46bd      	mov	sp, r7
    69d0:	b002      	add	sp, #8
    69d2:	bd80      	pop	{r7, pc}
    69d4:	40000400 	.word	0x40000400

000069d8 <system_apb_clock_set_divider>:
{
    69d8:	b580      	push	{r7, lr}
    69da:	b082      	sub	sp, #8
    69dc:	af00      	add	r7, sp, #0
    69de:	0002      	movs	r2, r0
    69e0:	1dfb      	adds	r3, r7, #7
    69e2:	701a      	strb	r2, [r3, #0]
    69e4:	1dbb      	adds	r3, r7, #6
    69e6:	1c0a      	adds	r2, r1, #0
    69e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    69ea:	1dfb      	adds	r3, r7, #7
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	2b01      	cmp	r3, #1
    69f0:	d008      	beq.n	6a04 <system_apb_clock_set_divider+0x2c>
    69f2:	2b02      	cmp	r3, #2
    69f4:	d00b      	beq.n	6a0e <system_apb_clock_set_divider+0x36>
    69f6:	2b00      	cmp	r3, #0
    69f8:	d10e      	bne.n	6a18 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    69fa:	4a0b      	ldr	r2, [pc, #44]	; (6a28 <system_apb_clock_set_divider+0x50>)
    69fc:	1dbb      	adds	r3, r7, #6
    69fe:	781b      	ldrb	r3, [r3, #0]
    6a00:	7253      	strb	r3, [r2, #9]
			break;
    6a02:	e00b      	b.n	6a1c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    6a04:	4a08      	ldr	r2, [pc, #32]	; (6a28 <system_apb_clock_set_divider+0x50>)
    6a06:	1dbb      	adds	r3, r7, #6
    6a08:	781b      	ldrb	r3, [r3, #0]
    6a0a:	7293      	strb	r3, [r2, #10]
			break;
    6a0c:	e006      	b.n	6a1c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    6a0e:	4a06      	ldr	r2, [pc, #24]	; (6a28 <system_apb_clock_set_divider+0x50>)
    6a10:	1dbb      	adds	r3, r7, #6
    6a12:	781b      	ldrb	r3, [r3, #0]
    6a14:	72d3      	strb	r3, [r2, #11]
			break;
    6a16:	e001      	b.n	6a1c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    6a18:	2317      	movs	r3, #23
    6a1a:	e000      	b.n	6a1e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    6a1c:	2300      	movs	r3, #0
}
    6a1e:	0018      	movs	r0, r3
    6a20:	46bd      	mov	sp, r7
    6a22:	b002      	add	sp, #8
    6a24:	bd80      	pop	{r7, pc}
    6a26:	46c0      	nop			; (mov r8, r8)
    6a28:	40000400 	.word	0x40000400

00006a2c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	b082      	sub	sp, #8
    6a30:	af00      	add	r7, sp, #0
    6a32:	0002      	movs	r2, r0
    6a34:	1dfb      	adds	r3, r7, #7
    6a36:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6a38:	4a08      	ldr	r2, [pc, #32]	; (6a5c <system_flash_set_waitstates+0x30>)
    6a3a:	1dfb      	adds	r3, r7, #7
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	210f      	movs	r1, #15
    6a40:	400b      	ands	r3, r1
    6a42:	b2d9      	uxtb	r1, r3
    6a44:	6853      	ldr	r3, [r2, #4]
    6a46:	200f      	movs	r0, #15
    6a48:	4001      	ands	r1, r0
    6a4a:	0049      	lsls	r1, r1, #1
    6a4c:	201e      	movs	r0, #30
    6a4e:	4383      	bics	r3, r0
    6a50:	430b      	orrs	r3, r1
    6a52:	6053      	str	r3, [r2, #4]
}
    6a54:	46c0      	nop			; (mov r8, r8)
    6a56:	46bd      	mov	sp, r7
    6a58:	b002      	add	sp, #8
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	41004000 	.word	0x41004000

00006a60 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6a64:	46c0      	nop			; (mov r8, r8)
    6a66:	4b04      	ldr	r3, [pc, #16]	; (6a78 <_system_dfll_wait_for_sync+0x18>)
    6a68:	68db      	ldr	r3, [r3, #12]
    6a6a:	2210      	movs	r2, #16
    6a6c:	4013      	ands	r3, r2
    6a6e:	d0fa      	beq.n	6a66 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6a70:	46c0      	nop			; (mov r8, r8)
    6a72:	46bd      	mov	sp, r7
    6a74:	bd80      	pop	{r7, pc}
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	40000800 	.word	0x40000800

00006a7c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6a80:	4b0c      	ldr	r3, [pc, #48]	; (6ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6a82:	2202      	movs	r2, #2
    6a84:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6a86:	4b0c      	ldr	r3, [pc, #48]	; (6ab8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6a88:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6a8a:	4a0a      	ldr	r2, [pc, #40]	; (6ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6a8c:	4b0b      	ldr	r3, [pc, #44]	; (6abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6a8e:	689b      	ldr	r3, [r3, #8]
    6a90:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6a92:	4a08      	ldr	r2, [pc, #32]	; (6ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6a94:	4b09      	ldr	r3, [pc, #36]	; (6abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6a96:	685b      	ldr	r3, [r3, #4]
    6a98:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    6a9a:	4b06      	ldr	r3, [pc, #24]	; (6ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6a9c:	2200      	movs	r2, #0
    6a9e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6aa0:	4b05      	ldr	r3, [pc, #20]	; (6ab8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6aa2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6aa4:	4a03      	ldr	r2, [pc, #12]	; (6ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6aa8:	681b      	ldr	r3, [r3, #0]
    6aaa:	b29b      	uxth	r3, r3
    6aac:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	40000800 	.word	0x40000800
    6ab8:	00006a61 	.word	0x00006a61
    6abc:	200000b0 	.word	0x200000b0

00006ac0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b082      	sub	sp, #8
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	0002      	movs	r2, r0
    6ac8:	1dfb      	adds	r3, r7, #7
    6aca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6acc:	1dfb      	adds	r3, r7, #7
    6ace:	781b      	ldrb	r3, [r3, #0]
    6ad0:	2b08      	cmp	r3, #8
    6ad2:	d840      	bhi.n	6b56 <system_clock_source_get_hz+0x96>
    6ad4:	009a      	lsls	r2, r3, #2
    6ad6:	4b22      	ldr	r3, [pc, #136]	; (6b60 <system_clock_source_get_hz+0xa0>)
    6ad8:	18d3      	adds	r3, r2, r3
    6ada:	681b      	ldr	r3, [r3, #0]
    6adc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6ade:	4b21      	ldr	r3, [pc, #132]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6ae0:	691b      	ldr	r3, [r3, #16]
    6ae2:	e039      	b.n	6b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6ae4:	4b20      	ldr	r3, [pc, #128]	; (6b68 <system_clock_source_get_hz+0xa8>)
    6ae6:	6a1b      	ldr	r3, [r3, #32]
    6ae8:	059b      	lsls	r3, r3, #22
    6aea:	0f9b      	lsrs	r3, r3, #30
    6aec:	b2db      	uxtb	r3, r3
    6aee:	001a      	movs	r2, r3
    6af0:	4b1e      	ldr	r3, [pc, #120]	; (6b6c <system_clock_source_get_hz+0xac>)
    6af2:	40d3      	lsrs	r3, r2
    6af4:	e030      	b.n	6b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6af6:	2380      	movs	r3, #128	; 0x80
    6af8:	021b      	lsls	r3, r3, #8
    6afa:	e02d      	b.n	6b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6afc:	2380      	movs	r3, #128	; 0x80
    6afe:	021b      	lsls	r3, r3, #8
    6b00:	e02a      	b.n	6b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6b02:	4b18      	ldr	r3, [pc, #96]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6b04:	695b      	ldr	r3, [r3, #20]
    6b06:	e027      	b.n	6b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6b08:	4b16      	ldr	r3, [pc, #88]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6b0a:	681b      	ldr	r3, [r3, #0]
    6b0c:	2202      	movs	r2, #2
    6b0e:	4013      	ands	r3, r2
    6b10:	d101      	bne.n	6b16 <system_clock_source_get_hz+0x56>
			return 0;
    6b12:	2300      	movs	r3, #0
    6b14:	e020      	b.n	6b58 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6b16:	4b16      	ldr	r3, [pc, #88]	; (6b70 <system_clock_source_get_hz+0xb0>)
    6b18:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    6b1a:	4b12      	ldr	r3, [pc, #72]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	2204      	movs	r2, #4
    6b20:	4013      	ands	r3, r2
    6b22:	d009      	beq.n	6b38 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6b24:	2000      	movs	r0, #0
    6b26:	4b13      	ldr	r3, [pc, #76]	; (6b74 <system_clock_source_get_hz+0xb4>)
    6b28:	4798      	blx	r3
    6b2a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    6b2c:	4b0d      	ldr	r3, [pc, #52]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6b2e:	689b      	ldr	r3, [r3, #8]
    6b30:	041b      	lsls	r3, r3, #16
    6b32:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6b34:	4353      	muls	r3, r2
    6b36:	e00f      	b.n	6b58 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    6b38:	4b0f      	ldr	r3, [pc, #60]	; (6b78 <system_clock_source_get_hz+0xb8>)
    6b3a:	e00d      	b.n	6b58 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6b3c:	4a0a      	ldr	r2, [pc, #40]	; (6b68 <system_clock_source_get_hz+0xa8>)
    6b3e:	2350      	movs	r3, #80	; 0x50
    6b40:	5cd3      	ldrb	r3, [r2, r3]
    6b42:	b2db      	uxtb	r3, r3
    6b44:	001a      	movs	r2, r3
    6b46:	2304      	movs	r3, #4
    6b48:	4013      	ands	r3, r2
    6b4a:	d101      	bne.n	6b50 <system_clock_source_get_hz+0x90>
			return 0;
    6b4c:	2300      	movs	r3, #0
    6b4e:	e003      	b.n	6b58 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    6b50:	4b04      	ldr	r3, [pc, #16]	; (6b64 <system_clock_source_get_hz+0xa4>)
    6b52:	68db      	ldr	r3, [r3, #12]
    6b54:	e000      	b.n	6b58 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    6b56:	2300      	movs	r3, #0
	}
}
    6b58:	0018      	movs	r0, r3
    6b5a:	46bd      	mov	sp, r7
    6b5c:	b002      	add	sp, #8
    6b5e:	bd80      	pop	{r7, pc}
    6b60:	00009578 	.word	0x00009578
    6b64:	200000b0 	.word	0x200000b0
    6b68:	40000800 	.word	0x40000800
    6b6c:	007a1200 	.word	0x007a1200
    6b70:	00006a61 	.word	0x00006a61
    6b74:	000071fd 	.word	0x000071fd
    6b78:	02dc6c00 	.word	0x02dc6c00

00006b7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6b7c:	b580      	push	{r7, lr}
    6b7e:	b084      	sub	sp, #16
    6b80:	af00      	add	r7, sp, #0
    6b82:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6b84:	4b1a      	ldr	r3, [pc, #104]	; (6bf0 <system_clock_source_osc8m_set_config+0x74>)
    6b86:	6a1b      	ldr	r3, [r3, #32]
    6b88:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    6b8a:	687b      	ldr	r3, [r7, #4]
    6b8c:	781b      	ldrb	r3, [r3, #0]
    6b8e:	1c1a      	adds	r2, r3, #0
    6b90:	2303      	movs	r3, #3
    6b92:	4013      	ands	r3, r2
    6b94:	b2da      	uxtb	r2, r3
    6b96:	230d      	movs	r3, #13
    6b98:	18fb      	adds	r3, r7, r3
    6b9a:	2103      	movs	r1, #3
    6b9c:	400a      	ands	r2, r1
    6b9e:	0010      	movs	r0, r2
    6ba0:	781a      	ldrb	r2, [r3, #0]
    6ba2:	2103      	movs	r1, #3
    6ba4:	438a      	bics	r2, r1
    6ba6:	1c11      	adds	r1, r2, #0
    6ba8:	1c02      	adds	r2, r0, #0
    6baa:	430a      	orrs	r2, r1
    6bac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6bae:	687b      	ldr	r3, [r7, #4]
    6bb0:	789a      	ldrb	r2, [r3, #2]
    6bb2:	230c      	movs	r3, #12
    6bb4:	18fb      	adds	r3, r7, r3
    6bb6:	01d0      	lsls	r0, r2, #7
    6bb8:	781a      	ldrb	r2, [r3, #0]
    6bba:	217f      	movs	r1, #127	; 0x7f
    6bbc:	400a      	ands	r2, r1
    6bbe:	1c11      	adds	r1, r2, #0
    6bc0:	1c02      	adds	r2, r0, #0
    6bc2:	430a      	orrs	r2, r1
    6bc4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	785a      	ldrb	r2, [r3, #1]
    6bca:	230c      	movs	r3, #12
    6bcc:	18fb      	adds	r3, r7, r3
    6bce:	2101      	movs	r1, #1
    6bd0:	400a      	ands	r2, r1
    6bd2:	0190      	lsls	r0, r2, #6
    6bd4:	781a      	ldrb	r2, [r3, #0]
    6bd6:	2140      	movs	r1, #64	; 0x40
    6bd8:	438a      	bics	r2, r1
    6bda:	1c11      	adds	r1, r2, #0
    6bdc:	1c02      	adds	r2, r0, #0
    6bde:	430a      	orrs	r2, r1
    6be0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    6be2:	4b03      	ldr	r3, [pc, #12]	; (6bf0 <system_clock_source_osc8m_set_config+0x74>)
    6be4:	68fa      	ldr	r2, [r7, #12]
    6be6:	621a      	str	r2, [r3, #32]
}
    6be8:	46c0      	nop			; (mov r8, r8)
    6bea:	46bd      	mov	sp, r7
    6bec:	b004      	add	sp, #16
    6bee:	bd80      	pop	{r7, pc}
    6bf0:	40000800 	.word	0x40000800

00006bf4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6bf4:	b580      	push	{r7, lr}
    6bf6:	b082      	sub	sp, #8
    6bf8:	af00      	add	r7, sp, #0
    6bfa:	0002      	movs	r2, r0
    6bfc:	1dfb      	adds	r3, r7, #7
    6bfe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6c00:	1dfb      	adds	r3, r7, #7
    6c02:	781b      	ldrb	r3, [r3, #0]
    6c04:	2b08      	cmp	r3, #8
    6c06:	d83b      	bhi.n	6c80 <system_clock_source_enable+0x8c>
    6c08:	009a      	lsls	r2, r3, #2
    6c0a:	4b21      	ldr	r3, [pc, #132]	; (6c90 <system_clock_source_enable+0x9c>)
    6c0c:	18d3      	adds	r3, r2, r3
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6c12:	4b20      	ldr	r3, [pc, #128]	; (6c94 <system_clock_source_enable+0xa0>)
    6c14:	4a1f      	ldr	r2, [pc, #124]	; (6c94 <system_clock_source_enable+0xa0>)
    6c16:	6a12      	ldr	r2, [r2, #32]
    6c18:	2102      	movs	r1, #2
    6c1a:	430a      	orrs	r2, r1
    6c1c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6c1e:	2300      	movs	r3, #0
    6c20:	e031      	b.n	6c86 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6c22:	4b1c      	ldr	r3, [pc, #112]	; (6c94 <system_clock_source_enable+0xa0>)
    6c24:	4a1b      	ldr	r2, [pc, #108]	; (6c94 <system_clock_source_enable+0xa0>)
    6c26:	6992      	ldr	r2, [r2, #24]
    6c28:	2102      	movs	r1, #2
    6c2a:	430a      	orrs	r2, r1
    6c2c:	619a      	str	r2, [r3, #24]
		break;
    6c2e:	e029      	b.n	6c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6c30:	4a18      	ldr	r2, [pc, #96]	; (6c94 <system_clock_source_enable+0xa0>)
    6c32:	4b18      	ldr	r3, [pc, #96]	; (6c94 <system_clock_source_enable+0xa0>)
    6c34:	8a1b      	ldrh	r3, [r3, #16]
    6c36:	b29b      	uxth	r3, r3
    6c38:	2102      	movs	r1, #2
    6c3a:	430b      	orrs	r3, r1
    6c3c:	b29b      	uxth	r3, r3
    6c3e:	8213      	strh	r3, [r2, #16]
		break;
    6c40:	e020      	b.n	6c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6c42:	4a14      	ldr	r2, [pc, #80]	; (6c94 <system_clock_source_enable+0xa0>)
    6c44:	4b13      	ldr	r3, [pc, #76]	; (6c94 <system_clock_source_enable+0xa0>)
    6c46:	8a9b      	ldrh	r3, [r3, #20]
    6c48:	b29b      	uxth	r3, r3
    6c4a:	2102      	movs	r1, #2
    6c4c:	430b      	orrs	r3, r1
    6c4e:	b29b      	uxth	r3, r3
    6c50:	8293      	strh	r3, [r2, #20]
		break;
    6c52:	e017      	b.n	6c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6c54:	4b10      	ldr	r3, [pc, #64]	; (6c98 <system_clock_source_enable+0xa4>)
    6c56:	681b      	ldr	r3, [r3, #0]
    6c58:	2202      	movs	r2, #2
    6c5a:	431a      	orrs	r2, r3
    6c5c:	4b0e      	ldr	r3, [pc, #56]	; (6c98 <system_clock_source_enable+0xa4>)
    6c5e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6c60:	4b0e      	ldr	r3, [pc, #56]	; (6c9c <system_clock_source_enable+0xa8>)
    6c62:	4798      	blx	r3
		break;
    6c64:	e00e      	b.n	6c84 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6c66:	4a0b      	ldr	r2, [pc, #44]	; (6c94 <system_clock_source_enable+0xa0>)
    6c68:	490a      	ldr	r1, [pc, #40]	; (6c94 <system_clock_source_enable+0xa0>)
    6c6a:	2344      	movs	r3, #68	; 0x44
    6c6c:	5ccb      	ldrb	r3, [r1, r3]
    6c6e:	b2db      	uxtb	r3, r3
    6c70:	2102      	movs	r1, #2
    6c72:	430b      	orrs	r3, r1
    6c74:	b2d9      	uxtb	r1, r3
    6c76:	2344      	movs	r3, #68	; 0x44
    6c78:	54d1      	strb	r1, [r2, r3]
		break;
    6c7a:	e003      	b.n	6c84 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6c7c:	2300      	movs	r3, #0
    6c7e:	e002      	b.n	6c86 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6c80:	2317      	movs	r3, #23
    6c82:	e000      	b.n	6c86 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6c84:	2300      	movs	r3, #0
}
    6c86:	0018      	movs	r0, r3
    6c88:	46bd      	mov	sp, r7
    6c8a:	b002      	add	sp, #8
    6c8c:	bd80      	pop	{r7, pc}
    6c8e:	46c0      	nop			; (mov r8, r8)
    6c90:	0000959c 	.word	0x0000959c
    6c94:	40000800 	.word	0x40000800
    6c98:	200000b0 	.word	0x200000b0
    6c9c:	00006a7d 	.word	0x00006a7d

00006ca0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6ca0:	b580      	push	{r7, lr}
    6ca2:	b082      	sub	sp, #8
    6ca4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    6ca6:	003b      	movs	r3, r7
    6ca8:	2201      	movs	r2, #1
    6caa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6cac:	2300      	movs	r3, #0
    6cae:	607b      	str	r3, [r7, #4]
    6cb0:	e009      	b.n	6cc6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	b2db      	uxtb	r3, r3
    6cb6:	003a      	movs	r2, r7
    6cb8:	0011      	movs	r1, r2
    6cba:	0018      	movs	r0, r3
    6cbc:	4b05      	ldr	r3, [pc, #20]	; (6cd4 <_switch_peripheral_gclk+0x34>)
    6cbe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	3301      	adds	r3, #1
    6cc4:	607b      	str	r3, [r7, #4]
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	2b24      	cmp	r3, #36	; 0x24
    6cca:	d9f2      	bls.n	6cb2 <_switch_peripheral_gclk+0x12>
	}
}
    6ccc:	46c0      	nop			; (mov r8, r8)
    6cce:	46bd      	mov	sp, r7
    6cd0:	b002      	add	sp, #8
    6cd2:	bd80      	pop	{r7, pc}
    6cd4:	000070d9 	.word	0x000070d9

00006cd8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b0a0      	sub	sp, #128	; 0x80
    6cdc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6cde:	4b27      	ldr	r3, [pc, #156]	; (6d7c <system_clock_init+0xa4>)
    6ce0:	22c2      	movs	r2, #194	; 0xc2
    6ce2:	00d2      	lsls	r2, r2, #3
    6ce4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6ce6:	2000      	movs	r0, #0
    6ce8:	4b25      	ldr	r3, [pc, #148]	; (6d80 <system_clock_init+0xa8>)
    6cea:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6cec:	4b25      	ldr	r3, [pc, #148]	; (6d84 <system_clock_init+0xac>)
    6cee:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6cf0:	237c      	movs	r3, #124	; 0x7c
    6cf2:	18fb      	adds	r3, r7, r3
    6cf4:	0018      	movs	r0, r3
    6cf6:	4b24      	ldr	r3, [pc, #144]	; (6d88 <system_clock_init+0xb0>)
    6cf8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6cfa:	237c      	movs	r3, #124	; 0x7c
    6cfc:	18fb      	adds	r3, r7, r3
    6cfe:	2200      	movs	r2, #0
    6d00:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6d02:	237c      	movs	r3, #124	; 0x7c
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	2201      	movs	r2, #1
    6d08:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6d0a:	237c      	movs	r3, #124	; 0x7c
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	2200      	movs	r2, #0
    6d10:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6d12:	237c      	movs	r3, #124	; 0x7c
    6d14:	18fb      	adds	r3, r7, r3
    6d16:	0018      	movs	r0, r3
    6d18:	4b1c      	ldr	r3, [pc, #112]	; (6d8c <system_clock_init+0xb4>)
    6d1a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6d1c:	2006      	movs	r0, #6
    6d1e:	4b1c      	ldr	r3, [pc, #112]	; (6d90 <system_clock_init+0xb8>)
    6d20:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6d22:	4b1c      	ldr	r3, [pc, #112]	; (6d94 <system_clock_init+0xbc>)
    6d24:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6d26:	2000      	movs	r0, #0
    6d28:	4b1b      	ldr	r3, [pc, #108]	; (6d98 <system_clock_init+0xc0>)
    6d2a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6d2c:	2100      	movs	r1, #0
    6d2e:	2000      	movs	r0, #0
    6d30:	4b1a      	ldr	r3, [pc, #104]	; (6d9c <system_clock_init+0xc4>)
    6d32:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6d34:	2100      	movs	r1, #0
    6d36:	2001      	movs	r0, #1
    6d38:	4b18      	ldr	r3, [pc, #96]	; (6d9c <system_clock_init+0xc4>)
    6d3a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6d3c:	2100      	movs	r1, #0
    6d3e:	2002      	movs	r0, #2
    6d40:	4b16      	ldr	r3, [pc, #88]	; (6d9c <system_clock_init+0xc4>)
    6d42:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6d44:	1d3b      	adds	r3, r7, #4
    6d46:	0018      	movs	r0, r3
    6d48:	4b15      	ldr	r3, [pc, #84]	; (6da0 <system_clock_init+0xc8>)
    6d4a:	4798      	blx	r3
    6d4c:	1d3b      	adds	r3, r7, #4
    6d4e:	2206      	movs	r2, #6
    6d50:	701a      	strb	r2, [r3, #0]
    6d52:	1d3b      	adds	r3, r7, #4
    6d54:	2201      	movs	r2, #1
    6d56:	605a      	str	r2, [r3, #4]
    6d58:	1d3b      	adds	r3, r7, #4
    6d5a:	2200      	movs	r2, #0
    6d5c:	721a      	strb	r2, [r3, #8]
    6d5e:	1d3b      	adds	r3, r7, #4
    6d60:	2200      	movs	r2, #0
    6d62:	725a      	strb	r2, [r3, #9]
    6d64:	1d3b      	adds	r3, r7, #4
    6d66:	0019      	movs	r1, r3
    6d68:	2000      	movs	r0, #0
    6d6a:	4b0e      	ldr	r3, [pc, #56]	; (6da4 <system_clock_init+0xcc>)
    6d6c:	4798      	blx	r3
    6d6e:	2000      	movs	r0, #0
    6d70:	4b0d      	ldr	r3, [pc, #52]	; (6da8 <system_clock_init+0xd0>)
    6d72:	4798      	blx	r3
#endif
}
    6d74:	46c0      	nop			; (mov r8, r8)
    6d76:	46bd      	mov	sp, r7
    6d78:	b020      	add	sp, #128	; 0x80
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	40000800 	.word	0x40000800
    6d80:	00006a2d 	.word	0x00006a2d
    6d84:	00006ca1 	.word	0x00006ca1
    6d88:	00006997 	.word	0x00006997
    6d8c:	00006b7d 	.word	0x00006b7d
    6d90:	00006bf5 	.word	0x00006bf5
    6d94:	00006e51 	.word	0x00006e51
    6d98:	000069b9 	.word	0x000069b9
    6d9c:	000069d9 	.word	0x000069d9
    6da0:	00006969 	.word	0x00006969
    6da4:	00006e81 	.word	0x00006e81
    6da8:	00006fa5 	.word	0x00006fa5

00006dac <system_apb_clock_set_mask>:
{
    6dac:	b580      	push	{r7, lr}
    6dae:	b082      	sub	sp, #8
    6db0:	af00      	add	r7, sp, #0
    6db2:	0002      	movs	r2, r0
    6db4:	6039      	str	r1, [r7, #0]
    6db6:	1dfb      	adds	r3, r7, #7
    6db8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6dba:	1dfb      	adds	r3, r7, #7
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	2b01      	cmp	r3, #1
    6dc0:	d00a      	beq.n	6dd8 <system_apb_clock_set_mask+0x2c>
    6dc2:	2b02      	cmp	r3, #2
    6dc4:	d00f      	beq.n	6de6 <system_apb_clock_set_mask+0x3a>
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d114      	bne.n	6df4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6dca:	4b0e      	ldr	r3, [pc, #56]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6dcc:	4a0d      	ldr	r2, [pc, #52]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6dce:	6991      	ldr	r1, [r2, #24]
    6dd0:	683a      	ldr	r2, [r7, #0]
    6dd2:	430a      	orrs	r2, r1
    6dd4:	619a      	str	r2, [r3, #24]
			break;
    6dd6:	e00f      	b.n	6df8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6dd8:	4b0a      	ldr	r3, [pc, #40]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6dda:	4a0a      	ldr	r2, [pc, #40]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6ddc:	69d1      	ldr	r1, [r2, #28]
    6dde:	683a      	ldr	r2, [r7, #0]
    6de0:	430a      	orrs	r2, r1
    6de2:	61da      	str	r2, [r3, #28]
			break;
    6de4:	e008      	b.n	6df8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6de6:	4b07      	ldr	r3, [pc, #28]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6de8:	4a06      	ldr	r2, [pc, #24]	; (6e04 <system_apb_clock_set_mask+0x58>)
    6dea:	6a11      	ldr	r1, [r2, #32]
    6dec:	683a      	ldr	r2, [r7, #0]
    6dee:	430a      	orrs	r2, r1
    6df0:	621a      	str	r2, [r3, #32]
			break;
    6df2:	e001      	b.n	6df8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6df4:	2317      	movs	r3, #23
    6df6:	e000      	b.n	6dfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6df8:	2300      	movs	r3, #0
}
    6dfa:	0018      	movs	r0, r3
    6dfc:	46bd      	mov	sp, r7
    6dfe:	b002      	add	sp, #8
    6e00:	bd80      	pop	{r7, pc}
    6e02:	46c0      	nop			; (mov r8, r8)
    6e04:	40000400 	.word	0x40000400

00006e08 <system_interrupt_enter_critical_section>:
{
    6e08:	b580      	push	{r7, lr}
    6e0a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6e0c:	4b02      	ldr	r3, [pc, #8]	; (6e18 <system_interrupt_enter_critical_section+0x10>)
    6e0e:	4798      	blx	r3
}
    6e10:	46c0      	nop			; (mov r8, r8)
    6e12:	46bd      	mov	sp, r7
    6e14:	bd80      	pop	{r7, pc}
    6e16:	46c0      	nop			; (mov r8, r8)
    6e18:	00004739 	.word	0x00004739

00006e1c <system_interrupt_leave_critical_section>:
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6e20:	4b02      	ldr	r3, [pc, #8]	; (6e2c <system_interrupt_leave_critical_section+0x10>)
    6e22:	4798      	blx	r3
}
    6e24:	46c0      	nop			; (mov r8, r8)
    6e26:	46bd      	mov	sp, r7
    6e28:	bd80      	pop	{r7, pc}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	0000478d 	.word	0x0000478d

00006e30 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6e30:	b580      	push	{r7, lr}
    6e32:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6e34:	4b05      	ldr	r3, [pc, #20]	; (6e4c <system_gclk_is_syncing+0x1c>)
    6e36:	785b      	ldrb	r3, [r3, #1]
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	b25b      	sxtb	r3, r3
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	da01      	bge.n	6e44 <system_gclk_is_syncing+0x14>
		return true;
    6e40:	2301      	movs	r3, #1
    6e42:	e000      	b.n	6e46 <system_gclk_is_syncing+0x16>
	}

	return false;
    6e44:	2300      	movs	r3, #0
}
    6e46:	0018      	movs	r0, r3
    6e48:	46bd      	mov	sp, r7
    6e4a:	bd80      	pop	{r7, pc}
    6e4c:	40000c00 	.word	0x40000c00

00006e50 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6e50:	b580      	push	{r7, lr}
    6e52:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6e54:	2108      	movs	r1, #8
    6e56:	2000      	movs	r0, #0
    6e58:	4b07      	ldr	r3, [pc, #28]	; (6e78 <system_gclk_init+0x28>)
    6e5a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6e5c:	4b07      	ldr	r3, [pc, #28]	; (6e7c <system_gclk_init+0x2c>)
    6e5e:	2201      	movs	r2, #1
    6e60:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6e62:	46c0      	nop			; (mov r8, r8)
    6e64:	4b05      	ldr	r3, [pc, #20]	; (6e7c <system_gclk_init+0x2c>)
    6e66:	781b      	ldrb	r3, [r3, #0]
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	001a      	movs	r2, r3
    6e6c:	2301      	movs	r3, #1
    6e6e:	4013      	ands	r3, r2
    6e70:	d1f8      	bne.n	6e64 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6e72:	46c0      	nop			; (mov r8, r8)
    6e74:	46bd      	mov	sp, r7
    6e76:	bd80      	pop	{r7, pc}
    6e78:	00006dad 	.word	0x00006dad
    6e7c:	40000c00 	.word	0x40000c00

00006e80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b086      	sub	sp, #24
    6e84:	af00      	add	r7, sp, #0
    6e86:	0002      	movs	r2, r0
    6e88:	6039      	str	r1, [r7, #0]
    6e8a:	1dfb      	adds	r3, r7, #7
    6e8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6e8e:	1dfb      	adds	r3, r7, #7
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6e94:	1dfb      	adds	r3, r7, #7
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6e9a:	683b      	ldr	r3, [r7, #0]
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	021b      	lsls	r3, r3, #8
    6ea0:	001a      	movs	r2, r3
    6ea2:	697b      	ldr	r3, [r7, #20]
    6ea4:	4313      	orrs	r3, r2
    6ea6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6ea8:	683b      	ldr	r3, [r7, #0]
    6eaa:	785b      	ldrb	r3, [r3, #1]
    6eac:	2b00      	cmp	r3, #0
    6eae:	d004      	beq.n	6eba <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6eb0:	697b      	ldr	r3, [r7, #20]
    6eb2:	2280      	movs	r2, #128	; 0x80
    6eb4:	02d2      	lsls	r2, r2, #11
    6eb6:	4313      	orrs	r3, r2
    6eb8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6eba:	683b      	ldr	r3, [r7, #0]
    6ebc:	7a5b      	ldrb	r3, [r3, #9]
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d004      	beq.n	6ecc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ec2:	697b      	ldr	r3, [r7, #20]
    6ec4:	2280      	movs	r2, #128	; 0x80
    6ec6:	0312      	lsls	r2, r2, #12
    6ec8:	4313      	orrs	r3, r2
    6eca:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6ecc:	683b      	ldr	r3, [r7, #0]
    6ece:	685b      	ldr	r3, [r3, #4]
    6ed0:	2b01      	cmp	r3, #1
    6ed2:	d92c      	bls.n	6f2e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6ed4:	683b      	ldr	r3, [r7, #0]
    6ed6:	685a      	ldr	r2, [r3, #4]
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	685b      	ldr	r3, [r3, #4]
    6edc:	3b01      	subs	r3, #1
    6ede:	4013      	ands	r3, r2
    6ee0:	d11a      	bne.n	6f18 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6ee2:	2300      	movs	r3, #0
    6ee4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6ee6:	2302      	movs	r3, #2
    6ee8:	60bb      	str	r3, [r7, #8]
    6eea:	e005      	b.n	6ef8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6eec:	68fb      	ldr	r3, [r7, #12]
    6eee:	3301      	adds	r3, #1
    6ef0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    6ef2:	68bb      	ldr	r3, [r7, #8]
    6ef4:	005b      	lsls	r3, r3, #1
    6ef6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6ef8:	683b      	ldr	r3, [r7, #0]
    6efa:	685a      	ldr	r2, [r3, #4]
    6efc:	68bb      	ldr	r3, [r7, #8]
    6efe:	429a      	cmp	r2, r3
    6f00:	d8f4      	bhi.n	6eec <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6f02:	68fb      	ldr	r3, [r7, #12]
    6f04:	021b      	lsls	r3, r3, #8
    6f06:	693a      	ldr	r2, [r7, #16]
    6f08:	4313      	orrs	r3, r2
    6f0a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f0c:	697b      	ldr	r3, [r7, #20]
    6f0e:	2280      	movs	r2, #128	; 0x80
    6f10:	0352      	lsls	r2, r2, #13
    6f12:	4313      	orrs	r3, r2
    6f14:	617b      	str	r3, [r7, #20]
    6f16:	e00a      	b.n	6f2e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6f18:	683b      	ldr	r3, [r7, #0]
    6f1a:	685b      	ldr	r3, [r3, #4]
    6f1c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6f1e:	693a      	ldr	r2, [r7, #16]
    6f20:	4313      	orrs	r3, r2
    6f22:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f24:	697b      	ldr	r3, [r7, #20]
    6f26:	2280      	movs	r2, #128	; 0x80
    6f28:	0292      	lsls	r2, r2, #10
    6f2a:	4313      	orrs	r3, r2
    6f2c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f2e:	683b      	ldr	r3, [r7, #0]
    6f30:	7a1b      	ldrb	r3, [r3, #8]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d004      	beq.n	6f40 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f36:	697b      	ldr	r3, [r7, #20]
    6f38:	2280      	movs	r2, #128	; 0x80
    6f3a:	0392      	lsls	r2, r2, #14
    6f3c:	4313      	orrs	r3, r2
    6f3e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6f40:	46c0      	nop			; (mov r8, r8)
    6f42:	4b13      	ldr	r3, [pc, #76]	; (6f90 <system_gclk_gen_set_config+0x110>)
    6f44:	4798      	blx	r3
    6f46:	1e03      	subs	r3, r0, #0
    6f48:	d1fb      	bne.n	6f42 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6f4a:	4b12      	ldr	r3, [pc, #72]	; (6f94 <system_gclk_gen_set_config+0x114>)
    6f4c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6f4e:	4a12      	ldr	r2, [pc, #72]	; (6f98 <system_gclk_gen_set_config+0x118>)
    6f50:	1dfb      	adds	r3, r7, #7
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6f56:	46c0      	nop			; (mov r8, r8)
    6f58:	4b0d      	ldr	r3, [pc, #52]	; (6f90 <system_gclk_gen_set_config+0x110>)
    6f5a:	4798      	blx	r3
    6f5c:	1e03      	subs	r3, r0, #0
    6f5e:	d1fb      	bne.n	6f58 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6f60:	4b0e      	ldr	r3, [pc, #56]	; (6f9c <system_gclk_gen_set_config+0x11c>)
    6f62:	693a      	ldr	r2, [r7, #16]
    6f64:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	4b09      	ldr	r3, [pc, #36]	; (6f90 <system_gclk_gen_set_config+0x110>)
    6f6a:	4798      	blx	r3
    6f6c:	1e03      	subs	r3, r0, #0
    6f6e:	d1fb      	bne.n	6f68 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6f70:	4b0a      	ldr	r3, [pc, #40]	; (6f9c <system_gclk_gen_set_config+0x11c>)
    6f72:	4a0a      	ldr	r2, [pc, #40]	; (6f9c <system_gclk_gen_set_config+0x11c>)
    6f74:	6851      	ldr	r1, [r2, #4]
    6f76:	2280      	movs	r2, #128	; 0x80
    6f78:	0252      	lsls	r2, r2, #9
    6f7a:	4011      	ands	r1, r2
    6f7c:	697a      	ldr	r2, [r7, #20]
    6f7e:	430a      	orrs	r2, r1
    6f80:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6f82:	4b07      	ldr	r3, [pc, #28]	; (6fa0 <system_gclk_gen_set_config+0x120>)
    6f84:	4798      	blx	r3
}
    6f86:	46c0      	nop			; (mov r8, r8)
    6f88:	46bd      	mov	sp, r7
    6f8a:	b006      	add	sp, #24
    6f8c:	bd80      	pop	{r7, pc}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00006e31 	.word	0x00006e31
    6f94:	00006e09 	.word	0x00006e09
    6f98:	40000c08 	.word	0x40000c08
    6f9c:	40000c00 	.word	0x40000c00
    6fa0:	00006e1d 	.word	0x00006e1d

00006fa4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	b082      	sub	sp, #8
    6fa8:	af00      	add	r7, sp, #0
    6faa:	0002      	movs	r2, r0
    6fac:	1dfb      	adds	r3, r7, #7
    6fae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6fb0:	46c0      	nop			; (mov r8, r8)
    6fb2:	4b0e      	ldr	r3, [pc, #56]	; (6fec <system_gclk_gen_enable+0x48>)
    6fb4:	4798      	blx	r3
    6fb6:	1e03      	subs	r3, r0, #0
    6fb8:	d1fb      	bne.n	6fb2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6fba:	4b0d      	ldr	r3, [pc, #52]	; (6ff0 <system_gclk_gen_enable+0x4c>)
    6fbc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6fbe:	4a0d      	ldr	r2, [pc, #52]	; (6ff4 <system_gclk_gen_enable+0x50>)
    6fc0:	1dfb      	adds	r3, r7, #7
    6fc2:	781b      	ldrb	r3, [r3, #0]
    6fc4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6fc6:	46c0      	nop			; (mov r8, r8)
    6fc8:	4b08      	ldr	r3, [pc, #32]	; (6fec <system_gclk_gen_enable+0x48>)
    6fca:	4798      	blx	r3
    6fcc:	1e03      	subs	r3, r0, #0
    6fce:	d1fb      	bne.n	6fc8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6fd0:	4b09      	ldr	r3, [pc, #36]	; (6ff8 <system_gclk_gen_enable+0x54>)
    6fd2:	4a09      	ldr	r2, [pc, #36]	; (6ff8 <system_gclk_gen_enable+0x54>)
    6fd4:	6852      	ldr	r2, [r2, #4]
    6fd6:	2180      	movs	r1, #128	; 0x80
    6fd8:	0249      	lsls	r1, r1, #9
    6fda:	430a      	orrs	r2, r1
    6fdc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6fde:	4b07      	ldr	r3, [pc, #28]	; (6ffc <system_gclk_gen_enable+0x58>)
    6fe0:	4798      	blx	r3
}
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	46bd      	mov	sp, r7
    6fe6:	b002      	add	sp, #8
    6fe8:	bd80      	pop	{r7, pc}
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	00006e31 	.word	0x00006e31
    6ff0:	00006e09 	.word	0x00006e09
    6ff4:	40000c04 	.word	0x40000c04
    6ff8:	40000c00 	.word	0x40000c00
    6ffc:	00006e1d 	.word	0x00006e1d

00007000 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7000:	b580      	push	{r7, lr}
    7002:	b086      	sub	sp, #24
    7004:	af00      	add	r7, sp, #0
    7006:	0002      	movs	r2, r0
    7008:	1dfb      	adds	r3, r7, #7
    700a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    700c:	46c0      	nop			; (mov r8, r8)
    700e:	4b2a      	ldr	r3, [pc, #168]	; (70b8 <system_gclk_gen_get_hz+0xb8>)
    7010:	4798      	blx	r3
    7012:	1e03      	subs	r3, r0, #0
    7014:	d1fb      	bne.n	700e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7016:	4b29      	ldr	r3, [pc, #164]	; (70bc <system_gclk_gen_get_hz+0xbc>)
    7018:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    701a:	4a29      	ldr	r2, [pc, #164]	; (70c0 <system_gclk_gen_get_hz+0xc0>)
    701c:	1dfb      	adds	r3, r7, #7
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7022:	46c0      	nop			; (mov r8, r8)
    7024:	4b24      	ldr	r3, [pc, #144]	; (70b8 <system_gclk_gen_get_hz+0xb8>)
    7026:	4798      	blx	r3
    7028:	1e03      	subs	r3, r0, #0
    702a:	d1fb      	bne.n	7024 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    702c:	4b25      	ldr	r3, [pc, #148]	; (70c4 <system_gclk_gen_get_hz+0xc4>)
    702e:	685b      	ldr	r3, [r3, #4]
    7030:	04db      	lsls	r3, r3, #19
    7032:	0edb      	lsrs	r3, r3, #27
    7034:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7036:	0018      	movs	r0, r3
    7038:	4b23      	ldr	r3, [pc, #140]	; (70c8 <system_gclk_gen_get_hz+0xc8>)
    703a:	4798      	blx	r3
    703c:	0003      	movs	r3, r0
    703e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7040:	4a1f      	ldr	r2, [pc, #124]	; (70c0 <system_gclk_gen_get_hz+0xc0>)
    7042:	1dfb      	adds	r3, r7, #7
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7048:	4b1e      	ldr	r3, [pc, #120]	; (70c4 <system_gclk_gen_get_hz+0xc4>)
    704a:	685b      	ldr	r3, [r3, #4]
    704c:	02db      	lsls	r3, r3, #11
    704e:	0fdb      	lsrs	r3, r3, #31
    7050:	b2da      	uxtb	r2, r3
    7052:	2313      	movs	r3, #19
    7054:	18fb      	adds	r3, r7, r3
    7056:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7058:	4a1c      	ldr	r2, [pc, #112]	; (70cc <system_gclk_gen_get_hz+0xcc>)
    705a:	1dfb      	adds	r3, r7, #7
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7060:	46c0      	nop			; (mov r8, r8)
    7062:	4b15      	ldr	r3, [pc, #84]	; (70b8 <system_gclk_gen_get_hz+0xb8>)
    7064:	4798      	blx	r3
    7066:	1e03      	subs	r3, r0, #0
    7068:	d1fb      	bne.n	7062 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    706a:	4b16      	ldr	r3, [pc, #88]	; (70c4 <system_gclk_gen_get_hz+0xc4>)
    706c:	689b      	ldr	r3, [r3, #8]
    706e:	021b      	lsls	r3, r3, #8
    7070:	0c1b      	lsrs	r3, r3, #16
    7072:	b29b      	uxth	r3, r3
    7074:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    7076:	4b16      	ldr	r3, [pc, #88]	; (70d0 <system_gclk_gen_get_hz+0xd0>)
    7078:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    707a:	2313      	movs	r3, #19
    707c:	18fb      	adds	r3, r7, r3
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	2b00      	cmp	r3, #0
    7082:	d109      	bne.n	7098 <system_gclk_gen_get_hz+0x98>
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	2b01      	cmp	r3, #1
    7088:	d906      	bls.n	7098 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    708a:	4b12      	ldr	r3, [pc, #72]	; (70d4 <system_gclk_gen_get_hz+0xd4>)
    708c:	68f9      	ldr	r1, [r7, #12]
    708e:	6978      	ldr	r0, [r7, #20]
    7090:	4798      	blx	r3
    7092:	0003      	movs	r3, r0
    7094:	617b      	str	r3, [r7, #20]
    7096:	e00a      	b.n	70ae <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    7098:	2313      	movs	r3, #19
    709a:	18fb      	adds	r3, r7, r3
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	2b00      	cmp	r3, #0
    70a0:	d005      	beq.n	70ae <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    70a2:	68fb      	ldr	r3, [r7, #12]
    70a4:	3301      	adds	r3, #1
    70a6:	697a      	ldr	r2, [r7, #20]
    70a8:	40da      	lsrs	r2, r3
    70aa:	0013      	movs	r3, r2
    70ac:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    70ae:	697b      	ldr	r3, [r7, #20]
}
    70b0:	0018      	movs	r0, r3
    70b2:	46bd      	mov	sp, r7
    70b4:	b006      	add	sp, #24
    70b6:	bd80      	pop	{r7, pc}
    70b8:	00006e31 	.word	0x00006e31
    70bc:	00006e09 	.word	0x00006e09
    70c0:	40000c04 	.word	0x40000c04
    70c4:	40000c00 	.word	0x40000c00
    70c8:	00006ac1 	.word	0x00006ac1
    70cc:	40000c08 	.word	0x40000c08
    70d0:	00006e1d 	.word	0x00006e1d
    70d4:	00008149 	.word	0x00008149

000070d8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    70d8:	b580      	push	{r7, lr}
    70da:	b084      	sub	sp, #16
    70dc:	af00      	add	r7, sp, #0
    70de:	0002      	movs	r2, r0
    70e0:	6039      	str	r1, [r7, #0]
    70e2:	1dfb      	adds	r3, r7, #7
    70e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    70e6:	1dfb      	adds	r3, r7, #7
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    70ec:	683b      	ldr	r3, [r7, #0]
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	021b      	lsls	r3, r3, #8
    70f2:	001a      	movs	r2, r3
    70f4:	68fb      	ldr	r3, [r7, #12]
    70f6:	4313      	orrs	r3, r2
    70f8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    70fa:	1dfb      	adds	r3, r7, #7
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	0018      	movs	r0, r3
    7100:	4b04      	ldr	r3, [pc, #16]	; (7114 <system_gclk_chan_set_config+0x3c>)
    7102:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7104:	4b04      	ldr	r3, [pc, #16]	; (7118 <system_gclk_chan_set_config+0x40>)
    7106:	68fa      	ldr	r2, [r7, #12]
    7108:	b292      	uxth	r2, r2
    710a:	805a      	strh	r2, [r3, #2]
}
    710c:	46c0      	nop			; (mov r8, r8)
    710e:	46bd      	mov	sp, r7
    7110:	b004      	add	sp, #16
    7112:	bd80      	pop	{r7, pc}
    7114:	00007165 	.word	0x00007165
    7118:	40000c00 	.word	0x40000c00

0000711c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    711c:	b580      	push	{r7, lr}
    711e:	b082      	sub	sp, #8
    7120:	af00      	add	r7, sp, #0
    7122:	0002      	movs	r2, r0
    7124:	1dfb      	adds	r3, r7, #7
    7126:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7128:	4b0a      	ldr	r3, [pc, #40]	; (7154 <system_gclk_chan_enable+0x38>)
    712a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    712c:	4a0a      	ldr	r2, [pc, #40]	; (7158 <system_gclk_chan_enable+0x3c>)
    712e:	1dfb      	adds	r3, r7, #7
    7130:	781b      	ldrb	r3, [r3, #0]
    7132:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7134:	4909      	ldr	r1, [pc, #36]	; (715c <system_gclk_chan_enable+0x40>)
    7136:	4b09      	ldr	r3, [pc, #36]	; (715c <system_gclk_chan_enable+0x40>)
    7138:	885b      	ldrh	r3, [r3, #2]
    713a:	b29b      	uxth	r3, r3
    713c:	2280      	movs	r2, #128	; 0x80
    713e:	01d2      	lsls	r2, r2, #7
    7140:	4313      	orrs	r3, r2
    7142:	b29b      	uxth	r3, r3
    7144:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    7146:	4b06      	ldr	r3, [pc, #24]	; (7160 <system_gclk_chan_enable+0x44>)
    7148:	4798      	blx	r3
}
    714a:	46c0      	nop			; (mov r8, r8)
    714c:	46bd      	mov	sp, r7
    714e:	b002      	add	sp, #8
    7150:	bd80      	pop	{r7, pc}
    7152:	46c0      	nop			; (mov r8, r8)
    7154:	00006e09 	.word	0x00006e09
    7158:	40000c02 	.word	0x40000c02
    715c:	40000c00 	.word	0x40000c00
    7160:	00006e1d 	.word	0x00006e1d

00007164 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7164:	b580      	push	{r7, lr}
    7166:	b084      	sub	sp, #16
    7168:	af00      	add	r7, sp, #0
    716a:	0002      	movs	r2, r0
    716c:	1dfb      	adds	r3, r7, #7
    716e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7170:	4b1c      	ldr	r3, [pc, #112]	; (71e4 <system_gclk_chan_disable+0x80>)
    7172:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7174:	4a1c      	ldr	r2, [pc, #112]	; (71e8 <system_gclk_chan_disable+0x84>)
    7176:	1dfb      	adds	r3, r7, #7
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    717c:	4b1b      	ldr	r3, [pc, #108]	; (71ec <system_gclk_chan_disable+0x88>)
    717e:	885b      	ldrh	r3, [r3, #2]
    7180:	051b      	lsls	r3, r3, #20
    7182:	0f1b      	lsrs	r3, r3, #28
    7184:	b2db      	uxtb	r3, r3
    7186:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    7188:	4a18      	ldr	r2, [pc, #96]	; (71ec <system_gclk_chan_disable+0x88>)
    718a:	8853      	ldrh	r3, [r2, #2]
    718c:	4918      	ldr	r1, [pc, #96]	; (71f0 <system_gclk_chan_disable+0x8c>)
    718e:	400b      	ands	r3, r1
    7190:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7192:	4a16      	ldr	r2, [pc, #88]	; (71ec <system_gclk_chan_disable+0x88>)
    7194:	4b15      	ldr	r3, [pc, #84]	; (71ec <system_gclk_chan_disable+0x88>)
    7196:	885b      	ldrh	r3, [r3, #2]
    7198:	b29b      	uxth	r3, r3
    719a:	4916      	ldr	r1, [pc, #88]	; (71f4 <system_gclk_chan_disable+0x90>)
    719c:	400b      	ands	r3, r1
    719e:	b29b      	uxth	r3, r3
    71a0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    71a2:	46c0      	nop			; (mov r8, r8)
    71a4:	4b11      	ldr	r3, [pc, #68]	; (71ec <system_gclk_chan_disable+0x88>)
    71a6:	885b      	ldrh	r3, [r3, #2]
    71a8:	b29b      	uxth	r3, r3
    71aa:	001a      	movs	r2, r3
    71ac:	2380      	movs	r3, #128	; 0x80
    71ae:	01db      	lsls	r3, r3, #7
    71b0:	4013      	ands	r3, r2
    71b2:	d1f7      	bne.n	71a4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    71b4:	4a0d      	ldr	r2, [pc, #52]	; (71ec <system_gclk_chan_disable+0x88>)
    71b6:	68fb      	ldr	r3, [r7, #12]
    71b8:	b2db      	uxtb	r3, r3
    71ba:	1c19      	adds	r1, r3, #0
    71bc:	230f      	movs	r3, #15
    71be:	400b      	ands	r3, r1
    71c0:	b2d9      	uxtb	r1, r3
    71c2:	8853      	ldrh	r3, [r2, #2]
    71c4:	1c08      	adds	r0, r1, #0
    71c6:	210f      	movs	r1, #15
    71c8:	4001      	ands	r1, r0
    71ca:	0208      	lsls	r0, r1, #8
    71cc:	4908      	ldr	r1, [pc, #32]	; (71f0 <system_gclk_chan_disable+0x8c>)
    71ce:	400b      	ands	r3, r1
    71d0:	1c19      	adds	r1, r3, #0
    71d2:	1c03      	adds	r3, r0, #0
    71d4:	430b      	orrs	r3, r1
    71d6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    71d8:	4b07      	ldr	r3, [pc, #28]	; (71f8 <system_gclk_chan_disable+0x94>)
    71da:	4798      	blx	r3
}
    71dc:	46c0      	nop			; (mov r8, r8)
    71de:	46bd      	mov	sp, r7
    71e0:	b004      	add	sp, #16
    71e2:	bd80      	pop	{r7, pc}
    71e4:	00006e09 	.word	0x00006e09
    71e8:	40000c02 	.word	0x40000c02
    71ec:	40000c00 	.word	0x40000c00
    71f0:	fffff0ff 	.word	0xfffff0ff
    71f4:	ffffbfff 	.word	0xffffbfff
    71f8:	00006e1d 	.word	0x00006e1d

000071fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    71fc:	b580      	push	{r7, lr}
    71fe:	b084      	sub	sp, #16
    7200:	af00      	add	r7, sp, #0
    7202:	0002      	movs	r2, r0
    7204:	1dfb      	adds	r3, r7, #7
    7206:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7208:	4b0d      	ldr	r3, [pc, #52]	; (7240 <system_gclk_chan_get_hz+0x44>)
    720a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    720c:	4a0d      	ldr	r2, [pc, #52]	; (7244 <system_gclk_chan_get_hz+0x48>)
    720e:	1dfb      	adds	r3, r7, #7
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7214:	4b0c      	ldr	r3, [pc, #48]	; (7248 <system_gclk_chan_get_hz+0x4c>)
    7216:	885b      	ldrh	r3, [r3, #2]
    7218:	051b      	lsls	r3, r3, #20
    721a:	0f1b      	lsrs	r3, r3, #28
    721c:	b2da      	uxtb	r2, r3
    721e:	230f      	movs	r3, #15
    7220:	18fb      	adds	r3, r7, r3
    7222:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    7224:	4b09      	ldr	r3, [pc, #36]	; (724c <system_gclk_chan_get_hz+0x50>)
    7226:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7228:	230f      	movs	r3, #15
    722a:	18fb      	adds	r3, r7, r3
    722c:	781b      	ldrb	r3, [r3, #0]
    722e:	0018      	movs	r0, r3
    7230:	4b07      	ldr	r3, [pc, #28]	; (7250 <system_gclk_chan_get_hz+0x54>)
    7232:	4798      	blx	r3
    7234:	0003      	movs	r3, r0
}
    7236:	0018      	movs	r0, r3
    7238:	46bd      	mov	sp, r7
    723a:	b004      	add	sp, #16
    723c:	bd80      	pop	{r7, pc}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	00006e09 	.word	0x00006e09
    7244:	40000c02 	.word	0x40000c02
    7248:	40000c00 	.word	0x40000c00
    724c:	00006e1d 	.word	0x00006e1d
    7250:	00007001 	.word	0x00007001

00007254 <system_pinmux_get_group_from_gpio_pin>:
{
    7254:	b580      	push	{r7, lr}
    7256:	b084      	sub	sp, #16
    7258:	af00      	add	r7, sp, #0
    725a:	0002      	movs	r2, r0
    725c:	1dfb      	adds	r3, r7, #7
    725e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7260:	230f      	movs	r3, #15
    7262:	18fb      	adds	r3, r7, r3
    7264:	1dfa      	adds	r2, r7, #7
    7266:	7812      	ldrb	r2, [r2, #0]
    7268:	09d2      	lsrs	r2, r2, #7
    726a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    726c:	230e      	movs	r3, #14
    726e:	18fb      	adds	r3, r7, r3
    7270:	1dfa      	adds	r2, r7, #7
    7272:	7812      	ldrb	r2, [r2, #0]
    7274:	0952      	lsrs	r2, r2, #5
    7276:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7278:	4b0d      	ldr	r3, [pc, #52]	; (72b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    727a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    727c:	230f      	movs	r3, #15
    727e:	18fb      	adds	r3, r7, r3
    7280:	781b      	ldrb	r3, [r3, #0]
    7282:	2b00      	cmp	r3, #0
    7284:	d10f      	bne.n	72a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7286:	230f      	movs	r3, #15
    7288:	18fb      	adds	r3, r7, r3
    728a:	781b      	ldrb	r3, [r3, #0]
    728c:	009b      	lsls	r3, r3, #2
    728e:	2210      	movs	r2, #16
    7290:	4694      	mov	ip, r2
    7292:	44bc      	add	ip, r7
    7294:	4463      	add	r3, ip
    7296:	3b08      	subs	r3, #8
    7298:	681a      	ldr	r2, [r3, #0]
    729a:	230e      	movs	r3, #14
    729c:	18fb      	adds	r3, r7, r3
    729e:	781b      	ldrb	r3, [r3, #0]
    72a0:	01db      	lsls	r3, r3, #7
    72a2:	18d3      	adds	r3, r2, r3
    72a4:	e000      	b.n	72a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    72a6:	2300      	movs	r3, #0
}
    72a8:	0018      	movs	r0, r3
    72aa:	46bd      	mov	sp, r7
    72ac:	b004      	add	sp, #16
    72ae:	bd80      	pop	{r7, pc}
    72b0:	41004400 	.word	0x41004400

000072b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b088      	sub	sp, #32
    72b8:	af00      	add	r7, sp, #0
    72ba:	60f8      	str	r0, [r7, #12]
    72bc:	60b9      	str	r1, [r7, #8]
    72be:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    72c0:	2300      	movs	r3, #0
    72c2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	78db      	ldrb	r3, [r3, #3]
    72c8:	2201      	movs	r2, #1
    72ca:	4053      	eors	r3, r2
    72cc:	b2db      	uxtb	r3, r3
    72ce:	2b00      	cmp	r3, #0
    72d0:	d035      	beq.n	733e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	2b80      	cmp	r3, #128	; 0x80
    72d8:	d00b      	beq.n	72f2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    72da:	69fb      	ldr	r3, [r7, #28]
    72dc:	2280      	movs	r2, #128	; 0x80
    72de:	0252      	lsls	r2, r2, #9
    72e0:	4313      	orrs	r3, r2
    72e2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	781b      	ldrb	r3, [r3, #0]
    72e8:	061b      	lsls	r3, r3, #24
    72ea:	001a      	movs	r2, r3
    72ec:	69fb      	ldr	r3, [r7, #28]
    72ee:	4313      	orrs	r3, r2
    72f0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    72f2:	687b      	ldr	r3, [r7, #4]
    72f4:	785b      	ldrb	r3, [r3, #1]
    72f6:	2b00      	cmp	r3, #0
    72f8:	d003      	beq.n	7302 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    72fe:	2b02      	cmp	r3, #2
    7300:	d110      	bne.n	7324 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7302:	69fb      	ldr	r3, [r7, #28]
    7304:	2280      	movs	r2, #128	; 0x80
    7306:	0292      	lsls	r2, r2, #10
    7308:	4313      	orrs	r3, r2
    730a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	789b      	ldrb	r3, [r3, #2]
    7310:	2b00      	cmp	r3, #0
    7312:	d004      	beq.n	731e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7314:	69fb      	ldr	r3, [r7, #28]
    7316:	2280      	movs	r2, #128	; 0x80
    7318:	02d2      	lsls	r2, r2, #11
    731a:	4313      	orrs	r3, r2
    731c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    731e:	68fb      	ldr	r3, [r7, #12]
    7320:	68ba      	ldr	r2, [r7, #8]
    7322:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7324:	687b      	ldr	r3, [r7, #4]
    7326:	785b      	ldrb	r3, [r3, #1]
    7328:	2b01      	cmp	r3, #1
    732a:	d003      	beq.n	7334 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7330:	2b02      	cmp	r3, #2
    7332:	d107      	bne.n	7344 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7334:	69fb      	ldr	r3, [r7, #28]
    7336:	4a22      	ldr	r2, [pc, #136]	; (73c0 <_system_pinmux_config+0x10c>)
    7338:	4013      	ands	r3, r2
    733a:	61fb      	str	r3, [r7, #28]
    733c:	e002      	b.n	7344 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    733e:	68fb      	ldr	r3, [r7, #12]
    7340:	68ba      	ldr	r2, [r7, #8]
    7342:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7344:	68bb      	ldr	r3, [r7, #8]
    7346:	041b      	lsls	r3, r3, #16
    7348:	0c1b      	lsrs	r3, r3, #16
    734a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    734c:	68bb      	ldr	r3, [r7, #8]
    734e:	0c1b      	lsrs	r3, r3, #16
    7350:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7352:	69ba      	ldr	r2, [r7, #24]
    7354:	69fb      	ldr	r3, [r7, #28]
    7356:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7358:	22a0      	movs	r2, #160	; 0xa0
    735a:	05d2      	lsls	r2, r2, #23
    735c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    735e:	68fb      	ldr	r3, [r7, #12]
    7360:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7362:	697a      	ldr	r2, [r7, #20]
    7364:	69fb      	ldr	r3, [r7, #28]
    7366:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7368:	22d0      	movs	r2, #208	; 0xd0
    736a:	0612      	lsls	r2, r2, #24
    736c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    736e:	68fb      	ldr	r3, [r7, #12]
    7370:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	78db      	ldrb	r3, [r3, #3]
    7376:	2201      	movs	r2, #1
    7378:	4053      	eors	r3, r2
    737a:	b2db      	uxtb	r3, r3
    737c:	2b00      	cmp	r3, #0
    737e:	d01a      	beq.n	73b6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7380:	69fa      	ldr	r2, [r7, #28]
    7382:	2380      	movs	r3, #128	; 0x80
    7384:	02db      	lsls	r3, r3, #11
    7386:	4013      	ands	r3, r2
    7388:	d00a      	beq.n	73a0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	789b      	ldrb	r3, [r3, #2]
    738e:	2b01      	cmp	r3, #1
    7390:	d103      	bne.n	739a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7392:	68fb      	ldr	r3, [r7, #12]
    7394:	68ba      	ldr	r2, [r7, #8]
    7396:	619a      	str	r2, [r3, #24]
    7398:	e002      	b.n	73a0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	68ba      	ldr	r2, [r7, #8]
    739e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	785b      	ldrb	r3, [r3, #1]
    73a4:	2b01      	cmp	r3, #1
    73a6:	d003      	beq.n	73b0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73ac:	2b02      	cmp	r3, #2
    73ae:	d102      	bne.n	73b6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    73b0:	68fb      	ldr	r3, [r7, #12]
    73b2:	68ba      	ldr	r2, [r7, #8]
    73b4:	609a      	str	r2, [r3, #8]
		}
	}
}
    73b6:	46c0      	nop			; (mov r8, r8)
    73b8:	46bd      	mov	sp, r7
    73ba:	b008      	add	sp, #32
    73bc:	bd80      	pop	{r7, pc}
    73be:	46c0      	nop			; (mov r8, r8)
    73c0:	fffbffff 	.word	0xfffbffff

000073c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b084      	sub	sp, #16
    73c8:	af00      	add	r7, sp, #0
    73ca:	0002      	movs	r2, r0
    73cc:	6039      	str	r1, [r7, #0]
    73ce:	1dfb      	adds	r3, r7, #7
    73d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    73d2:	1dfb      	adds	r3, r7, #7
    73d4:	781b      	ldrb	r3, [r3, #0]
    73d6:	0018      	movs	r0, r3
    73d8:	4b0a      	ldr	r3, [pc, #40]	; (7404 <system_pinmux_pin_set_config+0x40>)
    73da:	4798      	blx	r3
    73dc:	0003      	movs	r3, r0
    73de:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    73e0:	1dfb      	adds	r3, r7, #7
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	221f      	movs	r2, #31
    73e6:	4013      	ands	r3, r2
    73e8:	2201      	movs	r2, #1
    73ea:	409a      	lsls	r2, r3
    73ec:	0013      	movs	r3, r2
    73ee:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    73f0:	683a      	ldr	r2, [r7, #0]
    73f2:	68b9      	ldr	r1, [r7, #8]
    73f4:	68fb      	ldr	r3, [r7, #12]
    73f6:	0018      	movs	r0, r3
    73f8:	4b03      	ldr	r3, [pc, #12]	; (7408 <system_pinmux_pin_set_config+0x44>)
    73fa:	4798      	blx	r3
}
    73fc:	46c0      	nop			; (mov r8, r8)
    73fe:	46bd      	mov	sp, r7
    7400:	b004      	add	sp, #16
    7402:	bd80      	pop	{r7, pc}
    7404:	00007255 	.word	0x00007255
    7408:	000072b5 	.word	0x000072b5

0000740c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    740c:	b580      	push	{r7, lr}
    740e:	af00      	add	r7, sp, #0
	return;
    7410:	46c0      	nop			; (mov r8, r8)
}
    7412:	46bd      	mov	sp, r7
    7414:	bd80      	pop	{r7, pc}
	...

00007418 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7418:	b580      	push	{r7, lr}
    741a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    741c:	4b06      	ldr	r3, [pc, #24]	; (7438 <system_init+0x20>)
    741e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7420:	4b06      	ldr	r3, [pc, #24]	; (743c <system_init+0x24>)
    7422:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7424:	4b06      	ldr	r3, [pc, #24]	; (7440 <system_init+0x28>)
    7426:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7428:	4b06      	ldr	r3, [pc, #24]	; (7444 <system_init+0x2c>)
    742a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    742c:	4b06      	ldr	r3, [pc, #24]	; (7448 <system_init+0x30>)
    742e:	4798      	blx	r3
}
    7430:	46c0      	nop			; (mov r8, r8)
    7432:	46bd      	mov	sp, r7
    7434:	bd80      	pop	{r7, pc}
    7436:	46c0      	nop			; (mov r8, r8)
    7438:	00006cd9 	.word	0x00006cd9
    743c:	0000472d 	.word	0x0000472d
    7440:	0000740d 	.word	0x0000740d
    7444:	0000740d 	.word	0x0000740d
    7448:	0000740d 	.word	0x0000740d

0000744c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    744c:	b580      	push	{r7, lr}
    744e:	b082      	sub	sp, #8
    7450:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    7452:	4b2f      	ldr	r3, [pc, #188]	; (7510 <Reset_Handler+0xc4>)
    7454:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    7456:	4b2f      	ldr	r3, [pc, #188]	; (7514 <Reset_Handler+0xc8>)
    7458:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    745a:	687a      	ldr	r2, [r7, #4]
    745c:	683b      	ldr	r3, [r7, #0]
    745e:	429a      	cmp	r2, r3
    7460:	d00c      	beq.n	747c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    7462:	e007      	b.n	7474 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    7464:	683b      	ldr	r3, [r7, #0]
    7466:	1d1a      	adds	r2, r3, #4
    7468:	603a      	str	r2, [r7, #0]
    746a:	687a      	ldr	r2, [r7, #4]
    746c:	1d11      	adds	r1, r2, #4
    746e:	6079      	str	r1, [r7, #4]
    7470:	6812      	ldr	r2, [r2, #0]
    7472:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    7474:	683a      	ldr	r2, [r7, #0]
    7476:	4b28      	ldr	r3, [pc, #160]	; (7518 <Reset_Handler+0xcc>)
    7478:	429a      	cmp	r2, r3
    747a:	d3f3      	bcc.n	7464 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    747c:	4b27      	ldr	r3, [pc, #156]	; (751c <Reset_Handler+0xd0>)
    747e:	603b      	str	r3, [r7, #0]
    7480:	e004      	b.n	748c <Reset_Handler+0x40>
                *pDest++ = 0;
    7482:	683b      	ldr	r3, [r7, #0]
    7484:	1d1a      	adds	r2, r3, #4
    7486:	603a      	str	r2, [r7, #0]
    7488:	2200      	movs	r2, #0
    748a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    748c:	683a      	ldr	r2, [r7, #0]
    748e:	4b24      	ldr	r3, [pc, #144]	; (7520 <Reset_Handler+0xd4>)
    7490:	429a      	cmp	r2, r3
    7492:	d3f6      	bcc.n	7482 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    7494:	4b23      	ldr	r3, [pc, #140]	; (7524 <Reset_Handler+0xd8>)
    7496:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7498:	4b23      	ldr	r3, [pc, #140]	; (7528 <Reset_Handler+0xdc>)
    749a:	687a      	ldr	r2, [r7, #4]
    749c:	21ff      	movs	r1, #255	; 0xff
    749e:	438a      	bics	r2, r1
    74a0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    74a2:	4a22      	ldr	r2, [pc, #136]	; (752c <Reset_Handler+0xe0>)
    74a4:	2390      	movs	r3, #144	; 0x90
    74a6:	005b      	lsls	r3, r3, #1
    74a8:	2102      	movs	r1, #2
    74aa:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    74ac:	4a20      	ldr	r2, [pc, #128]	; (7530 <Reset_Handler+0xe4>)
    74ae:	78d3      	ldrb	r3, [r2, #3]
    74b0:	2103      	movs	r1, #3
    74b2:	438b      	bics	r3, r1
    74b4:	1c19      	adds	r1, r3, #0
    74b6:	2302      	movs	r3, #2
    74b8:	430b      	orrs	r3, r1
    74ba:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    74bc:	4a1c      	ldr	r2, [pc, #112]	; (7530 <Reset_Handler+0xe4>)
    74be:	78d3      	ldrb	r3, [r2, #3]
    74c0:	210c      	movs	r1, #12
    74c2:	438b      	bics	r3, r1
    74c4:	1c19      	adds	r1, r3, #0
    74c6:	2308      	movs	r3, #8
    74c8:	430b      	orrs	r3, r1
    74ca:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    74cc:	4a19      	ldr	r2, [pc, #100]	; (7534 <Reset_Handler+0xe8>)
    74ce:	7b93      	ldrb	r3, [r2, #14]
    74d0:	2130      	movs	r1, #48	; 0x30
    74d2:	438b      	bics	r3, r1
    74d4:	1c19      	adds	r1, r3, #0
    74d6:	2320      	movs	r3, #32
    74d8:	430b      	orrs	r3, r1
    74da:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    74dc:	4a15      	ldr	r2, [pc, #84]	; (7534 <Reset_Handler+0xe8>)
    74de:	7b93      	ldrb	r3, [r2, #14]
    74e0:	210c      	movs	r1, #12
    74e2:	438b      	bics	r3, r1
    74e4:	1c19      	adds	r1, r3, #0
    74e6:	2308      	movs	r3, #8
    74e8:	430b      	orrs	r3, r1
    74ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    74ec:	4a11      	ldr	r2, [pc, #68]	; (7534 <Reset_Handler+0xe8>)
    74ee:	7b93      	ldrb	r3, [r2, #14]
    74f0:	2103      	movs	r1, #3
    74f2:	438b      	bics	r3, r1
    74f4:	1c19      	adds	r1, r3, #0
    74f6:	2302      	movs	r3, #2
    74f8:	430b      	orrs	r3, r1
    74fa:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    74fc:	4a0e      	ldr	r2, [pc, #56]	; (7538 <Reset_Handler+0xec>)
    74fe:	6853      	ldr	r3, [r2, #4]
    7500:	2180      	movs	r1, #128	; 0x80
    7502:	430b      	orrs	r3, r1
    7504:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    7506:	4b0d      	ldr	r3, [pc, #52]	; (753c <Reset_Handler+0xf0>)
    7508:	4798      	blx	r3

        /* Branch to main function */
        main();
    750a:	4b0d      	ldr	r3, [pc, #52]	; (7540 <Reset_Handler+0xf4>)
    750c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    750e:	e7fe      	b.n	750e <Reset_Handler+0xc2>
    7510:	00009750 	.word	0x00009750
    7514:	20000000 	.word	0x20000000
    7518:	20000068 	.word	0x20000068
    751c:	20000068 	.word	0x20000068
    7520:	20000578 	.word	0x20000578
    7524:	00003000 	.word	0x00003000
    7528:	e000ed00 	.word	0xe000ed00
    752c:	41007000 	.word	0x41007000
    7530:	41005000 	.word	0x41005000
    7534:	41004800 	.word	0x41004800
    7538:	41004000 	.word	0x41004000
    753c:	000082e1 	.word	0x000082e1
    7540:	00007dd1 	.word	0x00007dd1

00007544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7544:	b580      	push	{r7, lr}
    7546:	af00      	add	r7, sp, #0
        while (1) {
    7548:	e7fe      	b.n	7548 <Dummy_Handler+0x4>
	...

0000754c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    754c:	b580      	push	{r7, lr}
    754e:	b086      	sub	sp, #24
    7550:	af00      	add	r7, sp, #0
    7552:	60f8      	str	r0, [r7, #12]
    7554:	60b9      	str	r1, [r7, #8]
    7556:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7558:	2300      	movs	r3, #0
    755a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    755c:	68fb      	ldr	r3, [r7, #12]
    755e:	2b00      	cmp	r3, #0
    7560:	d012      	beq.n	7588 <_read+0x3c>
		return -1;
    7562:	2301      	movs	r3, #1
    7564:	425b      	negs	r3, r3
    7566:	e013      	b.n	7590 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    7568:	4b0b      	ldr	r3, [pc, #44]	; (7598 <_read+0x4c>)
    756a:	681a      	ldr	r2, [r3, #0]
    756c:	4b0b      	ldr	r3, [pc, #44]	; (759c <_read+0x50>)
    756e:	681b      	ldr	r3, [r3, #0]
    7570:	68b9      	ldr	r1, [r7, #8]
    7572:	0018      	movs	r0, r3
    7574:	4790      	blx	r2
		ptr++;
    7576:	68bb      	ldr	r3, [r7, #8]
    7578:	3301      	adds	r3, #1
    757a:	60bb      	str	r3, [r7, #8]
		nChars++;
    757c:	697b      	ldr	r3, [r7, #20]
    757e:	3301      	adds	r3, #1
    7580:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	3b01      	subs	r3, #1
    7586:	607b      	str	r3, [r7, #4]
    7588:	687b      	ldr	r3, [r7, #4]
    758a:	2b00      	cmp	r3, #0
    758c:	dcec      	bgt.n	7568 <_read+0x1c>
	}
	return nChars;
    758e:	697b      	ldr	r3, [r7, #20]
}
    7590:	0018      	movs	r0, r3
    7592:	46bd      	mov	sp, r7
    7594:	b006      	add	sp, #24
    7596:	bd80      	pop	{r7, pc}
    7598:	20000524 	.word	0x20000524
    759c:	2000052c 	.word	0x2000052c

000075a0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    75a0:	b580      	push	{r7, lr}
    75a2:	b086      	sub	sp, #24
    75a4:	af00      	add	r7, sp, #0
    75a6:	60f8      	str	r0, [r7, #12]
    75a8:	60b9      	str	r1, [r7, #8]
    75aa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    75ac:	2300      	movs	r3, #0
    75ae:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    75b0:	68fb      	ldr	r3, [r7, #12]
    75b2:	2b01      	cmp	r3, #1
    75b4:	d01d      	beq.n	75f2 <_write+0x52>
    75b6:	68fb      	ldr	r3, [r7, #12]
    75b8:	2b02      	cmp	r3, #2
    75ba:	d01a      	beq.n	75f2 <_write+0x52>
    75bc:	68fb      	ldr	r3, [r7, #12]
    75be:	2b03      	cmp	r3, #3
    75c0:	d017      	beq.n	75f2 <_write+0x52>
		return -1;
    75c2:	2301      	movs	r3, #1
    75c4:	425b      	negs	r3, r3
    75c6:	e018      	b.n	75fa <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    75c8:	4b0e      	ldr	r3, [pc, #56]	; (7604 <_write+0x64>)
    75ca:	681a      	ldr	r2, [r3, #0]
    75cc:	4b0e      	ldr	r3, [pc, #56]	; (7608 <_write+0x68>)
    75ce:	6818      	ldr	r0, [r3, #0]
    75d0:	68bb      	ldr	r3, [r7, #8]
    75d2:	1c59      	adds	r1, r3, #1
    75d4:	60b9      	str	r1, [r7, #8]
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	0019      	movs	r1, r3
    75da:	4790      	blx	r2
    75dc:	1e03      	subs	r3, r0, #0
    75de:	da02      	bge.n	75e6 <_write+0x46>
			return -1;
    75e0:	2301      	movs	r3, #1
    75e2:	425b      	negs	r3, r3
    75e4:	e009      	b.n	75fa <_write+0x5a>
		}
		++nChars;
    75e6:	697b      	ldr	r3, [r7, #20]
    75e8:	3301      	adds	r3, #1
    75ea:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	3b01      	subs	r3, #1
    75f0:	607b      	str	r3, [r7, #4]
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d1e7      	bne.n	75c8 <_write+0x28>
	}
	return nChars;
    75f8:	697b      	ldr	r3, [r7, #20]
}
    75fa:	0018      	movs	r0, r3
    75fc:	46bd      	mov	sp, r7
    75fe:	b006      	add	sp, #24
    7600:	bd80      	pop	{r7, pc}
    7602:	46c0      	nop			; (mov r8, r8)
    7604:	20000528 	.word	0x20000528
    7608:	2000052c 	.word	0x2000052c

0000760c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    760c:	b580      	push	{r7, lr}
    760e:	b084      	sub	sp, #16
    7610:	af00      	add	r7, sp, #0
    7612:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7614:	4b0a      	ldr	r3, [pc, #40]	; (7640 <_sbrk+0x34>)
    7616:	681b      	ldr	r3, [r3, #0]
    7618:	2b00      	cmp	r3, #0
    761a:	d102      	bne.n	7622 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    761c:	4b08      	ldr	r3, [pc, #32]	; (7640 <_sbrk+0x34>)
    761e:	4a09      	ldr	r2, [pc, #36]	; (7644 <_sbrk+0x38>)
    7620:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    7622:	4b07      	ldr	r3, [pc, #28]	; (7640 <_sbrk+0x34>)
    7624:	681b      	ldr	r3, [r3, #0]
    7626:	60fb      	str	r3, [r7, #12]

	heap += incr;
    7628:	4b05      	ldr	r3, [pc, #20]	; (7640 <_sbrk+0x34>)
    762a:	681a      	ldr	r2, [r3, #0]
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	18d2      	adds	r2, r2, r3
    7630:	4b03      	ldr	r3, [pc, #12]	; (7640 <_sbrk+0x34>)
    7632:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    7634:	68fb      	ldr	r3, [r7, #12]
}
    7636:	0018      	movs	r0, r3
    7638:	46bd      	mov	sp, r7
    763a:	b004      	add	sp, #16
    763c:	bd80      	pop	{r7, pc}
    763e:	46c0      	nop			; (mov r8, r8)
    7640:	200000c8 	.word	0x200000c8
    7644:	20002578 	.word	0x20002578

00007648 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    7648:	b580      	push	{r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
	return -1;
    7650:	2301      	movs	r3, #1
    7652:	425b      	negs	r3, r3
}
    7654:	0018      	movs	r0, r3
    7656:	46bd      	mov	sp, r7
    7658:	b002      	add	sp, #8
    765a:	bd80      	pop	{r7, pc}

0000765c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    765c:	b580      	push	{r7, lr}
    765e:	b082      	sub	sp, #8
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
    7664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    7666:	683b      	ldr	r3, [r7, #0]
    7668:	2280      	movs	r2, #128	; 0x80
    766a:	0192      	lsls	r2, r2, #6
    766c:	605a      	str	r2, [r3, #4]

	return 0;
    766e:	2300      	movs	r3, #0
}
    7670:	0018      	movs	r0, r3
    7672:	46bd      	mov	sp, r7
    7674:	b002      	add	sp, #8
    7676:	bd80      	pop	{r7, pc}

00007678 <_isatty>:

extern int _isatty(int file)
{
    7678:	b580      	push	{r7, lr}
    767a:	b082      	sub	sp, #8
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
	return 1;
    7680:	2301      	movs	r3, #1
}
    7682:	0018      	movs	r0, r3
    7684:	46bd      	mov	sp, r7
    7686:	b002      	add	sp, #8
    7688:	bd80      	pop	{r7, pc}

0000768a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    768a:	b580      	push	{r7, lr}
    768c:	b084      	sub	sp, #16
    768e:	af00      	add	r7, sp, #0
    7690:	60f8      	str	r0, [r7, #12]
    7692:	60b9      	str	r1, [r7, #8]
    7694:	607a      	str	r2, [r7, #4]
	return 0;
    7696:	2300      	movs	r3, #0
}
    7698:	0018      	movs	r0, r3
    769a:	46bd      	mov	sp, r7
    769c:	b004      	add	sp, #16
    769e:	bd80      	pop	{r7, pc}

000076a0 <_exit>:

extern void _exit(int status)
{
    76a0:	b580      	push	{r7, lr}
    76a2:	b082      	sub	sp, #8
    76a4:	af00      	add	r7, sp, #0
    76a6:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    76a8:	be00      	bkpt	0x0000
	for (;;);
    76aa:	e7fe      	b.n	76aa <_exit+0xa>

000076ac <system_apb_clock_set_mask>:
{
    76ac:	b580      	push	{r7, lr}
    76ae:	b082      	sub	sp, #8
    76b0:	af00      	add	r7, sp, #0
    76b2:	0002      	movs	r2, r0
    76b4:	6039      	str	r1, [r7, #0]
    76b6:	1dfb      	adds	r3, r7, #7
    76b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    76ba:	1dfb      	adds	r3, r7, #7
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	2b01      	cmp	r3, #1
    76c0:	d00a      	beq.n	76d8 <system_apb_clock_set_mask+0x2c>
    76c2:	2b02      	cmp	r3, #2
    76c4:	d00f      	beq.n	76e6 <system_apb_clock_set_mask+0x3a>
    76c6:	2b00      	cmp	r3, #0
    76c8:	d114      	bne.n	76f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    76ca:	4b0e      	ldr	r3, [pc, #56]	; (7704 <system_apb_clock_set_mask+0x58>)
    76cc:	4a0d      	ldr	r2, [pc, #52]	; (7704 <system_apb_clock_set_mask+0x58>)
    76ce:	6991      	ldr	r1, [r2, #24]
    76d0:	683a      	ldr	r2, [r7, #0]
    76d2:	430a      	orrs	r2, r1
    76d4:	619a      	str	r2, [r3, #24]
			break;
    76d6:	e00f      	b.n	76f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    76d8:	4b0a      	ldr	r3, [pc, #40]	; (7704 <system_apb_clock_set_mask+0x58>)
    76da:	4a0a      	ldr	r2, [pc, #40]	; (7704 <system_apb_clock_set_mask+0x58>)
    76dc:	69d1      	ldr	r1, [r2, #28]
    76de:	683a      	ldr	r2, [r7, #0]
    76e0:	430a      	orrs	r2, r1
    76e2:	61da      	str	r2, [r3, #28]
			break;
    76e4:	e008      	b.n	76f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    76e6:	4b07      	ldr	r3, [pc, #28]	; (7704 <system_apb_clock_set_mask+0x58>)
    76e8:	4a06      	ldr	r2, [pc, #24]	; (7704 <system_apb_clock_set_mask+0x58>)
    76ea:	6a11      	ldr	r1, [r2, #32]
    76ec:	683a      	ldr	r2, [r7, #0]
    76ee:	430a      	orrs	r2, r1
    76f0:	621a      	str	r2, [r3, #32]
			break;
    76f2:	e001      	b.n	76f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    76f4:	2317      	movs	r3, #23
    76f6:	e000      	b.n	76fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    76f8:	2300      	movs	r3, #0
}
    76fa:	0018      	movs	r0, r3
    76fc:	46bd      	mov	sp, r7
    76fe:	b002      	add	sp, #8
    7700:	bd80      	pop	{r7, pc}
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	40000400 	.word	0x40000400

00007708 <system_pinmux_get_group_from_gpio_pin>:
{
    7708:	b580      	push	{r7, lr}
    770a:	b084      	sub	sp, #16
    770c:	af00      	add	r7, sp, #0
    770e:	0002      	movs	r2, r0
    7710:	1dfb      	adds	r3, r7, #7
    7712:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7714:	230f      	movs	r3, #15
    7716:	18fb      	adds	r3, r7, r3
    7718:	1dfa      	adds	r2, r7, #7
    771a:	7812      	ldrb	r2, [r2, #0]
    771c:	09d2      	lsrs	r2, r2, #7
    771e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7720:	230e      	movs	r3, #14
    7722:	18fb      	adds	r3, r7, r3
    7724:	1dfa      	adds	r2, r7, #7
    7726:	7812      	ldrb	r2, [r2, #0]
    7728:	0952      	lsrs	r2, r2, #5
    772a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    772c:	4b0d      	ldr	r3, [pc, #52]	; (7764 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    772e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7730:	230f      	movs	r3, #15
    7732:	18fb      	adds	r3, r7, r3
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	2b00      	cmp	r3, #0
    7738:	d10f      	bne.n	775a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    773a:	230f      	movs	r3, #15
    773c:	18fb      	adds	r3, r7, r3
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	009b      	lsls	r3, r3, #2
    7742:	2210      	movs	r2, #16
    7744:	4694      	mov	ip, r2
    7746:	44bc      	add	ip, r7
    7748:	4463      	add	r3, ip
    774a:	3b08      	subs	r3, #8
    774c:	681a      	ldr	r2, [r3, #0]
    774e:	230e      	movs	r3, #14
    7750:	18fb      	adds	r3, r7, r3
    7752:	781b      	ldrb	r3, [r3, #0]
    7754:	01db      	lsls	r3, r3, #7
    7756:	18d3      	adds	r3, r2, r3
    7758:	e000      	b.n	775c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    775a:	2300      	movs	r3, #0
}
    775c:	0018      	movs	r0, r3
    775e:	46bd      	mov	sp, r7
    7760:	b004      	add	sp, #16
    7762:	bd80      	pop	{r7, pc}
    7764:	41004400 	.word	0x41004400

00007768 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    7768:	b580      	push	{r7, lr}
    776a:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    776c:	2102      	movs	r1, #2
    776e:	2001      	movs	r0, #1
    7770:	4b02      	ldr	r3, [pc, #8]	; (777c <dsu_crc32_init+0x14>)
    7772:	4798      	blx	r3
#endif

}
    7774:	46c0      	nop			; (mov r8, r8)
    7776:	46bd      	mov	sp, r7
    7778:	bd80      	pop	{r7, pc}
    777a:	46c0      	nop			; (mov r8, r8)
    777c:	000076ad 	.word	0x000076ad

00007780 <port_get_group_from_gpio_pin>:
{
    7780:	b580      	push	{r7, lr}
    7782:	b082      	sub	sp, #8
    7784:	af00      	add	r7, sp, #0
    7786:	0002      	movs	r2, r0
    7788:	1dfb      	adds	r3, r7, #7
    778a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    778c:	1dfb      	adds	r3, r7, #7
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	0018      	movs	r0, r3
    7792:	4b03      	ldr	r3, [pc, #12]	; (77a0 <port_get_group_from_gpio_pin+0x20>)
    7794:	4798      	blx	r3
    7796:	0003      	movs	r3, r0
}
    7798:	0018      	movs	r0, r3
    779a:	46bd      	mov	sp, r7
    779c:	b002      	add	sp, #8
    779e:	bd80      	pop	{r7, pc}
    77a0:	00007709 	.word	0x00007709

000077a4 <port_get_config_defaults>:
{
    77a4:	b580      	push	{r7, lr}
    77a6:	b082      	sub	sp, #8
    77a8:	af00      	add	r7, sp, #0
    77aa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    77ac:	687b      	ldr	r3, [r7, #4]
    77ae:	2200      	movs	r2, #0
    77b0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	2201      	movs	r2, #1
    77b6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	2200      	movs	r2, #0
    77bc:	709a      	strb	r2, [r3, #2]
}
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	46bd      	mov	sp, r7
    77c2:	b002      	add	sp, #8
    77c4:	bd80      	pop	{r7, pc}
	...

000077c8 <port_pin_get_input_level>:
{
    77c8:	b580      	push	{r7, lr}
    77ca:	b084      	sub	sp, #16
    77cc:	af00      	add	r7, sp, #0
    77ce:	0002      	movs	r2, r0
    77d0:	1dfb      	adds	r3, r7, #7
    77d2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    77d4:	1dfb      	adds	r3, r7, #7
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	0018      	movs	r0, r3
    77da:	4b0b      	ldr	r3, [pc, #44]	; (7808 <port_pin_get_input_level+0x40>)
    77dc:	4798      	blx	r3
    77de:	0003      	movs	r3, r0
    77e0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    77e2:	1dfb      	adds	r3, r7, #7
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	221f      	movs	r2, #31
    77e8:	4013      	ands	r3, r2
    77ea:	2201      	movs	r2, #1
    77ec:	409a      	lsls	r2, r3
    77ee:	0013      	movs	r3, r2
    77f0:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    77f2:	68fb      	ldr	r3, [r7, #12]
    77f4:	6a1b      	ldr	r3, [r3, #32]
    77f6:	68ba      	ldr	r2, [r7, #8]
    77f8:	4013      	ands	r3, r2
    77fa:	1e5a      	subs	r2, r3, #1
    77fc:	4193      	sbcs	r3, r2
    77fe:	b2db      	uxtb	r3, r3
}
    7800:	0018      	movs	r0, r3
    7802:	46bd      	mov	sp, r7
    7804:	b004      	add	sp, #16
    7806:	bd80      	pop	{r7, pc}
    7808:	00007781 	.word	0x00007781

0000780c <port_pin_set_output_level>:
{
    780c:	b580      	push	{r7, lr}
    780e:	b084      	sub	sp, #16
    7810:	af00      	add	r7, sp, #0
    7812:	0002      	movs	r2, r0
    7814:	1dfb      	adds	r3, r7, #7
    7816:	701a      	strb	r2, [r3, #0]
    7818:	1dbb      	adds	r3, r7, #6
    781a:	1c0a      	adds	r2, r1, #0
    781c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    781e:	1dfb      	adds	r3, r7, #7
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	0018      	movs	r0, r3
    7824:	4b0d      	ldr	r3, [pc, #52]	; (785c <port_pin_set_output_level+0x50>)
    7826:	4798      	blx	r3
    7828:	0003      	movs	r3, r0
    782a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    782c:	1dfb      	adds	r3, r7, #7
    782e:	781b      	ldrb	r3, [r3, #0]
    7830:	221f      	movs	r2, #31
    7832:	4013      	ands	r3, r2
    7834:	2201      	movs	r2, #1
    7836:	409a      	lsls	r2, r3
    7838:	0013      	movs	r3, r2
    783a:	60bb      	str	r3, [r7, #8]
	if (level) {
    783c:	1dbb      	adds	r3, r7, #6
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	2b00      	cmp	r3, #0
    7842:	d003      	beq.n	784c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7844:	68fb      	ldr	r3, [r7, #12]
    7846:	68ba      	ldr	r2, [r7, #8]
    7848:	619a      	str	r2, [r3, #24]
}
    784a:	e002      	b.n	7852 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    784c:	68fb      	ldr	r3, [r7, #12]
    784e:	68ba      	ldr	r2, [r7, #8]
    7850:	615a      	str	r2, [r3, #20]
}
    7852:	46c0      	nop			; (mov r8, r8)
    7854:	46bd      	mov	sp, r7
    7856:	b004      	add	sp, #16
    7858:	bd80      	pop	{r7, pc}
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	00007781 	.word	0x00007781

00007860 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    7860:	b580      	push	{r7, lr}
    7862:	b082      	sub	sp, #8
    7864:	af00      	add	r7, sp, #0
    7866:	0002      	movs	r2, r0
    7868:	1dfb      	adds	r3, r7, #7
    786a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    786c:	4b06      	ldr	r3, [pc, #24]	; (7888 <system_interrupt_enable+0x28>)
    786e:	1dfa      	adds	r2, r7, #7
    7870:	7812      	ldrb	r2, [r2, #0]
    7872:	0011      	movs	r1, r2
    7874:	221f      	movs	r2, #31
    7876:	400a      	ands	r2, r1
    7878:	2101      	movs	r1, #1
    787a:	4091      	lsls	r1, r2
    787c:	000a      	movs	r2, r1
    787e:	601a      	str	r2, [r3, #0]
}
    7880:	46c0      	nop			; (mov r8, r8)
    7882:	46bd      	mov	sp, r7
    7884:	b002      	add	sp, #8
    7886:	bd80      	pop	{r7, pc}
    7888:	e000e100 	.word	0xe000e100

0000788c <spi_is_syncing>:
{
    788c:	b580      	push	{r7, lr}
    788e:	b084      	sub	sp, #16
    7890:	af00      	add	r7, sp, #0
    7892:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	681b      	ldr	r3, [r3, #0]
    7898:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    789a:	68fb      	ldr	r3, [r7, #12]
    789c:	69db      	ldr	r3, [r3, #28]
    789e:	1e5a      	subs	r2, r3, #1
    78a0:	4193      	sbcs	r3, r2
    78a2:	b2db      	uxtb	r3, r3
}
    78a4:	0018      	movs	r0, r3
    78a6:	46bd      	mov	sp, r7
    78a8:	b004      	add	sp, #16
    78aa:	bd80      	pop	{r7, pc}

000078ac <spi_get_config_defaults>:
{
    78ac:	b580      	push	{r7, lr}
    78ae:	b082      	sub	sp, #8
    78b0:	af00      	add	r7, sp, #0
    78b2:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	2201      	movs	r2, #1
    78b8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	2200      	movs	r2, #0
    78be:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    78c0:	687b      	ldr	r3, [r7, #4]
    78c2:	2200      	movs	r2, #0
    78c4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	22c0      	movs	r2, #192	; 0xc0
    78ca:	0392      	lsls	r2, r2, #14
    78cc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	2200      	movs	r2, #0
    78d2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	2200      	movs	r2, #0
    78d8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	2201      	movs	r2, #1
    78de:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	2201      	movs	r2, #1
    78e4:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	2200      	movs	r2, #0
    78ea:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	2224      	movs	r2, #36	; 0x24
    78f0:	2100      	movs	r1, #0
    78f2:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	3318      	adds	r3, #24
    78f8:	220c      	movs	r2, #12
    78fa:	2100      	movs	r1, #0
    78fc:	0018      	movs	r0, r3
    78fe:	4b0a      	ldr	r3, [pc, #40]	; (7928 <spi_get_config_defaults+0x7c>)
    7900:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    7902:	687b      	ldr	r3, [r7, #4]
    7904:	4a09      	ldr	r2, [pc, #36]	; (792c <spi_get_config_defaults+0x80>)
    7906:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	2200      	movs	r2, #0
    790c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    790e:	687b      	ldr	r3, [r7, #4]
    7910:	2200      	movs	r2, #0
    7912:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	2200      	movs	r2, #0
    7918:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    791a:	687b      	ldr	r3, [r7, #4]
    791c:	2200      	movs	r2, #0
    791e:	635a      	str	r2, [r3, #52]	; 0x34
};
    7920:	46c0      	nop			; (mov r8, r8)
    7922:	46bd      	mov	sp, r7
    7924:	b002      	add	sp, #8
    7926:	bd80      	pop	{r7, pc}
    7928:	00008329 	.word	0x00008329
    792c:	000186a0 	.word	0x000186a0

00007930 <spi_enable>:
{
    7930:	b580      	push	{r7, lr}
    7932:	b084      	sub	sp, #16
    7934:	af00      	add	r7, sp, #0
    7936:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	681b      	ldr	r3, [r3, #0]
    793c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	681b      	ldr	r3, [r3, #0]
    7942:	0018      	movs	r0, r3
    7944:	4b0b      	ldr	r3, [pc, #44]	; (7974 <spi_enable+0x44>)
    7946:	4798      	blx	r3
    7948:	0003      	movs	r3, r0
    794a:	0018      	movs	r0, r3
    794c:	4b0a      	ldr	r3, [pc, #40]	; (7978 <spi_enable+0x48>)
    794e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    7950:	46c0      	nop			; (mov r8, r8)
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	0018      	movs	r0, r3
    7956:	4b09      	ldr	r3, [pc, #36]	; (797c <spi_enable+0x4c>)
    7958:	4798      	blx	r3
    795a:	1e03      	subs	r3, r0, #0
    795c:	d1f9      	bne.n	7952 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    795e:	68fb      	ldr	r3, [r7, #12]
    7960:	681b      	ldr	r3, [r3, #0]
    7962:	2202      	movs	r2, #2
    7964:	431a      	orrs	r2, r3
    7966:	68fb      	ldr	r3, [r7, #12]
    7968:	601a      	str	r2, [r3, #0]
}
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	46bd      	mov	sp, r7
    796e:	b004      	add	sp, #16
    7970:	bd80      	pop	{r7, pc}
    7972:	46c0      	nop			; (mov r8, r8)
    7974:	00004e19 	.word	0x00004e19
    7978:	00007861 	.word	0x00007861
    797c:	0000788d 	.word	0x0000788d

00007980 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    7980:	b580      	push	{r7, lr}
    7982:	b086      	sub	sp, #24
    7984:	af00      	add	r7, sp, #0
    7986:	60f8      	str	r0, [r7, #12]
    7988:	60b9      	str	r1, [r7, #8]
    798a:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	781a      	ldrb	r2, [r3, #0]
    7990:	68fb      	ldr	r3, [r7, #12]
    7992:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	785a      	ldrb	r2, [r3, #1]
    7998:	68fb      	ldr	r3, [r7, #12]
    799a:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    799c:	68fb      	ldr	r3, [r7, #12]
    799e:	68ba      	ldr	r2, [r7, #8]
    79a0:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    79a2:	2314      	movs	r3, #20
    79a4:	18fb      	adds	r3, r7, r3
    79a6:	0018      	movs	r0, r3
    79a8:	4b0c      	ldr	r3, [pc, #48]	; (79dc <at25dfx_chip_init+0x5c>)
    79aa:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    79ac:	2314      	movs	r3, #20
    79ae:	18fb      	adds	r3, r7, r3
    79b0:	2201      	movs	r2, #1
    79b2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    79b4:	68fb      	ldr	r3, [r7, #12]
    79b6:	795b      	ldrb	r3, [r3, #5]
    79b8:	2214      	movs	r2, #20
    79ba:	18ba      	adds	r2, r7, r2
    79bc:	0011      	movs	r1, r2
    79be:	0018      	movs	r0, r3
    79c0:	4b07      	ldr	r3, [pc, #28]	; (79e0 <at25dfx_chip_init+0x60>)
    79c2:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    79c4:	68fb      	ldr	r3, [r7, #12]
    79c6:	795b      	ldrb	r3, [r3, #5]
    79c8:	2101      	movs	r1, #1
    79ca:	0018      	movs	r0, r3
    79cc:	4b05      	ldr	r3, [pc, #20]	; (79e4 <at25dfx_chip_init+0x64>)
    79ce:	4798      	blx	r3

	return STATUS_OK;
    79d0:	2300      	movs	r3, #0
}
    79d2:	0018      	movs	r0, r3
    79d4:	46bd      	mov	sp, r7
    79d6:	b006      	add	sp, #24
    79d8:	bd80      	pop	{r7, pc}
    79da:	46c0      	nop			; (mov r8, r8)
    79dc:	000077a5 	.word	0x000077a5
    79e0:	000046cd 	.word	0x000046cd
    79e4:	0000780d 	.word	0x0000780d

000079e8 <nvm_get_config_defaults>:
{
    79e8:	b580      	push	{r7, lr}
    79ea:	b082      	sub	sp, #8
    79ec:	af00      	add	r7, sp, #0
    79ee:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	2200      	movs	r2, #0
    79f4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    79f6:	687b      	ldr	r3, [r7, #4]
    79f8:	2201      	movs	r2, #1
    79fa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    79fc:	4b08      	ldr	r3, [pc, #32]	; (7a20 <nvm_get_config_defaults+0x38>)
    79fe:	685b      	ldr	r3, [r3, #4]
    7a00:	06db      	lsls	r3, r3, #27
    7a02:	0f1b      	lsrs	r3, r3, #28
    7a04:	b2db      	uxtb	r3, r3
    7a06:	001a      	movs	r2, r3
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	2200      	movs	r2, #0
    7a10:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	2200      	movs	r2, #0
    7a16:	711a      	strb	r2, [r3, #4]
}
    7a18:	46c0      	nop			; (mov r8, r8)
    7a1a:	46bd      	mov	sp, r7
    7a1c:	b002      	add	sp, #8
    7a1e:	bd80      	pop	{r7, pc}
    7a20:	41004000 	.word	0x41004000

00007a24 <usart_is_syncing>:
{
    7a24:	b580      	push	{r7, lr}
    7a26:	b084      	sub	sp, #16
    7a28:	af00      	add	r7, sp, #0
    7a2a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	681b      	ldr	r3, [r3, #0]
    7a30:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    7a32:	68fb      	ldr	r3, [r7, #12]
    7a34:	69db      	ldr	r3, [r3, #28]
    7a36:	1e5a      	subs	r2, r3, #1
    7a38:	4193      	sbcs	r3, r2
    7a3a:	b2db      	uxtb	r3, r3
}
    7a3c:	0018      	movs	r0, r3
    7a3e:	46bd      	mov	sp, r7
    7a40:	b004      	add	sp, #16
    7a42:	bd80      	pop	{r7, pc}

00007a44 <_usart_wait_for_sync>:
{
    7a44:	b580      	push	{r7, lr}
    7a46:	b082      	sub	sp, #8
    7a48:	af00      	add	r7, sp, #0
    7a4a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    7a4c:	46c0      	nop			; (mov r8, r8)
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	0018      	movs	r0, r3
    7a52:	4b04      	ldr	r3, [pc, #16]	; (7a64 <_usart_wait_for_sync+0x20>)
    7a54:	4798      	blx	r3
    7a56:	1e03      	subs	r3, r0, #0
    7a58:	d1f9      	bne.n	7a4e <_usart_wait_for_sync+0xa>
}
    7a5a:	46c0      	nop			; (mov r8, r8)
    7a5c:	46bd      	mov	sp, r7
    7a5e:	b002      	add	sp, #8
    7a60:	bd80      	pop	{r7, pc}
    7a62:	46c0      	nop			; (mov r8, r8)
    7a64:	00007a25 	.word	0x00007a25

00007a68 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b082      	sub	sp, #8
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	2280      	movs	r2, #128	; 0x80
    7a74:	05d2      	lsls	r2, r2, #23
    7a76:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	2200      	movs	r2, #0
    7a7c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	22ff      	movs	r2, #255	; 0xff
    7a82:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	2200      	movs	r2, #0
    7a88:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	2200      	movs	r2, #0
    7a8e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	2296      	movs	r2, #150	; 0x96
    7a94:	0192      	lsls	r2, r2, #6
    7a96:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	2224      	movs	r2, #36	; 0x24
    7a9c:	2101      	movs	r1, #1
    7a9e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	2225      	movs	r2, #37	; 0x25
    7aa4:	2101      	movs	r1, #1
    7aa6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	2226      	movs	r2, #38	; 0x26
    7aac:	2100      	movs	r1, #0
    7aae:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	2227      	movs	r2, #39	; 0x27
    7ab4:	2100      	movs	r1, #0
    7ab6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	2200      	movs	r2, #0
    7abc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    7abe:	687b      	ldr	r3, [r7, #4]
    7ac0:	2288      	movs	r2, #136	; 0x88
    7ac2:	0352      	lsls	r2, r2, #13
    7ac4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	222c      	movs	r2, #44	; 0x2c
    7aca:	2100      	movs	r1, #0
    7acc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	222d      	movs	r2, #45	; 0x2d
    7ad2:	2100      	movs	r1, #0
    7ad4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	2200      	movs	r2, #0
    7ada:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    7adc:	687b      	ldr	r3, [r7, #4]
    7ade:	2200      	movs	r2, #0
    7ae0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    7ae2:	687b      	ldr	r3, [r7, #4]
    7ae4:	2200      	movs	r2, #0
    7ae6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	2200      	movs	r2, #0
    7aec:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7aee:	687b      	ldr	r3, [r7, #4]
    7af0:	2200      	movs	r2, #0
    7af2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	2200      	movs	r2, #0
    7af8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	2200      	movs	r2, #0
    7afe:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7b00:	687b      	ldr	r3, [r7, #4]
    7b02:	2200      	movs	r2, #0
    7b04:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	2200      	movs	r2, #0
    7b0a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	2200      	movs	r2, #0
    7b10:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    7b12:	687b      	ldr	r3, [r7, #4]
    7b14:	2213      	movs	r2, #19
    7b16:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7b18:	687b      	ldr	r3, [r7, #4]
    7b1a:	2200      	movs	r2, #0
    7b1c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    7b1e:	46c0      	nop			; (mov r8, r8)
    7b20:	46bd      	mov	sp, r7
    7b22:	b002      	add	sp, #8
    7b24:	bd80      	pop	{r7, pc}
	...

00007b28 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	b084      	sub	sp, #16
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	681b      	ldr	r3, [r3, #0]
    7b34:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7b36:	687b      	ldr	r3, [r7, #4]
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	0018      	movs	r0, r3
    7b3c:	4b09      	ldr	r3, [pc, #36]	; (7b64 <usart_enable+0x3c>)
    7b3e:	4798      	blx	r3
    7b40:	0003      	movs	r3, r0
    7b42:	0018      	movs	r0, r3
    7b44:	4b08      	ldr	r3, [pc, #32]	; (7b68 <usart_enable+0x40>)
    7b46:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7b48:	687b      	ldr	r3, [r7, #4]
    7b4a:	0018      	movs	r0, r3
    7b4c:	4b07      	ldr	r3, [pc, #28]	; (7b6c <usart_enable+0x44>)
    7b4e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7b50:	68fb      	ldr	r3, [r7, #12]
    7b52:	681b      	ldr	r3, [r3, #0]
    7b54:	2202      	movs	r2, #2
    7b56:	431a      	orrs	r2, r3
    7b58:	68fb      	ldr	r3, [r7, #12]
    7b5a:	601a      	str	r2, [r3, #0]
}
    7b5c:	46c0      	nop			; (mov r8, r8)
    7b5e:	46bd      	mov	sp, r7
    7b60:	b004      	add	sp, #16
    7b62:	bd80      	pop	{r7, pc}
    7b64:	00004e19 	.word	0x00004e19
    7b68:	00007861 	.word	0x00007861
    7b6c:	00007a45 	.word	0x00007a45

00007b70 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7b70:	b580      	push	{r7, lr}
    7b72:	b084      	sub	sp, #16
    7b74:	af00      	add	r7, sp, #0
    7b76:	60f8      	str	r0, [r7, #12]
    7b78:	60b9      	str	r1, [r7, #8]
    7b7a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7b7c:	687a      	ldr	r2, [r7, #4]
    7b7e:	68b9      	ldr	r1, [r7, #8]
    7b80:	68fb      	ldr	r3, [r7, #12]
    7b82:	0018      	movs	r0, r3
    7b84:	4b05      	ldr	r3, [pc, #20]	; (7b9c <usart_serial_init+0x2c>)
    7b86:	4798      	blx	r3
    7b88:	1e03      	subs	r3, r0, #0
    7b8a:	d101      	bne.n	7b90 <usart_serial_init+0x20>
		return true;
    7b8c:	2301      	movs	r3, #1
    7b8e:	e000      	b.n	7b92 <usart_serial_init+0x22>
	}
	else {
		return false;
    7b90:	2300      	movs	r3, #0
	}
}
    7b92:	0018      	movs	r0, r3
    7b94:	46bd      	mov	sp, r7
    7b96:	b004      	add	sp, #16
    7b98:	bd80      	pop	{r7, pc}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	00006221 	.word	0x00006221

00007ba0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    7ba0:	b580      	push	{r7, lr}
    7ba2:	b082      	sub	sp, #8
    7ba4:	af00      	add	r7, sp, #0
    7ba6:	6078      	str	r0, [r7, #4]
    7ba8:	000a      	movs	r2, r1
    7baa:	1cfb      	adds	r3, r7, #3
    7bac:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    7bae:	46c0      	nop			; (mov r8, r8)
    7bb0:	1cfb      	adds	r3, r7, #3
    7bb2:	781b      	ldrb	r3, [r3, #0]
    7bb4:	b29a      	uxth	r2, r3
    7bb6:	687b      	ldr	r3, [r7, #4]
    7bb8:	0011      	movs	r1, r2
    7bba:	0018      	movs	r0, r3
    7bbc:	4b04      	ldr	r3, [pc, #16]	; (7bd0 <usart_serial_putchar+0x30>)
    7bbe:	4798      	blx	r3
    7bc0:	1e03      	subs	r3, r0, #0
    7bc2:	d1f5      	bne.n	7bb0 <usart_serial_putchar+0x10>

	return STATUS_OK;
    7bc4:	2300      	movs	r3, #0
}
    7bc6:	0018      	movs	r0, r3
    7bc8:	46bd      	mov	sp, r7
    7bca:	b002      	add	sp, #8
    7bcc:	bd80      	pop	{r7, pc}
    7bce:	46c0      	nop			; (mov r8, r8)
    7bd0:	00006495 	.word	0x00006495

00007bd4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b084      	sub	sp, #16
    7bd8:	af00      	add	r7, sp, #0
    7bda:	6078      	str	r0, [r7, #4]
    7bdc:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    7bde:	230e      	movs	r3, #14
    7be0:	18fb      	adds	r3, r7, r3
    7be2:	2200      	movs	r2, #0
    7be4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7be6:	46c0      	nop			; (mov r8, r8)
    7be8:	230e      	movs	r3, #14
    7bea:	18fa      	adds	r2, r7, r3
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	0011      	movs	r1, r2
    7bf0:	0018      	movs	r0, r3
    7bf2:	4b07      	ldr	r3, [pc, #28]	; (7c10 <usart_serial_getchar+0x3c>)
    7bf4:	4798      	blx	r3
    7bf6:	1e03      	subs	r3, r0, #0
    7bf8:	d1f6      	bne.n	7be8 <usart_serial_getchar+0x14>

	*c = temp;
    7bfa:	230e      	movs	r3, #14
    7bfc:	18fb      	adds	r3, r7, r3
    7bfe:	881b      	ldrh	r3, [r3, #0]
    7c00:	b2da      	uxtb	r2, r3
    7c02:	683b      	ldr	r3, [r7, #0]
    7c04:	701a      	strb	r2, [r3, #0]
}
    7c06:	46c0      	nop			; (mov r8, r8)
    7c08:	46bd      	mov	sp, r7
    7c0a:	b004      	add	sp, #16
    7c0c:	bd80      	pop	{r7, pc}
    7c0e:	46c0      	nop			; (mov r8, r8)
    7c10:	000064f9 	.word	0x000064f9

00007c14 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b084      	sub	sp, #16
    7c18:	af00      	add	r7, sp, #0
    7c1a:	60f8      	str	r0, [r7, #12]
    7c1c:	60b9      	str	r1, [r7, #8]
    7c1e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    7c20:	4b10      	ldr	r3, [pc, #64]	; (7c64 <stdio_serial_init+0x50>)
    7c22:	68fa      	ldr	r2, [r7, #12]
    7c24:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7c26:	4b10      	ldr	r3, [pc, #64]	; (7c68 <stdio_serial_init+0x54>)
    7c28:	4a10      	ldr	r2, [pc, #64]	; (7c6c <stdio_serial_init+0x58>)
    7c2a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7c2c:	4b10      	ldr	r3, [pc, #64]	; (7c70 <stdio_serial_init+0x5c>)
    7c2e:	4a11      	ldr	r2, [pc, #68]	; (7c74 <stdio_serial_init+0x60>)
    7c30:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    7c32:	687a      	ldr	r2, [r7, #4]
    7c34:	68b9      	ldr	r1, [r7, #8]
    7c36:	68fb      	ldr	r3, [r7, #12]
    7c38:	0018      	movs	r0, r3
    7c3a:	4b0f      	ldr	r3, [pc, #60]	; (7c78 <stdio_serial_init+0x64>)
    7c3c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7c3e:	4b0f      	ldr	r3, [pc, #60]	; (7c7c <stdio_serial_init+0x68>)
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	689b      	ldr	r3, [r3, #8]
    7c44:	2100      	movs	r1, #0
    7c46:	0018      	movs	r0, r3
    7c48:	4b0d      	ldr	r3, [pc, #52]	; (7c80 <stdio_serial_init+0x6c>)
    7c4a:	4798      	blx	r3
	setbuf(stdin, NULL);
    7c4c:	4b0b      	ldr	r3, [pc, #44]	; (7c7c <stdio_serial_init+0x68>)
    7c4e:	681b      	ldr	r3, [r3, #0]
    7c50:	685b      	ldr	r3, [r3, #4]
    7c52:	2100      	movs	r1, #0
    7c54:	0018      	movs	r0, r3
    7c56:	4b0a      	ldr	r3, [pc, #40]	; (7c80 <stdio_serial_init+0x6c>)
    7c58:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    7c5a:	46c0      	nop			; (mov r8, r8)
    7c5c:	46bd      	mov	sp, r7
    7c5e:	b004      	add	sp, #16
    7c60:	bd80      	pop	{r7, pc}
    7c62:	46c0      	nop			; (mov r8, r8)
    7c64:	2000052c 	.word	0x2000052c
    7c68:	20000528 	.word	0x20000528
    7c6c:	00007ba1 	.word	0x00007ba1
    7c70:	20000524 	.word	0x20000524
    7c74:	00007bd5 	.word	0x00007bd5
    7c78:	00007b71 	.word	0x00007b71
    7c7c:	20000004 	.word	0x20000004
    7c80:	00008441 	.word	0x00008441

00007c84 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = { 0 };
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    7c84:	b590      	push	{r4, r7, lr}
    7c86:	b091      	sub	sp, #68	; 0x44
    7c88:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    7c8a:	1d3b      	adds	r3, r7, #4
    7c8c:	0018      	movs	r0, r3
    7c8e:	4b1d      	ldr	r3, [pc, #116]	; (7d04 <at25dfx_init+0x80>)
    7c90:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    7c92:	1d3b      	adds	r3, r7, #4
    7c94:	4a1c      	ldr	r2, [pc, #112]	; (7d08 <at25dfx_init+0x84>)
    7c96:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    7c98:	1d3b      	adds	r3, r7, #4
    7c9a:	2280      	movs	r2, #128	; 0x80
    7c9c:	0252      	lsls	r2, r2, #9
    7c9e:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    7ca0:	1d3b      	adds	r3, r7, #4
    7ca2:	4a1a      	ldr	r2, [pc, #104]	; (7d0c <at25dfx_init+0x88>)
    7ca4:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    7ca6:	1d3b      	adds	r3, r7, #4
    7ca8:	2201      	movs	r2, #1
    7caa:	4252      	negs	r2, r2
    7cac:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    7cae:	1d3b      	adds	r3, r7, #4
    7cb0:	4a17      	ldr	r2, [pc, #92]	; (7d10 <at25dfx_init+0x8c>)
    7cb2:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    7cb4:	1d3b      	adds	r3, r7, #4
    7cb6:	4a17      	ldr	r2, [pc, #92]	; (7d14 <at25dfx_init+0x90>)
    7cb8:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    7cba:	233f      	movs	r3, #63	; 0x3f
    7cbc:	18fc      	adds	r4, r7, r3
    7cbe:	1d3a      	adds	r2, r7, #4
    7cc0:	4915      	ldr	r1, [pc, #84]	; (7d18 <at25dfx_init+0x94>)
    7cc2:	4b16      	ldr	r3, [pc, #88]	; (7d1c <at25dfx_init+0x98>)
    7cc4:	0018      	movs	r0, r3
    7cc6:	4b16      	ldr	r3, [pc, #88]	; (7d20 <at25dfx_init+0x9c>)
    7cc8:	4798      	blx	r3
    7cca:	0003      	movs	r3, r0
    7ccc:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    7cce:	4b13      	ldr	r3, [pc, #76]	; (7d1c <at25dfx_init+0x98>)
    7cd0:	0018      	movs	r0, r3
    7cd2:	4b14      	ldr	r3, [pc, #80]	; (7d24 <at25dfx_init+0xa0>)
    7cd4:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    7cd6:	233c      	movs	r3, #60	; 0x3c
    7cd8:	18fb      	adds	r3, r7, r3
    7cda:	2204      	movs	r2, #4
    7cdc:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PIN_PA07; // AT25DFX_CS;
    7cde:	233c      	movs	r3, #60	; 0x3c
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	2207      	movs	r2, #7
    7ce4:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    7ce6:	233f      	movs	r3, #63	; 0x3f
    7ce8:	18fc      	adds	r4, r7, r3
    7cea:	233c      	movs	r3, #60	; 0x3c
    7cec:	18fa      	adds	r2, r7, r3
    7cee:	490b      	ldr	r1, [pc, #44]	; (7d1c <at25dfx_init+0x98>)
    7cf0:	4b0d      	ldr	r3, [pc, #52]	; (7d28 <at25dfx_init+0xa4>)
    7cf2:	0018      	movs	r0, r3
    7cf4:	4b0d      	ldr	r3, [pc, #52]	; (7d2c <at25dfx_init+0xa8>)
    7cf6:	4798      	blx	r3
    7cf8:	0003      	movs	r3, r0
    7cfa:	7023      	strb	r3, [r4, #0]
}
    7cfc:	46c0      	nop			; (mov r8, r8)
    7cfe:	46bd      	mov	sp, r7
    7d00:	b011      	add	sp, #68	; 0x44
    7d02:	bd90      	pop	{r4, r7, pc}
    7d04:	000078ad 	.word	0x000078ad
    7d08:	0001d4c0 	.word	0x0001d4c0
    7d0c:	00100002 	.word	0x00100002
    7d10:	00120002 	.word	0x00120002
    7d14:	00130002 	.word	0x00130002
    7d18:	42000c00 	.word	0x42000c00
    7d1c:	20000538 	.word	0x20000538
    7d20:	0000535d 	.word	0x0000535d
    7d24:	00007931 	.word	0x00007931
    7d28:	20000530 	.word	0x20000530
    7d2c:	00007981 	.word	0x00007981

00007d30 <nvm_init>:

void nvm_init(void)
{
    7d30:	b580      	push	{r7, lr}
    7d32:	b082      	sub	sp, #8
    7d34:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
    7d36:	003b      	movs	r3, r7
    7d38:	0018      	movs	r0, r3
    7d3a:	4b06      	ldr	r3, [pc, #24]	; (7d54 <nvm_init+0x24>)
    7d3c:	4798      	blx	r3
	config_nvm.manual_page_write = false;
    7d3e:	003b      	movs	r3, r7
    7d40:	2200      	movs	r2, #0
    7d42:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config_nvm);
    7d44:	003b      	movs	r3, r7
    7d46:	0018      	movs	r0, r3
    7d48:	4b03      	ldr	r3, [pc, #12]	; (7d58 <nvm_init+0x28>)
    7d4a:	4798      	blx	r3
}
    7d4c:	46c0      	nop			; (mov r8, r8)
    7d4e:	46bd      	mov	sp, r7
    7d50:	b002      	add	sp, #8
    7d52:	bd80      	pop	{r7, pc}
    7d54:	000079e9 	.word	0x000079e9
    7d58:	00004039 	.word	0x00004039

00007d5c <serial_init>:
#define EDBG_CDC_SERCOM_PINMUX_PAD0  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD1  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD2  PINMUX_PB10D_SERCOM4_PAD2
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
static void serial_init(void)
{
    7d5c:	b580      	push	{r7, lr}
    7d5e:	b090      	sub	sp, #64	; 0x40
    7d60:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    7d62:	003b      	movs	r3, r7
    7d64:	0018      	movs	r0, r3
    7d66:	4b13      	ldr	r3, [pc, #76]	; (7db4 <serial_init+0x58>)
    7d68:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    7d6a:	003b      	movs	r3, r7
    7d6c:	22c4      	movs	r2, #196	; 0xc4
    7d6e:	0392      	lsls	r2, r2, #14
    7d70:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    7d72:	003b      	movs	r3, r7
    7d74:	2201      	movs	r2, #1
    7d76:	4252      	negs	r2, r2
    7d78:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    7d7a:	003b      	movs	r3, r7
    7d7c:	2201      	movs	r2, #1
    7d7e:	4252      	negs	r2, r2
    7d80:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    7d82:	003b      	movs	r3, r7
    7d84:	4a0c      	ldr	r2, [pc, #48]	; (7db8 <serial_init+0x5c>)
    7d86:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    7d88:	003b      	movs	r3, r7
    7d8a:	4a0c      	ldr	r2, [pc, #48]	; (7dbc <serial_init+0x60>)
    7d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    7d8e:	003b      	movs	r3, r7
    7d90:	22e1      	movs	r2, #225	; 0xe1
    7d92:	0252      	lsls	r2, r2, #9
    7d94:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    7d96:	003a      	movs	r2, r7
    7d98:	4909      	ldr	r1, [pc, #36]	; (7dc0 <serial_init+0x64>)
    7d9a:	4b0a      	ldr	r3, [pc, #40]	; (7dc4 <serial_init+0x68>)
    7d9c:	0018      	movs	r0, r3
    7d9e:	4b0a      	ldr	r3, [pc, #40]	; (7dc8 <serial_init+0x6c>)
    7da0:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    7da2:	4b08      	ldr	r3, [pc, #32]	; (7dc4 <serial_init+0x68>)
    7da4:	0018      	movs	r0, r3
    7da6:	4b09      	ldr	r3, [pc, #36]	; (7dcc <serial_init+0x70>)
    7da8:	4798      	blx	r3
}
    7daa:	46c0      	nop			; (mov r8, r8)
    7dac:	46bd      	mov	sp, r7
    7dae:	b010      	add	sp, #64	; 0x40
    7db0:	bd80      	pop	{r7, pc}
    7db2:	46c0      	nop			; (mov r8, r8)
    7db4:	00007a69 	.word	0x00007a69
    7db8:	002a0003 	.word	0x002a0003
    7dbc:	002b0003 	.word	0x002b0003
    7dc0:	42001800 	.word	0x42001800
    7dc4:	200000cc 	.word	0x200000cc
    7dc8:	00007c15 	.word	0x00007c15
    7dcc:	00007b29 	.word	0x00007b29

00007dd0 <main>:

int main (void)
{
    7dd0:	b590      	push	{r4, r7, lr}
    7dd2:	b0a9      	sub	sp, #164	; 0xa4
    7dd4:	af00      	add	r7, sp, #0
	system_init();
    7dd6:	4bb9      	ldr	r3, [pc, #740]	; (80bc <main+0x2ec>)
    7dd8:	4798      	blx	r3
	at25dfx_init();
    7dda:	4bb9      	ldr	r3, [pc, #740]	; (80c0 <main+0x2f0>)
    7ddc:	4798      	blx	r3
	dsu_crc32_init();
    7dde:	4bb9      	ldr	r3, [pc, #740]	; (80c4 <main+0x2f4>)
    7de0:	4798      	blx	r3
	nvm_init();
    7de2:	4bb9      	ldr	r3, [pc, #740]	; (80c8 <main+0x2f8>)
    7de4:	4798      	blx	r3
	serial_init();
    7de6:	4bb9      	ldr	r3, [pc, #740]	; (80cc <main+0x2fc>)
    7de8:	4798      	blx	r3
	
	printf("In Application!\n\r");
    7dea:	4bb9      	ldr	r3, [pc, #740]	; (80d0 <main+0x300>)
    7dec:	0018      	movs	r0, r3
    7dee:	4bb9      	ldr	r3, [pc, #740]	; (80d4 <main+0x304>)
    7df0:	4798      	blx	r3
	
	// Init Button
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    7df2:	238c      	movs	r3, #140	; 0x8c
    7df4:	18fb      	adds	r3, r7, r3
    7df6:	0018      	movs	r0, r3
    7df8:	4bb7      	ldr	r3, [pc, #732]	; (80d8 <main+0x308>)
    7dfa:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    7dfc:	238c      	movs	r3, #140	; 0x8c
    7dfe:	18fb      	adds	r3, r7, r3
    7e00:	2200      	movs	r2, #0
    7e02:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB23, &config_port_pin);
    7e04:	238c      	movs	r3, #140	; 0x8c
    7e06:	18fb      	adds	r3, r7, r3
    7e08:	0019      	movs	r1, r3
    7e0a:	2037      	movs	r0, #55	; 0x37
    7e0c:	4bb3      	ldr	r3, [pc, #716]	; (80dc <main+0x30c>)
    7e0e:	4798      	blx	r3

	// Init LED
	struct port_config config_port_pin2;
	port_get_config_defaults(&config_port_pin2);
    7e10:	2388      	movs	r3, #136	; 0x88
    7e12:	18fb      	adds	r3, r7, r3
    7e14:	0018      	movs	r0, r3
    7e16:	4bb0      	ldr	r3, [pc, #704]	; (80d8 <main+0x308>)
    7e18:	4798      	blx	r3
	config_port_pin2.direction = PORT_PIN_DIR_OUTPUT;
    7e1a:	2388      	movs	r3, #136	; 0x88
    7e1c:	18fb      	adds	r3, r7, r3
    7e1e:	2201      	movs	r2, #1
    7e20:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA23, &config_port_pin2);
    7e22:	2388      	movs	r3, #136	; 0x88
    7e24:	18fb      	adds	r3, r7, r3
    7e26:	0019      	movs	r1, r3
    7e28:	2017      	movs	r0, #23
    7e2a:	4bac      	ldr	r3, [pc, #688]	; (80dc <main+0x30c>)
    7e2c:	4798      	blx	r3

	printf("Begining test of Flash RW...\r\n");
    7e2e:	4bac      	ldr	r3, [pc, #688]	; (80e0 <main+0x310>)
    7e30:	0018      	movs	r0, r3
    7e32:	4bac      	ldr	r3, [pc, #688]	; (80e4 <main+0x314>)
    7e34:	4798      	blx	r3
	for(int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    7e36:	2300      	movs	r3, #0
    7e38:	229c      	movs	r2, #156	; 0x9c
    7e3a:	18ba      	adds	r2, r7, r2
    7e3c:	6013      	str	r3, [r2, #0]
    7e3e:	e011      	b.n	7e64 <main+0x94>
		write_buffer[i] = i;
    7e40:	239c      	movs	r3, #156	; 0x9c
    7e42:	18fb      	adds	r3, r7, r3
    7e44:	681b      	ldr	r3, [r3, #0]
    7e46:	b2d9      	uxtb	r1, r3
    7e48:	4aa7      	ldr	r2, [pc, #668]	; (80e8 <main+0x318>)
    7e4a:	239c      	movs	r3, #156	; 0x9c
    7e4c:	18fb      	adds	r3, r7, r3
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	18d3      	adds	r3, r2, r3
    7e52:	1c0a      	adds	r2, r1, #0
    7e54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    7e56:	239c      	movs	r3, #156	; 0x9c
    7e58:	18fb      	adds	r3, r7, r3
    7e5a:	681b      	ldr	r3, [r3, #0]
    7e5c:	3301      	adds	r3, #1
    7e5e:	229c      	movs	r2, #156	; 0x9c
    7e60:	18ba      	adds	r2, r7, r2
    7e62:	6013      	str	r3, [r2, #0]
    7e64:	239c      	movs	r3, #156	; 0x9c
    7e66:	18fb      	adds	r3, r7, r3
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	4aa0      	ldr	r2, [pc, #640]	; (80ec <main+0x31c>)
    7e6c:	4293      	cmp	r3, r2
    7e6e:	dde7      	ble.n	7e40 <main+0x70>
	}
	/* Insert application code here, after the board has been initialized. */
	at25dfx_chip_wake(&at25dfx_chip);
    7e70:	4b9f      	ldr	r3, [pc, #636]	; (80f0 <main+0x320>)
    7e72:	0018      	movs	r0, r3
    7e74:	4b9f      	ldr	r3, [pc, #636]	; (80f4 <main+0x324>)
    7e76:	4798      	blx	r3
		    
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    7e78:	4b9d      	ldr	r3, [pc, #628]	; (80f0 <main+0x320>)
    7e7a:	0018      	movs	r0, r3
    7e7c:	4b9e      	ldr	r3, [pc, #632]	; (80f8 <main+0x328>)
    7e7e:	4798      	blx	r3
    7e80:	1e03      	subs	r3, r0, #0
    7e82:	d006      	beq.n	7e92 <main+0xc2>
		// Handle missing or non-responsive device
		printf("Flash chip missing!\r\n");
    7e84:	4b9d      	ldr	r3, [pc, #628]	; (80fc <main+0x32c>)
    7e86:	0018      	movs	r0, r3
    7e88:	4b96      	ldr	r3, [pc, #600]	; (80e4 <main+0x314>)
    7e8a:	4798      	blx	r3
		exit(1);
    7e8c:	2001      	movs	r0, #1
    7e8e:	4b9c      	ldr	r3, [pc, #624]	; (8100 <main+0x330>)
    7e90:	4798      	blx	r3
	}
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    7e92:	2380      	movs	r3, #128	; 0x80
    7e94:	009b      	lsls	r3, r3, #2
    7e96:	4a9b      	ldr	r2, [pc, #620]	; (8104 <main+0x334>)
    7e98:	4895      	ldr	r0, [pc, #596]	; (80f0 <main+0x320>)
    7e9a:	2100      	movs	r1, #0
    7e9c:	4c9a      	ldr	r4, [pc, #616]	; (8108 <main+0x338>)
    7e9e:	47a0      	blx	r4
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    7ea0:	2380      	movs	r3, #128	; 0x80
    7ea2:	0259      	lsls	r1, r3, #9
    7ea4:	4b92      	ldr	r3, [pc, #584]	; (80f0 <main+0x320>)
    7ea6:	2200      	movs	r2, #0
    7ea8:	0018      	movs	r0, r3
    7eaa:	4b98      	ldr	r3, [pc, #608]	; (810c <main+0x33c>)
    7eac:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    7eae:	2380      	movs	r3, #128	; 0x80
    7eb0:	0259      	lsls	r1, r3, #9
    7eb2:	4b8f      	ldr	r3, [pc, #572]	; (80f0 <main+0x320>)
    7eb4:	2200      	movs	r2, #0
    7eb6:	0018      	movs	r0, r3
    7eb8:	4b95      	ldr	r3, [pc, #596]	; (8110 <main+0x340>)
    7eba:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    7ebc:	2380      	movs	r3, #128	; 0x80
    7ebe:	009c      	lsls	r4, r3, #2
    7ec0:	4a89      	ldr	r2, [pc, #548]	; (80e8 <main+0x318>)
    7ec2:	2380      	movs	r3, #128	; 0x80
    7ec4:	0259      	lsls	r1, r3, #9
    7ec6:	488a      	ldr	r0, [pc, #552]	; (80f0 <main+0x320>)
    7ec8:	0023      	movs	r3, r4
    7eca:	4c92      	ldr	r4, [pc, #584]	; (8114 <main+0x344>)
    7ecc:	47a0      	blx	r4
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    7ece:	4b88      	ldr	r3, [pc, #544]	; (80f0 <main+0x320>)
    7ed0:	2101      	movs	r1, #1
    7ed2:	0018      	movs	r0, r3
    7ed4:	4b90      	ldr	r3, [pc, #576]	; (8118 <main+0x348>)
    7ed6:	4798      	blx	r3
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);
    7ed8:	2380      	movs	r3, #128	; 0x80
    7eda:	009c      	lsls	r4, r3, #2
    7edc:	4a89      	ldr	r2, [pc, #548]	; (8104 <main+0x334>)
    7ede:	2380      	movs	r3, #128	; 0x80
    7ee0:	0259      	lsls	r1, r3, #9
    7ee2:	4883      	ldr	r0, [pc, #524]	; (80f0 <main+0x320>)
    7ee4:	0023      	movs	r3, r4
    7ee6:	4c88      	ldr	r4, [pc, #544]	; (8108 <main+0x338>)
    7ee8:	47a0      	blx	r4
	at25dfx_chip_sleep(&at25dfx_chip);
    7eea:	4b81      	ldr	r3, [pc, #516]	; (80f0 <main+0x320>)
    7eec:	0018      	movs	r0, r3
    7eee:	4b8b      	ldr	r3, [pc, #556]	; (811c <main+0x34c>)
    7ef0:	4798      	blx	r3
	
	uint32_t read_crc_res = 0;
    7ef2:	2300      	movs	r3, #0
    7ef4:	2284      	movs	r2, #132	; 0x84
    7ef6:	18ba      	adds	r2, r7, r2
    7ef8:	6013      	str	r3, [r2, #0]
	uint32_t write_crc_res = 0;
    7efa:	2300      	movs	r3, #0
    7efc:	2280      	movs	r2, #128	; 0x80
    7efe:	18ba      	adds	r2, r7, r2
    7f00:	6013      	str	r3, [r2, #0]
	enum status_code crcstat;
	crcstat = dsu_crc32_cal(&read_buffer[0], AT25DFX_BUFFER_SIZE, &read_crc_res);
    7f02:	4880      	ldr	r0, [pc, #512]	; (8104 <main+0x334>)
    7f04:	2393      	movs	r3, #147	; 0x93
    7f06:	18fc      	adds	r4, r7, r3
    7f08:	2384      	movs	r3, #132	; 0x84
    7f0a:	18fa      	adds	r2, r7, r3
    7f0c:	2380      	movs	r3, #128	; 0x80
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	0019      	movs	r1, r3
    7f12:	4b83      	ldr	r3, [pc, #524]	; (8120 <main+0x350>)
    7f14:	4798      	blx	r3
    7f16:	0003      	movs	r3, r0
    7f18:	7023      	strb	r3, [r4, #0]
	crcstat = dsu_crc32_cal(&write_buffer[0], AT25DFX_BUFFER_SIZE, &write_crc_res);
    7f1a:	4873      	ldr	r0, [pc, #460]	; (80e8 <main+0x318>)
    7f1c:	2393      	movs	r3, #147	; 0x93
    7f1e:	18fc      	adds	r4, r7, r3
    7f20:	2380      	movs	r3, #128	; 0x80
    7f22:	18fa      	adds	r2, r7, r3
    7f24:	2380      	movs	r3, #128	; 0x80
    7f26:	009b      	lsls	r3, r3, #2
    7f28:	0019      	movs	r1, r3
    7f2a:	4b7d      	ldr	r3, [pc, #500]	; (8120 <main+0x350>)
    7f2c:	4798      	blx	r3
    7f2e:	0003      	movs	r3, r0
    7f30:	7023      	strb	r3, [r4, #0]
	printf("CRC32 Result of read: %x\r\n", read_crc_res);
    7f32:	2384      	movs	r3, #132	; 0x84
    7f34:	18fb      	adds	r3, r7, r3
    7f36:	681a      	ldr	r2, [r3, #0]
    7f38:	4b7a      	ldr	r3, [pc, #488]	; (8124 <main+0x354>)
    7f3a:	0011      	movs	r1, r2
    7f3c:	0018      	movs	r0, r3
    7f3e:	4b65      	ldr	r3, [pc, #404]	; (80d4 <main+0x304>)
    7f40:	4798      	blx	r3
	printf("CRC32 Result of write: %x\r\n", write_crc_res);
    7f42:	2380      	movs	r3, #128	; 0x80
    7f44:	18fb      	adds	r3, r7, r3
    7f46:	681a      	ldr	r2, [r3, #0]
    7f48:	4b77      	ldr	r3, [pc, #476]	; (8128 <main+0x358>)
    7f4a:	0011      	movs	r1, r2
    7f4c:	0018      	movs	r0, r3
    7f4e:	4b61      	ldr	r3, [pc, #388]	; (80d4 <main+0x304>)
    7f50:	4798      	blx	r3
	
	printf("Starting test of NVM RW...\r\n");
    7f52:	4b76      	ldr	r3, [pc, #472]	; (812c <main+0x35c>)
    7f54:	0018      	movs	r0, r3
    7f56:	4b63      	ldr	r3, [pc, #396]	; (80e4 <main+0x314>)
    7f58:	4798      	blx	r3
	// NVM
	uint8_t write_page_buffer[NVMCTRL_PAGE_SIZE];
	uint8_t read_page_buffer[NVMCTRL_PAGE_SIZE];
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    7f5a:	2300      	movs	r3, #0
    7f5c:	2298      	movs	r2, #152	; 0x98
    7f5e:	18ba      	adds	r2, r7, r2
    7f60:	6013      	str	r3, [r2, #0]
    7f62:	e012      	b.n	7f8a <main+0x1ba>
		write_page_buffer[i] = i;
    7f64:	2398      	movs	r3, #152	; 0x98
    7f66:	18fb      	adds	r3, r7, r3
    7f68:	681b      	ldr	r3, [r3, #0]
    7f6a:	b2d9      	uxtb	r1, r3
    7f6c:	2340      	movs	r3, #64	; 0x40
    7f6e:	18fa      	adds	r2, r7, r3
    7f70:	2398      	movs	r3, #152	; 0x98
    7f72:	18fb      	adds	r3, r7, r3
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	18d3      	adds	r3, r2, r3
    7f78:	1c0a      	adds	r2, r1, #0
    7f7a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    7f7c:	2398      	movs	r3, #152	; 0x98
    7f7e:	18fb      	adds	r3, r7, r3
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	3301      	adds	r3, #1
    7f84:	2298      	movs	r2, #152	; 0x98
    7f86:	18ba      	adds	r2, r7, r2
    7f88:	6013      	str	r3, [r2, #0]
    7f8a:	2398      	movs	r3, #152	; 0x98
    7f8c:	18fb      	adds	r3, r7, r3
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	2b3f      	cmp	r3, #63	; 0x3f
    7f92:	d9e7      	bls.n	7f64 <main+0x194>
	}
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
    7f94:	2392      	movs	r3, #146	; 0x92
    7f96:	18fc      	adds	r4, r7, r3
    7f98:	23c8      	movs	r3, #200	; 0xc8
    7f9a:	01db      	lsls	r3, r3, #7
    7f9c:	0018      	movs	r0, r3
    7f9e:	4b64      	ldr	r3, [pc, #400]	; (8130 <main+0x360>)
    7fa0:	4798      	blx	r3
    7fa2:	0003      	movs	r3, r0
    7fa4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7fa6:	2392      	movs	r3, #146	; 0x92
    7fa8:	18fb      	adds	r3, r7, r3
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	2b05      	cmp	r3, #5
    7fae:	d0f1      	beq.n	7f94 <main+0x1c4>
	do
	{
		error_code = nvm_write_buffer( 100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE, write_page_buffer, NVMCTRL_PAGE_SIZE);
    7fb0:	2392      	movs	r3, #146	; 0x92
    7fb2:	18fc      	adds	r4, r7, r3
    7fb4:	2340      	movs	r3, #64	; 0x40
    7fb6:	18f9      	adds	r1, r7, r3
    7fb8:	23c8      	movs	r3, #200	; 0xc8
    7fba:	01db      	lsls	r3, r3, #7
    7fbc:	2240      	movs	r2, #64	; 0x40
    7fbe:	0018      	movs	r0, r3
    7fc0:	4b5c      	ldr	r3, [pc, #368]	; (8134 <main+0x364>)
    7fc2:	4798      	blx	r3
    7fc4:	0003      	movs	r3, r0
    7fc6:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7fc8:	2392      	movs	r3, #146	; 0x92
    7fca:	18fb      	adds	r3, r7, r3
    7fcc:	781b      	ldrb	r3, [r3, #0]
    7fce:	2b05      	cmp	r3, #5
    7fd0:	d0ee      	beq.n	7fb0 <main+0x1e0>
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    7fd2:	2300      	movs	r3, #0
    7fd4:	2294      	movs	r2, #148	; 0x94
    7fd6:	18ba      	adds	r2, r7, r2
    7fd8:	6013      	str	r3, [r2, #0]
    7fda:	e00d      	b.n	7ff8 <main+0x228>
		read_page_buffer[i] = 0;
    7fdc:	003a      	movs	r2, r7
    7fde:	2394      	movs	r3, #148	; 0x94
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	18d3      	adds	r3, r2, r3
    7fe6:	2200      	movs	r2, #0
    7fe8:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    7fea:	2394      	movs	r3, #148	; 0x94
    7fec:	18fb      	adds	r3, r7, r3
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	3301      	adds	r3, #1
    7ff2:	2294      	movs	r2, #148	; 0x94
    7ff4:	18ba      	adds	r2, r7, r2
    7ff6:	6013      	str	r3, [r2, #0]
    7ff8:	2394      	movs	r3, #148	; 0x94
    7ffa:	18fb      	adds	r3, r7, r3
    7ffc:	681b      	ldr	r3, [r3, #0]
    7ffe:	2b3f      	cmp	r3, #63	; 0x3f
    8000:	d9ec      	bls.n	7fdc <main+0x20c>
	}
	do
	{
		error_code = nvm_read_buffer(100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE, read_page_buffer, NVMCTRL_PAGE_SIZE);
    8002:	2392      	movs	r3, #146	; 0x92
    8004:	18fc      	adds	r4, r7, r3
    8006:	0039      	movs	r1, r7
    8008:	23c8      	movs	r3, #200	; 0xc8
    800a:	01db      	lsls	r3, r3, #7
    800c:	2240      	movs	r2, #64	; 0x40
    800e:	0018      	movs	r0, r3
    8010:	4b49      	ldr	r3, [pc, #292]	; (8138 <main+0x368>)
    8012:	4798      	blx	r3
    8014:	0003      	movs	r3, r0
    8016:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    8018:	2392      	movs	r3, #146	; 0x92
    801a:	18fb      	adds	r3, r7, r3
    801c:	781b      	ldrb	r3, [r3, #0]
    801e:	2b05      	cmp	r3, #5
    8020:	d0ef      	beq.n	8002 <main+0x232>
	
	read_crc_res = 0;
    8022:	2300      	movs	r3, #0
    8024:	2284      	movs	r2, #132	; 0x84
    8026:	18ba      	adds	r2, r7, r2
    8028:	6013      	str	r3, [r2, #0]
	write_crc_res = 0;
    802a:	2300      	movs	r3, #0
    802c:	2280      	movs	r2, #128	; 0x80
    802e:	18ba      	adds	r2, r7, r2
    8030:	6013      	str	r3, [r2, #0]
	crcstat = dsu_crc32_cal(&read_page_buffer[0], NVMCTRL_PAGE_SIZE, &read_crc_res);
    8032:	003b      	movs	r3, r7
    8034:	2293      	movs	r2, #147	; 0x93
    8036:	18bc      	adds	r4, r7, r2
    8038:	2284      	movs	r2, #132	; 0x84
    803a:	18ba      	adds	r2, r7, r2
    803c:	2140      	movs	r1, #64	; 0x40
    803e:	0018      	movs	r0, r3
    8040:	4b37      	ldr	r3, [pc, #220]	; (8120 <main+0x350>)
    8042:	4798      	blx	r3
    8044:	0003      	movs	r3, r0
    8046:	7023      	strb	r3, [r4, #0]
	crcstat = dsu_crc32_cal(&write_page_buffer[0], NVMCTRL_PAGE_SIZE, &write_crc_res);
    8048:	2340      	movs	r3, #64	; 0x40
    804a:	18fb      	adds	r3, r7, r3
    804c:	2293      	movs	r2, #147	; 0x93
    804e:	18bc      	adds	r4, r7, r2
    8050:	2280      	movs	r2, #128	; 0x80
    8052:	18ba      	adds	r2, r7, r2
    8054:	2140      	movs	r1, #64	; 0x40
    8056:	0018      	movs	r0, r3
    8058:	4b31      	ldr	r3, [pc, #196]	; (8120 <main+0x350>)
    805a:	4798      	blx	r3
    805c:	0003      	movs	r3, r0
    805e:	7023      	strb	r3, [r4, #0]
	printf("CRC32 Result of read: %x\r\n", read_crc_res);
    8060:	2384      	movs	r3, #132	; 0x84
    8062:	18fb      	adds	r3, r7, r3
    8064:	681a      	ldr	r2, [r3, #0]
    8066:	4b2f      	ldr	r3, [pc, #188]	; (8124 <main+0x354>)
    8068:	0011      	movs	r1, r2
    806a:	0018      	movs	r0, r3
    806c:	4b19      	ldr	r3, [pc, #100]	; (80d4 <main+0x304>)
    806e:	4798      	blx	r3
	printf("CRC32 Result of write: %x\r\n", write_crc_res);
    8070:	2380      	movs	r3, #128	; 0x80
    8072:	18fb      	adds	r3, r7, r3
    8074:	681a      	ldr	r2, [r3, #0]
    8076:	4b2c      	ldr	r3, [pc, #176]	; (8128 <main+0x358>)
    8078:	0011      	movs	r1, r2
    807a:	0018      	movs	r0, r3
    807c:	4b15      	ldr	r3, [pc, #84]	; (80d4 <main+0x304>)
    807e:	4798      	blx	r3
	
	printf("RW Tests done... press the debug button for the LED.\r\n");
    8080:	4b2e      	ldr	r3, [pc, #184]	; (813c <main+0x36c>)
    8082:	0018      	movs	r0, r3
    8084:	4b17      	ldr	r3, [pc, #92]	; (80e4 <main+0x314>)
    8086:	4798      	blx	r3
	while(1) {
		// LED light up with Button Press.
		bool level = port_pin_get_input_level(PIN_PB23);
    8088:	2391      	movs	r3, #145	; 0x91
    808a:	18fc      	adds	r4, r7, r3
    808c:	2037      	movs	r0, #55	; 0x37
    808e:	4b2c      	ldr	r3, [pc, #176]	; (8140 <main+0x370>)
    8090:	4798      	blx	r3
    8092:	0003      	movs	r3, r0
    8094:	7023      	strb	r3, [r4, #0]
		if(level == false) {
    8096:	2391      	movs	r3, #145	; 0x91
    8098:	18fb      	adds	r3, r7, r3
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	2201      	movs	r2, #1
    809e:	4053      	eors	r3, r2
    80a0:	b2db      	uxtb	r3, r3
    80a2:	2b00      	cmp	r3, #0
    80a4:	d004      	beq.n	80b0 <main+0x2e0>
			port_pin_set_output_level(PIN_PA23, false);
    80a6:	2100      	movs	r1, #0
    80a8:	2017      	movs	r0, #23
    80aa:	4b26      	ldr	r3, [pc, #152]	; (8144 <main+0x374>)
    80ac:	4798      	blx	r3
    80ae:	e7eb      	b.n	8088 <main+0x2b8>
		}
		else {
			port_pin_set_output_level(PIN_PA23,  true);
    80b0:	2101      	movs	r1, #1
    80b2:	2017      	movs	r0, #23
    80b4:	4b23      	ldr	r3, [pc, #140]	; (8144 <main+0x374>)
    80b6:	4798      	blx	r3
	while(1) {
    80b8:	e7e6      	b.n	8088 <main+0x2b8>
    80ba:	46c0      	nop			; (mov r8, r8)
    80bc:	00007419 	.word	0x00007419
    80c0:	00007c85 	.word	0x00007c85
    80c4:	00007769 	.word	0x00007769
    80c8:	00007d31 	.word	0x00007d31
    80cc:	00007d5d 	.word	0x00007d5d
    80d0:	000095c0 	.word	0x000095c0
    80d4:	00008339 	.word	0x00008339
    80d8:	000077a5 	.word	0x000077a5
    80dc:	000046cd 	.word	0x000046cd
    80e0:	000095d4 	.word	0x000095d4
    80e4:	0000842d 	.word	0x0000842d
    80e8:	20000300 	.word	0x20000300
    80ec:	000001ff 	.word	0x000001ff
    80f0:	20000530 	.word	0x20000530
    80f4:	00003e39 	.word	0x00003e39
    80f8:	0000382d 	.word	0x0000382d
    80fc:	000095f4 	.word	0x000095f4
    8100:	000082b5 	.word	0x000082b5
    8104:	20000100 	.word	0x20000100
    8108:	000038d9 	.word	0x000038d9
    810c:	00003ce9 	.word	0x00003ce9
    8110:	00003b39 	.word	0x00003b39
    8114:	00003991 	.word	0x00003991
    8118:	00003c35 	.word	0x00003c35
    811c:	00003dad 	.word	0x00003dad
    8120:	00003efd 	.word	0x00003efd
    8124:	0000960c 	.word	0x0000960c
    8128:	00009628 	.word	0x00009628
    812c:	00009644 	.word	0x00009644
    8130:	00004471 	.word	0x00004471
    8134:	00004229 	.word	0x00004229
    8138:	00004375 	.word	0x00004375
    813c:	00009660 	.word	0x00009660
    8140:	000077c9 	.word	0x000077c9
    8144:	0000780d 	.word	0x0000780d

00008148 <__udivsi3>:
    8148:	2200      	movs	r2, #0
    814a:	0843      	lsrs	r3, r0, #1
    814c:	428b      	cmp	r3, r1
    814e:	d374      	bcc.n	823a <__udivsi3+0xf2>
    8150:	0903      	lsrs	r3, r0, #4
    8152:	428b      	cmp	r3, r1
    8154:	d35f      	bcc.n	8216 <__udivsi3+0xce>
    8156:	0a03      	lsrs	r3, r0, #8
    8158:	428b      	cmp	r3, r1
    815a:	d344      	bcc.n	81e6 <__udivsi3+0x9e>
    815c:	0b03      	lsrs	r3, r0, #12
    815e:	428b      	cmp	r3, r1
    8160:	d328      	bcc.n	81b4 <__udivsi3+0x6c>
    8162:	0c03      	lsrs	r3, r0, #16
    8164:	428b      	cmp	r3, r1
    8166:	d30d      	bcc.n	8184 <__udivsi3+0x3c>
    8168:	22ff      	movs	r2, #255	; 0xff
    816a:	0209      	lsls	r1, r1, #8
    816c:	ba12      	rev	r2, r2
    816e:	0c03      	lsrs	r3, r0, #16
    8170:	428b      	cmp	r3, r1
    8172:	d302      	bcc.n	817a <__udivsi3+0x32>
    8174:	1212      	asrs	r2, r2, #8
    8176:	0209      	lsls	r1, r1, #8
    8178:	d065      	beq.n	8246 <__udivsi3+0xfe>
    817a:	0b03      	lsrs	r3, r0, #12
    817c:	428b      	cmp	r3, r1
    817e:	d319      	bcc.n	81b4 <__udivsi3+0x6c>
    8180:	e000      	b.n	8184 <__udivsi3+0x3c>
    8182:	0a09      	lsrs	r1, r1, #8
    8184:	0bc3      	lsrs	r3, r0, #15
    8186:	428b      	cmp	r3, r1
    8188:	d301      	bcc.n	818e <__udivsi3+0x46>
    818a:	03cb      	lsls	r3, r1, #15
    818c:	1ac0      	subs	r0, r0, r3
    818e:	4152      	adcs	r2, r2
    8190:	0b83      	lsrs	r3, r0, #14
    8192:	428b      	cmp	r3, r1
    8194:	d301      	bcc.n	819a <__udivsi3+0x52>
    8196:	038b      	lsls	r3, r1, #14
    8198:	1ac0      	subs	r0, r0, r3
    819a:	4152      	adcs	r2, r2
    819c:	0b43      	lsrs	r3, r0, #13
    819e:	428b      	cmp	r3, r1
    81a0:	d301      	bcc.n	81a6 <__udivsi3+0x5e>
    81a2:	034b      	lsls	r3, r1, #13
    81a4:	1ac0      	subs	r0, r0, r3
    81a6:	4152      	adcs	r2, r2
    81a8:	0b03      	lsrs	r3, r0, #12
    81aa:	428b      	cmp	r3, r1
    81ac:	d301      	bcc.n	81b2 <__udivsi3+0x6a>
    81ae:	030b      	lsls	r3, r1, #12
    81b0:	1ac0      	subs	r0, r0, r3
    81b2:	4152      	adcs	r2, r2
    81b4:	0ac3      	lsrs	r3, r0, #11
    81b6:	428b      	cmp	r3, r1
    81b8:	d301      	bcc.n	81be <__udivsi3+0x76>
    81ba:	02cb      	lsls	r3, r1, #11
    81bc:	1ac0      	subs	r0, r0, r3
    81be:	4152      	adcs	r2, r2
    81c0:	0a83      	lsrs	r3, r0, #10
    81c2:	428b      	cmp	r3, r1
    81c4:	d301      	bcc.n	81ca <__udivsi3+0x82>
    81c6:	028b      	lsls	r3, r1, #10
    81c8:	1ac0      	subs	r0, r0, r3
    81ca:	4152      	adcs	r2, r2
    81cc:	0a43      	lsrs	r3, r0, #9
    81ce:	428b      	cmp	r3, r1
    81d0:	d301      	bcc.n	81d6 <__udivsi3+0x8e>
    81d2:	024b      	lsls	r3, r1, #9
    81d4:	1ac0      	subs	r0, r0, r3
    81d6:	4152      	adcs	r2, r2
    81d8:	0a03      	lsrs	r3, r0, #8
    81da:	428b      	cmp	r3, r1
    81dc:	d301      	bcc.n	81e2 <__udivsi3+0x9a>
    81de:	020b      	lsls	r3, r1, #8
    81e0:	1ac0      	subs	r0, r0, r3
    81e2:	4152      	adcs	r2, r2
    81e4:	d2cd      	bcs.n	8182 <__udivsi3+0x3a>
    81e6:	09c3      	lsrs	r3, r0, #7
    81e8:	428b      	cmp	r3, r1
    81ea:	d301      	bcc.n	81f0 <__udivsi3+0xa8>
    81ec:	01cb      	lsls	r3, r1, #7
    81ee:	1ac0      	subs	r0, r0, r3
    81f0:	4152      	adcs	r2, r2
    81f2:	0983      	lsrs	r3, r0, #6
    81f4:	428b      	cmp	r3, r1
    81f6:	d301      	bcc.n	81fc <__udivsi3+0xb4>
    81f8:	018b      	lsls	r3, r1, #6
    81fa:	1ac0      	subs	r0, r0, r3
    81fc:	4152      	adcs	r2, r2
    81fe:	0943      	lsrs	r3, r0, #5
    8200:	428b      	cmp	r3, r1
    8202:	d301      	bcc.n	8208 <__udivsi3+0xc0>
    8204:	014b      	lsls	r3, r1, #5
    8206:	1ac0      	subs	r0, r0, r3
    8208:	4152      	adcs	r2, r2
    820a:	0903      	lsrs	r3, r0, #4
    820c:	428b      	cmp	r3, r1
    820e:	d301      	bcc.n	8214 <__udivsi3+0xcc>
    8210:	010b      	lsls	r3, r1, #4
    8212:	1ac0      	subs	r0, r0, r3
    8214:	4152      	adcs	r2, r2
    8216:	08c3      	lsrs	r3, r0, #3
    8218:	428b      	cmp	r3, r1
    821a:	d301      	bcc.n	8220 <__udivsi3+0xd8>
    821c:	00cb      	lsls	r3, r1, #3
    821e:	1ac0      	subs	r0, r0, r3
    8220:	4152      	adcs	r2, r2
    8222:	0883      	lsrs	r3, r0, #2
    8224:	428b      	cmp	r3, r1
    8226:	d301      	bcc.n	822c <__udivsi3+0xe4>
    8228:	008b      	lsls	r3, r1, #2
    822a:	1ac0      	subs	r0, r0, r3
    822c:	4152      	adcs	r2, r2
    822e:	0843      	lsrs	r3, r0, #1
    8230:	428b      	cmp	r3, r1
    8232:	d301      	bcc.n	8238 <__udivsi3+0xf0>
    8234:	004b      	lsls	r3, r1, #1
    8236:	1ac0      	subs	r0, r0, r3
    8238:	4152      	adcs	r2, r2
    823a:	1a41      	subs	r1, r0, r1
    823c:	d200      	bcs.n	8240 <__udivsi3+0xf8>
    823e:	4601      	mov	r1, r0
    8240:	4152      	adcs	r2, r2
    8242:	4610      	mov	r0, r2
    8244:	4770      	bx	lr
    8246:	e7ff      	b.n	8248 <__udivsi3+0x100>
    8248:	b501      	push	{r0, lr}
    824a:	2000      	movs	r0, #0
    824c:	f000 f806 	bl	825c <__aeabi_idiv0>
    8250:	bd02      	pop	{r1, pc}
    8252:	46c0      	nop			; (mov r8, r8)

00008254 <__aeabi_uidivmod>:
    8254:	2900      	cmp	r1, #0
    8256:	d0f7      	beq.n	8248 <__udivsi3+0x100>
    8258:	e776      	b.n	8148 <__udivsi3>
    825a:	4770      	bx	lr

0000825c <__aeabi_idiv0>:
    825c:	4770      	bx	lr
    825e:	46c0      	nop			; (mov r8, r8)

00008260 <__aeabi_lmul>:
    8260:	b5f0      	push	{r4, r5, r6, r7, lr}
    8262:	46ce      	mov	lr, r9
    8264:	4647      	mov	r7, r8
    8266:	0415      	lsls	r5, r2, #16
    8268:	0c2d      	lsrs	r5, r5, #16
    826a:	002e      	movs	r6, r5
    826c:	b580      	push	{r7, lr}
    826e:	0407      	lsls	r7, r0, #16
    8270:	0c14      	lsrs	r4, r2, #16
    8272:	0c3f      	lsrs	r7, r7, #16
    8274:	4699      	mov	r9, r3
    8276:	0c03      	lsrs	r3, r0, #16
    8278:	437e      	muls	r6, r7
    827a:	435d      	muls	r5, r3
    827c:	4367      	muls	r7, r4
    827e:	4363      	muls	r3, r4
    8280:	197f      	adds	r7, r7, r5
    8282:	0c34      	lsrs	r4, r6, #16
    8284:	19e4      	adds	r4, r4, r7
    8286:	469c      	mov	ip, r3
    8288:	42a5      	cmp	r5, r4
    828a:	d903      	bls.n	8294 <__aeabi_lmul+0x34>
    828c:	2380      	movs	r3, #128	; 0x80
    828e:	025b      	lsls	r3, r3, #9
    8290:	4698      	mov	r8, r3
    8292:	44c4      	add	ip, r8
    8294:	464b      	mov	r3, r9
    8296:	4351      	muls	r1, r2
    8298:	4343      	muls	r3, r0
    829a:	0436      	lsls	r6, r6, #16
    829c:	0c36      	lsrs	r6, r6, #16
    829e:	0c25      	lsrs	r5, r4, #16
    82a0:	0424      	lsls	r4, r4, #16
    82a2:	4465      	add	r5, ip
    82a4:	19a4      	adds	r4, r4, r6
    82a6:	1859      	adds	r1, r3, r1
    82a8:	1949      	adds	r1, r1, r5
    82aa:	0020      	movs	r0, r4
    82ac:	bc0c      	pop	{r2, r3}
    82ae:	4690      	mov	r8, r2
    82b0:	4699      	mov	r9, r3
    82b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000082b4 <exit>:
    82b4:	4b08      	ldr	r3, [pc, #32]	; (82d8 <exit+0x24>)
    82b6:	b510      	push	{r4, lr}
    82b8:	0004      	movs	r4, r0
    82ba:	2b00      	cmp	r3, #0
    82bc:	d002      	beq.n	82c4 <exit+0x10>
    82be:	2100      	movs	r1, #0
    82c0:	e000      	b.n	82c4 <exit+0x10>
    82c2:	bf00      	nop
    82c4:	4b05      	ldr	r3, [pc, #20]	; (82dc <exit+0x28>)
    82c6:	6818      	ldr	r0, [r3, #0]
    82c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    82ca:	2b00      	cmp	r3, #0
    82cc:	d000      	beq.n	82d0 <exit+0x1c>
    82ce:	4798      	blx	r3
    82d0:	0020      	movs	r0, r4
    82d2:	f7ff f9e5 	bl	76a0 <_exit>
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	00000000 	.word	0x00000000
    82dc:	00009698 	.word	0x00009698

000082e0 <__libc_init_array>:
    82e0:	b570      	push	{r4, r5, r6, lr}
    82e2:	2600      	movs	r6, #0
    82e4:	4d0c      	ldr	r5, [pc, #48]	; (8318 <__libc_init_array+0x38>)
    82e6:	4c0d      	ldr	r4, [pc, #52]	; (831c <__libc_init_array+0x3c>)
    82e8:	1b64      	subs	r4, r4, r5
    82ea:	10a4      	asrs	r4, r4, #2
    82ec:	42a6      	cmp	r6, r4
    82ee:	d109      	bne.n	8304 <__libc_init_array+0x24>
    82f0:	2600      	movs	r6, #0
    82f2:	f001 fa1d 	bl	9730 <_init>
    82f6:	4d0a      	ldr	r5, [pc, #40]	; (8320 <__libc_init_array+0x40>)
    82f8:	4c0a      	ldr	r4, [pc, #40]	; (8324 <__libc_init_array+0x44>)
    82fa:	1b64      	subs	r4, r4, r5
    82fc:	10a4      	asrs	r4, r4, #2
    82fe:	42a6      	cmp	r6, r4
    8300:	d105      	bne.n	830e <__libc_init_array+0x2e>
    8302:	bd70      	pop	{r4, r5, r6, pc}
    8304:	00b3      	lsls	r3, r6, #2
    8306:	58eb      	ldr	r3, [r5, r3]
    8308:	4798      	blx	r3
    830a:	3601      	adds	r6, #1
    830c:	e7ee      	b.n	82ec <__libc_init_array+0xc>
    830e:	00b3      	lsls	r3, r6, #2
    8310:	58eb      	ldr	r3, [r5, r3]
    8312:	4798      	blx	r3
    8314:	3601      	adds	r6, #1
    8316:	e7f2      	b.n	82fe <__libc_init_array+0x1e>
    8318:	0000973c 	.word	0x0000973c
    831c:	0000973c 	.word	0x0000973c
    8320:	0000973c 	.word	0x0000973c
    8324:	00009740 	.word	0x00009740

00008328 <memset>:
    8328:	0003      	movs	r3, r0
    832a:	1882      	adds	r2, r0, r2
    832c:	4293      	cmp	r3, r2
    832e:	d100      	bne.n	8332 <memset+0xa>
    8330:	4770      	bx	lr
    8332:	7019      	strb	r1, [r3, #0]
    8334:	3301      	adds	r3, #1
    8336:	e7f9      	b.n	832c <memset+0x4>

00008338 <iprintf>:
    8338:	b40f      	push	{r0, r1, r2, r3}
    833a:	4b0b      	ldr	r3, [pc, #44]	; (8368 <iprintf+0x30>)
    833c:	b513      	push	{r0, r1, r4, lr}
    833e:	681c      	ldr	r4, [r3, #0]
    8340:	2c00      	cmp	r4, #0
    8342:	d005      	beq.n	8350 <iprintf+0x18>
    8344:	69a3      	ldr	r3, [r4, #24]
    8346:	2b00      	cmp	r3, #0
    8348:	d102      	bne.n	8350 <iprintf+0x18>
    834a:	0020      	movs	r0, r4
    834c:	f000 faf2 	bl	8934 <__sinit>
    8350:	ab05      	add	r3, sp, #20
    8352:	9a04      	ldr	r2, [sp, #16]
    8354:	68a1      	ldr	r1, [r4, #8]
    8356:	0020      	movs	r0, r4
    8358:	9301      	str	r3, [sp, #4]
    835a:	f000 fcc7 	bl	8cec <_vfiprintf_r>
    835e:	bc16      	pop	{r1, r2, r4}
    8360:	bc08      	pop	{r3}
    8362:	b004      	add	sp, #16
    8364:	4718      	bx	r3
    8366:	46c0      	nop			; (mov r8, r8)
    8368:	20000004 	.word	0x20000004

0000836c <_puts_r>:
    836c:	b570      	push	{r4, r5, r6, lr}
    836e:	0005      	movs	r5, r0
    8370:	000e      	movs	r6, r1
    8372:	2800      	cmp	r0, #0
    8374:	d004      	beq.n	8380 <_puts_r+0x14>
    8376:	6983      	ldr	r3, [r0, #24]
    8378:	2b00      	cmp	r3, #0
    837a:	d101      	bne.n	8380 <_puts_r+0x14>
    837c:	f000 fada 	bl	8934 <__sinit>
    8380:	69ab      	ldr	r3, [r5, #24]
    8382:	68ac      	ldr	r4, [r5, #8]
    8384:	2b00      	cmp	r3, #0
    8386:	d102      	bne.n	838e <_puts_r+0x22>
    8388:	0028      	movs	r0, r5
    838a:	f000 fad3 	bl	8934 <__sinit>
    838e:	4b24      	ldr	r3, [pc, #144]	; (8420 <_puts_r+0xb4>)
    8390:	429c      	cmp	r4, r3
    8392:	d10f      	bne.n	83b4 <_puts_r+0x48>
    8394:	686c      	ldr	r4, [r5, #4]
    8396:	89a3      	ldrh	r3, [r4, #12]
    8398:	071b      	lsls	r3, r3, #28
    839a:	d502      	bpl.n	83a2 <_puts_r+0x36>
    839c:	6923      	ldr	r3, [r4, #16]
    839e:	2b00      	cmp	r3, #0
    83a0:	d120      	bne.n	83e4 <_puts_r+0x78>
    83a2:	0021      	movs	r1, r4
    83a4:	0028      	movs	r0, r5
    83a6:	f000 f957 	bl	8658 <__swsetup_r>
    83aa:	2800      	cmp	r0, #0
    83ac:	d01a      	beq.n	83e4 <_puts_r+0x78>
    83ae:	2001      	movs	r0, #1
    83b0:	4240      	negs	r0, r0
    83b2:	bd70      	pop	{r4, r5, r6, pc}
    83b4:	4b1b      	ldr	r3, [pc, #108]	; (8424 <_puts_r+0xb8>)
    83b6:	429c      	cmp	r4, r3
    83b8:	d101      	bne.n	83be <_puts_r+0x52>
    83ba:	68ac      	ldr	r4, [r5, #8]
    83bc:	e7eb      	b.n	8396 <_puts_r+0x2a>
    83be:	4b1a      	ldr	r3, [pc, #104]	; (8428 <_puts_r+0xbc>)
    83c0:	429c      	cmp	r4, r3
    83c2:	d1e8      	bne.n	8396 <_puts_r+0x2a>
    83c4:	68ec      	ldr	r4, [r5, #12]
    83c6:	e7e6      	b.n	8396 <_puts_r+0x2a>
    83c8:	3b01      	subs	r3, #1
    83ca:	3601      	adds	r6, #1
    83cc:	60a3      	str	r3, [r4, #8]
    83ce:	2b00      	cmp	r3, #0
    83d0:	da04      	bge.n	83dc <_puts_r+0x70>
    83d2:	69a2      	ldr	r2, [r4, #24]
    83d4:	4293      	cmp	r3, r2
    83d6:	db16      	blt.n	8406 <_puts_r+0x9a>
    83d8:	290a      	cmp	r1, #10
    83da:	d014      	beq.n	8406 <_puts_r+0x9a>
    83dc:	6823      	ldr	r3, [r4, #0]
    83de:	1c5a      	adds	r2, r3, #1
    83e0:	6022      	str	r2, [r4, #0]
    83e2:	7019      	strb	r1, [r3, #0]
    83e4:	7831      	ldrb	r1, [r6, #0]
    83e6:	68a3      	ldr	r3, [r4, #8]
    83e8:	2900      	cmp	r1, #0
    83ea:	d1ed      	bne.n	83c8 <_puts_r+0x5c>
    83ec:	3b01      	subs	r3, #1
    83ee:	60a3      	str	r3, [r4, #8]
    83f0:	2b00      	cmp	r3, #0
    83f2:	da0f      	bge.n	8414 <_puts_r+0xa8>
    83f4:	0022      	movs	r2, r4
    83f6:	310a      	adds	r1, #10
    83f8:	0028      	movs	r0, r5
    83fa:	f000 f8d7 	bl	85ac <__swbuf_r>
    83fe:	1c43      	adds	r3, r0, #1
    8400:	d0d5      	beq.n	83ae <_puts_r+0x42>
    8402:	200a      	movs	r0, #10
    8404:	e7d5      	b.n	83b2 <_puts_r+0x46>
    8406:	0022      	movs	r2, r4
    8408:	0028      	movs	r0, r5
    840a:	f000 f8cf 	bl	85ac <__swbuf_r>
    840e:	1c43      	adds	r3, r0, #1
    8410:	d1e8      	bne.n	83e4 <_puts_r+0x78>
    8412:	e7cc      	b.n	83ae <_puts_r+0x42>
    8414:	200a      	movs	r0, #10
    8416:	6823      	ldr	r3, [r4, #0]
    8418:	1c5a      	adds	r2, r3, #1
    841a:	6022      	str	r2, [r4, #0]
    841c:	7018      	strb	r0, [r3, #0]
    841e:	e7c8      	b.n	83b2 <_puts_r+0x46>
    8420:	000096bc 	.word	0x000096bc
    8424:	000096dc 	.word	0x000096dc
    8428:	0000969c 	.word	0x0000969c

0000842c <puts>:
    842c:	b510      	push	{r4, lr}
    842e:	4b03      	ldr	r3, [pc, #12]	; (843c <puts+0x10>)
    8430:	0001      	movs	r1, r0
    8432:	6818      	ldr	r0, [r3, #0]
    8434:	f7ff ff9a 	bl	836c <_puts_r>
    8438:	bd10      	pop	{r4, pc}
    843a:	46c0      	nop			; (mov r8, r8)
    843c:	20000004 	.word	0x20000004

00008440 <setbuf>:
    8440:	424a      	negs	r2, r1
    8442:	414a      	adcs	r2, r1
    8444:	2380      	movs	r3, #128	; 0x80
    8446:	b510      	push	{r4, lr}
    8448:	0052      	lsls	r2, r2, #1
    844a:	00db      	lsls	r3, r3, #3
    844c:	f000 f802 	bl	8454 <setvbuf>
    8450:	bd10      	pop	{r4, pc}
	...

00008454 <setvbuf>:
    8454:	b5f0      	push	{r4, r5, r6, r7, lr}
    8456:	001d      	movs	r5, r3
    8458:	4b4f      	ldr	r3, [pc, #316]	; (8598 <setvbuf+0x144>)
    845a:	b085      	sub	sp, #20
    845c:	681e      	ldr	r6, [r3, #0]
    845e:	0004      	movs	r4, r0
    8460:	000f      	movs	r7, r1
    8462:	9200      	str	r2, [sp, #0]
    8464:	2e00      	cmp	r6, #0
    8466:	d005      	beq.n	8474 <setvbuf+0x20>
    8468:	69b3      	ldr	r3, [r6, #24]
    846a:	2b00      	cmp	r3, #0
    846c:	d102      	bne.n	8474 <setvbuf+0x20>
    846e:	0030      	movs	r0, r6
    8470:	f000 fa60 	bl	8934 <__sinit>
    8474:	4b49      	ldr	r3, [pc, #292]	; (859c <setvbuf+0x148>)
    8476:	429c      	cmp	r4, r3
    8478:	d150      	bne.n	851c <setvbuf+0xc8>
    847a:	6874      	ldr	r4, [r6, #4]
    847c:	9b00      	ldr	r3, [sp, #0]
    847e:	2b02      	cmp	r3, #2
    8480:	d005      	beq.n	848e <setvbuf+0x3a>
    8482:	2b01      	cmp	r3, #1
    8484:	d900      	bls.n	8488 <setvbuf+0x34>
    8486:	e084      	b.n	8592 <setvbuf+0x13e>
    8488:	2d00      	cmp	r5, #0
    848a:	da00      	bge.n	848e <setvbuf+0x3a>
    848c:	e081      	b.n	8592 <setvbuf+0x13e>
    848e:	0021      	movs	r1, r4
    8490:	0030      	movs	r0, r6
    8492:	f000 f9e1 	bl	8858 <_fflush_r>
    8496:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8498:	2900      	cmp	r1, #0
    849a:	d008      	beq.n	84ae <setvbuf+0x5a>
    849c:	0023      	movs	r3, r4
    849e:	3344      	adds	r3, #68	; 0x44
    84a0:	4299      	cmp	r1, r3
    84a2:	d002      	beq.n	84aa <setvbuf+0x56>
    84a4:	0030      	movs	r0, r6
    84a6:	f000 fb51 	bl	8b4c <_free_r>
    84aa:	2300      	movs	r3, #0
    84ac:	6363      	str	r3, [r4, #52]	; 0x34
    84ae:	2300      	movs	r3, #0
    84b0:	61a3      	str	r3, [r4, #24]
    84b2:	6063      	str	r3, [r4, #4]
    84b4:	89a3      	ldrh	r3, [r4, #12]
    84b6:	061b      	lsls	r3, r3, #24
    84b8:	d503      	bpl.n	84c2 <setvbuf+0x6e>
    84ba:	6921      	ldr	r1, [r4, #16]
    84bc:	0030      	movs	r0, r6
    84be:	f000 fb45 	bl	8b4c <_free_r>
    84c2:	89a3      	ldrh	r3, [r4, #12]
    84c4:	4a36      	ldr	r2, [pc, #216]	; (85a0 <setvbuf+0x14c>)
    84c6:	4013      	ands	r3, r2
    84c8:	81a3      	strh	r3, [r4, #12]
    84ca:	9b00      	ldr	r3, [sp, #0]
    84cc:	2b02      	cmp	r3, #2
    84ce:	d05a      	beq.n	8586 <setvbuf+0x132>
    84d0:	ab03      	add	r3, sp, #12
    84d2:	aa02      	add	r2, sp, #8
    84d4:	0021      	movs	r1, r4
    84d6:	0030      	movs	r0, r6
    84d8:	f000 fac2 	bl	8a60 <__swhatbuf_r>
    84dc:	89a3      	ldrh	r3, [r4, #12]
    84de:	4318      	orrs	r0, r3
    84e0:	81a0      	strh	r0, [r4, #12]
    84e2:	2d00      	cmp	r5, #0
    84e4:	d124      	bne.n	8530 <setvbuf+0xdc>
    84e6:	9d02      	ldr	r5, [sp, #8]
    84e8:	0028      	movs	r0, r5
    84ea:	f000 fb25 	bl	8b38 <malloc>
    84ee:	9501      	str	r5, [sp, #4]
    84f0:	1e07      	subs	r7, r0, #0
    84f2:	d142      	bne.n	857a <setvbuf+0x126>
    84f4:	9b02      	ldr	r3, [sp, #8]
    84f6:	9301      	str	r3, [sp, #4]
    84f8:	42ab      	cmp	r3, r5
    84fa:	d139      	bne.n	8570 <setvbuf+0x11c>
    84fc:	2001      	movs	r0, #1
    84fe:	4240      	negs	r0, r0
    8500:	2302      	movs	r3, #2
    8502:	89a2      	ldrh	r2, [r4, #12]
    8504:	4313      	orrs	r3, r2
    8506:	81a3      	strh	r3, [r4, #12]
    8508:	2300      	movs	r3, #0
    850a:	60a3      	str	r3, [r4, #8]
    850c:	0023      	movs	r3, r4
    850e:	3347      	adds	r3, #71	; 0x47
    8510:	6023      	str	r3, [r4, #0]
    8512:	6123      	str	r3, [r4, #16]
    8514:	2301      	movs	r3, #1
    8516:	6163      	str	r3, [r4, #20]
    8518:	b005      	add	sp, #20
    851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    851c:	4b21      	ldr	r3, [pc, #132]	; (85a4 <setvbuf+0x150>)
    851e:	429c      	cmp	r4, r3
    8520:	d101      	bne.n	8526 <setvbuf+0xd2>
    8522:	68b4      	ldr	r4, [r6, #8]
    8524:	e7aa      	b.n	847c <setvbuf+0x28>
    8526:	4b20      	ldr	r3, [pc, #128]	; (85a8 <setvbuf+0x154>)
    8528:	429c      	cmp	r4, r3
    852a:	d1a7      	bne.n	847c <setvbuf+0x28>
    852c:	68f4      	ldr	r4, [r6, #12]
    852e:	e7a5      	b.n	847c <setvbuf+0x28>
    8530:	2f00      	cmp	r7, #0
    8532:	d0d9      	beq.n	84e8 <setvbuf+0x94>
    8534:	69b3      	ldr	r3, [r6, #24]
    8536:	2b00      	cmp	r3, #0
    8538:	d102      	bne.n	8540 <setvbuf+0xec>
    853a:	0030      	movs	r0, r6
    853c:	f000 f9fa 	bl	8934 <__sinit>
    8540:	9b00      	ldr	r3, [sp, #0]
    8542:	2b01      	cmp	r3, #1
    8544:	d103      	bne.n	854e <setvbuf+0xfa>
    8546:	89a3      	ldrh	r3, [r4, #12]
    8548:	9a00      	ldr	r2, [sp, #0]
    854a:	431a      	orrs	r2, r3
    854c:	81a2      	strh	r2, [r4, #12]
    854e:	2008      	movs	r0, #8
    8550:	89a3      	ldrh	r3, [r4, #12]
    8552:	6027      	str	r7, [r4, #0]
    8554:	6127      	str	r7, [r4, #16]
    8556:	6165      	str	r5, [r4, #20]
    8558:	4018      	ands	r0, r3
    855a:	d018      	beq.n	858e <setvbuf+0x13a>
    855c:	2001      	movs	r0, #1
    855e:	4018      	ands	r0, r3
    8560:	2300      	movs	r3, #0
    8562:	4298      	cmp	r0, r3
    8564:	d011      	beq.n	858a <setvbuf+0x136>
    8566:	426d      	negs	r5, r5
    8568:	60a3      	str	r3, [r4, #8]
    856a:	61a5      	str	r5, [r4, #24]
    856c:	0018      	movs	r0, r3
    856e:	e7d3      	b.n	8518 <setvbuf+0xc4>
    8570:	9801      	ldr	r0, [sp, #4]
    8572:	f000 fae1 	bl	8b38 <malloc>
    8576:	1e07      	subs	r7, r0, #0
    8578:	d0c0      	beq.n	84fc <setvbuf+0xa8>
    857a:	2380      	movs	r3, #128	; 0x80
    857c:	89a2      	ldrh	r2, [r4, #12]
    857e:	9d01      	ldr	r5, [sp, #4]
    8580:	4313      	orrs	r3, r2
    8582:	81a3      	strh	r3, [r4, #12]
    8584:	e7d6      	b.n	8534 <setvbuf+0xe0>
    8586:	2000      	movs	r0, #0
    8588:	e7ba      	b.n	8500 <setvbuf+0xac>
    858a:	60a5      	str	r5, [r4, #8]
    858c:	e7c4      	b.n	8518 <setvbuf+0xc4>
    858e:	60a0      	str	r0, [r4, #8]
    8590:	e7c2      	b.n	8518 <setvbuf+0xc4>
    8592:	2001      	movs	r0, #1
    8594:	4240      	negs	r0, r0
    8596:	e7bf      	b.n	8518 <setvbuf+0xc4>
    8598:	20000004 	.word	0x20000004
    859c:	000096bc 	.word	0x000096bc
    85a0:	fffff35c 	.word	0xfffff35c
    85a4:	000096dc 	.word	0x000096dc
    85a8:	0000969c 	.word	0x0000969c

000085ac <__swbuf_r>:
    85ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85ae:	0005      	movs	r5, r0
    85b0:	000e      	movs	r6, r1
    85b2:	0014      	movs	r4, r2
    85b4:	2800      	cmp	r0, #0
    85b6:	d004      	beq.n	85c2 <__swbuf_r+0x16>
    85b8:	6983      	ldr	r3, [r0, #24]
    85ba:	2b00      	cmp	r3, #0
    85bc:	d101      	bne.n	85c2 <__swbuf_r+0x16>
    85be:	f000 f9b9 	bl	8934 <__sinit>
    85c2:	4b22      	ldr	r3, [pc, #136]	; (864c <__swbuf_r+0xa0>)
    85c4:	429c      	cmp	r4, r3
    85c6:	d12d      	bne.n	8624 <__swbuf_r+0x78>
    85c8:	686c      	ldr	r4, [r5, #4]
    85ca:	69a3      	ldr	r3, [r4, #24]
    85cc:	60a3      	str	r3, [r4, #8]
    85ce:	89a3      	ldrh	r3, [r4, #12]
    85d0:	071b      	lsls	r3, r3, #28
    85d2:	d531      	bpl.n	8638 <__swbuf_r+0x8c>
    85d4:	6923      	ldr	r3, [r4, #16]
    85d6:	2b00      	cmp	r3, #0
    85d8:	d02e      	beq.n	8638 <__swbuf_r+0x8c>
    85da:	6823      	ldr	r3, [r4, #0]
    85dc:	6922      	ldr	r2, [r4, #16]
    85de:	b2f7      	uxtb	r7, r6
    85e0:	1a98      	subs	r0, r3, r2
    85e2:	6963      	ldr	r3, [r4, #20]
    85e4:	b2f6      	uxtb	r6, r6
    85e6:	4298      	cmp	r0, r3
    85e8:	db05      	blt.n	85f6 <__swbuf_r+0x4a>
    85ea:	0021      	movs	r1, r4
    85ec:	0028      	movs	r0, r5
    85ee:	f000 f933 	bl	8858 <_fflush_r>
    85f2:	2800      	cmp	r0, #0
    85f4:	d126      	bne.n	8644 <__swbuf_r+0x98>
    85f6:	68a3      	ldr	r3, [r4, #8]
    85f8:	3001      	adds	r0, #1
    85fa:	3b01      	subs	r3, #1
    85fc:	60a3      	str	r3, [r4, #8]
    85fe:	6823      	ldr	r3, [r4, #0]
    8600:	1c5a      	adds	r2, r3, #1
    8602:	6022      	str	r2, [r4, #0]
    8604:	701f      	strb	r7, [r3, #0]
    8606:	6963      	ldr	r3, [r4, #20]
    8608:	4298      	cmp	r0, r3
    860a:	d004      	beq.n	8616 <__swbuf_r+0x6a>
    860c:	89a3      	ldrh	r3, [r4, #12]
    860e:	07db      	lsls	r3, r3, #31
    8610:	d51a      	bpl.n	8648 <__swbuf_r+0x9c>
    8612:	2e0a      	cmp	r6, #10
    8614:	d118      	bne.n	8648 <__swbuf_r+0x9c>
    8616:	0021      	movs	r1, r4
    8618:	0028      	movs	r0, r5
    861a:	f000 f91d 	bl	8858 <_fflush_r>
    861e:	2800      	cmp	r0, #0
    8620:	d012      	beq.n	8648 <__swbuf_r+0x9c>
    8622:	e00f      	b.n	8644 <__swbuf_r+0x98>
    8624:	4b0a      	ldr	r3, [pc, #40]	; (8650 <__swbuf_r+0xa4>)
    8626:	429c      	cmp	r4, r3
    8628:	d101      	bne.n	862e <__swbuf_r+0x82>
    862a:	68ac      	ldr	r4, [r5, #8]
    862c:	e7cd      	b.n	85ca <__swbuf_r+0x1e>
    862e:	4b09      	ldr	r3, [pc, #36]	; (8654 <__swbuf_r+0xa8>)
    8630:	429c      	cmp	r4, r3
    8632:	d1ca      	bne.n	85ca <__swbuf_r+0x1e>
    8634:	68ec      	ldr	r4, [r5, #12]
    8636:	e7c8      	b.n	85ca <__swbuf_r+0x1e>
    8638:	0021      	movs	r1, r4
    863a:	0028      	movs	r0, r5
    863c:	f000 f80c 	bl	8658 <__swsetup_r>
    8640:	2800      	cmp	r0, #0
    8642:	d0ca      	beq.n	85da <__swbuf_r+0x2e>
    8644:	2601      	movs	r6, #1
    8646:	4276      	negs	r6, r6
    8648:	0030      	movs	r0, r6
    864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    864c:	000096bc 	.word	0x000096bc
    8650:	000096dc 	.word	0x000096dc
    8654:	0000969c 	.word	0x0000969c

00008658 <__swsetup_r>:
    8658:	4b36      	ldr	r3, [pc, #216]	; (8734 <__swsetup_r+0xdc>)
    865a:	b570      	push	{r4, r5, r6, lr}
    865c:	681d      	ldr	r5, [r3, #0]
    865e:	0006      	movs	r6, r0
    8660:	000c      	movs	r4, r1
    8662:	2d00      	cmp	r5, #0
    8664:	d005      	beq.n	8672 <__swsetup_r+0x1a>
    8666:	69ab      	ldr	r3, [r5, #24]
    8668:	2b00      	cmp	r3, #0
    866a:	d102      	bne.n	8672 <__swsetup_r+0x1a>
    866c:	0028      	movs	r0, r5
    866e:	f000 f961 	bl	8934 <__sinit>
    8672:	4b31      	ldr	r3, [pc, #196]	; (8738 <__swsetup_r+0xe0>)
    8674:	429c      	cmp	r4, r3
    8676:	d10f      	bne.n	8698 <__swsetup_r+0x40>
    8678:	686c      	ldr	r4, [r5, #4]
    867a:	230c      	movs	r3, #12
    867c:	5ee2      	ldrsh	r2, [r4, r3]
    867e:	b293      	uxth	r3, r2
    8680:	0719      	lsls	r1, r3, #28
    8682:	d42d      	bmi.n	86e0 <__swsetup_r+0x88>
    8684:	06d9      	lsls	r1, r3, #27
    8686:	d411      	bmi.n	86ac <__swsetup_r+0x54>
    8688:	2309      	movs	r3, #9
    868a:	2001      	movs	r0, #1
    868c:	6033      	str	r3, [r6, #0]
    868e:	3337      	adds	r3, #55	; 0x37
    8690:	4313      	orrs	r3, r2
    8692:	81a3      	strh	r3, [r4, #12]
    8694:	4240      	negs	r0, r0
    8696:	bd70      	pop	{r4, r5, r6, pc}
    8698:	4b28      	ldr	r3, [pc, #160]	; (873c <__swsetup_r+0xe4>)
    869a:	429c      	cmp	r4, r3
    869c:	d101      	bne.n	86a2 <__swsetup_r+0x4a>
    869e:	68ac      	ldr	r4, [r5, #8]
    86a0:	e7eb      	b.n	867a <__swsetup_r+0x22>
    86a2:	4b27      	ldr	r3, [pc, #156]	; (8740 <__swsetup_r+0xe8>)
    86a4:	429c      	cmp	r4, r3
    86a6:	d1e8      	bne.n	867a <__swsetup_r+0x22>
    86a8:	68ec      	ldr	r4, [r5, #12]
    86aa:	e7e6      	b.n	867a <__swsetup_r+0x22>
    86ac:	075b      	lsls	r3, r3, #29
    86ae:	d513      	bpl.n	86d8 <__swsetup_r+0x80>
    86b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    86b2:	2900      	cmp	r1, #0
    86b4:	d008      	beq.n	86c8 <__swsetup_r+0x70>
    86b6:	0023      	movs	r3, r4
    86b8:	3344      	adds	r3, #68	; 0x44
    86ba:	4299      	cmp	r1, r3
    86bc:	d002      	beq.n	86c4 <__swsetup_r+0x6c>
    86be:	0030      	movs	r0, r6
    86c0:	f000 fa44 	bl	8b4c <_free_r>
    86c4:	2300      	movs	r3, #0
    86c6:	6363      	str	r3, [r4, #52]	; 0x34
    86c8:	2224      	movs	r2, #36	; 0x24
    86ca:	89a3      	ldrh	r3, [r4, #12]
    86cc:	4393      	bics	r3, r2
    86ce:	81a3      	strh	r3, [r4, #12]
    86d0:	2300      	movs	r3, #0
    86d2:	6063      	str	r3, [r4, #4]
    86d4:	6923      	ldr	r3, [r4, #16]
    86d6:	6023      	str	r3, [r4, #0]
    86d8:	2308      	movs	r3, #8
    86da:	89a2      	ldrh	r2, [r4, #12]
    86dc:	4313      	orrs	r3, r2
    86de:	81a3      	strh	r3, [r4, #12]
    86e0:	6923      	ldr	r3, [r4, #16]
    86e2:	2b00      	cmp	r3, #0
    86e4:	d10b      	bne.n	86fe <__swsetup_r+0xa6>
    86e6:	21a0      	movs	r1, #160	; 0xa0
    86e8:	2280      	movs	r2, #128	; 0x80
    86ea:	89a3      	ldrh	r3, [r4, #12]
    86ec:	0089      	lsls	r1, r1, #2
    86ee:	0092      	lsls	r2, r2, #2
    86f0:	400b      	ands	r3, r1
    86f2:	4293      	cmp	r3, r2
    86f4:	d003      	beq.n	86fe <__swsetup_r+0xa6>
    86f6:	0021      	movs	r1, r4
    86f8:	0030      	movs	r0, r6
    86fa:	f000 f9d9 	bl	8ab0 <__smakebuf_r>
    86fe:	2301      	movs	r3, #1
    8700:	89a2      	ldrh	r2, [r4, #12]
    8702:	4013      	ands	r3, r2
    8704:	d011      	beq.n	872a <__swsetup_r+0xd2>
    8706:	2300      	movs	r3, #0
    8708:	60a3      	str	r3, [r4, #8]
    870a:	6963      	ldr	r3, [r4, #20]
    870c:	425b      	negs	r3, r3
    870e:	61a3      	str	r3, [r4, #24]
    8710:	2000      	movs	r0, #0
    8712:	6923      	ldr	r3, [r4, #16]
    8714:	4283      	cmp	r3, r0
    8716:	d1be      	bne.n	8696 <__swsetup_r+0x3e>
    8718:	230c      	movs	r3, #12
    871a:	5ee2      	ldrsh	r2, [r4, r3]
    871c:	0613      	lsls	r3, r2, #24
    871e:	d5ba      	bpl.n	8696 <__swsetup_r+0x3e>
    8720:	2340      	movs	r3, #64	; 0x40
    8722:	4313      	orrs	r3, r2
    8724:	81a3      	strh	r3, [r4, #12]
    8726:	3801      	subs	r0, #1
    8728:	e7b5      	b.n	8696 <__swsetup_r+0x3e>
    872a:	0792      	lsls	r2, r2, #30
    872c:	d400      	bmi.n	8730 <__swsetup_r+0xd8>
    872e:	6963      	ldr	r3, [r4, #20]
    8730:	60a3      	str	r3, [r4, #8]
    8732:	e7ed      	b.n	8710 <__swsetup_r+0xb8>
    8734:	20000004 	.word	0x20000004
    8738:	000096bc 	.word	0x000096bc
    873c:	000096dc 	.word	0x000096dc
    8740:	0000969c 	.word	0x0000969c

00008744 <__sflush_r>:
    8744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8746:	898a      	ldrh	r2, [r1, #12]
    8748:	0005      	movs	r5, r0
    874a:	000c      	movs	r4, r1
    874c:	0713      	lsls	r3, r2, #28
    874e:	d460      	bmi.n	8812 <__sflush_r+0xce>
    8750:	684b      	ldr	r3, [r1, #4]
    8752:	2b00      	cmp	r3, #0
    8754:	dc04      	bgt.n	8760 <__sflush_r+0x1c>
    8756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8758:	2b00      	cmp	r3, #0
    875a:	dc01      	bgt.n	8760 <__sflush_r+0x1c>
    875c:	2000      	movs	r0, #0
    875e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8762:	2f00      	cmp	r7, #0
    8764:	d0fa      	beq.n	875c <__sflush_r+0x18>
    8766:	2300      	movs	r3, #0
    8768:	682e      	ldr	r6, [r5, #0]
    876a:	602b      	str	r3, [r5, #0]
    876c:	2380      	movs	r3, #128	; 0x80
    876e:	015b      	lsls	r3, r3, #5
    8770:	401a      	ands	r2, r3
    8772:	d034      	beq.n	87de <__sflush_r+0x9a>
    8774:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8776:	89a3      	ldrh	r3, [r4, #12]
    8778:	075b      	lsls	r3, r3, #29
    877a:	d506      	bpl.n	878a <__sflush_r+0x46>
    877c:	6863      	ldr	r3, [r4, #4]
    877e:	1ac0      	subs	r0, r0, r3
    8780:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8782:	2b00      	cmp	r3, #0
    8784:	d001      	beq.n	878a <__sflush_r+0x46>
    8786:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8788:	1ac0      	subs	r0, r0, r3
    878a:	0002      	movs	r2, r0
    878c:	6a21      	ldr	r1, [r4, #32]
    878e:	2300      	movs	r3, #0
    8790:	0028      	movs	r0, r5
    8792:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8794:	47b8      	blx	r7
    8796:	89a1      	ldrh	r1, [r4, #12]
    8798:	1c43      	adds	r3, r0, #1
    879a:	d106      	bne.n	87aa <__sflush_r+0x66>
    879c:	682b      	ldr	r3, [r5, #0]
    879e:	2b1d      	cmp	r3, #29
    87a0:	d831      	bhi.n	8806 <__sflush_r+0xc2>
    87a2:	4a2c      	ldr	r2, [pc, #176]	; (8854 <__sflush_r+0x110>)
    87a4:	40da      	lsrs	r2, r3
    87a6:	07d3      	lsls	r3, r2, #31
    87a8:	d52d      	bpl.n	8806 <__sflush_r+0xc2>
    87aa:	2300      	movs	r3, #0
    87ac:	6063      	str	r3, [r4, #4]
    87ae:	6923      	ldr	r3, [r4, #16]
    87b0:	6023      	str	r3, [r4, #0]
    87b2:	04cb      	lsls	r3, r1, #19
    87b4:	d505      	bpl.n	87c2 <__sflush_r+0x7e>
    87b6:	1c43      	adds	r3, r0, #1
    87b8:	d102      	bne.n	87c0 <__sflush_r+0x7c>
    87ba:	682b      	ldr	r3, [r5, #0]
    87bc:	2b00      	cmp	r3, #0
    87be:	d100      	bne.n	87c2 <__sflush_r+0x7e>
    87c0:	6560      	str	r0, [r4, #84]	; 0x54
    87c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    87c4:	602e      	str	r6, [r5, #0]
    87c6:	2900      	cmp	r1, #0
    87c8:	d0c8      	beq.n	875c <__sflush_r+0x18>
    87ca:	0023      	movs	r3, r4
    87cc:	3344      	adds	r3, #68	; 0x44
    87ce:	4299      	cmp	r1, r3
    87d0:	d002      	beq.n	87d8 <__sflush_r+0x94>
    87d2:	0028      	movs	r0, r5
    87d4:	f000 f9ba 	bl	8b4c <_free_r>
    87d8:	2000      	movs	r0, #0
    87da:	6360      	str	r0, [r4, #52]	; 0x34
    87dc:	e7bf      	b.n	875e <__sflush_r+0x1a>
    87de:	2301      	movs	r3, #1
    87e0:	6a21      	ldr	r1, [r4, #32]
    87e2:	0028      	movs	r0, r5
    87e4:	47b8      	blx	r7
    87e6:	1c43      	adds	r3, r0, #1
    87e8:	d1c5      	bne.n	8776 <__sflush_r+0x32>
    87ea:	682b      	ldr	r3, [r5, #0]
    87ec:	2b00      	cmp	r3, #0
    87ee:	d0c2      	beq.n	8776 <__sflush_r+0x32>
    87f0:	2b1d      	cmp	r3, #29
    87f2:	d001      	beq.n	87f8 <__sflush_r+0xb4>
    87f4:	2b16      	cmp	r3, #22
    87f6:	d101      	bne.n	87fc <__sflush_r+0xb8>
    87f8:	602e      	str	r6, [r5, #0]
    87fa:	e7af      	b.n	875c <__sflush_r+0x18>
    87fc:	2340      	movs	r3, #64	; 0x40
    87fe:	89a2      	ldrh	r2, [r4, #12]
    8800:	4313      	orrs	r3, r2
    8802:	81a3      	strh	r3, [r4, #12]
    8804:	e7ab      	b.n	875e <__sflush_r+0x1a>
    8806:	2340      	movs	r3, #64	; 0x40
    8808:	430b      	orrs	r3, r1
    880a:	2001      	movs	r0, #1
    880c:	81a3      	strh	r3, [r4, #12]
    880e:	4240      	negs	r0, r0
    8810:	e7a5      	b.n	875e <__sflush_r+0x1a>
    8812:	690f      	ldr	r7, [r1, #16]
    8814:	2f00      	cmp	r7, #0
    8816:	d0a1      	beq.n	875c <__sflush_r+0x18>
    8818:	680b      	ldr	r3, [r1, #0]
    881a:	600f      	str	r7, [r1, #0]
    881c:	1bdb      	subs	r3, r3, r7
    881e:	9301      	str	r3, [sp, #4]
    8820:	2300      	movs	r3, #0
    8822:	0792      	lsls	r2, r2, #30
    8824:	d100      	bne.n	8828 <__sflush_r+0xe4>
    8826:	694b      	ldr	r3, [r1, #20]
    8828:	60a3      	str	r3, [r4, #8]
    882a:	9b01      	ldr	r3, [sp, #4]
    882c:	2b00      	cmp	r3, #0
    882e:	dc00      	bgt.n	8832 <__sflush_r+0xee>
    8830:	e794      	b.n	875c <__sflush_r+0x18>
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	003a      	movs	r2, r7
    8836:	6a21      	ldr	r1, [r4, #32]
    8838:	0028      	movs	r0, r5
    883a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    883c:	47b0      	blx	r6
    883e:	2800      	cmp	r0, #0
    8840:	dc03      	bgt.n	884a <__sflush_r+0x106>
    8842:	2340      	movs	r3, #64	; 0x40
    8844:	89a2      	ldrh	r2, [r4, #12]
    8846:	4313      	orrs	r3, r2
    8848:	e7df      	b.n	880a <__sflush_r+0xc6>
    884a:	9b01      	ldr	r3, [sp, #4]
    884c:	183f      	adds	r7, r7, r0
    884e:	1a1b      	subs	r3, r3, r0
    8850:	9301      	str	r3, [sp, #4]
    8852:	e7ea      	b.n	882a <__sflush_r+0xe6>
    8854:	20400001 	.word	0x20400001

00008858 <_fflush_r>:
    8858:	690b      	ldr	r3, [r1, #16]
    885a:	b570      	push	{r4, r5, r6, lr}
    885c:	0005      	movs	r5, r0
    885e:	000c      	movs	r4, r1
    8860:	2b00      	cmp	r3, #0
    8862:	d101      	bne.n	8868 <_fflush_r+0x10>
    8864:	2000      	movs	r0, #0
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	2800      	cmp	r0, #0
    886a:	d004      	beq.n	8876 <_fflush_r+0x1e>
    886c:	6983      	ldr	r3, [r0, #24]
    886e:	2b00      	cmp	r3, #0
    8870:	d101      	bne.n	8876 <_fflush_r+0x1e>
    8872:	f000 f85f 	bl	8934 <__sinit>
    8876:	4b0b      	ldr	r3, [pc, #44]	; (88a4 <_fflush_r+0x4c>)
    8878:	429c      	cmp	r4, r3
    887a:	d109      	bne.n	8890 <_fflush_r+0x38>
    887c:	686c      	ldr	r4, [r5, #4]
    887e:	220c      	movs	r2, #12
    8880:	5ea3      	ldrsh	r3, [r4, r2]
    8882:	2b00      	cmp	r3, #0
    8884:	d0ee      	beq.n	8864 <_fflush_r+0xc>
    8886:	0021      	movs	r1, r4
    8888:	0028      	movs	r0, r5
    888a:	f7ff ff5b 	bl	8744 <__sflush_r>
    888e:	e7ea      	b.n	8866 <_fflush_r+0xe>
    8890:	4b05      	ldr	r3, [pc, #20]	; (88a8 <_fflush_r+0x50>)
    8892:	429c      	cmp	r4, r3
    8894:	d101      	bne.n	889a <_fflush_r+0x42>
    8896:	68ac      	ldr	r4, [r5, #8]
    8898:	e7f1      	b.n	887e <_fflush_r+0x26>
    889a:	4b04      	ldr	r3, [pc, #16]	; (88ac <_fflush_r+0x54>)
    889c:	429c      	cmp	r4, r3
    889e:	d1ee      	bne.n	887e <_fflush_r+0x26>
    88a0:	68ec      	ldr	r4, [r5, #12]
    88a2:	e7ec      	b.n	887e <_fflush_r+0x26>
    88a4:	000096bc 	.word	0x000096bc
    88a8:	000096dc 	.word	0x000096dc
    88ac:	0000969c 	.word	0x0000969c

000088b0 <_cleanup_r>:
    88b0:	b510      	push	{r4, lr}
    88b2:	4902      	ldr	r1, [pc, #8]	; (88bc <_cleanup_r+0xc>)
    88b4:	f000 f8b2 	bl	8a1c <_fwalk_reent>
    88b8:	bd10      	pop	{r4, pc}
    88ba:	46c0      	nop			; (mov r8, r8)
    88bc:	00008859 	.word	0x00008859

000088c0 <std.isra.0>:
    88c0:	2300      	movs	r3, #0
    88c2:	b510      	push	{r4, lr}
    88c4:	0004      	movs	r4, r0
    88c6:	6003      	str	r3, [r0, #0]
    88c8:	6043      	str	r3, [r0, #4]
    88ca:	6083      	str	r3, [r0, #8]
    88cc:	8181      	strh	r1, [r0, #12]
    88ce:	6643      	str	r3, [r0, #100]	; 0x64
    88d0:	81c2      	strh	r2, [r0, #14]
    88d2:	6103      	str	r3, [r0, #16]
    88d4:	6143      	str	r3, [r0, #20]
    88d6:	6183      	str	r3, [r0, #24]
    88d8:	0019      	movs	r1, r3
    88da:	2208      	movs	r2, #8
    88dc:	305c      	adds	r0, #92	; 0x5c
    88de:	f7ff fd23 	bl	8328 <memset>
    88e2:	4b05      	ldr	r3, [pc, #20]	; (88f8 <std.isra.0+0x38>)
    88e4:	6224      	str	r4, [r4, #32]
    88e6:	6263      	str	r3, [r4, #36]	; 0x24
    88e8:	4b04      	ldr	r3, [pc, #16]	; (88fc <std.isra.0+0x3c>)
    88ea:	62a3      	str	r3, [r4, #40]	; 0x28
    88ec:	4b04      	ldr	r3, [pc, #16]	; (8900 <std.isra.0+0x40>)
    88ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    88f0:	4b04      	ldr	r3, [pc, #16]	; (8904 <std.isra.0+0x44>)
    88f2:	6323      	str	r3, [r4, #48]	; 0x30
    88f4:	bd10      	pop	{r4, pc}
    88f6:	46c0      	nop			; (mov r8, r8)
    88f8:	00009259 	.word	0x00009259
    88fc:	00009281 	.word	0x00009281
    8900:	000092b9 	.word	0x000092b9
    8904:	000092e5 	.word	0x000092e5

00008908 <__sfmoreglue>:
    8908:	b570      	push	{r4, r5, r6, lr}
    890a:	2568      	movs	r5, #104	; 0x68
    890c:	1e4a      	subs	r2, r1, #1
    890e:	4355      	muls	r5, r2
    8910:	000e      	movs	r6, r1
    8912:	0029      	movs	r1, r5
    8914:	3174      	adds	r1, #116	; 0x74
    8916:	f000 f963 	bl	8be0 <_malloc_r>
    891a:	1e04      	subs	r4, r0, #0
    891c:	d008      	beq.n	8930 <__sfmoreglue+0x28>
    891e:	2100      	movs	r1, #0
    8920:	002a      	movs	r2, r5
    8922:	6001      	str	r1, [r0, #0]
    8924:	6046      	str	r6, [r0, #4]
    8926:	300c      	adds	r0, #12
    8928:	60a0      	str	r0, [r4, #8]
    892a:	3268      	adds	r2, #104	; 0x68
    892c:	f7ff fcfc 	bl	8328 <memset>
    8930:	0020      	movs	r0, r4
    8932:	bd70      	pop	{r4, r5, r6, pc}

00008934 <__sinit>:
    8934:	6983      	ldr	r3, [r0, #24]
    8936:	b513      	push	{r0, r1, r4, lr}
    8938:	0004      	movs	r4, r0
    893a:	2b00      	cmp	r3, #0
    893c:	d128      	bne.n	8990 <__sinit+0x5c>
    893e:	6483      	str	r3, [r0, #72]	; 0x48
    8940:	64c3      	str	r3, [r0, #76]	; 0x4c
    8942:	6503      	str	r3, [r0, #80]	; 0x50
    8944:	4b13      	ldr	r3, [pc, #76]	; (8994 <__sinit+0x60>)
    8946:	4a14      	ldr	r2, [pc, #80]	; (8998 <__sinit+0x64>)
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	6282      	str	r2, [r0, #40]	; 0x28
    894c:	9301      	str	r3, [sp, #4]
    894e:	4298      	cmp	r0, r3
    8950:	d101      	bne.n	8956 <__sinit+0x22>
    8952:	2301      	movs	r3, #1
    8954:	6183      	str	r3, [r0, #24]
    8956:	0020      	movs	r0, r4
    8958:	f000 f820 	bl	899c <__sfp>
    895c:	6060      	str	r0, [r4, #4]
    895e:	0020      	movs	r0, r4
    8960:	f000 f81c 	bl	899c <__sfp>
    8964:	60a0      	str	r0, [r4, #8]
    8966:	0020      	movs	r0, r4
    8968:	f000 f818 	bl	899c <__sfp>
    896c:	2200      	movs	r2, #0
    896e:	60e0      	str	r0, [r4, #12]
    8970:	2104      	movs	r1, #4
    8972:	6860      	ldr	r0, [r4, #4]
    8974:	f7ff ffa4 	bl	88c0 <std.isra.0>
    8978:	2201      	movs	r2, #1
    897a:	2109      	movs	r1, #9
    897c:	68a0      	ldr	r0, [r4, #8]
    897e:	f7ff ff9f 	bl	88c0 <std.isra.0>
    8982:	2202      	movs	r2, #2
    8984:	2112      	movs	r1, #18
    8986:	68e0      	ldr	r0, [r4, #12]
    8988:	f7ff ff9a 	bl	88c0 <std.isra.0>
    898c:	2301      	movs	r3, #1
    898e:	61a3      	str	r3, [r4, #24]
    8990:	bd13      	pop	{r0, r1, r4, pc}
    8992:	46c0      	nop			; (mov r8, r8)
    8994:	00009698 	.word	0x00009698
    8998:	000088b1 	.word	0x000088b1

0000899c <__sfp>:
    899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    899e:	4b1e      	ldr	r3, [pc, #120]	; (8a18 <__sfp+0x7c>)
    89a0:	0007      	movs	r7, r0
    89a2:	681e      	ldr	r6, [r3, #0]
    89a4:	69b3      	ldr	r3, [r6, #24]
    89a6:	2b00      	cmp	r3, #0
    89a8:	d102      	bne.n	89b0 <__sfp+0x14>
    89aa:	0030      	movs	r0, r6
    89ac:	f7ff ffc2 	bl	8934 <__sinit>
    89b0:	3648      	adds	r6, #72	; 0x48
    89b2:	68b4      	ldr	r4, [r6, #8]
    89b4:	6873      	ldr	r3, [r6, #4]
    89b6:	3b01      	subs	r3, #1
    89b8:	d504      	bpl.n	89c4 <__sfp+0x28>
    89ba:	6833      	ldr	r3, [r6, #0]
    89bc:	2b00      	cmp	r3, #0
    89be:	d007      	beq.n	89d0 <__sfp+0x34>
    89c0:	6836      	ldr	r6, [r6, #0]
    89c2:	e7f6      	b.n	89b2 <__sfp+0x16>
    89c4:	220c      	movs	r2, #12
    89c6:	5ea5      	ldrsh	r5, [r4, r2]
    89c8:	2d00      	cmp	r5, #0
    89ca:	d00d      	beq.n	89e8 <__sfp+0x4c>
    89cc:	3468      	adds	r4, #104	; 0x68
    89ce:	e7f2      	b.n	89b6 <__sfp+0x1a>
    89d0:	2104      	movs	r1, #4
    89d2:	0038      	movs	r0, r7
    89d4:	f7ff ff98 	bl	8908 <__sfmoreglue>
    89d8:	6030      	str	r0, [r6, #0]
    89da:	2800      	cmp	r0, #0
    89dc:	d1f0      	bne.n	89c0 <__sfp+0x24>
    89de:	230c      	movs	r3, #12
    89e0:	0004      	movs	r4, r0
    89e2:	603b      	str	r3, [r7, #0]
    89e4:	0020      	movs	r0, r4
    89e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89e8:	2301      	movs	r3, #1
    89ea:	0020      	movs	r0, r4
    89ec:	425b      	negs	r3, r3
    89ee:	81e3      	strh	r3, [r4, #14]
    89f0:	3302      	adds	r3, #2
    89f2:	81a3      	strh	r3, [r4, #12]
    89f4:	6665      	str	r5, [r4, #100]	; 0x64
    89f6:	6025      	str	r5, [r4, #0]
    89f8:	60a5      	str	r5, [r4, #8]
    89fa:	6065      	str	r5, [r4, #4]
    89fc:	6125      	str	r5, [r4, #16]
    89fe:	6165      	str	r5, [r4, #20]
    8a00:	61a5      	str	r5, [r4, #24]
    8a02:	2208      	movs	r2, #8
    8a04:	0029      	movs	r1, r5
    8a06:	305c      	adds	r0, #92	; 0x5c
    8a08:	f7ff fc8e 	bl	8328 <memset>
    8a0c:	6365      	str	r5, [r4, #52]	; 0x34
    8a0e:	63a5      	str	r5, [r4, #56]	; 0x38
    8a10:	64a5      	str	r5, [r4, #72]	; 0x48
    8a12:	64e5      	str	r5, [r4, #76]	; 0x4c
    8a14:	e7e6      	b.n	89e4 <__sfp+0x48>
    8a16:	46c0      	nop			; (mov r8, r8)
    8a18:	00009698 	.word	0x00009698

00008a1c <_fwalk_reent>:
    8a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a1e:	0004      	movs	r4, r0
    8a20:	0007      	movs	r7, r0
    8a22:	2600      	movs	r6, #0
    8a24:	9101      	str	r1, [sp, #4]
    8a26:	3448      	adds	r4, #72	; 0x48
    8a28:	2c00      	cmp	r4, #0
    8a2a:	d101      	bne.n	8a30 <_fwalk_reent+0x14>
    8a2c:	0030      	movs	r0, r6
    8a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8a30:	6863      	ldr	r3, [r4, #4]
    8a32:	68a5      	ldr	r5, [r4, #8]
    8a34:	9300      	str	r3, [sp, #0]
    8a36:	9b00      	ldr	r3, [sp, #0]
    8a38:	3b01      	subs	r3, #1
    8a3a:	9300      	str	r3, [sp, #0]
    8a3c:	d501      	bpl.n	8a42 <_fwalk_reent+0x26>
    8a3e:	6824      	ldr	r4, [r4, #0]
    8a40:	e7f2      	b.n	8a28 <_fwalk_reent+0xc>
    8a42:	89ab      	ldrh	r3, [r5, #12]
    8a44:	2b01      	cmp	r3, #1
    8a46:	d908      	bls.n	8a5a <_fwalk_reent+0x3e>
    8a48:	220e      	movs	r2, #14
    8a4a:	5eab      	ldrsh	r3, [r5, r2]
    8a4c:	3301      	adds	r3, #1
    8a4e:	d004      	beq.n	8a5a <_fwalk_reent+0x3e>
    8a50:	0029      	movs	r1, r5
    8a52:	0038      	movs	r0, r7
    8a54:	9b01      	ldr	r3, [sp, #4]
    8a56:	4798      	blx	r3
    8a58:	4306      	orrs	r6, r0
    8a5a:	3568      	adds	r5, #104	; 0x68
    8a5c:	e7eb      	b.n	8a36 <_fwalk_reent+0x1a>
	...

00008a60 <__swhatbuf_r>:
    8a60:	b570      	push	{r4, r5, r6, lr}
    8a62:	000e      	movs	r6, r1
    8a64:	001d      	movs	r5, r3
    8a66:	230e      	movs	r3, #14
    8a68:	5ec9      	ldrsh	r1, [r1, r3]
    8a6a:	b090      	sub	sp, #64	; 0x40
    8a6c:	0014      	movs	r4, r2
    8a6e:	2900      	cmp	r1, #0
    8a70:	da07      	bge.n	8a82 <__swhatbuf_r+0x22>
    8a72:	2300      	movs	r3, #0
    8a74:	602b      	str	r3, [r5, #0]
    8a76:	89b3      	ldrh	r3, [r6, #12]
    8a78:	061b      	lsls	r3, r3, #24
    8a7a:	d411      	bmi.n	8aa0 <__swhatbuf_r+0x40>
    8a7c:	2380      	movs	r3, #128	; 0x80
    8a7e:	00db      	lsls	r3, r3, #3
    8a80:	e00f      	b.n	8aa2 <__swhatbuf_r+0x42>
    8a82:	aa01      	add	r2, sp, #4
    8a84:	f000 fc5a 	bl	933c <_fstat_r>
    8a88:	2800      	cmp	r0, #0
    8a8a:	dbf2      	blt.n	8a72 <__swhatbuf_r+0x12>
    8a8c:	22f0      	movs	r2, #240	; 0xf0
    8a8e:	9b02      	ldr	r3, [sp, #8]
    8a90:	0212      	lsls	r2, r2, #8
    8a92:	4013      	ands	r3, r2
    8a94:	4a05      	ldr	r2, [pc, #20]	; (8aac <__swhatbuf_r+0x4c>)
    8a96:	189b      	adds	r3, r3, r2
    8a98:	425a      	negs	r2, r3
    8a9a:	4153      	adcs	r3, r2
    8a9c:	602b      	str	r3, [r5, #0]
    8a9e:	e7ed      	b.n	8a7c <__swhatbuf_r+0x1c>
    8aa0:	2340      	movs	r3, #64	; 0x40
    8aa2:	2000      	movs	r0, #0
    8aa4:	6023      	str	r3, [r4, #0]
    8aa6:	b010      	add	sp, #64	; 0x40
    8aa8:	bd70      	pop	{r4, r5, r6, pc}
    8aaa:	46c0      	nop			; (mov r8, r8)
    8aac:	ffffe000 	.word	0xffffe000

00008ab0 <__smakebuf_r>:
    8ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ab2:	2602      	movs	r6, #2
    8ab4:	898b      	ldrh	r3, [r1, #12]
    8ab6:	0005      	movs	r5, r0
    8ab8:	000c      	movs	r4, r1
    8aba:	4233      	tst	r3, r6
    8abc:	d006      	beq.n	8acc <__smakebuf_r+0x1c>
    8abe:	0023      	movs	r3, r4
    8ac0:	3347      	adds	r3, #71	; 0x47
    8ac2:	6023      	str	r3, [r4, #0]
    8ac4:	6123      	str	r3, [r4, #16]
    8ac6:	2301      	movs	r3, #1
    8ac8:	6163      	str	r3, [r4, #20]
    8aca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8acc:	ab01      	add	r3, sp, #4
    8ace:	466a      	mov	r2, sp
    8ad0:	f7ff ffc6 	bl	8a60 <__swhatbuf_r>
    8ad4:	9900      	ldr	r1, [sp, #0]
    8ad6:	0007      	movs	r7, r0
    8ad8:	0028      	movs	r0, r5
    8ada:	f000 f881 	bl	8be0 <_malloc_r>
    8ade:	2800      	cmp	r0, #0
    8ae0:	d108      	bne.n	8af4 <__smakebuf_r+0x44>
    8ae2:	220c      	movs	r2, #12
    8ae4:	5ea3      	ldrsh	r3, [r4, r2]
    8ae6:	059a      	lsls	r2, r3, #22
    8ae8:	d4ef      	bmi.n	8aca <__smakebuf_r+0x1a>
    8aea:	2203      	movs	r2, #3
    8aec:	4393      	bics	r3, r2
    8aee:	431e      	orrs	r6, r3
    8af0:	81a6      	strh	r6, [r4, #12]
    8af2:	e7e4      	b.n	8abe <__smakebuf_r+0xe>
    8af4:	4b0f      	ldr	r3, [pc, #60]	; (8b34 <__smakebuf_r+0x84>)
    8af6:	62ab      	str	r3, [r5, #40]	; 0x28
    8af8:	2380      	movs	r3, #128	; 0x80
    8afa:	89a2      	ldrh	r2, [r4, #12]
    8afc:	6020      	str	r0, [r4, #0]
    8afe:	4313      	orrs	r3, r2
    8b00:	81a3      	strh	r3, [r4, #12]
    8b02:	9b00      	ldr	r3, [sp, #0]
    8b04:	6120      	str	r0, [r4, #16]
    8b06:	6163      	str	r3, [r4, #20]
    8b08:	9b01      	ldr	r3, [sp, #4]
    8b0a:	2b00      	cmp	r3, #0
    8b0c:	d00d      	beq.n	8b2a <__smakebuf_r+0x7a>
    8b0e:	230e      	movs	r3, #14
    8b10:	5ee1      	ldrsh	r1, [r4, r3]
    8b12:	0028      	movs	r0, r5
    8b14:	f000 fc24 	bl	9360 <_isatty_r>
    8b18:	2800      	cmp	r0, #0
    8b1a:	d006      	beq.n	8b2a <__smakebuf_r+0x7a>
    8b1c:	2203      	movs	r2, #3
    8b1e:	89a3      	ldrh	r3, [r4, #12]
    8b20:	4393      	bics	r3, r2
    8b22:	001a      	movs	r2, r3
    8b24:	2301      	movs	r3, #1
    8b26:	4313      	orrs	r3, r2
    8b28:	81a3      	strh	r3, [r4, #12]
    8b2a:	89a0      	ldrh	r0, [r4, #12]
    8b2c:	4338      	orrs	r0, r7
    8b2e:	81a0      	strh	r0, [r4, #12]
    8b30:	e7cb      	b.n	8aca <__smakebuf_r+0x1a>
    8b32:	46c0      	nop			; (mov r8, r8)
    8b34:	000088b1 	.word	0x000088b1

00008b38 <malloc>:
    8b38:	b510      	push	{r4, lr}
    8b3a:	4b03      	ldr	r3, [pc, #12]	; (8b48 <malloc+0x10>)
    8b3c:	0001      	movs	r1, r0
    8b3e:	6818      	ldr	r0, [r3, #0]
    8b40:	f000 f84e 	bl	8be0 <_malloc_r>
    8b44:	bd10      	pop	{r4, pc}
    8b46:	46c0      	nop			; (mov r8, r8)
    8b48:	20000004 	.word	0x20000004

00008b4c <_free_r>:
    8b4c:	b570      	push	{r4, r5, r6, lr}
    8b4e:	0005      	movs	r5, r0
    8b50:	2900      	cmp	r1, #0
    8b52:	d010      	beq.n	8b76 <_free_r+0x2a>
    8b54:	1f0c      	subs	r4, r1, #4
    8b56:	6823      	ldr	r3, [r4, #0]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	da00      	bge.n	8b5e <_free_r+0x12>
    8b5c:	18e4      	adds	r4, r4, r3
    8b5e:	0028      	movs	r0, r5
    8b60:	f000 fc2f 	bl	93c2 <__malloc_lock>
    8b64:	4a1d      	ldr	r2, [pc, #116]	; (8bdc <_free_r+0x90>)
    8b66:	6813      	ldr	r3, [r2, #0]
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d105      	bne.n	8b78 <_free_r+0x2c>
    8b6c:	6063      	str	r3, [r4, #4]
    8b6e:	6014      	str	r4, [r2, #0]
    8b70:	0028      	movs	r0, r5
    8b72:	f000 fc27 	bl	93c4 <__malloc_unlock>
    8b76:	bd70      	pop	{r4, r5, r6, pc}
    8b78:	42a3      	cmp	r3, r4
    8b7a:	d909      	bls.n	8b90 <_free_r+0x44>
    8b7c:	6821      	ldr	r1, [r4, #0]
    8b7e:	1860      	adds	r0, r4, r1
    8b80:	4283      	cmp	r3, r0
    8b82:	d1f3      	bne.n	8b6c <_free_r+0x20>
    8b84:	6818      	ldr	r0, [r3, #0]
    8b86:	685b      	ldr	r3, [r3, #4]
    8b88:	1841      	adds	r1, r0, r1
    8b8a:	6021      	str	r1, [r4, #0]
    8b8c:	e7ee      	b.n	8b6c <_free_r+0x20>
    8b8e:	0013      	movs	r3, r2
    8b90:	685a      	ldr	r2, [r3, #4]
    8b92:	2a00      	cmp	r2, #0
    8b94:	d001      	beq.n	8b9a <_free_r+0x4e>
    8b96:	42a2      	cmp	r2, r4
    8b98:	d9f9      	bls.n	8b8e <_free_r+0x42>
    8b9a:	6819      	ldr	r1, [r3, #0]
    8b9c:	1858      	adds	r0, r3, r1
    8b9e:	42a0      	cmp	r0, r4
    8ba0:	d10b      	bne.n	8bba <_free_r+0x6e>
    8ba2:	6820      	ldr	r0, [r4, #0]
    8ba4:	1809      	adds	r1, r1, r0
    8ba6:	1858      	adds	r0, r3, r1
    8ba8:	6019      	str	r1, [r3, #0]
    8baa:	4282      	cmp	r2, r0
    8bac:	d1e0      	bne.n	8b70 <_free_r+0x24>
    8bae:	6810      	ldr	r0, [r2, #0]
    8bb0:	6852      	ldr	r2, [r2, #4]
    8bb2:	1841      	adds	r1, r0, r1
    8bb4:	6019      	str	r1, [r3, #0]
    8bb6:	605a      	str	r2, [r3, #4]
    8bb8:	e7da      	b.n	8b70 <_free_r+0x24>
    8bba:	42a0      	cmp	r0, r4
    8bbc:	d902      	bls.n	8bc4 <_free_r+0x78>
    8bbe:	230c      	movs	r3, #12
    8bc0:	602b      	str	r3, [r5, #0]
    8bc2:	e7d5      	b.n	8b70 <_free_r+0x24>
    8bc4:	6821      	ldr	r1, [r4, #0]
    8bc6:	1860      	adds	r0, r4, r1
    8bc8:	4282      	cmp	r2, r0
    8bca:	d103      	bne.n	8bd4 <_free_r+0x88>
    8bcc:	6810      	ldr	r0, [r2, #0]
    8bce:	6852      	ldr	r2, [r2, #4]
    8bd0:	1841      	adds	r1, r0, r1
    8bd2:	6021      	str	r1, [r4, #0]
    8bd4:	6062      	str	r2, [r4, #4]
    8bd6:	605c      	str	r4, [r3, #4]
    8bd8:	e7ca      	b.n	8b70 <_free_r+0x24>
    8bda:	46c0      	nop			; (mov r8, r8)
    8bdc:	20000500 	.word	0x20000500

00008be0 <_malloc_r>:
    8be0:	2303      	movs	r3, #3
    8be2:	b570      	push	{r4, r5, r6, lr}
    8be4:	1ccd      	adds	r5, r1, #3
    8be6:	439d      	bics	r5, r3
    8be8:	3508      	adds	r5, #8
    8bea:	0006      	movs	r6, r0
    8bec:	2d0c      	cmp	r5, #12
    8bee:	d21e      	bcs.n	8c2e <_malloc_r+0x4e>
    8bf0:	250c      	movs	r5, #12
    8bf2:	42a9      	cmp	r1, r5
    8bf4:	d81d      	bhi.n	8c32 <_malloc_r+0x52>
    8bf6:	0030      	movs	r0, r6
    8bf8:	f000 fbe3 	bl	93c2 <__malloc_lock>
    8bfc:	4a25      	ldr	r2, [pc, #148]	; (8c94 <_malloc_r+0xb4>)
    8bfe:	6814      	ldr	r4, [r2, #0]
    8c00:	0021      	movs	r1, r4
    8c02:	2900      	cmp	r1, #0
    8c04:	d119      	bne.n	8c3a <_malloc_r+0x5a>
    8c06:	4c24      	ldr	r4, [pc, #144]	; (8c98 <_malloc_r+0xb8>)
    8c08:	6823      	ldr	r3, [r4, #0]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d103      	bne.n	8c16 <_malloc_r+0x36>
    8c0e:	0030      	movs	r0, r6
    8c10:	f000 fb10 	bl	9234 <_sbrk_r>
    8c14:	6020      	str	r0, [r4, #0]
    8c16:	0029      	movs	r1, r5
    8c18:	0030      	movs	r0, r6
    8c1a:	f000 fb0b 	bl	9234 <_sbrk_r>
    8c1e:	1c43      	adds	r3, r0, #1
    8c20:	d12c      	bne.n	8c7c <_malloc_r+0x9c>
    8c22:	230c      	movs	r3, #12
    8c24:	0030      	movs	r0, r6
    8c26:	6033      	str	r3, [r6, #0]
    8c28:	f000 fbcc 	bl	93c4 <__malloc_unlock>
    8c2c:	e003      	b.n	8c36 <_malloc_r+0x56>
    8c2e:	2d00      	cmp	r5, #0
    8c30:	dadf      	bge.n	8bf2 <_malloc_r+0x12>
    8c32:	230c      	movs	r3, #12
    8c34:	6033      	str	r3, [r6, #0]
    8c36:	2000      	movs	r0, #0
    8c38:	bd70      	pop	{r4, r5, r6, pc}
    8c3a:	680b      	ldr	r3, [r1, #0]
    8c3c:	1b5b      	subs	r3, r3, r5
    8c3e:	d41a      	bmi.n	8c76 <_malloc_r+0x96>
    8c40:	2b0b      	cmp	r3, #11
    8c42:	d903      	bls.n	8c4c <_malloc_r+0x6c>
    8c44:	600b      	str	r3, [r1, #0]
    8c46:	18cc      	adds	r4, r1, r3
    8c48:	6025      	str	r5, [r4, #0]
    8c4a:	e003      	b.n	8c54 <_malloc_r+0x74>
    8c4c:	428c      	cmp	r4, r1
    8c4e:	d10e      	bne.n	8c6e <_malloc_r+0x8e>
    8c50:	6863      	ldr	r3, [r4, #4]
    8c52:	6013      	str	r3, [r2, #0]
    8c54:	0030      	movs	r0, r6
    8c56:	f000 fbb5 	bl	93c4 <__malloc_unlock>
    8c5a:	0020      	movs	r0, r4
    8c5c:	2207      	movs	r2, #7
    8c5e:	300b      	adds	r0, #11
    8c60:	1d23      	adds	r3, r4, #4
    8c62:	4390      	bics	r0, r2
    8c64:	1ac3      	subs	r3, r0, r3
    8c66:	d0e7      	beq.n	8c38 <_malloc_r+0x58>
    8c68:	425a      	negs	r2, r3
    8c6a:	50e2      	str	r2, [r4, r3]
    8c6c:	e7e4      	b.n	8c38 <_malloc_r+0x58>
    8c6e:	684b      	ldr	r3, [r1, #4]
    8c70:	6063      	str	r3, [r4, #4]
    8c72:	000c      	movs	r4, r1
    8c74:	e7ee      	b.n	8c54 <_malloc_r+0x74>
    8c76:	000c      	movs	r4, r1
    8c78:	6849      	ldr	r1, [r1, #4]
    8c7a:	e7c2      	b.n	8c02 <_malloc_r+0x22>
    8c7c:	2303      	movs	r3, #3
    8c7e:	1cc4      	adds	r4, r0, #3
    8c80:	439c      	bics	r4, r3
    8c82:	42a0      	cmp	r0, r4
    8c84:	d0e0      	beq.n	8c48 <_malloc_r+0x68>
    8c86:	1a21      	subs	r1, r4, r0
    8c88:	0030      	movs	r0, r6
    8c8a:	f000 fad3 	bl	9234 <_sbrk_r>
    8c8e:	1c43      	adds	r3, r0, #1
    8c90:	d1da      	bne.n	8c48 <_malloc_r+0x68>
    8c92:	e7c6      	b.n	8c22 <_malloc_r+0x42>
    8c94:	20000500 	.word	0x20000500
    8c98:	20000504 	.word	0x20000504

00008c9c <__sfputc_r>:
    8c9c:	6893      	ldr	r3, [r2, #8]
    8c9e:	b510      	push	{r4, lr}
    8ca0:	3b01      	subs	r3, #1
    8ca2:	6093      	str	r3, [r2, #8]
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	da05      	bge.n	8cb4 <__sfputc_r+0x18>
    8ca8:	6994      	ldr	r4, [r2, #24]
    8caa:	42a3      	cmp	r3, r4
    8cac:	db08      	blt.n	8cc0 <__sfputc_r+0x24>
    8cae:	b2cb      	uxtb	r3, r1
    8cb0:	2b0a      	cmp	r3, #10
    8cb2:	d005      	beq.n	8cc0 <__sfputc_r+0x24>
    8cb4:	6813      	ldr	r3, [r2, #0]
    8cb6:	1c58      	adds	r0, r3, #1
    8cb8:	6010      	str	r0, [r2, #0]
    8cba:	7019      	strb	r1, [r3, #0]
    8cbc:	b2c8      	uxtb	r0, r1
    8cbe:	bd10      	pop	{r4, pc}
    8cc0:	f7ff fc74 	bl	85ac <__swbuf_r>
    8cc4:	e7fb      	b.n	8cbe <__sfputc_r+0x22>

00008cc6 <__sfputs_r>:
    8cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cc8:	0006      	movs	r6, r0
    8cca:	000f      	movs	r7, r1
    8ccc:	0014      	movs	r4, r2
    8cce:	18d5      	adds	r5, r2, r3
    8cd0:	42ac      	cmp	r4, r5
    8cd2:	d101      	bne.n	8cd8 <__sfputs_r+0x12>
    8cd4:	2000      	movs	r0, #0
    8cd6:	e007      	b.n	8ce8 <__sfputs_r+0x22>
    8cd8:	7821      	ldrb	r1, [r4, #0]
    8cda:	003a      	movs	r2, r7
    8cdc:	0030      	movs	r0, r6
    8cde:	f7ff ffdd 	bl	8c9c <__sfputc_r>
    8ce2:	3401      	adds	r4, #1
    8ce4:	1c43      	adds	r3, r0, #1
    8ce6:	d1f3      	bne.n	8cd0 <__sfputs_r+0xa>
    8ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008cec <_vfiprintf_r>:
    8cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cee:	b09f      	sub	sp, #124	; 0x7c
    8cf0:	0006      	movs	r6, r0
    8cf2:	000f      	movs	r7, r1
    8cf4:	0014      	movs	r4, r2
    8cf6:	9305      	str	r3, [sp, #20]
    8cf8:	2800      	cmp	r0, #0
    8cfa:	d004      	beq.n	8d06 <_vfiprintf_r+0x1a>
    8cfc:	6983      	ldr	r3, [r0, #24]
    8cfe:	2b00      	cmp	r3, #0
    8d00:	d101      	bne.n	8d06 <_vfiprintf_r+0x1a>
    8d02:	f7ff fe17 	bl	8934 <__sinit>
    8d06:	4b7f      	ldr	r3, [pc, #508]	; (8f04 <_vfiprintf_r+0x218>)
    8d08:	429f      	cmp	r7, r3
    8d0a:	d15c      	bne.n	8dc6 <_vfiprintf_r+0xda>
    8d0c:	6877      	ldr	r7, [r6, #4]
    8d0e:	89bb      	ldrh	r3, [r7, #12]
    8d10:	071b      	lsls	r3, r3, #28
    8d12:	d562      	bpl.n	8dda <_vfiprintf_r+0xee>
    8d14:	693b      	ldr	r3, [r7, #16]
    8d16:	2b00      	cmp	r3, #0
    8d18:	d05f      	beq.n	8dda <_vfiprintf_r+0xee>
    8d1a:	2300      	movs	r3, #0
    8d1c:	ad06      	add	r5, sp, #24
    8d1e:	616b      	str	r3, [r5, #20]
    8d20:	3320      	adds	r3, #32
    8d22:	766b      	strb	r3, [r5, #25]
    8d24:	3310      	adds	r3, #16
    8d26:	76ab      	strb	r3, [r5, #26]
    8d28:	9402      	str	r4, [sp, #8]
    8d2a:	9c02      	ldr	r4, [sp, #8]
    8d2c:	7823      	ldrb	r3, [r4, #0]
    8d2e:	2b00      	cmp	r3, #0
    8d30:	d15d      	bne.n	8dee <_vfiprintf_r+0x102>
    8d32:	9b02      	ldr	r3, [sp, #8]
    8d34:	1ae3      	subs	r3, r4, r3
    8d36:	9304      	str	r3, [sp, #16]
    8d38:	d00d      	beq.n	8d56 <_vfiprintf_r+0x6a>
    8d3a:	9b04      	ldr	r3, [sp, #16]
    8d3c:	9a02      	ldr	r2, [sp, #8]
    8d3e:	0039      	movs	r1, r7
    8d40:	0030      	movs	r0, r6
    8d42:	f7ff ffc0 	bl	8cc6 <__sfputs_r>
    8d46:	1c43      	adds	r3, r0, #1
    8d48:	d100      	bne.n	8d4c <_vfiprintf_r+0x60>
    8d4a:	e0cc      	b.n	8ee6 <_vfiprintf_r+0x1fa>
    8d4c:	696a      	ldr	r2, [r5, #20]
    8d4e:	9b04      	ldr	r3, [sp, #16]
    8d50:	4694      	mov	ip, r2
    8d52:	4463      	add	r3, ip
    8d54:	616b      	str	r3, [r5, #20]
    8d56:	7823      	ldrb	r3, [r4, #0]
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d100      	bne.n	8d5e <_vfiprintf_r+0x72>
    8d5c:	e0c3      	b.n	8ee6 <_vfiprintf_r+0x1fa>
    8d5e:	2201      	movs	r2, #1
    8d60:	2300      	movs	r3, #0
    8d62:	4252      	negs	r2, r2
    8d64:	606a      	str	r2, [r5, #4]
    8d66:	a902      	add	r1, sp, #8
    8d68:	3254      	adds	r2, #84	; 0x54
    8d6a:	1852      	adds	r2, r2, r1
    8d6c:	3401      	adds	r4, #1
    8d6e:	602b      	str	r3, [r5, #0]
    8d70:	60eb      	str	r3, [r5, #12]
    8d72:	60ab      	str	r3, [r5, #8]
    8d74:	7013      	strb	r3, [r2, #0]
    8d76:	65ab      	str	r3, [r5, #88]	; 0x58
    8d78:	7821      	ldrb	r1, [r4, #0]
    8d7a:	2205      	movs	r2, #5
    8d7c:	4862      	ldr	r0, [pc, #392]	; (8f08 <_vfiprintf_r+0x21c>)
    8d7e:	f000 fb15 	bl	93ac <memchr>
    8d82:	1c63      	adds	r3, r4, #1
    8d84:	469c      	mov	ip, r3
    8d86:	2800      	cmp	r0, #0
    8d88:	d135      	bne.n	8df6 <_vfiprintf_r+0x10a>
    8d8a:	6829      	ldr	r1, [r5, #0]
    8d8c:	06cb      	lsls	r3, r1, #27
    8d8e:	d504      	bpl.n	8d9a <_vfiprintf_r+0xae>
    8d90:	2353      	movs	r3, #83	; 0x53
    8d92:	aa02      	add	r2, sp, #8
    8d94:	3020      	adds	r0, #32
    8d96:	189b      	adds	r3, r3, r2
    8d98:	7018      	strb	r0, [r3, #0]
    8d9a:	070b      	lsls	r3, r1, #28
    8d9c:	d504      	bpl.n	8da8 <_vfiprintf_r+0xbc>
    8d9e:	2353      	movs	r3, #83	; 0x53
    8da0:	202b      	movs	r0, #43	; 0x2b
    8da2:	aa02      	add	r2, sp, #8
    8da4:	189b      	adds	r3, r3, r2
    8da6:	7018      	strb	r0, [r3, #0]
    8da8:	7823      	ldrb	r3, [r4, #0]
    8daa:	2b2a      	cmp	r3, #42	; 0x2a
    8dac:	d02c      	beq.n	8e08 <_vfiprintf_r+0x11c>
    8dae:	2000      	movs	r0, #0
    8db0:	210a      	movs	r1, #10
    8db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8db4:	7822      	ldrb	r2, [r4, #0]
    8db6:	3a30      	subs	r2, #48	; 0x30
    8db8:	2a09      	cmp	r2, #9
    8dba:	d800      	bhi.n	8dbe <_vfiprintf_r+0xd2>
    8dbc:	e06b      	b.n	8e96 <_vfiprintf_r+0x1aa>
    8dbe:	2800      	cmp	r0, #0
    8dc0:	d02a      	beq.n	8e18 <_vfiprintf_r+0x12c>
    8dc2:	9309      	str	r3, [sp, #36]	; 0x24
    8dc4:	e028      	b.n	8e18 <_vfiprintf_r+0x12c>
    8dc6:	4b51      	ldr	r3, [pc, #324]	; (8f0c <_vfiprintf_r+0x220>)
    8dc8:	429f      	cmp	r7, r3
    8dca:	d101      	bne.n	8dd0 <_vfiprintf_r+0xe4>
    8dcc:	68b7      	ldr	r7, [r6, #8]
    8dce:	e79e      	b.n	8d0e <_vfiprintf_r+0x22>
    8dd0:	4b4f      	ldr	r3, [pc, #316]	; (8f10 <_vfiprintf_r+0x224>)
    8dd2:	429f      	cmp	r7, r3
    8dd4:	d19b      	bne.n	8d0e <_vfiprintf_r+0x22>
    8dd6:	68f7      	ldr	r7, [r6, #12]
    8dd8:	e799      	b.n	8d0e <_vfiprintf_r+0x22>
    8dda:	0039      	movs	r1, r7
    8ddc:	0030      	movs	r0, r6
    8dde:	f7ff fc3b 	bl	8658 <__swsetup_r>
    8de2:	2800      	cmp	r0, #0
    8de4:	d099      	beq.n	8d1a <_vfiprintf_r+0x2e>
    8de6:	2001      	movs	r0, #1
    8de8:	4240      	negs	r0, r0
    8dea:	b01f      	add	sp, #124	; 0x7c
    8dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dee:	2b25      	cmp	r3, #37	; 0x25
    8df0:	d09f      	beq.n	8d32 <_vfiprintf_r+0x46>
    8df2:	3401      	adds	r4, #1
    8df4:	e79a      	b.n	8d2c <_vfiprintf_r+0x40>
    8df6:	4b44      	ldr	r3, [pc, #272]	; (8f08 <_vfiprintf_r+0x21c>)
    8df8:	6829      	ldr	r1, [r5, #0]
    8dfa:	1ac0      	subs	r0, r0, r3
    8dfc:	2301      	movs	r3, #1
    8dfe:	4083      	lsls	r3, r0
    8e00:	430b      	orrs	r3, r1
    8e02:	602b      	str	r3, [r5, #0]
    8e04:	4664      	mov	r4, ip
    8e06:	e7b7      	b.n	8d78 <_vfiprintf_r+0x8c>
    8e08:	9b05      	ldr	r3, [sp, #20]
    8e0a:	1d18      	adds	r0, r3, #4
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	9005      	str	r0, [sp, #20]
    8e10:	2b00      	cmp	r3, #0
    8e12:	db3a      	blt.n	8e8a <_vfiprintf_r+0x19e>
    8e14:	9309      	str	r3, [sp, #36]	; 0x24
    8e16:	4664      	mov	r4, ip
    8e18:	7823      	ldrb	r3, [r4, #0]
    8e1a:	2b2e      	cmp	r3, #46	; 0x2e
    8e1c:	d10b      	bne.n	8e36 <_vfiprintf_r+0x14a>
    8e1e:	7863      	ldrb	r3, [r4, #1]
    8e20:	1c62      	adds	r2, r4, #1
    8e22:	2b2a      	cmp	r3, #42	; 0x2a
    8e24:	d13f      	bne.n	8ea6 <_vfiprintf_r+0x1ba>
    8e26:	9b05      	ldr	r3, [sp, #20]
    8e28:	3402      	adds	r4, #2
    8e2a:	1d1a      	adds	r2, r3, #4
    8e2c:	681b      	ldr	r3, [r3, #0]
    8e2e:	9205      	str	r2, [sp, #20]
    8e30:	2b00      	cmp	r3, #0
    8e32:	db35      	blt.n	8ea0 <_vfiprintf_r+0x1b4>
    8e34:	9307      	str	r3, [sp, #28]
    8e36:	7821      	ldrb	r1, [r4, #0]
    8e38:	2203      	movs	r2, #3
    8e3a:	4836      	ldr	r0, [pc, #216]	; (8f14 <_vfiprintf_r+0x228>)
    8e3c:	f000 fab6 	bl	93ac <memchr>
    8e40:	2800      	cmp	r0, #0
    8e42:	d007      	beq.n	8e54 <_vfiprintf_r+0x168>
    8e44:	4b33      	ldr	r3, [pc, #204]	; (8f14 <_vfiprintf_r+0x228>)
    8e46:	682a      	ldr	r2, [r5, #0]
    8e48:	1ac0      	subs	r0, r0, r3
    8e4a:	2340      	movs	r3, #64	; 0x40
    8e4c:	4083      	lsls	r3, r0
    8e4e:	4313      	orrs	r3, r2
    8e50:	602b      	str	r3, [r5, #0]
    8e52:	3401      	adds	r4, #1
    8e54:	7821      	ldrb	r1, [r4, #0]
    8e56:	1c63      	adds	r3, r4, #1
    8e58:	2206      	movs	r2, #6
    8e5a:	482f      	ldr	r0, [pc, #188]	; (8f18 <_vfiprintf_r+0x22c>)
    8e5c:	9302      	str	r3, [sp, #8]
    8e5e:	7629      	strb	r1, [r5, #24]
    8e60:	f000 faa4 	bl	93ac <memchr>
    8e64:	2800      	cmp	r0, #0
    8e66:	d044      	beq.n	8ef2 <_vfiprintf_r+0x206>
    8e68:	4b2c      	ldr	r3, [pc, #176]	; (8f1c <_vfiprintf_r+0x230>)
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d12f      	bne.n	8ece <_vfiprintf_r+0x1e2>
    8e6e:	6829      	ldr	r1, [r5, #0]
    8e70:	9b05      	ldr	r3, [sp, #20]
    8e72:	2207      	movs	r2, #7
    8e74:	05c9      	lsls	r1, r1, #23
    8e76:	d528      	bpl.n	8eca <_vfiprintf_r+0x1de>
    8e78:	189b      	adds	r3, r3, r2
    8e7a:	4393      	bics	r3, r2
    8e7c:	3308      	adds	r3, #8
    8e7e:	9305      	str	r3, [sp, #20]
    8e80:	696b      	ldr	r3, [r5, #20]
    8e82:	9a03      	ldr	r2, [sp, #12]
    8e84:	189b      	adds	r3, r3, r2
    8e86:	616b      	str	r3, [r5, #20]
    8e88:	e74f      	b.n	8d2a <_vfiprintf_r+0x3e>
    8e8a:	425b      	negs	r3, r3
    8e8c:	60eb      	str	r3, [r5, #12]
    8e8e:	2302      	movs	r3, #2
    8e90:	430b      	orrs	r3, r1
    8e92:	602b      	str	r3, [r5, #0]
    8e94:	e7bf      	b.n	8e16 <_vfiprintf_r+0x12a>
    8e96:	434b      	muls	r3, r1
    8e98:	3401      	adds	r4, #1
    8e9a:	189b      	adds	r3, r3, r2
    8e9c:	2001      	movs	r0, #1
    8e9e:	e789      	b.n	8db4 <_vfiprintf_r+0xc8>
    8ea0:	2301      	movs	r3, #1
    8ea2:	425b      	negs	r3, r3
    8ea4:	e7c6      	b.n	8e34 <_vfiprintf_r+0x148>
    8ea6:	2300      	movs	r3, #0
    8ea8:	0014      	movs	r4, r2
    8eaa:	200a      	movs	r0, #10
    8eac:	001a      	movs	r2, r3
    8eae:	606b      	str	r3, [r5, #4]
    8eb0:	7821      	ldrb	r1, [r4, #0]
    8eb2:	3930      	subs	r1, #48	; 0x30
    8eb4:	2909      	cmp	r1, #9
    8eb6:	d903      	bls.n	8ec0 <_vfiprintf_r+0x1d4>
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d0bc      	beq.n	8e36 <_vfiprintf_r+0x14a>
    8ebc:	9207      	str	r2, [sp, #28]
    8ebe:	e7ba      	b.n	8e36 <_vfiprintf_r+0x14a>
    8ec0:	4342      	muls	r2, r0
    8ec2:	3401      	adds	r4, #1
    8ec4:	1852      	adds	r2, r2, r1
    8ec6:	2301      	movs	r3, #1
    8ec8:	e7f2      	b.n	8eb0 <_vfiprintf_r+0x1c4>
    8eca:	3307      	adds	r3, #7
    8ecc:	e7d5      	b.n	8e7a <_vfiprintf_r+0x18e>
    8ece:	ab05      	add	r3, sp, #20
    8ed0:	9300      	str	r3, [sp, #0]
    8ed2:	003a      	movs	r2, r7
    8ed4:	4b12      	ldr	r3, [pc, #72]	; (8f20 <_vfiprintf_r+0x234>)
    8ed6:	0029      	movs	r1, r5
    8ed8:	0030      	movs	r0, r6
    8eda:	e000      	b.n	8ede <_vfiprintf_r+0x1f2>
    8edc:	bf00      	nop
    8ede:	9003      	str	r0, [sp, #12]
    8ee0:	9b03      	ldr	r3, [sp, #12]
    8ee2:	3301      	adds	r3, #1
    8ee4:	d1cc      	bne.n	8e80 <_vfiprintf_r+0x194>
    8ee6:	89bb      	ldrh	r3, [r7, #12]
    8ee8:	065b      	lsls	r3, r3, #25
    8eea:	d500      	bpl.n	8eee <_vfiprintf_r+0x202>
    8eec:	e77b      	b.n	8de6 <_vfiprintf_r+0xfa>
    8eee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ef0:	e77b      	b.n	8dea <_vfiprintf_r+0xfe>
    8ef2:	ab05      	add	r3, sp, #20
    8ef4:	9300      	str	r3, [sp, #0]
    8ef6:	003a      	movs	r2, r7
    8ef8:	4b09      	ldr	r3, [pc, #36]	; (8f20 <_vfiprintf_r+0x234>)
    8efa:	0029      	movs	r1, r5
    8efc:	0030      	movs	r0, r6
    8efe:	f000 f87f 	bl	9000 <_printf_i>
    8f02:	e7ec      	b.n	8ede <_vfiprintf_r+0x1f2>
    8f04:	000096bc 	.word	0x000096bc
    8f08:	000096fc 	.word	0x000096fc
    8f0c:	000096dc 	.word	0x000096dc
    8f10:	0000969c 	.word	0x0000969c
    8f14:	00009702 	.word	0x00009702
    8f18:	00009706 	.word	0x00009706
    8f1c:	00000000 	.word	0x00000000
    8f20:	00008cc7 	.word	0x00008cc7

00008f24 <_printf_common>:
    8f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f26:	0015      	movs	r5, r2
    8f28:	9301      	str	r3, [sp, #4]
    8f2a:	688a      	ldr	r2, [r1, #8]
    8f2c:	690b      	ldr	r3, [r1, #16]
    8f2e:	9000      	str	r0, [sp, #0]
    8f30:	000c      	movs	r4, r1
    8f32:	4293      	cmp	r3, r2
    8f34:	da00      	bge.n	8f38 <_printf_common+0x14>
    8f36:	0013      	movs	r3, r2
    8f38:	0022      	movs	r2, r4
    8f3a:	602b      	str	r3, [r5, #0]
    8f3c:	3243      	adds	r2, #67	; 0x43
    8f3e:	7812      	ldrb	r2, [r2, #0]
    8f40:	2a00      	cmp	r2, #0
    8f42:	d001      	beq.n	8f48 <_printf_common+0x24>
    8f44:	3301      	adds	r3, #1
    8f46:	602b      	str	r3, [r5, #0]
    8f48:	6823      	ldr	r3, [r4, #0]
    8f4a:	069b      	lsls	r3, r3, #26
    8f4c:	d502      	bpl.n	8f54 <_printf_common+0x30>
    8f4e:	682b      	ldr	r3, [r5, #0]
    8f50:	3302      	adds	r3, #2
    8f52:	602b      	str	r3, [r5, #0]
    8f54:	2706      	movs	r7, #6
    8f56:	6823      	ldr	r3, [r4, #0]
    8f58:	401f      	ands	r7, r3
    8f5a:	d027      	beq.n	8fac <_printf_common+0x88>
    8f5c:	0023      	movs	r3, r4
    8f5e:	3343      	adds	r3, #67	; 0x43
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	1e5a      	subs	r2, r3, #1
    8f64:	4193      	sbcs	r3, r2
    8f66:	6822      	ldr	r2, [r4, #0]
    8f68:	0692      	lsls	r2, r2, #26
    8f6a:	d430      	bmi.n	8fce <_printf_common+0xaa>
    8f6c:	0022      	movs	r2, r4
    8f6e:	9901      	ldr	r1, [sp, #4]
    8f70:	3243      	adds	r2, #67	; 0x43
    8f72:	9800      	ldr	r0, [sp, #0]
    8f74:	9e08      	ldr	r6, [sp, #32]
    8f76:	47b0      	blx	r6
    8f78:	1c43      	adds	r3, r0, #1
    8f7a:	d025      	beq.n	8fc8 <_printf_common+0xa4>
    8f7c:	2306      	movs	r3, #6
    8f7e:	6820      	ldr	r0, [r4, #0]
    8f80:	682a      	ldr	r2, [r5, #0]
    8f82:	68e1      	ldr	r1, [r4, #12]
    8f84:	4003      	ands	r3, r0
    8f86:	2500      	movs	r5, #0
    8f88:	2b04      	cmp	r3, #4
    8f8a:	d103      	bne.n	8f94 <_printf_common+0x70>
    8f8c:	1a8d      	subs	r5, r1, r2
    8f8e:	43eb      	mvns	r3, r5
    8f90:	17db      	asrs	r3, r3, #31
    8f92:	401d      	ands	r5, r3
    8f94:	68a3      	ldr	r3, [r4, #8]
    8f96:	6922      	ldr	r2, [r4, #16]
    8f98:	4293      	cmp	r3, r2
    8f9a:	dd01      	ble.n	8fa0 <_printf_common+0x7c>
    8f9c:	1a9b      	subs	r3, r3, r2
    8f9e:	18ed      	adds	r5, r5, r3
    8fa0:	2700      	movs	r7, #0
    8fa2:	42bd      	cmp	r5, r7
    8fa4:	d120      	bne.n	8fe8 <_printf_common+0xc4>
    8fa6:	2000      	movs	r0, #0
    8fa8:	e010      	b.n	8fcc <_printf_common+0xa8>
    8faa:	3701      	adds	r7, #1
    8fac:	68e3      	ldr	r3, [r4, #12]
    8fae:	682a      	ldr	r2, [r5, #0]
    8fb0:	1a9b      	subs	r3, r3, r2
    8fb2:	429f      	cmp	r7, r3
    8fb4:	dad2      	bge.n	8f5c <_printf_common+0x38>
    8fb6:	0022      	movs	r2, r4
    8fb8:	2301      	movs	r3, #1
    8fba:	3219      	adds	r2, #25
    8fbc:	9901      	ldr	r1, [sp, #4]
    8fbe:	9800      	ldr	r0, [sp, #0]
    8fc0:	9e08      	ldr	r6, [sp, #32]
    8fc2:	47b0      	blx	r6
    8fc4:	1c43      	adds	r3, r0, #1
    8fc6:	d1f0      	bne.n	8faa <_printf_common+0x86>
    8fc8:	2001      	movs	r0, #1
    8fca:	4240      	negs	r0, r0
    8fcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8fce:	2030      	movs	r0, #48	; 0x30
    8fd0:	18e1      	adds	r1, r4, r3
    8fd2:	3143      	adds	r1, #67	; 0x43
    8fd4:	7008      	strb	r0, [r1, #0]
    8fd6:	0021      	movs	r1, r4
    8fd8:	1c5a      	adds	r2, r3, #1
    8fda:	3145      	adds	r1, #69	; 0x45
    8fdc:	7809      	ldrb	r1, [r1, #0]
    8fde:	18a2      	adds	r2, r4, r2
    8fe0:	3243      	adds	r2, #67	; 0x43
    8fe2:	3302      	adds	r3, #2
    8fe4:	7011      	strb	r1, [r2, #0]
    8fe6:	e7c1      	b.n	8f6c <_printf_common+0x48>
    8fe8:	0022      	movs	r2, r4
    8fea:	2301      	movs	r3, #1
    8fec:	321a      	adds	r2, #26
    8fee:	9901      	ldr	r1, [sp, #4]
    8ff0:	9800      	ldr	r0, [sp, #0]
    8ff2:	9e08      	ldr	r6, [sp, #32]
    8ff4:	47b0      	blx	r6
    8ff6:	1c43      	adds	r3, r0, #1
    8ff8:	d0e6      	beq.n	8fc8 <_printf_common+0xa4>
    8ffa:	3701      	adds	r7, #1
    8ffc:	e7d1      	b.n	8fa2 <_printf_common+0x7e>
	...

00009000 <_printf_i>:
    9000:	b5f0      	push	{r4, r5, r6, r7, lr}
    9002:	b08b      	sub	sp, #44	; 0x2c
    9004:	9206      	str	r2, [sp, #24]
    9006:	000a      	movs	r2, r1
    9008:	3243      	adds	r2, #67	; 0x43
    900a:	9307      	str	r3, [sp, #28]
    900c:	9005      	str	r0, [sp, #20]
    900e:	9204      	str	r2, [sp, #16]
    9010:	7e0a      	ldrb	r2, [r1, #24]
    9012:	000c      	movs	r4, r1
    9014:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9016:	2a6e      	cmp	r2, #110	; 0x6e
    9018:	d100      	bne.n	901c <_printf_i+0x1c>
    901a:	e08f      	b.n	913c <_printf_i+0x13c>
    901c:	d817      	bhi.n	904e <_printf_i+0x4e>
    901e:	2a63      	cmp	r2, #99	; 0x63
    9020:	d02c      	beq.n	907c <_printf_i+0x7c>
    9022:	d808      	bhi.n	9036 <_printf_i+0x36>
    9024:	2a00      	cmp	r2, #0
    9026:	d100      	bne.n	902a <_printf_i+0x2a>
    9028:	e099      	b.n	915e <_printf_i+0x15e>
    902a:	2a58      	cmp	r2, #88	; 0x58
    902c:	d054      	beq.n	90d8 <_printf_i+0xd8>
    902e:	0026      	movs	r6, r4
    9030:	3642      	adds	r6, #66	; 0x42
    9032:	7032      	strb	r2, [r6, #0]
    9034:	e029      	b.n	908a <_printf_i+0x8a>
    9036:	2a64      	cmp	r2, #100	; 0x64
    9038:	d001      	beq.n	903e <_printf_i+0x3e>
    903a:	2a69      	cmp	r2, #105	; 0x69
    903c:	d1f7      	bne.n	902e <_printf_i+0x2e>
    903e:	6821      	ldr	r1, [r4, #0]
    9040:	681a      	ldr	r2, [r3, #0]
    9042:	0608      	lsls	r0, r1, #24
    9044:	d523      	bpl.n	908e <_printf_i+0x8e>
    9046:	1d11      	adds	r1, r2, #4
    9048:	6019      	str	r1, [r3, #0]
    904a:	6815      	ldr	r5, [r2, #0]
    904c:	e025      	b.n	909a <_printf_i+0x9a>
    904e:	2a73      	cmp	r2, #115	; 0x73
    9050:	d100      	bne.n	9054 <_printf_i+0x54>
    9052:	e088      	b.n	9166 <_printf_i+0x166>
    9054:	d808      	bhi.n	9068 <_printf_i+0x68>
    9056:	2a6f      	cmp	r2, #111	; 0x6f
    9058:	d029      	beq.n	90ae <_printf_i+0xae>
    905a:	2a70      	cmp	r2, #112	; 0x70
    905c:	d1e7      	bne.n	902e <_printf_i+0x2e>
    905e:	2220      	movs	r2, #32
    9060:	6809      	ldr	r1, [r1, #0]
    9062:	430a      	orrs	r2, r1
    9064:	6022      	str	r2, [r4, #0]
    9066:	e003      	b.n	9070 <_printf_i+0x70>
    9068:	2a75      	cmp	r2, #117	; 0x75
    906a:	d020      	beq.n	90ae <_printf_i+0xae>
    906c:	2a78      	cmp	r2, #120	; 0x78
    906e:	d1de      	bne.n	902e <_printf_i+0x2e>
    9070:	0022      	movs	r2, r4
    9072:	2178      	movs	r1, #120	; 0x78
    9074:	3245      	adds	r2, #69	; 0x45
    9076:	7011      	strb	r1, [r2, #0]
    9078:	4a6c      	ldr	r2, [pc, #432]	; (922c <_printf_i+0x22c>)
    907a:	e030      	b.n	90de <_printf_i+0xde>
    907c:	000e      	movs	r6, r1
    907e:	681a      	ldr	r2, [r3, #0]
    9080:	3642      	adds	r6, #66	; 0x42
    9082:	1d11      	adds	r1, r2, #4
    9084:	6019      	str	r1, [r3, #0]
    9086:	6813      	ldr	r3, [r2, #0]
    9088:	7033      	strb	r3, [r6, #0]
    908a:	2301      	movs	r3, #1
    908c:	e079      	b.n	9182 <_printf_i+0x182>
    908e:	0649      	lsls	r1, r1, #25
    9090:	d5d9      	bpl.n	9046 <_printf_i+0x46>
    9092:	1d11      	adds	r1, r2, #4
    9094:	6019      	str	r1, [r3, #0]
    9096:	2300      	movs	r3, #0
    9098:	5ed5      	ldrsh	r5, [r2, r3]
    909a:	2d00      	cmp	r5, #0
    909c:	da03      	bge.n	90a6 <_printf_i+0xa6>
    909e:	232d      	movs	r3, #45	; 0x2d
    90a0:	9a04      	ldr	r2, [sp, #16]
    90a2:	426d      	negs	r5, r5
    90a4:	7013      	strb	r3, [r2, #0]
    90a6:	4b62      	ldr	r3, [pc, #392]	; (9230 <_printf_i+0x230>)
    90a8:	270a      	movs	r7, #10
    90aa:	9303      	str	r3, [sp, #12]
    90ac:	e02f      	b.n	910e <_printf_i+0x10e>
    90ae:	6820      	ldr	r0, [r4, #0]
    90b0:	6819      	ldr	r1, [r3, #0]
    90b2:	0605      	lsls	r5, r0, #24
    90b4:	d503      	bpl.n	90be <_printf_i+0xbe>
    90b6:	1d08      	adds	r0, r1, #4
    90b8:	6018      	str	r0, [r3, #0]
    90ba:	680d      	ldr	r5, [r1, #0]
    90bc:	e005      	b.n	90ca <_printf_i+0xca>
    90be:	0640      	lsls	r0, r0, #25
    90c0:	d5f9      	bpl.n	90b6 <_printf_i+0xb6>
    90c2:	680d      	ldr	r5, [r1, #0]
    90c4:	1d08      	adds	r0, r1, #4
    90c6:	6018      	str	r0, [r3, #0]
    90c8:	b2ad      	uxth	r5, r5
    90ca:	4b59      	ldr	r3, [pc, #356]	; (9230 <_printf_i+0x230>)
    90cc:	2708      	movs	r7, #8
    90ce:	9303      	str	r3, [sp, #12]
    90d0:	2a6f      	cmp	r2, #111	; 0x6f
    90d2:	d018      	beq.n	9106 <_printf_i+0x106>
    90d4:	270a      	movs	r7, #10
    90d6:	e016      	b.n	9106 <_printf_i+0x106>
    90d8:	3145      	adds	r1, #69	; 0x45
    90da:	700a      	strb	r2, [r1, #0]
    90dc:	4a54      	ldr	r2, [pc, #336]	; (9230 <_printf_i+0x230>)
    90de:	9203      	str	r2, [sp, #12]
    90e0:	681a      	ldr	r2, [r3, #0]
    90e2:	6821      	ldr	r1, [r4, #0]
    90e4:	1d10      	adds	r0, r2, #4
    90e6:	6018      	str	r0, [r3, #0]
    90e8:	6815      	ldr	r5, [r2, #0]
    90ea:	0608      	lsls	r0, r1, #24
    90ec:	d522      	bpl.n	9134 <_printf_i+0x134>
    90ee:	07cb      	lsls	r3, r1, #31
    90f0:	d502      	bpl.n	90f8 <_printf_i+0xf8>
    90f2:	2320      	movs	r3, #32
    90f4:	4319      	orrs	r1, r3
    90f6:	6021      	str	r1, [r4, #0]
    90f8:	2710      	movs	r7, #16
    90fa:	2d00      	cmp	r5, #0
    90fc:	d103      	bne.n	9106 <_printf_i+0x106>
    90fe:	2320      	movs	r3, #32
    9100:	6822      	ldr	r2, [r4, #0]
    9102:	439a      	bics	r2, r3
    9104:	6022      	str	r2, [r4, #0]
    9106:	0023      	movs	r3, r4
    9108:	2200      	movs	r2, #0
    910a:	3343      	adds	r3, #67	; 0x43
    910c:	701a      	strb	r2, [r3, #0]
    910e:	6863      	ldr	r3, [r4, #4]
    9110:	60a3      	str	r3, [r4, #8]
    9112:	2b00      	cmp	r3, #0
    9114:	db5c      	blt.n	91d0 <_printf_i+0x1d0>
    9116:	2204      	movs	r2, #4
    9118:	6821      	ldr	r1, [r4, #0]
    911a:	4391      	bics	r1, r2
    911c:	6021      	str	r1, [r4, #0]
    911e:	2d00      	cmp	r5, #0
    9120:	d158      	bne.n	91d4 <_printf_i+0x1d4>
    9122:	9e04      	ldr	r6, [sp, #16]
    9124:	2b00      	cmp	r3, #0
    9126:	d064      	beq.n	91f2 <_printf_i+0x1f2>
    9128:	0026      	movs	r6, r4
    912a:	9b03      	ldr	r3, [sp, #12]
    912c:	3642      	adds	r6, #66	; 0x42
    912e:	781b      	ldrb	r3, [r3, #0]
    9130:	7033      	strb	r3, [r6, #0]
    9132:	e05e      	b.n	91f2 <_printf_i+0x1f2>
    9134:	0648      	lsls	r0, r1, #25
    9136:	d5da      	bpl.n	90ee <_printf_i+0xee>
    9138:	b2ad      	uxth	r5, r5
    913a:	e7d8      	b.n	90ee <_printf_i+0xee>
    913c:	6809      	ldr	r1, [r1, #0]
    913e:	681a      	ldr	r2, [r3, #0]
    9140:	0608      	lsls	r0, r1, #24
    9142:	d505      	bpl.n	9150 <_printf_i+0x150>
    9144:	1d11      	adds	r1, r2, #4
    9146:	6019      	str	r1, [r3, #0]
    9148:	6813      	ldr	r3, [r2, #0]
    914a:	6962      	ldr	r2, [r4, #20]
    914c:	601a      	str	r2, [r3, #0]
    914e:	e006      	b.n	915e <_printf_i+0x15e>
    9150:	0649      	lsls	r1, r1, #25
    9152:	d5f7      	bpl.n	9144 <_printf_i+0x144>
    9154:	1d11      	adds	r1, r2, #4
    9156:	6019      	str	r1, [r3, #0]
    9158:	6813      	ldr	r3, [r2, #0]
    915a:	8aa2      	ldrh	r2, [r4, #20]
    915c:	801a      	strh	r2, [r3, #0]
    915e:	2300      	movs	r3, #0
    9160:	9e04      	ldr	r6, [sp, #16]
    9162:	6123      	str	r3, [r4, #16]
    9164:	e054      	b.n	9210 <_printf_i+0x210>
    9166:	681a      	ldr	r2, [r3, #0]
    9168:	1d11      	adds	r1, r2, #4
    916a:	6019      	str	r1, [r3, #0]
    916c:	6816      	ldr	r6, [r2, #0]
    916e:	2100      	movs	r1, #0
    9170:	6862      	ldr	r2, [r4, #4]
    9172:	0030      	movs	r0, r6
    9174:	f000 f91a 	bl	93ac <memchr>
    9178:	2800      	cmp	r0, #0
    917a:	d001      	beq.n	9180 <_printf_i+0x180>
    917c:	1b80      	subs	r0, r0, r6
    917e:	6060      	str	r0, [r4, #4]
    9180:	6863      	ldr	r3, [r4, #4]
    9182:	6123      	str	r3, [r4, #16]
    9184:	2300      	movs	r3, #0
    9186:	9a04      	ldr	r2, [sp, #16]
    9188:	7013      	strb	r3, [r2, #0]
    918a:	e041      	b.n	9210 <_printf_i+0x210>
    918c:	6923      	ldr	r3, [r4, #16]
    918e:	0032      	movs	r2, r6
    9190:	9906      	ldr	r1, [sp, #24]
    9192:	9805      	ldr	r0, [sp, #20]
    9194:	9d07      	ldr	r5, [sp, #28]
    9196:	47a8      	blx	r5
    9198:	1c43      	adds	r3, r0, #1
    919a:	d043      	beq.n	9224 <_printf_i+0x224>
    919c:	6823      	ldr	r3, [r4, #0]
    919e:	2500      	movs	r5, #0
    91a0:	079b      	lsls	r3, r3, #30
    91a2:	d40f      	bmi.n	91c4 <_printf_i+0x1c4>
    91a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    91a6:	68e0      	ldr	r0, [r4, #12]
    91a8:	4298      	cmp	r0, r3
    91aa:	da3d      	bge.n	9228 <_printf_i+0x228>
    91ac:	0018      	movs	r0, r3
    91ae:	e03b      	b.n	9228 <_printf_i+0x228>
    91b0:	0022      	movs	r2, r4
    91b2:	2301      	movs	r3, #1
    91b4:	3219      	adds	r2, #25
    91b6:	9906      	ldr	r1, [sp, #24]
    91b8:	9805      	ldr	r0, [sp, #20]
    91ba:	9e07      	ldr	r6, [sp, #28]
    91bc:	47b0      	blx	r6
    91be:	1c43      	adds	r3, r0, #1
    91c0:	d030      	beq.n	9224 <_printf_i+0x224>
    91c2:	3501      	adds	r5, #1
    91c4:	68e3      	ldr	r3, [r4, #12]
    91c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    91c8:	1a9b      	subs	r3, r3, r2
    91ca:	429d      	cmp	r5, r3
    91cc:	dbf0      	blt.n	91b0 <_printf_i+0x1b0>
    91ce:	e7e9      	b.n	91a4 <_printf_i+0x1a4>
    91d0:	2d00      	cmp	r5, #0
    91d2:	d0a9      	beq.n	9128 <_printf_i+0x128>
    91d4:	9e04      	ldr	r6, [sp, #16]
    91d6:	0028      	movs	r0, r5
    91d8:	0039      	movs	r1, r7
    91da:	f7ff f83b 	bl	8254 <__aeabi_uidivmod>
    91de:	9b03      	ldr	r3, [sp, #12]
    91e0:	3e01      	subs	r6, #1
    91e2:	5c5b      	ldrb	r3, [r3, r1]
    91e4:	0028      	movs	r0, r5
    91e6:	7033      	strb	r3, [r6, #0]
    91e8:	0039      	movs	r1, r7
    91ea:	f7fe ffad 	bl	8148 <__udivsi3>
    91ee:	1e05      	subs	r5, r0, #0
    91f0:	d1f1      	bne.n	91d6 <_printf_i+0x1d6>
    91f2:	2f08      	cmp	r7, #8
    91f4:	d109      	bne.n	920a <_printf_i+0x20a>
    91f6:	6823      	ldr	r3, [r4, #0]
    91f8:	07db      	lsls	r3, r3, #31
    91fa:	d506      	bpl.n	920a <_printf_i+0x20a>
    91fc:	6863      	ldr	r3, [r4, #4]
    91fe:	6922      	ldr	r2, [r4, #16]
    9200:	4293      	cmp	r3, r2
    9202:	dc02      	bgt.n	920a <_printf_i+0x20a>
    9204:	2330      	movs	r3, #48	; 0x30
    9206:	3e01      	subs	r6, #1
    9208:	7033      	strb	r3, [r6, #0]
    920a:	9b04      	ldr	r3, [sp, #16]
    920c:	1b9b      	subs	r3, r3, r6
    920e:	6123      	str	r3, [r4, #16]
    9210:	9b07      	ldr	r3, [sp, #28]
    9212:	aa09      	add	r2, sp, #36	; 0x24
    9214:	9300      	str	r3, [sp, #0]
    9216:	0021      	movs	r1, r4
    9218:	9b06      	ldr	r3, [sp, #24]
    921a:	9805      	ldr	r0, [sp, #20]
    921c:	f7ff fe82 	bl	8f24 <_printf_common>
    9220:	1c43      	adds	r3, r0, #1
    9222:	d1b3      	bne.n	918c <_printf_i+0x18c>
    9224:	2001      	movs	r0, #1
    9226:	4240      	negs	r0, r0
    9228:	b00b      	add	sp, #44	; 0x2c
    922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    922c:	0000971e 	.word	0x0000971e
    9230:	0000970d 	.word	0x0000970d

00009234 <_sbrk_r>:
    9234:	2300      	movs	r3, #0
    9236:	b570      	push	{r4, r5, r6, lr}
    9238:	4c06      	ldr	r4, [pc, #24]	; (9254 <_sbrk_r+0x20>)
    923a:	0005      	movs	r5, r0
    923c:	0008      	movs	r0, r1
    923e:	6023      	str	r3, [r4, #0]
    9240:	f7fe f9e4 	bl	760c <_sbrk>
    9244:	1c43      	adds	r3, r0, #1
    9246:	d103      	bne.n	9250 <_sbrk_r+0x1c>
    9248:	6823      	ldr	r3, [r4, #0]
    924a:	2b00      	cmp	r3, #0
    924c:	d000      	beq.n	9250 <_sbrk_r+0x1c>
    924e:	602b      	str	r3, [r5, #0]
    9250:	bd70      	pop	{r4, r5, r6, pc}
    9252:	46c0      	nop			; (mov r8, r8)
    9254:	20000574 	.word	0x20000574

00009258 <__sread>:
    9258:	b570      	push	{r4, r5, r6, lr}
    925a:	000c      	movs	r4, r1
    925c:	250e      	movs	r5, #14
    925e:	5f49      	ldrsh	r1, [r1, r5]
    9260:	f000 f8b2 	bl	93c8 <_read_r>
    9264:	2800      	cmp	r0, #0
    9266:	db03      	blt.n	9270 <__sread+0x18>
    9268:	6d63      	ldr	r3, [r4, #84]	; 0x54
    926a:	181b      	adds	r3, r3, r0
    926c:	6563      	str	r3, [r4, #84]	; 0x54
    926e:	bd70      	pop	{r4, r5, r6, pc}
    9270:	89a3      	ldrh	r3, [r4, #12]
    9272:	4a02      	ldr	r2, [pc, #8]	; (927c <__sread+0x24>)
    9274:	4013      	ands	r3, r2
    9276:	81a3      	strh	r3, [r4, #12]
    9278:	e7f9      	b.n	926e <__sread+0x16>
    927a:	46c0      	nop			; (mov r8, r8)
    927c:	ffffefff 	.word	0xffffefff

00009280 <__swrite>:
    9280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9282:	001f      	movs	r7, r3
    9284:	898b      	ldrh	r3, [r1, #12]
    9286:	0005      	movs	r5, r0
    9288:	000c      	movs	r4, r1
    928a:	0016      	movs	r6, r2
    928c:	05db      	lsls	r3, r3, #23
    928e:	d505      	bpl.n	929c <__swrite+0x1c>
    9290:	230e      	movs	r3, #14
    9292:	5ec9      	ldrsh	r1, [r1, r3]
    9294:	2200      	movs	r2, #0
    9296:	2302      	movs	r3, #2
    9298:	f000 f874 	bl	9384 <_lseek_r>
    929c:	89a3      	ldrh	r3, [r4, #12]
    929e:	4a05      	ldr	r2, [pc, #20]	; (92b4 <__swrite+0x34>)
    92a0:	0028      	movs	r0, r5
    92a2:	4013      	ands	r3, r2
    92a4:	81a3      	strh	r3, [r4, #12]
    92a6:	0032      	movs	r2, r6
    92a8:	230e      	movs	r3, #14
    92aa:	5ee1      	ldrsh	r1, [r4, r3]
    92ac:	003b      	movs	r3, r7
    92ae:	f000 f81f 	bl	92f0 <_write_r>
    92b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92b4:	ffffefff 	.word	0xffffefff

000092b8 <__sseek>:
    92b8:	b570      	push	{r4, r5, r6, lr}
    92ba:	000c      	movs	r4, r1
    92bc:	250e      	movs	r5, #14
    92be:	5f49      	ldrsh	r1, [r1, r5]
    92c0:	f000 f860 	bl	9384 <_lseek_r>
    92c4:	89a3      	ldrh	r3, [r4, #12]
    92c6:	1c42      	adds	r2, r0, #1
    92c8:	d103      	bne.n	92d2 <__sseek+0x1a>
    92ca:	4a05      	ldr	r2, [pc, #20]	; (92e0 <__sseek+0x28>)
    92cc:	4013      	ands	r3, r2
    92ce:	81a3      	strh	r3, [r4, #12]
    92d0:	bd70      	pop	{r4, r5, r6, pc}
    92d2:	2280      	movs	r2, #128	; 0x80
    92d4:	0152      	lsls	r2, r2, #5
    92d6:	4313      	orrs	r3, r2
    92d8:	81a3      	strh	r3, [r4, #12]
    92da:	6560      	str	r0, [r4, #84]	; 0x54
    92dc:	e7f8      	b.n	92d0 <__sseek+0x18>
    92de:	46c0      	nop			; (mov r8, r8)
    92e0:	ffffefff 	.word	0xffffefff

000092e4 <__sclose>:
    92e4:	b510      	push	{r4, lr}
    92e6:	230e      	movs	r3, #14
    92e8:	5ec9      	ldrsh	r1, [r1, r3]
    92ea:	f000 f815 	bl	9318 <_close_r>
    92ee:	bd10      	pop	{r4, pc}

000092f0 <_write_r>:
    92f0:	b570      	push	{r4, r5, r6, lr}
    92f2:	0005      	movs	r5, r0
    92f4:	0008      	movs	r0, r1
    92f6:	0011      	movs	r1, r2
    92f8:	2200      	movs	r2, #0
    92fa:	4c06      	ldr	r4, [pc, #24]	; (9314 <_write_r+0x24>)
    92fc:	6022      	str	r2, [r4, #0]
    92fe:	001a      	movs	r2, r3
    9300:	f7fe f94e 	bl	75a0 <_write>
    9304:	1c43      	adds	r3, r0, #1
    9306:	d103      	bne.n	9310 <_write_r+0x20>
    9308:	6823      	ldr	r3, [r4, #0]
    930a:	2b00      	cmp	r3, #0
    930c:	d000      	beq.n	9310 <_write_r+0x20>
    930e:	602b      	str	r3, [r5, #0]
    9310:	bd70      	pop	{r4, r5, r6, pc}
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	20000574 	.word	0x20000574

00009318 <_close_r>:
    9318:	2300      	movs	r3, #0
    931a:	b570      	push	{r4, r5, r6, lr}
    931c:	4c06      	ldr	r4, [pc, #24]	; (9338 <_close_r+0x20>)
    931e:	0005      	movs	r5, r0
    9320:	0008      	movs	r0, r1
    9322:	6023      	str	r3, [r4, #0]
    9324:	f7fe f990 	bl	7648 <_close>
    9328:	1c43      	adds	r3, r0, #1
    932a:	d103      	bne.n	9334 <_close_r+0x1c>
    932c:	6823      	ldr	r3, [r4, #0]
    932e:	2b00      	cmp	r3, #0
    9330:	d000      	beq.n	9334 <_close_r+0x1c>
    9332:	602b      	str	r3, [r5, #0]
    9334:	bd70      	pop	{r4, r5, r6, pc}
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	20000574 	.word	0x20000574

0000933c <_fstat_r>:
    933c:	2300      	movs	r3, #0
    933e:	b570      	push	{r4, r5, r6, lr}
    9340:	4c06      	ldr	r4, [pc, #24]	; (935c <_fstat_r+0x20>)
    9342:	0005      	movs	r5, r0
    9344:	0008      	movs	r0, r1
    9346:	0011      	movs	r1, r2
    9348:	6023      	str	r3, [r4, #0]
    934a:	f7fe f987 	bl	765c <_fstat>
    934e:	1c43      	adds	r3, r0, #1
    9350:	d103      	bne.n	935a <_fstat_r+0x1e>
    9352:	6823      	ldr	r3, [r4, #0]
    9354:	2b00      	cmp	r3, #0
    9356:	d000      	beq.n	935a <_fstat_r+0x1e>
    9358:	602b      	str	r3, [r5, #0]
    935a:	bd70      	pop	{r4, r5, r6, pc}
    935c:	20000574 	.word	0x20000574

00009360 <_isatty_r>:
    9360:	2300      	movs	r3, #0
    9362:	b570      	push	{r4, r5, r6, lr}
    9364:	4c06      	ldr	r4, [pc, #24]	; (9380 <_isatty_r+0x20>)
    9366:	0005      	movs	r5, r0
    9368:	0008      	movs	r0, r1
    936a:	6023      	str	r3, [r4, #0]
    936c:	f7fe f984 	bl	7678 <_isatty>
    9370:	1c43      	adds	r3, r0, #1
    9372:	d103      	bne.n	937c <_isatty_r+0x1c>
    9374:	6823      	ldr	r3, [r4, #0]
    9376:	2b00      	cmp	r3, #0
    9378:	d000      	beq.n	937c <_isatty_r+0x1c>
    937a:	602b      	str	r3, [r5, #0]
    937c:	bd70      	pop	{r4, r5, r6, pc}
    937e:	46c0      	nop			; (mov r8, r8)
    9380:	20000574 	.word	0x20000574

00009384 <_lseek_r>:
    9384:	b570      	push	{r4, r5, r6, lr}
    9386:	0005      	movs	r5, r0
    9388:	0008      	movs	r0, r1
    938a:	0011      	movs	r1, r2
    938c:	2200      	movs	r2, #0
    938e:	4c06      	ldr	r4, [pc, #24]	; (93a8 <_lseek_r+0x24>)
    9390:	6022      	str	r2, [r4, #0]
    9392:	001a      	movs	r2, r3
    9394:	f7fe f979 	bl	768a <_lseek>
    9398:	1c43      	adds	r3, r0, #1
    939a:	d103      	bne.n	93a4 <_lseek_r+0x20>
    939c:	6823      	ldr	r3, [r4, #0]
    939e:	2b00      	cmp	r3, #0
    93a0:	d000      	beq.n	93a4 <_lseek_r+0x20>
    93a2:	602b      	str	r3, [r5, #0]
    93a4:	bd70      	pop	{r4, r5, r6, pc}
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	20000574 	.word	0x20000574

000093ac <memchr>:
    93ac:	b2c9      	uxtb	r1, r1
    93ae:	1882      	adds	r2, r0, r2
    93b0:	4290      	cmp	r0, r2
    93b2:	d101      	bne.n	93b8 <memchr+0xc>
    93b4:	2000      	movs	r0, #0
    93b6:	4770      	bx	lr
    93b8:	7803      	ldrb	r3, [r0, #0]
    93ba:	428b      	cmp	r3, r1
    93bc:	d0fb      	beq.n	93b6 <memchr+0xa>
    93be:	3001      	adds	r0, #1
    93c0:	e7f6      	b.n	93b0 <memchr+0x4>

000093c2 <__malloc_lock>:
    93c2:	4770      	bx	lr

000093c4 <__malloc_unlock>:
    93c4:	4770      	bx	lr
	...

000093c8 <_read_r>:
    93c8:	b570      	push	{r4, r5, r6, lr}
    93ca:	0005      	movs	r5, r0
    93cc:	0008      	movs	r0, r1
    93ce:	0011      	movs	r1, r2
    93d0:	2200      	movs	r2, #0
    93d2:	4c06      	ldr	r4, [pc, #24]	; (93ec <_read_r+0x24>)
    93d4:	6022      	str	r2, [r4, #0]
    93d6:	001a      	movs	r2, r3
    93d8:	f7fe f8b8 	bl	754c <_read>
    93dc:	1c43      	adds	r3, r0, #1
    93de:	d103      	bne.n	93e8 <_read_r+0x20>
    93e0:	6823      	ldr	r3, [r4, #0]
    93e2:	2b00      	cmp	r3, #0
    93e4:	d000      	beq.n	93e8 <_read_r+0x20>
    93e6:	602b      	str	r3, [r5, #0]
    93e8:	bd70      	pop	{r4, r5, r6, pc}
    93ea:	46c0      	nop			; (mov r8, r8)
    93ec:	20000574 	.word	0x20000574
    93f0:	000033b2 	.word	0x000033b2
    93f4:	000033b6 	.word	0x000033b6
    93f8:	000033ba 	.word	0x000033ba
    93fc:	000033be 	.word	0x000033be
    9400:	000033c2 	.word	0x000033c2
    9404:	000033c6 	.word	0x000033c6
    9408:	000033ca 	.word	0x000033ca
    940c:	000033ce 	.word	0x000033ce
    9410:	000033d2 	.word	0x000033d2
    9414:	000033d6 	.word	0x000033d6
    9418:	0000342e 	.word	0x0000342e
    941c:	00003434 	.word	0x00003434
    9420:	0000343a 	.word	0x0000343a
    9424:	00003440 	.word	0x00003440
    9428:	00003440 	.word	0x00003440
    942c:	00003446 	.word	0x00003446
    9430:	00003446 	.word	0x00003446
    9434:	00003446 	.word	0x00003446
    9438:	0000344c 	.word	0x0000344c
    943c:	00003452 	.word	0x00003452
    9440:	000041c8 	.word	0x000041c8
    9444:	000041c8 	.word	0x000041c8
    9448:	000041bc 	.word	0x000041bc
    944c:	000041c8 	.word	0x000041c8
    9450:	000041bc 	.word	0x000041bc
    9454:	00004196 	.word	0x00004196
    9458:	00004196 	.word	0x00004196
    945c:	000041c8 	.word	0x000041c8
    9460:	000041c8 	.word	0x000041c8
    9464:	000041c8 	.word	0x000041c8
    9468:	000041c8 	.word	0x000041c8
    946c:	000041c8 	.word	0x000041c8
    9470:	000041c8 	.word	0x000041c8
    9474:	000041c8 	.word	0x000041c8
    9478:	000041c8 	.word	0x000041c8
    947c:	000041c8 	.word	0x000041c8
    9480:	000041c8 	.word	0x000041c8
    9484:	000041c8 	.word	0x000041c8
    9488:	000041c8 	.word	0x000041c8
    948c:	000041c8 	.word	0x000041c8
    9490:	000041c8 	.word	0x000041c8
    9494:	000041c8 	.word	0x000041c8
    9498:	000041c8 	.word	0x000041c8
    949c:	000041c8 	.word	0x000041c8
    94a0:	000041c8 	.word	0x000041c8
    94a4:	000041c8 	.word	0x000041c8
    94a8:	000041c8 	.word	0x000041c8
    94ac:	000041c8 	.word	0x000041c8
    94b0:	000041c8 	.word	0x000041c8
    94b4:	000041c8 	.word	0x000041c8
    94b8:	000041c8 	.word	0x000041c8
    94bc:	000041c8 	.word	0x000041c8
    94c0:	000041c8 	.word	0x000041c8
    94c4:	000041c8 	.word	0x000041c8
    94c8:	000041c8 	.word	0x000041c8
    94cc:	000041c8 	.word	0x000041c8
    94d0:	000041c8 	.word	0x000041c8
    94d4:	000041c8 	.word	0x000041c8
    94d8:	000041c8 	.word	0x000041c8
    94dc:	000041c8 	.word	0x000041c8
    94e0:	000041c8 	.word	0x000041c8
    94e4:	000041c8 	.word	0x000041c8
    94e8:	000041c8 	.word	0x000041c8
    94ec:	000041c8 	.word	0x000041c8
    94f0:	000041c8 	.word	0x000041c8
    94f4:	000041c8 	.word	0x000041c8
    94f8:	000041c8 	.word	0x000041c8
    94fc:	000041c8 	.word	0x000041c8
    9500:	000041c8 	.word	0x000041c8
    9504:	000041c8 	.word	0x000041c8
    9508:	000041c8 	.word	0x000041c8
    950c:	000041c8 	.word	0x000041c8
    9510:	000041c8 	.word	0x000041c8
    9514:	000041c8 	.word	0x000041c8
    9518:	000041c8 	.word	0x000041c8
    951c:	000041c8 	.word	0x000041c8
    9520:	000041c8 	.word	0x000041c8
    9524:	000041c8 	.word	0x000041c8
    9528:	000041c8 	.word	0x000041c8
    952c:	000041c8 	.word	0x000041c8
    9530:	000041c8 	.word	0x000041c8
    9534:	000041c8 	.word	0x000041c8
    9538:	000041c8 	.word	0x000041c8
    953c:	000041c8 	.word	0x000041c8
    9540:	000041bc 	.word	0x000041bc
    9544:	000041bc 	.word	0x000041bc
    9548:	000041d2 	.word	0x000041d2
    954c:	000041d2 	.word	0x000041d2
    9550:	000041d2 	.word	0x000041d2
    9554:	000041d2 	.word	0x000041d2
    9558:	42000800 	.word	0x42000800
    955c:	42000c00 	.word	0x42000c00
    9560:	42001000 	.word	0x42001000
    9564:	42001400 	.word	0x42001400
    9568:	42001800 	.word	0x42001800
    956c:	42001c00 	.word	0x42001c00
    9570:	0c0b0a09 	.word	0x0c0b0a09
    9574:	00000e0d 	.word	0x00000e0d
    9578:	00006ade 	.word	0x00006ade
    957c:	00006b56 	.word	0x00006b56
    9580:	00006b56 	.word	0x00006b56
    9584:	00006afc 	.word	0x00006afc
    9588:	00006af6 	.word	0x00006af6
    958c:	00006b02 	.word	0x00006b02
    9590:	00006ae4 	.word	0x00006ae4
    9594:	00006b08 	.word	0x00006b08
    9598:	00006b3c 	.word	0x00006b3c
    959c:	00006c30 	.word	0x00006c30
    95a0:	00006c80 	.word	0x00006c80
    95a4:	00006c80 	.word	0x00006c80
    95a8:	00006c7c 	.word	0x00006c7c
    95ac:	00006c22 	.word	0x00006c22
    95b0:	00006c42 	.word	0x00006c42
    95b4:	00006c12 	.word	0x00006c12
    95b8:	00006c54 	.word	0x00006c54
    95bc:	00006c66 	.word	0x00006c66
    95c0:	41206e49 	.word	0x41206e49
    95c4:	696c7070 	.word	0x696c7070
    95c8:	69746163 	.word	0x69746163
    95cc:	0a216e6f 	.word	0x0a216e6f
    95d0:	0000000d 	.word	0x0000000d
    95d4:	69676542 	.word	0x69676542
    95d8:	676e696e 	.word	0x676e696e
    95dc:	73657420 	.word	0x73657420
    95e0:	666f2074 	.word	0x666f2074
    95e4:	616c4620 	.word	0x616c4620
    95e8:	52206873 	.word	0x52206873
    95ec:	2e2e2e57 	.word	0x2e2e2e57
    95f0:	0000000d 	.word	0x0000000d
    95f4:	73616c46 	.word	0x73616c46
    95f8:	68632068 	.word	0x68632068
    95fc:	6d207069 	.word	0x6d207069
    9600:	69737369 	.word	0x69737369
    9604:	0d21676e 	.word	0x0d21676e
    9608:	00000000 	.word	0x00000000
    960c:	33435243 	.word	0x33435243
    9610:	65522032 	.word	0x65522032
    9614:	746c7573 	.word	0x746c7573
    9618:	20666f20 	.word	0x20666f20
    961c:	64616572 	.word	0x64616572
    9620:	7825203a 	.word	0x7825203a
    9624:	00000a0d 	.word	0x00000a0d
    9628:	33435243 	.word	0x33435243
    962c:	65522032 	.word	0x65522032
    9630:	746c7573 	.word	0x746c7573
    9634:	20666f20 	.word	0x20666f20
    9638:	74697277 	.word	0x74697277
    963c:	25203a65 	.word	0x25203a65
    9640:	000a0d78 	.word	0x000a0d78
    9644:	72617453 	.word	0x72617453
    9648:	676e6974 	.word	0x676e6974
    964c:	73657420 	.word	0x73657420
    9650:	666f2074 	.word	0x666f2074
    9654:	4d564e20 	.word	0x4d564e20
    9658:	2e575220 	.word	0x2e575220
    965c:	000d2e2e 	.word	0x000d2e2e
    9660:	54205752 	.word	0x54205752
    9664:	73747365 	.word	0x73747365
    9668:	6e6f6420 	.word	0x6e6f6420
    966c:	2e2e2e65 	.word	0x2e2e2e65
    9670:	65727020 	.word	0x65727020
    9674:	74207373 	.word	0x74207373
    9678:	64206568 	.word	0x64206568
    967c:	67756265 	.word	0x67756265
    9680:	74756220 	.word	0x74756220
    9684:	206e6f74 	.word	0x206e6f74
    9688:	20726f66 	.word	0x20726f66
    968c:	20656874 	.word	0x20656874
    9690:	2e44454c 	.word	0x2e44454c
    9694:	0000000d 	.word	0x0000000d

00009698 <_global_impure_ptr>:
    9698:	20000008                                ... 

0000969c <__sf_fake_stderr>:
	...

000096bc <__sf_fake_stdin>:
	...

000096dc <__sf_fake_stdout>:
	...
    96fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    970c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    971c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    972c:	00006665                                ef..

00009730 <_init>:
    9730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9732:	46c0      	nop			; (mov r8, r8)
    9734:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9736:	bc08      	pop	{r3}
    9738:	469e      	mov	lr, r3
    973a:	4770      	bx	lr

0000973c <__init_array_start>:
    973c:	000030dd 	.word	0x000030dd

00009740 <_fini>:
    9740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9742:	46c0      	nop			; (mov r8, r8)
    9744:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9746:	bc08      	pop	{r3}
    9748:	469e      	mov	lr, r3
    974a:	4770      	bx	lr

0000974c <__fini_array_start>:
    974c:	000030b5 	.word	0x000030b5
