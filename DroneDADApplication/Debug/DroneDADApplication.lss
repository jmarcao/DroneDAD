
DroneDADApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003688  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00005688  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000010  00005698  00010010  2**2
                  ALLOC
  3 .stack        00002004  200000d4  0000575c  00010010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023234  00000000  00000000  00010091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027d2  00000000  00000000  000332c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000206d  00000000  00000000  00035a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000610  00000000  00000000  00037b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000530  00000000  00000000  00038114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000186fb  00000000  00000000  00038644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a2a4  00000000  00000000  00050d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000868d3  00000000  00000000  0005afe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001408  00000000  00000000  000e18b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	d8 20 00 20 a9 4e 00 00 a1 4f 00 00 a1 4f 00 00     . . .N...O...O..
	...
    202c:	a1 4f 00 00 00 00 00 00 00 00 00 00 a1 4f 00 00     .O...........O..
    203c:	a1 4f 00 00 a1 4f 00 00 a1 4f 00 00 a1 4f 00 00     .O...O...O...O..
    204c:	a1 4f 00 00 a1 4f 00 00 a1 4f 00 00 a1 4f 00 00     .O...O...O...O..
    205c:	a1 4f 00 00 a1 4f 00 00 dd 33 00 00 f5 33 00 00     .O...O...3...3..
    206c:	0d 34 00 00 25 34 00 00 3d 34 00 00 55 34 00 00     .4..%4..=4..U4..
    207c:	a1 4f 00 00 a1 4f 00 00 a1 4f 00 00 a1 4f 00 00     .O...O...O...O..
    208c:	a1 4f 00 00 a1 4f 00 00 00 00 00 00 00 00 00 00     .O...O..........
    209c:	a1 4f 00 00 a1 4f 00 00 a1 4f 00 00 a1 4f 00 00     .O...O...O...O..
    20ac:	a1 4f 00 00 00 00 00 00                             .O......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000010 	.word	0x20000010
    20d4:	00000000 	.word	0x00000000
    20d8:	00005688 	.word	0x00005688

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000014 	.word	0x20000014
    2108:	00005688 	.word	0x00005688
    210c:	00005688 	.word	0x00005688
    2110:	00000000 	.word	0x00000000

00002114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2114:	b580      	push	{r7, lr}
    2116:	b084      	sub	sp, #16
    2118:	af00      	add	r7, sp, #0
    211a:	0002      	movs	r2, r0
    211c:	1dfb      	adds	r3, r7, #7
    211e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2120:	230f      	movs	r3, #15
    2122:	18fb      	adds	r3, r7, r3
    2124:	1dfa      	adds	r2, r7, #7
    2126:	7812      	ldrb	r2, [r2, #0]
    2128:	09d2      	lsrs	r2, r2, #7
    212a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    212c:	230e      	movs	r3, #14
    212e:	18fb      	adds	r3, r7, r3
    2130:	1dfa      	adds	r2, r7, #7
    2132:	7812      	ldrb	r2, [r2, #0]
    2134:	0952      	lsrs	r2, r2, #5
    2136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2138:	4b0d      	ldr	r3, [pc, #52]	; (2170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    213a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    213c:	230f      	movs	r3, #15
    213e:	18fb      	adds	r3, r7, r3
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d10f      	bne.n	2166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2146:	230f      	movs	r3, #15
    2148:	18fb      	adds	r3, r7, r3
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	009b      	lsls	r3, r3, #2
    214e:	2210      	movs	r2, #16
    2150:	4694      	mov	ip, r2
    2152:	44bc      	add	ip, r7
    2154:	4463      	add	r3, ip
    2156:	3b08      	subs	r3, #8
    2158:	681a      	ldr	r2, [r3, #0]
    215a:	230e      	movs	r3, #14
    215c:	18fb      	adds	r3, r7, r3
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	01db      	lsls	r3, r3, #7
    2162:	18d3      	adds	r3, r2, r3
    2164:	e000      	b.n	2168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2166:	2300      	movs	r3, #0
	}
}
    2168:	0018      	movs	r0, r3
    216a:	46bd      	mov	sp, r7
    216c:	b004      	add	sp, #16
    216e:	bd80      	pop	{r7, pc}
    2170:	41004400 	.word	0x41004400

00002174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2174:	b580      	push	{r7, lr}
    2176:	b082      	sub	sp, #8
    2178:	af00      	add	r7, sp, #0
    217a:	0002      	movs	r2, r0
    217c:	1dfb      	adds	r3, r7, #7
    217e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2180:	1dfb      	adds	r3, r7, #7
    2182:	781b      	ldrb	r3, [r3, #0]
    2184:	0018      	movs	r0, r3
    2186:	4b03      	ldr	r3, [pc, #12]	; (2194 <port_get_group_from_gpio_pin+0x20>)
    2188:	4798      	blx	r3
    218a:	0003      	movs	r3, r0
}
    218c:	0018      	movs	r0, r3
    218e:	46bd      	mov	sp, r7
    2190:	b002      	add	sp, #8
    2192:	bd80      	pop	{r7, pc}
    2194:	00002115 	.word	0x00002115

00002198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2198:	b580      	push	{r7, lr}
    219a:	b084      	sub	sp, #16
    219c:	af00      	add	r7, sp, #0
    219e:	0002      	movs	r2, r0
    21a0:	1dfb      	adds	r3, r7, #7
    21a2:	701a      	strb	r2, [r3, #0]
    21a4:	1dbb      	adds	r3, r7, #6
    21a6:	1c0a      	adds	r2, r1, #0
    21a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    21aa:	1dfb      	adds	r3, r7, #7
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	0018      	movs	r0, r3
    21b0:	4b0d      	ldr	r3, [pc, #52]	; (21e8 <port_pin_set_output_level+0x50>)
    21b2:	4798      	blx	r3
    21b4:	0003      	movs	r3, r0
    21b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	221f      	movs	r2, #31
    21be:	4013      	ands	r3, r2
    21c0:	2201      	movs	r2, #1
    21c2:	409a      	lsls	r2, r3
    21c4:	0013      	movs	r3, r2
    21c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    21c8:	1dbb      	adds	r3, r7, #6
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	2b00      	cmp	r3, #0
    21ce:	d003      	beq.n	21d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    21d0:	68fb      	ldr	r3, [r7, #12]
    21d2:	68ba      	ldr	r2, [r7, #8]
    21d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    21d6:	e002      	b.n	21de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    21d8:	68fb      	ldr	r3, [r7, #12]
    21da:	68ba      	ldr	r2, [r7, #8]
    21dc:	615a      	str	r2, [r3, #20]
}
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	46bd      	mov	sp, r7
    21e2:	b004      	add	sp, #16
    21e4:	bd80      	pop	{r7, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	00002175 	.word	0x00002175

000021ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    21f0:	4b02      	ldr	r3, [pc, #8]	; (21fc <system_interrupt_enter_critical_section+0x10>)
    21f2:	4798      	blx	r3
}
    21f4:	46c0      	nop			; (mov r8, r8)
    21f6:	46bd      	mov	sp, r7
    21f8:	bd80      	pop	{r7, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	00002f59 	.word	0x00002f59

00002200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2200:	b580      	push	{r7, lr}
    2202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2204:	4b02      	ldr	r3, [pc, #8]	; (2210 <system_interrupt_leave_critical_section+0x10>)
    2206:	4798      	blx	r3
}
    2208:	46c0      	nop			; (mov r8, r8)
    220a:	46bd      	mov	sp, r7
    220c:	bd80      	pop	{r7, pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	00002fad 	.word	0x00002fad

00002214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
    2214:	b580      	push	{r7, lr}
    2216:	b084      	sub	sp, #16
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
    221c:	4b0d      	ldr	r3, [pc, #52]	; (2254 <spi_lock+0x40>)
    221e:	4798      	blx	r3

	if (module->locked) {
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	791b      	ldrb	r3, [r3, #4]
    2224:	b2db      	uxtb	r3, r3
    2226:	2b00      	cmp	r3, #0
    2228:	d004      	beq.n	2234 <spi_lock+0x20>
		status = STATUS_BUSY;
    222a:	230f      	movs	r3, #15
    222c:	18fb      	adds	r3, r7, r3
    222e:	2205      	movs	r2, #5
    2230:	701a      	strb	r2, [r3, #0]
    2232:	e006      	b.n	2242 <spi_lock+0x2e>
	} else {
		module->locked = true;
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	2201      	movs	r2, #1
    2238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
    223a:	230f      	movs	r3, #15
    223c:	18fb      	adds	r3, r7, r3
    223e:	2200      	movs	r2, #0
    2240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
    2242:	4b05      	ldr	r3, [pc, #20]	; (2258 <spi_lock+0x44>)
    2244:	4798      	blx	r3

	return status;
    2246:	230f      	movs	r3, #15
    2248:	18fb      	adds	r3, r7, r3
    224a:	781b      	ldrb	r3, [r3, #0]
}
    224c:	0018      	movs	r0, r3
    224e:	46bd      	mov	sp, r7
    2250:	b004      	add	sp, #16
    2252:	bd80      	pop	{r7, pc}
    2254:	000021ed 	.word	0x000021ed
    2258:	00002201 	.word	0x00002201

0000225c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
    225c:	b580      	push	{r7, lr}
    225e:	b082      	sub	sp, #8
    2260:	af00      	add	r7, sp, #0
    2262:	6078      	str	r0, [r7, #4]
	module->locked = false;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	711a      	strb	r2, [r3, #4]
}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	46bd      	mov	sp, r7
    226e:	b002      	add	sp, #8
    2270:	bd80      	pop	{r7, pc}

00002272 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2272:	b580      	push	{r7, lr}
    2274:	b084      	sub	sp, #16
    2276:	af00      	add	r7, sp, #0
    2278:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	7e1b      	ldrb	r3, [r3, #24]
    2284:	b2db      	uxtb	r3, r3
    2286:	001a      	movs	r2, r3
    2288:	2301      	movs	r3, #1
    228a:	4013      	ands	r3, r2
    228c:	1e5a      	subs	r2, r3, #1
    228e:	4193      	sbcs	r3, r2
    2290:	b2db      	uxtb	r3, r3
}
    2292:	0018      	movs	r0, r3
    2294:	46bd      	mov	sp, r7
    2296:	b004      	add	sp, #16
    2298:	bd80      	pop	{r7, pc}

0000229a <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    229a:	b580      	push	{r7, lr}
    229c:	b084      	sub	sp, #16
    229e:	af00      	add	r7, sp, #0
    22a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    22a8:	68fb      	ldr	r3, [r7, #12]
    22aa:	7e1b      	ldrb	r3, [r3, #24]
    22ac:	b2db      	uxtb	r3, r3
    22ae:	001a      	movs	r2, r3
    22b0:	2304      	movs	r3, #4
    22b2:	4013      	ands	r3, r2
    22b4:	1e5a      	subs	r2, r3, #1
    22b6:	4193      	sbcs	r3, r2
    22b8:	b2db      	uxtb	r3, r3
}
    22ba:	0018      	movs	r0, r3
    22bc:	46bd      	mov	sp, r7
    22be:	b004      	add	sp, #16
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b084      	sub	sp, #16
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
    22cc:	000a      	movs	r2, r1
    22ce:	1cbb      	adds	r3, r7, #2
    22d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	0018      	movs	r0, r3
    22dc:	4b0a      	ldr	r3, [pc, #40]	; (2308 <spi_write+0x44>)
    22de:	4798      	blx	r3
    22e0:	0003      	movs	r3, r0
    22e2:	001a      	movs	r2, r3
    22e4:	2301      	movs	r3, #1
    22e6:	4053      	eors	r3, r2
    22e8:	b2db      	uxtb	r3, r3
    22ea:	2b00      	cmp	r3, #0
    22ec:	d001      	beq.n	22f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    22ee:	2305      	movs	r3, #5
    22f0:	e006      	b.n	2300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22f2:	1cbb      	adds	r3, r7, #2
    22f4:	881b      	ldrh	r3, [r3, #0]
    22f6:	05db      	lsls	r3, r3, #23
    22f8:	0dda      	lsrs	r2, r3, #23
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    22fe:	2300      	movs	r3, #0
}
    2300:	0018      	movs	r0, r3
    2302:	46bd      	mov	sp, r7
    2304:	b004      	add	sp, #16
    2306:	bd80      	pop	{r7, pc}
    2308:	00002273 	.word	0x00002273

0000230c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    230c:	b580      	push	{r7, lr}
    230e:	b084      	sub	sp, #16
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
    2314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	681b      	ldr	r3, [r3, #0]
    231a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	0018      	movs	r0, r3
    2320:	4b1b      	ldr	r3, [pc, #108]	; (2390 <spi_read+0x84>)
    2322:	4798      	blx	r3
    2324:	0003      	movs	r3, r0
    2326:	001a      	movs	r2, r3
    2328:	2301      	movs	r3, #1
    232a:	4053      	eors	r3, r2
    232c:	b2db      	uxtb	r3, r3
    232e:	2b00      	cmp	r3, #0
    2330:	d001      	beq.n	2336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2332:	2310      	movs	r3, #16
    2334:	e027      	b.n	2386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2336:	230f      	movs	r3, #15
    2338:	18fb      	adds	r3, r7, r3
    233a:	2200      	movs	r2, #0
    233c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    233e:	68bb      	ldr	r3, [r7, #8]
    2340:	8b5b      	ldrh	r3, [r3, #26]
    2342:	b29b      	uxth	r3, r3
    2344:	001a      	movs	r2, r3
    2346:	2304      	movs	r3, #4
    2348:	4013      	ands	r3, r2
    234a:	d006      	beq.n	235a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    234c:	230f      	movs	r3, #15
    234e:	18fb      	adds	r3, r7, r3
    2350:	221e      	movs	r2, #30
    2352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2354:	68bb      	ldr	r3, [r7, #8]
    2356:	2204      	movs	r2, #4
    2358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	799b      	ldrb	r3, [r3, #6]
    235e:	2b01      	cmp	r3, #1
    2360:	d108      	bne.n	2374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2362:	68bb      	ldr	r3, [r7, #8]
    2364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2366:	b29b      	uxth	r3, r3
    2368:	05db      	lsls	r3, r3, #23
    236a:	0ddb      	lsrs	r3, r3, #23
    236c:	b29a      	uxth	r2, r3
    236e:	683b      	ldr	r3, [r7, #0]
    2370:	801a      	strh	r2, [r3, #0]
    2372:	e005      	b.n	2380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2374:	68bb      	ldr	r3, [r7, #8]
    2376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2378:	b2db      	uxtb	r3, r3
    237a:	b29a      	uxth	r2, r3
    237c:	683b      	ldr	r3, [r7, #0]
    237e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    2380:	230f      	movs	r3, #15
    2382:	18fb      	adds	r3, r7, r3
    2384:	781b      	ldrb	r3, [r3, #0]
}
    2386:	0018      	movs	r0, r3
    2388:	46bd      	mov	sp, r7
    238a:	b004      	add	sp, #16
    238c:	bd80      	pop	{r7, pc}
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	0000229b 	.word	0x0000229b

00002394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
    2394:	b580      	push	{r7, lr}
    2396:	b082      	sub	sp, #8
    2398:	af00      	add	r7, sp, #0
    239a:	0002      	movs	r2, r0
    239c:	1dfb      	adds	r3, r7, #7
    239e:	701a      	strb	r2, [r3, #0]
	switch (type) {
    23a0:	1dfb      	adds	r3, r7, #7
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	2b09      	cmp	r3, #9
    23a6:	d818      	bhi.n	23da <_at25dfx_get_device_id+0x46>
    23a8:	009a      	lsls	r2, r3, #2
    23aa:	4b0e      	ldr	r3, [pc, #56]	; (23e4 <_at25dfx_get_device_id+0x50>)
    23ac:	18d3      	adds	r3, r2, r3
    23ae:	681b      	ldr	r3, [r3, #0]
    23b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
    23b2:	4b0d      	ldr	r3, [pc, #52]	; (23e8 <_at25dfx_get_device_id+0x54>)
    23b4:	e012      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
    23b6:	4b0d      	ldr	r3, [pc, #52]	; (23ec <_at25dfx_get_device_id+0x58>)
    23b8:	e010      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
    23ba:	4b0d      	ldr	r3, [pc, #52]	; (23f0 <_at25dfx_get_device_id+0x5c>)
    23bc:	e00e      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
    23be:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <_at25dfx_get_device_id+0x60>)
    23c0:	e00c      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
    23c2:	4b0d      	ldr	r3, [pc, #52]	; (23f8 <_at25dfx_get_device_id+0x64>)
    23c4:	e00a      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
    23c6:	4b0d      	ldr	r3, [pc, #52]	; (23fc <_at25dfx_get_device_id+0x68>)
    23c8:	e008      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
    23ca:	4b0d      	ldr	r3, [pc, #52]	; (2400 <_at25dfx_get_device_id+0x6c>)
    23cc:	e006      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
    23ce:	4b0d      	ldr	r3, [pc, #52]	; (2404 <_at25dfx_get_device_id+0x70>)
    23d0:	e004      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
    23d2:	4b0d      	ldr	r3, [pc, #52]	; (2408 <_at25dfx_get_device_id+0x74>)
    23d4:	e002      	b.n	23dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
    23d6:	4b0d      	ldr	r3, [pc, #52]	; (240c <_at25dfx_get_device_id+0x78>)
    23d8:	e000      	b.n	23dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
    23da:	2300      	movs	r3, #0
	}
}
    23dc:	0018      	movs	r0, r3
    23de:	46bd      	mov	sp, r7
    23e0:	b002      	add	sp, #8
    23e2:	bd80      	pop	{r7, pc}
    23e4:	000055b0 	.word	0x000055b0
    23e8:	0000651f 	.word	0x0000651f
    23ec:	0000431f 	.word	0x0000431f
    23f0:	0001441f 	.word	0x0001441f
    23f4:	0002451f 	.word	0x0002451f
    23f8:	0001451f 	.word	0x0001451f
    23fc:	0002461f 	.word	0x0002461f
    2400:	0003461f 	.word	0x0003461f
    2404:	0000861f 	.word	0x0000861f
    2408:	0001471f 	.word	0x0001471f
    240c:	0000481f 	.word	0x0000481f

00002410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
    2410:	b580      	push	{r7, lr}
    2412:	b082      	sub	sp, #8
    2414:	af00      	add	r7, sp, #0
    2416:	0002      	movs	r2, r0
    2418:	1dfb      	adds	r3, r7, #7
    241a:	701a      	strb	r2, [r3, #0]
	switch (type) {
    241c:	1dfb      	adds	r3, r7, #7
    241e:	781b      	ldrb	r3, [r3, #0]
    2420:	2b09      	cmp	r3, #9
    2422:	d819      	bhi.n	2458 <_at25dfx_get_device_size+0x48>
    2424:	009a      	lsls	r2, r3, #2
    2426:	4b0f      	ldr	r3, [pc, #60]	; (2464 <_at25dfx_get_device_size+0x54>)
    2428:	18d3      	adds	r3, r2, r3
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
    242e:	2380      	movs	r3, #128	; 0x80
    2430:	025b      	lsls	r3, r3, #9
    2432:	e012      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
    2434:	2380      	movs	r3, #128	; 0x80
    2436:	02db      	lsls	r3, r3, #11
    2438:	e00f      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
    243a:	2380      	movs	r3, #128	; 0x80
    243c:	031b      	lsls	r3, r3, #12
    243e:	e00c      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    2440:	2380      	movs	r3, #128	; 0x80
    2442:	035b      	lsls	r3, r3, #13
    2444:	e009      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    2446:	2380      	movs	r3, #128	; 0x80
    2448:	039b      	lsls	r3, r3, #14
    244a:	e006      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    244c:	2380      	movs	r3, #128	; 0x80
    244e:	03db      	lsls	r3, r3, #15
    2450:	e003      	b.n	245a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
    2452:	2380      	movs	r3, #128	; 0x80
    2454:	041b      	lsls	r3, r3, #16
    2456:	e000      	b.n	245a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
    2458:	2300      	movs	r3, #0
	}
}
    245a:	0018      	movs	r0, r3
    245c:	46bd      	mov	sp, r7
    245e:	b002      	add	sp, #8
    2460:	bd80      	pop	{r7, pc}
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	000055d8 	.word	0x000055d8

00002468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
    2468:	b580      	push	{r7, lr}
    246a:	b082      	sub	sp, #8
    246c:	af00      	add	r7, sp, #0
    246e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	795b      	ldrb	r3, [r3, #5]
    2474:	2100      	movs	r1, #0
    2476:	0018      	movs	r0, r3
    2478:	4b02      	ldr	r3, [pc, #8]	; (2484 <_at25dfx_chip_select+0x1c>)
    247a:	4798      	blx	r3
}
    247c:	46c0      	nop			; (mov r8, r8)
    247e:	46bd      	mov	sp, r7
    2480:	b002      	add	sp, #8
    2482:	bd80      	pop	{r7, pc}
    2484:	00002199 	.word	0x00002199

00002488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
    2488:	b580      	push	{r7, lr}
    248a:	b082      	sub	sp, #8
    248c:	af00      	add	r7, sp, #0
    248e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	795b      	ldrb	r3, [r3, #5]
    2494:	2101      	movs	r1, #1
    2496:	0018      	movs	r0, r3
    2498:	4b02      	ldr	r3, [pc, #8]	; (24a4 <_at25dfx_chip_deselect+0x1c>)
    249a:	4798      	blx	r3
}
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46bd      	mov	sp, r7
    24a0:	b002      	add	sp, #8
    24a2:	bd80      	pop	{r7, pc}
    24a4:	00002199 	.word	0x00002199

000024a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    24a8:	b084      	sub	sp, #16
    24aa:	b5b0      	push	{r4, r5, r7, lr}
    24ac:	b084      	sub	sp, #16
    24ae:	af00      	add	r7, sp, #0
    24b0:	6078      	str	r0, [r7, #4]
    24b2:	2004      	movs	r0, #4
    24b4:	2420      	movs	r4, #32
    24b6:	46a4      	mov	ip, r4
    24b8:	44bc      	add	ip, r7
    24ba:	4460      	add	r0, ip
    24bc:	6001      	str	r1, [r0, #0]
    24be:	6042      	str	r2, [r0, #4]
    24c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    24c2:	2304      	movs	r3, #4
    24c4:	2220      	movs	r2, #32
    24c6:	4694      	mov	ip, r2
    24c8:	44bc      	add	ip, r7
    24ca:	4463      	add	r3, ip
    24cc:	781a      	ldrb	r2, [r3, #0]
    24ce:	2308      	movs	r3, #8
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    24d4:	2304      	movs	r3, #4
    24d6:	2220      	movs	r2, #32
    24d8:	4694      	mov	ip, r2
    24da:	44bc      	add	ip, r7
    24dc:	4463      	add	r3, ip
    24de:	785b      	ldrb	r3, [r3, #1]
    24e0:	2b01      	cmp	r3, #1
    24e2:	d91f      	bls.n	2524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    24e4:	2304      	movs	r3, #4
    24e6:	2220      	movs	r2, #32
    24e8:	4694      	mov	ip, r2
    24ea:	44bc      	add	ip, r7
    24ec:	4463      	add	r3, ip
    24ee:	685b      	ldr	r3, [r3, #4]
    24f0:	b2da      	uxtb	r2, r3
    24f2:	2308      	movs	r3, #8
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    24f8:	2304      	movs	r3, #4
    24fa:	2220      	movs	r2, #32
    24fc:	4694      	mov	ip, r2
    24fe:	44bc      	add	ip, r7
    2500:	4463      	add	r3, ip
    2502:	685b      	ldr	r3, [r3, #4]
    2504:	0a1b      	lsrs	r3, r3, #8
    2506:	b2da      	uxtb	r2, r3
    2508:	2308      	movs	r3, #8
    250a:	18fb      	adds	r3, r7, r3
    250c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    250e:	2304      	movs	r3, #4
    2510:	2220      	movs	r2, #32
    2512:	4694      	mov	ip, r2
    2514:	44bc      	add	ip, r7
    2516:	4463      	add	r3, ip
    2518:	685b      	ldr	r3, [r3, #4]
    251a:	0c1b      	lsrs	r3, r3, #16
    251c:	b2da      	uxtb	r2, r3
    251e:	2308      	movs	r3, #8
    2520:	18fb      	adds	r3, r7, r3
    2522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	0018      	movs	r0, r3
    2528:	4b1d      	ldr	r3, [pc, #116]	; (25a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
    252a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	6818      	ldr	r0, [r3, #0]
    2530:	2304      	movs	r3, #4
    2532:	2220      	movs	r2, #32
    2534:	4694      	mov	ip, r2
    2536:	44bc      	add	ip, r7
    2538:	4463      	add	r3, ip
    253a:	785b      	ldrb	r3, [r3, #1]
    253c:	b29a      	uxth	r2, r3
    253e:	230f      	movs	r3, #15
    2540:	18fc      	adds	r4, r7, r3
    2542:	2308      	movs	r3, #8
    2544:	18fb      	adds	r3, r7, r3
    2546:	0019      	movs	r1, r3
    2548:	4b16      	ldr	r3, [pc, #88]	; (25a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
    254a:	4798      	blx	r3
    254c:	0003      	movs	r3, r0
    254e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    2550:	2304      	movs	r3, #4
    2552:	2220      	movs	r2, #32
    2554:	4694      	mov	ip, r2
    2556:	44bc      	add	ip, r7
    2558:	4463      	add	r3, ip
    255a:	899b      	ldrh	r3, [r3, #12]
    255c:	2b00      	cmp	r3, #0
    255e:	d014      	beq.n	258a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	6818      	ldr	r0, [r3, #0]
    2564:	2304      	movs	r3, #4
    2566:	2220      	movs	r2, #32
    2568:	4694      	mov	ip, r2
    256a:	44bc      	add	ip, r7
    256c:	4463      	add	r3, ip
    256e:	6899      	ldr	r1, [r3, #8]
    2570:	2304      	movs	r3, #4
    2572:	2220      	movs	r2, #32
    2574:	4694      	mov	ip, r2
    2576:	44bc      	add	ip, r7
    2578:	4463      	add	r3, ip
    257a:	899a      	ldrh	r2, [r3, #12]
    257c:	230f      	movs	r3, #15
    257e:	18fc      	adds	r4, r7, r3
    2580:	2300      	movs	r3, #0
    2582:	4d09      	ldr	r5, [pc, #36]	; (25a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
    2584:	47a8      	blx	r5
    2586:	0003      	movs	r3, r0
    2588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	0018      	movs	r0, r3
    258e:	4b07      	ldr	r3, [pc, #28]	; (25ac <_at25dfx_chip_issue_read_command_wait+0x104>)
    2590:	4798      	blx	r3
}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	46bd      	mov	sp, r7
    2596:	b004      	add	sp, #16
    2598:	bcb0      	pop	{r4, r5, r7}
    259a:	bc08      	pop	{r3}
    259c:	b004      	add	sp, #16
    259e:	4718      	bx	r3
    25a0:	00002469 	.word	0x00002469
    25a4:	00003c3d 	.word	0x00003c3d
    25a8:	00003a81 	.word	0x00003a81
    25ac:	00002489 	.word	0x00002489

000025b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    25b0:	b084      	sub	sp, #16
    25b2:	b590      	push	{r4, r7, lr}
    25b4:	b085      	sub	sp, #20
    25b6:	af00      	add	r7, sp, #0
    25b8:	6078      	str	r0, [r7, #4]
    25ba:	2004      	movs	r0, #4
    25bc:	2420      	movs	r4, #32
    25be:	46a4      	mov	ip, r4
    25c0:	44bc      	add	ip, r7
    25c2:	4460      	add	r0, ip
    25c4:	6001      	str	r1, [r0, #0]
    25c6:	6042      	str	r2, [r0, #4]
    25c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    25ca:	2304      	movs	r3, #4
    25cc:	2220      	movs	r2, #32
    25ce:	4694      	mov	ip, r2
    25d0:	44bc      	add	ip, r7
    25d2:	4463      	add	r3, ip
    25d4:	781a      	ldrb	r2, [r3, #0]
    25d6:	2308      	movs	r3, #8
    25d8:	18fb      	adds	r3, r7, r3
    25da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    25dc:	2304      	movs	r3, #4
    25de:	2220      	movs	r2, #32
    25e0:	4694      	mov	ip, r2
    25e2:	44bc      	add	ip, r7
    25e4:	4463      	add	r3, ip
    25e6:	785b      	ldrb	r3, [r3, #1]
    25e8:	2b01      	cmp	r3, #1
    25ea:	d91f      	bls.n	262c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    25ec:	2304      	movs	r3, #4
    25ee:	2220      	movs	r2, #32
    25f0:	4694      	mov	ip, r2
    25f2:	44bc      	add	ip, r7
    25f4:	4463      	add	r3, ip
    25f6:	685b      	ldr	r3, [r3, #4]
    25f8:	b2da      	uxtb	r2, r3
    25fa:	2308      	movs	r3, #8
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    2600:	2304      	movs	r3, #4
    2602:	2220      	movs	r2, #32
    2604:	4694      	mov	ip, r2
    2606:	44bc      	add	ip, r7
    2608:	4463      	add	r3, ip
    260a:	685b      	ldr	r3, [r3, #4]
    260c:	0a1b      	lsrs	r3, r3, #8
    260e:	b2da      	uxtb	r2, r3
    2610:	2308      	movs	r3, #8
    2612:	18fb      	adds	r3, r7, r3
    2614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    2616:	2304      	movs	r3, #4
    2618:	2220      	movs	r2, #32
    261a:	4694      	mov	ip, r2
    261c:	44bc      	add	ip, r7
    261e:	4463      	add	r3, ip
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	0c1b      	lsrs	r3, r3, #16
    2624:	b2da      	uxtb	r2, r3
    2626:	2308      	movs	r3, #8
    2628:	18fb      	adds	r3, r7, r3
    262a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	0018      	movs	r0, r3
    2630:	4b1d      	ldr	r3, [pc, #116]	; (26a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
    2632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	6818      	ldr	r0, [r3, #0]
    2638:	2304      	movs	r3, #4
    263a:	2220      	movs	r2, #32
    263c:	4694      	mov	ip, r2
    263e:	44bc      	add	ip, r7
    2640:	4463      	add	r3, ip
    2642:	785b      	ldrb	r3, [r3, #1]
    2644:	b29a      	uxth	r2, r3
    2646:	230f      	movs	r3, #15
    2648:	18fc      	adds	r4, r7, r3
    264a:	2308      	movs	r3, #8
    264c:	18fb      	adds	r3, r7, r3
    264e:	0019      	movs	r1, r3
    2650:	4b16      	ldr	r3, [pc, #88]	; (26ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
    2652:	4798      	blx	r3
    2654:	0003      	movs	r3, r0
    2656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    2658:	2304      	movs	r3, #4
    265a:	2220      	movs	r2, #32
    265c:	4694      	mov	ip, r2
    265e:	44bc      	add	ip, r7
    2660:	4463      	add	r3, ip
    2662:	899b      	ldrh	r3, [r3, #12]
    2664:	2b00      	cmp	r3, #0
    2666:	d014      	beq.n	2692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	6818      	ldr	r0, [r3, #0]
    266c:	2304      	movs	r3, #4
    266e:	2220      	movs	r2, #32
    2670:	4694      	mov	ip, r2
    2672:	44bc      	add	ip, r7
    2674:	4463      	add	r3, ip
    2676:	6899      	ldr	r1, [r3, #8]
    2678:	2304      	movs	r3, #4
    267a:	2220      	movs	r2, #32
    267c:	4694      	mov	ip, r2
    267e:	44bc      	add	ip, r7
    2680:	4463      	add	r3, ip
    2682:	899b      	ldrh	r3, [r3, #12]
    2684:	220f      	movs	r2, #15
    2686:	18bc      	adds	r4, r7, r2
    2688:	001a      	movs	r2, r3
    268a:	4b08      	ldr	r3, [pc, #32]	; (26ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
    268c:	4798      	blx	r3
    268e:	0003      	movs	r3, r0
    2690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	0018      	movs	r0, r3
    2696:	4b06      	ldr	r3, [pc, #24]	; (26b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
    2698:	4798      	blx	r3
}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	46bd      	mov	sp, r7
    269e:	b005      	add	sp, #20
    26a0:	bc90      	pop	{r4, r7}
    26a2:	bc08      	pop	{r3}
    26a4:	b004      	add	sp, #16
    26a6:	4718      	bx	r3
    26a8:	00002469 	.word	0x00002469
    26ac:	00003c3d 	.word	0x00003c3d
    26b0:	00002489 	.word	0x00002489

000026b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    26b4:	b590      	push	{r4, r7, lr}
    26b6:	b085      	sub	sp, #20
    26b8:	af00      	add	r7, sp, #0
    26ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
    26bc:	230c      	movs	r3, #12
    26be:	18fb      	adds	r3, r7, r3
    26c0:	2200      	movs	r2, #0
    26c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	681b      	ldr	r3, [r3, #0]
    26ca:	0018      	movs	r0, r3
    26cc:	4b3c      	ldr	r3, [pc, #240]	; (27c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    26ce:	4798      	blx	r3
    26d0:	0003      	movs	r3, r0
    26d2:	001a      	movs	r2, r3
    26d4:	2301      	movs	r3, #1
    26d6:	4053      	eors	r3, r2
    26d8:	b2db      	uxtb	r3, r3
    26da:	2b00      	cmp	r3, #0
    26dc:	d1f3      	bne.n	26c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	0018      	movs	r0, r3
    26e2:	4b38      	ldr	r3, [pc, #224]	; (27c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
    26e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	220f      	movs	r2, #15
    26ec:	18bc      	adds	r4, r7, r2
    26ee:	2105      	movs	r1, #5
    26f0:	0018      	movs	r0, r3
    26f2:	4b35      	ldr	r3, [pc, #212]	; (27c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
    26f4:	4798      	blx	r3
    26f6:	0003      	movs	r3, r0
    26f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	681b      	ldr	r3, [r3, #0]
    2700:	0018      	movs	r0, r3
    2702:	4b32      	ldr	r3, [pc, #200]	; (27cc <_at25dfx_chip_get_nonbusy_status+0x118>)
    2704:	4798      	blx	r3
    2706:	0003      	movs	r3, r0
    2708:	001a      	movs	r2, r3
    270a:	2301      	movs	r3, #1
    270c:	4053      	eors	r3, r2
    270e:	b2db      	uxtb	r3, r3
    2710:	2b00      	cmp	r3, #0
    2712:	d1f3      	bne.n	26fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	681b      	ldr	r3, [r3, #0]
    2718:	220f      	movs	r2, #15
    271a:	18bc      	adds	r4, r7, r2
    271c:	220c      	movs	r2, #12
    271e:	18ba      	adds	r2, r7, r2
    2720:	0011      	movs	r1, r2
    2722:	0018      	movs	r0, r3
    2724:	4b2a      	ldr	r3, [pc, #168]	; (27d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    2726:	4798      	blx	r3
    2728:	0003      	movs	r3, r0
    272a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	0018      	movs	r0, r3
    2734:	4b22      	ldr	r3, [pc, #136]	; (27c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    2736:	4798      	blx	r3
    2738:	0003      	movs	r3, r0
    273a:	001a      	movs	r2, r3
    273c:	2301      	movs	r3, #1
    273e:	4053      	eors	r3, r2
    2740:	b2db      	uxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	d1f3      	bne.n	272e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	220f      	movs	r2, #15
    274c:	18bc      	adds	r4, r7, r2
    274e:	2100      	movs	r1, #0
    2750:	0018      	movs	r0, r3
    2752:	4b1d      	ldr	r3, [pc, #116]	; (27c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
    2754:	4798      	blx	r3
    2756:	0003      	movs	r3, r0
    2758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	0018      	movs	r0, r3
    2762:	4b1a      	ldr	r3, [pc, #104]	; (27cc <_at25dfx_chip_get_nonbusy_status+0x118>)
    2764:	4798      	blx	r3
    2766:	0003      	movs	r3, r0
    2768:	001a      	movs	r2, r3
    276a:	2301      	movs	r3, #1
    276c:	4053      	eors	r3, r2
    276e:	b2db      	uxtb	r3, r3
    2770:	2b00      	cmp	r3, #0
    2772:	d1f3      	bne.n	275c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	681b      	ldr	r3, [r3, #0]
    2778:	220f      	movs	r2, #15
    277a:	18bc      	adds	r4, r7, r2
    277c:	220c      	movs	r2, #12
    277e:	18ba      	adds	r2, r7, r2
    2780:	0011      	movs	r1, r2
    2782:	0018      	movs	r0, r3
    2784:	4b12      	ldr	r3, [pc, #72]	; (27d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    2786:	4798      	blx	r3
    2788:	0003      	movs	r3, r0
    278a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    278c:	230c      	movs	r3, #12
    278e:	18fb      	adds	r3, r7, r3
    2790:	881b      	ldrh	r3, [r3, #0]
    2792:	001a      	movs	r2, r3
    2794:	2301      	movs	r3, #1
    2796:	4013      	ands	r3, r2
    2798:	d1c8      	bne.n	272c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	0018      	movs	r0, r3
    279e:	4b0d      	ldr	r3, [pc, #52]	; (27d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
    27a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    27a2:	230c      	movs	r3, #12
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	881b      	ldrh	r3, [r3, #0]
    27a8:	001a      	movs	r2, r3
    27aa:	2320      	movs	r3, #32
    27ac:	4013      	ands	r3, r2
    27ae:	d001      	beq.n	27b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
    27b0:	2310      	movs	r3, #16
    27b2:	e000      	b.n	27b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
    27b4:	2300      	movs	r3, #0
}
    27b6:	0018      	movs	r0, r3
    27b8:	46bd      	mov	sp, r7
    27ba:	b005      	add	sp, #20
    27bc:	bd90      	pop	{r4, r7, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	00002273 	.word	0x00002273
    27c4:	00002469 	.word	0x00002469
    27c8:	000022c5 	.word	0x000022c5
    27cc:	0000229b 	.word	0x0000229b
    27d0:	0000230d 	.word	0x0000230d
    27d4:	00002489 	.word	0x00002489

000027d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
    27d8:	b590      	push	{r4, r7, lr}
    27da:	b089      	sub	sp, #36	; 0x24
    27dc:	af02      	add	r7, sp, #8
    27de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
    27e0:	2308      	movs	r3, #8
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	2206      	movs	r2, #6
    27e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    27e8:	2308      	movs	r3, #8
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	2201      	movs	r2, #1
    27ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    27f0:	2308      	movs	r3, #8
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	2200      	movs	r2, #0
    27f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    27f8:	2308      	movs	r3, #8
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	2200      	movs	r2, #0
    27fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2800:	2308      	movs	r3, #8
    2802:	18fb      	adds	r3, r7, r3
    2804:	2200      	movs	r2, #0
    2806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2808:	2308      	movs	r3, #8
    280a:	18fb      	adds	r3, r7, r3
    280c:	6878      	ldr	r0, [r7, #4]
    280e:	466a      	mov	r2, sp
    2810:	68d9      	ldr	r1, [r3, #12]
    2812:	6011      	str	r1, [r2, #0]
    2814:	6819      	ldr	r1, [r3, #0]
    2816:	685a      	ldr	r2, [r3, #4]
    2818:	689b      	ldr	r3, [r3, #8]
    281a:	4c03      	ldr	r4, [pc, #12]	; (2828 <_at25dfx_chip_enable_write+0x50>)
    281c:	47a0      	blx	r4
}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	46bd      	mov	sp, r7
    2822:	b007      	add	sp, #28
    2824:	bd90      	pop	{r4, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	000025b1 	.word	0x000025b1

0000282c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    282c:	b590      	push	{r4, r7, lr}
    282e:	b08b      	sub	sp, #44	; 0x2c
    2830:	af02      	add	r7, sp, #8
    2832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    2834:	2300      	movs	r3, #0
    2836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	221f      	movs	r2, #31
    283e:	18bc      	adds	r4, r7, r2
    2840:	0018      	movs	r0, r3
    2842:	4b21      	ldr	r3, [pc, #132]	; (28c8 <at25dfx_chip_check_presence+0x9c>)
    2844:	4798      	blx	r3
    2846:	0003      	movs	r3, r0
    2848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    284a:	231f      	movs	r3, #31
    284c:	18fb      	adds	r3, r7, r3
    284e:	781b      	ldrb	r3, [r3, #0]
    2850:	2b05      	cmp	r3, #5
    2852:	d103      	bne.n	285c <at25dfx_chip_check_presence+0x30>
		return status;
    2854:	231f      	movs	r3, #31
    2856:	18fb      	adds	r3, r7, r3
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	e030      	b.n	28be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
    285c:	230c      	movs	r3, #12
    285e:	18fb      	adds	r3, r7, r3
    2860:	229f      	movs	r2, #159	; 0x9f
    2862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2864:	230c      	movs	r3, #12
    2866:	18fb      	adds	r3, r7, r3
    2868:	2201      	movs	r2, #1
    286a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
    286c:	230c      	movs	r3, #12
    286e:	18fb      	adds	r3, r7, r3
    2870:	2208      	movs	r2, #8
    2872:	18ba      	adds	r2, r7, r2
    2874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
    2876:	230c      	movs	r3, #12
    2878:	18fb      	adds	r3, r7, r3
    287a:	2203      	movs	r2, #3
    287c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    287e:	230c      	movs	r3, #12
    2880:	18fb      	adds	r3, r7, r3
    2882:	2200      	movs	r2, #0
    2884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2886:	230c      	movs	r3, #12
    2888:	18fb      	adds	r3, r7, r3
    288a:	6878      	ldr	r0, [r7, #4]
    288c:	466a      	mov	r2, sp
    288e:	68d9      	ldr	r1, [r3, #12]
    2890:	6011      	str	r1, [r2, #0]
    2892:	6819      	ldr	r1, [r3, #0]
    2894:	685a      	ldr	r2, [r3, #4]
    2896:	689b      	ldr	r3, [r3, #8]
    2898:	4c0c      	ldr	r4, [pc, #48]	; (28cc <at25dfx_chip_check_presence+0xa0>)
    289a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	0018      	movs	r0, r3
    28a2:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <at25dfx_chip_check_presence+0xa4>)
    28a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	791b      	ldrb	r3, [r3, #4]
    28aa:	0018      	movs	r0, r3
    28ac:	4b09      	ldr	r3, [pc, #36]	; (28d4 <at25dfx_chip_check_presence+0xa8>)
    28ae:	4798      	blx	r3
    28b0:	0002      	movs	r2, r0
    28b2:	68bb      	ldr	r3, [r7, #8]
    28b4:	429a      	cmp	r2, r3
    28b6:	d101      	bne.n	28bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
    28b8:	2300      	movs	r3, #0
    28ba:	e000      	b.n	28be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
    28bc:	2314      	movs	r3, #20
	}
}
    28be:	0018      	movs	r0, r3
    28c0:	46bd      	mov	sp, r7
    28c2:	b009      	add	sp, #36	; 0x24
    28c4:	bd90      	pop	{r4, r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	00002215 	.word	0x00002215
    28cc:	000024a9 	.word	0x000024a9
    28d0:	0000225d 	.word	0x0000225d
    28d4:	00002395 	.word	0x00002395

000028d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    28d8:	b590      	push	{r4, r7, lr}
    28da:	b08d      	sub	sp, #52	; 0x34
    28dc:	af02      	add	r7, sp, #8
    28de:	60f8      	str	r0, [r7, #12]
    28e0:	60b9      	str	r1, [r7, #8]
    28e2:	607a      	str	r2, [r7, #4]
    28e4:	001a      	movs	r2, r3
    28e6:	1cbb      	adds	r3, r7, #2
    28e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    28ea:	1cbb      	adds	r3, r7, #2
    28ec:	881a      	ldrh	r2, [r3, #0]
    28ee:	68bb      	ldr	r3, [r7, #8]
    28f0:	18d4      	adds	r4, r2, r3
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	791b      	ldrb	r3, [r3, #4]
    28f6:	0018      	movs	r0, r3
    28f8:	4b21      	ldr	r3, [pc, #132]	; (2980 <at25dfx_chip_read_buffer+0xa8>)
    28fa:	4798      	blx	r3
    28fc:	0003      	movs	r3, r0
    28fe:	429c      	cmp	r4, r3
    2900:	d901      	bls.n	2906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2902:	2317      	movs	r3, #23
    2904:	e037      	b.n	2976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2906:	68fb      	ldr	r3, [r7, #12]
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	2227      	movs	r2, #39	; 0x27
    290c:	18bc      	adds	r4, r7, r2
    290e:	0018      	movs	r0, r3
    2910:	4b1c      	ldr	r3, [pc, #112]	; (2984 <at25dfx_chip_read_buffer+0xac>)
    2912:	4798      	blx	r3
    2914:	0003      	movs	r3, r0
    2916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2918:	2327      	movs	r3, #39	; 0x27
    291a:	18fb      	adds	r3, r7, r3
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	2b05      	cmp	r3, #5
    2920:	d103      	bne.n	292a <at25dfx_chip_read_buffer+0x52>
		return status;
    2922:	2327      	movs	r3, #39	; 0x27
    2924:	18fb      	adds	r3, r7, r3
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	e025      	b.n	2976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
    292a:	2314      	movs	r3, #20
    292c:	18fb      	adds	r3, r7, r3
    292e:	220b      	movs	r2, #11
    2930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
    2932:	2314      	movs	r3, #20
    2934:	18fb      	adds	r3, r7, r3
    2936:	2205      	movs	r2, #5
    2938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    293a:	2314      	movs	r3, #20
    293c:	18fb      	adds	r3, r7, r3
    293e:	68ba      	ldr	r2, [r7, #8]
    2940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
    2942:	2314      	movs	r3, #20
    2944:	18fb      	adds	r3, r7, r3
    2946:	687a      	ldr	r2, [r7, #4]
    2948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
    294a:	2314      	movs	r3, #20
    294c:	18fb      	adds	r3, r7, r3
    294e:	1cba      	adds	r2, r7, #2
    2950:	8812      	ldrh	r2, [r2, #0]
    2952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2954:	2314      	movs	r3, #20
    2956:	18fb      	adds	r3, r7, r3
    2958:	68f8      	ldr	r0, [r7, #12]
    295a:	466a      	mov	r2, sp
    295c:	68d9      	ldr	r1, [r3, #12]
    295e:	6011      	str	r1, [r2, #0]
    2960:	6819      	ldr	r1, [r3, #0]
    2962:	685a      	ldr	r2, [r3, #4]
    2964:	689b      	ldr	r3, [r3, #8]
    2966:	4c08      	ldr	r4, [pc, #32]	; (2988 <at25dfx_chip_read_buffer+0xb0>)
    2968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    296a:	68fb      	ldr	r3, [r7, #12]
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	0018      	movs	r0, r3
    2970:	4b06      	ldr	r3, [pc, #24]	; (298c <at25dfx_chip_read_buffer+0xb4>)
    2972:	4798      	blx	r3

	return STATUS_OK;
    2974:	2300      	movs	r3, #0
}
    2976:	0018      	movs	r0, r3
    2978:	46bd      	mov	sp, r7
    297a:	b00b      	add	sp, #44	; 0x2c
    297c:	bd90      	pop	{r4, r7, pc}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	00002411 	.word	0x00002411
    2984:	00002215 	.word	0x00002215
    2988:	000024a9 	.word	0x000024a9
    298c:	0000225d 	.word	0x0000225d

00002990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    2990:	b590      	push	{r4, r7, lr}
    2992:	b08d      	sub	sp, #52	; 0x34
    2994:	af02      	add	r7, sp, #8
    2996:	60f8      	str	r0, [r7, #12]
    2998:	60b9      	str	r1, [r7, #8]
    299a:	607a      	str	r2, [r7, #4]
    299c:	001a      	movs	r2, r3
    299e:	1cbb      	adds	r3, r7, #2
    29a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    29a2:	1cbb      	adds	r3, r7, #2
    29a4:	881a      	ldrh	r2, [r3, #0]
    29a6:	68bb      	ldr	r3, [r7, #8]
    29a8:	18d4      	adds	r4, r2, r3
    29aa:	68fb      	ldr	r3, [r7, #12]
    29ac:	791b      	ldrb	r3, [r3, #4]
    29ae:	0018      	movs	r0, r3
    29b0:	4b5b      	ldr	r3, [pc, #364]	; (2b20 <at25dfx_chip_write_buffer+0x190>)
    29b2:	4798      	blx	r3
    29b4:	0003      	movs	r3, r0
    29b6:	429c      	cmp	r4, r3
    29b8:	d901      	bls.n	29be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    29ba:	2317      	movs	r3, #23
    29bc:	e0ab      	b.n	2b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
    29be:	68fb      	ldr	r3, [r7, #12]
    29c0:	681b      	ldr	r3, [r3, #0]
    29c2:	2227      	movs	r2, #39	; 0x27
    29c4:	18bc      	adds	r4, r7, r2
    29c6:	0018      	movs	r0, r3
    29c8:	4b56      	ldr	r3, [pc, #344]	; (2b24 <at25dfx_chip_write_buffer+0x194>)
    29ca:	4798      	blx	r3
    29cc:	0003      	movs	r3, r0
    29ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    29d0:	2327      	movs	r3, #39	; 0x27
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	781b      	ldrb	r3, [r3, #0]
    29d6:	2b05      	cmp	r3, #5
    29d8:	d103      	bne.n	29e2 <at25dfx_chip_write_buffer+0x52>
		return status;
    29da:	2327      	movs	r3, #39	; 0x27
    29dc:	18fb      	adds	r3, r7, r3
    29de:	781b      	ldrb	r3, [r3, #0]
    29e0:	e099      	b.n	2b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	0018      	movs	r0, r3
    29e6:	4b50      	ldr	r3, [pc, #320]	; (2b28 <at25dfx_chip_write_buffer+0x198>)
    29e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
    29ea:	2314      	movs	r3, #20
    29ec:	18fb      	adds	r3, r7, r3
    29ee:	2202      	movs	r2, #2
    29f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    29f2:	2314      	movs	r3, #20
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	2204      	movs	r2, #4
    29f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    29fa:	2314      	movs	r3, #20
    29fc:	18fb      	adds	r3, r7, r3
    29fe:	68ba      	ldr	r2, [r7, #8]
    2a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
    2a02:	2314      	movs	r3, #20
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	687a      	ldr	r2, [r7, #4]
    2a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    2a0a:	68bb      	ldr	r3, [r7, #8]
    2a0c:	b29b      	uxth	r3, r3
    2a0e:	22ff      	movs	r2, #255	; 0xff
    2a10:	4013      	ands	r3, r2
    2a12:	b29a      	uxth	r2, r3
    2a14:	2324      	movs	r3, #36	; 0x24
    2a16:	18fb      	adds	r3, r7, r3
    2a18:	2180      	movs	r1, #128	; 0x80
    2a1a:	0049      	lsls	r1, r1, #1
    2a1c:	1a8a      	subs	r2, r1, r2
    2a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
    2a20:	1cbb      	adds	r3, r7, #2
    2a22:	2224      	movs	r2, #36	; 0x24
    2a24:	18ba      	adds	r2, r7, r2
    2a26:	8810      	ldrh	r0, [r2, #0]
    2a28:	881b      	ldrh	r3, [r3, #0]
    2a2a:	b299      	uxth	r1, r3
    2a2c:	b282      	uxth	r2, r0
    2a2e:	4291      	cmp	r1, r2
    2a30:	d900      	bls.n	2a34 <at25dfx_chip_write_buffer+0xa4>
    2a32:	1c03      	adds	r3, r0, #0
    2a34:	b29a      	uxth	r2, r3
    2a36:	2314      	movs	r3, #20
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2a3c:	2314      	movs	r3, #20
    2a3e:	18fb      	adds	r3, r7, r3
    2a40:	68f8      	ldr	r0, [r7, #12]
    2a42:	466a      	mov	r2, sp
    2a44:	68d9      	ldr	r1, [r3, #12]
    2a46:	6011      	str	r1, [r2, #0]
    2a48:	6819      	ldr	r1, [r3, #0]
    2a4a:	685a      	ldr	r2, [r3, #4]
    2a4c:	689b      	ldr	r3, [r3, #8]
    2a4e:	4c37      	ldr	r4, [pc, #220]	; (2b2c <at25dfx_chip_write_buffer+0x19c>)
    2a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    2a52:	2327      	movs	r3, #39	; 0x27
    2a54:	18fc      	adds	r4, r7, r3
    2a56:	68fb      	ldr	r3, [r7, #12]
    2a58:	0018      	movs	r0, r3
    2a5a:	4b35      	ldr	r3, [pc, #212]	; (2b30 <at25dfx_chip_write_buffer+0x1a0>)
    2a5c:	4798      	blx	r3
    2a5e:	0003      	movs	r3, r0
    2a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
    2a62:	2314      	movs	r3, #20
    2a64:	18fb      	adds	r3, r7, r3
    2a66:	899a      	ldrh	r2, [r3, #12]
    2a68:	1cbb      	adds	r3, r7, #2
    2a6a:	1cb9      	adds	r1, r7, #2
    2a6c:	8809      	ldrh	r1, [r1, #0]
    2a6e:	1a8a      	subs	r2, r1, r2
    2a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
    2a72:	e03f      	b.n	2af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	0018      	movs	r0, r3
    2a78:	4b2b      	ldr	r3, [pc, #172]	; (2b28 <at25dfx_chip_write_buffer+0x198>)
    2a7a:	4798      	blx	r3

		cmd.address += cmd.length;
    2a7c:	2314      	movs	r3, #20
    2a7e:	18fb      	adds	r3, r7, r3
    2a80:	685b      	ldr	r3, [r3, #4]
    2a82:	2214      	movs	r2, #20
    2a84:	18ba      	adds	r2, r7, r2
    2a86:	8992      	ldrh	r2, [r2, #12]
    2a88:	189a      	adds	r2, r3, r2
    2a8a:	2314      	movs	r3, #20
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
    2a90:	2314      	movs	r3, #20
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	689b      	ldr	r3, [r3, #8]
    2a96:	2214      	movs	r2, #20
    2a98:	18ba      	adds	r2, r7, r2
    2a9a:	8992      	ldrh	r2, [r2, #12]
    2a9c:	189a      	adds	r2, r3, r2
    2a9e:	2314      	movs	r3, #20
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    2aa4:	1cbb      	adds	r3, r7, #2
    2aa6:	881b      	ldrh	r3, [r3, #0]
    2aa8:	b299      	uxth	r1, r3
    2aaa:	2280      	movs	r2, #128	; 0x80
    2aac:	0052      	lsls	r2, r2, #1
    2aae:	4291      	cmp	r1, r2
    2ab0:	d901      	bls.n	2ab6 <at25dfx_chip_write_buffer+0x126>
    2ab2:	2380      	movs	r3, #128	; 0x80
    2ab4:	005b      	lsls	r3, r3, #1
    2ab6:	b29a      	uxth	r2, r3
    2ab8:	2314      	movs	r3, #20
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2abe:	2314      	movs	r3, #20
    2ac0:	18fb      	adds	r3, r7, r3
    2ac2:	68f8      	ldr	r0, [r7, #12]
    2ac4:	466a      	mov	r2, sp
    2ac6:	68d9      	ldr	r1, [r3, #12]
    2ac8:	6011      	str	r1, [r2, #0]
    2aca:	6819      	ldr	r1, [r3, #0]
    2acc:	685a      	ldr	r2, [r3, #4]
    2ace:	689b      	ldr	r3, [r3, #8]
    2ad0:	4c16      	ldr	r4, [pc, #88]	; (2b2c <at25dfx_chip_write_buffer+0x19c>)
    2ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
    2ad4:	2327      	movs	r3, #39	; 0x27
    2ad6:	18fc      	adds	r4, r7, r3
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	0018      	movs	r0, r3
    2adc:	4b14      	ldr	r3, [pc, #80]	; (2b30 <at25dfx_chip_write_buffer+0x1a0>)
    2ade:	4798      	blx	r3
    2ae0:	0003      	movs	r3, r0
    2ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
    2ae4:	2314      	movs	r3, #20
    2ae6:	18fb      	adds	r3, r7, r3
    2ae8:	899a      	ldrh	r2, [r3, #12]
    2aea:	1cbb      	adds	r3, r7, #2
    2aec:	1cb9      	adds	r1, r7, #2
    2aee:	8809      	ldrh	r1, [r1, #0]
    2af0:	1a8a      	subs	r2, r1, r2
    2af2:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
    2af4:	1cbb      	adds	r3, r7, #2
    2af6:	881b      	ldrh	r3, [r3, #0]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d004      	beq.n	2b06 <at25dfx_chip_write_buffer+0x176>
    2afc:	2327      	movs	r3, #39	; 0x27
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d0b6      	beq.n	2a74 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
    2b06:	68fb      	ldr	r3, [r7, #12]
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	0018      	movs	r0, r3
    2b0c:	4b09      	ldr	r3, [pc, #36]	; (2b34 <at25dfx_chip_write_buffer+0x1a4>)
    2b0e:	4798      	blx	r3

	return status;
    2b10:	2327      	movs	r3, #39	; 0x27
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	781b      	ldrb	r3, [r3, #0]
}
    2b16:	0018      	movs	r0, r3
    2b18:	46bd      	mov	sp, r7
    2b1a:	b00b      	add	sp, #44	; 0x2c
    2b1c:	bd90      	pop	{r4, r7, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	00002411 	.word	0x00002411
    2b24:	00002215 	.word	0x00002215
    2b28:	000027d9 	.word	0x000027d9
    2b2c:	000025b1 	.word	0x000025b1
    2b30:	000026b5 	.word	0x000026b5
    2b34:	0000225d 	.word	0x0000225d

00002b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    2b38:	b590      	push	{r4, r7, lr}
    2b3a:	b08d      	sub	sp, #52	; 0x34
    2b3c:	af02      	add	r7, sp, #8
    2b3e:	60f8      	str	r0, [r7, #12]
    2b40:	60b9      	str	r1, [r7, #8]
    2b42:	1dfb      	adds	r3, r7, #7
    2b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    2b46:	68fb      	ldr	r3, [r7, #12]
    2b48:	791b      	ldrb	r3, [r3, #4]
    2b4a:	0018      	movs	r0, r3
    2b4c:	4b33      	ldr	r3, [pc, #204]	; (2c1c <at25dfx_chip_erase_block+0xe4>)
    2b4e:	4798      	blx	r3
    2b50:	0002      	movs	r2, r0
    2b52:	68bb      	ldr	r3, [r7, #8]
    2b54:	429a      	cmp	r2, r3
    2b56:	d801      	bhi.n	2b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
    2b58:	2317      	movs	r3, #23
    2b5a:	e05b      	b.n	2c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2b5c:	68fb      	ldr	r3, [r7, #12]
    2b5e:	681b      	ldr	r3, [r3, #0]
    2b60:	2227      	movs	r2, #39	; 0x27
    2b62:	18bc      	adds	r4, r7, r2
    2b64:	0018      	movs	r0, r3
    2b66:	4b2e      	ldr	r3, [pc, #184]	; (2c20 <at25dfx_chip_erase_block+0xe8>)
    2b68:	4798      	blx	r3
    2b6a:	0003      	movs	r3, r0
    2b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2b6e:	2327      	movs	r3, #39	; 0x27
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	2b05      	cmp	r3, #5
    2b76:	d103      	bne.n	2b80 <at25dfx_chip_erase_block+0x48>
		return status;
    2b78:	2327      	movs	r3, #39	; 0x27
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	e049      	b.n	2c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
    2b80:	68fb      	ldr	r3, [r7, #12]
    2b82:	0018      	movs	r0, r3
    2b84:	4b27      	ldr	r3, [pc, #156]	; (2c24 <at25dfx_chip_erase_block+0xec>)
    2b86:	4798      	blx	r3

	switch (block_size) {
    2b88:	1dfb      	adds	r3, r7, #7
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d008      	beq.n	2ba2 <at25dfx_chip_erase_block+0x6a>
    2b90:	2b02      	cmp	r3, #2
    2b92:	d00b      	beq.n	2bac <at25dfx_chip_erase_block+0x74>
    2b94:	2b00      	cmp	r3, #0
    2b96:	d10e      	bne.n	2bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    2b98:	2314      	movs	r3, #20
    2b9a:	18fb      	adds	r3, r7, r3
    2b9c:	2220      	movs	r2, #32
    2b9e:	701a      	strb	r2, [r3, #0]
		break;
    2ba0:	e00d      	b.n	2bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    2ba2:	2314      	movs	r3, #20
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	2252      	movs	r2, #82	; 0x52
    2ba8:	701a      	strb	r2, [r3, #0]
		break;
    2baa:	e008      	b.n	2bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    2bac:	2314      	movs	r3, #20
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	22d8      	movs	r2, #216	; 0xd8
    2bb2:	701a      	strb	r2, [r3, #0]
		break;
    2bb4:	e003      	b.n	2bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    2bb6:	2314      	movs	r3, #20
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	2200      	movs	r2, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
    2bbe:	2314      	movs	r3, #20
    2bc0:	18fb      	adds	r3, r7, r3
    2bc2:	2204      	movs	r2, #4
    2bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2bc6:	2314      	movs	r3, #20
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	68ba      	ldr	r2, [r7, #8]
    2bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    2bce:	2314      	movs	r3, #20
    2bd0:	18fb      	adds	r3, r7, r3
    2bd2:	2200      	movs	r2, #0
    2bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    2bd6:	2314      	movs	r3, #20
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	2200      	movs	r2, #0
    2bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2bde:	2314      	movs	r3, #20
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	68f8      	ldr	r0, [r7, #12]
    2be4:	466a      	mov	r2, sp
    2be6:	68d9      	ldr	r1, [r3, #12]
    2be8:	6011      	str	r1, [r2, #0]
    2bea:	6819      	ldr	r1, [r3, #0]
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	689b      	ldr	r3, [r3, #8]
    2bf0:	4c0d      	ldr	r4, [pc, #52]	; (2c28 <at25dfx_chip_erase_block+0xf0>)
    2bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    2bf4:	2327      	movs	r3, #39	; 0x27
    2bf6:	18fc      	adds	r4, r7, r3
    2bf8:	68fb      	ldr	r3, [r7, #12]
    2bfa:	0018      	movs	r0, r3
    2bfc:	4b0b      	ldr	r3, [pc, #44]	; (2c2c <at25dfx_chip_erase_block+0xf4>)
    2bfe:	4798      	blx	r3
    2c00:	0003      	movs	r3, r0
    2c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
    2c04:	68fb      	ldr	r3, [r7, #12]
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	0018      	movs	r0, r3
    2c0a:	4b09      	ldr	r3, [pc, #36]	; (2c30 <at25dfx_chip_erase_block+0xf8>)
    2c0c:	4798      	blx	r3

	return status;
    2c0e:	2327      	movs	r3, #39	; 0x27
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
}
    2c14:	0018      	movs	r0, r3
    2c16:	46bd      	mov	sp, r7
    2c18:	b00b      	add	sp, #44	; 0x2c
    2c1a:	bd90      	pop	{r4, r7, pc}
    2c1c:	00002411 	.word	0x00002411
    2c20:	00002215 	.word	0x00002215
    2c24:	000027d9 	.word	0x000027d9
    2c28:	000025b1 	.word	0x000025b1
    2c2c:	000026b5 	.word	0x000026b5
    2c30:	0000225d 	.word	0x0000225d

00002c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    2c34:	b590      	push	{r4, r7, lr}
    2c36:	b08b      	sub	sp, #44	; 0x2c
    2c38:	af02      	add	r7, sp, #8
    2c3a:	6078      	str	r0, [r7, #4]
    2c3c:	000a      	movs	r2, r1
    2c3e:	1cfb      	adds	r3, r7, #3
    2c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	681b      	ldr	r3, [r3, #0]
    2c46:	221f      	movs	r2, #31
    2c48:	18bc      	adds	r4, r7, r2
    2c4a:	0018      	movs	r0, r3
    2c4c:	4b22      	ldr	r3, [pc, #136]	; (2cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
    2c4e:	4798      	blx	r3
    2c50:	0003      	movs	r3, r0
    2c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2c54:	231f      	movs	r3, #31
    2c56:	18fb      	adds	r3, r7, r3
    2c58:	781b      	ldrb	r3, [r3, #0]
    2c5a:	2b05      	cmp	r3, #5
    2c5c:	d103      	bne.n	2c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
    2c5e:	231f      	movs	r3, #31
    2c60:	18fb      	adds	r3, r7, r3
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	e033      	b.n	2cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	0018      	movs	r0, r3
    2c6a:	4b1c      	ldr	r3, [pc, #112]	; (2cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
    2c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    2c6e:	1cfb      	adds	r3, r7, #3
    2c70:	781b      	ldrb	r3, [r3, #0]
    2c72:	2b00      	cmp	r3, #0
    2c74:	d001      	beq.n	2c7a <at25dfx_chip_set_global_sector_protect+0x46>
    2c76:	223c      	movs	r2, #60	; 0x3c
    2c78:	e000      	b.n	2c7c <at25dfx_chip_set_global_sector_protect+0x48>
    2c7a:	2200      	movs	r2, #0
    2c7c:	230b      	movs	r3, #11
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
    2c82:	230c      	movs	r3, #12
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	2201      	movs	r2, #1
    2c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2c8a:	230c      	movs	r3, #12
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	2201      	movs	r2, #1
    2c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
    2c92:	230c      	movs	r3, #12
    2c94:	18fb      	adds	r3, r7, r3
    2c96:	2201      	movs	r2, #1
    2c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
    2c9a:	230c      	movs	r3, #12
    2c9c:	18fb      	adds	r3, r7, r3
    2c9e:	220b      	movs	r2, #11
    2ca0:	18ba      	adds	r2, r7, r2
    2ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2ca4:	230c      	movs	r3, #12
    2ca6:	18fb      	adds	r3, r7, r3
    2ca8:	2200      	movs	r2, #0
    2caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2cac:	230c      	movs	r3, #12
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	6878      	ldr	r0, [r7, #4]
    2cb2:	466a      	mov	r2, sp
    2cb4:	68d9      	ldr	r1, [r3, #12]
    2cb6:	6011      	str	r1, [r2, #0]
    2cb8:	6819      	ldr	r1, [r3, #0]
    2cba:	685a      	ldr	r2, [r3, #4]
    2cbc:	689b      	ldr	r3, [r3, #8]
    2cbe:	4c08      	ldr	r4, [pc, #32]	; (2ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
    2cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	0018      	movs	r0, r3
    2cc8:	4b06      	ldr	r3, [pc, #24]	; (2ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
    2cca:	4798      	blx	r3

	return STATUS_OK;
    2ccc:	2300      	movs	r3, #0
}
    2cce:	0018      	movs	r0, r3
    2cd0:	46bd      	mov	sp, r7
    2cd2:	b009      	add	sp, #36	; 0x24
    2cd4:	bd90      	pop	{r4, r7, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	00002215 	.word	0x00002215
    2cdc:	000027d9 	.word	0x000027d9
    2ce0:	000025b1 	.word	0x000025b1
    2ce4:	0000225d 	.word	0x0000225d

00002ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
    2ce8:	b590      	push	{r4, r7, lr}
    2cea:	b08d      	sub	sp, #52	; 0x34
    2cec:	af02      	add	r7, sp, #8
    2cee:	60f8      	str	r0, [r7, #12]
    2cf0:	60b9      	str	r1, [r7, #8]
    2cf2:	1dfb      	adds	r3, r7, #7
    2cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
    2cf6:	68fb      	ldr	r3, [r7, #12]
    2cf8:	791b      	ldrb	r3, [r3, #4]
    2cfa:	0018      	movs	r0, r3
    2cfc:	4b26      	ldr	r3, [pc, #152]	; (2d98 <at25dfx_chip_set_sector_protect+0xb0>)
    2cfe:	4798      	blx	r3
    2d00:	0002      	movs	r2, r0
    2d02:	68bb      	ldr	r3, [r7, #8]
    2d04:	429a      	cmp	r2, r3
    2d06:	d801      	bhi.n	2d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
    2d08:	2317      	movs	r3, #23
    2d0a:	e040      	b.n	2d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2d0c:	68fb      	ldr	r3, [r7, #12]
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	2227      	movs	r2, #39	; 0x27
    2d12:	18bc      	adds	r4, r7, r2
    2d14:	0018      	movs	r0, r3
    2d16:	4b21      	ldr	r3, [pc, #132]	; (2d9c <at25dfx_chip_set_sector_protect+0xb4>)
    2d18:	4798      	blx	r3
    2d1a:	0003      	movs	r3, r0
    2d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2d1e:	2327      	movs	r3, #39	; 0x27
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	781b      	ldrb	r3, [r3, #0]
    2d24:	2b05      	cmp	r3, #5
    2d26:	d103      	bne.n	2d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
    2d28:	2327      	movs	r3, #39	; 0x27
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	e02e      	b.n	2d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
    2d30:	68fb      	ldr	r3, [r7, #12]
    2d32:	0018      	movs	r0, r3
    2d34:	4b1a      	ldr	r3, [pc, #104]	; (2da0 <at25dfx_chip_set_sector_protect+0xb8>)
    2d36:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
    2d38:	1dfb      	adds	r3, r7, #7
    2d3a:	781b      	ldrb	r3, [r3, #0]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d001      	beq.n	2d44 <at25dfx_chip_set_sector_protect+0x5c>
    2d40:	2236      	movs	r2, #54	; 0x36
    2d42:	e000      	b.n	2d46 <at25dfx_chip_set_sector_protect+0x5e>
    2d44:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
    2d46:	2314      	movs	r3, #20
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    2d4c:	2314      	movs	r3, #20
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2204      	movs	r2, #4
    2d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2d54:	2314      	movs	r3, #20
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	68ba      	ldr	r2, [r7, #8]
    2d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    2d5c:	2314      	movs	r3, #20
    2d5e:	18fb      	adds	r3, r7, r3
    2d60:	2200      	movs	r2, #0
    2d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    2d64:	2314      	movs	r3, #20
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	2200      	movs	r2, #0
    2d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2d6c:	2314      	movs	r3, #20
    2d6e:	18fb      	adds	r3, r7, r3
    2d70:	68f8      	ldr	r0, [r7, #12]
    2d72:	466a      	mov	r2, sp
    2d74:	68d9      	ldr	r1, [r3, #12]
    2d76:	6011      	str	r1, [r2, #0]
    2d78:	6819      	ldr	r1, [r3, #0]
    2d7a:	685a      	ldr	r2, [r3, #4]
    2d7c:	689b      	ldr	r3, [r3, #8]
    2d7e:	4c09      	ldr	r4, [pc, #36]	; (2da4 <at25dfx_chip_set_sector_protect+0xbc>)
    2d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	0018      	movs	r0, r3
    2d88:	4b07      	ldr	r3, [pc, #28]	; (2da8 <at25dfx_chip_set_sector_protect+0xc0>)
    2d8a:	4798      	blx	r3

	return STATUS_OK;
    2d8c:	2300      	movs	r3, #0
}
    2d8e:	0018      	movs	r0, r3
    2d90:	46bd      	mov	sp, r7
    2d92:	b00b      	add	sp, #44	; 0x2c
    2d94:	bd90      	pop	{r4, r7, pc}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	00002411 	.word	0x00002411
    2d9c:	00002215 	.word	0x00002215
    2da0:	000027d9 	.word	0x000027d9
    2da4:	000025b1 	.word	0x000025b1
    2da8:	0000225d 	.word	0x0000225d

00002dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    2dac:	b590      	push	{r4, r7, lr}
    2dae:	b08b      	sub	sp, #44	; 0x2c
    2db0:	af02      	add	r7, sp, #8
    2db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	221f      	movs	r2, #31
    2dba:	18bc      	adds	r4, r7, r2
    2dbc:	0018      	movs	r0, r3
    2dbe:	4b1b      	ldr	r3, [pc, #108]	; (2e2c <at25dfx_chip_sleep+0x80>)
    2dc0:	4798      	blx	r3
    2dc2:	0003      	movs	r3, r0
    2dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2dc6:	231f      	movs	r3, #31
    2dc8:	18fb      	adds	r3, r7, r3
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	2b05      	cmp	r3, #5
    2dce:	d103      	bne.n	2dd8 <at25dfx_chip_sleep+0x2c>
		return status;
    2dd0:	231f      	movs	r3, #31
    2dd2:	18fb      	adds	r3, r7, r3
    2dd4:	781b      	ldrb	r3, [r3, #0]
    2dd6:	e024      	b.n	2e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
    2dd8:	230c      	movs	r3, #12
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	22b9      	movs	r2, #185	; 0xb9
    2dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2de0:	230c      	movs	r3, #12
    2de2:	18fb      	adds	r3, r7, r3
    2de4:	2201      	movs	r2, #1
    2de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    2de8:	230c      	movs	r3, #12
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	2200      	movs	r2, #0
    2dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2df0:	230c      	movs	r3, #12
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	2200      	movs	r2, #0
    2df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2df8:	230c      	movs	r3, #12
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	2200      	movs	r2, #0
    2dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2e00:	230c      	movs	r3, #12
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	6878      	ldr	r0, [r7, #4]
    2e06:	466a      	mov	r2, sp
    2e08:	68d9      	ldr	r1, [r3, #12]
    2e0a:	6011      	str	r1, [r2, #0]
    2e0c:	6819      	ldr	r1, [r3, #0]
    2e0e:	685a      	ldr	r2, [r3, #4]
    2e10:	689b      	ldr	r3, [r3, #8]
    2e12:	4c07      	ldr	r4, [pc, #28]	; (2e30 <at25dfx_chip_sleep+0x84>)
    2e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	0018      	movs	r0, r3
    2e1c:	4b05      	ldr	r3, [pc, #20]	; (2e34 <at25dfx_chip_sleep+0x88>)
    2e1e:	4798      	blx	r3

	return STATUS_OK;
    2e20:	2300      	movs	r3, #0
}
    2e22:	0018      	movs	r0, r3
    2e24:	46bd      	mov	sp, r7
    2e26:	b009      	add	sp, #36	; 0x24
    2e28:	bd90      	pop	{r4, r7, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	00002215 	.word	0x00002215
    2e30:	000025b1 	.word	0x000025b1
    2e34:	0000225d 	.word	0x0000225d

00002e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    2e38:	b590      	push	{r4, r7, lr}
    2e3a:	b08b      	sub	sp, #44	; 0x2c
    2e3c:	af02      	add	r7, sp, #8
    2e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    2e40:	687b      	ldr	r3, [r7, #4]
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	221f      	movs	r2, #31
    2e46:	18bc      	adds	r4, r7, r2
    2e48:	0018      	movs	r0, r3
    2e4a:	4b1b      	ldr	r3, [pc, #108]	; (2eb8 <at25dfx_chip_wake+0x80>)
    2e4c:	4798      	blx	r3
    2e4e:	0003      	movs	r3, r0
    2e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2e52:	231f      	movs	r3, #31
    2e54:	18fb      	adds	r3, r7, r3
    2e56:	781b      	ldrb	r3, [r3, #0]
    2e58:	2b05      	cmp	r3, #5
    2e5a:	d103      	bne.n	2e64 <at25dfx_chip_wake+0x2c>
		return status;
    2e5c:	231f      	movs	r3, #31
    2e5e:	18fb      	adds	r3, r7, r3
    2e60:	781b      	ldrb	r3, [r3, #0]
    2e62:	e024      	b.n	2eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
    2e64:	230c      	movs	r3, #12
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	22ab      	movs	r2, #171	; 0xab
    2e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2e6c:	230c      	movs	r3, #12
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	2201      	movs	r2, #1
    2e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    2e74:	230c      	movs	r3, #12
    2e76:	18fb      	adds	r3, r7, r3
    2e78:	2200      	movs	r2, #0
    2e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2e7c:	230c      	movs	r3, #12
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	2200      	movs	r2, #0
    2e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2e84:	230c      	movs	r3, #12
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	2200      	movs	r2, #0
    2e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2e8c:	230c      	movs	r3, #12
    2e8e:	18fb      	adds	r3, r7, r3
    2e90:	6878      	ldr	r0, [r7, #4]
    2e92:	466a      	mov	r2, sp
    2e94:	68d9      	ldr	r1, [r3, #12]
    2e96:	6011      	str	r1, [r2, #0]
    2e98:	6819      	ldr	r1, [r3, #0]
    2e9a:	685a      	ldr	r2, [r3, #4]
    2e9c:	689b      	ldr	r3, [r3, #8]
    2e9e:	4c07      	ldr	r4, [pc, #28]	; (2ebc <at25dfx_chip_wake+0x84>)
    2ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	0018      	movs	r0, r3
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <at25dfx_chip_wake+0x88>)
    2eaa:	4798      	blx	r3

	return STATUS_OK;
    2eac:	2300      	movs	r3, #0
    2eae:	0018      	movs	r0, r3
    2eb0:	46bd      	mov	sp, r7
    2eb2:	b009      	add	sp, #36	; 0x24
    2eb4:	bd90      	pop	{r4, r7, pc}
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	00002215 	.word	0x00002215
    2ebc:	000025b1 	.word	0x000025b1
    2ec0:	0000225d 	.word	0x0000225d

00002ec4 <system_pinmux_get_config_defaults>:
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b082      	sub	sp, #8
    2ec8:	af00      	add	r7, sp, #0
    2eca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ecc:	687b      	ldr	r3, [r7, #4]
    2ece:	2280      	movs	r2, #128	; 0x80
    2ed0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	2200      	movs	r2, #0
    2ed6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	2201      	movs	r2, #1
    2edc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	2200      	movs	r2, #0
    2ee2:	70da      	strb	r2, [r3, #3]
}
    2ee4:	46c0      	nop			; (mov r8, r8)
    2ee6:	46bd      	mov	sp, r7
    2ee8:	b002      	add	sp, #8
    2eea:	bd80      	pop	{r7, pc}

00002eec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2eec:	b580      	push	{r7, lr}
    2eee:	b084      	sub	sp, #16
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	0002      	movs	r2, r0
    2ef4:	6039      	str	r1, [r7, #0]
    2ef6:	1dfb      	adds	r3, r7, #7
    2ef8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2efa:	230c      	movs	r3, #12
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	0018      	movs	r0, r3
    2f00:	4b10      	ldr	r3, [pc, #64]	; (2f44 <port_pin_set_config+0x58>)
    2f02:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2f04:	230c      	movs	r3, #12
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	2280      	movs	r2, #128	; 0x80
    2f0a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	781a      	ldrb	r2, [r3, #0]
    2f10:	230c      	movs	r3, #12
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2f16:	683b      	ldr	r3, [r7, #0]
    2f18:	785a      	ldrb	r2, [r3, #1]
    2f1a:	230c      	movs	r3, #12
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2f20:	683b      	ldr	r3, [r7, #0]
    2f22:	789a      	ldrb	r2, [r3, #2]
    2f24:	230c      	movs	r3, #12
    2f26:	18fb      	adds	r3, r7, r3
    2f28:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2f2a:	230c      	movs	r3, #12
    2f2c:	18fa      	adds	r2, r7, r3
    2f2e:	1dfb      	adds	r3, r7, #7
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	0011      	movs	r1, r2
    2f34:	0018      	movs	r0, r3
    2f36:	4b04      	ldr	r3, [pc, #16]	; (2f48 <port_pin_set_config+0x5c>)
    2f38:	4798      	blx	r3
}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	46bd      	mov	sp, r7
    2f3e:	b004      	add	sp, #16
    2f40:	bd80      	pop	{r7, pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	00002ec5 	.word	0x00002ec5
    2f48:	00004e21 	.word	0x00004e21

00002f4c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2f4c:	b580      	push	{r7, lr}
    2f4e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2f50:	46c0      	nop			; (mov r8, r8)
    2f52:	46bd      	mov	sp, r7
    2f54:	bd80      	pop	{r7, pc}
	...

00002f58 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	b082      	sub	sp, #8
    2f5c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2f5e:	4b10      	ldr	r3, [pc, #64]	; (2fa0 <cpu_irq_enter_critical+0x48>)
    2f60:	681b      	ldr	r3, [r3, #0]
    2f62:	2b00      	cmp	r3, #0
    2f64:	d112      	bne.n	2f8c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f66:	f3ef 8310 	mrs	r3, PRIMASK
    2f6a:	607b      	str	r3, [r7, #4]
  return(result);
    2f6c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d109      	bne.n	2f86 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2f72:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2f74:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2f78:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <cpu_irq_enter_critical+0x4c>)
    2f7a:	2200      	movs	r2, #0
    2f7c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2f7e:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <cpu_irq_enter_critical+0x50>)
    2f80:	2201      	movs	r2, #1
    2f82:	701a      	strb	r2, [r3, #0]
    2f84:	e002      	b.n	2f8c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2f86:	4b08      	ldr	r3, [pc, #32]	; (2fa8 <cpu_irq_enter_critical+0x50>)
    2f88:	2200      	movs	r2, #0
    2f8a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2f8c:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <cpu_irq_enter_critical+0x48>)
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	1c5a      	adds	r2, r3, #1
    2f92:	4b03      	ldr	r3, [pc, #12]	; (2fa0 <cpu_irq_enter_critical+0x48>)
    2f94:	601a      	str	r2, [r3, #0]
}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	46bd      	mov	sp, r7
    2f9a:	b002      	add	sp, #8
    2f9c:	bd80      	pop	{r7, pc}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	2000002c 	.word	0x2000002c
    2fa4:	20000000 	.word	0x20000000
    2fa8:	20000030 	.word	0x20000030

00002fac <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2fac:	b580      	push	{r7, lr}
    2fae:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fb0:	4b0b      	ldr	r3, [pc, #44]	; (2fe0 <cpu_irq_leave_critical+0x34>)
    2fb2:	681b      	ldr	r3, [r3, #0]
    2fb4:	1e5a      	subs	r2, r3, #1
    2fb6:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <cpu_irq_leave_critical+0x34>)
    2fb8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2fba:	4b09      	ldr	r3, [pc, #36]	; (2fe0 <cpu_irq_leave_critical+0x34>)
    2fbc:	681b      	ldr	r3, [r3, #0]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d10a      	bne.n	2fd8 <cpu_irq_leave_critical+0x2c>
    2fc2:	4b08      	ldr	r3, [pc, #32]	; (2fe4 <cpu_irq_leave_critical+0x38>)
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	b2db      	uxtb	r3, r3
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d005      	beq.n	2fd8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <cpu_irq_leave_critical+0x3c>)
    2fce:	2201      	movs	r2, #1
    2fd0:	701a      	strb	r2, [r3, #0]
    2fd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2fd6:	b662      	cpsie	i
	}
}
    2fd8:	46c0      	nop			; (mov r8, r8)
    2fda:	46bd      	mov	sp, r7
    2fdc:	bd80      	pop	{r7, pc}
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	2000002c 	.word	0x2000002c
    2fe4:	20000030 	.word	0x20000030
    2fe8:	20000000 	.word	0x20000000

00002fec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b082      	sub	sp, #8
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	701a      	strb	r2, [r3, #0]
}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	46bd      	mov	sp, r7
    2ffe:	b002      	add	sp, #8
    3000:	bd80      	pop	{r7, pc}

00003002 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3002:	b580      	push	{r7, lr}
    3004:	b086      	sub	sp, #24
    3006:	af00      	add	r7, sp, #0
    3008:	60f8      	str	r0, [r7, #12]
    300a:	60b9      	str	r1, [r7, #8]
    300c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    300e:	2316      	movs	r3, #22
    3010:	18fb      	adds	r3, r7, r3
    3012:	2200      	movs	r2, #0
    3014:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3016:	68bb      	ldr	r3, [r7, #8]
    3018:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    301a:	68bb      	ldr	r3, [r7, #8]
    301c:	085a      	lsrs	r2, r3, #1
    301e:	68fb      	ldr	r3, [r7, #12]
    3020:	429a      	cmp	r2, r3
    3022:	d201      	bcs.n	3028 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3024:	2340      	movs	r3, #64	; 0x40
    3026:	e026      	b.n	3076 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3028:	68bb      	ldr	r3, [r7, #8]
    302a:	085b      	lsrs	r3, r3, #1
    302c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    302e:	e00a      	b.n	3046 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3030:	693a      	ldr	r2, [r7, #16]
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	1ad3      	subs	r3, r2, r3
    3036:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3038:	2316      	movs	r3, #22
    303a:	18fb      	adds	r3, r7, r3
    303c:	881a      	ldrh	r2, [r3, #0]
    303e:	2316      	movs	r3, #22
    3040:	18fb      	adds	r3, r7, r3
    3042:	3201      	adds	r2, #1
    3044:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3046:	693a      	ldr	r2, [r7, #16]
    3048:	68fb      	ldr	r3, [r7, #12]
    304a:	429a      	cmp	r2, r3
    304c:	d2f0      	bcs.n	3030 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    304e:	2316      	movs	r3, #22
    3050:	18fb      	adds	r3, r7, r3
    3052:	2216      	movs	r2, #22
    3054:	18ba      	adds	r2, r7, r2
    3056:	8812      	ldrh	r2, [r2, #0]
    3058:	3a01      	subs	r2, #1
    305a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    305c:	2316      	movs	r3, #22
    305e:	18fb      	adds	r3, r7, r3
    3060:	881b      	ldrh	r3, [r3, #0]
    3062:	2bff      	cmp	r3, #255	; 0xff
    3064:	d901      	bls.n	306a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3066:	2340      	movs	r3, #64	; 0x40
    3068:	e005      	b.n	3076 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	2216      	movs	r2, #22
    306e:	18ba      	adds	r2, r7, r2
    3070:	8812      	ldrh	r2, [r2, #0]
    3072:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3074:	2300      	movs	r3, #0
	}
}
    3076:	0018      	movs	r0, r3
    3078:	46bd      	mov	sp, r7
    307a:	b006      	add	sp, #24
    307c:	bd80      	pop	{r7, pc}
	...

00003080 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3080:	b580      	push	{r7, lr}
    3082:	b084      	sub	sp, #16
    3084:	af00      	add	r7, sp, #0
    3086:	0002      	movs	r2, r0
    3088:	1dfb      	adds	r3, r7, #7
    308a:	701a      	strb	r2, [r3, #0]
    308c:	1dbb      	adds	r3, r7, #6
    308e:	1c0a      	adds	r2, r1, #0
    3090:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3092:	4b1a      	ldr	r3, [pc, #104]	; (30fc <sercom_set_gclk_generator+0x7c>)
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2201      	movs	r2, #1
    3098:	4053      	eors	r3, r2
    309a:	b2db      	uxtb	r3, r3
    309c:	2b00      	cmp	r3, #0
    309e:	d103      	bne.n	30a8 <sercom_set_gclk_generator+0x28>
    30a0:	1dbb      	adds	r3, r7, #6
    30a2:	781b      	ldrb	r3, [r3, #0]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d01b      	beq.n	30e0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    30a8:	230c      	movs	r3, #12
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	0018      	movs	r0, r3
    30ae:	4b14      	ldr	r3, [pc, #80]	; (3100 <sercom_set_gclk_generator+0x80>)
    30b0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    30b2:	230c      	movs	r3, #12
    30b4:	18fb      	adds	r3, r7, r3
    30b6:	1dfa      	adds	r2, r7, #7
    30b8:	7812      	ldrb	r2, [r2, #0]
    30ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    30bc:	230c      	movs	r3, #12
    30be:	18fb      	adds	r3, r7, r3
    30c0:	0019      	movs	r1, r3
    30c2:	2013      	movs	r0, #19
    30c4:	4b0f      	ldr	r3, [pc, #60]	; (3104 <sercom_set_gclk_generator+0x84>)
    30c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    30c8:	2013      	movs	r0, #19
    30ca:	4b0f      	ldr	r3, [pc, #60]	; (3108 <sercom_set_gclk_generator+0x88>)
    30cc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    30ce:	4b0b      	ldr	r3, [pc, #44]	; (30fc <sercom_set_gclk_generator+0x7c>)
    30d0:	1dfa      	adds	r2, r7, #7
    30d2:	7812      	ldrb	r2, [r2, #0]
    30d4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    30d6:	4b09      	ldr	r3, [pc, #36]	; (30fc <sercom_set_gclk_generator+0x7c>)
    30d8:	2201      	movs	r2, #1
    30da:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    30dc:	2300      	movs	r3, #0
    30de:	e008      	b.n	30f2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    30e0:	4b06      	ldr	r3, [pc, #24]	; (30fc <sercom_set_gclk_generator+0x7c>)
    30e2:	785b      	ldrb	r3, [r3, #1]
    30e4:	1dfa      	adds	r2, r7, #7
    30e6:	7812      	ldrb	r2, [r2, #0]
    30e8:	429a      	cmp	r2, r3
    30ea:	d101      	bne.n	30f0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    30ec:	2300      	movs	r3, #0
    30ee:	e000      	b.n	30f2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    30f0:	231d      	movs	r3, #29
}
    30f2:	0018      	movs	r0, r3
    30f4:	46bd      	mov	sp, r7
    30f6:	b004      	add	sp, #16
    30f8:	bd80      	pop	{r7, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	20000034 	.word	0x20000034
    3100:	00002fed 	.word	0x00002fed
    3104:	00004b35 	.word	0x00004b35
    3108:	00004b79 	.word	0x00004b79

0000310c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    310c:	b580      	push	{r7, lr}
    310e:	b082      	sub	sp, #8
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
    3114:	000a      	movs	r2, r1
    3116:	1cfb      	adds	r3, r7, #3
    3118:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	4a4d      	ldr	r2, [pc, #308]	; (3254 <_sercom_get_default_pad+0x148>)
    311e:	4293      	cmp	r3, r2
    3120:	d03f      	beq.n	31a2 <_sercom_get_default_pad+0x96>
    3122:	4a4c      	ldr	r2, [pc, #304]	; (3254 <_sercom_get_default_pad+0x148>)
    3124:	4293      	cmp	r3, r2
    3126:	d806      	bhi.n	3136 <_sercom_get_default_pad+0x2a>
    3128:	4a4b      	ldr	r2, [pc, #300]	; (3258 <_sercom_get_default_pad+0x14c>)
    312a:	4293      	cmp	r3, r2
    312c:	d00f      	beq.n	314e <_sercom_get_default_pad+0x42>
    312e:	4a4b      	ldr	r2, [pc, #300]	; (325c <_sercom_get_default_pad+0x150>)
    3130:	4293      	cmp	r3, r2
    3132:	d021      	beq.n	3178 <_sercom_get_default_pad+0x6c>
    3134:	e089      	b.n	324a <_sercom_get_default_pad+0x13e>
    3136:	4a4a      	ldr	r2, [pc, #296]	; (3260 <_sercom_get_default_pad+0x154>)
    3138:	4293      	cmp	r3, r2
    313a:	d100      	bne.n	313e <_sercom_get_default_pad+0x32>
    313c:	e05b      	b.n	31f6 <_sercom_get_default_pad+0xea>
    313e:	4a49      	ldr	r2, [pc, #292]	; (3264 <_sercom_get_default_pad+0x158>)
    3140:	4293      	cmp	r3, r2
    3142:	d100      	bne.n	3146 <_sercom_get_default_pad+0x3a>
    3144:	e06c      	b.n	3220 <_sercom_get_default_pad+0x114>
    3146:	4a48      	ldr	r2, [pc, #288]	; (3268 <_sercom_get_default_pad+0x15c>)
    3148:	4293      	cmp	r3, r2
    314a:	d03f      	beq.n	31cc <_sercom_get_default_pad+0xc0>
    314c:	e07d      	b.n	324a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    314e:	1cfb      	adds	r3, r7, #3
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	2b01      	cmp	r3, #1
    3154:	d00a      	beq.n	316c <_sercom_get_default_pad+0x60>
    3156:	dc02      	bgt.n	315e <_sercom_get_default_pad+0x52>
    3158:	2b00      	cmp	r3, #0
    315a:	d005      	beq.n	3168 <_sercom_get_default_pad+0x5c>
    315c:	e075      	b.n	324a <_sercom_get_default_pad+0x13e>
    315e:	2b02      	cmp	r3, #2
    3160:	d006      	beq.n	3170 <_sercom_get_default_pad+0x64>
    3162:	2b03      	cmp	r3, #3
    3164:	d006      	beq.n	3174 <_sercom_get_default_pad+0x68>
    3166:	e070      	b.n	324a <_sercom_get_default_pad+0x13e>
    3168:	4b40      	ldr	r3, [pc, #256]	; (326c <_sercom_get_default_pad+0x160>)
    316a:	e06f      	b.n	324c <_sercom_get_default_pad+0x140>
    316c:	4b40      	ldr	r3, [pc, #256]	; (3270 <_sercom_get_default_pad+0x164>)
    316e:	e06d      	b.n	324c <_sercom_get_default_pad+0x140>
    3170:	4b40      	ldr	r3, [pc, #256]	; (3274 <_sercom_get_default_pad+0x168>)
    3172:	e06b      	b.n	324c <_sercom_get_default_pad+0x140>
    3174:	4b40      	ldr	r3, [pc, #256]	; (3278 <_sercom_get_default_pad+0x16c>)
    3176:	e069      	b.n	324c <_sercom_get_default_pad+0x140>
    3178:	1cfb      	adds	r3, r7, #3
    317a:	781b      	ldrb	r3, [r3, #0]
    317c:	2b01      	cmp	r3, #1
    317e:	d00a      	beq.n	3196 <_sercom_get_default_pad+0x8a>
    3180:	dc02      	bgt.n	3188 <_sercom_get_default_pad+0x7c>
    3182:	2b00      	cmp	r3, #0
    3184:	d005      	beq.n	3192 <_sercom_get_default_pad+0x86>
    3186:	e060      	b.n	324a <_sercom_get_default_pad+0x13e>
    3188:	2b02      	cmp	r3, #2
    318a:	d006      	beq.n	319a <_sercom_get_default_pad+0x8e>
    318c:	2b03      	cmp	r3, #3
    318e:	d006      	beq.n	319e <_sercom_get_default_pad+0x92>
    3190:	e05b      	b.n	324a <_sercom_get_default_pad+0x13e>
    3192:	2303      	movs	r3, #3
    3194:	e05a      	b.n	324c <_sercom_get_default_pad+0x140>
    3196:	4b39      	ldr	r3, [pc, #228]	; (327c <_sercom_get_default_pad+0x170>)
    3198:	e058      	b.n	324c <_sercom_get_default_pad+0x140>
    319a:	4b39      	ldr	r3, [pc, #228]	; (3280 <_sercom_get_default_pad+0x174>)
    319c:	e056      	b.n	324c <_sercom_get_default_pad+0x140>
    319e:	4b39      	ldr	r3, [pc, #228]	; (3284 <_sercom_get_default_pad+0x178>)
    31a0:	e054      	b.n	324c <_sercom_get_default_pad+0x140>
    31a2:	1cfb      	adds	r3, r7, #3
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	2b01      	cmp	r3, #1
    31a8:	d00a      	beq.n	31c0 <_sercom_get_default_pad+0xb4>
    31aa:	dc02      	bgt.n	31b2 <_sercom_get_default_pad+0xa6>
    31ac:	2b00      	cmp	r3, #0
    31ae:	d005      	beq.n	31bc <_sercom_get_default_pad+0xb0>
    31b0:	e04b      	b.n	324a <_sercom_get_default_pad+0x13e>
    31b2:	2b02      	cmp	r3, #2
    31b4:	d006      	beq.n	31c4 <_sercom_get_default_pad+0xb8>
    31b6:	2b03      	cmp	r3, #3
    31b8:	d006      	beq.n	31c8 <_sercom_get_default_pad+0xbc>
    31ba:	e046      	b.n	324a <_sercom_get_default_pad+0x13e>
    31bc:	4b32      	ldr	r3, [pc, #200]	; (3288 <_sercom_get_default_pad+0x17c>)
    31be:	e045      	b.n	324c <_sercom_get_default_pad+0x140>
    31c0:	4b32      	ldr	r3, [pc, #200]	; (328c <_sercom_get_default_pad+0x180>)
    31c2:	e043      	b.n	324c <_sercom_get_default_pad+0x140>
    31c4:	4b32      	ldr	r3, [pc, #200]	; (3290 <_sercom_get_default_pad+0x184>)
    31c6:	e041      	b.n	324c <_sercom_get_default_pad+0x140>
    31c8:	4b32      	ldr	r3, [pc, #200]	; (3294 <_sercom_get_default_pad+0x188>)
    31ca:	e03f      	b.n	324c <_sercom_get_default_pad+0x140>
    31cc:	1cfb      	adds	r3, r7, #3
    31ce:	781b      	ldrb	r3, [r3, #0]
    31d0:	2b01      	cmp	r3, #1
    31d2:	d00a      	beq.n	31ea <_sercom_get_default_pad+0xde>
    31d4:	dc02      	bgt.n	31dc <_sercom_get_default_pad+0xd0>
    31d6:	2b00      	cmp	r3, #0
    31d8:	d005      	beq.n	31e6 <_sercom_get_default_pad+0xda>
    31da:	e036      	b.n	324a <_sercom_get_default_pad+0x13e>
    31dc:	2b02      	cmp	r3, #2
    31de:	d006      	beq.n	31ee <_sercom_get_default_pad+0xe2>
    31e0:	2b03      	cmp	r3, #3
    31e2:	d006      	beq.n	31f2 <_sercom_get_default_pad+0xe6>
    31e4:	e031      	b.n	324a <_sercom_get_default_pad+0x13e>
    31e6:	4b2c      	ldr	r3, [pc, #176]	; (3298 <_sercom_get_default_pad+0x18c>)
    31e8:	e030      	b.n	324c <_sercom_get_default_pad+0x140>
    31ea:	4b2c      	ldr	r3, [pc, #176]	; (329c <_sercom_get_default_pad+0x190>)
    31ec:	e02e      	b.n	324c <_sercom_get_default_pad+0x140>
    31ee:	4b2c      	ldr	r3, [pc, #176]	; (32a0 <_sercom_get_default_pad+0x194>)
    31f0:	e02c      	b.n	324c <_sercom_get_default_pad+0x140>
    31f2:	4b2c      	ldr	r3, [pc, #176]	; (32a4 <_sercom_get_default_pad+0x198>)
    31f4:	e02a      	b.n	324c <_sercom_get_default_pad+0x140>
    31f6:	1cfb      	adds	r3, r7, #3
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	2b01      	cmp	r3, #1
    31fc:	d00a      	beq.n	3214 <_sercom_get_default_pad+0x108>
    31fe:	dc02      	bgt.n	3206 <_sercom_get_default_pad+0xfa>
    3200:	2b00      	cmp	r3, #0
    3202:	d005      	beq.n	3210 <_sercom_get_default_pad+0x104>
    3204:	e021      	b.n	324a <_sercom_get_default_pad+0x13e>
    3206:	2b02      	cmp	r3, #2
    3208:	d006      	beq.n	3218 <_sercom_get_default_pad+0x10c>
    320a:	2b03      	cmp	r3, #3
    320c:	d006      	beq.n	321c <_sercom_get_default_pad+0x110>
    320e:	e01c      	b.n	324a <_sercom_get_default_pad+0x13e>
    3210:	4b25      	ldr	r3, [pc, #148]	; (32a8 <_sercom_get_default_pad+0x19c>)
    3212:	e01b      	b.n	324c <_sercom_get_default_pad+0x140>
    3214:	4b25      	ldr	r3, [pc, #148]	; (32ac <_sercom_get_default_pad+0x1a0>)
    3216:	e019      	b.n	324c <_sercom_get_default_pad+0x140>
    3218:	4b25      	ldr	r3, [pc, #148]	; (32b0 <_sercom_get_default_pad+0x1a4>)
    321a:	e017      	b.n	324c <_sercom_get_default_pad+0x140>
    321c:	4b25      	ldr	r3, [pc, #148]	; (32b4 <_sercom_get_default_pad+0x1a8>)
    321e:	e015      	b.n	324c <_sercom_get_default_pad+0x140>
    3220:	1cfb      	adds	r3, r7, #3
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	2b01      	cmp	r3, #1
    3226:	d00a      	beq.n	323e <_sercom_get_default_pad+0x132>
    3228:	dc02      	bgt.n	3230 <_sercom_get_default_pad+0x124>
    322a:	2b00      	cmp	r3, #0
    322c:	d005      	beq.n	323a <_sercom_get_default_pad+0x12e>
    322e:	e00c      	b.n	324a <_sercom_get_default_pad+0x13e>
    3230:	2b02      	cmp	r3, #2
    3232:	d006      	beq.n	3242 <_sercom_get_default_pad+0x136>
    3234:	2b03      	cmp	r3, #3
    3236:	d006      	beq.n	3246 <_sercom_get_default_pad+0x13a>
    3238:	e007      	b.n	324a <_sercom_get_default_pad+0x13e>
    323a:	4b1f      	ldr	r3, [pc, #124]	; (32b8 <_sercom_get_default_pad+0x1ac>)
    323c:	e006      	b.n	324c <_sercom_get_default_pad+0x140>
    323e:	4b1f      	ldr	r3, [pc, #124]	; (32bc <_sercom_get_default_pad+0x1b0>)
    3240:	e004      	b.n	324c <_sercom_get_default_pad+0x140>
    3242:	4b1f      	ldr	r3, [pc, #124]	; (32c0 <_sercom_get_default_pad+0x1b4>)
    3244:	e002      	b.n	324c <_sercom_get_default_pad+0x140>
    3246:	4b1f      	ldr	r3, [pc, #124]	; (32c4 <_sercom_get_default_pad+0x1b8>)
    3248:	e000      	b.n	324c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    324a:	2300      	movs	r3, #0
}
    324c:	0018      	movs	r0, r3
    324e:	46bd      	mov	sp, r7
    3250:	b002      	add	sp, #8
    3252:	bd80      	pop	{r7, pc}
    3254:	42001000 	.word	0x42001000
    3258:	42000800 	.word	0x42000800
    325c:	42000c00 	.word	0x42000c00
    3260:	42001800 	.word	0x42001800
    3264:	42001c00 	.word	0x42001c00
    3268:	42001400 	.word	0x42001400
    326c:	00040003 	.word	0x00040003
    3270:	00050003 	.word	0x00050003
    3274:	00060003 	.word	0x00060003
    3278:	00070003 	.word	0x00070003
    327c:	00010003 	.word	0x00010003
    3280:	001e0003 	.word	0x001e0003
    3284:	001f0003 	.word	0x001f0003
    3288:	00080003 	.word	0x00080003
    328c:	00090003 	.word	0x00090003
    3290:	000a0003 	.word	0x000a0003
    3294:	000b0003 	.word	0x000b0003
    3298:	00100003 	.word	0x00100003
    329c:	00110003 	.word	0x00110003
    32a0:	00120003 	.word	0x00120003
    32a4:	00130003 	.word	0x00130003
    32a8:	000c0003 	.word	0x000c0003
    32ac:	000d0003 	.word	0x000d0003
    32b0:	000e0003 	.word	0x000e0003
    32b4:	000f0003 	.word	0x000f0003
    32b8:	00160003 	.word	0x00160003
    32bc:	00170003 	.word	0x00170003
    32c0:	00180003 	.word	0x00180003
    32c4:	00190003 	.word	0x00190003

000032c8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    32c8:	b590      	push	{r4, r7, lr}
    32ca:	b08b      	sub	sp, #44	; 0x2c
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    32d0:	230c      	movs	r3, #12
    32d2:	18fb      	adds	r3, r7, r3
    32d4:	4a0f      	ldr	r2, [pc, #60]	; (3314 <_sercom_get_sercom_inst_index+0x4c>)
    32d6:	ca13      	ldmia	r2!, {r0, r1, r4}
    32d8:	c313      	stmia	r3!, {r0, r1, r4}
    32da:	ca13      	ldmia	r2!, {r0, r1, r4}
    32dc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    32de:	2300      	movs	r3, #0
    32e0:	627b      	str	r3, [r7, #36]	; 0x24
    32e2:	e00e      	b.n	3302 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    32e4:	230c      	movs	r3, #12
    32e6:	18fb      	adds	r3, r7, r3
    32e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    32ea:	0092      	lsls	r2, r2, #2
    32ec:	58d3      	ldr	r3, [r2, r3]
    32ee:	001a      	movs	r2, r3
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	429a      	cmp	r2, r3
    32f4:	d102      	bne.n	32fc <_sercom_get_sercom_inst_index+0x34>
			return i;
    32f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32f8:	b2db      	uxtb	r3, r3
    32fa:	e006      	b.n	330a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    32fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32fe:	3301      	adds	r3, #1
    3300:	627b      	str	r3, [r7, #36]	; 0x24
    3302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3304:	2b05      	cmp	r3, #5
    3306:	d9ed      	bls.n	32e4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3308:	2300      	movs	r3, #0
}
    330a:	0018      	movs	r0, r3
    330c:	46bd      	mov	sp, r7
    330e:	b00b      	add	sp, #44	; 0x2c
    3310:	bd90      	pop	{r4, r7, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00005600 	.word	0x00005600

00003318 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	0002      	movs	r2, r0
    3320:	1dfb      	adds	r3, r7, #7
    3322:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3324:	46c0      	nop			; (mov r8, r8)
    3326:	46bd      	mov	sp, r7
    3328:	b002      	add	sp, #8
    332a:	bd80      	pop	{r7, pc}

0000332c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    332c:	b580      	push	{r7, lr}
    332e:	b084      	sub	sp, #16
    3330:	af00      	add	r7, sp, #0
    3332:	0002      	movs	r2, r0
    3334:	6039      	str	r1, [r7, #0]
    3336:	1dfb      	adds	r3, r7, #7
    3338:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    333a:	4b13      	ldr	r3, [pc, #76]	; (3388 <_sercom_set_handler+0x5c>)
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	2201      	movs	r2, #1
    3340:	4053      	eors	r3, r2
    3342:	b2db      	uxtb	r3, r3
    3344:	2b00      	cmp	r3, #0
    3346:	d015      	beq.n	3374 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3348:	2300      	movs	r3, #0
    334a:	60fb      	str	r3, [r7, #12]
    334c:	e00c      	b.n	3368 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    334e:	4b0f      	ldr	r3, [pc, #60]	; (338c <_sercom_set_handler+0x60>)
    3350:	68fa      	ldr	r2, [r7, #12]
    3352:	0092      	lsls	r2, r2, #2
    3354:	490e      	ldr	r1, [pc, #56]	; (3390 <_sercom_set_handler+0x64>)
    3356:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3358:	4b0e      	ldr	r3, [pc, #56]	; (3394 <_sercom_set_handler+0x68>)
    335a:	68fa      	ldr	r2, [r7, #12]
    335c:	0092      	lsls	r2, r2, #2
    335e:	2100      	movs	r1, #0
    3360:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	3301      	adds	r3, #1
    3366:	60fb      	str	r3, [r7, #12]
    3368:	68fb      	ldr	r3, [r7, #12]
    336a:	2b05      	cmp	r3, #5
    336c:	d9ef      	bls.n	334e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    336e:	4b06      	ldr	r3, [pc, #24]	; (3388 <_sercom_set_handler+0x5c>)
    3370:	2201      	movs	r2, #1
    3372:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3374:	1dfb      	adds	r3, r7, #7
    3376:	781a      	ldrb	r2, [r3, #0]
    3378:	4b04      	ldr	r3, [pc, #16]	; (338c <_sercom_set_handler+0x60>)
    337a:	0092      	lsls	r2, r2, #2
    337c:	6839      	ldr	r1, [r7, #0]
    337e:	50d1      	str	r1, [r2, r3]
}
    3380:	46c0      	nop			; (mov r8, r8)
    3382:	46bd      	mov	sp, r7
    3384:	b004      	add	sp, #16
    3386:	bd80      	pop	{r7, pc}
    3388:	20000036 	.word	0x20000036
    338c:	20000038 	.word	0x20000038
    3390:	00003319 	.word	0x00003319
    3394:	20000074 	.word	0x20000074

00003398 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3398:	b590      	push	{r4, r7, lr}
    339a:	b085      	sub	sp, #20
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    33a0:	2308      	movs	r3, #8
    33a2:	18fb      	adds	r3, r7, r3
    33a4:	4a0b      	ldr	r2, [pc, #44]	; (33d4 <_sercom_get_interrupt_vector+0x3c>)
    33a6:	6811      	ldr	r1, [r2, #0]
    33a8:	6019      	str	r1, [r3, #0]
    33aa:	8892      	ldrh	r2, [r2, #4]
    33ac:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    33ae:	230f      	movs	r3, #15
    33b0:	18fc      	adds	r4, r7, r3
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	0018      	movs	r0, r3
    33b6:	4b08      	ldr	r3, [pc, #32]	; (33d8 <_sercom_get_interrupt_vector+0x40>)
    33b8:	4798      	blx	r3
    33ba:	0003      	movs	r3, r0
    33bc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    33be:	230f      	movs	r3, #15
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	781b      	ldrb	r3, [r3, #0]
    33c4:	2208      	movs	r2, #8
    33c6:	18ba      	adds	r2, r7, r2
    33c8:	5cd3      	ldrb	r3, [r2, r3]
    33ca:	b25b      	sxtb	r3, r3
}
    33cc:	0018      	movs	r0, r3
    33ce:	46bd      	mov	sp, r7
    33d0:	b005      	add	sp, #20
    33d2:	bd90      	pop	{r4, r7, pc}
    33d4:	00005618 	.word	0x00005618
    33d8:	000032c9 	.word	0x000032c9

000033dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    33dc:	b580      	push	{r7, lr}
    33de:	af00      	add	r7, sp, #0
    33e0:	4b03      	ldr	r3, [pc, #12]	; (33f0 <SERCOM0_Handler+0x14>)
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	2000      	movs	r0, #0
    33e6:	4798      	blx	r3
    33e8:	46c0      	nop			; (mov r8, r8)
    33ea:	46bd      	mov	sp, r7
    33ec:	bd80      	pop	{r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	20000038 	.word	0x20000038

000033f4 <SERCOM1_Handler>:
    33f4:	b580      	push	{r7, lr}
    33f6:	af00      	add	r7, sp, #0
    33f8:	4b03      	ldr	r3, [pc, #12]	; (3408 <SERCOM1_Handler+0x14>)
    33fa:	685b      	ldr	r3, [r3, #4]
    33fc:	2001      	movs	r0, #1
    33fe:	4798      	blx	r3
    3400:	46c0      	nop			; (mov r8, r8)
    3402:	46bd      	mov	sp, r7
    3404:	bd80      	pop	{r7, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	20000038 	.word	0x20000038

0000340c <SERCOM2_Handler>:
    340c:	b580      	push	{r7, lr}
    340e:	af00      	add	r7, sp, #0
    3410:	4b03      	ldr	r3, [pc, #12]	; (3420 <SERCOM2_Handler+0x14>)
    3412:	689b      	ldr	r3, [r3, #8]
    3414:	2002      	movs	r0, #2
    3416:	4798      	blx	r3
    3418:	46c0      	nop			; (mov r8, r8)
    341a:	46bd      	mov	sp, r7
    341c:	bd80      	pop	{r7, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	20000038 	.word	0x20000038

00003424 <SERCOM3_Handler>:
    3424:	b580      	push	{r7, lr}
    3426:	af00      	add	r7, sp, #0
    3428:	4b03      	ldr	r3, [pc, #12]	; (3438 <SERCOM3_Handler+0x14>)
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	2003      	movs	r0, #3
    342e:	4798      	blx	r3
    3430:	46c0      	nop			; (mov r8, r8)
    3432:	46bd      	mov	sp, r7
    3434:	bd80      	pop	{r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	20000038 	.word	0x20000038

0000343c <SERCOM4_Handler>:
    343c:	b580      	push	{r7, lr}
    343e:	af00      	add	r7, sp, #0
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <SERCOM4_Handler+0x14>)
    3442:	691b      	ldr	r3, [r3, #16]
    3444:	2004      	movs	r0, #4
    3446:	4798      	blx	r3
    3448:	46c0      	nop			; (mov r8, r8)
    344a:	46bd      	mov	sp, r7
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	20000038 	.word	0x20000038

00003454 <SERCOM5_Handler>:
    3454:	b580      	push	{r7, lr}
    3456:	af00      	add	r7, sp, #0
    3458:	4b03      	ldr	r3, [pc, #12]	; (3468 <SERCOM5_Handler+0x14>)
    345a:	695b      	ldr	r3, [r3, #20]
    345c:	2005      	movs	r0, #5
    345e:	4798      	blx	r3
    3460:	46c0      	nop			; (mov r8, r8)
    3462:	46bd      	mov	sp, r7
    3464:	bd80      	pop	{r7, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	20000038 	.word	0x20000038

0000346c <system_pinmux_get_config_defaults>:
{
    346c:	b580      	push	{r7, lr}
    346e:	b082      	sub	sp, #8
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	2280      	movs	r2, #128	; 0x80
    3478:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	2200      	movs	r2, #0
    347e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2201      	movs	r2, #1
    3484:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	2200      	movs	r2, #0
    348a:	70da      	strb	r2, [r3, #3]
}
    348c:	46c0      	nop			; (mov r8, r8)
    348e:	46bd      	mov	sp, r7
    3490:	b002      	add	sp, #8
    3492:	bd80      	pop	{r7, pc}

00003494 <system_gclk_chan_get_config_defaults>:
{
    3494:	b580      	push	{r7, lr}
    3496:	b082      	sub	sp, #8
    3498:	af00      	add	r7, sp, #0
    349a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	2200      	movs	r2, #0
    34a0:	701a      	strb	r2, [r3, #0]
}
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	46bd      	mov	sp, r7
    34a6:	b002      	add	sp, #8
    34a8:	bd80      	pop	{r7, pc}
	...

000034ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    34ac:	b580      	push	{r7, lr}
    34ae:	b082      	sub	sp, #8
    34b0:	af00      	add	r7, sp, #0
    34b2:	0002      	movs	r2, r0
    34b4:	6039      	str	r1, [r7, #0]
    34b6:	1dfb      	adds	r3, r7, #7
    34b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    34ba:	1dfb      	adds	r3, r7, #7
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	2b01      	cmp	r3, #1
    34c0:	d00a      	beq.n	34d8 <system_apb_clock_set_mask+0x2c>
    34c2:	2b02      	cmp	r3, #2
    34c4:	d00f      	beq.n	34e6 <system_apb_clock_set_mask+0x3a>
    34c6:	2b00      	cmp	r3, #0
    34c8:	d114      	bne.n	34f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    34ca:	4b0e      	ldr	r3, [pc, #56]	; (3504 <system_apb_clock_set_mask+0x58>)
    34cc:	4a0d      	ldr	r2, [pc, #52]	; (3504 <system_apb_clock_set_mask+0x58>)
    34ce:	6991      	ldr	r1, [r2, #24]
    34d0:	683a      	ldr	r2, [r7, #0]
    34d2:	430a      	orrs	r2, r1
    34d4:	619a      	str	r2, [r3, #24]
			break;
    34d6:	e00f      	b.n	34f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    34d8:	4b0a      	ldr	r3, [pc, #40]	; (3504 <system_apb_clock_set_mask+0x58>)
    34da:	4a0a      	ldr	r2, [pc, #40]	; (3504 <system_apb_clock_set_mask+0x58>)
    34dc:	69d1      	ldr	r1, [r2, #28]
    34de:	683a      	ldr	r2, [r7, #0]
    34e0:	430a      	orrs	r2, r1
    34e2:	61da      	str	r2, [r3, #28]
			break;
    34e4:	e008      	b.n	34f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    34e6:	4b07      	ldr	r3, [pc, #28]	; (3504 <system_apb_clock_set_mask+0x58>)
    34e8:	4a06      	ldr	r2, [pc, #24]	; (3504 <system_apb_clock_set_mask+0x58>)
    34ea:	6a11      	ldr	r1, [r2, #32]
    34ec:	683a      	ldr	r2, [r7, #0]
    34ee:	430a      	orrs	r2, r1
    34f0:	621a      	str	r2, [r3, #32]
			break;
    34f2:	e001      	b.n	34f8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    34f4:	2317      	movs	r3, #23
    34f6:	e000      	b.n	34fa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    34f8:	2300      	movs	r3, #0
}
    34fa:	0018      	movs	r0, r3
    34fc:	46bd      	mov	sp, r7
    34fe:	b002      	add	sp, #8
    3500:	bd80      	pop	{r7, pc}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	40000400 	.word	0x40000400

00003508 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3508:	b580      	push	{r7, lr}
    350a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    350c:	4b05      	ldr	r3, [pc, #20]	; (3524 <system_is_debugger_present+0x1c>)
    350e:	789b      	ldrb	r3, [r3, #2]
    3510:	b2db      	uxtb	r3, r3
    3512:	001a      	movs	r2, r3
    3514:	2302      	movs	r3, #2
    3516:	4013      	ands	r3, r2
    3518:	1e5a      	subs	r2, r3, #1
    351a:	4193      	sbcs	r3, r2
    351c:	b2db      	uxtb	r3, r3
}
    351e:	0018      	movs	r0, r3
    3520:	46bd      	mov	sp, r7
    3522:	bd80      	pop	{r7, pc}
    3524:	41002000 	.word	0x41002000

00003528 <spi_is_write_complete>:
{
    3528:	b580      	push	{r7, lr}
    352a:	b084      	sub	sp, #16
    352c:	af00      	add	r7, sp, #0
    352e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3536:	68fb      	ldr	r3, [r7, #12]
    3538:	7e1b      	ldrb	r3, [r3, #24]
    353a:	b2db      	uxtb	r3, r3
    353c:	001a      	movs	r2, r3
    353e:	2302      	movs	r3, #2
    3540:	4013      	ands	r3, r2
    3542:	1e5a      	subs	r2, r3, #1
    3544:	4193      	sbcs	r3, r2
    3546:	b2db      	uxtb	r3, r3
}
    3548:	0018      	movs	r0, r3
    354a:	46bd      	mov	sp, r7
    354c:	b004      	add	sp, #16
    354e:	bd80      	pop	{r7, pc}

00003550 <spi_is_ready_to_write>:
{
    3550:	b580      	push	{r7, lr}
    3552:	b084      	sub	sp, #16
    3554:	af00      	add	r7, sp, #0
    3556:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	681b      	ldr	r3, [r3, #0]
    355c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    355e:	68fb      	ldr	r3, [r7, #12]
    3560:	7e1b      	ldrb	r3, [r3, #24]
    3562:	b2db      	uxtb	r3, r3
    3564:	001a      	movs	r2, r3
    3566:	2301      	movs	r3, #1
    3568:	4013      	ands	r3, r2
    356a:	1e5a      	subs	r2, r3, #1
    356c:	4193      	sbcs	r3, r2
    356e:	b2db      	uxtb	r3, r3
}
    3570:	0018      	movs	r0, r3
    3572:	46bd      	mov	sp, r7
    3574:	b004      	add	sp, #16
    3576:	bd80      	pop	{r7, pc}

00003578 <spi_is_ready_to_read>:
{
    3578:	b580      	push	{r7, lr}
    357a:	b084      	sub	sp, #16
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	681b      	ldr	r3, [r3, #0]
    3584:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3586:	68fb      	ldr	r3, [r7, #12]
    3588:	7e1b      	ldrb	r3, [r3, #24]
    358a:	b2db      	uxtb	r3, r3
    358c:	001a      	movs	r2, r3
    358e:	2304      	movs	r3, #4
    3590:	4013      	ands	r3, r2
    3592:	1e5a      	subs	r2, r3, #1
    3594:	4193      	sbcs	r3, r2
    3596:	b2db      	uxtb	r3, r3
}
    3598:	0018      	movs	r0, r3
    359a:	46bd      	mov	sp, r7
    359c:	b004      	add	sp, #16
    359e:	bd80      	pop	{r7, pc}

000035a0 <spi_write>:
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b084      	sub	sp, #16
    35a4:	af00      	add	r7, sp, #0
    35a6:	6078      	str	r0, [r7, #4]
    35a8:	000a      	movs	r2, r1
    35aa:	1cbb      	adds	r3, r7, #2
    35ac:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	681b      	ldr	r3, [r3, #0]
    35b2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	0018      	movs	r0, r3
    35b8:	4b0a      	ldr	r3, [pc, #40]	; (35e4 <spi_write+0x44>)
    35ba:	4798      	blx	r3
    35bc:	0003      	movs	r3, r0
    35be:	001a      	movs	r2, r3
    35c0:	2301      	movs	r3, #1
    35c2:	4053      	eors	r3, r2
    35c4:	b2db      	uxtb	r3, r3
    35c6:	2b00      	cmp	r3, #0
    35c8:	d001      	beq.n	35ce <spi_write+0x2e>
		return STATUS_BUSY;
    35ca:	2305      	movs	r3, #5
    35cc:	e006      	b.n	35dc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    35ce:	1cbb      	adds	r3, r7, #2
    35d0:	881b      	ldrh	r3, [r3, #0]
    35d2:	05db      	lsls	r3, r3, #23
    35d4:	0dda      	lsrs	r2, r3, #23
    35d6:	68fb      	ldr	r3, [r7, #12]
    35d8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    35da:	2300      	movs	r3, #0
}
    35dc:	0018      	movs	r0, r3
    35de:	46bd      	mov	sp, r7
    35e0:	b004      	add	sp, #16
    35e2:	bd80      	pop	{r7, pc}
    35e4:	00003551 	.word	0x00003551

000035e8 <spi_read>:
{
    35e8:	b580      	push	{r7, lr}
    35ea:	b084      	sub	sp, #16
    35ec:	af00      	add	r7, sp, #0
    35ee:	6078      	str	r0, [r7, #4]
    35f0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	0018      	movs	r0, r3
    35fc:	4b1b      	ldr	r3, [pc, #108]	; (366c <spi_read+0x84>)
    35fe:	4798      	blx	r3
    3600:	0003      	movs	r3, r0
    3602:	001a      	movs	r2, r3
    3604:	2301      	movs	r3, #1
    3606:	4053      	eors	r3, r2
    3608:	b2db      	uxtb	r3, r3
    360a:	2b00      	cmp	r3, #0
    360c:	d001      	beq.n	3612 <spi_read+0x2a>
		return STATUS_ERR_IO;
    360e:	2310      	movs	r3, #16
    3610:	e027      	b.n	3662 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    3612:	230f      	movs	r3, #15
    3614:	18fb      	adds	r3, r7, r3
    3616:	2200      	movs	r2, #0
    3618:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    361a:	68bb      	ldr	r3, [r7, #8]
    361c:	8b5b      	ldrh	r3, [r3, #26]
    361e:	b29b      	uxth	r3, r3
    3620:	001a      	movs	r2, r3
    3622:	2304      	movs	r3, #4
    3624:	4013      	ands	r3, r2
    3626:	d006      	beq.n	3636 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3628:	230f      	movs	r3, #15
    362a:	18fb      	adds	r3, r7, r3
    362c:	221e      	movs	r2, #30
    362e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3630:	68bb      	ldr	r3, [r7, #8]
    3632:	2204      	movs	r2, #4
    3634:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	799b      	ldrb	r3, [r3, #6]
    363a:	2b01      	cmp	r3, #1
    363c:	d108      	bne.n	3650 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    363e:	68bb      	ldr	r3, [r7, #8]
    3640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3642:	b29b      	uxth	r3, r3
    3644:	05db      	lsls	r3, r3, #23
    3646:	0ddb      	lsrs	r3, r3, #23
    3648:	b29a      	uxth	r2, r3
    364a:	683b      	ldr	r3, [r7, #0]
    364c:	801a      	strh	r2, [r3, #0]
    364e:	e005      	b.n	365c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3650:	68bb      	ldr	r3, [r7, #8]
    3652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3654:	b2db      	uxtb	r3, r3
    3656:	b29a      	uxth	r2, r3
    3658:	683b      	ldr	r3, [r7, #0]
    365a:	801a      	strh	r2, [r3, #0]
	return retval;
    365c:	230f      	movs	r3, #15
    365e:	18fb      	adds	r3, r7, r3
    3660:	781b      	ldrb	r3, [r3, #0]
}
    3662:	0018      	movs	r0, r3
    3664:	46bd      	mov	sp, r7
    3666:	b004      	add	sp, #16
    3668:	bd80      	pop	{r7, pc}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	00003579 	.word	0x00003579

00003670 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    3670:	b580      	push	{r7, lr}
    3672:	b084      	sub	sp, #16
    3674:	af00      	add	r7, sp, #0
    3676:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    367e:	68fb      	ldr	r3, [r7, #12]
    3680:	2202      	movs	r2, #2
    3682:	761a      	strb	r2, [r3, #24]
}
    3684:	46c0      	nop			; (mov r8, r8)
    3686:	46bd      	mov	sp, r7
    3688:	b004      	add	sp, #16
    368a:	bd80      	pop	{r7, pc}

0000368c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    368c:	b590      	push	{r4, r7, lr}
    368e:	b093      	sub	sp, #76	; 0x4c
    3690:	af00      	add	r7, sp, #0
    3692:	6078      	str	r0, [r7, #4]
    3694:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	681b      	ldr	r3, [r3, #0]
    36a0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    36a2:	231c      	movs	r3, #28
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	0018      	movs	r0, r3
    36a8:	4b85      	ldr	r3, [pc, #532]	; (38c0 <_spi_set_config+0x234>)
    36aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36ac:	231c      	movs	r3, #28
    36ae:	18fb      	adds	r3, r7, r3
    36b0:	2200      	movs	r2, #0
    36b2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    36b4:	683b      	ldr	r3, [r7, #0]
    36b6:	781b      	ldrb	r3, [r3, #0]
    36b8:	2b00      	cmp	r3, #0
    36ba:	d103      	bne.n	36c4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    36bc:	231c      	movs	r3, #28
    36be:	18fb      	adds	r3, r7, r3
    36c0:	2200      	movs	r2, #0
    36c2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    36c4:	683b      	ldr	r3, [r7, #0]
    36c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    36c8:	230c      	movs	r3, #12
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    36d2:	230c      	movs	r3, #12
    36d4:	18fb      	adds	r3, r7, r3
    36d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    36d8:	683b      	ldr	r3, [r7, #0]
    36da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    36dc:	230c      	movs	r3, #12
    36de:	18fb      	adds	r3, r7, r3
    36e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    36e2:	683b      	ldr	r3, [r7, #0]
    36e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    36e6:	230c      	movs	r3, #12
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    36ec:	2347      	movs	r3, #71	; 0x47
    36ee:	18fb      	adds	r3, r7, r3
    36f0:	2200      	movs	r2, #0
    36f2:	701a      	strb	r2, [r3, #0]
    36f4:	e02c      	b.n	3750 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    36f6:	2347      	movs	r3, #71	; 0x47
    36f8:	18fb      	adds	r3, r7, r3
    36fa:	781a      	ldrb	r2, [r3, #0]
    36fc:	230c      	movs	r3, #12
    36fe:	18fb      	adds	r3, r7, r3
    3700:	0092      	lsls	r2, r2, #2
    3702:	58d3      	ldr	r3, [r2, r3]
    3704:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3708:	2b00      	cmp	r3, #0
    370a:	d109      	bne.n	3720 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    370c:	2347      	movs	r3, #71	; 0x47
    370e:	18fb      	adds	r3, r7, r3
    3710:	781a      	ldrb	r2, [r3, #0]
    3712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3714:	0011      	movs	r1, r2
    3716:	0018      	movs	r0, r3
    3718:	4b6a      	ldr	r3, [pc, #424]	; (38c4 <_spi_set_config+0x238>)
    371a:	4798      	blx	r3
    371c:	0003      	movs	r3, r0
    371e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3722:	3301      	adds	r3, #1
    3724:	d00d      	beq.n	3742 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3728:	b2da      	uxtb	r2, r3
    372a:	231c      	movs	r3, #28
    372c:	18fb      	adds	r3, r7, r3
    372e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3732:	0c1b      	lsrs	r3, r3, #16
    3734:	b2db      	uxtb	r3, r3
    3736:	221c      	movs	r2, #28
    3738:	18ba      	adds	r2, r7, r2
    373a:	0011      	movs	r1, r2
    373c:	0018      	movs	r0, r3
    373e:	4b62      	ldr	r3, [pc, #392]	; (38c8 <_spi_set_config+0x23c>)
    3740:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3742:	2347      	movs	r3, #71	; 0x47
    3744:	18fb      	adds	r3, r7, r3
    3746:	781a      	ldrb	r2, [r3, #0]
    3748:	2347      	movs	r3, #71	; 0x47
    374a:	18fb      	adds	r3, r7, r3
    374c:	3201      	adds	r2, #1
    374e:	701a      	strb	r2, [r3, #0]
    3750:	2347      	movs	r3, #71	; 0x47
    3752:	18fb      	adds	r3, r7, r3
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b03      	cmp	r3, #3
    3758:	d9cd      	bls.n	36f6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    375a:	683b      	ldr	r3, [r7, #0]
    375c:	781a      	ldrb	r2, [r3, #0]
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    3762:	683b      	ldr	r3, [r7, #0]
    3764:	7c1a      	ldrb	r2, [r3, #16]
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    376a:	683b      	ldr	r3, [r7, #0]
    376c:	7c9a      	ldrb	r2, [r3, #18]
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3772:	683b      	ldr	r3, [r7, #0]
    3774:	7d1a      	ldrb	r2, [r3, #20]
    3776:	687b      	ldr	r3, [r7, #4]
    3778:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    377a:	230a      	movs	r3, #10
    377c:	18fb      	adds	r3, r7, r3
    377e:	2200      	movs	r2, #0
    3780:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    3782:	2300      	movs	r3, #0
    3784:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    3786:	2300      	movs	r3, #0
    3788:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    378a:	683b      	ldr	r3, [r7, #0]
    378c:	781b      	ldrb	r3, [r3, #0]
    378e:	2b01      	cmp	r3, #1
    3790:	d129      	bne.n	37e6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	681b      	ldr	r3, [r3, #0]
    3796:	0018      	movs	r0, r3
    3798:	4b4c      	ldr	r3, [pc, #304]	; (38cc <_spi_set_config+0x240>)
    379a:	4798      	blx	r3
    379c:	0003      	movs	r3, r0
    379e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    37a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37a2:	3314      	adds	r3, #20
    37a4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    37a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37a8:	b2db      	uxtb	r3, r3
    37aa:	0018      	movs	r0, r3
    37ac:	4b48      	ldr	r3, [pc, #288]	; (38d0 <_spi_set_config+0x244>)
    37ae:	4798      	blx	r3
    37b0:	0003      	movs	r3, r0
    37b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    37b4:	683b      	ldr	r3, [r7, #0]
    37b6:	699b      	ldr	r3, [r3, #24]
    37b8:	2223      	movs	r2, #35	; 0x23
    37ba:	18bc      	adds	r4, r7, r2
    37bc:	220a      	movs	r2, #10
    37be:	18ba      	adds	r2, r7, r2
    37c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    37c2:	0018      	movs	r0, r3
    37c4:	4b43      	ldr	r3, [pc, #268]	; (38d4 <_spi_set_config+0x248>)
    37c6:	4798      	blx	r3
    37c8:	0003      	movs	r3, r0
    37ca:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    37cc:	2323      	movs	r3, #35	; 0x23
    37ce:	18fb      	adds	r3, r7, r3
    37d0:	781b      	ldrb	r3, [r3, #0]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d001      	beq.n	37da <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    37d6:	2317      	movs	r3, #23
    37d8:	e06d      	b.n	38b6 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    37da:	230a      	movs	r3, #10
    37dc:	18fb      	adds	r3, r7, r3
    37de:	881b      	ldrh	r3, [r3, #0]
    37e0:	b2da      	uxtb	r2, r3
    37e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37e4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    37e6:	683b      	ldr	r3, [r7, #0]
    37e8:	781b      	ldrb	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d11a      	bne.n	3824 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    37ee:	683b      	ldr	r3, [r7, #0]
    37f0:	699b      	ldr	r3, [r3, #24]
    37f2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    37f4:	683b      	ldr	r3, [r7, #0]
    37f6:	8b9b      	ldrh	r3, [r3, #28]
    37f8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    37fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    37fe:	683a      	ldr	r2, [r7, #0]
    3800:	7f92      	ldrb	r2, [r2, #30]
    3802:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3804:	683a      	ldr	r2, [r7, #0]
    3806:	7fd2      	ldrb	r2, [r2, #31]
    3808:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    380a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    380c:	431a      	orrs	r2, r3
    380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3810:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    3812:	683b      	ldr	r3, [r7, #0]
    3814:	2220      	movs	r2, #32
    3816:	5c9b      	ldrb	r3, [r3, r2]
    3818:	2b00      	cmp	r3, #0
    381a:	d003      	beq.n	3824 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    381e:	2240      	movs	r2, #64	; 0x40
    3820:	4313      	orrs	r3, r2
    3822:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    3824:	683b      	ldr	r3, [r7, #0]
    3826:	685b      	ldr	r3, [r3, #4]
    3828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    382a:	4313      	orrs	r3, r2
    382c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    382e:	683b      	ldr	r3, [r7, #0]
    3830:	689b      	ldr	r3, [r3, #8]
    3832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3834:	4313      	orrs	r3, r2
    3836:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3838:	683b      	ldr	r3, [r7, #0]
    383a:	68db      	ldr	r3, [r3, #12]
    383c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    383e:	4313      	orrs	r3, r2
    3840:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3842:	683b      	ldr	r3, [r7, #0]
    3844:	7c1b      	ldrb	r3, [r3, #16]
    3846:	001a      	movs	r2, r3
    3848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    384a:	4313      	orrs	r3, r2
    384c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	7c5b      	ldrb	r3, [r3, #17]
    3852:	2b00      	cmp	r3, #0
    3854:	d103      	bne.n	385e <_spi_set_config+0x1d2>
    3856:	4b20      	ldr	r3, [pc, #128]	; (38d8 <_spi_set_config+0x24c>)
    3858:	4798      	blx	r3
    385a:	1e03      	subs	r3, r0, #0
    385c:	d003      	beq.n	3866 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3860:	2280      	movs	r2, #128	; 0x80
    3862:	4313      	orrs	r3, r2
    3864:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    3866:	683b      	ldr	r3, [r7, #0]
    3868:	7c9b      	ldrb	r3, [r3, #18]
    386a:	2b00      	cmp	r3, #0
    386c:	d004      	beq.n	3878 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3870:	2280      	movs	r2, #128	; 0x80
    3872:	0292      	lsls	r2, r2, #10
    3874:	4313      	orrs	r3, r2
    3876:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3878:	683b      	ldr	r3, [r7, #0]
    387a:	7cdb      	ldrb	r3, [r3, #19]
    387c:	2b00      	cmp	r3, #0
    387e:	d004      	beq.n	388a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3882:	2280      	movs	r2, #128	; 0x80
    3884:	0092      	lsls	r2, r2, #2
    3886:	4313      	orrs	r3, r2
    3888:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    388a:	683b      	ldr	r3, [r7, #0]
    388c:	7d1b      	ldrb	r3, [r3, #20]
    388e:	2b00      	cmp	r3, #0
    3890:	d004      	beq.n	389c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3894:	2280      	movs	r2, #128	; 0x80
    3896:	0192      	lsls	r2, r2, #6
    3898:	4313      	orrs	r3, r2
    389a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    389e:	681a      	ldr	r2, [r3, #0]
    38a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38a2:	431a      	orrs	r2, r3
    38a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38a6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    38a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38aa:	685a      	ldr	r2, [r3, #4]
    38ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    38ae:	431a      	orrs	r2, r3
    38b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38b2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    38b4:	2300      	movs	r3, #0
}
    38b6:	0018      	movs	r0, r3
    38b8:	46bd      	mov	sp, r7
    38ba:	b013      	add	sp, #76	; 0x4c
    38bc:	bd90      	pop	{r4, r7, pc}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	0000346d 	.word	0x0000346d
    38c4:	0000310d 	.word	0x0000310d
    38c8:	00004e21 	.word	0x00004e21
    38cc:	000032c9 	.word	0x000032c9
    38d0:	00004c59 	.word	0x00004c59
    38d4:	00003003 	.word	0x00003003
    38d8:	00003509 	.word	0x00003509

000038dc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    38dc:	b590      	push	{r4, r7, lr}
    38de:	b08b      	sub	sp, #44	; 0x2c
    38e0:	af00      	add	r7, sp, #0
    38e2:	60f8      	str	r0, [r7, #12]
    38e4:	60b9      	str	r1, [r7, #8]
    38e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	68ba      	ldr	r2, [r7, #8]
    38ec:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    38ee:	68fb      	ldr	r3, [r7, #12]
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    38f4:	6a3b      	ldr	r3, [r7, #32]
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	2202      	movs	r2, #2
    38fa:	4013      	ands	r3, r2
    38fc:	d001      	beq.n	3902 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    38fe:	231c      	movs	r3, #28
    3900:	e0a6      	b.n	3a50 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3902:	6a3b      	ldr	r3, [r7, #32]
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	2201      	movs	r2, #1
    3908:	4013      	ands	r3, r2
    390a:	d001      	beq.n	3910 <spi_init+0x34>
		return STATUS_BUSY;
    390c:	2305      	movs	r3, #5
    390e:	e09f      	b.n	3a50 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3910:	68fb      	ldr	r3, [r7, #12]
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	0018      	movs	r0, r3
    3916:	4b50      	ldr	r3, [pc, #320]	; (3a58 <spi_init+0x17c>)
    3918:	4798      	blx	r3
    391a:	0003      	movs	r3, r0
    391c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    391e:	69fb      	ldr	r3, [r7, #28]
    3920:	3302      	adds	r3, #2
    3922:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3924:	69fb      	ldr	r3, [r7, #28]
    3926:	3314      	adds	r3, #20
    3928:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    392a:	2201      	movs	r2, #1
    392c:	69bb      	ldr	r3, [r7, #24]
    392e:	409a      	lsls	r2, r3
    3930:	0013      	movs	r3, r2
    3932:	0019      	movs	r1, r3
    3934:	2002      	movs	r0, #2
    3936:	4b49      	ldr	r3, [pc, #292]	; (3a5c <spi_init+0x180>)
    3938:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    393a:	2310      	movs	r3, #16
    393c:	18fb      	adds	r3, r7, r3
    393e:	0018      	movs	r0, r3
    3940:	4b47      	ldr	r3, [pc, #284]	; (3a60 <spi_init+0x184>)
    3942:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	2224      	movs	r2, #36	; 0x24
    3948:	5c9a      	ldrb	r2, [r3, r2]
    394a:	2310      	movs	r3, #16
    394c:	18fb      	adds	r3, r7, r3
    394e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3950:	697b      	ldr	r3, [r7, #20]
    3952:	b2db      	uxtb	r3, r3
    3954:	2210      	movs	r2, #16
    3956:	18ba      	adds	r2, r7, r2
    3958:	0011      	movs	r1, r2
    395a:	0018      	movs	r0, r3
    395c:	4b41      	ldr	r3, [pc, #260]	; (3a64 <spi_init+0x188>)
    395e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3960:	697b      	ldr	r3, [r7, #20]
    3962:	b2db      	uxtb	r3, r3
    3964:	0018      	movs	r0, r3
    3966:	4b40      	ldr	r3, [pc, #256]	; (3a68 <spi_init+0x18c>)
    3968:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	2224      	movs	r2, #36	; 0x24
    396e:	5c9b      	ldrb	r3, [r3, r2]
    3970:	2100      	movs	r1, #0
    3972:	0018      	movs	r0, r3
    3974:	4b3d      	ldr	r3, [pc, #244]	; (3a6c <spi_init+0x190>)
    3976:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	781b      	ldrb	r3, [r3, #0]
    397c:	2b01      	cmp	r3, #1
    397e:	d105      	bne.n	398c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3980:	6a3b      	ldr	r3, [r7, #32]
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	220c      	movs	r2, #12
    3986:	431a      	orrs	r2, r3
    3988:	6a3b      	ldr	r3, [r7, #32]
    398a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	781b      	ldrb	r3, [r3, #0]
    3990:	2b00      	cmp	r3, #0
    3992:	d105      	bne.n	39a0 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3994:	6a3b      	ldr	r3, [r7, #32]
    3996:	681b      	ldr	r3, [r3, #0]
    3998:	2208      	movs	r2, #8
    399a:	431a      	orrs	r2, r3
    399c:	6a3b      	ldr	r3, [r7, #32]
    399e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    39a0:	2327      	movs	r3, #39	; 0x27
    39a2:	18fb      	adds	r3, r7, r3
    39a4:	2200      	movs	r2, #0
    39a6:	701a      	strb	r2, [r3, #0]
    39a8:	e010      	b.n	39cc <spi_init+0xf0>
		module->callback[i]        = NULL;
    39aa:	2327      	movs	r3, #39	; 0x27
    39ac:	18fb      	adds	r3, r7, r3
    39ae:	781b      	ldrb	r3, [r3, #0]
    39b0:	68fa      	ldr	r2, [r7, #12]
    39b2:	3302      	adds	r3, #2
    39b4:	009b      	lsls	r3, r3, #2
    39b6:	18d3      	adds	r3, r2, r3
    39b8:	3304      	adds	r3, #4
    39ba:	2200      	movs	r2, #0
    39bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    39be:	2327      	movs	r3, #39	; 0x27
    39c0:	18fb      	adds	r3, r7, r3
    39c2:	781a      	ldrb	r2, [r3, #0]
    39c4:	2327      	movs	r3, #39	; 0x27
    39c6:	18fb      	adds	r3, r7, r3
    39c8:	3201      	adds	r2, #1
    39ca:	701a      	strb	r2, [r3, #0]
    39cc:	2327      	movs	r3, #39	; 0x27
    39ce:	18fb      	adds	r3, r7, r3
    39d0:	781b      	ldrb	r3, [r3, #0]
    39d2:	2b06      	cmp	r3, #6
    39d4:	d9e9      	bls.n	39aa <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    39d6:	68fb      	ldr	r3, [r7, #12]
    39d8:	2200      	movs	r2, #0
    39da:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	2200      	movs	r2, #0
    39e0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	2200      	movs	r2, #0
    39e6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    39e8:	68fb      	ldr	r3, [r7, #12]
    39ea:	2200      	movs	r2, #0
    39ec:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	2236      	movs	r2, #54	; 0x36
    39f2:	2100      	movs	r1, #0
    39f4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    39f6:	68fb      	ldr	r3, [r7, #12]
    39f8:	2237      	movs	r2, #55	; 0x37
    39fa:	2100      	movs	r1, #0
    39fc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	2238      	movs	r2, #56	; 0x38
    3a02:	2100      	movs	r1, #0
    3a04:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    3a06:	68fb      	ldr	r3, [r7, #12]
    3a08:	2203      	movs	r2, #3
    3a0a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    3a0c:	68fb      	ldr	r3, [r7, #12]
    3a0e:	2200      	movs	r2, #0
    3a10:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	2213      	movs	r2, #19
    3a18:	18bc      	adds	r4, r7, r2
    3a1a:	0018      	movs	r0, r3
    3a1c:	4b0e      	ldr	r3, [pc, #56]	; (3a58 <spi_init+0x17c>)
    3a1e:	4798      	blx	r3
    3a20:	0003      	movs	r3, r0
    3a22:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3a24:	4a12      	ldr	r2, [pc, #72]	; (3a70 <spi_init+0x194>)
    3a26:	2313      	movs	r3, #19
    3a28:	18fb      	adds	r3, r7, r3
    3a2a:	781b      	ldrb	r3, [r3, #0]
    3a2c:	0011      	movs	r1, r2
    3a2e:	0018      	movs	r0, r3
    3a30:	4b10      	ldr	r3, [pc, #64]	; (3a74 <spi_init+0x198>)
    3a32:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3a34:	2313      	movs	r3, #19
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	781a      	ldrb	r2, [r3, #0]
    3a3a:	4b0f      	ldr	r3, [pc, #60]	; (3a78 <spi_init+0x19c>)
    3a3c:	0092      	lsls	r2, r2, #2
    3a3e:	68f9      	ldr	r1, [r7, #12]
    3a40:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    3a42:	687a      	ldr	r2, [r7, #4]
    3a44:	68fb      	ldr	r3, [r7, #12]
    3a46:	0011      	movs	r1, r2
    3a48:	0018      	movs	r0, r3
    3a4a:	4b0c      	ldr	r3, [pc, #48]	; (3a7c <spi_init+0x1a0>)
    3a4c:	4798      	blx	r3
    3a4e:	0003      	movs	r3, r0
}
    3a50:	0018      	movs	r0, r3
    3a52:	46bd      	mov	sp, r7
    3a54:	b00b      	add	sp, #44	; 0x2c
    3a56:	bd90      	pop	{r4, r7, pc}
    3a58:	000032c9 	.word	0x000032c9
    3a5c:	000034ad 	.word	0x000034ad
    3a60:	00003495 	.word	0x00003495
    3a64:	00004b35 	.word	0x00004b35
    3a68:	00004b79 	.word	0x00004b79
    3a6c:	00003081 	.word	0x00003081
    3a70:	000040b9 	.word	0x000040b9
    3a74:	0000332d 	.word	0x0000332d
    3a78:	20000074 	.word	0x20000074
    3a7c:	0000368d 	.word	0x0000368d

00003a80 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    3a80:	b590      	push	{r4, r7, lr}
    3a82:	b089      	sub	sp, #36	; 0x24
    3a84:	af00      	add	r7, sp, #0
    3a86:	60f8      	str	r0, [r7, #12]
    3a88:	60b9      	str	r1, [r7, #8]
    3a8a:	0019      	movs	r1, r3
    3a8c:	1dbb      	adds	r3, r7, #6
    3a8e:	801a      	strh	r2, [r3, #0]
    3a90:	1d3b      	adds	r3, r7, #4
    3a92:	1c0a      	adds	r2, r1, #0
    3a94:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	2238      	movs	r2, #56	; 0x38
    3a9a:	5c9b      	ldrb	r3, [r3, r2]
    3a9c:	b2db      	uxtb	r3, r3
    3a9e:	2b05      	cmp	r3, #5
    3aa0:	d101      	bne.n	3aa6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3aa2:	2305      	movs	r3, #5
    3aa4:	e0b8      	b.n	3c18 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    3aa6:	1dbb      	adds	r3, r7, #6
    3aa8:	881b      	ldrh	r3, [r3, #0]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d101      	bne.n	3ab2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    3aae:	2317      	movs	r3, #23
    3ab0:	e0b2      	b.n	3c18 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    3ab2:	68fb      	ldr	r3, [r7, #12]
    3ab4:	79db      	ldrb	r3, [r3, #7]
    3ab6:	2201      	movs	r2, #1
    3ab8:	4053      	eors	r3, r2
    3aba:	b2db      	uxtb	r3, r3
    3abc:	2b00      	cmp	r3, #0
    3abe:	d001      	beq.n	3ac4 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    3ac0:	231c      	movs	r3, #28
    3ac2:	e0a9      	b.n	3c18 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	795b      	ldrb	r3, [r3, #5]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d109      	bne.n	3ae0 <spi_read_buffer_wait+0x60>
    3acc:	68fb      	ldr	r3, [r7, #12]
    3ace:	0018      	movs	r0, r3
    3ad0:	4b53      	ldr	r3, [pc, #332]	; (3c20 <spi_read_buffer_wait+0x1a0>)
    3ad2:	4798      	blx	r3
    3ad4:	1e03      	subs	r3, r0, #0
    3ad6:	d003      	beq.n	3ae0 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    3ad8:	68fb      	ldr	r3, [r7, #12]
    3ada:	0018      	movs	r0, r3
    3adc:	4b51      	ldr	r3, [pc, #324]	; (3c24 <spi_read_buffer_wait+0x1a4>)
    3ade:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    3ae0:	231e      	movs	r3, #30
    3ae2:	18fb      	adds	r3, r7, r3
    3ae4:	2200      	movs	r2, #0
    3ae6:	801a      	strh	r2, [r3, #0]

	while (length--) {
    3ae8:	e08d      	b.n	3c06 <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    3aea:	68fb      	ldr	r3, [r7, #12]
    3aec:	795b      	ldrb	r3, [r3, #5]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d112      	bne.n	3b18 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    3af2:	46c0      	nop			; (mov r8, r8)
    3af4:	68fb      	ldr	r3, [r7, #12]
    3af6:	0018      	movs	r0, r3
    3af8:	4b4b      	ldr	r3, [pc, #300]	; (3c28 <spi_read_buffer_wait+0x1a8>)
    3afa:	4798      	blx	r3
    3afc:	0003      	movs	r3, r0
    3afe:	001a      	movs	r2, r3
    3b00:	2301      	movs	r3, #1
    3b02:	4053      	eors	r3, r2
    3b04:	b2db      	uxtb	r3, r3
    3b06:	2b00      	cmp	r3, #0
    3b08:	d1f4      	bne.n	3af4 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    3b0a:	1d3b      	adds	r3, r7, #4
    3b0c:	881a      	ldrh	r2, [r3, #0]
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	0011      	movs	r1, r2
    3b12:	0018      	movs	r0, r3
    3b14:	4b45      	ldr	r3, [pc, #276]	; (3c2c <spi_read_buffer_wait+0x1ac>)
    3b16:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    3b18:	68fb      	ldr	r3, [r7, #12]
    3b1a:	795b      	ldrb	r3, [r3, #5]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d12a      	bne.n	3b76 <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3b20:	2300      	movs	r3, #0
    3b22:	61bb      	str	r3, [r7, #24]
    3b24:	e008      	b.n	3b38 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	0018      	movs	r0, r3
    3b2a:	4b41      	ldr	r3, [pc, #260]	; (3c30 <spi_read_buffer_wait+0x1b0>)
    3b2c:	4798      	blx	r3
    3b2e:	1e03      	subs	r3, r0, #0
    3b30:	d107      	bne.n	3b42 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3b32:	69bb      	ldr	r3, [r7, #24]
    3b34:	3301      	adds	r3, #1
    3b36:	61bb      	str	r3, [r7, #24]
    3b38:	69bb      	ldr	r3, [r7, #24]
    3b3a:	4a3e      	ldr	r2, [pc, #248]	; (3c34 <spi_read_buffer_wait+0x1b4>)
    3b3c:	4293      	cmp	r3, r2
    3b3e:	d9f2      	bls.n	3b26 <spi_read_buffer_wait+0xa6>
    3b40:	e000      	b.n	3b44 <spi_read_buffer_wait+0xc4>
					break;
    3b42:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    3b44:	68fb      	ldr	r3, [r7, #12]
    3b46:	0018      	movs	r0, r3
    3b48:	4b35      	ldr	r3, [pc, #212]	; (3c20 <spi_read_buffer_wait+0x1a0>)
    3b4a:	4798      	blx	r3
    3b4c:	1e03      	subs	r3, r0, #0
    3b4e:	d005      	beq.n	3b5c <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    3b50:	68fb      	ldr	r3, [r7, #12]
    3b52:	0018      	movs	r0, r3
    3b54:	4b33      	ldr	r3, [pc, #204]	; (3c24 <spi_read_buffer_wait+0x1a4>)
    3b56:	4798      	blx	r3
				return STATUS_ABORTED;
    3b58:	2304      	movs	r3, #4
    3b5a:	e05d      	b.n	3c18 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    3b5c:	68fb      	ldr	r3, [r7, #12]
    3b5e:	0018      	movs	r0, r3
    3b60:	4b33      	ldr	r3, [pc, #204]	; (3c30 <spi_read_buffer_wait+0x1b0>)
    3b62:	4798      	blx	r3
    3b64:	0003      	movs	r3, r0
    3b66:	001a      	movs	r2, r3
    3b68:	2301      	movs	r3, #1
    3b6a:	4053      	eors	r3, r2
    3b6c:	b2db      	uxtb	r3, r3
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d001      	beq.n	3b76 <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3b72:	2312      	movs	r3, #18
    3b74:	e050      	b.n	3c18 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	68fb      	ldr	r3, [r7, #12]
    3b7a:	0018      	movs	r0, r3
    3b7c:	4b2c      	ldr	r3, [pc, #176]	; (3c30 <spi_read_buffer_wait+0x1b0>)
    3b7e:	4798      	blx	r3
    3b80:	0003      	movs	r3, r0
    3b82:	001a      	movs	r2, r3
    3b84:	2301      	movs	r3, #1
    3b86:	4053      	eors	r3, r2
    3b88:	b2db      	uxtb	r3, r3
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d1f4      	bne.n	3b78 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    3b8e:	2314      	movs	r3, #20
    3b90:	18fb      	adds	r3, r7, r3
    3b92:	2200      	movs	r2, #0
    3b94:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    3b96:	2317      	movs	r3, #23
    3b98:	18fc      	adds	r4, r7, r3
    3b9a:	2314      	movs	r3, #20
    3b9c:	18fa      	adds	r2, r7, r3
    3b9e:	68fb      	ldr	r3, [r7, #12]
    3ba0:	0011      	movs	r1, r2
    3ba2:	0018      	movs	r0, r3
    3ba4:	4b24      	ldr	r3, [pc, #144]	; (3c38 <spi_read_buffer_wait+0x1b8>)
    3ba6:	4798      	blx	r3
    3ba8:	0003      	movs	r3, r0
    3baa:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    3bac:	2317      	movs	r3, #23
    3bae:	18fb      	adds	r3, r7, r3
    3bb0:	781b      	ldrb	r3, [r3, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d003      	beq.n	3bbe <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    3bb6:	2317      	movs	r3, #23
    3bb8:	18fb      	adds	r3, r7, r3
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	e02c      	b.n	3c18 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3bbe:	231e      	movs	r3, #30
    3bc0:	18fb      	adds	r3, r7, r3
    3bc2:	881b      	ldrh	r3, [r3, #0]
    3bc4:	221e      	movs	r2, #30
    3bc6:	18ba      	adds	r2, r7, r2
    3bc8:	1c59      	adds	r1, r3, #1
    3bca:	8011      	strh	r1, [r2, #0]
    3bcc:	001a      	movs	r2, r3
    3bce:	68bb      	ldr	r3, [r7, #8]
    3bd0:	189b      	adds	r3, r3, r2
    3bd2:	2214      	movs	r2, #20
    3bd4:	18ba      	adds	r2, r7, r2
    3bd6:	8812      	ldrh	r2, [r2, #0]
    3bd8:	b2d2      	uxtb	r2, r2
    3bda:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	799b      	ldrb	r3, [r3, #6]
    3be0:	2b01      	cmp	r3, #1
    3be2:	d110      	bne.n	3c06 <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    3be4:	231e      	movs	r3, #30
    3be6:	18fb      	adds	r3, r7, r3
    3be8:	881b      	ldrh	r3, [r3, #0]
    3bea:	221e      	movs	r2, #30
    3bec:	18ba      	adds	r2, r7, r2
    3bee:	1c59      	adds	r1, r3, #1
    3bf0:	8011      	strh	r1, [r2, #0]
    3bf2:	001a      	movs	r2, r3
    3bf4:	68bb      	ldr	r3, [r7, #8]
    3bf6:	189b      	adds	r3, r3, r2
    3bf8:	2214      	movs	r2, #20
    3bfa:	18ba      	adds	r2, r7, r2
    3bfc:	8812      	ldrh	r2, [r2, #0]
    3bfe:	0a12      	lsrs	r2, r2, #8
    3c00:	b292      	uxth	r2, r2
    3c02:	b2d2      	uxtb	r2, r2
    3c04:	701a      	strb	r2, [r3, #0]
	while (length--) {
    3c06:	1dbb      	adds	r3, r7, #6
    3c08:	881b      	ldrh	r3, [r3, #0]
    3c0a:	1dba      	adds	r2, r7, #6
    3c0c:	1e59      	subs	r1, r3, #1
    3c0e:	8011      	strh	r1, [r2, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d000      	beq.n	3c16 <spi_read_buffer_wait+0x196>
    3c14:	e769      	b.n	3aea <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    3c16:	2300      	movs	r3, #0
}
    3c18:	0018      	movs	r0, r3
    3c1a:	46bd      	mov	sp, r7
    3c1c:	b009      	add	sp, #36	; 0x24
    3c1e:	bd90      	pop	{r4, r7, pc}
    3c20:	00003529 	.word	0x00003529
    3c24:	00003671 	.word	0x00003671
    3c28:	00003551 	.word	0x00003551
    3c2c:	000035a1 	.word	0x000035a1
    3c30:	00003579 	.word	0x00003579
    3c34:	00002710 	.word	0x00002710
    3c38:	000035e9 	.word	0x000035e9

00003c3c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b08a      	sub	sp, #40	; 0x28
    3c40:	af00      	add	r7, sp, #0
    3c42:	60f8      	str	r0, [r7, #12]
    3c44:	60b9      	str	r1, [r7, #8]
    3c46:	1dbb      	adds	r3, r7, #6
    3c48:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3c4a:	68fb      	ldr	r3, [r7, #12]
    3c4c:	2238      	movs	r2, #56	; 0x38
    3c4e:	5c9b      	ldrb	r3, [r3, r2]
    3c50:	b2db      	uxtb	r3, r3
    3c52:	2b05      	cmp	r3, #5
    3c54:	d101      	bne.n	3c5a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3c56:	2305      	movs	r3, #5
    3c58:	e170      	b.n	3f3c <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    3c5a:	1dbb      	adds	r3, r7, #6
    3c5c:	881b      	ldrh	r3, [r3, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d101      	bne.n	3c66 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    3c62:	2317      	movs	r3, #23
    3c64:	e16a      	b.n	3f3c <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3c66:	68fb      	ldr	r3, [r7, #12]
    3c68:	795b      	ldrb	r3, [r3, #5]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d109      	bne.n	3c82 <spi_write_buffer_wait+0x46>
    3c6e:	68fb      	ldr	r3, [r7, #12]
    3c70:	0018      	movs	r0, r3
    3c72:	4bb4      	ldr	r3, [pc, #720]	; (3f44 <spi_write_buffer_wait+0x308>)
    3c74:	4798      	blx	r3
    3c76:	1e03      	subs	r3, r0, #0
    3c78:	d003      	beq.n	3c82 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    3c7a:	68fb      	ldr	r3, [r7, #12]
    3c7c:	0018      	movs	r0, r3
    3c7e:	4bb2      	ldr	r3, [pc, #712]	; (3f48 <spi_write_buffer_wait+0x30c>)
    3c80:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    3c82:	2326      	movs	r3, #38	; 0x26
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	2200      	movs	r2, #0
    3c88:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    3c8a:	2324      	movs	r3, #36	; 0x24
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	1dba      	adds	r2, r7, #6
    3c90:	8812      	ldrh	r2, [r2, #0]
    3c92:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    3c94:	e0fe      	b.n	3e94 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    3c96:	68fb      	ldr	r3, [r7, #12]
    3c98:	795b      	ldrb	r3, [r3, #5]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d12a      	bne.n	3cf4 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3c9e:	2300      	movs	r3, #0
    3ca0:	623b      	str	r3, [r7, #32]
    3ca2:	e008      	b.n	3cb6 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    3ca4:	68fb      	ldr	r3, [r7, #12]
    3ca6:	0018      	movs	r0, r3
    3ca8:	4ba8      	ldr	r3, [pc, #672]	; (3f4c <spi_write_buffer_wait+0x310>)
    3caa:	4798      	blx	r3
    3cac:	1e03      	subs	r3, r0, #0
    3cae:	d107      	bne.n	3cc0 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3cb0:	6a3b      	ldr	r3, [r7, #32]
    3cb2:	3301      	adds	r3, #1
    3cb4:	623b      	str	r3, [r7, #32]
    3cb6:	6a3b      	ldr	r3, [r7, #32]
    3cb8:	4aa5      	ldr	r2, [pc, #660]	; (3f50 <spi_write_buffer_wait+0x314>)
    3cba:	4293      	cmp	r3, r2
    3cbc:	d9f2      	bls.n	3ca4 <spi_write_buffer_wait+0x68>
    3cbe:	e000      	b.n	3cc2 <spi_write_buffer_wait+0x86>
					break;
    3cc0:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    3cc2:	68fb      	ldr	r3, [r7, #12]
    3cc4:	0018      	movs	r0, r3
    3cc6:	4b9f      	ldr	r3, [pc, #636]	; (3f44 <spi_write_buffer_wait+0x308>)
    3cc8:	4798      	blx	r3
    3cca:	1e03      	subs	r3, r0, #0
    3ccc:	d005      	beq.n	3cda <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    3cce:	68fb      	ldr	r3, [r7, #12]
    3cd0:	0018      	movs	r0, r3
    3cd2:	4b9d      	ldr	r3, [pc, #628]	; (3f48 <spi_write_buffer_wait+0x30c>)
    3cd4:	4798      	blx	r3
				return STATUS_ABORTED;
    3cd6:	2304      	movs	r3, #4
    3cd8:	e130      	b.n	3f3c <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	0018      	movs	r0, r3
    3cde:	4b9b      	ldr	r3, [pc, #620]	; (3f4c <spi_write_buffer_wait+0x310>)
    3ce0:	4798      	blx	r3
    3ce2:	0003      	movs	r3, r0
    3ce4:	001a      	movs	r2, r3
    3ce6:	2301      	movs	r3, #1
    3ce8:	4053      	eors	r3, r2
    3cea:	b2db      	uxtb	r3, r3
    3cec:	2b00      	cmp	r3, #0
    3cee:	d001      	beq.n	3cf4 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    3cf0:	2312      	movs	r3, #18
    3cf2:	e123      	b.n	3f3c <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    3cf4:	46c0      	nop			; (mov r8, r8)
    3cf6:	68fb      	ldr	r3, [r7, #12]
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b94      	ldr	r3, [pc, #592]	; (3f4c <spi_write_buffer_wait+0x310>)
    3cfc:	4798      	blx	r3
    3cfe:	0003      	movs	r3, r0
    3d00:	001a      	movs	r2, r3
    3d02:	2301      	movs	r3, #1
    3d04:	4053      	eors	r3, r2
    3d06:	b2db      	uxtb	r3, r3
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d1f4      	bne.n	3cf6 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3d0c:	2326      	movs	r3, #38	; 0x26
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	881b      	ldrh	r3, [r3, #0]
    3d12:	2226      	movs	r2, #38	; 0x26
    3d14:	18ba      	adds	r2, r7, r2
    3d16:	1c59      	adds	r1, r3, #1
    3d18:	8011      	strh	r1, [r2, #0]
    3d1a:	001a      	movs	r2, r3
    3d1c:	68bb      	ldr	r3, [r7, #8]
    3d1e:	189b      	adds	r3, r3, r2
    3d20:	781a      	ldrb	r2, [r3, #0]
    3d22:	231e      	movs	r3, #30
    3d24:	18fb      	adds	r3, r7, r3
    3d26:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d28:	68fb      	ldr	r3, [r7, #12]
    3d2a:	799b      	ldrb	r3, [r3, #6]
    3d2c:	2b01      	cmp	r3, #1
    3d2e:	d115      	bne.n	3d5c <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3d30:	2326      	movs	r3, #38	; 0x26
    3d32:	18fb      	adds	r3, r7, r3
    3d34:	881b      	ldrh	r3, [r3, #0]
    3d36:	2226      	movs	r2, #38	; 0x26
    3d38:	18ba      	adds	r2, r7, r2
    3d3a:	1c59      	adds	r1, r3, #1
    3d3c:	8011      	strh	r1, [r2, #0]
    3d3e:	001a      	movs	r2, r3
    3d40:	68bb      	ldr	r3, [r7, #8]
    3d42:	189b      	adds	r3, r3, r2
    3d44:	781b      	ldrb	r3, [r3, #0]
    3d46:	021b      	lsls	r3, r3, #8
    3d48:	b21a      	sxth	r2, r3
    3d4a:	231e      	movs	r3, #30
    3d4c:	18fb      	adds	r3, r7, r3
    3d4e:	2100      	movs	r1, #0
    3d50:	5e5b      	ldrsh	r3, [r3, r1]
    3d52:	4313      	orrs	r3, r2
    3d54:	b21a      	sxth	r2, r3
    3d56:	231e      	movs	r3, #30
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    3d5c:	231e      	movs	r3, #30
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	881a      	ldrh	r2, [r3, #0]
    3d62:	68fb      	ldr	r3, [r7, #12]
    3d64:	0011      	movs	r1, r2
    3d66:	0018      	movs	r0, r3
    3d68:	4b7a      	ldr	r3, [pc, #488]	; (3f54 <spi_write_buffer_wait+0x318>)
    3d6a:	4798      	blx	r3

		if (module->receiver_enabled) {
    3d6c:	68fb      	ldr	r3, [r7, #12]
    3d6e:	79db      	ldrb	r3, [r3, #7]
    3d70:	2224      	movs	r2, #36	; 0x24
    3d72:	18ba      	adds	r2, r7, r2
    3d74:	2124      	movs	r1, #36	; 0x24
    3d76:	1879      	adds	r1, r7, r1
    3d78:	8809      	ldrh	r1, [r1, #0]
    3d7a:	8011      	strh	r1, [r2, #0]
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d100      	bne.n	3d82 <spi_write_buffer_wait+0x146>
    3d80:	e088      	b.n	3e94 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    3d82:	68fb      	ldr	r3, [r7, #12]
    3d84:	795b      	ldrb	r3, [r3, #5]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d000      	beq.n	3d8c <spi_write_buffer_wait+0x150>
    3d8a:	e069      	b.n	3e60 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3d8c:	2300      	movs	r3, #0
    3d8e:	61bb      	str	r3, [r7, #24]
    3d90:	e047      	b.n	3e22 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    3d92:	1dbb      	adds	r3, r7, #6
    3d94:	881b      	ldrh	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d03a      	beq.n	3e10 <spi_write_buffer_wait+0x1d4>
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	0018      	movs	r0, r3
    3d9e:	4b6b      	ldr	r3, [pc, #428]	; (3f4c <spi_write_buffer_wait+0x310>)
    3da0:	4798      	blx	r3
    3da2:	1e03      	subs	r3, r0, #0
    3da4:	d034      	beq.n	3e10 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    3da6:	2326      	movs	r3, #38	; 0x26
    3da8:	18fb      	adds	r3, r7, r3
    3daa:	881b      	ldrh	r3, [r3, #0]
    3dac:	2226      	movs	r2, #38	; 0x26
    3dae:	18ba      	adds	r2, r7, r2
    3db0:	1c59      	adds	r1, r3, #1
    3db2:	8011      	strh	r1, [r2, #0]
    3db4:	001a      	movs	r2, r3
    3db6:	68bb      	ldr	r3, [r7, #8]
    3db8:	189b      	adds	r3, r3, r2
    3dba:	781a      	ldrb	r2, [r3, #0]
    3dbc:	231e      	movs	r3, #30
    3dbe:	18fb      	adds	r3, r7, r3
    3dc0:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	799b      	ldrb	r3, [r3, #6]
    3dc6:	2b01      	cmp	r3, #1
    3dc8:	d115      	bne.n	3df6 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    3dca:	2326      	movs	r3, #38	; 0x26
    3dcc:	18fb      	adds	r3, r7, r3
    3dce:	881b      	ldrh	r3, [r3, #0]
    3dd0:	2226      	movs	r2, #38	; 0x26
    3dd2:	18ba      	adds	r2, r7, r2
    3dd4:	1c59      	adds	r1, r3, #1
    3dd6:	8011      	strh	r1, [r2, #0]
    3dd8:	001a      	movs	r2, r3
    3dda:	68bb      	ldr	r3, [r7, #8]
    3ddc:	189b      	adds	r3, r3, r2
    3dde:	781b      	ldrb	r3, [r3, #0]
    3de0:	021b      	lsls	r3, r3, #8
    3de2:	b21a      	sxth	r2, r3
    3de4:	231e      	movs	r3, #30
    3de6:	18fb      	adds	r3, r7, r3
    3de8:	2100      	movs	r1, #0
    3dea:	5e5b      	ldrsh	r3, [r3, r1]
    3dec:	4313      	orrs	r3, r2
    3dee:	b21a      	sxth	r2, r3
    3df0:	231e      	movs	r3, #30
    3df2:	18fb      	adds	r3, r7, r3
    3df4:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    3df6:	231e      	movs	r3, #30
    3df8:	18fb      	adds	r3, r7, r3
    3dfa:	881a      	ldrh	r2, [r3, #0]
    3dfc:	68fb      	ldr	r3, [r7, #12]
    3dfe:	0011      	movs	r1, r2
    3e00:	0018      	movs	r0, r3
    3e02:	4b54      	ldr	r3, [pc, #336]	; (3f54 <spi_write_buffer_wait+0x318>)
    3e04:	4798      	blx	r3
						length--;
    3e06:	1dbb      	adds	r3, r7, #6
    3e08:	881a      	ldrh	r2, [r3, #0]
    3e0a:	1dbb      	adds	r3, r7, #6
    3e0c:	3a01      	subs	r2, #1
    3e0e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    3e10:	68fb      	ldr	r3, [r7, #12]
    3e12:	0018      	movs	r0, r3
    3e14:	4b50      	ldr	r3, [pc, #320]	; (3f58 <spi_write_buffer_wait+0x31c>)
    3e16:	4798      	blx	r3
    3e18:	1e03      	subs	r3, r0, #0
    3e1a:	d107      	bne.n	3e2c <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3e1c:	69bb      	ldr	r3, [r7, #24]
    3e1e:	3301      	adds	r3, #1
    3e20:	61bb      	str	r3, [r7, #24]
    3e22:	69bb      	ldr	r3, [r7, #24]
    3e24:	4a4a      	ldr	r2, [pc, #296]	; (3f50 <spi_write_buffer_wait+0x314>)
    3e26:	4293      	cmp	r3, r2
    3e28:	d9b3      	bls.n	3d92 <spi_write_buffer_wait+0x156>
    3e2a:	e000      	b.n	3e2e <spi_write_buffer_wait+0x1f2>
						break;
    3e2c:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    3e2e:	68fb      	ldr	r3, [r7, #12]
    3e30:	0018      	movs	r0, r3
    3e32:	4b44      	ldr	r3, [pc, #272]	; (3f44 <spi_write_buffer_wait+0x308>)
    3e34:	4798      	blx	r3
    3e36:	1e03      	subs	r3, r0, #0
    3e38:	d005      	beq.n	3e46 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    3e3a:	68fb      	ldr	r3, [r7, #12]
    3e3c:	0018      	movs	r0, r3
    3e3e:	4b42      	ldr	r3, [pc, #264]	; (3f48 <spi_write_buffer_wait+0x30c>)
    3e40:	4798      	blx	r3
					return STATUS_ABORTED;
    3e42:	2304      	movs	r3, #4
    3e44:	e07a      	b.n	3f3c <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	0018      	movs	r0, r3
    3e4a:	4b43      	ldr	r3, [pc, #268]	; (3f58 <spi_write_buffer_wait+0x31c>)
    3e4c:	4798      	blx	r3
    3e4e:	0003      	movs	r3, r0
    3e50:	001a      	movs	r2, r3
    3e52:	2301      	movs	r3, #1
    3e54:	4053      	eors	r3, r2
    3e56:	b2db      	uxtb	r3, r3
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d001      	beq.n	3e60 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    3e5c:	2312      	movs	r3, #18
    3e5e:	e06d      	b.n	3f3c <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    3e60:	46c0      	nop			; (mov r8, r8)
    3e62:	68fb      	ldr	r3, [r7, #12]
    3e64:	0018      	movs	r0, r3
    3e66:	4b3c      	ldr	r3, [pc, #240]	; (3f58 <spi_write_buffer_wait+0x31c>)
    3e68:	4798      	blx	r3
    3e6a:	0003      	movs	r3, r0
    3e6c:	001a      	movs	r2, r3
    3e6e:	2301      	movs	r3, #1
    3e70:	4053      	eors	r3, r2
    3e72:	b2db      	uxtb	r3, r3
    3e74:	2b00      	cmp	r3, #0
    3e76:	d1f4      	bne.n	3e62 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    3e78:	2312      	movs	r3, #18
    3e7a:	18fa      	adds	r2, r7, r3
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	0011      	movs	r1, r2
    3e80:	0018      	movs	r0, r3
    3e82:	4b36      	ldr	r3, [pc, #216]	; (3f5c <spi_write_buffer_wait+0x320>)
    3e84:	4798      	blx	r3
			flush_length--;
    3e86:	2324      	movs	r3, #36	; 0x24
    3e88:	18fb      	adds	r3, r7, r3
    3e8a:	881a      	ldrh	r2, [r3, #0]
    3e8c:	2324      	movs	r3, #36	; 0x24
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	3a01      	subs	r2, #1
    3e92:	801a      	strh	r2, [r3, #0]
	while (length--) {
    3e94:	1dbb      	adds	r3, r7, #6
    3e96:	881b      	ldrh	r3, [r3, #0]
    3e98:	1dba      	adds	r2, r7, #6
    3e9a:	1e59      	subs	r1, r3, #1
    3e9c:	8011      	strh	r1, [r2, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d000      	beq.n	3ea4 <spi_write_buffer_wait+0x268>
    3ea2:	e6f8      	b.n	3c96 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    3ea4:	68fb      	ldr	r3, [r7, #12]
    3ea6:	795b      	ldrb	r3, [r3, #5]
    3ea8:	2b01      	cmp	r3, #1
    3eaa:	d10b      	bne.n	3ec4 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    3eac:	46c0      	nop			; (mov r8, r8)
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	0018      	movs	r0, r3
    3eb2:	4b24      	ldr	r3, [pc, #144]	; (3f44 <spi_write_buffer_wait+0x308>)
    3eb4:	4798      	blx	r3
    3eb6:	0003      	movs	r3, r0
    3eb8:	001a      	movs	r2, r3
    3eba:	2301      	movs	r3, #1
    3ebc:	4053      	eors	r3, r2
    3ebe:	b2db      	uxtb	r3, r3
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d1f4      	bne.n	3eae <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    3ec4:	68fb      	ldr	r3, [r7, #12]
    3ec6:	795b      	ldrb	r3, [r3, #5]
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d136      	bne.n	3f3a <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    3ecc:	68fb      	ldr	r3, [r7, #12]
    3ece:	79db      	ldrb	r3, [r3, #7]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d032      	beq.n	3f3a <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    3ed4:	e02c      	b.n	3f30 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3ed6:	2300      	movs	r3, #0
    3ed8:	617b      	str	r3, [r7, #20]
    3eda:	e008      	b.n	3eee <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    3edc:	68fb      	ldr	r3, [r7, #12]
    3ede:	0018      	movs	r0, r3
    3ee0:	4b1d      	ldr	r3, [pc, #116]	; (3f58 <spi_write_buffer_wait+0x31c>)
    3ee2:	4798      	blx	r3
    3ee4:	1e03      	subs	r3, r0, #0
    3ee6:	d107      	bne.n	3ef8 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3ee8:	697b      	ldr	r3, [r7, #20]
    3eea:	3301      	adds	r3, #1
    3eec:	617b      	str	r3, [r7, #20]
    3eee:	697b      	ldr	r3, [r7, #20]
    3ef0:	4a17      	ldr	r2, [pc, #92]	; (3f50 <spi_write_buffer_wait+0x314>)
    3ef2:	4293      	cmp	r3, r2
    3ef4:	d9f2      	bls.n	3edc <spi_write_buffer_wait+0x2a0>
    3ef6:	e000      	b.n	3efa <spi_write_buffer_wait+0x2be>
						break;
    3ef8:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    3efa:	68fb      	ldr	r3, [r7, #12]
    3efc:	0018      	movs	r0, r3
    3efe:	4b16      	ldr	r3, [pc, #88]	; (3f58 <spi_write_buffer_wait+0x31c>)
    3f00:	4798      	blx	r3
    3f02:	0003      	movs	r3, r0
    3f04:	001a      	movs	r2, r3
    3f06:	2301      	movs	r3, #1
    3f08:	4053      	eors	r3, r2
    3f0a:	b2db      	uxtb	r3, r3
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d001      	beq.n	3f14 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    3f10:	2312      	movs	r3, #18
    3f12:	e013      	b.n	3f3c <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    3f14:	2310      	movs	r3, #16
    3f16:	18fa      	adds	r2, r7, r3
    3f18:	68fb      	ldr	r3, [r7, #12]
    3f1a:	0011      	movs	r1, r2
    3f1c:	0018      	movs	r0, r3
    3f1e:	4b0f      	ldr	r3, [pc, #60]	; (3f5c <spi_write_buffer_wait+0x320>)
    3f20:	4798      	blx	r3
				flush_length--;
    3f22:	2324      	movs	r3, #36	; 0x24
    3f24:	18fb      	adds	r3, r7, r3
    3f26:	881a      	ldrh	r2, [r3, #0]
    3f28:	2324      	movs	r3, #36	; 0x24
    3f2a:	18fb      	adds	r3, r7, r3
    3f2c:	3a01      	subs	r2, #1
    3f2e:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    3f30:	2324      	movs	r3, #36	; 0x24
    3f32:	18fb      	adds	r3, r7, r3
    3f34:	881b      	ldrh	r3, [r3, #0]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d1cd      	bne.n	3ed6 <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    3f3a:	2300      	movs	r3, #0
}
    3f3c:	0018      	movs	r0, r3
    3f3e:	46bd      	mov	sp, r7
    3f40:	b00a      	add	sp, #40	; 0x28
    3f42:	bd80      	pop	{r7, pc}
    3f44:	00003529 	.word	0x00003529
    3f48:	00003671 	.word	0x00003671
    3f4c:	00003551 	.word	0x00003551
    3f50:	00002710 	.word	0x00002710
    3f54:	000035a1 	.word	0x000035a1
    3f58:	00003579 	.word	0x00003579
    3f5c:	000035e9 	.word	0x000035e9

00003f60 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	b084      	sub	sp, #16
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f72:	781b      	ldrb	r3, [r3, #0]
    3f74:	b2da      	uxtb	r2, r3
    3f76:	230e      	movs	r3, #14
    3f78:	18fb      	adds	r3, r7, r3
    3f7a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f80:	1c5a      	adds	r2, r3, #1
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	799b      	ldrb	r3, [r3, #6]
    3f8a:	2b01      	cmp	r3, #1
    3f8c:	d113      	bne.n	3fb6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f92:	781b      	ldrb	r3, [r3, #0]
    3f94:	b2db      	uxtb	r3, r3
    3f96:	021b      	lsls	r3, r3, #8
    3f98:	b21a      	sxth	r2, r3
    3f9a:	230e      	movs	r3, #14
    3f9c:	18fb      	adds	r3, r7, r3
    3f9e:	2100      	movs	r1, #0
    3fa0:	5e5b      	ldrsh	r3, [r3, r1]
    3fa2:	4313      	orrs	r3, r2
    3fa4:	b21a      	sxth	r2, r3
    3fa6:	230e      	movs	r3, #14
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fb0:	1c5a      	adds	r2, r3, #1
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3fb6:	230e      	movs	r3, #14
    3fb8:	18fb      	adds	r3, r7, r3
    3fba:	881b      	ldrh	r3, [r3, #0]
    3fbc:	05db      	lsls	r3, r3, #23
    3fbe:	0dda      	lsrs	r2, r3, #23
    3fc0:	68bb      	ldr	r3, [r7, #8]
    3fc2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    3fc8:	b29b      	uxth	r3, r3
    3fca:	3b01      	subs	r3, #1
    3fcc:	b29a      	uxth	r2, r3
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	869a      	strh	r2, [r3, #52]	; 0x34
}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b004      	add	sp, #16
    3fd8:	bd80      	pop	{r7, pc}
	...

00003fdc <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b084      	sub	sp, #16
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    3fea:	4b08      	ldr	r3, [pc, #32]	; (400c <_spi_write_dummy+0x30>)
    3fec:	881b      	ldrh	r3, [r3, #0]
    3fee:	001a      	movs	r2, r3
    3ff0:	68fb      	ldr	r3, [r7, #12]
    3ff2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    3ff8:	b29b      	uxth	r3, r3
    3ffa:	3b01      	subs	r3, #1
    3ffc:	b29a      	uxth	r2, r3
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	46bd      	mov	sp, r7
    4006:	b004      	add	sp, #16
    4008:	bd80      	pop	{r7, pc}
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	2000008c 	.word	0x2000008c

00004010 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    401e:	230a      	movs	r3, #10
    4020:	18fb      	adds	r3, r7, r3
    4022:	2200      	movs	r2, #0
    4024:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4026:	68fb      	ldr	r3, [r7, #12]
    4028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    402a:	230a      	movs	r3, #10
    402c:	18fb      	adds	r3, r7, r3
    402e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4030:	687b      	ldr	r3, [r7, #4]
    4032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4034:	b29b      	uxth	r3, r3
    4036:	3b01      	subs	r3, #1
    4038:	b29a      	uxth	r2, r3
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	46bd      	mov	sp, r7
    4042:	b004      	add	sp, #16
    4044:	bd80      	pop	{r7, pc}

00004046 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4046:	b580      	push	{r7, lr}
    4048:	b084      	sub	sp, #16
    404a:	af00      	add	r7, sp, #0
    404c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4058:	b29a      	uxth	r2, r3
    405a:	230a      	movs	r3, #10
    405c:	18fb      	adds	r3, r7, r3
    405e:	05d2      	lsls	r2, r2, #23
    4060:	0dd2      	lsrs	r2, r2, #23
    4062:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4068:	220a      	movs	r2, #10
    406a:	18ba      	adds	r2, r7, r2
    406c:	8812      	ldrh	r2, [r2, #0]
    406e:	b2d2      	uxtb	r2, r2
    4070:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4076:	1c5a      	adds	r2, r3, #1
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    407c:	687b      	ldr	r3, [r7, #4]
    407e:	799b      	ldrb	r3, [r3, #6]
    4080:	2b01      	cmp	r3, #1
    4082:	d10d      	bne.n	40a0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4088:	220a      	movs	r2, #10
    408a:	18ba      	adds	r2, r7, r2
    408c:	8812      	ldrh	r2, [r2, #0]
    408e:	0a12      	lsrs	r2, r2, #8
    4090:	b292      	uxth	r2, r2
    4092:	b2d2      	uxtb	r2, r2
    4094:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    409a:	1c5a      	adds	r2, r3, #1
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    40a4:	b29b      	uxth	r3, r3
    40a6:	3b01      	subs	r3, #1
    40a8:	b29a      	uxth	r2, r3
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	861a      	strh	r2, [r3, #48]	; 0x30
}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	46bd      	mov	sp, r7
    40b2:	b004      	add	sp, #16
    40b4:	bd80      	pop	{r7, pc}
	...

000040b8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    40b8:	b580      	push	{r7, lr}
    40ba:	b086      	sub	sp, #24
    40bc:	af00      	add	r7, sp, #0
    40be:	0002      	movs	r2, r0
    40c0:	1dfb      	adds	r3, r7, #7
    40c2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    40c4:	1dfb      	adds	r3, r7, #7
    40c6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    40c8:	4bb9      	ldr	r3, [pc, #740]	; (43b0 <_spi_interrupt_handler+0x2f8>)
    40ca:	0092      	lsls	r2, r2, #2
    40cc:	58d3      	ldr	r3, [r2, r3]
    40ce:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	681b      	ldr	r3, [r3, #0]
    40d4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    40d6:	697b      	ldr	r3, [r7, #20]
    40d8:	2237      	movs	r2, #55	; 0x37
    40da:	5c9a      	ldrb	r2, [r3, r2]
    40dc:	697b      	ldr	r3, [r7, #20]
    40de:	2136      	movs	r1, #54	; 0x36
    40e0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    40e2:	230f      	movs	r3, #15
    40e4:	18fb      	adds	r3, r7, r3
    40e6:	400a      	ands	r2, r1
    40e8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	7e1b      	ldrb	r3, [r3, #24]
    40ee:	b2da      	uxtb	r2, r3
    40f0:	230c      	movs	r3, #12
    40f2:	18fb      	adds	r3, r7, r3
    40f4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    40f6:	693b      	ldr	r3, [r7, #16]
    40f8:	7d9b      	ldrb	r3, [r3, #22]
    40fa:	b2db      	uxtb	r3, r3
    40fc:	b29a      	uxth	r2, r3
    40fe:	230c      	movs	r3, #12
    4100:	18fb      	adds	r3, r7, r3
    4102:	210c      	movs	r1, #12
    4104:	1879      	adds	r1, r7, r1
    4106:	8809      	ldrh	r1, [r1, #0]
    4108:	400a      	ands	r2, r1
    410a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    410c:	230c      	movs	r3, #12
    410e:	18fb      	adds	r3, r7, r3
    4110:	881b      	ldrh	r3, [r3, #0]
    4112:	2201      	movs	r2, #1
    4114:	4013      	ands	r3, r2
    4116:	d041      	beq.n	419c <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	795b      	ldrb	r3, [r3, #5]
    411c:	2b01      	cmp	r3, #1
    411e:	d110      	bne.n	4142 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4120:	697b      	ldr	r3, [r7, #20]
    4122:	7a5b      	ldrb	r3, [r3, #9]
    4124:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4126:	2b00      	cmp	r3, #0
    4128:	d10b      	bne.n	4142 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    412a:	697b      	ldr	r3, [r7, #20]
    412c:	0018      	movs	r0, r3
    412e:	4ba1      	ldr	r3, [pc, #644]	; (43b4 <_spi_interrupt_handler+0x2fc>)
    4130:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4132:	697b      	ldr	r3, [r7, #20]
    4134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4136:	b29b      	uxth	r3, r3
    4138:	2b00      	cmp	r3, #0
    413a:	d102      	bne.n	4142 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    413c:	693b      	ldr	r3, [r7, #16]
    413e:	2201      	movs	r2, #1
    4140:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4142:	697b      	ldr	r3, [r7, #20]
    4144:	795b      	ldrb	r3, [r3, #5]
		if (0
    4146:	2b01      	cmp	r3, #1
    4148:	d104      	bne.n	4154 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	7a5b      	ldrb	r3, [r3, #9]
    414e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4150:	2b00      	cmp	r3, #0
    4152:	d108      	bne.n	4166 <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	795b      	ldrb	r3, [r3, #5]
    4158:	2b00      	cmp	r3, #0
    415a:	d11f      	bne.n	419c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    415c:	697b      	ldr	r3, [r7, #20]
    415e:	7a5b      	ldrb	r3, [r3, #9]
    4160:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4162:	2b00      	cmp	r3, #0
    4164:	d01a      	beq.n	419c <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4166:	697b      	ldr	r3, [r7, #20]
    4168:	0018      	movs	r0, r3
    416a:	4b93      	ldr	r3, [pc, #588]	; (43b8 <_spi_interrupt_handler+0x300>)
    416c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    416e:	697b      	ldr	r3, [r7, #20]
    4170:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4172:	b29b      	uxth	r3, r3
    4174:	2b00      	cmp	r3, #0
    4176:	d111      	bne.n	419c <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4178:	693b      	ldr	r3, [r7, #16]
    417a:	2201      	movs	r2, #1
    417c:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    417e:	697b      	ldr	r3, [r7, #20]
    4180:	7a5b      	ldrb	r3, [r3, #9]
    4182:	b2db      	uxtb	r3, r3
    4184:	2b01      	cmp	r3, #1
    4186:	d109      	bne.n	419c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    4188:	697b      	ldr	r3, [r7, #20]
    418a:	79db      	ldrb	r3, [r3, #7]
    418c:	2201      	movs	r2, #1
    418e:	4053      	eors	r3, r2
    4190:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4192:	2b00      	cmp	r3, #0
    4194:	d002      	beq.n	419c <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4196:	693b      	ldr	r3, [r7, #16]
    4198:	2202      	movs	r2, #2
    419a:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    419c:	230c      	movs	r3, #12
    419e:	18fb      	adds	r3, r7, r3
    41a0:	881b      	ldrh	r3, [r3, #0]
    41a2:	2204      	movs	r2, #4
    41a4:	4013      	ands	r3, r2
    41a6:	d100      	bne.n	41aa <_spi_interrupt_handler+0xf2>
    41a8:	e07e      	b.n	42a8 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    41aa:	693b      	ldr	r3, [r7, #16]
    41ac:	8b5b      	ldrh	r3, [r3, #26]
    41ae:	b29b      	uxth	r3, r3
    41b0:	001a      	movs	r2, r3
    41b2:	2304      	movs	r3, #4
    41b4:	4013      	ands	r3, r2
    41b6:	d022      	beq.n	41fe <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	7a5b      	ldrb	r3, [r3, #9]
    41bc:	b2db      	uxtb	r3, r3
    41be:	2b01      	cmp	r3, #1
    41c0:	d014      	beq.n	41ec <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    41c2:	697b      	ldr	r3, [r7, #20]
    41c4:	2238      	movs	r2, #56	; 0x38
    41c6:	211e      	movs	r1, #30
    41c8:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    41ca:	697b      	ldr	r3, [r7, #20]
    41cc:	2203      	movs	r2, #3
    41ce:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    41d0:	693b      	ldr	r3, [r7, #16]
    41d2:	2205      	movs	r2, #5
    41d4:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    41d6:	230f      	movs	r3, #15
    41d8:	18fb      	adds	r3, r7, r3
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	2208      	movs	r2, #8
    41de:	4013      	ands	r3, r2
    41e0:	d004      	beq.n	41ec <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    41e2:	697b      	ldr	r3, [r7, #20]
    41e4:	699b      	ldr	r3, [r3, #24]
    41e6:	697a      	ldr	r2, [r7, #20]
    41e8:	0010      	movs	r0, r2
    41ea:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    41ec:	693b      	ldr	r3, [r7, #16]
    41ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41f0:	230a      	movs	r3, #10
    41f2:	18fb      	adds	r3, r7, r3
    41f4:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    41f6:	693b      	ldr	r3, [r7, #16]
    41f8:	2204      	movs	r2, #4
    41fa:	835a      	strh	r2, [r3, #26]
    41fc:	e054      	b.n	42a8 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    41fe:	697b      	ldr	r3, [r7, #20]
    4200:	7a5b      	ldrb	r3, [r3, #9]
    4202:	b2db      	uxtb	r3, r3
    4204:	2b01      	cmp	r3, #1
    4206:	d11e      	bne.n	4246 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4208:	697b      	ldr	r3, [r7, #20]
    420a:	0018      	movs	r0, r3
    420c:	4b6b      	ldr	r3, [pc, #428]	; (43bc <_spi_interrupt_handler+0x304>)
    420e:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4210:	697b      	ldr	r3, [r7, #20]
    4212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4214:	b29b      	uxth	r3, r3
    4216:	2b00      	cmp	r3, #0
    4218:	d146      	bne.n	42a8 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    421a:	693b      	ldr	r3, [r7, #16]
    421c:	2204      	movs	r2, #4
    421e:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4220:	697b      	ldr	r3, [r7, #20]
    4222:	2238      	movs	r2, #56	; 0x38
    4224:	2100      	movs	r1, #0
    4226:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4228:	697b      	ldr	r3, [r7, #20]
    422a:	2203      	movs	r2, #3
    422c:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    422e:	230f      	movs	r3, #15
    4230:	18fb      	adds	r3, r7, r3
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2201      	movs	r2, #1
    4236:	4013      	ands	r3, r2
    4238:	d036      	beq.n	42a8 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    423a:	697b      	ldr	r3, [r7, #20]
    423c:	68db      	ldr	r3, [r3, #12]
    423e:	697a      	ldr	r2, [r7, #20]
    4240:	0010      	movs	r0, r2
    4242:	4798      	blx	r3
    4244:	e030      	b.n	42a8 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4246:	697b      	ldr	r3, [r7, #20]
    4248:	0018      	movs	r0, r3
    424a:	4b5d      	ldr	r3, [pc, #372]	; (43c0 <_spi_interrupt_handler+0x308>)
    424c:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    424e:	697b      	ldr	r3, [r7, #20]
    4250:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4252:	b29b      	uxth	r3, r3
    4254:	2b00      	cmp	r3, #0
    4256:	d127      	bne.n	42a8 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    4258:	697b      	ldr	r3, [r7, #20]
    425a:	2238      	movs	r2, #56	; 0x38
    425c:	2100      	movs	r1, #0
    425e:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4260:	693b      	ldr	r3, [r7, #16]
    4262:	2204      	movs	r2, #4
    4264:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4266:	697b      	ldr	r3, [r7, #20]
    4268:	7a5b      	ldrb	r3, [r3, #9]
    426a:	b2db      	uxtb	r3, r3
    426c:	2b02      	cmp	r3, #2
    426e:	d10b      	bne.n	4288 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4270:	230f      	movs	r3, #15
    4272:	18fb      	adds	r3, r7, r3
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2204      	movs	r2, #4
    4278:	4013      	ands	r3, r2
    427a:	d015      	beq.n	42a8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    427c:	697b      	ldr	r3, [r7, #20]
    427e:	695b      	ldr	r3, [r3, #20]
    4280:	697a      	ldr	r2, [r7, #20]
    4282:	0010      	movs	r0, r2
    4284:	4798      	blx	r3
    4286:	e00f      	b.n	42a8 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4288:	697b      	ldr	r3, [r7, #20]
    428a:	7a5b      	ldrb	r3, [r3, #9]
    428c:	b2db      	uxtb	r3, r3
    428e:	2b00      	cmp	r3, #0
    4290:	d10a      	bne.n	42a8 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4292:	230f      	movs	r3, #15
    4294:	18fb      	adds	r3, r7, r3
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	2202      	movs	r2, #2
    429a:	4013      	ands	r3, r2
    429c:	d004      	beq.n	42a8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    429e:	697b      	ldr	r3, [r7, #20]
    42a0:	691b      	ldr	r3, [r3, #16]
    42a2:	697a      	ldr	r2, [r7, #20]
    42a4:	0010      	movs	r0, r2
    42a6:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    42a8:	230c      	movs	r3, #12
    42aa:	18fb      	adds	r3, r7, r3
    42ac:	881b      	ldrh	r3, [r3, #0]
    42ae:	2202      	movs	r2, #2
    42b0:	4013      	ands	r3, r2
    42b2:	d046      	beq.n	4342 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    42b4:	697b      	ldr	r3, [r7, #20]
    42b6:	795b      	ldrb	r3, [r3, #5]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d11d      	bne.n	42f8 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    42bc:	693b      	ldr	r3, [r7, #16]
    42be:	2207      	movs	r2, #7
    42c0:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    42c2:	693b      	ldr	r3, [r7, #16]
    42c4:	2202      	movs	r2, #2
    42c6:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    42c8:	697b      	ldr	r3, [r7, #20]
    42ca:	2203      	movs	r2, #3
    42cc:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    42ce:	697b      	ldr	r3, [r7, #20]
    42d0:	2200      	movs	r2, #0
    42d2:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    42d4:	697b      	ldr	r3, [r7, #20]
    42d6:	2200      	movs	r2, #0
    42d8:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    42da:	697b      	ldr	r3, [r7, #20]
    42dc:	2238      	movs	r2, #56	; 0x38
    42de:	2100      	movs	r1, #0
    42e0:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    42e2:	230f      	movs	r3, #15
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	781b      	ldrb	r3, [r3, #0]
    42e8:	2210      	movs	r2, #16
    42ea:	4013      	ands	r3, r2
    42ec:	d004      	beq.n	42f8 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    42ee:	697b      	ldr	r3, [r7, #20]
    42f0:	69db      	ldr	r3, [r3, #28]
    42f2:	697a      	ldr	r2, [r7, #20]
    42f4:	0010      	movs	r0, r2
    42f6:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    42f8:	697b      	ldr	r3, [r7, #20]
    42fa:	795b      	ldrb	r3, [r3, #5]
    42fc:	2b01      	cmp	r3, #1
    42fe:	d120      	bne.n	4342 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4300:	697b      	ldr	r3, [r7, #20]
    4302:	7a5b      	ldrb	r3, [r3, #9]
    4304:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4306:	2b01      	cmp	r3, #1
    4308:	d11b      	bne.n	4342 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    430a:	697b      	ldr	r3, [r7, #20]
    430c:	79db      	ldrb	r3, [r3, #7]
    430e:	2201      	movs	r2, #1
    4310:	4053      	eors	r3, r2
    4312:	b2db      	uxtb	r3, r3
    4314:	2b00      	cmp	r3, #0
    4316:	d014      	beq.n	4342 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4318:	693b      	ldr	r3, [r7, #16]
    431a:	2202      	movs	r2, #2
    431c:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    431e:	697b      	ldr	r3, [r7, #20]
    4320:	2203      	movs	r2, #3
    4322:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4324:	697b      	ldr	r3, [r7, #20]
    4326:	2238      	movs	r2, #56	; 0x38
    4328:	2100      	movs	r1, #0
    432a:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    432c:	230f      	movs	r3, #15
    432e:	18fb      	adds	r3, r7, r3
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	2201      	movs	r2, #1
    4334:	4013      	ands	r3, r2
    4336:	d004      	beq.n	4342 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4338:	697b      	ldr	r3, [r7, #20]
    433a:	68db      	ldr	r3, [r3, #12]
    433c:	697a      	ldr	r2, [r7, #20]
    433e:	0010      	movs	r0, r2
    4340:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    4342:	230c      	movs	r3, #12
    4344:	18fb      	adds	r3, r7, r3
    4346:	881b      	ldrh	r3, [r3, #0]
    4348:	2208      	movs	r2, #8
    434a:	4013      	ands	r3, r2
    434c:	d014      	beq.n	4378 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    434e:	697b      	ldr	r3, [r7, #20]
    4350:	795b      	ldrb	r3, [r3, #5]
    4352:	2b00      	cmp	r3, #0
    4354:	d110      	bne.n	4378 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4356:	693b      	ldr	r3, [r7, #16]
    4358:	2208      	movs	r2, #8
    435a:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    435c:	693b      	ldr	r3, [r7, #16]
    435e:	2208      	movs	r2, #8
    4360:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    4362:	230f      	movs	r3, #15
    4364:	18fb      	adds	r3, r7, r3
    4366:	781b      	ldrb	r3, [r3, #0]
    4368:	2220      	movs	r2, #32
    436a:	4013      	ands	r3, r2
    436c:	d004      	beq.n	4378 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    436e:	697b      	ldr	r3, [r7, #20]
    4370:	6a1b      	ldr	r3, [r3, #32]
    4372:	697a      	ldr	r2, [r7, #20]
    4374:	0010      	movs	r0, r2
    4376:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4378:	230c      	movs	r3, #12
    437a:	18fb      	adds	r3, r7, r3
    437c:	881b      	ldrh	r3, [r3, #0]
    437e:	2280      	movs	r2, #128	; 0x80
    4380:	4013      	ands	r3, r2
    4382:	d010      	beq.n	43a6 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4384:	693b      	ldr	r3, [r7, #16]
    4386:	2280      	movs	r2, #128	; 0x80
    4388:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    438a:	693b      	ldr	r3, [r7, #16]
    438c:	2280      	movs	r2, #128	; 0x80
    438e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4390:	230f      	movs	r3, #15
    4392:	18fb      	adds	r3, r7, r3
    4394:	781b      	ldrb	r3, [r3, #0]
    4396:	2240      	movs	r2, #64	; 0x40
    4398:	4013      	ands	r3, r2
    439a:	d004      	beq.n	43a6 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    439c:	697b      	ldr	r3, [r7, #20]
    439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43a0:	697a      	ldr	r2, [r7, #20]
    43a2:	0010      	movs	r0, r2
    43a4:	4798      	blx	r3
		}
	}
#  endif
}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	46bd      	mov	sp, r7
    43aa:	b006      	add	sp, #24
    43ac:	bd80      	pop	{r7, pc}
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	20000074 	.word	0x20000074
    43b4:	00003fdd 	.word	0x00003fdd
    43b8:	00003f61 	.word	0x00003f61
    43bc:	00004011 	.word	0x00004011
    43c0:	00004047 	.word	0x00004047

000043c4 <system_gclk_gen_get_config_defaults>:
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	2201      	movs	r2, #1
    43d0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	2200      	movs	r2, #0
    43d6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	2206      	movs	r2, #6
    43dc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    43de:	687b      	ldr	r3, [r7, #4]
    43e0:	2200      	movs	r2, #0
    43e2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	2200      	movs	r2, #0
    43e8:	725a      	strb	r2, [r3, #9]
}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	46bd      	mov	sp, r7
    43ee:	b002      	add	sp, #8
    43f0:	bd80      	pop	{r7, pc}

000043f2 <system_clock_source_osc8m_get_config_defaults>:
{
    43f2:	b580      	push	{r7, lr}
    43f4:	b082      	sub	sp, #8
    43f6:	af00      	add	r7, sp, #0
    43f8:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	2203      	movs	r2, #3
    43fe:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	2200      	movs	r2, #0
    4404:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	2201      	movs	r2, #1
    440a:	709a      	strb	r2, [r3, #2]
}
    440c:	46c0      	nop			; (mov r8, r8)
    440e:	46bd      	mov	sp, r7
    4410:	b002      	add	sp, #8
    4412:	bd80      	pop	{r7, pc}

00004414 <system_cpu_clock_set_divider>:
{
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	0002      	movs	r2, r0
    441c:	1dfb      	adds	r3, r7, #7
    441e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    4420:	4a03      	ldr	r2, [pc, #12]	; (4430 <system_cpu_clock_set_divider+0x1c>)
    4422:	1dfb      	adds	r3, r7, #7
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	7213      	strb	r3, [r2, #8]
}
    4428:	46c0      	nop			; (mov r8, r8)
    442a:	46bd      	mov	sp, r7
    442c:	b002      	add	sp, #8
    442e:	bd80      	pop	{r7, pc}
    4430:	40000400 	.word	0x40000400

00004434 <system_apb_clock_set_divider>:
{
    4434:	b580      	push	{r7, lr}
    4436:	b082      	sub	sp, #8
    4438:	af00      	add	r7, sp, #0
    443a:	0002      	movs	r2, r0
    443c:	1dfb      	adds	r3, r7, #7
    443e:	701a      	strb	r2, [r3, #0]
    4440:	1dbb      	adds	r3, r7, #6
    4442:	1c0a      	adds	r2, r1, #0
    4444:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4446:	1dfb      	adds	r3, r7, #7
    4448:	781b      	ldrb	r3, [r3, #0]
    444a:	2b01      	cmp	r3, #1
    444c:	d008      	beq.n	4460 <system_apb_clock_set_divider+0x2c>
    444e:	2b02      	cmp	r3, #2
    4450:	d00b      	beq.n	446a <system_apb_clock_set_divider+0x36>
    4452:	2b00      	cmp	r3, #0
    4454:	d10e      	bne.n	4474 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    4456:	4a0b      	ldr	r2, [pc, #44]	; (4484 <system_apb_clock_set_divider+0x50>)
    4458:	1dbb      	adds	r3, r7, #6
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	7253      	strb	r3, [r2, #9]
			break;
    445e:	e00b      	b.n	4478 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    4460:	4a08      	ldr	r2, [pc, #32]	; (4484 <system_apb_clock_set_divider+0x50>)
    4462:	1dbb      	adds	r3, r7, #6
    4464:	781b      	ldrb	r3, [r3, #0]
    4466:	7293      	strb	r3, [r2, #10]
			break;
    4468:	e006      	b.n	4478 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    446a:	4a06      	ldr	r2, [pc, #24]	; (4484 <system_apb_clock_set_divider+0x50>)
    446c:	1dbb      	adds	r3, r7, #6
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	72d3      	strb	r3, [r2, #11]
			break;
    4472:	e001      	b.n	4478 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    4474:	2317      	movs	r3, #23
    4476:	e000      	b.n	447a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    4478:	2300      	movs	r3, #0
}
    447a:	0018      	movs	r0, r3
    447c:	46bd      	mov	sp, r7
    447e:	b002      	add	sp, #8
    4480:	bd80      	pop	{r7, pc}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	40000400 	.word	0x40000400

00004488 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	0002      	movs	r2, r0
    4490:	1dfb      	adds	r3, r7, #7
    4492:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4494:	4a08      	ldr	r2, [pc, #32]	; (44b8 <system_flash_set_waitstates+0x30>)
    4496:	1dfb      	adds	r3, r7, #7
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	210f      	movs	r1, #15
    449c:	400b      	ands	r3, r1
    449e:	b2d9      	uxtb	r1, r3
    44a0:	6853      	ldr	r3, [r2, #4]
    44a2:	200f      	movs	r0, #15
    44a4:	4001      	ands	r1, r0
    44a6:	0049      	lsls	r1, r1, #1
    44a8:	201e      	movs	r0, #30
    44aa:	4383      	bics	r3, r0
    44ac:	430b      	orrs	r3, r1
    44ae:	6053      	str	r3, [r2, #4]
}
    44b0:	46c0      	nop			; (mov r8, r8)
    44b2:	46bd      	mov	sp, r7
    44b4:	b002      	add	sp, #8
    44b6:	bd80      	pop	{r7, pc}
    44b8:	41004000 	.word	0x41004000

000044bc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    44bc:	b580      	push	{r7, lr}
    44be:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    44c0:	46c0      	nop			; (mov r8, r8)
    44c2:	4b04      	ldr	r3, [pc, #16]	; (44d4 <_system_dfll_wait_for_sync+0x18>)
    44c4:	68db      	ldr	r3, [r3, #12]
    44c6:	2210      	movs	r2, #16
    44c8:	4013      	ands	r3, r2
    44ca:	d0fa      	beq.n	44c2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    44cc:	46c0      	nop			; (mov r8, r8)
    44ce:	46bd      	mov	sp, r7
    44d0:	bd80      	pop	{r7, pc}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	40000800 	.word	0x40000800

000044d8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    44d8:	b580      	push	{r7, lr}
    44da:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    44dc:	4b0c      	ldr	r3, [pc, #48]	; (4510 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44de:	2202      	movs	r2, #2
    44e0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44e2:	4b0c      	ldr	r3, [pc, #48]	; (4514 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44e4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    44e6:	4a0a      	ldr	r2, [pc, #40]	; (4510 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44e8:	4b0b      	ldr	r3, [pc, #44]	; (4518 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44ea:	689b      	ldr	r3, [r3, #8]
    44ec:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    44ee:	4a08      	ldr	r2, [pc, #32]	; (4510 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44f0:	4b09      	ldr	r3, [pc, #36]	; (4518 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    44f2:	685b      	ldr	r3, [r3, #4]
    44f4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    44f6:	4b06      	ldr	r3, [pc, #24]	; (4510 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    44f8:	2200      	movs	r2, #0
    44fa:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    44fc:	4b05      	ldr	r3, [pc, #20]	; (4514 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    44fe:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4500:	4a03      	ldr	r2, [pc, #12]	; (4510 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4502:	4b05      	ldr	r3, [pc, #20]	; (4518 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	b29b      	uxth	r3, r3
    4508:	8493      	strh	r3, [r2, #36]	; 0x24
}
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	46bd      	mov	sp, r7
    450e:	bd80      	pop	{r7, pc}
    4510:	40000800 	.word	0x40000800
    4514:	000044bd 	.word	0x000044bd
    4518:	20000050 	.word	0x20000050

0000451c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    451c:	b580      	push	{r7, lr}
    451e:	b082      	sub	sp, #8
    4520:	af00      	add	r7, sp, #0
    4522:	0002      	movs	r2, r0
    4524:	1dfb      	adds	r3, r7, #7
    4526:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4528:	1dfb      	adds	r3, r7, #7
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	2b08      	cmp	r3, #8
    452e:	d840      	bhi.n	45b2 <system_clock_source_get_hz+0x96>
    4530:	009a      	lsls	r2, r3, #2
    4532:	4b22      	ldr	r3, [pc, #136]	; (45bc <system_clock_source_get_hz+0xa0>)
    4534:	18d3      	adds	r3, r2, r3
    4536:	681b      	ldr	r3, [r3, #0]
    4538:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    453a:	4b21      	ldr	r3, [pc, #132]	; (45c0 <system_clock_source_get_hz+0xa4>)
    453c:	691b      	ldr	r3, [r3, #16]
    453e:	e039      	b.n	45b4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4540:	4b20      	ldr	r3, [pc, #128]	; (45c4 <system_clock_source_get_hz+0xa8>)
    4542:	6a1b      	ldr	r3, [r3, #32]
    4544:	059b      	lsls	r3, r3, #22
    4546:	0f9b      	lsrs	r3, r3, #30
    4548:	b2db      	uxtb	r3, r3
    454a:	001a      	movs	r2, r3
    454c:	4b1e      	ldr	r3, [pc, #120]	; (45c8 <system_clock_source_get_hz+0xac>)
    454e:	40d3      	lsrs	r3, r2
    4550:	e030      	b.n	45b4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4552:	2380      	movs	r3, #128	; 0x80
    4554:	021b      	lsls	r3, r3, #8
    4556:	e02d      	b.n	45b4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4558:	2380      	movs	r3, #128	; 0x80
    455a:	021b      	lsls	r3, r3, #8
    455c:	e02a      	b.n	45b4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    455e:	4b18      	ldr	r3, [pc, #96]	; (45c0 <system_clock_source_get_hz+0xa4>)
    4560:	695b      	ldr	r3, [r3, #20]
    4562:	e027      	b.n	45b4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4564:	4b16      	ldr	r3, [pc, #88]	; (45c0 <system_clock_source_get_hz+0xa4>)
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	2202      	movs	r2, #2
    456a:	4013      	ands	r3, r2
    456c:	d101      	bne.n	4572 <system_clock_source_get_hz+0x56>
			return 0;
    456e:	2300      	movs	r3, #0
    4570:	e020      	b.n	45b4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4572:	4b16      	ldr	r3, [pc, #88]	; (45cc <system_clock_source_get_hz+0xb0>)
    4574:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4576:	4b12      	ldr	r3, [pc, #72]	; (45c0 <system_clock_source_get_hz+0xa4>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	2204      	movs	r2, #4
    457c:	4013      	ands	r3, r2
    457e:	d009      	beq.n	4594 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4580:	2000      	movs	r0, #0
    4582:	4b13      	ldr	r3, [pc, #76]	; (45d0 <system_clock_source_get_hz+0xb4>)
    4584:	4798      	blx	r3
    4586:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    4588:	4b0d      	ldr	r3, [pc, #52]	; (45c0 <system_clock_source_get_hz+0xa4>)
    458a:	689b      	ldr	r3, [r3, #8]
    458c:	041b      	lsls	r3, r3, #16
    458e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4590:	4353      	muls	r3, r2
    4592:	e00f      	b.n	45b4 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    4594:	4b0f      	ldr	r3, [pc, #60]	; (45d4 <system_clock_source_get_hz+0xb8>)
    4596:	e00d      	b.n	45b4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4598:	4a0a      	ldr	r2, [pc, #40]	; (45c4 <system_clock_source_get_hz+0xa8>)
    459a:	2350      	movs	r3, #80	; 0x50
    459c:	5cd3      	ldrb	r3, [r2, r3]
    459e:	b2db      	uxtb	r3, r3
    45a0:	001a      	movs	r2, r3
    45a2:	2304      	movs	r3, #4
    45a4:	4013      	ands	r3, r2
    45a6:	d101      	bne.n	45ac <system_clock_source_get_hz+0x90>
			return 0;
    45a8:	2300      	movs	r3, #0
    45aa:	e003      	b.n	45b4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    45ac:	4b04      	ldr	r3, [pc, #16]	; (45c0 <system_clock_source_get_hz+0xa4>)
    45ae:	68db      	ldr	r3, [r3, #12]
    45b0:	e000      	b.n	45b4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    45b2:	2300      	movs	r3, #0
	}
}
    45b4:	0018      	movs	r0, r3
    45b6:	46bd      	mov	sp, r7
    45b8:	b002      	add	sp, #8
    45ba:	bd80      	pop	{r7, pc}
    45bc:	00005620 	.word	0x00005620
    45c0:	20000050 	.word	0x20000050
    45c4:	40000800 	.word	0x40000800
    45c8:	007a1200 	.word	0x007a1200
    45cc:	000044bd 	.word	0x000044bd
    45d0:	00004c59 	.word	0x00004c59
    45d4:	02dc6c00 	.word	0x02dc6c00

000045d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    45d8:	b580      	push	{r7, lr}
    45da:	b084      	sub	sp, #16
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    45e0:	4b1a      	ldr	r3, [pc, #104]	; (464c <system_clock_source_osc8m_set_config+0x74>)
    45e2:	6a1b      	ldr	r3, [r3, #32]
    45e4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    45e6:	687b      	ldr	r3, [r7, #4]
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	1c1a      	adds	r2, r3, #0
    45ec:	2303      	movs	r3, #3
    45ee:	4013      	ands	r3, r2
    45f0:	b2da      	uxtb	r2, r3
    45f2:	230d      	movs	r3, #13
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	2103      	movs	r1, #3
    45f8:	400a      	ands	r2, r1
    45fa:	0010      	movs	r0, r2
    45fc:	781a      	ldrb	r2, [r3, #0]
    45fe:	2103      	movs	r1, #3
    4600:	438a      	bics	r2, r1
    4602:	1c11      	adds	r1, r2, #0
    4604:	1c02      	adds	r2, r0, #0
    4606:	430a      	orrs	r2, r1
    4608:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	789a      	ldrb	r2, [r3, #2]
    460e:	230c      	movs	r3, #12
    4610:	18fb      	adds	r3, r7, r3
    4612:	01d0      	lsls	r0, r2, #7
    4614:	781a      	ldrb	r2, [r3, #0]
    4616:	217f      	movs	r1, #127	; 0x7f
    4618:	400a      	ands	r2, r1
    461a:	1c11      	adds	r1, r2, #0
    461c:	1c02      	adds	r2, r0, #0
    461e:	430a      	orrs	r2, r1
    4620:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	785a      	ldrb	r2, [r3, #1]
    4626:	230c      	movs	r3, #12
    4628:	18fb      	adds	r3, r7, r3
    462a:	2101      	movs	r1, #1
    462c:	400a      	ands	r2, r1
    462e:	0190      	lsls	r0, r2, #6
    4630:	781a      	ldrb	r2, [r3, #0]
    4632:	2140      	movs	r1, #64	; 0x40
    4634:	438a      	bics	r2, r1
    4636:	1c11      	adds	r1, r2, #0
    4638:	1c02      	adds	r2, r0, #0
    463a:	430a      	orrs	r2, r1
    463c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    463e:	4b03      	ldr	r3, [pc, #12]	; (464c <system_clock_source_osc8m_set_config+0x74>)
    4640:	68fa      	ldr	r2, [r7, #12]
    4642:	621a      	str	r2, [r3, #32]
}
    4644:	46c0      	nop			; (mov r8, r8)
    4646:	46bd      	mov	sp, r7
    4648:	b004      	add	sp, #16
    464a:	bd80      	pop	{r7, pc}
    464c:	40000800 	.word	0x40000800

00004650 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
    4656:	0002      	movs	r2, r0
    4658:	1dfb      	adds	r3, r7, #7
    465a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    465c:	1dfb      	adds	r3, r7, #7
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	2b08      	cmp	r3, #8
    4662:	d83b      	bhi.n	46dc <system_clock_source_enable+0x8c>
    4664:	009a      	lsls	r2, r3, #2
    4666:	4b21      	ldr	r3, [pc, #132]	; (46ec <system_clock_source_enable+0x9c>)
    4668:	18d3      	adds	r3, r2, r3
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    466e:	4b20      	ldr	r3, [pc, #128]	; (46f0 <system_clock_source_enable+0xa0>)
    4670:	4a1f      	ldr	r2, [pc, #124]	; (46f0 <system_clock_source_enable+0xa0>)
    4672:	6a12      	ldr	r2, [r2, #32]
    4674:	2102      	movs	r1, #2
    4676:	430a      	orrs	r2, r1
    4678:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    467a:	2300      	movs	r3, #0
    467c:	e031      	b.n	46e2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    467e:	4b1c      	ldr	r3, [pc, #112]	; (46f0 <system_clock_source_enable+0xa0>)
    4680:	4a1b      	ldr	r2, [pc, #108]	; (46f0 <system_clock_source_enable+0xa0>)
    4682:	6992      	ldr	r2, [r2, #24]
    4684:	2102      	movs	r1, #2
    4686:	430a      	orrs	r2, r1
    4688:	619a      	str	r2, [r3, #24]
		break;
    468a:	e029      	b.n	46e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    468c:	4a18      	ldr	r2, [pc, #96]	; (46f0 <system_clock_source_enable+0xa0>)
    468e:	4b18      	ldr	r3, [pc, #96]	; (46f0 <system_clock_source_enable+0xa0>)
    4690:	8a1b      	ldrh	r3, [r3, #16]
    4692:	b29b      	uxth	r3, r3
    4694:	2102      	movs	r1, #2
    4696:	430b      	orrs	r3, r1
    4698:	b29b      	uxth	r3, r3
    469a:	8213      	strh	r3, [r2, #16]
		break;
    469c:	e020      	b.n	46e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    469e:	4a14      	ldr	r2, [pc, #80]	; (46f0 <system_clock_source_enable+0xa0>)
    46a0:	4b13      	ldr	r3, [pc, #76]	; (46f0 <system_clock_source_enable+0xa0>)
    46a2:	8a9b      	ldrh	r3, [r3, #20]
    46a4:	b29b      	uxth	r3, r3
    46a6:	2102      	movs	r1, #2
    46a8:	430b      	orrs	r3, r1
    46aa:	b29b      	uxth	r3, r3
    46ac:	8293      	strh	r3, [r2, #20]
		break;
    46ae:	e017      	b.n	46e0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    46b0:	4b10      	ldr	r3, [pc, #64]	; (46f4 <system_clock_source_enable+0xa4>)
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	2202      	movs	r2, #2
    46b6:	431a      	orrs	r2, r3
    46b8:	4b0e      	ldr	r3, [pc, #56]	; (46f4 <system_clock_source_enable+0xa4>)
    46ba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    46bc:	4b0e      	ldr	r3, [pc, #56]	; (46f8 <system_clock_source_enable+0xa8>)
    46be:	4798      	blx	r3
		break;
    46c0:	e00e      	b.n	46e0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    46c2:	4a0b      	ldr	r2, [pc, #44]	; (46f0 <system_clock_source_enable+0xa0>)
    46c4:	490a      	ldr	r1, [pc, #40]	; (46f0 <system_clock_source_enable+0xa0>)
    46c6:	2344      	movs	r3, #68	; 0x44
    46c8:	5ccb      	ldrb	r3, [r1, r3]
    46ca:	b2db      	uxtb	r3, r3
    46cc:	2102      	movs	r1, #2
    46ce:	430b      	orrs	r3, r1
    46d0:	b2d9      	uxtb	r1, r3
    46d2:	2344      	movs	r3, #68	; 0x44
    46d4:	54d1      	strb	r1, [r2, r3]
		break;
    46d6:	e003      	b.n	46e0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    46d8:	2300      	movs	r3, #0
    46da:	e002      	b.n	46e2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    46dc:	2317      	movs	r3, #23
    46de:	e000      	b.n	46e2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    46e0:	2300      	movs	r3, #0
}
    46e2:	0018      	movs	r0, r3
    46e4:	46bd      	mov	sp, r7
    46e6:	b002      	add	sp, #8
    46e8:	bd80      	pop	{r7, pc}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	00005644 	.word	0x00005644
    46f0:	40000800 	.word	0x40000800
    46f4:	20000050 	.word	0x20000050
    46f8:	000044d9 	.word	0x000044d9

000046fc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	b082      	sub	sp, #8
    4700:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4702:	003b      	movs	r3, r7
    4704:	2201      	movs	r2, #1
    4706:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4708:	2300      	movs	r3, #0
    470a:	607b      	str	r3, [r7, #4]
    470c:	e009      	b.n	4722 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    470e:	687b      	ldr	r3, [r7, #4]
    4710:	b2db      	uxtb	r3, r3
    4712:	003a      	movs	r2, r7
    4714:	0011      	movs	r1, r2
    4716:	0018      	movs	r0, r3
    4718:	4b05      	ldr	r3, [pc, #20]	; (4730 <_switch_peripheral_gclk+0x34>)
    471a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	3301      	adds	r3, #1
    4720:	607b      	str	r3, [r7, #4]
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	2b24      	cmp	r3, #36	; 0x24
    4726:	d9f2      	bls.n	470e <_switch_peripheral_gclk+0x12>
	}
}
    4728:	46c0      	nop			; (mov r8, r8)
    472a:	46bd      	mov	sp, r7
    472c:	b002      	add	sp, #8
    472e:	bd80      	pop	{r7, pc}
    4730:	00004b35 	.word	0x00004b35

00004734 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4734:	b580      	push	{r7, lr}
    4736:	b0a0      	sub	sp, #128	; 0x80
    4738:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    473a:	4b27      	ldr	r3, [pc, #156]	; (47d8 <system_clock_init+0xa4>)
    473c:	22c2      	movs	r2, #194	; 0xc2
    473e:	00d2      	lsls	r2, r2, #3
    4740:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4742:	2000      	movs	r0, #0
    4744:	4b25      	ldr	r3, [pc, #148]	; (47dc <system_clock_init+0xa8>)
    4746:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4748:	4b25      	ldr	r3, [pc, #148]	; (47e0 <system_clock_init+0xac>)
    474a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    474c:	237c      	movs	r3, #124	; 0x7c
    474e:	18fb      	adds	r3, r7, r3
    4750:	0018      	movs	r0, r3
    4752:	4b24      	ldr	r3, [pc, #144]	; (47e4 <system_clock_init+0xb0>)
    4754:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4756:	237c      	movs	r3, #124	; 0x7c
    4758:	18fb      	adds	r3, r7, r3
    475a:	2200      	movs	r2, #0
    475c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    475e:	237c      	movs	r3, #124	; 0x7c
    4760:	18fb      	adds	r3, r7, r3
    4762:	2201      	movs	r2, #1
    4764:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4766:	237c      	movs	r3, #124	; 0x7c
    4768:	18fb      	adds	r3, r7, r3
    476a:	2200      	movs	r2, #0
    476c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    476e:	237c      	movs	r3, #124	; 0x7c
    4770:	18fb      	adds	r3, r7, r3
    4772:	0018      	movs	r0, r3
    4774:	4b1c      	ldr	r3, [pc, #112]	; (47e8 <system_clock_init+0xb4>)
    4776:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4778:	2006      	movs	r0, #6
    477a:	4b1c      	ldr	r3, [pc, #112]	; (47ec <system_clock_init+0xb8>)
    477c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    477e:	4b1c      	ldr	r3, [pc, #112]	; (47f0 <system_clock_init+0xbc>)
    4780:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4782:	2000      	movs	r0, #0
    4784:	4b1b      	ldr	r3, [pc, #108]	; (47f4 <system_clock_init+0xc0>)
    4786:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4788:	2100      	movs	r1, #0
    478a:	2000      	movs	r0, #0
    478c:	4b1a      	ldr	r3, [pc, #104]	; (47f8 <system_clock_init+0xc4>)
    478e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4790:	2100      	movs	r1, #0
    4792:	2001      	movs	r0, #1
    4794:	4b18      	ldr	r3, [pc, #96]	; (47f8 <system_clock_init+0xc4>)
    4796:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4798:	2100      	movs	r1, #0
    479a:	2002      	movs	r0, #2
    479c:	4b16      	ldr	r3, [pc, #88]	; (47f8 <system_clock_init+0xc4>)
    479e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    47a0:	1d3b      	adds	r3, r7, #4
    47a2:	0018      	movs	r0, r3
    47a4:	4b15      	ldr	r3, [pc, #84]	; (47fc <system_clock_init+0xc8>)
    47a6:	4798      	blx	r3
    47a8:	1d3b      	adds	r3, r7, #4
    47aa:	2206      	movs	r2, #6
    47ac:	701a      	strb	r2, [r3, #0]
    47ae:	1d3b      	adds	r3, r7, #4
    47b0:	2201      	movs	r2, #1
    47b2:	605a      	str	r2, [r3, #4]
    47b4:	1d3b      	adds	r3, r7, #4
    47b6:	2200      	movs	r2, #0
    47b8:	721a      	strb	r2, [r3, #8]
    47ba:	1d3b      	adds	r3, r7, #4
    47bc:	2200      	movs	r2, #0
    47be:	725a      	strb	r2, [r3, #9]
    47c0:	1d3b      	adds	r3, r7, #4
    47c2:	0019      	movs	r1, r3
    47c4:	2000      	movs	r0, #0
    47c6:	4b0e      	ldr	r3, [pc, #56]	; (4800 <system_clock_init+0xcc>)
    47c8:	4798      	blx	r3
    47ca:	2000      	movs	r0, #0
    47cc:	4b0d      	ldr	r3, [pc, #52]	; (4804 <system_clock_init+0xd0>)
    47ce:	4798      	blx	r3
#endif
}
    47d0:	46c0      	nop			; (mov r8, r8)
    47d2:	46bd      	mov	sp, r7
    47d4:	b020      	add	sp, #128	; 0x80
    47d6:	bd80      	pop	{r7, pc}
    47d8:	40000800 	.word	0x40000800
    47dc:	00004489 	.word	0x00004489
    47e0:	000046fd 	.word	0x000046fd
    47e4:	000043f3 	.word	0x000043f3
    47e8:	000045d9 	.word	0x000045d9
    47ec:	00004651 	.word	0x00004651
    47f0:	000048ad 	.word	0x000048ad
    47f4:	00004415 	.word	0x00004415
    47f8:	00004435 	.word	0x00004435
    47fc:	000043c5 	.word	0x000043c5
    4800:	000048dd 	.word	0x000048dd
    4804:	00004a01 	.word	0x00004a01

00004808 <system_apb_clock_set_mask>:
{
    4808:	b580      	push	{r7, lr}
    480a:	b082      	sub	sp, #8
    480c:	af00      	add	r7, sp, #0
    480e:	0002      	movs	r2, r0
    4810:	6039      	str	r1, [r7, #0]
    4812:	1dfb      	adds	r3, r7, #7
    4814:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4816:	1dfb      	adds	r3, r7, #7
    4818:	781b      	ldrb	r3, [r3, #0]
    481a:	2b01      	cmp	r3, #1
    481c:	d00a      	beq.n	4834 <system_apb_clock_set_mask+0x2c>
    481e:	2b02      	cmp	r3, #2
    4820:	d00f      	beq.n	4842 <system_apb_clock_set_mask+0x3a>
    4822:	2b00      	cmp	r3, #0
    4824:	d114      	bne.n	4850 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4826:	4b0e      	ldr	r3, [pc, #56]	; (4860 <system_apb_clock_set_mask+0x58>)
    4828:	4a0d      	ldr	r2, [pc, #52]	; (4860 <system_apb_clock_set_mask+0x58>)
    482a:	6991      	ldr	r1, [r2, #24]
    482c:	683a      	ldr	r2, [r7, #0]
    482e:	430a      	orrs	r2, r1
    4830:	619a      	str	r2, [r3, #24]
			break;
    4832:	e00f      	b.n	4854 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4834:	4b0a      	ldr	r3, [pc, #40]	; (4860 <system_apb_clock_set_mask+0x58>)
    4836:	4a0a      	ldr	r2, [pc, #40]	; (4860 <system_apb_clock_set_mask+0x58>)
    4838:	69d1      	ldr	r1, [r2, #28]
    483a:	683a      	ldr	r2, [r7, #0]
    483c:	430a      	orrs	r2, r1
    483e:	61da      	str	r2, [r3, #28]
			break;
    4840:	e008      	b.n	4854 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4842:	4b07      	ldr	r3, [pc, #28]	; (4860 <system_apb_clock_set_mask+0x58>)
    4844:	4a06      	ldr	r2, [pc, #24]	; (4860 <system_apb_clock_set_mask+0x58>)
    4846:	6a11      	ldr	r1, [r2, #32]
    4848:	683a      	ldr	r2, [r7, #0]
    484a:	430a      	orrs	r2, r1
    484c:	621a      	str	r2, [r3, #32]
			break;
    484e:	e001      	b.n	4854 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4850:	2317      	movs	r3, #23
    4852:	e000      	b.n	4856 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4854:	2300      	movs	r3, #0
}
    4856:	0018      	movs	r0, r3
    4858:	46bd      	mov	sp, r7
    485a:	b002      	add	sp, #8
    485c:	bd80      	pop	{r7, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	40000400 	.word	0x40000400

00004864 <system_interrupt_enter_critical_section>:
{
    4864:	b580      	push	{r7, lr}
    4866:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4868:	4b02      	ldr	r3, [pc, #8]	; (4874 <system_interrupt_enter_critical_section+0x10>)
    486a:	4798      	blx	r3
}
    486c:	46c0      	nop			; (mov r8, r8)
    486e:	46bd      	mov	sp, r7
    4870:	bd80      	pop	{r7, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	00002f59 	.word	0x00002f59

00004878 <system_interrupt_leave_critical_section>:
{
    4878:	b580      	push	{r7, lr}
    487a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    487c:	4b02      	ldr	r3, [pc, #8]	; (4888 <system_interrupt_leave_critical_section+0x10>)
    487e:	4798      	blx	r3
}
    4880:	46c0      	nop			; (mov r8, r8)
    4882:	46bd      	mov	sp, r7
    4884:	bd80      	pop	{r7, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	00002fad 	.word	0x00002fad

0000488c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    488c:	b580      	push	{r7, lr}
    488e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4890:	4b05      	ldr	r3, [pc, #20]	; (48a8 <system_gclk_is_syncing+0x1c>)
    4892:	785b      	ldrb	r3, [r3, #1]
    4894:	b2db      	uxtb	r3, r3
    4896:	b25b      	sxtb	r3, r3
    4898:	2b00      	cmp	r3, #0
    489a:	da01      	bge.n	48a0 <system_gclk_is_syncing+0x14>
		return true;
    489c:	2301      	movs	r3, #1
    489e:	e000      	b.n	48a2 <system_gclk_is_syncing+0x16>
	}

	return false;
    48a0:	2300      	movs	r3, #0
}
    48a2:	0018      	movs	r0, r3
    48a4:	46bd      	mov	sp, r7
    48a6:	bd80      	pop	{r7, pc}
    48a8:	40000c00 	.word	0x40000c00

000048ac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    48ac:	b580      	push	{r7, lr}
    48ae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    48b0:	2108      	movs	r1, #8
    48b2:	2000      	movs	r0, #0
    48b4:	4b07      	ldr	r3, [pc, #28]	; (48d4 <system_gclk_init+0x28>)
    48b6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    48b8:	4b07      	ldr	r3, [pc, #28]	; (48d8 <system_gclk_init+0x2c>)
    48ba:	2201      	movs	r2, #1
    48bc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    48be:	46c0      	nop			; (mov r8, r8)
    48c0:	4b05      	ldr	r3, [pc, #20]	; (48d8 <system_gclk_init+0x2c>)
    48c2:	781b      	ldrb	r3, [r3, #0]
    48c4:	b2db      	uxtb	r3, r3
    48c6:	001a      	movs	r2, r3
    48c8:	2301      	movs	r3, #1
    48ca:	4013      	ands	r3, r2
    48cc:	d1f8      	bne.n	48c0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	46bd      	mov	sp, r7
    48d2:	bd80      	pop	{r7, pc}
    48d4:	00004809 	.word	0x00004809
    48d8:	40000c00 	.word	0x40000c00

000048dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    48dc:	b580      	push	{r7, lr}
    48de:	b086      	sub	sp, #24
    48e0:	af00      	add	r7, sp, #0
    48e2:	0002      	movs	r2, r0
    48e4:	6039      	str	r1, [r7, #0]
    48e6:	1dfb      	adds	r3, r7, #7
    48e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    48ea:	1dfb      	adds	r3, r7, #7
    48ec:	781b      	ldrb	r3, [r3, #0]
    48ee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    48f0:	1dfb      	adds	r3, r7, #7
    48f2:	781b      	ldrb	r3, [r3, #0]
    48f4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    48f6:	683b      	ldr	r3, [r7, #0]
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	021b      	lsls	r3, r3, #8
    48fc:	001a      	movs	r2, r3
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	4313      	orrs	r3, r2
    4902:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4904:	683b      	ldr	r3, [r7, #0]
    4906:	785b      	ldrb	r3, [r3, #1]
    4908:	2b00      	cmp	r3, #0
    490a:	d004      	beq.n	4916 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    490c:	697b      	ldr	r3, [r7, #20]
    490e:	2280      	movs	r2, #128	; 0x80
    4910:	02d2      	lsls	r2, r2, #11
    4912:	4313      	orrs	r3, r2
    4914:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4916:	683b      	ldr	r3, [r7, #0]
    4918:	7a5b      	ldrb	r3, [r3, #9]
    491a:	2b00      	cmp	r3, #0
    491c:	d004      	beq.n	4928 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    491e:	697b      	ldr	r3, [r7, #20]
    4920:	2280      	movs	r2, #128	; 0x80
    4922:	0312      	lsls	r2, r2, #12
    4924:	4313      	orrs	r3, r2
    4926:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4928:	683b      	ldr	r3, [r7, #0]
    492a:	685b      	ldr	r3, [r3, #4]
    492c:	2b01      	cmp	r3, #1
    492e:	d92c      	bls.n	498a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4930:	683b      	ldr	r3, [r7, #0]
    4932:	685a      	ldr	r2, [r3, #4]
    4934:	683b      	ldr	r3, [r7, #0]
    4936:	685b      	ldr	r3, [r3, #4]
    4938:	3b01      	subs	r3, #1
    493a:	4013      	ands	r3, r2
    493c:	d11a      	bne.n	4974 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    493e:	2300      	movs	r3, #0
    4940:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4942:	2302      	movs	r3, #2
    4944:	60bb      	str	r3, [r7, #8]
    4946:	e005      	b.n	4954 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	3301      	adds	r3, #1
    494c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    494e:	68bb      	ldr	r3, [r7, #8]
    4950:	005b      	lsls	r3, r3, #1
    4952:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    4954:	683b      	ldr	r3, [r7, #0]
    4956:	685a      	ldr	r2, [r3, #4]
    4958:	68bb      	ldr	r3, [r7, #8]
    495a:	429a      	cmp	r2, r3
    495c:	d8f4      	bhi.n	4948 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    495e:	68fb      	ldr	r3, [r7, #12]
    4960:	021b      	lsls	r3, r3, #8
    4962:	693a      	ldr	r2, [r7, #16]
    4964:	4313      	orrs	r3, r2
    4966:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4968:	697b      	ldr	r3, [r7, #20]
    496a:	2280      	movs	r2, #128	; 0x80
    496c:	0352      	lsls	r2, r2, #13
    496e:	4313      	orrs	r3, r2
    4970:	617b      	str	r3, [r7, #20]
    4972:	e00a      	b.n	498a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4974:	683b      	ldr	r3, [r7, #0]
    4976:	685b      	ldr	r3, [r3, #4]
    4978:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    497a:	693a      	ldr	r2, [r7, #16]
    497c:	4313      	orrs	r3, r2
    497e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4980:	697b      	ldr	r3, [r7, #20]
    4982:	2280      	movs	r2, #128	; 0x80
    4984:	0292      	lsls	r2, r2, #10
    4986:	4313      	orrs	r3, r2
    4988:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    498a:	683b      	ldr	r3, [r7, #0]
    498c:	7a1b      	ldrb	r3, [r3, #8]
    498e:	2b00      	cmp	r3, #0
    4990:	d004      	beq.n	499c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4992:	697b      	ldr	r3, [r7, #20]
    4994:	2280      	movs	r2, #128	; 0x80
    4996:	0392      	lsls	r2, r2, #14
    4998:	4313      	orrs	r3, r2
    499a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    499c:	46c0      	nop			; (mov r8, r8)
    499e:	4b13      	ldr	r3, [pc, #76]	; (49ec <system_gclk_gen_set_config+0x110>)
    49a0:	4798      	blx	r3
    49a2:	1e03      	subs	r3, r0, #0
    49a4:	d1fb      	bne.n	499e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    49a6:	4b12      	ldr	r3, [pc, #72]	; (49f0 <system_gclk_gen_set_config+0x114>)
    49a8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49aa:	4a12      	ldr	r2, [pc, #72]	; (49f4 <system_gclk_gen_set_config+0x118>)
    49ac:	1dfb      	adds	r3, r7, #7
    49ae:	781b      	ldrb	r3, [r3, #0]
    49b0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	4b0d      	ldr	r3, [pc, #52]	; (49ec <system_gclk_gen_set_config+0x110>)
    49b6:	4798      	blx	r3
    49b8:	1e03      	subs	r3, r0, #0
    49ba:	d1fb      	bne.n	49b4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    49bc:	4b0e      	ldr	r3, [pc, #56]	; (49f8 <system_gclk_gen_set_config+0x11c>)
    49be:	693a      	ldr	r2, [r7, #16]
    49c0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	4b09      	ldr	r3, [pc, #36]	; (49ec <system_gclk_gen_set_config+0x110>)
    49c6:	4798      	blx	r3
    49c8:	1e03      	subs	r3, r0, #0
    49ca:	d1fb      	bne.n	49c4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    49cc:	4b0a      	ldr	r3, [pc, #40]	; (49f8 <system_gclk_gen_set_config+0x11c>)
    49ce:	4a0a      	ldr	r2, [pc, #40]	; (49f8 <system_gclk_gen_set_config+0x11c>)
    49d0:	6851      	ldr	r1, [r2, #4]
    49d2:	2280      	movs	r2, #128	; 0x80
    49d4:	0252      	lsls	r2, r2, #9
    49d6:	4011      	ands	r1, r2
    49d8:	697a      	ldr	r2, [r7, #20]
    49da:	430a      	orrs	r2, r1
    49dc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    49de:	4b07      	ldr	r3, [pc, #28]	; (49fc <system_gclk_gen_set_config+0x120>)
    49e0:	4798      	blx	r3
}
    49e2:	46c0      	nop			; (mov r8, r8)
    49e4:	46bd      	mov	sp, r7
    49e6:	b006      	add	sp, #24
    49e8:	bd80      	pop	{r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	0000488d 	.word	0x0000488d
    49f0:	00004865 	.word	0x00004865
    49f4:	40000c08 	.word	0x40000c08
    49f8:	40000c00 	.word	0x40000c00
    49fc:	00004879 	.word	0x00004879

00004a00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	b082      	sub	sp, #8
    4a04:	af00      	add	r7, sp, #0
    4a06:	0002      	movs	r2, r0
    4a08:	1dfb      	adds	r3, r7, #7
    4a0a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4a0c:	46c0      	nop			; (mov r8, r8)
    4a0e:	4b0e      	ldr	r3, [pc, #56]	; (4a48 <system_gclk_gen_enable+0x48>)
    4a10:	4798      	blx	r3
    4a12:	1e03      	subs	r3, r0, #0
    4a14:	d1fb      	bne.n	4a0e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a16:	4b0d      	ldr	r3, [pc, #52]	; (4a4c <system_gclk_gen_enable+0x4c>)
    4a18:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a1a:	4a0d      	ldr	r2, [pc, #52]	; (4a50 <system_gclk_gen_enable+0x50>)
    4a1c:	1dfb      	adds	r3, r7, #7
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	4b08      	ldr	r3, [pc, #32]	; (4a48 <system_gclk_gen_enable+0x48>)
    4a26:	4798      	blx	r3
    4a28:	1e03      	subs	r3, r0, #0
    4a2a:	d1fb      	bne.n	4a24 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4a2c:	4b09      	ldr	r3, [pc, #36]	; (4a54 <system_gclk_gen_enable+0x54>)
    4a2e:	4a09      	ldr	r2, [pc, #36]	; (4a54 <system_gclk_gen_enable+0x54>)
    4a30:	6852      	ldr	r2, [r2, #4]
    4a32:	2180      	movs	r1, #128	; 0x80
    4a34:	0249      	lsls	r1, r1, #9
    4a36:	430a      	orrs	r2, r1
    4a38:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4a3a:	4b07      	ldr	r3, [pc, #28]	; (4a58 <system_gclk_gen_enable+0x58>)
    4a3c:	4798      	blx	r3
}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	46bd      	mov	sp, r7
    4a42:	b002      	add	sp, #8
    4a44:	bd80      	pop	{r7, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	0000488d 	.word	0x0000488d
    4a4c:	00004865 	.word	0x00004865
    4a50:	40000c04 	.word	0x40000c04
    4a54:	40000c00 	.word	0x40000c00
    4a58:	00004879 	.word	0x00004879

00004a5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4a5c:	b580      	push	{r7, lr}
    4a5e:	b086      	sub	sp, #24
    4a60:	af00      	add	r7, sp, #0
    4a62:	0002      	movs	r2, r0
    4a64:	1dfb      	adds	r3, r7, #7
    4a66:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4a68:	46c0      	nop			; (mov r8, r8)
    4a6a:	4b2a      	ldr	r3, [pc, #168]	; (4b14 <system_gclk_gen_get_hz+0xb8>)
    4a6c:	4798      	blx	r3
    4a6e:	1e03      	subs	r3, r0, #0
    4a70:	d1fb      	bne.n	4a6a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4a72:	4b29      	ldr	r3, [pc, #164]	; (4b18 <system_gclk_gen_get_hz+0xbc>)
    4a74:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a76:	4a29      	ldr	r2, [pc, #164]	; (4b1c <system_gclk_gen_get_hz+0xc0>)
    4a78:	1dfb      	adds	r3, r7, #7
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	4b24      	ldr	r3, [pc, #144]	; (4b14 <system_gclk_gen_get_hz+0xb8>)
    4a82:	4798      	blx	r3
    4a84:	1e03      	subs	r3, r0, #0
    4a86:	d1fb      	bne.n	4a80 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4a88:	4b25      	ldr	r3, [pc, #148]	; (4b20 <system_gclk_gen_get_hz+0xc4>)
    4a8a:	685b      	ldr	r3, [r3, #4]
    4a8c:	04db      	lsls	r3, r3, #19
    4a8e:	0edb      	lsrs	r3, r3, #27
    4a90:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4a92:	0018      	movs	r0, r3
    4a94:	4b23      	ldr	r3, [pc, #140]	; (4b24 <system_gclk_gen_get_hz+0xc8>)
    4a96:	4798      	blx	r3
    4a98:	0003      	movs	r3, r0
    4a9a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a9c:	4a1f      	ldr	r2, [pc, #124]	; (4b1c <system_gclk_gen_get_hz+0xc0>)
    4a9e:	1dfb      	adds	r3, r7, #7
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4aa4:	4b1e      	ldr	r3, [pc, #120]	; (4b20 <system_gclk_gen_get_hz+0xc4>)
    4aa6:	685b      	ldr	r3, [r3, #4]
    4aa8:	02db      	lsls	r3, r3, #11
    4aaa:	0fdb      	lsrs	r3, r3, #31
    4aac:	b2da      	uxtb	r2, r3
    4aae:	2313      	movs	r3, #19
    4ab0:	18fb      	adds	r3, r7, r3
    4ab2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4ab4:	4a1c      	ldr	r2, [pc, #112]	; (4b28 <system_gclk_gen_get_hz+0xcc>)
    4ab6:	1dfb      	adds	r3, r7, #7
    4ab8:	781b      	ldrb	r3, [r3, #0]
    4aba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4abc:	46c0      	nop			; (mov r8, r8)
    4abe:	4b15      	ldr	r3, [pc, #84]	; (4b14 <system_gclk_gen_get_hz+0xb8>)
    4ac0:	4798      	blx	r3
    4ac2:	1e03      	subs	r3, r0, #0
    4ac4:	d1fb      	bne.n	4abe <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4ac6:	4b16      	ldr	r3, [pc, #88]	; (4b20 <system_gclk_gen_get_hz+0xc4>)
    4ac8:	689b      	ldr	r3, [r3, #8]
    4aca:	021b      	lsls	r3, r3, #8
    4acc:	0c1b      	lsrs	r3, r3, #16
    4ace:	b29b      	uxth	r3, r3
    4ad0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4ad2:	4b16      	ldr	r3, [pc, #88]	; (4b2c <system_gclk_gen_get_hz+0xd0>)
    4ad4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ad6:	2313      	movs	r3, #19
    4ad8:	18fb      	adds	r3, r7, r3
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	2b00      	cmp	r3, #0
    4ade:	d109      	bne.n	4af4 <system_gclk_gen_get_hz+0x98>
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	2b01      	cmp	r3, #1
    4ae4:	d906      	bls.n	4af4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    4ae6:	4b12      	ldr	r3, [pc, #72]	; (4b30 <system_gclk_gen_get_hz+0xd4>)
    4ae8:	68f9      	ldr	r1, [r7, #12]
    4aea:	6978      	ldr	r0, [r7, #20]
    4aec:	4798      	blx	r3
    4aee:	0003      	movs	r3, r0
    4af0:	617b      	str	r3, [r7, #20]
    4af2:	e00a      	b.n	4b0a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4af4:	2313      	movs	r3, #19
    4af6:	18fb      	adds	r3, r7, r3
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	2b00      	cmp	r3, #0
    4afc:	d005      	beq.n	4b0a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	3301      	adds	r3, #1
    4b02:	697a      	ldr	r2, [r7, #20]
    4b04:	40da      	lsrs	r2, r3
    4b06:	0013      	movs	r3, r2
    4b08:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4b0a:	697b      	ldr	r3, [r7, #20]
}
    4b0c:	0018      	movs	r0, r3
    4b0e:	46bd      	mov	sp, r7
    4b10:	b006      	add	sp, #24
    4b12:	bd80      	pop	{r7, pc}
    4b14:	0000488d 	.word	0x0000488d
    4b18:	00004865 	.word	0x00004865
    4b1c:	40000c04 	.word	0x40000c04
    4b20:	40000c00 	.word	0x40000c00
    4b24:	0000451d 	.word	0x0000451d
    4b28:	40000c08 	.word	0x40000c08
    4b2c:	00004879 	.word	0x00004879
    4b30:	00005441 	.word	0x00005441

00004b34 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b084      	sub	sp, #16
    4b38:	af00      	add	r7, sp, #0
    4b3a:	0002      	movs	r2, r0
    4b3c:	6039      	str	r1, [r7, #0]
    4b3e:	1dfb      	adds	r3, r7, #7
    4b40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4b42:	1dfb      	adds	r3, r7, #7
    4b44:	781b      	ldrb	r3, [r3, #0]
    4b46:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4b48:	683b      	ldr	r3, [r7, #0]
    4b4a:	781b      	ldrb	r3, [r3, #0]
    4b4c:	021b      	lsls	r3, r3, #8
    4b4e:	001a      	movs	r2, r3
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	4313      	orrs	r3, r2
    4b54:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4b56:	1dfb      	adds	r3, r7, #7
    4b58:	781b      	ldrb	r3, [r3, #0]
    4b5a:	0018      	movs	r0, r3
    4b5c:	4b04      	ldr	r3, [pc, #16]	; (4b70 <system_gclk_chan_set_config+0x3c>)
    4b5e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4b60:	4b04      	ldr	r3, [pc, #16]	; (4b74 <system_gclk_chan_set_config+0x40>)
    4b62:	68fa      	ldr	r2, [r7, #12]
    4b64:	b292      	uxth	r2, r2
    4b66:	805a      	strh	r2, [r3, #2]
}
    4b68:	46c0      	nop			; (mov r8, r8)
    4b6a:	46bd      	mov	sp, r7
    4b6c:	b004      	add	sp, #16
    4b6e:	bd80      	pop	{r7, pc}
    4b70:	00004bc1 	.word	0x00004bc1
    4b74:	40000c00 	.word	0x40000c00

00004b78 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b082      	sub	sp, #8
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	0002      	movs	r2, r0
    4b80:	1dfb      	adds	r3, r7, #7
    4b82:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4b84:	4b0a      	ldr	r3, [pc, #40]	; (4bb0 <system_gclk_chan_enable+0x38>)
    4b86:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b88:	4a0a      	ldr	r2, [pc, #40]	; (4bb4 <system_gclk_chan_enable+0x3c>)
    4b8a:	1dfb      	adds	r3, r7, #7
    4b8c:	781b      	ldrb	r3, [r3, #0]
    4b8e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4b90:	4909      	ldr	r1, [pc, #36]	; (4bb8 <system_gclk_chan_enable+0x40>)
    4b92:	4b09      	ldr	r3, [pc, #36]	; (4bb8 <system_gclk_chan_enable+0x40>)
    4b94:	885b      	ldrh	r3, [r3, #2]
    4b96:	b29b      	uxth	r3, r3
    4b98:	2280      	movs	r2, #128	; 0x80
    4b9a:	01d2      	lsls	r2, r2, #7
    4b9c:	4313      	orrs	r3, r2
    4b9e:	b29b      	uxth	r3, r3
    4ba0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4ba2:	4b06      	ldr	r3, [pc, #24]	; (4bbc <system_gclk_chan_enable+0x44>)
    4ba4:	4798      	blx	r3
}
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	46bd      	mov	sp, r7
    4baa:	b002      	add	sp, #8
    4bac:	bd80      	pop	{r7, pc}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	00004865 	.word	0x00004865
    4bb4:	40000c02 	.word	0x40000c02
    4bb8:	40000c00 	.word	0x40000c00
    4bbc:	00004879 	.word	0x00004879

00004bc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4bc0:	b580      	push	{r7, lr}
    4bc2:	b084      	sub	sp, #16
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	0002      	movs	r2, r0
    4bc8:	1dfb      	adds	r3, r7, #7
    4bca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4bcc:	4b1c      	ldr	r3, [pc, #112]	; (4c40 <system_gclk_chan_disable+0x80>)
    4bce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4bd0:	4a1c      	ldr	r2, [pc, #112]	; (4c44 <system_gclk_chan_disable+0x84>)
    4bd2:	1dfb      	adds	r3, r7, #7
    4bd4:	781b      	ldrb	r3, [r3, #0]
    4bd6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4bd8:	4b1b      	ldr	r3, [pc, #108]	; (4c48 <system_gclk_chan_disable+0x88>)
    4bda:	885b      	ldrh	r3, [r3, #2]
    4bdc:	051b      	lsls	r3, r3, #20
    4bde:	0f1b      	lsrs	r3, r3, #28
    4be0:	b2db      	uxtb	r3, r3
    4be2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4be4:	4a18      	ldr	r2, [pc, #96]	; (4c48 <system_gclk_chan_disable+0x88>)
    4be6:	8853      	ldrh	r3, [r2, #2]
    4be8:	4918      	ldr	r1, [pc, #96]	; (4c4c <system_gclk_chan_disable+0x8c>)
    4bea:	400b      	ands	r3, r1
    4bec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4bee:	4a16      	ldr	r2, [pc, #88]	; (4c48 <system_gclk_chan_disable+0x88>)
    4bf0:	4b15      	ldr	r3, [pc, #84]	; (4c48 <system_gclk_chan_disable+0x88>)
    4bf2:	885b      	ldrh	r3, [r3, #2]
    4bf4:	b29b      	uxth	r3, r3
    4bf6:	4916      	ldr	r1, [pc, #88]	; (4c50 <system_gclk_chan_disable+0x90>)
    4bf8:	400b      	ands	r3, r1
    4bfa:	b29b      	uxth	r3, r3
    4bfc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	4b11      	ldr	r3, [pc, #68]	; (4c48 <system_gclk_chan_disable+0x88>)
    4c02:	885b      	ldrh	r3, [r3, #2]
    4c04:	b29b      	uxth	r3, r3
    4c06:	001a      	movs	r2, r3
    4c08:	2380      	movs	r3, #128	; 0x80
    4c0a:	01db      	lsls	r3, r3, #7
    4c0c:	4013      	ands	r3, r2
    4c0e:	d1f7      	bne.n	4c00 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4c10:	4a0d      	ldr	r2, [pc, #52]	; (4c48 <system_gclk_chan_disable+0x88>)
    4c12:	68fb      	ldr	r3, [r7, #12]
    4c14:	b2db      	uxtb	r3, r3
    4c16:	1c19      	adds	r1, r3, #0
    4c18:	230f      	movs	r3, #15
    4c1a:	400b      	ands	r3, r1
    4c1c:	b2d9      	uxtb	r1, r3
    4c1e:	8853      	ldrh	r3, [r2, #2]
    4c20:	1c08      	adds	r0, r1, #0
    4c22:	210f      	movs	r1, #15
    4c24:	4001      	ands	r1, r0
    4c26:	0208      	lsls	r0, r1, #8
    4c28:	4908      	ldr	r1, [pc, #32]	; (4c4c <system_gclk_chan_disable+0x8c>)
    4c2a:	400b      	ands	r3, r1
    4c2c:	1c19      	adds	r1, r3, #0
    4c2e:	1c03      	adds	r3, r0, #0
    4c30:	430b      	orrs	r3, r1
    4c32:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4c34:	4b07      	ldr	r3, [pc, #28]	; (4c54 <system_gclk_chan_disable+0x94>)
    4c36:	4798      	blx	r3
}
    4c38:	46c0      	nop			; (mov r8, r8)
    4c3a:	46bd      	mov	sp, r7
    4c3c:	b004      	add	sp, #16
    4c3e:	bd80      	pop	{r7, pc}
    4c40:	00004865 	.word	0x00004865
    4c44:	40000c02 	.word	0x40000c02
    4c48:	40000c00 	.word	0x40000c00
    4c4c:	fffff0ff 	.word	0xfffff0ff
    4c50:	ffffbfff 	.word	0xffffbfff
    4c54:	00004879 	.word	0x00004879

00004c58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4c58:	b580      	push	{r7, lr}
    4c5a:	b084      	sub	sp, #16
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	0002      	movs	r2, r0
    4c60:	1dfb      	adds	r3, r7, #7
    4c62:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4c64:	4b0d      	ldr	r3, [pc, #52]	; (4c9c <system_gclk_chan_get_hz+0x44>)
    4c66:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4c68:	4a0d      	ldr	r2, [pc, #52]	; (4ca0 <system_gclk_chan_get_hz+0x48>)
    4c6a:	1dfb      	adds	r3, r7, #7
    4c6c:	781b      	ldrb	r3, [r3, #0]
    4c6e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4c70:	4b0c      	ldr	r3, [pc, #48]	; (4ca4 <system_gclk_chan_get_hz+0x4c>)
    4c72:	885b      	ldrh	r3, [r3, #2]
    4c74:	051b      	lsls	r3, r3, #20
    4c76:	0f1b      	lsrs	r3, r3, #28
    4c78:	b2da      	uxtb	r2, r3
    4c7a:	230f      	movs	r3, #15
    4c7c:	18fb      	adds	r3, r7, r3
    4c7e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4c80:	4b09      	ldr	r3, [pc, #36]	; (4ca8 <system_gclk_chan_get_hz+0x50>)
    4c82:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4c84:	230f      	movs	r3, #15
    4c86:	18fb      	adds	r3, r7, r3
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	0018      	movs	r0, r3
    4c8c:	4b07      	ldr	r3, [pc, #28]	; (4cac <system_gclk_chan_get_hz+0x54>)
    4c8e:	4798      	blx	r3
    4c90:	0003      	movs	r3, r0
}
    4c92:	0018      	movs	r0, r3
    4c94:	46bd      	mov	sp, r7
    4c96:	b004      	add	sp, #16
    4c98:	bd80      	pop	{r7, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	00004865 	.word	0x00004865
    4ca0:	40000c02 	.word	0x40000c02
    4ca4:	40000c00 	.word	0x40000c00
    4ca8:	00004879 	.word	0x00004879
    4cac:	00004a5d 	.word	0x00004a5d

00004cb0 <system_pinmux_get_group_from_gpio_pin>:
{
    4cb0:	b580      	push	{r7, lr}
    4cb2:	b084      	sub	sp, #16
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	0002      	movs	r2, r0
    4cb8:	1dfb      	adds	r3, r7, #7
    4cba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4cbc:	230f      	movs	r3, #15
    4cbe:	18fb      	adds	r3, r7, r3
    4cc0:	1dfa      	adds	r2, r7, #7
    4cc2:	7812      	ldrb	r2, [r2, #0]
    4cc4:	09d2      	lsrs	r2, r2, #7
    4cc6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4cc8:	230e      	movs	r3, #14
    4cca:	18fb      	adds	r3, r7, r3
    4ccc:	1dfa      	adds	r2, r7, #7
    4cce:	7812      	ldrb	r2, [r2, #0]
    4cd0:	0952      	lsrs	r2, r2, #5
    4cd2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4cd4:	4b0d      	ldr	r3, [pc, #52]	; (4d0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4cd6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4cd8:	230f      	movs	r3, #15
    4cda:	18fb      	adds	r3, r7, r3
    4cdc:	781b      	ldrb	r3, [r3, #0]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d10f      	bne.n	4d02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4ce2:	230f      	movs	r3, #15
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	781b      	ldrb	r3, [r3, #0]
    4ce8:	009b      	lsls	r3, r3, #2
    4cea:	2210      	movs	r2, #16
    4cec:	4694      	mov	ip, r2
    4cee:	44bc      	add	ip, r7
    4cf0:	4463      	add	r3, ip
    4cf2:	3b08      	subs	r3, #8
    4cf4:	681a      	ldr	r2, [r3, #0]
    4cf6:	230e      	movs	r3, #14
    4cf8:	18fb      	adds	r3, r7, r3
    4cfa:	781b      	ldrb	r3, [r3, #0]
    4cfc:	01db      	lsls	r3, r3, #7
    4cfe:	18d3      	adds	r3, r2, r3
    4d00:	e000      	b.n	4d04 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4d02:	2300      	movs	r3, #0
}
    4d04:	0018      	movs	r0, r3
    4d06:	46bd      	mov	sp, r7
    4d08:	b004      	add	sp, #16
    4d0a:	bd80      	pop	{r7, pc}
    4d0c:	41004400 	.word	0x41004400

00004d10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4d10:	b580      	push	{r7, lr}
    4d12:	b088      	sub	sp, #32
    4d14:	af00      	add	r7, sp, #0
    4d16:	60f8      	str	r0, [r7, #12]
    4d18:	60b9      	str	r1, [r7, #8]
    4d1a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4d1c:	2300      	movs	r3, #0
    4d1e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	78db      	ldrb	r3, [r3, #3]
    4d24:	2201      	movs	r2, #1
    4d26:	4053      	eors	r3, r2
    4d28:	b2db      	uxtb	r3, r3
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d035      	beq.n	4d9a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4d2e:	687b      	ldr	r3, [r7, #4]
    4d30:	781b      	ldrb	r3, [r3, #0]
    4d32:	2b80      	cmp	r3, #128	; 0x80
    4d34:	d00b      	beq.n	4d4e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4d36:	69fb      	ldr	r3, [r7, #28]
    4d38:	2280      	movs	r2, #128	; 0x80
    4d3a:	0252      	lsls	r2, r2, #9
    4d3c:	4313      	orrs	r3, r2
    4d3e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	781b      	ldrb	r3, [r3, #0]
    4d44:	061b      	lsls	r3, r3, #24
    4d46:	001a      	movs	r2, r3
    4d48:	69fb      	ldr	r3, [r7, #28]
    4d4a:	4313      	orrs	r3, r2
    4d4c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	785b      	ldrb	r3, [r3, #1]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d003      	beq.n	4d5e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4d5a:	2b02      	cmp	r3, #2
    4d5c:	d110      	bne.n	4d80 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4d5e:	69fb      	ldr	r3, [r7, #28]
    4d60:	2280      	movs	r2, #128	; 0x80
    4d62:	0292      	lsls	r2, r2, #10
    4d64:	4313      	orrs	r3, r2
    4d66:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	789b      	ldrb	r3, [r3, #2]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d004      	beq.n	4d7a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4d70:	69fb      	ldr	r3, [r7, #28]
    4d72:	2280      	movs	r2, #128	; 0x80
    4d74:	02d2      	lsls	r2, r2, #11
    4d76:	4313      	orrs	r3, r2
    4d78:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4d7a:	68fb      	ldr	r3, [r7, #12]
    4d7c:	68ba      	ldr	r2, [r7, #8]
    4d7e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	785b      	ldrb	r3, [r3, #1]
    4d84:	2b01      	cmp	r3, #1
    4d86:	d003      	beq.n	4d90 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4d8c:	2b02      	cmp	r3, #2
    4d8e:	d107      	bne.n	4da0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4d90:	69fb      	ldr	r3, [r7, #28]
    4d92:	4a22      	ldr	r2, [pc, #136]	; (4e1c <_system_pinmux_config+0x10c>)
    4d94:	4013      	ands	r3, r2
    4d96:	61fb      	str	r3, [r7, #28]
    4d98:	e002      	b.n	4da0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4d9a:	68fb      	ldr	r3, [r7, #12]
    4d9c:	68ba      	ldr	r2, [r7, #8]
    4d9e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4da0:	68bb      	ldr	r3, [r7, #8]
    4da2:	041b      	lsls	r3, r3, #16
    4da4:	0c1b      	lsrs	r3, r3, #16
    4da6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4da8:	68bb      	ldr	r3, [r7, #8]
    4daa:	0c1b      	lsrs	r3, r3, #16
    4dac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dae:	69ba      	ldr	r2, [r7, #24]
    4db0:	69fb      	ldr	r3, [r7, #28]
    4db2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4db4:	22a0      	movs	r2, #160	; 0xa0
    4db6:	05d2      	lsls	r2, r2, #23
    4db8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dba:	68fb      	ldr	r3, [r7, #12]
    4dbc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dbe:	697a      	ldr	r2, [r7, #20]
    4dc0:	69fb      	ldr	r3, [r7, #28]
    4dc2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4dc4:	22d0      	movs	r2, #208	; 0xd0
    4dc6:	0612      	lsls	r2, r2, #24
    4dc8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	78db      	ldrb	r3, [r3, #3]
    4dd2:	2201      	movs	r2, #1
    4dd4:	4053      	eors	r3, r2
    4dd6:	b2db      	uxtb	r3, r3
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d01a      	beq.n	4e12 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4ddc:	69fa      	ldr	r2, [r7, #28]
    4dde:	2380      	movs	r3, #128	; 0x80
    4de0:	02db      	lsls	r3, r3, #11
    4de2:	4013      	ands	r3, r2
    4de4:	d00a      	beq.n	4dfc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	789b      	ldrb	r3, [r3, #2]
    4dea:	2b01      	cmp	r3, #1
    4dec:	d103      	bne.n	4df6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	68ba      	ldr	r2, [r7, #8]
    4df2:	619a      	str	r2, [r3, #24]
    4df4:	e002      	b.n	4dfc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4df6:	68fb      	ldr	r3, [r7, #12]
    4df8:	68ba      	ldr	r2, [r7, #8]
    4dfa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	785b      	ldrb	r3, [r3, #1]
    4e00:	2b01      	cmp	r3, #1
    4e02:	d003      	beq.n	4e0c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4e08:	2b02      	cmp	r3, #2
    4e0a:	d102      	bne.n	4e12 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	68ba      	ldr	r2, [r7, #8]
    4e10:	609a      	str	r2, [r3, #8]
		}
	}
}
    4e12:	46c0      	nop			; (mov r8, r8)
    4e14:	46bd      	mov	sp, r7
    4e16:	b008      	add	sp, #32
    4e18:	bd80      	pop	{r7, pc}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	fffbffff 	.word	0xfffbffff

00004e20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4e20:	b580      	push	{r7, lr}
    4e22:	b084      	sub	sp, #16
    4e24:	af00      	add	r7, sp, #0
    4e26:	0002      	movs	r2, r0
    4e28:	6039      	str	r1, [r7, #0]
    4e2a:	1dfb      	adds	r3, r7, #7
    4e2c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4e2e:	1dfb      	adds	r3, r7, #7
    4e30:	781b      	ldrb	r3, [r3, #0]
    4e32:	0018      	movs	r0, r3
    4e34:	4b0a      	ldr	r3, [pc, #40]	; (4e60 <system_pinmux_pin_set_config+0x40>)
    4e36:	4798      	blx	r3
    4e38:	0003      	movs	r3, r0
    4e3a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4e3c:	1dfb      	adds	r3, r7, #7
    4e3e:	781b      	ldrb	r3, [r3, #0]
    4e40:	221f      	movs	r2, #31
    4e42:	4013      	ands	r3, r2
    4e44:	2201      	movs	r2, #1
    4e46:	409a      	lsls	r2, r3
    4e48:	0013      	movs	r3, r2
    4e4a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4e4c:	683a      	ldr	r2, [r7, #0]
    4e4e:	68b9      	ldr	r1, [r7, #8]
    4e50:	68fb      	ldr	r3, [r7, #12]
    4e52:	0018      	movs	r0, r3
    4e54:	4b03      	ldr	r3, [pc, #12]	; (4e64 <system_pinmux_pin_set_config+0x44>)
    4e56:	4798      	blx	r3
}
    4e58:	46c0      	nop			; (mov r8, r8)
    4e5a:	46bd      	mov	sp, r7
    4e5c:	b004      	add	sp, #16
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	00004cb1 	.word	0x00004cb1
    4e64:	00004d11 	.word	0x00004d11

00004e68 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	af00      	add	r7, sp, #0
	return;
    4e6c:	46c0      	nop			; (mov r8, r8)
}
    4e6e:	46bd      	mov	sp, r7
    4e70:	bd80      	pop	{r7, pc}
	...

00004e74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4e78:	4b06      	ldr	r3, [pc, #24]	; (4e94 <system_init+0x20>)
    4e7a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4e7c:	4b06      	ldr	r3, [pc, #24]	; (4e98 <system_init+0x24>)
    4e7e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <system_init+0x28>)
    4e82:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4e84:	4b06      	ldr	r3, [pc, #24]	; (4ea0 <system_init+0x2c>)
    4e86:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4e88:	4b06      	ldr	r3, [pc, #24]	; (4ea4 <system_init+0x30>)
    4e8a:	4798      	blx	r3
}
    4e8c:	46c0      	nop			; (mov r8, r8)
    4e8e:	46bd      	mov	sp, r7
    4e90:	bd80      	pop	{r7, pc}
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	00004735 	.word	0x00004735
    4e98:	00002f4d 	.word	0x00002f4d
    4e9c:	00004e69 	.word	0x00004e69
    4ea0:	00004e69 	.word	0x00004e69
    4ea4:	00004e69 	.word	0x00004e69

00004ea8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4ea8:	b580      	push	{r7, lr}
    4eaa:	b082      	sub	sp, #8
    4eac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4eae:	4b2f      	ldr	r3, [pc, #188]	; (4f6c <Reset_Handler+0xc4>)
    4eb0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4eb2:	4b2f      	ldr	r3, [pc, #188]	; (4f70 <Reset_Handler+0xc8>)
    4eb4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4eb6:	687a      	ldr	r2, [r7, #4]
    4eb8:	683b      	ldr	r3, [r7, #0]
    4eba:	429a      	cmp	r2, r3
    4ebc:	d00c      	beq.n	4ed8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4ebe:	e007      	b.n	4ed0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4ec0:	683b      	ldr	r3, [r7, #0]
    4ec2:	1d1a      	adds	r2, r3, #4
    4ec4:	603a      	str	r2, [r7, #0]
    4ec6:	687a      	ldr	r2, [r7, #4]
    4ec8:	1d11      	adds	r1, r2, #4
    4eca:	6079      	str	r1, [r7, #4]
    4ecc:	6812      	ldr	r2, [r2, #0]
    4ece:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4ed0:	683a      	ldr	r2, [r7, #0]
    4ed2:	4b28      	ldr	r3, [pc, #160]	; (4f74 <Reset_Handler+0xcc>)
    4ed4:	429a      	cmp	r2, r3
    4ed6:	d3f3      	bcc.n	4ec0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4ed8:	4b27      	ldr	r3, [pc, #156]	; (4f78 <Reset_Handler+0xd0>)
    4eda:	603b      	str	r3, [r7, #0]
    4edc:	e004      	b.n	4ee8 <Reset_Handler+0x40>
                *pDest++ = 0;
    4ede:	683b      	ldr	r3, [r7, #0]
    4ee0:	1d1a      	adds	r2, r3, #4
    4ee2:	603a      	str	r2, [r7, #0]
    4ee4:	2200      	movs	r2, #0
    4ee6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    4ee8:	683a      	ldr	r2, [r7, #0]
    4eea:	4b24      	ldr	r3, [pc, #144]	; (4f7c <Reset_Handler+0xd4>)
    4eec:	429a      	cmp	r2, r3
    4eee:	d3f6      	bcc.n	4ede <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4ef0:	4b23      	ldr	r3, [pc, #140]	; (4f80 <Reset_Handler+0xd8>)
    4ef2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4ef4:	4b23      	ldr	r3, [pc, #140]	; (4f84 <Reset_Handler+0xdc>)
    4ef6:	687a      	ldr	r2, [r7, #4]
    4ef8:	21ff      	movs	r1, #255	; 0xff
    4efa:	438a      	bics	r2, r1
    4efc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4efe:	4a22      	ldr	r2, [pc, #136]	; (4f88 <Reset_Handler+0xe0>)
    4f00:	2390      	movs	r3, #144	; 0x90
    4f02:	005b      	lsls	r3, r3, #1
    4f04:	2102      	movs	r1, #2
    4f06:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4f08:	4a20      	ldr	r2, [pc, #128]	; (4f8c <Reset_Handler+0xe4>)
    4f0a:	78d3      	ldrb	r3, [r2, #3]
    4f0c:	2103      	movs	r1, #3
    4f0e:	438b      	bics	r3, r1
    4f10:	1c19      	adds	r1, r3, #0
    4f12:	2302      	movs	r3, #2
    4f14:	430b      	orrs	r3, r1
    4f16:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4f18:	4a1c      	ldr	r2, [pc, #112]	; (4f8c <Reset_Handler+0xe4>)
    4f1a:	78d3      	ldrb	r3, [r2, #3]
    4f1c:	210c      	movs	r1, #12
    4f1e:	438b      	bics	r3, r1
    4f20:	1c19      	adds	r1, r3, #0
    4f22:	2308      	movs	r3, #8
    4f24:	430b      	orrs	r3, r1
    4f26:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    4f28:	4a19      	ldr	r2, [pc, #100]	; (4f90 <Reset_Handler+0xe8>)
    4f2a:	7b93      	ldrb	r3, [r2, #14]
    4f2c:	2130      	movs	r1, #48	; 0x30
    4f2e:	438b      	bics	r3, r1
    4f30:	1c19      	adds	r1, r3, #0
    4f32:	2320      	movs	r3, #32
    4f34:	430b      	orrs	r3, r1
    4f36:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4f38:	4a15      	ldr	r2, [pc, #84]	; (4f90 <Reset_Handler+0xe8>)
    4f3a:	7b93      	ldrb	r3, [r2, #14]
    4f3c:	210c      	movs	r1, #12
    4f3e:	438b      	bics	r3, r1
    4f40:	1c19      	adds	r1, r3, #0
    4f42:	2308      	movs	r3, #8
    4f44:	430b      	orrs	r3, r1
    4f46:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4f48:	4a11      	ldr	r2, [pc, #68]	; (4f90 <Reset_Handler+0xe8>)
    4f4a:	7b93      	ldrb	r3, [r2, #14]
    4f4c:	2103      	movs	r1, #3
    4f4e:	438b      	bics	r3, r1
    4f50:	1c19      	adds	r1, r3, #0
    4f52:	2302      	movs	r3, #2
    4f54:	430b      	orrs	r3, r1
    4f56:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4f58:	4a0e      	ldr	r2, [pc, #56]	; (4f94 <Reset_Handler+0xec>)
    4f5a:	6853      	ldr	r3, [r2, #4]
    4f5c:	2180      	movs	r1, #128	; 0x80
    4f5e:	430b      	orrs	r3, r1
    4f60:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4f62:	4b0d      	ldr	r3, [pc, #52]	; (4f98 <Reset_Handler+0xf0>)
    4f64:	4798      	blx	r3

        /* Branch to main function */
        main();
    4f66:	4b0d      	ldr	r3, [pc, #52]	; (4f9c <Reset_Handler+0xf4>)
    4f68:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4f6a:	e7fe      	b.n	4f6a <Reset_Handler+0xc2>
    4f6c:	00005688 	.word	0x00005688
    4f70:	20000000 	.word	0x20000000
    4f74:	20000010 	.word	0x20000010
    4f78:	20000010 	.word	0x20000010
    4f7c:	200000d4 	.word	0x200000d4
    4f80:	00002000 	.word	0x00002000
    4f84:	e000ed00 	.word	0xe000ed00
    4f88:	41007000 	.word	0x41007000
    4f8c:	41005000 	.word	0x41005000
    4f90:	41004800 	.word	0x41004800
    4f94:	41004000 	.word	0x41004000
    4f98:	00005559 	.word	0x00005559
    4f9c:	0000531d 	.word	0x0000531d

00004fa0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	af00      	add	r7, sp, #0
        while (1) {
    4fa4:	e7fe      	b.n	4fa4 <Dummy_Handler+0x4>
	...

00004fa8 <system_pinmux_get_group_from_gpio_pin>:
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b084      	sub	sp, #16
    4fac:	af00      	add	r7, sp, #0
    4fae:	0002      	movs	r2, r0
    4fb0:	1dfb      	adds	r3, r7, #7
    4fb2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4fb4:	230f      	movs	r3, #15
    4fb6:	18fb      	adds	r3, r7, r3
    4fb8:	1dfa      	adds	r2, r7, #7
    4fba:	7812      	ldrb	r2, [r2, #0]
    4fbc:	09d2      	lsrs	r2, r2, #7
    4fbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4fc0:	230e      	movs	r3, #14
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	1dfa      	adds	r2, r7, #7
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	0952      	lsrs	r2, r2, #5
    4fca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4fcc:	4b0d      	ldr	r3, [pc, #52]	; (5004 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4fce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4fd0:	230f      	movs	r3, #15
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	781b      	ldrb	r3, [r3, #0]
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d10f      	bne.n	4ffa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4fda:	230f      	movs	r3, #15
    4fdc:	18fb      	adds	r3, r7, r3
    4fde:	781b      	ldrb	r3, [r3, #0]
    4fe0:	009b      	lsls	r3, r3, #2
    4fe2:	2210      	movs	r2, #16
    4fe4:	4694      	mov	ip, r2
    4fe6:	44bc      	add	ip, r7
    4fe8:	4463      	add	r3, ip
    4fea:	3b08      	subs	r3, #8
    4fec:	681a      	ldr	r2, [r3, #0]
    4fee:	230e      	movs	r3, #14
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	781b      	ldrb	r3, [r3, #0]
    4ff4:	01db      	lsls	r3, r3, #7
    4ff6:	18d3      	adds	r3, r2, r3
    4ff8:	e000      	b.n	4ffc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4ffa:	2300      	movs	r3, #0
}
    4ffc:	0018      	movs	r0, r3
    4ffe:	46bd      	mov	sp, r7
    5000:	b004      	add	sp, #16
    5002:	bd80      	pop	{r7, pc}
    5004:	41004400 	.word	0x41004400

00005008 <port_get_group_from_gpio_pin>:
{
    5008:	b580      	push	{r7, lr}
    500a:	b082      	sub	sp, #8
    500c:	af00      	add	r7, sp, #0
    500e:	0002      	movs	r2, r0
    5010:	1dfb      	adds	r3, r7, #7
    5012:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5014:	1dfb      	adds	r3, r7, #7
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	0018      	movs	r0, r3
    501a:	4b03      	ldr	r3, [pc, #12]	; (5028 <port_get_group_from_gpio_pin+0x20>)
    501c:	4798      	blx	r3
    501e:	0003      	movs	r3, r0
}
    5020:	0018      	movs	r0, r3
    5022:	46bd      	mov	sp, r7
    5024:	b002      	add	sp, #8
    5026:	bd80      	pop	{r7, pc}
    5028:	00004fa9 	.word	0x00004fa9

0000502c <port_get_config_defaults>:
{
    502c:	b580      	push	{r7, lr}
    502e:	b082      	sub	sp, #8
    5030:	af00      	add	r7, sp, #0
    5032:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	2200      	movs	r2, #0
    5038:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	2201      	movs	r2, #1
    503e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2200      	movs	r2, #0
    5044:	709a      	strb	r2, [r3, #2]
}
    5046:	46c0      	nop			; (mov r8, r8)
    5048:	46bd      	mov	sp, r7
    504a:	b002      	add	sp, #8
    504c:	bd80      	pop	{r7, pc}
	...

00005050 <port_pin_get_input_level>:
{
    5050:	b580      	push	{r7, lr}
    5052:	b084      	sub	sp, #16
    5054:	af00      	add	r7, sp, #0
    5056:	0002      	movs	r2, r0
    5058:	1dfb      	adds	r3, r7, #7
    505a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    505c:	1dfb      	adds	r3, r7, #7
    505e:	781b      	ldrb	r3, [r3, #0]
    5060:	0018      	movs	r0, r3
    5062:	4b0b      	ldr	r3, [pc, #44]	; (5090 <port_pin_get_input_level+0x40>)
    5064:	4798      	blx	r3
    5066:	0003      	movs	r3, r0
    5068:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    506a:	1dfb      	adds	r3, r7, #7
    506c:	781b      	ldrb	r3, [r3, #0]
    506e:	221f      	movs	r2, #31
    5070:	4013      	ands	r3, r2
    5072:	2201      	movs	r2, #1
    5074:	409a      	lsls	r2, r3
    5076:	0013      	movs	r3, r2
    5078:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    507a:	68fb      	ldr	r3, [r7, #12]
    507c:	6a1b      	ldr	r3, [r3, #32]
    507e:	68ba      	ldr	r2, [r7, #8]
    5080:	4013      	ands	r3, r2
    5082:	1e5a      	subs	r2, r3, #1
    5084:	4193      	sbcs	r3, r2
    5086:	b2db      	uxtb	r3, r3
}
    5088:	0018      	movs	r0, r3
    508a:	46bd      	mov	sp, r7
    508c:	b004      	add	sp, #16
    508e:	bd80      	pop	{r7, pc}
    5090:	00005009 	.word	0x00005009

00005094 <port_pin_set_output_level>:
{
    5094:	b580      	push	{r7, lr}
    5096:	b084      	sub	sp, #16
    5098:	af00      	add	r7, sp, #0
    509a:	0002      	movs	r2, r0
    509c:	1dfb      	adds	r3, r7, #7
    509e:	701a      	strb	r2, [r3, #0]
    50a0:	1dbb      	adds	r3, r7, #6
    50a2:	1c0a      	adds	r2, r1, #0
    50a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    50a6:	1dfb      	adds	r3, r7, #7
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	0018      	movs	r0, r3
    50ac:	4b0d      	ldr	r3, [pc, #52]	; (50e4 <port_pin_set_output_level+0x50>)
    50ae:	4798      	blx	r3
    50b0:	0003      	movs	r3, r0
    50b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    50b4:	1dfb      	adds	r3, r7, #7
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	221f      	movs	r2, #31
    50ba:	4013      	ands	r3, r2
    50bc:	2201      	movs	r2, #1
    50be:	409a      	lsls	r2, r3
    50c0:	0013      	movs	r3, r2
    50c2:	60bb      	str	r3, [r7, #8]
	if (level) {
    50c4:	1dbb      	adds	r3, r7, #6
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	2b00      	cmp	r3, #0
    50ca:	d003      	beq.n	50d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	68ba      	ldr	r2, [r7, #8]
    50d0:	619a      	str	r2, [r3, #24]
}
    50d2:	e002      	b.n	50da <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    50d4:	68fb      	ldr	r3, [r7, #12]
    50d6:	68ba      	ldr	r2, [r7, #8]
    50d8:	615a      	str	r2, [r3, #20]
}
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	46bd      	mov	sp, r7
    50de:	b004      	add	sp, #16
    50e0:	bd80      	pop	{r7, pc}
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	00005009 	.word	0x00005009

000050e8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
    50ee:	0002      	movs	r2, r0
    50f0:	1dfb      	adds	r3, r7, #7
    50f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    50f4:	4b06      	ldr	r3, [pc, #24]	; (5110 <system_interrupt_enable+0x28>)
    50f6:	1dfa      	adds	r2, r7, #7
    50f8:	7812      	ldrb	r2, [r2, #0]
    50fa:	0011      	movs	r1, r2
    50fc:	221f      	movs	r2, #31
    50fe:	400a      	ands	r2, r1
    5100:	2101      	movs	r1, #1
    5102:	4091      	lsls	r1, r2
    5104:	000a      	movs	r2, r1
    5106:	601a      	str	r2, [r3, #0]
}
    5108:	46c0      	nop			; (mov r8, r8)
    510a:	46bd      	mov	sp, r7
    510c:	b002      	add	sp, #8
    510e:	bd80      	pop	{r7, pc}
    5110:	e000e100 	.word	0xe000e100

00005114 <spi_is_syncing>:
{
    5114:	b580      	push	{r7, lr}
    5116:	b084      	sub	sp, #16
    5118:	af00      	add	r7, sp, #0
    511a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	69db      	ldr	r3, [r3, #28]
    5126:	1e5a      	subs	r2, r3, #1
    5128:	4193      	sbcs	r3, r2
    512a:	b2db      	uxtb	r3, r3
}
    512c:	0018      	movs	r0, r3
    512e:	46bd      	mov	sp, r7
    5130:	b004      	add	sp, #16
    5132:	bd80      	pop	{r7, pc}

00005134 <spi_get_config_defaults>:
{
    5134:	b580      	push	{r7, lr}
    5136:	b082      	sub	sp, #8
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    513c:	687b      	ldr	r3, [r7, #4]
    513e:	2201      	movs	r2, #1
    5140:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	2200      	movs	r2, #0
    5146:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	2200      	movs	r2, #0
    514c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	22c0      	movs	r2, #192	; 0xc0
    5152:	0392      	lsls	r2, r2, #14
    5154:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5156:	687b      	ldr	r3, [r7, #4]
    5158:	2200      	movs	r2, #0
    515a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	2200      	movs	r2, #0
    5160:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    5162:	687b      	ldr	r3, [r7, #4]
    5164:	2201      	movs	r2, #1
    5166:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    5168:	687b      	ldr	r3, [r7, #4]
    516a:	2201      	movs	r2, #1
    516c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	2200      	movs	r2, #0
    5172:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	2224      	movs	r2, #36	; 0x24
    5178:	2100      	movs	r1, #0
    517a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	3318      	adds	r3, #24
    5180:	220c      	movs	r2, #12
    5182:	2100      	movs	r1, #0
    5184:	0018      	movs	r0, r3
    5186:	4b0a      	ldr	r3, [pc, #40]	; (51b0 <spi_get_config_defaults+0x7c>)
    5188:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	4a09      	ldr	r2, [pc, #36]	; (51b4 <spi_get_config_defaults+0x80>)
    518e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	2200      	movs	r2, #0
    5194:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	2200      	movs	r2, #0
    519a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	2200      	movs	r2, #0
    51a0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	2200      	movs	r2, #0
    51a6:	635a      	str	r2, [r3, #52]	; 0x34
};
    51a8:	46c0      	nop			; (mov r8, r8)
    51aa:	46bd      	mov	sp, r7
    51ac:	b002      	add	sp, #8
    51ae:	bd80      	pop	{r7, pc}
    51b0:	000055a1 	.word	0x000055a1
    51b4:	000186a0 	.word	0x000186a0

000051b8 <spi_enable>:
{
    51b8:	b580      	push	{r7, lr}
    51ba:	b084      	sub	sp, #16
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	681b      	ldr	r3, [r3, #0]
    51c4:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    51c6:	687b      	ldr	r3, [r7, #4]
    51c8:	681b      	ldr	r3, [r3, #0]
    51ca:	0018      	movs	r0, r3
    51cc:	4b0b      	ldr	r3, [pc, #44]	; (51fc <spi_enable+0x44>)
    51ce:	4798      	blx	r3
    51d0:	0003      	movs	r3, r0
    51d2:	0018      	movs	r0, r3
    51d4:	4b0a      	ldr	r3, [pc, #40]	; (5200 <spi_enable+0x48>)
    51d6:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    51d8:	46c0      	nop			; (mov r8, r8)
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	0018      	movs	r0, r3
    51de:	4b09      	ldr	r3, [pc, #36]	; (5204 <spi_enable+0x4c>)
    51e0:	4798      	blx	r3
    51e2:	1e03      	subs	r3, r0, #0
    51e4:	d1f9      	bne.n	51da <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    51e6:	68fb      	ldr	r3, [r7, #12]
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	2202      	movs	r2, #2
    51ec:	431a      	orrs	r2, r3
    51ee:	68fb      	ldr	r3, [r7, #12]
    51f0:	601a      	str	r2, [r3, #0]
}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	46bd      	mov	sp, r7
    51f6:	b004      	add	sp, #16
    51f8:	bd80      	pop	{r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	00003399 	.word	0x00003399
    5200:	000050e9 	.word	0x000050e9
    5204:	00005115 	.word	0x00005115

00005208 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    5208:	b580      	push	{r7, lr}
    520a:	b086      	sub	sp, #24
    520c:	af00      	add	r7, sp, #0
    520e:	60f8      	str	r0, [r7, #12]
    5210:	60b9      	str	r1, [r7, #8]
    5212:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	781a      	ldrb	r2, [r3, #0]
    5218:	68fb      	ldr	r3, [r7, #12]
    521a:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	785a      	ldrb	r2, [r3, #1]
    5220:	68fb      	ldr	r3, [r7, #12]
    5222:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    5224:	68fb      	ldr	r3, [r7, #12]
    5226:	68ba      	ldr	r2, [r7, #8]
    5228:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    522a:	2314      	movs	r3, #20
    522c:	18fb      	adds	r3, r7, r3
    522e:	0018      	movs	r0, r3
    5230:	4b0c      	ldr	r3, [pc, #48]	; (5264 <at25dfx_chip_init+0x5c>)
    5232:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    5234:	2314      	movs	r3, #20
    5236:	18fb      	adds	r3, r7, r3
    5238:	2201      	movs	r2, #1
    523a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    523c:	68fb      	ldr	r3, [r7, #12]
    523e:	795b      	ldrb	r3, [r3, #5]
    5240:	2214      	movs	r2, #20
    5242:	18ba      	adds	r2, r7, r2
    5244:	0011      	movs	r1, r2
    5246:	0018      	movs	r0, r3
    5248:	4b07      	ldr	r3, [pc, #28]	; (5268 <at25dfx_chip_init+0x60>)
    524a:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	795b      	ldrb	r3, [r3, #5]
    5250:	2101      	movs	r1, #1
    5252:	0018      	movs	r0, r3
    5254:	4b05      	ldr	r3, [pc, #20]	; (526c <at25dfx_chip_init+0x64>)
    5256:	4798      	blx	r3

	return STATUS_OK;
    5258:	2300      	movs	r3, #0
}
    525a:	0018      	movs	r0, r3
    525c:	46bd      	mov	sp, r7
    525e:	b006      	add	sp, #24
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	0000502d 	.word	0x0000502d
    5268:	00002eed 	.word	0x00002eed
    526c:	00005095 	.word	0x00005095

00005270 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    5270:	b590      	push	{r4, r7, lr}
    5272:	b091      	sub	sp, #68	; 0x44
    5274:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    5276:	1d3b      	adds	r3, r7, #4
    5278:	0018      	movs	r0, r3
    527a:	4b1d      	ldr	r3, [pc, #116]	; (52f0 <at25dfx_init+0x80>)
    527c:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    527e:	1d3b      	adds	r3, r7, #4
    5280:	4a1c      	ldr	r2, [pc, #112]	; (52f4 <at25dfx_init+0x84>)
    5282:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    5284:	1d3b      	adds	r3, r7, #4
    5286:	2280      	movs	r2, #128	; 0x80
    5288:	0252      	lsls	r2, r2, #9
    528a:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    528c:	1d3b      	adds	r3, r7, #4
    528e:	4a1a      	ldr	r2, [pc, #104]	; (52f8 <at25dfx_init+0x88>)
    5290:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    5292:	1d3b      	adds	r3, r7, #4
    5294:	2201      	movs	r2, #1
    5296:	4252      	negs	r2, r2
    5298:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    529a:	1d3b      	adds	r3, r7, #4
    529c:	4a17      	ldr	r2, [pc, #92]	; (52fc <at25dfx_init+0x8c>)
    529e:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    52a0:	1d3b      	adds	r3, r7, #4
    52a2:	4a17      	ldr	r2, [pc, #92]	; (5300 <at25dfx_init+0x90>)
    52a4:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    52a6:	233f      	movs	r3, #63	; 0x3f
    52a8:	18fc      	adds	r4, r7, r3
    52aa:	1d3a      	adds	r2, r7, #4
    52ac:	4915      	ldr	r1, [pc, #84]	; (5304 <at25dfx_init+0x94>)
    52ae:	4b16      	ldr	r3, [pc, #88]	; (5308 <at25dfx_init+0x98>)
    52b0:	0018      	movs	r0, r3
    52b2:	4b16      	ldr	r3, [pc, #88]	; (530c <at25dfx_init+0x9c>)
    52b4:	4798      	blx	r3
    52b6:	0003      	movs	r3, r0
    52b8:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    52ba:	4b13      	ldr	r3, [pc, #76]	; (5308 <at25dfx_init+0x98>)
    52bc:	0018      	movs	r0, r3
    52be:	4b14      	ldr	r3, [pc, #80]	; (5310 <at25dfx_init+0xa0>)
    52c0:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    52c2:	233c      	movs	r3, #60	; 0x3c
    52c4:	18fb      	adds	r3, r7, r3
    52c6:	2204      	movs	r2, #4
    52c8:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PIN_PA07; // AT25DFX_CS;
    52ca:	233c      	movs	r3, #60	; 0x3c
    52cc:	18fb      	adds	r3, r7, r3
    52ce:	2207      	movs	r2, #7
    52d0:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    52d2:	233f      	movs	r3, #63	; 0x3f
    52d4:	18fc      	adds	r4, r7, r3
    52d6:	233c      	movs	r3, #60	; 0x3c
    52d8:	18fa      	adds	r2, r7, r3
    52da:	490b      	ldr	r1, [pc, #44]	; (5308 <at25dfx_init+0x98>)
    52dc:	4b0d      	ldr	r3, [pc, #52]	; (5314 <at25dfx_init+0xa4>)
    52de:	0018      	movs	r0, r3
    52e0:	4b0d      	ldr	r3, [pc, #52]	; (5318 <at25dfx_init+0xa8>)
    52e2:	4798      	blx	r3
    52e4:	0003      	movs	r3, r0
    52e6:	7023      	strb	r3, [r4, #0]
}
    52e8:	46c0      	nop			; (mov r8, r8)
    52ea:	46bd      	mov	sp, r7
    52ec:	b011      	add	sp, #68	; 0x44
    52ee:	bd90      	pop	{r4, r7, pc}
    52f0:	00005135 	.word	0x00005135
    52f4:	0001d4c0 	.word	0x0001d4c0
    52f8:	00100002 	.word	0x00100002
    52fc:	00120002 	.word	0x00120002
    5300:	00130002 	.word	0x00130002
    5304:	42000c00 	.word	0x42000c00
    5308:	20000098 	.word	0x20000098
    530c:	000038dd 	.word	0x000038dd
    5310:	000051b9 	.word	0x000051b9
    5314:	20000090 	.word	0x20000090
    5318:	00005209 	.word	0x00005209

0000531c <main>:

int main (void)
{
    531c:	b590      	push	{r4, r7, lr}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
	system_init();
    5322:	4b36      	ldr	r3, [pc, #216]	; (53fc <main+0xe0>)
    5324:	4798      	blx	r3
	at25dfx_init();
    5326:	4b36      	ldr	r3, [pc, #216]	; (5400 <main+0xe4>)
    5328:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	
	// Init Button
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    532a:	1d3b      	adds	r3, r7, #4
    532c:	0018      	movs	r0, r3
    532e:	4b35      	ldr	r3, [pc, #212]	; (5404 <main+0xe8>)
    5330:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    5332:	1d3b      	adds	r3, r7, #4
    5334:	2200      	movs	r2, #0
    5336:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB23, &config_port_pin);
    5338:	1d3b      	adds	r3, r7, #4
    533a:	0019      	movs	r1, r3
    533c:	2037      	movs	r0, #55	; 0x37
    533e:	4b32      	ldr	r3, [pc, #200]	; (5408 <main+0xec>)
    5340:	4798      	blx	r3

	// Init LED
	struct port_config config_port_pin2;
	port_get_config_defaults(&config_port_pin2);
    5342:	003b      	movs	r3, r7
    5344:	0018      	movs	r0, r3
    5346:	4b2f      	ldr	r3, [pc, #188]	; (5404 <main+0xe8>)
    5348:	4798      	blx	r3
	config_port_pin2.direction = PORT_PIN_DIR_OUTPUT;
    534a:	003b      	movs	r3, r7
    534c:	2201      	movs	r2, #1
    534e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA23, &config_port_pin2);
    5350:	003b      	movs	r3, r7
    5352:	0019      	movs	r1, r3
    5354:	2017      	movs	r0, #23
    5356:	4b2c      	ldr	r3, [pc, #176]	; (5408 <main+0xec>)
    5358:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	//while(1) {
		at25dfx_chip_wake(&at25dfx_chip);
    535a:	4b2c      	ldr	r3, [pc, #176]	; (540c <main+0xf0>)
    535c:	0018      	movs	r0, r3
    535e:	4b2c      	ldr	r3, [pc, #176]	; (5410 <main+0xf4>)
    5360:	4798      	blx	r3
		    
		if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    5362:	4b2a      	ldr	r3, [pc, #168]	; (540c <main+0xf0>)
    5364:	0018      	movs	r0, r3
    5366:	4b2b      	ldr	r3, [pc, #172]	; (5414 <main+0xf8>)
    5368:	4798      	blx	r3
    536a:	1e03      	subs	r3, r0, #0
    536c:	d000      	beq.n	5370 <main+0x54>
			// Handle missing or non-responsive device
			while(1) { }
    536e:	e7fe      	b.n	536e <main+0x52>
		}
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    5370:	4a29      	ldr	r2, [pc, #164]	; (5418 <main+0xfc>)
    5372:	4826      	ldr	r0, [pc, #152]	; (540c <main+0xf0>)
    5374:	230a      	movs	r3, #10
    5376:	2100      	movs	r1, #0
    5378:	4c28      	ldr	r4, [pc, #160]	; (541c <main+0x100>)
    537a:	47a0      	blx	r4
		at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    537c:	2380      	movs	r3, #128	; 0x80
    537e:	0259      	lsls	r1, r3, #9
    5380:	4b22      	ldr	r3, [pc, #136]	; (540c <main+0xf0>)
    5382:	2200      	movs	r2, #0
    5384:	0018      	movs	r0, r3
    5386:	4b26      	ldr	r3, [pc, #152]	; (5420 <main+0x104>)
    5388:	4798      	blx	r3
		at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    538a:	2380      	movs	r3, #128	; 0x80
    538c:	0259      	lsls	r1, r3, #9
    538e:	4b1f      	ldr	r3, [pc, #124]	; (540c <main+0xf0>)
    5390:	2200      	movs	r2, #0
    5392:	0018      	movs	r0, r3
    5394:	4b23      	ldr	r3, [pc, #140]	; (5424 <main+0x108>)
    5396:	4798      	blx	r3
		at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    5398:	4a23      	ldr	r2, [pc, #140]	; (5428 <main+0x10c>)
    539a:	2380      	movs	r3, #128	; 0x80
    539c:	0259      	lsls	r1, r3, #9
    539e:	481b      	ldr	r0, [pc, #108]	; (540c <main+0xf0>)
    53a0:	230a      	movs	r3, #10
    53a2:	4c22      	ldr	r4, [pc, #136]	; (542c <main+0x110>)
    53a4:	47a0      	blx	r4
		at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    53a6:	4b19      	ldr	r3, [pc, #100]	; (540c <main+0xf0>)
    53a8:	2101      	movs	r1, #1
    53aa:	0018      	movs	r0, r3
    53ac:	4b20      	ldr	r3, [pc, #128]	; (5430 <main+0x114>)
    53ae:	4798      	blx	r3
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);
    53b0:	4a19      	ldr	r2, [pc, #100]	; (5418 <main+0xfc>)
    53b2:	2380      	movs	r3, #128	; 0x80
    53b4:	0259      	lsls	r1, r3, #9
    53b6:	4815      	ldr	r0, [pc, #84]	; (540c <main+0xf0>)
    53b8:	230a      	movs	r3, #10
    53ba:	4c18      	ldr	r4, [pc, #96]	; (541c <main+0x100>)
    53bc:	47a0      	blx	r4
		at25dfx_chip_sleep(&at25dfx_chip);
    53be:	4b13      	ldr	r3, [pc, #76]	; (540c <main+0xf0>)
    53c0:	0018      	movs	r0, r3
    53c2:	4b1c      	ldr	r3, [pc, #112]	; (5434 <main+0x118>)
    53c4:	4798      	blx	r3
			
		// LED light up with Button Press.
		bool level = port_pin_get_input_level(PIN_PB23);
    53c6:	1dfc      	adds	r4, r7, #7
    53c8:	2037      	movs	r0, #55	; 0x37
    53ca:	4b1b      	ldr	r3, [pc, #108]	; (5438 <main+0x11c>)
    53cc:	4798      	blx	r3
    53ce:	0003      	movs	r3, r0
    53d0:	7023      	strb	r3, [r4, #0]
		if(level == false) {
    53d2:	1dfb      	adds	r3, r7, #7
    53d4:	781b      	ldrb	r3, [r3, #0]
    53d6:	2201      	movs	r2, #1
    53d8:	4053      	eors	r3, r2
    53da:	b2db      	uxtb	r3, r3
    53dc:	2b00      	cmp	r3, #0
    53de:	d004      	beq.n	53ea <main+0xce>
			port_pin_set_output_level(PIN_PA23, false);
    53e0:	2100      	movs	r1, #0
    53e2:	2017      	movs	r0, #23
    53e4:	4b15      	ldr	r3, [pc, #84]	; (543c <main+0x120>)
    53e6:	4798      	blx	r3
    53e8:	e003      	b.n	53f2 <main+0xd6>
		}
		else {
			port_pin_set_output_level(PIN_PA23,  true);
    53ea:	2101      	movs	r1, #1
    53ec:	2017      	movs	r0, #23
    53ee:	4b13      	ldr	r3, [pc, #76]	; (543c <main+0x120>)
    53f0:	4798      	blx	r3
    53f2:	2300      	movs	r3, #0
		}
	//}
}
    53f4:	0018      	movs	r0, r3
    53f6:	46bd      	mov	sp, r7
    53f8:	b003      	add	sp, #12
    53fa:	bd90      	pop	{r4, r7, pc}
    53fc:	00004e75 	.word	0x00004e75
    5400:	00005271 	.word	0x00005271
    5404:	0000502d 	.word	0x0000502d
    5408:	00002eed 	.word	0x00002eed
    540c:	20000090 	.word	0x20000090
    5410:	00002e39 	.word	0x00002e39
    5414:	0000282d 	.word	0x0000282d
    5418:	20000068 	.word	0x20000068
    541c:	000028d9 	.word	0x000028d9
    5420:	00002ce9 	.word	0x00002ce9
    5424:	00002b39 	.word	0x00002b39
    5428:	20000004 	.word	0x20000004
    542c:	00002991 	.word	0x00002991
    5430:	00002c35 	.word	0x00002c35
    5434:	00002dad 	.word	0x00002dad
    5438:	00005051 	.word	0x00005051
    543c:	00005095 	.word	0x00005095

00005440 <__udivsi3>:
    5440:	2200      	movs	r2, #0
    5442:	0843      	lsrs	r3, r0, #1
    5444:	428b      	cmp	r3, r1
    5446:	d374      	bcc.n	5532 <__udivsi3+0xf2>
    5448:	0903      	lsrs	r3, r0, #4
    544a:	428b      	cmp	r3, r1
    544c:	d35f      	bcc.n	550e <__udivsi3+0xce>
    544e:	0a03      	lsrs	r3, r0, #8
    5450:	428b      	cmp	r3, r1
    5452:	d344      	bcc.n	54de <__udivsi3+0x9e>
    5454:	0b03      	lsrs	r3, r0, #12
    5456:	428b      	cmp	r3, r1
    5458:	d328      	bcc.n	54ac <__udivsi3+0x6c>
    545a:	0c03      	lsrs	r3, r0, #16
    545c:	428b      	cmp	r3, r1
    545e:	d30d      	bcc.n	547c <__udivsi3+0x3c>
    5460:	22ff      	movs	r2, #255	; 0xff
    5462:	0209      	lsls	r1, r1, #8
    5464:	ba12      	rev	r2, r2
    5466:	0c03      	lsrs	r3, r0, #16
    5468:	428b      	cmp	r3, r1
    546a:	d302      	bcc.n	5472 <__udivsi3+0x32>
    546c:	1212      	asrs	r2, r2, #8
    546e:	0209      	lsls	r1, r1, #8
    5470:	d065      	beq.n	553e <__udivsi3+0xfe>
    5472:	0b03      	lsrs	r3, r0, #12
    5474:	428b      	cmp	r3, r1
    5476:	d319      	bcc.n	54ac <__udivsi3+0x6c>
    5478:	e000      	b.n	547c <__udivsi3+0x3c>
    547a:	0a09      	lsrs	r1, r1, #8
    547c:	0bc3      	lsrs	r3, r0, #15
    547e:	428b      	cmp	r3, r1
    5480:	d301      	bcc.n	5486 <__udivsi3+0x46>
    5482:	03cb      	lsls	r3, r1, #15
    5484:	1ac0      	subs	r0, r0, r3
    5486:	4152      	adcs	r2, r2
    5488:	0b83      	lsrs	r3, r0, #14
    548a:	428b      	cmp	r3, r1
    548c:	d301      	bcc.n	5492 <__udivsi3+0x52>
    548e:	038b      	lsls	r3, r1, #14
    5490:	1ac0      	subs	r0, r0, r3
    5492:	4152      	adcs	r2, r2
    5494:	0b43      	lsrs	r3, r0, #13
    5496:	428b      	cmp	r3, r1
    5498:	d301      	bcc.n	549e <__udivsi3+0x5e>
    549a:	034b      	lsls	r3, r1, #13
    549c:	1ac0      	subs	r0, r0, r3
    549e:	4152      	adcs	r2, r2
    54a0:	0b03      	lsrs	r3, r0, #12
    54a2:	428b      	cmp	r3, r1
    54a4:	d301      	bcc.n	54aa <__udivsi3+0x6a>
    54a6:	030b      	lsls	r3, r1, #12
    54a8:	1ac0      	subs	r0, r0, r3
    54aa:	4152      	adcs	r2, r2
    54ac:	0ac3      	lsrs	r3, r0, #11
    54ae:	428b      	cmp	r3, r1
    54b0:	d301      	bcc.n	54b6 <__udivsi3+0x76>
    54b2:	02cb      	lsls	r3, r1, #11
    54b4:	1ac0      	subs	r0, r0, r3
    54b6:	4152      	adcs	r2, r2
    54b8:	0a83      	lsrs	r3, r0, #10
    54ba:	428b      	cmp	r3, r1
    54bc:	d301      	bcc.n	54c2 <__udivsi3+0x82>
    54be:	028b      	lsls	r3, r1, #10
    54c0:	1ac0      	subs	r0, r0, r3
    54c2:	4152      	adcs	r2, r2
    54c4:	0a43      	lsrs	r3, r0, #9
    54c6:	428b      	cmp	r3, r1
    54c8:	d301      	bcc.n	54ce <__udivsi3+0x8e>
    54ca:	024b      	lsls	r3, r1, #9
    54cc:	1ac0      	subs	r0, r0, r3
    54ce:	4152      	adcs	r2, r2
    54d0:	0a03      	lsrs	r3, r0, #8
    54d2:	428b      	cmp	r3, r1
    54d4:	d301      	bcc.n	54da <__udivsi3+0x9a>
    54d6:	020b      	lsls	r3, r1, #8
    54d8:	1ac0      	subs	r0, r0, r3
    54da:	4152      	adcs	r2, r2
    54dc:	d2cd      	bcs.n	547a <__udivsi3+0x3a>
    54de:	09c3      	lsrs	r3, r0, #7
    54e0:	428b      	cmp	r3, r1
    54e2:	d301      	bcc.n	54e8 <__udivsi3+0xa8>
    54e4:	01cb      	lsls	r3, r1, #7
    54e6:	1ac0      	subs	r0, r0, r3
    54e8:	4152      	adcs	r2, r2
    54ea:	0983      	lsrs	r3, r0, #6
    54ec:	428b      	cmp	r3, r1
    54ee:	d301      	bcc.n	54f4 <__udivsi3+0xb4>
    54f0:	018b      	lsls	r3, r1, #6
    54f2:	1ac0      	subs	r0, r0, r3
    54f4:	4152      	adcs	r2, r2
    54f6:	0943      	lsrs	r3, r0, #5
    54f8:	428b      	cmp	r3, r1
    54fa:	d301      	bcc.n	5500 <__udivsi3+0xc0>
    54fc:	014b      	lsls	r3, r1, #5
    54fe:	1ac0      	subs	r0, r0, r3
    5500:	4152      	adcs	r2, r2
    5502:	0903      	lsrs	r3, r0, #4
    5504:	428b      	cmp	r3, r1
    5506:	d301      	bcc.n	550c <__udivsi3+0xcc>
    5508:	010b      	lsls	r3, r1, #4
    550a:	1ac0      	subs	r0, r0, r3
    550c:	4152      	adcs	r2, r2
    550e:	08c3      	lsrs	r3, r0, #3
    5510:	428b      	cmp	r3, r1
    5512:	d301      	bcc.n	5518 <__udivsi3+0xd8>
    5514:	00cb      	lsls	r3, r1, #3
    5516:	1ac0      	subs	r0, r0, r3
    5518:	4152      	adcs	r2, r2
    551a:	0883      	lsrs	r3, r0, #2
    551c:	428b      	cmp	r3, r1
    551e:	d301      	bcc.n	5524 <__udivsi3+0xe4>
    5520:	008b      	lsls	r3, r1, #2
    5522:	1ac0      	subs	r0, r0, r3
    5524:	4152      	adcs	r2, r2
    5526:	0843      	lsrs	r3, r0, #1
    5528:	428b      	cmp	r3, r1
    552a:	d301      	bcc.n	5530 <__udivsi3+0xf0>
    552c:	004b      	lsls	r3, r1, #1
    552e:	1ac0      	subs	r0, r0, r3
    5530:	4152      	adcs	r2, r2
    5532:	1a41      	subs	r1, r0, r1
    5534:	d200      	bcs.n	5538 <__udivsi3+0xf8>
    5536:	4601      	mov	r1, r0
    5538:	4152      	adcs	r2, r2
    553a:	4610      	mov	r0, r2
    553c:	4770      	bx	lr
    553e:	e7ff      	b.n	5540 <__udivsi3+0x100>
    5540:	b501      	push	{r0, lr}
    5542:	2000      	movs	r0, #0
    5544:	f000 f806 	bl	5554 <__aeabi_idiv0>
    5548:	bd02      	pop	{r1, pc}
    554a:	46c0      	nop			; (mov r8, r8)

0000554c <__aeabi_uidivmod>:
    554c:	2900      	cmp	r1, #0
    554e:	d0f7      	beq.n	5540 <__udivsi3+0x100>
    5550:	e776      	b.n	5440 <__udivsi3>
    5552:	4770      	bx	lr

00005554 <__aeabi_idiv0>:
    5554:	4770      	bx	lr
    5556:	46c0      	nop			; (mov r8, r8)

00005558 <__libc_init_array>:
    5558:	b570      	push	{r4, r5, r6, lr}
    555a:	2600      	movs	r6, #0
    555c:	4d0c      	ldr	r5, [pc, #48]	; (5590 <__libc_init_array+0x38>)
    555e:	4c0d      	ldr	r4, [pc, #52]	; (5594 <__libc_init_array+0x3c>)
    5560:	1b64      	subs	r4, r4, r5
    5562:	10a4      	asrs	r4, r4, #2
    5564:	42a6      	cmp	r6, r4
    5566:	d109      	bne.n	557c <__libc_init_array+0x24>
    5568:	2600      	movs	r6, #0
    556a:	f000 f87d 	bl	5668 <_init>
    556e:	4d0a      	ldr	r5, [pc, #40]	; (5598 <__libc_init_array+0x40>)
    5570:	4c0a      	ldr	r4, [pc, #40]	; (559c <__libc_init_array+0x44>)
    5572:	1b64      	subs	r4, r4, r5
    5574:	10a4      	asrs	r4, r4, #2
    5576:	42a6      	cmp	r6, r4
    5578:	d105      	bne.n	5586 <__libc_init_array+0x2e>
    557a:	bd70      	pop	{r4, r5, r6, pc}
    557c:	00b3      	lsls	r3, r6, #2
    557e:	58eb      	ldr	r3, [r5, r3]
    5580:	4798      	blx	r3
    5582:	3601      	adds	r6, #1
    5584:	e7ee      	b.n	5564 <__libc_init_array+0xc>
    5586:	00b3      	lsls	r3, r6, #2
    5588:	58eb      	ldr	r3, [r5, r3]
    558a:	4798      	blx	r3
    558c:	3601      	adds	r6, #1
    558e:	e7f2      	b.n	5576 <__libc_init_array+0x1e>
    5590:	00005674 	.word	0x00005674
    5594:	00005674 	.word	0x00005674
    5598:	00005674 	.word	0x00005674
    559c:	00005678 	.word	0x00005678

000055a0 <memset>:
    55a0:	0003      	movs	r3, r0
    55a2:	1882      	adds	r2, r0, r2
    55a4:	4293      	cmp	r3, r2
    55a6:	d100      	bne.n	55aa <memset+0xa>
    55a8:	4770      	bx	lr
    55aa:	7019      	strb	r1, [r3, #0]
    55ac:	3301      	adds	r3, #1
    55ae:	e7f9      	b.n	55a4 <memset+0x4>
    55b0:	000023b2 	.word	0x000023b2
    55b4:	000023b6 	.word	0x000023b6
    55b8:	000023ba 	.word	0x000023ba
    55bc:	000023be 	.word	0x000023be
    55c0:	000023c2 	.word	0x000023c2
    55c4:	000023c6 	.word	0x000023c6
    55c8:	000023ca 	.word	0x000023ca
    55cc:	000023ce 	.word	0x000023ce
    55d0:	000023d2 	.word	0x000023d2
    55d4:	000023d6 	.word	0x000023d6
    55d8:	0000242e 	.word	0x0000242e
    55dc:	00002434 	.word	0x00002434
    55e0:	0000243a 	.word	0x0000243a
    55e4:	00002440 	.word	0x00002440
    55e8:	00002440 	.word	0x00002440
    55ec:	00002446 	.word	0x00002446
    55f0:	00002446 	.word	0x00002446
    55f4:	00002446 	.word	0x00002446
    55f8:	0000244c 	.word	0x0000244c
    55fc:	00002452 	.word	0x00002452
    5600:	42000800 	.word	0x42000800
    5604:	42000c00 	.word	0x42000c00
    5608:	42001000 	.word	0x42001000
    560c:	42001400 	.word	0x42001400
    5610:	42001800 	.word	0x42001800
    5614:	42001c00 	.word	0x42001c00
    5618:	0c0b0a09 	.word	0x0c0b0a09
    561c:	00000e0d 	.word	0x00000e0d
    5620:	0000453a 	.word	0x0000453a
    5624:	000045b2 	.word	0x000045b2
    5628:	000045b2 	.word	0x000045b2
    562c:	00004558 	.word	0x00004558
    5630:	00004552 	.word	0x00004552
    5634:	0000455e 	.word	0x0000455e
    5638:	00004540 	.word	0x00004540
    563c:	00004564 	.word	0x00004564
    5640:	00004598 	.word	0x00004598
    5644:	0000468c 	.word	0x0000468c
    5648:	000046dc 	.word	0x000046dc
    564c:	000046dc 	.word	0x000046dc
    5650:	000046d8 	.word	0x000046d8
    5654:	0000467e 	.word	0x0000467e
    5658:	0000469e 	.word	0x0000469e
    565c:	0000466e 	.word	0x0000466e
    5660:	000046b0 	.word	0x000046b0
    5664:	000046c2 	.word	0x000046c2

00005668 <_init>:
    5668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    566e:	bc08      	pop	{r3}
    5670:	469e      	mov	lr, r3
    5672:	4770      	bx	lr

00005674 <__init_array_start>:
    5674:	000020dd 	.word	0x000020dd

00005678 <_fini>:
    5678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    567a:	46c0      	nop			; (mov r8, r8)
    567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    567e:	bc08      	pop	{r3}
    5680:	469e      	mov	lr, r3
    5682:	4770      	bx	lr

00005684 <__fini_array_start>:
    5684:	000020b5 	.word	0x000020b5
