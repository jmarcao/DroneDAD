
DroneDADApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006778  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00006778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000510  20000068  000067e0  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000578  00006cf0  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   000337c3  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e36  00000000  00000000  000538ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002fca  00000000  00000000  000576e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000910  00000000  00000000  0005a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007b0  00000000  00000000  0005afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b4a9  00000000  00000000  0005b76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f9d9  00000000  00000000  00076c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088a29  00000000  00000000  000865ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000255c  00000000  00000000  0010f018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 25 00 20 4d 44 00 00 45 45 00 00 45 45 00 00     x%. MD..EE..EE..
	...
      2c:	45 45 00 00 00 00 00 00 00 00 00 00 45 45 00 00     EE..........EE..
      3c:	45 45 00 00 45 45 00 00 45 45 00 00 45 45 00 00     EE..EE..EE..EE..
      4c:	45 45 00 00 45 45 00 00 45 45 00 00 45 45 00 00     EE..EE..EE..EE..
      5c:	45 45 00 00 45 45 00 00 5d 1e 00 00 75 1e 00 00     EE..EE..]...u...
      6c:	8d 1e 00 00 a5 1e 00 00 bd 1e 00 00 d5 1e 00 00     ................
      7c:	45 45 00 00 45 45 00 00 45 45 00 00 45 45 00 00     EE..EE..EE..EE..
      8c:	45 45 00 00 45 45 00 00 00 00 00 00 00 00 00 00     EE..EE..........
      9c:	45 45 00 00 45 45 00 00 45 45 00 00 45 45 00 00     EE..EE..EE..EE..
      ac:	45 45 00 00 00 00 00 00                             EE......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00006778 	.word	0x00006778

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00006778 	.word	0x00006778
     10c:	00006778 	.word	0x00006778
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	0002      	movs	r2, r0
     1a0:	1dfb      	adds	r3, r7, #7
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	1dbb      	adds	r3, r7, #6
     1a6:	1c0a      	adds	r2, r1, #0
     1a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <port_pin_set_output_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	0003      	movs	r3, r0
     1b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	221f      	movs	r2, #31
     1be:	4013      	ands	r3, r2
     1c0:	2201      	movs	r2, #1
     1c2:	409a      	lsls	r2, r3
     1c4:	0013      	movs	r3, r2
     1c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d003      	beq.n	1d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1d0:	68fb      	ldr	r3, [r7, #12]
     1d2:	68ba      	ldr	r2, [r7, #8]
     1d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1d6:	e002      	b.n	1de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	68ba      	ldr	r2, [r7, #8]
     1dc:	615a      	str	r2, [r3, #20]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000175 	.word	0x00000175

000001ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1f0:	4b02      	ldr	r3, [pc, #8]	; (1fc <system_interrupt_enter_critical_section+0x10>)
     1f2:	4798      	blx	r3
}
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46bd      	mov	sp, r7
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	00001739 	.word	0x00001739

00000200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <system_interrupt_leave_critical_section+0x10>)
     206:	4798      	blx	r3
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	bd80      	pop	{r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	0000178d 	.word	0x0000178d

00000214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <spi_lock+0x40>)
     21e:	4798      	blx	r3

	if (module->locked) {
     220:	687b      	ldr	r3, [r7, #4]
     222:	791b      	ldrb	r3, [r3, #4]
     224:	b2db      	uxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	d004      	beq.n	234 <spi_lock+0x20>
		status = STATUS_BUSY;
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	2205      	movs	r2, #5
     230:	701a      	strb	r2, [r3, #0]
     232:	e006      	b.n	242 <spi_lock+0x2e>
	} else {
		module->locked = true;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2201      	movs	r2, #1
     238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     23a:	230f      	movs	r3, #15
     23c:	18fb      	adds	r3, r7, r3
     23e:	2200      	movs	r2, #0
     240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <spi_lock+0x44>)
     244:	4798      	blx	r3

	return status;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	781b      	ldrb	r3, [r3, #0]
}
     24c:	0018      	movs	r0, r3
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	000001ed 	.word	0x000001ed
     258:	00000201 	.word	0x00000201

0000025c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	module->locked = false;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	711a      	strb	r2, [r3, #4]
}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46bd      	mov	sp, r7
     26e:	b002      	add	sp, #8
     270:	bd80      	pop	{r7, pc}

00000272 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     272:	b580      	push	{r7, lr}
     274:	b084      	sub	sp, #16
     276:	af00      	add	r7, sp, #0
     278:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	681b      	ldr	r3, [r3, #0]
     27e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     280:	68fb      	ldr	r3, [r7, #12]
     282:	7e1b      	ldrb	r3, [r3, #24]
     284:	b2db      	uxtb	r3, r3
     286:	001a      	movs	r2, r3
     288:	2301      	movs	r3, #1
     28a:	4013      	ands	r3, r2
     28c:	1e5a      	subs	r2, r3, #1
     28e:	4193      	sbcs	r3, r2
     290:	b2db      	uxtb	r3, r3
}
     292:	0018      	movs	r0, r3
     294:	46bd      	mov	sp, r7
     296:	b004      	add	sp, #16
     298:	bd80      	pop	{r7, pc}

0000029a <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     29a:	b580      	push	{r7, lr}
     29c:	b084      	sub	sp, #16
     29e:	af00      	add	r7, sp, #0
     2a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2a8:	68fb      	ldr	r3, [r7, #12]
     2aa:	7e1b      	ldrb	r3, [r3, #24]
     2ac:	b2db      	uxtb	r3, r3
     2ae:	001a      	movs	r2, r3
     2b0:	2304      	movs	r3, #4
     2b2:	4013      	ands	r3, r2
     2b4:	1e5a      	subs	r2, r3, #1
     2b6:	4193      	sbcs	r3, r2
     2b8:	b2db      	uxtb	r3, r3
}
     2ba:	0018      	movs	r0, r3
     2bc:	46bd      	mov	sp, r7
     2be:	b004      	add	sp, #16
     2c0:	bd80      	pop	{r7, pc}
	...

000002c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b084      	sub	sp, #16
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
     2cc:	000a      	movs	r2, r1
     2ce:	1cbb      	adds	r3, r7, #2
     2d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	681b      	ldr	r3, [r3, #0]
     2d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <spi_write+0x44>)
     2de:	4798      	blx	r3
     2e0:	0003      	movs	r3, r0
     2e2:	001a      	movs	r2, r3
     2e4:	2301      	movs	r3, #1
     2e6:	4053      	eors	r3, r2
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d001      	beq.n	2f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     2ee:	2305      	movs	r3, #5
     2f0:	e006      	b.n	300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     2f2:	1cbb      	adds	r3, r7, #2
     2f4:	881b      	ldrh	r3, [r3, #0]
     2f6:	05db      	lsls	r3, r3, #23
     2f8:	0dda      	lsrs	r2, r3, #23
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     2fe:	2300      	movs	r3, #0
}
     300:	0018      	movs	r0, r3
     302:	46bd      	mov	sp, r7
     304:	b004      	add	sp, #16
     306:	bd80      	pop	{r7, pc}
     308:	00000273 	.word	0x00000273

0000030c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
     314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     316:	687b      	ldr	r3, [r7, #4]
     318:	681b      	ldr	r3, [r3, #0]
     31a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	0018      	movs	r0, r3
     320:	4b1b      	ldr	r3, [pc, #108]	; (390 <spi_read+0x84>)
     322:	4798      	blx	r3
     324:	0003      	movs	r3, r0
     326:	001a      	movs	r2, r3
     328:	2301      	movs	r3, #1
     32a:	4053      	eors	r3, r2
     32c:	b2db      	uxtb	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     332:	2310      	movs	r3, #16
     334:	e027      	b.n	386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     336:	230f      	movs	r3, #15
     338:	18fb      	adds	r3, r7, r3
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     33e:	68bb      	ldr	r3, [r7, #8]
     340:	8b5b      	ldrh	r3, [r3, #26]
     342:	b29b      	uxth	r3, r3
     344:	001a      	movs	r2, r3
     346:	2304      	movs	r3, #4
     348:	4013      	ands	r3, r2
     34a:	d006      	beq.n	35a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     34c:	230f      	movs	r3, #15
     34e:	18fb      	adds	r3, r7, r3
     350:	221e      	movs	r2, #30
     352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     354:	68bb      	ldr	r3, [r7, #8]
     356:	2204      	movs	r2, #4
     358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	799b      	ldrb	r3, [r3, #6]
     35e:	2b01      	cmp	r3, #1
     360:	d108      	bne.n	374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     362:	68bb      	ldr	r3, [r7, #8]
     364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     366:	b29b      	uxth	r3, r3
     368:	05db      	lsls	r3, r3, #23
     36a:	0ddb      	lsrs	r3, r3, #23
     36c:	b29a      	uxth	r2, r3
     36e:	683b      	ldr	r3, [r7, #0]
     370:	801a      	strh	r2, [r3, #0]
     372:	e005      	b.n	380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     374:	68bb      	ldr	r3, [r7, #8]
     376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     378:	b2db      	uxtb	r3, r3
     37a:	b29a      	uxth	r2, r3
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     380:	230f      	movs	r3, #15
     382:	18fb      	adds	r3, r7, r3
     384:	781b      	ldrb	r3, [r3, #0]
}
     386:	0018      	movs	r0, r3
     388:	46bd      	mov	sp, r7
     38a:	b004      	add	sp, #16
     38c:	bd80      	pop	{r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000029b 	.word	0x0000029b

00000394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	switch (type) {
     3a0:	1dfb      	adds	r3, r7, #7
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	2b09      	cmp	r3, #9
     3a6:	d818      	bhi.n	3da <_at25dfx_get_device_id+0x46>
     3a8:	009a      	lsls	r2, r3, #2
     3aa:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_at25dfx_get_device_id+0x50>)
     3ac:	18d3      	adds	r3, r2, r3
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <_at25dfx_get_device_id+0x54>)
     3b4:	e012      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
     3b6:	4b0d      	ldr	r3, [pc, #52]	; (3ec <_at25dfx_get_device_id+0x58>)
     3b8:	e010      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <_at25dfx_get_device_id+0x5c>)
     3bc:	e00e      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
     3be:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <_at25dfx_get_device_id+0x60>)
     3c0:	e00c      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
     3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <_at25dfx_get_device_id+0x64>)
     3c4:	e00a      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <_at25dfx_get_device_id+0x68>)
     3c8:	e008      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
     3ca:	4b0d      	ldr	r3, [pc, #52]	; (400 <_at25dfx_get_device_id+0x6c>)
     3cc:	e006      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
     3ce:	4b0d      	ldr	r3, [pc, #52]	; (404 <_at25dfx_get_device_id+0x70>)
     3d0:	e004      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
     3d2:	4b0d      	ldr	r3, [pc, #52]	; (408 <_at25dfx_get_device_id+0x74>)
     3d4:	e002      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
     3d6:	4b0d      	ldr	r3, [pc, #52]	; (40c <_at25dfx_get_device_id+0x78>)
     3d8:	e000      	b.n	3dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
     3da:	2300      	movs	r3, #0
	}
}
     3dc:	0018      	movs	r0, r3
     3de:	46bd      	mov	sp, r7
     3e0:	b002      	add	sp, #8
     3e2:	bd80      	pop	{r7, pc}
     3e4:	00006418 	.word	0x00006418
     3e8:	0000651f 	.word	0x0000651f
     3ec:	0000431f 	.word	0x0000431f
     3f0:	0001441f 	.word	0x0001441f
     3f4:	0002451f 	.word	0x0002451f
     3f8:	0001451f 	.word	0x0001451f
     3fc:	0002461f 	.word	0x0002461f
     400:	0003461f 	.word	0x0003461f
     404:	0000861f 	.word	0x0000861f
     408:	0001471f 	.word	0x0001471f
     40c:	0000481f 	.word	0x0000481f

00000410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	0002      	movs	r2, r0
     418:	1dfb      	adds	r3, r7, #7
     41a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     41c:	1dfb      	adds	r3, r7, #7
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b09      	cmp	r3, #9
     422:	d819      	bhi.n	458 <_at25dfx_get_device_size+0x48>
     424:	009a      	lsls	r2, r3, #2
     426:	4b0f      	ldr	r3, [pc, #60]	; (464 <_at25dfx_get_device_size+0x54>)
     428:	18d3      	adds	r3, r2, r3
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
     42e:	2380      	movs	r3, #128	; 0x80
     430:	025b      	lsls	r3, r3, #9
     432:	e012      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
     434:	2380      	movs	r3, #128	; 0x80
     436:	02db      	lsls	r3, r3, #11
     438:	e00f      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
     43a:	2380      	movs	r3, #128	; 0x80
     43c:	031b      	lsls	r3, r3, #12
     43e:	e00c      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     440:	2380      	movs	r3, #128	; 0x80
     442:	035b      	lsls	r3, r3, #13
     444:	e009      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     446:	2380      	movs	r3, #128	; 0x80
     448:	039b      	lsls	r3, r3, #14
     44a:	e006      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     44c:	2380      	movs	r3, #128	; 0x80
     44e:	03db      	lsls	r3, r3, #15
     450:	e003      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
     452:	2380      	movs	r3, #128	; 0x80
     454:	041b      	lsls	r3, r3, #16
     456:	e000      	b.n	45a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b002      	add	sp, #8
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	00006440 	.word	0x00006440

00000468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     470:	687b      	ldr	r3, [r7, #4]
     472:	795b      	ldrb	r3, [r3, #5]
     474:	2100      	movs	r1, #0
     476:	0018      	movs	r0, r3
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_at25dfx_chip_select+0x1c>)
     47a:	4798      	blx	r3
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b002      	add	sp, #8
     482:	bd80      	pop	{r7, pc}
     484:	00000199 	.word	0x00000199

00000488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     490:	687b      	ldr	r3, [r7, #4]
     492:	795b      	ldrb	r3, [r3, #5]
     494:	2101      	movs	r1, #1
     496:	0018      	movs	r0, r3
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <_at25dfx_chip_deselect+0x1c>)
     49a:	4798      	blx	r3
}
     49c:	46c0      	nop			; (mov r8, r8)
     49e:	46bd      	mov	sp, r7
     4a0:	b002      	add	sp, #8
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00000199 	.word	0x00000199

000004a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     4a8:	b084      	sub	sp, #16
     4aa:	b5b0      	push	{r4, r5, r7, lr}
     4ac:	b084      	sub	sp, #16
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
     4b2:	2004      	movs	r0, #4
     4b4:	2420      	movs	r4, #32
     4b6:	46a4      	mov	ip, r4
     4b8:	44bc      	add	ip, r7
     4ba:	4460      	add	r0, ip
     4bc:	6001      	str	r1, [r0, #0]
     4be:	6042      	str	r2, [r0, #4]
     4c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     4c2:	2304      	movs	r3, #4
     4c4:	2220      	movs	r2, #32
     4c6:	4694      	mov	ip, r2
     4c8:	44bc      	add	ip, r7
     4ca:	4463      	add	r3, ip
     4cc:	781a      	ldrb	r2, [r3, #0]
     4ce:	2308      	movs	r3, #8
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4d4:	2304      	movs	r3, #4
     4d6:	2220      	movs	r2, #32
     4d8:	4694      	mov	ip, r2
     4da:	44bc      	add	ip, r7
     4dc:	4463      	add	r3, ip
     4de:	785b      	ldrb	r3, [r3, #1]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d91f      	bls.n	524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4e4:	2304      	movs	r3, #4
     4e6:	2220      	movs	r2, #32
     4e8:	4694      	mov	ip, r2
     4ea:	44bc      	add	ip, r7
     4ec:	4463      	add	r3, ip
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	b2da      	uxtb	r2, r3
     4f2:	2308      	movs	r3, #8
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4f8:	2304      	movs	r3, #4
     4fa:	2220      	movs	r2, #32
     4fc:	4694      	mov	ip, r2
     4fe:	44bc      	add	ip, r7
     500:	4463      	add	r3, ip
     502:	685b      	ldr	r3, [r3, #4]
     504:	0a1b      	lsrs	r3, r3, #8
     506:	b2da      	uxtb	r2, r3
     508:	2308      	movs	r3, #8
     50a:	18fb      	adds	r3, r7, r3
     50c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     50e:	2304      	movs	r3, #4
     510:	2220      	movs	r2, #32
     512:	4694      	mov	ip, r2
     514:	44bc      	add	ip, r7
     516:	4463      	add	r3, ip
     518:	685b      	ldr	r3, [r3, #4]
     51a:	0c1b      	lsrs	r3, r3, #16
     51c:	b2da      	uxtb	r2, r3
     51e:	2308      	movs	r3, #8
     520:	18fb      	adds	r3, r7, r3
     522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     524:	687b      	ldr	r3, [r7, #4]
     526:	0018      	movs	r0, r3
     528:	4b1d      	ldr	r3, [pc, #116]	; (5a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     52a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	6818      	ldr	r0, [r3, #0]
     530:	2304      	movs	r3, #4
     532:	2220      	movs	r2, #32
     534:	4694      	mov	ip, r2
     536:	44bc      	add	ip, r7
     538:	4463      	add	r3, ip
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	b29a      	uxth	r2, r3
     53e:	230f      	movs	r3, #15
     540:	18fc      	adds	r4, r7, r3
     542:	2308      	movs	r3, #8
     544:	18fb      	adds	r3, r7, r3
     546:	0019      	movs	r1, r3
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     54a:	4798      	blx	r3
     54c:	0003      	movs	r3, r0
     54e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     550:	2304      	movs	r3, #4
     552:	2220      	movs	r2, #32
     554:	4694      	mov	ip, r2
     556:	44bc      	add	ip, r7
     558:	4463      	add	r3, ip
     55a:	899b      	ldrh	r3, [r3, #12]
     55c:	2b00      	cmp	r3, #0
     55e:	d014      	beq.n	58a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     560:	687b      	ldr	r3, [r7, #4]
     562:	6818      	ldr	r0, [r3, #0]
     564:	2304      	movs	r3, #4
     566:	2220      	movs	r2, #32
     568:	4694      	mov	ip, r2
     56a:	44bc      	add	ip, r7
     56c:	4463      	add	r3, ip
     56e:	6899      	ldr	r1, [r3, #8]
     570:	2304      	movs	r3, #4
     572:	2220      	movs	r2, #32
     574:	4694      	mov	ip, r2
     576:	44bc      	add	ip, r7
     578:	4463      	add	r3, ip
     57a:	899a      	ldrh	r2, [r3, #12]
     57c:	230f      	movs	r3, #15
     57e:	18fc      	adds	r4, r7, r3
     580:	2300      	movs	r3, #0
     582:	4d09      	ldr	r5, [pc, #36]	; (5a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
     584:	47a8      	blx	r5
     586:	0003      	movs	r3, r0
     588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	0018      	movs	r0, r3
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_at25dfx_chip_issue_read_command_wait+0x104>)
     590:	4798      	blx	r3
}
     592:	46c0      	nop			; (mov r8, r8)
     594:	46bd      	mov	sp, r7
     596:	b004      	add	sp, #16
     598:	bcb0      	pop	{r4, r5, r7}
     59a:	bc08      	pop	{r3}
     59c:	b004      	add	sp, #16
     59e:	4718      	bx	r3
     5a0:	00000469 	.word	0x00000469
     5a4:	000026bd 	.word	0x000026bd
     5a8:	00002501 	.word	0x00002501
     5ac:	00000489 	.word	0x00000489

000005b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     5b0:	b084      	sub	sp, #16
     5b2:	b590      	push	{r4, r7, lr}
     5b4:	b085      	sub	sp, #20
     5b6:	af00      	add	r7, sp, #0
     5b8:	6078      	str	r0, [r7, #4]
     5ba:	2004      	movs	r0, #4
     5bc:	2420      	movs	r4, #32
     5be:	46a4      	mov	ip, r4
     5c0:	44bc      	add	ip, r7
     5c2:	4460      	add	r0, ip
     5c4:	6001      	str	r1, [r0, #0]
     5c6:	6042      	str	r2, [r0, #4]
     5c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     5ca:	2304      	movs	r3, #4
     5cc:	2220      	movs	r2, #32
     5ce:	4694      	mov	ip, r2
     5d0:	44bc      	add	ip, r7
     5d2:	4463      	add	r3, ip
     5d4:	781a      	ldrb	r2, [r3, #0]
     5d6:	2308      	movs	r3, #8
     5d8:	18fb      	adds	r3, r7, r3
     5da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     5dc:	2304      	movs	r3, #4
     5de:	2220      	movs	r2, #32
     5e0:	4694      	mov	ip, r2
     5e2:	44bc      	add	ip, r7
     5e4:	4463      	add	r3, ip
     5e6:	785b      	ldrb	r3, [r3, #1]
     5e8:	2b01      	cmp	r3, #1
     5ea:	d91f      	bls.n	62c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     5ec:	2304      	movs	r3, #4
     5ee:	2220      	movs	r2, #32
     5f0:	4694      	mov	ip, r2
     5f2:	44bc      	add	ip, r7
     5f4:	4463      	add	r3, ip
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	b2da      	uxtb	r2, r3
     5fa:	2308      	movs	r3, #8
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     600:	2304      	movs	r3, #4
     602:	2220      	movs	r2, #32
     604:	4694      	mov	ip, r2
     606:	44bc      	add	ip, r7
     608:	4463      	add	r3, ip
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	0a1b      	lsrs	r3, r3, #8
     60e:	b2da      	uxtb	r2, r3
     610:	2308      	movs	r3, #8
     612:	18fb      	adds	r3, r7, r3
     614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     616:	2304      	movs	r3, #4
     618:	2220      	movs	r2, #32
     61a:	4694      	mov	ip, r2
     61c:	44bc      	add	ip, r7
     61e:	4463      	add	r3, ip
     620:	685b      	ldr	r3, [r3, #4]
     622:	0c1b      	lsrs	r3, r3, #16
     624:	b2da      	uxtb	r2, r3
     626:	2308      	movs	r3, #8
     628:	18fb      	adds	r3, r7, r3
     62a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	0018      	movs	r0, r3
     630:	4b1d      	ldr	r3, [pc, #116]	; (6a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     634:	687b      	ldr	r3, [r7, #4]
     636:	6818      	ldr	r0, [r3, #0]
     638:	2304      	movs	r3, #4
     63a:	2220      	movs	r2, #32
     63c:	4694      	mov	ip, r2
     63e:	44bc      	add	ip, r7
     640:	4463      	add	r3, ip
     642:	785b      	ldrb	r3, [r3, #1]
     644:	b29a      	uxth	r2, r3
     646:	230f      	movs	r3, #15
     648:	18fc      	adds	r4, r7, r3
     64a:	2308      	movs	r3, #8
     64c:	18fb      	adds	r3, r7, r3
     64e:	0019      	movs	r1, r3
     650:	4b16      	ldr	r3, [pc, #88]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     652:	4798      	blx	r3
     654:	0003      	movs	r3, r0
     656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     658:	2304      	movs	r3, #4
     65a:	2220      	movs	r2, #32
     65c:	4694      	mov	ip, r2
     65e:	44bc      	add	ip, r7
     660:	4463      	add	r3, ip
     662:	899b      	ldrh	r3, [r3, #12]
     664:	2b00      	cmp	r3, #0
     666:	d014      	beq.n	692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	6818      	ldr	r0, [r3, #0]
     66c:	2304      	movs	r3, #4
     66e:	2220      	movs	r2, #32
     670:	4694      	mov	ip, r2
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	6899      	ldr	r1, [r3, #8]
     678:	2304      	movs	r3, #4
     67a:	2220      	movs	r2, #32
     67c:	4694      	mov	ip, r2
     67e:	44bc      	add	ip, r7
     680:	4463      	add	r3, ip
     682:	899b      	ldrh	r3, [r3, #12]
     684:	220f      	movs	r2, #15
     686:	18bc      	adds	r4, r7, r2
     688:	001a      	movs	r2, r3
     68a:	4b08      	ldr	r3, [pc, #32]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     68c:	4798      	blx	r3
     68e:	0003      	movs	r3, r0
     690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     692:	687b      	ldr	r3, [r7, #4]
     694:	0018      	movs	r0, r3
     696:	4b06      	ldr	r3, [pc, #24]	; (6b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
     698:	4798      	blx	r3
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b005      	add	sp, #20
     6a0:	bc90      	pop	{r4, r7}
     6a2:	bc08      	pop	{r3}
     6a4:	b004      	add	sp, #16
     6a6:	4718      	bx	r3
     6a8:	00000469 	.word	0x00000469
     6ac:	000026bd 	.word	0x000026bd
     6b0:	00000489 	.word	0x00000489

000006b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
     6b4:	b590      	push	{r4, r7, lr}
     6b6:	b085      	sub	sp, #20
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
     6bc:	230c      	movs	r3, #12
     6be:	18fb      	adds	r3, r7, r3
     6c0:	2200      	movs	r2, #0
     6c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	0018      	movs	r0, r3
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     6ce:	4798      	blx	r3
     6d0:	0003      	movs	r3, r0
     6d2:	001a      	movs	r2, r3
     6d4:	2301      	movs	r3, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d1f3      	bne.n	6c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	0018      	movs	r0, r3
     6e2:	4b38      	ldr	r3, [pc, #224]	; (7c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
     6e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	220f      	movs	r2, #15
     6ec:	18bc      	adds	r4, r7, r2
     6ee:	2105      	movs	r1, #5
     6f0:	0018      	movs	r0, r3
     6f2:	4b35      	ldr	r3, [pc, #212]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     6f4:	4798      	blx	r3
     6f6:	0003      	movs	r3, r0
     6f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	0018      	movs	r0, r3
     702:	4b32      	ldr	r3, [pc, #200]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     704:	4798      	blx	r3
     706:	0003      	movs	r3, r0
     708:	001a      	movs	r2, r3
     70a:	2301      	movs	r3, #1
     70c:	4053      	eors	r3, r2
     70e:	b2db      	uxtb	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	d1f3      	bne.n	6fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
     714:	687b      	ldr	r3, [r7, #4]
     716:	681b      	ldr	r3, [r3, #0]
     718:	220f      	movs	r2, #15
     71a:	18bc      	adds	r4, r7, r2
     71c:	220c      	movs	r2, #12
     71e:	18ba      	adds	r2, r7, r2
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4b2a      	ldr	r3, [pc, #168]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	0018      	movs	r0, r3
     734:	4b22      	ldr	r3, [pc, #136]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     736:	4798      	blx	r3
     738:	0003      	movs	r3, r0
     73a:	001a      	movs	r2, r3
     73c:	2301      	movs	r3, #1
     73e:	4053      	eors	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	d1f3      	bne.n	72e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
     746:	687b      	ldr	r3, [r7, #4]
     748:	681b      	ldr	r3, [r3, #0]
     74a:	220f      	movs	r2, #15
     74c:	18bc      	adds	r4, r7, r2
     74e:	2100      	movs	r1, #0
     750:	0018      	movs	r0, r3
     752:	4b1d      	ldr	r3, [pc, #116]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	681b      	ldr	r3, [r3, #0]
     760:	0018      	movs	r0, r3
     762:	4b1a      	ldr	r3, [pc, #104]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     764:	4798      	blx	r3
     766:	0003      	movs	r3, r0
     768:	001a      	movs	r2, r3
     76a:	2301      	movs	r3, #1
     76c:	4053      	eors	r3, r2
     76e:	b2db      	uxtb	r3, r3
     770:	2b00      	cmp	r3, #0
     772:	d1f3      	bne.n	75c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
     774:	687b      	ldr	r3, [r7, #4]
     776:	681b      	ldr	r3, [r3, #0]
     778:	220f      	movs	r2, #15
     77a:	18bc      	adds	r4, r7, r2
     77c:	220c      	movs	r2, #12
     77e:	18ba      	adds	r2, r7, r2
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     786:	4798      	blx	r3
     788:	0003      	movs	r3, r0
     78a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     78c:	230c      	movs	r3, #12
     78e:	18fb      	adds	r3, r7, r3
     790:	881b      	ldrh	r3, [r3, #0]
     792:	001a      	movs	r2, r3
     794:	2301      	movs	r3, #1
     796:	4013      	ands	r3, r2
     798:	d1c8      	bne.n	72c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	0018      	movs	r0, r3
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
     7a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     7a2:	230c      	movs	r3, #12
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	881b      	ldrh	r3, [r3, #0]
     7a8:	001a      	movs	r2, r3
     7aa:	2320      	movs	r3, #32
     7ac:	4013      	ands	r3, r2
     7ae:	d001      	beq.n	7b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
     7b0:	2310      	movs	r3, #16
     7b2:	e000      	b.n	7b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
     7b4:	2300      	movs	r3, #0
}
     7b6:	0018      	movs	r0, r3
     7b8:	46bd      	mov	sp, r7
     7ba:	b005      	add	sp, #20
     7bc:	bd90      	pop	{r4, r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000273 	.word	0x00000273
     7c4:	00000469 	.word	0x00000469
     7c8:	000002c5 	.word	0x000002c5
     7cc:	0000029b 	.word	0x0000029b
     7d0:	0000030d 	.word	0x0000030d
     7d4:	00000489 	.word	0x00000489

000007d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b089      	sub	sp, #36	; 0x24
     7dc:	af02      	add	r7, sp, #8
     7de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
     7e0:	2308      	movs	r3, #8
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	2206      	movs	r2, #6
     7e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7e8:	2308      	movs	r3, #8
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	2201      	movs	r2, #1
     7ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7f0:	2308      	movs	r3, #8
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2200      	movs	r2, #0
     7f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7f8:	2308      	movs	r3, #8
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	2200      	movs	r2, #0
     7fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     800:	2308      	movs	r3, #8
     802:	18fb      	adds	r3, r7, r3
     804:	2200      	movs	r2, #0
     806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     808:	2308      	movs	r3, #8
     80a:	18fb      	adds	r3, r7, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	466a      	mov	r2, sp
     810:	68d9      	ldr	r1, [r3, #12]
     812:	6011      	str	r1, [r2, #0]
     814:	6819      	ldr	r1, [r3, #0]
     816:	685a      	ldr	r2, [r3, #4]
     818:	689b      	ldr	r3, [r3, #8]
     81a:	4c03      	ldr	r4, [pc, #12]	; (828 <_at25dfx_chip_enable_write+0x50>)
     81c:	47a0      	blx	r4
}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	46bd      	mov	sp, r7
     822:	b007      	add	sp, #28
     824:	bd90      	pop	{r4, r7, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	000005b1 	.word	0x000005b1

0000082c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
     82c:	b590      	push	{r4, r7, lr}
     82e:	b08b      	sub	sp, #44	; 0x2c
     830:	af02      	add	r7, sp, #8
     832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
     834:	2300      	movs	r3, #0
     836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
     838:	687b      	ldr	r3, [r7, #4]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	221f      	movs	r2, #31
     83e:	18bc      	adds	r4, r7, r2
     840:	0018      	movs	r0, r3
     842:	4b21      	ldr	r3, [pc, #132]	; (8c8 <at25dfx_chip_check_presence+0x9c>)
     844:	4798      	blx	r3
     846:	0003      	movs	r3, r0
     848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     84a:	231f      	movs	r3, #31
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2b05      	cmp	r3, #5
     852:	d103      	bne.n	85c <at25dfx_chip_check_presence+0x30>
		return status;
     854:	231f      	movs	r3, #31
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	e030      	b.n	8be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     85c:	230c      	movs	r3, #12
     85e:	18fb      	adds	r3, r7, r3
     860:	229f      	movs	r2, #159	; 0x9f
     862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     864:	230c      	movs	r3, #12
     866:	18fb      	adds	r3, r7, r3
     868:	2201      	movs	r2, #1
     86a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     86c:	230c      	movs	r3, #12
     86e:	18fb      	adds	r3, r7, r3
     870:	2208      	movs	r2, #8
     872:	18ba      	adds	r2, r7, r2
     874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     876:	230c      	movs	r3, #12
     878:	18fb      	adds	r3, r7, r3
     87a:	2203      	movs	r2, #3
     87c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     87e:	230c      	movs	r3, #12
     880:	18fb      	adds	r3, r7, r3
     882:	2200      	movs	r2, #0
     884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     886:	230c      	movs	r3, #12
     888:	18fb      	adds	r3, r7, r3
     88a:	6878      	ldr	r0, [r7, #4]
     88c:	466a      	mov	r2, sp
     88e:	68d9      	ldr	r1, [r3, #12]
     890:	6011      	str	r1, [r2, #0]
     892:	6819      	ldr	r1, [r3, #0]
     894:	685a      	ldr	r2, [r3, #4]
     896:	689b      	ldr	r3, [r3, #8]
     898:	4c0c      	ldr	r4, [pc, #48]	; (8cc <at25dfx_chip_check_presence+0xa0>)
     89a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0018      	movs	r0, r3
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <at25dfx_chip_check_presence+0xa4>)
     8a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	791b      	ldrb	r3, [r3, #4]
     8aa:	0018      	movs	r0, r3
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <at25dfx_chip_check_presence+0xa8>)
     8ae:	4798      	blx	r3
     8b0:	0002      	movs	r2, r0
     8b2:	68bb      	ldr	r3, [r7, #8]
     8b4:	429a      	cmp	r2, r3
     8b6:	d101      	bne.n	8bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     8b8:	2300      	movs	r3, #0
     8ba:	e000      	b.n	8be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
     8bc:	2314      	movs	r3, #20
	}
}
     8be:	0018      	movs	r0, r3
     8c0:	46bd      	mov	sp, r7
     8c2:	b009      	add	sp, #36	; 0x24
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000215 	.word	0x00000215
     8cc:	000004a9 	.word	0x000004a9
     8d0:	0000025d 	.word	0x0000025d
     8d4:	00000395 	.word	0x00000395

000008d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     8d8:	b590      	push	{r4, r7, lr}
     8da:	b08d      	sub	sp, #52	; 0x34
     8dc:	af02      	add	r7, sp, #8
     8de:	60f8      	str	r0, [r7, #12]
     8e0:	60b9      	str	r1, [r7, #8]
     8e2:	607a      	str	r2, [r7, #4]
     8e4:	001a      	movs	r2, r3
     8e6:	1cbb      	adds	r3, r7, #2
     8e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     8ea:	1cbb      	adds	r3, r7, #2
     8ec:	881a      	ldrh	r2, [r3, #0]
     8ee:	68bb      	ldr	r3, [r7, #8]
     8f0:	18d4      	adds	r4, r2, r3
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	791b      	ldrb	r3, [r3, #4]
     8f6:	0018      	movs	r0, r3
     8f8:	4b21      	ldr	r3, [pc, #132]	; (980 <at25dfx_chip_read_buffer+0xa8>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	429c      	cmp	r4, r3
     900:	d901      	bls.n	906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     902:	2317      	movs	r3, #23
     904:	e037      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	681b      	ldr	r3, [r3, #0]
     90a:	2227      	movs	r2, #39	; 0x27
     90c:	18bc      	adds	r4, r7, r2
     90e:	0018      	movs	r0, r3
     910:	4b1c      	ldr	r3, [pc, #112]	; (984 <at25dfx_chip_read_buffer+0xac>)
     912:	4798      	blx	r3
     914:	0003      	movs	r3, r0
     916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     918:	2327      	movs	r3, #39	; 0x27
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b05      	cmp	r3, #5
     920:	d103      	bne.n	92a <at25dfx_chip_read_buffer+0x52>
		return status;
     922:	2327      	movs	r3, #39	; 0x27
     924:	18fb      	adds	r3, r7, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	e025      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	220b      	movs	r2, #11
     930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     932:	2314      	movs	r3, #20
     934:	18fb      	adds	r3, r7, r3
     936:	2205      	movs	r2, #5
     938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     93a:	2314      	movs	r3, #20
     93c:	18fb      	adds	r3, r7, r3
     93e:	68ba      	ldr	r2, [r7, #8]
     940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     942:	2314      	movs	r3, #20
     944:	18fb      	adds	r3, r7, r3
     946:	687a      	ldr	r2, [r7, #4]
     948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     94a:	2314      	movs	r3, #20
     94c:	18fb      	adds	r3, r7, r3
     94e:	1cba      	adds	r2, r7, #2
     950:	8812      	ldrh	r2, [r2, #0]
     952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     954:	2314      	movs	r3, #20
     956:	18fb      	adds	r3, r7, r3
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	466a      	mov	r2, sp
     95c:	68d9      	ldr	r1, [r3, #12]
     95e:	6011      	str	r1, [r2, #0]
     960:	6819      	ldr	r1, [r3, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	689b      	ldr	r3, [r3, #8]
     966:	4c08      	ldr	r4, [pc, #32]	; (988 <at25dfx_chip_read_buffer+0xb0>)
     968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	0018      	movs	r0, r3
     970:	4b06      	ldr	r3, [pc, #24]	; (98c <at25dfx_chip_read_buffer+0xb4>)
     972:	4798      	blx	r3

	return STATUS_OK;
     974:	2300      	movs	r3, #0
}
     976:	0018      	movs	r0, r3
     978:	46bd      	mov	sp, r7
     97a:	b00b      	add	sp, #44	; 0x2c
     97c:	bd90      	pop	{r4, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000411 	.word	0x00000411
     984:	00000215 	.word	0x00000215
     988:	000004a9 	.word	0x000004a9
     98c:	0000025d 	.word	0x0000025d

00000990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     990:	b590      	push	{r4, r7, lr}
     992:	b08d      	sub	sp, #52	; 0x34
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	607a      	str	r2, [r7, #4]
     99c:	001a      	movs	r2, r3
     99e:	1cbb      	adds	r3, r7, #2
     9a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     9a2:	1cbb      	adds	r3, r7, #2
     9a4:	881a      	ldrh	r2, [r3, #0]
     9a6:	68bb      	ldr	r3, [r7, #8]
     9a8:	18d4      	adds	r4, r2, r3
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	791b      	ldrb	r3, [r3, #4]
     9ae:	0018      	movs	r0, r3
     9b0:	4b5b      	ldr	r3, [pc, #364]	; (b20 <at25dfx_chip_write_buffer+0x190>)
     9b2:	4798      	blx	r3
     9b4:	0003      	movs	r3, r0
     9b6:	429c      	cmp	r4, r3
     9b8:	d901      	bls.n	9be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     9ba:	2317      	movs	r3, #23
     9bc:	e0ab      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	2227      	movs	r2, #39	; 0x27
     9c4:	18bc      	adds	r4, r7, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b56      	ldr	r3, [pc, #344]	; (b24 <at25dfx_chip_write_buffer+0x194>)
     9ca:	4798      	blx	r3
     9cc:	0003      	movs	r3, r0
     9ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     9d0:	2327      	movs	r3, #39	; 0x27
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b05      	cmp	r3, #5
     9d8:	d103      	bne.n	9e2 <at25dfx_chip_write_buffer+0x52>
		return status;
     9da:	2327      	movs	r3, #39	; 0x27
     9dc:	18fb      	adds	r3, r7, r3
     9de:	781b      	ldrb	r3, [r3, #0]
     9e0:	e099      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	0018      	movs	r0, r3
     9e6:	4b50      	ldr	r3, [pc, #320]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     9e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2202      	movs	r2, #2
     9f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     9f2:	2314      	movs	r3, #20
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	2204      	movs	r2, #4
     9f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     9fa:	2314      	movs	r3, #20
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	68ba      	ldr	r2, [r7, #8]
     a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
     a02:	2314      	movs	r3, #20
     a04:	18fb      	adds	r3, r7, r3
     a06:	687a      	ldr	r2, [r7, #4]
     a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	b29b      	uxth	r3, r3
     a0e:	22ff      	movs	r2, #255	; 0xff
     a10:	4013      	ands	r3, r2
     a12:	b29a      	uxth	r2, r3
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	18fb      	adds	r3, r7, r3
     a18:	2180      	movs	r1, #128	; 0x80
     a1a:	0049      	lsls	r1, r1, #1
     a1c:	1a8a      	subs	r2, r1, r2
     a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
     a20:	1cbb      	adds	r3, r7, #2
     a22:	2224      	movs	r2, #36	; 0x24
     a24:	18ba      	adds	r2, r7, r2
     a26:	8810      	ldrh	r0, [r2, #0]
     a28:	881b      	ldrh	r3, [r3, #0]
     a2a:	b299      	uxth	r1, r3
     a2c:	b282      	uxth	r2, r0
     a2e:	4291      	cmp	r1, r2
     a30:	d900      	bls.n	a34 <at25dfx_chip_write_buffer+0xa4>
     a32:	1c03      	adds	r3, r0, #0
     a34:	b29a      	uxth	r2, r3
     a36:	2314      	movs	r3, #20
     a38:	18fb      	adds	r3, r7, r3
     a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     a3c:	2314      	movs	r3, #20
     a3e:	18fb      	adds	r3, r7, r3
     a40:	68f8      	ldr	r0, [r7, #12]
     a42:	466a      	mov	r2, sp
     a44:	68d9      	ldr	r1, [r3, #12]
     a46:	6011      	str	r1, [r2, #0]
     a48:	6819      	ldr	r1, [r3, #0]
     a4a:	685a      	ldr	r2, [r3, #4]
     a4c:	689b      	ldr	r3, [r3, #8]
     a4e:	4c37      	ldr	r4, [pc, #220]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     a52:	2327      	movs	r3, #39	; 0x27
     a54:	18fc      	adds	r4, r7, r3
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	0018      	movs	r0, r3
     a5a:	4b35      	ldr	r3, [pc, #212]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
     a62:	2314      	movs	r3, #20
     a64:	18fb      	adds	r3, r7, r3
     a66:	899a      	ldrh	r2, [r3, #12]
     a68:	1cbb      	adds	r3, r7, #2
     a6a:	1cb9      	adds	r1, r7, #2
     a6c:	8809      	ldrh	r1, [r1, #0]
     a6e:	1a8a      	subs	r2, r1, r2
     a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
     a72:	e03f      	b.n	af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	0018      	movs	r0, r3
     a78:	4b2b      	ldr	r3, [pc, #172]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     a7a:	4798      	blx	r3

		cmd.address += cmd.length;
     a7c:	2314      	movs	r3, #20
     a7e:	18fb      	adds	r3, r7, r3
     a80:	685b      	ldr	r3, [r3, #4]
     a82:	2214      	movs	r2, #20
     a84:	18ba      	adds	r2, r7, r2
     a86:	8992      	ldrh	r2, [r2, #12]
     a88:	189a      	adds	r2, r3, r2
     a8a:	2314      	movs	r3, #20
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
     a90:	2314      	movs	r3, #20
     a92:	18fb      	adds	r3, r7, r3
     a94:	689b      	ldr	r3, [r3, #8]
     a96:	2214      	movs	r2, #20
     a98:	18ba      	adds	r2, r7, r2
     a9a:	8992      	ldrh	r2, [r2, #12]
     a9c:	189a      	adds	r2, r3, r2
     a9e:	2314      	movs	r3, #20
     aa0:	18fb      	adds	r3, r7, r3
     aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     aa4:	1cbb      	adds	r3, r7, #2
     aa6:	881b      	ldrh	r3, [r3, #0]
     aa8:	b299      	uxth	r1, r3
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0052      	lsls	r2, r2, #1
     aae:	4291      	cmp	r1, r2
     ab0:	d901      	bls.n	ab6 <at25dfx_chip_write_buffer+0x126>
     ab2:	2380      	movs	r3, #128	; 0x80
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	b29a      	uxth	r2, r3
     ab8:	2314      	movs	r3, #20
     aba:	18fb      	adds	r3, r7, r3
     abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     abe:	2314      	movs	r3, #20
     ac0:	18fb      	adds	r3, r7, r3
     ac2:	68f8      	ldr	r0, [r7, #12]
     ac4:	466a      	mov	r2, sp
     ac6:	68d9      	ldr	r1, [r3, #12]
     ac8:	6011      	str	r1, [r2, #0]
     aca:	6819      	ldr	r1, [r3, #0]
     acc:	685a      	ldr	r2, [r3, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	4c16      	ldr	r4, [pc, #88]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
     ad4:	2327      	movs	r3, #39	; 0x27
     ad6:	18fc      	adds	r4, r7, r3
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	0018      	movs	r0, r3
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     ade:	4798      	blx	r3
     ae0:	0003      	movs	r3, r0
     ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
     ae4:	2314      	movs	r3, #20
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	899a      	ldrh	r2, [r3, #12]
     aea:	1cbb      	adds	r3, r7, #2
     aec:	1cb9      	adds	r1, r7, #2
     aee:	8809      	ldrh	r1, [r1, #0]
     af0:	1a8a      	subs	r2, r1, r2
     af2:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
     af4:	1cbb      	adds	r3, r7, #2
     af6:	881b      	ldrh	r3, [r3, #0]
     af8:	2b00      	cmp	r3, #0
     afa:	d004      	beq.n	b06 <at25dfx_chip_write_buffer+0x176>
     afc:	2327      	movs	r3, #39	; 0x27
     afe:	18fb      	adds	r3, r7, r3
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d0b6      	beq.n	a74 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	0018      	movs	r0, r3
     b0c:	4b09      	ldr	r3, [pc, #36]	; (b34 <at25dfx_chip_write_buffer+0x1a4>)
     b0e:	4798      	blx	r3

	return status;
     b10:	2327      	movs	r3, #39	; 0x27
     b12:	18fb      	adds	r3, r7, r3
     b14:	781b      	ldrb	r3, [r3, #0]
}
     b16:	0018      	movs	r0, r3
     b18:	46bd      	mov	sp, r7
     b1a:	b00b      	add	sp, #44	; 0x2c
     b1c:	bd90      	pop	{r4, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000411 	.word	0x00000411
     b24:	00000215 	.word	0x00000215
     b28:	000007d9 	.word	0x000007d9
     b2c:	000005b1 	.word	0x000005b1
     b30:	000006b5 	.word	0x000006b5
     b34:	0000025d 	.word	0x0000025d

00000b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     b38:	b590      	push	{r4, r7, lr}
     b3a:	b08d      	sub	sp, #52	; 0x34
     b3c:	af02      	add	r7, sp, #8
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	60b9      	str	r1, [r7, #8]
     b42:	1dfb      	adds	r3, r7, #7
     b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	791b      	ldrb	r3, [r3, #4]
     b4a:	0018      	movs	r0, r3
     b4c:	4b33      	ldr	r3, [pc, #204]	; (c1c <at25dfx_chip_erase_block+0xe4>)
     b4e:	4798      	blx	r3
     b50:	0002      	movs	r2, r0
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	429a      	cmp	r2, r3
     b56:	d801      	bhi.n	b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
     b58:	2317      	movs	r3, #23
     b5a:	e05b      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2227      	movs	r2, #39	; 0x27
     b62:	18bc      	adds	r4, r7, r2
     b64:	0018      	movs	r0, r3
     b66:	4b2e      	ldr	r3, [pc, #184]	; (c20 <at25dfx_chip_erase_block+0xe8>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
     b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     b6e:	2327      	movs	r3, #39	; 0x27
     b70:	18fb      	adds	r3, r7, r3
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	2b05      	cmp	r3, #5
     b76:	d103      	bne.n	b80 <at25dfx_chip_erase_block+0x48>
		return status;
     b78:	2327      	movs	r3, #39	; 0x27
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	e049      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	0018      	movs	r0, r3
     b84:	4b27      	ldr	r3, [pc, #156]	; (c24 <at25dfx_chip_erase_block+0xec>)
     b86:	4798      	blx	r3

	switch (block_size) {
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d008      	beq.n	ba2 <at25dfx_chip_erase_block+0x6a>
     b90:	2b02      	cmp	r3, #2
     b92:	d00b      	beq.n	bac <at25dfx_chip_erase_block+0x74>
     b94:	2b00      	cmp	r3, #0
     b96:	d10e      	bne.n	bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     b98:	2314      	movs	r3, #20
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	2220      	movs	r2, #32
     b9e:	701a      	strb	r2, [r3, #0]
		break;
     ba0:	e00d      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     ba2:	2314      	movs	r3, #20
     ba4:	18fb      	adds	r3, r7, r3
     ba6:	2252      	movs	r2, #82	; 0x52
     ba8:	701a      	strb	r2, [r3, #0]
		break;
     baa:	e008      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     bac:	2314      	movs	r3, #20
     bae:	18fb      	adds	r3, r7, r3
     bb0:	22d8      	movs	r2, #216	; 0xd8
     bb2:	701a      	strb	r2, [r3, #0]
		break;
     bb4:	e003      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     bb6:	2314      	movs	r3, #20
     bb8:	18fb      	adds	r3, r7, r3
     bba:	2200      	movs	r2, #0
     bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
     bbe:	2314      	movs	r3, #20
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2204      	movs	r2, #4
     bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     bc6:	2314      	movs	r3, #20
     bc8:	18fb      	adds	r3, r7, r3
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     bce:	2314      	movs	r3, #20
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	2200      	movs	r2, #0
     bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     bd6:	2314      	movs	r3, #20
     bd8:	18fb      	adds	r3, r7, r3
     bda:	2200      	movs	r2, #0
     bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     bde:	2314      	movs	r3, #20
     be0:	18fb      	adds	r3, r7, r3
     be2:	68f8      	ldr	r0, [r7, #12]
     be4:	466a      	mov	r2, sp
     be6:	68d9      	ldr	r1, [r3, #12]
     be8:	6011      	str	r1, [r2, #0]
     bea:	6819      	ldr	r1, [r3, #0]
     bec:	685a      	ldr	r2, [r3, #4]
     bee:	689b      	ldr	r3, [r3, #8]
     bf0:	4c0d      	ldr	r4, [pc, #52]	; (c28 <at25dfx_chip_erase_block+0xf0>)
     bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     bf4:	2327      	movs	r3, #39	; 0x27
     bf6:	18fc      	adds	r4, r7, r3
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	0018      	movs	r0, r3
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <at25dfx_chip_erase_block+0xf4>)
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	0018      	movs	r0, r3
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <at25dfx_chip_erase_block+0xf8>)
     c0c:	4798      	blx	r3

	return status;
     c0e:	2327      	movs	r3, #39	; 0x27
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b00b      	add	sp, #44	; 0x2c
     c1a:	bd90      	pop	{r4, r7, pc}
     c1c:	00000411 	.word	0x00000411
     c20:	00000215 	.word	0x00000215
     c24:	000007d9 	.word	0x000007d9
     c28:	000005b1 	.word	0x000005b1
     c2c:	000006b5 	.word	0x000006b5
     c30:	0000025d 	.word	0x0000025d

00000c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     c34:	b590      	push	{r4, r7, lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
     c38:	af02      	add	r7, sp, #8
     c3a:	6078      	str	r0, [r7, #4]
     c3c:	000a      	movs	r2, r1
     c3e:	1cfb      	adds	r3, r7, #3
     c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	221f      	movs	r2, #31
     c48:	18bc      	adds	r4, r7, r2
     c4a:	0018      	movs	r0, r3
     c4c:	4b22      	ldr	r3, [pc, #136]	; (cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     c54:	231f      	movs	r3, #31
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b05      	cmp	r3, #5
     c5c:	d103      	bne.n	c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
     c5e:	231f      	movs	r3, #31
     c60:	18fb      	adds	r3, r7, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	e033      	b.n	cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
     c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     c6e:	1cfb      	adds	r3, r7, #3
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <at25dfx_chip_set_global_sector_protect+0x46>
     c76:	223c      	movs	r2, #60	; 0x3c
     c78:	e000      	b.n	c7c <at25dfx_chip_set_global_sector_protect+0x48>
     c7a:	2200      	movs	r2, #0
     c7c:	230b      	movs	r3, #11
     c7e:	18fb      	adds	r3, r7, r3
     c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
     c82:	230c      	movs	r3, #12
     c84:	18fb      	adds	r3, r7, r3
     c86:	2201      	movs	r2, #1
     c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	2201      	movs	r2, #1
     c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
     c92:	230c      	movs	r3, #12
     c94:	18fb      	adds	r3, r7, r3
     c96:	2201      	movs	r2, #1
     c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
     c9a:	230c      	movs	r3, #12
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	220b      	movs	r2, #11
     ca0:	18ba      	adds	r2, r7, r2
     ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     ca4:	230c      	movs	r3, #12
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	2200      	movs	r2, #0
     caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     cac:	230c      	movs	r3, #12
     cae:	18fb      	adds	r3, r7, r3
     cb0:	6878      	ldr	r0, [r7, #4]
     cb2:	466a      	mov	r2, sp
     cb4:	68d9      	ldr	r1, [r3, #12]
     cb6:	6011      	str	r1, [r2, #0]
     cb8:	6819      	ldr	r1, [r3, #0]
     cba:	685a      	ldr	r2, [r3, #4]
     cbc:	689b      	ldr	r3, [r3, #8]
     cbe:	4c08      	ldr	r4, [pc, #32]	; (ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
     cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
     cca:	4798      	blx	r3

	return STATUS_OK;
     ccc:	2300      	movs	r3, #0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b009      	add	sp, #36	; 0x24
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000215 	.word	0x00000215
     cdc:	000007d9 	.word	0x000007d9
     ce0:	000005b1 	.word	0x000005b1
     ce4:	0000025d 	.word	0x0000025d

00000ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     ce8:	b590      	push	{r4, r7, lr}
     cea:	b08d      	sub	sp, #52	; 0x34
     cec:	af02      	add	r7, sp, #8
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	791b      	ldrb	r3, [r3, #4]
     cfa:	0018      	movs	r0, r3
     cfc:	4b26      	ldr	r3, [pc, #152]	; (d98 <at25dfx_chip_set_sector_protect+0xb0>)
     cfe:	4798      	blx	r3
     d00:	0002      	movs	r2, r0
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	429a      	cmp	r2, r3
     d06:	d801      	bhi.n	d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
     d08:	2317      	movs	r3, #23
     d0a:	e040      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	2227      	movs	r2, #39	; 0x27
     d12:	18bc      	adds	r4, r7, r2
     d14:	0018      	movs	r0, r3
     d16:	4b21      	ldr	r3, [pc, #132]	; (d9c <at25dfx_chip_set_sector_protect+0xb4>)
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     d1e:	2327      	movs	r3, #39	; 0x27
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b05      	cmp	r3, #5
     d26:	d103      	bne.n	d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
     d28:	2327      	movs	r3, #39	; 0x27
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	e02e      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	0018      	movs	r0, r3
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <at25dfx_chip_set_sector_protect+0xb8>)
     d36:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d001      	beq.n	d44 <at25dfx_chip_set_sector_protect+0x5c>
     d40:	2236      	movs	r2, #54	; 0x36
     d42:	e000      	b.n	d46 <at25dfx_chip_set_sector_protect+0x5e>
     d44:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
     d46:	2314      	movs	r3, #20
     d48:	18fb      	adds	r3, r7, r3
     d4a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     d4c:	2314      	movs	r3, #20
     d4e:	18fb      	adds	r3, r7, r3
     d50:	2204      	movs	r2, #4
     d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     d54:	2314      	movs	r3, #20
     d56:	18fb      	adds	r3, r7, r3
     d58:	68ba      	ldr	r2, [r7, #8]
     d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     d5c:	2314      	movs	r3, #20
     d5e:	18fb      	adds	r3, r7, r3
     d60:	2200      	movs	r2, #0
     d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     d64:	2314      	movs	r3, #20
     d66:	18fb      	adds	r3, r7, r3
     d68:	2200      	movs	r2, #0
     d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     d6c:	2314      	movs	r3, #20
     d6e:	18fb      	adds	r3, r7, r3
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	466a      	mov	r2, sp
     d74:	68d9      	ldr	r1, [r3, #12]
     d76:	6011      	str	r1, [r2, #0]
     d78:	6819      	ldr	r1, [r3, #0]
     d7a:	685a      	ldr	r2, [r3, #4]
     d7c:	689b      	ldr	r3, [r3, #8]
     d7e:	4c09      	ldr	r4, [pc, #36]	; (da4 <at25dfx_chip_set_sector_protect+0xbc>)
     d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	0018      	movs	r0, r3
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <at25dfx_chip_set_sector_protect+0xc0>)
     d8a:	4798      	blx	r3

	return STATUS_OK;
     d8c:	2300      	movs	r3, #0
}
     d8e:	0018      	movs	r0, r3
     d90:	46bd      	mov	sp, r7
     d92:	b00b      	add	sp, #44	; 0x2c
     d94:	bd90      	pop	{r4, r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000411 	.word	0x00000411
     d9c:	00000215 	.word	0x00000215
     da0:	000007d9 	.word	0x000007d9
     da4:	000005b1 	.word	0x000005b1
     da8:	0000025d 	.word	0x0000025d

00000dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     dac:	b590      	push	{r4, r7, lr}
     dae:	b08b      	sub	sp, #44	; 0x2c
     db0:	af02      	add	r7, sp, #8
     db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	221f      	movs	r2, #31
     dba:	18bc      	adds	r4, r7, r2
     dbc:	0018      	movs	r0, r3
     dbe:	4b1b      	ldr	r3, [pc, #108]	; (e2c <at25dfx_chip_sleep+0x80>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     dc6:	231f      	movs	r3, #31
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b05      	cmp	r3, #5
     dce:	d103      	bne.n	dd8 <at25dfx_chip_sleep+0x2c>
		return status;
     dd0:	231f      	movs	r3, #31
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	e024      	b.n	e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     dd8:	230c      	movs	r3, #12
     dda:	18fb      	adds	r3, r7, r3
     ddc:	22b9      	movs	r2, #185	; 0xb9
     dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     de0:	230c      	movs	r3, #12
     de2:	18fb      	adds	r3, r7, r3
     de4:	2201      	movs	r2, #1
     de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     de8:	230c      	movs	r3, #12
     dea:	18fb      	adds	r3, r7, r3
     dec:	2200      	movs	r2, #0
     dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     df0:	230c      	movs	r3, #12
     df2:	18fb      	adds	r3, r7, r3
     df4:	2200      	movs	r2, #0
     df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     df8:	230c      	movs	r3, #12
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	2200      	movs	r2, #0
     dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e00:	230c      	movs	r3, #12
     e02:	18fb      	adds	r3, r7, r3
     e04:	6878      	ldr	r0, [r7, #4]
     e06:	466a      	mov	r2, sp
     e08:	68d9      	ldr	r1, [r3, #12]
     e0a:	6011      	str	r1, [r2, #0]
     e0c:	6819      	ldr	r1, [r3, #0]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	689b      	ldr	r3, [r3, #8]
     e12:	4c07      	ldr	r4, [pc, #28]	; (e30 <at25dfx_chip_sleep+0x84>)
     e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	0018      	movs	r0, r3
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <at25dfx_chip_sleep+0x88>)
     e1e:	4798      	blx	r3

	return STATUS_OK;
     e20:	2300      	movs	r3, #0
}
     e22:	0018      	movs	r0, r3
     e24:	46bd      	mov	sp, r7
     e26:	b009      	add	sp, #36	; 0x24
     e28:	bd90      	pop	{r4, r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000215 	.word	0x00000215
     e30:	000005b1 	.word	0x000005b1
     e34:	0000025d 	.word	0x0000025d

00000e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08b      	sub	sp, #44	; 0x2c
     e3c:	af02      	add	r7, sp, #8
     e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	221f      	movs	r2, #31
     e46:	18bc      	adds	r4, r7, r2
     e48:	0018      	movs	r0, r3
     e4a:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <at25dfx_chip_wake+0x80>)
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     e52:	231f      	movs	r3, #31
     e54:	18fb      	adds	r3, r7, r3
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b05      	cmp	r3, #5
     e5a:	d103      	bne.n	e64 <at25dfx_chip_wake+0x2c>
		return status;
     e5c:	231f      	movs	r3, #31
     e5e:	18fb      	adds	r3, r7, r3
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	e024      	b.n	eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     e64:	230c      	movs	r3, #12
     e66:	18fb      	adds	r3, r7, r3
     e68:	22ab      	movs	r2, #171	; 0xab
     e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     e6c:	230c      	movs	r3, #12
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     e74:	230c      	movs	r3, #12
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     e7c:	230c      	movs	r3, #12
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     e84:	230c      	movs	r3, #12
     e86:	18fb      	adds	r3, r7, r3
     e88:	2200      	movs	r2, #0
     e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e8c:	230c      	movs	r3, #12
     e8e:	18fb      	adds	r3, r7, r3
     e90:	6878      	ldr	r0, [r7, #4]
     e92:	466a      	mov	r2, sp
     e94:	68d9      	ldr	r1, [r3, #12]
     e96:	6011      	str	r1, [r2, #0]
     e98:	6819      	ldr	r1, [r3, #0]
     e9a:	685a      	ldr	r2, [r3, #4]
     e9c:	689b      	ldr	r3, [r3, #8]
     e9e:	4c07      	ldr	r4, [pc, #28]	; (ebc <at25dfx_chip_wake+0x84>)
     ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	0018      	movs	r0, r3
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <at25dfx_chip_wake+0x88>)
     eaa:	4798      	blx	r3

	return STATUS_OK;
     eac:	2300      	movs	r3, #0
     eae:	0018      	movs	r0, r3
     eb0:	46bd      	mov	sp, r7
     eb2:	b009      	add	sp, #36	; 0x24
     eb4:	bd90      	pop	{r4, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000215 	.word	0x00000215
     ebc:	000005b1 	.word	0x000005b1
     ec0:	0000025d 	.word	0x0000025d

00000ec4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <system_interrupt_enable_global+0x18>)
     eca:	2201      	movs	r2, #1
     ecc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     ece:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     ed2:	b662      	cpsie	i
}
     ed4:	46c0      	nop			; (mov r8, r8)
     ed6:	46bd      	mov	sp, r7
     ed8:	bd80      	pop	{r7, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	20000000 	.word	0x20000000

00000ee0 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     ee0:	b580      	push	{r7, lr}
     ee2:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     ee4:	b672      	cpsid	i
     ee6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     eea:	4b03      	ldr	r3, [pc, #12]	; (ef8 <system_interrupt_disable_global+0x18>)
     eec:	2200      	movs	r2, #0
     eee:	701a      	strb	r2, [r3, #0]
}
     ef0:	46c0      	nop			; (mov r8, r8)
     ef2:	46bd      	mov	sp, r7
     ef4:	bd80      	pop	{r7, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	20000000 	.word	0x20000000

00000efc <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     efc:	b580      	push	{r7, lr}
     efe:	b084      	sub	sp, #16
     f00:	af00      	add	r7, sp, #0
     f02:	60f8      	str	r0, [r7, #12]
     f04:	60b9      	str	r1, [r7, #8]
     f06:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     f08:	68fb      	ldr	r3, [r7, #12]
     f0a:	2203      	movs	r2, #3
     f0c:	4013      	ands	r3, r2
     f0e:	d001      	beq.n	f14 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     f10:	2318      	movs	r3, #24
     f12:	e040      	b.n	f96 <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     f14:	4b22      	ldr	r3, [pc, #136]	; (fa0 <dsu_crc32_cal+0xa4>)
     f16:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     f18:	2322      	movs	r3, #34	; 0x22
     f1a:	425b      	negs	r3, r3
     f1c:	0019      	movs	r1, r3
     f1e:	2021      	movs	r0, #33	; 0x21
     f20:	4b20      	ldr	r3, [pc, #128]	; (fa4 <dsu_crc32_cal+0xa8>)
     f22:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     f24:	4a20      	ldr	r2, [pc, #128]	; (fa8 <dsu_crc32_cal+0xac>)
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     f2c:	4b1e      	ldr	r3, [pc, #120]	; (fa8 <dsu_crc32_cal+0xac>)
     f2e:	68fa      	ldr	r2, [r7, #12]
     f30:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     f32:	4b1d      	ldr	r3, [pc, #116]	; (fa8 <dsu_crc32_cal+0xac>)
     f34:	68ba      	ldr	r2, [r7, #8]
     f36:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     f38:	4a1b      	ldr	r2, [pc, #108]	; (fa8 <dsu_crc32_cal+0xac>)
     f3a:	7813      	ldrb	r3, [r2, #0]
     f3c:	2104      	movs	r1, #4
     f3e:	430b      	orrs	r3, r1
     f40:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	4b18      	ldr	r3, [pc, #96]	; (fa8 <dsu_crc32_cal+0xac>)
     f46:	785b      	ldrb	r3, [r3, #1]
     f48:	b2db      	uxtb	r3, r3
     f4a:	001a      	movs	r2, r3
     f4c:	2301      	movs	r3, #1
     f4e:	4013      	ands	r3, r2
     f50:	2b01      	cmp	r3, #1
     f52:	d1f7      	bne.n	f44 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     f54:	4b14      	ldr	r3, [pc, #80]	; (fa8 <dsu_crc32_cal+0xac>)
     f56:	785b      	ldrb	r3, [r3, #1]
     f58:	b2db      	uxtb	r3, r3
     f5a:	001a      	movs	r2, r3
     f5c:	2304      	movs	r3, #4
     f5e:	4013      	ands	r3, r2
     f60:	d009      	beq.n	f76 <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     f62:	2322      	movs	r3, #34	; 0x22
     f64:	425b      	negs	r3, r3
     f66:	0019      	movs	r1, r3
     f68:	2021      	movs	r0, #33	; 0x21
     f6a:	4b10      	ldr	r3, [pc, #64]	; (fac <dsu_crc32_cal+0xb0>)
     f6c:	4798      	blx	r3
		system_interrupt_enable_global();
     f6e:	4b10      	ldr	r3, [pc, #64]	; (fb0 <dsu_crc32_cal+0xb4>)
     f70:	4798      	blx	r3
		return STATUS_ERR_IO;
     f72:	2310      	movs	r3, #16
     f74:	e00f      	b.n	f96 <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     f76:	4b0c      	ldr	r3, [pc, #48]	; (fa8 <dsu_crc32_cal+0xac>)
     f78:	68da      	ldr	r2, [r3, #12]
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     f7e:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <dsu_crc32_cal+0xac>)
     f80:	2201      	movs	r2, #1
     f82:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     f84:	2322      	movs	r3, #34	; 0x22
     f86:	425b      	negs	r3, r3
     f88:	0019      	movs	r1, r3
     f8a:	2021      	movs	r0, #33	; 0x21
     f8c:	4b07      	ldr	r3, [pc, #28]	; (fac <dsu_crc32_cal+0xb0>)
     f8e:	4798      	blx	r3
	system_interrupt_enable_global();
     f90:	4b07      	ldr	r3, [pc, #28]	; (fb0 <dsu_crc32_cal+0xb4>)
     f92:	4798      	blx	r3
	return STATUS_OK;
     f94:	2300      	movs	r3, #0
     f96:	0018      	movs	r0, r3
     f98:	46bd      	mov	sp, r7
     f9a:	b004      	add	sp, #16
     f9c:	bd80      	pop	{r7, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	00000ee1 	.word	0x00000ee1
     fa4:	0000160d 	.word	0x0000160d
     fa8:	41002000 	.word	0x41002000
     fac:	00001575 	.word	0x00001575
     fb0:	00000ec5 	.word	0x00000ec5

00000fb4 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     fba:	4b07      	ldr	r3, [pc, #28]	; (fd8 <nvm_is_ready+0x24>)
     fbc:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	7d1b      	ldrb	r3, [r3, #20]
     fc2:	b2db      	uxtb	r3, r3
     fc4:	001a      	movs	r2, r3
     fc6:	2301      	movs	r3, #1
     fc8:	4013      	ands	r3, r2
     fca:	1e5a      	subs	r2, r3, #1
     fcc:	4193      	sbcs	r3, r2
     fce:	b2db      	uxtb	r3, r3
}
     fd0:	0018      	movs	r0, r3
     fd2:	46bd      	mov	sp, r7
     fd4:	b002      	add	sp, #8
     fd6:	bd80      	pop	{r7, pc}
     fd8:	41004000 	.word	0x41004000

00000fdc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     fdc:	b580      	push	{r7, lr}
     fde:	b082      	sub	sp, #8
     fe0:	af00      	add	r7, sp, #0
     fe2:	0002      	movs	r2, r0
     fe4:	6039      	str	r1, [r7, #0]
     fe6:	1dfb      	adds	r3, r7, #7
     fe8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     fea:	1dfb      	adds	r3, r7, #7
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	2b01      	cmp	r3, #1
     ff0:	d00a      	beq.n	1008 <system_apb_clock_set_mask+0x2c>
     ff2:	2b02      	cmp	r3, #2
     ff4:	d00f      	beq.n	1016 <system_apb_clock_set_mask+0x3a>
     ff6:	2b00      	cmp	r3, #0
     ff8:	d114      	bne.n	1024 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     ffa:	4b0e      	ldr	r3, [pc, #56]	; (1034 <system_apb_clock_set_mask+0x58>)
     ffc:	4a0d      	ldr	r2, [pc, #52]	; (1034 <system_apb_clock_set_mask+0x58>)
     ffe:	6991      	ldr	r1, [r2, #24]
    1000:	683a      	ldr	r2, [r7, #0]
    1002:	430a      	orrs	r2, r1
    1004:	619a      	str	r2, [r3, #24]
			break;
    1006:	e00f      	b.n	1028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1008:	4b0a      	ldr	r3, [pc, #40]	; (1034 <system_apb_clock_set_mask+0x58>)
    100a:	4a0a      	ldr	r2, [pc, #40]	; (1034 <system_apb_clock_set_mask+0x58>)
    100c:	69d1      	ldr	r1, [r2, #28]
    100e:	683a      	ldr	r2, [r7, #0]
    1010:	430a      	orrs	r2, r1
    1012:	61da      	str	r2, [r3, #28]
			break;
    1014:	e008      	b.n	1028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1016:	4b07      	ldr	r3, [pc, #28]	; (1034 <system_apb_clock_set_mask+0x58>)
    1018:	4a06      	ldr	r2, [pc, #24]	; (1034 <system_apb_clock_set_mask+0x58>)
    101a:	6a11      	ldr	r1, [r2, #32]
    101c:	683a      	ldr	r2, [r7, #0]
    101e:	430a      	orrs	r2, r1
    1020:	621a      	str	r2, [r3, #32]
			break;
    1022:	e001      	b.n	1028 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1024:	2317      	movs	r3, #23
    1026:	e000      	b.n	102a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1028:	2300      	movs	r3, #0
}
    102a:	0018      	movs	r0, r3
    102c:	46bd      	mov	sp, r7
    102e:	b002      	add	sp, #8
    1030:	bd80      	pop	{r7, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	40000400 	.word	0x40000400

00001038 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1038:	b580      	push	{r7, lr}
    103a:	b084      	sub	sp, #16
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1040:	4b2f      	ldr	r3, [pc, #188]	; (1100 <nvm_set_config+0xc8>)
    1042:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    1044:	2104      	movs	r1, #4
    1046:	2001      	movs	r0, #1
    1048:	4b2e      	ldr	r3, [pc, #184]	; (1104 <nvm_set_config+0xcc>)
    104a:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	2220      	movs	r2, #32
    1050:	32ff      	adds	r2, #255	; 0xff
    1052:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1054:	4b2c      	ldr	r3, [pc, #176]	; (1108 <nvm_set_config+0xd0>)
    1056:	4798      	blx	r3
    1058:	0003      	movs	r3, r0
    105a:	001a      	movs	r2, r3
    105c:	2301      	movs	r3, #1
    105e:	4053      	eors	r3, r2
    1060:	b2db      	uxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	d001      	beq.n	106a <nvm_set_config+0x32>
		return STATUS_BUSY;
    1066:	2305      	movs	r3, #5
    1068:	e045      	b.n	10f6 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	781b      	ldrb	r3, [r3, #0]
    106e:	021b      	lsls	r3, r3, #8
    1070:	001a      	movs	r2, r3
    1072:	23c0      	movs	r3, #192	; 0xc0
    1074:	009b      	lsls	r3, r3, #2
    1076:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	785b      	ldrb	r3, [r3, #1]
    107c:	01db      	lsls	r3, r3, #7
    107e:	0019      	movs	r1, r3
    1080:	23ff      	movs	r3, #255	; 0xff
    1082:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1084:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	789b      	ldrb	r3, [r3, #2]
    108a:	005b      	lsls	r3, r3, #1
    108c:	0019      	movs	r1, r3
    108e:	231e      	movs	r3, #30
    1090:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1092:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	78db      	ldrb	r3, [r3, #3]
    1098:	049b      	lsls	r3, r3, #18
    109a:	0019      	movs	r1, r3
    109c:	2380      	movs	r3, #128	; 0x80
    109e:	02db      	lsls	r3, r3, #11
    10a0:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    10a2:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	791b      	ldrb	r3, [r3, #4]
    10a8:	041b      	lsls	r3, r3, #16
    10aa:	0019      	movs	r1, r3
    10ac:	23c0      	movs	r3, #192	; 0xc0
    10ae:	029b      	lsls	r3, r3, #10
    10b0:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    10b2:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    10b4:	68fb      	ldr	r3, [r7, #12]
    10b6:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	689b      	ldr	r3, [r3, #8]
    10bc:	035b      	lsls	r3, r3, #13
    10be:	0f5b      	lsrs	r3, r3, #29
    10c0:	b2db      	uxtb	r3, r3
    10c2:	001a      	movs	r2, r3
    10c4:	2308      	movs	r3, #8
    10c6:	4093      	lsls	r3, r2
    10c8:	b29a      	uxth	r2, r3
    10ca:	4b10      	ldr	r3, [pc, #64]	; (110c <nvm_set_config+0xd4>)
    10cc:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	689b      	ldr	r3, [r3, #8]
    10d2:	b29a      	uxth	r2, r3
    10d4:	4b0d      	ldr	r3, [pc, #52]	; (110c <nvm_set_config+0xd4>)
    10d6:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	785a      	ldrb	r2, [r3, #1]
    10dc:	4b0b      	ldr	r3, [pc, #44]	; (110c <nvm_set_config+0xd4>)
    10de:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	8b1b      	ldrh	r3, [r3, #24]
    10e4:	b29b      	uxth	r3, r3
    10e6:	001a      	movs	r2, r3
    10e8:	2380      	movs	r3, #128	; 0x80
    10ea:	005b      	lsls	r3, r3, #1
    10ec:	4013      	ands	r3, r2
    10ee:	d001      	beq.n	10f4 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    10f0:	2310      	movs	r3, #16
    10f2:	e000      	b.n	10f6 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    10f4:	2300      	movs	r3, #0
}
    10f6:	0018      	movs	r0, r3
    10f8:	46bd      	mov	sp, r7
    10fa:	b004      	add	sp, #16
    10fc:	bd80      	pop	{r7, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	41004000 	.word	0x41004000
    1104:	00000fdd 	.word	0x00000fdd
    1108:	00000fb5 	.word	0x00000fb5
    110c:	20000084 	.word	0x20000084

00001110 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1110:	b580      	push	{r7, lr}
    1112:	b086      	sub	sp, #24
    1114:	af00      	add	r7, sp, #0
    1116:	60b9      	str	r1, [r7, #8]
    1118:	607a      	str	r2, [r7, #4]
    111a:	230f      	movs	r3, #15
    111c:	18fb      	adds	r3, r7, r3
    111e:	1c02      	adds	r2, r0, #0
    1120:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1122:	4b3a      	ldr	r3, [pc, #232]	; (120c <nvm_execute_command+0xfc>)
    1124:	881b      	ldrh	r3, [r3, #0]
    1126:	001a      	movs	r2, r3
    1128:	4b38      	ldr	r3, [pc, #224]	; (120c <nvm_execute_command+0xfc>)
    112a:	885b      	ldrh	r3, [r3, #2]
    112c:	435a      	muls	r2, r3
    112e:	68bb      	ldr	r3, [r7, #8]
    1130:	429a      	cmp	r2, r3
    1132:	d209      	bcs.n	1148 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1134:	68bb      	ldr	r3, [r7, #8]
    1136:	4a36      	ldr	r2, [pc, #216]	; (1210 <nvm_execute_command+0x100>)
    1138:	4293      	cmp	r3, r2
    113a:	d903      	bls.n	1144 <nvm_execute_command+0x34>
    113c:	68bb      	ldr	r3, [r7, #8]
    113e:	4a35      	ldr	r2, [pc, #212]	; (1214 <nvm_execute_command+0x104>)
    1140:	4293      	cmp	r3, r2
    1142:	d901      	bls.n	1148 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1144:	2318      	movs	r3, #24
    1146:	e05c      	b.n	1202 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1148:	4b33      	ldr	r3, [pc, #204]	; (1218 <nvm_execute_command+0x108>)
    114a:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    114c:	697b      	ldr	r3, [r7, #20]
    114e:	685b      	ldr	r3, [r3, #4]
    1150:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1152:	693b      	ldr	r3, [r7, #16]
    1154:	2280      	movs	r2, #128	; 0x80
    1156:	02d2      	lsls	r2, r2, #11
    1158:	431a      	orrs	r2, r3
    115a:	697b      	ldr	r3, [r7, #20]
    115c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    115e:	697b      	ldr	r3, [r7, #20]
    1160:	2220      	movs	r2, #32
    1162:	32ff      	adds	r2, #255	; 0xff
    1164:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1166:	4b2d      	ldr	r3, [pc, #180]	; (121c <nvm_execute_command+0x10c>)
    1168:	4798      	blx	r3
    116a:	0003      	movs	r3, r0
    116c:	001a      	movs	r2, r3
    116e:	2301      	movs	r3, #1
    1170:	4053      	eors	r3, r2
    1172:	b2db      	uxtb	r3, r3
    1174:	2b00      	cmp	r3, #0
    1176:	d004      	beq.n	1182 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1178:	697b      	ldr	r3, [r7, #20]
    117a:	693a      	ldr	r2, [r7, #16]
    117c:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    117e:	2305      	movs	r3, #5
    1180:	e03f      	b.n	1202 <nvm_execute_command+0xf2>
	}

	switch (command) {
    1182:	230f      	movs	r3, #15
    1184:	18fb      	adds	r3, r7, r3
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	2b45      	cmp	r3, #69	; 0x45
    118a:	d81d      	bhi.n	11c8 <nvm_execute_command+0xb8>
    118c:	009a      	lsls	r2, r3, #2
    118e:	4b24      	ldr	r3, [pc, #144]	; (1220 <nvm_execute_command+0x110>)
    1190:	18d3      	adds	r3, r2, r3
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1196:	697b      	ldr	r3, [r7, #20]
    1198:	8b1b      	ldrh	r3, [r3, #24]
    119a:	b29b      	uxth	r3, r3
    119c:	001a      	movs	r2, r3
    119e:	2380      	movs	r3, #128	; 0x80
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	4013      	ands	r3, r2
    11a4:	d004      	beq.n	11b0 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    11a6:	697b      	ldr	r3, [r7, #20]
    11a8:	693a      	ldr	r2, [r7, #16]
    11aa:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    11ac:	2310      	movs	r3, #16
    11ae:	e028      	b.n	1202 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    11b0:	68bb      	ldr	r3, [r7, #8]
    11b2:	089b      	lsrs	r3, r3, #2
    11b4:	005a      	lsls	r2, r3, #1
    11b6:	697b      	ldr	r3, [r7, #20]
    11b8:	61da      	str	r2, [r3, #28]
			break;
    11ba:	e00b      	b.n	11d4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	089b      	lsrs	r3, r3, #2
    11c0:	005a      	lsls	r2, r3, #1
    11c2:	697b      	ldr	r3, [r7, #20]
    11c4:	61da      	str	r2, [r3, #28]
			break;
    11c6:	e005      	b.n	11d4 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    11c8:	697b      	ldr	r3, [r7, #20]
    11ca:	693a      	ldr	r2, [r7, #16]
    11cc:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    11ce:	2317      	movs	r3, #23
    11d0:	e017      	b.n	1202 <nvm_execute_command+0xf2>
			break;
    11d2:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    11d4:	230f      	movs	r3, #15
    11d6:	18fb      	adds	r3, r7, r3
    11d8:	781b      	ldrb	r3, [r3, #0]
    11da:	b29b      	uxth	r3, r3
    11dc:	4a11      	ldr	r2, [pc, #68]	; (1224 <nvm_execute_command+0x114>)
    11de:	4313      	orrs	r3, r2
    11e0:	b29a      	uxth	r2, r3
    11e2:	697b      	ldr	r3, [r7, #20]
    11e4:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	4b0c      	ldr	r3, [pc, #48]	; (121c <nvm_execute_command+0x10c>)
    11ea:	4798      	blx	r3
    11ec:	0003      	movs	r3, r0
    11ee:	001a      	movs	r2, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4053      	eors	r3, r2
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d1f6      	bne.n	11e8 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    11fa:	697b      	ldr	r3, [r7, #20]
    11fc:	693a      	ldr	r2, [r7, #16]
    11fe:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1200:	2300      	movs	r3, #0
}
    1202:	0018      	movs	r0, r3
    1204:	46bd      	mov	sp, r7
    1206:	b006      	add	sp, #24
    1208:	bd80      	pop	{r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000084 	.word	0x20000084
    1210:	00803fff 	.word	0x00803fff
    1214:	00806000 	.word	0x00806000
    1218:	41004000 	.word	0x41004000
    121c:	00000fb5 	.word	0x00000fb5
    1220:	00006468 	.word	0x00006468
    1224:	ffffa500 	.word	0xffffa500

00001228 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1228:	b580      	push	{r7, lr}
    122a:	b088      	sub	sp, #32
    122c:	af00      	add	r7, sp, #0
    122e:	60f8      	str	r0, [r7, #12]
    1230:	60b9      	str	r1, [r7, #8]
    1232:	1dbb      	adds	r3, r7, #6
    1234:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1236:	4b4a      	ldr	r3, [pc, #296]	; (1360 <nvm_write_buffer+0x138>)
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	001a      	movs	r2, r3
    123c:	4b48      	ldr	r3, [pc, #288]	; (1360 <nvm_write_buffer+0x138>)
    123e:	885b      	ldrh	r3, [r3, #2]
    1240:	435a      	muls	r2, r3
	if (destination_address >
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	429a      	cmp	r2, r3
    1246:	d201      	bcs.n	124c <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1248:	2318      	movs	r3, #24
    124a:	e084      	b.n	1356 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    124c:	4b44      	ldr	r3, [pc, #272]	; (1360 <nvm_write_buffer+0x138>)
    124e:	881b      	ldrh	r3, [r3, #0]
    1250:	3b01      	subs	r3, #1
    1252:	001a      	movs	r2, r3
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	4013      	ands	r3, r2
    1258:	d001      	beq.n	125e <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    125a:	2318      	movs	r3, #24
    125c:	e07b      	b.n	1356 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    125e:	4b40      	ldr	r3, [pc, #256]	; (1360 <nvm_write_buffer+0x138>)
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	1dba      	adds	r2, r7, #6
    1264:	8812      	ldrh	r2, [r2, #0]
    1266:	429a      	cmp	r2, r3
    1268:	d901      	bls.n	126e <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    126a:	2317      	movs	r3, #23
    126c:	e073      	b.n	1356 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    126e:	4b3d      	ldr	r3, [pc, #244]	; (1364 <nvm_write_buffer+0x13c>)
    1270:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1272:	4b3d      	ldr	r3, [pc, #244]	; (1368 <nvm_write_buffer+0x140>)
    1274:	4798      	blx	r3
    1276:	0003      	movs	r3, r0
    1278:	001a      	movs	r2, r3
    127a:	2301      	movs	r3, #1
    127c:	4053      	eors	r3, r2
    127e:	b2db      	uxtb	r3, r3
    1280:	2b00      	cmp	r3, #0
    1282:	d001      	beq.n	1288 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    1284:	2305      	movs	r3, #5
    1286:	e066      	b.n	1356 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1288:	697b      	ldr	r3, [r7, #20]
    128a:	4a38      	ldr	r2, [pc, #224]	; (136c <nvm_write_buffer+0x144>)
    128c:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	4b35      	ldr	r3, [pc, #212]	; (1368 <nvm_write_buffer+0x140>)
    1292:	4798      	blx	r3
    1294:	0003      	movs	r3, r0
    1296:	001a      	movs	r2, r3
    1298:	2301      	movs	r3, #1
    129a:	4053      	eors	r3, r2
    129c:	b2db      	uxtb	r3, r3
    129e:	2b00      	cmp	r3, #0
    12a0:	d1f6      	bne.n	1290 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    12a2:	697b      	ldr	r3, [r7, #20]
    12a4:	2220      	movs	r2, #32
    12a6:	32ff      	adds	r2, #255	; 0xff
    12a8:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    12aa:	68fb      	ldr	r3, [r7, #12]
    12ac:	085b      	lsrs	r3, r3, #1
    12ae:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    12b0:	231a      	movs	r3, #26
    12b2:	18fb      	adds	r3, r7, r3
    12b4:	2200      	movs	r2, #0
    12b6:	801a      	strh	r2, [r3, #0]
    12b8:	e032      	b.n	1320 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    12ba:	231a      	movs	r3, #26
    12bc:	18fb      	adds	r3, r7, r3
    12be:	881b      	ldrh	r3, [r3, #0]
    12c0:	68ba      	ldr	r2, [r7, #8]
    12c2:	18d3      	adds	r3, r2, r3
    12c4:	781a      	ldrb	r2, [r3, #0]
    12c6:	2318      	movs	r3, #24
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    12cc:	231a      	movs	r3, #26
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	881a      	ldrh	r2, [r3, #0]
    12d2:	1dbb      	adds	r3, r7, #6
    12d4:	881b      	ldrh	r3, [r3, #0]
    12d6:	3b01      	subs	r3, #1
    12d8:	429a      	cmp	r2, r3
    12da:	da11      	bge.n	1300 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    12dc:	231a      	movs	r3, #26
    12de:	18fb      	adds	r3, r7, r3
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	3301      	adds	r3, #1
    12e4:	68ba      	ldr	r2, [r7, #8]
    12e6:	18d3      	adds	r3, r2, r3
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	021b      	lsls	r3, r3, #8
    12ec:	b21a      	sxth	r2, r3
    12ee:	2318      	movs	r3, #24
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	2100      	movs	r1, #0
    12f4:	5e5b      	ldrsh	r3, [r3, r1]
    12f6:	4313      	orrs	r3, r2
    12f8:	b21a      	sxth	r2, r3
    12fa:	2318      	movs	r3, #24
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    1300:	69fb      	ldr	r3, [r7, #28]
    1302:	1c5a      	adds	r2, r3, #1
    1304:	61fa      	str	r2, [r7, #28]
    1306:	005b      	lsls	r3, r3, #1
    1308:	001a      	movs	r2, r3
    130a:	2318      	movs	r3, #24
    130c:	18fb      	adds	r3, r7, r3
    130e:	881b      	ldrh	r3, [r3, #0]
    1310:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1312:	231a      	movs	r3, #26
    1314:	18fb      	adds	r3, r7, r3
    1316:	221a      	movs	r2, #26
    1318:	18ba      	adds	r2, r7, r2
    131a:	8812      	ldrh	r2, [r2, #0]
    131c:	3202      	adds	r2, #2
    131e:	801a      	strh	r2, [r3, #0]
    1320:	231a      	movs	r3, #26
    1322:	18fa      	adds	r2, r7, r3
    1324:	1dbb      	adds	r3, r7, #6
    1326:	8812      	ldrh	r2, [r2, #0]
    1328:	881b      	ldrh	r3, [r3, #0]
    132a:	429a      	cmp	r2, r3
    132c:	d3c5      	bcc.n	12ba <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    132e:	4b0c      	ldr	r3, [pc, #48]	; (1360 <nvm_write_buffer+0x138>)
    1330:	791b      	ldrb	r3, [r3, #4]
    1332:	2201      	movs	r2, #1
    1334:	4053      	eors	r3, r2
    1336:	b2db      	uxtb	r3, r3
    1338:	2b00      	cmp	r3, #0
    133a:	d00b      	beq.n	1354 <nvm_write_buffer+0x12c>
    133c:	1dbb      	adds	r3, r7, #6
    133e:	881b      	ldrh	r3, [r3, #0]
    1340:	2b3f      	cmp	r3, #63	; 0x3f
    1342:	d807      	bhi.n	1354 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    1344:	68fb      	ldr	r3, [r7, #12]
    1346:	2200      	movs	r2, #0
    1348:	0019      	movs	r1, r3
    134a:	2004      	movs	r0, #4
    134c:	4b08      	ldr	r3, [pc, #32]	; (1370 <nvm_write_buffer+0x148>)
    134e:	4798      	blx	r3
    1350:	0003      	movs	r3, r0
    1352:	e000      	b.n	1356 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    1354:	2300      	movs	r3, #0
}
    1356:	0018      	movs	r0, r3
    1358:	46bd      	mov	sp, r7
    135a:	b008      	add	sp, #32
    135c:	bd80      	pop	{r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	20000084 	.word	0x20000084
    1364:	41004000 	.word	0x41004000
    1368:	00000fb5 	.word	0x00000fb5
    136c:	ffffa544 	.word	0xffffa544
    1370:	00001111 	.word	0x00001111

00001374 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    1374:	b580      	push	{r7, lr}
    1376:	b088      	sub	sp, #32
    1378:	af00      	add	r7, sp, #0
    137a:	60f8      	str	r0, [r7, #12]
    137c:	60b9      	str	r1, [r7, #8]
    137e:	1dbb      	adds	r3, r7, #6
    1380:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1382:	4b38      	ldr	r3, [pc, #224]	; (1464 <nvm_read_buffer+0xf0>)
    1384:	881b      	ldrh	r3, [r3, #0]
    1386:	001a      	movs	r2, r3
    1388:	4b36      	ldr	r3, [pc, #216]	; (1464 <nvm_read_buffer+0xf0>)
    138a:	885b      	ldrh	r3, [r3, #2]
    138c:	435a      	muls	r2, r3
	if (source_address >
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	429a      	cmp	r2, r3
    1392:	d201      	bcs.n	1398 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1394:	2318      	movs	r3, #24
    1396:	e060      	b.n	145a <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    1398:	4b32      	ldr	r3, [pc, #200]	; (1464 <nvm_read_buffer+0xf0>)
    139a:	881b      	ldrh	r3, [r3, #0]
    139c:	3b01      	subs	r3, #1
    139e:	001a      	movs	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4013      	ands	r3, r2
    13a4:	d001      	beq.n	13aa <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    13a6:	2318      	movs	r3, #24
    13a8:	e057      	b.n	145a <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    13aa:	4b2e      	ldr	r3, [pc, #184]	; (1464 <nvm_read_buffer+0xf0>)
    13ac:	881b      	ldrh	r3, [r3, #0]
    13ae:	1dba      	adds	r2, r7, #6
    13b0:	8812      	ldrh	r2, [r2, #0]
    13b2:	429a      	cmp	r2, r3
    13b4:	d901      	bls.n	13ba <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    13b6:	2317      	movs	r3, #23
    13b8:	e04f      	b.n	145a <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    13ba:	4b2b      	ldr	r3, [pc, #172]	; (1468 <nvm_read_buffer+0xf4>)
    13bc:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    13be:	4b2b      	ldr	r3, [pc, #172]	; (146c <nvm_read_buffer+0xf8>)
    13c0:	4798      	blx	r3
    13c2:	0003      	movs	r3, r0
    13c4:	001a      	movs	r2, r3
    13c6:	2301      	movs	r3, #1
    13c8:	4053      	eors	r3, r2
    13ca:	b2db      	uxtb	r3, r3
    13cc:	2b00      	cmp	r3, #0
    13ce:	d001      	beq.n	13d4 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    13d0:	2305      	movs	r3, #5
    13d2:	e042      	b.n	145a <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    13d4:	697b      	ldr	r3, [r7, #20]
    13d6:	2220      	movs	r2, #32
    13d8:	32ff      	adds	r2, #255	; 0xff
    13da:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	085b      	lsrs	r3, r3, #1
    13e0:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    13e2:	231a      	movs	r3, #26
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	2200      	movs	r2, #0
    13e8:	801a      	strh	r2, [r3, #0]
    13ea:	e02e      	b.n	144a <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    13ec:	69fb      	ldr	r3, [r7, #28]
    13ee:	1c5a      	adds	r2, r3, #1
    13f0:	61fa      	str	r2, [r7, #28]
    13f2:	005b      	lsls	r3, r3, #1
    13f4:	001a      	movs	r2, r3
    13f6:	2312      	movs	r3, #18
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	8812      	ldrh	r2, [r2, #0]
    13fc:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    13fe:	231a      	movs	r3, #26
    1400:	18fb      	adds	r3, r7, r3
    1402:	881b      	ldrh	r3, [r3, #0]
    1404:	68ba      	ldr	r2, [r7, #8]
    1406:	18d3      	adds	r3, r2, r3
    1408:	2212      	movs	r2, #18
    140a:	18ba      	adds	r2, r7, r2
    140c:	8812      	ldrh	r2, [r2, #0]
    140e:	b2d2      	uxtb	r2, r2
    1410:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1412:	231a      	movs	r3, #26
    1414:	18fb      	adds	r3, r7, r3
    1416:	881a      	ldrh	r2, [r3, #0]
    1418:	1dbb      	adds	r3, r7, #6
    141a:	881b      	ldrh	r3, [r3, #0]
    141c:	3b01      	subs	r3, #1
    141e:	429a      	cmp	r2, r3
    1420:	da0c      	bge.n	143c <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    1422:	231a      	movs	r3, #26
    1424:	18fb      	adds	r3, r7, r3
    1426:	881b      	ldrh	r3, [r3, #0]
    1428:	3301      	adds	r3, #1
    142a:	68ba      	ldr	r2, [r7, #8]
    142c:	18d3      	adds	r3, r2, r3
    142e:	2212      	movs	r2, #18
    1430:	18ba      	adds	r2, r7, r2
    1432:	8812      	ldrh	r2, [r2, #0]
    1434:	0a12      	lsrs	r2, r2, #8
    1436:	b292      	uxth	r2, r2
    1438:	b2d2      	uxtb	r2, r2
    143a:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    143c:	231a      	movs	r3, #26
    143e:	18fb      	adds	r3, r7, r3
    1440:	221a      	movs	r2, #26
    1442:	18ba      	adds	r2, r7, r2
    1444:	8812      	ldrh	r2, [r2, #0]
    1446:	3202      	adds	r2, #2
    1448:	801a      	strh	r2, [r3, #0]
    144a:	231a      	movs	r3, #26
    144c:	18fa      	adds	r2, r7, r3
    144e:	1dbb      	adds	r3, r7, #6
    1450:	8812      	ldrh	r2, [r2, #0]
    1452:	881b      	ldrh	r3, [r3, #0]
    1454:	429a      	cmp	r2, r3
    1456:	d3c9      	bcc.n	13ec <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    1458:	2300      	movs	r3, #0
}
    145a:	0018      	movs	r0, r3
    145c:	46bd      	mov	sp, r7
    145e:	b008      	add	sp, #32
    1460:	bd80      	pop	{r7, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	20000084 	.word	0x20000084
    1468:	41004000 	.word	0x41004000
    146c:	00000fb5 	.word	0x00000fb5

00001470 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    1470:	b580      	push	{r7, lr}
    1472:	b084      	sub	sp, #16
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1478:	4b23      	ldr	r3, [pc, #140]	; (1508 <nvm_erase_row+0x98>)
    147a:	881b      	ldrh	r3, [r3, #0]
    147c:	001a      	movs	r2, r3
    147e:	4b22      	ldr	r3, [pc, #136]	; (1508 <nvm_erase_row+0x98>)
    1480:	885b      	ldrh	r3, [r3, #2]
    1482:	435a      	muls	r2, r3
	if (row_address >
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	429a      	cmp	r2, r3
    1488:	d201      	bcs.n	148e <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    148a:	2318      	movs	r3, #24
    148c:	e037      	b.n	14fe <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    148e:	4b1e      	ldr	r3, [pc, #120]	; (1508 <nvm_erase_row+0x98>)
    1490:	881b      	ldrh	r3, [r3, #0]
    1492:	009b      	lsls	r3, r3, #2
    1494:	3b01      	subs	r3, #1
    1496:	001a      	movs	r2, r3
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	4013      	ands	r3, r2
    149c:	d001      	beq.n	14a2 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    149e:	2318      	movs	r3, #24
    14a0:	e02d      	b.n	14fe <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    14a2:	4b1a      	ldr	r3, [pc, #104]	; (150c <nvm_erase_row+0x9c>)
    14a4:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    14a6:	4b1a      	ldr	r3, [pc, #104]	; (1510 <nvm_erase_row+0xa0>)
    14a8:	4798      	blx	r3
    14aa:	0003      	movs	r3, r0
    14ac:	001a      	movs	r2, r3
    14ae:	2301      	movs	r3, #1
    14b0:	4053      	eors	r3, r2
    14b2:	b2db      	uxtb	r3, r3
    14b4:	2b00      	cmp	r3, #0
    14b6:	d001      	beq.n	14bc <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    14b8:	2305      	movs	r3, #5
    14ba:	e020      	b.n	14fe <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    14bc:	68fb      	ldr	r3, [r7, #12]
    14be:	2220      	movs	r2, #32
    14c0:	32ff      	adds	r2, #255	; 0xff
    14c2:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	089b      	lsrs	r3, r3, #2
    14c8:	005a      	lsls	r2, r3, #1
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    14ce:	68fb      	ldr	r3, [r7, #12]
    14d0:	4a10      	ldr	r2, [pc, #64]	; (1514 <nvm_erase_row+0xa4>)
    14d2:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    14d4:	46c0      	nop			; (mov r8, r8)
    14d6:	4b0e      	ldr	r3, [pc, #56]	; (1510 <nvm_erase_row+0xa0>)
    14d8:	4798      	blx	r3
    14da:	0003      	movs	r3, r0
    14dc:	001a      	movs	r2, r3
    14de:	2301      	movs	r3, #1
    14e0:	4053      	eors	r3, r2
    14e2:	b2db      	uxtb	r3, r3
    14e4:	2b00      	cmp	r3, #0
    14e6:	d1f6      	bne.n	14d6 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	8b1b      	ldrh	r3, [r3, #24]
    14ec:	b29b      	uxth	r3, r3
    14ee:	b2db      	uxtb	r3, r3
    14f0:	001a      	movs	r2, r3
    14f2:	231c      	movs	r3, #28
    14f4:	4013      	ands	r3, r2
    14f6:	d001      	beq.n	14fc <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    14f8:	2304      	movs	r3, #4
    14fa:	e000      	b.n	14fe <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    14fc:	2300      	movs	r3, #0
}
    14fe:	0018      	movs	r0, r3
    1500:	46bd      	mov	sp, r7
    1502:	b004      	add	sp, #16
    1504:	bd80      	pop	{r7, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	20000084 	.word	0x20000084
    150c:	41004000 	.word	0x41004000
    1510:	00000fb5 	.word	0x00000fb5
    1514:	ffffa502 	.word	0xffffa502

00001518 <system_apb_clock_set_mask>:
{
    1518:	b580      	push	{r7, lr}
    151a:	b082      	sub	sp, #8
    151c:	af00      	add	r7, sp, #0
    151e:	0002      	movs	r2, r0
    1520:	6039      	str	r1, [r7, #0]
    1522:	1dfb      	adds	r3, r7, #7
    1524:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1526:	1dfb      	adds	r3, r7, #7
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b01      	cmp	r3, #1
    152c:	d00a      	beq.n	1544 <system_apb_clock_set_mask+0x2c>
    152e:	2b02      	cmp	r3, #2
    1530:	d00f      	beq.n	1552 <system_apb_clock_set_mask+0x3a>
    1532:	2b00      	cmp	r3, #0
    1534:	d114      	bne.n	1560 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1536:	4b0e      	ldr	r3, [pc, #56]	; (1570 <system_apb_clock_set_mask+0x58>)
    1538:	4a0d      	ldr	r2, [pc, #52]	; (1570 <system_apb_clock_set_mask+0x58>)
    153a:	6991      	ldr	r1, [r2, #24]
    153c:	683a      	ldr	r2, [r7, #0]
    153e:	430a      	orrs	r2, r1
    1540:	619a      	str	r2, [r3, #24]
			break;
    1542:	e00f      	b.n	1564 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1544:	4b0a      	ldr	r3, [pc, #40]	; (1570 <system_apb_clock_set_mask+0x58>)
    1546:	4a0a      	ldr	r2, [pc, #40]	; (1570 <system_apb_clock_set_mask+0x58>)
    1548:	69d1      	ldr	r1, [r2, #28]
    154a:	683a      	ldr	r2, [r7, #0]
    154c:	430a      	orrs	r2, r1
    154e:	61da      	str	r2, [r3, #28]
			break;
    1550:	e008      	b.n	1564 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1552:	4b07      	ldr	r3, [pc, #28]	; (1570 <system_apb_clock_set_mask+0x58>)
    1554:	4a06      	ldr	r2, [pc, #24]	; (1570 <system_apb_clock_set_mask+0x58>)
    1556:	6a11      	ldr	r1, [r2, #32]
    1558:	683a      	ldr	r2, [r7, #0]
    155a:	430a      	orrs	r2, r1
    155c:	621a      	str	r2, [r3, #32]
			break;
    155e:	e001      	b.n	1564 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1560:	2317      	movs	r3, #23
    1562:	e000      	b.n	1566 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1564:	2300      	movs	r3, #0
}
    1566:	0018      	movs	r0, r3
    1568:	46bd      	mov	sp, r7
    156a:	b002      	add	sp, #8
    156c:	bd80      	pop	{r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	40000400 	.word	0x40000400

00001574 <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    157c:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	b2da      	uxtb	r2, r3
    1582:	230f      	movs	r3, #15
    1584:	18fb      	adds	r3, r7, r3
    1586:	211f      	movs	r1, #31
    1588:	400a      	ands	r2, r1
    158a:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	095a      	lsrs	r2, r3, #5
    1590:	230e      	movs	r3, #14
    1592:	18fb      	adds	r3, r7, r3
    1594:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	43da      	mvns	r2, r3
    159a:	683b      	ldr	r3, [r7, #0]
    159c:	429a      	cmp	r2, r3
    159e:	d001      	beq.n	15a4 <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15a0:	2317      	movs	r3, #23
    15a2:	e02d      	b.n	1600 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
    15a4:	230e      	movs	r3, #14
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781b      	ldrb	r3, [r3, #0]
    15aa:	2b01      	cmp	r3, #1
    15ac:	d00d      	beq.n	15ca <system_peripheral_lock+0x56>
    15ae:	2b02      	cmp	r3, #2
    15b0:	d015      	beq.n	15de <system_peripheral_lock+0x6a>
    15b2:	2b00      	cmp	r3, #0
    15b4:	d121      	bne.n	15fa <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
    15b6:	2380      	movs	r3, #128	; 0x80
    15b8:	05db      	lsls	r3, r3, #23
    15ba:	220f      	movs	r2, #15
    15bc:	18ba      	adds	r2, r7, r2
    15be:	7812      	ldrb	r2, [r2, #0]
    15c0:	2101      	movs	r1, #1
    15c2:	4091      	lsls	r1, r2
    15c4:	000a      	movs	r2, r1
    15c6:	605a      	str	r2, [r3, #4]
			break;
    15c8:	e019      	b.n	15fe <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
    15ca:	2382      	movs	r3, #130	; 0x82
    15cc:	05db      	lsls	r3, r3, #23
    15ce:	220f      	movs	r2, #15
    15d0:	18ba      	adds	r2, r7, r2
    15d2:	7812      	ldrb	r2, [r2, #0]
    15d4:	2101      	movs	r1, #1
    15d6:	4091      	lsls	r1, r2
    15d8:	000a      	movs	r2, r1
    15da:	605a      	str	r2, [r3, #4]
			break;
    15dc:	e00f      	b.n	15fe <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
    15de:	2101      	movs	r1, #1
    15e0:	2002      	movs	r0, #2
    15e2:	4b09      	ldr	r3, [pc, #36]	; (1608 <system_peripheral_lock+0x94>)
    15e4:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
    15e6:	2384      	movs	r3, #132	; 0x84
    15e8:	05db      	lsls	r3, r3, #23
    15ea:	220f      	movs	r2, #15
    15ec:	18ba      	adds	r2, r7, r2
    15ee:	7812      	ldrb	r2, [r2, #0]
    15f0:	2101      	movs	r1, #1
    15f2:	4091      	lsls	r1, r2
    15f4:	000a      	movs	r2, r1
    15f6:	605a      	str	r2, [r3, #4]
			break;
    15f8:	e001      	b.n	15fe <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    15fa:	2317      	movs	r3, #23
    15fc:	e000      	b.n	1600 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
    15fe:	2300      	movs	r3, #0
}
    1600:	0018      	movs	r0, r3
    1602:	46bd      	mov	sp, r7
    1604:	b004      	add	sp, #16
    1606:	bd80      	pop	{r7, pc}
    1608:	00001519 	.word	0x00001519

0000160c <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
    160c:	b580      	push	{r7, lr}
    160e:	b084      	sub	sp, #16
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
    1614:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	b2da      	uxtb	r2, r3
    161a:	230f      	movs	r3, #15
    161c:	18fb      	adds	r3, r7, r3
    161e:	211f      	movs	r1, #31
    1620:	400a      	ands	r2, r1
    1622:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	095a      	lsrs	r2, r3, #5
    1628:	230e      	movs	r3, #14
    162a:	18fb      	adds	r3, r7, r3
    162c:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	43da      	mvns	r2, r3
    1632:	683b      	ldr	r3, [r7, #0]
    1634:	429a      	cmp	r2, r3
    1636:	d001      	beq.n	163c <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1638:	2317      	movs	r3, #23
    163a:	e02d      	b.n	1698 <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
    163c:	230e      	movs	r3, #14
    163e:	18fb      	adds	r3, r7, r3
    1640:	781b      	ldrb	r3, [r3, #0]
    1642:	2b01      	cmp	r3, #1
    1644:	d00d      	beq.n	1662 <system_peripheral_unlock+0x56>
    1646:	2b02      	cmp	r3, #2
    1648:	d015      	beq.n	1676 <system_peripheral_unlock+0x6a>
    164a:	2b00      	cmp	r3, #0
    164c:	d121      	bne.n	1692 <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
    164e:	2380      	movs	r3, #128	; 0x80
    1650:	05db      	lsls	r3, r3, #23
    1652:	220f      	movs	r2, #15
    1654:	18ba      	adds	r2, r7, r2
    1656:	7812      	ldrb	r2, [r2, #0]
    1658:	2101      	movs	r1, #1
    165a:	4091      	lsls	r1, r2
    165c:	000a      	movs	r2, r1
    165e:	601a      	str	r2, [r3, #0]
			break;
    1660:	e019      	b.n	1696 <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
    1662:	2382      	movs	r3, #130	; 0x82
    1664:	05db      	lsls	r3, r3, #23
    1666:	220f      	movs	r2, #15
    1668:	18ba      	adds	r2, r7, r2
    166a:	7812      	ldrb	r2, [r2, #0]
    166c:	2101      	movs	r1, #1
    166e:	4091      	lsls	r1, r2
    1670:	000a      	movs	r2, r1
    1672:	601a      	str	r2, [r3, #0]
			break;
    1674:	e00f      	b.n	1696 <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
    1676:	2101      	movs	r1, #1
    1678:	2002      	movs	r0, #2
    167a:	4b09      	ldr	r3, [pc, #36]	; (16a0 <system_peripheral_unlock+0x94>)
    167c:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
    167e:	2384      	movs	r3, #132	; 0x84
    1680:	05db      	lsls	r3, r3, #23
    1682:	220f      	movs	r2, #15
    1684:	18ba      	adds	r2, r7, r2
    1686:	7812      	ldrb	r2, [r2, #0]
    1688:	2101      	movs	r1, #1
    168a:	4091      	lsls	r1, r2
    168c:	000a      	movs	r2, r1
    168e:	601a      	str	r2, [r3, #0]
			break;
    1690:	e001      	b.n	1696 <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1692:	2317      	movs	r3, #23
    1694:	e000      	b.n	1698 <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
    1696:	2300      	movs	r3, #0
}
    1698:	0018      	movs	r0, r3
    169a:	46bd      	mov	sp, r7
    169c:	b004      	add	sp, #16
    169e:	bd80      	pop	{r7, pc}
    16a0:	00001519 	.word	0x00001519

000016a4 <system_pinmux_get_config_defaults>:
{
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16ac:	687b      	ldr	r3, [r7, #4]
    16ae:	2280      	movs	r2, #128	; 0x80
    16b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	2200      	movs	r2, #0
    16b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	2201      	movs	r2, #1
    16bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    16be:	687b      	ldr	r3, [r7, #4]
    16c0:	2200      	movs	r2, #0
    16c2:	70da      	strb	r2, [r3, #3]
}
    16c4:	46c0      	nop			; (mov r8, r8)
    16c6:	46bd      	mov	sp, r7
    16c8:	b002      	add	sp, #8
    16ca:	bd80      	pop	{r7, pc}

000016cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b084      	sub	sp, #16
    16d0:	af00      	add	r7, sp, #0
    16d2:	0002      	movs	r2, r0
    16d4:	6039      	str	r1, [r7, #0]
    16d6:	1dfb      	adds	r3, r7, #7
    16d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    16da:	230c      	movs	r3, #12
    16dc:	18fb      	adds	r3, r7, r3
    16de:	0018      	movs	r0, r3
    16e0:	4b10      	ldr	r3, [pc, #64]	; (1724 <port_pin_set_config+0x58>)
    16e2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    16e4:	230c      	movs	r3, #12
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	2280      	movs	r2, #128	; 0x80
    16ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    16ec:	683b      	ldr	r3, [r7, #0]
    16ee:	781a      	ldrb	r2, [r3, #0]
    16f0:	230c      	movs	r3, #12
    16f2:	18fb      	adds	r3, r7, r3
    16f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    16f6:	683b      	ldr	r3, [r7, #0]
    16f8:	785a      	ldrb	r2, [r3, #1]
    16fa:	230c      	movs	r3, #12
    16fc:	18fb      	adds	r3, r7, r3
    16fe:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1700:	683b      	ldr	r3, [r7, #0]
    1702:	789a      	ldrb	r2, [r3, #2]
    1704:	230c      	movs	r3, #12
    1706:	18fb      	adds	r3, r7, r3
    1708:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    170a:	230c      	movs	r3, #12
    170c:	18fa      	adds	r2, r7, r3
    170e:	1dfb      	adds	r3, r7, #7
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	0011      	movs	r1, r2
    1714:	0018      	movs	r0, r3
    1716:	4b04      	ldr	r3, [pc, #16]	; (1728 <port_pin_set_config+0x5c>)
    1718:	4798      	blx	r3
}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	46bd      	mov	sp, r7
    171e:	b004      	add	sp, #16
    1720:	bd80      	pop	{r7, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	000016a5 	.word	0x000016a5
    1728:	000043c5 	.word	0x000043c5

0000172c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1730:	46c0      	nop			; (mov r8, r8)
    1732:	46bd      	mov	sp, r7
    1734:	bd80      	pop	{r7, pc}
	...

00001738 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    173e:	4b10      	ldr	r3, [pc, #64]	; (1780 <cpu_irq_enter_critical+0x48>)
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	2b00      	cmp	r3, #0
    1744:	d112      	bne.n	176c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1746:	f3ef 8310 	mrs	r3, PRIMASK
    174a:	607b      	str	r3, [r7, #4]
  return(result);
    174c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    174e:	2b00      	cmp	r3, #0
    1750:	d109      	bne.n	1766 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1752:	b672      	cpsid	i
    1754:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1758:	4b0a      	ldr	r3, [pc, #40]	; (1784 <cpu_irq_enter_critical+0x4c>)
    175a:	2200      	movs	r2, #0
    175c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    175e:	4b0a      	ldr	r3, [pc, #40]	; (1788 <cpu_irq_enter_critical+0x50>)
    1760:	2201      	movs	r2, #1
    1762:	701a      	strb	r2, [r3, #0]
    1764:	e002      	b.n	176c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1766:	4b08      	ldr	r3, [pc, #32]	; (1788 <cpu_irq_enter_critical+0x50>)
    1768:	2200      	movs	r2, #0
    176a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    176c:	4b04      	ldr	r3, [pc, #16]	; (1780 <cpu_irq_enter_critical+0x48>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	1c5a      	adds	r2, r3, #1
    1772:	4b03      	ldr	r3, [pc, #12]	; (1780 <cpu_irq_enter_critical+0x48>)
    1774:	601a      	str	r2, [r3, #0]
}
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	46bd      	mov	sp, r7
    177a:	b002      	add	sp, #8
    177c:	bd80      	pop	{r7, pc}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	2000008c 	.word	0x2000008c
    1784:	20000000 	.word	0x20000000
    1788:	20000090 	.word	0x20000090

0000178c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    178c:	b580      	push	{r7, lr}
    178e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1790:	4b0b      	ldr	r3, [pc, #44]	; (17c0 <cpu_irq_leave_critical+0x34>)
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	1e5a      	subs	r2, r3, #1
    1796:	4b0a      	ldr	r3, [pc, #40]	; (17c0 <cpu_irq_leave_critical+0x34>)
    1798:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    179a:	4b09      	ldr	r3, [pc, #36]	; (17c0 <cpu_irq_leave_critical+0x34>)
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	2b00      	cmp	r3, #0
    17a0:	d10a      	bne.n	17b8 <cpu_irq_leave_critical+0x2c>
    17a2:	4b08      	ldr	r3, [pc, #32]	; (17c4 <cpu_irq_leave_critical+0x38>)
    17a4:	781b      	ldrb	r3, [r3, #0]
    17a6:	b2db      	uxtb	r3, r3
    17a8:	2b00      	cmp	r3, #0
    17aa:	d005      	beq.n	17b8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    17ac:	4b06      	ldr	r3, [pc, #24]	; (17c8 <cpu_irq_leave_critical+0x3c>)
    17ae:	2201      	movs	r2, #1
    17b0:	701a      	strb	r2, [r3, #0]
    17b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    17b6:	b662      	cpsie	i
	}
}
    17b8:	46c0      	nop			; (mov r8, r8)
    17ba:	46bd      	mov	sp, r7
    17bc:	bd80      	pop	{r7, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	2000008c 	.word	0x2000008c
    17c4:	20000090 	.word	0x20000090
    17c8:	20000000 	.word	0x20000000

000017cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b082      	sub	sp, #8
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	2200      	movs	r2, #0
    17d8:	701a      	strb	r2, [r3, #0]
}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	46bd      	mov	sp, r7
    17de:	b002      	add	sp, #8
    17e0:	bd80      	pop	{r7, pc}

000017e2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    17e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e4:	b08d      	sub	sp, #52	; 0x34
    17e6:	af00      	add	r7, sp, #0
    17e8:	60b8      	str	r0, [r7, #8]
    17ea:	60f9      	str	r1, [r7, #12]
    17ec:	603a      	str	r2, [r7, #0]
    17ee:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    17f0:	2300      	movs	r3, #0
    17f2:	2400      	movs	r4, #0
    17f4:	623b      	str	r3, [r7, #32]
    17f6:	627c      	str	r4, [r7, #36]	; 0x24
    17f8:	2300      	movs	r3, #0
    17fa:	2400      	movs	r4, #0
    17fc:	61bb      	str	r3, [r7, #24]
    17fe:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1800:	233f      	movs	r3, #63	; 0x3f
    1802:	62fb      	str	r3, [r7, #44]	; 0x2c
    1804:	e053      	b.n	18ae <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    1806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1808:	3b20      	subs	r3, #32
    180a:	2b00      	cmp	r3, #0
    180c:	db04      	blt.n	1818 <long_division+0x36>
    180e:	2201      	movs	r2, #1
    1810:	409a      	lsls	r2, r3
    1812:	0013      	movs	r3, r2
    1814:	617b      	str	r3, [r7, #20]
    1816:	e00b      	b.n	1830 <long_division+0x4e>
    1818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    181a:	2220      	movs	r2, #32
    181c:	1ad3      	subs	r3, r2, r3
    181e:	2201      	movs	r2, #1
    1820:	40da      	lsrs	r2, r3
    1822:	0013      	movs	r3, r2
    1824:	2100      	movs	r1, #0
    1826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1828:	4091      	lsls	r1, r2
    182a:	000a      	movs	r2, r1
    182c:	4313      	orrs	r3, r2
    182e:	617b      	str	r3, [r7, #20]
    1830:	2201      	movs	r2, #1
    1832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1834:	409a      	lsls	r2, r3
    1836:	0013      	movs	r3, r2
    1838:	613b      	str	r3, [r7, #16]

		r = r << 1;
    183a:	69bb      	ldr	r3, [r7, #24]
    183c:	69fc      	ldr	r4, [r7, #28]
    183e:	18db      	adds	r3, r3, r3
    1840:	4164      	adcs	r4, r4
    1842:	61bb      	str	r3, [r7, #24]
    1844:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1846:	68bb      	ldr	r3, [r7, #8]
    1848:	693a      	ldr	r2, [r7, #16]
    184a:	401a      	ands	r2, r3
    184c:	0015      	movs	r5, r2
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	697a      	ldr	r2, [r7, #20]
    1852:	401a      	ands	r2, r3
    1854:	0016      	movs	r6, r2
    1856:	002b      	movs	r3, r5
    1858:	4333      	orrs	r3, r6
    185a:	d007      	beq.n	186c <long_division+0x8a>
			r |= 0x01;
    185c:	69bb      	ldr	r3, [r7, #24]
    185e:	2201      	movs	r2, #1
    1860:	4313      	orrs	r3, r2
    1862:	61bb      	str	r3, [r7, #24]
    1864:	69fb      	ldr	r3, [r7, #28]
    1866:	2200      	movs	r2, #0
    1868:	4313      	orrs	r3, r2
    186a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    186c:	687a      	ldr	r2, [r7, #4]
    186e:	69fb      	ldr	r3, [r7, #28]
    1870:	429a      	cmp	r2, r3
    1872:	d819      	bhi.n	18a8 <long_division+0xc6>
    1874:	687a      	ldr	r2, [r7, #4]
    1876:	69fb      	ldr	r3, [r7, #28]
    1878:	429a      	cmp	r2, r3
    187a:	d103      	bne.n	1884 <long_division+0xa2>
    187c:	683a      	ldr	r2, [r7, #0]
    187e:	69bb      	ldr	r3, [r7, #24]
    1880:	429a      	cmp	r2, r3
    1882:	d811      	bhi.n	18a8 <long_division+0xc6>
			r = r - d;
    1884:	69b9      	ldr	r1, [r7, #24]
    1886:	69fa      	ldr	r2, [r7, #28]
    1888:	683b      	ldr	r3, [r7, #0]
    188a:	687c      	ldr	r4, [r7, #4]
    188c:	1ac9      	subs	r1, r1, r3
    188e:	41a2      	sbcs	r2, r4
    1890:	000b      	movs	r3, r1
    1892:	0014      	movs	r4, r2
    1894:	61bb      	str	r3, [r7, #24]
    1896:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    1898:	6a3a      	ldr	r2, [r7, #32]
    189a:	693b      	ldr	r3, [r7, #16]
    189c:	4313      	orrs	r3, r2
    189e:	623b      	str	r3, [r7, #32]
    18a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18a2:	697b      	ldr	r3, [r7, #20]
    18a4:	4313      	orrs	r3, r2
    18a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    18a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18aa:	3b01      	subs	r3, #1
    18ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    18ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18b0:	2b00      	cmp	r3, #0
    18b2:	daa8      	bge.n	1806 <long_division+0x24>
		}
	}

	return q;
    18b4:	6a3b      	ldr	r3, [r7, #32]
    18b6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    18b8:	0018      	movs	r0, r3
    18ba:	0021      	movs	r1, r4
    18bc:	46bd      	mov	sp, r7
    18be:	b00d      	add	sp, #52	; 0x34
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018c2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    18c2:	b580      	push	{r7, lr}
    18c4:	b086      	sub	sp, #24
    18c6:	af00      	add	r7, sp, #0
    18c8:	60f8      	str	r0, [r7, #12]
    18ca:	60b9      	str	r1, [r7, #8]
    18cc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    18ce:	2316      	movs	r3, #22
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	2200      	movs	r2, #0
    18d4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    18d6:	68bb      	ldr	r3, [r7, #8]
    18d8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    18da:	68bb      	ldr	r3, [r7, #8]
    18dc:	085a      	lsrs	r2, r3, #1
    18de:	68fb      	ldr	r3, [r7, #12]
    18e0:	429a      	cmp	r2, r3
    18e2:	d201      	bcs.n	18e8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18e4:	2340      	movs	r3, #64	; 0x40
    18e6:	e026      	b.n	1936 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    18e8:	68bb      	ldr	r3, [r7, #8]
    18ea:	085b      	lsrs	r3, r3, #1
    18ec:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    18ee:	e00a      	b.n	1906 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    18f0:	693a      	ldr	r2, [r7, #16]
    18f2:	68fb      	ldr	r3, [r7, #12]
    18f4:	1ad3      	subs	r3, r2, r3
    18f6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    18f8:	2316      	movs	r3, #22
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	881a      	ldrh	r2, [r3, #0]
    18fe:	2316      	movs	r3, #22
    1900:	18fb      	adds	r3, r7, r3
    1902:	3201      	adds	r2, #1
    1904:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    1906:	693a      	ldr	r2, [r7, #16]
    1908:	68fb      	ldr	r3, [r7, #12]
    190a:	429a      	cmp	r2, r3
    190c:	d2f0      	bcs.n	18f0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    190e:	2316      	movs	r3, #22
    1910:	18fb      	adds	r3, r7, r3
    1912:	2216      	movs	r2, #22
    1914:	18ba      	adds	r2, r7, r2
    1916:	8812      	ldrh	r2, [r2, #0]
    1918:	3a01      	subs	r2, #1
    191a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    191c:	2316      	movs	r3, #22
    191e:	18fb      	adds	r3, r7, r3
    1920:	881b      	ldrh	r3, [r3, #0]
    1922:	2bff      	cmp	r3, #255	; 0xff
    1924:	d901      	bls.n	192a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1926:	2340      	movs	r3, #64	; 0x40
    1928:	e005      	b.n	1936 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	2216      	movs	r2, #22
    192e:	18ba      	adds	r2, r7, r2
    1930:	8812      	ldrh	r2, [r2, #0]
    1932:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1934:	2300      	movs	r3, #0
	}
}
    1936:	0018      	movs	r0, r3
    1938:	46bd      	mov	sp, r7
    193a:	b006      	add	sp, #24
    193c:	bd80      	pop	{r7, pc}
	...

00001940 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1940:	b5f0      	push	{r4, r5, r6, r7, lr}
    1942:	b0a1      	sub	sp, #132	; 0x84
    1944:	af00      	add	r7, sp, #0
    1946:	64f8      	str	r0, [r7, #76]	; 0x4c
    1948:	64b9      	str	r1, [r7, #72]	; 0x48
    194a:	647a      	str	r2, [r7, #68]	; 0x44
    194c:	2243      	movs	r2, #67	; 0x43
    194e:	18ba      	adds	r2, r7, r2
    1950:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    1952:	2300      	movs	r3, #0
    1954:	2400      	movs	r4, #0
    1956:	673b      	str	r3, [r7, #112]	; 0x70
    1958:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    195a:	2300      	movs	r3, #0
    195c:	2400      	movs	r4, #0
    195e:	66bb      	str	r3, [r7, #104]	; 0x68
    1960:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    1962:	2300      	movs	r3, #0
    1964:	2400      	movs	r4, #0
    1966:	67bb      	str	r3, [r7, #120]	; 0x78
    1968:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    196a:	2300      	movs	r3, #0
    196c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    196e:	2358      	movs	r3, #88	; 0x58
    1970:	2240      	movs	r2, #64	; 0x40
    1972:	4694      	mov	ip, r2
    1974:	44bc      	add	ip, r7
    1976:	4463      	add	r3, ip
    1978:	781a      	ldrb	r2, [r3, #0]
    197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    197c:	435a      	muls	r2, r3
    197e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1980:	429a      	cmp	r2, r3
    1982:	d901      	bls.n	1988 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1984:	2340      	movs	r3, #64	; 0x40
    1986:	e0b3      	b.n	1af0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1988:	2343      	movs	r3, #67	; 0x43
    198a:	18fb      	adds	r3, r7, r3
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d13d      	bne.n	1a0e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1992:	2358      	movs	r3, #88	; 0x58
    1994:	2240      	movs	r2, #64	; 0x40
    1996:	4694      	mov	ip, r2
    1998:	44bc      	add	ip, r7
    199a:	4463      	add	r3, ip
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	b2db      	uxtb	r3, r3
    19a0:	613b      	str	r3, [r7, #16]
    19a2:	2300      	movs	r3, #0
    19a4:	617b      	str	r3, [r7, #20]
    19a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    19a8:	60bb      	str	r3, [r7, #8]
    19aa:	2300      	movs	r3, #0
    19ac:	60fb      	str	r3, [r7, #12]
    19ae:	4c52      	ldr	r4, [pc, #328]	; (1af8 <_sercom_get_async_baud_val+0x1b8>)
    19b0:	68ba      	ldr	r2, [r7, #8]
    19b2:	68fb      	ldr	r3, [r7, #12]
    19b4:	6938      	ldr	r0, [r7, #16]
    19b6:	6979      	ldr	r1, [r7, #20]
    19b8:	47a0      	blx	r4
    19ba:	0003      	movs	r3, r0
    19bc:	000c      	movs	r4, r1
    19be:	001b      	movs	r3, r3
    19c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    19c2:	2300      	movs	r3, #0
    19c4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    19c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    19c8:	603b      	str	r3, [r7, #0]
    19ca:	2300      	movs	r3, #0
    19cc:	607b      	str	r3, [r7, #4]
    19ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
    19d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    19d2:	683a      	ldr	r2, [r7, #0]
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	4c49      	ldr	r4, [pc, #292]	; (1afc <_sercom_get_async_baud_val+0x1bc>)
    19d8:	47a0      	blx	r4
    19da:	0003      	movs	r3, r0
    19dc:	000c      	movs	r4, r1
    19de:	673b      	str	r3, [r7, #112]	; 0x70
    19e0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    19e2:	2100      	movs	r1, #0
    19e4:	2201      	movs	r2, #1
    19e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    19e8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    19ea:	1ac9      	subs	r1, r1, r3
    19ec:	41a2      	sbcs	r2, r4
    19ee:	000b      	movs	r3, r1
    19f0:	0014      	movs	r4, r2
    19f2:	66bb      	str	r3, [r7, #104]	; 0x68
    19f4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    19f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    19f8:	0c1b      	lsrs	r3, r3, #16
    19fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    19fc:	0416      	lsls	r6, r2, #16
    19fe:	431e      	orrs	r6, r3
    1a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1a02:	041d      	lsls	r5, r3, #16
    1a04:	0033      	movs	r3, r6
    1a06:	67bb      	str	r3, [r7, #120]	; 0x78
    1a08:	2300      	movs	r3, #0
    1a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    1a0c:	e06a      	b.n	1ae4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1a0e:	2343      	movs	r3, #67	; 0x43
    1a10:	18fb      	adds	r3, r7, r3
    1a12:	781b      	ldrb	r3, [r3, #0]
    1a14:	2b01      	cmp	r3, #1
    1a16:	d165      	bne.n	1ae4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1a1a:	633b      	str	r3, [r7, #48]	; 0x30
    1a1c:	2300      	movs	r3, #0
    1a1e:	637b      	str	r3, [r7, #52]	; 0x34
    1a20:	2358      	movs	r3, #88	; 0x58
    1a22:	2240      	movs	r2, #64	; 0x40
    1a24:	4694      	mov	ip, r2
    1a26:	44bc      	add	ip, r7
    1a28:	4463      	add	r3, ip
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    1a30:	2300      	movs	r3, #0
    1a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a34:	4c30      	ldr	r4, [pc, #192]	; (1af8 <_sercom_get_async_baud_val+0x1b8>)
    1a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1a3e:	47a0      	blx	r4
    1a40:	0003      	movs	r3, r0
    1a42:	000c      	movs	r4, r1
    1a44:	65bb      	str	r3, [r7, #88]	; 0x58
    1a46:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a4a:	623b      	str	r3, [r7, #32]
    1a4c:	2300      	movs	r3, #0
    1a4e:	627b      	str	r3, [r7, #36]	; 0x24
    1a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a52:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1a54:	001a      	movs	r2, r3
    1a56:	0023      	movs	r3, r4
    1a58:	6a38      	ldr	r0, [r7, #32]
    1a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1a5c:	4c27      	ldr	r4, [pc, #156]	; (1afc <_sercom_get_async_baud_val+0x1bc>)
    1a5e:	47a0      	blx	r4
    1a60:	0003      	movs	r3, r0
    1a62:	000c      	movs	r4, r1
    1a64:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1a66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1a68:	2380      	movs	r3, #128	; 0x80
    1a6a:	019b      	lsls	r3, r3, #6
    1a6c:	429a      	cmp	r2, r3
    1a6e:	d901      	bls.n	1a74 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a70:	2340      	movs	r3, #64	; 0x40
    1a72:	e03d      	b.n	1af0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a76:	61bb      	str	r3, [r7, #24]
    1a78:	2300      	movs	r3, #0
    1a7a:	61fb      	str	r3, [r7, #28]
    1a7c:	69b9      	ldr	r1, [r7, #24]
    1a7e:	69fa      	ldr	r2, [r7, #28]
    1a80:	000b      	movs	r3, r1
    1a82:	0f5b      	lsrs	r3, r3, #29
    1a84:	0010      	movs	r0, r2
    1a86:	00c0      	lsls	r0, r0, #3
    1a88:	63f8      	str	r0, [r7, #60]	; 0x3c
    1a8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    1a8c:	4318      	orrs	r0, r3
    1a8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    1a90:	000b      	movs	r3, r1
    1a92:	00db      	lsls	r3, r3, #3
    1a94:	63bb      	str	r3, [r7, #56]	; 0x38
    1a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a98:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1a9a:	001a      	movs	r2, r3
    1a9c:	0023      	movs	r3, r4
    1a9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1aa2:	4c16      	ldr	r4, [pc, #88]	; (1afc <_sercom_get_async_baud_val+0x1bc>)
    1aa4:	47a0      	blx	r4
    1aa6:	0003      	movs	r3, r0
    1aa8:	000c      	movs	r4, r1
    1aaa:	65bb      	str	r3, [r7, #88]	; 0x58
    1aac:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    1aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1ab0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1ab2:	b2d9      	uxtb	r1, r3
    1ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	00db      	lsls	r3, r3, #3
    1aba:	b2da      	uxtb	r2, r3
    1abc:	2317      	movs	r3, #23
    1abe:	2040      	movs	r0, #64	; 0x40
    1ac0:	4684      	mov	ip, r0
    1ac2:	44bc      	add	ip, r7
    1ac4:	4463      	add	r3, ip
    1ac6:	1a8a      	subs	r2, r1, r2
    1ac8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    1aca:	2317      	movs	r3, #23
    1acc:	2240      	movs	r2, #64	; 0x40
    1ace:	4694      	mov	ip, r2
    1ad0:	44bc      	add	ip, r7
    1ad2:	4463      	add	r3, ip
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	035b      	lsls	r3, r3, #13
    1ad8:	001a      	movs	r2, r3
    1ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1adc:	4313      	orrs	r3, r2
    1ade:	67bb      	str	r3, [r7, #120]	; 0x78
    1ae0:	2300      	movs	r3, #0
    1ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    1ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1ae6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1ae8:	b29a      	uxth	r2, r3
    1aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1aec:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1aee:	2300      	movs	r3, #0
}
    1af0:	0018      	movs	r0, r3
    1af2:	46bd      	mov	sp, r7
    1af4:	b021      	add	sp, #132	; 0x84
    1af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1af8:	00005289 	.word	0x00005289
    1afc:	000017e3 	.word	0x000017e3

00001b00 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1b00:	b580      	push	{r7, lr}
    1b02:	b084      	sub	sp, #16
    1b04:	af00      	add	r7, sp, #0
    1b06:	0002      	movs	r2, r0
    1b08:	1dfb      	adds	r3, r7, #7
    1b0a:	701a      	strb	r2, [r3, #0]
    1b0c:	1dbb      	adds	r3, r7, #6
    1b0e:	1c0a      	adds	r2, r1, #0
    1b10:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1b12:	4b1a      	ldr	r3, [pc, #104]	; (1b7c <sercom_set_gclk_generator+0x7c>)
    1b14:	781b      	ldrb	r3, [r3, #0]
    1b16:	2201      	movs	r2, #1
    1b18:	4053      	eors	r3, r2
    1b1a:	b2db      	uxtb	r3, r3
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	d103      	bne.n	1b28 <sercom_set_gclk_generator+0x28>
    1b20:	1dbb      	adds	r3, r7, #6
    1b22:	781b      	ldrb	r3, [r3, #0]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d01b      	beq.n	1b60 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1b28:	230c      	movs	r3, #12
    1b2a:	18fb      	adds	r3, r7, r3
    1b2c:	0018      	movs	r0, r3
    1b2e:	4b14      	ldr	r3, [pc, #80]	; (1b80 <sercom_set_gclk_generator+0x80>)
    1b30:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1b32:	230c      	movs	r3, #12
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	1dfa      	adds	r2, r7, #7
    1b38:	7812      	ldrb	r2, [r2, #0]
    1b3a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1b3c:	230c      	movs	r3, #12
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	0019      	movs	r1, r3
    1b42:	2013      	movs	r0, #19
    1b44:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <sercom_set_gclk_generator+0x84>)
    1b46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1b48:	2013      	movs	r0, #19
    1b4a:	4b0f      	ldr	r3, [pc, #60]	; (1b88 <sercom_set_gclk_generator+0x88>)
    1b4c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1b4e:	4b0b      	ldr	r3, [pc, #44]	; (1b7c <sercom_set_gclk_generator+0x7c>)
    1b50:	1dfa      	adds	r2, r7, #7
    1b52:	7812      	ldrb	r2, [r2, #0]
    1b54:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1b56:	4b09      	ldr	r3, [pc, #36]	; (1b7c <sercom_set_gclk_generator+0x7c>)
    1b58:	2201      	movs	r2, #1
    1b5a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1b5c:	2300      	movs	r3, #0
    1b5e:	e008      	b.n	1b72 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1b60:	4b06      	ldr	r3, [pc, #24]	; (1b7c <sercom_set_gclk_generator+0x7c>)
    1b62:	785b      	ldrb	r3, [r3, #1]
    1b64:	1dfa      	adds	r2, r7, #7
    1b66:	7812      	ldrb	r2, [r2, #0]
    1b68:	429a      	cmp	r2, r3
    1b6a:	d101      	bne.n	1b70 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1b6c:	2300      	movs	r3, #0
    1b6e:	e000      	b.n	1b72 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1b70:	231d      	movs	r3, #29
}
    1b72:	0018      	movs	r0, r3
    1b74:	46bd      	mov	sp, r7
    1b76:	b004      	add	sp, #16
    1b78:	bd80      	pop	{r7, pc}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	20000094 	.word	0x20000094
    1b80:	000017cd 	.word	0x000017cd
    1b84:	000040d9 	.word	0x000040d9
    1b88:	0000411d 	.word	0x0000411d

00001b8c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
    1b94:	000a      	movs	r2, r1
    1b96:	1cfb      	adds	r3, r7, #3
    1b98:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	4a4d      	ldr	r2, [pc, #308]	; (1cd4 <_sercom_get_default_pad+0x148>)
    1b9e:	4293      	cmp	r3, r2
    1ba0:	d03f      	beq.n	1c22 <_sercom_get_default_pad+0x96>
    1ba2:	4a4c      	ldr	r2, [pc, #304]	; (1cd4 <_sercom_get_default_pad+0x148>)
    1ba4:	4293      	cmp	r3, r2
    1ba6:	d806      	bhi.n	1bb6 <_sercom_get_default_pad+0x2a>
    1ba8:	4a4b      	ldr	r2, [pc, #300]	; (1cd8 <_sercom_get_default_pad+0x14c>)
    1baa:	4293      	cmp	r3, r2
    1bac:	d00f      	beq.n	1bce <_sercom_get_default_pad+0x42>
    1bae:	4a4b      	ldr	r2, [pc, #300]	; (1cdc <_sercom_get_default_pad+0x150>)
    1bb0:	4293      	cmp	r3, r2
    1bb2:	d021      	beq.n	1bf8 <_sercom_get_default_pad+0x6c>
    1bb4:	e089      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1bb6:	4a4a      	ldr	r2, [pc, #296]	; (1ce0 <_sercom_get_default_pad+0x154>)
    1bb8:	4293      	cmp	r3, r2
    1bba:	d100      	bne.n	1bbe <_sercom_get_default_pad+0x32>
    1bbc:	e05b      	b.n	1c76 <_sercom_get_default_pad+0xea>
    1bbe:	4a49      	ldr	r2, [pc, #292]	; (1ce4 <_sercom_get_default_pad+0x158>)
    1bc0:	4293      	cmp	r3, r2
    1bc2:	d100      	bne.n	1bc6 <_sercom_get_default_pad+0x3a>
    1bc4:	e06c      	b.n	1ca0 <_sercom_get_default_pad+0x114>
    1bc6:	4a48      	ldr	r2, [pc, #288]	; (1ce8 <_sercom_get_default_pad+0x15c>)
    1bc8:	4293      	cmp	r3, r2
    1bca:	d03f      	beq.n	1c4c <_sercom_get_default_pad+0xc0>
    1bcc:	e07d      	b.n	1cca <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bce:	1cfb      	adds	r3, r7, #3
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	2b01      	cmp	r3, #1
    1bd4:	d00a      	beq.n	1bec <_sercom_get_default_pad+0x60>
    1bd6:	dc02      	bgt.n	1bde <_sercom_get_default_pad+0x52>
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d005      	beq.n	1be8 <_sercom_get_default_pad+0x5c>
    1bdc:	e075      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1bde:	2b02      	cmp	r3, #2
    1be0:	d006      	beq.n	1bf0 <_sercom_get_default_pad+0x64>
    1be2:	2b03      	cmp	r3, #3
    1be4:	d006      	beq.n	1bf4 <_sercom_get_default_pad+0x68>
    1be6:	e070      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1be8:	4b40      	ldr	r3, [pc, #256]	; (1cec <_sercom_get_default_pad+0x160>)
    1bea:	e06f      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1bec:	4b40      	ldr	r3, [pc, #256]	; (1cf0 <_sercom_get_default_pad+0x164>)
    1bee:	e06d      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1bf0:	4b40      	ldr	r3, [pc, #256]	; (1cf4 <_sercom_get_default_pad+0x168>)
    1bf2:	e06b      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1bf4:	4b40      	ldr	r3, [pc, #256]	; (1cf8 <_sercom_get_default_pad+0x16c>)
    1bf6:	e069      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1bf8:	1cfb      	adds	r3, r7, #3
    1bfa:	781b      	ldrb	r3, [r3, #0]
    1bfc:	2b01      	cmp	r3, #1
    1bfe:	d00a      	beq.n	1c16 <_sercom_get_default_pad+0x8a>
    1c00:	dc02      	bgt.n	1c08 <_sercom_get_default_pad+0x7c>
    1c02:	2b00      	cmp	r3, #0
    1c04:	d005      	beq.n	1c12 <_sercom_get_default_pad+0x86>
    1c06:	e060      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c08:	2b02      	cmp	r3, #2
    1c0a:	d006      	beq.n	1c1a <_sercom_get_default_pad+0x8e>
    1c0c:	2b03      	cmp	r3, #3
    1c0e:	d006      	beq.n	1c1e <_sercom_get_default_pad+0x92>
    1c10:	e05b      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c12:	2303      	movs	r3, #3
    1c14:	e05a      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c16:	4b39      	ldr	r3, [pc, #228]	; (1cfc <_sercom_get_default_pad+0x170>)
    1c18:	e058      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c1a:	4b39      	ldr	r3, [pc, #228]	; (1d00 <_sercom_get_default_pad+0x174>)
    1c1c:	e056      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c1e:	4b39      	ldr	r3, [pc, #228]	; (1d04 <_sercom_get_default_pad+0x178>)
    1c20:	e054      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c22:	1cfb      	adds	r3, r7, #3
    1c24:	781b      	ldrb	r3, [r3, #0]
    1c26:	2b01      	cmp	r3, #1
    1c28:	d00a      	beq.n	1c40 <_sercom_get_default_pad+0xb4>
    1c2a:	dc02      	bgt.n	1c32 <_sercom_get_default_pad+0xa6>
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d005      	beq.n	1c3c <_sercom_get_default_pad+0xb0>
    1c30:	e04b      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c32:	2b02      	cmp	r3, #2
    1c34:	d006      	beq.n	1c44 <_sercom_get_default_pad+0xb8>
    1c36:	2b03      	cmp	r3, #3
    1c38:	d006      	beq.n	1c48 <_sercom_get_default_pad+0xbc>
    1c3a:	e046      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c3c:	4b32      	ldr	r3, [pc, #200]	; (1d08 <_sercom_get_default_pad+0x17c>)
    1c3e:	e045      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c40:	4b32      	ldr	r3, [pc, #200]	; (1d0c <_sercom_get_default_pad+0x180>)
    1c42:	e043      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c44:	4b32      	ldr	r3, [pc, #200]	; (1d10 <_sercom_get_default_pad+0x184>)
    1c46:	e041      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c48:	4b32      	ldr	r3, [pc, #200]	; (1d14 <_sercom_get_default_pad+0x188>)
    1c4a:	e03f      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c4c:	1cfb      	adds	r3, r7, #3
    1c4e:	781b      	ldrb	r3, [r3, #0]
    1c50:	2b01      	cmp	r3, #1
    1c52:	d00a      	beq.n	1c6a <_sercom_get_default_pad+0xde>
    1c54:	dc02      	bgt.n	1c5c <_sercom_get_default_pad+0xd0>
    1c56:	2b00      	cmp	r3, #0
    1c58:	d005      	beq.n	1c66 <_sercom_get_default_pad+0xda>
    1c5a:	e036      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c5c:	2b02      	cmp	r3, #2
    1c5e:	d006      	beq.n	1c6e <_sercom_get_default_pad+0xe2>
    1c60:	2b03      	cmp	r3, #3
    1c62:	d006      	beq.n	1c72 <_sercom_get_default_pad+0xe6>
    1c64:	e031      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c66:	4b2c      	ldr	r3, [pc, #176]	; (1d18 <_sercom_get_default_pad+0x18c>)
    1c68:	e030      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c6a:	4b2c      	ldr	r3, [pc, #176]	; (1d1c <_sercom_get_default_pad+0x190>)
    1c6c:	e02e      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c6e:	4b2c      	ldr	r3, [pc, #176]	; (1d20 <_sercom_get_default_pad+0x194>)
    1c70:	e02c      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c72:	4b2c      	ldr	r3, [pc, #176]	; (1d24 <_sercom_get_default_pad+0x198>)
    1c74:	e02a      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c76:	1cfb      	adds	r3, r7, #3
    1c78:	781b      	ldrb	r3, [r3, #0]
    1c7a:	2b01      	cmp	r3, #1
    1c7c:	d00a      	beq.n	1c94 <_sercom_get_default_pad+0x108>
    1c7e:	dc02      	bgt.n	1c86 <_sercom_get_default_pad+0xfa>
    1c80:	2b00      	cmp	r3, #0
    1c82:	d005      	beq.n	1c90 <_sercom_get_default_pad+0x104>
    1c84:	e021      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c86:	2b02      	cmp	r3, #2
    1c88:	d006      	beq.n	1c98 <_sercom_get_default_pad+0x10c>
    1c8a:	2b03      	cmp	r3, #3
    1c8c:	d006      	beq.n	1c9c <_sercom_get_default_pad+0x110>
    1c8e:	e01c      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1c90:	4b25      	ldr	r3, [pc, #148]	; (1d28 <_sercom_get_default_pad+0x19c>)
    1c92:	e01b      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c94:	4b25      	ldr	r3, [pc, #148]	; (1d2c <_sercom_get_default_pad+0x1a0>)
    1c96:	e019      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c98:	4b25      	ldr	r3, [pc, #148]	; (1d30 <_sercom_get_default_pad+0x1a4>)
    1c9a:	e017      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1c9c:	4b25      	ldr	r3, [pc, #148]	; (1d34 <_sercom_get_default_pad+0x1a8>)
    1c9e:	e015      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1ca0:	1cfb      	adds	r3, r7, #3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	2b01      	cmp	r3, #1
    1ca6:	d00a      	beq.n	1cbe <_sercom_get_default_pad+0x132>
    1ca8:	dc02      	bgt.n	1cb0 <_sercom_get_default_pad+0x124>
    1caa:	2b00      	cmp	r3, #0
    1cac:	d005      	beq.n	1cba <_sercom_get_default_pad+0x12e>
    1cae:	e00c      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1cb0:	2b02      	cmp	r3, #2
    1cb2:	d006      	beq.n	1cc2 <_sercom_get_default_pad+0x136>
    1cb4:	2b03      	cmp	r3, #3
    1cb6:	d006      	beq.n	1cc6 <_sercom_get_default_pad+0x13a>
    1cb8:	e007      	b.n	1cca <_sercom_get_default_pad+0x13e>
    1cba:	4b1f      	ldr	r3, [pc, #124]	; (1d38 <_sercom_get_default_pad+0x1ac>)
    1cbc:	e006      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1cbe:	4b1f      	ldr	r3, [pc, #124]	; (1d3c <_sercom_get_default_pad+0x1b0>)
    1cc0:	e004      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1cc2:	4b1f      	ldr	r3, [pc, #124]	; (1d40 <_sercom_get_default_pad+0x1b4>)
    1cc4:	e002      	b.n	1ccc <_sercom_get_default_pad+0x140>
    1cc6:	4b1f      	ldr	r3, [pc, #124]	; (1d44 <_sercom_get_default_pad+0x1b8>)
    1cc8:	e000      	b.n	1ccc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1cca:	2300      	movs	r3, #0
}
    1ccc:	0018      	movs	r0, r3
    1cce:	46bd      	mov	sp, r7
    1cd0:	b002      	add	sp, #8
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	42001000 	.word	0x42001000
    1cd8:	42000800 	.word	0x42000800
    1cdc:	42000c00 	.word	0x42000c00
    1ce0:	42001800 	.word	0x42001800
    1ce4:	42001c00 	.word	0x42001c00
    1ce8:	42001400 	.word	0x42001400
    1cec:	00040003 	.word	0x00040003
    1cf0:	00050003 	.word	0x00050003
    1cf4:	00060003 	.word	0x00060003
    1cf8:	00070003 	.word	0x00070003
    1cfc:	00010003 	.word	0x00010003
    1d00:	001e0003 	.word	0x001e0003
    1d04:	001f0003 	.word	0x001f0003
    1d08:	00080003 	.word	0x00080003
    1d0c:	00090003 	.word	0x00090003
    1d10:	000a0003 	.word	0x000a0003
    1d14:	000b0003 	.word	0x000b0003
    1d18:	00100003 	.word	0x00100003
    1d1c:	00110003 	.word	0x00110003
    1d20:	00120003 	.word	0x00120003
    1d24:	00130003 	.word	0x00130003
    1d28:	000c0003 	.word	0x000c0003
    1d2c:	000d0003 	.word	0x000d0003
    1d30:	000e0003 	.word	0x000e0003
    1d34:	000f0003 	.word	0x000f0003
    1d38:	00160003 	.word	0x00160003
    1d3c:	00170003 	.word	0x00170003
    1d40:	00180003 	.word	0x00180003
    1d44:	00190003 	.word	0x00190003

00001d48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1d48:	b590      	push	{r4, r7, lr}
    1d4a:	b08b      	sub	sp, #44	; 0x2c
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1d50:	230c      	movs	r3, #12
    1d52:	18fb      	adds	r3, r7, r3
    1d54:	4a0f      	ldr	r2, [pc, #60]	; (1d94 <_sercom_get_sercom_inst_index+0x4c>)
    1d56:	ca13      	ldmia	r2!, {r0, r1, r4}
    1d58:	c313      	stmia	r3!, {r0, r1, r4}
    1d5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    1d5c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d5e:	2300      	movs	r3, #0
    1d60:	627b      	str	r3, [r7, #36]	; 0x24
    1d62:	e00e      	b.n	1d82 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1d64:	230c      	movs	r3, #12
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d6a:	0092      	lsls	r2, r2, #2
    1d6c:	58d3      	ldr	r3, [r2, r3]
    1d6e:	001a      	movs	r2, r3
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	429a      	cmp	r2, r3
    1d74:	d102      	bne.n	1d7c <_sercom_get_sercom_inst_index+0x34>
			return i;
    1d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d78:	b2db      	uxtb	r3, r3
    1d7a:	e006      	b.n	1d8a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d7e:	3301      	adds	r3, #1
    1d80:	627b      	str	r3, [r7, #36]	; 0x24
    1d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d84:	2b05      	cmp	r3, #5
    1d86:	d9ed      	bls.n	1d64 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1d88:	2300      	movs	r3, #0
}
    1d8a:	0018      	movs	r0, r3
    1d8c:	46bd      	mov	sp, r7
    1d8e:	b00b      	add	sp, #44	; 0x2c
    1d90:	bd90      	pop	{r4, r7, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00006580 	.word	0x00006580

00001d98 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b082      	sub	sp, #8
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	0002      	movs	r2, r0
    1da0:	1dfb      	adds	r3, r7, #7
    1da2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	46bd      	mov	sp, r7
    1da8:	b002      	add	sp, #8
    1daa:	bd80      	pop	{r7, pc}

00001dac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b084      	sub	sp, #16
    1db0:	af00      	add	r7, sp, #0
    1db2:	0002      	movs	r2, r0
    1db4:	6039      	str	r1, [r7, #0]
    1db6:	1dfb      	adds	r3, r7, #7
    1db8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1dba:	4b13      	ldr	r3, [pc, #76]	; (1e08 <_sercom_set_handler+0x5c>)
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	2201      	movs	r2, #1
    1dc0:	4053      	eors	r3, r2
    1dc2:	b2db      	uxtb	r3, r3
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d015      	beq.n	1df4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dc8:	2300      	movs	r3, #0
    1dca:	60fb      	str	r3, [r7, #12]
    1dcc:	e00c      	b.n	1de8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1dce:	4b0f      	ldr	r3, [pc, #60]	; (1e0c <_sercom_set_handler+0x60>)
    1dd0:	68fa      	ldr	r2, [r7, #12]
    1dd2:	0092      	lsls	r2, r2, #2
    1dd4:	490e      	ldr	r1, [pc, #56]	; (1e10 <_sercom_set_handler+0x64>)
    1dd6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1dd8:	4b0e      	ldr	r3, [pc, #56]	; (1e14 <_sercom_set_handler+0x68>)
    1dda:	68fa      	ldr	r2, [r7, #12]
    1ddc:	0092      	lsls	r2, r2, #2
    1dde:	2100      	movs	r1, #0
    1de0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1de2:	68fb      	ldr	r3, [r7, #12]
    1de4:	3301      	adds	r3, #1
    1de6:	60fb      	str	r3, [r7, #12]
    1de8:	68fb      	ldr	r3, [r7, #12]
    1dea:	2b05      	cmp	r3, #5
    1dec:	d9ef      	bls.n	1dce <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1dee:	4b06      	ldr	r3, [pc, #24]	; (1e08 <_sercom_set_handler+0x5c>)
    1df0:	2201      	movs	r2, #1
    1df2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1df4:	1dfb      	adds	r3, r7, #7
    1df6:	781a      	ldrb	r2, [r3, #0]
    1df8:	4b04      	ldr	r3, [pc, #16]	; (1e0c <_sercom_set_handler+0x60>)
    1dfa:	0092      	lsls	r2, r2, #2
    1dfc:	6839      	ldr	r1, [r7, #0]
    1dfe:	50d1      	str	r1, [r2, r3]
}
    1e00:	46c0      	nop			; (mov r8, r8)
    1e02:	46bd      	mov	sp, r7
    1e04:	b004      	add	sp, #16
    1e06:	bd80      	pop	{r7, pc}
    1e08:	20000096 	.word	0x20000096
    1e0c:	20000098 	.word	0x20000098
    1e10:	00001d99 	.word	0x00001d99
    1e14:	20000508 	.word	0x20000508

00001e18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1e18:	b590      	push	{r4, r7, lr}
    1e1a:	b085      	sub	sp, #20
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1e20:	2308      	movs	r3, #8
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	4a0b      	ldr	r2, [pc, #44]	; (1e54 <_sercom_get_interrupt_vector+0x3c>)
    1e26:	6811      	ldr	r1, [r2, #0]
    1e28:	6019      	str	r1, [r3, #0]
    1e2a:	8892      	ldrh	r2, [r2, #4]
    1e2c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1e2e:	230f      	movs	r3, #15
    1e30:	18fc      	adds	r4, r7, r3
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	0018      	movs	r0, r3
    1e36:	4b08      	ldr	r3, [pc, #32]	; (1e58 <_sercom_get_interrupt_vector+0x40>)
    1e38:	4798      	blx	r3
    1e3a:	0003      	movs	r3, r0
    1e3c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1e3e:	230f      	movs	r3, #15
    1e40:	18fb      	adds	r3, r7, r3
    1e42:	781b      	ldrb	r3, [r3, #0]
    1e44:	2208      	movs	r2, #8
    1e46:	18ba      	adds	r2, r7, r2
    1e48:	5cd3      	ldrb	r3, [r2, r3]
    1e4a:	b25b      	sxtb	r3, r3
}
    1e4c:	0018      	movs	r0, r3
    1e4e:	46bd      	mov	sp, r7
    1e50:	b005      	add	sp, #20
    1e52:	bd90      	pop	{r4, r7, pc}
    1e54:	00006598 	.word	0x00006598
    1e58:	00001d49 	.word	0x00001d49

00001e5c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1e5c:	b580      	push	{r7, lr}
    1e5e:	af00      	add	r7, sp, #0
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <SERCOM0_Handler+0x14>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	2000      	movs	r0, #0
    1e66:	4798      	blx	r3
    1e68:	46c0      	nop			; (mov r8, r8)
    1e6a:	46bd      	mov	sp, r7
    1e6c:	bd80      	pop	{r7, pc}
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	20000098 	.word	0x20000098

00001e74 <SERCOM1_Handler>:
    1e74:	b580      	push	{r7, lr}
    1e76:	af00      	add	r7, sp, #0
    1e78:	4b03      	ldr	r3, [pc, #12]	; (1e88 <SERCOM1_Handler+0x14>)
    1e7a:	685b      	ldr	r3, [r3, #4]
    1e7c:	2001      	movs	r0, #1
    1e7e:	4798      	blx	r3
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	46bd      	mov	sp, r7
    1e84:	bd80      	pop	{r7, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	20000098 	.word	0x20000098

00001e8c <SERCOM2_Handler>:
    1e8c:	b580      	push	{r7, lr}
    1e8e:	af00      	add	r7, sp, #0
    1e90:	4b03      	ldr	r3, [pc, #12]	; (1ea0 <SERCOM2_Handler+0x14>)
    1e92:	689b      	ldr	r3, [r3, #8]
    1e94:	2002      	movs	r0, #2
    1e96:	4798      	blx	r3
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	46bd      	mov	sp, r7
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	20000098 	.word	0x20000098

00001ea4 <SERCOM3_Handler>:
    1ea4:	b580      	push	{r7, lr}
    1ea6:	af00      	add	r7, sp, #0
    1ea8:	4b03      	ldr	r3, [pc, #12]	; (1eb8 <SERCOM3_Handler+0x14>)
    1eaa:	68db      	ldr	r3, [r3, #12]
    1eac:	2003      	movs	r0, #3
    1eae:	4798      	blx	r3
    1eb0:	46c0      	nop			; (mov r8, r8)
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd80      	pop	{r7, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	20000098 	.word	0x20000098

00001ebc <SERCOM4_Handler>:
    1ebc:	b580      	push	{r7, lr}
    1ebe:	af00      	add	r7, sp, #0
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <SERCOM4_Handler+0x14>)
    1ec2:	691b      	ldr	r3, [r3, #16]
    1ec4:	2004      	movs	r0, #4
    1ec6:	4798      	blx	r3
    1ec8:	46c0      	nop			; (mov r8, r8)
    1eca:	46bd      	mov	sp, r7
    1ecc:	bd80      	pop	{r7, pc}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	20000098 	.word	0x20000098

00001ed4 <SERCOM5_Handler>:
    1ed4:	b580      	push	{r7, lr}
    1ed6:	af00      	add	r7, sp, #0
    1ed8:	4b03      	ldr	r3, [pc, #12]	; (1ee8 <SERCOM5_Handler+0x14>)
    1eda:	695b      	ldr	r3, [r3, #20]
    1edc:	2005      	movs	r0, #5
    1ede:	4798      	blx	r3
    1ee0:	46c0      	nop			; (mov r8, r8)
    1ee2:	46bd      	mov	sp, r7
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	20000098 	.word	0x20000098

00001eec <system_pinmux_get_config_defaults>:
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	2280      	movs	r2, #128	; 0x80
    1ef8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	2200      	movs	r2, #0
    1efe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	2201      	movs	r2, #1
    1f04:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	2200      	movs	r2, #0
    1f0a:	70da      	strb	r2, [r3, #3]
}
    1f0c:	46c0      	nop			; (mov r8, r8)
    1f0e:	46bd      	mov	sp, r7
    1f10:	b002      	add	sp, #8
    1f12:	bd80      	pop	{r7, pc}

00001f14 <system_gclk_chan_get_config_defaults>:
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b082      	sub	sp, #8
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	2200      	movs	r2, #0
    1f20:	701a      	strb	r2, [r3, #0]
}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	46bd      	mov	sp, r7
    1f26:	b002      	add	sp, #8
    1f28:	bd80      	pop	{r7, pc}
	...

00001f2c <system_apb_clock_set_mask>:
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b082      	sub	sp, #8
    1f30:	af00      	add	r7, sp, #0
    1f32:	0002      	movs	r2, r0
    1f34:	6039      	str	r1, [r7, #0]
    1f36:	1dfb      	adds	r3, r7, #7
    1f38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1f3a:	1dfb      	adds	r3, r7, #7
    1f3c:	781b      	ldrb	r3, [r3, #0]
    1f3e:	2b01      	cmp	r3, #1
    1f40:	d00a      	beq.n	1f58 <system_apb_clock_set_mask+0x2c>
    1f42:	2b02      	cmp	r3, #2
    1f44:	d00f      	beq.n	1f66 <system_apb_clock_set_mask+0x3a>
    1f46:	2b00      	cmp	r3, #0
    1f48:	d114      	bne.n	1f74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1f4a:	4b0e      	ldr	r3, [pc, #56]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f4c:	4a0d      	ldr	r2, [pc, #52]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f4e:	6991      	ldr	r1, [r2, #24]
    1f50:	683a      	ldr	r2, [r7, #0]
    1f52:	430a      	orrs	r2, r1
    1f54:	619a      	str	r2, [r3, #24]
			break;
    1f56:	e00f      	b.n	1f78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1f58:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f5a:	4a0a      	ldr	r2, [pc, #40]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f5c:	69d1      	ldr	r1, [r2, #28]
    1f5e:	683a      	ldr	r2, [r7, #0]
    1f60:	430a      	orrs	r2, r1
    1f62:	61da      	str	r2, [r3, #28]
			break;
    1f64:	e008      	b.n	1f78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1f66:	4b07      	ldr	r3, [pc, #28]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f68:	4a06      	ldr	r2, [pc, #24]	; (1f84 <system_apb_clock_set_mask+0x58>)
    1f6a:	6a11      	ldr	r1, [r2, #32]
    1f6c:	683a      	ldr	r2, [r7, #0]
    1f6e:	430a      	orrs	r2, r1
    1f70:	621a      	str	r2, [r3, #32]
			break;
    1f72:	e001      	b.n	1f78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1f74:	2317      	movs	r3, #23
    1f76:	e000      	b.n	1f7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1f78:	2300      	movs	r3, #0
}
    1f7a:	0018      	movs	r0, r3
    1f7c:	46bd      	mov	sp, r7
    1f7e:	b002      	add	sp, #8
    1f80:	bd80      	pop	{r7, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	40000400 	.word	0x40000400

00001f88 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <system_is_debugger_present+0x1c>)
    1f8e:	789b      	ldrb	r3, [r3, #2]
    1f90:	b2db      	uxtb	r3, r3
    1f92:	001a      	movs	r2, r3
    1f94:	2302      	movs	r3, #2
    1f96:	4013      	ands	r3, r2
    1f98:	1e5a      	subs	r2, r3, #1
    1f9a:	4193      	sbcs	r3, r2
    1f9c:	b2db      	uxtb	r3, r3
}
    1f9e:	0018      	movs	r0, r3
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	41002000 	.word	0x41002000

00001fa8 <spi_is_write_complete>:
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b084      	sub	sp, #16
    1fac:	af00      	add	r7, sp, #0
    1fae:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1fb6:	68fb      	ldr	r3, [r7, #12]
    1fb8:	7e1b      	ldrb	r3, [r3, #24]
    1fba:	b2db      	uxtb	r3, r3
    1fbc:	001a      	movs	r2, r3
    1fbe:	2302      	movs	r3, #2
    1fc0:	4013      	ands	r3, r2
    1fc2:	1e5a      	subs	r2, r3, #1
    1fc4:	4193      	sbcs	r3, r2
    1fc6:	b2db      	uxtb	r3, r3
}
    1fc8:	0018      	movs	r0, r3
    1fca:	46bd      	mov	sp, r7
    1fcc:	b004      	add	sp, #16
    1fce:	bd80      	pop	{r7, pc}

00001fd0 <spi_is_ready_to_write>:
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b084      	sub	sp, #16
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1fde:	68fb      	ldr	r3, [r7, #12]
    1fe0:	7e1b      	ldrb	r3, [r3, #24]
    1fe2:	b2db      	uxtb	r3, r3
    1fe4:	001a      	movs	r2, r3
    1fe6:	2301      	movs	r3, #1
    1fe8:	4013      	ands	r3, r2
    1fea:	1e5a      	subs	r2, r3, #1
    1fec:	4193      	sbcs	r3, r2
    1fee:	b2db      	uxtb	r3, r3
}
    1ff0:	0018      	movs	r0, r3
    1ff2:	46bd      	mov	sp, r7
    1ff4:	b004      	add	sp, #16
    1ff6:	bd80      	pop	{r7, pc}

00001ff8 <spi_is_ready_to_read>:
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	b084      	sub	sp, #16
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	7e1b      	ldrb	r3, [r3, #24]
    200a:	b2db      	uxtb	r3, r3
    200c:	001a      	movs	r2, r3
    200e:	2304      	movs	r3, #4
    2010:	4013      	ands	r3, r2
    2012:	1e5a      	subs	r2, r3, #1
    2014:	4193      	sbcs	r3, r2
    2016:	b2db      	uxtb	r3, r3
}
    2018:	0018      	movs	r0, r3
    201a:	46bd      	mov	sp, r7
    201c:	b004      	add	sp, #16
    201e:	bd80      	pop	{r7, pc}

00002020 <spi_write>:
{
    2020:	b580      	push	{r7, lr}
    2022:	b084      	sub	sp, #16
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
    2028:	000a      	movs	r2, r1
    202a:	1cbb      	adds	r3, r7, #2
    202c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	0018      	movs	r0, r3
    2038:	4b0a      	ldr	r3, [pc, #40]	; (2064 <spi_write+0x44>)
    203a:	4798      	blx	r3
    203c:	0003      	movs	r3, r0
    203e:	001a      	movs	r2, r3
    2040:	2301      	movs	r3, #1
    2042:	4053      	eors	r3, r2
    2044:	b2db      	uxtb	r3, r3
    2046:	2b00      	cmp	r3, #0
    2048:	d001      	beq.n	204e <spi_write+0x2e>
		return STATUS_BUSY;
    204a:	2305      	movs	r3, #5
    204c:	e006      	b.n	205c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    204e:	1cbb      	adds	r3, r7, #2
    2050:	881b      	ldrh	r3, [r3, #0]
    2052:	05db      	lsls	r3, r3, #23
    2054:	0dda      	lsrs	r2, r3, #23
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    205a:	2300      	movs	r3, #0
}
    205c:	0018      	movs	r0, r3
    205e:	46bd      	mov	sp, r7
    2060:	b004      	add	sp, #16
    2062:	bd80      	pop	{r7, pc}
    2064:	00001fd1 	.word	0x00001fd1

00002068 <spi_read>:
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	681b      	ldr	r3, [r3, #0]
    2076:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	0018      	movs	r0, r3
    207c:	4b1b      	ldr	r3, [pc, #108]	; (20ec <spi_read+0x84>)
    207e:	4798      	blx	r3
    2080:	0003      	movs	r3, r0
    2082:	001a      	movs	r2, r3
    2084:	2301      	movs	r3, #1
    2086:	4053      	eors	r3, r2
    2088:	b2db      	uxtb	r3, r3
    208a:	2b00      	cmp	r3, #0
    208c:	d001      	beq.n	2092 <spi_read+0x2a>
		return STATUS_ERR_IO;
    208e:	2310      	movs	r3, #16
    2090:	e027      	b.n	20e2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    2092:	230f      	movs	r3, #15
    2094:	18fb      	adds	r3, r7, r3
    2096:	2200      	movs	r2, #0
    2098:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    209a:	68bb      	ldr	r3, [r7, #8]
    209c:	8b5b      	ldrh	r3, [r3, #26]
    209e:	b29b      	uxth	r3, r3
    20a0:	001a      	movs	r2, r3
    20a2:	2304      	movs	r3, #4
    20a4:	4013      	ands	r3, r2
    20a6:	d006      	beq.n	20b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    20a8:	230f      	movs	r3, #15
    20aa:	18fb      	adds	r3, r7, r3
    20ac:	221e      	movs	r2, #30
    20ae:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    20b0:	68bb      	ldr	r3, [r7, #8]
    20b2:	2204      	movs	r2, #4
    20b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	799b      	ldrb	r3, [r3, #6]
    20ba:	2b01      	cmp	r3, #1
    20bc:	d108      	bne.n	20d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    20be:	68bb      	ldr	r3, [r7, #8]
    20c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20c2:	b29b      	uxth	r3, r3
    20c4:	05db      	lsls	r3, r3, #23
    20c6:	0ddb      	lsrs	r3, r3, #23
    20c8:	b29a      	uxth	r2, r3
    20ca:	683b      	ldr	r3, [r7, #0]
    20cc:	801a      	strh	r2, [r3, #0]
    20ce:	e005      	b.n	20dc <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    20d0:	68bb      	ldr	r3, [r7, #8]
    20d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20d4:	b2db      	uxtb	r3, r3
    20d6:	b29a      	uxth	r2, r3
    20d8:	683b      	ldr	r3, [r7, #0]
    20da:	801a      	strh	r2, [r3, #0]
	return retval;
    20dc:	230f      	movs	r3, #15
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781b      	ldrb	r3, [r3, #0]
}
    20e2:	0018      	movs	r0, r3
    20e4:	46bd      	mov	sp, r7
    20e6:	b004      	add	sp, #16
    20e8:	bd80      	pop	{r7, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	00001ff9 	.word	0x00001ff9

000020f0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b084      	sub	sp, #16
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    20fe:	68fb      	ldr	r3, [r7, #12]
    2100:	2202      	movs	r2, #2
    2102:	761a      	strb	r2, [r3, #24]
}
    2104:	46c0      	nop			; (mov r8, r8)
    2106:	46bd      	mov	sp, r7
    2108:	b004      	add	sp, #16
    210a:	bd80      	pop	{r7, pc}

0000210c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    210c:	b590      	push	{r4, r7, lr}
    210e:	b093      	sub	sp, #76	; 0x4c
    2110:	af00      	add	r7, sp, #0
    2112:	6078      	str	r0, [r7, #4]
    2114:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2122:	231c      	movs	r3, #28
    2124:	18fb      	adds	r3, r7, r3
    2126:	0018      	movs	r0, r3
    2128:	4b85      	ldr	r3, [pc, #532]	; (2340 <_spi_set_config+0x234>)
    212a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    212c:	231c      	movs	r3, #28
    212e:	18fb      	adds	r3, r7, r3
    2130:	2200      	movs	r2, #0
    2132:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    2134:	683b      	ldr	r3, [r7, #0]
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	2b00      	cmp	r3, #0
    213a:	d103      	bne.n	2144 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    213c:	231c      	movs	r3, #28
    213e:	18fb      	adds	r3, r7, r3
    2140:	2200      	movs	r2, #0
    2142:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2144:	683b      	ldr	r3, [r7, #0]
    2146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    2148:	230c      	movs	r3, #12
    214a:	18fb      	adds	r3, r7, r3
    214c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    214e:	683b      	ldr	r3, [r7, #0]
    2150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    2152:	230c      	movs	r3, #12
    2154:	18fb      	adds	r3, r7, r3
    2156:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2158:	683b      	ldr	r3, [r7, #0]
    215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    215c:	230c      	movs	r3, #12
    215e:	18fb      	adds	r3, r7, r3
    2160:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2162:	683b      	ldr	r3, [r7, #0]
    2164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2166:	230c      	movs	r3, #12
    2168:	18fb      	adds	r3, r7, r3
    216a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    216c:	2347      	movs	r3, #71	; 0x47
    216e:	18fb      	adds	r3, r7, r3
    2170:	2200      	movs	r2, #0
    2172:	701a      	strb	r2, [r3, #0]
    2174:	e02c      	b.n	21d0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2176:	2347      	movs	r3, #71	; 0x47
    2178:	18fb      	adds	r3, r7, r3
    217a:	781a      	ldrb	r2, [r3, #0]
    217c:	230c      	movs	r3, #12
    217e:	18fb      	adds	r3, r7, r3
    2180:	0092      	lsls	r2, r2, #2
    2182:	58d3      	ldr	r3, [r2, r3]
    2184:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2188:	2b00      	cmp	r3, #0
    218a:	d109      	bne.n	21a0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    218c:	2347      	movs	r3, #71	; 0x47
    218e:	18fb      	adds	r3, r7, r3
    2190:	781a      	ldrb	r2, [r3, #0]
    2192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2194:	0011      	movs	r1, r2
    2196:	0018      	movs	r0, r3
    2198:	4b6a      	ldr	r3, [pc, #424]	; (2344 <_spi_set_config+0x238>)
    219a:	4798      	blx	r3
    219c:	0003      	movs	r3, r0
    219e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    21a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21a2:	3301      	adds	r3, #1
    21a4:	d00d      	beq.n	21c2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    21a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21a8:	b2da      	uxtb	r2, r3
    21aa:	231c      	movs	r3, #28
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    21b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21b2:	0c1b      	lsrs	r3, r3, #16
    21b4:	b2db      	uxtb	r3, r3
    21b6:	221c      	movs	r2, #28
    21b8:	18ba      	adds	r2, r7, r2
    21ba:	0011      	movs	r1, r2
    21bc:	0018      	movs	r0, r3
    21be:	4b62      	ldr	r3, [pc, #392]	; (2348 <_spi_set_config+0x23c>)
    21c0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    21c2:	2347      	movs	r3, #71	; 0x47
    21c4:	18fb      	adds	r3, r7, r3
    21c6:	781a      	ldrb	r2, [r3, #0]
    21c8:	2347      	movs	r3, #71	; 0x47
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	3201      	adds	r2, #1
    21ce:	701a      	strb	r2, [r3, #0]
    21d0:	2347      	movs	r3, #71	; 0x47
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	2b03      	cmp	r3, #3
    21d8:	d9cd      	bls.n	2176 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    21da:	683b      	ldr	r3, [r7, #0]
    21dc:	781a      	ldrb	r2, [r3, #0]
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    21e2:	683b      	ldr	r3, [r7, #0]
    21e4:	7c1a      	ldrb	r2, [r3, #16]
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    21ea:	683b      	ldr	r3, [r7, #0]
    21ec:	7c9a      	ldrb	r2, [r3, #18]
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    21f2:	683b      	ldr	r3, [r7, #0]
    21f4:	7d1a      	ldrb	r2, [r3, #20]
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    21fa:	230a      	movs	r3, #10
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	2200      	movs	r2, #0
    2200:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    2202:	2300      	movs	r3, #0
    2204:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    2206:	2300      	movs	r3, #0
    2208:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    220a:	683b      	ldr	r3, [r7, #0]
    220c:	781b      	ldrb	r3, [r3, #0]
    220e:	2b01      	cmp	r3, #1
    2210:	d129      	bne.n	2266 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	0018      	movs	r0, r3
    2218:	4b4c      	ldr	r3, [pc, #304]	; (234c <_spi_set_config+0x240>)
    221a:	4798      	blx	r3
    221c:	0003      	movs	r3, r0
    221e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2222:	3314      	adds	r3, #20
    2224:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2226:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2228:	b2db      	uxtb	r3, r3
    222a:	0018      	movs	r0, r3
    222c:	4b48      	ldr	r3, [pc, #288]	; (2350 <_spi_set_config+0x244>)
    222e:	4798      	blx	r3
    2230:	0003      	movs	r3, r0
    2232:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2234:	683b      	ldr	r3, [r7, #0]
    2236:	699b      	ldr	r3, [r3, #24]
    2238:	2223      	movs	r2, #35	; 0x23
    223a:	18bc      	adds	r4, r7, r2
    223c:	220a      	movs	r2, #10
    223e:	18ba      	adds	r2, r7, r2
    2240:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2242:	0018      	movs	r0, r3
    2244:	4b43      	ldr	r3, [pc, #268]	; (2354 <_spi_set_config+0x248>)
    2246:	4798      	blx	r3
    2248:	0003      	movs	r3, r0
    224a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    224c:	2323      	movs	r3, #35	; 0x23
    224e:	18fb      	adds	r3, r7, r3
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d001      	beq.n	225a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2256:	2317      	movs	r3, #23
    2258:	e06d      	b.n	2336 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    225a:	230a      	movs	r3, #10
    225c:	18fb      	adds	r3, r7, r3
    225e:	881b      	ldrh	r3, [r3, #0]
    2260:	b2da      	uxtb	r2, r3
    2262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2264:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2266:	683b      	ldr	r3, [r7, #0]
    2268:	781b      	ldrb	r3, [r3, #0]
    226a:	2b00      	cmp	r3, #0
    226c:	d11a      	bne.n	22a4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    226e:	683b      	ldr	r3, [r7, #0]
    2270:	699b      	ldr	r3, [r3, #24]
    2272:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	8b9b      	ldrh	r3, [r3, #28]
    2278:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    227e:	683a      	ldr	r2, [r7, #0]
    2280:	7f92      	ldrb	r2, [r2, #30]
    2282:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2284:	683a      	ldr	r2, [r7, #0]
    2286:	7fd2      	ldrb	r2, [r2, #31]
    2288:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    228a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    228c:	431a      	orrs	r2, r3
    228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2290:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    2292:	683b      	ldr	r3, [r7, #0]
    2294:	2220      	movs	r2, #32
    2296:	5c9b      	ldrb	r3, [r3, r2]
    2298:	2b00      	cmp	r3, #0
    229a:	d003      	beq.n	22a4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    229e:	2240      	movs	r2, #64	; 0x40
    22a0:	4313      	orrs	r3, r2
    22a2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    22a4:	683b      	ldr	r3, [r7, #0]
    22a6:	685b      	ldr	r3, [r3, #4]
    22a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22aa:	4313      	orrs	r3, r2
    22ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    22ae:	683b      	ldr	r3, [r7, #0]
    22b0:	689b      	ldr	r3, [r3, #8]
    22b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22b4:	4313      	orrs	r3, r2
    22b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    22b8:	683b      	ldr	r3, [r7, #0]
    22ba:	68db      	ldr	r3, [r3, #12]
    22bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22be:	4313      	orrs	r3, r2
    22c0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    22c2:	683b      	ldr	r3, [r7, #0]
    22c4:	7c1b      	ldrb	r3, [r3, #16]
    22c6:	001a      	movs	r2, r3
    22c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22ca:	4313      	orrs	r3, r2
    22cc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    22ce:	683b      	ldr	r3, [r7, #0]
    22d0:	7c5b      	ldrb	r3, [r3, #17]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d103      	bne.n	22de <_spi_set_config+0x1d2>
    22d6:	4b20      	ldr	r3, [pc, #128]	; (2358 <_spi_set_config+0x24c>)
    22d8:	4798      	blx	r3
    22da:	1e03      	subs	r3, r0, #0
    22dc:	d003      	beq.n	22e6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    22de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22e0:	2280      	movs	r2, #128	; 0x80
    22e2:	4313      	orrs	r3, r2
    22e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    22e6:	683b      	ldr	r3, [r7, #0]
    22e8:	7c9b      	ldrb	r3, [r3, #18]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d004      	beq.n	22f8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    22ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0292      	lsls	r2, r2, #10
    22f4:	4313      	orrs	r3, r2
    22f6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    22f8:	683b      	ldr	r3, [r7, #0]
    22fa:	7cdb      	ldrb	r3, [r3, #19]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d004      	beq.n	230a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2302:	2280      	movs	r2, #128	; 0x80
    2304:	0092      	lsls	r2, r2, #2
    2306:	4313      	orrs	r3, r2
    2308:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    230a:	683b      	ldr	r3, [r7, #0]
    230c:	7d1b      	ldrb	r3, [r3, #20]
    230e:	2b00      	cmp	r3, #0
    2310:	d004      	beq.n	231c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2314:	2280      	movs	r2, #128	; 0x80
    2316:	0192      	lsls	r2, r2, #6
    2318:	4313      	orrs	r3, r2
    231a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    231e:	681a      	ldr	r2, [r3, #0]
    2320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2322:	431a      	orrs	r2, r3
    2324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2326:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    232a:	685a      	ldr	r2, [r3, #4]
    232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    232e:	431a      	orrs	r2, r3
    2330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2332:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2334:	2300      	movs	r3, #0
}
    2336:	0018      	movs	r0, r3
    2338:	46bd      	mov	sp, r7
    233a:	b013      	add	sp, #76	; 0x4c
    233c:	bd90      	pop	{r4, r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00001eed 	.word	0x00001eed
    2344:	00001b8d 	.word	0x00001b8d
    2348:	000043c5 	.word	0x000043c5
    234c:	00001d49 	.word	0x00001d49
    2350:	000041fd 	.word	0x000041fd
    2354:	000018c3 	.word	0x000018c3
    2358:	00001f89 	.word	0x00001f89

0000235c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    235c:	b590      	push	{r4, r7, lr}
    235e:	b08b      	sub	sp, #44	; 0x2c
    2360:	af00      	add	r7, sp, #0
    2362:	60f8      	str	r0, [r7, #12]
    2364:	60b9      	str	r1, [r7, #8]
    2366:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2368:	68fb      	ldr	r3, [r7, #12]
    236a:	68ba      	ldr	r2, [r7, #8]
    236c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    236e:	68fb      	ldr	r3, [r7, #12]
    2370:	681b      	ldr	r3, [r3, #0]
    2372:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2374:	6a3b      	ldr	r3, [r7, #32]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	2202      	movs	r2, #2
    237a:	4013      	ands	r3, r2
    237c:	d001      	beq.n	2382 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    237e:	231c      	movs	r3, #28
    2380:	e0a6      	b.n	24d0 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2382:	6a3b      	ldr	r3, [r7, #32]
    2384:	681b      	ldr	r3, [r3, #0]
    2386:	2201      	movs	r2, #1
    2388:	4013      	ands	r3, r2
    238a:	d001      	beq.n	2390 <spi_init+0x34>
		return STATUS_BUSY;
    238c:	2305      	movs	r3, #5
    238e:	e09f      	b.n	24d0 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2390:	68fb      	ldr	r3, [r7, #12]
    2392:	681b      	ldr	r3, [r3, #0]
    2394:	0018      	movs	r0, r3
    2396:	4b50      	ldr	r3, [pc, #320]	; (24d8 <spi_init+0x17c>)
    2398:	4798      	blx	r3
    239a:	0003      	movs	r3, r0
    239c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    239e:	69fb      	ldr	r3, [r7, #28]
    23a0:	3302      	adds	r3, #2
    23a2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23a4:	69fb      	ldr	r3, [r7, #28]
    23a6:	3314      	adds	r3, #20
    23a8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    23aa:	2201      	movs	r2, #1
    23ac:	69bb      	ldr	r3, [r7, #24]
    23ae:	409a      	lsls	r2, r3
    23b0:	0013      	movs	r3, r2
    23b2:	0019      	movs	r1, r3
    23b4:	2002      	movs	r0, #2
    23b6:	4b49      	ldr	r3, [pc, #292]	; (24dc <spi_init+0x180>)
    23b8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    23ba:	2310      	movs	r3, #16
    23bc:	18fb      	adds	r3, r7, r3
    23be:	0018      	movs	r0, r3
    23c0:	4b47      	ldr	r3, [pc, #284]	; (24e0 <spi_init+0x184>)
    23c2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2224      	movs	r2, #36	; 0x24
    23c8:	5c9a      	ldrb	r2, [r3, r2]
    23ca:	2310      	movs	r3, #16
    23cc:	18fb      	adds	r3, r7, r3
    23ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    23d0:	697b      	ldr	r3, [r7, #20]
    23d2:	b2db      	uxtb	r3, r3
    23d4:	2210      	movs	r2, #16
    23d6:	18ba      	adds	r2, r7, r2
    23d8:	0011      	movs	r1, r2
    23da:	0018      	movs	r0, r3
    23dc:	4b41      	ldr	r3, [pc, #260]	; (24e4 <spi_init+0x188>)
    23de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    23e0:	697b      	ldr	r3, [r7, #20]
    23e2:	b2db      	uxtb	r3, r3
    23e4:	0018      	movs	r0, r3
    23e6:	4b40      	ldr	r3, [pc, #256]	; (24e8 <spi_init+0x18c>)
    23e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	2224      	movs	r2, #36	; 0x24
    23ee:	5c9b      	ldrb	r3, [r3, r2]
    23f0:	2100      	movs	r1, #0
    23f2:	0018      	movs	r0, r3
    23f4:	4b3d      	ldr	r3, [pc, #244]	; (24ec <spi_init+0x190>)
    23f6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	781b      	ldrb	r3, [r3, #0]
    23fc:	2b01      	cmp	r3, #1
    23fe:	d105      	bne.n	240c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2400:	6a3b      	ldr	r3, [r7, #32]
    2402:	681b      	ldr	r3, [r3, #0]
    2404:	220c      	movs	r2, #12
    2406:	431a      	orrs	r2, r3
    2408:	6a3b      	ldr	r3, [r7, #32]
    240a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	781b      	ldrb	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d105      	bne.n	2420 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    2414:	6a3b      	ldr	r3, [r7, #32]
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	2208      	movs	r2, #8
    241a:	431a      	orrs	r2, r3
    241c:	6a3b      	ldr	r3, [r7, #32]
    241e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2420:	2327      	movs	r3, #39	; 0x27
    2422:	18fb      	adds	r3, r7, r3
    2424:	2200      	movs	r2, #0
    2426:	701a      	strb	r2, [r3, #0]
    2428:	e010      	b.n	244c <spi_init+0xf0>
		module->callback[i]        = NULL;
    242a:	2327      	movs	r3, #39	; 0x27
    242c:	18fb      	adds	r3, r7, r3
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	68fa      	ldr	r2, [r7, #12]
    2432:	3302      	adds	r3, #2
    2434:	009b      	lsls	r3, r3, #2
    2436:	18d3      	adds	r3, r2, r3
    2438:	3304      	adds	r3, #4
    243a:	2200      	movs	r2, #0
    243c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    243e:	2327      	movs	r3, #39	; 0x27
    2440:	18fb      	adds	r3, r7, r3
    2442:	781a      	ldrb	r2, [r3, #0]
    2444:	2327      	movs	r3, #39	; 0x27
    2446:	18fb      	adds	r3, r7, r3
    2448:	3201      	adds	r2, #1
    244a:	701a      	strb	r2, [r3, #0]
    244c:	2327      	movs	r3, #39	; 0x27
    244e:	18fb      	adds	r3, r7, r3
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	2b06      	cmp	r3, #6
    2454:	d9e9      	bls.n	242a <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    2456:	68fb      	ldr	r3, [r7, #12]
    2458:	2200      	movs	r2, #0
    245a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    245c:	68fb      	ldr	r3, [r7, #12]
    245e:	2200      	movs	r2, #0
    2460:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2462:	68fb      	ldr	r3, [r7, #12]
    2464:	2200      	movs	r2, #0
    2466:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2468:	68fb      	ldr	r3, [r7, #12]
    246a:	2200      	movs	r2, #0
    246c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    246e:	68fb      	ldr	r3, [r7, #12]
    2470:	2236      	movs	r2, #54	; 0x36
    2472:	2100      	movs	r1, #0
    2474:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    2476:	68fb      	ldr	r3, [r7, #12]
    2478:	2237      	movs	r2, #55	; 0x37
    247a:	2100      	movs	r1, #0
    247c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	2238      	movs	r2, #56	; 0x38
    2482:	2100      	movs	r1, #0
    2484:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    2486:	68fb      	ldr	r3, [r7, #12]
    2488:	2203      	movs	r2, #3
    248a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	2200      	movs	r2, #0
    2490:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2492:	68fb      	ldr	r3, [r7, #12]
    2494:	681b      	ldr	r3, [r3, #0]
    2496:	2213      	movs	r2, #19
    2498:	18bc      	adds	r4, r7, r2
    249a:	0018      	movs	r0, r3
    249c:	4b0e      	ldr	r3, [pc, #56]	; (24d8 <spi_init+0x17c>)
    249e:	4798      	blx	r3
    24a0:	0003      	movs	r3, r0
    24a2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    24a4:	4a12      	ldr	r2, [pc, #72]	; (24f0 <spi_init+0x194>)
    24a6:	2313      	movs	r3, #19
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	781b      	ldrb	r3, [r3, #0]
    24ac:	0011      	movs	r1, r2
    24ae:	0018      	movs	r0, r3
    24b0:	4b10      	ldr	r3, [pc, #64]	; (24f4 <spi_init+0x198>)
    24b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    24b4:	2313      	movs	r3, #19
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	781a      	ldrb	r2, [r3, #0]
    24ba:	4b0f      	ldr	r3, [pc, #60]	; (24f8 <spi_init+0x19c>)
    24bc:	0092      	lsls	r2, r2, #2
    24be:	68f9      	ldr	r1, [r7, #12]
    24c0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    24c2:	687a      	ldr	r2, [r7, #4]
    24c4:	68fb      	ldr	r3, [r7, #12]
    24c6:	0011      	movs	r1, r2
    24c8:	0018      	movs	r0, r3
    24ca:	4b0c      	ldr	r3, [pc, #48]	; (24fc <spi_init+0x1a0>)
    24cc:	4798      	blx	r3
    24ce:	0003      	movs	r3, r0
}
    24d0:	0018      	movs	r0, r3
    24d2:	46bd      	mov	sp, r7
    24d4:	b00b      	add	sp, #44	; 0x2c
    24d6:	bd90      	pop	{r4, r7, pc}
    24d8:	00001d49 	.word	0x00001d49
    24dc:	00001f2d 	.word	0x00001f2d
    24e0:	00001f15 	.word	0x00001f15
    24e4:	000040d9 	.word	0x000040d9
    24e8:	0000411d 	.word	0x0000411d
    24ec:	00001b01 	.word	0x00001b01
    24f0:	00002b39 	.word	0x00002b39
    24f4:	00001dad 	.word	0x00001dad
    24f8:	20000508 	.word	0x20000508
    24fc:	0000210d 	.word	0x0000210d

00002500 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2500:	b590      	push	{r4, r7, lr}
    2502:	b089      	sub	sp, #36	; 0x24
    2504:	af00      	add	r7, sp, #0
    2506:	60f8      	str	r0, [r7, #12]
    2508:	60b9      	str	r1, [r7, #8]
    250a:	0019      	movs	r1, r3
    250c:	1dbb      	adds	r3, r7, #6
    250e:	801a      	strh	r2, [r3, #0]
    2510:	1d3b      	adds	r3, r7, #4
    2512:	1c0a      	adds	r2, r1, #0
    2514:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2516:	68fb      	ldr	r3, [r7, #12]
    2518:	2238      	movs	r2, #56	; 0x38
    251a:	5c9b      	ldrb	r3, [r3, r2]
    251c:	b2db      	uxtb	r3, r3
    251e:	2b05      	cmp	r3, #5
    2520:	d101      	bne.n	2526 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2522:	2305      	movs	r3, #5
    2524:	e0b8      	b.n	2698 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    2526:	1dbb      	adds	r3, r7, #6
    2528:	881b      	ldrh	r3, [r3, #0]
    252a:	2b00      	cmp	r3, #0
    252c:	d101      	bne.n	2532 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    252e:	2317      	movs	r3, #23
    2530:	e0b2      	b.n	2698 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    2532:	68fb      	ldr	r3, [r7, #12]
    2534:	79db      	ldrb	r3, [r3, #7]
    2536:	2201      	movs	r2, #1
    2538:	4053      	eors	r3, r2
    253a:	b2db      	uxtb	r3, r3
    253c:	2b00      	cmp	r3, #0
    253e:	d001      	beq.n	2544 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    2540:	231c      	movs	r3, #28
    2542:	e0a9      	b.n	2698 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	795b      	ldrb	r3, [r3, #5]
    2548:	2b00      	cmp	r3, #0
    254a:	d109      	bne.n	2560 <spi_read_buffer_wait+0x60>
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	0018      	movs	r0, r3
    2550:	4b53      	ldr	r3, [pc, #332]	; (26a0 <spi_read_buffer_wait+0x1a0>)
    2552:	4798      	blx	r3
    2554:	1e03      	subs	r3, r0, #0
    2556:	d003      	beq.n	2560 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    2558:	68fb      	ldr	r3, [r7, #12]
    255a:	0018      	movs	r0, r3
    255c:	4b51      	ldr	r3, [pc, #324]	; (26a4 <spi_read_buffer_wait+0x1a4>)
    255e:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    2560:	231e      	movs	r3, #30
    2562:	18fb      	adds	r3, r7, r3
    2564:	2200      	movs	r2, #0
    2566:	801a      	strh	r2, [r3, #0]

	while (length--) {
    2568:	e08d      	b.n	2686 <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    256a:	68fb      	ldr	r3, [r7, #12]
    256c:	795b      	ldrb	r3, [r3, #5]
    256e:	2b01      	cmp	r3, #1
    2570:	d112      	bne.n	2598 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	0018      	movs	r0, r3
    2578:	4b4b      	ldr	r3, [pc, #300]	; (26a8 <spi_read_buffer_wait+0x1a8>)
    257a:	4798      	blx	r3
    257c:	0003      	movs	r3, r0
    257e:	001a      	movs	r2, r3
    2580:	2301      	movs	r3, #1
    2582:	4053      	eors	r3, r2
    2584:	b2db      	uxtb	r3, r3
    2586:	2b00      	cmp	r3, #0
    2588:	d1f4      	bne.n	2574 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    258a:	1d3b      	adds	r3, r7, #4
    258c:	881a      	ldrh	r2, [r3, #0]
    258e:	68fb      	ldr	r3, [r7, #12]
    2590:	0011      	movs	r1, r2
    2592:	0018      	movs	r0, r3
    2594:	4b45      	ldr	r3, [pc, #276]	; (26ac <spi_read_buffer_wait+0x1ac>)
    2596:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	795b      	ldrb	r3, [r3, #5]
    259c:	2b00      	cmp	r3, #0
    259e:	d12a      	bne.n	25f6 <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    25a0:	2300      	movs	r3, #0
    25a2:	61bb      	str	r3, [r7, #24]
    25a4:	e008      	b.n	25b8 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	0018      	movs	r0, r3
    25aa:	4b41      	ldr	r3, [pc, #260]	; (26b0 <spi_read_buffer_wait+0x1b0>)
    25ac:	4798      	blx	r3
    25ae:	1e03      	subs	r3, r0, #0
    25b0:	d107      	bne.n	25c2 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    25b2:	69bb      	ldr	r3, [r7, #24]
    25b4:	3301      	adds	r3, #1
    25b6:	61bb      	str	r3, [r7, #24]
    25b8:	69bb      	ldr	r3, [r7, #24]
    25ba:	4a3e      	ldr	r2, [pc, #248]	; (26b4 <spi_read_buffer_wait+0x1b4>)
    25bc:	4293      	cmp	r3, r2
    25be:	d9f2      	bls.n	25a6 <spi_read_buffer_wait+0xa6>
    25c0:	e000      	b.n	25c4 <spi_read_buffer_wait+0xc4>
					break;
    25c2:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    25c4:	68fb      	ldr	r3, [r7, #12]
    25c6:	0018      	movs	r0, r3
    25c8:	4b35      	ldr	r3, [pc, #212]	; (26a0 <spi_read_buffer_wait+0x1a0>)
    25ca:	4798      	blx	r3
    25cc:	1e03      	subs	r3, r0, #0
    25ce:	d005      	beq.n	25dc <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    25d0:	68fb      	ldr	r3, [r7, #12]
    25d2:	0018      	movs	r0, r3
    25d4:	4b33      	ldr	r3, [pc, #204]	; (26a4 <spi_read_buffer_wait+0x1a4>)
    25d6:	4798      	blx	r3
				return STATUS_ABORTED;
    25d8:	2304      	movs	r3, #4
    25da:	e05d      	b.n	2698 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    25dc:	68fb      	ldr	r3, [r7, #12]
    25de:	0018      	movs	r0, r3
    25e0:	4b33      	ldr	r3, [pc, #204]	; (26b0 <spi_read_buffer_wait+0x1b0>)
    25e2:	4798      	blx	r3
    25e4:	0003      	movs	r3, r0
    25e6:	001a      	movs	r2, r3
    25e8:	2301      	movs	r3, #1
    25ea:	4053      	eors	r3, r2
    25ec:	b2db      	uxtb	r3, r3
    25ee:	2b00      	cmp	r3, #0
    25f0:	d001      	beq.n	25f6 <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    25f2:	2312      	movs	r3, #18
    25f4:	e050      	b.n	2698 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	0018      	movs	r0, r3
    25fc:	4b2c      	ldr	r3, [pc, #176]	; (26b0 <spi_read_buffer_wait+0x1b0>)
    25fe:	4798      	blx	r3
    2600:	0003      	movs	r3, r0
    2602:	001a      	movs	r2, r3
    2604:	2301      	movs	r3, #1
    2606:	4053      	eors	r3, r2
    2608:	b2db      	uxtb	r3, r3
    260a:	2b00      	cmp	r3, #0
    260c:	d1f4      	bne.n	25f8 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    260e:	2314      	movs	r3, #20
    2610:	18fb      	adds	r3, r7, r3
    2612:	2200      	movs	r2, #0
    2614:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    2616:	2317      	movs	r3, #23
    2618:	18fc      	adds	r4, r7, r3
    261a:	2314      	movs	r3, #20
    261c:	18fa      	adds	r2, r7, r3
    261e:	68fb      	ldr	r3, [r7, #12]
    2620:	0011      	movs	r1, r2
    2622:	0018      	movs	r0, r3
    2624:	4b24      	ldr	r3, [pc, #144]	; (26b8 <spi_read_buffer_wait+0x1b8>)
    2626:	4798      	blx	r3
    2628:	0003      	movs	r3, r0
    262a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    262c:	2317      	movs	r3, #23
    262e:	18fb      	adds	r3, r7, r3
    2630:	781b      	ldrb	r3, [r3, #0]
    2632:	2b00      	cmp	r3, #0
    2634:	d003      	beq.n	263e <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    2636:	2317      	movs	r3, #23
    2638:	18fb      	adds	r3, r7, r3
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	e02c      	b.n	2698 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    263e:	231e      	movs	r3, #30
    2640:	18fb      	adds	r3, r7, r3
    2642:	881b      	ldrh	r3, [r3, #0]
    2644:	221e      	movs	r2, #30
    2646:	18ba      	adds	r2, r7, r2
    2648:	1c59      	adds	r1, r3, #1
    264a:	8011      	strh	r1, [r2, #0]
    264c:	001a      	movs	r2, r3
    264e:	68bb      	ldr	r3, [r7, #8]
    2650:	189b      	adds	r3, r3, r2
    2652:	2214      	movs	r2, #20
    2654:	18ba      	adds	r2, r7, r2
    2656:	8812      	ldrh	r2, [r2, #0]
    2658:	b2d2      	uxtb	r2, r2
    265a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    265c:	68fb      	ldr	r3, [r7, #12]
    265e:	799b      	ldrb	r3, [r3, #6]
    2660:	2b01      	cmp	r3, #1
    2662:	d110      	bne.n	2686 <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    2664:	231e      	movs	r3, #30
    2666:	18fb      	adds	r3, r7, r3
    2668:	881b      	ldrh	r3, [r3, #0]
    266a:	221e      	movs	r2, #30
    266c:	18ba      	adds	r2, r7, r2
    266e:	1c59      	adds	r1, r3, #1
    2670:	8011      	strh	r1, [r2, #0]
    2672:	001a      	movs	r2, r3
    2674:	68bb      	ldr	r3, [r7, #8]
    2676:	189b      	adds	r3, r3, r2
    2678:	2214      	movs	r2, #20
    267a:	18ba      	adds	r2, r7, r2
    267c:	8812      	ldrh	r2, [r2, #0]
    267e:	0a12      	lsrs	r2, r2, #8
    2680:	b292      	uxth	r2, r2
    2682:	b2d2      	uxtb	r2, r2
    2684:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2686:	1dbb      	adds	r3, r7, #6
    2688:	881b      	ldrh	r3, [r3, #0]
    268a:	1dba      	adds	r2, r7, #6
    268c:	1e59      	subs	r1, r3, #1
    268e:	8011      	strh	r1, [r2, #0]
    2690:	2b00      	cmp	r3, #0
    2692:	d000      	beq.n	2696 <spi_read_buffer_wait+0x196>
    2694:	e769      	b.n	256a <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    2696:	2300      	movs	r3, #0
}
    2698:	0018      	movs	r0, r3
    269a:	46bd      	mov	sp, r7
    269c:	b009      	add	sp, #36	; 0x24
    269e:	bd90      	pop	{r4, r7, pc}
    26a0:	00001fa9 	.word	0x00001fa9
    26a4:	000020f1 	.word	0x000020f1
    26a8:	00001fd1 	.word	0x00001fd1
    26ac:	00002021 	.word	0x00002021
    26b0:	00001ff9 	.word	0x00001ff9
    26b4:	00002710 	.word	0x00002710
    26b8:	00002069 	.word	0x00002069

000026bc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b08a      	sub	sp, #40	; 0x28
    26c0:	af00      	add	r7, sp, #0
    26c2:	60f8      	str	r0, [r7, #12]
    26c4:	60b9      	str	r1, [r7, #8]
    26c6:	1dbb      	adds	r3, r7, #6
    26c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    26ca:	68fb      	ldr	r3, [r7, #12]
    26cc:	2238      	movs	r2, #56	; 0x38
    26ce:	5c9b      	ldrb	r3, [r3, r2]
    26d0:	b2db      	uxtb	r3, r3
    26d2:	2b05      	cmp	r3, #5
    26d4:	d101      	bne.n	26da <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    26d6:	2305      	movs	r3, #5
    26d8:	e170      	b.n	29bc <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    26da:	1dbb      	adds	r3, r7, #6
    26dc:	881b      	ldrh	r3, [r3, #0]
    26de:	2b00      	cmp	r3, #0
    26e0:	d101      	bne.n	26e6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    26e2:	2317      	movs	r3, #23
    26e4:	e16a      	b.n	29bc <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    26e6:	68fb      	ldr	r3, [r7, #12]
    26e8:	795b      	ldrb	r3, [r3, #5]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d109      	bne.n	2702 <spi_write_buffer_wait+0x46>
    26ee:	68fb      	ldr	r3, [r7, #12]
    26f0:	0018      	movs	r0, r3
    26f2:	4bb4      	ldr	r3, [pc, #720]	; (29c4 <spi_write_buffer_wait+0x308>)
    26f4:	4798      	blx	r3
    26f6:	1e03      	subs	r3, r0, #0
    26f8:	d003      	beq.n	2702 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    26fa:	68fb      	ldr	r3, [r7, #12]
    26fc:	0018      	movs	r0, r3
    26fe:	4bb2      	ldr	r3, [pc, #712]	; (29c8 <spi_write_buffer_wait+0x30c>)
    2700:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    2702:	2326      	movs	r3, #38	; 0x26
    2704:	18fb      	adds	r3, r7, r3
    2706:	2200      	movs	r2, #0
    2708:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    270a:	2324      	movs	r3, #36	; 0x24
    270c:	18fb      	adds	r3, r7, r3
    270e:	1dba      	adds	r2, r7, #6
    2710:	8812      	ldrh	r2, [r2, #0]
    2712:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    2714:	e0fe      	b.n	2914 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2716:	68fb      	ldr	r3, [r7, #12]
    2718:	795b      	ldrb	r3, [r3, #5]
    271a:	2b00      	cmp	r3, #0
    271c:	d12a      	bne.n	2774 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    271e:	2300      	movs	r3, #0
    2720:	623b      	str	r3, [r7, #32]
    2722:	e008      	b.n	2736 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	0018      	movs	r0, r3
    2728:	4ba8      	ldr	r3, [pc, #672]	; (29cc <spi_write_buffer_wait+0x310>)
    272a:	4798      	blx	r3
    272c:	1e03      	subs	r3, r0, #0
    272e:	d107      	bne.n	2740 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2730:	6a3b      	ldr	r3, [r7, #32]
    2732:	3301      	adds	r3, #1
    2734:	623b      	str	r3, [r7, #32]
    2736:	6a3b      	ldr	r3, [r7, #32]
    2738:	4aa5      	ldr	r2, [pc, #660]	; (29d0 <spi_write_buffer_wait+0x314>)
    273a:	4293      	cmp	r3, r2
    273c:	d9f2      	bls.n	2724 <spi_write_buffer_wait+0x68>
    273e:	e000      	b.n	2742 <spi_write_buffer_wait+0x86>
					break;
    2740:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2742:	68fb      	ldr	r3, [r7, #12]
    2744:	0018      	movs	r0, r3
    2746:	4b9f      	ldr	r3, [pc, #636]	; (29c4 <spi_write_buffer_wait+0x308>)
    2748:	4798      	blx	r3
    274a:	1e03      	subs	r3, r0, #0
    274c:	d005      	beq.n	275a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    274e:	68fb      	ldr	r3, [r7, #12]
    2750:	0018      	movs	r0, r3
    2752:	4b9d      	ldr	r3, [pc, #628]	; (29c8 <spi_write_buffer_wait+0x30c>)
    2754:	4798      	blx	r3
				return STATUS_ABORTED;
    2756:	2304      	movs	r3, #4
    2758:	e130      	b.n	29bc <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    275a:	68fb      	ldr	r3, [r7, #12]
    275c:	0018      	movs	r0, r3
    275e:	4b9b      	ldr	r3, [pc, #620]	; (29cc <spi_write_buffer_wait+0x310>)
    2760:	4798      	blx	r3
    2762:	0003      	movs	r3, r0
    2764:	001a      	movs	r2, r3
    2766:	2301      	movs	r3, #1
    2768:	4053      	eors	r3, r2
    276a:	b2db      	uxtb	r3, r3
    276c:	2b00      	cmp	r3, #0
    276e:	d001      	beq.n	2774 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2770:	2312      	movs	r3, #18
    2772:	e123      	b.n	29bc <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2774:	46c0      	nop			; (mov r8, r8)
    2776:	68fb      	ldr	r3, [r7, #12]
    2778:	0018      	movs	r0, r3
    277a:	4b94      	ldr	r3, [pc, #592]	; (29cc <spi_write_buffer_wait+0x310>)
    277c:	4798      	blx	r3
    277e:	0003      	movs	r3, r0
    2780:	001a      	movs	r2, r3
    2782:	2301      	movs	r3, #1
    2784:	4053      	eors	r3, r2
    2786:	b2db      	uxtb	r3, r3
    2788:	2b00      	cmp	r3, #0
    278a:	d1f4      	bne.n	2776 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    278c:	2326      	movs	r3, #38	; 0x26
    278e:	18fb      	adds	r3, r7, r3
    2790:	881b      	ldrh	r3, [r3, #0]
    2792:	2226      	movs	r2, #38	; 0x26
    2794:	18ba      	adds	r2, r7, r2
    2796:	1c59      	adds	r1, r3, #1
    2798:	8011      	strh	r1, [r2, #0]
    279a:	001a      	movs	r2, r3
    279c:	68bb      	ldr	r3, [r7, #8]
    279e:	189b      	adds	r3, r3, r2
    27a0:	781a      	ldrb	r2, [r3, #0]
    27a2:	231e      	movs	r3, #30
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    27a8:	68fb      	ldr	r3, [r7, #12]
    27aa:	799b      	ldrb	r3, [r3, #6]
    27ac:	2b01      	cmp	r3, #1
    27ae:	d115      	bne.n	27dc <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    27b0:	2326      	movs	r3, #38	; 0x26
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	881b      	ldrh	r3, [r3, #0]
    27b6:	2226      	movs	r2, #38	; 0x26
    27b8:	18ba      	adds	r2, r7, r2
    27ba:	1c59      	adds	r1, r3, #1
    27bc:	8011      	strh	r1, [r2, #0]
    27be:	001a      	movs	r2, r3
    27c0:	68bb      	ldr	r3, [r7, #8]
    27c2:	189b      	adds	r3, r3, r2
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	021b      	lsls	r3, r3, #8
    27c8:	b21a      	sxth	r2, r3
    27ca:	231e      	movs	r3, #30
    27cc:	18fb      	adds	r3, r7, r3
    27ce:	2100      	movs	r1, #0
    27d0:	5e5b      	ldrsh	r3, [r3, r1]
    27d2:	4313      	orrs	r3, r2
    27d4:	b21a      	sxth	r2, r3
    27d6:	231e      	movs	r3, #30
    27d8:	18fb      	adds	r3, r7, r3
    27da:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    27dc:	231e      	movs	r3, #30
    27de:	18fb      	adds	r3, r7, r3
    27e0:	881a      	ldrh	r2, [r3, #0]
    27e2:	68fb      	ldr	r3, [r7, #12]
    27e4:	0011      	movs	r1, r2
    27e6:	0018      	movs	r0, r3
    27e8:	4b7a      	ldr	r3, [pc, #488]	; (29d4 <spi_write_buffer_wait+0x318>)
    27ea:	4798      	blx	r3

		if (module->receiver_enabled) {
    27ec:	68fb      	ldr	r3, [r7, #12]
    27ee:	79db      	ldrb	r3, [r3, #7]
    27f0:	2224      	movs	r2, #36	; 0x24
    27f2:	18ba      	adds	r2, r7, r2
    27f4:	2124      	movs	r1, #36	; 0x24
    27f6:	1879      	adds	r1, r7, r1
    27f8:	8809      	ldrh	r1, [r1, #0]
    27fa:	8011      	strh	r1, [r2, #0]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d100      	bne.n	2802 <spi_write_buffer_wait+0x146>
    2800:	e088      	b.n	2914 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    2802:	68fb      	ldr	r3, [r7, #12]
    2804:	795b      	ldrb	r3, [r3, #5]
    2806:	2b00      	cmp	r3, #0
    2808:	d000      	beq.n	280c <spi_write_buffer_wait+0x150>
    280a:	e069      	b.n	28e0 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    280c:	2300      	movs	r3, #0
    280e:	61bb      	str	r3, [r7, #24]
    2810:	e047      	b.n	28a2 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    2812:	1dbb      	adds	r3, r7, #6
    2814:	881b      	ldrh	r3, [r3, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d03a      	beq.n	2890 <spi_write_buffer_wait+0x1d4>
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	0018      	movs	r0, r3
    281e:	4b6b      	ldr	r3, [pc, #428]	; (29cc <spi_write_buffer_wait+0x310>)
    2820:	4798      	blx	r3
    2822:	1e03      	subs	r3, r0, #0
    2824:	d034      	beq.n	2890 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    2826:	2326      	movs	r3, #38	; 0x26
    2828:	18fb      	adds	r3, r7, r3
    282a:	881b      	ldrh	r3, [r3, #0]
    282c:	2226      	movs	r2, #38	; 0x26
    282e:	18ba      	adds	r2, r7, r2
    2830:	1c59      	adds	r1, r3, #1
    2832:	8011      	strh	r1, [r2, #0]
    2834:	001a      	movs	r2, r3
    2836:	68bb      	ldr	r3, [r7, #8]
    2838:	189b      	adds	r3, r3, r2
    283a:	781a      	ldrb	r2, [r3, #0]
    283c:	231e      	movs	r3, #30
    283e:	18fb      	adds	r3, r7, r3
    2840:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2842:	68fb      	ldr	r3, [r7, #12]
    2844:	799b      	ldrb	r3, [r3, #6]
    2846:	2b01      	cmp	r3, #1
    2848:	d115      	bne.n	2876 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    284a:	2326      	movs	r3, #38	; 0x26
    284c:	18fb      	adds	r3, r7, r3
    284e:	881b      	ldrh	r3, [r3, #0]
    2850:	2226      	movs	r2, #38	; 0x26
    2852:	18ba      	adds	r2, r7, r2
    2854:	1c59      	adds	r1, r3, #1
    2856:	8011      	strh	r1, [r2, #0]
    2858:	001a      	movs	r2, r3
    285a:	68bb      	ldr	r3, [r7, #8]
    285c:	189b      	adds	r3, r3, r2
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	021b      	lsls	r3, r3, #8
    2862:	b21a      	sxth	r2, r3
    2864:	231e      	movs	r3, #30
    2866:	18fb      	adds	r3, r7, r3
    2868:	2100      	movs	r1, #0
    286a:	5e5b      	ldrsh	r3, [r3, r1]
    286c:	4313      	orrs	r3, r2
    286e:	b21a      	sxth	r2, r3
    2870:	231e      	movs	r3, #30
    2872:	18fb      	adds	r3, r7, r3
    2874:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    2876:	231e      	movs	r3, #30
    2878:	18fb      	adds	r3, r7, r3
    287a:	881a      	ldrh	r2, [r3, #0]
    287c:	68fb      	ldr	r3, [r7, #12]
    287e:	0011      	movs	r1, r2
    2880:	0018      	movs	r0, r3
    2882:	4b54      	ldr	r3, [pc, #336]	; (29d4 <spi_write_buffer_wait+0x318>)
    2884:	4798      	blx	r3
						length--;
    2886:	1dbb      	adds	r3, r7, #6
    2888:	881a      	ldrh	r2, [r3, #0]
    288a:	1dbb      	adds	r3, r7, #6
    288c:	3a01      	subs	r2, #1
    288e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    2890:	68fb      	ldr	r3, [r7, #12]
    2892:	0018      	movs	r0, r3
    2894:	4b50      	ldr	r3, [pc, #320]	; (29d8 <spi_write_buffer_wait+0x31c>)
    2896:	4798      	blx	r3
    2898:	1e03      	subs	r3, r0, #0
    289a:	d107      	bne.n	28ac <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    289c:	69bb      	ldr	r3, [r7, #24]
    289e:	3301      	adds	r3, #1
    28a0:	61bb      	str	r3, [r7, #24]
    28a2:	69bb      	ldr	r3, [r7, #24]
    28a4:	4a4a      	ldr	r2, [pc, #296]	; (29d0 <spi_write_buffer_wait+0x314>)
    28a6:	4293      	cmp	r3, r2
    28a8:	d9b3      	bls.n	2812 <spi_write_buffer_wait+0x156>
    28aa:	e000      	b.n	28ae <spi_write_buffer_wait+0x1f2>
						break;
    28ac:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	0018      	movs	r0, r3
    28b2:	4b44      	ldr	r3, [pc, #272]	; (29c4 <spi_write_buffer_wait+0x308>)
    28b4:	4798      	blx	r3
    28b6:	1e03      	subs	r3, r0, #0
    28b8:	d005      	beq.n	28c6 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	0018      	movs	r0, r3
    28be:	4b42      	ldr	r3, [pc, #264]	; (29c8 <spi_write_buffer_wait+0x30c>)
    28c0:	4798      	blx	r3
					return STATUS_ABORTED;
    28c2:	2304      	movs	r3, #4
    28c4:	e07a      	b.n	29bc <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	0018      	movs	r0, r3
    28ca:	4b43      	ldr	r3, [pc, #268]	; (29d8 <spi_write_buffer_wait+0x31c>)
    28cc:	4798      	blx	r3
    28ce:	0003      	movs	r3, r0
    28d0:	001a      	movs	r2, r3
    28d2:	2301      	movs	r3, #1
    28d4:	4053      	eors	r3, r2
    28d6:	b2db      	uxtb	r3, r3
    28d8:	2b00      	cmp	r3, #0
    28da:	d001      	beq.n	28e0 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    28dc:	2312      	movs	r3, #18
    28de:	e06d      	b.n	29bc <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    28e0:	46c0      	nop			; (mov r8, r8)
    28e2:	68fb      	ldr	r3, [r7, #12]
    28e4:	0018      	movs	r0, r3
    28e6:	4b3c      	ldr	r3, [pc, #240]	; (29d8 <spi_write_buffer_wait+0x31c>)
    28e8:	4798      	blx	r3
    28ea:	0003      	movs	r3, r0
    28ec:	001a      	movs	r2, r3
    28ee:	2301      	movs	r3, #1
    28f0:	4053      	eors	r3, r2
    28f2:	b2db      	uxtb	r3, r3
    28f4:	2b00      	cmp	r3, #0
    28f6:	d1f4      	bne.n	28e2 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    28f8:	2312      	movs	r3, #18
    28fa:	18fa      	adds	r2, r7, r3
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	0011      	movs	r1, r2
    2900:	0018      	movs	r0, r3
    2902:	4b36      	ldr	r3, [pc, #216]	; (29dc <spi_write_buffer_wait+0x320>)
    2904:	4798      	blx	r3
			flush_length--;
    2906:	2324      	movs	r3, #36	; 0x24
    2908:	18fb      	adds	r3, r7, r3
    290a:	881a      	ldrh	r2, [r3, #0]
    290c:	2324      	movs	r3, #36	; 0x24
    290e:	18fb      	adds	r3, r7, r3
    2910:	3a01      	subs	r2, #1
    2912:	801a      	strh	r2, [r3, #0]
	while (length--) {
    2914:	1dbb      	adds	r3, r7, #6
    2916:	881b      	ldrh	r3, [r3, #0]
    2918:	1dba      	adds	r2, r7, #6
    291a:	1e59      	subs	r1, r3, #1
    291c:	8011      	strh	r1, [r2, #0]
    291e:	2b00      	cmp	r3, #0
    2920:	d000      	beq.n	2924 <spi_write_buffer_wait+0x268>
    2922:	e6f8      	b.n	2716 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2924:	68fb      	ldr	r3, [r7, #12]
    2926:	795b      	ldrb	r3, [r3, #5]
    2928:	2b01      	cmp	r3, #1
    292a:	d10b      	bne.n	2944 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    292c:	46c0      	nop			; (mov r8, r8)
    292e:	68fb      	ldr	r3, [r7, #12]
    2930:	0018      	movs	r0, r3
    2932:	4b24      	ldr	r3, [pc, #144]	; (29c4 <spi_write_buffer_wait+0x308>)
    2934:	4798      	blx	r3
    2936:	0003      	movs	r3, r0
    2938:	001a      	movs	r2, r3
    293a:	2301      	movs	r3, #1
    293c:	4053      	eors	r3, r2
    293e:	b2db      	uxtb	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	d1f4      	bne.n	292e <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2944:	68fb      	ldr	r3, [r7, #12]
    2946:	795b      	ldrb	r3, [r3, #5]
    2948:	2b00      	cmp	r3, #0
    294a:	d136      	bne.n	29ba <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    294c:	68fb      	ldr	r3, [r7, #12]
    294e:	79db      	ldrb	r3, [r3, #7]
    2950:	2b00      	cmp	r3, #0
    2952:	d032      	beq.n	29ba <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    2954:	e02c      	b.n	29b0 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2956:	2300      	movs	r3, #0
    2958:	617b      	str	r3, [r7, #20]
    295a:	e008      	b.n	296e <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    295c:	68fb      	ldr	r3, [r7, #12]
    295e:	0018      	movs	r0, r3
    2960:	4b1d      	ldr	r3, [pc, #116]	; (29d8 <spi_write_buffer_wait+0x31c>)
    2962:	4798      	blx	r3
    2964:	1e03      	subs	r3, r0, #0
    2966:	d107      	bne.n	2978 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2968:	697b      	ldr	r3, [r7, #20]
    296a:	3301      	adds	r3, #1
    296c:	617b      	str	r3, [r7, #20]
    296e:	697b      	ldr	r3, [r7, #20]
    2970:	4a17      	ldr	r2, [pc, #92]	; (29d0 <spi_write_buffer_wait+0x314>)
    2972:	4293      	cmp	r3, r2
    2974:	d9f2      	bls.n	295c <spi_write_buffer_wait+0x2a0>
    2976:	e000      	b.n	297a <spi_write_buffer_wait+0x2be>
						break;
    2978:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    297a:	68fb      	ldr	r3, [r7, #12]
    297c:	0018      	movs	r0, r3
    297e:	4b16      	ldr	r3, [pc, #88]	; (29d8 <spi_write_buffer_wait+0x31c>)
    2980:	4798      	blx	r3
    2982:	0003      	movs	r3, r0
    2984:	001a      	movs	r2, r3
    2986:	2301      	movs	r3, #1
    2988:	4053      	eors	r3, r2
    298a:	b2db      	uxtb	r3, r3
    298c:	2b00      	cmp	r3, #0
    298e:	d001      	beq.n	2994 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2990:	2312      	movs	r3, #18
    2992:	e013      	b.n	29bc <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    2994:	2310      	movs	r3, #16
    2996:	18fa      	adds	r2, r7, r3
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	0011      	movs	r1, r2
    299c:	0018      	movs	r0, r3
    299e:	4b0f      	ldr	r3, [pc, #60]	; (29dc <spi_write_buffer_wait+0x320>)
    29a0:	4798      	blx	r3
				flush_length--;
    29a2:	2324      	movs	r3, #36	; 0x24
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	881a      	ldrh	r2, [r3, #0]
    29a8:	2324      	movs	r3, #36	; 0x24
    29aa:	18fb      	adds	r3, r7, r3
    29ac:	3a01      	subs	r2, #1
    29ae:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    29b0:	2324      	movs	r3, #36	; 0x24
    29b2:	18fb      	adds	r3, r7, r3
    29b4:	881b      	ldrh	r3, [r3, #0]
    29b6:	2b00      	cmp	r3, #0
    29b8:	d1cd      	bne.n	2956 <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    29ba:	2300      	movs	r3, #0
}
    29bc:	0018      	movs	r0, r3
    29be:	46bd      	mov	sp, r7
    29c0:	b00a      	add	sp, #40	; 0x28
    29c2:	bd80      	pop	{r7, pc}
    29c4:	00001fa9 	.word	0x00001fa9
    29c8:	000020f1 	.word	0x000020f1
    29cc:	00001fd1 	.word	0x00001fd1
    29d0:	00002710 	.word	0x00002710
    29d4:	00002021 	.word	0x00002021
    29d8:	00001ff9 	.word	0x00001ff9
    29dc:	00002069 	.word	0x00002069

000029e0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    29e0:	b580      	push	{r7, lr}
    29e2:	b084      	sub	sp, #16
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	681b      	ldr	r3, [r3, #0]
    29ec:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	b2da      	uxtb	r2, r3
    29f6:	230e      	movs	r3, #14
    29f8:	18fb      	adds	r3, r7, r3
    29fa:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a00:	1c5a      	adds	r2, r3, #1
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	799b      	ldrb	r3, [r3, #6]
    2a0a:	2b01      	cmp	r3, #1
    2a0c:	d113      	bne.n	2a36 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	b2db      	uxtb	r3, r3
    2a16:	021b      	lsls	r3, r3, #8
    2a18:	b21a      	sxth	r2, r3
    2a1a:	230e      	movs	r3, #14
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	2100      	movs	r1, #0
    2a20:	5e5b      	ldrsh	r3, [r3, r1]
    2a22:	4313      	orrs	r3, r2
    2a24:	b21a      	sxth	r2, r3
    2a26:	230e      	movs	r3, #14
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a30:	1c5a      	adds	r2, r3, #1
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2a36:	230e      	movs	r3, #14
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	881b      	ldrh	r3, [r3, #0]
    2a3c:	05db      	lsls	r3, r3, #23
    2a3e:	0dda      	lsrs	r2, r3, #23
    2a40:	68bb      	ldr	r3, [r7, #8]
    2a42:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2a48:	b29b      	uxth	r3, r3
    2a4a:	3b01      	subs	r3, #1
    2a4c:	b29a      	uxth	r2, r3
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	869a      	strh	r2, [r3, #52]	; 0x34
}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	46bd      	mov	sp, r7
    2a56:	b004      	add	sp, #16
    2a58:	bd80      	pop	{r7, pc}
	...

00002a5c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b084      	sub	sp, #16
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    2a6a:	4b08      	ldr	r3, [pc, #32]	; (2a8c <_spi_write_dummy+0x30>)
    2a6c:	881b      	ldrh	r3, [r3, #0]
    2a6e:	001a      	movs	r2, r3
    2a70:	68fb      	ldr	r3, [r7, #12]
    2a72:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2a78:	b29b      	uxth	r3, r3
    2a7a:	3b01      	subs	r3, #1
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	46bd      	mov	sp, r7
    2a86:	b004      	add	sp, #16
    2a88:	bd80      	pop	{r7, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	20000520 	.word	0x20000520

00002a90 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b084      	sub	sp, #16
    2a94:	af00      	add	r7, sp, #0
    2a96:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	681b      	ldr	r3, [r3, #0]
    2a9c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    2a9e:	230a      	movs	r3, #10
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	2200      	movs	r2, #0
    2aa4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    2aa6:	68fb      	ldr	r3, [r7, #12]
    2aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2aaa:	230a      	movs	r3, #10
    2aac:	18fb      	adds	r3, r7, r3
    2aae:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2ab4:	b29b      	uxth	r3, r3
    2ab6:	3b01      	subs	r3, #1
    2ab8:	b29a      	uxth	r2, r3
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	46bd      	mov	sp, r7
    2ac2:	b004      	add	sp, #16
    2ac4:	bd80      	pop	{r7, pc}

00002ac6 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    2ac6:	b580      	push	{r7, lr}
    2ac8:	b084      	sub	sp, #16
    2aca:	af00      	add	r7, sp, #0
    2acc:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ad8:	b29a      	uxth	r2, r3
    2ada:	230a      	movs	r3, #10
    2adc:	18fb      	adds	r3, r7, r3
    2ade:	05d2      	lsls	r2, r2, #23
    2ae0:	0dd2      	lsrs	r2, r2, #23
    2ae2:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ae8:	220a      	movs	r2, #10
    2aea:	18ba      	adds	r2, r7, r2
    2aec:	8812      	ldrh	r2, [r2, #0]
    2aee:	b2d2      	uxtb	r2, r2
    2af0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2af6:	1c5a      	adds	r2, r3, #1
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	799b      	ldrb	r3, [r3, #6]
    2b00:	2b01      	cmp	r3, #1
    2b02:	d10d      	bne.n	2b20 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b08:	220a      	movs	r2, #10
    2b0a:	18ba      	adds	r2, r7, r2
    2b0c:	8812      	ldrh	r2, [r2, #0]
    2b0e:	0a12      	lsrs	r2, r2, #8
    2b10:	b292      	uxth	r2, r2
    2b12:	b2d2      	uxtb	r2, r2
    2b14:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b1a:	1c5a      	adds	r2, r3, #1
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2b24:	b29b      	uxth	r3, r3
    2b26:	3b01      	subs	r3, #1
    2b28:	b29a      	uxth	r2, r3
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	46bd      	mov	sp, r7
    2b32:	b004      	add	sp, #16
    2b34:	bd80      	pop	{r7, pc}
	...

00002b38 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2b38:	b580      	push	{r7, lr}
    2b3a:	b086      	sub	sp, #24
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	0002      	movs	r2, r0
    2b40:	1dfb      	adds	r3, r7, #7
    2b42:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    2b44:	1dfb      	adds	r3, r7, #7
    2b46:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    2b48:	4bb9      	ldr	r3, [pc, #740]	; (2e30 <_spi_interrupt_handler+0x2f8>)
    2b4a:	0092      	lsls	r2, r2, #2
    2b4c:	58d3      	ldr	r3, [r2, r3]
    2b4e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2b50:	697b      	ldr	r3, [r7, #20]
    2b52:	681b      	ldr	r3, [r3, #0]
    2b54:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2b56:	697b      	ldr	r3, [r7, #20]
    2b58:	2237      	movs	r2, #55	; 0x37
    2b5a:	5c9a      	ldrb	r2, [r3, r2]
    2b5c:	697b      	ldr	r3, [r7, #20]
    2b5e:	2136      	movs	r1, #54	; 0x36
    2b60:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    2b62:	230f      	movs	r3, #15
    2b64:	18fb      	adds	r3, r7, r3
    2b66:	400a      	ands	r2, r1
    2b68:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2b6a:	693b      	ldr	r3, [r7, #16]
    2b6c:	7e1b      	ldrb	r3, [r3, #24]
    2b6e:	b2da      	uxtb	r2, r3
    2b70:	230c      	movs	r3, #12
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    2b76:	693b      	ldr	r3, [r7, #16]
    2b78:	7d9b      	ldrb	r3, [r3, #22]
    2b7a:	b2db      	uxtb	r3, r3
    2b7c:	b29a      	uxth	r2, r3
    2b7e:	230c      	movs	r3, #12
    2b80:	18fb      	adds	r3, r7, r3
    2b82:	210c      	movs	r1, #12
    2b84:	1879      	adds	r1, r7, r1
    2b86:	8809      	ldrh	r1, [r1, #0]
    2b88:	400a      	ands	r2, r1
    2b8a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2b8c:	230c      	movs	r3, #12
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	881b      	ldrh	r3, [r3, #0]
    2b92:	2201      	movs	r2, #1
    2b94:	4013      	ands	r3, r2
    2b96:	d041      	beq.n	2c1c <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	795b      	ldrb	r3, [r3, #5]
    2b9c:	2b01      	cmp	r3, #1
    2b9e:	d110      	bne.n	2bc2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	7a5b      	ldrb	r3, [r3, #9]
    2ba4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d10b      	bne.n	2bc2 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    2baa:	697b      	ldr	r3, [r7, #20]
    2bac:	0018      	movs	r0, r3
    2bae:	4ba1      	ldr	r3, [pc, #644]	; (2e34 <_spi_interrupt_handler+0x2fc>)
    2bb0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    2bb2:	697b      	ldr	r3, [r7, #20]
    2bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2bb6:	b29b      	uxth	r3, r3
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d102      	bne.n	2bc2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2bbc:	693b      	ldr	r3, [r7, #16]
    2bbe:	2201      	movs	r2, #1
    2bc0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    2bc2:	697b      	ldr	r3, [r7, #20]
    2bc4:	795b      	ldrb	r3, [r3, #5]
		if (0
    2bc6:	2b01      	cmp	r3, #1
    2bc8:	d104      	bne.n	2bd4 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    2bca:	697b      	ldr	r3, [r7, #20]
    2bcc:	7a5b      	ldrb	r3, [r3, #9]
    2bce:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d108      	bne.n	2be6 <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2bd4:	697b      	ldr	r3, [r7, #20]
    2bd6:	795b      	ldrb	r3, [r3, #5]
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d11f      	bne.n	2c1c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    2bdc:	697b      	ldr	r3, [r7, #20]
    2bde:	7a5b      	ldrb	r3, [r3, #9]
    2be0:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    2be2:	2b00      	cmp	r3, #0
    2be4:	d01a      	beq.n	2c1c <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    2be6:	697b      	ldr	r3, [r7, #20]
    2be8:	0018      	movs	r0, r3
    2bea:	4b93      	ldr	r3, [pc, #588]	; (2e38 <_spi_interrupt_handler+0x300>)
    2bec:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    2bee:	697b      	ldr	r3, [r7, #20]
    2bf0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2bf2:	b29b      	uxth	r3, r3
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d111      	bne.n	2c1c <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2bf8:	693b      	ldr	r3, [r7, #16]
    2bfa:	2201      	movs	r2, #1
    2bfc:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    2bfe:	697b      	ldr	r3, [r7, #20]
    2c00:	7a5b      	ldrb	r3, [r3, #9]
    2c02:	b2db      	uxtb	r3, r3
    2c04:	2b01      	cmp	r3, #1
    2c06:	d109      	bne.n	2c1c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	79db      	ldrb	r3, [r3, #7]
    2c0c:	2201      	movs	r2, #1
    2c0e:	4053      	eors	r3, r2
    2c10:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    2c12:	2b00      	cmp	r3, #0
    2c14:	d002      	beq.n	2c1c <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2c16:	693b      	ldr	r3, [r7, #16]
    2c18:	2202      	movs	r2, #2
    2c1a:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2c1c:	230c      	movs	r3, #12
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	881b      	ldrh	r3, [r3, #0]
    2c22:	2204      	movs	r2, #4
    2c24:	4013      	ands	r3, r2
    2c26:	d100      	bne.n	2c2a <_spi_interrupt_handler+0xf2>
    2c28:	e07e      	b.n	2d28 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c2a:	693b      	ldr	r3, [r7, #16]
    2c2c:	8b5b      	ldrh	r3, [r3, #26]
    2c2e:	b29b      	uxth	r3, r3
    2c30:	001a      	movs	r2, r3
    2c32:	2304      	movs	r3, #4
    2c34:	4013      	ands	r3, r2
    2c36:	d022      	beq.n	2c7e <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2c38:	697b      	ldr	r3, [r7, #20]
    2c3a:	7a5b      	ldrb	r3, [r3, #9]
    2c3c:	b2db      	uxtb	r3, r3
    2c3e:	2b01      	cmp	r3, #1
    2c40:	d014      	beq.n	2c6c <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	2238      	movs	r2, #56	; 0x38
    2c46:	211e      	movs	r1, #30
    2c48:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2c4a:	697b      	ldr	r3, [r7, #20]
    2c4c:	2203      	movs	r2, #3
    2c4e:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2c50:	693b      	ldr	r3, [r7, #16]
    2c52:	2205      	movs	r2, #5
    2c54:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2c56:	230f      	movs	r3, #15
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	781b      	ldrb	r3, [r3, #0]
    2c5c:	2208      	movs	r2, #8
    2c5e:	4013      	ands	r3, r2
    2c60:	d004      	beq.n	2c6c <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2c62:	697b      	ldr	r3, [r7, #20]
    2c64:	699b      	ldr	r3, [r3, #24]
    2c66:	697a      	ldr	r2, [r7, #20]
    2c68:	0010      	movs	r0, r2
    2c6a:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2c6c:	693b      	ldr	r3, [r7, #16]
    2c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c70:	230a      	movs	r3, #10
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2c76:	693b      	ldr	r3, [r7, #16]
    2c78:	2204      	movs	r2, #4
    2c7a:	835a      	strh	r2, [r3, #26]
    2c7c:	e054      	b.n	2d28 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	7a5b      	ldrb	r3, [r3, #9]
    2c82:	b2db      	uxtb	r3, r3
    2c84:	2b01      	cmp	r3, #1
    2c86:	d11e      	bne.n	2cc6 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    2c88:	697b      	ldr	r3, [r7, #20]
    2c8a:	0018      	movs	r0, r3
    2c8c:	4b6b      	ldr	r3, [pc, #428]	; (2e3c <_spi_interrupt_handler+0x304>)
    2c8e:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    2c90:	697b      	ldr	r3, [r7, #20]
    2c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2c94:	b29b      	uxth	r3, r3
    2c96:	2b00      	cmp	r3, #0
    2c98:	d146      	bne.n	2d28 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2c9a:	693b      	ldr	r3, [r7, #16]
    2c9c:	2204      	movs	r2, #4
    2c9e:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    2ca0:	697b      	ldr	r3, [r7, #20]
    2ca2:	2238      	movs	r2, #56	; 0x38
    2ca4:	2100      	movs	r1, #0
    2ca6:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    2ca8:	697b      	ldr	r3, [r7, #20]
    2caa:	2203      	movs	r2, #3
    2cac:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    2cae:	230f      	movs	r3, #15
    2cb0:	18fb      	adds	r3, r7, r3
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	2201      	movs	r2, #1
    2cb6:	4013      	ands	r3, r2
    2cb8:	d036      	beq.n	2d28 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2cba:	697b      	ldr	r3, [r7, #20]
    2cbc:	68db      	ldr	r3, [r3, #12]
    2cbe:	697a      	ldr	r2, [r7, #20]
    2cc0:	0010      	movs	r0, r2
    2cc2:	4798      	blx	r3
    2cc4:	e030      	b.n	2d28 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    2cc6:	697b      	ldr	r3, [r7, #20]
    2cc8:	0018      	movs	r0, r3
    2cca:	4b5d      	ldr	r3, [pc, #372]	; (2e40 <_spi_interrupt_handler+0x308>)
    2ccc:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    2cce:	697b      	ldr	r3, [r7, #20]
    2cd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2cd2:	b29b      	uxth	r3, r3
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d127      	bne.n	2d28 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    2cd8:	697b      	ldr	r3, [r7, #20]
    2cda:	2238      	movs	r2, #56	; 0x38
    2cdc:	2100      	movs	r1, #0
    2cde:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2ce0:	693b      	ldr	r3, [r7, #16]
    2ce2:	2204      	movs	r2, #4
    2ce4:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2ce6:	697b      	ldr	r3, [r7, #20]
    2ce8:	7a5b      	ldrb	r3, [r3, #9]
    2cea:	b2db      	uxtb	r3, r3
    2cec:	2b02      	cmp	r3, #2
    2cee:	d10b      	bne.n	2d08 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2cf0:	230f      	movs	r3, #15
    2cf2:	18fb      	adds	r3, r7, r3
    2cf4:	781b      	ldrb	r3, [r3, #0]
    2cf6:	2204      	movs	r2, #4
    2cf8:	4013      	ands	r3, r2
    2cfa:	d015      	beq.n	2d28 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2cfc:	697b      	ldr	r3, [r7, #20]
    2cfe:	695b      	ldr	r3, [r3, #20]
    2d00:	697a      	ldr	r2, [r7, #20]
    2d02:	0010      	movs	r0, r2
    2d04:	4798      	blx	r3
    2d06:	e00f      	b.n	2d28 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	7a5b      	ldrb	r3, [r3, #9]
    2d0c:	b2db      	uxtb	r3, r3
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d10a      	bne.n	2d28 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2d12:	230f      	movs	r3, #15
    2d14:	18fb      	adds	r3, r7, r3
    2d16:	781b      	ldrb	r3, [r3, #0]
    2d18:	2202      	movs	r2, #2
    2d1a:	4013      	ands	r3, r2
    2d1c:	d004      	beq.n	2d28 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2d1e:	697b      	ldr	r3, [r7, #20]
    2d20:	691b      	ldr	r3, [r3, #16]
    2d22:	697a      	ldr	r2, [r7, #20]
    2d24:	0010      	movs	r0, r2
    2d26:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2d28:	230c      	movs	r3, #12
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	881b      	ldrh	r3, [r3, #0]
    2d2e:	2202      	movs	r2, #2
    2d30:	4013      	ands	r3, r2
    2d32:	d046      	beq.n	2dc2 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	795b      	ldrb	r3, [r3, #5]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d11d      	bne.n	2d78 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    2d3c:	693b      	ldr	r3, [r7, #16]
    2d3e:	2207      	movs	r2, #7
    2d40:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2d42:	693b      	ldr	r3, [r7, #16]
    2d44:	2202      	movs	r2, #2
    2d46:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    2d48:	697b      	ldr	r3, [r7, #20]
    2d4a:	2203      	movs	r2, #3
    2d4c:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    2d4e:	697b      	ldr	r3, [r7, #20]
    2d50:	2200      	movs	r2, #0
    2d52:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    2d54:	697b      	ldr	r3, [r7, #20]
    2d56:	2200      	movs	r2, #0
    2d58:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    2d5a:	697b      	ldr	r3, [r7, #20]
    2d5c:	2238      	movs	r2, #56	; 0x38
    2d5e:	2100      	movs	r1, #0
    2d60:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    2d62:	230f      	movs	r3, #15
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	781b      	ldrb	r3, [r3, #0]
    2d68:	2210      	movs	r2, #16
    2d6a:	4013      	ands	r3, r2
    2d6c:	d004      	beq.n	2d78 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    2d6e:	697b      	ldr	r3, [r7, #20]
    2d70:	69db      	ldr	r3, [r3, #28]
    2d72:	697a      	ldr	r2, [r7, #20]
    2d74:	0010      	movs	r0, r2
    2d76:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2d78:	697b      	ldr	r3, [r7, #20]
    2d7a:	795b      	ldrb	r3, [r3, #5]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d120      	bne.n	2dc2 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2d80:	697b      	ldr	r3, [r7, #20]
    2d82:	7a5b      	ldrb	r3, [r3, #9]
    2d84:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    2d86:	2b01      	cmp	r3, #1
    2d88:	d11b      	bne.n	2dc2 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2d8a:	697b      	ldr	r3, [r7, #20]
    2d8c:	79db      	ldrb	r3, [r3, #7]
    2d8e:	2201      	movs	r2, #1
    2d90:	4053      	eors	r3, r2
    2d92:	b2db      	uxtb	r3, r3
    2d94:	2b00      	cmp	r3, #0
    2d96:	d014      	beq.n	2dc2 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2d98:	693b      	ldr	r3, [r7, #16]
    2d9a:	2202      	movs	r2, #2
    2d9c:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    2d9e:	697b      	ldr	r3, [r7, #20]
    2da0:	2203      	movs	r2, #3
    2da2:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    2da4:	697b      	ldr	r3, [r7, #20]
    2da6:	2238      	movs	r2, #56	; 0x38
    2da8:	2100      	movs	r1, #0
    2daa:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2dac:	230f      	movs	r3, #15
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	781b      	ldrb	r3, [r3, #0]
    2db2:	2201      	movs	r2, #1
    2db4:	4013      	ands	r3, r2
    2db6:	d004      	beq.n	2dc2 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	68db      	ldr	r3, [r3, #12]
    2dbc:	697a      	ldr	r2, [r7, #20]
    2dbe:	0010      	movs	r0, r2
    2dc0:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    2dc2:	230c      	movs	r3, #12
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	881b      	ldrh	r3, [r3, #0]
    2dc8:	2208      	movs	r2, #8
    2dca:	4013      	ands	r3, r2
    2dcc:	d014      	beq.n	2df8 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    2dce:	697b      	ldr	r3, [r7, #20]
    2dd0:	795b      	ldrb	r3, [r3, #5]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d110      	bne.n	2df8 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2dd6:	693b      	ldr	r3, [r7, #16]
    2dd8:	2208      	movs	r2, #8
    2dda:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    2ddc:	693b      	ldr	r3, [r7, #16]
    2dde:	2208      	movs	r2, #8
    2de0:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    2de2:	230f      	movs	r3, #15
    2de4:	18fb      	adds	r3, r7, r3
    2de6:	781b      	ldrb	r3, [r3, #0]
    2de8:	2220      	movs	r2, #32
    2dea:	4013      	ands	r3, r2
    2dec:	d004      	beq.n	2df8 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    2dee:	697b      	ldr	r3, [r7, #20]
    2df0:	6a1b      	ldr	r3, [r3, #32]
    2df2:	697a      	ldr	r2, [r7, #20]
    2df4:	0010      	movs	r0, r2
    2df6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2df8:	230c      	movs	r3, #12
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	881b      	ldrh	r3, [r3, #0]
    2dfe:	2280      	movs	r2, #128	; 0x80
    2e00:	4013      	ands	r3, r2
    2e02:	d010      	beq.n	2e26 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2e04:	693b      	ldr	r3, [r7, #16]
    2e06:	2280      	movs	r2, #128	; 0x80
    2e08:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2e0a:	693b      	ldr	r3, [r7, #16]
    2e0c:	2280      	movs	r2, #128	; 0x80
    2e0e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2e10:	230f      	movs	r3, #15
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	2240      	movs	r2, #64	; 0x40
    2e18:	4013      	ands	r3, r2
    2e1a:	d004      	beq.n	2e26 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2e1c:	697b      	ldr	r3, [r7, #20]
    2e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2e20:	697a      	ldr	r2, [r7, #20]
    2e22:	0010      	movs	r0, r2
    2e24:	4798      	blx	r3
		}
	}
#  endif
}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	46bd      	mov	sp, r7
    2e2a:	b006      	add	sp, #24
    2e2c:	bd80      	pop	{r7, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	20000508 	.word	0x20000508
    2e34:	00002a5d 	.word	0x00002a5d
    2e38:	000029e1 	.word	0x000029e1
    2e3c:	00002a91 	.word	0x00002a91
    2e40:	00002ac7 	.word	0x00002ac7

00002e44 <system_gclk_chan_get_config_defaults>:
{
    2e44:	b580      	push	{r7, lr}
    2e46:	b082      	sub	sp, #8
    2e48:	af00      	add	r7, sp, #0
    2e4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2e4c:	687b      	ldr	r3, [r7, #4]
    2e4e:	2200      	movs	r2, #0
    2e50:	701a      	strb	r2, [r3, #0]
}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	46bd      	mov	sp, r7
    2e56:	b002      	add	sp, #8
    2e58:	bd80      	pop	{r7, pc}
	...

00002e5c <system_apb_clock_set_mask>:
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b082      	sub	sp, #8
    2e60:	af00      	add	r7, sp, #0
    2e62:	0002      	movs	r2, r0
    2e64:	6039      	str	r1, [r7, #0]
    2e66:	1dfb      	adds	r3, r7, #7
    2e68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2e6a:	1dfb      	adds	r3, r7, #7
    2e6c:	781b      	ldrb	r3, [r3, #0]
    2e6e:	2b01      	cmp	r3, #1
    2e70:	d00a      	beq.n	2e88 <system_apb_clock_set_mask+0x2c>
    2e72:	2b02      	cmp	r3, #2
    2e74:	d00f      	beq.n	2e96 <system_apb_clock_set_mask+0x3a>
    2e76:	2b00      	cmp	r3, #0
    2e78:	d114      	bne.n	2ea4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2e7a:	4b0e      	ldr	r3, [pc, #56]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e7c:	4a0d      	ldr	r2, [pc, #52]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e7e:	6991      	ldr	r1, [r2, #24]
    2e80:	683a      	ldr	r2, [r7, #0]
    2e82:	430a      	orrs	r2, r1
    2e84:	619a      	str	r2, [r3, #24]
			break;
    2e86:	e00f      	b.n	2ea8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2e88:	4b0a      	ldr	r3, [pc, #40]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e8a:	4a0a      	ldr	r2, [pc, #40]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e8c:	69d1      	ldr	r1, [r2, #28]
    2e8e:	683a      	ldr	r2, [r7, #0]
    2e90:	430a      	orrs	r2, r1
    2e92:	61da      	str	r2, [r3, #28]
			break;
    2e94:	e008      	b.n	2ea8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2e96:	4b07      	ldr	r3, [pc, #28]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e98:	4a06      	ldr	r2, [pc, #24]	; (2eb4 <system_apb_clock_set_mask+0x58>)
    2e9a:	6a11      	ldr	r1, [r2, #32]
    2e9c:	683a      	ldr	r2, [r7, #0]
    2e9e:	430a      	orrs	r2, r1
    2ea0:	621a      	str	r2, [r3, #32]
			break;
    2ea2:	e001      	b.n	2ea8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ea4:	2317      	movs	r3, #23
    2ea6:	e000      	b.n	2eaa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ea8:	2300      	movs	r3, #0
}
    2eaa:	0018      	movs	r0, r3
    2eac:	46bd      	mov	sp, r7
    2eae:	b002      	add	sp, #8
    2eb0:	bd80      	pop	{r7, pc}
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	40000400 	.word	0x40000400

00002eb8 <system_pinmux_get_config_defaults>:
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	2280      	movs	r2, #128	; 0x80
    2ec4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	2200      	movs	r2, #0
    2eca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2ecc:	687b      	ldr	r3, [r7, #4]
    2ece:	2201      	movs	r2, #1
    2ed0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	2200      	movs	r2, #0
    2ed6:	70da      	strb	r2, [r3, #3]
}
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46bd      	mov	sp, r7
    2edc:	b002      	add	sp, #8
    2ede:	bd80      	pop	{r7, pc}

00002ee0 <system_is_debugger_present>:
{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2ee4:	4b05      	ldr	r3, [pc, #20]	; (2efc <system_is_debugger_present+0x1c>)
    2ee6:	789b      	ldrb	r3, [r3, #2]
    2ee8:	b2db      	uxtb	r3, r3
    2eea:	001a      	movs	r2, r3
    2eec:	2302      	movs	r3, #2
    2eee:	4013      	ands	r3, r2
    2ef0:	1e5a      	subs	r2, r3, #1
    2ef2:	4193      	sbcs	r3, r2
    2ef4:	b2db      	uxtb	r3, r3
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	bd80      	pop	{r7, pc}
    2efc:	41002000 	.word	0x41002000

00002f00 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b084      	sub	sp, #16
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	681b      	ldr	r3, [r3, #0]
    2f0c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	69db      	ldr	r3, [r3, #28]
    2f12:	1e5a      	subs	r2, r3, #1
    2f14:	4193      	sbcs	r3, r2
    2f16:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2f18:	0018      	movs	r0, r3
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b004      	add	sp, #16
    2f1e:	bd80      	pop	{r7, pc}

00002f20 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b082      	sub	sp, #8
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2f28:	46c0      	nop			; (mov r8, r8)
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	0018      	movs	r0, r3
    2f2e:	4b04      	ldr	r3, [pc, #16]	; (2f40 <_usart_wait_for_sync+0x20>)
    2f30:	4798      	blx	r3
    2f32:	1e03      	subs	r3, r0, #0
    2f34:	d1f9      	bne.n	2f2a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	46bd      	mov	sp, r7
    2f3a:	b002      	add	sp, #8
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00002f01 	.word	0x00002f01

00002f44 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2f44:	b5b0      	push	{r4, r5, r7, lr}
    2f46:	b08c      	sub	sp, #48	; 0x30
    2f48:	af02      	add	r7, sp, #8
    2f4a:	6078      	str	r0, [r7, #4]
    2f4c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	681b      	ldr	r3, [r3, #0]
    2f52:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	0018      	movs	r0, r3
    2f5a:	4bab      	ldr	r3, [pc, #684]	; (3208 <_usart_set_config+0x2c4>)
    2f5c:	4798      	blx	r3
    2f5e:	0003      	movs	r3, r0
    2f60:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2f62:	697b      	ldr	r3, [r7, #20]
    2f64:	3314      	adds	r3, #20
    2f66:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    2f68:	2300      	movs	r3, #0
    2f6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    2f6c:	2300      	movs	r3, #0
    2f6e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2f70:	230a      	movs	r3, #10
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	2200      	movs	r2, #0
    2f76:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2f78:	231f      	movs	r3, #31
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	2200      	movs	r2, #0
    2f7e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2f80:	231e      	movs	r3, #30
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	2210      	movs	r2, #16
    2f86:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    2f88:	683b      	ldr	r3, [r7, #0]
    2f8a:	8a1b      	ldrh	r3, [r3, #16]
    2f8c:	2280      	movs	r2, #128	; 0x80
    2f8e:	01d2      	lsls	r2, r2, #7
    2f90:	4293      	cmp	r3, r2
    2f92:	d01c      	beq.n	2fce <_usart_set_config+0x8a>
    2f94:	2280      	movs	r2, #128	; 0x80
    2f96:	01d2      	lsls	r2, r2, #7
    2f98:	4293      	cmp	r3, r2
    2f9a:	dc06      	bgt.n	2faa <_usart_set_config+0x66>
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d00d      	beq.n	2fbc <_usart_set_config+0x78>
    2fa0:	2280      	movs	r2, #128	; 0x80
    2fa2:	0192      	lsls	r2, r2, #6
    2fa4:	4293      	cmp	r3, r2
    2fa6:	d024      	beq.n	2ff2 <_usart_set_config+0xae>
    2fa8:	e035      	b.n	3016 <_usart_set_config+0xd2>
    2faa:	22c0      	movs	r2, #192	; 0xc0
    2fac:	01d2      	lsls	r2, r2, #7
    2fae:	4293      	cmp	r3, r2
    2fb0:	d028      	beq.n	3004 <_usart_set_config+0xc0>
    2fb2:	2280      	movs	r2, #128	; 0x80
    2fb4:	0212      	lsls	r2, r2, #8
    2fb6:	4293      	cmp	r3, r2
    2fb8:	d012      	beq.n	2fe0 <_usart_set_config+0x9c>
    2fba:	e02c      	b.n	3016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2fbc:	231f      	movs	r3, #31
    2fbe:	18fb      	adds	r3, r7, r3
    2fc0:	2200      	movs	r2, #0
    2fc2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2fc4:	231e      	movs	r3, #30
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	2210      	movs	r2, #16
    2fca:	701a      	strb	r2, [r3, #0]
			break;
    2fcc:	e023      	b.n	3016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2fce:	231f      	movs	r3, #31
    2fd0:	18fb      	adds	r3, r7, r3
    2fd2:	2200      	movs	r2, #0
    2fd4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2fd6:	231e      	movs	r3, #30
    2fd8:	18fb      	adds	r3, r7, r3
    2fda:	2208      	movs	r2, #8
    2fdc:	701a      	strb	r2, [r3, #0]
			break;
    2fde:	e01a      	b.n	3016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2fe0:	231f      	movs	r3, #31
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2200      	movs	r2, #0
    2fe6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2fe8:	231e      	movs	r3, #30
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	2203      	movs	r2, #3
    2fee:	701a      	strb	r2, [r3, #0]
			break;
    2ff0:	e011      	b.n	3016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2ff2:	231f      	movs	r3, #31
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	2201      	movs	r2, #1
    2ff8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2ffa:	231e      	movs	r3, #30
    2ffc:	18fb      	adds	r3, r7, r3
    2ffe:	2210      	movs	r2, #16
    3000:	701a      	strb	r2, [r3, #0]
			break;
    3002:	e008      	b.n	3016 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3004:	231f      	movs	r3, #31
    3006:	18fb      	adds	r3, r7, r3
    3008:	2201      	movs	r2, #1
    300a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    300c:	231e      	movs	r3, #30
    300e:	18fb      	adds	r3, r7, r3
    3010:	2208      	movs	r2, #8
    3012:	701a      	strb	r2, [r3, #0]
			break;
    3014:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    301e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3020:	683b      	ldr	r3, [r7, #0]
    3022:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    3024:	4313      	orrs	r3, r2
		config->sample_rate |
    3026:	683a      	ldr	r2, [r7, #0]
    3028:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    302a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    302c:	683a      	ldr	r2, [r7, #0]
    302e:	7e12      	ldrb	r2, [r2, #24]
    3030:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    3032:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3034:	683a      	ldr	r2, [r7, #0]
    3036:	2126      	movs	r1, #38	; 0x26
    3038:	5c52      	ldrb	r2, [r2, r1]
    303a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    303c:	4313      	orrs	r3, r2
    303e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    3040:	231d      	movs	r3, #29
    3042:	18fb      	adds	r3, r7, r3
    3044:	2200      	movs	r2, #0
    3046:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    3048:	683b      	ldr	r3, [r7, #0]
    304a:	685b      	ldr	r3, [r3, #4]
    304c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    304e:	68fb      	ldr	r3, [r7, #12]
    3050:	2b00      	cmp	r3, #0
    3052:	d01e      	beq.n	3092 <_usart_set_config+0x14e>
    3054:	2280      	movs	r2, #128	; 0x80
    3056:	0552      	lsls	r2, r2, #21
    3058:	4293      	cmp	r3, r2
    305a:	d14f      	bne.n	30fc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    305c:	683b      	ldr	r3, [r7, #0]
    305e:	2227      	movs	r2, #39	; 0x27
    3060:	5c9b      	ldrb	r3, [r3, r2]
    3062:	2201      	movs	r2, #1
    3064:	4053      	eors	r3, r2
    3066:	b2db      	uxtb	r3, r3
    3068:	2b00      	cmp	r3, #0
    306a:	d046      	beq.n	30fa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    306c:	683b      	ldr	r3, [r7, #0]
    306e:	6a1d      	ldr	r5, [r3, #32]
    3070:	693b      	ldr	r3, [r7, #16]
    3072:	b2db      	uxtb	r3, r3
    3074:	0018      	movs	r0, r3
    3076:	4b65      	ldr	r3, [pc, #404]	; (320c <_usart_set_config+0x2c8>)
    3078:	4798      	blx	r3
    307a:	0001      	movs	r1, r0
    307c:	231d      	movs	r3, #29
    307e:	18fc      	adds	r4, r7, r3
    3080:	230a      	movs	r3, #10
    3082:	18fb      	adds	r3, r7, r3
    3084:	001a      	movs	r2, r3
    3086:	0028      	movs	r0, r5
    3088:	4b61      	ldr	r3, [pc, #388]	; (3210 <_usart_set_config+0x2cc>)
    308a:	4798      	blx	r3
    308c:	0003      	movs	r3, r0
    308e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    3090:	e033      	b.n	30fa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3092:	683b      	ldr	r3, [r7, #0]
    3094:	2227      	movs	r2, #39	; 0x27
    3096:	5c9b      	ldrb	r3, [r3, r2]
    3098:	2b00      	cmp	r3, #0
    309a:	d014      	beq.n	30c6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    309c:	683b      	ldr	r3, [r7, #0]
    309e:	6a18      	ldr	r0, [r3, #32]
    30a0:	683b      	ldr	r3, [r7, #0]
    30a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    30a4:	231d      	movs	r3, #29
    30a6:	18fc      	adds	r4, r7, r3
    30a8:	231f      	movs	r3, #31
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	781d      	ldrb	r5, [r3, #0]
    30ae:	230a      	movs	r3, #10
    30b0:	18fa      	adds	r2, r7, r3
    30b2:	231e      	movs	r3, #30
    30b4:	18fb      	adds	r3, r7, r3
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	9300      	str	r3, [sp, #0]
    30ba:	002b      	movs	r3, r5
    30bc:	4d55      	ldr	r5, [pc, #340]	; (3214 <_usart_set_config+0x2d0>)
    30be:	47a8      	blx	r5
    30c0:	0003      	movs	r3, r0
    30c2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    30c4:	e01a      	b.n	30fc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    30c6:	683b      	ldr	r3, [r7, #0]
    30c8:	6a1d      	ldr	r5, [r3, #32]
    30ca:	693b      	ldr	r3, [r7, #16]
    30cc:	b2db      	uxtb	r3, r3
    30ce:	0018      	movs	r0, r3
    30d0:	4b4e      	ldr	r3, [pc, #312]	; (320c <_usart_set_config+0x2c8>)
    30d2:	4798      	blx	r3
				status_code =
    30d4:	231d      	movs	r3, #29
    30d6:	18fc      	adds	r4, r7, r3
    30d8:	231f      	movs	r3, #31
    30da:	18fb      	adds	r3, r7, r3
    30dc:	7819      	ldrb	r1, [r3, #0]
    30de:	230a      	movs	r3, #10
    30e0:	18fa      	adds	r2, r7, r3
    30e2:	231e      	movs	r3, #30
    30e4:	18fb      	adds	r3, r7, r3
    30e6:	781b      	ldrb	r3, [r3, #0]
    30e8:	9300      	str	r3, [sp, #0]
    30ea:	000b      	movs	r3, r1
    30ec:	0001      	movs	r1, r0
    30ee:	0028      	movs	r0, r5
    30f0:	4d48      	ldr	r5, [pc, #288]	; (3214 <_usart_set_config+0x2d0>)
    30f2:	47a8      	blx	r5
    30f4:	0003      	movs	r3, r0
    30f6:	7023      	strb	r3, [r4, #0]
			break;
    30f8:	e000      	b.n	30fc <_usart_set_config+0x1b8>
			break;
    30fa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    30fc:	231d      	movs	r3, #29
    30fe:	18fb      	adds	r3, r7, r3
    3100:	781b      	ldrb	r3, [r3, #0]
    3102:	2b00      	cmp	r3, #0
    3104:	d003      	beq.n	310e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    3106:	231d      	movs	r3, #29
    3108:	18fb      	adds	r3, r7, r3
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	e077      	b.n	31fe <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    310e:	683b      	ldr	r3, [r7, #0]
    3110:	7e5b      	ldrb	r3, [r3, #25]
    3112:	2b00      	cmp	r3, #0
    3114:	d003      	beq.n	311e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3116:	683b      	ldr	r3, [r7, #0]
    3118:	7e9a      	ldrb	r2, [r3, #26]
    311a:	69bb      	ldr	r3, [r7, #24]
    311c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	0018      	movs	r0, r3
    3122:	4b3d      	ldr	r3, [pc, #244]	; (3218 <_usart_set_config+0x2d4>)
    3124:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3126:	230a      	movs	r3, #10
    3128:	18fb      	adds	r3, r7, r3
    312a:	881a      	ldrh	r2, [r3, #0]
    312c:	69bb      	ldr	r3, [r7, #24]
    312e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3132:	68fb      	ldr	r3, [r7, #12]
    3134:	4313      	orrs	r3, r2
    3136:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    3138:	683b      	ldr	r3, [r7, #0]
    313a:	2227      	movs	r2, #39	; 0x27
    313c:	5c9b      	ldrb	r3, [r3, r2]
    313e:	2201      	movs	r2, #1
    3140:	4053      	eors	r3, r2
    3142:	b2db      	uxtb	r3, r3
    3144:	2b00      	cmp	r3, #0
    3146:	d003      	beq.n	3150 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    314a:	2204      	movs	r2, #4
    314c:	4313      	orrs	r3, r2
    314e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3150:	683b      	ldr	r3, [r7, #0]
    3152:	7e5b      	ldrb	r3, [r3, #25]
    3154:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3156:	683b      	ldr	r3, [r7, #0]
    3158:	7f1b      	ldrb	r3, [r3, #28]
    315a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    315c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    315e:	683b      	ldr	r3, [r7, #0]
    3160:	7f5b      	ldrb	r3, [r3, #29]
    3162:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3164:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3166:	683b      	ldr	r3, [r7, #0]
    3168:	2124      	movs	r1, #36	; 0x24
    316a:	5c5b      	ldrb	r3, [r3, r1]
    316c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    316e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3170:	683b      	ldr	r3, [r7, #0]
    3172:	2125      	movs	r1, #37	; 0x25
    3174:	5c5b      	ldrb	r3, [r3, r1]
    3176:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3178:	4313      	orrs	r3, r2
	ctrlb =  
    317a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    317c:	683b      	ldr	r3, [r7, #0]
    317e:	7a9b      	ldrb	r3, [r3, #10]
    3180:	001a      	movs	r2, r3
    3182:	6a3b      	ldr	r3, [r7, #32]
    3184:	4313      	orrs	r3, r2
    3186:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    3188:	683b      	ldr	r3, [r7, #0]
    318a:	7adb      	ldrb	r3, [r3, #11]
    318c:	001a      	movs	r2, r3
    318e:	6a3b      	ldr	r3, [r7, #32]
    3190:	4313      	orrs	r3, r2
    3192:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3194:	683b      	ldr	r3, [r7, #0]
    3196:	891b      	ldrh	r3, [r3, #8]
    3198:	2bff      	cmp	r3, #255	; 0xff
    319a:	d00b      	beq.n	31b4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    319e:	2280      	movs	r2, #128	; 0x80
    31a0:	0452      	lsls	r2, r2, #17
    31a2:	4313      	orrs	r3, r2
    31a4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    31a6:	683b      	ldr	r3, [r7, #0]
    31a8:	891b      	ldrh	r3, [r3, #8]
    31aa:	001a      	movs	r2, r3
    31ac:	6a3b      	ldr	r3, [r7, #32]
    31ae:	4313      	orrs	r3, r2
    31b0:	623b      	str	r3, [r7, #32]
    31b2:	e008      	b.n	31c6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    31b4:	683b      	ldr	r3, [r7, #0]
    31b6:	7edb      	ldrb	r3, [r3, #27]
    31b8:	2b00      	cmp	r3, #0
    31ba:	d004      	beq.n	31c6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    31bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31be:	2280      	movs	r2, #128	; 0x80
    31c0:	04d2      	lsls	r2, r2, #19
    31c2:	4313      	orrs	r3, r2
    31c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    31c6:	683b      	ldr	r3, [r7, #0]
    31c8:	222c      	movs	r2, #44	; 0x2c
    31ca:	5c9b      	ldrb	r3, [r3, r2]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d103      	bne.n	31d8 <_usart_set_config+0x294>
    31d0:	4b12      	ldr	r3, [pc, #72]	; (321c <_usart_set_config+0x2d8>)
    31d2:	4798      	blx	r3
    31d4:	1e03      	subs	r3, r0, #0
    31d6:	d003      	beq.n	31e0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    31d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31da:	2280      	movs	r2, #128	; 0x80
    31dc:	4313      	orrs	r3, r2
    31de:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	0018      	movs	r0, r3
    31e4:	4b0c      	ldr	r3, [pc, #48]	; (3218 <_usart_set_config+0x2d4>)
    31e6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    31e8:	69bb      	ldr	r3, [r7, #24]
    31ea:	6a3a      	ldr	r2, [r7, #32]
    31ec:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	0018      	movs	r0, r3
    31f2:	4b09      	ldr	r3, [pc, #36]	; (3218 <_usart_set_config+0x2d4>)
    31f4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    31f6:	69bb      	ldr	r3, [r7, #24]
    31f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    31fa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    31fc:	2300      	movs	r3, #0
}
    31fe:	0018      	movs	r0, r3
    3200:	46bd      	mov	sp, r7
    3202:	b00a      	add	sp, #40	; 0x28
    3204:	bdb0      	pop	{r4, r5, r7, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	00001d49 	.word	0x00001d49
    320c:	000041fd 	.word	0x000041fd
    3210:	000018c3 	.word	0x000018c3
    3214:	00001941 	.word	0x00001941
    3218:	00002f21 	.word	0x00002f21
    321c:	00002ee1 	.word	0x00002ee1

00003220 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3220:	b590      	push	{r4, r7, lr}
    3222:	b093      	sub	sp, #76	; 0x4c
    3224:	af00      	add	r7, sp, #0
    3226:	60f8      	str	r0, [r7, #12]
    3228:	60b9      	str	r1, [r7, #8]
    322a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    322c:	233b      	movs	r3, #59	; 0x3b
    322e:	18fb      	adds	r3, r7, r3
    3230:	2200      	movs	r2, #0
    3232:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3234:	68fb      	ldr	r3, [r7, #12]
    3236:	68ba      	ldr	r2, [r7, #8]
    3238:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3240:	68fb      	ldr	r3, [r7, #12]
    3242:	681b      	ldr	r3, [r3, #0]
    3244:	0018      	movs	r0, r3
    3246:	4b86      	ldr	r3, [pc, #536]	; (3460 <usart_init+0x240>)
    3248:	4798      	blx	r3
    324a:	0003      	movs	r3, r0
    324c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3250:	3302      	adds	r3, #2
    3252:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3256:	3314      	adds	r3, #20
    3258:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	2201      	movs	r2, #1
    3260:	4013      	ands	r3, r2
    3262:	d001      	beq.n	3268 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3264:	2305      	movs	r3, #5
    3266:	e0f6      	b.n	3456 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    326a:	681b      	ldr	r3, [r3, #0]
    326c:	2202      	movs	r2, #2
    326e:	4013      	ands	r3, r2
    3270:	d001      	beq.n	3276 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3272:	231c      	movs	r3, #28
    3274:	e0ef      	b.n	3456 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3276:	2201      	movs	r2, #1
    3278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    327a:	409a      	lsls	r2, r3
    327c:	0013      	movs	r3, r2
    327e:	0019      	movs	r1, r3
    3280:	2002      	movs	r0, #2
    3282:	4b78      	ldr	r3, [pc, #480]	; (3464 <usart_init+0x244>)
    3284:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3286:	2324      	movs	r3, #36	; 0x24
    3288:	18fb      	adds	r3, r7, r3
    328a:	0018      	movs	r0, r3
    328c:	4b76      	ldr	r3, [pc, #472]	; (3468 <usart_init+0x248>)
    328e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	222d      	movs	r2, #45	; 0x2d
    3294:	5c9a      	ldrb	r2, [r3, r2]
    3296:	2324      	movs	r3, #36	; 0x24
    3298:	18fb      	adds	r3, r7, r3
    329a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    329e:	b2db      	uxtb	r3, r3
    32a0:	2224      	movs	r2, #36	; 0x24
    32a2:	18ba      	adds	r2, r7, r2
    32a4:	0011      	movs	r1, r2
    32a6:	0018      	movs	r0, r3
    32a8:	4b70      	ldr	r3, [pc, #448]	; (346c <usart_init+0x24c>)
    32aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    32ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32ae:	b2db      	uxtb	r3, r3
    32b0:	0018      	movs	r0, r3
    32b2:	4b6f      	ldr	r3, [pc, #444]	; (3470 <usart_init+0x250>)
    32b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	222d      	movs	r2, #45	; 0x2d
    32ba:	5c9b      	ldrb	r3, [r3, r2]
    32bc:	2100      	movs	r1, #0
    32be:	0018      	movs	r0, r3
    32c0:	4b6c      	ldr	r3, [pc, #432]	; (3474 <usart_init+0x254>)
    32c2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	7ada      	ldrb	r2, [r3, #11]
    32c8:	68fb      	ldr	r3, [r7, #12]
    32ca:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	2224      	movs	r2, #36	; 0x24
    32d0:	5c9a      	ldrb	r2, [r3, r2]
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	2225      	movs	r2, #37	; 0x25
    32da:	5c9a      	ldrb	r2, [r3, r2]
    32dc:	68fb      	ldr	r3, [r7, #12]
    32de:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	7eda      	ldrb	r2, [r3, #27]
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	7f1a      	ldrb	r2, [r3, #28]
    32ec:	68fb      	ldr	r3, [r7, #12]
    32ee:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    32f0:	233b      	movs	r3, #59	; 0x3b
    32f2:	18fc      	adds	r4, r7, r3
    32f4:	687a      	ldr	r2, [r7, #4]
    32f6:	68fb      	ldr	r3, [r7, #12]
    32f8:	0011      	movs	r1, r2
    32fa:	0018      	movs	r0, r3
    32fc:	4b5e      	ldr	r3, [pc, #376]	; (3478 <usart_init+0x258>)
    32fe:	4798      	blx	r3
    3300:	0003      	movs	r3, r0
    3302:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    3304:	233b      	movs	r3, #59	; 0x3b
    3306:	18fb      	adds	r3, r7, r3
    3308:	781b      	ldrb	r3, [r3, #0]
    330a:	2b00      	cmp	r3, #0
    330c:	d003      	beq.n	3316 <usart_init+0xf6>
		return status_code;
    330e:	233b      	movs	r3, #59	; 0x3b
    3310:	18fb      	adds	r3, r7, r3
    3312:	781b      	ldrb	r3, [r3, #0]
    3314:	e09f      	b.n	3456 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3316:	2320      	movs	r3, #32
    3318:	18fb      	adds	r3, r7, r3
    331a:	0018      	movs	r0, r3
    331c:	4b57      	ldr	r3, [pc, #348]	; (347c <usart_init+0x25c>)
    331e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3320:	2320      	movs	r3, #32
    3322:	18fb      	adds	r3, r7, r3
    3324:	2200      	movs	r2, #0
    3326:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3328:	2320      	movs	r3, #32
    332a:	18fb      	adds	r3, r7, r3
    332c:	2200      	movs	r2, #0
    332e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3334:	2310      	movs	r3, #16
    3336:	18fb      	adds	r3, r7, r3
    3338:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    333e:	2310      	movs	r3, #16
    3340:	18fb      	adds	r3, r7, r3
    3342:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    3348:	2310      	movs	r3, #16
    334a:	18fb      	adds	r3, r7, r3
    334c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    3352:	2310      	movs	r3, #16
    3354:	18fb      	adds	r3, r7, r3
    3356:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3358:	2347      	movs	r3, #71	; 0x47
    335a:	18fb      	adds	r3, r7, r3
    335c:	2200      	movs	r2, #0
    335e:	701a      	strb	r2, [r3, #0]
    3360:	e02c      	b.n	33bc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3362:	2347      	movs	r3, #71	; 0x47
    3364:	18fb      	adds	r3, r7, r3
    3366:	781a      	ldrb	r2, [r3, #0]
    3368:	2310      	movs	r3, #16
    336a:	18fb      	adds	r3, r7, r3
    336c:	0092      	lsls	r2, r2, #2
    336e:	58d3      	ldr	r3, [r2, r3]
    3370:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3374:	2b00      	cmp	r3, #0
    3376:	d109      	bne.n	338c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3378:	2347      	movs	r3, #71	; 0x47
    337a:	18fb      	adds	r3, r7, r3
    337c:	781a      	ldrb	r2, [r3, #0]
    337e:	68bb      	ldr	r3, [r7, #8]
    3380:	0011      	movs	r1, r2
    3382:	0018      	movs	r0, r3
    3384:	4b3e      	ldr	r3, [pc, #248]	; (3480 <usart_init+0x260>)
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    338e:	3301      	adds	r3, #1
    3390:	d00d      	beq.n	33ae <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3394:	b2da      	uxtb	r2, r3
    3396:	2320      	movs	r3, #32
    3398:	18fb      	adds	r3, r7, r3
    339a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    339e:	0c1b      	lsrs	r3, r3, #16
    33a0:	b2db      	uxtb	r3, r3
    33a2:	2220      	movs	r2, #32
    33a4:	18ba      	adds	r2, r7, r2
    33a6:	0011      	movs	r1, r2
    33a8:	0018      	movs	r0, r3
    33aa:	4b36      	ldr	r3, [pc, #216]	; (3484 <usart_init+0x264>)
    33ac:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    33ae:	2347      	movs	r3, #71	; 0x47
    33b0:	18fb      	adds	r3, r7, r3
    33b2:	781a      	ldrb	r2, [r3, #0]
    33b4:	2347      	movs	r3, #71	; 0x47
    33b6:	18fb      	adds	r3, r7, r3
    33b8:	3201      	adds	r2, #1
    33ba:	701a      	strb	r2, [r3, #0]
    33bc:	2347      	movs	r3, #71	; 0x47
    33be:	18fb      	adds	r3, r7, r3
    33c0:	781b      	ldrb	r3, [r3, #0]
    33c2:	2b03      	cmp	r3, #3
    33c4:	d9cd      	bls.n	3362 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    33c6:	2300      	movs	r3, #0
    33c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    33ca:	e00a      	b.n	33e2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    33cc:	68fa      	ldr	r2, [r7, #12]
    33ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33d0:	3302      	adds	r3, #2
    33d2:	009b      	lsls	r3, r3, #2
    33d4:	18d3      	adds	r3, r2, r3
    33d6:	3304      	adds	r3, #4
    33d8:	2200      	movs	r2, #0
    33da:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    33dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33de:	3301      	adds	r3, #1
    33e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    33e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33e4:	2b05      	cmp	r3, #5
    33e6:	d9f1      	bls.n	33cc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    33e8:	68fb      	ldr	r3, [r7, #12]
    33ea:	2200      	movs	r2, #0
    33ec:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    33ee:	68fb      	ldr	r3, [r7, #12]
    33f0:	2200      	movs	r2, #0
    33f2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    33f4:	68fb      	ldr	r3, [r7, #12]
    33f6:	2200      	movs	r2, #0
    33f8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	2200      	movs	r2, #0
    33fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3400:	68fb      	ldr	r3, [r7, #12]
    3402:	2230      	movs	r2, #48	; 0x30
    3404:	2100      	movs	r1, #0
    3406:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	2231      	movs	r2, #49	; 0x31
    340c:	2100      	movs	r1, #0
    340e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    3410:	68fb      	ldr	r3, [r7, #12]
    3412:	2232      	movs	r2, #50	; 0x32
    3414:	2100      	movs	r1, #0
    3416:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    3418:	68fb      	ldr	r3, [r7, #12]
    341a:	2233      	movs	r2, #51	; 0x33
    341c:	2100      	movs	r1, #0
    341e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3420:	68fb      	ldr	r3, [r7, #12]
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	2227      	movs	r2, #39	; 0x27
    3426:	18bc      	adds	r4, r7, r2
    3428:	0018      	movs	r0, r3
    342a:	4b0d      	ldr	r3, [pc, #52]	; (3460 <usart_init+0x240>)
    342c:	4798      	blx	r3
    342e:	0003      	movs	r3, r0
    3430:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    3432:	4a15      	ldr	r2, [pc, #84]	; (3488 <usart_init+0x268>)
    3434:	2327      	movs	r3, #39	; 0x27
    3436:	18fb      	adds	r3, r7, r3
    3438:	781b      	ldrb	r3, [r3, #0]
    343a:	0011      	movs	r1, r2
    343c:	0018      	movs	r0, r3
    343e:	4b13      	ldr	r3, [pc, #76]	; (348c <usart_init+0x26c>)
    3440:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3442:	2327      	movs	r3, #39	; 0x27
    3444:	18fb      	adds	r3, r7, r3
    3446:	781a      	ldrb	r2, [r3, #0]
    3448:	4b11      	ldr	r3, [pc, #68]	; (3490 <usart_init+0x270>)
    344a:	0092      	lsls	r2, r2, #2
    344c:	68f9      	ldr	r1, [r7, #12]
    344e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    3450:	233b      	movs	r3, #59	; 0x3b
    3452:	18fb      	adds	r3, r7, r3
    3454:	781b      	ldrb	r3, [r3, #0]
}
    3456:	0018      	movs	r0, r3
    3458:	46bd      	mov	sp, r7
    345a:	b013      	add	sp, #76	; 0x4c
    345c:	bd90      	pop	{r4, r7, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00001d49 	.word	0x00001d49
    3464:	00002e5d 	.word	0x00002e5d
    3468:	00002e45 	.word	0x00002e45
    346c:	000040d9 	.word	0x000040d9
    3470:	0000411d 	.word	0x0000411d
    3474:	00001b01 	.word	0x00001b01
    3478:	00002f45 	.word	0x00002f45
    347c:	00002eb9 	.word	0x00002eb9
    3480:	00001b8d 	.word	0x00001b8d
    3484:	000043c5 	.word	0x000043c5
    3488:	00003629 	.word	0x00003629
    348c:	00001dad 	.word	0x00001dad
    3490:	20000508 	.word	0x20000508

00003494 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    3494:	b580      	push	{r7, lr}
    3496:	b084      	sub	sp, #16
    3498:	af00      	add	r7, sp, #0
    349a:	6078      	str	r0, [r7, #4]
    349c:	000a      	movs	r2, r1
    349e:	1cbb      	adds	r3, r7, #2
    34a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	681b      	ldr	r3, [r3, #0]
    34a6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	79db      	ldrb	r3, [r3, #7]
    34ac:	2201      	movs	r2, #1
    34ae:	4053      	eors	r3, r2
    34b0:	b2db      	uxtb	r3, r3
    34b2:	2b00      	cmp	r3, #0
    34b4:	d001      	beq.n	34ba <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    34b6:	231c      	movs	r3, #28
    34b8:	e017      	b.n	34ea <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    34be:	b29b      	uxth	r3, r3
    34c0:	2b00      	cmp	r3, #0
    34c2:	d001      	beq.n	34c8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    34c4:	2305      	movs	r3, #5
    34c6:	e010      	b.n	34ea <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	0018      	movs	r0, r3
    34cc:	4b09      	ldr	r3, [pc, #36]	; (34f4 <usart_write_wait+0x60>)
    34ce:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    34d0:	68fb      	ldr	r3, [r7, #12]
    34d2:	1cba      	adds	r2, r7, #2
    34d4:	8812      	ldrh	r2, [r2, #0]
    34d6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    34d8:	46c0      	nop			; (mov r8, r8)
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	7e1b      	ldrb	r3, [r3, #24]
    34de:	b2db      	uxtb	r3, r3
    34e0:	001a      	movs	r2, r3
    34e2:	2302      	movs	r3, #2
    34e4:	4013      	ands	r3, r2
    34e6:	d0f8      	beq.n	34da <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    34e8:	2300      	movs	r3, #0
}
    34ea:	0018      	movs	r0, r3
    34ec:	46bd      	mov	sp, r7
    34ee:	b004      	add	sp, #16
    34f0:	bd80      	pop	{r7, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	00002f21 	.word	0x00002f21

000034f8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b084      	sub	sp, #16
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	799b      	ldrb	r3, [r3, #6]
    350c:	2201      	movs	r2, #1
    350e:	4053      	eors	r3, r2
    3510:	b2db      	uxtb	r3, r3
    3512:	2b00      	cmp	r3, #0
    3514:	d001      	beq.n	351a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    3516:	231c      	movs	r3, #28
    3518:	e05e      	b.n	35d8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    351a:	687b      	ldr	r3, [r7, #4]
    351c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    351e:	b29b      	uxth	r3, r3
    3520:	2b00      	cmp	r3, #0
    3522:	d001      	beq.n	3528 <usart_read_wait+0x30>
		return STATUS_BUSY;
    3524:	2305      	movs	r3, #5
    3526:	e057      	b.n	35d8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    3528:	68fb      	ldr	r3, [r7, #12]
    352a:	7e1b      	ldrb	r3, [r3, #24]
    352c:	b2db      	uxtb	r3, r3
    352e:	001a      	movs	r2, r3
    3530:	2304      	movs	r3, #4
    3532:	4013      	ands	r3, r2
    3534:	d101      	bne.n	353a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    3536:	2305      	movs	r3, #5
    3538:	e04e      	b.n	35d8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	0018      	movs	r0, r3
    353e:	4b28      	ldr	r3, [pc, #160]	; (35e0 <usart_read_wait+0xe8>)
    3540:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3542:	68fb      	ldr	r3, [r7, #12]
    3544:	8b5b      	ldrh	r3, [r3, #26]
    3546:	b29b      	uxth	r3, r3
    3548:	b2da      	uxtb	r2, r3
    354a:	230b      	movs	r3, #11
    354c:	18fb      	adds	r3, r7, r3
    354e:	213f      	movs	r1, #63	; 0x3f
    3550:	400a      	ands	r2, r1
    3552:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    3554:	230b      	movs	r3, #11
    3556:	18fb      	adds	r3, r7, r3
    3558:	781b      	ldrb	r3, [r3, #0]
    355a:	2b00      	cmp	r3, #0
    355c:	d036      	beq.n	35cc <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    355e:	230b      	movs	r3, #11
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2202      	movs	r2, #2
    3566:	4013      	ands	r3, r2
    3568:	d004      	beq.n	3574 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	2202      	movs	r2, #2
    356e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    3570:	231a      	movs	r3, #26
    3572:	e031      	b.n	35d8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3574:	230b      	movs	r3, #11
    3576:	18fb      	adds	r3, r7, r3
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	2204      	movs	r2, #4
    357c:	4013      	ands	r3, r2
    357e:	d004      	beq.n	358a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	2204      	movs	r2, #4
    3584:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    3586:	231e      	movs	r3, #30
    3588:	e026      	b.n	35d8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    358a:	230b      	movs	r3, #11
    358c:	18fb      	adds	r3, r7, r3
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	2201      	movs	r2, #1
    3592:	4013      	ands	r3, r2
    3594:	d004      	beq.n	35a0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3596:	68fb      	ldr	r3, [r7, #12]
    3598:	2201      	movs	r2, #1
    359a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    359c:	2313      	movs	r3, #19
    359e:	e01b      	b.n	35d8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    35a0:	230b      	movs	r3, #11
    35a2:	18fb      	adds	r3, r7, r3
    35a4:	781b      	ldrb	r3, [r3, #0]
    35a6:	2210      	movs	r2, #16
    35a8:	4013      	ands	r3, r2
    35aa:	d004      	beq.n	35b6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    35ac:	68fb      	ldr	r3, [r7, #12]
    35ae:	2210      	movs	r2, #16
    35b0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    35b2:	2342      	movs	r3, #66	; 0x42
    35b4:	e010      	b.n	35d8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    35b6:	230b      	movs	r3, #11
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	2220      	movs	r2, #32
    35be:	4013      	ands	r3, r2
    35c0:	d004      	beq.n	35cc <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    35c2:	68fb      	ldr	r3, [r7, #12]
    35c4:	2220      	movs	r2, #32
    35c6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    35c8:	2341      	movs	r3, #65	; 0x41
    35ca:	e005      	b.n	35d8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    35d0:	b29a      	uxth	r2, r3
    35d2:	683b      	ldr	r3, [r7, #0]
    35d4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    35d6:	2300      	movs	r3, #0
}
    35d8:	0018      	movs	r0, r3
    35da:	46bd      	mov	sp, r7
    35dc:	b004      	add	sp, #16
    35de:	bd80      	pop	{r7, pc}
    35e0:	00002f21 	.word	0x00002f21

000035e4 <usart_is_syncing>:
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b084      	sub	sp, #16
    35e8:	af00      	add	r7, sp, #0
    35ea:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    35f2:	68fb      	ldr	r3, [r7, #12]
    35f4:	69db      	ldr	r3, [r3, #28]
    35f6:	1e5a      	subs	r2, r3, #1
    35f8:	4193      	sbcs	r3, r2
    35fa:	b2db      	uxtb	r3, r3
}
    35fc:	0018      	movs	r0, r3
    35fe:	46bd      	mov	sp, r7
    3600:	b004      	add	sp, #16
    3602:	bd80      	pop	{r7, pc}

00003604 <_usart_wait_for_sync>:
{
    3604:	b580      	push	{r7, lr}
    3606:	b082      	sub	sp, #8
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    360c:	46c0      	nop			; (mov r8, r8)
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	0018      	movs	r0, r3
    3612:	4b04      	ldr	r3, [pc, #16]	; (3624 <_usart_wait_for_sync+0x20>)
    3614:	4798      	blx	r3
    3616:	1e03      	subs	r3, r0, #0
    3618:	d1f9      	bne.n	360e <_usart_wait_for_sync+0xa>
}
    361a:	46c0      	nop			; (mov r8, r8)
    361c:	46bd      	mov	sp, r7
    361e:	b002      	add	sp, #8
    3620:	bd80      	pop	{r7, pc}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	000035e5 	.word	0x000035e5

00003628 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    3628:	b580      	push	{r7, lr}
    362a:	b088      	sub	sp, #32
    362c:	af00      	add	r7, sp, #0
    362e:	0002      	movs	r2, r0
    3630:	1dfb      	adds	r3, r7, #7
    3632:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    3634:	1dfb      	adds	r3, r7, #7
    3636:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    3638:	4ba3      	ldr	r3, [pc, #652]	; (38c8 <_usart_interrupt_handler+0x2a0>)
    363a:	0092      	lsls	r2, r2, #2
    363c:	58d3      	ldr	r3, [r2, r3]
    363e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    3640:	69bb      	ldr	r3, [r7, #24]
    3642:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    3644:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    3646:	69bb      	ldr	r3, [r7, #24]
    3648:	0018      	movs	r0, r3
    364a:	4ba0      	ldr	r3, [pc, #640]	; (38cc <_usart_interrupt_handler+0x2a4>)
    364c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    364e:	697b      	ldr	r3, [r7, #20]
    3650:	7e1b      	ldrb	r3, [r3, #24]
    3652:	b2da      	uxtb	r2, r3
    3654:	2312      	movs	r3, #18
    3656:	18fb      	adds	r3, r7, r3
    3658:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    365a:	697b      	ldr	r3, [r7, #20]
    365c:	7d9b      	ldrb	r3, [r3, #22]
    365e:	b2db      	uxtb	r3, r3
    3660:	b29a      	uxth	r2, r3
    3662:	2312      	movs	r3, #18
    3664:	18fb      	adds	r3, r7, r3
    3666:	2112      	movs	r1, #18
    3668:	1879      	adds	r1, r7, r1
    366a:	8809      	ldrh	r1, [r1, #0]
    366c:	400a      	ands	r2, r1
    366e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    3670:	69bb      	ldr	r3, [r7, #24]
    3672:	2230      	movs	r2, #48	; 0x30
    3674:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    3676:	69ba      	ldr	r2, [r7, #24]
    3678:	2131      	movs	r1, #49	; 0x31
    367a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    367c:	4013      	ands	r3, r2
    367e:	b2da      	uxtb	r2, r3
    3680:	2310      	movs	r3, #16
    3682:	18fb      	adds	r3, r7, r3
    3684:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    3686:	2312      	movs	r3, #18
    3688:	18fb      	adds	r3, r7, r3
    368a:	881b      	ldrh	r3, [r3, #0]
    368c:	2201      	movs	r2, #1
    368e:	4013      	ands	r3, r2
    3690:	d044      	beq.n	371c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    3692:	69bb      	ldr	r3, [r7, #24]
    3694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3696:	b29b      	uxth	r3, r3
    3698:	2b00      	cmp	r3, #0
    369a:	d03c      	beq.n	3716 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    369c:	69bb      	ldr	r3, [r7, #24]
    369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36a0:	781b      	ldrb	r3, [r3, #0]
    36a2:	b2da      	uxtb	r2, r3
    36a4:	231c      	movs	r3, #28
    36a6:	18fb      	adds	r3, r7, r3
    36a8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    36aa:	69bb      	ldr	r3, [r7, #24]
    36ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36ae:	1c5a      	adds	r2, r3, #1
    36b0:	69bb      	ldr	r3, [r7, #24]
    36b2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    36b4:	69bb      	ldr	r3, [r7, #24]
    36b6:	795b      	ldrb	r3, [r3, #5]
    36b8:	2b01      	cmp	r3, #1
    36ba:	d113      	bne.n	36e4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    36bc:	69bb      	ldr	r3, [r7, #24]
    36be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	b2db      	uxtb	r3, r3
    36c4:	021b      	lsls	r3, r3, #8
    36c6:	b21a      	sxth	r2, r3
    36c8:	231c      	movs	r3, #28
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	2100      	movs	r1, #0
    36ce:	5e5b      	ldrsh	r3, [r3, r1]
    36d0:	4313      	orrs	r3, r2
    36d2:	b21a      	sxth	r2, r3
    36d4:	231c      	movs	r3, #28
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    36da:	69bb      	ldr	r3, [r7, #24]
    36dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36de:	1c5a      	adds	r2, r3, #1
    36e0:	69bb      	ldr	r3, [r7, #24]
    36e2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    36e4:	231c      	movs	r3, #28
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	881b      	ldrh	r3, [r3, #0]
    36ea:	05db      	lsls	r3, r3, #23
    36ec:	0ddb      	lsrs	r3, r3, #23
    36ee:	b29a      	uxth	r2, r3
    36f0:	697b      	ldr	r3, [r7, #20]
    36f2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    36f4:	69bb      	ldr	r3, [r7, #24]
    36f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    36f8:	b29b      	uxth	r3, r3
    36fa:	3b01      	subs	r3, #1
    36fc:	b29b      	uxth	r3, r3
    36fe:	69ba      	ldr	r2, [r7, #24]
    3700:	1c19      	adds	r1, r3, #0
    3702:	85d1      	strh	r1, [r2, #46]	; 0x2e
    3704:	2b00      	cmp	r3, #0
    3706:	d109      	bne.n	371c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3708:	697b      	ldr	r3, [r7, #20]
    370a:	2201      	movs	r2, #1
    370c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    370e:	697b      	ldr	r3, [r7, #20]
    3710:	2202      	movs	r2, #2
    3712:	759a      	strb	r2, [r3, #22]
    3714:	e002      	b.n	371c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    3716:	697b      	ldr	r3, [r7, #20]
    3718:	2201      	movs	r2, #1
    371a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    371c:	2312      	movs	r3, #18
    371e:	18fb      	adds	r3, r7, r3
    3720:	881b      	ldrh	r3, [r3, #0]
    3722:	2202      	movs	r2, #2
    3724:	4013      	ands	r3, r2
    3726:	d011      	beq.n	374c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    3728:	697b      	ldr	r3, [r7, #20]
    372a:	2202      	movs	r2, #2
    372c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    372e:	69bb      	ldr	r3, [r7, #24]
    3730:	2233      	movs	r2, #51	; 0x33
    3732:	2100      	movs	r1, #0
    3734:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    3736:	2310      	movs	r3, #16
    3738:	18fb      	adds	r3, r7, r3
    373a:	881b      	ldrh	r3, [r3, #0]
    373c:	2201      	movs	r2, #1
    373e:	4013      	ands	r3, r2
    3740:	d004      	beq.n	374c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    3742:	69bb      	ldr	r3, [r7, #24]
    3744:	68db      	ldr	r3, [r3, #12]
    3746:	69ba      	ldr	r2, [r7, #24]
    3748:	0010      	movs	r0, r2
    374a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    374c:	2312      	movs	r3, #18
    374e:	18fb      	adds	r3, r7, r3
    3750:	881b      	ldrh	r3, [r3, #0]
    3752:	2204      	movs	r2, #4
    3754:	4013      	ands	r3, r2
    3756:	d100      	bne.n	375a <_usart_interrupt_handler+0x132>
    3758:	e0bd      	b.n	38d6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    375a:	69bb      	ldr	r3, [r7, #24]
    375c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    375e:	b29b      	uxth	r3, r3
    3760:	2b00      	cmp	r3, #0
    3762:	d100      	bne.n	3766 <_usart_interrupt_handler+0x13e>
    3764:	e0b4      	b.n	38d0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3766:	697b      	ldr	r3, [r7, #20]
    3768:	8b5b      	ldrh	r3, [r3, #26]
    376a:	b29b      	uxth	r3, r3
    376c:	b2da      	uxtb	r2, r3
    376e:	231f      	movs	r3, #31
    3770:	18fb      	adds	r3, r7, r3
    3772:	213f      	movs	r1, #63	; 0x3f
    3774:	400a      	ands	r2, r1
    3776:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3778:	231f      	movs	r3, #31
    377a:	18fb      	adds	r3, r7, r3
    377c:	781b      	ldrb	r3, [r3, #0]
    377e:	2208      	movs	r2, #8
    3780:	4013      	ands	r3, r2
    3782:	d007      	beq.n	3794 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    3784:	231f      	movs	r3, #31
    3786:	18fb      	adds	r3, r7, r3
    3788:	221f      	movs	r2, #31
    378a:	18ba      	adds	r2, r7, r2
    378c:	7812      	ldrb	r2, [r2, #0]
    378e:	2108      	movs	r1, #8
    3790:	438a      	bics	r2, r1
    3792:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    3794:	231f      	movs	r3, #31
    3796:	18fb      	adds	r3, r7, r3
    3798:	781b      	ldrb	r3, [r3, #0]
    379a:	2b00      	cmp	r3, #0
    379c:	d050      	beq.n	3840 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    379e:	231f      	movs	r3, #31
    37a0:	18fb      	adds	r3, r7, r3
    37a2:	781b      	ldrb	r3, [r3, #0]
    37a4:	2202      	movs	r2, #2
    37a6:	4013      	ands	r3, r2
    37a8:	d007      	beq.n	37ba <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    37aa:	69bb      	ldr	r3, [r7, #24]
    37ac:	2232      	movs	r2, #50	; 0x32
    37ae:	211a      	movs	r1, #26
    37b0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    37b2:	697b      	ldr	r3, [r7, #20]
    37b4:	2202      	movs	r2, #2
    37b6:	835a      	strh	r2, [r3, #26]
    37b8:	e036      	b.n	3828 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    37ba:	231f      	movs	r3, #31
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	2204      	movs	r2, #4
    37c2:	4013      	ands	r3, r2
    37c4:	d007      	beq.n	37d6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    37c6:	69bb      	ldr	r3, [r7, #24]
    37c8:	2232      	movs	r2, #50	; 0x32
    37ca:	211e      	movs	r1, #30
    37cc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    37ce:	697b      	ldr	r3, [r7, #20]
    37d0:	2204      	movs	r2, #4
    37d2:	835a      	strh	r2, [r3, #26]
    37d4:	e028      	b.n	3828 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    37d6:	231f      	movs	r3, #31
    37d8:	18fb      	adds	r3, r7, r3
    37da:	781b      	ldrb	r3, [r3, #0]
    37dc:	2201      	movs	r2, #1
    37de:	4013      	ands	r3, r2
    37e0:	d007      	beq.n	37f2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    37e2:	69bb      	ldr	r3, [r7, #24]
    37e4:	2232      	movs	r2, #50	; 0x32
    37e6:	2113      	movs	r1, #19
    37e8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    37ea:	697b      	ldr	r3, [r7, #20]
    37ec:	2201      	movs	r2, #1
    37ee:	835a      	strh	r2, [r3, #26]
    37f0:	e01a      	b.n	3828 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    37f2:	231f      	movs	r3, #31
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	781b      	ldrb	r3, [r3, #0]
    37f8:	2210      	movs	r2, #16
    37fa:	4013      	ands	r3, r2
    37fc:	d007      	beq.n	380e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    37fe:	69bb      	ldr	r3, [r7, #24]
    3800:	2232      	movs	r2, #50	; 0x32
    3802:	2142      	movs	r1, #66	; 0x42
    3804:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    3806:	697b      	ldr	r3, [r7, #20]
    3808:	2210      	movs	r2, #16
    380a:	835a      	strh	r2, [r3, #26]
    380c:	e00c      	b.n	3828 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    380e:	231f      	movs	r3, #31
    3810:	18fb      	adds	r3, r7, r3
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	2220      	movs	r2, #32
    3816:	4013      	ands	r3, r2
    3818:	d006      	beq.n	3828 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    381a:	69bb      	ldr	r3, [r7, #24]
    381c:	2232      	movs	r2, #50	; 0x32
    381e:	2141      	movs	r1, #65	; 0x41
    3820:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    3822:	697b      	ldr	r3, [r7, #20]
    3824:	2220      	movs	r2, #32
    3826:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    3828:	2310      	movs	r3, #16
    382a:	18fb      	adds	r3, r7, r3
    382c:	881b      	ldrh	r3, [r3, #0]
    382e:	2204      	movs	r2, #4
    3830:	4013      	ands	r3, r2
				if (callback_status
    3832:	d050      	beq.n	38d6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3834:	69bb      	ldr	r3, [r7, #24]
    3836:	695b      	ldr	r3, [r3, #20]
    3838:	69ba      	ldr	r2, [r7, #24]
    383a:	0010      	movs	r0, r2
    383c:	4798      	blx	r3
    383e:	e04a      	b.n	38d6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3840:	697b      	ldr	r3, [r7, #20]
    3842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3844:	b29a      	uxth	r2, r3
    3846:	230e      	movs	r3, #14
    3848:	18fb      	adds	r3, r7, r3
    384a:	05d2      	lsls	r2, r2, #23
    384c:	0dd2      	lsrs	r2, r2, #23
    384e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3850:	69bb      	ldr	r3, [r7, #24]
    3852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3854:	220e      	movs	r2, #14
    3856:	18ba      	adds	r2, r7, r2
    3858:	8812      	ldrh	r2, [r2, #0]
    385a:	b2d2      	uxtb	r2, r2
    385c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    385e:	69bb      	ldr	r3, [r7, #24]
    3860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3862:	1c5a      	adds	r2, r3, #1
    3864:	69bb      	ldr	r3, [r7, #24]
    3866:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3868:	69bb      	ldr	r3, [r7, #24]
    386a:	795b      	ldrb	r3, [r3, #5]
    386c:	2b01      	cmp	r3, #1
    386e:	d10d      	bne.n	388c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3870:	69bb      	ldr	r3, [r7, #24]
    3872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3874:	220e      	movs	r2, #14
    3876:	18ba      	adds	r2, r7, r2
    3878:	8812      	ldrh	r2, [r2, #0]
    387a:	0a12      	lsrs	r2, r2, #8
    387c:	b292      	uxth	r2, r2
    387e:	b2d2      	uxtb	r2, r2
    3880:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    3882:	69bb      	ldr	r3, [r7, #24]
    3884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3886:	1c5a      	adds	r2, r3, #1
    3888:	69bb      	ldr	r3, [r7, #24]
    388a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    388c:	69bb      	ldr	r3, [r7, #24]
    388e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3890:	b29b      	uxth	r3, r3
    3892:	3b01      	subs	r3, #1
    3894:	b29b      	uxth	r3, r3
    3896:	69ba      	ldr	r2, [r7, #24]
    3898:	1c19      	adds	r1, r3, #0
    389a:	8591      	strh	r1, [r2, #44]	; 0x2c
    389c:	2b00      	cmp	r3, #0
    389e:	d11a      	bne.n	38d6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    38a0:	697b      	ldr	r3, [r7, #20]
    38a2:	2204      	movs	r2, #4
    38a4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    38a6:	69bb      	ldr	r3, [r7, #24]
    38a8:	2232      	movs	r2, #50	; 0x32
    38aa:	2100      	movs	r1, #0
    38ac:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    38ae:	2310      	movs	r3, #16
    38b0:	18fb      	adds	r3, r7, r3
    38b2:	881b      	ldrh	r3, [r3, #0]
    38b4:	2202      	movs	r2, #2
    38b6:	4013      	ands	r3, r2
					if (callback_status
    38b8:	d00d      	beq.n	38d6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    38ba:	69bb      	ldr	r3, [r7, #24]
    38bc:	691b      	ldr	r3, [r3, #16]
    38be:	69ba      	ldr	r2, [r7, #24]
    38c0:	0010      	movs	r0, r2
    38c2:	4798      	blx	r3
    38c4:	e007      	b.n	38d6 <_usart_interrupt_handler+0x2ae>
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	20000508 	.word	0x20000508
    38cc:	00003605 	.word	0x00003605
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    38d0:	697b      	ldr	r3, [r7, #20]
    38d2:	2204      	movs	r2, #4
    38d4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    38d6:	2312      	movs	r3, #18
    38d8:	18fb      	adds	r3, r7, r3
    38da:	881b      	ldrh	r3, [r3, #0]
    38dc:	2210      	movs	r2, #16
    38de:	4013      	ands	r3, r2
    38e0:	d010      	beq.n	3904 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    38e2:	697b      	ldr	r3, [r7, #20]
    38e4:	2210      	movs	r2, #16
    38e6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    38e8:	697b      	ldr	r3, [r7, #20]
    38ea:	2210      	movs	r2, #16
    38ec:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    38ee:	2310      	movs	r3, #16
    38f0:	18fb      	adds	r3, r7, r3
    38f2:	881b      	ldrh	r3, [r3, #0]
    38f4:	2210      	movs	r2, #16
    38f6:	4013      	ands	r3, r2
    38f8:	d004      	beq.n	3904 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    38fa:	69bb      	ldr	r3, [r7, #24]
    38fc:	69db      	ldr	r3, [r3, #28]
    38fe:	69ba      	ldr	r2, [r7, #24]
    3900:	0010      	movs	r0, r2
    3902:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3904:	2312      	movs	r3, #18
    3906:	18fb      	adds	r3, r7, r3
    3908:	881b      	ldrh	r3, [r3, #0]
    390a:	2220      	movs	r2, #32
    390c:	4013      	ands	r3, r2
    390e:	d010      	beq.n	3932 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3910:	697b      	ldr	r3, [r7, #20]
    3912:	2220      	movs	r2, #32
    3914:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3916:	697b      	ldr	r3, [r7, #20]
    3918:	2220      	movs	r2, #32
    391a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    391c:	2310      	movs	r3, #16
    391e:	18fb      	adds	r3, r7, r3
    3920:	881b      	ldrh	r3, [r3, #0]
    3922:	2208      	movs	r2, #8
    3924:	4013      	ands	r3, r2
    3926:	d004      	beq.n	3932 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3928:	69bb      	ldr	r3, [r7, #24]
    392a:	699b      	ldr	r3, [r3, #24]
    392c:	69ba      	ldr	r2, [r7, #24]
    392e:	0010      	movs	r0, r2
    3930:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3932:	2312      	movs	r3, #18
    3934:	18fb      	adds	r3, r7, r3
    3936:	881b      	ldrh	r3, [r3, #0]
    3938:	2208      	movs	r2, #8
    393a:	4013      	ands	r3, r2
    393c:	d010      	beq.n	3960 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    393e:	697b      	ldr	r3, [r7, #20]
    3940:	2208      	movs	r2, #8
    3942:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	2208      	movs	r2, #8
    3948:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    394a:	2310      	movs	r3, #16
    394c:	18fb      	adds	r3, r7, r3
    394e:	881b      	ldrh	r3, [r3, #0]
    3950:	2220      	movs	r2, #32
    3952:	4013      	ands	r3, r2
    3954:	d004      	beq.n	3960 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3956:	69bb      	ldr	r3, [r7, #24]
    3958:	6a1b      	ldr	r3, [r3, #32]
    395a:	69ba      	ldr	r2, [r7, #24]
    395c:	0010      	movs	r0, r2
    395e:	4798      	blx	r3
		}
	}
#endif
}
    3960:	46c0      	nop			; (mov r8, r8)
    3962:	46bd      	mov	sp, r7
    3964:	b008      	add	sp, #32
    3966:	bd80      	pop	{r7, pc}

00003968 <system_gclk_gen_get_config_defaults>:
{
    3968:	b580      	push	{r7, lr}
    396a:	b082      	sub	sp, #8
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	2201      	movs	r2, #1
    3974:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	2200      	movs	r2, #0
    397a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	2206      	movs	r2, #6
    3980:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	2200      	movs	r2, #0
    3986:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	2200      	movs	r2, #0
    398c:	725a      	strb	r2, [r3, #9]
}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	46bd      	mov	sp, r7
    3992:	b002      	add	sp, #8
    3994:	bd80      	pop	{r7, pc}

00003996 <system_clock_source_osc8m_get_config_defaults>:
{
    3996:	b580      	push	{r7, lr}
    3998:	b082      	sub	sp, #8
    399a:	af00      	add	r7, sp, #0
    399c:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	2203      	movs	r2, #3
    39a2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	2200      	movs	r2, #0
    39a8:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	2201      	movs	r2, #1
    39ae:	709a      	strb	r2, [r3, #2]
}
    39b0:	46c0      	nop			; (mov r8, r8)
    39b2:	46bd      	mov	sp, r7
    39b4:	b002      	add	sp, #8
    39b6:	bd80      	pop	{r7, pc}

000039b8 <system_cpu_clock_set_divider>:
{
    39b8:	b580      	push	{r7, lr}
    39ba:	b082      	sub	sp, #8
    39bc:	af00      	add	r7, sp, #0
    39be:	0002      	movs	r2, r0
    39c0:	1dfb      	adds	r3, r7, #7
    39c2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    39c4:	4a03      	ldr	r2, [pc, #12]	; (39d4 <system_cpu_clock_set_divider+0x1c>)
    39c6:	1dfb      	adds	r3, r7, #7
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	7213      	strb	r3, [r2, #8]
}
    39cc:	46c0      	nop			; (mov r8, r8)
    39ce:	46bd      	mov	sp, r7
    39d0:	b002      	add	sp, #8
    39d2:	bd80      	pop	{r7, pc}
    39d4:	40000400 	.word	0x40000400

000039d8 <system_apb_clock_set_divider>:
{
    39d8:	b580      	push	{r7, lr}
    39da:	b082      	sub	sp, #8
    39dc:	af00      	add	r7, sp, #0
    39de:	0002      	movs	r2, r0
    39e0:	1dfb      	adds	r3, r7, #7
    39e2:	701a      	strb	r2, [r3, #0]
    39e4:	1dbb      	adds	r3, r7, #6
    39e6:	1c0a      	adds	r2, r1, #0
    39e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    39ea:	1dfb      	adds	r3, r7, #7
    39ec:	781b      	ldrb	r3, [r3, #0]
    39ee:	2b01      	cmp	r3, #1
    39f0:	d008      	beq.n	3a04 <system_apb_clock_set_divider+0x2c>
    39f2:	2b02      	cmp	r3, #2
    39f4:	d00b      	beq.n	3a0e <system_apb_clock_set_divider+0x36>
    39f6:	2b00      	cmp	r3, #0
    39f8:	d10e      	bne.n	3a18 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    39fa:	4a0b      	ldr	r2, [pc, #44]	; (3a28 <system_apb_clock_set_divider+0x50>)
    39fc:	1dbb      	adds	r3, r7, #6
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	7253      	strb	r3, [r2, #9]
			break;
    3a02:	e00b      	b.n	3a1c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    3a04:	4a08      	ldr	r2, [pc, #32]	; (3a28 <system_apb_clock_set_divider+0x50>)
    3a06:	1dbb      	adds	r3, r7, #6
    3a08:	781b      	ldrb	r3, [r3, #0]
    3a0a:	7293      	strb	r3, [r2, #10]
			break;
    3a0c:	e006      	b.n	3a1c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    3a0e:	4a06      	ldr	r2, [pc, #24]	; (3a28 <system_apb_clock_set_divider+0x50>)
    3a10:	1dbb      	adds	r3, r7, #6
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	72d3      	strb	r3, [r2, #11]
			break;
    3a16:	e001      	b.n	3a1c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    3a18:	2317      	movs	r3, #23
    3a1a:	e000      	b.n	3a1e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    3a1c:	2300      	movs	r3, #0
}
    3a1e:	0018      	movs	r0, r3
    3a20:	46bd      	mov	sp, r7
    3a22:	b002      	add	sp, #8
    3a24:	bd80      	pop	{r7, pc}
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	40000400 	.word	0x40000400

00003a2c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b082      	sub	sp, #8
    3a30:	af00      	add	r7, sp, #0
    3a32:	0002      	movs	r2, r0
    3a34:	1dfb      	adds	r3, r7, #7
    3a36:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3a38:	4a08      	ldr	r2, [pc, #32]	; (3a5c <system_flash_set_waitstates+0x30>)
    3a3a:	1dfb      	adds	r3, r7, #7
    3a3c:	781b      	ldrb	r3, [r3, #0]
    3a3e:	210f      	movs	r1, #15
    3a40:	400b      	ands	r3, r1
    3a42:	b2d9      	uxtb	r1, r3
    3a44:	6853      	ldr	r3, [r2, #4]
    3a46:	200f      	movs	r0, #15
    3a48:	4001      	ands	r1, r0
    3a4a:	0049      	lsls	r1, r1, #1
    3a4c:	201e      	movs	r0, #30
    3a4e:	4383      	bics	r3, r0
    3a50:	430b      	orrs	r3, r1
    3a52:	6053      	str	r3, [r2, #4]
}
    3a54:	46c0      	nop			; (mov r8, r8)
    3a56:	46bd      	mov	sp, r7
    3a58:	b002      	add	sp, #8
    3a5a:	bd80      	pop	{r7, pc}
    3a5c:	41004000 	.word	0x41004000

00003a60 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3a60:	b580      	push	{r7, lr}
    3a62:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3a64:	46c0      	nop			; (mov r8, r8)
    3a66:	4b04      	ldr	r3, [pc, #16]	; (3a78 <_system_dfll_wait_for_sync+0x18>)
    3a68:	68db      	ldr	r3, [r3, #12]
    3a6a:	2210      	movs	r2, #16
    3a6c:	4013      	ands	r3, r2
    3a6e:	d0fa      	beq.n	3a66 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3a70:	46c0      	nop			; (mov r8, r8)
    3a72:	46bd      	mov	sp, r7
    3a74:	bd80      	pop	{r7, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	40000800 	.word	0x40000800

00003a7c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3a80:	4b0c      	ldr	r3, [pc, #48]	; (3ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a82:	2202      	movs	r2, #2
    3a84:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3a86:	4b0c      	ldr	r3, [pc, #48]	; (3ab8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3a88:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3a8a:	4a0a      	ldr	r2, [pc, #40]	; (3ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a8c:	4b0b      	ldr	r3, [pc, #44]	; (3abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3a8e:	689b      	ldr	r3, [r3, #8]
    3a90:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3a92:	4a08      	ldr	r2, [pc, #32]	; (3ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a94:	4b09      	ldr	r3, [pc, #36]	; (3abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3a96:	685b      	ldr	r3, [r3, #4]
    3a98:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3a9a:	4b06      	ldr	r3, [pc, #24]	; (3ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a9c:	2200      	movs	r2, #0
    3a9e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3aa0:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3aa2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3aa4:	4a03      	ldr	r2, [pc, #12]	; (3ab4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3aa6:	4b05      	ldr	r3, [pc, #20]	; (3abc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	b29b      	uxth	r3, r3
    3aac:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	46bd      	mov	sp, r7
    3ab2:	bd80      	pop	{r7, pc}
    3ab4:	40000800 	.word	0x40000800
    3ab8:	00003a61 	.word	0x00003a61
    3abc:	200000b0 	.word	0x200000b0

00003ac0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b082      	sub	sp, #8
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	0002      	movs	r2, r0
    3ac8:	1dfb      	adds	r3, r7, #7
    3aca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3acc:	1dfb      	adds	r3, r7, #7
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	2b08      	cmp	r3, #8
    3ad2:	d840      	bhi.n	3b56 <system_clock_source_get_hz+0x96>
    3ad4:	009a      	lsls	r2, r3, #2
    3ad6:	4b22      	ldr	r3, [pc, #136]	; (3b60 <system_clock_source_get_hz+0xa0>)
    3ad8:	18d3      	adds	r3, r2, r3
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3ade:	4b21      	ldr	r3, [pc, #132]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3ae0:	691b      	ldr	r3, [r3, #16]
    3ae2:	e039      	b.n	3b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3ae4:	4b20      	ldr	r3, [pc, #128]	; (3b68 <system_clock_source_get_hz+0xa8>)
    3ae6:	6a1b      	ldr	r3, [r3, #32]
    3ae8:	059b      	lsls	r3, r3, #22
    3aea:	0f9b      	lsrs	r3, r3, #30
    3aec:	b2db      	uxtb	r3, r3
    3aee:	001a      	movs	r2, r3
    3af0:	4b1e      	ldr	r3, [pc, #120]	; (3b6c <system_clock_source_get_hz+0xac>)
    3af2:	40d3      	lsrs	r3, r2
    3af4:	e030      	b.n	3b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3af6:	2380      	movs	r3, #128	; 0x80
    3af8:	021b      	lsls	r3, r3, #8
    3afa:	e02d      	b.n	3b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3afc:	2380      	movs	r3, #128	; 0x80
    3afe:	021b      	lsls	r3, r3, #8
    3b00:	e02a      	b.n	3b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3b02:	4b18      	ldr	r3, [pc, #96]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3b04:	695b      	ldr	r3, [r3, #20]
    3b06:	e027      	b.n	3b58 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3b08:	4b16      	ldr	r3, [pc, #88]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2202      	movs	r2, #2
    3b0e:	4013      	ands	r3, r2
    3b10:	d101      	bne.n	3b16 <system_clock_source_get_hz+0x56>
			return 0;
    3b12:	2300      	movs	r3, #0
    3b14:	e020      	b.n	3b58 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3b16:	4b16      	ldr	r3, [pc, #88]	; (3b70 <system_clock_source_get_hz+0xb0>)
    3b18:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3b1a:	4b12      	ldr	r3, [pc, #72]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	2204      	movs	r2, #4
    3b20:	4013      	ands	r3, r2
    3b22:	d009      	beq.n	3b38 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3b24:	2000      	movs	r0, #0
    3b26:	4b13      	ldr	r3, [pc, #76]	; (3b74 <system_clock_source_get_hz+0xb4>)
    3b28:	4798      	blx	r3
    3b2a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3b2c:	4b0d      	ldr	r3, [pc, #52]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3b2e:	689b      	ldr	r3, [r3, #8]
    3b30:	041b      	lsls	r3, r3, #16
    3b32:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3b34:	4353      	muls	r3, r2
    3b36:	e00f      	b.n	3b58 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    3b38:	4b0f      	ldr	r3, [pc, #60]	; (3b78 <system_clock_source_get_hz+0xb8>)
    3b3a:	e00d      	b.n	3b58 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3b3c:	4a0a      	ldr	r2, [pc, #40]	; (3b68 <system_clock_source_get_hz+0xa8>)
    3b3e:	2350      	movs	r3, #80	; 0x50
    3b40:	5cd3      	ldrb	r3, [r2, r3]
    3b42:	b2db      	uxtb	r3, r3
    3b44:	001a      	movs	r2, r3
    3b46:	2304      	movs	r3, #4
    3b48:	4013      	ands	r3, r2
    3b4a:	d101      	bne.n	3b50 <system_clock_source_get_hz+0x90>
			return 0;
    3b4c:	2300      	movs	r3, #0
    3b4e:	e003      	b.n	3b58 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    3b50:	4b04      	ldr	r3, [pc, #16]	; (3b64 <system_clock_source_get_hz+0xa4>)
    3b52:	68db      	ldr	r3, [r3, #12]
    3b54:	e000      	b.n	3b58 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    3b56:	2300      	movs	r3, #0
	}
}
    3b58:	0018      	movs	r0, r3
    3b5a:	46bd      	mov	sp, r7
    3b5c:	b002      	add	sp, #8
    3b5e:	bd80      	pop	{r7, pc}
    3b60:	000065a0 	.word	0x000065a0
    3b64:	200000b0 	.word	0x200000b0
    3b68:	40000800 	.word	0x40000800
    3b6c:	007a1200 	.word	0x007a1200
    3b70:	00003a61 	.word	0x00003a61
    3b74:	000041fd 	.word	0x000041fd
    3b78:	02dc6c00 	.word	0x02dc6c00

00003b7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3b84:	4b1a      	ldr	r3, [pc, #104]	; (3bf0 <system_clock_source_osc8m_set_config+0x74>)
    3b86:	6a1b      	ldr	r3, [r3, #32]
    3b88:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	1c1a      	adds	r2, r3, #0
    3b90:	2303      	movs	r3, #3
    3b92:	4013      	ands	r3, r2
    3b94:	b2da      	uxtb	r2, r3
    3b96:	230d      	movs	r3, #13
    3b98:	18fb      	adds	r3, r7, r3
    3b9a:	2103      	movs	r1, #3
    3b9c:	400a      	ands	r2, r1
    3b9e:	0010      	movs	r0, r2
    3ba0:	781a      	ldrb	r2, [r3, #0]
    3ba2:	2103      	movs	r1, #3
    3ba4:	438a      	bics	r2, r1
    3ba6:	1c11      	adds	r1, r2, #0
    3ba8:	1c02      	adds	r2, r0, #0
    3baa:	430a      	orrs	r2, r1
    3bac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	789a      	ldrb	r2, [r3, #2]
    3bb2:	230c      	movs	r3, #12
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	01d0      	lsls	r0, r2, #7
    3bb8:	781a      	ldrb	r2, [r3, #0]
    3bba:	217f      	movs	r1, #127	; 0x7f
    3bbc:	400a      	ands	r2, r1
    3bbe:	1c11      	adds	r1, r2, #0
    3bc0:	1c02      	adds	r2, r0, #0
    3bc2:	430a      	orrs	r2, r1
    3bc4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	785a      	ldrb	r2, [r3, #1]
    3bca:	230c      	movs	r3, #12
    3bcc:	18fb      	adds	r3, r7, r3
    3bce:	2101      	movs	r1, #1
    3bd0:	400a      	ands	r2, r1
    3bd2:	0190      	lsls	r0, r2, #6
    3bd4:	781a      	ldrb	r2, [r3, #0]
    3bd6:	2140      	movs	r1, #64	; 0x40
    3bd8:	438a      	bics	r2, r1
    3bda:	1c11      	adds	r1, r2, #0
    3bdc:	1c02      	adds	r2, r0, #0
    3bde:	430a      	orrs	r2, r1
    3be0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    3be2:	4b03      	ldr	r3, [pc, #12]	; (3bf0 <system_clock_source_osc8m_set_config+0x74>)
    3be4:	68fa      	ldr	r2, [r7, #12]
    3be6:	621a      	str	r2, [r3, #32]
}
    3be8:	46c0      	nop			; (mov r8, r8)
    3bea:	46bd      	mov	sp, r7
    3bec:	b004      	add	sp, #16
    3bee:	bd80      	pop	{r7, pc}
    3bf0:	40000800 	.word	0x40000800

00003bf4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b082      	sub	sp, #8
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	0002      	movs	r2, r0
    3bfc:	1dfb      	adds	r3, r7, #7
    3bfe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3c00:	1dfb      	adds	r3, r7, #7
    3c02:	781b      	ldrb	r3, [r3, #0]
    3c04:	2b08      	cmp	r3, #8
    3c06:	d83b      	bhi.n	3c80 <system_clock_source_enable+0x8c>
    3c08:	009a      	lsls	r2, r3, #2
    3c0a:	4b21      	ldr	r3, [pc, #132]	; (3c90 <system_clock_source_enable+0x9c>)
    3c0c:	18d3      	adds	r3, r2, r3
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3c12:	4b20      	ldr	r3, [pc, #128]	; (3c94 <system_clock_source_enable+0xa0>)
    3c14:	4a1f      	ldr	r2, [pc, #124]	; (3c94 <system_clock_source_enable+0xa0>)
    3c16:	6a12      	ldr	r2, [r2, #32]
    3c18:	2102      	movs	r1, #2
    3c1a:	430a      	orrs	r2, r1
    3c1c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3c1e:	2300      	movs	r3, #0
    3c20:	e031      	b.n	3c86 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3c22:	4b1c      	ldr	r3, [pc, #112]	; (3c94 <system_clock_source_enable+0xa0>)
    3c24:	4a1b      	ldr	r2, [pc, #108]	; (3c94 <system_clock_source_enable+0xa0>)
    3c26:	6992      	ldr	r2, [r2, #24]
    3c28:	2102      	movs	r1, #2
    3c2a:	430a      	orrs	r2, r1
    3c2c:	619a      	str	r2, [r3, #24]
		break;
    3c2e:	e029      	b.n	3c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3c30:	4a18      	ldr	r2, [pc, #96]	; (3c94 <system_clock_source_enable+0xa0>)
    3c32:	4b18      	ldr	r3, [pc, #96]	; (3c94 <system_clock_source_enable+0xa0>)
    3c34:	8a1b      	ldrh	r3, [r3, #16]
    3c36:	b29b      	uxth	r3, r3
    3c38:	2102      	movs	r1, #2
    3c3a:	430b      	orrs	r3, r1
    3c3c:	b29b      	uxth	r3, r3
    3c3e:	8213      	strh	r3, [r2, #16]
		break;
    3c40:	e020      	b.n	3c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3c42:	4a14      	ldr	r2, [pc, #80]	; (3c94 <system_clock_source_enable+0xa0>)
    3c44:	4b13      	ldr	r3, [pc, #76]	; (3c94 <system_clock_source_enable+0xa0>)
    3c46:	8a9b      	ldrh	r3, [r3, #20]
    3c48:	b29b      	uxth	r3, r3
    3c4a:	2102      	movs	r1, #2
    3c4c:	430b      	orrs	r3, r1
    3c4e:	b29b      	uxth	r3, r3
    3c50:	8293      	strh	r3, [r2, #20]
		break;
    3c52:	e017      	b.n	3c84 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3c54:	4b10      	ldr	r3, [pc, #64]	; (3c98 <system_clock_source_enable+0xa4>)
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	2202      	movs	r2, #2
    3c5a:	431a      	orrs	r2, r3
    3c5c:	4b0e      	ldr	r3, [pc, #56]	; (3c98 <system_clock_source_enable+0xa4>)
    3c5e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3c60:	4b0e      	ldr	r3, [pc, #56]	; (3c9c <system_clock_source_enable+0xa8>)
    3c62:	4798      	blx	r3
		break;
    3c64:	e00e      	b.n	3c84 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3c66:	4a0b      	ldr	r2, [pc, #44]	; (3c94 <system_clock_source_enable+0xa0>)
    3c68:	490a      	ldr	r1, [pc, #40]	; (3c94 <system_clock_source_enable+0xa0>)
    3c6a:	2344      	movs	r3, #68	; 0x44
    3c6c:	5ccb      	ldrb	r3, [r1, r3]
    3c6e:	b2db      	uxtb	r3, r3
    3c70:	2102      	movs	r1, #2
    3c72:	430b      	orrs	r3, r1
    3c74:	b2d9      	uxtb	r1, r3
    3c76:	2344      	movs	r3, #68	; 0x44
    3c78:	54d1      	strb	r1, [r2, r3]
		break;
    3c7a:	e003      	b.n	3c84 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3c7c:	2300      	movs	r3, #0
    3c7e:	e002      	b.n	3c86 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3c80:	2317      	movs	r3, #23
    3c82:	e000      	b.n	3c86 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3c84:	2300      	movs	r3, #0
}
    3c86:	0018      	movs	r0, r3
    3c88:	46bd      	mov	sp, r7
    3c8a:	b002      	add	sp, #8
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	000065c4 	.word	0x000065c4
    3c94:	40000800 	.word	0x40000800
    3c98:	200000b0 	.word	0x200000b0
    3c9c:	00003a7d 	.word	0x00003a7d

00003ca0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3ca6:	003b      	movs	r3, r7
    3ca8:	2201      	movs	r2, #1
    3caa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3cac:	2300      	movs	r3, #0
    3cae:	607b      	str	r3, [r7, #4]
    3cb0:	e009      	b.n	3cc6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	b2db      	uxtb	r3, r3
    3cb6:	003a      	movs	r2, r7
    3cb8:	0011      	movs	r1, r2
    3cba:	0018      	movs	r0, r3
    3cbc:	4b05      	ldr	r3, [pc, #20]	; (3cd4 <_switch_peripheral_gclk+0x34>)
    3cbe:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	3301      	adds	r3, #1
    3cc4:	607b      	str	r3, [r7, #4]
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	2b24      	cmp	r3, #36	; 0x24
    3cca:	d9f2      	bls.n	3cb2 <_switch_peripheral_gclk+0x12>
	}
}
    3ccc:	46c0      	nop			; (mov r8, r8)
    3cce:	46bd      	mov	sp, r7
    3cd0:	b002      	add	sp, #8
    3cd2:	bd80      	pop	{r7, pc}
    3cd4:	000040d9 	.word	0x000040d9

00003cd8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b0a0      	sub	sp, #128	; 0x80
    3cdc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3cde:	4b27      	ldr	r3, [pc, #156]	; (3d7c <system_clock_init+0xa4>)
    3ce0:	22c2      	movs	r2, #194	; 0xc2
    3ce2:	00d2      	lsls	r2, r2, #3
    3ce4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3ce6:	2000      	movs	r0, #0
    3ce8:	4b25      	ldr	r3, [pc, #148]	; (3d80 <system_clock_init+0xa8>)
    3cea:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3cec:	4b25      	ldr	r3, [pc, #148]	; (3d84 <system_clock_init+0xac>)
    3cee:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3cf0:	237c      	movs	r3, #124	; 0x7c
    3cf2:	18fb      	adds	r3, r7, r3
    3cf4:	0018      	movs	r0, r3
    3cf6:	4b24      	ldr	r3, [pc, #144]	; (3d88 <system_clock_init+0xb0>)
    3cf8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3cfa:	237c      	movs	r3, #124	; 0x7c
    3cfc:	18fb      	adds	r3, r7, r3
    3cfe:	2200      	movs	r2, #0
    3d00:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    3d02:	237c      	movs	r3, #124	; 0x7c
    3d04:	18fb      	adds	r3, r7, r3
    3d06:	2201      	movs	r2, #1
    3d08:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3d0a:	237c      	movs	r3, #124	; 0x7c
    3d0c:	18fb      	adds	r3, r7, r3
    3d0e:	2200      	movs	r2, #0
    3d10:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3d12:	237c      	movs	r3, #124	; 0x7c
    3d14:	18fb      	adds	r3, r7, r3
    3d16:	0018      	movs	r0, r3
    3d18:	4b1c      	ldr	r3, [pc, #112]	; (3d8c <system_clock_init+0xb4>)
    3d1a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3d1c:	2006      	movs	r0, #6
    3d1e:	4b1c      	ldr	r3, [pc, #112]	; (3d90 <system_clock_init+0xb8>)
    3d20:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3d22:	4b1c      	ldr	r3, [pc, #112]	; (3d94 <system_clock_init+0xbc>)
    3d24:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3d26:	2000      	movs	r0, #0
    3d28:	4b1b      	ldr	r3, [pc, #108]	; (3d98 <system_clock_init+0xc0>)
    3d2a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3d2c:	2100      	movs	r1, #0
    3d2e:	2000      	movs	r0, #0
    3d30:	4b1a      	ldr	r3, [pc, #104]	; (3d9c <system_clock_init+0xc4>)
    3d32:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3d34:	2100      	movs	r1, #0
    3d36:	2001      	movs	r0, #1
    3d38:	4b18      	ldr	r3, [pc, #96]	; (3d9c <system_clock_init+0xc4>)
    3d3a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3d3c:	2100      	movs	r1, #0
    3d3e:	2002      	movs	r0, #2
    3d40:	4b16      	ldr	r3, [pc, #88]	; (3d9c <system_clock_init+0xc4>)
    3d42:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3d44:	1d3b      	adds	r3, r7, #4
    3d46:	0018      	movs	r0, r3
    3d48:	4b15      	ldr	r3, [pc, #84]	; (3da0 <system_clock_init+0xc8>)
    3d4a:	4798      	blx	r3
    3d4c:	1d3b      	adds	r3, r7, #4
    3d4e:	2206      	movs	r2, #6
    3d50:	701a      	strb	r2, [r3, #0]
    3d52:	1d3b      	adds	r3, r7, #4
    3d54:	2201      	movs	r2, #1
    3d56:	605a      	str	r2, [r3, #4]
    3d58:	1d3b      	adds	r3, r7, #4
    3d5a:	2200      	movs	r2, #0
    3d5c:	721a      	strb	r2, [r3, #8]
    3d5e:	1d3b      	adds	r3, r7, #4
    3d60:	2200      	movs	r2, #0
    3d62:	725a      	strb	r2, [r3, #9]
    3d64:	1d3b      	adds	r3, r7, #4
    3d66:	0019      	movs	r1, r3
    3d68:	2000      	movs	r0, #0
    3d6a:	4b0e      	ldr	r3, [pc, #56]	; (3da4 <system_clock_init+0xcc>)
    3d6c:	4798      	blx	r3
    3d6e:	2000      	movs	r0, #0
    3d70:	4b0d      	ldr	r3, [pc, #52]	; (3da8 <system_clock_init+0xd0>)
    3d72:	4798      	blx	r3
#endif
}
    3d74:	46c0      	nop			; (mov r8, r8)
    3d76:	46bd      	mov	sp, r7
    3d78:	b020      	add	sp, #128	; 0x80
    3d7a:	bd80      	pop	{r7, pc}
    3d7c:	40000800 	.word	0x40000800
    3d80:	00003a2d 	.word	0x00003a2d
    3d84:	00003ca1 	.word	0x00003ca1
    3d88:	00003997 	.word	0x00003997
    3d8c:	00003b7d 	.word	0x00003b7d
    3d90:	00003bf5 	.word	0x00003bf5
    3d94:	00003e51 	.word	0x00003e51
    3d98:	000039b9 	.word	0x000039b9
    3d9c:	000039d9 	.word	0x000039d9
    3da0:	00003969 	.word	0x00003969
    3da4:	00003e81 	.word	0x00003e81
    3da8:	00003fa5 	.word	0x00003fa5

00003dac <system_apb_clock_set_mask>:
{
    3dac:	b580      	push	{r7, lr}
    3dae:	b082      	sub	sp, #8
    3db0:	af00      	add	r7, sp, #0
    3db2:	0002      	movs	r2, r0
    3db4:	6039      	str	r1, [r7, #0]
    3db6:	1dfb      	adds	r3, r7, #7
    3db8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3dba:	1dfb      	adds	r3, r7, #7
    3dbc:	781b      	ldrb	r3, [r3, #0]
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d00a      	beq.n	3dd8 <system_apb_clock_set_mask+0x2c>
    3dc2:	2b02      	cmp	r3, #2
    3dc4:	d00f      	beq.n	3de6 <system_apb_clock_set_mask+0x3a>
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d114      	bne.n	3df4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3dca:	4b0e      	ldr	r3, [pc, #56]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dcc:	4a0d      	ldr	r2, [pc, #52]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dce:	6991      	ldr	r1, [r2, #24]
    3dd0:	683a      	ldr	r2, [r7, #0]
    3dd2:	430a      	orrs	r2, r1
    3dd4:	619a      	str	r2, [r3, #24]
			break;
    3dd6:	e00f      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3dd8:	4b0a      	ldr	r3, [pc, #40]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dda:	4a0a      	ldr	r2, [pc, #40]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3ddc:	69d1      	ldr	r1, [r2, #28]
    3dde:	683a      	ldr	r2, [r7, #0]
    3de0:	430a      	orrs	r2, r1
    3de2:	61da      	str	r2, [r3, #28]
			break;
    3de4:	e008      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3de6:	4b07      	ldr	r3, [pc, #28]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3de8:	4a06      	ldr	r2, [pc, #24]	; (3e04 <system_apb_clock_set_mask+0x58>)
    3dea:	6a11      	ldr	r1, [r2, #32]
    3dec:	683a      	ldr	r2, [r7, #0]
    3dee:	430a      	orrs	r2, r1
    3df0:	621a      	str	r2, [r3, #32]
			break;
    3df2:	e001      	b.n	3df8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3df4:	2317      	movs	r3, #23
    3df6:	e000      	b.n	3dfa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3df8:	2300      	movs	r3, #0
}
    3dfa:	0018      	movs	r0, r3
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b002      	add	sp, #8
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	40000400 	.word	0x40000400

00003e08 <system_interrupt_enter_critical_section>:
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3e0c:	4b02      	ldr	r3, [pc, #8]	; (3e18 <system_interrupt_enter_critical_section+0x10>)
    3e0e:	4798      	blx	r3
}
    3e10:	46c0      	nop			; (mov r8, r8)
    3e12:	46bd      	mov	sp, r7
    3e14:	bd80      	pop	{r7, pc}
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	00001739 	.word	0x00001739

00003e1c <system_interrupt_leave_critical_section>:
{
    3e1c:	b580      	push	{r7, lr}
    3e1e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3e20:	4b02      	ldr	r3, [pc, #8]	; (3e2c <system_interrupt_leave_critical_section+0x10>)
    3e22:	4798      	blx	r3
}
    3e24:	46c0      	nop			; (mov r8, r8)
    3e26:	46bd      	mov	sp, r7
    3e28:	bd80      	pop	{r7, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	0000178d 	.word	0x0000178d

00003e30 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3e30:	b580      	push	{r7, lr}
    3e32:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3e34:	4b05      	ldr	r3, [pc, #20]	; (3e4c <system_gclk_is_syncing+0x1c>)
    3e36:	785b      	ldrb	r3, [r3, #1]
    3e38:	b2db      	uxtb	r3, r3
    3e3a:	b25b      	sxtb	r3, r3
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	da01      	bge.n	3e44 <system_gclk_is_syncing+0x14>
		return true;
    3e40:	2301      	movs	r3, #1
    3e42:	e000      	b.n	3e46 <system_gclk_is_syncing+0x16>
	}

	return false;
    3e44:	2300      	movs	r3, #0
}
    3e46:	0018      	movs	r0, r3
    3e48:	46bd      	mov	sp, r7
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	40000c00 	.word	0x40000c00

00003e50 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3e54:	2108      	movs	r1, #8
    3e56:	2000      	movs	r0, #0
    3e58:	4b07      	ldr	r3, [pc, #28]	; (3e78 <system_gclk_init+0x28>)
    3e5a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3e5c:	4b07      	ldr	r3, [pc, #28]	; (3e7c <system_gclk_init+0x2c>)
    3e5e:	2201      	movs	r2, #1
    3e60:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	4b05      	ldr	r3, [pc, #20]	; (3e7c <system_gclk_init+0x2c>)
    3e66:	781b      	ldrb	r3, [r3, #0]
    3e68:	b2db      	uxtb	r3, r3
    3e6a:	001a      	movs	r2, r3
    3e6c:	2301      	movs	r3, #1
    3e6e:	4013      	ands	r3, r2
    3e70:	d1f8      	bne.n	3e64 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	46bd      	mov	sp, r7
    3e76:	bd80      	pop	{r7, pc}
    3e78:	00003dad 	.word	0x00003dad
    3e7c:	40000c00 	.word	0x40000c00

00003e80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b086      	sub	sp, #24
    3e84:	af00      	add	r7, sp, #0
    3e86:	0002      	movs	r2, r0
    3e88:	6039      	str	r1, [r7, #0]
    3e8a:	1dfb      	adds	r3, r7, #7
    3e8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3e8e:	1dfb      	adds	r3, r7, #7
    3e90:	781b      	ldrb	r3, [r3, #0]
    3e92:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3e94:	1dfb      	adds	r3, r7, #7
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3e9a:	683b      	ldr	r3, [r7, #0]
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	021b      	lsls	r3, r3, #8
    3ea0:	001a      	movs	r2, r3
    3ea2:	697b      	ldr	r3, [r7, #20]
    3ea4:	4313      	orrs	r3, r2
    3ea6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3ea8:	683b      	ldr	r3, [r7, #0]
    3eaa:	785b      	ldrb	r3, [r3, #1]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d004      	beq.n	3eba <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3eb0:	697b      	ldr	r3, [r7, #20]
    3eb2:	2280      	movs	r2, #128	; 0x80
    3eb4:	02d2      	lsls	r2, r2, #11
    3eb6:	4313      	orrs	r3, r2
    3eb8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3eba:	683b      	ldr	r3, [r7, #0]
    3ebc:	7a5b      	ldrb	r3, [r3, #9]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d004      	beq.n	3ecc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3ec2:	697b      	ldr	r3, [r7, #20]
    3ec4:	2280      	movs	r2, #128	; 0x80
    3ec6:	0312      	lsls	r2, r2, #12
    3ec8:	4313      	orrs	r3, r2
    3eca:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3ecc:	683b      	ldr	r3, [r7, #0]
    3ece:	685b      	ldr	r3, [r3, #4]
    3ed0:	2b01      	cmp	r3, #1
    3ed2:	d92c      	bls.n	3f2e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3ed4:	683b      	ldr	r3, [r7, #0]
    3ed6:	685a      	ldr	r2, [r3, #4]
    3ed8:	683b      	ldr	r3, [r7, #0]
    3eda:	685b      	ldr	r3, [r3, #4]
    3edc:	3b01      	subs	r3, #1
    3ede:	4013      	ands	r3, r2
    3ee0:	d11a      	bne.n	3f18 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3ee2:	2300      	movs	r3, #0
    3ee4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3ee6:	2302      	movs	r3, #2
    3ee8:	60bb      	str	r3, [r7, #8]
    3eea:	e005      	b.n	3ef8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	3301      	adds	r3, #1
    3ef0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    3ef2:	68bb      	ldr	r3, [r7, #8]
    3ef4:	005b      	lsls	r3, r3, #1
    3ef6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3ef8:	683b      	ldr	r3, [r7, #0]
    3efa:	685a      	ldr	r2, [r3, #4]
    3efc:	68bb      	ldr	r3, [r7, #8]
    3efe:	429a      	cmp	r2, r3
    3f00:	d8f4      	bhi.n	3eec <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3f02:	68fb      	ldr	r3, [r7, #12]
    3f04:	021b      	lsls	r3, r3, #8
    3f06:	693a      	ldr	r2, [r7, #16]
    3f08:	4313      	orrs	r3, r2
    3f0a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3f0c:	697b      	ldr	r3, [r7, #20]
    3f0e:	2280      	movs	r2, #128	; 0x80
    3f10:	0352      	lsls	r2, r2, #13
    3f12:	4313      	orrs	r3, r2
    3f14:	617b      	str	r3, [r7, #20]
    3f16:	e00a      	b.n	3f2e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3f18:	683b      	ldr	r3, [r7, #0]
    3f1a:	685b      	ldr	r3, [r3, #4]
    3f1c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    3f1e:	693a      	ldr	r2, [r7, #16]
    3f20:	4313      	orrs	r3, r2
    3f22:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3f24:	697b      	ldr	r3, [r7, #20]
    3f26:	2280      	movs	r2, #128	; 0x80
    3f28:	0292      	lsls	r2, r2, #10
    3f2a:	4313      	orrs	r3, r2
    3f2c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3f2e:	683b      	ldr	r3, [r7, #0]
    3f30:	7a1b      	ldrb	r3, [r3, #8]
    3f32:	2b00      	cmp	r3, #0
    3f34:	d004      	beq.n	3f40 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3f36:	697b      	ldr	r3, [r7, #20]
    3f38:	2280      	movs	r2, #128	; 0x80
    3f3a:	0392      	lsls	r2, r2, #14
    3f3c:	4313      	orrs	r3, r2
    3f3e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3f40:	46c0      	nop			; (mov r8, r8)
    3f42:	4b13      	ldr	r3, [pc, #76]	; (3f90 <system_gclk_gen_set_config+0x110>)
    3f44:	4798      	blx	r3
    3f46:	1e03      	subs	r3, r0, #0
    3f48:	d1fb      	bne.n	3f42 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3f4a:	4b12      	ldr	r3, [pc, #72]	; (3f94 <system_gclk_gen_set_config+0x114>)
    3f4c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3f4e:	4a12      	ldr	r2, [pc, #72]	; (3f98 <system_gclk_gen_set_config+0x118>)
    3f50:	1dfb      	adds	r3, r7, #7
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	4b0d      	ldr	r3, [pc, #52]	; (3f90 <system_gclk_gen_set_config+0x110>)
    3f5a:	4798      	blx	r3
    3f5c:	1e03      	subs	r3, r0, #0
    3f5e:	d1fb      	bne.n	3f58 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3f60:	4b0e      	ldr	r3, [pc, #56]	; (3f9c <system_gclk_gen_set_config+0x11c>)
    3f62:	693a      	ldr	r2, [r7, #16]
    3f64:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	4b09      	ldr	r3, [pc, #36]	; (3f90 <system_gclk_gen_set_config+0x110>)
    3f6a:	4798      	blx	r3
    3f6c:	1e03      	subs	r3, r0, #0
    3f6e:	d1fb      	bne.n	3f68 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3f70:	4b0a      	ldr	r3, [pc, #40]	; (3f9c <system_gclk_gen_set_config+0x11c>)
    3f72:	4a0a      	ldr	r2, [pc, #40]	; (3f9c <system_gclk_gen_set_config+0x11c>)
    3f74:	6851      	ldr	r1, [r2, #4]
    3f76:	2280      	movs	r2, #128	; 0x80
    3f78:	0252      	lsls	r2, r2, #9
    3f7a:	4011      	ands	r1, r2
    3f7c:	697a      	ldr	r2, [r7, #20]
    3f7e:	430a      	orrs	r2, r1
    3f80:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3f82:	4b07      	ldr	r3, [pc, #28]	; (3fa0 <system_gclk_gen_set_config+0x120>)
    3f84:	4798      	blx	r3
}
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	46bd      	mov	sp, r7
    3f8a:	b006      	add	sp, #24
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	00003e31 	.word	0x00003e31
    3f94:	00003e09 	.word	0x00003e09
    3f98:	40000c08 	.word	0x40000c08
    3f9c:	40000c00 	.word	0x40000c00
    3fa0:	00003e1d 	.word	0x00003e1d

00003fa4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3fa4:	b580      	push	{r7, lr}
    3fa6:	b082      	sub	sp, #8
    3fa8:	af00      	add	r7, sp, #0
    3faa:	0002      	movs	r2, r0
    3fac:	1dfb      	adds	r3, r7, #7
    3fae:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3fb0:	46c0      	nop			; (mov r8, r8)
    3fb2:	4b0e      	ldr	r3, [pc, #56]	; (3fec <system_gclk_gen_enable+0x48>)
    3fb4:	4798      	blx	r3
    3fb6:	1e03      	subs	r3, r0, #0
    3fb8:	d1fb      	bne.n	3fb2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3fba:	4b0d      	ldr	r3, [pc, #52]	; (3ff0 <system_gclk_gen_enable+0x4c>)
    3fbc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3fbe:	4a0d      	ldr	r2, [pc, #52]	; (3ff4 <system_gclk_gen_enable+0x50>)
    3fc0:	1dfb      	adds	r3, r7, #7
    3fc2:	781b      	ldrb	r3, [r3, #0]
    3fc4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	4b08      	ldr	r3, [pc, #32]	; (3fec <system_gclk_gen_enable+0x48>)
    3fca:	4798      	blx	r3
    3fcc:	1e03      	subs	r3, r0, #0
    3fce:	d1fb      	bne.n	3fc8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3fd0:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <system_gclk_gen_enable+0x54>)
    3fd2:	4a09      	ldr	r2, [pc, #36]	; (3ff8 <system_gclk_gen_enable+0x54>)
    3fd4:	6852      	ldr	r2, [r2, #4]
    3fd6:	2180      	movs	r1, #128	; 0x80
    3fd8:	0249      	lsls	r1, r1, #9
    3fda:	430a      	orrs	r2, r1
    3fdc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3fde:	4b07      	ldr	r3, [pc, #28]	; (3ffc <system_gclk_gen_enable+0x58>)
    3fe0:	4798      	blx	r3
}
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	46bd      	mov	sp, r7
    3fe6:	b002      	add	sp, #8
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	00003e31 	.word	0x00003e31
    3ff0:	00003e09 	.word	0x00003e09
    3ff4:	40000c04 	.word	0x40000c04
    3ff8:	40000c00 	.word	0x40000c00
    3ffc:	00003e1d 	.word	0x00003e1d

00004000 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4000:	b580      	push	{r7, lr}
    4002:	b086      	sub	sp, #24
    4004:	af00      	add	r7, sp, #0
    4006:	0002      	movs	r2, r0
    4008:	1dfb      	adds	r3, r7, #7
    400a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	4b2a      	ldr	r3, [pc, #168]	; (40b8 <system_gclk_gen_get_hz+0xb8>)
    4010:	4798      	blx	r3
    4012:	1e03      	subs	r3, r0, #0
    4014:	d1fb      	bne.n	400e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4016:	4b29      	ldr	r3, [pc, #164]	; (40bc <system_gclk_gen_get_hz+0xbc>)
    4018:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    401a:	4a29      	ldr	r2, [pc, #164]	; (40c0 <system_gclk_gen_get_hz+0xc0>)
    401c:	1dfb      	adds	r3, r7, #7
    401e:	781b      	ldrb	r3, [r3, #0]
    4020:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	4b24      	ldr	r3, [pc, #144]	; (40b8 <system_gclk_gen_get_hz+0xb8>)
    4026:	4798      	blx	r3
    4028:	1e03      	subs	r3, r0, #0
    402a:	d1fb      	bne.n	4024 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    402c:	4b25      	ldr	r3, [pc, #148]	; (40c4 <system_gclk_gen_get_hz+0xc4>)
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	04db      	lsls	r3, r3, #19
    4032:	0edb      	lsrs	r3, r3, #27
    4034:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4036:	0018      	movs	r0, r3
    4038:	4b23      	ldr	r3, [pc, #140]	; (40c8 <system_gclk_gen_get_hz+0xc8>)
    403a:	4798      	blx	r3
    403c:	0003      	movs	r3, r0
    403e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4040:	4a1f      	ldr	r2, [pc, #124]	; (40c0 <system_gclk_gen_get_hz+0xc0>)
    4042:	1dfb      	adds	r3, r7, #7
    4044:	781b      	ldrb	r3, [r3, #0]
    4046:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4048:	4b1e      	ldr	r3, [pc, #120]	; (40c4 <system_gclk_gen_get_hz+0xc4>)
    404a:	685b      	ldr	r3, [r3, #4]
    404c:	02db      	lsls	r3, r3, #11
    404e:	0fdb      	lsrs	r3, r3, #31
    4050:	b2da      	uxtb	r2, r3
    4052:	2313      	movs	r3, #19
    4054:	18fb      	adds	r3, r7, r3
    4056:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4058:	4a1c      	ldr	r2, [pc, #112]	; (40cc <system_gclk_gen_get_hz+0xcc>)
    405a:	1dfb      	adds	r3, r7, #7
    405c:	781b      	ldrb	r3, [r3, #0]
    405e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4060:	46c0      	nop			; (mov r8, r8)
    4062:	4b15      	ldr	r3, [pc, #84]	; (40b8 <system_gclk_gen_get_hz+0xb8>)
    4064:	4798      	blx	r3
    4066:	1e03      	subs	r3, r0, #0
    4068:	d1fb      	bne.n	4062 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    406a:	4b16      	ldr	r3, [pc, #88]	; (40c4 <system_gclk_gen_get_hz+0xc4>)
    406c:	689b      	ldr	r3, [r3, #8]
    406e:	021b      	lsls	r3, r3, #8
    4070:	0c1b      	lsrs	r3, r3, #16
    4072:	b29b      	uxth	r3, r3
    4074:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4076:	4b16      	ldr	r3, [pc, #88]	; (40d0 <system_gclk_gen_get_hz+0xd0>)
    4078:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    407a:	2313      	movs	r3, #19
    407c:	18fb      	adds	r3, r7, r3
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	2b00      	cmp	r3, #0
    4082:	d109      	bne.n	4098 <system_gclk_gen_get_hz+0x98>
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	2b01      	cmp	r3, #1
    4088:	d906      	bls.n	4098 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    408a:	4b12      	ldr	r3, [pc, #72]	; (40d4 <system_gclk_gen_get_hz+0xd4>)
    408c:	68f9      	ldr	r1, [r7, #12]
    408e:	6978      	ldr	r0, [r7, #20]
    4090:	4798      	blx	r3
    4092:	0003      	movs	r3, r0
    4094:	617b      	str	r3, [r7, #20]
    4096:	e00a      	b.n	40ae <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4098:	2313      	movs	r3, #19
    409a:	18fb      	adds	r3, r7, r3
    409c:	781b      	ldrb	r3, [r3, #0]
    409e:	2b00      	cmp	r3, #0
    40a0:	d005      	beq.n	40ae <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	3301      	adds	r3, #1
    40a6:	697a      	ldr	r2, [r7, #20]
    40a8:	40da      	lsrs	r2, r3
    40aa:	0013      	movs	r3, r2
    40ac:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    40ae:	697b      	ldr	r3, [r7, #20]
}
    40b0:	0018      	movs	r0, r3
    40b2:	46bd      	mov	sp, r7
    40b4:	b006      	add	sp, #24
    40b6:	bd80      	pop	{r7, pc}
    40b8:	00003e31 	.word	0x00003e31
    40bc:	00003e09 	.word	0x00003e09
    40c0:	40000c04 	.word	0x40000c04
    40c4:	40000c00 	.word	0x40000c00
    40c8:	00003ac1 	.word	0x00003ac1
    40cc:	40000c08 	.word	0x40000c08
    40d0:	00003e1d 	.word	0x00003e1d
    40d4:	00005171 	.word	0x00005171

000040d8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    40d8:	b580      	push	{r7, lr}
    40da:	b084      	sub	sp, #16
    40dc:	af00      	add	r7, sp, #0
    40de:	0002      	movs	r2, r0
    40e0:	6039      	str	r1, [r7, #0]
    40e2:	1dfb      	adds	r3, r7, #7
    40e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    40e6:	1dfb      	adds	r3, r7, #7
    40e8:	781b      	ldrb	r3, [r3, #0]
    40ea:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    40ec:	683b      	ldr	r3, [r7, #0]
    40ee:	781b      	ldrb	r3, [r3, #0]
    40f0:	021b      	lsls	r3, r3, #8
    40f2:	001a      	movs	r2, r3
    40f4:	68fb      	ldr	r3, [r7, #12]
    40f6:	4313      	orrs	r3, r2
    40f8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	0018      	movs	r0, r3
    4100:	4b04      	ldr	r3, [pc, #16]	; (4114 <system_gclk_chan_set_config+0x3c>)
    4102:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4104:	4b04      	ldr	r3, [pc, #16]	; (4118 <system_gclk_chan_set_config+0x40>)
    4106:	68fa      	ldr	r2, [r7, #12]
    4108:	b292      	uxth	r2, r2
    410a:	805a      	strh	r2, [r3, #2]
}
    410c:	46c0      	nop			; (mov r8, r8)
    410e:	46bd      	mov	sp, r7
    4110:	b004      	add	sp, #16
    4112:	bd80      	pop	{r7, pc}
    4114:	00004165 	.word	0x00004165
    4118:	40000c00 	.word	0x40000c00

0000411c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    411c:	b580      	push	{r7, lr}
    411e:	b082      	sub	sp, #8
    4120:	af00      	add	r7, sp, #0
    4122:	0002      	movs	r2, r0
    4124:	1dfb      	adds	r3, r7, #7
    4126:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4128:	4b0a      	ldr	r3, [pc, #40]	; (4154 <system_gclk_chan_enable+0x38>)
    412a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    412c:	4a0a      	ldr	r2, [pc, #40]	; (4158 <system_gclk_chan_enable+0x3c>)
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4134:	4909      	ldr	r1, [pc, #36]	; (415c <system_gclk_chan_enable+0x40>)
    4136:	4b09      	ldr	r3, [pc, #36]	; (415c <system_gclk_chan_enable+0x40>)
    4138:	885b      	ldrh	r3, [r3, #2]
    413a:	b29b      	uxth	r3, r3
    413c:	2280      	movs	r2, #128	; 0x80
    413e:	01d2      	lsls	r2, r2, #7
    4140:	4313      	orrs	r3, r2
    4142:	b29b      	uxth	r3, r3
    4144:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4146:	4b06      	ldr	r3, [pc, #24]	; (4160 <system_gclk_chan_enable+0x44>)
    4148:	4798      	blx	r3
}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	46bd      	mov	sp, r7
    414e:	b002      	add	sp, #8
    4150:	bd80      	pop	{r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	00003e09 	.word	0x00003e09
    4158:	40000c02 	.word	0x40000c02
    415c:	40000c00 	.word	0x40000c00
    4160:	00003e1d 	.word	0x00003e1d

00004164 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4164:	b580      	push	{r7, lr}
    4166:	b084      	sub	sp, #16
    4168:	af00      	add	r7, sp, #0
    416a:	0002      	movs	r2, r0
    416c:	1dfb      	adds	r3, r7, #7
    416e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4170:	4b1c      	ldr	r3, [pc, #112]	; (41e4 <system_gclk_chan_disable+0x80>)
    4172:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4174:	4a1c      	ldr	r2, [pc, #112]	; (41e8 <system_gclk_chan_disable+0x84>)
    4176:	1dfb      	adds	r3, r7, #7
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    417c:	4b1b      	ldr	r3, [pc, #108]	; (41ec <system_gclk_chan_disable+0x88>)
    417e:	885b      	ldrh	r3, [r3, #2]
    4180:	051b      	lsls	r3, r3, #20
    4182:	0f1b      	lsrs	r3, r3, #28
    4184:	b2db      	uxtb	r3, r3
    4186:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4188:	4a18      	ldr	r2, [pc, #96]	; (41ec <system_gclk_chan_disable+0x88>)
    418a:	8853      	ldrh	r3, [r2, #2]
    418c:	4918      	ldr	r1, [pc, #96]	; (41f0 <system_gclk_chan_disable+0x8c>)
    418e:	400b      	ands	r3, r1
    4190:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4192:	4a16      	ldr	r2, [pc, #88]	; (41ec <system_gclk_chan_disable+0x88>)
    4194:	4b15      	ldr	r3, [pc, #84]	; (41ec <system_gclk_chan_disable+0x88>)
    4196:	885b      	ldrh	r3, [r3, #2]
    4198:	b29b      	uxth	r3, r3
    419a:	4916      	ldr	r1, [pc, #88]	; (41f4 <system_gclk_chan_disable+0x90>)
    419c:	400b      	ands	r3, r1
    419e:	b29b      	uxth	r3, r3
    41a0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	4b11      	ldr	r3, [pc, #68]	; (41ec <system_gclk_chan_disable+0x88>)
    41a6:	885b      	ldrh	r3, [r3, #2]
    41a8:	b29b      	uxth	r3, r3
    41aa:	001a      	movs	r2, r3
    41ac:	2380      	movs	r3, #128	; 0x80
    41ae:	01db      	lsls	r3, r3, #7
    41b0:	4013      	ands	r3, r2
    41b2:	d1f7      	bne.n	41a4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    41b4:	4a0d      	ldr	r2, [pc, #52]	; (41ec <system_gclk_chan_disable+0x88>)
    41b6:	68fb      	ldr	r3, [r7, #12]
    41b8:	b2db      	uxtb	r3, r3
    41ba:	1c19      	adds	r1, r3, #0
    41bc:	230f      	movs	r3, #15
    41be:	400b      	ands	r3, r1
    41c0:	b2d9      	uxtb	r1, r3
    41c2:	8853      	ldrh	r3, [r2, #2]
    41c4:	1c08      	adds	r0, r1, #0
    41c6:	210f      	movs	r1, #15
    41c8:	4001      	ands	r1, r0
    41ca:	0208      	lsls	r0, r1, #8
    41cc:	4908      	ldr	r1, [pc, #32]	; (41f0 <system_gclk_chan_disable+0x8c>)
    41ce:	400b      	ands	r3, r1
    41d0:	1c19      	adds	r1, r3, #0
    41d2:	1c03      	adds	r3, r0, #0
    41d4:	430b      	orrs	r3, r1
    41d6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    41d8:	4b07      	ldr	r3, [pc, #28]	; (41f8 <system_gclk_chan_disable+0x94>)
    41da:	4798      	blx	r3
}
    41dc:	46c0      	nop			; (mov r8, r8)
    41de:	46bd      	mov	sp, r7
    41e0:	b004      	add	sp, #16
    41e2:	bd80      	pop	{r7, pc}
    41e4:	00003e09 	.word	0x00003e09
    41e8:	40000c02 	.word	0x40000c02
    41ec:	40000c00 	.word	0x40000c00
    41f0:	fffff0ff 	.word	0xfffff0ff
    41f4:	ffffbfff 	.word	0xffffbfff
    41f8:	00003e1d 	.word	0x00003e1d

000041fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    41fc:	b580      	push	{r7, lr}
    41fe:	b084      	sub	sp, #16
    4200:	af00      	add	r7, sp, #0
    4202:	0002      	movs	r2, r0
    4204:	1dfb      	adds	r3, r7, #7
    4206:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4208:	4b0d      	ldr	r3, [pc, #52]	; (4240 <system_gclk_chan_get_hz+0x44>)
    420a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    420c:	4a0d      	ldr	r2, [pc, #52]	; (4244 <system_gclk_chan_get_hz+0x48>)
    420e:	1dfb      	adds	r3, r7, #7
    4210:	781b      	ldrb	r3, [r3, #0]
    4212:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4214:	4b0c      	ldr	r3, [pc, #48]	; (4248 <system_gclk_chan_get_hz+0x4c>)
    4216:	885b      	ldrh	r3, [r3, #2]
    4218:	051b      	lsls	r3, r3, #20
    421a:	0f1b      	lsrs	r3, r3, #28
    421c:	b2da      	uxtb	r2, r3
    421e:	230f      	movs	r3, #15
    4220:	18fb      	adds	r3, r7, r3
    4222:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4224:	4b09      	ldr	r3, [pc, #36]	; (424c <system_gclk_chan_get_hz+0x50>)
    4226:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4228:	230f      	movs	r3, #15
    422a:	18fb      	adds	r3, r7, r3
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	0018      	movs	r0, r3
    4230:	4b07      	ldr	r3, [pc, #28]	; (4250 <system_gclk_chan_get_hz+0x54>)
    4232:	4798      	blx	r3
    4234:	0003      	movs	r3, r0
}
    4236:	0018      	movs	r0, r3
    4238:	46bd      	mov	sp, r7
    423a:	b004      	add	sp, #16
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	00003e09 	.word	0x00003e09
    4244:	40000c02 	.word	0x40000c02
    4248:	40000c00 	.word	0x40000c00
    424c:	00003e1d 	.word	0x00003e1d
    4250:	00004001 	.word	0x00004001

00004254 <system_pinmux_get_group_from_gpio_pin>:
{
    4254:	b580      	push	{r7, lr}
    4256:	b084      	sub	sp, #16
    4258:	af00      	add	r7, sp, #0
    425a:	0002      	movs	r2, r0
    425c:	1dfb      	adds	r3, r7, #7
    425e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4260:	230f      	movs	r3, #15
    4262:	18fb      	adds	r3, r7, r3
    4264:	1dfa      	adds	r2, r7, #7
    4266:	7812      	ldrb	r2, [r2, #0]
    4268:	09d2      	lsrs	r2, r2, #7
    426a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    426c:	230e      	movs	r3, #14
    426e:	18fb      	adds	r3, r7, r3
    4270:	1dfa      	adds	r2, r7, #7
    4272:	7812      	ldrb	r2, [r2, #0]
    4274:	0952      	lsrs	r2, r2, #5
    4276:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4278:	4b0d      	ldr	r3, [pc, #52]	; (42b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    427a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    427c:	230f      	movs	r3, #15
    427e:	18fb      	adds	r3, r7, r3
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d10f      	bne.n	42a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4286:	230f      	movs	r3, #15
    4288:	18fb      	adds	r3, r7, r3
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	009b      	lsls	r3, r3, #2
    428e:	2210      	movs	r2, #16
    4290:	4694      	mov	ip, r2
    4292:	44bc      	add	ip, r7
    4294:	4463      	add	r3, ip
    4296:	3b08      	subs	r3, #8
    4298:	681a      	ldr	r2, [r3, #0]
    429a:	230e      	movs	r3, #14
    429c:	18fb      	adds	r3, r7, r3
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	01db      	lsls	r3, r3, #7
    42a2:	18d3      	adds	r3, r2, r3
    42a4:	e000      	b.n	42a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    42a6:	2300      	movs	r3, #0
}
    42a8:	0018      	movs	r0, r3
    42aa:	46bd      	mov	sp, r7
    42ac:	b004      	add	sp, #16
    42ae:	bd80      	pop	{r7, pc}
    42b0:	41004400 	.word	0x41004400

000042b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b088      	sub	sp, #32
    42b8:	af00      	add	r7, sp, #0
    42ba:	60f8      	str	r0, [r7, #12]
    42bc:	60b9      	str	r1, [r7, #8]
    42be:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    42c0:	2300      	movs	r3, #0
    42c2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	78db      	ldrb	r3, [r3, #3]
    42c8:	2201      	movs	r2, #1
    42ca:	4053      	eors	r3, r2
    42cc:	b2db      	uxtb	r3, r3
    42ce:	2b00      	cmp	r3, #0
    42d0:	d035      	beq.n	433e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	2b80      	cmp	r3, #128	; 0x80
    42d8:	d00b      	beq.n	42f2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    42da:	69fb      	ldr	r3, [r7, #28]
    42dc:	2280      	movs	r2, #128	; 0x80
    42de:	0252      	lsls	r2, r2, #9
    42e0:	4313      	orrs	r3, r2
    42e2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    42e4:	687b      	ldr	r3, [r7, #4]
    42e6:	781b      	ldrb	r3, [r3, #0]
    42e8:	061b      	lsls	r3, r3, #24
    42ea:	001a      	movs	r2, r3
    42ec:	69fb      	ldr	r3, [r7, #28]
    42ee:	4313      	orrs	r3, r2
    42f0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	785b      	ldrb	r3, [r3, #1]
    42f6:	2b00      	cmp	r3, #0
    42f8:	d003      	beq.n	4302 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    42fe:	2b02      	cmp	r3, #2
    4300:	d110      	bne.n	4324 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4302:	69fb      	ldr	r3, [r7, #28]
    4304:	2280      	movs	r2, #128	; 0x80
    4306:	0292      	lsls	r2, r2, #10
    4308:	4313      	orrs	r3, r2
    430a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	789b      	ldrb	r3, [r3, #2]
    4310:	2b00      	cmp	r3, #0
    4312:	d004      	beq.n	431e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4314:	69fb      	ldr	r3, [r7, #28]
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	02d2      	lsls	r2, r2, #11
    431a:	4313      	orrs	r3, r2
    431c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    431e:	68fb      	ldr	r3, [r7, #12]
    4320:	68ba      	ldr	r2, [r7, #8]
    4322:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	785b      	ldrb	r3, [r3, #1]
    4328:	2b01      	cmp	r3, #1
    432a:	d003      	beq.n	4334 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4330:	2b02      	cmp	r3, #2
    4332:	d107      	bne.n	4344 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4334:	69fb      	ldr	r3, [r7, #28]
    4336:	4a22      	ldr	r2, [pc, #136]	; (43c0 <_system_pinmux_config+0x10c>)
    4338:	4013      	ands	r3, r2
    433a:	61fb      	str	r3, [r7, #28]
    433c:	e002      	b.n	4344 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    433e:	68fb      	ldr	r3, [r7, #12]
    4340:	68ba      	ldr	r2, [r7, #8]
    4342:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4344:	68bb      	ldr	r3, [r7, #8]
    4346:	041b      	lsls	r3, r3, #16
    4348:	0c1b      	lsrs	r3, r3, #16
    434a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    434c:	68bb      	ldr	r3, [r7, #8]
    434e:	0c1b      	lsrs	r3, r3, #16
    4350:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4352:	69ba      	ldr	r2, [r7, #24]
    4354:	69fb      	ldr	r3, [r7, #28]
    4356:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4358:	22a0      	movs	r2, #160	; 0xa0
    435a:	05d2      	lsls	r2, r2, #23
    435c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4362:	697a      	ldr	r2, [r7, #20]
    4364:	69fb      	ldr	r3, [r7, #28]
    4366:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4368:	22d0      	movs	r2, #208	; 0xd0
    436a:	0612      	lsls	r2, r2, #24
    436c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    436e:	68fb      	ldr	r3, [r7, #12]
    4370:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	78db      	ldrb	r3, [r3, #3]
    4376:	2201      	movs	r2, #1
    4378:	4053      	eors	r3, r2
    437a:	b2db      	uxtb	r3, r3
    437c:	2b00      	cmp	r3, #0
    437e:	d01a      	beq.n	43b6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4380:	69fa      	ldr	r2, [r7, #28]
    4382:	2380      	movs	r3, #128	; 0x80
    4384:	02db      	lsls	r3, r3, #11
    4386:	4013      	ands	r3, r2
    4388:	d00a      	beq.n	43a0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	789b      	ldrb	r3, [r3, #2]
    438e:	2b01      	cmp	r3, #1
    4390:	d103      	bne.n	439a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	68ba      	ldr	r2, [r7, #8]
    4396:	619a      	str	r2, [r3, #24]
    4398:	e002      	b.n	43a0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	68ba      	ldr	r2, [r7, #8]
    439e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	785b      	ldrb	r3, [r3, #1]
    43a4:	2b01      	cmp	r3, #1
    43a6:	d003      	beq.n	43b0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    43ac:	2b02      	cmp	r3, #2
    43ae:	d102      	bne.n	43b6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	68ba      	ldr	r2, [r7, #8]
    43b4:	609a      	str	r2, [r3, #8]
		}
	}
}
    43b6:	46c0      	nop			; (mov r8, r8)
    43b8:	46bd      	mov	sp, r7
    43ba:	b008      	add	sp, #32
    43bc:	bd80      	pop	{r7, pc}
    43be:	46c0      	nop			; (mov r8, r8)
    43c0:	fffbffff 	.word	0xfffbffff

000043c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b084      	sub	sp, #16
    43c8:	af00      	add	r7, sp, #0
    43ca:	0002      	movs	r2, r0
    43cc:	6039      	str	r1, [r7, #0]
    43ce:	1dfb      	adds	r3, r7, #7
    43d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    43d2:	1dfb      	adds	r3, r7, #7
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	0018      	movs	r0, r3
    43d8:	4b0a      	ldr	r3, [pc, #40]	; (4404 <system_pinmux_pin_set_config+0x40>)
    43da:	4798      	blx	r3
    43dc:	0003      	movs	r3, r0
    43de:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    43e0:	1dfb      	adds	r3, r7, #7
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	221f      	movs	r2, #31
    43e6:	4013      	ands	r3, r2
    43e8:	2201      	movs	r2, #1
    43ea:	409a      	lsls	r2, r3
    43ec:	0013      	movs	r3, r2
    43ee:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    43f0:	683a      	ldr	r2, [r7, #0]
    43f2:	68b9      	ldr	r1, [r7, #8]
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	0018      	movs	r0, r3
    43f8:	4b03      	ldr	r3, [pc, #12]	; (4408 <system_pinmux_pin_set_config+0x44>)
    43fa:	4798      	blx	r3
}
    43fc:	46c0      	nop			; (mov r8, r8)
    43fe:	46bd      	mov	sp, r7
    4400:	b004      	add	sp, #16
    4402:	bd80      	pop	{r7, pc}
    4404:	00004255 	.word	0x00004255
    4408:	000042b5 	.word	0x000042b5

0000440c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    440c:	b580      	push	{r7, lr}
    440e:	af00      	add	r7, sp, #0
	return;
    4410:	46c0      	nop			; (mov r8, r8)
}
    4412:	46bd      	mov	sp, r7
    4414:	bd80      	pop	{r7, pc}
	...

00004418 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4418:	b580      	push	{r7, lr}
    441a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    441c:	4b06      	ldr	r3, [pc, #24]	; (4438 <system_init+0x20>)
    441e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4420:	4b06      	ldr	r3, [pc, #24]	; (443c <system_init+0x24>)
    4422:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4424:	4b06      	ldr	r3, [pc, #24]	; (4440 <system_init+0x28>)
    4426:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4428:	4b06      	ldr	r3, [pc, #24]	; (4444 <system_init+0x2c>)
    442a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    442c:	4b06      	ldr	r3, [pc, #24]	; (4448 <system_init+0x30>)
    442e:	4798      	blx	r3
}
    4430:	46c0      	nop			; (mov r8, r8)
    4432:	46bd      	mov	sp, r7
    4434:	bd80      	pop	{r7, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	00003cd9 	.word	0x00003cd9
    443c:	0000172d 	.word	0x0000172d
    4440:	0000440d 	.word	0x0000440d
    4444:	0000440d 	.word	0x0000440d
    4448:	0000440d 	.word	0x0000440d

0000444c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    444c:	b580      	push	{r7, lr}
    444e:	b082      	sub	sp, #8
    4450:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4452:	4b2f      	ldr	r3, [pc, #188]	; (4510 <Reset_Handler+0xc4>)
    4454:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4456:	4b2f      	ldr	r3, [pc, #188]	; (4514 <Reset_Handler+0xc8>)
    4458:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    445a:	687a      	ldr	r2, [r7, #4]
    445c:	683b      	ldr	r3, [r7, #0]
    445e:	429a      	cmp	r2, r3
    4460:	d00c      	beq.n	447c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4462:	e007      	b.n	4474 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4464:	683b      	ldr	r3, [r7, #0]
    4466:	1d1a      	adds	r2, r3, #4
    4468:	603a      	str	r2, [r7, #0]
    446a:	687a      	ldr	r2, [r7, #4]
    446c:	1d11      	adds	r1, r2, #4
    446e:	6079      	str	r1, [r7, #4]
    4470:	6812      	ldr	r2, [r2, #0]
    4472:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4474:	683a      	ldr	r2, [r7, #0]
    4476:	4b28      	ldr	r3, [pc, #160]	; (4518 <Reset_Handler+0xcc>)
    4478:	429a      	cmp	r2, r3
    447a:	d3f3      	bcc.n	4464 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    447c:	4b27      	ldr	r3, [pc, #156]	; (451c <Reset_Handler+0xd0>)
    447e:	603b      	str	r3, [r7, #0]
    4480:	e004      	b.n	448c <Reset_Handler+0x40>
                *pDest++ = 0;
    4482:	683b      	ldr	r3, [r7, #0]
    4484:	1d1a      	adds	r2, r3, #4
    4486:	603a      	str	r2, [r7, #0]
    4488:	2200      	movs	r2, #0
    448a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    448c:	683a      	ldr	r2, [r7, #0]
    448e:	4b24      	ldr	r3, [pc, #144]	; (4520 <Reset_Handler+0xd4>)
    4490:	429a      	cmp	r2, r3
    4492:	d3f6      	bcc.n	4482 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4494:	4b23      	ldr	r3, [pc, #140]	; (4524 <Reset_Handler+0xd8>)
    4496:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4498:	4b23      	ldr	r3, [pc, #140]	; (4528 <Reset_Handler+0xdc>)
    449a:	687a      	ldr	r2, [r7, #4]
    449c:	21ff      	movs	r1, #255	; 0xff
    449e:	438a      	bics	r2, r1
    44a0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    44a2:	4a22      	ldr	r2, [pc, #136]	; (452c <Reset_Handler+0xe0>)
    44a4:	2390      	movs	r3, #144	; 0x90
    44a6:	005b      	lsls	r3, r3, #1
    44a8:	2102      	movs	r1, #2
    44aa:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    44ac:	4a20      	ldr	r2, [pc, #128]	; (4530 <Reset_Handler+0xe4>)
    44ae:	78d3      	ldrb	r3, [r2, #3]
    44b0:	2103      	movs	r1, #3
    44b2:	438b      	bics	r3, r1
    44b4:	1c19      	adds	r1, r3, #0
    44b6:	2302      	movs	r3, #2
    44b8:	430b      	orrs	r3, r1
    44ba:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    44bc:	4a1c      	ldr	r2, [pc, #112]	; (4530 <Reset_Handler+0xe4>)
    44be:	78d3      	ldrb	r3, [r2, #3]
    44c0:	210c      	movs	r1, #12
    44c2:	438b      	bics	r3, r1
    44c4:	1c19      	adds	r1, r3, #0
    44c6:	2308      	movs	r3, #8
    44c8:	430b      	orrs	r3, r1
    44ca:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    44cc:	4a19      	ldr	r2, [pc, #100]	; (4534 <Reset_Handler+0xe8>)
    44ce:	7b93      	ldrb	r3, [r2, #14]
    44d0:	2130      	movs	r1, #48	; 0x30
    44d2:	438b      	bics	r3, r1
    44d4:	1c19      	adds	r1, r3, #0
    44d6:	2320      	movs	r3, #32
    44d8:	430b      	orrs	r3, r1
    44da:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    44dc:	4a15      	ldr	r2, [pc, #84]	; (4534 <Reset_Handler+0xe8>)
    44de:	7b93      	ldrb	r3, [r2, #14]
    44e0:	210c      	movs	r1, #12
    44e2:	438b      	bics	r3, r1
    44e4:	1c19      	adds	r1, r3, #0
    44e6:	2308      	movs	r3, #8
    44e8:	430b      	orrs	r3, r1
    44ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    44ec:	4a11      	ldr	r2, [pc, #68]	; (4534 <Reset_Handler+0xe8>)
    44ee:	7b93      	ldrb	r3, [r2, #14]
    44f0:	2103      	movs	r1, #3
    44f2:	438b      	bics	r3, r1
    44f4:	1c19      	adds	r1, r3, #0
    44f6:	2302      	movs	r3, #2
    44f8:	430b      	orrs	r3, r1
    44fa:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    44fc:	4a0e      	ldr	r2, [pc, #56]	; (4538 <Reset_Handler+0xec>)
    44fe:	6853      	ldr	r3, [r2, #4]
    4500:	2180      	movs	r1, #128	; 0x80
    4502:	430b      	orrs	r3, r1
    4504:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4506:	4b0d      	ldr	r3, [pc, #52]	; (453c <Reset_Handler+0xf0>)
    4508:	4798      	blx	r3

        /* Branch to main function */
        main();
    450a:	4b0d      	ldr	r3, [pc, #52]	; (4540 <Reset_Handler+0xf4>)
    450c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    450e:	e7fe      	b.n	450e <Reset_Handler+0xc2>
    4510:	00006778 	.word	0x00006778
    4514:	20000000 	.word	0x20000000
    4518:	20000068 	.word	0x20000068
    451c:	20000068 	.word	0x20000068
    4520:	20000578 	.word	0x20000578
    4524:	00000000 	.word	0x00000000
    4528:	e000ed00 	.word	0xe000ed00
    452c:	41007000 	.word	0x41007000
    4530:	41005000 	.word	0x41005000
    4534:	41004800 	.word	0x41004800
    4538:	41004000 	.word	0x41004000
    453c:	00005309 	.word	0x00005309
    4540:	00004dd1 	.word	0x00004dd1

00004544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4544:	b580      	push	{r7, lr}
    4546:	af00      	add	r7, sp, #0
        while (1) {
    4548:	e7fe      	b.n	4548 <Dummy_Handler+0x4>
	...

0000454c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    454c:	b580      	push	{r7, lr}
    454e:	b086      	sub	sp, #24
    4550:	af00      	add	r7, sp, #0
    4552:	60f8      	str	r0, [r7, #12]
    4554:	60b9      	str	r1, [r7, #8]
    4556:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4558:	2300      	movs	r3, #0
    455a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    455c:	68fb      	ldr	r3, [r7, #12]
    455e:	2b00      	cmp	r3, #0
    4560:	d012      	beq.n	4588 <_read+0x3c>
		return -1;
    4562:	2301      	movs	r3, #1
    4564:	425b      	negs	r3, r3
    4566:	e013      	b.n	4590 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    4568:	4b0b      	ldr	r3, [pc, #44]	; (4598 <_read+0x4c>)
    456a:	681a      	ldr	r2, [r3, #0]
    456c:	4b0b      	ldr	r3, [pc, #44]	; (459c <_read+0x50>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	68b9      	ldr	r1, [r7, #8]
    4572:	0018      	movs	r0, r3
    4574:	4790      	blx	r2
		ptr++;
    4576:	68bb      	ldr	r3, [r7, #8]
    4578:	3301      	adds	r3, #1
    457a:	60bb      	str	r3, [r7, #8]
		nChars++;
    457c:	697b      	ldr	r3, [r7, #20]
    457e:	3301      	adds	r3, #1
    4580:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	3b01      	subs	r3, #1
    4586:	607b      	str	r3, [r7, #4]
    4588:	687b      	ldr	r3, [r7, #4]
    458a:	2b00      	cmp	r3, #0
    458c:	dcec      	bgt.n	4568 <_read+0x1c>
	}
	return nChars;
    458e:	697b      	ldr	r3, [r7, #20]
}
    4590:	0018      	movs	r0, r3
    4592:	46bd      	mov	sp, r7
    4594:	b006      	add	sp, #24
    4596:	bd80      	pop	{r7, pc}
    4598:	20000524 	.word	0x20000524
    459c:	2000052c 	.word	0x2000052c

000045a0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    45a0:	b580      	push	{r7, lr}
    45a2:	b086      	sub	sp, #24
    45a4:	af00      	add	r7, sp, #0
    45a6:	60f8      	str	r0, [r7, #12]
    45a8:	60b9      	str	r1, [r7, #8]
    45aa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    45ac:	2300      	movs	r3, #0
    45ae:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    45b0:	68fb      	ldr	r3, [r7, #12]
    45b2:	2b01      	cmp	r3, #1
    45b4:	d01d      	beq.n	45f2 <_write+0x52>
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	2b02      	cmp	r3, #2
    45ba:	d01a      	beq.n	45f2 <_write+0x52>
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	2b03      	cmp	r3, #3
    45c0:	d017      	beq.n	45f2 <_write+0x52>
		return -1;
    45c2:	2301      	movs	r3, #1
    45c4:	425b      	negs	r3, r3
    45c6:	e018      	b.n	45fa <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    45c8:	4b0e      	ldr	r3, [pc, #56]	; (4604 <_write+0x64>)
    45ca:	681a      	ldr	r2, [r3, #0]
    45cc:	4b0e      	ldr	r3, [pc, #56]	; (4608 <_write+0x68>)
    45ce:	6818      	ldr	r0, [r3, #0]
    45d0:	68bb      	ldr	r3, [r7, #8]
    45d2:	1c59      	adds	r1, r3, #1
    45d4:	60b9      	str	r1, [r7, #8]
    45d6:	781b      	ldrb	r3, [r3, #0]
    45d8:	0019      	movs	r1, r3
    45da:	4790      	blx	r2
    45dc:	1e03      	subs	r3, r0, #0
    45de:	da02      	bge.n	45e6 <_write+0x46>
			return -1;
    45e0:	2301      	movs	r3, #1
    45e2:	425b      	negs	r3, r3
    45e4:	e009      	b.n	45fa <_write+0x5a>
		}
		++nChars;
    45e6:	697b      	ldr	r3, [r7, #20]
    45e8:	3301      	adds	r3, #1
    45ea:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	3b01      	subs	r3, #1
    45f0:	607b      	str	r3, [r7, #4]
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d1e7      	bne.n	45c8 <_write+0x28>
	}
	return nChars;
    45f8:	697b      	ldr	r3, [r7, #20]
}
    45fa:	0018      	movs	r0, r3
    45fc:	46bd      	mov	sp, r7
    45fe:	b006      	add	sp, #24
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	20000528 	.word	0x20000528
    4608:	2000052c 	.word	0x2000052c

0000460c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    460c:	b580      	push	{r7, lr}
    460e:	b084      	sub	sp, #16
    4610:	af00      	add	r7, sp, #0
    4612:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4614:	4b0a      	ldr	r3, [pc, #40]	; (4640 <_sbrk+0x34>)
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	2b00      	cmp	r3, #0
    461a:	d102      	bne.n	4622 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    461c:	4b08      	ldr	r3, [pc, #32]	; (4640 <_sbrk+0x34>)
    461e:	4a09      	ldr	r2, [pc, #36]	; (4644 <_sbrk+0x38>)
    4620:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4622:	4b07      	ldr	r3, [pc, #28]	; (4640 <_sbrk+0x34>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4628:	4b05      	ldr	r3, [pc, #20]	; (4640 <_sbrk+0x34>)
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	18d2      	adds	r2, r2, r3
    4630:	4b03      	ldr	r3, [pc, #12]	; (4640 <_sbrk+0x34>)
    4632:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4634:	68fb      	ldr	r3, [r7, #12]
}
    4636:	0018      	movs	r0, r3
    4638:	46bd      	mov	sp, r7
    463a:	b004      	add	sp, #16
    463c:	bd80      	pop	{r7, pc}
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	200000c8 	.word	0x200000c8
    4644:	20002578 	.word	0x20002578

00004648 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4648:	b580      	push	{r7, lr}
    464a:	b082      	sub	sp, #8
    464c:	af00      	add	r7, sp, #0
    464e:	6078      	str	r0, [r7, #4]
	return -1;
    4650:	2301      	movs	r3, #1
    4652:	425b      	negs	r3, r3
}
    4654:	0018      	movs	r0, r3
    4656:	46bd      	mov	sp, r7
    4658:	b002      	add	sp, #8
    465a:	bd80      	pop	{r7, pc}

0000465c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    465c:	b580      	push	{r7, lr}
    465e:	b082      	sub	sp, #8
    4660:	af00      	add	r7, sp, #0
    4662:	6078      	str	r0, [r7, #4]
    4664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    4666:	683b      	ldr	r3, [r7, #0]
    4668:	2280      	movs	r2, #128	; 0x80
    466a:	0192      	lsls	r2, r2, #6
    466c:	605a      	str	r2, [r3, #4]

	return 0;
    466e:	2300      	movs	r3, #0
}
    4670:	0018      	movs	r0, r3
    4672:	46bd      	mov	sp, r7
    4674:	b002      	add	sp, #8
    4676:	bd80      	pop	{r7, pc}

00004678 <_isatty>:

extern int _isatty(int file)
{
    4678:	b580      	push	{r7, lr}
    467a:	b082      	sub	sp, #8
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
	return 1;
    4680:	2301      	movs	r3, #1
}
    4682:	0018      	movs	r0, r3
    4684:	46bd      	mov	sp, r7
    4686:	b002      	add	sp, #8
    4688:	bd80      	pop	{r7, pc}

0000468a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    468a:	b580      	push	{r7, lr}
    468c:	b084      	sub	sp, #16
    468e:	af00      	add	r7, sp, #0
    4690:	60f8      	str	r0, [r7, #12]
    4692:	60b9      	str	r1, [r7, #8]
    4694:	607a      	str	r2, [r7, #4]
	return 0;
    4696:	2300      	movs	r3, #0
}
    4698:	0018      	movs	r0, r3
    469a:	46bd      	mov	sp, r7
    469c:	b004      	add	sp, #16
    469e:	bd80      	pop	{r7, pc}

000046a0 <_exit>:

extern void _exit(int status)
{
    46a0:	b580      	push	{r7, lr}
    46a2:	b082      	sub	sp, #8
    46a4:	af00      	add	r7, sp, #0
    46a6:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    46a8:	be00      	bkpt	0x0000
	for (;;);
    46aa:	e7fe      	b.n	46aa <_exit+0xa>

000046ac <system_apb_clock_set_mask>:
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
    46b2:	0002      	movs	r2, r0
    46b4:	6039      	str	r1, [r7, #0]
    46b6:	1dfb      	adds	r3, r7, #7
    46b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    46ba:	1dfb      	adds	r3, r7, #7
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	2b01      	cmp	r3, #1
    46c0:	d00a      	beq.n	46d8 <system_apb_clock_set_mask+0x2c>
    46c2:	2b02      	cmp	r3, #2
    46c4:	d00f      	beq.n	46e6 <system_apb_clock_set_mask+0x3a>
    46c6:	2b00      	cmp	r3, #0
    46c8:	d114      	bne.n	46f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    46ca:	4b0e      	ldr	r3, [pc, #56]	; (4704 <system_apb_clock_set_mask+0x58>)
    46cc:	4a0d      	ldr	r2, [pc, #52]	; (4704 <system_apb_clock_set_mask+0x58>)
    46ce:	6991      	ldr	r1, [r2, #24]
    46d0:	683a      	ldr	r2, [r7, #0]
    46d2:	430a      	orrs	r2, r1
    46d4:	619a      	str	r2, [r3, #24]
			break;
    46d6:	e00f      	b.n	46f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    46d8:	4b0a      	ldr	r3, [pc, #40]	; (4704 <system_apb_clock_set_mask+0x58>)
    46da:	4a0a      	ldr	r2, [pc, #40]	; (4704 <system_apb_clock_set_mask+0x58>)
    46dc:	69d1      	ldr	r1, [r2, #28]
    46de:	683a      	ldr	r2, [r7, #0]
    46e0:	430a      	orrs	r2, r1
    46e2:	61da      	str	r2, [r3, #28]
			break;
    46e4:	e008      	b.n	46f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    46e6:	4b07      	ldr	r3, [pc, #28]	; (4704 <system_apb_clock_set_mask+0x58>)
    46e8:	4a06      	ldr	r2, [pc, #24]	; (4704 <system_apb_clock_set_mask+0x58>)
    46ea:	6a11      	ldr	r1, [r2, #32]
    46ec:	683a      	ldr	r2, [r7, #0]
    46ee:	430a      	orrs	r2, r1
    46f0:	621a      	str	r2, [r3, #32]
			break;
    46f2:	e001      	b.n	46f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    46f4:	2317      	movs	r3, #23
    46f6:	e000      	b.n	46fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    46f8:	2300      	movs	r3, #0
}
    46fa:	0018      	movs	r0, r3
    46fc:	46bd      	mov	sp, r7
    46fe:	b002      	add	sp, #8
    4700:	bd80      	pop	{r7, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	40000400 	.word	0x40000400

00004708 <system_pinmux_get_group_from_gpio_pin>:
{
    4708:	b580      	push	{r7, lr}
    470a:	b084      	sub	sp, #16
    470c:	af00      	add	r7, sp, #0
    470e:	0002      	movs	r2, r0
    4710:	1dfb      	adds	r3, r7, #7
    4712:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4714:	230f      	movs	r3, #15
    4716:	18fb      	adds	r3, r7, r3
    4718:	1dfa      	adds	r2, r7, #7
    471a:	7812      	ldrb	r2, [r2, #0]
    471c:	09d2      	lsrs	r2, r2, #7
    471e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4720:	230e      	movs	r3, #14
    4722:	18fb      	adds	r3, r7, r3
    4724:	1dfa      	adds	r2, r7, #7
    4726:	7812      	ldrb	r2, [r2, #0]
    4728:	0952      	lsrs	r2, r2, #5
    472a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    472c:	4b0d      	ldr	r3, [pc, #52]	; (4764 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    472e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4730:	230f      	movs	r3, #15
    4732:	18fb      	adds	r3, r7, r3
    4734:	781b      	ldrb	r3, [r3, #0]
    4736:	2b00      	cmp	r3, #0
    4738:	d10f      	bne.n	475a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    473a:	230f      	movs	r3, #15
    473c:	18fb      	adds	r3, r7, r3
    473e:	781b      	ldrb	r3, [r3, #0]
    4740:	009b      	lsls	r3, r3, #2
    4742:	2210      	movs	r2, #16
    4744:	4694      	mov	ip, r2
    4746:	44bc      	add	ip, r7
    4748:	4463      	add	r3, ip
    474a:	3b08      	subs	r3, #8
    474c:	681a      	ldr	r2, [r3, #0]
    474e:	230e      	movs	r3, #14
    4750:	18fb      	adds	r3, r7, r3
    4752:	781b      	ldrb	r3, [r3, #0]
    4754:	01db      	lsls	r3, r3, #7
    4756:	18d3      	adds	r3, r2, r3
    4758:	e000      	b.n	475c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    475a:	2300      	movs	r3, #0
}
    475c:	0018      	movs	r0, r3
    475e:	46bd      	mov	sp, r7
    4760:	b004      	add	sp, #16
    4762:	bd80      	pop	{r7, pc}
    4764:	41004400 	.word	0x41004400

00004768 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    4768:	b580      	push	{r7, lr}
    476a:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    476c:	2102      	movs	r1, #2
    476e:	2001      	movs	r0, #1
    4770:	4b02      	ldr	r3, [pc, #8]	; (477c <dsu_crc32_init+0x14>)
    4772:	4798      	blx	r3
#endif

}
    4774:	46c0      	nop			; (mov r8, r8)
    4776:	46bd      	mov	sp, r7
    4778:	bd80      	pop	{r7, pc}
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	000046ad 	.word	0x000046ad

00004780 <port_get_group_from_gpio_pin>:
{
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	0002      	movs	r2, r0
    4788:	1dfb      	adds	r3, r7, #7
    478a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    478c:	1dfb      	adds	r3, r7, #7
    478e:	781b      	ldrb	r3, [r3, #0]
    4790:	0018      	movs	r0, r3
    4792:	4b03      	ldr	r3, [pc, #12]	; (47a0 <port_get_group_from_gpio_pin+0x20>)
    4794:	4798      	blx	r3
    4796:	0003      	movs	r3, r0
}
    4798:	0018      	movs	r0, r3
    479a:	46bd      	mov	sp, r7
    479c:	b002      	add	sp, #8
    479e:	bd80      	pop	{r7, pc}
    47a0:	00004709 	.word	0x00004709

000047a4 <port_get_config_defaults>:
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b082      	sub	sp, #8
    47a8:	af00      	add	r7, sp, #0
    47aa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	2200      	movs	r2, #0
    47b0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	2201      	movs	r2, #1
    47b6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	2200      	movs	r2, #0
    47bc:	709a      	strb	r2, [r3, #2]
}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	46bd      	mov	sp, r7
    47c2:	b002      	add	sp, #8
    47c4:	bd80      	pop	{r7, pc}
	...

000047c8 <port_pin_get_input_level>:
{
    47c8:	b580      	push	{r7, lr}
    47ca:	b084      	sub	sp, #16
    47cc:	af00      	add	r7, sp, #0
    47ce:	0002      	movs	r2, r0
    47d0:	1dfb      	adds	r3, r7, #7
    47d2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    47d4:	1dfb      	adds	r3, r7, #7
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	0018      	movs	r0, r3
    47da:	4b0b      	ldr	r3, [pc, #44]	; (4808 <port_pin_get_input_level+0x40>)
    47dc:	4798      	blx	r3
    47de:	0003      	movs	r3, r0
    47e0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47e2:	1dfb      	adds	r3, r7, #7
    47e4:	781b      	ldrb	r3, [r3, #0]
    47e6:	221f      	movs	r2, #31
    47e8:	4013      	ands	r3, r2
    47ea:	2201      	movs	r2, #1
    47ec:	409a      	lsls	r2, r3
    47ee:	0013      	movs	r3, r2
    47f0:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    47f2:	68fb      	ldr	r3, [r7, #12]
    47f4:	6a1b      	ldr	r3, [r3, #32]
    47f6:	68ba      	ldr	r2, [r7, #8]
    47f8:	4013      	ands	r3, r2
    47fa:	1e5a      	subs	r2, r3, #1
    47fc:	4193      	sbcs	r3, r2
    47fe:	b2db      	uxtb	r3, r3
}
    4800:	0018      	movs	r0, r3
    4802:	46bd      	mov	sp, r7
    4804:	b004      	add	sp, #16
    4806:	bd80      	pop	{r7, pc}
    4808:	00004781 	.word	0x00004781

0000480c <port_pin_set_output_level>:
{
    480c:	b580      	push	{r7, lr}
    480e:	b084      	sub	sp, #16
    4810:	af00      	add	r7, sp, #0
    4812:	0002      	movs	r2, r0
    4814:	1dfb      	adds	r3, r7, #7
    4816:	701a      	strb	r2, [r3, #0]
    4818:	1dbb      	adds	r3, r7, #6
    481a:	1c0a      	adds	r2, r1, #0
    481c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    481e:	1dfb      	adds	r3, r7, #7
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	0018      	movs	r0, r3
    4824:	4b0d      	ldr	r3, [pc, #52]	; (485c <port_pin_set_output_level+0x50>)
    4826:	4798      	blx	r3
    4828:	0003      	movs	r3, r0
    482a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    482c:	1dfb      	adds	r3, r7, #7
    482e:	781b      	ldrb	r3, [r3, #0]
    4830:	221f      	movs	r2, #31
    4832:	4013      	ands	r3, r2
    4834:	2201      	movs	r2, #1
    4836:	409a      	lsls	r2, r3
    4838:	0013      	movs	r3, r2
    483a:	60bb      	str	r3, [r7, #8]
	if (level) {
    483c:	1dbb      	adds	r3, r7, #6
    483e:	781b      	ldrb	r3, [r3, #0]
    4840:	2b00      	cmp	r3, #0
    4842:	d003      	beq.n	484c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	68ba      	ldr	r2, [r7, #8]
    4848:	619a      	str	r2, [r3, #24]
}
    484a:	e002      	b.n	4852 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    484c:	68fb      	ldr	r3, [r7, #12]
    484e:	68ba      	ldr	r2, [r7, #8]
    4850:	615a      	str	r2, [r3, #20]
}
    4852:	46c0      	nop			; (mov r8, r8)
    4854:	46bd      	mov	sp, r7
    4856:	b004      	add	sp, #16
    4858:	bd80      	pop	{r7, pc}
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	00004781 	.word	0x00004781

00004860 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4860:	b580      	push	{r7, lr}
    4862:	b082      	sub	sp, #8
    4864:	af00      	add	r7, sp, #0
    4866:	0002      	movs	r2, r0
    4868:	1dfb      	adds	r3, r7, #7
    486a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    486c:	4b06      	ldr	r3, [pc, #24]	; (4888 <system_interrupt_enable+0x28>)
    486e:	1dfa      	adds	r2, r7, #7
    4870:	7812      	ldrb	r2, [r2, #0]
    4872:	0011      	movs	r1, r2
    4874:	221f      	movs	r2, #31
    4876:	400a      	ands	r2, r1
    4878:	2101      	movs	r1, #1
    487a:	4091      	lsls	r1, r2
    487c:	000a      	movs	r2, r1
    487e:	601a      	str	r2, [r3, #0]
}
    4880:	46c0      	nop			; (mov r8, r8)
    4882:	46bd      	mov	sp, r7
    4884:	b002      	add	sp, #8
    4886:	bd80      	pop	{r7, pc}
    4888:	e000e100 	.word	0xe000e100

0000488c <spi_is_syncing>:
{
    488c:	b580      	push	{r7, lr}
    488e:	b084      	sub	sp, #16
    4890:	af00      	add	r7, sp, #0
    4892:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	69db      	ldr	r3, [r3, #28]
    489e:	1e5a      	subs	r2, r3, #1
    48a0:	4193      	sbcs	r3, r2
    48a2:	b2db      	uxtb	r3, r3
}
    48a4:	0018      	movs	r0, r3
    48a6:	46bd      	mov	sp, r7
    48a8:	b004      	add	sp, #16
    48aa:	bd80      	pop	{r7, pc}

000048ac <spi_get_config_defaults>:
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b082      	sub	sp, #8
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	2201      	movs	r2, #1
    48b8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2200      	movs	r2, #0
    48be:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    48c0:	687b      	ldr	r3, [r7, #4]
    48c2:	2200      	movs	r2, #0
    48c4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	22c0      	movs	r2, #192	; 0xc0
    48ca:	0392      	lsls	r2, r2, #14
    48cc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	2200      	movs	r2, #0
    48d2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	2200      	movs	r2, #0
    48d8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    48da:	687b      	ldr	r3, [r7, #4]
    48dc:	2201      	movs	r2, #1
    48de:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	2201      	movs	r2, #1
    48e4:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	2200      	movs	r2, #0
    48ea:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	2224      	movs	r2, #36	; 0x24
    48f0:	2100      	movs	r1, #0
    48f2:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	3318      	adds	r3, #24
    48f8:	220c      	movs	r2, #12
    48fa:	2100      	movs	r1, #0
    48fc:	0018      	movs	r0, r3
    48fe:	4b0a      	ldr	r3, [pc, #40]	; (4928 <spi_get_config_defaults+0x7c>)
    4900:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	4a09      	ldr	r2, [pc, #36]	; (492c <spi_get_config_defaults+0x80>)
    4906:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	2200      	movs	r2, #0
    490c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    490e:	687b      	ldr	r3, [r7, #4]
    4910:	2200      	movs	r2, #0
    4912:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	2200      	movs	r2, #0
    4918:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	2200      	movs	r2, #0
    491e:	635a      	str	r2, [r3, #52]	; 0x34
};
    4920:	46c0      	nop			; (mov r8, r8)
    4922:	46bd      	mov	sp, r7
    4924:	b002      	add	sp, #8
    4926:	bd80      	pop	{r7, pc}
    4928:	00005351 	.word	0x00005351
    492c:	000186a0 	.word	0x000186a0

00004930 <spi_enable>:
{
    4930:	b580      	push	{r7, lr}
    4932:	b084      	sub	sp, #16
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	0018      	movs	r0, r3
    4944:	4b0b      	ldr	r3, [pc, #44]	; (4974 <spi_enable+0x44>)
    4946:	4798      	blx	r3
    4948:	0003      	movs	r3, r0
    494a:	0018      	movs	r0, r3
    494c:	4b0a      	ldr	r3, [pc, #40]	; (4978 <spi_enable+0x48>)
    494e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    4950:	46c0      	nop			; (mov r8, r8)
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	0018      	movs	r0, r3
    4956:	4b09      	ldr	r3, [pc, #36]	; (497c <spi_enable+0x4c>)
    4958:	4798      	blx	r3
    495a:	1e03      	subs	r3, r0, #0
    495c:	d1f9      	bne.n	4952 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    495e:	68fb      	ldr	r3, [r7, #12]
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	2202      	movs	r2, #2
    4964:	431a      	orrs	r2, r3
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	601a      	str	r2, [r3, #0]
}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	46bd      	mov	sp, r7
    496e:	b004      	add	sp, #16
    4970:	bd80      	pop	{r7, pc}
    4972:	46c0      	nop			; (mov r8, r8)
    4974:	00001e19 	.word	0x00001e19
    4978:	00004861 	.word	0x00004861
    497c:	0000488d 	.word	0x0000488d

00004980 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    4980:	b580      	push	{r7, lr}
    4982:	b086      	sub	sp, #24
    4984:	af00      	add	r7, sp, #0
    4986:	60f8      	str	r0, [r7, #12]
    4988:	60b9      	str	r1, [r7, #8]
    498a:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	781a      	ldrb	r2, [r3, #0]
    4990:	68fb      	ldr	r3, [r7, #12]
    4992:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	785a      	ldrb	r2, [r3, #1]
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    499c:	68fb      	ldr	r3, [r7, #12]
    499e:	68ba      	ldr	r2, [r7, #8]
    49a0:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    49a2:	2314      	movs	r3, #20
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	0018      	movs	r0, r3
    49a8:	4b0c      	ldr	r3, [pc, #48]	; (49dc <at25dfx_chip_init+0x5c>)
    49aa:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    49ac:	2314      	movs	r3, #20
    49ae:	18fb      	adds	r3, r7, r3
    49b0:	2201      	movs	r2, #1
    49b2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    49b4:	68fb      	ldr	r3, [r7, #12]
    49b6:	795b      	ldrb	r3, [r3, #5]
    49b8:	2214      	movs	r2, #20
    49ba:	18ba      	adds	r2, r7, r2
    49bc:	0011      	movs	r1, r2
    49be:	0018      	movs	r0, r3
    49c0:	4b07      	ldr	r3, [pc, #28]	; (49e0 <at25dfx_chip_init+0x60>)
    49c2:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	795b      	ldrb	r3, [r3, #5]
    49c8:	2101      	movs	r1, #1
    49ca:	0018      	movs	r0, r3
    49cc:	4b05      	ldr	r3, [pc, #20]	; (49e4 <at25dfx_chip_init+0x64>)
    49ce:	4798      	blx	r3

	return STATUS_OK;
    49d0:	2300      	movs	r3, #0
}
    49d2:	0018      	movs	r0, r3
    49d4:	46bd      	mov	sp, r7
    49d6:	b006      	add	sp, #24
    49d8:	bd80      	pop	{r7, pc}
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	000047a5 	.word	0x000047a5
    49e0:	000016cd 	.word	0x000016cd
    49e4:	0000480d 	.word	0x0000480d

000049e8 <nvm_get_config_defaults>:
{
    49e8:	b580      	push	{r7, lr}
    49ea:	b082      	sub	sp, #8
    49ec:	af00      	add	r7, sp, #0
    49ee:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	2200      	movs	r2, #0
    49f4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	2201      	movs	r2, #1
    49fa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    49fc:	4b08      	ldr	r3, [pc, #32]	; (4a20 <nvm_get_config_defaults+0x38>)
    49fe:	685b      	ldr	r3, [r3, #4]
    4a00:	06db      	lsls	r3, r3, #27
    4a02:	0f1b      	lsrs	r3, r3, #28
    4a04:	b2db      	uxtb	r3, r3
    4a06:	001a      	movs	r2, r3
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	2200      	movs	r2, #0
    4a10:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	2200      	movs	r2, #0
    4a16:	711a      	strb	r2, [r3, #4]
}
    4a18:	46c0      	nop			; (mov r8, r8)
    4a1a:	46bd      	mov	sp, r7
    4a1c:	b002      	add	sp, #8
    4a1e:	bd80      	pop	{r7, pc}
    4a20:	41004000 	.word	0x41004000

00004a24 <usart_is_syncing>:
{
    4a24:	b580      	push	{r7, lr}
    4a26:	b084      	sub	sp, #16
    4a28:	af00      	add	r7, sp, #0
    4a2a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4a32:	68fb      	ldr	r3, [r7, #12]
    4a34:	69db      	ldr	r3, [r3, #28]
    4a36:	1e5a      	subs	r2, r3, #1
    4a38:	4193      	sbcs	r3, r2
    4a3a:	b2db      	uxtb	r3, r3
}
    4a3c:	0018      	movs	r0, r3
    4a3e:	46bd      	mov	sp, r7
    4a40:	b004      	add	sp, #16
    4a42:	bd80      	pop	{r7, pc}

00004a44 <_usart_wait_for_sync>:
{
    4a44:	b580      	push	{r7, lr}
    4a46:	b082      	sub	sp, #8
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4a4c:	46c0      	nop			; (mov r8, r8)
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	0018      	movs	r0, r3
    4a52:	4b04      	ldr	r3, [pc, #16]	; (4a64 <_usart_wait_for_sync+0x20>)
    4a54:	4798      	blx	r3
    4a56:	1e03      	subs	r3, r0, #0
    4a58:	d1f9      	bne.n	4a4e <_usart_wait_for_sync+0xa>
}
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	46bd      	mov	sp, r7
    4a5e:	b002      	add	sp, #8
    4a60:	bd80      	pop	{r7, pc}
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	00004a25 	.word	0x00004a25

00004a68 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4a68:	b580      	push	{r7, lr}
    4a6a:	b082      	sub	sp, #8
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	2280      	movs	r2, #128	; 0x80
    4a74:	05d2      	lsls	r2, r2, #23
    4a76:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4a78:	687b      	ldr	r3, [r7, #4]
    4a7a:	2200      	movs	r2, #0
    4a7c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	22ff      	movs	r2, #255	; 0xff
    4a82:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	2200      	movs	r2, #0
    4a88:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	2200      	movs	r2, #0
    4a8e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	2296      	movs	r2, #150	; 0x96
    4a94:	0192      	lsls	r2, r2, #6
    4a96:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	2224      	movs	r2, #36	; 0x24
    4a9c:	2101      	movs	r1, #1
    4a9e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	2225      	movs	r2, #37	; 0x25
    4aa4:	2101      	movs	r1, #1
    4aa6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	2226      	movs	r2, #38	; 0x26
    4aac:	2100      	movs	r1, #0
    4aae:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4ab0:	687b      	ldr	r3, [r7, #4]
    4ab2:	2227      	movs	r2, #39	; 0x27
    4ab4:	2100      	movs	r1, #0
    4ab6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	2200      	movs	r2, #0
    4abc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	2288      	movs	r2, #136	; 0x88
    4ac2:	0352      	lsls	r2, r2, #13
    4ac4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4ac6:	687b      	ldr	r3, [r7, #4]
    4ac8:	222c      	movs	r2, #44	; 0x2c
    4aca:	2100      	movs	r1, #0
    4acc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	222d      	movs	r2, #45	; 0x2d
    4ad2:	2100      	movs	r1, #0
    4ad4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	2200      	movs	r2, #0
    4ada:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	2200      	movs	r2, #0
    4ae0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	2200      	movs	r2, #0
    4ae6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	2200      	movs	r2, #0
    4aec:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	2200      	movs	r2, #0
    4af2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	2200      	movs	r2, #0
    4af8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	2200      	movs	r2, #0
    4afe:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4b00:	687b      	ldr	r3, [r7, #4]
    4b02:	2200      	movs	r2, #0
    4b04:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4b06:	687b      	ldr	r3, [r7, #4]
    4b08:	2200      	movs	r2, #0
    4b0a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	2200      	movs	r2, #0
    4b10:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    4b12:	687b      	ldr	r3, [r7, #4]
    4b14:	2213      	movs	r2, #19
    4b16:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	2200      	movs	r2, #0
    4b1c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	46bd      	mov	sp, r7
    4b22:	b002      	add	sp, #8
    4b24:	bd80      	pop	{r7, pc}
	...

00004b28 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	681b      	ldr	r3, [r3, #0]
    4b3a:	0018      	movs	r0, r3
    4b3c:	4b09      	ldr	r3, [pc, #36]	; (4b64 <usart_enable+0x3c>)
    4b3e:	4798      	blx	r3
    4b40:	0003      	movs	r3, r0
    4b42:	0018      	movs	r0, r3
    4b44:	4b08      	ldr	r3, [pc, #32]	; (4b68 <usart_enable+0x40>)
    4b46:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	0018      	movs	r0, r3
    4b4c:	4b07      	ldr	r3, [pc, #28]	; (4b6c <usart_enable+0x44>)
    4b4e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	2202      	movs	r2, #2
    4b56:	431a      	orrs	r2, r3
    4b58:	68fb      	ldr	r3, [r7, #12]
    4b5a:	601a      	str	r2, [r3, #0]
}
    4b5c:	46c0      	nop			; (mov r8, r8)
    4b5e:	46bd      	mov	sp, r7
    4b60:	b004      	add	sp, #16
    4b62:	bd80      	pop	{r7, pc}
    4b64:	00001e19 	.word	0x00001e19
    4b68:	00004861 	.word	0x00004861
    4b6c:	00004a45 	.word	0x00004a45

00004b70 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4b70:	b580      	push	{r7, lr}
    4b72:	b084      	sub	sp, #16
    4b74:	af00      	add	r7, sp, #0
    4b76:	60f8      	str	r0, [r7, #12]
    4b78:	60b9      	str	r1, [r7, #8]
    4b7a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4b7c:	687a      	ldr	r2, [r7, #4]
    4b7e:	68b9      	ldr	r1, [r7, #8]
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	0018      	movs	r0, r3
    4b84:	4b05      	ldr	r3, [pc, #20]	; (4b9c <usart_serial_init+0x2c>)
    4b86:	4798      	blx	r3
    4b88:	1e03      	subs	r3, r0, #0
    4b8a:	d101      	bne.n	4b90 <usart_serial_init+0x20>
		return true;
    4b8c:	2301      	movs	r3, #1
    4b8e:	e000      	b.n	4b92 <usart_serial_init+0x22>
	}
	else {
		return false;
    4b90:	2300      	movs	r3, #0
	}
}
    4b92:	0018      	movs	r0, r3
    4b94:	46bd      	mov	sp, r7
    4b96:	b004      	add	sp, #16
    4b98:	bd80      	pop	{r7, pc}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	00003221 	.word	0x00003221

00004ba0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b082      	sub	sp, #8
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
    4ba8:	000a      	movs	r2, r1
    4baa:	1cfb      	adds	r3, r7, #3
    4bac:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	1cfb      	adds	r3, r7, #3
    4bb2:	781b      	ldrb	r3, [r3, #0]
    4bb4:	b29a      	uxth	r2, r3
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	0011      	movs	r1, r2
    4bba:	0018      	movs	r0, r3
    4bbc:	4b04      	ldr	r3, [pc, #16]	; (4bd0 <usart_serial_putchar+0x30>)
    4bbe:	4798      	blx	r3
    4bc0:	1e03      	subs	r3, r0, #0
    4bc2:	d1f5      	bne.n	4bb0 <usart_serial_putchar+0x10>

	return STATUS_OK;
    4bc4:	2300      	movs	r3, #0
}
    4bc6:	0018      	movs	r0, r3
    4bc8:	46bd      	mov	sp, r7
    4bca:	b002      	add	sp, #8
    4bcc:	bd80      	pop	{r7, pc}
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	00003495 	.word	0x00003495

00004bd4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b084      	sub	sp, #16
    4bd8:	af00      	add	r7, sp, #0
    4bda:	6078      	str	r0, [r7, #4]
    4bdc:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    4bde:	230e      	movs	r3, #14
    4be0:	18fb      	adds	r3, r7, r3
    4be2:	2200      	movs	r2, #0
    4be4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	230e      	movs	r3, #14
    4bea:	18fa      	adds	r2, r7, r3
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	0011      	movs	r1, r2
    4bf0:	0018      	movs	r0, r3
    4bf2:	4b07      	ldr	r3, [pc, #28]	; (4c10 <usart_serial_getchar+0x3c>)
    4bf4:	4798      	blx	r3
    4bf6:	1e03      	subs	r3, r0, #0
    4bf8:	d1f6      	bne.n	4be8 <usart_serial_getchar+0x14>

	*c = temp;
    4bfa:	230e      	movs	r3, #14
    4bfc:	18fb      	adds	r3, r7, r3
    4bfe:	881b      	ldrh	r3, [r3, #0]
    4c00:	b2da      	uxtb	r2, r3
    4c02:	683b      	ldr	r3, [r7, #0]
    4c04:	701a      	strb	r2, [r3, #0]
}
    4c06:	46c0      	nop			; (mov r8, r8)
    4c08:	46bd      	mov	sp, r7
    4c0a:	b004      	add	sp, #16
    4c0c:	bd80      	pop	{r7, pc}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	000034f9 	.word	0x000034f9

00004c14 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4c14:	b580      	push	{r7, lr}
    4c16:	b084      	sub	sp, #16
    4c18:	af00      	add	r7, sp, #0
    4c1a:	60f8      	str	r0, [r7, #12]
    4c1c:	60b9      	str	r1, [r7, #8]
    4c1e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    4c20:	4b10      	ldr	r3, [pc, #64]	; (4c64 <stdio_serial_init+0x50>)
    4c22:	68fa      	ldr	r2, [r7, #12]
    4c24:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4c26:	4b10      	ldr	r3, [pc, #64]	; (4c68 <stdio_serial_init+0x54>)
    4c28:	4a10      	ldr	r2, [pc, #64]	; (4c6c <stdio_serial_init+0x58>)
    4c2a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4c2c:	4b10      	ldr	r3, [pc, #64]	; (4c70 <stdio_serial_init+0x5c>)
    4c2e:	4a11      	ldr	r2, [pc, #68]	; (4c74 <stdio_serial_init+0x60>)
    4c30:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    4c32:	687a      	ldr	r2, [r7, #4]
    4c34:	68b9      	ldr	r1, [r7, #8]
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	0018      	movs	r0, r3
    4c3a:	4b0f      	ldr	r3, [pc, #60]	; (4c78 <stdio_serial_init+0x64>)
    4c3c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4c3e:	4b0f      	ldr	r3, [pc, #60]	; (4c7c <stdio_serial_init+0x68>)
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	689b      	ldr	r3, [r3, #8]
    4c44:	2100      	movs	r1, #0
    4c46:	0018      	movs	r0, r3
    4c48:	4b0d      	ldr	r3, [pc, #52]	; (4c80 <stdio_serial_init+0x6c>)
    4c4a:	4798      	blx	r3
	setbuf(stdin, NULL);
    4c4c:	4b0b      	ldr	r3, [pc, #44]	; (4c7c <stdio_serial_init+0x68>)
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	685b      	ldr	r3, [r3, #4]
    4c52:	2100      	movs	r1, #0
    4c54:	0018      	movs	r0, r3
    4c56:	4b0a      	ldr	r3, [pc, #40]	; (4c80 <stdio_serial_init+0x6c>)
    4c58:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	46bd      	mov	sp, r7
    4c5e:	b004      	add	sp, #16
    4c60:	bd80      	pop	{r7, pc}
    4c62:	46c0      	nop			; (mov r8, r8)
    4c64:	2000052c 	.word	0x2000052c
    4c68:	20000528 	.word	0x20000528
    4c6c:	00004ba1 	.word	0x00004ba1
    4c70:	20000524 	.word	0x20000524
    4c74:	00004bd5 	.word	0x00004bd5
    4c78:	00004b71 	.word	0x00004b71
    4c7c:	20000004 	.word	0x20000004
    4c80:	00005469 	.word	0x00005469

00004c84 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = { 0 };
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    4c84:	b590      	push	{r4, r7, lr}
    4c86:	b091      	sub	sp, #68	; 0x44
    4c88:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    4c8a:	1d3b      	adds	r3, r7, #4
    4c8c:	0018      	movs	r0, r3
    4c8e:	4b1d      	ldr	r3, [pc, #116]	; (4d04 <at25dfx_init+0x80>)
    4c90:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    4c92:	1d3b      	adds	r3, r7, #4
    4c94:	4a1c      	ldr	r2, [pc, #112]	; (4d08 <at25dfx_init+0x84>)
    4c96:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    4c98:	1d3b      	adds	r3, r7, #4
    4c9a:	2280      	movs	r2, #128	; 0x80
    4c9c:	0252      	lsls	r2, r2, #9
    4c9e:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    4ca0:	1d3b      	adds	r3, r7, #4
    4ca2:	4a1a      	ldr	r2, [pc, #104]	; (4d0c <at25dfx_init+0x88>)
    4ca4:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    4ca6:	1d3b      	adds	r3, r7, #4
    4ca8:	2201      	movs	r2, #1
    4caa:	4252      	negs	r2, r2
    4cac:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    4cae:	1d3b      	adds	r3, r7, #4
    4cb0:	4a17      	ldr	r2, [pc, #92]	; (4d10 <at25dfx_init+0x8c>)
    4cb2:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    4cb4:	1d3b      	adds	r3, r7, #4
    4cb6:	4a17      	ldr	r2, [pc, #92]	; (4d14 <at25dfx_init+0x90>)
    4cb8:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    4cba:	233f      	movs	r3, #63	; 0x3f
    4cbc:	18fc      	adds	r4, r7, r3
    4cbe:	1d3a      	adds	r2, r7, #4
    4cc0:	4915      	ldr	r1, [pc, #84]	; (4d18 <at25dfx_init+0x94>)
    4cc2:	4b16      	ldr	r3, [pc, #88]	; (4d1c <at25dfx_init+0x98>)
    4cc4:	0018      	movs	r0, r3
    4cc6:	4b16      	ldr	r3, [pc, #88]	; (4d20 <at25dfx_init+0x9c>)
    4cc8:	4798      	blx	r3
    4cca:	0003      	movs	r3, r0
    4ccc:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    4cce:	4b13      	ldr	r3, [pc, #76]	; (4d1c <at25dfx_init+0x98>)
    4cd0:	0018      	movs	r0, r3
    4cd2:	4b14      	ldr	r3, [pc, #80]	; (4d24 <at25dfx_init+0xa0>)
    4cd4:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    4cd6:	233c      	movs	r3, #60	; 0x3c
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	2204      	movs	r2, #4
    4cdc:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PIN_PA07; // AT25DFX_CS;
    4cde:	233c      	movs	r3, #60	; 0x3c
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	2207      	movs	r2, #7
    4ce4:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    4ce6:	233f      	movs	r3, #63	; 0x3f
    4ce8:	18fc      	adds	r4, r7, r3
    4cea:	233c      	movs	r3, #60	; 0x3c
    4cec:	18fa      	adds	r2, r7, r3
    4cee:	490b      	ldr	r1, [pc, #44]	; (4d1c <at25dfx_init+0x98>)
    4cf0:	4b0d      	ldr	r3, [pc, #52]	; (4d28 <at25dfx_init+0xa4>)
    4cf2:	0018      	movs	r0, r3
    4cf4:	4b0d      	ldr	r3, [pc, #52]	; (4d2c <at25dfx_init+0xa8>)
    4cf6:	4798      	blx	r3
    4cf8:	0003      	movs	r3, r0
    4cfa:	7023      	strb	r3, [r4, #0]
}
    4cfc:	46c0      	nop			; (mov r8, r8)
    4cfe:	46bd      	mov	sp, r7
    4d00:	b011      	add	sp, #68	; 0x44
    4d02:	bd90      	pop	{r4, r7, pc}
    4d04:	000048ad 	.word	0x000048ad
    4d08:	0001d4c0 	.word	0x0001d4c0
    4d0c:	00100002 	.word	0x00100002
    4d10:	00120002 	.word	0x00120002
    4d14:	00130002 	.word	0x00130002
    4d18:	42000c00 	.word	0x42000c00
    4d1c:	20000538 	.word	0x20000538
    4d20:	0000235d 	.word	0x0000235d
    4d24:	00004931 	.word	0x00004931
    4d28:	20000530 	.word	0x20000530
    4d2c:	00004981 	.word	0x00004981

00004d30 <nvm_init>:

void nvm_init(void)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b082      	sub	sp, #8
    4d34:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
    4d36:	003b      	movs	r3, r7
    4d38:	0018      	movs	r0, r3
    4d3a:	4b06      	ldr	r3, [pc, #24]	; (4d54 <nvm_init+0x24>)
    4d3c:	4798      	blx	r3
	config_nvm.manual_page_write = false;
    4d3e:	003b      	movs	r3, r7
    4d40:	2200      	movs	r2, #0
    4d42:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config_nvm);
    4d44:	003b      	movs	r3, r7
    4d46:	0018      	movs	r0, r3
    4d48:	4b03      	ldr	r3, [pc, #12]	; (4d58 <nvm_init+0x28>)
    4d4a:	4798      	blx	r3
}
    4d4c:	46c0      	nop			; (mov r8, r8)
    4d4e:	46bd      	mov	sp, r7
    4d50:	b002      	add	sp, #8
    4d52:	bd80      	pop	{r7, pc}
    4d54:	000049e9 	.word	0x000049e9
    4d58:	00001039 	.word	0x00001039

00004d5c <serial_init>:
#define EDBG_CDC_SERCOM_PINMUX_PAD0  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD1  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD2  PINMUX_PB10D_SERCOM4_PAD2
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
static void serial_init(void)
{
    4d5c:	b580      	push	{r7, lr}
    4d5e:	b090      	sub	sp, #64	; 0x40
    4d60:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4d62:	003b      	movs	r3, r7
    4d64:	0018      	movs	r0, r3
    4d66:	4b13      	ldr	r3, [pc, #76]	; (4db4 <serial_init+0x58>)
    4d68:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    4d6a:	003b      	movs	r3, r7
    4d6c:	22c4      	movs	r2, #196	; 0xc4
    4d6e:	0392      	lsls	r2, r2, #14
    4d70:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    4d72:	003b      	movs	r3, r7
    4d74:	2201      	movs	r2, #1
    4d76:	4252      	negs	r2, r2
    4d78:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    4d7a:	003b      	movs	r3, r7
    4d7c:	2201      	movs	r2, #1
    4d7e:	4252      	negs	r2, r2
    4d80:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    4d82:	003b      	movs	r3, r7
    4d84:	4a0c      	ldr	r2, [pc, #48]	; (4db8 <serial_init+0x5c>)
    4d86:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    4d88:	003b      	movs	r3, r7
    4d8a:	4a0c      	ldr	r2, [pc, #48]	; (4dbc <serial_init+0x60>)
    4d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    4d8e:	003b      	movs	r3, r7
    4d90:	22e1      	movs	r2, #225	; 0xe1
    4d92:	0252      	lsls	r2, r2, #9
    4d94:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    4d96:	003a      	movs	r2, r7
    4d98:	4909      	ldr	r1, [pc, #36]	; (4dc0 <serial_init+0x64>)
    4d9a:	4b0a      	ldr	r3, [pc, #40]	; (4dc4 <serial_init+0x68>)
    4d9c:	0018      	movs	r0, r3
    4d9e:	4b0a      	ldr	r3, [pc, #40]	; (4dc8 <serial_init+0x6c>)
    4da0:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    4da2:	4b08      	ldr	r3, [pc, #32]	; (4dc4 <serial_init+0x68>)
    4da4:	0018      	movs	r0, r3
    4da6:	4b09      	ldr	r3, [pc, #36]	; (4dcc <serial_init+0x70>)
    4da8:	4798      	blx	r3
}
    4daa:	46c0      	nop			; (mov r8, r8)
    4dac:	46bd      	mov	sp, r7
    4dae:	b010      	add	sp, #64	; 0x40
    4db0:	bd80      	pop	{r7, pc}
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	00004a69 	.word	0x00004a69
    4db8:	002a0003 	.word	0x002a0003
    4dbc:	002b0003 	.word	0x002b0003
    4dc0:	42001800 	.word	0x42001800
    4dc4:	200000cc 	.word	0x200000cc
    4dc8:	00004c15 	.word	0x00004c15
    4dcc:	00004b29 	.word	0x00004b29

00004dd0 <main>:

int main (void)
{
    4dd0:	b590      	push	{r4, r7, lr}
    4dd2:	b0ab      	sub	sp, #172	; 0xac
    4dd4:	af00      	add	r7, sp, #0
	
	system_init();
    4dd6:	4bc3      	ldr	r3, [pc, #780]	; (50e4 <main+0x314>)
    4dd8:	4798      	blx	r3
	at25dfx_init();
    4dda:	4bc3      	ldr	r3, [pc, #780]	; (50e8 <main+0x318>)
    4ddc:	4798      	blx	r3
	dsu_crc32_init();
    4dde:	4bc3      	ldr	r3, [pc, #780]	; (50ec <main+0x31c>)
    4de0:	4798      	blx	r3
	nvm_init();
    4de2:	4bc3      	ldr	r3, [pc, #780]	; (50f0 <main+0x320>)
    4de4:	4798      	blx	r3
	serial_init();
    4de6:	4bc3      	ldr	r3, [pc, #780]	; (50f4 <main+0x324>)
    4de8:	4798      	blx	r3
	
	printf("In Application!\n\r");
    4dea:	4bc3      	ldr	r3, [pc, #780]	; (50f8 <main+0x328>)
    4dec:	0018      	movs	r0, r3
    4dee:	4bc3      	ldr	r3, [pc, #780]	; (50fc <main+0x32c>)
    4df0:	4798      	blx	r3
	
	// Init Button
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    4df2:	238c      	movs	r3, #140	; 0x8c
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	0018      	movs	r0, r3
    4df8:	4bc1      	ldr	r3, [pc, #772]	; (5100 <main+0x330>)
    4dfa:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    4dfc:	238c      	movs	r3, #140	; 0x8c
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	2200      	movs	r2, #0
    4e02:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB23, &config_port_pin);
    4e04:	238c      	movs	r3, #140	; 0x8c
    4e06:	18fb      	adds	r3, r7, r3
    4e08:	0019      	movs	r1, r3
    4e0a:	2037      	movs	r0, #55	; 0x37
    4e0c:	4bbd      	ldr	r3, [pc, #756]	; (5104 <main+0x334>)
    4e0e:	4798      	blx	r3

	// Init LED
	struct port_config config_port_pin2;
	port_get_config_defaults(&config_port_pin2);
    4e10:	2388      	movs	r3, #136	; 0x88
    4e12:	18fb      	adds	r3, r7, r3
    4e14:	0018      	movs	r0, r3
    4e16:	4bba      	ldr	r3, [pc, #744]	; (5100 <main+0x330>)
    4e18:	4798      	blx	r3
	config_port_pin2.direction = PORT_PIN_DIR_OUTPUT;
    4e1a:	2388      	movs	r3, #136	; 0x88
    4e1c:	18fb      	adds	r3, r7, r3
    4e1e:	2201      	movs	r2, #1
    4e20:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA23, &config_port_pin2);
    4e22:	2388      	movs	r3, #136	; 0x88
    4e24:	18fb      	adds	r3, r7, r3
    4e26:	0019      	movs	r1, r3
    4e28:	2017      	movs	r0, #23
    4e2a:	4bb6      	ldr	r3, [pc, #728]	; (5104 <main+0x334>)
    4e2c:	4798      	blx	r3

	printf("Begining test of Flash RW...\r\n");
    4e2e:	4bb6      	ldr	r3, [pc, #728]	; (5108 <main+0x338>)
    4e30:	0018      	movs	r0, r3
    4e32:	4bb6      	ldr	r3, [pc, #728]	; (510c <main+0x33c>)
    4e34:	4798      	blx	r3
	for(int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    4e36:	2300      	movs	r3, #0
    4e38:	22a4      	movs	r2, #164	; 0xa4
    4e3a:	18ba      	adds	r2, r7, r2
    4e3c:	6013      	str	r3, [r2, #0]
    4e3e:	e011      	b.n	4e64 <main+0x94>
		write_buffer[i] = i;
    4e40:	23a4      	movs	r3, #164	; 0xa4
    4e42:	18fb      	adds	r3, r7, r3
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	b2d9      	uxtb	r1, r3
    4e48:	4ab1      	ldr	r2, [pc, #708]	; (5110 <main+0x340>)
    4e4a:	23a4      	movs	r3, #164	; 0xa4
    4e4c:	18fb      	adds	r3, r7, r3
    4e4e:	681b      	ldr	r3, [r3, #0]
    4e50:	18d3      	adds	r3, r2, r3
    4e52:	1c0a      	adds	r2, r1, #0
    4e54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    4e56:	23a4      	movs	r3, #164	; 0xa4
    4e58:	18fb      	adds	r3, r7, r3
    4e5a:	681b      	ldr	r3, [r3, #0]
    4e5c:	3301      	adds	r3, #1
    4e5e:	22a4      	movs	r2, #164	; 0xa4
    4e60:	18ba      	adds	r2, r7, r2
    4e62:	6013      	str	r3, [r2, #0]
    4e64:	23a4      	movs	r3, #164	; 0xa4
    4e66:	18fb      	adds	r3, r7, r3
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	4aaa      	ldr	r2, [pc, #680]	; (5114 <main+0x344>)
    4e6c:	4293      	cmp	r3, r2
    4e6e:	dde7      	ble.n	4e40 <main+0x70>
	}
	/* Insert application code here, after the board has been initialized. */
	at25dfx_chip_wake(&at25dfx_chip);
    4e70:	4ba9      	ldr	r3, [pc, #676]	; (5118 <main+0x348>)
    4e72:	0018      	movs	r0, r3
    4e74:	4ba9      	ldr	r3, [pc, #676]	; (511c <main+0x34c>)
    4e76:	4798      	blx	r3
		    
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    4e78:	4ba7      	ldr	r3, [pc, #668]	; (5118 <main+0x348>)
    4e7a:	0018      	movs	r0, r3
    4e7c:	4ba8      	ldr	r3, [pc, #672]	; (5120 <main+0x350>)
    4e7e:	4798      	blx	r3
    4e80:	1e03      	subs	r3, r0, #0
    4e82:	d006      	beq.n	4e92 <main+0xc2>
		// Handle missing or non-responsive device
		printf("Flash chip missing!\r\n");
    4e84:	4ba7      	ldr	r3, [pc, #668]	; (5124 <main+0x354>)
    4e86:	0018      	movs	r0, r3
    4e88:	4ba0      	ldr	r3, [pc, #640]	; (510c <main+0x33c>)
    4e8a:	4798      	blx	r3
		exit(1);
    4e8c:	2001      	movs	r0, #1
    4e8e:	4ba6      	ldr	r3, [pc, #664]	; (5128 <main+0x358>)
    4e90:	4798      	blx	r3
	}
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    4e92:	2380      	movs	r3, #128	; 0x80
    4e94:	009b      	lsls	r3, r3, #2
    4e96:	4aa5      	ldr	r2, [pc, #660]	; (512c <main+0x35c>)
    4e98:	489f      	ldr	r0, [pc, #636]	; (5118 <main+0x348>)
    4e9a:	2100      	movs	r1, #0
    4e9c:	4ca4      	ldr	r4, [pc, #656]	; (5130 <main+0x360>)
    4e9e:	47a0      	blx	r4
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    4ea0:	2380      	movs	r3, #128	; 0x80
    4ea2:	0259      	lsls	r1, r3, #9
    4ea4:	4b9c      	ldr	r3, [pc, #624]	; (5118 <main+0x348>)
    4ea6:	2200      	movs	r2, #0
    4ea8:	0018      	movs	r0, r3
    4eaa:	4ba2      	ldr	r3, [pc, #648]	; (5134 <main+0x364>)
    4eac:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    4eae:	2380      	movs	r3, #128	; 0x80
    4eb0:	0259      	lsls	r1, r3, #9
    4eb2:	4b99      	ldr	r3, [pc, #612]	; (5118 <main+0x348>)
    4eb4:	2200      	movs	r2, #0
    4eb6:	0018      	movs	r0, r3
    4eb8:	4b9f      	ldr	r3, [pc, #636]	; (5138 <main+0x368>)
    4eba:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    4ebc:	2380      	movs	r3, #128	; 0x80
    4ebe:	009c      	lsls	r4, r3, #2
    4ec0:	4a93      	ldr	r2, [pc, #588]	; (5110 <main+0x340>)
    4ec2:	2380      	movs	r3, #128	; 0x80
    4ec4:	0259      	lsls	r1, r3, #9
    4ec6:	4894      	ldr	r0, [pc, #592]	; (5118 <main+0x348>)
    4ec8:	0023      	movs	r3, r4
    4eca:	4c9c      	ldr	r4, [pc, #624]	; (513c <main+0x36c>)
    4ecc:	47a0      	blx	r4
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    4ece:	4b92      	ldr	r3, [pc, #584]	; (5118 <main+0x348>)
    4ed0:	2101      	movs	r1, #1
    4ed2:	0018      	movs	r0, r3
    4ed4:	4b9a      	ldr	r3, [pc, #616]	; (5140 <main+0x370>)
    4ed6:	4798      	blx	r3
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);
    4ed8:	2380      	movs	r3, #128	; 0x80
    4eda:	009c      	lsls	r4, r3, #2
    4edc:	4a93      	ldr	r2, [pc, #588]	; (512c <main+0x35c>)
    4ede:	2380      	movs	r3, #128	; 0x80
    4ee0:	0259      	lsls	r1, r3, #9
    4ee2:	488d      	ldr	r0, [pc, #564]	; (5118 <main+0x348>)
    4ee4:	0023      	movs	r3, r4
    4ee6:	4c92      	ldr	r4, [pc, #584]	; (5130 <main+0x360>)
    4ee8:	47a0      	blx	r4
	at25dfx_chip_sleep(&at25dfx_chip);
    4eea:	4b8b      	ldr	r3, [pc, #556]	; (5118 <main+0x348>)
    4eec:	0018      	movs	r0, r3
    4eee:	4b95      	ldr	r3, [pc, #596]	; (5144 <main+0x374>)
    4ef0:	4798      	blx	r3
	
	uint32_t read_crc_res = 0;
    4ef2:	2300      	movs	r3, #0
    4ef4:	2284      	movs	r2, #132	; 0x84
    4ef6:	18ba      	adds	r2, r7, r2
    4ef8:	6013      	str	r3, [r2, #0]
	uint32_t write_crc_res = 0;
    4efa:	2300      	movs	r3, #0
    4efc:	2280      	movs	r2, #128	; 0x80
    4efe:	18ba      	adds	r2, r7, r2
    4f00:	6013      	str	r3, [r2, #0]
	enum status_code crcstat;
	crcstat = dsu_crc32_cal(&read_buffer[0], AT25DFX_BUFFER_SIZE, &read_crc_res);
    4f02:	488a      	ldr	r0, [pc, #552]	; (512c <main+0x35c>)
    4f04:	239b      	movs	r3, #155	; 0x9b
    4f06:	18fc      	adds	r4, r7, r3
    4f08:	2384      	movs	r3, #132	; 0x84
    4f0a:	18fa      	adds	r2, r7, r3
    4f0c:	2380      	movs	r3, #128	; 0x80
    4f0e:	009b      	lsls	r3, r3, #2
    4f10:	0019      	movs	r1, r3
    4f12:	4b8d      	ldr	r3, [pc, #564]	; (5148 <main+0x378>)
    4f14:	4798      	blx	r3
    4f16:	0003      	movs	r3, r0
    4f18:	7023      	strb	r3, [r4, #0]
	crcstat = dsu_crc32_cal(&write_buffer[0], AT25DFX_BUFFER_SIZE, &write_crc_res);
    4f1a:	487d      	ldr	r0, [pc, #500]	; (5110 <main+0x340>)
    4f1c:	239b      	movs	r3, #155	; 0x9b
    4f1e:	18fc      	adds	r4, r7, r3
    4f20:	2380      	movs	r3, #128	; 0x80
    4f22:	18fa      	adds	r2, r7, r3
    4f24:	2380      	movs	r3, #128	; 0x80
    4f26:	009b      	lsls	r3, r3, #2
    4f28:	0019      	movs	r1, r3
    4f2a:	4b87      	ldr	r3, [pc, #540]	; (5148 <main+0x378>)
    4f2c:	4798      	blx	r3
    4f2e:	0003      	movs	r3, r0
    4f30:	7023      	strb	r3, [r4, #0]
	printf("CRC32 Result of read: %x\r\n", read_crc_res);
    4f32:	2384      	movs	r3, #132	; 0x84
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	681a      	ldr	r2, [r3, #0]
    4f38:	4b84      	ldr	r3, [pc, #528]	; (514c <main+0x37c>)
    4f3a:	0011      	movs	r1, r2
    4f3c:	0018      	movs	r0, r3
    4f3e:	4b6f      	ldr	r3, [pc, #444]	; (50fc <main+0x32c>)
    4f40:	4798      	blx	r3
	printf("CRC32 Result of write: %x\r\n", write_crc_res);
    4f42:	2380      	movs	r3, #128	; 0x80
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	681a      	ldr	r2, [r3, #0]
    4f48:	4b81      	ldr	r3, [pc, #516]	; (5150 <main+0x380>)
    4f4a:	0011      	movs	r1, r2
    4f4c:	0018      	movs	r0, r3
    4f4e:	4b6b      	ldr	r3, [pc, #428]	; (50fc <main+0x32c>)
    4f50:	4798      	blx	r3
	
	printf("Starting test of NVM RW...\r\n");
    4f52:	4b80      	ldr	r3, [pc, #512]	; (5154 <main+0x384>)
    4f54:	0018      	movs	r0, r3
    4f56:	4b6d      	ldr	r3, [pc, #436]	; (510c <main+0x33c>)
    4f58:	4798      	blx	r3
	// NVM
	uint8_t write_page_buffer[NVMCTRL_PAGE_SIZE];
	uint8_t read_page_buffer[NVMCTRL_PAGE_SIZE];
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    4f5a:	2300      	movs	r3, #0
    4f5c:	22a0      	movs	r2, #160	; 0xa0
    4f5e:	18ba      	adds	r2, r7, r2
    4f60:	6013      	str	r3, [r2, #0]
    4f62:	e012      	b.n	4f8a <main+0x1ba>
		write_page_buffer[i] = i;
    4f64:	23a0      	movs	r3, #160	; 0xa0
    4f66:	18fb      	adds	r3, r7, r3
    4f68:	681b      	ldr	r3, [r3, #0]
    4f6a:	b2d9      	uxtb	r1, r3
    4f6c:	2340      	movs	r3, #64	; 0x40
    4f6e:	18fa      	adds	r2, r7, r3
    4f70:	23a0      	movs	r3, #160	; 0xa0
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	681b      	ldr	r3, [r3, #0]
    4f76:	18d3      	adds	r3, r2, r3
    4f78:	1c0a      	adds	r2, r1, #0
    4f7a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    4f7c:	23a0      	movs	r3, #160	; 0xa0
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	3301      	adds	r3, #1
    4f84:	22a0      	movs	r2, #160	; 0xa0
    4f86:	18ba      	adds	r2, r7, r2
    4f88:	6013      	str	r3, [r2, #0]
    4f8a:	23a0      	movs	r3, #160	; 0xa0
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	681b      	ldr	r3, [r3, #0]
    4f90:	2b3f      	cmp	r3, #63	; 0x3f
    4f92:	d9e7      	bls.n	4f64 <main+0x194>
	}
	enum status_code error_code;
	do
	{
		uint32_t addr = 100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    4f94:	23c8      	movs	r3, #200	; 0xc8
    4f96:	01db      	lsls	r3, r3, #7
    4f98:	2294      	movs	r2, #148	; 0x94
    4f9a:	18ba      	adds	r2, r7, r2
    4f9c:	6013      	str	r3, [r2, #0]
		addr -= 1;
    4f9e:	2394      	movs	r3, #148	; 0x94
    4fa0:	18fb      	adds	r3, r7, r3
    4fa2:	681b      	ldr	r3, [r3, #0]
    4fa4:	3b01      	subs	r3, #1
    4fa6:	2294      	movs	r2, #148	; 0x94
    4fa8:	18ba      	adds	r2, r7, r2
    4faa:	6013      	str	r3, [r2, #0]
		addr += 1;
    4fac:	2394      	movs	r3, #148	; 0x94
    4fae:	18fb      	adds	r3, r7, r3
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	3301      	adds	r3, #1
    4fb4:	2294      	movs	r2, #148	; 0x94
    4fb6:	18ba      	adds	r2, r7, r2
    4fb8:	6013      	str	r3, [r2, #0]
		error_code = nvm_erase_row(addr);
    4fba:	2393      	movs	r3, #147	; 0x93
    4fbc:	18fc      	adds	r4, r7, r3
    4fbe:	2394      	movs	r3, #148	; 0x94
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	0018      	movs	r0, r3
    4fc6:	4b64      	ldr	r3, [pc, #400]	; (5158 <main+0x388>)
    4fc8:	4798      	blx	r3
    4fca:	0003      	movs	r3, r0
    4fcc:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4fce:	2393      	movs	r3, #147	; 0x93
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	2b05      	cmp	r3, #5
    4fd6:	d0dd      	beq.n	4f94 <main+0x1c4>
	do
	{
		error_code = nvm_write_buffer( 100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE, write_page_buffer, NVMCTRL_PAGE_SIZE);
    4fd8:	2393      	movs	r3, #147	; 0x93
    4fda:	18fc      	adds	r4, r7, r3
    4fdc:	2340      	movs	r3, #64	; 0x40
    4fde:	18f9      	adds	r1, r7, r3
    4fe0:	23c8      	movs	r3, #200	; 0xc8
    4fe2:	01db      	lsls	r3, r3, #7
    4fe4:	2240      	movs	r2, #64	; 0x40
    4fe6:	0018      	movs	r0, r3
    4fe8:	4b5c      	ldr	r3, [pc, #368]	; (515c <main+0x38c>)
    4fea:	4798      	blx	r3
    4fec:	0003      	movs	r3, r0
    4fee:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4ff0:	2393      	movs	r3, #147	; 0x93
    4ff2:	18fb      	adds	r3, r7, r3
    4ff4:	781b      	ldrb	r3, [r3, #0]
    4ff6:	2b05      	cmp	r3, #5
    4ff8:	d0ee      	beq.n	4fd8 <main+0x208>
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    4ffa:	2300      	movs	r3, #0
    4ffc:	229c      	movs	r2, #156	; 0x9c
    4ffe:	18ba      	adds	r2, r7, r2
    5000:	6013      	str	r3, [r2, #0]
    5002:	e00d      	b.n	5020 <main+0x250>
		read_page_buffer[i] = 0;
    5004:	003a      	movs	r2, r7
    5006:	239c      	movs	r3, #156	; 0x9c
    5008:	18fb      	adds	r3, r7, r3
    500a:	681b      	ldr	r3, [r3, #0]
    500c:	18d3      	adds	r3, r2, r3
    500e:	2200      	movs	r2, #0
    5010:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    5012:	239c      	movs	r3, #156	; 0x9c
    5014:	18fb      	adds	r3, r7, r3
    5016:	681b      	ldr	r3, [r3, #0]
    5018:	3301      	adds	r3, #1
    501a:	229c      	movs	r2, #156	; 0x9c
    501c:	18ba      	adds	r2, r7, r2
    501e:	6013      	str	r3, [r2, #0]
    5020:	239c      	movs	r3, #156	; 0x9c
    5022:	18fb      	adds	r3, r7, r3
    5024:	681b      	ldr	r3, [r3, #0]
    5026:	2b3f      	cmp	r3, #63	; 0x3f
    5028:	d9ec      	bls.n	5004 <main+0x234>
	}
	do
	{
		error_code = nvm_read_buffer(100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE, read_page_buffer, NVMCTRL_PAGE_SIZE);
    502a:	2393      	movs	r3, #147	; 0x93
    502c:	18fc      	adds	r4, r7, r3
    502e:	0039      	movs	r1, r7
    5030:	23c8      	movs	r3, #200	; 0xc8
    5032:	01db      	lsls	r3, r3, #7
    5034:	2240      	movs	r2, #64	; 0x40
    5036:	0018      	movs	r0, r3
    5038:	4b49      	ldr	r3, [pc, #292]	; (5160 <main+0x390>)
    503a:	4798      	blx	r3
    503c:	0003      	movs	r3, r0
    503e:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    5040:	2393      	movs	r3, #147	; 0x93
    5042:	18fb      	adds	r3, r7, r3
    5044:	781b      	ldrb	r3, [r3, #0]
    5046:	2b05      	cmp	r3, #5
    5048:	d0ef      	beq.n	502a <main+0x25a>
	
	read_crc_res = 0;
    504a:	2300      	movs	r3, #0
    504c:	2284      	movs	r2, #132	; 0x84
    504e:	18ba      	adds	r2, r7, r2
    5050:	6013      	str	r3, [r2, #0]
	write_crc_res = 0;
    5052:	2300      	movs	r3, #0
    5054:	2280      	movs	r2, #128	; 0x80
    5056:	18ba      	adds	r2, r7, r2
    5058:	6013      	str	r3, [r2, #0]
	crcstat = dsu_crc32_cal(&read_page_buffer[0], NVMCTRL_PAGE_SIZE, &read_crc_res);
    505a:	003b      	movs	r3, r7
    505c:	229b      	movs	r2, #155	; 0x9b
    505e:	18bc      	adds	r4, r7, r2
    5060:	2284      	movs	r2, #132	; 0x84
    5062:	18ba      	adds	r2, r7, r2
    5064:	2140      	movs	r1, #64	; 0x40
    5066:	0018      	movs	r0, r3
    5068:	4b37      	ldr	r3, [pc, #220]	; (5148 <main+0x378>)
    506a:	4798      	blx	r3
    506c:	0003      	movs	r3, r0
    506e:	7023      	strb	r3, [r4, #0]
	crcstat = dsu_crc32_cal(&write_page_buffer[0], NVMCTRL_PAGE_SIZE, &write_crc_res);
    5070:	2340      	movs	r3, #64	; 0x40
    5072:	18fb      	adds	r3, r7, r3
    5074:	229b      	movs	r2, #155	; 0x9b
    5076:	18bc      	adds	r4, r7, r2
    5078:	2280      	movs	r2, #128	; 0x80
    507a:	18ba      	adds	r2, r7, r2
    507c:	2140      	movs	r1, #64	; 0x40
    507e:	0018      	movs	r0, r3
    5080:	4b31      	ldr	r3, [pc, #196]	; (5148 <main+0x378>)
    5082:	4798      	blx	r3
    5084:	0003      	movs	r3, r0
    5086:	7023      	strb	r3, [r4, #0]
	printf("CRC32 Result of read: %x\r\n", read_crc_res);
    5088:	2384      	movs	r3, #132	; 0x84
    508a:	18fb      	adds	r3, r7, r3
    508c:	681a      	ldr	r2, [r3, #0]
    508e:	4b2f      	ldr	r3, [pc, #188]	; (514c <main+0x37c>)
    5090:	0011      	movs	r1, r2
    5092:	0018      	movs	r0, r3
    5094:	4b19      	ldr	r3, [pc, #100]	; (50fc <main+0x32c>)
    5096:	4798      	blx	r3
	printf("CRC32 Result of write: %x\r\n", write_crc_res);
    5098:	2380      	movs	r3, #128	; 0x80
    509a:	18fb      	adds	r3, r7, r3
    509c:	681a      	ldr	r2, [r3, #0]
    509e:	4b2c      	ldr	r3, [pc, #176]	; (5150 <main+0x380>)
    50a0:	0011      	movs	r1, r2
    50a2:	0018      	movs	r0, r3
    50a4:	4b15      	ldr	r3, [pc, #84]	; (50fc <main+0x32c>)
    50a6:	4798      	blx	r3
	
	printf("RW Tests done... press the debug button for the LED.\r\n");
    50a8:	4b2e      	ldr	r3, [pc, #184]	; (5164 <main+0x394>)
    50aa:	0018      	movs	r0, r3
    50ac:	4b17      	ldr	r3, [pc, #92]	; (510c <main+0x33c>)
    50ae:	4798      	blx	r3
	while(1) {
		// LED light up with Button Press.
		bool level = port_pin_get_input_level(PIN_PB23);
    50b0:	2392      	movs	r3, #146	; 0x92
    50b2:	18fc      	adds	r4, r7, r3
    50b4:	2037      	movs	r0, #55	; 0x37
    50b6:	4b2c      	ldr	r3, [pc, #176]	; (5168 <main+0x398>)
    50b8:	4798      	blx	r3
    50ba:	0003      	movs	r3, r0
    50bc:	7023      	strb	r3, [r4, #0]
		if(level == false) {
    50be:	2392      	movs	r3, #146	; 0x92
    50c0:	18fb      	adds	r3, r7, r3
    50c2:	781b      	ldrb	r3, [r3, #0]
    50c4:	2201      	movs	r2, #1
    50c6:	4053      	eors	r3, r2
    50c8:	b2db      	uxtb	r3, r3
    50ca:	2b00      	cmp	r3, #0
    50cc:	d004      	beq.n	50d8 <main+0x308>
			port_pin_set_output_level(PIN_PA23, false);
    50ce:	2100      	movs	r1, #0
    50d0:	2017      	movs	r0, #23
    50d2:	4b26      	ldr	r3, [pc, #152]	; (516c <main+0x39c>)
    50d4:	4798      	blx	r3
    50d6:	e7eb      	b.n	50b0 <main+0x2e0>
		}
		else {
			port_pin_set_output_level(PIN_PA23,  true);
    50d8:	2101      	movs	r1, #1
    50da:	2017      	movs	r0, #23
    50dc:	4b23      	ldr	r3, [pc, #140]	; (516c <main+0x39c>)
    50de:	4798      	blx	r3
	while(1) {
    50e0:	e7e6      	b.n	50b0 <main+0x2e0>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	00004419 	.word	0x00004419
    50e8:	00004c85 	.word	0x00004c85
    50ec:	00004769 	.word	0x00004769
    50f0:	00004d31 	.word	0x00004d31
    50f4:	00004d5d 	.word	0x00004d5d
    50f8:	000065e8 	.word	0x000065e8
    50fc:	00005361 	.word	0x00005361
    5100:	000047a5 	.word	0x000047a5
    5104:	000016cd 	.word	0x000016cd
    5108:	000065fc 	.word	0x000065fc
    510c:	00005455 	.word	0x00005455
    5110:	20000300 	.word	0x20000300
    5114:	000001ff 	.word	0x000001ff
    5118:	20000530 	.word	0x20000530
    511c:	00000e39 	.word	0x00000e39
    5120:	0000082d 	.word	0x0000082d
    5124:	0000661c 	.word	0x0000661c
    5128:	000052dd 	.word	0x000052dd
    512c:	20000100 	.word	0x20000100
    5130:	000008d9 	.word	0x000008d9
    5134:	00000ce9 	.word	0x00000ce9
    5138:	00000b39 	.word	0x00000b39
    513c:	00000991 	.word	0x00000991
    5140:	00000c35 	.word	0x00000c35
    5144:	00000dad 	.word	0x00000dad
    5148:	00000efd 	.word	0x00000efd
    514c:	00006634 	.word	0x00006634
    5150:	00006650 	.word	0x00006650
    5154:	0000666c 	.word	0x0000666c
    5158:	00001471 	.word	0x00001471
    515c:	00001229 	.word	0x00001229
    5160:	00001375 	.word	0x00001375
    5164:	00006688 	.word	0x00006688
    5168:	000047c9 	.word	0x000047c9
    516c:	0000480d 	.word	0x0000480d

00005170 <__udivsi3>:
    5170:	2200      	movs	r2, #0
    5172:	0843      	lsrs	r3, r0, #1
    5174:	428b      	cmp	r3, r1
    5176:	d374      	bcc.n	5262 <__udivsi3+0xf2>
    5178:	0903      	lsrs	r3, r0, #4
    517a:	428b      	cmp	r3, r1
    517c:	d35f      	bcc.n	523e <__udivsi3+0xce>
    517e:	0a03      	lsrs	r3, r0, #8
    5180:	428b      	cmp	r3, r1
    5182:	d344      	bcc.n	520e <__udivsi3+0x9e>
    5184:	0b03      	lsrs	r3, r0, #12
    5186:	428b      	cmp	r3, r1
    5188:	d328      	bcc.n	51dc <__udivsi3+0x6c>
    518a:	0c03      	lsrs	r3, r0, #16
    518c:	428b      	cmp	r3, r1
    518e:	d30d      	bcc.n	51ac <__udivsi3+0x3c>
    5190:	22ff      	movs	r2, #255	; 0xff
    5192:	0209      	lsls	r1, r1, #8
    5194:	ba12      	rev	r2, r2
    5196:	0c03      	lsrs	r3, r0, #16
    5198:	428b      	cmp	r3, r1
    519a:	d302      	bcc.n	51a2 <__udivsi3+0x32>
    519c:	1212      	asrs	r2, r2, #8
    519e:	0209      	lsls	r1, r1, #8
    51a0:	d065      	beq.n	526e <__udivsi3+0xfe>
    51a2:	0b03      	lsrs	r3, r0, #12
    51a4:	428b      	cmp	r3, r1
    51a6:	d319      	bcc.n	51dc <__udivsi3+0x6c>
    51a8:	e000      	b.n	51ac <__udivsi3+0x3c>
    51aa:	0a09      	lsrs	r1, r1, #8
    51ac:	0bc3      	lsrs	r3, r0, #15
    51ae:	428b      	cmp	r3, r1
    51b0:	d301      	bcc.n	51b6 <__udivsi3+0x46>
    51b2:	03cb      	lsls	r3, r1, #15
    51b4:	1ac0      	subs	r0, r0, r3
    51b6:	4152      	adcs	r2, r2
    51b8:	0b83      	lsrs	r3, r0, #14
    51ba:	428b      	cmp	r3, r1
    51bc:	d301      	bcc.n	51c2 <__udivsi3+0x52>
    51be:	038b      	lsls	r3, r1, #14
    51c0:	1ac0      	subs	r0, r0, r3
    51c2:	4152      	adcs	r2, r2
    51c4:	0b43      	lsrs	r3, r0, #13
    51c6:	428b      	cmp	r3, r1
    51c8:	d301      	bcc.n	51ce <__udivsi3+0x5e>
    51ca:	034b      	lsls	r3, r1, #13
    51cc:	1ac0      	subs	r0, r0, r3
    51ce:	4152      	adcs	r2, r2
    51d0:	0b03      	lsrs	r3, r0, #12
    51d2:	428b      	cmp	r3, r1
    51d4:	d301      	bcc.n	51da <__udivsi3+0x6a>
    51d6:	030b      	lsls	r3, r1, #12
    51d8:	1ac0      	subs	r0, r0, r3
    51da:	4152      	adcs	r2, r2
    51dc:	0ac3      	lsrs	r3, r0, #11
    51de:	428b      	cmp	r3, r1
    51e0:	d301      	bcc.n	51e6 <__udivsi3+0x76>
    51e2:	02cb      	lsls	r3, r1, #11
    51e4:	1ac0      	subs	r0, r0, r3
    51e6:	4152      	adcs	r2, r2
    51e8:	0a83      	lsrs	r3, r0, #10
    51ea:	428b      	cmp	r3, r1
    51ec:	d301      	bcc.n	51f2 <__udivsi3+0x82>
    51ee:	028b      	lsls	r3, r1, #10
    51f0:	1ac0      	subs	r0, r0, r3
    51f2:	4152      	adcs	r2, r2
    51f4:	0a43      	lsrs	r3, r0, #9
    51f6:	428b      	cmp	r3, r1
    51f8:	d301      	bcc.n	51fe <__udivsi3+0x8e>
    51fa:	024b      	lsls	r3, r1, #9
    51fc:	1ac0      	subs	r0, r0, r3
    51fe:	4152      	adcs	r2, r2
    5200:	0a03      	lsrs	r3, r0, #8
    5202:	428b      	cmp	r3, r1
    5204:	d301      	bcc.n	520a <__udivsi3+0x9a>
    5206:	020b      	lsls	r3, r1, #8
    5208:	1ac0      	subs	r0, r0, r3
    520a:	4152      	adcs	r2, r2
    520c:	d2cd      	bcs.n	51aa <__udivsi3+0x3a>
    520e:	09c3      	lsrs	r3, r0, #7
    5210:	428b      	cmp	r3, r1
    5212:	d301      	bcc.n	5218 <__udivsi3+0xa8>
    5214:	01cb      	lsls	r3, r1, #7
    5216:	1ac0      	subs	r0, r0, r3
    5218:	4152      	adcs	r2, r2
    521a:	0983      	lsrs	r3, r0, #6
    521c:	428b      	cmp	r3, r1
    521e:	d301      	bcc.n	5224 <__udivsi3+0xb4>
    5220:	018b      	lsls	r3, r1, #6
    5222:	1ac0      	subs	r0, r0, r3
    5224:	4152      	adcs	r2, r2
    5226:	0943      	lsrs	r3, r0, #5
    5228:	428b      	cmp	r3, r1
    522a:	d301      	bcc.n	5230 <__udivsi3+0xc0>
    522c:	014b      	lsls	r3, r1, #5
    522e:	1ac0      	subs	r0, r0, r3
    5230:	4152      	adcs	r2, r2
    5232:	0903      	lsrs	r3, r0, #4
    5234:	428b      	cmp	r3, r1
    5236:	d301      	bcc.n	523c <__udivsi3+0xcc>
    5238:	010b      	lsls	r3, r1, #4
    523a:	1ac0      	subs	r0, r0, r3
    523c:	4152      	adcs	r2, r2
    523e:	08c3      	lsrs	r3, r0, #3
    5240:	428b      	cmp	r3, r1
    5242:	d301      	bcc.n	5248 <__udivsi3+0xd8>
    5244:	00cb      	lsls	r3, r1, #3
    5246:	1ac0      	subs	r0, r0, r3
    5248:	4152      	adcs	r2, r2
    524a:	0883      	lsrs	r3, r0, #2
    524c:	428b      	cmp	r3, r1
    524e:	d301      	bcc.n	5254 <__udivsi3+0xe4>
    5250:	008b      	lsls	r3, r1, #2
    5252:	1ac0      	subs	r0, r0, r3
    5254:	4152      	adcs	r2, r2
    5256:	0843      	lsrs	r3, r0, #1
    5258:	428b      	cmp	r3, r1
    525a:	d301      	bcc.n	5260 <__udivsi3+0xf0>
    525c:	004b      	lsls	r3, r1, #1
    525e:	1ac0      	subs	r0, r0, r3
    5260:	4152      	adcs	r2, r2
    5262:	1a41      	subs	r1, r0, r1
    5264:	d200      	bcs.n	5268 <__udivsi3+0xf8>
    5266:	4601      	mov	r1, r0
    5268:	4152      	adcs	r2, r2
    526a:	4610      	mov	r0, r2
    526c:	4770      	bx	lr
    526e:	e7ff      	b.n	5270 <__udivsi3+0x100>
    5270:	b501      	push	{r0, lr}
    5272:	2000      	movs	r0, #0
    5274:	f000 f806 	bl	5284 <__aeabi_idiv0>
    5278:	bd02      	pop	{r1, pc}
    527a:	46c0      	nop			; (mov r8, r8)

0000527c <__aeabi_uidivmod>:
    527c:	2900      	cmp	r1, #0
    527e:	d0f7      	beq.n	5270 <__udivsi3+0x100>
    5280:	e776      	b.n	5170 <__udivsi3>
    5282:	4770      	bx	lr

00005284 <__aeabi_idiv0>:
    5284:	4770      	bx	lr
    5286:	46c0      	nop			; (mov r8, r8)

00005288 <__aeabi_lmul>:
    5288:	b5f0      	push	{r4, r5, r6, r7, lr}
    528a:	46ce      	mov	lr, r9
    528c:	4647      	mov	r7, r8
    528e:	0415      	lsls	r5, r2, #16
    5290:	0c2d      	lsrs	r5, r5, #16
    5292:	002e      	movs	r6, r5
    5294:	b580      	push	{r7, lr}
    5296:	0407      	lsls	r7, r0, #16
    5298:	0c14      	lsrs	r4, r2, #16
    529a:	0c3f      	lsrs	r7, r7, #16
    529c:	4699      	mov	r9, r3
    529e:	0c03      	lsrs	r3, r0, #16
    52a0:	437e      	muls	r6, r7
    52a2:	435d      	muls	r5, r3
    52a4:	4367      	muls	r7, r4
    52a6:	4363      	muls	r3, r4
    52a8:	197f      	adds	r7, r7, r5
    52aa:	0c34      	lsrs	r4, r6, #16
    52ac:	19e4      	adds	r4, r4, r7
    52ae:	469c      	mov	ip, r3
    52b0:	42a5      	cmp	r5, r4
    52b2:	d903      	bls.n	52bc <__aeabi_lmul+0x34>
    52b4:	2380      	movs	r3, #128	; 0x80
    52b6:	025b      	lsls	r3, r3, #9
    52b8:	4698      	mov	r8, r3
    52ba:	44c4      	add	ip, r8
    52bc:	464b      	mov	r3, r9
    52be:	4351      	muls	r1, r2
    52c0:	4343      	muls	r3, r0
    52c2:	0436      	lsls	r6, r6, #16
    52c4:	0c36      	lsrs	r6, r6, #16
    52c6:	0c25      	lsrs	r5, r4, #16
    52c8:	0424      	lsls	r4, r4, #16
    52ca:	4465      	add	r5, ip
    52cc:	19a4      	adds	r4, r4, r6
    52ce:	1859      	adds	r1, r3, r1
    52d0:	1949      	adds	r1, r1, r5
    52d2:	0020      	movs	r0, r4
    52d4:	bc0c      	pop	{r2, r3}
    52d6:	4690      	mov	r8, r2
    52d8:	4699      	mov	r9, r3
    52da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000052dc <exit>:
    52dc:	4b08      	ldr	r3, [pc, #32]	; (5300 <exit+0x24>)
    52de:	b510      	push	{r4, lr}
    52e0:	0004      	movs	r4, r0
    52e2:	2b00      	cmp	r3, #0
    52e4:	d002      	beq.n	52ec <exit+0x10>
    52e6:	2100      	movs	r1, #0
    52e8:	e000      	b.n	52ec <exit+0x10>
    52ea:	bf00      	nop
    52ec:	4b05      	ldr	r3, [pc, #20]	; (5304 <exit+0x28>)
    52ee:	6818      	ldr	r0, [r3, #0]
    52f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    52f2:	2b00      	cmp	r3, #0
    52f4:	d000      	beq.n	52f8 <exit+0x1c>
    52f6:	4798      	blx	r3
    52f8:	0020      	movs	r0, r4
    52fa:	f7ff f9d1 	bl	46a0 <_exit>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	00000000 	.word	0x00000000
    5304:	000066c0 	.word	0x000066c0

00005308 <__libc_init_array>:
    5308:	b570      	push	{r4, r5, r6, lr}
    530a:	2600      	movs	r6, #0
    530c:	4d0c      	ldr	r5, [pc, #48]	; (5340 <__libc_init_array+0x38>)
    530e:	4c0d      	ldr	r4, [pc, #52]	; (5344 <__libc_init_array+0x3c>)
    5310:	1b64      	subs	r4, r4, r5
    5312:	10a4      	asrs	r4, r4, #2
    5314:	42a6      	cmp	r6, r4
    5316:	d109      	bne.n	532c <__libc_init_array+0x24>
    5318:	2600      	movs	r6, #0
    531a:	f001 fa1d 	bl	6758 <_init>
    531e:	4d0a      	ldr	r5, [pc, #40]	; (5348 <__libc_init_array+0x40>)
    5320:	4c0a      	ldr	r4, [pc, #40]	; (534c <__libc_init_array+0x44>)
    5322:	1b64      	subs	r4, r4, r5
    5324:	10a4      	asrs	r4, r4, #2
    5326:	42a6      	cmp	r6, r4
    5328:	d105      	bne.n	5336 <__libc_init_array+0x2e>
    532a:	bd70      	pop	{r4, r5, r6, pc}
    532c:	00b3      	lsls	r3, r6, #2
    532e:	58eb      	ldr	r3, [r5, r3]
    5330:	4798      	blx	r3
    5332:	3601      	adds	r6, #1
    5334:	e7ee      	b.n	5314 <__libc_init_array+0xc>
    5336:	00b3      	lsls	r3, r6, #2
    5338:	58eb      	ldr	r3, [r5, r3]
    533a:	4798      	blx	r3
    533c:	3601      	adds	r6, #1
    533e:	e7f2      	b.n	5326 <__libc_init_array+0x1e>
    5340:	00006764 	.word	0x00006764
    5344:	00006764 	.word	0x00006764
    5348:	00006764 	.word	0x00006764
    534c:	00006768 	.word	0x00006768

00005350 <memset>:
    5350:	0003      	movs	r3, r0
    5352:	1882      	adds	r2, r0, r2
    5354:	4293      	cmp	r3, r2
    5356:	d100      	bne.n	535a <memset+0xa>
    5358:	4770      	bx	lr
    535a:	7019      	strb	r1, [r3, #0]
    535c:	3301      	adds	r3, #1
    535e:	e7f9      	b.n	5354 <memset+0x4>

00005360 <iprintf>:
    5360:	b40f      	push	{r0, r1, r2, r3}
    5362:	4b0b      	ldr	r3, [pc, #44]	; (5390 <iprintf+0x30>)
    5364:	b513      	push	{r0, r1, r4, lr}
    5366:	681c      	ldr	r4, [r3, #0]
    5368:	2c00      	cmp	r4, #0
    536a:	d005      	beq.n	5378 <iprintf+0x18>
    536c:	69a3      	ldr	r3, [r4, #24]
    536e:	2b00      	cmp	r3, #0
    5370:	d102      	bne.n	5378 <iprintf+0x18>
    5372:	0020      	movs	r0, r4
    5374:	f000 faf2 	bl	595c <__sinit>
    5378:	ab05      	add	r3, sp, #20
    537a:	9a04      	ldr	r2, [sp, #16]
    537c:	68a1      	ldr	r1, [r4, #8]
    537e:	0020      	movs	r0, r4
    5380:	9301      	str	r3, [sp, #4]
    5382:	f000 fcc7 	bl	5d14 <_vfiprintf_r>
    5386:	bc16      	pop	{r1, r2, r4}
    5388:	bc08      	pop	{r3}
    538a:	b004      	add	sp, #16
    538c:	4718      	bx	r3
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	20000004 	.word	0x20000004

00005394 <_puts_r>:
    5394:	b570      	push	{r4, r5, r6, lr}
    5396:	0005      	movs	r5, r0
    5398:	000e      	movs	r6, r1
    539a:	2800      	cmp	r0, #0
    539c:	d004      	beq.n	53a8 <_puts_r+0x14>
    539e:	6983      	ldr	r3, [r0, #24]
    53a0:	2b00      	cmp	r3, #0
    53a2:	d101      	bne.n	53a8 <_puts_r+0x14>
    53a4:	f000 fada 	bl	595c <__sinit>
    53a8:	69ab      	ldr	r3, [r5, #24]
    53aa:	68ac      	ldr	r4, [r5, #8]
    53ac:	2b00      	cmp	r3, #0
    53ae:	d102      	bne.n	53b6 <_puts_r+0x22>
    53b0:	0028      	movs	r0, r5
    53b2:	f000 fad3 	bl	595c <__sinit>
    53b6:	4b24      	ldr	r3, [pc, #144]	; (5448 <_puts_r+0xb4>)
    53b8:	429c      	cmp	r4, r3
    53ba:	d10f      	bne.n	53dc <_puts_r+0x48>
    53bc:	686c      	ldr	r4, [r5, #4]
    53be:	89a3      	ldrh	r3, [r4, #12]
    53c0:	071b      	lsls	r3, r3, #28
    53c2:	d502      	bpl.n	53ca <_puts_r+0x36>
    53c4:	6923      	ldr	r3, [r4, #16]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d120      	bne.n	540c <_puts_r+0x78>
    53ca:	0021      	movs	r1, r4
    53cc:	0028      	movs	r0, r5
    53ce:	f000 f957 	bl	5680 <__swsetup_r>
    53d2:	2800      	cmp	r0, #0
    53d4:	d01a      	beq.n	540c <_puts_r+0x78>
    53d6:	2001      	movs	r0, #1
    53d8:	4240      	negs	r0, r0
    53da:	bd70      	pop	{r4, r5, r6, pc}
    53dc:	4b1b      	ldr	r3, [pc, #108]	; (544c <_puts_r+0xb8>)
    53de:	429c      	cmp	r4, r3
    53e0:	d101      	bne.n	53e6 <_puts_r+0x52>
    53e2:	68ac      	ldr	r4, [r5, #8]
    53e4:	e7eb      	b.n	53be <_puts_r+0x2a>
    53e6:	4b1a      	ldr	r3, [pc, #104]	; (5450 <_puts_r+0xbc>)
    53e8:	429c      	cmp	r4, r3
    53ea:	d1e8      	bne.n	53be <_puts_r+0x2a>
    53ec:	68ec      	ldr	r4, [r5, #12]
    53ee:	e7e6      	b.n	53be <_puts_r+0x2a>
    53f0:	3b01      	subs	r3, #1
    53f2:	3601      	adds	r6, #1
    53f4:	60a3      	str	r3, [r4, #8]
    53f6:	2b00      	cmp	r3, #0
    53f8:	da04      	bge.n	5404 <_puts_r+0x70>
    53fa:	69a2      	ldr	r2, [r4, #24]
    53fc:	4293      	cmp	r3, r2
    53fe:	db16      	blt.n	542e <_puts_r+0x9a>
    5400:	290a      	cmp	r1, #10
    5402:	d014      	beq.n	542e <_puts_r+0x9a>
    5404:	6823      	ldr	r3, [r4, #0]
    5406:	1c5a      	adds	r2, r3, #1
    5408:	6022      	str	r2, [r4, #0]
    540a:	7019      	strb	r1, [r3, #0]
    540c:	7831      	ldrb	r1, [r6, #0]
    540e:	68a3      	ldr	r3, [r4, #8]
    5410:	2900      	cmp	r1, #0
    5412:	d1ed      	bne.n	53f0 <_puts_r+0x5c>
    5414:	3b01      	subs	r3, #1
    5416:	60a3      	str	r3, [r4, #8]
    5418:	2b00      	cmp	r3, #0
    541a:	da0f      	bge.n	543c <_puts_r+0xa8>
    541c:	0022      	movs	r2, r4
    541e:	310a      	adds	r1, #10
    5420:	0028      	movs	r0, r5
    5422:	f000 f8d7 	bl	55d4 <__swbuf_r>
    5426:	1c43      	adds	r3, r0, #1
    5428:	d0d5      	beq.n	53d6 <_puts_r+0x42>
    542a:	200a      	movs	r0, #10
    542c:	e7d5      	b.n	53da <_puts_r+0x46>
    542e:	0022      	movs	r2, r4
    5430:	0028      	movs	r0, r5
    5432:	f000 f8cf 	bl	55d4 <__swbuf_r>
    5436:	1c43      	adds	r3, r0, #1
    5438:	d1e8      	bne.n	540c <_puts_r+0x78>
    543a:	e7cc      	b.n	53d6 <_puts_r+0x42>
    543c:	200a      	movs	r0, #10
    543e:	6823      	ldr	r3, [r4, #0]
    5440:	1c5a      	adds	r2, r3, #1
    5442:	6022      	str	r2, [r4, #0]
    5444:	7018      	strb	r0, [r3, #0]
    5446:	e7c8      	b.n	53da <_puts_r+0x46>
    5448:	000066e4 	.word	0x000066e4
    544c:	00006704 	.word	0x00006704
    5450:	000066c4 	.word	0x000066c4

00005454 <puts>:
    5454:	b510      	push	{r4, lr}
    5456:	4b03      	ldr	r3, [pc, #12]	; (5464 <puts+0x10>)
    5458:	0001      	movs	r1, r0
    545a:	6818      	ldr	r0, [r3, #0]
    545c:	f7ff ff9a 	bl	5394 <_puts_r>
    5460:	bd10      	pop	{r4, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	20000004 	.word	0x20000004

00005468 <setbuf>:
    5468:	424a      	negs	r2, r1
    546a:	414a      	adcs	r2, r1
    546c:	2380      	movs	r3, #128	; 0x80
    546e:	b510      	push	{r4, lr}
    5470:	0052      	lsls	r2, r2, #1
    5472:	00db      	lsls	r3, r3, #3
    5474:	f000 f802 	bl	547c <setvbuf>
    5478:	bd10      	pop	{r4, pc}
	...

0000547c <setvbuf>:
    547c:	b5f0      	push	{r4, r5, r6, r7, lr}
    547e:	001d      	movs	r5, r3
    5480:	4b4f      	ldr	r3, [pc, #316]	; (55c0 <setvbuf+0x144>)
    5482:	b085      	sub	sp, #20
    5484:	681e      	ldr	r6, [r3, #0]
    5486:	0004      	movs	r4, r0
    5488:	000f      	movs	r7, r1
    548a:	9200      	str	r2, [sp, #0]
    548c:	2e00      	cmp	r6, #0
    548e:	d005      	beq.n	549c <setvbuf+0x20>
    5490:	69b3      	ldr	r3, [r6, #24]
    5492:	2b00      	cmp	r3, #0
    5494:	d102      	bne.n	549c <setvbuf+0x20>
    5496:	0030      	movs	r0, r6
    5498:	f000 fa60 	bl	595c <__sinit>
    549c:	4b49      	ldr	r3, [pc, #292]	; (55c4 <setvbuf+0x148>)
    549e:	429c      	cmp	r4, r3
    54a0:	d150      	bne.n	5544 <setvbuf+0xc8>
    54a2:	6874      	ldr	r4, [r6, #4]
    54a4:	9b00      	ldr	r3, [sp, #0]
    54a6:	2b02      	cmp	r3, #2
    54a8:	d005      	beq.n	54b6 <setvbuf+0x3a>
    54aa:	2b01      	cmp	r3, #1
    54ac:	d900      	bls.n	54b0 <setvbuf+0x34>
    54ae:	e084      	b.n	55ba <setvbuf+0x13e>
    54b0:	2d00      	cmp	r5, #0
    54b2:	da00      	bge.n	54b6 <setvbuf+0x3a>
    54b4:	e081      	b.n	55ba <setvbuf+0x13e>
    54b6:	0021      	movs	r1, r4
    54b8:	0030      	movs	r0, r6
    54ba:	f000 f9e1 	bl	5880 <_fflush_r>
    54be:	6b61      	ldr	r1, [r4, #52]	; 0x34
    54c0:	2900      	cmp	r1, #0
    54c2:	d008      	beq.n	54d6 <setvbuf+0x5a>
    54c4:	0023      	movs	r3, r4
    54c6:	3344      	adds	r3, #68	; 0x44
    54c8:	4299      	cmp	r1, r3
    54ca:	d002      	beq.n	54d2 <setvbuf+0x56>
    54cc:	0030      	movs	r0, r6
    54ce:	f000 fb51 	bl	5b74 <_free_r>
    54d2:	2300      	movs	r3, #0
    54d4:	6363      	str	r3, [r4, #52]	; 0x34
    54d6:	2300      	movs	r3, #0
    54d8:	61a3      	str	r3, [r4, #24]
    54da:	6063      	str	r3, [r4, #4]
    54dc:	89a3      	ldrh	r3, [r4, #12]
    54de:	061b      	lsls	r3, r3, #24
    54e0:	d503      	bpl.n	54ea <setvbuf+0x6e>
    54e2:	6921      	ldr	r1, [r4, #16]
    54e4:	0030      	movs	r0, r6
    54e6:	f000 fb45 	bl	5b74 <_free_r>
    54ea:	89a3      	ldrh	r3, [r4, #12]
    54ec:	4a36      	ldr	r2, [pc, #216]	; (55c8 <setvbuf+0x14c>)
    54ee:	4013      	ands	r3, r2
    54f0:	81a3      	strh	r3, [r4, #12]
    54f2:	9b00      	ldr	r3, [sp, #0]
    54f4:	2b02      	cmp	r3, #2
    54f6:	d05a      	beq.n	55ae <setvbuf+0x132>
    54f8:	ab03      	add	r3, sp, #12
    54fa:	aa02      	add	r2, sp, #8
    54fc:	0021      	movs	r1, r4
    54fe:	0030      	movs	r0, r6
    5500:	f000 fac2 	bl	5a88 <__swhatbuf_r>
    5504:	89a3      	ldrh	r3, [r4, #12]
    5506:	4318      	orrs	r0, r3
    5508:	81a0      	strh	r0, [r4, #12]
    550a:	2d00      	cmp	r5, #0
    550c:	d124      	bne.n	5558 <setvbuf+0xdc>
    550e:	9d02      	ldr	r5, [sp, #8]
    5510:	0028      	movs	r0, r5
    5512:	f000 fb25 	bl	5b60 <malloc>
    5516:	9501      	str	r5, [sp, #4]
    5518:	1e07      	subs	r7, r0, #0
    551a:	d142      	bne.n	55a2 <setvbuf+0x126>
    551c:	9b02      	ldr	r3, [sp, #8]
    551e:	9301      	str	r3, [sp, #4]
    5520:	42ab      	cmp	r3, r5
    5522:	d139      	bne.n	5598 <setvbuf+0x11c>
    5524:	2001      	movs	r0, #1
    5526:	4240      	negs	r0, r0
    5528:	2302      	movs	r3, #2
    552a:	89a2      	ldrh	r2, [r4, #12]
    552c:	4313      	orrs	r3, r2
    552e:	81a3      	strh	r3, [r4, #12]
    5530:	2300      	movs	r3, #0
    5532:	60a3      	str	r3, [r4, #8]
    5534:	0023      	movs	r3, r4
    5536:	3347      	adds	r3, #71	; 0x47
    5538:	6023      	str	r3, [r4, #0]
    553a:	6123      	str	r3, [r4, #16]
    553c:	2301      	movs	r3, #1
    553e:	6163      	str	r3, [r4, #20]
    5540:	b005      	add	sp, #20
    5542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5544:	4b21      	ldr	r3, [pc, #132]	; (55cc <setvbuf+0x150>)
    5546:	429c      	cmp	r4, r3
    5548:	d101      	bne.n	554e <setvbuf+0xd2>
    554a:	68b4      	ldr	r4, [r6, #8]
    554c:	e7aa      	b.n	54a4 <setvbuf+0x28>
    554e:	4b20      	ldr	r3, [pc, #128]	; (55d0 <setvbuf+0x154>)
    5550:	429c      	cmp	r4, r3
    5552:	d1a7      	bne.n	54a4 <setvbuf+0x28>
    5554:	68f4      	ldr	r4, [r6, #12]
    5556:	e7a5      	b.n	54a4 <setvbuf+0x28>
    5558:	2f00      	cmp	r7, #0
    555a:	d0d9      	beq.n	5510 <setvbuf+0x94>
    555c:	69b3      	ldr	r3, [r6, #24]
    555e:	2b00      	cmp	r3, #0
    5560:	d102      	bne.n	5568 <setvbuf+0xec>
    5562:	0030      	movs	r0, r6
    5564:	f000 f9fa 	bl	595c <__sinit>
    5568:	9b00      	ldr	r3, [sp, #0]
    556a:	2b01      	cmp	r3, #1
    556c:	d103      	bne.n	5576 <setvbuf+0xfa>
    556e:	89a3      	ldrh	r3, [r4, #12]
    5570:	9a00      	ldr	r2, [sp, #0]
    5572:	431a      	orrs	r2, r3
    5574:	81a2      	strh	r2, [r4, #12]
    5576:	2008      	movs	r0, #8
    5578:	89a3      	ldrh	r3, [r4, #12]
    557a:	6027      	str	r7, [r4, #0]
    557c:	6127      	str	r7, [r4, #16]
    557e:	6165      	str	r5, [r4, #20]
    5580:	4018      	ands	r0, r3
    5582:	d018      	beq.n	55b6 <setvbuf+0x13a>
    5584:	2001      	movs	r0, #1
    5586:	4018      	ands	r0, r3
    5588:	2300      	movs	r3, #0
    558a:	4298      	cmp	r0, r3
    558c:	d011      	beq.n	55b2 <setvbuf+0x136>
    558e:	426d      	negs	r5, r5
    5590:	60a3      	str	r3, [r4, #8]
    5592:	61a5      	str	r5, [r4, #24]
    5594:	0018      	movs	r0, r3
    5596:	e7d3      	b.n	5540 <setvbuf+0xc4>
    5598:	9801      	ldr	r0, [sp, #4]
    559a:	f000 fae1 	bl	5b60 <malloc>
    559e:	1e07      	subs	r7, r0, #0
    55a0:	d0c0      	beq.n	5524 <setvbuf+0xa8>
    55a2:	2380      	movs	r3, #128	; 0x80
    55a4:	89a2      	ldrh	r2, [r4, #12]
    55a6:	9d01      	ldr	r5, [sp, #4]
    55a8:	4313      	orrs	r3, r2
    55aa:	81a3      	strh	r3, [r4, #12]
    55ac:	e7d6      	b.n	555c <setvbuf+0xe0>
    55ae:	2000      	movs	r0, #0
    55b0:	e7ba      	b.n	5528 <setvbuf+0xac>
    55b2:	60a5      	str	r5, [r4, #8]
    55b4:	e7c4      	b.n	5540 <setvbuf+0xc4>
    55b6:	60a0      	str	r0, [r4, #8]
    55b8:	e7c2      	b.n	5540 <setvbuf+0xc4>
    55ba:	2001      	movs	r0, #1
    55bc:	4240      	negs	r0, r0
    55be:	e7bf      	b.n	5540 <setvbuf+0xc4>
    55c0:	20000004 	.word	0x20000004
    55c4:	000066e4 	.word	0x000066e4
    55c8:	fffff35c 	.word	0xfffff35c
    55cc:	00006704 	.word	0x00006704
    55d0:	000066c4 	.word	0x000066c4

000055d4 <__swbuf_r>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	0005      	movs	r5, r0
    55d8:	000e      	movs	r6, r1
    55da:	0014      	movs	r4, r2
    55dc:	2800      	cmp	r0, #0
    55de:	d004      	beq.n	55ea <__swbuf_r+0x16>
    55e0:	6983      	ldr	r3, [r0, #24]
    55e2:	2b00      	cmp	r3, #0
    55e4:	d101      	bne.n	55ea <__swbuf_r+0x16>
    55e6:	f000 f9b9 	bl	595c <__sinit>
    55ea:	4b22      	ldr	r3, [pc, #136]	; (5674 <__swbuf_r+0xa0>)
    55ec:	429c      	cmp	r4, r3
    55ee:	d12d      	bne.n	564c <__swbuf_r+0x78>
    55f0:	686c      	ldr	r4, [r5, #4]
    55f2:	69a3      	ldr	r3, [r4, #24]
    55f4:	60a3      	str	r3, [r4, #8]
    55f6:	89a3      	ldrh	r3, [r4, #12]
    55f8:	071b      	lsls	r3, r3, #28
    55fa:	d531      	bpl.n	5660 <__swbuf_r+0x8c>
    55fc:	6923      	ldr	r3, [r4, #16]
    55fe:	2b00      	cmp	r3, #0
    5600:	d02e      	beq.n	5660 <__swbuf_r+0x8c>
    5602:	6823      	ldr	r3, [r4, #0]
    5604:	6922      	ldr	r2, [r4, #16]
    5606:	b2f7      	uxtb	r7, r6
    5608:	1a98      	subs	r0, r3, r2
    560a:	6963      	ldr	r3, [r4, #20]
    560c:	b2f6      	uxtb	r6, r6
    560e:	4298      	cmp	r0, r3
    5610:	db05      	blt.n	561e <__swbuf_r+0x4a>
    5612:	0021      	movs	r1, r4
    5614:	0028      	movs	r0, r5
    5616:	f000 f933 	bl	5880 <_fflush_r>
    561a:	2800      	cmp	r0, #0
    561c:	d126      	bne.n	566c <__swbuf_r+0x98>
    561e:	68a3      	ldr	r3, [r4, #8]
    5620:	3001      	adds	r0, #1
    5622:	3b01      	subs	r3, #1
    5624:	60a3      	str	r3, [r4, #8]
    5626:	6823      	ldr	r3, [r4, #0]
    5628:	1c5a      	adds	r2, r3, #1
    562a:	6022      	str	r2, [r4, #0]
    562c:	701f      	strb	r7, [r3, #0]
    562e:	6963      	ldr	r3, [r4, #20]
    5630:	4298      	cmp	r0, r3
    5632:	d004      	beq.n	563e <__swbuf_r+0x6a>
    5634:	89a3      	ldrh	r3, [r4, #12]
    5636:	07db      	lsls	r3, r3, #31
    5638:	d51a      	bpl.n	5670 <__swbuf_r+0x9c>
    563a:	2e0a      	cmp	r6, #10
    563c:	d118      	bne.n	5670 <__swbuf_r+0x9c>
    563e:	0021      	movs	r1, r4
    5640:	0028      	movs	r0, r5
    5642:	f000 f91d 	bl	5880 <_fflush_r>
    5646:	2800      	cmp	r0, #0
    5648:	d012      	beq.n	5670 <__swbuf_r+0x9c>
    564a:	e00f      	b.n	566c <__swbuf_r+0x98>
    564c:	4b0a      	ldr	r3, [pc, #40]	; (5678 <__swbuf_r+0xa4>)
    564e:	429c      	cmp	r4, r3
    5650:	d101      	bne.n	5656 <__swbuf_r+0x82>
    5652:	68ac      	ldr	r4, [r5, #8]
    5654:	e7cd      	b.n	55f2 <__swbuf_r+0x1e>
    5656:	4b09      	ldr	r3, [pc, #36]	; (567c <__swbuf_r+0xa8>)
    5658:	429c      	cmp	r4, r3
    565a:	d1ca      	bne.n	55f2 <__swbuf_r+0x1e>
    565c:	68ec      	ldr	r4, [r5, #12]
    565e:	e7c8      	b.n	55f2 <__swbuf_r+0x1e>
    5660:	0021      	movs	r1, r4
    5662:	0028      	movs	r0, r5
    5664:	f000 f80c 	bl	5680 <__swsetup_r>
    5668:	2800      	cmp	r0, #0
    566a:	d0ca      	beq.n	5602 <__swbuf_r+0x2e>
    566c:	2601      	movs	r6, #1
    566e:	4276      	negs	r6, r6
    5670:	0030      	movs	r0, r6
    5672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5674:	000066e4 	.word	0x000066e4
    5678:	00006704 	.word	0x00006704
    567c:	000066c4 	.word	0x000066c4

00005680 <__swsetup_r>:
    5680:	4b36      	ldr	r3, [pc, #216]	; (575c <__swsetup_r+0xdc>)
    5682:	b570      	push	{r4, r5, r6, lr}
    5684:	681d      	ldr	r5, [r3, #0]
    5686:	0006      	movs	r6, r0
    5688:	000c      	movs	r4, r1
    568a:	2d00      	cmp	r5, #0
    568c:	d005      	beq.n	569a <__swsetup_r+0x1a>
    568e:	69ab      	ldr	r3, [r5, #24]
    5690:	2b00      	cmp	r3, #0
    5692:	d102      	bne.n	569a <__swsetup_r+0x1a>
    5694:	0028      	movs	r0, r5
    5696:	f000 f961 	bl	595c <__sinit>
    569a:	4b31      	ldr	r3, [pc, #196]	; (5760 <__swsetup_r+0xe0>)
    569c:	429c      	cmp	r4, r3
    569e:	d10f      	bne.n	56c0 <__swsetup_r+0x40>
    56a0:	686c      	ldr	r4, [r5, #4]
    56a2:	230c      	movs	r3, #12
    56a4:	5ee2      	ldrsh	r2, [r4, r3]
    56a6:	b293      	uxth	r3, r2
    56a8:	0719      	lsls	r1, r3, #28
    56aa:	d42d      	bmi.n	5708 <__swsetup_r+0x88>
    56ac:	06d9      	lsls	r1, r3, #27
    56ae:	d411      	bmi.n	56d4 <__swsetup_r+0x54>
    56b0:	2309      	movs	r3, #9
    56b2:	2001      	movs	r0, #1
    56b4:	6033      	str	r3, [r6, #0]
    56b6:	3337      	adds	r3, #55	; 0x37
    56b8:	4313      	orrs	r3, r2
    56ba:	81a3      	strh	r3, [r4, #12]
    56bc:	4240      	negs	r0, r0
    56be:	bd70      	pop	{r4, r5, r6, pc}
    56c0:	4b28      	ldr	r3, [pc, #160]	; (5764 <__swsetup_r+0xe4>)
    56c2:	429c      	cmp	r4, r3
    56c4:	d101      	bne.n	56ca <__swsetup_r+0x4a>
    56c6:	68ac      	ldr	r4, [r5, #8]
    56c8:	e7eb      	b.n	56a2 <__swsetup_r+0x22>
    56ca:	4b27      	ldr	r3, [pc, #156]	; (5768 <__swsetup_r+0xe8>)
    56cc:	429c      	cmp	r4, r3
    56ce:	d1e8      	bne.n	56a2 <__swsetup_r+0x22>
    56d0:	68ec      	ldr	r4, [r5, #12]
    56d2:	e7e6      	b.n	56a2 <__swsetup_r+0x22>
    56d4:	075b      	lsls	r3, r3, #29
    56d6:	d513      	bpl.n	5700 <__swsetup_r+0x80>
    56d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    56da:	2900      	cmp	r1, #0
    56dc:	d008      	beq.n	56f0 <__swsetup_r+0x70>
    56de:	0023      	movs	r3, r4
    56e0:	3344      	adds	r3, #68	; 0x44
    56e2:	4299      	cmp	r1, r3
    56e4:	d002      	beq.n	56ec <__swsetup_r+0x6c>
    56e6:	0030      	movs	r0, r6
    56e8:	f000 fa44 	bl	5b74 <_free_r>
    56ec:	2300      	movs	r3, #0
    56ee:	6363      	str	r3, [r4, #52]	; 0x34
    56f0:	2224      	movs	r2, #36	; 0x24
    56f2:	89a3      	ldrh	r3, [r4, #12]
    56f4:	4393      	bics	r3, r2
    56f6:	81a3      	strh	r3, [r4, #12]
    56f8:	2300      	movs	r3, #0
    56fa:	6063      	str	r3, [r4, #4]
    56fc:	6923      	ldr	r3, [r4, #16]
    56fe:	6023      	str	r3, [r4, #0]
    5700:	2308      	movs	r3, #8
    5702:	89a2      	ldrh	r2, [r4, #12]
    5704:	4313      	orrs	r3, r2
    5706:	81a3      	strh	r3, [r4, #12]
    5708:	6923      	ldr	r3, [r4, #16]
    570a:	2b00      	cmp	r3, #0
    570c:	d10b      	bne.n	5726 <__swsetup_r+0xa6>
    570e:	21a0      	movs	r1, #160	; 0xa0
    5710:	2280      	movs	r2, #128	; 0x80
    5712:	89a3      	ldrh	r3, [r4, #12]
    5714:	0089      	lsls	r1, r1, #2
    5716:	0092      	lsls	r2, r2, #2
    5718:	400b      	ands	r3, r1
    571a:	4293      	cmp	r3, r2
    571c:	d003      	beq.n	5726 <__swsetup_r+0xa6>
    571e:	0021      	movs	r1, r4
    5720:	0030      	movs	r0, r6
    5722:	f000 f9d9 	bl	5ad8 <__smakebuf_r>
    5726:	2301      	movs	r3, #1
    5728:	89a2      	ldrh	r2, [r4, #12]
    572a:	4013      	ands	r3, r2
    572c:	d011      	beq.n	5752 <__swsetup_r+0xd2>
    572e:	2300      	movs	r3, #0
    5730:	60a3      	str	r3, [r4, #8]
    5732:	6963      	ldr	r3, [r4, #20]
    5734:	425b      	negs	r3, r3
    5736:	61a3      	str	r3, [r4, #24]
    5738:	2000      	movs	r0, #0
    573a:	6923      	ldr	r3, [r4, #16]
    573c:	4283      	cmp	r3, r0
    573e:	d1be      	bne.n	56be <__swsetup_r+0x3e>
    5740:	230c      	movs	r3, #12
    5742:	5ee2      	ldrsh	r2, [r4, r3]
    5744:	0613      	lsls	r3, r2, #24
    5746:	d5ba      	bpl.n	56be <__swsetup_r+0x3e>
    5748:	2340      	movs	r3, #64	; 0x40
    574a:	4313      	orrs	r3, r2
    574c:	81a3      	strh	r3, [r4, #12]
    574e:	3801      	subs	r0, #1
    5750:	e7b5      	b.n	56be <__swsetup_r+0x3e>
    5752:	0792      	lsls	r2, r2, #30
    5754:	d400      	bmi.n	5758 <__swsetup_r+0xd8>
    5756:	6963      	ldr	r3, [r4, #20]
    5758:	60a3      	str	r3, [r4, #8]
    575a:	e7ed      	b.n	5738 <__swsetup_r+0xb8>
    575c:	20000004 	.word	0x20000004
    5760:	000066e4 	.word	0x000066e4
    5764:	00006704 	.word	0x00006704
    5768:	000066c4 	.word	0x000066c4

0000576c <__sflush_r>:
    576c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    576e:	898a      	ldrh	r2, [r1, #12]
    5770:	0005      	movs	r5, r0
    5772:	000c      	movs	r4, r1
    5774:	0713      	lsls	r3, r2, #28
    5776:	d460      	bmi.n	583a <__sflush_r+0xce>
    5778:	684b      	ldr	r3, [r1, #4]
    577a:	2b00      	cmp	r3, #0
    577c:	dc04      	bgt.n	5788 <__sflush_r+0x1c>
    577e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5780:	2b00      	cmp	r3, #0
    5782:	dc01      	bgt.n	5788 <__sflush_r+0x1c>
    5784:	2000      	movs	r0, #0
    5786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5788:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    578a:	2f00      	cmp	r7, #0
    578c:	d0fa      	beq.n	5784 <__sflush_r+0x18>
    578e:	2300      	movs	r3, #0
    5790:	682e      	ldr	r6, [r5, #0]
    5792:	602b      	str	r3, [r5, #0]
    5794:	2380      	movs	r3, #128	; 0x80
    5796:	015b      	lsls	r3, r3, #5
    5798:	401a      	ands	r2, r3
    579a:	d034      	beq.n	5806 <__sflush_r+0x9a>
    579c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    579e:	89a3      	ldrh	r3, [r4, #12]
    57a0:	075b      	lsls	r3, r3, #29
    57a2:	d506      	bpl.n	57b2 <__sflush_r+0x46>
    57a4:	6863      	ldr	r3, [r4, #4]
    57a6:	1ac0      	subs	r0, r0, r3
    57a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    57aa:	2b00      	cmp	r3, #0
    57ac:	d001      	beq.n	57b2 <__sflush_r+0x46>
    57ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    57b0:	1ac0      	subs	r0, r0, r3
    57b2:	0002      	movs	r2, r0
    57b4:	6a21      	ldr	r1, [r4, #32]
    57b6:	2300      	movs	r3, #0
    57b8:	0028      	movs	r0, r5
    57ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    57bc:	47b8      	blx	r7
    57be:	89a1      	ldrh	r1, [r4, #12]
    57c0:	1c43      	adds	r3, r0, #1
    57c2:	d106      	bne.n	57d2 <__sflush_r+0x66>
    57c4:	682b      	ldr	r3, [r5, #0]
    57c6:	2b1d      	cmp	r3, #29
    57c8:	d831      	bhi.n	582e <__sflush_r+0xc2>
    57ca:	4a2c      	ldr	r2, [pc, #176]	; (587c <__sflush_r+0x110>)
    57cc:	40da      	lsrs	r2, r3
    57ce:	07d3      	lsls	r3, r2, #31
    57d0:	d52d      	bpl.n	582e <__sflush_r+0xc2>
    57d2:	2300      	movs	r3, #0
    57d4:	6063      	str	r3, [r4, #4]
    57d6:	6923      	ldr	r3, [r4, #16]
    57d8:	6023      	str	r3, [r4, #0]
    57da:	04cb      	lsls	r3, r1, #19
    57dc:	d505      	bpl.n	57ea <__sflush_r+0x7e>
    57de:	1c43      	adds	r3, r0, #1
    57e0:	d102      	bne.n	57e8 <__sflush_r+0x7c>
    57e2:	682b      	ldr	r3, [r5, #0]
    57e4:	2b00      	cmp	r3, #0
    57e6:	d100      	bne.n	57ea <__sflush_r+0x7e>
    57e8:	6560      	str	r0, [r4, #84]	; 0x54
    57ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    57ec:	602e      	str	r6, [r5, #0]
    57ee:	2900      	cmp	r1, #0
    57f0:	d0c8      	beq.n	5784 <__sflush_r+0x18>
    57f2:	0023      	movs	r3, r4
    57f4:	3344      	adds	r3, #68	; 0x44
    57f6:	4299      	cmp	r1, r3
    57f8:	d002      	beq.n	5800 <__sflush_r+0x94>
    57fa:	0028      	movs	r0, r5
    57fc:	f000 f9ba 	bl	5b74 <_free_r>
    5800:	2000      	movs	r0, #0
    5802:	6360      	str	r0, [r4, #52]	; 0x34
    5804:	e7bf      	b.n	5786 <__sflush_r+0x1a>
    5806:	2301      	movs	r3, #1
    5808:	6a21      	ldr	r1, [r4, #32]
    580a:	0028      	movs	r0, r5
    580c:	47b8      	blx	r7
    580e:	1c43      	adds	r3, r0, #1
    5810:	d1c5      	bne.n	579e <__sflush_r+0x32>
    5812:	682b      	ldr	r3, [r5, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d0c2      	beq.n	579e <__sflush_r+0x32>
    5818:	2b1d      	cmp	r3, #29
    581a:	d001      	beq.n	5820 <__sflush_r+0xb4>
    581c:	2b16      	cmp	r3, #22
    581e:	d101      	bne.n	5824 <__sflush_r+0xb8>
    5820:	602e      	str	r6, [r5, #0]
    5822:	e7af      	b.n	5784 <__sflush_r+0x18>
    5824:	2340      	movs	r3, #64	; 0x40
    5826:	89a2      	ldrh	r2, [r4, #12]
    5828:	4313      	orrs	r3, r2
    582a:	81a3      	strh	r3, [r4, #12]
    582c:	e7ab      	b.n	5786 <__sflush_r+0x1a>
    582e:	2340      	movs	r3, #64	; 0x40
    5830:	430b      	orrs	r3, r1
    5832:	2001      	movs	r0, #1
    5834:	81a3      	strh	r3, [r4, #12]
    5836:	4240      	negs	r0, r0
    5838:	e7a5      	b.n	5786 <__sflush_r+0x1a>
    583a:	690f      	ldr	r7, [r1, #16]
    583c:	2f00      	cmp	r7, #0
    583e:	d0a1      	beq.n	5784 <__sflush_r+0x18>
    5840:	680b      	ldr	r3, [r1, #0]
    5842:	600f      	str	r7, [r1, #0]
    5844:	1bdb      	subs	r3, r3, r7
    5846:	9301      	str	r3, [sp, #4]
    5848:	2300      	movs	r3, #0
    584a:	0792      	lsls	r2, r2, #30
    584c:	d100      	bne.n	5850 <__sflush_r+0xe4>
    584e:	694b      	ldr	r3, [r1, #20]
    5850:	60a3      	str	r3, [r4, #8]
    5852:	9b01      	ldr	r3, [sp, #4]
    5854:	2b00      	cmp	r3, #0
    5856:	dc00      	bgt.n	585a <__sflush_r+0xee>
    5858:	e794      	b.n	5784 <__sflush_r+0x18>
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	003a      	movs	r2, r7
    585e:	6a21      	ldr	r1, [r4, #32]
    5860:	0028      	movs	r0, r5
    5862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5864:	47b0      	blx	r6
    5866:	2800      	cmp	r0, #0
    5868:	dc03      	bgt.n	5872 <__sflush_r+0x106>
    586a:	2340      	movs	r3, #64	; 0x40
    586c:	89a2      	ldrh	r2, [r4, #12]
    586e:	4313      	orrs	r3, r2
    5870:	e7df      	b.n	5832 <__sflush_r+0xc6>
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	183f      	adds	r7, r7, r0
    5876:	1a1b      	subs	r3, r3, r0
    5878:	9301      	str	r3, [sp, #4]
    587a:	e7ea      	b.n	5852 <__sflush_r+0xe6>
    587c:	20400001 	.word	0x20400001

00005880 <_fflush_r>:
    5880:	690b      	ldr	r3, [r1, #16]
    5882:	b570      	push	{r4, r5, r6, lr}
    5884:	0005      	movs	r5, r0
    5886:	000c      	movs	r4, r1
    5888:	2b00      	cmp	r3, #0
    588a:	d101      	bne.n	5890 <_fflush_r+0x10>
    588c:	2000      	movs	r0, #0
    588e:	bd70      	pop	{r4, r5, r6, pc}
    5890:	2800      	cmp	r0, #0
    5892:	d004      	beq.n	589e <_fflush_r+0x1e>
    5894:	6983      	ldr	r3, [r0, #24]
    5896:	2b00      	cmp	r3, #0
    5898:	d101      	bne.n	589e <_fflush_r+0x1e>
    589a:	f000 f85f 	bl	595c <__sinit>
    589e:	4b0b      	ldr	r3, [pc, #44]	; (58cc <_fflush_r+0x4c>)
    58a0:	429c      	cmp	r4, r3
    58a2:	d109      	bne.n	58b8 <_fflush_r+0x38>
    58a4:	686c      	ldr	r4, [r5, #4]
    58a6:	220c      	movs	r2, #12
    58a8:	5ea3      	ldrsh	r3, [r4, r2]
    58aa:	2b00      	cmp	r3, #0
    58ac:	d0ee      	beq.n	588c <_fflush_r+0xc>
    58ae:	0021      	movs	r1, r4
    58b0:	0028      	movs	r0, r5
    58b2:	f7ff ff5b 	bl	576c <__sflush_r>
    58b6:	e7ea      	b.n	588e <_fflush_r+0xe>
    58b8:	4b05      	ldr	r3, [pc, #20]	; (58d0 <_fflush_r+0x50>)
    58ba:	429c      	cmp	r4, r3
    58bc:	d101      	bne.n	58c2 <_fflush_r+0x42>
    58be:	68ac      	ldr	r4, [r5, #8]
    58c0:	e7f1      	b.n	58a6 <_fflush_r+0x26>
    58c2:	4b04      	ldr	r3, [pc, #16]	; (58d4 <_fflush_r+0x54>)
    58c4:	429c      	cmp	r4, r3
    58c6:	d1ee      	bne.n	58a6 <_fflush_r+0x26>
    58c8:	68ec      	ldr	r4, [r5, #12]
    58ca:	e7ec      	b.n	58a6 <_fflush_r+0x26>
    58cc:	000066e4 	.word	0x000066e4
    58d0:	00006704 	.word	0x00006704
    58d4:	000066c4 	.word	0x000066c4

000058d8 <_cleanup_r>:
    58d8:	b510      	push	{r4, lr}
    58da:	4902      	ldr	r1, [pc, #8]	; (58e4 <_cleanup_r+0xc>)
    58dc:	f000 f8b2 	bl	5a44 <_fwalk_reent>
    58e0:	bd10      	pop	{r4, pc}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	00005881 	.word	0x00005881

000058e8 <std.isra.0>:
    58e8:	2300      	movs	r3, #0
    58ea:	b510      	push	{r4, lr}
    58ec:	0004      	movs	r4, r0
    58ee:	6003      	str	r3, [r0, #0]
    58f0:	6043      	str	r3, [r0, #4]
    58f2:	6083      	str	r3, [r0, #8]
    58f4:	8181      	strh	r1, [r0, #12]
    58f6:	6643      	str	r3, [r0, #100]	; 0x64
    58f8:	81c2      	strh	r2, [r0, #14]
    58fa:	6103      	str	r3, [r0, #16]
    58fc:	6143      	str	r3, [r0, #20]
    58fe:	6183      	str	r3, [r0, #24]
    5900:	0019      	movs	r1, r3
    5902:	2208      	movs	r2, #8
    5904:	305c      	adds	r0, #92	; 0x5c
    5906:	f7ff fd23 	bl	5350 <memset>
    590a:	4b05      	ldr	r3, [pc, #20]	; (5920 <std.isra.0+0x38>)
    590c:	6224      	str	r4, [r4, #32]
    590e:	6263      	str	r3, [r4, #36]	; 0x24
    5910:	4b04      	ldr	r3, [pc, #16]	; (5924 <std.isra.0+0x3c>)
    5912:	62a3      	str	r3, [r4, #40]	; 0x28
    5914:	4b04      	ldr	r3, [pc, #16]	; (5928 <std.isra.0+0x40>)
    5916:	62e3      	str	r3, [r4, #44]	; 0x2c
    5918:	4b04      	ldr	r3, [pc, #16]	; (592c <std.isra.0+0x44>)
    591a:	6323      	str	r3, [r4, #48]	; 0x30
    591c:	bd10      	pop	{r4, pc}
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	00006281 	.word	0x00006281
    5924:	000062a9 	.word	0x000062a9
    5928:	000062e1 	.word	0x000062e1
    592c:	0000630d 	.word	0x0000630d

00005930 <__sfmoreglue>:
    5930:	b570      	push	{r4, r5, r6, lr}
    5932:	2568      	movs	r5, #104	; 0x68
    5934:	1e4a      	subs	r2, r1, #1
    5936:	4355      	muls	r5, r2
    5938:	000e      	movs	r6, r1
    593a:	0029      	movs	r1, r5
    593c:	3174      	adds	r1, #116	; 0x74
    593e:	f000 f963 	bl	5c08 <_malloc_r>
    5942:	1e04      	subs	r4, r0, #0
    5944:	d008      	beq.n	5958 <__sfmoreglue+0x28>
    5946:	2100      	movs	r1, #0
    5948:	002a      	movs	r2, r5
    594a:	6001      	str	r1, [r0, #0]
    594c:	6046      	str	r6, [r0, #4]
    594e:	300c      	adds	r0, #12
    5950:	60a0      	str	r0, [r4, #8]
    5952:	3268      	adds	r2, #104	; 0x68
    5954:	f7ff fcfc 	bl	5350 <memset>
    5958:	0020      	movs	r0, r4
    595a:	bd70      	pop	{r4, r5, r6, pc}

0000595c <__sinit>:
    595c:	6983      	ldr	r3, [r0, #24]
    595e:	b513      	push	{r0, r1, r4, lr}
    5960:	0004      	movs	r4, r0
    5962:	2b00      	cmp	r3, #0
    5964:	d128      	bne.n	59b8 <__sinit+0x5c>
    5966:	6483      	str	r3, [r0, #72]	; 0x48
    5968:	64c3      	str	r3, [r0, #76]	; 0x4c
    596a:	6503      	str	r3, [r0, #80]	; 0x50
    596c:	4b13      	ldr	r3, [pc, #76]	; (59bc <__sinit+0x60>)
    596e:	4a14      	ldr	r2, [pc, #80]	; (59c0 <__sinit+0x64>)
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	6282      	str	r2, [r0, #40]	; 0x28
    5974:	9301      	str	r3, [sp, #4]
    5976:	4298      	cmp	r0, r3
    5978:	d101      	bne.n	597e <__sinit+0x22>
    597a:	2301      	movs	r3, #1
    597c:	6183      	str	r3, [r0, #24]
    597e:	0020      	movs	r0, r4
    5980:	f000 f820 	bl	59c4 <__sfp>
    5984:	6060      	str	r0, [r4, #4]
    5986:	0020      	movs	r0, r4
    5988:	f000 f81c 	bl	59c4 <__sfp>
    598c:	60a0      	str	r0, [r4, #8]
    598e:	0020      	movs	r0, r4
    5990:	f000 f818 	bl	59c4 <__sfp>
    5994:	2200      	movs	r2, #0
    5996:	60e0      	str	r0, [r4, #12]
    5998:	2104      	movs	r1, #4
    599a:	6860      	ldr	r0, [r4, #4]
    599c:	f7ff ffa4 	bl	58e8 <std.isra.0>
    59a0:	2201      	movs	r2, #1
    59a2:	2109      	movs	r1, #9
    59a4:	68a0      	ldr	r0, [r4, #8]
    59a6:	f7ff ff9f 	bl	58e8 <std.isra.0>
    59aa:	2202      	movs	r2, #2
    59ac:	2112      	movs	r1, #18
    59ae:	68e0      	ldr	r0, [r4, #12]
    59b0:	f7ff ff9a 	bl	58e8 <std.isra.0>
    59b4:	2301      	movs	r3, #1
    59b6:	61a3      	str	r3, [r4, #24]
    59b8:	bd13      	pop	{r0, r1, r4, pc}
    59ba:	46c0      	nop			; (mov r8, r8)
    59bc:	000066c0 	.word	0x000066c0
    59c0:	000058d9 	.word	0x000058d9

000059c4 <__sfp>:
    59c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59c6:	4b1e      	ldr	r3, [pc, #120]	; (5a40 <__sfp+0x7c>)
    59c8:	0007      	movs	r7, r0
    59ca:	681e      	ldr	r6, [r3, #0]
    59cc:	69b3      	ldr	r3, [r6, #24]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d102      	bne.n	59d8 <__sfp+0x14>
    59d2:	0030      	movs	r0, r6
    59d4:	f7ff ffc2 	bl	595c <__sinit>
    59d8:	3648      	adds	r6, #72	; 0x48
    59da:	68b4      	ldr	r4, [r6, #8]
    59dc:	6873      	ldr	r3, [r6, #4]
    59de:	3b01      	subs	r3, #1
    59e0:	d504      	bpl.n	59ec <__sfp+0x28>
    59e2:	6833      	ldr	r3, [r6, #0]
    59e4:	2b00      	cmp	r3, #0
    59e6:	d007      	beq.n	59f8 <__sfp+0x34>
    59e8:	6836      	ldr	r6, [r6, #0]
    59ea:	e7f6      	b.n	59da <__sfp+0x16>
    59ec:	220c      	movs	r2, #12
    59ee:	5ea5      	ldrsh	r5, [r4, r2]
    59f0:	2d00      	cmp	r5, #0
    59f2:	d00d      	beq.n	5a10 <__sfp+0x4c>
    59f4:	3468      	adds	r4, #104	; 0x68
    59f6:	e7f2      	b.n	59de <__sfp+0x1a>
    59f8:	2104      	movs	r1, #4
    59fa:	0038      	movs	r0, r7
    59fc:	f7ff ff98 	bl	5930 <__sfmoreglue>
    5a00:	6030      	str	r0, [r6, #0]
    5a02:	2800      	cmp	r0, #0
    5a04:	d1f0      	bne.n	59e8 <__sfp+0x24>
    5a06:	230c      	movs	r3, #12
    5a08:	0004      	movs	r4, r0
    5a0a:	603b      	str	r3, [r7, #0]
    5a0c:	0020      	movs	r0, r4
    5a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a10:	2301      	movs	r3, #1
    5a12:	0020      	movs	r0, r4
    5a14:	425b      	negs	r3, r3
    5a16:	81e3      	strh	r3, [r4, #14]
    5a18:	3302      	adds	r3, #2
    5a1a:	81a3      	strh	r3, [r4, #12]
    5a1c:	6665      	str	r5, [r4, #100]	; 0x64
    5a1e:	6025      	str	r5, [r4, #0]
    5a20:	60a5      	str	r5, [r4, #8]
    5a22:	6065      	str	r5, [r4, #4]
    5a24:	6125      	str	r5, [r4, #16]
    5a26:	6165      	str	r5, [r4, #20]
    5a28:	61a5      	str	r5, [r4, #24]
    5a2a:	2208      	movs	r2, #8
    5a2c:	0029      	movs	r1, r5
    5a2e:	305c      	adds	r0, #92	; 0x5c
    5a30:	f7ff fc8e 	bl	5350 <memset>
    5a34:	6365      	str	r5, [r4, #52]	; 0x34
    5a36:	63a5      	str	r5, [r4, #56]	; 0x38
    5a38:	64a5      	str	r5, [r4, #72]	; 0x48
    5a3a:	64e5      	str	r5, [r4, #76]	; 0x4c
    5a3c:	e7e6      	b.n	5a0c <__sfp+0x48>
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	000066c0 	.word	0x000066c0

00005a44 <_fwalk_reent>:
    5a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a46:	0004      	movs	r4, r0
    5a48:	0007      	movs	r7, r0
    5a4a:	2600      	movs	r6, #0
    5a4c:	9101      	str	r1, [sp, #4]
    5a4e:	3448      	adds	r4, #72	; 0x48
    5a50:	2c00      	cmp	r4, #0
    5a52:	d101      	bne.n	5a58 <_fwalk_reent+0x14>
    5a54:	0030      	movs	r0, r6
    5a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a58:	6863      	ldr	r3, [r4, #4]
    5a5a:	68a5      	ldr	r5, [r4, #8]
    5a5c:	9300      	str	r3, [sp, #0]
    5a5e:	9b00      	ldr	r3, [sp, #0]
    5a60:	3b01      	subs	r3, #1
    5a62:	9300      	str	r3, [sp, #0]
    5a64:	d501      	bpl.n	5a6a <_fwalk_reent+0x26>
    5a66:	6824      	ldr	r4, [r4, #0]
    5a68:	e7f2      	b.n	5a50 <_fwalk_reent+0xc>
    5a6a:	89ab      	ldrh	r3, [r5, #12]
    5a6c:	2b01      	cmp	r3, #1
    5a6e:	d908      	bls.n	5a82 <_fwalk_reent+0x3e>
    5a70:	220e      	movs	r2, #14
    5a72:	5eab      	ldrsh	r3, [r5, r2]
    5a74:	3301      	adds	r3, #1
    5a76:	d004      	beq.n	5a82 <_fwalk_reent+0x3e>
    5a78:	0029      	movs	r1, r5
    5a7a:	0038      	movs	r0, r7
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	4798      	blx	r3
    5a80:	4306      	orrs	r6, r0
    5a82:	3568      	adds	r5, #104	; 0x68
    5a84:	e7eb      	b.n	5a5e <_fwalk_reent+0x1a>
	...

00005a88 <__swhatbuf_r>:
    5a88:	b570      	push	{r4, r5, r6, lr}
    5a8a:	000e      	movs	r6, r1
    5a8c:	001d      	movs	r5, r3
    5a8e:	230e      	movs	r3, #14
    5a90:	5ec9      	ldrsh	r1, [r1, r3]
    5a92:	b090      	sub	sp, #64	; 0x40
    5a94:	0014      	movs	r4, r2
    5a96:	2900      	cmp	r1, #0
    5a98:	da07      	bge.n	5aaa <__swhatbuf_r+0x22>
    5a9a:	2300      	movs	r3, #0
    5a9c:	602b      	str	r3, [r5, #0]
    5a9e:	89b3      	ldrh	r3, [r6, #12]
    5aa0:	061b      	lsls	r3, r3, #24
    5aa2:	d411      	bmi.n	5ac8 <__swhatbuf_r+0x40>
    5aa4:	2380      	movs	r3, #128	; 0x80
    5aa6:	00db      	lsls	r3, r3, #3
    5aa8:	e00f      	b.n	5aca <__swhatbuf_r+0x42>
    5aaa:	aa01      	add	r2, sp, #4
    5aac:	f000 fc5a 	bl	6364 <_fstat_r>
    5ab0:	2800      	cmp	r0, #0
    5ab2:	dbf2      	blt.n	5a9a <__swhatbuf_r+0x12>
    5ab4:	22f0      	movs	r2, #240	; 0xf0
    5ab6:	9b02      	ldr	r3, [sp, #8]
    5ab8:	0212      	lsls	r2, r2, #8
    5aba:	4013      	ands	r3, r2
    5abc:	4a05      	ldr	r2, [pc, #20]	; (5ad4 <__swhatbuf_r+0x4c>)
    5abe:	189b      	adds	r3, r3, r2
    5ac0:	425a      	negs	r2, r3
    5ac2:	4153      	adcs	r3, r2
    5ac4:	602b      	str	r3, [r5, #0]
    5ac6:	e7ed      	b.n	5aa4 <__swhatbuf_r+0x1c>
    5ac8:	2340      	movs	r3, #64	; 0x40
    5aca:	2000      	movs	r0, #0
    5acc:	6023      	str	r3, [r4, #0]
    5ace:	b010      	add	sp, #64	; 0x40
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	ffffe000 	.word	0xffffe000

00005ad8 <__smakebuf_r>:
    5ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5ada:	2602      	movs	r6, #2
    5adc:	898b      	ldrh	r3, [r1, #12]
    5ade:	0005      	movs	r5, r0
    5ae0:	000c      	movs	r4, r1
    5ae2:	4233      	tst	r3, r6
    5ae4:	d006      	beq.n	5af4 <__smakebuf_r+0x1c>
    5ae6:	0023      	movs	r3, r4
    5ae8:	3347      	adds	r3, #71	; 0x47
    5aea:	6023      	str	r3, [r4, #0]
    5aec:	6123      	str	r3, [r4, #16]
    5aee:	2301      	movs	r3, #1
    5af0:	6163      	str	r3, [r4, #20]
    5af2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5af4:	ab01      	add	r3, sp, #4
    5af6:	466a      	mov	r2, sp
    5af8:	f7ff ffc6 	bl	5a88 <__swhatbuf_r>
    5afc:	9900      	ldr	r1, [sp, #0]
    5afe:	0007      	movs	r7, r0
    5b00:	0028      	movs	r0, r5
    5b02:	f000 f881 	bl	5c08 <_malloc_r>
    5b06:	2800      	cmp	r0, #0
    5b08:	d108      	bne.n	5b1c <__smakebuf_r+0x44>
    5b0a:	220c      	movs	r2, #12
    5b0c:	5ea3      	ldrsh	r3, [r4, r2]
    5b0e:	059a      	lsls	r2, r3, #22
    5b10:	d4ef      	bmi.n	5af2 <__smakebuf_r+0x1a>
    5b12:	2203      	movs	r2, #3
    5b14:	4393      	bics	r3, r2
    5b16:	431e      	orrs	r6, r3
    5b18:	81a6      	strh	r6, [r4, #12]
    5b1a:	e7e4      	b.n	5ae6 <__smakebuf_r+0xe>
    5b1c:	4b0f      	ldr	r3, [pc, #60]	; (5b5c <__smakebuf_r+0x84>)
    5b1e:	62ab      	str	r3, [r5, #40]	; 0x28
    5b20:	2380      	movs	r3, #128	; 0x80
    5b22:	89a2      	ldrh	r2, [r4, #12]
    5b24:	6020      	str	r0, [r4, #0]
    5b26:	4313      	orrs	r3, r2
    5b28:	81a3      	strh	r3, [r4, #12]
    5b2a:	9b00      	ldr	r3, [sp, #0]
    5b2c:	6120      	str	r0, [r4, #16]
    5b2e:	6163      	str	r3, [r4, #20]
    5b30:	9b01      	ldr	r3, [sp, #4]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d00d      	beq.n	5b52 <__smakebuf_r+0x7a>
    5b36:	230e      	movs	r3, #14
    5b38:	5ee1      	ldrsh	r1, [r4, r3]
    5b3a:	0028      	movs	r0, r5
    5b3c:	f000 fc24 	bl	6388 <_isatty_r>
    5b40:	2800      	cmp	r0, #0
    5b42:	d006      	beq.n	5b52 <__smakebuf_r+0x7a>
    5b44:	2203      	movs	r2, #3
    5b46:	89a3      	ldrh	r3, [r4, #12]
    5b48:	4393      	bics	r3, r2
    5b4a:	001a      	movs	r2, r3
    5b4c:	2301      	movs	r3, #1
    5b4e:	4313      	orrs	r3, r2
    5b50:	81a3      	strh	r3, [r4, #12]
    5b52:	89a0      	ldrh	r0, [r4, #12]
    5b54:	4338      	orrs	r0, r7
    5b56:	81a0      	strh	r0, [r4, #12]
    5b58:	e7cb      	b.n	5af2 <__smakebuf_r+0x1a>
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	000058d9 	.word	0x000058d9

00005b60 <malloc>:
    5b60:	b510      	push	{r4, lr}
    5b62:	4b03      	ldr	r3, [pc, #12]	; (5b70 <malloc+0x10>)
    5b64:	0001      	movs	r1, r0
    5b66:	6818      	ldr	r0, [r3, #0]
    5b68:	f000 f84e 	bl	5c08 <_malloc_r>
    5b6c:	bd10      	pop	{r4, pc}
    5b6e:	46c0      	nop			; (mov r8, r8)
    5b70:	20000004 	.word	0x20000004

00005b74 <_free_r>:
    5b74:	b570      	push	{r4, r5, r6, lr}
    5b76:	0005      	movs	r5, r0
    5b78:	2900      	cmp	r1, #0
    5b7a:	d010      	beq.n	5b9e <_free_r+0x2a>
    5b7c:	1f0c      	subs	r4, r1, #4
    5b7e:	6823      	ldr	r3, [r4, #0]
    5b80:	2b00      	cmp	r3, #0
    5b82:	da00      	bge.n	5b86 <_free_r+0x12>
    5b84:	18e4      	adds	r4, r4, r3
    5b86:	0028      	movs	r0, r5
    5b88:	f000 fc2f 	bl	63ea <__malloc_lock>
    5b8c:	4a1d      	ldr	r2, [pc, #116]	; (5c04 <_free_r+0x90>)
    5b8e:	6813      	ldr	r3, [r2, #0]
    5b90:	2b00      	cmp	r3, #0
    5b92:	d105      	bne.n	5ba0 <_free_r+0x2c>
    5b94:	6063      	str	r3, [r4, #4]
    5b96:	6014      	str	r4, [r2, #0]
    5b98:	0028      	movs	r0, r5
    5b9a:	f000 fc27 	bl	63ec <__malloc_unlock>
    5b9e:	bd70      	pop	{r4, r5, r6, pc}
    5ba0:	42a3      	cmp	r3, r4
    5ba2:	d909      	bls.n	5bb8 <_free_r+0x44>
    5ba4:	6821      	ldr	r1, [r4, #0]
    5ba6:	1860      	adds	r0, r4, r1
    5ba8:	4283      	cmp	r3, r0
    5baa:	d1f3      	bne.n	5b94 <_free_r+0x20>
    5bac:	6818      	ldr	r0, [r3, #0]
    5bae:	685b      	ldr	r3, [r3, #4]
    5bb0:	1841      	adds	r1, r0, r1
    5bb2:	6021      	str	r1, [r4, #0]
    5bb4:	e7ee      	b.n	5b94 <_free_r+0x20>
    5bb6:	0013      	movs	r3, r2
    5bb8:	685a      	ldr	r2, [r3, #4]
    5bba:	2a00      	cmp	r2, #0
    5bbc:	d001      	beq.n	5bc2 <_free_r+0x4e>
    5bbe:	42a2      	cmp	r2, r4
    5bc0:	d9f9      	bls.n	5bb6 <_free_r+0x42>
    5bc2:	6819      	ldr	r1, [r3, #0]
    5bc4:	1858      	adds	r0, r3, r1
    5bc6:	42a0      	cmp	r0, r4
    5bc8:	d10b      	bne.n	5be2 <_free_r+0x6e>
    5bca:	6820      	ldr	r0, [r4, #0]
    5bcc:	1809      	adds	r1, r1, r0
    5bce:	1858      	adds	r0, r3, r1
    5bd0:	6019      	str	r1, [r3, #0]
    5bd2:	4282      	cmp	r2, r0
    5bd4:	d1e0      	bne.n	5b98 <_free_r+0x24>
    5bd6:	6810      	ldr	r0, [r2, #0]
    5bd8:	6852      	ldr	r2, [r2, #4]
    5bda:	1841      	adds	r1, r0, r1
    5bdc:	6019      	str	r1, [r3, #0]
    5bde:	605a      	str	r2, [r3, #4]
    5be0:	e7da      	b.n	5b98 <_free_r+0x24>
    5be2:	42a0      	cmp	r0, r4
    5be4:	d902      	bls.n	5bec <_free_r+0x78>
    5be6:	230c      	movs	r3, #12
    5be8:	602b      	str	r3, [r5, #0]
    5bea:	e7d5      	b.n	5b98 <_free_r+0x24>
    5bec:	6821      	ldr	r1, [r4, #0]
    5bee:	1860      	adds	r0, r4, r1
    5bf0:	4282      	cmp	r2, r0
    5bf2:	d103      	bne.n	5bfc <_free_r+0x88>
    5bf4:	6810      	ldr	r0, [r2, #0]
    5bf6:	6852      	ldr	r2, [r2, #4]
    5bf8:	1841      	adds	r1, r0, r1
    5bfa:	6021      	str	r1, [r4, #0]
    5bfc:	6062      	str	r2, [r4, #4]
    5bfe:	605c      	str	r4, [r3, #4]
    5c00:	e7ca      	b.n	5b98 <_free_r+0x24>
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	20000500 	.word	0x20000500

00005c08 <_malloc_r>:
    5c08:	2303      	movs	r3, #3
    5c0a:	b570      	push	{r4, r5, r6, lr}
    5c0c:	1ccd      	adds	r5, r1, #3
    5c0e:	439d      	bics	r5, r3
    5c10:	3508      	adds	r5, #8
    5c12:	0006      	movs	r6, r0
    5c14:	2d0c      	cmp	r5, #12
    5c16:	d21e      	bcs.n	5c56 <_malloc_r+0x4e>
    5c18:	250c      	movs	r5, #12
    5c1a:	42a9      	cmp	r1, r5
    5c1c:	d81d      	bhi.n	5c5a <_malloc_r+0x52>
    5c1e:	0030      	movs	r0, r6
    5c20:	f000 fbe3 	bl	63ea <__malloc_lock>
    5c24:	4a25      	ldr	r2, [pc, #148]	; (5cbc <_malloc_r+0xb4>)
    5c26:	6814      	ldr	r4, [r2, #0]
    5c28:	0021      	movs	r1, r4
    5c2a:	2900      	cmp	r1, #0
    5c2c:	d119      	bne.n	5c62 <_malloc_r+0x5a>
    5c2e:	4c24      	ldr	r4, [pc, #144]	; (5cc0 <_malloc_r+0xb8>)
    5c30:	6823      	ldr	r3, [r4, #0]
    5c32:	2b00      	cmp	r3, #0
    5c34:	d103      	bne.n	5c3e <_malloc_r+0x36>
    5c36:	0030      	movs	r0, r6
    5c38:	f000 fb10 	bl	625c <_sbrk_r>
    5c3c:	6020      	str	r0, [r4, #0]
    5c3e:	0029      	movs	r1, r5
    5c40:	0030      	movs	r0, r6
    5c42:	f000 fb0b 	bl	625c <_sbrk_r>
    5c46:	1c43      	adds	r3, r0, #1
    5c48:	d12c      	bne.n	5ca4 <_malloc_r+0x9c>
    5c4a:	230c      	movs	r3, #12
    5c4c:	0030      	movs	r0, r6
    5c4e:	6033      	str	r3, [r6, #0]
    5c50:	f000 fbcc 	bl	63ec <__malloc_unlock>
    5c54:	e003      	b.n	5c5e <_malloc_r+0x56>
    5c56:	2d00      	cmp	r5, #0
    5c58:	dadf      	bge.n	5c1a <_malloc_r+0x12>
    5c5a:	230c      	movs	r3, #12
    5c5c:	6033      	str	r3, [r6, #0]
    5c5e:	2000      	movs	r0, #0
    5c60:	bd70      	pop	{r4, r5, r6, pc}
    5c62:	680b      	ldr	r3, [r1, #0]
    5c64:	1b5b      	subs	r3, r3, r5
    5c66:	d41a      	bmi.n	5c9e <_malloc_r+0x96>
    5c68:	2b0b      	cmp	r3, #11
    5c6a:	d903      	bls.n	5c74 <_malloc_r+0x6c>
    5c6c:	600b      	str	r3, [r1, #0]
    5c6e:	18cc      	adds	r4, r1, r3
    5c70:	6025      	str	r5, [r4, #0]
    5c72:	e003      	b.n	5c7c <_malloc_r+0x74>
    5c74:	428c      	cmp	r4, r1
    5c76:	d10e      	bne.n	5c96 <_malloc_r+0x8e>
    5c78:	6863      	ldr	r3, [r4, #4]
    5c7a:	6013      	str	r3, [r2, #0]
    5c7c:	0030      	movs	r0, r6
    5c7e:	f000 fbb5 	bl	63ec <__malloc_unlock>
    5c82:	0020      	movs	r0, r4
    5c84:	2207      	movs	r2, #7
    5c86:	300b      	adds	r0, #11
    5c88:	1d23      	adds	r3, r4, #4
    5c8a:	4390      	bics	r0, r2
    5c8c:	1ac3      	subs	r3, r0, r3
    5c8e:	d0e7      	beq.n	5c60 <_malloc_r+0x58>
    5c90:	425a      	negs	r2, r3
    5c92:	50e2      	str	r2, [r4, r3]
    5c94:	e7e4      	b.n	5c60 <_malloc_r+0x58>
    5c96:	684b      	ldr	r3, [r1, #4]
    5c98:	6063      	str	r3, [r4, #4]
    5c9a:	000c      	movs	r4, r1
    5c9c:	e7ee      	b.n	5c7c <_malloc_r+0x74>
    5c9e:	000c      	movs	r4, r1
    5ca0:	6849      	ldr	r1, [r1, #4]
    5ca2:	e7c2      	b.n	5c2a <_malloc_r+0x22>
    5ca4:	2303      	movs	r3, #3
    5ca6:	1cc4      	adds	r4, r0, #3
    5ca8:	439c      	bics	r4, r3
    5caa:	42a0      	cmp	r0, r4
    5cac:	d0e0      	beq.n	5c70 <_malloc_r+0x68>
    5cae:	1a21      	subs	r1, r4, r0
    5cb0:	0030      	movs	r0, r6
    5cb2:	f000 fad3 	bl	625c <_sbrk_r>
    5cb6:	1c43      	adds	r3, r0, #1
    5cb8:	d1da      	bne.n	5c70 <_malloc_r+0x68>
    5cba:	e7c6      	b.n	5c4a <_malloc_r+0x42>
    5cbc:	20000500 	.word	0x20000500
    5cc0:	20000504 	.word	0x20000504

00005cc4 <__sfputc_r>:
    5cc4:	6893      	ldr	r3, [r2, #8]
    5cc6:	b510      	push	{r4, lr}
    5cc8:	3b01      	subs	r3, #1
    5cca:	6093      	str	r3, [r2, #8]
    5ccc:	2b00      	cmp	r3, #0
    5cce:	da05      	bge.n	5cdc <__sfputc_r+0x18>
    5cd0:	6994      	ldr	r4, [r2, #24]
    5cd2:	42a3      	cmp	r3, r4
    5cd4:	db08      	blt.n	5ce8 <__sfputc_r+0x24>
    5cd6:	b2cb      	uxtb	r3, r1
    5cd8:	2b0a      	cmp	r3, #10
    5cda:	d005      	beq.n	5ce8 <__sfputc_r+0x24>
    5cdc:	6813      	ldr	r3, [r2, #0]
    5cde:	1c58      	adds	r0, r3, #1
    5ce0:	6010      	str	r0, [r2, #0]
    5ce2:	7019      	strb	r1, [r3, #0]
    5ce4:	b2c8      	uxtb	r0, r1
    5ce6:	bd10      	pop	{r4, pc}
    5ce8:	f7ff fc74 	bl	55d4 <__swbuf_r>
    5cec:	e7fb      	b.n	5ce6 <__sfputc_r+0x22>

00005cee <__sfputs_r>:
    5cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cf0:	0006      	movs	r6, r0
    5cf2:	000f      	movs	r7, r1
    5cf4:	0014      	movs	r4, r2
    5cf6:	18d5      	adds	r5, r2, r3
    5cf8:	42ac      	cmp	r4, r5
    5cfa:	d101      	bne.n	5d00 <__sfputs_r+0x12>
    5cfc:	2000      	movs	r0, #0
    5cfe:	e007      	b.n	5d10 <__sfputs_r+0x22>
    5d00:	7821      	ldrb	r1, [r4, #0]
    5d02:	003a      	movs	r2, r7
    5d04:	0030      	movs	r0, r6
    5d06:	f7ff ffdd 	bl	5cc4 <__sfputc_r>
    5d0a:	3401      	adds	r4, #1
    5d0c:	1c43      	adds	r3, r0, #1
    5d0e:	d1f3      	bne.n	5cf8 <__sfputs_r+0xa>
    5d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005d14 <_vfiprintf_r>:
    5d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d16:	b09f      	sub	sp, #124	; 0x7c
    5d18:	0006      	movs	r6, r0
    5d1a:	000f      	movs	r7, r1
    5d1c:	0014      	movs	r4, r2
    5d1e:	9305      	str	r3, [sp, #20]
    5d20:	2800      	cmp	r0, #0
    5d22:	d004      	beq.n	5d2e <_vfiprintf_r+0x1a>
    5d24:	6983      	ldr	r3, [r0, #24]
    5d26:	2b00      	cmp	r3, #0
    5d28:	d101      	bne.n	5d2e <_vfiprintf_r+0x1a>
    5d2a:	f7ff fe17 	bl	595c <__sinit>
    5d2e:	4b7f      	ldr	r3, [pc, #508]	; (5f2c <_vfiprintf_r+0x218>)
    5d30:	429f      	cmp	r7, r3
    5d32:	d15c      	bne.n	5dee <_vfiprintf_r+0xda>
    5d34:	6877      	ldr	r7, [r6, #4]
    5d36:	89bb      	ldrh	r3, [r7, #12]
    5d38:	071b      	lsls	r3, r3, #28
    5d3a:	d562      	bpl.n	5e02 <_vfiprintf_r+0xee>
    5d3c:	693b      	ldr	r3, [r7, #16]
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d05f      	beq.n	5e02 <_vfiprintf_r+0xee>
    5d42:	2300      	movs	r3, #0
    5d44:	ad06      	add	r5, sp, #24
    5d46:	616b      	str	r3, [r5, #20]
    5d48:	3320      	adds	r3, #32
    5d4a:	766b      	strb	r3, [r5, #25]
    5d4c:	3310      	adds	r3, #16
    5d4e:	76ab      	strb	r3, [r5, #26]
    5d50:	9402      	str	r4, [sp, #8]
    5d52:	9c02      	ldr	r4, [sp, #8]
    5d54:	7823      	ldrb	r3, [r4, #0]
    5d56:	2b00      	cmp	r3, #0
    5d58:	d15d      	bne.n	5e16 <_vfiprintf_r+0x102>
    5d5a:	9b02      	ldr	r3, [sp, #8]
    5d5c:	1ae3      	subs	r3, r4, r3
    5d5e:	9304      	str	r3, [sp, #16]
    5d60:	d00d      	beq.n	5d7e <_vfiprintf_r+0x6a>
    5d62:	9b04      	ldr	r3, [sp, #16]
    5d64:	9a02      	ldr	r2, [sp, #8]
    5d66:	0039      	movs	r1, r7
    5d68:	0030      	movs	r0, r6
    5d6a:	f7ff ffc0 	bl	5cee <__sfputs_r>
    5d6e:	1c43      	adds	r3, r0, #1
    5d70:	d100      	bne.n	5d74 <_vfiprintf_r+0x60>
    5d72:	e0cc      	b.n	5f0e <_vfiprintf_r+0x1fa>
    5d74:	696a      	ldr	r2, [r5, #20]
    5d76:	9b04      	ldr	r3, [sp, #16]
    5d78:	4694      	mov	ip, r2
    5d7a:	4463      	add	r3, ip
    5d7c:	616b      	str	r3, [r5, #20]
    5d7e:	7823      	ldrb	r3, [r4, #0]
    5d80:	2b00      	cmp	r3, #0
    5d82:	d100      	bne.n	5d86 <_vfiprintf_r+0x72>
    5d84:	e0c3      	b.n	5f0e <_vfiprintf_r+0x1fa>
    5d86:	2201      	movs	r2, #1
    5d88:	2300      	movs	r3, #0
    5d8a:	4252      	negs	r2, r2
    5d8c:	606a      	str	r2, [r5, #4]
    5d8e:	a902      	add	r1, sp, #8
    5d90:	3254      	adds	r2, #84	; 0x54
    5d92:	1852      	adds	r2, r2, r1
    5d94:	3401      	adds	r4, #1
    5d96:	602b      	str	r3, [r5, #0]
    5d98:	60eb      	str	r3, [r5, #12]
    5d9a:	60ab      	str	r3, [r5, #8]
    5d9c:	7013      	strb	r3, [r2, #0]
    5d9e:	65ab      	str	r3, [r5, #88]	; 0x58
    5da0:	7821      	ldrb	r1, [r4, #0]
    5da2:	2205      	movs	r2, #5
    5da4:	4862      	ldr	r0, [pc, #392]	; (5f30 <_vfiprintf_r+0x21c>)
    5da6:	f000 fb15 	bl	63d4 <memchr>
    5daa:	1c63      	adds	r3, r4, #1
    5dac:	469c      	mov	ip, r3
    5dae:	2800      	cmp	r0, #0
    5db0:	d135      	bne.n	5e1e <_vfiprintf_r+0x10a>
    5db2:	6829      	ldr	r1, [r5, #0]
    5db4:	06cb      	lsls	r3, r1, #27
    5db6:	d504      	bpl.n	5dc2 <_vfiprintf_r+0xae>
    5db8:	2353      	movs	r3, #83	; 0x53
    5dba:	aa02      	add	r2, sp, #8
    5dbc:	3020      	adds	r0, #32
    5dbe:	189b      	adds	r3, r3, r2
    5dc0:	7018      	strb	r0, [r3, #0]
    5dc2:	070b      	lsls	r3, r1, #28
    5dc4:	d504      	bpl.n	5dd0 <_vfiprintf_r+0xbc>
    5dc6:	2353      	movs	r3, #83	; 0x53
    5dc8:	202b      	movs	r0, #43	; 0x2b
    5dca:	aa02      	add	r2, sp, #8
    5dcc:	189b      	adds	r3, r3, r2
    5dce:	7018      	strb	r0, [r3, #0]
    5dd0:	7823      	ldrb	r3, [r4, #0]
    5dd2:	2b2a      	cmp	r3, #42	; 0x2a
    5dd4:	d02c      	beq.n	5e30 <_vfiprintf_r+0x11c>
    5dd6:	2000      	movs	r0, #0
    5dd8:	210a      	movs	r1, #10
    5dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ddc:	7822      	ldrb	r2, [r4, #0]
    5dde:	3a30      	subs	r2, #48	; 0x30
    5de0:	2a09      	cmp	r2, #9
    5de2:	d800      	bhi.n	5de6 <_vfiprintf_r+0xd2>
    5de4:	e06b      	b.n	5ebe <_vfiprintf_r+0x1aa>
    5de6:	2800      	cmp	r0, #0
    5de8:	d02a      	beq.n	5e40 <_vfiprintf_r+0x12c>
    5dea:	9309      	str	r3, [sp, #36]	; 0x24
    5dec:	e028      	b.n	5e40 <_vfiprintf_r+0x12c>
    5dee:	4b51      	ldr	r3, [pc, #324]	; (5f34 <_vfiprintf_r+0x220>)
    5df0:	429f      	cmp	r7, r3
    5df2:	d101      	bne.n	5df8 <_vfiprintf_r+0xe4>
    5df4:	68b7      	ldr	r7, [r6, #8]
    5df6:	e79e      	b.n	5d36 <_vfiprintf_r+0x22>
    5df8:	4b4f      	ldr	r3, [pc, #316]	; (5f38 <_vfiprintf_r+0x224>)
    5dfa:	429f      	cmp	r7, r3
    5dfc:	d19b      	bne.n	5d36 <_vfiprintf_r+0x22>
    5dfe:	68f7      	ldr	r7, [r6, #12]
    5e00:	e799      	b.n	5d36 <_vfiprintf_r+0x22>
    5e02:	0039      	movs	r1, r7
    5e04:	0030      	movs	r0, r6
    5e06:	f7ff fc3b 	bl	5680 <__swsetup_r>
    5e0a:	2800      	cmp	r0, #0
    5e0c:	d099      	beq.n	5d42 <_vfiprintf_r+0x2e>
    5e0e:	2001      	movs	r0, #1
    5e10:	4240      	negs	r0, r0
    5e12:	b01f      	add	sp, #124	; 0x7c
    5e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e16:	2b25      	cmp	r3, #37	; 0x25
    5e18:	d09f      	beq.n	5d5a <_vfiprintf_r+0x46>
    5e1a:	3401      	adds	r4, #1
    5e1c:	e79a      	b.n	5d54 <_vfiprintf_r+0x40>
    5e1e:	4b44      	ldr	r3, [pc, #272]	; (5f30 <_vfiprintf_r+0x21c>)
    5e20:	6829      	ldr	r1, [r5, #0]
    5e22:	1ac0      	subs	r0, r0, r3
    5e24:	2301      	movs	r3, #1
    5e26:	4083      	lsls	r3, r0
    5e28:	430b      	orrs	r3, r1
    5e2a:	602b      	str	r3, [r5, #0]
    5e2c:	4664      	mov	r4, ip
    5e2e:	e7b7      	b.n	5da0 <_vfiprintf_r+0x8c>
    5e30:	9b05      	ldr	r3, [sp, #20]
    5e32:	1d18      	adds	r0, r3, #4
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	9005      	str	r0, [sp, #20]
    5e38:	2b00      	cmp	r3, #0
    5e3a:	db3a      	blt.n	5eb2 <_vfiprintf_r+0x19e>
    5e3c:	9309      	str	r3, [sp, #36]	; 0x24
    5e3e:	4664      	mov	r4, ip
    5e40:	7823      	ldrb	r3, [r4, #0]
    5e42:	2b2e      	cmp	r3, #46	; 0x2e
    5e44:	d10b      	bne.n	5e5e <_vfiprintf_r+0x14a>
    5e46:	7863      	ldrb	r3, [r4, #1]
    5e48:	1c62      	adds	r2, r4, #1
    5e4a:	2b2a      	cmp	r3, #42	; 0x2a
    5e4c:	d13f      	bne.n	5ece <_vfiprintf_r+0x1ba>
    5e4e:	9b05      	ldr	r3, [sp, #20]
    5e50:	3402      	adds	r4, #2
    5e52:	1d1a      	adds	r2, r3, #4
    5e54:	681b      	ldr	r3, [r3, #0]
    5e56:	9205      	str	r2, [sp, #20]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	db35      	blt.n	5ec8 <_vfiprintf_r+0x1b4>
    5e5c:	9307      	str	r3, [sp, #28]
    5e5e:	7821      	ldrb	r1, [r4, #0]
    5e60:	2203      	movs	r2, #3
    5e62:	4836      	ldr	r0, [pc, #216]	; (5f3c <_vfiprintf_r+0x228>)
    5e64:	f000 fab6 	bl	63d4 <memchr>
    5e68:	2800      	cmp	r0, #0
    5e6a:	d007      	beq.n	5e7c <_vfiprintf_r+0x168>
    5e6c:	4b33      	ldr	r3, [pc, #204]	; (5f3c <_vfiprintf_r+0x228>)
    5e6e:	682a      	ldr	r2, [r5, #0]
    5e70:	1ac0      	subs	r0, r0, r3
    5e72:	2340      	movs	r3, #64	; 0x40
    5e74:	4083      	lsls	r3, r0
    5e76:	4313      	orrs	r3, r2
    5e78:	602b      	str	r3, [r5, #0]
    5e7a:	3401      	adds	r4, #1
    5e7c:	7821      	ldrb	r1, [r4, #0]
    5e7e:	1c63      	adds	r3, r4, #1
    5e80:	2206      	movs	r2, #6
    5e82:	482f      	ldr	r0, [pc, #188]	; (5f40 <_vfiprintf_r+0x22c>)
    5e84:	9302      	str	r3, [sp, #8]
    5e86:	7629      	strb	r1, [r5, #24]
    5e88:	f000 faa4 	bl	63d4 <memchr>
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d044      	beq.n	5f1a <_vfiprintf_r+0x206>
    5e90:	4b2c      	ldr	r3, [pc, #176]	; (5f44 <_vfiprintf_r+0x230>)
    5e92:	2b00      	cmp	r3, #0
    5e94:	d12f      	bne.n	5ef6 <_vfiprintf_r+0x1e2>
    5e96:	6829      	ldr	r1, [r5, #0]
    5e98:	9b05      	ldr	r3, [sp, #20]
    5e9a:	2207      	movs	r2, #7
    5e9c:	05c9      	lsls	r1, r1, #23
    5e9e:	d528      	bpl.n	5ef2 <_vfiprintf_r+0x1de>
    5ea0:	189b      	adds	r3, r3, r2
    5ea2:	4393      	bics	r3, r2
    5ea4:	3308      	adds	r3, #8
    5ea6:	9305      	str	r3, [sp, #20]
    5ea8:	696b      	ldr	r3, [r5, #20]
    5eaa:	9a03      	ldr	r2, [sp, #12]
    5eac:	189b      	adds	r3, r3, r2
    5eae:	616b      	str	r3, [r5, #20]
    5eb0:	e74f      	b.n	5d52 <_vfiprintf_r+0x3e>
    5eb2:	425b      	negs	r3, r3
    5eb4:	60eb      	str	r3, [r5, #12]
    5eb6:	2302      	movs	r3, #2
    5eb8:	430b      	orrs	r3, r1
    5eba:	602b      	str	r3, [r5, #0]
    5ebc:	e7bf      	b.n	5e3e <_vfiprintf_r+0x12a>
    5ebe:	434b      	muls	r3, r1
    5ec0:	3401      	adds	r4, #1
    5ec2:	189b      	adds	r3, r3, r2
    5ec4:	2001      	movs	r0, #1
    5ec6:	e789      	b.n	5ddc <_vfiprintf_r+0xc8>
    5ec8:	2301      	movs	r3, #1
    5eca:	425b      	negs	r3, r3
    5ecc:	e7c6      	b.n	5e5c <_vfiprintf_r+0x148>
    5ece:	2300      	movs	r3, #0
    5ed0:	0014      	movs	r4, r2
    5ed2:	200a      	movs	r0, #10
    5ed4:	001a      	movs	r2, r3
    5ed6:	606b      	str	r3, [r5, #4]
    5ed8:	7821      	ldrb	r1, [r4, #0]
    5eda:	3930      	subs	r1, #48	; 0x30
    5edc:	2909      	cmp	r1, #9
    5ede:	d903      	bls.n	5ee8 <_vfiprintf_r+0x1d4>
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d0bc      	beq.n	5e5e <_vfiprintf_r+0x14a>
    5ee4:	9207      	str	r2, [sp, #28]
    5ee6:	e7ba      	b.n	5e5e <_vfiprintf_r+0x14a>
    5ee8:	4342      	muls	r2, r0
    5eea:	3401      	adds	r4, #1
    5eec:	1852      	adds	r2, r2, r1
    5eee:	2301      	movs	r3, #1
    5ef0:	e7f2      	b.n	5ed8 <_vfiprintf_r+0x1c4>
    5ef2:	3307      	adds	r3, #7
    5ef4:	e7d5      	b.n	5ea2 <_vfiprintf_r+0x18e>
    5ef6:	ab05      	add	r3, sp, #20
    5ef8:	9300      	str	r3, [sp, #0]
    5efa:	003a      	movs	r2, r7
    5efc:	4b12      	ldr	r3, [pc, #72]	; (5f48 <_vfiprintf_r+0x234>)
    5efe:	0029      	movs	r1, r5
    5f00:	0030      	movs	r0, r6
    5f02:	e000      	b.n	5f06 <_vfiprintf_r+0x1f2>
    5f04:	bf00      	nop
    5f06:	9003      	str	r0, [sp, #12]
    5f08:	9b03      	ldr	r3, [sp, #12]
    5f0a:	3301      	adds	r3, #1
    5f0c:	d1cc      	bne.n	5ea8 <_vfiprintf_r+0x194>
    5f0e:	89bb      	ldrh	r3, [r7, #12]
    5f10:	065b      	lsls	r3, r3, #25
    5f12:	d500      	bpl.n	5f16 <_vfiprintf_r+0x202>
    5f14:	e77b      	b.n	5e0e <_vfiprintf_r+0xfa>
    5f16:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5f18:	e77b      	b.n	5e12 <_vfiprintf_r+0xfe>
    5f1a:	ab05      	add	r3, sp, #20
    5f1c:	9300      	str	r3, [sp, #0]
    5f1e:	003a      	movs	r2, r7
    5f20:	4b09      	ldr	r3, [pc, #36]	; (5f48 <_vfiprintf_r+0x234>)
    5f22:	0029      	movs	r1, r5
    5f24:	0030      	movs	r0, r6
    5f26:	f000 f87f 	bl	6028 <_printf_i>
    5f2a:	e7ec      	b.n	5f06 <_vfiprintf_r+0x1f2>
    5f2c:	000066e4 	.word	0x000066e4
    5f30:	00006724 	.word	0x00006724
    5f34:	00006704 	.word	0x00006704
    5f38:	000066c4 	.word	0x000066c4
    5f3c:	0000672a 	.word	0x0000672a
    5f40:	0000672e 	.word	0x0000672e
    5f44:	00000000 	.word	0x00000000
    5f48:	00005cef 	.word	0x00005cef

00005f4c <_printf_common>:
    5f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f4e:	0015      	movs	r5, r2
    5f50:	9301      	str	r3, [sp, #4]
    5f52:	688a      	ldr	r2, [r1, #8]
    5f54:	690b      	ldr	r3, [r1, #16]
    5f56:	9000      	str	r0, [sp, #0]
    5f58:	000c      	movs	r4, r1
    5f5a:	4293      	cmp	r3, r2
    5f5c:	da00      	bge.n	5f60 <_printf_common+0x14>
    5f5e:	0013      	movs	r3, r2
    5f60:	0022      	movs	r2, r4
    5f62:	602b      	str	r3, [r5, #0]
    5f64:	3243      	adds	r2, #67	; 0x43
    5f66:	7812      	ldrb	r2, [r2, #0]
    5f68:	2a00      	cmp	r2, #0
    5f6a:	d001      	beq.n	5f70 <_printf_common+0x24>
    5f6c:	3301      	adds	r3, #1
    5f6e:	602b      	str	r3, [r5, #0]
    5f70:	6823      	ldr	r3, [r4, #0]
    5f72:	069b      	lsls	r3, r3, #26
    5f74:	d502      	bpl.n	5f7c <_printf_common+0x30>
    5f76:	682b      	ldr	r3, [r5, #0]
    5f78:	3302      	adds	r3, #2
    5f7a:	602b      	str	r3, [r5, #0]
    5f7c:	2706      	movs	r7, #6
    5f7e:	6823      	ldr	r3, [r4, #0]
    5f80:	401f      	ands	r7, r3
    5f82:	d027      	beq.n	5fd4 <_printf_common+0x88>
    5f84:	0023      	movs	r3, r4
    5f86:	3343      	adds	r3, #67	; 0x43
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	1e5a      	subs	r2, r3, #1
    5f8c:	4193      	sbcs	r3, r2
    5f8e:	6822      	ldr	r2, [r4, #0]
    5f90:	0692      	lsls	r2, r2, #26
    5f92:	d430      	bmi.n	5ff6 <_printf_common+0xaa>
    5f94:	0022      	movs	r2, r4
    5f96:	9901      	ldr	r1, [sp, #4]
    5f98:	3243      	adds	r2, #67	; 0x43
    5f9a:	9800      	ldr	r0, [sp, #0]
    5f9c:	9e08      	ldr	r6, [sp, #32]
    5f9e:	47b0      	blx	r6
    5fa0:	1c43      	adds	r3, r0, #1
    5fa2:	d025      	beq.n	5ff0 <_printf_common+0xa4>
    5fa4:	2306      	movs	r3, #6
    5fa6:	6820      	ldr	r0, [r4, #0]
    5fa8:	682a      	ldr	r2, [r5, #0]
    5faa:	68e1      	ldr	r1, [r4, #12]
    5fac:	4003      	ands	r3, r0
    5fae:	2500      	movs	r5, #0
    5fb0:	2b04      	cmp	r3, #4
    5fb2:	d103      	bne.n	5fbc <_printf_common+0x70>
    5fb4:	1a8d      	subs	r5, r1, r2
    5fb6:	43eb      	mvns	r3, r5
    5fb8:	17db      	asrs	r3, r3, #31
    5fba:	401d      	ands	r5, r3
    5fbc:	68a3      	ldr	r3, [r4, #8]
    5fbe:	6922      	ldr	r2, [r4, #16]
    5fc0:	4293      	cmp	r3, r2
    5fc2:	dd01      	ble.n	5fc8 <_printf_common+0x7c>
    5fc4:	1a9b      	subs	r3, r3, r2
    5fc6:	18ed      	adds	r5, r5, r3
    5fc8:	2700      	movs	r7, #0
    5fca:	42bd      	cmp	r5, r7
    5fcc:	d120      	bne.n	6010 <_printf_common+0xc4>
    5fce:	2000      	movs	r0, #0
    5fd0:	e010      	b.n	5ff4 <_printf_common+0xa8>
    5fd2:	3701      	adds	r7, #1
    5fd4:	68e3      	ldr	r3, [r4, #12]
    5fd6:	682a      	ldr	r2, [r5, #0]
    5fd8:	1a9b      	subs	r3, r3, r2
    5fda:	429f      	cmp	r7, r3
    5fdc:	dad2      	bge.n	5f84 <_printf_common+0x38>
    5fde:	0022      	movs	r2, r4
    5fe0:	2301      	movs	r3, #1
    5fe2:	3219      	adds	r2, #25
    5fe4:	9901      	ldr	r1, [sp, #4]
    5fe6:	9800      	ldr	r0, [sp, #0]
    5fe8:	9e08      	ldr	r6, [sp, #32]
    5fea:	47b0      	blx	r6
    5fec:	1c43      	adds	r3, r0, #1
    5fee:	d1f0      	bne.n	5fd2 <_printf_common+0x86>
    5ff0:	2001      	movs	r0, #1
    5ff2:	4240      	negs	r0, r0
    5ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5ff6:	2030      	movs	r0, #48	; 0x30
    5ff8:	18e1      	adds	r1, r4, r3
    5ffa:	3143      	adds	r1, #67	; 0x43
    5ffc:	7008      	strb	r0, [r1, #0]
    5ffe:	0021      	movs	r1, r4
    6000:	1c5a      	adds	r2, r3, #1
    6002:	3145      	adds	r1, #69	; 0x45
    6004:	7809      	ldrb	r1, [r1, #0]
    6006:	18a2      	adds	r2, r4, r2
    6008:	3243      	adds	r2, #67	; 0x43
    600a:	3302      	adds	r3, #2
    600c:	7011      	strb	r1, [r2, #0]
    600e:	e7c1      	b.n	5f94 <_printf_common+0x48>
    6010:	0022      	movs	r2, r4
    6012:	2301      	movs	r3, #1
    6014:	321a      	adds	r2, #26
    6016:	9901      	ldr	r1, [sp, #4]
    6018:	9800      	ldr	r0, [sp, #0]
    601a:	9e08      	ldr	r6, [sp, #32]
    601c:	47b0      	blx	r6
    601e:	1c43      	adds	r3, r0, #1
    6020:	d0e6      	beq.n	5ff0 <_printf_common+0xa4>
    6022:	3701      	adds	r7, #1
    6024:	e7d1      	b.n	5fca <_printf_common+0x7e>
	...

00006028 <_printf_i>:
    6028:	b5f0      	push	{r4, r5, r6, r7, lr}
    602a:	b08b      	sub	sp, #44	; 0x2c
    602c:	9206      	str	r2, [sp, #24]
    602e:	000a      	movs	r2, r1
    6030:	3243      	adds	r2, #67	; 0x43
    6032:	9307      	str	r3, [sp, #28]
    6034:	9005      	str	r0, [sp, #20]
    6036:	9204      	str	r2, [sp, #16]
    6038:	7e0a      	ldrb	r2, [r1, #24]
    603a:	000c      	movs	r4, r1
    603c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    603e:	2a6e      	cmp	r2, #110	; 0x6e
    6040:	d100      	bne.n	6044 <_printf_i+0x1c>
    6042:	e08f      	b.n	6164 <_printf_i+0x13c>
    6044:	d817      	bhi.n	6076 <_printf_i+0x4e>
    6046:	2a63      	cmp	r2, #99	; 0x63
    6048:	d02c      	beq.n	60a4 <_printf_i+0x7c>
    604a:	d808      	bhi.n	605e <_printf_i+0x36>
    604c:	2a00      	cmp	r2, #0
    604e:	d100      	bne.n	6052 <_printf_i+0x2a>
    6050:	e099      	b.n	6186 <_printf_i+0x15e>
    6052:	2a58      	cmp	r2, #88	; 0x58
    6054:	d054      	beq.n	6100 <_printf_i+0xd8>
    6056:	0026      	movs	r6, r4
    6058:	3642      	adds	r6, #66	; 0x42
    605a:	7032      	strb	r2, [r6, #0]
    605c:	e029      	b.n	60b2 <_printf_i+0x8a>
    605e:	2a64      	cmp	r2, #100	; 0x64
    6060:	d001      	beq.n	6066 <_printf_i+0x3e>
    6062:	2a69      	cmp	r2, #105	; 0x69
    6064:	d1f7      	bne.n	6056 <_printf_i+0x2e>
    6066:	6821      	ldr	r1, [r4, #0]
    6068:	681a      	ldr	r2, [r3, #0]
    606a:	0608      	lsls	r0, r1, #24
    606c:	d523      	bpl.n	60b6 <_printf_i+0x8e>
    606e:	1d11      	adds	r1, r2, #4
    6070:	6019      	str	r1, [r3, #0]
    6072:	6815      	ldr	r5, [r2, #0]
    6074:	e025      	b.n	60c2 <_printf_i+0x9a>
    6076:	2a73      	cmp	r2, #115	; 0x73
    6078:	d100      	bne.n	607c <_printf_i+0x54>
    607a:	e088      	b.n	618e <_printf_i+0x166>
    607c:	d808      	bhi.n	6090 <_printf_i+0x68>
    607e:	2a6f      	cmp	r2, #111	; 0x6f
    6080:	d029      	beq.n	60d6 <_printf_i+0xae>
    6082:	2a70      	cmp	r2, #112	; 0x70
    6084:	d1e7      	bne.n	6056 <_printf_i+0x2e>
    6086:	2220      	movs	r2, #32
    6088:	6809      	ldr	r1, [r1, #0]
    608a:	430a      	orrs	r2, r1
    608c:	6022      	str	r2, [r4, #0]
    608e:	e003      	b.n	6098 <_printf_i+0x70>
    6090:	2a75      	cmp	r2, #117	; 0x75
    6092:	d020      	beq.n	60d6 <_printf_i+0xae>
    6094:	2a78      	cmp	r2, #120	; 0x78
    6096:	d1de      	bne.n	6056 <_printf_i+0x2e>
    6098:	0022      	movs	r2, r4
    609a:	2178      	movs	r1, #120	; 0x78
    609c:	3245      	adds	r2, #69	; 0x45
    609e:	7011      	strb	r1, [r2, #0]
    60a0:	4a6c      	ldr	r2, [pc, #432]	; (6254 <_printf_i+0x22c>)
    60a2:	e030      	b.n	6106 <_printf_i+0xde>
    60a4:	000e      	movs	r6, r1
    60a6:	681a      	ldr	r2, [r3, #0]
    60a8:	3642      	adds	r6, #66	; 0x42
    60aa:	1d11      	adds	r1, r2, #4
    60ac:	6019      	str	r1, [r3, #0]
    60ae:	6813      	ldr	r3, [r2, #0]
    60b0:	7033      	strb	r3, [r6, #0]
    60b2:	2301      	movs	r3, #1
    60b4:	e079      	b.n	61aa <_printf_i+0x182>
    60b6:	0649      	lsls	r1, r1, #25
    60b8:	d5d9      	bpl.n	606e <_printf_i+0x46>
    60ba:	1d11      	adds	r1, r2, #4
    60bc:	6019      	str	r1, [r3, #0]
    60be:	2300      	movs	r3, #0
    60c0:	5ed5      	ldrsh	r5, [r2, r3]
    60c2:	2d00      	cmp	r5, #0
    60c4:	da03      	bge.n	60ce <_printf_i+0xa6>
    60c6:	232d      	movs	r3, #45	; 0x2d
    60c8:	9a04      	ldr	r2, [sp, #16]
    60ca:	426d      	negs	r5, r5
    60cc:	7013      	strb	r3, [r2, #0]
    60ce:	4b62      	ldr	r3, [pc, #392]	; (6258 <_printf_i+0x230>)
    60d0:	270a      	movs	r7, #10
    60d2:	9303      	str	r3, [sp, #12]
    60d4:	e02f      	b.n	6136 <_printf_i+0x10e>
    60d6:	6820      	ldr	r0, [r4, #0]
    60d8:	6819      	ldr	r1, [r3, #0]
    60da:	0605      	lsls	r5, r0, #24
    60dc:	d503      	bpl.n	60e6 <_printf_i+0xbe>
    60de:	1d08      	adds	r0, r1, #4
    60e0:	6018      	str	r0, [r3, #0]
    60e2:	680d      	ldr	r5, [r1, #0]
    60e4:	e005      	b.n	60f2 <_printf_i+0xca>
    60e6:	0640      	lsls	r0, r0, #25
    60e8:	d5f9      	bpl.n	60de <_printf_i+0xb6>
    60ea:	680d      	ldr	r5, [r1, #0]
    60ec:	1d08      	adds	r0, r1, #4
    60ee:	6018      	str	r0, [r3, #0]
    60f0:	b2ad      	uxth	r5, r5
    60f2:	4b59      	ldr	r3, [pc, #356]	; (6258 <_printf_i+0x230>)
    60f4:	2708      	movs	r7, #8
    60f6:	9303      	str	r3, [sp, #12]
    60f8:	2a6f      	cmp	r2, #111	; 0x6f
    60fa:	d018      	beq.n	612e <_printf_i+0x106>
    60fc:	270a      	movs	r7, #10
    60fe:	e016      	b.n	612e <_printf_i+0x106>
    6100:	3145      	adds	r1, #69	; 0x45
    6102:	700a      	strb	r2, [r1, #0]
    6104:	4a54      	ldr	r2, [pc, #336]	; (6258 <_printf_i+0x230>)
    6106:	9203      	str	r2, [sp, #12]
    6108:	681a      	ldr	r2, [r3, #0]
    610a:	6821      	ldr	r1, [r4, #0]
    610c:	1d10      	adds	r0, r2, #4
    610e:	6018      	str	r0, [r3, #0]
    6110:	6815      	ldr	r5, [r2, #0]
    6112:	0608      	lsls	r0, r1, #24
    6114:	d522      	bpl.n	615c <_printf_i+0x134>
    6116:	07cb      	lsls	r3, r1, #31
    6118:	d502      	bpl.n	6120 <_printf_i+0xf8>
    611a:	2320      	movs	r3, #32
    611c:	4319      	orrs	r1, r3
    611e:	6021      	str	r1, [r4, #0]
    6120:	2710      	movs	r7, #16
    6122:	2d00      	cmp	r5, #0
    6124:	d103      	bne.n	612e <_printf_i+0x106>
    6126:	2320      	movs	r3, #32
    6128:	6822      	ldr	r2, [r4, #0]
    612a:	439a      	bics	r2, r3
    612c:	6022      	str	r2, [r4, #0]
    612e:	0023      	movs	r3, r4
    6130:	2200      	movs	r2, #0
    6132:	3343      	adds	r3, #67	; 0x43
    6134:	701a      	strb	r2, [r3, #0]
    6136:	6863      	ldr	r3, [r4, #4]
    6138:	60a3      	str	r3, [r4, #8]
    613a:	2b00      	cmp	r3, #0
    613c:	db5c      	blt.n	61f8 <_printf_i+0x1d0>
    613e:	2204      	movs	r2, #4
    6140:	6821      	ldr	r1, [r4, #0]
    6142:	4391      	bics	r1, r2
    6144:	6021      	str	r1, [r4, #0]
    6146:	2d00      	cmp	r5, #0
    6148:	d158      	bne.n	61fc <_printf_i+0x1d4>
    614a:	9e04      	ldr	r6, [sp, #16]
    614c:	2b00      	cmp	r3, #0
    614e:	d064      	beq.n	621a <_printf_i+0x1f2>
    6150:	0026      	movs	r6, r4
    6152:	9b03      	ldr	r3, [sp, #12]
    6154:	3642      	adds	r6, #66	; 0x42
    6156:	781b      	ldrb	r3, [r3, #0]
    6158:	7033      	strb	r3, [r6, #0]
    615a:	e05e      	b.n	621a <_printf_i+0x1f2>
    615c:	0648      	lsls	r0, r1, #25
    615e:	d5da      	bpl.n	6116 <_printf_i+0xee>
    6160:	b2ad      	uxth	r5, r5
    6162:	e7d8      	b.n	6116 <_printf_i+0xee>
    6164:	6809      	ldr	r1, [r1, #0]
    6166:	681a      	ldr	r2, [r3, #0]
    6168:	0608      	lsls	r0, r1, #24
    616a:	d505      	bpl.n	6178 <_printf_i+0x150>
    616c:	1d11      	adds	r1, r2, #4
    616e:	6019      	str	r1, [r3, #0]
    6170:	6813      	ldr	r3, [r2, #0]
    6172:	6962      	ldr	r2, [r4, #20]
    6174:	601a      	str	r2, [r3, #0]
    6176:	e006      	b.n	6186 <_printf_i+0x15e>
    6178:	0649      	lsls	r1, r1, #25
    617a:	d5f7      	bpl.n	616c <_printf_i+0x144>
    617c:	1d11      	adds	r1, r2, #4
    617e:	6019      	str	r1, [r3, #0]
    6180:	6813      	ldr	r3, [r2, #0]
    6182:	8aa2      	ldrh	r2, [r4, #20]
    6184:	801a      	strh	r2, [r3, #0]
    6186:	2300      	movs	r3, #0
    6188:	9e04      	ldr	r6, [sp, #16]
    618a:	6123      	str	r3, [r4, #16]
    618c:	e054      	b.n	6238 <_printf_i+0x210>
    618e:	681a      	ldr	r2, [r3, #0]
    6190:	1d11      	adds	r1, r2, #4
    6192:	6019      	str	r1, [r3, #0]
    6194:	6816      	ldr	r6, [r2, #0]
    6196:	2100      	movs	r1, #0
    6198:	6862      	ldr	r2, [r4, #4]
    619a:	0030      	movs	r0, r6
    619c:	f000 f91a 	bl	63d4 <memchr>
    61a0:	2800      	cmp	r0, #0
    61a2:	d001      	beq.n	61a8 <_printf_i+0x180>
    61a4:	1b80      	subs	r0, r0, r6
    61a6:	6060      	str	r0, [r4, #4]
    61a8:	6863      	ldr	r3, [r4, #4]
    61aa:	6123      	str	r3, [r4, #16]
    61ac:	2300      	movs	r3, #0
    61ae:	9a04      	ldr	r2, [sp, #16]
    61b0:	7013      	strb	r3, [r2, #0]
    61b2:	e041      	b.n	6238 <_printf_i+0x210>
    61b4:	6923      	ldr	r3, [r4, #16]
    61b6:	0032      	movs	r2, r6
    61b8:	9906      	ldr	r1, [sp, #24]
    61ba:	9805      	ldr	r0, [sp, #20]
    61bc:	9d07      	ldr	r5, [sp, #28]
    61be:	47a8      	blx	r5
    61c0:	1c43      	adds	r3, r0, #1
    61c2:	d043      	beq.n	624c <_printf_i+0x224>
    61c4:	6823      	ldr	r3, [r4, #0]
    61c6:	2500      	movs	r5, #0
    61c8:	079b      	lsls	r3, r3, #30
    61ca:	d40f      	bmi.n	61ec <_printf_i+0x1c4>
    61cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61ce:	68e0      	ldr	r0, [r4, #12]
    61d0:	4298      	cmp	r0, r3
    61d2:	da3d      	bge.n	6250 <_printf_i+0x228>
    61d4:	0018      	movs	r0, r3
    61d6:	e03b      	b.n	6250 <_printf_i+0x228>
    61d8:	0022      	movs	r2, r4
    61da:	2301      	movs	r3, #1
    61dc:	3219      	adds	r2, #25
    61de:	9906      	ldr	r1, [sp, #24]
    61e0:	9805      	ldr	r0, [sp, #20]
    61e2:	9e07      	ldr	r6, [sp, #28]
    61e4:	47b0      	blx	r6
    61e6:	1c43      	adds	r3, r0, #1
    61e8:	d030      	beq.n	624c <_printf_i+0x224>
    61ea:	3501      	adds	r5, #1
    61ec:	68e3      	ldr	r3, [r4, #12]
    61ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    61f0:	1a9b      	subs	r3, r3, r2
    61f2:	429d      	cmp	r5, r3
    61f4:	dbf0      	blt.n	61d8 <_printf_i+0x1b0>
    61f6:	e7e9      	b.n	61cc <_printf_i+0x1a4>
    61f8:	2d00      	cmp	r5, #0
    61fa:	d0a9      	beq.n	6150 <_printf_i+0x128>
    61fc:	9e04      	ldr	r6, [sp, #16]
    61fe:	0028      	movs	r0, r5
    6200:	0039      	movs	r1, r7
    6202:	f7ff f83b 	bl	527c <__aeabi_uidivmod>
    6206:	9b03      	ldr	r3, [sp, #12]
    6208:	3e01      	subs	r6, #1
    620a:	5c5b      	ldrb	r3, [r3, r1]
    620c:	0028      	movs	r0, r5
    620e:	7033      	strb	r3, [r6, #0]
    6210:	0039      	movs	r1, r7
    6212:	f7fe ffad 	bl	5170 <__udivsi3>
    6216:	1e05      	subs	r5, r0, #0
    6218:	d1f1      	bne.n	61fe <_printf_i+0x1d6>
    621a:	2f08      	cmp	r7, #8
    621c:	d109      	bne.n	6232 <_printf_i+0x20a>
    621e:	6823      	ldr	r3, [r4, #0]
    6220:	07db      	lsls	r3, r3, #31
    6222:	d506      	bpl.n	6232 <_printf_i+0x20a>
    6224:	6863      	ldr	r3, [r4, #4]
    6226:	6922      	ldr	r2, [r4, #16]
    6228:	4293      	cmp	r3, r2
    622a:	dc02      	bgt.n	6232 <_printf_i+0x20a>
    622c:	2330      	movs	r3, #48	; 0x30
    622e:	3e01      	subs	r6, #1
    6230:	7033      	strb	r3, [r6, #0]
    6232:	9b04      	ldr	r3, [sp, #16]
    6234:	1b9b      	subs	r3, r3, r6
    6236:	6123      	str	r3, [r4, #16]
    6238:	9b07      	ldr	r3, [sp, #28]
    623a:	aa09      	add	r2, sp, #36	; 0x24
    623c:	9300      	str	r3, [sp, #0]
    623e:	0021      	movs	r1, r4
    6240:	9b06      	ldr	r3, [sp, #24]
    6242:	9805      	ldr	r0, [sp, #20]
    6244:	f7ff fe82 	bl	5f4c <_printf_common>
    6248:	1c43      	adds	r3, r0, #1
    624a:	d1b3      	bne.n	61b4 <_printf_i+0x18c>
    624c:	2001      	movs	r0, #1
    624e:	4240      	negs	r0, r0
    6250:	b00b      	add	sp, #44	; 0x2c
    6252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6254:	00006746 	.word	0x00006746
    6258:	00006735 	.word	0x00006735

0000625c <_sbrk_r>:
    625c:	2300      	movs	r3, #0
    625e:	b570      	push	{r4, r5, r6, lr}
    6260:	4c06      	ldr	r4, [pc, #24]	; (627c <_sbrk_r+0x20>)
    6262:	0005      	movs	r5, r0
    6264:	0008      	movs	r0, r1
    6266:	6023      	str	r3, [r4, #0]
    6268:	f7fe f9d0 	bl	460c <_sbrk>
    626c:	1c43      	adds	r3, r0, #1
    626e:	d103      	bne.n	6278 <_sbrk_r+0x1c>
    6270:	6823      	ldr	r3, [r4, #0]
    6272:	2b00      	cmp	r3, #0
    6274:	d000      	beq.n	6278 <_sbrk_r+0x1c>
    6276:	602b      	str	r3, [r5, #0]
    6278:	bd70      	pop	{r4, r5, r6, pc}
    627a:	46c0      	nop			; (mov r8, r8)
    627c:	20000574 	.word	0x20000574

00006280 <__sread>:
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	000c      	movs	r4, r1
    6284:	250e      	movs	r5, #14
    6286:	5f49      	ldrsh	r1, [r1, r5]
    6288:	f000 f8b2 	bl	63f0 <_read_r>
    628c:	2800      	cmp	r0, #0
    628e:	db03      	blt.n	6298 <__sread+0x18>
    6290:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6292:	181b      	adds	r3, r3, r0
    6294:	6563      	str	r3, [r4, #84]	; 0x54
    6296:	bd70      	pop	{r4, r5, r6, pc}
    6298:	89a3      	ldrh	r3, [r4, #12]
    629a:	4a02      	ldr	r2, [pc, #8]	; (62a4 <__sread+0x24>)
    629c:	4013      	ands	r3, r2
    629e:	81a3      	strh	r3, [r4, #12]
    62a0:	e7f9      	b.n	6296 <__sread+0x16>
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	ffffefff 	.word	0xffffefff

000062a8 <__swrite>:
    62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62aa:	001f      	movs	r7, r3
    62ac:	898b      	ldrh	r3, [r1, #12]
    62ae:	0005      	movs	r5, r0
    62b0:	000c      	movs	r4, r1
    62b2:	0016      	movs	r6, r2
    62b4:	05db      	lsls	r3, r3, #23
    62b6:	d505      	bpl.n	62c4 <__swrite+0x1c>
    62b8:	230e      	movs	r3, #14
    62ba:	5ec9      	ldrsh	r1, [r1, r3]
    62bc:	2200      	movs	r2, #0
    62be:	2302      	movs	r3, #2
    62c0:	f000 f874 	bl	63ac <_lseek_r>
    62c4:	89a3      	ldrh	r3, [r4, #12]
    62c6:	4a05      	ldr	r2, [pc, #20]	; (62dc <__swrite+0x34>)
    62c8:	0028      	movs	r0, r5
    62ca:	4013      	ands	r3, r2
    62cc:	81a3      	strh	r3, [r4, #12]
    62ce:	0032      	movs	r2, r6
    62d0:	230e      	movs	r3, #14
    62d2:	5ee1      	ldrsh	r1, [r4, r3]
    62d4:	003b      	movs	r3, r7
    62d6:	f000 f81f 	bl	6318 <_write_r>
    62da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62dc:	ffffefff 	.word	0xffffefff

000062e0 <__sseek>:
    62e0:	b570      	push	{r4, r5, r6, lr}
    62e2:	000c      	movs	r4, r1
    62e4:	250e      	movs	r5, #14
    62e6:	5f49      	ldrsh	r1, [r1, r5]
    62e8:	f000 f860 	bl	63ac <_lseek_r>
    62ec:	89a3      	ldrh	r3, [r4, #12]
    62ee:	1c42      	adds	r2, r0, #1
    62f0:	d103      	bne.n	62fa <__sseek+0x1a>
    62f2:	4a05      	ldr	r2, [pc, #20]	; (6308 <__sseek+0x28>)
    62f4:	4013      	ands	r3, r2
    62f6:	81a3      	strh	r3, [r4, #12]
    62f8:	bd70      	pop	{r4, r5, r6, pc}
    62fa:	2280      	movs	r2, #128	; 0x80
    62fc:	0152      	lsls	r2, r2, #5
    62fe:	4313      	orrs	r3, r2
    6300:	81a3      	strh	r3, [r4, #12]
    6302:	6560      	str	r0, [r4, #84]	; 0x54
    6304:	e7f8      	b.n	62f8 <__sseek+0x18>
    6306:	46c0      	nop			; (mov r8, r8)
    6308:	ffffefff 	.word	0xffffefff

0000630c <__sclose>:
    630c:	b510      	push	{r4, lr}
    630e:	230e      	movs	r3, #14
    6310:	5ec9      	ldrsh	r1, [r1, r3]
    6312:	f000 f815 	bl	6340 <_close_r>
    6316:	bd10      	pop	{r4, pc}

00006318 <_write_r>:
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	0005      	movs	r5, r0
    631c:	0008      	movs	r0, r1
    631e:	0011      	movs	r1, r2
    6320:	2200      	movs	r2, #0
    6322:	4c06      	ldr	r4, [pc, #24]	; (633c <_write_r+0x24>)
    6324:	6022      	str	r2, [r4, #0]
    6326:	001a      	movs	r2, r3
    6328:	f7fe f93a 	bl	45a0 <_write>
    632c:	1c43      	adds	r3, r0, #1
    632e:	d103      	bne.n	6338 <_write_r+0x20>
    6330:	6823      	ldr	r3, [r4, #0]
    6332:	2b00      	cmp	r3, #0
    6334:	d000      	beq.n	6338 <_write_r+0x20>
    6336:	602b      	str	r3, [r5, #0]
    6338:	bd70      	pop	{r4, r5, r6, pc}
    633a:	46c0      	nop			; (mov r8, r8)
    633c:	20000574 	.word	0x20000574

00006340 <_close_r>:
    6340:	2300      	movs	r3, #0
    6342:	b570      	push	{r4, r5, r6, lr}
    6344:	4c06      	ldr	r4, [pc, #24]	; (6360 <_close_r+0x20>)
    6346:	0005      	movs	r5, r0
    6348:	0008      	movs	r0, r1
    634a:	6023      	str	r3, [r4, #0]
    634c:	f7fe f97c 	bl	4648 <_close>
    6350:	1c43      	adds	r3, r0, #1
    6352:	d103      	bne.n	635c <_close_r+0x1c>
    6354:	6823      	ldr	r3, [r4, #0]
    6356:	2b00      	cmp	r3, #0
    6358:	d000      	beq.n	635c <_close_r+0x1c>
    635a:	602b      	str	r3, [r5, #0]
    635c:	bd70      	pop	{r4, r5, r6, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	20000574 	.word	0x20000574

00006364 <_fstat_r>:
    6364:	2300      	movs	r3, #0
    6366:	b570      	push	{r4, r5, r6, lr}
    6368:	4c06      	ldr	r4, [pc, #24]	; (6384 <_fstat_r+0x20>)
    636a:	0005      	movs	r5, r0
    636c:	0008      	movs	r0, r1
    636e:	0011      	movs	r1, r2
    6370:	6023      	str	r3, [r4, #0]
    6372:	f7fe f973 	bl	465c <_fstat>
    6376:	1c43      	adds	r3, r0, #1
    6378:	d103      	bne.n	6382 <_fstat_r+0x1e>
    637a:	6823      	ldr	r3, [r4, #0]
    637c:	2b00      	cmp	r3, #0
    637e:	d000      	beq.n	6382 <_fstat_r+0x1e>
    6380:	602b      	str	r3, [r5, #0]
    6382:	bd70      	pop	{r4, r5, r6, pc}
    6384:	20000574 	.word	0x20000574

00006388 <_isatty_r>:
    6388:	2300      	movs	r3, #0
    638a:	b570      	push	{r4, r5, r6, lr}
    638c:	4c06      	ldr	r4, [pc, #24]	; (63a8 <_isatty_r+0x20>)
    638e:	0005      	movs	r5, r0
    6390:	0008      	movs	r0, r1
    6392:	6023      	str	r3, [r4, #0]
    6394:	f7fe f970 	bl	4678 <_isatty>
    6398:	1c43      	adds	r3, r0, #1
    639a:	d103      	bne.n	63a4 <_isatty_r+0x1c>
    639c:	6823      	ldr	r3, [r4, #0]
    639e:	2b00      	cmp	r3, #0
    63a0:	d000      	beq.n	63a4 <_isatty_r+0x1c>
    63a2:	602b      	str	r3, [r5, #0]
    63a4:	bd70      	pop	{r4, r5, r6, pc}
    63a6:	46c0      	nop			; (mov r8, r8)
    63a8:	20000574 	.word	0x20000574

000063ac <_lseek_r>:
    63ac:	b570      	push	{r4, r5, r6, lr}
    63ae:	0005      	movs	r5, r0
    63b0:	0008      	movs	r0, r1
    63b2:	0011      	movs	r1, r2
    63b4:	2200      	movs	r2, #0
    63b6:	4c06      	ldr	r4, [pc, #24]	; (63d0 <_lseek_r+0x24>)
    63b8:	6022      	str	r2, [r4, #0]
    63ba:	001a      	movs	r2, r3
    63bc:	f7fe f965 	bl	468a <_lseek>
    63c0:	1c43      	adds	r3, r0, #1
    63c2:	d103      	bne.n	63cc <_lseek_r+0x20>
    63c4:	6823      	ldr	r3, [r4, #0]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d000      	beq.n	63cc <_lseek_r+0x20>
    63ca:	602b      	str	r3, [r5, #0]
    63cc:	bd70      	pop	{r4, r5, r6, pc}
    63ce:	46c0      	nop			; (mov r8, r8)
    63d0:	20000574 	.word	0x20000574

000063d4 <memchr>:
    63d4:	b2c9      	uxtb	r1, r1
    63d6:	1882      	adds	r2, r0, r2
    63d8:	4290      	cmp	r0, r2
    63da:	d101      	bne.n	63e0 <memchr+0xc>
    63dc:	2000      	movs	r0, #0
    63de:	4770      	bx	lr
    63e0:	7803      	ldrb	r3, [r0, #0]
    63e2:	428b      	cmp	r3, r1
    63e4:	d0fb      	beq.n	63de <memchr+0xa>
    63e6:	3001      	adds	r0, #1
    63e8:	e7f6      	b.n	63d8 <memchr+0x4>

000063ea <__malloc_lock>:
    63ea:	4770      	bx	lr

000063ec <__malloc_unlock>:
    63ec:	4770      	bx	lr
	...

000063f0 <_read_r>:
    63f0:	b570      	push	{r4, r5, r6, lr}
    63f2:	0005      	movs	r5, r0
    63f4:	0008      	movs	r0, r1
    63f6:	0011      	movs	r1, r2
    63f8:	2200      	movs	r2, #0
    63fa:	4c06      	ldr	r4, [pc, #24]	; (6414 <_read_r+0x24>)
    63fc:	6022      	str	r2, [r4, #0]
    63fe:	001a      	movs	r2, r3
    6400:	f7fe f8a4 	bl	454c <_read>
    6404:	1c43      	adds	r3, r0, #1
    6406:	d103      	bne.n	6410 <_read_r+0x20>
    6408:	6823      	ldr	r3, [r4, #0]
    640a:	2b00      	cmp	r3, #0
    640c:	d000      	beq.n	6410 <_read_r+0x20>
    640e:	602b      	str	r3, [r5, #0]
    6410:	bd70      	pop	{r4, r5, r6, pc}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	20000574 	.word	0x20000574
    6418:	000003b2 	.word	0x000003b2
    641c:	000003b6 	.word	0x000003b6
    6420:	000003ba 	.word	0x000003ba
    6424:	000003be 	.word	0x000003be
    6428:	000003c2 	.word	0x000003c2
    642c:	000003c6 	.word	0x000003c6
    6430:	000003ca 	.word	0x000003ca
    6434:	000003ce 	.word	0x000003ce
    6438:	000003d2 	.word	0x000003d2
    643c:	000003d6 	.word	0x000003d6
    6440:	0000042e 	.word	0x0000042e
    6444:	00000434 	.word	0x00000434
    6448:	0000043a 	.word	0x0000043a
    644c:	00000440 	.word	0x00000440
    6450:	00000440 	.word	0x00000440
    6454:	00000446 	.word	0x00000446
    6458:	00000446 	.word	0x00000446
    645c:	00000446 	.word	0x00000446
    6460:	0000044c 	.word	0x0000044c
    6464:	00000452 	.word	0x00000452
    6468:	000011c8 	.word	0x000011c8
    646c:	000011c8 	.word	0x000011c8
    6470:	000011bc 	.word	0x000011bc
    6474:	000011c8 	.word	0x000011c8
    6478:	000011bc 	.word	0x000011bc
    647c:	00001196 	.word	0x00001196
    6480:	00001196 	.word	0x00001196
    6484:	000011c8 	.word	0x000011c8
    6488:	000011c8 	.word	0x000011c8
    648c:	000011c8 	.word	0x000011c8
    6490:	000011c8 	.word	0x000011c8
    6494:	000011c8 	.word	0x000011c8
    6498:	000011c8 	.word	0x000011c8
    649c:	000011c8 	.word	0x000011c8
    64a0:	000011c8 	.word	0x000011c8
    64a4:	000011c8 	.word	0x000011c8
    64a8:	000011c8 	.word	0x000011c8
    64ac:	000011c8 	.word	0x000011c8
    64b0:	000011c8 	.word	0x000011c8
    64b4:	000011c8 	.word	0x000011c8
    64b8:	000011c8 	.word	0x000011c8
    64bc:	000011c8 	.word	0x000011c8
    64c0:	000011c8 	.word	0x000011c8
    64c4:	000011c8 	.word	0x000011c8
    64c8:	000011c8 	.word	0x000011c8
    64cc:	000011c8 	.word	0x000011c8
    64d0:	000011c8 	.word	0x000011c8
    64d4:	000011c8 	.word	0x000011c8
    64d8:	000011c8 	.word	0x000011c8
    64dc:	000011c8 	.word	0x000011c8
    64e0:	000011c8 	.word	0x000011c8
    64e4:	000011c8 	.word	0x000011c8
    64e8:	000011c8 	.word	0x000011c8
    64ec:	000011c8 	.word	0x000011c8
    64f0:	000011c8 	.word	0x000011c8
    64f4:	000011c8 	.word	0x000011c8
    64f8:	000011c8 	.word	0x000011c8
    64fc:	000011c8 	.word	0x000011c8
    6500:	000011c8 	.word	0x000011c8
    6504:	000011c8 	.word	0x000011c8
    6508:	000011c8 	.word	0x000011c8
    650c:	000011c8 	.word	0x000011c8
    6510:	000011c8 	.word	0x000011c8
    6514:	000011c8 	.word	0x000011c8
    6518:	000011c8 	.word	0x000011c8
    651c:	000011c8 	.word	0x000011c8
    6520:	000011c8 	.word	0x000011c8
    6524:	000011c8 	.word	0x000011c8
    6528:	000011c8 	.word	0x000011c8
    652c:	000011c8 	.word	0x000011c8
    6530:	000011c8 	.word	0x000011c8
    6534:	000011c8 	.word	0x000011c8
    6538:	000011c8 	.word	0x000011c8
    653c:	000011c8 	.word	0x000011c8
    6540:	000011c8 	.word	0x000011c8
    6544:	000011c8 	.word	0x000011c8
    6548:	000011c8 	.word	0x000011c8
    654c:	000011c8 	.word	0x000011c8
    6550:	000011c8 	.word	0x000011c8
    6554:	000011c8 	.word	0x000011c8
    6558:	000011c8 	.word	0x000011c8
    655c:	000011c8 	.word	0x000011c8
    6560:	000011c8 	.word	0x000011c8
    6564:	000011c8 	.word	0x000011c8
    6568:	000011bc 	.word	0x000011bc
    656c:	000011bc 	.word	0x000011bc
    6570:	000011d2 	.word	0x000011d2
    6574:	000011d2 	.word	0x000011d2
    6578:	000011d2 	.word	0x000011d2
    657c:	000011d2 	.word	0x000011d2
    6580:	42000800 	.word	0x42000800
    6584:	42000c00 	.word	0x42000c00
    6588:	42001000 	.word	0x42001000
    658c:	42001400 	.word	0x42001400
    6590:	42001800 	.word	0x42001800
    6594:	42001c00 	.word	0x42001c00
    6598:	0c0b0a09 	.word	0x0c0b0a09
    659c:	00000e0d 	.word	0x00000e0d
    65a0:	00003ade 	.word	0x00003ade
    65a4:	00003b56 	.word	0x00003b56
    65a8:	00003b56 	.word	0x00003b56
    65ac:	00003afc 	.word	0x00003afc
    65b0:	00003af6 	.word	0x00003af6
    65b4:	00003b02 	.word	0x00003b02
    65b8:	00003ae4 	.word	0x00003ae4
    65bc:	00003b08 	.word	0x00003b08
    65c0:	00003b3c 	.word	0x00003b3c
    65c4:	00003c30 	.word	0x00003c30
    65c8:	00003c80 	.word	0x00003c80
    65cc:	00003c80 	.word	0x00003c80
    65d0:	00003c7c 	.word	0x00003c7c
    65d4:	00003c22 	.word	0x00003c22
    65d8:	00003c42 	.word	0x00003c42
    65dc:	00003c12 	.word	0x00003c12
    65e0:	00003c54 	.word	0x00003c54
    65e4:	00003c66 	.word	0x00003c66
    65e8:	41206e49 	.word	0x41206e49
    65ec:	696c7070 	.word	0x696c7070
    65f0:	69746163 	.word	0x69746163
    65f4:	0a216e6f 	.word	0x0a216e6f
    65f8:	0000000d 	.word	0x0000000d
    65fc:	69676542 	.word	0x69676542
    6600:	676e696e 	.word	0x676e696e
    6604:	73657420 	.word	0x73657420
    6608:	666f2074 	.word	0x666f2074
    660c:	616c4620 	.word	0x616c4620
    6610:	52206873 	.word	0x52206873
    6614:	2e2e2e57 	.word	0x2e2e2e57
    6618:	0000000d 	.word	0x0000000d
    661c:	73616c46 	.word	0x73616c46
    6620:	68632068 	.word	0x68632068
    6624:	6d207069 	.word	0x6d207069
    6628:	69737369 	.word	0x69737369
    662c:	0d21676e 	.word	0x0d21676e
    6630:	00000000 	.word	0x00000000
    6634:	33435243 	.word	0x33435243
    6638:	65522032 	.word	0x65522032
    663c:	746c7573 	.word	0x746c7573
    6640:	20666f20 	.word	0x20666f20
    6644:	64616572 	.word	0x64616572
    6648:	7825203a 	.word	0x7825203a
    664c:	00000a0d 	.word	0x00000a0d
    6650:	33435243 	.word	0x33435243
    6654:	65522032 	.word	0x65522032
    6658:	746c7573 	.word	0x746c7573
    665c:	20666f20 	.word	0x20666f20
    6660:	74697277 	.word	0x74697277
    6664:	25203a65 	.word	0x25203a65
    6668:	000a0d78 	.word	0x000a0d78
    666c:	72617453 	.word	0x72617453
    6670:	676e6974 	.word	0x676e6974
    6674:	73657420 	.word	0x73657420
    6678:	666f2074 	.word	0x666f2074
    667c:	4d564e20 	.word	0x4d564e20
    6680:	2e575220 	.word	0x2e575220
    6684:	000d2e2e 	.word	0x000d2e2e
    6688:	54205752 	.word	0x54205752
    668c:	73747365 	.word	0x73747365
    6690:	6e6f6420 	.word	0x6e6f6420
    6694:	2e2e2e65 	.word	0x2e2e2e65
    6698:	65727020 	.word	0x65727020
    669c:	74207373 	.word	0x74207373
    66a0:	64206568 	.word	0x64206568
    66a4:	67756265 	.word	0x67756265
    66a8:	74756220 	.word	0x74756220
    66ac:	206e6f74 	.word	0x206e6f74
    66b0:	20726f66 	.word	0x20726f66
    66b4:	20656874 	.word	0x20656874
    66b8:	2e44454c 	.word	0x2e44454c
    66bc:	0000000d 	.word	0x0000000d

000066c0 <_global_impure_ptr>:
    66c0:	20000008                                ... 

000066c4 <__sf_fake_stderr>:
	...

000066e4 <__sf_fake_stdin>:
	...

00006704 <__sf_fake_stdout>:
	...
    6724:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6734:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6744:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6754:	00006665                                ef..

00006758 <_init>:
    6758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    675a:	46c0      	nop			; (mov r8, r8)
    675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    675e:	bc08      	pop	{r3}
    6760:	469e      	mov	lr, r3
    6762:	4770      	bx	lr

00006764 <__init_array_start>:
    6764:	000000dd 	.word	0x000000dd

00006768 <_fini>:
    6768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    676e:	bc08      	pop	{r3}
    6770:	469e      	mov	lr, r3
    6772:	4770      	bx	lr

00006774 <__fini_array_start>:
    6774:	000000b5 	.word	0x000000b5
